<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/CollisionAvoidanceBackend.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:49">package <name pos:start="1:9" pos:end="1:48"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:29">core</name><operator pos:start="1:30" pos:end="1:30">.</operator><name pos:start="1:31" pos:end="1:48">collisionavoidance</name></name>;</package>

<import pos:start="3:1" pos:end="3:65">import <name pos:start="3:8" pos:end="3:64"><name pos:start="3:8" pos:end="3:10">edu</name><operator pos:start="3:11" pos:end="3:11">.</operator><name pos:start="3:12" pos:end="3:13">nd</name><operator pos:start="3:14" pos:end="3:14">.</operator><name pos:start="3:15" pos:end="3:23">dronology</name><operator pos:start="3:24" pos:end="3:24">.</operator><name pos:start="3:25" pos:end="3:28">core</name><operator pos:start="3:29" pos:end="3:29">.</operator><name pos:start="3:30" pos:end="3:47">collisionavoidance</name><operator pos:start="3:48" pos:end="3:48">.</operator><name pos:start="3:49" pos:end="3:62">backendmessage</name><operator pos:start="3:63" pos:end="3:63">.</operator><name pos:start="3:64" pos:end="3:64">*</name></name>;</import>
<import pos:start="4:1" pos:end="4:54">import <name pos:start="4:8" pos:end="4:53"><name pos:start="4:8" pos:end="4:10">edu</name><operator pos:start="4:11" pos:end="4:11">.</operator><name pos:start="4:12" pos:end="4:13">nd</name><operator pos:start="4:14" pos:end="4:14">.</operator><name pos:start="4:15" pos:end="4:23">dronology</name><operator pos:start="4:24" pos:end="4:24">.</operator><name pos:start="4:25" pos:end="4:28">core</name><operator pos:start="4:29" pos:end="4:29">.</operator><name pos:start="4:30" pos:end="4:39">coordinate</name><operator pos:start="4:40" pos:end="4:40">.</operator><name pos:start="4:41" pos:end="4:53">LlaCoordinate</name></name>;</import>
<import pos:start="5:1" pos:end="5:50">import <name pos:start="5:8" pos:end="5:49"><name pos:start="5:8" pos:end="5:10">edu</name><operator pos:start="5:11" pos:end="5:11">.</operator><name pos:start="5:12" pos:end="5:13">nd</name><operator pos:start="5:14" pos:end="5:14">.</operator><name pos:start="5:15" pos:end="5:23">dronology</name><operator pos:start="5:24" pos:end="5:24">.</operator><name pos:start="5:25" pos:end="5:28">core</name><operator pos:start="5:29" pos:end="5:29">.</operator><name pos:start="5:30" pos:end="5:36">vehicle</name><operator pos:start="5:37" pos:end="5:37">.</operator><name pos:start="5:38" pos:end="5:49">ManagedDrone</name></name>;</import>
<import pos:start="6:1" pos:end="6:30">import <name pos:start="6:8" pos:end="6:29"><name pos:start="6:8" pos:end="6:10">net</name><operator pos:start="6:11" pos:end="6:11">.</operator><name pos:start="6:12" pos:end="6:13">mv</name><operator pos:start="6:14" pos:end="6:14">.</operator><name pos:start="6:15" pos:end="6:21">logging</name><operator pos:start="6:22" pos:end="6:22">.</operator><name pos:start="6:23" pos:end="6:29">ILogger</name></name>;</import>
<import pos:start="7:1" pos:end="7:37">import <name pos:start="7:8" pos:end="7:36"><name pos:start="7:8" pos:end="7:10">net</name><operator pos:start="7:11" pos:end="7:11">.</operator><name pos:start="7:12" pos:end="7:13">mv</name><operator pos:start="7:14" pos:end="7:14">.</operator><name pos:start="7:15" pos:end="7:21">logging</name><operator pos:start="7:22" pos:end="7:22">.</operator><name pos:start="7:23" pos:end="7:36">LoggerProvider</name></name>;</import>
<import pos:start="8:1" pos:end="8:67">import <name pos:start="8:8" pos:end="8:66"><name pos:start="8:8" pos:end="8:10">org</name><operator pos:start="8:11" pos:end="8:11">.</operator><name pos:start="8:12" pos:end="8:17">apache</name><operator pos:start="8:18" pos:end="8:18">.</operator><name pos:start="8:19" pos:end="8:25">commons</name><operator pos:start="8:26" pos:end="8:26">.</operator><name pos:start="8:27" pos:end="8:31">math3</name><operator pos:start="8:32" pos:end="8:32">.</operator><name pos:start="8:33" pos:end="8:40">geometry</name><operator pos:start="8:41" pos:end="8:41">.</operator><name pos:start="8:42" pos:end="8:50">euclidean</name><operator pos:start="8:51" pos:end="8:51">.</operator><name pos:start="8:52" pos:end="8:57">threed</name><operator pos:start="8:58" pos:end="8:58">.</operator><name pos:start="8:59" pos:end="8:66">Vector3D</name></name>;</import>

<import pos:start="10:1" pos:end="10:19">import <name pos:start="10:8" pos:end="10:18"><name pos:start="10:8" pos:end="10:11">java</name><operator pos:start="10:12" pos:end="10:12">.</operator><name pos:start="10:13" pos:end="10:16">util</name><operator pos:start="10:17" pos:end="10:17">.</operator><name pos:start="10:18" pos:end="10:18">*</name></name>;</import>
<import pos:start="11:1" pos:end="11:47">import <name pos:start="11:8" pos:end="11:46"><name pos:start="11:8" pos:end="11:11">java</name><operator pos:start="11:12" pos:end="11:12">.</operator><name pos:start="11:13" pos:end="11:16">util</name><operator pos:start="11:17" pos:end="11:17">.</operator><name pos:start="11:18" pos:end="11:27">concurrent</name><operator pos:start="11:28" pos:end="11:28">.</operator><name pos:start="11:29" pos:end="11:46">ArrayBlockingQueue</name></name>;</import>
<import pos:start="12:1" pos:end="12:37">import <name pos:start="12:8" pos:end="12:36"><name pos:start="12:8" pos:end="12:11">java</name><operator pos:start="12:12" pos:end="12:12">.</operator><name pos:start="12:13" pos:end="12:16">util</name><operator pos:start="12:17" pos:end="12:17">.</operator><name pos:start="12:18" pos:end="12:27">concurrent</name><operator pos:start="12:28" pos:end="12:28">.</operator><name pos:start="12:29" pos:end="12:36">TimeUnit</name></name>;</import>
<import pos:start="13:1" pos:end="13:35">import <name pos:start="13:8" pos:end="13:34"><name pos:start="13:8" pos:end="13:11">java</name><operator pos:start="13:12" pos:end="13:12">.</operator><name pos:start="13:13" pos:end="13:16">util</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:23">stream</name><operator pos:start="13:24" pos:end="13:24">.</operator><name pos:start="13:25" pos:end="13:34">Collectors</name></name>;</import>

<comment type="block" format="javadoc" pos:start="15:1" pos:end="50:3">/**
 * &lt;p&gt;
 * The CollisionAvoidanceBackend is responsible for running the CollisionAvoider. Observes are registered in
 * ManagedDrone(s) and PhysicalDrone(s). These Observes pass along state. In the case of ManagedDrone, that state is the
 * set of active goals and the commandQueue. For PhysicalDrone, it's the drone's sensed state (its position, velocity
 * etc.). The data from both is combined to create DroneSnapshot(s) so that CollisionAvoider.avoid() can be called.
 * &lt;/p&gt;
 *
 * &lt;h2&gt;implementation details (subject to change)&lt;/h2&gt;
 * &lt;p&gt;
 * The idea behind CollisionAvoidanceBackend is to create an actor inspired object that only does work in response to
 * messages coming into its mailbox. CollisionAvoidanceBackend can do four things:
 * &lt;ul&gt;
 *     &lt;li&gt;Run CollisionAvoider.avoid() and disperse guidance to the managed drones. This class expects a stand-alone
 *     timer task to send this message periodically.&lt;/li&gt;
 *
 *     &lt;li&gt;Receive an update message from a managed drone. This message includes a snapshot of the active goals as well
 *     as the queue of commands currently being executed. Messages of this type come in when the set of active goals
 *     changes or when the queue of commands changes. This happens when a goal or command is completed, for example.
 *     &lt;/li&gt;
 *
 *     &lt;li&gt;Receive an update message from a physical drone. This message contains data sensed by a drones (its position,
 *     velocity, etc.). Messages of this type come in when new data is received from the drone.&lt;/li&gt;
 *
 *     &lt;li&gt;Receive a stop command. This message should come in when the program is shutting down. This message causes
 *     the thread to gracefully stop.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;/p&gt;
 *
 *  &lt;p&gt;
 *     The {@link CollisionAvoidanceMessenger} object returned by {@link #getMessenger()} takes care of
 *     converting method calls into messages and delivering them to CollisionAvoidanceBackend's mailbox. All the
 *     functionality offered by this class is made accessible by the CollisionAvoidanceMessenger.
 * &lt;/p&gt;
 * @see CollisionAvoidanceMessenger
 */</comment>
<class pos:start="51:1" pos:end="152:1"><specifier pos:start="51:1" pos:end="51:6">public</specifier> class <name pos:start="51:14" pos:end="51:38">CollisionAvoidanceBackend</name> <super_list pos:start="51:40" pos:end="51:58"><implements pos:start="51:40" pos:end="51:58">implements <super pos:start="51:51" pos:end="51:58"><name pos:start="51:51" pos:end="51:58">Runnable</name></super></implements></super_list> <block pos:start="51:60" pos:end="152:1">{
    <decl_stmt pos:start="52:5" pos:end="52:100"><decl pos:start="52:5" pos:end="52:99"><type pos:start="52:5" pos:end="52:32"><specifier pos:start="52:5" pos:end="52:11">private</specifier> <specifier pos:start="52:13" pos:end="52:18">static</specifier> <specifier pos:start="52:20" pos:end="52:24">final</specifier> <name pos:start="52:26" pos:end="52:32">ILogger</name></type> <name pos:start="52:34" pos:end="52:39">LOGGER</name> <init pos:start="52:41" pos:end="52:99">= <expr pos:start="52:43" pos:end="52:99"><call pos:start="52:43" pos:end="52:99"><name pos:start="52:43" pos:end="52:66"><name pos:start="52:43" pos:end="52:56">LoggerProvider</name><operator pos:start="52:57" pos:end="52:57">.</operator><name pos:start="52:58" pos:end="52:66">getLogger</name></name><argument_list pos:start="52:67" pos:end="52:99">(<argument pos:start="52:68" pos:end="52:98"><expr pos:start="52:68" pos:end="52:98"><name pos:start="52:68" pos:end="52:98"><name pos:start="52:68" pos:end="52:92">CollisionAvoidanceBackend</name><operator pos:start="52:93" pos:end="52:93">.</operator><name pos:start="52:94" pos:end="52:98">class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="53:5" pos:end="53:53"><decl pos:start="53:5" pos:end="53:52"><type pos:start="53:5" pos:end="53:32"><specifier pos:start="53:5" pos:end="53:11">private</specifier> <specifier pos:start="53:13" pos:end="53:18">static</specifier> <specifier pos:start="53:20" pos:end="53:24">final</specifier> <name pos:start="53:26" pos:end="53:32">boolean</name></type> <name pos:start="53:34" pos:end="53:45">FIFO_MAILBOX</name> <init pos:start="53:47" pos:end="53:52">= <expr pos:start="53:49" pos:end="53:52"><literal type="boolean" pos:start="53:49" pos:end="53:52">true</literal></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:start="54:5" pos:end="54:63">// TODO get this value, MAX_UAVS, from a configuration file</comment>
    <decl_stmt pos:start="55:5" pos:end="55:43"><decl pos:start="55:5" pos:end="55:42"><type pos:start="55:5" pos:end="55:28"><specifier pos:start="55:5" pos:end="55:11">private</specifier> <specifier pos:start="55:13" pos:end="55:18">static</specifier> <specifier pos:start="55:20" pos:end="55:24">final</specifier> <name pos:start="55:26" pos:end="55:28">int</name></type> <name pos:start="55:30" pos:end="55:37">MAX_UAVS</name> <init pos:start="55:39" pos:end="55:42">= <expr pos:start="55:41" pos:end="55:42"><literal type="number" pos:start="55:41" pos:end="55:42">10</literal></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:start="56:5" pos:end="56:77">// TODO get this value, UAV_REPORTS_PER_SECOND, from a configuration file</comment>
    <decl_stmt pos:start="57:5" pos:end="57:56"><decl pos:start="57:5" pos:end="57:55"><type pos:start="57:5" pos:end="57:28"><specifier pos:start="57:5" pos:end="57:11">private</specifier> <specifier pos:start="57:13" pos:end="57:18">static</specifier> <specifier pos:start="57:20" pos:end="57:24">final</specifier> <name pos:start="57:26" pos:end="57:28">int</name></type> <name pos:start="57:30" pos:end="57:51">UAV_REPORTS_PER_SECOND</name> <init pos:start="57:53" pos:end="57:55">= <expr pos:start="57:55" pos:end="57:55"><literal type="number" pos:start="57:55" pos:end="57:55">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="58:5" pos:end="58:55"><decl pos:start="58:5" pos:end="58:54"><type pos:start="58:5" pos:end="58:28"><specifier pos:start="58:5" pos:end="58:11">private</specifier> <specifier pos:start="58:13" pos:end="58:18">static</specifier> <specifier pos:start="58:20" pos:end="58:24">final</specifier> <name pos:start="58:26" pos:end="58:28">int</name></type> <name pos:start="58:30" pos:end="58:50">MAILBOX_BUFFER_FACTOR</name> <init pos:start="58:52" pos:end="58:54">= <expr pos:start="58:54" pos:end="58:54"><literal type="number" pos:start="58:54" pos:end="58:54">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="59:5" pos:end="59:106"><decl pos:start="59:5" pos:end="59:105"><type pos:start="59:5" pos:end="59:28"><specifier pos:start="59:5" pos:end="59:11">private</specifier> <specifier pos:start="59:13" pos:end="59:18">static</specifier> <specifier pos:start="59:20" pos:end="59:24">final</specifier> <name pos:start="59:26" pos:end="59:28">int</name></type> <name pos:start="59:30" pos:end="59:45">MAILBOX_CAPACITY</name> <init pos:start="59:47" pos:end="59:105">= <expr pos:start="59:49" pos:end="59:105"><name pos:start="59:49" pos:end="59:56">MAX_UAVS</name> <operator pos:start="59:58" pos:end="59:58">*</operator> <name pos:start="59:60" pos:end="59:81">UAV_REPORTS_PER_SECOND</name> <operator pos:start="59:83" pos:end="59:83">*</operator> <name pos:start="59:85" pos:end="59:105">MAILBOX_BUFFER_FACTOR</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:121"><decl pos:start="61:5" pos:end="61:120"><type pos:start="61:5" pos:end="61:53"><specifier pos:start="61:5" pos:end="61:11">private</specifier> <specifier pos:start="61:13" pos:end="61:17">final</specifier> <name pos:start="61:19" pos:end="61:53"><name pos:start="61:19" pos:end="61:36">ArrayBlockingQueue</name><argument_list type="generic" pos:start="61:37" pos:end="61:53">&lt;<argument pos:start="61:38" pos:end="61:52"><name pos:start="61:38" pos:end="61:52">AbstractMessage</name></argument>&gt;</argument_list></name></type> <name pos:start="61:55" pos:end="61:61">mailbox</name> <init pos:start="61:63" pos:end="61:120">= <expr pos:start="61:65" pos:end="61:120"><operator pos:start="61:65" pos:end="61:67">new</operator> <call pos:start="61:69" pos:end="61:120"><name pos:start="61:69" pos:end="61:88"><name pos:start="61:69" pos:end="61:86">ArrayBlockingQueue</name><argument_list type="generic" pos:start="61:87" pos:end="61:88">&lt;&gt;</argument_list></name><argument_list pos:start="61:89" pos:end="61:120">(<argument pos:start="61:90" pos:end="61:105"><expr pos:start="61:90" pos:end="61:105"><name pos:start="61:90" pos:end="61:105">MAILBOX_CAPACITY</name></expr></argument>, <argument pos:start="61:108" pos:end="61:119"><expr pos:start="61:108" pos:end="61:119"><name pos:start="61:108" pos:end="61:119">FIFO_MAILBOX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="62:5" pos:end="62:51"><decl pos:start="62:5" pos:end="62:50"><type pos:start="62:5" pos:end="62:34"><specifier pos:start="62:5" pos:end="62:11">private</specifier> <specifier pos:start="62:13" pos:end="62:17">final</specifier> <name pos:start="62:19" pos:end="62:34">CollisionAvoider</name></type> <name pos:start="62:36" pos:end="62:50">avoiderStrategy</name></decl>;</decl_stmt>
    <decl_stmt pos:start="63:5" pos:end="63:56"><decl pos:start="63:5" pos:end="63:55"><type pos:start="63:5" pos:end="63:45"><specifier pos:start="63:5" pos:end="63:11">private</specifier> <specifier pos:start="63:13" pos:end="63:17">final</specifier> <name pos:start="63:19" pos:end="63:45">CollisionAvoidanceMessenger</name></type> <name pos:start="63:47" pos:end="63:55">messenger</name></decl>;</decl_stmt>
    <decl_stmt pos:start="64:5" pos:end="64:88"><decl pos:start="64:5" pos:end="64:87"><type pos:start="64:5" pos:end="64:57"><specifier pos:start="64:5" pos:end="64:11">private</specifier> <specifier pos:start="64:13" pos:end="64:17">final</specifier> <name pos:start="64:19" pos:end="64:57"><name pos:start="64:19" pos:end="64:21">Map</name><argument_list type="generic" pos:start="64:22" pos:end="64:57">&lt;<argument pos:start="64:23" pos:end="64:28"><name pos:start="64:23" pos:end="64:28">String</name></argument>, <argument pos:start="64:31" pos:end="64:56"><name pos:start="64:31" pos:end="64:56">PhysicalDroneUpdateMessage</name></argument>&gt;</argument_list></name></type> <name pos:start="64:59" pos:end="64:69">droneStates</name> <init pos:start="64:71" pos:end="64:87">= <expr pos:start="64:73" pos:end="64:87"><operator pos:start="64:73" pos:end="64:75">new</operator> <call pos:start="64:77" pos:end="64:87"><name pos:start="64:77" pos:end="64:85"><name pos:start="64:77" pos:end="64:83">HashMap</name><argument_list type="generic" pos:start="64:84" pos:end="64:85">&lt;&gt;</argument_list></name><argument_list pos:start="64:86" pos:end="64:87">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="65:5" pos:end="65:89"><decl pos:start="65:5" pos:end="65:88"><type pos:start="65:5" pos:end="65:56"><specifier pos:start="65:5" pos:end="65:11">private</specifier> <specifier pos:start="65:13" pos:end="65:17">final</specifier> <name pos:start="65:19" pos:end="65:56"><name pos:start="65:19" pos:end="65:21">Map</name><argument_list type="generic" pos:start="65:22" pos:end="65:56">&lt;<argument pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:28">String</name></argument>, <argument pos:start="65:31" pos:end="65:55"><name pos:start="65:31" pos:end="65:55">ManagedDroneUpdateMessage</name></argument>&gt;</argument_list></name></type> <name pos:start="65:58" pos:end="65:70">droneControls</name> <init pos:start="65:72" pos:end="65:88">= <expr pos:start="65:74" pos:end="65:88"><operator pos:start="65:74" pos:end="65:76">new</operator> <call pos:start="65:78" pos:end="65:88"><name pos:start="65:78" pos:end="65:86"><name pos:start="65:78" pos:end="65:84">HashMap</name><argument_list type="generic" pos:start="65:85" pos:end="65:86">&lt;&gt;</argument_list></name><argument_list pos:start="65:87" pos:end="65:88">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:35"><decl pos:start="67:5" pos:end="67:34"><type pos:start="67:5" pos:end="67:19"><specifier pos:start="67:5" pos:end="67:11">private</specifier> <name pos:start="67:13" pos:end="67:19">boolean</name></type> <name pos:start="67:21" pos:end="67:27">running</name> <init pos:start="67:29" pos:end="67:34">= <expr pos:start="67:31" pos:end="67:34"><literal type="boolean" pos:start="67:31" pos:end="67:34">true</literal></expr></init></decl>;</decl_stmt>

    <constructor pos:start="69:5" pos:end="72:5"><specifier pos:start="69:5" pos:end="69:10">public</specifier> <name pos:start="69:12" pos:end="69:36">CollisionAvoidanceBackend</name><parameter_list pos:start="69:37" pos:end="69:70">(<parameter pos:start="69:38" pos:end="69:69"><decl pos:start="69:38" pos:end="69:69"><type pos:start="69:38" pos:end="69:53"><name pos:start="69:38" pos:end="69:53">CollisionAvoider</name></type> <name pos:start="69:55" pos:end="69:69">avoiderStrategy</name></decl></parameter>)</parameter_list> <block pos:start="69:72" pos:end="72:5">{<block_content pos:start="70:9" pos:end="71:71">
        <expr_stmt pos:start="70:9" pos:end="70:47"><expr pos:start="70:9" pos:end="70:46"><name pos:start="70:9" pos:end="70:28"><name pos:start="70:9" pos:end="70:12">this</name><operator pos:start="70:13" pos:end="70:13">.</operator><name pos:start="70:14" pos:end="70:28">avoiderStrategy</name></name> <operator pos:start="70:30" pos:end="70:30">=</operator> <name pos:start="70:32" pos:end="70:46">avoiderStrategy</name></expr>;</expr_stmt>
        <expr_stmt pos:start="71:9" pos:end="71:71"><expr pos:start="71:9" pos:end="71:70"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:12">this</name><operator pos:start="71:13" pos:end="71:13">.</operator><name pos:start="71:14" pos:end="71:22">messenger</name></name> <operator pos:start="71:24" pos:end="71:24">=</operator> <operator pos:start="71:26" pos:end="71:28">new</operator> <call pos:start="71:30" pos:end="71:70"><name pos:start="71:30" pos:end="71:56">CollisionAvoidanceMessenger</name><argument_list pos:start="71:57" pos:end="71:70">(<argument pos:start="71:58" pos:end="71:69"><expr pos:start="71:58" pos:end="71:69"><name pos:start="71:58" pos:end="71:69"><name pos:start="71:58" pos:end="71:61">this</name><operator pos:start="71:62" pos:end="71:62">.</operator><name pos:start="71:63" pos:end="71:69">mailbox</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function pos:start="74:5" pos:end="76:5"><type pos:start="74:5" pos:end="74:38"><specifier pos:start="74:5" pos:end="74:10">public</specifier> <name pos:start="74:12" pos:end="74:38">CollisionAvoidanceMessenger</name></type> <name pos:start="74:40" pos:end="74:51">getMessenger</name><parameter_list pos:start="74:52" pos:end="74:53">()</parameter_list> <block pos:start="74:55" pos:end="76:5">{<block_content pos:start="75:9" pos:end="75:30">
        <return pos:start="75:9" pos:end="75:30">return <expr pos:start="75:16" pos:end="75:29"><name pos:start="75:16" pos:end="75:29"><name pos:start="75:16" pos:end="75:19">this</name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:29">messenger</name></name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="78:5" pos:end="80:5"><type pos:start="78:5" pos:end="78:16"><specifier pos:start="78:5" pos:end="78:11">private</specifier> <name pos:start="78:13" pos:end="78:16">void</name></type> <name pos:start="78:18" pos:end="78:21">stop</name><parameter_list pos:start="78:22" pos:end="78:23">()</parameter_list> <block pos:start="78:25" pos:end="80:5">{<block_content pos:start="79:9" pos:end="79:24">
        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:15">running</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <literal type="boolean" pos:start="79:19" pos:end="79:23">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="82:5" pos:end="112:5"><type pos:start="82:5" pos:end="82:15"><specifier pos:start="82:5" pos:end="82:10">public</specifier> <name pos:start="82:12" pos:end="82:15">void</name></type> <name pos:start="82:17" pos:end="82:19">run</name><parameter_list pos:start="82:20" pos:end="82:21">()</parameter_list> <block pos:start="82:23" pos:end="112:5">{<block_content pos:start="83:9" pos:end="111:9">
        <decl_stmt pos:start="83:9" pos:end="83:29"><decl pos:start="83:9" pos:end="83:28"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:24">timeoutCount</name> <init pos:start="83:26" pos:end="83:28">= <expr pos:start="83:28" pos:end="83:28"><literal type="number" pos:start="83:28" pos:end="83:28">0</literal></expr></init></decl>;</decl_stmt>
        <while pos:start="84:9" pos:end="111:9">while<condition pos:start="84:14" pos:end="84:22">(<expr pos:start="84:15" pos:end="84:21"><name pos:start="84:15" pos:end="84:21">running</name></expr>)</condition> <block pos:start="84:24" pos:end="111:9">{<block_content pos:start="85:13" pos:end="110:13">
            <try pos:start="85:13" pos:end="110:13">try <block pos:start="85:17" pos:end="107:13">{<block_content pos:start="86:17" pos:end="106:17">
                <decl_stmt pos:start="86:17" pos:end="86:84"><decl pos:start="86:17" pos:end="86:83"><type pos:start="86:17" pos:end="86:31"><name pos:start="86:17" pos:end="86:31">AbstractMessage</name></type> <name pos:start="86:33" pos:end="86:39">message</name> <init pos:start="86:41" pos:end="86:83">= <expr pos:start="86:43" pos:end="86:83"><call pos:start="86:43" pos:end="86:83"><name pos:start="86:43" pos:end="86:54"><name pos:start="86:43" pos:end="86:49">mailbox</name><operator pos:start="86:50" pos:end="86:50">.</operator><name pos:start="86:51" pos:end="86:54">poll</name></name><argument_list pos:start="86:55" pos:end="86:83">(<argument pos:start="86:56" pos:end="86:59"><expr pos:start="86:56" pos:end="86:59"><literal type="number" pos:start="86:56" pos:end="86:59">1000</literal></expr></argument>, <argument pos:start="86:62" pos:end="86:82"><expr pos:start="86:62" pos:end="86:82"><name pos:start="86:62" pos:end="86:82"><name pos:start="86:62" pos:end="86:69">TimeUnit</name><operator pos:start="86:70" pos:end="86:70">.</operator><name pos:start="86:71" pos:end="86:82">MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="88:17" pos:end="106:17"><if pos:start="88:17" pos:end="93:17">if <condition pos:start="88:20" pos:end="88:36">(<expr pos:start="88:21" pos:end="88:35"><name pos:start="88:21" pos:end="88:27">message</name> <operator pos:start="88:29" pos:end="88:30">==</operator> <literal type="null" pos:start="88:32" pos:end="88:35">null</literal></expr>)</condition> <block pos:start="88:38" pos:end="93:17">{<block_content pos:start="89:21" pos:end="92:21">
                    <expr_stmt pos:start="89:21" pos:end="89:52"><expr pos:start="89:21" pos:end="89:51"><name pos:start="89:21" pos:end="89:32">timeoutCount</name> <operator pos:start="89:34" pos:end="89:34">=</operator> <name pos:start="89:36" pos:end="89:47">timeoutCount</name> <operator pos:start="89:49" pos:end="89:49">+</operator> <literal type="number" pos:start="89:51" pos:end="89:51">1</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="90:21" pos:end="92:21"><if pos:start="90:21" pos:end="92:21">if <condition pos:start="90:24" pos:end="90:41">(<expr pos:start="90:25" pos:end="90:40"><name pos:start="90:25" pos:end="90:36">timeoutCount</name> <operator pos:start="90:38" pos:end="90:38">&gt;</operator> <literal type="number" pos:start="90:40" pos:end="90:40">2</literal></expr>)</condition> <block pos:start="90:43" pos:end="92:21">{<block_content pos:start="91:25" pos:end="91:102">
                        <expr_stmt pos:start="91:25" pos:end="91:102"><expr pos:start="91:25" pos:end="91:101"><call pos:start="91:25" pos:end="91:101"><name pos:start="91:25" pos:end="91:35"><name pos:start="91:25" pos:end="91:30">LOGGER</name><operator pos:start="91:31" pos:end="91:31">.</operator><name pos:start="91:32" pos:end="91:35">warn</name></name><argument_list pos:start="91:36" pos:end="91:101">(<argument pos:start="91:37" pos:end="91:100"><expr pos:start="91:37" pos:end="91:100"><literal type="string" pos:start="91:37" pos:end="91:72">"has not received any messages for "</literal> <operator pos:start="91:74" pos:end="91:74">+</operator> <name pos:start="91:76" pos:end="91:87">timeoutCount</name> <operator pos:start="91:89" pos:end="91:89">+</operator> <literal type="string" pos:start="91:91" pos:end="91:100">" seconds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else pos:start="93:19" pos:end="106:17">else <block pos:start="93:24" pos:end="106:17">{<block_content pos:start="94:21" pos:end="105:21">
                    <expr_stmt pos:start="94:21" pos:end="94:37"><expr pos:start="94:21" pos:end="94:36"><name pos:start="94:21" pos:end="94:32">timeoutCount</name> <operator pos:start="94:34" pos:end="94:34">=</operator> <literal type="number" pos:start="94:36" pos:end="94:36">0</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="95:21" pos:end="105:21"><if pos:start="95:21" pos:end="97:21">if <condition pos:start="95:24" pos:end="95:71">(<expr pos:start="95:25" pos:end="95:70"><name pos:start="95:25" pos:end="95:31">message</name> <operator pos:start="95:33" pos:end="95:42">instanceof</operator>  <name pos:start="95:45" pos:end="95:70">PhysicalDroneUpdateMessage</name></expr>)</condition> <block pos:start="95:73" pos:end="97:21">{<block_content pos:start="96:25" pos:end="96:82">
                        <expr_stmt pos:start="96:25" pos:end="96:82"><expr pos:start="96:25" pos:end="96:81"><call pos:start="96:25" pos:end="96:81"><name pos:start="96:25" pos:end="96:43">updatePhysicalDrone</name><argument_list pos:start="96:44" pos:end="96:81">(<argument pos:start="96:45" pos:end="96:80"><expr pos:start="96:45" pos:end="96:80"><operator pos:start="96:45" pos:end="96:45">(</operator><name pos:start="96:46" pos:end="96:71">PhysicalDroneUpdateMessage</name><operator pos:start="96:72" pos:end="96:72">)</operator> <name pos:start="96:74" pos:end="96:80">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif" pos:start="97:23" pos:end="99:21">else if <condition pos:start="97:31" pos:end="97:77">(<expr pos:start="97:32" pos:end="97:76"><name pos:start="97:32" pos:end="97:38">message</name> <operator pos:start="97:40" pos:end="97:49">instanceof</operator>  <name pos:start="97:52" pos:end="97:76">ManagedDroneUpdateMessage</name></expr>)</condition> <block pos:start="97:79" pos:end="99:21">{<block_content pos:start="98:25" pos:end="98:80">
                        <expr_stmt pos:start="98:25" pos:end="98:80"><expr pos:start="98:25" pos:end="98:79"><call pos:start="98:25" pos:end="98:79"><name pos:start="98:25" pos:end="98:42">updateManagedDrone</name><argument_list pos:start="98:43" pos:end="98:79">(<argument pos:start="98:44" pos:end="98:78"><expr pos:start="98:44" pos:end="98:78"><operator pos:start="98:44" pos:end="98:44">(</operator><name pos:start="98:45" pos:end="98:69">ManagedDroneUpdateMessage</name><operator pos:start="98:70" pos:end="98:70">)</operator> <name pos:start="98:72" pos:end="98:78">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif" pos:start="99:23" pos:end="101:21">else if <condition pos:start="99:31" pos:end="99:69">(<expr pos:start="99:32" pos:end="99:68"><name pos:start="99:32" pos:end="99:38">message</name> <operator pos:start="99:40" pos:end="99:49">instanceof</operator> <name pos:start="99:51" pos:end="99:68">CheckerTaskMessage</name></expr>)</condition> <block pos:start="99:71" pos:end="101:21">{<block_content pos:start="100:25" pos:end="100:35">
                        <expr_stmt pos:start="100:25" pos:end="100:35"><expr pos:start="100:25" pos:end="100:34"><call pos:start="100:25" pos:end="100:34"><name pos:start="100:25" pos:end="100:32">runAvoid</name><argument_list pos:start="100:33" pos:end="100:34">()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif" pos:start="101:23" pos:end="103:21">else if <condition pos:start="101:31" pos:end="101:62">(<expr pos:start="101:32" pos:end="101:61"><name pos:start="101:32" pos:end="101:38">message</name> <operator pos:start="101:40" pos:end="101:49">instanceof</operator> <name pos:start="101:51" pos:end="101:61">StopMessage</name></expr>)</condition> <block pos:start="101:64" pos:end="103:21">{<block_content pos:start="102:25" pos:end="102:31">
                        <expr_stmt pos:start="102:25" pos:end="102:31"><expr pos:start="102:25" pos:end="102:30"><call pos:start="102:25" pos:end="102:30"><name pos:start="102:25" pos:end="102:28">stop</name><argument_list pos:start="102:29" pos:end="102:30">()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="103:23" pos:end="105:21">else <block pos:start="103:28" pos:end="105:21">{<block_content pos:start="104:25" pos:end="104:71">
                        <expr_stmt pos:start="104:25" pos:end="104:71"><expr pos:start="104:25" pos:end="104:70"><call pos:start="104:25" pos:end="104:70"><name pos:start="104:25" pos:end="104:35"><name pos:start="104:25" pos:end="104:30">LOGGER</name><operator pos:start="104:31" pos:end="104:31">.</operator><name pos:start="104:32" pos:end="104:35">warn</name></name><argument_list pos:start="104:36" pos:end="104:70">(<argument pos:start="104:37" pos:end="104:69"><expr pos:start="104:37" pos:end="104:69"><literal type="string" pos:start="104:37" pos:end="104:59">"UNKNOWN MESSAGE TYPE "</literal> <operator pos:start="104:61" pos:end="104:61">+</operator> <name pos:start="104:63" pos:end="104:69">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block> <catch pos:start="107:15" pos:end="110:13">catch <parameter_list pos:start="107:21" pos:end="107:44">(<parameter pos:start="107:22" pos:end="107:43"><decl pos:start="107:22" pos:end="107:43"><type pos:start="107:22" pos:end="107:43"><name pos:start="107:22" pos:end="107:41">InterruptedException</name></type> <name pos:start="107:43" pos:end="107:43">e</name></decl></parameter>)</parameter_list> <block pos:start="107:46" pos:end="110:13">{<block_content pos:start="108:17" pos:end="109:32">
                <expr_stmt pos:start="108:17" pos:end="108:69"><expr pos:start="108:17" pos:end="108:68"><call pos:start="108:17" pos:end="108:68"><name pos:start="108:17" pos:end="108:27"><name pos:start="108:17" pos:end="108:22">LOGGER</name><operator pos:start="108:23" pos:end="108:23">.</operator><name pos:start="108:24" pos:end="108:27">warn</name></name><argument_list pos:start="108:28" pos:end="108:68">(<argument pos:start="108:29" pos:end="108:67"><expr pos:start="108:29" pos:end="108:67"><literal type="string" pos:start="108:29" pos:end="108:67">"CollisionAvoidanceBackend interrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="109:17" pos:end="109:32"><expr pos:start="109:17" pos:end="109:31"><call pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:28"><name pos:start="109:17" pos:end="109:22">LOGGER</name><operator pos:start="109:23" pos:end="109:23">.</operator><name pos:start="109:24" pos:end="109:28">trace</name></name><argument_list pos:start="109:29" pos:end="109:31">(<argument pos:start="109:30" pos:end="109:30"><expr pos:start="109:30" pos:end="109:30"><name pos:start="109:30" pos:end="109:30">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function pos:start="114:5" pos:end="116:5"><type pos:start="114:5" pos:end="114:16"><specifier pos:start="114:5" pos:end="114:11">private</specifier> <name pos:start="114:13" pos:end="114:16">void</name></type> <name pos:start="114:18" pos:end="114:36">updatePhysicalDrone</name><parameter_list pos:start="114:37" pos:end="114:68">(<parameter pos:start="114:38" pos:end="114:67"><decl pos:start="114:38" pos:end="114:67"><type pos:start="114:38" pos:end="114:63"><name pos:start="114:38" pos:end="114:63">PhysicalDroneUpdateMessage</name></type> <name pos:start="114:65" pos:end="114:67">msg</name></decl></parameter>)</parameter_list> <block pos:start="114:70" pos:end="116:5">{<block_content pos:start="115:9" pos:end="115:39">
        <expr_stmt pos:start="115:9" pos:end="115:39"><expr pos:start="115:9" pos:end="115:38"><call pos:start="115:9" pos:end="115:38"><name pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:19">droneStates</name><operator pos:start="115:20" pos:end="115:20">.</operator><name pos:start="115:21" pos:end="115:23">put</name></name><argument_list pos:start="115:24" pos:end="115:38">(<argument pos:start="115:25" pos:end="115:32"><expr pos:start="115:25" pos:end="115:32"><name pos:start="115:25" pos:end="115:32"><name pos:start="115:25" pos:end="115:27">msg</name><operator pos:start="115:28" pos:end="115:28">.</operator><name pos:start="115:29" pos:end="115:32">name</name></name></expr></argument>, <argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><name pos:start="115:35" pos:end="115:37">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="118:5" pos:end="121:5"><type pos:start="118:5" pos:end="118:16"><specifier pos:start="118:5" pos:end="118:11">private</specifier> <name pos:start="118:13" pos:end="118:16">void</name></type> <name pos:start="118:18" pos:end="118:35">updateManagedDrone</name><parameter_list pos:start="118:36" pos:end="118:66">(<parameter pos:start="118:37" pos:end="118:65"><decl pos:start="118:37" pos:end="118:65"><type pos:start="118:37" pos:end="118:61"><name pos:start="118:37" pos:end="118:61">ManagedDroneUpdateMessage</name></type> <name pos:start="118:63" pos:end="118:65">msg</name></decl></parameter>)</parameter_list> <block pos:start="118:68" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:41">
        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><call pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:21">droneControls</name><operator pos:start="119:22" pos:end="119:22">.</operator><name pos:start="119:23" pos:end="119:25">put</name></name><argument_list pos:start="119:26" pos:end="119:40">(<argument pos:start="119:27" pos:end="119:34"><expr pos:start="119:27" pos:end="119:34"><name pos:start="119:27" pos:end="119:34"><name pos:start="119:27" pos:end="119:29">msg</name><operator pos:start="119:30" pos:end="119:30">.</operator><name pos:start="119:31" pos:end="119:34">name</name></name></expr></argument>, <argument pos:start="119:37" pos:end="119:39"><expr pos:start="119:37" pos:end="119:39"><name pos:start="119:37" pos:end="119:39">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function pos:start="123:5" pos:end="127:5"><type pos:start="123:5" pos:end="123:16"><specifier pos:start="123:5" pos:end="123:11">private</specifier> <name pos:start="123:13" pos:end="123:16">void</name></type> <name pos:start="123:18" pos:end="123:25">runAvoid</name><parameter_list pos:start="123:26" pos:end="123:27">()</parameter_list> <block pos:start="123:29" pos:end="127:5">{<block_content pos:start="124:9" pos:end="126:51">
        <decl_stmt pos:start="124:9" pos:end="124:71"><decl pos:start="124:9" pos:end="124:70"><type pos:start="124:9" pos:end="124:32"><name pos:start="124:9" pos:end="124:32"><name pos:start="124:9" pos:end="124:17">ArrayList</name><argument_list type="generic" pos:start="124:18" pos:end="124:32">&lt;<argument pos:start="124:19" pos:end="124:31"><name pos:start="124:19" pos:end="124:31">DroneSnapshot</name></argument>&gt;</argument_list></name></type> <name pos:start="124:34" pos:end="124:47">droneSnapshots</name> <init pos:start="124:49" pos:end="124:70">= <expr pos:start="124:51" pos:end="124:70"><call pos:start="124:51" pos:end="124:70"><name pos:start="124:51" pos:end="124:68">makeDroneSnapshots</name><argument_list pos:start="124:69" pos:end="124:70">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="125:9" pos:end="125:46"><expr pos:start="125:9" pos:end="125:45"><call pos:start="125:9" pos:end="125:45"><name pos:start="125:9" pos:end="125:29"><name pos:start="125:9" pos:end="125:23">avoiderStrategy</name><operator pos:start="125:24" pos:end="125:24">.</operator><name pos:start="125:25" pos:end="125:29">avoid</name></name><argument_list pos:start="125:30" pos:end="125:45">(<argument pos:start="125:31" pos:end="125:44"><expr pos:start="125:31" pos:end="125:44"><name pos:start="125:31" pos:end="125:44">droneSnapshots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="126:9" pos:end="126:51"><expr pos:start="126:9" pos:end="126:50"><call pos:start="126:9" pos:end="126:50"><name pos:start="126:9" pos:end="126:34">updateManagedDroneGuidance</name><argument_list pos:start="126:35" pos:end="126:50">(<argument pos:start="126:36" pos:end="126:49"><expr pos:start="126:36" pos:end="126:49"><name pos:start="126:36" pos:end="126:49">droneSnapshots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function pos:start="129:5" pos:end="145:5"><type pos:start="129:5" pos:end="129:36"><specifier pos:start="129:5" pos:end="129:11">private</specifier> <name pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:21">ArrayList</name><argument_list type="generic" pos:start="129:22" pos:end="129:36">&lt;<argument pos:start="129:23" pos:end="129:35"><name pos:start="129:23" pos:end="129:35">DroneSnapshot</name></argument>&gt;</argument_list></name></type> <name pos:start="129:38" pos:end="129:55">makeDroneSnapshots</name><parameter_list pos:start="129:56" pos:end="129:57">()</parameter_list> <block pos:start="129:59" pos:end="145:5">{<block_content pos:start="130:9" pos:end="144:25">
        <decl_stmt pos:start="130:9" pos:end="130:81"><decl pos:start="130:9" pos:end="130:80"><type pos:start="130:9" pos:end="130:32"><name pos:start="130:9" pos:end="130:32"><name pos:start="130:9" pos:end="130:17">ArrayList</name><argument_list type="generic" pos:start="130:18" pos:end="130:32">&lt;<argument pos:start="130:19" pos:end="130:31"><name pos:start="130:19" pos:end="130:31">DroneSnapshot</name></argument>&gt;</argument_list></name></type> <name pos:start="130:34" pos:end="130:42">snapshots</name> <init pos:start="130:44" pos:end="130:80">= <expr pos:start="130:46" pos:end="130:80"><operator pos:start="130:46" pos:end="130:48">new</operator> <call pos:start="130:50" pos:end="130:80"><name pos:start="130:50" pos:end="130:60"><name pos:start="130:50" pos:end="130:58">ArrayList</name><argument_list type="generic" pos:start="130:59" pos:end="130:60">&lt;&gt;</argument_list></name><argument_list pos:start="130:61" pos:end="130:80">(<argument pos:start="130:62" pos:end="130:79"><expr pos:start="130:62" pos:end="130:79"><call pos:start="130:62" pos:end="130:79"><name pos:start="130:62" pos:end="130:77"><name pos:start="130:62" pos:end="130:72">droneStates</name><operator pos:start="130:73" pos:end="130:73">.</operator><name pos:start="130:74" pos:end="130:77">size</name></name><argument_list pos:start="130:78" pos:end="130:79">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="131:9" pos:end="133:46"><decl pos:start="131:9" pos:end="133:45"><type pos:start="131:9" pos:end="131:20"><name pos:start="131:9" pos:end="131:20"><name pos:start="131:9" pos:end="131:12">List</name><argument_list type="generic" pos:start="131:13" pos:end="131:20">&lt;<argument pos:start="131:14" pos:end="131:19"><name pos:start="131:14" pos:end="131:19">String</name></argument>&gt;</argument_list></name></type> <name pos:start="131:22" pos:end="131:31">droneNames</name> <init pos:start="131:33" pos:end="133:45">= <expr pos:start="131:35" pos:end="133:45"><call pos:start="131:35" pos:end="131:54"><name pos:start="131:35" pos:end="131:52"><name pos:start="131:35" pos:end="131:45">droneStates</name><operator pos:start="131:46" pos:end="131:46">.</operator><name pos:start="131:47" pos:end="131:52">keySet</name></name><argument_list pos:start="131:53" pos:end="131:54">()</argument_list></call><operator pos:start="131:55" pos:end="131:55">.</operator><call pos:start="131:56" pos:end="131:63"><name pos:start="131:56" pos:end="131:61">stream</name><argument_list pos:start="131:62" pos:end="131:63">()</argument_list></call>
                <operator pos:start="132:17" pos:end="132:17">.</operator><call pos:start="132:18" pos:end="132:112"><name pos:start="132:18" pos:end="132:23">filter</name><argument_list pos:start="132:24" pos:end="132:112">(<argument pos:start="132:25" pos:end="132:111"><expr pos:start="132:25" pos:end="132:111"><lambda pos:start="132:25" pos:end="132:111"><parameter_list type="pseudo" pos:start="132:25" pos:end="132:33"><parameter pos:start="132:25" pos:end="132:33"><decl pos:start="132:25" pos:end="132:33"><name pos:start="132:25" pos:end="132:33">droneName</name></decl></parameter></parameter_list> -&gt;<block type="pseudo" pos:start="132:38" pos:end="132:111"><block_content pos:start="132:38" pos:end="132:111"> <expr pos:start="132:38" pos:end="132:111"><call pos:start="132:38" pos:end="132:71"><name pos:start="132:38" pos:end="132:60"><name pos:start="132:38" pos:end="132:48">droneStates</name><operator pos:start="132:49" pos:end="132:49">.</operator><name pos:start="132:50" pos:end="132:60">containsKey</name></name><argument_list pos:start="132:61" pos:end="132:71">(<argument pos:start="132:62" pos:end="132:70"><expr pos:start="132:62" pos:end="132:70"><name pos:start="132:62" pos:end="132:70">droneName</name></expr></argument>)</argument_list></call> <operator pos:start="132:73" pos:end="132:74">&amp;&amp;</operator> <call pos:start="132:76" pos:end="132:111"><name pos:start="132:76" pos:end="132:100"><name pos:start="132:76" pos:end="132:88">droneControls</name><operator pos:start="132:89" pos:end="132:89">.</operator><name pos:start="132:90" pos:end="132:100">containsKey</name></name><argument_list pos:start="132:101" pos:end="132:111">(<argument pos:start="132:102" pos:end="132:110"><expr pos:start="132:102" pos:end="132:110"><name pos:start="132:102" pos:end="132:110">droneName</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                <operator pos:start="133:17" pos:end="133:17">.</operator><call pos:start="133:18" pos:end="133:45"><name pos:start="133:18" pos:end="133:24">collect</name><argument_list pos:start="133:25" pos:end="133:45">(<argument pos:start="133:26" pos:end="133:44"><expr pos:start="133:26" pos:end="133:44"><call pos:start="133:26" pos:end="133:44"><name pos:start="133:26" pos:end="133:42"><name pos:start="133:26" pos:end="133:35">Collectors</name><operator pos:start="133:36" pos:end="133:36">.</operator><name pos:start="133:37" pos:end="133:42">toList</name></name><argument_list pos:start="133:43" pos:end="133:44">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for pos:start="134:9" pos:end="143:9">for<control pos:start="134:12" pos:end="134:42">(<init pos:start="134:13" pos:end="134:41"><decl pos:start="134:13" pos:end="134:41"><type pos:start="134:13" pos:end="134:18"><name pos:start="134:13" pos:end="134:18">String</name></type> <name pos:start="134:20" pos:end="134:28">droneName</name> <range pos:start="134:30" pos:end="134:41">: <expr pos:start="134:32" pos:end="134:41"><name pos:start="134:32" pos:end="134:41">droneNames</name></expr></range></decl></init>)</control> <block pos:start="134:44" pos:end="143:9">{<block_content pos:start="135:13" pos:end="142:36">
            <decl_stmt pos:start="135:13" pos:end="135:79"><decl pos:start="135:13" pos:end="135:78"><type pos:start="135:13" pos:end="135:38"><name pos:start="135:13" pos:end="135:38">PhysicalDroneUpdateMessage</name></type> <name pos:start="135:40" pos:end="135:49">droneState</name> <init pos:start="135:51" pos:end="135:78">= <expr pos:start="135:53" pos:end="135:78"><call pos:start="135:53" pos:end="135:78"><name pos:start="135:53" pos:end="135:67"><name pos:start="135:53" pos:end="135:63">droneStates</name><operator pos:start="135:64" pos:end="135:64">.</operator><name pos:start="135:65" pos:end="135:67">get</name></name><argument_list pos:start="135:68" pos:end="135:78">(<argument pos:start="135:69" pos:end="135:77"><expr pos:start="135:69" pos:end="135:77"><name pos:start="135:69" pos:end="135:77">droneName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="136:13" pos:end="136:82"><decl pos:start="136:13" pos:end="136:81"><type pos:start="136:13" pos:end="136:37"><name pos:start="136:13" pos:end="136:37">ManagedDroneUpdateMessage</name></type> <name pos:start="136:39" pos:end="136:50">droneControl</name> <init pos:start="136:52" pos:end="136:81">= <expr pos:start="136:54" pos:end="136:81"><call pos:start="136:54" pos:end="136:81"><name pos:start="136:54" pos:end="136:70"><name pos:start="136:54" pos:end="136:66">droneControls</name><operator pos:start="136:67" pos:end="136:67">.</operator><name pos:start="136:68" pos:end="136:70">get</name></name><argument_list pos:start="136:71" pos:end="136:81">(<argument pos:start="136:72" pos:end="136:80"><expr pos:start="136:72" pos:end="136:80"><name pos:start="136:72" pos:end="136:80">droneName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="137:13" pos:end="138:83"><decl pos:start="137:13" pos:end="138:82"><type pos:start="137:13" pos:end="137:33"><name pos:start="137:13" pos:end="137:33">DroneSnapshotInternal</name></type> <name pos:start="137:35" pos:end="137:42">snapshot</name> <init pos:start="137:44" pos:end="138:82">= <expr pos:start="137:46" pos:end="138:82"><operator pos:start="137:46" pos:end="137:48">new</operator> <call pos:start="137:50" pos:end="138:82"><name pos:start="137:50" pos:end="137:70">DroneSnapshotInternal</name><argument_list pos:start="137:71" pos:end="138:82">(<argument pos:start="137:72" pos:end="137:80"><expr pos:start="137:72" pos:end="137:80"><name pos:start="137:72" pos:end="137:80">droneName</name></expr></argument>,
                    <argument pos:start="138:21" pos:end="138:39"><expr pos:start="138:21" pos:end="138:39"><name pos:start="138:21" pos:end="138:39"><name pos:start="138:21" pos:end="138:30">droneState</name><operator pos:start="138:31" pos:end="138:31">.</operator><name pos:start="138:32" pos:end="138:39">position</name></name></expr></argument>, <argument pos:start="138:42" pos:end="138:60"><expr pos:start="138:42" pos:end="138:60"><name pos:start="138:42" pos:end="138:60"><name pos:start="138:42" pos:end="138:51">droneState</name><operator pos:start="138:52" pos:end="138:52">.</operator><name pos:start="138:53" pos:end="138:60">velocity</name></name></expr></argument>, <argument pos:start="138:63" pos:end="138:81"><expr pos:start="138:63" pos:end="138:81"><name pos:start="138:63" pos:end="138:81"><name pos:start="138:63" pos:end="138:72">droneState</name><operator pos:start="138:73" pos:end="138:73">.</operator><name pos:start="138:74" pos:end="138:81">attitude</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="139:13" pos:end="139:69"><expr pos:start="139:13" pos:end="139:68"><call pos:start="139:13" pos:end="139:34"><name pos:start="139:13" pos:end="139:32"><name pos:start="139:13" pos:end="139:20">snapshot</name><operator pos:start="139:21" pos:end="139:21">.</operator><name pos:start="139:22" pos:end="139:32">getCommands</name></name><argument_list pos:start="139:33" pos:end="139:34">()</argument_list></call><operator pos:start="139:35" pos:end="139:35">.</operator><call pos:start="139:36" pos:end="139:68"><name pos:start="139:36" pos:end="139:41">addAll</name><argument_list pos:start="139:42" pos:end="139:68">(<argument pos:start="139:43" pos:end="139:67"><expr pos:start="139:43" pos:end="139:67"><name pos:start="139:43" pos:end="139:67"><name pos:start="139:43" pos:end="139:54">droneControl</name><operator pos:start="139:55" pos:end="139:55">.</operator><name pos:start="139:56" pos:end="139:67">commandQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="140:13" pos:end="140:50"><expr pos:start="140:13" pos:end="140:49"><call pos:start="140:13" pos:end="140:49"><name pos:start="140:13" pos:end="140:29"><name pos:start="140:13" pos:end="140:20">snapshot</name><operator pos:start="140:21" pos:end="140:21">.</operator><name pos:start="140:22" pos:end="140:29">setState</name></name><argument_list pos:start="140:30" pos:end="140:49">(<argument pos:start="140:31" pos:end="140:48"><expr pos:start="140:31" pos:end="140:48"><name pos:start="140:31" pos:end="140:48"><name pos:start="140:31" pos:end="140:42">droneControl</name><operator pos:start="140:43" pos:end="140:43">.</operator><name pos:start="140:44" pos:end="140:48">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="141:13" pos:end="141:50"><expr pos:start="141:13" pos:end="141:49"><call pos:start="141:13" pos:end="141:49"><name pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:20">snapshot</name><operator pos:start="141:21" pos:end="141:21">.</operator><name pos:start="141:22" pos:end="141:29">setGoals</name></name><argument_list pos:start="141:30" pos:end="141:49">(<argument pos:start="141:31" pos:end="141:48"><expr pos:start="141:31" pos:end="141:48"><name pos:start="141:31" pos:end="141:48"><name pos:start="141:31" pos:end="141:42">droneControl</name><operator pos:start="141:43" pos:end="141:43">.</operator><name pos:start="141:44" pos:end="141:48">goals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="142:13" pos:end="142:36"><expr pos:start="142:13" pos:end="142:35"><call pos:start="142:13" pos:end="142:35"><name pos:start="142:13" pos:end="142:25"><name pos:start="142:13" pos:end="142:21">snapshots</name><operator pos:start="142:22" pos:end="142:22">.</operator><name pos:start="142:23" pos:end="142:25">add</name></name><argument_list pos:start="142:26" pos:end="142:35">(<argument pos:start="142:27" pos:end="142:34"><expr pos:start="142:27" pos:end="142:34"><name pos:start="142:27" pos:end="142:34">snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return pos:start="144:9" pos:end="144:25">return <expr pos:start="144:16" pos:end="144:24"><name pos:start="144:16" pos:end="144:24">snapshots</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="147:5" pos:end="151:5"><type pos:start="147:5" pos:end="147:16"><specifier pos:start="147:5" pos:end="147:11">private</specifier> <name pos:start="147:13" pos:end="147:16">void</name></type> <name pos:start="147:18" pos:end="147:43">updateManagedDroneGuidance</name><parameter_list pos:start="147:44" pos:end="147:79">(<parameter pos:start="147:45" pos:end="147:78"><decl pos:start="147:45" pos:end="147:78"><type pos:start="147:45" pos:end="147:68"><name pos:start="147:45" pos:end="147:68"><name pos:start="147:45" pos:end="147:53">ArrayList</name><argument_list type="generic" pos:start="147:54" pos:end="147:68">&lt;<argument pos:start="147:55" pos:end="147:67"><name pos:start="147:55" pos:end="147:67">DroneSnapshot</name></argument>&gt;</argument_list></name></type> <name pos:start="147:70" pos:end="147:78">snapshots</name></decl></parameter>)</parameter_list> <block pos:start="147:81" pos:end="151:5">{<block_content pos:start="148:9" pos:end="150:9">
        <for pos:start="148:9" pos:end="150:9">for <control pos:start="148:13" pos:end="148:48">(<init pos:start="148:14" pos:end="148:47"><decl pos:start="148:14" pos:end="148:47"><type pos:start="148:14" pos:end="148:26"><name pos:start="148:14" pos:end="148:26">DroneSnapshot</name></type> <name pos:start="148:28" pos:end="148:35">snapshot</name> <range pos:start="148:37" pos:end="148:47">: <expr pos:start="148:39" pos:end="148:47"><name pos:start="148:39" pos:end="148:47">snapshots</name></expr></range></decl></init>)</control> <block pos:start="148:50" pos:end="150:9">{<block_content pos:start="149:13" pos:end="149:117">
            <expr_stmt pos:start="149:13" pos:end="149:117"><expr pos:start="149:13" pos:end="149:116"><call pos:start="149:13" pos:end="149:49"><name pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:25">droneControls</name><operator pos:start="149:26" pos:end="149:26">.</operator><name pos:start="149:27" pos:end="149:29">get</name></name><argument_list pos:start="149:30" pos:end="149:49">(<argument pos:start="149:31" pos:end="149:48"><expr pos:start="149:31" pos:end="149:48"><call pos:start="149:31" pos:end="149:48"><name pos:start="149:31" pos:end="149:46"><name pos:start="149:31" pos:end="149:38">snapshot</name><operator pos:start="149:39" pos:end="149:39">.</operator><name pos:start="149:40" pos:end="149:46">getName</name></name><argument_list pos:start="149:47" pos:end="149:48">()</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="149:50" pos:end="149:50">.</operator><call pos:start="149:51" pos:end="149:77"><name pos:start="149:51" pos:end="149:75"><name pos:start="149:51" pos:end="149:62">managedDrone</name><operator pos:start="149:63" pos:end="149:63">.</operator><name pos:start="149:64" pos:end="149:75">getMessenger</name></name><argument_list pos:start="149:76" pos:end="149:77">()</argument_list></call><operator pos:start="149:78" pos:end="149:78">.</operator><call pos:start="149:79" pos:end="149:116"><name pos:start="149:79" pos:end="149:92">updateGuidance</name><argument_list pos:start="149:93" pos:end="149:116">(<argument pos:start="149:94" pos:end="149:115"><expr pos:start="149:94" pos:end="149:115"><call pos:start="149:94" pos:end="149:115"><name pos:start="149:94" pos:end="149:113"><name pos:start="149:94" pos:end="149:101">snapshot</name><operator pos:start="149:102" pos:end="149:102">.</operator><name pos:start="149:103" pos:end="149:113">getCommands</name></name><argument_list pos:start="149:114" pos:end="149:115">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
}</block></class>
</unit>
