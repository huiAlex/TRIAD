<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/PVector.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:41">package <name pos:start="1:9" pos:end="1:40"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:29">core</name><operator pos:start="1:30" pos:end="1:30">.</operator><name pos:start="1:31" pos:end="1:40">coordinate</name></name>;</package>

<comment type="block" format="javadoc" pos:start="3:1" pos:end="15:3">/**
 * A position on Earth, represented as an X, Y and Z coordinate in an
 * Earth centered Earth fixed reference frame.
 *
 * The origin of this frame is at the center of mass of the Earth. The X-axis
 * points towards where the equator meets the prime meridean (latitude 0,
 * longitude 0). The Z-axis points towards the geographic north pole (latitude
 * 90, longitude undefined). The Y-axis can be derived using right hand rule and
 * points towards latitude 0, longitude 90. All units are in meters.
 * 
 * @author Michael Murphy 
 * 
 */</comment> 
<class pos:start="16:1" pos:end="148:1"><specifier pos:start="16:1" pos:end="16:6">public</specifier> class <name pos:start="16:14" pos:end="16:20">PVector</name>  <super_list pos:start="16:23" pos:end="16:46"><extends pos:start="16:23" pos:end="16:46">extends <super pos:start="16:31" pos:end="16:46"><name pos:start="16:31" pos:end="16:46">AbstractPosition</name></super></extends></super_list> <block pos:start="16:48" pos:end="148:1">{
	<decl_stmt pos:start="17:9" pos:end="17:25"><decl pos:start="17:9" pos:end="17:24"><type pos:start="17:9" pos:end="17:22"><specifier pos:start="17:9" pos:end="17:15">private</specifier> <name pos:start="17:17" pos:end="17:22">double</name></type> <name pos:start="17:24" pos:end="17:24">x</name></decl>;</decl_stmt>
	<decl_stmt pos:start="18:9" pos:end="18:25"><decl pos:start="18:9" pos:end="18:24"><type pos:start="18:9" pos:end="18:22"><specifier pos:start="18:9" pos:end="18:15">private</specifier> <name pos:start="18:17" pos:end="18:22">double</name></type> <name pos:start="18:24" pos:end="18:24">y</name></decl>;</decl_stmt>
	<decl_stmt pos:start="19:9" pos:end="19:25"><decl pos:start="19:9" pos:end="19:24"><type pos:start="19:9" pos:end="19:22"><specifier pos:start="19:9" pos:end="19:15">private</specifier> <name pos:start="19:17" pos:end="19:22">double</name></type> <name pos:start="19:24" pos:end="19:24">z</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc" pos:start="21:9" pos:end="33:11">/**
	 * @param x
	 *            the distance in meters along the axis that points from the
	 *            center of mass of the Earth towards where the equator meets
	 *            the prime meridean (latitude 0, longitude 0)
	 * @param y
	 *            the distance in meters along the axis that points from the
	 *            center of mass of the Earth towards latitude 0, longitude 90
	 * @param z
	 *            the distance in meters along the axis that points from the
	 *            center of mass of the Earth towards the geographic north pole
	 *            (latitude 90, longitude undefined)
	 */</comment>
	<constructor pos:start="34:9" pos:end="38:9"><specifier pos:start="34:9" pos:end="34:14">public</specifier> <name pos:start="34:16" pos:end="34:22">PVector</name><parameter_list pos:start="34:23" pos:end="34:52">(<parameter pos:start="34:24" pos:end="34:31"><decl pos:start="34:24" pos:end="34:31"><type pos:start="34:24" pos:end="34:31"><name pos:start="34:24" pos:end="34:29">double</name></type> <name pos:start="34:31" pos:end="34:31">x</name></decl></parameter>, <parameter pos:start="34:34" pos:end="34:41"><decl pos:start="34:34" pos:end="34:41"><type pos:start="34:34" pos:end="34:41"><name pos:start="34:34" pos:end="34:39">double</name></type> <name pos:start="34:41" pos:end="34:41">y</name></decl></parameter>, <parameter pos:start="34:44" pos:end="34:51"><decl pos:start="34:44" pos:end="34:51"><type pos:start="34:44" pos:end="34:51"><name pos:start="34:44" pos:end="34:49">double</name></type> <name pos:start="34:51" pos:end="34:51">z</name></decl></parameter>)</parameter_list> <block pos:start="34:54" pos:end="38:9">{<block_content pos:start="35:17" pos:end="37:27">
		<expr_stmt pos:start="35:17" pos:end="35:27"><expr pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:20">this</name><operator pos:start="35:21" pos:end="35:21">.</operator><name pos:start="35:22" pos:end="35:22">x</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <name pos:start="35:26" pos:end="35:26">x</name></expr>;</expr_stmt>
		<expr_stmt pos:start="36:17" pos:end="36:27"><expr pos:start="36:17" pos:end="36:26"><name pos:start="36:17" pos:end="36:22"><name pos:start="36:17" pos:end="36:20">this</name><operator pos:start="36:21" pos:end="36:21">.</operator><name pos:start="36:22" pos:end="36:22">y</name></name> <operator pos:start="36:24" pos:end="36:24">=</operator> <name pos:start="36:26" pos:end="36:26">y</name></expr>;</expr_stmt>
		<expr_stmt pos:start="37:17" pos:end="37:27"><expr pos:start="37:17" pos:end="37:26"><name pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:20">this</name><operator pos:start="37:21" pos:end="37:21">.</operator><name pos:start="37:22" pos:end="37:22">z</name></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <name pos:start="37:26" pos:end="37:26">z</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<comment type="block" format="javadoc" pos:start="40:9" pos:end="42:11">/**
	 * @return the x
	 */</comment>
	<function pos:start="43:9" pos:end="45:9"><type pos:start="43:9" pos:end="43:21"><specifier pos:start="43:9" pos:end="43:14">public</specifier> <name pos:start="43:16" pos:end="43:21">double</name></type> <name pos:start="43:23" pos:end="43:26">getX</name><parameter_list pos:start="43:27" pos:end="43:28">()</parameter_list> <block pos:start="43:30" pos:end="45:9">{<block_content pos:start="44:17" pos:end="44:25">
		<return pos:start="44:17" pos:end="44:25">return <expr pos:start="44:24" pos:end="44:24"><name pos:start="44:24" pos:end="44:24">x</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="47:9" pos:end="49:11">/**
	 * @return the y
	 */</comment>
	<function pos:start="50:9" pos:end="52:9"><type pos:start="50:9" pos:end="50:21"><specifier pos:start="50:9" pos:end="50:14">public</specifier> <name pos:start="50:16" pos:end="50:21">double</name></type> <name pos:start="50:23" pos:end="50:26">getY</name><parameter_list pos:start="50:27" pos:end="50:28">()</parameter_list> <block pos:start="50:30" pos:end="52:9">{<block_content pos:start="51:17" pos:end="51:25">
		<return pos:start="51:17" pos:end="51:25">return <expr pos:start="51:24" pos:end="51:24"><name pos:start="51:24" pos:end="51:24">y</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="54:9" pos:end="56:11">/**
	 * @return the z
	 */</comment>
	<function pos:start="57:9" pos:end="59:9"><type pos:start="57:9" pos:end="57:21"><specifier pos:start="57:9" pos:end="57:14">public</specifier> <name pos:start="57:16" pos:end="57:21">double</name></type> <name pos:start="57:23" pos:end="57:26">getZ</name><parameter_list pos:start="57:27" pos:end="57:28">()</parameter_list> <block pos:start="57:30" pos:end="59:9">{<block_content pos:start="58:17" pos:end="58:25">
		<return pos:start="58:17" pos:end="58:25">return <expr pos:start="58:24" pos:end="58:24"><name pos:start="58:24" pos:end="58:24">z</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="61:9" pos:end="63:11">/**
	 * @return the n-vector plus altitude for this position
	 */</comment>
	<function pos:start="64:9" pos:end="97:9"><annotation pos:start="64:9" pos:end="64:17">@<name pos:start="64:10" pos:end="64:17">Override</name></annotation>
	<type pos:start="65:9" pos:end="65:22"><specifier pos:start="65:9" pos:end="65:14">public</specifier> <name pos:start="65:16" pos:end="65:22">NVector</name></type> <name pos:start="65:24" pos:end="65:32">toNVector</name><parameter_list pos:start="65:33" pos:end="65:34">()</parameter_list> <block pos:start="65:36" pos:end="97:9">{<block_content pos:start="76:17" pos:end="96:49">
		<comment type="block" pos:start="66:17" pos:end="75:19">/*
		 * The formula this code is based on can be found in a journal article
		 * called: "A Non-singular Horizontal Position Representation" by
		 * Kenneth Gade. You can find it at https://goo.gl/iCqdCn (see equation
		 * 23 in Appendix B.2.)
		 * 
		 * Note: equation 23 is unconventional as it swaps the z component with
		 * x component. This code follows the more common convention and returns
		 * z and x to their proper place
		 */</comment>
		<decl_stmt pos:start="76:17" pos:end="76:46"><decl pos:start="76:17" pos:end="76:45"><type pos:start="76:17" pos:end="76:22"><name pos:start="76:17" pos:end="76:22">double</name></type> <name pos:start="76:24" pos:end="76:24">a</name> <init pos:start="76:26" pos:end="76:45">= <expr pos:start="76:28" pos:end="76:45"><name pos:start="76:28" pos:end="76:45"><name pos:start="76:28" pos:end="76:34">NVector</name><operator pos:start="76:35" pos:end="76:35">.</operator><name pos:start="76:36" pos:end="76:45">SEMI_MAJOR</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="77:17" pos:end="77:46"><decl pos:start="77:17" pos:end="77:45"><type pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">double</name></type> <name pos:start="77:24" pos:end="77:24">b</name> <init pos:start="77:26" pos:end="77:45">= <expr pos:start="77:28" pos:end="77:45"><name pos:start="77:28" pos:end="77:45"><name pos:start="77:28" pos:end="77:34">NVector</name><operator pos:start="77:35" pos:end="77:35">.</operator><name pos:start="77:36" pos:end="77:45">SEMI_MINOR</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="78:17" pos:end="78:60"><decl pos:start="78:17" pos:end="78:59"><type pos:start="78:17" pos:end="78:22"><name pos:start="78:17" pos:end="78:22">double</name></type> <name pos:start="78:24" pos:end="78:24">e</name> <init pos:start="78:26" pos:end="78:59">= <expr pos:start="78:28" pos:end="78:59"><call pos:start="78:28" pos:end="78:59"><name pos:start="78:28" pos:end="78:36"><name pos:start="78:28" pos:end="78:31">Math</name><operator pos:start="78:32" pos:end="78:32">.</operator><name pos:start="78:33" pos:end="78:36">sqrt</name></name><argument_list pos:start="78:37" pos:end="78:59">(<argument pos:start="78:38" pos:end="78:58"><expr pos:start="78:38" pos:end="78:58"><literal type="number" pos:start="78:38" pos:end="78:38">1</literal> <operator pos:start="78:40" pos:end="78:40">-</operator> <operator pos:start="78:42" pos:end="78:42">(</operator><name pos:start="78:43" pos:end="78:43">b</name> <operator pos:start="78:45" pos:end="78:45">*</operator> <name pos:start="78:47" pos:end="78:47">b</name><operator pos:start="78:48" pos:end="78:48">)</operator> <operator pos:start="78:50" pos:end="78:50">/</operator> <operator pos:start="78:52" pos:end="78:52">(</operator><name pos:start="78:53" pos:end="78:53">a</name> <operator pos:start="78:55" pos:end="78:55">*</operator> <name pos:start="78:57" pos:end="78:57">a</name><operator pos:start="78:58" pos:end="78:58">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="79:17" pos:end="79:69"><decl pos:start="79:17" pos:end="79:68"><type pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:22">double</name></type> <name pos:start="79:24" pos:end="79:24">q</name> <init pos:start="79:26" pos:end="79:68">= <expr pos:start="79:28" pos:end="79:68"><operator pos:start="79:28" pos:end="79:28">(</operator><literal type="number" pos:start="79:29" pos:end="79:31">1.0</literal> <operator pos:start="79:33" pos:end="79:33">-</operator> <name pos:start="79:35" pos:end="79:35">e</name> <operator pos:start="79:37" pos:end="79:37">*</operator> <name pos:start="79:39" pos:end="79:39">e</name><operator pos:start="79:40" pos:end="79:40">)</operator> <operator pos:start="79:42" pos:end="79:42">/</operator> <operator pos:start="79:44" pos:end="79:44">(</operator><name pos:start="79:45" pos:end="79:45">a</name> <operator pos:start="79:47" pos:end="79:47">*</operator> <name pos:start="79:49" pos:end="79:49">a</name><operator pos:start="79:50" pos:end="79:50">)</operator> <operator pos:start="79:52" pos:end="79:52">*</operator> <name pos:start="79:54" pos:end="79:59"><name pos:start="79:54" pos:end="79:57">this</name><operator pos:start="79:58" pos:end="79:58">.</operator><name pos:start="79:59" pos:end="79:59">z</name></name> <operator pos:start="79:61" pos:end="79:61">*</operator> <name pos:start="79:63" pos:end="79:68"><name pos:start="79:63" pos:end="79:66">this</name><operator pos:start="79:67" pos:end="79:67">.</operator><name pos:start="79:68" pos:end="79:68">z</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="80:17" pos:end="80:73"><decl pos:start="80:17" pos:end="80:72"><type pos:start="80:17" pos:end="80:22"><name pos:start="80:17" pos:end="80:22">double</name></type> <name pos:start="80:24" pos:end="80:24">p</name> <init pos:start="80:26" pos:end="80:72">= <expr pos:start="80:28" pos:end="80:72"><operator pos:start="80:28" pos:end="80:28">(</operator><name pos:start="80:29" pos:end="80:34"><name pos:start="80:29" pos:end="80:32">this</name><operator pos:start="80:33" pos:end="80:33">.</operator><name pos:start="80:34" pos:end="80:34">y</name></name> <operator pos:start="80:36" pos:end="80:36">*</operator> <name pos:start="80:38" pos:end="80:43"><name pos:start="80:38" pos:end="80:41">this</name><operator pos:start="80:42" pos:end="80:42">.</operator><name pos:start="80:43" pos:end="80:43">y</name></name> <operator pos:start="80:45" pos:end="80:45">+</operator> <name pos:start="80:47" pos:end="80:52"><name pos:start="80:47" pos:end="80:50">this</name><operator pos:start="80:51" pos:end="80:51">.</operator><name pos:start="80:52" pos:end="80:52">x</name></name> <operator pos:start="80:54" pos:end="80:54">*</operator> <name pos:start="80:56" pos:end="80:61"><name pos:start="80:56" pos:end="80:59">this</name><operator pos:start="80:60" pos:end="80:60">.</operator><name pos:start="80:61" pos:end="80:61">x</name></name><operator pos:start="80:62" pos:end="80:62">)</operator> <operator pos:start="80:64" pos:end="80:64">/</operator> <operator pos:start="80:66" pos:end="80:66">(</operator><name pos:start="80:67" pos:end="80:67">a</name> <operator pos:start="80:69" pos:end="80:69">*</operator> <name pos:start="80:71" pos:end="80:71">a</name><operator pos:start="80:72" pos:end="80:72">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="81:17" pos:end="81:60"><decl pos:start="81:17" pos:end="81:59"><type pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">double</name></type> <name pos:start="81:24" pos:end="81:24">r</name> <init pos:start="81:26" pos:end="81:59">= <expr pos:start="81:28" pos:end="81:59"><operator pos:start="81:28" pos:end="81:28">(</operator><name pos:start="81:29" pos:end="81:29">p</name> <operator pos:start="81:31" pos:end="81:31">+</operator> <name pos:start="81:33" pos:end="81:33">q</name> <operator pos:start="81:35" pos:end="81:35">-</operator> <call pos:start="81:37" pos:end="81:52"><name pos:start="81:37" pos:end="81:44"><name pos:start="81:37" pos:end="81:40">Math</name><operator pos:start="81:41" pos:end="81:41">.</operator><name pos:start="81:42" pos:end="81:44">pow</name></name><argument_list pos:start="81:45" pos:end="81:52">(<argument pos:start="81:46" pos:end="81:46"><expr pos:start="81:46" pos:end="81:46"><name pos:start="81:46" pos:end="81:46">e</name></expr></argument>, <argument pos:start="81:49" pos:end="81:51"><expr pos:start="81:49" pos:end="81:51"><literal type="number" pos:start="81:49" pos:end="81:51">4.0</literal></expr></argument>)</argument_list></call><operator pos:start="81:53" pos:end="81:53">)</operator> <operator pos:start="81:55" pos:end="81:55">/</operator> <literal type="number" pos:start="81:57" pos:end="81:59">6.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="82:17" pos:end="82:75"><decl pos:start="82:17" pos:end="82:74"><type pos:start="82:17" pos:end="82:22"><name pos:start="82:17" pos:end="82:22">double</name></type> <name pos:start="82:24" pos:end="82:24">s</name> <init pos:start="82:26" pos:end="82:74">= <expr pos:start="82:28" pos:end="82:74"><operator pos:start="82:28" pos:end="82:28">(</operator><call pos:start="82:29" pos:end="82:42"><name pos:start="82:29" pos:end="82:36"><name pos:start="82:29" pos:end="82:32">Math</name><operator pos:start="82:33" pos:end="82:33">.</operator><name pos:start="82:34" pos:end="82:36">pow</name></name><argument_list pos:start="82:37" pos:end="82:42">(<argument pos:start="82:38" pos:end="82:38"><expr pos:start="82:38" pos:end="82:38"><name pos:start="82:38" pos:end="82:38">e</name></expr></argument>, <argument pos:start="82:41" pos:end="82:41"><expr pos:start="82:41" pos:end="82:41"><literal type="number" pos:start="82:41" pos:end="82:41">4</literal></expr></argument>)</argument_list></call> <operator pos:start="82:44" pos:end="82:44">*</operator> <name pos:start="82:46" pos:end="82:46">p</name> <operator pos:start="82:48" pos:end="82:48">*</operator> <name pos:start="82:50" pos:end="82:50">q</name><operator pos:start="82:51" pos:end="82:51">)</operator> <operator pos:start="82:53" pos:end="82:53">/</operator> <operator pos:start="82:55" pos:end="82:55">(</operator><literal type="number" pos:start="82:56" pos:end="82:56">4</literal> <operator pos:start="82:58" pos:end="82:58">*</operator> <call pos:start="82:60" pos:end="82:73"><name pos:start="82:60" pos:end="82:67"><name pos:start="82:60" pos:end="82:63">Math</name><operator pos:start="82:64" pos:end="82:64">.</operator><name pos:start="82:65" pos:end="82:67">pow</name></name><argument_list pos:start="82:68" pos:end="82:73">(<argument pos:start="82:69" pos:end="82:69"><expr pos:start="82:69" pos:end="82:69"><name pos:start="82:69" pos:end="82:69">r</name></expr></argument>, <argument pos:start="82:72" pos:end="82:72"><expr pos:start="82:72" pos:end="82:72"><literal type="number" pos:start="82:72" pos:end="82:72">3</literal></expr></argument>)</argument_list></call><operator pos:start="82:74" pos:end="82:74">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="83:17" pos:end="83:85"><decl pos:start="83:17" pos:end="83:84"><type pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:22">double</name></type> <name pos:start="83:24" pos:end="83:24">t</name> <init pos:start="83:26" pos:end="83:84">= <expr pos:start="83:28" pos:end="83:84"><call pos:start="83:28" pos:end="83:84"><name pos:start="83:28" pos:end="83:35"><name pos:start="83:28" pos:end="83:31">Math</name><operator pos:start="83:32" pos:end="83:32">.</operator><name pos:start="83:33" pos:end="83:35">pow</name></name><argument_list pos:start="83:36" pos:end="83:84">(<argument pos:start="83:37" pos:end="83:72"><expr pos:start="83:37" pos:end="83:72"><operator pos:start="83:37" pos:end="83:37">(</operator><literal type="number" pos:start="83:38" pos:end="83:40">1.0</literal> <operator pos:start="83:42" pos:end="83:42">+</operator> <name pos:start="83:44" pos:end="83:44">s</name> <operator pos:start="83:46" pos:end="83:46">+</operator> <call pos:start="83:48" pos:end="83:71"><name pos:start="83:48" pos:end="83:56"><name pos:start="83:48" pos:end="83:51">Math</name><operator pos:start="83:52" pos:end="83:52">.</operator><name pos:start="83:53" pos:end="83:56">sqrt</name></name><argument_list pos:start="83:57" pos:end="83:71">(<argument pos:start="83:58" pos:end="83:70"><expr pos:start="83:58" pos:end="83:70"><name pos:start="83:58" pos:end="83:58">s</name> <operator pos:start="83:60" pos:end="83:60">*</operator> <operator pos:start="83:62" pos:end="83:62">(</operator><literal type="number" pos:start="83:63" pos:end="83:65">2.0</literal> <operator pos:start="83:67" pos:end="83:67">+</operator> <name pos:start="83:69" pos:end="83:69">s</name><operator pos:start="83:70" pos:end="83:70">)</operator></expr></argument>)</argument_list></call><operator pos:start="83:72" pos:end="83:72">)</operator></expr></argument>, <argument pos:start="83:75" pos:end="83:83"><expr pos:start="83:75" pos:end="83:83"><literal type="number" pos:start="83:75" pos:end="83:77">1.0</literal> <operator pos:start="83:79" pos:end="83:79">/</operator> <literal type="number" pos:start="83:81" pos:end="83:83">3.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="84:17" pos:end="84:51"><decl pos:start="84:17" pos:end="84:50"><type pos:start="84:17" pos:end="84:22"><name pos:start="84:17" pos:end="84:22">double</name></type> <name pos:start="84:24" pos:end="84:24">u</name> <init pos:start="84:26" pos:end="84:50">= <expr pos:start="84:28" pos:end="84:50"><name pos:start="84:28" pos:end="84:28">r</name> <operator pos:start="84:30" pos:end="84:30">*</operator> <operator pos:start="84:32" pos:end="84:32">(</operator><literal type="number" pos:start="84:33" pos:end="84:35">1.0</literal> <operator pos:start="84:37" pos:end="84:37">+</operator> <name pos:start="84:39" pos:end="84:39">t</name> <operator pos:start="84:41" pos:end="84:41">+</operator> <literal type="number" pos:start="84:43" pos:end="84:45">1.0</literal> <operator pos:start="84:47" pos:end="84:47">/</operator> <name pos:start="84:49" pos:end="84:49">t</name><operator pos:start="84:50" pos:end="84:50">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="85:17" pos:end="85:67"><decl pos:start="85:17" pos:end="85:66"><type pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22">double</name></type> <name pos:start="85:24" pos:end="85:24">v</name> <init pos:start="85:26" pos:end="85:66">= <expr pos:start="85:28" pos:end="85:66"><call pos:start="85:28" pos:end="85:66"><name pos:start="85:28" pos:end="85:36"><name pos:start="85:28" pos:end="85:31">Math</name><operator pos:start="85:32" pos:end="85:32">.</operator><name pos:start="85:33" pos:end="85:36">sqrt</name></name><argument_list pos:start="85:37" pos:end="85:66">(<argument pos:start="85:38" pos:end="85:65"><expr pos:start="85:38" pos:end="85:65"><name pos:start="85:38" pos:end="85:38">u</name> <operator pos:start="85:40" pos:end="85:40">*</operator> <name pos:start="85:42" pos:end="85:42">u</name> <operator pos:start="85:44" pos:end="85:44">+</operator> <call pos:start="85:46" pos:end="85:61"><name pos:start="85:46" pos:end="85:53"><name pos:start="85:46" pos:end="85:49">Math</name><operator pos:start="85:50" pos:end="85:50">.</operator><name pos:start="85:51" pos:end="85:53">pow</name></name><argument_list pos:start="85:54" pos:end="85:61">(<argument pos:start="85:55" pos:end="85:55"><expr pos:start="85:55" pos:end="85:55"><name pos:start="85:55" pos:end="85:55">e</name></expr></argument>, <argument pos:start="85:58" pos:end="85:60"><expr pos:start="85:58" pos:end="85:60"><literal type="number" pos:start="85:58" pos:end="85:60">4.0</literal></expr></argument>)</argument_list></call> <operator pos:start="85:63" pos:end="85:63">*</operator> <name pos:start="85:65" pos:end="85:65">q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="86:17" pos:end="86:57"><decl pos:start="86:17" pos:end="86:56"><type pos:start="86:17" pos:end="86:22"><name pos:start="86:17" pos:end="86:22">double</name></type> <name pos:start="86:24" pos:end="86:24">w</name> <init pos:start="86:26" pos:end="86:56">= <expr pos:start="86:28" pos:end="86:56"><name pos:start="86:28" pos:end="86:28">e</name> <operator pos:start="86:30" pos:end="86:30">*</operator> <name pos:start="86:32" pos:end="86:32">e</name> <operator pos:start="86:34" pos:end="86:34">*</operator> <operator pos:start="86:36" pos:end="86:36">(</operator><name pos:start="86:37" pos:end="86:37">u</name> <operator pos:start="86:39" pos:end="86:39">+</operator> <name pos:start="86:41" pos:end="86:41">v</name> <operator pos:start="86:43" pos:end="86:43">-</operator> <name pos:start="86:45" pos:end="86:45">q</name><operator pos:start="86:46" pos:end="86:46">)</operator> <operator pos:start="86:48" pos:end="86:48">/</operator> <operator pos:start="86:50" pos:end="86:50">(</operator><literal type="number" pos:start="86:51" pos:end="86:51">2</literal> <operator pos:start="86:53" pos:end="86:53">*</operator> <name pos:start="86:55" pos:end="86:55">v</name><operator pos:start="86:56" pos:end="86:56">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="87:17" pos:end="87:56"><decl pos:start="87:17" pos:end="87:55"><type pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">double</name></type> <name pos:start="87:24" pos:end="87:24">k</name> <init pos:start="87:26" pos:end="87:55">= <expr pos:start="87:28" pos:end="87:55"><call pos:start="87:28" pos:end="87:51"><name pos:start="87:28" pos:end="87:36"><name pos:start="87:28" pos:end="87:31">Math</name><operator pos:start="87:32" pos:end="87:32">.</operator><name pos:start="87:33" pos:end="87:36">sqrt</name></name><argument_list pos:start="87:37" pos:end="87:51">(<argument pos:start="87:38" pos:end="87:50"><expr pos:start="87:38" pos:end="87:50"><name pos:start="87:38" pos:end="87:38">u</name> <operator pos:start="87:40" pos:end="87:40">+</operator> <name pos:start="87:42" pos:end="87:42">v</name> <operator pos:start="87:44" pos:end="87:44">+</operator> <name pos:start="87:46" pos:end="87:46">w</name> <operator pos:start="87:48" pos:end="87:48">*</operator> <name pos:start="87:50" pos:end="87:50">w</name></expr></argument>)</argument_list></call> <operator pos:start="87:53" pos:end="87:53">-</operator> <name pos:start="87:55" pos:end="87:55">w</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="88:17" pos:end="88:92"><decl pos:start="88:17" pos:end="88:91"><type pos:start="88:17" pos:end="88:22"><name pos:start="88:17" pos:end="88:22">double</name></type> <name pos:start="88:24" pos:end="88:24">d</name> <init pos:start="88:26" pos:end="88:91">= <expr pos:start="88:28" pos:end="88:91"><operator pos:start="88:28" pos:end="88:28">(</operator><name pos:start="88:29" pos:end="88:29">k</name> <operator pos:start="88:31" pos:end="88:31">*</operator> <call pos:start="88:33" pos:end="88:76"><name pos:start="88:33" pos:end="88:41"><name pos:start="88:33" pos:end="88:36">Math</name><operator pos:start="88:37" pos:end="88:37">.</operator><name pos:start="88:38" pos:end="88:41">sqrt</name></name><argument_list pos:start="88:42" pos:end="88:76">(<argument pos:start="88:43" pos:end="88:75"><expr pos:start="88:43" pos:end="88:75"><name pos:start="88:43" pos:end="88:48"><name pos:start="88:43" pos:end="88:46">this</name><operator pos:start="88:47" pos:end="88:47">.</operator><name pos:start="88:48" pos:end="88:48">y</name></name> <operator pos:start="88:50" pos:end="88:50">*</operator> <name pos:start="88:52" pos:end="88:57"><name pos:start="88:52" pos:end="88:55">this</name><operator pos:start="88:56" pos:end="88:56">.</operator><name pos:start="88:57" pos:end="88:57">y</name></name> <operator pos:start="88:59" pos:end="88:59">+</operator> <name pos:start="88:61" pos:end="88:66"><name pos:start="88:61" pos:end="88:64">this</name><operator pos:start="88:65" pos:end="88:65">.</operator><name pos:start="88:66" pos:end="88:66">x</name></name> <operator pos:start="88:68" pos:end="88:68">*</operator> <name pos:start="88:70" pos:end="88:75"><name pos:start="88:70" pos:end="88:73">this</name><operator pos:start="88:74" pos:end="88:74">.</operator><name pos:start="88:75" pos:end="88:75">x</name></name></expr></argument>)</argument_list></call><operator pos:start="88:77" pos:end="88:77">)</operator> <operator pos:start="88:79" pos:end="88:79">/</operator> <operator pos:start="88:81" pos:end="88:81">(</operator><name pos:start="88:82" pos:end="88:82">k</name> <operator pos:start="88:84" pos:end="88:84">+</operator> <name pos:start="88:86" pos:end="88:86">e</name> <operator pos:start="88:88" pos:end="88:88">*</operator> <name pos:start="88:90" pos:end="88:90">e</name><operator pos:start="88:91" pos:end="88:91">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="89:17" pos:end="89:70"><decl pos:start="89:17" pos:end="89:69"><type pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">double</name></type> <name pos:start="89:24" pos:end="89:24">f</name> <init pos:start="89:26" pos:end="89:69">= <expr pos:start="89:28" pos:end="89:69"><literal type="number" pos:start="89:28" pos:end="89:30">1.0</literal> <operator pos:start="89:32" pos:end="89:32">/</operator> <operator pos:start="89:34" pos:end="89:34">(</operator><call pos:start="89:35" pos:end="89:68"><name pos:start="89:35" pos:end="89:43"><name pos:start="89:35" pos:end="89:38">Math</name><operator pos:start="89:39" pos:end="89:39">.</operator><name pos:start="89:40" pos:end="89:43">sqrt</name></name><argument_list pos:start="89:44" pos:end="89:68">(<argument pos:start="89:45" pos:end="89:67"><expr pos:start="89:45" pos:end="89:67"><name pos:start="89:45" pos:end="89:45">d</name> <operator pos:start="89:47" pos:end="89:47">*</operator> <name pos:start="89:49" pos:end="89:49">d</name> <operator pos:start="89:51" pos:end="89:51">+</operator> <name pos:start="89:53" pos:end="89:58"><name pos:start="89:53" pos:end="89:56">this</name><operator pos:start="89:57" pos:end="89:57">.</operator><name pos:start="89:58" pos:end="89:58">z</name></name> <operator pos:start="89:60" pos:end="89:60">*</operator> <name pos:start="89:62" pos:end="89:67"><name pos:start="89:62" pos:end="89:65">this</name><operator pos:start="89:66" pos:end="89:66">.</operator><name pos:start="89:67" pos:end="89:67">z</name></name></expr></argument>)</argument_list></call><operator pos:start="89:69" pos:end="89:69">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="90:17" pos:end="90:44"><decl pos:start="90:17" pos:end="90:43"><type pos:start="90:17" pos:end="90:22"><name pos:start="90:17" pos:end="90:22">double</name></type> <name pos:start="90:24" pos:end="90:25">f2</name> <init pos:start="90:27" pos:end="90:43">= <expr pos:start="90:29" pos:end="90:43"><name pos:start="90:29" pos:end="90:29">k</name> <operator pos:start="90:31" pos:end="90:31">/</operator> <operator pos:start="90:33" pos:end="90:33">(</operator><name pos:start="90:34" pos:end="90:34">k</name> <operator pos:start="90:36" pos:end="90:36">+</operator> <name pos:start="90:38" pos:end="90:38">e</name> <operator pos:start="90:40" pos:end="90:40">*</operator> <name pos:start="90:42" pos:end="90:42">e</name><operator pos:start="90:43" pos:end="90:43">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="91:17" pos:end="91:43"><decl pos:start="91:17" pos:end="91:42"><type pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">double</name></type> <name pos:start="91:24" pos:end="91:24">x</name> <init pos:start="91:26" pos:end="91:42">= <expr pos:start="91:28" pos:end="91:42"><name pos:start="91:28" pos:end="91:28">f</name> <operator pos:start="91:30" pos:end="91:30">*</operator> <name pos:start="91:32" pos:end="91:33">f2</name> <operator pos:start="91:35" pos:end="91:35">*</operator> <name pos:start="91:37" pos:end="91:42"><name pos:start="91:37" pos:end="91:40">this</name><operator pos:start="91:41" pos:end="91:41">.</operator><name pos:start="91:42" pos:end="91:42">x</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="92:17" pos:end="92:43"><decl pos:start="92:17" pos:end="92:42"><type pos:start="92:17" pos:end="92:22"><name pos:start="92:17" pos:end="92:22">double</name></type> <name pos:start="92:24" pos:end="92:24">y</name> <init pos:start="92:26" pos:end="92:42">= <expr pos:start="92:28" pos:end="92:42"><name pos:start="92:28" pos:end="92:28">f</name> <operator pos:start="92:30" pos:end="92:30">*</operator> <name pos:start="92:32" pos:end="92:33">f2</name> <operator pos:start="92:35" pos:end="92:35">*</operator> <name pos:start="92:37" pos:end="92:42"><name pos:start="92:37" pos:end="92:40">this</name><operator pos:start="92:41" pos:end="92:41">.</operator><name pos:start="92:42" pos:end="92:42">y</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="93:17" pos:end="93:38"><decl pos:start="93:17" pos:end="93:37"><type pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:22">double</name></type> <name pos:start="93:24" pos:end="93:24">z</name> <init pos:start="93:26" pos:end="93:37">= <expr pos:start="93:28" pos:end="93:37"><name pos:start="93:28" pos:end="93:28">f</name> <operator pos:start="93:30" pos:end="93:30">*</operator> <name pos:start="93:32" pos:end="93:37"><name pos:start="93:32" pos:end="93:35">this</name><operator pos:start="93:36" pos:end="93:36">.</operator><name pos:start="93:37" pos:end="93:37">z</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="94:17" pos:end="94:86"><decl pos:start="94:17" pos:end="94:85"><type pos:start="94:17" pos:end="94:22"><name pos:start="94:17" pos:end="94:22">double</name></type> <name pos:start="94:24" pos:end="94:26">alt</name> <init pos:start="94:28" pos:end="94:85">= <expr pos:start="94:30" pos:end="94:85"><operator pos:start="94:30" pos:end="94:30">(</operator><name pos:start="94:31" pos:end="94:31">k</name> <operator pos:start="94:33" pos:end="94:33">+</operator> <name pos:start="94:35" pos:end="94:35">e</name> <operator pos:start="94:37" pos:end="94:37">*</operator> <name pos:start="94:39" pos:end="94:39">e</name> <operator pos:start="94:41" pos:end="94:41">-</operator> <literal type="number" pos:start="94:43" pos:end="94:43">1</literal><operator pos:start="94:44" pos:end="94:44">)</operator> <operator pos:start="94:46" pos:end="94:46">/</operator> <name pos:start="94:48" pos:end="94:48">k</name> <operator pos:start="94:50" pos:end="94:50">*</operator> <call pos:start="94:52" pos:end="94:85"><name pos:start="94:52" pos:end="94:60"><name pos:start="94:52" pos:end="94:55">Math</name><operator pos:start="94:56" pos:end="94:56">.</operator><name pos:start="94:57" pos:end="94:60">sqrt</name></name><argument_list pos:start="94:61" pos:end="94:85">(<argument pos:start="94:62" pos:end="94:84"><expr pos:start="94:62" pos:end="94:84"><name pos:start="94:62" pos:end="94:62">d</name> <operator pos:start="94:64" pos:end="94:64">*</operator> <name pos:start="94:66" pos:end="94:66">d</name> <operator pos:start="94:68" pos:end="94:68">+</operator> <name pos:start="94:70" pos:end="94:75"><name pos:start="94:70" pos:end="94:73">this</name><operator pos:start="94:74" pos:end="94:74">.</operator><name pos:start="94:75" pos:end="94:75">z</name></name> <operator pos:start="94:77" pos:end="94:77">*</operator> <name pos:start="94:79" pos:end="94:84"><name pos:start="94:79" pos:end="94:82">this</name><operator pos:start="94:83" pos:end="94:83">.</operator><name pos:start="94:84" pos:end="94:84">z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<return pos:start="96:17" pos:end="96:49">return <expr pos:start="96:24" pos:end="96:48"><operator pos:start="96:24" pos:end="96:26">new</operator> <call pos:start="96:28" pos:end="96:48"><name pos:start="96:28" pos:end="96:34">NVector</name><argument_list pos:start="96:35" pos:end="96:48">(<argument pos:start="96:36" pos:end="96:36"><expr pos:start="96:36" pos:end="96:36"><name pos:start="96:36" pos:end="96:36">x</name></expr></argument>, <argument pos:start="96:39" pos:end="96:39"><expr pos:start="96:39" pos:end="96:39"><name pos:start="96:39" pos:end="96:39">y</name></expr></argument>, <argument pos:start="96:42" pos:end="96:42"><expr pos:start="96:42" pos:end="96:42"><name pos:start="96:42" pos:end="96:42">z</name></expr></argument>, <argument pos:start="96:45" pos:end="96:47"><expr pos:start="96:45" pos:end="96:47"><name pos:start="96:45" pos:end="96:47">alt</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="99:9" pos:end="101:11">/**
	 * @return the latitude, longitude, and altitude for this position
	 */</comment>
	<function pos:start="102:9" pos:end="105:9"><annotation pos:start="102:9" pos:end="102:17">@<name pos:start="102:10" pos:end="102:17">Override</name></annotation>
	<type pos:start="103:9" pos:end="103:28"><specifier pos:start="103:9" pos:end="103:14">public</specifier> <name pos:start="103:16" pos:end="103:28">LlaCoordinate</name></type> <name pos:start="103:30" pos:end="103:44">toLlaCoordinate</name><parameter_list pos:start="103:45" pos:end="103:46">()</parameter_list> <block pos:start="103:48" pos:end="105:9">{<block_content pos:start="104:17" pos:end="104:53">
		<return pos:start="104:17" pos:end="104:53">return <expr pos:start="104:24" pos:end="104:52"><call pos:start="104:24" pos:end="104:34"><name pos:start="104:24" pos:end="104:32">toNVector</name><argument_list pos:start="104:33" pos:end="104:34">()</argument_list></call><operator pos:start="104:35" pos:end="104:35">.</operator><call pos:start="104:36" pos:end="104:52"><name pos:start="104:36" pos:end="104:50">toLlaCoordinate</name><argument_list pos:start="104:51" pos:end="104:52">()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="107:9" pos:end="119:9"><annotation pos:start="107:9" pos:end="107:17">@<name pos:start="107:10" pos:end="107:17">Override</name></annotation>
	<type pos:start="108:9" pos:end="108:18"><specifier pos:start="108:9" pos:end="108:14">public</specifier> <name pos:start="108:16" pos:end="108:18">int</name></type> <name pos:start="108:20" pos:end="108:27">hashCode</name><parameter_list pos:start="108:28" pos:end="108:29">()</parameter_list> <block pos:start="108:31" pos:end="119:9">{<block_content pos:start="109:17" pos:end="118:30">
		<decl_stmt pos:start="109:17" pos:end="109:37"><decl pos:start="109:17" pos:end="109:36"><type pos:start="109:17" pos:end="109:25"><specifier pos:start="109:17" pos:end="109:21">final</specifier> <name pos:start="109:23" pos:end="109:25">int</name></type> <name pos:start="109:27" pos:end="109:31">prime</name> <init pos:start="109:33" pos:end="109:36">= <expr pos:start="109:35" pos:end="109:36"><literal type="number" pos:start="109:35" pos:end="109:36">31</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="110:17" pos:end="110:31"><decl pos:start="110:17" pos:end="110:30"><type pos:start="110:17" pos:end="110:19"><name pos:start="110:17" pos:end="110:19">int</name></type> <name pos:start="110:21" pos:end="110:26">result</name> <init pos:start="110:28" pos:end="110:30">= <expr pos:start="110:30" pos:end="110:30"><literal type="number" pos:start="110:30" pos:end="110:30">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="111:17" pos:end="111:26"><decl pos:start="111:17" pos:end="111:25"><type pos:start="111:17" pos:end="111:20"><name pos:start="111:17" pos:end="111:20">long</name></type> <name pos:start="111:22" pos:end="111:25">temp</name></decl>;</decl_stmt>
		<expr_stmt pos:start="112:17" pos:end="112:50"><expr pos:start="112:17" pos:end="112:49"><name pos:start="112:17" pos:end="112:20">temp</name> <operator pos:start="112:22" pos:end="112:22">=</operator> <call pos:start="112:24" pos:end="112:49"><name pos:start="112:24" pos:end="112:46"><name pos:start="112:24" pos:end="112:29">Double</name><operator pos:start="112:30" pos:end="112:30">.</operator><name pos:start="112:31" pos:end="112:46">doubleToLongBits</name></name><argument_list pos:start="112:47" pos:end="112:49">(<argument pos:start="112:48" pos:end="112:48"><expr pos:start="112:48" pos:end="112:48"><name pos:start="112:48" pos:end="112:48">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="113:17" pos:end="113:71"><expr pos:start="113:17" pos:end="113:70"><name pos:start="113:17" pos:end="113:22">result</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:30">prime</name> <operator pos:start="113:32" pos:end="113:32">*</operator> <name pos:start="113:34" pos:end="113:39">result</name> <operator pos:start="113:41" pos:end="113:41">+</operator> <operator pos:start="113:43" pos:end="113:43">(</operator><name pos:start="113:44" pos:end="113:46">int</name><operator pos:start="113:47" pos:end="113:47">)</operator> <operator pos:start="113:49" pos:end="113:49">(</operator><name pos:start="113:50" pos:end="113:53">temp</name> <operator pos:start="113:55" pos:end="113:55">^</operator> <operator pos:start="113:57" pos:end="113:57">(</operator><name pos:start="113:58" pos:end="113:61">temp</name> <operator pos:start="113:63" pos:end="113:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="113:67" pos:end="113:68">32</literal><operator pos:start="113:69" pos:end="113:69">)</operator><operator pos:start="113:70" pos:end="113:70">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="114:17" pos:end="114:50"><expr pos:start="114:17" pos:end="114:49"><name pos:start="114:17" pos:end="114:20">temp</name> <operator pos:start="114:22" pos:end="114:22">=</operator> <call pos:start="114:24" pos:end="114:49"><name pos:start="114:24" pos:end="114:46"><name pos:start="114:24" pos:end="114:29">Double</name><operator pos:start="114:30" pos:end="114:30">.</operator><name pos:start="114:31" pos:end="114:46">doubleToLongBits</name></name><argument_list pos:start="114:47" pos:end="114:49">(<argument pos:start="114:48" pos:end="114:48"><expr pos:start="114:48" pos:end="114:48"><name pos:start="114:48" pos:end="114:48">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="115:17" pos:end="115:71"><expr pos:start="115:17" pos:end="115:70"><name pos:start="115:17" pos:end="115:22">result</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <name pos:start="115:26" pos:end="115:30">prime</name> <operator pos:start="115:32" pos:end="115:32">*</operator> <name pos:start="115:34" pos:end="115:39">result</name> <operator pos:start="115:41" pos:end="115:41">+</operator> <operator pos:start="115:43" pos:end="115:43">(</operator><name pos:start="115:44" pos:end="115:46">int</name><operator pos:start="115:47" pos:end="115:47">)</operator> <operator pos:start="115:49" pos:end="115:49">(</operator><name pos:start="115:50" pos:end="115:53">temp</name> <operator pos:start="115:55" pos:end="115:55">^</operator> <operator pos:start="115:57" pos:end="115:57">(</operator><name pos:start="115:58" pos:end="115:61">temp</name> <operator pos:start="115:63" pos:end="115:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="115:67" pos:end="115:68">32</literal><operator pos:start="115:69" pos:end="115:69">)</operator><operator pos:start="115:70" pos:end="115:70">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="116:17" pos:end="116:50"><expr pos:start="116:17" pos:end="116:49"><name pos:start="116:17" pos:end="116:20">temp</name> <operator pos:start="116:22" pos:end="116:22">=</operator> <call pos:start="116:24" pos:end="116:49"><name pos:start="116:24" pos:end="116:46"><name pos:start="116:24" pos:end="116:29">Double</name><operator pos:start="116:30" pos:end="116:30">.</operator><name pos:start="116:31" pos:end="116:46">doubleToLongBits</name></name><argument_list pos:start="116:47" pos:end="116:49">(<argument pos:start="116:48" pos:end="116:48"><expr pos:start="116:48" pos:end="116:48"><name pos:start="116:48" pos:end="116:48">z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="117:17" pos:end="117:71"><expr pos:start="117:17" pos:end="117:70"><name pos:start="117:17" pos:end="117:22">result</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:30">prime</name> <operator pos:start="117:32" pos:end="117:32">*</operator> <name pos:start="117:34" pos:end="117:39">result</name> <operator pos:start="117:41" pos:end="117:41">+</operator> <operator pos:start="117:43" pos:end="117:43">(</operator><name pos:start="117:44" pos:end="117:46">int</name><operator pos:start="117:47" pos:end="117:47">)</operator> <operator pos:start="117:49" pos:end="117:49">(</operator><name pos:start="117:50" pos:end="117:53">temp</name> <operator pos:start="117:55" pos:end="117:55">^</operator> <operator pos:start="117:57" pos:end="117:57">(</operator><name pos:start="117:58" pos:end="117:61">temp</name> <operator pos:start="117:63" pos:end="117:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="117:67" pos:end="117:68">32</literal><operator pos:start="117:69" pos:end="117:69">)</operator><operator pos:start="117:70" pos:end="117:70">)</operator></expr>;</expr_stmt>
		<return pos:start="118:17" pos:end="118:30">return <expr pos:start="118:24" pos:end="118:29"><name pos:start="118:24" pos:end="118:29">result</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="121:9" pos:end="124:9"><annotation pos:start="121:9" pos:end="121:17">@<name pos:start="121:10" pos:end="121:17">Override</name></annotation>
	<type pos:start="122:9" pos:end="122:21"><specifier pos:start="122:9" pos:end="122:14">public</specifier> <name pos:start="122:16" pos:end="122:21">String</name></type> <name pos:start="122:23" pos:end="122:30">toString</name><parameter_list pos:start="122:31" pos:end="122:32">()</parameter_list> <block pos:start="122:34" pos:end="124:9">{<block_content pos:start="123:17" pos:end="123:84">
		<return pos:start="123:17" pos:end="123:84">return <expr pos:start="123:24" pos:end="123:83"><call pos:start="123:24" pos:end="123:83"><name pos:start="123:24" pos:end="123:36"><name pos:start="123:24" pos:end="123:29">String</name><operator pos:start="123:30" pos:end="123:30">.</operator><name pos:start="123:31" pos:end="123:36">format</name></name><argument_list pos:start="123:37" pos:end="123:83">(<argument pos:start="123:38" pos:end="123:58"><expr pos:start="123:38" pos:end="123:58"><literal type="string" pos:start="123:38" pos:end="123:58">"PVector(%f, %f, %f)"</literal></expr></argument>, <argument pos:start="123:61" pos:end="123:66"><expr pos:start="123:61" pos:end="123:66"><name pos:start="123:61" pos:end="123:66"><name pos:start="123:61" pos:end="123:64">this</name><operator pos:start="123:65" pos:end="123:65">.</operator><name pos:start="123:66" pos:end="123:66">x</name></name></expr></argument>, <argument pos:start="123:69" pos:end="123:74"><expr pos:start="123:69" pos:end="123:74"><name pos:start="123:69" pos:end="123:74"><name pos:start="123:69" pos:end="123:72">this</name><operator pos:start="123:73" pos:end="123:73">.</operator><name pos:start="123:74" pos:end="123:74">y</name></name></expr></argument>, <argument pos:start="123:77" pos:end="123:82"><expr pos:start="123:77" pos:end="123:82"><name pos:start="123:77" pos:end="123:82"><name pos:start="123:77" pos:end="123:80">this</name><operator pos:start="123:81" pos:end="123:81">.</operator><name pos:start="123:82" pos:end="123:82">z</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="126:9" pos:end="142:9"><annotation pos:start="126:9" pos:end="126:17">@<name pos:start="126:10" pos:end="126:17">Override</name></annotation>
	<type pos:start="127:9" pos:end="127:22"><specifier pos:start="127:9" pos:end="127:14">public</specifier> <name pos:start="127:16" pos:end="127:22">boolean</name></type> <name pos:start="127:24" pos:end="127:29">equals</name><parameter_list pos:start="127:30" pos:end="127:41">(<parameter pos:start="127:31" pos:end="127:40"><decl pos:start="127:31" pos:end="127:40"><type pos:start="127:31" pos:end="127:36"><name pos:start="127:31" pos:end="127:36">Object</name></type> <name pos:start="127:38" pos:end="127:40">obj</name></decl></parameter>)</parameter_list> <block pos:start="127:43" pos:end="142:9">{<block_content pos:start="128:17" pos:end="141:28">
		<if_stmt pos:start="128:17" pos:end="129:36"><if pos:start="128:17" pos:end="129:36">if <condition pos:start="128:20" pos:end="128:32">(<expr pos:start="128:21" pos:end="128:31"><name pos:start="128:21" pos:end="128:24">this</name> <operator pos:start="128:26" pos:end="128:27">==</operator> <name pos:start="128:29" pos:end="128:31">obj</name></expr>)</condition><block type="pseudo" pos:start="129:25" pos:end="129:36"><block_content pos:start="129:25" pos:end="129:36">
			<return pos:start="129:25" pos:end="129:36">return <expr pos:start="129:32" pos:end="129:35"><literal type="boolean" pos:start="129:32" pos:end="129:35">true</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="130:17" pos:end="131:37"><if pos:start="130:17" pos:end="131:37">if <condition pos:start="130:20" pos:end="130:32">(<expr pos:start="130:21" pos:end="130:31"><name pos:start="130:21" pos:end="130:23">obj</name> <operator pos:start="130:25" pos:end="130:26">==</operator> <literal type="null" pos:start="130:28" pos:end="130:31">null</literal></expr>)</condition><block type="pseudo" pos:start="131:25" pos:end="131:37"><block_content pos:start="131:25" pos:end="131:37">
			<return pos:start="131:25" pos:end="131:37">return <expr pos:start="131:32" pos:end="131:36"><literal type="boolean" pos:start="131:32" pos:end="131:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="132:17" pos:end="133:37"><if pos:start="132:17" pos:end="133:37">if <condition pos:start="132:20" pos:end="132:46">(<expr pos:start="132:21" pos:end="132:45"><operator pos:start="132:21" pos:end="132:21">!</operator><operator pos:start="132:22" pos:end="132:22">(</operator><name pos:start="132:23" pos:end="132:25">obj</name> <operator pos:start="132:27" pos:end="132:36">instanceof</operator> <name pos:start="132:38" pos:end="132:44">PVector</name><operator pos:start="132:45" pos:end="132:45">)</operator></expr>)</condition><block type="pseudo" pos:start="133:25" pos:end="133:37"><block_content pos:start="133:25" pos:end="133:37">
			<return pos:start="133:25" pos:end="133:37">return <expr pos:start="133:32" pos:end="133:36"><literal type="boolean" pos:start="133:32" pos:end="133:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt pos:start="134:17" pos:end="134:46"><decl pos:start="134:17" pos:end="134:45"><type pos:start="134:17" pos:end="134:23"><name pos:start="134:17" pos:end="134:23">PVector</name></type> <name pos:start="134:25" pos:end="134:29">other</name> <init pos:start="134:31" pos:end="134:45">= <expr pos:start="134:33" pos:end="134:45"><operator pos:start="134:33" pos:end="134:33">(</operator><name pos:start="134:34" pos:end="134:40">PVector</name><operator pos:start="134:41" pos:end="134:41">)</operator> <name pos:start="134:43" pos:end="134:45">obj</name></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="135:17" pos:end="136:37"><if pos:start="135:17" pos:end="136:37">if <condition pos:start="135:20" pos:end="135:83">(<expr pos:start="135:21" pos:end="135:82"><call pos:start="135:21" pos:end="135:46"><name pos:start="135:21" pos:end="135:43"><name pos:start="135:21" pos:end="135:26">Double</name><operator pos:start="135:27" pos:end="135:27">.</operator><name pos:start="135:28" pos:end="135:43">doubleToLongBits</name></name><argument_list pos:start="135:44" pos:end="135:46">(<argument pos:start="135:45" pos:end="135:45"><expr pos:start="135:45" pos:end="135:45"><name pos:start="135:45" pos:end="135:45">x</name></expr></argument>)</argument_list></call> <operator pos:start="135:48" pos:end="135:49">!=</operator> <call pos:start="135:51" pos:end="135:82"><name pos:start="135:51" pos:end="135:73"><name pos:start="135:51" pos:end="135:56">Double</name><operator pos:start="135:57" pos:end="135:57">.</operator><name pos:start="135:58" pos:end="135:73">doubleToLongBits</name></name><argument_list pos:start="135:74" pos:end="135:82">(<argument pos:start="135:75" pos:end="135:81"><expr pos:start="135:75" pos:end="135:81"><name pos:start="135:75" pos:end="135:81"><name pos:start="135:75" pos:end="135:79">other</name><operator pos:start="135:80" pos:end="135:80">.</operator><name pos:start="135:81" pos:end="135:81">x</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="136:25" pos:end="136:37"><block_content pos:start="136:25" pos:end="136:37">
			<return pos:start="136:25" pos:end="136:37">return <expr pos:start="136:32" pos:end="136:36"><literal type="boolean" pos:start="136:32" pos:end="136:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="137:17" pos:end="138:37"><if pos:start="137:17" pos:end="138:37">if <condition pos:start="137:20" pos:end="137:83">(<expr pos:start="137:21" pos:end="137:82"><call pos:start="137:21" pos:end="137:46"><name pos:start="137:21" pos:end="137:43"><name pos:start="137:21" pos:end="137:26">Double</name><operator pos:start="137:27" pos:end="137:27">.</operator><name pos:start="137:28" pos:end="137:43">doubleToLongBits</name></name><argument_list pos:start="137:44" pos:end="137:46">(<argument pos:start="137:45" pos:end="137:45"><expr pos:start="137:45" pos:end="137:45"><name pos:start="137:45" pos:end="137:45">y</name></expr></argument>)</argument_list></call> <operator pos:start="137:48" pos:end="137:49">!=</operator> <call pos:start="137:51" pos:end="137:82"><name pos:start="137:51" pos:end="137:73"><name pos:start="137:51" pos:end="137:56">Double</name><operator pos:start="137:57" pos:end="137:57">.</operator><name pos:start="137:58" pos:end="137:73">doubleToLongBits</name></name><argument_list pos:start="137:74" pos:end="137:82">(<argument pos:start="137:75" pos:end="137:81"><expr pos:start="137:75" pos:end="137:81"><name pos:start="137:75" pos:end="137:81"><name pos:start="137:75" pos:end="137:79">other</name><operator pos:start="137:80" pos:end="137:80">.</operator><name pos:start="137:81" pos:end="137:81">y</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="138:25" pos:end="138:37"><block_content pos:start="138:25" pos:end="138:37">
			<return pos:start="138:25" pos:end="138:37">return <expr pos:start="138:32" pos:end="138:36"><literal type="boolean" pos:start="138:32" pos:end="138:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="139:17" pos:end="140:37"><if pos:start="139:17" pos:end="140:37">if <condition pos:start="139:20" pos:end="139:83">(<expr pos:start="139:21" pos:end="139:82"><call pos:start="139:21" pos:end="139:46"><name pos:start="139:21" pos:end="139:43"><name pos:start="139:21" pos:end="139:26">Double</name><operator pos:start="139:27" pos:end="139:27">.</operator><name pos:start="139:28" pos:end="139:43">doubleToLongBits</name></name><argument_list pos:start="139:44" pos:end="139:46">(<argument pos:start="139:45" pos:end="139:45"><expr pos:start="139:45" pos:end="139:45"><name pos:start="139:45" pos:end="139:45">z</name></expr></argument>)</argument_list></call> <operator pos:start="139:48" pos:end="139:49">!=</operator> <call pos:start="139:51" pos:end="139:82"><name pos:start="139:51" pos:end="139:73"><name pos:start="139:51" pos:end="139:56">Double</name><operator pos:start="139:57" pos:end="139:57">.</operator><name pos:start="139:58" pos:end="139:73">doubleToLongBits</name></name><argument_list pos:start="139:74" pos:end="139:82">(<argument pos:start="139:75" pos:end="139:81"><expr pos:start="139:75" pos:end="139:81"><name pos:start="139:75" pos:end="139:81"><name pos:start="139:75" pos:end="139:79">other</name><operator pos:start="139:80" pos:end="139:80">.</operator><name pos:start="139:81" pos:end="139:81">z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="140:25" pos:end="140:37"><block_content pos:start="140:25" pos:end="140:37">
			<return pos:start="140:25" pos:end="140:37">return <expr pos:start="140:32" pos:end="140:36"><literal type="boolean" pos:start="140:32" pos:end="140:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<return pos:start="141:17" pos:end="141:28">return <expr pos:start="141:24" pos:end="141:27"><literal type="boolean" pos:start="141:24" pos:end="141:27">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="144:9" pos:end="147:9"><annotation pos:start="144:9" pos:end="144:17">@<name pos:start="144:10" pos:end="144:17">Override</name></annotation>
	<type pos:start="145:9" pos:end="145:22"><specifier pos:start="145:9" pos:end="145:14">public</specifier> <name pos:start="145:16" pos:end="145:22">PVector</name></type> <name pos:start="145:24" pos:end="145:32">toPVector</name><parameter_list pos:start="145:33" pos:end="145:34">()</parameter_list> <block pos:start="145:36" pos:end="147:9">{<block_content pos:start="146:17" pos:end="146:28">
		<return pos:start="146:17" pos:end="146:28">return <expr pos:start="146:24" pos:end="146:27"><name pos:start="146:24" pos:end="146:27">this</name></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>
