<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/TreeNode.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:41">package <name pos:start="1:9" pos:end="1:40"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:35">monitoring</name><operator pos:start="1:36" pos:end="1:36">.</operator><name pos:start="1:37" pos:end="1:40">tree</name></name>;</package>

<import pos:start="3:1" pos:end="3:25">import <name pos:start="3:8" pos:end="3:24"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:16">util</name><operator pos:start="3:17" pos:end="3:17">.</operator><name pos:start="3:18" pos:end="3:24">HashSet</name></name>;</import>
<import pos:start="4:1" pos:end="4:21">import <name pos:start="4:8" pos:end="4:20"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:16">util</name><operator pos:start="4:17" pos:end="4:17">.</operator><name pos:start="4:18" pos:end="4:20">Map</name></name>;</import>
<import pos:start="5:1" pos:end="5:21">import <name pos:start="5:8" pos:end="5:20"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:16">util</name><operator pos:start="5:17" pos:end="5:17">.</operator><name pos:start="5:18" pos:end="5:20">Set</name></name>;</import>
<import pos:start="6:1" pos:end="6:29">import <name pos:start="6:8" pos:end="6:28"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:16">util</name><operator pos:start="6:17" pos:end="6:17">.</operator><name pos:start="6:18" pos:end="6:28">WeakHashMap</name></name>;</import>

<import pos:start="8:1" pos:end="8:59">import <name pos:start="8:8" pos:end="8:58"><name pos:start="8:8" pos:end="8:10">edu</name><operator pos:start="8:11" pos:end="8:11">.</operator><name pos:start="8:12" pos:end="8:13">nd</name><operator pos:start="8:14" pos:end="8:14">.</operator><name pos:start="8:15" pos:end="8:23">dronology</name><operator pos:start="8:24" pos:end="8:24">.</operator><name pos:start="8:25" pos:end="8:28">core</name><operator pos:start="8:29" pos:end="8:29">.</operator><name pos:start="8:30" pos:end="8:39">monitoring</name><operator pos:start="8:40" pos:end="8:40">.</operator><name pos:start="8:41" pos:end="8:58">ArtifactIdentifier</name></name>;</import>
<import pos:start="9:1" pos:end="9:40">import <name pos:start="9:8" pos:end="9:39"><name pos:start="9:8" pos:end="9:10">edu</name><operator pos:start="9:11" pos:end="9:11">.</operator><name pos:start="9:12" pos:end="9:13">nd</name><operator pos:start="9:14" pos:end="9:14">.</operator><name pos:start="9:15" pos:end="9:23">dronology</name><operator pos:start="9:24" pos:end="9:24">.</operator><name pos:start="9:25" pos:end="9:28">util</name><operator pos:start="9:29" pos:end="9:29">.</operator><name pos:start="9:30" pos:end="9:39">Immutables</name></name>;</import>
<import pos:start="10:1" pos:end="10:38">import <name pos:start="10:8" pos:end="10:37"><name pos:start="10:8" pos:end="10:10">edu</name><operator pos:start="10:11" pos:end="10:11">.</operator><name pos:start="10:12" pos:end="10:13">nd</name><operator pos:start="10:14" pos:end="10:14">.</operator><name pos:start="10:15" pos:end="10:23">dronology</name><operator pos:start="10:24" pos:end="10:24">.</operator><name pos:start="10:25" pos:end="10:28">util</name><operator pos:start="10:29" pos:end="10:29">.</operator><name pos:start="10:30" pos:end="10:37">NullUtil</name></name>;</import>
<import pos:start="11:1" pos:end="11:30">import <name pos:start="11:8" pos:end="11:29"><name pos:start="11:8" pos:end="11:10">net</name><operator pos:start="11:11" pos:end="11:11">.</operator><name pos:start="11:12" pos:end="11:13">mv</name><operator pos:start="11:14" pos:end="11:14">.</operator><name pos:start="11:15" pos:end="11:21">logging</name><operator pos:start="11:22" pos:end="11:22">.</operator><name pos:start="11:23" pos:end="11:29">ILogger</name></name>;</import>
<import pos:start="12:1" pos:end="12:37">import <name pos:start="12:8" pos:end="12:36"><name pos:start="12:8" pos:end="12:10">net</name><operator pos:start="12:11" pos:end="12:11">.</operator><name pos:start="12:12" pos:end="12:13">mv</name><operator pos:start="12:14" pos:end="12:14">.</operator><name pos:start="12:15" pos:end="12:21">logging</name><operator pos:start="12:22" pos:end="12:22">.</operator><name pos:start="12:23" pos:end="12:36">LoggerProvider</name></name>;</import>

<comment type="block" format="javadoc" pos:start="14:1" pos:end="20:3">/**
 * A tree node which can hold elements at a node (a set of ArtifactIdentifier)
 * and&lt;br/&gt;
 * have some children identified by ArtifactIdentifier.
 * 
 * 
 */</comment>

<class pos:start="22:1" pos:end="151:1"><specifier pos:start="22:1" pos:end="22:6">public</specifier> class <name pos:start="22:14" pos:end="22:21">TreeNode</name> <block pos:start="22:23" pos:end="151:1">{
	<decl_stmt pos:start="23:9" pos:end="23:87"><decl pos:start="23:9" pos:end="23:86"><type pos:start="23:9" pos:end="23:36"><specifier pos:start="23:9" pos:end="23:15">private</specifier> <specifier pos:start="23:17" pos:end="23:22">static</specifier> <specifier pos:start="23:24" pos:end="23:28">final</specifier> <name pos:start="23:30" pos:end="23:36">ILogger</name></type> <name pos:start="23:38" pos:end="23:43">LOGGER</name> <init pos:start="23:45" pos:end="23:86">= <expr pos:start="23:47" pos:end="23:86"><call pos:start="23:47" pos:end="23:86"><name pos:start="23:47" pos:end="23:70"><name pos:start="23:47" pos:end="23:60">LoggerProvider</name><operator pos:start="23:61" pos:end="23:61">.</operator><name pos:start="23:62" pos:end="23:70">getLogger</name></name><argument_list pos:start="23:71" pos:end="23:86">(<argument pos:start="23:72" pos:end="23:85"><expr pos:start="23:72" pos:end="23:85"><name pos:start="23:72" pos:end="23:85"><name pos:start="23:72" pos:end="23:79">TreeNode</name><operator pos:start="23:80" pos:end="23:80">.</operator><name pos:start="23:81" pos:end="23:85">class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="25:9" pos:end="25:60"><decl pos:start="25:9" pos:end="25:59"><type pos:start="25:9" pos:end="25:40"><specifier pos:start="25:9" pos:end="25:15">private</specifier> <specifier pos:start="25:17" pos:end="25:21">final</specifier> <name pos:start="25:23" pos:end="25:40">ArtifactIdentifier</name></type> <name pos:start="25:42" pos:end="25:59">artifactIdentifier</name></decl>;</decl_stmt>

	<decl_stmt pos:start="27:9" pos:end="27:73"><decl pos:start="27:9" pos:end="27:72"><type pos:start="27:9" pos:end="27:45"><specifier pos:start="27:9" pos:end="27:15">private</specifier> <specifier pos:start="27:17" pos:end="27:21">final</specifier> <name pos:start="27:23" pos:end="27:45"><name pos:start="27:23" pos:end="27:25">Set</name><argument_list type="generic" pos:start="27:26" pos:end="27:45">&lt;<argument pos:start="27:27" pos:end="27:44"><name pos:start="27:27" pos:end="27:44">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="27:47" pos:end="27:54">elements</name> <init pos:start="27:56" pos:end="27:72">= <expr pos:start="27:58" pos:end="27:72"><operator pos:start="27:58" pos:end="27:60">new</operator> <call pos:start="27:62" pos:end="27:72"><name pos:start="27:62" pos:end="27:70"><name pos:start="27:62" pos:end="27:68">HashSet</name><argument_list type="generic" pos:start="27:69" pos:end="27:70">&lt;&gt;</argument_list></name><argument_list pos:start="27:71" pos:end="27:72">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="29:9" pos:end="29:95"><decl pos:start="29:9" pos:end="29:94"><type pos:start="29:9" pos:end="29:63"><specifier pos:start="29:9" pos:end="29:15">private</specifier> <specifier pos:start="29:17" pos:end="29:21">final</specifier> <name pos:start="29:23" pos:end="29:63"><name pos:start="29:23" pos:end="29:33">WeakHashMap</name><argument_list type="generic" pos:start="29:34" pos:end="29:63">&lt;<argument pos:start="29:35" pos:end="29:52"><name pos:start="29:35" pos:end="29:52">ArtifactIdentifier</name></argument>, <argument pos:start="29:55" pos:end="29:62"><name pos:start="29:55" pos:end="29:62">TreeNode</name></argument>&gt;</argument_list></name></type> <name pos:start="29:65" pos:end="29:72">children</name> <init pos:start="29:74" pos:end="29:94">= <expr pos:start="29:76" pos:end="29:94"><operator pos:start="29:76" pos:end="29:78">new</operator> <call pos:start="29:80" pos:end="29:94"><name pos:start="29:80" pos:end="29:92"><name pos:start="29:80" pos:end="29:90">WeakHashMap</name><argument_list type="generic" pos:start="29:91" pos:end="29:92">&lt;&gt;</argument_list></name><argument_list pos:start="29:93" pos:end="29:94">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="31:9" pos:end="31:32"><decl pos:start="31:9" pos:end="31:31"><type pos:start="31:9" pos:end="31:24"><specifier pos:start="31:9" pos:end="31:15">private</specifier> <name pos:start="31:17" pos:end="31:24">TreeNode</name></type> <name pos:start="31:26" pos:end="31:31">parent</name></decl>;</decl_stmt>

	<constructor pos:start="33:9" pos:end="36:9"><specifier pos:start="33:9" pos:end="33:14">public</specifier> <name pos:start="33:16" pos:end="33:23">TreeNode</name><parameter_list pos:start="33:24" pos:end="33:46">(<parameter pos:start="33:25" pos:end="33:45"><decl pos:start="33:25" pos:end="33:45"><type pos:start="33:25" pos:end="33:42"><name pos:start="33:25" pos:end="33:42">ArtifactIdentifier</name></type> <name pos:start="33:44" pos:end="33:45">id</name></decl></parameter>)</parameter_list> <block pos:start="33:48" pos:end="36:9">{<block_content pos:start="34:17" pos:end="35:45">
		<expr_stmt pos:start="34:17" pos:end="34:39"><expr pos:start="34:17" pos:end="34:38"><call pos:start="34:17" pos:end="34:38"><name pos:start="34:17" pos:end="34:34"><name pos:start="34:17" pos:end="34:24">NullUtil</name><operator pos:start="34:25" pos:end="34:25">.</operator><name pos:start="34:26" pos:end="34:34">checkNull</name></name><argument_list pos:start="34:35" pos:end="34:38">(<argument pos:start="34:36" pos:end="34:37"><expr pos:start="34:36" pos:end="34:37"><name pos:start="34:36" pos:end="34:37">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="35:17" pos:end="35:45"><expr pos:start="35:17" pos:end="35:44"><name pos:start="35:17" pos:end="35:39"><name pos:start="35:17" pos:end="35:20">this</name><operator pos:start="35:21" pos:end="35:21">.</operator><name pos:start="35:22" pos:end="35:39">artifactIdentifier</name></name> <operator pos:start="35:41" pos:end="35:41">=</operator> <name pos:start="35:43" pos:end="35:44">id</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function pos:start="38:9" pos:end="40:9"><type pos:start="38:9" pos:end="38:46"><specifier pos:start="38:9" pos:end="38:14">public</specifier> <specifier pos:start="38:16" pos:end="38:27">synchronized</specifier> <name pos:start="38:29" pos:end="38:46">ArtifactIdentifier</name></type> <name pos:start="38:48" pos:end="38:68">getArtifactIdentifier</name><parameter_list pos:start="38:69" pos:end="38:70">()</parameter_list> <block pos:start="38:72" pos:end="40:9">{<block_content pos:start="39:17" pos:end="39:42">
		<return pos:start="39:17" pos:end="39:42">return <expr pos:start="39:24" pos:end="39:41"><name pos:start="39:24" pos:end="39:41">artifactIdentifier</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="42:9" pos:end="47:11">/**
	 * Returns an existing child or creates a new one, if none present.
	 * 
	 * @param id
	 * @return The child with the given identifier.
	 */</comment>
	<function pos:start="48:9" pos:end="59:9"><type pos:start="48:9" pos:end="48:36"><specifier pos:start="48:9" pos:end="48:14">public</specifier> <specifier pos:start="48:16" pos:end="48:27">synchronized</specifier> <name pos:start="48:29" pos:end="48:36">TreeNode</name></type> <name pos:start="48:38" pos:end="48:45">getChild</name><parameter_list pos:start="48:46" pos:end="48:74">(<parameter pos:start="48:47" pos:end="48:73"><decl pos:start="48:47" pos:end="48:73"><type pos:start="48:47" pos:end="48:70"><specifier pos:start="48:47" pos:end="48:51">final</specifier> <name pos:start="48:53" pos:end="48:70">ArtifactIdentifier</name></type> <name pos:start="48:72" pos:end="48:73">id</name></decl></parameter>)</parameter_list> <block pos:start="48:76" pos:end="59:9">{<block_content pos:start="49:17" pos:end="58:28">
		<if_stmt pos:start="49:17" pos:end="51:17"><if pos:start="49:17" pos:end="51:17">if <condition pos:start="49:20" pos:end="49:31">(<expr pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:22">id</name> <operator pos:start="49:24" pos:end="49:25">==</operator> <literal type="null" pos:start="49:27" pos:end="49:30">null</literal></expr>)</condition> <block pos:start="49:33" pos:end="51:17">{<block_content pos:start="50:25" pos:end="50:90">
			<throw pos:start="50:25" pos:end="50:90">throw <expr pos:start="50:31" pos:end="50:89"><operator pos:start="50:31" pos:end="50:33">new</operator> <call pos:start="50:35" pos:end="50:89"><name pos:start="50:35" pos:end="50:58">IllegalArgumentException</name><argument_list pos:start="50:59" pos:end="50:89">(<argument pos:start="50:60" pos:end="50:88"><expr pos:start="50:60" pos:end="50:88"><literal type="string" pos:start="50:60" pos:end="50:88">"Parameter id can't be null!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		<if_stmt pos:start="52:17" pos:end="54:17"><if pos:start="52:17" pos:end="54:17">if <condition pos:start="52:20" pos:end="52:45">(<expr pos:start="52:21" pos:end="52:44"><call pos:start="52:21" pos:end="52:44"><name pos:start="52:21" pos:end="52:40"><name pos:start="52:21" pos:end="52:28">children</name><operator pos:start="52:29" pos:end="52:29">.</operator><name pos:start="52:30" pos:end="52:40">containsKey</name></name><argument_list pos:start="52:41" pos:end="52:44">(<argument pos:start="52:42" pos:end="52:43"><expr pos:start="52:42" pos:end="52:43"><name pos:start="52:42" pos:end="52:43">id</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="52:47" pos:end="54:17">{<block_content pos:start="53:25" pos:end="53:48">
			<return pos:start="53:25" pos:end="53:48">return <expr pos:start="53:32" pos:end="53:47"><call pos:start="53:32" pos:end="53:47"><name pos:start="53:32" pos:end="53:43"><name pos:start="53:32" pos:end="53:39">children</name><operator pos:start="53:40" pos:end="53:40">.</operator><name pos:start="53:41" pos:end="53:43">get</name></name><argument_list pos:start="53:44" pos:end="53:47">(<argument pos:start="53:45" pos:end="53:46"><expr pos:start="53:45" pos:end="53:46"><name pos:start="53:45" pos:end="53:46">id</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt pos:start="55:17" pos:end="55:49"><decl pos:start="55:17" pos:end="55:48"><type pos:start="55:17" pos:end="55:24"><name pos:start="55:17" pos:end="55:24">TreeNode</name></type> <name pos:start="55:26" pos:end="55:29">node</name> <init pos:start="55:31" pos:end="55:48">= <expr pos:start="55:33" pos:end="55:48"><operator pos:start="55:33" pos:end="55:35">new</operator> <call pos:start="55:37" pos:end="55:48"><name pos:start="55:37" pos:end="55:44">TreeNode</name><argument_list pos:start="55:45" pos:end="55:48">(<argument pos:start="55:46" pos:end="55:47"><expr pos:start="55:46" pos:end="55:47"><name pos:start="55:46" pos:end="55:47">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="56:17" pos:end="56:39"><expr pos:start="56:17" pos:end="56:38"><call pos:start="56:17" pos:end="56:38"><name pos:start="56:17" pos:end="56:28"><name pos:start="56:17" pos:end="56:24">children</name><operator pos:start="56:25" pos:end="56:25">.</operator><name pos:start="56:26" pos:end="56:28">put</name></name><argument_list pos:start="56:29" pos:end="56:38">(<argument pos:start="56:30" pos:end="56:31"><expr pos:start="56:30" pos:end="56:31"><name pos:start="56:30" pos:end="56:31">id</name></expr></argument>, <argument pos:start="56:34" pos:end="56:37"><expr pos:start="56:34" pos:end="56:37"><name pos:start="56:34" pos:end="56:37">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="57:17" pos:end="57:37"><expr pos:start="57:17" pos:end="57:36"><call pos:start="57:17" pos:end="57:36"><name pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:20">node</name><operator pos:start="57:21" pos:end="57:21">.</operator><name pos:start="57:22" pos:end="57:30">setParent</name></name><argument_list pos:start="57:31" pos:end="57:36">(<argument pos:start="57:32" pos:end="57:35"><expr pos:start="57:32" pos:end="57:35"><name pos:start="57:32" pos:end="57:35">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="58:17" pos:end="58:28">return <expr pos:start="58:24" pos:end="58:27"><name pos:start="58:24" pos:end="58:27">node</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="61:9" pos:end="64:9"><type pos:start="61:9" pos:end="61:20"><specifier pos:start="61:9" pos:end="61:15">private</specifier> <name pos:start="61:17" pos:end="61:20">void</name></type> <name pos:start="61:22" pos:end="61:30">setParent</name><parameter_list pos:start="61:31" pos:end="61:49">(<parameter pos:start="61:32" pos:end="61:48"><decl pos:start="61:32" pos:end="61:48"><type pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:39">TreeNode</name></type> <name pos:start="61:41" pos:end="61:48">treeNode</name></decl></parameter>)</parameter_list> <block pos:start="61:51" pos:end="64:9">{<block_content pos:start="62:17" pos:end="62:39">
		<expr_stmt pos:start="62:17" pos:end="62:39"><expr pos:start="62:17" pos:end="62:38"><name pos:start="62:17" pos:end="62:27"><name pos:start="62:17" pos:end="62:20">this</name><operator pos:start="62:21" pos:end="62:21">.</operator><name pos:start="62:22" pos:end="62:27">parent</name></name> <operator pos:start="62:29" pos:end="62:29">=</operator> <name pos:start="62:31" pos:end="62:38">treeNode</name></expr>;</expr_stmt>

	</block_content>}</block></function>

	<function pos:start="66:9" pos:end="76:9"><type pos:start="66:9" pos:end="66:35"><specifier pos:start="66:9" pos:end="66:14">public</specifier> <specifier pos:start="66:16" pos:end="66:27">synchronized</specifier> <name pos:start="66:29" pos:end="66:35">boolean</name></type> <name pos:start="66:37" pos:end="66:46">addElement</name><parameter_list pos:start="66:47" pos:end="66:69">(<parameter pos:start="66:48" pos:end="66:68"><decl pos:start="66:48" pos:end="66:68"><type pos:start="66:48" pos:end="66:65"><name pos:start="66:48" pos:end="66:65">ArtifactIdentifier</name></type> <name pos:start="66:67" pos:end="66:68">id</name></decl></parameter>)</parameter_list> <block pos:start="66:71" pos:end="76:9">{<block_content pos:start="67:17" pos:end="75:40">
		<if_stmt pos:start="67:17" pos:end="74:17"><if pos:start="67:17" pos:end="74:17">if <condition pos:start="67:20" pos:end="67:42">(<expr pos:start="67:21" pos:end="67:41"><call pos:start="67:21" pos:end="67:41"><name pos:start="67:21" pos:end="67:37"><name pos:start="67:21" pos:end="67:28">elements</name><operator pos:start="67:29" pos:end="67:29">.</operator><name pos:start="67:30" pos:end="67:37">contains</name></name><argument_list pos:start="67:38" pos:end="67:41">(<argument pos:start="67:39" pos:end="67:40"><expr pos:start="67:39" pos:end="67:40"><name pos:start="67:39" pos:end="67:40">id</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:44" pos:end="74:17">{<block_content pos:start="68:25" pos:end="73:25">
			<for pos:start="68:25" pos:end="73:25">for <control pos:start="68:29" pos:end="68:64">(<init pos:start="68:30" pos:end="68:63"><decl pos:start="68:30" pos:end="68:63"><type pos:start="68:30" pos:end="68:47"><name pos:start="68:30" pos:end="68:47">ArtifactIdentifier</name></type> <name pos:start="68:49" pos:end="68:52">elem</name> <range pos:start="68:54" pos:end="68:63">: <expr pos:start="68:56" pos:end="68:63"><name pos:start="68:56" pos:end="68:63">elements</name></expr></range></decl></init>)</control> <block pos:start="68:66" pos:end="73:25">{<block_content pos:start="69:33" pos:end="72:33">
				<if_stmt pos:start="69:33" pos:end="72:33"><if pos:start="69:33" pos:end="72:33">if <condition pos:start="69:36" pos:end="69:52">(<expr pos:start="69:37" pos:end="69:51"><call pos:start="69:37" pos:end="69:51"><name pos:start="69:37" pos:end="69:47"><name pos:start="69:37" pos:end="69:40">elem</name><operator pos:start="69:41" pos:end="69:41">.</operator><name pos:start="69:42" pos:end="69:47">equals</name></name><argument_list pos:start="69:48" pos:end="69:51">(<argument pos:start="69:49" pos:end="69:50"><expr pos:start="69:49" pos:end="69:50"><name pos:start="69:49" pos:end="69:50">id</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:54" pos:end="72:33">{<block_content pos:start="70:41" pos:end="71:52">
					<expr_stmt pos:start="70:41" pos:end="70:80"><expr pos:start="70:41" pos:end="70:79"><call pos:start="70:41" pos:end="70:79"><name pos:start="70:41" pos:end="70:56"><name pos:start="70:41" pos:end="70:44">elem</name><operator pos:start="70:45" pos:end="70:45">.</operator><name pos:start="70:46" pos:end="70:56">attachItems</name></name><argument_list pos:start="70:57" pos:end="70:79">(<argument pos:start="70:58" pos:end="70:78"><expr pos:start="70:58" pos:end="70:78"><call pos:start="70:58" pos:end="70:78"><name pos:start="70:58" pos:end="70:76"><name pos:start="70:58" pos:end="70:59">id</name><operator pos:start="70:60" pos:end="70:60">.</operator><name pos:start="70:61" pos:end="70:76">getAttachedItems</name></name><argument_list pos:start="70:77" pos:end="70:78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:start="71:41" pos:end="71:52">return <expr pos:start="71:48" pos:end="71:51"><literal type="boolean" pos:start="71:48" pos:end="71:51">true</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<return pos:start="75:17" pos:end="75:40">return <expr pos:start="75:24" pos:end="75:39"><call pos:start="75:24" pos:end="75:39"><name pos:start="75:24" pos:end="75:35"><name pos:start="75:24" pos:end="75:31">elements</name><operator pos:start="75:32" pos:end="75:32">.</operator><name pos:start="75:33" pos:end="75:35">add</name></name><argument_list pos:start="75:36" pos:end="75:39">(<argument pos:start="75:37" pos:end="75:38"><expr pos:start="75:37" pos:end="75:38"><name pos:start="75:37" pos:end="75:38">id</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="78:9" pos:end="80:9"><type pos:start="78:9" pos:end="78:51"><specifier pos:start="78:9" pos:end="78:14">public</specifier> <specifier pos:start="78:16" pos:end="78:27">synchronized</specifier> <name pos:start="78:29" pos:end="78:51"><name pos:start="78:29" pos:end="78:31">Set</name><argument_list type="generic" pos:start="78:32" pos:end="78:51">&lt;<argument pos:start="78:33" pos:end="78:50"><name pos:start="78:33" pos:end="78:50">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="78:53" pos:end="78:63">getElements</name><parameter_list pos:start="78:64" pos:end="78:65">()</parameter_list> <block pos:start="78:67" pos:end="80:9">{<block_content pos:start="79:17" pos:end="79:56">
		<return pos:start="79:17" pos:end="79:56">return <expr pos:start="79:24" pos:end="79:55"><call pos:start="79:24" pos:end="79:55"><name pos:start="79:24" pos:end="79:45"><name pos:start="79:24" pos:end="79:33">Immutables</name><operator pos:start="79:34" pos:end="79:34">.</operator><name pos:start="79:35" pos:end="79:45">hashSetCopy</name></name><argument_list pos:start="79:46" pos:end="79:55">(<argument pos:start="79:47" pos:end="79:54"><expr pos:start="79:47" pos:end="79:54"><name pos:start="79:47" pos:end="79:54">elements</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="82:9" pos:end="84:9"><type pos:start="82:9" pos:end="82:61"><specifier pos:start="82:9" pos:end="82:14">public</specifier> <specifier pos:start="82:16" pos:end="82:27">synchronized</specifier> <name pos:start="82:29" pos:end="82:61"><name pos:start="82:29" pos:end="82:31">Map</name><argument_list type="generic" pos:start="82:32" pos:end="82:61">&lt;<argument pos:start="82:33" pos:end="82:50"><name pos:start="82:33" pos:end="82:50">ArtifactIdentifier</name></argument>, <argument pos:start="82:53" pos:end="82:60"><name pos:start="82:53" pos:end="82:60">TreeNode</name></argument>&gt;</argument_list></name></type> <name pos:start="82:63" pos:end="82:73">getChildren</name><parameter_list pos:start="82:74" pos:end="82:75">()</parameter_list> <block pos:start="82:77" pos:end="84:9">{<block_content pos:start="83:17" pos:end="83:56">
		<return pos:start="83:17" pos:end="83:56">return <expr pos:start="83:24" pos:end="83:55"><call pos:start="83:24" pos:end="83:55"><name pos:start="83:24" pos:end="83:45"><name pos:start="83:24" pos:end="83:33">Immutables</name><operator pos:start="83:34" pos:end="83:34">.</operator><name pos:start="83:35" pos:end="83:45">hashMapCopy</name></name><argument_list pos:start="83:46" pos:end="83:55">(<argument pos:start="83:47" pos:end="83:54"><expr pos:start="83:47" pos:end="83:54"><name pos:start="83:47" pos:end="83:54">children</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="86:9" pos:end="88:11">/**
	 * Remove all children and elements.
	 */</comment>
	<function pos:start="89:9" pos:end="92:9"><type pos:start="89:9" pos:end="89:32"><specifier pos:start="89:9" pos:end="89:14">public</specifier> <specifier pos:start="89:16" pos:end="89:27">synchronized</specifier> <name pos:start="89:29" pos:end="89:32">void</name></type> <name pos:start="89:34" pos:end="89:38">clear</name><parameter_list pos:start="89:39" pos:end="89:40">()</parameter_list> <block pos:start="89:42" pos:end="92:9">{<block_content pos:start="90:17" pos:end="91:33">
		<expr_stmt pos:start="90:17" pos:end="90:33"><expr pos:start="90:17" pos:end="90:32"><call pos:start="90:17" pos:end="90:32"><name pos:start="90:17" pos:end="90:30"><name pos:start="90:17" pos:end="90:24">children</name><operator pos:start="90:25" pos:end="90:25">.</operator><name pos:start="90:26" pos:end="90:30">clear</name></name><argument_list pos:start="90:31" pos:end="90:32">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="91:17" pos:end="91:33"><expr pos:start="91:17" pos:end="91:32"><call pos:start="91:17" pos:end="91:32"><name pos:start="91:17" pos:end="91:30"><name pos:start="91:17" pos:end="91:24">elements</name><operator pos:start="91:25" pos:end="91:25">.</operator><name pos:start="91:26" pos:end="91:30">clear</name></name><argument_list pos:start="91:31" pos:end="91:32">()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function pos:start="94:9" pos:end="100:9"><annotation pos:start="94:9" pos:end="94:17">@<name pos:start="94:10" pos:end="94:17">Override</name></annotation>
	<type pos:start="95:9" pos:end="95:31"><specifier pos:start="95:9" pos:end="95:14">public</specifier> <specifier pos:start="95:16" pos:end="95:27">synchronized</specifier> <name pos:start="95:29" pos:end="95:31">int</name></type> <name pos:start="95:33" pos:end="95:40">hashCode</name><parameter_list pos:start="95:41" pos:end="95:42">()</parameter_list> <block pos:start="95:44" pos:end="100:9">{<block_content pos:start="96:17" pos:end="99:30">
		<decl_stmt pos:start="96:17" pos:end="96:37"><decl pos:start="96:17" pos:end="96:36"><type pos:start="96:17" pos:end="96:25"><specifier pos:start="96:17" pos:end="96:21">final</specifier> <name pos:start="96:23" pos:end="96:25">int</name></type> <name pos:start="96:27" pos:end="96:31">prime</name> <init pos:start="96:33" pos:end="96:36">= <expr pos:start="96:35" pos:end="96:36"><literal type="number" pos:start="96:35" pos:end="96:36">31</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="97:17" pos:end="97:31"><decl pos:start="97:17" pos:end="97:30"><type pos:start="97:17" pos:end="97:19"><name pos:start="97:17" pos:end="97:19">int</name></type> <name pos:start="97:21" pos:end="97:26">result</name> <init pos:start="97:28" pos:end="97:30">= <expr pos:start="97:30" pos:end="97:30"><literal type="number" pos:start="97:30" pos:end="97:30">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="98:17" pos:end="98:111"><expr pos:start="98:17" pos:end="98:110"><name pos:start="98:17" pos:end="98:22">result</name> <operator pos:start="98:24" pos:end="98:24">=</operator> <operator pos:start="98:26" pos:end="98:26">(</operator><name pos:start="98:27" pos:end="98:31">prime</name> <operator pos:start="98:33" pos:end="98:33">*</operator> <name pos:start="98:35" pos:end="98:40">result</name><operator pos:start="98:41" pos:end="98:41">)</operator> <operator pos:start="98:43" pos:end="98:43">+</operator> <operator pos:start="98:45" pos:end="98:45">(</operator><ternary pos:start="98:46" pos:end="98:109"><condition pos:start="98:46" pos:end="98:75"><expr pos:start="98:46" pos:end="98:73"><operator pos:start="98:46" pos:end="98:46">(</operator><name pos:start="98:47" pos:end="98:64">artifactIdentifier</name> <operator pos:start="98:66" pos:end="98:67">==</operator> <literal type="null" pos:start="98:69" pos:end="98:72">null</literal><operator pos:start="98:73" pos:end="98:73">)</operator></expr> ?</condition><then pos:start="98:77" pos:end="98:77"> <expr pos:start="98:77" pos:end="98:77"><literal type="number" pos:start="98:77" pos:end="98:77">0</literal></expr> </then><else pos:start="98:79" pos:end="98:109">: <expr pos:start="98:81" pos:end="98:109"><call pos:start="98:81" pos:end="98:109"><name pos:start="98:81" pos:end="98:107"><name pos:start="98:81" pos:end="98:98">artifactIdentifier</name><operator pos:start="98:99" pos:end="98:99">.</operator><name pos:start="98:100" pos:end="98:107">hashCode</name></name><argument_list pos:start="98:108" pos:end="98:109">()</argument_list></call></expr></else></ternary><operator pos:start="98:110" pos:end="98:110">)</operator></expr>;</expr_stmt>
		<return pos:start="99:17" pos:end="99:30">return <expr pos:start="99:24" pos:end="99:29"><name pos:start="99:24" pos:end="99:29">result</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="102:9" pos:end="122:9"><annotation pos:start="102:9" pos:end="102:17">@<name pos:start="102:10" pos:end="102:17">Override</name></annotation>
	<type pos:start="103:9" pos:end="103:35"><specifier pos:start="103:9" pos:end="103:14">public</specifier> <specifier pos:start="103:16" pos:end="103:27">synchronized</specifier> <name pos:start="103:29" pos:end="103:35">boolean</name></type> <name pos:start="103:37" pos:end="103:42">equals</name><parameter_list pos:start="103:43" pos:end="103:54">(<parameter pos:start="103:44" pos:end="103:53"><decl pos:start="103:44" pos:end="103:53"><type pos:start="103:44" pos:end="103:49"><name pos:start="103:44" pos:end="103:49">Object</name></type> <name pos:start="103:51" pos:end="103:53">obj</name></decl></parameter>)</parameter_list> <block pos:start="103:56" pos:end="122:9">{<block_content pos:start="104:17" pos:end="121:28">
		<if_stmt pos:start="104:17" pos:end="106:17"><if pos:start="104:17" pos:end="106:17">if <condition pos:start="104:20" pos:end="104:32">(<expr pos:start="104:21" pos:end="104:31"><name pos:start="104:21" pos:end="104:24">this</name> <operator pos:start="104:26" pos:end="104:27">==</operator> <name pos:start="104:29" pos:end="104:31">obj</name></expr>)</condition> <block pos:start="104:34" pos:end="106:17">{<block_content pos:start="105:25" pos:end="105:36">
			<return pos:start="105:25" pos:end="105:36">return <expr pos:start="105:32" pos:end="105:35"><literal type="boolean" pos:start="105:32" pos:end="105:35">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt pos:start="107:17" pos:end="109:17"><if pos:start="107:17" pos:end="109:17">if <condition pos:start="107:20" pos:end="107:32">(<expr pos:start="107:21" pos:end="107:31"><name pos:start="107:21" pos:end="107:23">obj</name> <operator pos:start="107:25" pos:end="107:26">==</operator> <literal type="null" pos:start="107:28" pos:end="107:31">null</literal></expr>)</condition> <block pos:start="107:34" pos:end="109:17">{<block_content pos:start="108:25" pos:end="108:37">
			<return pos:start="108:25" pos:end="108:37">return <expr pos:start="108:32" pos:end="108:36"><literal type="boolean" pos:start="108:32" pos:end="108:36">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt pos:start="110:17" pos:end="112:17"><if pos:start="110:17" pos:end="112:17">if <condition pos:start="110:20" pos:end="110:49">(<expr pos:start="110:21" pos:end="110:48"><call pos:start="110:21" pos:end="110:30"><name pos:start="110:21" pos:end="110:28">getClass</name><argument_list pos:start="110:29" pos:end="110:30">()</argument_list></call> <operator pos:start="110:32" pos:end="110:33">!=</operator> <call pos:start="110:35" pos:end="110:48"><name pos:start="110:35" pos:end="110:46"><name pos:start="110:35" pos:end="110:37">obj</name><operator pos:start="110:38" pos:end="110:38">.</operator><name pos:start="110:39" pos:end="110:46">getClass</name></name><argument_list pos:start="110:47" pos:end="110:48">()</argument_list></call></expr>)</condition> <block pos:start="110:51" pos:end="112:17">{<block_content pos:start="111:25" pos:end="111:37">
			<return pos:start="111:25" pos:end="111:37">return <expr pos:start="111:32" pos:end="111:36"><literal type="boolean" pos:start="111:32" pos:end="111:36">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt pos:start="113:17" pos:end="113:48"><decl pos:start="113:17" pos:end="113:47"><type pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:24">TreeNode</name></type> <name pos:start="113:26" pos:end="113:30">other</name> <init pos:start="113:32" pos:end="113:47">= <expr pos:start="113:34" pos:end="113:47"><operator pos:start="113:34" pos:end="113:34">(</operator><name pos:start="113:35" pos:end="113:42">TreeNode</name><operator pos:start="113:43" pos:end="113:43">)</operator> <name pos:start="113:45" pos:end="113:47">obj</name></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="114:17" pos:end="120:17"><if pos:start="114:17" pos:end="118:17">if <condition pos:start="114:20" pos:end="114:47">(<expr pos:start="114:21" pos:end="114:46"><name pos:start="114:21" pos:end="114:38">artifactIdentifier</name> <operator pos:start="114:40" pos:end="114:41">==</operator> <literal type="null" pos:start="114:43" pos:end="114:46">null</literal></expr>)</condition> <block pos:start="114:49" pos:end="118:17">{<block_content pos:start="115:25" pos:end="117:25">
			<if_stmt pos:start="115:25" pos:end="117:25"><if pos:start="115:25" pos:end="117:25">if <condition pos:start="115:28" pos:end="115:61">(<expr pos:start="115:29" pos:end="115:60"><name pos:start="115:29" pos:end="115:52"><name pos:start="115:29" pos:end="115:33">other</name><operator pos:start="115:34" pos:end="115:34">.</operator><name pos:start="115:35" pos:end="115:52">artifactIdentifier</name></name> <operator pos:start="115:54" pos:end="115:55">!=</operator> <literal type="null" pos:start="115:57" pos:end="115:60">null</literal></expr>)</condition> <block pos:start="115:63" pos:end="117:25">{<block_content pos:start="116:33" pos:end="116:45">
				<return pos:start="116:33" pos:end="116:45">return <expr pos:start="116:40" pos:end="116:44"><literal type="boolean" pos:start="116:40" pos:end="116:44">false</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif" pos:start="118:19" pos:end="120:17">else if <condition pos:start="118:27" pos:end="118:80">(<expr pos:start="118:28" pos:end="118:79"><operator pos:start="118:28" pos:end="118:28">!</operator><call pos:start="118:29" pos:end="118:79"><name pos:start="118:29" pos:end="118:53"><name pos:start="118:29" pos:end="118:46">artifactIdentifier</name><operator pos:start="118:47" pos:end="118:47">.</operator><name pos:start="118:48" pos:end="118:53">equals</name></name><argument_list pos:start="118:54" pos:end="118:79">(<argument pos:start="118:55" pos:end="118:78"><expr pos:start="118:55" pos:end="118:78"><name pos:start="118:55" pos:end="118:78"><name pos:start="118:55" pos:end="118:59">other</name><operator pos:start="118:60" pos:end="118:60">.</operator><name pos:start="118:61" pos:end="118:78">artifactIdentifier</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="118:82" pos:end="120:17">{<block_content pos:start="119:25" pos:end="119:37">
			<return pos:start="119:25" pos:end="119:37">return <expr pos:start="119:32" pos:end="119:36"><literal type="boolean" pos:start="119:32" pos:end="119:36">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return pos:start="121:17" pos:end="121:28">return <expr pos:start="121:24" pos:end="121:27"><literal type="boolean" pos:start="121:24" pos:end="121:27">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="124:9" pos:end="128:9"><annotation pos:start="124:9" pos:end="124:17">@<name pos:start="124:10" pos:end="124:17">Override</name></annotation>
	<type pos:start="125:9" pos:end="125:34"><specifier pos:start="125:9" pos:end="125:14">public</specifier> <specifier pos:start="125:16" pos:end="125:27">synchronized</specifier> <name pos:start="125:29" pos:end="125:34">String</name></type> <name pos:start="125:36" pos:end="125:43">toString</name><parameter_list pos:start="125:44" pos:end="125:45">()</parameter_list> <block pos:start="125:47" pos:end="128:9">{<block_content pos:start="126:17" pos:end="127:38">
		<return pos:start="126:17" pos:end="127:38">return <expr pos:start="126:24" pos:end="127:37"><literal type="string" pos:start="126:24" pos:end="126:54">"TreeNode [artifactIdentifier="</literal> <operator pos:start="126:56" pos:end="126:56">+</operator> <name pos:start="126:58" pos:end="126:75">artifactIdentifier</name> <operator pos:start="126:77" pos:end="126:77">+</operator> <literal type="string" pos:start="126:79" pos:end="126:91">", children="</literal> <operator pos:start="126:93" pos:end="126:93">+</operator> <name pos:start="126:95" pos:end="126:102">children</name> <operator pos:start="126:104" pos:end="126:104">+</operator> <literal type="string" pos:start="126:106" pos:end="126:115">", elems="</literal> <operator pos:start="126:117" pos:end="126:117">+</operator> <name pos:start="126:119" pos:end="126:126">elements</name>
				<operator pos:start="127:33" pos:end="127:33">+</operator> <literal type="string" pos:start="127:35" pos:end="127:37">"]"</literal></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="130:9" pos:end="132:11">/**
	 * Debug-only diagnostic output.
	 */</comment>
	<function pos:start="133:9" pos:end="142:9"><type pos:start="133:9" pos:end="133:32"><specifier pos:start="133:9" pos:end="133:14">public</specifier> <specifier pos:start="133:16" pos:end="133:27">synchronized</specifier> <name pos:start="133:29" pos:end="133:32">void</name></type> <name pos:start="133:34" pos:end="133:38">toLog</name><parameter_list pos:start="133:39" pos:end="133:40">()</parameter_list> <block pos:start="133:42" pos:end="142:9">{<block_content pos:start="134:17" pos:end="140:17">
		<expr_stmt pos:start="134:17" pos:end="134:73"><expr pos:start="134:17" pos:end="134:72"><call pos:start="134:17" pos:end="134:72"><name pos:start="134:17" pos:end="134:28"><name pos:start="134:17" pos:end="134:22">LOGGER</name><operator pos:start="134:23" pos:end="134:23">.</operator><name pos:start="134:24" pos:end="134:28">debug</name></name><argument_list pos:start="134:29" pos:end="134:72">(<argument pos:start="134:30" pos:end="134:71"><expr pos:start="134:30" pos:end="134:71"><literal type="string" pos:start="134:30" pos:end="134:50">"artifactIdentifier="</literal> <operator pos:start="134:52" pos:end="134:52">+</operator> <name pos:start="134:54" pos:end="134:71">artifactIdentifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="135:17" pos:end="135:50"><expr pos:start="135:17" pos:end="135:49"><call pos:start="135:17" pos:end="135:49"><name pos:start="135:17" pos:end="135:28"><name pos:start="135:17" pos:end="135:22">LOGGER</name><operator pos:start="135:23" pos:end="135:23">.</operator><name pos:start="135:24" pos:end="135:28">debug</name></name><argument_list pos:start="135:29" pos:end="135:49">(<argument pos:start="135:30" pos:end="135:48"><expr pos:start="135:30" pos:end="135:48"><literal type="string" pos:start="135:30" pos:end="135:37">"elems="</literal> <operator pos:start="135:39" pos:end="135:39">+</operator> <name pos:start="135:41" pos:end="135:48">elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:start="136:17" pos:end="140:17">for <control pos:start="136:21" pos:end="136:96">(<init pos:start="136:22" pos:end="136:95"><decl pos:start="136:22" pos:end="136:95"><type pos:start="136:22" pos:end="136:60"><name pos:start="136:22" pos:end="136:60"><name pos:start="136:22" pos:end="136:24">Map</name><operator pos:start="136:25" pos:end="136:25">.</operator><name pos:start="136:26" pos:end="136:60"><name pos:start="136:26" pos:end="136:30">Entry</name><argument_list type="generic" pos:start="136:31" pos:end="136:60">&lt;<argument pos:start="136:32" pos:end="136:49"><name pos:start="136:32" pos:end="136:49">ArtifactIdentifier</name></argument>, <argument pos:start="136:52" pos:end="136:59"><name pos:start="136:52" pos:end="136:59">TreeNode</name></argument>&gt;</argument_list></name></name></type> <name pos:start="136:62" pos:end="136:73">childEntries</name> <range pos:start="136:75" pos:end="136:95">: <expr pos:start="136:77" pos:end="136:95"><call pos:start="136:77" pos:end="136:95"><name pos:start="136:77" pos:end="136:93"><name pos:start="136:77" pos:end="136:84">children</name><operator pos:start="136:85" pos:end="136:85">.</operator><name pos:start="136:86" pos:end="136:93">entrySet</name></name><argument_list pos:start="136:94" pos:end="136:95">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="136:98" pos:end="140:17">{<block_content pos:start="137:25" pos:end="139:62">
			<expr_stmt pos:start="137:25" pos:end="137:44"><expr pos:start="137:25" pos:end="137:43"><call pos:start="137:25" pos:end="137:43"><name pos:start="137:25" pos:end="137:36"><name pos:start="137:25" pos:end="137:30">LOGGER</name><operator pos:start="137:31" pos:end="137:31">.</operator><name pos:start="137:32" pos:end="137:36">debug</name></name><argument_list pos:start="137:37" pos:end="137:43">(<argument pos:start="137:38" pos:end="137:42"><expr pos:start="137:38" pos:end="137:42"><literal type="string" pos:start="137:38" pos:end="137:42">"---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="138:25" pos:end="138:79"><expr pos:start="138:25" pos:end="138:78"><call pos:start="138:25" pos:end="138:78"><name pos:start="138:25" pos:end="138:36"><name pos:start="138:25" pos:end="138:30">LOGGER</name><operator pos:start="138:31" pos:end="138:31">.</operator><name pos:start="138:32" pos:end="138:36">debug</name></name><argument_list pos:start="138:37" pos:end="138:78">(<argument pos:start="138:38" pos:end="138:77"><expr pos:start="138:38" pos:end="138:77"><literal type="string" pos:start="138:38" pos:end="138:46">"child '"</literal> <operator pos:start="138:48" pos:end="138:48">+</operator> <call pos:start="138:50" pos:end="138:70"><name pos:start="138:50" pos:end="138:68"><name pos:start="138:50" pos:end="138:61">childEntries</name><operator pos:start="138:62" pos:end="138:62">.</operator><name pos:start="138:63" pos:end="138:68">getKey</name></name><argument_list pos:start="138:69" pos:end="138:70">()</argument_list></call> <operator pos:start="138:72" pos:end="138:72">+</operator> <literal type="string" pos:start="138:74" pos:end="138:77">"':"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="139:25" pos:end="139:62"><expr pos:start="139:25" pos:end="139:61"><call pos:start="139:25" pos:end="139:61"><name pos:start="139:25" pos:end="139:36"><name pos:start="139:25" pos:end="139:30">LOGGER</name><operator pos:start="139:31" pos:end="139:31">.</operator><name pos:start="139:32" pos:end="139:36">debug</name></name><argument_list pos:start="139:37" pos:end="139:61">(<argument pos:start="139:38" pos:end="139:60"><expr pos:start="139:38" pos:end="139:60"><call pos:start="139:38" pos:end="139:60"><name pos:start="139:38" pos:end="139:58"><name pos:start="139:38" pos:end="139:49">childEntries</name><operator pos:start="139:50" pos:end="139:50">.</operator><name pos:start="139:51" pos:end="139:58">getValue</name></name><argument_list pos:start="139:59" pos:end="139:60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

	</block_content>}</block></function>

	<function pos:start="144:9" pos:end="146:9"><type pos:start="144:9" pos:end="144:23"><specifier pos:start="144:9" pos:end="144:14">public</specifier> <name pos:start="144:16" pos:end="144:23">TreeNode</name></type> <name pos:start="144:25" pos:end="144:33">getParent</name><parameter_list pos:start="144:34" pos:end="144:35">()</parameter_list> <block pos:start="144:37" pos:end="146:9">{<block_content pos:start="145:17" pos:end="145:30">
		<return pos:start="145:17" pos:end="145:30">return <expr pos:start="145:24" pos:end="145:29"><name pos:start="145:24" pos:end="145:29">parent</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="148:9" pos:end="150:9"><type pos:start="148:9" pos:end="148:19"><specifier pos:start="148:9" pos:end="148:14">public</specifier> <name pos:start="148:16" pos:end="148:19">void</name></type> <name pos:start="148:21" pos:end="148:26">remove</name><parameter_list pos:start="148:27" pos:end="148:41">(<parameter pos:start="148:28" pos:end="148:40"><decl pos:start="148:28" pos:end="148:40"><type pos:start="148:28" pos:end="148:35"><name pos:start="148:28" pos:end="148:35">TreeNode</name></type> <name pos:start="148:37" pos:end="148:40">node</name></decl></parameter>)</parameter_list> <block pos:start="148:43" pos:end="150:9">{<block_content pos:start="149:17" pos:end="149:62">
		<expr_stmt pos:start="149:17" pos:end="149:62"><expr pos:start="149:17" pos:end="149:61"><call pos:start="149:17" pos:end="149:61"><name pos:start="149:17" pos:end="149:31"><name pos:start="149:17" pos:end="149:24">children</name><operator pos:start="149:25" pos:end="149:25">.</operator><name pos:start="149:26" pos:end="149:31">remove</name></name><argument_list pos:start="149:32" pos:end="149:61">(<argument pos:start="149:33" pos:end="149:60"><expr pos:start="149:33" pos:end="149:60"><call pos:start="149:33" pos:end="149:60"><name pos:start="149:33" pos:end="149:58"><name pos:start="149:33" pos:end="149:36">node</name><operator pos:start="149:37" pos:end="149:37">.</operator><name pos:start="149:38" pos:end="149:58">getArtifactIdentifier</name></name><argument_list pos:start="149:59" pos:end="149:60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>
