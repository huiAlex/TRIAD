<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/CoverageTest.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:64">package <name pos:start="1:9" pos:end="1:63"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:33">services</name><operator pos:start="1:34" pos:end="1:34">.</operator><name pos:start="1:35" pos:end="1:44">extensions</name><operator pos:start="1:45" pos:end="1:45">.</operator><name pos:start="1:46" pos:end="1:56">areamapping</name><operator pos:start="1:57" pos:end="1:57">.</operator><name pos:start="1:58" pos:end="1:63">output</name></name>;</package>

<import pos:start="3:1" pos:end="3:22">import <name pos:start="3:8" pos:end="3:21"><name pos:start="3:8" pos:end="3:10">org</name><operator pos:start="3:11" pos:end="3:11">.</operator><name pos:start="3:12" pos:end="3:16">junit</name><operator pos:start="3:17" pos:end="3:17">.</operator><name pos:start="3:18" pos:end="3:21">Test</name></name>;</import>

<class pos:start="5:1" pos:end="22:1"><specifier pos:start="5:1" pos:end="5:6">public</specifier> class <name pos:start="5:14" pos:end="5:25">CoverageTest</name> <block pos:start="5:27" pos:end="22:1">{
	
	<decl_stmt pos:start="7:9" pos:end="7:49"><decl pos:start="7:9" pos:end="7:48"><type pos:start="7:9" pos:end="7:27"><specifier pos:start="7:9" pos:end="7:13">final</specifier> <specifier pos:start="7:15" pos:end="7:20">static</specifier> <name pos:start="7:22" pos:end="7:27">double</name></type> <name pos:start="7:29" pos:end="7:43">APERATURE_WIDTH</name> <init pos:start="7:45" pos:end="7:48">= <expr pos:start="7:47" pos:end="7:48"><literal type="number" pos:start="7:47" pos:end="7:48">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="8:9" pos:end="8:67"><decl pos:start="8:9" pos:end="8:66"><type pos:start="8:9" pos:end="8:27"><specifier pos:start="8:9" pos:end="8:13">final</specifier> <specifier pos:start="8:15" pos:end="8:20">static</specifier> <name pos:start="8:22" pos:end="8:27">double</name></type> <name pos:start="8:29" pos:end="8:44">APERATURE_HEIGHT</name> <init pos:start="8:46" pos:end="8:66">= <expr pos:start="8:48" pos:end="8:66"><name pos:start="8:48" pos:end="8:62">APERATURE_WIDTH</name><operator pos:start="8:63" pos:end="8:63">*</operator><literal type="number" pos:start="8:64" pos:end="8:66">0.8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="9:9" pos:end="9:49"><decl pos:start="9:9" pos:end="9:48"><type pos:start="9:9" pos:end="9:27"><specifier pos:start="9:9" pos:end="9:13">final</specifier> <specifier pos:start="9:15" pos:end="9:20">static</specifier> <name pos:start="9:22" pos:end="9:27">double</name></type> <name pos:start="9:29" pos:end="9:42">OVERLAP_FACTOR</name> <init pos:start="9:44" pos:end="9:48">= <expr pos:start="9:46" pos:end="9:48"><literal type="number" pos:start="9:46" pos:end="9:48">0.7</literal></expr></init></decl>;</decl_stmt>
	
	<function pos:start="11:9" pos:end="20:9"><annotation pos:start="11:9" pos:end="11:13">@<name pos:start="11:10" pos:end="11:13">Test</name></annotation>
	<type pos:start="12:9" pos:end="12:19"><specifier pos:start="12:9" pos:end="12:14">public</specifier> <name pos:start="12:16" pos:end="12:19">void</name></type> <name pos:start="12:21" pos:end="12:46">testCalculateRouteCoverage</name><parameter_list pos:start="12:47" pos:end="12:48">()</parameter_list> <block pos:start="12:50" pos:end="20:9">{<block_content>
<comment type="line" pos:start="13:1" pos:end="13:54">//		MapRiver riverMapper = new MapRiver();</comment>
<comment type="line" pos:start="14:1" pos:end="14:84">//		List&lt;RoutePrimitive&gt; routes = riverMapper.generateRoutePrimitives();</comment>
<comment type="line" pos:start="15:1" pos:end="15:173">//		MetricsRunner metricsRunner = new MetricsRunner(routes, riverMapper.getTotalRiverSegment(), riverMapper.getBankList(), APERATURE_WIDTH, APERATURE_HEIGHT, 4);</comment>
<comment type="line" pos:start="16:1" pos:end="16:43">//		metricsRunner.droneSetup();</comment>
<comment type="line" pos:start="17:1" pos:end="17:74">//		MetricsStatistics statistics = metricsRunner.runMetrics();</comment>
<comment type="line" pos:start="18:1" pos:end="18:71">//		System.out.println(statistics.getAllocationCoverage());</comment>
<comment type="line" pos:start="19:1" pos:end="19:70">//		assertTrue(statistics.getAllocationCoverage() &gt; 0.98);</comment>
	</block_content>}</block></function>

}</block></class>
</unit>
