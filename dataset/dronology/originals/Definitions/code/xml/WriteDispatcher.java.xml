<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/WriteDispatcher.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:53">package <name pos:start="1:9" pos:end="1:52"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:33">gstation</name><operator pos:start="1:34" pos:end="1:34">.</operator><name pos:start="1:35" pos:end="1:43">connector</name><operator pos:start="1:44" pos:end="1:44">.</operator><name pos:start="1:45" pos:end="1:52">dispatch</name></name>;</package>

<import pos:start="3:1" pos:end="3:27">import <name pos:start="3:8" pos:end="3:26"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:14">io</name><operator pos:start="3:15" pos:end="3:15">.</operator><name pos:start="3:16" pos:end="3:26">IOException</name></name>;</import>
<import pos:start="4:1" pos:end="4:28">import <name pos:start="4:8" pos:end="4:27"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:14">io</name><operator pos:start="4:15" pos:end="4:15">.</operator><name pos:start="4:16" pos:end="4:27">OutputStream</name></name>;</import>
<import pos:start="5:1" pos:end="5:23">import <name pos:start="5:8" pos:end="5:22"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:15">net</name><operator pos:start="5:16" pos:end="5:16">.</operator><name pos:start="5:17" pos:end="5:22">Socket</name></name>;</import>
<import pos:start="6:1" pos:end="6:42">import <name pos:start="6:8" pos:end="6:41"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:16">util</name><operator pos:start="6:17" pos:end="6:17">.</operator><name pos:start="6:18" pos:end="6:27">concurrent</name><operator pos:start="6:28" pos:end="6:28">.</operator><name pos:start="6:29" pos:end="6:41">BlockingQueue</name></name>;</import>
<import pos:start="7:1" pos:end="7:49">import <name pos:start="7:8" pos:end="7:48"><name pos:start="7:8" pos:end="7:11">java</name><operator pos:start="7:12" pos:end="7:12">.</operator><name pos:start="7:13" pos:end="7:16">util</name><operator pos:start="7:17" pos:end="7:17">.</operator><name pos:start="7:18" pos:end="7:27">concurrent</name><operator pos:start="7:28" pos:end="7:28">.</operator><name pos:start="7:29" pos:end="7:34">atomic</name><operator pos:start="7:35" pos:end="7:35">.</operator><name pos:start="7:36" pos:end="7:48">AtomicBoolean</name></name>;</import>

<import pos:start="9:1" pos:end="9:60">import <name pos:start="9:8" pos:end="9:59"><name pos:start="9:8" pos:end="9:10">edu</name><operator pos:start="9:11" pos:end="9:11">.</operator><name pos:start="9:12" pos:end="9:13">nd</name><operator pos:start="9:14" pos:end="9:14">.</operator><name pos:start="9:15" pos:end="9:23">dronology</name><operator pos:start="9:24" pos:end="9:24">.</operator><name pos:start="9:25" pos:end="9:28">core</name><operator pos:start="9:29" pos:end="9:29">.</operator><name pos:start="9:30" pos:end="9:36">vehicle</name><operator pos:start="9:37" pos:end="9:37">.</operator><name pos:start="9:38" pos:end="9:45">commands</name><operator pos:start="9:46" pos:end="9:46">.</operator><name pos:start="9:47" pos:end="9:59">IDroneCommand</name></name>;</import>
<import pos:start="10:1" pos:end="10:30">import <name pos:start="10:8" pos:end="10:29"><name pos:start="10:8" pos:end="10:10">net</name><operator pos:start="10:11" pos:end="10:11">.</operator><name pos:start="10:12" pos:end="10:13">mv</name><operator pos:start="10:14" pos:end="10:14">.</operator><name pos:start="10:15" pos:end="10:21">logging</name><operator pos:start="10:22" pos:end="10:22">.</operator><name pos:start="10:23" pos:end="10:29">ILogger</name></name>;</import>
<import pos:start="11:1" pos:end="11:37">import <name pos:start="11:8" pos:end="11:36"><name pos:start="11:8" pos:end="11:10">net</name><operator pos:start="11:11" pos:end="11:11">.</operator><name pos:start="11:12" pos:end="11:13">mv</name><operator pos:start="11:14" pos:end="11:14">.</operator><name pos:start="11:15" pos:end="11:21">logging</name><operator pos:start="11:22" pos:end="11:22">.</operator><name pos:start="11:23" pos:end="11:36">LoggerProvider</name></name>;</import>

<comment type="block" format="javadoc" pos:start="13:1" pos:end="19:3">/**
 * Writer Thread takes items from the outbound queue and writes it to the
 * socket.
 * 
 * @author Michael Vierhauser
 *
 */</comment>
<class pos:start="20:1" pos:end="104:1"><specifier pos:start="20:1" pos:end="20:6">public</specifier> class <name pos:start="20:14" pos:end="20:28">WriteDispatcher</name> <super_list pos:start="20:30" pos:end="20:48"><implements pos:start="20:30" pos:end="20:48">implements <super pos:start="20:41" pos:end="20:48"><name pos:start="20:41" pos:end="20:48">Runnable</name></super></implements></super_list> <block pos:start="20:50" pos:end="104:1">{

	<decl_stmt pos:start="22:9" pos:end="22:42"><decl pos:start="22:9" pos:end="22:41"><type pos:start="22:9" pos:end="22:28"><specifier pos:start="22:9" pos:end="22:15">private</specifier> <name pos:start="22:17" pos:end="22:28">OutputStream</name></type> <name pos:start="22:30" pos:end="22:41">outputStream</name></decl>;</decl_stmt>
	<decl_stmt pos:start="23:9" pos:end="23:61"><decl pos:start="23:9" pos:end="23:60"><type pos:start="23:9" pos:end="23:29"><specifier pos:start="23:9" pos:end="23:15">private</specifier> <name pos:start="23:17" pos:end="23:29">AtomicBoolean</name></type> <name pos:start="23:31" pos:end="23:34">cont</name> <init pos:start="23:36" pos:end="23:60">= <expr pos:start="23:38" pos:end="23:60"><operator pos:start="23:38" pos:end="23:40">new</operator> <call pos:start="23:42" pos:end="23:60"><name pos:start="23:42" pos:end="23:54">AtomicBoolean</name><argument_list pos:start="23:55" pos:end="23:60">(<argument pos:start="23:56" pos:end="23:59"><expr pos:start="23:56" pos:end="23:59"><literal type="boolean" pos:start="23:56" pos:end="23:59">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="24:9" pos:end="24:57"><decl pos:start="24:9" pos:end="24:56"><type pos:start="24:9" pos:end="24:44"><specifier pos:start="24:9" pos:end="24:15">private</specifier> <name pos:start="24:17" pos:end="24:44"><name pos:start="24:17" pos:end="24:29">BlockingQueue</name><argument_list type="generic" pos:start="24:30" pos:end="24:44">&lt;<argument pos:start="24:31" pos:end="24:43"><name pos:start="24:31" pos:end="24:43">IDroneCommand</name></argument>&gt;</argument_list></name></type> <name pos:start="24:46" pos:end="24:56">outputQueue</name></decl>;</decl_stmt>
	<decl_stmt pos:start="25:9" pos:end="25:94"><decl pos:start="25:9" pos:end="25:93"><type pos:start="25:9" pos:end="25:36"><specifier pos:start="25:9" pos:end="25:15">private</specifier> <specifier pos:start="25:17" pos:end="25:22">static</specifier> <specifier pos:start="25:24" pos:end="25:28">final</specifier> <name pos:start="25:30" pos:end="25:36">ILogger</name></type> <name pos:start="25:38" pos:end="25:43">LOGGER</name> <init pos:start="25:45" pos:end="25:93">= <expr pos:start="25:47" pos:end="25:93"><call pos:start="25:47" pos:end="25:93"><name pos:start="25:47" pos:end="25:70"><name pos:start="25:47" pos:end="25:60">LoggerProvider</name><operator pos:start="25:61" pos:end="25:61">.</operator><name pos:start="25:62" pos:end="25:70">getLogger</name></name><argument_list pos:start="25:71" pos:end="25:93">(<argument pos:start="25:72" pos:end="25:92"><expr pos:start="25:72" pos:end="25:92"><name pos:start="25:72" pos:end="25:92"><name pos:start="25:72" pos:end="25:86">WriteDispatcher</name><operator pos:start="25:87" pos:end="25:87">.</operator><name pos:start="25:88" pos:end="25:92">class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<constructor pos:start="27:9" pos:end="35:9"><specifier pos:start="27:9" pos:end="27:14">public</specifier> <name pos:start="27:16" pos:end="27:30">WriteDispatcher</name><parameter_list pos:start="27:31" pos:end="27:93">(<parameter pos:start="27:32" pos:end="27:50"><decl pos:start="27:32" pos:end="27:50"><type pos:start="27:32" pos:end="27:50"><name pos:start="27:32" pos:end="27:37">Socket</name></type> <name pos:start="27:39" pos:end="27:50">pythonSocket</name></decl></parameter>, <parameter pos:start="27:53" pos:end="27:92"><decl pos:start="27:53" pos:end="27:92"><type pos:start="27:53" pos:end="27:92"><name pos:start="27:53" pos:end="27:80"><name pos:start="27:53" pos:end="27:65">BlockingQueue</name><argument_list type="generic" pos:start="27:66" pos:end="27:80">&lt;<argument pos:start="27:67" pos:end="27:79"><name pos:start="27:67" pos:end="27:79">IDroneCommand</name></argument>&gt;</argument_list></name></type> <name pos:start="27:82" pos:end="27:92">outputQueue</name></decl></parameter>)</parameter_list> <block pos:start="27:95" pos:end="35:9">{<block_content pos:start="28:17" pos:end="34:17">
		<try pos:start="28:17" pos:end="34:17">try <block pos:start="28:21" pos:end="32:17">{<block_content pos:start="29:25" pos:end="31:39">
			<expr_stmt pos:start="29:25" pos:end="29:70"><expr pos:start="29:25" pos:end="29:69"><name pos:start="29:25" pos:end="29:36">outputStream</name> <operator pos:start="29:38" pos:end="29:38">=</operator> <call pos:start="29:40" pos:end="29:69"><name pos:start="29:40" pos:end="29:67"><name pos:start="29:40" pos:end="29:51">pythonSocket</name><operator pos:start="29:52" pos:end="29:52">.</operator><name pos:start="29:53" pos:end="29:67">getOutputStream</name></name><argument_list pos:start="29:68" pos:end="29:69">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="30:25" pos:end="30:55"><expr pos:start="30:25" pos:end="30:54"><name pos:start="30:25" pos:end="30:40"><name pos:start="30:25" pos:end="30:28">this</name><operator pos:start="30:29" pos:end="30:29">.</operator><name pos:start="30:30" pos:end="30:40">outputQueue</name></name> <operator pos:start="30:42" pos:end="30:42">=</operator> <name pos:start="30:44" pos:end="30:54">outputQueue</name></expr>;</expr_stmt>
			<expr_stmt pos:start="31:25" pos:end="31:39"><expr pos:start="31:25" pos:end="31:38"><call pos:start="31:25" pos:end="31:38"><name pos:start="31:25" pos:end="31:32"><name pos:start="31:25" pos:end="31:28">cont</name><operator pos:start="31:29" pos:end="31:29">.</operator><name pos:start="31:30" pos:end="31:32">set</name></name><argument_list pos:start="31:33" pos:end="31:38">(<argument pos:start="31:34" pos:end="31:37"><expr pos:start="31:34" pos:end="31:37"><literal type="boolean" pos:start="31:34" pos:end="31:37">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch pos:start="32:19" pos:end="34:17">catch <parameter_list pos:start="32:25" pos:end="32:39">(<parameter pos:start="32:26" pos:end="32:38"><decl pos:start="32:26" pos:end="32:38"><type pos:start="32:26" pos:end="32:38"><name pos:start="32:26" pos:end="32:36">IOException</name></type> <name pos:start="32:38" pos:end="32:38">e</name></decl></parameter>)</parameter_list> <block pos:start="32:41" pos:end="34:17">{<block_content pos:start="33:25" pos:end="33:40">
			<expr_stmt pos:start="33:25" pos:end="33:40"><expr pos:start="33:25" pos:end="33:39"><call pos:start="33:25" pos:end="33:39"><name pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:30">LOGGER</name><operator pos:start="33:31" pos:end="33:31">.</operator><name pos:start="33:32" pos:end="33:36">error</name></name><argument_list pos:start="33:37" pos:end="33:39">(<argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><name pos:start="33:38" pos:end="33:38">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
	</block_content>}</block></constructor>

	<function pos:start="37:9" pos:end="66:9"><annotation pos:start="37:9" pos:end="37:17">@<name pos:start="37:10" pos:end="37:17">Override</name></annotation>
	<type pos:start="38:9" pos:end="38:19"><specifier pos:start="38:9" pos:end="38:14">public</specifier> <name pos:start="38:16" pos:end="38:19">void</name></type> <name pos:start="38:21" pos:end="38:23">run</name><parameter_list pos:start="38:24" pos:end="38:25">()</parameter_list> <block pos:start="38:27" pos:end="66:9">{<block_content pos:start="39:17" pos:end="65:17">
		<expr_stmt pos:start="39:17" pos:end="39:56"><expr pos:start="39:17" pos:end="39:55"><call pos:start="39:17" pos:end="39:55"><name pos:start="39:17" pos:end="39:27"><name pos:start="39:17" pos:end="39:22">LOGGER</name><operator pos:start="39:23" pos:end="39:23">.</operator><name pos:start="39:24" pos:end="39:27">info</name></name><argument_list pos:start="39:28" pos:end="39:55">(<argument pos:start="39:29" pos:end="39:54"><expr pos:start="39:29" pos:end="39:54"><literal type="string" pos:start="39:29" pos:end="39:54">"Write-Dispatcher started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:start="40:17" pos:end="65:17">try <block pos:start="40:21" pos:end="63:17">{<block_content pos:start="41:25" pos:end="62:25">
			<while pos:start="41:25" pos:end="56:25">while <condition pos:start="41:31" pos:end="41:42">(<expr pos:start="41:32" pos:end="41:41"><call pos:start="41:32" pos:end="41:41"><name pos:start="41:32" pos:end="41:39"><name pos:start="41:32" pos:end="41:35">cont</name><operator pos:start="41:36" pos:end="41:36">.</operator><name pos:start="41:37" pos:end="41:39">get</name></name><argument_list pos:start="41:40" pos:end="41:41">()</argument_list></call></expr>)</condition> <block pos:start="41:44" pos:end="56:25">{<block_content pos:start="42:33" pos:end="55:33">
				<try pos:start="42:33" pos:end="55:33">try <block pos:start="42:37" pos:end="52:33">{<block_content pos:start="43:41" pos:end="51:61">
					<decl_stmt pos:start="43:41" pos:end="43:82"><decl pos:start="43:41" pos:end="43:81"><type pos:start="43:41" pos:end="43:53"><name pos:start="43:41" pos:end="43:53">IDroneCommand</name></type> <name pos:start="43:55" pos:end="43:60">toSend</name> <init pos:start="43:62" pos:end="43:81">= <expr pos:start="43:64" pos:end="43:81"><call pos:start="43:64" pos:end="43:81"><name pos:start="43:64" pos:end="43:79"><name pos:start="43:64" pos:end="43:74">outputQueue</name><operator pos:start="43:75" pos:end="43:75">.</operator><name pos:start="43:76" pos:end="43:79">take</name></name><argument_list pos:start="43:80" pos:end="43:81">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt pos:start="44:41" pos:end="46:41"><if pos:start="44:41" pos:end="46:41">if <condition pos:start="44:44" pos:end="44:75">(<expr pos:start="44:45" pos:end="44:74"><name pos:start="44:45" pos:end="44:50">toSend</name> <operator pos:start="44:52" pos:end="44:61">instanceof</operator> <name pos:start="44:63" pos:end="44:74">MarkerObject</name></expr>)</condition> <block pos:start="44:77" pos:end="46:41">{<block_content pos:start="45:49" pos:end="45:57">
						<continue pos:start="45:49" pos:end="45:57">continue;</continue>
					</block_content>}</block></if></if_stmt>
					<expr_stmt pos:start="47:41" pos:end="47:102"><expr pos:start="47:41" pos:end="47:101"><call pos:start="47:41" pos:end="47:101"><name pos:start="47:41" pos:end="47:53"><name pos:start="47:41" pos:end="47:46">LOGGER</name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:53">hwInfo</name></name><argument_list pos:start="47:54" pos:end="47:101">(<argument pos:start="47:55" pos:end="47:100"><expr pos:start="47:55" pos:end="47:100"><literal type="string" pos:start="47:55" pos:end="47:80">"Sending Command to UAV -"</literal> <operator pos:start="47:82" pos:end="47:82">+</operator> <call pos:start="47:84" pos:end="47:100"><name pos:start="47:84" pos:end="47:98"><name pos:start="47:84" pos:end="47:89">toSend</name><operator pos:start="47:90" pos:end="47:90">.</operator><name pos:start="47:91" pos:end="47:98">toString</name></name><argument_list pos:start="47:99" pos:end="47:100">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt pos:start="48:41" pos:end="48:59"><expr pos:start="48:41" pos:end="48:58"><call pos:start="48:41" pos:end="48:58"><name pos:start="48:41" pos:end="48:56"><name pos:start="48:41" pos:end="48:46">toSend</name><operator pos:start="48:47" pos:end="48:47">.</operator><name pos:start="48:48" pos:end="48:56">timestamp</name></name><argument_list pos:start="48:57" pos:end="48:58">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt pos:start="49:41" pos:end="49:93"><expr pos:start="49:41" pos:end="49:92"><call pos:start="49:41" pos:end="49:92"><name pos:start="49:41" pos:end="49:58"><name pos:start="49:41" pos:end="49:52">outputStream</name><operator pos:start="49:53" pos:end="49:53">.</operator><name pos:start="49:54" pos:end="49:58">write</name></name><argument_list pos:start="49:59" pos:end="49:92">(<argument pos:start="49:60" pos:end="49:91"><expr pos:start="49:60" pos:end="49:91"><call pos:start="49:60" pos:end="49:80"><name pos:start="49:60" pos:end="49:78"><name pos:start="49:60" pos:end="49:65">toSend</name><operator pos:start="49:66" pos:end="49:66">.</operator><name pos:start="49:67" pos:end="49:78">toJsonString</name></name><argument_list pos:start="49:79" pos:end="49:80">()</argument_list></call><operator pos:start="49:81" pos:end="49:81">.</operator><call pos:start="49:82" pos:end="49:91"><name pos:start="49:82" pos:end="49:89">getBytes</name><argument_list pos:start="49:90" pos:end="49:91">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt pos:start="50:41" pos:end="50:108"><expr pos:start="50:41" pos:end="50:107"><call pos:start="50:41" pos:end="50:107"><name pos:start="50:41" pos:end="50:58"><name pos:start="50:41" pos:end="50:52">outputStream</name><operator pos:start="50:53" pos:end="50:53">.</operator><name pos:start="50:54" pos:end="50:58">write</name></name><argument_list pos:start="50:59" pos:end="50:107">(<argument pos:start="50:60" pos:end="50:106"><expr pos:start="50:60" pos:end="50:106"><call pos:start="50:60" pos:end="50:95"><name pos:start="50:60" pos:end="50:77"><name pos:start="50:60" pos:end="50:65">System</name><operator pos:start="50:66" pos:end="50:66">.</operator><name pos:start="50:67" pos:end="50:77">getProperty</name></name><argument_list pos:start="50:78" pos:end="50:95">(<argument pos:start="50:79" pos:end="50:94"><expr pos:start="50:79" pos:end="50:94"><literal type="string" pos:start="50:79" pos:end="50:94">"line.separator"</literal></expr></argument>)</argument_list></call><operator pos:start="50:96" pos:end="50:96">.</operator><call pos:start="50:97" pos:end="50:106"><name pos:start="50:97" pos:end="50:104">getBytes</name><argument_list pos:start="50:105" pos:end="50:106">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt pos:start="51:41" pos:end="51:61"><expr pos:start="51:41" pos:end="51:60"><call pos:start="51:41" pos:end="51:60"><name pos:start="51:41" pos:end="51:58"><name pos:start="51:41" pos:end="51:52">outputStream</name><operator pos:start="51:53" pos:end="51:53">.</operator><name pos:start="51:54" pos:end="51:58">flush</name></name><argument_list pos:start="51:59" pos:end="51:60">()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block> <catch pos:start="52:35" pos:end="55:33">catch <parameter_list pos:start="52:41" pos:end="52:53">(<parameter pos:start="52:42" pos:end="52:52"><decl pos:start="52:42" pos:end="52:52"><type pos:start="52:42" pos:end="52:52"><name pos:start="52:42" pos:end="52:50">Exception</name></type> <name pos:start="52:52" pos:end="52:52">e</name></decl></parameter>)</parameter_list> <block pos:start="52:55" pos:end="55:33">{<block_content pos:start="53:41" pos:end="53:56">
					<expr_stmt pos:start="53:41" pos:end="53:56"><expr pos:start="53:41" pos:end="53:55"><call pos:start="53:41" pos:end="53:55"><name pos:start="53:41" pos:end="53:52"><name pos:start="53:41" pos:end="53:46">LOGGER</name><operator pos:start="53:47" pos:end="53:47">.</operator><name pos:start="53:48" pos:end="53:52">error</name></name><argument_list pos:start="53:53" pos:end="53:55">(<argument pos:start="53:54" pos:end="53:54"><expr pos:start="53:54" pos:end="53:54"><name pos:start="53:54" pos:end="53:54">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

				</block_content>}</block></catch></try>
			</block_content>}</block></while>
			<expr_stmt pos:start="57:25" pos:end="57:62"><expr pos:start="57:25" pos:end="57:61"><call pos:start="57:25" pos:end="57:61"><name pos:start="57:25" pos:end="57:35"><name pos:start="57:25" pos:end="57:30">LOGGER</name><operator pos:start="57:31" pos:end="57:31">.</operator><name pos:start="57:32" pos:end="57:35">info</name></name><argument_list pos:start="57:36" pos:end="57:61">(<argument pos:start="57:37" pos:end="57:60"><expr pos:start="57:37" pos:end="57:60"><literal type="string" pos:start="57:37" pos:end="57:60">"Writer Thread shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<try pos:start="58:25" pos:end="62:25">try <block pos:start="58:29" pos:end="60:25">{<block_content pos:start="59:33" pos:end="59:53">
				<expr_stmt pos:start="59:33" pos:end="59:53"><expr pos:start="59:33" pos:end="59:52"><call pos:start="59:33" pos:end="59:52"><name pos:start="59:33" pos:end="59:50"><name pos:start="59:33" pos:end="59:44">outputStream</name><operator pos:start="59:45" pos:end="59:45">.</operator><name pos:start="59:46" pos:end="59:50">close</name></name><argument_list pos:start="59:51" pos:end="59:52">()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch pos:start="60:27" pos:end="62:25">catch <parameter_list pos:start="60:33" pos:end="60:47">(<parameter pos:start="60:34" pos:end="60:46"><decl pos:start="60:34" pos:end="60:46"><type pos:start="60:34" pos:end="60:46"><name pos:start="60:34" pos:end="60:44">IOException</name></type> <name pos:start="60:46" pos:end="60:46">e</name></decl></parameter>)</parameter_list> <block pos:start="60:49" pos:end="62:25">{<block_content pos:start="61:33" pos:end="61:48">
				<expr_stmt pos:start="61:33" pos:end="61:48"><expr pos:start="61:33" pos:end="61:47"><call pos:start="61:33" pos:end="61:47"><name pos:start="61:33" pos:end="61:44"><name pos:start="61:33" pos:end="61:38">LOGGER</name><operator pos:start="61:39" pos:end="61:39">.</operator><name pos:start="61:40" pos:end="61:44">error</name></name><argument_list pos:start="61:45" pos:end="61:47">(<argument pos:start="61:46" pos:end="61:46"><expr pos:start="61:46" pos:end="61:46"><name pos:start="61:46" pos:end="61:46">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>
		</block_content>}</block> <catch pos:start="63:19" pos:end="65:17">catch <parameter_list pos:start="63:25" pos:end="63:37">(<parameter pos:start="63:26" pos:end="63:36"><decl pos:start="63:26" pos:end="63:36"><type pos:start="63:26" pos:end="63:36"><name pos:start="63:26" pos:end="63:34">Throwable</name></type> <name pos:start="63:36" pos:end="63:36">t</name></decl></parameter>)</parameter_list> <block pos:start="63:39" pos:end="65:17">{<block_content pos:start="64:25" pos:end="64:44">
			<expr_stmt pos:start="64:25" pos:end="64:44"><expr pos:start="64:25" pos:end="64:43"><call pos:start="64:25" pos:end="64:43"><name pos:start="64:25" pos:end="64:41"><name pos:start="64:25" pos:end="64:25">t</name><operator pos:start="64:26" pos:end="64:26">.</operator><name pos:start="64:27" pos:end="64:41">printStackTrace</name></name><argument_list pos:start="64:42" pos:end="64:43">()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>

	<function pos:start="68:9" pos:end="75:9"><type pos:start="68:9" pos:end="68:19"><specifier pos:start="68:9" pos:end="68:14">public</specifier> <name pos:start="68:16" pos:end="68:19">void</name></type> <name pos:start="68:21" pos:end="68:28">tearDown</name><parameter_list pos:start="68:29" pos:end="68:30">()</parameter_list> <block pos:start="68:32" pos:end="75:9">{<block_content pos:start="69:17" pos:end="74:17">
		<expr_stmt pos:start="69:17" pos:end="69:32"><expr pos:start="69:17" pos:end="69:31"><call pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:24"><name pos:start="69:17" pos:end="69:20">cont</name><operator pos:start="69:21" pos:end="69:21">.</operator><name pos:start="69:22" pos:end="69:24">set</name></name><argument_list pos:start="69:25" pos:end="69:31">(<argument pos:start="69:26" pos:end="69:30"><expr pos:start="69:26" pos:end="69:30"><literal type="boolean" pos:start="69:26" pos:end="69:30">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try pos:start="70:17" pos:end="74:17">try <block pos:start="70:21" pos:end="72:17">{<block_content pos:start="71:25" pos:end="71:60">
			<expr_stmt pos:start="71:25" pos:end="71:60"><expr pos:start="71:25" pos:end="71:59"><call pos:start="71:25" pos:end="71:59"><name pos:start="71:25" pos:end="71:39"><name pos:start="71:25" pos:end="71:35">outputQueue</name><operator pos:start="71:36" pos:end="71:36">.</operator><name pos:start="71:37" pos:end="71:39">put</name></name><argument_list pos:start="71:40" pos:end="71:59">(<argument pos:start="71:41" pos:end="71:58"><expr pos:start="71:41" pos:end="71:58"><operator pos:start="71:41" pos:end="71:43">new</operator> <call pos:start="71:45" pos:end="71:58"><name pos:start="71:45" pos:end="71:56">MarkerObject</name><argument_list pos:start="71:57" pos:end="71:58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch pos:start="72:19" pos:end="74:17">catch <parameter_list pos:start="72:25" pos:end="72:48">(<parameter pos:start="72:26" pos:end="72:47"><decl pos:start="72:26" pos:end="72:47"><type pos:start="72:26" pos:end="72:47"><name pos:start="72:26" pos:end="72:45">InterruptedException</name></type> <name pos:start="72:47" pos:end="72:47">e</name></decl></parameter>)</parameter_list> <block pos:start="72:50" pos:end="74:17">{<block_content pos:start="73:25" pos:end="73:40">
			<expr_stmt pos:start="73:25" pos:end="73:40"><expr pos:start="73:25" pos:end="73:39"><call pos:start="73:25" pos:end="73:39"><name pos:start="73:25" pos:end="73:36"><name pos:start="73:25" pos:end="73:30">LOGGER</name><operator pos:start="73:31" pos:end="73:31">.</operator><name pos:start="73:32" pos:end="73:36">error</name></name><argument_list pos:start="73:37" pos:end="73:39">(<argument pos:start="73:38" pos:end="73:38"><expr pos:start="73:38" pos:end="73:38"><name pos:start="73:38" pos:end="73:38">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>

	<class pos:start="77:9" pos:end="102:9"><specifier pos:start="77:9" pos:end="77:14">public</specifier> class <name pos:start="77:22" pos:end="77:33">MarkerObject</name> <super_list pos:start="77:35" pos:end="77:58"><implements pos:start="77:35" pos:end="77:58">implements <super pos:start="77:46" pos:end="77:58"><name pos:start="77:46" pos:end="77:58">IDroneCommand</name></super></implements></super_list> <block pos:start="77:60" pos:end="102:9">{

		<comment type="block" format="javadoc" pos:start="79:17" pos:end="81:19">/**
		 * 
		 */</comment>
		<decl_stmt pos:start="82:17" pos:end="82:82"><decl pos:start="82:17" pos:end="82:81"><type pos:start="82:17" pos:end="82:41"><specifier pos:start="82:17" pos:end="82:23">private</specifier> <specifier pos:start="82:25" pos:end="82:30">static</specifier> <specifier pos:start="82:32" pos:end="82:36">final</specifier> <name pos:start="82:38" pos:end="82:41">long</name></type> <name pos:start="82:43" pos:end="82:58">serialVersionUID</name> <init pos:start="82:60" pos:end="82:81">= <expr pos:start="82:62" pos:end="82:81"><literal type="number" pos:start="82:62" pos:end="82:81">7890483609236721982L</literal></expr></init></decl>;</decl_stmt>

		<function pos:start="84:17" pos:end="88:17"><annotation pos:start="84:17" pos:end="84:25">@<name pos:start="84:18" pos:end="84:25">Override</name></annotation>
		<type pos:start="85:17" pos:end="85:29"><specifier pos:start="85:17" pos:end="85:22">public</specifier> <name pos:start="85:24" pos:end="85:29">String</name></type> <name pos:start="85:31" pos:end="85:42">toJsonString</name><parameter_list pos:start="85:43" pos:end="85:44">()</parameter_list> <block pos:start="85:46" pos:end="88:17">{<block_content pos:start="87:25" pos:end="87:36">
			<comment type="line" pos:start="86:25" pos:end="86:58">// TODO Auto-generated method stub</comment>
			<return pos:start="87:25" pos:end="87:36">return <expr pos:start="87:32" pos:end="87:35"><literal type="null" pos:start="87:32" pos:end="87:35">null</literal></expr>;</return>
		</block_content>}</block></function>

		<function pos:start="90:17" pos:end="94:17"><annotation pos:start="90:17" pos:end="90:25">@<name pos:start="90:18" pos:end="90:25">Override</name></annotation>
		<type pos:start="91:17" pos:end="91:27"><specifier pos:start="91:17" pos:end="91:22">public</specifier> <name pos:start="91:24" pos:end="91:27">void</name></type> <name pos:start="91:29" pos:end="91:37">timestamp</name><parameter_list pos:start="91:38" pos:end="91:39">()</parameter_list> <block pos:start="91:41" pos:end="94:17">{<block_content>
			<comment type="line" pos:start="92:25" pos:end="92:58">// TODO Auto-generated method stub</comment>

		</block_content>}</block></function>

		<function pos:start="96:17" pos:end="100:17"><annotation pos:start="96:17" pos:end="96:25">@<name pos:start="96:18" pos:end="96:25">Override</name></annotation>
		<type pos:start="97:17" pos:end="97:29"><specifier pos:start="97:17" pos:end="97:22">public</specifier> <name pos:start="97:24" pos:end="97:29">String</name></type> <name pos:start="97:31" pos:end="97:38">getUAVId</name><parameter_list pos:start="97:39" pos:end="97:40">()</parameter_list> <block pos:start="97:42" pos:end="100:17">{<block_content pos:start="99:25" pos:end="99:36">
			<comment type="line" pos:start="98:25" pos:end="98:58">// TODO Auto-generated method stub</comment>
			<return pos:start="99:25" pos:end="99:36">return <expr pos:start="99:32" pos:end="99:35"><literal type="null" pos:start="99:32" pos:end="99:35">null</literal></expr>;</return>
		</block_content>}</block></function>

	}</block></class>

}</block></class>
</unit>
