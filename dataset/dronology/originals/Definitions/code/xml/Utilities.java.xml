<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/Utilities.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:62">package <name pos:start="1:9" pos:end="1:61"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:33">services</name><operator pos:start="1:34" pos:end="1:34">.</operator><name pos:start="1:35" pos:end="1:44">extensions</name><operator pos:start="1:45" pos:end="1:45">.</operator><name pos:start="1:46" pos:end="1:56">areamapping</name><operator pos:start="1:57" pos:end="1:57">.</operator><name pos:start="1:58" pos:end="1:61">util</name></name>;</package>

<import pos:start="3:1" pos:end="3:28">import <name pos:start="3:8" pos:end="3:27"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:15">awt</name><operator pos:start="3:16" pos:end="3:16">.</operator><name pos:start="3:17" pos:end="3:20">geom</name><operator pos:start="3:21" pos:end="3:21">.</operator><name pos:start="3:22" pos:end="3:27">Line2D</name></name>;</import>
<import pos:start="4:1" pos:end="4:28">import <name pos:start="4:8" pos:end="4:27"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:15">awt</name><operator pos:start="4:16" pos:end="4:16">.</operator><name pos:start="4:17" pos:end="4:20">geom</name><operator pos:start="4:21" pos:end="4:21">.</operator><name pos:start="4:22" pos:end="4:27">Path2D</name></name>;</import>
<import pos:start="5:1" pos:end="5:29">import <name pos:start="5:8" pos:end="5:28"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:15">awt</name><operator pos:start="5:16" pos:end="5:16">.</operator><name pos:start="5:17" pos:end="5:20">geom</name><operator pos:start="5:21" pos:end="5:21">.</operator><name pos:start="5:22" pos:end="5:28">Point2D</name></name>;</import>
<import pos:start="6:1" pos:end="6:27">import <name pos:start="6:8" pos:end="6:26"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:16">util</name><operator pos:start="6:17" pos:end="6:17">.</operator><name pos:start="6:18" pos:end="6:26">ArrayList</name></name>;</import>
<import pos:start="7:1" pos:end="7:25">import <name pos:start="7:8" pos:end="7:24"><name pos:start="7:8" pos:end="7:11">java</name><operator pos:start="7:12" pos:end="7:12">.</operator><name pos:start="7:13" pos:end="7:16">util</name><operator pos:start="7:17" pos:end="7:17">.</operator><name pos:start="7:18" pos:end="7:24">HashMap</name></name>;</import>
<import pos:start="8:1" pos:end="8:22">import <name pos:start="8:8" pos:end="8:21"><name pos:start="8:8" pos:end="8:11">java</name><operator pos:start="8:12" pos:end="8:12">.</operator><name pos:start="8:13" pos:end="8:16">util</name><operator pos:start="8:17" pos:end="8:17">.</operator><name pos:start="8:18" pos:end="8:21">List</name></name>;</import>
<import pos:start="9:1" pos:end="9:24">import <name pos:start="9:8" pos:end="9:23"><name pos:start="9:8" pos:end="9:11">java</name><operator pos:start="9:12" pos:end="9:12">.</operator><name pos:start="9:13" pos:end="9:16">util</name><operator pos:start="9:17" pos:end="9:17">.</operator><name pos:start="9:18" pos:end="9:23">Vector</name></name>;</import>

<import pos:start="11:1" pos:end="11:54">import <name pos:start="11:8" pos:end="11:53"><name pos:start="11:8" pos:end="11:10">edu</name><operator pos:start="11:11" pos:end="11:11">.</operator><name pos:start="11:12" pos:end="11:13">nd</name><operator pos:start="11:14" pos:end="11:14">.</operator><name pos:start="11:15" pos:end="11:23">dronology</name><operator pos:start="11:24" pos:end="11:24">.</operator><name pos:start="11:25" pos:end="11:28">core</name><operator pos:start="11:29" pos:end="11:29">.</operator><name pos:start="11:30" pos:end="11:39">coordinate</name><operator pos:start="11:40" pos:end="11:40">.</operator><name pos:start="11:41" pos:end="11:53">LlaCoordinate</name></name>;</import>
<import pos:start="12:1" pos:end="12:43">import <name pos:start="12:8" pos:end="12:42"><name pos:start="12:8" pos:end="12:10">edu</name><operator pos:start="12:11" pos:end="12:11">.</operator><name pos:start="12:12" pos:end="12:13">nd</name><operator pos:start="12:14" pos:end="12:14">.</operator><name pos:start="12:15" pos:end="12:23">dronology</name><operator pos:start="12:24" pos:end="12:24">.</operator><name pos:start="12:25" pos:end="12:28">core</name><operator pos:start="12:29" pos:end="12:29">.</operator><name pos:start="12:30" pos:end="12:33">util</name><operator pos:start="12:34" pos:end="12:34">.</operator><name pos:start="12:35" pos:end="12:42">Waypoint</name></name>;</import>
<import pos:start="13:1" pos:end="13:58">import <name pos:start="13:8" pos:end="13:57"><name pos:start="13:8" pos:end="13:10">edu</name><operator pos:start="13:11" pos:end="13:11">.</operator><name pos:start="13:12" pos:end="13:13">nd</name><operator pos:start="13:14" pos:end="13:14">.</operator><name pos:start="13:15" pos:end="13:23">dronology</name><operator pos:start="13:24" pos:end="13:24">.</operator><name pos:start="13:25" pos:end="13:32">services</name><operator pos:start="13:33" pos:end="13:33">.</operator><name pos:start="13:34" pos:end="13:37">core</name><operator pos:start="13:38" pos:end="13:38">.</operator><name pos:start="13:39" pos:end="13:49">areamapping</name><operator pos:start="13:50" pos:end="13:50">.</operator><name pos:start="13:51" pos:end="13:57">EdgeLla</name></name>;</import>
<import pos:start="14:1" pos:end="14:56">import <name pos:start="14:8" pos:end="14:55"><name pos:start="14:8" pos:end="14:10">edu</name><operator pos:start="14:11" pos:end="14:11">.</operator><name pos:start="14:12" pos:end="14:13">nd</name><operator pos:start="14:14" pos:end="14:14">.</operator><name pos:start="14:15" pos:end="14:23">dronology</name><operator pos:start="14:24" pos:end="14:24">.</operator><name pos:start="14:25" pos:end="14:32">services</name><operator pos:start="14:33" pos:end="14:33">.</operator><name pos:start="14:34" pos:end="14:37">core</name><operator pos:start="14:38" pos:end="14:38">.</operator><name pos:start="14:39" pos:end="14:43">items</name><operator pos:start="14:44" pos:end="14:44">.</operator><name pos:start="14:45" pos:end="14:55">FlightRoute</name></name>;</import>
<import pos:start="15:1" pos:end="15:57">import <name pos:start="15:8" pos:end="15:56"><name pos:start="15:8" pos:end="15:10">edu</name><operator pos:start="15:11" pos:end="15:11">.</operator><name pos:start="15:12" pos:end="15:13">nd</name><operator pos:start="15:14" pos:end="15:14">.</operator><name pos:start="15:15" pos:end="15:23">dronology</name><operator pos:start="15:24" pos:end="15:24">.</operator><name pos:start="15:25" pos:end="15:32">services</name><operator pos:start="15:33" pos:end="15:33">.</operator><name pos:start="15:34" pos:end="15:37">core</name><operator pos:start="15:38" pos:end="15:38">.</operator><name pos:start="15:39" pos:end="15:43">items</name><operator pos:start="15:44" pos:end="15:44">.</operator><name pos:start="15:45" pos:end="15:56">IFlightRoute</name></name>;</import>
<import pos:start="16:1" pos:end="16:56">import <name pos:start="16:8" pos:end="16:55"><name pos:start="16:8" pos:end="16:10">edu</name><operator pos:start="16:11" pos:end="16:11">.</operator><name pos:start="16:12" pos:end="16:13">nd</name><operator pos:start="16:14" pos:end="16:14">.</operator><name pos:start="16:15" pos:end="16:23">dronology</name><operator pos:start="16:24" pos:end="16:24">.</operator><name pos:start="16:25" pos:end="16:32">services</name><operator pos:start="16:33" pos:end="16:33">.</operator><name pos:start="16:34" pos:end="16:37">core</name><operator pos:start="16:38" pos:end="16:38">.</operator><name pos:start="16:39" pos:end="16:43">items</name><operator pos:start="16:44" pos:end="16:44">.</operator><name pos:start="16:45" pos:end="16:55">IMappedItem</name></name>;</import>
<import pos:start="17:1" pos:end="17:74">import <name pos:start="17:8" pos:end="17:73"><name pos:start="17:8" pos:end="17:10">edu</name><operator pos:start="17:11" pos:end="17:11">.</operator><name pos:start="17:12" pos:end="17:13">nd</name><operator pos:start="17:14" pos:end="17:14">.</operator><name pos:start="17:15" pos:end="17:23">dronology</name><operator pos:start="17:24" pos:end="17:24">.</operator><name pos:start="17:25" pos:end="17:32">services</name><operator pos:start="17:33" pos:end="17:33">.</operator><name pos:start="17:34" pos:end="17:43">extensions</name><operator pos:start="17:44" pos:end="17:44">.</operator><name pos:start="17:45" pos:end="17:55">areamapping</name><operator pos:start="17:56" pos:end="17:56">.</operator><name pos:start="17:57" pos:end="17:64">internal</name><operator pos:start="17:65" pos:end="17:65">.</operator><name pos:start="17:66" pos:end="17:73">Geometry</name></name>;</import>
<import pos:start="18:1" pos:end="18:79">import <name pos:start="18:8" pos:end="18:78"><name pos:start="18:8" pos:end="18:10">edu</name><operator pos:start="18:11" pos:end="18:11">.</operator><name pos:start="18:12" pos:end="18:13">nd</name><operator pos:start="18:14" pos:end="18:14">.</operator><name pos:start="18:15" pos:end="18:23">dronology</name><operator pos:start="18:24" pos:end="18:24">.</operator><name pos:start="18:25" pos:end="18:32">services</name><operator pos:start="18:33" pos:end="18:33">.</operator><name pos:start="18:34" pos:end="18:43">extensions</name><operator pos:start="18:44" pos:end="18:44">.</operator><name pos:start="18:45" pos:end="18:55">areamapping</name><operator pos:start="18:56" pos:end="18:56">.</operator><name pos:start="18:57" pos:end="18:64">internal</name><operator pos:start="18:65" pos:end="18:65">.</operator><name pos:start="18:66" pos:end="18:78">ImageWaypoint</name></name>;</import>
<import pos:start="19:1" pos:end="19:80">import <name pos:start="19:8" pos:end="19:79"><name pos:start="19:8" pos:end="19:10">edu</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:13">nd</name><operator pos:start="19:14" pos:end="19:14">.</operator><name pos:start="19:15" pos:end="19:23">dronology</name><operator pos:start="19:24" pos:end="19:24">.</operator><name pos:start="19:25" pos:end="19:32">services</name><operator pos:start="19:33" pos:end="19:33">.</operator><name pos:start="19:34" pos:end="19:43">extensions</name><operator pos:start="19:44" pos:end="19:44">.</operator><name pos:start="19:45" pos:end="19:55">areamapping</name><operator pos:start="19:56" pos:end="19:56">.</operator><name pos:start="19:57" pos:end="19:64">internal</name><operator pos:start="19:65" pos:end="19:65">.</operator><name pos:start="19:66" pos:end="19:79">ImageWaypoints</name></name>;</import>
<import pos:start="20:1" pos:end="20:73">import <name pos:start="20:8" pos:end="20:72"><name pos:start="20:8" pos:end="20:10">edu</name><operator pos:start="20:11" pos:end="20:11">.</operator><name pos:start="20:12" pos:end="20:13">nd</name><operator pos:start="20:14" pos:end="20:14">.</operator><name pos:start="20:15" pos:end="20:23">dronology</name><operator pos:start="20:24" pos:end="20:24">.</operator><name pos:start="20:25" pos:end="20:32">services</name><operator pos:start="20:33" pos:end="20:33">.</operator><name pos:start="20:34" pos:end="20:43">extensions</name><operator pos:start="20:44" pos:end="20:44">.</operator><name pos:start="20:45" pos:end="20:55">areamapping</name><operator pos:start="20:56" pos:end="20:56">.</operator><name pos:start="20:57" pos:end="20:64">internal</name><operator pos:start="20:65" pos:end="20:65">.</operator><name pos:start="20:66" pos:end="20:72">MapNode</name></name>;</import>
<import pos:start="21:1" pos:end="21:75">import <name pos:start="21:8" pos:end="21:74"><name pos:start="21:8" pos:end="21:10">edu</name><operator pos:start="21:11" pos:end="21:11">.</operator><name pos:start="21:12" pos:end="21:13">nd</name><operator pos:start="21:14" pos:end="21:14">.</operator><name pos:start="21:15" pos:end="21:23">dronology</name><operator pos:start="21:24" pos:end="21:24">.</operator><name pos:start="21:25" pos:end="21:32">services</name><operator pos:start="21:33" pos:end="21:33">.</operator><name pos:start="21:34" pos:end="21:43">extensions</name><operator pos:start="21:44" pos:end="21:44">.</operator><name pos:start="21:45" pos:end="21:55">areamapping</name><operator pos:start="21:56" pos:end="21:56">.</operator><name pos:start="21:57" pos:end="21:64">internal</name><operator pos:start="21:65" pos:end="21:65">.</operator><name pos:start="21:66" pos:end="21:74">RiverBank</name></name>;</import>
<import pos:start="22:1" pos:end="22:75">import <name pos:start="22:8" pos:end="22:74"><name pos:start="22:8" pos:end="22:10">edu</name><operator pos:start="22:11" pos:end="22:11">.</operator><name pos:start="22:12" pos:end="22:13">nd</name><operator pos:start="22:14" pos:end="22:14">.</operator><name pos:start="22:15" pos:end="22:23">dronology</name><operator pos:start="22:24" pos:end="22:24">.</operator><name pos:start="22:25" pos:end="22:32">services</name><operator pos:start="22:33" pos:end="22:33">.</operator><name pos:start="22:34" pos:end="22:43">extensions</name><operator pos:start="22:44" pos:end="22:44">.</operator><name pos:start="22:45" pos:end="22:55">areamapping</name><operator pos:start="22:56" pos:end="22:56">.</operator><name pos:start="22:57" pos:end="22:64">internal</name><operator pos:start="22:65" pos:end="22:65">.</operator><name pos:start="22:66" pos:end="22:74">RiverList</name></name>;</import>
<import pos:start="23:1" pos:end="23:78">import <name pos:start="23:8" pos:end="23:77"><name pos:start="23:8" pos:end="23:10">edu</name><operator pos:start="23:11" pos:end="23:11">.</operator><name pos:start="23:12" pos:end="23:13">nd</name><operator pos:start="23:14" pos:end="23:14">.</operator><name pos:start="23:15" pos:end="23:23">dronology</name><operator pos:start="23:24" pos:end="23:24">.</operator><name pos:start="23:25" pos:end="23:32">services</name><operator pos:start="23:33" pos:end="23:33">.</operator><name pos:start="23:34" pos:end="23:43">extensions</name><operator pos:start="23:44" pos:end="23:44">.</operator><name pos:start="23:45" pos:end="23:55">areamapping</name><operator pos:start="23:56" pos:end="23:56">.</operator><name pos:start="23:57" pos:end="23:64">internal</name><operator pos:start="23:65" pos:end="23:65">.</operator><name pos:start="23:66" pos:end="23:77">SourcePoints</name></name>;</import>
<import pos:start="24:1" pos:end="24:78">import <name pos:start="24:8" pos:end="24:77"><name pos:start="24:8" pos:end="24:10">edu</name><operator pos:start="24:11" pos:end="24:11">.</operator><name pos:start="24:12" pos:end="24:13">nd</name><operator pos:start="24:14" pos:end="24:14">.</operator><name pos:start="24:15" pos:end="24:23">dronology</name><operator pos:start="24:24" pos:end="24:24">.</operator><name pos:start="24:25" pos:end="24:32">services</name><operator pos:start="24:33" pos:end="24:33">.</operator><name pos:start="24:34" pos:end="24:43">extensions</name><operator pos:start="24:44" pos:end="24:44">.</operator><name pos:start="24:45" pos:end="24:55">areamapping</name><operator pos:start="24:56" pos:end="24:56">.</operator><name pos:start="24:57" pos:end="24:61">model</name><operator pos:start="24:62" pos:end="24:62">.</operator><name pos:start="24:63" pos:end="24:77">RiverSubsegment</name></name>;</import>
<import pos:start="25:1" pos:end="25:77">import <name pos:start="25:8" pos:end="25:76"><name pos:start="25:8" pos:end="25:10">edu</name><operator pos:start="25:11" pos:end="25:11">.</operator><name pos:start="25:12" pos:end="25:13">nd</name><operator pos:start="25:14" pos:end="25:14">.</operator><name pos:start="25:15" pos:end="25:23">dronology</name><operator pos:start="25:24" pos:end="25:24">.</operator><name pos:start="25:25" pos:end="25:32">services</name><operator pos:start="25:33" pos:end="25:33">.</operator><name pos:start="25:34" pos:end="25:43">extensions</name><operator pos:start="25:44" pos:end="25:44">.</operator><name pos:start="25:45" pos:end="25:55">areamapping</name><operator pos:start="25:56" pos:end="25:56">.</operator><name pos:start="25:57" pos:end="25:61">model</name><operator pos:start="25:62" pos:end="25:62">.</operator><name pos:start="25:63" pos:end="25:76">RoutePrimitive</name></name>;</import>
<import pos:start="26:1" pos:end="26:87">import <name pos:start="26:8" pos:end="26:86"><name pos:start="26:8" pos:end="26:10">edu</name><operator pos:start="26:11" pos:end="26:11">.</operator><name pos:start="26:12" pos:end="26:13">nd</name><operator pos:start="26:14" pos:end="26:14">.</operator><name pos:start="26:15" pos:end="26:23">dronology</name><operator pos:start="26:24" pos:end="26:24">.</operator><name pos:start="26:25" pos:end="26:32">services</name><operator pos:start="26:33" pos:end="26:33">.</operator><name pos:start="26:34" pos:end="26:43">extensions</name><operator pos:start="26:44" pos:end="26:44">.</operator><name pos:start="26:45" pos:end="26:55">areamapping</name><operator pos:start="26:56" pos:end="26:56">.</operator><name pos:start="26:57" pos:end="26:61">model</name><operator pos:start="26:62" pos:end="26:62">.</operator><name pos:start="26:63" pos:end="26:76">RoutePrimitive</name><operator pos:start="26:77" pos:end="26:77">.</operator><name pos:start="26:78" pos:end="26:86">RouteType</name></name>;</import>


<class pos:start="29:1" pos:end="591:1"><specifier pos:start="29:1" pos:end="29:6">public</specifier> class <name pos:start="29:14" pos:end="29:22">Utilities</name> <block pos:start="29:24" pos:end="591:1">{

    <comment type="block" format="javadoc" pos:start="31:5" pos:end="34:7">/**
     * This function calculates the average latitude.
     * @return average latitude
     */</comment>
    <function pos:start="35:5" pos:end="37:5"><type pos:start="35:5" pos:end="35:24"><specifier pos:start="35:5" pos:end="35:10">public</specifier> <specifier pos:start="35:12" pos:end="35:17">static</specifier> <name pos:start="35:19" pos:end="35:24">double</name></type> <name pos:start="35:26" pos:end="35:39">getAvgLatitude</name><parameter_list pos:start="35:40" pos:end="35:79">(<parameter pos:start="35:41" pos:end="35:58"><decl pos:start="35:41" pos:end="35:58"><type pos:start="35:41" pos:end="35:58"><name pos:start="35:41" pos:end="35:46">double</name></type> <name pos:start="35:48" pos:end="35:58">minLatitude</name></decl></parameter>, <parameter pos:start="35:61" pos:end="35:78"><decl pos:start="35:61" pos:end="35:78"><type pos:start="35:61" pos:end="35:78"><name pos:start="35:61" pos:end="35:66">double</name></type> <name pos:start="35:68" pos:end="35:78">maxLatitude</name></decl></parameter>)</parameter_list><block pos:start="35:80" pos:end="37:5">{<block_content pos:start="36:9" pos:end="36:45">
        <return pos:start="36:9" pos:end="36:45">return <expr pos:start="36:16" pos:end="36:44"><operator pos:start="36:16" pos:end="36:16">(</operator><name pos:start="36:17" pos:end="36:27">minLatitude</name> <operator pos:start="36:29" pos:end="36:29">+</operator> <name pos:start="36:31" pos:end="36:41">maxLatitude</name><operator pos:start="36:42" pos:end="36:42">)</operator><operator pos:start="36:43" pos:end="36:43">/</operator><literal type="number" pos:start="36:44" pos:end="36:44">2</literal></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="39:5" pos:end="45:5"><type pos:start="39:5" pos:end="39:27"><specifier pos:start="39:5" pos:end="39:10">public</specifier> <specifier pos:start="39:12" pos:end="39:17">static</specifier> <name pos:start="39:19" pos:end="39:27">RiverBank</name></type> <name pos:start="39:29" pos:end="39:46">edgeLlaToRiverBank</name><parameter_list pos:start="39:47" pos:end="39:67">(<parameter pos:start="39:48" pos:end="39:66"><decl pos:start="39:48" pos:end="39:66"><type pos:start="39:48" pos:end="39:60"><name pos:start="39:48" pos:end="39:60"><name pos:start="39:48" pos:end="39:51">List</name><argument_list type="generic" pos:start="39:52" pos:end="39:60">&lt;<argument pos:start="39:53" pos:end="39:59"><name pos:start="39:53" pos:end="39:59">EdgeLla</name></argument>&gt;</argument_list></name></type> <name pos:start="39:62" pos:end="39:66">input</name></decl></parameter>)</parameter_list><block pos:start="39:68" pos:end="45:5">{<block_content pos:start="40:9" pos:end="44:23">
    	<decl_stmt pos:start="40:9" pos:end="40:44"><decl pos:start="40:9" pos:end="40:43"><type pos:start="40:9" pos:end="40:17"><name pos:start="40:9" pos:end="40:17">RiverBank</name></type> <name pos:start="40:19" pos:end="40:25">newBank</name> <init pos:start="40:27" pos:end="40:43">= <expr pos:start="40:29" pos:end="40:43"><operator pos:start="40:29" pos:end="40:31">new</operator> <call pos:start="40:33" pos:end="40:43"><name pos:start="40:33" pos:end="40:41">RiverBank</name><argument_list pos:start="40:42" pos:end="40:43">()</argument_list></call></expr></init></decl>;</decl_stmt>
    	<for pos:start="41:9" pos:end="43:9">for<control pos:start="41:12" pos:end="41:34">(<init pos:start="41:13" pos:end="41:33"><decl pos:start="41:13" pos:end="41:33"><type pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:19">EdgeLla</name></type> <name pos:start="41:21" pos:end="41:25">entry</name> <range pos:start="41:27" pos:end="41:33">: <expr pos:start="41:29" pos:end="41:33"><name pos:start="41:29" pos:end="41:33">input</name></expr></range></decl></init>)</control> <block pos:start="41:36" pos:end="43:9">{<block_content pos:start="42:17" pos:end="42:91">
    		<expr_stmt pos:start="42:17" pos:end="42:91"><expr pos:start="42:17" pos:end="42:90"><call pos:start="42:17" pos:end="42:90"><name pos:start="42:17" pos:end="42:27"><name pos:start="42:17" pos:end="42:23">newBank</name><operator pos:start="42:24" pos:end="42:24">.</operator><name pos:start="42:25" pos:end="42:27">add</name></name><argument_list pos:start="42:28" pos:end="42:90">(<argument pos:start="42:29" pos:end="42:89"><expr pos:start="42:29" pos:end="42:89"><operator pos:start="42:29" pos:end="42:31">new</operator> <call pos:start="42:33" pos:end="42:89"><name pos:start="42:33" pos:end="42:46"><name pos:start="42:33" pos:end="42:39">Point2D</name><operator pos:start="42:40" pos:end="42:40">.</operator><name pos:start="42:41" pos:end="42:46">Double</name></name><argument_list pos:start="42:47" pos:end="42:89">(<argument pos:start="42:48" pos:end="42:66"><expr pos:start="42:48" pos:end="42:66"><call pos:start="42:48" pos:end="42:66"><name pos:start="42:48" pos:end="42:64"><name pos:start="42:48" pos:end="42:52">entry</name><operator pos:start="42:53" pos:end="42:53">.</operator><name pos:start="42:54" pos:end="42:64">getLatitude</name></name><argument_list pos:start="42:65" pos:end="42:66">()</argument_list></call></expr></argument>, <argument pos:start="42:69" pos:end="42:88"><expr pos:start="42:69" pos:end="42:88"><call pos:start="42:69" pos:end="42:88"><name pos:start="42:69" pos:end="42:86"><name pos:start="42:69" pos:end="42:73">entry</name><operator pos:start="42:74" pos:end="42:74">.</operator><name pos:start="42:75" pos:end="42:86">getLongitude</name></name><argument_list pos:start="42:87" pos:end="42:88">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<return pos:start="44:9" pos:end="44:23">return <expr pos:start="44:16" pos:end="44:22"><name pos:start="44:16" pos:end="44:22">newBank</name></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="47:5" pos:end="79:5"><type pos:start="47:5" pos:end="47:33"><specifier pos:start="47:5" pos:end="47:10">public</specifier> <specifier pos:start="47:12" pos:end="47:17">static</specifier> <name pos:start="47:19" pos:end="47:33"><name pos:start="47:19" pos:end="47:22">List</name><argument_list type="generic" pos:start="47:23" pos:end="47:33">&lt;<argument pos:start="47:24" pos:end="47:32"><name pos:start="47:24" pos:end="47:32">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="47:35" pos:end="47:55">processDronologyInput</name><parameter_list pos:start="47:56" pos:end="47:120">(<parameter pos:start="47:57" pos:end="47:71"><decl pos:start="47:57" pos:end="47:71"><type pos:start="47:57" pos:end="47:71"><name pos:start="47:57" pos:end="47:65">RiverBank</name></type> <name pos:start="47:67" pos:end="47:71">bank1</name></decl></parameter>, <parameter pos:start="47:74" pos:end="47:88"><decl pos:start="47:74" pos:end="47:88"><type pos:start="47:74" pos:end="47:88"><name pos:start="47:74" pos:end="47:82">RiverBank</name></type> <name pos:start="47:84" pos:end="47:88">bank2</name></decl></parameter>, <parameter pos:start="47:91" pos:end="47:119"><decl pos:start="47:91" pos:end="47:119"><type pos:start="47:91" pos:end="47:119"><name pos:start="47:91" pos:end="47:104"><name pos:start="47:91" pos:end="47:96">Vector</name><argument_list type="generic" pos:start="47:97" pos:end="47:104">&lt;<argument pos:start="47:98" pos:end="47:103"><name pos:start="47:98" pos:end="47:103">Double</name></argument>&gt;</argument_list></name></type> <name pos:start="47:106" pos:end="47:119">latitudeBounds</name></decl></parameter>)</parameter_list><block pos:start="47:121" pos:end="79:5">{<block_content pos:start="48:9" pos:end="77:28">
    	<decl_stmt pos:start="48:9" pos:end="48:53"><decl pos:start="48:9" pos:end="48:52"><type pos:start="48:9" pos:end="48:23"><name pos:start="48:9" pos:end="48:23"><name pos:start="48:9" pos:end="48:12">List</name><argument_list type="generic" pos:start="48:13" pos:end="48:23">&lt;<argument pos:start="48:14" pos:end="48:22"><name pos:start="48:14" pos:end="48:22">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="48:25" pos:end="48:32">bankList</name> <init pos:start="48:34" pos:end="48:52">= <expr pos:start="48:36" pos:end="48:52"><operator pos:start="48:36" pos:end="48:38">new</operator> <call pos:start="48:40" pos:end="48:52"><name pos:start="48:40" pos:end="48:50"><name pos:start="48:40" pos:end="48:48">ArrayList</name><argument_list type="generic" pos:start="48:49" pos:end="48:50">&lt;&gt;</argument_list></name><argument_list pos:start="48:51" pos:end="48:52">()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt pos:start="49:13" pos:end="49:38"><decl pos:start="49:13" pos:end="49:37"><type pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:18">double</name></type> <name pos:start="49:20" pos:end="49:30">minLatitude</name> <init pos:start="49:32" pos:end="49:37">= <expr pos:start="49:34" pos:end="49:37"><literal type="number" pos:start="49:34" pos:end="49:37">1000</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt pos:start="50:13" pos:end="50:39"><decl pos:start="50:13" pos:end="50:38"><type pos:start="50:13" pos:end="50:18"><name pos:start="50:13" pos:end="50:18">double</name></type> <name pos:start="50:20" pos:end="50:30">maxLatitude</name> <init pos:start="50:32" pos:end="50:38">= <expr pos:start="50:34" pos:end="50:38"><operator pos:start="50:34" pos:end="50:34">-</operator><literal type="number" pos:start="50:35" pos:end="50:38">1000</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt pos:start="51:13" pos:end="51:28"><decl pos:start="51:13" pos:end="51:27"><type pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:18">double</name></type> <name pos:start="51:20" pos:end="51:27">latitude</name></decl>;</decl_stmt>
	    <for pos:start="52:13" pos:end="60:13">for<control pos:start="52:16" pos:end="52:50">(<init pos:start="52:17" pos:end="52:49"><decl pos:start="52:17" pos:end="52:49"><type pos:start="52:17" pos:end="52:30"><name pos:start="52:17" pos:end="52:30"><name pos:start="52:17" pos:end="52:23">Point2D</name><operator pos:start="52:24" pos:end="52:24">.</operator><name pos:start="52:25" pos:end="52:30">Double</name></name></type> <name pos:start="52:32" pos:end="52:35">node</name> <range pos:start="52:37" pos:end="52:49">: <expr pos:start="52:39" pos:end="52:49"><call pos:start="52:39" pos:end="52:49"><name pos:start="52:39" pos:end="52:47"><name pos:start="52:39" pos:end="52:43">bank1</name><operator pos:start="52:44" pos:end="52:44">.</operator><name pos:start="52:45" pos:end="52:47">get</name></name><argument_list pos:start="52:48" pos:end="52:49">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="52:51" pos:end="60:13">{<block_content pos:start="53:17" pos:end="59:17">
	        <expr_stmt pos:start="53:17" pos:end="53:39"><expr pos:start="53:17" pos:end="53:38"><name pos:start="53:17" pos:end="53:24">latitude</name> <operator pos:start="53:26" pos:end="53:26">=</operator> <call pos:start="53:28" pos:end="53:38"><name pos:start="53:28" pos:end="53:36"><name pos:start="53:28" pos:end="53:31">node</name><operator pos:start="53:32" pos:end="53:32">.</operator><name pos:start="53:33" pos:end="53:36">getX</name></name><argument_list pos:start="53:37" pos:end="53:38">()</argument_list></call></expr>;</expr_stmt>
	        <if_stmt pos:start="54:17" pos:end="56:17"><if pos:start="54:17" pos:end="56:17">if<condition pos:start="54:19" pos:end="54:42">(<expr pos:start="54:20" pos:end="54:41"><name pos:start="54:20" pos:end="54:27">latitude</name> <operator pos:start="54:29" pos:end="54:29">&lt;</operator> <name pos:start="54:31" pos:end="54:41">minLatitude</name></expr>)</condition><block pos:start="54:43" pos:end="56:17">{<block_content pos:start="55:21" pos:end="55:43">
	            <expr_stmt pos:start="55:21" pos:end="55:43"><expr pos:start="55:21" pos:end="55:42"><name pos:start="55:21" pos:end="55:31">minLatitude</name> <operator pos:start="55:33" pos:end="55:33">=</operator> <name pos:start="55:35" pos:end="55:42">latitude</name></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	        <if_stmt pos:start="57:17" pos:end="59:17"><if pos:start="57:17" pos:end="59:17">if<condition pos:start="57:19" pos:end="57:42">(<expr pos:start="57:20" pos:end="57:41"><name pos:start="57:20" pos:end="57:30">maxLatitude</name> <operator pos:start="57:32" pos:end="57:32">&lt;</operator> <name pos:start="57:34" pos:end="57:41">latitude</name></expr>)</condition><block pos:start="57:43" pos:end="59:17">{<block_content pos:start="58:21" pos:end="58:43">
	            <expr_stmt pos:start="58:21" pos:end="58:43"><expr pos:start="58:21" pos:end="58:42"><name pos:start="58:21" pos:end="58:31">maxLatitude</name> <operator pos:start="58:33" pos:end="58:33">=</operator> <name pos:start="58:35" pos:end="58:42">latitude</name></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>
	    <for pos:start="61:13" pos:end="69:13">for<control pos:start="61:16" pos:end="61:50">(<init pos:start="61:17" pos:end="61:49"><decl pos:start="61:17" pos:end="61:49"><type pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:23">Point2D</name><operator pos:start="61:24" pos:end="61:24">.</operator><name pos:start="61:25" pos:end="61:30">Double</name></name></type> <name pos:start="61:32" pos:end="61:35">node</name> <range pos:start="61:37" pos:end="61:49">: <expr pos:start="61:39" pos:end="61:49"><call pos:start="61:39" pos:end="61:49"><name pos:start="61:39" pos:end="61:47"><name pos:start="61:39" pos:end="61:43">bank2</name><operator pos:start="61:44" pos:end="61:44">.</operator><name pos:start="61:45" pos:end="61:47">get</name></name><argument_list pos:start="61:48" pos:end="61:49">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="61:51" pos:end="69:13">{<block_content pos:start="62:17" pos:end="68:17">
	        <expr_stmt pos:start="62:17" pos:end="62:39"><expr pos:start="62:17" pos:end="62:38"><name pos:start="62:17" pos:end="62:24">latitude</name> <operator pos:start="62:26" pos:end="62:26">=</operator> <call pos:start="62:28" pos:end="62:38"><name pos:start="62:28" pos:end="62:36"><name pos:start="62:28" pos:end="62:31">node</name><operator pos:start="62:32" pos:end="62:32">.</operator><name pos:start="62:33" pos:end="62:36">getX</name></name><argument_list pos:start="62:37" pos:end="62:38">()</argument_list></call></expr>;</expr_stmt>
	        <if_stmt pos:start="63:17" pos:end="65:17"><if pos:start="63:17" pos:end="65:17">if<condition pos:start="63:19" pos:end="63:42">(<expr pos:start="63:20" pos:end="63:41"><name pos:start="63:20" pos:end="63:27">latitude</name> <operator pos:start="63:29" pos:end="63:29">&lt;</operator> <name pos:start="63:31" pos:end="63:41">minLatitude</name></expr>)</condition><block pos:start="63:43" pos:end="65:17">{<block_content pos:start="64:21" pos:end="64:43">
	            <expr_stmt pos:start="64:21" pos:end="64:43"><expr pos:start="64:21" pos:end="64:42"><name pos:start="64:21" pos:end="64:31">minLatitude</name> <operator pos:start="64:33" pos:end="64:33">=</operator> <name pos:start="64:35" pos:end="64:42">latitude</name></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	        <if_stmt pos:start="66:17" pos:end="68:17"><if pos:start="66:17" pos:end="68:17">if<condition pos:start="66:19" pos:end="66:42">(<expr pos:start="66:20" pos:end="66:41"><name pos:start="66:20" pos:end="66:30">maxLatitude</name> <operator pos:start="66:32" pos:end="66:32">&lt;</operator> <name pos:start="66:34" pos:end="66:41">latitude</name></expr>)</condition><block pos:start="66:43" pos:end="68:17">{<block_content pos:start="67:21" pos:end="67:43">
	            <expr_stmt pos:start="67:21" pos:end="67:43"><expr pos:start="67:21" pos:end="67:42"><name pos:start="67:21" pos:end="67:31">maxLatitude</name> <operator pos:start="67:33" pos:end="67:33">=</operator> <name pos:start="67:35" pos:end="67:42">latitude</name></expr>;</expr_stmt>
	        </block_content>}</block></if></if_stmt>
	    </block_content>}</block></for>
	    <decl_stmt pos:start="70:13" pos:end="70:74"><decl pos:start="70:13" pos:end="70:73"><type pos:start="70:13" pos:end="70:18"><name pos:start="70:13" pos:end="70:18">double</name></type> <name pos:start="70:20" pos:end="70:30">avgLatitude</name> <init pos:start="70:32" pos:end="70:73">= <expr pos:start="70:34" pos:end="70:73"><call pos:start="70:34" pos:end="70:73"><name pos:start="70:34" pos:end="70:47">getAvgLatitude</name><argument_list pos:start="70:48" pos:end="70:73">(<argument pos:start="70:49" pos:end="70:59"><expr pos:start="70:49" pos:end="70:59"><name pos:start="70:49" pos:end="70:59">minLatitude</name></expr></argument>, <argument pos:start="70:62" pos:end="70:72"><expr pos:start="70:62" pos:end="70:72"><name pos:start="70:62" pos:end="70:72">maxLatitude</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt pos:start="71:13" pos:end="71:44"><expr pos:start="71:13" pos:end="71:43"><call pos:start="71:13" pos:end="71:43"><name pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:26">latitudeBounds</name><operator pos:start="71:27" pos:end="71:27">.</operator><name pos:start="71:28" pos:end="71:30">add</name></name><argument_list pos:start="71:31" pos:end="71:43">(<argument pos:start="71:32" pos:end="71:42"><expr pos:start="71:32" pos:end="71:42"><name pos:start="71:32" pos:end="71:42">minLatitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="72:13" pos:end="72:44"><expr pos:start="72:13" pos:end="72:43"><call pos:start="72:13" pos:end="72:43"><name pos:start="72:13" pos:end="72:30"><name pos:start="72:13" pos:end="72:26">latitudeBounds</name><operator pos:start="72:27" pos:end="72:27">.</operator><name pos:start="72:28" pos:end="72:30">add</name></name><argument_list pos:start="72:31" pos:end="72:43">(<argument pos:start="72:32" pos:end="72:42"><expr pos:start="72:32" pos:end="72:42"><name pos:start="72:32" pos:end="72:42">maxLatitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="73:13" pos:end="73:73"><expr pos:start="73:13" pos:end="73:72"><name pos:start="73:13" pos:end="73:17">bank1</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <call pos:start="73:21" pos:end="73:72"><name pos:start="73:21" pos:end="73:52">gpsRiverBankToCartesianRiverBank</name><argument_list pos:start="73:53" pos:end="73:72">(<argument pos:start="73:54" pos:end="73:64"><expr pos:start="73:54" pos:end="73:64"><name pos:start="73:54" pos:end="73:64">avgLatitude</name></expr></argument>, <argument pos:start="73:67" pos:end="73:71"><expr pos:start="73:67" pos:end="73:71"><name pos:start="73:67" pos:end="73:71">bank1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="74:13" pos:end="74:73"><expr pos:start="74:13" pos:end="74:72"><name pos:start="74:13" pos:end="74:17">bank2</name> <operator pos:start="74:19" pos:end="74:19">=</operator> <call pos:start="74:21" pos:end="74:72"><name pos:start="74:21" pos:end="74:52">gpsRiverBankToCartesianRiverBank</name><argument_list pos:start="74:53" pos:end="74:72">(<argument pos:start="74:54" pos:end="74:64"><expr pos:start="74:54" pos:end="74:64"><name pos:start="74:54" pos:end="74:64">avgLatitude</name></expr></argument>, <argument pos:start="74:67" pos:end="74:71"><expr pos:start="74:67" pos:end="74:71"><name pos:start="74:67" pos:end="74:71">bank2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><call pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:20">bankList</name><operator pos:start="75:21" pos:end="75:21">.</operator><name pos:start="75:22" pos:end="75:24">add</name></name><argument_list pos:start="75:25" pos:end="75:31">(<argument pos:start="75:26" pos:end="75:30"><expr pos:start="75:26" pos:end="75:30"><name pos:start="75:26" pos:end="75:30">bank1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="76:13" pos:end="76:32"><expr pos:start="76:13" pos:end="76:31"><call pos:start="76:13" pos:end="76:31"><name pos:start="76:13" pos:end="76:24"><name pos:start="76:13" pos:end="76:20">bankList</name><operator pos:start="76:21" pos:end="76:21">.</operator><name pos:start="76:22" pos:end="76:24">add</name></name><argument_list pos:start="76:25" pos:end="76:31">(<argument pos:start="76:26" pos:end="76:30"><expr pos:start="76:26" pos:end="76:30"><name pos:start="76:26" pos:end="76:30">bank2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="77:13" pos:end="77:28">return <expr pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:27">bankList</name></expr>;</return>
    	
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="81:5" pos:end="86:7">/**
     * This splits the nodes from the JSON input into vectors for each bank of the river and puts these vectors
     * into a list.
     * @param riverList
     * @return a list of Vectors of Point2D.Double representing the banks of the river
     */</comment>
    
    <function pos:start="88:5" pos:end="117:5"><type pos:start="88:5" pos:end="88:33"><specifier pos:start="88:5" pos:end="88:10">public</specifier> <specifier pos:start="88:12" pos:end="88:17">static</specifier> <name pos:start="88:19" pos:end="88:33"><name pos:start="88:19" pos:end="88:22">List</name><argument_list type="generic" pos:start="88:23" pos:end="88:33">&lt;<argument pos:start="88:24" pos:end="88:32"><name pos:start="88:24" pos:end="88:32">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="88:35" pos:end="88:49">makeBankVectors</name><parameter_list pos:start="88:50" pos:end="88:101">(<parameter pos:start="88:51" pos:end="88:69"><decl pos:start="88:51" pos:end="88:69"><type pos:start="88:51" pos:end="88:69"><name pos:start="88:51" pos:end="88:59">RiverList</name></type> <name pos:start="88:61" pos:end="88:69">riverList</name></decl></parameter>, <parameter pos:start="88:72" pos:end="88:100"><decl pos:start="88:72" pos:end="88:100"><type pos:start="88:72" pos:end="88:100"><name pos:start="88:72" pos:end="88:85"><name pos:start="88:72" pos:end="88:77">Vector</name><argument_list type="generic" pos:start="88:78" pos:end="88:85">&lt;<argument pos:start="88:79" pos:end="88:84"><name pos:start="88:79" pos:end="88:84">Double</name></argument>&gt;</argument_list></name></type> <name pos:start="88:87" pos:end="88:100">latitudeBounds</name></decl></parameter>)</parameter_list><block pos:start="88:102" pos:end="117:5">{<block_content pos:start="89:9" pos:end="116:24">
        <decl_stmt pos:start="89:9" pos:end="89:53"><decl pos:start="89:9" pos:end="89:52"><type pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:12">List</name><argument_list type="generic" pos:start="89:13" pos:end="89:23">&lt;<argument pos:start="89:14" pos:end="89:22"><name pos:start="89:14" pos:end="89:22">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="89:25" pos:end="89:32">bankList</name> <init pos:start="89:34" pos:end="89:52">= <expr pos:start="89:36" pos:end="89:52"><operator pos:start="89:36" pos:end="89:38">new</operator> <call pos:start="89:40" pos:end="89:52"><name pos:start="89:40" pos:end="89:50"><name pos:start="89:40" pos:end="89:48">ArrayList</name><argument_list type="generic" pos:start="89:49" pos:end="89:50">&lt;&gt;</argument_list></name><argument_list pos:start="89:51" pos:end="89:52">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="90:9" pos:end="90:42"><decl pos:start="90:9" pos:end="90:41"><type pos:start="90:9" pos:end="90:17"><name pos:start="90:9" pos:end="90:17">RiverBank</name></type> <name pos:start="90:19" pos:end="90:23">bank1</name> <init pos:start="90:25" pos:end="90:41">= <expr pos:start="90:27" pos:end="90:41"><operator pos:start="90:27" pos:end="90:29">new</operator> <call pos:start="90:31" pos:end="90:41"><name pos:start="90:31" pos:end="90:39">RiverBank</name><argument_list pos:start="90:40" pos:end="90:41">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="91:9" pos:end="91:42"><decl pos:start="91:9" pos:end="91:41"><type pos:start="91:9" pos:end="91:17"><name pos:start="91:9" pos:end="91:17">RiverBank</name></type> <name pos:start="91:19" pos:end="91:23">bank2</name> <init pos:start="91:25" pos:end="91:41">= <expr pos:start="91:27" pos:end="91:41"><operator pos:start="91:27" pos:end="91:29">new</operator> <call pos:start="91:31" pos:end="91:41"><name pos:start="91:31" pos:end="91:39">RiverBank</name><argument_list pos:start="91:40" pos:end="91:41">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="92:9" pos:end="92:34"><decl pos:start="92:9" pos:end="92:33"><type pos:start="92:9" pos:end="92:14"><name pos:start="92:9" pos:end="92:14">double</name></type> <name pos:start="92:16" pos:end="92:26">minLatitude</name> <init pos:start="92:28" pos:end="92:33">= <expr pos:start="92:30" pos:end="92:33"><literal type="number" pos:start="92:30" pos:end="92:33">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="93:9" pos:end="93:35"><decl pos:start="93:9" pos:end="93:34"><type pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:14">double</name></type> <name pos:start="93:16" pos:end="93:26">maxLatitude</name> <init pos:start="93:28" pos:end="93:34">= <expr pos:start="93:30" pos:end="93:34"><operator pos:start="93:30" pos:end="93:30">-</operator><literal type="number" pos:start="93:31" pos:end="93:34">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="94:9" pos:end="94:24"><decl pos:start="94:9" pos:end="94:23"><type pos:start="94:9" pos:end="94:14"><name pos:start="94:9" pos:end="94:14">double</name></type> <name pos:start="94:16" pos:end="94:23">latitude</name></decl>;</decl_stmt>
        <for pos:start="95:9" pos:end="108:9">for<control pos:start="95:12" pos:end="95:48">(<init pos:start="95:13" pos:end="95:47"><decl pos:start="95:13" pos:end="95:47"><type pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:19">MapNode</name></type> <name pos:start="95:21" pos:end="95:24">node</name> <range pos:start="95:26" pos:end="95:47">: <expr pos:start="95:28" pos:end="95:47"><call pos:start="95:28" pos:end="95:47"><name pos:start="95:28" pos:end="95:45"><name pos:start="95:28" pos:end="95:36">riverList</name><operator pos:start="95:37" pos:end="95:37">.</operator><name pos:start="95:38" pos:end="95:45">getNodes</name></name><argument_list pos:start="95:46" pos:end="95:47">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="95:49" pos:end="108:9">{<block_content pos:start="96:13" pos:end="107:13">
            <expr_stmt pos:start="96:13" pos:end="96:42"><expr pos:start="96:13" pos:end="96:41"><name pos:start="96:13" pos:end="96:20">latitude</name> <operator pos:start="96:22" pos:end="96:22">=</operator> <call pos:start="96:24" pos:end="96:41"><name pos:start="96:24" pos:end="96:39"><name pos:start="96:24" pos:end="96:27">node</name><operator pos:start="96:28" pos:end="96:28">.</operator><name pos:start="96:29" pos:end="96:39">getLatitude</name></name><argument_list pos:start="96:40" pos:end="96:41">()</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="97:13" pos:end="99:13"><if pos:start="97:13" pos:end="99:13">if<condition pos:start="97:15" pos:end="97:38">(<expr pos:start="97:16" pos:end="97:37"><name pos:start="97:16" pos:end="97:23">latitude</name> <operator pos:start="97:25" pos:end="97:25">&lt;</operator> <name pos:start="97:27" pos:end="97:37">minLatitude</name></expr>)</condition><block pos:start="97:39" pos:end="99:13">{<block_content pos:start="98:17" pos:end="98:39">
                <expr_stmt pos:start="98:17" pos:end="98:39"><expr pos:start="98:17" pos:end="98:38"><name pos:start="98:17" pos:end="98:27">minLatitude</name> <operator pos:start="98:29" pos:end="98:29">=</operator> <name pos:start="98:31" pos:end="98:38">latitude</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="100:13" pos:end="102:13"><if pos:start="100:13" pos:end="102:13">if<condition pos:start="100:15" pos:end="100:38">(<expr pos:start="100:16" pos:end="100:37"><name pos:start="100:16" pos:end="100:26">maxLatitude</name> <operator pos:start="100:28" pos:end="100:28">&lt;</operator> <name pos:start="100:30" pos:end="100:37">latitude</name></expr>)</condition><block pos:start="100:39" pos:end="102:13">{<block_content pos:start="101:17" pos:end="101:39">
                <expr_stmt pos:start="101:17" pos:end="101:39"><expr pos:start="101:17" pos:end="101:38"><name pos:start="101:17" pos:end="101:27">maxLatitude</name> <operator pos:start="101:29" pos:end="101:29">=</operator> <name pos:start="101:31" pos:end="101:38">latitude</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="103:13" pos:end="107:13"><if pos:start="103:13" pos:end="105:13">if<condition pos:start="103:15" pos:end="103:41">(<expr pos:start="103:16" pos:end="103:40"><call pos:start="103:16" pos:end="103:35"><name pos:start="103:16" pos:end="103:33"><name pos:start="103:16" pos:end="103:19">node</name><operator pos:start="103:20" pos:end="103:20">.</operator><name pos:start="103:21" pos:end="103:33">get_riverSide</name></name><argument_list pos:start="103:34" pos:end="103:35">()</argument_list></call> <operator pos:start="103:37" pos:end="103:38">==</operator> <literal type="number" pos:start="103:40" pos:end="103:40">1</literal></expr>)</condition> <block pos:start="103:43" pos:end="105:13">{<block_content pos:start="104:17" pos:end="104:86">
                <expr_stmt pos:start="104:17" pos:end="104:86"><expr pos:start="104:17" pos:end="104:85"><call pos:start="104:17" pos:end="104:85"><name pos:start="104:17" pos:end="104:25"><name pos:start="104:17" pos:end="104:21">bank1</name><operator pos:start="104:22" pos:end="104:22">.</operator><name pos:start="104:23" pos:end="104:25">add</name></name><argument_list pos:start="104:26" pos:end="104:85">(<argument pos:start="104:27" pos:end="104:84"><expr pos:start="104:27" pos:end="104:84"><operator pos:start="104:27" pos:end="104:29">new</operator> <call pos:start="104:31" pos:end="104:84"><name pos:start="104:31" pos:end="104:44"><name pos:start="104:31" pos:end="104:37">Point2D</name><operator pos:start="104:38" pos:end="104:38">.</operator><name pos:start="104:39" pos:end="104:44">Double</name></name><argument_list pos:start="104:45" pos:end="104:84">(<argument pos:start="104:46" pos:end="104:63"><expr pos:start="104:46" pos:end="104:63"><call pos:start="104:46" pos:end="104:63"><name pos:start="104:46" pos:end="104:61"><name pos:start="104:46" pos:end="104:49">node</name><operator pos:start="104:50" pos:end="104:50">.</operator><name pos:start="104:51" pos:end="104:61">getLatitude</name></name><argument_list pos:start="104:62" pos:end="104:63">()</argument_list></call></expr></argument>,<argument pos:start="104:65" pos:end="104:83"><expr pos:start="104:65" pos:end="104:83"><call pos:start="104:65" pos:end="104:83"><name pos:start="104:65" pos:end="104:81"><name pos:start="104:65" pos:end="104:68">node</name><operator pos:start="104:69" pos:end="104:69">.</operator><name pos:start="104:70" pos:end="104:81">getLongitude</name></name><argument_list pos:start="104:82" pos:end="104:83">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="105:15" pos:end="107:13">else <block pos:start="105:20" pos:end="107:13">{<block_content pos:start="106:17" pos:end="106:86">
                <expr_stmt pos:start="106:17" pos:end="106:86"><expr pos:start="106:17" pos:end="106:85"><call pos:start="106:17" pos:end="106:85"><name pos:start="106:17" pos:end="106:25"><name pos:start="106:17" pos:end="106:21">bank2</name><operator pos:start="106:22" pos:end="106:22">.</operator><name pos:start="106:23" pos:end="106:25">add</name></name><argument_list pos:start="106:26" pos:end="106:85">(<argument pos:start="106:27" pos:end="106:84"><expr pos:start="106:27" pos:end="106:84"><operator pos:start="106:27" pos:end="106:29">new</operator> <call pos:start="106:31" pos:end="106:84"><name pos:start="106:31" pos:end="106:44"><name pos:start="106:31" pos:end="106:37">Point2D</name><operator pos:start="106:38" pos:end="106:38">.</operator><name pos:start="106:39" pos:end="106:44">Double</name></name><argument_list pos:start="106:45" pos:end="106:84">(<argument pos:start="106:46" pos:end="106:63"><expr pos:start="106:46" pos:end="106:63"><call pos:start="106:46" pos:end="106:63"><name pos:start="106:46" pos:end="106:61"><name pos:start="106:46" pos:end="106:49">node</name><operator pos:start="106:50" pos:end="106:50">.</operator><name pos:start="106:51" pos:end="106:61">getLatitude</name></name><argument_list pos:start="106:62" pos:end="106:63">()</argument_list></call></expr></argument>,<argument pos:start="106:65" pos:end="106:83"><expr pos:start="106:65" pos:end="106:83"><call pos:start="106:65" pos:end="106:83"><name pos:start="106:65" pos:end="106:81"><name pos:start="106:65" pos:end="106:68">node</name><operator pos:start="106:69" pos:end="106:69">.</operator><name pos:start="106:70" pos:end="106:81">getLongitude</name></name><argument_list pos:start="106:82" pos:end="106:83">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <decl_stmt pos:start="109:9" pos:end="109:70"><decl pos:start="109:9" pos:end="109:69"><type pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:14">double</name></type> <name pos:start="109:16" pos:end="109:26">avgLatitude</name> <init pos:start="109:28" pos:end="109:69">= <expr pos:start="109:30" pos:end="109:69"><call pos:start="109:30" pos:end="109:69"><name pos:start="109:30" pos:end="109:43">getAvgLatitude</name><argument_list pos:start="109:44" pos:end="109:69">(<argument pos:start="109:45" pos:end="109:55"><expr pos:start="109:45" pos:end="109:55"><name pos:start="109:45" pos:end="109:55">minLatitude</name></expr></argument>, <argument pos:start="109:58" pos:end="109:68"><expr pos:start="109:58" pos:end="109:68"><name pos:start="109:58" pos:end="109:68">maxLatitude</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="110:9" pos:end="110:40"><expr pos:start="110:9" pos:end="110:39"><call pos:start="110:9" pos:end="110:39"><name pos:start="110:9" pos:end="110:26"><name pos:start="110:9" pos:end="110:22">latitudeBounds</name><operator pos:start="110:23" pos:end="110:23">.</operator><name pos:start="110:24" pos:end="110:26">add</name></name><argument_list pos:start="110:27" pos:end="110:39">(<argument pos:start="110:28" pos:end="110:38"><expr pos:start="110:28" pos:end="110:38"><name pos:start="110:28" pos:end="110:38">minLatitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="111:9" pos:end="111:40"><expr pos:start="111:9" pos:end="111:39"><call pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:22">latitudeBounds</name><operator pos:start="111:23" pos:end="111:23">.</operator><name pos:start="111:24" pos:end="111:26">add</name></name><argument_list pos:start="111:27" pos:end="111:39">(<argument pos:start="111:28" pos:end="111:38"><expr pos:start="111:28" pos:end="111:38"><name pos:start="111:28" pos:end="111:38">maxLatitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="112:9" pos:end="112:69"><expr pos:start="112:9" pos:end="112:68"><name pos:start="112:9" pos:end="112:13">bank1</name> <operator pos:start="112:15" pos:end="112:15">=</operator> <call pos:start="112:17" pos:end="112:68"><name pos:start="112:17" pos:end="112:48">gpsRiverBankToCartesianRiverBank</name><argument_list pos:start="112:49" pos:end="112:68">(<argument pos:start="112:50" pos:end="112:60"><expr pos:start="112:50" pos:end="112:60"><name pos:start="112:50" pos:end="112:60">avgLatitude</name></expr></argument>, <argument pos:start="112:63" pos:end="112:67"><expr pos:start="112:63" pos:end="112:67"><name pos:start="112:63" pos:end="112:67">bank1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="113:9" pos:end="113:69"><expr pos:start="113:9" pos:end="113:68"><name pos:start="113:9" pos:end="113:13">bank2</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <call pos:start="113:17" pos:end="113:68"><name pos:start="113:17" pos:end="113:48">gpsRiverBankToCartesianRiverBank</name><argument_list pos:start="113:49" pos:end="113:68">(<argument pos:start="113:50" pos:end="113:60"><expr pos:start="113:50" pos:end="113:60"><name pos:start="113:50" pos:end="113:60">avgLatitude</name></expr></argument>, <argument pos:start="113:63" pos:end="113:67"><expr pos:start="113:63" pos:end="113:67"><name pos:start="113:63" pos:end="113:67">bank2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="114:9" pos:end="114:28"><expr pos:start="114:9" pos:end="114:27"><call pos:start="114:9" pos:end="114:27"><name pos:start="114:9" pos:end="114:20"><name pos:start="114:9" pos:end="114:16">bankList</name><operator pos:start="114:17" pos:end="114:17">.</operator><name pos:start="114:18" pos:end="114:20">add</name></name><argument_list pos:start="114:21" pos:end="114:27">(<argument pos:start="114:22" pos:end="114:26"><expr pos:start="114:22" pos:end="114:26"><name pos:start="114:22" pos:end="114:26">bank1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="115:9" pos:end="115:28"><expr pos:start="115:9" pos:end="115:27"><call pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:16">bankList</name><operator pos:start="115:17" pos:end="115:17">.</operator><name pos:start="115:18" pos:end="115:20">add</name></name><argument_list pos:start="115:21" pos:end="115:27">(<argument pos:start="115:22" pos:end="115:26"><expr pos:start="115:22" pos:end="115:26"><name pos:start="115:22" pos:end="115:26">bank2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="116:9" pos:end="116:24">return <expr pos:start="116:16" pos:end="116:23"><name pos:start="116:16" pos:end="116:23">bankList</name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc" pos:start="119:5" pos:end="125:7">/**
        * This function converts the river bank vectors containing gps coordinates into vectors of cartesian
        * coordinates for all the calculations during the dynamic route generation icse.approach.
        * @param avgLatitude
        * @param gpsBank
        * @return RiverBank in cartesian coordinates
        */</comment>
    <function pos:start="126:5" pos:end="132:5"><type pos:start="126:5" pos:end="126:28"><specifier pos:start="126:5" pos:end="126:11">private</specifier> <specifier pos:start="126:13" pos:end="126:18">static</specifier> <name pos:start="126:20" pos:end="126:28">RiverBank</name></type> <name pos:start="126:30" pos:end="126:61">gpsRiverBankToCartesianRiverBank</name><parameter_list pos:start="126:62" pos:end="126:100">(<parameter pos:start="126:63" pos:end="126:80"><decl pos:start="126:63" pos:end="126:80"><type pos:start="126:63" pos:end="126:80"><name pos:start="126:63" pos:end="126:68">double</name></type> <name pos:start="126:70" pos:end="126:80">avgLatitude</name></decl></parameter>, <parameter pos:start="126:83" pos:end="126:99"><decl pos:start="126:83" pos:end="126:99"><type pos:start="126:83" pos:end="126:99"><name pos:start="126:83" pos:end="126:91">RiverBank</name></type> <name pos:start="126:93" pos:end="126:99">gpsBank</name></decl></parameter>)</parameter_list> <block pos:start="126:102" pos:end="132:5">{<block_content pos:start="127:9" pos:end="131:25">
        <decl_stmt pos:start="127:9" pos:end="127:46"><decl pos:start="127:9" pos:end="127:45"><type pos:start="127:9" pos:end="127:17"><name pos:start="127:9" pos:end="127:17">RiverBank</name></type> <name pos:start="127:19" pos:end="127:27">riverBank</name> <init pos:start="127:29" pos:end="127:45">= <expr pos:start="127:31" pos:end="127:45"><operator pos:start="127:31" pos:end="127:33">new</operator> <call pos:start="127:35" pos:end="127:45"><name pos:start="127:35" pos:end="127:43">RiverBank</name><argument_list pos:start="127:44" pos:end="127:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for pos:start="128:9" pos:end="130:9">for<control pos:start="128:12" pos:end="128:49">(<init pos:start="128:13" pos:end="128:48"><decl pos:start="128:13" pos:end="128:48"><type pos:start="128:13" pos:end="128:26"><name pos:start="128:13" pos:end="128:26"><name pos:start="128:13" pos:end="128:19">Point2D</name><operator pos:start="128:20" pos:end="128:20">.</operator><name pos:start="128:21" pos:end="128:26">Double</name></name></type> <name pos:start="128:28" pos:end="128:32">entry</name> <range pos:start="128:34" pos:end="128:48">: <expr pos:start="128:36" pos:end="128:48"><call pos:start="128:36" pos:end="128:48"><name pos:start="128:36" pos:end="128:46"><name pos:start="128:36" pos:end="128:42">gpsBank</name><operator pos:start="128:43" pos:end="128:43">.</operator><name pos:start="128:44" pos:end="128:46">get</name></name><argument_list pos:start="128:47" pos:end="128:48">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="128:50" pos:end="130:9">{<block_content pos:start="129:13" pos:end="129:70">
            <expr_stmt pos:start="129:13" pos:end="129:70"><expr pos:start="129:13" pos:end="129:69"><call pos:start="129:13" pos:end="129:69"><name pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:21">riverBank</name><operator pos:start="129:22" pos:end="129:22">.</operator><name pos:start="129:23" pos:end="129:25">add</name></name><argument_list pos:start="129:26" pos:end="129:69">(<argument pos:start="129:27" pos:end="129:68"><expr pos:start="129:27" pos:end="129:68"><call pos:start="129:27" pos:end="129:68"><name pos:start="129:27" pos:end="129:49"><name pos:start="129:27" pos:end="129:34">Geometry</name><operator pos:start="129:35" pos:end="129:35">.</operator><name pos:start="129:36" pos:end="129:49">gpsToCartesian</name></name><argument_list pos:start="129:50" pos:end="129:68">(<argument pos:start="129:51" pos:end="129:55"><expr pos:start="129:51" pos:end="129:55"><name pos:start="129:51" pos:end="129:55">entry</name></expr></argument>,<argument pos:start="129:57" pos:end="129:67"><expr pos:start="129:57" pos:end="129:67"><name pos:start="129:57" pos:end="129:67">avgLatitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return pos:start="131:9" pos:end="131:25">return <expr pos:start="131:16" pos:end="131:24"><name pos:start="131:16" pos:end="131:24">riverBank</name></expr>;</return>
    </block_content>}</block></function>
    
    
    <comment type="block" format="javadoc" pos:start="135:5" pos:end="140:7">/**
     * This function converts the riverbank nodes from cartesian coordinates to gps coordinates.
     * @param avgLatitude
     * @param cartesianBank
     * @return RiverBank in gps coordinates
     */</comment>
    <function pos:start="141:5" pos:end="147:5"><type pos:start="141:5" pos:end="141:27"><specifier pos:start="141:5" pos:end="141:10">public</specifier> <specifier pos:start="141:12" pos:end="141:17">static</specifier> <name pos:start="141:19" pos:end="141:27">RiverBank</name></type> <name pos:start="141:29" pos:end="141:60">cartesianRiverBankToGpsRiverBank</name><parameter_list pos:start="141:61" pos:end="141:105">(<parameter pos:start="141:62" pos:end="141:79"><decl pos:start="141:62" pos:end="141:79"><type pos:start="141:62" pos:end="141:79"><name pos:start="141:62" pos:end="141:67">double</name></type> <name pos:start="141:69" pos:end="141:79">avgLatitude</name></decl></parameter>, <parameter pos:start="141:82" pos:end="141:104"><decl pos:start="141:82" pos:end="141:104"><type pos:start="141:82" pos:end="141:104"><name pos:start="141:82" pos:end="141:90">RiverBank</name></type> <name pos:start="141:92" pos:end="141:104">cartesianBank</name></decl></parameter>)</parameter_list> <block pos:start="141:107" pos:end="147:5">{<block_content pos:start="142:9" pos:end="146:25">
    	<decl_stmt pos:start="142:9" pos:end="142:46"><decl pos:start="142:9" pos:end="142:45"><type pos:start="142:9" pos:end="142:17"><name pos:start="142:9" pos:end="142:17">RiverBank</name></type> <name pos:start="142:19" pos:end="142:27">riverBank</name> <init pos:start="142:29" pos:end="142:45">= <expr pos:start="142:31" pos:end="142:45"><operator pos:start="142:31" pos:end="142:33">new</operator> <call pos:start="142:35" pos:end="142:45"><name pos:start="142:35" pos:end="142:43">RiverBank</name><argument_list pos:start="142:44" pos:end="142:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    	<for pos:start="143:9" pos:end="145:9">for<control pos:start="143:12" pos:end="143:55">(<init pos:start="143:13" pos:end="143:54"><decl pos:start="143:13" pos:end="143:54"><type pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:19">Point2D</name><operator pos:start="143:20" pos:end="143:20">.</operator><name pos:start="143:21" pos:end="143:26">Double</name></name></type> <name pos:start="143:28" pos:end="143:32">entry</name> <range pos:start="143:34" pos:end="143:54">: <expr pos:start="143:36" pos:end="143:54"><call pos:start="143:36" pos:end="143:54"><name pos:start="143:36" pos:end="143:52"><name pos:start="143:36" pos:end="143:48">cartesianBank</name><operator pos:start="143:49" pos:end="143:49">.</operator><name pos:start="143:50" pos:end="143:52">get</name></name><argument_list pos:start="143:53" pos:end="143:54">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="143:56" pos:end="145:9">{<block_content pos:start="144:13" pos:end="144:70">
            <expr_stmt pos:start="144:13" pos:end="144:70"><expr pos:start="144:13" pos:end="144:69"><call pos:start="144:13" pos:end="144:69"><name pos:start="144:13" pos:end="144:25"><name pos:start="144:13" pos:end="144:21">riverBank</name><operator pos:start="144:22" pos:end="144:22">.</operator><name pos:start="144:23" pos:end="144:25">add</name></name><argument_list pos:start="144:26" pos:end="144:69">(<argument pos:start="144:27" pos:end="144:68"><expr pos:start="144:27" pos:end="144:68"><call pos:start="144:27" pos:end="144:68"><name pos:start="144:27" pos:end="144:49"><name pos:start="144:27" pos:end="144:34">Geometry</name><operator pos:start="144:35" pos:end="144:35">.</operator><name pos:start="144:36" pos:end="144:49">cartesianToGPS</name></name><argument_list pos:start="144:50" pos:end="144:68">(<argument pos:start="144:51" pos:end="144:55"><expr pos:start="144:51" pos:end="144:55"><name pos:start="144:51" pos:end="144:55">entry</name></expr></argument>,<argument pos:start="144:57" pos:end="144:67"><expr pos:start="144:57" pos:end="144:67"><name pos:start="144:57" pos:end="144:67">avgLatitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return pos:start="146:9" pos:end="146:25">return <expr pos:start="146:16" pos:end="146:24"><name pos:start="146:16" pos:end="146:24">riverBank</name></expr>;</return>
    </block_content>}</block></function>
    
    
    <comment type="block" format="javadoc" pos:start="150:5" pos:end="155:7">/**
     * This function converts the route primitive to cartesian coordinates from gps coordinates.
     * @param l
     * @param avgLatitude
     * @return RoutePrimitive in cartesian coordinates
     */</comment>
    <function pos:start="156:5" pos:end="161:5"><type pos:start="156:5" pos:end="156:32"><specifier pos:start="156:5" pos:end="156:10">public</specifier> <specifier pos:start="156:12" pos:end="156:17">static</specifier> <name pos:start="156:19" pos:end="156:32">RoutePrimitive</name></type> <name pos:start="156:34" pos:end="156:57">gpsRouteToCartesianRoute</name><parameter_list pos:start="156:58" pos:end="156:95">(<parameter pos:start="156:59" pos:end="156:74"><decl pos:start="156:59" pos:end="156:74"><type pos:start="156:59" pos:end="156:74"><name pos:start="156:59" pos:end="156:72">RoutePrimitive</name></type> <name pos:start="156:74" pos:end="156:74">l</name></decl></parameter>, <parameter pos:start="156:77" pos:end="156:94"><decl pos:start="156:77" pos:end="156:94"><type pos:start="156:77" pos:end="156:94"><name pos:start="156:77" pos:end="156:82">double</name></type> <name pos:start="156:84" pos:end="156:94">avgLatitude</name></decl></parameter>)</parameter_list> <block pos:start="156:97" pos:end="161:5">{<block_content pos:start="157:9" pos:end="160:17">
    	<for pos:start="157:9" pos:end="159:9">for<control pos:start="157:12" pos:end="157:41">(<init pos:start="157:13" pos:end="157:22"><decl pos:start="157:13" pos:end="157:21"><type pos:start="157:13" pos:end="157:15"><name pos:start="157:13" pos:end="157:15">int</name></type> <name pos:start="157:17" pos:end="157:17">i</name> <init pos:start="157:19" pos:end="157:21">= <expr pos:start="157:21" pos:end="157:21"><literal type="number" pos:start="157:21" pos:end="157:21">0</literal></expr></init></decl>;</init> <condition pos:start="157:24" pos:end="157:36"><expr pos:start="157:24" pos:end="157:35"><name pos:start="157:24" pos:end="157:24">i</name> <operator pos:start="157:26" pos:end="157:26">&lt;</operator> <call pos:start="157:28" pos:end="157:35"><name pos:start="157:28" pos:end="157:33"><name pos:start="157:28" pos:end="157:28">l</name><operator pos:start="157:29" pos:end="157:29">.</operator><name pos:start="157:30" pos:end="157:33">size</name></name><argument_list pos:start="157:34" pos:end="157:35">()</argument_list></call></expr>;</condition> <incr pos:start="157:38" pos:end="157:40"><expr pos:start="157:38" pos:end="157:40"><name pos:start="157:38" pos:end="157:38">i</name><operator pos:start="157:39" pos:end="157:40">++</operator></expr></incr>)</control> <block pos:start="157:43" pos:end="159:9">{<block_content pos:start="158:17" pos:end="158:97">
    		<expr_stmt pos:start="158:17" pos:end="158:97"><expr pos:start="158:17" pos:end="158:96"><call pos:start="158:17" pos:end="158:96"><name pos:start="158:17" pos:end="158:34"><name pos:start="158:17" pos:end="158:17">l</name><operator pos:start="158:18" pos:end="158:18">.</operator><name pos:start="158:19" pos:end="158:34">setRouteWaypoint</name></name><argument_list pos:start="158:35" pos:end="158:96">(<argument pos:start="158:36" pos:end="158:36"><expr pos:start="158:36" pos:end="158:36"><name pos:start="158:36" pos:end="158:36">i</name></expr></argument>,<argument pos:start="158:38" pos:end="158:95"><expr pos:start="158:38" pos:end="158:95"><call pos:start="158:38" pos:end="158:95"><name pos:start="158:38" pos:end="158:60"><name pos:start="158:38" pos:end="158:45">Geometry</name><operator pos:start="158:46" pos:end="158:46">.</operator><name pos:start="158:47" pos:end="158:60">gpsToCartesian</name></name><argument_list pos:start="158:61" pos:end="158:95">(<argument pos:start="158:62" pos:end="158:82"><expr pos:start="158:62" pos:end="158:82"><call pos:start="158:62" pos:end="158:82"><name pos:start="158:62" pos:end="158:79"><name pos:start="158:62" pos:end="158:62">l</name><operator pos:start="158:63" pos:end="158:63">.</operator><name pos:start="158:64" pos:end="158:79">getRouteWaypoint</name></name><argument_list pos:start="158:80" pos:end="158:82">(<argument pos:start="158:81" pos:end="158:81"><expr pos:start="158:81" pos:end="158:81"><name pos:start="158:81" pos:end="158:81">i</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="158:84" pos:end="158:94"><expr pos:start="158:84" pos:end="158:94"><name pos:start="158:84" pos:end="158:94">avgLatitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<return pos:start="160:9" pos:end="160:17">return <expr pos:start="160:16" pos:end="160:16"><name pos:start="160:16" pos:end="160:16">l</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="163:5" pos:end="167:7">/**
     * This function convertes the route primitive to gps coordinates from cartesian coordinates.
     * @param l
     * @return RoutePrimitive in gps coordinates
     */</comment>
    <function pos:start="168:5" pos:end="173:5"><type pos:start="168:5" pos:end="168:32"><specifier pos:start="168:5" pos:end="168:10">public</specifier> <specifier pos:start="168:12" pos:end="168:17">static</specifier> <name pos:start="168:19" pos:end="168:32">RoutePrimitive</name></type> <name pos:start="168:34" pos:end="168:57">cartesianRouteToGpsRoute</name><parameter_list pos:start="168:58" pos:end="168:95">(<parameter pos:start="168:59" pos:end="168:74"><decl pos:start="168:59" pos:end="168:74"><type pos:start="168:59" pos:end="168:74"><name pos:start="168:59" pos:end="168:72">RoutePrimitive</name></type> <name pos:start="168:74" pos:end="168:74">l</name></decl></parameter>, <parameter pos:start="168:77" pos:end="168:94"><decl pos:start="168:77" pos:end="168:94"><type pos:start="168:77" pos:end="168:94"><name pos:start="168:77" pos:end="168:82">double</name></type> <name pos:start="168:84" pos:end="168:94">avgLatitude</name></decl></parameter>)</parameter_list><block pos:start="168:96" pos:end="173:5">{<block_content pos:start="169:9" pos:end="172:17">
        <for pos:start="169:9" pos:end="171:9">for<control pos:start="169:12" pos:end="169:41">(<init pos:start="169:13" pos:end="169:22"><decl pos:start="169:13" pos:end="169:21"><type pos:start="169:13" pos:end="169:15"><name pos:start="169:13" pos:end="169:15">int</name></type> <name pos:start="169:17" pos:end="169:17">i</name> <init pos:start="169:19" pos:end="169:21">= <expr pos:start="169:21" pos:end="169:21"><literal type="number" pos:start="169:21" pos:end="169:21">0</literal></expr></init></decl>;</init> <condition pos:start="169:24" pos:end="169:36"><expr pos:start="169:24" pos:end="169:35"><name pos:start="169:24" pos:end="169:24">i</name> <operator pos:start="169:26" pos:end="169:26">&lt;</operator> <call pos:start="169:28" pos:end="169:35"><name pos:start="169:28" pos:end="169:33"><name pos:start="169:28" pos:end="169:28">l</name><operator pos:start="169:29" pos:end="169:29">.</operator><name pos:start="169:30" pos:end="169:33">size</name></name><argument_list pos:start="169:34" pos:end="169:35">()</argument_list></call></expr>;</condition> <incr pos:start="169:38" pos:end="169:40"><expr pos:start="169:38" pos:end="169:40"><name pos:start="169:38" pos:end="169:38">i</name><operator pos:start="169:39" pos:end="169:40">++</operator></expr></incr>)</control><block pos:start="169:42" pos:end="171:9">{<block_content pos:start="170:13" pos:end="170:93">
            <expr_stmt pos:start="170:13" pos:end="170:93"><expr pos:start="170:13" pos:end="170:92"><call pos:start="170:13" pos:end="170:92"><name pos:start="170:13" pos:end="170:30"><name pos:start="170:13" pos:end="170:13">l</name><operator pos:start="170:14" pos:end="170:14">.</operator><name pos:start="170:15" pos:end="170:30">setRouteWaypoint</name></name><argument_list pos:start="170:31" pos:end="170:92">(<argument pos:start="170:32" pos:end="170:32"><expr pos:start="170:32" pos:end="170:32"><name pos:start="170:32" pos:end="170:32">i</name></expr></argument>,<argument pos:start="170:34" pos:end="170:91"><expr pos:start="170:34" pos:end="170:91"><call pos:start="170:34" pos:end="170:91"><name pos:start="170:34" pos:end="170:56"><name pos:start="170:34" pos:end="170:41">Geometry</name><operator pos:start="170:42" pos:end="170:42">.</operator><name pos:start="170:43" pos:end="170:56">cartesianToGPS</name></name><argument_list pos:start="170:57" pos:end="170:91">(<argument pos:start="170:58" pos:end="170:78"><expr pos:start="170:58" pos:end="170:78"><call pos:start="170:58" pos:end="170:78"><name pos:start="170:58" pos:end="170:75"><name pos:start="170:58" pos:end="170:58">l</name><operator pos:start="170:59" pos:end="170:59">.</operator><name pos:start="170:60" pos:end="170:75">getRouteWaypoint</name></name><argument_list pos:start="170:76" pos:end="170:78">(<argument pos:start="170:77" pos:end="170:77"><expr pos:start="170:77" pos:end="170:77"><name pos:start="170:77" pos:end="170:77">i</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="170:80" pos:end="170:90"><expr pos:start="170:80" pos:end="170:90"><name pos:start="170:80" pos:end="170:90">avgLatitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return pos:start="172:9" pos:end="172:17">return <expr pos:start="172:16" pos:end="172:16"><name pos:start="172:16" pos:end="172:16">l</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="175:5" pos:end="178:7">/**
     * This function verifies the input order of the nodes from the JSON file to ensure that they are in the expected
     * order. It transforms them to the expected form if necessary.
     */</comment>
    
    <comment type="block" format="javadoc" pos:start="180:5" pos:end="184:7">/**
     * This function takes the RiverBanks created from the JSON file to make sure that they are in the necessary order.
     * @param gpsBank1
     * @param gpsBank2
     */</comment>
    <function pos:start="185:5" pos:end="195:5"><type pos:start="185:5" pos:end="185:22"><specifier pos:start="185:5" pos:end="185:10">public</specifier> <specifier pos:start="185:12" pos:end="185:17">static</specifier> <name pos:start="185:19" pos:end="185:22">void</name></type> <name pos:start="185:24" pos:end="185:39">verifyInputOrder</name><parameter_list pos:start="185:40" pos:end="185:79">(<parameter pos:start="185:41" pos:end="185:58"><decl pos:start="185:41" pos:end="185:58"><type pos:start="185:41" pos:end="185:58"><name pos:start="185:41" pos:end="185:49">RiverBank</name></type> <name pos:start="185:51" pos:end="185:58">gpsBank1</name></decl></parameter>, <parameter pos:start="185:61" pos:end="185:78"><decl pos:start="185:61" pos:end="185:78"><type pos:start="185:61" pos:end="185:78"><name pos:start="185:61" pos:end="185:69">RiverBank</name></type> <name pos:start="185:71" pos:end="185:78">gpsBank2</name></decl></parameter>)</parameter_list><block pos:start="185:80" pos:end="195:5">{<block_content pos:start="186:9" pos:end="194:9">
        <decl_stmt pos:start="186:9" pos:end="186:48"><decl pos:start="186:9" pos:end="186:47"><type pos:start="186:9" pos:end="186:22"><name pos:start="186:9" pos:end="186:22"><name pos:start="186:9" pos:end="186:15">Point2D</name><operator pos:start="186:16" pos:end="186:16">.</operator><name pos:start="186:17" pos:end="186:22">Double</name></name></type> <name pos:start="186:24" pos:end="186:29">start1</name> <init pos:start="186:31" pos:end="186:47">= <expr pos:start="186:33" pos:end="186:47"><call pos:start="186:33" pos:end="186:47"><name pos:start="186:33" pos:end="186:44"><name pos:start="186:33" pos:end="186:40">gpsBank1</name><operator pos:start="186:41" pos:end="186:41">.</operator><name pos:start="186:42" pos:end="186:44">get</name></name><argument_list pos:start="186:45" pos:end="186:47">(<argument pos:start="186:46" pos:end="186:46"><expr pos:start="186:46" pos:end="186:46"><literal type="number" pos:start="186:46" pos:end="186:46">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="187:9" pos:end="187:62"><decl pos:start="187:9" pos:end="187:61"><type pos:start="187:9" pos:end="187:22"><name pos:start="187:9" pos:end="187:22"><name pos:start="187:9" pos:end="187:15">Point2D</name><operator pos:start="187:16" pos:end="187:16">.</operator><name pos:start="187:17" pos:end="187:22">Double</name></name></type> <name pos:start="187:24" pos:end="187:27">end1</name> <init pos:start="187:29" pos:end="187:61">= <expr pos:start="187:31" pos:end="187:61"><call pos:start="187:31" pos:end="187:61"><name pos:start="187:31" pos:end="187:42"><name pos:start="187:31" pos:end="187:38">gpsBank1</name><operator pos:start="187:39" pos:end="187:39">.</operator><name pos:start="187:40" pos:end="187:42">get</name></name><argument_list pos:start="187:43" pos:end="187:61">(<argument pos:start="187:44" pos:end="187:60"><expr pos:start="187:44" pos:end="187:60"><call pos:start="187:44" pos:end="187:58"><name pos:start="187:44" pos:end="187:56"><name pos:start="187:44" pos:end="187:51">gpsBank1</name><operator pos:start="187:52" pos:end="187:52">.</operator><name pos:start="187:53" pos:end="187:56">size</name></name><argument_list pos:start="187:57" pos:end="187:58">()</argument_list></call><operator pos:start="187:59" pos:end="187:59">-</operator><literal type="number" pos:start="187:60" pos:end="187:60">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="188:9" pos:end="188:48"><decl pos:start="188:9" pos:end="188:47"><type pos:start="188:9" pos:end="188:22"><name pos:start="188:9" pos:end="188:22"><name pos:start="188:9" pos:end="188:15">Point2D</name><operator pos:start="188:16" pos:end="188:16">.</operator><name pos:start="188:17" pos:end="188:22">Double</name></name></type> <name pos:start="188:24" pos:end="188:29">start2</name> <init pos:start="188:31" pos:end="188:47">= <expr pos:start="188:33" pos:end="188:47"><call pos:start="188:33" pos:end="188:47"><name pos:start="188:33" pos:end="188:44"><name pos:start="188:33" pos:end="188:40">gpsBank2</name><operator pos:start="188:41" pos:end="188:41">.</operator><name pos:start="188:42" pos:end="188:44">get</name></name><argument_list pos:start="188:45" pos:end="188:47">(<argument pos:start="188:46" pos:end="188:46"><expr pos:start="188:46" pos:end="188:46"><literal type="number" pos:start="188:46" pos:end="188:46">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="189:9" pos:end="189:62"><decl pos:start="189:9" pos:end="189:61"><type pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:15">Point2D</name><operator pos:start="189:16" pos:end="189:16">.</operator><name pos:start="189:17" pos:end="189:22">Double</name></name></type> <name pos:start="189:24" pos:end="189:27">end2</name> <init pos:start="189:29" pos:end="189:61">= <expr pos:start="189:31" pos:end="189:61"><call pos:start="189:31" pos:end="189:61"><name pos:start="189:31" pos:end="189:42"><name pos:start="189:31" pos:end="189:38">gpsBank2</name><operator pos:start="189:39" pos:end="189:39">.</operator><name pos:start="189:40" pos:end="189:42">get</name></name><argument_list pos:start="189:43" pos:end="189:61">(<argument pos:start="189:44" pos:end="189:60"><expr pos:start="189:44" pos:end="189:60"><call pos:start="189:44" pos:end="189:58"><name pos:start="189:44" pos:end="189:56"><name pos:start="189:44" pos:end="189:51">gpsBank2</name><operator pos:start="189:52" pos:end="189:52">.</operator><name pos:start="189:53" pos:end="189:56">size</name></name><argument_list pos:start="189:57" pos:end="189:58">()</argument_list></call><operator pos:start="189:59" pos:end="189:59">-</operator><literal type="number" pos:start="189:60" pos:end="189:60">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="190:9" pos:end="190:156"><decl pos:start="190:9" pos:end="190:155"><type pos:start="190:9" pos:end="190:15"><name pos:start="190:9" pos:end="190:15">boolean</name></type> <name pos:start="190:17" pos:end="190:25">intersect</name> <init pos:start="190:27" pos:end="190:155">= <expr pos:start="190:29" pos:end="190:155"><call pos:start="190:29" pos:end="190:155"><name pos:start="190:29" pos:end="190:49"><name pos:start="190:29" pos:end="190:34">Line2D</name><operator pos:start="190:35" pos:end="190:35">.</operator><name pos:start="190:36" pos:end="190:49">linesIntersect</name></name><argument_list pos:start="190:50" pos:end="190:155">(<argument pos:start="190:51" pos:end="190:63"><expr pos:start="190:51" pos:end="190:63"><call pos:start="190:51" pos:end="190:63"><name pos:start="190:51" pos:end="190:61"><name pos:start="190:51" pos:end="190:56">start1</name><operator pos:start="190:57" pos:end="190:57">.</operator><name pos:start="190:58" pos:end="190:61">getX</name></name><argument_list pos:start="190:62" pos:end="190:63">()</argument_list></call></expr></argument>,<argument pos:start="190:65" pos:end="190:77"><expr pos:start="190:65" pos:end="190:77"><call pos:start="190:65" pos:end="190:77"><name pos:start="190:65" pos:end="190:75"><name pos:start="190:65" pos:end="190:70">start1</name><operator pos:start="190:71" pos:end="190:71">.</operator><name pos:start="190:72" pos:end="190:75">getY</name></name><argument_list pos:start="190:76" pos:end="190:77">()</argument_list></call></expr></argument>,<argument pos:start="190:79" pos:end="190:91"><expr pos:start="190:79" pos:end="190:91"><call pos:start="190:79" pos:end="190:91"><name pos:start="190:79" pos:end="190:89"><name pos:start="190:79" pos:end="190:84">start2</name><operator pos:start="190:85" pos:end="190:85">.</operator><name pos:start="190:86" pos:end="190:89">getX</name></name><argument_list pos:start="190:90" pos:end="190:91">()</argument_list></call></expr></argument>, <argument pos:start="190:94" pos:end="190:106"><expr pos:start="190:94" pos:end="190:106"><call pos:start="190:94" pos:end="190:106"><name pos:start="190:94" pos:end="190:104"><name pos:start="190:94" pos:end="190:99">start2</name><operator pos:start="190:100" pos:end="190:100">.</operator><name pos:start="190:101" pos:end="190:104">getY</name></name><argument_list pos:start="190:105" pos:end="190:106">()</argument_list></call></expr></argument>,<argument pos:start="190:108" pos:end="190:118"><expr pos:start="190:108" pos:end="190:118"><call pos:start="190:108" pos:end="190:118"><name pos:start="190:108" pos:end="190:116"><name pos:start="190:108" pos:end="190:111">end1</name><operator pos:start="190:112" pos:end="190:112">.</operator><name pos:start="190:113" pos:end="190:116">getX</name></name><argument_list pos:start="190:117" pos:end="190:118">()</argument_list></call></expr></argument>,<argument pos:start="190:120" pos:end="190:130"><expr pos:start="190:120" pos:end="190:130"><call pos:start="190:120" pos:end="190:130"><name pos:start="190:120" pos:end="190:128"><name pos:start="190:120" pos:end="190:123">end1</name><operator pos:start="190:124" pos:end="190:124">.</operator><name pos:start="190:125" pos:end="190:128">getY</name></name><argument_list pos:start="190:129" pos:end="190:130">()</argument_list></call></expr></argument>,<argument pos:start="190:132" pos:end="190:142"><expr pos:start="190:132" pos:end="190:142"><call pos:start="190:132" pos:end="190:142"><name pos:start="190:132" pos:end="190:140"><name pos:start="190:132" pos:end="190:135">end2</name><operator pos:start="190:136" pos:end="190:136">.</operator><name pos:start="190:137" pos:end="190:140">getX</name></name><argument_list pos:start="190:141" pos:end="190:142">()</argument_list></call></expr></argument>,<argument pos:start="190:144" pos:end="190:154"><expr pos:start="190:144" pos:end="190:154"><call pos:start="190:144" pos:end="190:154"><name pos:start="190:144" pos:end="190:152"><name pos:start="190:144" pos:end="190:147">end2</name><operator pos:start="190:148" pos:end="190:148">.</operator><name pos:start="190:149" pos:end="190:152">getY</name></name><argument_list pos:start="190:153" pos:end="190:154">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="191:9" pos:end="194:9"><if pos:start="191:9" pos:end="194:9">if<condition pos:start="191:11" pos:end="191:21">(<expr pos:start="191:12" pos:end="191:20"><name pos:start="191:12" pos:end="191:20">intersect</name></expr>)</condition><block pos:start="191:22" pos:end="194:9">{<block_content pos:start="192:17" pos:end="193:31">
        	<expr_stmt pos:start="192:17" pos:end="192:53"><expr pos:start="192:17" pos:end="192:52"><call pos:start="192:17" pos:end="192:52"><name pos:start="192:17" pos:end="192:34"><name pos:start="192:17" pos:end="192:22">System</name><operator pos:start="192:23" pos:end="192:23">.</operator><name pos:start="192:24" pos:end="192:26">out</name><operator pos:start="192:27" pos:end="192:27">.</operator><name pos:start="192:28" pos:end="192:34">println</name></name><argument_list pos:start="192:35" pos:end="192:52">(<argument pos:start="192:36" pos:end="192:51"><expr pos:start="192:36" pos:end="192:51"><literal type="string" pos:start="192:36" pos:end="192:51">"bank2 reversed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="193:13" pos:end="193:31"><expr pos:start="193:13" pos:end="193:30"><call pos:start="193:13" pos:end="193:30"><name pos:start="193:13" pos:end="193:28"><name pos:start="193:13" pos:end="193:20">gpsBank2</name><operator pos:start="193:21" pos:end="193:21">.</operator><name pos:start="193:22" pos:end="193:28">reverse</name></name><argument_list pos:start="193:29" pos:end="193:30">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="197:5" pos:end="202:7">/**
     * This function splits up the riverbank nodes into sections for each drone to search and returns a vector of lists
     * of vectors. Each list corresponds to the segment one drone will search, and each vector in the list
     * corresonds to a bank of the river.
     * @return a vector of lists corresponding to the section each drone will search
     */</comment>
    
    <comment type="line" pos:start="204:5" pos:end="204:51">//note: don't really need this function anymore</comment>
    <function pos:start="205:5" pos:end="235:5"><type pos:start="205:5" pos:end="205:41"><specifier pos:start="205:5" pos:end="205:10">public</specifier> <specifier pos:start="205:12" pos:end="205:17">static</specifier> <name pos:start="205:19" pos:end="205:41"><name pos:start="205:19" pos:end="205:24">Vector</name><argument_list type="generic" pos:start="205:25" pos:end="205:41">&lt;<argument pos:start="205:26" pos:end="205:40"><name pos:start="205:26" pos:end="205:40">RiverSubsegment</name></argument>&gt;</argument_list></name></type> <name pos:start="205:43" pos:end="205:58">makeRiverVectors</name><parameter_list pos:start="205:59" pos:end="205:140">(<parameter pos:start="205:60" pos:end="205:83"><decl pos:start="205:60" pos:end="205:83"><type pos:start="205:60" pos:end="205:83"><name pos:start="205:60" pos:end="205:74"><name pos:start="205:60" pos:end="205:63">List</name><argument_list type="generic" pos:start="205:64" pos:end="205:74">&lt;<argument pos:start="205:65" pos:end="205:73"><name pos:start="205:65" pos:end="205:73">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="205:76" pos:end="205:83">bankList</name></decl></parameter>, <parameter pos:start="205:86" pos:end="205:95"><decl pos:start="205:86" pos:end="205:95"><type pos:start="205:86" pos:end="205:95"><name pos:start="205:86" pos:end="205:88">int</name></type> <name pos:start="205:90" pos:end="205:95">drones</name></decl></parameter>, <parameter pos:start="205:98" pos:end="205:117"><decl pos:start="205:98" pos:end="205:117"><type pos:start="205:98" pos:end="205:117"><name pos:start="205:98" pos:end="205:100">int</name></type> <name pos:start="205:102" pos:end="205:117">bank1SegmentSize</name></decl></parameter>, <parameter pos:start="205:120" pos:end="205:139"><decl pos:start="205:120" pos:end="205:139"><type pos:start="205:120" pos:end="205:139"><name pos:start="205:120" pos:end="205:122">int</name></type> <name pos:start="205:124" pos:end="205:139">bank2SegmentSize</name></decl></parameter>)</parameter_list><block pos:start="205:141" pos:end="235:5">{<block_content pos:start="206:9" pos:end="234:28">
        <decl_stmt pos:start="206:9" pos:end="206:47"><decl pos:start="206:9" pos:end="206:46"><type pos:start="206:9" pos:end="206:17"><name pos:start="206:9" pos:end="206:17">RiverBank</name></type> <name pos:start="206:19" pos:end="206:28">riverBank1</name> <init pos:start="206:30" pos:end="206:46">= <expr pos:start="206:32" pos:end="206:46"><call pos:start="206:32" pos:end="206:46"><name pos:start="206:32" pos:end="206:43"><name pos:start="206:32" pos:end="206:39">bankList</name><operator pos:start="206:40" pos:end="206:40">.</operator><name pos:start="206:41" pos:end="206:43">get</name></name><argument_list pos:start="206:44" pos:end="206:46">(<argument pos:start="206:45" pos:end="206:45"><expr pos:start="206:45" pos:end="206:45"><literal type="number" pos:start="206:45" pos:end="206:45">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="207:9" pos:end="207:47"><decl pos:start="207:9" pos:end="207:46"><type pos:start="207:9" pos:end="207:17"><name pos:start="207:9" pos:end="207:17">RiverBank</name></type> <name pos:start="207:19" pos:end="207:28">riverBank2</name> <init pos:start="207:30" pos:end="207:46">= <expr pos:start="207:32" pos:end="207:46"><call pos:start="207:32" pos:end="207:46"><name pos:start="207:32" pos:end="207:43"><name pos:start="207:32" pos:end="207:39">bankList</name><operator pos:start="207:40" pos:end="207:40">.</operator><name pos:start="207:41" pos:end="207:43">get</name></name><argument_list pos:start="207:44" pos:end="207:46">(<argument pos:start="207:45" pos:end="207:45"><expr pos:start="207:45" pos:end="207:45"><literal type="number" pos:start="207:45" pos:end="207:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="208:9" pos:end="208:77"><decl pos:start="208:9" pos:end="208:76"><type pos:start="208:9" pos:end="208:31"><name pos:start="208:9" pos:end="208:31"><name pos:start="208:9" pos:end="208:14">Vector</name><argument_list type="generic" pos:start="208:15" pos:end="208:31">&lt;<argument pos:start="208:16" pos:end="208:30"><name pos:start="208:16" pos:end="208:30">RiverSubsegment</name></argument>&gt;</argument_list></name></type> <name pos:start="208:33" pos:end="208:44">riverVectors</name> <init pos:start="208:46" pos:end="208:76">= <expr pos:start="208:48" pos:end="208:76"><operator pos:start="208:48" pos:end="208:50">new</operator> <call pos:start="208:52" pos:end="208:76"><name pos:start="208:52" pos:end="208:74"><name pos:start="208:52" pos:end="208:57">Vector</name><argument_list type="generic" pos:start="208:58" pos:end="208:74">&lt;<argument pos:start="208:59" pos:end="208:73"><name pos:start="208:59" pos:end="208:73">RiverSubsegment</name></argument>&gt;</argument_list></name><argument_list pos:start="208:75" pos:end="208:76">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="210:9" pos:end="210:25"><decl pos:start="210:9" pos:end="210:24"><type pos:start="210:9" pos:end="210:11"><name pos:start="210:9" pos:end="210:11">int</name></type> <name pos:start="210:13" pos:end="210:20">counter1</name> <init pos:start="210:22" pos:end="210:24">= <expr pos:start="210:24" pos:end="210:24"><literal type="number" pos:start="210:24" pos:end="210:24">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="211:9" pos:end="211:25"><decl pos:start="211:9" pos:end="211:24"><type pos:start="211:9" pos:end="211:11"><name pos:start="211:9" pos:end="211:11">int</name></type> <name pos:start="211:13" pos:end="211:20">counter2</name> <init pos:start="211:22" pos:end="211:24">= <expr pos:start="211:24" pos:end="211:24"><literal type="number" pos:start="211:24" pos:end="211:24">0</literal></expr></init></decl>;</decl_stmt>
        <for pos:start="212:9" pos:end="227:9">for<control pos:start="212:12" pos:end="212:41">(<init pos:start="212:13" pos:end="212:22"><decl pos:start="212:13" pos:end="212:21"><type pos:start="212:13" pos:end="212:15"><name pos:start="212:13" pos:end="212:15">int</name></type> <name pos:start="212:17" pos:end="212:17">i</name> <init pos:start="212:19" pos:end="212:21">= <expr pos:start="212:21" pos:end="212:21"><literal type="number" pos:start="212:21" pos:end="212:21">0</literal></expr></init></decl>;</init> <condition pos:start="212:24" pos:end="212:36"><expr pos:start="212:24" pos:end="212:35"><name pos:start="212:24" pos:end="212:24">i</name> <operator pos:start="212:26" pos:end="212:26">&lt;</operator> <name pos:start="212:28" pos:end="212:33">drones</name><operator pos:start="212:34" pos:end="212:34">-</operator><literal type="number" pos:start="212:35" pos:end="212:35">1</literal></expr>;</condition> <incr pos:start="212:38" pos:end="212:40"><expr pos:start="212:38" pos:end="212:40"><name pos:start="212:38" pos:end="212:38">i</name><operator pos:start="212:39" pos:end="212:40">++</operator></expr></incr>)</control><block pos:start="212:42" pos:end="227:9">{<block_content pos:start="213:13" pos:end="226:43">
            <decl_stmt pos:start="213:13" pos:end="213:65"><decl pos:start="213:13" pos:end="213:64"><type pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:27">RiverSubsegment</name></type> <name pos:start="213:29" pos:end="213:40">riverSegment</name> <init pos:start="213:42" pos:end="213:64">= <expr pos:start="213:44" pos:end="213:64"><operator pos:start="213:44" pos:end="213:46">new</operator> <call pos:start="213:48" pos:end="213:64"><name pos:start="213:48" pos:end="213:62">RiverSubsegment</name><argument_list pos:start="213:63" pos:end="213:64">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="214:13" pos:end="214:46"><decl pos:start="214:13" pos:end="214:45"><type pos:start="214:13" pos:end="214:21"><name pos:start="214:13" pos:end="214:21">RiverBank</name></type> <name pos:start="214:23" pos:end="214:27">bank1</name> <init pos:start="214:29" pos:end="214:45">= <expr pos:start="214:31" pos:end="214:45"><operator pos:start="214:31" pos:end="214:33">new</operator> <call pos:start="214:35" pos:end="214:45"><name pos:start="214:35" pos:end="214:43">RiverBank</name><argument_list pos:start="214:44" pos:end="214:45">()</argument_list></call></expr></init></decl>;</decl_stmt>


            <expr_stmt pos:start="217:13" pos:end="217:68"><expr pos:start="217:13" pos:end="217:67"><call pos:start="217:13" pos:end="217:67"><name pos:start="217:13" pos:end="217:23">makeVector1</name><argument_list pos:start="217:24" pos:end="217:67">(<argument pos:start="217:25" pos:end="217:32"><expr pos:start="217:25" pos:end="217:32"><name pos:start="217:25" pos:end="217:32">counter1</name></expr></argument>,<argument pos:start="217:34" pos:end="217:38"><expr pos:start="217:34" pos:end="217:38"><name pos:start="217:34" pos:end="217:38">bank1</name></expr></argument>,<argument pos:start="217:40" pos:end="217:49"><expr pos:start="217:40" pos:end="217:49"><name pos:start="217:40" pos:end="217:49">riverBank1</name></expr></argument>,<argument pos:start="217:51" pos:end="217:66"><expr pos:start="217:51" pos:end="217:66"><name pos:start="217:51" pos:end="217:66">bank1SegmentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="218:13" pos:end="218:36"><expr pos:start="218:13" pos:end="218:35"><call pos:start="218:13" pos:end="218:35"><name pos:start="218:13" pos:end="218:28"><name pos:start="218:13" pos:end="218:24">riverSegment</name><operator pos:start="218:25" pos:end="218:25">.</operator><name pos:start="218:26" pos:end="218:28">add</name></name><argument_list pos:start="218:29" pos:end="218:35">(<argument pos:start="218:30" pos:end="218:34"><expr pos:start="218:30" pos:end="218:34"><name pos:start="218:30" pos:end="218:34">bank1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="219:13" pos:end="219:43"><expr pos:start="219:13" pos:end="219:42"><name pos:start="219:13" pos:end="219:20">counter1</name> <operator pos:start="219:22" pos:end="219:23">+=</operator> <name pos:start="219:25" pos:end="219:40">bank1SegmentSize</name><operator pos:start="219:41" pos:end="219:41">-</operator><literal type="number" pos:start="219:42" pos:end="219:42">1</literal></expr>;</expr_stmt>

            <decl_stmt pos:start="221:13" pos:end="221:46"><decl pos:start="221:13" pos:end="221:45"><type pos:start="221:13" pos:end="221:21"><name pos:start="221:13" pos:end="221:21">RiverBank</name></type> <name pos:start="221:23" pos:end="221:27">bank2</name> <init pos:start="221:29" pos:end="221:45">= <expr pos:start="221:31" pos:end="221:45"><operator pos:start="221:31" pos:end="221:33">new</operator> <call pos:start="221:35" pos:end="221:45"><name pos:start="221:35" pos:end="221:43">RiverBank</name><argument_list pos:start="221:44" pos:end="221:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="222:13" pos:end="222:68"><expr pos:start="222:13" pos:end="222:67"><call pos:start="222:13" pos:end="222:67"><name pos:start="222:13" pos:end="222:23">makeVector2</name><argument_list pos:start="222:24" pos:end="222:67">(<argument pos:start="222:25" pos:end="222:32"><expr pos:start="222:25" pos:end="222:32"><name pos:start="222:25" pos:end="222:32">counter2</name></expr></argument>,<argument pos:start="222:34" pos:end="222:38"><expr pos:start="222:34" pos:end="222:38"><name pos:start="222:34" pos:end="222:38">bank2</name></expr></argument>,<argument pos:start="222:40" pos:end="222:49"><expr pos:start="222:40" pos:end="222:49"><name pos:start="222:40" pos:end="222:49">riverBank2</name></expr></argument>,<argument pos:start="222:51" pos:end="222:66"><expr pos:start="222:51" pos:end="222:66"><name pos:start="222:51" pos:end="222:66">bank2SegmentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="223:13" pos:end="223:36"><expr pos:start="223:13" pos:end="223:35"><call pos:start="223:13" pos:end="223:35"><name pos:start="223:13" pos:end="223:28"><name pos:start="223:13" pos:end="223:24">riverSegment</name><operator pos:start="223:25" pos:end="223:25">.</operator><name pos:start="223:26" pos:end="223:28">add</name></name><argument_list pos:start="223:29" pos:end="223:35">(<argument pos:start="223:30" pos:end="223:34"><expr pos:start="223:30" pos:end="223:34"><name pos:start="223:30" pos:end="223:34">bank2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="224:13" pos:end="224:44"><expr pos:start="224:13" pos:end="224:43"><name pos:start="224:13" pos:end="224:20">counter2</name> <operator pos:start="224:22" pos:end="224:23">+=</operator> <name pos:start="224:25" pos:end="224:40">bank2SegmentSize</name> <operator pos:start="224:42" pos:end="224:42">-</operator><literal type="number" pos:start="224:43" pos:end="224:43">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="226:13" pos:end="226:43"><expr pos:start="226:13" pos:end="226:42"><call pos:start="226:13" pos:end="226:42"><name pos:start="226:13" pos:end="226:28"><name pos:start="226:13" pos:end="226:24">riverVectors</name><operator pos:start="226:25" pos:end="226:25">.</operator><name pos:start="226:26" pos:end="226:28">add</name></name><argument_list pos:start="226:29" pos:end="226:42">(<argument pos:start="226:30" pos:end="226:41"><expr pos:start="226:30" pos:end="226:41"><name pos:start="226:30" pos:end="226:41">riverSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt pos:start="228:9" pos:end="228:61"><decl pos:start="228:9" pos:end="228:60"><type pos:start="228:9" pos:end="228:23"><name pos:start="228:9" pos:end="228:23">RiverSubsegment</name></type> <name pos:start="228:25" pos:end="228:36">riverSegment</name> <init pos:start="228:38" pos:end="228:60">= <expr pos:start="228:40" pos:end="228:60"><operator pos:start="228:40" pos:end="228:42">new</operator> <call pos:start="228:44" pos:end="228:60"><name pos:start="228:44" pos:end="228:58">RiverSubsegment</name><argument_list pos:start="228:59" pos:end="228:60">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="229:9" pos:end="229:42"><decl pos:start="229:9" pos:end="229:41"><type pos:start="229:9" pos:end="229:17"><name pos:start="229:9" pos:end="229:17">RiverBank</name></type> <name pos:start="229:19" pos:end="229:23">bank1</name> <init pos:start="229:25" pos:end="229:41">= <expr pos:start="229:27" pos:end="229:41"><operator pos:start="229:27" pos:end="229:29">new</operator> <call pos:start="229:31" pos:end="229:41"><name pos:start="229:31" pos:end="229:39">RiverBank</name><argument_list pos:start="229:40" pos:end="229:41">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="230:9" pos:end="230:42"><decl pos:start="230:9" pos:end="230:41"><type pos:start="230:9" pos:end="230:17"><name pos:start="230:9" pos:end="230:17">RiverBank</name></type> <name pos:start="230:19" pos:end="230:23">bank2</name> <init pos:start="230:25" pos:end="230:41">= <expr pos:start="230:27" pos:end="230:41"><operator pos:start="230:27" pos:end="230:29">new</operator> <call pos:start="230:31" pos:end="230:41"><name pos:start="230:31" pos:end="230:39">RiverBank</name><argument_list pos:start="230:40" pos:end="230:41">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="231:9" pos:end="231:65"><expr pos:start="231:9" pos:end="231:64"><call pos:start="231:9" pos:end="231:64"><name pos:start="231:9" pos:end="231:24">makeFinalVectors</name><argument_list pos:start="231:25" pos:end="231:64">(<argument pos:start="231:26" pos:end="231:33"><expr pos:start="231:26" pos:end="231:33"><name pos:start="231:26" pos:end="231:33">counter1</name></expr></argument>,<argument pos:start="231:35" pos:end="231:46"><expr pos:start="231:35" pos:end="231:46"><name pos:start="231:35" pos:end="231:46">riverSegment</name></expr></argument>,<argument pos:start="231:48" pos:end="231:52"><expr pos:start="231:48" pos:end="231:52"><name pos:start="231:48" pos:end="231:52">bank1</name></expr></argument>,<argument pos:start="231:54" pos:end="231:63"><expr pos:start="231:54" pos:end="231:63"><name pos:start="231:54" pos:end="231:63">riverBank1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="232:9" pos:end="232:65"><expr pos:start="232:9" pos:end="232:64"><call pos:start="232:9" pos:end="232:64"><name pos:start="232:9" pos:end="232:24">makeFinalVectors</name><argument_list pos:start="232:25" pos:end="232:64">(<argument pos:start="232:26" pos:end="232:33"><expr pos:start="232:26" pos:end="232:33"><name pos:start="232:26" pos:end="232:33">counter2</name></expr></argument>,<argument pos:start="232:35" pos:end="232:46"><expr pos:start="232:35" pos:end="232:46"><name pos:start="232:35" pos:end="232:46">riverSegment</name></expr></argument>,<argument pos:start="232:48" pos:end="232:52"><expr pos:start="232:48" pos:end="232:52"><name pos:start="232:48" pos:end="232:52">bank2</name></expr></argument>,<argument pos:start="232:54" pos:end="232:63"><expr pos:start="232:54" pos:end="232:63"><name pos:start="232:54" pos:end="232:63">riverBank2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="233:9" pos:end="233:39"><expr pos:start="233:9" pos:end="233:38"><call pos:start="233:9" pos:end="233:38"><name pos:start="233:9" pos:end="233:24"><name pos:start="233:9" pos:end="233:20">riverVectors</name><operator pos:start="233:21" pos:end="233:21">.</operator><name pos:start="233:22" pos:end="233:24">add</name></name><argument_list pos:start="233:25" pos:end="233:38">(<argument pos:start="233:26" pos:end="233:37"><expr pos:start="233:26" pos:end="233:37"><name pos:start="233:26" pos:end="233:37">riverSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="234:9" pos:end="234:28">return <expr pos:start="234:16" pos:end="234:27"><name pos:start="234:16" pos:end="234:27">riverVectors</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="237:5" pos:end="242:7">/**
     * This function is a helper function for makeRiverVectors(). It forms the vectors of nodes for one bank
     * of the river except for the very last vector on that side.
     * @param counter1
     * @param bank1
     */</comment>
    <function pos:start="243:5" pos:end="247:5"><type pos:start="243:5" pos:end="243:23"><specifier pos:start="243:5" pos:end="243:11">private</specifier> <specifier pos:start="243:13" pos:end="243:18">static</specifier> <name pos:start="243:20" pos:end="243:23">void</name></type> <name pos:start="243:25" pos:end="243:35">makeVector1</name><parameter_list pos:start="243:36" pos:end="243:111">(<parameter pos:start="243:37" pos:end="243:48"><decl pos:start="243:37" pos:end="243:48"><type pos:start="243:37" pos:end="243:48"><name pos:start="243:37" pos:end="243:39">int</name></type> <name pos:start="243:41" pos:end="243:48">counter1</name></decl></parameter>,  <parameter pos:start="243:52" pos:end="243:66"><decl pos:start="243:52" pos:end="243:66"><type pos:start="243:52" pos:end="243:66"><name pos:start="243:52" pos:end="243:60">RiverBank</name></type> <name pos:start="243:62" pos:end="243:66">bank1</name></decl></parameter>, <parameter pos:start="243:69" pos:end="243:88"><decl pos:start="243:69" pos:end="243:88"><type pos:start="243:69" pos:end="243:88"><name pos:start="243:69" pos:end="243:77">RiverBank</name></type> <name pos:start="243:79" pos:end="243:88">riverBank1</name></decl></parameter>, <parameter pos:start="243:91" pos:end="243:110"><decl pos:start="243:91" pos:end="243:110"><type pos:start="243:91" pos:end="243:110"><name pos:start="243:91" pos:end="243:93">int</name></type> <name pos:start="243:95" pos:end="243:110">bank1SegmentSize</name></decl></parameter>)</parameter_list><block pos:start="243:112" pos:end="247:5">{<block_content pos:start="244:9" pos:end="246:9">
        <for pos:start="244:9" pos:end="246:9">for<control pos:start="244:12" pos:end="244:67">(<init pos:start="244:13" pos:end="244:29"><decl pos:start="244:13" pos:end="244:28"><type pos:start="244:13" pos:end="244:15"><name pos:start="244:13" pos:end="244:15">int</name></type> <name pos:start="244:17" pos:end="244:17">j</name> <init pos:start="244:19" pos:end="244:28">= <expr pos:start="244:21" pos:end="244:28"><name pos:start="244:21" pos:end="244:28">counter1</name></expr></init></decl>;</init> <condition pos:start="244:31" pos:end="244:62"><expr pos:start="244:31" pos:end="244:61"><name pos:start="244:31" pos:end="244:31">j</name> <operator pos:start="244:33" pos:end="244:33">&lt;</operator> <name pos:start="244:35" pos:end="244:42">counter1</name> <operator pos:start="244:44" pos:end="244:44">+</operator> <name pos:start="244:46" pos:end="244:61">bank1SegmentSize</name></expr>;</condition> <incr pos:start="244:64" pos:end="244:66"><expr pos:start="244:64" pos:end="244:66"><name pos:start="244:64" pos:end="244:64">j</name><operator pos:start="244:65" pos:end="244:66">++</operator></expr></incr>)</control><block pos:start="244:68" pos:end="246:9">{<block_content pos:start="245:13" pos:end="245:41">
            <expr_stmt pos:start="245:13" pos:end="245:41"><expr pos:start="245:13" pos:end="245:40"><call pos:start="245:13" pos:end="245:40"><name pos:start="245:13" pos:end="245:21"><name pos:start="245:13" pos:end="245:17">bank1</name><operator pos:start="245:18" pos:end="245:18">.</operator><name pos:start="245:19" pos:end="245:21">add</name></name><argument_list pos:start="245:22" pos:end="245:40">(<argument pos:start="245:23" pos:end="245:39"><expr pos:start="245:23" pos:end="245:39"><call pos:start="245:23" pos:end="245:39"><name pos:start="245:23" pos:end="245:36"><name pos:start="245:23" pos:end="245:32">riverBank1</name><operator pos:start="245:33" pos:end="245:33">.</operator><name pos:start="245:34" pos:end="245:36">get</name></name><argument_list pos:start="245:37" pos:end="245:39">(<argument pos:start="245:38" pos:end="245:38"><expr pos:start="245:38" pos:end="245:38"><name pos:start="245:38" pos:end="245:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="249:5" pos:end="254:7">/**
     * This function is a helper function for makeRiverVectors(). It forms the vectors of nodes for the other bank
     * of the river except for the last vector on this side.
     * @param counter2
     * @param bank2
     */</comment>
    <function pos:start="255:5" pos:end="259:5"><type pos:start="255:5" pos:end="255:23"><specifier pos:start="255:5" pos:end="255:11">private</specifier> <specifier pos:start="255:13" pos:end="255:18">static</specifier> <name pos:start="255:20" pos:end="255:23">void</name></type> <name pos:start="255:25" pos:end="255:35">makeVector2</name><parameter_list pos:start="255:36" pos:end="255:110">(<parameter pos:start="255:37" pos:end="255:48"><decl pos:start="255:37" pos:end="255:48"><type pos:start="255:37" pos:end="255:48"><name pos:start="255:37" pos:end="255:39">int</name></type> <name pos:start="255:41" pos:end="255:48">counter2</name></decl></parameter>, <parameter pos:start="255:51" pos:end="255:65"><decl pos:start="255:51" pos:end="255:65"><type pos:start="255:51" pos:end="255:65"><name pos:start="255:51" pos:end="255:59">RiverBank</name></type> <name pos:start="255:61" pos:end="255:65">bank2</name></decl></parameter>, <parameter pos:start="255:68" pos:end="255:87"><decl pos:start="255:68" pos:end="255:87"><type pos:start="255:68" pos:end="255:87"><name pos:start="255:68" pos:end="255:76">RiverBank</name></type> <name pos:start="255:78" pos:end="255:87">riverBank2</name></decl></parameter>, <parameter pos:start="255:90" pos:end="255:109"><decl pos:start="255:90" pos:end="255:109"><type pos:start="255:90" pos:end="255:109"><name pos:start="255:90" pos:end="255:92">int</name></type> <name pos:start="255:94" pos:end="255:109">bank2SegmentSize</name></decl></parameter>)</parameter_list><block pos:start="255:111" pos:end="259:5">{<block_content pos:start="256:9" pos:end="258:9">
        <for pos:start="256:9" pos:end="258:9">for<control pos:start="256:12" pos:end="256:67">(<init pos:start="256:13" pos:end="256:29"><decl pos:start="256:13" pos:end="256:28"><type pos:start="256:13" pos:end="256:15"><name pos:start="256:13" pos:end="256:15">int</name></type> <name pos:start="256:17" pos:end="256:17">j</name> <init pos:start="256:19" pos:end="256:28">= <expr pos:start="256:21" pos:end="256:28"><name pos:start="256:21" pos:end="256:28">counter2</name></expr></init></decl>;</init> <condition pos:start="256:31" pos:end="256:62"><expr pos:start="256:31" pos:end="256:61"><name pos:start="256:31" pos:end="256:31">j</name> <operator pos:start="256:33" pos:end="256:33">&lt;</operator> <name pos:start="256:35" pos:end="256:42">counter2</name> <operator pos:start="256:44" pos:end="256:44">+</operator> <name pos:start="256:46" pos:end="256:61">bank2SegmentSize</name></expr>;</condition> <incr pos:start="256:64" pos:end="256:66"><expr pos:start="256:64" pos:end="256:66"><name pos:start="256:64" pos:end="256:64">j</name><operator pos:start="256:65" pos:end="256:66">++</operator></expr></incr>)</control><block pos:start="256:68" pos:end="258:9">{<block_content pos:start="257:13" pos:end="257:41">
            <expr_stmt pos:start="257:13" pos:end="257:41"><expr pos:start="257:13" pos:end="257:40"><call pos:start="257:13" pos:end="257:40"><name pos:start="257:13" pos:end="257:21"><name pos:start="257:13" pos:end="257:17">bank2</name><operator pos:start="257:18" pos:end="257:18">.</operator><name pos:start="257:19" pos:end="257:21">add</name></name><argument_list pos:start="257:22" pos:end="257:40">(<argument pos:start="257:23" pos:end="257:39"><expr pos:start="257:23" pos:end="257:39"><call pos:start="257:23" pos:end="257:39"><name pos:start="257:23" pos:end="257:36"><name pos:start="257:23" pos:end="257:32">riverBank2</name><operator pos:start="257:33" pos:end="257:33">.</operator><name pos:start="257:34" pos:end="257:36">get</name></name><argument_list pos:start="257:37" pos:end="257:39">(<argument pos:start="257:38" pos:end="257:38"><expr pos:start="257:38" pos:end="257:38"><name pos:start="257:38" pos:end="257:38">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="261:5" pos:end="269:7">/**
     * This function is a helper function for makeRiverVectors(). It makes the last vector of nodes for each bank
     * of the river.
     * @param counter1
     * @param counter2
     * @param riverSegment
     * @param bank1
     * @param bank2
     */</comment>
    <function pos:start="270:5" pos:end="275:5"><type pos:start="270:5" pos:end="270:23"><specifier pos:start="270:5" pos:end="270:11">private</specifier> <specifier pos:start="270:13" pos:end="270:18">static</specifier> <name pos:start="270:20" pos:end="270:23">void</name></type> <name pos:start="270:25" pos:end="270:40">makeFinalVectors</name><parameter_list pos:start="270:41" pos:end="270:120">(<parameter pos:start="270:42" pos:end="270:52"><decl pos:start="270:42" pos:end="270:52"><type pos:start="270:42" pos:end="270:52"><name pos:start="270:42" pos:end="270:44">int</name></type> <name pos:start="270:46" pos:end="270:52">counter</name></decl></parameter>, <parameter pos:start="270:55" pos:end="270:82"><decl pos:start="270:55" pos:end="270:82"><type pos:start="270:55" pos:end="270:82"><name pos:start="270:55" pos:end="270:69">RiverSubsegment</name></type> <name pos:start="270:71" pos:end="270:82">riverSegment</name></decl></parameter>, <parameter pos:start="270:85" pos:end="270:98"><decl pos:start="270:85" pos:end="270:98"><type pos:start="270:85" pos:end="270:98"><name pos:start="270:85" pos:end="270:93">RiverBank</name></type> <name pos:start="270:95" pos:end="270:98">bank</name></decl></parameter>, <parameter pos:start="270:101" pos:end="270:119"><decl pos:start="270:101" pos:end="270:119"><type pos:start="270:101" pos:end="270:119"><name pos:start="270:101" pos:end="270:109">RiverBank</name></type> <name pos:start="270:111" pos:end="270:119">riverBank</name></decl></parameter>)</parameter_list><block pos:start="270:121" pos:end="275:5">{<block_content pos:start="271:9" pos:end="274:31">
        <for pos:start="271:9" pos:end="273:9">for<control pos:start="271:12" pos:end="271:55">(<init pos:start="271:13" pos:end="271:28"><decl pos:start="271:13" pos:end="271:27"><type pos:start="271:13" pos:end="271:15"><name pos:start="271:13" pos:end="271:15">int</name></type> <name pos:start="271:17" pos:end="271:17">j</name> <init pos:start="271:19" pos:end="271:27">= <expr pos:start="271:21" pos:end="271:27"><name pos:start="271:21" pos:end="271:27">counter</name></expr></init></decl>;</init> <condition pos:start="271:30" pos:end="271:50"><expr pos:start="271:30" pos:end="271:49"><name pos:start="271:30" pos:end="271:30">j</name> <operator pos:start="271:32" pos:end="271:32">&lt;</operator> <call pos:start="271:34" pos:end="271:49"><name pos:start="271:34" pos:end="271:47"><name pos:start="271:34" pos:end="271:42">riverBank</name><operator pos:start="271:43" pos:end="271:43">.</operator><name pos:start="271:44" pos:end="271:47">size</name></name><argument_list pos:start="271:48" pos:end="271:49">()</argument_list></call></expr>;</condition> <incr pos:start="271:52" pos:end="271:54"><expr pos:start="271:52" pos:end="271:54"><name pos:start="271:52" pos:end="271:52">j</name><operator pos:start="271:53" pos:end="271:54">++</operator></expr></incr>)</control> <block pos:start="271:57" pos:end="273:9">{<block_content pos:start="272:13" pos:end="272:39">
            <expr_stmt pos:start="272:13" pos:end="272:39"><expr pos:start="272:13" pos:end="272:38"><call pos:start="272:13" pos:end="272:38"><name pos:start="272:13" pos:end="272:20"><name pos:start="272:13" pos:end="272:16">bank</name><operator pos:start="272:17" pos:end="272:17">.</operator><name pos:start="272:18" pos:end="272:20">add</name></name><argument_list pos:start="272:21" pos:end="272:38">(<argument pos:start="272:22" pos:end="272:37"><expr pos:start="272:22" pos:end="272:37"><call pos:start="272:22" pos:end="272:37"><name pos:start="272:22" pos:end="272:34"><name pos:start="272:22" pos:end="272:30">riverBank</name><operator pos:start="272:31" pos:end="272:31">.</operator><name pos:start="272:32" pos:end="272:34">get</name></name><argument_list pos:start="272:35" pos:end="272:37">(<argument pos:start="272:36" pos:end="272:36"><expr pos:start="272:36" pos:end="272:36"><name pos:start="272:36" pos:end="272:36">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="274:9" pos:end="274:31"><expr pos:start="274:9" pos:end="274:30"><call pos:start="274:9" pos:end="274:30"><name pos:start="274:9" pos:end="274:24"><name pos:start="274:9" pos:end="274:20">riverSegment</name><operator pos:start="274:21" pos:end="274:21">.</operator><name pos:start="274:22" pos:end="274:24">add</name></name><argument_list pos:start="274:25" pos:end="274:30">(<argument pos:start="274:26" pos:end="274:29"><expr pos:start="274:26" pos:end="274:29"><name pos:start="274:26" pos:end="274:29">bank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    
    <comment type="block" format="javadoc" pos:start="278:5" pos:end="283:7">/**
     * This function makes a polygon of the entire river segment. This allows checking for points contained within the 
     * river segment.
     * @param bankList
     * @return Path2D.Double polygon of the river segment
     */</comment>
    <function pos:start="284:5" pos:end="296:5"><type pos:start="284:5" pos:end="284:31"><specifier pos:start="284:5" pos:end="284:10">public</specifier> <specifier pos:start="284:12" pos:end="284:17">static</specifier> <name pos:start="284:19" pos:end="284:31"><name pos:start="284:19" pos:end="284:24">Path2D</name><operator pos:start="284:25" pos:end="284:25">.</operator><name pos:start="284:26" pos:end="284:31">Double</name></name></type> <name pos:start="284:33" pos:end="284:53">makeTotalRiverSegment</name><parameter_list pos:start="284:54" pos:end="284:79">(<parameter pos:start="284:55" pos:end="284:78"><decl pos:start="284:55" pos:end="284:78"><type pos:start="284:55" pos:end="284:69"><name pos:start="284:55" pos:end="284:69"><name pos:start="284:55" pos:end="284:58">List</name><argument_list type="generic" pos:start="284:59" pos:end="284:69">&lt;<argument pos:start="284:60" pos:end="284:68"><name pos:start="284:60" pos:end="284:68">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="284:71" pos:end="284:78">bankList</name></decl></parameter>)</parameter_list><block pos:start="284:80" pos:end="296:5">{<block_content pos:start="285:9" pos:end="295:28">
    	<decl_stmt pos:start="285:9" pos:end="285:57"><decl pos:start="285:9" pos:end="285:56"><type pos:start="285:9" pos:end="285:21"><name pos:start="285:9" pos:end="285:21"><name pos:start="285:9" pos:end="285:14">Path2D</name><operator pos:start="285:15" pos:end="285:15">.</operator><name pos:start="285:16" pos:end="285:21">Double</name></name></type> <name pos:start="285:23" pos:end="285:34">totalSegment</name> <init pos:start="285:36" pos:end="285:56">= <expr pos:start="285:38" pos:end="285:56"><operator pos:start="285:38" pos:end="285:40">new</operator> <call pos:start="285:42" pos:end="285:56"><name pos:start="285:42" pos:end="285:54"><name pos:start="285:42" pos:end="285:47">Path2D</name><operator pos:start="285:48" pos:end="285:48">.</operator><name pos:start="285:49" pos:end="285:54">Double</name></name><argument_list pos:start="285:55" pos:end="285:56">()</argument_list></call></expr></init></decl>;</decl_stmt>
    	<decl_stmt pos:start="286:9" pos:end="286:42"><decl pos:start="286:9" pos:end="286:41"><type pos:start="286:9" pos:end="286:17"><name pos:start="286:9" pos:end="286:17">RiverBank</name></type> <name pos:start="286:19" pos:end="286:23">bank1</name> <init pos:start="286:25" pos:end="286:41">= <expr pos:start="286:27" pos:end="286:41"><call pos:start="286:27" pos:end="286:41"><name pos:start="286:27" pos:end="286:38"><name pos:start="286:27" pos:end="286:34">bankList</name><operator pos:start="286:35" pos:end="286:35">.</operator><name pos:start="286:36" pos:end="286:38">get</name></name><argument_list pos:start="286:39" pos:end="286:41">(<argument pos:start="286:40" pos:end="286:40"><expr pos:start="286:40" pos:end="286:40"><literal type="number" pos:start="286:40" pos:end="286:40">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<decl_stmt pos:start="287:9" pos:end="287:42"><decl pos:start="287:9" pos:end="287:41"><type pos:start="287:9" pos:end="287:17"><name pos:start="287:9" pos:end="287:17">RiverBank</name></type> <name pos:start="287:19" pos:end="287:23">bank2</name> <init pos:start="287:25" pos:end="287:41">= <expr pos:start="287:27" pos:end="287:41"><call pos:start="287:27" pos:end="287:41"><name pos:start="287:27" pos:end="287:38"><name pos:start="287:27" pos:end="287:34">bankList</name><operator pos:start="287:35" pos:end="287:35">.</operator><name pos:start="287:36" pos:end="287:38">get</name></name><argument_list pos:start="287:39" pos:end="287:41">(<argument pos:start="287:40" pos:end="287:40"><expr pos:start="287:40" pos:end="287:40"><literal type="number" pos:start="287:40" pos:end="287:40">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<expr_stmt pos:start="288:9" pos:end="288:70"><expr pos:start="288:9" pos:end="288:69"><call pos:start="288:9" pos:end="288:69"><name pos:start="288:9" pos:end="288:27"><name pos:start="288:9" pos:end="288:20">totalSegment</name><operator pos:start="288:21" pos:end="288:21">.</operator><name pos:start="288:22" pos:end="288:27">moveTo</name></name><argument_list pos:start="288:28" pos:end="288:69">(<argument pos:start="288:29" pos:end="288:47"><expr pos:start="288:29" pos:end="288:47"><call pos:start="288:29" pos:end="288:40"><name pos:start="288:29" pos:end="288:37"><name pos:start="288:29" pos:end="288:33">bank1</name><operator pos:start="288:34" pos:end="288:34">.</operator><name pos:start="288:35" pos:end="288:37">get</name></name><argument_list pos:start="288:38" pos:end="288:40">(<argument pos:start="288:39" pos:end="288:39"><expr pos:start="288:39" pos:end="288:39"><literal type="number" pos:start="288:39" pos:end="288:39">0</literal></expr></argument>)</argument_list></call><operator pos:start="288:41" pos:end="288:41">.</operator><call pos:start="288:42" pos:end="288:47"><name pos:start="288:42" pos:end="288:45">getX</name><argument_list pos:start="288:46" pos:end="288:47">()</argument_list></call></expr></argument>, <argument pos:start="288:50" pos:end="288:68"><expr pos:start="288:50" pos:end="288:68"><call pos:start="288:50" pos:end="288:61"><name pos:start="288:50" pos:end="288:58"><name pos:start="288:50" pos:end="288:54">bank1</name><operator pos:start="288:55" pos:end="288:55">.</operator><name pos:start="288:56" pos:end="288:58">get</name></name><argument_list pos:start="288:59" pos:end="288:61">(<argument pos:start="288:60" pos:end="288:60"><expr pos:start="288:60" pos:end="288:60"><literal type="number" pos:start="288:60" pos:end="288:60">0</literal></expr></argument>)</argument_list></call><operator pos:start="288:62" pos:end="288:62">.</operator><call pos:start="288:63" pos:end="288:68"><name pos:start="288:63" pos:end="288:66">getY</name><argument_list pos:start="288:67" pos:end="288:68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<for pos:start="289:9" pos:end="291:9">for<control pos:start="289:12" pos:end="289:45">(<init pos:start="289:13" pos:end="289:22"><decl pos:start="289:13" pos:end="289:21"><type pos:start="289:13" pos:end="289:15"><name pos:start="289:13" pos:end="289:15">int</name></type> <name pos:start="289:17" pos:end="289:17">i</name> <init pos:start="289:19" pos:end="289:21">= <expr pos:start="289:21" pos:end="289:21"><literal type="number" pos:start="289:21" pos:end="289:21">1</literal></expr></init></decl>;</init> <condition pos:start="289:24" pos:end="289:40"><expr pos:start="289:24" pos:end="289:39"><name pos:start="289:24" pos:end="289:24">i</name> <operator pos:start="289:26" pos:end="289:26">&lt;</operator> <call pos:start="289:28" pos:end="289:39"><name pos:start="289:28" pos:end="289:37"><name pos:start="289:28" pos:end="289:32">bank1</name><operator pos:start="289:33" pos:end="289:33">.</operator><name pos:start="289:34" pos:end="289:37">size</name></name><argument_list pos:start="289:38" pos:end="289:39">()</argument_list></call></expr>;</condition> <incr pos:start="289:42" pos:end="289:44"><expr pos:start="289:42" pos:end="289:44"><name pos:start="289:42" pos:end="289:42">i</name><operator pos:start="289:43" pos:end="289:44">++</operator></expr></incr>)</control> <block pos:start="289:47" pos:end="291:9">{<block_content pos:start="290:17" pos:end="290:78">
    		<expr_stmt pos:start="290:17" pos:end="290:78"><expr pos:start="290:17" pos:end="290:77"><call pos:start="290:17" pos:end="290:77"><name pos:start="290:17" pos:end="290:35"><name pos:start="290:17" pos:end="290:28">totalSegment</name><operator pos:start="290:29" pos:end="290:29">.</operator><name pos:start="290:30" pos:end="290:35">lineTo</name></name><argument_list pos:start="290:36" pos:end="290:77">(<argument pos:start="290:37" pos:end="290:55"><expr pos:start="290:37" pos:end="290:55"><call pos:start="290:37" pos:end="290:48"><name pos:start="290:37" pos:end="290:45"><name pos:start="290:37" pos:end="290:41">bank1</name><operator pos:start="290:42" pos:end="290:42">.</operator><name pos:start="290:43" pos:end="290:45">get</name></name><argument_list pos:start="290:46" pos:end="290:48">(<argument pos:start="290:47" pos:end="290:47"><expr pos:start="290:47" pos:end="290:47"><name pos:start="290:47" pos:end="290:47">i</name></expr></argument>)</argument_list></call><operator pos:start="290:49" pos:end="290:49">.</operator><call pos:start="290:50" pos:end="290:55"><name pos:start="290:50" pos:end="290:53">getX</name><argument_list pos:start="290:54" pos:end="290:55">()</argument_list></call></expr></argument>, <argument pos:start="290:58" pos:end="290:76"><expr pos:start="290:58" pos:end="290:76"><call pos:start="290:58" pos:end="290:69"><name pos:start="290:58" pos:end="290:66"><name pos:start="290:58" pos:end="290:62">bank1</name><operator pos:start="290:63" pos:end="290:63">.</operator><name pos:start="290:64" pos:end="290:66">get</name></name><argument_list pos:start="290:67" pos:end="290:69">(<argument pos:start="290:68" pos:end="290:68"><expr pos:start="290:68" pos:end="290:68"><name pos:start="290:68" pos:end="290:68">i</name></expr></argument>)</argument_list></call><operator pos:start="290:70" pos:end="290:70">.</operator><call pos:start="290:71" pos:end="290:76"><name pos:start="290:71" pos:end="290:74">getY</name><argument_list pos:start="290:75" pos:end="290:76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<for pos:start="292:9" pos:end="294:9">for<control pos:start="292:12" pos:end="292:48">(<init pos:start="292:13" pos:end="292:35"><decl pos:start="292:13" pos:end="292:34"><type pos:start="292:13" pos:end="292:15"><name pos:start="292:13" pos:end="292:15">int</name></type> <name pos:start="292:17" pos:end="292:17">i</name> <init pos:start="292:19" pos:end="292:34">= <expr pos:start="292:21" pos:end="292:34"><call pos:start="292:21" pos:end="292:32"><name pos:start="292:21" pos:end="292:30"><name pos:start="292:21" pos:end="292:25">bank2</name><operator pos:start="292:26" pos:end="292:26">.</operator><name pos:start="292:27" pos:end="292:30">size</name></name><argument_list pos:start="292:31" pos:end="292:32">()</argument_list></call><operator pos:start="292:33" pos:end="292:33">-</operator><literal type="number" pos:start="292:34" pos:end="292:34">1</literal></expr></init></decl>;</init> <condition pos:start="292:37" pos:end="292:43"><expr pos:start="292:37" pos:end="292:42"><name pos:start="292:37" pos:end="292:37">i</name> <operator pos:start="292:39" pos:end="292:40">&gt;=</operator> <literal type="number" pos:start="292:42" pos:end="292:42">0</literal></expr>;</condition> <incr pos:start="292:45" pos:end="292:47"><expr pos:start="292:45" pos:end="292:47"><name pos:start="292:45" pos:end="292:45">i</name><operator pos:start="292:46" pos:end="292:47">--</operator></expr></incr>)</control> <block pos:start="292:50" pos:end="294:9">{<block_content pos:start="293:17" pos:end="293:78">
    		<expr_stmt pos:start="293:17" pos:end="293:78"><expr pos:start="293:17" pos:end="293:77"><call pos:start="293:17" pos:end="293:77"><name pos:start="293:17" pos:end="293:35"><name pos:start="293:17" pos:end="293:28">totalSegment</name><operator pos:start="293:29" pos:end="293:29">.</operator><name pos:start="293:30" pos:end="293:35">lineTo</name></name><argument_list pos:start="293:36" pos:end="293:77">(<argument pos:start="293:37" pos:end="293:55"><expr pos:start="293:37" pos:end="293:55"><call pos:start="293:37" pos:end="293:48"><name pos:start="293:37" pos:end="293:45"><name pos:start="293:37" pos:end="293:41">bank2</name><operator pos:start="293:42" pos:end="293:42">.</operator><name pos:start="293:43" pos:end="293:45">get</name></name><argument_list pos:start="293:46" pos:end="293:48">(<argument pos:start="293:47" pos:end="293:47"><expr pos:start="293:47" pos:end="293:47"><name pos:start="293:47" pos:end="293:47">i</name></expr></argument>)</argument_list></call><operator pos:start="293:49" pos:end="293:49">.</operator><call pos:start="293:50" pos:end="293:55"><name pos:start="293:50" pos:end="293:53">getX</name><argument_list pos:start="293:54" pos:end="293:55">()</argument_list></call></expr></argument>, <argument pos:start="293:58" pos:end="293:76"><expr pos:start="293:58" pos:end="293:76"><call pos:start="293:58" pos:end="293:69"><name pos:start="293:58" pos:end="293:66"><name pos:start="293:58" pos:end="293:62">bank2</name><operator pos:start="293:63" pos:end="293:63">.</operator><name pos:start="293:64" pos:end="293:66">get</name></name><argument_list pos:start="293:67" pos:end="293:69">(<argument pos:start="293:68" pos:end="293:68"><expr pos:start="293:68" pos:end="293:68"><name pos:start="293:68" pos:end="293:68">i</name></expr></argument>)</argument_list></call><operator pos:start="293:70" pos:end="293:70">.</operator><call pos:start="293:71" pos:end="293:76"><name pos:start="293:71" pos:end="293:74">getY</name><argument_list pos:start="293:75" pos:end="293:76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<return pos:start="295:9" pos:end="295:28">return <expr pos:start="295:16" pos:end="295:27"><name pos:start="295:16" pos:end="295:27">totalSegment</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="298:5" pos:end="302:7">/**
     * This function creates Path2D.Double shapes to represent each subsegment of the riversegment. This is used for
     * checking if a point is inside the shape, which is done to determine the stopping point for each search route.
     * @return vector of Path2D.Double shapes representing subsegments of the riversegment
     */</comment>
    <comment type="line" pos:start="303:5" pos:end="303:101">//Assumes riverVectors has been called beforehand so that riverBanks are in cartesian coordinates</comment>
    <function pos:start="304:5" pos:end="331:5"><type pos:start="304:5" pos:end="304:39"><specifier pos:start="304:5" pos:end="304:10">public</specifier> <specifier pos:start="304:12" pos:end="304:17">static</specifier> <name pos:start="304:19" pos:end="304:39"><name pos:start="304:19" pos:end="304:24">Vector</name><argument_list type="generic" pos:start="304:25" pos:end="304:39">&lt;<argument pos:start="304:26" pos:end="304:38"><name pos:start="304:26" pos:end="304:38"><name pos:start="304:26" pos:end="304:31">Path2D</name><operator pos:start="304:32" pos:end="304:32">.</operator><name pos:start="304:33" pos:end="304:38">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="304:41" pos:end="304:57">makeRiverSegments</name><parameter_list pos:start="304:58" pos:end="304:139">(<parameter pos:start="304:59" pos:end="304:82"><decl pos:start="304:59" pos:end="304:82"><type pos:start="304:59" pos:end="304:82"><name pos:start="304:59" pos:end="304:73"><name pos:start="304:59" pos:end="304:62">List</name><argument_list type="generic" pos:start="304:63" pos:end="304:73">&lt;<argument pos:start="304:64" pos:end="304:72"><name pos:start="304:64" pos:end="304:72">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="304:75" pos:end="304:82">bankList</name></decl></parameter>, <parameter pos:start="304:85" pos:end="304:94"><decl pos:start="304:85" pos:end="304:94"><type pos:start="304:85" pos:end="304:94"><name pos:start="304:85" pos:end="304:87">int</name></type> <name pos:start="304:89" pos:end="304:94">drones</name></decl></parameter>, <parameter pos:start="304:97" pos:end="304:116"><decl pos:start="304:97" pos:end="304:116"><type pos:start="304:97" pos:end="304:116"><name pos:start="304:97" pos:end="304:99">int</name></type> <name pos:start="304:101" pos:end="304:116">bank1SegmentSize</name></decl></parameter>, <parameter pos:start="304:119" pos:end="304:138"><decl pos:start="304:119" pos:end="304:138"><type pos:start="304:119" pos:end="304:138"><name pos:start="304:119" pos:end="304:121">int</name></type> <name pos:start="304:123" pos:end="304:138">bank2SegmentSize</name></decl></parameter>)</parameter_list><block pos:start="304:140" pos:end="331:5">{<block_content pos:start="305:17" pos:end="330:33">
    		<decl_stmt pos:start="305:17" pos:end="305:82"><decl pos:start="305:17" pos:end="305:81"><type pos:start="305:17" pos:end="305:37"><name pos:start="305:17" pos:end="305:37"><name pos:start="305:17" pos:end="305:22">Vector</name><argument_list type="generic" pos:start="305:23" pos:end="305:37">&lt;<argument pos:start="305:24" pos:end="305:36"><name pos:start="305:24" pos:end="305:36"><name pos:start="305:24" pos:end="305:29">Path2D</name><operator pos:start="305:30" pos:end="305:30">.</operator><name pos:start="305:31" pos:end="305:36">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="305:39" pos:end="305:51">riverSegments</name> <init pos:start="305:53" pos:end="305:81">= <expr pos:start="305:55" pos:end="305:81"><operator pos:start="305:55" pos:end="305:57">new</operator> <call pos:start="305:59" pos:end="305:81"><name pos:start="305:59" pos:end="305:79"><name pos:start="305:59" pos:end="305:64">Vector</name><argument_list type="generic" pos:start="305:65" pos:end="305:79">&lt;<argument pos:start="305:66" pos:end="305:78"><name pos:start="305:66" pos:end="305:78"><name pos:start="305:66" pos:end="305:71">Path2D</name><operator pos:start="305:72" pos:end="305:72">.</operator><name pos:start="305:73" pos:end="305:78">Double</name></name></argument>&gt;</argument_list></name><argument_list pos:start="305:80" pos:end="305:81">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="306:13" pos:end="306:51"><decl pos:start="306:13" pos:end="306:50"><type pos:start="306:13" pos:end="306:21"><name pos:start="306:13" pos:end="306:21">RiverBank</name></type> <name pos:start="306:23" pos:end="306:32">riverBank1</name> <init pos:start="306:34" pos:end="306:50">= <expr pos:start="306:36" pos:end="306:50"><call pos:start="306:36" pos:end="306:50"><name pos:start="306:36" pos:end="306:47"><name pos:start="306:36" pos:end="306:43">bankList</name><operator pos:start="306:44" pos:end="306:44">.</operator><name pos:start="306:45" pos:end="306:47">get</name></name><argument_list pos:start="306:48" pos:end="306:50">(<argument pos:start="306:49" pos:end="306:49"><expr pos:start="306:49" pos:end="306:49"><literal type="number" pos:start="306:49" pos:end="306:49">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="307:13" pos:end="307:51"><decl pos:start="307:13" pos:end="307:50"><type pos:start="307:13" pos:end="307:21"><name pos:start="307:13" pos:end="307:21">RiverBank</name></type> <name pos:start="307:23" pos:end="307:32">riverBank2</name> <init pos:start="307:34" pos:end="307:50">= <expr pos:start="307:36" pos:end="307:50"><call pos:start="307:36" pos:end="307:50"><name pos:start="307:36" pos:end="307:47"><name pos:start="307:36" pos:end="307:43">bankList</name><operator pos:start="307:44" pos:end="307:44">.</operator><name pos:start="307:45" pos:end="307:47">get</name></name><argument_list pos:start="307:48" pos:end="307:50">(<argument pos:start="307:49" pos:end="307:49"><expr pos:start="307:49" pos:end="307:49"><literal type="number" pos:start="307:49" pos:end="307:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="308:13" pos:end="308:29"><decl pos:start="308:13" pos:end="308:28"><type pos:start="308:13" pos:end="308:15"><name pos:start="308:13" pos:end="308:15">int</name></type> <name pos:start="308:17" pos:end="308:24">counter1</name> <init pos:start="308:26" pos:end="308:28">= <expr pos:start="308:28" pos:end="308:28"><literal type="number" pos:start="308:28" pos:end="308:28">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="309:13" pos:end="309:29"><decl pos:start="309:13" pos:end="309:28"><type pos:start="309:13" pos:end="309:15"><name pos:start="309:13" pos:end="309:15">int</name></type> <name pos:start="309:17" pos:end="309:24">counter2</name> <init pos:start="309:26" pos:end="309:28">= <expr pos:start="309:28" pos:end="309:28"><literal type="number" pos:start="309:28" pos:end="309:28">0</literal></expr></init></decl>;</decl_stmt>
            <for pos:start="310:13" pos:end="323:13">for<control pos:start="310:16" pos:end="310:45">(<init pos:start="310:17" pos:end="310:26"><decl pos:start="310:17" pos:end="310:25"><type pos:start="310:17" pos:end="310:19"><name pos:start="310:17" pos:end="310:19">int</name></type> <name pos:start="310:21" pos:end="310:21">i</name> <init pos:start="310:23" pos:end="310:25">= <expr pos:start="310:25" pos:end="310:25"><literal type="number" pos:start="310:25" pos:end="310:25">0</literal></expr></init></decl>;</init> <condition pos:start="310:28" pos:end="310:40"><expr pos:start="310:28" pos:end="310:39"><name pos:start="310:28" pos:end="310:28">i</name> <operator pos:start="310:30" pos:end="310:30">&lt;</operator> <name pos:start="310:32" pos:end="310:37">drones</name><operator pos:start="310:38" pos:end="310:38">-</operator><literal type="number" pos:start="310:39" pos:end="310:39">1</literal></expr>;</condition> <incr pos:start="310:42" pos:end="310:44"><expr pos:start="310:42" pos:end="310:44"><name pos:start="310:42" pos:end="310:42">i</name><operator pos:start="310:43" pos:end="310:44">++</operator></expr></incr>)</control><block pos:start="310:46" pos:end="323:13">{<block_content pos:start="311:17" pos:end="322:48">
                <decl_stmt pos:start="311:17" pos:end="311:65"><decl pos:start="311:17" pos:end="311:64"><type pos:start="311:17" pos:end="311:29"><name pos:start="311:17" pos:end="311:29"><name pos:start="311:17" pos:end="311:22">Path2D</name><operator pos:start="311:23" pos:end="311:23">.</operator><name pos:start="311:24" pos:end="311:29">Double</name></name></type> <name pos:start="311:31" pos:end="311:42">riverSegment</name> <init pos:start="311:44" pos:end="311:64">= <expr pos:start="311:46" pos:end="311:64"><operator pos:start="311:46" pos:end="311:48">new</operator> <call pos:start="311:50" pos:end="311:64"><name pos:start="311:50" pos:end="311:62"><name pos:start="311:50" pos:end="311:55">Path2D</name><operator pos:start="311:56" pos:end="311:56">.</operator><name pos:start="311:57" pos:end="311:62">Double</name></name><argument_list pos:start="311:63" pos:end="311:64">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt pos:start="312:17" pos:end="312:64"><decl pos:start="312:17" pos:end="312:63"><type pos:start="312:17" pos:end="312:30"><name pos:start="312:17" pos:end="312:30"><name pos:start="312:17" pos:end="312:23">Point2D</name><operator pos:start="312:24" pos:end="312:24">.</operator><name pos:start="312:25" pos:end="312:30">Double</name></name></type> <name pos:start="312:32" pos:end="312:36">node0</name> <init pos:start="312:38" pos:end="312:63">= <expr pos:start="312:40" pos:end="312:63"><call pos:start="312:40" pos:end="312:63"><name pos:start="312:40" pos:end="312:53"><name pos:start="312:40" pos:end="312:49">riverBank1</name><operator pos:start="312:50" pos:end="312:50">.</operator><name pos:start="312:51" pos:end="312:53">get</name></name><argument_list pos:start="312:54" pos:end="312:63">(<argument pos:start="312:55" pos:end="312:62"><expr pos:start="312:55" pos:end="312:62"><name pos:start="312:55" pos:end="312:62">counter1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="313:17" pos:end="313:63"><expr pos:start="313:17" pos:end="313:62"><call pos:start="313:17" pos:end="313:62"><name pos:start="313:17" pos:end="313:35"><name pos:start="313:17" pos:end="313:28">riverSegment</name><operator pos:start="313:29" pos:end="313:29">.</operator><name pos:start="313:30" pos:end="313:35">moveTo</name></name><argument_list pos:start="313:36" pos:end="313:62">(<argument pos:start="313:37" pos:end="313:48"><expr pos:start="313:37" pos:end="313:48"><call pos:start="313:37" pos:end="313:48"><name pos:start="313:37" pos:end="313:46"><name pos:start="313:37" pos:end="313:41">node0</name><operator pos:start="313:42" pos:end="313:42">.</operator><name pos:start="313:43" pos:end="313:46">getX</name></name><argument_list pos:start="313:47" pos:end="313:48">()</argument_list></call></expr></argument>,<argument pos:start="313:50" pos:end="313:61"><expr pos:start="313:50" pos:end="313:61"><call pos:start="313:50" pos:end="313:61"><name pos:start="313:50" pos:end="313:59"><name pos:start="313:50" pos:end="313:54">node0</name><operator pos:start="313:55" pos:end="313:55">.</operator><name pos:start="313:56" pos:end="313:59">getY</name></name><argument_list pos:start="313:60" pos:end="313:61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:82"><expr pos:start="315:17" pos:end="315:81"><call pos:start="315:17" pos:end="315:81"><name pos:start="315:17" pos:end="315:30">makeRiverbank1</name><argument_list pos:start="315:31" pos:end="315:81">(<argument pos:start="315:32" pos:end="315:39"><expr pos:start="315:32" pos:end="315:39"><name pos:start="315:32" pos:end="315:39">counter1</name></expr></argument>,<argument pos:start="315:41" pos:end="315:52"><expr pos:start="315:41" pos:end="315:52"><name pos:start="315:41" pos:end="315:52">riverSegment</name></expr></argument>,<argument pos:start="315:54" pos:end="315:63"><expr pos:start="315:54" pos:end="315:63"><name pos:start="315:54" pos:end="315:63">riverBank1</name></expr></argument>,<argument pos:start="315:65" pos:end="315:80"><expr pos:start="315:65" pos:end="315:80"><name pos:start="315:65" pos:end="315:80">bank1SegmentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="316:17" pos:end="316:47"><expr pos:start="316:17" pos:end="316:46"><name pos:start="316:17" pos:end="316:24">counter1</name> <operator pos:start="316:26" pos:end="316:27">+=</operator> <name pos:start="316:29" pos:end="316:44">bank1SegmentSize</name><operator pos:start="316:45" pos:end="316:45">-</operator><literal type="number" pos:start="316:46" pos:end="316:46">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="318:17" pos:end="318:82"><expr pos:start="318:17" pos:end="318:81"><call pos:start="318:17" pos:end="318:81"><name pos:start="318:17" pos:end="318:30">makeRiverbank2</name><argument_list pos:start="318:31" pos:end="318:81">(<argument pos:start="318:32" pos:end="318:39"><expr pos:start="318:32" pos:end="318:39"><name pos:start="318:32" pos:end="318:39">counter2</name></expr></argument>,<argument pos:start="318:41" pos:end="318:52"><expr pos:start="318:41" pos:end="318:52"><name pos:start="318:41" pos:end="318:52">riverSegment</name></expr></argument>,<argument pos:start="318:54" pos:end="318:63"><expr pos:start="318:54" pos:end="318:63"><name pos:start="318:54" pos:end="318:63">riverBank2</name></expr></argument>,<argument pos:start="318:65" pos:end="318:80"><expr pos:start="318:65" pos:end="318:80"><name pos:start="318:65" pos:end="318:80">bank2SegmentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="319:17" pos:end="319:48"><expr pos:start="319:17" pos:end="319:47"><name pos:start="319:17" pos:end="319:24">counter2</name> <operator pos:start="319:26" pos:end="319:27">+=</operator> <name pos:start="319:29" pos:end="319:44">bank2SegmentSize</name> <operator pos:start="319:46" pos:end="319:46">-</operator><literal type="number" pos:start="319:47" pos:end="319:47">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:41"><expr pos:start="321:17" pos:end="321:40"><call pos:start="321:17" pos:end="321:40"><name pos:start="321:17" pos:end="321:38"><name pos:start="321:17" pos:end="321:28">riverSegment</name><operator pos:start="321:29" pos:end="321:29">.</operator><name pos:start="321:30" pos:end="321:38">closePath</name></name><argument_list pos:start="321:39" pos:end="321:40">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="322:17" pos:end="322:48"><expr pos:start="322:17" pos:end="322:47"><call pos:start="322:17" pos:end="322:47"><name pos:start="322:17" pos:end="322:33"><name pos:start="322:17" pos:end="322:29">riverSegments</name><operator pos:start="322:30" pos:end="322:30">.</operator><name pos:start="322:31" pos:end="322:33">add</name></name><argument_list pos:start="322:34" pos:end="322:47">(<argument pos:start="322:35" pos:end="322:46"><expr pos:start="322:35" pos:end="322:46"><name pos:start="322:35" pos:end="322:46">riverSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt pos:start="324:13" pos:end="324:61"><decl pos:start="324:13" pos:end="324:60"><type pos:start="324:13" pos:end="324:25"><name pos:start="324:13" pos:end="324:25"><name pos:start="324:13" pos:end="324:18">Path2D</name><operator pos:start="324:19" pos:end="324:19">.</operator><name pos:start="324:20" pos:end="324:25">Double</name></name></type> <name pos:start="324:27" pos:end="324:38">riverSegment</name> <init pos:start="324:40" pos:end="324:60">= <expr pos:start="324:42" pos:end="324:60"><operator pos:start="324:42" pos:end="324:44">new</operator> <call pos:start="324:46" pos:end="324:60"><name pos:start="324:46" pos:end="324:58"><name pos:start="324:46" pos:end="324:51">Path2D</name><operator pos:start="324:52" pos:end="324:52">.</operator><name pos:start="324:53" pos:end="324:58">Double</name></name><argument_list pos:start="324:59" pos:end="324:60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="325:13" pos:end="325:60"><decl pos:start="325:13" pos:end="325:59"><type pos:start="325:13" pos:end="325:26"><name pos:start="325:13" pos:end="325:26"><name pos:start="325:13" pos:end="325:19">Point2D</name><operator pos:start="325:20" pos:end="325:20">.</operator><name pos:start="325:21" pos:end="325:26">Double</name></name></type> <name pos:start="325:28" pos:end="325:32">node0</name> <init pos:start="325:34" pos:end="325:59">= <expr pos:start="325:36" pos:end="325:59"><call pos:start="325:36" pos:end="325:59"><name pos:start="325:36" pos:end="325:49"><name pos:start="325:36" pos:end="325:45">riverBank1</name><operator pos:start="325:46" pos:end="325:46">.</operator><name pos:start="325:47" pos:end="325:49">get</name></name><argument_list pos:start="325:50" pos:end="325:59">(<argument pos:start="325:51" pos:end="325:58"><expr pos:start="325:51" pos:end="325:58"><name pos:start="325:51" pos:end="325:58">counter1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="326:13" pos:end="326:59"><expr pos:start="326:13" pos:end="326:58"><call pos:start="326:13" pos:end="326:58"><name pos:start="326:13" pos:end="326:31"><name pos:start="326:13" pos:end="326:24">riverSegment</name><operator pos:start="326:25" pos:end="326:25">.</operator><name pos:start="326:26" pos:end="326:31">moveTo</name></name><argument_list pos:start="326:32" pos:end="326:58">(<argument pos:start="326:33" pos:end="326:44"><expr pos:start="326:33" pos:end="326:44"><call pos:start="326:33" pos:end="326:44"><name pos:start="326:33" pos:end="326:42"><name pos:start="326:33" pos:end="326:37">node0</name><operator pos:start="326:38" pos:end="326:38">.</operator><name pos:start="326:39" pos:end="326:42">getX</name></name><argument_list pos:start="326:43" pos:end="326:44">()</argument_list></call></expr></argument>,<argument pos:start="326:46" pos:end="326:57"><expr pos:start="326:46" pos:end="326:57"><call pos:start="326:46" pos:end="326:57"><name pos:start="326:46" pos:end="326:55"><name pos:start="326:46" pos:end="326:50">node0</name><operator pos:start="326:51" pos:end="326:51">.</operator><name pos:start="326:52" pos:end="326:55">getY</name></name><argument_list pos:start="326:56" pos:end="326:57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="327:13" pos:end="327:83"><expr pos:start="327:13" pos:end="327:82"><call pos:start="327:13" pos:end="327:82"><name pos:start="327:13" pos:end="327:28">makeFinalSegment</name><argument_list pos:start="327:29" pos:end="327:82">(<argument pos:start="327:30" pos:end="327:37"><expr pos:start="327:30" pos:end="327:37"><name pos:start="327:30" pos:end="327:37">counter1</name></expr></argument>,<argument pos:start="327:39" pos:end="327:46"><expr pos:start="327:39" pos:end="327:46"><name pos:start="327:39" pos:end="327:46">counter2</name></expr></argument>,<argument pos:start="327:48" pos:end="327:59"><expr pos:start="327:48" pos:end="327:59"><name pos:start="327:48" pos:end="327:59">riverSegment</name></expr></argument>,<argument pos:start="327:61" pos:end="327:70"><expr pos:start="327:61" pos:end="327:70"><name pos:start="327:61" pos:end="327:70">riverBank1</name></expr></argument>,<argument pos:start="327:72" pos:end="327:81"><expr pos:start="327:72" pos:end="327:81"><name pos:start="327:72" pos:end="327:81">riverBank2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="328:13" pos:end="328:37"><expr pos:start="328:13" pos:end="328:36"><call pos:start="328:13" pos:end="328:36"><name pos:start="328:13" pos:end="328:34"><name pos:start="328:13" pos:end="328:24">riverSegment</name><operator pos:start="328:25" pos:end="328:25">.</operator><name pos:start="328:26" pos:end="328:34">closePath</name></name><argument_list pos:start="328:35" pos:end="328:36">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="329:13" pos:end="329:44"><expr pos:start="329:13" pos:end="329:43"><call pos:start="329:13" pos:end="329:43"><name pos:start="329:13" pos:end="329:29"><name pos:start="329:13" pos:end="329:25">riverSegments</name><operator pos:start="329:26" pos:end="329:26">.</operator><name pos:start="329:27" pos:end="329:29">add</name></name><argument_list pos:start="329:30" pos:end="329:43">(<argument pos:start="329:31" pos:end="329:42"><expr pos:start="329:31" pos:end="329:42"><name pos:start="329:31" pos:end="329:42">riverSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="330:13" pos:end="330:33">return <expr pos:start="330:20" pos:end="330:32"><name pos:start="330:20" pos:end="330:32">riverSegments</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="333:5" pos:end="338:7">/**
     * This function is a helper function for makeRiverSegments(). It adds the nodes from the first bank of the river
     * to the shape.
     * @param counter1
     * @param riverSegment
     */</comment>
    <function pos:start="339:5" pos:end="344:5"><type pos:start="339:5" pos:end="339:23"><specifier pos:start="339:5" pos:end="339:11">private</specifier> <specifier pos:start="339:13" pos:end="339:18">static</specifier> <name pos:start="339:20" pos:end="339:23">void</name></type> <name pos:start="339:25" pos:end="339:38">makeRiverbank1</name><parameter_list pos:start="339:39" pos:end="339:124">(<parameter pos:start="339:40" pos:end="339:51"><decl pos:start="339:40" pos:end="339:51"><type pos:start="339:40" pos:end="339:51"><name pos:start="339:40" pos:end="339:42">int</name></type> <name pos:start="339:44" pos:end="339:51">counter1</name></decl></parameter>, <parameter pos:start="339:54" pos:end="339:79"><decl pos:start="339:54" pos:end="339:79"><type pos:start="339:54" pos:end="339:79"><name pos:start="339:54" pos:end="339:66"><name pos:start="339:54" pos:end="339:59">Path2D</name><operator pos:start="339:60" pos:end="339:60">.</operator><name pos:start="339:61" pos:end="339:66">Double</name></name></type> <name pos:start="339:68" pos:end="339:79">riverSegment</name></decl></parameter>, <parameter pos:start="339:82" pos:end="339:101"><decl pos:start="339:82" pos:end="339:101"><type pos:start="339:82" pos:end="339:101"><name pos:start="339:82" pos:end="339:90">RiverBank</name></type> <name pos:start="339:92" pos:end="339:101">riverBank1</name></decl></parameter>, <parameter pos:start="339:104" pos:end="339:123"><decl pos:start="339:104" pos:end="339:123"><type pos:start="339:104" pos:end="339:123"><name pos:start="339:104" pos:end="339:106">int</name></type> <name pos:start="339:108" pos:end="339:123">bank1SegmentSize</name></decl></parameter>)</parameter_list><block pos:start="339:125" pos:end="344:5">{<block_content pos:start="340:9" pos:end="343:9">
        <for pos:start="340:9" pos:end="343:9">for<control pos:start="340:12" pos:end="340:71">(<init pos:start="340:13" pos:end="340:33"><decl pos:start="340:13" pos:end="340:32"><type pos:start="340:13" pos:end="340:15"><name pos:start="340:13" pos:end="340:15">int</name></type> <name pos:start="340:17" pos:end="340:17">j</name> <init pos:start="340:19" pos:end="340:32">= <expr pos:start="340:21" pos:end="340:32"><name pos:start="340:21" pos:end="340:28">counter1</name> <operator pos:start="340:30" pos:end="340:30">+</operator> <literal type="number" pos:start="340:32" pos:end="340:32">1</literal></expr></init></decl>;</init> <condition pos:start="340:35" pos:end="340:66"><expr pos:start="340:35" pos:end="340:65"><name pos:start="340:35" pos:end="340:35">j</name> <operator pos:start="340:37" pos:end="340:37">&lt;</operator> <name pos:start="340:39" pos:end="340:46">counter1</name> <operator pos:start="340:48" pos:end="340:48">+</operator> <name pos:start="340:50" pos:end="340:65">bank1SegmentSize</name></expr>;</condition> <incr pos:start="340:68" pos:end="340:70"><expr pos:start="340:68" pos:end="340:70"><name pos:start="340:68" pos:end="340:68">j</name><operator pos:start="340:69" pos:end="340:70">++</operator></expr></incr>)</control><block pos:start="340:72" pos:end="343:9">{<block_content pos:start="341:13" pos:end="342:57">
            <decl_stmt pos:start="341:13" pos:end="341:52"><decl pos:start="341:13" pos:end="341:51"><type pos:start="341:13" pos:end="341:26"><name pos:start="341:13" pos:end="341:26"><name pos:start="341:13" pos:end="341:19">Point2D</name><operator pos:start="341:20" pos:end="341:20">.</operator><name pos:start="341:21" pos:end="341:26">Double</name></name></type> <name pos:start="341:28" pos:end="341:31">node</name> <init pos:start="341:33" pos:end="341:51">= <expr pos:start="341:35" pos:end="341:51"><call pos:start="341:35" pos:end="341:51"><name pos:start="341:35" pos:end="341:48"><name pos:start="341:35" pos:end="341:44">riverBank1</name><operator pos:start="341:45" pos:end="341:45">.</operator><name pos:start="341:46" pos:end="341:48">get</name></name><argument_list pos:start="341:49" pos:end="341:51">(<argument pos:start="341:50" pos:end="341:50"><expr pos:start="341:50" pos:end="341:50"><name pos:start="341:50" pos:end="341:50">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="342:13" pos:end="342:57"><expr pos:start="342:13" pos:end="342:56"><call pos:start="342:13" pos:end="342:56"><name pos:start="342:13" pos:end="342:31"><name pos:start="342:13" pos:end="342:24">riverSegment</name><operator pos:start="342:25" pos:end="342:25">.</operator><name pos:start="342:26" pos:end="342:31">lineTo</name></name><argument_list pos:start="342:32" pos:end="342:56">(<argument pos:start="342:33" pos:end="342:43"><expr pos:start="342:33" pos:end="342:43"><call pos:start="342:33" pos:end="342:43"><name pos:start="342:33" pos:end="342:41"><name pos:start="342:33" pos:end="342:36">node</name><operator pos:start="342:37" pos:end="342:37">.</operator><name pos:start="342:38" pos:end="342:41">getX</name></name><argument_list pos:start="342:42" pos:end="342:43">()</argument_list></call></expr></argument>,<argument pos:start="342:45" pos:end="342:55"><expr pos:start="342:45" pos:end="342:55"><call pos:start="342:45" pos:end="342:55"><name pos:start="342:45" pos:end="342:53"><name pos:start="342:45" pos:end="342:48">node</name><operator pos:start="342:49" pos:end="342:49">.</operator><name pos:start="342:50" pos:end="342:53">getY</name></name><argument_list pos:start="342:54" pos:end="342:55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="346:5" pos:end="351:7">/**
     * This function is a helper function for makeRiverSegments(). It adds the nodes from the second bank of the river
     * to the shape.
     * @param counter2
     * @param riverSegment
     */</comment>
    <function pos:start="352:5" pos:end="357:5"><type pos:start="352:5" pos:end="352:23"><specifier pos:start="352:5" pos:end="352:11">private</specifier> <specifier pos:start="352:13" pos:end="352:18">static</specifier> <name pos:start="352:20" pos:end="352:23">void</name></type> <name pos:start="352:25" pos:end="352:38">makeRiverbank2</name><parameter_list pos:start="352:39" pos:end="352:124">(<parameter pos:start="352:40" pos:end="352:51"><decl pos:start="352:40" pos:end="352:51"><type pos:start="352:40" pos:end="352:51"><name pos:start="352:40" pos:end="352:42">int</name></type> <name pos:start="352:44" pos:end="352:51">counter2</name></decl></parameter>, <parameter pos:start="352:54" pos:end="352:79"><decl pos:start="352:54" pos:end="352:79"><type pos:start="352:54" pos:end="352:79"><name pos:start="352:54" pos:end="352:66"><name pos:start="352:54" pos:end="352:59">Path2D</name><operator pos:start="352:60" pos:end="352:60">.</operator><name pos:start="352:61" pos:end="352:66">Double</name></name></type> <name pos:start="352:68" pos:end="352:79">riverSegment</name></decl></parameter>, <parameter pos:start="352:82" pos:end="352:101"><decl pos:start="352:82" pos:end="352:101"><type pos:start="352:82" pos:end="352:101"><name pos:start="352:82" pos:end="352:90">RiverBank</name></type> <name pos:start="352:92" pos:end="352:101">riverBank2</name></decl></parameter>, <parameter pos:start="352:104" pos:end="352:123"><decl pos:start="352:104" pos:end="352:123"><type pos:start="352:104" pos:end="352:123"><name pos:start="352:104" pos:end="352:106">int</name></type> <name pos:start="352:108" pos:end="352:123">bank2SegmentSize</name></decl></parameter>)</parameter_list><block pos:start="352:125" pos:end="357:5">{<block_content pos:start="353:9" pos:end="356:9">
        <for pos:start="353:9" pos:end="356:9">for<control pos:start="353:12" pos:end="353:72">(<init pos:start="353:13" pos:end="353:52"><decl pos:start="353:13" pos:end="353:51"><type pos:start="353:13" pos:end="353:15"><name pos:start="353:13" pos:end="353:15">int</name></type> <name pos:start="353:17" pos:end="353:17">j</name> <init pos:start="353:19" pos:end="353:51">= <expr pos:start="353:21" pos:end="353:51"><name pos:start="353:21" pos:end="353:28">counter2</name> <operator pos:start="353:30" pos:end="353:30">+</operator> <name pos:start="353:32" pos:end="353:47">bank2SegmentSize</name> <operator pos:start="353:49" pos:end="353:49">-</operator> <literal type="number" pos:start="353:51" pos:end="353:51">1</literal></expr></init></decl>;</init> <condition pos:start="353:54" pos:end="353:67"><expr pos:start="353:54" pos:end="353:66"><name pos:start="353:54" pos:end="353:54">j</name> <operator pos:start="353:56" pos:end="353:57">&gt;=</operator> <name pos:start="353:59" pos:end="353:66">counter2</name></expr>;</condition> <incr pos:start="353:69" pos:end="353:71"><expr pos:start="353:69" pos:end="353:71"><name pos:start="353:69" pos:end="353:69">j</name><operator pos:start="353:70" pos:end="353:71">--</operator></expr></incr>)</control><block pos:start="353:73" pos:end="356:9">{<block_content pos:start="354:13" pos:end="355:57">
            <decl_stmt pos:start="354:13" pos:end="354:52"><decl pos:start="354:13" pos:end="354:51"><type pos:start="354:13" pos:end="354:26"><name pos:start="354:13" pos:end="354:26"><name pos:start="354:13" pos:end="354:19">Point2D</name><operator pos:start="354:20" pos:end="354:20">.</operator><name pos:start="354:21" pos:end="354:26">Double</name></name></type> <name pos:start="354:28" pos:end="354:31">node</name> <init pos:start="354:33" pos:end="354:51">= <expr pos:start="354:35" pos:end="354:51"><call pos:start="354:35" pos:end="354:51"><name pos:start="354:35" pos:end="354:48"><name pos:start="354:35" pos:end="354:44">riverBank2</name><operator pos:start="354:45" pos:end="354:45">.</operator><name pos:start="354:46" pos:end="354:48">get</name></name><argument_list pos:start="354:49" pos:end="354:51">(<argument pos:start="354:50" pos:end="354:50"><expr pos:start="354:50" pos:end="354:50"><name pos:start="354:50" pos:end="354:50">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="355:13" pos:end="355:57"><expr pos:start="355:13" pos:end="355:56"><call pos:start="355:13" pos:end="355:56"><name pos:start="355:13" pos:end="355:31"><name pos:start="355:13" pos:end="355:24">riverSegment</name><operator pos:start="355:25" pos:end="355:25">.</operator><name pos:start="355:26" pos:end="355:31">lineTo</name></name><argument_list pos:start="355:32" pos:end="355:56">(<argument pos:start="355:33" pos:end="355:43"><expr pos:start="355:33" pos:end="355:43"><call pos:start="355:33" pos:end="355:43"><name pos:start="355:33" pos:end="355:41"><name pos:start="355:33" pos:end="355:36">node</name><operator pos:start="355:37" pos:end="355:37">.</operator><name pos:start="355:38" pos:end="355:41">getX</name></name><argument_list pos:start="355:42" pos:end="355:43">()</argument_list></call></expr></argument>,<argument pos:start="355:45" pos:end="355:55"><expr pos:start="355:45" pos:end="355:55"><call pos:start="355:45" pos:end="355:55"><name pos:start="355:45" pos:end="355:53"><name pos:start="355:45" pos:end="355:48">node</name><operator pos:start="355:49" pos:end="355:49">.</operator><name pos:start="355:50" pos:end="355:53">getY</name></name><argument_list pos:start="355:54" pos:end="355:55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc" pos:start="359:5" pos:end="365:7">/**
     * This function is a helper function for makeRiverSegments(). It adds the remaining nodes from each side of the
     * river to make the last subsegment of the riversegment.
     * @param counter1
     * @param counter2
     * @param riverSegment
     */</comment>
    <function pos:start="366:5" pos:end="375:5"><type pos:start="366:5" pos:end="366:23"><specifier pos:start="366:5" pos:end="366:11">private</specifier> <specifier pos:start="366:13" pos:end="366:18">static</specifier> <name pos:start="366:20" pos:end="366:23">void</name></type> <name pos:start="366:25" pos:end="366:40">makeFinalSegment</name><parameter_list pos:start="366:41" pos:end="366:138">(<parameter pos:start="366:42" pos:end="366:53"><decl pos:start="366:42" pos:end="366:53"><type pos:start="366:42" pos:end="366:53"><name pos:start="366:42" pos:end="366:44">int</name></type> <name pos:start="366:46" pos:end="366:53">counter1</name></decl></parameter>,<parameter pos:start="366:55" pos:end="366:66"><decl pos:start="366:55" pos:end="366:66"><type pos:start="366:55" pos:end="366:66"><name pos:start="366:55" pos:end="366:57">int</name></type> <name pos:start="366:59" pos:end="366:66">counter2</name></decl></parameter>,<parameter pos:start="366:68" pos:end="366:93"><decl pos:start="366:68" pos:end="366:93"><type pos:start="366:68" pos:end="366:93"><name pos:start="366:68" pos:end="366:80"><name pos:start="366:68" pos:end="366:73">Path2D</name><operator pos:start="366:74" pos:end="366:74">.</operator><name pos:start="366:75" pos:end="366:80">Double</name></name></type> <name pos:start="366:82" pos:end="366:93">riverSegment</name></decl></parameter>, <parameter pos:start="366:96" pos:end="366:115"><decl pos:start="366:96" pos:end="366:115"><type pos:start="366:96" pos:end="366:115"><name pos:start="366:96" pos:end="366:104">RiverBank</name></type> <name pos:start="366:106" pos:end="366:115">riverBank1</name></decl></parameter>, <parameter pos:start="366:118" pos:end="366:137"><decl pos:start="366:118" pos:end="366:137"><type pos:start="366:118" pos:end="366:137"><name pos:start="366:118" pos:end="366:126">RiverBank</name></type> <name pos:start="366:128" pos:end="366:137">riverBank2</name></decl></parameter>)</parameter_list> <block pos:start="366:140" pos:end="375:5">{<block_content pos:start="367:9" pos:end="374:9">
        <for pos:start="367:9" pos:end="370:9">for <control pos:start="367:13" pos:end="367:62">(<init pos:start="367:14" pos:end="367:34"><decl pos:start="367:14" pos:end="367:33"><type pos:start="367:14" pos:end="367:16"><name pos:start="367:14" pos:end="367:16">int</name></type> <name pos:start="367:18" pos:end="367:18">j</name> <init pos:start="367:20" pos:end="367:33">= <expr pos:start="367:22" pos:end="367:33"><name pos:start="367:22" pos:end="367:29">counter1</name> <operator pos:start="367:31" pos:end="367:31">+</operator> <literal type="number" pos:start="367:33" pos:end="367:33">1</literal></expr></init></decl>;</init> <condition pos:start="367:36" pos:end="367:57"><expr pos:start="367:36" pos:end="367:56"><name pos:start="367:36" pos:end="367:36">j</name> <operator pos:start="367:38" pos:end="367:38">&lt;</operator> <call pos:start="367:40" pos:end="367:56"><name pos:start="367:40" pos:end="367:54"><name pos:start="367:40" pos:end="367:49">riverBank1</name><operator pos:start="367:50" pos:end="367:50">.</operator><name pos:start="367:51" pos:end="367:54">size</name></name><argument_list pos:start="367:55" pos:end="367:56">()</argument_list></call></expr>;</condition> <incr pos:start="367:59" pos:end="367:61"><expr pos:start="367:59" pos:end="367:61"><name pos:start="367:59" pos:end="367:59">j</name><operator pos:start="367:60" pos:end="367:61">++</operator></expr></incr>)</control> <block pos:start="367:64" pos:end="370:9">{<block_content pos:start="368:13" pos:end="369:58">
            <decl_stmt pos:start="368:13" pos:end="368:52"><decl pos:start="368:13" pos:end="368:51"><type pos:start="368:13" pos:end="368:26"><name pos:start="368:13" pos:end="368:26"><name pos:start="368:13" pos:end="368:19">Point2D</name><operator pos:start="368:20" pos:end="368:20">.</operator><name pos:start="368:21" pos:end="368:26">Double</name></name></type> <name pos:start="368:28" pos:end="368:31">node</name> <init pos:start="368:33" pos:end="368:51">= <expr pos:start="368:35" pos:end="368:51"><call pos:start="368:35" pos:end="368:51"><name pos:start="368:35" pos:end="368:48"><name pos:start="368:35" pos:end="368:44">riverBank1</name><operator pos:start="368:45" pos:end="368:45">.</operator><name pos:start="368:46" pos:end="368:48">get</name></name><argument_list pos:start="368:49" pos:end="368:51">(<argument pos:start="368:50" pos:end="368:50"><expr pos:start="368:50" pos:end="368:50"><name pos:start="368:50" pos:end="368:50">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="369:13" pos:end="369:58"><expr pos:start="369:13" pos:end="369:57"><call pos:start="369:13" pos:end="369:57"><name pos:start="369:13" pos:end="369:31"><name pos:start="369:13" pos:end="369:24">riverSegment</name><operator pos:start="369:25" pos:end="369:25">.</operator><name pos:start="369:26" pos:end="369:31">lineTo</name></name><argument_list pos:start="369:32" pos:end="369:57">(<argument pos:start="369:33" pos:end="369:43"><expr pos:start="369:33" pos:end="369:43"><call pos:start="369:33" pos:end="369:43"><name pos:start="369:33" pos:end="369:41"><name pos:start="369:33" pos:end="369:36">node</name><operator pos:start="369:37" pos:end="369:37">.</operator><name pos:start="369:38" pos:end="369:41">getX</name></name><argument_list pos:start="369:42" pos:end="369:43">()</argument_list></call></expr></argument>, <argument pos:start="369:46" pos:end="369:56"><expr pos:start="369:46" pos:end="369:56"><call pos:start="369:46" pos:end="369:56"><name pos:start="369:46" pos:end="369:54"><name pos:start="369:46" pos:end="369:49">node</name><operator pos:start="369:50" pos:end="369:50">.</operator><name pos:start="369:51" pos:end="369:54">getY</name></name><argument_list pos:start="369:55" pos:end="369:56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for pos:start="371:9" pos:end="374:9">for <control pos:start="371:13" pos:end="371:63">(<init pos:start="371:14" pos:end="371:43"><decl pos:start="371:14" pos:end="371:42"><type pos:start="371:14" pos:end="371:16"><name pos:start="371:14" pos:end="371:16">int</name></type> <name pos:start="371:18" pos:end="371:18">j</name> <init pos:start="371:20" pos:end="371:42">= <expr pos:start="371:22" pos:end="371:42"><call pos:start="371:22" pos:end="371:38"><name pos:start="371:22" pos:end="371:36"><name pos:start="371:22" pos:end="371:31">riverBank2</name><operator pos:start="371:32" pos:end="371:32">.</operator><name pos:start="371:33" pos:end="371:36">size</name></name><argument_list pos:start="371:37" pos:end="371:38">()</argument_list></call> <operator pos:start="371:40" pos:end="371:40">-</operator> <literal type="number" pos:start="371:42" pos:end="371:42">1</literal></expr></init></decl>;</init> <condition pos:start="371:45" pos:end="371:58"><expr pos:start="371:45" pos:end="371:57"><name pos:start="371:45" pos:end="371:45">j</name> <operator pos:start="371:47" pos:end="371:48">&gt;=</operator> <name pos:start="371:50" pos:end="371:57">counter2</name></expr>;</condition> <incr pos:start="371:60" pos:end="371:62"><expr pos:start="371:60" pos:end="371:62"><name pos:start="371:60" pos:end="371:60">j</name><operator pos:start="371:61" pos:end="371:62">--</operator></expr></incr>)</control> <block pos:start="371:65" pos:end="374:9">{<block_content pos:start="372:13" pos:end="373:58">
            <decl_stmt pos:start="372:13" pos:end="372:52"><decl pos:start="372:13" pos:end="372:51"><type pos:start="372:13" pos:end="372:26"><name pos:start="372:13" pos:end="372:26"><name pos:start="372:13" pos:end="372:19">Point2D</name><operator pos:start="372:20" pos:end="372:20">.</operator><name pos:start="372:21" pos:end="372:26">Double</name></name></type> <name pos:start="372:28" pos:end="372:31">node</name> <init pos:start="372:33" pos:end="372:51">= <expr pos:start="372:35" pos:end="372:51"><call pos:start="372:35" pos:end="372:51"><name pos:start="372:35" pos:end="372:48"><name pos:start="372:35" pos:end="372:44">riverBank2</name><operator pos:start="372:45" pos:end="372:45">.</operator><name pos:start="372:46" pos:end="372:48">get</name></name><argument_list pos:start="372:49" pos:end="372:51">(<argument pos:start="372:50" pos:end="372:50"><expr pos:start="372:50" pos:end="372:50"><name pos:start="372:50" pos:end="372:50">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="373:13" pos:end="373:58"><expr pos:start="373:13" pos:end="373:57"><call pos:start="373:13" pos:end="373:57"><name pos:start="373:13" pos:end="373:31"><name pos:start="373:13" pos:end="373:24">riverSegment</name><operator pos:start="373:25" pos:end="373:25">.</operator><name pos:start="373:26" pos:end="373:31">lineTo</name></name><argument_list pos:start="373:32" pos:end="373:57">(<argument pos:start="373:33" pos:end="373:43"><expr pos:start="373:33" pos:end="373:43"><call pos:start="373:33" pos:end="373:43"><name pos:start="373:33" pos:end="373:41"><name pos:start="373:33" pos:end="373:36">node</name><operator pos:start="373:37" pos:end="373:37">.</operator><name pos:start="373:38" pos:end="373:41">getX</name></name><argument_list pos:start="373:42" pos:end="373:43">()</argument_list></call></expr></argument>, <argument pos:start="373:46" pos:end="373:56"><expr pos:start="373:46" pos:end="373:56"><call pos:start="373:46" pos:end="373:56"><name pos:start="373:46" pos:end="373:54"><name pos:start="373:46" pos:end="373:49">node</name><operator pos:start="373:50" pos:end="373:50">.</operator><name pos:start="373:51" pos:end="373:54">getY</name></name><argument_list pos:start="373:55" pos:end="373:56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
    
    
    <comment type="block" format="javadoc" pos:start="378:5" pos:end="383:7">/**
     * This function generates image waypoints at a specified distance along a RoutePrimitive
     * @param route
     * @param APERATURE_HEIGHT
     * @param OVERLAP_FACTOR
     */</comment>
    <function pos:start="384:5" pos:end="413:5"><type pos:start="384:5" pos:end="384:22"><specifier pos:start="384:5" pos:end="384:10">public</specifier> <specifier pos:start="384:12" pos:end="384:17">static</specifier> <name pos:start="384:19" pos:end="384:22">void</name></type> <name pos:start="384:24" pos:end="384:45">generateImageWaypoints</name><parameter_list pos:start="384:46" pos:end="384:115">(<parameter pos:start="384:47" pos:end="384:66"><decl pos:start="384:47" pos:end="384:66"><type pos:start="384:47" pos:end="384:66"><name pos:start="384:47" pos:end="384:60">RoutePrimitive</name></type> <name pos:start="384:62" pos:end="384:66">route</name></decl></parameter>, <parameter pos:start="384:69" pos:end="384:91"><decl pos:start="384:69" pos:end="384:91"><type pos:start="384:69" pos:end="384:91"><name pos:start="384:69" pos:end="384:74">double</name></type> <name pos:start="384:76" pos:end="384:91">APERATURE_HEIGHT</name></decl></parameter>, <parameter pos:start="384:94" pos:end="384:114"><decl pos:start="384:94" pos:end="384:114"><type pos:start="384:94" pos:end="384:114"><name pos:start="384:94" pos:end="384:99">double</name></type> <name pos:start="384:101" pos:end="384:114">OVERLAP_FACTOR</name></decl></parameter>)</parameter_list> <block pos:start="384:117" pos:end="413:5">{<block_content pos:start="385:17" pos:end="412:97">
		<decl_stmt pos:start="385:17" pos:end="385:63"><decl pos:start="385:17" pos:end="385:62"><type pos:start="385:17" pos:end="385:30"><name pos:start="385:17" pos:end="385:30"><name pos:start="385:17" pos:end="385:23">Point2D</name><operator pos:start="385:24" pos:end="385:24">.</operator><name pos:start="385:25" pos:end="385:30">Double</name></name></type> <name pos:start="385:32" pos:end="385:39">newPoint</name> <init pos:start="385:41" pos:end="385:62">= <expr pos:start="385:43" pos:end="385:62"><operator pos:start="385:43" pos:end="385:45">new</operator> <call pos:start="385:47" pos:end="385:62"><name pos:start="385:47" pos:end="385:60"><name pos:start="385:47" pos:end="385:53">Point2D</name><operator pos:start="385:54" pos:end="385:54">.</operator><name pos:start="385:55" pos:end="385:60">Double</name></name><argument_list pos:start="385:61" pos:end="385:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="386:17" pos:end="386:63"><decl pos:start="386:17" pos:end="386:62"><type pos:start="386:17" pos:end="386:29"><name pos:start="386:17" pos:end="386:29">ImageWaypoint</name></type> <name pos:start="386:31" pos:end="386:40">imagePoint</name> <init pos:start="386:42" pos:end="386:62">= <expr pos:start="386:44" pos:end="386:62"><operator pos:start="386:44" pos:end="386:46">new</operator> <call pos:start="386:48" pos:end="386:62"><name pos:start="386:48" pos:end="386:60">ImageWaypoint</name><argument_list pos:start="386:61" pos:end="386:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="387:17" pos:end="387:38"><decl pos:start="387:17" pos:end="387:37"><type pos:start="387:17" pos:end="387:30"><name pos:start="387:17" pos:end="387:30"><name pos:start="387:17" pos:end="387:23">Point2D</name><operator pos:start="387:24" pos:end="387:24">.</operator><name pos:start="387:25" pos:end="387:30">Double</name></name></type> <name pos:start="387:32" pos:end="387:37">point1</name></decl>;</decl_stmt>
		<decl_stmt pos:start="388:17" pos:end="388:38"><decl pos:start="388:17" pos:end="388:37"><type pos:start="388:17" pos:end="388:30"><name pos:start="388:17" pos:end="388:30"><name pos:start="388:17" pos:end="388:23">Point2D</name><operator pos:start="388:24" pos:end="388:24">.</operator><name pos:start="388:25" pos:end="388:30">Double</name></name></type> <name pos:start="388:32" pos:end="388:37">point2</name></decl>;</decl_stmt>
		<decl_stmt pos:start="389:17" pos:end="389:60"><decl pos:start="389:17" pos:end="389:59"><type pos:start="389:17" pos:end="389:30"><name pos:start="389:17" pos:end="389:30">ImageWaypoints</name></type> <name pos:start="389:32" pos:end="389:42">imagePoints</name> <init pos:start="389:44" pos:end="389:59">= <expr pos:start="389:46" pos:end="389:59"><call pos:start="389:46" pos:end="389:59"><name pos:start="389:46" pos:end="389:57"><name pos:start="389:46" pos:end="389:50">route</name><operator pos:start="389:51" pos:end="389:51">.</operator><name pos:start="389:52" pos:end="389:57">getIWP</name></name><argument_list pos:start="389:58" pos:end="389:59">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="390:17" pos:end="390:44"><decl pos:start="390:17" pos:end="390:43"><type pos:start="390:17" pos:end="390:22"><name pos:start="390:17" pos:end="390:22">double</name></type> <name pos:start="390:24" pos:end="390:43">routeSegmentDistance</name></decl>;</decl_stmt>
		<decl_stmt pos:start="391:17" pos:end="391:74"><decl pos:start="391:17" pos:end="391:73"><type pos:start="391:17" pos:end="391:22"><name pos:start="391:17" pos:end="391:22">double</name></type> <name pos:start="391:24" pos:end="391:39">traverseDistance</name> <init pos:start="391:41" pos:end="391:73">= <expr pos:start="391:43" pos:end="391:73"><name pos:start="391:43" pos:end="391:58">APERATURE_HEIGHT</name><operator pos:start="391:59" pos:end="391:59">*</operator><name pos:start="391:60" pos:end="391:73">OVERLAP_FACTOR</name></expr></init></decl>;</decl_stmt><empty_stmt pos:start="391:75" pos:end="391:75">;</empty_stmt>
		<decl_stmt pos:start="392:17" pos:end="392:37"><decl pos:start="392:17" pos:end="392:36"><type pos:start="392:17" pos:end="392:22"><name pos:start="392:17" pos:end="392:22">double</name></type> <name pos:start="392:24" pos:end="392:36">distanceRatio</name></decl>;</decl_stmt>
		<decl_stmt pos:start="393:17" pos:end="393:103"><decl pos:start="393:17" pos:end="393:102"><type pos:start="393:17" pos:end="393:22"><name pos:start="393:17" pos:end="393:22">double</name></type> <name pos:start="393:24" pos:end="393:28">theta</name> <init pos:start="393:30" pos:end="393:102">= <expr pos:start="393:32" pos:end="393:102"><call pos:start="393:32" pos:end="393:102"><name pos:start="393:32" pos:end="393:48"><name pos:start="393:32" pos:end="393:39">Geometry</name><operator pos:start="393:40" pos:end="393:40">.</operator><name pos:start="393:41" pos:end="393:48">getAngle</name></name><argument_list pos:start="393:49" pos:end="393:102">(<argument pos:start="393:50" pos:end="393:74"><expr pos:start="393:50" pos:end="393:74"><call pos:start="393:50" pos:end="393:74"><name pos:start="393:50" pos:end="393:71"><name pos:start="393:50" pos:end="393:54">route</name><operator pos:start="393:55" pos:end="393:55">.</operator><name pos:start="393:56" pos:end="393:71">getRouteWaypoint</name></name><argument_list pos:start="393:72" pos:end="393:74">(<argument pos:start="393:73" pos:end="393:73"><expr pos:start="393:73" pos:end="393:73"><literal type="number" pos:start="393:73" pos:end="393:73">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="393:77" pos:end="393:101"><expr pos:start="393:77" pos:end="393:101"><call pos:start="393:77" pos:end="393:101"><name pos:start="393:77" pos:end="393:98"><name pos:start="393:77" pos:end="393:81">route</name><operator pos:start="393:82" pos:end="393:82">.</operator><name pos:start="393:83" pos:end="393:98">getRouteWaypoint</name></name><argument_list pos:start="393:99" pos:end="393:101">(<argument pos:start="393:100" pos:end="393:100"><expr pos:start="393:100" pos:end="393:100"><literal type="number" pos:start="393:100" pos:end="393:100">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="394:17" pos:end="394:84"><expr pos:start="394:17" pos:end="394:83"><call pos:start="394:17" pos:end="394:83"><name pos:start="394:17" pos:end="394:31"><name pos:start="394:17" pos:end="394:27">imagePoints</name><operator pos:start="394:28" pos:end="394:28">.</operator><name pos:start="394:29" pos:end="394:31">add</name></name><argument_list pos:start="394:32" pos:end="394:83">(<argument pos:start="394:33" pos:end="394:82"><expr pos:start="394:33" pos:end="394:82"><operator pos:start="394:33" pos:end="394:35">new</operator> <call pos:start="394:37" pos:end="394:82"><name pos:start="394:37" pos:end="394:49">ImageWaypoint</name><argument_list pos:start="394:50" pos:end="394:82">(<argument pos:start="394:51" pos:end="394:75"><expr pos:start="394:51" pos:end="394:75"><call pos:start="394:51" pos:end="394:75"><name pos:start="394:51" pos:end="394:72"><name pos:start="394:51" pos:end="394:55">route</name><operator pos:start="394:56" pos:end="394:56">.</operator><name pos:start="394:57" pos:end="394:72">getRouteWaypoint</name></name><argument_list pos:start="394:73" pos:end="394:75">(<argument pos:start="394:74" pos:end="394:74"><expr pos:start="394:74" pos:end="394:74"><literal type="number" pos:start="394:74" pos:end="394:74">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="394:77" pos:end="394:81"><expr pos:start="394:77" pos:end="394:81"><name pos:start="394:77" pos:end="394:81">theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:start="395:17" pos:end="411:17">for<control pos:start="395:20" pos:end="395:55">(<init pos:start="395:21" pos:end="395:30"><decl pos:start="395:21" pos:end="395:29"><type pos:start="395:21" pos:end="395:23"><name pos:start="395:21" pos:end="395:23">int</name></type> <name pos:start="395:25" pos:end="395:25">i</name> <init pos:start="395:27" pos:end="395:29">= <expr pos:start="395:29" pos:end="395:29"><literal type="number" pos:start="395:29" pos:end="395:29">0</literal></expr></init></decl>;</init> <condition pos:start="395:32" pos:end="395:50"><expr pos:start="395:32" pos:end="395:49"><name pos:start="395:32" pos:end="395:32">i</name> <operator pos:start="395:34" pos:end="395:34">&lt;</operator> <call pos:start="395:36" pos:end="395:47"><name pos:start="395:36" pos:end="395:45"><name pos:start="395:36" pos:end="395:40">route</name><operator pos:start="395:41" pos:end="395:41">.</operator><name pos:start="395:42" pos:end="395:45">size</name></name><argument_list pos:start="395:46" pos:end="395:47">()</argument_list></call><operator pos:start="395:48" pos:end="395:48">-</operator><literal type="number" pos:start="395:49" pos:end="395:49">1</literal></expr>;</condition> <incr pos:start="395:52" pos:end="395:54"><expr pos:start="395:52" pos:end="395:54"><name pos:start="395:52" pos:end="395:52">i</name><operator pos:start="395:53" pos:end="395:54">++</operator></expr></incr>)</control> <block pos:start="395:57" pos:end="411:17">{<block_content pos:start="396:25" pos:end="410:25">
			<expr_stmt pos:start="396:25" pos:end="396:59"><expr pos:start="396:25" pos:end="396:58"><name pos:start="396:25" pos:end="396:30">point1</name> <operator pos:start="396:32" pos:end="396:32">=</operator> <call pos:start="396:34" pos:end="396:58"><name pos:start="396:34" pos:end="396:55"><name pos:start="396:34" pos:end="396:38">route</name><operator pos:start="396:39" pos:end="396:39">.</operator><name pos:start="396:40" pos:end="396:55">getRouteWaypoint</name></name><argument_list pos:start="396:56" pos:end="396:58">(<argument pos:start="396:57" pos:end="396:57"><expr pos:start="396:57" pos:end="396:57"><name pos:start="396:57" pos:end="396:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="397:25" pos:end="397:61"><expr pos:start="397:25" pos:end="397:60"><name pos:start="397:25" pos:end="397:30">point2</name> <operator pos:start="397:32" pos:end="397:32">=</operator> <call pos:start="397:34" pos:end="397:60"><name pos:start="397:34" pos:end="397:55"><name pos:start="397:34" pos:end="397:38">route</name><operator pos:start="397:39" pos:end="397:39">.</operator><name pos:start="397:40" pos:end="397:55">getRouteWaypoint</name></name><argument_list pos:start="397:56" pos:end="397:60">(<argument pos:start="397:57" pos:end="397:59"><expr pos:start="397:57" pos:end="397:59"><name pos:start="397:57" pos:end="397:57">i</name><operator pos:start="397:58" pos:end="397:58">+</operator><literal type="number" pos:start="397:59" pos:end="397:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="398:25" pos:end="398:66"><expr pos:start="398:25" pos:end="398:65"><name pos:start="398:25" pos:end="398:29">theta</name> <operator pos:start="398:31" pos:end="398:31">=</operator> <call pos:start="398:33" pos:end="398:65"><name pos:start="398:33" pos:end="398:49"><name pos:start="398:33" pos:end="398:40">Geometry</name><operator pos:start="398:41" pos:end="398:41">.</operator><name pos:start="398:42" pos:end="398:49">getAngle</name></name><argument_list pos:start="398:50" pos:end="398:65">(<argument pos:start="398:51" pos:end="398:56"><expr pos:start="398:51" pos:end="398:56"><name pos:start="398:51" pos:end="398:56">point1</name></expr></argument>, <argument pos:start="398:59" pos:end="398:64"><expr pos:start="398:59" pos:end="398:64"><name pos:start="398:59" pos:end="398:64">point2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt pos:start="399:25" pos:end="401:25"><if pos:start="399:25" pos:end="401:25">if<condition pos:start="399:27" pos:end="399:125">(<expr pos:start="399:28" pos:end="399:124"><call pos:start="399:28" pos:end="399:118"><name pos:start="399:28" pos:end="399:57"><name pos:start="399:28" pos:end="399:35">Geometry</name><operator pos:start="399:36" pos:end="399:36">.</operator><name pos:start="399:37" pos:end="399:57">findCartesianDistance</name></name><argument_list pos:start="399:58" pos:end="399:118">(<argument pos:start="399:59" pos:end="399:64"><expr pos:start="399:59" pos:end="399:64"><name pos:start="399:59" pos:end="399:64">point1</name></expr></argument>, <argument pos:start="399:67" pos:end="399:117"><expr pos:start="399:67" pos:end="399:117"><call pos:start="399:67" pos:end="399:103"><name pos:start="399:67" pos:end="399:81"><name pos:start="399:67" pos:end="399:77">imagePoints</name><operator pos:start="399:78" pos:end="399:78">.</operator><name pos:start="399:79" pos:end="399:81">get</name></name><argument_list pos:start="399:82" pos:end="399:103">(<argument pos:start="399:83" pos:end="399:102"><expr pos:start="399:83" pos:end="399:102"><call pos:start="399:83" pos:end="399:100"><name pos:start="399:83" pos:end="399:98"><name pos:start="399:83" pos:end="399:93">imagePoints</name><operator pos:start="399:94" pos:end="399:94">.</operator><name pos:start="399:95" pos:end="399:98">size</name></name><argument_list pos:start="399:99" pos:end="399:100">()</argument_list></call><operator pos:start="399:101" pos:end="399:101">-</operator><literal type="number" pos:start="399:102" pos:end="399:102">1</literal></expr></argument>)</argument_list></call><operator pos:start="399:104" pos:end="399:104">.</operator><call pos:start="399:105" pos:end="399:117"><name pos:start="399:105" pos:end="399:115">getWaypoint</name><argument_list pos:start="399:116" pos:end="399:117">()</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="399:120" pos:end="399:120">&gt;</operator> <literal type="number" pos:start="399:122" pos:end="399:124">2.0</literal></expr>)</condition> <block pos:start="399:127" pos:end="401:25">{<block_content pos:start="400:33" pos:end="400:81">
				<expr_stmt pos:start="400:33" pos:end="400:81"><expr pos:start="400:33" pos:end="400:80"><call pos:start="400:33" pos:end="400:80"><name pos:start="400:33" pos:end="400:47"><name pos:start="400:33" pos:end="400:43">imagePoints</name><operator pos:start="400:44" pos:end="400:44">.</operator><name pos:start="400:45" pos:end="400:47">add</name></name><argument_list pos:start="400:48" pos:end="400:80">(<argument pos:start="400:49" pos:end="400:79"><expr pos:start="400:49" pos:end="400:79"><operator pos:start="400:49" pos:end="400:51">new</operator> <call pos:start="400:53" pos:end="400:79"><name pos:start="400:53" pos:end="400:65">ImageWaypoint</name><argument_list pos:start="400:66" pos:end="400:79">(<argument pos:start="400:67" pos:end="400:72"><expr pos:start="400:67" pos:end="400:72"><name pos:start="400:67" pos:end="400:72">point1</name></expr></argument>,<argument pos:start="400:74" pos:end="400:78"><expr pos:start="400:74" pos:end="400:78"><name pos:start="400:74" pos:end="400:78">theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="line" pos:start="402:25" pos:end="402:50">//imagePoints.add(point1);</comment>
			<expr_stmt pos:start="403:25" pos:end="403:94"><expr pos:start="403:25" pos:end="403:93"><name pos:start="403:25" pos:end="403:44">routeSegmentDistance</name> <operator pos:start="403:46" pos:end="403:46">=</operator> <call pos:start="403:48" pos:end="403:93"><name pos:start="403:48" pos:end="403:77"><name pos:start="403:48" pos:end="403:55">Geometry</name><operator pos:start="403:56" pos:end="403:56">.</operator><name pos:start="403:57" pos:end="403:77">findCartesianDistance</name></name><argument_list pos:start="403:78" pos:end="403:93">(<argument pos:start="403:79" pos:end="403:84"><expr pos:start="403:79" pos:end="403:84"><name pos:start="403:79" pos:end="403:84">point1</name></expr></argument>, <argument pos:start="403:87" pos:end="403:92"><expr pos:start="403:87" pos:end="403:92"><name pos:start="403:87" pos:end="403:92">point2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:start="404:25" pos:end="410:25">while<condition pos:start="404:30" pos:end="404:71">(<expr pos:start="404:31" pos:end="404:70"><name pos:start="404:31" pos:end="404:46">traverseDistance</name> <operator pos:start="404:48" pos:end="404:49">&lt;=</operator> <name pos:start="404:51" pos:end="404:70">routeSegmentDistance</name></expr>)</condition> <block pos:start="404:73" pos:end="410:25">{<block_content pos:start="405:41" pos:end="409:58">
					<expr_stmt pos:start="405:41" pos:end="405:96"><expr pos:start="405:41" pos:end="405:95"><name pos:start="405:41" pos:end="405:53">distanceRatio</name> <operator pos:start="405:55" pos:end="405:55">=</operator> <name pos:start="405:57" pos:end="405:72">traverseDistance</name> <operator pos:start="405:74" pos:end="405:74">/</operator> <name pos:start="405:76" pos:end="405:95">routeSegmentDistance</name></expr>;</expr_stmt>
					<expr_stmt pos:start="406:41" pos:end="406:107"><expr pos:start="406:41" pos:end="406:106"><name pos:start="406:41" pos:end="406:48">newPoint</name> <operator pos:start="406:50" pos:end="406:50">=</operator> <call pos:start="406:52" pos:end="406:106"><name pos:start="406:52" pos:end="406:75"><name pos:start="406:52" pos:end="406:59">Geometry</name><operator pos:start="406:60" pos:end="406:60">.</operator><name pos:start="406:61" pos:end="406:75">findOffsetPoint</name></name><argument_list pos:start="406:76" pos:end="406:106">(<argument pos:start="406:77" pos:end="406:82"><expr pos:start="406:77" pos:end="406:82"><name pos:start="406:77" pos:end="406:82">point1</name></expr></argument>, <argument pos:start="406:85" pos:end="406:90"><expr pos:start="406:85" pos:end="406:90"><name pos:start="406:85" pos:end="406:90">point2</name></expr></argument>, <argument pos:start="406:93" pos:end="406:105"><expr pos:start="406:93" pos:end="406:105"><name pos:start="406:93" pos:end="406:105">distanceRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt pos:start="407:41" pos:end="407:91"><expr pos:start="407:41" pos:end="407:90"><call pos:start="407:41" pos:end="407:90"><name pos:start="407:41" pos:end="407:55"><name pos:start="407:41" pos:end="407:51">imagePoints</name><operator pos:start="407:52" pos:end="407:52">.</operator><name pos:start="407:53" pos:end="407:55">add</name></name><argument_list pos:start="407:56" pos:end="407:90">(<argument pos:start="407:57" pos:end="407:89"><expr pos:start="407:57" pos:end="407:89"><operator pos:start="407:57" pos:end="407:59">new</operator> <call pos:start="407:61" pos:end="407:89"><name pos:start="407:61" pos:end="407:73">ImageWaypoint</name><argument_list pos:start="407:74" pos:end="407:89">(<argument pos:start="407:75" pos:end="407:82"><expr pos:start="407:75" pos:end="407:82"><name pos:start="407:75" pos:end="407:82">newPoint</name></expr></argument>,<argument pos:start="407:84" pos:end="407:88"><expr pos:start="407:84" pos:end="407:88"><name pos:start="407:84" pos:end="407:88">theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt pos:start="408:41" pos:end="408:103"><expr pos:start="408:41" pos:end="408:102"><name pos:start="408:41" pos:end="408:60">routeSegmentDistance</name> <operator pos:start="408:62" pos:end="408:62">=</operator> <name pos:start="408:64" pos:end="408:83">routeSegmentDistance</name> <operator pos:start="408:85" pos:end="408:85">-</operator> <name pos:start="408:87" pos:end="408:102">traverseDistance</name></expr>;</expr_stmt>
					<expr_stmt pos:start="409:41" pos:end="409:58"><expr pos:start="409:41" pos:end="409:57"><name pos:start="409:41" pos:end="409:46">point1</name> <operator pos:start="409:48" pos:end="409:48">=</operator> <name pos:start="409:50" pos:end="409:57">newPoint</name></expr>;</expr_stmt>
			</block_content>}</block></while> 
		</block_content>}</block></for>
		<expr_stmt pos:start="412:17" pos:end="412:97"><expr pos:start="412:17" pos:end="412:96"><call pos:start="412:17" pos:end="412:96"><name pos:start="412:17" pos:end="412:31"><name pos:start="412:17" pos:end="412:27">imagePoints</name><operator pos:start="412:28" pos:end="412:28">.</operator><name pos:start="412:29" pos:end="412:31">add</name></name><argument_list pos:start="412:32" pos:end="412:96">(<argument pos:start="412:33" pos:end="412:95"><expr pos:start="412:33" pos:end="412:95"><operator pos:start="412:33" pos:end="412:35">new</operator> <call pos:start="412:37" pos:end="412:95"><name pos:start="412:37" pos:end="412:49">ImageWaypoint</name><argument_list pos:start="412:50" pos:end="412:95">(<argument pos:start="412:51" pos:end="412:88"><expr pos:start="412:51" pos:end="412:88"><call pos:start="412:51" pos:end="412:88"><name pos:start="412:51" pos:end="412:72"><name pos:start="412:51" pos:end="412:55">route</name><operator pos:start="412:56" pos:end="412:56">.</operator><name pos:start="412:57" pos:end="412:72">getRouteWaypoint</name></name><argument_list pos:start="412:73" pos:end="412:88">(<argument pos:start="412:74" pos:end="412:87"><expr pos:start="412:74" pos:end="412:87"><call pos:start="412:74" pos:end="412:85"><name pos:start="412:74" pos:end="412:83"><name pos:start="412:74" pos:end="412:78">route</name><operator pos:start="412:79" pos:end="412:79">.</operator><name pos:start="412:80" pos:end="412:83">size</name></name><argument_list pos:start="412:84" pos:end="412:85">()</argument_list></call><operator pos:start="412:86" pos:end="412:86">-</operator><literal type="number" pos:start="412:87" pos:end="412:87">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="412:90" pos:end="412:94"><expr pos:start="412:90" pos:end="412:94"><name pos:start="412:90" pos:end="412:94">theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function pos:start="415:5" pos:end="424:5"><type pos:start="415:5" pos:end="415:22"><specifier pos:start="415:5" pos:end="415:11">private</specifier> <specifier pos:start="415:13" pos:end="415:18">static</specifier> <name pos:start="415:20" pos:end="415:22">int</name></type> <name pos:start="415:24" pos:end="415:42">determineRouteSplit</name><parameter_list pos:start="415:43" pos:end="415:64">(<parameter pos:start="415:44" pos:end="415:63"><decl pos:start="415:44" pos:end="415:63"><type pos:start="415:44" pos:end="415:57"><name pos:start="415:44" pos:end="415:57">RoutePrimitive</name></type> <name pos:start="415:59" pos:end="415:63">route</name></decl></parameter>)</parameter_list> <block pos:start="415:66" pos:end="424:5">{<block_content pos:start="416:9" pos:end="423:27">
    	<decl_stmt pos:start="416:9" pos:end="416:28"><decl pos:start="416:9" pos:end="416:27"><type pos:start="416:9" pos:end="416:11"><name pos:start="416:9" pos:end="416:11">int</name></type> <name pos:start="416:13" pos:end="416:23">splitNumber</name> <init pos:start="416:25" pos:end="416:27">= <expr pos:start="416:27" pos:end="416:27"><literal type="number" pos:start="416:27" pos:end="416:27">1</literal></expr></init></decl>;</decl_stmt>
    	<if_stmt pos:start="417:9" pos:end="422:9"><if pos:start="417:9" pos:end="419:9">if<condition pos:start="417:11" pos:end="417:140">(<expr pos:start="417:12" pos:end="417:139"><call pos:start="417:12" pos:end="417:31"><name pos:start="417:12" pos:end="417:29"><name pos:start="417:12" pos:end="417:16">route</name><operator pos:start="417:17" pos:end="417:17">.</operator><name pos:start="417:18" pos:end="417:29">getRouteType</name></name><argument_list pos:start="417:30" pos:end="417:31">()</argument_list></call> <operator pos:start="417:33" pos:end="417:34">==</operator> <name pos:start="417:36" pos:end="417:70"><name pos:start="417:36" pos:end="417:49">RoutePrimitive</name><operator pos:start="417:50" pos:end="417:50">.</operator><name pos:start="417:51" pos:end="417:59">RouteType</name><operator pos:start="417:60" pos:end="417:60">.</operator><name pos:start="417:61" pos:end="417:70">CRISSCROSS</name></name> <operator pos:start="417:72" pos:end="417:73">||</operator> <call pos:start="417:75" pos:end="417:94"><name pos:start="417:75" pos:end="417:92"><name pos:start="417:75" pos:end="417:79">route</name><operator pos:start="417:80" pos:end="417:80">.</operator><name pos:start="417:81" pos:end="417:92">getRouteType</name></name><argument_list pos:start="417:93" pos:end="417:94">()</argument_list></call> <operator pos:start="417:96" pos:end="417:97">==</operator> <name pos:start="417:99" pos:end="417:139"><name pos:start="417:99" pos:end="417:112">RoutePrimitive</name><operator pos:start="417:113" pos:end="417:113">.</operator><name pos:start="417:114" pos:end="417:122">RouteType</name><operator pos:start="417:123" pos:end="417:123">.</operator><name pos:start="417:124" pos:end="417:139">INNER_CRISSCROSS</name></name></expr>)</condition> <block pos:start="417:142" pos:end="419:9">{<block_content pos:start="418:17" pos:end="418:32">
    		<expr_stmt pos:start="418:17" pos:end="418:32"><expr pos:start="418:17" pos:end="418:31"><name pos:start="418:17" pos:end="418:27">splitNumber</name> <operator pos:start="418:29" pos:end="418:29">=</operator> <literal type="number" pos:start="418:31" pos:end="418:31">4</literal></expr>;</expr_stmt>
    	</block_content>}</block></if>
    	<if type="elseif" pos:start="420:9" pos:end="422:9">else if<condition pos:start="420:16" pos:end="420:75">(<expr pos:start="420:17" pos:end="420:74"><call pos:start="420:17" pos:end="420:36"><name pos:start="420:17" pos:end="420:34"><name pos:start="420:17" pos:end="420:21">route</name><operator pos:start="420:22" pos:end="420:22">.</operator><name pos:start="420:23" pos:end="420:34">getRouteType</name></name><argument_list pos:start="420:35" pos:end="420:36">()</argument_list></call> <operator pos:start="420:38" pos:end="420:39">==</operator> <name pos:start="420:41" pos:end="420:74"><name pos:start="420:41" pos:end="420:54">RoutePrimitive</name><operator pos:start="420:55" pos:end="420:55">.</operator><name pos:start="420:56" pos:end="420:64">RouteType</name><operator pos:start="420:65" pos:end="420:65">.</operator><name pos:start="420:66" pos:end="420:74">RIVERBANK</name></name></expr>)</condition> <block pos:start="420:77" pos:end="422:9">{<block_content pos:start="421:17" pos:end="421:32">
    		<expr_stmt pos:start="421:17" pos:end="421:32"><expr pos:start="421:17" pos:end="421:31"><name pos:start="421:17" pos:end="421:27">splitNumber</name> <operator pos:start="421:29" pos:end="421:29">=</operator> <literal type="number" pos:start="421:31" pos:end="421:31">2</literal></expr>;</expr_stmt>
    	</block_content>}</block></if></if_stmt>
    	<return pos:start="423:9" pos:end="423:27">return <expr pos:start="423:16" pos:end="423:26"><name pos:start="423:16" pos:end="423:26">splitNumber</name></expr>;</return>
    </block_content>}</block></function>
  
    <function pos:start="426:5" pos:end="441:5"><type pos:start="426:5" pos:end="426:38"><specifier pos:start="426:5" pos:end="426:10">public</specifier> <specifier pos:start="426:12" pos:end="426:17">static</specifier> <name pos:start="426:19" pos:end="426:38"><name pos:start="426:19" pos:end="426:22">List</name><argument_list type="generic" pos:start="426:23" pos:end="426:38">&lt;<argument pos:start="426:24" pos:end="426:37"><name pos:start="426:24" pos:end="426:37">RoutePrimitive</name></argument>&gt;</argument_list></name></type> <name pos:start="426:40" pos:end="426:59">splitRoutePrimitives</name><parameter_list pos:start="426:60" pos:end="426:143">(<parameter pos:start="426:61" pos:end="426:94"><decl pos:start="426:61" pos:end="426:94"><type pos:start="426:61" pos:end="426:94"><name pos:start="426:61" pos:end="426:80"><name pos:start="426:61" pos:end="426:64">List</name><argument_list type="generic" pos:start="426:65" pos:end="426:80">&lt;<argument pos:start="426:66" pos:end="426:79"><name pos:start="426:66" pos:end="426:79">RoutePrimitive</name></argument>&gt;</argument_list></name></type> <name pos:start="426:82" pos:end="426:94">currentRoutes</name></decl></parameter>, <parameter pos:start="426:97" pos:end="426:119"><decl pos:start="426:97" pos:end="426:119"><type pos:start="426:97" pos:end="426:119"><name pos:start="426:97" pos:end="426:102">double</name></type> <name pos:start="426:104" pos:end="426:119">APERATURE_HEIGHT</name></decl></parameter>, <parameter pos:start="426:122" pos:end="426:142"><decl pos:start="426:122" pos:end="426:142"><type pos:start="426:122" pos:end="426:142"><name pos:start="426:122" pos:end="426:127">double</name></type> <name pos:start="426:129" pos:end="426:142">OVERLAP_FACTOR</name></decl></parameter>)</parameter_list><block pos:start="426:144" pos:end="441:5">{<block_content pos:start="427:9" pos:end="440:25">
    	<decl_stmt pos:start="427:9" pos:end="427:59"><decl pos:start="427:9" pos:end="427:58"><type pos:start="427:9" pos:end="427:28"><name pos:start="427:9" pos:end="427:28"><name pos:start="427:9" pos:end="427:12">List</name><argument_list type="generic" pos:start="427:13" pos:end="427:28">&lt;<argument pos:start="427:14" pos:end="427:27"><name pos:start="427:14" pos:end="427:27">RoutePrimitive</name></argument>&gt;</argument_list></name></type> <name pos:start="427:30" pos:end="427:38">newRoutes</name> <init pos:start="427:40" pos:end="427:58">= <expr pos:start="427:42" pos:end="427:58"><operator pos:start="427:42" pos:end="427:44">new</operator> <call pos:start="427:46" pos:end="427:58"><name pos:start="427:46" pos:end="427:56"><name pos:start="427:46" pos:end="427:54">ArrayList</name><argument_list type="generic" pos:start="427:55" pos:end="427:56">&lt;&gt;</argument_list></name><argument_list pos:start="427:57" pos:end="427:58">()</argument_list></call></expr></init></decl>;</decl_stmt>
    	<for pos:start="428:9" pos:end="439:9">for<control pos:start="428:12" pos:end="428:49">(<init pos:start="428:13" pos:end="428:48"><decl pos:start="428:13" pos:end="428:48"><type pos:start="428:13" pos:end="428:26"><name pos:start="428:13" pos:end="428:26">RoutePrimitive</name></type> <name pos:start="428:28" pos:end="428:32">route</name> <range pos:start="428:34" pos:end="428:48">: <expr pos:start="428:36" pos:end="428:48"><name pos:start="428:36" pos:end="428:48">currentRoutes</name></expr></range></decl></init>)</control> <block pos:start="428:51" pos:end="439:9">{<block_content pos:start="429:17" pos:end="438:127">
    		<decl_stmt pos:start="429:17" pos:end="429:61"><decl pos:start="429:17" pos:end="429:60"><type pos:start="429:17" pos:end="429:19"><name pos:start="429:17" pos:end="429:19">int</name></type> <name pos:start="429:21" pos:end="429:31">splitNumber</name> <init pos:start="429:33" pos:end="429:60">= <expr pos:start="429:35" pos:end="429:60"><call pos:start="429:35" pos:end="429:60"><name pos:start="429:35" pos:end="429:53">determineRouteSplit</name><argument_list pos:start="429:54" pos:end="429:60">(<argument pos:start="429:55" pos:end="429:59"><expr pos:start="429:55" pos:end="429:59"><name pos:start="429:55" pos:end="429:59">route</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		<decl_stmt pos:start="430:17" pos:end="430:65"><decl pos:start="430:17" pos:end="430:64"><type pos:start="430:17" pos:end="430:19"><name pos:start="430:17" pos:end="430:19">int</name></type> <name pos:start="430:21" pos:end="430:31">nodesNumber</name> <init pos:start="430:33" pos:end="430:64">= <expr pos:start="430:35" pos:end="430:64"><call pos:start="430:35" pos:end="430:46"><name pos:start="430:35" pos:end="430:44"><name pos:start="430:35" pos:end="430:39">route</name><operator pos:start="430:40" pos:end="430:40">.</operator><name pos:start="430:41" pos:end="430:44">size</name></name><argument_list pos:start="430:45" pos:end="430:46">()</argument_list></call> <operator pos:start="430:48" pos:end="430:48">/</operator> <name pos:start="430:50" pos:end="430:60">splitNumber</name> <operator pos:start="430:62" pos:end="430:62">+</operator> <literal type="number" pos:start="430:64" pos:end="430:64">1</literal></expr></init></decl>;</decl_stmt>
    		<decl_stmt pos:start="431:17" pos:end="431:32"><decl pos:start="431:17" pos:end="431:31"><type pos:start="431:17" pos:end="431:19"><name pos:start="431:17" pos:end="431:19">int</name></type> <name pos:start="431:21" pos:end="431:27">counter</name> <init pos:start="431:29" pos:end="431:31">= <expr pos:start="431:31" pos:end="431:31"><literal type="number" pos:start="431:31" pos:end="431:31">0</literal></expr></init></decl>;</decl_stmt>
    		<decl_stmt pos:start="432:17" pos:end="432:42"><decl pos:start="432:17" pos:end="432:41"><type pos:start="432:17" pos:end="432:23"><name pos:start="432:17" pos:end="432:23">boolean</name></type> <name pos:start="432:25" pos:end="432:33">lastSplit</name> <init pos:start="432:35" pos:end="432:41">= <expr pos:start="432:37" pos:end="432:41"><literal type="boolean" pos:start="432:37" pos:end="432:41">false</literal></expr></init></decl>;</decl_stmt>
    		<for pos:start="433:17" pos:end="436:17">for<control pos:start="433:20" pos:end="433:56">(<init pos:start="433:21" pos:end="433:30"><decl pos:start="433:21" pos:end="433:29"><type pos:start="433:21" pos:end="433:23"><name pos:start="433:21" pos:end="433:23">int</name></type> <name pos:start="433:25" pos:end="433:25">i</name> <init pos:start="433:27" pos:end="433:29">= <expr pos:start="433:29" pos:end="433:29"><literal type="number" pos:start="433:29" pos:end="433:29">0</literal></expr></init></decl>;</init> <condition pos:start="433:32" pos:end="433:51"><expr pos:start="433:32" pos:end="433:50"><name pos:start="433:32" pos:end="433:32">i</name> <operator pos:start="433:34" pos:end="433:34">&lt;</operator> <name pos:start="433:36" pos:end="433:46">splitNumber</name> <operator pos:start="433:48" pos:end="433:48">-</operator> <literal type="number" pos:start="433:50" pos:end="433:50">1</literal></expr>;</condition> <incr pos:start="433:53" pos:end="433:55"><expr pos:start="433:53" pos:end="433:55"><name pos:start="433:53" pos:end="433:53">i</name><operator pos:start="433:54" pos:end="433:55">++</operator></expr></incr>)</control> <block pos:start="433:58" pos:end="436:17">{<block_content pos:start="434:25" pos:end="435:51">
    			<expr_stmt pos:start="434:25" pos:end="434:135"><expr pos:start="434:25" pos:end="434:134"><call pos:start="434:25" pos:end="434:134"><name pos:start="434:25" pos:end="434:37"><name pos:start="434:25" pos:end="434:33">newRoutes</name><operator pos:start="434:34" pos:end="434:34">.</operator><name pos:start="434:35" pos:end="434:37">add</name></name><argument_list pos:start="434:38" pos:end="434:134">(<argument pos:start="434:39" pos:end="434:133"><expr pos:start="434:39" pos:end="434:133"><call pos:start="434:39" pos:end="434:133"><name pos:start="434:39" pos:end="434:59">smallerRoutePrimitive</name><argument_list pos:start="434:60" pos:end="434:133">(<argument pos:start="434:61" pos:end="434:65"><expr pos:start="434:61" pos:end="434:65"><name pos:start="434:61" pos:end="434:65">route</name></expr></argument>, <argument pos:start="434:68" pos:end="434:78"><expr pos:start="434:68" pos:end="434:78"><name pos:start="434:68" pos:end="434:78">nodesNumber</name></expr></argument>, <argument pos:start="434:81" pos:end="434:87"><expr pos:start="434:81" pos:end="434:87"><name pos:start="434:81" pos:end="434:87">counter</name></expr></argument>, <argument pos:start="434:90" pos:end="434:98"><expr pos:start="434:90" pos:end="434:98"><name pos:start="434:90" pos:end="434:98">lastSplit</name></expr></argument>, <argument pos:start="434:101" pos:end="434:116"><expr pos:start="434:101" pos:end="434:116"><name pos:start="434:101" pos:end="434:116">APERATURE_HEIGHT</name></expr></argument>, <argument pos:start="434:119" pos:end="434:132"><expr pos:start="434:119" pos:end="434:132"><name pos:start="434:119" pos:end="434:132">OVERLAP_FACTOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    			<expr_stmt pos:start="435:25" pos:end="435:51"><expr pos:start="435:25" pos:end="435:50"><name pos:start="435:25" pos:end="435:31">counter</name> <operator pos:start="435:33" pos:end="435:34">+=</operator> <name pos:start="435:36" pos:end="435:46">nodesNumber</name> <operator pos:start="435:48" pos:end="435:48">-</operator> <literal type="number" pos:start="435:50" pos:end="435:50">1</literal></expr>;</expr_stmt>
    		</block_content>}</block></for>
    		<expr_stmt pos:start="437:17" pos:end="437:33"><expr pos:start="437:17" pos:end="437:32"><name pos:start="437:17" pos:end="437:25">lastSplit</name> <operator pos:start="437:27" pos:end="437:27">=</operator> <literal type="boolean" pos:start="437:29" pos:end="437:32">true</literal></expr>;</expr_stmt>
    		<expr_stmt pos:start="438:17" pos:end="438:127"><expr pos:start="438:17" pos:end="438:126"><call pos:start="438:17" pos:end="438:126"><name pos:start="438:17" pos:end="438:29"><name pos:start="438:17" pos:end="438:25">newRoutes</name><operator pos:start="438:26" pos:end="438:26">.</operator><name pos:start="438:27" pos:end="438:29">add</name></name><argument_list pos:start="438:30" pos:end="438:126">(<argument pos:start="438:31" pos:end="438:125"><expr pos:start="438:31" pos:end="438:125"><call pos:start="438:31" pos:end="438:125"><name pos:start="438:31" pos:end="438:51">smallerRoutePrimitive</name><argument_list pos:start="438:52" pos:end="438:125">(<argument pos:start="438:53" pos:end="438:57"><expr pos:start="438:53" pos:end="438:57"><name pos:start="438:53" pos:end="438:57">route</name></expr></argument>, <argument pos:start="438:60" pos:end="438:70"><expr pos:start="438:60" pos:end="438:70"><name pos:start="438:60" pos:end="438:70">nodesNumber</name></expr></argument>, <argument pos:start="438:73" pos:end="438:79"><expr pos:start="438:73" pos:end="438:79"><name pos:start="438:73" pos:end="438:79">counter</name></expr></argument>, <argument pos:start="438:82" pos:end="438:90"><expr pos:start="438:82" pos:end="438:90"><name pos:start="438:82" pos:end="438:90">lastSplit</name></expr></argument>, <argument pos:start="438:93" pos:end="438:108"><expr pos:start="438:93" pos:end="438:108"><name pos:start="438:93" pos:end="438:108">APERATURE_HEIGHT</name></expr></argument>, <argument pos:start="438:111" pos:end="438:124"><expr pos:start="438:111" pos:end="438:124"><name pos:start="438:111" pos:end="438:124">OVERLAP_FACTOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<return pos:start="440:9" pos:end="440:25">return <expr pos:start="440:16" pos:end="440:24"><name pos:start="440:16" pos:end="440:24">newRoutes</name></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="443:5" pos:end="453:5"><type pos:start="443:5" pos:end="443:33"><specifier pos:start="443:5" pos:end="443:11">private</specifier> <specifier pos:start="443:13" pos:end="443:18">static</specifier> <name pos:start="443:20" pos:end="443:33">RoutePrimitive</name></type> <name pos:start="443:35" pos:end="443:55">smallerRoutePrimitive</name><parameter_list pos:start="443:56" pos:end="443:177">(<parameter pos:start="443:57" pos:end="443:76"><decl pos:start="443:57" pos:end="443:76"><type pos:start="443:57" pos:end="443:76"><name pos:start="443:57" pos:end="443:70">RoutePrimitive</name></type> <name pos:start="443:72" pos:end="443:76">route</name></decl></parameter>, <parameter pos:start="443:79" pos:end="443:93"><decl pos:start="443:79" pos:end="443:93"><type pos:start="443:79" pos:end="443:93"><name pos:start="443:79" pos:end="443:81">int</name></type> <name pos:start="443:83" pos:end="443:93">nodesNumber</name></decl></parameter>, <parameter pos:start="443:96" pos:end="443:109"><decl pos:start="443:96" pos:end="443:109"><type pos:start="443:96" pos:end="443:109"><name pos:start="443:96" pos:end="443:98">int</name></type> <name pos:start="443:100" pos:end="443:109">startPoint</name></decl></parameter>, <parameter pos:start="443:112" pos:end="443:128"><decl pos:start="443:112" pos:end="443:128"><type pos:start="443:112" pos:end="443:128"><name pos:start="443:112" pos:end="443:118">boolean</name></type> <name pos:start="443:120" pos:end="443:128">lastSplit</name></decl></parameter>, <parameter pos:start="443:131" pos:end="443:153"><decl pos:start="443:131" pos:end="443:153"><type pos:start="443:131" pos:end="443:153"><name pos:start="443:131" pos:end="443:136">double</name></type> <name pos:start="443:138" pos:end="443:153">APERATURE_HEIGHT</name></decl></parameter>, <parameter pos:start="443:156" pos:end="443:176"><decl pos:start="443:156" pos:end="443:176"><type pos:start="443:156" pos:end="443:176"><name pos:start="443:156" pos:end="443:161">double</name></type> <name pos:start="443:163" pos:end="443:176">OVERLAP_FACTOR</name></decl></parameter>)</parameter_list><block pos:start="443:178" pos:end="453:5">{<block_content pos:start="444:9" pos:end="452:24">
    	<decl_stmt pos:start="444:9" pos:end="444:98"><decl pos:start="444:9" pos:end="444:97"><type pos:start="444:9" pos:end="444:22"><name pos:start="444:9" pos:end="444:22">RoutePrimitive</name></type> <name pos:start="444:24" pos:end="444:31">newRoute</name> <init pos:start="444:33" pos:end="444:97">= <expr pos:start="444:35" pos:end="444:97"><operator pos:start="444:35" pos:end="444:37">new</operator> <call pos:start="444:39" pos:end="444:97"><name pos:start="444:39" pos:end="444:52">RoutePrimitive</name><argument_list pos:start="444:53" pos:end="444:97">(<argument pos:start="444:54" pos:end="444:73"><expr pos:start="444:54" pos:end="444:73"><call pos:start="444:54" pos:end="444:73"><name pos:start="444:54" pos:end="444:71"><name pos:start="444:54" pos:end="444:58">route</name><operator pos:start="444:59" pos:end="444:59">.</operator><name pos:start="444:60" pos:end="444:71">getRouteType</name></name><argument_list pos:start="444:72" pos:end="444:73">()</argument_list></call></expr></argument>,<argument pos:start="444:75" pos:end="444:96"><expr pos:start="444:75" pos:end="444:96"><call pos:start="444:75" pos:end="444:96"><name pos:start="444:75" pos:end="444:94"><name pos:start="444:75" pos:end="444:79">route</name><operator pos:start="444:80" pos:end="444:80">.</operator><name pos:start="444:81" pos:end="444:94">getRouteWeight</name></name><argument_list pos:start="444:95" pos:end="444:96">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<if_stmt pos:start="445:9" pos:end="447:9"><if pos:start="445:9" pos:end="447:9">if<condition pos:start="445:11" pos:end="445:21">(<expr pos:start="445:12" pos:end="445:20"><name pos:start="445:12" pos:end="445:20">lastSplit</name></expr>)</condition> <block pos:start="445:23" pos:end="447:9">{<block_content pos:start="446:17" pos:end="446:57">
    		<expr_stmt pos:start="446:17" pos:end="446:57"><expr pos:start="446:17" pos:end="446:56"><name pos:start="446:17" pos:end="446:27">nodesNumber</name>  <operator pos:start="446:30" pos:end="446:30">=</operator> <call pos:start="446:32" pos:end="446:43"><name pos:start="446:32" pos:end="446:41"><name pos:start="446:32" pos:end="446:36">route</name><operator pos:start="446:37" pos:end="446:37">.</operator><name pos:start="446:38" pos:end="446:41">size</name></name><argument_list pos:start="446:42" pos:end="446:43">()</argument_list></call> <operator pos:start="446:45" pos:end="446:45">-</operator> <name pos:start="446:47" pos:end="446:56">startPoint</name></expr>;</expr_stmt>
    	</block_content>}</block></if></if_stmt>
    	<for pos:start="448:9" pos:end="450:9">for<control pos:start="448:12" pos:end="448:66">(<init pos:start="448:13" pos:end="448:31"><decl pos:start="448:13" pos:end="448:30"><type pos:start="448:13" pos:end="448:15"><name pos:start="448:13" pos:end="448:15">int</name></type> <name pos:start="448:17" pos:end="448:17">i</name> <init pos:start="448:19" pos:end="448:30">= <expr pos:start="448:21" pos:end="448:30"><name pos:start="448:21" pos:end="448:30">startPoint</name></expr></init></decl>;</init> <condition pos:start="448:33" pos:end="448:61"><expr pos:start="448:33" pos:end="448:60"><name pos:start="448:33" pos:end="448:33">i</name> <operator pos:start="448:35" pos:end="448:35">&lt;</operator> <name pos:start="448:37" pos:end="448:46">startPoint</name> <operator pos:start="448:48" pos:end="448:48">+</operator> <name pos:start="448:50" pos:end="448:60">nodesNumber</name></expr>;</condition> <incr pos:start="448:63" pos:end="448:65"><expr pos:start="448:63" pos:end="448:65"><name pos:start="448:63" pos:end="448:63">i</name><operator pos:start="448:64" pos:end="448:65">++</operator></expr></incr>)</control> <block pos:start="448:68" pos:end="450:9">{<block_content pos:start="449:17" pos:end="449:69">
    		<expr_stmt pos:start="449:17" pos:end="449:69"><expr pos:start="449:17" pos:end="449:68"><call pos:start="449:17" pos:end="449:68"><name pos:start="449:17" pos:end="449:41"><name pos:start="449:17" pos:end="449:24">newRoute</name><operator pos:start="449:25" pos:end="449:25">.</operator><name pos:start="449:26" pos:end="449:41">addRouteWaypoint</name></name><argument_list pos:start="449:42" pos:end="449:68">(<argument pos:start="449:43" pos:end="449:67"><expr pos:start="449:43" pos:end="449:67"><call pos:start="449:43" pos:end="449:67"><name pos:start="449:43" pos:end="449:64"><name pos:start="449:43" pos:end="449:47">route</name><operator pos:start="449:48" pos:end="449:48">.</operator><name pos:start="449:49" pos:end="449:64">getRouteWaypoint</name></name><argument_list pos:start="449:65" pos:end="449:67">(<argument pos:start="449:66" pos:end="449:66"><expr pos:start="449:66" pos:end="449:66"><name pos:start="449:66" pos:end="449:66">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<expr_stmt pos:start="451:9" pos:end="451:75"><expr pos:start="451:9" pos:end="451:74"><call pos:start="451:9" pos:end="451:74"><name pos:start="451:9" pos:end="451:30">generateImageWaypoints</name><argument_list pos:start="451:31" pos:end="451:74">(<argument pos:start="451:32" pos:end="451:39"><expr pos:start="451:32" pos:end="451:39"><name pos:start="451:32" pos:end="451:39">newRoute</name></expr></argument>, <argument pos:start="451:42" pos:end="451:57"><expr pos:start="451:42" pos:end="451:57"><name pos:start="451:42" pos:end="451:57">APERATURE_HEIGHT</name></expr></argument>, <argument pos:start="451:60" pos:end="451:73"><expr pos:start="451:60" pos:end="451:73"><name pos:start="451:60" pos:end="451:73">OVERLAP_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<return pos:start="452:9" pos:end="452:24">return <expr pos:start="452:16" pos:end="452:23"><name pos:start="452:16" pos:end="452:23">newRoute</name></expr>;</return>
    </block_content>}</block></function>
<comment type="line" pos:start="454:1" pos:end="454:89">//    // NOTE: change all of these to expect IFlightRoute instead of ExportRoutePrimitive</comment>
<comment type="line" pos:start="455:1" pos:end="455:126">//    public static ExportAllocationInformation makeExportAllocationInformation(AllocationInformation allocationInformation) {</comment>
<comment type="line" pos:start="456:1" pos:end="456:97">//    	ExportAllocationInformation newAllocationInformation = new ExportAllocationInformation();</comment>
<comment type="line" pos:start="457:1" pos:end="457:29">//    	double altitude = 15;</comment>
<comment type="line" pos:start="458:1" pos:end="458:72">//    	for(Drone drone : allocationInformation.getDroneAllocations()) {</comment>
<comment type="line" pos:start="459:1" pos:end="459:94">//    		newAllocationInformation.addDroneAllocation(makeExportDrone(drone, altitude));</comment>
<comment type="line" pos:start="460:1" pos:end="460:30">//    		altitude += 5;</comment>
<comment type="line" pos:start="461:1" pos:end="461:9">//    	}</comment>
<comment type="line" pos:start="462:1" pos:end="462:99">//    	newAllocationInformation.setMetricsStatistics(allocationInformation.getMetricStatistics());</comment>
<comment type="line" pos:start="463:1" pos:end="463:40">//    	return newAllocationInformation;</comment>
<comment type="line" pos:start="464:1" pos:end="464:7">//    }</comment>
    
<comment type="line" pos:start="466:1" pos:end="466:79">//    public static ExportDrone makeExportDrone(Drone drone, double altitude) {</comment>
<comment type="line" pos:start="467:1" pos:end="467:49">//    	ExportDrone newDrone = new ExportDrone();</comment>
<comment type="line" pos:start="468:1" pos:end="468:135">//    	newDrone.setDroneStartPoint(new LlaCoordinate(drone.getDroneStartPoint().getX(), drone.getDroneStartPoint().getY(), altitude));</comment>
<comment type="line" pos:start="469:1" pos:end="469:141">//    	newDrone.setDroneHomeLocation(new LlaCoordinate(drone.getDroneHomeLocation().getX(), drone.getDroneHomeLocation().getY(), altitude));</comment>
<comment type="line" pos:start="470:1" pos:end="470:44">//    	newDrone.setUAVId(drone.getUAVId());</comment>
<comment type="line" pos:start="471:1" pos:end="471:116">//    	newDrone.setDroneRouteAssignment(makeExportDroneRouteAssignment(drone.getDroneRouteAssignment(), altitude));</comment>
<comment type="line" pos:start="472:1" pos:end="472:24">//    	return newDrone;</comment>
<comment type="line" pos:start="473:1" pos:end="473:7">//    }</comment>
<comment type="line" pos:start="474:1" pos:end="474:8">//    	</comment>
<comment type="line" pos:start="475:1" pos:end="475:135">//    private static ExportDroneRouteAssignment makeExportDroneRouteAssignment(DroneRouteAssignment routeAssignment, double altitude) {</comment>
<comment type="line" pos:start="476:1" pos:end="476:89">//    	ExportDroneRouteAssignment newRouteAssignment = new ExportDroneRouteAssignment();</comment>
<comment type="line" pos:start="477:1" pos:end="477:77">//    	HashMap&lt;RouteType, Integer&gt; routePrimitiveCounters = new HashMap&lt;&gt;();</comment>
<comment type="line" pos:start="478:1" pos:end="478:60">//    	routePrimitiveCounters.put(RouteType.CRISSCROSS, 0);</comment>
<comment type="line" pos:start="479:1" pos:end="479:59">//    	routePrimitiveCounters.put(RouteType.RIVERBANK, 0);</comment>
<comment type="line" pos:start="480:1" pos:end="480:62">//    	routePrimitiveCounters.put(RouteType.PRIORITYAREA, 0);</comment>
<comment type="line" pos:start="481:1" pos:end="481:68">//    	for(RoutePrimitive routePrimitive : routeAssignment.get()) {</comment>
<comment type="line" pos:start="482:1" pos:end="482:106">//    		newRouteAssignment.add(makeFlightRoute(routePrimitive, altitude, routePrimitiveCounters));</comment>
<comment type="line" pos:start="483:1" pos:end="483:9">//    	}</comment>
<comment type="line" pos:start="484:1" pos:end="484:34">//    	return newRouteAssignment;</comment>
<comment type="line" pos:start="485:1" pos:end="485:7">//    }</comment>
    
    <function pos:start="487:5" pos:end="502:5"><type pos:start="487:5" pos:end="487:25"><specifier pos:start="487:5" pos:end="487:11">private</specifier> <specifier pos:start="487:13" pos:end="487:18">static</specifier> <name pos:start="487:20" pos:end="487:25">String</name></type> <name pos:start="487:27" pos:end="487:47">assignFlightRouteName</name><parameter_list pos:start="487:48" pos:end="487:122">(<parameter pos:start="487:49" pos:end="487:68"><decl pos:start="487:49" pos:end="487:68"><type pos:start="487:49" pos:end="487:68"><name pos:start="487:49" pos:end="487:62">RoutePrimitive</name></type> <name pos:start="487:64" pos:end="487:68">route</name></decl></parameter>, <parameter pos:start="487:71" pos:end="487:121"><decl pos:start="487:71" pos:end="487:121"><type pos:start="487:71" pos:end="487:121"><name pos:start="487:71" pos:end="487:112"><name pos:start="487:71" pos:end="487:77">HashMap</name><argument_list type="generic" pos:start="487:78" pos:end="487:112">&lt;<argument pos:start="487:79" pos:end="487:102"><name pos:start="487:79" pos:end="487:102"><name pos:start="487:79" pos:end="487:92">RoutePrimitive</name><operator pos:start="487:93" pos:end="487:93">.</operator><name pos:start="487:94" pos:end="487:102">RouteType</name></name></argument>, <argument pos:start="487:105" pos:end="487:111"><name pos:start="487:105" pos:end="487:111">Integer</name></argument>&gt;</argument_list></name></type> <name pos:start="487:114" pos:end="487:121">counters</name></decl></parameter>)</parameter_list> <block pos:start="487:124" pos:end="502:5">{<block_content pos:start="488:9" pos:end="501:20">
    	<decl_stmt pos:start="488:9" pos:end="488:51"><decl pos:start="488:9" pos:end="488:50"><type pos:start="488:9" pos:end="488:17"><name pos:start="488:9" pos:end="488:17">RouteType</name></type> <name pos:start="488:19" pos:end="488:27">routeType</name> <init pos:start="488:29" pos:end="488:50">= <expr pos:start="488:31" pos:end="488:50"><call pos:start="488:31" pos:end="488:50"><name pos:start="488:31" pos:end="488:48"><name pos:start="488:31" pos:end="488:35">route</name><operator pos:start="488:36" pos:end="488:36">.</operator><name pos:start="488:37" pos:end="488:48">getRouteType</name></name><argument_list pos:start="488:49" pos:end="488:50">()</argument_list></call></expr></init></decl>;</decl_stmt>
    	<decl_stmt pos:start="489:9" pos:end="489:20"><decl pos:start="489:9" pos:end="489:19"><type pos:start="489:9" pos:end="489:14"><name pos:start="489:9" pos:end="489:14">String</name></type> <name pos:start="489:16" pos:end="489:19">name</name></decl>;</decl_stmt>
    	<if_stmt pos:start="490:9" pos:end="500:9"><if pos:start="490:9" pos:end="493:9">if<condition pos:start="490:11" pos:end="490:45">(<expr pos:start="490:12" pos:end="490:44"><name pos:start="490:12" pos:end="490:20">routeType</name> <operator pos:start="490:22" pos:end="490:23">==</operator> <name pos:start="490:25" pos:end="490:44"><name pos:start="490:25" pos:end="490:33">RouteType</name><operator pos:start="490:34" pos:end="490:34">.</operator><name pos:start="490:35" pos:end="490:44">CRISSCROSS</name></name></expr>)</condition> <block pos:start="490:47" pos:end="493:9">{<block_content pos:start="491:17" pos:end="492:91">
    		<expr_stmt pos:start="491:17" pos:end="491:80"><expr pos:start="491:17" pos:end="491:79"><name pos:start="491:17" pos:end="491:20">name</name> <operator pos:start="491:22" pos:end="491:22">=</operator> <literal type="string" pos:start="491:24" pos:end="491:42">"CrissCross Route "</literal> <operator pos:start="491:44" pos:end="491:44">+</operator> <call pos:start="491:46" pos:end="491:79"><name pos:start="491:46" pos:end="491:57"><name pos:start="491:46" pos:end="491:53">counters</name><operator pos:start="491:54" pos:end="491:54">.</operator><name pos:start="491:55" pos:end="491:57">get</name></name><argument_list pos:start="491:58" pos:end="491:79">(<argument pos:start="491:59" pos:end="491:78"><expr pos:start="491:59" pos:end="491:78"><name pos:start="491:59" pos:end="491:78"><name pos:start="491:59" pos:end="491:67">RouteType</name><operator pos:start="491:68" pos:end="491:68">.</operator><name pos:start="491:69" pos:end="491:78">CRISSCROSS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt pos:start="492:17" pos:end="492:91"><expr pos:start="492:17" pos:end="492:90"><call pos:start="492:17" pos:end="492:90"><name pos:start="492:17" pos:end="492:28"><name pos:start="492:17" pos:end="492:24">counters</name><operator pos:start="492:25" pos:end="492:25">.</operator><name pos:start="492:26" pos:end="492:28">put</name></name><argument_list pos:start="492:29" pos:end="492:90">(<argument pos:start="492:30" pos:end="492:49"><expr pos:start="492:30" pos:end="492:49"><name pos:start="492:30" pos:end="492:49"><name pos:start="492:30" pos:end="492:38">RouteType</name><operator pos:start="492:39" pos:end="492:39">.</operator><name pos:start="492:40" pos:end="492:49">CRISSCROSS</name></name></expr></argument>, <argument pos:start="492:52" pos:end="492:89"><expr pos:start="492:52" pos:end="492:89"><call pos:start="492:52" pos:end="492:85"><name pos:start="492:52" pos:end="492:63"><name pos:start="492:52" pos:end="492:59">counters</name><operator pos:start="492:60" pos:end="492:60">.</operator><name pos:start="492:61" pos:end="492:63">get</name></name><argument_list pos:start="492:64" pos:end="492:85">(<argument pos:start="492:65" pos:end="492:84"><expr pos:start="492:65" pos:end="492:84"><name pos:start="492:65" pos:end="492:84"><name pos:start="492:65" pos:end="492:73">RouteType</name><operator pos:start="492:74" pos:end="492:74">.</operator><name pos:start="492:75" pos:end="492:84">CRISSCROSS</name></name></expr></argument>)</argument_list></call> <operator pos:start="492:87" pos:end="492:87">+</operator> <literal type="number" pos:start="492:89" pos:end="492:89">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></if>
    	<if type="elseif" pos:start="494:9" pos:end="497:9">else if<condition pos:start="494:16" pos:end="494:49">(<expr pos:start="494:17" pos:end="494:48"><name pos:start="494:17" pos:end="494:25">routeType</name> <operator pos:start="494:27" pos:end="494:28">==</operator> <name pos:start="494:30" pos:end="494:48"><name pos:start="494:30" pos:end="494:38">RouteType</name><operator pos:start="494:39" pos:end="494:39">.</operator><name pos:start="494:40" pos:end="494:48">RIVERBANK</name></name></expr>)</condition> <block pos:start="494:51" pos:end="497:9">{<block_content pos:start="495:17" pos:end="496:89">
    		<expr_stmt pos:start="495:17" pos:end="495:78"><expr pos:start="495:17" pos:end="495:77"><name pos:start="495:17" pos:end="495:20">name</name> <operator pos:start="495:22" pos:end="495:22">=</operator> <literal type="string" pos:start="495:24" pos:end="495:41">"RiverBank Route "</literal> <operator pos:start="495:43" pos:end="495:43">+</operator> <call pos:start="495:45" pos:end="495:77"><name pos:start="495:45" pos:end="495:56"><name pos:start="495:45" pos:end="495:52">counters</name><operator pos:start="495:53" pos:end="495:53">.</operator><name pos:start="495:54" pos:end="495:56">get</name></name><argument_list pos:start="495:57" pos:end="495:77">(<argument pos:start="495:58" pos:end="495:76"><expr pos:start="495:58" pos:end="495:76"><name pos:start="495:58" pos:end="495:76"><name pos:start="495:58" pos:end="495:66">RouteType</name><operator pos:start="495:67" pos:end="495:67">.</operator><name pos:start="495:68" pos:end="495:76">RIVERBANK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt pos:start="496:17" pos:end="496:89"><expr pos:start="496:17" pos:end="496:88"><call pos:start="496:17" pos:end="496:88"><name pos:start="496:17" pos:end="496:28"><name pos:start="496:17" pos:end="496:24">counters</name><operator pos:start="496:25" pos:end="496:25">.</operator><name pos:start="496:26" pos:end="496:28">put</name></name><argument_list pos:start="496:29" pos:end="496:88">(<argument pos:start="496:30" pos:end="496:48"><expr pos:start="496:30" pos:end="496:48"><name pos:start="496:30" pos:end="496:48"><name pos:start="496:30" pos:end="496:38">RouteType</name><operator pos:start="496:39" pos:end="496:39">.</operator><name pos:start="496:40" pos:end="496:48">RIVERBANK</name></name></expr></argument>, <argument pos:start="496:51" pos:end="496:87"><expr pos:start="496:51" pos:end="496:87"><call pos:start="496:51" pos:end="496:83"><name pos:start="496:51" pos:end="496:62"><name pos:start="496:51" pos:end="496:58">counters</name><operator pos:start="496:59" pos:end="496:59">.</operator><name pos:start="496:60" pos:end="496:62">get</name></name><argument_list pos:start="496:63" pos:end="496:83">(<argument pos:start="496:64" pos:end="496:82"><expr pos:start="496:64" pos:end="496:82"><name pos:start="496:64" pos:end="496:82"><name pos:start="496:64" pos:end="496:72">RouteType</name><operator pos:start="496:73" pos:end="496:73">.</operator><name pos:start="496:74" pos:end="496:82">RIVERBANK</name></name></expr></argument>)</argument_list></call> <operator pos:start="496:85" pos:end="496:85">+</operator> <literal type="number" pos:start="496:87" pos:end="496:87">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></if> <else pos:start="497:11" pos:end="500:9">else <block pos:start="497:16" pos:end="500:9">{<block_content pos:start="498:17" pos:end="499:95">
    		<expr_stmt pos:start="498:17" pos:end="498:84"><expr pos:start="498:17" pos:end="498:83"><name pos:start="498:17" pos:end="498:20">name</name> <operator pos:start="498:22" pos:end="498:22">=</operator> <literal type="string" pos:start="498:24" pos:end="498:44">"PriorityArea Route "</literal> <operator pos:start="498:46" pos:end="498:46">+</operator> <call pos:start="498:48" pos:end="498:83"><name pos:start="498:48" pos:end="498:59"><name pos:start="498:48" pos:end="498:55">counters</name><operator pos:start="498:56" pos:end="498:56">.</operator><name pos:start="498:57" pos:end="498:59">get</name></name><argument_list pos:start="498:60" pos:end="498:83">(<argument pos:start="498:61" pos:end="498:82"><expr pos:start="498:61" pos:end="498:82"><name pos:start="498:61" pos:end="498:82"><name pos:start="498:61" pos:end="498:69">RouteType</name><operator pos:start="498:70" pos:end="498:70">.</operator><name pos:start="498:71" pos:end="498:82">PRIORITYAREA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<expr_stmt pos:start="499:17" pos:end="499:95"><expr pos:start="499:17" pos:end="499:94"><call pos:start="499:17" pos:end="499:94"><name pos:start="499:17" pos:end="499:28"><name pos:start="499:17" pos:end="499:24">counters</name><operator pos:start="499:25" pos:end="499:25">.</operator><name pos:start="499:26" pos:end="499:28">put</name></name><argument_list pos:start="499:29" pos:end="499:94">(<argument pos:start="499:30" pos:end="499:51"><expr pos:start="499:30" pos:end="499:51"><name pos:start="499:30" pos:end="499:51"><name pos:start="499:30" pos:end="499:38">RouteType</name><operator pos:start="499:39" pos:end="499:39">.</operator><name pos:start="499:40" pos:end="499:51">PRIORITYAREA</name></name></expr></argument>, <argument pos:start="499:54" pos:end="499:93"><expr pos:start="499:54" pos:end="499:93"><call pos:start="499:54" pos:end="499:89"><name pos:start="499:54" pos:end="499:65"><name pos:start="499:54" pos:end="499:61">counters</name><operator pos:start="499:62" pos:end="499:62">.</operator><name pos:start="499:63" pos:end="499:65">get</name></name><argument_list pos:start="499:66" pos:end="499:89">(<argument pos:start="499:67" pos:end="499:88"><expr pos:start="499:67" pos:end="499:88"><name pos:start="499:67" pos:end="499:88"><name pos:start="499:67" pos:end="499:75">RouteType</name><operator pos:start="499:76" pos:end="499:76">.</operator><name pos:start="499:77" pos:end="499:88">PRIORITYAREA</name></name></expr></argument>)</argument_list></call> <operator pos:start="499:91" pos:end="499:91">+</operator> <literal type="number" pos:start="499:93" pos:end="499:93">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></else></if_stmt>
    	<return pos:start="501:9" pos:end="501:20">return <expr pos:start="501:16" pos:end="501:19"><name pos:start="501:16" pos:end="501:19">name</name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="line" pos:start="504:5" pos:end="504:75">//edit to return IFlightRoute with name as something with type of route</comment>
    <function pos:start="505:5" pos:end="512:5"><type pos:start="505:5" pos:end="505:30"><specifier pos:start="505:5" pos:end="505:10">public</specifier> <specifier pos:start="505:12" pos:end="505:17">static</specifier> <name pos:start="505:19" pos:end="505:30">IFlightRoute</name></type> <name pos:start="505:32" pos:end="505:46">makeFlightRoute</name><parameter_list pos:start="505:47" pos:end="505:138">(<parameter pos:start="505:48" pos:end="505:67"><decl pos:start="505:48" pos:end="505:67"><type pos:start="505:48" pos:end="505:67"><name pos:start="505:48" pos:end="505:61">RoutePrimitive</name></type> <name pos:start="505:63" pos:end="505:67">route</name></decl></parameter>, <parameter pos:start="505:70" pos:end="505:84"><decl pos:start="505:70" pos:end="505:84"><type pos:start="505:70" pos:end="505:84"><name pos:start="505:70" pos:end="505:75">double</name></type> <name pos:start="505:77" pos:end="505:84">altitude</name></decl></parameter>, <parameter pos:start="505:87" pos:end="505:137"><decl pos:start="505:87" pos:end="505:137"><type pos:start="505:87" pos:end="505:137"><name pos:start="505:87" pos:end="505:128"><name pos:start="505:87" pos:end="505:93">HashMap</name><argument_list type="generic" pos:start="505:94" pos:end="505:128">&lt;<argument pos:start="505:95" pos:end="505:118"><name pos:start="505:95" pos:end="505:118"><name pos:start="505:95" pos:end="505:108">RoutePrimitive</name><operator pos:start="505:109" pos:end="505:109">.</operator><name pos:start="505:110" pos:end="505:118">RouteType</name></name></argument>, <argument pos:start="505:121" pos:end="505:127"><name pos:start="505:121" pos:end="505:127">Integer</name></argument>&gt;</argument_list></name></type> <name pos:start="505:130" pos:end="505:137">counters</name></decl></parameter>)</parameter_list> <block pos:start="505:140" pos:end="512:5">{<block_content pos:start="506:9" pos:end="511:24">
    	<decl_stmt pos:start="506:9" pos:end="506:50"><decl pos:start="506:9" pos:end="506:49"><type pos:start="506:9" pos:end="506:20"><name pos:start="506:9" pos:end="506:20">IFlightRoute</name></type> <name pos:start="506:22" pos:end="506:29">newRoute</name> <init pos:start="506:31" pos:end="506:49">= <expr pos:start="506:33" pos:end="506:49"><operator pos:start="506:33" pos:end="506:35">new</operator> <call pos:start="506:37" pos:end="506:49"><name pos:start="506:37" pos:end="506:47">FlightRoute</name><argument_list pos:start="506:48" pos:end="506:49">()</argument_list></call></expr></init></decl>;</decl_stmt>
    	<for pos:start="507:9" pos:end="509:9">for<control pos:start="507:12" pos:end="507:52">(<init pos:start="507:13" pos:end="507:51"><decl pos:start="507:13" pos:end="507:51"><type pos:start="507:13" pos:end="507:26"><name pos:start="507:13" pos:end="507:26"><name pos:start="507:13" pos:end="507:19">Point2D</name><operator pos:start="507:20" pos:end="507:20">.</operator><name pos:start="507:21" pos:end="507:26">Double</name></name></type> <name pos:start="507:28" pos:end="507:32">entry</name> <range pos:start="507:34" pos:end="507:51">: <expr pos:start="507:36" pos:end="507:51"><call pos:start="507:36" pos:end="507:51"><name pos:start="507:36" pos:end="507:49"><name pos:start="507:36" pos:end="507:40">route</name><operator pos:start="507:41" pos:end="507:41">.</operator><name pos:start="507:42" pos:end="507:49">getRoute</name></name><argument_list pos:start="507:50" pos:end="507:51">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="507:54" pos:end="509:9">{<block_content pos:start="508:17" pos:end="508:108">
    		<expr_stmt pos:start="508:17" pos:end="508:108"><expr pos:start="508:17" pos:end="508:107"><call pos:start="508:17" pos:end="508:107"><name pos:start="508:17" pos:end="508:36"><name pos:start="508:17" pos:end="508:24">newRoute</name><operator pos:start="508:25" pos:end="508:25">.</operator><name pos:start="508:26" pos:end="508:36">addWaypoint</name></name><argument_list pos:start="508:37" pos:end="508:107">(<argument pos:start="508:38" pos:end="508:106"><expr pos:start="508:38" pos:end="508:106"><operator pos:start="508:38" pos:end="508:40">new</operator> <call pos:start="508:42" pos:end="508:106"><name pos:start="508:42" pos:end="508:49">Waypoint</name><argument_list pos:start="508:50" pos:end="508:106">(<argument pos:start="508:51" pos:end="508:105"><expr pos:start="508:51" pos:end="508:105"><operator pos:start="508:51" pos:end="508:53">new</operator> <call pos:start="508:55" pos:end="508:105"><name pos:start="508:55" pos:end="508:67">LlaCoordinate</name><argument_list pos:start="508:68" pos:end="508:105">(<argument pos:start="508:69" pos:end="508:80"><expr pos:start="508:69" pos:end="508:80"><call pos:start="508:69" pos:end="508:80"><name pos:start="508:69" pos:end="508:78"><name pos:start="508:69" pos:end="508:73">entry</name><operator pos:start="508:74" pos:end="508:74">.</operator><name pos:start="508:75" pos:end="508:78">getX</name></name><argument_list pos:start="508:79" pos:end="508:80">()</argument_list></call></expr></argument>, <argument pos:start="508:83" pos:end="508:94"><expr pos:start="508:83" pos:end="508:94"><call pos:start="508:83" pos:end="508:94"><name pos:start="508:83" pos:end="508:92"><name pos:start="508:83" pos:end="508:87">entry</name><operator pos:start="508:88" pos:end="508:88">.</operator><name pos:start="508:89" pos:end="508:92">getY</name></name><argument_list pos:start="508:93" pos:end="508:94">()</argument_list></call></expr></argument>, <argument pos:start="508:97" pos:end="508:104"><expr pos:start="508:97" pos:end="508:104"><name pos:start="508:97" pos:end="508:104">altitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<expr_stmt pos:start="510:9" pos:end="510:65"><expr pos:start="510:9" pos:end="510:64"><call pos:start="510:9" pos:end="510:64"><name pos:start="510:9" pos:end="510:24"><name pos:start="510:9" pos:end="510:16">newRoute</name><operator pos:start="510:17" pos:end="510:17">.</operator><name pos:start="510:18" pos:end="510:24">setName</name></name><argument_list pos:start="510:25" pos:end="510:64">(<argument pos:start="510:26" pos:end="510:63"><expr pos:start="510:26" pos:end="510:63"><call pos:start="510:26" pos:end="510:63"><name pos:start="510:26" pos:end="510:46">assignFlightRouteName</name><argument_list pos:start="510:47" pos:end="510:63">(<argument pos:start="510:48" pos:end="510:52"><expr pos:start="510:48" pos:end="510:52"><name pos:start="510:48" pos:end="510:52">route</name></expr></argument>, <argument pos:start="510:55" pos:end="510:62"><expr pos:start="510:55" pos:end="510:62"><name pos:start="510:55" pos:end="510:62">counters</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<return pos:start="511:9" pos:end="511:24">return <expr pos:start="511:16" pos:end="511:23"><name pos:start="511:16" pos:end="511:23">newRoute</name></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="514:5" pos:end="521:5"><type pos:start="514:5" pos:end="514:30"><specifier pos:start="514:5" pos:end="514:10">public</specifier> <specifier pos:start="514:12" pos:end="514:17">static</specifier> <name pos:start="514:19" pos:end="514:30">SourcePoints</name></type> <name pos:start="514:32" pos:end="514:52">transformPriorityArea</name><parameter_list pos:start="514:53" pos:end="514:94">(<parameter pos:start="514:54" pos:end="514:69"><decl pos:start="514:54" pos:end="514:69"><type pos:start="514:54" pos:end="514:69"><name pos:start="514:54" pos:end="514:64">IMappedItem</name></type> <name pos:start="514:66" pos:end="514:69">area</name></decl></parameter>, <parameter pos:start="514:72" pos:end="514:93"><decl pos:start="514:72" pos:end="514:93"><type pos:start="514:72" pos:end="514:93"><name pos:start="514:72" pos:end="514:77">double</name></type> <name pos:start="514:79" pos:end="514:93">centralLatitude</name></decl></parameter>)</parameter_list><block pos:start="514:95" pos:end="521:5">{<block_content pos:start="515:9" pos:end="520:23">
    	<decl_stmt pos:start="515:9" pos:end="515:70"><decl pos:start="515:9" pos:end="515:69"><type pos:start="515:9" pos:end="515:20"><name pos:start="515:9" pos:end="515:20">SourcePoints</name></type> <name pos:start="515:22" pos:end="515:28">newArea</name> <init pos:start="515:30" pos:end="515:69">= <expr pos:start="515:32" pos:end="515:69"><operator pos:start="515:32" pos:end="515:34">new</operator> <call pos:start="515:36" pos:end="515:69"><name pos:start="515:36" pos:end="515:47">SourcePoints</name><argument_list pos:start="515:48" pos:end="515:69">(<argument pos:start="515:49" pos:end="515:68"><expr pos:start="515:49" pos:end="515:68"><call pos:start="515:49" pos:end="515:68"><name pos:start="515:49" pos:end="515:66"><name pos:start="515:49" pos:end="515:52">area</name><operator pos:start="515:53" pos:end="515:53">.</operator><name pos:start="515:54" pos:end="515:66">getImportance</name></name><argument_list pos:start="515:67" pos:end="515:68">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<for pos:start="516:9" pos:end="519:9">for<control pos:start="516:12" pos:end="516:56">(<init pos:start="516:13" pos:end="516:55"><decl pos:start="516:13" pos:end="516:55"><type pos:start="516:13" pos:end="516:25"><name pos:start="516:13" pos:end="516:25">LlaCoordinate</name></type> <name pos:start="516:27" pos:end="516:31">entry</name> <range pos:start="516:33" pos:end="516:55">: <expr pos:start="516:35" pos:end="516:55"><call pos:start="516:35" pos:end="516:55"><name pos:start="516:35" pos:end="516:53"><name pos:start="516:35" pos:end="516:38">area</name><operator pos:start="516:39" pos:end="516:39">.</operator><name pos:start="516:40" pos:end="516:53">getCoordinates</name></name><argument_list pos:start="516:54" pos:end="516:55">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="516:58" pos:end="519:9">{<block_content pos:start="517:17" pos:end="518:91">
    		<decl_stmt pos:start="517:17" pos:end="517:104"><decl pos:start="517:17" pos:end="517:103"><type pos:start="517:17" pos:end="517:30"><name pos:start="517:17" pos:end="517:30"><name pos:start="517:17" pos:end="517:23">Point2D</name><operator pos:start="517:24" pos:end="517:24">.</operator><name pos:start="517:25" pos:end="517:30">Double</name></name></type> <name pos:start="517:32" pos:end="517:39">newPoint</name> <init pos:start="517:41" pos:end="517:103">= <expr pos:start="517:43" pos:end="517:103"><operator pos:start="517:43" pos:end="517:45">new</operator> <call pos:start="517:47" pos:end="517:103"><name pos:start="517:47" pos:end="517:60"><name pos:start="517:47" pos:end="517:53">Point2D</name><operator pos:start="517:54" pos:end="517:54">.</operator><name pos:start="517:55" pos:end="517:60">Double</name></name><argument_list pos:start="517:61" pos:end="517:103">(<argument pos:start="517:62" pos:end="517:80"><expr pos:start="517:62" pos:end="517:80"><call pos:start="517:62" pos:end="517:80"><name pos:start="517:62" pos:end="517:78"><name pos:start="517:62" pos:end="517:66">entry</name><operator pos:start="517:67" pos:end="517:67">.</operator><name pos:start="517:68" pos:end="517:78">getLatitude</name></name><argument_list pos:start="517:79" pos:end="517:80">()</argument_list></call></expr></argument>, <argument pos:start="517:83" pos:end="517:102"><expr pos:start="517:83" pos:end="517:102"><call pos:start="517:83" pos:end="517:102"><name pos:start="517:83" pos:end="517:100"><name pos:start="517:83" pos:end="517:87">entry</name><operator pos:start="517:88" pos:end="517:88">.</operator><name pos:start="517:89" pos:end="517:100">getLongitude</name></name><argument_list pos:start="517:101" pos:end="517:102">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		<expr_stmt pos:start="518:17" pos:end="518:91"><expr pos:start="518:17" pos:end="518:90"><call pos:start="518:17" pos:end="518:90"><name pos:start="518:17" pos:end="518:38"><name pos:start="518:17" pos:end="518:23">newArea</name><operator pos:start="518:24" pos:end="518:24">.</operator><name pos:start="518:25" pos:end="518:38">addSourcePoint</name></name><argument_list pos:start="518:39" pos:end="518:90">(<argument pos:start="518:40" pos:end="518:89"><expr pos:start="518:40" pos:end="518:89"><call pos:start="518:40" pos:end="518:89"><name pos:start="518:40" pos:end="518:62"><name pos:start="518:40" pos:end="518:47">Geometry</name><operator pos:start="518:48" pos:end="518:48">.</operator><name pos:start="518:49" pos:end="518:62">gpsToCartesian</name></name><argument_list pos:start="518:63" pos:end="518:89">(<argument pos:start="518:64" pos:end="518:71"><expr pos:start="518:64" pos:end="518:71"><name pos:start="518:64" pos:end="518:71">newPoint</name></expr></argument>, <argument pos:start="518:74" pos:end="518:88"><expr pos:start="518:74" pos:end="518:88"><name pos:start="518:74" pos:end="518:88">centralLatitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></for>
    	<return pos:start="520:9" pos:end="520:23">return <expr pos:start="520:16" pos:end="520:22"><name pos:start="520:16" pos:end="520:22">newArea</name></expr>;</return>
    </block_content>}</block></function>
    
    <function pos:start="523:5" pos:end="539:5"><type pos:start="523:5" pos:end="523:22"><specifier pos:start="523:5" pos:end="523:10">public</specifier> <specifier pos:start="523:12" pos:end="523:17">static</specifier> <name pos:start="523:19" pos:end="523:22">void</name></type> <name pos:start="523:24" pos:end="523:40">printRiverSegment</name><parameter_list pos:start="523:41" pos:end="523:78">(<parameter pos:start="523:42" pos:end="523:77"><decl pos:start="523:42" pos:end="523:77"><type pos:start="523:42" pos:end="523:64"><name pos:start="523:42" pos:end="523:64"><name pos:start="523:42" pos:end="523:47">Vector</name><argument_list type="generic" pos:start="523:48" pos:end="523:64">&lt;<argument pos:start="523:49" pos:end="523:63"><name pos:start="523:49" pos:end="523:63">RiverSubsegment</name></argument>&gt;</argument_list></name></type> <name pos:start="523:66" pos:end="523:77">riverVectors</name></decl></parameter>)</parameter_list> <block pos:start="523:80" pos:end="539:5">{<block_content pos:start="524:9" pos:end="538:40">
    	<expr_stmt pos:start="524:9" pos:end="524:45"><expr pos:start="524:9" pos:end="524:44"><call pos:start="524:9" pos:end="524:44"><name pos:start="524:9" pos:end="524:26"><name pos:start="524:9" pos:end="524:14">System</name><operator pos:start="524:15" pos:end="524:15">.</operator><name pos:start="524:16" pos:end="524:18">out</name><operator pos:start="524:19" pos:end="524:19">.</operator><name pos:start="524:20" pos:end="524:26">println</name></name><argument_list pos:start="524:27" pos:end="524:44">(<argument pos:start="524:28" pos:end="524:43"><expr pos:start="524:28" pos:end="524:43"><literal type="string" pos:start="524:28" pos:end="524:43">"riverVectors: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:start="525:17" pos:end="525:50">//printout for graph visualization</comment>
		<expr_stmt pos:start="526:17" pos:end="526:39"><expr pos:start="526:17" pos:end="526:38"><call pos:start="526:17" pos:end="526:38"><name pos:start="526:17" pos:end="526:33"><name pos:start="526:17" pos:end="526:22">System</name><operator pos:start="526:23" pos:end="526:23">.</operator><name pos:start="526:24" pos:end="526:26">out</name><operator pos:start="526:27" pos:end="526:27">.</operator><name pos:start="526:28" pos:end="526:33">printf</name></name><argument_list pos:start="526:34" pos:end="526:38">(<argument pos:start="526:35" pos:end="526:37"><expr pos:start="526:35" pos:end="526:37"><literal type="string" pos:start="526:35" pos:end="526:37">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:start="527:17" pos:end="537:17">for<control pos:start="527:20" pos:end="527:53">(<init pos:start="527:21" pos:end="527:52"><decl pos:start="527:21" pos:end="527:52"><type pos:start="527:21" pos:end="527:35"><name pos:start="527:21" pos:end="527:35">RiverSubsegment</name></type> <name pos:start="527:37" pos:end="527:37">l</name> <range pos:start="527:39" pos:end="527:52">: <expr pos:start="527:41" pos:end="527:52"><name pos:start="527:41" pos:end="527:52">riverVectors</name></expr></range></decl></init>)</control><block pos:start="527:54" pos:end="537:17">{<block_content pos:start="528:25" pos:end="536:48">
			<expr_stmt pos:start="528:25" pos:end="528:47"><expr pos:start="528:25" pos:end="528:46"><call pos:start="528:25" pos:end="528:46"><name pos:start="528:25" pos:end="528:41"><name pos:start="528:25" pos:end="528:30">System</name><operator pos:start="528:31" pos:end="528:31">.</operator><name pos:start="528:32" pos:end="528:34">out</name><operator pos:start="528:35" pos:end="528:35">.</operator><name pos:start="528:36" pos:end="528:41">printf</name></name><argument_list pos:start="528:42" pos:end="528:46">(<argument pos:start="528:43" pos:end="528:45"><expr pos:start="528:43" pos:end="528:45"><literal type="string" pos:start="528:43" pos:end="528:45">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:start="529:25" pos:end="535:25">for<control pos:start="529:28" pos:end="529:50">(<init pos:start="529:29" pos:end="529:49"><decl pos:start="529:29" pos:end="529:49"><type pos:start="529:29" pos:end="529:37"><name pos:start="529:29" pos:end="529:37">RiverBank</name></type> <name pos:start="529:39" pos:end="529:39">v</name> <range pos:start="529:41" pos:end="529:49">: <expr pos:start="529:43" pos:end="529:49"><call pos:start="529:43" pos:end="529:49"><name pos:start="529:43" pos:end="529:47"><name pos:start="529:43" pos:end="529:43">l</name><operator pos:start="529:44" pos:end="529:44">.</operator><name pos:start="529:45" pos:end="529:47">get</name></name><argument_list pos:start="529:48" pos:end="529:49">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="529:51" pos:end="535:25">{<block_content pos:start="530:33" pos:end="534:56">
				<expr_stmt pos:start="530:33" pos:end="530:55"><expr pos:start="530:33" pos:end="530:54"><call pos:start="530:33" pos:end="530:54"><name pos:start="530:33" pos:end="530:49"><name pos:start="530:33" pos:end="530:38">System</name><operator pos:start="530:39" pos:end="530:39">.</operator><name pos:start="530:40" pos:end="530:42">out</name><operator pos:start="530:43" pos:end="530:43">.</operator><name pos:start="530:44" pos:end="530:49">printf</name></name><argument_list pos:start="530:50" pos:end="530:54">(<argument pos:start="530:51" pos:end="530:53"><expr pos:start="530:51" pos:end="530:53"><literal type="string" pos:start="530:51" pos:end="530:53">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for pos:start="531:33" pos:end="533:33">for<control pos:start="531:36" pos:end="531:67">(<init pos:start="531:37" pos:end="531:66"><decl pos:start="531:37" pos:end="531:66"><type pos:start="531:37" pos:end="531:50"><name pos:start="531:37" pos:end="531:50"><name pos:start="531:37" pos:end="531:43">Point2D</name><operator pos:start="531:44" pos:end="531:44">.</operator><name pos:start="531:45" pos:end="531:50">Double</name></name></type> <name pos:start="531:52" pos:end="531:56">entry</name> <range pos:start="531:58" pos:end="531:66">: <expr pos:start="531:60" pos:end="531:66"><call pos:start="531:60" pos:end="531:66"><name pos:start="531:60" pos:end="531:64"><name pos:start="531:60" pos:end="531:60">v</name><operator pos:start="531:61" pos:end="531:61">.</operator><name pos:start="531:62" pos:end="531:64">get</name></name><argument_list pos:start="531:65" pos:end="531:66">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="531:68" pos:end="533:33">{<block_content pos:start="532:41" pos:end="532:98">
					<expr_stmt pos:start="532:41" pos:end="532:98"><expr pos:start="532:41" pos:end="532:97"><call pos:start="532:41" pos:end="532:97"><name pos:start="532:41" pos:end="532:57"><name pos:start="532:41" pos:end="532:46">System</name><operator pos:start="532:47" pos:end="532:47">.</operator><name pos:start="532:48" pos:end="532:50">out</name><operator pos:start="532:51" pos:end="532:51">.</operator><name pos:start="532:52" pos:end="532:57">printf</name></name><argument_list pos:start="532:58" pos:end="532:97">(<argument pos:start="532:59" pos:end="532:96"><expr pos:start="532:59" pos:end="532:96"><literal type="string" pos:start="532:59" pos:end="532:61">"["</literal><operator pos:start="532:62" pos:end="532:62">+</operator><call pos:start="532:63" pos:end="532:74"><name pos:start="532:63" pos:end="532:72"><name pos:start="532:63" pos:end="532:67">entry</name><operator pos:start="532:68" pos:end="532:68">.</operator><name pos:start="532:69" pos:end="532:72">getX</name></name><argument_list pos:start="532:73" pos:end="532:74">()</argument_list></call><operator pos:start="532:75" pos:end="532:75">+</operator><literal type="string" pos:start="532:76" pos:end="532:78">","</literal><operator pos:start="532:79" pos:end="532:79">+</operator><call pos:start="532:80" pos:end="532:91"><name pos:start="532:80" pos:end="532:89"><name pos:start="532:80" pos:end="532:84">entry</name><operator pos:start="532:85" pos:end="532:85">.</operator><name pos:start="532:86" pos:end="532:89">getY</name></name><argument_list pos:start="532:90" pos:end="532:91">()</argument_list></call><operator pos:start="532:92" pos:end="532:92">+</operator><literal type="string" pos:start="532:93" pos:end="532:96">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<expr_stmt pos:start="534:33" pos:end="534:56"><expr pos:start="534:33" pos:end="534:55"><call pos:start="534:33" pos:end="534:55"><name pos:start="534:33" pos:end="534:49"><name pos:start="534:33" pos:end="534:38">System</name><operator pos:start="534:39" pos:end="534:39">.</operator><name pos:start="534:40" pos:end="534:42">out</name><operator pos:start="534:43" pos:end="534:43">.</operator><name pos:start="534:44" pos:end="534:49">printf</name></name><argument_list pos:start="534:50" pos:end="534:55">(<argument pos:start="534:51" pos:end="534:54"><expr pos:start="534:51" pos:end="534:54"><literal type="string" pos:start="534:51" pos:end="534:54">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt pos:start="536:25" pos:end="536:48"><expr pos:start="536:25" pos:end="536:47"><call pos:start="536:25" pos:end="536:47"><name pos:start="536:25" pos:end="536:41"><name pos:start="536:25" pos:end="536:30">System</name><operator pos:start="536:31" pos:end="536:31">.</operator><name pos:start="536:32" pos:end="536:34">out</name><operator pos:start="536:35" pos:end="536:35">.</operator><name pos:start="536:36" pos:end="536:41">printf</name></name><argument_list pos:start="536:42" pos:end="536:47">(<argument pos:start="536:43" pos:end="536:46"><expr pos:start="536:43" pos:end="536:46"><literal type="string" pos:start="536:43" pos:end="536:46">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt pos:start="538:17" pos:end="538:40"><expr pos:start="538:17" pos:end="538:39"><call pos:start="538:17" pos:end="538:39"><name pos:start="538:17" pos:end="538:34"><name pos:start="538:17" pos:end="538:22">System</name><operator pos:start="538:23" pos:end="538:23">.</operator><name pos:start="538:24" pos:end="538:26">out</name><operator pos:start="538:27" pos:end="538:27">.</operator><name pos:start="538:28" pos:end="538:34">println</name></name><argument_list pos:start="538:35" pos:end="538:39">(<argument pos:start="538:36" pos:end="538:38"><expr pos:start="538:36" pos:end="538:38"><literal type="string" pos:start="538:36" pos:end="538:38">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function pos:start="541:5" pos:end="552:5"><type pos:start="541:5" pos:end="541:22"><specifier pos:start="541:5" pos:end="541:10">public</specifier> <specifier pos:start="541:12" pos:end="541:17">static</specifier> <name pos:start="541:19" pos:end="541:22">void</name></type> <name pos:start="541:24" pos:end="541:43">printRoutePrimitives</name><parameter_list pos:start="541:44" pos:end="541:72">(<parameter pos:start="541:45" pos:end="541:71"><decl pos:start="541:45" pos:end="541:71"><type pos:start="541:45" pos:end="541:64"><name pos:start="541:45" pos:end="541:64"><name pos:start="541:45" pos:end="541:48">List</name><argument_list type="generic" pos:start="541:49" pos:end="541:64">&lt;<argument pos:start="541:50" pos:end="541:63"><name pos:start="541:50" pos:end="541:63">RoutePrimitive</name></argument>&gt;</argument_list></name></type> <name pos:start="541:66" pos:end="541:71">routes</name></decl></parameter>)</parameter_list> <block pos:start="541:74" pos:end="552:5">{<block_content pos:start="542:9" pos:end="551:40">
    	<expr_stmt pos:start="542:9" pos:end="542:48"><expr pos:start="542:9" pos:end="542:47"><call pos:start="542:9" pos:end="542:47"><name pos:start="542:9" pos:end="542:26"><name pos:start="542:9" pos:end="542:14">System</name><operator pos:start="542:15" pos:end="542:15">.</operator><name pos:start="542:16" pos:end="542:18">out</name><operator pos:start="542:19" pos:end="542:19">.</operator><name pos:start="542:20" pos:end="542:26">println</name></name><argument_list pos:start="542:27" pos:end="542:47">(<argument pos:start="542:28" pos:end="542:46"><expr pos:start="542:28" pos:end="542:46"><literal type="string" pos:start="542:28" pos:end="542:46">"routePrimitives: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="543:17" pos:end="543:39"><expr pos:start="543:17" pos:end="543:38"><call pos:start="543:17" pos:end="543:38"><name pos:start="543:17" pos:end="543:33"><name pos:start="543:17" pos:end="543:22">System</name><operator pos:start="543:23" pos:end="543:23">.</operator><name pos:start="543:24" pos:end="543:26">out</name><operator pos:start="543:27" pos:end="543:27">.</operator><name pos:start="543:28" pos:end="543:33">printf</name></name><argument_list pos:start="543:34" pos:end="543:38">(<argument pos:start="543:35" pos:end="543:37"><expr pos:start="543:35" pos:end="543:37"><literal type="string" pos:start="543:35" pos:end="543:37">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:start="544:17" pos:end="550:17">for<control pos:start="544:20" pos:end="544:50">(<init pos:start="544:21" pos:end="544:49"><decl pos:start="544:21" pos:end="544:49"><type pos:start="544:21" pos:end="544:34"><name pos:start="544:21" pos:end="544:34">RoutePrimitive</name></type> <name pos:start="544:36" pos:end="544:40">rList</name> <range pos:start="544:42" pos:end="544:49">: <expr pos:start="544:44" pos:end="544:49"><name pos:start="544:44" pos:end="544:49">routes</name></expr></range></decl></init>)</control><block pos:start="544:51" pos:end="550:17">{<block_content pos:start="545:25" pos:end="549:48">
			<expr_stmt pos:start="545:25" pos:end="545:47"><expr pos:start="545:25" pos:end="545:46"><call pos:start="545:25" pos:end="545:46"><name pos:start="545:25" pos:end="545:41"><name pos:start="545:25" pos:end="545:30">System</name><operator pos:start="545:31" pos:end="545:31">.</operator><name pos:start="545:32" pos:end="545:34">out</name><operator pos:start="545:35" pos:end="545:35">.</operator><name pos:start="545:36" pos:end="545:41">printf</name></name><argument_list pos:start="545:42" pos:end="545:46">(<argument pos:start="545:43" pos:end="545:45"><expr pos:start="545:43" pos:end="545:45"><literal type="string" pos:start="545:43" pos:end="545:45">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:start="546:25" pos:end="548:25">for<control pos:start="546:28" pos:end="546:67">(<init pos:start="546:29" pos:end="546:66"><decl pos:start="546:29" pos:end="546:66"><type pos:start="546:29" pos:end="546:42"><name pos:start="546:29" pos:end="546:42"><name pos:start="546:29" pos:end="546:35">Point2D</name><operator pos:start="546:36" pos:end="546:36">.</operator><name pos:start="546:37" pos:end="546:42">Double</name></name></type> <name pos:start="546:44" pos:end="546:48">entry</name><range pos:start="546:49" pos:end="546:66">: <expr pos:start="546:51" pos:end="546:66"><call pos:start="546:51" pos:end="546:66"><name pos:start="546:51" pos:end="546:64"><name pos:start="546:51" pos:end="546:55">rList</name><operator pos:start="546:56" pos:end="546:56">.</operator><name pos:start="546:57" pos:end="546:64">getRoute</name></name><argument_list pos:start="546:65" pos:end="546:66">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="546:68" pos:end="548:25">{<block_content pos:start="547:33" pos:end="547:91">
				<expr_stmt pos:start="547:33" pos:end="547:91"><expr pos:start="547:33" pos:end="547:90"><call pos:start="547:33" pos:end="547:90"><name pos:start="547:33" pos:end="547:49"><name pos:start="547:33" pos:end="547:38">System</name><operator pos:start="547:39" pos:end="547:39">.</operator><name pos:start="547:40" pos:end="547:42">out</name><operator pos:start="547:43" pos:end="547:43">.</operator><name pos:start="547:44" pos:end="547:49">printf</name></name><argument_list pos:start="547:50" pos:end="547:90">(<argument pos:start="547:51" pos:end="547:89"><expr pos:start="547:51" pos:end="547:89"><literal type="string" pos:start="547:51" pos:end="547:53">"["</literal><operator pos:start="547:54" pos:end="547:54">+</operator><call pos:start="547:55" pos:end="547:66"><name pos:start="547:55" pos:end="547:64"><name pos:start="547:55" pos:end="547:59">entry</name><operator pos:start="547:60" pos:end="547:60">.</operator><name pos:start="547:61" pos:end="547:64">getX</name></name><argument_list pos:start="547:65" pos:end="547:66">()</argument_list></call><operator pos:start="547:67" pos:end="547:67">+</operator><literal type="string" pos:start="547:68" pos:end="547:71">", "</literal><operator pos:start="547:72" pos:end="547:72">+</operator><call pos:start="547:73" pos:end="547:84"><name pos:start="547:73" pos:end="547:82"><name pos:start="547:73" pos:end="547:77">entry</name><operator pos:start="547:78" pos:end="547:78">.</operator><name pos:start="547:79" pos:end="547:82">getY</name></name><argument_list pos:start="547:83" pos:end="547:84">()</argument_list></call><operator pos:start="547:85" pos:end="547:85">+</operator><literal type="string" pos:start="547:86" pos:end="547:89">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt pos:start="549:25" pos:end="549:48"><expr pos:start="549:25" pos:end="549:47"><call pos:start="549:25" pos:end="549:47"><name pos:start="549:25" pos:end="549:41"><name pos:start="549:25" pos:end="549:30">System</name><operator pos:start="549:31" pos:end="549:31">.</operator><name pos:start="549:32" pos:end="549:34">out</name><operator pos:start="549:35" pos:end="549:35">.</operator><name pos:start="549:36" pos:end="549:41">printf</name></name><argument_list pos:start="549:42" pos:end="549:47">(<argument pos:start="549:43" pos:end="549:46"><expr pos:start="549:43" pos:end="549:46"><literal type="string" pos:start="549:43" pos:end="549:46">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt pos:start="551:17" pos:end="551:40"><expr pos:start="551:17" pos:end="551:39"><call pos:start="551:17" pos:end="551:39"><name pos:start="551:17" pos:end="551:34"><name pos:start="551:17" pos:end="551:22">System</name><operator pos:start="551:23" pos:end="551:23">.</operator><name pos:start="551:24" pos:end="551:26">out</name><operator pos:start="551:27" pos:end="551:27">.</operator><name pos:start="551:28" pos:end="551:34">println</name></name><argument_list pos:start="551:35" pos:end="551:39">(<argument pos:start="551:36" pos:end="551:38"><expr pos:start="551:36" pos:end="551:38"><literal type="string" pos:start="551:36" pos:end="551:38">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function pos:start="554:5" pos:end="566:5"><type pos:start="554:5" pos:end="554:22"><specifier pos:start="554:5" pos:end="554:10">public</specifier> <specifier pos:start="554:12" pos:end="554:17">static</specifier> <name pos:start="554:19" pos:end="554:22">void</name></type> <name pos:start="554:24" pos:end="554:42">printImageWaypoints</name><parameter_list pos:start="554:43" pos:end="554:71">(<parameter pos:start="554:44" pos:end="554:70"><decl pos:start="554:44" pos:end="554:70"><type pos:start="554:44" pos:end="554:63"><name pos:start="554:44" pos:end="554:63"><name pos:start="554:44" pos:end="554:47">List</name><argument_list type="generic" pos:start="554:48" pos:end="554:63">&lt;<argument pos:start="554:49" pos:end="554:62"><name pos:start="554:49" pos:end="554:62">RoutePrimitive</name></argument>&gt;</argument_list></name></type> <name pos:start="554:65" pos:end="554:70">routes</name></decl></parameter>)</parameter_list> <block pos:start="554:73" pos:end="566:5">{<block_content pos:start="555:9" pos:end="565:40">
    	<expr_stmt pos:start="555:9" pos:end="555:48"><expr pos:start="555:9" pos:end="555:47"><call pos:start="555:9" pos:end="555:47"><name pos:start="555:9" pos:end="555:26"><name pos:start="555:9" pos:end="555:14">System</name><operator pos:start="555:15" pos:end="555:15">.</operator><name pos:start="555:16" pos:end="555:18">out</name><operator pos:start="555:19" pos:end="555:19">.</operator><name pos:start="555:20" pos:end="555:26">println</name></name><argument_list pos:start="555:27" pos:end="555:47">(<argument pos:start="555:28" pos:end="555:46"><expr pos:start="555:28" pos:end="555:46"><literal type="string" pos:start="555:28" pos:end="555:46">"image Waypoints: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="556:17" pos:end="556:39"><expr pos:start="556:17" pos:end="556:38"><call pos:start="556:17" pos:end="556:38"><name pos:start="556:17" pos:end="556:33"><name pos:start="556:17" pos:end="556:22">System</name><operator pos:start="556:23" pos:end="556:23">.</operator><name pos:start="556:24" pos:end="556:26">out</name><operator pos:start="556:27" pos:end="556:27">.</operator><name pos:start="556:28" pos:end="556:33">printf</name></name><argument_list pos:start="556:34" pos:end="556:38">(<argument pos:start="556:35" pos:end="556:37"><expr pos:start="556:35" pos:end="556:37"><literal type="string" pos:start="556:35" pos:end="556:37">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:start="557:17" pos:end="564:17">for<control pos:start="557:20" pos:end="557:50">(<init pos:start="557:21" pos:end="557:49"><decl pos:start="557:21" pos:end="557:49"><type pos:start="557:21" pos:end="557:34"><name pos:start="557:21" pos:end="557:34">RoutePrimitive</name></type> <name pos:start="557:36" pos:end="557:40">rList</name> <range pos:start="557:42" pos:end="557:49">: <expr pos:start="557:44" pos:end="557:49"><name pos:start="557:44" pos:end="557:49">routes</name></expr></range></decl></init>)</control><block pos:start="557:51" pos:end="564:17">{<block_content pos:start="558:25" pos:end="563:48">
			<decl_stmt pos:start="558:25" pos:end="558:68"><decl pos:start="558:25" pos:end="558:67"><type pos:start="558:25" pos:end="558:38"><name pos:start="558:25" pos:end="558:38">ImageWaypoints</name></type> <name pos:start="558:40" pos:end="558:50">imagePoints</name> <init pos:start="558:52" pos:end="558:67">= <expr pos:start="558:54" pos:end="558:67"><call pos:start="558:54" pos:end="558:67"><name pos:start="558:54" pos:end="558:65"><name pos:start="558:54" pos:end="558:58">rList</name><operator pos:start="558:59" pos:end="558:59">.</operator><name pos:start="558:60" pos:end="558:65">getIWP</name></name><argument_list pos:start="558:66" pos:end="558:67">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt pos:start="559:25" pos:end="559:47"><expr pos:start="559:25" pos:end="559:46"><call pos:start="559:25" pos:end="559:46"><name pos:start="559:25" pos:end="559:41"><name pos:start="559:25" pos:end="559:30">System</name><operator pos:start="559:31" pos:end="559:31">.</operator><name pos:start="559:32" pos:end="559:34">out</name><operator pos:start="559:35" pos:end="559:35">.</operator><name pos:start="559:36" pos:end="559:41">printf</name></name><argument_list pos:start="559:42" pos:end="559:46">(<argument pos:start="559:43" pos:end="559:45"><expr pos:start="559:43" pos:end="559:45"><literal type="string" pos:start="559:43" pos:end="559:45">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:start="560:25" pos:end="562:25">for<control pos:start="560:28" pos:end="560:67">(<init pos:start="560:29" pos:end="560:66"><decl pos:start="560:29" pos:end="560:66"><type pos:start="560:29" pos:end="560:41"><name pos:start="560:29" pos:end="560:41">ImageWaypoint</name></type> <name pos:start="560:43" pos:end="560:47">entry</name><range pos:start="560:48" pos:end="560:66">: <expr pos:start="560:50" pos:end="560:66"><call pos:start="560:50" pos:end="560:66"><name pos:start="560:50" pos:end="560:64"><name pos:start="560:50" pos:end="560:60">imagePoints</name><operator pos:start="560:61" pos:end="560:61">.</operator><name pos:start="560:62" pos:end="560:64">get</name></name><argument_list pos:start="560:65" pos:end="560:66">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="560:68" pos:end="562:25">{<block_content pos:start="561:33" pos:end="561:119">
				<expr_stmt pos:start="561:33" pos:end="561:119"><expr pos:start="561:33" pos:end="561:118"><call pos:start="561:33" pos:end="561:118"><name pos:start="561:33" pos:end="561:49"><name pos:start="561:33" pos:end="561:38">System</name><operator pos:start="561:39" pos:end="561:39">.</operator><name pos:start="561:40" pos:end="561:42">out</name><operator pos:start="561:43" pos:end="561:43">.</operator><name pos:start="561:44" pos:end="561:49">printf</name></name><argument_list pos:start="561:50" pos:end="561:118">(<argument pos:start="561:51" pos:end="561:117"><expr pos:start="561:51" pos:end="561:117"><literal type="string" pos:start="561:51" pos:end="561:53">"["</literal><operator pos:start="561:54" pos:end="561:54">+</operator><call pos:start="561:55" pos:end="561:73"><name pos:start="561:55" pos:end="561:71"><name pos:start="561:55" pos:end="561:59">entry</name><operator pos:start="561:60" pos:end="561:60">.</operator><name pos:start="561:61" pos:end="561:71">getWaypoint</name></name><argument_list pos:start="561:72" pos:end="561:73">()</argument_list></call><operator pos:start="561:74" pos:end="561:74">.</operator><call pos:start="561:75" pos:end="561:80"><name pos:start="561:75" pos:end="561:78">getX</name><argument_list pos:start="561:79" pos:end="561:80">()</argument_list></call><operator pos:start="561:81" pos:end="561:81">+</operator><literal type="string" pos:start="561:82" pos:end="561:85">", "</literal><operator pos:start="561:86" pos:end="561:86">+</operator><call pos:start="561:87" pos:end="561:105"><name pos:start="561:87" pos:end="561:103"><name pos:start="561:87" pos:end="561:91">entry</name><operator pos:start="561:92" pos:end="561:92">.</operator><name pos:start="561:93" pos:end="561:103">getWaypoint</name></name><argument_list pos:start="561:104" pos:end="561:105">()</argument_list></call><operator pos:start="561:106" pos:end="561:106">.</operator><call pos:start="561:107" pos:end="561:112"><name pos:start="561:107" pos:end="561:110">getY</name><argument_list pos:start="561:111" pos:end="561:112">()</argument_list></call><operator pos:start="561:113" pos:end="561:113">+</operator><literal type="string" pos:start="561:114" pos:end="561:117">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt pos:start="563:25" pos:end="563:48"><expr pos:start="563:25" pos:end="563:47"><call pos:start="563:25" pos:end="563:47"><name pos:start="563:25" pos:end="563:41"><name pos:start="563:25" pos:end="563:30">System</name><operator pos:start="563:31" pos:end="563:31">.</operator><name pos:start="563:32" pos:end="563:34">out</name><operator pos:start="563:35" pos:end="563:35">.</operator><name pos:start="563:36" pos:end="563:41">printf</name></name><argument_list pos:start="563:42" pos:end="563:47">(<argument pos:start="563:43" pos:end="563:46"><expr pos:start="563:43" pos:end="563:46"><literal type="string" pos:start="563:43" pos:end="563:46">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt pos:start="565:17" pos:end="565:40"><expr pos:start="565:17" pos:end="565:39"><call pos:start="565:17" pos:end="565:39"><name pos:start="565:17" pos:end="565:34"><name pos:start="565:17" pos:end="565:22">System</name><operator pos:start="565:23" pos:end="565:23">.</operator><name pos:start="565:24" pos:end="565:26">out</name><operator pos:start="565:27" pos:end="565:27">.</operator><name pos:start="565:28" pos:end="565:34">println</name></name><argument_list pos:start="565:35" pos:end="565:39">(<argument pos:start="565:36" pos:end="565:38"><expr pos:start="565:36" pos:end="565:38"><literal type="string" pos:start="565:36" pos:end="565:38">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function pos:start="568:5" pos:end="579:5"><type pos:start="568:5" pos:end="568:22"><specifier pos:start="568:5" pos:end="568:10">public</specifier> <specifier pos:start="568:12" pos:end="568:17">static</specifier> <name pos:start="568:19" pos:end="568:22">void</name></type> <name pos:start="568:24" pos:end="568:40">printSourcePoints</name><parameter_list pos:start="568:41" pos:end="568:73">(<parameter pos:start="568:42" pos:end="568:72"><decl pos:start="568:42" pos:end="568:72"><type pos:start="568:42" pos:end="568:59"><name pos:start="568:42" pos:end="568:59"><name pos:start="568:42" pos:end="568:45">List</name><argument_list type="generic" pos:start="568:46" pos:end="568:59">&lt;<argument pos:start="568:47" pos:end="568:58"><name pos:start="568:47" pos:end="568:58">SourcePoints</name></argument>&gt;</argument_list></name></type> <name pos:start="568:61" pos:end="568:72">sourcePoints</name></decl></parameter>)</parameter_list> <block pos:start="568:75" pos:end="579:5">{<block_content pos:start="569:9" pos:end="578:40">
    	<expr_stmt pos:start="569:9" pos:end="569:45"><expr pos:start="569:9" pos:end="569:44"><call pos:start="569:9" pos:end="569:44"><name pos:start="569:9" pos:end="569:26"><name pos:start="569:9" pos:end="569:14">System</name><operator pos:start="569:15" pos:end="569:15">.</operator><name pos:start="569:16" pos:end="569:18">out</name><operator pos:start="569:19" pos:end="569:19">.</operator><name pos:start="569:20" pos:end="569:26">println</name></name><argument_list pos:start="569:27" pos:end="569:44">(<argument pos:start="569:28" pos:end="569:43"><expr pos:start="569:28" pos:end="569:43"><literal type="string" pos:start="569:28" pos:end="569:43">"sourcePoints: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="570:17" pos:end="570:39"><expr pos:start="570:17" pos:end="570:38"><call pos:start="570:17" pos:end="570:38"><name pos:start="570:17" pos:end="570:33"><name pos:start="570:17" pos:end="570:22">System</name><operator pos:start="570:23" pos:end="570:23">.</operator><name pos:start="570:24" pos:end="570:26">out</name><operator pos:start="570:27" pos:end="570:27">.</operator><name pos:start="570:28" pos:end="570:33">printf</name></name><argument_list pos:start="570:34" pos:end="570:38">(<argument pos:start="570:35" pos:end="570:37"><expr pos:start="570:35" pos:end="570:37"><literal type="string" pos:start="570:35" pos:end="570:37">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:start="571:17" pos:end="577:17">for<control pos:start="571:20" pos:end="571:55">(<init pos:start="571:21" pos:end="571:54"><decl pos:start="571:21" pos:end="571:54"><type pos:start="571:21" pos:end="571:32"><name pos:start="571:21" pos:end="571:32">SourcePoints</name></type> <name pos:start="571:34" pos:end="571:39">points</name> <range pos:start="571:41" pos:end="571:54">: <expr pos:start="571:43" pos:end="571:54"><name pos:start="571:43" pos:end="571:54">sourcePoints</name></expr></range></decl></init>)</control><block pos:start="571:56" pos:end="577:17">{<block_content pos:start="572:25" pos:end="576:48">
			<expr_stmt pos:start="572:25" pos:end="572:47"><expr pos:start="572:25" pos:end="572:46"><call pos:start="572:25" pos:end="572:46"><name pos:start="572:25" pos:end="572:41"><name pos:start="572:25" pos:end="572:30">System</name><operator pos:start="572:31" pos:end="572:31">.</operator><name pos:start="572:32" pos:end="572:34">out</name><operator pos:start="572:35" pos:end="572:35">.</operator><name pos:start="572:36" pos:end="572:41">printf</name></name><argument_list pos:start="572:42" pos:end="572:46">(<argument pos:start="572:43" pos:end="572:45"><expr pos:start="572:43" pos:end="572:45"><literal type="string" pos:start="572:43" pos:end="572:45">"["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for pos:start="573:25" pos:end="575:25">for<control pos:start="573:28" pos:end="573:75">(<init pos:start="573:29" pos:end="573:74"><decl pos:start="573:29" pos:end="573:74"><type pos:start="573:29" pos:end="573:42"><name pos:start="573:29" pos:end="573:42"><name pos:start="573:29" pos:end="573:35">Point2D</name><operator pos:start="573:36" pos:end="573:36">.</operator><name pos:start="573:37" pos:end="573:42">Double</name></name></type> <name pos:start="573:44" pos:end="573:48">entry</name><range pos:start="573:49" pos:end="573:74">: <expr pos:start="573:51" pos:end="573:74"><call pos:start="573:51" pos:end="573:74"><name pos:start="573:51" pos:end="573:72"><name pos:start="573:51" pos:end="573:56">points</name><operator pos:start="573:57" pos:end="573:57">.</operator><name pos:start="573:58" pos:end="573:72">getSourcePoints</name></name><argument_list pos:start="573:73" pos:end="573:74">()</argument_list></call></expr></range></decl></init>)</control><block pos:start="573:76" pos:end="575:25">{<block_content pos:start="574:33" pos:end="574:91">
				<expr_stmt pos:start="574:33" pos:end="574:91"><expr pos:start="574:33" pos:end="574:90"><call pos:start="574:33" pos:end="574:90"><name pos:start="574:33" pos:end="574:49"><name pos:start="574:33" pos:end="574:38">System</name><operator pos:start="574:39" pos:end="574:39">.</operator><name pos:start="574:40" pos:end="574:42">out</name><operator pos:start="574:43" pos:end="574:43">.</operator><name pos:start="574:44" pos:end="574:49">printf</name></name><argument_list pos:start="574:50" pos:end="574:90">(<argument pos:start="574:51" pos:end="574:89"><expr pos:start="574:51" pos:end="574:89"><literal type="string" pos:start="574:51" pos:end="574:53">"["</literal><operator pos:start="574:54" pos:end="574:54">+</operator><call pos:start="574:55" pos:end="574:66"><name pos:start="574:55" pos:end="574:64"><name pos:start="574:55" pos:end="574:59">entry</name><operator pos:start="574:60" pos:end="574:60">.</operator><name pos:start="574:61" pos:end="574:64">getX</name></name><argument_list pos:start="574:65" pos:end="574:66">()</argument_list></call><operator pos:start="574:67" pos:end="574:67">+</operator><literal type="string" pos:start="574:68" pos:end="574:71">", "</literal><operator pos:start="574:72" pos:end="574:72">+</operator><call pos:start="574:73" pos:end="574:84"><name pos:start="574:73" pos:end="574:82"><name pos:start="574:73" pos:end="574:77">entry</name><operator pos:start="574:78" pos:end="574:78">.</operator><name pos:start="574:79" pos:end="574:82">getY</name></name><argument_list pos:start="574:83" pos:end="574:84">()</argument_list></call><operator pos:start="574:85" pos:end="574:85">+</operator><literal type="string" pos:start="574:86" pos:end="574:89">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt pos:start="576:25" pos:end="576:48"><expr pos:start="576:25" pos:end="576:47"><call pos:start="576:25" pos:end="576:47"><name pos:start="576:25" pos:end="576:41"><name pos:start="576:25" pos:end="576:30">System</name><operator pos:start="576:31" pos:end="576:31">.</operator><name pos:start="576:32" pos:end="576:34">out</name><operator pos:start="576:35" pos:end="576:35">.</operator><name pos:start="576:36" pos:end="576:41">printf</name></name><argument_list pos:start="576:42" pos:end="576:47">(<argument pos:start="576:43" pos:end="576:46"><expr pos:start="576:43" pos:end="576:46"><literal type="string" pos:start="576:43" pos:end="576:46">"],"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt pos:start="578:17" pos:end="578:40"><expr pos:start="578:17" pos:end="578:39"><call pos:start="578:17" pos:end="578:39"><name pos:start="578:17" pos:end="578:34"><name pos:start="578:17" pos:end="578:22">System</name><operator pos:start="578:23" pos:end="578:23">.</operator><name pos:start="578:24" pos:end="578:26">out</name><operator pos:start="578:27" pos:end="578:27">.</operator><name pos:start="578:28" pos:end="578:34">println</name></name><argument_list pos:start="578:35" pos:end="578:39">(<argument pos:start="578:36" pos:end="578:38"><expr pos:start="578:36" pos:end="578:38"><literal type="string" pos:start="578:36" pos:end="578:38">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc" pos:start="581:5" pos:end="585:7">/**
     * This function prints out the information for python visualization 
     * @param riverVectors
     * @param routes
     */</comment>
    <function pos:start="586:5" pos:end="590:9"><type pos:start="586:5" pos:end="586:22"><specifier pos:start="586:5" pos:end="586:10">public</specifier> <specifier pos:start="586:12" pos:end="586:17">static</specifier> <name pos:start="586:19" pos:end="586:22">void</name></type> <name pos:start="586:24" pos:end="586:36">debugPrintOut</name><parameter_list pos:start="586:37" pos:end="586:102">(<parameter pos:start="586:38" pos:end="586:73"><decl pos:start="586:38" pos:end="586:73"><type pos:start="586:38" pos:end="586:73"><name pos:start="586:38" pos:end="586:60"><name pos:start="586:38" pos:end="586:43">Vector</name><argument_list type="generic" pos:start="586:44" pos:end="586:60">&lt;<argument pos:start="586:45" pos:end="586:59"><name pos:start="586:45" pos:end="586:59">RiverSubsegment</name></argument>&gt;</argument_list></name></type> <name pos:start="586:62" pos:end="586:73">riverVectors</name></decl></parameter>,<parameter pos:start="586:75" pos:end="586:101"><decl pos:start="586:75" pos:end="586:101"><type pos:start="586:75" pos:end="586:101"><name pos:start="586:75" pos:end="586:94"><name pos:start="586:75" pos:end="586:78">List</name><argument_list type="generic" pos:start="586:79" pos:end="586:94">&lt;<argument pos:start="586:80" pos:end="586:93"><name pos:start="586:80" pos:end="586:93">RoutePrimitive</name></argument>&gt;</argument_list></name></type> <name pos:start="586:96" pos:end="586:101">routes</name></decl></parameter>)</parameter_list><block pos:start="586:103" pos:end="590:9">{<block_content pos:start="587:9" pos:end="589:36">
    	<expr_stmt pos:start="587:9" pos:end="587:40"><expr pos:start="587:9" pos:end="587:39"><call pos:start="587:9" pos:end="587:39"><name pos:start="587:9" pos:end="587:25">printRiverSegment</name><argument_list pos:start="587:26" pos:end="587:39">(<argument pos:start="587:27" pos:end="587:38"><expr pos:start="587:27" pos:end="587:38"><name pos:start="587:27" pos:end="587:38">riverVectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt pos:start="588:9" pos:end="588:37"><expr pos:start="588:9" pos:end="588:36"><call pos:start="588:9" pos:end="588:36"><name pos:start="588:9" pos:end="588:28">printRoutePrimitives</name><argument_list pos:start="588:29" pos:end="588:36">(<argument pos:start="588:30" pos:end="588:35"><expr pos:start="588:30" pos:end="588:35"><name pos:start="588:30" pos:end="588:35">routes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt pos:start="589:9" pos:end="589:36"><expr pos:start="589:9" pos:end="589:35"><call pos:start="589:9" pos:end="589:35"><name pos:start="589:9" pos:end="589:27">printImageWaypoints</name><argument_list pos:start="589:28" pos:end="589:35">(<argument pos:start="589:29" pos:end="589:34"><expr pos:start="589:29" pos:end="589:34"><name pos:start="589:29" pos:end="589:34">routes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>


</unit>
