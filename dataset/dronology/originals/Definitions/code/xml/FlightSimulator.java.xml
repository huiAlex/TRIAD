<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/FlightSimulator.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:56">package <name pos:start="1:9" pos:end="1:55"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:29">core</name><operator pos:start="1:30" pos:end="1:30">.</operator><name pos:start="1:31" pos:end="1:39">simulator</name><operator pos:start="1:40" pos:end="1:40">.</operator><name pos:start="1:41" pos:end="1:55">simplesimulator</name></name>;</package>

<import pos:start="3:1" pos:end="3:54">import <name pos:start="3:8" pos:end="3:53"><name pos:start="3:8" pos:end="3:10">edu</name><operator pos:start="3:11" pos:end="3:11">.</operator><name pos:start="3:12" pos:end="3:13">nd</name><operator pos:start="3:14" pos:end="3:14">.</operator><name pos:start="3:15" pos:end="3:23">dronology</name><operator pos:start="3:24" pos:end="3:24">.</operator><name pos:start="3:25" pos:end="3:28">core</name><operator pos:start="3:29" pos:end="3:29">.</operator><name pos:start="3:30" pos:end="3:39">coordinate</name><operator pos:start="3:40" pos:end="3:40">.</operator><name pos:start="3:41" pos:end="3:53">LlaCoordinate</name></name>;</import>
<import pos:start="4:1" pos:end="4:47">import <name pos:start="4:8" pos:end="4:46"><name pos:start="4:8" pos:end="4:10">edu</name><operator pos:start="4:11" pos:end="4:11">.</operator><name pos:start="4:12" pos:end="4:13">nd</name><operator pos:start="4:14" pos:end="4:14">.</operator><name pos:start="4:15" pos:end="4:23">dronology</name><operator pos:start="4:24" pos:end="4:24">.</operator><name pos:start="4:25" pos:end="4:28">core</name><operator pos:start="4:29" pos:end="4:29">.</operator><name pos:start="4:30" pos:end="4:33">util</name><operator pos:start="4:34" pos:end="4:34">.</operator><name pos:start="4:35" pos:end="4:46">DistanceUtil</name></name>;</import>
<import pos:start="5:1" pos:end="5:59">import <name pos:start="5:8" pos:end="5:58"><name pos:start="5:8" pos:end="5:10">edu</name><operator pos:start="5:11" pos:end="5:11">.</operator><name pos:start="5:12" pos:end="5:13">nd</name><operator pos:start="5:14" pos:end="5:14">.</operator><name pos:start="5:15" pos:end="5:23">dronology</name><operator pos:start="5:24" pos:end="5:24">.</operator><name pos:start="5:25" pos:end="5:28">core</name><operator pos:start="5:29" pos:end="5:29">.</operator><name pos:start="5:30" pos:end="5:36">vehicle</name><operator pos:start="5:37" pos:end="5:37">.</operator><name pos:start="5:38" pos:end="5:45">internal</name><operator pos:start="5:46" pos:end="5:46">.</operator><name pos:start="5:47" pos:end="5:58">VirtualDrone</name></name>;</import>
<import pos:start="6:1" pos:end="6:30">import <name pos:start="6:8" pos:end="6:29"><name pos:start="6:8" pos:end="6:10">net</name><operator pos:start="6:11" pos:end="6:11">.</operator><name pos:start="6:12" pos:end="6:13">mv</name><operator pos:start="6:14" pos:end="6:14">.</operator><name pos:start="6:15" pos:end="6:21">logging</name><operator pos:start="6:22" pos:end="6:22">.</operator><name pos:start="6:23" pos:end="6:29">ILogger</name></name>;</import>
<import pos:start="7:1" pos:end="7:37">import <name pos:start="7:8" pos:end="7:36"><name pos:start="7:8" pos:end="7:10">net</name><operator pos:start="7:11" pos:end="7:11">.</operator><name pos:start="7:12" pos:end="7:13">mv</name><operator pos:start="7:14" pos:end="7:14">.</operator><name pos:start="7:15" pos:end="7:21">logging</name><operator pos:start="7:22" pos:end="7:22">.</operator><name pos:start="7:23" pos:end="7:36">LoggerProvider</name></name>;</import>

<comment type="block" format="javadoc" pos:start="9:1" pos:end="13:3">/**
 * Computes the current position of a virtual drone as it moves during flight. Serves as a lightweight SITL for a drone.
 * 
 * @author Jane Cleland-Huang
 */</comment>
<class pos:start="14:1" pos:end="171:1"><specifier pos:start="14:1" pos:end="14:6">public</specifier> class <name pos:start="14:14" pos:end="14:28">FlightSimulator</name> <block pos:start="14:30" pos:end="171:1">{

	<decl_stmt pos:start="16:9" pos:end="16:94"><decl pos:start="16:9" pos:end="16:93"><type pos:start="16:9" pos:end="16:36"><specifier pos:start="16:9" pos:end="16:15">private</specifier> <specifier pos:start="16:17" pos:end="16:22">static</specifier> <specifier pos:start="16:24" pos:end="16:28">final</specifier> <name pos:start="16:30" pos:end="16:36">ILogger</name></type> <name pos:start="16:38" pos:end="16:43">LOGGER</name> <init pos:start="16:45" pos:end="16:93">= <expr pos:start="16:47" pos:end="16:93"><call pos:start="16:47" pos:end="16:93"><name pos:start="16:47" pos:end="16:70"><name pos:start="16:47" pos:end="16:60">LoggerProvider</name><operator pos:start="16:61" pos:end="16:61">.</operator><name pos:start="16:62" pos:end="16:70">getLogger</name></name><argument_list pos:start="16:71" pos:end="16:93">(<argument pos:start="16:72" pos:end="16:92"><expr pos:start="16:72" pos:end="16:92"><name pos:start="16:72" pos:end="16:92"><name pos:start="16:72" pos:end="16:86">FlightSimulator</name><operator pos:start="16:87" pos:end="16:87">.</operator><name pos:start="16:88" pos:end="16:92">class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="18:9" pos:end="18:46"><decl pos:start="18:9" pos:end="18:45"><type pos:start="18:9" pos:end="18:29"><specifier pos:start="18:9" pos:end="18:15">private</specifier> <name pos:start="18:17" pos:end="18:29">LlaCoordinate</name></type> <name pos:start="18:31" pos:end="18:45">currentPosition</name></decl>;</decl_stmt>
	<decl_stmt pos:start="19:9" pos:end="19:45"><decl pos:start="19:9" pos:end="19:44"><type pos:start="19:9" pos:end="19:29"><specifier pos:start="19:9" pos:end="19:15">private</specifier> <name pos:start="19:17" pos:end="19:29">LlaCoordinate</name></type> <name pos:start="19:31" pos:end="19:44">targetPosition</name></decl>;</decl_stmt>
	<decl_stmt pos:start="20:9" pos:end="20:43"><decl pos:start="20:9" pos:end="20:42"><type pos:start="20:9" pos:end="20:20"><specifier pos:start="20:9" pos:end="20:15">private</specifier> <name pos:start="20:17" pos:end="20:20">Long</name></type> <name pos:start="20:22" pos:end="20:37">previousDistance</name> <init pos:start="20:39" pos:end="20:42">= <expr pos:start="20:41" pos:end="20:42"><literal type="number" pos:start="20:41" pos:end="20:42">0L</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="22:9" pos:end="22:40"><decl pos:start="22:9" pos:end="22:39"><type pos:start="22:9" pos:end="22:23"><specifier pos:start="22:9" pos:end="22:15">private</specifier> <name pos:start="22:17" pos:end="22:23">boolean</name></type> <name pos:start="22:25" pos:end="22:31">reached</name> <init pos:start="22:33" pos:end="22:39">= <expr pos:start="22:35" pos:end="22:39"><literal type="boolean" pos:start="22:35" pos:end="22:39">false</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="24:9" pos:end="24:35"><decl pos:start="24:9" pos:end="24:34"><type pos:start="24:9" pos:end="24:28"><specifier pos:start="24:9" pos:end="24:15">private</specifier> <name pos:start="24:17" pos:end="24:28">VirtualDrone</name></type> <name pos:start="24:30" pos:end="24:34">drone</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc" pos:start="26:9" pos:end="30:11">/**
	 * Creates a flight simulator object for a single virtual drone
	 * 
	 * @param drone
	 */</comment>
	<constructor pos:start="31:9" pos:end="33:9"><specifier pos:start="31:9" pos:end="31:17">protected</specifier> <name pos:start="31:19" pos:end="31:33">FlightSimulator</name><parameter_list pos:start="31:34" pos:end="31:53">(<parameter pos:start="31:35" pos:end="31:52"><decl pos:start="31:35" pos:end="31:52"><type pos:start="31:35" pos:end="31:46"><name pos:start="31:35" pos:end="31:46">VirtualDrone</name></type> <name pos:start="31:48" pos:end="31:52">drone</name></decl></parameter>)</parameter_list> <block pos:start="31:55" pos:end="33:9">{<block_content pos:start="32:17" pos:end="32:35">
		<expr_stmt pos:start="32:17" pos:end="32:35"><expr pos:start="32:17" pos:end="32:34"><name pos:start="32:17" pos:end="32:26"><name pos:start="32:17" pos:end="32:20">this</name><operator pos:start="32:21" pos:end="32:21">.</operator><name pos:start="32:22" pos:end="32:26">drone</name></name> <operator pos:start="32:28" pos:end="32:28">=</operator> <name pos:start="32:30" pos:end="32:34">drone</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<comment type="block" format="javadoc" pos:start="35:9" pos:end="42:11">/**
	 * Sets current flight path from current position to a targeted position
	 * 
	 * @param currentPos
	 *          Coordinates of current position
	 * @param targetPos
	 *          Coordinates of target position
	 */</comment>
	<function pos:start="43:9" pos:end="52:9"><type pos:start="43:9" pos:end="43:19"><specifier pos:start="43:9" pos:end="43:14">public</specifier> <name pos:start="43:16" pos:end="43:19">void</name></type> <name pos:start="43:21" pos:end="43:33">setFlightPath</name><parameter_list pos:start="43:34" pos:end="43:84">(<parameter pos:start="43:35" pos:end="43:58"><decl pos:start="43:35" pos:end="43:58"><type pos:start="43:35" pos:end="43:58"><name pos:start="43:35" pos:end="43:47">LlaCoordinate</name></type> <name pos:start="43:49" pos:end="43:58">currentPos</name></decl></parameter>, <parameter pos:start="43:61" pos:end="43:83"><decl pos:start="43:61" pos:end="43:83"><type pos:start="43:61" pos:end="43:83"><name pos:start="43:61" pos:end="43:73">LlaCoordinate</name></type> <name pos:start="43:75" pos:end="43:83">targetPos</name></decl></parameter>)</parameter_list> <block pos:start="43:86" pos:end="52:9">{<block_content pos:start="44:17" pos:end="51:58">
		<if_stmt pos:start="44:17" pos:end="48:17"><if pos:start="44:17" pos:end="48:17">if <condition pos:start="44:20" pos:end="44:55">(<expr pos:start="44:21" pos:end="44:54"><name pos:start="44:21" pos:end="44:35">currentPosition</name> <operator pos:start="44:37" pos:end="44:38">==</operator> <literal type="null" pos:start="44:40" pos:end="44:43">null</literal> <operator pos:start="44:45" pos:end="44:46">||</operator> <name pos:start="44:48" pos:end="44:54">reached</name></expr>)</condition> <block pos:start="44:57" pos:end="48:17">{<block_content pos:start="46:25" pos:end="47:40">

			<expr_stmt pos:start="46:25" pos:end="46:58"><expr pos:start="46:25" pos:end="46:57"><name pos:start="46:25" pos:end="46:44"><name pos:start="46:25" pos:end="46:28">this</name><operator pos:start="46:29" pos:end="46:29">.</operator><name pos:start="46:30" pos:end="46:44">currentPosition</name></name> <operator pos:start="46:46" pos:end="46:46">=</operator> <name pos:start="46:48" pos:end="46:57">currentPos</name></expr>;</expr_stmt>
			<expr_stmt pos:start="47:25" pos:end="47:40"><expr pos:start="47:25" pos:end="47:39"><name pos:start="47:25" pos:end="47:31">reached</name> <operator pos:start="47:33" pos:end="47:33">=</operator> <literal type="boolean" pos:start="47:35" pos:end="47:39">false</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt> 

		<expr_stmt pos:start="50:17" pos:end="50:48"><expr pos:start="50:17" pos:end="50:47"><name pos:start="50:17" pos:end="50:35"><name pos:start="50:17" pos:end="50:20">this</name><operator pos:start="50:21" pos:end="50:21">.</operator><name pos:start="50:22" pos:end="50:35">targetPosition</name></name> <operator pos:start="50:37" pos:end="50:37">=</operator> <name pos:start="50:39" pos:end="50:47">targetPos</name></expr>;</expr_stmt>
		<expr_stmt pos:start="51:17" pos:end="51:58"><expr pos:start="51:17" pos:end="51:57"><name pos:start="51:17" pos:end="51:32">previousDistance</name> <operator pos:start="51:34" pos:end="51:34">=</operator> <call pos:start="51:36" pos:end="51:57"><name pos:start="51:36" pos:end="51:55">getRemainingDistance</name><argument_list pos:start="51:56" pos:end="51:57">()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="54:9" pos:end="58:11">/**
	 * Computes the distance between current position and target position
	 * 
	 * @return distance remaining in degree points.
	 */</comment>
	<function pos:start="59:9" pos:end="61:9"><type pos:start="59:9" pos:end="59:19"><specifier pos:start="59:9" pos:end="59:14">public</specifier> <name pos:start="59:16" pos:end="59:19">long</name></type> <name pos:start="59:21" pos:end="59:40">getRemainingDistance</name><parameter_list pos:start="59:41" pos:end="59:42">()</parameter_list> <block pos:start="59:44" pos:end="61:9">{<block_content pos:start="60:17" pos:end="60:118">
		<return pos:start="60:17" pos:end="60:118">return <expr pos:start="60:24" pos:end="60:117"><operator pos:start="60:24" pos:end="60:24">(</operator><name pos:start="60:25" pos:end="60:28">long</name><operator pos:start="60:29" pos:end="60:29">)</operator> <call pos:start="60:31" pos:end="60:117"><name pos:start="60:31" pos:end="60:39"><name pos:start="60:31" pos:end="60:34">Math</name><operator pos:start="60:35" pos:end="60:35">.</operator><name pos:start="60:36" pos:end="60:39">sqrt</name></name><argument_list pos:start="60:40" pos:end="60:117">(<argument pos:start="60:41" pos:end="60:116"><expr pos:start="60:41" pos:end="60:116"><operator pos:start="60:41" pos:end="60:41">(</operator><call pos:start="60:42" pos:end="60:77"><name pos:start="60:42" pos:end="60:49"><name pos:start="60:42" pos:end="60:45">Math</name><operator pos:start="60:46" pos:end="60:46">.</operator><name pos:start="60:47" pos:end="60:49">pow</name></name><argument_list pos:start="60:50" pos:end="60:77">(<argument pos:start="60:51" pos:end="60:73"><expr pos:start="60:51" pos:end="60:73"><call pos:start="60:51" pos:end="60:73"><name pos:start="60:51" pos:end="60:71">computeLongitudeDelta</name><argument_list pos:start="60:72" pos:end="60:73">()</argument_list></call></expr></argument>, <argument pos:start="60:76" pos:end="60:76"><expr pos:start="60:76" pos:end="60:76"><literal type="number" pos:start="60:76" pos:end="60:76">2</literal></expr></argument>)</argument_list></call><operator pos:start="60:78" pos:end="60:78">)</operator> <operator pos:start="60:80" pos:end="60:80">+</operator> <call pos:start="60:82" pos:end="60:116"><name pos:start="60:82" pos:end="60:89"><name pos:start="60:82" pos:end="60:85">Math</name><operator pos:start="60:86" pos:end="60:86">.</operator><name pos:start="60:87" pos:end="60:89">pow</name></name><argument_list pos:start="60:90" pos:end="60:116">(<argument pos:start="60:91" pos:end="60:112"><expr pos:start="60:91" pos:end="60:112"><call pos:start="60:91" pos:end="60:112"><name pos:start="60:91" pos:end="60:110">computeLatitudeDelta</name><argument_list pos:start="60:111" pos:end="60:112">()</argument_list></call></expr></argument>, <argument pos:start="60:115" pos:end="60:115"><expr pos:start="60:115" pos:end="60:115"><literal type="number" pos:start="60:115" pos:end="60:115">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="63:9" pos:end="67:11">/**
	 * Computes the delta between the drones current latitude and its target latitude.
	 * 
	 * @return
	 */</comment>
	<function pos:start="68:9" pos:end="70:9"><type pos:start="68:9" pos:end="68:22"><specifier pos:start="68:9" pos:end="68:15">private</specifier> <name pos:start="68:17" pos:end="68:22">double</name></type> <name pos:start="68:24" pos:end="68:43">computeLatitudeDelta</name><parameter_list pos:start="68:44" pos:end="68:45">()</parameter_list> <block pos:start="68:47" pos:end="70:9">{<block_content pos:start="69:17" pos:end="69:96">
		<return pos:start="69:17" pos:end="69:96">return <expr pos:start="69:24" pos:end="69:95"><operator pos:start="69:24" pos:end="69:24">(</operator><call pos:start="69:25" pos:end="69:53"><name pos:start="69:25" pos:end="69:51"><name pos:start="69:25" pos:end="69:39">currentPosition</name><operator pos:start="69:40" pos:end="69:40">.</operator><name pos:start="69:41" pos:end="69:51">getLatitude</name></name><argument_list pos:start="69:52" pos:end="69:53">()</argument_list></call> <operator pos:start="69:55" pos:end="69:55">-</operator> <call pos:start="69:57" pos:end="69:84"><name pos:start="69:57" pos:end="69:82"><name pos:start="69:57" pos:end="69:70">targetPosition</name><operator pos:start="69:71" pos:end="69:71">.</operator><name pos:start="69:72" pos:end="69:82">getLatitude</name></name><argument_list pos:start="69:83" pos:end="69:84">()</argument_list></call><operator pos:start="69:85" pos:end="69:85">)</operator> <operator pos:start="69:87" pos:end="69:87">*</operator> <literal type="number" pos:start="69:89" pos:end="69:95">1000000</literal></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="72:9" pos:end="76:11">/**
	 * Computes the delta between the drones current longitude and its target longitude
	 * 
	 * @return
	 */</comment>
	<function pos:start="77:9" pos:end="79:9"><type pos:start="77:9" pos:end="77:22"><specifier pos:start="77:9" pos:end="77:15">private</specifier> <name pos:start="77:17" pos:end="77:22">double</name></type> <name pos:start="77:24" pos:end="77:44">computeLongitudeDelta</name><parameter_list pos:start="77:45" pos:end="77:46">()</parameter_list> <block pos:start="77:48" pos:end="79:9">{<block_content pos:start="78:17" pos:end="78:98">
		<return pos:start="78:17" pos:end="78:98">return <expr pos:start="78:24" pos:end="78:97"><operator pos:start="78:24" pos:end="78:24">(</operator><call pos:start="78:25" pos:end="78:54"><name pos:start="78:25" pos:end="78:52"><name pos:start="78:25" pos:end="78:39">currentPosition</name><operator pos:start="78:40" pos:end="78:40">.</operator><name pos:start="78:41" pos:end="78:52">getLongitude</name></name><argument_list pos:start="78:53" pos:end="78:54">()</argument_list></call> <operator pos:start="78:56" pos:end="78:56">-</operator> <call pos:start="78:58" pos:end="78:86"><name pos:start="78:58" pos:end="78:84"><name pos:start="78:58" pos:end="78:71">targetPosition</name><operator pos:start="78:72" pos:end="78:72">.</operator><name pos:start="78:73" pos:end="78:84">getLongitude</name></name><argument_list pos:start="78:85" pos:end="78:86">()</argument_list></call><operator pos:start="78:87" pos:end="78:87">)</operator> <operator pos:start="78:89" pos:end="78:89">*</operator> <literal type="number" pos:start="78:91" pos:end="78:97">1000000</literal></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="81:9" pos:end="85:11">/**
	 * Computes the angle at which a drone is flying with respect to the vertical
	 * 
	 * @return
	 */</comment>
	<function pos:start="86:9" pos:end="93:9"><type pos:start="86:9" pos:end="86:22"><specifier pos:start="86:9" pos:end="86:15">private</specifier> <name pos:start="86:17" pos:end="86:22">double</name></type> <name pos:start="86:24" pos:end="86:35">computeAngle</name><parameter_list pos:start="86:36" pos:end="86:37">()</parameter_list> <block pos:start="86:39" pos:end="93:9">{<block_content pos:start="87:17" pos:end="92:55">
		<decl_stmt pos:start="87:17" pos:end="87:55"><decl pos:start="87:17" pos:end="87:54"><type pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">double</name></type> <name pos:start="87:24" pos:end="87:29">height</name> <init pos:start="87:31" pos:end="87:54">= <expr pos:start="87:33" pos:end="87:54"><call pos:start="87:33" pos:end="87:54"><name pos:start="87:33" pos:end="87:52">computeLatitudeDelta</name><argument_list pos:start="87:53" pos:end="87:54">()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="87:57" pos:end="87:67">// opposite</comment>
		<comment type="line" pos:start="88:17" pos:end="88:60">// double width = (computeLongitudeDelta());</comment>
		<decl_stmt pos:start="89:17" pos:end="89:59"><decl pos:start="89:17" pos:end="89:58"><type pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">double</name></type> <name pos:start="89:24" pos:end="89:33">hypotenuse</name> <init pos:start="89:35" pos:end="89:58">= <expr pos:start="89:37" pos:end="89:58"><call pos:start="89:37" pos:end="89:58"><name pos:start="89:37" pos:end="89:56">getRemainingDistance</name><argument_list pos:start="89:57" pos:end="89:58">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="90:17" pos:end="90:54"><decl pos:start="90:17" pos:end="90:53"><type pos:start="90:17" pos:end="90:22"><name pos:start="90:17" pos:end="90:22">double</name></type> <name pos:start="90:24" pos:end="90:31">sinTheta</name> <init pos:start="90:33" pos:end="90:53">= <expr pos:start="90:35" pos:end="90:53"><name pos:start="90:35" pos:end="90:40">height</name> <operator pos:start="90:42" pos:end="90:42">/</operator> <name pos:start="90:44" pos:end="90:53">hypotenuse</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="91:17" pos:end="91:67"><decl pos:start="91:17" pos:end="91:66"><type pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">double</name></type> <name pos:start="91:24" pos:end="91:28">angle</name> <init pos:start="91:30" pos:end="91:66">= <expr pos:start="91:32" pos:end="91:66"><call pos:start="91:32" pos:end="91:50"><name pos:start="91:32" pos:end="91:40"><name pos:start="91:32" pos:end="91:35">Math</name><operator pos:start="91:36" pos:end="91:36">.</operator><name pos:start="91:37" pos:end="91:40">asin</name></name><argument_list pos:start="91:41" pos:end="91:50">(<argument pos:start="91:42" pos:end="91:49"><expr pos:start="91:42" pos:end="91:49"><name pos:start="91:42" pos:end="91:49">sinTheta</name></expr></argument>)</argument_list></call> <operator pos:start="91:52" pos:end="91:52">*</operator> <literal type="number" pos:start="91:54" pos:end="91:56">180</literal> <operator pos:start="91:58" pos:end="91:58">/</operator> <name pos:start="91:60" pos:end="91:66"><name pos:start="91:60" pos:end="91:63">Math</name><operator pos:start="91:64" pos:end="91:64">.</operator><name pos:start="91:65" pos:end="91:66">PI</name></name></expr></init></decl>;</decl_stmt>
		<return pos:start="92:17" pos:end="92:55">return <expr pos:start="92:24" pos:end="92:54"><ternary pos:start="92:24" pos:end="92:54"><condition pos:start="92:24" pos:end="92:44"><expr pos:start="92:24" pos:end="92:42"><call pos:start="92:24" pos:end="92:42"><name pos:start="92:24" pos:end="92:35"><name pos:start="92:24" pos:end="92:29">Double</name><operator pos:start="92:30" pos:end="92:30">.</operator><name pos:start="92:31" pos:end="92:35">isNaN</name></name><argument_list pos:start="92:36" pos:end="92:42">(<argument pos:start="92:37" pos:end="92:41"><expr pos:start="92:37" pos:end="92:41"><name pos:start="92:37" pos:end="92:41">angle</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="92:46" pos:end="92:46"> <expr pos:start="92:46" pos:end="92:46"><literal type="number" pos:start="92:46" pos:end="92:46">1</literal></expr> </then><else pos:start="92:48" pos:end="92:54">: <expr pos:start="92:50" pos:end="92:54"><name pos:start="92:50" pos:end="92:54">angle</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="95:9" pos:end="101:11">/**
	 * Computes the position of the drone following one step. Checks if destination has been reached.
	 * 
	 * @param step
	 *          : Distance in degree points to move per iteration
	 * @return isStillMoving?
	 */</comment>
	<function pos:start="102:9" pos:end="156:9"><type pos:start="102:9" pos:end="102:22"><specifier pos:start="102:9" pos:end="102:14">public</specifier> <name pos:start="102:16" pos:end="102:22">boolean</name></type> <name pos:start="102:24" pos:end="102:27">move</name><parameter_list pos:start="102:28" pos:end="102:40">(<parameter pos:start="102:29" pos:end="102:39"><decl pos:start="102:29" pos:end="102:39"><type pos:start="102:29" pos:end="102:34"><name pos:start="102:29" pos:end="102:34">double</name></type> <name pos:start="102:36" pos:end="102:39">step</name></decl></parameter>)</parameter_list> <block pos:start="102:42" pos:end="156:9">{<block_content pos:start="103:17" pos:end="154:29">
		<try pos:start="103:17" pos:end="153:17">try <block pos:start="103:21" pos:end="151:17">{<block_content pos:start="106:25" pos:end="150:25">
			<comment type="line" pos:start="104:25" pos:end="104:144">// First determine which relative quadrant the target is in -- in relation to current position at the origin of X,Y axes</comment>

			<decl_stmt pos:start="106:25" pos:end="106:54"><decl pos:start="106:25" pos:end="106:53"><type pos:start="106:25" pos:end="106:30"><name pos:start="106:25" pos:end="106:30">double</name></type> <name pos:start="106:32" pos:end="106:36">theta</name> <init pos:start="106:38" pos:end="106:53">= <expr pos:start="106:40" pos:end="106:53"><call pos:start="106:40" pos:end="106:53"><name pos:start="106:40" pos:end="106:51">computeAngle</name><argument_list pos:start="106:52" pos:end="106:53">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt pos:start="107:25" pos:end="107:91"><decl pos:start="107:25" pos:end="107:90"><type pos:start="107:25" pos:end="107:30"><name pos:start="107:25" pos:end="107:30">double</name></type> <name pos:start="107:32" pos:end="107:46">heightIncrement</name> <init pos:start="107:48" pos:end="107:90">= <expr pos:start="107:50" pos:end="107:90"><call pos:start="107:50" pos:end="107:90"><name pos:start="107:50" pos:end="107:57"><name pos:start="107:50" pos:end="107:53">Math</name><operator pos:start="107:54" pos:end="107:54">.</operator><name pos:start="107:55" pos:end="107:57">abs</name></name><argument_list pos:start="107:58" pos:end="107:90">(<argument pos:start="107:59" pos:end="107:89"><expr pos:start="107:59" pos:end="107:89"><operator pos:start="107:59" pos:end="107:59">(</operator><name pos:start="107:60" pos:end="107:63">long</name><operator pos:start="107:64" pos:end="107:64">)</operator> <operator pos:start="107:66" pos:end="107:66">(</operator><call pos:start="107:67" pos:end="107:81"><name pos:start="107:67" pos:end="107:74"><name pos:start="107:67" pos:end="107:70">Math</name><operator pos:start="107:71" pos:end="107:71">.</operator><name pos:start="107:72" pos:end="107:74">sin</name></name><argument_list pos:start="107:75" pos:end="107:81">(<argument pos:start="107:76" pos:end="107:80"><expr pos:start="107:76" pos:end="107:80"><name pos:start="107:76" pos:end="107:80">theta</name></expr></argument>)</argument_list></call> <operator pos:start="107:83" pos:end="107:83">*</operator> <name pos:start="107:85" pos:end="107:88">step</name><operator pos:start="107:89" pos:end="107:89">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt pos:start="108:25" pos:end="108:90"><decl pos:start="108:25" pos:end="108:89"><type pos:start="108:25" pos:end="108:30"><name pos:start="108:25" pos:end="108:30">double</name></type> <name pos:start="108:32" pos:end="108:45">widthIncrement</name> <init pos:start="108:47" pos:end="108:89">= <expr pos:start="108:49" pos:end="108:89"><call pos:start="108:49" pos:end="108:89"><name pos:start="108:49" pos:end="108:56"><name pos:start="108:49" pos:end="108:52">Math</name><operator pos:start="108:53" pos:end="108:53">.</operator><name pos:start="108:54" pos:end="108:56">abs</name></name><argument_list pos:start="108:57" pos:end="108:89">(<argument pos:start="108:58" pos:end="108:88"><expr pos:start="108:58" pos:end="108:88"><operator pos:start="108:58" pos:end="108:58">(</operator><name pos:start="108:59" pos:end="108:62">long</name><operator pos:start="108:63" pos:end="108:63">)</operator> <operator pos:start="108:65" pos:end="108:65">(</operator><call pos:start="108:66" pos:end="108:80"><name pos:start="108:66" pos:end="108:73"><name pos:start="108:66" pos:end="108:69">Math</name><operator pos:start="108:70" pos:end="108:70">.</operator><name pos:start="108:71" pos:end="108:73">cos</name></name><argument_list pos:start="108:74" pos:end="108:80">(<argument pos:start="108:75" pos:end="108:79"><expr pos:start="108:75" pos:end="108:79"><name pos:start="108:75" pos:end="108:79">theta</name></expr></argument>)</argument_list></call> <operator pos:start="108:82" pos:end="108:82">*</operator> <name pos:start="108:84" pos:end="108:87">step</name><operator pos:start="108:88" pos:end="108:88">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt pos:start="110:25" pos:end="110:49"><decl pos:start="110:25" pos:end="110:48"><type pos:start="110:25" pos:end="110:30"><name pos:start="110:25" pos:end="110:30">double</name></type> <name pos:start="110:32" pos:end="110:42">scaleFactor</name> <init pos:start="110:44" pos:end="110:48">= <expr pos:start="110:46" pos:end="110:48"><literal type="number" pos:start="110:46" pos:end="110:48">0.1</literal></expr></init></decl>;</decl_stmt>

			<expr_stmt pos:start="112:25" pos:end="112:54"><expr pos:start="112:25" pos:end="112:53"><name pos:start="112:25" pos:end="112:38">widthIncrement</name> <operator pos:start="112:40" pos:end="112:41">*=</operator> <name pos:start="112:43" pos:end="112:53">scaleFactor</name></expr>;</expr_stmt>
			<expr_stmt pos:start="113:25" pos:end="113:55"><expr pos:start="113:25" pos:end="113:54"><name pos:start="113:25" pos:end="113:39">heightIncrement</name> <operator pos:start="113:41" pos:end="113:42">*=</operator> <name pos:start="113:44" pos:end="113:54">scaleFactor</name></expr>;</expr_stmt>
			<decl_stmt pos:start="114:25" pos:end="114:45"><decl pos:start="114:25" pos:end="114:44"><type pos:start="114:25" pos:end="114:30"><name pos:start="114:25" pos:end="114:30">double</name></type> <name pos:start="114:32" pos:end="114:40">newLongit</name> <init pos:start="114:42" pos:end="114:44">= <expr pos:start="114:44" pos:end="114:44"><literal type="number" pos:start="114:44" pos:end="114:44">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt pos:start="115:25" pos:end="115:44"><decl pos:start="115:25" pos:end="115:43"><type pos:start="115:25" pos:end="115:30"><name pos:start="115:25" pos:end="115:30">double</name></type> <name pos:start="115:32" pos:end="115:39">newLatid</name> <init pos:start="115:41" pos:end="115:43">= <expr pos:start="115:43" pos:end="115:43"><literal type="number" pos:start="115:43" pos:end="115:43">0</literal></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:start="117:25" pos:end="117:41">// Latitude delta</comment>
			<if_stmt pos:start="118:25" pos:end="124:25"><if pos:start="118:25" pos:end="121:25">if <condition pos:start="118:28" pos:end="118:89">(<expr pos:start="118:29" pos:end="118:88"><call pos:start="118:29" pos:end="118:57"><name pos:start="118:29" pos:end="118:55"><name pos:start="118:29" pos:end="118:43">currentPosition</name><operator pos:start="118:44" pos:end="118:44">.</operator><name pos:start="118:45" pos:end="118:55">getLatitude</name></name><argument_list pos:start="118:56" pos:end="118:57">()</argument_list></call> <operator pos:start="118:59" pos:end="118:59">&lt;</operator> <call pos:start="118:61" pos:end="118:88"><name pos:start="118:61" pos:end="118:86"><name pos:start="118:61" pos:end="118:74">targetPosition</name><operator pos:start="118:75" pos:end="118:75">.</operator><name pos:start="118:76" pos:end="118:86">getLatitude</name></name><argument_list pos:start="118:87" pos:end="118:88">()</argument_list></call></expr>)</condition> <block pos:start="118:91" pos:end="121:25">{<block_content pos:start="120:33" pos:end="120:103">
				<comment type="line" pos:start="119:33" pos:end="119:140">// currentPosition.setLatitude(currentPosition.getLatitude() + heightIncrement); // Drone is south of Target</comment>
				<expr_stmt pos:start="120:33" pos:end="120:103"><expr pos:start="120:33" pos:end="120:102"><name pos:start="120:33" pos:end="120:40">newLatid</name> <operator pos:start="120:42" pos:end="120:42">=</operator> <operator pos:start="120:44" pos:end="120:44">(</operator><call pos:start="120:45" pos:end="120:73"><name pos:start="120:45" pos:end="120:71"><name pos:start="120:45" pos:end="120:59">currentPosition</name><operator pos:start="120:60" pos:end="120:60">.</operator><name pos:start="120:61" pos:end="120:71">getLatitude</name></name><argument_list pos:start="120:72" pos:end="120:73">()</argument_list></call> <operator pos:start="120:75" pos:end="120:75">*</operator> <literal type="number" pos:start="120:77" pos:end="120:83">1000000</literal><operator pos:start="120:84" pos:end="120:84">)</operator> <operator pos:start="120:86" pos:end="120:86">+</operator> <name pos:start="120:88" pos:end="120:102">heightIncrement</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else pos:start="121:27" pos:end="124:25">else <block pos:start="121:32" pos:end="124:25">{<block_content pos:start="123:33" pos:end="123:103">
				<comment type="line" pos:start="122:33" pos:end="122:150">// currentPosition.setLatitude(currentPosition.getLatitude() - heightIncrement); // Drone is North (or same) as target</comment>
				<expr_stmt pos:start="123:33" pos:end="123:103"><expr pos:start="123:33" pos:end="123:102"><name pos:start="123:33" pos:end="123:40">newLatid</name> <operator pos:start="123:42" pos:end="123:42">=</operator> <operator pos:start="123:44" pos:end="123:44">(</operator><call pos:start="123:45" pos:end="123:73"><name pos:start="123:45" pos:end="123:71"><name pos:start="123:45" pos:end="123:59">currentPosition</name><operator pos:start="123:60" pos:end="123:60">.</operator><name pos:start="123:61" pos:end="123:71">getLatitude</name></name><argument_list pos:start="123:72" pos:end="123:73">()</argument_list></call> <operator pos:start="123:75" pos:end="123:75">*</operator> <literal type="number" pos:start="123:77" pos:end="123:83">1000000</literal><operator pos:start="123:84" pos:end="123:84">)</operator> <operator pos:start="123:86" pos:end="123:86">-</operator> <name pos:start="123:88" pos:end="123:102">heightIncrement</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<comment type="line" pos:start="125:25" pos:end="125:42">// Longitude delta</comment>
			<if_stmt pos:start="126:25" pos:end="132:25"><if pos:start="126:25" pos:end="129:25">if <condition pos:start="126:28" pos:end="126:91">(<expr pos:start="126:29" pos:end="126:90"><call pos:start="126:29" pos:end="126:58"><name pos:start="126:29" pos:end="126:56"><name pos:start="126:29" pos:end="126:43">currentPosition</name><operator pos:start="126:44" pos:end="126:44">.</operator><name pos:start="126:45" pos:end="126:56">getLongitude</name></name><argument_list pos:start="126:57" pos:end="126:58">()</argument_list></call> <operator pos:start="126:60" pos:end="126:60">&lt;</operator> <call pos:start="126:62" pos:end="126:90"><name pos:start="126:62" pos:end="126:88"><name pos:start="126:62" pos:end="126:75">targetPosition</name><operator pos:start="126:76" pos:end="126:76">.</operator><name pos:start="126:77" pos:end="126:88">getLongitude</name></name><argument_list pos:start="126:89" pos:end="126:90">()</argument_list></call></expr>)</condition> <block pos:start="126:93" pos:end="129:25">{<block_content pos:start="128:33" pos:end="128:104">
				<comment type="line" pos:start="127:33" pos:end="127:152">// currentPosition.setLongitude(currentPosition.getLongitude() + widthIncrement); // Drone is to the left/west of target</comment>
				<expr_stmt pos:start="128:33" pos:end="128:104"><expr pos:start="128:33" pos:end="128:103"><name pos:start="128:33" pos:end="128:41">newLongit</name> <operator pos:start="128:43" pos:end="128:43">=</operator> <operator pos:start="128:45" pos:end="128:45">(</operator><call pos:start="128:46" pos:end="128:75"><name pos:start="128:46" pos:end="128:73"><name pos:start="128:46" pos:end="128:60">currentPosition</name><operator pos:start="128:61" pos:end="128:61">.</operator><name pos:start="128:62" pos:end="128:73">getLongitude</name></name><argument_list pos:start="128:74" pos:end="128:75">()</argument_list></call> <operator pos:start="128:77" pos:end="128:77">*</operator> <literal type="number" pos:start="128:79" pos:end="128:85">1000000</literal><operator pos:start="128:86" pos:end="128:86">)</operator> <operator pos:start="128:88" pos:end="128:88">+</operator> <name pos:start="128:90" pos:end="128:103">widthIncrement</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else pos:start="129:27" pos:end="132:25">else <block pos:start="129:32" pos:end="132:25">{<block_content pos:start="131:33" pos:end="131:104">
				<comment type="line" pos:start="130:33" pos:end="130:153">// currentPosition.setLongitude(currentPosition.getLongitude() - widthIncrement); // Drone is to the right/east of target</comment>
				<expr_stmt pos:start="131:33" pos:end="131:104"><expr pos:start="131:33" pos:end="131:103"><name pos:start="131:33" pos:end="131:41">newLongit</name> <operator pos:start="131:43" pos:end="131:43">=</operator> <operator pos:start="131:45" pos:end="131:45">(</operator><call pos:start="131:46" pos:end="131:75"><name pos:start="131:46" pos:end="131:73"><name pos:start="131:46" pos:end="131:60">currentPosition</name><operator pos:start="131:61" pos:end="131:61">.</operator><name pos:start="131:62" pos:end="131:73">getLongitude</name></name><argument_list pos:start="131:74" pos:end="131:75">()</argument_list></call> <operator pos:start="131:77" pos:end="131:77">*</operator> <literal type="number" pos:start="131:79" pos:end="131:85">1000000</literal><operator pos:start="131:86" pos:end="131:86">)</operator> <operator pos:start="131:88" pos:end="131:88">-</operator> <name pos:start="131:90" pos:end="131:103">widthIncrement</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<comment type="line" pos:start="133:25" pos:end="133:116">// double distanceMoved = Math.sqrt(Math.pow(heightIncrement,2)+Math.pow(widthIncrement,2));</comment>

			<expr_stmt pos:start="135:25" pos:end="135:54"><expr pos:start="135:25" pos:end="135:53"><name pos:start="135:25" pos:end="135:32">newLatid</name> <operator pos:start="135:34" pos:end="135:34">=</operator> <name pos:start="135:36" pos:end="135:43">newLatid</name> <operator pos:start="135:45" pos:end="135:45">/</operator> <literal type="number" pos:start="135:47" pos:end="135:53">1000000</literal></expr>;</expr_stmt>
			<expr_stmt pos:start="136:25" pos:end="136:56"><expr pos:start="136:25" pos:end="136:55"><name pos:start="136:25" pos:end="136:33">newLongit</name> <operator pos:start="136:35" pos:end="136:35">=</operator> <name pos:start="136:37" pos:end="136:45">newLongit</name> <operator pos:start="136:47" pos:end="136:47">/</operator> <literal type="number" pos:start="136:49" pos:end="136:55">1000000</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="138:25" pos:end="138:112"><expr pos:start="138:25" pos:end="138:111"><name pos:start="138:25" pos:end="138:39">currentPosition</name> <operator pos:start="138:41" pos:end="138:41">=</operator> <operator pos:start="138:43" pos:end="138:45">new</operator> <call pos:start="138:47" pos:end="138:111"><name pos:start="138:47" pos:end="138:59">LlaCoordinate</name><argument_list pos:start="138:60" pos:end="138:111">(<argument pos:start="138:61" pos:end="138:68"><expr pos:start="138:61" pos:end="138:68"><name pos:start="138:61" pos:end="138:68">newLatid</name></expr></argument>, <argument pos:start="138:71" pos:end="138:79"><expr pos:start="138:71" pos:end="138:79"><name pos:start="138:71" pos:end="138:79">newLongit</name></expr></argument>, <argument pos:start="138:82" pos:end="138:110"><expr pos:start="138:82" pos:end="138:110"><call pos:start="138:82" pos:end="138:110"><name pos:start="138:82" pos:end="138:108"><name pos:start="138:82" pos:end="138:96">currentPosition</name><operator pos:start="138:97" pos:end="138:97">.</operator><name pos:start="138:98" pos:end="138:108">getAltitude</name></name><argument_list pos:start="138:109" pos:end="138:110">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="139:25" pos:end="139:119"><expr pos:start="139:25" pos:end="139:118"><call pos:start="139:25" pos:end="139:118"><name pos:start="139:25" pos:end="139:36"><name pos:start="139:25" pos:end="139:30">LOGGER</name><operator pos:start="139:31" pos:end="139:31">.</operator><name pos:start="139:32" pos:end="139:36">trace</name></name><argument_list pos:start="139:37" pos:end="139:118">(<argument pos:start="139:38" pos:end="139:117"><expr pos:start="139:38" pos:end="139:117"><literal type="string" pos:start="139:38" pos:end="139:60">"Remaining Dinstance: "</literal> <operator pos:start="139:62" pos:end="139:62">+</operator> <call pos:start="139:64" pos:end="139:117"><name pos:start="139:64" pos:end="139:84"><name pos:start="139:64" pos:end="139:75">DistanceUtil</name><operator pos:start="139:76" pos:end="139:76">.</operator><name pos:start="139:77" pos:end="139:84">distance</name></name><argument_list pos:start="139:85" pos:end="139:117">(<argument pos:start="139:86" pos:end="139:100"><expr pos:start="139:86" pos:end="139:100"><name pos:start="139:86" pos:end="139:100">currentPosition</name></expr></argument>, <argument pos:start="139:103" pos:end="139:116"><expr pos:start="139:103" pos:end="139:116"><name pos:start="139:103" pos:end="139:116">targetPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:start="140:25" pos:end="140:108">// if (previousDistance &lt;= getRemainingDistance() &amp;&amp; getRemainingDistance() &lt; 200) {</comment>
			<expr_stmt pos:start="141:25" pos:end="141:62"><expr pos:start="141:25" pos:end="141:61"><call pos:start="141:25" pos:end="141:61"><name pos:start="141:25" pos:end="141:44"><name pos:start="141:25" pos:end="141:29">drone</name><operator pos:start="141:30" pos:end="141:30">.</operator><name pos:start="141:31" pos:end="141:44">setCoordinates</name></name><argument_list pos:start="141:45" pos:end="141:61">(<argument pos:start="141:46" pos:end="141:60"><expr pos:start="141:46" pos:end="141:60"><name pos:start="141:46" pos:end="141:60">currentPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt pos:start="142:25" pos:end="150:25"><if pos:start="142:25" pos:end="147:25">if <condition pos:start="142:28" pos:end="142:87">(<expr pos:start="142:29" pos:end="142:86"><call pos:start="142:29" pos:end="142:82"><name pos:start="142:29" pos:end="142:49"><name pos:start="142:29" pos:end="142:40">DistanceUtil</name><operator pos:start="142:41" pos:end="142:41">.</operator><name pos:start="142:42" pos:end="142:49">distance</name></name><argument_list pos:start="142:50" pos:end="142:82">(<argument pos:start="142:51" pos:end="142:65"><expr pos:start="142:51" pos:end="142:65"><name pos:start="142:51" pos:end="142:65">currentPosition</name></expr></argument>, <argument pos:start="142:68" pos:end="142:81"><expr pos:start="142:68" pos:end="142:81"><name pos:start="142:68" pos:end="142:81">targetPosition</name></expr></argument>)</argument_list></call> <operator pos:start="142:84" pos:end="142:84">&lt;</operator> <literal type="number" pos:start="142:86" pos:end="142:86">2</literal></expr>)</condition> <block pos:start="142:89" pos:end="147:25">{<block_content pos:start="143:33" pos:end="146:45">
				<expr_stmt pos:start="143:33" pos:end="143:74"><expr pos:start="143:33" pos:end="143:73"><name pos:start="143:33" pos:end="143:48">previousDistance</name> <operator pos:start="143:50" pos:end="143:50">=</operator> <call pos:start="143:52" pos:end="143:73"><name pos:start="143:52" pos:end="143:71">getRemainingDistance</name><argument_list pos:start="143:72" pos:end="143:73">()</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:start="144:33" pos:end="144:95">// LOGGER.info(drone.getDroneName() + " ==&gt; Waypoint reached");</comment>
				<expr_stmt pos:start="145:33" pos:end="145:47"><expr pos:start="145:33" pos:end="145:46"><name pos:start="145:33" pos:end="145:39">reached</name> <operator pos:start="145:41" pos:end="145:41">=</operator> <literal type="boolean" pos:start="145:43" pos:end="145:46">true</literal></expr>;</expr_stmt>
				<return pos:start="146:33" pos:end="146:45">return <expr pos:start="146:40" pos:end="146:44"><literal type="boolean" pos:start="146:40" pos:end="146:44">false</literal></expr>;</return>
			</block_content>}</block></if> <else pos:start="147:27" pos:end="150:25">else <block pos:start="147:32" pos:end="150:25">{<block_content pos:start="148:33" pos:end="149:44">
				<expr_stmt pos:start="148:33" pos:end="148:74"><expr pos:start="148:33" pos:end="148:73"><name pos:start="148:33" pos:end="148:48">previousDistance</name> <operator pos:start="148:50" pos:end="148:50">=</operator> <call pos:start="148:52" pos:end="148:73"><name pos:start="148:52" pos:end="148:71">getRemainingDistance</name><argument_list pos:start="148:72" pos:end="148:73">()</argument_list></call></expr>;</expr_stmt>
				<return pos:start="149:33" pos:end="149:44">return <expr pos:start="149:40" pos:end="149:43"><literal type="boolean" pos:start="149:40" pos:end="149:43">true</literal></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block> <catch pos:start="151:19" pos:end="153:17">catch <parameter_list pos:start="151:25" pos:end="151:37">(<parameter pos:start="151:26" pos:end="151:36"><decl pos:start="151:26" pos:end="151:36"><type pos:start="151:26" pos:end="151:36"><name pos:start="151:26" pos:end="151:34">Exception</name></type> <name pos:start="151:36" pos:end="151:36">e</name></decl></parameter>)</parameter_list> <block pos:start="151:39" pos:end="153:17">{<block_content pos:start="152:25" pos:end="152:40">
			<expr_stmt pos:start="152:25" pos:end="152:40"><expr pos:start="152:25" pos:end="152:39"><call pos:start="152:25" pos:end="152:39"><name pos:start="152:25" pos:end="152:36"><name pos:start="152:25" pos:end="152:30">LOGGER</name><operator pos:start="152:31" pos:end="152:31">.</operator><name pos:start="152:32" pos:end="152:36">error</name></name><argument_list pos:start="152:37" pos:end="152:39">(<argument pos:start="152:38" pos:end="152:38"><expr pos:start="152:38" pos:end="152:38"><name pos:start="152:38" pos:end="152:38">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
		<return pos:start="154:17" pos:end="154:29">return <expr pos:start="154:24" pos:end="154:28"><literal type="boolean" pos:start="154:24" pos:end="154:28">false</literal></expr>;</return>

	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="158:9" pos:end="164:11">/**
	 * Checks if a drone has reached its target destination.
	 * 
	 * @param distanceMovedPerTimeStep
	 *          Checks location with respect to target position.
	 * @return true if target position is reached.
	 */</comment>
	<function pos:start="165:9" pos:end="169:9"><type pos:start="165:9" pos:end="165:22"><specifier pos:start="165:9" pos:end="165:14">public</specifier> <name pos:start="165:16" pos:end="165:22">boolean</name></type> <name pos:start="165:24" pos:end="165:43">isDestinationReached</name><parameter_list pos:start="165:44" pos:end="165:76">(<parameter pos:start="165:45" pos:end="165:75"><decl pos:start="165:45" pos:end="165:75"><type pos:start="165:45" pos:end="165:50"><name pos:start="165:45" pos:end="165:50">double</name></type> <name pos:start="165:52" pos:end="165:75">distanceMovedPerTimeStep</name></decl></parameter>)</parameter_list> <block pos:start="165:78" pos:end="169:9">{<block_content pos:start="166:17" pos:end="168:106">
		<decl_stmt pos:start="166:17" pos:end="166:108"><decl pos:start="166:17" pos:end="166:107"><type pos:start="166:17" pos:end="166:22"><name pos:start="166:17" pos:end="166:22">double</name></type> <name pos:start="166:24" pos:end="166:34">latDistance</name> <init pos:start="166:36" pos:end="166:107">= <expr pos:start="166:38" pos:end="166:107"><call pos:start="166:38" pos:end="166:107"><name pos:start="166:38" pos:end="166:45"><name pos:start="166:38" pos:end="166:41">Math</name><operator pos:start="166:42" pos:end="166:42">.</operator><name pos:start="166:43" pos:end="166:45">abs</name></name><argument_list pos:start="166:46" pos:end="166:107">(<argument pos:start="166:47" pos:end="166:106"><expr pos:start="166:47" pos:end="166:106"><call pos:start="166:47" pos:end="166:75"><name pos:start="166:47" pos:end="166:73"><name pos:start="166:47" pos:end="166:61">currentPosition</name><operator pos:start="166:62" pos:end="166:62">.</operator><name pos:start="166:63" pos:end="166:73">getLatitude</name></name><argument_list pos:start="166:74" pos:end="166:75">()</argument_list></call> <operator pos:start="166:77" pos:end="166:77">-</operator> <call pos:start="166:79" pos:end="166:106"><name pos:start="166:79" pos:end="166:104"><name pos:start="166:79" pos:end="166:92">targetPosition</name><operator pos:start="166:93" pos:end="166:93">.</operator><name pos:start="166:94" pos:end="166:104">getLatitude</name></name><argument_list pos:start="166:105" pos:end="166:106">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="167:17" pos:end="167:110"><decl pos:start="167:17" pos:end="167:109"><type pos:start="167:17" pos:end="167:22"><name pos:start="167:17" pos:end="167:22">double</name></type> <name pos:start="167:24" pos:end="167:34">lonDistance</name> <init pos:start="167:36" pos:end="167:109">= <expr pos:start="167:38" pos:end="167:109"><call pos:start="167:38" pos:end="167:109"><name pos:start="167:38" pos:end="167:45"><name pos:start="167:38" pos:end="167:41">Math</name><operator pos:start="167:42" pos:end="167:42">.</operator><name pos:start="167:43" pos:end="167:45">abs</name></name><argument_list pos:start="167:46" pos:end="167:109">(<argument pos:start="167:47" pos:end="167:108"><expr pos:start="167:47" pos:end="167:108"><call pos:start="167:47" pos:end="167:76"><name pos:start="167:47" pos:end="167:74"><name pos:start="167:47" pos:end="167:61">currentPosition</name><operator pos:start="167:62" pos:end="167:62">.</operator><name pos:start="167:63" pos:end="167:74">getLongitude</name></name><argument_list pos:start="167:75" pos:end="167:76">()</argument_list></call> <operator pos:start="167:78" pos:end="167:78">-</operator> <call pos:start="167:80" pos:end="167:108"><name pos:start="167:80" pos:end="167:106"><name pos:start="167:80" pos:end="167:93">targetPosition</name><operator pos:start="167:94" pos:end="167:94">.</operator><name pos:start="167:95" pos:end="167:106">getLongitude</name></name><argument_list pos:start="167:107" pos:end="167:108">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="168:17" pos:end="168:106">return <expr pos:start="168:24" pos:end="168:105"><name pos:start="168:24" pos:end="168:34">lonDistance</name> <operator pos:start="168:36" pos:end="168:37">&lt;=</operator> <name pos:start="168:39" pos:end="168:62">distanceMovedPerTimeStep</name> <operator pos:start="168:64" pos:end="168:65">&amp;&amp;</operator> <name pos:start="168:67" pos:end="168:77">latDistance</name> <operator pos:start="168:79" pos:end="168:80">&lt;=</operator> <name pos:start="168:82" pos:end="168:105">distanceMovedPerTimeStep</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>
