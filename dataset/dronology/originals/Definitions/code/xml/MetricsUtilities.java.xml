<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/MetricsUtilities.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:65">package <name pos:start="1:9" pos:end="1:64"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:33">services</name><operator pos:start="1:34" pos:end="1:34">.</operator><name pos:start="1:35" pos:end="1:44">extensions</name><operator pos:start="1:45" pos:end="1:45">.</operator><name pos:start="1:46" pos:end="1:56">areamapping</name><operator pos:start="1:57" pos:end="1:57">.</operator><name pos:start="1:58" pos:end="1:64">metrics</name></name>;</package>

<import pos:start="3:1" pos:end="3:22">import <name pos:start="3:8" pos:end="3:21"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:15">awt</name><operator pos:start="3:16" pos:end="3:16">.</operator><name pos:start="3:17" pos:end="3:21">Point</name></name>;</import>
<import pos:start="4:1" pos:end="4:31">import <name pos:start="4:8" pos:end="4:30"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:15">awt</name><operator pos:start="4:16" pos:end="4:16">.</operator><name pos:start="4:17" pos:end="4:20">geom</name><operator pos:start="4:21" pos:end="4:21">.</operator><name pos:start="4:22" pos:end="4:30">Ellipse2D</name></name>;</import>
<import pos:start="5:1" pos:end="5:28">import <name pos:start="5:8" pos:end="5:27"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:15">awt</name><operator pos:start="5:16" pos:end="5:16">.</operator><name pos:start="5:17" pos:end="5:20">geom</name><operator pos:start="5:21" pos:end="5:21">.</operator><name pos:start="5:22" pos:end="5:27">Line2D</name></name>;</import>
<import pos:start="6:1" pos:end="6:28">import <name pos:start="6:8" pos:end="6:27"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:15">awt</name><operator pos:start="6:16" pos:end="6:16">.</operator><name pos:start="6:17" pos:end="6:20">geom</name><operator pos:start="6:21" pos:end="6:21">.</operator><name pos:start="6:22" pos:end="6:27">Path2D</name></name>;</import>
<import pos:start="7:1" pos:end="7:29">import <name pos:start="7:8" pos:end="7:28"><name pos:start="7:8" pos:end="7:11">java</name><operator pos:start="7:12" pos:end="7:12">.</operator><name pos:start="7:13" pos:end="7:15">awt</name><operator pos:start="7:16" pos:end="7:16">.</operator><name pos:start="7:17" pos:end="7:20">geom</name><operator pos:start="7:21" pos:end="7:21">.</operator><name pos:start="7:22" pos:end="7:28">Point2D</name></name>;</import>
<import pos:start="8:1" pos:end="8:27">import <name pos:start="8:8" pos:end="8:26"><name pos:start="8:8" pos:end="8:11">java</name><operator pos:start="8:12" pos:end="8:12">.</operator><name pos:start="8:13" pos:end="8:16">util</name><operator pos:start="8:17" pos:end="8:17">.</operator><name pos:start="8:18" pos:end="8:26">ArrayList</name></name>;</import>
<import pos:start="9:1" pos:end="9:25">import <name pos:start="9:8" pos:end="9:24"><name pos:start="9:8" pos:end="9:11">java</name><operator pos:start="9:12" pos:end="9:12">.</operator><name pos:start="9:13" pos:end="9:16">util</name><operator pos:start="9:17" pos:end="9:17">.</operator><name pos:start="9:18" pos:end="9:24">HashMap</name></name>;</import>
<import pos:start="10:1" pos:end="10:22">import <name pos:start="10:8" pos:end="10:21"><name pos:start="10:8" pos:end="10:11">java</name><operator pos:start="10:12" pos:end="10:12">.</operator><name pos:start="10:13" pos:end="10:16">util</name><operator pos:start="10:17" pos:end="10:17">.</operator><name pos:start="10:18" pos:end="10:21">List</name></name>;</import>
<import pos:start="11:1" pos:end="11:21">import <name pos:start="11:8" pos:end="11:20"><name pos:start="11:8" pos:end="11:11">java</name><operator pos:start="11:12" pos:end="11:12">.</operator><name pos:start="11:13" pos:end="11:16">util</name><operator pos:start="11:17" pos:end="11:17">.</operator><name pos:start="11:18" pos:end="11:20">Map</name></name>;</import>
<import pos:start="12:1" pos:end="12:24">import <name pos:start="12:8" pos:end="12:23"><name pos:start="12:8" pos:end="12:11">java</name><operator pos:start="12:12" pos:end="12:12">.</operator><name pos:start="12:13" pos:end="12:16">util</name><operator pos:start="12:17" pos:end="12:17">.</operator><name pos:start="12:18" pos:end="12:23">Random</name></name>;</import>
<import pos:start="13:1" pos:end="13:24">import <name pos:start="13:8" pos:end="13:23"><name pos:start="13:8" pos:end="13:11">java</name><operator pos:start="13:12" pos:end="13:12">.</operator><name pos:start="13:13" pos:end="13:16">util</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:23">Vector</name></name>;</import>

<import pos:start="15:1" pos:end="15:74">import <name pos:start="15:8" pos:end="15:73"><name pos:start="15:8" pos:end="15:10">edu</name><operator pos:start="15:11" pos:end="15:11">.</operator><name pos:start="15:12" pos:end="15:13">nd</name><operator pos:start="15:14" pos:end="15:14">.</operator><name pos:start="15:15" pos:end="15:23">dronology</name><operator pos:start="15:24" pos:end="15:24">.</operator><name pos:start="15:25" pos:end="15:32">services</name><operator pos:start="15:33" pos:end="15:33">.</operator><name pos:start="15:34" pos:end="15:43">extensions</name><operator pos:start="15:44" pos:end="15:44">.</operator><name pos:start="15:45" pos:end="15:55">areamapping</name><operator pos:start="15:56" pos:end="15:56">.</operator><name pos:start="15:57" pos:end="15:64">internal</name><operator pos:start="15:65" pos:end="15:65">.</operator><name pos:start="15:66" pos:end="15:73">Geometry</name></name>;</import>
<import pos:start="16:1" pos:end="16:79">import <name pos:start="16:8" pos:end="16:78"><name pos:start="16:8" pos:end="16:10">edu</name><operator pos:start="16:11" pos:end="16:11">.</operator><name pos:start="16:12" pos:end="16:13">nd</name><operator pos:start="16:14" pos:end="16:14">.</operator><name pos:start="16:15" pos:end="16:23">dronology</name><operator pos:start="16:24" pos:end="16:24">.</operator><name pos:start="16:25" pos:end="16:32">services</name><operator pos:start="16:33" pos:end="16:33">.</operator><name pos:start="16:34" pos:end="16:43">extensions</name><operator pos:start="16:44" pos:end="16:44">.</operator><name pos:start="16:45" pos:end="16:55">areamapping</name><operator pos:start="16:56" pos:end="16:56">.</operator><name pos:start="16:57" pos:end="16:64">internal</name><operator pos:start="16:65" pos:end="16:65">.</operator><name pos:start="16:66" pos:end="16:78">ImageWaypoint</name></name>;</import>
<import pos:start="17:1" pos:end="17:80">import <name pos:start="17:8" pos:end="17:79"><name pos:start="17:8" pos:end="17:10">edu</name><operator pos:start="17:11" pos:end="17:11">.</operator><name pos:start="17:12" pos:end="17:13">nd</name><operator pos:start="17:14" pos:end="17:14">.</operator><name pos:start="17:15" pos:end="17:23">dronology</name><operator pos:start="17:24" pos:end="17:24">.</operator><name pos:start="17:25" pos:end="17:32">services</name><operator pos:start="17:33" pos:end="17:33">.</operator><name pos:start="17:34" pos:end="17:43">extensions</name><operator pos:start="17:44" pos:end="17:44">.</operator><name pos:start="17:45" pos:end="17:55">areamapping</name><operator pos:start="17:56" pos:end="17:56">.</operator><name pos:start="17:57" pos:end="17:64">internal</name><operator pos:start="17:65" pos:end="17:65">.</operator><name pos:start="17:66" pos:end="17:79">ImageWaypoints</name></name>;</import>
<import pos:start="18:1" pos:end="18:75">import <name pos:start="18:8" pos:end="18:74"><name pos:start="18:8" pos:end="18:10">edu</name><operator pos:start="18:11" pos:end="18:11">.</operator><name pos:start="18:12" pos:end="18:13">nd</name><operator pos:start="18:14" pos:end="18:14">.</operator><name pos:start="18:15" pos:end="18:23">dronology</name><operator pos:start="18:24" pos:end="18:24">.</operator><name pos:start="18:25" pos:end="18:32">services</name><operator pos:start="18:33" pos:end="18:33">.</operator><name pos:start="18:34" pos:end="18:43">extensions</name><operator pos:start="18:44" pos:end="18:44">.</operator><name pos:start="18:45" pos:end="18:55">areamapping</name><operator pos:start="18:56" pos:end="18:56">.</operator><name pos:start="18:57" pos:end="18:64">internal</name><operator pos:start="18:65" pos:end="18:65">.</operator><name pos:start="18:66" pos:end="18:74">RiverBank</name></name>;</import>
<import pos:start="19:1" pos:end="19:77">import <name pos:start="19:8" pos:end="19:76"><name pos:start="19:8" pos:end="19:10">edu</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:13">nd</name><operator pos:start="19:14" pos:end="19:14">.</operator><name pos:start="19:15" pos:end="19:23">dronology</name><operator pos:start="19:24" pos:end="19:24">.</operator><name pos:start="19:25" pos:end="19:32">services</name><operator pos:start="19:33" pos:end="19:33">.</operator><name pos:start="19:34" pos:end="19:43">extensions</name><operator pos:start="19:44" pos:end="19:44">.</operator><name pos:start="19:45" pos:end="19:55">areamapping</name><operator pos:start="19:56" pos:end="19:56">.</operator><name pos:start="19:57" pos:end="19:61">model</name><operator pos:start="19:62" pos:end="19:62">.</operator><name pos:start="19:63" pos:end="19:76">RoutePrimitive</name></name>;</import>
<import pos:start="20:1" pos:end="20:87">import <name pos:start="20:8" pos:end="20:86"><name pos:start="20:8" pos:end="20:10">edu</name><operator pos:start="20:11" pos:end="20:11">.</operator><name pos:start="20:12" pos:end="20:13">nd</name><operator pos:start="20:14" pos:end="20:14">.</operator><name pos:start="20:15" pos:end="20:23">dronology</name><operator pos:start="20:24" pos:end="20:24">.</operator><name pos:start="20:25" pos:end="20:32">services</name><operator pos:start="20:33" pos:end="20:33">.</operator><name pos:start="20:34" pos:end="20:43">extensions</name><operator pos:start="20:44" pos:end="20:44">.</operator><name pos:start="20:45" pos:end="20:55">areamapping</name><operator pos:start="20:56" pos:end="20:56">.</operator><name pos:start="20:57" pos:end="20:61">model</name><operator pos:start="20:62" pos:end="20:62">.</operator><name pos:start="20:63" pos:end="20:76">RoutePrimitive</name><operator pos:start="20:77" pos:end="20:77">.</operator><name pos:start="20:78" pos:end="20:86">RouteType</name></name>;</import>

<class pos:start="22:1" pos:end="341:1"><specifier pos:start="22:1" pos:end="22:6">public</specifier> class <name pos:start="22:14" pos:end="22:29">MetricsUtilities</name> <block pos:start="22:31" pos:end="341:1">{
	<comment type="block" format="javadoc" pos:start="23:9" pos:end="29:11">/**
	 * This function generates circular ellipses for each image waypoint.
	 * 
	 * @param route
	 * @param APERATURE_WIDTH
	 * @return vector of circular Ellipse2D.Double
	 */</comment>
	<function pos:start="30:9" pos:end="39:9"><type pos:start="30:9" pos:end="30:46"><specifier pos:start="30:9" pos:end="30:14">public</specifier> <specifier pos:start="30:16" pos:end="30:21">static</specifier> <name pos:start="30:23" pos:end="30:46"><name pos:start="30:23" pos:end="30:28">Vector</name><argument_list type="generic" pos:start="30:29" pos:end="30:46">&lt;<argument pos:start="30:30" pos:end="30:45"><name pos:start="30:30" pos:end="30:45"><name pos:start="30:30" pos:end="30:38">Ellipse2D</name><operator pos:start="30:39" pos:end="30:39">.</operator><name pos:start="30:40" pos:end="30:45">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="30:48" pos:end="30:65">generateIWPCircles</name><parameter_list pos:start="30:66" pos:end="30:111">(<parameter pos:start="30:67" pos:end="30:86"><decl pos:start="30:67" pos:end="30:86"><type pos:start="30:67" pos:end="30:86"><name pos:start="30:67" pos:end="30:80">RoutePrimitive</name></type> <name pos:start="30:82" pos:end="30:86">route</name></decl></parameter>, <parameter pos:start="30:89" pos:end="30:110"><decl pos:start="30:89" pos:end="30:110"><type pos:start="30:89" pos:end="30:110"><name pos:start="30:89" pos:end="30:94">double</name></type> <name pos:start="30:96" pos:end="30:110">APERATURE_WIDTH</name></decl></parameter>)</parameter_list> <block pos:start="30:113" pos:end="39:9">{<block_content pos:start="31:17" pos:end="38:31">
		<decl_stmt pos:start="31:17" pos:end="31:66"><decl pos:start="31:17" pos:end="31:65"><type pos:start="31:17" pos:end="31:40"><name pos:start="31:17" pos:end="31:40"><name pos:start="31:17" pos:end="31:22">Vector</name><argument_list type="generic" pos:start="31:23" pos:end="31:40">&lt;<argument pos:start="31:24" pos:end="31:39"><name pos:start="31:24" pos:end="31:39"><name pos:start="31:24" pos:end="31:32">Ellipse2D</name><operator pos:start="31:33" pos:end="31:33">.</operator><name pos:start="31:34" pos:end="31:39">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="31:42" pos:end="31:48">circles</name> <init pos:start="31:50" pos:end="31:65">= <expr pos:start="31:52" pos:end="31:65"><operator pos:start="31:52" pos:end="31:54">new</operator> <call pos:start="31:56" pos:end="31:65"><name pos:start="31:56" pos:end="31:63"><name pos:start="31:56" pos:end="31:61">Vector</name><argument_list type="generic" pos:start="31:62" pos:end="31:63">&lt;&gt;</argument_list></name><argument_list pos:start="31:64" pos:end="31:65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="32:17" pos:end="32:63"><decl pos:start="32:17" pos:end="32:62"><type pos:start="32:17" pos:end="32:30"><name pos:start="32:17" pos:end="32:30">ImageWaypoints</name></type> <name pos:start="32:32" pos:end="32:45">imageWaypoints</name> <init pos:start="32:47" pos:end="32:62">= <expr pos:start="32:49" pos:end="32:62"><call pos:start="32:49" pos:end="32:62"><name pos:start="32:49" pos:end="32:60"><name pos:start="32:49" pos:end="32:53">route</name><operator pos:start="32:54" pos:end="32:54">.</operator><name pos:start="32:55" pos:end="32:60">getIWP</name></name><argument_list pos:start="32:61" pos:end="32:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:start="33:17" pos:end="37:17">for <control pos:start="33:21" pos:end="33:64">(<init pos:start="33:22" pos:end="33:63"><decl pos:start="33:22" pos:end="33:63"><type pos:start="33:22" pos:end="33:34"><name pos:start="33:22" pos:end="33:34">ImageWaypoint</name></type> <name pos:start="33:36" pos:end="33:40">entry</name> <range pos:start="33:42" pos:end="33:63">: <expr pos:start="33:44" pos:end="33:63"><call pos:start="33:44" pos:end="33:63"><name pos:start="33:44" pos:end="33:61"><name pos:start="33:44" pos:end="33:57">imageWaypoints</name><operator pos:start="33:58" pos:end="33:58">.</operator><name pos:start="33:59" pos:end="33:61">get</name></name><argument_list pos:start="33:62" pos:end="33:63">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="33:66" pos:end="37:17">{<block_content pos:start="34:25" pos:end="36:47">
			<decl_stmt pos:start="34:25" pos:end="35:124"><decl pos:start="34:25" pos:end="35:123"><type pos:start="34:25" pos:end="34:40"><name pos:start="34:25" pos:end="34:40"><name pos:start="34:25" pos:end="34:33">Ellipse2D</name><operator pos:start="34:34" pos:end="34:34">.</operator><name pos:start="34:35" pos:end="34:40">Double</name></name></type> <name pos:start="34:42" pos:end="34:50">newCircle</name> <init pos:start="34:52" pos:end="35:123">= <expr pos:start="34:54" pos:end="35:123"><operator pos:start="34:54" pos:end="34:56">new</operator> <call pos:start="34:58" pos:end="35:123"><name pos:start="34:58" pos:end="34:73"><name pos:start="34:58" pos:end="34:66">Ellipse2D</name><operator pos:start="34:67" pos:end="34:67">.</operator><name pos:start="34:68" pos:end="34:73">Double</name></name><argument_list pos:start="34:74" pos:end="35:123">(<argument pos:start="34:75" pos:end="34:122"><expr pos:start="34:75" pos:end="34:122"><call pos:start="34:75" pos:end="34:93"><name pos:start="34:75" pos:end="34:91"><name pos:start="34:75" pos:end="34:79">entry</name><operator pos:start="34:80" pos:end="34:80">.</operator><name pos:start="34:81" pos:end="34:91">getWaypoint</name></name><argument_list pos:start="34:92" pos:end="34:93">()</argument_list></call><operator pos:start="34:94" pos:end="34:94">.</operator><call pos:start="34:95" pos:end="34:100"><name pos:start="34:95" pos:end="34:98">getX</name><argument_list pos:start="34:99" pos:end="34:100">()</argument_list></call> <operator pos:start="34:102" pos:end="34:102">-</operator> <name pos:start="34:104" pos:end="34:118">APERATURE_WIDTH</name> <operator pos:start="34:120" pos:end="34:120">/</operator> <literal type="number" pos:start="34:122" pos:end="34:122">2</literal></expr></argument>,
					<argument pos:start="35:41" pos:end="35:88"><expr pos:start="35:41" pos:end="35:88"><call pos:start="35:41" pos:end="35:59"><name pos:start="35:41" pos:end="35:57"><name pos:start="35:41" pos:end="35:45">entry</name><operator pos:start="35:46" pos:end="35:46">.</operator><name pos:start="35:47" pos:end="35:57">getWaypoint</name></name><argument_list pos:start="35:58" pos:end="35:59">()</argument_list></call><operator pos:start="35:60" pos:end="35:60">.</operator><call pos:start="35:61" pos:end="35:66"><name pos:start="35:61" pos:end="35:64">getY</name><argument_list pos:start="35:65" pos:end="35:66">()</argument_list></call> <operator pos:start="35:68" pos:end="35:68">-</operator> <name pos:start="35:70" pos:end="35:84">APERATURE_WIDTH</name> <operator pos:start="35:86" pos:end="35:86">/</operator> <literal type="number" pos:start="35:88" pos:end="35:88">2</literal></expr></argument>, <argument pos:start="35:91" pos:end="35:105"><expr pos:start="35:91" pos:end="35:105"><name pos:start="35:91" pos:end="35:105">APERATURE_WIDTH</name></expr></argument>, <argument pos:start="35:108" pos:end="35:122"><expr pos:start="35:108" pos:end="35:122"><name pos:start="35:108" pos:end="35:122">APERATURE_WIDTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt pos:start="36:25" pos:end="36:47"><expr pos:start="36:25" pos:end="36:46"><call pos:start="36:25" pos:end="36:46"><name pos:start="36:25" pos:end="36:35"><name pos:start="36:25" pos:end="36:31">circles</name><operator pos:start="36:32" pos:end="36:32">.</operator><name pos:start="36:33" pos:end="36:35">add</name></name><argument_list pos:start="36:36" pos:end="36:46">(<argument pos:start="36:37" pos:end="36:45"><expr pos:start="36:37" pos:end="36:45"><name pos:start="36:37" pos:end="36:45">newCircle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="38:17" pos:end="38:31">return <expr pos:start="38:24" pos:end="38:30"><name pos:start="38:24" pos:end="38:30">circles</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="41:9" pos:end="48:9"><type pos:start="41:9" pos:end="41:43"><specifier pos:start="41:9" pos:end="41:14">public</specifier> <specifier pos:start="41:16" pos:end="41:21">static</specifier> <name pos:start="41:23" pos:end="41:43"><name pos:start="41:23" pos:end="41:28">Vector</name><argument_list type="generic" pos:start="41:29" pos:end="41:43">&lt;<argument pos:start="41:30" pos:end="41:42"><name pos:start="41:30" pos:end="41:42"><name pos:start="41:30" pos:end="41:35">Path2D</name><operator pos:start="41:36" pos:end="41:36">.</operator><name pos:start="41:37" pos:end="41:42">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="41:45" pos:end="41:65">generateIWPRectangles</name><parameter_list pos:start="41:66" pos:end="42:48">(<parameter pos:start="41:67" pos:end="41:86"><decl pos:start="41:67" pos:end="41:86"><type pos:start="41:67" pos:end="41:86"><name pos:start="41:67" pos:end="41:80">RoutePrimitive</name></type> <name pos:start="41:82" pos:end="41:86">route</name></decl></parameter>, <parameter pos:start="41:89" pos:end="41:110"><decl pos:start="41:89" pos:end="41:110"><type pos:start="41:89" pos:end="41:110"><name pos:start="41:89" pos:end="41:94">double</name></type> <name pos:start="41:96" pos:end="41:110">APERATURE_WIDTH</name></decl></parameter>,
			<parameter pos:start="42:25" pos:end="42:47"><decl pos:start="42:25" pos:end="42:47"><type pos:start="42:25" pos:end="42:47"><name pos:start="42:25" pos:end="42:30">double</name></type> <name pos:start="42:32" pos:end="42:47">APERATURE_HEIGHT</name></decl></parameter>)</parameter_list> <block pos:start="42:50" pos:end="48:9">{<block_content pos:start="43:17" pos:end="47:42">
		<decl_stmt pos:start="43:17" pos:end="43:74"><decl pos:start="43:17" pos:end="43:73"><type pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:22">Vector</name><argument_list type="generic" pos:start="43:23" pos:end="43:37">&lt;<argument pos:start="43:24" pos:end="43:36"><name pos:start="43:24" pos:end="43:36"><name pos:start="43:24" pos:end="43:29">Path2D</name><operator pos:start="43:30" pos:end="43:30">.</operator><name pos:start="43:31" pos:end="43:36">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="43:39" pos:end="43:56">coverageRectangles</name> <init pos:start="43:58" pos:end="43:73">= <expr pos:start="43:60" pos:end="43:73"><operator pos:start="43:60" pos:end="43:62">new</operator> <call pos:start="43:64" pos:end="43:73"><name pos:start="43:64" pos:end="43:71"><name pos:start="43:64" pos:end="43:69">Vector</name><argument_list type="generic" pos:start="43:70" pos:end="43:71">&lt;&gt;</argument_list></name><argument_list pos:start="43:72" pos:end="43:73">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:start="44:17" pos:end="46:17">for <control pos:start="44:21" pos:end="44:64">(<init pos:start="44:22" pos:end="44:63"><decl pos:start="44:22" pos:end="44:63"><type pos:start="44:22" pos:end="44:34"><name pos:start="44:22" pos:end="44:34">ImageWaypoint</name></type> <name pos:start="44:36" pos:end="44:40">entry</name> <range pos:start="44:42" pos:end="44:63">: <expr pos:start="44:44" pos:end="44:63"><call pos:start="44:44" pos:end="44:57"><name pos:start="44:44" pos:end="44:55"><name pos:start="44:44" pos:end="44:48">route</name><operator pos:start="44:49" pos:end="44:49">.</operator><name pos:start="44:50" pos:end="44:55">getIWP</name></name><argument_list pos:start="44:56" pos:end="44:57">()</argument_list></call><operator pos:start="44:58" pos:end="44:58">.</operator><call pos:start="44:59" pos:end="44:63"><name pos:start="44:59" pos:end="44:61">get</name><argument_list pos:start="44:62" pos:end="44:63">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="44:66" pos:end="46:17">{<block_content pos:start="45:25" pos:end="45:111">
			<expr_stmt pos:start="45:25" pos:end="45:111"><expr pos:start="45:25" pos:end="45:110"><call pos:start="45:25" pos:end="45:110"><name pos:start="45:25" pos:end="45:46"><name pos:start="45:25" pos:end="45:42">coverageRectangles</name><operator pos:start="45:43" pos:end="45:43">.</operator><name pos:start="45:44" pos:end="45:46">add</name></name><argument_list pos:start="45:47" pos:end="45:110">(<argument pos:start="45:48" pos:end="45:109"><expr pos:start="45:48" pos:end="45:109"><call pos:start="45:48" pos:end="45:109"><name pos:start="45:48" pos:end="45:67">generateIWPRectangle</name><argument_list pos:start="45:68" pos:end="45:109">(<argument pos:start="45:69" pos:end="45:73"><expr pos:start="45:69" pos:end="45:73"><name pos:start="45:69" pos:end="45:73">entry</name></expr></argument>, <argument pos:start="45:76" pos:end="45:90"><expr pos:start="45:76" pos:end="45:90"><name pos:start="45:76" pos:end="45:90">APERATURE_WIDTH</name></expr></argument>, <argument pos:start="45:93" pos:end="45:108"><expr pos:start="45:93" pos:end="45:108"><name pos:start="45:93" pos:end="45:108">APERATURE_HEIGHT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="47:17" pos:end="47:42">return <expr pos:start="47:24" pos:end="47:41"><name pos:start="47:24" pos:end="47:41">coverageRectangles</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="50:9" pos:end="75:9"><type pos:start="50:9" pos:end="50:36"><specifier pos:start="50:9" pos:end="50:15">private</specifier> <specifier pos:start="50:17" pos:end="50:22">static</specifier> <name pos:start="50:24" pos:end="50:36"><name pos:start="50:24" pos:end="50:29">Path2D</name><operator pos:start="50:30" pos:end="50:30">.</operator><name pos:start="50:31" pos:end="50:36">Double</name></name></type> <name pos:start="50:38" pos:end="50:57">generateIWPRectangle</name><parameter_list pos:start="50:58" pos:end="51:48">(<parameter pos:start="50:59" pos:end="50:82"><decl pos:start="50:59" pos:end="50:82"><type pos:start="50:59" pos:end="50:82"><name pos:start="50:59" pos:end="50:71">ImageWaypoint</name></type> <name pos:start="50:73" pos:end="50:82">imagePoint</name></decl></parameter>, <parameter pos:start="50:85" pos:end="50:106"><decl pos:start="50:85" pos:end="50:106"><type pos:start="50:85" pos:end="50:106"><name pos:start="50:85" pos:end="50:90">double</name></type> <name pos:start="50:92" pos:end="50:106">APERATURE_WIDTH</name></decl></parameter>,
			<parameter pos:start="51:25" pos:end="51:47"><decl pos:start="51:25" pos:end="51:47"><type pos:start="51:25" pos:end="51:47"><name pos:start="51:25" pos:end="51:30">double</name></type> <name pos:start="51:32" pos:end="51:47">APERATURE_HEIGHT</name></decl></parameter>)</parameter_list> <block pos:start="51:50" pos:end="75:9">{<block_content pos:start="52:17" pos:end="74:41">
		<decl_stmt pos:start="52:17" pos:end="52:70"><decl pos:start="52:17" pos:end="52:69"><type pos:start="52:17" pos:end="52:29"><name pos:start="52:17" pos:end="52:29"><name pos:start="52:17" pos:end="52:22">Path2D</name><operator pos:start="52:23" pos:end="52:23">.</operator><name pos:start="52:24" pos:end="52:29">Double</name></name></type> <name pos:start="52:31" pos:end="52:47">coverageRectangle</name> <init pos:start="52:49" pos:end="52:69">= <expr pos:start="52:51" pos:end="52:69"><operator pos:start="52:51" pos:end="52:53">new</operator> <call pos:start="52:55" pos:end="52:69"><name pos:start="52:55" pos:end="52:67"><name pos:start="52:55" pos:end="52:60">Path2D</name><operator pos:start="52:61" pos:end="52:61">.</operator><name pos:start="52:62" pos:end="52:67">Double</name></name><argument_list pos:start="52:68" pos:end="52:69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="53:17" pos:end="53:64"><decl pos:start="53:17" pos:end="53:63"><type pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:23">Point2D</name><operator pos:start="53:24" pos:end="53:24">.</operator><name pos:start="53:25" pos:end="53:30">Double</name></name></type> <name pos:start="53:32" pos:end="53:40">midpoint1</name> <init pos:start="53:42" pos:end="53:63">= <expr pos:start="53:44" pos:end="53:63"><operator pos:start="53:44" pos:end="53:46">new</operator> <call pos:start="53:48" pos:end="53:63"><name pos:start="53:48" pos:end="53:61"><name pos:start="53:48" pos:end="53:54">Point2D</name><operator pos:start="53:55" pos:end="53:55">.</operator><name pos:start="53:56" pos:end="53:61">Double</name></name><argument_list pos:start="53:62" pos:end="53:63">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="54:17" pos:end="54:64"><decl pos:start="54:17" pos:end="54:63"><type pos:start="54:17" pos:end="54:30"><name pos:start="54:17" pos:end="54:30"><name pos:start="54:17" pos:end="54:23">Point2D</name><operator pos:start="54:24" pos:end="54:24">.</operator><name pos:start="54:25" pos:end="54:30">Double</name></name></type> <name pos:start="54:32" pos:end="54:40">midpoint2</name> <init pos:start="54:42" pos:end="54:63">= <expr pos:start="54:44" pos:end="54:63"><operator pos:start="54:44" pos:end="54:46">new</operator> <call pos:start="54:48" pos:end="54:63"><name pos:start="54:48" pos:end="54:61"><name pos:start="54:48" pos:end="54:54">Point2D</name><operator pos:start="54:55" pos:end="54:55">.</operator><name pos:start="54:56" pos:end="54:61">Double</name></name><argument_list pos:start="54:62" pos:end="54:63">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="55:17" pos:end="55:62"><decl pos:start="55:17" pos:end="55:61"><type pos:start="55:17" pos:end="55:30"><name pos:start="55:17" pos:end="55:30"><name pos:start="55:17" pos:end="55:23">Point2D</name><operator pos:start="55:24" pos:end="55:24">.</operator><name pos:start="55:25" pos:end="55:30">Double</name></name></type> <name pos:start="55:32" pos:end="55:38">corner1</name> <init pos:start="55:40" pos:end="55:61">= <expr pos:start="55:42" pos:end="55:61"><operator pos:start="55:42" pos:end="55:44">new</operator> <call pos:start="55:46" pos:end="55:61"><name pos:start="55:46" pos:end="55:59"><name pos:start="55:46" pos:end="55:52">Point2D</name><operator pos:start="55:53" pos:end="55:53">.</operator><name pos:start="55:54" pos:end="55:59">Double</name></name><argument_list pos:start="55:60" pos:end="55:61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="56:17" pos:end="56:62"><decl pos:start="56:17" pos:end="56:61"><type pos:start="56:17" pos:end="56:30"><name pos:start="56:17" pos:end="56:30"><name pos:start="56:17" pos:end="56:23">Point2D</name><operator pos:start="56:24" pos:end="56:24">.</operator><name pos:start="56:25" pos:end="56:30">Double</name></name></type> <name pos:start="56:32" pos:end="56:38">corner2</name> <init pos:start="56:40" pos:end="56:61">= <expr pos:start="56:42" pos:end="56:61"><operator pos:start="56:42" pos:end="56:44">new</operator> <call pos:start="56:46" pos:end="56:61"><name pos:start="56:46" pos:end="56:59"><name pos:start="56:46" pos:end="56:52">Point2D</name><operator pos:start="56:53" pos:end="56:53">.</operator><name pos:start="56:54" pos:end="56:59">Double</name></name><argument_list pos:start="56:60" pos:end="56:61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="57:17" pos:end="57:62"><decl pos:start="57:17" pos:end="57:61"><type pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:23">Point2D</name><operator pos:start="57:24" pos:end="57:24">.</operator><name pos:start="57:25" pos:end="57:30">Double</name></name></type> <name pos:start="57:32" pos:end="57:38">corner3</name> <init pos:start="57:40" pos:end="57:61">= <expr pos:start="57:42" pos:end="57:61"><operator pos:start="57:42" pos:end="57:44">new</operator> <call pos:start="57:46" pos:end="57:61"><name pos:start="57:46" pos:end="57:59"><name pos:start="57:46" pos:end="57:52">Point2D</name><operator pos:start="57:53" pos:end="57:53">.</operator><name pos:start="57:54" pos:end="57:59">Double</name></name><argument_list pos:start="57:60" pos:end="57:61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="58:17" pos:end="58:62"><decl pos:start="58:17" pos:end="58:61"><type pos:start="58:17" pos:end="58:30"><name pos:start="58:17" pos:end="58:30"><name pos:start="58:17" pos:end="58:23">Point2D</name><operator pos:start="58:24" pos:end="58:24">.</operator><name pos:start="58:25" pos:end="58:30">Double</name></name></type> <name pos:start="58:32" pos:end="58:38">corner4</name> <init pos:start="58:40" pos:end="58:61">= <expr pos:start="58:42" pos:end="58:61"><operator pos:start="58:42" pos:end="58:44">new</operator> <call pos:start="58:46" pos:end="58:61"><name pos:start="58:46" pos:end="58:59"><name pos:start="58:46" pos:end="58:52">Point2D</name><operator pos:start="58:53" pos:end="58:53">.</operator><name pos:start="58:54" pos:end="58:59">Double</name></name><argument_list pos:start="58:60" pos:end="58:61">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="59:17" pos:end="59:100"><decl pos:start="59:17" pos:end="59:99"><type pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">double</name></type> <name pos:start="59:24" pos:end="59:31">dxHeight</name> <init pos:start="59:33" pos:end="59:99">= <expr pos:start="59:35" pos:end="59:99"><name pos:start="59:35" pos:end="59:50">APERATURE_HEIGHT</name> <operator pos:start="59:52" pos:end="59:52">/</operator> <literal type="number" pos:start="59:54" pos:end="59:54">2</literal> <operator pos:start="59:56" pos:end="59:56">*</operator> <call pos:start="59:58" pos:end="59:99"><name pos:start="59:58" pos:end="59:65"><name pos:start="59:58" pos:end="59:61">Math</name><operator pos:start="59:62" pos:end="59:62">.</operator><name pos:start="59:63" pos:end="59:65">cos</name></name><argument_list pos:start="59:66" pos:end="59:99">(<argument pos:start="59:67" pos:end="59:98"><expr pos:start="59:67" pos:end="59:98"><call pos:start="59:67" pos:end="59:98"><name pos:start="59:67" pos:end="59:96"><name pos:start="59:67" pos:end="59:76">imagePoint</name><operator pos:start="59:77" pos:end="59:77">.</operator><name pos:start="59:78" pos:end="59:96">getOrientationAngle</name></name><argument_list pos:start="59:97" pos:end="59:98">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="60:17" pos:end="60:100"><decl pos:start="60:17" pos:end="60:99"><type pos:start="60:17" pos:end="60:22"><name pos:start="60:17" pos:end="60:22">double</name></type> <name pos:start="60:24" pos:end="60:31">dyHeight</name> <init pos:start="60:33" pos:end="60:99">= <expr pos:start="60:35" pos:end="60:99"><name pos:start="60:35" pos:end="60:50">APERATURE_HEIGHT</name> <operator pos:start="60:52" pos:end="60:52">/</operator> <literal type="number" pos:start="60:54" pos:end="60:54">2</literal> <operator pos:start="60:56" pos:end="60:56">*</operator> <call pos:start="60:58" pos:end="60:99"><name pos:start="60:58" pos:end="60:65"><name pos:start="60:58" pos:end="60:61">Math</name><operator pos:start="60:62" pos:end="60:62">.</operator><name pos:start="60:63" pos:end="60:65">sin</name></name><argument_list pos:start="60:66" pos:end="60:99">(<argument pos:start="60:67" pos:end="60:98"><expr pos:start="60:67" pos:end="60:98"><call pos:start="60:67" pos:end="60:98"><name pos:start="60:67" pos:end="60:96"><name pos:start="60:67" pos:end="60:76">imagePoint</name><operator pos:start="60:77" pos:end="60:77">.</operator><name pos:start="60:78" pos:end="60:96">getOrientationAngle</name></name><argument_list pos:start="60:97" pos:end="60:98">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="61:17" pos:end="61:112"><decl pos:start="61:17" pos:end="61:111"><type pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:22">double</name></type> <name pos:start="61:24" pos:end="61:30">dxWidth</name> <init pos:start="61:32" pos:end="61:111">= <expr pos:start="61:34" pos:end="61:111"><name pos:start="61:34" pos:end="61:48">APERATURE_WIDTH</name> <operator pos:start="61:50" pos:end="61:50">/</operator> <literal type="number" pos:start="61:52" pos:end="61:52">2</literal> <operator pos:start="61:54" pos:end="61:54">*</operator> <call pos:start="61:56" pos:end="61:111"><name pos:start="61:56" pos:end="61:63"><name pos:start="61:56" pos:end="61:59">Math</name><operator pos:start="61:60" pos:end="61:60">.</operator><name pos:start="61:61" pos:end="61:63">cos</name></name><argument_list pos:start="61:64" pos:end="61:111">(<argument pos:start="61:65" pos:end="61:110"><expr pos:start="61:65" pos:end="61:110"><call pos:start="61:65" pos:end="61:96"><name pos:start="61:65" pos:end="61:94"><name pos:start="61:65" pos:end="61:74">imagePoint</name><operator pos:start="61:75" pos:end="61:75">.</operator><name pos:start="61:76" pos:end="61:94">getOrientationAngle</name></name><argument_list pos:start="61:95" pos:end="61:96">()</argument_list></call> <operator pos:start="61:98" pos:end="61:98">+</operator> <name pos:start="61:100" pos:end="61:106"><name pos:start="61:100" pos:end="61:103">Math</name><operator pos:start="61:104" pos:end="61:104">.</operator><name pos:start="61:105" pos:end="61:106">PI</name></name> <operator pos:start="61:108" pos:end="61:108">/</operator> <literal type="number" pos:start="61:110" pos:end="61:110">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="62:17" pos:end="62:112"><decl pos:start="62:17" pos:end="62:111"><type pos:start="62:17" pos:end="62:22"><name pos:start="62:17" pos:end="62:22">double</name></type> <name pos:start="62:24" pos:end="62:30">dyWidth</name> <init pos:start="62:32" pos:end="62:111">= <expr pos:start="62:34" pos:end="62:111"><name pos:start="62:34" pos:end="62:48">APERATURE_WIDTH</name> <operator pos:start="62:50" pos:end="62:50">/</operator> <literal type="number" pos:start="62:52" pos:end="62:52">2</literal> <operator pos:start="62:54" pos:end="62:54">*</operator> <call pos:start="62:56" pos:end="62:111"><name pos:start="62:56" pos:end="62:63"><name pos:start="62:56" pos:end="62:59">Math</name><operator pos:start="62:60" pos:end="62:60">.</operator><name pos:start="62:61" pos:end="62:63">sin</name></name><argument_list pos:start="62:64" pos:end="62:111">(<argument pos:start="62:65" pos:end="62:110"><expr pos:start="62:65" pos:end="62:110"><call pos:start="62:65" pos:end="62:96"><name pos:start="62:65" pos:end="62:94"><name pos:start="62:65" pos:end="62:74">imagePoint</name><operator pos:start="62:75" pos:end="62:75">.</operator><name pos:start="62:76" pos:end="62:94">getOrientationAngle</name></name><argument_list pos:start="62:95" pos:end="62:96">()</argument_list></call> <operator pos:start="62:98" pos:end="62:98">+</operator> <name pos:start="62:100" pos:end="62:106"><name pos:start="62:100" pos:end="62:103">Math</name><operator pos:start="62:104" pos:end="62:104">.</operator><name pos:start="62:105" pos:end="62:106">PI</name></name> <operator pos:start="62:108" pos:end="62:108">/</operator> <literal type="number" pos:start="62:110" pos:end="62:110">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="63:17" pos:end="63:126"><expr pos:start="63:17" pos:end="63:125"><call pos:start="63:17" pos:end="63:125"><name pos:start="63:17" pos:end="63:37"><name pos:start="63:17" pos:end="63:25">midpoint1</name><operator pos:start="63:26" pos:end="63:26">.</operator><name pos:start="63:27" pos:end="63:37">setLocation</name></name><argument_list pos:start="63:38" pos:end="63:125">(<argument pos:start="63:39" pos:end="63:80"><expr pos:start="63:39" pos:end="63:80"><call pos:start="63:39" pos:end="63:62"><name pos:start="63:39" pos:end="63:60"><name pos:start="63:39" pos:end="63:48">imagePoint</name><operator pos:start="63:49" pos:end="63:49">.</operator><name pos:start="63:50" pos:end="63:60">getWaypoint</name></name><argument_list pos:start="63:61" pos:end="63:62">()</argument_list></call><operator pos:start="63:63" pos:end="63:63">.</operator><call pos:start="63:64" pos:end="63:69"><name pos:start="63:64" pos:end="63:67">getX</name><argument_list pos:start="63:68" pos:end="63:69">()</argument_list></call> <operator pos:start="63:71" pos:end="63:71">+</operator> <name pos:start="63:73" pos:end="63:80">dxHeight</name></expr></argument>, <argument pos:start="63:83" pos:end="63:124"><expr pos:start="63:83" pos:end="63:124"><call pos:start="63:83" pos:end="63:106"><name pos:start="63:83" pos:end="63:104"><name pos:start="63:83" pos:end="63:92">imagePoint</name><operator pos:start="63:93" pos:end="63:93">.</operator><name pos:start="63:94" pos:end="63:104">getWaypoint</name></name><argument_list pos:start="63:105" pos:end="63:106">()</argument_list></call><operator pos:start="63:107" pos:end="63:107">.</operator><call pos:start="63:108" pos:end="63:113"><name pos:start="63:108" pos:end="63:111">getY</name><argument_list pos:start="63:112" pos:end="63:113">()</argument_list></call> <operator pos:start="63:115" pos:end="63:115">+</operator> <name pos:start="63:117" pos:end="63:124">dyHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="64:17" pos:end="64:126"><expr pos:start="64:17" pos:end="64:125"><call pos:start="64:17" pos:end="64:125"><name pos:start="64:17" pos:end="64:37"><name pos:start="64:17" pos:end="64:25">midpoint2</name><operator pos:start="64:26" pos:end="64:26">.</operator><name pos:start="64:27" pos:end="64:37">setLocation</name></name><argument_list pos:start="64:38" pos:end="64:125">(<argument pos:start="64:39" pos:end="64:80"><expr pos:start="64:39" pos:end="64:80"><call pos:start="64:39" pos:end="64:62"><name pos:start="64:39" pos:end="64:60"><name pos:start="64:39" pos:end="64:48">imagePoint</name><operator pos:start="64:49" pos:end="64:49">.</operator><name pos:start="64:50" pos:end="64:60">getWaypoint</name></name><argument_list pos:start="64:61" pos:end="64:62">()</argument_list></call><operator pos:start="64:63" pos:end="64:63">.</operator><call pos:start="64:64" pos:end="64:69"><name pos:start="64:64" pos:end="64:67">getX</name><argument_list pos:start="64:68" pos:end="64:69">()</argument_list></call> <operator pos:start="64:71" pos:end="64:71">-</operator> <name pos:start="64:73" pos:end="64:80">dxHeight</name></expr></argument>, <argument pos:start="64:83" pos:end="64:124"><expr pos:start="64:83" pos:end="64:124"><call pos:start="64:83" pos:end="64:106"><name pos:start="64:83" pos:end="64:104"><name pos:start="64:83" pos:end="64:92">imagePoint</name><operator pos:start="64:93" pos:end="64:93">.</operator><name pos:start="64:94" pos:end="64:104">getWaypoint</name></name><argument_list pos:start="64:105" pos:end="64:106">()</argument_list></call><operator pos:start="64:107" pos:end="64:107">.</operator><call pos:start="64:108" pos:end="64:113"><name pos:start="64:108" pos:end="64:111">getY</name><argument_list pos:start="64:112" pos:end="64:113">()</argument_list></call> <operator pos:start="64:115" pos:end="64:115">-</operator> <name pos:start="64:117" pos:end="64:124">dyHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="65:17" pos:end="65:92"><expr pos:start="65:17" pos:end="65:91"><call pos:start="65:17" pos:end="65:91"><name pos:start="65:17" pos:end="65:35"><name pos:start="65:17" pos:end="65:23">corner1</name><operator pos:start="65:24" pos:end="65:24">.</operator><name pos:start="65:25" pos:end="65:35">setLocation</name></name><argument_list pos:start="65:36" pos:end="65:91">(<argument pos:start="65:37" pos:end="65:62"><expr pos:start="65:37" pos:end="65:62"><call pos:start="65:37" pos:end="65:52"><name pos:start="65:37" pos:end="65:50"><name pos:start="65:37" pos:end="65:45">midpoint1</name><operator pos:start="65:46" pos:end="65:46">.</operator><name pos:start="65:47" pos:end="65:50">getX</name></name><argument_list pos:start="65:51" pos:end="65:52">()</argument_list></call> <operator pos:start="65:54" pos:end="65:54">+</operator> <name pos:start="65:56" pos:end="65:62">dxWidth</name></expr></argument>, <argument pos:start="65:65" pos:end="65:90"><expr pos:start="65:65" pos:end="65:90"><call pos:start="65:65" pos:end="65:80"><name pos:start="65:65" pos:end="65:78"><name pos:start="65:65" pos:end="65:73">midpoint1</name><operator pos:start="65:74" pos:end="65:74">.</operator><name pos:start="65:75" pos:end="65:78">getY</name></name><argument_list pos:start="65:79" pos:end="65:80">()</argument_list></call> <operator pos:start="65:82" pos:end="65:82">+</operator> <name pos:start="65:84" pos:end="65:90">dyWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="66:17" pos:end="66:92"><expr pos:start="66:17" pos:end="66:91"><call pos:start="66:17" pos:end="66:91"><name pos:start="66:17" pos:end="66:35"><name pos:start="66:17" pos:end="66:23">corner2</name><operator pos:start="66:24" pos:end="66:24">.</operator><name pos:start="66:25" pos:end="66:35">setLocation</name></name><argument_list pos:start="66:36" pos:end="66:91">(<argument pos:start="66:37" pos:end="66:62"><expr pos:start="66:37" pos:end="66:62"><call pos:start="66:37" pos:end="66:52"><name pos:start="66:37" pos:end="66:50"><name pos:start="66:37" pos:end="66:45">midpoint1</name><operator pos:start="66:46" pos:end="66:46">.</operator><name pos:start="66:47" pos:end="66:50">getX</name></name><argument_list pos:start="66:51" pos:end="66:52">()</argument_list></call> <operator pos:start="66:54" pos:end="66:54">-</operator> <name pos:start="66:56" pos:end="66:62">dxWidth</name></expr></argument>, <argument pos:start="66:65" pos:end="66:90"><expr pos:start="66:65" pos:end="66:90"><call pos:start="66:65" pos:end="66:80"><name pos:start="66:65" pos:end="66:78"><name pos:start="66:65" pos:end="66:73">midpoint1</name><operator pos:start="66:74" pos:end="66:74">.</operator><name pos:start="66:75" pos:end="66:78">getY</name></name><argument_list pos:start="66:79" pos:end="66:80">()</argument_list></call> <operator pos:start="66:82" pos:end="66:82">-</operator> <name pos:start="66:84" pos:end="66:90">dyWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="67:17" pos:end="67:92"><expr pos:start="67:17" pos:end="67:91"><call pos:start="67:17" pos:end="67:91"><name pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:23">corner3</name><operator pos:start="67:24" pos:end="67:24">.</operator><name pos:start="67:25" pos:end="67:35">setLocation</name></name><argument_list pos:start="67:36" pos:end="67:91">(<argument pos:start="67:37" pos:end="67:62"><expr pos:start="67:37" pos:end="67:62"><call pos:start="67:37" pos:end="67:52"><name pos:start="67:37" pos:end="67:50"><name pos:start="67:37" pos:end="67:45">midpoint2</name><operator pos:start="67:46" pos:end="67:46">.</operator><name pos:start="67:47" pos:end="67:50">getX</name></name><argument_list pos:start="67:51" pos:end="67:52">()</argument_list></call> <operator pos:start="67:54" pos:end="67:54">-</operator> <name pos:start="67:56" pos:end="67:62">dxWidth</name></expr></argument>, <argument pos:start="67:65" pos:end="67:90"><expr pos:start="67:65" pos:end="67:90"><call pos:start="67:65" pos:end="67:80"><name pos:start="67:65" pos:end="67:78"><name pos:start="67:65" pos:end="67:73">midpoint2</name><operator pos:start="67:74" pos:end="67:74">.</operator><name pos:start="67:75" pos:end="67:78">getY</name></name><argument_list pos:start="67:79" pos:end="67:80">()</argument_list></call> <operator pos:start="67:82" pos:end="67:82">-</operator> <name pos:start="67:84" pos:end="67:90">dyWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="68:17" pos:end="68:92"><expr pos:start="68:17" pos:end="68:91"><call pos:start="68:17" pos:end="68:91"><name pos:start="68:17" pos:end="68:35"><name pos:start="68:17" pos:end="68:23">corner4</name><operator pos:start="68:24" pos:end="68:24">.</operator><name pos:start="68:25" pos:end="68:35">setLocation</name></name><argument_list pos:start="68:36" pos:end="68:91">(<argument pos:start="68:37" pos:end="68:62"><expr pos:start="68:37" pos:end="68:62"><call pos:start="68:37" pos:end="68:52"><name pos:start="68:37" pos:end="68:50"><name pos:start="68:37" pos:end="68:45">midpoint2</name><operator pos:start="68:46" pos:end="68:46">.</operator><name pos:start="68:47" pos:end="68:50">getX</name></name><argument_list pos:start="68:51" pos:end="68:52">()</argument_list></call> <operator pos:start="68:54" pos:end="68:54">+</operator> <name pos:start="68:56" pos:end="68:62">dxWidth</name></expr></argument>, <argument pos:start="68:65" pos:end="68:90"><expr pos:start="68:65" pos:end="68:90"><call pos:start="68:65" pos:end="68:80"><name pos:start="68:65" pos:end="68:78"><name pos:start="68:65" pos:end="68:73">midpoint2</name><operator pos:start="68:74" pos:end="68:74">.</operator><name pos:start="68:75" pos:end="68:78">getY</name></name><argument_list pos:start="68:79" pos:end="68:80">()</argument_list></call> <operator pos:start="68:82" pos:end="68:82">+</operator> <name pos:start="68:84" pos:end="68:90">dyWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="69:17" pos:end="69:73"><expr pos:start="69:17" pos:end="69:72"><call pos:start="69:17" pos:end="69:72"><name pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:33">coverageRectangle</name><operator pos:start="69:34" pos:end="69:34">.</operator><name pos:start="69:35" pos:end="69:40">moveTo</name></name><argument_list pos:start="69:41" pos:end="69:72">(<argument pos:start="69:42" pos:end="69:55"><expr pos:start="69:42" pos:end="69:55"><call pos:start="69:42" pos:end="69:55"><name pos:start="69:42" pos:end="69:53"><name pos:start="69:42" pos:end="69:48">corner1</name><operator pos:start="69:49" pos:end="69:49">.</operator><name pos:start="69:50" pos:end="69:53">getX</name></name><argument_list pos:start="69:54" pos:end="69:55">()</argument_list></call></expr></argument>, <argument pos:start="69:58" pos:end="69:71"><expr pos:start="69:58" pos:end="69:71"><call pos:start="69:58" pos:end="69:71"><name pos:start="69:58" pos:end="69:69"><name pos:start="69:58" pos:end="69:64">corner1</name><operator pos:start="69:65" pos:end="69:65">.</operator><name pos:start="69:66" pos:end="69:69">getY</name></name><argument_list pos:start="69:70" pos:end="69:71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="70:17" pos:end="70:73"><expr pos:start="70:17" pos:end="70:72"><call pos:start="70:17" pos:end="70:72"><name pos:start="70:17" pos:end="70:40"><name pos:start="70:17" pos:end="70:33">coverageRectangle</name><operator pos:start="70:34" pos:end="70:34">.</operator><name pos:start="70:35" pos:end="70:40">lineTo</name></name><argument_list pos:start="70:41" pos:end="70:72">(<argument pos:start="70:42" pos:end="70:55"><expr pos:start="70:42" pos:end="70:55"><call pos:start="70:42" pos:end="70:55"><name pos:start="70:42" pos:end="70:53"><name pos:start="70:42" pos:end="70:48">corner2</name><operator pos:start="70:49" pos:end="70:49">.</operator><name pos:start="70:50" pos:end="70:53">getX</name></name><argument_list pos:start="70:54" pos:end="70:55">()</argument_list></call></expr></argument>, <argument pos:start="70:58" pos:end="70:71"><expr pos:start="70:58" pos:end="70:71"><call pos:start="70:58" pos:end="70:71"><name pos:start="70:58" pos:end="70:69"><name pos:start="70:58" pos:end="70:64">corner2</name><operator pos:start="70:65" pos:end="70:65">.</operator><name pos:start="70:66" pos:end="70:69">getY</name></name><argument_list pos:start="70:70" pos:end="70:71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="71:17" pos:end="71:73"><expr pos:start="71:17" pos:end="71:72"><call pos:start="71:17" pos:end="71:72"><name pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:33">coverageRectangle</name><operator pos:start="71:34" pos:end="71:34">.</operator><name pos:start="71:35" pos:end="71:40">lineTo</name></name><argument_list pos:start="71:41" pos:end="71:72">(<argument pos:start="71:42" pos:end="71:55"><expr pos:start="71:42" pos:end="71:55"><call pos:start="71:42" pos:end="71:55"><name pos:start="71:42" pos:end="71:53"><name pos:start="71:42" pos:end="71:48">corner3</name><operator pos:start="71:49" pos:end="71:49">.</operator><name pos:start="71:50" pos:end="71:53">getX</name></name><argument_list pos:start="71:54" pos:end="71:55">()</argument_list></call></expr></argument>, <argument pos:start="71:58" pos:end="71:71"><expr pos:start="71:58" pos:end="71:71"><call pos:start="71:58" pos:end="71:71"><name pos:start="71:58" pos:end="71:69"><name pos:start="71:58" pos:end="71:64">corner3</name><operator pos:start="71:65" pos:end="71:65">.</operator><name pos:start="71:66" pos:end="71:69">getY</name></name><argument_list pos:start="71:70" pos:end="71:71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="72:17" pos:end="72:73"><expr pos:start="72:17" pos:end="72:72"><call pos:start="72:17" pos:end="72:72"><name pos:start="72:17" pos:end="72:40"><name pos:start="72:17" pos:end="72:33">coverageRectangle</name><operator pos:start="72:34" pos:end="72:34">.</operator><name pos:start="72:35" pos:end="72:40">lineTo</name></name><argument_list pos:start="72:41" pos:end="72:72">(<argument pos:start="72:42" pos:end="72:55"><expr pos:start="72:42" pos:end="72:55"><call pos:start="72:42" pos:end="72:55"><name pos:start="72:42" pos:end="72:53"><name pos:start="72:42" pos:end="72:48">corner4</name><operator pos:start="72:49" pos:end="72:49">.</operator><name pos:start="72:50" pos:end="72:53">getX</name></name><argument_list pos:start="72:54" pos:end="72:55">()</argument_list></call></expr></argument>, <argument pos:start="72:58" pos:end="72:71"><expr pos:start="72:58" pos:end="72:71"><call pos:start="72:58" pos:end="72:71"><name pos:start="72:58" pos:end="72:69"><name pos:start="72:58" pos:end="72:64">corner4</name><operator pos:start="72:65" pos:end="72:65">.</operator><name pos:start="72:66" pos:end="72:69">getY</name></name><argument_list pos:start="72:70" pos:end="72:71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="73:17" pos:end="73:46"><expr pos:start="73:17" pos:end="73:45"><call pos:start="73:17" pos:end="73:45"><name pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:33">coverageRectangle</name><operator pos:start="73:34" pos:end="73:34">.</operator><name pos:start="73:35" pos:end="73:43">closePath</name></name><argument_list pos:start="73:44" pos:end="73:45">()</argument_list></call></expr>;</expr_stmt>
		<return pos:start="74:17" pos:end="74:41">return <expr pos:start="74:24" pos:end="74:40"><name pos:start="74:24" pos:end="74:40">coverageRectangle</name></expr>;</return>
	</block_content>}</block></function>

	<decl_stmt pos:start="77:9" pos:end="77:44"><decl pos:start="77:9" pos:end="77:43"><type pos:start="77:9" pos:end="77:21"><specifier pos:start="77:9" pos:end="77:14">static</specifier> <name pos:start="77:16" pos:end="77:21">Random</name></type> <name pos:start="77:23" pos:end="77:28">random</name> <init pos:start="77:30" pos:end="77:43">= <expr pos:start="77:32" pos:end="77:43"><operator pos:start="77:32" pos:end="77:34">new</operator> <call pos:start="77:36" pos:end="77:43"><name pos:start="77:36" pos:end="77:41">Random</name><argument_list pos:start="77:42" pos:end="77:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function pos:start="79:9" pos:end="82:9"><type pos:start="79:9" pos:end="79:25"><specifier pos:start="79:9" pos:end="79:14">public</specifier> <specifier pos:start="79:16" pos:end="79:21">static</specifier> <name pos:start="79:23" pos:end="79:25">int</name></type> <name pos:start="79:27" pos:end="79:46">generateRandomNumber</name><parameter_list pos:start="79:47" pos:end="79:64">(<parameter pos:start="79:48" pos:end="79:54"><decl pos:start="79:48" pos:end="79:54"><type pos:start="79:48" pos:end="79:54"><name pos:start="79:48" pos:end="79:50">int</name></type> <name pos:start="79:52" pos:end="79:54">max</name></decl></parameter>, <parameter pos:start="79:57" pos:end="79:63"><decl pos:start="79:57" pos:end="79:63"><type pos:start="79:57" pos:end="79:63"><name pos:start="79:57" pos:end="79:59">int</name></type> <name pos:start="79:61" pos:end="79:63">min</name></decl></parameter>)</parameter_list> <block pos:start="79:66" pos:end="82:9">{<block_content pos:start="81:17" pos:end="81:61">

		<return pos:start="81:17" pos:end="81:61">return <expr pos:start="81:24" pos:end="81:60"><call pos:start="81:24" pos:end="81:54"><name pos:start="81:24" pos:end="81:37"><name pos:start="81:24" pos:end="81:29">random</name><operator pos:start="81:30" pos:end="81:30">.</operator><name pos:start="81:31" pos:end="81:37">nextInt</name></name><argument_list pos:start="81:38" pos:end="81:54">(<argument pos:start="81:39" pos:end="81:53"><expr pos:start="81:39" pos:end="81:53"><operator pos:start="81:39" pos:end="81:39">(</operator><name pos:start="81:40" pos:end="81:42">max</name> <operator pos:start="81:44" pos:end="81:44">-</operator> <name pos:start="81:46" pos:end="81:48">min</name><operator pos:start="81:49" pos:end="81:49">)</operator> <operator pos:start="81:51" pos:end="81:51">+</operator> <literal type="number" pos:start="81:53" pos:end="81:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="81:56" pos:end="81:56">+</operator> <name pos:start="81:58" pos:end="81:60">min</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="84:9" pos:end="90:11">/**
	 * This function generates a pseudorandom point.
	 * 
	 * @param minPoint
	 * @param maxPoint
	 * @return Point2D.Double pseudorandom point
	 */</comment>
	<function pos:start="91:9" pos:end="102:9"><type pos:start="91:9" pos:end="91:36"><specifier pos:start="91:9" pos:end="91:14">public</specifier> <specifier pos:start="91:16" pos:end="91:21">static</specifier> <name pos:start="91:23" pos:end="91:36"><name pos:start="91:23" pos:end="91:29">Point2D</name><operator pos:start="91:30" pos:end="91:30">.</operator><name pos:start="91:31" pos:end="91:36">Double</name></name></type> <name pos:start="91:38" pos:end="91:56">generateRandomPoint</name><parameter_list pos:start="91:57" pos:end="91:106">(<parameter pos:start="91:58" pos:end="91:80"><decl pos:start="91:58" pos:end="91:80"><type pos:start="91:58" pos:end="91:80"><name pos:start="91:58" pos:end="91:71"><name pos:start="91:58" pos:end="91:64">Point2D</name><operator pos:start="91:65" pos:end="91:65">.</operator><name pos:start="91:66" pos:end="91:71">Double</name></name></type> <name pos:start="91:73" pos:end="91:80">minPoint</name></decl></parameter>, <parameter pos:start="91:83" pos:end="91:105"><decl pos:start="91:83" pos:end="91:105"><type pos:start="91:83" pos:end="91:105"><name pos:start="91:83" pos:end="91:96"><name pos:start="91:83" pos:end="91:89">Point2D</name><operator pos:start="91:90" pos:end="91:90">.</operator><name pos:start="91:91" pos:end="91:96">Double</name></name></type> <name pos:start="91:98" pos:end="91:105">maxPoint</name></decl></parameter>)</parameter_list> <block pos:start="91:108" pos:end="102:9">{<block_content pos:start="92:17" pos:end="101:32">
		<decl_stmt pos:start="92:17" pos:end="92:63"><decl pos:start="92:17" pos:end="92:62"><type pos:start="92:17" pos:end="92:30"><name pos:start="92:17" pos:end="92:30"><name pos:start="92:17" pos:end="92:23">Point2D</name><operator pos:start="92:24" pos:end="92:24">.</operator><name pos:start="92:25" pos:end="92:30">Double</name></name></type> <name pos:start="92:32" pos:end="92:39">newPoint</name> <init pos:start="92:41" pos:end="92:62">= <expr pos:start="92:43" pos:end="92:62"><operator pos:start="92:43" pos:end="92:45">new</operator> <call pos:start="92:47" pos:end="92:62"><name pos:start="92:47" pos:end="92:60"><name pos:start="92:47" pos:end="92:53">Point2D</name><operator pos:start="92:54" pos:end="92:54">.</operator><name pos:start="92:55" pos:end="92:60">Double</name></name><argument_list pos:start="92:61" pos:end="92:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="93:17" pos:end="93:48"><decl pos:start="93:17" pos:end="93:47"><type pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:22">double</name></type> <name pos:start="93:24" pos:end="93:29">minLat</name> <init pos:start="93:31" pos:end="93:47">= <expr pos:start="93:33" pos:end="93:47"><call pos:start="93:33" pos:end="93:47"><name pos:start="93:33" pos:end="93:45"><name pos:start="93:33" pos:end="93:40">minPoint</name><operator pos:start="93:41" pos:end="93:41">.</operator><name pos:start="93:42" pos:end="93:45">getX</name></name><argument_list pos:start="93:46" pos:end="93:47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="94:17" pos:end="94:48"><decl pos:start="94:17" pos:end="94:47"><type pos:start="94:17" pos:end="94:22"><name pos:start="94:17" pos:end="94:22">double</name></type> <name pos:start="94:24" pos:end="94:29">maxLat</name> <init pos:start="94:31" pos:end="94:47">= <expr pos:start="94:33" pos:end="94:47"><call pos:start="94:33" pos:end="94:47"><name pos:start="94:33" pos:end="94:45"><name pos:start="94:33" pos:end="94:40">maxPoint</name><operator pos:start="94:41" pos:end="94:41">.</operator><name pos:start="94:42" pos:end="94:45">getX</name></name><argument_list pos:start="94:46" pos:end="94:47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="95:17" pos:end="95:49"><decl pos:start="95:17" pos:end="95:48"><type pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">double</name></type> <name pos:start="95:24" pos:end="95:30">minLong</name> <init pos:start="95:32" pos:end="95:48">= <expr pos:start="95:34" pos:end="95:48"><call pos:start="95:34" pos:end="95:48"><name pos:start="95:34" pos:end="95:46"><name pos:start="95:34" pos:end="95:41">minPoint</name><operator pos:start="95:42" pos:end="95:42">.</operator><name pos:start="95:43" pos:end="95:46">getY</name></name><argument_list pos:start="95:47" pos:end="95:48">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="96:17" pos:end="96:49"><decl pos:start="96:17" pos:end="96:48"><type pos:start="96:17" pos:end="96:22"><name pos:start="96:17" pos:end="96:22">double</name></type> <name pos:start="96:24" pos:end="96:30">maxLong</name> <init pos:start="96:32" pos:end="96:48">= <expr pos:start="96:34" pos:end="96:48"><call pos:start="96:34" pos:end="96:48"><name pos:start="96:34" pos:end="96:46"><name pos:start="96:34" pos:end="96:41">maxPoint</name><operator pos:start="96:42" pos:end="96:42">.</operator><name pos:start="96:43" pos:end="96:46">getY</name></name><argument_list pos:start="96:47" pos:end="96:48">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="97:17" pos:end="97:45"><decl pos:start="97:17" pos:end="97:44"><type pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:22">Random</name></type> <name pos:start="97:24" pos:end="97:29">random</name> <init pos:start="97:31" pos:end="97:44">= <expr pos:start="97:33" pos:end="97:44"><operator pos:start="97:33" pos:end="97:35">new</operator> <call pos:start="97:37" pos:end="97:44"><name pos:start="97:37" pos:end="97:42">Random</name><argument_list pos:start="97:43" pos:end="97:44">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="98:17" pos:end="98:85"><decl pos:start="98:17" pos:end="98:84"><type pos:start="98:17" pos:end="98:22"><name pos:start="98:17" pos:end="98:22">double</name></type> <name pos:start="98:24" pos:end="98:27">newX</name> <init pos:start="98:29" pos:end="98:84">= <expr pos:start="98:31" pos:end="98:84"><operator pos:start="98:31" pos:end="98:31">(</operator><call pos:start="98:32" pos:end="98:50"><name pos:start="98:32" pos:end="98:48"><name pos:start="98:32" pos:end="98:37">random</name><operator pos:start="98:38" pos:end="98:38">.</operator><name pos:start="98:39" pos:end="98:48">nextDouble</name></name><argument_list pos:start="98:49" pos:end="98:50">()</argument_list></call> <operator pos:start="98:52" pos:end="98:52">*</operator> <operator pos:start="98:54" pos:end="98:54">(</operator><name pos:start="98:55" pos:end="98:60">maxLat</name> <operator pos:start="98:62" pos:end="98:62">+</operator> <literal type="number" pos:start="98:64" pos:end="98:64">1</literal> <operator pos:start="98:66" pos:end="98:66">-</operator> <name pos:start="98:68" pos:end="98:73">minLat</name><operator pos:start="98:74" pos:end="98:74">)</operator><operator pos:start="98:75" pos:end="98:75">)</operator> <operator pos:start="98:77" pos:end="98:77">+</operator> <name pos:start="98:79" pos:end="98:84">minLat</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="99:17" pos:end="99:88"><decl pos:start="99:17" pos:end="99:87"><type pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">double</name></type> <name pos:start="99:24" pos:end="99:27">newY</name> <init pos:start="99:29" pos:end="99:87">= <expr pos:start="99:31" pos:end="99:87"><operator pos:start="99:31" pos:end="99:31">(</operator><call pos:start="99:32" pos:end="99:50"><name pos:start="99:32" pos:end="99:48"><name pos:start="99:32" pos:end="99:37">random</name><operator pos:start="99:38" pos:end="99:38">.</operator><name pos:start="99:39" pos:end="99:48">nextDouble</name></name><argument_list pos:start="99:49" pos:end="99:50">()</argument_list></call> <operator pos:start="99:52" pos:end="99:52">*</operator> <operator pos:start="99:54" pos:end="99:54">(</operator><name pos:start="99:55" pos:end="99:61">maxLong</name> <operator pos:start="99:63" pos:end="99:63">+</operator> <literal type="number" pos:start="99:65" pos:end="99:65">1</literal> <operator pos:start="99:67" pos:end="99:67">-</operator> <name pos:start="99:69" pos:end="99:75">minLong</name><operator pos:start="99:76" pos:end="99:76">)</operator><operator pos:start="99:77" pos:end="99:77">)</operator> <operator pos:start="99:79" pos:end="99:79">+</operator> <name pos:start="99:81" pos:end="99:87">minLong</name></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="100:17" pos:end="100:49"><expr pos:start="100:17" pos:end="100:48"><call pos:start="100:17" pos:end="100:48"><name pos:start="100:17" pos:end="100:36"><name pos:start="100:17" pos:end="100:24">newPoint</name><operator pos:start="100:25" pos:end="100:25">.</operator><name pos:start="100:26" pos:end="100:36">setLocation</name></name><argument_list pos:start="100:37" pos:end="100:48">(<argument pos:start="100:38" pos:end="100:41"><expr pos:start="100:38" pos:end="100:41"><name pos:start="100:38" pos:end="100:41">newX</name></expr></argument>, <argument pos:start="100:44" pos:end="100:47"><expr pos:start="100:44" pos:end="100:47"><name pos:start="100:44" pos:end="100:47">newY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="101:17" pos:end="101:32">return <expr pos:start="101:24" pos:end="101:31"><name pos:start="101:24" pos:end="101:31">newPoint</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="line" pos:start="104:9" pos:end="104:89">// assumes drone startPoint and home location are stored in cartesian coordinates</comment>
	<function pos:start="105:9" pos:end="116:9"><type pos:start="105:9" pos:end="105:28"><specifier pos:start="105:9" pos:end="105:14">public</specifier> <specifier pos:start="105:16" pos:end="105:21">static</specifier> <name pos:start="105:23" pos:end="105:28">double</name></type> <name pos:start="105:30" pos:end="105:47">totalDroneDistance</name><parameter_list pos:start="105:48" pos:end="105:60">(<parameter pos:start="105:49" pos:end="105:59"><decl pos:start="105:49" pos:end="105:59"><type pos:start="105:49" pos:end="105:53"><name pos:start="105:49" pos:end="105:53">Drone</name></type> <name pos:start="105:55" pos:end="105:59">drone</name></decl></parameter>)</parameter_list> <block pos:start="105:62" pos:end="116:9">{<block_content pos:start="106:17" pos:end="115:37">
		<decl_stmt pos:start="106:17" pos:end="106:41"><decl pos:start="106:17" pos:end="106:40"><type pos:start="106:17" pos:end="106:22"><name pos:start="106:17" pos:end="106:22">double</name></type> <name pos:start="106:24" pos:end="106:36">totalDistance</name> <init pos:start="106:38" pos:end="106:40">= <expr pos:start="106:40" pos:end="106:40"><literal type="number" pos:start="106:40" pos:end="106:40">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="107:17" pos:end="107:87"><decl pos:start="107:17" pos:end="107:86"><type pos:start="107:17" pos:end="107:36"><name pos:start="107:17" pos:end="107:36">DroneRouteAssignment</name></type> <name pos:start="107:38" pos:end="107:52">routeAssignment</name> <init pos:start="107:54" pos:end="107:86">= <expr pos:start="107:56" pos:end="107:86"><call pos:start="107:56" pos:end="107:86"><name pos:start="107:56" pos:end="107:84"><name pos:start="107:56" pos:end="107:60">drone</name><operator pos:start="107:61" pos:end="107:61">.</operator><name pos:start="107:62" pos:end="107:84">getDroneRouteAssignment</name></name><argument_list pos:start="107:85" pos:end="107:86">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="108:17" pos:end="108:71"><decl pos:start="108:17" pos:end="108:70"><type pos:start="108:17" pos:end="108:30"><name pos:start="108:17" pos:end="108:30"><name pos:start="108:17" pos:end="108:23">Point2D</name><operator pos:start="108:24" pos:end="108:24">.</operator><name pos:start="108:25" pos:end="108:30">Double</name></name></type> <name pos:start="108:32" pos:end="108:41">startPoint</name> <init pos:start="108:43" pos:end="108:70">= <expr pos:start="108:45" pos:end="108:70"><call pos:start="108:45" pos:end="108:70"><name pos:start="108:45" pos:end="108:68"><name pos:start="108:45" pos:end="108:49">drone</name><operator pos:start="108:50" pos:end="108:50">.</operator><name pos:start="108:51" pos:end="108:68">getDroneStartPoint</name></name><argument_list pos:start="108:69" pos:end="108:70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:start="109:17" pos:end="113:17">for <control pos:start="109:21" pos:end="109:66">(<init pos:start="109:22" pos:end="109:65"><decl pos:start="109:22" pos:end="109:65"><type pos:start="109:22" pos:end="109:35"><name pos:start="109:22" pos:end="109:35">RoutePrimitive</name></type> <name pos:start="109:37" pos:end="109:41">route</name> <range pos:start="109:43" pos:end="109:65">: <expr pos:start="109:45" pos:end="109:65"><call pos:start="109:45" pos:end="109:65"><name pos:start="109:45" pos:end="109:63"><name pos:start="109:45" pos:end="109:59">routeAssignment</name><operator pos:start="109:60" pos:end="109:60">.</operator><name pos:start="109:61" pos:end="109:63">get</name></name><argument_list pos:start="109:64" pos:end="109:65">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="109:68" pos:end="113:17">{<block_content pos:start="110:25" pos:end="112:62">
			<expr_stmt pos:start="110:25" pos:end="110:112"><expr pos:start="110:25" pos:end="110:111"><name pos:start="110:25" pos:end="110:37">totalDistance</name> <operator pos:start="110:39" pos:end="110:40">+=</operator> <call pos:start="110:42" pos:end="110:111"><name pos:start="110:42" pos:end="110:71"><name pos:start="110:42" pos:end="110:49">Geometry</name><operator pos:start="110:50" pos:end="110:50">.</operator><name pos:start="110:51" pos:end="110:71">findCartesianDistance</name></name><argument_list pos:start="110:72" pos:end="110:111">(<argument pos:start="110:73" pos:end="110:82"><expr pos:start="110:73" pos:end="110:82"><name pos:start="110:73" pos:end="110:82">startPoint</name></expr></argument>, <argument pos:start="110:85" pos:end="110:110"><expr pos:start="110:85" pos:end="110:110"><call pos:start="110:85" pos:end="110:110"><name pos:start="110:85" pos:end="110:108"><name pos:start="110:85" pos:end="110:89">route</name><operator pos:start="110:90" pos:end="110:90">.</operator><name pos:start="110:91" pos:end="110:108">getRouteStartPoint</name></name><argument_list pos:start="110:109" pos:end="110:110">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="111:25" pos:end="111:66"><expr pos:start="111:25" pos:end="111:65"><name pos:start="111:25" pos:end="111:37">totalDistance</name> <operator pos:start="111:39" pos:end="111:40">+=</operator> <call pos:start="111:42" pos:end="111:65"><name pos:start="111:42" pos:end="111:63"><name pos:start="111:42" pos:end="111:46">route</name><operator pos:start="111:47" pos:end="111:47">.</operator><name pos:start="111:48" pos:end="111:63">getRouteDistance</name></name><argument_list pos:start="111:64" pos:end="111:65">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="112:25" pos:end="112:62"><expr pos:start="112:25" pos:end="112:61"><name pos:start="112:25" pos:end="112:34">startPoint</name> <operator pos:start="112:36" pos:end="112:36">=</operator> <call pos:start="112:38" pos:end="112:61"><name pos:start="112:38" pos:end="112:59"><name pos:start="112:38" pos:end="112:42">route</name><operator pos:start="112:43" pos:end="112:43">.</operator><name pos:start="112:44" pos:end="112:59">getRouteEndPoint</name></name><argument_list pos:start="112:60" pos:end="112:61">()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt pos:start="114:17" pos:end="114:106"><expr pos:start="114:17" pos:end="114:105"><name pos:start="114:17" pos:end="114:29">totalDistance</name> <operator pos:start="114:31" pos:end="114:32">+=</operator> <call pos:start="114:34" pos:end="114:105"><name pos:start="114:34" pos:end="114:63"><name pos:start="114:34" pos:end="114:41">Geometry</name><operator pos:start="114:42" pos:end="114:42">.</operator><name pos:start="114:43" pos:end="114:63">findCartesianDistance</name></name><argument_list pos:start="114:64" pos:end="114:105">(<argument pos:start="114:65" pos:end="114:74"><expr pos:start="114:65" pos:end="114:74"><name pos:start="114:65" pos:end="114:74">startPoint</name></expr></argument>, <argument pos:start="114:77" pos:end="114:104"><expr pos:start="114:77" pos:end="114:104"><call pos:start="114:77" pos:end="114:104"><name pos:start="114:77" pos:end="114:102"><name pos:start="114:77" pos:end="114:81">drone</name><operator pos:start="114:82" pos:end="114:82">.</operator><name pos:start="114:83" pos:end="114:102">getDroneHomeLocation</name></name><argument_list pos:start="114:103" pos:end="114:104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="115:17" pos:end="115:37">return <expr pos:start="115:24" pos:end="115:36"><name pos:start="115:24" pos:end="115:36">totalDistance</name></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="118:9" pos:end="137:9"><type pos:start="118:9" pos:end="118:28"><specifier pos:start="118:9" pos:end="118:14">public</specifier> <specifier pos:start="118:16" pos:end="118:21">static</specifier> <name pos:start="118:23" pos:end="118:28">double</name></type> <name pos:start="118:30" pos:end="118:49">totalBatteryDistance</name><parameter_list pos:start="118:50" pos:end="118:62">(<parameter pos:start="118:51" pos:end="118:61"><decl pos:start="118:51" pos:end="118:61"><type pos:start="118:51" pos:end="118:55"><name pos:start="118:51" pos:end="118:55">Drone</name></type> <name pos:start="118:57" pos:end="118:61">drone</name></decl></parameter>)</parameter_list> <block pos:start="118:64" pos:end="137:9">{<block_content pos:start="119:17" pos:end="136:37">
		<decl_stmt pos:start="119:17" pos:end="119:41"><decl pos:start="119:17" pos:end="119:40"><type pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22">double</name></type> <name pos:start="119:24" pos:end="119:36">totalDistance</name> <init pos:start="119:38" pos:end="119:40">= <expr pos:start="119:40" pos:end="119:40"><literal type="number" pos:start="119:40" pos:end="119:40">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="120:17" pos:end="120:87"><decl pos:start="120:17" pos:end="120:86"><type pos:start="120:17" pos:end="120:36"><name pos:start="120:17" pos:end="120:36">DroneRouteAssignment</name></type> <name pos:start="120:38" pos:end="120:52">routeAssignment</name> <init pos:start="120:54" pos:end="120:86">= <expr pos:start="120:56" pos:end="120:86"><call pos:start="120:56" pos:end="120:86"><name pos:start="120:56" pos:end="120:84"><name pos:start="120:56" pos:end="120:60">drone</name><operator pos:start="120:61" pos:end="120:61">.</operator><name pos:start="120:62" pos:end="120:84">getDroneRouteAssignment</name></name><argument_list pos:start="120:85" pos:end="120:86">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="121:17" pos:end="121:71"><decl pos:start="121:17" pos:end="121:70"><type pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:23">Point2D</name><operator pos:start="121:24" pos:end="121:24">.</operator><name pos:start="121:25" pos:end="121:30">Double</name></name></type> <name pos:start="121:32" pos:end="121:41">startPoint</name> <init pos:start="121:43" pos:end="121:70">= <expr pos:start="121:45" pos:end="121:70"><call pos:start="121:45" pos:end="121:70"><name pos:start="121:45" pos:end="121:68"><name pos:start="121:45" pos:end="121:49">drone</name><operator pos:start="121:50" pos:end="121:50">.</operator><name pos:start="121:51" pos:end="121:68">getDroneStartPoint</name></name><argument_list pos:start="121:69" pos:end="121:70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:start="122:17" pos:end="134:17">for <control pos:start="122:21" pos:end="122:66">(<init pos:start="122:22" pos:end="122:65"><decl pos:start="122:22" pos:end="122:65"><type pos:start="122:22" pos:end="122:35"><name pos:start="122:22" pos:end="122:35">RoutePrimitive</name></type> <name pos:start="122:37" pos:end="122:41">route</name> <range pos:start="122:43" pos:end="122:65">: <expr pos:start="122:45" pos:end="122:65"><call pos:start="122:45" pos:end="122:65"><name pos:start="122:45" pos:end="122:63"><name pos:start="122:45" pos:end="122:59">routeAssignment</name><operator pos:start="122:60" pos:end="122:60">.</operator><name pos:start="122:61" pos:end="122:63">get</name></name><argument_list pos:start="122:64" pos:end="122:65">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="122:68" pos:end="134:17">{<block_content pos:start="123:25" pos:end="133:25">
			<if_stmt pos:start="123:25" pos:end="133:25"><if pos:start="123:25" pos:end="129:25">if<condition pos:start="123:27" pos:end="123:66">(<expr pos:start="123:28" pos:end="123:65"><call pos:start="123:28" pos:end="123:47"><name pos:start="123:28" pos:end="123:45"><name pos:start="123:28" pos:end="123:32">route</name><operator pos:start="123:33" pos:end="123:33">.</operator><name pos:start="123:34" pos:end="123:45">getRouteType</name></name><argument_list pos:start="123:46" pos:end="123:47">()</argument_list></call> <operator pos:start="123:49" pos:end="123:50">==</operator> <name pos:start="123:52" pos:end="123:65"><name pos:start="123:52" pos:end="123:60">RouteType</name><operator pos:start="123:61" pos:end="123:61">.</operator><name pos:start="123:62" pos:end="123:65">HOME</name></name></expr>)</condition> <block pos:start="123:68" pos:end="129:25">{<block_content pos:start="124:33" pos:end="128:50">
				<expr_stmt pos:start="124:33" pos:end="124:74"><expr pos:start="124:33" pos:end="124:73"><name pos:start="124:33" pos:end="124:45">totalDistance</name> <operator pos:start="124:47" pos:end="124:48">+=</operator> <call pos:start="124:50" pos:end="124:73"><name pos:start="124:50" pos:end="124:71"><name pos:start="124:50" pos:end="124:54">route</name><operator pos:start="124:55" pos:end="124:55">.</operator><name pos:start="124:56" pos:end="124:71">getRouteDistance</name></name><argument_list pos:start="124:72" pos:end="124:73">()</argument_list></call></expr>;</expr_stmt>
				<if_stmt pos:start="125:33" pos:end="127:33"><if pos:start="125:33" pos:end="127:33">if<condition pos:start="125:35" pos:end="125:61">(<expr pos:start="125:36" pos:end="125:60"><name pos:start="125:36" pos:end="125:48">totalDistance</name> <operator pos:start="125:50" pos:end="125:50">/</operator> <literal type="number" pos:start="125:52" pos:end="125:55">1000</literal> <operator pos:start="125:57" pos:end="125:57">&gt;</operator> <literal type="number" pos:start="125:59" pos:end="125:60">10</literal></expr>)</condition> <block pos:start="125:63" pos:end="127:33">{<block_content pos:start="126:41" pos:end="126:61">
					<return pos:start="126:41" pos:end="126:61">return <expr pos:start="126:48" pos:end="126:60"><name pos:start="126:48" pos:end="126:60">totalDistance</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt pos:start="128:33" pos:end="128:50"><expr pos:start="128:33" pos:end="128:49"><name pos:start="128:33" pos:end="128:45">totalDistance</name> <operator pos:start="128:47" pos:end="128:47">=</operator> <literal type="number" pos:start="128:49" pos:end="128:49">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else pos:start="129:27" pos:end="133:25">else <block pos:start="129:32" pos:end="133:25">{<block_content pos:start="130:33" pos:end="132:70">
				<expr_stmt pos:start="130:33" pos:end="130:120"><expr pos:start="130:33" pos:end="130:119"><name pos:start="130:33" pos:end="130:45">totalDistance</name> <operator pos:start="130:47" pos:end="130:48">+=</operator> <call pos:start="130:50" pos:end="130:119"><name pos:start="130:50" pos:end="130:79"><name pos:start="130:50" pos:end="130:57">Geometry</name><operator pos:start="130:58" pos:end="130:58">.</operator><name pos:start="130:59" pos:end="130:79">findCartesianDistance</name></name><argument_list pos:start="130:80" pos:end="130:119">(<argument pos:start="130:81" pos:end="130:90"><expr pos:start="130:81" pos:end="130:90"><name pos:start="130:81" pos:end="130:90">startPoint</name></expr></argument>, <argument pos:start="130:93" pos:end="130:118"><expr pos:start="130:93" pos:end="130:118"><call pos:start="130:93" pos:end="130:118"><name pos:start="130:93" pos:end="130:116"><name pos:start="130:93" pos:end="130:97">route</name><operator pos:start="130:98" pos:end="130:98">.</operator><name pos:start="130:99" pos:end="130:116">getRouteStartPoint</name></name><argument_list pos:start="130:117" pos:end="130:118">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt pos:start="131:33" pos:end="131:74"><expr pos:start="131:33" pos:end="131:73"><name pos:start="131:33" pos:end="131:45">totalDistance</name> <operator pos:start="131:47" pos:end="131:48">+=</operator> <call pos:start="131:50" pos:end="131:73"><name pos:start="131:50" pos:end="131:71"><name pos:start="131:50" pos:end="131:54">route</name><operator pos:start="131:55" pos:end="131:55">.</operator><name pos:start="131:56" pos:end="131:71">getRouteDistance</name></name><argument_list pos:start="131:72" pos:end="131:73">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt pos:start="132:33" pos:end="132:70"><expr pos:start="132:33" pos:end="132:69"><name pos:start="132:33" pos:end="132:42">startPoint</name> <operator pos:start="132:44" pos:end="132:44">=</operator> <call pos:start="132:46" pos:end="132:69"><name pos:start="132:46" pos:end="132:67"><name pos:start="132:46" pos:end="132:50">route</name><operator pos:start="132:51" pos:end="132:51">.</operator><name pos:start="132:52" pos:end="132:67">getRouteEndPoint</name></name><argument_list pos:start="132:68" pos:end="132:69">()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		<expr_stmt pos:start="135:17" pos:end="135:106"><expr pos:start="135:17" pos:end="135:105"><name pos:start="135:17" pos:end="135:29">totalDistance</name> <operator pos:start="135:31" pos:end="135:32">+=</operator> <call pos:start="135:34" pos:end="135:105"><name pos:start="135:34" pos:end="135:63"><name pos:start="135:34" pos:end="135:41">Geometry</name><operator pos:start="135:42" pos:end="135:42">.</operator><name pos:start="135:43" pos:end="135:63">findCartesianDistance</name></name><argument_list pos:start="135:64" pos:end="135:105">(<argument pos:start="135:65" pos:end="135:74"><expr pos:start="135:65" pos:end="135:74"><name pos:start="135:65" pos:end="135:74">startPoint</name></expr></argument>, <argument pos:start="135:77" pos:end="135:104"><expr pos:start="135:77" pos:end="135:104"><call pos:start="135:77" pos:end="135:104"><name pos:start="135:77" pos:end="135:102"><name pos:start="135:77" pos:end="135:81">drone</name><operator pos:start="135:82" pos:end="135:82">.</operator><name pos:start="135:83" pos:end="135:102">getDroneHomeLocation</name></name><argument_list pos:start="135:103" pos:end="135:104">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="136:17" pos:end="136:37">return <expr pos:start="136:24" pos:end="136:36"><name pos:start="136:24" pos:end="136:36">totalDistance</name></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="139:9" pos:end="145:9"><type pos:start="139:9" pos:end="139:28"><specifier pos:start="139:9" pos:end="139:14">public</specifier> <specifier pos:start="139:16" pos:end="139:21">static</specifier> <name pos:start="139:23" pos:end="139:28">double</name></type> <name pos:start="139:30" pos:end="139:52">totalAllocationDistance</name><parameter_list pos:start="139:53" pos:end="139:72">(<parameter pos:start="139:54" pos:end="139:71"><decl pos:start="139:54" pos:end="139:71"><type pos:start="139:54" pos:end="139:64"><name pos:start="139:54" pos:end="139:64"><name pos:start="139:54" pos:end="139:57">List</name><argument_list type="generic" pos:start="139:58" pos:end="139:64">&lt;<argument pos:start="139:59" pos:end="139:63"><name pos:start="139:59" pos:end="139:63">Drone</name></argument>&gt;</argument_list></name></type> <name pos:start="139:66" pos:end="139:71">drones</name></decl></parameter>)</parameter_list> <block pos:start="139:74" pos:end="145:9">{<block_content pos:start="140:17" pos:end="144:37">
		<decl_stmt pos:start="140:17" pos:end="140:41"><decl pos:start="140:17" pos:end="140:40"><type pos:start="140:17" pos:end="140:22"><name pos:start="140:17" pos:end="140:22">double</name></type> <name pos:start="140:24" pos:end="140:36">totalDistance</name> <init pos:start="140:38" pos:end="140:40">= <expr pos:start="140:40" pos:end="140:40"><literal type="number" pos:start="140:40" pos:end="140:40">0</literal></expr></init></decl>;</decl_stmt>
		<for pos:start="141:17" pos:end="143:17">for<control pos:start="141:20" pos:end="141:41">(<init pos:start="141:21" pos:end="141:40"><decl pos:start="141:21" pos:end="141:40"><type pos:start="141:21" pos:end="141:25"><name pos:start="141:21" pos:end="141:25">Drone</name></type> <name pos:start="141:27" pos:end="141:31">drone</name> <range pos:start="141:33" pos:end="141:40">: <expr pos:start="141:35" pos:end="141:40"><name pos:start="141:35" pos:end="141:40">drones</name></expr></range></decl></init>)</control> <block pos:start="141:43" pos:end="143:17">{<block_content pos:start="142:25" pos:end="142:67">
			<expr_stmt pos:start="142:25" pos:end="142:67"><expr pos:start="142:25" pos:end="142:66"><name pos:start="142:25" pos:end="142:37">totalDistance</name> <operator pos:start="142:39" pos:end="142:40">+=</operator> <call pos:start="142:42" pos:end="142:66"><name pos:start="142:42" pos:end="142:59">totalDroneDistance</name><argument_list pos:start="142:60" pos:end="142:66">(<argument pos:start="142:61" pos:end="142:65"><expr pos:start="142:61" pos:end="142:65"><name pos:start="142:61" pos:end="142:65">drone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="144:17" pos:end="144:37">return <expr pos:start="144:24" pos:end="144:36"><name pos:start="144:24" pos:end="144:36">totalDistance</name></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="147:9" pos:end="153:9"><type pos:start="147:9" pos:end="147:34"><specifier pos:start="147:9" pos:end="147:14">public</specifier> <specifier pos:start="147:16" pos:end="147:21">static</specifier> <name pos:start="147:23" pos:end="147:34"><name pos:start="147:23" pos:end="147:26">List</name><argument_list type="generic" pos:start="147:27" pos:end="147:34">&lt;<argument pos:start="147:28" pos:end="147:33"><name pos:start="147:28" pos:end="147:33">Double</name></argument>&gt;</argument_list></name></type> <name pos:start="147:36" pos:end="147:58">calculateDroneDistances</name><parameter_list pos:start="147:59" pos:end="147:78">(<parameter pos:start="147:60" pos:end="147:77"><decl pos:start="147:60" pos:end="147:77"><type pos:start="147:60" pos:end="147:70"><name pos:start="147:60" pos:end="147:70"><name pos:start="147:60" pos:end="147:63">List</name><argument_list type="generic" pos:start="147:64" pos:end="147:70">&lt;<argument pos:start="147:65" pos:end="147:69"><name pos:start="147:65" pos:end="147:69">Drone</name></argument>&gt;</argument_list></name></type> <name pos:start="147:72" pos:end="147:77">drones</name></decl></parameter>)</parameter_list><block pos:start="147:79" pos:end="153:9">{<block_content pos:start="148:17" pos:end="152:38">
		<decl_stmt pos:start="148:17" pos:end="148:64"><decl pos:start="148:17" pos:end="148:63"><type pos:start="148:17" pos:end="148:28"><name pos:start="148:17" pos:end="148:28"><name pos:start="148:17" pos:end="148:20">List</name><argument_list type="generic" pos:start="148:21" pos:end="148:28">&lt;<argument pos:start="148:22" pos:end="148:27"><name pos:start="148:22" pos:end="148:27">Double</name></argument>&gt;</argument_list></name></type> <name pos:start="148:30" pos:end="148:43">droneDistances</name> <init pos:start="148:45" pos:end="148:63">= <expr pos:start="148:47" pos:end="148:63"><operator pos:start="148:47" pos:end="148:49">new</operator> <call pos:start="148:51" pos:end="148:63"><name pos:start="148:51" pos:end="148:61"><name pos:start="148:51" pos:end="148:59">ArrayList</name><argument_list type="generic" pos:start="148:60" pos:end="148:61">&lt;&gt;</argument_list></name><argument_list pos:start="148:62" pos:end="148:63">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:start="149:17" pos:end="151:17">for<control pos:start="149:20" pos:end="149:41">(<init pos:start="149:21" pos:end="149:40"><decl pos:start="149:21" pos:end="149:40"><type pos:start="149:21" pos:end="149:25"><name pos:start="149:21" pos:end="149:25">Drone</name></type> <name pos:start="149:27" pos:end="149:31">drone</name> <range pos:start="149:33" pos:end="149:40">: <expr pos:start="149:35" pos:end="149:40"><name pos:start="149:35" pos:end="149:40">drones</name></expr></range></decl></init>)</control> <block pos:start="149:43" pos:end="151:17">{<block_content pos:start="150:25" pos:end="150:70">
			<expr_stmt pos:start="150:25" pos:end="150:70"><expr pos:start="150:25" pos:end="150:69"><call pos:start="150:25" pos:end="150:69"><name pos:start="150:25" pos:end="150:42"><name pos:start="150:25" pos:end="150:38">droneDistances</name><operator pos:start="150:39" pos:end="150:39">.</operator><name pos:start="150:40" pos:end="150:42">add</name></name><argument_list pos:start="150:43" pos:end="150:69">(<argument pos:start="150:44" pos:end="150:68"><expr pos:start="150:44" pos:end="150:68"><call pos:start="150:44" pos:end="150:68"><name pos:start="150:44" pos:end="150:61">totalDroneDistance</name><argument_list pos:start="150:62" pos:end="150:68">(<argument pos:start="150:63" pos:end="150:67"><expr pos:start="150:63" pos:end="150:67"><name pos:start="150:63" pos:end="150:67">drone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="152:17" pos:end="152:38">return <expr pos:start="152:24" pos:end="152:37"><name pos:start="152:24" pos:end="152:37">droneDistances</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="155:9" pos:end="169:9"><type pos:start="155:9" pos:end="155:28"><specifier pos:start="155:9" pos:end="155:14">public</specifier> <specifier pos:start="155:16" pos:end="155:21">static</specifier> <name pos:start="155:23" pos:end="155:28">double</name></type> <name pos:start="155:30" pos:end="155:44">equalityOfTasks</name><parameter_list pos:start="155:45" pos:end="155:64">(<parameter pos:start="155:46" pos:end="155:63"><decl pos:start="155:46" pos:end="155:63"><type pos:start="155:46" pos:end="155:56"><name pos:start="155:46" pos:end="155:56"><name pos:start="155:46" pos:end="155:49">List</name><argument_list type="generic" pos:start="155:50" pos:end="155:56">&lt;<argument pos:start="155:51" pos:end="155:55"><name pos:start="155:51" pos:end="155:55">Drone</name></argument>&gt;</argument_list></name></type> <name pos:start="155:58" pos:end="155:63">drones</name></decl></parameter>)</parameter_list> <block pos:start="155:66" pos:end="169:9">{<block_content pos:start="156:17" pos:end="168:49">
		<decl_stmt pos:start="156:17" pos:end="156:55"><decl pos:start="156:17" pos:end="156:54"><type pos:start="156:17" pos:end="156:22"><name pos:start="156:17" pos:end="156:22">double</name></type> <name pos:start="156:24" pos:end="156:34">maxDistance</name> <init pos:start="156:36" pos:end="156:54">= <expr pos:start="156:38" pos:end="156:54"><operator pos:start="156:38" pos:end="156:38">-</operator><name pos:start="156:39" pos:end="156:54"><name pos:start="156:39" pos:end="156:44">Double</name><operator pos:start="156:45" pos:end="156:45">.</operator><name pos:start="156:46" pos:end="156:54">MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="157:17" pos:end="157:54"><decl pos:start="157:17" pos:end="157:53"><type pos:start="157:17" pos:end="157:22"><name pos:start="157:17" pos:end="157:22">double</name></type> <name pos:start="157:24" pos:end="157:34">minDistance</name> <init pos:start="157:36" pos:end="157:53">= <expr pos:start="157:38" pos:end="157:53"><name pos:start="157:38" pos:end="157:53"><name pos:start="157:38" pos:end="157:43">Double</name><operator pos:start="157:44" pos:end="157:44">.</operator><name pos:start="157:45" pos:end="157:53">MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="158:17" pos:end="158:32"><decl pos:start="158:17" pos:end="158:31"><type pos:start="158:17" pos:end="158:22"><name pos:start="158:17" pos:end="158:22">double</name></type> <name pos:start="158:24" pos:end="158:31">distance</name></decl>;</decl_stmt>
		<for pos:start="159:17" pos:end="167:17">for <control pos:start="159:21" pos:end="159:42">(<init pos:start="159:22" pos:end="159:41"><decl pos:start="159:22" pos:end="159:41"><type pos:start="159:22" pos:end="159:26"><name pos:start="159:22" pos:end="159:26">Drone</name></type> <name pos:start="159:28" pos:end="159:32">drone</name> <range pos:start="159:34" pos:end="159:41">: <expr pos:start="159:36" pos:end="159:41"><name pos:start="159:36" pos:end="159:41">drones</name></expr></range></decl></init>)</control> <block pos:start="159:44" pos:end="167:17">{<block_content pos:start="160:25" pos:end="166:25">
			<expr_stmt pos:start="160:25" pos:end="160:61"><expr pos:start="160:25" pos:end="160:60"><name pos:start="160:25" pos:end="160:32">distance</name> <operator pos:start="160:34" pos:end="160:34">=</operator> <call pos:start="160:36" pos:end="160:60"><name pos:start="160:36" pos:end="160:53">totalDroneDistance</name><argument_list pos:start="160:54" pos:end="160:60">(<argument pos:start="160:55" pos:end="160:59"><expr pos:start="160:55" pos:end="160:59"><name pos:start="160:55" pos:end="160:59">drone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt pos:start="161:25" pos:end="163:25"><if pos:start="161:25" pos:end="163:25">if <condition pos:start="161:28" pos:end="161:51">(<expr pos:start="161:29" pos:end="161:50"><name pos:start="161:29" pos:end="161:36">distance</name> <operator pos:start="161:38" pos:end="161:38">&lt;</operator> <name pos:start="161:40" pos:end="161:50">minDistance</name></expr>)</condition> <block pos:start="161:53" pos:end="163:25">{<block_content pos:start="162:33" pos:end="162:55">
				<expr_stmt pos:start="162:33" pos:end="162:55"><expr pos:start="162:33" pos:end="162:54"><name pos:start="162:33" pos:end="162:43">minDistance</name> <operator pos:start="162:45" pos:end="162:45">=</operator> <name pos:start="162:47" pos:end="162:54">distance</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt pos:start="164:25" pos:end="166:25"><if pos:start="164:25" pos:end="166:25">if <condition pos:start="164:28" pos:end="164:51">(<expr pos:start="164:29" pos:end="164:50"><name pos:start="164:29" pos:end="164:39">maxDistance</name> <operator pos:start="164:41" pos:end="164:41">&lt;</operator> <name pos:start="164:43" pos:end="164:50">distance</name></expr>)</condition> <block pos:start="164:53" pos:end="166:25">{<block_content pos:start="165:33" pos:end="165:55">
				<expr_stmt pos:start="165:33" pos:end="165:55"><expr pos:start="165:33" pos:end="165:54"><name pos:start="165:33" pos:end="165:43">maxDistance</name> <operator pos:start="165:45" pos:end="165:45">=</operator> <name pos:start="165:47" pos:end="165:54">distance</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<return pos:start="168:17" pos:end="168:49">return <expr pos:start="168:24" pos:end="168:48"><name pos:start="168:24" pos:end="168:34">minDistance</name> <operator pos:start="168:36" pos:end="168:36">/</operator> <name pos:start="168:38" pos:end="168:48">maxDistance</name></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="171:9" pos:end="186:9"><type pos:start="171:9" pos:end="171:43"><specifier pos:start="171:9" pos:end="171:15">private</specifier> <specifier pos:start="171:17" pos:end="171:22">static</specifier> <name pos:start="171:24" pos:end="171:43"><name pos:start="171:24" pos:end="171:27">List</name><argument_list type="generic" pos:start="171:28" pos:end="171:43">&lt;<argument pos:start="171:29" pos:end="171:42"><name pos:start="171:29" pos:end="171:42"><name pos:start="171:29" pos:end="171:35">Point2D</name><operator pos:start="171:36" pos:end="171:36">.</operator><name pos:start="171:37" pos:end="171:42">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="171:45" pos:end="171:77">generateRandomRiverCoveragePoints</name><parameter_list pos:start="171:78" pos:end="171:136">(<parameter pos:start="171:79" pos:end="171:102"><decl pos:start="171:79" pos:end="171:102"><type pos:start="171:79" pos:end="171:102"><name pos:start="171:79" pos:end="171:93"><name pos:start="171:79" pos:end="171:82">List</name><argument_list type="generic" pos:start="171:83" pos:end="171:93">&lt;<argument pos:start="171:84" pos:end="171:92"><name pos:start="171:84" pos:end="171:92">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="171:95" pos:end="171:102">bankList</name></decl></parameter>, <parameter pos:start="171:105" pos:end="171:135"><decl pos:start="171:105" pos:end="171:135"><type pos:start="171:105" pos:end="171:135"><name pos:start="171:105" pos:end="171:117"><name pos:start="171:105" pos:end="171:110">Path2D</name><operator pos:start="171:111" pos:end="171:111">.</operator><name pos:start="171:112" pos:end="171:117">Double</name></name></type> <name pos:start="171:119" pos:end="171:135">totalRiverSegment</name></decl></parameter>)</parameter_list> <block pos:start="171:138" pos:end="186:9">{<block_content pos:start="172:17" pos:end="185:38">
		<decl_stmt pos:start="172:17" pos:end="172:63"><decl pos:start="172:17" pos:end="172:62"><type pos:start="172:17" pos:end="172:30"><name pos:start="172:17" pos:end="172:30"><name pos:start="172:17" pos:end="172:23">Point2D</name><operator pos:start="172:24" pos:end="172:24">.</operator><name pos:start="172:25" pos:end="172:30">Double</name></name></type> <name pos:start="172:32" pos:end="172:39">minBound</name> <init pos:start="172:41" pos:end="172:62">= <expr pos:start="172:43" pos:end="172:62"><operator pos:start="172:43" pos:end="172:45">new</operator> <call pos:start="172:47" pos:end="172:62"><name pos:start="172:47" pos:end="172:60"><name pos:start="172:47" pos:end="172:53">Point2D</name><operator pos:start="172:54" pos:end="172:54">.</operator><name pos:start="172:55" pos:end="172:60">Double</name></name><argument_list pos:start="172:61" pos:end="172:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="173:17" pos:end="173:63"><decl pos:start="173:17" pos:end="173:62"><type pos:start="173:17" pos:end="173:30"><name pos:start="173:17" pos:end="173:30"><name pos:start="173:17" pos:end="173:23">Point2D</name><operator pos:start="173:24" pos:end="173:24">.</operator><name pos:start="173:25" pos:end="173:30">Double</name></name></type> <name pos:start="173:32" pos:end="173:39">maxBound</name> <init pos:start="173:41" pos:end="173:62">= <expr pos:start="173:43" pos:end="173:62"><operator pos:start="173:43" pos:end="173:45">new</operator> <call pos:start="173:47" pos:end="173:62"><name pos:start="173:47" pos:end="173:60"><name pos:start="173:47" pos:end="173:53">Point2D</name><operator pos:start="173:54" pos:end="173:54">.</operator><name pos:start="173:55" pos:end="173:60">Double</name></name><argument_list pos:start="173:61" pos:end="173:62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="174:17" pos:end="174:96"><decl pos:start="174:17" pos:end="174:95"><type pos:start="174:17" pos:end="174:38"><name pos:start="174:17" pos:end="174:38"><name pos:start="174:17" pos:end="174:22">Vector</name><argument_list type="generic" pos:start="174:23" pos:end="174:38">&lt;<argument pos:start="174:24" pos:end="174:37"><name pos:start="174:24" pos:end="174:37"><name pos:start="174:24" pos:end="174:30">Point2D</name><operator pos:start="174:31" pos:end="174:31">.</operator><name pos:start="174:32" pos:end="174:37">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="174:40" pos:end="174:45">bounds</name> <init pos:start="174:47" pos:end="174:95">= <expr pos:start="174:49" pos:end="174:95"><call pos:start="174:49" pos:end="174:95"><name pos:start="174:49" pos:end="174:85"><name pos:start="174:49" pos:end="174:56">Geometry</name><operator pos:start="174:57" pos:end="174:57">.</operator><name pos:start="174:58" pos:end="174:85">simpleRiverBoundingRectangle</name></name><argument_list pos:start="174:86" pos:end="174:95">(<argument pos:start="174:87" pos:end="174:94"><expr pos:start="174:87" pos:end="174:94"><name pos:start="174:87" pos:end="174:94">bankList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="175:17" pos:end="175:72"><decl pos:start="175:17" pos:end="175:71"><type pos:start="175:17" pos:end="175:36"><name pos:start="175:17" pos:end="175:36"><name pos:start="175:17" pos:end="175:20">List</name><argument_list type="generic" pos:start="175:21" pos:end="175:36">&lt;<argument pos:start="175:22" pos:end="175:35"><name pos:start="175:22" pos:end="175:35"><name pos:start="175:22" pos:end="175:28">Point2D</name><operator pos:start="175:29" pos:end="175:29">.</operator><name pos:start="175:30" pos:end="175:35">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="175:38" pos:end="175:51">coveragePoints</name> <init pos:start="175:53" pos:end="175:71">= <expr pos:start="175:55" pos:end="175:71"><operator pos:start="175:55" pos:end="175:57">new</operator> <call pos:start="175:59" pos:end="175:71"><name pos:start="175:59" pos:end="175:69"><name pos:start="175:59" pos:end="175:67">ArrayList</name><argument_list type="generic" pos:start="175:68" pos:end="175:69">&lt;&gt;</argument_list></name><argument_list pos:start="175:70" pos:end="175:71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="176:17" pos:end="176:41"><expr pos:start="176:17" pos:end="176:40"><name pos:start="176:17" pos:end="176:24">minBound</name> <operator pos:start="176:26" pos:end="176:26">=</operator> <call pos:start="176:28" pos:end="176:40"><name pos:start="176:28" pos:end="176:37"><name pos:start="176:28" pos:end="176:33">bounds</name><operator pos:start="176:34" pos:end="176:34">.</operator><name pos:start="176:35" pos:end="176:37">get</name></name><argument_list pos:start="176:38" pos:end="176:40">(<argument pos:start="176:39" pos:end="176:39"><expr pos:start="176:39" pos:end="176:39"><literal type="number" pos:start="176:39" pos:end="176:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="177:17" pos:end="177:41"><expr pos:start="177:17" pos:end="177:40"><name pos:start="177:17" pos:end="177:24">maxBound</name> <operator pos:start="177:26" pos:end="177:26">=</operator> <call pos:start="177:28" pos:end="177:40"><name pos:start="177:28" pos:end="177:37"><name pos:start="177:28" pos:end="177:33">bounds</name><operator pos:start="177:34" pos:end="177:34">.</operator><name pos:start="177:35" pos:end="177:37">get</name></name><argument_list pos:start="177:38" pos:end="177:40">(<argument pos:start="177:39" pos:end="177:39"><expr pos:start="177:39" pos:end="177:39"><literal type="number" pos:start="177:39" pos:end="177:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:start="178:17" pos:end="184:17">for <control pos:start="178:21" pos:end="178:46">(<init pos:start="178:22" pos:end="178:31"><decl pos:start="178:22" pos:end="178:30"><type pos:start="178:22" pos:end="178:24"><name pos:start="178:22" pos:end="178:24">int</name></type> <name pos:start="178:26" pos:end="178:26">i</name> <init pos:start="178:28" pos:end="178:30">= <expr pos:start="178:30" pos:end="178:30"><literal type="number" pos:start="178:30" pos:end="178:30">0</literal></expr></init></decl>;</init> <condition pos:start="178:33" pos:end="178:41"><expr pos:start="178:33" pos:end="178:40"><name pos:start="178:33" pos:end="178:33">i</name> <operator pos:start="178:35" pos:end="178:35">&lt;</operator> <literal type="number" pos:start="178:37" pos:end="178:40">1000</literal></expr>;</condition> <incr pos:start="178:43" pos:end="178:45"><expr pos:start="178:43" pos:end="178:45"><name pos:start="178:43" pos:end="178:43">i</name><operator pos:start="178:44" pos:end="178:45">++</operator></expr></incr>)</control> <block pos:start="178:48" pos:end="184:17">{<block_content pos:start="179:25" pos:end="183:53">
			<decl_stmt pos:start="179:25" pos:end="179:107"><decl pos:start="179:25" pos:end="179:106"><type pos:start="179:25" pos:end="179:38"><name pos:start="179:25" pos:end="179:38"><name pos:start="179:25" pos:end="179:31">Point2D</name><operator pos:start="179:32" pos:end="179:32">.</operator><name pos:start="179:33" pos:end="179:38">Double</name></name></type> <name pos:start="179:40" pos:end="179:47">newPoint</name> <init pos:start="179:49" pos:end="179:106">= <expr pos:start="179:51" pos:end="179:106"><call pos:start="179:51" pos:end="179:106"><name pos:start="179:51" pos:end="179:86"><name pos:start="179:51" pos:end="179:66">MetricsUtilities</name><operator pos:start="179:67" pos:end="179:67">.</operator><name pos:start="179:68" pos:end="179:86">generateRandomPoint</name></name><argument_list pos:start="179:87" pos:end="179:106">(<argument pos:start="179:88" pos:end="179:95"><expr pos:start="179:88" pos:end="179:95"><name pos:start="179:88" pos:end="179:95">minBound</name></expr></argument>, <argument pos:start="179:98" pos:end="179:105"><expr pos:start="179:98" pos:end="179:105"><name pos:start="179:98" pos:end="179:105">maxBound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<while pos:start="180:25" pos:end="182:25">while <condition pos:start="180:31" pos:end="180:69">(<expr pos:start="180:32" pos:end="180:68"><operator pos:start="180:32" pos:end="180:32">!</operator><call pos:start="180:33" pos:end="180:68"><name pos:start="180:33" pos:end="180:58"><name pos:start="180:33" pos:end="180:49">totalRiverSegment</name><operator pos:start="180:50" pos:end="180:50">.</operator><name pos:start="180:51" pos:end="180:58">contains</name></name><argument_list pos:start="180:59" pos:end="180:68">(<argument pos:start="180:60" pos:end="180:67"><expr pos:start="180:60" pos:end="180:67"><name pos:start="180:60" pos:end="180:67">newPoint</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="180:71" pos:end="182:25">{<block_content pos:start="181:33" pos:end="181:100">
				<expr_stmt pos:start="181:33" pos:end="181:100"><expr pos:start="181:33" pos:end="181:99"><name pos:start="181:33" pos:end="181:40">newPoint</name> <operator pos:start="181:42" pos:end="181:42">=</operator> <call pos:start="181:44" pos:end="181:99"><name pos:start="181:44" pos:end="181:79"><name pos:start="181:44" pos:end="181:59">MetricsUtilities</name><operator pos:start="181:60" pos:end="181:60">.</operator><name pos:start="181:61" pos:end="181:79">generateRandomPoint</name></name><argument_list pos:start="181:80" pos:end="181:99">(<argument pos:start="181:81" pos:end="181:88"><expr pos:start="181:81" pos:end="181:88"><name pos:start="181:81" pos:end="181:88">minBound</name></expr></argument>, <argument pos:start="181:91" pos:end="181:98"><expr pos:start="181:91" pos:end="181:98"><name pos:start="181:91" pos:end="181:98">maxBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt pos:start="183:25" pos:end="183:53"><expr pos:start="183:25" pos:end="183:52"><call pos:start="183:25" pos:end="183:52"><name pos:start="183:25" pos:end="183:42"><name pos:start="183:25" pos:end="183:38">coveragePoints</name><operator pos:start="183:39" pos:end="183:39">.</operator><name pos:start="183:40" pos:end="183:42">add</name></name><argument_list pos:start="183:43" pos:end="183:52">(<argument pos:start="183:44" pos:end="183:51"><expr pos:start="183:44" pos:end="183:51"><name pos:start="183:44" pos:end="183:51">newPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="185:17" pos:end="185:38">return <expr pos:start="185:24" pos:end="185:37"><name pos:start="185:24" pos:end="185:37">coveragePoints</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="188:9" pos:end="195:11">/**
	 * This function calculates coverage statistics for the chosen RoutePrimitive objects.
	 * 
	 * @param routes
	 * @param coveragePoints
	 * @param APERATURE_WIDTH
	 * @return CoverageStatistics
	 */</comment>
	<function pos:start="196:9" pos:end="226:9"><type pos:start="196:9" pos:end="196:28"><specifier pos:start="196:9" pos:end="196:14">public</specifier> <specifier pos:start="196:16" pos:end="196:21">static</specifier> <name pos:start="196:23" pos:end="196:28">double</name></type> <name pos:start="196:30" pos:end="196:51">calculateRouteCoverage</name><parameter_list pos:start="196:52" pos:end="197:98">(<parameter pos:start="196:53" pos:end="196:70"><decl pos:start="196:53" pos:end="196:70"><type pos:start="196:53" pos:end="196:70"><name pos:start="196:53" pos:end="196:63"><name pos:start="196:53" pos:end="196:56">List</name><argument_list type="generic" pos:start="196:57" pos:end="196:63">&lt;<argument pos:start="196:58" pos:end="196:62"><name pos:start="196:58" pos:end="196:62">Drone</name></argument>&gt;</argument_list></name></type> <name pos:start="196:65" pos:end="196:70">drones</name></decl></parameter>, <parameter pos:start="196:73" pos:end="196:103"><decl pos:start="196:73" pos:end="196:103"><type pos:start="196:73" pos:end="196:103"><name pos:start="196:73" pos:end="196:85"><name pos:start="196:73" pos:end="196:78">Path2D</name><operator pos:start="196:79" pos:end="196:79">.</operator><name pos:start="196:80" pos:end="196:85">Double</name></name></type> <name pos:start="196:87" pos:end="196:103">totalRiverSegment</name></decl></parameter>,
			<parameter pos:start="197:25" pos:end="197:48"><decl pos:start="197:25" pos:end="197:48"><type pos:start="197:25" pos:end="197:48"><name pos:start="197:25" pos:end="197:39"><name pos:start="197:25" pos:end="197:28">List</name><argument_list type="generic" pos:start="197:29" pos:end="197:39">&lt;<argument pos:start="197:30" pos:end="197:38"><name pos:start="197:30" pos:end="197:38">RiverBank</name></argument>&gt;</argument_list></name></type> <name pos:start="197:41" pos:end="197:48">bankList</name></decl></parameter>, <parameter pos:start="197:51" pos:end="197:72"><decl pos:start="197:51" pos:end="197:72"><type pos:start="197:51" pos:end="197:72"><name pos:start="197:51" pos:end="197:56">double</name></type> <name pos:start="197:58" pos:end="197:72">APERATURE_WIDTH</name></decl></parameter>, <parameter pos:start="197:75" pos:end="197:97"><decl pos:start="197:75" pos:end="197:97"><type pos:start="197:75" pos:end="197:97"><name pos:start="197:75" pos:end="197:80">double</name></type> <name pos:start="197:82" pos:end="197:97">APERATURE_HEIGHT</name></decl></parameter>)</parameter_list> <block pos:start="197:100" pos:end="226:9">{<block_content pos:start="198:17" pos:end="225:40">
		<decl_stmt pos:start="198:17" pos:end="198:117"><decl pos:start="198:17" pos:end="198:116"><type pos:start="198:17" pos:end="198:36"><name pos:start="198:17" pos:end="198:36"><name pos:start="198:17" pos:end="198:20">List</name><argument_list type="generic" pos:start="198:21" pos:end="198:36">&lt;<argument pos:start="198:22" pos:end="198:35"><name pos:start="198:22" pos:end="198:35"><name pos:start="198:22" pos:end="198:28">Point2D</name><operator pos:start="198:29" pos:end="198:29">.</operator><name pos:start="198:30" pos:end="198:35">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="198:38" pos:end="198:51">coveragePoints</name> <init pos:start="198:53" pos:end="198:116">= <expr pos:start="198:55" pos:end="198:116"><call pos:start="198:55" pos:end="198:116"><name pos:start="198:55" pos:end="198:87">generateRandomRiverCoveragePoints</name><argument_list pos:start="198:88" pos:end="198:116">(<argument pos:start="198:89" pos:end="198:96"><expr pos:start="198:89" pos:end="198:96"><name pos:start="198:89" pos:end="198:96">bankList</name></expr></argument>, <argument pos:start="198:99" pos:end="198:115"><expr pos:start="198:99" pos:end="198:115"><name pos:start="198:99" pos:end="198:115">totalRiverSegment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="199:17" pos:end="199:40"><decl pos:start="199:17" pos:end="199:39"><type pos:start="199:17" pos:end="199:22"><name pos:start="199:17" pos:end="199:22">double</name></type> <name pos:start="199:24" pos:end="199:39">coverageFraction</name></decl>;</decl_stmt>
		<decl_stmt pos:start="200:17" pos:end="200:40"><decl pos:start="200:17" pos:end="200:39"><type pos:start="200:17" pos:end="200:22"><name pos:start="200:17" pos:end="200:22">double</name></type> <name pos:start="200:24" pos:end="200:35">missedPoints</name> <init pos:start="200:37" pos:end="200:39">= <expr pos:start="200:39" pos:end="200:39"><literal type="number" pos:start="200:39" pos:end="200:39">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="201:17" pos:end="201:40"><decl pos:start="201:17" pos:end="201:39"><type pos:start="201:17" pos:end="201:23"><name pos:start="201:17" pos:end="201:23">boolean</name></type> <name pos:start="201:25" pos:end="201:31">covered</name> <init pos:start="201:33" pos:end="201:39">= <expr pos:start="201:35" pos:end="201:39"><literal type="boolean" pos:start="201:35" pos:end="201:39">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="202:17" pos:end="202:64"><decl pos:start="202:17" pos:end="202:63"><type pos:start="202:17" pos:end="202:36"><name pos:start="202:17" pos:end="202:36"><name pos:start="202:17" pos:end="202:20">List</name><argument_list type="generic" pos:start="202:21" pos:end="202:36">&lt;<argument pos:start="202:22" pos:end="202:35"><name pos:start="202:22" pos:end="202:35">RoutePrimitive</name></argument>&gt;</argument_list></name></type> <name pos:start="202:38" pos:end="202:43">routes</name> <init pos:start="202:45" pos:end="202:63">= <expr pos:start="202:47" pos:end="202:63"><operator pos:start="202:47" pos:end="202:49">new</operator> <call pos:start="202:51" pos:end="202:63"><name pos:start="202:51" pos:end="202:61"><name pos:start="202:51" pos:end="202:59">ArrayList</name><argument_list type="generic" pos:start="202:60" pos:end="202:61">&lt;&gt;</argument_list></name><argument_list pos:start="202:62" pos:end="202:63">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:start="203:17" pos:end="205:17">for <control pos:start="203:21" pos:end="203:42">(<init pos:start="203:22" pos:end="203:41"><decl pos:start="203:22" pos:end="203:41"><type pos:start="203:22" pos:end="203:26"><name pos:start="203:22" pos:end="203:26">Drone</name></type> <name pos:start="203:28" pos:end="203:32">drone</name> <range pos:start="203:34" pos:end="203:41">: <expr pos:start="203:36" pos:end="203:41"><name pos:start="203:36" pos:end="203:41">drones</name></expr></range></decl></init>)</control> <block pos:start="203:44" pos:end="205:17">{<block_content pos:start="204:25" pos:end="204:77">
			<expr_stmt pos:start="204:25" pos:end="204:77"><expr pos:start="204:25" pos:end="204:76"><call pos:start="204:25" pos:end="204:76"><name pos:start="204:25" pos:end="204:37"><name pos:start="204:25" pos:end="204:30">routes</name><operator pos:start="204:31" pos:end="204:31">.</operator><name pos:start="204:32" pos:end="204:37">addAll</name></name><argument_list pos:start="204:38" pos:end="204:76">(<argument pos:start="204:39" pos:end="204:75"><expr pos:start="204:39" pos:end="204:75"><call pos:start="204:39" pos:end="204:69"><name pos:start="204:39" pos:end="204:67"><name pos:start="204:39" pos:end="204:43">drone</name><operator pos:start="204:44" pos:end="204:44">.</operator><name pos:start="204:45" pos:end="204:67">getDroneRouteAssignment</name></name><argument_list pos:start="204:68" pos:end="204:69">()</argument_list></call><operator pos:start="204:70" pos:end="204:70">.</operator><call pos:start="204:71" pos:end="204:75"><name pos:start="204:71" pos:end="204:73">get</name><argument_list pos:start="204:74" pos:end="204:75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<decl_stmt pos:start="206:17" pos:end="206:79"><decl pos:start="206:17" pos:end="206:78"><type pos:start="206:17" pos:end="206:37"><name pos:start="206:17" pos:end="206:37"><name pos:start="206:17" pos:end="206:22">Vector</name><argument_list type="generic" pos:start="206:23" pos:end="206:37">&lt;<argument pos:start="206:24" pos:end="206:36"><name pos:start="206:24" pos:end="206:36"><name pos:start="206:24" pos:end="206:29">Path2D</name><operator pos:start="206:30" pos:end="206:30">.</operator><name pos:start="206:31" pos:end="206:36">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="206:39" pos:end="206:61">imageWaypointRectangles</name> <init pos:start="206:63" pos:end="206:78">= <expr pos:start="206:65" pos:end="206:78"><operator pos:start="206:65" pos:end="206:67">new</operator> <call pos:start="206:69" pos:end="206:78"><name pos:start="206:69" pos:end="206:76"><name pos:start="206:69" pos:end="206:74">Vector</name><argument_list type="generic" pos:start="206:75" pos:end="206:76">&lt;&gt;</argument_list></name><argument_list pos:start="206:77" pos:end="206:78">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:start="207:17" pos:end="211:17">for <control pos:start="207:21" pos:end="207:51">(<init pos:start="207:22" pos:end="207:50"><decl pos:start="207:22" pos:end="207:50"><type pos:start="207:22" pos:end="207:35"><name pos:start="207:22" pos:end="207:35">RoutePrimitive</name></type> <name pos:start="207:37" pos:end="207:41">route</name> <range pos:start="207:43" pos:end="207:50">: <expr pos:start="207:45" pos:end="207:50"><name pos:start="207:45" pos:end="207:50">routes</name></expr></range></decl></init>)</control> <block pos:start="207:53" pos:end="211:17">{<block_content pos:start="208:25" pos:end="210:25">
			<if_stmt pos:start="208:25" pos:end="210:25"><if pos:start="208:25" pos:end="210:25">if<condition pos:start="208:27" pos:end="208:81">(<expr pos:start="208:28" pos:end="208:80"><call pos:start="208:28" pos:end="208:47"><name pos:start="208:28" pos:end="208:45"><name pos:start="208:28" pos:end="208:32">route</name><operator pos:start="208:33" pos:end="208:33">.</operator><name pos:start="208:34" pos:end="208:45">getRouteType</name></name><argument_list pos:start="208:46" pos:end="208:47">()</argument_list></call> <operator pos:start="208:49" pos:end="208:50">!=</operator> <name pos:start="208:52" pos:end="208:80"><name pos:start="208:52" pos:end="208:65">RoutePrimitive</name><operator pos:start="208:66" pos:end="208:66">.</operator><name pos:start="208:67" pos:end="208:75">RouteType</name><operator pos:start="208:76" pos:end="208:76">.</operator><name pos:start="208:77" pos:end="208:80">HOME</name></name></expr>)</condition> <block pos:start="208:83" pos:end="210:25">{<block_content pos:start="209:33" pos:end="209:128">
				<expr_stmt pos:start="209:33" pos:end="209:128"><expr pos:start="209:33" pos:end="209:127"><call pos:start="209:33" pos:end="209:127"><name pos:start="209:33" pos:end="209:62"><name pos:start="209:33" pos:end="209:55">imageWaypointRectangles</name><operator pos:start="209:56" pos:end="209:56">.</operator><name pos:start="209:57" pos:end="209:62">addAll</name></name><argument_list pos:start="209:63" pos:end="209:127">(<argument pos:start="209:64" pos:end="209:126"><expr pos:start="209:64" pos:end="209:126"><call pos:start="209:64" pos:end="209:126"><name pos:start="209:64" pos:end="209:84">generateIWPRectangles</name><argument_list pos:start="209:85" pos:end="209:126">(<argument pos:start="209:86" pos:end="209:90"><expr pos:start="209:86" pos:end="209:90"><name pos:start="209:86" pos:end="209:90">route</name></expr></argument>, <argument pos:start="209:93" pos:end="209:107"><expr pos:start="209:93" pos:end="209:107"><name pos:start="209:93" pos:end="209:107">APERATURE_WIDTH</name></expr></argument>, <argument pos:start="209:110" pos:end="209:125"><expr pos:start="209:110" pos:end="209:125"><name pos:start="209:110" pos:end="209:125">APERATURE_HEIGHT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<for pos:start="212:17" pos:end="223:17">for <control pos:start="212:21" pos:end="212:67">(<init pos:start="212:22" pos:end="212:66"><decl pos:start="212:22" pos:end="212:66"><type pos:start="212:22" pos:end="212:35"><name pos:start="212:22" pos:end="212:35"><name pos:start="212:22" pos:end="212:28">Point2D</name><operator pos:start="212:29" pos:end="212:29">.</operator><name pos:start="212:30" pos:end="212:35">Double</name></name></type> <name pos:start="212:37" pos:end="212:49">coveragePoint</name> <range pos:start="212:51" pos:end="212:66">: <expr pos:start="212:53" pos:end="212:66"><name pos:start="212:53" pos:end="212:66">coveragePoints</name></expr></range></decl></init>)</control> <block pos:start="212:69" pos:end="223:17">{<block_content pos:start="213:25" pos:end="222:40">
			<for pos:start="213:25" pos:end="218:25">for <control pos:start="213:29" pos:end="213:79">(<init pos:start="213:30" pos:end="213:78"><decl pos:start="213:30" pos:end="213:78"><type pos:start="213:30" pos:end="213:42"><name pos:start="213:30" pos:end="213:42"><name pos:start="213:30" pos:end="213:35">Path2D</name><operator pos:start="213:36" pos:end="213:36">.</operator><name pos:start="213:37" pos:end="213:42">Double</name></name></type> <name pos:start="213:44" pos:end="213:52">rectangle</name> <range pos:start="213:54" pos:end="213:78">: <expr pos:start="213:56" pos:end="213:78"><name pos:start="213:56" pos:end="213:78">imageWaypointRectangles</name></expr></range></decl></init>)</control> <block pos:start="213:81" pos:end="218:25">{<block_content pos:start="214:33" pos:end="217:33">
				<if_stmt pos:start="214:33" pos:end="217:33"><if pos:start="214:33" pos:end="217:33">if <condition pos:start="214:36" pos:end="214:70">(<expr pos:start="214:37" pos:end="214:69"><call pos:start="214:37" pos:end="214:69"><name pos:start="214:37" pos:end="214:54"><name pos:start="214:37" pos:end="214:45">rectangle</name><operator pos:start="214:46" pos:end="214:46">.</operator><name pos:start="214:47" pos:end="214:54">contains</name></name><argument_list pos:start="214:55" pos:end="214:69">(<argument pos:start="214:56" pos:end="214:68"><expr pos:start="214:56" pos:end="214:68"><name pos:start="214:56" pos:end="214:68">coveragePoint</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="214:72" pos:end="217:33">{<block_content pos:start="215:41" pos:end="216:46">
					<expr_stmt pos:start="215:41" pos:end="215:55"><expr pos:start="215:41" pos:end="215:54"><name pos:start="215:41" pos:end="215:47">covered</name> <operator pos:start="215:49" pos:end="215:49">=</operator> <literal type="boolean" pos:start="215:51" pos:end="215:54">true</literal></expr>;</expr_stmt>
					<break pos:start="216:41" pos:end="216:46">break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt pos:start="219:25" pos:end="221:25"><if pos:start="219:25" pos:end="221:25">if <condition pos:start="219:28" pos:end="219:37">(<expr pos:start="219:29" pos:end="219:36"><operator pos:start="219:29" pos:end="219:29">!</operator><name pos:start="219:30" pos:end="219:36">covered</name></expr>)</condition> <block pos:start="219:39" pos:end="221:25">{<block_content pos:start="220:33" pos:end="220:50">
				<expr_stmt pos:start="220:33" pos:end="220:50"><expr pos:start="220:33" pos:end="220:49"><name pos:start="220:33" pos:end="220:44">missedPoints</name> <operator pos:start="220:46" pos:end="220:47">+=</operator> <literal type="number" pos:start="220:49" pos:end="220:49">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt pos:start="222:25" pos:end="222:40"><expr pos:start="222:25" pos:end="222:39"><name pos:start="222:25" pos:end="222:31">covered</name> <operator pos:start="222:33" pos:end="222:33">=</operator> <literal type="boolean" pos:start="222:35" pos:end="222:39">false</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt pos:start="224:17" pos:end="224:76"><expr pos:start="224:17" pos:end="224:75"><name pos:start="224:17" pos:end="224:32">coverageFraction</name> <operator pos:start="224:34" pos:end="224:34">=</operator> <literal type="number" pos:start="224:36" pos:end="224:36">1</literal> <operator pos:start="224:38" pos:end="224:38">-</operator> <name pos:start="224:40" pos:end="224:51">missedPoints</name> <operator pos:start="224:53" pos:end="224:53">/</operator> <call pos:start="224:55" pos:end="224:75"><name pos:start="224:55" pos:end="224:73"><name pos:start="224:55" pos:end="224:68">coveragePoints</name><operator pos:start="224:69" pos:end="224:69">.</operator><name pos:start="224:70" pos:end="224:73">size</name></name><argument_list pos:start="224:74" pos:end="224:75">()</argument_list></call></expr>;</expr_stmt>
		<return pos:start="225:17" pos:end="225:40">return <expr pos:start="225:24" pos:end="225:39"><name pos:start="225:24" pos:end="225:39">coverageFraction</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="228:9" pos:end="243:9"><type pos:start="228:9" pos:end="228:28"><specifier pos:start="228:9" pos:end="228:14">public</specifier> <specifier pos:start="228:16" pos:end="228:21">static</specifier> <name pos:start="228:23" pos:end="228:28">double</name></type> <name pos:start="228:30" pos:end="228:53">calculateDownstreamRatio</name><parameter_list pos:start="228:54" pos:end="228:73">(<parameter pos:start="228:55" pos:end="228:72"><decl pos:start="228:55" pos:end="228:72"><type pos:start="228:55" pos:end="228:65"><name pos:start="228:55" pos:end="228:65"><name pos:start="228:55" pos:end="228:58">List</name><argument_list type="generic" pos:start="228:59" pos:end="228:65">&lt;<argument pos:start="228:60" pos:end="228:64"><name pos:start="228:60" pos:end="228:64">Drone</name></argument>&gt;</argument_list></name></type> <name pos:start="228:67" pos:end="228:72">drones</name></decl></parameter>)</parameter_list> <block pos:start="228:75" pos:end="243:9">{<block_content pos:start="229:17" pos:end="242:78">
		<decl_stmt pos:start="229:17" pos:end="229:44"><decl pos:start="229:17" pos:end="229:43"><type pos:start="229:17" pos:end="229:22"><name pos:start="229:17" pos:end="229:22">double</name></type> <name pos:start="229:24" pos:end="229:39">downstreamRoutes</name> <init pos:start="229:41" pos:end="229:43">= <expr pos:start="229:43" pos:end="229:43"><literal type="number" pos:start="229:43" pos:end="229:43">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="230:17" pos:end="230:42"><decl pos:start="230:17" pos:end="230:41"><type pos:start="230:17" pos:end="230:22"><name pos:start="230:17" pos:end="230:22">double</name></type> <name pos:start="230:24" pos:end="230:37">upstreamRoutes</name> <init pos:start="230:39" pos:end="230:41">= <expr pos:start="230:41" pos:end="230:41"><literal type="number" pos:start="230:41" pos:end="230:41">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="231:17" pos:end="231:48"><decl pos:start="231:17" pos:end="231:47"><type pos:start="231:17" pos:end="231:36"><name pos:start="231:17" pos:end="231:36">DroneRouteAssignment</name></type> <name pos:start="231:38" pos:end="231:47">droneRoute</name></decl>;</decl_stmt>
		<for pos:start="232:17" pos:end="241:17">for <control pos:start="232:21" pos:end="232:42">(<init pos:start="232:22" pos:end="232:41"><decl pos:start="232:22" pos:end="232:41"><type pos:start="232:22" pos:end="232:26"><name pos:start="232:22" pos:end="232:26">Drone</name></type> <name pos:start="232:28" pos:end="232:32">drone</name> <range pos:start="232:34" pos:end="232:41">: <expr pos:start="232:36" pos:end="232:41"><name pos:start="232:36" pos:end="232:41">drones</name></expr></range></decl></init>)</control> <block pos:start="232:44" pos:end="241:17">{<block_content pos:start="233:25" pos:end="240:25">
			<expr_stmt pos:start="233:25" pos:end="233:69"><expr pos:start="233:25" pos:end="233:68"><name pos:start="233:25" pos:end="233:34">droneRoute</name> <operator pos:start="233:36" pos:end="233:36">=</operator> <call pos:start="233:38" pos:end="233:68"><name pos:start="233:38" pos:end="233:66"><name pos:start="233:38" pos:end="233:42">drone</name><operator pos:start="233:43" pos:end="233:43">.</operator><name pos:start="233:44" pos:end="233:66">getDroneRouteAssignment</name></name><argument_list pos:start="233:67" pos:end="233:68">()</argument_list></call></expr>;</expr_stmt>
			<for pos:start="234:25" pos:end="240:25">for <control pos:start="234:29" pos:end="234:69">(<init pos:start="234:30" pos:end="234:68"><decl pos:start="234:30" pos:end="234:68"><type pos:start="234:30" pos:end="234:43"><name pos:start="234:30" pos:end="234:43">RoutePrimitive</name></type> <name pos:start="234:45" pos:end="234:49">route</name> <range pos:start="234:51" pos:end="234:68">: <expr pos:start="234:53" pos:end="234:68"><call pos:start="234:53" pos:end="234:68"><name pos:start="234:53" pos:end="234:66"><name pos:start="234:53" pos:end="234:62">droneRoute</name><operator pos:start="234:63" pos:end="234:63">.</operator><name pos:start="234:64" pos:end="234:66">get</name></name><argument_list pos:start="234:67" pos:end="234:68">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="234:71" pos:end="240:25">{<block_content pos:start="235:33" pos:end="239:33">
				<if_stmt pos:start="235:33" pos:end="239:33"><if pos:start="235:33" pos:end="237:33">if <condition pos:start="235:36" pos:end="235:67">(<expr pos:start="235:37" pos:end="235:66"><call pos:start="235:37" pos:end="235:66"><name pos:start="235:37" pos:end="235:64"><name pos:start="235:37" pos:end="235:41">route</name><operator pos:start="235:42" pos:end="235:42">.</operator><name pos:start="235:43" pos:end="235:64">getDownstreamDirection</name></name><argument_list pos:start="235:65" pos:end="235:66">()</argument_list></call></expr>)</condition> <block pos:start="235:69" pos:end="237:33">{<block_content pos:start="236:41" pos:end="236:62">
					<expr_stmt pos:start="236:41" pos:end="236:62"><expr pos:start="236:41" pos:end="236:61"><name pos:start="236:41" pos:end="236:56">downstreamRoutes</name> <operator pos:start="236:58" pos:end="236:59">+=</operator> <literal type="number" pos:start="236:61" pos:end="236:61">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <else pos:start="237:35" pos:end="239:33">else <block pos:start="237:40" pos:end="239:33">{<block_content pos:start="238:41" pos:end="238:60">
					<expr_stmt pos:start="238:41" pos:end="238:60"><expr pos:start="238:41" pos:end="238:59"><name pos:start="238:41" pos:end="238:54">upstreamRoutes</name> <operator pos:start="238:56" pos:end="238:57">+=</operator> <literal type="number" pos:start="238:59" pos:end="238:59">1</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<return pos:start="242:17" pos:end="242:78">return <expr pos:start="242:24" pos:end="242:77"><name pos:start="242:24" pos:end="242:39">downstreamRoutes</name> <operator pos:start="242:41" pos:end="242:41">/</operator> <operator pos:start="242:43" pos:end="242:43">(</operator><name pos:start="242:44" pos:end="242:59">downstreamRoutes</name> <operator pos:start="242:61" pos:end="242:61">+</operator> <name pos:start="242:63" pos:end="242:76">upstreamRoutes</name><operator pos:start="242:77" pos:end="242:77">)</operator></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="245:9" pos:end="253:9"><type pos:start="245:9" pos:end="245:29"><specifier pos:start="245:9" pos:end="245:15">private</specifier> <specifier pos:start="245:17" pos:end="245:22">static</specifier> <name pos:start="245:24" pos:end="245:29">double</name></type> <name pos:start="245:31" pos:end="245:60">calculateDronePriorityCoverage</name><parameter_list pos:start="245:61" pos:end="245:73">(<parameter pos:start="245:62" pos:end="245:72"><decl pos:start="245:62" pos:end="245:72"><type pos:start="245:62" pos:end="245:66"><name pos:start="245:62" pos:end="245:66">Drone</name></type> <name pos:start="245:68" pos:end="245:72">drone</name></decl></parameter>)</parameter_list> <block pos:start="245:75" pos:end="253:9">{<block_content pos:start="246:17" pos:end="252:32">
		<decl_stmt pos:start="246:17" pos:end="246:36"><decl pos:start="246:17" pos:end="246:35"><type pos:start="246:17" pos:end="246:22"><name pos:start="246:17" pos:end="246:22">double</name></type> <name pos:start="246:24" pos:end="246:31">coverage</name> <init pos:start="246:33" pos:end="246:35">= <expr pos:start="246:35" pos:end="246:35"><literal type="number" pos:start="246:35" pos:end="246:35">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="247:17" pos:end="247:45"><decl pos:start="247:17" pos:end="247:44"><type pos:start="247:17" pos:end="247:22"><name pos:start="247:17" pos:end="247:22">double</name></type> <name pos:start="247:24" pos:end="247:40">primitivePosition</name> <init pos:start="247:42" pos:end="247:44">= <expr pos:start="247:44" pos:end="247:44"><literal type="number" pos:start="247:44" pos:end="247:44">1</literal></expr></init></decl>;</decl_stmt>
		<for pos:start="248:17" pos:end="251:17">for<control pos:start="248:20" pos:end="248:90">(<init pos:start="248:21" pos:end="248:89"><decl pos:start="248:21" pos:end="248:89"><type pos:start="248:21" pos:end="248:34"><name pos:start="248:21" pos:end="248:34">RoutePrimitive</name></type> <name pos:start="248:36" pos:end="248:49">routePrimitive</name> <range pos:start="248:51" pos:end="248:89">: <expr pos:start="248:53" pos:end="248:89"><call pos:start="248:53" pos:end="248:83"><name pos:start="248:53" pos:end="248:81"><name pos:start="248:53" pos:end="248:57">drone</name><operator pos:start="248:58" pos:end="248:58">.</operator><name pos:start="248:59" pos:end="248:81">getDroneRouteAssignment</name></name><argument_list pos:start="248:82" pos:end="248:83">()</argument_list></call><operator pos:start="248:84" pos:end="248:84">.</operator><call pos:start="248:85" pos:end="248:89"><name pos:start="248:85" pos:end="248:87">get</name><argument_list pos:start="248:88" pos:end="248:89">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="248:92" pos:end="251:17">{<block_content pos:start="249:25" pos:end="250:44">
			<expr_stmt pos:start="249:25" pos:end="249:94"><expr pos:start="249:25" pos:end="249:93"><name pos:start="249:25" pos:end="249:32">coverage</name> <operator pos:start="249:34" pos:end="249:35">+=</operator> <call pos:start="249:37" pos:end="249:67"><name pos:start="249:37" pos:end="249:65"><name pos:start="249:37" pos:end="249:50">routePrimitive</name><operator pos:start="249:51" pos:end="249:51">.</operator><name pos:start="249:52" pos:end="249:65">getRouteWeight</name></name><argument_list pos:start="249:66" pos:end="249:67">()</argument_list></call> <operator pos:start="249:69" pos:end="249:69">*</operator> <operator pos:start="249:71" pos:end="249:71">(</operator><literal type="number" pos:start="249:72" pos:end="249:72">1</literal> <operator pos:start="249:74" pos:end="249:74">/</operator> <name pos:start="249:76" pos:end="249:92">primitivePosition</name><operator pos:start="249:93" pos:end="249:93">)</operator></expr>;</expr_stmt>
			<expr_stmt pos:start="250:25" pos:end="250:44"><expr pos:start="250:25" pos:end="250:43"><name pos:start="250:25" pos:end="250:41">primitivePosition</name><operator pos:start="250:42" pos:end="250:43">++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="252:17" pos:end="252:32">return <expr pos:start="252:24" pos:end="252:31"><name pos:start="252:24" pos:end="252:31">coverage</name></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="255:9" pos:end="261:9"><type pos:start="255:9" pos:end="255:28"><specifier pos:start="255:9" pos:end="255:14">public</specifier> <specifier pos:start="255:16" pos:end="255:21">static</specifier> <name pos:start="255:23" pos:end="255:28">double</name></type> <name pos:start="255:30" pos:end="255:64">calculateAllocationPriorityCoverage</name><parameter_list pos:start="255:65" pos:end="255:84">(<parameter pos:start="255:66" pos:end="255:83"><decl pos:start="255:66" pos:end="255:83"><type pos:start="255:66" pos:end="255:76"><name pos:start="255:66" pos:end="255:76"><name pos:start="255:66" pos:end="255:69">List</name><argument_list type="generic" pos:start="255:70" pos:end="255:76">&lt;<argument pos:start="255:71" pos:end="255:75"><name pos:start="255:71" pos:end="255:75">Drone</name></argument>&gt;</argument_list></name></type> <name pos:start="255:78" pos:end="255:83">drones</name></decl></parameter>)</parameter_list> <block pos:start="255:86" pos:end="261:9">{<block_content pos:start="256:17" pos:end="260:42">
		<decl_stmt pos:start="256:17" pos:end="256:46"><decl pos:start="256:17" pos:end="256:45"><type pos:start="256:17" pos:end="256:22"><name pos:start="256:17" pos:end="256:22">double</name></type> <name pos:start="256:24" pos:end="256:41">allocationCoverage</name> <init pos:start="256:43" pos:end="256:45">= <expr pos:start="256:45" pos:end="256:45"><literal type="number" pos:start="256:45" pos:end="256:45">0</literal></expr></init></decl>;</decl_stmt>
		<for pos:start="257:17" pos:end="259:17">for<control pos:start="257:20" pos:end="257:41">(<init pos:start="257:21" pos:end="257:40"><decl pos:start="257:21" pos:end="257:40"><type pos:start="257:21" pos:end="257:25"><name pos:start="257:21" pos:end="257:25">Drone</name></type> <name pos:start="257:27" pos:end="257:31">drone</name> <range pos:start="257:33" pos:end="257:40">: <expr pos:start="257:35" pos:end="257:40"><name pos:start="257:35" pos:end="257:40">drones</name></expr></range></decl></init>)</control> <block pos:start="257:43" pos:end="259:17">{<block_content pos:start="258:25" pos:end="258:84">
			<expr_stmt pos:start="258:25" pos:end="258:84"><expr pos:start="258:25" pos:end="258:83"><name pos:start="258:25" pos:end="258:42">allocationCoverage</name> <operator pos:start="258:44" pos:end="258:45">+=</operator> <call pos:start="258:47" pos:end="258:83"><name pos:start="258:47" pos:end="258:76">calculateDronePriorityCoverage</name><argument_list pos:start="258:77" pos:end="258:83">(<argument pos:start="258:78" pos:end="258:82"><expr pos:start="258:78" pos:end="258:82"><name pos:start="258:78" pos:end="258:82">drone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="260:17" pos:end="260:42">return <expr pos:start="260:24" pos:end="260:41"><name pos:start="260:24" pos:end="260:41">allocationCoverage</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="263:9" pos:end="269:9"><type pos:start="263:9" pos:end="263:29"><specifier pos:start="263:9" pos:end="263:14">public</specifier> <specifier pos:start="263:16" pos:end="263:21">static</specifier> <name pos:start="263:23" pos:end="263:29">boolean</name></type> <name pos:start="263:31" pos:end="263:44">batteryFailure</name><parameter_list pos:start="263:45" pos:end="263:57">(<parameter pos:start="263:46" pos:end="263:56"><decl pos:start="263:46" pos:end="263:56"><type pos:start="263:46" pos:end="263:50"><name pos:start="263:46" pos:end="263:50">Drone</name></type> <name pos:start="263:52" pos:end="263:56">drone</name></decl></parameter>)</parameter_list> <block pos:start="263:59" pos:end="269:9">{<block_content pos:start="264:17" pos:end="268:17">
		<if_stmt pos:start="264:17" pos:end="268:17"><if pos:start="264:17" pos:end="266:17">if <condition pos:start="264:20" pos:end="264:60">(<expr pos:start="264:21" pos:end="264:59"><call pos:start="264:21" pos:end="264:47"><name pos:start="264:21" pos:end="264:40">totalBatteryDistance</name><argument_list pos:start="264:41" pos:end="264:47">(<argument pos:start="264:42" pos:end="264:46"><expr pos:start="264:42" pos:end="264:46"><name pos:start="264:42" pos:end="264:46">drone</name></expr></argument>)</argument_list></call> <operator pos:start="264:49" pos:end="264:49">/</operator> <literal type="number" pos:start="264:51" pos:end="264:54">1000</literal> <operator pos:start="264:56" pos:end="264:56">&gt;</operator> <literal type="number" pos:start="264:58" pos:end="264:59">10</literal></expr>)</condition> <block pos:start="264:62" pos:end="266:17">{<block_content pos:start="265:25" pos:end="265:36">
			<return pos:start="265:25" pos:end="265:36">return <expr pos:start="265:32" pos:end="265:35"><literal type="boolean" pos:start="265:32" pos:end="265:35">true</literal></expr>;</return>
		</block_content>}</block></if> <else pos:start="266:19" pos:end="268:17">else <block pos:start="266:24" pos:end="268:17">{<block_content pos:start="267:25" pos:end="267:37">
			<return pos:start="267:25" pos:end="267:37">return <expr pos:start="267:32" pos:end="267:36"><literal type="boolean" pos:start="267:32" pos:end="267:36">false</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function pos:start="271:9" pos:end="305:9"><type pos:start="271:9" pos:end="271:25"><specifier pos:start="271:9" pos:end="271:14">public</specifier> <specifier pos:start="271:16" pos:end="271:21">static</specifier> <name pos:start="271:23" pos:end="271:25">int</name></type> <name pos:start="271:27" pos:end="271:40">collisionCheck</name><parameter_list pos:start="271:41" pos:end="271:60">(<parameter pos:start="271:42" pos:end="271:59"><decl pos:start="271:42" pos:end="271:59"><type pos:start="271:42" pos:end="271:52"><name pos:start="271:42" pos:end="271:52"><name pos:start="271:42" pos:end="271:45">List</name><argument_list type="generic" pos:start="271:46" pos:end="271:52">&lt;<argument pos:start="271:47" pos:end="271:51"><name pos:start="271:47" pos:end="271:51">Drone</name></argument>&gt;</argument_list></name></type> <name pos:start="271:54" pos:end="271:59">drones</name></decl></parameter>)</parameter_list> <block pos:start="271:62" pos:end="305:9">{<block_content pos:start="272:17" pos:end="304:34">
		<decl_stmt pos:start="272:17" pos:end="272:35"><decl pos:start="272:17" pos:end="272:34"><type pos:start="272:17" pos:end="272:19"><name pos:start="272:17" pos:end="272:19">int</name></type> <name pos:start="272:21" pos:end="272:30">collisions</name> <init pos:start="272:32" pos:end="272:34">= <expr pos:start="272:34" pos:end="272:34"><literal type="number" pos:start="272:34" pos:end="272:34">0</literal></expr></init></decl>;</decl_stmt>
		<for pos:start="273:17" pos:end="303:17">for <control pos:start="273:21" pos:end="273:59">(<init pos:start="273:22" pos:end="273:31"><decl pos:start="273:22" pos:end="273:30"><type pos:start="273:22" pos:end="273:24"><name pos:start="273:22" pos:end="273:24">int</name></type> <name pos:start="273:26" pos:end="273:26">i</name> <init pos:start="273:28" pos:end="273:30">= <expr pos:start="273:30" pos:end="273:30"><literal type="number" pos:start="273:30" pos:end="273:30">0</literal></expr></init></decl>;</init> <condition pos:start="273:33" pos:end="273:54"><expr pos:start="273:33" pos:end="273:53"><name pos:start="273:33" pos:end="273:33">i</name> <operator pos:start="273:35" pos:end="273:35">&lt;</operator> <call pos:start="273:37" pos:end="273:49"><name pos:start="273:37" pos:end="273:47"><name pos:start="273:37" pos:end="273:42">drones</name><operator pos:start="273:43" pos:end="273:43">.</operator><name pos:start="273:44" pos:end="273:47">size</name></name><argument_list pos:start="273:48" pos:end="273:49">()</argument_list></call> <operator pos:start="273:51" pos:end="273:51">-</operator> <literal type="number" pos:start="273:53" pos:end="273:53">1</literal></expr>;</condition> <incr pos:start="273:56" pos:end="273:58"><expr pos:start="273:56" pos:end="273:58"><name pos:start="273:56" pos:end="273:56">i</name><operator pos:start="273:57" pos:end="273:58">++</operator></expr></incr>)</control> <block pos:start="273:61" pos:end="303:17">{<block_content pos:start="274:25" pos:end="302:25">
			<decl_stmt pos:start="274:25" pos:end="274:91"><decl pos:start="274:25" pos:end="274:90"><type pos:start="274:25" pos:end="274:44"><name pos:start="274:25" pos:end="274:44"><name pos:start="274:25" pos:end="274:28">List</name><argument_list type="generic" pos:start="274:29" pos:end="274:44">&lt;<argument pos:start="274:30" pos:end="274:43"><name pos:start="274:30" pos:end="274:43"><name pos:start="274:30" pos:end="274:36">Point2D</name><operator pos:start="274:37" pos:end="274:37">.</operator><name pos:start="274:38" pos:end="274:43">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="274:46" pos:end="274:54">currRoute</name> <init pos:start="274:56" pos:end="274:90">= <expr pos:start="274:58" pos:end="274:90"><call pos:start="274:58" pos:end="274:70"><name pos:start="274:58" pos:end="274:67"><name pos:start="274:58" pos:end="274:63">drones</name><operator pos:start="274:64" pos:end="274:64">.</operator><name pos:start="274:65" pos:end="274:67">get</name></name><argument_list pos:start="274:68" pos:end="274:70">(<argument pos:start="274:69" pos:end="274:69"><expr pos:start="274:69" pos:end="274:69"><name pos:start="274:69" pos:end="274:69">i</name></expr></argument>)</argument_list></call><operator pos:start="274:71" pos:end="274:71">.</operator><call pos:start="274:72" pos:end="274:90"><name pos:start="274:72" pos:end="274:88">getDroneFullRoute</name><argument_list pos:start="274:89" pos:end="274:90">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for pos:start="275:25" pos:end="302:25">for <control pos:start="275:29" pos:end="275:67">(<init pos:start="275:30" pos:end="275:43"><decl pos:start="275:30" pos:end="275:42"><type pos:start="275:30" pos:end="275:32"><name pos:start="275:30" pos:end="275:32">int</name></type> <name pos:start="275:34" pos:end="275:34">d</name> <init pos:start="275:36" pos:end="275:42">= <expr pos:start="275:38" pos:end="275:42"><name pos:start="275:38" pos:end="275:38">i</name> <operator pos:start="275:40" pos:end="275:40">+</operator> <literal type="number" pos:start="275:42" pos:end="275:42">1</literal></expr></init></decl>;</init> <condition pos:start="275:45" pos:end="275:62"><expr pos:start="275:45" pos:end="275:61"><name pos:start="275:45" pos:end="275:45">d</name> <operator pos:start="275:47" pos:end="275:47">&lt;</operator> <call pos:start="275:49" pos:end="275:61"><name pos:start="275:49" pos:end="275:59"><name pos:start="275:49" pos:end="275:54">drones</name><operator pos:start="275:55" pos:end="275:55">.</operator><name pos:start="275:56" pos:end="275:59">size</name></name><argument_list pos:start="275:60" pos:end="275:61">()</argument_list></call></expr>;</condition> <incr pos:start="275:64" pos:end="275:66"><expr pos:start="275:64" pos:end="275:66"><name pos:start="275:64" pos:end="275:64">d</name><operator pos:start="275:65" pos:end="275:66">++</operator></expr></incr>)</control> <block pos:start="275:69" pos:end="302:25">{<block_content pos:start="276:33" pos:end="301:33">
				<decl_stmt pos:start="276:33" pos:end="276:100"><decl pos:start="276:33" pos:end="276:99"><type pos:start="276:33" pos:end="276:52"><name pos:start="276:33" pos:end="276:52"><name pos:start="276:33" pos:end="276:36">List</name><argument_list type="generic" pos:start="276:37" pos:end="276:52">&lt;<argument pos:start="276:38" pos:end="276:51"><name pos:start="276:38" pos:end="276:51"><name pos:start="276:38" pos:end="276:44">Point2D</name><operator pos:start="276:45" pos:end="276:45">.</operator><name pos:start="276:46" pos:end="276:51">Double</name></name></argument>&gt;</argument_list></name></type> <name pos:start="276:54" pos:end="276:63">otherRoute</name> <init pos:start="276:65" pos:end="276:99">= <expr pos:start="276:67" pos:end="276:99"><call pos:start="276:67" pos:end="276:79"><name pos:start="276:67" pos:end="276:76"><name pos:start="276:67" pos:end="276:72">drones</name><operator pos:start="276:73" pos:end="276:73">.</operator><name pos:start="276:74" pos:end="276:76">get</name></name><argument_list pos:start="276:77" pos:end="276:79">(<argument pos:start="276:78" pos:end="276:78"><expr pos:start="276:78" pos:end="276:78"><name pos:start="276:78" pos:end="276:78">d</name></expr></argument>)</argument_list></call><operator pos:start="276:80" pos:end="276:80">.</operator><call pos:start="276:81" pos:end="276:99"><name pos:start="276:81" pos:end="276:97">getDroneFullRoute</name><argument_list pos:start="276:98" pos:end="276:99">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt pos:start="277:33" pos:end="277:56"><decl pos:start="277:33" pos:end="277:55"><type pos:start="277:33" pos:end="277:38"><name pos:start="277:33" pos:end="277:38">double</name></type> <name pos:start="277:40" pos:end="277:51">currDistance</name> <init pos:start="277:53" pos:end="277:55">= <expr pos:start="277:55" pos:end="277:55"><literal type="number" pos:start="277:55" pos:end="277:55">0</literal></expr></init></decl>;</decl_stmt>
				<for pos:start="278:33" pos:end="301:33">for <control pos:start="278:37" pos:end="278:78">(<init pos:start="278:38" pos:end="278:47"><decl pos:start="278:38" pos:end="278:46"><type pos:start="278:38" pos:end="278:40"><name pos:start="278:38" pos:end="278:40">int</name></type> <name pos:start="278:42" pos:end="278:42">r</name> <init pos:start="278:44" pos:end="278:46">= <expr pos:start="278:46" pos:end="278:46"><literal type="number" pos:start="278:46" pos:end="278:46">0</literal></expr></init></decl>;</init> <condition pos:start="278:49" pos:end="278:73"><expr pos:start="278:49" pos:end="278:72"><name pos:start="278:49" pos:end="278:49">r</name> <operator pos:start="278:51" pos:end="278:51">&lt;</operator> <call pos:start="278:53" pos:end="278:68"><name pos:start="278:53" pos:end="278:66"><name pos:start="278:53" pos:end="278:61">currRoute</name><operator pos:start="278:62" pos:end="278:62">.</operator><name pos:start="278:63" pos:end="278:66">size</name></name><argument_list pos:start="278:67" pos:end="278:68">()</argument_list></call> <operator pos:start="278:70" pos:end="278:70">-</operator> <literal type="number" pos:start="278:72" pos:end="278:72">1</literal></expr>;</condition> <incr pos:start="278:75" pos:end="278:77"><expr pos:start="278:75" pos:end="278:77"><name pos:start="278:75" pos:end="278:75">r</name><operator pos:start="278:76" pos:end="278:77">++</operator></expr></incr>)</control> <block pos:start="278:80" pos:end="301:33">{<block_content pos:start="279:41" pos:end="300:127">
					<decl_stmt pos:start="279:41" pos:end="279:126"><decl pos:start="279:41" pos:end="279:125"><type pos:start="279:41" pos:end="279:53"><name pos:start="279:41" pos:end="279:53"><name pos:start="279:41" pos:end="279:46">Line2D</name><operator pos:start="279:47" pos:end="279:47">.</operator><name pos:start="279:48" pos:end="279:53">Double</name></name></type> <name pos:start="279:55" pos:end="279:65">currLineSeg</name> <init pos:start="279:67" pos:end="279:125">= <expr pos:start="279:69" pos:end="279:125"><operator pos:start="279:69" pos:end="279:71">new</operator> <call pos:start="279:73" pos:end="279:125"><name pos:start="279:73" pos:end="279:85"><name pos:start="279:73" pos:end="279:78">Line2D</name><operator pos:start="279:79" pos:end="279:79">.</operator><name pos:start="279:80" pos:end="279:85">Double</name></name><argument_list pos:start="279:86" pos:end="279:125">(<argument pos:start="279:87" pos:end="279:102"><expr pos:start="279:87" pos:end="279:102"><call pos:start="279:87" pos:end="279:102"><name pos:start="279:87" pos:end="279:99"><name pos:start="279:87" pos:end="279:95">currRoute</name><operator pos:start="279:96" pos:end="279:96">.</operator><name pos:start="279:97" pos:end="279:99">get</name></name><argument_list pos:start="279:100" pos:end="279:102">(<argument pos:start="279:101" pos:end="279:101"><expr pos:start="279:101" pos:end="279:101"><name pos:start="279:101" pos:end="279:101">r</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="279:105" pos:end="279:124"><expr pos:start="279:105" pos:end="279:124"><call pos:start="279:105" pos:end="279:124"><name pos:start="279:105" pos:end="279:117"><name pos:start="279:105" pos:end="279:113">currRoute</name><operator pos:start="279:114" pos:end="279:114">.</operator><name pos:start="279:115" pos:end="279:117">get</name></name><argument_list pos:start="279:118" pos:end="279:124">(<argument pos:start="279:119" pos:end="279:123"><expr pos:start="279:119" pos:end="279:123"><name pos:start="279:119" pos:end="279:119">r</name> <operator pos:start="279:121" pos:end="279:121">+</operator> <literal type="number" pos:start="279:123" pos:end="279:123">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt pos:start="280:41" pos:end="280:65"><decl pos:start="280:41" pos:end="280:64"><type pos:start="280:41" pos:end="280:46"><name pos:start="280:41" pos:end="280:46">double</name></type> <name pos:start="280:48" pos:end="280:60">otherDistance</name> <init pos:start="280:62" pos:end="280:64">= <expr pos:start="280:64" pos:end="280:64"><literal type="number" pos:start="280:64" pos:end="280:64">0</literal></expr></init></decl>;</decl_stmt>
					<for pos:start="281:41" pos:end="298:41">for <control pos:start="281:45" pos:end="281:90">(<init pos:start="281:46" pos:end="281:56"><decl pos:start="281:46" pos:end="281:55"><type pos:start="281:46" pos:end="281:48"><name pos:start="281:46" pos:end="281:48">int</name></type> <name pos:start="281:50" pos:end="281:51">r2</name> <init pos:start="281:53" pos:end="281:55">= <expr pos:start="281:55" pos:end="281:55"><literal type="number" pos:start="281:55" pos:end="281:55">0</literal></expr></init></decl>;</init> <condition pos:start="281:58" pos:end="281:84"><expr pos:start="281:58" pos:end="281:83"><name pos:start="281:58" pos:end="281:59">r2</name> <operator pos:start="281:61" pos:end="281:61">&lt;</operator> <call pos:start="281:63" pos:end="281:79"><name pos:start="281:63" pos:end="281:77"><name pos:start="281:63" pos:end="281:72">otherRoute</name><operator pos:start="281:73" pos:end="281:73">.</operator><name pos:start="281:74" pos:end="281:77">size</name></name><argument_list pos:start="281:78" pos:end="281:79">()</argument_list></call> <operator pos:start="281:81" pos:end="281:81">-</operator> <literal type="number" pos:start="281:83" pos:end="281:83">1</literal></expr>;</condition> <incr pos:start="281:86" pos:end="281:89"><expr pos:start="281:86" pos:end="281:89"><name pos:start="281:86" pos:end="281:87">r2</name><operator pos:start="281:88" pos:end="281:89">++</operator></expr></incr>)</control> <block pos:start="281:92" pos:end="298:41">{<block_content pos:start="282:49" pos:end="297:140">
						<decl_stmt pos:start="282:49" pos:end="282:139"><decl pos:start="282:49" pos:end="282:138"><type pos:start="282:49" pos:end="282:61"><name pos:start="282:49" pos:end="282:61"><name pos:start="282:49" pos:end="282:54">Line2D</name><operator pos:start="282:55" pos:end="282:55">.</operator><name pos:start="282:56" pos:end="282:61">Double</name></name></type> <name pos:start="282:63" pos:end="282:74">otherLineSeg</name> <init pos:start="282:76" pos:end="282:138">= <expr pos:start="282:78" pos:end="282:138"><operator pos:start="282:78" pos:end="282:80">new</operator> <call pos:start="282:82" pos:end="282:138"><name pos:start="282:82" pos:end="282:94"><name pos:start="282:82" pos:end="282:87">Line2D</name><operator pos:start="282:88" pos:end="282:88">.</operator><name pos:start="282:89" pos:end="282:94">Double</name></name><argument_list pos:start="282:95" pos:end="282:138">(<argument pos:start="282:96" pos:end="282:113"><expr pos:start="282:96" pos:end="282:113"><call pos:start="282:96" pos:end="282:113"><name pos:start="282:96" pos:end="282:109"><name pos:start="282:96" pos:end="282:105">otherRoute</name><operator pos:start="282:106" pos:end="282:106">.</operator><name pos:start="282:107" pos:end="282:109">get</name></name><argument_list pos:start="282:110" pos:end="282:113">(<argument pos:start="282:111" pos:end="282:112"><expr pos:start="282:111" pos:end="282:112"><name pos:start="282:111" pos:end="282:112">r2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="282:116" pos:end="282:137"><expr pos:start="282:116" pos:end="282:137"><call pos:start="282:116" pos:end="282:137"><name pos:start="282:116" pos:end="282:129"><name pos:start="282:116" pos:end="282:125">otherRoute</name><operator pos:start="282:126" pos:end="282:126">.</operator><name pos:start="282:127" pos:end="282:129">get</name></name><argument_list pos:start="282:130" pos:end="282:137">(<argument pos:start="282:131" pos:end="282:136"><expr pos:start="282:131" pos:end="282:136"><name pos:start="282:131" pos:end="282:132">r2</name> <operator pos:start="282:134" pos:end="282:134">+</operator> <literal type="number" pos:start="282:136" pos:end="282:136">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if_stmt pos:start="283:49" pos:end="296:49"><if pos:start="283:49" pos:end="296:49">if <condition pos:start="283:52" pos:end="283:93">(<expr pos:start="283:53" pos:end="283:92"><call pos:start="283:53" pos:end="283:92"><name pos:start="283:53" pos:end="283:78"><name pos:start="283:53" pos:end="283:63">currLineSeg</name><operator pos:start="283:64" pos:end="283:64">.</operator><name pos:start="283:65" pos:end="283:78">intersectsLine</name></name><argument_list pos:start="283:79" pos:end="283:92">(<argument pos:start="283:80" pos:end="283:91"><expr pos:start="283:80" pos:end="283:91"><name pos:start="283:80" pos:end="283:91">otherLineSeg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:95" pos:end="296:49">{<block_content pos:start="284:57" pos:end="295:57">
							<decl_stmt pos:start="284:57" pos:end="284:148"><decl pos:start="284:57" pos:end="284:147"><type pos:start="284:57" pos:end="284:70"><name pos:start="284:57" pos:end="284:70"><name pos:start="284:57" pos:end="284:63">Point2D</name><operator pos:start="284:64" pos:end="284:64">.</operator><name pos:start="284:65" pos:end="284:70">Double</name></name></type> <name pos:start="284:72" pos:end="284:88">intersectionPoint</name> <init pos:start="284:90" pos:end="284:147">= <expr pos:start="284:92" pos:end="284:147"><call pos:start="284:92" pos:end="284:147"><name pos:start="284:92" pos:end="284:120"><name pos:start="284:92" pos:end="284:99">Geometry</name><operator pos:start="284:100" pos:end="284:100">.</operator><name pos:start="284:101" pos:end="284:120">findLineIntersection</name></name><argument_list pos:start="284:121" pos:end="284:147">(<argument pos:start="284:122" pos:end="284:132"><expr pos:start="284:122" pos:end="284:132"><name pos:start="284:122" pos:end="284:132">currLineSeg</name></expr></argument>, <argument pos:start="284:135" pos:end="284:146"><expr pos:start="284:135" pos:end="284:146"><name pos:start="284:135" pos:end="284:146">otherLineSeg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if_stmt pos:start="285:57" pos:end="295:57"><if pos:start="285:57" pos:end="295:57">if <condition pos:start="285:60" pos:end="288:178">(<expr pos:start="285:61" pos:end="288:177"><call pos:start="285:61" pos:end="288:172"><name pos:start="285:61" pos:end="285:68"><name pos:start="285:61" pos:end="285:64">Math</name><operator pos:start="285:65" pos:end="285:65">.</operator><name pos:start="285:66" pos:end="285:68">abs</name></name><argument_list pos:start="285:69" pos:end="288:172">(<argument pos:start="285:70" pos:end="288:171"><expr pos:start="285:70" pos:end="288:171"><operator pos:start="285:70" pos:end="285:70">(</operator><name pos:start="285:71" pos:end="285:82">currDistance</name> <operator pos:start="285:84" pos:end="285:84">+</operator> <call pos:start="285:86" pos:end="286:152"><name pos:start="285:86" pos:end="285:115"><name pos:start="285:86" pos:end="285:93">Geometry</name><operator pos:start="285:94" pos:end="285:94">.</operator><name pos:start="285:95" pos:end="285:115">findCartesianDistance</name></name><argument_list pos:start="285:116" pos:end="286:152">(
									<argument pos:start="286:73" pos:end="286:132"><expr pos:start="286:73" pos:end="286:132"><operator pos:start="286:73" pos:end="286:75">new</operator> <call pos:start="286:77" pos:end="286:132"><name pos:start="286:77" pos:end="286:90"><name pos:start="286:77" pos:end="286:83">Point2D</name><operator pos:start="286:84" pos:end="286:84">.</operator><name pos:start="286:85" pos:end="286:90">Double</name></name><argument_list pos:start="286:91" pos:end="286:132">(<argument pos:start="286:92" pos:end="286:110"><expr pos:start="286:92" pos:end="286:110"><call pos:start="286:92" pos:end="286:110"><name pos:start="286:92" pos:end="286:108"><name pos:start="286:92" pos:end="286:102">currLineSeg</name><operator pos:start="286:103" pos:end="286:103">.</operator><name pos:start="286:104" pos:end="286:108">getX1</name></name><argument_list pos:start="286:109" pos:end="286:110">()</argument_list></call></expr></argument>, <argument pos:start="286:113" pos:end="286:131"><expr pos:start="286:113" pos:end="286:131"><call pos:start="286:113" pos:end="286:131"><name pos:start="286:113" pos:end="286:129"><name pos:start="286:113" pos:end="286:123">currLineSeg</name><operator pos:start="286:124" pos:end="286:124">.</operator><name pos:start="286:125" pos:end="286:129">getY1</name></name><argument_list pos:start="286:130" pos:end="286:131">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="286:135" pos:end="286:151"><expr pos:start="286:135" pos:end="286:151"><name pos:start="286:135" pos:end="286:151">intersectionPoint</name></expr></argument>)</argument_list></call><operator pos:start="286:153" pos:end="286:153">)</operator>
									<operator pos:start="287:73" pos:end="287:73">-</operator> <operator pos:start="287:75" pos:end="287:75">(</operator><name pos:start="287:76" pos:end="287:88">otherDistance</name> <operator pos:start="287:90" pos:end="287:90">+</operator> <call pos:start="287:92" pos:end="288:170"><name pos:start="287:92" pos:end="287:121"><name pos:start="287:92" pos:end="287:99">Geometry</name><operator pos:start="287:100" pos:end="287:100">.</operator><name pos:start="287:101" pos:end="287:121">findCartesianDistance</name></name><argument_list pos:start="287:122" pos:end="288:170">(
											<argument pos:start="288:89" pos:end="288:150"><expr pos:start="288:89" pos:end="288:150"><operator pos:start="288:89" pos:end="288:91">new</operator> <call pos:start="288:93" pos:end="288:150"><name pos:start="288:93" pos:end="288:106"><name pos:start="288:93" pos:end="288:99">Point2D</name><operator pos:start="288:100" pos:end="288:100">.</operator><name pos:start="288:101" pos:end="288:106">Double</name></name><argument_list pos:start="288:107" pos:end="288:150">(<argument pos:start="288:108" pos:end="288:127"><expr pos:start="288:108" pos:end="288:127"><call pos:start="288:108" pos:end="288:127"><name pos:start="288:108" pos:end="288:125"><name pos:start="288:108" pos:end="288:119">otherLineSeg</name><operator pos:start="288:120" pos:end="288:120">.</operator><name pos:start="288:121" pos:end="288:125">getX1</name></name><argument_list pos:start="288:126" pos:end="288:127">()</argument_list></call></expr></argument>, <argument pos:start="288:130" pos:end="288:149"><expr pos:start="288:130" pos:end="288:149"><call pos:start="288:130" pos:end="288:149"><name pos:start="288:130" pos:end="288:147"><name pos:start="288:130" pos:end="288:141">otherLineSeg</name><operator pos:start="288:142" pos:end="288:142">.</operator><name pos:start="288:143" pos:end="288:147">getY1</name></name><argument_list pos:start="288:148" pos:end="288:149">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="288:153" pos:end="288:169"><expr pos:start="288:153" pos:end="288:169"><name pos:start="288:153" pos:end="288:169">intersectionPoint</name></expr></argument>)</argument_list></call><operator pos:start="288:171" pos:end="288:171">)</operator></expr></argument>)</argument_list></call> <operator pos:start="288:174" pos:end="288:174">&lt;</operator> <literal type="number" pos:start="288:176" pos:end="288:177">10</literal></expr>)</condition> <block pos:start="288:180" pos:end="295:57">{<block_content pos:start="294:65" pos:end="294:80">
								<comment type="block" pos:start="289:65" pos:end="293:67">/*
								 * System.out.println(Geometry.findLineIntersection(currLineSeg, otherLineSeg)); System.out.println("currLineSeg: " + "[" + currLineSeg.getX1() + ", " + currLineSeg.getX2() + "] [" +
								 * currLineSeg.getY1() + ", " + currLineSeg.getY2() +"]"); System.out.println("otherLineSeg: " + "[" + otherLineSeg.getX1() + ", " + otherLineSeg.getX2() + "] [" + otherLineSeg.getY1()
								 * + ", " + otherLineSeg.getY2() +"]"); System.out.println("currDistance: " + currDistance); System.out.println("otherDistance: " + otherDistance);
								 */</comment>
								<expr_stmt pos:start="294:65" pos:end="294:80"><expr pos:start="294:65" pos:end="294:79"><name pos:start="294:65" pos:end="294:74">collisions</name> <operator pos:start="294:76" pos:end="294:77">+=</operator> <literal type="number" pos:start="294:79" pos:end="294:79">1</literal></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt pos:start="297:49" pos:end="297:140"><expr pos:start="297:49" pos:end="297:139"><name pos:start="297:49" pos:end="297:61">otherDistance</name> <operator pos:start="297:63" pos:end="297:64">+=</operator> <call pos:start="297:66" pos:end="297:139"><name pos:start="297:66" pos:end="297:95"><name pos:start="297:66" pos:end="297:73">Geometry</name><operator pos:start="297:74" pos:end="297:74">.</operator><name pos:start="297:75" pos:end="297:95">findCartesianDistance</name></name><argument_list pos:start="297:96" pos:end="297:139">(<argument pos:start="297:97" pos:end="297:114"><expr pos:start="297:97" pos:end="297:114"><call pos:start="297:97" pos:end="297:114"><name pos:start="297:97" pos:end="297:110"><name pos:start="297:97" pos:end="297:106">otherRoute</name><operator pos:start="297:107" pos:end="297:107">.</operator><name pos:start="297:108" pos:end="297:110">get</name></name><argument_list pos:start="297:111" pos:end="297:114">(<argument pos:start="297:112" pos:end="297:113"><expr pos:start="297:112" pos:end="297:113"><name pos:start="297:112" pos:end="297:113">r2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="297:117" pos:end="297:138"><expr pos:start="297:117" pos:end="297:138"><call pos:start="297:117" pos:end="297:138"><name pos:start="297:117" pos:end="297:130"><name pos:start="297:117" pos:end="297:126">otherRoute</name><operator pos:start="297:127" pos:end="297:127">.</operator><name pos:start="297:128" pos:end="297:130">get</name></name><argument_list pos:start="297:131" pos:end="297:138">(<argument pos:start="297:132" pos:end="297:137"><expr pos:start="297:132" pos:end="297:137"><name pos:start="297:132" pos:end="297:133">r2</name> <operator pos:start="297:135" pos:end="297:135">+</operator> <literal type="number" pos:start="297:137" pos:end="297:137">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<expr_stmt pos:start="300:41" pos:end="300:127"><expr pos:start="300:41" pos:end="300:126"><name pos:start="300:41" pos:end="300:52">currDistance</name> <operator pos:start="300:54" pos:end="300:55">+=</operator> <call pos:start="300:57" pos:end="300:126"><name pos:start="300:57" pos:end="300:86"><name pos:start="300:57" pos:end="300:64">Geometry</name><operator pos:start="300:65" pos:end="300:65">.</operator><name pos:start="300:66" pos:end="300:86">findCartesianDistance</name></name><argument_list pos:start="300:87" pos:end="300:126">(<argument pos:start="300:88" pos:end="300:103"><expr pos:start="300:88" pos:end="300:103"><call pos:start="300:88" pos:end="300:103"><name pos:start="300:88" pos:end="300:100"><name pos:start="300:88" pos:end="300:96">currRoute</name><operator pos:start="300:97" pos:end="300:97">.</operator><name pos:start="300:98" pos:end="300:100">get</name></name><argument_list pos:start="300:101" pos:end="300:103">(<argument pos:start="300:102" pos:end="300:102"><expr pos:start="300:102" pos:end="300:102"><name pos:start="300:102" pos:end="300:102">r</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="300:106" pos:end="300:125"><expr pos:start="300:106" pos:end="300:125"><call pos:start="300:106" pos:end="300:125"><name pos:start="300:106" pos:end="300:118"><name pos:start="300:106" pos:end="300:114">currRoute</name><operator pos:start="300:115" pos:end="300:115">.</operator><name pos:start="300:116" pos:end="300:118">get</name></name><argument_list pos:start="300:119" pos:end="300:125">(<argument pos:start="300:120" pos:end="300:124"><expr pos:start="300:120" pos:end="300:124"><name pos:start="300:120" pos:end="300:120">r</name> <operator pos:start="300:122" pos:end="300:122">+</operator> <literal type="number" pos:start="300:124" pos:end="300:124">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<return pos:start="304:17" pos:end="304:34">return <expr pos:start="304:24" pos:end="304:33"><name pos:start="304:24" pos:end="304:33">collisions</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="307:9" pos:end="319:9"><type pos:start="307:9" pos:end="307:29"><specifier pos:start="307:9" pos:end="307:14">public</specifier> <specifier pos:start="307:16" pos:end="307:21">static</specifier> <name pos:start="307:23" pos:end="307:29">boolean</name></type> <name pos:start="307:31" pos:end="307:57">routeAssignmentOutsideRiver</name><parameter_list pos:start="307:58" pos:end="308:48">(<parameter pos:start="307:59" pos:end="307:89"><decl pos:start="307:59" pos:end="307:89"><type pos:start="307:59" pos:end="307:89"><name pos:start="307:59" pos:end="307:78">DroneRouteAssignment</name></type> <name pos:start="307:80" pos:end="307:89">assignment</name></decl></parameter>, <parameter pos:start="307:92" pos:end="307:117"><decl pos:start="307:92" pos:end="307:117"><type pos:start="307:92" pos:end="307:117"><name pos:start="307:92" pos:end="307:104"><name pos:start="307:92" pos:end="307:97">Path2D</name><operator pos:start="307:98" pos:end="307:98">.</operator><name pos:start="307:99" pos:end="307:104">Double</name></name></type> <name pos:start="307:106" pos:end="307:117">riverSegment</name></decl></parameter>,
			<parameter pos:start="308:25" pos:end="308:47"><decl pos:start="308:25" pos:end="308:47"><type pos:start="308:25" pos:end="308:47"><name pos:start="308:25" pos:end="308:30">double</name></type> <name pos:start="308:32" pos:end="308:47">APERATURE_HEIGHT</name></decl></parameter>)</parameter_list> <block pos:start="308:50" pos:end="319:9">{<block_content pos:start="309:17" pos:end="318:36">
		<decl_stmt pos:start="309:17" pos:end="309:45"><decl pos:start="309:17" pos:end="309:44"><type pos:start="309:17" pos:end="309:23"><name pos:start="309:17" pos:end="309:23">boolean</name></type> <name pos:start="309:25" pos:end="309:36">outsideRiver</name> <init pos:start="309:38" pos:end="309:44">= <expr pos:start="309:40" pos:end="309:44"><literal type="boolean" pos:start="309:40" pos:end="309:44">false</literal></expr></init></decl>;</decl_stmt>
		<for pos:start="310:17" pos:end="317:17">for <control pos:start="310:21" pos:end="310:69">(<init pos:start="310:22" pos:end="310:31"><decl pos:start="310:22" pos:end="310:30"><type pos:start="310:22" pos:end="310:24"><name pos:start="310:22" pos:end="310:24">int</name></type> <name pos:start="310:26" pos:end="310:26">i</name> <init pos:start="310:28" pos:end="310:30">= <expr pos:start="310:30" pos:end="310:30"><literal type="number" pos:start="310:30" pos:end="310:30">0</literal></expr></init></decl>;</init> <condition pos:start="310:33" pos:end="310:64"><expr pos:start="310:33" pos:end="310:63"><name pos:start="310:33" pos:end="310:33">i</name> <operator pos:start="310:35" pos:end="310:35">&lt;</operator> <call pos:start="310:37" pos:end="310:52"><name pos:start="310:37" pos:end="310:50"><name pos:start="310:37" pos:end="310:46">assignment</name><operator pos:start="310:47" pos:end="310:47">.</operator><name pos:start="310:48" pos:end="310:50">get</name></name><argument_list pos:start="310:51" pos:end="310:52">()</argument_list></call><operator pos:start="310:53" pos:end="310:53">.</operator><call pos:start="310:54" pos:end="310:59"><name pos:start="310:54" pos:end="310:57">size</name><argument_list pos:start="310:58" pos:end="310:59">()</argument_list></call> <operator pos:start="310:61" pos:end="310:61">-</operator> <literal type="number" pos:start="310:63" pos:end="310:63">1</literal></expr>;</condition> <incr pos:start="310:66" pos:end="310:68"><expr pos:start="310:66" pos:end="310:68"><name pos:start="310:66" pos:end="310:66">i</name><operator pos:start="310:67" pos:end="310:68">++</operator></expr></incr>)</control> <block pos:start="310:71" pos:end="317:17">{<block_content pos:start="311:25" pos:end="316:25">
			<decl_stmt pos:start="311:25" pos:end="311:89"><decl pos:start="311:25" pos:end="311:88"><type pos:start="311:25" pos:end="311:38"><name pos:start="311:25" pos:end="311:38"><name pos:start="311:25" pos:end="311:31">Point2D</name><operator pos:start="311:32" pos:end="311:32">.</operator><name pos:start="311:33" pos:end="311:38">Double</name></name></type> <name pos:start="311:40" pos:end="311:49">startPoint</name> <init pos:start="311:51" pos:end="311:88">= <expr pos:start="311:53" pos:end="311:88"><call pos:start="311:53" pos:end="311:69"><name pos:start="311:53" pos:end="311:66"><name pos:start="311:53" pos:end="311:62">assignment</name><operator pos:start="311:63" pos:end="311:63">.</operator><name pos:start="311:64" pos:end="311:66">get</name></name><argument_list pos:start="311:67" pos:end="311:69">(<argument pos:start="311:68" pos:end="311:68"><expr pos:start="311:68" pos:end="311:68"><name pos:start="311:68" pos:end="311:68">i</name></expr></argument>)</argument_list></call><operator pos:start="311:70" pos:end="311:70">.</operator><call pos:start="311:71" pos:end="311:88"><name pos:start="311:71" pos:end="311:86">getRouteEndPoint</name><argument_list pos:start="311:87" pos:end="311:88">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt pos:start="312:25" pos:end="312:93"><decl pos:start="312:25" pos:end="312:92"><type pos:start="312:25" pos:end="312:38"><name pos:start="312:25" pos:end="312:38"><name pos:start="312:25" pos:end="312:31">Point2D</name><operator pos:start="312:32" pos:end="312:32">.</operator><name pos:start="312:33" pos:end="312:38">Double</name></name></type> <name pos:start="312:40" pos:end="312:47">endPoint</name> <init pos:start="312:49" pos:end="312:92">= <expr pos:start="312:51" pos:end="312:92"><call pos:start="312:51" pos:end="312:71"><name pos:start="312:51" pos:end="312:64"><name pos:start="312:51" pos:end="312:60">assignment</name><operator pos:start="312:61" pos:end="312:61">.</operator><name pos:start="312:62" pos:end="312:64">get</name></name><argument_list pos:start="312:65" pos:end="312:71">(<argument pos:start="312:66" pos:end="312:70"><expr pos:start="312:66" pos:end="312:70"><name pos:start="312:66" pos:end="312:66">i</name> <operator pos:start="312:68" pos:end="312:68">+</operator> <literal type="number" pos:start="312:70" pos:end="312:70">1</literal></expr></argument>)</argument_list></call><operator pos:start="312:72" pos:end="312:72">.</operator><call pos:start="312:73" pos:end="312:92"><name pos:start="312:73" pos:end="312:90">getRouteStartPoint</name><argument_list pos:start="312:91" pos:end="312:92">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt pos:start="313:25" pos:end="313:116"><expr pos:start="313:25" pos:end="313:115"><name pos:start="313:25" pos:end="313:36">outsideRiver</name> <operator pos:start="313:38" pos:end="313:38">=</operator> <call pos:start="313:40" pos:end="313:115"><name pos:start="313:40" pos:end="313:61">transitionOutsideRiver</name><argument_list pos:start="313:62" pos:end="313:115">(<argument pos:start="313:63" pos:end="313:72"><expr pos:start="313:63" pos:end="313:72"><name pos:start="313:63" pos:end="313:72">startPoint</name></expr></argument>, <argument pos:start="313:75" pos:end="313:82"><expr pos:start="313:75" pos:end="313:82"><name pos:start="313:75" pos:end="313:82">endPoint</name></expr></argument>, <argument pos:start="313:85" pos:end="313:96"><expr pos:start="313:85" pos:end="313:96"><name pos:start="313:85" pos:end="313:96">riverSegment</name></expr></argument>, <argument pos:start="313:99" pos:end="313:114"><expr pos:start="313:99" pos:end="313:114"><name pos:start="313:99" pos:end="313:114">APERATURE_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt pos:start="314:25" pos:end="316:25"><if pos:start="314:25" pos:end="316:25">if <condition pos:start="314:28" pos:end="314:41">(<expr pos:start="314:29" pos:end="314:40"><name pos:start="314:29" pos:end="314:40">outsideRiver</name></expr>)</condition> <block pos:start="314:43" pos:end="316:25">{<block_content pos:start="315:33" pos:end="315:38">
				<break pos:start="315:33" pos:end="315:38">break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<return pos:start="318:17" pos:end="318:36">return <expr pos:start="318:24" pos:end="318:35"><name pos:start="318:24" pos:end="318:35">outsideRiver</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="line" pos:start="321:9" pos:end="321:120">// assumes it will never be going outside the river if the transition is less than an APERATURE_HEIGHT in length</comment>

	<function pos:start="323:9" pos:end="340:9"><type pos:start="323:9" pos:end="323:30"><specifier pos:start="323:9" pos:end="323:15">private</specifier> <specifier pos:start="323:17" pos:end="323:22">static</specifier> <name pos:start="323:24" pos:end="323:30">boolean</name></type> <name pos:start="323:32" pos:end="323:53">transitionOutsideRiver</name><parameter_list pos:start="323:54" pos:end="324:76">(<parameter pos:start="323:55" pos:end="323:79"><decl pos:start="323:55" pos:end="323:79"><type pos:start="323:55" pos:end="323:79"><name pos:start="323:55" pos:end="323:68"><name pos:start="323:55" pos:end="323:61">Point2D</name><operator pos:start="323:62" pos:end="323:62">.</operator><name pos:start="323:63" pos:end="323:68">Double</name></name></type> <name pos:start="323:70" pos:end="323:79">startPoint</name></decl></parameter>, <parameter pos:start="323:82" pos:end="323:104"><decl pos:start="323:82" pos:end="323:104"><type pos:start="323:82" pos:end="323:104"><name pos:start="323:82" pos:end="323:95"><name pos:start="323:82" pos:end="323:88">Point2D</name><operator pos:start="323:89" pos:end="323:89">.</operator><name pos:start="323:90" pos:end="323:95">Double</name></name></type> <name pos:start="323:97" pos:end="323:104">endPoint</name></decl></parameter>,
			<parameter pos:start="324:25" pos:end="324:50"><decl pos:start="324:25" pos:end="324:50"><type pos:start="324:25" pos:end="324:50"><name pos:start="324:25" pos:end="324:37"><name pos:start="324:25" pos:end="324:30">Path2D</name><operator pos:start="324:31" pos:end="324:31">.</operator><name pos:start="324:32" pos:end="324:37">Double</name></name></type> <name pos:start="324:39" pos:end="324:50">riverSegment</name></decl></parameter>, <parameter pos:start="324:53" pos:end="324:75"><decl pos:start="324:53" pos:end="324:75"><type pos:start="324:53" pos:end="324:75"><name pos:start="324:53" pos:end="324:58">double</name></type> <name pos:start="324:60" pos:end="324:75">APERATURE_HEIGHT</name></decl></parameter>)</parameter_list> <block pos:start="324:78" pos:end="340:9">{<block_content pos:start="325:17" pos:end="339:36">
		<decl_stmt pos:start="325:17" pos:end="325:45"><decl pos:start="325:17" pos:end="325:44"><type pos:start="325:17" pos:end="325:23"><name pos:start="325:17" pos:end="325:23">boolean</name></type> <name pos:start="325:25" pos:end="325:36">outsideRiver</name> <init pos:start="325:38" pos:end="325:44">= <expr pos:start="325:40" pos:end="325:44"><literal type="boolean" pos:start="325:40" pos:end="325:44">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="326:17" pos:end="326:92"><decl pos:start="326:17" pos:end="326:91"><type pos:start="326:17" pos:end="326:22"><name pos:start="326:17" pos:end="326:22">double</name></type> <name pos:start="326:24" pos:end="326:36">totalDistance</name> <init pos:start="326:38" pos:end="326:91">= <expr pos:start="326:40" pos:end="326:91"><call pos:start="326:40" pos:end="326:91"><name pos:start="326:40" pos:end="326:69"><name pos:start="326:40" pos:end="326:47">Geometry</name><operator pos:start="326:48" pos:end="326:48">.</operator><name pos:start="326:49" pos:end="326:69">findCartesianDistance</name></name><argument_list pos:start="326:70" pos:end="326:91">(<argument pos:start="326:71" pos:end="326:80"><expr pos:start="326:71" pos:end="326:80"><name pos:start="326:71" pos:end="326:80">startPoint</name></expr></argument>, <argument pos:start="326:83" pos:end="326:90"><expr pos:start="326:83" pos:end="326:90"><name pos:start="326:83" pos:end="326:90">endPoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="327:17" pos:end="327:72"><decl pos:start="327:17" pos:end="327:71"><type pos:start="327:17" pos:end="327:22"><name pos:start="327:17" pos:end="327:22">double</name></type> <name pos:start="327:24" pos:end="327:36">distanceRatio</name> <init pos:start="327:38" pos:end="327:71">= <expr pos:start="327:40" pos:end="327:71"><name pos:start="327:40" pos:end="327:55">APERATURE_HEIGHT</name> <operator pos:start="327:57" pos:end="327:57">/</operator> <name pos:start="327:59" pos:end="327:71">totalDistance</name></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="328:17" pos:end="330:17"><if pos:start="328:17" pos:end="330:17">if <condition pos:start="328:20" pos:end="328:53">(<expr pos:start="328:21" pos:end="328:52"><name pos:start="328:21" pos:end="328:33">totalDistance</name> <operator pos:start="328:35" pos:end="328:35">&lt;</operator> <name pos:start="328:37" pos:end="328:52">APERATURE_HEIGHT</name></expr>)</condition> <block pos:start="328:55" pos:end="330:17">{<block_content pos:start="329:25" pos:end="329:44">
			<return pos:start="329:25" pos:end="329:44">return <expr pos:start="329:32" pos:end="329:43"><name pos:start="329:32" pos:end="329:43">outsideRiver</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<while pos:start="331:17" pos:end="338:17">while <condition pos:start="331:23" pos:end="331:56">(<expr pos:start="331:24" pos:end="331:55"><name pos:start="331:24" pos:end="331:39">APERATURE_HEIGHT</name> <operator pos:start="331:41" pos:end="331:41">&lt;</operator> <name pos:start="331:43" pos:end="331:55">totalDistance</name></expr>)</condition> <block pos:start="331:58" pos:end="338:17">{<block_content pos:start="332:25" pos:end="337:73">
			<decl_stmt pos:start="332:25" pos:end="332:112"><decl pos:start="332:25" pos:end="332:111"><type pos:start="332:25" pos:end="332:38"><name pos:start="332:25" pos:end="332:38"><name pos:start="332:25" pos:end="332:31">Point2D</name><operator pos:start="332:32" pos:end="332:32">.</operator><name pos:start="332:33" pos:end="332:38">Double</name></name></type> <name pos:start="332:40" pos:end="332:47">newPoint</name> <init pos:start="332:49" pos:end="332:111">= <expr pos:start="332:51" pos:end="332:111"><call pos:start="332:51" pos:end="332:111"><name pos:start="332:51" pos:end="332:74"><name pos:start="332:51" pos:end="332:58">Geometry</name><operator pos:start="332:59" pos:end="332:59">.</operator><name pos:start="332:60" pos:end="332:74">findOffsetPoint</name></name><argument_list pos:start="332:75" pos:end="332:111">(<argument pos:start="332:76" pos:end="332:85"><expr pos:start="332:76" pos:end="332:85"><name pos:start="332:76" pos:end="332:85">startPoint</name></expr></argument>, <argument pos:start="332:88" pos:end="332:95"><expr pos:start="332:88" pos:end="332:95"><name pos:start="332:88" pos:end="332:95">endPoint</name></expr></argument>, <argument pos:start="332:98" pos:end="332:110"><expr pos:start="332:98" pos:end="332:110"><name pos:start="332:98" pos:end="332:110">distanceRatio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt pos:start="333:25" pos:end="335:25"><if pos:start="333:25" pos:end="335:25">if <condition pos:start="333:28" pos:end="333:61">(<expr pos:start="333:29" pos:end="333:60"><operator pos:start="333:29" pos:end="333:29">!</operator><call pos:start="333:30" pos:end="333:60"><name pos:start="333:30" pos:end="333:50"><name pos:start="333:30" pos:end="333:41">riverSegment</name><operator pos:start="333:42" pos:end="333:42">.</operator><name pos:start="333:43" pos:end="333:50">contains</name></name><argument_list pos:start="333:51" pos:end="333:60">(<argument pos:start="333:52" pos:end="333:59"><expr pos:start="333:52" pos:end="333:59"><name pos:start="333:52" pos:end="333:59">newPoint</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="333:63" pos:end="335:25">{<block_content pos:start="334:33" pos:end="334:44">
				<return pos:start="334:33" pos:end="334:44">return <expr pos:start="334:40" pos:end="334:43"><literal type="boolean" pos:start="334:40" pos:end="334:43">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt pos:start="336:25" pos:end="336:46"><expr pos:start="336:25" pos:end="336:45"><name pos:start="336:25" pos:end="336:34">startPoint</name> <operator pos:start="336:36" pos:end="336:36">=</operator> <name pos:start="336:38" pos:end="336:45">newPoint</name></expr>;</expr_stmt>
			<expr_stmt pos:start="337:25" pos:end="337:73"><expr pos:start="337:25" pos:end="337:72"><name pos:start="337:25" pos:end="337:37">totalDistance</name> <operator pos:start="337:39" pos:end="337:39">=</operator> <name pos:start="337:41" pos:end="337:53">totalDistance</name> <operator pos:start="337:55" pos:end="337:55">-</operator> <name pos:start="337:57" pos:end="337:72">APERATURE_HEIGHT</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<return pos:start="339:17" pos:end="339:36">return <expr pos:start="339:24" pos:end="339:35"><name pos:start="339:24" pos:end="339:35">outsideRiver</name></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>
