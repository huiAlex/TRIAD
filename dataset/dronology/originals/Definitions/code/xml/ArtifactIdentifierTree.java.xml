<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/ArtifactIdentifierTree.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:41">package <name pos:start="1:9" pos:end="1:40"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:35">monitoring</name><operator pos:start="1:36" pos:end="1:36">.</operator><name pos:start="1:37" pos:end="1:40">tree</name></name>;</package>

<import pos:start="3:1" pos:end="3:28">import <name pos:start="3:8" pos:end="3:27"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:16">util</name><operator pos:start="3:17" pos:end="3:17">.</operator><name pos:start="3:18" pos:end="3:27">Collection</name></name>;</import>
<import pos:start="4:1" pos:end="4:29">import <name pos:start="4:8" pos:end="4:28"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:16">util</name><operator pos:start="4:17" pos:end="4:17">.</operator><name pos:start="4:18" pos:end="4:28">Collections</name></name>;</import>
<import pos:start="5:1" pos:end="5:25">import <name pos:start="5:8" pos:end="5:24"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:16">util</name><operator pos:start="5:17" pos:end="5:17">.</operator><name pos:start="5:18" pos:end="5:24">HashSet</name></name>;</import>
<import pos:start="6:1" pos:end="6:27">import <name pos:start="6:8" pos:end="6:26"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:16">util</name><operator pos:start="6:17" pos:end="6:17">.</operator><name pos:start="6:18" pos:end="6:20">Map</name><operator pos:start="6:21" pos:end="6:21">.</operator><name pos:start="6:22" pos:end="6:26">Entry</name></name>;</import>
<import pos:start="7:1" pos:end="7:21">import <name pos:start="7:8" pos:end="7:20"><name pos:start="7:8" pos:end="7:11">java</name><operator pos:start="7:12" pos:end="7:12">.</operator><name pos:start="7:13" pos:end="7:16">util</name><operator pos:start="7:17" pos:end="7:17">.</operator><name pos:start="7:18" pos:end="7:20">Set</name></name>;</import>

<import pos:start="9:1" pos:end="9:59">import <name pos:start="9:8" pos:end="9:58"><name pos:start="9:8" pos:end="9:10">edu</name><operator pos:start="9:11" pos:end="9:11">.</operator><name pos:start="9:12" pos:end="9:13">nd</name><operator pos:start="9:14" pos:end="9:14">.</operator><name pos:start="9:15" pos:end="9:23">dronology</name><operator pos:start="9:24" pos:end="9:24">.</operator><name pos:start="9:25" pos:end="9:28">core</name><operator pos:start="9:29" pos:end="9:29">.</operator><name pos:start="9:30" pos:end="9:39">monitoring</name><operator pos:start="9:40" pos:end="9:40">.</operator><name pos:start="9:41" pos:end="9:58">ArtifactIdentifier</name></name>;</import>
<import pos:start="10:1" pos:end="10:38">import <name pos:start="10:8" pos:end="10:37"><name pos:start="10:8" pos:end="10:10">edu</name><operator pos:start="10:11" pos:end="10:11">.</operator><name pos:start="10:12" pos:end="10:13">nd</name><operator pos:start="10:14" pos:end="10:14">.</operator><name pos:start="10:15" pos:end="10:23">dronology</name><operator pos:start="10:24" pos:end="10:24">.</operator><name pos:start="10:25" pos:end="10:28">util</name><operator pos:start="10:29" pos:end="10:29">.</operator><name pos:start="10:30" pos:end="10:37">NullUtil</name></name>;</import>

<comment type="block" format="javadoc" pos:start="12:1" pos:end="17:3">/**
 * Based on the structure of {@link ArtifactIdentifier} builds up a tree of the "id parts".
 * 
 * @author Michael Vierhauser
 * 
 */</comment>

<class pos:start="19:1" pos:end="179:1"><specifier pos:start="19:1" pos:end="19:6">public</specifier> class <name pos:start="19:14" pos:end="19:35">ArtifactIdentifierTree</name> <block pos:start="19:37" pos:end="179:1">{

	<decl_stmt pos:start="21:9" pos:end="21:36"><decl pos:start="21:9" pos:end="21:35"><type pos:start="21:9" pos:end="21:30"><specifier pos:start="21:9" pos:end="21:15">private</specifier> <specifier pos:start="21:17" pos:end="21:21">final</specifier> <name pos:start="21:23" pos:end="21:30">TreeNode</name></type> <name pos:start="21:32" pos:end="21:35">root</name></decl>;</decl_stmt>

	<constructor pos:start="23:9" pos:end="28:9"><specifier pos:start="23:9" pos:end="23:14">public</specifier> <name pos:start="23:16" pos:end="23:37">ArtifactIdentifierTree</name><parameter_list pos:start="23:38" pos:end="23:68">(<parameter pos:start="23:39" pos:end="23:67"><decl pos:start="23:39" pos:end="23:67"><type pos:start="23:39" pos:end="23:62"><specifier pos:start="23:39" pos:end="23:43">final</specifier> <name pos:start="23:45" pos:end="23:62">ArtifactIdentifier</name></type> <name pos:start="23:64" pos:end="23:67">root</name></decl></parameter>)</parameter_list> <block pos:start="23:70" pos:end="28:9">{<block_content pos:start="24:17" pos:end="27:47">
		<if_stmt pos:start="24:17" pos:end="26:17"><if pos:start="24:17" pos:end="26:17">if <condition pos:start="24:20" pos:end="24:33">(<expr pos:start="24:21" pos:end="24:32"><name pos:start="24:21" pos:end="24:24">root</name> <operator pos:start="24:26" pos:end="24:27">==</operator> <literal type="null" pos:start="24:29" pos:end="24:32">null</literal></expr>)</condition> <block pos:start="24:35" pos:end="26:17">{<block_content pos:start="25:25" pos:end="25:92">
			<throw pos:start="25:25" pos:end="25:92">throw <expr pos:start="25:31" pos:end="25:91"><operator pos:start="25:31" pos:end="25:33">new</operator> <call pos:start="25:35" pos:end="25:91"><name pos:start="25:35" pos:end="25:58">IllegalArgumentException</name><argument_list pos:start="25:59" pos:end="25:91">(<argument pos:start="25:60" pos:end="25:90"><expr pos:start="25:60" pos:end="25:90"><literal type="string" pos:start="25:60" pos:end="25:90">"Parameter root can't be null!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="27:17" pos:end="27:47"><expr pos:start="27:17" pos:end="27:46"><name pos:start="27:17" pos:end="27:25"><name pos:start="27:17" pos:end="27:20">this</name><operator pos:start="27:21" pos:end="27:21">.</operator><name pos:start="27:22" pos:end="27:25">root</name></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <operator pos:start="27:29" pos:end="27:31">new</operator> <call pos:start="27:33" pos:end="27:46"><name pos:start="27:33" pos:end="27:40">TreeNode</name><argument_list pos:start="27:41" pos:end="27:46">(<argument pos:start="27:42" pos:end="27:45"><expr pos:start="27:42" pos:end="27:45"><name pos:start="27:42" pos:end="27:45">root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function pos:start="30:9" pos:end="32:9"><type pos:start="30:9" pos:end="30:19"><specifier pos:start="30:9" pos:end="30:14">public</specifier> <name pos:start="30:16" pos:end="30:19">void</name></type> <name pos:start="30:21" pos:end="30:25">clear</name><parameter_list pos:start="30:26" pos:end="30:27">()</parameter_list> <block pos:start="30:29" pos:end="32:9">{<block_content pos:start="31:17" pos:end="31:29">
		<expr_stmt pos:start="31:17" pos:end="31:29"><expr pos:start="31:17" pos:end="31:28"><call pos:start="31:17" pos:end="31:28"><name pos:start="31:17" pos:end="31:26"><name pos:start="31:17" pos:end="31:20">root</name><operator pos:start="31:21" pos:end="31:21">.</operator><name pos:start="31:22" pos:end="31:26">clear</name></name><argument_list pos:start="31:27" pos:end="31:28">()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="34:9" pos:end="38:11">/**
	 * Will add id to the tree by creating appropriate child elements, enabling {@link #getAllRelatedIdentifier(ArtifactIdentifier)}.
	 * 
	 * @param id
	 */</comment>
	<function pos:start="39:9" pos:end="42:9"><type pos:start="39:9" pos:end="39:19"><specifier pos:start="39:9" pos:end="39:14">public</specifier> <name pos:start="39:16" pos:end="39:19">void</name></type> <name pos:start="39:21" pos:end="39:23">add</name><parameter_list pos:start="39:24" pos:end="39:52">(<parameter pos:start="39:25" pos:end="39:51"><decl pos:start="39:25" pos:end="39:51"><type pos:start="39:25" pos:end="39:48"><specifier pos:start="39:25" pos:end="39:29">final</specifier> <name pos:start="39:31" pos:end="39:48">ArtifactIdentifier</name></type> <name pos:start="39:50" pos:end="39:51">id</name></decl></parameter>)</parameter_list> <block pos:start="39:54" pos:end="42:9">{<block_content pos:start="40:17" pos:end="41:34">
		<expr_stmt pos:start="40:17" pos:end="40:39"><expr pos:start="40:17" pos:end="40:38"><call pos:start="40:17" pos:end="40:38"><name pos:start="40:17" pos:end="40:34"><name pos:start="40:17" pos:end="40:24">NullUtil</name><operator pos:start="40:25" pos:end="40:25">.</operator><name pos:start="40:26" pos:end="40:34">checkNull</name></name><argument_list pos:start="40:35" pos:end="40:38">(<argument pos:start="40:36" pos:end="40:37"><expr pos:start="40:36" pos:end="40:37"><name pos:start="40:36" pos:end="40:37">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="41:17" pos:end="41:34"><expr pos:start="41:17" pos:end="41:33"><call pos:start="41:17" pos:end="41:33"><name pos:start="41:17" pos:end="41:19">add</name><argument_list pos:start="41:20" pos:end="41:33">(<argument pos:start="41:21" pos:end="41:24"><expr pos:start="41:21" pos:end="41:24"><name pos:start="41:21" pos:end="41:24">root</name></expr></argument>, <argument pos:start="41:27" pos:end="41:28"><expr pos:start="41:27" pos:end="41:28"><name pos:start="41:27" pos:end="41:28">id</name></expr></argument>, <argument pos:start="41:31" pos:end="41:32"><expr pos:start="41:31" pos:end="41:32"><name pos:start="41:31" pos:end="41:32">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="44:9" pos:end="54:11">/**
	 * Will step-wise create child elements based on the part-ids of "current".
	 * 
	 * @param parent
	 *          Node has to exist already.
	 * @param source
	 *          The original full identifier.
	 * @param current
	 *          The currently remaining id parts to be mapped into the tree.
	 * @return The next-step child node to the id.
	 */</comment>
	<function pos:start="55:9" pos:end="67:9"><type pos:start="55:9" pos:end="55:24"><specifier pos:start="55:9" pos:end="55:15">private</specifier> <name pos:start="55:17" pos:end="55:24">TreeNode</name></type> <name pos:start="55:26" pos:end="55:28">add</name><parameter_list pos:start="55:29" pos:end="55:100">(<parameter pos:start="55:30" pos:end="55:44"><decl pos:start="55:30" pos:end="55:44"><type pos:start="55:30" pos:end="55:44"><name pos:start="55:30" pos:end="55:37">TreeNode</name></type> <name pos:start="55:39" pos:end="55:44">parent</name></decl></parameter>, <parameter pos:start="55:47" pos:end="55:71"><decl pos:start="55:47" pos:end="55:71"><type pos:start="55:47" pos:end="55:71"><name pos:start="55:47" pos:end="55:64">ArtifactIdentifier</name></type> <name pos:start="55:66" pos:end="55:71">source</name></decl></parameter>, <parameter pos:start="55:74" pos:end="55:99"><decl pos:start="55:74" pos:end="55:99"><type pos:start="55:74" pos:end="55:99"><name pos:start="55:74" pos:end="55:91">ArtifactIdentifier</name></type> <name pos:start="55:93" pos:end="55:99">current</name></decl></parameter>)</parameter_list> <block pos:start="55:102" pos:end="67:9">{<block_content pos:start="56:17" pos:end="66:29">
		<expr_stmt pos:start="56:17" pos:end="56:52"><expr pos:start="56:17" pos:end="56:51"><call pos:start="56:17" pos:end="56:51"><name pos:start="56:17" pos:end="56:34"><name pos:start="56:17" pos:end="56:24">NullUtil</name><operator pos:start="56:25" pos:end="56:25">.</operator><name pos:start="56:26" pos:end="56:34">checkNull</name></name><argument_list pos:start="56:35" pos:end="56:51">(<argument pos:start="56:36" pos:end="56:41"><expr pos:start="56:36" pos:end="56:41"><name pos:start="56:36" pos:end="56:41">parent</name></expr></argument>, <argument pos:start="56:44" pos:end="56:50"><expr pos:start="56:44" pos:end="56:50"><name pos:start="56:44" pos:end="56:50">current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:start="57:17" pos:end="57:66">// Construct an ident only from the first id part.</comment>
		<decl_stmt pos:start="58:17" pos:end="58:81"><decl pos:start="58:17" pos:end="58:80"><type pos:start="58:17" pos:end="58:34"><name pos:start="58:17" pos:end="58:34">ArtifactIdentifier</name></type> <name pos:start="58:36" pos:end="58:38">art</name> <init pos:start="58:40" pos:end="58:80">= <expr pos:start="58:42" pos:end="58:80"><operator pos:start="58:42" pos:end="58:44">new</operator> <call pos:start="58:46" pos:end="58:80"><name pos:start="58:46" pos:end="58:63">ArtifactIdentifier</name><argument_list pos:start="58:64" pos:end="58:80">(<argument pos:start="58:65" pos:end="58:79"><expr pos:start="58:65" pos:end="58:79"><call pos:start="58:65" pos:end="58:79"><name pos:start="58:65" pos:end="58:77"><name pos:start="58:65" pos:end="58:71">current</name><operator pos:start="58:72" pos:end="58:72">.</operator><name pos:start="58:73" pos:end="58:77">getId</name></name><argument_list pos:start="58:78" pos:end="58:79">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:start="59:17" pos:end="59:82">// Get an existing or create a new child node for this identifier.</comment>
		<decl_stmt pos:start="60:17" pos:end="60:54"><decl pos:start="60:17" pos:end="60:53"><type pos:start="60:17" pos:end="60:24"><name pos:start="60:17" pos:end="60:24">TreeNode</name></type> <name pos:start="60:26" pos:end="60:30">child</name> <init pos:start="60:32" pos:end="60:53">= <expr pos:start="60:34" pos:end="60:53"><call pos:start="60:34" pos:end="60:53"><name pos:start="60:34" pos:end="60:48"><name pos:start="60:34" pos:end="60:39">parent</name><operator pos:start="60:40" pos:end="60:40">.</operator><name pos:start="60:41" pos:end="60:48">getChild</name></name><argument_list pos:start="60:49" pos:end="60:53">(<argument pos:start="60:50" pos:end="60:52"><expr pos:start="60:50" pos:end="60:52"><name pos:start="60:50" pos:end="60:52">art</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="61:17" pos:end="64:17"><if pos:start="61:17" pos:end="64:17">if <condition pos:start="61:20" pos:end="61:47">(<expr pos:start="61:21" pos:end="61:46"><call pos:start="61:21" pos:end="61:38"><name pos:start="61:21" pos:end="61:36"><name pos:start="61:21" pos:end="61:27">current</name><operator pos:start="61:28" pos:end="61:28">.</operator><name pos:start="61:29" pos:end="61:36">getChild</name></name><argument_list pos:start="61:37" pos:end="61:38">()</argument_list></call> <operator pos:start="61:40" pos:end="61:41">!=</operator> <literal type="null" pos:start="61:43" pos:end="61:46">null</literal></expr>)</condition> <block pos:start="61:49" pos:end="64:17">{<block_content pos:start="63:25" pos:end="63:70">
			<comment type="line" pos:start="62:25" pos:end="62:58">// If the id has more child parts.</comment>
			<return pos:start="63:25" pos:end="63:70">return <expr pos:start="63:32" pos:end="63:69"><call pos:start="63:32" pos:end="63:69"><name pos:start="63:32" pos:end="63:34">add</name><argument_list pos:start="63:35" pos:end="63:69">(<argument pos:start="63:36" pos:end="63:40"><expr pos:start="63:36" pos:end="63:40"><name pos:start="63:36" pos:end="63:40">child</name></expr></argument>, <argument pos:start="63:43" pos:end="63:48"><expr pos:start="63:43" pos:end="63:48"><name pos:start="63:43" pos:end="63:48">source</name></expr></argument>, <argument pos:start="63:51" pos:end="63:68"><expr pos:start="63:51" pos:end="63:68"><call pos:start="63:51" pos:end="63:68"><name pos:start="63:51" pos:end="63:66"><name pos:start="63:51" pos:end="63:57">current</name><operator pos:start="63:58" pos:end="63:58">.</operator><name pos:start="63:59" pos:end="63:66">getChild</name></name><argument_list pos:start="63:67" pos:end="63:68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="65:17" pos:end="65:41"><expr pos:start="65:17" pos:end="65:40"><call pos:start="65:17" pos:end="65:40"><name pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:21">child</name><operator pos:start="65:22" pos:end="65:22">.</operator><name pos:start="65:23" pos:end="65:32">addElement</name></name><argument_list pos:start="65:33" pos:end="65:40">(<argument pos:start="65:34" pos:end="65:39"><expr pos:start="65:34" pos:end="65:39"><name pos:start="65:34" pos:end="65:39">source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="66:17" pos:end="66:29">return <expr pos:start="66:24" pos:end="66:28"><name pos:start="66:24" pos:end="66:28">child</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="69:9" pos:end="73:11">/**
	 * 
	 * @param id
	 * @return All {@link ArtifactIdentifier} currently in the tree and children of the given id.
	 */</comment>
	<function pos:start="74:9" pos:end="79:9"><type pos:start="74:9" pos:end="74:38"><specifier pos:start="74:9" pos:end="74:14">public</specifier> <name pos:start="74:16" pos:end="74:38"><name pos:start="74:16" pos:end="74:18">Set</name><argument_list type="generic" pos:start="74:19" pos:end="74:38">&lt;<argument pos:start="74:20" pos:end="74:37"><name pos:start="74:20" pos:end="74:37">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="74:40" pos:end="74:62">getAllRelatedIdentifier</name><parameter_list pos:start="74:63" pos:end="74:85">(<parameter pos:start="74:64" pos:end="74:84"><decl pos:start="74:64" pos:end="74:84"><type pos:start="74:64" pos:end="74:81"><name pos:start="74:64" pos:end="74:81">ArtifactIdentifier</name></type> <name pos:start="74:83" pos:end="74:84">id</name></decl></parameter>)</parameter_list> <block pos:start="74:87" pos:end="79:9">{<block_content pos:start="75:17" pos:end="78:45">
		<expr_stmt pos:start="75:17" pos:end="75:39"><expr pos:start="75:17" pos:end="75:38"><call pos:start="75:17" pos:end="75:38"><name pos:start="75:17" pos:end="75:34"><name pos:start="75:17" pos:end="75:24">NullUtil</name><operator pos:start="75:25" pos:end="75:25">.</operator><name pos:start="75:26" pos:end="75:34">checkNull</name></name><argument_list pos:start="75:35" pos:end="75:38">(<argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="76:17" pos:end="76:24"><expr pos:start="76:17" pos:end="76:23"><call pos:start="76:17" pos:end="76:23"><name pos:start="76:17" pos:end="76:19">add</name><argument_list pos:start="76:20" pos:end="76:23">(<argument pos:start="76:21" pos:end="76:22"><expr pos:start="76:21" pos:end="76:22"><name pos:start="76:21" pos:end="76:22">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt pos:start="77:17" pos:end="77:117"><decl pos:start="77:17" pos:end="77:116"><type pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:24">TreeNode</name></type> <name pos:start="77:26" pos:end="77:33">matching</name> <init pos:start="77:35" pos:end="77:116">= <expr pos:start="77:37" pos:end="77:116"><call pos:start="77:37" pos:end="77:116"><name pos:start="77:37" pos:end="77:52">findMatchingNode</name><argument_list pos:start="77:53" pos:end="77:116">(<argument pos:start="77:54" pos:end="77:111"><expr pos:start="77:54" pos:end="77:111"><call pos:start="77:54" pos:end="77:71"><name pos:start="77:54" pos:end="77:69"><name pos:start="77:54" pos:end="77:57">root</name><operator pos:start="77:58" pos:end="77:58">.</operator><name pos:start="77:59" pos:end="77:69">getChildren</name></name><argument_list pos:start="77:70" pos:end="77:71">()</argument_list></call><operator pos:start="77:72" pos:end="77:72">.</operator><call pos:start="77:73" pos:end="77:111"><name pos:start="77:73" pos:end="77:75">get</name><argument_list pos:start="77:76" pos:end="77:111">(<argument pos:start="77:77" pos:end="77:110"><expr pos:start="77:77" pos:end="77:110"><operator pos:start="77:77" pos:end="77:79">new</operator> <call pos:start="77:81" pos:end="77:110"><name pos:start="77:81" pos:end="77:98">ArtifactIdentifier</name><argument_list pos:start="77:99" pos:end="77:110">(<argument pos:start="77:100" pos:end="77:109"><expr pos:start="77:100" pos:end="77:109"><call pos:start="77:100" pos:end="77:109"><name pos:start="77:100" pos:end="77:107"><name pos:start="77:100" pos:end="77:101">id</name><operator pos:start="77:102" pos:end="77:102">.</operator><name pos:start="77:103" pos:end="77:107">getId</name></name><argument_list pos:start="77:108" pos:end="77:109">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:114" pos:end="77:115"><expr pos:start="77:114" pos:end="77:115"><name pos:start="77:114" pos:end="77:115">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="78:17" pos:end="78:45">return <expr pos:start="78:24" pos:end="78:44"><call pos:start="78:24" pos:end="78:44"><name pos:start="78:24" pos:end="78:34">getChildren</name><argument_list pos:start="78:35" pos:end="78:44">(<argument pos:start="78:36" pos:end="78:43"><expr pos:start="78:36" pos:end="78:43"><name pos:start="78:36" pos:end="78:43">matching</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="81:9" pos:end="85:11">/**
	 * 
	 * @param id
	 * @return All {@link ArtifactIdentifier} currently in the tree and children of the given id.
	 */</comment>
	<function pos:start="86:9" pos:end="91:9"><type pos:start="86:9" pos:end="86:38"><specifier pos:start="86:9" pos:end="86:14">public</specifier> <name pos:start="86:16" pos:end="86:38"><name pos:start="86:16" pos:end="86:18">Set</name><argument_list type="generic" pos:start="86:19" pos:end="86:38">&lt;<argument pos:start="86:20" pos:end="86:37"><name pos:start="86:20" pos:end="86:37">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="86:40" pos:end="86:49">getParents</name><parameter_list pos:start="86:50" pos:end="86:72">(<parameter pos:start="86:51" pos:end="86:71"><decl pos:start="86:51" pos:end="86:71"><type pos:start="86:51" pos:end="86:68"><name pos:start="86:51" pos:end="86:68">ArtifactIdentifier</name></type> <name pos:start="86:70" pos:end="86:71">id</name></decl></parameter>)</parameter_list> <block pos:start="86:74" pos:end="91:9">{<block_content pos:start="87:17" pos:end="90:43">
		<expr_stmt pos:start="87:17" pos:end="87:39"><expr pos:start="87:17" pos:end="87:38"><call pos:start="87:17" pos:end="87:38"><name pos:start="87:17" pos:end="87:34"><name pos:start="87:17" pos:end="87:24">NullUtil</name><operator pos:start="87:25" pos:end="87:25">.</operator><name pos:start="87:26" pos:end="87:34">checkNull</name></name><argument_list pos:start="87:35" pos:end="87:38">(<argument pos:start="87:36" pos:end="87:37"><expr pos:start="87:36" pos:end="87:37"><name pos:start="87:36" pos:end="87:37">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="88:17" pos:end="88:24"><expr pos:start="88:17" pos:end="88:23"><call pos:start="88:17" pos:end="88:23"><name pos:start="88:17" pos:end="88:19">add</name><argument_list pos:start="88:20" pos:end="88:23">(<argument pos:start="88:21" pos:end="88:22"><expr pos:start="88:21" pos:end="88:22"><name pos:start="88:21" pos:end="88:22">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt pos:start="89:17" pos:end="89:117"><decl pos:start="89:17" pos:end="89:116"><type pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:24">TreeNode</name></type> <name pos:start="89:26" pos:end="89:33">matching</name> <init pos:start="89:35" pos:end="89:116">= <expr pos:start="89:37" pos:end="89:116"><call pos:start="89:37" pos:end="89:116"><name pos:start="89:37" pos:end="89:52">findMatchingNode</name><argument_list pos:start="89:53" pos:end="89:116">(<argument pos:start="89:54" pos:end="89:111"><expr pos:start="89:54" pos:end="89:111"><call pos:start="89:54" pos:end="89:71"><name pos:start="89:54" pos:end="89:69"><name pos:start="89:54" pos:end="89:57">root</name><operator pos:start="89:58" pos:end="89:58">.</operator><name pos:start="89:59" pos:end="89:69">getChildren</name></name><argument_list pos:start="89:70" pos:end="89:71">()</argument_list></call><operator pos:start="89:72" pos:end="89:72">.</operator><call pos:start="89:73" pos:end="89:111"><name pos:start="89:73" pos:end="89:75">get</name><argument_list pos:start="89:76" pos:end="89:111">(<argument pos:start="89:77" pos:end="89:110"><expr pos:start="89:77" pos:end="89:110"><operator pos:start="89:77" pos:end="89:79">new</operator> <call pos:start="89:81" pos:end="89:110"><name pos:start="89:81" pos:end="89:98">ArtifactIdentifier</name><argument_list pos:start="89:99" pos:end="89:110">(<argument pos:start="89:100" pos:end="89:109"><expr pos:start="89:100" pos:end="89:109"><call pos:start="89:100" pos:end="89:109"><name pos:start="89:100" pos:end="89:107"><name pos:start="89:100" pos:end="89:101">id</name><operator pos:start="89:102" pos:end="89:102">.</operator><name pos:start="89:103" pos:end="89:107">getId</name></name><argument_list pos:start="89:108" pos:end="89:109">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:114" pos:end="89:115"><expr pos:start="89:114" pos:end="89:115"><name pos:start="89:114" pos:end="89:115">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="90:17" pos:end="90:43">return <expr pos:start="90:24" pos:end="90:42"><call pos:start="90:24" pos:end="90:42"><name pos:start="90:24" pos:end="90:32">getParent</name><argument_list pos:start="90:33" pos:end="90:42">(<argument pos:start="90:34" pos:end="90:41"><expr pos:start="90:34" pos:end="90:41"><name pos:start="90:34" pos:end="90:41">matching</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="93:9" pos:end="101:9"><type pos:start="93:9" pos:end="93:39"><specifier pos:start="93:9" pos:end="93:15">private</specifier> <name pos:start="93:17" pos:end="93:39"><name pos:start="93:17" pos:end="93:19">Set</name><argument_list type="generic" pos:start="93:20" pos:end="93:39">&lt;<argument pos:start="93:21" pos:end="93:38"><name pos:start="93:21" pos:end="93:38">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="93:41" pos:end="93:49">getParent</name><parameter_list pos:start="93:50" pos:end="93:68">(<parameter pos:start="93:51" pos:end="93:67"><decl pos:start="93:51" pos:end="93:67"><type pos:start="93:51" pos:end="93:58"><name pos:start="93:51" pos:end="93:58">TreeNode</name></type> <name pos:start="93:60" pos:end="93:67">matching</name></decl></parameter>)</parameter_list> <block pos:start="93:70" pos:end="101:9">{<block_content pos:start="94:17" pos:end="99:31">
		<decl_stmt pos:start="94:17" pos:end="94:66"><decl pos:start="94:17" pos:end="94:65"><type pos:start="94:17" pos:end="94:39"><name pos:start="94:17" pos:end="94:39"><name pos:start="94:17" pos:end="94:19">Set</name><argument_list type="generic" pos:start="94:20" pos:end="94:39">&lt;<argument pos:start="94:21" pos:end="94:38"><name pos:start="94:21" pos:end="94:38">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="94:41" pos:end="94:47">matches</name> <init pos:start="94:49" pos:end="94:65">= <expr pos:start="94:51" pos:end="94:65"><operator pos:start="94:51" pos:end="94:53">new</operator> <call pos:start="94:55" pos:end="94:65"><name pos:start="94:55" pos:end="94:63"><name pos:start="94:55" pos:end="94:61">HashSet</name><argument_list type="generic" pos:start="94:62" pos:end="94:63">&lt;&gt;</argument_list></name><argument_list pos:start="94:64" pos:end="94:65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="95:17" pos:end="97:17"><if pos:start="95:17" pos:end="97:17">if <condition pos:start="95:20" pos:end="95:37">(<expr pos:start="95:21" pos:end="95:36"><name pos:start="95:21" pos:end="95:28">matching</name> <operator pos:start="95:30" pos:end="95:31">==</operator> <name pos:start="95:33" pos:end="95:36">root</name></expr>)</condition> <block pos:start="95:39" pos:end="97:17">{<block_content pos:start="96:25" pos:end="96:39">
			<return pos:start="96:25" pos:end="96:39">return <expr pos:start="96:32" pos:end="96:38"><name pos:start="96:32" pos:end="96:38">matches</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="98:17" pos:end="98:45"><expr pos:start="98:17" pos:end="98:44"><call pos:start="98:17" pos:end="98:44"><name pos:start="98:17" pos:end="98:25">getParent</name><argument_list pos:start="98:26" pos:end="98:44">(<argument pos:start="98:27" pos:end="98:34"><expr pos:start="98:27" pos:end="98:34"><name pos:start="98:27" pos:end="98:34">matching</name></expr></argument>, <argument pos:start="98:37" pos:end="98:43"><expr pos:start="98:37" pos:end="98:43"><name pos:start="98:37" pos:end="98:43">matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="99:17" pos:end="99:31">return <expr pos:start="99:24" pos:end="99:30"><name pos:start="99:24" pos:end="99:30">matches</name></expr>;</return>

	</block_content>}</block></function>

	<function pos:start="103:9" pos:end="109:9"><type pos:start="103:9" pos:end="103:20"><specifier pos:start="103:9" pos:end="103:15">private</specifier> <name pos:start="103:17" pos:end="103:20">void</name></type> <name pos:start="103:22" pos:end="103:30">getParent</name><parameter_list pos:start="103:31" pos:end="103:78">(<parameter pos:start="103:32" pos:end="103:44"><decl pos:start="103:32" pos:end="103:44"><type pos:start="103:32" pos:end="103:44"><name pos:start="103:32" pos:end="103:39">TreeNode</name></type> <name pos:start="103:41" pos:end="103:44">node</name></decl></parameter>, <parameter pos:start="103:47" pos:end="103:77"><decl pos:start="103:47" pos:end="103:77"><type pos:start="103:47" pos:end="103:77"><name pos:start="103:47" pos:end="103:69"><name pos:start="103:47" pos:end="103:49">Set</name><argument_list type="generic" pos:start="103:50" pos:end="103:69">&lt;<argument pos:start="103:51" pos:end="103:68"><name pos:start="103:51" pos:end="103:68">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="103:71" pos:end="103:77">matches</name></decl></parameter>)</parameter_list> <block pos:start="103:80" pos:end="109:9">{<block_content pos:start="104:17" pos:end="108:53">
		<if_stmt pos:start="104:17" pos:end="106:17"><if pos:start="104:17" pos:end="106:17">if <condition pos:start="104:20" pos:end="104:33">(<expr pos:start="104:21" pos:end="104:32"><name pos:start="104:21" pos:end="104:24">node</name> <operator pos:start="104:26" pos:end="104:27">==</operator> <name pos:start="104:29" pos:end="104:32">root</name></expr>)</condition> <block pos:start="104:35" pos:end="106:17">{<block_content pos:start="105:25" pos:end="105:31">
			<return pos:start="105:25" pos:end="105:31">return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="107:17" pos:end="107:51"><expr pos:start="107:17" pos:end="107:50"><call pos:start="107:17" pos:end="107:50"><name pos:start="107:17" pos:end="107:30"><name pos:start="107:17" pos:end="107:23">matches</name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:30">addAll</name></name><argument_list pos:start="107:31" pos:end="107:50">(<argument pos:start="107:32" pos:end="107:49"><expr pos:start="107:32" pos:end="107:49"><call pos:start="107:32" pos:end="107:49"><name pos:start="107:32" pos:end="107:47"><name pos:start="107:32" pos:end="107:35">node</name><operator pos:start="107:36" pos:end="107:36">.</operator><name pos:start="107:37" pos:end="107:47">getElements</name></name><argument_list pos:start="107:48" pos:end="107:49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="108:17" pos:end="108:53"><expr pos:start="108:17" pos:end="108:52"><call pos:start="108:17" pos:end="108:52"><name pos:start="108:17" pos:end="108:25">getParent</name><argument_list pos:start="108:26" pos:end="108:52">(<argument pos:start="108:27" pos:end="108:42"><expr pos:start="108:27" pos:end="108:42"><call pos:start="108:27" pos:end="108:42"><name pos:start="108:27" pos:end="108:40"><name pos:start="108:27" pos:end="108:30">node</name><operator pos:start="108:31" pos:end="108:31">.</operator><name pos:start="108:32" pos:end="108:40">getParent</name></name><argument_list pos:start="108:41" pos:end="108:42">()</argument_list></call></expr></argument>, <argument pos:start="108:45" pos:end="108:51"><expr pos:start="108:45" pos:end="108:51"><name pos:start="108:45" pos:end="108:51">matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="111:9" pos:end="115:11">/**
	 * 
	 * @param matching
	 * @return Unmodifiable set-copy of all identifiers of all {@link TreeNode#getElements()} of all child treenodes of matching.
	 */</comment>
	<function pos:start="116:9" pos:end="126:9"><type pos:start="116:9" pos:end="116:39"><specifier pos:start="116:9" pos:end="116:15">private</specifier> <name pos:start="116:17" pos:end="116:39"><name pos:start="116:17" pos:end="116:19">Set</name><argument_list type="generic" pos:start="116:20" pos:end="116:39">&lt;<argument pos:start="116:21" pos:end="116:38"><name pos:start="116:21" pos:end="116:38">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="116:41" pos:end="116:51">getChildren</name><parameter_list pos:start="116:52" pos:end="116:70">(<parameter pos:start="116:53" pos:end="116:69"><decl pos:start="116:53" pos:end="116:69"><type pos:start="116:53" pos:end="116:60"><name pos:start="116:53" pos:end="116:60">TreeNode</name></type> <name pos:start="116:62" pos:end="116:69">matching</name></decl></parameter>)</parameter_list> <block pos:start="116:72" pos:end="126:9">{<block_content pos:start="117:17" pos:end="125:60">
		<expr_stmt pos:start="117:17" pos:end="117:45"><expr pos:start="117:17" pos:end="117:44"><call pos:start="117:17" pos:end="117:44"><name pos:start="117:17" pos:end="117:34"><name pos:start="117:17" pos:end="117:24">NullUtil</name><operator pos:start="117:25" pos:end="117:25">.</operator><name pos:start="117:26" pos:end="117:34">checkNull</name></name><argument_list pos:start="117:35" pos:end="117:44">(<argument pos:start="117:36" pos:end="117:43"><expr pos:start="117:36" pos:end="117:43"><name pos:start="117:36" pos:end="117:43">matching</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt pos:start="118:17" pos:end="118:66"><decl pos:start="118:17" pos:end="118:65"><type pos:start="118:17" pos:end="118:39"><name pos:start="118:17" pos:end="118:39"><name pos:start="118:17" pos:end="118:19">Set</name><argument_list type="generic" pos:start="118:20" pos:end="118:39">&lt;<argument pos:start="118:21" pos:end="118:38"><name pos:start="118:21" pos:end="118:38">ArtifactIdentifier</name></argument>&gt;</argument_list></name></type> <name pos:start="118:41" pos:end="118:47">matches</name> <init pos:start="118:49" pos:end="118:65">= <expr pos:start="118:51" pos:end="118:65"><operator pos:start="118:51" pos:end="118:53">new</operator> <call pos:start="118:55" pos:end="118:65"><name pos:start="118:55" pos:end="118:63"><name pos:start="118:55" pos:end="118:61">HashSet</name><argument_list type="generic" pos:start="118:62" pos:end="118:63">&lt;&gt;</argument_list></name><argument_list pos:start="118:64" pos:end="118:65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:start="119:17" pos:end="119:51">// Add all elements from this node.</comment>
		<expr_stmt pos:start="120:17" pos:end="120:55"><expr pos:start="120:17" pos:end="120:54"><call pos:start="120:17" pos:end="120:54"><name pos:start="120:17" pos:end="120:30"><name pos:start="120:17" pos:end="120:23">matches</name><operator pos:start="120:24" pos:end="120:24">.</operator><name pos:start="120:25" pos:end="120:30">addAll</name></name><argument_list pos:start="120:31" pos:end="120:54">(<argument pos:start="120:32" pos:end="120:53"><expr pos:start="120:32" pos:end="120:53"><call pos:start="120:32" pos:end="120:53"><name pos:start="120:32" pos:end="120:51"><name pos:start="120:32" pos:end="120:39">matching</name><operator pos:start="120:40" pos:end="120:40">.</operator><name pos:start="120:41" pos:end="120:51">getElements</name></name><argument_list pos:start="120:52" pos:end="120:53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:start="121:17" pos:end="121:69">// Recursively add all elements from child treenodes.</comment>
		<for pos:start="122:17" pos:end="124:17">for <control pos:start="122:21" pos:end="122:95">(<init pos:start="122:22" pos:end="122:94"><decl pos:start="122:22" pos:end="122:94"><type pos:start="122:22" pos:end="122:56"><name pos:start="122:22" pos:end="122:56"><name pos:start="122:22" pos:end="122:26">Entry</name><argument_list type="generic" pos:start="122:27" pos:end="122:56">&lt;<argument pos:start="122:28" pos:end="122:45"><name pos:start="122:28" pos:end="122:45">ArtifactIdentifier</name></argument>, <argument pos:start="122:48" pos:end="122:55"><name pos:start="122:48" pos:end="122:55">TreeNode</name></argument>&gt;</argument_list></name></type> <name pos:start="122:58" pos:end="122:58">n</name> <range pos:start="122:60" pos:end="122:94">: <expr pos:start="122:62" pos:end="122:94"><call pos:start="122:62" pos:end="122:83"><name pos:start="122:62" pos:end="122:81"><name pos:start="122:62" pos:end="122:69">matching</name><operator pos:start="122:70" pos:end="122:70">.</operator><name pos:start="122:71" pos:end="122:81">getChildren</name></name><argument_list pos:start="122:82" pos:end="122:83">()</argument_list></call><operator pos:start="122:84" pos:end="122:84">.</operator><call pos:start="122:85" pos:end="122:94"><name pos:start="122:85" pos:end="122:92">entrySet</name><argument_list pos:start="122:93" pos:end="122:94">()</argument_list></call></expr></range></decl></init>)</control> <block pos:start="122:97" pos:end="124:17">{<block_content pos:start="123:25" pos:end="123:66">
			<expr_stmt pos:start="123:25" pos:end="123:66"><expr pos:start="123:25" pos:end="123:65"><call pos:start="123:25" pos:end="123:65"><name pos:start="123:25" pos:end="123:38"><name pos:start="123:25" pos:end="123:31">matches</name><operator pos:start="123:32" pos:end="123:32">.</operator><name pos:start="123:33" pos:end="123:38">addAll</name></name><argument_list pos:start="123:39" pos:end="123:65">(<argument pos:start="123:40" pos:end="123:64"><expr pos:start="123:40" pos:end="123:64"><call pos:start="123:40" pos:end="123:64"><name pos:start="123:40" pos:end="123:50">getChildren</name><argument_list pos:start="123:51" pos:end="123:64">(<argument pos:start="123:52" pos:end="123:63"><expr pos:start="123:52" pos:end="123:63"><call pos:start="123:52" pos:end="123:63"><name pos:start="123:52" pos:end="123:61"><name pos:start="123:52" pos:end="123:52">n</name><operator pos:start="123:53" pos:end="123:53">.</operator><name pos:start="123:54" pos:end="123:61">getValue</name></name><argument_list pos:start="123:62" pos:end="123:63">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="125:17" pos:end="125:60">return <expr pos:start="125:24" pos:end="125:59"><call pos:start="125:24" pos:end="125:59"><name pos:start="125:24" pos:end="125:50"><name pos:start="125:24" pos:end="125:34">Collections</name><operator pos:start="125:35" pos:end="125:35">.</operator><name pos:start="125:36" pos:end="125:50">unmodifiableSet</name></name><argument_list pos:start="125:51" pos:end="125:59">(<argument pos:start="125:52" pos:end="125:58"><expr pos:start="125:52" pos:end="125:58"><name pos:start="125:52" pos:end="125:58">matches</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="128:9" pos:end="134:11">/**
	 * Multi-step lookup to find a child/grandchild/etc that exactly matches the id.
	 * 
	 * @param parent
	 * @param id
	 * @return The node corresponding to the id.
	 */</comment>
	<function pos:start="135:9" pos:end="141:9"><type pos:start="135:9" pos:end="135:24"><specifier pos:start="135:9" pos:end="135:15">private</specifier> <name pos:start="135:17" pos:end="135:24">TreeNode</name></type> <name pos:start="135:26" pos:end="135:41">findMatchingNode</name><parameter_list pos:start="135:42" pos:end="135:81">(<parameter pos:start="135:43" pos:end="135:57"><decl pos:start="135:43" pos:end="135:57"><type pos:start="135:43" pos:end="135:57"><name pos:start="135:43" pos:end="135:50">TreeNode</name></type> <name pos:start="135:52" pos:end="135:57">parent</name></decl></parameter>, <parameter pos:start="135:60" pos:end="135:80"><decl pos:start="135:60" pos:end="135:80"><type pos:start="135:60" pos:end="135:80"><name pos:start="135:60" pos:end="135:77">ArtifactIdentifier</name></type> <name pos:start="135:79" pos:end="135:80">id</name></decl></parameter>)</parameter_list> <block pos:start="135:83" pos:end="141:9">{<block_content pos:start="136:17" pos:end="140:89">
		<if_stmt pos:start="136:17" pos:end="138:17"><if pos:start="136:17" pos:end="138:17">if <condition pos:start="136:20" pos:end="136:42">(<expr pos:start="136:21" pos:end="136:41"><call pos:start="136:21" pos:end="136:33"><name pos:start="136:21" pos:end="136:31"><name pos:start="136:21" pos:end="136:22">id</name><operator pos:start="136:23" pos:end="136:23">.</operator><name pos:start="136:24" pos:end="136:31">getChild</name></name><argument_list pos:start="136:32" pos:end="136:33">()</argument_list></call> <operator pos:start="136:35" pos:end="136:36">==</operator> <literal type="null" pos:start="136:38" pos:end="136:41">null</literal></expr>)</condition> <block pos:start="136:44" pos:end="138:17">{<block_content pos:start="137:25" pos:end="137:38">
			<return pos:start="137:25" pos:end="137:38">return <expr pos:start="137:32" pos:end="137:37"><name pos:start="137:32" pos:end="137:37">parent</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt pos:start="139:17" pos:end="139:90"><decl pos:start="139:17" pos:end="139:89"><type pos:start="139:17" pos:end="139:34"><name pos:start="139:17" pos:end="139:34">ArtifactIdentifier</name></type> <name pos:start="139:36" pos:end="139:41">newArt</name> <init pos:start="139:43" pos:end="139:89">= <expr pos:start="139:45" pos:end="139:89"><operator pos:start="139:45" pos:end="139:47">new</operator> <call pos:start="139:49" pos:end="139:89"><name pos:start="139:49" pos:end="139:66">ArtifactIdentifier</name><argument_list pos:start="139:67" pos:end="139:89">(<argument pos:start="139:68" pos:end="139:88"><expr pos:start="139:68" pos:end="139:88"><call pos:start="139:68" pos:end="139:80"><name pos:start="139:68" pos:end="139:78"><name pos:start="139:68" pos:end="139:69">id</name><operator pos:start="139:70" pos:end="139:70">.</operator><name pos:start="139:71" pos:end="139:78">getChild</name></name><argument_list pos:start="139:79" pos:end="139:80">()</argument_list></call><operator pos:start="139:81" pos:end="139:81">.</operator><call pos:start="139:82" pos:end="139:88"><name pos:start="139:82" pos:end="139:86">getId</name><argument_list pos:start="139:87" pos:end="139:88">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="140:17" pos:end="140:89">return <expr pos:start="140:24" pos:end="140:88"><call pos:start="140:24" pos:end="140:88"><name pos:start="140:24" pos:end="140:39">findMatchingNode</name><argument_list pos:start="140:40" pos:end="140:88">(<argument pos:start="140:41" pos:end="140:72"><expr pos:start="140:41" pos:end="140:72"><call pos:start="140:41" pos:end="140:60"><name pos:start="140:41" pos:end="140:58"><name pos:start="140:41" pos:end="140:46">parent</name><operator pos:start="140:47" pos:end="140:47">.</operator><name pos:start="140:48" pos:end="140:58">getChildren</name></name><argument_list pos:start="140:59" pos:end="140:60">()</argument_list></call><operator pos:start="140:61" pos:end="140:61">.</operator><call pos:start="140:62" pos:end="140:72"><name pos:start="140:62" pos:end="140:64">get</name><argument_list pos:start="140:65" pos:end="140:72">(<argument pos:start="140:66" pos:end="140:71"><expr pos:start="140:66" pos:end="140:71"><name pos:start="140:66" pos:end="140:71">newArt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="140:75" pos:end="140:87"><expr pos:start="140:75" pos:end="140:87"><call pos:start="140:75" pos:end="140:87"><name pos:start="140:75" pos:end="140:85"><name pos:start="140:75" pos:end="140:76">id</name><operator pos:start="140:77" pos:end="140:77">.</operator><name pos:start="140:78" pos:end="140:85">getChild</name></name><argument_list pos:start="140:86" pos:end="140:87">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="143:9" pos:end="146:9"><annotation pos:start="143:9" pos:end="143:17">@<name pos:start="143:10" pos:end="143:17">Override</name></annotation>
	<type pos:start="144:9" pos:end="144:21"><specifier pos:start="144:9" pos:end="144:14">public</specifier> <name pos:start="144:16" pos:end="144:21">String</name></type> <name pos:start="144:23" pos:end="144:30">toString</name><parameter_list pos:start="144:31" pos:end="144:32">()</parameter_list> <block pos:start="144:34" pos:end="146:9">{<block_content pos:start="145:17" pos:end="145:68">
		<return pos:start="145:17" pos:end="145:68">return <expr pos:start="145:24" pos:end="145:67"><literal type="string" pos:start="145:24" pos:end="145:54">"ArtifactIdentifierTree [root="</literal> <operator pos:start="145:56" pos:end="145:56">+</operator> <name pos:start="145:58" pos:end="145:61">root</name> <operator pos:start="145:63" pos:end="145:63">+</operator> <literal type="string" pos:start="145:65" pos:end="145:67">"]"</literal></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="148:9" pos:end="150:11">/**
	 * Log some diagnostic output.
	 */</comment>
	<function pos:start="151:9" pos:end="154:9"><annotation pos:start="151:9" pos:end="151:35">@<name pos:start="151:10" pos:end="151:25">SuppressWarnings</name><argument_list pos:start="151:26" pos:end="151:35">(<argument pos:start="151:27" pos:end="151:34"><expr pos:start="151:27" pos:end="151:34"><literal type="string" pos:start="151:27" pos:end="151:34">"unused"</literal></expr></argument>)</argument_list></annotation>
	<type pos:start="152:9" pos:end="152:20"><specifier pos:start="152:9" pos:end="152:15">private</specifier> <name pos:start="152:17" pos:end="152:20">void</name></type> <name pos:start="152:22" pos:end="152:26">toLog</name><parameter_list pos:start="152:27" pos:end="152:28">()</parameter_list> <block pos:start="152:30" pos:end="154:9">{<block_content pos:start="153:17" pos:end="153:29">
		<expr_stmt pos:start="153:17" pos:end="153:29"><expr pos:start="153:17" pos:end="153:28"><call pos:start="153:17" pos:end="153:28"><name pos:start="153:17" pos:end="153:26"><name pos:start="153:17" pos:end="153:20">root</name><operator pos:start="153:21" pos:end="153:21">.</operator><name pos:start="153:22" pos:end="153:26">toLog</name></name><argument_list pos:start="153:27" pos:end="153:28">()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>


	<function pos:start="157:9" pos:end="163:9"><type pos:start="157:9" pos:end="157:19"><specifier pos:start="157:9" pos:end="157:14">public</specifier> <name pos:start="157:16" pos:end="157:19">void</name></type> <name pos:start="157:21" pos:end="157:26">remove</name><parameter_list pos:start="157:27" pos:end="157:49">(<parameter pos:start="157:28" pos:end="157:48"><decl pos:start="157:28" pos:end="157:48"><type pos:start="157:28" pos:end="157:45"><name pos:start="157:28" pos:end="157:45">ArtifactIdentifier</name></type> <name pos:start="157:47" pos:end="157:48">id</name></decl></parameter>)</parameter_list> <block pos:start="157:51" pos:end="163:9">{<block_content pos:start="158:17" pos:end="161:17">
		<decl_stmt pos:start="158:17" pos:end="158:59"><decl pos:start="158:17" pos:end="158:58"><type pos:start="158:17" pos:end="158:24"><name pos:start="158:17" pos:end="158:24">TreeNode</name></type> <name pos:start="158:26" pos:end="158:29">node</name> <init pos:start="158:31" pos:end="158:58">= <expr pos:start="158:33" pos:end="158:58"><call pos:start="158:33" pos:end="158:58"><name pos:start="158:33" pos:end="158:48">findMatchingNode</name><argument_list pos:start="158:49" pos:end="158:58">(<argument pos:start="158:50" pos:end="158:53"><expr pos:start="158:50" pos:end="158:53"><name pos:start="158:50" pos:end="158:53">root</name></expr></argument>, <argument pos:start="158:56" pos:end="158:57"><expr pos:start="158:56" pos:end="158:57"><name pos:start="158:56" pos:end="158:57">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="159:17" pos:end="161:17"><if pos:start="159:17" pos:end="161:17">if <condition pos:start="159:20" pos:end="159:95">(<expr pos:start="159:21" pos:end="159:94"><name pos:start="159:21" pos:end="159:24">node</name> <operator pos:start="159:26" pos:end="159:27">!=</operator> <literal type="null" pos:start="159:29" pos:end="159:32">null</literal> <operator pos:start="159:34" pos:end="159:35">&amp;&amp;</operator> <call pos:start="159:37" pos:end="159:54"><name pos:start="159:37" pos:end="159:52"><name pos:start="159:37" pos:end="159:40">node</name><operator pos:start="159:41" pos:end="159:41">.</operator><name pos:start="159:42" pos:end="159:52">getChildren</name></name><argument_list pos:start="159:53" pos:end="159:54">()</argument_list></call><operator pos:start="159:55" pos:end="159:55">.</operator><call pos:start="159:56" pos:end="159:61"><name pos:start="159:56" pos:end="159:59">size</name><argument_list pos:start="159:60" pos:end="159:61">()</argument_list></call> <operator pos:start="159:63" pos:end="159:64">==</operator> <literal type="number" pos:start="159:66" pos:end="159:66">0</literal> <operator pos:start="159:68" pos:end="159:69">&amp;&amp;</operator> <call pos:start="159:71" pos:end="159:86"><name pos:start="159:71" pos:end="159:84"><name pos:start="159:71" pos:end="159:74">node</name><operator pos:start="159:75" pos:end="159:75">.</operator><name pos:start="159:76" pos:end="159:84">getParent</name></name><argument_list pos:start="159:85" pos:end="159:86">()</argument_list></call> <operator pos:start="159:88" pos:end="159:89">!=</operator> <literal type="null" pos:start="159:91" pos:end="159:94">null</literal></expr>)</condition> <block pos:start="159:97" pos:end="161:17">{<block_content pos:start="160:25" pos:end="160:54">
			<expr_stmt pos:start="160:25" pos:end="160:54"><expr pos:start="160:25" pos:end="160:53"><call pos:start="160:25" pos:end="160:40"><name pos:start="160:25" pos:end="160:38"><name pos:start="160:25" pos:end="160:28">node</name><operator pos:start="160:29" pos:end="160:29">.</operator><name pos:start="160:30" pos:end="160:38">getParent</name></name><argument_list pos:start="160:39" pos:end="160:40">()</argument_list></call><operator pos:start="160:41" pos:end="160:41">.</operator><call pos:start="160:42" pos:end="160:53"><name pos:start="160:42" pos:end="160:47">remove</name><argument_list pos:start="160:48" pos:end="160:53">(<argument pos:start="160:49" pos:end="160:52"><expr pos:start="160:49" pos:end="160:52"><name pos:start="160:49" pos:end="160:52">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></function>

	<function pos:start="165:9" pos:end="169:9"><type pos:start="165:9" pos:end="165:18"><specifier pos:start="165:9" pos:end="165:14">public</specifier> <name pos:start="165:16" pos:end="165:18">int</name></type> <name pos:start="165:20" pos:end="165:23">size</name><parameter_list pos:start="165:24" pos:end="165:25">()</parameter_list> <block pos:start="165:27" pos:end="169:9">{<block_content pos:start="166:17" pos:end="168:28">
		<decl_stmt pos:start="166:17" pos:end="166:29"><decl pos:start="166:17" pos:end="166:28"><type pos:start="166:17" pos:end="166:19"><name pos:start="166:17" pos:end="166:19">int</name></type> <name pos:start="166:21" pos:end="166:24">size</name> <init pos:start="166:26" pos:end="166:28">= <expr pos:start="166:28" pos:end="166:28"><literal type="number" pos:start="166:28" pos:end="166:28">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="167:17" pos:end="167:59"><expr pos:start="167:17" pos:end="167:58"><name pos:start="167:17" pos:end="167:20">size</name> <operator pos:start="167:22" pos:end="167:23">+=</operator> <call pos:start="167:25" pos:end="167:58"><name pos:start="167:25" pos:end="167:29">count</name><argument_list pos:start="167:30" pos:end="167:58">(<argument pos:start="167:31" pos:end="167:57"><expr pos:start="167:31" pos:end="167:57"><call pos:start="167:31" pos:end="167:48"><name pos:start="167:31" pos:end="167:46"><name pos:start="167:31" pos:end="167:34">root</name><operator pos:start="167:35" pos:end="167:35">.</operator><name pos:start="167:36" pos:end="167:46">getChildren</name></name><argument_list pos:start="167:47" pos:end="167:48">()</argument_list></call><operator pos:start="167:49" pos:end="167:49">.</operator><call pos:start="167:50" pos:end="167:57"><name pos:start="167:50" pos:end="167:55">values</name><argument_list pos:start="167:56" pos:end="167:57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="168:17" pos:end="168:28">return <expr pos:start="168:24" pos:end="168:27"><name pos:start="168:24" pos:end="168:27">size</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="171:9" pos:end="178:9"><type pos:start="171:9" pos:end="171:19"><specifier pos:start="171:9" pos:end="171:15">private</specifier> <name pos:start="171:17" pos:end="171:19">int</name></type> <name pos:start="171:21" pos:end="171:25">count</name><parameter_list pos:start="171:26" pos:end="171:54">(<parameter pos:start="171:27" pos:end="171:53"><decl pos:start="171:27" pos:end="171:53"><type pos:start="171:27" pos:end="171:46"><name pos:start="171:27" pos:end="171:46"><name pos:start="171:27" pos:end="171:36">Collection</name><argument_list type="generic" pos:start="171:37" pos:end="171:46">&lt;<argument pos:start="171:38" pos:end="171:45"><name pos:start="171:38" pos:end="171:45">TreeNode</name></argument>&gt;</argument_list></name></type> <name pos:start="171:48" pos:end="171:53">values</name></decl></parameter>)</parameter_list> <block pos:start="171:56" pos:end="178:9">{<block_content pos:start="172:17" pos:end="177:29">
		<decl_stmt pos:start="172:17" pos:end="172:30"><decl pos:start="172:17" pos:end="172:29"><type pos:start="172:17" pos:end="172:19"><name pos:start="172:17" pos:end="172:19">int</name></type> <name pos:start="172:21" pos:end="172:25">count</name> <init pos:start="172:27" pos:end="172:29">= <expr pos:start="172:29" pos:end="172:29"><literal type="number" pos:start="172:29" pos:end="172:29">0</literal></expr></init></decl>;</decl_stmt>
		<for pos:start="173:17" pos:end="176:17">for <control pos:start="173:21" pos:end="173:41">(<init pos:start="173:22" pos:end="173:40"><decl pos:start="173:22" pos:end="173:40"><type pos:start="173:22" pos:end="173:29"><name pos:start="173:22" pos:end="173:29">TreeNode</name></type> <name pos:start="173:31" pos:end="173:31">n</name> <range pos:start="173:33" pos:end="173:40">: <expr pos:start="173:35" pos:end="173:40"><name pos:start="173:35" pos:end="173:40">values</name></expr></range></decl></init>)</control> <block pos:start="173:43" pos:end="176:17">{<block_content pos:start="174:25" pos:end="175:65">
			<expr_stmt pos:start="174:25" pos:end="174:56"><expr pos:start="174:25" pos:end="174:55"><name pos:start="174:25" pos:end="174:29">count</name> <operator pos:start="174:31" pos:end="174:32">+=</operator> <call pos:start="174:34" pos:end="174:48"><name pos:start="174:34" pos:end="174:46"><name pos:start="174:34" pos:end="174:34">n</name><operator pos:start="174:35" pos:end="174:35">.</operator><name pos:start="174:36" pos:end="174:46">getChildren</name></name><argument_list pos:start="174:47" pos:end="174:48">()</argument_list></call><operator pos:start="174:49" pos:end="174:49">.</operator><call pos:start="174:50" pos:end="174:55"><name pos:start="174:50" pos:end="174:53">size</name><argument_list pos:start="174:54" pos:end="174:55">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="175:25" pos:end="175:65"><expr pos:start="175:25" pos:end="175:64"><name pos:start="175:25" pos:end="175:29">count</name> <operator pos:start="175:31" pos:end="175:32">+=</operator> <call pos:start="175:34" pos:end="175:64"><name pos:start="175:34" pos:end="175:38">count</name><argument_list pos:start="175:39" pos:end="175:64">(<argument pos:start="175:40" pos:end="175:63"><expr pos:start="175:40" pos:end="175:63"><call pos:start="175:40" pos:end="175:54"><name pos:start="175:40" pos:end="175:52"><name pos:start="175:40" pos:end="175:40">n</name><operator pos:start="175:41" pos:end="175:41">.</operator><name pos:start="175:42" pos:end="175:52">getChildren</name></name><argument_list pos:start="175:53" pos:end="175:54">()</argument_list></call><operator pos:start="175:55" pos:end="175:55">.</operator><call pos:start="175:56" pos:end="175:63"><name pos:start="175:56" pos:end="175:61">values</name><argument_list pos:start="175:62" pos:end="175:63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return pos:start="177:17" pos:end="177:29">return <expr pos:start="177:24" pos:end="177:28"><name pos:start="177:24" pos:end="177:28">count</name></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>
