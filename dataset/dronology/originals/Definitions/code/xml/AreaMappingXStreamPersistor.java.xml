<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/AreaMappingXStreamPersistor.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:60">package <name pos:start="1:9" pos:end="1:59"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:33">services</name><operator pos:start="1:34" pos:end="1:34">.</operator><name pos:start="1:35" pos:end="1:38">core</name><operator pos:start="1:39" pos:end="1:39">.</operator><name pos:start="1:40" pos:end="1:50">persistence</name><operator pos:start="1:51" pos:end="1:51">.</operator><name pos:start="1:52" pos:end="1:59">internal</name></name>;</package>

<import pos:start="3:1" pos:end="3:35">import <name pos:start="3:8" pos:end="3:34"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:14">io</name><operator pos:start="3:15" pos:end="3:15">.</operator><name pos:start="3:16" pos:end="3:34">BufferedInputStream</name></name>;</import>
<import pos:start="4:1" pos:end="4:36">import <name pos:start="4:8" pos:end="4:35"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:14">io</name><operator pos:start="4:15" pos:end="4:15">.</operator><name pos:start="4:16" pos:end="4:35">BufferedOutputStream</name></name>;</import>
<import pos:start="5:1" pos:end="5:30">import <name pos:start="5:8" pos:end="5:29"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:14">io</name><operator pos:start="5:15" pos:end="5:15">.</operator><name pos:start="5:16" pos:end="5:29">BufferedReader</name></name>;</import>
<import pos:start="6:1" pos:end="6:30">import <name pos:start="6:8" pos:end="6:29"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:14">io</name><operator pos:start="6:15" pos:end="6:15">.</operator><name pos:start="6:16" pos:end="6:29">BufferedWriter</name></name>;</import>
<import pos:start="7:1" pos:end="7:27">import <name pos:start="7:8" pos:end="7:26"><name pos:start="7:8" pos:end="7:11">java</name><operator pos:start="7:12" pos:end="7:12">.</operator><name pos:start="7:13" pos:end="7:14">io</name><operator pos:start="7:15" pos:end="7:15">.</operator><name pos:start="7:16" pos:end="7:26">IOException</name></name>;</import>
<import pos:start="8:1" pos:end="8:27">import <name pos:start="8:8" pos:end="8:26"><name pos:start="8:8" pos:end="8:11">java</name><operator pos:start="8:12" pos:end="8:12">.</operator><name pos:start="8:13" pos:end="8:14">io</name><operator pos:start="8:15" pos:end="8:15">.</operator><name pos:start="8:16" pos:end="8:26">InputStream</name></name>;</import>
<import pos:start="9:1" pos:end="9:33">import <name pos:start="9:8" pos:end="9:32"><name pos:start="9:8" pos:end="9:11">java</name><operator pos:start="9:12" pos:end="9:12">.</operator><name pos:start="9:13" pos:end="9:14">io</name><operator pos:start="9:15" pos:end="9:15">.</operator><name pos:start="9:16" pos:end="9:32">InputStreamReader</name></name>;</import>
<import pos:start="10:1" pos:end="10:28">import <name pos:start="10:8" pos:end="10:27"><name pos:start="10:8" pos:end="10:11">java</name><operator pos:start="10:12" pos:end="10:12">.</operator><name pos:start="10:13" pos:end="10:14">io</name><operator pos:start="10:15" pos:end="10:15">.</operator><name pos:start="10:16" pos:end="10:27">OutputStream</name></name>;</import>
<import pos:start="11:1" pos:end="11:34">import <name pos:start="11:8" pos:end="11:33"><name pos:start="11:8" pos:end="11:11">java</name><operator pos:start="11:12" pos:end="11:12">.</operator><name pos:start="11:13" pos:end="11:14">io</name><operator pos:start="11:15" pos:end="11:15">.</operator><name pos:start="11:16" pos:end="11:33">OutputStreamWriter</name></name>;</import>
<import pos:start="12:1" pos:end="12:32">import <name pos:start="12:8" pos:end="12:31"><name pos:start="12:8" pos:end="12:11">java</name><operator pos:start="12:12" pos:end="12:12">.</operator><name pos:start="12:13" pos:end="12:15">nio</name><operator pos:start="12:16" pos:end="12:16">.</operator><name pos:start="12:17" pos:end="12:23">charset</name><operator pos:start="12:24" pos:end="12:24">.</operator><name pos:start="12:25" pos:end="12:31">Charset</name></name>;</import>
<import pos:start="13:1" pos:end="13:37">import <name pos:start="13:8" pos:end="13:36"><name pos:start="13:8" pos:end="13:11">java</name><operator pos:start="13:12" pos:end="13:12">.</operator><name pos:start="13:13" pos:end="13:16">util</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:20">zip</name><operator pos:start="13:21" pos:end="13:21">.</operator><name pos:start="13:22" pos:end="13:36">GZIPInputStream</name></name>;</import>
<import pos:start="14:1" pos:end="14:38">import <name pos:start="14:8" pos:end="14:37"><name pos:start="14:8" pos:end="14:11">java</name><operator pos:start="14:12" pos:end="14:12">.</operator><name pos:start="14:13" pos:end="14:16">util</name><operator pos:start="14:17" pos:end="14:17">.</operator><name pos:start="14:18" pos:end="14:20">zip</name><operator pos:start="14:21" pos:end="14:21">.</operator><name pos:start="14:22" pos:end="14:37">GZIPOutputStream</name></name>;</import>

<import pos:start="16:1" pos:end="16:40">import <name pos:start="16:8" pos:end="16:39"><name pos:start="16:8" pos:end="16:10">com</name><operator pos:start="16:11" pos:end="16:11">.</operator><name pos:start="16:12" pos:end="16:23">thoughtworks</name><operator pos:start="16:24" pos:end="16:24">.</operator><name pos:start="16:25" pos:end="16:31">xstream</name><operator pos:start="16:32" pos:end="16:32">.</operator><name pos:start="16:33" pos:end="16:39">XStream</name></name>;</import>
<import pos:start="17:1" pos:end="17:49">import <name pos:start="17:8" pos:end="17:48"><name pos:start="17:8" pos:end="17:10">com</name><operator pos:start="17:11" pos:end="17:11">.</operator><name pos:start="17:12" pos:end="17:23">thoughtworks</name><operator pos:start="17:24" pos:end="17:24">.</operator><name pos:start="17:25" pos:end="17:31">xstream</name><operator pos:start="17:32" pos:end="17:32">.</operator><name pos:start="17:33" pos:end="17:34">io</name><operator pos:start="17:35" pos:end="17:35">.</operator><name pos:start="17:36" pos:end="17:38">xml</name><operator pos:start="17:39" pos:end="17:39">.</operator><name pos:start="17:40" pos:end="17:48">XppDriver</name></name>;</import>

<import pos:start="19:1" pos:end="19:57">import <name pos:start="19:8" pos:end="19:56"><name pos:start="19:8" pos:end="19:10">edu</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:13">nd</name><operator pos:start="19:14" pos:end="19:14">.</operator><name pos:start="19:15" pos:end="19:23">dronology</name><operator pos:start="19:24" pos:end="19:24">.</operator><name pos:start="19:25" pos:end="19:32">services</name><operator pos:start="19:33" pos:end="19:33">.</operator><name pos:start="19:34" pos:end="19:37">core</name><operator pos:start="19:38" pos:end="19:38">.</operator><name pos:start="19:39" pos:end="19:43">items</name><operator pos:start="19:44" pos:end="19:44">.</operator><name pos:start="19:45" pos:end="19:56">IAreaMapping</name></name>;</import>
<import pos:start="20:1" pos:end="20:75">import <name pos:start="20:8" pos:end="20:74"><name pos:start="20:8" pos:end="20:10">edu</name><operator pos:start="20:11" pos:end="20:11">.</operator><name pos:start="20:12" pos:end="20:13">nd</name><operator pos:start="20:14" pos:end="20:14">.</operator><name pos:start="20:15" pos:end="20:23">dronology</name><operator pos:start="20:24" pos:end="20:24">.</operator><name pos:start="20:25" pos:end="20:32">services</name><operator pos:start="20:33" pos:end="20:33">.</operator><name pos:start="20:34" pos:end="20:37">core</name><operator pos:start="20:38" pos:end="20:38">.</operator><name pos:start="20:39" pos:end="20:49">persistence</name><operator pos:start="20:50" pos:end="20:50">.</operator><name pos:start="20:51" pos:end="20:74">DronologyPersistenceUtil</name></name>;</import>
<import pos:start="21:1" pos:end="21:70">import <name pos:start="21:8" pos:end="21:69"><name pos:start="21:8" pos:end="21:10">edu</name><operator pos:start="21:11" pos:end="21:11">.</operator><name pos:start="21:12" pos:end="21:13">nd</name><operator pos:start="21:14" pos:end="21:14">.</operator><name pos:start="21:15" pos:end="21:23">dronology</name><operator pos:start="21:24" pos:end="21:24">.</operator><name pos:start="21:25" pos:end="21:32">services</name><operator pos:start="21:33" pos:end="21:33">.</operator><name pos:start="21:34" pos:end="21:37">core</name><operator pos:start="21:38" pos:end="21:38">.</operator><name pos:start="21:39" pos:end="21:49">persistence</name><operator pos:start="21:50" pos:end="21:50">.</operator><name pos:start="21:51" pos:end="21:69">IPersistenceManager</name></name>;</import>
<import pos:start="22:1" pos:end="22:71">import <name pos:start="22:8" pos:end="22:70"><name pos:start="22:8" pos:end="22:10">edu</name><operator pos:start="22:11" pos:end="22:11">.</operator><name pos:start="22:12" pos:end="22:13">nd</name><operator pos:start="22:14" pos:end="22:14">.</operator><name pos:start="22:15" pos:end="22:23">dronology</name><operator pos:start="22:24" pos:end="22:24">.</operator><name pos:start="22:25" pos:end="22:32">services</name><operator pos:start="22:33" pos:end="22:33">.</operator><name pos:start="22:34" pos:end="22:37">core</name><operator pos:start="22:38" pos:end="22:38">.</operator><name pos:start="22:39" pos:end="22:49">persistence</name><operator pos:start="22:50" pos:end="22:50">.</operator><name pos:start="22:51" pos:end="22:70">PersistenceException</name></name>;</import>
<import pos:start="23:1" pos:end="23:30">import <name pos:start="23:8" pos:end="23:29"><name pos:start="23:8" pos:end="23:10">net</name><operator pos:start="23:11" pos:end="23:11">.</operator><name pos:start="23:12" pos:end="23:13">mv</name><operator pos:start="23:14" pos:end="23:14">.</operator><name pos:start="23:15" pos:end="23:21">logging</name><operator pos:start="23:22" pos:end="23:22">.</operator><name pos:start="23:23" pos:end="23:29">ILogger</name></name>;</import>
<import pos:start="24:1" pos:end="24:37">import <name pos:start="24:8" pos:end="24:36"><name pos:start="24:8" pos:end="24:10">net</name><operator pos:start="24:11" pos:end="24:11">.</operator><name pos:start="24:12" pos:end="24:13">mv</name><operator pos:start="24:14" pos:end="24:14">.</operator><name pos:start="24:15" pos:end="24:21">logging</name><operator pos:start="24:22" pos:end="24:22">.</operator><name pos:start="24:23" pos:end="24:36">LoggerProvider</name></name>;</import>

<class pos:start="26:1" pos:end="140:1"><specifier pos:start="26:1" pos:end="26:6">public</specifier> class <name pos:start="26:14" pos:end="26:40">AreaMappingXStreamPersistor</name> <super_list pos:start="26:42" pos:end="26:85"><implements pos:start="26:42" pos:end="26:85">implements <super pos:start="26:53" pos:end="26:85"><name pos:start="26:53" pos:end="26:85"><name pos:start="26:53" pos:end="26:71">IPersistenceManager</name><argument_list type="generic" pos:start="26:72" pos:end="26:85">&lt;<argument pos:start="26:73" pos:end="26:84"><name pos:start="26:73" pos:end="26:84">IAreaMapping</name></argument>&gt;</argument_list></name></super></implements></super_list> <block pos:start="26:87" pos:end="140:1">{

	<decl_stmt pos:start="28:9" pos:end="28:76"><decl pos:start="28:9" pos:end="28:75"><type pos:start="28:9" pos:end="28:36"><specifier pos:start="28:9" pos:end="28:15">private</specifier> <specifier pos:start="28:17" pos:end="28:22">static</specifier> <specifier pos:start="28:24" pos:end="28:28">final</specifier> <name pos:start="28:30" pos:end="28:36">XStream</name></type> <name pos:start="28:38" pos:end="28:44">xstream</name> <init pos:start="28:46" pos:end="28:75">= <expr pos:start="28:48" pos:end="28:75"><operator pos:start="28:48" pos:end="28:50">new</operator> <call pos:start="28:52" pos:end="28:75"><name pos:start="28:52" pos:end="28:58">XStream</name><argument_list pos:start="28:59" pos:end="28:75">(<argument pos:start="28:60" pos:end="28:74"><expr pos:start="28:60" pos:end="28:74"><operator pos:start="28:60" pos:end="28:62">new</operator> <call pos:start="28:64" pos:end="28:74"><name pos:start="28:64" pos:end="28:72">XppDriver</name><argument_list pos:start="28:73" pos:end="28:74">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="29:9" pos:end="29:100"><decl pos:start="29:9" pos:end="29:99"><type pos:start="29:9" pos:end="29:30"><specifier pos:start="29:9" pos:end="29:15">private</specifier> <specifier pos:start="29:17" pos:end="29:22">static</specifier> <name pos:start="29:24" pos:end="29:30">ILogger</name></type> <name pos:start="29:32" pos:end="29:37">LOGGER</name> <init pos:start="29:39" pos:end="29:99">= <expr pos:start="29:41" pos:end="29:99"><call pos:start="29:41" pos:end="29:99"><name pos:start="29:41" pos:end="29:64"><name pos:start="29:41" pos:end="29:54">LoggerProvider</name><operator pos:start="29:55" pos:end="29:55">.</operator><name pos:start="29:56" pos:end="29:64">getLogger</name></name><argument_list pos:start="29:65" pos:end="29:99">(<argument pos:start="29:66" pos:end="29:98"><expr pos:start="29:66" pos:end="29:98"><name pos:start="29:66" pos:end="29:98"><name pos:start="29:66" pos:end="29:92">AreaMappingXStreamPersistor</name><operator pos:start="29:93" pos:end="29:93">.</operator><name pos:start="29:94" pos:end="29:98">class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="31:9" pos:end="31:52"><decl pos:start="31:9" pos:end="31:51"><type pos:start="31:9" pos:end="31:28"><specifier pos:start="31:9" pos:end="31:14">static</specifier> <specifier pos:start="31:16" pos:end="31:20">final</specifier> <name pos:start="31:22" pos:end="31:28">boolean</name></type> <name pos:start="31:30" pos:end="31:43">useCompression</name> <init pos:start="31:45" pos:end="31:51">= <expr pos:start="31:47" pos:end="31:51"><literal type="boolean" pos:start="31:47" pos:end="31:51">false</literal></expr></init></decl>;</decl_stmt>

	<function pos:start="33:9" pos:end="44:9"><annotation pos:start="33:9" pos:end="33:17">@<name pos:start="33:10" pos:end="33:17">Override</name></annotation>
	<type pos:start="34:9" pos:end="34:27"><specifier pos:start="34:9" pos:end="34:14">public</specifier> <name pos:start="34:16" pos:end="34:27">IAreaMapping</name></type> <name pos:start="34:29" pos:end="34:32">open</name><parameter_list pos:start="34:33" pos:end="34:49">(<parameter pos:start="34:34" pos:end="34:48"><decl pos:start="34:34" pos:end="34:48"><type pos:start="34:34" pos:end="34:44"><name pos:start="34:34" pos:end="34:44">InputStream</name></type> <name pos:start="34:46" pos:end="34:48">fin</name></decl></parameter>)</parameter_list> <throws pos:start="34:51" pos:end="34:77">throws <argument pos:start="34:58" pos:end="34:77"><expr pos:start="34:58" pos:end="34:77"><name pos:start="34:58" pos:end="34:77">PersistenceException</name></expr></argument></throws> <block pos:start="34:79" pos:end="44:9">{<block_content pos:start="35:17" pos:end="43:17">
		<expr_stmt pos:start="35:17" pos:end="35:67"><expr pos:start="35:17" pos:end="35:66"><call pos:start="35:17" pos:end="35:66"><name pos:start="35:17" pos:end="35:57"><name pos:start="35:17" pos:end="35:40">DronologyPersistenceUtil</name><operator pos:start="35:41" pos:end="35:41">.</operator><name pos:start="35:42" pos:end="35:57">preprocessStream</name></name><argument_list pos:start="35:58" pos:end="35:66">(<argument pos:start="35:59" pos:end="35:65"><expr pos:start="35:59" pos:end="35:65"><name pos:start="35:59" pos:end="35:65">xstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:start="36:9" pos:end="36:43">//	 xstream.setMode(XStream.);</comment>
		<comment type="line" pos:start="37:17" pos:end="37:88">// xstream.addImplicitCollection(ImplMMEArtifactType.class, "children");</comment>
		
		<if_stmt pos:start="39:17" pos:end="43:17"><if pos:start="39:17" pos:end="41:17">if <condition pos:start="39:20" pos:end="39:35">(<expr pos:start="39:21" pos:end="39:34"><name pos:start="39:21" pos:end="39:34">useCompression</name></expr>)</condition> <block pos:start="39:37" pos:end="41:17">{<block_content pos:start="40:25" pos:end="40:59">
			<return pos:start="40:25" pos:end="40:59">return <expr pos:start="40:32" pos:end="40:58"><call pos:start="40:32" pos:end="40:58"><name pos:start="40:32" pos:end="40:53">loadedCompressedStream</name><argument_list pos:start="40:54" pos:end="40:58">(<argument pos:start="40:55" pos:end="40:57"><expr pos:start="40:55" pos:end="40:57"><name pos:start="40:55" pos:end="40:57">fin</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else pos:start="41:19" pos:end="43:17">else <block pos:start="41:24" pos:end="43:17">{<block_content pos:start="42:25" pos:end="42:59">
			<return pos:start="42:25" pos:end="42:59">return <expr pos:start="42:32" pos:end="42:58"><call pos:start="42:32" pos:end="42:58"><name pos:start="42:32" pos:end="42:53">loadUncompressedStream</name><argument_list pos:start="42:54" pos:end="42:58">(<argument pos:start="42:55" pos:end="42:57"><expr pos:start="42:55" pos:end="42:57"><name pos:start="42:55" pos:end="42:57">fin</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function pos:start="46:9" pos:end="62:9"><type pos:start="46:9" pos:end="46:28"><specifier pos:start="46:9" pos:end="46:15">private</specifier> <name pos:start="46:17" pos:end="46:28">IAreaMapping</name></type> <name pos:start="46:30" pos:end="46:51">loadUncompressedStream</name><parameter_list pos:start="46:52" pos:end="46:68">(<parameter pos:start="46:53" pos:end="46:67"><decl pos:start="46:53" pos:end="46:67"><type pos:start="46:53" pos:end="46:63"><name pos:start="46:53" pos:end="46:63">InputStream</name></type> <name pos:start="46:65" pos:end="46:67">fin</name></decl></parameter>)</parameter_list> <throws pos:start="46:70" pos:end="46:96">throws <argument pos:start="46:77" pos:end="46:96"><expr pos:start="46:77" pos:end="46:96"><name pos:start="46:77" pos:end="46:96">PersistenceException</name></expr></argument></throws> <block pos:start="46:98" pos:end="62:9">{<block_content pos:start="47:17" pos:end="61:17">
		<try pos:start="47:17" pos:end="61:17">try <block pos:start="47:21" pos:end="51:17">{<block_content pos:start="48:25" pos:end="50:52">
			<decl_stmt pos:start="48:25" pos:end="48:129"><decl pos:start="48:25" pos:end="48:128"><type pos:start="48:25" pos:end="48:41"><name pos:start="48:25" pos:end="48:41">InputStreamReader</name></type> <name pos:start="48:43" pos:end="48:48">reader</name> <init pos:start="48:50" pos:end="48:128">= <expr pos:start="48:52" pos:end="48:128"><operator pos:start="48:52" pos:end="48:54">new</operator> <call pos:start="48:56" pos:end="48:128"><name pos:start="48:56" pos:end="48:72">InputStreamReader</name><argument_list pos:start="48:73" pos:end="48:128">(<argument pos:start="48:74" pos:end="48:101"><expr pos:start="48:74" pos:end="48:101"><operator pos:start="48:74" pos:end="48:76">new</operator> <call pos:start="48:78" pos:end="48:101"><name pos:start="48:78" pos:end="48:96">BufferedInputStream</name><argument_list pos:start="48:97" pos:end="48:101">(<argument pos:start="48:98" pos:end="48:100"><expr pos:start="48:98" pos:end="48:100"><name pos:start="48:98" pos:end="48:100">fin</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="48:104" pos:end="48:127"><expr pos:start="48:104" pos:end="48:127"><call pos:start="48:104" pos:end="48:127"><name pos:start="48:104" pos:end="48:118"><name pos:start="48:104" pos:end="48:110">Charset</name><operator pos:start="48:111" pos:end="48:111">.</operator><name pos:start="48:112" pos:end="48:118">forName</name></name><argument_list pos:start="48:119" pos:end="48:127">(<argument pos:start="48:120" pos:end="48:126"><expr pos:start="48:120" pos:end="48:126"><literal type="string" pos:start="48:120" pos:end="48:126">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt pos:start="49:25" pos:end="49:63"><decl pos:start="49:25" pos:end="49:62"><type pos:start="49:25" pos:end="49:30"><name pos:start="49:25" pos:end="49:30">Object</name></type> <name pos:start="49:32" pos:end="49:36">model</name> <init pos:start="49:38" pos:end="49:62">= <expr pos:start="49:40" pos:end="49:62"><call pos:start="49:40" pos:end="49:62"><name pos:start="49:40" pos:end="49:54"><name pos:start="49:40" pos:end="49:46">xstream</name><operator pos:start="49:47" pos:end="49:47">.</operator><name pos:start="49:48" pos:end="49:54">fromXML</name></name><argument_list pos:start="49:55" pos:end="49:62">(<argument pos:start="49:56" pos:end="49:61"><expr pos:start="49:56" pos:end="49:61"><name pos:start="49:56" pos:end="49:61">reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:start="50:25" pos:end="50:52">return <expr pos:start="50:32" pos:end="50:51"><operator pos:start="50:32" pos:end="50:32">(</operator><name pos:start="50:33" pos:end="50:44">IAreaMapping</name><operator pos:start="50:45" pos:end="50:45">)</operator> <name pos:start="50:47" pos:end="50:51">model</name></expr>;</return>
		</block_content>}</block> <catch pos:start="51:19" pos:end="53:17">catch <parameter_list pos:start="51:25" pos:end="51:37">(<parameter pos:start="51:26" pos:end="51:36"><decl pos:start="51:26" pos:end="51:36"><type pos:start="51:26" pos:end="51:36"><name pos:start="51:26" pos:end="51:34">Exception</name></type> <name pos:start="51:36" pos:end="51:36">e</name></decl></parameter>)</parameter_list> <block pos:start="51:39" pos:end="53:17">{<block_content pos:start="52:25" pos:end="52:58">
			<throw pos:start="52:25" pos:end="52:58">throw <expr pos:start="52:31" pos:end="52:57"><operator pos:start="52:31" pos:end="52:33">new</operator> <call pos:start="52:35" pos:end="52:57"><name pos:start="52:35" pos:end="52:54">PersistenceException</name><argument_list pos:start="52:55" pos:end="52:57">(<argument pos:start="52:56" pos:end="52:56"><expr pos:start="52:56" pos:end="52:56"><name pos:start="52:56" pos:end="52:56">e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <finally pos:start="53:19" pos:end="61:17">finally <block pos:start="53:27" pos:end="61:17">{<block_content pos:start="54:25" pos:end="60:25">
			<try pos:start="54:25" pos:end="60:25">try <block pos:start="54:29" pos:end="58:25">{<block_content pos:start="55:33" pos:end="57:33">
				<if_stmt pos:start="55:33" pos:end="57:33"><if pos:start="55:33" pos:end="57:33">if <condition pos:start="55:36" pos:end="55:48">(<expr pos:start="55:37" pos:end="55:47"><name pos:start="55:37" pos:end="55:39">fin</name> <operator pos:start="55:41" pos:end="55:42">!=</operator> <literal type="null" pos:start="55:44" pos:end="55:47">null</literal></expr>)</condition> <block pos:start="55:50" pos:end="57:33">{<block_content pos:start="56:41" pos:end="56:52">
					<expr_stmt pos:start="56:41" pos:end="56:52"><expr pos:start="56:41" pos:end="56:51"><call pos:start="56:41" pos:end="56:51"><name pos:start="56:41" pos:end="56:49"><name pos:start="56:41" pos:end="56:43">fin</name><operator pos:start="56:44" pos:end="56:44">.</operator><name pos:start="56:45" pos:end="56:49">close</name></name><argument_list pos:start="56:50" pos:end="56:51">()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block> <catch pos:start="58:27" pos:end="60:25">catch <parameter_list pos:start="58:33" pos:end="58:45">(<parameter pos:start="58:34" pos:end="58:44"><decl pos:start="58:34" pos:end="58:44"><type pos:start="58:34" pos:end="58:44"><name pos:start="58:34" pos:end="58:42">Exception</name></type> <name pos:start="58:44" pos:end="58:44">e</name></decl></parameter>)</parameter_list> <block pos:start="58:47" pos:end="60:25">{<block_content pos:start="59:33" pos:end="59:48">
				<expr_stmt pos:start="59:33" pos:end="59:48"><expr pos:start="59:33" pos:end="59:47"><call pos:start="59:33" pos:end="59:47"><name pos:start="59:33" pos:end="59:44"><name pos:start="59:33" pos:end="59:38">LOGGER</name><operator pos:start="59:39" pos:end="59:39">.</operator><name pos:start="59:40" pos:end="59:44">error</name></name><argument_list pos:start="59:45" pos:end="59:47">(<argument pos:start="59:46" pos:end="59:46"><expr pos:start="59:46" pos:end="59:46"><name pos:start="59:46" pos:end="59:46">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>
		</block_content>}</block></finally></try>
	</block_content>}</block></function>

	<function pos:start="64:9" pos:end="86:9"><type pos:start="64:9" pos:end="64:28"><specifier pos:start="64:9" pos:end="64:15">private</specifier> <name pos:start="64:17" pos:end="64:28">IAreaMapping</name></type> <name pos:start="64:30" pos:end="64:51">loadedCompressedStream</name><parameter_list pos:start="64:52" pos:end="64:68">(<parameter pos:start="64:53" pos:end="64:67"><decl pos:start="64:53" pos:end="64:67"><type pos:start="64:53" pos:end="64:63"><name pos:start="64:53" pos:end="64:63">InputStream</name></type> <name pos:start="64:65" pos:end="64:67">fin</name></decl></parameter>)</parameter_list> <throws pos:start="64:70" pos:end="64:96">throws <argument pos:start="64:77" pos:end="64:96"><expr pos:start="64:77" pos:end="64:96"><name pos:start="64:77" pos:end="64:96">PersistenceException</name></expr></argument></throws> <block pos:start="64:98" pos:end="86:9">{<block_content pos:start="65:17" pos:end="85:17">
		<decl_stmt pos:start="65:17" pos:end="65:39"><decl pos:start="65:17" pos:end="65:38"><type pos:start="65:17" pos:end="65:27"><name pos:start="65:17" pos:end="65:27">InputStream</name></type> <name pos:start="65:29" pos:end="65:31">zIn</name> <init pos:start="65:33" pos:end="65:38">= <expr pos:start="65:35" pos:end="65:38"><literal type="null" pos:start="65:35" pos:end="65:38">null</literal></expr></init></decl>;</decl_stmt>
		<try pos:start="66:17" pos:end="85:17">try <block pos:start="66:21" pos:end="71:17">{<block_content pos:start="67:25" pos:end="70:52">
			<expr_stmt pos:start="67:25" pos:end="67:55"><expr pos:start="67:25" pos:end="67:54"><name pos:start="67:25" pos:end="67:27">zIn</name> <operator pos:start="67:29" pos:end="67:29">=</operator> <operator pos:start="67:31" pos:end="67:33">new</operator> <call pos:start="67:35" pos:end="67:54"><name pos:start="67:35" pos:end="67:49">GZIPInputStream</name><argument_list pos:start="67:50" pos:end="67:54">(<argument pos:start="67:51" pos:end="67:53"><expr pos:start="67:51" pos:end="67:53"><name pos:start="67:51" pos:end="67:53">fin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt pos:start="68:25" pos:end="68:112"><decl pos:start="68:25" pos:end="68:111"><type pos:start="68:25" pos:end="68:30"><name pos:start="68:25" pos:end="68:30">Object</name></type> <name pos:start="68:32" pos:end="68:36">model</name> <init pos:start="68:38" pos:end="68:111">= <expr pos:start="68:40" pos:end="68:111"><call pos:start="68:40" pos:end="68:111"><name pos:start="68:40" pos:end="68:54"><name pos:start="68:40" pos:end="68:46">xstream</name><operator pos:start="68:47" pos:end="68:47">.</operator><name pos:start="68:48" pos:end="68:54">fromXML</name></name><argument_list pos:start="68:55" pos:end="68:111">(<argument pos:start="68:56" pos:end="68:110"><expr pos:start="68:56" pos:end="68:110"><operator pos:start="68:56" pos:end="68:58">new</operator> <call pos:start="68:60" pos:end="68:110"><name pos:start="68:60" pos:end="68:73">BufferedReader</name><argument_list pos:start="68:74" pos:end="68:110">(<argument pos:start="68:75" pos:end="68:109"><expr pos:start="68:75" pos:end="68:109"><operator pos:start="68:75" pos:end="68:77">new</operator> <call pos:start="68:79" pos:end="68:109"><name pos:start="68:79" pos:end="68:95">InputStreamReader</name><argument_list pos:start="68:96" pos:end="68:109">(<argument pos:start="68:97" pos:end="68:99"><expr pos:start="68:97" pos:end="68:99"><name pos:start="68:97" pos:end="68:99">zIn</name></expr></argument>, <argument pos:start="68:102" pos:end="68:108"><expr pos:start="68:102" pos:end="68:108"><literal type="string" pos:start="68:102" pos:end="68:108">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<return pos:start="70:25" pos:end="70:52">return <expr pos:start="70:32" pos:end="70:51"><operator pos:start="70:32" pos:end="70:32">(</operator><name pos:start="70:33" pos:end="70:44">IAreaMapping</name><operator pos:start="70:45" pos:end="70:45">)</operator> <name pos:start="70:47" pos:end="70:51">model</name></expr>;</return>
		</block_content>}</block> <catch pos:start="71:19" pos:end="73:17">catch <parameter_list pos:start="71:25" pos:end="71:39">(<parameter pos:start="71:26" pos:end="71:38"><decl pos:start="71:26" pos:end="71:38"><type pos:start="71:26" pos:end="71:38"><name pos:start="71:26" pos:end="71:36">IOException</name></type> <name pos:start="71:38" pos:end="71:38">e</name></decl></parameter>)</parameter_list> <block pos:start="71:41" pos:end="73:17">{<block_content pos:start="72:25" pos:end="72:58">
			<throw pos:start="72:25" pos:end="72:58">throw <expr pos:start="72:31" pos:end="72:57"><operator pos:start="72:31" pos:end="72:33">new</operator> <call pos:start="72:35" pos:end="72:57"><name pos:start="72:35" pos:end="72:54">PersistenceException</name><argument_list pos:start="72:55" pos:end="72:57">(<argument pos:start="72:56" pos:end="72:56"><expr pos:start="72:56" pos:end="72:56"><name pos:start="72:56" pos:end="72:56">e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <finally pos:start="73:19" pos:end="85:17">finally <block pos:start="73:27" pos:end="85:17">{<block_content pos:start="74:25" pos:end="83:25">
			<try pos:start="74:25" pos:end="83:25">try <block pos:start="74:29" pos:end="81:25">{<block_content pos:start="75:33" pos:end="80:33">
				<if_stmt pos:start="75:33" pos:end="77:33"><if pos:start="75:33" pos:end="77:33">if <condition pos:start="75:36" pos:end="75:48">(<expr pos:start="75:37" pos:end="75:47"><name pos:start="75:37" pos:end="75:39">zIn</name> <operator pos:start="75:41" pos:end="75:42">!=</operator> <literal type="null" pos:start="75:44" pos:end="75:47">null</literal></expr>)</condition> <block pos:start="75:50" pos:end="77:33">{<block_content pos:start="76:41" pos:end="76:52">
					<expr_stmt pos:start="76:41" pos:end="76:52"><expr pos:start="76:41" pos:end="76:51"><call pos:start="76:41" pos:end="76:51"><name pos:start="76:41" pos:end="76:49"><name pos:start="76:41" pos:end="76:43">zIn</name><operator pos:start="76:44" pos:end="76:44">.</operator><name pos:start="76:45" pos:end="76:49">close</name></name><argument_list pos:start="76:50" pos:end="76:51">()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt pos:start="78:33" pos:end="80:33"><if pos:start="78:33" pos:end="80:33">if <condition pos:start="78:36" pos:end="78:48">(<expr pos:start="78:37" pos:end="78:47"><name pos:start="78:37" pos:end="78:39">fin</name> <operator pos:start="78:41" pos:end="78:42">!=</operator> <literal type="null" pos:start="78:44" pos:end="78:47">null</literal></expr>)</condition> <block pos:start="78:50" pos:end="80:33">{<block_content pos:start="79:41" pos:end="79:52">
					<expr_stmt pos:start="79:41" pos:end="79:52"><expr pos:start="79:41" pos:end="79:51"><call pos:start="79:41" pos:end="79:51"><name pos:start="79:41" pos:end="79:49"><name pos:start="79:41" pos:end="79:43">fin</name><operator pos:start="79:44" pos:end="79:44">.</operator><name pos:start="79:45" pos:end="79:49">close</name></name><argument_list pos:start="79:50" pos:end="79:51">()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block> <catch pos:start="81:27" pos:end="83:25">catch <parameter_list pos:start="81:33" pos:end="81:45">(<parameter pos:start="81:34" pos:end="81:44"><decl pos:start="81:34" pos:end="81:44"><type pos:start="81:34" pos:end="81:44"><name pos:start="81:34" pos:end="81:42">Exception</name></type> <name pos:start="81:44" pos:end="81:44">e</name></decl></parameter>)</parameter_list> <block pos:start="81:47" pos:end="83:25">{<block_content pos:start="82:33" pos:end="82:48">
				<expr_stmt pos:start="82:33" pos:end="82:48"><expr pos:start="82:33" pos:end="82:47"><call pos:start="82:33" pos:end="82:47"><name pos:start="82:33" pos:end="82:44"><name pos:start="82:33" pos:end="82:38">LOGGER</name><operator pos:start="82:39" pos:end="82:39">.</operator><name pos:start="82:40" pos:end="82:44">error</name></name><argument_list pos:start="82:45" pos:end="82:47">(<argument pos:start="82:46" pos:end="82:46"><expr pos:start="82:46" pos:end="82:46"><name pos:start="82:46" pos:end="82:46">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>

		</block_content>}</block></finally></try>
	</block_content>}</block></function>
 
	<function pos:start="88:9" pos:end="101:9"><annotation pos:start="88:9" pos:end="88:17">@<name pos:start="88:10" pos:end="88:17">Override</name></annotation>
	<type pos:start="89:9" pos:end="89:22"><specifier pos:start="89:9" pos:end="89:14">public</specifier> <name pos:start="89:16" pos:end="89:22">boolean</name></type> <name pos:start="89:24" pos:end="89:27">save</name><parameter_list pos:start="89:28" pos:end="89:62">(<parameter pos:start="89:29" pos:end="89:42"><decl pos:start="89:29" pos:end="89:42"><type pos:start="89:29" pos:end="89:42"><name pos:start="89:29" pos:end="89:40">IAreaMapping</name></type> <name pos:start="89:42" pos:end="89:42">o</name></decl></parameter>, <parameter pos:start="89:45" pos:end="89:61"><decl pos:start="89:45" pos:end="89:61"><type pos:start="89:45" pos:end="89:61"><name pos:start="89:45" pos:end="89:56">OutputStream</name></type> <name pos:start="89:58" pos:end="89:61">fout</name></decl></parameter>)</parameter_list> <throws pos:start="89:64" pos:end="89:90">throws <argument pos:start="89:71" pos:end="89:90"><expr pos:start="89:71" pos:end="89:90"><name pos:start="89:71" pos:end="89:90">PersistenceException</name></expr></argument></throws> <block pos:start="89:92" pos:end="101:9">{<block_content pos:start="90:17" pos:end="99:17">
		<expr_stmt pos:start="90:17" pos:end="90:67"><expr pos:start="90:17" pos:end="90:66"><call pos:start="90:17" pos:end="90:66"><name pos:start="90:17" pos:end="90:57"><name pos:start="90:17" pos:end="90:40">DronologyPersistenceUtil</name><operator pos:start="90:41" pos:end="90:41">.</operator><name pos:start="90:42" pos:end="90:57">preprocessStream</name></name><argument_list pos:start="90:58" pos:end="90:66">(<argument pos:start="90:59" pos:end="90:65"><expr pos:start="90:59" pos:end="90:65"><name pos:start="90:59" pos:end="90:65">xstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:start="91:17" pos:end="91:58">// xstream.setMode(XStream.ID_REFERENCES);</comment>
		<comment type="line" pos:start="92:17" pos:end="92:88">// xstream.addImplicitCollection(ImplMMEArtifactType.class, "children");</comment>
		<comment type="line" pos:start="93:17" pos:end="93:114">// xstream.addImplicitMap(ImplMEEvent.class, "relatedEvents", ImplMEEvent.class, "relatedEvents");</comment>

		<if_stmt pos:start="95:17" pos:end="99:17"><if pos:start="95:17" pos:end="97:17">if <condition pos:start="95:20" pos:end="95:35">(<expr pos:start="95:21" pos:end="95:34"><name pos:start="95:21" pos:end="95:34">useCompression</name></expr>)</condition> <block pos:start="95:37" pos:end="97:17">{<block_content pos:start="96:25" pos:end="96:61">
			<return pos:start="96:25" pos:end="96:61">return <expr pos:start="96:32" pos:end="96:60"><call pos:start="96:32" pos:end="96:60"><name pos:start="96:32" pos:end="96:51">saveCompressedStream</name><argument_list pos:start="96:52" pos:end="96:60">(<argument pos:start="96:53" pos:end="96:53"><expr pos:start="96:53" pos:end="96:53"><name pos:start="96:53" pos:end="96:53">o</name></expr></argument>, <argument pos:start="96:56" pos:end="96:59"><expr pos:start="96:56" pos:end="96:59"><name pos:start="96:56" pos:end="96:59">fout</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else pos:start="97:19" pos:end="99:17">else <block pos:start="97:24" pos:end="99:17">{<block_content pos:start="98:25" pos:end="98:63">
			<return pos:start="98:25" pos:end="98:63">return <expr pos:start="98:32" pos:end="98:62"><call pos:start="98:32" pos:end="98:62"><name pos:start="98:32" pos:end="98:53">saveUncompressedStream</name><argument_list pos:start="98:54" pos:end="98:62">(<argument pos:start="98:55" pos:end="98:55"><expr pos:start="98:55" pos:end="98:55"><name pos:start="98:55" pos:end="98:55">o</name></expr></argument>, <argument pos:start="98:58" pos:end="98:61"><expr pos:start="98:58" pos:end="98:61"><name pos:start="98:58" pos:end="98:61">fout</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></function>

	<function pos:start="103:9" pos:end="124:9"><type pos:start="103:9" pos:end="103:23"><specifier pos:start="103:9" pos:end="103:15">private</specifier> <name pos:start="103:17" pos:end="103:23">boolean</name></type> <name pos:start="103:25" pos:end="103:46">saveUncompressedStream</name><parameter_list pos:start="103:47" pos:end="103:81">(<parameter pos:start="103:48" pos:end="103:61"><decl pos:start="103:48" pos:end="103:61"><type pos:start="103:48" pos:end="103:61"><name pos:start="103:48" pos:end="103:59">IAreaMapping</name></type> <name pos:start="103:61" pos:end="103:61">o</name></decl></parameter>, <parameter pos:start="103:64" pos:end="103:80"><decl pos:start="103:64" pos:end="103:80"><type pos:start="103:64" pos:end="103:80"><name pos:start="103:64" pos:end="103:75">OutputStream</name></type> <name pos:start="103:77" pos:end="103:80">fout</name></decl></parameter>)</parameter_list> <throws pos:start="103:83" pos:end="103:109">throws <argument pos:start="103:90" pos:end="103:109"><expr pos:start="103:90" pos:end="103:109"><name pos:start="103:90" pos:end="103:109">PersistenceException</name></expr></argument></throws> <block pos:start="103:111" pos:end="124:9">{<block_content pos:start="104:17" pos:end="122:17">
		<decl_stmt pos:start="104:17" pos:end="104:49"><decl pos:start="104:17" pos:end="104:48"><type pos:start="104:17" pos:end="104:34"><name pos:start="104:17" pos:end="104:34">OutputStreamWriter</name></type> <name pos:start="104:36" pos:end="104:41">writer</name> <init pos:start="104:43" pos:end="104:48">= <expr pos:start="104:45" pos:end="104:48"><literal type="null" pos:start="104:45" pos:end="104:48">null</literal></expr></init></decl>;</decl_stmt>
		<try pos:start="105:17" pos:end="122:17">try <block pos:start="105:21" pos:end="109:17">{<block_content pos:start="106:25" pos:end="108:36">
			<expr_stmt pos:start="106:25" pos:end="106:114"><expr pos:start="106:25" pos:end="106:113"><name pos:start="106:25" pos:end="106:30">writer</name> <operator pos:start="106:32" pos:end="106:32">=</operator> <operator pos:start="106:34" pos:end="106:36">new</operator> <call pos:start="106:38" pos:end="106:113"><name pos:start="106:38" pos:end="106:55">OutputStreamWriter</name><argument_list pos:start="106:56" pos:end="106:113">(<argument pos:start="106:57" pos:end="106:86"><expr pos:start="106:57" pos:end="106:86"><operator pos:start="106:57" pos:end="106:59">new</operator> <call pos:start="106:61" pos:end="106:86"><name pos:start="106:61" pos:end="106:80">BufferedOutputStream</name><argument_list pos:start="106:81" pos:end="106:86">(<argument pos:start="106:82" pos:end="106:85"><expr pos:start="106:82" pos:end="106:85"><name pos:start="106:82" pos:end="106:85">fout</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="106:89" pos:end="106:112"><expr pos:start="106:89" pos:end="106:112"><call pos:start="106:89" pos:end="106:112"><name pos:start="106:89" pos:end="106:103"><name pos:start="106:89" pos:end="106:95">Charset</name><operator pos:start="106:96" pos:end="106:96">.</operator><name pos:start="106:97" pos:end="106:103">forName</name></name><argument_list pos:start="106:104" pos:end="106:112">(<argument pos:start="106:105" pos:end="106:111"><expr pos:start="106:105" pos:end="106:111"><literal type="string" pos:start="106:105" pos:end="106:111">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="107:25" pos:end="107:49"><expr pos:start="107:25" pos:end="107:48"><call pos:start="107:25" pos:end="107:48"><name pos:start="107:25" pos:end="107:37"><name pos:start="107:25" pos:end="107:31">xstream</name><operator pos:start="107:32" pos:end="107:32">.</operator><name pos:start="107:33" pos:end="107:37">toXML</name></name><argument_list pos:start="107:38" pos:end="107:48">(<argument pos:start="107:39" pos:end="107:39"><expr pos:start="107:39" pos:end="107:39"><name pos:start="107:39" pos:end="107:39">o</name></expr></argument>, <argument pos:start="107:42" pos:end="107:47"><expr pos:start="107:42" pos:end="107:47"><name pos:start="107:42" pos:end="107:47">writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:start="108:25" pos:end="108:36">return <expr pos:start="108:32" pos:end="108:35"><literal type="boolean" pos:start="108:32" pos:end="108:35">true</literal></expr>;</return>
		</block_content>}</block> <catch pos:start="109:19" pos:end="111:17">catch <parameter_list pos:start="109:25" pos:end="109:37">(<parameter pos:start="109:26" pos:end="109:36"><decl pos:start="109:26" pos:end="109:36"><type pos:start="109:26" pos:end="109:36"><name pos:start="109:26" pos:end="109:34">Exception</name></type> <name pos:start="109:36" pos:end="109:36">e</name></decl></parameter>)</parameter_list> <block pos:start="109:39" pos:end="111:17">{<block_content pos:start="110:25" pos:end="110:58">
			<throw pos:start="110:25" pos:end="110:58">throw <expr pos:start="110:31" pos:end="110:57"><operator pos:start="110:31" pos:end="110:33">new</operator> <call pos:start="110:35" pos:end="110:57"><name pos:start="110:35" pos:end="110:54">PersistenceException</name><argument_list pos:start="110:55" pos:end="110:57">(<argument pos:start="110:56" pos:end="110:56"><expr pos:start="110:56" pos:end="110:56"><name pos:start="110:56" pos:end="110:56">e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <finally pos:start="111:19" pos:end="122:17">finally <block pos:start="111:27" pos:end="122:17">{<block_content pos:start="112:25" pos:end="121:25">
			<try pos:start="112:25" pos:end="121:25">try <block pos:start="112:29" pos:end="119:25">{<block_content pos:start="113:33" pos:end="118:33">
				<if_stmt pos:start="113:33" pos:end="115:33"><if pos:start="113:33" pos:end="115:33">if <condition pos:start="113:36" pos:end="113:51">(<expr pos:start="113:37" pos:end="113:50"><name pos:start="113:37" pos:end="113:42">writer</name> <operator pos:start="113:44" pos:end="113:45">!=</operator> <literal type="null" pos:start="113:47" pos:end="113:50">null</literal></expr>)</condition> <block pos:start="113:53" pos:end="115:33">{<block_content pos:start="114:41" pos:end="114:55">
					<expr_stmt pos:start="114:41" pos:end="114:55"><expr pos:start="114:41" pos:end="114:54"><call pos:start="114:41" pos:end="114:54"><name pos:start="114:41" pos:end="114:52"><name pos:start="114:41" pos:end="114:46">writer</name><operator pos:start="114:47" pos:end="114:47">.</operator><name pos:start="114:48" pos:end="114:52">close</name></name><argument_list pos:start="114:53" pos:end="114:54">()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt pos:start="116:33" pos:end="118:33"><if pos:start="116:33" pos:end="118:33">if <condition pos:start="116:36" pos:end="116:49">(<expr pos:start="116:37" pos:end="116:48"><name pos:start="116:37" pos:end="116:40">fout</name> <operator pos:start="116:42" pos:end="116:43">!=</operator> <literal type="null" pos:start="116:45" pos:end="116:48">null</literal></expr>)</condition> <block pos:start="116:51" pos:end="118:33">{<block_content pos:start="117:41" pos:end="117:53">
					<expr_stmt pos:start="117:41" pos:end="117:53"><expr pos:start="117:41" pos:end="117:52"><call pos:start="117:41" pos:end="117:52"><name pos:start="117:41" pos:end="117:50"><name pos:start="117:41" pos:end="117:44">fout</name><operator pos:start="117:45" pos:end="117:45">.</operator><name pos:start="117:46" pos:end="117:50">close</name></name><argument_list pos:start="117:51" pos:end="117:52">()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block> <catch pos:start="119:27" pos:end="121:25">catch <parameter_list pos:start="119:33" pos:end="119:47">(<parameter pos:start="119:34" pos:end="119:46"><decl pos:start="119:34" pos:end="119:46"><type pos:start="119:34" pos:end="119:46"><name pos:start="119:34" pos:end="119:44">IOException</name></type> <name pos:start="119:46" pos:end="119:46">e</name></decl></parameter>)</parameter_list> <block pos:start="119:49" pos:end="121:25">{<block_content pos:start="120:33" pos:end="120:48">
				<expr_stmt pos:start="120:33" pos:end="120:48"><expr pos:start="120:33" pos:end="120:47"><call pos:start="120:33" pos:end="120:47"><name pos:start="120:33" pos:end="120:44"><name pos:start="120:33" pos:end="120:38">LOGGER</name><operator pos:start="120:39" pos:end="120:39">.</operator><name pos:start="120:40" pos:end="120:44">error</name></name><argument_list pos:start="120:45" pos:end="120:47">(<argument pos:start="120:46" pos:end="120:46"><expr pos:start="120:46" pos:end="120:46"><name pos:start="120:46" pos:end="120:46">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>
		</block_content>}</block></finally></try>

	</block_content>}</block></function>

	<function pos:start="126:9" pos:end="138:9"><type pos:start="126:9" pos:end="126:23"><specifier pos:start="126:9" pos:end="126:15">private</specifier> <name pos:start="126:17" pos:end="126:23">boolean</name></type> <name pos:start="126:25" pos:end="126:44">saveCompressedStream</name><parameter_list pos:start="126:45" pos:end="126:79">(<parameter pos:start="126:46" pos:end="126:59"><decl pos:start="126:46" pos:end="126:59"><type pos:start="126:46" pos:end="126:59"><name pos:start="126:46" pos:end="126:57">IAreaMapping</name></type> <name pos:start="126:59" pos:end="126:59">o</name></decl></parameter>, <parameter pos:start="126:62" pos:end="126:78"><decl pos:start="126:62" pos:end="126:78"><type pos:start="126:62" pos:end="126:78"><name pos:start="126:62" pos:end="126:73">OutputStream</name></type> <name pos:start="126:75" pos:end="126:78">fout</name></decl></parameter>)</parameter_list> <throws pos:start="126:81" pos:end="126:107">throws <argument pos:start="126:88" pos:end="126:107"><expr pos:start="126:88" pos:end="126:107"><name pos:start="126:88" pos:end="126:107">PersistenceException</name></expr></argument></throws> <block pos:start="126:109" pos:end="138:9">{<block_content pos:start="127:17" pos:end="137:17">
		<try pos:start="127:17" pos:end="137:17">try <block pos:start="127:21" pos:end="135:17">{<block_content pos:start="128:25" pos:end="134:36">
			<decl_stmt pos:start="128:25" pos:end="128:75"><decl pos:start="128:25" pos:end="128:74"><type pos:start="128:25" pos:end="128:40"><name pos:start="128:25" pos:end="128:40">GZIPOutputStream</name></type> <name pos:start="128:42" pos:end="128:45">zOut</name> <init pos:start="128:47" pos:end="128:74">= <expr pos:start="128:49" pos:end="128:74"><operator pos:start="128:49" pos:end="128:51">new</operator> <call pos:start="128:53" pos:end="128:74"><name pos:start="128:53" pos:end="128:68">GZIPOutputStream</name><argument_list pos:start="128:69" pos:end="128:74">(<argument pos:start="128:70" pos:end="128:73"><expr pos:start="128:70" pos:end="128:73"><name pos:start="128:70" pos:end="128:73">fout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt pos:start="129:25" pos:end="129:100"><expr pos:start="129:25" pos:end="129:99"><call pos:start="129:25" pos:end="129:99"><name pos:start="129:25" pos:end="129:37"><name pos:start="129:25" pos:end="129:31">xstream</name><operator pos:start="129:32" pos:end="129:32">.</operator><name pos:start="129:33" pos:end="129:37">toXML</name></name><argument_list pos:start="129:38" pos:end="129:99">(<argument pos:start="129:39" pos:end="129:39"><expr pos:start="129:39" pos:end="129:39"><name pos:start="129:39" pos:end="129:39">o</name></expr></argument>, <argument pos:start="129:42" pos:end="129:98"><expr pos:start="129:42" pos:end="129:98"><operator pos:start="129:42" pos:end="129:44">new</operator> <call pos:start="129:46" pos:end="129:98"><name pos:start="129:46" pos:end="129:59">BufferedWriter</name><argument_list pos:start="129:60" pos:end="129:98">(<argument pos:start="129:61" pos:end="129:97"><expr pos:start="129:61" pos:end="129:97"><operator pos:start="129:61" pos:end="129:63">new</operator> <call pos:start="129:65" pos:end="129:97"><name pos:start="129:65" pos:end="129:82">OutputStreamWriter</name><argument_list pos:start="129:83" pos:end="129:97">(<argument pos:start="129:84" pos:end="129:87"><expr pos:start="129:84" pos:end="129:87"><name pos:start="129:84" pos:end="129:87">zOut</name></expr></argument>, <argument pos:start="129:90" pos:end="129:96"><expr pos:start="129:90" pos:end="129:96"><literal type="string" pos:start="129:90" pos:end="129:96">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="131:25" pos:end="131:37"><expr pos:start="131:25" pos:end="131:36"><call pos:start="131:25" pos:end="131:36"><name pos:start="131:25" pos:end="131:34"><name pos:start="131:25" pos:end="131:28">zOut</name><operator pos:start="131:29" pos:end="131:29">.</operator><name pos:start="131:30" pos:end="131:34">close</name></name><argument_list pos:start="131:35" pos:end="131:36">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="132:25" pos:end="132:37"><expr pos:start="132:25" pos:end="132:36"><call pos:start="132:25" pos:end="132:36"><name pos:start="132:25" pos:end="132:34"><name pos:start="132:25" pos:end="132:28">fout</name><operator pos:start="132:29" pos:end="132:29">.</operator><name pos:start="132:30" pos:end="132:34">close</name></name><argument_list pos:start="132:35" pos:end="132:36">()</argument_list></call></expr>;</expr_stmt>

			<return pos:start="134:25" pos:end="134:36">return <expr pos:start="134:32" pos:end="134:35"><literal type="boolean" pos:start="134:32" pos:end="134:35">true</literal></expr>;</return>
		</block_content>}</block> <catch pos:start="135:19" pos:end="137:17">catch <parameter_list pos:start="135:25" pos:end="135:37">(<parameter pos:start="135:26" pos:end="135:36"><decl pos:start="135:26" pos:end="135:36"><type pos:start="135:26" pos:end="135:36"><name pos:start="135:26" pos:end="135:34">Exception</name></type> <name pos:start="135:36" pos:end="135:36">e</name></decl></parameter>)</parameter_list> <block pos:start="135:39" pos:end="137:17">{<block_content pos:start="136:25" pos:end="136:58">
			<throw pos:start="136:25" pos:end="136:58">throw <expr pos:start="136:31" pos:end="136:57"><operator pos:start="136:31" pos:end="136:33">new</operator> <call pos:start="136:35" pos:end="136:57"><name pos:start="136:35" pos:end="136:54">PersistenceException</name><argument_list pos:start="136:55" pos:end="136:57">(<argument pos:start="136:56" pos:end="136:56"><expr pos:start="136:56" pos:end="136:56"><name pos:start="136:56" pos:end="136:56">e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>

}</block></class>
</unit>
