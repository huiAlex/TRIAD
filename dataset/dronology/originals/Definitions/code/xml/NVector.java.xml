<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/NVector.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:41">package <name pos:start="1:9" pos:end="1:40"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:29">core</name><operator pos:start="1:30" pos:end="1:30">.</operator><name pos:start="1:31" pos:end="1:40">coordinate</name></name>;</package>

<import pos:start="3:1" pos:end="3:70">import <name pos:start="3:8" pos:end="3:69"><name pos:start="3:8" pos:end="3:10">edu</name><operator pos:start="3:11" pos:end="3:11">.</operator><name pos:start="3:12" pos:end="3:13">nd</name><operator pos:start="3:14" pos:end="3:14">.</operator><name pos:start="3:15" pos:end="3:23">dronology</name><operator pos:start="3:24" pos:end="3:24">.</operator><name pos:start="3:25" pos:end="3:28">core</name><operator pos:start="3:29" pos:end="3:29">.</operator><name pos:start="3:30" pos:end="3:38">simulator</name><operator pos:start="3:39" pos:end="3:39">.</operator><name pos:start="3:40" pos:end="3:52">nvecsimulator</name><operator pos:start="3:53" pos:end="3:53">.</operator><name pos:start="3:54" pos:end="3:69">NvecInterpolator</name></name>;</import>

<comment type="block" format="javadoc" pos:start="5:1" pos:end="18:3">/**
 * A terrestrial position defined by a normal vector (N-vector) and an altitude.
 * 
 * An N-vector is a normal Vector that points out from the surface of the WGS-84
 * reference ellipsoid. The normal vector is combined with an altitude which
 * represents the distance above (or below) the reference ellipsoid (note this
 * is the distance above sea level as sea level is defined as the surface of the
 * ellipsoid in WGS-84). The n-vector and altitude together precisely define a
 * position on Earth. The n-vector should be a unit vector (i.e. a vector with a
 * magnitude = 1). The altitude should be in meters.
 *  
 * @author Michael Murphy 
 *  
 */</comment> 
<class pos:start="19:1" pos:end="206:1"><specifier pos:start="19:1" pos:end="19:6">public</specifier> class <name pos:start="19:14" pos:end="19:20">NVector</name> <super_list pos:start="19:22" pos:end="19:45"><extends pos:start="19:22" pos:end="19:45">extends <super pos:start="19:30" pos:end="19:45"><name pos:start="19:30" pos:end="19:45">AbstractPosition</name></super></extends></super_list> <block pos:start="19:47" pos:end="206:1">{

	<decl_stmt pos:start="21:9" pos:end="21:58"><decl pos:start="21:9" pos:end="21:57"><type pos:start="21:9" pos:end="21:34"><specifier pos:start="21:9" pos:end="21:14">public</specifier> <specifier pos:start="21:16" pos:end="21:21">static</specifier> <specifier pos:start="21:23" pos:end="21:27">final</specifier> <name pos:start="21:29" pos:end="21:34">double</name></type> <name pos:start="21:36" pos:end="21:45">SEMI_MAJOR</name> <init pos:start="21:47" pos:end="21:57">= <expr pos:start="21:49" pos:end="21:57"><literal type="number" pos:start="21:49" pos:end="21:57">6378137.0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="22:9" pos:end="22:59"><decl pos:start="22:9" pos:end="22:58"><type pos:start="22:9" pos:end="22:34"><specifier pos:start="22:9" pos:end="22:14">public</specifier> <specifier pos:start="22:16" pos:end="22:21">static</specifier> <specifier pos:start="22:23" pos:end="22:27">final</specifier> <name pos:start="22:29" pos:end="22:34">double</name></type> <name pos:start="22:36" pos:end="22:45">SEMI_MINOR</name> <init pos:start="22:47" pos:end="22:58">= <expr pos:start="22:49" pos:end="22:58"><literal type="number" pos:start="22:49" pos:end="22:58">6356752.31</literal></expr></init></decl>;</decl_stmt><comment type="line" pos:start="22:60" pos:end="22:67">// 4245;</comment>

	<decl_stmt pos:start="24:9" pos:end="24:25"><decl pos:start="24:9" pos:end="24:24"><type pos:start="24:9" pos:end="24:22"><specifier pos:start="24:9" pos:end="24:15">private</specifier> <name pos:start="24:17" pos:end="24:22">double</name></type> <name pos:start="24:24" pos:end="24:24">x</name></decl>;</decl_stmt>

	<decl_stmt pos:start="26:9" pos:end="26:25"><decl pos:start="26:9" pos:end="26:24"><type pos:start="26:9" pos:end="26:22"><specifier pos:start="26:9" pos:end="26:15">private</specifier> <name pos:start="26:17" pos:end="26:22">double</name></type> <name pos:start="26:24" pos:end="26:24">y</name></decl>;</decl_stmt>

	<decl_stmt pos:start="28:9" pos:end="28:25"><decl pos:start="28:9" pos:end="28:24"><type pos:start="28:9" pos:end="28:22"><specifier pos:start="28:9" pos:end="28:15">private</specifier> <name pos:start="28:17" pos:end="28:22">double</name></type> <name pos:start="28:24" pos:end="28:24">z</name></decl>;</decl_stmt>

	<decl_stmt pos:start="30:9" pos:end="30:32"><decl pos:start="30:9" pos:end="30:31"><type pos:start="30:9" pos:end="30:22"><specifier pos:start="30:9" pos:end="30:15">private</specifier> <name pos:start="30:17" pos:end="30:22">double</name></type> <name pos:start="30:24" pos:end="30:31">altitude</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc" pos:start="32:9" pos:end="43:11">/**
	 * 
	 * @param x
	 *            the x component of the normal vector
	 * @param y
	 *            the y component of the normal vector
	 * @param z
	 *            the z component of the normal vector
	 * @param altitude
	 *            the distance above the reference ellipsoid (negative altitudes
	 *            represent altitude below this ellipsoid).
	 */</comment>
	<constructor pos:start="44:9" pos:end="50:9"><specifier pos:start="44:9" pos:end="44:14">public</specifier> <name pos:start="44:16" pos:end="44:22">NVector</name><parameter_list pos:start="44:23" pos:end="44:69">(<parameter pos:start="44:24" pos:end="44:31"><decl pos:start="44:24" pos:end="44:31"><type pos:start="44:24" pos:end="44:31"><name pos:start="44:24" pos:end="44:29">double</name></type> <name pos:start="44:31" pos:end="44:31">x</name></decl></parameter>, <parameter pos:start="44:34" pos:end="44:41"><decl pos:start="44:34" pos:end="44:41"><type pos:start="44:34" pos:end="44:41"><name pos:start="44:34" pos:end="44:39">double</name></type> <name pos:start="44:41" pos:end="44:41">y</name></decl></parameter>, <parameter pos:start="44:44" pos:end="44:51"><decl pos:start="44:44" pos:end="44:51"><type pos:start="44:44" pos:end="44:51"><name pos:start="44:44" pos:end="44:49">double</name></type> <name pos:start="44:51" pos:end="44:51">z</name></decl></parameter>, <parameter pos:start="44:54" pos:end="44:68"><decl pos:start="44:54" pos:end="44:68"><type pos:start="44:54" pos:end="44:68"><name pos:start="44:54" pos:end="44:59">double</name></type> <name pos:start="44:61" pos:end="44:68">altitude</name></decl></parameter>)</parameter_list> <block pos:start="44:71" pos:end="50:9">{<block_content pos:start="45:17" pos:end="49:41">
		<decl_stmt pos:start="45:17" pos:end="45:60"><decl pos:start="45:17" pos:end="45:59"><type pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">double</name></type> <name pos:start="45:24" pos:end="45:24">m</name> <init pos:start="45:26" pos:end="45:59">= <expr pos:start="45:28" pos:end="45:59"><call pos:start="45:28" pos:end="45:59"><name pos:start="45:28" pos:end="45:36"><name pos:start="45:28" pos:end="45:31">Math</name><operator pos:start="45:32" pos:end="45:32">.</operator><name pos:start="45:33" pos:end="45:36">sqrt</name></name><argument_list pos:start="45:37" pos:end="45:59">(<argument pos:start="45:38" pos:end="45:58"><expr pos:start="45:38" pos:end="45:58"><name pos:start="45:38" pos:end="45:38">x</name> <operator pos:start="45:40" pos:end="45:40">*</operator> <name pos:start="45:42" pos:end="45:42">x</name> <operator pos:start="45:44" pos:end="45:44">+</operator> <name pos:start="45:46" pos:end="45:46">y</name> <operator pos:start="45:48" pos:end="45:48">*</operator> <name pos:start="45:50" pos:end="45:50">y</name> <operator pos:start="45:52" pos:end="45:52">+</operator> <name pos:start="45:54" pos:end="45:54">z</name> <operator pos:start="45:56" pos:end="45:56">*</operator> <name pos:start="45:58" pos:end="45:58">z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="46:17" pos:end="46:31"><expr pos:start="46:17" pos:end="46:30"><name pos:start="46:17" pos:end="46:22"><name pos:start="46:17" pos:end="46:20">this</name><operator pos:start="46:21" pos:end="46:21">.</operator><name pos:start="46:22" pos:end="46:22">x</name></name> <operator pos:start="46:24" pos:end="46:24">=</operator> <name pos:start="46:26" pos:end="46:26">x</name> <operator pos:start="46:28" pos:end="46:28">/</operator> <name pos:start="46:30" pos:end="46:30">m</name></expr>;</expr_stmt>
		<expr_stmt pos:start="47:17" pos:end="47:31"><expr pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:20">this</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:22">y</name></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:26">y</name> <operator pos:start="47:28" pos:end="47:28">/</operator> <name pos:start="47:30" pos:end="47:30">m</name></expr>;</expr_stmt>
		<expr_stmt pos:start="48:17" pos:end="48:31"><expr pos:start="48:17" pos:end="48:30"><name pos:start="48:17" pos:end="48:22"><name pos:start="48:17" pos:end="48:20">this</name><operator pos:start="48:21" pos:end="48:21">.</operator><name pos:start="48:22" pos:end="48:22">z</name></name> <operator pos:start="48:24" pos:end="48:24">=</operator> <name pos:start="48:26" pos:end="48:26">z</name> <operator pos:start="48:28" pos:end="48:28">/</operator> <name pos:start="48:30" pos:end="48:30">m</name></expr>;</expr_stmt>
		<expr_stmt pos:start="49:17" pos:end="49:41"><expr pos:start="49:17" pos:end="49:40"><name pos:start="49:17" pos:end="49:29"><name pos:start="49:17" pos:end="49:20">this</name><operator pos:start="49:21" pos:end="49:21">.</operator><name pos:start="49:22" pos:end="49:29">altitude</name></name> <operator pos:start="49:31" pos:end="49:31">=</operator> <name pos:start="49:33" pos:end="49:40">altitude</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function pos:start="52:9" pos:end="55:9"><annotation pos:start="52:9" pos:end="52:17">@<name pos:start="52:10" pos:end="52:17">Override</name></annotation>
	<type pos:start="53:9" pos:end="53:22"><specifier pos:start="53:9" pos:end="53:14">public</specifier> <name pos:start="53:16" pos:end="53:22">NVector</name></type> <name pos:start="53:24" pos:end="53:32">toNVector</name><parameter_list pos:start="53:33" pos:end="53:34">()</parameter_list> <block pos:start="53:36" pos:end="55:9">{<block_content pos:start="54:17" pos:end="54:28">
		<return pos:start="54:17" pos:end="54:28">return <expr pos:start="54:24" pos:end="54:27"><name pos:start="54:24" pos:end="54:27">this</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="57:9" pos:end="71:9"><annotation pos:start="57:9" pos:end="57:17">@<name pos:start="57:10" pos:end="57:17">Override</name></annotation>
	<type pos:start="58:9" pos:end="58:18"><specifier pos:start="58:9" pos:end="58:14">public</specifier> <name pos:start="58:16" pos:end="58:18">int</name></type> <name pos:start="58:20" pos:end="58:27">hashCode</name><parameter_list pos:start="58:28" pos:end="58:29">()</parameter_list> <block pos:start="58:31" pos:end="71:9">{<block_content pos:start="59:17" pos:end="70:30">
		<decl_stmt pos:start="59:17" pos:end="59:37"><decl pos:start="59:17" pos:end="59:36"><type pos:start="59:17" pos:end="59:25"><specifier pos:start="59:17" pos:end="59:21">final</specifier> <name pos:start="59:23" pos:end="59:25">int</name></type> <name pos:start="59:27" pos:end="59:31">prime</name> <init pos:start="59:33" pos:end="59:36">= <expr pos:start="59:35" pos:end="59:36"><literal type="number" pos:start="59:35" pos:end="59:36">31</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="60:17" pos:end="60:31"><decl pos:start="60:17" pos:end="60:30"><type pos:start="60:17" pos:end="60:19"><name pos:start="60:17" pos:end="60:19">int</name></type> <name pos:start="60:21" pos:end="60:26">result</name> <init pos:start="60:28" pos:end="60:30">= <expr pos:start="60:30" pos:end="60:30"><literal type="number" pos:start="60:30" pos:end="60:30">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="61:17" pos:end="61:26"><decl pos:start="61:17" pos:end="61:25"><type pos:start="61:17" pos:end="61:20"><name pos:start="61:17" pos:end="61:20">long</name></type> <name pos:start="61:22" pos:end="61:25">temp</name></decl>;</decl_stmt>
		<expr_stmt pos:start="62:17" pos:end="62:50"><expr pos:start="62:17" pos:end="62:49"><name pos:start="62:17" pos:end="62:20">temp</name> <operator pos:start="62:22" pos:end="62:22">=</operator> <call pos:start="62:24" pos:end="62:49"><name pos:start="62:24" pos:end="62:46"><name pos:start="62:24" pos:end="62:29">Double</name><operator pos:start="62:30" pos:end="62:30">.</operator><name pos:start="62:31" pos:end="62:46">doubleToLongBits</name></name><argument_list pos:start="62:47" pos:end="62:49">(<argument pos:start="62:48" pos:end="62:48"><expr pos:start="62:48" pos:end="62:48"><name pos:start="62:48" pos:end="62:48">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="63:17" pos:end="63:71"><expr pos:start="63:17" pos:end="63:70"><name pos:start="63:17" pos:end="63:22">result</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:30">prime</name> <operator pos:start="63:32" pos:end="63:32">*</operator> <name pos:start="63:34" pos:end="63:39">result</name> <operator pos:start="63:41" pos:end="63:41">+</operator> <operator pos:start="63:43" pos:end="63:43">(</operator><name pos:start="63:44" pos:end="63:46">int</name><operator pos:start="63:47" pos:end="63:47">)</operator> <operator pos:start="63:49" pos:end="63:49">(</operator><name pos:start="63:50" pos:end="63:53">temp</name> <operator pos:start="63:55" pos:end="63:55">^</operator> <operator pos:start="63:57" pos:end="63:57">(</operator><name pos:start="63:58" pos:end="63:61">temp</name> <operator pos:start="63:63" pos:end="63:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="63:67" pos:end="63:68">32</literal><operator pos:start="63:69" pos:end="63:69">)</operator><operator pos:start="63:70" pos:end="63:70">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="64:17" pos:end="64:50"><expr pos:start="64:17" pos:end="64:49"><name pos:start="64:17" pos:end="64:20">temp</name> <operator pos:start="64:22" pos:end="64:22">=</operator> <call pos:start="64:24" pos:end="64:49"><name pos:start="64:24" pos:end="64:46"><name pos:start="64:24" pos:end="64:29">Double</name><operator pos:start="64:30" pos:end="64:30">.</operator><name pos:start="64:31" pos:end="64:46">doubleToLongBits</name></name><argument_list pos:start="64:47" pos:end="64:49">(<argument pos:start="64:48" pos:end="64:48"><expr pos:start="64:48" pos:end="64:48"><name pos:start="64:48" pos:end="64:48">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="65:17" pos:end="65:71"><expr pos:start="65:17" pos:end="65:70"><name pos:start="65:17" pos:end="65:22">result</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:30">prime</name> <operator pos:start="65:32" pos:end="65:32">*</operator> <name pos:start="65:34" pos:end="65:39">result</name> <operator pos:start="65:41" pos:end="65:41">+</operator> <operator pos:start="65:43" pos:end="65:43">(</operator><name pos:start="65:44" pos:end="65:46">int</name><operator pos:start="65:47" pos:end="65:47">)</operator> <operator pos:start="65:49" pos:end="65:49">(</operator><name pos:start="65:50" pos:end="65:53">temp</name> <operator pos:start="65:55" pos:end="65:55">^</operator> <operator pos:start="65:57" pos:end="65:57">(</operator><name pos:start="65:58" pos:end="65:61">temp</name> <operator pos:start="65:63" pos:end="65:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="65:67" pos:end="65:68">32</literal><operator pos:start="65:69" pos:end="65:69">)</operator><operator pos:start="65:70" pos:end="65:70">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="66:17" pos:end="66:50"><expr pos:start="66:17" pos:end="66:49"><name pos:start="66:17" pos:end="66:20">temp</name> <operator pos:start="66:22" pos:end="66:22">=</operator> <call pos:start="66:24" pos:end="66:49"><name pos:start="66:24" pos:end="66:46"><name pos:start="66:24" pos:end="66:29">Double</name><operator pos:start="66:30" pos:end="66:30">.</operator><name pos:start="66:31" pos:end="66:46">doubleToLongBits</name></name><argument_list pos:start="66:47" pos:end="66:49">(<argument pos:start="66:48" pos:end="66:48"><expr pos:start="66:48" pos:end="66:48"><name pos:start="66:48" pos:end="66:48">z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="67:17" pos:end="67:71"><expr pos:start="67:17" pos:end="67:70"><name pos:start="67:17" pos:end="67:22">result</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <name pos:start="67:26" pos:end="67:30">prime</name> <operator pos:start="67:32" pos:end="67:32">*</operator> <name pos:start="67:34" pos:end="67:39">result</name> <operator pos:start="67:41" pos:end="67:41">+</operator> <operator pos:start="67:43" pos:end="67:43">(</operator><name pos:start="67:44" pos:end="67:46">int</name><operator pos:start="67:47" pos:end="67:47">)</operator> <operator pos:start="67:49" pos:end="67:49">(</operator><name pos:start="67:50" pos:end="67:53">temp</name> <operator pos:start="67:55" pos:end="67:55">^</operator> <operator pos:start="67:57" pos:end="67:57">(</operator><name pos:start="67:58" pos:end="67:61">temp</name> <operator pos:start="67:63" pos:end="67:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="67:67" pos:end="67:68">32</literal><operator pos:start="67:69" pos:end="67:69">)</operator><operator pos:start="67:70" pos:end="67:70">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="68:17" pos:end="68:57"><expr pos:start="68:17" pos:end="68:56"><name pos:start="68:17" pos:end="68:20">temp</name> <operator pos:start="68:22" pos:end="68:22">=</operator> <call pos:start="68:24" pos:end="68:56"><name pos:start="68:24" pos:end="68:46"><name pos:start="68:24" pos:end="68:29">Double</name><operator pos:start="68:30" pos:end="68:30">.</operator><name pos:start="68:31" pos:end="68:46">doubleToLongBits</name></name><argument_list pos:start="68:47" pos:end="68:56">(<argument pos:start="68:48" pos:end="68:55"><expr pos:start="68:48" pos:end="68:55"><name pos:start="68:48" pos:end="68:55">altitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="69:17" pos:end="69:71"><expr pos:start="69:17" pos:end="69:70"><name pos:start="69:17" pos:end="69:22">result</name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:30">prime</name> <operator pos:start="69:32" pos:end="69:32">*</operator> <name pos:start="69:34" pos:end="69:39">result</name> <operator pos:start="69:41" pos:end="69:41">+</operator> <operator pos:start="69:43" pos:end="69:43">(</operator><name pos:start="69:44" pos:end="69:46">int</name><operator pos:start="69:47" pos:end="69:47">)</operator> <operator pos:start="69:49" pos:end="69:49">(</operator><name pos:start="69:50" pos:end="69:53">temp</name> <operator pos:start="69:55" pos:end="69:55">^</operator> <operator pos:start="69:57" pos:end="69:57">(</operator><name pos:start="69:58" pos:end="69:61">temp</name> <operator pos:start="69:63" pos:end="69:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="69:67" pos:end="69:68">32</literal><operator pos:start="69:69" pos:end="69:69">)</operator><operator pos:start="69:70" pos:end="69:70">)</operator></expr>;</expr_stmt>
		<return pos:start="70:17" pos:end="70:30">return <expr pos:start="70:24" pos:end="70:29"><name pos:start="70:24" pos:end="70:29">result</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="73:9" pos:end="91:9"><annotation pos:start="73:9" pos:end="73:17">@<name pos:start="73:10" pos:end="73:17">Override</name></annotation>
	<type pos:start="74:9" pos:end="74:22"><specifier pos:start="74:9" pos:end="74:14">public</specifier> <name pos:start="74:16" pos:end="74:22">boolean</name></type> <name pos:start="74:24" pos:end="74:29">equals</name><parameter_list pos:start="74:30" pos:end="74:41">(<parameter pos:start="74:31" pos:end="74:40"><decl pos:start="74:31" pos:end="74:40"><type pos:start="74:31" pos:end="74:36"><name pos:start="74:31" pos:end="74:36">Object</name></type> <name pos:start="74:38" pos:end="74:40">obj</name></decl></parameter>)</parameter_list> <block pos:start="74:43" pos:end="91:9">{<block_content pos:start="75:17" pos:end="90:28">
		<if_stmt pos:start="75:17" pos:end="76:36"><if pos:start="75:17" pos:end="76:36">if <condition pos:start="75:20" pos:end="75:32">(<expr pos:start="75:21" pos:end="75:31"><name pos:start="75:21" pos:end="75:24">this</name> <operator pos:start="75:26" pos:end="75:27">==</operator> <name pos:start="75:29" pos:end="75:31">obj</name></expr>)</condition><block type="pseudo" pos:start="76:25" pos:end="76:36"><block_content pos:start="76:25" pos:end="76:36">
			<return pos:start="76:25" pos:end="76:36">return <expr pos:start="76:32" pos:end="76:35"><literal type="boolean" pos:start="76:32" pos:end="76:35">true</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="77:17" pos:end="78:37"><if pos:start="77:17" pos:end="78:37">if <condition pos:start="77:20" pos:end="77:32">(<expr pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:23">obj</name> <operator pos:start="77:25" pos:end="77:26">==</operator> <literal type="null" pos:start="77:28" pos:end="77:31">null</literal></expr>)</condition><block type="pseudo" pos:start="78:25" pos:end="78:37"><block_content pos:start="78:25" pos:end="78:37">
			<return pos:start="78:25" pos:end="78:37">return <expr pos:start="78:32" pos:end="78:36"><literal type="boolean" pos:start="78:32" pos:end="78:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="79:17" pos:end="80:37"><if pos:start="79:17" pos:end="80:37">if <condition pos:start="79:20" pos:end="79:46">(<expr pos:start="79:21" pos:end="79:45"><operator pos:start="79:21" pos:end="79:21">!</operator><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:25">obj</name> <operator pos:start="79:27" pos:end="79:36">instanceof</operator> <name pos:start="79:38" pos:end="79:44">NVector</name><operator pos:start="79:45" pos:end="79:45">)</operator></expr>)</condition><block type="pseudo" pos:start="80:25" pos:end="80:37"><block_content pos:start="80:25" pos:end="80:37">
			<return pos:start="80:25" pos:end="80:37">return <expr pos:start="80:32" pos:end="80:36"><literal type="boolean" pos:start="80:32" pos:end="80:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt pos:start="81:17" pos:end="81:46"><decl pos:start="81:17" pos:end="81:45"><type pos:start="81:17" pos:end="81:23"><name pos:start="81:17" pos:end="81:23">NVector</name></type> <name pos:start="81:25" pos:end="81:29">other</name> <init pos:start="81:31" pos:end="81:45">= <expr pos:start="81:33" pos:end="81:45"><operator pos:start="81:33" pos:end="81:33">(</operator><name pos:start="81:34" pos:end="81:40">NVector</name><operator pos:start="81:41" pos:end="81:41">)</operator> <name pos:start="81:43" pos:end="81:45">obj</name></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="82:17" pos:end="83:37"><if pos:start="82:17" pos:end="83:37">if <condition pos:start="82:20" pos:end="82:83">(<expr pos:start="82:21" pos:end="82:82"><call pos:start="82:21" pos:end="82:46"><name pos:start="82:21" pos:end="82:43"><name pos:start="82:21" pos:end="82:26">Double</name><operator pos:start="82:27" pos:end="82:27">.</operator><name pos:start="82:28" pos:end="82:43">doubleToLongBits</name></name><argument_list pos:start="82:44" pos:end="82:46">(<argument pos:start="82:45" pos:end="82:45"><expr pos:start="82:45" pos:end="82:45"><name pos:start="82:45" pos:end="82:45">x</name></expr></argument>)</argument_list></call> <operator pos:start="82:48" pos:end="82:49">!=</operator> <call pos:start="82:51" pos:end="82:82"><name pos:start="82:51" pos:end="82:73"><name pos:start="82:51" pos:end="82:56">Double</name><operator pos:start="82:57" pos:end="82:57">.</operator><name pos:start="82:58" pos:end="82:73">doubleToLongBits</name></name><argument_list pos:start="82:74" pos:end="82:82">(<argument pos:start="82:75" pos:end="82:81"><expr pos:start="82:75" pos:end="82:81"><name pos:start="82:75" pos:end="82:81"><name pos:start="82:75" pos:end="82:79">other</name><operator pos:start="82:80" pos:end="82:80">.</operator><name pos:start="82:81" pos:end="82:81">x</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="83:25" pos:end="83:37"><block_content pos:start="83:25" pos:end="83:37">
			<return pos:start="83:25" pos:end="83:37">return <expr pos:start="83:32" pos:end="83:36"><literal type="boolean" pos:start="83:32" pos:end="83:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="84:17" pos:end="85:37"><if pos:start="84:17" pos:end="85:37">if <condition pos:start="84:20" pos:end="84:83">(<expr pos:start="84:21" pos:end="84:82"><call pos:start="84:21" pos:end="84:46"><name pos:start="84:21" pos:end="84:43"><name pos:start="84:21" pos:end="84:26">Double</name><operator pos:start="84:27" pos:end="84:27">.</operator><name pos:start="84:28" pos:end="84:43">doubleToLongBits</name></name><argument_list pos:start="84:44" pos:end="84:46">(<argument pos:start="84:45" pos:end="84:45"><expr pos:start="84:45" pos:end="84:45"><name pos:start="84:45" pos:end="84:45">y</name></expr></argument>)</argument_list></call> <operator pos:start="84:48" pos:end="84:49">!=</operator> <call pos:start="84:51" pos:end="84:82"><name pos:start="84:51" pos:end="84:73"><name pos:start="84:51" pos:end="84:56">Double</name><operator pos:start="84:57" pos:end="84:57">.</operator><name pos:start="84:58" pos:end="84:73">doubleToLongBits</name></name><argument_list pos:start="84:74" pos:end="84:82">(<argument pos:start="84:75" pos:end="84:81"><expr pos:start="84:75" pos:end="84:81"><name pos:start="84:75" pos:end="84:81"><name pos:start="84:75" pos:end="84:79">other</name><operator pos:start="84:80" pos:end="84:80">.</operator><name pos:start="84:81" pos:end="84:81">y</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="85:25" pos:end="85:37"><block_content pos:start="85:25" pos:end="85:37">
			<return pos:start="85:25" pos:end="85:37">return <expr pos:start="85:32" pos:end="85:36"><literal type="boolean" pos:start="85:32" pos:end="85:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="86:17" pos:end="87:37"><if pos:start="86:17" pos:end="87:37">if <condition pos:start="86:20" pos:end="86:83">(<expr pos:start="86:21" pos:end="86:82"><call pos:start="86:21" pos:end="86:46"><name pos:start="86:21" pos:end="86:43"><name pos:start="86:21" pos:end="86:26">Double</name><operator pos:start="86:27" pos:end="86:27">.</operator><name pos:start="86:28" pos:end="86:43">doubleToLongBits</name></name><argument_list pos:start="86:44" pos:end="86:46">(<argument pos:start="86:45" pos:end="86:45"><expr pos:start="86:45" pos:end="86:45"><name pos:start="86:45" pos:end="86:45">z</name></expr></argument>)</argument_list></call> <operator pos:start="86:48" pos:end="86:49">!=</operator> <call pos:start="86:51" pos:end="86:82"><name pos:start="86:51" pos:end="86:73"><name pos:start="86:51" pos:end="86:56">Double</name><operator pos:start="86:57" pos:end="86:57">.</operator><name pos:start="86:58" pos:end="86:73">doubleToLongBits</name></name><argument_list pos:start="86:74" pos:end="86:82">(<argument pos:start="86:75" pos:end="86:81"><expr pos:start="86:75" pos:end="86:81"><name pos:start="86:75" pos:end="86:81"><name pos:start="86:75" pos:end="86:79">other</name><operator pos:start="86:80" pos:end="86:80">.</operator><name pos:start="86:81" pos:end="86:81">z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="87:25" pos:end="87:37"><block_content pos:start="87:25" pos:end="87:37">
			<return pos:start="87:25" pos:end="87:37">return <expr pos:start="87:32" pos:end="87:36"><literal type="boolean" pos:start="87:32" pos:end="87:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="88:17" pos:end="89:37"><if pos:start="88:17" pos:end="89:37">if <condition pos:start="88:20" pos:end="88:97">(<expr pos:start="88:21" pos:end="88:96"><call pos:start="88:21" pos:end="88:53"><name pos:start="88:21" pos:end="88:43"><name pos:start="88:21" pos:end="88:26">Double</name><operator pos:start="88:27" pos:end="88:27">.</operator><name pos:start="88:28" pos:end="88:43">doubleToLongBits</name></name><argument_list pos:start="88:44" pos:end="88:53">(<argument pos:start="88:45" pos:end="88:52"><expr pos:start="88:45" pos:end="88:52"><name pos:start="88:45" pos:end="88:52">altitude</name></expr></argument>)</argument_list></call> <operator pos:start="88:55" pos:end="88:56">!=</operator> <call pos:start="88:58" pos:end="88:96"><name pos:start="88:58" pos:end="88:80"><name pos:start="88:58" pos:end="88:63">Double</name><operator pos:start="88:64" pos:end="88:64">.</operator><name pos:start="88:65" pos:end="88:80">doubleToLongBits</name></name><argument_list pos:start="88:81" pos:end="88:96">(<argument pos:start="88:82" pos:end="88:95"><expr pos:start="88:82" pos:end="88:95"><name pos:start="88:82" pos:end="88:95"><name pos:start="88:82" pos:end="88:86">other</name><operator pos:start="88:87" pos:end="88:87">.</operator><name pos:start="88:88" pos:end="88:95">altitude</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="89:25" pos:end="89:37"><block_content pos:start="89:25" pos:end="89:37">
			<return pos:start="89:25" pos:end="89:37">return <expr pos:start="89:32" pos:end="89:36"><literal type="boolean" pos:start="89:32" pos:end="89:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<return pos:start="90:17" pos:end="90:28">return <expr pos:start="90:24" pos:end="90:27"><literal type="boolean" pos:start="90:24" pos:end="90:27">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="93:9" pos:end="96:9"><annotation pos:start="93:9" pos:end="93:17">@<name pos:start="93:10" pos:end="93:17">Override</name></annotation>
	<type pos:start="94:9" pos:end="94:21"><specifier pos:start="94:9" pos:end="94:14">public</specifier> <name pos:start="94:16" pos:end="94:21">String</name></type> <name pos:start="94:23" pos:end="94:30">toString</name><parameter_list pos:start="94:31" pos:end="94:32">()</parameter_list> <block pos:start="94:34" pos:end="96:9">{<block_content pos:start="95:17" pos:end="95:92">
		<return pos:start="95:17" pos:end="95:92">return <expr pos:start="95:24" pos:end="95:91"><call pos:start="95:24" pos:end="95:91"><name pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:29">String</name><operator pos:start="95:30" pos:end="95:30">.</operator><name pos:start="95:31" pos:end="95:36">format</name></name><argument_list pos:start="95:37" pos:end="95:91">(<argument pos:start="95:38" pos:end="95:71"><expr pos:start="95:38" pos:end="95:71"><literal type="string" pos:start="95:38" pos:end="95:71">"NVector(%f, %f, %f, altitude=%f)"</literal></expr></argument>, <argument pos:start="95:74" pos:end="95:74"><expr pos:start="95:74" pos:end="95:74"><name pos:start="95:74" pos:end="95:74">x</name></expr></argument>, <argument pos:start="95:77" pos:end="95:77"><expr pos:start="95:77" pos:end="95:77"><name pos:start="95:77" pos:end="95:77">y</name></expr></argument>, <argument pos:start="95:80" pos:end="95:80"><expr pos:start="95:80" pos:end="95:80"><name pos:start="95:80" pos:end="95:80">z</name></expr></argument>, <argument pos:start="95:83" pos:end="95:90"><expr pos:start="95:83" pos:end="95:90"><name pos:start="95:83" pos:end="95:90">altitude</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="98:9" pos:end="100:11">/**
	 * @return the distance above sea level in meters
	 */</comment>
	<function pos:start="101:9" pos:end="103:9"><type pos:start="101:9" pos:end="101:21"><specifier pos:start="101:9" pos:end="101:14">public</specifier> <name pos:start="101:16" pos:end="101:21">double</name></type> <name pos:start="101:23" pos:end="101:33">getAltitude</name><parameter_list pos:start="101:34" pos:end="101:35">()</parameter_list> <block pos:start="101:37" pos:end="103:9">{<block_content pos:start="102:17" pos:end="102:32">
		<return pos:start="102:17" pos:end="102:32">return <expr pos:start="102:24" pos:end="102:31"><name pos:start="102:24" pos:end="102:31">altitude</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="105:9" pos:end="107:11">/**
	 * @return the x component of the n-vector
	 */</comment>
	<function pos:start="108:9" pos:end="110:9"><type pos:start="108:9" pos:end="108:21"><specifier pos:start="108:9" pos:end="108:14">public</specifier> <name pos:start="108:16" pos:end="108:21">double</name></type> <name pos:start="108:23" pos:end="108:26">getX</name><parameter_list pos:start="108:27" pos:end="108:28">()</parameter_list> <block pos:start="108:30" pos:end="110:9">{<block_content pos:start="109:17" pos:end="109:25">
		<return pos:start="109:17" pos:end="109:25">return <expr pos:start="109:24" pos:end="109:24"><name pos:start="109:24" pos:end="109:24">x</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="112:9" pos:end="114:11">/**
	 * @return the y component of the n-vector
	 */</comment>
	<function pos:start="115:9" pos:end="117:9"><type pos:start="115:9" pos:end="115:21"><specifier pos:start="115:9" pos:end="115:14">public</specifier> <name pos:start="115:16" pos:end="115:21">double</name></type> <name pos:start="115:23" pos:end="115:26">getY</name><parameter_list pos:start="115:27" pos:end="115:28">()</parameter_list> <block pos:start="115:30" pos:end="117:9">{<block_content pos:start="116:17" pos:end="116:25">
		<return pos:start="116:17" pos:end="116:25">return <expr pos:start="116:24" pos:end="116:24"><name pos:start="116:24" pos:end="116:24">y</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="119:9" pos:end="121:11">/**
	 * @return the z component of the n-vector
	 */</comment>
	<function pos:start="122:9" pos:end="124:9"><type pos:start="122:9" pos:end="122:21"><specifier pos:start="122:9" pos:end="122:14">public</specifier> <name pos:start="122:16" pos:end="122:21">double</name></type> <name pos:start="122:23" pos:end="122:26">getZ</name><parameter_list pos:start="122:27" pos:end="122:28">()</parameter_list> <block pos:start="122:30" pos:end="124:9">{<block_content pos:start="123:17" pos:end="123:25">
		<return pos:start="123:17" pos:end="123:25">return <expr pos:start="123:24" pos:end="123:24"><name pos:start="123:24" pos:end="123:24">z</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="126:9" pos:end="134:11">/**
	 * Finds the distance in meters from this NVector to another.
	 * 
	 * This is the distance that a laser would travel.
	 * 
	 * @param other
	 *            the other position to find the position to.
	 * @return The distance from this position to the other in meters
	 */</comment>
	<function pos:start="135:9" pos:end="143:9"><type pos:start="135:9" pos:end="135:21"><specifier pos:start="135:9" pos:end="135:14">public</specifier> <name pos:start="135:16" pos:end="135:21">double</name></type> <name pos:start="135:23" pos:end="135:30">distance</name><parameter_list pos:start="135:31" pos:end="135:45">(<parameter pos:start="135:32" pos:end="135:44"><decl pos:start="135:32" pos:end="135:44"><type pos:start="135:32" pos:end="135:38"><name pos:start="135:32" pos:end="135:38">NVector</name></type> <name pos:start="135:40" pos:end="135:44">other</name></decl></parameter>)</parameter_list> <block pos:start="135:47" pos:end="143:9">{<block_content pos:start="136:17" pos:end="141:62">
		<decl_stmt pos:start="136:17" pos:end="136:44"><decl pos:start="136:17" pos:end="136:43"><type pos:start="136:17" pos:end="136:23"><name pos:start="136:17" pos:end="136:23">PVector</name></type> <name pos:start="136:25" pos:end="136:29">pSelf</name> <init pos:start="136:31" pos:end="136:43">= <expr pos:start="136:33" pos:end="136:43"><call pos:start="136:33" pos:end="136:43"><name pos:start="136:33" pos:end="136:41">toPVector</name><argument_list pos:start="136:42" pos:end="136:43">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="137:17" pos:end="137:51"><decl pos:start="137:17" pos:end="137:50"><type pos:start="137:17" pos:end="137:23"><name pos:start="137:17" pos:end="137:23">PVector</name></type> <name pos:start="137:25" pos:end="137:30">pOther</name> <init pos:start="137:32" pos:end="137:50">= <expr pos:start="137:34" pos:end="137:50"><call pos:start="137:34" pos:end="137:50"><name pos:start="137:34" pos:end="137:48"><name pos:start="137:34" pos:end="137:38">other</name><operator pos:start="137:39" pos:end="137:39">.</operator><name pos:start="137:40" pos:end="137:48">toPVector</name></name><argument_list pos:start="137:49" pos:end="137:50">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="138:17" pos:end="138:57"><decl pos:start="138:17" pos:end="138:56"><type pos:start="138:17" pos:end="138:22"><name pos:start="138:17" pos:end="138:22">double</name></type> <name pos:start="138:24" pos:end="138:25">dx</name> <init pos:start="138:27" pos:end="138:56">= <expr pos:start="138:29" pos:end="138:56"><call pos:start="138:29" pos:end="138:40"><name pos:start="138:29" pos:end="138:38"><name pos:start="138:29" pos:end="138:33">pSelf</name><operator pos:start="138:34" pos:end="138:34">.</operator><name pos:start="138:35" pos:end="138:38">getX</name></name><argument_list pos:start="138:39" pos:end="138:40">()</argument_list></call> <operator pos:start="138:42" pos:end="138:42">-</operator> <call pos:start="138:44" pos:end="138:56"><name pos:start="138:44" pos:end="138:54"><name pos:start="138:44" pos:end="138:49">pOther</name><operator pos:start="138:50" pos:end="138:50">.</operator><name pos:start="138:51" pos:end="138:54">getX</name></name><argument_list pos:start="138:55" pos:end="138:56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="139:17" pos:end="139:57"><decl pos:start="139:17" pos:end="139:56"><type pos:start="139:17" pos:end="139:22"><name pos:start="139:17" pos:end="139:22">double</name></type> <name pos:start="139:24" pos:end="139:25">dy</name> <init pos:start="139:27" pos:end="139:56">= <expr pos:start="139:29" pos:end="139:56"><call pos:start="139:29" pos:end="139:40"><name pos:start="139:29" pos:end="139:38"><name pos:start="139:29" pos:end="139:33">pSelf</name><operator pos:start="139:34" pos:end="139:34">.</operator><name pos:start="139:35" pos:end="139:38">getY</name></name><argument_list pos:start="139:39" pos:end="139:40">()</argument_list></call> <operator pos:start="139:42" pos:end="139:42">-</operator> <call pos:start="139:44" pos:end="139:56"><name pos:start="139:44" pos:end="139:54"><name pos:start="139:44" pos:end="139:49">pOther</name><operator pos:start="139:50" pos:end="139:50">.</operator><name pos:start="139:51" pos:end="139:54">getY</name></name><argument_list pos:start="139:55" pos:end="139:56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="140:17" pos:end="140:57"><decl pos:start="140:17" pos:end="140:56"><type pos:start="140:17" pos:end="140:22"><name pos:start="140:17" pos:end="140:22">double</name></type> <name pos:start="140:24" pos:end="140:25">dz</name> <init pos:start="140:27" pos:end="140:56">= <expr pos:start="140:29" pos:end="140:56"><call pos:start="140:29" pos:end="140:40"><name pos:start="140:29" pos:end="140:38"><name pos:start="140:29" pos:end="140:33">pSelf</name><operator pos:start="140:34" pos:end="140:34">.</operator><name pos:start="140:35" pos:end="140:38">getZ</name></name><argument_list pos:start="140:39" pos:end="140:40">()</argument_list></call> <operator pos:start="140:42" pos:end="140:42">-</operator> <call pos:start="140:44" pos:end="140:56"><name pos:start="140:44" pos:end="140:54"><name pos:start="140:44" pos:end="140:49">pOther</name><operator pos:start="140:50" pos:end="140:50">.</operator><name pos:start="140:51" pos:end="140:54">getZ</name></name><argument_list pos:start="140:55" pos:end="140:56">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="141:17" pos:end="141:62">return <expr pos:start="141:24" pos:end="141:61"><call pos:start="141:24" pos:end="141:61"><name pos:start="141:24" pos:end="141:32"><name pos:start="141:24" pos:end="141:27">Math</name><operator pos:start="141:28" pos:end="141:28">.</operator><name pos:start="141:29" pos:end="141:32">sqrt</name></name><argument_list pos:start="141:33" pos:end="141:61">(<argument pos:start="141:34" pos:end="141:60"><expr pos:start="141:34" pos:end="141:60"><name pos:start="141:34" pos:end="141:35">dx</name> <operator pos:start="141:37" pos:end="141:37">*</operator> <name pos:start="141:39" pos:end="141:40">dx</name> <operator pos:start="141:42" pos:end="141:42">+</operator> <name pos:start="141:44" pos:end="141:45">dy</name> <operator pos:start="141:47" pos:end="141:47">*</operator> <name pos:start="141:49" pos:end="141:50">dy</name> <operator pos:start="141:52" pos:end="141:52">+</operator> <name pos:start="141:54" pos:end="141:55">dz</name> <operator pos:start="141:57" pos:end="141:57">*</operator> <name pos:start="141:59" pos:end="141:60">dz</name></expr></argument>)</argument_list></call></expr>;</return>

	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="145:9" pos:end="148:11">/**
	 * @return a terrestrial position defined by an x, y, and z coordinate in an
	 *         Earth centered Earth fixed reference frame.
	 */</comment>
	<function pos:start="149:9" pos:end="169:9"><annotation pos:start="149:9" pos:end="149:17">@<name pos:start="149:10" pos:end="149:17">Override</name></annotation>
	<type pos:start="150:9" pos:end="150:22"><specifier pos:start="150:9" pos:end="150:14">public</specifier> <name pos:start="150:16" pos:end="150:22">PVector</name></type> <name pos:start="150:24" pos:end="150:32">toPVector</name><parameter_list pos:start="150:33" pos:end="150:34">()</parameter_list> <block pos:start="150:36" pos:end="169:9">{<block_content pos:start="161:17" pos:end="168:47">
		<comment type="block" pos:start="151:17" pos:end="160:19">/*
		 * The formula this code is based on can be found in a journal article
		 * called: "A Non-singular Horizontal Position Representation" by
		 * Kenneth Gade. You can find it at https://goo.gl/iCqdCn (see equation
		 * 22 in appendix B)
		 * 
		 * Note: equation 22 is unconventional as it swaps the z component with
		 * x component. This code follows the more common convention and returns
		 * z and x to their proper place
		 */</comment>
		<decl_stmt pos:start="161:17" pos:end="161:38"><decl pos:start="161:17" pos:end="161:37"><type pos:start="161:17" pos:end="161:22"><name pos:start="161:17" pos:end="161:22">double</name></type> <name pos:start="161:24" pos:end="161:24">a</name> <init pos:start="161:26" pos:end="161:37">= <expr pos:start="161:28" pos:end="161:37"><name pos:start="161:28" pos:end="161:37">SEMI_MAJOR</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="162:17" pos:end="162:38"><decl pos:start="162:17" pos:end="162:37"><type pos:start="162:17" pos:end="162:22"><name pos:start="162:17" pos:end="162:22">double</name></type> <name pos:start="162:24" pos:end="162:24">b</name> <init pos:start="162:26" pos:end="162:37">= <expr pos:start="162:28" pos:end="162:37"><name pos:start="162:28" pos:end="162:37">SEMI_MINOR</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="163:17" pos:end="163:47"><decl pos:start="163:17" pos:end="163:46"><type pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:22">double</name></type> <name pos:start="163:24" pos:end="163:26">ab2</name> <init pos:start="163:28" pos:end="163:46">= <expr pos:start="163:30" pos:end="163:46"><operator pos:start="163:30" pos:end="163:30">(</operator><name pos:start="163:31" pos:end="163:31">a</name> <operator pos:start="163:33" pos:end="163:33">*</operator> <name pos:start="163:35" pos:end="163:35">a</name><operator pos:start="163:36" pos:end="163:36">)</operator> <operator pos:start="163:38" pos:end="163:38">/</operator> <operator pos:start="163:40" pos:end="163:40">(</operator><name pos:start="163:41" pos:end="163:41">b</name> <operator pos:start="163:43" pos:end="163:43">*</operator> <name pos:start="163:45" pos:end="163:45">b</name><operator pos:start="163:46" pos:end="163:46">)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="164:17" pos:end="164:76"><decl pos:start="164:17" pos:end="164:75"><type pos:start="164:17" pos:end="164:22"><name pos:start="164:17" pos:end="164:22">double</name></type> <name pos:start="164:24" pos:end="164:24">f</name> <init pos:start="164:26" pos:end="164:75">= <expr pos:start="164:28" pos:end="164:75"><name pos:start="164:28" pos:end="164:28">b</name> <operator pos:start="164:30" pos:end="164:30">/</operator> <call pos:start="164:32" pos:end="164:75"><name pos:start="164:32" pos:end="164:40"><name pos:start="164:32" pos:end="164:35">Math</name><operator pos:start="164:36" pos:end="164:36">.</operator><name pos:start="164:37" pos:end="164:40">sqrt</name></name><argument_list pos:start="164:41" pos:end="164:75">(<argument pos:start="164:42" pos:end="164:74"><expr pos:start="164:42" pos:end="164:74"><name pos:start="164:42" pos:end="164:42">z</name> <operator pos:start="164:44" pos:end="164:44">*</operator> <name pos:start="164:46" pos:end="164:46">z</name> <operator pos:start="164:48" pos:end="164:48">+</operator> <name pos:start="164:50" pos:end="164:52">ab2</name> <operator pos:start="164:54" pos:end="164:54">*</operator> <name pos:start="164:56" pos:end="164:56">y</name> <operator pos:start="164:58" pos:end="164:58">*</operator> <name pos:start="164:60" pos:end="164:60">y</name> <operator pos:start="164:62" pos:end="164:62">+</operator> <name pos:start="164:64" pos:end="164:66">ab2</name> <operator pos:start="164:68" pos:end="164:68">*</operator> <name pos:start="164:70" pos:end="164:70">x</name> <operator pos:start="164:72" pos:end="164:72">*</operator> <name pos:start="164:74" pos:end="164:74">x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="165:17" pos:end="165:49"><decl pos:start="165:17" pos:end="165:48"><type pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">double</name></type> <name pos:start="165:24" pos:end="165:25">pz</name> <init pos:start="165:27" pos:end="165:48">= <expr pos:start="165:29" pos:end="165:48"><name pos:start="165:29" pos:end="165:29">f</name> <operator pos:start="165:31" pos:end="165:31">*</operator> <name pos:start="165:33" pos:end="165:33">z</name> <operator pos:start="165:35" pos:end="165:35">+</operator> <name pos:start="165:37" pos:end="165:44">altitude</name> <operator pos:start="165:46" pos:end="165:46">*</operator> <name pos:start="165:48" pos:end="165:48">z</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="166:17" pos:end="166:55"><decl pos:start="166:17" pos:end="166:54"><type pos:start="166:17" pos:end="166:22"><name pos:start="166:17" pos:end="166:22">double</name></type> <name pos:start="166:24" pos:end="166:25">py</name> <init pos:start="166:27" pos:end="166:54">= <expr pos:start="166:29" pos:end="166:54"><name pos:start="166:29" pos:end="166:29">f</name> <operator pos:start="166:31" pos:end="166:31">*</operator> <name pos:start="166:33" pos:end="166:35">ab2</name> <operator pos:start="166:37" pos:end="166:37">*</operator> <name pos:start="166:39" pos:end="166:39">y</name> <operator pos:start="166:41" pos:end="166:41">+</operator> <name pos:start="166:43" pos:end="166:50">altitude</name> <operator pos:start="166:52" pos:end="166:52">*</operator> <name pos:start="166:54" pos:end="166:54">y</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="167:17" pos:end="167:55"><decl pos:start="167:17" pos:end="167:54"><type pos:start="167:17" pos:end="167:22"><name pos:start="167:17" pos:end="167:22">double</name></type> <name pos:start="167:24" pos:end="167:25">px</name> <init pos:start="167:27" pos:end="167:54">= <expr pos:start="167:29" pos:end="167:54"><name pos:start="167:29" pos:end="167:29">f</name> <operator pos:start="167:31" pos:end="167:31">*</operator> <name pos:start="167:33" pos:end="167:35">ab2</name> <operator pos:start="167:37" pos:end="167:37">*</operator> <name pos:start="167:39" pos:end="167:39">x</name> <operator pos:start="167:41" pos:end="167:41">+</operator> <name pos:start="167:43" pos:end="167:50">altitude</name> <operator pos:start="167:52" pos:end="167:52">*</operator> <name pos:start="167:54" pos:end="167:54">x</name></expr></init></decl>;</decl_stmt>
		<return pos:start="168:17" pos:end="168:47">return <expr pos:start="168:24" pos:end="168:46"><operator pos:start="168:24" pos:end="168:26">new</operator> <call pos:start="168:28" pos:end="168:46"><name pos:start="168:28" pos:end="168:34">PVector</name><argument_list pos:start="168:35" pos:end="168:46">(<argument pos:start="168:36" pos:end="168:37"><expr pos:start="168:36" pos:end="168:37"><name pos:start="168:36" pos:end="168:37">px</name></expr></argument>, <argument pos:start="168:40" pos:end="168:41"><expr pos:start="168:40" pos:end="168:41"><name pos:start="168:40" pos:end="168:41">py</name></expr></argument>, <argument pos:start="168:44" pos:end="168:45"><expr pos:start="168:44" pos:end="168:45"><name pos:start="168:44" pos:end="168:45">pz</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="171:9" pos:end="174:11">/**
	 * @return a terrestrial position defined by a latitude, longitude, and
	 *         altitude.
	 */</comment>
	<function pos:start="175:9" pos:end="180:9"><annotation pos:start="175:9" pos:end="175:17">@<name pos:start="175:10" pos:end="175:17">Override</name></annotation>
	<type pos:start="176:9" pos:end="176:28"><specifier pos:start="176:9" pos:end="176:14">public</specifier> <name pos:start="176:16" pos:end="176:28">LlaCoordinate</name></type> <name pos:start="176:30" pos:end="176:44">toLlaCoordinate</name><parameter_list pos:start="176:45" pos:end="176:46">()</parameter_list> <block pos:start="176:48" pos:end="180:9">{<block_content pos:start="177:17" pos:end="179:103">
		<decl_stmt pos:start="177:17" pos:end="177:119"><decl pos:start="177:17" pos:end="177:118"><type pos:start="177:17" pos:end="177:22"><name pos:start="177:17" pos:end="177:22">double</name></type> <name pos:start="177:24" pos:end="177:26">lat</name> <init pos:start="177:28" pos:end="177:118">= <expr pos:start="177:30" pos:end="177:118"><call pos:start="177:30" pos:end="177:118"><name pos:start="177:30" pos:end="177:39"><name pos:start="177:30" pos:end="177:33">Math</name><operator pos:start="177:34" pos:end="177:34">.</operator><name pos:start="177:35" pos:end="177:39">atan2</name></name><argument_list pos:start="177:40" pos:end="177:118">(<argument pos:start="177:41" pos:end="177:51"><expr pos:start="177:41" pos:end="177:51"><call pos:start="177:41" pos:end="177:51"><name pos:start="177:41" pos:end="177:49"><name pos:start="177:41" pos:end="177:44">this</name><operator pos:start="177:45" pos:end="177:45">.</operator><name pos:start="177:46" pos:end="177:49">getZ</name></name><argument_list pos:start="177:50" pos:end="177:51">()</argument_list></call></expr></argument>, <argument pos:start="177:54" pos:end="177:117"><expr pos:start="177:54" pos:end="177:117"><call pos:start="177:54" pos:end="177:117"><name pos:start="177:54" pos:end="177:62"><name pos:start="177:54" pos:end="177:57">Math</name><operator pos:start="177:58" pos:end="177:58">.</operator><name pos:start="177:59" pos:end="177:62">sqrt</name></name><argument_list pos:start="177:63" pos:end="177:117">(<argument pos:start="177:64" pos:end="177:116"><expr pos:start="177:64" pos:end="177:116"><call pos:start="177:64" pos:end="177:74"><name pos:start="177:64" pos:end="177:72"><name pos:start="177:64" pos:end="177:67">this</name><operator pos:start="177:68" pos:end="177:68">.</operator><name pos:start="177:69" pos:end="177:72">getX</name></name><argument_list pos:start="177:73" pos:end="177:74">()</argument_list></call> <operator pos:start="177:76" pos:end="177:76">*</operator> <call pos:start="177:78" pos:end="177:88"><name pos:start="177:78" pos:end="177:86"><name pos:start="177:78" pos:end="177:81">this</name><operator pos:start="177:82" pos:end="177:82">.</operator><name pos:start="177:83" pos:end="177:86">getX</name></name><argument_list pos:start="177:87" pos:end="177:88">()</argument_list></call> <operator pos:start="177:90" pos:end="177:90">+</operator> <call pos:start="177:92" pos:end="177:102"><name pos:start="177:92" pos:end="177:100"><name pos:start="177:92" pos:end="177:95">this</name><operator pos:start="177:96" pos:end="177:96">.</operator><name pos:start="177:97" pos:end="177:100">getY</name></name><argument_list pos:start="177:101" pos:end="177:102">()</argument_list></call> <operator pos:start="177:104" pos:end="177:104">*</operator> <call pos:start="177:106" pos:end="177:116"><name pos:start="177:106" pos:end="177:114"><name pos:start="177:106" pos:end="177:109">this</name><operator pos:start="177:110" pos:end="177:110">.</operator><name pos:start="177:111" pos:end="177:114">getY</name></name><argument_list pos:start="177:115" pos:end="177:116">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="178:17" pos:end="178:66"><decl pos:start="178:17" pos:end="178:65"><type pos:start="178:17" pos:end="178:22"><name pos:start="178:17" pos:end="178:22">double</name></type> <name pos:start="178:24" pos:end="178:26">lon</name> <init pos:start="178:28" pos:end="178:65">= <expr pos:start="178:30" pos:end="178:65"><call pos:start="178:30" pos:end="178:65"><name pos:start="178:30" pos:end="178:39"><name pos:start="178:30" pos:end="178:33">Math</name><operator pos:start="178:34" pos:end="178:34">.</operator><name pos:start="178:35" pos:end="178:39">atan2</name></name><argument_list pos:start="178:40" pos:end="178:65">(<argument pos:start="178:41" pos:end="178:51"><expr pos:start="178:41" pos:end="178:51"><call pos:start="178:41" pos:end="178:51"><name pos:start="178:41" pos:end="178:49"><name pos:start="178:41" pos:end="178:44">this</name><operator pos:start="178:45" pos:end="178:45">.</operator><name pos:start="178:46" pos:end="178:49">getY</name></name><argument_list pos:start="178:50" pos:end="178:51">()</argument_list></call></expr></argument>, <argument pos:start="178:54" pos:end="178:64"><expr pos:start="178:54" pos:end="178:64"><call pos:start="178:54" pos:end="178:64"><name pos:start="178:54" pos:end="178:62"><name pos:start="178:54" pos:end="178:57">this</name><operator pos:start="178:58" pos:end="178:58">.</operator><name pos:start="178:59" pos:end="178:62">getX</name></name><argument_list pos:start="178:63" pos:end="178:64">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="179:17" pos:end="179:103">return <expr pos:start="179:24" pos:end="179:102"><operator pos:start="179:24" pos:end="179:26">new</operator> <call pos:start="179:28" pos:end="179:102"><name pos:start="179:28" pos:end="179:40">LlaCoordinate</name><argument_list pos:start="179:41" pos:end="179:102">(<argument pos:start="179:42" pos:end="179:60"><expr pos:start="179:42" pos:end="179:60"><call pos:start="179:42" pos:end="179:60"><name pos:start="179:42" pos:end="179:55"><name pos:start="179:42" pos:end="179:45">Math</name><operator pos:start="179:46" pos:end="179:46">.</operator><name pos:start="179:47" pos:end="179:55">toDegrees</name></name><argument_list pos:start="179:56" pos:end="179:60">(<argument pos:start="179:57" pos:end="179:59"><expr pos:start="179:57" pos:end="179:59"><name pos:start="179:57" pos:end="179:59">lat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:63" pos:end="179:81"><expr pos:start="179:63" pos:end="179:81"><call pos:start="179:63" pos:end="179:81"><name pos:start="179:63" pos:end="179:76"><name pos:start="179:63" pos:end="179:66">Math</name><operator pos:start="179:67" pos:end="179:67">.</operator><name pos:start="179:68" pos:end="179:76">toDegrees</name></name><argument_list pos:start="179:77" pos:end="179:81">(<argument pos:start="179:78" pos:end="179:80"><expr pos:start="179:78" pos:end="179:80"><name pos:start="179:78" pos:end="179:80">lon</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:84" pos:end="179:101"><expr pos:start="179:84" pos:end="179:101"><call pos:start="179:84" pos:end="179:101"><name pos:start="179:84" pos:end="179:99"><name pos:start="179:84" pos:end="179:87">this</name><operator pos:start="179:88" pos:end="179:88">.</operator><name pos:start="179:89" pos:end="179:99">getAltitude</name></name><argument_list pos:start="179:100" pos:end="179:101">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="182:9" pos:end="189:9"><type pos:start="182:9" pos:end="182:28"><specifier pos:start="182:9" pos:end="182:14">public</specifier> <specifier pos:start="182:16" pos:end="182:21">static</specifier> <name pos:start="182:23" pos:end="182:28">double</name></type> <name pos:start="182:30" pos:end="182:42">laserDistance</name><parameter_list pos:start="182:43" pos:end="182:64">(<parameter pos:start="182:44" pos:end="182:52"><decl pos:start="182:44" pos:end="182:52"><type pos:start="182:44" pos:end="182:52"><name pos:start="182:44" pos:end="182:50">NVector</name></type> <name pos:start="182:52" pos:end="182:52">a</name></decl></parameter>, <parameter pos:start="182:55" pos:end="182:63"><decl pos:start="182:55" pos:end="182:63"><type pos:start="182:55" pos:end="182:63"><name pos:start="182:55" pos:end="182:61">NVector</name></type> <name pos:start="182:63" pos:end="182:63">b</name></decl></parameter>)</parameter_list> <block pos:start="182:66" pos:end="189:9">{<block_content pos:start="183:17" pos:end="188:62">
		<decl_stmt pos:start="183:17" pos:end="183:43"><decl pos:start="183:17" pos:end="183:42"><type pos:start="183:17" pos:end="183:23"><name pos:start="183:17" pos:end="183:23">PVector</name></type> <name pos:start="183:25" pos:end="183:26">pa</name> <init pos:start="183:28" pos:end="183:42">= <expr pos:start="183:30" pos:end="183:42"><call pos:start="183:30" pos:end="183:42"><name pos:start="183:30" pos:end="183:40"><name pos:start="183:30" pos:end="183:30">a</name><operator pos:start="183:31" pos:end="183:31">.</operator><name pos:start="183:32" pos:end="183:40">toPVector</name></name><argument_list pos:start="183:41" pos:end="183:42">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="184:17" pos:end="184:43"><decl pos:start="184:17" pos:end="184:42"><type pos:start="184:17" pos:end="184:23"><name pos:start="184:17" pos:end="184:23">PVector</name></type> <name pos:start="184:25" pos:end="184:26">pb</name> <init pos:start="184:28" pos:end="184:42">= <expr pos:start="184:30" pos:end="184:42"><call pos:start="184:30" pos:end="184:42"><name pos:start="184:30" pos:end="184:40"><name pos:start="184:30" pos:end="184:30">b</name><operator pos:start="184:31" pos:end="184:31">.</operator><name pos:start="184:32" pos:end="184:40">toPVector</name></name><argument_list pos:start="184:41" pos:end="184:42">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="185:17" pos:end="185:50"><decl pos:start="185:17" pos:end="185:49"><type pos:start="185:17" pos:end="185:22"><name pos:start="185:17" pos:end="185:22">double</name></type> <name pos:start="185:24" pos:end="185:25">dx</name> <init pos:start="185:27" pos:end="185:49">= <expr pos:start="185:29" pos:end="185:49"><call pos:start="185:29" pos:end="185:37"><name pos:start="185:29" pos:end="185:35"><name pos:start="185:29" pos:end="185:30">pa</name><operator pos:start="185:31" pos:end="185:31">.</operator><name pos:start="185:32" pos:end="185:35">getX</name></name><argument_list pos:start="185:36" pos:end="185:37">()</argument_list></call> <operator pos:start="185:39" pos:end="185:39">-</operator> <call pos:start="185:41" pos:end="185:49"><name pos:start="185:41" pos:end="185:47"><name pos:start="185:41" pos:end="185:42">pb</name><operator pos:start="185:43" pos:end="185:43">.</operator><name pos:start="185:44" pos:end="185:47">getX</name></name><argument_list pos:start="185:48" pos:end="185:49">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="186:17" pos:end="186:50"><decl pos:start="186:17" pos:end="186:49"><type pos:start="186:17" pos:end="186:22"><name pos:start="186:17" pos:end="186:22">double</name></type> <name pos:start="186:24" pos:end="186:25">dy</name> <init pos:start="186:27" pos:end="186:49">= <expr pos:start="186:29" pos:end="186:49"><call pos:start="186:29" pos:end="186:37"><name pos:start="186:29" pos:end="186:35"><name pos:start="186:29" pos:end="186:30">pa</name><operator pos:start="186:31" pos:end="186:31">.</operator><name pos:start="186:32" pos:end="186:35">getY</name></name><argument_list pos:start="186:36" pos:end="186:37">()</argument_list></call> <operator pos:start="186:39" pos:end="186:39">-</operator> <call pos:start="186:41" pos:end="186:49"><name pos:start="186:41" pos:end="186:47"><name pos:start="186:41" pos:end="186:42">pb</name><operator pos:start="186:43" pos:end="186:43">.</operator><name pos:start="186:44" pos:end="186:47">getY</name></name><argument_list pos:start="186:48" pos:end="186:49">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="187:17" pos:end="187:50"><decl pos:start="187:17" pos:end="187:49"><type pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">double</name></type> <name pos:start="187:24" pos:end="187:25">dz</name> <init pos:start="187:27" pos:end="187:49">= <expr pos:start="187:29" pos:end="187:49"><call pos:start="187:29" pos:end="187:37"><name pos:start="187:29" pos:end="187:35"><name pos:start="187:29" pos:end="187:30">pa</name><operator pos:start="187:31" pos:end="187:31">.</operator><name pos:start="187:32" pos:end="187:35">getZ</name></name><argument_list pos:start="187:36" pos:end="187:37">()</argument_list></call> <operator pos:start="187:39" pos:end="187:39">-</operator> <call pos:start="187:41" pos:end="187:49"><name pos:start="187:41" pos:end="187:47"><name pos:start="187:41" pos:end="187:42">pb</name><operator pos:start="187:43" pos:end="187:43">.</operator><name pos:start="187:44" pos:end="187:47">getZ</name></name><argument_list pos:start="187:48" pos:end="187:49">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="188:17" pos:end="188:62">return <expr pos:start="188:24" pos:end="188:61"><call pos:start="188:24" pos:end="188:61"><name pos:start="188:24" pos:end="188:32"><name pos:start="188:24" pos:end="188:27">Math</name><operator pos:start="188:28" pos:end="188:28">.</operator><name pos:start="188:29" pos:end="188:32">sqrt</name></name><argument_list pos:start="188:33" pos:end="188:61">(<argument pos:start="188:34" pos:end="188:60"><expr pos:start="188:34" pos:end="188:60"><name pos:start="188:34" pos:end="188:35">dx</name> <operator pos:start="188:37" pos:end="188:37">*</operator> <name pos:start="188:39" pos:end="188:40">dx</name> <operator pos:start="188:42" pos:end="188:42">+</operator> <name pos:start="188:44" pos:end="188:45">dy</name> <operator pos:start="188:47" pos:end="188:47">*</operator> <name pos:start="188:49" pos:end="188:50">dy</name> <operator pos:start="188:52" pos:end="188:52">+</operator> <name pos:start="188:54" pos:end="188:55">dz</name> <operator pos:start="188:57" pos:end="188:57">*</operator> <name pos:start="188:59" pos:end="188:60">dz</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="191:9" pos:end="200:9"><type pos:start="191:9" pos:end="191:28"><specifier pos:start="191:9" pos:end="191:14">public</specifier> <specifier pos:start="191:16" pos:end="191:21">static</specifier> <name pos:start="191:23" pos:end="191:28">double</name></type> <name pos:start="191:30" pos:end="191:43">travelDistance</name><parameter_list pos:start="191:44" pos:end="191:86">(<parameter pos:start="191:45" pos:end="191:53"><decl pos:start="191:45" pos:end="191:53"><type pos:start="191:45" pos:end="191:53"><name pos:start="191:45" pos:end="191:51">NVector</name></type> <name pos:start="191:53" pos:end="191:53">a</name></decl></parameter>, <parameter pos:start="191:56" pos:end="191:64"><decl pos:start="191:56" pos:end="191:64"><type pos:start="191:56" pos:end="191:64"><name pos:start="191:56" pos:end="191:62">NVector</name></type> <name pos:start="191:64" pos:end="191:64">b</name></decl></parameter>, <parameter pos:start="191:67" pos:end="191:85"><decl pos:start="191:67" pos:end="191:85"><type pos:start="191:67" pos:end="191:85"><name pos:start="191:67" pos:end="191:72">double</name></type> <name pos:start="191:74" pos:end="191:85">stepDistance</name></decl></parameter>)</parameter_list> <block pos:start="191:88" pos:end="200:9">{<block_content pos:start="192:17" pos:end="199:28">
		<decl_stmt pos:start="192:17" pos:end="192:34"><decl pos:start="192:17" pos:end="192:33"><type pos:start="192:17" pos:end="192:22"><name pos:start="192:17" pos:end="192:22">double</name></type> <name pos:start="192:24" pos:end="192:27">dist</name> <init pos:start="192:29" pos:end="192:33">= <expr pos:start="192:31" pos:end="192:33"><literal type="number" pos:start="192:31" pos:end="192:33">0.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="193:17" pos:end="193:36"><decl pos:start="193:17" pos:end="193:35"><type pos:start="193:17" pos:end="193:23"><name pos:start="193:17" pos:end="193:23">NVector</name></type> <name pos:start="193:25" pos:end="193:31">current</name> <init pos:start="193:33" pos:end="193:35">= <expr pos:start="193:35" pos:end="193:35"><name pos:start="193:35" pos:end="193:35">a</name></expr></init></decl>;</decl_stmt>
		<while pos:start="194:17" pos:end="197:17">while <condition pos:start="194:23" pos:end="194:58">(<expr pos:start="194:24" pos:end="194:57"><call pos:start="194:24" pos:end="194:42"><name pos:start="194:24" pos:end="194:39"><name pos:start="194:24" pos:end="194:30">current</name><operator pos:start="194:31" pos:end="194:31">.</operator><name pos:start="194:32" pos:end="194:39">distance</name></name><argument_list pos:start="194:40" pos:end="194:42">(<argument pos:start="194:41" pos:end="194:41"><expr pos:start="194:41" pos:end="194:41"><name pos:start="194:41" pos:end="194:41">b</name></expr></argument>)</argument_list></call> <operator pos:start="194:44" pos:end="194:44">&gt;</operator> <name pos:start="194:46" pos:end="194:57">stepDistance</name></expr>)</condition> <block pos:start="194:60" pos:end="197:17">{<block_content pos:start="195:25" pos:end="196:45">
			<expr_stmt pos:start="195:25" pos:end="195:73"><expr pos:start="195:25" pos:end="195:72"><name pos:start="195:25" pos:end="195:31">current</name> <operator pos:start="195:33" pos:end="195:33">=</operator> <call pos:start="195:35" pos:end="195:72"><name pos:start="195:35" pos:end="195:55"><name pos:start="195:35" pos:end="195:50">NvecInterpolator</name><operator pos:start="195:51" pos:end="195:51">.</operator><name pos:start="195:52" pos:end="195:55">move</name></name><argument_list pos:start="195:56" pos:end="195:72">(<argument pos:start="195:57" pos:end="195:63"><expr pos:start="195:57" pos:end="195:63"><name pos:start="195:57" pos:end="195:63">current</name></expr></argument>, <argument pos:start="195:66" pos:end="195:66"><expr pos:start="195:66" pos:end="195:66"><name pos:start="195:66" pos:end="195:66">b</name></expr></argument>, <argument pos:start="195:69" pos:end="195:71"><expr pos:start="195:69" pos:end="195:71"><literal type="number" pos:start="195:69" pos:end="195:71">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="196:25" pos:end="196:45"><expr pos:start="196:25" pos:end="196:44"><name pos:start="196:25" pos:end="196:28">dist</name> <operator pos:start="196:30" pos:end="196:31">+=</operator> <name pos:start="196:33" pos:end="196:44">stepDistance</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt pos:start="198:17" pos:end="198:44"><expr pos:start="198:17" pos:end="198:43"><name pos:start="198:17" pos:end="198:20">dist</name> <operator pos:start="198:22" pos:end="198:23">+=</operator> <call pos:start="198:25" pos:end="198:43"><name pos:start="198:25" pos:end="198:40"><name pos:start="198:25" pos:end="198:31">current</name><operator pos:start="198:32" pos:end="198:32">.</operator><name pos:start="198:33" pos:end="198:40">distance</name></name><argument_list pos:start="198:41" pos:end="198:43">(<argument pos:start="198:42" pos:end="198:42"><expr pos:start="198:42" pos:end="198:42"><name pos:start="198:42" pos:end="198:42">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="199:17" pos:end="199:28">return <expr pos:start="199:24" pos:end="199:27"><name pos:start="199:24" pos:end="199:27">dist</name></expr>;</return>
	</block_content>}</block></function>
	
	<function pos:start="202:9" pos:end="204:9"><type pos:start="202:9" pos:end="202:28"><specifier pos:start="202:9" pos:end="202:14">public</specifier> <specifier pos:start="202:16" pos:end="202:21">static</specifier> <name pos:start="202:23" pos:end="202:28">double</name></type> <name pos:start="202:30" pos:end="202:43">travelDistance</name><parameter_list pos:start="202:44" pos:end="202:65">(<parameter pos:start="202:45" pos:end="202:53"><decl pos:start="202:45" pos:end="202:53"><type pos:start="202:45" pos:end="202:53"><name pos:start="202:45" pos:end="202:51">NVector</name></type> <name pos:start="202:53" pos:end="202:53">a</name></decl></parameter>, <parameter pos:start="202:56" pos:end="202:64"><decl pos:start="202:56" pos:end="202:64"><type pos:start="202:56" pos:end="202:64"><name pos:start="202:56" pos:end="202:62">NVector</name></type> <name pos:start="202:64" pos:end="202:64">b</name></decl></parameter>)</parameter_list> <block pos:start="202:67" pos:end="204:9">{<block_content pos:start="203:17" pos:end="203:49">
		<return pos:start="203:17" pos:end="203:49">return <expr pos:start="203:24" pos:end="203:48"><call pos:start="203:24" pos:end="203:48"><name pos:start="203:24" pos:end="203:37">travelDistance</name><argument_list pos:start="203:38" pos:end="203:48">(<argument pos:start="203:39" pos:end="203:39"><expr pos:start="203:39" pos:end="203:39"><name pos:start="203:39" pos:end="203:39">a</name></expr></argument>, <argument pos:start="203:42" pos:end="203:42"><expr pos:start="203:42" pos:end="203:42"><name pos:start="203:42" pos:end="203:42">b</name></expr></argument>, <argument pos:start="203:45" pos:end="203:47"><expr pos:start="203:45" pos:end="203:47"><literal type="number" pos:start="203:45" pos:end="203:47">1.0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>
