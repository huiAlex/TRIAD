<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="flatCode/AbstractPosition.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:41">package <name pos:start="1:9" pos:end="1:40"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:29">core</name><operator pos:start="1:30" pos:end="1:30">.</operator><name pos:start="1:31" pos:end="1:40">coordinate</name></name>;</package>

<import pos:start="3:1" pos:end="3:67">import <name pos:start="3:8" pos:end="3:66"><name pos:start="3:8" pos:end="3:10">org</name><operator pos:start="3:11" pos:end="3:11">.</operator><name pos:start="3:12" pos:end="3:17">apache</name><operator pos:start="3:18" pos:end="3:18">.</operator><name pos:start="3:19" pos:end="3:25">commons</name><operator pos:start="3:26" pos:end="3:26">.</operator><name pos:start="3:27" pos:end="3:31">math3</name><operator pos:start="3:32" pos:end="3:32">.</operator><name pos:start="3:33" pos:end="3:40">geometry</name><operator pos:start="3:41" pos:end="3:41">.</operator><name pos:start="3:42" pos:end="3:50">euclidean</name><operator pos:start="3:51" pos:end="3:51">.</operator><name pos:start="3:52" pos:end="3:57">threed</name><operator pos:start="3:58" pos:end="3:58">.</operator><name pos:start="3:59" pos:end="3:66">Vector3D</name></name>;</import>
<import pos:start="4:1" pos:end="4:60">import <name pos:start="4:8" pos:end="4:59"><name pos:start="4:8" pos:end="4:10">org</name><operator pos:start="4:11" pos:end="4:11">.</operator><name pos:start="4:12" pos:end="4:17">apache</name><operator pos:start="4:18" pos:end="4:18">.</operator><name pos:start="4:19" pos:end="4:25">commons</name><operator pos:start="4:26" pos:end="4:26">.</operator><name pos:start="4:27" pos:end="4:31">math3</name><operator pos:start="4:32" pos:end="4:32">.</operator><name pos:start="4:33" pos:end="4:38">linear</name><operator pos:start="4:39" pos:end="4:39">.</operator><name pos:start="4:40" pos:end="4:59">Array2DRowRealMatrix</name></name>;</import>
<import pos:start="5:1" pos:end="5:50">import <name pos:start="5:8" pos:end="5:49"><name pos:start="5:8" pos:end="5:10">org</name><operator pos:start="5:11" pos:end="5:11">.</operator><name pos:start="5:12" pos:end="5:17">apache</name><operator pos:start="5:18" pos:end="5:18">.</operator><name pos:start="5:19" pos:end="5:25">commons</name><operator pos:start="5:26" pos:end="5:26">.</operator><name pos:start="5:27" pos:end="5:31">math3</name><operator pos:start="5:32" pos:end="5:32">.</operator><name pos:start="5:33" pos:end="5:38">linear</name><operator pos:start="5:39" pos:end="5:39">.</operator><name pos:start="5:40" pos:end="5:49">RealMatrix</name></name>;</import>

<comment type="block" format="javadoc" pos:start="7:1" pos:end="13:3">/**
 * A terrestrial position in WGS-84. this class implements utility methods for
 * subclasses.
 * 
 * @author Michael Murphy
 *
 */</comment> 
<class pos:start="14:1" pos:end="137:1"><specifier pos:start="14:1" pos:end="14:6">public</specifier> <specifier pos:start="14:8" pos:end="14:15">abstract</specifier> class <name pos:start="14:23" pos:end="14:38">AbstractPosition</name> <block pos:start="14:40" pos:end="137:1">{

	<comment type="block" format="javadoc" pos:start="16:9" pos:end="20:11">/**
	 * Convert this position if necessary to an NVector.
	 * 
	 * @return a terrestrial position defined an NVector and an altitude.
	 */</comment>
	<function_decl pos:start="21:9" pos:end="21:44"><type pos:start="21:9" pos:end="21:31"><specifier pos:start="21:9" pos:end="21:14">public</specifier> <specifier pos:start="21:16" pos:end="21:23">abstract</specifier> <name pos:start="21:25" pos:end="21:31">NVector</name></type> <name pos:start="21:33" pos:end="21:41">toNVector</name><parameter_list pos:start="21:42" pos:end="21:43">()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc" pos:start="23:9" pos:end="27:11">/**
	 * Convert this position if necessary to a PVector.
	 * 
	 * @return a terrestrial position defined an X, Y and Z coordinate.
	 */</comment>
	<function_decl pos:start="28:9" pos:end="28:44"><type pos:start="28:9" pos:end="28:31"><specifier pos:start="28:9" pos:end="28:14">public</specifier> <specifier pos:start="28:16" pos:end="28:23">abstract</specifier> <name pos:start="28:25" pos:end="28:31">PVector</name></type> <name pos:start="28:33" pos:end="28:41">toPVector</name><parameter_list pos:start="28:42" pos:end="28:43">()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc" pos:start="30:9" pos:end="35:11">/**
	 * Convert this position if necessary to an LlaCoordinate.
	 * 
	 * @return a terrestrial position defined by a latitude, longitude, and
	 *         altitude.
	 */</comment>
	<function_decl pos:start="36:9" pos:end="36:56"><type pos:start="36:9" pos:end="36:37"><specifier pos:start="36:9" pos:end="36:14">public</specifier> <specifier pos:start="36:16" pos:end="36:23">abstract</specifier> <name pos:start="36:25" pos:end="36:37">LlaCoordinate</name></type> <name pos:start="36:39" pos:end="36:53">toLlaCoordinate</name><parameter_list pos:start="36:54" pos:end="36:55">()</parameter_list>;</function_decl>

	<comment type="block" format="javadoc" pos:start="38:9" pos:end="45:11">/**
	 * Calculates the distance from this position to other position. This is the
	 * distance a laser bean would travel to reach the other point.
	 * 
	 * @param other
	 *            the position of the point to calculate the distance to.
	 * @return the distance to the other position in meters
	 */</comment>
	<function pos:start="46:9" pos:end="48:9"><type pos:start="46:9" pos:end="46:21"><specifier pos:start="46:9" pos:end="46:14">public</specifier> <name pos:start="46:16" pos:end="46:21">double</name></type> <name pos:start="46:23" pos:end="46:30">distance</name><parameter_list pos:start="46:31" pos:end="46:54">(<parameter pos:start="46:32" pos:end="46:53"><decl pos:start="46:32" pos:end="46:53"><type pos:start="46:32" pos:end="46:47"><name pos:start="46:32" pos:end="46:47">AbstractPosition</name></type> <name pos:start="46:49" pos:end="46:53">other</name></decl></parameter>)</parameter_list> <block pos:start="46:56" pos:end="48:9">{<block_content pos:start="47:17" pos:end="47:82">
		<return pos:start="47:17" pos:end="47:82">return <expr pos:start="47:24" pos:end="47:81"><call pos:start="47:24" pos:end="47:81"><name pos:start="47:24" pos:end="47:44"><name pos:start="47:24" pos:end="47:30">NVector</name><operator pos:start="47:31" pos:end="47:31">.</operator><name pos:start="47:32" pos:end="47:44">laserDistance</name></name><argument_list pos:start="47:45" pos:end="47:81">(<argument pos:start="47:46" pos:end="47:61"><expr pos:start="47:46" pos:end="47:61"><call pos:start="47:46" pos:end="47:61"><name pos:start="47:46" pos:end="47:59"><name pos:start="47:46" pos:end="47:49">this</name><operator pos:start="47:50" pos:end="47:50">.</operator><name pos:start="47:51" pos:end="47:59">toNVector</name></name><argument_list pos:start="47:60" pos:end="47:61">()</argument_list></call></expr></argument>, <argument pos:start="47:64" pos:end="47:80"><expr pos:start="47:64" pos:end="47:80"><call pos:start="47:64" pos:end="47:80"><name pos:start="47:64" pos:end="47:78"><name pos:start="47:64" pos:end="47:68">other</name><operator pos:start="47:69" pos:end="47:69">.</operator><name pos:start="47:70" pos:end="47:78">toNVector</name></name><argument_list pos:start="47:79" pos:end="47:80">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="50:9" pos:end="61:11">/**
	 * Calculates the distance a drone would realistically travel to get from
	 * this position to the other position.
	 * 
	 * Warning! this code is slow. The time it takes to run is proportional to the
	 * distance from this to other.
	 * 
	 * @param other
	 *            the position of the point to calculate the distance to.
	 * @return the distance a drone would need to travel to get to the other
	 *         position in meters
	 */</comment>
	<function pos:start="62:9" pos:end="64:9"><type pos:start="62:9" pos:end="62:21"><specifier pos:start="62:9" pos:end="62:14">public</specifier> <name pos:start="62:16" pos:end="62:21">double</name></type> <name pos:start="62:23" pos:end="62:36">travelDistance</name><parameter_list pos:start="62:37" pos:end="62:60">(<parameter pos:start="62:38" pos:end="62:59"><decl pos:start="62:38" pos:end="62:59"><type pos:start="62:38" pos:end="62:53"><name pos:start="62:38" pos:end="62:53">AbstractPosition</name></type> <name pos:start="62:55" pos:end="62:59">other</name></decl></parameter>)</parameter_list> <block pos:start="62:62" pos:end="64:9">{<block_content pos:start="63:17" pos:end="63:83">
		<return pos:start="63:17" pos:end="63:83">return <expr pos:start="63:24" pos:end="63:82"><call pos:start="63:24" pos:end="63:82"><name pos:start="63:24" pos:end="63:45"><name pos:start="63:24" pos:end="63:30">NVector</name><operator pos:start="63:31" pos:end="63:31">.</operator><name pos:start="63:32" pos:end="63:45">travelDistance</name></name><argument_list pos:start="63:46" pos:end="63:82">(<argument pos:start="63:47" pos:end="63:62"><expr pos:start="63:47" pos:end="63:62"><call pos:start="63:47" pos:end="63:62"><name pos:start="63:47" pos:end="63:60"><name pos:start="63:47" pos:end="63:50">this</name><operator pos:start="63:51" pos:end="63:51">.</operator><name pos:start="63:52" pos:end="63:60">toNVector</name></name><argument_list pos:start="63:61" pos:end="63:62">()</argument_list></call></expr></argument>, <argument pos:start="63:65" pos:end="63:81"><expr pos:start="63:65" pos:end="63:81"><call pos:start="63:65" pos:end="63:81"><name pos:start="63:65" pos:end="63:79"><name pos:start="63:65" pos:end="63:69">other</name><operator pos:start="63:70" pos:end="63:70">.</operator><name pos:start="63:71" pos:end="63:79">toNVector</name></name><argument_list pos:start="63:80" pos:end="63:81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="66:9" pos:end="82:11">/**
	 * Calculate the rotation matrix representation of this position. This
	 * rotation matrix can take displacement vectors in ECEF coordinates and
	 * rotate them into NED coordinates at this position.
	 * 
	 * This position cannot be at the poles as north and east directions don't
	 * make sense there.
	 * 
	 * This is the matrix inverse of equation 11 in &lt;a href=
	 * "http://www.navlab.net/Publications/A_Nonsingular_Horizontal_Position_Representation.pdf"&gt;this
	 * paper.&lt;/a&gt;
	 * 
	 * 
	 * @return a 3x3 rotation matrix where the rows can be interpreted as
	 *         unit vectors pointing in the north, east and down directions
	 *         respectively.
	 */</comment>
	<function pos:start="83:9" pos:end="92:9"><type pos:start="83:9" pos:end="83:25"><specifier pos:start="83:9" pos:end="83:14">public</specifier> <name pos:start="83:16" pos:end="83:25">RealMatrix</name></type> <name pos:start="83:27" pos:end="83:37">toRotMatrix</name><parameter_list pos:start="83:38" pos:end="83:39">()</parameter_list> <block pos:start="83:41" pos:end="92:9">{<block_content pos:start="84:17" pos:end="91:54">
		<decl_stmt pos:start="84:17" pos:end="84:45"><decl pos:start="84:17" pos:end="84:44"><type pos:start="84:17" pos:end="84:23"><name pos:start="84:17" pos:end="84:23">NVector</name></type> <name pos:start="84:25" pos:end="84:25">n</name> <init pos:start="84:27" pos:end="84:44">= <expr pos:start="84:29" pos:end="84:44"><call pos:start="84:29" pos:end="84:44"><name pos:start="84:29" pos:end="84:42"><name pos:start="84:29" pos:end="84:32">this</name><operator pos:start="84:33" pos:end="84:33">.</operator><name pos:start="84:34" pos:end="84:42">toNVector</name></name><argument_list pos:start="84:43" pos:end="84:44">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="85:17" pos:end="85:75"><decl pos:start="85:17" pos:end="85:74"><type pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:24">Vector3D</name></type> <name pos:start="85:26" pos:end="85:29">nvec</name> <init pos:start="85:31" pos:end="85:74">= <expr pos:start="85:33" pos:end="85:74"><operator pos:start="85:33" pos:end="85:35">new</operator> <call pos:start="85:37" pos:end="85:74"><name pos:start="85:37" pos:end="85:44">Vector3D</name><argument_list pos:start="85:45" pos:end="85:74">(<argument pos:start="85:46" pos:end="85:53"><expr pos:start="85:46" pos:end="85:53"><call pos:start="85:46" pos:end="85:53"><name pos:start="85:46" pos:end="85:51"><name pos:start="85:46" pos:end="85:46">n</name><operator pos:start="85:47" pos:end="85:47">.</operator><name pos:start="85:48" pos:end="85:51">getX</name></name><argument_list pos:start="85:52" pos:end="85:53">()</argument_list></call></expr></argument>, <argument pos:start="85:56" pos:end="85:63"><expr pos:start="85:56" pos:end="85:63"><call pos:start="85:56" pos:end="85:63"><name pos:start="85:56" pos:end="85:61"><name pos:start="85:56" pos:end="85:56">n</name><operator pos:start="85:57" pos:end="85:57">.</operator><name pos:start="85:58" pos:end="85:61">getY</name></name><argument_list pos:start="85:62" pos:end="85:63">()</argument_list></call></expr></argument>, <argument pos:start="85:66" pos:end="85:73"><expr pos:start="85:66" pos:end="85:73"><call pos:start="85:66" pos:end="85:73"><name pos:start="85:66" pos:end="85:71"><name pos:start="85:66" pos:end="85:66">n</name><operator pos:start="85:67" pos:end="85:67">.</operator><name pos:start="85:68" pos:end="85:71">getZ</name></name><argument_list pos:start="85:72" pos:end="85:73">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="86:17" pos:end="86:51"><decl pos:start="86:17" pos:end="86:50"><type pos:start="86:17" pos:end="86:24"><name pos:start="86:17" pos:end="86:24">Vector3D</name></type> <name pos:start="86:26" pos:end="86:26">z</name> <init pos:start="86:28" pos:end="86:50">= <expr pos:start="86:30" pos:end="86:50"><operator pos:start="86:30" pos:end="86:32">new</operator> <call pos:start="86:34" pos:end="86:50"><name pos:start="86:34" pos:end="86:41">Vector3D</name><argument_list pos:start="86:42" pos:end="86:50">(<argument pos:start="86:43" pos:end="86:43"><expr pos:start="86:43" pos:end="86:43"><literal type="number" pos:start="86:43" pos:end="86:43">0</literal></expr></argument>, <argument pos:start="86:46" pos:end="86:46"><expr pos:start="86:46" pos:end="86:46"><literal type="number" pos:start="86:46" pos:end="86:46">0</literal></expr></argument>, <argument pos:start="86:49" pos:end="86:49"><expr pos:start="86:49" pos:end="86:49"><literal type="number" pos:start="86:49" pos:end="86:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="87:17" pos:end="87:65"><decl pos:start="87:17" pos:end="87:64"><type pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:24">Vector3D</name></type> <name pos:start="87:26" pos:end="87:29">east</name> <init pos:start="87:31" pos:end="87:64">= <expr pos:start="87:33" pos:end="87:64"><call pos:start="87:33" pos:end="87:52"><name pos:start="87:33" pos:end="87:46"><name pos:start="87:33" pos:end="87:33">z</name><operator pos:start="87:34" pos:end="87:34">.</operator><name pos:start="87:35" pos:end="87:46">crossProduct</name></name><argument_list pos:start="87:47" pos:end="87:52">(<argument pos:start="87:48" pos:end="87:51"><expr pos:start="87:48" pos:end="87:51"><name pos:start="87:48" pos:end="87:51">nvec</name></expr></argument>)</argument_list></call><operator pos:start="87:53" pos:end="87:53">.</operator><call pos:start="87:54" pos:end="87:64"><name pos:start="87:54" pos:end="87:62">normalize</name><argument_list pos:start="87:63" pos:end="87:64">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="88:17" pos:end="88:69"><decl pos:start="88:17" pos:end="88:68"><type pos:start="88:17" pos:end="88:24"><name pos:start="88:17" pos:end="88:24">Vector3D</name></type> <name pos:start="88:26" pos:end="88:30">north</name> <init pos:start="88:32" pos:end="88:68">= <expr pos:start="88:34" pos:end="88:68"><call pos:start="88:34" pos:end="88:56"><name pos:start="88:34" pos:end="88:50"><name pos:start="88:34" pos:end="88:37">nvec</name><operator pos:start="88:38" pos:end="88:38">.</operator><name pos:start="88:39" pos:end="88:50">crossProduct</name></name><argument_list pos:start="88:51" pos:end="88:56">(<argument pos:start="88:52" pos:end="88:55"><expr pos:start="88:52" pos:end="88:55"><name pos:start="88:52" pos:end="88:55">east</name></expr></argument>)</argument_list></call><operator pos:start="88:57" pos:end="88:57">.</operator><call pos:start="88:58" pos:end="88:68"><name pos:start="88:58" pos:end="88:66">normalize</name><argument_list pos:start="88:67" pos:end="88:68">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="89:17" pos:end="89:46"><decl pos:start="89:17" pos:end="89:45"><type pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:24">Vector3D</name></type> <name pos:start="89:26" pos:end="89:29">down</name> <init pos:start="89:31" pos:end="89:45">= <expr pos:start="89:33" pos:end="89:45"><call pos:start="89:33" pos:end="89:45"><name pos:start="89:33" pos:end="89:43"><name pos:start="89:33" pos:end="89:36">nvec</name><operator pos:start="89:37" pos:end="89:37">.</operator><name pos:start="89:38" pos:end="89:43">negate</name></name><argument_list pos:start="89:44" pos:end="89:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="90:17" pos:end="90:86"><decl pos:start="90:17" pos:end="90:85"><type pos:start="90:17" pos:end="90:26"><name pos:start="90:17" pos:end="90:26"><name pos:start="90:17" pos:end="90:22">double</name><index pos:start="90:23" pos:end="90:24">[]</index><index pos:start="90:25" pos:end="90:26">[]</index></name></type> <name pos:start="90:28" pos:end="90:31">data</name> <init pos:start="90:33" pos:end="90:85">= <expr pos:start="90:35" pos:end="90:85"><block pos:start="90:35" pos:end="90:85">{ <expr pos:start="90:37" pos:end="90:51"><call pos:start="90:37" pos:end="90:51"><name pos:start="90:37" pos:end="90:49"><name pos:start="90:37" pos:end="90:41">north</name><operator pos:start="90:42" pos:end="90:42">.</operator><name pos:start="90:43" pos:end="90:49">toArray</name></name><argument_list pos:start="90:50" pos:end="90:51">()</argument_list></call></expr>, <expr pos:start="90:54" pos:end="90:67"><call pos:start="90:54" pos:end="90:67"><name pos:start="90:54" pos:end="90:65"><name pos:start="90:54" pos:end="90:57">east</name><operator pos:start="90:58" pos:end="90:58">.</operator><name pos:start="90:59" pos:end="90:65">toArray</name></name><argument_list pos:start="90:66" pos:end="90:67">()</argument_list></call></expr>, <expr pos:start="90:70" pos:end="90:83"><call pos:start="90:70" pos:end="90:83"><name pos:start="90:70" pos:end="90:81"><name pos:start="90:70" pos:end="90:73">down</name><operator pos:start="90:74" pos:end="90:74">.</operator><name pos:start="90:75" pos:end="90:81">toArray</name></name><argument_list pos:start="90:82" pos:end="90:83">()</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>
		<return pos:start="91:17" pos:end="91:54">return <expr pos:start="91:24" pos:end="91:53"><operator pos:start="91:24" pos:end="91:26">new</operator> <call pos:start="91:28" pos:end="91:53"><name pos:start="91:28" pos:end="91:47">Array2DRowRealMatrix</name><argument_list pos:start="91:48" pos:end="91:53">(<argument pos:start="91:49" pos:end="91:52"><expr pos:start="91:49" pos:end="91:52"><name pos:start="91:49" pos:end="91:52">data</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="94:9" pos:end="105:11">/**
	 * Calculates the number of meters North, East and down (NED coordinates)
	 * from this position to another global position.
	 * 
	 * @param other
	 *            the terrestrial position to transform into NED coordinates
	 *            using this position as the origin
	 * @return the NED coordinates as a vector with 3 elements where the first
	 *         (0th) element is the number of meters north, the second element
	 *         is the number of meters east and the third element is the number
	 *         of meters down.
	 */</comment>
	<function pos:start="106:9" pos:end="112:9"><type pos:start="106:9" pos:end="106:23"><specifier pos:start="106:9" pos:end="106:14">public</specifier> <name pos:start="106:16" pos:end="106:23">Vector3D</name></type> <name pos:start="106:25" pos:end="106:31">findNed</name><parameter_list pos:start="106:32" pos:end="106:55">(<parameter pos:start="106:33" pos:end="106:54"><decl pos:start="106:33" pos:end="106:54"><type pos:start="106:33" pos:end="106:48"><name pos:start="106:33" pos:end="106:48">AbstractPosition</name></type> <name pos:start="106:50" pos:end="106:54">other</name></decl></parameter>)</parameter_list> <block pos:start="106:57" pos:end="112:9">{<block_content pos:start="107:17" pos:end="111:83">
		<decl_stmt pos:start="107:17" pos:end="107:51"><decl pos:start="107:17" pos:end="107:50"><type pos:start="107:17" pos:end="107:24"><name pos:start="107:17" pos:end="107:24">Vector3D</name></type> <name pos:start="107:26" pos:end="107:29">self</name> <init pos:start="107:31" pos:end="107:50">= <expr pos:start="107:33" pos:end="107:50"><call pos:start="107:33" pos:end="107:50"><name pos:start="107:33" pos:end="107:44">makeVector3D</name><argument_list pos:start="107:45" pos:end="107:50">(<argument pos:start="107:46" pos:end="107:49"><expr pos:start="107:46" pos:end="107:49"><name pos:start="107:46" pos:end="107:49">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="108:17" pos:end="108:56"><decl pos:start="108:17" pos:end="108:55"><type pos:start="108:17" pos:end="108:24"><name pos:start="108:17" pos:end="108:24">Vector3D</name></type> <name pos:start="108:26" pos:end="108:33">otherVec</name> <init pos:start="108:35" pos:end="108:55">= <expr pos:start="108:37" pos:end="108:55"><call pos:start="108:37" pos:end="108:55"><name pos:start="108:37" pos:end="108:48">makeVector3D</name><argument_list pos:start="108:49" pos:end="108:55">(<argument pos:start="108:50" pos:end="108:54"><expr pos:start="108:50" pos:end="108:54"><name pos:start="108:50" pos:end="108:54">other</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="109:17" pos:end="109:64"><decl pos:start="109:17" pos:end="109:63"><type pos:start="109:17" pos:end="109:24"><name pos:start="109:17" pos:end="109:24">Vector3D</name></type> <name pos:start="109:26" pos:end="109:37">displacement</name> <init pos:start="109:39" pos:end="109:63">= <expr pos:start="109:41" pos:end="109:63"><call pos:start="109:41" pos:end="109:63"><name pos:start="109:41" pos:end="109:57"><name pos:start="109:41" pos:end="109:48">otherVec</name><operator pos:start="109:49" pos:end="109:49">.</operator><name pos:start="109:50" pos:end="109:57">subtract</name></name><argument_list pos:start="109:58" pos:end="109:63">(<argument pos:start="109:59" pos:end="109:62"><expr pos:start="109:59" pos:end="109:62"><name pos:start="109:59" pos:end="109:62">self</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="110:17" pos:end="110:82"><decl pos:start="110:17" pos:end="110:81"><type pos:start="110:17" pos:end="110:26"><name pos:start="110:17" pos:end="110:26">RealMatrix</name></type> <name pos:start="110:28" pos:end="110:30">tmp</name> <init pos:start="110:32" pos:end="110:81">= <expr pos:start="110:34" pos:end="110:81"><operator pos:start="110:34" pos:end="110:36">new</operator> <call pos:start="110:38" pos:end="110:81"><name pos:start="110:38" pos:end="110:57">Array2DRowRealMatrix</name><argument_list pos:start="110:58" pos:end="110:81">(<argument pos:start="110:59" pos:end="110:80"><expr pos:start="110:59" pos:end="110:80"><call pos:start="110:59" pos:end="110:80"><name pos:start="110:59" pos:end="110:78"><name pos:start="110:59" pos:end="110:70">displacement</name><operator pos:start="110:71" pos:end="110:71">.</operator><name pos:start="110:72" pos:end="110:78">toArray</name></name><argument_list pos:start="110:79" pos:end="110:80">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="111:17" pos:end="111:83">return <expr pos:start="111:24" pos:end="111:82"><operator pos:start="111:24" pos:end="111:26">new</operator> <call pos:start="111:28" pos:end="111:82"><name pos:start="111:28" pos:end="111:35">Vector3D</name><argument_list pos:start="111:36" pos:end="111:82">(<argument pos:start="111:37" pos:end="111:81"><expr pos:start="111:37" pos:end="111:81"><call pos:start="111:37" pos:end="111:54"><name pos:start="111:37" pos:end="111:52"><name pos:start="111:37" pos:end="111:40">this</name><operator pos:start="111:41" pos:end="111:41">.</operator><name pos:start="111:42" pos:end="111:52">toRotMatrix</name></name><argument_list pos:start="111:53" pos:end="111:54">()</argument_list></call><operator pos:start="111:55" pos:end="111:55">.</operator><call pos:start="111:56" pos:end="111:68"><name pos:start="111:56" pos:end="111:63">multiply</name><argument_list pos:start="111:64" pos:end="111:68">(<argument pos:start="111:65" pos:end="111:67"><expr pos:start="111:65" pos:end="111:67"><name pos:start="111:65" pos:end="111:67">tmp</name></expr></argument>)</argument_list></call><operator pos:start="111:69" pos:end="111:69">.</operator><call pos:start="111:70" pos:end="111:81"><name pos:start="111:70" pos:end="111:78">getColumn</name><argument_list pos:start="111:79" pos:end="111:81">(<argument pos:start="111:80" pos:end="111:80"><expr pos:start="111:80" pos:end="111:80"><literal type="number" pos:start="111:80" pos:end="111:80">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="114:9" pos:end="123:11">/**
	 * Calculates the latitude, longitude and altitude of a relative position
	 * given as the number of meters North, East, and down from this position.
	 * 
	 * @param ned
	 *            a vector with three elements where the first is the number of
	 *            meters north, the second is the number of meters east, and the
	 *            third is the number of meters down.
	 * @return the latitude longitude and altitude of the other position
	 */</comment>
	<function pos:start="124:9" pos:end="130:9"><type pos:start="124:9" pos:end="124:28"><specifier pos:start="124:9" pos:end="124:14">public</specifier> <name pos:start="124:16" pos:end="124:28">LlaCoordinate</name></type> <name pos:start="124:30" pos:end="124:36">findLla</name><parameter_list pos:start="124:37" pos:end="124:50">(<parameter pos:start="124:38" pos:end="124:49"><decl pos:start="124:38" pos:end="124:49"><type pos:start="124:38" pos:end="124:45"><name pos:start="124:38" pos:end="124:45">Vector3D</name></type> <name pos:start="124:47" pos:end="124:49">ned</name></decl></parameter>)</parameter_list> <block pos:start="124:52" pos:end="130:9">{<block_content pos:start="125:17" pos:end="129:83">
		<decl_stmt pos:start="125:17" pos:end="125:51"><decl pos:start="125:17" pos:end="125:50"><type pos:start="125:17" pos:end="125:24"><name pos:start="125:17" pos:end="125:24">Vector3D</name></type> <name pos:start="125:26" pos:end="125:29">self</name> <init pos:start="125:31" pos:end="125:50">= <expr pos:start="125:33" pos:end="125:50"><call pos:start="125:33" pos:end="125:50"><name pos:start="125:33" pos:end="125:44">makeVector3D</name><argument_list pos:start="125:45" pos:end="125:50">(<argument pos:start="125:46" pos:end="125:49"><expr pos:start="125:46" pos:end="125:49"><name pos:start="125:46" pos:end="125:49">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="126:17" pos:end="126:73"><decl pos:start="126:17" pos:end="126:72"><type pos:start="126:17" pos:end="126:26"><name pos:start="126:17" pos:end="126:26">RealMatrix</name></type> <name pos:start="126:28" pos:end="126:30">tmp</name> <init pos:start="126:32" pos:end="126:72">= <expr pos:start="126:34" pos:end="126:72"><operator pos:start="126:34" pos:end="126:36">new</operator> <call pos:start="126:38" pos:end="126:72"><name pos:start="126:38" pos:end="126:57">Array2DRowRealMatrix</name><argument_list pos:start="126:58" pos:end="126:72">(<argument pos:start="126:59" pos:end="126:71"><expr pos:start="126:59" pos:end="126:71"><call pos:start="126:59" pos:end="126:71"><name pos:start="126:59" pos:end="126:69"><name pos:start="126:59" pos:end="126:61">ned</name><operator pos:start="126:62" pos:end="126:62">.</operator><name pos:start="126:63" pos:end="126:69">toArray</name></name><argument_list pos:start="126:70" pos:end="126:71">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="127:17" pos:end="127:101"><decl pos:start="127:17" pos:end="127:100"><type pos:start="127:17" pos:end="127:24"><name pos:start="127:17" pos:end="127:24">Vector3D</name></type> <name pos:start="127:26" pos:end="127:26">d</name> <init pos:start="127:28" pos:end="127:100">= <expr pos:start="127:30" pos:end="127:100"><operator pos:start="127:30" pos:end="127:32">new</operator> <call pos:start="127:34" pos:end="127:100"><name pos:start="127:34" pos:end="127:41">Vector3D</name><argument_list pos:start="127:42" pos:end="127:100">(<argument pos:start="127:43" pos:end="127:99"><expr pos:start="127:43" pos:end="127:99"><call pos:start="127:43" pos:end="127:60"><name pos:start="127:43" pos:end="127:58"><name pos:start="127:43" pos:end="127:46">this</name><operator pos:start="127:47" pos:end="127:47">.</operator><name pos:start="127:48" pos:end="127:58">toRotMatrix</name></name><argument_list pos:start="127:59" pos:end="127:60">()</argument_list></call><operator pos:start="127:61" pos:end="127:61">.</operator><call pos:start="127:62" pos:end="127:72"><name pos:start="127:62" pos:end="127:70">transpose</name><argument_list pos:start="127:71" pos:end="127:72">()</argument_list></call><operator pos:start="127:73" pos:end="127:73">.</operator><call pos:start="127:74" pos:end="127:86"><name pos:start="127:74" pos:end="127:81">multiply</name><argument_list pos:start="127:82" pos:end="127:86">(<argument pos:start="127:83" pos:end="127:85"><expr pos:start="127:83" pos:end="127:85"><name pos:start="127:83" pos:end="127:85">tmp</name></expr></argument>)</argument_list></call><operator pos:start="127:87" pos:end="127:87">.</operator><call pos:start="127:88" pos:end="127:99"><name pos:start="127:88" pos:end="127:96">getColumn</name><argument_list pos:start="127:97" pos:end="127:99">(<argument pos:start="127:98" pos:end="127:98"><expr pos:start="127:98" pos:end="127:98"><literal type="number" pos:start="127:98" pos:end="127:98">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="128:17" pos:end="128:41"><decl pos:start="128:17" pos:end="128:40"><type pos:start="128:17" pos:end="128:24"><name pos:start="128:17" pos:end="128:24">Vector3D</name></type> <name pos:start="128:26" pos:end="128:26">p</name> <init pos:start="128:28" pos:end="128:40">= <expr pos:start="128:30" pos:end="128:40"><call pos:start="128:30" pos:end="128:40"><name pos:start="128:30" pos:end="128:37"><name pos:start="128:30" pos:end="128:33">self</name><operator pos:start="128:34" pos:end="128:34">.</operator><name pos:start="128:35" pos:end="128:37">add</name></name><argument_list pos:start="128:38" pos:end="128:40">(<argument pos:start="128:39" pos:end="128:39"><expr pos:start="128:39" pos:end="128:39"><name pos:start="128:39" pos:end="128:39">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="129:17" pos:end="129:83">return <expr pos:start="129:24" pos:end="129:82"><operator pos:start="129:24" pos:end="129:26">new</operator> <call pos:start="129:28" pos:end="129:64"><name pos:start="129:28" pos:end="129:34">PVector</name><argument_list pos:start="129:35" pos:end="129:64">(<argument pos:start="129:36" pos:end="129:43"><expr pos:start="129:36" pos:end="129:43"><call pos:start="129:36" pos:end="129:43"><name pos:start="129:36" pos:end="129:41"><name pos:start="129:36" pos:end="129:36">p</name><operator pos:start="129:37" pos:end="129:37">.</operator><name pos:start="129:38" pos:end="129:41">getX</name></name><argument_list pos:start="129:42" pos:end="129:43">()</argument_list></call></expr></argument>, <argument pos:start="129:46" pos:end="129:53"><expr pos:start="129:46" pos:end="129:53"><call pos:start="129:46" pos:end="129:53"><name pos:start="129:46" pos:end="129:51"><name pos:start="129:46" pos:end="129:46">p</name><operator pos:start="129:47" pos:end="129:47">.</operator><name pos:start="129:48" pos:end="129:51">getY</name></name><argument_list pos:start="129:52" pos:end="129:53">()</argument_list></call></expr></argument>, <argument pos:start="129:56" pos:end="129:63"><expr pos:start="129:56" pos:end="129:63"><call pos:start="129:56" pos:end="129:63"><name pos:start="129:56" pos:end="129:61"><name pos:start="129:56" pos:end="129:56">p</name><operator pos:start="129:57" pos:end="129:57">.</operator><name pos:start="129:58" pos:end="129:61">getZ</name></name><argument_list pos:start="129:62" pos:end="129:63">()</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="129:65" pos:end="129:65">.</operator><call pos:start="129:66" pos:end="129:82"><name pos:start="129:66" pos:end="129:80">toLlaCoordinate</name><argument_list pos:start="129:81" pos:end="129:82">()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="132:9" pos:end="135:9"><type pos:start="132:9" pos:end="132:31"><specifier pos:start="132:9" pos:end="132:15">private</specifier> <specifier pos:start="132:17" pos:end="132:22">static</specifier> <name pos:start="132:24" pos:end="132:31">Vector3D</name></type> <name pos:start="132:33" pos:end="132:44">makeVector3D</name><parameter_list pos:start="132:45" pos:end="132:66">(<parameter pos:start="132:46" pos:end="132:65"><decl pos:start="132:46" pos:end="132:65"><type pos:start="132:46" pos:end="132:61"><name pos:start="132:46" pos:end="132:61">AbstractPosition</name></type> <name pos:start="132:63" pos:end="132:65">pos</name></decl></parameter>)</parameter_list> <block pos:start="132:68" pos:end="135:9">{<block_content pos:start="133:17" pos:end="134:66">
		<decl_stmt pos:start="133:17" pos:end="133:44"><decl pos:start="133:17" pos:end="133:43"><type pos:start="133:17" pos:end="133:23"><name pos:start="133:17" pos:end="133:23">PVector</name></type> <name pos:start="133:25" pos:end="133:25">p</name> <init pos:start="133:27" pos:end="133:43">= <expr pos:start="133:29" pos:end="133:43"><call pos:start="133:29" pos:end="133:43"><name pos:start="133:29" pos:end="133:41"><name pos:start="133:29" pos:end="133:31">pos</name><operator pos:start="133:32" pos:end="133:32">.</operator><name pos:start="133:33" pos:end="133:41">toPVector</name></name><argument_list pos:start="133:42" pos:end="133:43">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="134:17" pos:end="134:66">return <expr pos:start="134:24" pos:end="134:65"><operator pos:start="134:24" pos:end="134:26">new</operator> <call pos:start="134:28" pos:end="134:65"><name pos:start="134:28" pos:end="134:35">Vector3D</name><argument_list pos:start="134:36" pos:end="134:65">(<argument pos:start="134:37" pos:end="134:44"><expr pos:start="134:37" pos:end="134:44"><call pos:start="134:37" pos:end="134:44"><name pos:start="134:37" pos:end="134:42"><name pos:start="134:37" pos:end="134:37">p</name><operator pos:start="134:38" pos:end="134:38">.</operator><name pos:start="134:39" pos:end="134:42">getX</name></name><argument_list pos:start="134:43" pos:end="134:44">()</argument_list></call></expr></argument>, <argument pos:start="134:47" pos:end="134:54"><expr pos:start="134:47" pos:end="134:54"><call pos:start="134:47" pos:end="134:54"><name pos:start="134:47" pos:end="134:52"><name pos:start="134:47" pos:end="134:47">p</name><operator pos:start="134:48" pos:end="134:48">.</operator><name pos:start="134:49" pos:end="134:52">getY</name></name><argument_list pos:start="134:53" pos:end="134:54">()</argument_list></call></expr></argument>, <argument pos:start="134:57" pos:end="134:64"><expr pos:start="134:57" pos:end="134:64"><call pos:start="134:57" pos:end="134:64"><name pos:start="134:57" pos:end="134:62"><name pos:start="134:57" pos:end="134:57">p</name><operator pos:start="134:58" pos:end="134:58">.</operator><name pos:start="134:59" pos:end="134:62">getZ</name></name><argument_list pos:start="134:63" pos:end="134:64">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>
