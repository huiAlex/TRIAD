<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="src/LlaCoordinate.java" pos:tabs="8"><comment type="block" format="javadoc" pos:start="1:1" pos:end="3:3">/**
 * 
 */</comment>
<package pos:start="4:1" pos:end="4:41">package <name pos:start="4:9" pos:end="4:40"><name pos:start="4:9" pos:end="4:11">edu</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:14">nd</name><operator pos:start="4:15" pos:end="4:15">.</operator><name pos:start="4:16" pos:end="4:24">dronology</name><operator pos:start="4:25" pos:end="4:25">.</operator><name pos:start="4:26" pos:end="4:29">core</name><operator pos:start="4:30" pos:end="4:30">.</operator><name pos:start="4:31" pos:end="4:40">coordinate</name></name>;</package>

<import pos:start="6:1" pos:end="6:28">import <name pos:start="6:8" pos:end="6:27"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:14">io</name><operator pos:start="6:15" pos:end="6:15">.</operator><name pos:start="6:16" pos:end="6:27">Serializable</name></name>;</import>

<import pos:start="8:1" pos:end="8:50">import <name pos:start="8:8" pos:end="8:49"><name pos:start="8:8" pos:end="8:10">com</name><operator pos:start="8:11" pos:end="8:11">.</operator><name pos:start="8:12" pos:end="8:17">google</name><operator pos:start="8:18" pos:end="8:18">.</operator><name pos:start="8:19" pos:end="8:22">gson</name><operator pos:start="8:23" pos:end="8:23">.</operator><name pos:start="8:24" pos:end="8:34">annotations</name><operator pos:start="8:35" pos:end="8:35">.</operator><name pos:start="8:36" pos:end="8:49">SerializedName</name></name>;</import>

<comment type="block" format="javadoc" pos:start="10:1" pos:end="15:3">/**
 * A terrestrial position defined by latitude, longitude, and altitude (LLA)
 *  
 * @author Michael Murphy
 *
 */</comment>
<class pos:start="16:1" pos:end="163:1"><specifier pos:start="16:1" pos:end="16:6">public</specifier> class <name pos:start="16:14" pos:end="16:26">LlaCoordinate</name>  <super_list pos:start="16:29" pos:end="16:77"><extends pos:start="16:29" pos:end="16:52">extends <super pos:start="16:37" pos:end="16:52"><name pos:start="16:37" pos:end="16:52">AbstractPosition</name></super></extends>  <implements pos:start="16:55" pos:end="16:77">implements <super pos:start="16:66" pos:end="16:77"><name pos:start="16:66" pos:end="16:77">Serializable</name></super></implements></super_list> <block pos:start="16:79" pos:end="163:1">{
 
	<decl_stmt pos:start="18:9" pos:end="18:74"><decl pos:start="18:9" pos:end="18:73"><type pos:start="18:9" pos:end="18:33"><specifier pos:start="18:9" pos:end="18:15">private</specifier> <specifier pos:start="18:17" pos:end="18:22">static</specifier> <specifier pos:start="18:24" pos:end="18:28">final</specifier> <name pos:start="18:30" pos:end="18:33">long</name></type> <name pos:start="18:35" pos:end="18:50">serialVersionUID</name> <init pos:start="18:52" pos:end="18:73">= <expr pos:start="18:54" pos:end="18:73"><literal type="number" pos:start="18:54" pos:end="18:73">1261660925357051253L</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="19:9" pos:end="20:38"><decl pos:start="19:9" pos:end="20:37"><annotation pos:start="19:9" pos:end="19:28">@<name pos:start="19:10" pos:end="19:23">SerializedName</name><argument_list pos:start="19:24" pos:end="19:28">(<argument pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><literal type="string" pos:start="19:25" pos:end="19:27">"x"</literal></expr></argument>)</argument_list></annotation>
	<type pos:start="20:9" pos:end="20:28"><specifier pos:start="20:9" pos:end="20:15">private</specifier> <specifier pos:start="20:17" pos:end="20:21">final</specifier> <name pos:start="20:23" pos:end="20:28">double</name></type> <name pos:start="20:30" pos:end="20:37">latitude</name></decl>;</decl_stmt>    
	<decl_stmt pos:start="21:9" pos:end="22:39"><decl pos:start="21:9" pos:end="22:38"><annotation pos:start="21:9" pos:end="21:28">@<name pos:start="21:10" pos:end="21:23">SerializedName</name><argument_list pos:start="21:24" pos:end="21:28">(<argument pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><literal type="string" pos:start="21:25" pos:end="21:27">"y"</literal></expr></argument>)</argument_list></annotation>
	<type pos:start="22:9" pos:end="22:28"><specifier pos:start="22:9" pos:end="22:15">private</specifier> <specifier pos:start="22:17" pos:end="22:21">final</specifier> <name pos:start="22:23" pos:end="22:28">double</name></type> <name pos:start="22:30" pos:end="22:38">longitude</name></decl>;</decl_stmt>
	<decl_stmt pos:start="23:9" pos:end="24:38"><decl pos:start="23:9" pos:end="24:37"><annotation pos:start="23:9" pos:end="23:28">@<name pos:start="23:10" pos:end="23:23">SerializedName</name><argument_list pos:start="23:24" pos:end="23:28">(<argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><literal type="string" pos:start="23:25" pos:end="23:27">"z"</literal></expr></argument>)</argument_list></annotation>
	<type pos:start="24:9" pos:end="24:28"><specifier pos:start="24:9" pos:end="24:15">private</specifier> <specifier pos:start="24:17" pos:end="24:21">final</specifier> <name pos:start="24:23" pos:end="24:28">double</name></type> <name pos:start="24:30" pos:end="24:37">altitude</name></decl>;</decl_stmt> 

	<comment type="block" format="javadoc" pos:start="26:9" pos:end="37:11">/**
	 * A terrestrial position defined by latitude, longitude, and altitude (LLA).
	 * 
	 * @param latitude 
	 *          the angle north of the equator in degrees (negative angles define latitudes in the southern hemisphere). Must be a value within this interval: -90 &lt;= latitude &lt;= 90
	 * @param longitude
	 *          the angle east of the prime meridian in degrees (negative angles define longitudes in the western hemisphere). Must be a value within this interval: -180 &lt; longitude &lt;= 180
	 * @param altitude
	 *          the distance above sea level in meters or more precisely the distance above the surface of the WGS-84 reference ellipsoid.
	 * @throws IllegalArgumentException
	 *           when the latitude or longitude is outside the specified range
	 */</comment>
	<constructor pos:start="38:9" pos:end="42:9"><specifier pos:start="38:9" pos:end="38:14">public</specifier> <name pos:start="38:16" pos:end="38:28">LlaCoordinate</name><parameter_list pos:start="38:29" pos:end="38:80">(<parameter pos:start="38:30" pos:end="38:44"><decl pos:start="38:30" pos:end="38:44"><type pos:start="38:30" pos:end="38:44"><name pos:start="38:30" pos:end="38:35">double</name></type> <name pos:start="38:37" pos:end="38:44">latitude</name></decl></parameter>, <parameter pos:start="38:47" pos:end="38:62"><decl pos:start="38:47" pos:end="38:62"><type pos:start="38:47" pos:end="38:62"><name pos:start="38:47" pos:end="38:52">double</name></type> <name pos:start="38:54" pos:end="38:62">longitude</name></decl></parameter>, <parameter pos:start="38:65" pos:end="38:79"><decl pos:start="38:65" pos:end="38:79"><type pos:start="38:65" pos:end="38:79"><name pos:start="38:65" pos:end="38:70">double</name></type> <name pos:start="38:72" pos:end="38:79">altitude</name></decl></parameter>)</parameter_list> <block pos:start="38:82" pos:end="42:9">{<block_content pos:start="39:17" pos:end="41:61">
		<expr_stmt pos:start="39:17" pos:end="39:61"><expr pos:start="39:17" pos:end="39:60"><name pos:start="39:17" pos:end="39:29"><name pos:start="39:17" pos:end="39:20">this</name><operator pos:start="39:21" pos:end="39:21">.</operator><name pos:start="39:22" pos:end="39:29">latitude</name></name> <operator pos:start="39:31" pos:end="39:31">=</operator> <call pos:start="39:33" pos:end="39:60"><name pos:start="39:33" pos:end="39:50">checkLatitudeRange</name><argument_list pos:start="39:51" pos:end="39:60">(<argument pos:start="39:52" pos:end="39:59"><expr pos:start="39:52" pos:end="39:59"><name pos:start="39:52" pos:end="39:59">latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="40:17" pos:end="40:64"><expr pos:start="40:17" pos:end="40:63"><name pos:start="40:17" pos:end="40:30"><name pos:start="40:17" pos:end="40:20">this</name><operator pos:start="40:21" pos:end="40:21">.</operator><name pos:start="40:22" pos:end="40:30">longitude</name></name> <operator pos:start="40:32" pos:end="40:32">=</operator> <call pos:start="40:34" pos:end="40:63"><name pos:start="40:34" pos:end="40:52">checkLongitudeRange</name><argument_list pos:start="40:53" pos:end="40:63">(<argument pos:start="40:54" pos:end="40:62"><expr pos:start="40:54" pos:end="40:62"><name pos:start="40:54" pos:end="40:62">longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="41:17" pos:end="41:61"><expr pos:start="41:17" pos:end="41:60"><name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:20">this</name><operator pos:start="41:21" pos:end="41:21">.</operator><name pos:start="41:22" pos:end="41:29">altitude</name></name> <operator pos:start="41:31" pos:end="41:31">=</operator> <call pos:start="41:33" pos:end="41:60"><name pos:start="41:33" pos:end="41:50">checkAltitudeRange</name><argument_list pos:start="41:51" pos:end="41:60">(<argument pos:start="41:52" pos:end="41:59"><expr pos:start="41:52" pos:end="41:59"><name pos:start="41:52" pos:end="41:59">altitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function pos:start="44:9" pos:end="60:9"><annotation pos:start="44:9" pos:end="44:17">@<name pos:start="44:10" pos:end="44:17">Override</name></annotation>
	<type pos:start="45:9" pos:end="45:22"><specifier pos:start="45:9" pos:end="45:14">public</specifier> <name pos:start="45:16" pos:end="45:22">boolean</name></type> <name pos:start="45:24" pos:end="45:29">equals</name><parameter_list pos:start="45:30" pos:end="45:41">(<parameter pos:start="45:31" pos:end="45:40"><decl pos:start="45:31" pos:end="45:40"><type pos:start="45:31" pos:end="45:36"><name pos:start="45:31" pos:end="45:36">Object</name></type> <name pos:start="45:38" pos:end="45:40">obj</name></decl></parameter>)</parameter_list> <block pos:start="45:43" pos:end="60:9">{<block_content pos:start="46:17" pos:end="59:28">
		<if_stmt pos:start="46:17" pos:end="47:36"><if pos:start="46:17" pos:end="47:36">if <condition pos:start="46:20" pos:end="46:32">(<expr pos:start="46:21" pos:end="46:31"><name pos:start="46:21" pos:end="46:24">this</name> <operator pos:start="46:26" pos:end="46:27">==</operator> <name pos:start="46:29" pos:end="46:31">obj</name></expr>)</condition><block type="pseudo" pos:start="47:25" pos:end="47:36"><block_content pos:start="47:25" pos:end="47:36">
			<return pos:start="47:25" pos:end="47:36">return <expr pos:start="47:32" pos:end="47:35"><literal type="boolean" pos:start="47:32" pos:end="47:35">true</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="48:17" pos:end="49:37"><if pos:start="48:17" pos:end="49:37">if <condition pos:start="48:20" pos:end="48:32">(<expr pos:start="48:21" pos:end="48:31"><name pos:start="48:21" pos:end="48:23">obj</name> <operator pos:start="48:25" pos:end="48:26">==</operator> <literal type="null" pos:start="48:28" pos:end="48:31">null</literal></expr>)</condition><block type="pseudo" pos:start="49:25" pos:end="49:37"><block_content pos:start="49:25" pos:end="49:37">
			<return pos:start="49:25" pos:end="49:37">return <expr pos:start="49:32" pos:end="49:36"><literal type="boolean" pos:start="49:32" pos:end="49:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="50:17" pos:end="51:37"><if pos:start="50:17" pos:end="51:37">if <condition pos:start="50:20" pos:end="50:52">(<expr pos:start="50:21" pos:end="50:51"><operator pos:start="50:21" pos:end="50:21">!</operator><operator pos:start="50:22" pos:end="50:22">(</operator><name pos:start="50:23" pos:end="50:25">obj</name> <operator pos:start="50:27" pos:end="50:36">instanceof</operator> <name pos:start="50:38" pos:end="50:50">LlaCoordinate</name><operator pos:start="50:51" pos:end="50:51">)</operator></expr>)</condition><block type="pseudo" pos:start="51:25" pos:end="51:37"><block_content pos:start="51:25" pos:end="51:37">
			<return pos:start="51:25" pos:end="51:37">return <expr pos:start="51:32" pos:end="51:36"><literal type="boolean" pos:start="51:32" pos:end="51:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt pos:start="52:17" pos:end="52:58"><decl pos:start="52:17" pos:end="52:57"><type pos:start="52:17" pos:end="52:29"><name pos:start="52:17" pos:end="52:29">LlaCoordinate</name></type> <name pos:start="52:31" pos:end="52:35">other</name> <init pos:start="52:37" pos:end="52:57">= <expr pos:start="52:39" pos:end="52:57"><operator pos:start="52:39" pos:end="52:39">(</operator><name pos:start="52:40" pos:end="52:52">LlaCoordinate</name><operator pos:start="52:53" pos:end="52:53">)</operator> <name pos:start="52:55" pos:end="52:57">obj</name></expr></init></decl>;</decl_stmt>
		<if_stmt pos:start="53:17" pos:end="54:37"><if pos:start="53:17" pos:end="54:37">if <condition pos:start="53:20" pos:end="53:97">(<expr pos:start="53:21" pos:end="53:96"><call pos:start="53:21" pos:end="53:53"><name pos:start="53:21" pos:end="53:43"><name pos:start="53:21" pos:end="53:26">Double</name><operator pos:start="53:27" pos:end="53:27">.</operator><name pos:start="53:28" pos:end="53:43">doubleToLongBits</name></name><argument_list pos:start="53:44" pos:end="53:53">(<argument pos:start="53:45" pos:end="53:52"><expr pos:start="53:45" pos:end="53:52"><name pos:start="53:45" pos:end="53:52">altitude</name></expr></argument>)</argument_list></call> <operator pos:start="53:55" pos:end="53:56">!=</operator> <call pos:start="53:58" pos:end="53:96"><name pos:start="53:58" pos:end="53:80"><name pos:start="53:58" pos:end="53:63">Double</name><operator pos:start="53:64" pos:end="53:64">.</operator><name pos:start="53:65" pos:end="53:80">doubleToLongBits</name></name><argument_list pos:start="53:81" pos:end="53:96">(<argument pos:start="53:82" pos:end="53:95"><expr pos:start="53:82" pos:end="53:95"><name pos:start="53:82" pos:end="53:95"><name pos:start="53:82" pos:end="53:86">other</name><operator pos:start="53:87" pos:end="53:87">.</operator><name pos:start="53:88" pos:end="53:95">altitude</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="54:25" pos:end="54:37"><block_content pos:start="54:25" pos:end="54:37">
			<return pos:start="54:25" pos:end="54:37">return <expr pos:start="54:32" pos:end="54:36"><literal type="boolean" pos:start="54:32" pos:end="54:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="55:17" pos:end="56:37"><if pos:start="55:17" pos:end="56:37">if <condition pos:start="55:20" pos:end="55:97">(<expr pos:start="55:21" pos:end="55:96"><call pos:start="55:21" pos:end="55:53"><name pos:start="55:21" pos:end="55:43"><name pos:start="55:21" pos:end="55:26">Double</name><operator pos:start="55:27" pos:end="55:27">.</operator><name pos:start="55:28" pos:end="55:43">doubleToLongBits</name></name><argument_list pos:start="55:44" pos:end="55:53">(<argument pos:start="55:45" pos:end="55:52"><expr pos:start="55:45" pos:end="55:52"><name pos:start="55:45" pos:end="55:52">latitude</name></expr></argument>)</argument_list></call> <operator pos:start="55:55" pos:end="55:56">!=</operator> <call pos:start="55:58" pos:end="55:96"><name pos:start="55:58" pos:end="55:80"><name pos:start="55:58" pos:end="55:63">Double</name><operator pos:start="55:64" pos:end="55:64">.</operator><name pos:start="55:65" pos:end="55:80">doubleToLongBits</name></name><argument_list pos:start="55:81" pos:end="55:96">(<argument pos:start="55:82" pos:end="55:95"><expr pos:start="55:82" pos:end="55:95"><name pos:start="55:82" pos:end="55:95"><name pos:start="55:82" pos:end="55:86">other</name><operator pos:start="55:87" pos:end="55:87">.</operator><name pos:start="55:88" pos:end="55:95">latitude</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="56:25" pos:end="56:37"><block_content pos:start="56:25" pos:end="56:37">
			<return pos:start="56:25" pos:end="56:37">return <expr pos:start="56:32" pos:end="56:36"><literal type="boolean" pos:start="56:32" pos:end="56:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt pos:start="57:17" pos:end="58:37"><if pos:start="57:17" pos:end="58:37">if <condition pos:start="57:20" pos:end="57:99">(<expr pos:start="57:21" pos:end="57:98"><call pos:start="57:21" pos:end="57:54"><name pos:start="57:21" pos:end="57:43"><name pos:start="57:21" pos:end="57:26">Double</name><operator pos:start="57:27" pos:end="57:27">.</operator><name pos:start="57:28" pos:end="57:43">doubleToLongBits</name></name><argument_list pos:start="57:44" pos:end="57:54">(<argument pos:start="57:45" pos:end="57:53"><expr pos:start="57:45" pos:end="57:53"><name pos:start="57:45" pos:end="57:53">longitude</name></expr></argument>)</argument_list></call> <operator pos:start="57:56" pos:end="57:57">!=</operator> <call pos:start="57:59" pos:end="57:98"><name pos:start="57:59" pos:end="57:81"><name pos:start="57:59" pos:end="57:64">Double</name><operator pos:start="57:65" pos:end="57:65">.</operator><name pos:start="57:66" pos:end="57:81">doubleToLongBits</name></name><argument_list pos:start="57:82" pos:end="57:98">(<argument pos:start="57:83" pos:end="57:97"><expr pos:start="57:83" pos:end="57:97"><name pos:start="57:83" pos:end="57:97"><name pos:start="57:83" pos:end="57:87">other</name><operator pos:start="57:88" pos:end="57:88">.</operator><name pos:start="57:89" pos:end="57:97">longitude</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="58:25" pos:end="58:37"><block_content pos:start="58:25" pos:end="58:37">
			<return pos:start="58:25" pos:end="58:37">return <expr pos:start="58:32" pos:end="58:36"><literal type="boolean" pos:start="58:32" pos:end="58:36">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<return pos:start="59:17" pos:end="59:28">return <expr pos:start="59:24" pos:end="59:27"><literal type="boolean" pos:start="59:24" pos:end="59:27">true</literal></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="62:9" pos:end="66:11">/**
	 * The altitude
	 * 
	 * @return the distance above sea level or more precisely the distance above the surface of the WGS-84 reference ellipsoid. For this project we need this distance in meters
	 */</comment>
	<function pos:start="67:9" pos:end="69:9"><type pos:start="67:9" pos:end="67:21"><specifier pos:start="67:9" pos:end="67:14">public</specifier> <name pos:start="67:16" pos:end="67:21">double</name></type> <name pos:start="67:23" pos:end="67:33">getAltitude</name><parameter_list pos:start="67:34" pos:end="67:35">()</parameter_list> <block pos:start="67:37" pos:end="69:9">{<block_content pos:start="68:17" pos:end="68:32">
		<return pos:start="68:17" pos:end="68:32">return <expr pos:start="68:24" pos:end="68:31"><name pos:start="68:24" pos:end="68:31">altitude</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="71:9" pos:end="74:9"><annotation pos:start="71:9" pos:end="71:17">@<name pos:start="71:10" pos:end="71:17">Override</name></annotation>
	<type pos:start="72:9" pos:end="72:21"><specifier pos:start="72:9" pos:end="72:14">public</specifier> <name pos:start="72:16" pos:end="72:21">String</name></type> <name pos:start="72:23" pos:end="72:30">toString</name><parameter_list pos:start="72:31" pos:end="72:32">()</parameter_list> <block pos:start="72:34" pos:end="74:9">{<block_content pos:start="73:17" pos:end="73:97">
		<return pos:start="73:17" pos:end="73:97">return <expr pos:start="73:24" pos:end="73:96"><call pos:start="73:24" pos:end="73:96"><name pos:start="73:24" pos:end="73:36"><name pos:start="73:24" pos:end="73:29">String</name><operator pos:start="73:30" pos:end="73:30">.</operator><name pos:start="73:31" pos:end="73:36">format</name></name><argument_list pos:start="73:37" pos:end="73:96">(<argument pos:start="73:38" pos:end="73:64"><expr pos:start="73:38" pos:end="73:64"><literal type="string" pos:start="73:38" pos:end="73:64">"LlaCoordinate(%f, %f, %f)"</literal></expr></argument>, <argument pos:start="73:67" pos:end="73:74"><expr pos:start="73:67" pos:end="73:74"><name pos:start="73:67" pos:end="73:74">latitude</name></expr></argument>, <argument pos:start="73:77" pos:end="73:85"><expr pos:start="73:77" pos:end="73:85"><name pos:start="73:77" pos:end="73:85">longitude</name></expr></argument>, <argument pos:start="73:88" pos:end="73:95"><expr pos:start="73:88" pos:end="73:95"><name pos:start="73:88" pos:end="73:95">altitude</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="76:9" pos:end="80:11">/**
	 * The latitude angle.
	 * 
	 * @return the angle north of the equator in degrees (negative angles define latitudes in the southern hemisphere).
	 */</comment>
	<function pos:start="81:9" pos:end="83:9"><type pos:start="81:9" pos:end="81:21"><specifier pos:start="81:9" pos:end="81:14">public</specifier> <name pos:start="81:16" pos:end="81:21">double</name></type> <name pos:start="81:23" pos:end="81:33">getLatitude</name><parameter_list pos:start="81:34" pos:end="81:35">()</parameter_list> <block pos:start="81:37" pos:end="83:9">{<block_content pos:start="82:17" pos:end="82:32">
		<return pos:start="82:17" pos:end="82:32">return <expr pos:start="82:24" pos:end="82:31"><name pos:start="82:24" pos:end="82:31">latitude</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="85:9" pos:end="89:11">/**
	 * The longitude angle
	 * 
	 * @return the angle east of the prime meridian in degrees (negative angles define longitudes in the western hemisphere)
	 */</comment>
	<function pos:start="90:9" pos:end="92:9"><type pos:start="90:9" pos:end="90:21"><specifier pos:start="90:9" pos:end="90:14">public</specifier> <name pos:start="90:16" pos:end="90:21">double</name></type> <name pos:start="90:23" pos:end="90:34">getLongitude</name><parameter_list pos:start="90:35" pos:end="90:36">()</parameter_list> <block pos:start="90:38" pos:end="92:9">{<block_content pos:start="91:17" pos:end="91:33">
		<return pos:start="91:17" pos:end="91:33">return <expr pos:start="91:24" pos:end="91:32"><name pos:start="91:24" pos:end="91:32">longitude</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="94:9" pos:end="106:9"><annotation pos:start="94:9" pos:end="94:17">@<name pos:start="94:10" pos:end="94:17">Override</name></annotation>
	<type pos:start="95:9" pos:end="95:18"><specifier pos:start="95:9" pos:end="95:14">public</specifier> <name pos:start="95:16" pos:end="95:18">int</name></type> <name pos:start="95:20" pos:end="95:27">hashCode</name><parameter_list pos:start="95:28" pos:end="95:29">()</parameter_list> <block pos:start="95:31" pos:end="106:9">{<block_content pos:start="96:17" pos:end="105:30">
		<decl_stmt pos:start="96:17" pos:end="96:37"><decl pos:start="96:17" pos:end="96:36"><type pos:start="96:17" pos:end="96:25"><specifier pos:start="96:17" pos:end="96:21">final</specifier> <name pos:start="96:23" pos:end="96:25">int</name></type> <name pos:start="96:27" pos:end="96:31">prime</name> <init pos:start="96:33" pos:end="96:36">= <expr pos:start="96:35" pos:end="96:36"><literal type="number" pos:start="96:35" pos:end="96:36">31</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="97:17" pos:end="97:31"><decl pos:start="97:17" pos:end="97:30"><type pos:start="97:17" pos:end="97:19"><name pos:start="97:17" pos:end="97:19">int</name></type> <name pos:start="97:21" pos:end="97:26">result</name> <init pos:start="97:28" pos:end="97:30">= <expr pos:start="97:30" pos:end="97:30"><literal type="number" pos:start="97:30" pos:end="97:30">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="98:17" pos:end="98:26"><decl pos:start="98:17" pos:end="98:25"><type pos:start="98:17" pos:end="98:20"><name pos:start="98:17" pos:end="98:20">long</name></type> <name pos:start="98:22" pos:end="98:25">temp</name></decl>;</decl_stmt>
		<expr_stmt pos:start="99:17" pos:end="99:57"><expr pos:start="99:17" pos:end="99:56"><name pos:start="99:17" pos:end="99:20">temp</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <call pos:start="99:24" pos:end="99:56"><name pos:start="99:24" pos:end="99:46"><name pos:start="99:24" pos:end="99:29">Double</name><operator pos:start="99:30" pos:end="99:30">.</operator><name pos:start="99:31" pos:end="99:46">doubleToLongBits</name></name><argument_list pos:start="99:47" pos:end="99:56">(<argument pos:start="99:48" pos:end="99:55"><expr pos:start="99:48" pos:end="99:55"><name pos:start="99:48" pos:end="99:55">altitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="100:17" pos:end="100:71"><expr pos:start="100:17" pos:end="100:70"><name pos:start="100:17" pos:end="100:22">result</name> <operator pos:start="100:24" pos:end="100:24">=</operator> <name pos:start="100:26" pos:end="100:30">prime</name> <operator pos:start="100:32" pos:end="100:32">*</operator> <name pos:start="100:34" pos:end="100:39">result</name> <operator pos:start="100:41" pos:end="100:41">+</operator> <operator pos:start="100:43" pos:end="100:43">(</operator><name pos:start="100:44" pos:end="100:46">int</name><operator pos:start="100:47" pos:end="100:47">)</operator> <operator pos:start="100:49" pos:end="100:49">(</operator><name pos:start="100:50" pos:end="100:53">temp</name> <operator pos:start="100:55" pos:end="100:55">^</operator> <operator pos:start="100:57" pos:end="100:57">(</operator><name pos:start="100:58" pos:end="100:61">temp</name> <operator pos:start="100:63" pos:end="100:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="100:67" pos:end="100:68">32</literal><operator pos:start="100:69" pos:end="100:69">)</operator><operator pos:start="100:70" pos:end="100:70">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="101:17" pos:end="101:57"><expr pos:start="101:17" pos:end="101:56"><name pos:start="101:17" pos:end="101:20">temp</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <call pos:start="101:24" pos:end="101:56"><name pos:start="101:24" pos:end="101:46"><name pos:start="101:24" pos:end="101:29">Double</name><operator pos:start="101:30" pos:end="101:30">.</operator><name pos:start="101:31" pos:end="101:46">doubleToLongBits</name></name><argument_list pos:start="101:47" pos:end="101:56">(<argument pos:start="101:48" pos:end="101:55"><expr pos:start="101:48" pos:end="101:55"><name pos:start="101:48" pos:end="101:55">latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="102:17" pos:end="102:71"><expr pos:start="102:17" pos:end="102:70"><name pos:start="102:17" pos:end="102:22">result</name> <operator pos:start="102:24" pos:end="102:24">=</operator> <name pos:start="102:26" pos:end="102:30">prime</name> <operator pos:start="102:32" pos:end="102:32">*</operator> <name pos:start="102:34" pos:end="102:39">result</name> <operator pos:start="102:41" pos:end="102:41">+</operator> <operator pos:start="102:43" pos:end="102:43">(</operator><name pos:start="102:44" pos:end="102:46">int</name><operator pos:start="102:47" pos:end="102:47">)</operator> <operator pos:start="102:49" pos:end="102:49">(</operator><name pos:start="102:50" pos:end="102:53">temp</name> <operator pos:start="102:55" pos:end="102:55">^</operator> <operator pos:start="102:57" pos:end="102:57">(</operator><name pos:start="102:58" pos:end="102:61">temp</name> <operator pos:start="102:63" pos:end="102:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="102:67" pos:end="102:68">32</literal><operator pos:start="102:69" pos:end="102:69">)</operator><operator pos:start="102:70" pos:end="102:70">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="103:17" pos:end="103:58"><expr pos:start="103:17" pos:end="103:57"><name pos:start="103:17" pos:end="103:20">temp</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <call pos:start="103:24" pos:end="103:57"><name pos:start="103:24" pos:end="103:46"><name pos:start="103:24" pos:end="103:29">Double</name><operator pos:start="103:30" pos:end="103:30">.</operator><name pos:start="103:31" pos:end="103:46">doubleToLongBits</name></name><argument_list pos:start="103:47" pos:end="103:57">(<argument pos:start="103:48" pos:end="103:56"><expr pos:start="103:48" pos:end="103:56"><name pos:start="103:48" pos:end="103:56">longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="104:17" pos:end="104:71"><expr pos:start="104:17" pos:end="104:70"><name pos:start="104:17" pos:end="104:22">result</name> <operator pos:start="104:24" pos:end="104:24">=</operator> <name pos:start="104:26" pos:end="104:30">prime</name> <operator pos:start="104:32" pos:end="104:32">*</operator> <name pos:start="104:34" pos:end="104:39">result</name> <operator pos:start="104:41" pos:end="104:41">+</operator> <operator pos:start="104:43" pos:end="104:43">(</operator><name pos:start="104:44" pos:end="104:46">int</name><operator pos:start="104:47" pos:end="104:47">)</operator> <operator pos:start="104:49" pos:end="104:49">(</operator><name pos:start="104:50" pos:end="104:53">temp</name> <operator pos:start="104:55" pos:end="104:55">^</operator> <operator pos:start="104:57" pos:end="104:57">(</operator><name pos:start="104:58" pos:end="104:61">temp</name> <operator pos:start="104:63" pos:end="104:65">&gt;&gt;&gt;</operator> <literal type="number" pos:start="104:67" pos:end="104:68">32</literal><operator pos:start="104:69" pos:end="104:69">)</operator><operator pos:start="104:70" pos:end="104:70">)</operator></expr>;</expr_stmt>
		<return pos:start="105:17" pos:end="105:30">return <expr pos:start="105:24" pos:end="105:29"><name pos:start="105:24" pos:end="105:29">result</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="108:9" pos:end="110:11">/**
	 * @return a terrestrial position defined by an N-vector plus altitude
	 */</comment>
	<function pos:start="111:9" pos:end="126:9"><annotation pos:start="111:9" pos:end="111:17">@<name pos:start="111:10" pos:end="111:17">Override</name></annotation>
	<type pos:start="112:9" pos:end="112:22"><specifier pos:start="112:9" pos:end="112:14">public</specifier> <name pos:start="112:16" pos:end="112:22">NVector</name></type> <name pos:start="112:24" pos:end="112:32">toNVector</name><parameter_list pos:start="112:33" pos:end="112:34">()</parameter_list> <block pos:start="112:36" pos:end="126:9">{<block_content pos:start="119:17" pos:end="125:54">
		<comment type="block" pos:start="113:17" pos:end="118:19">/*
		 * The formula this code is based on can be found in a journal article called: "A Non-singular Horizontal Position Representation" by Kenneth Gade. You can find it at https://goo.gl/iCqdCn (see
		 * equation 3 in 5.2.1.)
		 * 
		 * Note: equation 3 is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
		 */</comment>
		<decl_stmt pos:start="119:17" pos:end="119:54"><decl pos:start="119:17" pos:end="119:53"><type pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22">double</name></type> <name pos:start="119:24" pos:end="119:26">lat</name> <init pos:start="119:28" pos:end="119:53">= <expr pos:start="119:30" pos:end="119:53"><call pos:start="119:30" pos:end="119:53"><name pos:start="119:30" pos:end="119:43"><name pos:start="119:30" pos:end="119:33">Math</name><operator pos:start="119:34" pos:end="119:34">.</operator><name pos:start="119:35" pos:end="119:43">toRadians</name></name><argument_list pos:start="119:44" pos:end="119:53">(<argument pos:start="119:45" pos:end="119:52"><expr pos:start="119:45" pos:end="119:52"><name pos:start="119:45" pos:end="119:52">latitude</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="120:17" pos:end="120:55"><decl pos:start="120:17" pos:end="120:54"><type pos:start="120:17" pos:end="120:22"><name pos:start="120:17" pos:end="120:22">double</name></type> <name pos:start="120:24" pos:end="120:26">lon</name> <init pos:start="120:28" pos:end="120:54">= <expr pos:start="120:30" pos:end="120:54"><call pos:start="120:30" pos:end="120:54"><name pos:start="120:30" pos:end="120:43"><name pos:start="120:30" pos:end="120:33">Math</name><operator pos:start="120:34" pos:end="120:34">.</operator><name pos:start="120:35" pos:end="120:43">toRadians</name></name><argument_list pos:start="120:44" pos:end="120:54">(<argument pos:start="120:45" pos:end="120:53"><expr pos:start="120:45" pos:end="120:53"><name pos:start="120:45" pos:end="120:53">longitude</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="121:17" pos:end="121:46"><decl pos:start="121:17" pos:end="121:45"><type pos:start="121:17" pos:end="121:22"><name pos:start="121:17" pos:end="121:22">double</name></type> <name pos:start="121:24" pos:end="121:29">cosLat</name> <init pos:start="121:31" pos:end="121:45">= <expr pos:start="121:33" pos:end="121:45"><call pos:start="121:33" pos:end="121:45"><name pos:start="121:33" pos:end="121:40"><name pos:start="121:33" pos:end="121:36">Math</name><operator pos:start="121:37" pos:end="121:37">.</operator><name pos:start="121:38" pos:end="121:40">cos</name></name><argument_list pos:start="121:41" pos:end="121:45">(<argument pos:start="121:42" pos:end="121:44"><expr pos:start="121:42" pos:end="121:44"><name pos:start="121:42" pos:end="121:44">lat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="122:17" pos:end="122:50"><decl pos:start="122:17" pos:end="122:49"><type pos:start="122:17" pos:end="122:22"><name pos:start="122:17" pos:end="122:22">double</name></type> <name pos:start="122:24" pos:end="122:24">x</name> <init pos:start="122:26" pos:end="122:49">= <expr pos:start="122:28" pos:end="122:49"><call pos:start="122:28" pos:end="122:40"><name pos:start="122:28" pos:end="122:35"><name pos:start="122:28" pos:end="122:31">Math</name><operator pos:start="122:32" pos:end="122:32">.</operator><name pos:start="122:33" pos:end="122:35">cos</name></name><argument_list pos:start="122:36" pos:end="122:40">(<argument pos:start="122:37" pos:end="122:39"><expr pos:start="122:37" pos:end="122:39"><name pos:start="122:37" pos:end="122:39">lon</name></expr></argument>)</argument_list></call> <operator pos:start="122:42" pos:end="122:42">*</operator> <name pos:start="122:44" pos:end="122:49">cosLat</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="123:17" pos:end="123:50"><decl pos:start="123:17" pos:end="123:49"><type pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:22">double</name></type> <name pos:start="123:24" pos:end="123:24">y</name> <init pos:start="123:26" pos:end="123:49">= <expr pos:start="123:28" pos:end="123:49"><call pos:start="123:28" pos:end="123:40"><name pos:start="123:28" pos:end="123:35"><name pos:start="123:28" pos:end="123:31">Math</name><operator pos:start="123:32" pos:end="123:32">.</operator><name pos:start="123:33" pos:end="123:35">sin</name></name><argument_list pos:start="123:36" pos:end="123:40">(<argument pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><name pos:start="123:37" pos:end="123:39">lon</name></expr></argument>)</argument_list></call> <operator pos:start="123:42" pos:end="123:42">*</operator> <name pos:start="123:44" pos:end="123:49">cosLat</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="124:17" pos:end="124:41"><decl pos:start="124:17" pos:end="124:40"><type pos:start="124:17" pos:end="124:22"><name pos:start="124:17" pos:end="124:22">double</name></type> <name pos:start="124:24" pos:end="124:24">z</name> <init pos:start="124:26" pos:end="124:40">= <expr pos:start="124:28" pos:end="124:40"><call pos:start="124:28" pos:end="124:40"><name pos:start="124:28" pos:end="124:35"><name pos:start="124:28" pos:end="124:31">Math</name><operator pos:start="124:32" pos:end="124:32">.</operator><name pos:start="124:33" pos:end="124:35">sin</name></name><argument_list pos:start="124:36" pos:end="124:40">(<argument pos:start="124:37" pos:end="124:39"><expr pos:start="124:37" pos:end="124:39"><name pos:start="124:37" pos:end="124:39">lat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="125:17" pos:end="125:54">return <expr pos:start="125:24" pos:end="125:53"><operator pos:start="125:24" pos:end="125:26">new</operator> <call pos:start="125:28" pos:end="125:53"><name pos:start="125:28" pos:end="125:34">NVector</name><argument_list pos:start="125:35" pos:end="125:53">(<argument pos:start="125:36" pos:end="125:36"><expr pos:start="125:36" pos:end="125:36"><name pos:start="125:36" pos:end="125:36">x</name></expr></argument>, <argument pos:start="125:39" pos:end="125:39"><expr pos:start="125:39" pos:end="125:39"><name pos:start="125:39" pos:end="125:39">y</name></expr></argument>, <argument pos:start="125:42" pos:end="125:42"><expr pos:start="125:42" pos:end="125:42"><name pos:start="125:42" pos:end="125:42">z</name></expr></argument>, <argument pos:start="125:45" pos:end="125:52"><expr pos:start="125:45" pos:end="125:52"><name pos:start="125:45" pos:end="125:52">altitude</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="128:9" pos:end="130:11">/**
	 * @return a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.
	 */</comment>
	<function pos:start="131:9" pos:end="134:9"><annotation pos:start="131:9" pos:end="131:17">@<name pos:start="131:10" pos:end="131:17">Override</name></annotation>
	<type pos:start="132:9" pos:end="132:22"><specifier pos:start="132:9" pos:end="132:14">public</specifier> <name pos:start="132:16" pos:end="132:22">PVector</name></type> <name pos:start="132:24" pos:end="132:32">toPVector</name><parameter_list pos:start="132:33" pos:end="132:34">()</parameter_list> <block pos:start="132:36" pos:end="134:9">{<block_content pos:start="133:17" pos:end="133:52">
		<return pos:start="133:17" pos:end="133:52">return <expr pos:start="133:24" pos:end="133:51"><call pos:start="133:24" pos:end="133:39"><name pos:start="133:24" pos:end="133:37"><name pos:start="133:24" pos:end="133:27">this</name><operator pos:start="133:28" pos:end="133:28">.</operator><name pos:start="133:29" pos:end="133:37">toNVector</name></name><argument_list pos:start="133:38" pos:end="133:39">()</argument_list></call><operator pos:start="133:40" pos:end="133:40">.</operator><call pos:start="133:41" pos:end="133:51"><name pos:start="133:41" pos:end="133:49">toPVector</name><argument_list pos:start="133:50" pos:end="133:51">()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="136:9" pos:end="142:9"><type pos:start="136:9" pos:end="136:22"><specifier pos:start="136:9" pos:end="136:15">private</specifier> <name pos:start="136:17" pos:end="136:22">double</name></type> <name pos:start="136:24" pos:end="136:41">checkAltitudeRange</name><parameter_list pos:start="136:42" pos:end="136:58">(<parameter pos:start="136:43" pos:end="136:57"><decl pos:start="136:43" pos:end="136:57"><type pos:start="136:43" pos:end="136:48"><name pos:start="136:43" pos:end="136:48">double</name></type> <name pos:start="136:50" pos:end="136:57">altitude</name></decl></parameter>)</parameter_list> <block pos:start="136:60" pos:end="142:9">{<block_content pos:start="141:17" pos:end="141:32">
		<comment type="line" pos:start="137:17" pos:end="137:48">// on wrong side of the earth...</comment>
		<comment type="line" pos:start="138:17" pos:end="138:45">// if (altitude &lt; -6378137) {</comment>
		<comment type="line" pos:start="139:17" pos:end="139:74">// throw new IllegalArgumentException("Invalid altitude");</comment>
		<comment type="line" pos:start="140:17" pos:end="140:20">// }</comment>
		<return pos:start="141:17" pos:end="141:32">return <expr pos:start="141:24" pos:end="141:31"><name pos:start="141:24" pos:end="141:31">altitude</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="144:9" pos:end="149:9"><type pos:start="144:9" pos:end="144:22"><specifier pos:start="144:9" pos:end="144:15">private</specifier> <name pos:start="144:17" pos:end="144:22">double</name></type> <name pos:start="144:24" pos:end="144:41">checkLatitudeRange</name><parameter_list pos:start="144:42" pos:end="144:58">(<parameter pos:start="144:43" pos:end="144:57"><decl pos:start="144:43" pos:end="144:57"><type pos:start="144:43" pos:end="144:48"><name pos:start="144:43" pos:end="144:48">double</name></type> <name pos:start="144:50" pos:end="144:57">latitude</name></decl></parameter>)</parameter_list> <block pos:start="144:60" pos:end="149:9">{<block_content pos:start="145:17" pos:end="148:32">
		<if_stmt pos:start="145:17" pos:end="147:17"><if pos:start="145:17" pos:end="147:17">if <condition pos:start="145:20" pos:end="145:44">(<expr pos:start="145:21" pos:end="145:43"><call pos:start="145:21" pos:end="145:38"><name pos:start="145:21" pos:end="145:28"><name pos:start="145:21" pos:end="145:24">Math</name><operator pos:start="145:25" pos:end="145:25">.</operator><name pos:start="145:26" pos:end="145:28">abs</name></name><argument_list pos:start="145:29" pos:end="145:38">(<argument pos:start="145:30" pos:end="145:37"><expr pos:start="145:30" pos:end="145:37"><name pos:start="145:30" pos:end="145:37">latitude</name></expr></argument>)</argument_list></call> <operator pos:start="145:40" pos:end="145:40">&gt;</operator> <literal type="number" pos:start="145:42" pos:end="145:43">90</literal></expr>)</condition> <block pos:start="145:46" pos:end="147:17">{<block_content pos:start="146:25" pos:end="146:79">
			<throw pos:start="146:25" pos:end="146:79">throw <expr pos:start="146:31" pos:end="146:78"><operator pos:start="146:31" pos:end="146:33">new</operator> <call pos:start="146:35" pos:end="146:78"><name pos:start="146:35" pos:end="146:58">IllegalArgumentException</name><argument_list pos:start="146:59" pos:end="146:78">(<argument pos:start="146:60" pos:end="146:77"><expr pos:start="146:60" pos:end="146:77"><literal type="string" pos:start="146:60" pos:end="146:77">"Invalid latitude"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		<return pos:start="148:17" pos:end="148:32">return <expr pos:start="148:24" pos:end="148:31"><name pos:start="148:24" pos:end="148:31">latitude</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="151:9" pos:end="156:9"><type pos:start="151:9" pos:end="151:22"><specifier pos:start="151:9" pos:end="151:15">private</specifier> <name pos:start="151:17" pos:end="151:22">double</name></type> <name pos:start="151:24" pos:end="151:42">checkLongitudeRange</name><parameter_list pos:start="151:43" pos:end="151:60">(<parameter pos:start="151:44" pos:end="151:59"><decl pos:start="151:44" pos:end="151:59"><type pos:start="151:44" pos:end="151:49"><name pos:start="151:44" pos:end="151:49">double</name></type> <name pos:start="151:51" pos:end="151:59">longitude</name></decl></parameter>)</parameter_list> <block pos:start="151:62" pos:end="156:9">{<block_content pos:start="152:17" pos:end="155:33">
		<if_stmt pos:start="152:17" pos:end="154:17"><if pos:start="152:17" pos:end="154:17">if <condition pos:start="152:20" pos:end="152:57">(<expr pos:start="152:21" pos:end="152:56"><name pos:start="152:21" pos:end="152:29">longitude</name> <operator pos:start="152:31" pos:end="152:31">&gt;</operator> <literal type="number" pos:start="152:33" pos:end="152:35">180</literal> <operator pos:start="152:37" pos:end="152:38">||</operator> <name pos:start="152:40" pos:end="152:48">longitude</name> <operator pos:start="152:50" pos:end="152:51">&lt;=</operator> <operator pos:start="152:53" pos:end="152:53">-</operator><literal type="number" pos:start="152:54" pos:end="152:56">180</literal></expr>)</condition> <block pos:start="152:59" pos:end="154:17">{<block_content pos:start="153:25" pos:end="153:80">
			<throw pos:start="153:25" pos:end="153:80">throw <expr pos:start="153:31" pos:end="153:79"><operator pos:start="153:31" pos:end="153:33">new</operator> <call pos:start="153:35" pos:end="153:79"><name pos:start="153:35" pos:end="153:58">IllegalArgumentException</name><argument_list pos:start="153:59" pos:end="153:79">(<argument pos:start="153:60" pos:end="153:78"><expr pos:start="153:60" pos:end="153:78"><literal type="string" pos:start="153:60" pos:end="153:78">"Invalid longitude"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		<return pos:start="155:17" pos:end="155:33">return <expr pos:start="155:24" pos:end="155:32"><name pos:start="155:24" pos:end="155:32">longitude</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="158:9" pos:end="161:9"><annotation pos:start="158:9" pos:end="158:17">@<name pos:start="158:10" pos:end="158:17">Override</name></annotation>
	<type pos:start="159:9" pos:end="159:28"><specifier pos:start="159:9" pos:end="159:14">public</specifier> <name pos:start="159:16" pos:end="159:28">LlaCoordinate</name></type> <name pos:start="159:30" pos:end="159:44">toLlaCoordinate</name><parameter_list pos:start="159:45" pos:end="159:46">()</parameter_list> <block pos:start="159:48" pos:end="161:9">{<block_content pos:start="160:17" pos:end="160:28">
		<return pos:start="160:17" pos:end="160:28">return <expr pos:start="160:24" pos:end="160:27"><name pos:start="160:24" pos:end="160:27">this</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>
