<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="src/DronologyMonitoringManager.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:41">package <name pos:start="1:9" pos:end="1:40"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:29">core</name><operator pos:start="1:30" pos:end="1:30">.</operator><name pos:start="1:31" pos:end="1:40">monitoring</name></name>;</package>

<import pos:start="3:1" pos:end="3:47">import <name pos:start="3:8" pos:end="3:46"><name pos:start="3:8" pos:end="3:11">java</name><operator pos:start="3:12" pos:end="3:12">.</operator><name pos:start="3:13" pos:end="3:16">util</name><operator pos:start="3:17" pos:end="3:17">.</operator><name pos:start="3:18" pos:end="3:27">concurrent</name><operator pos:start="3:28" pos:end="3:28">.</operator><name pos:start="3:29" pos:end="3:46">ArrayBlockingQueue</name></name>;</import>
<import pos:start="4:1" pos:end="4:42">import <name pos:start="4:8" pos:end="4:41"><name pos:start="4:8" pos:end="4:11">java</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:16">util</name><operator pos:start="4:17" pos:end="4:17">.</operator><name pos:start="4:18" pos:end="4:27">concurrent</name><operator pos:start="4:28" pos:end="4:28">.</operator><name pos:start="4:29" pos:end="4:41">BlockingQueue</name></name>;</import>
<import pos:start="5:1" pos:end="5:44">import <name pos:start="5:8" pos:end="5:43"><name pos:start="5:8" pos:end="5:11">java</name><operator pos:start="5:12" pos:end="5:12">.</operator><name pos:start="5:13" pos:end="5:16">util</name><operator pos:start="5:17" pos:end="5:17">.</operator><name pos:start="5:18" pos:end="5:27">concurrent</name><operator pos:start="5:28" pos:end="5:28">.</operator><name pos:start="5:29" pos:end="5:43">ExecutorService</name></name>;</import>
<import pos:start="6:1" pos:end="6:38">import <name pos:start="6:8" pos:end="6:37"><name pos:start="6:8" pos:end="6:11">java</name><operator pos:start="6:12" pos:end="6:12">.</operator><name pos:start="6:13" pos:end="6:16">util</name><operator pos:start="6:17" pos:end="6:17">.</operator><name pos:start="6:18" pos:end="6:27">concurrent</name><operator pos:start="6:28" pos:end="6:28">.</operator><name pos:start="6:29" pos:end="6:37">Executors</name></name>;</import>

<import pos:start="8:1" pos:end="8:48">import <name pos:start="8:8" pos:end="8:47"><name pos:start="8:8" pos:end="8:10">edu</name><operator pos:start="8:11" pos:end="8:11">.</operator><name pos:start="8:12" pos:end="8:13">nd</name><operator pos:start="8:14" pos:end="8:14">.</operator><name pos:start="8:15" pos:end="8:23">dronology</name><operator pos:start="8:24" pos:end="8:24">.</operator><name pos:start="8:25" pos:end="8:28">util</name><operator pos:start="8:29" pos:end="8:29">.</operator><name pos:start="8:30" pos:end="8:47">NamedThreadFactory</name></name>;</import>
<import pos:start="9:1" pos:end="9:30">import <name pos:start="9:8" pos:end="9:29"><name pos:start="9:8" pos:end="9:10">net</name><operator pos:start="9:11" pos:end="9:11">.</operator><name pos:start="9:12" pos:end="9:13">mv</name><operator pos:start="9:14" pos:end="9:14">.</operator><name pos:start="9:15" pos:end="9:21">logging</name><operator pos:start="9:22" pos:end="9:22">.</operator><name pos:start="9:23" pos:end="9:29">ILogger</name></name>;</import>
<import pos:start="10:1" pos:end="10:37">import <name pos:start="10:8" pos:end="10:36"><name pos:start="10:8" pos:end="10:10">net</name><operator pos:start="10:11" pos:end="10:11">.</operator><name pos:start="10:12" pos:end="10:13">mv</name><operator pos:start="10:14" pos:end="10:14">.</operator><name pos:start="10:15" pos:end="10:21">logging</name><operator pos:start="10:22" pos:end="10:22">.</operator><name pos:start="10:23" pos:end="10:36">LoggerProvider</name></name>;</import>

<class pos:start="12:1" pos:end="63:1"><specifier pos:start="12:1" pos:end="12:6">public</specifier> class <name pos:start="12:14" pos:end="12:39">DronologyMonitoringManager</name> <block pos:start="12:41" pos:end="63:1">{

	<decl_stmt pos:start="14:9" pos:end="14:94"><decl pos:start="14:9" pos:end="14:93"><type pos:start="14:9" pos:end="14:49"><specifier pos:start="14:9" pos:end="14:15">private</specifier> <specifier pos:start="14:17" pos:end="14:22">static</specifier> <name pos:start="14:24" pos:end="14:49">DronologyMonitoringManager</name></type> <name pos:start="14:51" pos:end="14:58">INSTANCE</name> <init pos:start="14:60" pos:end="14:93">= <expr pos:start="14:62" pos:end="14:93"><operator pos:start="14:62" pos:end="14:64">new</operator> <call pos:start="14:66" pos:end="14:93"><name pos:start="14:66" pos:end="14:91">DronologyMonitoringManager</name><argument_list pos:start="14:92" pos:end="14:93">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="16:9" pos:end="16:105"><decl pos:start="16:9" pos:end="16:104"><type pos:start="16:9" pos:end="16:36"><specifier pos:start="16:9" pos:end="16:15">private</specifier> <specifier pos:start="16:17" pos:end="16:22">static</specifier> <specifier pos:start="16:24" pos:end="16:28">final</specifier> <name pos:start="16:30" pos:end="16:36">ILogger</name></type> <name pos:start="16:38" pos:end="16:43">LOGGER</name> <init pos:start="16:45" pos:end="16:104">= <expr pos:start="16:47" pos:end="16:104"><call pos:start="16:47" pos:end="16:104"><name pos:start="16:47" pos:end="16:70"><name pos:start="16:47" pos:end="16:60">LoggerProvider</name><operator pos:start="16:61" pos:end="16:61">.</operator><name pos:start="16:62" pos:end="16:70">getLogger</name></name><argument_list pos:start="16:71" pos:end="16:104">(<argument pos:start="16:72" pos:end="16:103"><expr pos:start="16:72" pos:end="16:103"><name pos:start="16:72" pos:end="16:103"><name pos:start="16:72" pos:end="16:97">DronologyMonitoringManager</name><operator pos:start="16:98" pos:end="16:98">.</operator><name pos:start="16:99" pos:end="16:103">class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="18:9" pos:end="18:102"><decl pos:start="18:9" pos:end="18:101"><type pos:start="18:9" pos:end="18:63"><specifier pos:start="18:9" pos:end="18:15">private</specifier> <specifier pos:start="18:17" pos:end="18:22">static</specifier> <specifier pos:start="18:24" pos:end="18:28">final</specifier> <name pos:start="18:30" pos:end="18:63"><name pos:start="18:30" pos:end="18:42">BlockingQueue</name><argument_list type="generic" pos:start="18:43" pos:end="18:63">&lt;<argument pos:start="18:44" pos:end="18:62"><name pos:start="18:44" pos:end="18:62">IMonitorableMessage</name></argument>&gt;</argument_list></name></type> <name pos:start="18:65" pos:end="18:69">queue</name> <init pos:start="18:71" pos:end="18:101">= <expr pos:start="18:73" pos:end="18:101"><operator pos:start="18:73" pos:end="18:75">new</operator> <call pos:start="18:77" pos:end="18:101"><name pos:start="18:77" pos:end="18:96"><name pos:start="18:77" pos:end="18:94">ArrayBlockingQueue</name><argument_list type="generic" pos:start="18:95" pos:end="18:96">&lt;&gt;</argument_list></name><argument_list pos:start="18:97" pos:end="18:101">(<argument pos:start="18:98" pos:end="18:100"><expr pos:start="18:98" pos:end="18:100"><literal type="number" pos:start="18:98" pos:end="18:100">500</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="20:9" pos:end="21:95"><decl pos:start="20:9" pos:end="21:94"><type pos:start="20:9" pos:end="20:44"><specifier pos:start="20:9" pos:end="20:15">private</specifier> <specifier pos:start="20:17" pos:end="20:22">static</specifier> <specifier pos:start="20:24" pos:end="20:28">final</specifier> <name pos:start="20:30" pos:end="20:44">ExecutorService</name></type> <name pos:start="20:46" pos:end="20:61">SERVICE_EXECUTOR</name> <init pos:start="20:63" pos:end="21:94">= <expr pos:start="20:65" pos:end="21:94"><call pos:start="20:65" pos:end="21:94"><name pos:start="20:65" pos:end="21:48"><name pos:start="20:65" pos:end="20:73">Executors</name>
			<operator pos:start="21:25" pos:end="21:25">.</operator><name pos:start="21:26" pos:end="21:48">newSingleThreadExecutor</name></name><argument_list pos:start="21:49" pos:end="21:94">(<argument pos:start="21:50" pos:end="21:93"><expr pos:start="21:50" pos:end="21:93"><operator pos:start="21:50" pos:end="21:52">new</operator> <call pos:start="21:54" pos:end="21:93"><name pos:start="21:54" pos:end="21:71">NamedThreadFactory</name><argument_list pos:start="21:72" pos:end="21:93">(<argument pos:start="21:73" pos:end="21:92"><expr pos:start="21:73" pos:end="21:92"><literal type="string" pos:start="21:73" pos:end="21:92">"Monitoring-Manager"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="23:9" pos:end="23:42"><decl pos:start="23:9" pos:end="23:41"><type pos:start="23:9" pos:end="23:23"><specifier pos:start="23:9" pos:end="23:15">private</specifier> <name pos:start="23:17" pos:end="23:23">boolean</name></type> <name pos:start="23:25" pos:end="23:41">handlerRegistered</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc" pos:start="25:9" pos:end="28:11">/**
	 * 
	 * @return The singleton instance.
	 */</comment>
	<function pos:start="29:9" pos:end="39:9"><type pos:start="29:9" pos:end="29:48"><specifier pos:start="29:9" pos:end="29:14">public</specifier> <specifier pos:start="29:16" pos:end="29:21">static</specifier> <name pos:start="29:23" pos:end="29:48">DronologyMonitoringManager</name></type> <name pos:start="29:50" pos:end="29:60">getInstance</name><parameter_list pos:start="29:61" pos:end="29:62">()</parameter_list> <block pos:start="29:64" pos:end="39:9">{<block_content pos:start="31:17" pos:end="38:32">

		<if_stmt pos:start="31:17" pos:end="37:17"><if pos:start="31:17" pos:end="37:17">if <condition pos:start="31:20" pos:end="31:37">(<expr pos:start="31:21" pos:end="31:36"><name pos:start="31:21" pos:end="31:28">INSTANCE</name> <operator pos:start="31:30" pos:end="31:31">==</operator> <literal type="null" pos:start="31:33" pos:end="31:36">null</literal></expr>)</condition> <block pos:start="31:39" pos:end="37:17">{<block_content pos:start="32:25" pos:end="36:25">
			<synchronized pos:start="32:25" pos:end="36:25">synchronized <init pos:start="32:38" pos:end="32:71">(<expr pos:start="32:39" pos:end="32:70"><name pos:start="32:39" pos:end="32:70"><name pos:start="32:39" pos:end="32:64">DronologyMonitoringManager</name><operator pos:start="32:65" pos:end="32:65">.</operator><name pos:start="32:66" pos:end="32:70">class</name></name></expr>)</init> <block pos:start="32:73" pos:end="36:25">{<block_content pos:start="33:33" pos:end="35:33">
				<if_stmt pos:start="33:33" pos:end="35:33"><if pos:start="33:33" pos:end="35:33">if <condition pos:start="33:36" pos:end="33:53">(<expr pos:start="33:37" pos:end="33:52"><name pos:start="33:37" pos:end="33:44">INSTANCE</name> <operator pos:start="33:46" pos:end="33:47">==</operator> <literal type="null" pos:start="33:49" pos:end="33:52">null</literal></expr>)</condition> <block pos:start="33:55" pos:end="35:33">{<block_content pos:start="34:41" pos:end="34:84">
					<expr_stmt pos:start="34:41" pos:end="34:84"><expr pos:start="34:41" pos:end="34:83"><name pos:start="34:41" pos:end="34:48">INSTANCE</name> <operator pos:start="34:50" pos:end="34:50">=</operator> <operator pos:start="34:52" pos:end="34:54">new</operator> <call pos:start="34:56" pos:end="34:83"><name pos:start="34:56" pos:end="34:81">DronologyMonitoringManager</name><argument_list pos:start="34:82" pos:end="34:83">()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></synchronized>
		</block_content>}</block></if></if_stmt>
		<return pos:start="38:17" pos:end="38:32">return <expr pos:start="38:24" pos:end="38:31"><name pos:start="38:24" pos:end="38:31">INSTANCE</name></expr>;</return>
	</block_content>}</block></function>

	<function pos:start="41:9" pos:end="55:9"><type pos:start="41:9" pos:end="41:19"><specifier pos:start="41:9" pos:end="41:14">public</specifier> <name pos:start="41:16" pos:end="41:19">void</name></type> <name pos:start="41:21" pos:end="41:27">publish</name><parameter_list pos:start="41:28" pos:end="41:56">(<parameter pos:start="41:29" pos:end="41:55"><decl pos:start="41:29" pos:end="41:55"><type pos:start="41:29" pos:end="41:47"><name pos:start="41:29" pos:end="41:47">IMonitorableMessage</name></type> <name pos:start="41:49" pos:end="41:55">message</name></decl></parameter>)</parameter_list> <block pos:start="41:58" pos:end="55:9">{<block_content pos:start="42:17" pos:end="53:17">
		<try pos:start="42:17" pos:end="53:17">try <block pos:start="42:21" pos:end="51:17">{<block_content pos:start="43:25" pos:end="50:25">
			<if_stmt pos:start="43:25" pos:end="45:25"><if pos:start="43:25" pos:end="45:25">if <condition pos:start="43:28" pos:end="43:47">(<expr pos:start="43:29" pos:end="43:46"><operator pos:start="43:29" pos:end="43:29">!</operator><name pos:start="43:30" pos:end="43:46">handlerRegistered</name></expr>)</condition> <block pos:start="43:49" pos:end="45:25">{<block_content pos:start="44:33" pos:end="44:39">
				<return pos:start="44:33" pos:end="44:39">return;</return>
			</block_content>}</block></if></if_stmt>

			<decl_stmt pos:start="47:25" pos:end="47:61"><decl pos:start="47:25" pos:end="47:60"><type pos:start="47:25" pos:end="47:31"><name pos:start="47:25" pos:end="47:31">boolean</name></type> <name pos:start="47:33" pos:end="47:37">taken</name> <init pos:start="47:39" pos:end="47:60">= <expr pos:start="47:41" pos:end="47:60"><call pos:start="47:41" pos:end="47:60"><name pos:start="47:41" pos:end="47:51"><name pos:start="47:41" pos:end="47:45">queue</name><operator pos:start="47:46" pos:end="47:46">.</operator><name pos:start="47:47" pos:end="47:51">offer</name></name><argument_list pos:start="47:52" pos:end="47:60">(<argument pos:start="47:53" pos:end="47:59"><expr pos:start="47:53" pos:end="47:59"><name pos:start="47:53" pos:end="47:59">message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt pos:start="48:25" pos:end="50:25"><if pos:start="48:25" pos:end="50:25">if <condition pos:start="48:28" pos:end="48:35">(<expr pos:start="48:29" pos:end="48:34"><operator pos:start="48:29" pos:end="48:29">!</operator><name pos:start="48:30" pos:end="48:34">taken</name></expr>)</condition> <block pos:start="48:37" pos:end="50:25">{<block_content pos:start="49:33" pos:end="49:71">
				<expr_stmt pos:start="49:33" pos:end="49:71"><expr pos:start="49:33" pos:end="49:70"><call pos:start="49:33" pos:end="49:70"><name pos:start="49:33" pos:end="49:44"><name pos:start="49:33" pos:end="49:38">LOGGER</name><operator pos:start="49:39" pos:end="49:39">.</operator><name pos:start="49:40" pos:end="49:44">error</name></name><argument_list pos:start="49:45" pos:end="49:70">(<argument pos:start="49:46" pos:end="49:69"><expr pos:start="49:46" pos:end="49:69"><literal type="string" pos:start="49:46" pos:end="49:69">"Monitoring queue full!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block> <catch pos:start="51:19" pos:end="53:17">catch <parameter_list pos:start="51:25" pos:end="51:37">(<parameter pos:start="51:26" pos:end="51:36"><decl pos:start="51:26" pos:end="51:36"><type pos:start="51:26" pos:end="51:36"><name pos:start="51:26" pos:end="51:34">Throwable</name></type> <name pos:start="51:36" pos:end="51:36">t</name></decl></parameter>)</parameter_list> <block pos:start="51:39" pos:end="53:17">{<block_content pos:start="52:25" pos:end="52:40">
			<expr_stmt pos:start="52:25" pos:end="52:40"><expr pos:start="52:25" pos:end="52:39"><call pos:start="52:25" pos:end="52:39"><name pos:start="52:25" pos:end="52:36"><name pos:start="52:25" pos:end="52:30">LOGGER</name><operator pos:start="52:31" pos:end="52:31">.</operator><name pos:start="52:32" pos:end="52:36">error</name></name><argument_list pos:start="52:37" pos:end="52:39">(<argument pos:start="52:38" pos:end="52:38"><expr pos:start="52:38" pos:end="52:38"><name pos:start="52:38" pos:end="52:38">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		</block_content>}</block></catch></try>

	</block_content>}</block></function>

	<function pos:start="57:9" pos:end="61:9"><type pos:start="57:9" pos:end="57:19"><specifier pos:start="57:9" pos:end="57:14">public</specifier> <name pos:start="57:16" pos:end="57:19">void</name></type> <name pos:start="57:21" pos:end="57:35">registerHandler</name><parameter_list pos:start="57:36" pos:end="57:67">(<parameter pos:start="57:37" pos:end="57:66"><decl pos:start="57:37" pos:end="57:66"><type pos:start="57:37" pos:end="57:58"><name pos:start="57:37" pos:end="57:58">IMonitoringDataHandler</name></type> <name pos:start="57:60" pos:end="57:66">handler</name></decl></parameter>)</parameter_list> <block pos:start="57:69" pos:end="61:9">{<block_content pos:start="58:17" pos:end="60:49">
		<expr_stmt pos:start="58:17" pos:end="58:40"><expr pos:start="58:17" pos:end="58:39"><call pos:start="58:17" pos:end="58:39"><name pos:start="58:17" pos:end="58:32"><name pos:start="58:17" pos:end="58:23">handler</name><operator pos:start="58:24" pos:end="58:24">.</operator><name pos:start="58:25" pos:end="58:32">setQueue</name></name><argument_list pos:start="58:33" pos:end="58:39">(<argument pos:start="58:34" pos:end="58:38"><expr pos:start="58:34" pos:end="58:38"><name pos:start="58:34" pos:end="58:38">queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="59:17" pos:end="59:41"><expr pos:start="59:17" pos:end="59:40"><name pos:start="59:17" pos:end="59:33">handlerRegistered</name> <operator pos:start="59:35" pos:end="59:35">=</operator> <literal type="boolean" pos:start="59:37" pos:end="59:40">true</literal></expr>;</expr_stmt>
		<expr_stmt pos:start="60:17" pos:end="60:49"><expr pos:start="60:17" pos:end="60:48"><call pos:start="60:17" pos:end="60:48"><name pos:start="60:17" pos:end="60:39"><name pos:start="60:17" pos:end="60:32">SERVICE_EXECUTOR</name><operator pos:start="60:33" pos:end="60:33">.</operator><name pos:start="60:34" pos:end="60:39">submit</name></name><argument_list pos:start="60:40" pos:end="60:48">(<argument pos:start="60:41" pos:end="60:47"><expr pos:start="60:41" pos:end="60:47"><name pos:start="60:41" pos:end="60:47">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>
