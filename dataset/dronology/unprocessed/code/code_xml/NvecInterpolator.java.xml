<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="src/NvecInterpolator.java" pos:tabs="8"><package pos:start="1:1" pos:end="1:54">package <name pos:start="1:9" pos:end="1:53"><name pos:start="1:9" pos:end="1:11">edu</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:14">nd</name><operator pos:start="1:15" pos:end="1:15">.</operator><name pos:start="1:16" pos:end="1:24">dronology</name><operator pos:start="1:25" pos:end="1:25">.</operator><name pos:start="1:26" pos:end="1:29">core</name><operator pos:start="1:30" pos:end="1:30">.</operator><name pos:start="1:31" pos:end="1:39">simulator</name><operator pos:start="1:40" pos:end="1:40">.</operator><name pos:start="1:41" pos:end="1:53">nvecsimulator</name></name>;</package>

<import pos:start="3:1" pos:end="3:48">import <name pos:start="3:8" pos:end="3:47"><name pos:start="3:8" pos:end="3:10">edu</name><operator pos:start="3:11" pos:end="3:11">.</operator><name pos:start="3:12" pos:end="3:13">nd</name><operator pos:start="3:14" pos:end="3:14">.</operator><name pos:start="3:15" pos:end="3:23">dronology</name><operator pos:start="3:24" pos:end="3:24">.</operator><name pos:start="3:25" pos:end="3:28">core</name><operator pos:start="3:29" pos:end="3:29">.</operator><name pos:start="3:30" pos:end="3:39">coordinate</name><operator pos:start="3:40" pos:end="3:40">.</operator><name pos:start="3:41" pos:end="3:47">NVector</name></name>;</import>

<comment type="block" format="javadoc" pos:start="5:1" pos:end="9:3">/**
 * 
 * @author Michael Murphy
 *
 */</comment>
<class pos:start="10:1" pos:end="67:1"><specifier pos:start="10:1" pos:end="10:6">public</specifier> class <name pos:start="10:14" pos:end="10:29">NvecInterpolator</name> <block pos:start="10:31" pos:end="67:1">{
	<decl_stmt pos:start="11:9" pos:end="11:53"><decl pos:start="11:9" pos:end="11:52"><type pos:start="11:9" pos:end="11:34"><specifier pos:start="11:9" pos:end="11:14">public</specifier> <specifier pos:start="11:16" pos:end="11:21">static</specifier> <specifier pos:start="11:23" pos:end="11:27">final</specifier> <name pos:start="11:29" pos:end="11:34">double</name></type> <name pos:start="11:36" pos:end="11:44">TOLERANCE</name> <init pos:start="11:46" pos:end="11:52">= <expr pos:start="11:48" pos:end="11:52"><literal type="number" pos:start="11:48" pos:end="11:52">0.001</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="11:55" pos:end="11:69">// 1 Millimeter</comment>

	<function pos:start="13:9" pos:end="19:9"><type pos:start="13:9" pos:end="13:30"><specifier pos:start="13:9" pos:end="13:15">private</specifier> <specifier pos:start="13:17" pos:end="13:22">static</specifier> <name pos:start="13:24" pos:end="13:30">NVector</name></type> <name pos:start="13:32" pos:end="13:34">mid</name><parameter_list pos:start="13:35" pos:end="13:56">(<parameter pos:start="13:36" pos:end="13:44"><decl pos:start="13:36" pos:end="13:44"><type pos:start="13:36" pos:end="13:44"><name pos:start="13:36" pos:end="13:42">NVector</name></type> <name pos:start="13:44" pos:end="13:44">a</name></decl></parameter>, <parameter pos:start="13:47" pos:end="13:55"><decl pos:start="13:47" pos:end="13:55"><type pos:start="13:47" pos:end="13:55"><name pos:start="13:47" pos:end="13:53">NVector</name></type> <name pos:start="13:55" pos:end="13:55">b</name></decl></parameter>)</parameter_list> <block pos:start="13:58" pos:end="19:9">{<block_content pos:start="14:17" pos:end="18:49">
		<decl_stmt pos:start="14:17" pos:end="14:55"><decl pos:start="14:17" pos:end="14:54"><type pos:start="14:17" pos:end="14:22"><name pos:start="14:17" pos:end="14:22">double</name></type> <name pos:start="14:24" pos:end="14:24">x</name> <init pos:start="14:26" pos:end="14:54">= <expr pos:start="14:28" pos:end="14:54"><call pos:start="14:28" pos:end="14:54"><name pos:start="14:28" pos:end="14:34">average</name><argument_list pos:start="14:35" pos:end="14:54">(<argument pos:start="14:36" pos:end="14:43"><expr pos:start="14:36" pos:end="14:43"><call pos:start="14:36" pos:end="14:43"><name pos:start="14:36" pos:end="14:41"><name pos:start="14:36" pos:end="14:36">a</name><operator pos:start="14:37" pos:end="14:37">.</operator><name pos:start="14:38" pos:end="14:41">getX</name></name><argument_list pos:start="14:42" pos:end="14:43">()</argument_list></call></expr></argument>, <argument pos:start="14:46" pos:end="14:53"><expr pos:start="14:46" pos:end="14:53"><call pos:start="14:46" pos:end="14:53"><name pos:start="14:46" pos:end="14:51"><name pos:start="14:46" pos:end="14:46">b</name><operator pos:start="14:47" pos:end="14:47">.</operator><name pos:start="14:48" pos:end="14:51">getX</name></name><argument_list pos:start="14:52" pos:end="14:53">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="15:17" pos:end="15:55"><decl pos:start="15:17" pos:end="15:54"><type pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">double</name></type> <name pos:start="15:24" pos:end="15:24">y</name> <init pos:start="15:26" pos:end="15:54">= <expr pos:start="15:28" pos:end="15:54"><call pos:start="15:28" pos:end="15:54"><name pos:start="15:28" pos:end="15:34">average</name><argument_list pos:start="15:35" pos:end="15:54">(<argument pos:start="15:36" pos:end="15:43"><expr pos:start="15:36" pos:end="15:43"><call pos:start="15:36" pos:end="15:43"><name pos:start="15:36" pos:end="15:41"><name pos:start="15:36" pos:end="15:36">a</name><operator pos:start="15:37" pos:end="15:37">.</operator><name pos:start="15:38" pos:end="15:41">getY</name></name><argument_list pos:start="15:42" pos:end="15:43">()</argument_list></call></expr></argument>, <argument pos:start="15:46" pos:end="15:53"><expr pos:start="15:46" pos:end="15:53"><call pos:start="15:46" pos:end="15:53"><name pos:start="15:46" pos:end="15:51"><name pos:start="15:46" pos:end="15:46">b</name><operator pos:start="15:47" pos:end="15:47">.</operator><name pos:start="15:48" pos:end="15:51">getY</name></name><argument_list pos:start="15:52" pos:end="15:53">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="16:17" pos:end="16:55"><decl pos:start="16:17" pos:end="16:54"><type pos:start="16:17" pos:end="16:22"><name pos:start="16:17" pos:end="16:22">double</name></type> <name pos:start="16:24" pos:end="16:24">z</name> <init pos:start="16:26" pos:end="16:54">= <expr pos:start="16:28" pos:end="16:54"><call pos:start="16:28" pos:end="16:54"><name pos:start="16:28" pos:end="16:34">average</name><argument_list pos:start="16:35" pos:end="16:54">(<argument pos:start="16:36" pos:end="16:43"><expr pos:start="16:36" pos:end="16:43"><call pos:start="16:36" pos:end="16:43"><name pos:start="16:36" pos:end="16:41"><name pos:start="16:36" pos:end="16:36">a</name><operator pos:start="16:37" pos:end="16:37">.</operator><name pos:start="16:38" pos:end="16:41">getZ</name></name><argument_list pos:start="16:42" pos:end="16:43">()</argument_list></call></expr></argument>, <argument pos:start="16:46" pos:end="16:53"><expr pos:start="16:46" pos:end="16:53"><call pos:start="16:46" pos:end="16:53"><name pos:start="16:46" pos:end="16:51"><name pos:start="16:46" pos:end="16:46">b</name><operator pos:start="16:47" pos:end="16:47">.</operator><name pos:start="16:48" pos:end="16:51">getZ</name></name><argument_list pos:start="16:52" pos:end="16:53">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="17:17" pos:end="17:71"><decl pos:start="17:17" pos:end="17:70"><type pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:22">double</name></type> <name pos:start="17:24" pos:end="17:26">alt</name> <init pos:start="17:28" pos:end="17:70">= <expr pos:start="17:30" pos:end="17:70"><call pos:start="17:30" pos:end="17:70"><name pos:start="17:30" pos:end="17:36">average</name><argument_list pos:start="17:37" pos:end="17:70">(<argument pos:start="17:38" pos:end="17:52"><expr pos:start="17:38" pos:end="17:52"><call pos:start="17:38" pos:end="17:52"><name pos:start="17:38" pos:end="17:50"><name pos:start="17:38" pos:end="17:38">a</name><operator pos:start="17:39" pos:end="17:39">.</operator><name pos:start="17:40" pos:end="17:50">getAltitude</name></name><argument_list pos:start="17:51" pos:end="17:52">()</argument_list></call></expr></argument>, <argument pos:start="17:55" pos:end="17:69"><expr pos:start="17:55" pos:end="17:69"><call pos:start="17:55" pos:end="17:69"><name pos:start="17:55" pos:end="17:67"><name pos:start="17:55" pos:end="17:55">b</name><operator pos:start="17:56" pos:end="17:56">.</operator><name pos:start="17:57" pos:end="17:67">getAltitude</name></name><argument_list pos:start="17:68" pos:end="17:69">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:start="18:17" pos:end="18:49">return <expr pos:start="18:24" pos:end="18:48"><operator pos:start="18:24" pos:end="18:26">new</operator> <call pos:start="18:28" pos:end="18:48"><name pos:start="18:28" pos:end="18:34">NVector</name><argument_list pos:start="18:35" pos:end="18:48">(<argument pos:start="18:36" pos:end="18:36"><expr pos:start="18:36" pos:end="18:36"><name pos:start="18:36" pos:end="18:36">x</name></expr></argument>, <argument pos:start="18:39" pos:end="18:39"><expr pos:start="18:39" pos:end="18:39"><name pos:start="18:39" pos:end="18:39">y</name></expr></argument>, <argument pos:start="18:42" pos:end="18:42"><expr pos:start="18:42" pos:end="18:42"><name pos:start="18:42" pos:end="18:42">z</name></expr></argument>, <argument pos:start="18:45" pos:end="18:47"><expr pos:start="18:45" pos:end="18:47"><name pos:start="18:45" pos:end="18:47">alt</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
 
	<function pos:start="21:9" pos:end="23:9"><type pos:start="21:9" pos:end="21:29"><specifier pos:start="21:9" pos:end="21:15">private</specifier> <specifier pos:start="21:17" pos:end="21:22">static</specifier> <name pos:start="21:24" pos:end="21:29">double</name></type> <name pos:start="21:31" pos:end="21:37">average</name><parameter_list pos:start="21:38" pos:end="21:57">(<parameter pos:start="21:39" pos:end="21:46"><decl pos:start="21:39" pos:end="21:46"><type pos:start="21:39" pos:end="21:46"><name pos:start="21:39" pos:end="21:44">double</name></type> <name pos:start="21:46" pos:end="21:46">a</name></decl></parameter>, <parameter pos:start="21:49" pos:end="21:56"><decl pos:start="21:49" pos:end="21:56"><type pos:start="21:49" pos:end="21:56"><name pos:start="21:49" pos:end="21:54">double</name></type> <name pos:start="21:56" pos:end="21:56">b</name></decl></parameter>)</parameter_list> <block pos:start="21:59" pos:end="23:9">{<block_content pos:start="22:17" pos:end="22:37">
		<return pos:start="22:17" pos:end="22:37">return <expr pos:start="22:24" pos:end="22:36"><operator pos:start="22:24" pos:end="22:24">(</operator><name pos:start="22:25" pos:end="22:25">a</name> <operator pos:start="22:27" pos:end="22:27">+</operator> <name pos:start="22:29" pos:end="22:29">b</name><operator pos:start="22:30" pos:end="22:30">)</operator> <operator pos:start="22:32" pos:end="22:32">/</operator> <literal type="number" pos:start="22:34" pos:end="22:36">2.0</literal></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc" pos:start="25:9" pos:end="42:11">/**
	 * Uses the bisection method to iteratively hone in on the nvector that is
	 * metersToTravel distance away from the current n-vector along the path
	 * that goes from current to target. A path can be thought of as the set of
	 * NVectors you can create by interpolating between current and target. This
	 * code takes advantage of this to find the NVector on this path that is the
	 * right distance away from the current distance.
	 * 
	 * @param current
	 *            drone current position
	 * @param target
	 *            drone target position
	 * @param metersToTravel
	 *            the distance the drone should travel along the path from
	 *            current to target
	 * @return the nvector taht is meters distance away from current along the
	 *         path that goes from current to target
	 */</comment>
	<function pos:start="43:9" pos:end="65:9"><type pos:start="43:9" pos:end="43:29"><specifier pos:start="43:9" pos:end="43:14">public</specifier> <specifier pos:start="43:16" pos:end="43:21">static</specifier> <name pos:start="43:23" pos:end="43:29">NVector</name></type> <name pos:start="43:31" pos:end="43:34">move</name><parameter_list pos:start="43:35" pos:end="43:90">(<parameter pos:start="43:36" pos:end="43:50"><decl pos:start="43:36" pos:end="43:50"><type pos:start="43:36" pos:end="43:50"><name pos:start="43:36" pos:end="43:42">NVector</name></type> <name pos:start="43:44" pos:end="43:50">current</name></decl></parameter>, <parameter pos:start="43:53" pos:end="43:66"><decl pos:start="43:53" pos:end="43:66"><type pos:start="43:53" pos:end="43:66"><name pos:start="43:53" pos:end="43:59">NVector</name></type> <name pos:start="43:61" pos:end="43:66">target</name></decl></parameter>, <parameter pos:start="43:69" pos:end="43:89"><decl pos:start="43:69" pos:end="43:89"><type pos:start="43:69" pos:end="43:89"><name pos:start="43:69" pos:end="43:74">double</name></type> <name pos:start="43:76" pos:end="43:89">metersToTravel</name></decl></parameter>)</parameter_list> <block pos:start="43:92" pos:end="65:9">{<block_content pos:start="45:17" pos:end="64:33">
		<comment type="line" pos:start="44:17" pos:end="44:78">// a negative value for metersToTravel causes an infinite loop</comment>
		<if_stmt pos:start="45:17" pos:end="47:17"><if pos:start="45:17" pos:end="47:17">if <condition pos:start="45:20" pos:end="45:41">(<expr pos:start="45:21" pos:end="45:40"><name pos:start="45:21" pos:end="45:34">metersToTravel</name> <operator pos:start="45:36" pos:end="45:36">&lt;</operator> <literal type="number" pos:start="45:38" pos:end="45:40">0.0</literal></expr>)</condition> <block pos:start="45:43" pos:end="47:17">{<block_content pos:start="46:25" pos:end="46:61">
			<throw pos:start="46:25" pos:end="46:61">throw <expr pos:start="46:31" pos:end="46:60"><operator pos:start="46:31" pos:end="46:33">new</operator> <call pos:start="46:35" pos:end="46:60"><name pos:start="46:35" pos:end="46:58">IllegalArgumentException</name><argument_list pos:start="46:59" pos:end="46:60">()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		<if_stmt pos:start="48:17" pos:end="50:17"><if pos:start="48:17" pos:end="50:17">if <condition pos:start="48:20" pos:end="48:62">(<expr pos:start="48:21" pos:end="48:61"><call pos:start="48:21" pos:end="48:44"><name pos:start="48:21" pos:end="48:36"><name pos:start="48:21" pos:end="48:27">current</name><operator pos:start="48:28" pos:end="48:28">.</operator><name pos:start="48:29" pos:end="48:36">distance</name></name><argument_list pos:start="48:37" pos:end="48:44">(<argument pos:start="48:38" pos:end="48:43"><expr pos:start="48:38" pos:end="48:43"><name pos:start="48:38" pos:end="48:43">target</name></expr></argument>)</argument_list></call> <operator pos:start="48:46" pos:end="48:46">&lt;</operator> <name pos:start="48:48" pos:end="48:61">metersToTravel</name></expr>)</condition> <block pos:start="48:64" pos:end="50:17">{<block_content pos:start="49:25" pos:end="49:38">
			<return pos:start="49:25" pos:end="49:38">return <expr pos:start="49:32" pos:end="49:37"><name pos:start="49:32" pos:end="49:37">target</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt pos:start="51:17" pos:end="51:42"><decl pos:start="51:17" pos:end="51:41"><type pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:23">NVector</name></type> <name pos:start="51:25" pos:end="51:31">lowBall</name> <init pos:start="51:33" pos:end="51:41">= <expr pos:start="51:35" pos:end="51:41"><name pos:start="51:35" pos:end="51:41">current</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="52:17" pos:end="52:42"><decl pos:start="52:17" pos:end="52:41"><type pos:start="52:17" pos:end="52:23"><name pos:start="52:17" pos:end="52:23">NVector</name></type> <name pos:start="52:25" pos:end="52:32">highBall</name> <init pos:start="52:34" pos:end="52:41">= <expr pos:start="52:36" pos:end="52:41"><name pos:start="52:36" pos:end="52:41">target</name></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="53:17" pos:end="53:59"><decl pos:start="53:17" pos:end="53:58"><type pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:23">NVector</name></type> <name pos:start="53:25" pos:end="53:33">nextGuess</name> <init pos:start="53:35" pos:end="53:58">= <expr pos:start="53:37" pos:end="53:58"><call pos:start="53:37" pos:end="53:58"><name pos:start="53:37" pos:end="53:39">mid</name><argument_list pos:start="53:40" pos:end="53:58">(<argument pos:start="53:41" pos:end="53:47"><expr pos:start="53:41" pos:end="53:47"><name pos:start="53:41" pos:end="53:47">lowBall</name></expr></argument>, <argument pos:start="53:50" pos:end="53:57"><expr pos:start="53:50" pos:end="53:57"><name pos:start="53:50" pos:end="53:57">highBall</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt pos:start="54:17" pos:end="54:67"><decl pos:start="54:17" pos:end="54:66"><type pos:start="54:17" pos:end="54:22"><name pos:start="54:17" pos:end="54:22">double</name></type> <name pos:start="54:24" pos:end="54:36">guessDistance</name> <init pos:start="54:38" pos:end="54:66">= <expr pos:start="54:40" pos:end="54:66"><call pos:start="54:40" pos:end="54:66"><name pos:start="54:40" pos:end="54:55"><name pos:start="54:40" pos:end="54:46">current</name><operator pos:start="54:47" pos:end="54:47">.</operator><name pos:start="54:48" pos:end="54:55">distance</name></name><argument_list pos:start="54:56" pos:end="54:66">(<argument pos:start="54:57" pos:end="54:65"><expr pos:start="54:57" pos:end="54:65"><name pos:start="54:57" pos:end="54:65">nextGuess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:start="55:17" pos:end="63:17">while <condition pos:start="55:23" pos:end="55:76">(<expr pos:start="55:24" pos:end="55:75"><call pos:start="55:24" pos:end="55:63"><name pos:start="55:24" pos:end="55:31"><name pos:start="55:24" pos:end="55:27">Math</name><operator pos:start="55:28" pos:end="55:28">.</operator><name pos:start="55:29" pos:end="55:31">abs</name></name><argument_list pos:start="55:32" pos:end="55:63">(<argument pos:start="55:33" pos:end="55:62"><expr pos:start="55:33" pos:end="55:62"><name pos:start="55:33" pos:end="55:45">guessDistance</name> <operator pos:start="55:47" pos:end="55:47">-</operator> <name pos:start="55:49" pos:end="55:62">metersToTravel</name></expr></argument>)</argument_list></call> <operator pos:start="55:65" pos:end="55:65">&gt;</operator> <name pos:start="55:67" pos:end="55:75">TOLERANCE</name></expr>)</condition> <block pos:start="55:78" pos:end="63:17">{<block_content pos:start="56:25" pos:end="62:68">
			<if_stmt pos:start="56:25" pos:end="60:25"><if pos:start="56:25" pos:end="58:25">if <condition pos:start="56:28" pos:end="56:59">(<expr pos:start="56:29" pos:end="56:58"><name pos:start="56:29" pos:end="56:41">guessDistance</name> <operator pos:start="56:43" pos:end="56:43">&gt;</operator> <name pos:start="56:45" pos:end="56:58">metersToTravel</name></expr>)</condition> <block pos:start="56:61" pos:end="58:25">{<block_content pos:start="57:33" pos:end="57:53">
				<expr_stmt pos:start="57:33" pos:end="57:53"><expr pos:start="57:33" pos:end="57:52"><name pos:start="57:33" pos:end="57:40">highBall</name> <operator pos:start="57:42" pos:end="57:42">=</operator> <name pos:start="57:44" pos:end="57:52">nextGuess</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else pos:start="58:27" pos:end="60:25">else <block pos:start="58:32" pos:end="60:25">{<block_content pos:start="59:33" pos:end="59:52">
				<expr_stmt pos:start="59:33" pos:end="59:52"><expr pos:start="59:33" pos:end="59:51"><name pos:start="59:33" pos:end="59:39">lowBall</name> <operator pos:start="59:41" pos:end="59:41">=</operator> <name pos:start="59:43" pos:end="59:51">nextGuess</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt pos:start="61:25" pos:end="61:59"><expr pos:start="61:25" pos:end="61:58"><name pos:start="61:25" pos:end="61:33">nextGuess</name> <operator pos:start="61:35" pos:end="61:35">=</operator> <call pos:start="61:37" pos:end="61:58"><name pos:start="61:37" pos:end="61:39">mid</name><argument_list pos:start="61:40" pos:end="61:58">(<argument pos:start="61:41" pos:end="61:47"><expr pos:start="61:41" pos:end="61:47"><name pos:start="61:41" pos:end="61:47">lowBall</name></expr></argument>, <argument pos:start="61:50" pos:end="61:57"><expr pos:start="61:50" pos:end="61:57"><name pos:start="61:50" pos:end="61:57">highBall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="62:25" pos:end="62:68"><expr pos:start="62:25" pos:end="62:67"><name pos:start="62:25" pos:end="62:37">guessDistance</name> <operator pos:start="62:39" pos:end="62:39">=</operator> <call pos:start="62:41" pos:end="62:67"><name pos:start="62:41" pos:end="62:56"><name pos:start="62:41" pos:end="62:47">current</name><operator pos:start="62:48" pos:end="62:48">.</operator><name pos:start="62:49" pos:end="62:56">distance</name></name><argument_list pos:start="62:57" pos:end="62:67">(<argument pos:start="62:58" pos:end="62:66"><expr pos:start="62:58" pos:end="62:66"><name pos:start="62:58" pos:end="62:66">nextGuess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<return pos:start="64:17" pos:end="64:33">return <expr pos:start="64:24" pos:end="64:32"><name pos:start="64:24" pos:end="64:32">nextGuess</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>
