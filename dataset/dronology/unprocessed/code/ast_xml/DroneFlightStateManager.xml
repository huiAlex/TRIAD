<Class>
    <Id>144</Id>
    <Package>edu.nd.dronology.core.vehicle</Package>
    <ClassName>DroneFlightStateManager</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DroneFlightStateManager  /** 
 * Associates a drone state object with a drone. &lt;br&gt; Normal behavior : ON_GROUND -&gt; AWAITING_TAKEOFF_CLEARANCE -&gt; TAKING_OFF -&gt; FLYING -&gt; In IN_AIR -&gt; LANDING &lt;br&gt; Unavailable transitions will result in an exception being thrown.
 * @author Jane Cleland-Huang
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOGGER</FieldName>
            <FieldType>ILogger</FieldType>
        </Field>
        <Field>
            <FieldName>uavStateMachine</FieldName>
            <FieldType>StateMachine</FieldType>
        </Field>
        <Field>
            <FieldName>uavStateMachine</FieldName>
            <FieldType>FlightMode</FieldType>
        </Field>
        <Field>
            <FieldName>uavid</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>listeners</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>listeners</FieldName>
            <FieldType>IManagedDroneStateChangeListener</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DroneFlightStateManager</MethodName>
            <MethodComment>/** 
 * Constructor States for both FlightMode and SafetyMode set to initial state
 * @param uav The UAV the state manager is assigned to.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType>ManagedDrone uav</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildStateMachine;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildStateMachine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.ON_GROUND);permit;[FlightModeTransition.PLAN_ASSIGNED, FlightMode.AWAITING_TAKEOFF_CLEARANCE]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.AWAITING_TAKEOFF_CLEARANCE);permit;[FlightModeTransition.TAKEOFF_GRANTED, FlightMode.TAKING_OFF]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.TAKING_OFF);permit;[FlightModeTransition.TARGET_ALTITUED_REACHED, FlightMode.FLYING]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.FLYING);permit;[FlightModeTransition.PLAN_COMPLETE, FlightMode.IN_AIR]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.IN_AIR);permit;[FlightModeTransition.PLAN_ASSIGNED, FlightMode.FLYING]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.IN_AIR);permit;[FlightModeTransition.LANDING_GRANTED, FlightMode.LANDING]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.LANDING);permit;[FlightModeTransition.ZERO_ALTITUED_REACHED, FlightMode.ON_GROUND]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.ON_GROUND);permit;[FlightModeTransition.MANUAL_TAKEOFER, FlightMode.USER_CONTROLLED]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.AWAITING_TAKEOFF_CLEARANCE);permit;[FlightModeTransition.MANUAL_TAKEOFER, FlightMode.USER_CONTROLLED]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.TAKING_OFF);permit;[FlightModeTransition.MANUAL_TAKEOFER, FlightMode.USER_CONTROLLED]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.FLYING);permit;[FlightModeTransition.MANUAL_TAKEOFER, FlightMode.USER_CONTROLLED]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.IN_AIR);permit;[FlightModeTransition.MANUAL_TAKEOFER, FlightMode.USER_CONTROLLED]</InnerMethodInvoke>
                <InnerMethodInvoke>uavStateMachine.configure(FlightMode.LANDING);permit;[FlightModeTransition.MANUAL_TAKEOFER, FlightMode.USER_CONTROLLED]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModeToOnGround</MethodName>
            <MethodComment>/** 
 * Set Flight Mode to OnGround
 * @throws FlightZoneException if mode change does not follow allowed state transition.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FlightMode [oldState=uavStateMachine.getState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModeToUserControlled</MethodName>
            <MethodComment>/** 
 * Set Flight Mode to UserControlled
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FlightMode [oldState=uavStateMachine.getState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModeToAwaitingTakeOffClearance</MethodName>
            <MethodComment>/** 
 * Set Flight mode to awaiting Takeoff Clearance
 * @throws FlightZoneException if mode change does not follow allowed state transition.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FlightMode [oldState=uavStateMachine.getState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModeToTakingOff</MethodName>
            <MethodComment>/** 
 * Set flight mode to Taking off
 * @throws FlightZoneException if mode change does not follow allowed state transition.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FlightMode [oldState=uavStateMachine.getState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModeToFlying</MethodName>
            <MethodComment>/** 
 * Set flight mode to Flying
 * @throws FlightZoneException if mode change does not follow allowed state transition.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FlightMode [oldState=uavStateMachine.getState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModeToLanding</MethodName>
            <MethodComment>/** 
 * Set flight mode to Landing
 * @throws FlightZoneException if mode change does not follow allowed state transition.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FlightMode [oldState=uavStateMachine.getState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOnGround</MethodName>
            <MethodComment>/** 
 * @return true if drone is currently on the ground, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAwaitingTakeoffClearance</MethodName>
            <MethodComment>/** 
 * @return true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTakingOff</MethodName>
            <MethodComment>/** 
 * @return true if drone is currently taking off, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFlying</MethodName>
            <MethodComment>/** 
 * @return true if drone is currently flying, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLanding</MethodName>
            <MethodComment>/** 
 * @return true if drone is currently landing, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStatus</MethodName>
            <MethodComment>/** 
 * @return current status
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyStateChange</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>FlightMode oldState</ParameterType>
                <ParameterType>FlightMode newState</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOGGER;info;["Drone '" + uavid + "' set to: "+ uavStateMachine.getState()]</InnerMethodInvoke>
                <InnerMethodInvoke>DronologyMonitoringManager.getInstance();publish;[MessageMarshaller.create(uavid,oldState,newState)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInAir</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModeToInAir</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FlightMode [oldState=uavStateMachine.getState()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStateChangeListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>IManagedDroneStateChangeListener listener</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listeners;add;[listener]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>