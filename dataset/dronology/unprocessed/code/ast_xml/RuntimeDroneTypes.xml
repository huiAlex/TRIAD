<Class>
    <Id>35</Id>
    <Package>edu.nd.dronology.core.fleet</Package>
    <ClassName>RuntimeDroneTypes</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RuntimeDroneTypes  /** 
 * This is a SINGLETON class. To get an instance call getInstance() Sets the runtime mode of FlightZone either as SIMULATION or PHYSICAL The mode may only be set one time during execution. Simulation uses soft drone objects. Physical uses real drones controlled using Dronekit API.
 * @author Jane Cleland-Huang 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOGGER</FieldName>
            <FieldType>ILogger</FieldType>
        </Field>
        <Field>
            <FieldName>currentMode</FieldName>
            <FieldType>Mode</FieldType>
        </Field>
        <Field>
            <FieldName>commandHandlers</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>commandHandlers</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>RuntimeDroneTypes</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RuntimeDroneTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuntimeDroneTypes</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setVirtualEnvironment</MethodName>
            <MethodComment>/** 
 * Sets flightmode to SIMULATION. Does not allow the flight mode to be reset after it is initially set.
 * @throws FlightZoneException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPhysicalEnvironment</MethodName>
            <MethodComment>/** 
 * Sets flightmode to PHYSICAL Does not allow the flight mode to be reset after it is initially set.
 * @throws FlightZoneException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FlightZoneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSimulation</MethodName>
            <MethodComment>/** 
 * @return true if in SIMULATION mode. False otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPhysical</MethodName>
            <MethodComment>/** 
 * @return true if in PHYSICAL mode. False otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <ParameterType></ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerCommandHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>IDroneCommandHandler commandHandler</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [handlerId=commandHandler.getHandlerId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOGGER;info;["Drone command handler added '" + handlerId + "' - "+ commandHandler.getClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>commandHandlers;put;[handlerId, commandHandler]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DroneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCommandHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IDroneCommandHandler</ReturnType>
            <ParameterList>
                <ParameterType>String handlerId</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DroneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unregisterCommandHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <ParameterType>String handlerId</ParameterType>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>commandHandlers;remove;[handlerId]</InnerMethodInvoke>
                <InnerMethodInvoke>LOGGER;info;["Drone command handler removed '" + handlerId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DroneException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>