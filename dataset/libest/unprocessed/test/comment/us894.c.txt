------------------------------------------------------------------   us894.c - Unit Tests for User Story 894 - Proxy cacerts     November, 2013     Copyright (c) 2013, 2016 by cisco Systems, Inc.   All rights reserved.  ------------------------------------------------------------------      Proxy mode is primarily server mode where the processing of certain    requests from clients are passed long to the upstream server using    client mode functionality.  In the case of Get CACerts, proxy mode    functions almost identically as server mode.  The CA certs response    chain is passed in and is then sent in reply to the Get CACerts    requests from downstream clients.      This test code is taken largely from US901, Server Get CACerts,    /
 #define US894_TCP_SERVER_PORT_BASIC     12894 /
 #define US894_TCP_SERVER_PORT_DIGEST    13894 /
 #define US894_TCP_SERVER_PORT_HTTP_DISABLE 14894 /
   This routine is called when CUnit initializes this test   suite.  This can be used to allocate data or open any   resources required for all the test cases.  /
   This routine is called when CUnit uninitializes this test   suite.  This can be used to deallocate data or close any   resources that were used for the test cases.  /
   HTTP Basic auth     This test case uses libcurl to test HTTP Basic   authentication is working on the EST proxy/server.   It must use a simpleenroll message since the   cacerts message does not require the client   to be authenticated.  /
   HTTP Basic Auth failure, Bad Password     This test case uses libcurl to test HTTP Basic   authentication is working on the EST proxy/server,   while using a bogus password.   It must use a simpleenroll message since the   cacerts message does not require the client   to be authenticated.  /
   HTTP Digest Auth     This test case uses libcurl to test HTTP Digest   authentication is working on the EST proxy/server.   It must use a simpleenroll message since the   cacerts message does not require the client   to be authenticated.     This test also tests the correct operation of est_proxy_set_auth()  /
   HTTP Digest Auth fail     This test case uses libcurl to test HTTP Digest   authentication is working on the EST proxy/server.   This is the negative test case for Digest auth.   It must use a simpleenroll message since the   cacerts message does not require the client   to be authenticated.  The EST proxy/server should be   running and listening to port 8087 prior to this   test being run.  /
   This test case does a simple cacerts request   and looks for the HTTP 200 response code.  /
   This test attempts to create a SSL 3.0 connection   with the EST server.  This should fail, as TLS 1.0   is not allowed.  /
   This test attempts to create a TLS 1.0 connection   with the EST server.  This should fail, as TLS 1.0   is not allowed.  /
   This test attempts to create a TLS 1.1 connection   with the EST server.  This should succeed.  /
   This test attempts to create a TLS 1.2 connection   with the EST server.  This should succeed.  /
   This test attempts to use a client certificate to   verify the TLS client authentiaiton is working.   The certificate used is signed by the explicit cert   chain. This should succeed.  /
   This test attempts to use a client certificate to   verify the TLS client authentication is working.   The certificate used is signed by the implicit cert   chain. This should succeed.  /
   This test attempts to use a revoked client certificate to   verify CRL checks are working in the TLS layer.   This should fail.  /
   This test attempts to use a self-signed client certificate to   verify cert chain will reject a cert that has not been   signed by a valid CA.  This should fail.  /
   TLS anonymous cipher suites disabled     This test case uses libcurl to test that the   EST server will not accept anonymous cipher   suites from the client.  We only test a single   cipher suite here.  This attempts to do a   simple enroll with the server.  /
   Null HTTP realm when initializing server  /
   Null Server certificate when initializing server  /
   Null Server certificate private key when initializing server  /
   Null trusted CA chain when initializing server  /
   Corrupted CA chain when initializing server  /
   This test case attempts simple cacerts request using   POST instead of GET.  It should fail.  /
   This test attempts to use a client certificate to   verify the TLS client authentiaiton is working.   The certificate used is signed by the explicit cert   chain. Valid HTTP authentication credentials are   also provided.  This should succeed.  /
   This test attempts to use a client certificate to   verify the TLS client authentiaiton is working.   The certificate used is signed by the explicit cert   chain. Invalid HTTP authentication credentials are   also provided.  This should fail with a 401 response.  /
   This test attempts to enroll without using a certificate   to identity the client, while using a good user ID/pwd.   However, the EST server is setup to only perform   certificate authentication (HTTP auth disabled).   This should fail with a 401 response.  /
   Test the parameters of est_proxy_set_server()  /
   Test the parameters of est_proxy_set_auth_mode()  /
   Test the optional setting of the CA Certs response chain in est_proxy_init()   test passthrough (cache disabled) mode of the CA Certs response chain.  /
   Test the passing of bad userid/password values to est_proxy_init to make sure   they're error checked.  /
 The main() function for setting up and running the tests.   Returns a CUE_SUCCESS on successful running, another   CUnit error code on failure.  /
       First we start an EST server acting as the CA      /
       Next we start an EST proxy acting as an RA.      /
       Start an instance of the EST server with       automatic enrollment enabled.      /
       Since we passed in a valid userID/password,       we expect the server to respond with 200      /
       Since we passed in an invalid userID/password,       we expect the server to respond with 400      /
       Since we passed in a valid userID/password,       we expect the server to respond with success      /
       Since we passed in an invalid userID/password,       we expect the server to respond with a 400      /
       we expect the server to respond with a 200      /
       Now that the SSL context is ready, open a socket       with the server and bind that socket to the context.      /
       Create an SSL session context      /
       Now that we have everything ready, let's initiate the TLS       handshake.      /
       Cleanup all the data      /
       Since we passed in a valid userID/password,       we expect the server to respond with 200      /
       Since we passed in a valid userID/password,       we expect the server to respond with 200      /
       Since the client cert has been revoked the TLS handshake       will fail.  The EST server should return a 401 response.      /
       Since the client cert is not signed by either the local CA       or external CA, the TLS handshake will fail.       We will not receive an HTTP status message       from the server.      /
       TLS handshake should have failed, curl should return 0      /
       Read in the CA certificates      /
       Read the server cert      /
       Read the server key      /
       Attempt to init EST server using NULL realm      /
       Read in the CA certificates      /
       Read the server key      /
       Attempt to init EST proxy using NULL server key      /
       Read in the CA certificates      /
       Read the server cert      /
       Attempt to init EST proxy using NULL private key      /
       Read the server cert      /
       Read the server key      /
       Attempt to init EST proxy using NULL local CA chain      /
       Read the server cert      /
       Read the server key      /
       Attempt to init EST proxy a corrupted CA chain      /
       we expect the server to respond with a 400      /
       Since we passed in a valid userID/password,       we expect the server to respond with 200      /
       Since we passed in an invalid userID/password,       we expect the server to respond with 401      /
       Since we passed in an invalid userID/password,       we expect the server to respond with 401      /
       Read in the CA certificates      /
       Read the server cert      /
       Read the server key      /
       init EST in proxy mode      /
       Read in the CA certificates      /
       Read the server cert      /
       Read the server key      /
       init EST in proxy mode      /
       restart the proxy without passing the ca certs response change parameter       param 5      /
       we expect the server to respond with a 200      /
       restart the proxy and include the CA Cert response chain      /
       Read in the CA certificates      /
       Read the server cert      /
       Read the server key      /
       Attempt to init EST proxy using NULL userid      /
 add a suite to the registry /
 add the tests to the suite /
 NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() /
