us2174.c
generate_private_key
auth_credentials_token_cb
auth_credentials_basic_cb
client_manual_cert_verify
us2174_simple_enroll
us2174_simple_reenroll
us2174_clean
us2174_start_server
us2174_stop_server
us2174_init_suite
us2174_destroy_suite
us2174_test2
us2174_test3
us2174_test4
us2174_test5
us2174_add_suite
BN_set_word
RSA_generate_key_ex
EVP_PKEY_new
RSA_free
BN_free
CU_ASSERT
CU_ASSERT
BIO_new_fp
printf
printf
X509_print_fp
X509_signature_print
BIO_free
est_client_init
CU_ASSERT
est_client_set_auth_cred_cb
CU_ASSERT
est_client_set_server
generate_private_key
CU_ASSERT
est_client_enroll
CU_ASSERT
EVP_PKEY_free
est_destroy
STACK_OF
est_client_init
CU_ASSERT
est_client_set_auth_cred_cb
CU_ASSERT
est_client_set_server
generate_private_key
CU_ASSERT
est_client_enroll
CU_ASSERT
est_destroy
est_client_init
CU_ASSERT
st_enable_http_token_auth
est_client_set_auth_cred_cb
CU_ASSERT
est_client_set_server
BIO_new
BIO_new_mem_buf
BIO_push
d2i_PKCS7_bio
CU_ASSERT
BIO_free_all
OBJ_obj2nid
CU_ASSERT
sk_X509_value
CU_ASSERT
est_client_reenroll
CU_ASSERT
EVP_PKEY_free
est_destroy
st_start
SLEEP
st_proxy_start_token
SLEEP
st_stop
st_proxy_stop
SLEEP
est_init_logger
read_binary_file
us2174_clean
us2174_start_server
us2174_stop_server
free
st_enable_http_token_auth
st_set_token
st_proxy_enable_http_token_auth
st_proxy_set_srv_valid_token
st_proxy_set_clnt_token_cred
us2174_simple_enroll
CU_ASSERT
st_enable_http_basic_auth
st_proxy_enable_http_token_auth
st_proxy_set_srv_valid_token
st_proxy_set_clnt_token_cred
us2174_simple_enroll
CU_ASSERT
st_enable_http_token_auth
st_set_token
st_proxy_enable_http_basic_auth
st_proxy_set_clnt_token_cred
us2174_simple_enroll
CU_ASSERT
st_enable_http_token_auth
st_set_token
st_proxy_enable_http_token_auth
st_proxy_set_srv_valid_token
st_proxy_set_clnt_token_cred
us2174_simple_reenroll
CU_ASSERT
CU_add_suite
auth_credentials
auth_credentials
cur_cert
openssl_cert_error
cn
server
expected_enroll_rv
callback
cn
server
expected_enroll_rv
callback
manual_enroll
nid
EST_HTTP_AUTH_HDR
EST_HTTP_AUTH_HDR
X509
int
char
char
EST_ERROR
auth_credentials_cb
char
char
EST_ERROR
auth_credentials_cb
int
int
US2174_RETRY_INTERVAL
US2174_TCP_SERVER_PORT
US2174_TCP_PROXY_PORT
US2174_SERVER_CERT
US2174_SERVER_KEY
US2174_PROXY_CERT
US2174_PROXY_KEY
US2174_CACERT
US2174_CACERTS
US2174_TRUSTED_CERTS
US2174_EXPLICIT_CERT
US2174_EXPLICIT_KEY
US2174_SERVER_CERT
US2174_SERVER_KEY
US2174_PROXY_CERT
US2174_PROXY_KEY
US2174_CACERT
US2174_CACERTS
US2174_TRUSTED_CERTS
US2174_EXPLICIT_CERT
US2174_EXPLICIT_KEY
US2174_SERVER_IP
US2174_TCP_PORT
US2174_PKCS10_RSA2048
US2174_PKCS10_DSA1024
US2174_PKCS10_ECDSA256
US2174_PKCS10_CORRUPT
US2174_PKCS10_STALE_POP
US2174_ENROLL_URL_BA
US2174_PKCS10_CT
US2174_UIDPWD_GOOD
GOOD_TOKEN
DIFFERENT_TOKEN
NULL_TOKEN
LONG_TOKEN
------------------------------------------------------------------   us2174.c - Unit Tests for User Story 2174 - Proxy simple enroll     August, 2013     Copyright (c) 2013, 2016 by cisco Systems, Inc.   All rights reserved.  ------------------------------------------------------------------  /
 #define US2174_PROXY_CERT "CA/estCA/private/estservercertandkey.pem"   /
 #define US2174_PROXY_KEY "CA/estCA/private/estservercertandkey.pem" /
 #define US2174_PROXY_CERT "CA/estCA/private/estservercertandkey.pem"   /
 #define US2174_PROXY_KEY "CA/estCA/private/estservercertandkey.pem" /
   The following CSR was generated using the following openssl command and then   using cat on the rsa.req file:     openssl req -newkey rsa:2048 -keyout rsakey.pem -keyform PEM -out rsa.req -outform PEM  /
   The following CSR was generated using the following openssl command and then   using cat on the ec.req file:     openssl req -newkey ec:256parms -keyout eckey.pem -keyform PEM -out ec.req -outform PEM  /
   The following CSR was generated using the following openssl command and then   using cat on the dsa.req file:     openssl req -newkey dsa:dsaparms -keyout dsakey.pem -keyform PEM -out dsa.req -outform PEM  /
   The following is a valid CSR that already contains a PoP   challengePassword.  This was collected using estserver with   the dumpbin() function.  This CSR should never work since   the PoP value in it will be stale.  /
   auth_credentials_token_cb() is the application layer callback function that will   return a token based authentication credential when called.  It's registered   with the EST Client using the est_client_set_auth_cred_cb().   The test function is required to set some global values in order to make this   callback operate the way that the test case wants.   - auth_cred_force_error = tell this function to force a response code error   - test_token = pointer to a hard coded string that is the token string to return     This callback must provide the token credentials in a heap based buffer, and   ownership of that buffer is implicitly transferred to the ET client library upon   return.  /
   auth_credentials_basic_cb() is the same as the token based one above, but   instead returns the basic credentials of userid and password  /
   auth_credentials_digest_cb() is the same as the basic based one above, but   instead verfies that the auth_mode passed is digest  /
       report that the callback has been called.      /
       See if the test is requesting to force an error response code from the       callback      /
   Callback function passed to est_client_init()  /
   us2174_simple_enroll() is used by test cases to perform a simple enroll.  /
   This routine is called when CUnit initializes this test   suite.  This can be used to allocate data or open any   resources required for all the test cases.  /
   This routine is called when CUnit uninitializes this test   suite.  This can be used to deallocate data or close any   resources that were used for the test cases.  /
   Simple enroll -   proxy - BASIC   server - BASIC     Make sure token auth mode did not break anything.    /
       Since we passed in a valid userID/password,       we expect the server to respond with 200      /
   Simple enroll -   proxy - TOKEN   server - TOKEN    /
   Simple enroll -   proxy - TOKEN   server - BASIC  /
   Simple enroll -   proxy - BASIC   server - TOKEN  /
   Simple RE-enroll -   proxy - TOKEN   server - TOKEN    /
 The main() function for setting up and running the tests.   Returns a CUE_SUCCESS on successful running, another   CUnit error code on failure.  /
       create an RSA keypair and assign them to a PKEY and return it.      /
       report that the callback has been called.      /
       See if the test is requesting to force an error response code from the       callback      /
       report that the callback has been called.      /
       See if the test is requesting to force an error response code from the       callback      /
       Print out the specifics of this cert      /
       Next call prints out the signature which can be used as the fingerprint       This fingerprint can be checked against the anticipated value to determine       whether or not the server's cert should be approved.      /
       Create a client context      /
       Set the EST server address/port      /
       generate a private key      /
       Use the simplified API to enroll a CSR      /
       Cleanup      /
       Create a client context      /
       Set the EST server address/port      /
       generate a private key      /
       Use the simplified API to enroll a CSR      /
       Retrieve the cert that was given to us by the EST server      /
       Create a client context      /
       Now that we have the cert, switch the server over to token mode      /
       Set the EST server address/port      /
       And attempt a reenroll while in token mode             Convert the cert to an X509.  Be warned this is       pure hackery.       PDB: This conversion code comes from other test cases.      /
 our new cert should be the one and only       cert in the pkcs7 blob.  We shouldn't have to       iterate through the full list to find it. /
       PDB NOTE: At the moment, this is expected to fail since       the server does not yet understand requests with token authentication.       Once 1884 is complete, the below ASSERT will begin to fail and will need       to be changed to a passing response.      /
       Cleanup      /
       First we start an EST server acting as the CA      /
       Next we start an EST proxy acting as an RA with the server side       operating in token auth mode.      /
       Read in the CA certificates      /
       Start an instance of the EST server with       automatic enrollment enabled.      /
       set server to do token auth challenges       tell the server which tokens to accept      /
       set the proxy to do token auth challenges and       tell it what tokens to accept.      /
       tell the client side of proxy which token credential to       use      /
       Set up the EST Client and have it perform a simple enroll.             Enroll should succeed.      /
       callback should have been called      /
       set server to do BASIC auth challenges      /
       set the proxy to do token auth challenges and       tell it what tokens to accept.      /
       tell the client side of proxy which token credential to       use      /
       Set up the EST Client and have it perform a simple enroll.             Enroll should succeed.      /
       callback should have been called      /
       set server to do token auth challenges       tell the server which tokens to accept      /
       set the proxy to do BASIC auth challenges and       tell it what tokens to accept.      /
     st_proxy_set_srv_valid_token(GOOD_TOKEN); /
       tell the client side of proxy which token credential to       use      /
       Set up the EST Client and have it perform a simple enroll.             Enroll should succeed.      /
       callback should have been called      /
       set server to do token auth challenges       tell the server which tokens to accept      /
       set the proxy to do token auth challenges and       tell it what tokens to accept.      /
       tell the client side of proxy which token credential to       use      /
       Set up the EST Client and have it perform a simple RE-enroll.             RE-enroll should succeed.      /
       callback should have been called      /
 add a suite to the registry /
 add the tests to the suite /
 (NULL == CU_add_test(pSuite, "Proxy Enroll basic sanity test", us2174_test1)) || /
           If the test_token is set to anything, then we need to allocate           space from the heap and copy in the value.          /
           If we made it this far, token_ptr is pointing to a string           containing the token to be returned. Assign it and return success          /
 use strlen() so that the string can be as large              as needed to test the EST client /
