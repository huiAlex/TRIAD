<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us894.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="19:3">/*------------------------------------------------------------------
 * us894.c - Unit Tests for User Story 894 - Proxy cacerts
 *
 * November, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 *
 *  Proxy mode is primarily server mode where the processing of certain
 *  requests from clients are passed long to the upstream server using
 *  client mode functionality.  In the case of Get CACerts, proxy mode
 *  functions almost identically as server mode.  The CA certs response
 *  chain is passed in and is then sent in reply to the Get CACerts
 *  requests from downstream clients.
 *
 *  This test code is taken largely from US901, Server Get CACerts,
 *
 */</comment>
<cpp:include pos:start="20:1" pos:end="20:18">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="21:1" pos:end="21:13">#<cpp:directive pos:start="21:2" pos:end="21:7">ifndef</cpp:directive> <name pos:start="21:9" pos:end="21:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="22:1" pos:end="22:19">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="24:1" pos:end="24:16">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="25:1" pos:end="25:22">#<cpp:directive pos:start="25:2" pos:end="25:8">include</cpp:directive> <cpp:file pos:start="25:10" pos:end="25:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="26:1" pos:end="26:23">#<cpp:directive pos:start="26:2" pos:end="26:8">include</cpp:directive> <cpp:file pos:start="26:10" pos:end="26:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="27:1" pos:end="27:23">#<cpp:directive pos:start="27:2" pos:end="27:8">include</cpp:directive> <cpp:file pos:start="27:10" pos:end="27:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="28:1" pos:end="28:24">#<cpp:directive pos:start="28:2" pos:end="28:8">include</cpp:directive> <cpp:file pos:start="28:10" pos:end="28:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="29:1" pos:end="29:22">#<cpp:directive pos:start="29:2" pos:end="29:8">include</cpp:directive> <cpp:file pos:start="29:10" pos:end="29:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="30:1" pos:end="30:21">#<cpp:directive pos:start="30:2" pos:end="30:8">include</cpp:directive> <cpp:file pos:start="30:10" pos:end="30:21">"st_proxy.h"</cpp:file></cpp:include>

<cpp:ifdef pos:start="32:1" pos:end="32:17">#<cpp:directive pos:start="32:2" pos:end="32:6">ifdef</cpp:directive> <name pos:start="32:8" pos:end="32:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="33:1" pos:end="33:24">#<cpp:directive pos:start="33:2" pos:end="33:8">include</cpp:directive> <cpp:file pos:start="33:10" pos:end="33:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="34:1" pos:end="34:28">#<cpp:directive pos:start="34:2" pos:end="34:8">include</cpp:directive> <cpp:file pos:start="34:10" pos:end="34:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="37:1" pos:end="37:926">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24">US894_PKCS10_REQ</name></cpp:macro>    <cpp:value pos:start="37:29" pos:end="37:926">"MIIChjCCAW4CAQAwQTElMCMGA1UEAxMccmVxIGJ5IGNsaWVudCBpbiBkZW1vIHN0\nZXAgMjEYMBYGA1UEBRMPUElEOldpZGdldCBTTjoyMIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEA/6JUWpXXDwCkvWPDWO0yANDQzFMxroLEIh6/vdNwfRSG\neNGC0efcL5L4NxHZOmO14yqMEMGpCyHz7Ob3hhNPu0K81gMUzRqzwmmJHXwRqobA\ni59OQEkHaPhI1T4RkVnSYZLOowSqonMZjWbT0iqZDY/RD8l3GjH3gEIBMQFv62NT\n1CSu9dfHEg76+DnJAhdddUDJDXO3AWI5s7zsLlzBoPlgd4oK5K1wqEE2pqhnZxei\nc94WFqXQ1kyrW0POVlQ+32moWTQTFA7SQE2uEF+GBXsRPaEO+FLQjE8JHOewLf/T\nqX0ngywnvxKRpKguSBic31WVkswPs8E34pjjZAvdxQIDAQABoAAwDQYJKoZIhvcN\nAQEFBQADggEBAAZXVoorRxAvQPiMNDpRZHhiD5O2Yd7APBBznVgRll1HML5dpgnu\nXY7ZCYwQtxwNGYVtKJaZCiW7dWrZhvnF5ua3wUr9R2ZNoLwVR0Z9Y5wwn1cJrdSG\ncUuBN/0XBGI6g6fQlDDImQoPSF8gygcTCCHba7Uv0i8oiCiwf5UF+F3NYBoBL/PP\nlO2zBEYNQ65+W3YgfUyYP0Cr0NyXgkz3Qh2Xa2eRFeW56oejmcEaMjq6yx7WAC2X\nk3w1G6Le1UInzuenMScNgnt8FaI43eAILMdLQ/Ekxc30fjxA12RDh/YzDYiExFv0\ndPd4o5uPKt4jRitvGiAPm/OCdXiYAwqiu2w=\n"</cpp:value></cpp:define>
<cpp:define pos:start="38:1" pos:end="38:62">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:23"><name pos:start="38:9" pos:end="38:23">US894_PKCS10_CT</name></cpp:macro>     <cpp:value pos:start="38:29" pos:end="38:62">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 
<cpp:define pos:start="39:1" pos:end="39:44">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:25">US894_UIDPWD_GOOD</name></cpp:macro>   <cpp:value pos:start="39:29" pos:end="39:44">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:43">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:24"><name pos:start="40:9" pos:end="40:24">US894_UIDPWD_BAD</name></cpp:macro>    <cpp:value pos:start="40:29" pos:end="40:43">"estuser:bogus"</cpp:value></cpp:define>
<cpp:ifndef pos:start="41:1" pos:end="41:13">#<cpp:directive pos:start="41:2" pos:end="41:7">ifndef</cpp:directive> <name pos:start="41:9" pos:end="41:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="42:1" pos:end="42:49">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:21"><name pos:start="42:9" pos:end="42:21">US894_CACERTS</name></cpp:macro>       <cpp:value pos:start="42:29" pos:end="42:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:49">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:26">US894_TRUSTED_CERT</name></cpp:macro>  <cpp:value pos:start="43:29" pos:end="43:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:65">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:34"><name pos:start="44:9" pos:end="44:34">US894_TRUSTED_CERT_AND_CRL</name></cpp:macro> <cpp:value pos:start="44:36" pos:end="44:65">"US894/trustedcertsandcrl.crt"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:53">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:27">US894_EXPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="45:29" pos:end="45:53">"US894/explicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="46:1" pos:end="46:51">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:26"><name pos:start="46:9" pos:end="46:26">US894_EXPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="46:28" pos:end="46:51">"US894/explicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:53">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:27">US894_IMPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="47:29" pos:end="47:53">"US894/implicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="48:1" pos:end="48:51">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:26">US894_IMPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="48:28" pos:end="48:51">"US894/implicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:51">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:26">US894_REVOKED_CERT</name></cpp:macro> <cpp:value pos:start="49:28" pos:end="49:51">"US894/revoked-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="50:1" pos:end="50:49">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:25"><name pos:start="50:9" pos:end="50:25">US894_REVOKED_KEY</name></cpp:macro> <cpp:value pos:start="50:27" pos:end="50:49">"US894/revoked-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:55">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:27">US894_SELFSIGN_CERT</name></cpp:macro> <cpp:value pos:start="51:29" pos:end="51:55">"US894/selfsigned-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="52:1" pos:end="52:53">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:26"><name pos:start="52:9" pos:end="52:26">US894_SELFSIGN_KEY</name></cpp:macro> <cpp:value pos:start="52:28" pos:end="52:53">"US894/selfsigned-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="53:1" pos:end="53:42">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:20">US894_CACERT</name></cpp:macro> <cpp:value pos:start="53:22" pos:end="53:42">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:43">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:21"><name pos:start="54:9" pos:end="54:21">US894_EXTCERT</name></cpp:macro> <cpp:value pos:start="54:23" pos:end="54:43">"CA/extCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:68">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:25">US894_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="55:27" pos:end="55:68">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:67">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:24"><name pos:start="56:9" pos:end="56:24">US894_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="56:26" pos:end="56:67">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:67">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:24">US894_PROXY_CERT</name></cpp:macro> <cpp:value pos:start="57:26" pos:end="57:67">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>  <comment type="line" pos:start="57:70" pos:end="57:108">// change these other to dedicated ones</comment>
<cpp:define pos:start="58:1" pos:end="58:66">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:23"><name pos:start="58:9" pos:end="58:23">US894_PROXY_KEY</name></cpp:macro> <cpp:value pos:start="58:25" pos:end="58:66">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<decl_stmt pos:start="59:1" pos:end="59:60"><decl pos:start="59:1" pos:end="59:59"><type pos:start="59:1" pos:end="59:11"><specifier pos:start="59:1" pos:end="59:6">static</specifier> <name pos:start="59:8" pos:end="59:11">char</name></type> <name pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:25">test5_outfile</name><index pos:start="59:26" pos:end="59:39">[<expr pos:start="59:27" pos:end="59:38"><name pos:start="59:27" pos:end="59:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="59:41" pos:end="59:59">= <expr pos:start="59:43" pos:end="59:59"><literal type="string" pos:start="59:43" pos:end="59:59">"US894/test5.crt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="60:1" pos:end="60:62"><decl pos:start="60:1" pos:end="60:61"><type pos:start="60:1" pos:end="60:11"><specifier pos:start="60:1" pos:end="60:6">static</specifier> <name pos:start="60:8" pos:end="60:11">char</name></type> <name pos:start="60:13" pos:end="60:40"><name pos:start="60:13" pos:end="60:26">test26_outfile</name><index pos:start="60:27" pos:end="60:40">[<expr pos:start="60:28" pos:end="60:39"><name pos:start="60:28" pos:end="60:39">FILENAME_MAX</name></expr>]</index></name> <init pos:start="60:42" pos:end="60:61">= <expr pos:start="60:44" pos:end="60:61"><literal type="string" pos:start="60:44" pos:end="60:61">"US894/test26.crt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="61:1" pos:end="80:0"><decl pos:start="61:1" pos:end="61:61"><type pos:start="61:1" pos:end="61:11"><specifier pos:start="61:1" pos:end="61:6">static</specifier> <name pos:start="61:8" pos:end="61:11">char</name></type> <name pos:start="61:13" pos:end="61:40"><name pos:start="61:13" pos:end="61:26">test27_outfile</name><index pos:start="61:27" pos:end="61:40">[<expr pos:start="61:28" pos:end="61:39"><name pos:start="61:28" pos:end="61:39">FILENAME_MAX</name></expr>]</index></name> <init pos:start="61:42" pos:end="61:61">= <expr pos:start="61:44" pos:end="61:61"><literal type="string" pos:start="61:44" pos:end="61:61">"US894/test27.crt"</literal></expr></init></decl>;</decl_stmt>
<cpp:else pos:start="62:1" pos:end="62:5">#<cpp:directive pos:start="62:2" pos:end="62:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="63:1" pos:end="63:51">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:21">US894_CACERTS</name></cpp:macro>       <cpp:value pos:start="63:29" pos:end="63:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="64:1" pos:end="64:49">#<cpp:directive pos:start="64:2" pos:end="64:7">define</cpp:directive> <cpp:macro pos:start="64:9" pos:end="64:26"><name pos:start="64:9" pos:end="64:26">US894_TRUSTED_CERT</name></cpp:macro> <cpp:value pos:start="64:28" pos:end="64:49">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="65:1" pos:end="65:67">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:34">US894_TRUSTED_CERT_AND_CRL</name></cpp:macro>  <cpp:value pos:start="65:37" pos:end="65:67">"US894\\trustedcertsandcrl.crt"</cpp:value></cpp:define>
<cpp:define pos:start="66:1" pos:end="66:54">#<cpp:directive pos:start="66:2" pos:end="66:7">define</cpp:directive> <cpp:macro pos:start="66:9" pos:end="66:27"><name pos:start="66:9" pos:end="66:27">US894_EXPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="66:29" pos:end="66:54">"US894\\explicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="67:1" pos:end="67:52">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:26">US894_EXPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="67:28" pos:end="67:52">"US894\\explicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="68:1" pos:end="68:54">#<cpp:directive pos:start="68:2" pos:end="68:7">define</cpp:directive> <cpp:macro pos:start="68:9" pos:end="68:27"><name pos:start="68:9" pos:end="68:27">US894_IMPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="68:29" pos:end="68:54">"US894\\implicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="69:1" pos:end="69:52">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:26">US894_IMPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="69:28" pos:end="69:52">"US894\\implicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="70:1" pos:end="70:52">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:26"><name pos:start="70:9" pos:end="70:26">US894_REVOKED_CERT</name></cpp:macro> <cpp:value pos:start="70:28" pos:end="70:52">"US894\\revoked-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="71:1" pos:end="71:50">#<cpp:directive pos:start="71:2" pos:end="71:7">define</cpp:directive> <cpp:macro pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:25">US894_REVOKED_KEY</name></cpp:macro> <cpp:value pos:start="71:27" pos:end="71:50">"US894\\revoked-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="72:1" pos:end="72:56">#<cpp:directive pos:start="72:2" pos:end="72:7">define</cpp:directive> <cpp:macro pos:start="72:9" pos:end="72:27"><name pos:start="72:9" pos:end="72:27">US894_SELFSIGN_CERT</name></cpp:macro> <cpp:value pos:start="72:29" pos:end="72:56">"US894\\selfsigned-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="73:1" pos:end="73:54">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:26">US894_SELFSIGN_KEY</name></cpp:macro> <cpp:value pos:start="73:28" pos:end="73:54">"US894\\selfsigned-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="74:1" pos:end="74:44">#<cpp:directive pos:start="74:2" pos:end="74:7">define</cpp:directive> <cpp:macro pos:start="74:9" pos:end="74:20"><name pos:start="74:9" pos:end="74:20">US894_CACERT</name></cpp:macro> <cpp:value pos:start="74:22" pos:end="74:44">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="75:1" pos:end="75:45">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:21">US894_EXTCERT</name></cpp:macro> <cpp:value pos:start="75:23" pos:end="75:45">"CA\\extCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="76:1" pos:end="76:71">#<cpp:directive pos:start="76:2" pos:end="76:7">define</cpp:directive> <cpp:macro pos:start="76:9" pos:end="76:25"><name pos:start="76:9" pos:end="76:25">US894_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="76:27" pos:end="76:71">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="77:1" pos:end="77:70">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:24">US894_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="77:26" pos:end="77:70">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="78:1" pos:end="78:70">#<cpp:directive pos:start="78:2" pos:end="78:7">define</cpp:directive> <cpp:macro pos:start="78:9" pos:end="78:24"><name pos:start="78:9" pos:end="78:24">US894_PROXY_CERT</name></cpp:macro> <cpp:value pos:start="78:26" pos:end="78:70">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>  <comment type="line" pos:start="78:73" pos:end="78:111">// change these other to dedicated ones</comment>
<cpp:define pos:start="79:1" pos:end="79:69">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:23">US894_PROXY_KEY</name></cpp:macro> <cpp:value pos:start="79:25" pos:end="79:69">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>

<decl_stmt pos:start="81:1" pos:end="81:61"><decl pos:start="81:1" pos:end="81:60"><type pos:start="81:1" pos:end="81:11"><specifier pos:start="81:1" pos:end="81:6">static</specifier> <name pos:start="81:8" pos:end="81:11">char</name></type> <name pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:25">test5_outfile</name><index pos:start="81:26" pos:end="81:39">[<expr pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="81:41" pos:end="81:60">= <expr pos:start="81:43" pos:end="81:60"><literal type="string" pos:start="81:43" pos:end="81:60">"US894\\test5.crt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="82:1" pos:end="82:63"><decl pos:start="82:1" pos:end="82:62"><type pos:start="82:1" pos:end="82:11"><specifier pos:start="82:1" pos:end="82:6">static</specifier> <name pos:start="82:8" pos:end="82:11">char</name></type> <name pos:start="82:13" pos:end="82:40"><name pos:start="82:13" pos:end="82:26">test26_outfile</name><index pos:start="82:27" pos:end="82:40">[<expr pos:start="82:28" pos:end="82:39"><name pos:start="82:28" pos:end="82:39">FILENAME_MAX</name></expr>]</index></name> <init pos:start="82:42" pos:end="82:62">= <expr pos:start="82:44" pos:end="82:62"><literal type="string" pos:start="82:44" pos:end="82:62">"US894\\test26.crt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="83:1" pos:end="93:0"><decl pos:start="83:1" pos:end="83:62"><type pos:start="83:1" pos:end="83:11"><specifier pos:start="83:1" pos:end="83:6">static</specifier> <name pos:start="83:8" pos:end="83:11">char</name></type> <name pos:start="83:13" pos:end="83:40"><name pos:start="83:13" pos:end="83:26">test27_outfile</name><index pos:start="83:27" pos:end="83:40">[<expr pos:start="83:28" pos:end="83:39"><name pos:start="83:28" pos:end="83:39">FILENAME_MAX</name></expr>]</index></name> <init pos:start="83:42" pos:end="83:62">= <expr pos:start="83:44" pos:end="83:62"><literal type="string" pos:start="83:44" pos:end="83:62">"US894\\test27.crt"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif pos:start="84:1" pos:end="84:6">#<cpp:directive pos:start="84:2" pos:end="84:6">endif</cpp:directive></cpp:endif>

<comment type="block" pos:start="86:1" pos:end="86:51">/* #define US894_TCP_SERVER_PORT_BASIC     12894 */</comment>
<cpp:define pos:start="87:1" pos:end="87:79">#<cpp:directive pos:start="87:2" pos:end="87:7">define</cpp:directive> <cpp:macro pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:24">US894_ENROLL_URL</name></cpp:macro> <cpp:value pos:start="87:26" pos:end="87:79">"https://127.0.0.1:16894/.well-known/est/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="88:1" pos:end="88:74">#<cpp:directive pos:start="88:2" pos:end="88:7">define</cpp:directive> <cpp:macro pos:start="88:9" pos:end="88:24"><name pos:start="88:9" pos:end="88:24">US894_CACERT_URL</name></cpp:macro> <cpp:value pos:start="88:26" pos:end="88:74">"https://127.0.0.1:16894/.well-known/est/cacerts"</cpp:value></cpp:define>
<comment type="block" pos:start="89:1" pos:end="89:51">/* #define US894_TCP_SERVER_PORT_DIGEST    13894 */</comment>
<comment type="block" pos:start="90:1" pos:end="90:54">/* #define US894_TCP_SERVER_PORT_HTTP_DISABLE 14894 */</comment>
<cpp:define pos:start="91:1" pos:end="91:41">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:29"><name pos:start="91:9" pos:end="91:29">US894_TCP_SERVER_PORT</name></cpp:macro>       <cpp:value pos:start="91:37" pos:end="91:41">15894</cpp:value></cpp:define>
<cpp:define pos:start="92:1" pos:end="92:41">#<cpp:directive pos:start="92:2" pos:end="92:7">define</cpp:directive> <cpp:macro pos:start="92:9" pos:end="92:28"><name pos:start="92:9" pos:end="92:28">US894_TCP_PROXY_PORT</name></cpp:macro>        <cpp:value pos:start="92:37" pos:end="92:41">16894</cpp:value></cpp:define>

<function pos:start="94:1" pos:end="112:1"><type pos:start="94:1" pos:end="94:11"><specifier pos:start="94:1" pos:end="94:6">static</specifier> <name pos:start="94:8" pos:end="94:11">void</name></type> <name pos:start="94:13" pos:end="94:23">us894_clean</name> <parameter_list pos:start="94:25" pos:end="94:30">(<parameter pos:start="94:26" pos:end="94:29"><decl pos:start="94:26" pos:end="94:29"><type pos:start="94:26" pos:end="94:29"><name pos:start="94:26" pos:end="94:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="95:1" pos:end="112:1">{<block_content pos:start="96:5" pos:end="112:0">
    <decl_stmt pos:start="96:5" pos:end="98:0"><decl pos:start="96:5" pos:end="96:17"><type pos:start="96:5" pos:end="96:8"><name pos:start="96:5" pos:end="96:8">char</name></type> <name pos:start="96:10" pos:end="96:17"><name pos:start="96:10" pos:end="96:12">cmd</name><index pos:start="96:13" pos:end="96:17">[<expr pos:start="96:14" pos:end="96:16"><literal type="number" pos:start="96:14" pos:end="96:16">200</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifndef pos:start="97:1" pos:end="97:13">#<cpp:directive pos:start="97:2" pos:end="97:7">ifndef</cpp:directive> <name pos:start="97:9" pos:end="97:13">WIN32</name></cpp:ifndef>
    <expr_stmt pos:start="98:5" pos:end="98:41"><expr pos:start="98:5" pos:end="98:40"><call pos:start="98:5" pos:end="98:40"><name pos:start="98:5" pos:end="98:11">sprintf</name><argument_list pos:start="98:12" pos:end="98:40">(<argument pos:start="98:13" pos:end="98:15"><expr pos:start="98:13" pos:end="98:15"><name pos:start="98:13" pos:end="98:15">cmd</name></expr></argument>, <argument pos:start="98:18" pos:end="98:24"><expr pos:start="98:18" pos:end="98:24"><literal type="string" pos:start="98:18" pos:end="98:24">"rm %s"</literal></expr></argument>, <argument pos:start="98:27" pos:end="98:39"><expr pos:start="98:27" pos:end="98:39"><name pos:start="98:27" pos:end="98:39">test5_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="99:5" pos:end="99:16"><expr pos:start="99:5" pos:end="99:15"><call pos:start="99:5" pos:end="99:15"><name pos:start="99:5" pos:end="99:10">system</name><argument_list pos:start="99:11" pos:end="99:15">(<argument pos:start="99:12" pos:end="99:14"><expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:42"><expr pos:start="100:5" pos:end="100:41"><call pos:start="100:5" pos:end="100:41"><name pos:start="100:5" pos:end="100:11">sprintf</name><argument_list pos:start="100:12" pos:end="100:41">(<argument pos:start="100:13" pos:end="100:15"><expr pos:start="100:13" pos:end="100:15"><name pos:start="100:13" pos:end="100:15">cmd</name></expr></argument>, <argument pos:start="100:18" pos:end="100:24"><expr pos:start="100:18" pos:end="100:24"><literal type="string" pos:start="100:18" pos:end="100:24">"rm %s"</literal></expr></argument>, <argument pos:start="100:27" pos:end="100:40"><expr pos:start="100:27" pos:end="100:40"><name pos:start="100:27" pos:end="100:40">test26_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="101:5" pos:end="101:16"><expr pos:start="101:5" pos:end="101:15"><call pos:start="101:5" pos:end="101:15"><name pos:start="101:5" pos:end="101:10">system</name><argument_list pos:start="101:11" pos:end="101:15">(<argument pos:start="101:12" pos:end="101:14"><expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="102:5" pos:end="102:42"><expr pos:start="102:5" pos:end="102:41"><call pos:start="102:5" pos:end="102:41"><name pos:start="102:5" pos:end="102:11">sprintf</name><argument_list pos:start="102:12" pos:end="102:41">(<argument pos:start="102:13" pos:end="102:15"><expr pos:start="102:13" pos:end="102:15"><name pos:start="102:13" pos:end="102:15">cmd</name></expr></argument>, <argument pos:start="102:18" pos:end="102:24"><expr pos:start="102:18" pos:end="102:24"><literal type="string" pos:start="102:18" pos:end="102:24">"rm %s"</literal></expr></argument>, <argument pos:start="102:27" pos:end="102:40"><expr pos:start="102:27" pos:end="102:40"><name pos:start="102:27" pos:end="102:40">test27_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="105:0"><expr pos:start="103:5" pos:end="103:15"><call pos:start="103:5" pos:end="103:15"><name pos:start="103:5" pos:end="103:10">system</name><argument_list pos:start="103:11" pos:end="103:15">(<argument pos:start="103:12" pos:end="103:14"><expr pos:start="103:12" pos:end="103:14"><name pos:start="103:12" pos:end="103:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="104:1" pos:end="104:5">#<cpp:directive pos:start="104:2" pos:end="104:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><call pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:11">sprintf</name><argument_list pos:start="105:12" pos:end="105:41">(<argument pos:start="105:13" pos:end="105:15"><expr pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">cmd</name></expr></argument>, <argument pos:start="105:18" pos:end="105:25"><expr pos:start="105:18" pos:end="105:25"><literal type="string" pos:start="105:18" pos:end="105:25">"del %s"</literal></expr></argument>, <argument pos:start="105:28" pos:end="105:40"><expr pos:start="105:28" pos:end="105:40"><name pos:start="105:28" pos:end="105:40">test5_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="106:5" pos:end="106:16"><expr pos:start="106:5" pos:end="106:15"><call pos:start="106:5" pos:end="106:15"><name pos:start="106:5" pos:end="106:10">system</name><argument_list pos:start="106:11" pos:end="106:15">(<argument pos:start="106:12" pos:end="106:14"><expr pos:start="106:12" pos:end="106:14"><name pos:start="106:12" pos:end="106:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="107:5" pos:end="107:43"><expr pos:start="107:5" pos:end="107:42"><call pos:start="107:5" pos:end="107:42"><name pos:start="107:5" pos:end="107:11">sprintf</name><argument_list pos:start="107:12" pos:end="107:42">(<argument pos:start="107:13" pos:end="107:15"><expr pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">cmd</name></expr></argument>, <argument pos:start="107:18" pos:end="107:25"><expr pos:start="107:18" pos:end="107:25"><literal type="string" pos:start="107:18" pos:end="107:25">"del %s"</literal></expr></argument>, <argument pos:start="107:28" pos:end="107:41"><expr pos:start="107:28" pos:end="107:41"><name pos:start="107:28" pos:end="107:41">test26_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="108:5" pos:end="108:16"><expr pos:start="108:5" pos:end="108:15"><call pos:start="108:5" pos:end="108:15"><name pos:start="108:5" pos:end="108:10">system</name><argument_list pos:start="108:11" pos:end="108:15">(<argument pos:start="108:12" pos:end="108:14"><expr pos:start="108:12" pos:end="108:14"><name pos:start="108:12" pos:end="108:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="109:43"><expr pos:start="109:5" pos:end="109:42"><call pos:start="109:5" pos:end="109:42"><name pos:start="109:5" pos:end="109:11">sprintf</name><argument_list pos:start="109:12" pos:end="109:42">(<argument pos:start="109:13" pos:end="109:15"><expr pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">cmd</name></expr></argument>, <argument pos:start="109:18" pos:end="109:25"><expr pos:start="109:18" pos:end="109:25"><literal type="string" pos:start="109:18" pos:end="109:25">"del %s"</literal></expr></argument>, <argument pos:start="109:28" pos:end="109:41"><expr pos:start="109:28" pos:end="109:41"><name pos:start="109:28" pos:end="109:41">test27_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="112:0"><expr pos:start="110:5" pos:end="110:15"><call pos:start="110:5" pos:end="110:15"><name pos:start="110:5" pos:end="110:10">system</name><argument_list pos:start="110:11" pos:end="110:15">(<argument pos:start="110:12" pos:end="110:14"><expr pos:start="110:12" pos:end="110:14"><name pos:start="110:12" pos:end="110:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function pos:start="114:1" pos:end="153:1"><type pos:start="114:1" pos:end="114:3"><name pos:start="114:1" pos:end="114:3">int</name></type> <name pos:start="114:5" pos:end="114:22">us894_start_server</name> <parameter_list pos:start="114:24" pos:end="114:25">()</parameter_list>
<block pos:start="115:1" pos:end="153:1">{<block_content pos:start="116:5" pos:end="152:14">
    <decl_stmt pos:start="116:5" pos:end="116:15"><decl pos:start="116:5" pos:end="116:14"><type pos:start="116:5" pos:end="116:7"><name pos:start="116:5" pos:end="116:7">int</name></type> <name pos:start="116:9" pos:end="116:10">rv</name> <init pos:start="116:12" pos:end="116:14">= <expr pos:start="116:14" pos:end="116:14"><literal type="number" pos:start="116:14" pos:end="116:14">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="118:5" pos:end="120:7">/*
     * First we start an EST server acting as the CA
     */</comment>
    <expr_stmt pos:start="121:5" pos:end="130:21"><expr pos:start="121:5" pos:end="130:20"><name pos:start="121:5" pos:end="121:6">rv</name> <operator pos:start="121:8" pos:end="121:8">=</operator> <call pos:start="121:10" pos:end="130:20"><name pos:start="121:10" pos:end="121:17">st_start</name><argument_list pos:start="121:18" pos:end="130:20">(<argument pos:start="121:19" pos:end="121:39"><expr pos:start="121:19" pos:end="121:39"><name pos:start="121:19" pos:end="121:39">US894_TCP_SERVER_PORT</name></expr></argument>,
                  <argument pos:start="122:19" pos:end="122:35"><expr pos:start="122:19" pos:end="122:35"><name pos:start="122:19" pos:end="122:35">US894_SERVER_CERT</name></expr></argument>,
                  <argument pos:start="123:19" pos:end="123:34"><expr pos:start="123:19" pos:end="123:34"><name pos:start="123:19" pos:end="123:34">US894_SERVER_KEY</name></expr></argument>,
                  <argument pos:start="124:19" pos:end="124:28"><expr pos:start="124:19" pos:end="124:28"><literal type="string" pos:start="124:19" pos:end="124:28">"estrealm"</literal></expr></argument>,
                  <argument pos:start="125:19" pos:end="125:30"><expr pos:start="125:19" pos:end="125:30"><name pos:start="125:19" pos:end="125:30">US894_CACERT</name></expr></argument>,
                  <argument pos:start="126:19" pos:end="126:36"><expr pos:start="126:19" pos:end="126:36"><name pos:start="126:19" pos:end="126:36">US894_TRUSTED_CERT</name></expr></argument>,
                  <argument pos:start="127:19" pos:end="127:42"><expr pos:start="127:19" pos:end="127:42"><literal type="string" pos:start="127:19" pos:end="127:42">"US894/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="128:19" pos:end="128:19"><expr pos:start="128:19" pos:end="128:19"><literal type="number" pos:start="128:19" pos:end="128:19">0</literal></expr></argument>,  <comment type="line" pos:start="128:23" pos:end="128:38">// manual enroll</comment>
                  <argument pos:start="129:19" pos:end="129:19"><expr pos:start="129:19" pos:end="129:19"><literal type="number" pos:start="129:19" pos:end="129:19">0</literal></expr></argument>,  <comment type="line" pos:start="129:23" pos:end="129:36">// disable PoP</comment>
                  <argument pos:start="130:19" pos:end="130:19"><expr pos:start="130:19" pos:end="130:19"><literal type="number" pos:start="130:19" pos:end="130:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="130:23" pos:end="130:39">// ecdhe nid info</comment>
    <expr_stmt pos:start="131:5" pos:end="131:13"><expr pos:start="131:5" pos:end="131:12"><call pos:start="131:5" pos:end="131:12"><name pos:start="131:5" pos:end="131:9">SLEEP</name><argument_list pos:start="131:10" pos:end="131:12">(<argument pos:start="131:11" pos:end="131:11"><expr pos:start="131:11" pos:end="131:11"><literal type="number" pos:start="131:11" pos:end="131:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="132:5" pos:end="133:18"><if pos:start="132:5" pos:end="133:18">if <condition pos:start="132:8" pos:end="132:27">(<expr pos:start="132:9" pos:end="132:26"><name pos:start="132:9" pos:end="132:10">rv</name> <operator pos:start="132:12" pos:end="132:13">!=</operator> <name pos:start="132:15" pos:end="132:26">EST_ERR_NONE</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:18"><block_content pos:start="133:9" pos:end="133:18">
        <return pos:start="133:9" pos:end="133:18">return <expr pos:start="133:16" pos:end="133:17"><name pos:start="133:16" pos:end="133:17">rv</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="135:5" pos:end="137:7">/*
     * Next we start an EST proxy acting as an RA.
     */</comment>
    <expr_stmt pos:start="138:5" pos:end="149:27"><expr pos:start="138:5" pos:end="149:26"><name pos:start="138:5" pos:end="138:6">rv</name> <operator pos:start="138:8" pos:end="138:8">=</operator> <call pos:start="138:10" pos:end="149:26"><name pos:start="138:10" pos:end="138:23">st_proxy_start</name><argument_list pos:start="138:24" pos:end="149:26">(<argument pos:start="138:25" pos:end="138:44"><expr pos:start="138:25" pos:end="138:44"><name pos:start="138:25" pos:end="138:44">US894_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="139:25" pos:end="139:40"><expr pos:start="139:25" pos:end="139:40"><name pos:start="139:25" pos:end="139:40">US894_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="140:25" pos:end="140:39"><expr pos:start="140:25" pos:end="140:39"><name pos:start="140:25" pos:end="140:39">US894_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="141:25" pos:end="141:34"><expr pos:start="141:25" pos:end="141:34"><literal type="string" pos:start="141:25" pos:end="141:34">"estrealm"</literal></expr></argument>,
                        <argument pos:start="142:25" pos:end="142:36"><expr pos:start="142:25" pos:end="142:36"><name pos:start="142:25" pos:end="142:36">US894_CACERT</name></expr></argument>,
                        <argument pos:start="143:25" pos:end="143:42"><expr pos:start="143:25" pos:end="143:42"><name pos:start="143:25" pos:end="143:42">US894_TRUSTED_CERT</name></expr></argument>,
                        <argument pos:start="144:25" pos:end="144:33"><expr pos:start="144:25" pos:end="144:33"><literal type="string" pos:start="144:25" pos:end="144:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="145:25" pos:end="145:32"><expr pos:start="145:25" pos:end="145:32"><literal type="string" pos:start="145:25" pos:end="145:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="146:25" pos:end="146:35"><expr pos:start="146:25" pos:end="146:35"><literal type="string" pos:start="146:25" pos:end="146:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="147:25" pos:end="147:45"><expr pos:start="147:25" pos:end="147:45"><name pos:start="147:25" pos:end="147:45">US894_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="148:25" pos:end="148:25"><expr pos:start="148:25" pos:end="148:25"><literal type="number" pos:start="148:25" pos:end="148:25">0</literal></expr></argument>,  <comment type="line" pos:start="148:29" pos:end="148:42">// disable PoP</comment>
                        <argument pos:start="149:25" pos:end="149:25"><expr pos:start="149:25" pos:end="149:25"><literal type="number" pos:start="149:25" pos:end="149:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="149:30" pos:end="149:46">// ecdhe nid info</comment>
    <expr_stmt pos:start="150:5" pos:end="150:13"><expr pos:start="150:5" pos:end="150:12"><call pos:start="150:5" pos:end="150:12"><name pos:start="150:5" pos:end="150:9">SLEEP</name><argument_list pos:start="150:10" pos:end="150:12">(<argument pos:start="150:11" pos:end="150:11"><expr pos:start="150:11" pos:end="150:11"><literal type="number" pos:start="150:11" pos:end="150:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="152:5" pos:end="152:14">return <expr pos:start="152:12" pos:end="152:13"><name pos:start="152:12" pos:end="152:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="155:1" pos:end="159:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="160:1" pos:end="175:1"><type pos:start="160:1" pos:end="160:10"><specifier pos:start="160:1" pos:end="160:6">static</specifier> <name pos:start="160:8" pos:end="160:10">int</name></type> <name pos:start="160:12" pos:end="160:27">us894_init_suite</name> <parameter_list pos:start="160:29" pos:end="160:34">(<parameter pos:start="160:30" pos:end="160:33"><decl pos:start="160:30" pos:end="160:33"><type pos:start="160:30" pos:end="160:33"><name pos:start="160:30" pos:end="160:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="161:1" pos:end="175:1">{<block_content pos:start="162:5" pos:end="174:14">
    <decl_stmt pos:start="162:5" pos:end="162:11"><decl pos:start="162:5" pos:end="162:10"><type pos:start="162:5" pos:end="162:7"><name pos:start="162:5" pos:end="162:7">int</name></type> <name pos:start="162:9" pos:end="162:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="164:5" pos:end="164:18"><expr pos:start="164:5" pos:end="164:17"><call pos:start="164:5" pos:end="164:17"><name pos:start="164:5" pos:end="164:15">us894_clean</name><argument_list pos:start="164:16" pos:end="164:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="166:5" pos:end="166:61"><expr pos:start="166:5" pos:end="166:60"><call pos:start="166:5" pos:end="166:60"><name pos:start="166:5" pos:end="166:10">printf</name><argument_list pos:start="166:11" pos:end="166:60">(<argument pos:start="166:12" pos:end="166:59"><expr pos:start="166:12" pos:end="166:59"><literal type="string" pos:start="166:12" pos:end="166:59">"\nStarting EST Proxy Get CACerts unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="168:5" pos:end="171:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="172:5" pos:end="172:30"><expr pos:start="172:5" pos:end="172:29"><name pos:start="172:5" pos:end="172:6">rv</name> <operator pos:start="172:8" pos:end="172:8">=</operator> <call pos:start="172:10" pos:end="172:29"><name pos:start="172:10" pos:end="172:27">us894_start_server</name><argument_list pos:start="172:28" pos:end="172:29">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="174:5" pos:end="174:14">return <expr pos:start="174:12" pos:end="174:13"><name pos:start="174:12" pos:end="174:13">rv</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="177:1" pos:end="182:1"><type pos:start="177:1" pos:end="177:4"><name pos:start="177:1" pos:end="177:4">void</name></type> <name pos:start="177:6" pos:end="177:22">us894_stop_server</name> <parameter_list pos:start="177:24" pos:end="177:25">()</parameter_list>
<block pos:start="178:1" pos:end="182:1">{<block_content pos:start="179:5" pos:end="181:13">
    <expr_stmt pos:start="179:5" pos:end="179:14"><expr pos:start="179:5" pos:end="179:13"><call pos:start="179:5" pos:end="179:13"><name pos:start="179:5" pos:end="179:11">st_stop</name><argument_list pos:start="179:12" pos:end="179:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="180:5" pos:end="180:20"><expr pos:start="180:5" pos:end="180:19"><call pos:start="180:5" pos:end="180:19"><name pos:start="180:5" pos:end="180:17">st_proxy_stop</name><argument_list pos:start="180:18" pos:end="180:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="181:5" pos:end="181:13"><expr pos:start="181:5" pos:end="181:12"><call pos:start="181:5" pos:end="181:12"><name pos:start="181:5" pos:end="181:9">SLEEP</name><argument_list pos:start="181:10" pos:end="181:12">(<argument pos:start="181:11" pos:end="181:11"><expr pos:start="181:11" pos:end="181:11"><literal type="number" pos:start="181:11" pos:end="181:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="184:1" pos:end="188:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="189:1" pos:end="194:1"><type pos:start="189:1" pos:end="189:10"><specifier pos:start="189:1" pos:end="189:6">static</specifier> <name pos:start="189:8" pos:end="189:10">int</name></type> <name pos:start="189:12" pos:end="189:30">us894_destroy_suite</name> <parameter_list pos:start="189:32" pos:end="189:37">(<parameter pos:start="189:33" pos:end="189:36"><decl pos:start="189:33" pos:end="189:36"><type pos:start="189:33" pos:end="189:36"><name pos:start="189:33" pos:end="189:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="190:1" pos:end="194:1">{<block_content pos:start="191:5" pos:end="193:13">
    <expr_stmt pos:start="191:5" pos:end="191:24"><expr pos:start="191:5" pos:end="191:23"><call pos:start="191:5" pos:end="191:23"><name pos:start="191:5" pos:end="191:21">us894_stop_server</name><argument_list pos:start="191:22" pos:end="191:23">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:60"><expr pos:start="192:5" pos:end="192:59"><call pos:start="192:5" pos:end="192:59"><name pos:start="192:5" pos:end="192:10">printf</name><argument_list pos:start="192:11" pos:end="192:59">(<argument pos:start="192:12" pos:end="192:58"><expr pos:start="192:12" pos:end="192:58"><literal type="string" pos:start="192:12" pos:end="192:58">"Completed EST Proxy Get CACerts unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="193:5" pos:end="193:13">return <expr pos:start="193:12" pos:end="193:12"><literal type="number" pos:start="193:12" pos:end="193:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="196:1" pos:end="204:3">/*
 * HTTP Basic auth
 *
 * This test case uses libcurl to test HTTP Basic
 * authentication is working on the EST proxy/server.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.
 */</comment>
<function pos:start="205:1" pos:end="221:1"><type pos:start="205:1" pos:end="205:11"><specifier pos:start="205:1" pos:end="205:6">static</specifier> <name pos:start="205:8" pos:end="205:11">void</name></type> <name pos:start="205:13" pos:end="205:23">us894_test1</name> <parameter_list pos:start="205:25" pos:end="205:30">(<parameter pos:start="205:26" pos:end="205:29"><decl pos:start="205:26" pos:end="205:29"><type pos:start="205:26" pos:end="205:29"><name pos:start="205:26" pos:end="205:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="206:1" pos:end="221:1">{<block_content pos:start="207:5" pos:end="220:25">
    <decl_stmt pos:start="207:5" pos:end="207:12"><decl pos:start="207:5" pos:end="207:11"><type pos:start="207:5" pos:end="207:8"><name pos:start="207:5" pos:end="207:8">long</name></type> <name pos:start="207:10" pos:end="207:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="209:5" pos:end="210:5"><expr pos:start="209:5" pos:end="209:15"><name pos:start="209:5" pos:end="209:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="212:5" pos:end="212:13"><expr pos:start="212:5" pos:end="212:12"><call pos:start="212:5" pos:end="212:12"><name pos:start="212:5" pos:end="212:9">SLEEP</name><argument_list pos:start="212:10" pos:end="212:12">(<argument pos:start="212:11" pos:end="212:11"><expr pos:start="212:11" pos:end="212:11"><literal type="number" pos:start="212:11" pos:end="212:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="213:5" pos:end="215:42"><expr pos:start="213:5" pos:end="215:41"><name pos:start="213:5" pos:end="213:6">rv</name> <operator pos:start="213:8" pos:end="213:8">=</operator> <call pos:start="213:10" pos:end="215:41"><name pos:start="213:10" pos:end="213:23">curl_http_post</name><argument_list pos:start="213:24" pos:end="215:41">(<argument pos:start="213:25" pos:end="213:40"><expr pos:start="213:25" pos:end="213:40"><name pos:start="213:25" pos:end="213:40">US894_ENROLL_URL</name></expr></argument>, <argument pos:start="213:43" pos:end="213:57"><expr pos:start="213:43" pos:end="213:57"><name pos:start="213:43" pos:end="213:57">US894_PKCS10_CT</name></expr></argument>, <argument pos:start="213:60" pos:end="213:75"><expr pos:start="213:60" pos:end="213:75"><name pos:start="213:60" pos:end="213:75">US894_PKCS10_REQ</name></expr></argument>,
                        <argument pos:start="214:25" pos:end="214:41"><expr pos:start="214:25" pos:end="214:41"><name pos:start="214:25" pos:end="214:41">US894_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="214:44" pos:end="214:56"><expr pos:start="214:44" pos:end="214:56"><name pos:start="214:44" pos:end="214:56">US894_CACERTS</name></expr></argument>, <argument pos:start="214:59" pos:end="214:72"><expr pos:start="214:59" pos:end="214:72"><name pos:start="214:59" pos:end="214:72">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="215:25" pos:end="215:28"><expr pos:start="215:25" pos:end="215:28"><name pos:start="215:25" pos:end="215:28">NULL</name></expr></argument>, <argument pos:start="215:31" pos:end="215:34"><expr pos:start="215:31" pos:end="215:34"><name pos:start="215:31" pos:end="215:34">NULL</name></expr></argument>, <argument pos:start="215:37" pos:end="215:40"><expr pos:start="215:37" pos:end="215:40"><name pos:start="215:37" pos:end="215:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="216:5" pos:end="219:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="220:5" pos:end="220:25"><expr pos:start="220:5" pos:end="220:24"><call pos:start="220:5" pos:end="220:24"><name pos:start="220:5" pos:end="220:13">CU_ASSERT</name><argument_list pos:start="220:14" pos:end="220:24">(<argument pos:start="220:15" pos:end="220:23"><expr pos:start="220:15" pos:end="220:23"><name pos:start="220:15" pos:end="220:16">rv</name> <operator pos:start="220:18" pos:end="220:19">==</operator> <literal type="number" pos:start="220:21" pos:end="220:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="223:1" pos:end="232:3">/*
 * HTTP Basic Auth failure, Bad Password
 *
 * This test case uses libcurl to test HTTP Basic
 * authentication is working on the EST proxy/server,
 * while using a bogus password.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.
 */</comment>
<function pos:start="233:1" pos:end="249:1"><type pos:start="233:1" pos:end="233:11"><specifier pos:start="233:1" pos:end="233:6">static</specifier> <name pos:start="233:8" pos:end="233:11">void</name></type> <name pos:start="233:13" pos:end="233:23">us894_test2</name> <parameter_list pos:start="233:25" pos:end="233:30">(<parameter pos:start="233:26" pos:end="233:29"><decl pos:start="233:26" pos:end="233:29"><type pos:start="233:26" pos:end="233:29"><name pos:start="233:26" pos:end="233:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="234:1" pos:end="249:1">{<block_content pos:start="235:5" pos:end="248:25">
    <decl_stmt pos:start="235:5" pos:end="235:12"><decl pos:start="235:5" pos:end="235:11"><type pos:start="235:5" pos:end="235:8"><name pos:start="235:5" pos:end="235:8">long</name></type> <name pos:start="235:10" pos:end="235:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="237:5" pos:end="238:5"><expr pos:start="237:5" pos:end="237:15"><name pos:start="237:5" pos:end="237:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="240:5" pos:end="240:13"><expr pos:start="240:5" pos:end="240:12"><call pos:start="240:5" pos:end="240:12"><name pos:start="240:5" pos:end="240:9">SLEEP</name><argument_list pos:start="240:10" pos:end="240:12">(<argument pos:start="240:11" pos:end="240:11"><expr pos:start="240:11" pos:end="240:11"><literal type="number" pos:start="240:11" pos:end="240:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="241:5" pos:end="243:42"><expr pos:start="241:5" pos:end="243:41"><name pos:start="241:5" pos:end="241:6">rv</name> <operator pos:start="241:8" pos:end="241:8">=</operator> <call pos:start="241:10" pos:end="243:41"><name pos:start="241:10" pos:end="241:23">curl_http_post</name><argument_list pos:start="241:24" pos:end="243:41">(<argument pos:start="241:25" pos:end="241:40"><expr pos:start="241:25" pos:end="241:40"><name pos:start="241:25" pos:end="241:40">US894_ENROLL_URL</name></expr></argument>, <argument pos:start="241:43" pos:end="241:57"><expr pos:start="241:43" pos:end="241:57"><name pos:start="241:43" pos:end="241:57">US894_PKCS10_CT</name></expr></argument>, <argument pos:start="241:60" pos:end="241:75"><expr pos:start="241:60" pos:end="241:75"><name pos:start="241:60" pos:end="241:75">US894_PKCS10_REQ</name></expr></argument>,
                        <argument pos:start="242:25" pos:end="242:40"><expr pos:start="242:25" pos:end="242:40"><name pos:start="242:25" pos:end="242:40">US894_UIDPWD_BAD</name></expr></argument>, <argument pos:start="242:43" pos:end="242:55"><expr pos:start="242:43" pos:end="242:55"><name pos:start="242:43" pos:end="242:55">US894_CACERTS</name></expr></argument>, <argument pos:start="242:58" pos:end="242:71"><expr pos:start="242:58" pos:end="242:71"><name pos:start="242:58" pos:end="242:71">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="243:25" pos:end="243:28"><expr pos:start="243:25" pos:end="243:28"><name pos:start="243:25" pos:end="243:28">NULL</name></expr></argument>, <argument pos:start="243:31" pos:end="243:34"><expr pos:start="243:31" pos:end="243:34"><name pos:start="243:31" pos:end="243:34">NULL</name></expr></argument>, <argument pos:start="243:37" pos:end="243:40"><expr pos:start="243:37" pos:end="243:40"><name pos:start="243:37" pos:end="243:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="244:5" pos:end="247:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with 400
     */</comment>
    <expr_stmt pos:start="248:5" pos:end="248:25"><expr pos:start="248:5" pos:end="248:24"><call pos:start="248:5" pos:end="248:24"><name pos:start="248:5" pos:end="248:13">CU_ASSERT</name><argument_list pos:start="248:14" pos:end="248:24">(<argument pos:start="248:15" pos:end="248:23"><expr pos:start="248:15" pos:end="248:23"><name pos:start="248:15" pos:end="248:16">rv</name> <operator pos:start="248:18" pos:end="248:19">==</operator> <literal type="number" pos:start="248:21" pos:end="248:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="251:1" pos:end="261:3">/*
 * HTTP Digest Auth
 *
 * This test case uses libcurl to test HTTP Digest
 * authentication is working on the EST proxy/server.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.
 *
 * This test also tests the correct operation of est_proxy_set_auth()
 */</comment>
<function pos:start="262:1" pos:end="282:1"><type pos:start="262:1" pos:end="262:11"><specifier pos:start="262:1" pos:end="262:6">static</specifier> <name pos:start="262:8" pos:end="262:11">void</name></type> <name pos:start="262:13" pos:end="262:23">us894_test3</name> <parameter_list pos:start="262:25" pos:end="262:30">(<parameter pos:start="262:26" pos:end="262:29"><decl pos:start="262:26" pos:end="262:29"><type pos:start="262:26" pos:end="262:29"><name pos:start="262:26" pos:end="262:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="263:1" pos:end="282:1">{<block_content pos:start="264:5" pos:end="281:34">
    <decl_stmt pos:start="264:5" pos:end="264:12"><decl pos:start="264:5" pos:end="264:11"><type pos:start="264:5" pos:end="264:8"><name pos:start="264:5" pos:end="264:8">long</name></type> <name pos:start="264:10" pos:end="264:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="266:5" pos:end="267:5"><expr pos:start="266:5" pos:end="266:15"><name pos:start="266:5" pos:end="266:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:35"><expr pos:start="269:5" pos:end="269:34"><call pos:start="269:5" pos:end="269:34"><name pos:start="269:5" pos:end="269:21">st_proxy_set_auth</name><argument_list pos:start="269:22" pos:end="269:34">(<argument pos:start="269:23" pos:end="269:33"><expr pos:start="269:23" pos:end="269:33"><name pos:start="269:23" pos:end="269:33">AUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="270:5" pos:end="270:13"><expr pos:start="270:5" pos:end="270:12"><call pos:start="270:5" pos:end="270:12"><name pos:start="270:5" pos:end="270:9">SLEEP</name><argument_list pos:start="270:10" pos:end="270:12">(<argument pos:start="270:11" pos:end="270:11"><expr pos:start="270:11" pos:end="270:11"><literal type="number" pos:start="270:11" pos:end="270:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="272:5" pos:end="274:42"><expr pos:start="272:5" pos:end="274:41"><name pos:start="272:5" pos:end="272:6">rv</name> <operator pos:start="272:8" pos:end="272:8">=</operator> <call pos:start="272:10" pos:end="274:41"><name pos:start="272:10" pos:end="272:23">curl_http_post</name><argument_list pos:start="272:24" pos:end="274:41">(<argument pos:start="272:25" pos:end="272:40"><expr pos:start="272:25" pos:end="272:40"><name pos:start="272:25" pos:end="272:40">US894_ENROLL_URL</name></expr></argument>, <argument pos:start="272:43" pos:end="272:57"><expr pos:start="272:43" pos:end="272:57"><name pos:start="272:43" pos:end="272:57">US894_PKCS10_CT</name></expr></argument>, <argument pos:start="272:60" pos:end="272:75"><expr pos:start="272:60" pos:end="272:75"><name pos:start="272:60" pos:end="272:75">US894_PKCS10_REQ</name></expr></argument>,
                        <argument pos:start="273:25" pos:end="273:41"><expr pos:start="273:25" pos:end="273:41"><name pos:start="273:25" pos:end="273:41">US894_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="273:44" pos:end="273:56"><expr pos:start="273:44" pos:end="273:56"><name pos:start="273:44" pos:end="273:56">US894_CACERTS</name></expr></argument>, <argument pos:start="273:59" pos:end="273:73"><expr pos:start="273:59" pos:end="273:73"><name pos:start="273:59" pos:end="273:73">CURLAUTH_DIGEST</name></expr></argument>,
                        <argument pos:start="274:25" pos:end="274:28"><expr pos:start="274:25" pos:end="274:28"><name pos:start="274:25" pos:end="274:28">NULL</name></expr></argument>, <argument pos:start="274:31" pos:end="274:34"><expr pos:start="274:31" pos:end="274:34"><name pos:start="274:31" pos:end="274:34">NULL</name></expr></argument>, <argument pos:start="274:37" pos:end="274:40"><expr pos:start="274:37" pos:end="274:40"><name pos:start="274:37" pos:end="274:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="275:5" pos:end="278:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with success
     */</comment>
    <expr_stmt pos:start="279:5" pos:end="279:25"><expr pos:start="279:5" pos:end="279:24"><call pos:start="279:5" pos:end="279:24"><name pos:start="279:5" pos:end="279:13">CU_ASSERT</name><argument_list pos:start="279:14" pos:end="279:24">(<argument pos:start="279:15" pos:end="279:23"><expr pos:start="279:15" pos:end="279:23"><name pos:start="279:15" pos:end="279:16">rv</name> <operator pos:start="279:18" pos:end="279:19">==</operator> <literal type="number" pos:start="279:21" pos:end="279:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:34"><expr pos:start="281:5" pos:end="281:33"><call pos:start="281:5" pos:end="281:33"><name pos:start="281:5" pos:end="281:21">st_proxy_set_auth</name><argument_list pos:start="281:22" pos:end="281:33">(<argument pos:start="281:23" pos:end="281:32"><expr pos:start="281:23" pos:end="281:32"><name pos:start="281:23" pos:end="281:32">AUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="284:1" pos:end="295:3">/*
 * HTTP Digest Auth fail
 *
 * This test case uses libcurl to test HTTP Digest
 * authentication is working on the EST proxy/server.
 * This is the negative test case for Digest auth.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.  The EST proxy/server should be
 * running and listening to port 8087 prior to this
 * test being run.
 */</comment>
<function pos:start="296:1" pos:end="316:1"><type pos:start="296:1" pos:end="296:11"><specifier pos:start="296:1" pos:end="296:6">static</specifier> <name pos:start="296:8" pos:end="296:11">void</name></type> <name pos:start="296:13" pos:end="296:23">us894_test4</name> <parameter_list pos:start="296:25" pos:end="296:30">(<parameter pos:start="296:26" pos:end="296:29"><decl pos:start="296:26" pos:end="296:29"><type pos:start="296:26" pos:end="296:29"><name pos:start="296:26" pos:end="296:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="297:1" pos:end="316:1">{<block_content pos:start="298:5" pos:end="315:34">
    <decl_stmt pos:start="298:5" pos:end="298:12"><decl pos:start="298:5" pos:end="298:11"><type pos:start="298:5" pos:end="298:8"><name pos:start="298:5" pos:end="298:8">long</name></type> <name pos:start="298:10" pos:end="298:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="300:5" pos:end="301:5"><expr pos:start="300:5" pos:end="300:15"><name pos:start="300:5" pos:end="300:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:35"><expr pos:start="303:5" pos:end="303:34"><call pos:start="303:5" pos:end="303:34"><name pos:start="303:5" pos:end="303:21">st_proxy_set_auth</name><argument_list pos:start="303:22" pos:end="303:34">(<argument pos:start="303:23" pos:end="303:33"><expr pos:start="303:23" pos:end="303:33"><name pos:start="303:23" pos:end="303:33">AUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="304:5" pos:end="304:13"><expr pos:start="304:5" pos:end="304:12"><call pos:start="304:5" pos:end="304:12"><name pos:start="304:5" pos:end="304:9">SLEEP</name><argument_list pos:start="304:10" pos:end="304:12">(<argument pos:start="304:11" pos:end="304:11"><expr pos:start="304:11" pos:end="304:11"><literal type="number" pos:start="304:11" pos:end="304:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="306:5" pos:end="308:42"><expr pos:start="306:5" pos:end="308:41"><name pos:start="306:5" pos:end="306:6">rv</name> <operator pos:start="306:8" pos:end="306:8">=</operator> <call pos:start="306:10" pos:end="308:41"><name pos:start="306:10" pos:end="306:23">curl_http_post</name><argument_list pos:start="306:24" pos:end="308:41">(<argument pos:start="306:25" pos:end="306:40"><expr pos:start="306:25" pos:end="306:40"><name pos:start="306:25" pos:end="306:40">US894_ENROLL_URL</name></expr></argument>, <argument pos:start="306:43" pos:end="306:57"><expr pos:start="306:43" pos:end="306:57"><name pos:start="306:43" pos:end="306:57">US894_PKCS10_CT</name></expr></argument>, <argument pos:start="306:60" pos:end="306:75"><expr pos:start="306:60" pos:end="306:75"><name pos:start="306:60" pos:end="306:75">US894_PKCS10_REQ</name></expr></argument>,
                        <argument pos:start="307:25" pos:end="307:40"><expr pos:start="307:25" pos:end="307:40"><name pos:start="307:25" pos:end="307:40">US894_UIDPWD_BAD</name></expr></argument>, <argument pos:start="307:43" pos:end="307:55"><expr pos:start="307:43" pos:end="307:55"><name pos:start="307:43" pos:end="307:55">US894_CACERTS</name></expr></argument>, <argument pos:start="307:58" pos:end="307:72"><expr pos:start="307:58" pos:end="307:72"><name pos:start="307:58" pos:end="307:72">CURLAUTH_DIGEST</name></expr></argument>,
                        <argument pos:start="308:25" pos:end="308:28"><expr pos:start="308:25" pos:end="308:28"><name pos:start="308:25" pos:end="308:28">NULL</name></expr></argument>, <argument pos:start="308:31" pos:end="308:34"><expr pos:start="308:31" pos:end="308:34"><name pos:start="308:31" pos:end="308:34">NULL</name></expr></argument>, <argument pos:start="308:37" pos:end="308:40"><expr pos:start="308:37" pos:end="308:40"><name pos:start="308:37" pos:end="308:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="309:5" pos:end="312:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with a 400
     */</comment>
    <expr_stmt pos:start="313:5" pos:end="313:25"><expr pos:start="313:5" pos:end="313:24"><call pos:start="313:5" pos:end="313:24"><name pos:start="313:5" pos:end="313:13">CU_ASSERT</name><argument_list pos:start="313:14" pos:end="313:24">(<argument pos:start="313:15" pos:end="313:23"><expr pos:start="313:15" pos:end="313:23"><name pos:start="313:15" pos:end="313:16">rv</name> <operator pos:start="313:18" pos:end="313:19">==</operator> <literal type="number" pos:start="313:21" pos:end="313:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:34"><expr pos:start="315:5" pos:end="315:33"><call pos:start="315:5" pos:end="315:33"><name pos:start="315:5" pos:end="315:21">st_proxy_set_auth</name><argument_list pos:start="315:22" pos:end="315:33">(<argument pos:start="315:23" pos:end="315:32"><expr pos:start="315:23" pos:end="315:32"><name pos:start="315:23" pos:end="315:32">AUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt pos:start="318:1" pos:end="318:21"><decl pos:start="318:1" pos:end="318:20"><type pos:start="318:1" pos:end="318:13"><specifier pos:start="318:1" pos:end="318:6">static</specifier> <name pos:start="318:8" pos:end="318:11">FILE</name> <modifier pos:start="318:13" pos:end="318:13">*</modifier></type><name pos:start="318:14" pos:end="318:20">outfile</name></decl>;</decl_stmt>
<function pos:start="319:1" pos:end="324:1"><type pos:start="319:1" pos:end="319:13"><specifier pos:start="319:1" pos:end="319:6">static</specifier> <name pos:start="319:8" pos:end="319:13">size_t</name></type> <name pos:start="319:15" pos:end="319:24">write_func</name> <parameter_list pos:start="319:26" pos:end="319:79">(<parameter pos:start="319:27" pos:end="319:35"><decl pos:start="319:27" pos:end="319:35"><type pos:start="319:27" pos:end="319:35"><name pos:start="319:27" pos:end="319:30">void</name> <modifier pos:start="319:32" pos:end="319:32">*</modifier></type><name pos:start="319:33" pos:end="319:35">ptr</name></decl></parameter>, <parameter pos:start="319:38" pos:end="319:48"><decl pos:start="319:38" pos:end="319:48"><type pos:start="319:38" pos:end="319:48"><name pos:start="319:38" pos:end="319:43">size_t</name></type> <name pos:start="319:45" pos:end="319:48">size</name></decl></parameter>, <parameter pos:start="319:51" pos:end="319:62"><decl pos:start="319:51" pos:end="319:62"><type pos:start="319:51" pos:end="319:62"><name pos:start="319:51" pos:end="319:56">size_t</name></type> <name pos:start="319:58" pos:end="319:62">nmemb</name></decl></parameter>, <parameter pos:start="319:65" pos:end="319:78"><decl pos:start="319:65" pos:end="319:78"><type pos:start="319:65" pos:end="319:78"><name pos:start="319:65" pos:end="319:68">void</name> <modifier pos:start="319:70" pos:end="319:70">*</modifier></type><name pos:start="319:71" pos:end="319:78">userdata</name></decl></parameter>)</parameter_list>
<block pos:start="320:1" pos:end="324:1">{<block_content pos:start="321:5" pos:end="323:19">
    <decl_stmt pos:start="321:5" pos:end="321:19"><decl pos:start="321:5" pos:end="321:18"><type pos:start="321:5" pos:end="321:10"><name pos:start="321:5" pos:end="321:10">size_t</name></type> <name pos:start="321:12" pos:end="321:18">written</name></decl>;</decl_stmt>
    <expr_stmt pos:start="322:5" pos:end="322:48"><expr pos:start="322:5" pos:end="322:47"><name pos:start="322:5" pos:end="322:11">written</name> <operator pos:start="322:13" pos:end="322:13">=</operator> <call pos:start="322:15" pos:end="322:47"><name pos:start="322:15" pos:end="322:20">fwrite</name><argument_list pos:start="322:21" pos:end="322:47">(<argument pos:start="322:22" pos:end="322:24"><expr pos:start="322:22" pos:end="322:24"><name pos:start="322:22" pos:end="322:24">ptr</name></expr></argument>, <argument pos:start="322:27" pos:end="322:30"><expr pos:start="322:27" pos:end="322:30"><name pos:start="322:27" pos:end="322:30">size</name></expr></argument>, <argument pos:start="322:33" pos:end="322:37"><expr pos:start="322:33" pos:end="322:37"><name pos:start="322:33" pos:end="322:37">nmemb</name></expr></argument>, <argument pos:start="322:40" pos:end="322:46"><expr pos:start="322:40" pos:end="322:46"><name pos:start="322:40" pos:end="322:46">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="323:5" pos:end="323:19">return <expr pos:start="323:12" pos:end="323:18"><name pos:start="323:12" pos:end="323:18">written</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="326:1" pos:end="329:3">/*
 * This test case does a simple cacerts request
 * and looks for the HTTP 200 response code.
 */</comment>
<function pos:start="330:1" pos:end="355:1"><type pos:start="330:1" pos:end="330:11"><specifier pos:start="330:1" pos:end="330:6">static</specifier> <name pos:start="330:8" pos:end="330:11">void</name></type> <name pos:start="330:13" pos:end="330:23">us894_test5</name> <parameter_list pos:start="330:25" pos:end="330:30">(<parameter pos:start="330:26" pos:end="330:29"><decl pos:start="330:26" pos:end="330:29"><type pos:start="330:26" pos:end="330:29"><name pos:start="330:26" pos:end="330:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="331:1" pos:end="355:1">{<block_content pos:start="332:5" pos:end="354:23">
    <decl_stmt pos:start="332:5" pos:end="332:12"><decl pos:start="332:5" pos:end="332:11"><type pos:start="332:5" pos:end="332:8"><name pos:start="332:5" pos:end="332:8">long</name></type> <name pos:start="332:10" pos:end="332:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="333:5" pos:end="333:18"><decl pos:start="333:5" pos:end="333:17"><type pos:start="333:5" pos:end="333:8"><name pos:start="333:5" pos:end="333:8">char</name></type> <name pos:start="333:10" pos:end="333:17"><name pos:start="333:10" pos:end="333:12">cmd</name><index pos:start="333:13" pos:end="333:17">[<expr pos:start="333:14" pos:end="333:16"><literal type="number" pos:start="333:14" pos:end="333:16">200</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="335:5" pos:end="336:5"><expr pos:start="335:5" pos:end="335:15"><name pos:start="335:5" pos:end="335:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="338:5" pos:end="338:13"><expr pos:start="338:5" pos:end="338:12"><call pos:start="338:5" pos:end="338:12"><name pos:start="338:5" pos:end="338:9">SLEEP</name><argument_list pos:start="338:10" pos:end="338:12">(<argument pos:start="338:11" pos:end="338:11"><expr pos:start="338:11" pos:end="338:11"><literal type="number" pos:start="338:11" pos:end="338:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="340:5" pos:end="340:40"><expr pos:start="340:5" pos:end="340:39"><name pos:start="340:5" pos:end="340:11">outfile</name> <operator pos:start="340:13" pos:end="340:13">=</operator> <call pos:start="340:15" pos:end="340:39"><name pos:start="340:15" pos:end="340:19">fopen</name><argument_list pos:start="340:20" pos:end="340:39">(<argument pos:start="340:21" pos:end="340:33"><expr pos:start="340:21" pos:end="340:33"><name pos:start="340:21" pos:end="340:33">test5_outfile</name></expr></argument>, <argument pos:start="340:36" pos:end="340:38"><expr pos:start="340:36" pos:end="340:38"><literal type="string" pos:start="340:36" pos:end="340:38">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="341:5" pos:end="341:69"><expr pos:start="341:5" pos:end="341:68"><name pos:start="341:5" pos:end="341:6">rv</name> <operator pos:start="341:8" pos:end="341:8">=</operator> <call pos:start="341:10" pos:end="341:68"><name pos:start="341:10" pos:end="341:22">curl_http_get</name><argument_list pos:start="341:23" pos:end="341:68">(<argument pos:start="341:24" pos:end="341:39"><expr pos:start="341:24" pos:end="341:39"><name pos:start="341:24" pos:end="341:39">US894_CACERT_URL</name></expr></argument>, <argument pos:start="341:42" pos:end="341:54"><expr pos:start="341:42" pos:end="341:54"><name pos:start="341:42" pos:end="341:54">US894_CACERTS</name></expr></argument>, <argument pos:start="341:57" pos:end="341:67"><expr pos:start="341:57" pos:end="341:67"><operator pos:start="341:57" pos:end="341:57">&amp;</operator><name pos:start="341:58" pos:end="341:67">write_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="342:5" pos:end="342:20"><expr pos:start="342:5" pos:end="342:19"><call pos:start="342:5" pos:end="342:19"><name pos:start="342:5" pos:end="342:10">fclose</name><argument_list pos:start="342:11" pos:end="342:19">(<argument pos:start="342:12" pos:end="342:18"><expr pos:start="342:12" pos:end="342:18"><name pos:start="342:12" pos:end="342:18">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="344:5" pos:end="346:7">/*
     * we expect the server to respond with a 200
     */</comment>
    <expr_stmt pos:start="347:5" pos:end="347:25"><expr pos:start="347:5" pos:end="347:24"><call pos:start="347:5" pos:end="347:24"><name pos:start="347:5" pos:end="347:13">CU_ASSERT</name><argument_list pos:start="347:14" pos:end="347:24">(<argument pos:start="347:15" pos:end="347:23"><expr pos:start="347:15" pos:end="347:23"><name pos:start="347:15" pos:end="347:16">rv</name> <operator pos:start="347:18" pos:end="347:19">==</operator> <literal type="number" pos:start="347:21" pos:end="347:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="352:23"><expr pos:start="349:5" pos:end="352:22"><call pos:start="349:5" pos:end="352:22"><name pos:start="349:5" pos:end="349:11">sprintf</name><argument_list pos:start="349:12" pos:end="352:22">(
        <argument pos:start="350:9" pos:end="350:11"><expr pos:start="350:9" pos:end="350:11"><name pos:start="350:9" pos:end="350:11">cmd</name></expr></argument>,
        <argument pos:start="351:9" pos:end="351:81"><expr pos:start="351:9" pos:end="351:81"><literal type="string" pos:start="351:9" pos:end="351:81">"openssl base64 -d -in %s | openssl pkcs7 -inform DER -text -print_certs"</literal></expr></argument>,
        <argument pos:start="352:9" pos:end="352:21"><expr pos:start="352:9" pos:end="352:21"><name pos:start="352:9" pos:end="352:21">test5_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="353:5" pos:end="353:21"><expr pos:start="353:5" pos:end="353:20"><name pos:start="353:5" pos:end="353:6">rv</name> <operator pos:start="353:8" pos:end="353:8">=</operator> <call pos:start="353:10" pos:end="353:20"><name pos:start="353:10" pos:end="353:15">system</name><argument_list pos:start="353:16" pos:end="353:20">(<argument pos:start="353:17" pos:end="353:19"><expr pos:start="353:17" pos:end="353:19"><name pos:start="353:17" pos:end="353:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="354:5" pos:end="354:23"><expr pos:start="354:5" pos:end="354:22"><call pos:start="354:5" pos:end="354:22"><name pos:start="354:5" pos:end="354:13">CU_ASSERT</name><argument_list pos:start="354:14" pos:end="354:22">(<argument pos:start="354:15" pos:end="354:21"><expr pos:start="354:15" pos:end="354:21"><name pos:start="354:15" pos:end="354:16">rv</name> <operator pos:start="354:18" pos:end="354:19">==</operator> <literal type="number" pos:start="354:21" pos:end="354:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="357:1" pos:end="398:1"><type pos:start="357:1" pos:end="357:11"><specifier pos:start="357:1" pos:end="357:6">static</specifier> <name pos:start="357:8" pos:end="357:11">void</name></type> <name pos:start="357:13" pos:end="357:33">us894_test_sslversion</name> <parameter_list pos:start="357:35" pos:end="357:72">(<parameter pos:start="357:36" pos:end="357:54"><decl pos:start="357:36" pos:end="357:54"><type pos:start="357:36" pos:end="357:54"><specifier pos:start="357:36" pos:end="357:40">const</specifier> <name pos:start="357:42" pos:end="357:51">SSL_METHOD</name> <modifier pos:start="357:53" pos:end="357:53">*</modifier></type><name pos:start="357:54" pos:end="357:54">m</name></decl></parameter>, <parameter pos:start="357:57" pos:end="357:71"><decl pos:start="357:57" pos:end="357:71"><type pos:start="357:57" pos:end="357:71"><name pos:start="357:57" pos:end="357:59">int</name></type> <name pos:start="357:61" pos:end="357:71">expect_fail</name></decl></parameter>)</parameter_list>
<block pos:start="358:1" pos:end="398:1">{<block_content pos:start="359:5" pos:end="396:26">
    <decl_stmt pos:start="359:5" pos:end="359:14"><decl pos:start="359:5" pos:end="359:13"><type pos:start="359:5" pos:end="359:9"><name pos:start="359:5" pos:end="359:7">BIO</name> <modifier pos:start="359:9" pos:end="359:9">*</modifier></type><name pos:start="359:10" pos:end="359:13">conn</name></decl>;</decl_stmt>
    <decl_stmt pos:start="360:5" pos:end="360:13"><decl pos:start="360:5" pos:end="360:12"><type pos:start="360:5" pos:end="360:9"><name pos:start="360:5" pos:end="360:7">SSL</name> <modifier pos:start="360:9" pos:end="360:9">*</modifier></type><name pos:start="360:10" pos:end="360:12">ssl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="361:5" pos:end="361:28"><decl pos:start="361:5" pos:end="361:27"><type pos:start="361:5" pos:end="361:13"><name pos:start="361:5" pos:end="361:11">SSL_CTX</name> <modifier pos:start="361:13" pos:end="361:13">*</modifier></type><name pos:start="361:14" pos:end="361:20">ssl_ctx</name> <init pos:start="361:22" pos:end="361:27">= <expr pos:start="361:24" pos:end="361:27"><name pos:start="361:24" pos:end="361:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="362:5" pos:end="362:11"><decl pos:start="362:5" pos:end="362:10"><type pos:start="362:5" pos:end="362:7"><name pos:start="362:5" pos:end="362:7">int</name></type> <name pos:start="362:9" pos:end="362:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="364:5" pos:end="364:29"><expr pos:start="364:5" pos:end="364:28"><name pos:start="364:5" pos:end="364:11">ssl_ctx</name> <operator pos:start="364:13" pos:end="364:13">=</operator> <call pos:start="364:15" pos:end="364:28"><name pos:start="364:15" pos:end="364:25">SSL_CTX_new</name><argument_list pos:start="364:26" pos:end="364:28">(<argument pos:start="364:27" pos:end="364:27"><expr pos:start="364:27" pos:end="364:27"><name pos:start="364:27" pos:end="364:27">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="365:5" pos:end="365:31"><expr pos:start="365:5" pos:end="365:30"><call pos:start="365:5" pos:end="365:30"><name pos:start="365:5" pos:end="365:13">CU_ASSERT</name><argument_list pos:start="365:14" pos:end="365:30">(<argument pos:start="365:15" pos:end="365:29"><expr pos:start="365:15" pos:end="365:29"><name pos:start="365:15" pos:end="365:21">ssl_ctx</name> <operator pos:start="365:23" pos:end="365:24">!=</operator> <name pos:start="365:26" pos:end="365:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="367:5" pos:end="370:7">/*
     * Now that the SSL context is ready, open a socket
     * with the server and bind that socket to the context.
     */</comment>
    <expr_stmt pos:start="371:5" pos:end="371:54"><expr pos:start="371:5" pos:end="371:53"><name pos:start="371:5" pos:end="371:8">conn</name> <operator pos:start="371:10" pos:end="371:10">=</operator> <call pos:start="371:12" pos:end="371:53"><name pos:start="371:12" pos:end="371:31">open_tcp_socket_ipv4</name><argument_list pos:start="371:32" pos:end="371:53">(<argument pos:start="371:33" pos:end="371:43"><expr pos:start="371:33" pos:end="371:43"><literal type="string" pos:start="371:33" pos:end="371:43">"127.0.0.1"</literal></expr></argument>, <argument pos:start="371:46" pos:end="371:52"><expr pos:start="371:46" pos:end="371:52"><literal type="string" pos:start="371:46" pos:end="371:52">"16894"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="372:5" pos:end="372:28"><expr pos:start="372:5" pos:end="372:27"><call pos:start="372:5" pos:end="372:27"><name pos:start="372:5" pos:end="372:13">CU_ASSERT</name><argument_list pos:start="372:14" pos:end="372:27">(<argument pos:start="372:15" pos:end="372:26"><expr pos:start="372:15" pos:end="372:26"><name pos:start="372:15" pos:end="372:18">conn</name> <operator pos:start="372:20" pos:end="372:21">!=</operator> <name pos:start="372:23" pos:end="372:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="374:5" pos:end="376:7">/*
     * Create an SSL session context
     */</comment>
    <expr_stmt pos:start="377:5" pos:end="377:27"><expr pos:start="377:5" pos:end="377:26"><name pos:start="377:5" pos:end="377:7">ssl</name> <operator pos:start="377:9" pos:end="377:9">=</operator> <call pos:start="377:11" pos:end="377:26"><name pos:start="377:11" pos:end="377:17">SSL_new</name><argument_list pos:start="377:18" pos:end="377:26">(<argument pos:start="377:19" pos:end="377:25"><expr pos:start="377:19" pos:end="377:25"><name pos:start="377:19" pos:end="377:25">ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="378:5" pos:end="378:33"><expr pos:start="378:5" pos:end="378:32"><call pos:start="378:5" pos:end="378:32"><name pos:start="378:5" pos:end="378:15">SSL_set_bio</name><argument_list pos:start="378:16" pos:end="378:32">(<argument pos:start="378:17" pos:end="378:19"><expr pos:start="378:17" pos:end="378:19"><name pos:start="378:17" pos:end="378:19">ssl</name></expr></argument>, <argument pos:start="378:22" pos:end="378:25"><expr pos:start="378:22" pos:end="378:25"><name pos:start="378:22" pos:end="378:25">conn</name></expr></argument>, <argument pos:start="378:28" pos:end="378:31"><expr pos:start="378:28" pos:end="378:31"><name pos:start="378:28" pos:end="378:31">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="380:5" pos:end="383:7">/*
     * Now that we have everything ready, let's initiate the TLS
     * handshake.
     */</comment>
    <expr_stmt pos:start="384:5" pos:end="384:26"><expr pos:start="384:5" pos:end="384:25"><name pos:start="384:5" pos:end="384:6">rv</name> <operator pos:start="384:8" pos:end="384:8">=</operator> <call pos:start="384:10" pos:end="384:25"><name pos:start="384:10" pos:end="384:20">SSL_connect</name><argument_list pos:start="384:21" pos:end="384:25">(<argument pos:start="384:22" pos:end="384:24"><expr pos:start="384:22" pos:end="384:24"><name pos:start="384:22" pos:end="384:24">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="385:5" pos:end="389:5"><if pos:start="385:5" pos:end="387:5">if <condition pos:start="385:8" pos:end="385:21">(<expr pos:start="385:9" pos:end="385:20"><operator pos:start="385:9" pos:end="385:9">!</operator><name pos:start="385:10" pos:end="385:20">expect_fail</name></expr>)</condition> <block pos:start="385:23" pos:end="387:5">{<block_content pos:start="386:9" pos:end="386:26">
        <expr_stmt pos:start="386:9" pos:end="386:26"><expr pos:start="386:9" pos:end="386:25"><call pos:start="386:9" pos:end="386:25"><name pos:start="386:9" pos:end="386:17">CU_ASSERT</name><argument_list pos:start="386:18" pos:end="386:25">(<argument pos:start="386:19" pos:end="386:24"><expr pos:start="386:19" pos:end="386:24"><name pos:start="386:19" pos:end="386:20">rv</name> <operator pos:start="386:22" pos:end="386:22">&gt;</operator> <literal type="number" pos:start="386:24" pos:end="386:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="387:7" pos:end="389:5">else <block pos:start="387:12" pos:end="389:5">{<block_content pos:start="388:9" pos:end="388:27">
        <expr_stmt pos:start="388:9" pos:end="388:27"><expr pos:start="388:9" pos:end="388:26"><call pos:start="388:9" pos:end="388:26"><name pos:start="388:9" pos:end="388:17">CU_ASSERT</name><argument_list pos:start="388:18" pos:end="388:26">(<argument pos:start="388:19" pos:end="388:25"><expr pos:start="388:19" pos:end="388:25"><name pos:start="388:19" pos:end="388:20">rv</name> <operator pos:start="388:22" pos:end="388:23">&lt;=</operator> <literal type="number" pos:start="388:25" pos:end="388:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="391:5" pos:end="393:7">/*
     * Cleanup all the data
     */</comment>
    <expr_stmt pos:start="394:5" pos:end="394:22"><expr pos:start="394:5" pos:end="394:21"><call pos:start="394:5" pos:end="394:21"><name pos:start="394:5" pos:end="394:16">SSL_shutdown</name><argument_list pos:start="394:17" pos:end="394:21">(<argument pos:start="394:18" pos:end="394:20"><expr pos:start="394:18" pos:end="394:20"><name pos:start="394:18" pos:end="394:20">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="395:5" pos:end="395:18"><expr pos:start="395:5" pos:end="395:17"><call pos:start="395:5" pos:end="395:17"><name pos:start="395:5" pos:end="395:12">SSL_free</name><argument_list pos:start="395:13" pos:end="395:17">(<argument pos:start="395:14" pos:end="395:16"><expr pos:start="395:14" pos:end="395:16"><name pos:start="395:14" pos:end="395:16">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="396:5" pos:end="396:26"><expr pos:start="396:5" pos:end="396:25"><call pos:start="396:5" pos:end="396:25"><name pos:start="396:5" pos:end="396:16">SSL_CTX_free</name><argument_list pos:start="396:17" pos:end="396:25">(<argument pos:start="396:18" pos:end="396:24"><expr pos:start="396:18" pos:end="396:24"><name pos:start="396:18" pos:end="396:24">ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block" pos:start="400:1" pos:end="404:3">/*
 * This test attempts to create a SSL 3.0 connection
 * with the EST server.  This should fail, as TLS 1.0
 * is not allowed.
 */</comment>
<function pos:start="405:1" pos:end="411:1"><type pos:start="405:1" pos:end="405:11"><specifier pos:start="405:1" pos:end="405:6">static</specifier> <name pos:start="405:8" pos:end="405:11">void</name></type> <name pos:start="405:13" pos:end="405:23">us894_test6</name> <parameter_list pos:start="405:25" pos:end="405:30">(<parameter pos:start="405:26" pos:end="405:29"><decl pos:start="405:26" pos:end="405:29"><type pos:start="405:26" pos:end="405:29"><name pos:start="405:26" pos:end="405:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="406:1" pos:end="411:1">{<block_content pos:start="407:5" pos:end="410:52">
    <expr_stmt pos:start="407:5" pos:end="408:5"><expr pos:start="407:5" pos:end="407:15"><name pos:start="407:5" pos:end="407:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="410:5" pos:end="410:52"><expr pos:start="410:5" pos:end="410:51"><call pos:start="410:5" pos:end="410:51"><name pos:start="410:5" pos:end="410:25">us894_test_sslversion</name><argument_list pos:start="410:26" pos:end="410:51">(<argument pos:start="410:27" pos:end="410:47"><expr pos:start="410:27" pos:end="410:47"><call pos:start="410:27" pos:end="410:47"><name pos:start="410:27" pos:end="410:45">SSLv3_client_method</name><argument_list pos:start="410:46" pos:end="410:47">()</argument_list></call></expr></argument>, <argument pos:start="410:50" pos:end="410:50"><expr pos:start="410:50" pos:end="410:50"><literal type="number" pos:start="410:50" pos:end="410:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="413:1" pos:end="417:3">/*
 * This test attempts to create a TLS 1.0 connection
 * with the EST server.  This should fail, as TLS 1.0
 * is not allowed.
 */</comment>
<function pos:start="418:1" pos:end="424:1"><type pos:start="418:1" pos:end="418:11"><specifier pos:start="418:1" pos:end="418:6">static</specifier> <name pos:start="418:8" pos:end="418:11">void</name></type> <name pos:start="418:13" pos:end="418:23">us894_test7</name> <parameter_list pos:start="418:25" pos:end="418:30">(<parameter pos:start="418:26" pos:end="418:29"><decl pos:start="418:26" pos:end="418:29"><type pos:start="418:26" pos:end="418:29"><name pos:start="418:26" pos:end="418:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="419:1" pos:end="424:1">{<block_content pos:start="420:5" pos:end="423:52">
    <expr_stmt pos:start="420:5" pos:end="421:5"><expr pos:start="420:5" pos:end="420:15"><name pos:start="420:5" pos:end="420:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:52"><expr pos:start="423:5" pos:end="423:51"><call pos:start="423:5" pos:end="423:51"><name pos:start="423:5" pos:end="423:25">us894_test_sslversion</name><argument_list pos:start="423:26" pos:end="423:51">(<argument pos:start="423:27" pos:end="423:47"><expr pos:start="423:27" pos:end="423:47"><call pos:start="423:27" pos:end="423:47"><name pos:start="423:27" pos:end="423:45">TLSv1_client_method</name><argument_list pos:start="423:46" pos:end="423:47">()</argument_list></call></expr></argument>, <argument pos:start="423:50" pos:end="423:50"><expr pos:start="423:50" pos:end="423:50"><literal type="number" pos:start="423:50" pos:end="423:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="426:1" pos:end="429:3">/*
 * This test attempts to create a TLS 1.1 connection
 * with the EST server.  This should succeed.
 */</comment>
<function pos:start="430:1" pos:end="436:1"><type pos:start="430:1" pos:end="430:11"><specifier pos:start="430:1" pos:end="430:6">static</specifier> <name pos:start="430:8" pos:end="430:11">void</name></type> <name pos:start="430:13" pos:end="430:23">us894_test8</name> <parameter_list pos:start="430:25" pos:end="430:30">(<parameter pos:start="430:26" pos:end="430:29"><decl pos:start="430:26" pos:end="430:29"><type pos:start="430:26" pos:end="430:29"><name pos:start="430:26" pos:end="430:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="431:1" pos:end="436:1">{<block_content pos:start="432:5" pos:end="435:54">
    <expr_stmt pos:start="432:5" pos:end="433:5"><expr pos:start="432:5" pos:end="432:15"><name pos:start="432:5" pos:end="432:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:54"><expr pos:start="435:5" pos:end="435:53"><call pos:start="435:5" pos:end="435:53"><name pos:start="435:5" pos:end="435:25">us894_test_sslversion</name><argument_list pos:start="435:26" pos:end="435:53">(<argument pos:start="435:27" pos:end="435:49"><expr pos:start="435:27" pos:end="435:49"><call pos:start="435:27" pos:end="435:49"><name pos:start="435:27" pos:end="435:47">TLSv1_1_client_method</name><argument_list pos:start="435:48" pos:end="435:49">()</argument_list></call></expr></argument>, <argument pos:start="435:52" pos:end="435:52"><expr pos:start="435:52" pos:end="435:52"><literal type="number" pos:start="435:52" pos:end="435:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="438:1" pos:end="441:3">/*
 * This test attempts to create a TLS 1.2 connection
 * with the EST server.  This should succeed.
 */</comment>
<function pos:start="442:1" pos:end="448:1"><type pos:start="442:1" pos:end="442:11"><specifier pos:start="442:1" pos:end="442:6">static</specifier> <name pos:start="442:8" pos:end="442:11">void</name></type> <name pos:start="442:13" pos:end="442:23">us894_test9</name> <parameter_list pos:start="442:25" pos:end="442:30">(<parameter pos:start="442:26" pos:end="442:29"><decl pos:start="442:26" pos:end="442:29"><type pos:start="442:26" pos:end="442:29"><name pos:start="442:26" pos:end="442:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="443:1" pos:end="448:1">{<block_content pos:start="444:5" pos:end="447:54">
    <expr_stmt pos:start="444:5" pos:end="445:5"><expr pos:start="444:5" pos:end="444:15"><name pos:start="444:5" pos:end="444:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:54"><expr pos:start="447:5" pos:end="447:53"><call pos:start="447:5" pos:end="447:53"><name pos:start="447:5" pos:end="447:25">us894_test_sslversion</name><argument_list pos:start="447:26" pos:end="447:53">(<argument pos:start="447:27" pos:end="447:49"><expr pos:start="447:27" pos:end="447:49"><call pos:start="447:27" pos:end="447:49"><name pos:start="447:27" pos:end="447:47">TLSv1_2_client_method</name><argument_list pos:start="447:48" pos:end="447:49">()</argument_list></call></expr></argument>, <argument pos:start="447:52" pos:end="447:52"><expr pos:start="447:52" pos:end="447:52"><literal type="number" pos:start="447:52" pos:end="447:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="450:1" pos:end="455:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentiaiton is working.
 * The certificate used is signed by the explicit cert
 * chain. This should succeed.
 */</comment>
<function pos:start="456:1" pos:end="488:1"><type pos:start="456:1" pos:end="456:11"><specifier pos:start="456:1" pos:end="456:6">static</specifier> <name pos:start="456:8" pos:end="456:11">void</name></type> <name pos:start="456:13" pos:end="456:24">us894_test10</name> <parameter_list pos:start="456:26" pos:end="456:31">(<parameter pos:start="456:27" pos:end="456:30"><decl pos:start="456:27" pos:end="456:30"><type pos:start="456:27" pos:end="456:30"><name pos:start="456:27" pos:end="456:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="457:1" pos:end="488:1">{<block_content pos:start="458:5" pos:end="487:5">
    <decl_stmt pos:start="458:5" pos:end="458:12"><decl pos:start="458:5" pos:end="458:11"><type pos:start="458:5" pos:end="458:8"><name pos:start="458:5" pos:end="458:8">long</name></type> <name pos:start="458:10" pos:end="458:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="460:5" pos:end="461:5"><expr pos:start="460:5" pos:end="460:15"><name pos:start="460:5" pos:end="460:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:34"><expr pos:start="463:5" pos:end="463:33"><name pos:start="463:5" pos:end="463:6">rv</name> <operator pos:start="463:8" pos:end="463:8">=</operator> <call pos:start="463:10" pos:end="463:33"><name pos:start="463:10" pos:end="463:30">st_proxy_http_disable</name><argument_list pos:start="463:31" pos:end="463:33">(<argument pos:start="463:32" pos:end="463:32"><expr pos:start="463:32" pos:end="463:32"><literal type="number" pos:start="463:32" pos:end="463:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="464:5" pos:end="467:5"><if pos:start="464:5" pos:end="467:5">if <condition pos:start="464:8" pos:end="464:17">(<expr pos:start="464:9" pos:end="464:16"><name pos:start="464:9" pos:end="464:10">rv</name> <operator pos:start="464:12" pos:end="464:13">==</operator> <operator pos:start="464:15" pos:end="464:15">-</operator><literal type="number" pos:start="464:16" pos:end="464:16">1</literal></expr>)</condition> <block pos:start="464:19" pos:end="467:5">{<block_content pos:start="465:9" pos:end="466:15">
        <expr_stmt pos:start="465:9" pos:end="465:63"><expr pos:start="465:9" pos:end="465:62"><call pos:start="465:9" pos:end="465:62"><name pos:start="465:9" pos:end="465:14">printf</name><argument_list pos:start="465:15" pos:end="465:62">(<argument pos:start="465:16" pos:end="465:61"><expr pos:start="465:16" pos:end="465:61"><literal type="string" pos:start="465:16" pos:end="465:61">"Could not set HTTP authentication callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="466:9" pos:end="466:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="469:5" pos:end="469:13"><expr pos:start="469:5" pos:end="469:12"><call pos:start="469:5" pos:end="469:12"><name pos:start="469:5" pos:end="469:9">SLEEP</name><argument_list pos:start="469:10" pos:end="469:12">(<argument pos:start="469:11" pos:end="469:11"><expr pos:start="469:11" pos:end="469:11"><literal type="number" pos:start="469:11" pos:end="469:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="470:5" pos:end="476:10"><expr pos:start="470:5" pos:end="476:9"><name pos:start="470:5" pos:end="470:6">rv</name> <operator pos:start="470:8" pos:end="470:8">=</operator> <call pos:start="470:10" pos:end="476:9"><name pos:start="470:10" pos:end="470:28">curl_http_post_cert</name><argument_list pos:start="470:29" pos:end="476:9">(<argument pos:start="470:30" pos:end="470:45"><expr pos:start="470:30" pos:end="470:45"><name pos:start="470:30" pos:end="470:45">US894_ENROLL_URL</name></expr></argument>,
    <argument pos:start="471:5" pos:end="471:19"><expr pos:start="471:5" pos:end="471:19"><name pos:start="471:5" pos:end="471:19">US894_PKCS10_CT</name></expr></argument>,
    <argument pos:start="472:5" pos:end="472:20"><expr pos:start="472:5" pos:end="472:20"><name pos:start="472:5" pos:end="472:20">US894_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="473:5" pos:end="473:23"><expr pos:start="473:5" pos:end="473:23"><name pos:start="473:5" pos:end="473:23">US894_EXPLICIT_CERT</name></expr></argument>,
    <argument pos:start="474:5" pos:end="474:22"><expr pos:start="474:5" pos:end="474:22"><name pos:start="474:5" pos:end="474:22">US894_EXPLICIT_KEY</name></expr></argument>,
    <argument pos:start="475:5" pos:end="475:17"><expr pos:start="475:5" pos:end="475:17"><name pos:start="475:5" pos:end="475:17">US894_CACERTS</name></expr></argument>,
    <argument pos:start="476:5" pos:end="476:8"><expr pos:start="476:5" pos:end="476:8"><name pos:start="476:5" pos:end="476:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="477:5" pos:end="480:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="481:5" pos:end="481:25"><expr pos:start="481:5" pos:end="481:24"><call pos:start="481:5" pos:end="481:24"><name pos:start="481:5" pos:end="481:13">CU_ASSERT</name><argument_list pos:start="481:14" pos:end="481:24">(<argument pos:start="481:15" pos:end="481:23"><expr pos:start="481:15" pos:end="481:23"><name pos:start="481:15" pos:end="481:16">rv</name> <operator pos:start="481:18" pos:end="481:19">==</operator> <literal type="number" pos:start="481:21" pos:end="481:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="483:5" pos:end="483:34"><expr pos:start="483:5" pos:end="483:33"><name pos:start="483:5" pos:end="483:6">rv</name> <operator pos:start="483:8" pos:end="483:8">=</operator> <call pos:start="483:10" pos:end="483:33"><name pos:start="483:10" pos:end="483:30">st_proxy_http_disable</name><argument_list pos:start="483:31" pos:end="483:33">(<argument pos:start="483:32" pos:end="483:32"><expr pos:start="483:32" pos:end="483:32"><literal type="number" pos:start="483:32" pos:end="483:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="484:5" pos:end="487:5"><if pos:start="484:5" pos:end="487:5">if <condition pos:start="484:8" pos:end="484:17">(<expr pos:start="484:9" pos:end="484:16"><name pos:start="484:9" pos:end="484:10">rv</name> <operator pos:start="484:12" pos:end="484:13">==</operator> <operator pos:start="484:15" pos:end="484:15">-</operator><literal type="number" pos:start="484:16" pos:end="484:16">1</literal></expr>)</condition> <block pos:start="484:19" pos:end="487:5">{<block_content pos:start="485:9" pos:end="486:15">
        <expr_stmt pos:start="485:9" pos:end="485:63"><expr pos:start="485:9" pos:end="485:62"><call pos:start="485:9" pos:end="485:62"><name pos:start="485:9" pos:end="485:14">printf</name><argument_list pos:start="485:15" pos:end="485:62">(<argument pos:start="485:16" pos:end="485:61"><expr pos:start="485:16" pos:end="485:61"><literal type="string" pos:start="485:16" pos:end="485:61">"Could not set HTTP authentication callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="486:9" pos:end="486:15">return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="490:1" pos:end="495:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentication is working.
 * The certificate used is signed by the implicit cert
 * chain. This should succeed.
 */</comment>
<function pos:start="496:1" pos:end="527:1"><type pos:start="496:1" pos:end="496:11"><specifier pos:start="496:1" pos:end="496:6">static</specifier> <name pos:start="496:8" pos:end="496:11">void</name></type> <name pos:start="496:13" pos:end="496:24">us894_test11</name> <parameter_list pos:start="496:26" pos:end="496:31">(<parameter pos:start="496:27" pos:end="496:30"><decl pos:start="496:27" pos:end="496:30"><type pos:start="496:27" pos:end="496:30"><name pos:start="496:27" pos:end="496:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="497:1" pos:end="527:1">{<block_content pos:start="498:5" pos:end="526:5">
    <decl_stmt pos:start="498:5" pos:end="498:12"><decl pos:start="498:5" pos:end="498:11"><type pos:start="498:5" pos:end="498:8"><name pos:start="498:5" pos:end="498:8">long</name></type> <name pos:start="498:10" pos:end="498:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="500:5" pos:end="501:5"><expr pos:start="500:5" pos:end="500:15"><name pos:start="500:5" pos:end="500:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="503:5" pos:end="503:34"><expr pos:start="503:5" pos:end="503:33"><name pos:start="503:5" pos:end="503:6">rv</name> <operator pos:start="503:8" pos:end="503:8">=</operator> <call pos:start="503:10" pos:end="503:33"><name pos:start="503:10" pos:end="503:30">st_proxy_http_disable</name><argument_list pos:start="503:31" pos:end="503:33">(<argument pos:start="503:32" pos:end="503:32"><expr pos:start="503:32" pos:end="503:32"><literal type="number" pos:start="503:32" pos:end="503:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="504:5" pos:end="507:5"><if pos:start="504:5" pos:end="507:5">if <condition pos:start="504:8" pos:end="504:17">(<expr pos:start="504:9" pos:end="504:16"><name pos:start="504:9" pos:end="504:10">rv</name> <operator pos:start="504:12" pos:end="504:13">==</operator> <operator pos:start="504:15" pos:end="504:15">-</operator><literal type="number" pos:start="504:16" pos:end="504:16">1</literal></expr>)</condition> <block pos:start="504:19" pos:end="507:5">{<block_content pos:start="505:9" pos:end="506:15">
        <expr_stmt pos:start="505:9" pos:end="505:63"><expr pos:start="505:9" pos:end="505:62"><call pos:start="505:9" pos:end="505:62"><name pos:start="505:9" pos:end="505:14">printf</name><argument_list pos:start="505:15" pos:end="505:62">(<argument pos:start="505:16" pos:end="505:61"><expr pos:start="505:16" pos:end="505:61"><literal type="string" pos:start="505:16" pos:end="505:61">"Could not set HTTP authentication callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="506:9" pos:end="506:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="509:5" pos:end="509:13"><expr pos:start="509:5" pos:end="509:12"><call pos:start="509:5" pos:end="509:12"><name pos:start="509:5" pos:end="509:9">SLEEP</name><argument_list pos:start="509:10" pos:end="509:12">(<argument pos:start="509:11" pos:end="509:11"><expr pos:start="509:11" pos:end="509:11"><literal type="number" pos:start="509:11" pos:end="509:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="510:5" pos:end="515:25"><expr pos:start="510:5" pos:end="515:24"><name pos:start="510:5" pos:end="510:6">rv</name> <operator pos:start="510:8" pos:end="510:8">=</operator> <call pos:start="510:10" pos:end="515:24"><name pos:start="510:10" pos:end="510:28">curl_http_post_cert</name><argument_list pos:start="510:29" pos:end="515:24">(<argument pos:start="510:30" pos:end="510:45"><expr pos:start="510:30" pos:end="510:45"><name pos:start="510:30" pos:end="510:45">US894_ENROLL_URL</name></expr></argument>,
    <argument pos:start="511:5" pos:end="511:19"><expr pos:start="511:5" pos:end="511:19"><name pos:start="511:5" pos:end="511:19">US894_PKCS10_CT</name></expr></argument>,
    <argument pos:start="512:5" pos:end="512:20"><expr pos:start="512:5" pos:end="512:20"><name pos:start="512:5" pos:end="512:20">US894_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="513:5" pos:end="513:23"><expr pos:start="513:5" pos:end="513:23"><name pos:start="513:5" pos:end="513:23">US894_IMPLICIT_CERT</name></expr></argument>,
    <argument pos:start="514:5" pos:end="514:22"><expr pos:start="514:5" pos:end="514:22"><name pos:start="514:5" pos:end="514:22">US894_IMPLICIT_KEY</name></expr></argument>,
    <argument pos:start="515:5" pos:end="515:17"><expr pos:start="515:5" pos:end="515:17"><name pos:start="515:5" pos:end="515:17">US894_CACERTS</name></expr></argument>, <argument pos:start="515:20" pos:end="515:23"><expr pos:start="515:20" pos:end="515:23"><name pos:start="515:20" pos:end="515:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="516:5" pos:end="519:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="520:5" pos:end="520:25"><expr pos:start="520:5" pos:end="520:24"><call pos:start="520:5" pos:end="520:24"><name pos:start="520:5" pos:end="520:13">CU_ASSERT</name><argument_list pos:start="520:14" pos:end="520:24">(<argument pos:start="520:15" pos:end="520:23"><expr pos:start="520:15" pos:end="520:23"><name pos:start="520:15" pos:end="520:16">rv</name> <operator pos:start="520:18" pos:end="520:19">==</operator> <literal type="number" pos:start="520:21" pos:end="520:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="522:5" pos:end="522:34"><expr pos:start="522:5" pos:end="522:33"><name pos:start="522:5" pos:end="522:6">rv</name> <operator pos:start="522:8" pos:end="522:8">=</operator> <call pos:start="522:10" pos:end="522:33"><name pos:start="522:10" pos:end="522:30">st_proxy_http_disable</name><argument_list pos:start="522:31" pos:end="522:33">(<argument pos:start="522:32" pos:end="522:32"><expr pos:start="522:32" pos:end="522:32"><literal type="number" pos:start="522:32" pos:end="522:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="523:5" pos:end="526:5"><if pos:start="523:5" pos:end="526:5">if <condition pos:start="523:8" pos:end="523:17">(<expr pos:start="523:9" pos:end="523:16"><name pos:start="523:9" pos:end="523:10">rv</name> <operator pos:start="523:12" pos:end="523:13">==</operator> <operator pos:start="523:15" pos:end="523:15">-</operator><literal type="number" pos:start="523:16" pos:end="523:16">1</literal></expr>)</condition> <block pos:start="523:19" pos:end="526:5">{<block_content pos:start="524:9" pos:end="525:15">
        <expr_stmt pos:start="524:9" pos:end="524:63"><expr pos:start="524:9" pos:end="524:62"><call pos:start="524:9" pos:end="524:62"><name pos:start="524:9" pos:end="524:14">printf</name><argument_list pos:start="524:15" pos:end="524:62">(<argument pos:start="524:16" pos:end="524:61"><expr pos:start="524:16" pos:end="524:61"><literal type="string" pos:start="524:16" pos:end="524:61">"Could not set HTTP authentication callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="525:9" pos:end="525:15">return;</return>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="529:1" pos:end="533:3">/*
 * This test attempts to use a revoked client certificate to
 * verify CRL checks are working in the TLS layer.
 * This should fail.
 */</comment>
<function pos:start="534:1" pos:end="584:1"><type pos:start="534:1" pos:end="534:11"><specifier pos:start="534:1" pos:end="534:6">static</specifier> <name pos:start="534:8" pos:end="534:11">void</name></type> <name pos:start="534:13" pos:end="534:24">us894_test12</name> <parameter_list pos:start="534:26" pos:end="534:31">(<parameter pos:start="534:27" pos:end="534:30"><decl pos:start="534:27" pos:end="534:30"><type pos:start="534:27" pos:end="534:30"><name pos:start="534:27" pos:end="534:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="535:1" pos:end="584:1">{<block_content pos:start="536:5" pos:end="583:27">
    <decl_stmt pos:start="536:5" pos:end="536:12"><decl pos:start="536:5" pos:end="536:11"><type pos:start="536:5" pos:end="536:8"><name pos:start="536:5" pos:end="536:8">long</name></type> <name pos:start="536:10" pos:end="536:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="538:5" pos:end="539:5"><expr pos:start="538:5" pos:end="538:15"><name pos:start="538:5" pos:end="538:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="541:5" pos:end="541:20"><expr pos:start="541:5" pos:end="541:19"><call pos:start="541:5" pos:end="541:19"><name pos:start="541:5" pos:end="541:17">st_proxy_stop</name><argument_list pos:start="541:18" pos:end="541:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="542:5" pos:end="553:27"><expr pos:start="542:5" pos:end="553:26"><name pos:start="542:5" pos:end="542:6">rv</name> <operator pos:start="542:8" pos:end="542:8">=</operator> <call pos:start="542:10" pos:end="553:26"><name pos:start="542:10" pos:end="542:23">st_proxy_start</name><argument_list pos:start="542:24" pos:end="553:26">(<argument pos:start="542:25" pos:end="542:44"><expr pos:start="542:25" pos:end="542:44"><name pos:start="542:25" pos:end="542:44">US894_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="543:25" pos:end="543:40"><expr pos:start="543:25" pos:end="543:40"><name pos:start="543:25" pos:end="543:40">US894_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="544:25" pos:end="544:39"><expr pos:start="544:25" pos:end="544:39"><name pos:start="544:25" pos:end="544:39">US894_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="545:25" pos:end="545:34"><expr pos:start="545:25" pos:end="545:34"><literal type="string" pos:start="545:25" pos:end="545:34">"estrealm"</literal></expr></argument>,
                        <argument pos:start="546:25" pos:end="546:36"><expr pos:start="546:25" pos:end="546:36"><name pos:start="546:25" pos:end="546:36">US894_CACERT</name></expr></argument>,
                        <argument pos:start="547:25" pos:end="547:50"><expr pos:start="547:25" pos:end="547:50"><name pos:start="547:25" pos:end="547:50">US894_TRUSTED_CERT_AND_CRL</name></expr></argument>,
                        <argument pos:start="548:25" pos:end="548:33"><expr pos:start="548:25" pos:end="548:33"><literal type="string" pos:start="548:25" pos:end="548:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="549:25" pos:end="549:32"><expr pos:start="549:25" pos:end="549:32"><literal type="string" pos:start="549:25" pos:end="549:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="550:25" pos:end="550:35"><expr pos:start="550:25" pos:end="550:35"><literal type="string" pos:start="550:25" pos:end="550:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="551:25" pos:end="551:45"><expr pos:start="551:25" pos:end="551:45"><name pos:start="551:25" pos:end="551:45">US894_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="552:25" pos:end="552:25"><expr pos:start="552:25" pos:end="552:25"><literal type="number" pos:start="552:25" pos:end="552:25">0</literal></expr></argument>,  <comment type="line" pos:start="552:29" pos:end="552:42">// disable PoP</comment>
                        <argument pos:start="553:25" pos:end="553:25"><expr pos:start="553:25" pos:end="553:25"><literal type="number" pos:start="553:25" pos:end="553:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="553:30" pos:end="553:46">// ecdhe nid info</comment>

    <expr_stmt pos:start="555:5" pos:end="555:13"><expr pos:start="555:5" pos:end="555:12"><call pos:start="555:5" pos:end="555:12"><name pos:start="555:5" pos:end="555:9">SLEEP</name><argument_list pos:start="555:10" pos:end="555:12">(<argument pos:start="555:11" pos:end="555:11"><expr pos:start="555:11" pos:end="555:11"><literal type="number" pos:start="555:11" pos:end="555:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="556:5" pos:end="562:10"><expr pos:start="556:5" pos:end="562:9"><name pos:start="556:5" pos:end="556:6">rv</name> <operator pos:start="556:8" pos:end="556:8">=</operator> <call pos:start="556:10" pos:end="562:9"><name pos:start="556:10" pos:end="556:28">curl_http_post_cert</name><argument_list pos:start="556:29" pos:end="562:9">(<argument pos:start="556:30" pos:end="556:45"><expr pos:start="556:30" pos:end="556:45"><name pos:start="556:30" pos:end="556:45">US894_ENROLL_URL</name></expr></argument>,
    <argument pos:start="557:5" pos:end="557:19"><expr pos:start="557:5" pos:end="557:19"><name pos:start="557:5" pos:end="557:19">US894_PKCS10_CT</name></expr></argument>,
    <argument pos:start="558:5" pos:end="558:20"><expr pos:start="558:5" pos:end="558:20"><name pos:start="558:5" pos:end="558:20">US894_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="559:5" pos:end="559:22"><expr pos:start="559:5" pos:end="559:22"><name pos:start="559:5" pos:end="559:22">US894_REVOKED_CERT</name></expr></argument>,
    <argument pos:start="560:5" pos:end="560:21"><expr pos:start="560:5" pos:end="560:21"><name pos:start="560:5" pos:end="560:21">US894_REVOKED_KEY</name></expr></argument>,
    <argument pos:start="561:5" pos:end="561:17"><expr pos:start="561:5" pos:end="561:17"><name pos:start="561:5" pos:end="561:17">US894_CACERTS</name></expr></argument>,
    <argument pos:start="562:5" pos:end="562:8"><expr pos:start="562:5" pos:end="562:8"><name pos:start="562:5" pos:end="562:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block" pos:start="565:5" pos:end="568:7">/*
     * Since the client cert has been revoked the TLS handshake
     * will fail.  The EST server should return a 401 response.
     */</comment>
    <expr_stmt pos:start="569:5" pos:end="569:23"><expr pos:start="569:5" pos:end="569:22"><call pos:start="569:5" pos:end="569:22"><name pos:start="569:5" pos:end="569:13">CU_ASSERT</name><argument_list pos:start="569:14" pos:end="569:22">(<argument pos:start="569:15" pos:end="569:21"><expr pos:start="569:15" pos:end="569:21"><name pos:start="569:15" pos:end="569:16">rv</name> <operator pos:start="569:18" pos:end="569:19">==</operator> <literal type="number" pos:start="569:21" pos:end="569:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="571:5" pos:end="571:20"><expr pos:start="571:5" pos:end="571:19"><call pos:start="571:5" pos:end="571:19"><name pos:start="571:5" pos:end="571:17">st_proxy_stop</name><argument_list pos:start="571:18" pos:end="571:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="572:5" pos:end="583:27"><expr pos:start="572:5" pos:end="583:26"><name pos:start="572:5" pos:end="572:6">rv</name> <operator pos:start="572:8" pos:end="572:8">=</operator> <call pos:start="572:10" pos:end="583:26"><name pos:start="572:10" pos:end="572:23">st_proxy_start</name><argument_list pos:start="572:24" pos:end="583:26">(<argument pos:start="572:25" pos:end="572:44"><expr pos:start="572:25" pos:end="572:44"><name pos:start="572:25" pos:end="572:44">US894_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="573:25" pos:end="573:40"><expr pos:start="573:25" pos:end="573:40"><name pos:start="573:25" pos:end="573:40">US894_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="574:25" pos:end="574:39"><expr pos:start="574:25" pos:end="574:39"><name pos:start="574:25" pos:end="574:39">US894_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="575:25" pos:end="575:34"><expr pos:start="575:25" pos:end="575:34"><literal type="string" pos:start="575:25" pos:end="575:34">"estrealm"</literal></expr></argument>,
                        <argument pos:start="576:25" pos:end="576:36"><expr pos:start="576:25" pos:end="576:36"><name pos:start="576:25" pos:end="576:36">US894_CACERT</name></expr></argument>,
                        <argument pos:start="577:25" pos:end="577:42"><expr pos:start="577:25" pos:end="577:42"><name pos:start="577:25" pos:end="577:42">US894_TRUSTED_CERT</name></expr></argument>,
                        <argument pos:start="578:25" pos:end="578:33"><expr pos:start="578:25" pos:end="578:33"><literal type="string" pos:start="578:25" pos:end="578:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="579:25" pos:end="579:32"><expr pos:start="579:25" pos:end="579:32"><literal type="string" pos:start="579:25" pos:end="579:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="580:25" pos:end="580:35"><expr pos:start="580:25" pos:end="580:35"><literal type="string" pos:start="580:25" pos:end="580:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="581:25" pos:end="581:45"><expr pos:start="581:25" pos:end="581:45"><name pos:start="581:25" pos:end="581:45">US894_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="582:25" pos:end="582:25"><expr pos:start="582:25" pos:end="582:25"><literal type="number" pos:start="582:25" pos:end="582:25">0</literal></expr></argument>,  <comment type="line" pos:start="582:29" pos:end="582:42">// disable PoP</comment>
                        <argument pos:start="583:25" pos:end="583:25"><expr pos:start="583:25" pos:end="583:25"><literal type="number" pos:start="583:25" pos:end="583:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="583:30" pos:end="583:46">// ecdhe nid info</comment>
</block_content>}</block></function>

<comment type="block" pos:start="586:1" pos:end="590:3">/*
 * This test attempts to use a self-signed client certificate to
 * verify cert chain will reject a cert that has not been
 * signed by a valid CA.  This should fail.
 */</comment>
<function pos:start="591:1" pos:end="613:1"><type pos:start="591:1" pos:end="591:11"><specifier pos:start="591:1" pos:end="591:6">static</specifier> <name pos:start="591:8" pos:end="591:11">void</name></type> <name pos:start="591:13" pos:end="591:24">us894_test13</name> <parameter_list pos:start="591:26" pos:end="591:31">(<parameter pos:start="591:27" pos:end="591:30"><decl pos:start="591:27" pos:end="591:30"><type pos:start="591:27" pos:end="591:30"><name pos:start="591:27" pos:end="591:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="592:1" pos:end="613:1">{<block_content pos:start="593:5" pos:end="612:23">
    <decl_stmt pos:start="593:5" pos:end="593:12"><decl pos:start="593:5" pos:end="593:11"><type pos:start="593:5" pos:end="593:8"><name pos:start="593:5" pos:end="593:8">long</name></type> <name pos:start="593:10" pos:end="593:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="595:5" pos:end="596:5"><expr pos:start="595:5" pos:end="595:15"><name pos:start="595:5" pos:end="595:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="598:5" pos:end="598:13"><expr pos:start="598:5" pos:end="598:12"><call pos:start="598:5" pos:end="598:12"><name pos:start="598:5" pos:end="598:9">SLEEP</name><argument_list pos:start="598:10" pos:end="598:12">(<argument pos:start="598:11" pos:end="598:11"><expr pos:start="598:11" pos:end="598:11"><literal type="number" pos:start="598:11" pos:end="598:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="599:5" pos:end="604:25"><expr pos:start="599:5" pos:end="604:24"><name pos:start="599:5" pos:end="599:6">rv</name> <operator pos:start="599:8" pos:end="599:8">=</operator> <call pos:start="599:10" pos:end="604:24"><name pos:start="599:10" pos:end="599:28">curl_http_post_cert</name><argument_list pos:start="599:29" pos:end="604:24">(<argument pos:start="599:30" pos:end="599:45"><expr pos:start="599:30" pos:end="599:45"><name pos:start="599:30" pos:end="599:45">US894_ENROLL_URL</name></expr></argument>,
    <argument pos:start="600:5" pos:end="600:19"><expr pos:start="600:5" pos:end="600:19"><name pos:start="600:5" pos:end="600:19">US894_PKCS10_CT</name></expr></argument>,
    <argument pos:start="601:5" pos:end="601:20"><expr pos:start="601:5" pos:end="601:20"><name pos:start="601:5" pos:end="601:20">US894_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="602:5" pos:end="602:23"><expr pos:start="602:5" pos:end="602:23"><name pos:start="602:5" pos:end="602:23">US894_SELFSIGN_CERT</name></expr></argument>,
    <argument pos:start="603:5" pos:end="603:22"><expr pos:start="603:5" pos:end="603:22"><name pos:start="603:5" pos:end="603:22">US894_SELFSIGN_KEY</name></expr></argument>,
    <argument pos:start="604:5" pos:end="604:17"><expr pos:start="604:5" pos:end="604:17"><name pos:start="604:5" pos:end="604:17">US894_CACERTS</name></expr></argument>, <argument pos:start="604:20" pos:end="604:23"><expr pos:start="604:20" pos:end="604:23"><name pos:start="604:20" pos:end="604:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="606:5" pos:end="611:7">/*
     * Since the client cert is not signed by either the local CA
     * or external CA, the TLS handshake will fail.
     * We will not receive an HTTP status message
     * from the server.
     */</comment>
    <expr_stmt pos:start="612:5" pos:end="612:23"><expr pos:start="612:5" pos:end="612:22"><call pos:start="612:5" pos:end="612:22"><name pos:start="612:5" pos:end="612:13">CU_ASSERT</name><argument_list pos:start="612:14" pos:end="612:22">(<argument pos:start="612:15" pos:end="612:21"><expr pos:start="612:15" pos:end="612:21"><name pos:start="612:15" pos:end="612:16">rv</name> <operator pos:start="612:18" pos:end="612:19">==</operator> <literal type="number" pos:start="612:21" pos:end="612:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="615:1" pos:end="623:3">/*
 * TLS anonymous cipher suites disabled
 *
 * This test case uses libcurl to test that the
 * EST server will not accept anonymous cipher
 * suites from the client.  We only test a single
 * cipher suite here.  This attempts to do a
 * simple enroll with the server.
 */</comment>
<function pos:start="624:1" pos:end="639:1"><type pos:start="624:1" pos:end="624:11"><specifier pos:start="624:1" pos:end="624:6">static</specifier> <name pos:start="624:8" pos:end="624:11">void</name></type> <name pos:start="624:13" pos:end="624:24">us894_test14</name> <parameter_list pos:start="624:26" pos:end="624:31">(<parameter pos:start="624:27" pos:end="624:30"><decl pos:start="624:27" pos:end="624:30"><type pos:start="624:27" pos:end="624:30"><name pos:start="624:27" pos:end="624:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="625:1" pos:end="639:1">{<block_content pos:start="626:5" pos:end="638:23">
    <decl_stmt pos:start="626:5" pos:end="626:12"><decl pos:start="626:5" pos:end="626:11"><type pos:start="626:5" pos:end="626:8"><name pos:start="626:5" pos:end="626:8">long</name></type> <name pos:start="626:10" pos:end="626:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="628:5" pos:end="629:5"><expr pos:start="628:5" pos:end="628:15"><name pos:start="628:5" pos:end="628:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="631:5" pos:end="631:13"><expr pos:start="631:5" pos:end="631:12"><call pos:start="631:5" pos:end="631:12"><name pos:start="631:5" pos:end="631:9">SLEEP</name><argument_list pos:start="631:10" pos:end="631:12">(<argument pos:start="631:11" pos:end="631:11"><expr pos:start="631:11" pos:end="631:11"><literal type="number" pos:start="631:11" pos:end="631:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="632:5" pos:end="634:57"><expr pos:start="632:5" pos:end="634:56"><name pos:start="632:5" pos:end="632:6">rv</name> <operator pos:start="632:8" pos:end="632:8">=</operator> <call pos:start="632:10" pos:end="634:56"><name pos:start="632:10" pos:end="632:23">curl_http_post</name><argument_list pos:start="632:24" pos:end="634:56">(<argument pos:start="632:25" pos:end="632:40"><expr pos:start="632:25" pos:end="632:40"><name pos:start="632:25" pos:end="632:40">US894_ENROLL_URL</name></expr></argument>, <argument pos:start="632:43" pos:end="632:57"><expr pos:start="632:43" pos:end="632:57"><name pos:start="632:43" pos:end="632:57">US894_PKCS10_CT</name></expr></argument>, <argument pos:start="632:60" pos:end="632:75"><expr pos:start="632:60" pos:end="632:75"><name pos:start="632:60" pos:end="632:75">US894_PKCS10_REQ</name></expr></argument>,
                        <argument pos:start="633:25" pos:end="633:41"><expr pos:start="633:25" pos:end="633:41"><name pos:start="633:25" pos:end="633:41">US894_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="633:44" pos:end="633:56"><expr pos:start="633:44" pos:end="633:56"><name pos:start="633:44" pos:end="633:56">US894_CACERTS</name></expr></argument>, <argument pos:start="633:59" pos:end="633:72"><expr pos:start="633:59" pos:end="633:72"><name pos:start="633:59" pos:end="633:72">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="634:25" pos:end="634:43"><expr pos:start="634:25" pos:end="634:43"><literal type="string" pos:start="634:25" pos:end="634:43">"ADH-AES128-SHA256"</literal></expr></argument>, <argument pos:start="634:46" pos:end="634:49"><expr pos:start="634:46" pos:end="634:49"><name pos:start="634:46" pos:end="634:49">NULL</name></expr></argument>, <argument pos:start="634:52" pos:end="634:55"><expr pos:start="634:52" pos:end="634:55"><name pos:start="634:52" pos:end="634:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="635:5" pos:end="637:7">/*
     * TLS handshake should have failed, curl should return 0
     */</comment>
    <expr_stmt pos:start="638:5" pos:end="638:23"><expr pos:start="638:5" pos:end="638:22"><call pos:start="638:5" pos:end="638:22"><name pos:start="638:5" pos:end="638:13">CU_ASSERT</name><argument_list pos:start="638:14" pos:end="638:22">(<argument pos:start="638:15" pos:end="638:21"><expr pos:start="638:15" pos:end="638:21"><name pos:start="638:15" pos:end="638:16">rv</name> <operator pos:start="638:18" pos:end="638:19">==</operator> <literal type="number" pos:start="638:21" pos:end="638:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="641:1" pos:end="643:3">/*
 * Null HTTP realm when initializing server
 */</comment>
<function pos:start="644:1" pos:end="702:1"><type pos:start="644:1" pos:end="644:11"><specifier pos:start="644:1" pos:end="644:6">static</specifier> <name pos:start="644:8" pos:end="644:11">void</name></type> <name pos:start="644:13" pos:end="644:24">us894_test15</name> <parameter_list pos:start="644:26" pos:end="644:31">(<parameter pos:start="644:27" pos:end="644:30"><decl pos:start="644:27" pos:end="644:30"><type pos:start="644:27" pos:end="644:30"><name pos:start="644:27" pos:end="644:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="645:1" pos:end="702:1">{<block_content pos:start="646:5" pos:end="701:28">
    <decl_stmt pos:start="646:5" pos:end="646:34"><decl pos:start="646:5" pos:end="646:33"><type pos:start="646:5" pos:end="646:19"><name pos:start="646:5" pos:end="646:12">unsigned</name> <name pos:start="646:14" pos:end="646:17">char</name> <modifier pos:start="646:19" pos:end="646:19">*</modifier></type><name pos:start="646:20" pos:end="646:26">cacerts</name> <init pos:start="646:28" pos:end="646:33">= <expr pos:start="646:30" pos:end="646:33"><name pos:start="646:30" pos:end="646:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="647:5" pos:end="647:24"><decl pos:start="647:5" pos:end="647:23"><type pos:start="647:5" pos:end="647:7"><name pos:start="647:5" pos:end="647:7">int</name></type> <name pos:start="647:9" pos:end="647:19">cacerts_len</name> <init pos:start="647:21" pos:end="647:23">= <expr pos:start="647:23" pos:end="647:23"><literal type="number" pos:start="647:23" pos:end="647:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="648:5" pos:end="648:24"><decl pos:start="648:5" pos:end="648:15"><type pos:start="648:5" pos:end="648:9"><name pos:start="648:5" pos:end="648:7">BIO</name> <modifier pos:start="648:9" pos:end="648:9">*</modifier></type><name pos:start="648:10" pos:end="648:15">certin</name></decl>, <decl pos:start="648:18" pos:end="648:23"><type ref="prev" pos:start="648:5" pos:end="648:9"><modifier pos:start="648:18" pos:end="648:18">*</modifier></type><name pos:start="648:19" pos:end="648:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="649:5" pos:end="649:12"><decl pos:start="649:5" pos:end="649:11"><type pos:start="649:5" pos:end="649:10"><name pos:start="649:5" pos:end="649:8">X509</name> <modifier pos:start="649:10" pos:end="649:10">*</modifier></type><name pos:start="649:11" pos:end="649:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="650:5" pos:end="650:24"><decl pos:start="650:5" pos:end="650:23"><type pos:start="650:5" pos:end="650:14"><name pos:start="650:5" pos:end="650:12">EVP_PKEY</name> <modifier pos:start="650:14" pos:end="650:14">*</modifier></type> <name pos:start="650:16" pos:end="650:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="651:5" pos:end="651:11"><decl pos:start="651:5" pos:end="651:10"><type pos:start="651:5" pos:end="651:7"><name pos:start="651:5" pos:end="651:7">int</name></type> <name pos:start="651:9" pos:end="651:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="652:5" pos:end="652:17"><decl pos:start="652:5" pos:end="652:16"><type pos:start="652:5" pos:end="652:13"><name pos:start="652:5" pos:end="652:11">EST_CTX</name> <modifier pos:start="652:13" pos:end="652:13">*</modifier></type><name pos:start="652:14" pos:end="652:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="654:5" pos:end="655:5"><expr pos:start="654:5" pos:end="654:15"><name pos:start="654:5" pos:end="654:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="657:5" pos:end="659:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="660:5" pos:end="660:59"><expr pos:start="660:5" pos:end="660:58"><name pos:start="660:5" pos:end="660:15">cacerts_len</name> <operator pos:start="660:17" pos:end="660:17">=</operator> <call pos:start="660:19" pos:end="660:58"><name pos:start="660:19" pos:end="660:34">read_binary_file</name><argument_list pos:start="660:35" pos:end="660:58">(<argument pos:start="660:36" pos:end="660:47"><expr pos:start="660:36" pos:end="660:47"><name pos:start="660:36" pos:end="660:47">US894_CACERT</name></expr></argument>, <argument pos:start="660:50" pos:end="660:57"><expr pos:start="660:50" pos:end="660:57"><operator pos:start="660:50" pos:end="660:50">&amp;</operator><name pos:start="660:51" pos:end="660:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="661:5" pos:end="661:31"><expr pos:start="661:5" pos:end="661:30"><call pos:start="661:5" pos:end="661:30"><name pos:start="661:5" pos:end="661:13">CU_ASSERT</name><argument_list pos:start="661:14" pos:end="661:30">(<argument pos:start="661:15" pos:end="661:29"><expr pos:start="661:15" pos:end="661:29"><name pos:start="661:15" pos:end="661:25">cacerts_len</name> <operator pos:start="661:27" pos:end="661:27">&gt;</operator> <literal type="number" pos:start="661:29" pos:end="661:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="663:5" pos:end="665:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="666:5" pos:end="666:44"><expr pos:start="666:5" pos:end="666:43"><name pos:start="666:5" pos:end="666:10">certin</name> <operator pos:start="666:12" pos:end="666:12">=</operator> <call pos:start="666:14" pos:end="666:43"><name pos:start="666:14" pos:end="666:20">BIO_new</name><argument_list pos:start="666:21" pos:end="666:43">(<argument pos:start="666:22" pos:end="666:42"><expr pos:start="666:22" pos:end="666:42"><call pos:start="666:22" pos:end="666:42"><name pos:start="666:22" pos:end="666:40">BIO_s_file_internal</name><argument_list pos:start="666:41" pos:end="666:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="667:5" pos:end="667:54"><expr pos:start="667:5" pos:end="667:53"><name pos:start="667:5" pos:end="667:6">rv</name> <operator pos:start="667:8" pos:end="667:8">=</operator> <call pos:start="667:10" pos:end="667:53"><name pos:start="667:10" pos:end="667:26">BIO_read_filename</name><argument_list pos:start="667:27" pos:end="667:53">(<argument pos:start="667:28" pos:end="667:33"><expr pos:start="667:28" pos:end="667:33"><name pos:start="667:28" pos:end="667:33">certin</name></expr></argument>, <argument pos:start="667:36" pos:end="667:52"><expr pos:start="667:36" pos:end="667:52"><name pos:start="667:36" pos:end="667:52">US894_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="668:5" pos:end="668:22"><expr pos:start="668:5" pos:end="668:21"><call pos:start="668:5" pos:end="668:21"><name pos:start="668:5" pos:end="668:13">CU_ASSERT</name><argument_list pos:start="668:14" pos:end="668:21">(<argument pos:start="668:15" pos:end="668:20"><expr pos:start="668:15" pos:end="668:20"><name pos:start="668:15" pos:end="668:16">rv</name> <operator pos:start="668:18" pos:end="668:18">&gt;</operator> <literal type="number" pos:start="668:20" pos:end="668:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="669:5" pos:end="669:52"><expr pos:start="669:5" pos:end="669:51"><name pos:start="669:5" pos:end="669:5">x</name> <operator pos:start="669:7" pos:end="669:7">=</operator> <call pos:start="669:9" pos:end="669:51"><name pos:start="669:9" pos:end="669:25">PEM_read_bio_X509</name><argument_list pos:start="669:26" pos:end="669:51">(<argument pos:start="669:27" pos:end="669:32"><expr pos:start="669:27" pos:end="669:32"><name pos:start="669:27" pos:end="669:32">certin</name></expr></argument>, <argument pos:start="669:35" pos:end="669:38"><expr pos:start="669:35" pos:end="669:38"><name pos:start="669:35" pos:end="669:38">NULL</name></expr></argument>, <argument pos:start="669:41" pos:end="669:44"><expr pos:start="669:41" pos:end="669:44"><name pos:start="669:41" pos:end="669:44">NULL</name></expr></argument>, <argument pos:start="669:47" pos:end="669:50"><expr pos:start="669:47" pos:end="669:50"><name pos:start="669:47" pos:end="669:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="670:5" pos:end="670:25"><expr pos:start="670:5" pos:end="670:24"><call pos:start="670:5" pos:end="670:24"><name pos:start="670:5" pos:end="670:13">CU_ASSERT</name><argument_list pos:start="670:14" pos:end="670:24">(<argument pos:start="670:15" pos:end="670:23"><expr pos:start="670:15" pos:end="670:23"><name pos:start="670:15" pos:end="670:15">x</name> <operator pos:start="670:17" pos:end="670:18">!=</operator> <name pos:start="670:20" pos:end="670:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="671:5" pos:end="671:21"><expr pos:start="671:5" pos:end="671:20"><call pos:start="671:5" pos:end="671:20"><name pos:start="671:5" pos:end="671:12">BIO_free</name><argument_list pos:start="671:13" pos:end="671:20">(<argument pos:start="671:14" pos:end="671:19"><expr pos:start="671:14" pos:end="671:19"><name pos:start="671:14" pos:end="671:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="673:5" pos:end="675:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="676:5" pos:end="676:43"><expr pos:start="676:5" pos:end="676:42"><name pos:start="676:5" pos:end="676:9">keyin</name> <operator pos:start="676:11" pos:end="676:11">=</operator> <call pos:start="676:13" pos:end="676:42"><name pos:start="676:13" pos:end="676:19">BIO_new</name><argument_list pos:start="676:20" pos:end="676:42">(<argument pos:start="676:21" pos:end="676:41"><expr pos:start="676:21" pos:end="676:41"><call pos:start="676:21" pos:end="676:41"><name pos:start="676:21" pos:end="676:39">BIO_s_file_internal</name><argument_list pos:start="676:40" pos:end="676:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="677:5" pos:end="677:52"><expr pos:start="677:5" pos:end="677:51"><name pos:start="677:5" pos:end="677:6">rv</name> <operator pos:start="677:8" pos:end="677:8">=</operator> <call pos:start="677:10" pos:end="677:51"><name pos:start="677:10" pos:end="677:26">BIO_read_filename</name><argument_list pos:start="677:27" pos:end="677:51">(<argument pos:start="677:28" pos:end="677:32"><expr pos:start="677:28" pos:end="677:32"><name pos:start="677:28" pos:end="677:32">keyin</name></expr></argument>, <argument pos:start="677:35" pos:end="677:50"><expr pos:start="677:35" pos:end="677:50"><name pos:start="677:35" pos:end="677:50">US894_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="678:5" pos:end="678:22"><expr pos:start="678:5" pos:end="678:21"><call pos:start="678:5" pos:end="678:21"><name pos:start="678:5" pos:end="678:13">CU_ASSERT</name><argument_list pos:start="678:14" pos:end="678:21">(<argument pos:start="678:15" pos:end="678:20"><expr pos:start="678:15" pos:end="678:20"><name pos:start="678:15" pos:end="678:16">rv</name> <operator pos:start="678:18" pos:end="678:18">&gt;</operator> <literal type="number" pos:start="678:20" pos:end="678:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="679:5" pos:end="679:64"><expr pos:start="679:5" pos:end="679:63"><name pos:start="679:5" pos:end="679:12">priv_key</name> <operator pos:start="679:14" pos:end="679:14">=</operator> <call pos:start="679:16" pos:end="679:63"><name pos:start="679:16" pos:end="679:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="679:39" pos:end="679:63">(<argument pos:start="679:40" pos:end="679:44"><expr pos:start="679:40" pos:end="679:44"><name pos:start="679:40" pos:end="679:44">keyin</name></expr></argument>, <argument pos:start="679:47" pos:end="679:50"><expr pos:start="679:47" pos:end="679:50"><name pos:start="679:47" pos:end="679:50">NULL</name></expr></argument>, <argument pos:start="679:53" pos:end="679:56"><expr pos:start="679:53" pos:end="679:56"><name pos:start="679:53" pos:end="679:56">NULL</name></expr></argument>, <argument pos:start="679:59" pos:end="679:62"><expr pos:start="679:59" pos:end="679:62"><name pos:start="679:59" pos:end="679:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="680:5" pos:end="680:32"><expr pos:start="680:5" pos:end="680:31"><call pos:start="680:5" pos:end="680:31"><name pos:start="680:5" pos:end="680:13">CU_ASSERT</name><argument_list pos:start="680:14" pos:end="680:31">(<argument pos:start="680:15" pos:end="680:30"><expr pos:start="680:15" pos:end="680:30"><name pos:start="680:15" pos:end="680:22">priv_key</name> <operator pos:start="680:24" pos:end="680:25">!=</operator> <name pos:start="680:27" pos:end="680:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="681:5" pos:end="681:20"><expr pos:start="681:5" pos:end="681:19"><call pos:start="681:5" pos:end="681:19"><name pos:start="681:5" pos:end="681:12">BIO_free</name><argument_list pos:start="681:13" pos:end="681:19">(<argument pos:start="681:14" pos:end="681:18"><expr pos:start="681:14" pos:end="681:18"><name pos:start="681:14" pos:end="681:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="683:5" pos:end="685:7">/*
     * Attempt to init EST server using NULL realm
     */</comment>
    <expr_stmt pos:start="686:5" pos:end="686:44"><expr pos:start="686:5" pos:end="686:43"><call pos:start="686:5" pos:end="686:43"><name pos:start="686:5" pos:end="686:19">est_init_logger</name><argument_list pos:start="686:20" pos:end="686:43">(<argument pos:start="686:21" pos:end="686:36"><expr pos:start="686:21" pos:end="686:36"><name pos:start="686:21" pos:end="686:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="686:39" pos:end="686:42"><expr pos:start="686:39" pos:end="686:42"><name pos:start="686:39" pos:end="686:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="687:5" pos:end="696:35"><expr pos:start="687:5" pos:end="696:34"><name pos:start="687:5" pos:end="687:7">ctx</name> <operator pos:start="687:9" pos:end="687:9">=</operator> <call pos:start="687:11" pos:end="696:34"><name pos:start="687:11" pos:end="687:24">est_proxy_init</name><argument_list pos:start="687:25" pos:end="696:34">(<argument pos:start="687:26" pos:end="687:32"><expr pos:start="687:26" pos:end="687:32"><name pos:start="687:26" pos:end="687:32">cacerts</name></expr></argument>,
                         <argument pos:start="688:26" pos:end="688:36"><expr pos:start="688:26" pos:end="688:36"><name pos:start="688:26" pos:end="688:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="689:26" pos:end="689:32"><expr pos:start="689:26" pos:end="689:32"><name pos:start="689:26" pos:end="689:32">cacerts</name></expr></argument>,
                         <argument pos:start="690:26" pos:end="690:36"><expr pos:start="690:26" pos:end="690:36"><name pos:start="690:26" pos:end="690:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="691:26" pos:end="691:44"><expr pos:start="691:26" pos:end="691:44"><name pos:start="691:26" pos:end="691:44">EST_CERT_FORMAT_PEM</name></expr></argument>,
                         <argument pos:start="692:26" pos:end="692:29"><expr pos:start="692:26" pos:end="692:29"><name pos:start="692:26" pos:end="692:29">NULL</name></expr></argument>,
                         <argument pos:start="693:26" pos:end="693:26"><expr pos:start="693:26" pos:end="693:26"><name pos:start="693:26" pos:end="693:26">x</name></expr></argument>,
                         <argument pos:start="694:26" pos:end="694:33"><expr pos:start="694:26" pos:end="694:33"><name pos:start="694:26" pos:end="694:33">priv_key</name></expr></argument>,
                         <argument pos:start="695:26" pos:end="695:34"><expr pos:start="695:26" pos:end="695:34"><literal type="string" pos:start="695:26" pos:end="695:34">"estuser"</literal></expr></argument>,
                         <argument pos:start="696:26" pos:end="696:33"><expr pos:start="696:26" pos:end="696:33"><literal type="string" pos:start="696:26" pos:end="696:33">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="698:5" pos:end="698:27"><expr pos:start="698:5" pos:end="698:26"><call pos:start="698:5" pos:end="698:26"><name pos:start="698:5" pos:end="698:13">CU_ASSERT</name><argument_list pos:start="698:14" pos:end="698:26">(<argument pos:start="698:15" pos:end="698:25"><expr pos:start="698:15" pos:end="698:25"><name pos:start="698:15" pos:end="698:17">ctx</name> <operator pos:start="698:19" pos:end="698:20">==</operator> <name pos:start="698:22" pos:end="698:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="700:5" pos:end="700:17"><expr pos:start="700:5" pos:end="700:16"><call pos:start="700:5" pos:end="700:16"><name pos:start="700:5" pos:end="700:13">X509_free</name><argument_list pos:start="700:14" pos:end="700:16">(<argument pos:start="700:15" pos:end="700:15"><expr pos:start="700:15" pos:end="700:15"><name pos:start="700:15" pos:end="700:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="701:5" pos:end="701:28"><expr pos:start="701:5" pos:end="701:27"><call pos:start="701:5" pos:end="701:27"><name pos:start="701:5" pos:end="701:17">EVP_PKEY_free</name><argument_list pos:start="701:18" pos:end="701:27">(<argument pos:start="701:19" pos:end="701:26"><expr pos:start="701:19" pos:end="701:26"><name pos:start="701:19" pos:end="701:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="704:1" pos:end="706:3">/*
 * Null Server certificate when initializing server
 */</comment>
<function pos:start="707:1" pos:end="752:1"><type pos:start="707:1" pos:end="707:11"><specifier pos:start="707:1" pos:end="707:6">static</specifier> <name pos:start="707:8" pos:end="707:11">void</name></type> <name pos:start="707:13" pos:end="707:24">us894_test16</name> <parameter_list pos:start="707:26" pos:end="707:31">(<parameter pos:start="707:27" pos:end="707:30"><decl pos:start="707:27" pos:end="707:30"><type pos:start="707:27" pos:end="707:30"><name pos:start="707:27" pos:end="707:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="708:1" pos:end="752:1">{<block_content pos:start="709:5" pos:end="751:28">
    <decl_stmt pos:start="709:5" pos:end="709:34"><decl pos:start="709:5" pos:end="709:33"><type pos:start="709:5" pos:end="709:19"><name pos:start="709:5" pos:end="709:12">unsigned</name> <name pos:start="709:14" pos:end="709:17">char</name> <modifier pos:start="709:19" pos:end="709:19">*</modifier></type><name pos:start="709:20" pos:end="709:26">cacerts</name> <init pos:start="709:28" pos:end="709:33">= <expr pos:start="709:30" pos:end="709:33"><name pos:start="709:30" pos:end="709:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="710:5" pos:end="710:24"><decl pos:start="710:5" pos:end="710:23"><type pos:start="710:5" pos:end="710:7"><name pos:start="710:5" pos:end="710:7">int</name></type> <name pos:start="710:9" pos:end="710:19">cacerts_len</name> <init pos:start="710:21" pos:end="710:23">= <expr pos:start="710:23" pos:end="710:23"><literal type="number" pos:start="710:23" pos:end="710:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="711:5" pos:end="711:15"><decl pos:start="711:5" pos:end="711:14"><type pos:start="711:5" pos:end="711:9"><name pos:start="711:5" pos:end="711:7">BIO</name> <modifier pos:start="711:9" pos:end="711:9">*</modifier></type><name pos:start="711:10" pos:end="711:14">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="712:5" pos:end="712:24"><decl pos:start="712:5" pos:end="712:23"><type pos:start="712:5" pos:end="712:14"><name pos:start="712:5" pos:end="712:12">EVP_PKEY</name> <modifier pos:start="712:14" pos:end="712:14">*</modifier></type> <name pos:start="712:16" pos:end="712:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="713:5" pos:end="713:11"><decl pos:start="713:5" pos:end="713:10"><type pos:start="713:5" pos:end="713:7"><name pos:start="713:5" pos:end="713:7">int</name></type> <name pos:start="713:9" pos:end="713:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="714:5" pos:end="714:17"><decl pos:start="714:5" pos:end="714:16"><type pos:start="714:5" pos:end="714:13"><name pos:start="714:5" pos:end="714:11">EST_CTX</name> <modifier pos:start="714:13" pos:end="714:13">*</modifier></type><name pos:start="714:14" pos:end="714:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="716:5" pos:end="717:5"><expr pos:start="716:5" pos:end="716:15"><name pos:start="716:5" pos:end="716:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="719:5" pos:end="721:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="722:5" pos:end="722:59"><expr pos:start="722:5" pos:end="722:58"><name pos:start="722:5" pos:end="722:15">cacerts_len</name> <operator pos:start="722:17" pos:end="722:17">=</operator> <call pos:start="722:19" pos:end="722:58"><name pos:start="722:19" pos:end="722:34">read_binary_file</name><argument_list pos:start="722:35" pos:end="722:58">(<argument pos:start="722:36" pos:end="722:47"><expr pos:start="722:36" pos:end="722:47"><name pos:start="722:36" pos:end="722:47">US894_CACERT</name></expr></argument>, <argument pos:start="722:50" pos:end="722:57"><expr pos:start="722:50" pos:end="722:57"><operator pos:start="722:50" pos:end="722:50">&amp;</operator><name pos:start="722:51" pos:end="722:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="723:5" pos:end="723:31"><expr pos:start="723:5" pos:end="723:30"><call pos:start="723:5" pos:end="723:30"><name pos:start="723:5" pos:end="723:13">CU_ASSERT</name><argument_list pos:start="723:14" pos:end="723:30">(<argument pos:start="723:15" pos:end="723:29"><expr pos:start="723:15" pos:end="723:29"><name pos:start="723:15" pos:end="723:25">cacerts_len</name> <operator pos:start="723:27" pos:end="723:27">&gt;</operator> <literal type="number" pos:start="723:29" pos:end="723:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="725:5" pos:end="727:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="728:5" pos:end="728:43"><expr pos:start="728:5" pos:end="728:42"><name pos:start="728:5" pos:end="728:9">keyin</name> <operator pos:start="728:11" pos:end="728:11">=</operator> <call pos:start="728:13" pos:end="728:42"><name pos:start="728:13" pos:end="728:19">BIO_new</name><argument_list pos:start="728:20" pos:end="728:42">(<argument pos:start="728:21" pos:end="728:41"><expr pos:start="728:21" pos:end="728:41"><call pos:start="728:21" pos:end="728:41"><name pos:start="728:21" pos:end="728:39">BIO_s_file_internal</name><argument_list pos:start="728:40" pos:end="728:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="729:5" pos:end="729:52"><expr pos:start="729:5" pos:end="729:51"><name pos:start="729:5" pos:end="729:6">rv</name> <operator pos:start="729:8" pos:end="729:8">=</operator> <call pos:start="729:10" pos:end="729:51"><name pos:start="729:10" pos:end="729:26">BIO_read_filename</name><argument_list pos:start="729:27" pos:end="729:51">(<argument pos:start="729:28" pos:end="729:32"><expr pos:start="729:28" pos:end="729:32"><name pos:start="729:28" pos:end="729:32">keyin</name></expr></argument>, <argument pos:start="729:35" pos:end="729:50"><expr pos:start="729:35" pos:end="729:50"><name pos:start="729:35" pos:end="729:50">US894_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="730:5" pos:end="730:22"><expr pos:start="730:5" pos:end="730:21"><call pos:start="730:5" pos:end="730:21"><name pos:start="730:5" pos:end="730:13">CU_ASSERT</name><argument_list pos:start="730:14" pos:end="730:21">(<argument pos:start="730:15" pos:end="730:20"><expr pos:start="730:15" pos:end="730:20"><name pos:start="730:15" pos:end="730:16">rv</name> <operator pos:start="730:18" pos:end="730:18">&gt;</operator> <literal type="number" pos:start="730:20" pos:end="730:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="731:5" pos:end="731:64"><expr pos:start="731:5" pos:end="731:63"><name pos:start="731:5" pos:end="731:12">priv_key</name> <operator pos:start="731:14" pos:end="731:14">=</operator> <call pos:start="731:16" pos:end="731:63"><name pos:start="731:16" pos:end="731:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="731:39" pos:end="731:63">(<argument pos:start="731:40" pos:end="731:44"><expr pos:start="731:40" pos:end="731:44"><name pos:start="731:40" pos:end="731:44">keyin</name></expr></argument>, <argument pos:start="731:47" pos:end="731:50"><expr pos:start="731:47" pos:end="731:50"><name pos:start="731:47" pos:end="731:50">NULL</name></expr></argument>, <argument pos:start="731:53" pos:end="731:56"><expr pos:start="731:53" pos:end="731:56"><name pos:start="731:53" pos:end="731:56">NULL</name></expr></argument>, <argument pos:start="731:59" pos:end="731:62"><expr pos:start="731:59" pos:end="731:62"><name pos:start="731:59" pos:end="731:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="732:5" pos:end="732:32"><expr pos:start="732:5" pos:end="732:31"><call pos:start="732:5" pos:end="732:31"><name pos:start="732:5" pos:end="732:13">CU_ASSERT</name><argument_list pos:start="732:14" pos:end="732:31">(<argument pos:start="732:15" pos:end="732:30"><expr pos:start="732:15" pos:end="732:30"><name pos:start="732:15" pos:end="732:22">priv_key</name> <operator pos:start="732:24" pos:end="732:25">!=</operator> <name pos:start="732:27" pos:end="732:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="733:5" pos:end="733:20"><expr pos:start="733:5" pos:end="733:19"><call pos:start="733:5" pos:end="733:19"><name pos:start="733:5" pos:end="733:12">BIO_free</name><argument_list pos:start="733:13" pos:end="733:19">(<argument pos:start="733:14" pos:end="733:18"><expr pos:start="733:14" pos:end="733:18"><name pos:start="733:14" pos:end="733:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="735:5" pos:end="737:7">/*
     * Attempt to init EST proxy using NULL server key
     */</comment>
    <expr_stmt pos:start="738:5" pos:end="738:44"><expr pos:start="738:5" pos:end="738:43"><call pos:start="738:5" pos:end="738:43"><name pos:start="738:5" pos:end="738:19">est_init_logger</name><argument_list pos:start="738:20" pos:end="738:43">(<argument pos:start="738:21" pos:end="738:36"><expr pos:start="738:21" pos:end="738:36"><name pos:start="738:21" pos:end="738:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="738:39" pos:end="738:42"><expr pos:start="738:39" pos:end="738:42"><name pos:start="738:39" pos:end="738:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="739:5" pos:end="748:35"><expr pos:start="739:5" pos:end="748:34"><name pos:start="739:5" pos:end="739:7">ctx</name> <operator pos:start="739:9" pos:end="739:9">=</operator> <call pos:start="739:11" pos:end="748:34"><name pos:start="739:11" pos:end="739:24">est_proxy_init</name><argument_list pos:start="739:25" pos:end="748:34">(<argument pos:start="739:26" pos:end="739:32"><expr pos:start="739:26" pos:end="739:32"><name pos:start="739:26" pos:end="739:32">cacerts</name></expr></argument>,
                         <argument pos:start="740:26" pos:end="740:36"><expr pos:start="740:26" pos:end="740:36"><name pos:start="740:26" pos:end="740:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="741:26" pos:end="741:32"><expr pos:start="741:26" pos:end="741:32"><name pos:start="741:26" pos:end="741:32">cacerts</name></expr></argument>,
                         <argument pos:start="742:26" pos:end="742:36"><expr pos:start="742:26" pos:end="742:36"><name pos:start="742:26" pos:end="742:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="743:26" pos:end="743:44"><expr pos:start="743:26" pos:end="743:44"><name pos:start="743:26" pos:end="743:44">EST_CERT_FORMAT_PEM</name></expr></argument>,
                         <argument pos:start="744:26" pos:end="744:36"><expr pos:start="744:26" pos:end="744:36"><literal type="string" pos:start="744:26" pos:end="744:36">"testrealm"</literal></expr></argument>,
                         <argument pos:start="745:26" pos:end="745:29"><expr pos:start="745:26" pos:end="745:29"><name pos:start="745:26" pos:end="745:29">NULL</name></expr></argument>,
                         <argument pos:start="746:26" pos:end="746:33"><expr pos:start="746:26" pos:end="746:33"><name pos:start="746:26" pos:end="746:33">priv_key</name></expr></argument>,
                         <argument pos:start="747:26" pos:end="747:34"><expr pos:start="747:26" pos:end="747:34"><literal type="string" pos:start="747:26" pos:end="747:34">"estuser"</literal></expr></argument>,
                         <argument pos:start="748:26" pos:end="748:33"><expr pos:start="748:26" pos:end="748:33"><literal type="string" pos:start="748:26" pos:end="748:33">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="749:5" pos:end="749:27"><expr pos:start="749:5" pos:end="749:26"><call pos:start="749:5" pos:end="749:26"><name pos:start="749:5" pos:end="749:13">CU_ASSERT</name><argument_list pos:start="749:14" pos:end="749:26">(<argument pos:start="749:15" pos:end="749:25"><expr pos:start="749:15" pos:end="749:25"><name pos:start="749:15" pos:end="749:17">ctx</name> <operator pos:start="749:19" pos:end="749:20">==</operator> <name pos:start="749:22" pos:end="749:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="751:5" pos:end="751:28"><expr pos:start="751:5" pos:end="751:27"><call pos:start="751:5" pos:end="751:27"><name pos:start="751:5" pos:end="751:17">EVP_PKEY_free</name><argument_list pos:start="751:18" pos:end="751:27">(<argument pos:start="751:19" pos:end="751:26"><expr pos:start="751:19" pos:end="751:26"><name pos:start="751:19" pos:end="751:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="754:1" pos:end="756:3">/*
 * Null Server certificate private key when initializing server
 */</comment>
<function pos:start="757:1" pos:end="802:1"><type pos:start="757:1" pos:end="757:11"><specifier pos:start="757:1" pos:end="757:6">static</specifier> <name pos:start="757:8" pos:end="757:11">void</name></type> <name pos:start="757:13" pos:end="757:24">us894_test17</name> <parameter_list pos:start="757:26" pos:end="757:31">(<parameter pos:start="757:27" pos:end="757:30"><decl pos:start="757:27" pos:end="757:30"><type pos:start="757:27" pos:end="757:30"><name pos:start="757:27" pos:end="757:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="758:1" pos:end="802:1">{<block_content pos:start="759:5" pos:end="801:17">
    <decl_stmt pos:start="759:5" pos:end="759:34"><decl pos:start="759:5" pos:end="759:33"><type pos:start="759:5" pos:end="759:19"><name pos:start="759:5" pos:end="759:12">unsigned</name> <name pos:start="759:14" pos:end="759:17">char</name> <modifier pos:start="759:19" pos:end="759:19">*</modifier></type><name pos:start="759:20" pos:end="759:26">cacerts</name> <init pos:start="759:28" pos:end="759:33">= <expr pos:start="759:30" pos:end="759:33"><name pos:start="759:30" pos:end="759:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="760:5" pos:end="760:24"><decl pos:start="760:5" pos:end="760:23"><type pos:start="760:5" pos:end="760:7"><name pos:start="760:5" pos:end="760:7">int</name></type> <name pos:start="760:9" pos:end="760:19">cacerts_len</name> <init pos:start="760:21" pos:end="760:23">= <expr pos:start="760:23" pos:end="760:23"><literal type="number" pos:start="760:23" pos:end="760:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="761:5" pos:end="761:16"><decl pos:start="761:5" pos:end="761:15"><type pos:start="761:5" pos:end="761:9"><name pos:start="761:5" pos:end="761:7">BIO</name> <modifier pos:start="761:9" pos:end="761:9">*</modifier></type><name pos:start="761:10" pos:end="761:15">certin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="762:5" pos:end="762:12"><decl pos:start="762:5" pos:end="762:11"><type pos:start="762:5" pos:end="762:10"><name pos:start="762:5" pos:end="762:8">X509</name> <modifier pos:start="762:10" pos:end="762:10">*</modifier></type><name pos:start="762:11" pos:end="762:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="763:5" pos:end="763:11"><decl pos:start="763:5" pos:end="763:10"><type pos:start="763:5" pos:end="763:7"><name pos:start="763:5" pos:end="763:7">int</name></type> <name pos:start="763:9" pos:end="763:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="764:5" pos:end="764:17"><decl pos:start="764:5" pos:end="764:16"><type pos:start="764:5" pos:end="764:13"><name pos:start="764:5" pos:end="764:11">EST_CTX</name> <modifier pos:start="764:13" pos:end="764:13">*</modifier></type><name pos:start="764:14" pos:end="764:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="766:5" pos:end="767:5"><expr pos:start="766:5" pos:end="766:15"><name pos:start="766:5" pos:end="766:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="769:5" pos:end="771:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="772:5" pos:end="772:59"><expr pos:start="772:5" pos:end="772:58"><name pos:start="772:5" pos:end="772:15">cacerts_len</name> <operator pos:start="772:17" pos:end="772:17">=</operator> <call pos:start="772:19" pos:end="772:58"><name pos:start="772:19" pos:end="772:34">read_binary_file</name><argument_list pos:start="772:35" pos:end="772:58">(<argument pos:start="772:36" pos:end="772:47"><expr pos:start="772:36" pos:end="772:47"><name pos:start="772:36" pos:end="772:47">US894_CACERT</name></expr></argument>, <argument pos:start="772:50" pos:end="772:57"><expr pos:start="772:50" pos:end="772:57"><operator pos:start="772:50" pos:end="772:50">&amp;</operator><name pos:start="772:51" pos:end="772:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="773:5" pos:end="773:31"><expr pos:start="773:5" pos:end="773:30"><call pos:start="773:5" pos:end="773:30"><name pos:start="773:5" pos:end="773:13">CU_ASSERT</name><argument_list pos:start="773:14" pos:end="773:30">(<argument pos:start="773:15" pos:end="773:29"><expr pos:start="773:15" pos:end="773:29"><name pos:start="773:15" pos:end="773:25">cacerts_len</name> <operator pos:start="773:27" pos:end="773:27">&gt;</operator> <literal type="number" pos:start="773:29" pos:end="773:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="775:5" pos:end="777:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="778:5" pos:end="778:44"><expr pos:start="778:5" pos:end="778:43"><name pos:start="778:5" pos:end="778:10">certin</name> <operator pos:start="778:12" pos:end="778:12">=</operator> <call pos:start="778:14" pos:end="778:43"><name pos:start="778:14" pos:end="778:20">BIO_new</name><argument_list pos:start="778:21" pos:end="778:43">(<argument pos:start="778:22" pos:end="778:42"><expr pos:start="778:22" pos:end="778:42"><call pos:start="778:22" pos:end="778:42"><name pos:start="778:22" pos:end="778:40">BIO_s_file_internal</name><argument_list pos:start="778:41" pos:end="778:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="779:5" pos:end="779:54"><expr pos:start="779:5" pos:end="779:53"><name pos:start="779:5" pos:end="779:6">rv</name> <operator pos:start="779:8" pos:end="779:8">=</operator> <call pos:start="779:10" pos:end="779:53"><name pos:start="779:10" pos:end="779:26">BIO_read_filename</name><argument_list pos:start="779:27" pos:end="779:53">(<argument pos:start="779:28" pos:end="779:33"><expr pos:start="779:28" pos:end="779:33"><name pos:start="779:28" pos:end="779:33">certin</name></expr></argument>, <argument pos:start="779:36" pos:end="779:52"><expr pos:start="779:36" pos:end="779:52"><name pos:start="779:36" pos:end="779:52">US894_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="780:5" pos:end="780:22"><expr pos:start="780:5" pos:end="780:21"><call pos:start="780:5" pos:end="780:21"><name pos:start="780:5" pos:end="780:13">CU_ASSERT</name><argument_list pos:start="780:14" pos:end="780:21">(<argument pos:start="780:15" pos:end="780:20"><expr pos:start="780:15" pos:end="780:20"><name pos:start="780:15" pos:end="780:16">rv</name> <operator pos:start="780:18" pos:end="780:18">&gt;</operator> <literal type="number" pos:start="780:20" pos:end="780:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="781:5" pos:end="781:52"><expr pos:start="781:5" pos:end="781:51"><name pos:start="781:5" pos:end="781:5">x</name> <operator pos:start="781:7" pos:end="781:7">=</operator> <call pos:start="781:9" pos:end="781:51"><name pos:start="781:9" pos:end="781:25">PEM_read_bio_X509</name><argument_list pos:start="781:26" pos:end="781:51">(<argument pos:start="781:27" pos:end="781:32"><expr pos:start="781:27" pos:end="781:32"><name pos:start="781:27" pos:end="781:32">certin</name></expr></argument>, <argument pos:start="781:35" pos:end="781:38"><expr pos:start="781:35" pos:end="781:38"><name pos:start="781:35" pos:end="781:38">NULL</name></expr></argument>, <argument pos:start="781:41" pos:end="781:44"><expr pos:start="781:41" pos:end="781:44"><name pos:start="781:41" pos:end="781:44">NULL</name></expr></argument>, <argument pos:start="781:47" pos:end="781:50"><expr pos:start="781:47" pos:end="781:50"><name pos:start="781:47" pos:end="781:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="782:5" pos:end="782:25"><expr pos:start="782:5" pos:end="782:24"><call pos:start="782:5" pos:end="782:24"><name pos:start="782:5" pos:end="782:13">CU_ASSERT</name><argument_list pos:start="782:14" pos:end="782:24">(<argument pos:start="782:15" pos:end="782:23"><expr pos:start="782:15" pos:end="782:23"><name pos:start="782:15" pos:end="782:15">x</name> <operator pos:start="782:17" pos:end="782:18">!=</operator> <name pos:start="782:20" pos:end="782:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="783:5" pos:end="783:21"><expr pos:start="783:5" pos:end="783:20"><call pos:start="783:5" pos:end="783:20"><name pos:start="783:5" pos:end="783:12">BIO_free</name><argument_list pos:start="783:13" pos:end="783:20">(<argument pos:start="783:14" pos:end="783:19"><expr pos:start="783:14" pos:end="783:19"><name pos:start="783:14" pos:end="783:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="785:5" pos:end="787:7">/*
     * Attempt to init EST proxy using NULL private key
     */</comment>
    <expr_stmt pos:start="788:5" pos:end="788:44"><expr pos:start="788:5" pos:end="788:43"><call pos:start="788:5" pos:end="788:43"><name pos:start="788:5" pos:end="788:19">est_init_logger</name><argument_list pos:start="788:20" pos:end="788:43">(<argument pos:start="788:21" pos:end="788:36"><expr pos:start="788:21" pos:end="788:36"><name pos:start="788:21" pos:end="788:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="788:39" pos:end="788:42"><expr pos:start="788:39" pos:end="788:42"><name pos:start="788:39" pos:end="788:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="789:5" pos:end="798:35"><expr pos:start="789:5" pos:end="798:34"><name pos:start="789:5" pos:end="789:7">ctx</name> <operator pos:start="789:9" pos:end="789:9">=</operator> <call pos:start="789:11" pos:end="798:34"><name pos:start="789:11" pos:end="789:24">est_proxy_init</name><argument_list pos:start="789:25" pos:end="798:34">(<argument pos:start="789:26" pos:end="789:32"><expr pos:start="789:26" pos:end="789:32"><name pos:start="789:26" pos:end="789:32">cacerts</name></expr></argument>,
                         <argument pos:start="790:26" pos:end="790:36"><expr pos:start="790:26" pos:end="790:36"><name pos:start="790:26" pos:end="790:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="791:26" pos:end="791:32"><expr pos:start="791:26" pos:end="791:32"><name pos:start="791:26" pos:end="791:32">cacerts</name></expr></argument>,
                         <argument pos:start="792:26" pos:end="792:36"><expr pos:start="792:26" pos:end="792:36"><name pos:start="792:26" pos:end="792:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="793:26" pos:end="793:44"><expr pos:start="793:26" pos:end="793:44"><name pos:start="793:26" pos:end="793:44">EST_CERT_FORMAT_PEM</name></expr></argument>,
                         <argument pos:start="794:26" pos:end="794:36"><expr pos:start="794:26" pos:end="794:36"><literal type="string" pos:start="794:26" pos:end="794:36">"testrealm"</literal></expr></argument>,
                         <argument pos:start="795:26" pos:end="795:26"><expr pos:start="795:26" pos:end="795:26"><name pos:start="795:26" pos:end="795:26">x</name></expr></argument>,
                         <argument pos:start="796:26" pos:end="796:29"><expr pos:start="796:26" pos:end="796:29"><name pos:start="796:26" pos:end="796:29">NULL</name></expr></argument>,
                         <argument pos:start="797:26" pos:end="797:34"><expr pos:start="797:26" pos:end="797:34"><literal type="string" pos:start="797:26" pos:end="797:34">"estuser"</literal></expr></argument>,
                         <argument pos:start="798:26" pos:end="798:33"><expr pos:start="798:26" pos:end="798:33"><literal type="string" pos:start="798:26" pos:end="798:33">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="799:5" pos:end="799:27"><expr pos:start="799:5" pos:end="799:26"><call pos:start="799:5" pos:end="799:26"><name pos:start="799:5" pos:end="799:13">CU_ASSERT</name><argument_list pos:start="799:14" pos:end="799:26">(<argument pos:start="799:15" pos:end="799:25"><expr pos:start="799:15" pos:end="799:25"><name pos:start="799:15" pos:end="799:17">ctx</name> <operator pos:start="799:19" pos:end="799:20">==</operator> <name pos:start="799:22" pos:end="799:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="801:5" pos:end="801:17"><expr pos:start="801:5" pos:end="801:16"><call pos:start="801:5" pos:end="801:16"><name pos:start="801:5" pos:end="801:13">X509_free</name><argument_list pos:start="801:14" pos:end="801:16">(<argument pos:start="801:15" pos:end="801:15"><expr pos:start="801:15" pos:end="801:15"><name pos:start="801:15" pos:end="801:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="804:1" pos:end="806:3">/*
 * Null trusted CA chain when initializing server
 */</comment>
<function pos:start="807:1" pos:end="856:1"><type pos:start="807:1" pos:end="807:11"><specifier pos:start="807:1" pos:end="807:6">static</specifier> <name pos:start="807:8" pos:end="807:11">void</name></type> <name pos:start="807:13" pos:end="807:24">us894_test18</name> <parameter_list pos:start="807:26" pos:end="807:31">(<parameter pos:start="807:27" pos:end="807:30"><decl pos:start="807:27" pos:end="807:30"><type pos:start="807:27" pos:end="807:30"><name pos:start="807:27" pos:end="807:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="808:1" pos:end="856:1">{<block_content pos:start="809:5" pos:end="855:28">
    <decl_stmt pos:start="809:5" pos:end="809:24"><decl pos:start="809:5" pos:end="809:15"><type pos:start="809:5" pos:end="809:9"><name pos:start="809:5" pos:end="809:7">BIO</name> <modifier pos:start="809:9" pos:end="809:9">*</modifier></type><name pos:start="809:10" pos:end="809:15">certin</name></decl>, <decl pos:start="809:18" pos:end="809:23"><type ref="prev" pos:start="809:5" pos:end="809:9"><modifier pos:start="809:18" pos:end="809:18">*</modifier></type><name pos:start="809:19" pos:end="809:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="810:5" pos:end="810:12"><decl pos:start="810:5" pos:end="810:11"><type pos:start="810:5" pos:end="810:10"><name pos:start="810:5" pos:end="810:8">X509</name> <modifier pos:start="810:10" pos:end="810:10">*</modifier></type><name pos:start="810:11" pos:end="810:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="811:5" pos:end="811:24"><decl pos:start="811:5" pos:end="811:23"><type pos:start="811:5" pos:end="811:14"><name pos:start="811:5" pos:end="811:12">EVP_PKEY</name> <modifier pos:start="811:14" pos:end="811:14">*</modifier></type> <name pos:start="811:16" pos:end="811:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="812:5" pos:end="812:11"><decl pos:start="812:5" pos:end="812:10"><type pos:start="812:5" pos:end="812:7"><name pos:start="812:5" pos:end="812:7">int</name></type> <name pos:start="812:9" pos:end="812:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="813:5" pos:end="813:17"><decl pos:start="813:5" pos:end="813:16"><type pos:start="813:5" pos:end="813:13"><name pos:start="813:5" pos:end="813:11">EST_CTX</name> <modifier pos:start="813:13" pos:end="813:13">*</modifier></type><name pos:start="813:14" pos:end="813:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="815:5" pos:end="816:5"><expr pos:start="815:5" pos:end="815:15"><name pos:start="815:5" pos:end="815:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="818:5" pos:end="820:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="821:5" pos:end="821:44"><expr pos:start="821:5" pos:end="821:43"><name pos:start="821:5" pos:end="821:10">certin</name> <operator pos:start="821:12" pos:end="821:12">=</operator> <call pos:start="821:14" pos:end="821:43"><name pos:start="821:14" pos:end="821:20">BIO_new</name><argument_list pos:start="821:21" pos:end="821:43">(<argument pos:start="821:22" pos:end="821:42"><expr pos:start="821:22" pos:end="821:42"><call pos:start="821:22" pos:end="821:42"><name pos:start="821:22" pos:end="821:40">BIO_s_file_internal</name><argument_list pos:start="821:41" pos:end="821:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="822:5" pos:end="822:54"><expr pos:start="822:5" pos:end="822:53"><name pos:start="822:5" pos:end="822:6">rv</name> <operator pos:start="822:8" pos:end="822:8">=</operator> <call pos:start="822:10" pos:end="822:53"><name pos:start="822:10" pos:end="822:26">BIO_read_filename</name><argument_list pos:start="822:27" pos:end="822:53">(<argument pos:start="822:28" pos:end="822:33"><expr pos:start="822:28" pos:end="822:33"><name pos:start="822:28" pos:end="822:33">certin</name></expr></argument>, <argument pos:start="822:36" pos:end="822:52"><expr pos:start="822:36" pos:end="822:52"><name pos:start="822:36" pos:end="822:52">US894_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="823:5" pos:end="823:22"><expr pos:start="823:5" pos:end="823:21"><call pos:start="823:5" pos:end="823:21"><name pos:start="823:5" pos:end="823:13">CU_ASSERT</name><argument_list pos:start="823:14" pos:end="823:21">(<argument pos:start="823:15" pos:end="823:20"><expr pos:start="823:15" pos:end="823:20"><name pos:start="823:15" pos:end="823:16">rv</name> <operator pos:start="823:18" pos:end="823:18">&gt;</operator> <literal type="number" pos:start="823:20" pos:end="823:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="824:5" pos:end="824:52"><expr pos:start="824:5" pos:end="824:51"><name pos:start="824:5" pos:end="824:5">x</name> <operator pos:start="824:7" pos:end="824:7">=</operator> <call pos:start="824:9" pos:end="824:51"><name pos:start="824:9" pos:end="824:25">PEM_read_bio_X509</name><argument_list pos:start="824:26" pos:end="824:51">(<argument pos:start="824:27" pos:end="824:32"><expr pos:start="824:27" pos:end="824:32"><name pos:start="824:27" pos:end="824:32">certin</name></expr></argument>, <argument pos:start="824:35" pos:end="824:38"><expr pos:start="824:35" pos:end="824:38"><name pos:start="824:35" pos:end="824:38">NULL</name></expr></argument>, <argument pos:start="824:41" pos:end="824:44"><expr pos:start="824:41" pos:end="824:44"><name pos:start="824:41" pos:end="824:44">NULL</name></expr></argument>, <argument pos:start="824:47" pos:end="824:50"><expr pos:start="824:47" pos:end="824:50"><name pos:start="824:47" pos:end="824:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="825:5" pos:end="825:25"><expr pos:start="825:5" pos:end="825:24"><call pos:start="825:5" pos:end="825:24"><name pos:start="825:5" pos:end="825:13">CU_ASSERT</name><argument_list pos:start="825:14" pos:end="825:24">(<argument pos:start="825:15" pos:end="825:23"><expr pos:start="825:15" pos:end="825:23"><name pos:start="825:15" pos:end="825:15">x</name> <operator pos:start="825:17" pos:end="825:18">!=</operator> <name pos:start="825:20" pos:end="825:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="826:5" pos:end="826:21"><expr pos:start="826:5" pos:end="826:20"><call pos:start="826:5" pos:end="826:20"><name pos:start="826:5" pos:end="826:12">BIO_free</name><argument_list pos:start="826:13" pos:end="826:20">(<argument pos:start="826:14" pos:end="826:19"><expr pos:start="826:14" pos:end="826:19"><name pos:start="826:14" pos:end="826:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="828:5" pos:end="830:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="831:5" pos:end="831:43"><expr pos:start="831:5" pos:end="831:42"><name pos:start="831:5" pos:end="831:9">keyin</name> <operator pos:start="831:11" pos:end="831:11">=</operator> <call pos:start="831:13" pos:end="831:42"><name pos:start="831:13" pos:end="831:19">BIO_new</name><argument_list pos:start="831:20" pos:end="831:42">(<argument pos:start="831:21" pos:end="831:41"><expr pos:start="831:21" pos:end="831:41"><call pos:start="831:21" pos:end="831:41"><name pos:start="831:21" pos:end="831:39">BIO_s_file_internal</name><argument_list pos:start="831:40" pos:end="831:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="832:5" pos:end="832:52"><expr pos:start="832:5" pos:end="832:51"><name pos:start="832:5" pos:end="832:6">rv</name> <operator pos:start="832:8" pos:end="832:8">=</operator> <call pos:start="832:10" pos:end="832:51"><name pos:start="832:10" pos:end="832:26">BIO_read_filename</name><argument_list pos:start="832:27" pos:end="832:51">(<argument pos:start="832:28" pos:end="832:32"><expr pos:start="832:28" pos:end="832:32"><name pos:start="832:28" pos:end="832:32">keyin</name></expr></argument>, <argument pos:start="832:35" pos:end="832:50"><expr pos:start="832:35" pos:end="832:50"><name pos:start="832:35" pos:end="832:50">US894_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="833:5" pos:end="833:22"><expr pos:start="833:5" pos:end="833:21"><call pos:start="833:5" pos:end="833:21"><name pos:start="833:5" pos:end="833:13">CU_ASSERT</name><argument_list pos:start="833:14" pos:end="833:21">(<argument pos:start="833:15" pos:end="833:20"><expr pos:start="833:15" pos:end="833:20"><name pos:start="833:15" pos:end="833:16">rv</name> <operator pos:start="833:18" pos:end="833:18">&gt;</operator> <literal type="number" pos:start="833:20" pos:end="833:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="834:5" pos:end="834:64"><expr pos:start="834:5" pos:end="834:63"><name pos:start="834:5" pos:end="834:12">priv_key</name> <operator pos:start="834:14" pos:end="834:14">=</operator> <call pos:start="834:16" pos:end="834:63"><name pos:start="834:16" pos:end="834:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="834:39" pos:end="834:63">(<argument pos:start="834:40" pos:end="834:44"><expr pos:start="834:40" pos:end="834:44"><name pos:start="834:40" pos:end="834:44">keyin</name></expr></argument>, <argument pos:start="834:47" pos:end="834:50"><expr pos:start="834:47" pos:end="834:50"><name pos:start="834:47" pos:end="834:50">NULL</name></expr></argument>, <argument pos:start="834:53" pos:end="834:56"><expr pos:start="834:53" pos:end="834:56"><name pos:start="834:53" pos:end="834:56">NULL</name></expr></argument>, <argument pos:start="834:59" pos:end="834:62"><expr pos:start="834:59" pos:end="834:62"><name pos:start="834:59" pos:end="834:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="835:5" pos:end="835:32"><expr pos:start="835:5" pos:end="835:31"><call pos:start="835:5" pos:end="835:31"><name pos:start="835:5" pos:end="835:13">CU_ASSERT</name><argument_list pos:start="835:14" pos:end="835:31">(<argument pos:start="835:15" pos:end="835:30"><expr pos:start="835:15" pos:end="835:30"><name pos:start="835:15" pos:end="835:22">priv_key</name> <operator pos:start="835:24" pos:end="835:25">!=</operator> <name pos:start="835:27" pos:end="835:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="836:5" pos:end="836:20"><expr pos:start="836:5" pos:end="836:19"><call pos:start="836:5" pos:end="836:19"><name pos:start="836:5" pos:end="836:12">BIO_free</name><argument_list pos:start="836:13" pos:end="836:19">(<argument pos:start="836:14" pos:end="836:18"><expr pos:start="836:14" pos:end="836:18"><name pos:start="836:14" pos:end="836:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="838:5" pos:end="840:7">/*
     * Attempt to init EST proxy using NULL local CA chain
     */</comment>
    <expr_stmt pos:start="841:5" pos:end="841:44"><expr pos:start="841:5" pos:end="841:43"><call pos:start="841:5" pos:end="841:43"><name pos:start="841:5" pos:end="841:19">est_init_logger</name><argument_list pos:start="841:20" pos:end="841:43">(<argument pos:start="841:21" pos:end="841:36"><expr pos:start="841:21" pos:end="841:36"><name pos:start="841:21" pos:end="841:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="841:39" pos:end="841:42"><expr pos:start="841:39" pos:end="841:42"><name pos:start="841:39" pos:end="841:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="842:5" pos:end="851:35"><expr pos:start="842:5" pos:end="851:34"><name pos:start="842:5" pos:end="842:7">ctx</name> <operator pos:start="842:9" pos:end="842:9">=</operator> <call pos:start="842:11" pos:end="851:34"><name pos:start="842:11" pos:end="842:24">est_proxy_init</name><argument_list pos:start="842:25" pos:end="851:34">(<argument pos:start="842:26" pos:end="842:29"><expr pos:start="842:26" pos:end="842:29"><name pos:start="842:26" pos:end="842:29">NULL</name></expr></argument>,
                         <argument pos:start="843:26" pos:end="843:26"><expr pos:start="843:26" pos:end="843:26"><literal type="number" pos:start="843:26" pos:end="843:26">0</literal></expr></argument>,
                         <argument pos:start="844:26" pos:end="844:29"><expr pos:start="844:26" pos:end="844:29"><name pos:start="844:26" pos:end="844:29">NULL</name></expr></argument>,
                         <argument pos:start="845:26" pos:end="845:26"><expr pos:start="845:26" pos:end="845:26"><literal type="number" pos:start="845:26" pos:end="845:26">0</literal></expr></argument>,
                         <argument pos:start="846:26" pos:end="846:44"><expr pos:start="846:26" pos:end="846:44"><name pos:start="846:26" pos:end="846:44">EST_CERT_FORMAT_PEM</name></expr></argument>,
                         <argument pos:start="847:26" pos:end="847:36"><expr pos:start="847:26" pos:end="847:36"><literal type="string" pos:start="847:26" pos:end="847:36">"testrealm"</literal></expr></argument>,
                         <argument pos:start="848:26" pos:end="848:26"><expr pos:start="848:26" pos:end="848:26"><name pos:start="848:26" pos:end="848:26">x</name></expr></argument>,
                         <argument pos:start="849:26" pos:end="849:33"><expr pos:start="849:26" pos:end="849:33"><name pos:start="849:26" pos:end="849:33">priv_key</name></expr></argument>,
                         <argument pos:start="850:26" pos:end="850:34"><expr pos:start="850:26" pos:end="850:34"><literal type="string" pos:start="850:26" pos:end="850:34">"estuser"</literal></expr></argument>,
                         <argument pos:start="851:26" pos:end="851:33"><expr pos:start="851:26" pos:end="851:33"><literal type="string" pos:start="851:26" pos:end="851:33">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="852:5" pos:end="852:27"><expr pos:start="852:5" pos:end="852:26"><call pos:start="852:5" pos:end="852:26"><name pos:start="852:5" pos:end="852:13">CU_ASSERT</name><argument_list pos:start="852:14" pos:end="852:26">(<argument pos:start="852:15" pos:end="852:25"><expr pos:start="852:15" pos:end="852:25"><name pos:start="852:15" pos:end="852:17">ctx</name> <operator pos:start="852:19" pos:end="852:20">==</operator> <name pos:start="852:22" pos:end="852:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="854:5" pos:end="854:17"><expr pos:start="854:5" pos:end="854:16"><call pos:start="854:5" pos:end="854:16"><name pos:start="854:5" pos:end="854:13">X509_free</name><argument_list pos:start="854:14" pos:end="854:16">(<argument pos:start="854:15" pos:end="854:15"><expr pos:start="854:15" pos:end="854:15"><name pos:start="854:15" pos:end="854:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="855:5" pos:end="855:28"><expr pos:start="855:5" pos:end="855:27"><call pos:start="855:5" pos:end="855:27"><name pos:start="855:5" pos:end="855:17">EVP_PKEY_free</name><argument_list pos:start="855:18" pos:end="855:27">(<argument pos:start="855:19" pos:end="855:26"><expr pos:start="855:19" pos:end="855:26"><name pos:start="855:19" pos:end="855:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="858:1" pos:end="860:3">/*
 * Corrupted CA chain when initializing server
 */</comment>
<function pos:start="861:1" pos:end="911:1"><type pos:start="861:1" pos:end="861:11"><specifier pos:start="861:1" pos:end="861:6">static</specifier> <name pos:start="861:8" pos:end="861:11">void</name></type> <name pos:start="861:13" pos:end="861:24">us894_test19</name> <parameter_list pos:start="861:26" pos:end="861:31">(<parameter pos:start="861:27" pos:end="861:30"><decl pos:start="861:27" pos:end="861:30"><type pos:start="861:27" pos:end="861:30"><name pos:start="861:27" pos:end="861:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="862:1" pos:end="911:1">{<block_content pos:start="863:5" pos:end="910:28">
    <decl_stmt pos:start="863:5" pos:end="863:24"><decl pos:start="863:5" pos:end="863:15"><type pos:start="863:5" pos:end="863:9"><name pos:start="863:5" pos:end="863:7">BIO</name> <modifier pos:start="863:9" pos:end="863:9">*</modifier></type><name pos:start="863:10" pos:end="863:15">certin</name></decl>, <decl pos:start="863:18" pos:end="863:23"><type ref="prev" pos:start="863:5" pos:end="863:9"><modifier pos:start="863:18" pos:end="863:18">*</modifier></type><name pos:start="863:19" pos:end="863:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="864:5" pos:end="864:12"><decl pos:start="864:5" pos:end="864:11"><type pos:start="864:5" pos:end="864:10"><name pos:start="864:5" pos:end="864:8">X509</name> <modifier pos:start="864:10" pos:end="864:10">*</modifier></type><name pos:start="864:11" pos:end="864:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="865:5" pos:end="865:24"><decl pos:start="865:5" pos:end="865:23"><type pos:start="865:5" pos:end="865:14"><name pos:start="865:5" pos:end="865:12">EVP_PKEY</name> <modifier pos:start="865:14" pos:end="865:14">*</modifier></type> <name pos:start="865:16" pos:end="865:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="866:5" pos:end="866:11"><decl pos:start="866:5" pos:end="866:10"><type pos:start="866:5" pos:end="866:7"><name pos:start="866:5" pos:end="866:7">int</name></type> <name pos:start="866:9" pos:end="866:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="867:5" pos:end="867:17"><decl pos:start="867:5" pos:end="867:16"><type pos:start="867:5" pos:end="867:13"><name pos:start="867:5" pos:end="867:11">EST_CTX</name> <modifier pos:start="867:13" pos:end="867:13">*</modifier></type><name pos:start="867:14" pos:end="867:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="869:5" pos:end="870:5"><expr pos:start="869:5" pos:end="869:15"><name pos:start="869:5" pos:end="869:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="872:5" pos:end="874:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="875:5" pos:end="875:44"><expr pos:start="875:5" pos:end="875:43"><name pos:start="875:5" pos:end="875:10">certin</name> <operator pos:start="875:12" pos:end="875:12">=</operator> <call pos:start="875:14" pos:end="875:43"><name pos:start="875:14" pos:end="875:20">BIO_new</name><argument_list pos:start="875:21" pos:end="875:43">(<argument pos:start="875:22" pos:end="875:42"><expr pos:start="875:22" pos:end="875:42"><call pos:start="875:22" pos:end="875:42"><name pos:start="875:22" pos:end="875:40">BIO_s_file_internal</name><argument_list pos:start="875:41" pos:end="875:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="876:5" pos:end="876:54"><expr pos:start="876:5" pos:end="876:53"><name pos:start="876:5" pos:end="876:6">rv</name> <operator pos:start="876:8" pos:end="876:8">=</operator> <call pos:start="876:10" pos:end="876:53"><name pos:start="876:10" pos:end="876:26">BIO_read_filename</name><argument_list pos:start="876:27" pos:end="876:53">(<argument pos:start="876:28" pos:end="876:33"><expr pos:start="876:28" pos:end="876:33"><name pos:start="876:28" pos:end="876:33">certin</name></expr></argument>, <argument pos:start="876:36" pos:end="876:52"><expr pos:start="876:36" pos:end="876:52"><name pos:start="876:36" pos:end="876:52">US894_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="877:5" pos:end="877:22"><expr pos:start="877:5" pos:end="877:21"><call pos:start="877:5" pos:end="877:21"><name pos:start="877:5" pos:end="877:13">CU_ASSERT</name><argument_list pos:start="877:14" pos:end="877:21">(<argument pos:start="877:15" pos:end="877:20"><expr pos:start="877:15" pos:end="877:20"><name pos:start="877:15" pos:end="877:16">rv</name> <operator pos:start="877:18" pos:end="877:18">&gt;</operator> <literal type="number" pos:start="877:20" pos:end="877:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="878:5" pos:end="878:52"><expr pos:start="878:5" pos:end="878:51"><name pos:start="878:5" pos:end="878:5">x</name> <operator pos:start="878:7" pos:end="878:7">=</operator> <call pos:start="878:9" pos:end="878:51"><name pos:start="878:9" pos:end="878:25">PEM_read_bio_X509</name><argument_list pos:start="878:26" pos:end="878:51">(<argument pos:start="878:27" pos:end="878:32"><expr pos:start="878:27" pos:end="878:32"><name pos:start="878:27" pos:end="878:32">certin</name></expr></argument>, <argument pos:start="878:35" pos:end="878:38"><expr pos:start="878:35" pos:end="878:38"><name pos:start="878:35" pos:end="878:38">NULL</name></expr></argument>, <argument pos:start="878:41" pos:end="878:44"><expr pos:start="878:41" pos:end="878:44"><name pos:start="878:41" pos:end="878:44">NULL</name></expr></argument>, <argument pos:start="878:47" pos:end="878:50"><expr pos:start="878:47" pos:end="878:50"><name pos:start="878:47" pos:end="878:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="879:5" pos:end="879:25"><expr pos:start="879:5" pos:end="879:24"><call pos:start="879:5" pos:end="879:24"><name pos:start="879:5" pos:end="879:13">CU_ASSERT</name><argument_list pos:start="879:14" pos:end="879:24">(<argument pos:start="879:15" pos:end="879:23"><expr pos:start="879:15" pos:end="879:23"><name pos:start="879:15" pos:end="879:15">x</name> <operator pos:start="879:17" pos:end="879:18">!=</operator> <name pos:start="879:20" pos:end="879:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="880:5" pos:end="880:21"><expr pos:start="880:5" pos:end="880:20"><call pos:start="880:5" pos:end="880:20"><name pos:start="880:5" pos:end="880:12">BIO_free</name><argument_list pos:start="880:13" pos:end="880:20">(<argument pos:start="880:14" pos:end="880:19"><expr pos:start="880:14" pos:end="880:19"><name pos:start="880:14" pos:end="880:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="882:5" pos:end="884:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="885:5" pos:end="885:43"><expr pos:start="885:5" pos:end="885:42"><name pos:start="885:5" pos:end="885:9">keyin</name> <operator pos:start="885:11" pos:end="885:11">=</operator> <call pos:start="885:13" pos:end="885:42"><name pos:start="885:13" pos:end="885:19">BIO_new</name><argument_list pos:start="885:20" pos:end="885:42">(<argument pos:start="885:21" pos:end="885:41"><expr pos:start="885:21" pos:end="885:41"><call pos:start="885:21" pos:end="885:41"><name pos:start="885:21" pos:end="885:39">BIO_s_file_internal</name><argument_list pos:start="885:40" pos:end="885:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="886:5" pos:end="886:52"><expr pos:start="886:5" pos:end="886:51"><name pos:start="886:5" pos:end="886:6">rv</name> <operator pos:start="886:8" pos:end="886:8">=</operator> <call pos:start="886:10" pos:end="886:51"><name pos:start="886:10" pos:end="886:26">BIO_read_filename</name><argument_list pos:start="886:27" pos:end="886:51">(<argument pos:start="886:28" pos:end="886:32"><expr pos:start="886:28" pos:end="886:32"><name pos:start="886:28" pos:end="886:32">keyin</name></expr></argument>, <argument pos:start="886:35" pos:end="886:50"><expr pos:start="886:35" pos:end="886:50"><name pos:start="886:35" pos:end="886:50">US894_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="887:5" pos:end="887:22"><expr pos:start="887:5" pos:end="887:21"><call pos:start="887:5" pos:end="887:21"><name pos:start="887:5" pos:end="887:13">CU_ASSERT</name><argument_list pos:start="887:14" pos:end="887:21">(<argument pos:start="887:15" pos:end="887:20"><expr pos:start="887:15" pos:end="887:20"><name pos:start="887:15" pos:end="887:16">rv</name> <operator pos:start="887:18" pos:end="887:18">&gt;</operator> <literal type="number" pos:start="887:20" pos:end="887:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="888:5" pos:end="888:64"><expr pos:start="888:5" pos:end="888:63"><name pos:start="888:5" pos:end="888:12">priv_key</name> <operator pos:start="888:14" pos:end="888:14">=</operator> <call pos:start="888:16" pos:end="888:63"><name pos:start="888:16" pos:end="888:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="888:39" pos:end="888:63">(<argument pos:start="888:40" pos:end="888:44"><expr pos:start="888:40" pos:end="888:44"><name pos:start="888:40" pos:end="888:44">keyin</name></expr></argument>, <argument pos:start="888:47" pos:end="888:50"><expr pos:start="888:47" pos:end="888:50"><name pos:start="888:47" pos:end="888:50">NULL</name></expr></argument>, <argument pos:start="888:53" pos:end="888:56"><expr pos:start="888:53" pos:end="888:56"><name pos:start="888:53" pos:end="888:56">NULL</name></expr></argument>, <argument pos:start="888:59" pos:end="888:62"><expr pos:start="888:59" pos:end="888:62"><name pos:start="888:59" pos:end="888:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="889:5" pos:end="889:32"><expr pos:start="889:5" pos:end="889:31"><call pos:start="889:5" pos:end="889:31"><name pos:start="889:5" pos:end="889:13">CU_ASSERT</name><argument_list pos:start="889:14" pos:end="889:31">(<argument pos:start="889:15" pos:end="889:30"><expr pos:start="889:15" pos:end="889:30"><name pos:start="889:15" pos:end="889:22">priv_key</name> <operator pos:start="889:24" pos:end="889:25">!=</operator> <name pos:start="889:27" pos:end="889:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="890:5" pos:end="890:20"><expr pos:start="890:5" pos:end="890:19"><call pos:start="890:5" pos:end="890:19"><name pos:start="890:5" pos:end="890:12">BIO_free</name><argument_list pos:start="890:13" pos:end="890:19">(<argument pos:start="890:14" pos:end="890:18"><expr pos:start="890:14" pos:end="890:18"><name pos:start="890:14" pos:end="890:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="892:5" pos:end="894:7">/*
     * Attempt to init EST proxy a corrupted CA chain
     */</comment>
    <expr_stmt pos:start="895:5" pos:end="895:44"><expr pos:start="895:5" pos:end="895:43"><call pos:start="895:5" pos:end="895:43"><name pos:start="895:5" pos:end="895:19">est_init_logger</name><argument_list pos:start="895:20" pos:end="895:43">(<argument pos:start="895:21" pos:end="895:36"><expr pos:start="895:21" pos:end="895:36"><name pos:start="895:21" pos:end="895:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="895:39" pos:end="895:42"><expr pos:start="895:39" pos:end="895:42"><name pos:start="895:39" pos:end="895:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="896:5" pos:end="905:35"><expr pos:start="896:5" pos:end="905:34"><name pos:start="896:5" pos:end="896:7">ctx</name> <operator pos:start="896:9" pos:end="896:9">=</operator> <call pos:start="896:11" pos:end="905:34"><name pos:start="896:11" pos:end="896:24">est_proxy_init</name><argument_list pos:start="896:25" pos:end="905:34">(<argument pos:start="896:26" pos:end="896:58"><expr pos:start="896:26" pos:end="896:58"><operator pos:start="896:26" pos:end="896:26">(</operator><name pos:start="896:27" pos:end="896:34">unsigned</name> <name pos:start="896:36" pos:end="896:39">char</name><operator pos:start="896:40" pos:end="896:40">*</operator><operator pos:start="896:41" pos:end="896:41">)</operator> <literal type="string" pos:start="896:43" pos:end="896:58">"Bogus CA chain"</literal></expr></argument>,
                         <argument pos:start="897:26" pos:end="897:27"><expr pos:start="897:26" pos:end="897:27"><literal type="number" pos:start="897:26" pos:end="897:27">14</literal></expr></argument>,
                         <argument pos:start="898:26" pos:end="898:58"><expr pos:start="898:26" pos:end="898:58"><operator pos:start="898:26" pos:end="898:26">(</operator><name pos:start="898:27" pos:end="898:34">unsigned</name> <name pos:start="898:36" pos:end="898:39">char</name><operator pos:start="898:40" pos:end="898:40">*</operator><operator pos:start="898:41" pos:end="898:41">)</operator> <literal type="string" pos:start="898:43" pos:end="898:58">"Bogus CA chain"</literal></expr></argument>,
                         <argument pos:start="899:26" pos:end="899:27"><expr pos:start="899:26" pos:end="899:27"><literal type="number" pos:start="899:26" pos:end="899:27">14</literal></expr></argument>,
                         <argument pos:start="900:26" pos:end="900:44"><expr pos:start="900:26" pos:end="900:44"><name pos:start="900:26" pos:end="900:44">EST_CERT_FORMAT_PEM</name></expr></argument>,
                         <argument pos:start="901:26" pos:end="901:36"><expr pos:start="901:26" pos:end="901:36"><literal type="string" pos:start="901:26" pos:end="901:36">"testrealm"</literal></expr></argument>,
                         <argument pos:start="902:26" pos:end="902:26"><expr pos:start="902:26" pos:end="902:26"><name pos:start="902:26" pos:end="902:26">x</name></expr></argument>,
                         <argument pos:start="903:26" pos:end="903:33"><expr pos:start="903:26" pos:end="903:33"><name pos:start="903:26" pos:end="903:33">priv_key</name></expr></argument>,
                         <argument pos:start="904:26" pos:end="904:34"><expr pos:start="904:26" pos:end="904:34"><literal type="string" pos:start="904:26" pos:end="904:34">"estuser"</literal></expr></argument>,
                         <argument pos:start="905:26" pos:end="905:33"><expr pos:start="905:26" pos:end="905:33"><literal type="string" pos:start="905:26" pos:end="905:33">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="907:5" pos:end="907:27"><expr pos:start="907:5" pos:end="907:26"><call pos:start="907:5" pos:end="907:26"><name pos:start="907:5" pos:end="907:13">CU_ASSERT</name><argument_list pos:start="907:14" pos:end="907:26">(<argument pos:start="907:15" pos:end="907:25"><expr pos:start="907:15" pos:end="907:25"><name pos:start="907:15" pos:end="907:17">ctx</name> <operator pos:start="907:19" pos:end="907:20">==</operator> <name pos:start="907:22" pos:end="907:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="909:5" pos:end="909:17"><expr pos:start="909:5" pos:end="909:16"><call pos:start="909:5" pos:end="909:16"><name pos:start="909:5" pos:end="909:13">X509_free</name><argument_list pos:start="909:14" pos:end="909:16">(<argument pos:start="909:15" pos:end="909:15"><expr pos:start="909:15" pos:end="909:15"><name pos:start="909:15" pos:end="909:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="910:5" pos:end="910:28"><expr pos:start="910:5" pos:end="910:27"><call pos:start="910:5" pos:end="910:27"><name pos:start="910:5" pos:end="910:17">EVP_PKEY_free</name><argument_list pos:start="910:18" pos:end="910:27">(<argument pos:start="910:19" pos:end="910:26"><expr pos:start="910:19" pos:end="910:26"><name pos:start="910:19" pos:end="910:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="913:1" pos:end="916:3">/*
 * This test case attempts simple cacerts request using
 * POST instead of GET.  It should fail.
 */</comment>
<function pos:start="917:1" pos:end="936:1"><type pos:start="917:1" pos:end="917:11"><specifier pos:start="917:1" pos:end="917:6">static</specifier> <name pos:start="917:8" pos:end="917:11">void</name></type> <name pos:start="917:13" pos:end="917:24">us894_test20</name> <parameter_list pos:start="917:26" pos:end="917:31">(<parameter pos:start="917:27" pos:end="917:30"><decl pos:start="917:27" pos:end="917:30"><type pos:start="917:27" pos:end="917:30"><name pos:start="917:27" pos:end="917:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="918:1" pos:end="936:1">{<block_content pos:start="919:5" pos:end="935:25">
    <decl_stmt pos:start="919:5" pos:end="919:12"><decl pos:start="919:5" pos:end="919:11"><type pos:start="919:5" pos:end="919:8"><name pos:start="919:5" pos:end="919:8">long</name></type> <name pos:start="919:10" pos:end="919:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="921:5" pos:end="922:5"><expr pos:start="921:5" pos:end="921:15"><name pos:start="921:5" pos:end="921:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="924:5" pos:end="924:13"><expr pos:start="924:5" pos:end="924:12"><call pos:start="924:5" pos:end="924:12"><name pos:start="924:5" pos:end="924:9">SLEEP</name><argument_list pos:start="924:10" pos:end="924:12">(<argument pos:start="924:11" pos:end="924:11"><expr pos:start="924:11" pos:end="924:11"><literal type="number" pos:start="924:11" pos:end="924:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="926:5" pos:end="926:40"><expr pos:start="926:5" pos:end="926:39"><name pos:start="926:5" pos:end="926:11">outfile</name> <operator pos:start="926:13" pos:end="926:13">=</operator> <call pos:start="926:15" pos:end="926:39"><name pos:start="926:15" pos:end="926:19">fopen</name><argument_list pos:start="926:20" pos:end="926:39">(<argument pos:start="926:21" pos:end="926:33"><expr pos:start="926:21" pos:end="926:33"><name pos:start="926:21" pos:end="926:33">test5_outfile</name></expr></argument>, <argument pos:start="926:36" pos:end="926:38"><expr pos:start="926:36" pos:end="926:38"><literal type="string" pos:start="926:36" pos:end="926:38">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="927:5" pos:end="929:42"><expr pos:start="927:5" pos:end="929:41"><name pos:start="927:5" pos:end="927:6">rv</name> <operator pos:start="927:8" pos:end="927:8">=</operator> <call pos:start="927:10" pos:end="929:41"><name pos:start="927:10" pos:end="927:23">curl_http_post</name><argument_list pos:start="927:24" pos:end="929:41">(<argument pos:start="927:25" pos:end="927:40"><expr pos:start="927:25" pos:end="927:40"><name pos:start="927:25" pos:end="927:40">US894_CACERT_URL</name></expr></argument>, <argument pos:start="927:43" pos:end="927:57"><expr pos:start="927:43" pos:end="927:57"><name pos:start="927:43" pos:end="927:57">US894_PKCS10_CT</name></expr></argument>, <argument pos:start="927:60" pos:end="927:75"><expr pos:start="927:60" pos:end="927:75"><name pos:start="927:60" pos:end="927:75">US894_PKCS10_REQ</name></expr></argument>,
                        <argument pos:start="928:25" pos:end="928:41"><expr pos:start="928:25" pos:end="928:41"><name pos:start="928:25" pos:end="928:41">US894_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="928:44" pos:end="928:56"><expr pos:start="928:44" pos:end="928:56"><name pos:start="928:44" pos:end="928:56">US894_CACERTS</name></expr></argument>, <argument pos:start="928:59" pos:end="928:72"><expr pos:start="928:59" pos:end="928:72"><name pos:start="928:59" pos:end="928:72">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="929:25" pos:end="929:28"><expr pos:start="929:25" pos:end="929:28"><name pos:start="929:25" pos:end="929:28">NULL</name></expr></argument>, <argument pos:start="929:31" pos:end="929:34"><expr pos:start="929:31" pos:end="929:34"><name pos:start="929:31" pos:end="929:34">NULL</name></expr></argument>, <argument pos:start="929:37" pos:end="929:40"><expr pos:start="929:37" pos:end="929:40"><name pos:start="929:37" pos:end="929:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="930:5" pos:end="930:20"><expr pos:start="930:5" pos:end="930:19"><call pos:start="930:5" pos:end="930:19"><name pos:start="930:5" pos:end="930:10">fclose</name><argument_list pos:start="930:11" pos:end="930:19">(<argument pos:start="930:12" pos:end="930:18"><expr pos:start="930:12" pos:end="930:18"><name pos:start="930:12" pos:end="930:18">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="932:5" pos:end="934:7">/*
     * we expect the server to respond with a 400
     */</comment>
    <expr_stmt pos:start="935:5" pos:end="935:25"><expr pos:start="935:5" pos:end="935:24"><call pos:start="935:5" pos:end="935:24"><name pos:start="935:5" pos:end="935:13">CU_ASSERT</name><argument_list pos:start="935:14" pos:end="935:24">(<argument pos:start="935:15" pos:end="935:23"><expr pos:start="935:15" pos:end="935:23"><name pos:start="935:15" pos:end="935:16">rv</name> <operator pos:start="935:18" pos:end="935:19">==</operator> <literal type="number" pos:start="935:21" pos:end="935:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="938:1" pos:end="944:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentiaiton is working.
 * The certificate used is signed by the explicit cert
 * chain. Valid HTTP authentication credentials are
 * also provided.  This should succeed.
 */</comment>
<function pos:start="945:1" pos:end="965:1"><type pos:start="945:1" pos:end="945:11"><specifier pos:start="945:1" pos:end="945:6">static</specifier> <name pos:start="945:8" pos:end="945:11">void</name></type> <name pos:start="945:13" pos:end="945:24">us894_test21</name> <parameter_list pos:start="945:26" pos:end="945:31">(<parameter pos:start="945:27" pos:end="945:30"><decl pos:start="945:27" pos:end="945:30"><type pos:start="945:27" pos:end="945:30"><name pos:start="945:27" pos:end="945:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="946:1" pos:end="965:1">{<block_content pos:start="947:5" pos:end="964:25">
    <decl_stmt pos:start="947:5" pos:end="947:12"><decl pos:start="947:5" pos:end="947:11"><type pos:start="947:5" pos:end="947:8"><name pos:start="947:5" pos:end="947:8">long</name></type> <name pos:start="947:10" pos:end="947:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="949:5" pos:end="950:5"><expr pos:start="949:5" pos:end="949:15"><name pos:start="949:5" pos:end="949:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="952:5" pos:end="952:13"><expr pos:start="952:5" pos:end="952:12"><call pos:start="952:5" pos:end="952:12"><name pos:start="952:5" pos:end="952:9">SLEEP</name><argument_list pos:start="952:10" pos:end="952:12">(<argument pos:start="952:11" pos:end="952:11"><expr pos:start="952:11" pos:end="952:11"><literal type="number" pos:start="952:11" pos:end="952:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="953:5" pos:end="959:53"><expr pos:start="953:5" pos:end="959:52"><name pos:start="953:5" pos:end="953:6">rv</name> <operator pos:start="953:8" pos:end="953:8">=</operator> <call pos:start="953:10" pos:end="959:52"><name pos:start="953:10" pos:end="953:31">curl_http_post_certuid</name><argument_list pos:start="953:32" pos:end="959:52">(<argument pos:start="953:33" pos:end="953:48"><expr pos:start="953:33" pos:end="953:48"><name pos:start="953:33" pos:end="953:48">US894_ENROLL_URL</name></expr></argument>,
                                <argument pos:start="954:33" pos:end="954:47"><expr pos:start="954:33" pos:end="954:47"><name pos:start="954:33" pos:end="954:47">US894_PKCS10_CT</name></expr></argument>,
                                <argument pos:start="955:33" pos:end="955:48"><expr pos:start="955:33" pos:end="955:48"><name pos:start="955:33" pos:end="955:48">US894_PKCS10_REQ</name></expr></argument>,
                                <argument pos:start="956:33" pos:end="956:49"><expr pos:start="956:33" pos:end="956:49"><name pos:start="956:33" pos:end="956:49">US894_UIDPWD_GOOD</name></expr></argument>,
                                <argument pos:start="957:33" pos:end="957:51"><expr pos:start="957:33" pos:end="957:51"><name pos:start="957:33" pos:end="957:51">US894_EXPLICIT_CERT</name></expr></argument>,
                                <argument pos:start="958:33" pos:end="958:50"><expr pos:start="958:33" pos:end="958:50"><name pos:start="958:33" pos:end="958:50">US894_EXPLICIT_KEY</name></expr></argument>,
                                <argument pos:start="959:33" pos:end="959:45"><expr pos:start="959:33" pos:end="959:45"><name pos:start="959:33" pos:end="959:45">US894_CACERTS</name></expr></argument>, <argument pos:start="959:48" pos:end="959:51"><expr pos:start="959:48" pos:end="959:51"><name pos:start="959:48" pos:end="959:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="960:5" pos:end="963:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="964:5" pos:end="964:25"><expr pos:start="964:5" pos:end="964:24"><call pos:start="964:5" pos:end="964:24"><name pos:start="964:5" pos:end="964:13">CU_ASSERT</name><argument_list pos:start="964:14" pos:end="964:24">(<argument pos:start="964:15" pos:end="964:23"><expr pos:start="964:15" pos:end="964:23"><name pos:start="964:15" pos:end="964:16">rv</name> <operator pos:start="964:18" pos:end="964:19">==</operator> <literal type="number" pos:start="964:21" pos:end="964:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="967:1" pos:end="973:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentiaiton is working.
 * The certificate used is signed by the explicit cert
 * chain. Invalid HTTP authentication credentials are
 * also provided.  This should fail with a 401 response.
 */</comment>
<function pos:start="974:1" pos:end="995:1"><type pos:start="974:1" pos:end="974:11"><specifier pos:start="974:1" pos:end="974:6">static</specifier> <name pos:start="974:8" pos:end="974:11">void</name></type> <name pos:start="974:13" pos:end="974:24">us894_test22</name> <parameter_list pos:start="974:26" pos:end="974:31">(<parameter pos:start="974:27" pos:end="974:30"><decl pos:start="974:27" pos:end="974:30"><type pos:start="974:27" pos:end="974:30"><name pos:start="974:27" pos:end="974:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="975:1" pos:end="995:1">{<block_content pos:start="976:5" pos:end="994:25">
    <decl_stmt pos:start="976:5" pos:end="976:12"><decl pos:start="976:5" pos:end="976:11"><type pos:start="976:5" pos:end="976:8"><name pos:start="976:5" pos:end="976:8">long</name></type> <name pos:start="976:10" pos:end="976:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="978:5" pos:end="979:5"><expr pos:start="978:5" pos:end="978:15"><name pos:start="978:5" pos:end="978:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="981:5" pos:end="981:13"><expr pos:start="981:5" pos:end="981:12"><call pos:start="981:5" pos:end="981:12"><name pos:start="981:5" pos:end="981:9">SLEEP</name><argument_list pos:start="981:10" pos:end="981:12">(<argument pos:start="981:11" pos:end="981:11"><expr pos:start="981:11" pos:end="981:11"><literal type="number" pos:start="981:11" pos:end="981:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="982:5" pos:end="989:38"><expr pos:start="982:5" pos:end="989:37"><name pos:start="982:5" pos:end="982:6">rv</name> <operator pos:start="982:8" pos:end="982:8">=</operator> <call pos:start="982:10" pos:end="989:37"><name pos:start="982:10" pos:end="982:31">curl_http_post_certuid</name><argument_list pos:start="982:32" pos:end="989:37">(<argument pos:start="982:33" pos:end="982:48"><expr pos:start="982:33" pos:end="982:48"><name pos:start="982:33" pos:end="982:48">US894_ENROLL_URL</name></expr></argument>,
                                <argument pos:start="983:33" pos:end="983:47"><expr pos:start="983:33" pos:end="983:47"><name pos:start="983:33" pos:end="983:47">US894_PKCS10_CT</name></expr></argument>,
                                <argument pos:start="984:33" pos:end="984:48"><expr pos:start="984:33" pos:end="984:48"><name pos:start="984:33" pos:end="984:48">US894_PKCS10_REQ</name></expr></argument>,
                                <argument pos:start="985:33" pos:end="985:48"><expr pos:start="985:33" pos:end="985:48"><name pos:start="985:33" pos:end="985:48">US894_UIDPWD_BAD</name></expr></argument>,
                                <argument pos:start="986:33" pos:end="986:51"><expr pos:start="986:33" pos:end="986:51"><name pos:start="986:33" pos:end="986:51">US894_EXPLICIT_CERT</name></expr></argument>,
                                <argument pos:start="987:33" pos:end="987:50"><expr pos:start="987:33" pos:end="987:50"><name pos:start="987:33" pos:end="987:50">US894_EXPLICIT_KEY</name></expr></argument>,
                                <argument pos:start="988:33" pos:end="988:45"><expr pos:start="988:33" pos:end="988:45"><name pos:start="988:33" pos:end="988:45">US894_CACERTS</name></expr></argument>,
                                <argument pos:start="989:33" pos:end="989:36"><expr pos:start="989:33" pos:end="989:36"><name pos:start="989:33" pos:end="989:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="990:5" pos:end="993:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with 401
     */</comment>
    <expr_stmt pos:start="994:5" pos:end="994:25"><expr pos:start="994:5" pos:end="994:24"><call pos:start="994:5" pos:end="994:24"><name pos:start="994:5" pos:end="994:13">CU_ASSERT</name><argument_list pos:start="994:14" pos:end="994:24">(<argument pos:start="994:15" pos:end="994:23"><expr pos:start="994:15" pos:end="994:23"><name pos:start="994:15" pos:end="994:16">rv</name> <operator pos:start="994:18" pos:end="994:19">==</operator> <literal type="number" pos:start="994:21" pos:end="994:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="997:1" pos:end="1003:3">/*
 * This test attempts to enroll without using a certificate
 * to identity the client, while using a good user ID/pwd.
 * However, the EST server is setup to only perform
 * certificate authentication (HTTP auth disabled).
 * This should fail with a 401 response.
 */</comment>
<function pos:start="1004:1" pos:end="1039:1"><type pos:start="1004:1" pos:end="1004:11"><specifier pos:start="1004:1" pos:end="1004:6">static</specifier> <name pos:start="1004:8" pos:end="1004:11">void</name></type> <name pos:start="1004:13" pos:end="1004:24">us894_test23</name> <parameter_list pos:start="1004:26" pos:end="1004:31">(<parameter pos:start="1004:27" pos:end="1004:30"><decl pos:start="1004:27" pos:end="1004:30"><type pos:start="1004:27" pos:end="1004:30"><name pos:start="1004:27" pos:end="1004:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1005:1" pos:end="1039:1">{<block_content pos:start="1006:5" pos:end="1037:5">
    <decl_stmt pos:start="1006:5" pos:end="1006:12"><decl pos:start="1006:5" pos:end="1006:11"><type pos:start="1006:5" pos:end="1006:8"><name pos:start="1006:5" pos:end="1006:8">long</name></type> <name pos:start="1006:10" pos:end="1006:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1008:5" pos:end="1009:5"><expr pos:start="1008:5" pos:end="1008:15"><name pos:start="1008:5" pos:end="1008:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="1011:5" pos:end="1011:34"><expr pos:start="1011:5" pos:end="1011:33"><name pos:start="1011:5" pos:end="1011:6">rv</name> <operator pos:start="1011:8" pos:end="1011:8">=</operator> <call pos:start="1011:10" pos:end="1011:33"><name pos:start="1011:10" pos:end="1011:30">st_proxy_http_disable</name><argument_list pos:start="1011:31" pos:end="1011:33">(<argument pos:start="1011:32" pos:end="1011:32"><expr pos:start="1011:32" pos:end="1011:32"><literal type="number" pos:start="1011:32" pos:end="1011:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1012:5" pos:end="1015:5"><if pos:start="1012:5" pos:end="1015:5">if <condition pos:start="1012:8" pos:end="1012:17">(<expr pos:start="1012:9" pos:end="1012:16"><name pos:start="1012:9" pos:end="1012:10">rv</name> <operator pos:start="1012:12" pos:end="1012:13">==</operator> <operator pos:start="1012:15" pos:end="1012:15">-</operator><literal type="number" pos:start="1012:16" pos:end="1012:16">1</literal></expr>)</condition> <block pos:start="1012:19" pos:end="1015:5">{<block_content pos:start="1013:9" pos:end="1014:15">
        <expr_stmt pos:start="1013:9" pos:end="1013:63"><expr pos:start="1013:9" pos:end="1013:62"><call pos:start="1013:9" pos:end="1013:62"><name pos:start="1013:9" pos:end="1013:14">printf</name><argument_list pos:start="1013:15" pos:end="1013:62">(<argument pos:start="1013:16" pos:end="1013:61"><expr pos:start="1013:16" pos:end="1013:61"><literal type="string" pos:start="1013:16" pos:end="1013:61">"Could not set HTTP authentication callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1014:9" pos:end="1014:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1017:5" pos:end="1017:13"><expr pos:start="1017:5" pos:end="1017:12"><call pos:start="1017:5" pos:end="1017:12"><name pos:start="1017:5" pos:end="1017:9">SLEEP</name><argument_list pos:start="1017:10" pos:end="1017:12">(<argument pos:start="1017:11" pos:end="1017:11"><expr pos:start="1017:11" pos:end="1017:11"><literal type="number" pos:start="1017:11" pos:end="1017:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1018:5" pos:end="1026:30"><expr pos:start="1018:5" pos:end="1026:29"><name pos:start="1018:5" pos:end="1018:6">rv</name> <operator pos:start="1018:8" pos:end="1018:8">=</operator> <call pos:start="1018:10" pos:end="1026:29"><name pos:start="1018:10" pos:end="1018:23">curl_http_post</name><argument_list pos:start="1018:24" pos:end="1026:29">(<argument pos:start="1018:25" pos:end="1018:40"><expr pos:start="1018:25" pos:end="1018:40"><name pos:start="1018:25" pos:end="1018:40">US894_ENROLL_URL</name></expr></argument>,
                        <argument pos:start="1019:25" pos:end="1019:39"><expr pos:start="1019:25" pos:end="1019:39"><name pos:start="1019:25" pos:end="1019:39">US894_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="1020:25" pos:end="1020:40"><expr pos:start="1020:25" pos:end="1020:40"><name pos:start="1020:25" pos:end="1020:40">US894_PKCS10_REQ</name></expr></argument>,
                        <argument pos:start="1021:25" pos:end="1021:41"><expr pos:start="1021:25" pos:end="1021:41"><name pos:start="1021:25" pos:end="1021:41">US894_UIDPWD_GOOD</name></expr></argument>,
                        <argument pos:start="1022:25" pos:end="1022:37"><expr pos:start="1022:25" pos:end="1022:37"><name pos:start="1022:25" pos:end="1022:37">US894_CACERTS</name></expr></argument>,
                        <argument pos:start="1023:25" pos:end="1023:38"><expr pos:start="1023:25" pos:end="1023:38"><name pos:start="1023:25" pos:end="1023:38">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="1024:25" pos:end="1024:28"><expr pos:start="1024:25" pos:end="1024:28"><name pos:start="1024:25" pos:end="1024:28">NULL</name></expr></argument>,
                        <argument pos:start="1025:25" pos:end="1025:28"><expr pos:start="1025:25" pos:end="1025:28"><name pos:start="1025:25" pos:end="1025:28">NULL</name></expr></argument>,
                        <argument pos:start="1026:25" pos:end="1026:28"><expr pos:start="1026:25" pos:end="1026:28"><name pos:start="1026:25" pos:end="1026:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1027:5" pos:end="1030:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with 401
     */</comment>
    <expr_stmt pos:start="1031:5" pos:end="1031:25"><expr pos:start="1031:5" pos:end="1031:24"><call pos:start="1031:5" pos:end="1031:24"><name pos:start="1031:5" pos:end="1031:13">CU_ASSERT</name><argument_list pos:start="1031:14" pos:end="1031:24">(<argument pos:start="1031:15" pos:end="1031:23"><expr pos:start="1031:15" pos:end="1031:23"><name pos:start="1031:15" pos:end="1031:16">rv</name> <operator pos:start="1031:18" pos:end="1031:19">==</operator> <literal type="number" pos:start="1031:21" pos:end="1031:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1033:5" pos:end="1033:34"><expr pos:start="1033:5" pos:end="1033:33"><name pos:start="1033:5" pos:end="1033:6">rv</name> <operator pos:start="1033:8" pos:end="1033:8">=</operator> <call pos:start="1033:10" pos:end="1033:33"><name pos:start="1033:10" pos:end="1033:30">st_proxy_http_disable</name><argument_list pos:start="1033:31" pos:end="1033:33">(<argument pos:start="1033:32" pos:end="1033:32"><expr pos:start="1033:32" pos:end="1033:32"><literal type="number" pos:start="1033:32" pos:end="1033:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1034:5" pos:end="1037:5"><if pos:start="1034:5" pos:end="1037:5">if <condition pos:start="1034:8" pos:end="1034:17">(<expr pos:start="1034:9" pos:end="1034:16"><name pos:start="1034:9" pos:end="1034:10">rv</name> <operator pos:start="1034:12" pos:end="1034:13">==</operator> <operator pos:start="1034:15" pos:end="1034:15">-</operator><literal type="number" pos:start="1034:16" pos:end="1034:16">1</literal></expr>)</condition> <block pos:start="1034:19" pos:end="1037:5">{<block_content pos:start="1035:9" pos:end="1036:15">
        <expr_stmt pos:start="1035:9" pos:end="1035:63"><expr pos:start="1035:9" pos:end="1035:62"><call pos:start="1035:9" pos:end="1035:62"><name pos:start="1035:9" pos:end="1035:14">printf</name><argument_list pos:start="1035:15" pos:end="1035:62">(<argument pos:start="1035:16" pos:end="1035:61"><expr pos:start="1035:16" pos:end="1035:61"><literal type="string" pos:start="1035:16" pos:end="1035:61">"Could not set HTTP authentication callback\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1036:9" pos:end="1036:15">return;</return>
    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block" pos:start="1041:1" pos:end="1043:3">/*
 * Test the parameters of est_proxy_set_server()
 */</comment>
<function pos:start="1044:1" pos:end="1113:1"><type pos:start="1044:1" pos:end="1044:11"><specifier pos:start="1044:1" pos:end="1044:6">static</specifier> <name pos:start="1044:8" pos:end="1044:11">void</name></type> <name pos:start="1044:13" pos:end="1044:24">us894_test24</name> <parameter_list pos:start="1044:26" pos:end="1044:31">(<parameter pos:start="1044:27" pos:end="1044:30"><decl pos:start="1044:27" pos:end="1044:30"><type pos:start="1044:27" pos:end="1044:30"><name pos:start="1044:27" pos:end="1044:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1045:1" pos:end="1113:1">{<block_content pos:start="1046:5" pos:end="1112:28">
    <decl_stmt pos:start="1046:5" pos:end="1046:34"><decl pos:start="1046:5" pos:end="1046:33"><type pos:start="1046:5" pos:end="1046:19"><name pos:start="1046:5" pos:end="1046:12">unsigned</name> <name pos:start="1046:14" pos:end="1046:17">char</name> <modifier pos:start="1046:19" pos:end="1046:19">*</modifier></type><name pos:start="1046:20" pos:end="1046:26">cacerts</name> <init pos:start="1046:28" pos:end="1046:33">= <expr pos:start="1046:30" pos:end="1046:33"><name pos:start="1046:30" pos:end="1046:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1047:5" pos:end="1047:24"><decl pos:start="1047:5" pos:end="1047:23"><type pos:start="1047:5" pos:end="1047:7"><name pos:start="1047:5" pos:end="1047:7">int</name></type> <name pos:start="1047:9" pos:end="1047:19">cacerts_len</name> <init pos:start="1047:21" pos:end="1047:23">= <expr pos:start="1047:23" pos:end="1047:23"><literal type="number" pos:start="1047:23" pos:end="1047:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1048:5" pos:end="1048:24"><decl pos:start="1048:5" pos:end="1048:15"><type pos:start="1048:5" pos:end="1048:9"><name pos:start="1048:5" pos:end="1048:7">BIO</name> <modifier pos:start="1048:9" pos:end="1048:9">*</modifier></type><name pos:start="1048:10" pos:end="1048:15">certin</name></decl>, <decl pos:start="1048:18" pos:end="1048:23"><type ref="prev" pos:start="1048:5" pos:end="1048:9"><modifier pos:start="1048:18" pos:end="1048:18">*</modifier></type><name pos:start="1048:19" pos:end="1048:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1049:5" pos:end="1049:12"><decl pos:start="1049:5" pos:end="1049:11"><type pos:start="1049:5" pos:end="1049:10"><name pos:start="1049:5" pos:end="1049:8">X509</name> <modifier pos:start="1049:10" pos:end="1049:10">*</modifier></type><name pos:start="1049:11" pos:end="1049:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1050:5" pos:end="1050:24"><decl pos:start="1050:5" pos:end="1050:23"><type pos:start="1050:5" pos:end="1050:14"><name pos:start="1050:5" pos:end="1050:12">EVP_PKEY</name> <modifier pos:start="1050:14" pos:end="1050:14">*</modifier></type> <name pos:start="1050:16" pos:end="1050:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1051:5" pos:end="1051:11"><decl pos:start="1051:5" pos:end="1051:10"><type pos:start="1051:5" pos:end="1051:7"><name pos:start="1051:5" pos:end="1051:7">int</name></type> <name pos:start="1051:9" pos:end="1051:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1052:5" pos:end="1052:17"><decl pos:start="1052:5" pos:end="1052:16"><type pos:start="1052:5" pos:end="1052:13"><name pos:start="1052:5" pos:end="1052:11">EST_CTX</name> <modifier pos:start="1052:13" pos:end="1052:13">*</modifier></type><name pos:start="1052:14" pos:end="1052:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1053:5" pos:end="1053:21"><decl pos:start="1053:5" pos:end="1053:20"><type pos:start="1053:5" pos:end="1053:13"><name pos:start="1053:5" pos:end="1053:13">EST_ERROR</name></type> <name pos:start="1053:15" pos:end="1053:20">est_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1055:5" pos:end="1056:5"><expr pos:start="1055:5" pos:end="1055:15"><name pos:start="1055:5" pos:end="1055:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="1058:5" pos:end="1060:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="1061:5" pos:end="1061:59"><expr pos:start="1061:5" pos:end="1061:58"><name pos:start="1061:5" pos:end="1061:15">cacerts_len</name> <operator pos:start="1061:17" pos:end="1061:17">=</operator> <call pos:start="1061:19" pos:end="1061:58"><name pos:start="1061:19" pos:end="1061:34">read_binary_file</name><argument_list pos:start="1061:35" pos:end="1061:58">(<argument pos:start="1061:36" pos:end="1061:47"><expr pos:start="1061:36" pos:end="1061:47"><name pos:start="1061:36" pos:end="1061:47">US894_CACERT</name></expr></argument>, <argument pos:start="1061:50" pos:end="1061:57"><expr pos:start="1061:50" pos:end="1061:57"><operator pos:start="1061:50" pos:end="1061:50">&amp;</operator><name pos:start="1061:51" pos:end="1061:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1062:5" pos:end="1062:31"><expr pos:start="1062:5" pos:end="1062:30"><call pos:start="1062:5" pos:end="1062:30"><name pos:start="1062:5" pos:end="1062:13">CU_ASSERT</name><argument_list pos:start="1062:14" pos:end="1062:30">(<argument pos:start="1062:15" pos:end="1062:29"><expr pos:start="1062:15" pos:end="1062:29"><name pos:start="1062:15" pos:end="1062:25">cacerts_len</name> <operator pos:start="1062:27" pos:end="1062:27">&gt;</operator> <literal type="number" pos:start="1062:29" pos:end="1062:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1064:5" pos:end="1066:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="1067:5" pos:end="1067:44"><expr pos:start="1067:5" pos:end="1067:43"><name pos:start="1067:5" pos:end="1067:10">certin</name> <operator pos:start="1067:12" pos:end="1067:12">=</operator> <call pos:start="1067:14" pos:end="1067:43"><name pos:start="1067:14" pos:end="1067:20">BIO_new</name><argument_list pos:start="1067:21" pos:end="1067:43">(<argument pos:start="1067:22" pos:end="1067:42"><expr pos:start="1067:22" pos:end="1067:42"><call pos:start="1067:22" pos:end="1067:42"><name pos:start="1067:22" pos:end="1067:40">BIO_s_file_internal</name><argument_list pos:start="1067:41" pos:end="1067:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1068:5" pos:end="1068:54"><expr pos:start="1068:5" pos:end="1068:53"><name pos:start="1068:5" pos:end="1068:6">rv</name> <operator pos:start="1068:8" pos:end="1068:8">=</operator> <call pos:start="1068:10" pos:end="1068:53"><name pos:start="1068:10" pos:end="1068:26">BIO_read_filename</name><argument_list pos:start="1068:27" pos:end="1068:53">(<argument pos:start="1068:28" pos:end="1068:33"><expr pos:start="1068:28" pos:end="1068:33"><name pos:start="1068:28" pos:end="1068:33">certin</name></expr></argument>, <argument pos:start="1068:36" pos:end="1068:52"><expr pos:start="1068:36" pos:end="1068:52"><name pos:start="1068:36" pos:end="1068:52">US894_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1069:5" pos:end="1069:22"><expr pos:start="1069:5" pos:end="1069:21"><call pos:start="1069:5" pos:end="1069:21"><name pos:start="1069:5" pos:end="1069:13">CU_ASSERT</name><argument_list pos:start="1069:14" pos:end="1069:21">(<argument pos:start="1069:15" pos:end="1069:20"><expr pos:start="1069:15" pos:end="1069:20"><name pos:start="1069:15" pos:end="1069:16">rv</name> <operator pos:start="1069:18" pos:end="1069:18">&gt;</operator> <literal type="number" pos:start="1069:20" pos:end="1069:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1070:5" pos:end="1070:52"><expr pos:start="1070:5" pos:end="1070:51"><name pos:start="1070:5" pos:end="1070:5">x</name> <operator pos:start="1070:7" pos:end="1070:7">=</operator> <call pos:start="1070:9" pos:end="1070:51"><name pos:start="1070:9" pos:end="1070:25">PEM_read_bio_X509</name><argument_list pos:start="1070:26" pos:end="1070:51">(<argument pos:start="1070:27" pos:end="1070:32"><expr pos:start="1070:27" pos:end="1070:32"><name pos:start="1070:27" pos:end="1070:32">certin</name></expr></argument>, <argument pos:start="1070:35" pos:end="1070:38"><expr pos:start="1070:35" pos:end="1070:38"><name pos:start="1070:35" pos:end="1070:38">NULL</name></expr></argument>, <argument pos:start="1070:41" pos:end="1070:44"><expr pos:start="1070:41" pos:end="1070:44"><name pos:start="1070:41" pos:end="1070:44">NULL</name></expr></argument>, <argument pos:start="1070:47" pos:end="1070:50"><expr pos:start="1070:47" pos:end="1070:50"><name pos:start="1070:47" pos:end="1070:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1071:5" pos:end="1071:25"><expr pos:start="1071:5" pos:end="1071:24"><call pos:start="1071:5" pos:end="1071:24"><name pos:start="1071:5" pos:end="1071:13">CU_ASSERT</name><argument_list pos:start="1071:14" pos:end="1071:24">(<argument pos:start="1071:15" pos:end="1071:23"><expr pos:start="1071:15" pos:end="1071:23"><name pos:start="1071:15" pos:end="1071:15">x</name> <operator pos:start="1071:17" pos:end="1071:18">!=</operator> <name pos:start="1071:20" pos:end="1071:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1072:5" pos:end="1072:21"><expr pos:start="1072:5" pos:end="1072:20"><call pos:start="1072:5" pos:end="1072:20"><name pos:start="1072:5" pos:end="1072:12">BIO_free</name><argument_list pos:start="1072:13" pos:end="1072:20">(<argument pos:start="1072:14" pos:end="1072:19"><expr pos:start="1072:14" pos:end="1072:19"><name pos:start="1072:14" pos:end="1072:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1074:5" pos:end="1076:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="1077:5" pos:end="1077:43"><expr pos:start="1077:5" pos:end="1077:42"><name pos:start="1077:5" pos:end="1077:9">keyin</name> <operator pos:start="1077:11" pos:end="1077:11">=</operator> <call pos:start="1077:13" pos:end="1077:42"><name pos:start="1077:13" pos:end="1077:19">BIO_new</name><argument_list pos:start="1077:20" pos:end="1077:42">(<argument pos:start="1077:21" pos:end="1077:41"><expr pos:start="1077:21" pos:end="1077:41"><call pos:start="1077:21" pos:end="1077:41"><name pos:start="1077:21" pos:end="1077:39">BIO_s_file_internal</name><argument_list pos:start="1077:40" pos:end="1077:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1078:5" pos:end="1078:52"><expr pos:start="1078:5" pos:end="1078:51"><name pos:start="1078:5" pos:end="1078:6">rv</name> <operator pos:start="1078:8" pos:end="1078:8">=</operator> <call pos:start="1078:10" pos:end="1078:51"><name pos:start="1078:10" pos:end="1078:26">BIO_read_filename</name><argument_list pos:start="1078:27" pos:end="1078:51">(<argument pos:start="1078:28" pos:end="1078:32"><expr pos:start="1078:28" pos:end="1078:32"><name pos:start="1078:28" pos:end="1078:32">keyin</name></expr></argument>, <argument pos:start="1078:35" pos:end="1078:50"><expr pos:start="1078:35" pos:end="1078:50"><name pos:start="1078:35" pos:end="1078:50">US894_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1079:5" pos:end="1079:22"><expr pos:start="1079:5" pos:end="1079:21"><call pos:start="1079:5" pos:end="1079:21"><name pos:start="1079:5" pos:end="1079:13">CU_ASSERT</name><argument_list pos:start="1079:14" pos:end="1079:21">(<argument pos:start="1079:15" pos:end="1079:20"><expr pos:start="1079:15" pos:end="1079:20"><name pos:start="1079:15" pos:end="1079:16">rv</name> <operator pos:start="1079:18" pos:end="1079:18">&gt;</operator> <literal type="number" pos:start="1079:20" pos:end="1079:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1080:5" pos:end="1080:64"><expr pos:start="1080:5" pos:end="1080:63"><name pos:start="1080:5" pos:end="1080:12">priv_key</name> <operator pos:start="1080:14" pos:end="1080:14">=</operator> <call pos:start="1080:16" pos:end="1080:63"><name pos:start="1080:16" pos:end="1080:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="1080:39" pos:end="1080:63">(<argument pos:start="1080:40" pos:end="1080:44"><expr pos:start="1080:40" pos:end="1080:44"><name pos:start="1080:40" pos:end="1080:44">keyin</name></expr></argument>, <argument pos:start="1080:47" pos:end="1080:50"><expr pos:start="1080:47" pos:end="1080:50"><name pos:start="1080:47" pos:end="1080:50">NULL</name></expr></argument>, <argument pos:start="1080:53" pos:end="1080:56"><expr pos:start="1080:53" pos:end="1080:56"><name pos:start="1080:53" pos:end="1080:56">NULL</name></expr></argument>, <argument pos:start="1080:59" pos:end="1080:62"><expr pos:start="1080:59" pos:end="1080:62"><name pos:start="1080:59" pos:end="1080:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1081:5" pos:end="1081:32"><expr pos:start="1081:5" pos:end="1081:31"><call pos:start="1081:5" pos:end="1081:31"><name pos:start="1081:5" pos:end="1081:13">CU_ASSERT</name><argument_list pos:start="1081:14" pos:end="1081:31">(<argument pos:start="1081:15" pos:end="1081:30"><expr pos:start="1081:15" pos:end="1081:30"><name pos:start="1081:15" pos:end="1081:22">priv_key</name> <operator pos:start="1081:24" pos:end="1081:25">!=</operator> <name pos:start="1081:27" pos:end="1081:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1082:5" pos:end="1082:20"><expr pos:start="1082:5" pos:end="1082:19"><call pos:start="1082:5" pos:end="1082:19"><name pos:start="1082:5" pos:end="1082:12">BIO_free</name><argument_list pos:start="1082:13" pos:end="1082:19">(<argument pos:start="1082:14" pos:end="1082:18"><expr pos:start="1082:14" pos:end="1082:18"><name pos:start="1082:14" pos:end="1082:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1084:5" pos:end="1086:7">/*
     * init EST in proxy mode
     */</comment>
    <expr_stmt pos:start="1087:5" pos:end="1087:44"><expr pos:start="1087:5" pos:end="1087:43"><call pos:start="1087:5" pos:end="1087:43"><name pos:start="1087:5" pos:end="1087:19">est_init_logger</name><argument_list pos:start="1087:20" pos:end="1087:43">(<argument pos:start="1087:21" pos:end="1087:36"><expr pos:start="1087:21" pos:end="1087:36"><name pos:start="1087:21" pos:end="1087:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="1087:39" pos:end="1087:42"><expr pos:start="1087:39" pos:end="1087:42"><name pos:start="1087:39" pos:end="1087:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1088:5" pos:end="1098:18"><expr pos:start="1088:5" pos:end="1098:17"><name pos:start="1088:5" pos:end="1088:7">ctx</name> <operator pos:start="1088:9" pos:end="1088:9">=</operator> <call pos:start="1088:11" pos:end="1098:17"><name pos:start="1088:11" pos:end="1088:24">est_proxy_init</name><argument_list pos:start="1088:25" pos:end="1098:17">(
        <argument pos:start="1089:9" pos:end="1089:15"><expr pos:start="1089:9" pos:end="1089:15"><name pos:start="1089:9" pos:end="1089:15">cacerts</name></expr></argument>,
        <argument pos:start="1090:9" pos:end="1090:19"><expr pos:start="1090:9" pos:end="1090:19"><name pos:start="1090:9" pos:end="1090:19">cacerts_len</name></expr></argument>,
        <argument pos:start="1091:9" pos:end="1091:15"><expr pos:start="1091:9" pos:end="1091:15"><name pos:start="1091:9" pos:end="1091:15">cacerts</name></expr></argument>,
        <argument pos:start="1092:9" pos:end="1092:19"><expr pos:start="1092:9" pos:end="1092:19"><name pos:start="1092:9" pos:end="1092:19">cacerts_len</name></expr></argument>,
        <argument pos:start="1093:9" pos:end="1093:27"><expr pos:start="1093:9" pos:end="1093:27"><name pos:start="1093:9" pos:end="1093:27">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="1094:9" pos:end="1094:19"><expr pos:start="1094:9" pos:end="1094:19"><literal type="string" pos:start="1094:9" pos:end="1094:19">"testrealm"</literal></expr></argument>,
        <argument pos:start="1095:9" pos:end="1095:9"><expr pos:start="1095:9" pos:end="1095:9"><name pos:start="1095:9" pos:end="1095:9">x</name></expr></argument>,
        <argument pos:start="1096:9" pos:end="1096:16"><expr pos:start="1096:9" pos:end="1096:16"><name pos:start="1096:9" pos:end="1096:16">priv_key</name></expr></argument>,
        <argument pos:start="1097:9" pos:end="1097:17"><expr pos:start="1097:9" pos:end="1097:17"><literal type="string" pos:start="1097:9" pos:end="1097:17">"estuser"</literal></expr></argument>,
        <argument pos:start="1098:9" pos:end="1098:16"><expr pos:start="1098:9" pos:end="1098:16"><literal type="string" pos:start="1098:9" pos:end="1098:16">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1100:5" pos:end="1100:27"><expr pos:start="1100:5" pos:end="1100:26"><call pos:start="1100:5" pos:end="1100:26"><name pos:start="1100:5" pos:end="1100:13">CU_ASSERT</name><argument_list pos:start="1100:14" pos:end="1100:26">(<argument pos:start="1100:15" pos:end="1100:25"><expr pos:start="1100:15" pos:end="1100:25"><name pos:start="1100:15" pos:end="1100:17">ctx</name> <operator pos:start="1100:19" pos:end="1100:20">!=</operator> <name pos:start="1100:22" pos:end="1100:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1102:5" pos:end="1102:59"><expr pos:start="1102:5" pos:end="1102:58"><name pos:start="1102:5" pos:end="1102:10">est_rv</name> <operator pos:start="1102:12" pos:end="1102:12">=</operator> <call pos:start="1102:14" pos:end="1102:58"><name pos:start="1102:14" pos:end="1102:33">est_proxy_set_server</name><argument_list pos:start="1102:34" pos:end="1102:58">(<argument pos:start="1102:35" pos:end="1102:38"><expr pos:start="1102:35" pos:end="1102:38"><name pos:start="1102:35" pos:end="1102:38">NULL</name></expr></argument>, <argument pos:start="1102:41" pos:end="1102:51"><expr pos:start="1102:41" pos:end="1102:51"><literal type="string" pos:start="1102:41" pos:end="1102:51">"127.0.0.1"</literal></expr></argument>, <argument pos:start="1102:54" pos:end="1102:57"><expr pos:start="1102:54" pos:end="1102:57"><literal type="number" pos:start="1102:54" pos:end="1102:57">8080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1103:5" pos:end="1103:40"><expr pos:start="1103:5" pos:end="1103:39"><call pos:start="1103:5" pos:end="1103:39"><name pos:start="1103:5" pos:end="1103:13">CU_ASSERT</name><argument_list pos:start="1103:14" pos:end="1103:39">(<argument pos:start="1103:15" pos:end="1103:38"><expr pos:start="1103:15" pos:end="1103:38"><name pos:start="1103:15" pos:end="1103:20">est_rv</name> <operator pos:start="1103:22" pos:end="1103:23">==</operator> <name pos:start="1103:25" pos:end="1103:38">EST_ERR_NO_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1105:5" pos:end="1105:51"><expr pos:start="1105:5" pos:end="1105:50"><name pos:start="1105:5" pos:end="1105:10">est_rv</name> <operator pos:start="1105:12" pos:end="1105:12">=</operator> <call pos:start="1105:14" pos:end="1105:50"><name pos:start="1105:14" pos:end="1105:33">est_proxy_set_server</name><argument_list pos:start="1105:34" pos:end="1105:50">(<argument pos:start="1105:35" pos:end="1105:37"><expr pos:start="1105:35" pos:end="1105:37"><name pos:start="1105:35" pos:end="1105:37">ctx</name></expr></argument>, <argument pos:start="1105:40" pos:end="1105:43"><expr pos:start="1105:40" pos:end="1105:43"><name pos:start="1105:40" pos:end="1105:43">NULL</name></expr></argument>, <argument pos:start="1105:46" pos:end="1105:49"><expr pos:start="1105:46" pos:end="1105:49"><literal type="number" pos:start="1105:46" pos:end="1105:49">8080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1106:5" pos:end="1106:53"><expr pos:start="1106:5" pos:end="1106:52"><call pos:start="1106:5" pos:end="1106:52"><name pos:start="1106:5" pos:end="1106:13">CU_ASSERT</name><argument_list pos:start="1106:14" pos:end="1106:52">(<argument pos:start="1106:15" pos:end="1106:51"><expr pos:start="1106:15" pos:end="1106:51"><name pos:start="1106:15" pos:end="1106:20">est_rv</name> <operator pos:start="1106:22" pos:end="1106:23">==</operator> <name pos:start="1106:25" pos:end="1106:51">EST_ERR_INVALID_SERVER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1108:5" pos:end="1108:59"><expr pos:start="1108:5" pos:end="1108:58"><name pos:start="1108:5" pos:end="1108:10">est_rv</name> <operator pos:start="1108:12" pos:end="1108:12">=</operator> <call pos:start="1108:14" pos:end="1108:58"><name pos:start="1108:14" pos:end="1108:33">est_proxy_set_server</name><argument_list pos:start="1108:34" pos:end="1108:58">(<argument pos:start="1108:35" pos:end="1108:37"><expr pos:start="1108:35" pos:end="1108:37"><name pos:start="1108:35" pos:end="1108:37">ctx</name></expr></argument>, <argument pos:start="1108:40" pos:end="1108:50"><expr pos:start="1108:40" pos:end="1108:50"><literal type="string" pos:start="1108:40" pos:end="1108:50">"127.0.0.1"</literal></expr></argument>, <argument pos:start="1108:53" pos:end="1108:57"><expr pos:start="1108:53" pos:end="1108:57"><literal type="number" pos:start="1108:53" pos:end="1108:57">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1109:5" pos:end="1109:50"><expr pos:start="1109:5" pos:end="1109:49"><call pos:start="1109:5" pos:end="1109:49"><name pos:start="1109:5" pos:end="1109:13">CU_ASSERT</name><argument_list pos:start="1109:14" pos:end="1109:49">(<argument pos:start="1109:15" pos:end="1109:48"><expr pos:start="1109:15" pos:end="1109:48"><name pos:start="1109:15" pos:end="1109:20">est_rv</name> <operator pos:start="1109:22" pos:end="1109:23">==</operator> <name pos:start="1109:25" pos:end="1109:48">EST_ERR_INVALID_PORT_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1111:5" pos:end="1111:17"><expr pos:start="1111:5" pos:end="1111:16"><call pos:start="1111:5" pos:end="1111:16"><name pos:start="1111:5" pos:end="1111:13">X509_free</name><argument_list pos:start="1111:14" pos:end="1111:16">(<argument pos:start="1111:15" pos:end="1111:15"><expr pos:start="1111:15" pos:end="1111:15"><name pos:start="1111:15" pos:end="1111:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1112:5" pos:end="1112:28"><expr pos:start="1112:5" pos:end="1112:27"><call pos:start="1112:5" pos:end="1112:27"><name pos:start="1112:5" pos:end="1112:17">EVP_PKEY_free</name><argument_list pos:start="1112:18" pos:end="1112:27">(<argument pos:start="1112:19" pos:end="1112:26"><expr pos:start="1112:19" pos:end="1112:26"><name pos:start="1112:19" pos:end="1112:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1115:1" pos:end="1117:3">/*
 * Test the parameters of est_proxy_set_auth_mode()
 */</comment>
<function pos:start="1118:1" pos:end="1188:1"><type pos:start="1118:1" pos:end="1118:11"><specifier pos:start="1118:1" pos:end="1118:6">static</specifier> <name pos:start="1118:8" pos:end="1118:11">void</name></type> <name pos:start="1118:13" pos:end="1118:24">us894_test25</name> <parameter_list pos:start="1118:26" pos:end="1118:31">(<parameter pos:start="1118:27" pos:end="1118:30"><decl pos:start="1118:27" pos:end="1118:30"><type pos:start="1118:27" pos:end="1118:30"><name pos:start="1118:27" pos:end="1118:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1119:1" pos:end="1188:1">{<block_content pos:start="1120:5" pos:end="1187:28">
    <decl_stmt pos:start="1120:5" pos:end="1120:34"><decl pos:start="1120:5" pos:end="1120:33"><type pos:start="1120:5" pos:end="1120:19"><name pos:start="1120:5" pos:end="1120:12">unsigned</name> <name pos:start="1120:14" pos:end="1120:17">char</name> <modifier pos:start="1120:19" pos:end="1120:19">*</modifier></type><name pos:start="1120:20" pos:end="1120:26">cacerts</name> <init pos:start="1120:28" pos:end="1120:33">= <expr pos:start="1120:30" pos:end="1120:33"><name pos:start="1120:30" pos:end="1120:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1121:5" pos:end="1121:24"><decl pos:start="1121:5" pos:end="1121:23"><type pos:start="1121:5" pos:end="1121:7"><name pos:start="1121:5" pos:end="1121:7">int</name></type> <name pos:start="1121:9" pos:end="1121:19">cacerts_len</name> <init pos:start="1121:21" pos:end="1121:23">= <expr pos:start="1121:23" pos:end="1121:23"><literal type="number" pos:start="1121:23" pos:end="1121:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1122:5" pos:end="1122:24"><decl pos:start="1122:5" pos:end="1122:15"><type pos:start="1122:5" pos:end="1122:9"><name pos:start="1122:5" pos:end="1122:7">BIO</name> <modifier pos:start="1122:9" pos:end="1122:9">*</modifier></type><name pos:start="1122:10" pos:end="1122:15">certin</name></decl>, <decl pos:start="1122:18" pos:end="1122:23"><type ref="prev" pos:start="1122:5" pos:end="1122:9"><modifier pos:start="1122:18" pos:end="1122:18">*</modifier></type><name pos:start="1122:19" pos:end="1122:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1123:5" pos:end="1123:12"><decl pos:start="1123:5" pos:end="1123:11"><type pos:start="1123:5" pos:end="1123:10"><name pos:start="1123:5" pos:end="1123:8">X509</name> <modifier pos:start="1123:10" pos:end="1123:10">*</modifier></type><name pos:start="1123:11" pos:end="1123:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1124:5" pos:end="1124:24"><decl pos:start="1124:5" pos:end="1124:23"><type pos:start="1124:5" pos:end="1124:14"><name pos:start="1124:5" pos:end="1124:12">EVP_PKEY</name> <modifier pos:start="1124:14" pos:end="1124:14">*</modifier></type> <name pos:start="1124:16" pos:end="1124:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1125:5" pos:end="1125:11"><decl pos:start="1125:5" pos:end="1125:10"><type pos:start="1125:5" pos:end="1125:7"><name pos:start="1125:5" pos:end="1125:7">int</name></type> <name pos:start="1125:9" pos:end="1125:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1126:5" pos:end="1126:17"><decl pos:start="1126:5" pos:end="1126:16"><type pos:start="1126:5" pos:end="1126:13"><name pos:start="1126:5" pos:end="1126:11">EST_CTX</name> <modifier pos:start="1126:13" pos:end="1126:13">*</modifier></type><name pos:start="1126:14" pos:end="1126:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1127:5" pos:end="1127:21"><decl pos:start="1127:5" pos:end="1127:20"><type pos:start="1127:5" pos:end="1127:13"><name pos:start="1127:5" pos:end="1127:13">EST_ERROR</name></type> <name pos:start="1127:15" pos:end="1127:20">est_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1129:5" pos:end="1130:5"><expr pos:start="1129:5" pos:end="1129:15"><name pos:start="1129:5" pos:end="1129:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="1132:5" pos:end="1134:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="1135:5" pos:end="1135:59"><expr pos:start="1135:5" pos:end="1135:58"><name pos:start="1135:5" pos:end="1135:15">cacerts_len</name> <operator pos:start="1135:17" pos:end="1135:17">=</operator> <call pos:start="1135:19" pos:end="1135:58"><name pos:start="1135:19" pos:end="1135:34">read_binary_file</name><argument_list pos:start="1135:35" pos:end="1135:58">(<argument pos:start="1135:36" pos:end="1135:47"><expr pos:start="1135:36" pos:end="1135:47"><name pos:start="1135:36" pos:end="1135:47">US894_CACERT</name></expr></argument>, <argument pos:start="1135:50" pos:end="1135:57"><expr pos:start="1135:50" pos:end="1135:57"><operator pos:start="1135:50" pos:end="1135:50">&amp;</operator><name pos:start="1135:51" pos:end="1135:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1136:5" pos:end="1136:31"><expr pos:start="1136:5" pos:end="1136:30"><call pos:start="1136:5" pos:end="1136:30"><name pos:start="1136:5" pos:end="1136:13">CU_ASSERT</name><argument_list pos:start="1136:14" pos:end="1136:30">(<argument pos:start="1136:15" pos:end="1136:29"><expr pos:start="1136:15" pos:end="1136:29"><name pos:start="1136:15" pos:end="1136:25">cacerts_len</name> <operator pos:start="1136:27" pos:end="1136:27">&gt;</operator> <literal type="number" pos:start="1136:29" pos:end="1136:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1138:5" pos:end="1140:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="1141:5" pos:end="1141:44"><expr pos:start="1141:5" pos:end="1141:43"><name pos:start="1141:5" pos:end="1141:10">certin</name> <operator pos:start="1141:12" pos:end="1141:12">=</operator> <call pos:start="1141:14" pos:end="1141:43"><name pos:start="1141:14" pos:end="1141:20">BIO_new</name><argument_list pos:start="1141:21" pos:end="1141:43">(<argument pos:start="1141:22" pos:end="1141:42"><expr pos:start="1141:22" pos:end="1141:42"><call pos:start="1141:22" pos:end="1141:42"><name pos:start="1141:22" pos:end="1141:40">BIO_s_file_internal</name><argument_list pos:start="1141:41" pos:end="1141:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1142:5" pos:end="1142:54"><expr pos:start="1142:5" pos:end="1142:53"><name pos:start="1142:5" pos:end="1142:6">rv</name> <operator pos:start="1142:8" pos:end="1142:8">=</operator> <call pos:start="1142:10" pos:end="1142:53"><name pos:start="1142:10" pos:end="1142:26">BIO_read_filename</name><argument_list pos:start="1142:27" pos:end="1142:53">(<argument pos:start="1142:28" pos:end="1142:33"><expr pos:start="1142:28" pos:end="1142:33"><name pos:start="1142:28" pos:end="1142:33">certin</name></expr></argument>, <argument pos:start="1142:36" pos:end="1142:52"><expr pos:start="1142:36" pos:end="1142:52"><name pos:start="1142:36" pos:end="1142:52">US894_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1143:5" pos:end="1143:22"><expr pos:start="1143:5" pos:end="1143:21"><call pos:start="1143:5" pos:end="1143:21"><name pos:start="1143:5" pos:end="1143:13">CU_ASSERT</name><argument_list pos:start="1143:14" pos:end="1143:21">(<argument pos:start="1143:15" pos:end="1143:20"><expr pos:start="1143:15" pos:end="1143:20"><name pos:start="1143:15" pos:end="1143:16">rv</name> <operator pos:start="1143:18" pos:end="1143:18">&gt;</operator> <literal type="number" pos:start="1143:20" pos:end="1143:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1144:5" pos:end="1144:52"><expr pos:start="1144:5" pos:end="1144:51"><name pos:start="1144:5" pos:end="1144:5">x</name> <operator pos:start="1144:7" pos:end="1144:7">=</operator> <call pos:start="1144:9" pos:end="1144:51"><name pos:start="1144:9" pos:end="1144:25">PEM_read_bio_X509</name><argument_list pos:start="1144:26" pos:end="1144:51">(<argument pos:start="1144:27" pos:end="1144:32"><expr pos:start="1144:27" pos:end="1144:32"><name pos:start="1144:27" pos:end="1144:32">certin</name></expr></argument>, <argument pos:start="1144:35" pos:end="1144:38"><expr pos:start="1144:35" pos:end="1144:38"><name pos:start="1144:35" pos:end="1144:38">NULL</name></expr></argument>, <argument pos:start="1144:41" pos:end="1144:44"><expr pos:start="1144:41" pos:end="1144:44"><name pos:start="1144:41" pos:end="1144:44">NULL</name></expr></argument>, <argument pos:start="1144:47" pos:end="1144:50"><expr pos:start="1144:47" pos:end="1144:50"><name pos:start="1144:47" pos:end="1144:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1145:5" pos:end="1145:25"><expr pos:start="1145:5" pos:end="1145:24"><call pos:start="1145:5" pos:end="1145:24"><name pos:start="1145:5" pos:end="1145:13">CU_ASSERT</name><argument_list pos:start="1145:14" pos:end="1145:24">(<argument pos:start="1145:15" pos:end="1145:23"><expr pos:start="1145:15" pos:end="1145:23"><name pos:start="1145:15" pos:end="1145:15">x</name> <operator pos:start="1145:17" pos:end="1145:18">!=</operator> <name pos:start="1145:20" pos:end="1145:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1146:5" pos:end="1146:21"><expr pos:start="1146:5" pos:end="1146:20"><call pos:start="1146:5" pos:end="1146:20"><name pos:start="1146:5" pos:end="1146:12">BIO_free</name><argument_list pos:start="1146:13" pos:end="1146:20">(<argument pos:start="1146:14" pos:end="1146:19"><expr pos:start="1146:14" pos:end="1146:19"><name pos:start="1146:14" pos:end="1146:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1148:5" pos:end="1150:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="1151:5" pos:end="1151:43"><expr pos:start="1151:5" pos:end="1151:42"><name pos:start="1151:5" pos:end="1151:9">keyin</name> <operator pos:start="1151:11" pos:end="1151:11">=</operator> <call pos:start="1151:13" pos:end="1151:42"><name pos:start="1151:13" pos:end="1151:19">BIO_new</name><argument_list pos:start="1151:20" pos:end="1151:42">(<argument pos:start="1151:21" pos:end="1151:41"><expr pos:start="1151:21" pos:end="1151:41"><call pos:start="1151:21" pos:end="1151:41"><name pos:start="1151:21" pos:end="1151:39">BIO_s_file_internal</name><argument_list pos:start="1151:40" pos:end="1151:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1152:5" pos:end="1152:52"><expr pos:start="1152:5" pos:end="1152:51"><name pos:start="1152:5" pos:end="1152:6">rv</name> <operator pos:start="1152:8" pos:end="1152:8">=</operator> <call pos:start="1152:10" pos:end="1152:51"><name pos:start="1152:10" pos:end="1152:26">BIO_read_filename</name><argument_list pos:start="1152:27" pos:end="1152:51">(<argument pos:start="1152:28" pos:end="1152:32"><expr pos:start="1152:28" pos:end="1152:32"><name pos:start="1152:28" pos:end="1152:32">keyin</name></expr></argument>, <argument pos:start="1152:35" pos:end="1152:50"><expr pos:start="1152:35" pos:end="1152:50"><name pos:start="1152:35" pos:end="1152:50">US894_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1153:5" pos:end="1153:22"><expr pos:start="1153:5" pos:end="1153:21"><call pos:start="1153:5" pos:end="1153:21"><name pos:start="1153:5" pos:end="1153:13">CU_ASSERT</name><argument_list pos:start="1153:14" pos:end="1153:21">(<argument pos:start="1153:15" pos:end="1153:20"><expr pos:start="1153:15" pos:end="1153:20"><name pos:start="1153:15" pos:end="1153:16">rv</name> <operator pos:start="1153:18" pos:end="1153:18">&gt;</operator> <literal type="number" pos:start="1153:20" pos:end="1153:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1154:5" pos:end="1154:64"><expr pos:start="1154:5" pos:end="1154:63"><name pos:start="1154:5" pos:end="1154:12">priv_key</name> <operator pos:start="1154:14" pos:end="1154:14">=</operator> <call pos:start="1154:16" pos:end="1154:63"><name pos:start="1154:16" pos:end="1154:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="1154:39" pos:end="1154:63">(<argument pos:start="1154:40" pos:end="1154:44"><expr pos:start="1154:40" pos:end="1154:44"><name pos:start="1154:40" pos:end="1154:44">keyin</name></expr></argument>, <argument pos:start="1154:47" pos:end="1154:50"><expr pos:start="1154:47" pos:end="1154:50"><name pos:start="1154:47" pos:end="1154:50">NULL</name></expr></argument>, <argument pos:start="1154:53" pos:end="1154:56"><expr pos:start="1154:53" pos:end="1154:56"><name pos:start="1154:53" pos:end="1154:56">NULL</name></expr></argument>, <argument pos:start="1154:59" pos:end="1154:62"><expr pos:start="1154:59" pos:end="1154:62"><name pos:start="1154:59" pos:end="1154:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1155:5" pos:end="1155:32"><expr pos:start="1155:5" pos:end="1155:31"><call pos:start="1155:5" pos:end="1155:31"><name pos:start="1155:5" pos:end="1155:13">CU_ASSERT</name><argument_list pos:start="1155:14" pos:end="1155:31">(<argument pos:start="1155:15" pos:end="1155:30"><expr pos:start="1155:15" pos:end="1155:30"><name pos:start="1155:15" pos:end="1155:22">priv_key</name> <operator pos:start="1155:24" pos:end="1155:25">!=</operator> <name pos:start="1155:27" pos:end="1155:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1156:5" pos:end="1156:20"><expr pos:start="1156:5" pos:end="1156:19"><call pos:start="1156:5" pos:end="1156:19"><name pos:start="1156:5" pos:end="1156:12">BIO_free</name><argument_list pos:start="1156:13" pos:end="1156:19">(<argument pos:start="1156:14" pos:end="1156:18"><expr pos:start="1156:14" pos:end="1156:18"><name pos:start="1156:14" pos:end="1156:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1158:5" pos:end="1160:7">/*
     * init EST in proxy mode
     */</comment>
    <expr_stmt pos:start="1161:5" pos:end="1161:44"><expr pos:start="1161:5" pos:end="1161:43"><call pos:start="1161:5" pos:end="1161:43"><name pos:start="1161:5" pos:end="1161:19">est_init_logger</name><argument_list pos:start="1161:20" pos:end="1161:43">(<argument pos:start="1161:21" pos:end="1161:36"><expr pos:start="1161:21" pos:end="1161:36"><name pos:start="1161:21" pos:end="1161:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="1161:39" pos:end="1161:42"><expr pos:start="1161:39" pos:end="1161:42"><name pos:start="1161:39" pos:end="1161:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1162:5" pos:end="1171:35"><expr pos:start="1162:5" pos:end="1171:34"><name pos:start="1162:5" pos:end="1162:7">ctx</name> <operator pos:start="1162:9" pos:end="1162:9">=</operator> <call pos:start="1162:11" pos:end="1171:34"><name pos:start="1162:11" pos:end="1162:24">est_proxy_init</name><argument_list pos:start="1162:25" pos:end="1171:34">(<argument pos:start="1162:26" pos:end="1162:32"><expr pos:start="1162:26" pos:end="1162:32"><name pos:start="1162:26" pos:end="1162:32">cacerts</name></expr></argument>,
                         <argument pos:start="1163:26" pos:end="1163:36"><expr pos:start="1163:26" pos:end="1163:36"><name pos:start="1163:26" pos:end="1163:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="1164:26" pos:end="1164:32"><expr pos:start="1164:26" pos:end="1164:32"><name pos:start="1164:26" pos:end="1164:32">cacerts</name></expr></argument>,
                         <argument pos:start="1165:26" pos:end="1165:36"><expr pos:start="1165:26" pos:end="1165:36"><name pos:start="1165:26" pos:end="1165:36">cacerts_len</name></expr></argument>,
                         <argument pos:start="1166:26" pos:end="1166:44"><expr pos:start="1166:26" pos:end="1166:44"><name pos:start="1166:26" pos:end="1166:44">EST_CERT_FORMAT_PEM</name></expr></argument>,
                         <argument pos:start="1167:26" pos:end="1167:36"><expr pos:start="1167:26" pos:end="1167:36"><literal type="string" pos:start="1167:26" pos:end="1167:36">"testrealm"</literal></expr></argument>,
                         <argument pos:start="1168:26" pos:end="1168:26"><expr pos:start="1168:26" pos:end="1168:26"><name pos:start="1168:26" pos:end="1168:26">x</name></expr></argument>,
                         <argument pos:start="1169:26" pos:end="1169:33"><expr pos:start="1169:26" pos:end="1169:33"><name pos:start="1169:26" pos:end="1169:33">priv_key</name></expr></argument>,
                         <argument pos:start="1170:26" pos:end="1170:34"><expr pos:start="1170:26" pos:end="1170:34"><literal type="string" pos:start="1170:26" pos:end="1170:34">"estuser"</literal></expr></argument>,
                         <argument pos:start="1171:26" pos:end="1171:33"><expr pos:start="1171:26" pos:end="1171:33"><literal type="string" pos:start="1171:26" pos:end="1171:33">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1172:5" pos:end="1172:27"><expr pos:start="1172:5" pos:end="1172:26"><call pos:start="1172:5" pos:end="1172:26"><name pos:start="1172:5" pos:end="1172:13">CU_ASSERT</name><argument_list pos:start="1172:14" pos:end="1172:26">(<argument pos:start="1172:15" pos:end="1172:25"><expr pos:start="1172:15" pos:end="1172:25"><name pos:start="1172:15" pos:end="1172:17">ctx</name> <operator pos:start="1172:19" pos:end="1172:20">!=</operator> <name pos:start="1172:22" pos:end="1172:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1174:5" pos:end="1174:53"><expr pos:start="1174:5" pos:end="1174:52"><name pos:start="1174:5" pos:end="1174:10">est_rv</name> <operator pos:start="1174:12" pos:end="1174:12">=</operator> <call pos:start="1174:14" pos:end="1174:52"><name pos:start="1174:14" pos:end="1174:36">est_proxy_set_auth_mode</name><argument_list pos:start="1174:37" pos:end="1174:52">(<argument pos:start="1174:38" pos:end="1174:40"><expr pos:start="1174:38" pos:end="1174:40"><name pos:start="1174:38" pos:end="1174:40">ctx</name></expr></argument>, <argument pos:start="1174:43" pos:end="1174:51"><expr pos:start="1174:43" pos:end="1174:51"><name pos:start="1174:43" pos:end="1174:51">AUTH_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1175:5" pos:end="1175:42"><expr pos:start="1175:5" pos:end="1175:41"><call pos:start="1175:5" pos:end="1175:41"><name pos:start="1175:5" pos:end="1175:13">CU_ASSERT</name><argument_list pos:start="1175:14" pos:end="1175:41">(<argument pos:start="1175:15" pos:end="1175:40"><expr pos:start="1175:15" pos:end="1175:40"><name pos:start="1175:15" pos:end="1175:20">est_rv</name> <operator pos:start="1175:22" pos:end="1175:23">==</operator> <name pos:start="1175:25" pos:end="1175:40">EST_ERR_BAD_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1176:5" pos:end="1176:54"><expr pos:start="1176:5" pos:end="1176:53"><name pos:start="1176:5" pos:end="1176:10">est_rv</name> <operator pos:start="1176:12" pos:end="1176:12">=</operator> <call pos:start="1176:14" pos:end="1176:53"><name pos:start="1176:14" pos:end="1176:36">est_proxy_set_auth_mode</name><argument_list pos:start="1176:37" pos:end="1176:53">(<argument pos:start="1176:38" pos:end="1176:40"><expr pos:start="1176:38" pos:end="1176:40"><name pos:start="1176:38" pos:end="1176:40">ctx</name></expr></argument>, <argument pos:start="1176:43" pos:end="1176:52"><expr pos:start="1176:43" pos:end="1176:52"><name pos:start="1176:43" pos:end="1176:52">AUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1177:5" pos:end="1177:38"><expr pos:start="1177:5" pos:end="1177:37"><call pos:start="1177:5" pos:end="1177:37"><name pos:start="1177:5" pos:end="1177:13">CU_ASSERT</name><argument_list pos:start="1177:14" pos:end="1177:37">(<argument pos:start="1177:15" pos:end="1177:36"><expr pos:start="1177:15" pos:end="1177:36"><name pos:start="1177:15" pos:end="1177:20">est_rv</name> <operator pos:start="1177:22" pos:end="1177:23">==</operator> <name pos:start="1177:25" pos:end="1177:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1178:5" pos:end="1178:55"><expr pos:start="1178:5" pos:end="1178:54"><name pos:start="1178:5" pos:end="1178:10">est_rv</name> <operator pos:start="1178:12" pos:end="1178:12">=</operator> <call pos:start="1178:14" pos:end="1178:54"><name pos:start="1178:14" pos:end="1178:36">est_proxy_set_auth_mode</name><argument_list pos:start="1178:37" pos:end="1178:54">(<argument pos:start="1178:38" pos:end="1178:40"><expr pos:start="1178:38" pos:end="1178:40"><name pos:start="1178:38" pos:end="1178:40">ctx</name></expr></argument>, <argument pos:start="1178:43" pos:end="1178:53"><expr pos:start="1178:43" pos:end="1178:53"><name pos:start="1178:43" pos:end="1178:53">AUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1179:5" pos:end="1179:38"><expr pos:start="1179:5" pos:end="1179:37"><call pos:start="1179:5" pos:end="1179:37"><name pos:start="1179:5" pos:end="1179:13">CU_ASSERT</name><argument_list pos:start="1179:14" pos:end="1179:37">(<argument pos:start="1179:15" pos:end="1179:36"><expr pos:start="1179:15" pos:end="1179:36"><name pos:start="1179:15" pos:end="1179:20">est_rv</name> <operator pos:start="1179:22" pos:end="1179:23">==</operator> <name pos:start="1179:25" pos:end="1179:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1180:5" pos:end="1180:54"><expr pos:start="1180:5" pos:end="1180:53"><name pos:start="1180:5" pos:end="1180:10">est_rv</name> <operator pos:start="1180:12" pos:end="1180:12">=</operator> <call pos:start="1180:14" pos:end="1180:53"><name pos:start="1180:14" pos:end="1180:36">est_proxy_set_auth_mode</name><argument_list pos:start="1180:37" pos:end="1180:53">(<argument pos:start="1180:38" pos:end="1180:40"><expr pos:start="1180:38" pos:end="1180:40"><name pos:start="1180:38" pos:end="1180:40">ctx</name></expr></argument>, <argument pos:start="1180:43" pos:end="1180:52"><expr pos:start="1180:43" pos:end="1180:52"><literal type="number" pos:start="1180:43" pos:end="1180:52">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1181:5" pos:end="1181:42"><expr pos:start="1181:5" pos:end="1181:41"><call pos:start="1181:5" pos:end="1181:41"><name pos:start="1181:5" pos:end="1181:13">CU_ASSERT</name><argument_list pos:start="1181:14" pos:end="1181:41">(<argument pos:start="1181:15" pos:end="1181:40"><expr pos:start="1181:15" pos:end="1181:40"><name pos:start="1181:15" pos:end="1181:20">est_rv</name> <operator pos:start="1181:22" pos:end="1181:23">==</operator> <name pos:start="1181:25" pos:end="1181:40">EST_ERR_BAD_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1183:5" pos:end="1183:55"><expr pos:start="1183:5" pos:end="1183:54"><name pos:start="1183:5" pos:end="1183:10">est_rv</name> <operator pos:start="1183:12" pos:end="1183:12">=</operator> <call pos:start="1183:14" pos:end="1183:54"><name pos:start="1183:14" pos:end="1183:36">est_proxy_set_auth_mode</name><argument_list pos:start="1183:37" pos:end="1183:54">(<argument pos:start="1183:38" pos:end="1183:41"><expr pos:start="1183:38" pos:end="1183:41"><name pos:start="1183:38" pos:end="1183:41">NULL</name></expr></argument>, <argument pos:start="1183:44" pos:end="1183:53"><expr pos:start="1183:44" pos:end="1183:53"><name pos:start="1183:44" pos:end="1183:53">AUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1184:5" pos:end="1184:40"><expr pos:start="1184:5" pos:end="1184:39"><call pos:start="1184:5" pos:end="1184:39"><name pos:start="1184:5" pos:end="1184:13">CU_ASSERT</name><argument_list pos:start="1184:14" pos:end="1184:39">(<argument pos:start="1184:15" pos:end="1184:38"><expr pos:start="1184:15" pos:end="1184:38"><name pos:start="1184:15" pos:end="1184:20">est_rv</name> <operator pos:start="1184:22" pos:end="1184:23">==</operator> <name pos:start="1184:25" pos:end="1184:38">EST_ERR_NO_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1186:5" pos:end="1186:17"><expr pos:start="1186:5" pos:end="1186:16"><call pos:start="1186:5" pos:end="1186:16"><name pos:start="1186:5" pos:end="1186:13">X509_free</name><argument_list pos:start="1186:14" pos:end="1186:16">(<argument pos:start="1186:15" pos:end="1186:15"><expr pos:start="1186:15" pos:end="1186:15"><name pos:start="1186:15" pos:end="1186:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1187:5" pos:end="1187:28"><expr pos:start="1187:5" pos:end="1187:27"><call pos:start="1187:5" pos:end="1187:27"><name pos:start="1187:5" pos:end="1187:17">EVP_PKEY_free</name><argument_list pos:start="1187:18" pos:end="1187:27">(<argument pos:start="1187:19" pos:end="1187:26"><expr pos:start="1187:19" pos:end="1187:26"><name pos:start="1187:19" pos:end="1187:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1190:1" pos:end="1193:3">/*
 * Test the optional setting of the CA Certs response chain in est_proxy_init()
 * test passthrough (cache disabled) mode of the CA Certs response chain.
 */</comment>
<function pos:start="1194:1" pos:end="1257:1"><type pos:start="1194:1" pos:end="1194:11"><specifier pos:start="1194:1" pos:end="1194:6">static</specifier> <name pos:start="1194:8" pos:end="1194:11">void</name></type> <name pos:start="1194:13" pos:end="1194:24">us894_test26</name> <parameter_list pos:start="1194:26" pos:end="1194:31">(<parameter pos:start="1194:27" pos:end="1194:30"><decl pos:start="1194:27" pos:end="1194:30"><type pos:start="1194:27" pos:end="1194:30"><name pos:start="1194:27" pos:end="1194:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1195:1" pos:end="1257:1">{<block_content pos:start="1196:5" pos:end="1256:13">
    <decl_stmt pos:start="1196:5" pos:end="1196:12"><decl pos:start="1196:5" pos:end="1196:11"><type pos:start="1196:5" pos:end="1196:8"><name pos:start="1196:5" pos:end="1196:8">long</name></type> <name pos:start="1196:10" pos:end="1196:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1197:5" pos:end="1197:18"><decl pos:start="1197:5" pos:end="1197:17"><type pos:start="1197:5" pos:end="1197:8"><name pos:start="1197:5" pos:end="1197:8">char</name></type> <name pos:start="1197:10" pos:end="1197:17"><name pos:start="1197:10" pos:end="1197:12">cmd</name><index pos:start="1197:13" pos:end="1197:17">[<expr pos:start="1197:14" pos:end="1197:16"><literal type="number" pos:start="1197:14" pos:end="1197:16">200</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="1199:5" pos:end="1200:5"><expr pos:start="1199:5" pos:end="1199:15"><name pos:start="1199:5" pos:end="1199:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="1202:5" pos:end="1202:20"><expr pos:start="1202:5" pos:end="1202:19"><call pos:start="1202:5" pos:end="1202:19"><name pos:start="1202:5" pos:end="1202:17">st_proxy_stop</name><argument_list pos:start="1202:18" pos:end="1202:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1203:5" pos:end="1203:13"><expr pos:start="1203:5" pos:end="1203:12"><call pos:start="1203:5" pos:end="1203:12"><name pos:start="1203:5" pos:end="1203:9">SLEEP</name><argument_list pos:start="1203:10" pos:end="1203:12">(<argument pos:start="1203:11" pos:end="1203:11"><expr pos:start="1203:11" pos:end="1203:11"><literal type="number" pos:start="1203:11" pos:end="1203:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1205:5" pos:end="1208:7">/*
     * restart the proxy without passing the ca certs response change parameter
     * param 5
     */</comment>
    <expr_stmt pos:start="1209:5" pos:end="1220:27"><expr pos:start="1209:5" pos:end="1220:26"><name pos:start="1209:5" pos:end="1209:6">rv</name> <operator pos:start="1209:8" pos:end="1209:8">=</operator> <call pos:start="1209:10" pos:end="1220:26"><name pos:start="1209:10" pos:end="1209:23">st_proxy_start</name><argument_list pos:start="1209:24" pos:end="1220:26">(<argument pos:start="1209:25" pos:end="1209:44"><expr pos:start="1209:25" pos:end="1209:44"><name pos:start="1209:25" pos:end="1209:44">US894_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="1210:25" pos:end="1210:40"><expr pos:start="1210:25" pos:end="1210:40"><name pos:start="1210:25" pos:end="1210:40">US894_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="1211:25" pos:end="1211:39"><expr pos:start="1211:25" pos:end="1211:39"><name pos:start="1211:25" pos:end="1211:39">US894_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="1212:25" pos:end="1212:34"><expr pos:start="1212:25" pos:end="1212:34"><literal type="string" pos:start="1212:25" pos:end="1212:34">"estrealm"</literal></expr></argument>,
                        <argument pos:start="1213:25" pos:end="1213:28"><expr pos:start="1213:25" pos:end="1213:28"><name pos:start="1213:25" pos:end="1213:28">NULL</name></expr></argument>,
                        <argument pos:start="1214:25" pos:end="1214:42"><expr pos:start="1214:25" pos:end="1214:42"><name pos:start="1214:25" pos:end="1214:42">US894_TRUSTED_CERT</name></expr></argument>,
                        <argument pos:start="1215:25" pos:end="1215:33"><expr pos:start="1215:25" pos:end="1215:33"><literal type="string" pos:start="1215:25" pos:end="1215:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="1216:25" pos:end="1216:32"><expr pos:start="1216:25" pos:end="1216:32"><literal type="string" pos:start="1216:25" pos:end="1216:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="1217:25" pos:end="1217:35"><expr pos:start="1217:25" pos:end="1217:35"><literal type="string" pos:start="1217:25" pos:end="1217:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="1218:25" pos:end="1218:45"><expr pos:start="1218:25" pos:end="1218:45"><name pos:start="1218:25" pos:end="1218:45">US894_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="1219:25" pos:end="1219:25"><expr pos:start="1219:25" pos:end="1219:25"><literal type="number" pos:start="1219:25" pos:end="1219:25">0</literal></expr></argument>,  <comment type="line" pos:start="1219:29" pos:end="1219:42">// disable PoP</comment>
                        <argument pos:start="1220:25" pos:end="1220:25"><expr pos:start="1220:25" pos:end="1220:25"><literal type="number" pos:start="1220:25" pos:end="1220:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="1220:30" pos:end="1220:46">// ecdhe nid info</comment>
    <expr_stmt pos:start="1221:5" pos:end="1221:13"><expr pos:start="1221:5" pos:end="1221:12"><call pos:start="1221:5" pos:end="1221:12"><name pos:start="1221:5" pos:end="1221:9">SLEEP</name><argument_list pos:start="1221:10" pos:end="1221:12">(<argument pos:start="1221:11" pos:end="1221:11"><expr pos:start="1221:11" pos:end="1221:11"><literal type="number" pos:start="1221:11" pos:end="1221:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1223:5" pos:end="1223:41"><expr pos:start="1223:5" pos:end="1223:40"><name pos:start="1223:5" pos:end="1223:11">outfile</name> <operator pos:start="1223:13" pos:end="1223:13">=</operator> <call pos:start="1223:15" pos:end="1223:40"><name pos:start="1223:15" pos:end="1223:19">fopen</name><argument_list pos:start="1223:20" pos:end="1223:40">(<argument pos:start="1223:21" pos:end="1223:34"><expr pos:start="1223:21" pos:end="1223:34"><name pos:start="1223:21" pos:end="1223:34">test26_outfile</name></expr></argument>, <argument pos:start="1223:37" pos:end="1223:39"><expr pos:start="1223:37" pos:end="1223:39"><literal type="string" pos:start="1223:37" pos:end="1223:39">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1224:5" pos:end="1224:69"><expr pos:start="1224:5" pos:end="1224:68"><name pos:start="1224:5" pos:end="1224:6">rv</name> <operator pos:start="1224:8" pos:end="1224:8">=</operator> <call pos:start="1224:10" pos:end="1224:68"><name pos:start="1224:10" pos:end="1224:22">curl_http_get</name><argument_list pos:start="1224:23" pos:end="1224:68">(<argument pos:start="1224:24" pos:end="1224:39"><expr pos:start="1224:24" pos:end="1224:39"><name pos:start="1224:24" pos:end="1224:39">US894_CACERT_URL</name></expr></argument>, <argument pos:start="1224:42" pos:end="1224:54"><expr pos:start="1224:42" pos:end="1224:54"><name pos:start="1224:42" pos:end="1224:54">US894_CACERTS</name></expr></argument>, <argument pos:start="1224:57" pos:end="1224:67"><expr pos:start="1224:57" pos:end="1224:67"><operator pos:start="1224:57" pos:end="1224:57">&amp;</operator><name pos:start="1224:58" pos:end="1224:67">write_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1225:5" pos:end="1225:20"><expr pos:start="1225:5" pos:end="1225:19"><call pos:start="1225:5" pos:end="1225:19"><name pos:start="1225:5" pos:end="1225:10">fclose</name><argument_list pos:start="1225:11" pos:end="1225:19">(<argument pos:start="1225:12" pos:end="1225:18"><expr pos:start="1225:12" pos:end="1225:18"><name pos:start="1225:12" pos:end="1225:18">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1227:5" pos:end="1229:7">/*
     * we expect the server to respond with a 200
     */</comment>
    <expr_stmt pos:start="1230:5" pos:end="1230:25"><expr pos:start="1230:5" pos:end="1230:24"><call pos:start="1230:5" pos:end="1230:24"><name pos:start="1230:5" pos:end="1230:13">CU_ASSERT</name><argument_list pos:start="1230:14" pos:end="1230:24">(<argument pos:start="1230:15" pos:end="1230:23"><expr pos:start="1230:15" pos:end="1230:23"><name pos:start="1230:15" pos:end="1230:16">rv</name> <operator pos:start="1230:18" pos:end="1230:19">==</operator> <literal type="number" pos:start="1230:21" pos:end="1230:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1232:5" pos:end="1235:24"><expr pos:start="1232:5" pos:end="1235:23"><call pos:start="1232:5" pos:end="1235:23"><name pos:start="1232:5" pos:end="1232:11">sprintf</name><argument_list pos:start="1232:12" pos:end="1235:23">(
        <argument pos:start="1233:9" pos:end="1233:11"><expr pos:start="1233:9" pos:end="1233:11"><name pos:start="1233:9" pos:end="1233:11">cmd</name></expr></argument>,
        <argument pos:start="1234:9" pos:end="1234:81"><expr pos:start="1234:9" pos:end="1234:81"><literal type="string" pos:start="1234:9" pos:end="1234:81">"openssl base64 -d -in %s | openssl pkcs7 -inform DER -text -print_certs"</literal></expr></argument>,
        <argument pos:start="1235:9" pos:end="1235:22"><expr pos:start="1235:9" pos:end="1235:22"><name pos:start="1235:9" pos:end="1235:22">test26_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1236:5" pos:end="1236:21"><expr pos:start="1236:5" pos:end="1236:20"><name pos:start="1236:5" pos:end="1236:6">rv</name> <operator pos:start="1236:8" pos:end="1236:8">=</operator> <call pos:start="1236:10" pos:end="1236:20"><name pos:start="1236:10" pos:end="1236:15">system</name><argument_list pos:start="1236:16" pos:end="1236:20">(<argument pos:start="1236:17" pos:end="1236:19"><expr pos:start="1236:17" pos:end="1236:19"><name pos:start="1236:17" pos:end="1236:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1237:5" pos:end="1237:23"><expr pos:start="1237:5" pos:end="1237:22"><call pos:start="1237:5" pos:end="1237:22"><name pos:start="1237:5" pos:end="1237:13">CU_ASSERT</name><argument_list pos:start="1237:14" pos:end="1237:22">(<argument pos:start="1237:15" pos:end="1237:21"><expr pos:start="1237:15" pos:end="1237:21"><name pos:start="1237:15" pos:end="1237:16">rv</name> <operator pos:start="1237:18" pos:end="1237:19">==</operator> <literal type="number" pos:start="1237:21" pos:end="1237:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1239:5" pos:end="1241:7">/*
     * restart the proxy and include the CA Cert response chain
     */</comment>
    <expr_stmt pos:start="1242:5" pos:end="1242:20"><expr pos:start="1242:5" pos:end="1242:19"><call pos:start="1242:5" pos:end="1242:19"><name pos:start="1242:5" pos:end="1242:17">st_proxy_stop</name><argument_list pos:start="1242:18" pos:end="1242:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1243:5" pos:end="1243:13"><expr pos:start="1243:5" pos:end="1243:12"><call pos:start="1243:5" pos:end="1243:12"><name pos:start="1243:5" pos:end="1243:9">SLEEP</name><argument_list pos:start="1243:10" pos:end="1243:12">(<argument pos:start="1243:11" pos:end="1243:11"><expr pos:start="1243:11" pos:end="1243:11"><literal type="number" pos:start="1243:11" pos:end="1243:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1244:5" pos:end="1255:27"><expr pos:start="1244:5" pos:end="1255:26"><name pos:start="1244:5" pos:end="1244:6">rv</name> <operator pos:start="1244:8" pos:end="1244:8">=</operator> <call pos:start="1244:10" pos:end="1255:26"><name pos:start="1244:10" pos:end="1244:23">st_proxy_start</name><argument_list pos:start="1244:24" pos:end="1255:26">(<argument pos:start="1244:25" pos:end="1244:44"><expr pos:start="1244:25" pos:end="1244:44"><name pos:start="1244:25" pos:end="1244:44">US894_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="1245:25" pos:end="1245:40"><expr pos:start="1245:25" pos:end="1245:40"><name pos:start="1245:25" pos:end="1245:40">US894_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="1246:25" pos:end="1246:39"><expr pos:start="1246:25" pos:end="1246:39"><name pos:start="1246:25" pos:end="1246:39">US894_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="1247:25" pos:end="1247:34"><expr pos:start="1247:25" pos:end="1247:34"><literal type="string" pos:start="1247:25" pos:end="1247:34">"estrealm"</literal></expr></argument>,
                        <argument pos:start="1248:25" pos:end="1248:36"><expr pos:start="1248:25" pos:end="1248:36"><name pos:start="1248:25" pos:end="1248:36">US894_CACERT</name></expr></argument>,
                        <argument pos:start="1249:25" pos:end="1249:42"><expr pos:start="1249:25" pos:end="1249:42"><name pos:start="1249:25" pos:end="1249:42">US894_TRUSTED_CERT</name></expr></argument>,
                        <argument pos:start="1250:25" pos:end="1250:33"><expr pos:start="1250:25" pos:end="1250:33"><literal type="string" pos:start="1250:25" pos:end="1250:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="1251:25" pos:end="1251:32"><expr pos:start="1251:25" pos:end="1251:32"><literal type="string" pos:start="1251:25" pos:end="1251:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="1252:25" pos:end="1252:35"><expr pos:start="1252:25" pos:end="1252:35"><literal type="string" pos:start="1252:25" pos:end="1252:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="1253:25" pos:end="1253:45"><expr pos:start="1253:25" pos:end="1253:45"><name pos:start="1253:25" pos:end="1253:45">US894_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="1254:25" pos:end="1254:25"><expr pos:start="1254:25" pos:end="1254:25"><literal type="number" pos:start="1254:25" pos:end="1254:25">0</literal></expr></argument>,  <comment type="line" pos:start="1254:29" pos:end="1254:42">// disable PoP</comment>
                        <argument pos:start="1255:25" pos:end="1255:25"><expr pos:start="1255:25" pos:end="1255:25"><literal type="number" pos:start="1255:25" pos:end="1255:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="1255:30" pos:end="1255:46">// ecdhe nid info</comment>
    <expr_stmt pos:start="1256:5" pos:end="1256:13"><expr pos:start="1256:5" pos:end="1256:12"><call pos:start="1256:5" pos:end="1256:12"><name pos:start="1256:5" pos:end="1256:9">SLEEP</name><argument_list pos:start="1256:10" pos:end="1256:12">(<argument pos:start="1256:11" pos:end="1256:11"><expr pos:start="1256:11" pos:end="1256:11"><literal type="number" pos:start="1256:11" pos:end="1256:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1259:1" pos:end="1262:3">/*
 * Test the passing of bad userid/password values to est_proxy_init to make sure
 * they're error checked.
 */</comment>
<function pos:start="1263:1" pos:end="1337:1"><type pos:start="1263:1" pos:end="1263:11"><specifier pos:start="1263:1" pos:end="1263:6">static</specifier> <name pos:start="1263:8" pos:end="1263:11">void</name></type> <name pos:start="1263:13" pos:end="1263:24">us894_test27</name> <parameter_list pos:start="1263:26" pos:end="1263:31">(<parameter pos:start="1263:27" pos:end="1263:30"><decl pos:start="1263:27" pos:end="1263:30"><type pos:start="1263:27" pos:end="1263:30"><name pos:start="1263:27" pos:end="1263:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1264:1" pos:end="1337:1">{<block_content pos:start="1265:5" pos:end="1336:28">
    <decl_stmt pos:start="1265:5" pos:end="1265:34"><decl pos:start="1265:5" pos:end="1265:33"><type pos:start="1265:5" pos:end="1265:19"><name pos:start="1265:5" pos:end="1265:12">unsigned</name> <name pos:start="1265:14" pos:end="1265:17">char</name> <modifier pos:start="1265:19" pos:end="1265:19">*</modifier></type><name pos:start="1265:20" pos:end="1265:26">cacerts</name> <init pos:start="1265:28" pos:end="1265:33">= <expr pos:start="1265:30" pos:end="1265:33"><name pos:start="1265:30" pos:end="1265:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1266:5" pos:end="1266:24"><decl pos:start="1266:5" pos:end="1266:23"><type pos:start="1266:5" pos:end="1266:7"><name pos:start="1266:5" pos:end="1266:7">int</name></type> <name pos:start="1266:9" pos:end="1266:19">cacerts_len</name> <init pos:start="1266:21" pos:end="1266:23">= <expr pos:start="1266:23" pos:end="1266:23"><literal type="number" pos:start="1266:23" pos:end="1266:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1267:5" pos:end="1267:24"><decl pos:start="1267:5" pos:end="1267:15"><type pos:start="1267:5" pos:end="1267:9"><name pos:start="1267:5" pos:end="1267:7">BIO</name> <modifier pos:start="1267:9" pos:end="1267:9">*</modifier></type><name pos:start="1267:10" pos:end="1267:15">certin</name></decl>, <decl pos:start="1267:18" pos:end="1267:23"><type ref="prev" pos:start="1267:5" pos:end="1267:9"><modifier pos:start="1267:18" pos:end="1267:18">*</modifier></type><name pos:start="1267:19" pos:end="1267:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1268:5" pos:end="1268:12"><decl pos:start="1268:5" pos:end="1268:11"><type pos:start="1268:5" pos:end="1268:10"><name pos:start="1268:5" pos:end="1268:8">X509</name> <modifier pos:start="1268:10" pos:end="1268:10">*</modifier></type><name pos:start="1268:11" pos:end="1268:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1269:5" pos:end="1269:24"><decl pos:start="1269:5" pos:end="1269:23"><type pos:start="1269:5" pos:end="1269:14"><name pos:start="1269:5" pos:end="1269:12">EVP_PKEY</name> <modifier pos:start="1269:14" pos:end="1269:14">*</modifier></type> <name pos:start="1269:16" pos:end="1269:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1270:5" pos:end="1270:11"><decl pos:start="1270:5" pos:end="1270:10"><type pos:start="1270:5" pos:end="1270:7"><name pos:start="1270:5" pos:end="1270:7">int</name></type> <name pos:start="1270:9" pos:end="1270:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1271:5" pos:end="1271:17"><decl pos:start="1271:5" pos:end="1271:16"><type pos:start="1271:5" pos:end="1271:13"><name pos:start="1271:5" pos:end="1271:11">EST_CTX</name> <modifier pos:start="1271:13" pos:end="1271:13">*</modifier></type><name pos:start="1271:14" pos:end="1271:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1273:5" pos:end="1274:5"><expr pos:start="1273:5" pos:end="1273:15"><name pos:start="1273:5" pos:end="1273:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="1276:5" pos:end="1278:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="1279:5" pos:end="1279:59"><expr pos:start="1279:5" pos:end="1279:58"><name pos:start="1279:5" pos:end="1279:15">cacerts_len</name> <operator pos:start="1279:17" pos:end="1279:17">=</operator> <call pos:start="1279:19" pos:end="1279:58"><name pos:start="1279:19" pos:end="1279:34">read_binary_file</name><argument_list pos:start="1279:35" pos:end="1279:58">(<argument pos:start="1279:36" pos:end="1279:47"><expr pos:start="1279:36" pos:end="1279:47"><name pos:start="1279:36" pos:end="1279:47">US894_CACERT</name></expr></argument>, <argument pos:start="1279:50" pos:end="1279:57"><expr pos:start="1279:50" pos:end="1279:57"><operator pos:start="1279:50" pos:end="1279:50">&amp;</operator><name pos:start="1279:51" pos:end="1279:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1280:5" pos:end="1280:31"><expr pos:start="1280:5" pos:end="1280:30"><call pos:start="1280:5" pos:end="1280:30"><name pos:start="1280:5" pos:end="1280:13">CU_ASSERT</name><argument_list pos:start="1280:14" pos:end="1280:30">(<argument pos:start="1280:15" pos:end="1280:29"><expr pos:start="1280:15" pos:end="1280:29"><name pos:start="1280:15" pos:end="1280:25">cacerts_len</name> <operator pos:start="1280:27" pos:end="1280:27">&gt;</operator> <literal type="number" pos:start="1280:29" pos:end="1280:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1282:5" pos:end="1284:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="1285:5" pos:end="1285:44"><expr pos:start="1285:5" pos:end="1285:43"><name pos:start="1285:5" pos:end="1285:10">certin</name> <operator pos:start="1285:12" pos:end="1285:12">=</operator> <call pos:start="1285:14" pos:end="1285:43"><name pos:start="1285:14" pos:end="1285:20">BIO_new</name><argument_list pos:start="1285:21" pos:end="1285:43">(<argument pos:start="1285:22" pos:end="1285:42"><expr pos:start="1285:22" pos:end="1285:42"><call pos:start="1285:22" pos:end="1285:42"><name pos:start="1285:22" pos:end="1285:40">BIO_s_file_internal</name><argument_list pos:start="1285:41" pos:end="1285:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1286:5" pos:end="1286:54"><expr pos:start="1286:5" pos:end="1286:53"><name pos:start="1286:5" pos:end="1286:6">rv</name> <operator pos:start="1286:8" pos:end="1286:8">=</operator> <call pos:start="1286:10" pos:end="1286:53"><name pos:start="1286:10" pos:end="1286:26">BIO_read_filename</name><argument_list pos:start="1286:27" pos:end="1286:53">(<argument pos:start="1286:28" pos:end="1286:33"><expr pos:start="1286:28" pos:end="1286:33"><name pos:start="1286:28" pos:end="1286:33">certin</name></expr></argument>, <argument pos:start="1286:36" pos:end="1286:52"><expr pos:start="1286:36" pos:end="1286:52"><name pos:start="1286:36" pos:end="1286:52">US894_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1287:5" pos:end="1287:22"><expr pos:start="1287:5" pos:end="1287:21"><call pos:start="1287:5" pos:end="1287:21"><name pos:start="1287:5" pos:end="1287:13">CU_ASSERT</name><argument_list pos:start="1287:14" pos:end="1287:21">(<argument pos:start="1287:15" pos:end="1287:20"><expr pos:start="1287:15" pos:end="1287:20"><name pos:start="1287:15" pos:end="1287:16">rv</name> <operator pos:start="1287:18" pos:end="1287:18">&gt;</operator> <literal type="number" pos:start="1287:20" pos:end="1287:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1288:5" pos:end="1288:52"><expr pos:start="1288:5" pos:end="1288:51"><name pos:start="1288:5" pos:end="1288:5">x</name> <operator pos:start="1288:7" pos:end="1288:7">=</operator> <call pos:start="1288:9" pos:end="1288:51"><name pos:start="1288:9" pos:end="1288:25">PEM_read_bio_X509</name><argument_list pos:start="1288:26" pos:end="1288:51">(<argument pos:start="1288:27" pos:end="1288:32"><expr pos:start="1288:27" pos:end="1288:32"><name pos:start="1288:27" pos:end="1288:32">certin</name></expr></argument>, <argument pos:start="1288:35" pos:end="1288:38"><expr pos:start="1288:35" pos:end="1288:38"><name pos:start="1288:35" pos:end="1288:38">NULL</name></expr></argument>, <argument pos:start="1288:41" pos:end="1288:44"><expr pos:start="1288:41" pos:end="1288:44"><name pos:start="1288:41" pos:end="1288:44">NULL</name></expr></argument>, <argument pos:start="1288:47" pos:end="1288:50"><expr pos:start="1288:47" pos:end="1288:50"><name pos:start="1288:47" pos:end="1288:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1289:5" pos:end="1289:25"><expr pos:start="1289:5" pos:end="1289:24"><call pos:start="1289:5" pos:end="1289:24"><name pos:start="1289:5" pos:end="1289:13">CU_ASSERT</name><argument_list pos:start="1289:14" pos:end="1289:24">(<argument pos:start="1289:15" pos:end="1289:23"><expr pos:start="1289:15" pos:end="1289:23"><name pos:start="1289:15" pos:end="1289:15">x</name> <operator pos:start="1289:17" pos:end="1289:18">!=</operator> <name pos:start="1289:20" pos:end="1289:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1290:5" pos:end="1290:21"><expr pos:start="1290:5" pos:end="1290:20"><call pos:start="1290:5" pos:end="1290:20"><name pos:start="1290:5" pos:end="1290:12">BIO_free</name><argument_list pos:start="1290:13" pos:end="1290:20">(<argument pos:start="1290:14" pos:end="1290:19"><expr pos:start="1290:14" pos:end="1290:19"><name pos:start="1290:14" pos:end="1290:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1292:5" pos:end="1294:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="1295:5" pos:end="1295:43"><expr pos:start="1295:5" pos:end="1295:42"><name pos:start="1295:5" pos:end="1295:9">keyin</name> <operator pos:start="1295:11" pos:end="1295:11">=</operator> <call pos:start="1295:13" pos:end="1295:42"><name pos:start="1295:13" pos:end="1295:19">BIO_new</name><argument_list pos:start="1295:20" pos:end="1295:42">(<argument pos:start="1295:21" pos:end="1295:41"><expr pos:start="1295:21" pos:end="1295:41"><call pos:start="1295:21" pos:end="1295:41"><name pos:start="1295:21" pos:end="1295:39">BIO_s_file_internal</name><argument_list pos:start="1295:40" pos:end="1295:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1296:5" pos:end="1296:52"><expr pos:start="1296:5" pos:end="1296:51"><name pos:start="1296:5" pos:end="1296:6">rv</name> <operator pos:start="1296:8" pos:end="1296:8">=</operator> <call pos:start="1296:10" pos:end="1296:51"><name pos:start="1296:10" pos:end="1296:26">BIO_read_filename</name><argument_list pos:start="1296:27" pos:end="1296:51">(<argument pos:start="1296:28" pos:end="1296:32"><expr pos:start="1296:28" pos:end="1296:32"><name pos:start="1296:28" pos:end="1296:32">keyin</name></expr></argument>, <argument pos:start="1296:35" pos:end="1296:50"><expr pos:start="1296:35" pos:end="1296:50"><name pos:start="1296:35" pos:end="1296:50">US894_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1297:5" pos:end="1297:22"><expr pos:start="1297:5" pos:end="1297:21"><call pos:start="1297:5" pos:end="1297:21"><name pos:start="1297:5" pos:end="1297:13">CU_ASSERT</name><argument_list pos:start="1297:14" pos:end="1297:21">(<argument pos:start="1297:15" pos:end="1297:20"><expr pos:start="1297:15" pos:end="1297:20"><name pos:start="1297:15" pos:end="1297:16">rv</name> <operator pos:start="1297:18" pos:end="1297:18">&gt;</operator> <literal type="number" pos:start="1297:20" pos:end="1297:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1298:5" pos:end="1298:64"><expr pos:start="1298:5" pos:end="1298:63"><name pos:start="1298:5" pos:end="1298:12">priv_key</name> <operator pos:start="1298:14" pos:end="1298:14">=</operator> <call pos:start="1298:16" pos:end="1298:63"><name pos:start="1298:16" pos:end="1298:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="1298:39" pos:end="1298:63">(<argument pos:start="1298:40" pos:end="1298:44"><expr pos:start="1298:40" pos:end="1298:44"><name pos:start="1298:40" pos:end="1298:44">keyin</name></expr></argument>, <argument pos:start="1298:47" pos:end="1298:50"><expr pos:start="1298:47" pos:end="1298:50"><name pos:start="1298:47" pos:end="1298:50">NULL</name></expr></argument>, <argument pos:start="1298:53" pos:end="1298:56"><expr pos:start="1298:53" pos:end="1298:56"><name pos:start="1298:53" pos:end="1298:56">NULL</name></expr></argument>, <argument pos:start="1298:59" pos:end="1298:62"><expr pos:start="1298:59" pos:end="1298:62"><name pos:start="1298:59" pos:end="1298:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1299:5" pos:end="1299:32"><expr pos:start="1299:5" pos:end="1299:31"><call pos:start="1299:5" pos:end="1299:31"><name pos:start="1299:5" pos:end="1299:13">CU_ASSERT</name><argument_list pos:start="1299:14" pos:end="1299:31">(<argument pos:start="1299:15" pos:end="1299:30"><expr pos:start="1299:15" pos:end="1299:30"><name pos:start="1299:15" pos:end="1299:22">priv_key</name> <operator pos:start="1299:24" pos:end="1299:25">!=</operator> <name pos:start="1299:27" pos:end="1299:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1300:5" pos:end="1300:20"><expr pos:start="1300:5" pos:end="1300:19"><call pos:start="1300:5" pos:end="1300:19"><name pos:start="1300:5" pos:end="1300:12">BIO_free</name><argument_list pos:start="1300:13" pos:end="1300:19">(<argument pos:start="1300:14" pos:end="1300:18"><expr pos:start="1300:14" pos:end="1300:18"><name pos:start="1300:14" pos:end="1300:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1302:5" pos:end="1304:7">/*
     * Attempt to init EST proxy using NULL userid
     */</comment>
    <expr_stmt pos:start="1305:5" pos:end="1305:44"><expr pos:start="1305:5" pos:end="1305:43"><call pos:start="1305:5" pos:end="1305:43"><name pos:start="1305:5" pos:end="1305:19">est_init_logger</name><argument_list pos:start="1305:20" pos:end="1305:43">(<argument pos:start="1305:21" pos:end="1305:36"><expr pos:start="1305:21" pos:end="1305:36"><name pos:start="1305:21" pos:end="1305:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="1305:39" pos:end="1305:42"><expr pos:start="1305:39" pos:end="1305:42"><name pos:start="1305:39" pos:end="1305:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1306:5" pos:end="1316:18"><expr pos:start="1306:5" pos:end="1316:17"><name pos:start="1306:5" pos:end="1306:7">ctx</name> <operator pos:start="1306:9" pos:end="1306:9">=</operator> <call pos:start="1306:11" pos:end="1316:17"><name pos:start="1306:11" pos:end="1306:24">est_proxy_init</name><argument_list pos:start="1306:25" pos:end="1316:17">(
        <argument pos:start="1307:9" pos:end="1307:15"><expr pos:start="1307:9" pos:end="1307:15"><name pos:start="1307:9" pos:end="1307:15">cacerts</name></expr></argument>,
        <argument pos:start="1308:9" pos:end="1308:19"><expr pos:start="1308:9" pos:end="1308:19"><name pos:start="1308:9" pos:end="1308:19">cacerts_len</name></expr></argument>,
        <argument pos:start="1309:9" pos:end="1309:15"><expr pos:start="1309:9" pos:end="1309:15"><name pos:start="1309:9" pos:end="1309:15">cacerts</name></expr></argument>,
        <argument pos:start="1310:9" pos:end="1310:19"><expr pos:start="1310:9" pos:end="1310:19"><name pos:start="1310:9" pos:end="1310:19">cacerts_len</name></expr></argument>,
        <argument pos:start="1311:9" pos:end="1311:27"><expr pos:start="1311:9" pos:end="1311:27"><name pos:start="1311:9" pos:end="1311:27">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="1312:9" pos:end="1312:18"><expr pos:start="1312:9" pos:end="1312:18"><literal type="string" pos:start="1312:9" pos:end="1312:18">"estrealm"</literal></expr></argument>,
        <argument pos:start="1313:9" pos:end="1313:9"><expr pos:start="1313:9" pos:end="1313:9"><name pos:start="1313:9" pos:end="1313:9">x</name></expr></argument>,
        <argument pos:start="1314:9" pos:end="1314:16"><expr pos:start="1314:9" pos:end="1314:16"><name pos:start="1314:9" pos:end="1314:16">priv_key</name></expr></argument>,
        <argument pos:start="1315:9" pos:end="1315:12"><expr pos:start="1315:9" pos:end="1315:12"><name pos:start="1315:9" pos:end="1315:12">NULL</name></expr></argument>,
        <argument pos:start="1316:9" pos:end="1316:16"><expr pos:start="1316:9" pos:end="1316:16"><literal type="string" pos:start="1316:9" pos:end="1316:16">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1318:5" pos:end="1318:27"><expr pos:start="1318:5" pos:end="1318:26"><call pos:start="1318:5" pos:end="1318:26"><name pos:start="1318:5" pos:end="1318:13">CU_ASSERT</name><argument_list pos:start="1318:14" pos:end="1318:26">(<argument pos:start="1318:15" pos:end="1318:25"><expr pos:start="1318:15" pos:end="1318:25"><name pos:start="1318:15" pos:end="1318:17">ctx</name> <operator pos:start="1318:19" pos:end="1318:20">==</operator> <name pos:start="1318:22" pos:end="1318:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1320:5" pos:end="1331:26"><expr pos:start="1320:5" pos:end="1331:25"><name pos:start="1320:5" pos:end="1320:7">ctx</name> <operator pos:start="1320:9" pos:end="1320:9">=</operator>
            <call pos:start="1321:13" pos:end="1331:25"><name pos:start="1321:13" pos:end="1321:26">est_proxy_init</name><argument_list pos:start="1321:27" pos:end="1331:25">(
                <argument pos:start="1322:17" pos:end="1322:23"><expr pos:start="1322:17" pos:end="1322:23"><name pos:start="1322:17" pos:end="1322:23">cacerts</name></expr></argument>,
                <argument pos:start="1323:17" pos:end="1323:27"><expr pos:start="1323:17" pos:end="1323:27"><name pos:start="1323:17" pos:end="1323:27">cacerts_len</name></expr></argument>,
                <argument pos:start="1324:17" pos:end="1324:23"><expr pos:start="1324:17" pos:end="1324:23"><name pos:start="1324:17" pos:end="1324:23">cacerts</name></expr></argument>,
                <argument pos:start="1325:17" pos:end="1325:27"><expr pos:start="1325:17" pos:end="1325:27"><name pos:start="1325:17" pos:end="1325:27">cacerts_len</name></expr></argument>,
                <argument pos:start="1326:17" pos:end="1326:35"><expr pos:start="1326:17" pos:end="1326:35"><name pos:start="1326:17" pos:end="1326:35">EST_CERT_FORMAT_PEM</name></expr></argument>,
                <argument pos:start="1327:17" pos:end="1327:26"><expr pos:start="1327:17" pos:end="1327:26"><literal type="string" pos:start="1327:17" pos:end="1327:26">"estrealm"</literal></expr></argument>,
                <argument pos:start="1328:17" pos:end="1328:17"><expr pos:start="1328:17" pos:end="1328:17"><name pos:start="1328:17" pos:end="1328:17">x</name></expr></argument>,
                <argument pos:start="1329:17" pos:end="1329:24"><expr pos:start="1329:17" pos:end="1329:24"><name pos:start="1329:17" pos:end="1329:24">priv_key</name></expr></argument>,
                <argument pos:start="1330:17" pos:end="1330:323"><expr pos:start="1330:17" pos:end="1330:323"><literal type="string" pos:start="1330:17" pos:end="1330:323">"bad_userid_too_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</literal></expr></argument>,
                <argument pos:start="1331:17" pos:end="1331:24"><expr pos:start="1331:17" pos:end="1331:24"><literal type="string" pos:start="1331:17" pos:end="1331:24">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1333:5" pos:end="1333:27"><expr pos:start="1333:5" pos:end="1333:26"><call pos:start="1333:5" pos:end="1333:26"><name pos:start="1333:5" pos:end="1333:13">CU_ASSERT</name><argument_list pos:start="1333:14" pos:end="1333:26">(<argument pos:start="1333:15" pos:end="1333:25"><expr pos:start="1333:15" pos:end="1333:25"><name pos:start="1333:15" pos:end="1333:17">ctx</name> <operator pos:start="1333:19" pos:end="1333:20">==</operator> <name pos:start="1333:22" pos:end="1333:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1335:5" pos:end="1335:17"><expr pos:start="1335:5" pos:end="1335:16"><call pos:start="1335:5" pos:end="1335:16"><name pos:start="1335:5" pos:end="1335:13">X509_free</name><argument_list pos:start="1335:14" pos:end="1335:16">(<argument pos:start="1335:15" pos:end="1335:15"><expr pos:start="1335:15" pos:end="1335:15"><name pos:start="1335:15" pos:end="1335:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1336:5" pos:end="1336:28"><expr pos:start="1336:5" pos:end="1336:27"><call pos:start="1336:5" pos:end="1336:27"><name pos:start="1336:5" pos:end="1336:17">EVP_PKEY_free</name><argument_list pos:start="1336:18" pos:end="1336:27">(<argument pos:start="1336:19" pos:end="1336:26"><expr pos:start="1336:19" pos:end="1336:26"><name pos:start="1336:19" pos:end="1336:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1339:1" pos:end="1342:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="1343:1" pos:end="1395:1"><type pos:start="1343:1" pos:end="1343:3"><name pos:start="1343:1" pos:end="1343:3">int</name></type> <name pos:start="1343:5" pos:end="1343:19">us894_add_suite</name> <parameter_list pos:start="1343:21" pos:end="1343:26">(<parameter pos:start="1343:22" pos:end="1343:25"><decl pos:start="1343:22" pos:end="1343:25"><type pos:start="1343:22" pos:end="1343:25"><name pos:start="1343:22" pos:end="1343:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1344:1" pos:end="1395:1">{<block_content pos:start="1346:5" pos:end="1395:0">
<cpp:ifdef pos:start="1345:1" pos:end="1345:17">#<cpp:directive pos:start="1345:2" pos:end="1345:6">ifdef</cpp:directive> <name pos:start="1345:8" pos:end="1345:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="1346:5" pos:end="1346:28"><decl pos:start="1346:5" pos:end="1346:27"><type pos:start="1346:5" pos:end="1346:13"><name pos:start="1346:5" pos:end="1346:13">CU_pSuite</name></type> <name pos:start="1346:15" pos:end="1346:20">pSuite</name> <init pos:start="1346:22" pos:end="1346:27">= <expr pos:start="1346:24" pos:end="1346:27"><name pos:start="1346:24" pos:end="1346:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1348:5" pos:end="1348:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="1349:5" pos:end="1351:33"><expr pos:start="1349:5" pos:end="1351:32"><name pos:start="1349:5" pos:end="1349:10">pSuite</name> <operator pos:start="1349:12" pos:end="1349:12">=</operator> <call pos:start="1349:14" pos:end="1351:32"><name pos:start="1349:14" pos:end="1349:25">CU_add_suite</name><argument_list pos:start="1349:26" pos:end="1351:32">(<argument pos:start="1349:27" pos:end="1349:47"><expr pos:start="1349:27" pos:end="1349:47"><literal type="string" pos:start="1349:27" pos:end="1349:47">"us894_proxy_cacerts"</literal></expr></argument>,
            <argument pos:start="1350:13" pos:end="1350:28"><expr pos:start="1350:13" pos:end="1350:28"><name pos:start="1350:13" pos:end="1350:28">us894_init_suite</name></expr></argument>,
            <argument pos:start="1351:13" pos:end="1351:31"><expr pos:start="1351:13" pos:end="1351:31"><name pos:start="1351:13" pos:end="1351:31">us894_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1352:5" pos:end="1355:5"><if pos:start="1352:5" pos:end="1355:5">if <condition pos:start="1352:8" pos:end="1352:23">(<expr pos:start="1352:9" pos:end="1352:22"><name pos:start="1352:9" pos:end="1352:12">NULL</name> <operator pos:start="1352:14" pos:end="1352:15">==</operator> <name pos:start="1352:17" pos:end="1352:22">pSuite</name></expr>)</condition> <block pos:start="1352:25" pos:end="1355:5">{<block_content pos:start="1353:9" pos:end="1354:30">
        <expr_stmt pos:start="1353:9" pos:end="1353:30"><expr pos:start="1353:9" pos:end="1353:29"><call pos:start="1353:9" pos:end="1353:29"><name pos:start="1353:9" pos:end="1353:27">CU_cleanup_registry</name><argument_list pos:start="1353:28" pos:end="1353:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1354:9" pos:end="1354:30">return <expr pos:start="1354:16" pos:end="1354:29"><call pos:start="1354:16" pos:end="1354:29"><name pos:start="1354:16" pos:end="1354:27">CU_get_error</name><argument_list pos:start="1354:28" pos:end="1354:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <comment type="block" pos:start="1358:5" pos:end="1358:36">/* add the tests to the suite */</comment>
    <comment type="block" pos:start="1359:5" pos:end="1359:71">/* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */</comment>
    <if_stmt pos:start="1360:5" pos:end="1390:5"><if pos:start="1360:5" pos:end="1390:5">if <condition pos:start="1360:8" pos:end="1386:90">(<expr pos:start="1360:9" pos:end="1386:89"><operator pos:start="1360:9" pos:end="1360:9">(</operator><name pos:start="1360:10" pos:end="1360:13">NULL</name> <operator pos:start="1360:15" pos:end="1360:16">==</operator> <call pos:start="1360:18" pos:end="1360:68"><name pos:start="1360:18" pos:end="1360:28">CU_add_test</name><argument_list pos:start="1360:29" pos:end="1360:68">(<argument pos:start="1360:30" pos:end="1360:35"><expr pos:start="1360:30" pos:end="1360:35"><name pos:start="1360:30" pos:end="1360:35">pSuite</name></expr></argument>, <argument pos:start="1360:38" pos:end="1360:54"><expr pos:start="1360:38" pos:end="1360:54"><literal type="string" pos:start="1360:38" pos:end="1360:54">"HTTP Basic Auth"</literal></expr></argument>, <argument pos:start="1360:57" pos:end="1360:67"><expr pos:start="1360:57" pos:end="1360:67"><name pos:start="1360:57" pos:end="1360:67">us894_test1</name></expr></argument>)</argument_list></call><operator pos:start="1360:69" pos:end="1360:69">)</operator> <operator pos:start="1360:71" pos:end="1360:72">||</operator>
        <operator pos:start="1361:9" pos:end="1361:9">(</operator><name pos:start="1361:10" pos:end="1361:13">NULL</name> <operator pos:start="1361:15" pos:end="1361:16">==</operator> <call pos:start="1361:18" pos:end="1361:73"><name pos:start="1361:18" pos:end="1361:28">CU_add_test</name><argument_list pos:start="1361:29" pos:end="1361:73">(<argument pos:start="1361:30" pos:end="1361:35"><expr pos:start="1361:30" pos:end="1361:35"><name pos:start="1361:30" pos:end="1361:35">pSuite</name></expr></argument>, <argument pos:start="1361:38" pos:end="1361:59"><expr pos:start="1361:38" pos:end="1361:59"><literal type="string" pos:start="1361:38" pos:end="1361:59">"HTTP Basic Auth Fail"</literal></expr></argument>, <argument pos:start="1361:62" pos:end="1361:72"><expr pos:start="1361:62" pos:end="1361:72"><name pos:start="1361:62" pos:end="1361:72">us894_test2</name></expr></argument>)</argument_list></call><operator pos:start="1361:74" pos:end="1361:74">)</operator> <operator pos:start="1361:76" pos:end="1361:77">||</operator>
        <operator pos:start="1362:9" pos:end="1362:9">(</operator><name pos:start="1362:10" pos:end="1362:13">NULL</name> <operator pos:start="1362:15" pos:end="1362:16">==</operator> <call pos:start="1362:18" pos:end="1362:69"><name pos:start="1362:18" pos:end="1362:28">CU_add_test</name><argument_list pos:start="1362:29" pos:end="1362:69">(<argument pos:start="1362:30" pos:end="1362:35"><expr pos:start="1362:30" pos:end="1362:35"><name pos:start="1362:30" pos:end="1362:35">pSuite</name></expr></argument>, <argument pos:start="1362:38" pos:end="1362:55"><expr pos:start="1362:38" pos:end="1362:55"><literal type="string" pos:start="1362:38" pos:end="1362:55">"HTTP Digest Auth"</literal></expr></argument>, <argument pos:start="1362:58" pos:end="1362:68"><expr pos:start="1362:58" pos:end="1362:68"><name pos:start="1362:58" pos:end="1362:68">us894_test3</name></expr></argument>)</argument_list></call><operator pos:start="1362:70" pos:end="1362:70">)</operator> <operator pos:start="1362:72" pos:end="1362:73">||</operator>
        <operator pos:start="1363:9" pos:end="1363:9">(</operator><name pos:start="1363:10" pos:end="1363:13">NULL</name> <operator pos:start="1363:15" pos:end="1363:16">==</operator> <call pos:start="1363:18" pos:end="1363:74"><name pos:start="1363:18" pos:end="1363:28">CU_add_test</name><argument_list pos:start="1363:29" pos:end="1363:74">(<argument pos:start="1363:30" pos:end="1363:35"><expr pos:start="1363:30" pos:end="1363:35"><name pos:start="1363:30" pos:end="1363:35">pSuite</name></expr></argument>, <argument pos:start="1363:38" pos:end="1363:60"><expr pos:start="1363:38" pos:end="1363:60"><literal type="string" pos:start="1363:38" pos:end="1363:60">"HTTP Digest Auth Fail"</literal></expr></argument>, <argument pos:start="1363:63" pos:end="1363:73"><expr pos:start="1363:63" pos:end="1363:73"><name pos:start="1363:63" pos:end="1363:73">us894_test4</name></expr></argument>)</argument_list></call><operator pos:start="1363:75" pos:end="1363:75">)</operator> <operator pos:start="1363:77" pos:end="1363:78">||</operator>
        <operator pos:start="1364:9" pos:end="1364:9">(</operator><name pos:start="1364:10" pos:end="1364:13">NULL</name> <operator pos:start="1364:15" pos:end="1364:16">==</operator> <call pos:start="1364:18" pos:end="1364:72"><name pos:start="1364:18" pos:end="1364:28">CU_add_test</name><argument_list pos:start="1364:29" pos:end="1364:72">(<argument pos:start="1364:30" pos:end="1364:35"><expr pos:start="1364:30" pos:end="1364:35"><name pos:start="1364:30" pos:end="1364:35">pSuite</name></expr></argument>, <argument pos:start="1364:38" pos:end="1364:58"><expr pos:start="1364:38" pos:end="1364:58"><literal type="string" pos:start="1364:38" pos:end="1364:58">"Get CA Certificates"</literal></expr></argument>, <argument pos:start="1364:61" pos:end="1364:71"><expr pos:start="1364:61" pos:end="1364:71"><name pos:start="1364:61" pos:end="1364:71">us894_test5</name></expr></argument>)</argument_list></call><operator pos:start="1364:73" pos:end="1364:73">)</operator> <operator pos:start="1364:75" pos:end="1364:76">||</operator>
        <operator pos:start="1365:9" pos:end="1365:9">(</operator><name pos:start="1365:10" pos:end="1365:13">NULL</name> <operator pos:start="1365:15" pos:end="1365:16">==</operator> <call pos:start="1365:18" pos:end="1365:65"><name pos:start="1365:18" pos:end="1365:28">CU_add_test</name><argument_list pos:start="1365:29" pos:end="1365:65">(<argument pos:start="1365:30" pos:end="1365:35"><expr pos:start="1365:30" pos:end="1365:35"><name pos:start="1365:30" pos:end="1365:35">pSuite</name></expr></argument>, <argument pos:start="1365:38" pos:end="1365:51"><expr pos:start="1365:38" pos:end="1365:51"><literal type="string" pos:start="1365:38" pos:end="1365:51">"SSL 3.0 Fail"</literal></expr></argument>, <argument pos:start="1365:54" pos:end="1365:64"><expr pos:start="1365:54" pos:end="1365:64"><name pos:start="1365:54" pos:end="1365:64">us894_test6</name></expr></argument>)</argument_list></call><operator pos:start="1365:66" pos:end="1365:66">)</operator> <operator pos:start="1365:68" pos:end="1365:69">||</operator>
        <operator pos:start="1366:9" pos:end="1366:9">(</operator><name pos:start="1366:10" pos:end="1366:13">NULL</name> <operator pos:start="1366:15" pos:end="1366:16">==</operator> <call pos:start="1366:18" pos:end="1366:65"><name pos:start="1366:18" pos:end="1366:28">CU_add_test</name><argument_list pos:start="1366:29" pos:end="1366:65">(<argument pos:start="1366:30" pos:end="1366:35"><expr pos:start="1366:30" pos:end="1366:35"><name pos:start="1366:30" pos:end="1366:35">pSuite</name></expr></argument>, <argument pos:start="1366:38" pos:end="1366:51"><expr pos:start="1366:38" pos:end="1366:51"><literal type="string" pos:start="1366:38" pos:end="1366:51">"TLS 1.0 Fail"</literal></expr></argument>, <argument pos:start="1366:54" pos:end="1366:64"><expr pos:start="1366:54" pos:end="1366:64"><name pos:start="1366:54" pos:end="1366:64">us894_test7</name></expr></argument>)</argument_list></call><operator pos:start="1366:66" pos:end="1366:66">)</operator> <operator pos:start="1366:68" pos:end="1366:69">||</operator>
        <operator pos:start="1367:9" pos:end="1367:9">(</operator><name pos:start="1367:10" pos:end="1367:13">NULL</name> <operator pos:start="1367:15" pos:end="1367:16">==</operator> <call pos:start="1367:18" pos:end="1367:60"><name pos:start="1367:18" pos:end="1367:28">CU_add_test</name><argument_list pos:start="1367:29" pos:end="1367:60">(<argument pos:start="1367:30" pos:end="1367:35"><expr pos:start="1367:30" pos:end="1367:35"><name pos:start="1367:30" pos:end="1367:35">pSuite</name></expr></argument>, <argument pos:start="1367:38" pos:end="1367:46"><expr pos:start="1367:38" pos:end="1367:46"><literal type="string" pos:start="1367:38" pos:end="1367:46">"TLS 1.1"</literal></expr></argument>, <argument pos:start="1367:49" pos:end="1367:59"><expr pos:start="1367:49" pos:end="1367:59"><name pos:start="1367:49" pos:end="1367:59">us894_test8</name></expr></argument>)</argument_list></call><operator pos:start="1367:61" pos:end="1367:61">)</operator> <operator pos:start="1367:63" pos:end="1367:64">||</operator>
        <operator pos:start="1368:9" pos:end="1368:9">(</operator><name pos:start="1368:10" pos:end="1368:13">NULL</name> <operator pos:start="1368:15" pos:end="1368:16">==</operator> <call pos:start="1368:18" pos:end="1368:60"><name pos:start="1368:18" pos:end="1368:28">CU_add_test</name><argument_list pos:start="1368:29" pos:end="1368:60">(<argument pos:start="1368:30" pos:end="1368:35"><expr pos:start="1368:30" pos:end="1368:35"><name pos:start="1368:30" pos:end="1368:35">pSuite</name></expr></argument>, <argument pos:start="1368:38" pos:end="1368:46"><expr pos:start="1368:38" pos:end="1368:46"><literal type="string" pos:start="1368:38" pos:end="1368:46">"TLS 1.2"</literal></expr></argument>, <argument pos:start="1368:49" pos:end="1368:59"><expr pos:start="1368:49" pos:end="1368:59"><name pos:start="1368:49" pos:end="1368:59">us894_test9</name></expr></argument>)</argument_list></call><operator pos:start="1368:61" pos:end="1368:61">)</operator> <operator pos:start="1368:63" pos:end="1368:64">||</operator>
        <operator pos:start="1369:9" pos:end="1369:9">(</operator><name pos:start="1369:10" pos:end="1369:13">NULL</name> <operator pos:start="1369:15" pos:end="1369:16">==</operator> <call pos:start="1369:18" pos:end="1369:92"><name pos:start="1369:18" pos:end="1369:28">CU_add_test</name><argument_list pos:start="1369:29" pos:end="1369:92">(<argument pos:start="1369:30" pos:end="1369:35"><expr pos:start="1369:30" pos:end="1369:35"><name pos:start="1369:30" pos:end="1369:35">pSuite</name></expr></argument>, <argument pos:start="1369:38" pos:end="1369:77"><expr pos:start="1369:38" pos:end="1369:77"><literal type="string" pos:start="1369:38" pos:end="1369:77">"Certificate auth - explicit cert chain"</literal></expr></argument>, <argument pos:start="1369:80" pos:end="1369:91"><expr pos:start="1369:80" pos:end="1369:91"><name pos:start="1369:80" pos:end="1369:91">us894_test10</name></expr></argument>)</argument_list></call><operator pos:start="1369:93" pos:end="1369:93">)</operator> <operator pos:start="1369:95" pos:end="1369:96">||</operator>
        <operator pos:start="1370:9" pos:end="1370:9">(</operator><name pos:start="1370:10" pos:end="1370:13">NULL</name> <operator pos:start="1370:15" pos:end="1370:16">==</operator> <call pos:start="1370:18" pos:end="1370:92"><name pos:start="1370:18" pos:end="1370:28">CU_add_test</name><argument_list pos:start="1370:29" pos:end="1370:92">(<argument pos:start="1370:30" pos:end="1370:35"><expr pos:start="1370:30" pos:end="1370:35"><name pos:start="1370:30" pos:end="1370:35">pSuite</name></expr></argument>, <argument pos:start="1370:38" pos:end="1370:77"><expr pos:start="1370:38" pos:end="1370:77"><literal type="string" pos:start="1370:38" pos:end="1370:77">"Certificate auth - implicit cert chain"</literal></expr></argument>, <argument pos:start="1370:80" pos:end="1370:91"><expr pos:start="1370:80" pos:end="1370:91"><name pos:start="1370:80" pos:end="1370:91">us894_test11</name></expr></argument>)</argument_list></call><operator pos:start="1370:93" pos:end="1370:93">)</operator> <operator pos:start="1370:95" pos:end="1370:96">||</operator>
        <operator pos:start="1371:9" pos:end="1371:9">(</operator><name pos:start="1371:10" pos:end="1371:13">NULL</name> <operator pos:start="1371:15" pos:end="1371:16">==</operator> <call pos:start="1371:18" pos:end="1371:85"><name pos:start="1371:18" pos:end="1371:28">CU_add_test</name><argument_list pos:start="1371:29" pos:end="1371:85">(<argument pos:start="1371:30" pos:end="1371:35"><expr pos:start="1371:30" pos:end="1371:35"><name pos:start="1371:30" pos:end="1371:35">pSuite</name></expr></argument>, <argument pos:start="1371:38" pos:end="1371:70"><expr pos:start="1371:38" pos:end="1371:70"><literal type="string" pos:start="1371:38" pos:end="1371:70">"Certificate auth - revoked cert"</literal></expr></argument>, <argument pos:start="1371:73" pos:end="1371:84"><expr pos:start="1371:73" pos:end="1371:84"><name pos:start="1371:73" pos:end="1371:84">us894_test12</name></expr></argument>)</argument_list></call><operator pos:start="1371:86" pos:end="1371:86">)</operator> <operator pos:start="1371:88" pos:end="1371:89">||</operator>
        <operator pos:start="1372:9" pos:end="1372:9">(</operator><name pos:start="1372:10" pos:end="1372:13">NULL</name> <operator pos:start="1372:15" pos:end="1372:16">==</operator> <call pos:start="1372:18" pos:end="1372:89"><name pos:start="1372:18" pos:end="1372:28">CU_add_test</name><argument_list pos:start="1372:29" pos:end="1372:89">(<argument pos:start="1372:30" pos:end="1372:35"><expr pos:start="1372:30" pos:end="1372:35"><name pos:start="1372:30" pos:end="1372:35">pSuite</name></expr></argument>, <argument pos:start="1372:38" pos:end="1372:74"><expr pos:start="1372:38" pos:end="1372:74"><literal type="string" pos:start="1372:38" pos:end="1372:74">"Certificate auth - self-signed cert"</literal></expr></argument>, <argument pos:start="1372:77" pos:end="1372:88"><expr pos:start="1372:77" pos:end="1372:88"><name pos:start="1372:77" pos:end="1372:88">us894_test13</name></expr></argument>)</argument_list></call><operator pos:start="1372:90" pos:end="1372:90">)</operator> <operator pos:start="1372:92" pos:end="1372:93">||</operator>
        <operator pos:start="1373:9" pos:end="1373:9">(</operator><name pos:start="1373:10" pos:end="1373:13">NULL</name> <operator pos:start="1373:15" pos:end="1373:16">==</operator> <call pos:start="1373:18" pos:end="1373:80"><name pos:start="1373:18" pos:end="1373:28">CU_add_test</name><argument_list pos:start="1373:29" pos:end="1373:80">(<argument pos:start="1373:30" pos:end="1373:35"><expr pos:start="1373:30" pos:end="1373:35"><name pos:start="1373:30" pos:end="1373:35">pSuite</name></expr></argument>, <argument pos:start="1373:38" pos:end="1373:65"><expr pos:start="1373:38" pos:end="1373:65"><literal type="string" pos:start="1373:38" pos:end="1373:65">"Anon cipher suite disabled"</literal></expr></argument>, <argument pos:start="1373:68" pos:end="1373:79"><expr pos:start="1373:68" pos:end="1373:79"><name pos:start="1373:68" pos:end="1373:79">us894_test14</name></expr></argument>)</argument_list></call><operator pos:start="1373:81" pos:end="1373:81">)</operator> <operator pos:start="1373:83" pos:end="1373:84">||</operator>
        <operator pos:start="1374:9" pos:end="1374:9">(</operator><name pos:start="1374:10" pos:end="1374:13">NULL</name> <operator pos:start="1374:15" pos:end="1374:16">==</operator> <call pos:start="1374:18" pos:end="1374:64"><name pos:start="1374:18" pos:end="1374:28">CU_add_test</name><argument_list pos:start="1374:29" pos:end="1374:64">(<argument pos:start="1374:30" pos:end="1374:35"><expr pos:start="1374:30" pos:end="1374:35"><name pos:start="1374:30" pos:end="1374:35">pSuite</name></expr></argument>, <argument pos:start="1374:38" pos:end="1374:49"><expr pos:start="1374:38" pos:end="1374:49"><literal type="string" pos:start="1374:38" pos:end="1374:49">"NULL Realm"</literal></expr></argument>, <argument pos:start="1374:52" pos:end="1374:63"><expr pos:start="1374:52" pos:end="1374:63"><name pos:start="1374:52" pos:end="1374:63">us894_test15</name></expr></argument>)</argument_list></call><operator pos:start="1374:65" pos:end="1374:65">)</operator> <operator pos:start="1374:67" pos:end="1374:68">||</operator>
        <operator pos:start="1375:9" pos:end="1375:9">(</operator><name pos:start="1375:10" pos:end="1375:13">NULL</name> <operator pos:start="1375:15" pos:end="1375:16">==</operator> <call pos:start="1375:18" pos:end="1375:70"><name pos:start="1375:18" pos:end="1375:28">CU_add_test</name><argument_list pos:start="1375:29" pos:end="1375:70">(<argument pos:start="1375:30" pos:end="1375:35"><expr pos:start="1375:30" pos:end="1375:35"><name pos:start="1375:30" pos:end="1375:35">pSuite</name></expr></argument>, <argument pos:start="1375:38" pos:end="1375:55"><expr pos:start="1375:38" pos:end="1375:55"><literal type="string" pos:start="1375:38" pos:end="1375:55">"NULL server cert"</literal></expr></argument>, <argument pos:start="1375:58" pos:end="1375:69"><expr pos:start="1375:58" pos:end="1375:69"><name pos:start="1375:58" pos:end="1375:69">us894_test16</name></expr></argument>)</argument_list></call><operator pos:start="1375:71" pos:end="1375:71">)</operator> <operator pos:start="1375:73" pos:end="1375:74">||</operator>
        <operator pos:start="1376:9" pos:end="1376:9">(</operator><name pos:start="1376:10" pos:end="1376:13">NULL</name> <operator pos:start="1376:15" pos:end="1376:16">==</operator> <call pos:start="1376:18" pos:end="1376:69"><name pos:start="1376:18" pos:end="1376:28">CU_add_test</name><argument_list pos:start="1376:29" pos:end="1376:69">(<argument pos:start="1376:30" pos:end="1376:35"><expr pos:start="1376:30" pos:end="1376:35"><name pos:start="1376:30" pos:end="1376:35">pSuite</name></expr></argument>, <argument pos:start="1376:38" pos:end="1376:54"><expr pos:start="1376:38" pos:end="1376:54"><literal type="string" pos:start="1376:38" pos:end="1376:54">"NULL server key"</literal></expr></argument>, <argument pos:start="1376:57" pos:end="1376:68"><expr pos:start="1376:57" pos:end="1376:68"><name pos:start="1376:57" pos:end="1376:68">us894_test17</name></expr></argument>)</argument_list></call><operator pos:start="1376:70" pos:end="1376:70">)</operator> <operator pos:start="1376:72" pos:end="1376:73">||</operator>
        <operator pos:start="1377:9" pos:end="1377:9">(</operator><name pos:start="1377:10" pos:end="1377:13">NULL</name> <operator pos:start="1377:15" pos:end="1377:16">==</operator> <call pos:start="1377:18" pos:end="1377:73"><name pos:start="1377:18" pos:end="1377:28">CU_add_test</name><argument_list pos:start="1377:29" pos:end="1377:73">(<argument pos:start="1377:30" pos:end="1377:35"><expr pos:start="1377:30" pos:end="1377:35"><name pos:start="1377:30" pos:end="1377:35">pSuite</name></expr></argument>, <argument pos:start="1377:38" pos:end="1377:58"><expr pos:start="1377:38" pos:end="1377:58"><literal type="string" pos:start="1377:38" pos:end="1377:58">"NULL local CA chain"</literal></expr></argument>, <argument pos:start="1377:61" pos:end="1377:72"><expr pos:start="1377:61" pos:end="1377:72"><name pos:start="1377:61" pos:end="1377:72">us894_test18</name></expr></argument>)</argument_list></call><operator pos:start="1377:74" pos:end="1377:74">)</operator> <operator pos:start="1377:76" pos:end="1377:77">||</operator>
        <operator pos:start="1378:9" pos:end="1378:9">(</operator><name pos:start="1378:10" pos:end="1378:13">NULL</name> <operator pos:start="1378:15" pos:end="1378:16">==</operator> <call pos:start="1378:18" pos:end="1378:78"><name pos:start="1378:18" pos:end="1378:28">CU_add_test</name><argument_list pos:start="1378:29" pos:end="1378:78">(<argument pos:start="1378:30" pos:end="1378:35"><expr pos:start="1378:30" pos:end="1378:35"><name pos:start="1378:30" pos:end="1378:35">pSuite</name></expr></argument>, <argument pos:start="1378:38" pos:end="1378:63"><expr pos:start="1378:38" pos:end="1378:63"><literal type="string" pos:start="1378:38" pos:end="1378:63">"Corrupted local CA chain"</literal></expr></argument>, <argument pos:start="1378:66" pos:end="1378:77"><expr pos:start="1378:66" pos:end="1378:77"><name pos:start="1378:66" pos:end="1378:77">us894_test19</name></expr></argument>)</argument_list></call><operator pos:start="1378:79" pos:end="1378:79">)</operator> <operator pos:start="1378:81" pos:end="1378:82">||</operator>
        <operator pos:start="1379:9" pos:end="1379:9">(</operator><name pos:start="1379:10" pos:end="1379:13">NULL</name> <operator pos:start="1379:15" pos:end="1379:16">==</operator> <call pos:start="1379:18" pos:end="1379:71"><name pos:start="1379:18" pos:end="1379:28">CU_add_test</name><argument_list pos:start="1379:29" pos:end="1379:71">(<argument pos:start="1379:30" pos:end="1379:35"><expr pos:start="1379:30" pos:end="1379:35"><name pos:start="1379:30" pos:end="1379:35">pSuite</name></expr></argument>, <argument pos:start="1379:38" pos:end="1379:56"><expr pos:start="1379:38" pos:end="1379:56"><literal type="string" pos:start="1379:38" pos:end="1379:56">"HTTP POST cacerts"</literal></expr></argument>, <argument pos:start="1379:59" pos:end="1379:70"><expr pos:start="1379:59" pos:end="1379:70"><name pos:start="1379:59" pos:end="1379:70">us894_test20</name></expr></argument>)</argument_list></call><operator pos:start="1379:72" pos:end="1379:72">)</operator> <operator pos:start="1379:74" pos:end="1379:75">||</operator>
        <operator pos:start="1380:9" pos:end="1380:9">(</operator><name pos:start="1380:10" pos:end="1380:13">NULL</name> <operator pos:start="1380:15" pos:end="1380:16">==</operator> <call pos:start="1380:18" pos:end="1380:93"><name pos:start="1380:18" pos:end="1380:28">CU_add_test</name><argument_list pos:start="1380:29" pos:end="1380:93">(<argument pos:start="1380:30" pos:end="1380:35"><expr pos:start="1380:30" pos:end="1380:35"><name pos:start="1380:30" pos:end="1380:35">pSuite</name></expr></argument>, <argument pos:start="1380:38" pos:end="1380:78"><expr pos:start="1380:38" pos:end="1380:78"><literal type="string" pos:start="1380:38" pos:end="1380:78">"SimpleEnroll - good HTTP auth/good Cert"</literal></expr></argument>, <argument pos:start="1380:81" pos:end="1380:92"><expr pos:start="1380:81" pos:end="1380:92"><name pos:start="1380:81" pos:end="1380:92">us894_test21</name></expr></argument>)</argument_list></call><operator pos:start="1380:94" pos:end="1380:94">)</operator> <operator pos:start="1380:96" pos:end="1380:97">||</operator>
        <operator pos:start="1381:9" pos:end="1381:9">(</operator><name pos:start="1381:10" pos:end="1381:13">NULL</name> <operator pos:start="1381:15" pos:end="1381:16">==</operator> <call pos:start="1381:18" pos:end="1381:92"><name pos:start="1381:18" pos:end="1381:28">CU_add_test</name><argument_list pos:start="1381:29" pos:end="1381:92">(<argument pos:start="1381:30" pos:end="1381:35"><expr pos:start="1381:30" pos:end="1381:35"><name pos:start="1381:30" pos:end="1381:35">pSuite</name></expr></argument>, <argument pos:start="1381:38" pos:end="1381:77"><expr pos:start="1381:38" pos:end="1381:77"><literal type="string" pos:start="1381:38" pos:end="1381:77">"SimpleEnroll - bad HTTP auth/good Cert"</literal></expr></argument>, <argument pos:start="1381:80" pos:end="1381:91"><expr pos:start="1381:80" pos:end="1381:91"><name pos:start="1381:80" pos:end="1381:91">us894_test22</name></expr></argument>)</argument_list></call><operator pos:start="1381:93" pos:end="1381:93">)</operator> <operator pos:start="1381:95" pos:end="1381:96">||</operator>
        <operator pos:start="1382:9" pos:end="1382:9">(</operator><name pos:start="1382:10" pos:end="1382:13">NULL</name> <operator pos:start="1382:15" pos:end="1382:16">==</operator> <call pos:start="1382:18" pos:end="1382:89"><name pos:start="1382:18" pos:end="1382:28">CU_add_test</name><argument_list pos:start="1382:29" pos:end="1382:89">(<argument pos:start="1382:30" pos:end="1382:35"><expr pos:start="1382:30" pos:end="1382:35"><name pos:start="1382:30" pos:end="1382:35">pSuite</name></expr></argument>, <argument pos:start="1382:38" pos:end="1382:74"><expr pos:start="1382:38" pos:end="1382:74"><literal type="string" pos:start="1382:38" pos:end="1382:74">"SimpleEnroll - no HTTP auth/no Cert"</literal></expr></argument>, <argument pos:start="1382:77" pos:end="1382:88"><expr pos:start="1382:77" pos:end="1382:88"><name pos:start="1382:77" pos:end="1382:88">us894_test23</name></expr></argument>)</argument_list></call><operator pos:start="1382:90" pos:end="1382:90">)</operator> <operator pos:start="1382:92" pos:end="1382:93">||</operator>
        <operator pos:start="1383:9" pos:end="1383:9">(</operator><name pos:start="1383:10" pos:end="1383:13">NULL</name> <operator pos:start="1383:15" pos:end="1383:16">==</operator> <call pos:start="1383:18" pos:end="1383:83"><name pos:start="1383:18" pos:end="1383:28">CU_add_test</name><argument_list pos:start="1383:29" pos:end="1383:83">(<argument pos:start="1383:30" pos:end="1383:35"><expr pos:start="1383:30" pos:end="1383:35"><name pos:start="1383:30" pos:end="1383:35">pSuite</name></expr></argument>, <argument pos:start="1383:38" pos:end="1383:68"><expr pos:start="1383:38" pos:end="1383:68"><literal type="string" pos:start="1383:38" pos:end="1383:68">"Set Server Invalid parameters"</literal></expr></argument>, <argument pos:start="1383:71" pos:end="1383:82"><expr pos:start="1383:71" pos:end="1383:82"><name pos:start="1383:71" pos:end="1383:82">us894_test24</name></expr></argument>)</argument_list></call><operator pos:start="1383:84" pos:end="1383:84">)</operator> <operator pos:start="1383:86" pos:end="1383:87">||</operator>
        <operator pos:start="1384:9" pos:end="1384:9">(</operator><name pos:start="1384:10" pos:end="1384:13">NULL</name> <operator pos:start="1384:15" pos:end="1384:16">==</operator> <call pos:start="1384:18" pos:end="1384:86"><name pos:start="1384:18" pos:end="1384:28">CU_add_test</name><argument_list pos:start="1384:29" pos:end="1384:86">(<argument pos:start="1384:30" pos:end="1384:35"><expr pos:start="1384:30" pos:end="1384:35"><name pos:start="1384:30" pos:end="1384:35">pSuite</name></expr></argument>, <argument pos:start="1384:38" pos:end="1384:71"><expr pos:start="1384:38" pos:end="1384:71"><literal type="string" pos:start="1384:38" pos:end="1384:71">"Set Auth Mode Invalid parameters"</literal></expr></argument>, <argument pos:start="1384:74" pos:end="1384:85"><expr pos:start="1384:74" pos:end="1384:85"><name pos:start="1384:74" pos:end="1384:85">us894_test25</name></expr></argument>)</argument_list></call><operator pos:start="1384:87" pos:end="1384:87">)</operator> <operator pos:start="1384:89" pos:end="1384:90">||</operator>
        <operator pos:start="1385:9" pos:end="1385:9">(</operator><name pos:start="1385:10" pos:end="1385:13">NULL</name> <operator pos:start="1385:15" pos:end="1385:16">==</operator> <call pos:start="1385:18" pos:end="1385:80"><name pos:start="1385:18" pos:end="1385:28">CU_add_test</name><argument_list pos:start="1385:29" pos:end="1385:80">(<argument pos:start="1385:30" pos:end="1385:35"><expr pos:start="1385:30" pos:end="1385:35"><name pos:start="1385:30" pos:end="1385:35">pSuite</name></expr></argument>, <argument pos:start="1385:38" pos:end="1385:65"><expr pos:start="1385:38" pos:end="1385:65"><literal type="string" pos:start="1385:38" pos:end="1385:65">"Optional CA Chain Response"</literal></expr></argument>, <argument pos:start="1385:68" pos:end="1385:79"><expr pos:start="1385:68" pos:end="1385:79"><name pos:start="1385:68" pos:end="1385:79">us894_test26</name></expr></argument>)</argument_list></call><operator pos:start="1385:81" pos:end="1385:81">)</operator> <operator pos:start="1385:83" pos:end="1385:84">||</operator>
        <operator pos:start="1386:9" pos:end="1386:9">(</operator><name pos:start="1386:10" pos:end="1386:13">NULL</name> <operator pos:start="1386:15" pos:end="1386:16">==</operator> <call pos:start="1386:18" pos:end="1386:88"><name pos:start="1386:18" pos:end="1386:28">CU_add_test</name><argument_list pos:start="1386:29" pos:end="1386:88">(<argument pos:start="1386:30" pos:end="1386:35"><expr pos:start="1386:30" pos:end="1386:35"><name pos:start="1386:30" pos:end="1386:35">pSuite</name></expr></argument>, <argument pos:start="1386:38" pos:end="1386:73"><expr pos:start="1386:38" pos:end="1386:73"><literal type="string" pos:start="1386:38" pos:end="1386:73">"Bad userid/password for proxy init"</literal></expr></argument>, <argument pos:start="1386:76" pos:end="1386:87"><expr pos:start="1386:76" pos:end="1386:87"><name pos:start="1386:76" pos:end="1386:87">us894_test27</name></expr></argument>)</argument_list></call><operator pos:start="1386:89" pos:end="1386:89">)</operator></expr>)</condition>
    <block pos:start="1387:5" pos:end="1390:5">{<block_content pos:start="1388:8" pos:end="1389:29">
       <expr_stmt pos:start="1388:8" pos:end="1388:29"><expr pos:start="1388:8" pos:end="1388:28"><call pos:start="1388:8" pos:end="1388:28"><name pos:start="1388:8" pos:end="1388:26">CU_cleanup_registry</name><argument_list pos:start="1388:27" pos:end="1388:28">()</argument_list></call></expr>;</expr_stmt>
       <return pos:start="1389:8" pos:end="1389:29">return <expr pos:start="1389:15" pos:end="1389:28"><call pos:start="1389:15" pos:end="1389:28"><name pos:start="1389:15" pos:end="1389:26">CU_get_error</name><argument_list pos:start="1389:27" pos:end="1389:28">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <return pos:start="1393:5" pos:end="1395:0">return <expr pos:start="1393:12" pos:end="1393:22"><name pos:start="1393:12" pos:end="1393:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1394:1" pos:end="1394:6">#<cpp:directive pos:start="1394:2" pos:end="1394:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
