<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us893.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us893.c - Unit Tests for User Story 893 - proxy reenroll
 *
 * October, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:21">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:21">"st_proxy.h"</cpp:file></cpp:include>
<cpp:include pos:start="20:1" pos:end="20:24">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="22:1" pos:end="22:17">#<cpp:directive pos:start="22:2" pos:end="22:6">ifdef</cpp:directive> <name pos:start="22:8" pos:end="22:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="24:1" pos:end="24:28">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

<decl_stmt pos:start="27:1" pos:end="27:37"><decl pos:start="27:1" pos:end="27:36"><type pos:start="27:1" pos:end="27:22"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:15">unsigned</name> <name pos:start="27:17" pos:end="27:20">char</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:29">cacerts</name> <init pos:start="27:31" pos:end="27:36">= <expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="28:1" pos:end="80:0"><decl pos:start="28:1" pos:end="28:26"><type pos:start="28:1" pos:end="28:10"><specifier pos:start="28:1" pos:end="28:6">static</specifier> <name pos:start="28:8" pos:end="28:10">int</name></type> <name pos:start="28:12" pos:end="28:22">cacerts_len</name> <init pos:start="28:24" pos:end="28:26">= <expr pos:start="28:26" pos:end="28:26"><literal type="number" pos:start="28:26" pos:end="28:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="30:1" pos:end="30:41">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:29"><name pos:start="30:9" pos:end="30:29">US893_TCP_SERVER_PORT</name></cpp:macro>       <cpp:value pos:start="30:37" pos:end="30:41">29893</cpp:value></cpp:define>
<cpp:define pos:start="31:1" pos:end="31:41">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:28">US893_TCP_PROXY_PORT</name></cpp:macro>        <cpp:value pos:start="31:37" pos:end="31:41">29093</cpp:value></cpp:define>

<comment type="block" pos:start="33:1" pos:end="38:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the rsa.req file:
 *
 * openssl req -newkey rsa:2048 -keyout rsakey.pem -keyform PEM -out rsa.req -outform PEM
 */</comment>
<cpp:define pos:start="39:1" pos:end="39:999">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:28">US893_PKCS10_RSA2048</name></cpp:macro> <cpp:value pos:start="39:30" pos:end="39:999">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDJA9mdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>

<cpp:define pos:start="41:1" pos:end="41:999">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:28">US893_PKCS10_CORRUPT</name></cpp:macro> <cpp:value pos:start="41:30" pos:end="41:999">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDfffmdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>

<cpp:define pos:start="43:1" pos:end="43:43">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:23">US893_SERVER_IP</name></cpp:macro>         <cpp:value pos:start="43:33" pos:end="43:43">"127.0.0.1"</cpp:value></cpp:define> 
<cpp:define pos:start="44:1" pos:end="44:88">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:29"><name pos:start="44:9" pos:end="44:29">US893_REENROLL_URL_BA</name></cpp:macro>   <cpp:value pos:start="44:33" pos:end="44:88">"https://127.0.0.1:29093/.well-known/est/simplereenroll"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:66">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:23">US893_PKCS10_CT</name></cpp:macro>         <cpp:value pos:start="45:33" pos:end="45:66">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 
<cpp:define pos:start="46:1" pos:end="46:48">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:25"><name pos:start="46:9" pos:end="46:25">US893_UIDPWD_GOOD</name></cpp:macro>       <cpp:value pos:start="46:33" pos:end="46:48">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:41">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:17">US893_UID</name></cpp:macro>               <cpp:value pos:start="47:33" pos:end="47:41">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:40">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:17"><name pos:start="48:9" pos:end="48:17">US893_PWD</name></cpp:macro>               <cpp:value pos:start="48:33" pos:end="48:40">"estpwd"</cpp:value></cpp:define>
<cpp:ifndef pos:start="49:1" pos:end="49:13">#<cpp:directive pos:start="49:2" pos:end="49:7">ifndef</cpp:directive> <name pos:start="49:9" pos:end="49:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="50:1" pos:end="50:53">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:21"><name pos:start="50:9" pos:end="50:21">US893_CACERTS</name></cpp:macro>           <cpp:value pos:start="50:33" pos:end="50:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:53">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:27">US893_TRUSTED_CERTS</name></cpp:macro>     <cpp:value pos:start="51:33" pos:end="51:53">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:74">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:28"><name pos:start="52:9" pos:end="52:28">US893_SERVER_CERTKEY</name></cpp:macro>    <cpp:value pos:start="52:33" pos:end="52:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="53:1" pos:end="53:48">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:24">US893_PROXY_CERT</name></cpp:macro>        <cpp:value pos:start="53:33" pos:end="53:48">"US893/cert.pem"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:47">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:23"><name pos:start="54:9" pos:end="54:23">US893_PROXY_KEY</name></cpp:macro>         <cpp:value pos:start="54:33" pos:end="54:47">"US893/key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:58">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:28">US893_UNTRUSTED_CERT</name></cpp:macro>    <cpp:value pos:start="55:33" pos:end="55:58">"US893/cert-untrusted.pem"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:57">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:27"><name pos:start="56:9" pos:end="56:27">US893_UNTRUSTED_KEY</name></cpp:macro>     <cpp:value pos:start="56:33" pos:end="56:57">"US893/key-untrusted.pem"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:55">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:25">US893_EXPIRED_KEY</name></cpp:macro>       <cpp:value pos:start="57:33" pos:end="57:55">"US893/key-expired.pem"</cpp:value></cpp:define>
<cpp:define pos:start="58:1" pos:end="58:56">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:26"><name pos:start="58:9" pos:end="58:26">US893_EXPIRED_CERT</name></cpp:macro>      <cpp:value pos:start="58:33" pos:end="58:56">"US893/cert-expired.pem"</cpp:value></cpp:define>

<cpp:define pos:start="60:1" pos:end="60:56">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:26"><name pos:start="60:9" pos:end="60:26">US893_TC2_CERT_TXT</name></cpp:macro>      <cpp:value pos:start="60:33" pos:end="60:56">"US893/tc2-new-cert.txt"</cpp:value></cpp:define>
<cpp:define pos:start="61:1" pos:end="61:61">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:26">US893_TC2_CERT_B64</name></cpp:macro>      <cpp:value pos:start="61:33" pos:end="61:61">"US893/tc2-new-cert.pkcs7b64"</cpp:value></cpp:define>
<cpp:define pos:start="62:1" pos:end="62:58">#<cpp:directive pos:start="62:2" pos:end="62:7">define</cpp:directive> <cpp:macro pos:start="62:9" pos:end="62:26"><name pos:start="62:9" pos:end="62:26">US893_TC2_CERT_PK7</name></cpp:macro>      <cpp:value pos:start="62:33" pos:end="62:58">"US893/tc2-new-cert.pkcs7"</cpp:value></cpp:define>
<cpp:define pos:start="63:1" pos:end="63:56">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:26">US893_TC2_CERT_PEM</name></cpp:macro>      <cpp:value pos:start="63:33" pos:end="63:56">"US893/tc2-new-cert.pem"</cpp:value></cpp:define>
<cpp:else pos:start="64:1" pos:end="64:5">#<cpp:directive pos:start="64:2" pos:end="64:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="65:1" pos:end="65:55">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:21">US893_CACERTS</name></cpp:macro>           <cpp:value pos:start="65:33" pos:end="65:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="66:1" pos:end="66:54">#<cpp:directive pos:start="66:2" pos:end="66:7">define</cpp:directive> <cpp:macro pos:start="66:9" pos:end="66:27"><name pos:start="66:9" pos:end="66:27">US893_TRUSTED_CERTS</name></cpp:macro>     <cpp:value pos:start="66:33" pos:end="66:54">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="67:1" pos:end="67:77">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:28">US893_SERVER_CERTKEY</name></cpp:macro>    <cpp:value pos:start="67:33" pos:end="67:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="68:1" pos:end="68:49">#<cpp:directive pos:start="68:2" pos:end="68:7">define</cpp:directive> <cpp:macro pos:start="68:9" pos:end="68:24"><name pos:start="68:9" pos:end="68:24">US893_PROXY_CERT</name></cpp:macro>        <cpp:value pos:start="68:33" pos:end="68:49">"US893\\cert.pem"</cpp:value></cpp:define>
<cpp:define pos:start="69:1" pos:end="69:48">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:23">US893_PROXY_KEY</name></cpp:macro>         <cpp:value pos:start="69:33" pos:end="69:48">"US893\\key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="70:1" pos:end="70:59">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:28"><name pos:start="70:9" pos:end="70:28">US893_UNTRUSTED_CERT</name></cpp:macro>    <cpp:value pos:start="70:33" pos:end="70:59">"US893\\cert-untrusted.pem"</cpp:value></cpp:define>
<cpp:define pos:start="71:1" pos:end="71:58">#<cpp:directive pos:start="71:2" pos:end="71:7">define</cpp:directive> <cpp:macro pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:27">US893_UNTRUSTED_KEY</name></cpp:macro>     <cpp:value pos:start="71:33" pos:end="71:58">"US893\\key-untrusted.pem"</cpp:value></cpp:define>
<cpp:define pos:start="72:1" pos:end="72:56">#<cpp:directive pos:start="72:2" pos:end="72:7">define</cpp:directive> <cpp:macro pos:start="72:9" pos:end="72:25"><name pos:start="72:9" pos:end="72:25">US893_EXPIRED_KEY</name></cpp:macro>       <cpp:value pos:start="72:33" pos:end="72:56">"US893\\key-expired.pem"</cpp:value></cpp:define>
<cpp:define pos:start="73:1" pos:end="73:57">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:26">US893_EXPIRED_CERT</name></cpp:macro>      <cpp:value pos:start="73:33" pos:end="73:57">"US893\\cert-expired.pem"</cpp:value></cpp:define>

<cpp:define pos:start="75:1" pos:end="75:57">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:26">US893_TC2_CERT_TXT</name></cpp:macro>      <cpp:value pos:start="75:33" pos:end="75:57">"US893\\tc2-new-cert.txt"</cpp:value></cpp:define>
<cpp:define pos:start="76:1" pos:end="76:62">#<cpp:directive pos:start="76:2" pos:end="76:7">define</cpp:directive> <cpp:macro pos:start="76:9" pos:end="76:26"><name pos:start="76:9" pos:end="76:26">US893_TC2_CERT_B64</name></cpp:macro>      <cpp:value pos:start="76:33" pos:end="76:62">"US893\\tc2-new-cert.pkcs7b64"</cpp:value></cpp:define>
<cpp:define pos:start="77:1" pos:end="77:59">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:26">US893_TC2_CERT_PK7</name></cpp:macro>      <cpp:value pos:start="77:33" pos:end="77:59">"US893\\tc2-new-cert.pkcs7"</cpp:value></cpp:define>
<cpp:define pos:start="78:1" pos:end="78:57">#<cpp:directive pos:start="78:2" pos:end="78:7">define</cpp:directive> <cpp:macro pos:start="78:9" pos:end="78:26"><name pos:start="78:9" pos:end="78:26">US893_TC2_CERT_PEM</name></cpp:macro>      <cpp:value pos:start="78:33" pos:end="78:57">"US893\\tc2-new-cert.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

<function pos:start="81:1" pos:end="108:1"><type pos:start="81:1" pos:end="81:11"><specifier pos:start="81:1" pos:end="81:6">static</specifier> <name pos:start="81:8" pos:end="81:11">void</name></type> <name pos:start="81:13" pos:end="81:23">us893_clean</name> <parameter_list pos:start="81:25" pos:end="81:30">(<parameter pos:start="81:26" pos:end="81:29"><decl pos:start="81:26" pos:end="81:29"><type pos:start="81:26" pos:end="81:29"><name pos:start="81:26" pos:end="81:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="82:1" pos:end="108:1">{<block_content pos:start="83:5" pos:end="108:0">
    <decl_stmt pos:start="83:5" pos:end="90:0"><decl pos:start="83:5" pos:end="83:17"><type pos:start="83:5" pos:end="83:8"><name pos:start="83:5" pos:end="83:8">char</name></type> <name pos:start="83:10" pos:end="83:17"><name pos:start="83:10" pos:end="83:12">cmd</name><index pos:start="83:13" pos:end="83:17">[<expr pos:start="83:14" pos:end="83:16"><literal type="number" pos:start="83:14" pos:end="83:16">200</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block" pos:start="85:5" pos:end="88:7">/*
     * These are all temporary files created
     * by the various test cases.
     */</comment>
<cpp:ifndef pos:start="89:1" pos:end="89:13">#<cpp:directive pos:start="89:2" pos:end="89:7">ifndef</cpp:directive> <name pos:start="89:9" pos:end="89:13">WIN32</name></cpp:ifndef>
    <expr_stmt pos:start="90:5" pos:end="90:46"><expr pos:start="90:5" pos:end="90:45"><call pos:start="90:5" pos:end="90:45"><name pos:start="90:5" pos:end="90:11">sprintf</name><argument_list pos:start="90:12" pos:end="90:45">(<argument pos:start="90:13" pos:end="90:15"><expr pos:start="90:13" pos:end="90:15"><name pos:start="90:13" pos:end="90:15">cmd</name></expr></argument>, <argument pos:start="90:18" pos:end="90:24"><expr pos:start="90:18" pos:end="90:24"><literal type="string" pos:start="90:18" pos:end="90:24">"rm %s"</literal></expr></argument>, <argument pos:start="90:27" pos:end="90:44"><expr pos:start="90:27" pos:end="90:44"><name pos:start="90:27" pos:end="90:44">US893_TC2_CERT_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:16"><expr pos:start="91:5" pos:end="91:15"><call pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:10">system</name><argument_list pos:start="91:11" pos:end="91:15">(<argument pos:start="91:12" pos:end="91:14"><expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:46"><expr pos:start="92:5" pos:end="92:45"><call pos:start="92:5" pos:end="92:45"><name pos:start="92:5" pos:end="92:11">sprintf</name><argument_list pos:start="92:12" pos:end="92:45">(<argument pos:start="92:13" pos:end="92:15"><expr pos:start="92:13" pos:end="92:15"><name pos:start="92:13" pos:end="92:15">cmd</name></expr></argument>, <argument pos:start="92:18" pos:end="92:24"><expr pos:start="92:18" pos:end="92:24"><literal type="string" pos:start="92:18" pos:end="92:24">"rm %s"</literal></expr></argument>, <argument pos:start="92:27" pos:end="92:44"><expr pos:start="92:27" pos:end="92:44"><name pos:start="92:27" pos:end="92:44">US893_TC2_CERT_B64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><call pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:10">system</name><argument_list pos:start="93:11" pos:end="93:15">(<argument pos:start="93:12" pos:end="93:14"><expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:46"><expr pos:start="94:5" pos:end="94:45"><call pos:start="94:5" pos:end="94:45"><name pos:start="94:5" pos:end="94:11">sprintf</name><argument_list pos:start="94:12" pos:end="94:45">(<argument pos:start="94:13" pos:end="94:15"><expr pos:start="94:13" pos:end="94:15"><name pos:start="94:13" pos:end="94:15">cmd</name></expr></argument>, <argument pos:start="94:18" pos:end="94:24"><expr pos:start="94:18" pos:end="94:24"><literal type="string" pos:start="94:18" pos:end="94:24">"rm %s"</literal></expr></argument>, <argument pos:start="94:27" pos:end="94:44"><expr pos:start="94:27" pos:end="94:44"><name pos:start="94:27" pos:end="94:44">US893_TC2_CERT_PK7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:16"><expr pos:start="95:5" pos:end="95:15"><call pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:10">system</name><argument_list pos:start="95:11" pos:end="95:15">(<argument pos:start="95:12" pos:end="95:14"><expr pos:start="95:12" pos:end="95:14"><name pos:start="95:12" pos:end="95:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="96:46"><expr pos:start="96:5" pos:end="96:45"><call pos:start="96:5" pos:end="96:45"><name pos:start="96:5" pos:end="96:11">sprintf</name><argument_list pos:start="96:12" pos:end="96:45">(<argument pos:start="96:13" pos:end="96:15"><expr pos:start="96:13" pos:end="96:15"><name pos:start="96:13" pos:end="96:15">cmd</name></expr></argument>, <argument pos:start="96:18" pos:end="96:24"><expr pos:start="96:18" pos:end="96:24"><literal type="string" pos:start="96:18" pos:end="96:24">"rm %s"</literal></expr></argument>, <argument pos:start="96:27" pos:end="96:44"><expr pos:start="96:27" pos:end="96:44"><name pos:start="96:27" pos:end="96:44">US893_TC2_CERT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="97:5" pos:end="99:0"><expr pos:start="97:5" pos:end="97:15"><call pos:start="97:5" pos:end="97:15"><name pos:start="97:5" pos:end="97:10">system</name><argument_list pos:start="97:11" pos:end="97:15">(<argument pos:start="97:12" pos:end="97:14"><expr pos:start="97:12" pos:end="97:14"><name pos:start="97:12" pos:end="97:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="98:1" pos:end="98:5">#<cpp:directive pos:start="98:2" pos:end="98:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="99:5" pos:end="99:47"><expr pos:start="99:5" pos:end="99:46"><call pos:start="99:5" pos:end="99:46"><name pos:start="99:5" pos:end="99:11">sprintf</name><argument_list pos:start="99:12" pos:end="99:46">(<argument pos:start="99:13" pos:end="99:15"><expr pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">cmd</name></expr></argument>, <argument pos:start="99:18" pos:end="99:25"><expr pos:start="99:18" pos:end="99:25"><literal type="string" pos:start="99:18" pos:end="99:25">"del %s"</literal></expr></argument>, <argument pos:start="99:28" pos:end="99:45"><expr pos:start="99:28" pos:end="99:45"><name pos:start="99:28" pos:end="99:45">US893_TC2_CERT_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:16"><expr pos:start="100:5" pos:end="100:15"><call pos:start="100:5" pos:end="100:15"><name pos:start="100:5" pos:end="100:10">system</name><argument_list pos:start="100:11" pos:end="100:15">(<argument pos:start="100:12" pos:end="100:14"><expr pos:start="100:12" pos:end="100:14"><name pos:start="100:12" pos:end="100:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="101:5" pos:end="101:47"><expr pos:start="101:5" pos:end="101:46"><call pos:start="101:5" pos:end="101:46"><name pos:start="101:5" pos:end="101:11">sprintf</name><argument_list pos:start="101:12" pos:end="101:46">(<argument pos:start="101:13" pos:end="101:15"><expr pos:start="101:13" pos:end="101:15"><name pos:start="101:13" pos:end="101:15">cmd</name></expr></argument>, <argument pos:start="101:18" pos:end="101:25"><expr pos:start="101:18" pos:end="101:25"><literal type="string" pos:start="101:18" pos:end="101:25">"del %s"</literal></expr></argument>, <argument pos:start="101:28" pos:end="101:45"><expr pos:start="101:28" pos:end="101:45"><name pos:start="101:28" pos:end="101:45">US893_TC2_CERT_B64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="102:5" pos:end="102:16"><expr pos:start="102:5" pos:end="102:15"><call pos:start="102:5" pos:end="102:15"><name pos:start="102:5" pos:end="102:10">system</name><argument_list pos:start="102:11" pos:end="102:15">(<argument pos:start="102:12" pos:end="102:14"><expr pos:start="102:12" pos:end="102:14"><name pos:start="102:12" pos:end="102:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:47"><expr pos:start="103:5" pos:end="103:46"><call pos:start="103:5" pos:end="103:46"><name pos:start="103:5" pos:end="103:11">sprintf</name><argument_list pos:start="103:12" pos:end="103:46">(<argument pos:start="103:13" pos:end="103:15"><expr pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">cmd</name></expr></argument>, <argument pos:start="103:18" pos:end="103:25"><expr pos:start="103:18" pos:end="103:25"><literal type="string" pos:start="103:18" pos:end="103:25">"del %s"</literal></expr></argument>, <argument pos:start="103:28" pos:end="103:45"><expr pos:start="103:28" pos:end="103:45"><name pos:start="103:28" pos:end="103:45">US893_TC2_CERT_PK7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="104:5" pos:end="104:16"><expr pos:start="104:5" pos:end="104:15"><call pos:start="104:5" pos:end="104:15"><name pos:start="104:5" pos:end="104:10">system</name><argument_list pos:start="104:11" pos:end="104:15">(<argument pos:start="104:12" pos:end="104:14"><expr pos:start="104:12" pos:end="104:14"><name pos:start="104:12" pos:end="104:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><call pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:11">sprintf</name><argument_list pos:start="105:12" pos:end="105:46">(<argument pos:start="105:13" pos:end="105:15"><expr pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">cmd</name></expr></argument>, <argument pos:start="105:18" pos:end="105:25"><expr pos:start="105:18" pos:end="105:25"><literal type="string" pos:start="105:18" pos:end="105:25">"del %s"</literal></expr></argument>, <argument pos:start="105:28" pos:end="105:45"><expr pos:start="105:28" pos:end="105:45"><name pos:start="105:28" pos:end="105:45">US893_TC2_CERT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="106:5" pos:end="108:0"><expr pos:start="106:5" pos:end="106:15"><call pos:start="106:5" pos:end="106:15"><name pos:start="106:5" pos:end="106:10">system</name><argument_list pos:start="106:11" pos:end="106:15">(<argument pos:start="106:12" pos:end="106:14"><expr pos:start="106:12" pos:end="106:14"><name pos:start="106:12" pos:end="106:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function pos:start="110:1" pos:end="146:1"><type pos:start="110:1" pos:end="110:10"><specifier pos:start="110:1" pos:end="110:6">static</specifier> <name pos:start="110:8" pos:end="110:10">int</name></type> <name pos:start="110:12" pos:end="110:29">us893_start_server</name> <parameter_list pos:start="110:31" pos:end="110:58">(<parameter pos:start="110:32" pos:end="110:48"><decl pos:start="110:32" pos:end="110:48"><type pos:start="110:32" pos:end="110:48"><name pos:start="110:32" pos:end="110:34">int</name></type> <name pos:start="110:36" pos:end="110:48">manual_enroll</name></decl></parameter>, <parameter pos:start="110:51" pos:end="110:57"><decl pos:start="110:51" pos:end="110:57"><type pos:start="110:51" pos:end="110:57"><name pos:start="110:51" pos:end="110:53">int</name></type> <name pos:start="110:55" pos:end="110:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="111:1" pos:end="146:1">{<block_content pos:start="112:5" pos:end="145:14">
    <decl_stmt pos:start="112:5" pos:end="112:11"><decl pos:start="112:5" pos:end="112:10"><type pos:start="112:5" pos:end="112:7"><name pos:start="112:5" pos:end="112:7">int</name></type> <name pos:start="112:9" pos:end="112:10">rv</name></decl>;</decl_stmt>

    <comment type="block" pos:start="114:5" pos:end="116:7">/*
     * First we start an EST server acting as the CA
     */</comment>
    <expr_stmt pos:start="117:5" pos:end="126:23"><expr pos:start="117:5" pos:end="126:22"><name pos:start="117:5" pos:end="117:6">rv</name> <operator pos:start="117:8" pos:end="117:8">=</operator> <call pos:start="117:10" pos:end="126:22"><name pos:start="117:10" pos:end="117:17">st_start</name><argument_list pos:start="117:18" pos:end="126:22">(<argument pos:start="117:19" pos:end="117:39"><expr pos:start="117:19" pos:end="117:39"><name pos:start="117:19" pos:end="117:39">US893_TCP_SERVER_PORT</name></expr></argument>,
                  <argument pos:start="118:19" pos:end="118:38"><expr pos:start="118:19" pos:end="118:38"><name pos:start="118:19" pos:end="118:38">US893_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="119:19" pos:end="119:38"><expr pos:start="119:19" pos:end="119:38"><name pos:start="119:19" pos:end="119:38">US893_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="120:19" pos:end="120:36"><expr pos:start="120:19" pos:end="120:36"><literal type="string" pos:start="120:19" pos:end="120:36">"US893 test realm"</literal></expr></argument>,
                  <argument pos:start="121:19" pos:end="121:31"><expr pos:start="121:19" pos:end="121:31"><name pos:start="121:19" pos:end="121:31">US893_CACERTS</name></expr></argument>,
                  <argument pos:start="122:19" pos:end="122:37"><expr pos:start="122:19" pos:end="122:37"><name pos:start="122:19" pos:end="122:37">US893_TRUSTED_CERTS</name></expr></argument>,
                  <argument pos:start="123:19" pos:end="123:42"><expr pos:start="123:19" pos:end="123:42"><literal type="string" pos:start="123:19" pos:end="123:42">"US893/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="124:19" pos:end="124:31"><expr pos:start="124:19" pos:end="124:31"><name pos:start="124:19" pos:end="124:31">manual_enroll</name></expr></argument>,
                  <argument pos:start="125:19" pos:end="125:19"><expr pos:start="125:19" pos:end="125:19"><literal type="number" pos:start="125:19" pos:end="125:19">0</literal></expr></argument>,
                  <argument pos:start="126:19" pos:end="126:21"><expr pos:start="126:19" pos:end="126:21"><name pos:start="126:19" pos:end="126:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="127:5" pos:end="128:18"><if pos:start="127:5" pos:end="128:18">if <condition pos:start="127:8" pos:end="127:27">(<expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:10">rv</name> <operator pos:start="127:12" pos:end="127:13">!=</operator> <name pos:start="127:15" pos:end="127:26">EST_ERR_NONE</name></expr>)</condition><block type="pseudo" pos:start="128:9" pos:end="128:18"><block_content pos:start="128:9" pos:end="128:18">
        <return pos:start="128:9" pos:end="128:18">return <expr pos:start="128:16" pos:end="128:17"><name pos:start="128:16" pos:end="128:17">rv</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="130:5" pos:end="132:7">/*
     * Next we start an EST proxy actging as an RA
     */</comment>
    <expr_stmt pos:start="133:5" pos:end="144:29"><expr pos:start="133:5" pos:end="144:28"><name pos:start="133:5" pos:end="133:6">rv</name> <operator pos:start="133:8" pos:end="133:8">=</operator> <call pos:start="133:10" pos:end="144:28"><name pos:start="133:10" pos:end="133:23">st_proxy_start</name><argument_list pos:start="133:24" pos:end="144:28">(<argument pos:start="133:25" pos:end="133:44"><expr pos:start="133:25" pos:end="133:44"><name pos:start="133:25" pos:end="133:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="134:25" pos:end="134:40"><expr pos:start="134:25" pos:end="134:40"><name pos:start="134:25" pos:end="134:40">US893_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="135:25" pos:end="135:39"><expr pos:start="135:25" pos:end="135:39"><name pos:start="135:25" pos:end="135:39">US893_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="136:25" pos:end="136:42"><expr pos:start="136:25" pos:end="136:42"><literal type="string" pos:start="136:25" pos:end="136:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="137:25" pos:end="137:37"><expr pos:start="137:25" pos:end="137:37"><name pos:start="137:25" pos:end="137:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="138:25" pos:end="138:43"><expr pos:start="138:25" pos:end="138:43"><name pos:start="138:25" pos:end="138:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="139:25" pos:end="139:33"><expr pos:start="139:25" pos:end="139:33"><literal type="string" pos:start="139:25" pos:end="139:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="140:25" pos:end="140:32"><expr pos:start="140:25" pos:end="140:32"><literal type="string" pos:start="140:25" pos:end="140:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="141:25" pos:end="141:35"><expr pos:start="141:25" pos:end="141:35"><literal type="string" pos:start="141:25" pos:end="141:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="142:25" pos:end="142:45"><expr pos:start="142:25" pos:end="142:45"><name pos:start="142:25" pos:end="142:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="143:25" pos:end="143:25"><expr pos:start="143:25" pos:end="143:25"><literal type="number" pos:start="143:25" pos:end="143:25">0</literal></expr></argument>,
                        <argument pos:start="144:25" pos:end="144:27"><expr pos:start="144:25" pos:end="144:27"><name pos:start="144:25" pos:end="144:27">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="145:5" pos:end="145:14">return <expr pos:start="145:12" pos:end="145:13"><name pos:start="145:12" pos:end="145:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="148:1" pos:end="152:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="153:1" pos:end="176:1"><type pos:start="153:1" pos:end="153:10"><specifier pos:start="153:1" pos:end="153:6">static</specifier> <name pos:start="153:8" pos:end="153:10">int</name></type> <name pos:start="153:12" pos:end="153:27">us893_init_suite</name> <parameter_list pos:start="153:29" pos:end="153:34">(<parameter pos:start="153:30" pos:end="153:33"><decl pos:start="153:30" pos:end="153:33"><type pos:start="153:30" pos:end="153:33"><name pos:start="153:30" pos:end="153:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="154:1" pos:end="176:1">{<block_content pos:start="155:5" pos:end="175:14">
    <decl_stmt pos:start="155:5" pos:end="155:11"><decl pos:start="155:5" pos:end="155:10"><type pos:start="155:5" pos:end="155:7"><name pos:start="155:5" pos:end="155:7">int</name></type> <name pos:start="155:9" pos:end="155:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:44"><expr pos:start="157:5" pos:end="157:43"><call pos:start="157:5" pos:end="157:43"><name pos:start="157:5" pos:end="157:19">est_init_logger</name><argument_list pos:start="157:20" pos:end="157:43">(<argument pos:start="157:21" pos:end="157:36"><expr pos:start="157:21" pos:end="157:36"><name pos:start="157:21" pos:end="157:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="157:39" pos:end="157:42"><expr pos:start="157:39" pos:end="157:42"><name pos:start="157:39" pos:end="157:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="159:5" pos:end="161:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="162:5" pos:end="162:60"><expr pos:start="162:5" pos:end="162:59"><name pos:start="162:5" pos:end="162:15">cacerts_len</name> <operator pos:start="162:17" pos:end="162:17">=</operator> <call pos:start="162:19" pos:end="162:59"><name pos:start="162:19" pos:end="162:34">read_binary_file</name><argument_list pos:start="162:35" pos:end="162:59">(<argument pos:start="162:36" pos:end="162:48"><expr pos:start="162:36" pos:end="162:48"><name pos:start="162:36" pos:end="162:48">US893_CACERTS</name></expr></argument>, <argument pos:start="162:51" pos:end="162:58"><expr pos:start="162:51" pos:end="162:58"><operator pos:start="162:51" pos:end="162:51">&amp;</operator><name pos:start="162:52" pos:end="162:58">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="163:5" pos:end="165:5"><if pos:start="163:5" pos:end="165:5">if <condition pos:start="163:8" pos:end="163:25">(<expr pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:19">cacerts_len</name> <operator pos:start="163:21" pos:end="163:22">&lt;=</operator> <literal type="number" pos:start="163:24" pos:end="163:24">0</literal></expr>)</condition> <block pos:start="163:27" pos:end="165:5">{<block_content pos:start="164:9" pos:end="164:17">
        <return pos:start="164:9" pos:end="164:17">return <expr pos:start="164:16" pos:end="164:16"><literal type="number" pos:start="164:16" pos:end="164:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:18"><expr pos:start="167:5" pos:end="167:17"><call pos:start="167:5" pos:end="167:17"><name pos:start="167:5" pos:end="167:15">us893_clean</name><argument_list pos:start="167:16" pos:end="167:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="169:5" pos:end="172:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="173:5" pos:end="173:34"><expr pos:start="173:5" pos:end="173:33"><name pos:start="173:5" pos:end="173:6">rv</name> <operator pos:start="173:8" pos:end="173:8">=</operator> <call pos:start="173:10" pos:end="173:33"><name pos:start="173:10" pos:end="173:27">us893_start_server</name><argument_list pos:start="173:28" pos:end="173:33">(<argument pos:start="173:29" pos:end="173:29"><expr pos:start="173:29" pos:end="173:29"><literal type="number" pos:start="173:29" pos:end="173:29">0</literal></expr></argument>, <argument pos:start="173:32" pos:end="173:32"><expr pos:start="173:32" pos:end="173:32"><literal type="number" pos:start="173:32" pos:end="173:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:14">return <expr pos:start="175:12" pos:end="175:13"><name pos:start="175:12" pos:end="175:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="178:1" pos:end="182:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="183:1" pos:end="189:1"><type pos:start="183:1" pos:end="183:10"><specifier pos:start="183:1" pos:end="183:6">static</specifier> <name pos:start="183:8" pos:end="183:10">int</name></type> <name pos:start="183:12" pos:end="183:30">us893_destory_suite</name> <parameter_list pos:start="183:32" pos:end="183:37">(<parameter pos:start="183:33" pos:end="183:36"><decl pos:start="183:33" pos:end="183:36"><type pos:start="183:33" pos:end="183:36"><name pos:start="183:33" pos:end="183:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="184:1" pos:end="189:1">{<block_content pos:start="185:5" pos:end="188:13">
    <expr_stmt pos:start="185:5" pos:end="185:14"><expr pos:start="185:5" pos:end="185:13"><call pos:start="185:5" pos:end="185:13"><name pos:start="185:5" pos:end="185:11">st_stop</name><argument_list pos:start="185:12" pos:end="185:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="186:5" pos:end="186:20"><expr pos:start="186:5" pos:end="186:19"><call pos:start="186:5" pos:end="186:19"><name pos:start="186:5" pos:end="186:17">st_proxy_stop</name><argument_list pos:start="186:18" pos:end="186:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="187:5" pos:end="187:18"><expr pos:start="187:5" pos:end="187:17"><call pos:start="187:5" pos:end="187:17"><name pos:start="187:5" pos:end="187:8">free</name><argument_list pos:start="187:9" pos:end="187:17">(<argument pos:start="187:10" pos:end="187:16"><expr pos:start="187:10" pos:end="187:16"><name pos:start="187:10" pos:end="187:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="188:5" pos:end="188:13">return <expr pos:start="188:12" pos:end="188:12"><literal type="number" pos:start="188:12" pos:end="188:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="191:1" pos:end="197:3">/*
 * Simple reenroll - RSA 2048
 *
 * This test case uses libcurl to test simple
 * reenroll of a 2048 bit RSA CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="198:1" pos:end="213:1"><type pos:start="198:1" pos:end="198:11"><specifier pos:start="198:1" pos:end="198:6">static</specifier> <name pos:start="198:8" pos:end="198:11">void</name></type> <name pos:start="198:13" pos:end="198:23">us893_test1</name> <parameter_list pos:start="198:25" pos:end="198:30">(<parameter pos:start="198:26" pos:end="198:29"><decl pos:start="198:26" pos:end="198:29"><type pos:start="198:26" pos:end="198:29"><name pos:start="198:26" pos:end="198:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="199:1" pos:end="213:1">{<block_content pos:start="200:5" pos:end="212:25">
    <decl_stmt pos:start="200:5" pos:end="200:12"><decl pos:start="200:5" pos:end="200:11"><type pos:start="200:5" pos:end="200:8"><name pos:start="200:5" pos:end="200:8">long</name></type> <name pos:start="200:10" pos:end="200:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="202:5" pos:end="203:5"><expr pos:start="202:5" pos:end="202:15"><name pos:start="202:5" pos:end="202:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="207:72"><expr pos:start="205:5" pos:end="207:71"><name pos:start="205:5" pos:end="205:6">rv</name> <operator pos:start="205:8" pos:end="205:8">=</operator> <call pos:start="205:10" pos:end="207:71"><name pos:start="205:10" pos:end="205:23">curl_http_post</name><argument_list pos:start="205:24" pos:end="207:71">(<argument pos:start="205:25" pos:end="205:45"><expr pos:start="205:25" pos:end="205:45"><name pos:start="205:25" pos:end="205:45">US893_REENROLL_URL_BA</name></expr></argument>, <argument pos:start="205:48" pos:end="205:62"><expr pos:start="205:48" pos:end="205:62"><name pos:start="205:48" pos:end="205:62">US893_PKCS10_CT</name></expr></argument>,
    <argument pos:start="206:5" pos:end="206:24"><expr pos:start="206:5" pos:end="206:24"><name pos:start="206:5" pos:end="206:24">US893_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="207:5" pos:end="207:21"><expr pos:start="207:5" pos:end="207:21"><name pos:start="207:5" pos:end="207:21">US893_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="207:24" pos:end="207:36"><expr pos:start="207:24" pos:end="207:36"><name pos:start="207:24" pos:end="207:36">US893_CACERTS</name></expr></argument>, <argument pos:start="207:39" pos:end="207:52"><expr pos:start="207:39" pos:end="207:52"><name pos:start="207:39" pos:end="207:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="207:55" pos:end="207:58"><expr pos:start="207:55" pos:end="207:58"><name pos:start="207:55" pos:end="207:58">NULL</name></expr></argument>, <argument pos:start="207:61" pos:end="207:64"><expr pos:start="207:61" pos:end="207:64"><name pos:start="207:61" pos:end="207:64">NULL</name></expr></argument>, <argument pos:start="207:67" pos:end="207:70"><expr pos:start="207:67" pos:end="207:70"><name pos:start="207:67" pos:end="207:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="208:5" pos:end="211:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="212:5" pos:end="212:25"><expr pos:start="212:5" pos:end="212:24"><call pos:start="212:5" pos:end="212:24"><name pos:start="212:5" pos:end="212:13">CU_ASSERT</name><argument_list pos:start="212:14" pos:end="212:24">(<argument pos:start="212:15" pos:end="212:23"><expr pos:start="212:15" pos:end="212:23"><name pos:start="212:15" pos:end="212:16">rv</name> <operator pos:start="212:18" pos:end="212:19">==</operator> <literal type="number" pos:start="212:21" pos:end="212:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="215:1" pos:end="224:3">/*
 * This test case uses an existing expired cert and
 * attempts to re-enroll it.  The expired certs contains
 * several X509 extensions. We verify the new issued
 * cert preserves these extensions using grep.  Note,
 * preserving these extensions requires the OpenSSL CA
 * to enable the "copy_extensions" knob in the OpenSSL
 * config file.  This is why this test suite uses a
 * unique copy of estExampleCA.cnf.
 */</comment>
<function pos:start="225:1" pos:end="377:1"><type pos:start="225:1" pos:end="225:11"><specifier pos:start="225:1" pos:end="225:6">static</specifier> <name pos:start="225:8" pos:end="225:11">void</name></type> <name pos:start="225:13" pos:end="225:23">us893_test2</name> <parameter_list pos:start="225:25" pos:end="225:30">(<parameter pos:start="225:26" pos:end="225:29"><decl pos:start="225:26" pos:end="225:29"><type pos:start="225:26" pos:end="225:29"><name pos:start="225:26" pos:end="225:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="226:1" pos:end="377:1">{<block_content pos:start="227:5" pos:end="376:22">
    <decl_stmt pos:start="227:5" pos:end="227:18"><decl pos:start="227:5" pos:end="227:17"><type pos:start="227:5" pos:end="227:13"><name pos:start="227:5" pos:end="227:11">EST_CTX</name> <modifier pos:start="227:13" pos:end="227:13">*</modifier></type><name pos:start="227:14" pos:end="227:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="228:5" pos:end="228:18"><decl pos:start="228:5" pos:end="228:17"><type pos:start="228:5" pos:end="228:14"><name pos:start="228:5" pos:end="228:12">EVP_PKEY</name> <modifier pos:start="228:14" pos:end="228:14">*</modifier></type><name pos:start="228:15" pos:end="228:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="229:5" pos:end="229:27"><decl pos:start="229:5" pos:end="229:26"><type pos:start="229:5" pos:end="229:19"><name pos:start="229:5" pos:end="229:12">unsigned</name> <name pos:start="229:14" pos:end="229:17">char</name> <modifier pos:start="229:19" pos:end="229:19">*</modifier></type><name pos:start="229:20" pos:end="229:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="230:5" pos:end="230:16"><decl pos:start="230:5" pos:end="230:15"><type pos:start="230:5" pos:end="230:7"><name pos:start="230:5" pos:end="230:7">int</name></type> <name pos:start="230:9" pos:end="230:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="231:5" pos:end="231:28"><decl pos:start="231:5" pos:end="231:27"><type pos:start="231:5" pos:end="231:19"><name pos:start="231:5" pos:end="231:12">unsigned</name> <name pos:start="231:14" pos:end="231:17">char</name> <modifier pos:start="231:19" pos:end="231:19">*</modifier></type><name pos:start="231:20" pos:end="231:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="232:5" pos:end="232:17"><decl pos:start="232:5" pos:end="232:16"><type pos:start="232:5" pos:end="232:7"><name pos:start="232:5" pos:end="232:7">int</name></type> <name pos:start="232:9" pos:end="232:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="233:5" pos:end="233:11"><decl pos:start="233:5" pos:end="233:10"><type pos:start="233:5" pos:end="233:7"><name pos:start="233:5" pos:end="233:7">int</name></type> <name pos:start="233:9" pos:end="233:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="234:5" pos:end="234:22"><decl pos:start="234:5" pos:end="234:21"><type pos:start="234:5" pos:end="234:7"><name pos:start="234:5" pos:end="234:7">int</name></type> <name pos:start="234:9" pos:end="234:17">pkcs7_len</name> <init pos:start="234:19" pos:end="234:21">= <expr pos:start="234:21" pos:end="234:21"><literal type="number" pos:start="234:21" pos:end="234:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="235:5" pos:end="235:35"><decl pos:start="235:5" pos:end="235:34"><type pos:start="235:5" pos:end="235:19"><name pos:start="235:5" pos:end="235:12">unsigned</name> <name pos:start="235:14" pos:end="235:17">char</name> <modifier pos:start="235:19" pos:end="235:19">*</modifier></type><name pos:start="235:20" pos:end="235:27">new_cert</name> <init pos:start="235:29" pos:end="235:34">= <expr pos:start="235:31" pos:end="235:34"><name pos:start="235:31" pos:end="235:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="236:5" pos:end="236:22"><decl pos:start="236:5" pos:end="236:21"><type pos:start="236:5" pos:end="236:10"><name pos:start="236:5" pos:end="236:8">X509</name> <modifier pos:start="236:10" pos:end="236:10">*</modifier></type><name pos:start="236:11" pos:end="236:14">cert</name> <init pos:start="236:16" pos:end="236:21">= <expr pos:start="236:18" pos:end="236:21"><name pos:start="236:18" pos:end="236:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="237:5" pos:end="237:12"><decl pos:start="237:5" pos:end="237:11"><type pos:start="237:5" pos:end="237:9"><name pos:start="237:5" pos:end="237:7">BIO</name> <modifier pos:start="237:9" pos:end="237:9">*</modifier></type><name pos:start="237:10" pos:end="237:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="238:5" pos:end="238:18"><decl pos:start="238:5" pos:end="238:17"><type pos:start="238:5" pos:end="238:8"><name pos:start="238:5" pos:end="238:8">char</name></type> <name pos:start="238:10" pos:end="238:17"><name pos:start="238:10" pos:end="238:12">cmd</name><index pos:start="238:13" pos:end="238:17">[<expr pos:start="238:14" pos:end="238:16"><literal type="number" pos:start="238:14" pos:end="238:16">200</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="239:5" pos:end="239:36"><decl pos:start="239:5" pos:end="239:35"><type pos:start="239:5" pos:end="239:19"><name pos:start="239:5" pos:end="239:12">unsigned</name> <name pos:start="239:14" pos:end="239:17">char</name> <modifier pos:start="239:19" pos:end="239:19">*</modifier></type><name pos:start="239:20" pos:end="239:28">attr_data</name> <init pos:start="239:30" pos:end="239:35">= <expr pos:start="239:32" pos:end="239:35"><name pos:start="239:32" pos:end="239:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="240:5" pos:end="240:17"><decl pos:start="240:5" pos:end="240:16"><type pos:start="240:5" pos:end="240:7"><name pos:start="240:5" pos:end="240:7">int</name></type> <name pos:start="240:9" pos:end="240:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="242:5" pos:end="243:5"><expr pos:start="242:5" pos:end="242:15"><name pos:start="242:5" pos:end="242:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="245:5" pos:end="247:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="248:5" pos:end="248:76"><expr pos:start="248:5" pos:end="248:75"><name pos:start="248:5" pos:end="248:8">ectx</name> <operator pos:start="248:10" pos:end="248:10">=</operator> <call pos:start="248:12" pos:end="248:75"><name pos:start="248:12" pos:end="248:26">est_client_init</name><argument_list pos:start="248:27" pos:end="248:75">(<argument pos:start="248:28" pos:end="248:34"><expr pos:start="248:28" pos:end="248:34"><name pos:start="248:28" pos:end="248:34">cacerts</name></expr></argument>, <argument pos:start="248:37" pos:end="248:47"><expr pos:start="248:37" pos:end="248:47"><name pos:start="248:37" pos:end="248:47">cacerts_len</name></expr></argument>, <argument pos:start="248:50" pos:end="248:68"><expr pos:start="248:50" pos:end="248:68"><name pos:start="248:50" pos:end="248:68">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="248:71" pos:end="248:74"><expr pos:start="248:71" pos:end="248:74"><name pos:start="248:71" pos:end="248:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="249:5" pos:end="249:28"><expr pos:start="249:5" pos:end="249:27"><call pos:start="249:5" pos:end="249:27"><name pos:start="249:5" pos:end="249:13">CU_ASSERT</name><argument_list pos:start="249:14" pos:end="249:27">(<argument pos:start="249:15" pos:end="249:26"><expr pos:start="249:15" pos:end="249:26"><name pos:start="249:15" pos:end="249:18">ectx</name> <operator pos:start="249:20" pos:end="249:21">!=</operator> <name pos:start="249:23" pos:end="249:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="251:5" pos:end="253:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="254:5" pos:end="254:69"><expr pos:start="254:5" pos:end="254:68"><name pos:start="254:5" pos:end="254:6">rv</name> <operator pos:start="254:8" pos:end="254:8">=</operator> <call pos:start="254:10" pos:end="254:68"><name pos:start="254:10" pos:end="254:28">est_client_set_auth</name><argument_list pos:start="254:29" pos:end="254:68">(<argument pos:start="254:30" pos:end="254:33"><expr pos:start="254:30" pos:end="254:33"><name pos:start="254:30" pos:end="254:33">ectx</name></expr></argument>, <argument pos:start="254:36" pos:end="254:44"><expr pos:start="254:36" pos:end="254:44"><name pos:start="254:36" pos:end="254:44">US893_UID</name></expr></argument>, <argument pos:start="254:47" pos:end="254:55"><expr pos:start="254:47" pos:end="254:55"><name pos:start="254:47" pos:end="254:55">US893_PWD</name></expr></argument>, <argument pos:start="254:58" pos:end="254:61"><expr pos:start="254:58" pos:end="254:61"><name pos:start="254:58" pos:end="254:61">NULL</name></expr></argument>, <argument pos:start="254:64" pos:end="254:67"><expr pos:start="254:64" pos:end="254:67"><name pos:start="254:64" pos:end="254:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="255:5" pos:end="255:34"><expr pos:start="255:5" pos:end="255:33"><call pos:start="255:5" pos:end="255:33"><name pos:start="255:5" pos:end="255:13">CU_ASSERT</name><argument_list pos:start="255:14" pos:end="255:33">(<argument pos:start="255:15" pos:end="255:32"><expr pos:start="255:15" pos:end="255:32"><name pos:start="255:15" pos:end="255:16">rv</name> <operator pos:start="255:18" pos:end="255:19">==</operator> <name pos:start="255:21" pos:end="255:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="257:5" pos:end="259:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="260:5" pos:end="260:77"><expr pos:start="260:5" pos:end="260:76"><call pos:start="260:5" pos:end="260:76"><name pos:start="260:5" pos:end="260:25">est_client_set_server</name><argument_list pos:start="260:26" pos:end="260:76">(<argument pos:start="260:27" pos:end="260:30"><expr pos:start="260:27" pos:end="260:30"><name pos:start="260:27" pos:end="260:30">ectx</name></expr></argument>, <argument pos:start="260:33" pos:end="260:47"><expr pos:start="260:33" pos:end="260:47"><name pos:start="260:33" pos:end="260:47">US893_SERVER_IP</name></expr></argument>, <argument pos:start="260:50" pos:end="260:69"><expr pos:start="260:50" pos:end="260:69"><name pos:start="260:50" pos:end="260:69">US893_TCP_PROXY_PORT</name></expr></argument>, <argument pos:start="260:72" pos:end="260:75"><expr pos:start="260:72" pos:end="260:75"><name pos:start="260:72" pos:end="260:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="262:5" pos:end="264:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="265:5" pos:end="265:60"><expr pos:start="265:5" pos:end="265:59"><name pos:start="265:5" pos:end="265:11">key_len</name> <operator pos:start="265:13" pos:end="265:13">=</operator> <call pos:start="265:15" pos:end="265:59"><name pos:start="265:15" pos:end="265:30">read_binary_file</name><argument_list pos:start="265:31" pos:end="265:59">(<argument pos:start="265:32" pos:end="265:48"><expr pos:start="265:32" pos:end="265:48"><name pos:start="265:32" pos:end="265:48">US893_EXPIRED_KEY</name></expr></argument>, <argument pos:start="265:51" pos:end="265:58"><expr pos:start="265:51" pos:end="265:58"><operator pos:start="265:51" pos:end="265:51">&amp;</operator><name pos:start="265:52" pos:end="265:58">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="266:5" pos:end="266:27"><expr pos:start="266:5" pos:end="266:26"><call pos:start="266:5" pos:end="266:26"><name pos:start="266:5" pos:end="266:13">CU_ASSERT</name><argument_list pos:start="266:14" pos:end="266:26">(<argument pos:start="266:15" pos:end="266:25"><expr pos:start="266:15" pos:end="266:25"><name pos:start="266:15" pos:end="266:21">key_len</name> <operator pos:start="266:23" pos:end="266:23">&gt;</operator> <literal type="number" pos:start="266:25" pos:end="266:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="267:5" pos:end="267:57"><expr pos:start="267:5" pos:end="267:56"><name pos:start="267:5" pos:end="267:7">key</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <call pos:start="267:11" pos:end="267:56"><name pos:start="267:11" pos:end="267:22">est_load_key</name><argument_list pos:start="267:23" pos:end="267:56">(<argument pos:start="267:24" pos:end="267:30"><expr pos:start="267:24" pos:end="267:30"><name pos:start="267:24" pos:end="267:30">key_raw</name></expr></argument>, <argument pos:start="267:33" pos:end="267:39"><expr pos:start="267:33" pos:end="267:39"><name pos:start="267:33" pos:end="267:39">key_len</name></expr></argument>, <argument pos:start="267:42" pos:end="267:55"><expr pos:start="267:42" pos:end="267:55"><name pos:start="267:42" pos:end="267:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="268:5" pos:end="268:27"><expr pos:start="268:5" pos:end="268:26"><call pos:start="268:5" pos:end="268:26"><name pos:start="268:5" pos:end="268:13">CU_ASSERT</name><argument_list pos:start="268:14" pos:end="268:26">(<argument pos:start="268:15" pos:end="268:25"><expr pos:start="268:15" pos:end="268:25"><name pos:start="268:15" pos:end="268:17">key</name> <operator pos:start="268:19" pos:end="268:20">!=</operator> <name pos:start="268:22" pos:end="268:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:18"><expr pos:start="269:5" pos:end="269:17"><call pos:start="269:5" pos:end="269:17"><name pos:start="269:5" pos:end="269:8">free</name><argument_list pos:start="269:9" pos:end="269:17">(<argument pos:start="269:10" pos:end="269:16"><expr pos:start="269:10" pos:end="269:16"><name pos:start="269:10" pos:end="269:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="271:5" pos:end="273:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="274:5" pos:end="274:63"><expr pos:start="274:5" pos:end="274:62"><name pos:start="274:5" pos:end="274:12">cert_len</name> <operator pos:start="274:14" pos:end="274:14">=</operator> <call pos:start="274:16" pos:end="274:62"><name pos:start="274:16" pos:end="274:31">read_binary_file</name><argument_list pos:start="274:32" pos:end="274:62">(<argument pos:start="274:33" pos:end="274:50"><expr pos:start="274:33" pos:end="274:50"><name pos:start="274:33" pos:end="274:50">US893_EXPIRED_CERT</name></expr></argument>, <argument pos:start="274:53" pos:end="274:61"><expr pos:start="274:53" pos:end="274:61"><operator pos:start="274:53" pos:end="274:53">&amp;</operator><name pos:start="274:54" pos:end="274:61">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="275:5" pos:end="275:28"><expr pos:start="275:5" pos:end="275:27"><call pos:start="275:5" pos:end="275:27"><name pos:start="275:5" pos:end="275:13">CU_ASSERT</name><argument_list pos:start="275:14" pos:end="275:27">(<argument pos:start="275:15" pos:end="275:26"><expr pos:start="275:15" pos:end="275:26"><name pos:start="275:15" pos:end="275:22">cert_len</name> <operator pos:start="275:24" pos:end="275:24">&gt;</operator> <literal type="number" pos:start="275:26" pos:end="275:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="276:5" pos:end="276:45"><expr pos:start="276:5" pos:end="276:44"><name pos:start="276:5" pos:end="276:6">in</name> <operator pos:start="276:8" pos:end="276:8">=</operator> <call pos:start="276:10" pos:end="276:44"><name pos:start="276:10" pos:end="276:24">BIO_new_mem_buf</name><argument_list pos:start="276:25" pos:end="276:44">(<argument pos:start="276:26" pos:end="276:33"><expr pos:start="276:26" pos:end="276:33"><name pos:start="276:26" pos:end="276:33">cert_raw</name></expr></argument>, <argument pos:start="276:36" pos:end="276:43"><expr pos:start="276:36" pos:end="276:43"><name pos:start="276:36" pos:end="276:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="277:5" pos:end="277:26"><expr pos:start="277:5" pos:end="277:25"><call pos:start="277:5" pos:end="277:25"><name pos:start="277:5" pos:end="277:13">CU_ASSERT</name><argument_list pos:start="277:14" pos:end="277:25">(<argument pos:start="277:15" pos:end="277:24"><expr pos:start="277:15" pos:end="277:24"><name pos:start="277:15" pos:end="277:16">in</name> <operator pos:start="277:18" pos:end="277:19">!=</operator> <name pos:start="277:21" pos:end="277:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="278:5" pos:end="279:15"><if pos:start="278:5" pos:end="279:15">if <condition pos:start="278:8" pos:end="278:12">(<expr pos:start="278:9" pos:end="278:11"><operator pos:start="278:9" pos:end="278:9">!</operator><name pos:start="278:10" pos:end="278:11">in</name></expr>)</condition><block type="pseudo" pos:start="279:9" pos:end="279:15"><block_content pos:start="279:9" pos:end="279:15">
        <return pos:start="279:9" pos:end="279:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="280:5" pos:end="280:55"><expr pos:start="280:5" pos:end="280:54"><name pos:start="280:5" pos:end="280:8">cert</name> <operator pos:start="280:10" pos:end="280:10">=</operator> <call pos:start="280:12" pos:end="280:54"><name pos:start="280:12" pos:end="280:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="280:33" pos:end="280:54">(<argument pos:start="280:34" pos:end="280:35"><expr pos:start="280:34" pos:end="280:35"><name pos:start="280:34" pos:end="280:35">in</name></expr></argument>, <argument pos:start="280:38" pos:end="280:41"><expr pos:start="280:38" pos:end="280:41"><name pos:start="280:38" pos:end="280:41">NULL</name></expr></argument>, <argument pos:start="280:44" pos:end="280:47"><expr pos:start="280:44" pos:end="280:47"><name pos:start="280:44" pos:end="280:47">NULL</name></expr></argument>, <argument pos:start="280:50" pos:end="280:53"><expr pos:start="280:50" pos:end="280:53"><name pos:start="280:50" pos:end="280:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="281:5" pos:end="281:28"><expr pos:start="281:5" pos:end="281:27"><call pos:start="281:5" pos:end="281:27"><name pos:start="281:5" pos:end="281:13">CU_ASSERT</name><argument_list pos:start="281:14" pos:end="281:27">(<argument pos:start="281:15" pos:end="281:26"><expr pos:start="281:15" pos:end="281:26"><name pos:start="281:15" pos:end="281:18">cert</name> <operator pos:start="281:20" pos:end="281:21">!=</operator> <name pos:start="281:23" pos:end="281:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="282:5" pos:end="283:15"><if pos:start="282:5" pos:end="283:15">if <condition pos:start="282:8" pos:end="282:14">(<expr pos:start="282:9" pos:end="282:13"><operator pos:start="282:9" pos:end="282:9">!</operator><name pos:start="282:10" pos:end="282:13">cert</name></expr>)</condition><block type="pseudo" pos:start="283:9" pos:end="283:15"><block_content pos:start="283:9" pos:end="283:15">
        <return pos:start="283:9" pos:end="283:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="284:5" pos:end="284:21"><expr pos:start="284:5" pos:end="284:20"><call pos:start="284:5" pos:end="284:20"><name pos:start="284:5" pos:end="284:16">BIO_free_all</name><argument_list pos:start="284:17" pos:end="284:20">(<argument pos:start="284:18" pos:end="284:19"><expr pos:start="284:18" pos:end="284:19"><name pos:start="284:18" pos:end="284:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="285:5" pos:end="285:19"><expr pos:start="285:5" pos:end="285:18"><call pos:start="285:5" pos:end="285:18"><name pos:start="285:5" pos:end="285:8">free</name><argument_list pos:start="285:9" pos:end="285:18">(<argument pos:start="285:10" pos:end="285:17"><expr pos:start="285:10" pos:end="285:17"><name pos:start="285:10" pos:end="285:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="287:5" pos:end="289:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="290:5" pos:end="290:62"><expr pos:start="290:5" pos:end="290:61"><name pos:start="290:5" pos:end="290:6">rv</name> <operator pos:start="290:8" pos:end="290:8">=</operator> <call pos:start="290:10" pos:end="290:61"><name pos:start="290:10" pos:end="290:32">est_client_get_csrattrs</name><argument_list pos:start="290:33" pos:end="290:61">(<argument pos:start="290:34" pos:end="290:37"><expr pos:start="290:34" pos:end="290:37"><name pos:start="290:34" pos:end="290:37">ectx</name></expr></argument>, <argument pos:start="290:40" pos:end="290:49"><expr pos:start="290:40" pos:end="290:49"><operator pos:start="290:40" pos:end="290:40">&amp;</operator><name pos:start="290:41" pos:end="290:49">attr_data</name></expr></argument>, <argument pos:start="290:52" pos:end="290:60"><expr pos:start="290:52" pos:end="290:60"><operator pos:start="290:52" pos:end="290:52">&amp;</operator><name pos:start="290:53" pos:end="290:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="291:5" pos:end="291:34"><expr pos:start="291:5" pos:end="291:33"><call pos:start="291:5" pos:end="291:33"><name pos:start="291:5" pos:end="291:13">CU_ASSERT</name><argument_list pos:start="291:14" pos:end="291:33">(<argument pos:start="291:15" pos:end="291:32"><expr pos:start="291:15" pos:end="291:32"><name pos:start="291:15" pos:end="291:16">rv</name> <operator pos:start="291:18" pos:end="291:19">==</operator> <name pos:start="291:21" pos:end="291:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="293:5" pos:end="295:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="296:5" pos:end="296:58"><expr pos:start="296:5" pos:end="296:57"><name pos:start="296:5" pos:end="296:6">rv</name> <operator pos:start="296:8" pos:end="296:8">=</operator> <call pos:start="296:10" pos:end="296:57"><name pos:start="296:10" pos:end="296:28">est_client_reenroll</name><argument_list pos:start="296:29" pos:end="296:57">(<argument pos:start="296:30" pos:end="296:33"><expr pos:start="296:30" pos:end="296:33"><name pos:start="296:30" pos:end="296:33">ectx</name></expr></argument>, <argument pos:start="296:36" pos:end="296:39"><expr pos:start="296:36" pos:end="296:39"><name pos:start="296:36" pos:end="296:39">cert</name></expr></argument>, <argument pos:start="296:42" pos:end="296:51"><expr pos:start="296:42" pos:end="296:51"><operator pos:start="296:42" pos:end="296:42">&amp;</operator><name pos:start="296:43" pos:end="296:51">pkcs7_len</name></expr></argument>, <argument pos:start="296:54" pos:end="296:56"><expr pos:start="296:54" pos:end="296:56"><name pos:start="296:54" pos:end="296:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="297:5" pos:end="297:34"><expr pos:start="297:5" pos:end="297:33"><call pos:start="297:5" pos:end="297:33"><name pos:start="297:5" pos:end="297:13">CU_ASSERT</name><argument_list pos:start="297:14" pos:end="297:33">(<argument pos:start="297:15" pos:end="297:32"><expr pos:start="297:15" pos:end="297:32"><name pos:start="297:15" pos:end="297:16">rv</name> <operator pos:start="297:18" pos:end="297:19">==</operator> <name pos:start="297:21" pos:end="297:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="299:5" pos:end="301:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="302:5" pos:end="307:5"><if pos:start="302:5" pos:end="307:5">if <condition pos:start="302:8" pos:end="302:27">(<expr pos:start="302:9" pos:end="302:26"><name pos:start="302:9" pos:end="302:10">rv</name> <operator pos:start="302:12" pos:end="302:13">==</operator> <name pos:start="302:15" pos:end="302:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="302:29" pos:end="307:5">{<block_content pos:start="303:9" pos:end="306:38">
        <expr_stmt pos:start="303:9" pos:end="303:37"><expr pos:start="303:9" pos:end="303:36"><name pos:start="303:9" pos:end="303:16">new_cert</name> <operator pos:start="303:18" pos:end="303:18">=</operator> <call pos:start="303:20" pos:end="303:36"><name pos:start="303:20" pos:end="303:25">malloc</name><argument_list pos:start="303:26" pos:end="303:36">(<argument pos:start="303:27" pos:end="303:35"><expr pos:start="303:27" pos:end="303:35"><name pos:start="303:27" pos:end="303:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="304:9" pos:end="304:36"><expr pos:start="304:9" pos:end="304:35"><call pos:start="304:9" pos:end="304:35"><name pos:start="304:9" pos:end="304:17">CU_ASSERT</name><argument_list pos:start="304:18" pos:end="304:35">(<argument pos:start="304:19" pos:end="304:34"><expr pos:start="304:19" pos:end="304:34"><name pos:start="304:19" pos:end="304:26">new_cert</name> <operator pos:start="304:28" pos:end="304:29">!=</operator> <name pos:start="304:31" pos:end="304:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="305:9" pos:end="305:59"><expr pos:start="305:9" pos:end="305:58"><name pos:start="305:9" pos:end="305:10">rv</name> <operator pos:start="305:12" pos:end="305:12">=</operator> <call pos:start="305:14" pos:end="305:58"><name pos:start="305:14" pos:end="305:42">est_client_copy_enrolled_cert</name><argument_list pos:start="305:43" pos:end="305:58">(<argument pos:start="305:44" pos:end="305:47"><expr pos:start="305:44" pos:end="305:47"><name pos:start="305:44" pos:end="305:47">ectx</name></expr></argument>, <argument pos:start="305:50" pos:end="305:57"><expr pos:start="305:50" pos:end="305:57"><name pos:start="305:50" pos:end="305:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="306:9" pos:end="306:38"><expr pos:start="306:9" pos:end="306:37"><call pos:start="306:9" pos:end="306:37"><name pos:start="306:9" pos:end="306:17">CU_ASSERT</name><argument_list pos:start="306:18" pos:end="306:37">(<argument pos:start="306:19" pos:end="306:36"><expr pos:start="306:19" pos:end="306:36"><name pos:start="306:19" pos:end="306:20">rv</name> <operator pos:start="306:22" pos:end="306:23">==</operator> <name pos:start="306:25" pos:end="306:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="309:5" pos:end="311:7">/*
     * Save the cert to a local file
     */</comment>
    <expr_stmt pos:start="312:5" pos:end="312:68"><expr pos:start="312:5" pos:end="312:67"><name pos:start="312:5" pos:end="312:6">rv</name> <operator pos:start="312:8" pos:end="312:8">=</operator> <call pos:start="312:10" pos:end="312:67"><name pos:start="312:10" pos:end="312:26">write_binary_file</name><argument_list pos:start="312:27" pos:end="312:67">(<argument pos:start="312:28" pos:end="312:45"><expr pos:start="312:28" pos:end="312:45"><name pos:start="312:28" pos:end="312:45">US893_TC2_CERT_B64</name></expr></argument>, <argument pos:start="312:48" pos:end="312:55"><expr pos:start="312:48" pos:end="312:55"><name pos:start="312:48" pos:end="312:55">new_cert</name></expr></argument>, <argument pos:start="312:58" pos:end="312:66"><expr pos:start="312:58" pos:end="312:66"><name pos:start="312:58" pos:end="312:66">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="313:5" pos:end="313:23"><expr pos:start="313:5" pos:end="313:22"><call pos:start="313:5" pos:end="313:22"><name pos:start="313:5" pos:end="313:13">CU_ASSERT</name><argument_list pos:start="313:14" pos:end="313:22">(<argument pos:start="313:15" pos:end="313:21"><expr pos:start="313:15" pos:end="313:21"><name pos:start="313:15" pos:end="313:16">rv</name> <operator pos:start="313:18" pos:end="313:19">==</operator> <literal type="number" pos:start="313:21" pos:end="313:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="315:5" pos:end="317:7">/*
     * Base 64 decode the cert response
     */</comment>
    <expr_stmt pos:start="318:5" pos:end="319:24"><expr pos:start="318:5" pos:end="319:23"><call pos:start="318:5" pos:end="319:23"><name pos:start="318:5" pos:end="318:11">sprintf</name><argument_list pos:start="318:12" pos:end="319:23">(<argument pos:start="318:13" pos:end="318:15"><expr pos:start="318:13" pos:end="318:15"><name pos:start="318:13" pos:end="318:15">cmd</name></expr></argument>, <argument pos:start="318:18" pos:end="318:51"><expr pos:start="318:18" pos:end="318:51"><literal type="string" pos:start="318:18" pos:end="318:51">"openssl base64 -d -in %s -out %s"</literal></expr></argument>, <argument pos:start="318:54" pos:end="318:71"><expr pos:start="318:54" pos:end="318:71"><name pos:start="318:54" pos:end="318:71">US893_TC2_CERT_B64</name></expr></argument>,
    <argument pos:start="319:5" pos:end="319:22"><expr pos:start="319:5" pos:end="319:22"><name pos:start="319:5" pos:end="319:22">US893_TC2_CERT_PK7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="320:5" pos:end="320:21"><expr pos:start="320:5" pos:end="320:20"><name pos:start="320:5" pos:end="320:6">rv</name> <operator pos:start="320:8" pos:end="320:8">=</operator> <call pos:start="320:10" pos:end="320:20"><name pos:start="320:10" pos:end="320:15">system</name><argument_list pos:start="320:16" pos:end="320:20">(<argument pos:start="320:17" pos:end="320:19"><expr pos:start="320:17" pos:end="320:19"><name pos:start="320:17" pos:end="320:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="321:5" pos:end="321:23"><expr pos:start="321:5" pos:end="321:22"><call pos:start="321:5" pos:end="321:22"><name pos:start="321:5" pos:end="321:13">CU_ASSERT</name><argument_list pos:start="321:14" pos:end="321:22">(<argument pos:start="321:15" pos:end="321:21"><expr pos:start="321:15" pos:end="321:21"><name pos:start="321:15" pos:end="321:16">rv</name> <operator pos:start="321:18" pos:end="321:19">==</operator> <literal type="number" pos:start="321:21" pos:end="321:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="323:5" pos:end="325:7">/*
     * Convert the pkcs7 cert to a PEM cert
     */</comment>
    <expr_stmt pos:start="326:5" pos:end="328:24"><expr pos:start="326:5" pos:end="328:23"><call pos:start="326:5" pos:end="328:23"><name pos:start="326:5" pos:end="326:11">sprintf</name><argument_list pos:start="326:12" pos:end="328:23">(<argument pos:start="326:13" pos:end="326:15"><expr pos:start="326:13" pos:end="326:15"><name pos:start="326:13" pos:end="326:15">cmd</name></expr></argument>, <argument pos:start="326:18" pos:end="326:72"><expr pos:start="326:18" pos:end="326:72"><literal type="string" pos:start="326:18" pos:end="326:72">"openssl pkcs7 -in %s -inform DER -print_certs -out %s"</literal></expr></argument>,
    <argument pos:start="327:5" pos:end="327:22"><expr pos:start="327:5" pos:end="327:22"><name pos:start="327:5" pos:end="327:22">US893_TC2_CERT_PK7</name></expr></argument>,
    <argument pos:start="328:5" pos:end="328:22"><expr pos:start="328:5" pos:end="328:22"><name pos:start="328:5" pos:end="328:22">US893_TC2_CERT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="329:5" pos:end="329:21"><expr pos:start="329:5" pos:end="329:20"><name pos:start="329:5" pos:end="329:6">rv</name> <operator pos:start="329:8" pos:end="329:8">=</operator> <call pos:start="329:10" pos:end="329:20"><name pos:start="329:10" pos:end="329:15">system</name><argument_list pos:start="329:16" pos:end="329:20">(<argument pos:start="329:17" pos:end="329:19"><expr pos:start="329:17" pos:end="329:19"><name pos:start="329:17" pos:end="329:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="330:5" pos:end="330:23"><expr pos:start="330:5" pos:end="330:22"><call pos:start="330:5" pos:end="330:22"><name pos:start="330:5" pos:end="330:13">CU_ASSERT</name><argument_list pos:start="330:14" pos:end="330:22">(<argument pos:start="330:15" pos:end="330:21"><expr pos:start="330:15" pos:end="330:21"><name pos:start="330:15" pos:end="330:16">rv</name> <operator pos:start="330:18" pos:end="330:19">==</operator> <literal type="number" pos:start="330:21" pos:end="330:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="332:5" pos:end="334:7">/*
     * Convert PEM cert to a textual representation of the cert
     */</comment>
    <expr_stmt pos:start="335:5" pos:end="336:24"><expr pos:start="335:5" pos:end="336:23"><call pos:start="335:5" pos:end="336:23"><name pos:start="335:5" pos:end="335:11">sprintf</name><argument_list pos:start="335:12" pos:end="336:23">(<argument pos:start="335:13" pos:end="335:15"><expr pos:start="335:13" pos:end="335:15"><name pos:start="335:13" pos:end="335:15">cmd</name></expr></argument>, <argument pos:start="335:18" pos:end="335:49"><expr pos:start="335:18" pos:end="335:49"><literal type="string" pos:start="335:18" pos:end="335:49">"openssl x509 -text -in %s &gt; %s"</literal></expr></argument>, <argument pos:start="335:52" pos:end="335:69"><expr pos:start="335:52" pos:end="335:69"><name pos:start="335:52" pos:end="335:69">US893_TC2_CERT_PEM</name></expr></argument>,
    <argument pos:start="336:5" pos:end="336:22"><expr pos:start="336:5" pos:end="336:22"><name pos:start="336:5" pos:end="336:22">US893_TC2_CERT_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="337:5" pos:end="337:21"><expr pos:start="337:5" pos:end="337:20"><name pos:start="337:5" pos:end="337:6">rv</name> <operator pos:start="337:8" pos:end="337:8">=</operator> <call pos:start="337:10" pos:end="337:20"><name pos:start="337:10" pos:end="337:15">system</name><argument_list pos:start="337:16" pos:end="337:20">(<argument pos:start="337:17" pos:end="337:19"><expr pos:start="337:17" pos:end="337:19"><name pos:start="337:17" pos:end="337:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="338:5" pos:end="338:23"><expr pos:start="338:5" pos:end="338:22"><call pos:start="338:5" pos:end="338:22"><name pos:start="338:5" pos:end="338:13">CU_ASSERT</name><argument_list pos:start="338:14" pos:end="338:22">(<argument pos:start="338:15" pos:end="338:21"><expr pos:start="338:15" pos:end="338:21"><name pos:start="338:15" pos:end="338:16">rv</name> <operator pos:start="338:18" pos:end="338:19">==</operator> <literal type="number" pos:start="338:21" pos:end="338:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="340:5" pos:end="342:7">/*
     * Verify the jimbob DNS extension was preserved
     */</comment>
    <expr_stmt pos:start="343:5" pos:end="343:44"><expr pos:start="343:5" pos:end="343:43"><name pos:start="343:5" pos:end="343:6">rv</name> <operator pos:start="343:8" pos:end="343:8">=</operator> <call pos:start="343:10" pos:end="343:43"><name pos:start="343:10" pos:end="343:13">grep</name><argument_list pos:start="343:14" pos:end="343:43">(<argument pos:start="343:15" pos:end="343:32"><expr pos:start="343:15" pos:end="343:32"><name pos:start="343:15" pos:end="343:32">US893_TC2_CERT_TXT</name></expr></argument>, <argument pos:start="343:35" pos:end="343:42"><expr pos:start="343:35" pos:end="343:42"><literal type="string" pos:start="343:35" pos:end="343:42">"jimbob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="344:5" pos:end="344:23"><expr pos:start="344:5" pos:end="344:22"><call pos:start="344:5" pos:end="344:22"><name pos:start="344:5" pos:end="344:13">CU_ASSERT</name><argument_list pos:start="344:14" pos:end="344:22">(<argument pos:start="344:15" pos:end="344:21"><expr pos:start="344:15" pos:end="344:21"><name pos:start="344:15" pos:end="344:16">rv</name> <operator pos:start="344:18" pos:end="344:19">==</operator> <literal type="number" pos:start="344:21" pos:end="344:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="346:5" pos:end="348:7">/*
     * Verify the bobcat DNS extension was preserved
     */</comment>
    <expr_stmt pos:start="349:5" pos:end="349:44"><expr pos:start="349:5" pos:end="349:43"><name pos:start="349:5" pos:end="349:6">rv</name> <operator pos:start="349:8" pos:end="349:8">=</operator> <call pos:start="349:10" pos:end="349:43"><name pos:start="349:10" pos:end="349:13">grep</name><argument_list pos:start="349:14" pos:end="349:43">(<argument pos:start="349:15" pos:end="349:32"><expr pos:start="349:15" pos:end="349:32"><name pos:start="349:15" pos:end="349:32">US893_TC2_CERT_TXT</name></expr></argument>, <argument pos:start="349:35" pos:end="349:42"><expr pos:start="349:35" pos:end="349:42"><literal type="string" pos:start="349:35" pos:end="349:42">"bobcat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="350:5" pos:end="350:23"><expr pos:start="350:5" pos:end="350:22"><call pos:start="350:5" pos:end="350:22"><name pos:start="350:5" pos:end="350:13">CU_ASSERT</name><argument_list pos:start="350:14" pos:end="350:22">(<argument pos:start="350:15" pos:end="350:21"><expr pos:start="350:15" pos:end="350:21"><name pos:start="350:15" pos:end="350:16">rv</name> <operator pos:start="350:18" pos:end="350:19">==</operator> <literal type="number" pos:start="350:21" pos:end="350:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="352:5" pos:end="354:7">/*
     * Verify the IP address extension was preserved
     */</comment>
    <expr_stmt pos:start="355:5" pos:end="355:41"><expr pos:start="355:5" pos:end="355:40"><name pos:start="355:5" pos:end="355:6">rv</name> <operator pos:start="355:8" pos:end="355:8">=</operator> <call pos:start="355:10" pos:end="355:40"><name pos:start="355:10" pos:end="355:13">grep</name><argument_list pos:start="355:14" pos:end="355:40">(<argument pos:start="355:15" pos:end="355:32"><expr pos:start="355:15" pos:end="355:32"><name pos:start="355:15" pos:end="355:32">US893_TC2_CERT_TXT</name></expr></argument>, <argument pos:start="355:35" pos:end="355:39"><expr pos:start="355:35" pos:end="355:39"><literal type="string" pos:start="355:35" pos:end="355:39">"172"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="356:5" pos:end="356:23"><expr pos:start="356:5" pos:end="356:22"><call pos:start="356:5" pos:end="356:22"><name pos:start="356:5" pos:end="356:13">CU_ASSERT</name><argument_list pos:start="356:14" pos:end="356:22">(<argument pos:start="356:15" pos:end="356:21"><expr pos:start="356:15" pos:end="356:21"><name pos:start="356:15" pos:end="356:16">rv</name> <operator pos:start="356:18" pos:end="356:19">==</operator> <literal type="number" pos:start="356:21" pos:end="356:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="358:5" pos:end="360:7">/*
     * Verify the Repudiation key usage extension was preserved
     */</comment>
    <expr_stmt pos:start="361:5" pos:end="361:49"><expr pos:start="361:5" pos:end="361:48"><name pos:start="361:5" pos:end="361:6">rv</name> <operator pos:start="361:8" pos:end="361:8">=</operator> <call pos:start="361:10" pos:end="361:48"><name pos:start="361:10" pos:end="361:13">grep</name><argument_list pos:start="361:14" pos:end="361:48">(<argument pos:start="361:15" pos:end="361:32"><expr pos:start="361:15" pos:end="361:32"><name pos:start="361:15" pos:end="361:32">US893_TC2_CERT_TXT</name></expr></argument>, <argument pos:start="361:35" pos:end="361:47"><expr pos:start="361:35" pos:end="361:47"><literal type="string" pos:start="361:35" pos:end="361:47">"Repudiation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="362:5" pos:end="362:23"><expr pos:start="362:5" pos:end="362:22"><call pos:start="362:5" pos:end="362:22"><name pos:start="362:5" pos:end="362:13">CU_ASSERT</name><argument_list pos:start="362:14" pos:end="362:22">(<argument pos:start="362:15" pos:end="362:21"><expr pos:start="362:15" pos:end="362:21"><name pos:start="362:15" pos:end="362:16">rv</name> <operator pos:start="362:18" pos:end="362:19">==</operator> <literal type="number" pos:start="362:21" pos:end="362:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="364:5" pos:end="366:7">/*
     * Verify the public key was preserved
     */</comment>
    <expr_stmt pos:start="367:5" pos:end="368:56"><expr pos:start="367:5" pos:end="368:55"><name pos:start="367:5" pos:end="367:6">rv</name> <operator pos:start="367:8" pos:end="367:8">=</operator> <call pos:start="367:10" pos:end="368:55"><name pos:start="367:10" pos:end="367:13">grep</name><argument_list pos:start="367:14" pos:end="368:55">(<argument pos:start="367:15" pos:end="367:32"><expr pos:start="367:15" pos:end="367:32"><name pos:start="367:15" pos:end="367:32">US893_TC2_CERT_TXT</name></expr></argument>,
        <argument pos:start="368:9" pos:end="368:54"><expr pos:start="368:9" pos:end="368:54"><literal type="string" pos:start="368:9" pos:end="368:54">"00:e3:ca:38:65:fb:9c:46:a6:22:b1:be:17:bc:50"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="369:5" pos:end="369:23"><expr pos:start="369:5" pos:end="369:22"><call pos:start="369:5" pos:end="369:22"><name pos:start="369:5" pos:end="369:13">CU_ASSERT</name><argument_list pos:start="369:14" pos:end="369:22">(<argument pos:start="369:15" pos:end="369:21"><expr pos:start="369:15" pos:end="369:21"><name pos:start="369:15" pos:end="369:16">rv</name> <operator pos:start="369:18" pos:end="369:19">==</operator> <literal type="number" pos:start="369:21" pos:end="369:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="371:5" pos:end="373:7">/*
     * Clean up
     */</comment>
    <if_stmt pos:start="374:5" pos:end="375:23"><if pos:start="374:5" pos:end="375:23">if <condition pos:start="374:8" pos:end="374:17">(<expr pos:start="374:9" pos:end="374:16"><name pos:start="374:9" pos:end="374:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="375:9" pos:end="375:23"><block_content pos:start="375:9" pos:end="375:23">
        <expr_stmt pos:start="375:9" pos:end="375:23"><expr pos:start="375:9" pos:end="375:22"><call pos:start="375:9" pos:end="375:22"><name pos:start="375:9" pos:end="375:12">free</name><argument_list pos:start="375:13" pos:end="375:22">(<argument pos:start="375:14" pos:end="375:21"><expr pos:start="375:14" pos:end="375:21"><name pos:start="375:14" pos:end="375:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="376:5" pos:end="376:22"><expr pos:start="376:5" pos:end="376:21"><call pos:start="376:5" pos:end="376:21"><name pos:start="376:5" pos:end="376:15">est_destroy</name><argument_list pos:start="376:16" pos:end="376:21">(<argument pos:start="376:17" pos:end="376:20"><expr pos:start="376:17" pos:end="376:20"><name pos:start="376:17" pos:end="376:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="379:1" pos:end="384:3">/*
 * Simple reenroll - Corrupt CSR
 *
 * Use libcurl to send a reenroll request containing
 * a corrupted CSR.
 */</comment>
<function pos:start="385:1" pos:end="400:1"><type pos:start="385:1" pos:end="385:11"><specifier pos:start="385:1" pos:end="385:6">static</specifier> <name pos:start="385:8" pos:end="385:11">void</name></type> <name pos:start="385:13" pos:end="385:23">us893_test3</name> <parameter_list pos:start="385:25" pos:end="385:30">(<parameter pos:start="385:26" pos:end="385:29"><decl pos:start="385:26" pos:end="385:29"><type pos:start="385:26" pos:end="385:29"><name pos:start="385:26" pos:end="385:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="386:1" pos:end="400:1">{<block_content pos:start="387:5" pos:end="399:25">
    <decl_stmt pos:start="387:5" pos:end="387:12"><decl pos:start="387:5" pos:end="387:11"><type pos:start="387:5" pos:end="387:8"><name pos:start="387:5" pos:end="387:8">long</name></type> <name pos:start="387:10" pos:end="387:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="389:5" pos:end="390:5"><expr pos:start="389:5" pos:end="389:15"><name pos:start="389:5" pos:end="389:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="392:5" pos:end="394:72"><expr pos:start="392:5" pos:end="394:71"><name pos:start="392:5" pos:end="392:6">rv</name> <operator pos:start="392:8" pos:end="392:8">=</operator> <call pos:start="392:10" pos:end="394:71"><name pos:start="392:10" pos:end="392:23">curl_http_post</name><argument_list pos:start="392:24" pos:end="394:71">(<argument pos:start="392:25" pos:end="392:45"><expr pos:start="392:25" pos:end="392:45"><name pos:start="392:25" pos:end="392:45">US893_REENROLL_URL_BA</name></expr></argument>, <argument pos:start="392:48" pos:end="392:62"><expr pos:start="392:48" pos:end="392:62"><name pos:start="392:48" pos:end="392:62">US893_PKCS10_CT</name></expr></argument>,
    <argument pos:start="393:5" pos:end="393:24"><expr pos:start="393:5" pos:end="393:24"><name pos:start="393:5" pos:end="393:24">US893_PKCS10_CORRUPT</name></expr></argument>,
    <argument pos:start="394:5" pos:end="394:21"><expr pos:start="394:5" pos:end="394:21"><name pos:start="394:5" pos:end="394:21">US893_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="394:24" pos:end="394:36"><expr pos:start="394:24" pos:end="394:36"><name pos:start="394:24" pos:end="394:36">US893_CACERTS</name></expr></argument>, <argument pos:start="394:39" pos:end="394:52"><expr pos:start="394:39" pos:end="394:52"><name pos:start="394:39" pos:end="394:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="394:55" pos:end="394:58"><expr pos:start="394:55" pos:end="394:58"><name pos:start="394:55" pos:end="394:58">NULL</name></expr></argument>, <argument pos:start="394:61" pos:end="394:64"><expr pos:start="394:61" pos:end="394:64"><name pos:start="394:61" pos:end="394:64">NULL</name></expr></argument>, <argument pos:start="394:67" pos:end="394:70"><expr pos:start="394:67" pos:end="394:70"><name pos:start="394:67" pos:end="394:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="395:5" pos:end="398:7">/*
     * Since we passed in a bad CSR,
     * we expect the server to respond with 400
     */</comment>
    <expr_stmt pos:start="399:5" pos:end="399:25"><expr pos:start="399:5" pos:end="399:24"><call pos:start="399:5" pos:end="399:24"><name pos:start="399:5" pos:end="399:13">CU_ASSERT</name><argument_list pos:start="399:14" pos:end="399:24">(<argument pos:start="399:15" pos:end="399:23"><expr pos:start="399:15" pos:end="399:23"><name pos:start="399:15" pos:end="399:16">rv</name> <operator pos:start="399:18" pos:end="399:19">==</operator> <literal type="number" pos:start="399:21" pos:end="399:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="402:1" pos:end="408:3">/*
 * This test attempts to re-enroll an expired cert
 * while the EST server is configured for manual
 * approval.  The server will send back a retry-after
 * response.  This verifies the proxy propagates the
 * retry-after response to the client.
 */</comment>
<function pos:start="409:1" pos:end="519:1"><type pos:start="409:1" pos:end="409:11"><specifier pos:start="409:1" pos:end="409:6">static</specifier> <name pos:start="409:8" pos:end="409:11">void</name></type> <name pos:start="409:13" pos:end="409:23">us893_test4</name> <parameter_list pos:start="409:25" pos:end="409:30">(<parameter pos:start="409:26" pos:end="409:29"><decl pos:start="409:26" pos:end="409:29"><type pos:start="409:26" pos:end="409:29"><name pos:start="409:26" pos:end="409:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="410:1" pos:end="519:1">{<block_content pos:start="411:5" pos:end="518:23">
    <decl_stmt pos:start="411:5" pos:end="411:18"><decl pos:start="411:5" pos:end="411:17"><type pos:start="411:5" pos:end="411:13"><name pos:start="411:5" pos:end="411:11">EST_CTX</name> <modifier pos:start="411:13" pos:end="411:13">*</modifier></type><name pos:start="411:14" pos:end="411:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="412:5" pos:end="412:18"><decl pos:start="412:5" pos:end="412:17"><type pos:start="412:5" pos:end="412:14"><name pos:start="412:5" pos:end="412:12">EVP_PKEY</name> <modifier pos:start="412:14" pos:end="412:14">*</modifier></type><name pos:start="412:15" pos:end="412:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="413:5" pos:end="413:27"><decl pos:start="413:5" pos:end="413:26"><type pos:start="413:5" pos:end="413:19"><name pos:start="413:5" pos:end="413:12">unsigned</name> <name pos:start="413:14" pos:end="413:17">char</name> <modifier pos:start="413:19" pos:end="413:19">*</modifier></type><name pos:start="413:20" pos:end="413:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="414:5" pos:end="414:16"><decl pos:start="414:5" pos:end="414:15"><type pos:start="414:5" pos:end="414:7"><name pos:start="414:5" pos:end="414:7">int</name></type> <name pos:start="414:9" pos:end="414:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="415:5" pos:end="415:28"><decl pos:start="415:5" pos:end="415:27"><type pos:start="415:5" pos:end="415:19"><name pos:start="415:5" pos:end="415:12">unsigned</name> <name pos:start="415:14" pos:end="415:17">char</name> <modifier pos:start="415:19" pos:end="415:19">*</modifier></type><name pos:start="415:20" pos:end="415:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="416:5" pos:end="416:17"><decl pos:start="416:5" pos:end="416:16"><type pos:start="416:5" pos:end="416:7"><name pos:start="416:5" pos:end="416:7">int</name></type> <name pos:start="416:9" pos:end="416:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="417:5" pos:end="417:11"><decl pos:start="417:5" pos:end="417:10"><type pos:start="417:5" pos:end="417:7"><name pos:start="417:5" pos:end="417:7">int</name></type> <name pos:start="417:9" pos:end="417:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="418:5" pos:end="418:22"><decl pos:start="418:5" pos:end="418:21"><type pos:start="418:5" pos:end="418:7"><name pos:start="418:5" pos:end="418:7">int</name></type> <name pos:start="418:9" pos:end="418:17">pkcs7_len</name> <init pos:start="418:19" pos:end="418:21">= <expr pos:start="418:21" pos:end="418:21"><literal type="number" pos:start="418:21" pos:end="418:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="419:5" pos:end="419:22"><decl pos:start="419:5" pos:end="419:21"><type pos:start="419:5" pos:end="419:10"><name pos:start="419:5" pos:end="419:8">X509</name> <modifier pos:start="419:10" pos:end="419:10">*</modifier></type><name pos:start="419:11" pos:end="419:14">cert</name> <init pos:start="419:16" pos:end="419:21">= <expr pos:start="419:18" pos:end="419:21"><name pos:start="419:18" pos:end="419:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="420:5" pos:end="420:12"><decl pos:start="420:5" pos:end="420:11"><type pos:start="420:5" pos:end="420:9"><name pos:start="420:5" pos:end="420:7">BIO</name> <modifier pos:start="420:9" pos:end="420:9">*</modifier></type><name pos:start="420:10" pos:end="420:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="421:5" pos:end="421:22"><decl pos:start="421:5" pos:end="421:21"><type pos:start="421:5" pos:end="421:7"><name pos:start="421:5" pos:end="421:7">int</name></type> <name pos:start="421:9" pos:end="421:17">retry_val</name> <init pos:start="421:19" pos:end="421:21">= <expr pos:start="421:21" pos:end="421:21"><literal type="number" pos:start="421:21" pos:end="421:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="422:5" pos:end="422:20"><decl pos:start="422:5" pos:end="422:19"><type pos:start="422:5" pos:end="422:10"><name pos:start="422:5" pos:end="422:10">time_t</name></type> <name pos:start="422:12" pos:end="422:19">time_val</name></decl>;</decl_stmt>
    <decl_stmt pos:start="423:5" pos:end="423:36"><decl pos:start="423:5" pos:end="423:35"><type pos:start="423:5" pos:end="423:19"><name pos:start="423:5" pos:end="423:12">unsigned</name> <name pos:start="423:14" pos:end="423:17">char</name> <modifier pos:start="423:19" pos:end="423:19">*</modifier></type><name pos:start="423:20" pos:end="423:28">attr_data</name> <init pos:start="423:30" pos:end="423:35">= <expr pos:start="423:32" pos:end="423:35"><name pos:start="423:32" pos:end="423:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="424:5" pos:end="424:17"><decl pos:start="424:5" pos:end="424:16"><type pos:start="424:5" pos:end="424:7"><name pos:start="424:5" pos:end="424:7">int</name></type> <name pos:start="424:9" pos:end="424:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="426:5" pos:end="427:5"><expr pos:start="426:5" pos:end="426:15"><name pos:start="426:5" pos:end="426:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="429:5" pos:end="431:7">/*
     * Stop the server.
     */</comment>
    <expr_stmt pos:start="432:5" pos:end="432:14"><expr pos:start="432:5" pos:end="432:13"><call pos:start="432:5" pos:end="432:13"><name pos:start="432:5" pos:end="432:11">st_stop</name><argument_list pos:start="432:12" pos:end="432:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="433:5" pos:end="433:20"><expr pos:start="433:5" pos:end="433:19"><call pos:start="433:5" pos:end="433:19"><name pos:start="433:5" pos:end="433:17">st_proxy_stop</name><argument_list pos:start="433:18" pos:end="433:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="435:5" pos:end="437:7">/*
     * Restart the server with manual approval enabled
     */</comment>
    <expr_stmt pos:start="438:5" pos:end="438:34"><expr pos:start="438:5" pos:end="438:33"><name pos:start="438:5" pos:end="438:6">rv</name> <operator pos:start="438:8" pos:end="438:8">=</operator> <call pos:start="438:10" pos:end="438:33"><name pos:start="438:10" pos:end="438:27">us893_start_server</name><argument_list pos:start="438:28" pos:end="438:33">(<argument pos:start="438:29" pos:end="438:29"><expr pos:start="438:29" pos:end="438:29"><literal type="number" pos:start="438:29" pos:end="438:29">1</literal></expr></argument>, <argument pos:start="438:32" pos:end="438:32"><expr pos:start="438:32" pos:end="438:32"><literal type="number" pos:start="438:32" pos:end="438:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="439:5" pos:end="439:23"><expr pos:start="439:5" pos:end="439:22"><call pos:start="439:5" pos:end="439:22"><name pos:start="439:5" pos:end="439:13">CU_ASSERT</name><argument_list pos:start="439:14" pos:end="439:22">(<argument pos:start="439:15" pos:end="439:21"><expr pos:start="439:15" pos:end="439:21"><name pos:start="439:15" pos:end="439:16">rv</name> <operator pos:start="439:18" pos:end="439:19">==</operator> <literal type="number" pos:start="439:21" pos:end="439:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="441:5" pos:end="443:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="444:5" pos:end="444:76"><expr pos:start="444:5" pos:end="444:75"><name pos:start="444:5" pos:end="444:8">ectx</name> <operator pos:start="444:10" pos:end="444:10">=</operator> <call pos:start="444:12" pos:end="444:75"><name pos:start="444:12" pos:end="444:26">est_client_init</name><argument_list pos:start="444:27" pos:end="444:75">(<argument pos:start="444:28" pos:end="444:34"><expr pos:start="444:28" pos:end="444:34"><name pos:start="444:28" pos:end="444:34">cacerts</name></expr></argument>, <argument pos:start="444:37" pos:end="444:47"><expr pos:start="444:37" pos:end="444:47"><name pos:start="444:37" pos:end="444:47">cacerts_len</name></expr></argument>, <argument pos:start="444:50" pos:end="444:68"><expr pos:start="444:50" pos:end="444:68"><name pos:start="444:50" pos:end="444:68">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="444:71" pos:end="444:74"><expr pos:start="444:71" pos:end="444:74"><name pos:start="444:71" pos:end="444:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="445:5" pos:end="445:28"><expr pos:start="445:5" pos:end="445:27"><call pos:start="445:5" pos:end="445:27"><name pos:start="445:5" pos:end="445:13">CU_ASSERT</name><argument_list pos:start="445:14" pos:end="445:27">(<argument pos:start="445:15" pos:end="445:26"><expr pos:start="445:15" pos:end="445:26"><name pos:start="445:15" pos:end="445:18">ectx</name> <operator pos:start="445:20" pos:end="445:21">!=</operator> <name pos:start="445:23" pos:end="445:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="447:5" pos:end="449:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="450:5" pos:end="450:69"><expr pos:start="450:5" pos:end="450:68"><name pos:start="450:5" pos:end="450:6">rv</name> <operator pos:start="450:8" pos:end="450:8">=</operator> <call pos:start="450:10" pos:end="450:68"><name pos:start="450:10" pos:end="450:28">est_client_set_auth</name><argument_list pos:start="450:29" pos:end="450:68">(<argument pos:start="450:30" pos:end="450:33"><expr pos:start="450:30" pos:end="450:33"><name pos:start="450:30" pos:end="450:33">ectx</name></expr></argument>, <argument pos:start="450:36" pos:end="450:44"><expr pos:start="450:36" pos:end="450:44"><name pos:start="450:36" pos:end="450:44">US893_UID</name></expr></argument>, <argument pos:start="450:47" pos:end="450:55"><expr pos:start="450:47" pos:end="450:55"><name pos:start="450:47" pos:end="450:55">US893_PWD</name></expr></argument>, <argument pos:start="450:58" pos:end="450:61"><expr pos:start="450:58" pos:end="450:61"><name pos:start="450:58" pos:end="450:61">NULL</name></expr></argument>, <argument pos:start="450:64" pos:end="450:67"><expr pos:start="450:64" pos:end="450:67"><name pos:start="450:64" pos:end="450:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="451:5" pos:end="451:34"><expr pos:start="451:5" pos:end="451:33"><call pos:start="451:5" pos:end="451:33"><name pos:start="451:5" pos:end="451:13">CU_ASSERT</name><argument_list pos:start="451:14" pos:end="451:33">(<argument pos:start="451:15" pos:end="451:32"><expr pos:start="451:15" pos:end="451:32"><name pos:start="451:15" pos:end="451:16">rv</name> <operator pos:start="451:18" pos:end="451:19">==</operator> <name pos:start="451:21" pos:end="451:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="453:5" pos:end="455:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="456:5" pos:end="456:77"><expr pos:start="456:5" pos:end="456:76"><call pos:start="456:5" pos:end="456:76"><name pos:start="456:5" pos:end="456:25">est_client_set_server</name><argument_list pos:start="456:26" pos:end="456:76">(<argument pos:start="456:27" pos:end="456:30"><expr pos:start="456:27" pos:end="456:30"><name pos:start="456:27" pos:end="456:30">ectx</name></expr></argument>, <argument pos:start="456:33" pos:end="456:47"><expr pos:start="456:33" pos:end="456:47"><name pos:start="456:33" pos:end="456:47">US893_SERVER_IP</name></expr></argument>, <argument pos:start="456:50" pos:end="456:69"><expr pos:start="456:50" pos:end="456:69"><name pos:start="456:50" pos:end="456:69">US893_TCP_PROXY_PORT</name></expr></argument>, <argument pos:start="456:72" pos:end="456:75"><expr pos:start="456:72" pos:end="456:75"><name pos:start="456:72" pos:end="456:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="458:5" pos:end="460:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="461:5" pos:end="461:60"><expr pos:start="461:5" pos:end="461:59"><name pos:start="461:5" pos:end="461:11">key_len</name> <operator pos:start="461:13" pos:end="461:13">=</operator> <call pos:start="461:15" pos:end="461:59"><name pos:start="461:15" pos:end="461:30">read_binary_file</name><argument_list pos:start="461:31" pos:end="461:59">(<argument pos:start="461:32" pos:end="461:48"><expr pos:start="461:32" pos:end="461:48"><name pos:start="461:32" pos:end="461:48">US893_EXPIRED_KEY</name></expr></argument>, <argument pos:start="461:51" pos:end="461:58"><expr pos:start="461:51" pos:end="461:58"><operator pos:start="461:51" pos:end="461:51">&amp;</operator><name pos:start="461:52" pos:end="461:58">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="462:5" pos:end="462:27"><expr pos:start="462:5" pos:end="462:26"><call pos:start="462:5" pos:end="462:26"><name pos:start="462:5" pos:end="462:13">CU_ASSERT</name><argument_list pos:start="462:14" pos:end="462:26">(<argument pos:start="462:15" pos:end="462:25"><expr pos:start="462:15" pos:end="462:25"><name pos:start="462:15" pos:end="462:21">key_len</name> <operator pos:start="462:23" pos:end="462:23">&gt;</operator> <literal type="number" pos:start="462:25" pos:end="462:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="463:5" pos:end="463:57"><expr pos:start="463:5" pos:end="463:56"><name pos:start="463:5" pos:end="463:7">key</name> <operator pos:start="463:9" pos:end="463:9">=</operator> <call pos:start="463:11" pos:end="463:56"><name pos:start="463:11" pos:end="463:22">est_load_key</name><argument_list pos:start="463:23" pos:end="463:56">(<argument pos:start="463:24" pos:end="463:30"><expr pos:start="463:24" pos:end="463:30"><name pos:start="463:24" pos:end="463:30">key_raw</name></expr></argument>, <argument pos:start="463:33" pos:end="463:39"><expr pos:start="463:33" pos:end="463:39"><name pos:start="463:33" pos:end="463:39">key_len</name></expr></argument>, <argument pos:start="463:42" pos:end="463:55"><expr pos:start="463:42" pos:end="463:55"><name pos:start="463:42" pos:end="463:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="464:5" pos:end="464:27"><expr pos:start="464:5" pos:end="464:26"><call pos:start="464:5" pos:end="464:26"><name pos:start="464:5" pos:end="464:13">CU_ASSERT</name><argument_list pos:start="464:14" pos:end="464:26">(<argument pos:start="464:15" pos:end="464:25"><expr pos:start="464:15" pos:end="464:25"><name pos:start="464:15" pos:end="464:17">key</name> <operator pos:start="464:19" pos:end="464:20">!=</operator> <name pos:start="464:22" pos:end="464:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="465:5" pos:end="465:18"><expr pos:start="465:5" pos:end="465:17"><call pos:start="465:5" pos:end="465:17"><name pos:start="465:5" pos:end="465:8">free</name><argument_list pos:start="465:9" pos:end="465:17">(<argument pos:start="465:10" pos:end="465:16"><expr pos:start="465:10" pos:end="465:16"><name pos:start="465:10" pos:end="465:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="467:5" pos:end="469:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="470:5" pos:end="470:63"><expr pos:start="470:5" pos:end="470:62"><name pos:start="470:5" pos:end="470:12">cert_len</name> <operator pos:start="470:14" pos:end="470:14">=</operator> <call pos:start="470:16" pos:end="470:62"><name pos:start="470:16" pos:end="470:31">read_binary_file</name><argument_list pos:start="470:32" pos:end="470:62">(<argument pos:start="470:33" pos:end="470:50"><expr pos:start="470:33" pos:end="470:50"><name pos:start="470:33" pos:end="470:50">US893_EXPIRED_CERT</name></expr></argument>, <argument pos:start="470:53" pos:end="470:61"><expr pos:start="470:53" pos:end="470:61"><operator pos:start="470:53" pos:end="470:53">&amp;</operator><name pos:start="470:54" pos:end="470:61">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="471:5" pos:end="471:28"><expr pos:start="471:5" pos:end="471:27"><call pos:start="471:5" pos:end="471:27"><name pos:start="471:5" pos:end="471:13">CU_ASSERT</name><argument_list pos:start="471:14" pos:end="471:27">(<argument pos:start="471:15" pos:end="471:26"><expr pos:start="471:15" pos:end="471:26"><name pos:start="471:15" pos:end="471:22">cert_len</name> <operator pos:start="471:24" pos:end="471:24">&gt;</operator> <literal type="number" pos:start="471:26" pos:end="471:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="472:5" pos:end="472:45"><expr pos:start="472:5" pos:end="472:44"><name pos:start="472:5" pos:end="472:6">in</name> <operator pos:start="472:8" pos:end="472:8">=</operator> <call pos:start="472:10" pos:end="472:44"><name pos:start="472:10" pos:end="472:24">BIO_new_mem_buf</name><argument_list pos:start="472:25" pos:end="472:44">(<argument pos:start="472:26" pos:end="472:33"><expr pos:start="472:26" pos:end="472:33"><name pos:start="472:26" pos:end="472:33">cert_raw</name></expr></argument>, <argument pos:start="472:36" pos:end="472:43"><expr pos:start="472:36" pos:end="472:43"><name pos:start="472:36" pos:end="472:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="473:5" pos:end="473:26"><expr pos:start="473:5" pos:end="473:25"><call pos:start="473:5" pos:end="473:25"><name pos:start="473:5" pos:end="473:13">CU_ASSERT</name><argument_list pos:start="473:14" pos:end="473:25">(<argument pos:start="473:15" pos:end="473:24"><expr pos:start="473:15" pos:end="473:24"><name pos:start="473:15" pos:end="473:16">in</name> <operator pos:start="473:18" pos:end="473:19">!=</operator> <name pos:start="473:21" pos:end="473:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="474:5" pos:end="475:15"><if pos:start="474:5" pos:end="475:15">if <condition pos:start="474:8" pos:end="474:12">(<expr pos:start="474:9" pos:end="474:11"><operator pos:start="474:9" pos:end="474:9">!</operator><name pos:start="474:10" pos:end="474:11">in</name></expr>)</condition><block type="pseudo" pos:start="475:9" pos:end="475:15"><block_content pos:start="475:9" pos:end="475:15">
        <return pos:start="475:9" pos:end="475:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="476:5" pos:end="476:55"><expr pos:start="476:5" pos:end="476:54"><name pos:start="476:5" pos:end="476:8">cert</name> <operator pos:start="476:10" pos:end="476:10">=</operator> <call pos:start="476:12" pos:end="476:54"><name pos:start="476:12" pos:end="476:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="476:33" pos:end="476:54">(<argument pos:start="476:34" pos:end="476:35"><expr pos:start="476:34" pos:end="476:35"><name pos:start="476:34" pos:end="476:35">in</name></expr></argument>, <argument pos:start="476:38" pos:end="476:41"><expr pos:start="476:38" pos:end="476:41"><name pos:start="476:38" pos:end="476:41">NULL</name></expr></argument>, <argument pos:start="476:44" pos:end="476:47"><expr pos:start="476:44" pos:end="476:47"><name pos:start="476:44" pos:end="476:47">NULL</name></expr></argument>, <argument pos:start="476:50" pos:end="476:53"><expr pos:start="476:50" pos:end="476:53"><name pos:start="476:50" pos:end="476:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="477:5" pos:end="477:28"><expr pos:start="477:5" pos:end="477:27"><call pos:start="477:5" pos:end="477:27"><name pos:start="477:5" pos:end="477:13">CU_ASSERT</name><argument_list pos:start="477:14" pos:end="477:27">(<argument pos:start="477:15" pos:end="477:26"><expr pos:start="477:15" pos:end="477:26"><name pos:start="477:15" pos:end="477:18">cert</name> <operator pos:start="477:20" pos:end="477:21">!=</operator> <name pos:start="477:23" pos:end="477:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="478:5" pos:end="479:15"><if pos:start="478:5" pos:end="479:15">if <condition pos:start="478:8" pos:end="478:14">(<expr pos:start="478:9" pos:end="478:13"><operator pos:start="478:9" pos:end="478:9">!</operator><name pos:start="478:10" pos:end="478:13">cert</name></expr>)</condition><block type="pseudo" pos:start="479:9" pos:end="479:15"><block_content pos:start="479:9" pos:end="479:15">
        <return pos:start="479:9" pos:end="479:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="480:5" pos:end="480:21"><expr pos:start="480:5" pos:end="480:20"><call pos:start="480:5" pos:end="480:20"><name pos:start="480:5" pos:end="480:16">BIO_free_all</name><argument_list pos:start="480:17" pos:end="480:20">(<argument pos:start="480:18" pos:end="480:19"><expr pos:start="480:18" pos:end="480:19"><name pos:start="480:18" pos:end="480:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="481:5" pos:end="481:19"><expr pos:start="481:5" pos:end="481:18"><call pos:start="481:5" pos:end="481:18"><name pos:start="481:5" pos:end="481:8">free</name><argument_list pos:start="481:9" pos:end="481:18">(<argument pos:start="481:10" pos:end="481:17"><expr pos:start="481:10" pos:end="481:17"><name pos:start="481:10" pos:end="481:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="483:5" pos:end="485:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="486:5" pos:end="486:62"><expr pos:start="486:5" pos:end="486:61"><name pos:start="486:5" pos:end="486:6">rv</name> <operator pos:start="486:8" pos:end="486:8">=</operator> <call pos:start="486:10" pos:end="486:61"><name pos:start="486:10" pos:end="486:32">est_client_get_csrattrs</name><argument_list pos:start="486:33" pos:end="486:61">(<argument pos:start="486:34" pos:end="486:37"><expr pos:start="486:34" pos:end="486:37"><name pos:start="486:34" pos:end="486:37">ectx</name></expr></argument>, <argument pos:start="486:40" pos:end="486:49"><expr pos:start="486:40" pos:end="486:49"><operator pos:start="486:40" pos:end="486:40">&amp;</operator><name pos:start="486:41" pos:end="486:49">attr_data</name></expr></argument>, <argument pos:start="486:52" pos:end="486:60"><expr pos:start="486:52" pos:end="486:60"><operator pos:start="486:52" pos:end="486:52">&amp;</operator><name pos:start="486:53" pos:end="486:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="487:5" pos:end="487:34"><expr pos:start="487:5" pos:end="487:33"><call pos:start="487:5" pos:end="487:33"><name pos:start="487:5" pos:end="487:13">CU_ASSERT</name><argument_list pos:start="487:14" pos:end="487:33">(<argument pos:start="487:15" pos:end="487:32"><expr pos:start="487:15" pos:end="487:32"><name pos:start="487:15" pos:end="487:16">rv</name> <operator pos:start="487:18" pos:end="487:19">==</operator> <name pos:start="487:21" pos:end="487:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="489:5" pos:end="491:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="492:5" pos:end="492:58"><expr pos:start="492:5" pos:end="492:57"><name pos:start="492:5" pos:end="492:6">rv</name> <operator pos:start="492:8" pos:end="492:8">=</operator> <call pos:start="492:10" pos:end="492:57"><name pos:start="492:10" pos:end="492:28">est_client_reenroll</name><argument_list pos:start="492:29" pos:end="492:57">(<argument pos:start="492:30" pos:end="492:33"><expr pos:start="492:30" pos:end="492:33"><name pos:start="492:30" pos:end="492:33">ectx</name></expr></argument>, <argument pos:start="492:36" pos:end="492:39"><expr pos:start="492:36" pos:end="492:39"><name pos:start="492:36" pos:end="492:39">cert</name></expr></argument>, <argument pos:start="492:42" pos:end="492:51"><expr pos:start="492:42" pos:end="492:51"><operator pos:start="492:42" pos:end="492:42">&amp;</operator><name pos:start="492:43" pos:end="492:51">pkcs7_len</name></expr></argument>, <argument pos:start="492:54" pos:end="492:56"><expr pos:start="492:54" pos:end="492:56"><name pos:start="492:54" pos:end="492:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="493:5" pos:end="493:45"><expr pos:start="493:5" pos:end="493:44"><call pos:start="493:5" pos:end="493:44"><name pos:start="493:5" pos:end="493:13">CU_ASSERT</name><argument_list pos:start="493:14" pos:end="493:44">(<argument pos:start="493:15" pos:end="493:43"><expr pos:start="493:15" pos:end="493:43"><name pos:start="493:15" pos:end="493:16">rv</name> <operator pos:start="493:18" pos:end="493:19">==</operator> <name pos:start="493:21" pos:end="493:43">EST_ERR_CA_ENROLL_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="495:5" pos:end="498:7">/*
     * The server should be configured with a retry-after
     * value of 3600 seconds, which is the default.
     */</comment>
    <expr_stmt pos:start="499:5" pos:end="499:66"><expr pos:start="499:5" pos:end="499:65"><name pos:start="499:5" pos:end="499:6">rv</name> <operator pos:start="499:8" pos:end="499:8">=</operator> <call pos:start="499:10" pos:end="499:65"><name pos:start="499:10" pos:end="499:36">est_client_copy_retry_after</name><argument_list pos:start="499:37" pos:end="499:65">(<argument pos:start="499:38" pos:end="499:41"><expr pos:start="499:38" pos:end="499:41"><name pos:start="499:38" pos:end="499:41">ectx</name></expr></argument>, <argument pos:start="499:44" pos:end="499:53"><expr pos:start="499:44" pos:end="499:53"><operator pos:start="499:44" pos:end="499:44">&amp;</operator><name pos:start="499:45" pos:end="499:53">retry_val</name></expr></argument>, <argument pos:start="499:56" pos:end="499:64"><expr pos:start="499:56" pos:end="499:64"><operator pos:start="499:56" pos:end="499:56">&amp;</operator><name pos:start="499:57" pos:end="499:64">time_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="500:5" pos:end="500:34"><expr pos:start="500:5" pos:end="500:33"><call pos:start="500:5" pos:end="500:33"><name pos:start="500:5" pos:end="500:13">CU_ASSERT</name><argument_list pos:start="500:14" pos:end="500:33">(<argument pos:start="500:15" pos:end="500:32"><expr pos:start="500:15" pos:end="500:32"><name pos:start="500:15" pos:end="500:16">rv</name> <operator pos:start="500:18" pos:end="500:19">==</operator> <name pos:start="500:21" pos:end="500:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="501:5" pos:end="501:33"><expr pos:start="501:5" pos:end="501:32"><call pos:start="501:5" pos:end="501:32"><name pos:start="501:5" pos:end="501:13">CU_ASSERT</name><argument_list pos:start="501:14" pos:end="501:32">(<argument pos:start="501:15" pos:end="501:31"><expr pos:start="501:15" pos:end="501:31"><name pos:start="501:15" pos:end="501:23">retry_val</name> <operator pos:start="501:25" pos:end="501:26">==</operator> <literal type="number" pos:start="501:28" pos:end="501:31">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="503:5" pos:end="505:7">/*
     * Clean up
     */</comment>
    <expr_stmt pos:start="506:5" pos:end="506:22"><expr pos:start="506:5" pos:end="506:21"><call pos:start="506:5" pos:end="506:21"><name pos:start="506:5" pos:end="506:15">est_destroy</name><argument_list pos:start="506:16" pos:end="506:21">(<argument pos:start="506:17" pos:end="506:20"><expr pos:start="506:17" pos:end="506:20"><name pos:start="506:17" pos:end="506:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="508:5" pos:end="510:7">/*
     * Stop the server.
     */</comment>
    <expr_stmt pos:start="511:5" pos:end="511:14"><expr pos:start="511:5" pos:end="511:13"><call pos:start="511:5" pos:end="511:13"><name pos:start="511:5" pos:end="511:11">st_stop</name><argument_list pos:start="511:12" pos:end="511:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="512:5" pos:end="512:20"><expr pos:start="512:5" pos:end="512:19"><call pos:start="512:5" pos:end="512:19"><name pos:start="512:5" pos:end="512:17">st_proxy_stop</name><argument_list pos:start="512:18" pos:end="512:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="514:5" pos:end="516:7">/*
     * Restart the server with manual approval disabled
     */</comment>
    <expr_stmt pos:start="517:5" pos:end="517:34"><expr pos:start="517:5" pos:end="517:33"><name pos:start="517:5" pos:end="517:6">rv</name> <operator pos:start="517:8" pos:end="517:8">=</operator> <call pos:start="517:10" pos:end="517:33"><name pos:start="517:10" pos:end="517:27">us893_start_server</name><argument_list pos:start="517:28" pos:end="517:33">(<argument pos:start="517:29" pos:end="517:29"><expr pos:start="517:29" pos:end="517:29"><literal type="number" pos:start="517:29" pos:end="517:29">0</literal></expr></argument>, <argument pos:start="517:32" pos:end="517:32"><expr pos:start="517:32" pos:end="517:32"><literal type="number" pos:start="517:32" pos:end="517:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="518:5" pos:end="518:23"><expr pos:start="518:5" pos:end="518:22"><call pos:start="518:5" pos:end="518:22"><name pos:start="518:5" pos:end="518:13">CU_ASSERT</name><argument_list pos:start="518:14" pos:end="518:22">(<argument pos:start="518:15" pos:end="518:21"><expr pos:start="518:15" pos:end="518:21"><name pos:start="518:15" pos:end="518:16">rv</name> <operator pos:start="518:18" pos:end="518:19">==</operator> <literal type="number" pos:start="518:21" pos:end="518:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="521:1" pos:end="527:3">/*
 * This test attempts to re-enroll an expired cert
 * while the EST server is configured with PoP
 * enabled, but the proxy server is using a cert
 * that doesn't contain id-kp-cmcRA.  This should
 * result in a failure.
 */</comment>
<function pos:start="528:1" pos:end="600:1"><type pos:start="528:1" pos:end="528:11"><specifier pos:start="528:1" pos:end="528:6">static</specifier> <name pos:start="528:8" pos:end="528:11">void</name></type> <name pos:start="528:13" pos:end="528:23">us893_test5</name> <parameter_list pos:start="528:25" pos:end="528:30">(<parameter pos:start="528:26" pos:end="528:29"><decl pos:start="528:26" pos:end="528:29"><type pos:start="528:26" pos:end="528:29"><name pos:start="528:26" pos:end="528:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="529:1" pos:end="600:1">{<block_content pos:start="530:5" pos:end="599:23">
    <decl_stmt pos:start="530:5" pos:end="530:11"><decl pos:start="530:5" pos:end="530:10"><type pos:start="530:5" pos:end="530:7"><name pos:start="530:5" pos:end="530:7">int</name></type> <name pos:start="530:9" pos:end="530:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="532:5" pos:end="533:5"><expr pos:start="532:5" pos:end="532:15"><name pos:start="532:5" pos:end="532:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="535:5" pos:end="537:7">/*
     * Make sure PoP is enabled on the server
     */</comment>
    <expr_stmt pos:start="538:5" pos:end="538:20"><expr pos:start="538:5" pos:end="538:19"><call pos:start="538:5" pos:end="538:19"><name pos:start="538:5" pos:end="538:17">st_enable_pop</name><argument_list pos:start="538:18" pos:end="538:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="540:5" pos:end="543:7">/*
     * Stop the proxy server so we can restart
     * it using a different identity cert.
     */</comment>
    <expr_stmt pos:start="544:5" pos:end="544:20"><expr pos:start="544:5" pos:end="544:19"><call pos:start="544:5" pos:end="544:19"><name pos:start="544:5" pos:end="544:17">st_proxy_stop</name><argument_list pos:start="544:18" pos:end="544:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="546:5" pos:end="548:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="549:5" pos:end="560:27"><expr pos:start="549:5" pos:end="560:26"><name pos:start="549:5" pos:end="549:6">rv</name> <operator pos:start="549:8" pos:end="549:8">=</operator> <call pos:start="549:10" pos:end="560:26"><name pos:start="549:10" pos:end="549:23">st_proxy_start</name><argument_list pos:start="549:24" pos:end="560:26">(<argument pos:start="549:25" pos:end="549:44"><expr pos:start="549:25" pos:end="549:44"><name pos:start="549:25" pos:end="549:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="550:25" pos:end="550:44"><expr pos:start="550:25" pos:end="550:44"><name pos:start="550:25" pos:end="550:44">US893_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="551:25" pos:end="551:44"><expr pos:start="551:25" pos:end="551:44"><name pos:start="551:25" pos:end="551:44">US893_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="552:25" pos:end="552:42"><expr pos:start="552:25" pos:end="552:42"><literal type="string" pos:start="552:25" pos:end="552:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="553:25" pos:end="553:37"><expr pos:start="553:25" pos:end="553:37"><name pos:start="553:25" pos:end="553:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="554:25" pos:end="554:43"><expr pos:start="554:25" pos:end="554:43"><name pos:start="554:25" pos:end="554:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="555:25" pos:end="555:33"><expr pos:start="555:25" pos:end="555:33"><literal type="string" pos:start="555:25" pos:end="555:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="556:25" pos:end="556:32"><expr pos:start="556:25" pos:end="556:32"><literal type="string" pos:start="556:25" pos:end="556:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="557:25" pos:end="557:35"><expr pos:start="557:25" pos:end="557:35"><literal type="string" pos:start="557:25" pos:end="557:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="558:25" pos:end="558:45"><expr pos:start="558:25" pos:end="558:45"><name pos:start="558:25" pos:end="558:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="559:25" pos:end="559:25"><expr pos:start="559:25" pos:end="559:25"><literal type="number" pos:start="559:25" pos:end="559:25">0</literal></expr></argument>,
                        <argument pos:start="560:25" pos:end="560:25"><expr pos:start="560:25" pos:end="560:25"><literal type="number" pos:start="560:25" pos:end="560:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="561:5" pos:end="561:23"><expr pos:start="561:5" pos:end="561:22"><call pos:start="561:5" pos:end="561:22"><name pos:start="561:5" pos:end="561:13">CU_ASSERT</name><argument_list pos:start="561:14" pos:end="561:22">(<argument pos:start="561:15" pos:end="561:21"><expr pos:start="561:15" pos:end="561:21"><name pos:start="561:15" pos:end="561:16">rv</name> <operator pos:start="561:18" pos:end="561:19">==</operator> <literal type="number" pos:start="561:21" pos:end="561:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="563:5" pos:end="566:7">/*
     * Use libcurl to send an enroll request.  We use libcurl
     * because it will not include the PoP.
     */</comment>
    <expr_stmt pos:start="567:5" pos:end="575:30"><expr pos:start="567:5" pos:end="575:29"><name pos:start="567:5" pos:end="567:6">rv</name> <operator pos:start="567:8" pos:end="567:8">=</operator> <call pos:start="567:10" pos:end="575:29"><name pos:start="567:10" pos:end="567:23">curl_http_post</name><argument_list pos:start="567:24" pos:end="575:29">(<argument pos:start="567:25" pos:end="567:45"><expr pos:start="567:25" pos:end="567:45"><name pos:start="567:25" pos:end="567:45">US893_REENROLL_URL_BA</name></expr></argument>,
                        <argument pos:start="568:25" pos:end="568:39"><expr pos:start="568:25" pos:end="568:39"><name pos:start="568:25" pos:end="568:39">US893_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="569:25" pos:end="569:44"><expr pos:start="569:25" pos:end="569:44"><name pos:start="569:25" pos:end="569:44">US893_PKCS10_RSA2048</name></expr></argument>,
                        <argument pos:start="570:25" pos:end="570:41"><expr pos:start="570:25" pos:end="570:41"><name pos:start="570:25" pos:end="570:41">US893_UIDPWD_GOOD</name></expr></argument>,
                        <argument pos:start="571:25" pos:end="571:37"><expr pos:start="571:25" pos:end="571:37"><name pos:start="571:25" pos:end="571:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="572:25" pos:end="572:38"><expr pos:start="572:25" pos:end="572:38"><name pos:start="572:25" pos:end="572:38">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="573:25" pos:end="573:28"><expr pos:start="573:25" pos:end="573:28"><name pos:start="573:25" pos:end="573:28">NULL</name></expr></argument>,
                        <argument pos:start="574:25" pos:end="574:28"><expr pos:start="574:25" pos:end="574:28"><name pos:start="574:25" pos:end="574:28">NULL</name></expr></argument>,
                        <argument pos:start="575:25" pos:end="575:28"><expr pos:start="575:25" pos:end="575:28"><name pos:start="575:25" pos:end="575:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="576:5" pos:end="578:7">/*
     * The PoP check should fail
     */</comment>
    <expr_stmt pos:start="579:5" pos:end="579:25"><expr pos:start="579:5" pos:end="579:24"><call pos:start="579:5" pos:end="579:24"><name pos:start="579:5" pos:end="579:13">CU_ASSERT</name><argument_list pos:start="579:14" pos:end="579:24">(<argument pos:start="579:15" pos:end="579:23"><expr pos:start="579:15" pos:end="579:23"><name pos:start="579:15" pos:end="579:16">rv</name> <operator pos:start="579:18" pos:end="579:19">==</operator> <literal type="number" pos:start="579:21" pos:end="579:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="581:5" pos:end="583:7">/*
     * Stop the proxy server
     */</comment>
    <expr_stmt pos:start="584:5" pos:end="584:20"><expr pos:start="584:5" pos:end="584:19"><call pos:start="584:5" pos:end="584:19"><name pos:start="584:5" pos:end="584:17">st_proxy_stop</name><argument_list pos:start="584:18" pos:end="584:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="586:5" pos:end="588:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="589:5" pos:end="598:27"><expr pos:start="589:5" pos:end="598:26"><name pos:start="589:5" pos:end="589:6">rv</name> <operator pos:start="589:8" pos:end="589:8">=</operator> <call pos:start="589:10" pos:end="598:26"><name pos:start="589:10" pos:end="589:23">st_proxy_start</name><argument_list pos:start="589:24" pos:end="598:26">(<argument pos:start="589:25" pos:end="589:44"><expr pos:start="589:25" pos:end="589:44"><name pos:start="589:25" pos:end="589:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="590:25" pos:end="590:40"><expr pos:start="590:25" pos:end="590:40"><name pos:start="590:25" pos:end="590:40">US893_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="591:25" pos:end="591:39"><expr pos:start="591:25" pos:end="591:39"><name pos:start="591:25" pos:end="591:39">US893_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="592:25" pos:end="592:42"><expr pos:start="592:25" pos:end="592:42"><literal type="string" pos:start="592:25" pos:end="592:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="593:25" pos:end="593:37"><expr pos:start="593:25" pos:end="593:37"><name pos:start="593:25" pos:end="593:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="594:25" pos:end="594:43"><expr pos:start="594:25" pos:end="594:43"><name pos:start="594:25" pos:end="594:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="595:25" pos:end="595:33"><expr pos:start="595:25" pos:end="595:33"><literal type="string" pos:start="595:25" pos:end="595:33">"estuser"</literal></expr></argument>, <argument pos:start="595:36" pos:end="595:43"><expr pos:start="595:36" pos:end="595:43"><literal type="string" pos:start="595:36" pos:end="595:43">"estpwd"</literal></expr></argument>, <argument pos:start="595:46" pos:end="595:56"><expr pos:start="595:46" pos:end="595:56"><literal type="string" pos:start="595:46" pos:end="595:56">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="596:25" pos:end="596:45"><expr pos:start="596:25" pos:end="596:45"><name pos:start="596:25" pos:end="596:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="597:25" pos:end="597:25"><expr pos:start="597:25" pos:end="597:25"><literal type="number" pos:start="597:25" pos:end="597:25">0</literal></expr></argument>,
                        <argument pos:start="598:25" pos:end="598:25"><expr pos:start="598:25" pos:end="598:25"><literal type="number" pos:start="598:25" pos:end="598:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="599:5" pos:end="599:23"><expr pos:start="599:5" pos:end="599:22"><call pos:start="599:5" pos:end="599:22"><name pos:start="599:5" pos:end="599:13">CU_ASSERT</name><argument_list pos:start="599:14" pos:end="599:22">(<argument pos:start="599:15" pos:end="599:21"><expr pos:start="599:15" pos:end="599:21"><name pos:start="599:15" pos:end="599:16">rv</name> <operator pos:start="599:18" pos:end="599:19">==</operator> <literal type="number" pos:start="599:21" pos:end="599:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="602:1" pos:end="608:3">/*
 * This test attempts to re-enroll an expired cert
 * while the EST server is configured with PoP
 * disabled, but the proxy server is using a cert
 * that doesn't contain id-kp-cmcRA.  This should
 * result in a successful reenroll.
 */</comment>
<function pos:start="609:1" pos:end="697:0"><type pos:start="609:1" pos:end="609:11"><specifier pos:start="609:1" pos:end="609:6">static</specifier> <name pos:start="609:8" pos:end="609:11">void</name></type> <name pos:start="609:13" pos:end="609:23">us893_test6</name> <parameter_list pos:start="609:25" pos:end="609:30">(<parameter pos:start="609:26" pos:end="609:29"><decl pos:start="609:26" pos:end="609:29"><type pos:start="609:26" pos:end="609:29"><name pos:start="609:26" pos:end="609:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="610:1" pos:end="697:0">{<block_content pos:start="611:5" pos:end="681:20">
    <decl_stmt pos:start="611:5" pos:end="611:11"><decl pos:start="611:5" pos:end="611:10"><type pos:start="611:5" pos:end="611:7"><name pos:start="611:5" pos:end="611:7">int</name></type> <name pos:start="611:9" pos:end="611:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="613:5" pos:end="614:5"><expr pos:start="613:5" pos:end="613:15"><name pos:start="613:5" pos:end="613:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="616:5" pos:end="618:7">/*
     * Make sure PoP is disabled on the server
     */</comment>
    <expr_stmt pos:start="619:5" pos:end="619:21"><expr pos:start="619:5" pos:end="619:20"><call pos:start="619:5" pos:end="619:20"><name pos:start="619:5" pos:end="619:18">st_disable_pop</name><argument_list pos:start="619:19" pos:end="619:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="621:5" pos:end="624:7">/*
     * Stop the proxy server so we can restart
     * it using a different identity cert.
     */</comment>
    <expr_stmt pos:start="625:5" pos:end="625:20"><expr pos:start="625:5" pos:end="625:19"><call pos:start="625:5" pos:end="625:19"><name pos:start="625:5" pos:end="625:17">st_proxy_stop</name><argument_list pos:start="625:18" pos:end="625:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="627:5" pos:end="629:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="630:5" pos:end="641:27"><expr pos:start="630:5" pos:end="641:26"><name pos:start="630:5" pos:end="630:6">rv</name> <operator pos:start="630:8" pos:end="630:8">=</operator> <call pos:start="630:10" pos:end="641:26"><name pos:start="630:10" pos:end="630:23">st_proxy_start</name><argument_list pos:start="630:24" pos:end="641:26">(<argument pos:start="630:25" pos:end="630:44"><expr pos:start="630:25" pos:end="630:44"><name pos:start="630:25" pos:end="630:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="631:25" pos:end="631:44"><expr pos:start="631:25" pos:end="631:44"><name pos:start="631:25" pos:end="631:44">US893_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="632:25" pos:end="632:44"><expr pos:start="632:25" pos:end="632:44"><name pos:start="632:25" pos:end="632:44">US893_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="633:25" pos:end="633:42"><expr pos:start="633:25" pos:end="633:42"><literal type="string" pos:start="633:25" pos:end="633:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="634:25" pos:end="634:37"><expr pos:start="634:25" pos:end="634:37"><name pos:start="634:25" pos:end="634:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="635:25" pos:end="635:43"><expr pos:start="635:25" pos:end="635:43"><name pos:start="635:25" pos:end="635:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="636:25" pos:end="636:33"><expr pos:start="636:25" pos:end="636:33"><literal type="string" pos:start="636:25" pos:end="636:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="637:25" pos:end="637:32"><expr pos:start="637:25" pos:end="637:32"><literal type="string" pos:start="637:25" pos:end="637:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="638:25" pos:end="638:35"><expr pos:start="638:25" pos:end="638:35"><literal type="string" pos:start="638:25" pos:end="638:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="639:25" pos:end="639:45"><expr pos:start="639:25" pos:end="639:45"><name pos:start="639:25" pos:end="639:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="640:25" pos:end="640:25"><expr pos:start="640:25" pos:end="640:25"><literal type="number" pos:start="640:25" pos:end="640:25">0</literal></expr></argument>,
                        <argument pos:start="641:25" pos:end="641:25"><expr pos:start="641:25" pos:end="641:25"><literal type="number" pos:start="641:25" pos:end="641:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="642:5" pos:end="642:23"><expr pos:start="642:5" pos:end="642:22"><call pos:start="642:5" pos:end="642:22"><name pos:start="642:5" pos:end="642:13">CU_ASSERT</name><argument_list pos:start="642:14" pos:end="642:22">(<argument pos:start="642:15" pos:end="642:21"><expr pos:start="642:15" pos:end="642:21"><name pos:start="642:15" pos:end="642:16">rv</name> <operator pos:start="642:18" pos:end="642:19">==</operator> <literal type="number" pos:start="642:21" pos:end="642:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="644:5" pos:end="647:7">/*
     * Use libcurl to send an enroll request.  We use libcurl
     * because it will not include the PoP.
     */</comment>
    <expr_stmt pos:start="648:5" pos:end="650:72"><expr pos:start="648:5" pos:end="650:71"><name pos:start="648:5" pos:end="648:6">rv</name> <operator pos:start="648:8" pos:end="648:8">=</operator> <call pos:start="648:10" pos:end="650:71"><name pos:start="648:10" pos:end="648:23">curl_http_post</name><argument_list pos:start="648:24" pos:end="650:71">(<argument pos:start="648:25" pos:end="648:45"><expr pos:start="648:25" pos:end="648:45"><name pos:start="648:25" pos:end="648:45">US893_REENROLL_URL_BA</name></expr></argument>, <argument pos:start="648:48" pos:end="648:62"><expr pos:start="648:48" pos:end="648:62"><name pos:start="648:48" pos:end="648:62">US893_PKCS10_CT</name></expr></argument>,
    <argument pos:start="649:5" pos:end="649:24"><expr pos:start="649:5" pos:end="649:24"><name pos:start="649:5" pos:end="649:24">US893_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="650:5" pos:end="650:21"><expr pos:start="650:5" pos:end="650:21"><name pos:start="650:5" pos:end="650:21">US893_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="650:24" pos:end="650:36"><expr pos:start="650:24" pos:end="650:36"><name pos:start="650:24" pos:end="650:36">US893_CACERTS</name></expr></argument>, <argument pos:start="650:39" pos:end="650:52"><expr pos:start="650:39" pos:end="650:52"><name pos:start="650:39" pos:end="650:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="650:55" pos:end="650:58"><expr pos:start="650:55" pos:end="650:58"><name pos:start="650:55" pos:end="650:58">NULL</name></expr></argument>, <argument pos:start="650:61" pos:end="650:64"><expr pos:start="650:61" pos:end="650:64"><name pos:start="650:61" pos:end="650:64">NULL</name></expr></argument>, <argument pos:start="650:67" pos:end="650:70"><expr pos:start="650:67" pos:end="650:70"><name pos:start="650:67" pos:end="650:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="651:5" pos:end="653:7">/*
     * The reenroll should work since PoP is not enabled anywhere.
     */</comment>
    <expr_stmt pos:start="654:5" pos:end="654:25"><expr pos:start="654:5" pos:end="654:24"><call pos:start="654:5" pos:end="654:24"><name pos:start="654:5" pos:end="654:13">CU_ASSERT</name><argument_list pos:start="654:14" pos:end="654:24">(<argument pos:start="654:15" pos:end="654:23"><expr pos:start="654:15" pos:end="654:23"><name pos:start="654:15" pos:end="654:16">rv</name> <operator pos:start="654:18" pos:end="654:19">==</operator> <literal type="number" pos:start="654:21" pos:end="654:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="656:5" pos:end="658:7">/*
     * Stop the proxy server
     */</comment>
    <expr_stmt pos:start="659:5" pos:end="659:20"><expr pos:start="659:5" pos:end="659:19"><call pos:start="659:5" pos:end="659:19"><name pos:start="659:5" pos:end="659:17">st_proxy_stop</name><argument_list pos:start="659:18" pos:end="659:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="661:5" pos:end="663:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="664:5" pos:end="675:27"><expr pos:start="664:5" pos:end="675:26"><name pos:start="664:5" pos:end="664:6">rv</name> <operator pos:start="664:8" pos:end="664:8">=</operator> <call pos:start="664:10" pos:end="675:26"><name pos:start="664:10" pos:end="664:23">st_proxy_start</name><argument_list pos:start="664:24" pos:end="675:26">(<argument pos:start="664:25" pos:end="664:44"><expr pos:start="664:25" pos:end="664:44"><name pos:start="664:25" pos:end="664:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="665:25" pos:end="665:40"><expr pos:start="665:25" pos:end="665:40"><name pos:start="665:25" pos:end="665:40">US893_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="666:25" pos:end="666:39"><expr pos:start="666:25" pos:end="666:39"><name pos:start="666:25" pos:end="666:39">US893_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="667:25" pos:end="667:42"><expr pos:start="667:25" pos:end="667:42"><literal type="string" pos:start="667:25" pos:end="667:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="668:25" pos:end="668:37"><expr pos:start="668:25" pos:end="668:37"><name pos:start="668:25" pos:end="668:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="669:25" pos:end="669:43"><expr pos:start="669:25" pos:end="669:43"><name pos:start="669:25" pos:end="669:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="670:25" pos:end="670:33"><expr pos:start="670:25" pos:end="670:33"><literal type="string" pos:start="670:25" pos:end="670:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="671:25" pos:end="671:32"><expr pos:start="671:25" pos:end="671:32"><literal type="string" pos:start="671:25" pos:end="671:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="672:25" pos:end="672:35"><expr pos:start="672:25" pos:end="672:35"><literal type="string" pos:start="672:25" pos:end="672:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="673:25" pos:end="673:45"><expr pos:start="673:25" pos:end="673:45"><name pos:start="673:25" pos:end="673:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="674:25" pos:end="674:25"><expr pos:start="674:25" pos:end="674:25"><literal type="number" pos:start="674:25" pos:end="674:25">0</literal></expr></argument>,
                        <argument pos:start="675:25" pos:end="675:25"><expr pos:start="675:25" pos:end="675:25"><literal type="number" pos:start="675:25" pos:end="675:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="676:5" pos:end="676:23"><expr pos:start="676:5" pos:end="676:22"><call pos:start="676:5" pos:end="676:22"><name pos:start="676:5" pos:end="676:13">CU_ASSERT</name><argument_list pos:start="676:14" pos:end="676:22">(<argument pos:start="676:15" pos:end="676:21"><expr pos:start="676:15" pos:end="676:21"><name pos:start="676:15" pos:end="676:16">rv</name> <operator pos:start="676:18" pos:end="676:19">==</operator> <literal type="number" pos:start="676:21" pos:end="676:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="678:5" pos:end="680:7">/*
     * Re-enable PoP on the server for the forthcoming test cases.
     */</comment>
    <expr_stmt pos:start="681:5" pos:end="681:20"><expr pos:start="681:5" pos:end="681:19"><call pos:start="681:5" pos:end="681:19"><name pos:start="681:5" pos:end="681:17">st_enable_pop</name><argument_list pos:start="681:18" pos:end="681:19">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="684:1" pos:end="692:3">/*
 * This test attempts to re-enroll an expired cert
 * while the EST server is configured with PoP
 * disabled, but the proxy server is using a cert
 * that doesn't contain id-kp-cmcRA.  The CSR will
 * contain the PoP, which forces it to be checked.
 * This should result in a failure since the RA
 * cert doesn't contain id-kp-cmcRA.
 */</comment>
<comment type="line" pos:start="693:1" pos:end="693:62">//The following include should never be used by an application</comment>
<comment type="line" pos:start="694:1" pos:end="694:54">//be we use it here to hack the EST_CTX values mid-way</comment>
<comment type="line" pos:start="695:1" pos:end="695:19">//through this test</comment>
<cpp:include pos:start="696:1" pos:end="696:35">#<cpp:directive pos:start="696:2" pos:end="696:8">include</cpp:directive> <cpp:file pos:start="696:10" pos:end="696:35">"../../src/est/est_locl.h"</cpp:file></cpp:include>
<function pos:start="697:1" pos:end="827:1"><type pos:start="697:1" pos:end="697:11"><specifier pos:start="697:1" pos:end="697:6">static</specifier> <name pos:start="697:8" pos:end="697:11">void</name></type> <name pos:start="697:13" pos:end="697:23">us893_test7</name> <parameter_list pos:start="697:25" pos:end="697:30">(<parameter pos:start="697:26" pos:end="697:29"><decl pos:start="697:26" pos:end="697:29"><type pos:start="697:26" pos:end="697:29"><name pos:start="697:26" pos:end="697:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="698:1" pos:end="827:1">{<block_content pos:start="699:5" pos:end="826:22">
    <decl_stmt pos:start="699:5" pos:end="699:11"><decl pos:start="699:5" pos:end="699:10"><type pos:start="699:5" pos:end="699:7"><name pos:start="699:5" pos:end="699:7">int</name></type> <name pos:start="699:9" pos:end="699:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="700:5" pos:end="700:18"><decl pos:start="700:5" pos:end="700:17"><type pos:start="700:5" pos:end="700:13"><name pos:start="700:5" pos:end="700:11">EST_CTX</name> <modifier pos:start="700:13" pos:end="700:13">*</modifier></type><name pos:start="700:14" pos:end="700:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="701:5" pos:end="701:18"><decl pos:start="701:5" pos:end="701:17"><type pos:start="701:5" pos:end="701:14"><name pos:start="701:5" pos:end="701:12">EVP_PKEY</name> <modifier pos:start="701:14" pos:end="701:14">*</modifier></type><name pos:start="701:15" pos:end="701:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="702:5" pos:end="702:27"><decl pos:start="702:5" pos:end="702:26"><type pos:start="702:5" pos:end="702:19"><name pos:start="702:5" pos:end="702:12">unsigned</name> <name pos:start="702:14" pos:end="702:17">char</name> <modifier pos:start="702:19" pos:end="702:19">*</modifier></type><name pos:start="702:20" pos:end="702:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="703:5" pos:end="703:16"><decl pos:start="703:5" pos:end="703:15"><type pos:start="703:5" pos:end="703:7"><name pos:start="703:5" pos:end="703:7">int</name></type> <name pos:start="703:9" pos:end="703:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="704:5" pos:end="704:28"><decl pos:start="704:5" pos:end="704:27"><type pos:start="704:5" pos:end="704:19"><name pos:start="704:5" pos:end="704:12">unsigned</name> <name pos:start="704:14" pos:end="704:17">char</name> <modifier pos:start="704:19" pos:end="704:19">*</modifier></type><name pos:start="704:20" pos:end="704:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="705:5" pos:end="705:17"><decl pos:start="705:5" pos:end="705:16"><type pos:start="705:5" pos:end="705:7"><name pos:start="705:5" pos:end="705:7">int</name></type> <name pos:start="705:9" pos:end="705:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="706:5" pos:end="706:22"><decl pos:start="706:5" pos:end="706:21"><type pos:start="706:5" pos:end="706:7"><name pos:start="706:5" pos:end="706:7">int</name></type> <name pos:start="706:9" pos:end="706:17">pkcs7_len</name> <init pos:start="706:19" pos:end="706:21">= <expr pos:start="706:21" pos:end="706:21"><literal type="number" pos:start="706:21" pos:end="706:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="707:5" pos:end="707:22"><decl pos:start="707:5" pos:end="707:21"><type pos:start="707:5" pos:end="707:10"><name pos:start="707:5" pos:end="707:8">X509</name> <modifier pos:start="707:10" pos:end="707:10">*</modifier></type><name pos:start="707:11" pos:end="707:14">cert</name> <init pos:start="707:16" pos:end="707:21">= <expr pos:start="707:18" pos:end="707:21"><name pos:start="707:18" pos:end="707:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="708:5" pos:end="708:12"><decl pos:start="708:5" pos:end="708:11"><type pos:start="708:5" pos:end="708:9"><name pos:start="708:5" pos:end="708:7">BIO</name> <modifier pos:start="708:9" pos:end="708:9">*</modifier></type><name pos:start="708:10" pos:end="708:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="709:5" pos:end="709:36"><decl pos:start="709:5" pos:end="709:35"><type pos:start="709:5" pos:end="709:19"><name pos:start="709:5" pos:end="709:12">unsigned</name> <name pos:start="709:14" pos:end="709:17">char</name> <modifier pos:start="709:19" pos:end="709:19">*</modifier></type><name pos:start="709:20" pos:end="709:28">attr_data</name> <init pos:start="709:30" pos:end="709:35">= <expr pos:start="709:32" pos:end="709:35"><name pos:start="709:32" pos:end="709:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="710:5" pos:end="710:17"><decl pos:start="710:5" pos:end="710:16"><type pos:start="710:5" pos:end="710:7"><name pos:start="710:5" pos:end="710:7">int</name></type> <name pos:start="710:9" pos:end="710:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="712:5" pos:end="713:5"><expr pos:start="712:5" pos:end="712:15"><name pos:start="712:5" pos:end="712:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="715:5" pos:end="717:7">/*
     * Make sure PoP is disabled on the server
     */</comment>
    <expr_stmt pos:start="718:5" pos:end="718:21"><expr pos:start="718:5" pos:end="718:20"><call pos:start="718:5" pos:end="718:20"><name pos:start="718:5" pos:end="718:18">st_disable_pop</name><argument_list pos:start="718:19" pos:end="718:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="720:5" pos:end="723:7">/*
     * Stop the proxy server so we can restart
     * it using a different identity cert.
     */</comment>
    <expr_stmt pos:start="724:5" pos:end="724:20"><expr pos:start="724:5" pos:end="724:19"><call pos:start="724:5" pos:end="724:19"><name pos:start="724:5" pos:end="724:17">st_proxy_stop</name><argument_list pos:start="724:18" pos:end="724:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="726:5" pos:end="728:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="729:5" pos:end="740:27"><expr pos:start="729:5" pos:end="740:26"><name pos:start="729:5" pos:end="729:6">rv</name> <operator pos:start="729:8" pos:end="729:8">=</operator> <call pos:start="729:10" pos:end="740:26"><name pos:start="729:10" pos:end="729:23">st_proxy_start</name><argument_list pos:start="729:24" pos:end="740:26">(<argument pos:start="729:25" pos:end="729:44"><expr pos:start="729:25" pos:end="729:44"><name pos:start="729:25" pos:end="729:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="730:25" pos:end="730:44"><expr pos:start="730:25" pos:end="730:44"><name pos:start="730:25" pos:end="730:44">US893_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="731:25" pos:end="731:44"><expr pos:start="731:25" pos:end="731:44"><name pos:start="731:25" pos:end="731:44">US893_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="732:25" pos:end="732:42"><expr pos:start="732:25" pos:end="732:42"><literal type="string" pos:start="732:25" pos:end="732:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="733:25" pos:end="733:37"><expr pos:start="733:25" pos:end="733:37"><name pos:start="733:25" pos:end="733:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="734:25" pos:end="734:43"><expr pos:start="734:25" pos:end="734:43"><name pos:start="734:25" pos:end="734:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="735:25" pos:end="735:33"><expr pos:start="735:25" pos:end="735:33"><literal type="string" pos:start="735:25" pos:end="735:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="736:25" pos:end="736:32"><expr pos:start="736:25" pos:end="736:32"><literal type="string" pos:start="736:25" pos:end="736:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="737:25" pos:end="737:35"><expr pos:start="737:25" pos:end="737:35"><literal type="string" pos:start="737:25" pos:end="737:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="738:25" pos:end="738:45"><expr pos:start="738:25" pos:end="738:45"><name pos:start="738:25" pos:end="738:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="739:25" pos:end="739:25"><expr pos:start="739:25" pos:end="739:25"><literal type="number" pos:start="739:25" pos:end="739:25">0</literal></expr></argument>,
                        <argument pos:start="740:25" pos:end="740:25"><expr pos:start="740:25" pos:end="740:25"><literal type="number" pos:start="740:25" pos:end="740:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="741:5" pos:end="741:23"><expr pos:start="741:5" pos:end="741:22"><call pos:start="741:5" pos:end="741:22"><name pos:start="741:5" pos:end="741:13">CU_ASSERT</name><argument_list pos:start="741:14" pos:end="741:22">(<argument pos:start="741:15" pos:end="741:21"><expr pos:start="741:15" pos:end="741:21"><name pos:start="741:15" pos:end="741:16">rv</name> <operator pos:start="741:18" pos:end="741:19">==</operator> <literal type="number" pos:start="741:21" pos:end="741:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="743:5" pos:end="745:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="746:5" pos:end="746:76"><expr pos:start="746:5" pos:end="746:75"><name pos:start="746:5" pos:end="746:8">ectx</name> <operator pos:start="746:10" pos:end="746:10">=</operator> <call pos:start="746:12" pos:end="746:75"><name pos:start="746:12" pos:end="746:26">est_client_init</name><argument_list pos:start="746:27" pos:end="746:75">(<argument pos:start="746:28" pos:end="746:34"><expr pos:start="746:28" pos:end="746:34"><name pos:start="746:28" pos:end="746:34">cacerts</name></expr></argument>, <argument pos:start="746:37" pos:end="746:47"><expr pos:start="746:37" pos:end="746:47"><name pos:start="746:37" pos:end="746:47">cacerts_len</name></expr></argument>, <argument pos:start="746:50" pos:end="746:68"><expr pos:start="746:50" pos:end="746:68"><name pos:start="746:50" pos:end="746:68">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="746:71" pos:end="746:74"><expr pos:start="746:71" pos:end="746:74"><name pos:start="746:71" pos:end="746:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="747:5" pos:end="747:28"><expr pos:start="747:5" pos:end="747:27"><call pos:start="747:5" pos:end="747:27"><name pos:start="747:5" pos:end="747:13">CU_ASSERT</name><argument_list pos:start="747:14" pos:end="747:27">(<argument pos:start="747:15" pos:end="747:26"><expr pos:start="747:15" pos:end="747:26"><name pos:start="747:15" pos:end="747:18">ectx</name> <operator pos:start="747:20" pos:end="747:21">!=</operator> <name pos:start="747:23" pos:end="747:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="749:5" pos:end="751:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="752:5" pos:end="752:69"><expr pos:start="752:5" pos:end="752:68"><name pos:start="752:5" pos:end="752:6">rv</name> <operator pos:start="752:8" pos:end="752:8">=</operator> <call pos:start="752:10" pos:end="752:68"><name pos:start="752:10" pos:end="752:28">est_client_set_auth</name><argument_list pos:start="752:29" pos:end="752:68">(<argument pos:start="752:30" pos:end="752:33"><expr pos:start="752:30" pos:end="752:33"><name pos:start="752:30" pos:end="752:33">ectx</name></expr></argument>, <argument pos:start="752:36" pos:end="752:44"><expr pos:start="752:36" pos:end="752:44"><name pos:start="752:36" pos:end="752:44">US893_UID</name></expr></argument>, <argument pos:start="752:47" pos:end="752:55"><expr pos:start="752:47" pos:end="752:55"><name pos:start="752:47" pos:end="752:55">US893_PWD</name></expr></argument>, <argument pos:start="752:58" pos:end="752:61"><expr pos:start="752:58" pos:end="752:61"><name pos:start="752:58" pos:end="752:61">NULL</name></expr></argument>, <argument pos:start="752:64" pos:end="752:67"><expr pos:start="752:64" pos:end="752:67"><name pos:start="752:64" pos:end="752:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="753:5" pos:end="753:34"><expr pos:start="753:5" pos:end="753:33"><call pos:start="753:5" pos:end="753:33"><name pos:start="753:5" pos:end="753:13">CU_ASSERT</name><argument_list pos:start="753:14" pos:end="753:33">(<argument pos:start="753:15" pos:end="753:32"><expr pos:start="753:15" pos:end="753:32"><name pos:start="753:15" pos:end="753:16">rv</name> <operator pos:start="753:18" pos:end="753:19">==</operator> <name pos:start="753:21" pos:end="753:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="755:5" pos:end="757:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="758:5" pos:end="758:77"><expr pos:start="758:5" pos:end="758:76"><call pos:start="758:5" pos:end="758:76"><name pos:start="758:5" pos:end="758:25">est_client_set_server</name><argument_list pos:start="758:26" pos:end="758:76">(<argument pos:start="758:27" pos:end="758:30"><expr pos:start="758:27" pos:end="758:30"><name pos:start="758:27" pos:end="758:30">ectx</name></expr></argument>, <argument pos:start="758:33" pos:end="758:47"><expr pos:start="758:33" pos:end="758:47"><name pos:start="758:33" pos:end="758:47">US893_SERVER_IP</name></expr></argument>, <argument pos:start="758:50" pos:end="758:69"><expr pos:start="758:50" pos:end="758:69"><name pos:start="758:50" pos:end="758:69">US893_TCP_PROXY_PORT</name></expr></argument>, <argument pos:start="758:72" pos:end="758:75"><expr pos:start="758:72" pos:end="758:75"><name pos:start="758:72" pos:end="758:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="760:5" pos:end="762:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="763:5" pos:end="763:60"><expr pos:start="763:5" pos:end="763:59"><name pos:start="763:5" pos:end="763:11">key_len</name> <operator pos:start="763:13" pos:end="763:13">=</operator> <call pos:start="763:15" pos:end="763:59"><name pos:start="763:15" pos:end="763:30">read_binary_file</name><argument_list pos:start="763:31" pos:end="763:59">(<argument pos:start="763:32" pos:end="763:48"><expr pos:start="763:32" pos:end="763:48"><name pos:start="763:32" pos:end="763:48">US893_EXPIRED_KEY</name></expr></argument>, <argument pos:start="763:51" pos:end="763:58"><expr pos:start="763:51" pos:end="763:58"><operator pos:start="763:51" pos:end="763:51">&amp;</operator><name pos:start="763:52" pos:end="763:58">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="764:5" pos:end="764:27"><expr pos:start="764:5" pos:end="764:26"><call pos:start="764:5" pos:end="764:26"><name pos:start="764:5" pos:end="764:13">CU_ASSERT</name><argument_list pos:start="764:14" pos:end="764:26">(<argument pos:start="764:15" pos:end="764:25"><expr pos:start="764:15" pos:end="764:25"><name pos:start="764:15" pos:end="764:21">key_len</name> <operator pos:start="764:23" pos:end="764:23">&gt;</operator> <literal type="number" pos:start="764:25" pos:end="764:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="765:5" pos:end="765:57"><expr pos:start="765:5" pos:end="765:56"><name pos:start="765:5" pos:end="765:7">key</name> <operator pos:start="765:9" pos:end="765:9">=</operator> <call pos:start="765:11" pos:end="765:56"><name pos:start="765:11" pos:end="765:22">est_load_key</name><argument_list pos:start="765:23" pos:end="765:56">(<argument pos:start="765:24" pos:end="765:30"><expr pos:start="765:24" pos:end="765:30"><name pos:start="765:24" pos:end="765:30">key_raw</name></expr></argument>, <argument pos:start="765:33" pos:end="765:39"><expr pos:start="765:33" pos:end="765:39"><name pos:start="765:33" pos:end="765:39">key_len</name></expr></argument>, <argument pos:start="765:42" pos:end="765:55"><expr pos:start="765:42" pos:end="765:55"><name pos:start="765:42" pos:end="765:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="766:5" pos:end="766:27"><expr pos:start="766:5" pos:end="766:26"><call pos:start="766:5" pos:end="766:26"><name pos:start="766:5" pos:end="766:13">CU_ASSERT</name><argument_list pos:start="766:14" pos:end="766:26">(<argument pos:start="766:15" pos:end="766:25"><expr pos:start="766:15" pos:end="766:25"><name pos:start="766:15" pos:end="766:17">key</name> <operator pos:start="766:19" pos:end="766:20">!=</operator> <name pos:start="766:22" pos:end="766:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="767:5" pos:end="767:18"><expr pos:start="767:5" pos:end="767:17"><call pos:start="767:5" pos:end="767:17"><name pos:start="767:5" pos:end="767:8">free</name><argument_list pos:start="767:9" pos:end="767:17">(<argument pos:start="767:10" pos:end="767:16"><expr pos:start="767:10" pos:end="767:16"><name pos:start="767:10" pos:end="767:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="769:5" pos:end="771:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="772:5" pos:end="772:63"><expr pos:start="772:5" pos:end="772:62"><name pos:start="772:5" pos:end="772:12">cert_len</name> <operator pos:start="772:14" pos:end="772:14">=</operator> <call pos:start="772:16" pos:end="772:62"><name pos:start="772:16" pos:end="772:31">read_binary_file</name><argument_list pos:start="772:32" pos:end="772:62">(<argument pos:start="772:33" pos:end="772:50"><expr pos:start="772:33" pos:end="772:50"><name pos:start="772:33" pos:end="772:50">US893_EXPIRED_CERT</name></expr></argument>, <argument pos:start="772:53" pos:end="772:61"><expr pos:start="772:53" pos:end="772:61"><operator pos:start="772:53" pos:end="772:53">&amp;</operator><name pos:start="772:54" pos:end="772:61">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="773:5" pos:end="773:28"><expr pos:start="773:5" pos:end="773:27"><call pos:start="773:5" pos:end="773:27"><name pos:start="773:5" pos:end="773:13">CU_ASSERT</name><argument_list pos:start="773:14" pos:end="773:27">(<argument pos:start="773:15" pos:end="773:26"><expr pos:start="773:15" pos:end="773:26"><name pos:start="773:15" pos:end="773:22">cert_len</name> <operator pos:start="773:24" pos:end="773:24">&gt;</operator> <literal type="number" pos:start="773:26" pos:end="773:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="774:5" pos:end="774:45"><expr pos:start="774:5" pos:end="774:44"><name pos:start="774:5" pos:end="774:6">in</name> <operator pos:start="774:8" pos:end="774:8">=</operator> <call pos:start="774:10" pos:end="774:44"><name pos:start="774:10" pos:end="774:24">BIO_new_mem_buf</name><argument_list pos:start="774:25" pos:end="774:44">(<argument pos:start="774:26" pos:end="774:33"><expr pos:start="774:26" pos:end="774:33"><name pos:start="774:26" pos:end="774:33">cert_raw</name></expr></argument>, <argument pos:start="774:36" pos:end="774:43"><expr pos:start="774:36" pos:end="774:43"><name pos:start="774:36" pos:end="774:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="775:5" pos:end="775:26"><expr pos:start="775:5" pos:end="775:25"><call pos:start="775:5" pos:end="775:25"><name pos:start="775:5" pos:end="775:13">CU_ASSERT</name><argument_list pos:start="775:14" pos:end="775:25">(<argument pos:start="775:15" pos:end="775:24"><expr pos:start="775:15" pos:end="775:24"><name pos:start="775:15" pos:end="775:16">in</name> <operator pos:start="775:18" pos:end="775:19">!=</operator> <name pos:start="775:21" pos:end="775:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="776:5" pos:end="777:15"><if pos:start="776:5" pos:end="777:15">if <condition pos:start="776:8" pos:end="776:12">(<expr pos:start="776:9" pos:end="776:11"><operator pos:start="776:9" pos:end="776:9">!</operator><name pos:start="776:10" pos:end="776:11">in</name></expr>)</condition><block type="pseudo" pos:start="777:9" pos:end="777:15"><block_content pos:start="777:9" pos:end="777:15">
        <return pos:start="777:9" pos:end="777:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="778:5" pos:end="778:55"><expr pos:start="778:5" pos:end="778:54"><name pos:start="778:5" pos:end="778:8">cert</name> <operator pos:start="778:10" pos:end="778:10">=</operator> <call pos:start="778:12" pos:end="778:54"><name pos:start="778:12" pos:end="778:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="778:33" pos:end="778:54">(<argument pos:start="778:34" pos:end="778:35"><expr pos:start="778:34" pos:end="778:35"><name pos:start="778:34" pos:end="778:35">in</name></expr></argument>, <argument pos:start="778:38" pos:end="778:41"><expr pos:start="778:38" pos:end="778:41"><name pos:start="778:38" pos:end="778:41">NULL</name></expr></argument>, <argument pos:start="778:44" pos:end="778:47"><expr pos:start="778:44" pos:end="778:47"><name pos:start="778:44" pos:end="778:47">NULL</name></expr></argument>, <argument pos:start="778:50" pos:end="778:53"><expr pos:start="778:50" pos:end="778:53"><name pos:start="778:50" pos:end="778:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="779:5" pos:end="779:28"><expr pos:start="779:5" pos:end="779:27"><call pos:start="779:5" pos:end="779:27"><name pos:start="779:5" pos:end="779:13">CU_ASSERT</name><argument_list pos:start="779:14" pos:end="779:27">(<argument pos:start="779:15" pos:end="779:26"><expr pos:start="779:15" pos:end="779:26"><name pos:start="779:15" pos:end="779:18">cert</name> <operator pos:start="779:20" pos:end="779:21">!=</operator> <name pos:start="779:23" pos:end="779:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="780:5" pos:end="781:15"><if pos:start="780:5" pos:end="781:15">if <condition pos:start="780:8" pos:end="780:14">(<expr pos:start="780:9" pos:end="780:13"><operator pos:start="780:9" pos:end="780:9">!</operator><name pos:start="780:10" pos:end="780:13">cert</name></expr>)</condition><block type="pseudo" pos:start="781:9" pos:end="781:15"><block_content pos:start="781:9" pos:end="781:15">
        <return pos:start="781:9" pos:end="781:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="782:5" pos:end="782:21"><expr pos:start="782:5" pos:end="782:20"><call pos:start="782:5" pos:end="782:20"><name pos:start="782:5" pos:end="782:16">BIO_free_all</name><argument_list pos:start="782:17" pos:end="782:20">(<argument pos:start="782:18" pos:end="782:19"><expr pos:start="782:18" pos:end="782:19"><name pos:start="782:18" pos:end="782:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="783:5" pos:end="783:19"><expr pos:start="783:5" pos:end="783:18"><call pos:start="783:5" pos:end="783:18"><name pos:start="783:5" pos:end="783:8">free</name><argument_list pos:start="783:9" pos:end="783:18">(<argument pos:start="783:10" pos:end="783:17"><expr pos:start="783:10" pos:end="783:17"><name pos:start="783:10" pos:end="783:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="785:5" pos:end="787:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="788:5" pos:end="788:62"><expr pos:start="788:5" pos:end="788:61"><name pos:start="788:5" pos:end="788:6">rv</name> <operator pos:start="788:8" pos:end="788:8">=</operator> <call pos:start="788:10" pos:end="788:61"><name pos:start="788:10" pos:end="788:32">est_client_get_csrattrs</name><argument_list pos:start="788:33" pos:end="788:61">(<argument pos:start="788:34" pos:end="788:37"><expr pos:start="788:34" pos:end="788:37"><name pos:start="788:34" pos:end="788:37">ectx</name></expr></argument>, <argument pos:start="788:40" pos:end="788:49"><expr pos:start="788:40" pos:end="788:49"><operator pos:start="788:40" pos:end="788:40">&amp;</operator><name pos:start="788:41" pos:end="788:49">attr_data</name></expr></argument>, <argument pos:start="788:52" pos:end="788:60"><expr pos:start="788:52" pos:end="788:60"><operator pos:start="788:52" pos:end="788:52">&amp;</operator><name pos:start="788:53" pos:end="788:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="789:5" pos:end="789:34"><expr pos:start="789:5" pos:end="789:33"><call pos:start="789:5" pos:end="789:33"><name pos:start="789:5" pos:end="789:13">CU_ASSERT</name><argument_list pos:start="789:14" pos:end="789:33">(<argument pos:start="789:15" pos:end="789:32"><expr pos:start="789:15" pos:end="789:32"><name pos:start="789:15" pos:end="789:16">rv</name> <operator pos:start="789:18" pos:end="789:19">==</operator> <name pos:start="789:21" pos:end="789:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="791:5" pos:end="793:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="794:5" pos:end="794:31"><expr pos:start="794:5" pos:end="794:30"><name pos:start="794:5" pos:end="794:26"><name pos:start="794:5" pos:end="794:8">ectx</name><operator pos:start="794:9" pos:end="794:10">-&gt;</operator><name pos:start="794:11" pos:end="794:26">csr_pop_required</name></name> <operator pos:start="794:28" pos:end="794:28">=</operator> <literal type="number" pos:start="794:30" pos:end="794:30">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="794:33" pos:end="794:87">//This is a hack for testing only, do not attempt this </comment>
    <comment type="line" pos:start="795:5" pos:end="795:57">//We need to force the challengePassword into the CSR</comment>
    <expr_stmt pos:start="796:5" pos:end="796:58"><expr pos:start="796:5" pos:end="796:57"><name pos:start="796:5" pos:end="796:6">rv</name> <operator pos:start="796:8" pos:end="796:8">=</operator> <call pos:start="796:10" pos:end="796:57"><name pos:start="796:10" pos:end="796:28">est_client_reenroll</name><argument_list pos:start="796:29" pos:end="796:57">(<argument pos:start="796:30" pos:end="796:33"><expr pos:start="796:30" pos:end="796:33"><name pos:start="796:30" pos:end="796:33">ectx</name></expr></argument>, <argument pos:start="796:36" pos:end="796:39"><expr pos:start="796:36" pos:end="796:39"><name pos:start="796:36" pos:end="796:39">cert</name></expr></argument>, <argument pos:start="796:42" pos:end="796:51"><expr pos:start="796:42" pos:end="796:51"><operator pos:start="796:42" pos:end="796:42">&amp;</operator><name pos:start="796:43" pos:end="796:51">pkcs7_len</name></expr></argument>, <argument pos:start="796:54" pos:end="796:56"><expr pos:start="796:54" pos:end="796:56"><name pos:start="796:54" pos:end="796:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="797:5" pos:end="797:42"><expr pos:start="797:5" pos:end="797:41"><call pos:start="797:5" pos:end="797:41"><name pos:start="797:5" pos:end="797:13">CU_ASSERT</name><argument_list pos:start="797:14" pos:end="797:41">(<argument pos:start="797:15" pos:end="797:40"><expr pos:start="797:15" pos:end="797:40"><name pos:start="797:15" pos:end="797:16">rv</name> <operator pos:start="797:18" pos:end="797:19">==</operator> <name pos:start="797:21" pos:end="797:40">EST_ERR_HTTP_BAD_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="799:5" pos:end="801:7">/*
     * Stop the proxy server
     */</comment>
    <expr_stmt pos:start="802:5" pos:end="802:20"><expr pos:start="802:5" pos:end="802:19"><call pos:start="802:5" pos:end="802:19"><name pos:start="802:5" pos:end="802:17">st_proxy_stop</name><argument_list pos:start="802:18" pos:end="802:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="804:5" pos:end="806:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="807:5" pos:end="818:27"><expr pos:start="807:5" pos:end="818:26"><name pos:start="807:5" pos:end="807:6">rv</name> <operator pos:start="807:8" pos:end="807:8">=</operator> <call pos:start="807:10" pos:end="818:26"><name pos:start="807:10" pos:end="807:23">st_proxy_start</name><argument_list pos:start="807:24" pos:end="818:26">(<argument pos:start="807:25" pos:end="807:44"><expr pos:start="807:25" pos:end="807:44"><name pos:start="807:25" pos:end="807:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="808:25" pos:end="808:40"><expr pos:start="808:25" pos:end="808:40"><name pos:start="808:25" pos:end="808:40">US893_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="809:25" pos:end="809:39"><expr pos:start="809:25" pos:end="809:39"><name pos:start="809:25" pos:end="809:39">US893_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="810:25" pos:end="810:42"><expr pos:start="810:25" pos:end="810:42"><literal type="string" pos:start="810:25" pos:end="810:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="811:25" pos:end="811:37"><expr pos:start="811:25" pos:end="811:37"><name pos:start="811:25" pos:end="811:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="812:25" pos:end="812:43"><expr pos:start="812:25" pos:end="812:43"><name pos:start="812:25" pos:end="812:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="813:25" pos:end="813:33"><expr pos:start="813:25" pos:end="813:33"><literal type="string" pos:start="813:25" pos:end="813:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="814:25" pos:end="814:32"><expr pos:start="814:25" pos:end="814:32"><literal type="string" pos:start="814:25" pos:end="814:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="815:25" pos:end="815:35"><expr pos:start="815:25" pos:end="815:35"><literal type="string" pos:start="815:25" pos:end="815:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="816:25" pos:end="816:45"><expr pos:start="816:25" pos:end="816:45"><name pos:start="816:25" pos:end="816:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="817:25" pos:end="817:25"><expr pos:start="817:25" pos:end="817:25"><literal type="number" pos:start="817:25" pos:end="817:25">0</literal></expr></argument>,
                        <argument pos:start="818:25" pos:end="818:25"><expr pos:start="818:25" pos:end="818:25"><literal type="number" pos:start="818:25" pos:end="818:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="819:5" pos:end="819:23"><expr pos:start="819:5" pos:end="819:22"><call pos:start="819:5" pos:end="819:22"><name pos:start="819:5" pos:end="819:13">CU_ASSERT</name><argument_list pos:start="819:14" pos:end="819:22">(<argument pos:start="819:15" pos:end="819:21"><expr pos:start="819:15" pos:end="819:21"><name pos:start="819:15" pos:end="819:16">rv</name> <operator pos:start="819:18" pos:end="819:19">==</operator> <literal type="number" pos:start="819:21" pos:end="819:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="821:5" pos:end="823:7">/*
     * Re-enable PoP on the server for the forthcoming test cases.
     */</comment>
    <expr_stmt pos:start="824:5" pos:end="824:20"><expr pos:start="824:5" pos:end="824:19"><call pos:start="824:5" pos:end="824:19"><name pos:start="824:5" pos:end="824:17">st_enable_pop</name><argument_list pos:start="824:18" pos:end="824:19">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="826:5" pos:end="826:22"><expr pos:start="826:5" pos:end="826:21"><call pos:start="826:5" pos:end="826:21"><name pos:start="826:5" pos:end="826:15">est_destroy</name><argument_list pos:start="826:16" pos:end="826:21">(<argument pos:start="826:17" pos:end="826:20"><expr pos:start="826:17" pos:end="826:20"><name pos:start="826:17" pos:end="826:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="829:1" pos:end="833:3">/*
 * This test case uses an existing expired cert and
 * attempts to re-enroll it.  PoP is disabled on
 * the EST server.
 */</comment>
<function pos:start="834:1" pos:end="917:1"><type pos:start="834:1" pos:end="834:11"><specifier pos:start="834:1" pos:end="834:6">static</specifier> <name pos:start="834:8" pos:end="834:11">void</name></type> <name pos:start="834:13" pos:end="834:23">us893_test8</name> <parameter_list pos:start="834:25" pos:end="834:30">(<parameter pos:start="834:26" pos:end="834:29"><decl pos:start="834:26" pos:end="834:29"><type pos:start="834:26" pos:end="834:29"><name pos:start="834:26" pos:end="834:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="835:1" pos:end="917:1">{<block_content pos:start="836:5" pos:end="916:20">
    <decl_stmt pos:start="836:5" pos:end="836:18"><decl pos:start="836:5" pos:end="836:17"><type pos:start="836:5" pos:end="836:13"><name pos:start="836:5" pos:end="836:11">EST_CTX</name> <modifier pos:start="836:13" pos:end="836:13">*</modifier></type><name pos:start="836:14" pos:end="836:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="837:5" pos:end="837:18"><decl pos:start="837:5" pos:end="837:17"><type pos:start="837:5" pos:end="837:14"><name pos:start="837:5" pos:end="837:12">EVP_PKEY</name> <modifier pos:start="837:14" pos:end="837:14">*</modifier></type><name pos:start="837:15" pos:end="837:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="838:5" pos:end="838:27"><decl pos:start="838:5" pos:end="838:26"><type pos:start="838:5" pos:end="838:19"><name pos:start="838:5" pos:end="838:12">unsigned</name> <name pos:start="838:14" pos:end="838:17">char</name> <modifier pos:start="838:19" pos:end="838:19">*</modifier></type><name pos:start="838:20" pos:end="838:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="839:5" pos:end="839:16"><decl pos:start="839:5" pos:end="839:15"><type pos:start="839:5" pos:end="839:7"><name pos:start="839:5" pos:end="839:7">int</name></type> <name pos:start="839:9" pos:end="839:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="840:5" pos:end="840:28"><decl pos:start="840:5" pos:end="840:27"><type pos:start="840:5" pos:end="840:19"><name pos:start="840:5" pos:end="840:12">unsigned</name> <name pos:start="840:14" pos:end="840:17">char</name> <modifier pos:start="840:19" pos:end="840:19">*</modifier></type><name pos:start="840:20" pos:end="840:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="841:5" pos:end="841:17"><decl pos:start="841:5" pos:end="841:16"><type pos:start="841:5" pos:end="841:7"><name pos:start="841:5" pos:end="841:7">int</name></type> <name pos:start="841:9" pos:end="841:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="842:5" pos:end="842:22"><decl pos:start="842:5" pos:end="842:21"><type pos:start="842:5" pos:end="842:10"><name pos:start="842:5" pos:end="842:8">X509</name> <modifier pos:start="842:10" pos:end="842:10">*</modifier></type><name pos:start="842:11" pos:end="842:14">cert</name> <init pos:start="842:16" pos:end="842:21">= <expr pos:start="842:18" pos:end="842:21"><name pos:start="842:18" pos:end="842:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="843:5" pos:end="843:11"><decl pos:start="843:5" pos:end="843:10"><type pos:start="843:5" pos:end="843:7"><name pos:start="843:5" pos:end="843:7">int</name></type> <name pos:start="843:9" pos:end="843:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="844:5" pos:end="844:22"><decl pos:start="844:5" pos:end="844:21"><type pos:start="844:5" pos:end="844:7"><name pos:start="844:5" pos:end="844:7">int</name></type> <name pos:start="844:9" pos:end="844:17">pkcs7_len</name> <init pos:start="844:19" pos:end="844:21">= <expr pos:start="844:21" pos:end="844:21"><literal type="number" pos:start="844:21" pos:end="844:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="845:5" pos:end="845:12"><decl pos:start="845:5" pos:end="845:11"><type pos:start="845:5" pos:end="845:9"><name pos:start="845:5" pos:end="845:7">BIO</name> <modifier pos:start="845:9" pos:end="845:9">*</modifier></type><name pos:start="845:10" pos:end="845:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="846:5" pos:end="846:36"><decl pos:start="846:5" pos:end="846:35"><type pos:start="846:5" pos:end="846:19"><name pos:start="846:5" pos:end="846:12">unsigned</name> <name pos:start="846:14" pos:end="846:17">char</name> <modifier pos:start="846:19" pos:end="846:19">*</modifier></type><name pos:start="846:20" pos:end="846:28">attr_data</name> <init pos:start="846:30" pos:end="846:35">= <expr pos:start="846:32" pos:end="846:35"><name pos:start="846:32" pos:end="846:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="847:5" pos:end="847:17"><decl pos:start="847:5" pos:end="847:16"><type pos:start="847:5" pos:end="847:7"><name pos:start="847:5" pos:end="847:7">int</name></type> <name pos:start="847:9" pos:end="847:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="849:5" pos:end="850:5"><expr pos:start="849:5" pos:end="849:15"><name pos:start="849:5" pos:end="849:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="852:5" pos:end="854:7">/*
     * Make sure PoP is disabled on the server
     */</comment>
    <expr_stmt pos:start="855:5" pos:end="855:21"><expr pos:start="855:5" pos:end="855:20"><call pos:start="855:5" pos:end="855:20"><name pos:start="855:5" pos:end="855:18">st_disable_pop</name><argument_list pos:start="855:19" pos:end="855:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="857:5" pos:end="859:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="860:5" pos:end="860:76"><expr pos:start="860:5" pos:end="860:75"><name pos:start="860:5" pos:end="860:8">ectx</name> <operator pos:start="860:10" pos:end="860:10">=</operator> <call pos:start="860:12" pos:end="860:75"><name pos:start="860:12" pos:end="860:26">est_client_init</name><argument_list pos:start="860:27" pos:end="860:75">(<argument pos:start="860:28" pos:end="860:34"><expr pos:start="860:28" pos:end="860:34"><name pos:start="860:28" pos:end="860:34">cacerts</name></expr></argument>, <argument pos:start="860:37" pos:end="860:47"><expr pos:start="860:37" pos:end="860:47"><name pos:start="860:37" pos:end="860:47">cacerts_len</name></expr></argument>, <argument pos:start="860:50" pos:end="860:68"><expr pos:start="860:50" pos:end="860:68"><name pos:start="860:50" pos:end="860:68">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="860:71" pos:end="860:74"><expr pos:start="860:71" pos:end="860:74"><name pos:start="860:71" pos:end="860:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="861:5" pos:end="861:28"><expr pos:start="861:5" pos:end="861:27"><call pos:start="861:5" pos:end="861:27"><name pos:start="861:5" pos:end="861:13">CU_ASSERT</name><argument_list pos:start="861:14" pos:end="861:27">(<argument pos:start="861:15" pos:end="861:26"><expr pos:start="861:15" pos:end="861:26"><name pos:start="861:15" pos:end="861:18">ectx</name> <operator pos:start="861:20" pos:end="861:21">!=</operator> <name pos:start="861:23" pos:end="861:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="863:5" pos:end="865:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="866:5" pos:end="866:69"><expr pos:start="866:5" pos:end="866:68"><name pos:start="866:5" pos:end="866:6">rv</name> <operator pos:start="866:8" pos:end="866:8">=</operator> <call pos:start="866:10" pos:end="866:68"><name pos:start="866:10" pos:end="866:28">est_client_set_auth</name><argument_list pos:start="866:29" pos:end="866:68">(<argument pos:start="866:30" pos:end="866:33"><expr pos:start="866:30" pos:end="866:33"><name pos:start="866:30" pos:end="866:33">ectx</name></expr></argument>, <argument pos:start="866:36" pos:end="866:44"><expr pos:start="866:36" pos:end="866:44"><name pos:start="866:36" pos:end="866:44">US893_UID</name></expr></argument>, <argument pos:start="866:47" pos:end="866:55"><expr pos:start="866:47" pos:end="866:55"><name pos:start="866:47" pos:end="866:55">US893_PWD</name></expr></argument>, <argument pos:start="866:58" pos:end="866:61"><expr pos:start="866:58" pos:end="866:61"><name pos:start="866:58" pos:end="866:61">NULL</name></expr></argument>, <argument pos:start="866:64" pos:end="866:67"><expr pos:start="866:64" pos:end="866:67"><name pos:start="866:64" pos:end="866:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="867:5" pos:end="867:34"><expr pos:start="867:5" pos:end="867:33"><call pos:start="867:5" pos:end="867:33"><name pos:start="867:5" pos:end="867:13">CU_ASSERT</name><argument_list pos:start="867:14" pos:end="867:33">(<argument pos:start="867:15" pos:end="867:32"><expr pos:start="867:15" pos:end="867:32"><name pos:start="867:15" pos:end="867:16">rv</name> <operator pos:start="867:18" pos:end="867:19">==</operator> <name pos:start="867:21" pos:end="867:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="869:5" pos:end="871:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="872:5" pos:end="872:77"><expr pos:start="872:5" pos:end="872:76"><call pos:start="872:5" pos:end="872:76"><name pos:start="872:5" pos:end="872:25">est_client_set_server</name><argument_list pos:start="872:26" pos:end="872:76">(<argument pos:start="872:27" pos:end="872:30"><expr pos:start="872:27" pos:end="872:30"><name pos:start="872:27" pos:end="872:30">ectx</name></expr></argument>, <argument pos:start="872:33" pos:end="872:47"><expr pos:start="872:33" pos:end="872:47"><name pos:start="872:33" pos:end="872:47">US893_SERVER_IP</name></expr></argument>, <argument pos:start="872:50" pos:end="872:69"><expr pos:start="872:50" pos:end="872:69"><name pos:start="872:50" pos:end="872:69">US893_TCP_PROXY_PORT</name></expr></argument>, <argument pos:start="872:72" pos:end="872:75"><expr pos:start="872:72" pos:end="872:75"><name pos:start="872:72" pos:end="872:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="874:5" pos:end="876:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="877:5" pos:end="877:60"><expr pos:start="877:5" pos:end="877:59"><name pos:start="877:5" pos:end="877:11">key_len</name> <operator pos:start="877:13" pos:end="877:13">=</operator> <call pos:start="877:15" pos:end="877:59"><name pos:start="877:15" pos:end="877:30">read_binary_file</name><argument_list pos:start="877:31" pos:end="877:59">(<argument pos:start="877:32" pos:end="877:48"><expr pos:start="877:32" pos:end="877:48"><name pos:start="877:32" pos:end="877:48">US893_EXPIRED_KEY</name></expr></argument>, <argument pos:start="877:51" pos:end="877:58"><expr pos:start="877:51" pos:end="877:58"><operator pos:start="877:51" pos:end="877:51">&amp;</operator><name pos:start="877:52" pos:end="877:58">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="878:5" pos:end="878:27"><expr pos:start="878:5" pos:end="878:26"><call pos:start="878:5" pos:end="878:26"><name pos:start="878:5" pos:end="878:13">CU_ASSERT</name><argument_list pos:start="878:14" pos:end="878:26">(<argument pos:start="878:15" pos:end="878:25"><expr pos:start="878:15" pos:end="878:25"><name pos:start="878:15" pos:end="878:21">key_len</name> <operator pos:start="878:23" pos:end="878:23">&gt;</operator> <literal type="number" pos:start="878:25" pos:end="878:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="879:5" pos:end="879:57"><expr pos:start="879:5" pos:end="879:56"><name pos:start="879:5" pos:end="879:7">key</name> <operator pos:start="879:9" pos:end="879:9">=</operator> <call pos:start="879:11" pos:end="879:56"><name pos:start="879:11" pos:end="879:22">est_load_key</name><argument_list pos:start="879:23" pos:end="879:56">(<argument pos:start="879:24" pos:end="879:30"><expr pos:start="879:24" pos:end="879:30"><name pos:start="879:24" pos:end="879:30">key_raw</name></expr></argument>, <argument pos:start="879:33" pos:end="879:39"><expr pos:start="879:33" pos:end="879:39"><name pos:start="879:33" pos:end="879:39">key_len</name></expr></argument>, <argument pos:start="879:42" pos:end="879:55"><expr pos:start="879:42" pos:end="879:55"><name pos:start="879:42" pos:end="879:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="880:5" pos:end="880:27"><expr pos:start="880:5" pos:end="880:26"><call pos:start="880:5" pos:end="880:26"><name pos:start="880:5" pos:end="880:13">CU_ASSERT</name><argument_list pos:start="880:14" pos:end="880:26">(<argument pos:start="880:15" pos:end="880:25"><expr pos:start="880:15" pos:end="880:25"><name pos:start="880:15" pos:end="880:17">key</name> <operator pos:start="880:19" pos:end="880:20">!=</operator> <name pos:start="880:22" pos:end="880:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="881:5" pos:end="881:18"><expr pos:start="881:5" pos:end="881:17"><call pos:start="881:5" pos:end="881:17"><name pos:start="881:5" pos:end="881:8">free</name><argument_list pos:start="881:9" pos:end="881:17">(<argument pos:start="881:10" pos:end="881:16"><expr pos:start="881:10" pos:end="881:16"><name pos:start="881:10" pos:end="881:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="883:5" pos:end="885:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="886:5" pos:end="886:63"><expr pos:start="886:5" pos:end="886:62"><name pos:start="886:5" pos:end="886:12">cert_len</name> <operator pos:start="886:14" pos:end="886:14">=</operator> <call pos:start="886:16" pos:end="886:62"><name pos:start="886:16" pos:end="886:31">read_binary_file</name><argument_list pos:start="886:32" pos:end="886:62">(<argument pos:start="886:33" pos:end="886:50"><expr pos:start="886:33" pos:end="886:50"><name pos:start="886:33" pos:end="886:50">US893_EXPIRED_CERT</name></expr></argument>, <argument pos:start="886:53" pos:end="886:61"><expr pos:start="886:53" pos:end="886:61"><operator pos:start="886:53" pos:end="886:53">&amp;</operator><name pos:start="886:54" pos:end="886:61">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="887:5" pos:end="887:28"><expr pos:start="887:5" pos:end="887:27"><call pos:start="887:5" pos:end="887:27"><name pos:start="887:5" pos:end="887:13">CU_ASSERT</name><argument_list pos:start="887:14" pos:end="887:27">(<argument pos:start="887:15" pos:end="887:26"><expr pos:start="887:15" pos:end="887:26"><name pos:start="887:15" pos:end="887:22">cert_len</name> <operator pos:start="887:24" pos:end="887:24">&gt;</operator> <literal type="number" pos:start="887:26" pos:end="887:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="888:5" pos:end="888:45"><expr pos:start="888:5" pos:end="888:44"><name pos:start="888:5" pos:end="888:6">in</name> <operator pos:start="888:8" pos:end="888:8">=</operator> <call pos:start="888:10" pos:end="888:44"><name pos:start="888:10" pos:end="888:24">BIO_new_mem_buf</name><argument_list pos:start="888:25" pos:end="888:44">(<argument pos:start="888:26" pos:end="888:33"><expr pos:start="888:26" pos:end="888:33"><name pos:start="888:26" pos:end="888:33">cert_raw</name></expr></argument>, <argument pos:start="888:36" pos:end="888:43"><expr pos:start="888:36" pos:end="888:43"><name pos:start="888:36" pos:end="888:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="889:5" pos:end="889:26"><expr pos:start="889:5" pos:end="889:25"><call pos:start="889:5" pos:end="889:25"><name pos:start="889:5" pos:end="889:13">CU_ASSERT</name><argument_list pos:start="889:14" pos:end="889:25">(<argument pos:start="889:15" pos:end="889:24"><expr pos:start="889:15" pos:end="889:24"><name pos:start="889:15" pos:end="889:16">in</name> <operator pos:start="889:18" pos:end="889:19">!=</operator> <name pos:start="889:21" pos:end="889:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="890:5" pos:end="891:15"><if pos:start="890:5" pos:end="891:15">if <condition pos:start="890:8" pos:end="890:12">(<expr pos:start="890:9" pos:end="890:11"><operator pos:start="890:9" pos:end="890:9">!</operator><name pos:start="890:10" pos:end="890:11">in</name></expr>)</condition><block type="pseudo" pos:start="891:9" pos:end="891:15"><block_content pos:start="891:9" pos:end="891:15">
        <return pos:start="891:9" pos:end="891:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="892:5" pos:end="892:55"><expr pos:start="892:5" pos:end="892:54"><name pos:start="892:5" pos:end="892:8">cert</name> <operator pos:start="892:10" pos:end="892:10">=</operator> <call pos:start="892:12" pos:end="892:54"><name pos:start="892:12" pos:end="892:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="892:33" pos:end="892:54">(<argument pos:start="892:34" pos:end="892:35"><expr pos:start="892:34" pos:end="892:35"><name pos:start="892:34" pos:end="892:35">in</name></expr></argument>, <argument pos:start="892:38" pos:end="892:41"><expr pos:start="892:38" pos:end="892:41"><name pos:start="892:38" pos:end="892:41">NULL</name></expr></argument>, <argument pos:start="892:44" pos:end="892:47"><expr pos:start="892:44" pos:end="892:47"><name pos:start="892:44" pos:end="892:47">NULL</name></expr></argument>, <argument pos:start="892:50" pos:end="892:53"><expr pos:start="892:50" pos:end="892:53"><name pos:start="892:50" pos:end="892:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="893:5" pos:end="893:28"><expr pos:start="893:5" pos:end="893:27"><call pos:start="893:5" pos:end="893:27"><name pos:start="893:5" pos:end="893:13">CU_ASSERT</name><argument_list pos:start="893:14" pos:end="893:27">(<argument pos:start="893:15" pos:end="893:26"><expr pos:start="893:15" pos:end="893:26"><name pos:start="893:15" pos:end="893:18">cert</name> <operator pos:start="893:20" pos:end="893:21">!=</operator> <name pos:start="893:23" pos:end="893:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="894:5" pos:end="895:15"><if pos:start="894:5" pos:end="895:15">if <condition pos:start="894:8" pos:end="894:14">(<expr pos:start="894:9" pos:end="894:13"><operator pos:start="894:9" pos:end="894:9">!</operator><name pos:start="894:10" pos:end="894:13">cert</name></expr>)</condition><block type="pseudo" pos:start="895:9" pos:end="895:15"><block_content pos:start="895:9" pos:end="895:15">
        <return pos:start="895:9" pos:end="895:15">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="896:5" pos:end="896:21"><expr pos:start="896:5" pos:end="896:20"><call pos:start="896:5" pos:end="896:20"><name pos:start="896:5" pos:end="896:16">BIO_free_all</name><argument_list pos:start="896:17" pos:end="896:20">(<argument pos:start="896:18" pos:end="896:19"><expr pos:start="896:18" pos:end="896:19"><name pos:start="896:18" pos:end="896:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="897:5" pos:end="897:19"><expr pos:start="897:5" pos:end="897:18"><call pos:start="897:5" pos:end="897:18"><name pos:start="897:5" pos:end="897:8">free</name><argument_list pos:start="897:9" pos:end="897:18">(<argument pos:start="897:10" pos:end="897:17"><expr pos:start="897:10" pos:end="897:17"><name pos:start="897:10" pos:end="897:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="899:5" pos:end="901:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="902:5" pos:end="902:62"><expr pos:start="902:5" pos:end="902:61"><name pos:start="902:5" pos:end="902:6">rv</name> <operator pos:start="902:8" pos:end="902:8">=</operator> <call pos:start="902:10" pos:end="902:61"><name pos:start="902:10" pos:end="902:32">est_client_get_csrattrs</name><argument_list pos:start="902:33" pos:end="902:61">(<argument pos:start="902:34" pos:end="902:37"><expr pos:start="902:34" pos:end="902:37"><name pos:start="902:34" pos:end="902:37">ectx</name></expr></argument>, <argument pos:start="902:40" pos:end="902:49"><expr pos:start="902:40" pos:end="902:49"><operator pos:start="902:40" pos:end="902:40">&amp;</operator><name pos:start="902:41" pos:end="902:49">attr_data</name></expr></argument>, <argument pos:start="902:52" pos:end="902:60"><expr pos:start="902:52" pos:end="902:60"><operator pos:start="902:52" pos:end="902:52">&amp;</operator><name pos:start="902:53" pos:end="902:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="903:5" pos:end="903:34"><expr pos:start="903:5" pos:end="903:33"><call pos:start="903:5" pos:end="903:33"><name pos:start="903:5" pos:end="903:13">CU_ASSERT</name><argument_list pos:start="903:14" pos:end="903:33">(<argument pos:start="903:15" pos:end="903:32"><expr pos:start="903:15" pos:end="903:32"><name pos:start="903:15" pos:end="903:16">rv</name> <operator pos:start="903:18" pos:end="903:19">==</operator> <name pos:start="903:21" pos:end="903:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="905:5" pos:end="907:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="908:5" pos:end="908:58"><expr pos:start="908:5" pos:end="908:57"><name pos:start="908:5" pos:end="908:6">rv</name> <operator pos:start="908:8" pos:end="908:8">=</operator> <call pos:start="908:10" pos:end="908:57"><name pos:start="908:10" pos:end="908:28">est_client_reenroll</name><argument_list pos:start="908:29" pos:end="908:57">(<argument pos:start="908:30" pos:end="908:33"><expr pos:start="908:30" pos:end="908:33"><name pos:start="908:30" pos:end="908:33">ectx</name></expr></argument>, <argument pos:start="908:36" pos:end="908:39"><expr pos:start="908:36" pos:end="908:39"><name pos:start="908:36" pos:end="908:39">cert</name></expr></argument>, <argument pos:start="908:42" pos:end="908:51"><expr pos:start="908:42" pos:end="908:51"><operator pos:start="908:42" pos:end="908:42">&amp;</operator><name pos:start="908:43" pos:end="908:51">pkcs7_len</name></expr></argument>, <argument pos:start="908:54" pos:end="908:56"><expr pos:start="908:54" pos:end="908:56"><name pos:start="908:54" pos:end="908:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="909:5" pos:end="909:34"><expr pos:start="909:5" pos:end="909:33"><call pos:start="909:5" pos:end="909:33"><name pos:start="909:5" pos:end="909:13">CU_ASSERT</name><argument_list pos:start="909:14" pos:end="909:33">(<argument pos:start="909:15" pos:end="909:32"><expr pos:start="909:15" pos:end="909:32"><name pos:start="909:15" pos:end="909:16">rv</name> <operator pos:start="909:18" pos:end="909:19">==</operator> <name pos:start="909:21" pos:end="909:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="911:5" pos:end="911:22"><expr pos:start="911:5" pos:end="911:21"><call pos:start="911:5" pos:end="911:21"><name pos:start="911:5" pos:end="911:15">est_destroy</name><argument_list pos:start="911:16" pos:end="911:21">(<argument pos:start="911:17" pos:end="911:20"><expr pos:start="911:17" pos:end="911:20"><name pos:start="911:17" pos:end="911:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="913:5" pos:end="915:7">/*
     * Re-enable PoP on the server for the forthcoming test cases.
     */</comment>
    <expr_stmt pos:start="916:5" pos:end="916:20"><expr pos:start="916:5" pos:end="916:19"><call pos:start="916:5" pos:end="916:19"><name pos:start="916:5" pos:end="916:17">st_enable_pop</name><argument_list pos:start="916:18" pos:end="916:19">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="919:1" pos:end="923:3">/*
 * This test case uses an existing expired cert and
 * attempts to re-enroll it.  PoP is disabled on
 * the EST server.  The CSR does not contain a PoP.
 */</comment>
<function pos:start="924:1" pos:end="953:1"><type pos:start="924:1" pos:end="924:11"><specifier pos:start="924:1" pos:end="924:6">static</specifier> <name pos:start="924:8" pos:end="924:11">void</name></type> <name pos:start="924:13" pos:end="924:23">us893_test9</name> <parameter_list pos:start="924:25" pos:end="924:30">(<parameter pos:start="924:26" pos:end="924:29"><decl pos:start="924:26" pos:end="924:29"><type pos:start="924:26" pos:end="924:29"><name pos:start="924:26" pos:end="924:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="925:1" pos:end="953:1">{<block_content pos:start="926:5" pos:end="952:20">
    <decl_stmt pos:start="926:5" pos:end="926:11"><decl pos:start="926:5" pos:end="926:10"><type pos:start="926:5" pos:end="926:7"><name pos:start="926:5" pos:end="926:7">int</name></type> <name pos:start="926:9" pos:end="926:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="928:5" pos:end="929:5"><expr pos:start="928:5" pos:end="928:15"><name pos:start="928:5" pos:end="928:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="931:5" pos:end="933:7">/*
     * Make sure PoP is disabled on the server
     */</comment>
    <expr_stmt pos:start="934:5" pos:end="934:21"><expr pos:start="934:5" pos:end="934:20"><call pos:start="934:5" pos:end="934:20"><name pos:start="934:5" pos:end="934:18">st_disable_pop</name><argument_list pos:start="934:19" pos:end="934:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="936:5" pos:end="939:7">/*
     * Use libcurl to send an enroll request.  We use libcurl
     * because it will not include the PoP.
     */</comment>
    <expr_stmt pos:start="940:5" pos:end="943:42"><expr pos:start="940:5" pos:end="943:41"><name pos:start="940:5" pos:end="940:6">rv</name> <operator pos:start="940:8" pos:end="940:8">=</operator> <call pos:start="940:10" pos:end="943:41"><name pos:start="940:10" pos:end="940:23">curl_http_post</name><argument_list pos:start="940:24" pos:end="943:41">(<argument pos:start="940:25" pos:end="940:45"><expr pos:start="940:25" pos:end="940:45"><name pos:start="940:25" pos:end="940:45">US893_REENROLL_URL_BA</name></expr></argument>, <argument pos:start="940:48" pos:end="940:62"><expr pos:start="940:48" pos:end="940:62"><name pos:start="940:48" pos:end="940:62">US893_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="941:25" pos:end="941:44"><expr pos:start="941:25" pos:end="941:44"><name pos:start="941:25" pos:end="941:44">US893_PKCS10_RSA2048</name></expr></argument>,
                        <argument pos:start="942:25" pos:end="942:41"><expr pos:start="942:25" pos:end="942:41"><name pos:start="942:25" pos:end="942:41">US893_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="942:44" pos:end="942:56"><expr pos:start="942:44" pos:end="942:56"><name pos:start="942:44" pos:end="942:56">US893_CACERTS</name></expr></argument>, <argument pos:start="942:59" pos:end="942:72"><expr pos:start="942:59" pos:end="942:72"><name pos:start="942:59" pos:end="942:72">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="943:25" pos:end="943:28"><expr pos:start="943:25" pos:end="943:28"><name pos:start="943:25" pos:end="943:28">NULL</name></expr></argument>, <argument pos:start="943:31" pos:end="943:34"><expr pos:start="943:31" pos:end="943:34"><name pos:start="943:31" pos:end="943:34">NULL</name></expr></argument>, <argument pos:start="943:37" pos:end="943:40"><expr pos:start="943:37" pos:end="943:40"><name pos:start="943:37" pos:end="943:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="944:5" pos:end="946:7">/*
     * The reenroll should work since PoP is not enabled anywhere.
     */</comment>
    <expr_stmt pos:start="947:5" pos:end="947:25"><expr pos:start="947:5" pos:end="947:24"><call pos:start="947:5" pos:end="947:24"><name pos:start="947:5" pos:end="947:13">CU_ASSERT</name><argument_list pos:start="947:14" pos:end="947:24">(<argument pos:start="947:15" pos:end="947:23"><expr pos:start="947:15" pos:end="947:23"><name pos:start="947:15" pos:end="947:16">rv</name> <operator pos:start="947:18" pos:end="947:19">==</operator> <literal type="number" pos:start="947:21" pos:end="947:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="949:5" pos:end="951:7">/*
     * Re-enable PoP on the server for the forthcoming test cases.
     */</comment>
    <expr_stmt pos:start="952:5" pos:end="952:20"><expr pos:start="952:5" pos:end="952:19"><call pos:start="952:5" pos:end="952:19"><name pos:start="952:5" pos:end="952:17">st_enable_pop</name><argument_list pos:start="952:18" pos:end="952:19">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="955:1" pos:end="959:3">/*
 * This test case uses a bad password configured on
 * the EST proxy context.  This should cause the EST
 * server to reject the reenroll request.
 */</comment>
<function pos:start="960:1" pos:end="1018:1"><type pos:start="960:1" pos:end="960:11"><specifier pos:start="960:1" pos:end="960:6">static</specifier> <name pos:start="960:8" pos:end="960:11">void</name></type> <name pos:start="960:13" pos:end="960:24">us893_test10</name> <parameter_list pos:start="960:26" pos:end="960:31">(<parameter pos:start="960:27" pos:end="960:30"><decl pos:start="960:27" pos:end="960:30"><type pos:start="960:27" pos:end="960:30"><name pos:start="960:27" pos:end="960:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="961:1" pos:end="1018:1">{<block_content pos:start="962:5" pos:end="1017:23">
    <decl_stmt pos:start="962:5" pos:end="962:11"><decl pos:start="962:5" pos:end="962:10"><type pos:start="962:5" pos:end="962:7"><name pos:start="962:5" pos:end="962:7">int</name></type> <name pos:start="962:9" pos:end="962:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="964:5" pos:end="965:5"><expr pos:start="964:5" pos:end="964:15"><name pos:start="964:5" pos:end="964:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="967:5" pos:end="970:7">/*
     * Stop the proxy server so we can restart
     * it using a different identity cert.
     */</comment>
    <expr_stmt pos:start="971:5" pos:end="971:20"><expr pos:start="971:5" pos:end="971:19"><call pos:start="971:5" pos:end="971:19"><name pos:start="971:5" pos:end="971:17">st_proxy_stop</name><argument_list pos:start="971:18" pos:end="971:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="973:5" pos:end="975:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="976:5" pos:end="987:27"><expr pos:start="976:5" pos:end="987:26"><name pos:start="976:5" pos:end="976:6">rv</name> <operator pos:start="976:8" pos:end="976:8">=</operator> <call pos:start="976:10" pos:end="987:26"><name pos:start="976:10" pos:end="976:23">st_proxy_start</name><argument_list pos:start="976:24" pos:end="987:26">(<argument pos:start="976:25" pos:end="976:44"><expr pos:start="976:25" pos:end="976:44"><name pos:start="976:25" pos:end="976:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="977:25" pos:end="977:40"><expr pos:start="977:25" pos:end="977:40"><name pos:start="977:25" pos:end="977:40">US893_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="978:25" pos:end="978:39"><expr pos:start="978:25" pos:end="978:39"><name pos:start="978:25" pos:end="978:39">US893_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="979:25" pos:end="979:42"><expr pos:start="979:25" pos:end="979:42"><literal type="string" pos:start="979:25" pos:end="979:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="980:25" pos:end="980:37"><expr pos:start="980:25" pos:end="980:37"><name pos:start="980:25" pos:end="980:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="981:25" pos:end="981:43"><expr pos:start="981:25" pos:end="981:43"><name pos:start="981:25" pos:end="981:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="982:25" pos:end="982:33"><expr pos:start="982:25" pos:end="982:33"><literal type="string" pos:start="982:25" pos:end="982:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="983:25" pos:end="983:31"><expr pos:start="983:25" pos:end="983:31"><literal type="string" pos:start="983:25" pos:end="983:31">"bogus"</literal></expr></argument>,
                        <argument pos:start="984:25" pos:end="984:35"><expr pos:start="984:25" pos:end="984:35"><literal type="string" pos:start="984:25" pos:end="984:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="985:25" pos:end="985:45"><expr pos:start="985:25" pos:end="985:45"><name pos:start="985:25" pos:end="985:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="986:25" pos:end="986:25"><expr pos:start="986:25" pos:end="986:25"><literal type="number" pos:start="986:25" pos:end="986:25">0</literal></expr></argument>,
                        <argument pos:start="987:25" pos:end="987:25"><expr pos:start="987:25" pos:end="987:25"><literal type="number" pos:start="987:25" pos:end="987:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="988:5" pos:end="988:23"><expr pos:start="988:5" pos:end="988:22"><call pos:start="988:5" pos:end="988:22"><name pos:start="988:5" pos:end="988:13">CU_ASSERT</name><argument_list pos:start="988:14" pos:end="988:22">(<argument pos:start="988:15" pos:end="988:21"><expr pos:start="988:15" pos:end="988:21"><name pos:start="988:15" pos:end="988:16">rv</name> <operator pos:start="988:18" pos:end="988:19">==</operator> <literal type="number" pos:start="988:21" pos:end="988:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="990:5" pos:end="993:42"><expr pos:start="990:5" pos:end="993:41"><name pos:start="990:5" pos:end="990:6">rv</name> <operator pos:start="990:8" pos:end="990:8">=</operator> <call pos:start="990:10" pos:end="993:41"><name pos:start="990:10" pos:end="990:23">curl_http_post</name><argument_list pos:start="990:24" pos:end="993:41">(<argument pos:start="990:25" pos:end="990:45"><expr pos:start="990:25" pos:end="990:45"><name pos:start="990:25" pos:end="990:45">US893_REENROLL_URL_BA</name></expr></argument>, <argument pos:start="990:48" pos:end="990:62"><expr pos:start="990:48" pos:end="990:62"><name pos:start="990:48" pos:end="990:62">US893_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="991:25" pos:end="991:44"><expr pos:start="991:25" pos:end="991:44"><name pos:start="991:25" pos:end="991:44">US893_PKCS10_RSA2048</name></expr></argument>,
                        <argument pos:start="992:25" pos:end="992:41"><expr pos:start="992:25" pos:end="992:41"><name pos:start="992:25" pos:end="992:41">US893_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="992:44" pos:end="992:56"><expr pos:start="992:44" pos:end="992:56"><name pos:start="992:44" pos:end="992:56">US893_CACERTS</name></expr></argument>, <argument pos:start="992:59" pos:end="992:72"><expr pos:start="992:59" pos:end="992:72"><name pos:start="992:59" pos:end="992:72">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="993:25" pos:end="993:28"><expr pos:start="993:25" pos:end="993:28"><name pos:start="993:25" pos:end="993:28">NULL</name></expr></argument>, <argument pos:start="993:31" pos:end="993:34"><expr pos:start="993:31" pos:end="993:34"><name pos:start="993:31" pos:end="993:34">NULL</name></expr></argument>, <argument pos:start="993:37" pos:end="993:40"><expr pos:start="993:37" pos:end="993:40"><name pos:start="993:37" pos:end="993:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="994:5" pos:end="994:25"><expr pos:start="994:5" pos:end="994:24"><call pos:start="994:5" pos:end="994:24"><name pos:start="994:5" pos:end="994:13">CU_ASSERT</name><argument_list pos:start="994:14" pos:end="994:24">(<argument pos:start="994:15" pos:end="994:23"><expr pos:start="994:15" pos:end="994:23"><name pos:start="994:15" pos:end="994:16">rv</name> <operator pos:start="994:18" pos:end="994:19">==</operator> <literal type="number" pos:start="994:21" pos:end="994:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block" pos:start="997:5" pos:end="999:7">/*
     * Stop the proxy server
     */</comment>
    <expr_stmt pos:start="1000:5" pos:end="1000:20"><expr pos:start="1000:5" pos:end="1000:19"><call pos:start="1000:5" pos:end="1000:19"><name pos:start="1000:5" pos:end="1000:17">st_proxy_stop</name><argument_list pos:start="1000:18" pos:end="1000:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1002:5" pos:end="1004:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="1005:5" pos:end="1016:27"><expr pos:start="1005:5" pos:end="1016:26"><name pos:start="1005:5" pos:end="1005:6">rv</name> <operator pos:start="1005:8" pos:end="1005:8">=</operator> <call pos:start="1005:10" pos:end="1016:26"><name pos:start="1005:10" pos:end="1005:23">st_proxy_start</name><argument_list pos:start="1005:24" pos:end="1016:26">(<argument pos:start="1005:25" pos:end="1005:44"><expr pos:start="1005:25" pos:end="1005:44"><name pos:start="1005:25" pos:end="1005:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="1006:25" pos:end="1006:40"><expr pos:start="1006:25" pos:end="1006:40"><name pos:start="1006:25" pos:end="1006:40">US893_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="1007:25" pos:end="1007:39"><expr pos:start="1007:25" pos:end="1007:39"><name pos:start="1007:25" pos:end="1007:39">US893_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="1008:25" pos:end="1008:42"><expr pos:start="1008:25" pos:end="1008:42"><literal type="string" pos:start="1008:25" pos:end="1008:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="1009:25" pos:end="1009:37"><expr pos:start="1009:25" pos:end="1009:37"><name pos:start="1009:25" pos:end="1009:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="1010:25" pos:end="1010:43"><expr pos:start="1010:25" pos:end="1010:43"><name pos:start="1010:25" pos:end="1010:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="1011:25" pos:end="1011:33"><expr pos:start="1011:25" pos:end="1011:33"><literal type="string" pos:start="1011:25" pos:end="1011:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="1012:25" pos:end="1012:32"><expr pos:start="1012:25" pos:end="1012:32"><literal type="string" pos:start="1012:25" pos:end="1012:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="1013:25" pos:end="1013:35"><expr pos:start="1013:25" pos:end="1013:35"><literal type="string" pos:start="1013:25" pos:end="1013:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="1014:25" pos:end="1014:45"><expr pos:start="1014:25" pos:end="1014:45"><name pos:start="1014:25" pos:end="1014:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="1015:25" pos:end="1015:25"><expr pos:start="1015:25" pos:end="1015:25"><literal type="number" pos:start="1015:25" pos:end="1015:25">0</literal></expr></argument>,
                        <argument pos:start="1016:25" pos:end="1016:25"><expr pos:start="1016:25" pos:end="1016:25"><literal type="number" pos:start="1016:25" pos:end="1016:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1017:5" pos:end="1017:23"><expr pos:start="1017:5" pos:end="1017:22"><call pos:start="1017:5" pos:end="1017:22"><name pos:start="1017:5" pos:end="1017:13">CU_ASSERT</name><argument_list pos:start="1017:14" pos:end="1017:22">(<argument pos:start="1017:15" pos:end="1017:21"><expr pos:start="1017:15" pos:end="1017:21"><name pos:start="1017:15" pos:end="1017:16">rv</name> <operator pos:start="1017:18" pos:end="1017:19">==</operator> <literal type="number" pos:start="1017:21" pos:end="1017:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="1020:1" pos:end="1120:1"><type pos:start="1020:1" pos:end="1020:11"><specifier pos:start="1020:1" pos:end="1020:6">static</specifier> <name pos:start="1020:8" pos:end="1020:11">void</name></type> <name pos:start="1020:13" pos:end="1020:24">us893_test11</name> <parameter_list pos:start="1020:26" pos:end="1020:31">(<parameter pos:start="1020:27" pos:end="1020:30"><decl pos:start="1020:27" pos:end="1020:30"><type pos:start="1020:27" pos:end="1020:30"><name pos:start="1020:27" pos:end="1020:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1021:1" pos:end="1120:1">{<block_content pos:start="1022:5" pos:end="1119:23">
    <decl_stmt pos:start="1022:5" pos:end="1022:11"><decl pos:start="1022:5" pos:end="1022:10"><type pos:start="1022:5" pos:end="1022:7"><name pos:start="1022:5" pos:end="1022:7">int</name></type> <name pos:start="1022:9" pos:end="1022:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1023:5" pos:end="1023:23"><decl pos:start="1023:5" pos:end="1023:22"><type pos:start="1023:5" pos:end="1023:8"><name pos:start="1023:5" pos:end="1023:8">long</name></type> <name pos:start="1023:10" pos:end="1023:18">http_code</name> <init pos:start="1023:20" pos:end="1023:22">= <expr pos:start="1023:22" pos:end="1023:22"><literal type="number" pos:start="1023:22" pos:end="1023:22">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1024:5" pos:end="1024:14"><decl pos:start="1024:5" pos:end="1024:13"><type pos:start="1024:5" pos:end="1024:10"><name pos:start="1024:5" pos:end="1024:8">CURL</name> <modifier pos:start="1024:10" pos:end="1024:10">*</modifier></type><name pos:start="1024:11" pos:end="1024:13">hnd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1025:5" pos:end="1025:30"><decl pos:start="1025:5" pos:end="1025:29"><type pos:start="1025:5" pos:end="1025:23"><name pos:start="1025:5" pos:end="1025:21"><name pos:start="1025:5" pos:end="1025:10">struct</name> <name pos:start="1025:12" pos:end="1025:21">curl_slist</name></name> <modifier pos:start="1025:23" pos:end="1025:23">*</modifier></type><name pos:start="1025:24" pos:end="1025:29">slist1</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1027:5" pos:end="1028:5"><expr pos:start="1027:5" pos:end="1027:15"><name pos:start="1027:5" pos:end="1027:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="1030:5" pos:end="1033:7">/*
     * Stop the proxy server so we can restart
     * it using a different identity cert.
     */</comment>
    <expr_stmt pos:start="1034:5" pos:end="1034:20"><expr pos:start="1034:5" pos:end="1034:19"><call pos:start="1034:5" pos:end="1034:19"><name pos:start="1034:5" pos:end="1034:17">st_proxy_stop</name><argument_list pos:start="1034:18" pos:end="1034:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1036:5" pos:end="1038:7">/*
     * Restart the proxy server using an untrusted cert
     */</comment>
    <expr_stmt pos:start="1039:5" pos:end="1050:27"><expr pos:start="1039:5" pos:end="1050:26"><name pos:start="1039:5" pos:end="1039:6">rv</name> <operator pos:start="1039:8" pos:end="1039:8">=</operator> <call pos:start="1039:10" pos:end="1050:26"><name pos:start="1039:10" pos:end="1039:23">st_proxy_start</name><argument_list pos:start="1039:24" pos:end="1050:26">(<argument pos:start="1039:25" pos:end="1039:44"><expr pos:start="1039:25" pos:end="1039:44"><name pos:start="1039:25" pos:end="1039:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="1040:25" pos:end="1040:44"><expr pos:start="1040:25" pos:end="1040:44"><name pos:start="1040:25" pos:end="1040:44">US893_UNTRUSTED_CERT</name></expr></argument>,
                        <argument pos:start="1041:25" pos:end="1041:43"><expr pos:start="1041:25" pos:end="1041:43"><name pos:start="1041:25" pos:end="1041:43">US893_UNTRUSTED_KEY</name></expr></argument>,
                        <argument pos:start="1042:25" pos:end="1042:42"><expr pos:start="1042:25" pos:end="1042:42"><literal type="string" pos:start="1042:25" pos:end="1042:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="1043:25" pos:end="1043:37"><expr pos:start="1043:25" pos:end="1043:37"><name pos:start="1043:25" pos:end="1043:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="1044:25" pos:end="1044:43"><expr pos:start="1044:25" pos:end="1044:43"><name pos:start="1044:25" pos:end="1044:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="1045:25" pos:end="1045:33"><expr pos:start="1045:25" pos:end="1045:33"><literal type="string" pos:start="1045:25" pos:end="1045:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="1046:25" pos:end="1046:32"><expr pos:start="1046:25" pos:end="1046:32"><literal type="string" pos:start="1046:25" pos:end="1046:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="1047:25" pos:end="1047:35"><expr pos:start="1047:25" pos:end="1047:35"><literal type="string" pos:start="1047:25" pos:end="1047:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="1048:25" pos:end="1048:45"><expr pos:start="1048:25" pos:end="1048:45"><name pos:start="1048:25" pos:end="1048:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="1049:25" pos:end="1049:25"><expr pos:start="1049:25" pos:end="1049:25"><literal type="number" pos:start="1049:25" pos:end="1049:25">0</literal></expr></argument>,
                        <argument pos:start="1050:25" pos:end="1050:25"><expr pos:start="1050:25" pos:end="1050:25"><literal type="number" pos:start="1050:25" pos:end="1050:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1051:5" pos:end="1051:23"><expr pos:start="1051:5" pos:end="1051:22"><call pos:start="1051:5" pos:end="1051:22"><name pos:start="1051:5" pos:end="1051:13">CU_ASSERT</name><argument_list pos:start="1051:14" pos:end="1051:22">(<argument pos:start="1051:15" pos:end="1051:21"><expr pos:start="1051:15" pos:end="1051:21"><name pos:start="1051:15" pos:end="1051:16">rv</name> <operator pos:start="1051:18" pos:end="1051:19">==</operator> <literal type="number" pos:start="1051:21" pos:end="1051:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1053:5" pos:end="1057:7">/*
     * We don't use the normal curl util API here because
     * we need to disable TLS peer verification for this
     * special test case.
     */</comment>
    <comment type="block" pos:start="1058:5" pos:end="1060:7">/*
     * Set the Content-Type header in the HTTP request
     */</comment>
    <expr_stmt pos:start="1061:5" pos:end="1061:18"><expr pos:start="1061:5" pos:end="1061:17"><name pos:start="1061:5" pos:end="1061:10">slist1</name> <operator pos:start="1061:12" pos:end="1061:12">=</operator> <name pos:start="1061:14" pos:end="1061:17">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1062:5" pos:end="1062:56"><expr pos:start="1062:5" pos:end="1062:55"><name pos:start="1062:5" pos:end="1062:10">slist1</name> <operator pos:start="1062:12" pos:end="1062:12">=</operator> <call pos:start="1062:14" pos:end="1062:55"><name pos:start="1062:14" pos:end="1062:30">curl_slist_append</name><argument_list pos:start="1062:31" pos:end="1062:55">(<argument pos:start="1062:32" pos:end="1062:37"><expr pos:start="1062:32" pos:end="1062:37"><name pos:start="1062:32" pos:end="1062:37">slist1</name></expr></argument>, <argument pos:start="1062:40" pos:end="1062:54"><expr pos:start="1062:40" pos:end="1062:54"><name pos:start="1062:40" pos:end="1062:54">US893_PKCS10_CT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1064:5" pos:end="1066:7">/*
     * Setup all the other fields that CURL requires
     */</comment>
    <expr_stmt pos:start="1067:5" pos:end="1067:27"><expr pos:start="1067:5" pos:end="1067:26"><name pos:start="1067:5" pos:end="1067:7">hnd</name> <operator pos:start="1067:9" pos:end="1067:9">=</operator> <call pos:start="1067:11" pos:end="1067:26"><name pos:start="1067:11" pos:end="1067:24">curl_easy_init</name><argument_list pos:start="1067:25" pos:end="1067:26">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1068:5" pos:end="1068:62"><expr pos:start="1068:5" pos:end="1068:61"><call pos:start="1068:5" pos:end="1068:61"><name pos:start="1068:5" pos:end="1068:20">curl_easy_setopt</name><argument_list pos:start="1068:21" pos:end="1068:61">(<argument pos:start="1068:22" pos:end="1068:24"><expr pos:start="1068:22" pos:end="1068:24"><name pos:start="1068:22" pos:end="1068:24">hnd</name></expr></argument>, <argument pos:start="1068:27" pos:end="1068:37"><expr pos:start="1068:27" pos:end="1068:37"><name pos:start="1068:27" pos:end="1068:37">CURLOPT_URL</name></expr></argument>, <argument pos:start="1068:40" pos:end="1068:60"><expr pos:start="1068:40" pos:end="1068:60"><name pos:start="1068:40" pos:end="1068:60">US893_REENROLL_URL_BA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1069:5" pos:end="1069:50"><expr pos:start="1069:5" pos:end="1069:49"><call pos:start="1069:5" pos:end="1069:49"><name pos:start="1069:5" pos:end="1069:20">curl_easy_setopt</name><argument_list pos:start="1069:21" pos:end="1069:49">(<argument pos:start="1069:22" pos:end="1069:24"><expr pos:start="1069:22" pos:end="1069:24"><name pos:start="1069:22" pos:end="1069:24">hnd</name></expr></argument>, <argument pos:start="1069:27" pos:end="1069:44"><expr pos:start="1069:27" pos:end="1069:44"><name pos:start="1069:27" pos:end="1069:44">CURLOPT_NOPROGRESS</name></expr></argument>, <argument pos:start="1069:47" pos:end="1069:48"><expr pos:start="1069:47" pos:end="1069:48"><literal type="number" pos:start="1069:47" pos:end="1069:48">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1070:5" pos:end="1070:62"><expr pos:start="1070:5" pos:end="1070:61"><call pos:start="1070:5" pos:end="1070:61"><name pos:start="1070:5" pos:end="1070:20">curl_easy_setopt</name><argument_list pos:start="1070:21" pos:end="1070:61">(<argument pos:start="1070:22" pos:end="1070:24"><expr pos:start="1070:22" pos:end="1070:24"><name pos:start="1070:22" pos:end="1070:24">hnd</name></expr></argument>, <argument pos:start="1070:27" pos:end="1070:41"><expr pos:start="1070:27" pos:end="1070:41"><name pos:start="1070:27" pos:end="1070:41">CURLOPT_USERPWD</name></expr></argument>, <argument pos:start="1070:44" pos:end="1070:60"><expr pos:start="1070:44" pos:end="1070:60"><name pos:start="1070:44" pos:end="1070:60">US893_UIDPWD_GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1071:5" pos:end="1071:68"><expr pos:start="1071:5" pos:end="1071:67"><call pos:start="1071:5" pos:end="1071:67"><name pos:start="1071:5" pos:end="1071:20">curl_easy_setopt</name><argument_list pos:start="1071:21" pos:end="1071:67">(<argument pos:start="1071:22" pos:end="1071:24"><expr pos:start="1071:22" pos:end="1071:24"><name pos:start="1071:22" pos:end="1071:24">hnd</name></expr></argument>, <argument pos:start="1071:27" pos:end="1071:44"><expr pos:start="1071:27" pos:end="1071:44"><name pos:start="1071:27" pos:end="1071:44">CURLOPT_POSTFIELDS</name></expr></argument>, <argument pos:start="1071:47" pos:end="1071:66"><expr pos:start="1071:47" pos:end="1071:66"><name pos:start="1071:47" pos:end="1071:66">US893_PKCS10_RSA2048</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1072:5" pos:end="1072:97"><expr pos:start="1072:5" pos:end="1072:96"><call pos:start="1072:5" pos:end="1072:96"><name pos:start="1072:5" pos:end="1072:20">curl_easy_setopt</name><argument_list pos:start="1072:21" pos:end="1072:96">(<argument pos:start="1072:22" pos:end="1072:24"><expr pos:start="1072:22" pos:end="1072:24"><name pos:start="1072:22" pos:end="1072:24">hnd</name></expr></argument>, <argument pos:start="1072:27" pos:end="1072:53"><expr pos:start="1072:27" pos:end="1072:53"><name pos:start="1072:27" pos:end="1072:53">CURLOPT_POSTFIELDSIZE_LARGE</name></expr></argument>, <argument pos:start="1072:56" pos:end="1072:95"><expr pos:start="1072:56" pos:end="1072:95"><operator pos:start="1072:56" pos:end="1072:56">(</operator><name pos:start="1072:57" pos:end="1072:66">curl_off_t</name><operator pos:start="1072:67" pos:end="1072:67">)</operator><call pos:start="1072:68" pos:end="1072:95"><name pos:start="1072:68" pos:end="1072:73">strlen</name><argument_list pos:start="1072:74" pos:end="1072:95">(<argument pos:start="1072:75" pos:end="1072:94"><expr pos:start="1072:75" pos:end="1072:94"><name pos:start="1072:75" pos:end="1072:94">US893_PKCS10_RSA2048</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1073:5" pos:end="1073:60"><expr pos:start="1073:5" pos:end="1073:59"><call pos:start="1073:5" pos:end="1073:59"><name pos:start="1073:5" pos:end="1073:20">curl_easy_setopt</name><argument_list pos:start="1073:21" pos:end="1073:59">(<argument pos:start="1073:22" pos:end="1073:24"><expr pos:start="1073:22" pos:end="1073:24"><name pos:start="1073:22" pos:end="1073:24">hnd</name></expr></argument>, <argument pos:start="1073:27" pos:end="1073:43"><expr pos:start="1073:27" pos:end="1073:43"><name pos:start="1073:27" pos:end="1073:43">CURLOPT_USERAGENT</name></expr></argument>, <argument pos:start="1073:46" pos:end="1073:58"><expr pos:start="1073:46" pos:end="1073:58"><literal type="string" pos:start="1073:46" pos:end="1073:58">"curl/7.27.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1074:5" pos:end="1074:54"><expr pos:start="1074:5" pos:end="1074:53"><call pos:start="1074:5" pos:end="1074:53"><name pos:start="1074:5" pos:end="1074:20">curl_easy_setopt</name><argument_list pos:start="1074:21" pos:end="1074:53">(<argument pos:start="1074:22" pos:end="1074:24"><expr pos:start="1074:22" pos:end="1074:24"><name pos:start="1074:22" pos:end="1074:24">hnd</name></expr></argument>, <argument pos:start="1074:27" pos:end="1074:44"><expr pos:start="1074:27" pos:end="1074:44"><name pos:start="1074:27" pos:end="1074:44">CURLOPT_HTTPHEADER</name></expr></argument>, <argument pos:start="1074:47" pos:end="1074:52"><expr pos:start="1074:47" pos:end="1074:52"><name pos:start="1074:47" pos:end="1074:52">slist1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1075:5" pos:end="1075:50"><expr pos:start="1075:5" pos:end="1075:49"><call pos:start="1075:5" pos:end="1075:49"><name pos:start="1075:5" pos:end="1075:20">curl_easy_setopt</name><argument_list pos:start="1075:21" pos:end="1075:49">(<argument pos:start="1075:22" pos:end="1075:24"><expr pos:start="1075:22" pos:end="1075:24"><name pos:start="1075:22" pos:end="1075:24">hnd</name></expr></argument>, <argument pos:start="1075:27" pos:end="1075:43"><expr pos:start="1075:27" pos:end="1075:43"><name pos:start="1075:27" pos:end="1075:43">CURLOPT_MAXREDIRS</name></expr></argument>, <argument pos:start="1075:46" pos:end="1075:48"><expr pos:start="1075:46" pos:end="1075:48"><literal type="number" pos:start="1075:46" pos:end="1075:48">50L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1076:5" pos:end="1076:54"><expr pos:start="1076:5" pos:end="1076:53"><call pos:start="1076:5" pos:end="1076:53"><name pos:start="1076:5" pos:end="1076:20">curl_easy_setopt</name><argument_list pos:start="1076:21" pos:end="1076:53">(<argument pos:start="1076:22" pos:end="1076:24"><expr pos:start="1076:22" pos:end="1076:24"><name pos:start="1076:22" pos:end="1076:24">hnd</name></expr></argument>, <argument pos:start="1076:27" pos:end="1076:48"><expr pos:start="1076:27" pos:end="1076:48"><name pos:start="1076:27" pos:end="1076:48">CURLOPT_SSL_VERIFYPEER</name></expr></argument>, <argument pos:start="1076:51" pos:end="1076:52"><expr pos:start="1076:51" pos:end="1076:52"><literal type="number" pos:start="1076:51" pos:end="1076:52">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1077:5" pos:end="1077:60"><expr pos:start="1077:5" pos:end="1077:59"><call pos:start="1077:5" pos:end="1077:59"><name pos:start="1077:5" pos:end="1077:20">curl_easy_setopt</name><argument_list pos:start="1077:21" pos:end="1077:59">(<argument pos:start="1077:22" pos:end="1077:24"><expr pos:start="1077:22" pos:end="1077:24"><name pos:start="1077:22" pos:end="1077:24">hnd</name></expr></argument>, <argument pos:start="1077:27" pos:end="1077:42"><expr pos:start="1077:27" pos:end="1077:42"><name pos:start="1077:27" pos:end="1077:42">CURLOPT_HTTPAUTH</name></expr></argument>, <argument pos:start="1077:45" pos:end="1077:58"><expr pos:start="1077:45" pos:end="1077:58"><name pos:start="1077:45" pos:end="1077:58">CURLAUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1078:5" pos:end="1078:57"><expr pos:start="1078:5" pos:end="1078:56"><call pos:start="1078:5" pos:end="1078:56"><name pos:start="1078:5" pos:end="1078:20">curl_easy_setopt</name><argument_list pos:start="1078:21" pos:end="1078:56">(<argument pos:start="1078:22" pos:end="1078:24"><expr pos:start="1078:22" pos:end="1078:24"><name pos:start="1078:22" pos:end="1078:24">hnd</name></expr></argument>, <argument pos:start="1078:27" pos:end="1078:40"><expr pos:start="1078:27" pos:end="1078:40"><name pos:start="1078:27" pos:end="1078:40">CURLOPT_CAINFO</name></expr></argument>, <argument pos:start="1078:43" pos:end="1078:55"><expr pos:start="1078:43" pos:end="1078:55"><name pos:start="1078:43" pos:end="1078:55">US893_CACERTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1079:5" pos:end="1079:47"><expr pos:start="1079:5" pos:end="1079:46"><call pos:start="1079:5" pos:end="1079:46"><name pos:start="1079:5" pos:end="1079:20">curl_easy_setopt</name><argument_list pos:start="1079:21" pos:end="1079:46">(<argument pos:start="1079:22" pos:end="1079:24"><expr pos:start="1079:22" pos:end="1079:24"><name pos:start="1079:22" pos:end="1079:24">hnd</name></expr></argument>, <argument pos:start="1079:27" pos:end="1079:41"><expr pos:start="1079:27" pos:end="1079:41"><name pos:start="1079:27" pos:end="1079:41">CURLOPT_VERBOSE</name></expr></argument>, <argument pos:start="1079:44" pos:end="1079:45"><expr pos:start="1079:44" pos:end="1079:45"><literal type="number" pos:start="1079:44" pos:end="1079:45">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1080:5" pos:end="1080:53"><expr pos:start="1080:5" pos:end="1080:52"><call pos:start="1080:5" pos:end="1080:52"><name pos:start="1080:5" pos:end="1080:20">curl_easy_setopt</name><argument_list pos:start="1080:21" pos:end="1080:52">(<argument pos:start="1080:22" pos:end="1080:24"><expr pos:start="1080:22" pos:end="1080:24"><name pos:start="1080:22" pos:end="1080:24">hnd</name></expr></argument>, <argument pos:start="1080:27" pos:end="1080:47"><expr pos:start="1080:27" pos:end="1080:47"><name pos:start="1080:27" pos:end="1080:47">CURLOPT_TCP_KEEPALIVE</name></expr></argument>, <argument pos:start="1080:50" pos:end="1080:51"><expr pos:start="1080:50" pos:end="1080:51"><literal type="number" pos:start="1080:50" pos:end="1080:51">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1081:5" pos:end="1081:52"><expr pos:start="1081:5" pos:end="1081:51"><call pos:start="1081:5" pos:end="1081:51"><name pos:start="1081:5" pos:end="1081:20">curl_easy_setopt</name><argument_list pos:start="1081:21" pos:end="1081:51">(<argument pos:start="1081:22" pos:end="1081:24"><expr pos:start="1081:22" pos:end="1081:24"><name pos:start="1081:22" pos:end="1081:24">hnd</name></expr></argument>, <argument pos:start="1081:27" pos:end="1081:46"><expr pos:start="1081:27" pos:end="1081:46"><name pos:start="1081:27" pos:end="1081:46">CURLOPT_FORBID_REUSE</name></expr></argument>, <argument pos:start="1081:49" pos:end="1081:50"><expr pos:start="1081:49" pos:end="1081:50"><literal type="number" pos:start="1081:49" pos:end="1081:50">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1083:5" pos:end="1085:7">/*
     * Issue the HTTP request
     */</comment>
    <expr_stmt pos:start="1086:5" pos:end="1086:27"><expr pos:start="1086:5" pos:end="1086:26"><call pos:start="1086:5" pos:end="1086:26"><name pos:start="1086:5" pos:end="1086:21">curl_easy_perform</name><argument_list pos:start="1086:22" pos:end="1086:26">(<argument pos:start="1086:23" pos:end="1086:25"><expr pos:start="1086:23" pos:end="1086:25"><name pos:start="1086:23" pos:end="1086:25">hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1088:5" pos:end="1090:7">/*
     * Get the HTTP reponse status code from the server
     */</comment>
    <expr_stmt pos:start="1091:5" pos:end="1091:63"><expr pos:start="1091:5" pos:end="1091:62"><call pos:start="1091:5" pos:end="1091:62"><name pos:start="1091:5" pos:end="1091:21">curl_easy_getinfo</name><argument_list pos:start="1091:22" pos:end="1091:62">(<argument pos:start="1091:23" pos:end="1091:25"><expr pos:start="1091:23" pos:end="1091:25"><name pos:start="1091:23" pos:end="1091:25">hnd</name></expr></argument>, <argument pos:start="1091:28" pos:end="1091:49"><expr pos:start="1091:28" pos:end="1091:49"><name pos:start="1091:28" pos:end="1091:49">CURLINFO_RESPONSE_CODE</name></expr></argument>, <argument pos:start="1091:52" pos:end="1091:61"><expr pos:start="1091:52" pos:end="1091:61"><operator pos:start="1091:52" pos:end="1091:52">&amp;</operator><name pos:start="1091:53" pos:end="1091:61">http_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1092:5" pos:end="1092:27"><expr pos:start="1092:5" pos:end="1092:26"><call pos:start="1092:5" pos:end="1092:26"><name pos:start="1092:5" pos:end="1092:21">curl_easy_cleanup</name><argument_list pos:start="1092:22" pos:end="1092:26">(<argument pos:start="1092:23" pos:end="1092:25"><expr pos:start="1092:23" pos:end="1092:25"><name pos:start="1092:23" pos:end="1092:25">hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1093:5" pos:end="1093:15"><expr pos:start="1093:5" pos:end="1093:14"><name pos:start="1093:5" pos:end="1093:7">hnd</name> <operator pos:start="1093:9" pos:end="1093:9">=</operator> <name pos:start="1093:11" pos:end="1093:14">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1094:5" pos:end="1094:32"><expr pos:start="1094:5" pos:end="1094:31"><call pos:start="1094:5" pos:end="1094:31"><name pos:start="1094:5" pos:end="1094:23">curl_slist_free_all</name><argument_list pos:start="1094:24" pos:end="1094:31">(<argument pos:start="1094:25" pos:end="1094:30"><expr pos:start="1094:25" pos:end="1094:30"><name pos:start="1094:25" pos:end="1094:30">slist1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1095:5" pos:end="1095:18"><expr pos:start="1095:5" pos:end="1095:17"><name pos:start="1095:5" pos:end="1095:10">slist1</name> <operator pos:start="1095:12" pos:end="1095:12">=</operator> <name pos:start="1095:14" pos:end="1095:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="1097:5" pos:end="1097:32"><expr pos:start="1097:5" pos:end="1097:31"><call pos:start="1097:5" pos:end="1097:31"><name pos:start="1097:5" pos:end="1097:13">CU_ASSERT</name><argument_list pos:start="1097:14" pos:end="1097:31">(<argument pos:start="1097:15" pos:end="1097:30"><expr pos:start="1097:15" pos:end="1097:30"><name pos:start="1097:15" pos:end="1097:23">http_code</name> <operator pos:start="1097:25" pos:end="1097:26">==</operator> <literal type="number" pos:start="1097:28" pos:end="1097:30">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1099:5" pos:end="1101:7">/*
     * Stop the proxy server
     */</comment>
    <expr_stmt pos:start="1102:5" pos:end="1102:20"><expr pos:start="1102:5" pos:end="1102:19"><call pos:start="1102:5" pos:end="1102:19"><name pos:start="1102:5" pos:end="1102:17">st_proxy_stop</name><argument_list pos:start="1102:18" pos:end="1102:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1104:5" pos:end="1106:7">/*
     * Restart the proxy server using the other cert
     */</comment>
    <expr_stmt pos:start="1107:5" pos:end="1118:27"><expr pos:start="1107:5" pos:end="1118:26"><name pos:start="1107:5" pos:end="1107:6">rv</name> <operator pos:start="1107:8" pos:end="1107:8">=</operator> <call pos:start="1107:10" pos:end="1118:26"><name pos:start="1107:10" pos:end="1107:23">st_proxy_start</name><argument_list pos:start="1107:24" pos:end="1118:26">(<argument pos:start="1107:25" pos:end="1107:44"><expr pos:start="1107:25" pos:end="1107:44"><name pos:start="1107:25" pos:end="1107:44">US893_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="1108:25" pos:end="1108:40"><expr pos:start="1108:25" pos:end="1108:40"><name pos:start="1108:25" pos:end="1108:40">US893_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="1109:25" pos:end="1109:39"><expr pos:start="1109:25" pos:end="1109:39"><name pos:start="1109:25" pos:end="1109:39">US893_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="1110:25" pos:end="1110:42"><expr pos:start="1110:25" pos:end="1110:42"><literal type="string" pos:start="1110:25" pos:end="1110:42">"US893 test realm"</literal></expr></argument>,
                        <argument pos:start="1111:25" pos:end="1111:37"><expr pos:start="1111:25" pos:end="1111:37"><name pos:start="1111:25" pos:end="1111:37">US893_CACERTS</name></expr></argument>,
                        <argument pos:start="1112:25" pos:end="1112:43"><expr pos:start="1112:25" pos:end="1112:43"><name pos:start="1112:25" pos:end="1112:43">US893_TRUSTED_CERTS</name></expr></argument>,
                        <argument pos:start="1113:25" pos:end="1113:33"><expr pos:start="1113:25" pos:end="1113:33"><literal type="string" pos:start="1113:25" pos:end="1113:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="1114:25" pos:end="1114:32"><expr pos:start="1114:25" pos:end="1114:32"><literal type="string" pos:start="1114:25" pos:end="1114:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="1115:25" pos:end="1115:35"><expr pos:start="1115:25" pos:end="1115:35"><literal type="string" pos:start="1115:25" pos:end="1115:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="1116:25" pos:end="1116:45"><expr pos:start="1116:25" pos:end="1116:45"><name pos:start="1116:25" pos:end="1116:45">US893_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="1117:25" pos:end="1117:25"><expr pos:start="1117:25" pos:end="1117:25"><literal type="number" pos:start="1117:25" pos:end="1117:25">0</literal></expr></argument>,
                        <argument pos:start="1118:25" pos:end="1118:25"><expr pos:start="1118:25" pos:end="1118:25"><literal type="number" pos:start="1118:25" pos:end="1118:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1119:5" pos:end="1119:23"><expr pos:start="1119:5" pos:end="1119:22"><call pos:start="1119:5" pos:end="1119:22"><name pos:start="1119:5" pos:end="1119:13">CU_ASSERT</name><argument_list pos:start="1119:14" pos:end="1119:22">(<argument pos:start="1119:15" pos:end="1119:21"><expr pos:start="1119:15" pos:end="1119:21"><name pos:start="1119:15" pos:end="1119:16">rv</name> <operator pos:start="1119:18" pos:end="1119:19">==</operator> <literal type="number" pos:start="1119:21" pos:end="1119:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1122:1" pos:end="1130:3">/*
 * Simple reenroll - RSA 2048
 *
 * This test case uses libcurl to test simple
 * reenroll of a 2048 bit RSA CSR.  HTTP Basic
 * authentication is used.  However, PoP is now
 * enabled on the proxy, which should cause a
 * failure since libcurl doesn't include the PoP.
 */</comment>
<function pos:start="1131:1" pos:end="1150:1"><type pos:start="1131:1" pos:end="1131:11"><specifier pos:start="1131:1" pos:end="1131:6">static</specifier> <name pos:start="1131:8" pos:end="1131:11">void</name></type> <name pos:start="1131:13" pos:end="1131:24">us893_test12</name> <parameter_list pos:start="1131:26" pos:end="1131:31">(<parameter pos:start="1131:27" pos:end="1131:30"><decl pos:start="1131:27" pos:end="1131:30"><type pos:start="1131:27" pos:end="1131:30"><name pos:start="1131:27" pos:end="1131:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1132:1" pos:end="1150:1">{<block_content pos:start="1133:5" pos:end="1149:27">
    <decl_stmt pos:start="1133:5" pos:end="1133:12"><decl pos:start="1133:5" pos:end="1133:11"><type pos:start="1133:5" pos:end="1133:8"><name pos:start="1133:5" pos:end="1133:8">long</name></type> <name pos:start="1133:10" pos:end="1133:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1135:5" pos:end="1136:5"><expr pos:start="1135:5" pos:end="1135:15"><name pos:start="1135:5" pos:end="1135:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="1138:5" pos:end="1138:26"><expr pos:start="1138:5" pos:end="1138:25"><call pos:start="1138:5" pos:end="1138:25"><name pos:start="1138:5" pos:end="1138:23">st_proxy_enable_pop</name><argument_list pos:start="1138:24" pos:end="1138:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1140:5" pos:end="1143:42"><expr pos:start="1140:5" pos:end="1143:41"><name pos:start="1140:5" pos:end="1140:6">rv</name> <operator pos:start="1140:8" pos:end="1140:8">=</operator> <call pos:start="1140:10" pos:end="1143:41"><name pos:start="1140:10" pos:end="1140:23">curl_http_post</name><argument_list pos:start="1140:24" pos:end="1143:41">(<argument pos:start="1140:25" pos:end="1140:45"><expr pos:start="1140:25" pos:end="1140:45"><name pos:start="1140:25" pos:end="1140:45">US893_REENROLL_URL_BA</name></expr></argument>, <argument pos:start="1140:48" pos:end="1140:62"><expr pos:start="1140:48" pos:end="1140:62"><name pos:start="1140:48" pos:end="1140:62">US893_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="1141:25" pos:end="1141:44"><expr pos:start="1141:25" pos:end="1141:44"><name pos:start="1141:25" pos:end="1141:44">US893_PKCS10_RSA2048</name></expr></argument>,
                        <argument pos:start="1142:25" pos:end="1142:41"><expr pos:start="1142:25" pos:end="1142:41"><name pos:start="1142:25" pos:end="1142:41">US893_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="1142:44" pos:end="1142:56"><expr pos:start="1142:44" pos:end="1142:56"><name pos:start="1142:44" pos:end="1142:56">US893_CACERTS</name></expr></argument>, <argument pos:start="1142:59" pos:end="1142:72"><expr pos:start="1142:59" pos:end="1142:72"><name pos:start="1142:59" pos:end="1142:72">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="1143:25" pos:end="1143:28"><expr pos:start="1143:25" pos:end="1143:28"><name pos:start="1143:25" pos:end="1143:28">NULL</name></expr></argument>, <argument pos:start="1143:31" pos:end="1143:34"><expr pos:start="1143:31" pos:end="1143:34"><name pos:start="1143:31" pos:end="1143:34">NULL</name></expr></argument>, <argument pos:start="1143:37" pos:end="1143:40"><expr pos:start="1143:37" pos:end="1143:40"><name pos:start="1143:37" pos:end="1143:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1144:5" pos:end="1146:7">/*
     * Should fail since the proxy will fail the PoP check
     */</comment>
    <expr_stmt pos:start="1147:5" pos:end="1147:25"><expr pos:start="1147:5" pos:end="1147:24"><call pos:start="1147:5" pos:end="1147:24"><name pos:start="1147:5" pos:end="1147:13">CU_ASSERT</name><argument_list pos:start="1147:14" pos:end="1147:24">(<argument pos:start="1147:15" pos:end="1147:23"><expr pos:start="1147:15" pos:end="1147:23"><name pos:start="1147:15" pos:end="1147:16">rv</name> <operator pos:start="1147:18" pos:end="1147:19">==</operator> <literal type="number" pos:start="1147:21" pos:end="1147:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1149:5" pos:end="1149:27"><expr pos:start="1149:5" pos:end="1149:26"><call pos:start="1149:5" pos:end="1149:26"><name pos:start="1149:5" pos:end="1149:24">st_proxy_disable_pop</name><argument_list pos:start="1149:25" pos:end="1149:26">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1152:1" pos:end="1155:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="1156:1" pos:end="1190:1"><type pos:start="1156:1" pos:end="1156:3"><name pos:start="1156:1" pos:end="1156:3">int</name></type> <name pos:start="1156:5" pos:end="1156:19">us893_add_suite</name> <parameter_list pos:start="1156:21" pos:end="1156:26">(<parameter pos:start="1156:22" pos:end="1156:25"><decl pos:start="1156:22" pos:end="1156:25"><type pos:start="1156:22" pos:end="1156:25"><name pos:start="1156:22" pos:end="1156:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1157:1" pos:end="1190:1">{<block_content pos:start="1159:5" pos:end="1190:0">
<cpp:ifdef pos:start="1158:1" pos:end="1158:17">#<cpp:directive pos:start="1158:2" pos:end="1158:6">ifdef</cpp:directive> <name pos:start="1158:8" pos:end="1158:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="1159:5" pos:end="1159:28"><decl pos:start="1159:5" pos:end="1159:27"><type pos:start="1159:5" pos:end="1159:13"><name pos:start="1159:5" pos:end="1159:13">CU_pSuite</name></type> <name pos:start="1159:15" pos:end="1159:20">pSuite</name> <init pos:start="1159:22" pos:end="1159:27">= <expr pos:start="1159:24" pos:end="1159:27"><name pos:start="1159:24" pos:end="1159:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1161:5" pos:end="1161:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="1162:5" pos:end="1164:48"><expr pos:start="1162:5" pos:end="1164:47"><name pos:start="1162:5" pos:end="1162:10">pSuite</name> <operator pos:start="1162:12" pos:end="1162:12">=</operator> <call pos:start="1162:14" pos:end="1164:47"><name pos:start="1162:14" pos:end="1162:25">CU_add_suite</name><argument_list pos:start="1162:26" pos:end="1164:47">(<argument pos:start="1162:27" pos:end="1162:52"><expr pos:start="1162:27" pos:end="1162:52"><literal type="string" pos:start="1162:27" pos:end="1162:52">"us893_proxy_simpreenroll"</literal></expr></argument>,
                           <argument pos:start="1163:28" pos:end="1163:43"><expr pos:start="1163:28" pos:end="1163:43"><name pos:start="1163:28" pos:end="1163:43">us893_init_suite</name></expr></argument>,
                           <argument pos:start="1164:28" pos:end="1164:46"><expr pos:start="1164:28" pos:end="1164:46"><name pos:start="1164:28" pos:end="1164:46">us893_destory_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1165:5" pos:end="1168:5"><if pos:start="1165:5" pos:end="1168:5">if <condition pos:start="1165:8" pos:end="1165:23">(<expr pos:start="1165:9" pos:end="1165:22"><name pos:start="1165:9" pos:end="1165:12">NULL</name> <operator pos:start="1165:14" pos:end="1165:15">==</operator> <name pos:start="1165:17" pos:end="1165:22">pSuite</name></expr>)</condition> <block pos:start="1165:25" pos:end="1168:5">{<block_content pos:start="1166:9" pos:end="1167:30">
        <expr_stmt pos:start="1166:9" pos:end="1166:30"><expr pos:start="1166:9" pos:end="1166:29"><call pos:start="1166:9" pos:end="1166:29"><name pos:start="1166:9" pos:end="1166:27">CU_cleanup_registry</name><argument_list pos:start="1166:28" pos:end="1166:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1167:9" pos:end="1167:30">return <expr pos:start="1167:16" pos:end="1167:29"><call pos:start="1167:16" pos:end="1167:29"><name pos:start="1167:16" pos:end="1167:27">CU_get_error</name><argument_list pos:start="1167:28" pos:end="1167:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1170:5" pos:end="1170:36">/* add the tests to the suite */</comment>
    <if_stmt pos:start="1171:5" pos:end="1186:5"><if pos:start="1171:5" pos:end="1186:5">if <condition pos:start="1171:8" pos:end="1182:93">(<expr pos:start="1171:9" pos:end="1182:92"><operator pos:start="1171:9" pos:end="1171:9">(</operator><name pos:start="1171:10" pos:end="1171:13">NULL</name> <operator pos:start="1171:15" pos:end="1171:16">==</operator> <call pos:start="1171:18" pos:end="1171:70"><name pos:start="1171:18" pos:end="1171:28">CU_add_test</name><argument_list pos:start="1171:29" pos:end="1171:70">(<argument pos:start="1171:30" pos:end="1171:35"><expr pos:start="1171:30" pos:end="1171:35"><name pos:start="1171:30" pos:end="1171:35">pSuite</name></expr></argument>, <argument pos:start="1171:38" pos:end="1171:56"><expr pos:start="1171:38" pos:end="1171:56"><literal type="string" pos:start="1171:38" pos:end="1171:56">"ReEnroll RSA cert"</literal></expr></argument>, <argument pos:start="1171:59" pos:end="1171:69"><expr pos:start="1171:59" pos:end="1171:69"><name pos:start="1171:59" pos:end="1171:69">us893_test1</name></expr></argument>)</argument_list></call><operator pos:start="1171:71" pos:end="1171:71">)</operator> <operator pos:start="1171:73" pos:end="1171:74">||</operator>
        <operator pos:start="1172:9" pos:end="1172:9">(</operator><name pos:start="1172:10" pos:end="1172:13">NULL</name> <operator pos:start="1172:15" pos:end="1172:16">==</operator> <call pos:start="1172:18" pos:end="1172:74"><name pos:start="1172:18" pos:end="1172:28">CU_add_test</name><argument_list pos:start="1172:29" pos:end="1172:74">(<argument pos:start="1172:30" pos:end="1172:35"><expr pos:start="1172:30" pos:end="1172:35"><name pos:start="1172:30" pos:end="1172:35">pSuite</name></expr></argument>, <argument pos:start="1172:38" pos:end="1172:60"><expr pos:start="1172:38" pos:end="1172:60"><literal type="string" pos:start="1172:38" pos:end="1172:60">"ReEnroll expired cert"</literal></expr></argument>, <argument pos:start="1172:63" pos:end="1172:73"><expr pos:start="1172:63" pos:end="1172:73"><name pos:start="1172:63" pos:end="1172:73">us893_test2</name></expr></argument>)</argument_list></call><operator pos:start="1172:75" pos:end="1172:75">)</operator> <operator pos:start="1172:77" pos:end="1172:78">||</operator>
        <operator pos:start="1173:9" pos:end="1173:9">(</operator><name pos:start="1173:10" pos:end="1173:13">NULL</name> <operator pos:start="1173:15" pos:end="1173:16">==</operator> <call pos:start="1173:18" pos:end="1173:73"><name pos:start="1173:18" pos:end="1173:28">CU_add_test</name><argument_list pos:start="1173:29" pos:end="1173:73">(<argument pos:start="1173:30" pos:end="1173:35"><expr pos:start="1173:30" pos:end="1173:35"><name pos:start="1173:30" pos:end="1173:35">pSuite</name></expr></argument>, <argument pos:start="1173:38" pos:end="1173:59"><expr pos:start="1173:38" pos:end="1173:59"><literal type="string" pos:start="1173:38" pos:end="1173:59">"ReEnroll corrupt CSR"</literal></expr></argument>, <argument pos:start="1173:62" pos:end="1173:72"><expr pos:start="1173:62" pos:end="1173:72"><name pos:start="1173:62" pos:end="1173:72">us893_test3</name></expr></argument>)</argument_list></call><operator pos:start="1173:74" pos:end="1173:74">)</operator> <operator pos:start="1173:76" pos:end="1173:77">||</operator>
        <operator pos:start="1174:9" pos:end="1174:9">(</operator><name pos:start="1174:10" pos:end="1174:13">NULL</name> <operator pos:start="1174:15" pos:end="1174:16">==</operator> <call pos:start="1174:18" pos:end="1174:91"><name pos:start="1174:18" pos:end="1174:28">CU_add_test</name><argument_list pos:start="1174:29" pos:end="1174:91">(<argument pos:start="1174:30" pos:end="1174:35"><expr pos:start="1174:30" pos:end="1174:35"><name pos:start="1174:30" pos:end="1174:35">pSuite</name></expr></argument>, <argument pos:start="1174:38" pos:end="1174:77"><expr pos:start="1174:38" pos:end="1174:77"><literal type="string" pos:start="1174:38" pos:end="1174:77">"ReEnroll expired cert with retry-after"</literal></expr></argument>, <argument pos:start="1174:80" pos:end="1174:90"><expr pos:start="1174:80" pos:end="1174:90"><name pos:start="1174:80" pos:end="1174:90">us893_test4</name></expr></argument>)</argument_list></call><operator pos:start="1174:92" pos:end="1174:92">)</operator> <operator pos:start="1174:94" pos:end="1174:95">||</operator>
        <operator pos:start="1175:9" pos:end="1175:9">(</operator><name pos:start="1175:10" pos:end="1175:13">NULL</name> <operator pos:start="1175:15" pos:end="1175:16">==</operator> <call pos:start="1175:18" pos:end="1175:95"><name pos:start="1175:18" pos:end="1175:28">CU_add_test</name><argument_list pos:start="1175:29" pos:end="1175:95">(<argument pos:start="1175:30" pos:end="1175:35"><expr pos:start="1175:30" pos:end="1175:35"><name pos:start="1175:30" pos:end="1175:35">pSuite</name></expr></argument>, <argument pos:start="1175:38" pos:end="1175:81"><expr pos:start="1175:38" pos:end="1175:81"><literal type="string" pos:start="1175:38" pos:end="1175:81">"ReEnroll no proxy id-kp-cmcRA with srv PoP"</literal></expr></argument>, <argument pos:start="1175:84" pos:end="1175:94"><expr pos:start="1175:84" pos:end="1175:94"><name pos:start="1175:84" pos:end="1175:94">us893_test5</name></expr></argument>)</argument_list></call><operator pos:start="1175:96" pos:end="1175:96">)</operator> <operator pos:start="1175:98" pos:end="1175:99">||</operator>
        <operator pos:start="1176:9" pos:end="1176:9">(</operator><name pos:start="1176:10" pos:end="1176:13">NULL</name> <operator pos:start="1176:15" pos:end="1176:16">==</operator> <call pos:start="1176:18" pos:end="1176:94"><name pos:start="1176:18" pos:end="1176:28">CU_add_test</name><argument_list pos:start="1176:29" pos:end="1176:94">(<argument pos:start="1176:30" pos:end="1176:35"><expr pos:start="1176:30" pos:end="1176:35"><name pos:start="1176:30" pos:end="1176:35">pSuite</name></expr></argument>, <argument pos:start="1176:38" pos:end="1176:80"><expr pos:start="1176:38" pos:end="1176:80"><literal type="string" pos:start="1176:38" pos:end="1176:80">"ReEnroll no proxy id-kp-cmcRA w/o srv PoP"</literal></expr></argument>, <argument pos:start="1176:83" pos:end="1176:93"><expr pos:start="1176:83" pos:end="1176:93"><name pos:start="1176:83" pos:end="1176:93">us893_test6</name></expr></argument>)</argument_list></call><operator pos:start="1176:95" pos:end="1176:95">)</operator> <operator pos:start="1176:97" pos:end="1176:98">||</operator>
        <operator pos:start="1177:9" pos:end="1177:9">(</operator><name pos:start="1177:10" pos:end="1177:13">NULL</name> <operator pos:start="1177:15" pos:end="1177:16">==</operator> <call pos:start="1177:18" pos:end="1177:102"><name pos:start="1177:18" pos:end="1177:28">CU_add_test</name><argument_list pos:start="1177:29" pos:end="1177:102">(<argument pos:start="1177:30" pos:end="1177:35"><expr pos:start="1177:30" pos:end="1177:35"><name pos:start="1177:30" pos:end="1177:35">pSuite</name></expr></argument>, <argument pos:start="1177:38" pos:end="1177:88"><expr pos:start="1177:38" pos:end="1177:88"><literal type="string" pos:start="1177:38" pos:end="1177:88">"ReEnroll no proxy id-kp-cmcRA w/o srv PoP CSR PoP"</literal></expr></argument>, <argument pos:start="1177:91" pos:end="1177:101"><expr pos:start="1177:91" pos:end="1177:101"><name pos:start="1177:91" pos:end="1177:101">us893_test7</name></expr></argument>)</argument_list></call><operator pos:start="1177:103" pos:end="1177:103">)</operator> <operator pos:start="1177:105" pos:end="1177:106">||</operator>
        <operator pos:start="1178:9" pos:end="1178:9">(</operator><name pos:start="1178:10" pos:end="1178:13">NULL</name> <operator pos:start="1178:15" pos:end="1178:16">==</operator> <call pos:start="1178:18" pos:end="1178:94"><name pos:start="1178:18" pos:end="1178:28">CU_add_test</name><argument_list pos:start="1178:29" pos:end="1178:94">(<argument pos:start="1178:30" pos:end="1178:35"><expr pos:start="1178:30" pos:end="1178:35"><name pos:start="1178:30" pos:end="1178:35">pSuite</name></expr></argument>, <argument pos:start="1178:38" pos:end="1178:80"><expr pos:start="1178:38" pos:end="1178:80"><literal type="string" pos:start="1178:38" pos:end="1178:80">"ReEnroll expired cert w/o srv PoP CSR PoP"</literal></expr></argument>, <argument pos:start="1178:83" pos:end="1178:93"><expr pos:start="1178:83" pos:end="1178:93"><name pos:start="1178:83" pos:end="1178:93">us893_test8</name></expr></argument>)</argument_list></call><operator pos:start="1178:95" pos:end="1178:95">)</operator> <operator pos:start="1178:97" pos:end="1178:98">||</operator>
        <operator pos:start="1179:9" pos:end="1179:9">(</operator><name pos:start="1179:10" pos:end="1179:13">NULL</name> <operator pos:start="1179:15" pos:end="1179:16">==</operator> <call pos:start="1179:18" pos:end="1179:97"><name pos:start="1179:18" pos:end="1179:28">CU_add_test</name><argument_list pos:start="1179:29" pos:end="1179:97">(<argument pos:start="1179:30" pos:end="1179:35"><expr pos:start="1179:30" pos:end="1179:35"><name pos:start="1179:30" pos:end="1179:35">pSuite</name></expr></argument>, <argument pos:start="1179:38" pos:end="1179:83"><expr pos:start="1179:38" pos:end="1179:83"><literal type="string" pos:start="1179:38" pos:end="1179:83">"ReEnroll expired cert w/o srv PoP no CSR PoP"</literal></expr></argument>, <argument pos:start="1179:86" pos:end="1179:96"><expr pos:start="1179:86" pos:end="1179:96"><name pos:start="1179:86" pos:end="1179:96">us893_test9</name></expr></argument>)</argument_list></call><operator pos:start="1179:98" pos:end="1179:98">)</operator> <operator pos:start="1179:100" pos:end="1179:101">||</operator>
        <operator pos:start="1180:9" pos:end="1180:9">(</operator><name pos:start="1180:10" pos:end="1180:13">NULL</name> <operator pos:start="1180:15" pos:end="1180:16">==</operator> <call pos:start="1180:18" pos:end="1180:92"><name pos:start="1180:18" pos:end="1180:28">CU_add_test</name><argument_list pos:start="1180:29" pos:end="1180:92">(<argument pos:start="1180:30" pos:end="1180:35"><expr pos:start="1180:30" pos:end="1180:35"><name pos:start="1180:30" pos:end="1180:35">pSuite</name></expr></argument>, <argument pos:start="1180:38" pos:end="1180:77"><expr pos:start="1180:38" pos:end="1180:77"><literal type="string" pos:start="1180:38" pos:end="1180:77">"ReEnroll proxy misconfigured HTTP auth"</literal></expr></argument>, <argument pos:start="1180:80" pos:end="1180:91"><expr pos:start="1180:80" pos:end="1180:91"><name pos:start="1180:80" pos:end="1180:91">us893_test10</name></expr></argument>)</argument_list></call><operator pos:start="1180:93" pos:end="1180:93">)</operator> <operator pos:start="1180:95" pos:end="1180:96">||</operator>
        <operator pos:start="1181:9" pos:end="1181:9">(</operator><name pos:start="1181:10" pos:end="1181:13">NULL</name> <operator pos:start="1181:15" pos:end="1181:16">==</operator> <call pos:start="1181:18" pos:end="1181:92"><name pos:start="1181:18" pos:end="1181:28">CU_add_test</name><argument_list pos:start="1181:29" pos:end="1181:92">(<argument pos:start="1181:30" pos:end="1181:35"><expr pos:start="1181:30" pos:end="1181:35"><name pos:start="1181:30" pos:end="1181:35">pSuite</name></expr></argument>, <argument pos:start="1181:38" pos:end="1181:77"><expr pos:start="1181:38" pos:end="1181:77"><literal type="string" pos:start="1181:38" pos:end="1181:77">"ReEnroll proxy untrusted identity cert"</literal></expr></argument>, <argument pos:start="1181:80" pos:end="1181:91"><expr pos:start="1181:80" pos:end="1181:91"><name pos:start="1181:80" pos:end="1181:91">us893_test11</name></expr></argument>)</argument_list></call><operator pos:start="1181:93" pos:end="1181:93">)</operator> <operator pos:start="1181:95" pos:end="1181:96">||</operator>
        <operator pos:start="1182:9" pos:end="1182:9">(</operator><name pos:start="1182:10" pos:end="1182:13">NULL</name> <operator pos:start="1182:15" pos:end="1182:16">==</operator> <call pos:start="1182:18" pos:end="1182:91"><name pos:start="1182:18" pos:end="1182:28">CU_add_test</name><argument_list pos:start="1182:29" pos:end="1182:91">(<argument pos:start="1182:30" pos:end="1182:35"><expr pos:start="1182:30" pos:end="1182:35"><name pos:start="1182:30" pos:end="1182:35">pSuite</name></expr></argument>, <argument pos:start="1182:38" pos:end="1182:76"><expr pos:start="1182:38" pos:end="1182:76"><literal type="string" pos:start="1182:38" pos:end="1182:76">"ReEnroll PoP enabled proxy no CSR PoP"</literal></expr></argument>, <argument pos:start="1182:79" pos:end="1182:90"><expr pos:start="1182:79" pos:end="1182:90"><name pos:start="1182:79" pos:end="1182:90">us893_test12</name></expr></argument>)</argument_list></call><operator pos:start="1182:92" pos:end="1182:92">)</operator></expr>)</condition>
    <block pos:start="1183:5" pos:end="1186:5">{<block_content pos:start="1184:8" pos:end="1185:29">
       <expr_stmt pos:start="1184:8" pos:end="1184:29"><expr pos:start="1184:8" pos:end="1184:28"><call pos:start="1184:8" pos:end="1184:28"><name pos:start="1184:8" pos:end="1184:26">CU_cleanup_registry</name><argument_list pos:start="1184:27" pos:end="1184:28">()</argument_list></call></expr>;</expr_stmt>
       <return pos:start="1185:8" pos:end="1185:29">return <expr pos:start="1185:15" pos:end="1185:28"><call pos:start="1185:15" pos:end="1185:28"><name pos:start="1185:15" pos:end="1185:26">CU_get_error</name><argument_list pos:start="1185:27" pos:end="1185:28">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1188:5" pos:end="1190:0">return <expr pos:start="1188:12" pos:end="1188:22"><name pos:start="1188:12" pos:end="1188:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1189:1" pos:end="1189:6">#<cpp:directive pos:start="1189:2" pos:end="1189:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
