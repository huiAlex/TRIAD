<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us898.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us898.c - Unit Tests for User Story 898 - Client re-enroll 
 *
 * October, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:26">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:26">&lt;est_ossl_util.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:22">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:24">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:27">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:27">&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>

<decl_stmt pos:start="26:1" pos:end="26:37"><decl pos:start="26:1" pos:end="26:36"><type pos:start="26:1" pos:end="26:22"><specifier pos:start="26:1" pos:end="26:6">static</specifier> <name pos:start="26:8" pos:end="26:15">unsigned</name> <name pos:start="26:17" pos:end="26:20">char</name> <modifier pos:start="26:22" pos:end="26:22">*</modifier></type><name pos:start="26:23" pos:end="26:29">cacerts</name> <init pos:start="26:31" pos:end="26:36">= <expr pos:start="26:33" pos:end="26:36"><name pos:start="26:33" pos:end="26:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="27:1" pos:end="65:0"><decl pos:start="27:1" pos:end="27:26"><type pos:start="27:1" pos:end="27:10"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:10">int</name></type> <name pos:start="27:12" pos:end="27:22">cacerts_len</name> <init pos:start="27:24" pos:end="27:26">= <expr pos:start="27:26" pos:end="27:26"><literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="29:1" pos:end="29:33">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:25">US898_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="29:29" pos:end="29:33">29898</cpp:value></cpp:define>
<cpp:define pos:start="30:1" pos:end="30:39">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:23"><name pos:start="30:9" pos:end="30:23">US898_SERVER_IP</name></cpp:macro>	    <cpp:value pos:start="30:29" pos:end="30:39">"127.0.0.1"</cpp:value></cpp:define>	
<cpp:define pos:start="31:1" pos:end="31:37">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">US898_UID</name></cpp:macro>	    <cpp:value pos:start="31:29" pos:end="31:37">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="32:1" pos:end="32:36">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:17"><name pos:start="32:9" pos:end="32:17">US898_PWD</name></cpp:macro>	    <cpp:value pos:start="32:29" pos:end="32:36">"estpwd"</cpp:value></cpp:define>
<cpp:ifndef pos:start="33:1" pos:end="33:13">#<cpp:directive pos:start="33:2" pos:end="33:7">ifndef</cpp:directive> <name pos:start="33:9" pos:end="33:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="34:1" pos:end="34:49">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:21"><name pos:start="34:9" pos:end="34:21">US898_CACERTS</name></cpp:macro>	    <cpp:value pos:start="34:29" pos:end="34:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="35:1" pos:end="35:49">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:25">US898_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="35:29" pos:end="35:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="36:1" pos:end="36:73">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:28"><name pos:start="36:9" pos:end="36:28">US898_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="36:32" pos:end="36:73">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>

<cpp:define pos:start="38:1" pos:end="38:51">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:26"><name pos:start="38:9" pos:end="38:26">US898_TC2_CERT_TXT</name></cpp:macro> <cpp:value pos:start="38:28" pos:end="38:51">"US898/tc2-new-cert.txt"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:56">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:26">US898_TC2_CERT_B64</name></cpp:macro> <cpp:value pos:start="39:28" pos:end="39:56">"US898/tc2-new-cert.pkcs7b64"</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:53">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:26"><name pos:start="40:9" pos:end="40:26">US898_TC2_CERT_PK7</name></cpp:macro> <cpp:value pos:start="40:28" pos:end="40:53">"US898/tc2-new-cert.pkcs7"</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:51">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:26">US898_TC2_CERT_PEM</name></cpp:macro> <cpp:value pos:start="41:28" pos:end="41:51">"US898/tc2-new-cert.pem"</cpp:value></cpp:define>

<cpp:define pos:start="43:1" pos:end="43:44">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:22">US898_TC10_CSR</name></cpp:macro>	<cpp:value pos:start="43:25" pos:end="43:44">"US898/tc10_csr.pem"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:44">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:22"><name pos:start="44:9" pos:end="44:22">US898_TC10_KEY</name></cpp:macro>	<cpp:value pos:start="44:25" pos:end="44:44">"US898/tc10_key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:45">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:23">US898_TC10_CERT</name></cpp:macro>	<cpp:value pos:start="45:25" pos:end="45:45">"US898/tc10_cert.pem"</cpp:value></cpp:define>

<cpp:define pos:start="47:1" pos:end="47:44">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:22">US898_TC11_KEY</name></cpp:macro>	<cpp:value pos:start="47:25" pos:end="47:44">"US898/tc11_key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:45">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:23"><name pos:start="48:9" pos:end="48:23">US898_TC11_CERT</name></cpp:macro>	<cpp:value pos:start="48:25" pos:end="48:45">"US898/tc11_cert.pem"</cpp:value></cpp:define>
<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>
  <cpp:define pos:start="50:3" pos:end="50:51">#<cpp:directive pos:start="50:4" pos:end="50:9">define</cpp:directive> <cpp:macro pos:start="50:11" pos:end="50:23"><name pos:start="50:11" pos:end="50:23">US898_CACERTS</name></cpp:macro>	    <cpp:value pos:start="50:29" pos:end="50:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:50">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:25">US898_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="51:29" pos:end="51:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:76">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:28"><name pos:start="52:9" pos:end="52:28">US898_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="52:32" pos:end="52:76">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>

<cpp:define pos:start="54:1" pos:end="54:52">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:26"><name pos:start="54:9" pos:end="54:26">US898_TC2_CERT_TXT</name></cpp:macro> <cpp:value pos:start="54:28" pos:end="54:52">"US898\\tc2-new-cert.txt"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:57">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:26">US898_TC2_CERT_B64</name></cpp:macro> <cpp:value pos:start="55:28" pos:end="55:57">"US898\\tc2-new-cert.pkcs7b64"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:54">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:26"><name pos:start="56:9" pos:end="56:26">US898_TC2_CERT_PK7</name></cpp:macro> <cpp:value pos:start="56:28" pos:end="56:54">"US898\\tc2-new-cert.pkcs7"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:52">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:26">US898_TC2_CERT_PEM</name></cpp:macro> <cpp:value pos:start="57:28" pos:end="57:52">"US898\\tc2-new-cert.pem"</cpp:value></cpp:define>

<cpp:define pos:start="59:1" pos:end="59:45">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:22">US898_TC10_CSR</name></cpp:macro>	<cpp:value pos:start="59:25" pos:end="59:45">"US898\\tc10_csr.pem"</cpp:value></cpp:define>
<cpp:define pos:start="60:1" pos:end="60:45">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:22"><name pos:start="60:9" pos:end="60:22">US898_TC10_KEY</name></cpp:macro>	<cpp:value pos:start="60:25" pos:end="60:45">"US898\\tc10_key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="61:1" pos:end="61:46">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:23">US898_TC10_CERT</name></cpp:macro>	<cpp:value pos:start="61:25" pos:end="61:46">"US898\\tc10_cert.pem"</cpp:value></cpp:define>

<cpp:define pos:start="63:1" pos:end="63:45">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:22">US898_TC11_KEY</name></cpp:macro>	<cpp:value pos:start="63:25" pos:end="63:45">"US898\\tc11_key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="64:1" pos:end="64:46">#<cpp:directive pos:start="64:2" pos:end="64:7">define</cpp:directive> <cpp:macro pos:start="64:9" pos:end="64:23"><name pos:start="64:9" pos:end="64:23">US898_TC11_CERT</name></cpp:macro>	<cpp:value pos:start="64:25" pos:end="64:46">"US898\\tc11_cert.pem"</cpp:value></cpp:define>

<decl_stmt pos:start="66:1" pos:end="66:48"><decl pos:start="66:1" pos:end="66:47"><type pos:start="66:1" pos:end="66:23"><specifier pos:start="66:1" pos:end="66:6">static</specifier> <name pos:start="66:8" pos:end="66:23">CRITICAL_SECTION</name></type> <name pos:start="66:25" pos:end="66:47">logger_critical_section</name></decl>;</decl_stmt>  
<function pos:start="67:1" pos:end="76:0"><type pos:start="67:1" pos:end="67:11"><specifier pos:start="67:1" pos:end="67:6">static</specifier> <name pos:start="67:8" pos:end="67:11">void</name></type> <name pos:start="67:13" pos:end="67:31">us898_logger_stderr</name> <parameter_list pos:start="67:33" pos:end="67:57">(<parameter pos:start="67:34" pos:end="67:45"><decl pos:start="67:34" pos:end="67:45"><type pos:start="67:34" pos:end="67:45"><name pos:start="67:34" pos:end="67:37">char</name> <modifier pos:start="67:39" pos:end="67:39">*</modifier></type><name pos:start="67:40" pos:end="67:45">format</name></decl></parameter>, <parameter pos:start="67:48" pos:end="67:56"><decl pos:start="67:48" pos:end="67:56"><type pos:start="67:48" pos:end="67:56"><name pos:start="67:48" pos:end="67:54">va_list</name></type> <name pos:start="67:56" pos:end="67:56">l</name></decl></parameter>)</parameter_list> 
<block pos:start="68:1" pos:end="76:0">{<block_content pos:start="69:5" pos:end="72:51">
    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><call pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:24">EnterCriticalSection</name><argument_list pos:start="69:25" pos:end="69:50">(<argument pos:start="69:26" pos:end="69:49"><expr pos:start="69:26" pos:end="69:49"><operator pos:start="69:26" pos:end="69:26">&amp;</operator><name pos:start="69:27" pos:end="69:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="70:9" pos:end="70:36"><expr pos:start="70:9" pos:end="70:35"><call pos:start="70:9" pos:end="70:35"><name pos:start="70:9" pos:end="70:16">vfprintf</name><argument_list pos:start="70:17" pos:end="70:35">(<argument pos:start="70:18" pos:end="70:23"><expr pos:start="70:18" pos:end="70:23"><name pos:start="70:18" pos:end="70:23">stderr</name></expr></argument>, <argument pos:start="70:26" pos:end="70:31"><expr pos:start="70:26" pos:end="70:31"><name pos:start="70:26" pos:end="70:31">format</name></expr></argument>, <argument pos:start="70:34" pos:end="70:34"><expr pos:start="70:34" pos:end="70:34"><name pos:start="70:34" pos:end="70:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><call pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:14">fflush</name><argument_list pos:start="71:15" pos:end="71:22">(<argument pos:start="71:16" pos:end="71:21"><expr pos:start="71:16" pos:end="71:21"><name pos:start="71:16" pos:end="71:21">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="72:5" pos:end="72:51"><expr pos:start="72:5" pos:end="72:50"><call pos:start="72:5" pos:end="72:50"><name pos:start="72:5" pos:end="72:24">LeaveCriticalSection</name><argument_list pos:start="72:25" pos:end="72:50">(<argument pos:start="72:26" pos:end="72:49"><expr pos:start="72:26" pos:end="72:49"><operator pos:start="72:26" pos:end="72:26">&amp;</operator><name pos:start="72:27" pos:end="72:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

<function pos:start="77:1" pos:end="116:1"><type pos:start="77:1" pos:end="77:11"><specifier pos:start="77:1" pos:end="77:6">static</specifier> <name pos:start="77:8" pos:end="77:11">void</name></type> <name pos:start="77:13" pos:end="77:23">us898_clean</name> <parameter_list pos:start="77:25" pos:end="77:30">(<parameter pos:start="77:26" pos:end="77:29"><decl pos:start="77:26" pos:end="77:29"><type pos:start="77:26" pos:end="77:29"><name pos:start="77:26" pos:end="77:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="78:1" pos:end="116:1">{<block_content pos:start="79:5" pos:end="116:0">
    <decl_stmt pos:start="79:5" pos:end="86:0"><decl pos:start="79:5" pos:end="79:17"><type pos:start="79:5" pos:end="79:8"><name pos:start="79:5" pos:end="79:8">char</name></type> <name pos:start="79:10" pos:end="79:17"><name pos:start="79:10" pos:end="79:12">cmd</name><index pos:start="79:13" pos:end="79:17">[<expr pos:start="79:14" pos:end="79:16"><literal type="number" pos:start="79:14" pos:end="79:16">200</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block" pos:start="81:5" pos:end="84:7">/*
     * These are all temporary files created 
     * by the various test cases.
     */</comment>
<cpp:ifndef pos:start="85:1" pos:end="85:13">#<cpp:directive pos:start="85:2" pos:end="85:7">ifndef</cpp:directive> <name pos:start="85:9" pos:end="85:13">WIN32</name></cpp:ifndef>
    <expr_stmt pos:start="86:5" pos:end="86:46"><expr pos:start="86:5" pos:end="86:45"><call pos:start="86:5" pos:end="86:45"><name pos:start="86:5" pos:end="86:11">sprintf</name><argument_list pos:start="86:12" pos:end="86:45">(<argument pos:start="86:13" pos:end="86:15"><expr pos:start="86:13" pos:end="86:15"><name pos:start="86:13" pos:end="86:15">cmd</name></expr></argument>, <argument pos:start="86:18" pos:end="86:24"><expr pos:start="86:18" pos:end="86:24"><literal type="string" pos:start="86:18" pos:end="86:24">"rm %s"</literal></expr></argument>, <argument pos:start="86:27" pos:end="86:44"><expr pos:start="86:27" pos:end="86:44"><name pos:start="86:27" pos:end="86:44">US898_TC2_CERT_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="87:5" pos:end="87:16"><expr pos:start="87:5" pos:end="87:15"><call pos:start="87:5" pos:end="87:15"><name pos:start="87:5" pos:end="87:10">system</name><argument_list pos:start="87:11" pos:end="87:15">(<argument pos:start="87:12" pos:end="87:14"><expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:46"><expr pos:start="88:5" pos:end="88:45"><call pos:start="88:5" pos:end="88:45"><name pos:start="88:5" pos:end="88:11">sprintf</name><argument_list pos:start="88:12" pos:end="88:45">(<argument pos:start="88:13" pos:end="88:15"><expr pos:start="88:13" pos:end="88:15"><name pos:start="88:13" pos:end="88:15">cmd</name></expr></argument>, <argument pos:start="88:18" pos:end="88:24"><expr pos:start="88:18" pos:end="88:24"><literal type="string" pos:start="88:18" pos:end="88:24">"rm %s"</literal></expr></argument>, <argument pos:start="88:27" pos:end="88:44"><expr pos:start="88:27" pos:end="88:44"><name pos:start="88:27" pos:end="88:44">US898_TC2_CERT_B64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><call pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:10">system</name><argument_list pos:start="89:11" pos:end="89:15">(<argument pos:start="89:12" pos:end="89:14"><expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="90:5" pos:end="90:46"><expr pos:start="90:5" pos:end="90:45"><call pos:start="90:5" pos:end="90:45"><name pos:start="90:5" pos:end="90:11">sprintf</name><argument_list pos:start="90:12" pos:end="90:45">(<argument pos:start="90:13" pos:end="90:15"><expr pos:start="90:13" pos:end="90:15"><name pos:start="90:13" pos:end="90:15">cmd</name></expr></argument>, <argument pos:start="90:18" pos:end="90:24"><expr pos:start="90:18" pos:end="90:24"><literal type="string" pos:start="90:18" pos:end="90:24">"rm %s"</literal></expr></argument>, <argument pos:start="90:27" pos:end="90:44"><expr pos:start="90:27" pos:end="90:44"><name pos:start="90:27" pos:end="90:44">US898_TC2_CERT_PK7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:16"><expr pos:start="91:5" pos:end="91:15"><call pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:10">system</name><argument_list pos:start="91:11" pos:end="91:15">(<argument pos:start="91:12" pos:end="91:14"><expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:46"><expr pos:start="92:5" pos:end="92:45"><call pos:start="92:5" pos:end="92:45"><name pos:start="92:5" pos:end="92:11">sprintf</name><argument_list pos:start="92:12" pos:end="92:45">(<argument pos:start="92:13" pos:end="92:15"><expr pos:start="92:13" pos:end="92:15"><name pos:start="92:13" pos:end="92:15">cmd</name></expr></argument>, <argument pos:start="92:18" pos:end="92:24"><expr pos:start="92:18" pos:end="92:24"><literal type="string" pos:start="92:18" pos:end="92:24">"rm %s"</literal></expr></argument>, <argument pos:start="92:27" pos:end="92:44"><expr pos:start="92:27" pos:end="92:44"><name pos:start="92:27" pos:end="92:44">US898_TC2_CERT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><call pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:10">system</name><argument_list pos:start="93:11" pos:end="93:15">(<argument pos:start="93:12" pos:end="93:14"><expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:43"><expr pos:start="94:5" pos:end="94:42"><call pos:start="94:5" pos:end="94:42"><name pos:start="94:5" pos:end="94:11">sprintf</name><argument_list pos:start="94:12" pos:end="94:42">(<argument pos:start="94:13" pos:end="94:15"><expr pos:start="94:13" pos:end="94:15"><name pos:start="94:13" pos:end="94:15">cmd</name></expr></argument>, <argument pos:start="94:18" pos:end="94:24"><expr pos:start="94:18" pos:end="94:24"><literal type="string" pos:start="94:18" pos:end="94:24">"rm %s"</literal></expr></argument>, <argument pos:start="94:27" pos:end="94:41"><expr pos:start="94:27" pos:end="94:41"><name pos:start="94:27" pos:end="94:41">US898_TC10_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:16"><expr pos:start="95:5" pos:end="95:15"><call pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:10">system</name><argument_list pos:start="95:11" pos:end="95:15">(<argument pos:start="95:12" pos:end="95:14"><expr pos:start="95:12" pos:end="95:14"><name pos:start="95:12" pos:end="95:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="96:42"><expr pos:start="96:5" pos:end="96:41"><call pos:start="96:5" pos:end="96:41"><name pos:start="96:5" pos:end="96:11">sprintf</name><argument_list pos:start="96:12" pos:end="96:41">(<argument pos:start="96:13" pos:end="96:15"><expr pos:start="96:13" pos:end="96:15"><name pos:start="96:13" pos:end="96:15">cmd</name></expr></argument>, <argument pos:start="96:18" pos:end="96:24"><expr pos:start="96:18" pos:end="96:24"><literal type="string" pos:start="96:18" pos:end="96:24">"rm %s"</literal></expr></argument>, <argument pos:start="96:27" pos:end="96:40"><expr pos:start="96:27" pos:end="96:40"><name pos:start="96:27" pos:end="96:40">US898_TC10_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="97:5" pos:end="97:16"><expr pos:start="97:5" pos:end="97:15"><call pos:start="97:5" pos:end="97:15"><name pos:start="97:5" pos:end="97:10">system</name><argument_list pos:start="97:11" pos:end="97:15">(<argument pos:start="97:12" pos:end="97:14"><expr pos:start="97:12" pos:end="97:14"><name pos:start="97:12" pos:end="97:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:42"><expr pos:start="98:5" pos:end="98:41"><call pos:start="98:5" pos:end="98:41"><name pos:start="98:5" pos:end="98:11">sprintf</name><argument_list pos:start="98:12" pos:end="98:41">(<argument pos:start="98:13" pos:end="98:15"><expr pos:start="98:13" pos:end="98:15"><name pos:start="98:13" pos:end="98:15">cmd</name></expr></argument>, <argument pos:start="98:18" pos:end="98:24"><expr pos:start="98:18" pos:end="98:24"><literal type="string" pos:start="98:18" pos:end="98:24">"rm %s"</literal></expr></argument>, <argument pos:start="98:27" pos:end="98:40"><expr pos:start="98:27" pos:end="98:40"><name pos:start="98:27" pos:end="98:40">US898_TC10_CSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="99:5" pos:end="101:0"><expr pos:start="99:5" pos:end="99:15"><call pos:start="99:5" pos:end="99:15"><name pos:start="99:5" pos:end="99:10">system</name><argument_list pos:start="99:11" pos:end="99:15">(<argument pos:start="99:12" pos:end="99:14"><expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="100:1" pos:end="100:5">#<cpp:directive pos:start="100:2" pos:end="100:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="101:5" pos:end="101:47"><expr pos:start="101:5" pos:end="101:46"><call pos:start="101:5" pos:end="101:46"><name pos:start="101:5" pos:end="101:11">sprintf</name><argument_list pos:start="101:12" pos:end="101:46">(<argument pos:start="101:13" pos:end="101:15"><expr pos:start="101:13" pos:end="101:15"><name pos:start="101:13" pos:end="101:15">cmd</name></expr></argument>, <argument pos:start="101:18" pos:end="101:25"><expr pos:start="101:18" pos:end="101:25"><literal type="string" pos:start="101:18" pos:end="101:25">"del %s"</literal></expr></argument>, <argument pos:start="101:28" pos:end="101:45"><expr pos:start="101:28" pos:end="101:45"><name pos:start="101:28" pos:end="101:45">US898_TC2_CERT_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="102:5" pos:end="102:16"><expr pos:start="102:5" pos:end="102:15"><call pos:start="102:5" pos:end="102:15"><name pos:start="102:5" pos:end="102:10">system</name><argument_list pos:start="102:11" pos:end="102:15">(<argument pos:start="102:12" pos:end="102:14"><expr pos:start="102:12" pos:end="102:14"><name pos:start="102:12" pos:end="102:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:47"><expr pos:start="103:5" pos:end="103:46"><call pos:start="103:5" pos:end="103:46"><name pos:start="103:5" pos:end="103:11">sprintf</name><argument_list pos:start="103:12" pos:end="103:46">(<argument pos:start="103:13" pos:end="103:15"><expr pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">cmd</name></expr></argument>, <argument pos:start="103:18" pos:end="103:25"><expr pos:start="103:18" pos:end="103:25"><literal type="string" pos:start="103:18" pos:end="103:25">"del %s"</literal></expr></argument>, <argument pos:start="103:28" pos:end="103:45"><expr pos:start="103:28" pos:end="103:45"><name pos:start="103:28" pos:end="103:45">US898_TC2_CERT_B64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="104:5" pos:end="104:16"><expr pos:start="104:5" pos:end="104:15"><call pos:start="104:5" pos:end="104:15"><name pos:start="104:5" pos:end="104:10">system</name><argument_list pos:start="104:11" pos:end="104:15">(<argument pos:start="104:12" pos:end="104:14"><expr pos:start="104:12" pos:end="104:14"><name pos:start="104:12" pos:end="104:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><call pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:11">sprintf</name><argument_list pos:start="105:12" pos:end="105:46">(<argument pos:start="105:13" pos:end="105:15"><expr pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">cmd</name></expr></argument>, <argument pos:start="105:18" pos:end="105:25"><expr pos:start="105:18" pos:end="105:25"><literal type="string" pos:start="105:18" pos:end="105:25">"del %s"</literal></expr></argument>, <argument pos:start="105:28" pos:end="105:45"><expr pos:start="105:28" pos:end="105:45"><name pos:start="105:28" pos:end="105:45">US898_TC2_CERT_PK7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="106:5" pos:end="106:16"><expr pos:start="106:5" pos:end="106:15"><call pos:start="106:5" pos:end="106:15"><name pos:start="106:5" pos:end="106:10">system</name><argument_list pos:start="106:11" pos:end="106:15">(<argument pos:start="106:12" pos:end="106:14"><expr pos:start="106:12" pos:end="106:14"><name pos:start="106:12" pos:end="106:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="107:5" pos:end="107:47"><expr pos:start="107:5" pos:end="107:46"><call pos:start="107:5" pos:end="107:46"><name pos:start="107:5" pos:end="107:11">sprintf</name><argument_list pos:start="107:12" pos:end="107:46">(<argument pos:start="107:13" pos:end="107:15"><expr pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">cmd</name></expr></argument>, <argument pos:start="107:18" pos:end="107:25"><expr pos:start="107:18" pos:end="107:25"><literal type="string" pos:start="107:18" pos:end="107:25">"del %s"</literal></expr></argument>, <argument pos:start="107:28" pos:end="107:45"><expr pos:start="107:28" pos:end="107:45"><name pos:start="107:28" pos:end="107:45">US898_TC2_CERT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="108:5" pos:end="108:16"><expr pos:start="108:5" pos:end="108:15"><call pos:start="108:5" pos:end="108:15"><name pos:start="108:5" pos:end="108:10">system</name><argument_list pos:start="108:11" pos:end="108:15">(<argument pos:start="108:12" pos:end="108:14"><expr pos:start="108:12" pos:end="108:14"><name pos:start="108:12" pos:end="108:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="109:44"><expr pos:start="109:5" pos:end="109:43"><call pos:start="109:5" pos:end="109:43"><name pos:start="109:5" pos:end="109:11">sprintf</name><argument_list pos:start="109:12" pos:end="109:43">(<argument pos:start="109:13" pos:end="109:15"><expr pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">cmd</name></expr></argument>, <argument pos:start="109:18" pos:end="109:25"><expr pos:start="109:18" pos:end="109:25"><literal type="string" pos:start="109:18" pos:end="109:25">"del %s"</literal></expr></argument>, <argument pos:start="109:28" pos:end="109:42"><expr pos:start="109:28" pos:end="109:42"><name pos:start="109:28" pos:end="109:42">US898_TC10_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="110:16"><expr pos:start="110:5" pos:end="110:15"><call pos:start="110:5" pos:end="110:15"><name pos:start="110:5" pos:end="110:10">system</name><argument_list pos:start="110:11" pos:end="110:15">(<argument pos:start="110:12" pos:end="110:14"><expr pos:start="110:12" pos:end="110:14"><name pos:start="110:12" pos:end="110:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="111:5" pos:end="111:43"><expr pos:start="111:5" pos:end="111:42"><call pos:start="111:5" pos:end="111:42"><name pos:start="111:5" pos:end="111:11">sprintf</name><argument_list pos:start="111:12" pos:end="111:42">(<argument pos:start="111:13" pos:end="111:15"><expr pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">cmd</name></expr></argument>, <argument pos:start="111:18" pos:end="111:25"><expr pos:start="111:18" pos:end="111:25"><literal type="string" pos:start="111:18" pos:end="111:25">"del %s"</literal></expr></argument>, <argument pos:start="111:28" pos:end="111:41"><expr pos:start="111:28" pos:end="111:41"><name pos:start="111:28" pos:end="111:41">US898_TC10_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="112:5" pos:end="112:16"><expr pos:start="112:5" pos:end="112:15"><call pos:start="112:5" pos:end="112:15"><name pos:start="112:5" pos:end="112:10">system</name><argument_list pos:start="112:11" pos:end="112:15">(<argument pos:start="112:12" pos:end="112:14"><expr pos:start="112:12" pos:end="112:14"><name pos:start="112:12" pos:end="112:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><call pos:start="113:5" pos:end="113:42"><name pos:start="113:5" pos:end="113:11">sprintf</name><argument_list pos:start="113:12" pos:end="113:42">(<argument pos:start="113:13" pos:end="113:15"><expr pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">cmd</name></expr></argument>, <argument pos:start="113:18" pos:end="113:25"><expr pos:start="113:18" pos:end="113:25"><literal type="string" pos:start="113:18" pos:end="113:25">"del %s"</literal></expr></argument>, <argument pos:start="113:28" pos:end="113:41"><expr pos:start="113:28" pos:end="113:41"><name pos:start="113:28" pos:end="113:41">US898_TC10_CSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="114:5" pos:end="116:0"><expr pos:start="114:5" pos:end="114:15"><call pos:start="114:5" pos:end="114:15"><name pos:start="114:5" pos:end="114:10">system</name><argument_list pos:start="114:11" pos:end="114:15">(<argument pos:start="114:12" pos:end="114:14"><expr pos:start="114:12" pos:end="114:14"><name pos:start="114:12" pos:end="114:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<comment type="block" pos:start="118:1" pos:end="122:3">/*
 * This starts an instance of the EST server running on
 * a separate thread.  We use this to test the
 * client side API in this module.
 */</comment>
<function pos:start="123:1" pos:end="138:1"><type pos:start="123:1" pos:end="123:10"><specifier pos:start="123:1" pos:end="123:6">static</specifier> <name pos:start="123:8" pos:end="123:10">int</name></type> <name pos:start="123:12" pos:end="123:29">us898_start_server</name> <parameter_list pos:start="123:31" pos:end="123:58">(<parameter pos:start="123:32" pos:end="123:48"><decl pos:start="123:32" pos:end="123:48"><type pos:start="123:32" pos:end="123:48"><name pos:start="123:32" pos:end="123:34">int</name></type> <name pos:start="123:36" pos:end="123:48">manual_enroll</name></decl></parameter>, <parameter pos:start="123:51" pos:end="123:57"><decl pos:start="123:51" pos:end="123:57"><type pos:start="123:51" pos:end="123:57"><name pos:start="123:51" pos:end="123:53">int</name></type> <name pos:start="123:55" pos:end="123:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="124:1" pos:end="138:1">{<block_content pos:start="125:5" pos:end="137:14">
    <decl_stmt pos:start="125:5" pos:end="125:11"><decl pos:start="125:5" pos:end="125:10"><type pos:start="125:5" pos:end="125:7"><name pos:start="125:5" pos:end="125:7">int</name></type> <name pos:start="125:9" pos:end="125:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="127:5" pos:end="136:23"><expr pos:start="127:5" pos:end="136:22"><name pos:start="127:5" pos:end="127:6">rv</name> <operator pos:start="127:8" pos:end="127:8">=</operator> <call pos:start="127:10" pos:end="136:22"><name pos:start="127:10" pos:end="127:17">st_start</name><argument_list pos:start="127:18" pos:end="136:22">(<argument pos:start="127:19" pos:end="127:35"><expr pos:start="127:19" pos:end="127:35"><name pos:start="127:19" pos:end="127:35">US898_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="128:19" pos:end="128:38"><expr pos:start="128:19" pos:end="128:38"><name pos:start="128:19" pos:end="128:38">US898_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="129:19" pos:end="129:38"><expr pos:start="129:19" pos:end="129:38"><name pos:start="129:19" pos:end="129:38">US898_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="130:19" pos:end="130:28"><expr pos:start="130:19" pos:end="130:28"><literal type="string" pos:start="130:19" pos:end="130:28">"estrealm"</literal></expr></argument>,
	          <argument pos:start="131:19" pos:end="131:31"><expr pos:start="131:19" pos:end="131:31"><name pos:start="131:19" pos:end="131:31">US898_CACERTS</name></expr></argument>,
	          <argument pos:start="132:19" pos:end="132:35"><expr pos:start="132:19" pos:end="132:35"><name pos:start="132:19" pos:end="132:35">US898_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="133:19" pos:end="133:42"><expr pos:start="133:19" pos:end="133:42"><literal type="string" pos:start="133:19" pos:end="133:42">"US898/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="134:19" pos:end="134:31"><expr pos:start="134:19" pos:end="134:31"><name pos:start="134:19" pos:end="134:31">manual_enroll</name></expr></argument>,
		  <argument pos:start="135:19" pos:end="135:19"><expr pos:start="135:19" pos:end="135:19"><literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr></argument>,
		  <argument pos:start="136:19" pos:end="136:21"><expr pos:start="136:19" pos:end="136:21"><name pos:start="136:19" pos:end="136:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="137:5" pos:end="137:14">return <expr pos:start="137:12" pos:end="137:13"><name pos:start="137:12" pos:end="137:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="140:1" pos:end="144:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="145:1" pos:end="171:1"><type pos:start="145:1" pos:end="145:10"><specifier pos:start="145:1" pos:end="145:6">static</specifier> <name pos:start="145:8" pos:end="145:10">int</name></type> <name pos:start="145:12" pos:end="145:27">us898_init_suite</name> <parameter_list pos:start="145:29" pos:end="145:34">(<parameter pos:start="145:30" pos:end="145:33"><decl pos:start="145:30" pos:end="145:33"><type pos:start="145:30" pos:end="145:33"><name pos:start="145:30" pos:end="145:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="146:1" pos:end="171:1">{<block_content pos:start="147:5" pos:end="170:14">
    <decl_stmt pos:start="147:5" pos:end="150:0"><decl pos:start="147:5" pos:end="147:10"><type pos:start="147:5" pos:end="147:7"><name pos:start="147:5" pos:end="147:7">int</name></type> <name pos:start="147:9" pos:end="147:10">rv</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="149:1" pos:end="149:12">#<cpp:directive pos:start="149:2" pos:end="149:6">ifdef</cpp:directive> <name pos:start="149:8" pos:end="149:12">WIN32</name></cpp:ifdef>
    <expr_stmt pos:start="150:5" pos:end="150:57"><expr pos:start="150:5" pos:end="150:56"><call pos:start="150:5" pos:end="150:56"><name pos:start="150:5" pos:end="150:29">InitializeCriticalSection</name> <argument_list pos:start="150:31" pos:end="150:56">(<argument pos:start="150:32" pos:end="150:55"><expr pos:start="150:32" pos:end="150:55"><operator pos:start="150:32" pos:end="150:32">&amp;</operator><name pos:start="150:33" pos:end="150:55">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="151:5" pos:end="153:0"><expr pos:start="151:5" pos:end="151:59"><call pos:start="151:5" pos:end="151:59"><name pos:start="151:5" pos:end="151:19">est_init_logger</name><argument_list pos:start="151:20" pos:end="151:59">(<argument pos:start="151:21" pos:end="151:36"><expr pos:start="151:21" pos:end="151:36"><name pos:start="151:21" pos:end="151:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="151:39" pos:end="151:58"><expr pos:start="151:39" pos:end="151:58"><operator pos:start="151:39" pos:end="151:39">&amp;</operator><name pos:start="151:40" pos:end="151:58">us898_logger_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="152:1" pos:end="152:6">#<cpp:directive pos:start="152:2" pos:end="152:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="154:5" pos:end="156:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="157:5" pos:end="157:60"><expr pos:start="157:5" pos:end="157:59"><name pos:start="157:5" pos:end="157:15">cacerts_len</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <call pos:start="157:19" pos:end="157:59"><name pos:start="157:19" pos:end="157:34">read_binary_file</name><argument_list pos:start="157:35" pos:end="157:59">(<argument pos:start="157:36" pos:end="157:48"><expr pos:start="157:36" pos:end="157:48"><name pos:start="157:36" pos:end="157:48">US898_CACERTS</name></expr></argument>, <argument pos:start="157:51" pos:end="157:58"><expr pos:start="157:51" pos:end="157:58"><operator pos:start="157:51" pos:end="157:51">&amp;</operator><name pos:start="157:52" pos:end="157:58">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="158:5" pos:end="160:5"><if pos:start="158:5" pos:end="160:5">if <condition pos:start="158:8" pos:end="158:25">(<expr pos:start="158:9" pos:end="158:24"><name pos:start="158:9" pos:end="158:19">cacerts_len</name> <operator pos:start="158:21" pos:end="158:22">&lt;=</operator> <literal type="number" pos:start="158:24" pos:end="158:24">0</literal></expr>)</condition> <block pos:start="158:27" pos:end="160:5">{<block_content pos:start="159:9" pos:end="159:17">
	<return pos:start="159:9" pos:end="159:17">return <expr pos:start="159:16" pos:end="159:16"><literal type="number" pos:start="159:16" pos:end="159:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="162:5" pos:end="162:18"><expr pos:start="162:5" pos:end="162:17"><call pos:start="162:5" pos:end="162:17"><name pos:start="162:5" pos:end="162:15">us898_clean</name><argument_list pos:start="162:16" pos:end="162:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="164:5" pos:end="167:7">/*
     * Start an instance of the EST server with 
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="168:5" pos:end="168:34"><expr pos:start="168:5" pos:end="168:33"><name pos:start="168:5" pos:end="168:6">rv</name> <operator pos:start="168:8" pos:end="168:8">=</operator> <call pos:start="168:10" pos:end="168:33"><name pos:start="168:10" pos:end="168:27">us898_start_server</name><argument_list pos:start="168:28" pos:end="168:33">(<argument pos:start="168:29" pos:end="168:29"><expr pos:start="168:29" pos:end="168:29"><literal type="number" pos:start="168:29" pos:end="168:29">0</literal></expr></argument>, <argument pos:start="168:32" pos:end="168:32"><expr pos:start="168:32" pos:end="168:32"><literal type="number" pos:start="168:32" pos:end="168:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="170:5" pos:end="170:14">return <expr pos:start="170:12" pos:end="170:13"><name pos:start="170:12" pos:end="170:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="174:1" pos:end="178:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="179:1" pos:end="184:1"><type pos:start="179:1" pos:end="179:10"><specifier pos:start="179:1" pos:end="179:6">static</specifier> <name pos:start="179:8" pos:end="179:10">int</name></type> <name pos:start="179:12" pos:end="179:30">us898_destroy_suite</name> <parameter_list pos:start="179:32" pos:end="179:37">(<parameter pos:start="179:33" pos:end="179:36"><decl pos:start="179:33" pos:end="179:36"><type pos:start="179:33" pos:end="179:36"><name pos:start="179:33" pos:end="179:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="180:1" pos:end="184:1">{<block_content pos:start="181:5" pos:end="183:13">
    <expr_stmt pos:start="181:5" pos:end="181:14"><expr pos:start="181:5" pos:end="181:13"><call pos:start="181:5" pos:end="181:13"><name pos:start="181:5" pos:end="181:11">st_stop</name><argument_list pos:start="181:12" pos:end="181:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="182:5" pos:end="182:18"><expr pos:start="182:5" pos:end="182:17"><call pos:start="182:5" pos:end="182:17"><name pos:start="182:5" pos:end="182:8">free</name><argument_list pos:start="182:9" pos:end="182:17">(<argument pos:start="182:10" pos:end="182:16"><expr pos:start="182:10" pos:end="182:16"><name pos:start="182:10" pos:end="182:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="183:5" pos:end="183:13">return <expr pos:start="183:12" pos:end="183:12"><literal type="number" pos:start="183:12" pos:end="183:12">0</literal></expr>;</return>
</block_content>}</block></function>


<function pos:start="187:1" pos:end="213:1"><type pos:start="187:1" pos:end="187:17"><specifier pos:start="187:1" pos:end="187:6">static</specifier> <name pos:start="187:8" pos:end="187:15">EVP_PKEY</name> <modifier pos:start="187:17" pos:end="187:17">*</modifier></type> <name pos:start="187:19" pos:end="187:38">generate_private_key</name> <parameter_list pos:start="187:40" pos:end="187:45">(<parameter pos:start="187:41" pos:end="187:44"><decl pos:start="187:41" pos:end="187:44"><type pos:start="187:41" pos:end="187:44"><name pos:start="187:41" pos:end="187:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="188:1" pos:end="213:1">{<block_content pos:start="189:5" pos:end="212:18">
    <decl_stmt pos:start="189:5" pos:end="189:25"><decl pos:start="189:5" pos:end="189:24"><type pos:start="189:5" pos:end="189:9"><name pos:start="189:5" pos:end="189:7">RSA</name> <modifier pos:start="189:9" pos:end="189:9">*</modifier></type><name pos:start="189:10" pos:end="189:12">rsa</name> <init pos:start="189:14" pos:end="189:24">= <expr pos:start="189:16" pos:end="189:24"><call pos:start="189:16" pos:end="189:24"><name pos:start="189:16" pos:end="189:22">RSA_new</name><argument_list pos:start="189:23" pos:end="189:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="190:5" pos:end="190:26"><decl pos:start="190:5" pos:end="190:25"><type pos:start="190:5" pos:end="190:12"><name pos:start="190:5" pos:end="190:10">BIGNUM</name> <modifier pos:start="190:12" pos:end="190:12">*</modifier></type><name pos:start="190:13" pos:end="190:14">bn</name> <init pos:start="190:16" pos:end="190:25">= <expr pos:start="190:18" pos:end="190:25"><call pos:start="190:18" pos:end="190:25"><name pos:start="190:18" pos:end="190:23">BN_new</name><argument_list pos:start="190:24" pos:end="190:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="191:5" pos:end="191:19"><decl pos:start="191:5" pos:end="191:18"><type pos:start="191:5" pos:end="191:14"><name pos:start="191:5" pos:end="191:12">EVP_PKEY</name> <modifier pos:start="191:14" pos:end="191:14">*</modifier></type><name pos:start="191:15" pos:end="191:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="193:5" pos:end="195:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="196:5" pos:end="196:29"><expr pos:start="196:5" pos:end="196:28"><call pos:start="196:5" pos:end="196:28"><name pos:start="196:5" pos:end="196:15">BN_set_word</name><argument_list pos:start="196:16" pos:end="196:28">(<argument pos:start="196:17" pos:end="196:18"><expr pos:start="196:17" pos:end="196:18"><name pos:start="196:17" pos:end="196:18">bn</name></expr></argument>, <argument pos:start="196:21" pos:end="196:27"><expr pos:start="196:21" pos:end="196:27"><literal type="number" pos:start="196:21" pos:end="196:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="197:5" pos:end="197:45"><expr pos:start="197:5" pos:end="197:44"><call pos:start="197:5" pos:end="197:44"><name pos:start="197:5" pos:end="197:23">RSA_generate_key_ex</name><argument_list pos:start="197:24" pos:end="197:44">(<argument pos:start="197:25" pos:end="197:27"><expr pos:start="197:25" pos:end="197:27"><name pos:start="197:25" pos:end="197:27">rsa</name></expr></argument>, <argument pos:start="197:30" pos:end="197:33"><expr pos:start="197:30" pos:end="197:33"><literal type="number" pos:start="197:30" pos:end="197:33">1024</literal></expr></argument>, <argument pos:start="197:36" pos:end="197:37"><expr pos:start="197:36" pos:end="197:37"><name pos:start="197:36" pos:end="197:37">bn</name></expr></argument>, <argument pos:start="197:40" pos:end="197:43"><expr pos:start="197:40" pos:end="197:43"><name pos:start="197:40" pos:end="197:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="199:5" pos:end="199:26"><expr pos:start="199:5" pos:end="199:25"><name pos:start="199:5" pos:end="199:8">pkey</name> <operator pos:start="199:10" pos:end="199:10">=</operator> <call pos:start="199:12" pos:end="199:25"><name pos:start="199:12" pos:end="199:23">EVP_PKEY_new</name><argument_list pos:start="199:24" pos:end="199:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="200:5" pos:end="203:5"><if pos:start="200:5" pos:end="203:5">if <condition pos:start="200:8" pos:end="200:19">(<expr pos:start="200:9" pos:end="200:18"><name pos:start="200:9" pos:end="200:12">pkey</name><operator pos:start="200:13" pos:end="200:14">==</operator><name pos:start="200:15" pos:end="200:18">NULL</name></expr>)</condition> <block pos:start="200:21" pos:end="203:5">{<block_content pos:start="201:9" pos:end="202:20">
        <expr_stmt pos:start="201:9" pos:end="201:71"><expr pos:start="201:9" pos:end="201:70"><call pos:start="201:9" pos:end="201:70"><name pos:start="201:9" pos:end="201:14">printf</name><argument_list pos:start="201:15" pos:end="201:70">(<argument pos:start="201:16" pos:end="201:69"><expr pos:start="201:16" pos:end="201:69"><literal type="string" pos:start="201:16" pos:end="201:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="202:9" pos:end="202:20">return <expr pos:start="202:16" pos:end="202:19"><name pos:start="202:16" pos:end="202:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="204:5" pos:end="207:5"><if pos:start="204:5" pos:end="207:5">if <condition pos:start="204:8" pos:end="204:38">(<expr pos:start="204:9" pos:end="204:37"><operator pos:start="204:9" pos:end="204:9">!</operator><call pos:start="204:10" pos:end="204:37"><name pos:start="204:10" pos:end="204:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="204:27" pos:end="204:37">(<argument pos:start="204:28" pos:end="204:31"><expr pos:start="204:28" pos:end="204:31"><name pos:start="204:28" pos:end="204:31">pkey</name></expr></argument>, <argument pos:start="204:34" pos:end="204:36"><expr pos:start="204:34" pos:end="204:36"><name pos:start="204:34" pos:end="204:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="204:40" pos:end="207:5">{<block_content pos:start="205:9" pos:end="206:20">
        <expr_stmt pos:start="205:9" pos:end="205:69"><expr pos:start="205:9" pos:end="205:68"><call pos:start="205:9" pos:end="205:68"><name pos:start="205:9" pos:end="205:14">printf</name><argument_list pos:start="205:15" pos:end="205:68">(<argument pos:start="205:16" pos:end="205:67"><expr pos:start="205:16" pos:end="205:67"><literal type="string" pos:start="205:16" pos:end="205:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="206:9" pos:end="206:20">return <expr pos:start="206:16" pos:end="206:19"><name pos:start="206:16" pos:end="206:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>        
    
    <expr_stmt pos:start="209:5" pos:end="209:18"><expr pos:start="209:5" pos:end="209:17"><call pos:start="209:5" pos:end="209:17"><name pos:start="209:5" pos:end="209:12">RSA_free</name><argument_list pos:start="209:13" pos:end="209:17">(<argument pos:start="209:14" pos:end="209:16"><expr pos:start="209:14" pos:end="209:16"><name pos:start="209:14" pos:end="209:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="210:5" pos:end="210:16"><expr pos:start="210:5" pos:end="210:15"><call pos:start="210:5" pos:end="210:15"><name pos:start="210:5" pos:end="210:11">BN_free</name><argument_list pos:start="210:12" pos:end="210:15">(<argument pos:start="210:13" pos:end="210:14"><expr pos:start="210:13" pos:end="210:14"><name pos:start="210:13" pos:end="210:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="212:5" pos:end="212:18">return <expr pos:start="212:12" pos:end="212:17"><operator pos:start="212:12" pos:end="212:12">(</operator><name pos:start="212:13" pos:end="212:16">pkey</name><operator pos:start="212:17" pos:end="212:17">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="215:1" pos:end="217:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="218:1" pos:end="248:1"><type pos:start="218:1" pos:end="218:10"><specifier pos:start="218:1" pos:end="218:6">static</specifier> <name pos:start="218:8" pos:end="218:10">int</name></type> <name pos:start="218:12" pos:end="218:36">client_manual_cert_verify</name><parameter_list pos:start="218:37" pos:end="218:76">(<parameter pos:start="218:38" pos:end="218:51"><decl pos:start="218:38" pos:end="218:51"><type pos:start="218:38" pos:end="218:51"><name pos:start="218:38" pos:end="218:41">X509</name> <modifier pos:start="218:43" pos:end="218:43">*</modifier></type><name pos:start="218:44" pos:end="218:51">cur_cert</name></decl></parameter>, <parameter pos:start="218:54" pos:end="218:75"><decl pos:start="218:54" pos:end="218:75"><type pos:start="218:54" pos:end="218:75"><name pos:start="218:54" pos:end="218:56">int</name></type> <name pos:start="218:58" pos:end="218:75">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="219:1" pos:end="248:1">{<block_content pos:start="220:5" pos:end="247:19">
    <decl_stmt pos:start="220:5" pos:end="220:17"><decl pos:start="220:5" pos:end="220:16"><type pos:start="220:5" pos:end="220:9"><name pos:start="220:5" pos:end="220:7">BIO</name> <modifier pos:start="220:9" pos:end="220:9">*</modifier></type><name pos:start="220:10" pos:end="220:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="221:5" pos:end="221:43"><expr pos:start="221:5" pos:end="221:42"><name pos:start="221:5" pos:end="221:11">bio_err</name><operator pos:start="221:12" pos:end="221:12">=</operator><call pos:start="221:13" pos:end="221:42"><name pos:start="221:13" pos:end="221:22">BIO_new_fp</name><argument_list pos:start="221:23" pos:end="221:42">(<argument pos:start="221:24" pos:end="221:29"><expr pos:start="221:24" pos:end="221:29"><name pos:start="221:24" pos:end="221:29">stderr</name></expr></argument>,<argument pos:start="221:31" pos:end="221:41"><expr pos:start="221:31" pos:end="221:41"><name pos:start="221:31" pos:end="221:41">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="222:5" pos:end="222:20"><decl pos:start="222:5" pos:end="222:19"><type pos:start="222:5" pos:end="222:7"><name pos:start="222:5" pos:end="222:7">int</name></type> <name pos:start="222:9" pos:end="222:15">approve</name> <init pos:start="222:17" pos:end="222:19">= <expr pos:start="222:19" pos:end="222:19"><literal type="number" pos:start="222:19" pos:end="222:19">0</literal></expr></init></decl>;</decl_stmt> 

    <if_stmt pos:start="224:5" pos:end="226:5"><if pos:start="224:5" pos:end="226:5">if <condition pos:start="224:8" pos:end="224:59">(<expr pos:start="224:9" pos:end="224:58"><name pos:start="224:9" pos:end="224:26">openssl_cert_error</name> <operator pos:start="224:28" pos:end="224:29">==</operator> <name pos:start="224:31" pos:end="224:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="224:61" pos:end="226:5">{<block_content pos:start="225:9" pos:end="225:19">
        <return pos:start="225:9" pos:end="225:19">return <expr pos:start="225:16" pos:end="225:18"><operator pos:start="225:16" pos:end="225:16">(</operator><literal type="number" pos:start="225:17" pos:end="225:17">1</literal><operator pos:start="225:18" pos:end="225:18">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block" pos:start="228:5" pos:end="230:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="231:5" pos:end="233:62"><expr pos:start="231:5" pos:end="233:61"><call pos:start="231:5" pos:end="233:61"><name pos:start="231:5" pos:end="231:10">printf</name><argument_list pos:start="231:11" pos:end="233:61">(<argument pos:start="231:12" pos:end="231:117"><expr pos:start="231:12" pos:end="231:117"><literal type="string" pos:start="231:12" pos:end="231:117">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
           <argument pos:start="232:12" pos:end="232:23"><expr pos:start="232:12" pos:end="232:23"><name pos:start="232:12" pos:end="232:23">__FUNCTION__</name></expr></argument>, <argument pos:start="232:26" pos:end="232:43"><expr pos:start="232:26" pos:end="232:43"><name pos:start="232:26" pos:end="232:43">openssl_cert_error</name></expr></argument>,
           <argument pos:start="233:12" pos:end="233:60"><expr pos:start="233:12" pos:end="233:60"><call pos:start="233:12" pos:end="233:60"><name pos:start="233:12" pos:end="233:40">X509_verify_cert_error_string</name><argument_list pos:start="233:41" pos:end="233:60">(<argument pos:start="233:42" pos:end="233:59"><expr pos:start="233:42" pos:end="233:59"><name pos:start="233:42" pos:end="233:59">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="235:5" pos:end="235:30"><expr pos:start="235:5" pos:end="235:29"><call pos:start="235:5" pos:end="235:29"><name pos:start="235:5" pos:end="235:10">printf</name><argument_list pos:start="235:11" pos:end="235:29">(<argument pos:start="235:12" pos:end="235:28"><expr pos:start="235:12" pos:end="235:28"><literal type="string" pos:start="235:12" pos:end="235:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="236:5" pos:end="236:35"><expr pos:start="236:5" pos:end="236:34"><call pos:start="236:5" pos:end="236:34"><name pos:start="236:5" pos:end="236:17">X509_print_fp</name><argument_list pos:start="236:18" pos:end="236:34">(<argument pos:start="236:19" pos:end="236:24"><expr pos:start="236:19" pos:end="236:24"><name pos:start="236:19" pos:end="236:24">stdout</name></expr></argument>,<argument pos:start="236:26" pos:end="236:33"><expr pos:start="236:26" pos:end="236:33"><name pos:start="236:26" pos:end="236:33">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="237:5" pos:end="241:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
<comment type="line" pos:start="242:1" pos:end="242:76">//    X509_signature_print(bio_err, cur_cert-&gt;sig_alg, cur_cert-&gt;signature);</comment>


    <expr_stmt pos:start="245:5" pos:end="245:22"><expr pos:start="245:5" pos:end="245:21"><call pos:start="245:5" pos:end="245:21"><name pos:start="245:5" pos:end="245:12">BIO_free</name><argument_list pos:start="245:13" pos:end="245:21">(<argument pos:start="245:14" pos:end="245:20"><expr pos:start="245:14" pos:end="245:20"><name pos:start="245:14" pos:end="245:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="247:5" pos:end="247:19">return <expr pos:start="247:12" pos:end="247:18"><name pos:start="247:12" pos:end="247:18">approve</name></expr>;</return>
</block_content>}</block></function>    

<comment type="block" pos:start="250:1" pos:end="254:3">/*
 * This function performs a basic simple enroll using
 * a UID/PWD to identify the client to the server.  This
 * is used for a variet of test cases in this module.
 */</comment>
<function pos:start="255:1" pos:end="366:1"><type pos:start="255:1" pos:end="255:11"><specifier pos:start="255:1" pos:end="255:6">static</specifier> <name pos:start="255:8" pos:end="255:11">void</name></type> <name pos:start="255:13" pos:end="255:23">us898_test1</name> <parameter_list pos:start="255:25" pos:end="255:30">(<parameter pos:start="255:26" pos:end="255:29"><decl pos:start="255:26" pos:end="255:29"><type pos:start="255:26" pos:end="255:29"><name pos:start="255:26" pos:end="255:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="256:1" pos:end="366:1">{<block_content pos:start="257:5" pos:end="365:22">
    <decl_stmt pos:start="257:5" pos:end="257:18"><decl pos:start="257:5" pos:end="257:17"><type pos:start="257:5" pos:end="257:13"><name pos:start="257:5" pos:end="257:11">EST_CTX</name> <modifier pos:start="257:13" pos:end="257:13">*</modifier></type><name pos:start="257:14" pos:end="257:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="258:5" pos:end="258:18"><decl pos:start="258:5" pos:end="258:17"><type pos:start="258:5" pos:end="258:14"><name pos:start="258:5" pos:end="258:12">EVP_PKEY</name> <modifier pos:start="258:14" pos:end="258:14">*</modifier></type><name pos:start="258:15" pos:end="258:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="259:5" pos:end="259:11"><decl pos:start="259:5" pos:end="259:10"><type pos:start="259:5" pos:end="259:7"><name pos:start="259:5" pos:end="259:7">int</name></type> <name pos:start="259:9" pos:end="259:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="260:5" pos:end="260:22"><decl pos:start="260:5" pos:end="260:21"><type pos:start="260:5" pos:end="260:7"><name pos:start="260:5" pos:end="260:7">int</name></type> <name pos:start="260:9" pos:end="260:17">pkcs7_len</name> <init pos:start="260:19" pos:end="260:21">= <expr pos:start="260:21" pos:end="260:21"><literal type="number" pos:start="260:21" pos:end="260:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="261:5" pos:end="261:35"><decl pos:start="261:5" pos:end="261:34"><type pos:start="261:5" pos:end="261:19"><name pos:start="261:5" pos:end="261:12">unsigned</name> <name pos:start="261:14" pos:end="261:17">char</name> <modifier pos:start="261:19" pos:end="261:19">*</modifier></type><name pos:start="261:20" pos:end="261:27">new_cert</name> <init pos:start="261:29" pos:end="261:34">= <expr pos:start="261:31" pos:end="261:34"><name pos:start="261:31" pos:end="261:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="262:5" pos:end="262:21"><decl pos:start="262:5" pos:end="262:20"><type pos:start="262:5" pos:end="262:11"><name pos:start="262:5" pos:end="262:9">PKCS7</name> <modifier pos:start="262:11" pos:end="262:11">*</modifier></type><name pos:start="262:12" pos:end="262:13">p7</name> <init pos:start="262:15" pos:end="262:20">= <expr pos:start="262:17" pos:end="262:20"><name pos:start="262:17" pos:end="262:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="263:5" pos:end="263:19"><decl pos:start="263:5" pos:end="263:12"><type pos:start="263:5" pos:end="263:9"><name pos:start="263:5" pos:end="263:7">BIO</name> <modifier pos:start="263:9" pos:end="263:9">*</modifier></type><name pos:start="263:10" pos:end="263:12">b64</name></decl>, <decl pos:start="263:15" pos:end="263:18"><type ref="prev" pos:start="263:5" pos:end="263:9"><modifier pos:start="263:15" pos:end="263:15">*</modifier></type><name pos:start="263:16" pos:end="263:18">out</name></decl>;</decl_stmt>
    <decl_stmt pos:start="264:5" pos:end="264:22"><decl pos:start="264:5" pos:end="264:21"><type pos:start="264:5" pos:end="264:10"><name pos:start="264:5" pos:end="264:8">X509</name> <modifier pos:start="264:10" pos:end="264:10">*</modifier></type><name pos:start="264:11" pos:end="264:14">cert</name> <init pos:start="264:16" pos:end="264:21">= <expr pos:start="264:18" pos:end="264:21"><name pos:start="264:18" pos:end="264:21">NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="265:5" pos:end="265:33"><expr pos:start="265:5" pos:end="265:32"><call pos:start="265:5" pos:end="265:18"><name pos:start="265:5" pos:end="265:12">STACK_OF</name><argument_list pos:start="265:13" pos:end="265:18">(<argument pos:start="265:14" pos:end="265:17"><expr pos:start="265:14" pos:end="265:17"><name pos:start="265:14" pos:end="265:17">X509</name></expr></argument>)</argument_list></call> <operator pos:start="265:20" pos:end="265:20">*</operator><name pos:start="265:21" pos:end="265:25">certs</name> <operator pos:start="265:27" pos:end="265:27">=</operator> <name pos:start="265:29" pos:end="265:32">NULL</name></expr>;</expr_stmt>
    <decl_stmt pos:start="266:5" pos:end="266:10"><decl pos:start="266:5" pos:end="266:9"><type pos:start="266:5" pos:end="266:7"><name pos:start="266:5" pos:end="266:7">int</name></type> <name pos:start="266:9" pos:end="266:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="267:5" pos:end="267:36"><decl pos:start="267:5" pos:end="267:35"><type pos:start="267:5" pos:end="267:19"><name pos:start="267:5" pos:end="267:12">unsigned</name> <name pos:start="267:14" pos:end="267:17">char</name> <modifier pos:start="267:19" pos:end="267:19">*</modifier></type><name pos:start="267:20" pos:end="267:28">attr_data</name> <init pos:start="267:30" pos:end="267:35">= <expr pos:start="267:32" pos:end="267:35"><name pos:start="267:32" pos:end="267:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="268:5" pos:end="268:17"><decl pos:start="268:5" pos:end="268:16"><type pos:start="268:5" pos:end="268:7"><name pos:start="268:5" pos:end="268:7">int</name></type> <name pos:start="268:9" pos:end="268:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="270:5" pos:end="270:16"><expr pos:start="270:5" pos:end="270:15"><name pos:start="270:5" pos:end="270:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="272:5" pos:end="274:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="275:5" pos:end="277:54"><expr pos:start="275:5" pos:end="277:53"><name pos:start="275:5" pos:end="275:8">ectx</name> <operator pos:start="275:10" pos:end="275:10">=</operator> <call pos:start="275:12" pos:end="277:53"><name pos:start="275:12" pos:end="275:26">est_client_init</name><argument_list pos:start="275:27" pos:end="277:53">(<argument pos:start="275:28" pos:end="275:34"><expr pos:start="275:28" pos:end="275:34"><name pos:start="275:28" pos:end="275:34">cacerts</name></expr></argument>, <argument pos:start="275:37" pos:end="275:47"><expr pos:start="275:37" pos:end="275:47"><name pos:start="275:37" pos:end="275:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="276:28" pos:end="276:46"><expr pos:start="276:28" pos:end="276:46"><name pos:start="276:28" pos:end="276:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="277:28" pos:end="277:52"><expr pos:start="277:28" pos:end="277:52"><name pos:start="277:28" pos:end="277:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="278:5" pos:end="278:28"><expr pos:start="278:5" pos:end="278:27"><call pos:start="278:5" pos:end="278:27"><name pos:start="278:5" pos:end="278:13">CU_ASSERT</name><argument_list pos:start="278:14" pos:end="278:27">(<argument pos:start="278:15" pos:end="278:26"><expr pos:start="278:15" pos:end="278:26"><name pos:start="278:15" pos:end="278:18">ectx</name> <operator pos:start="278:20" pos:end="278:21">!=</operator> <name pos:start="278:23" pos:end="278:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="280:5" pos:end="282:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="283:5" pos:end="283:69"><expr pos:start="283:5" pos:end="283:68"><name pos:start="283:5" pos:end="283:6">rv</name> <operator pos:start="283:8" pos:end="283:8">=</operator> <call pos:start="283:10" pos:end="283:68"><name pos:start="283:10" pos:end="283:28">est_client_set_auth</name><argument_list pos:start="283:29" pos:end="283:68">(<argument pos:start="283:30" pos:end="283:33"><expr pos:start="283:30" pos:end="283:33"><name pos:start="283:30" pos:end="283:33">ectx</name></expr></argument>, <argument pos:start="283:36" pos:end="283:44"><expr pos:start="283:36" pos:end="283:44"><name pos:start="283:36" pos:end="283:44">US898_UID</name></expr></argument>, <argument pos:start="283:47" pos:end="283:55"><expr pos:start="283:47" pos:end="283:55"><name pos:start="283:47" pos:end="283:55">US898_PWD</name></expr></argument>, <argument pos:start="283:58" pos:end="283:61"><expr pos:start="283:58" pos:end="283:61"><name pos:start="283:58" pos:end="283:61">NULL</name></expr></argument>, <argument pos:start="283:64" pos:end="283:67"><expr pos:start="283:64" pos:end="283:67"><name pos:start="283:64" pos:end="283:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="284:5" pos:end="284:34"><expr pos:start="284:5" pos:end="284:33"><call pos:start="284:5" pos:end="284:33"><name pos:start="284:5" pos:end="284:13">CU_ASSERT</name><argument_list pos:start="284:14" pos:end="284:33">(<argument pos:start="284:15" pos:end="284:32"><expr pos:start="284:15" pos:end="284:32"><name pos:start="284:15" pos:end="284:16">rv</name> <operator pos:start="284:18" pos:end="284:19">==</operator> <name pos:start="284:21" pos:end="284:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="286:5" pos:end="288:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="289:5" pos:end="289:74"><expr pos:start="289:5" pos:end="289:73"><call pos:start="289:5" pos:end="289:73"><name pos:start="289:5" pos:end="289:25">est_client_set_server</name><argument_list pos:start="289:26" pos:end="289:73">(<argument pos:start="289:27" pos:end="289:30"><expr pos:start="289:27" pos:end="289:30"><name pos:start="289:27" pos:end="289:30">ectx</name></expr></argument>, <argument pos:start="289:33" pos:end="289:47"><expr pos:start="289:33" pos:end="289:47"><name pos:start="289:33" pos:end="289:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="289:50" pos:end="289:66"><expr pos:start="289:50" pos:end="289:66"><name pos:start="289:50" pos:end="289:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="289:69" pos:end="289:72"><expr pos:start="289:69" pos:end="289:72"><name pos:start="289:69" pos:end="289:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="291:5" pos:end="293:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="294:5" pos:end="294:33"><expr pos:start="294:5" pos:end="294:32"><name pos:start="294:5" pos:end="294:7">key</name> <operator pos:start="294:9" pos:end="294:9">=</operator> <call pos:start="294:11" pos:end="294:32"><name pos:start="294:11" pos:end="294:30">generate_private_key</name><argument_list pos:start="294:31" pos:end="294:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="295:5" pos:end="295:27"><expr pos:start="295:5" pos:end="295:26"><call pos:start="295:5" pos:end="295:26"><name pos:start="295:5" pos:end="295:13">CU_ASSERT</name><argument_list pos:start="295:14" pos:end="295:26">(<argument pos:start="295:15" pos:end="295:25"><expr pos:start="295:15" pos:end="295:25"><name pos:start="295:15" pos:end="295:17">key</name> <operator pos:start="295:19" pos:end="295:20">!=</operator> <name pos:start="295:22" pos:end="295:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="297:5" pos:end="299:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="300:5" pos:end="300:62"><expr pos:start="300:5" pos:end="300:61"><name pos:start="300:5" pos:end="300:6">rv</name> <operator pos:start="300:8" pos:end="300:8">=</operator> <call pos:start="300:10" pos:end="300:61"><name pos:start="300:10" pos:end="300:32">est_client_get_csrattrs</name><argument_list pos:start="300:33" pos:end="300:61">(<argument pos:start="300:34" pos:end="300:37"><expr pos:start="300:34" pos:end="300:37"><name pos:start="300:34" pos:end="300:37">ectx</name></expr></argument>, <argument pos:start="300:40" pos:end="300:49"><expr pos:start="300:40" pos:end="300:49"><operator pos:start="300:40" pos:end="300:40">&amp;</operator><name pos:start="300:41" pos:end="300:49">attr_data</name></expr></argument>, <argument pos:start="300:52" pos:end="300:60"><expr pos:start="300:52" pos:end="300:60"><operator pos:start="300:52" pos:end="300:52">&amp;</operator><name pos:start="300:53" pos:end="300:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="301:5" pos:end="301:34"><expr pos:start="301:5" pos:end="301:33"><call pos:start="301:5" pos:end="301:33"><name pos:start="301:5" pos:end="301:13">CU_ASSERT</name><argument_list pos:start="301:14" pos:end="301:33">(<argument pos:start="301:15" pos:end="301:32"><expr pos:start="301:15" pos:end="301:32"><name pos:start="301:15" pos:end="301:16">rv</name> <operator pos:start="301:18" pos:end="301:19">==</operator> <name pos:start="301:21" pos:end="301:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="303:5" pos:end="305:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="306:5" pos:end="306:64"><expr pos:start="306:5" pos:end="306:63"><name pos:start="306:5" pos:end="306:6">rv</name> <operator pos:start="306:8" pos:end="306:8">=</operator> <call pos:start="306:10" pos:end="306:63"><name pos:start="306:10" pos:end="306:26">est_client_enroll</name><argument_list pos:start="306:27" pos:end="306:63">(<argument pos:start="306:28" pos:end="306:31"><expr pos:start="306:28" pos:end="306:31"><name pos:start="306:28" pos:end="306:31">ectx</name></expr></argument>, <argument pos:start="306:34" pos:end="306:45"><expr pos:start="306:34" pos:end="306:45"><literal type="string" pos:start="306:34" pos:end="306:45">"TC-US898-1"</literal></expr></argument>, <argument pos:start="306:48" pos:end="306:57"><expr pos:start="306:48" pos:end="306:57"><operator pos:start="306:48" pos:end="306:48">&amp;</operator><name pos:start="306:49" pos:end="306:57">pkcs7_len</name></expr></argument>, <argument pos:start="306:60" pos:end="306:62"><expr pos:start="306:60" pos:end="306:62"><name pos:start="306:60" pos:end="306:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="307:5" pos:end="307:34"><expr pos:start="307:5" pos:end="307:33"><call pos:start="307:5" pos:end="307:33"><name pos:start="307:5" pos:end="307:13">CU_ASSERT</name><argument_list pos:start="307:14" pos:end="307:33">(<argument pos:start="307:15" pos:end="307:32"><expr pos:start="307:15" pos:end="307:32"><name pos:start="307:15" pos:end="307:16">rv</name> <operator pos:start="307:18" pos:end="307:19">==</operator> <name pos:start="307:21" pos:end="307:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="308:5" pos:end="308:35"><if pos:start="308:5" pos:end="308:35">if <condition pos:start="308:8" pos:end="308:27">(<expr pos:start="308:9" pos:end="308:26"><name pos:start="308:9" pos:end="308:10">rv</name> <operator pos:start="308:12" pos:end="308:13">!=</operator> <name pos:start="308:15" pos:end="308:26">EST_ERR_NONE</name></expr>)</condition><block type="pseudo" pos:start="308:29" pos:end="308:35"><block_content pos:start="308:29" pos:end="308:35"> <return pos:start="308:29" pos:end="308:35">return;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="310:5" pos:end="312:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="313:5" pos:end="318:5"><if pos:start="313:5" pos:end="318:5">if <condition pos:start="313:8" pos:end="313:27">(<expr pos:start="313:9" pos:end="313:26"><name pos:start="313:9" pos:end="313:10">rv</name> <operator pos:start="313:12" pos:end="313:13">==</operator> <name pos:start="313:15" pos:end="313:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="313:29" pos:end="318:5">{<block_content pos:start="314:9" pos:end="317:38">
	<expr_stmt pos:start="314:9" pos:end="314:37"><expr pos:start="314:9" pos:end="314:36"><name pos:start="314:9" pos:end="314:16">new_cert</name> <operator pos:start="314:18" pos:end="314:18">=</operator> <call pos:start="314:20" pos:end="314:36"><name pos:start="314:20" pos:end="314:25">malloc</name><argument_list pos:start="314:26" pos:end="314:36">(<argument pos:start="314:27" pos:end="314:35"><expr pos:start="314:27" pos:end="314:35"><name pos:start="314:27" pos:end="314:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="315:9" pos:end="315:36"><expr pos:start="315:9" pos:end="315:35"><call pos:start="315:9" pos:end="315:35"><name pos:start="315:9" pos:end="315:17">CU_ASSERT</name><argument_list pos:start="315:18" pos:end="315:35">(<argument pos:start="315:19" pos:end="315:34"><expr pos:start="315:19" pos:end="315:34"><name pos:start="315:19" pos:end="315:26">new_cert</name> <operator pos:start="315:28" pos:end="315:29">!=</operator> <name pos:start="315:31" pos:end="315:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="316:9" pos:end="316:59"><expr pos:start="316:9" pos:end="316:58"><name pos:start="316:9" pos:end="316:10">rv</name> <operator pos:start="316:12" pos:end="316:12">=</operator> <call pos:start="316:14" pos:end="316:58"><name pos:start="316:14" pos:end="316:42">est_client_copy_enrolled_cert</name><argument_list pos:start="316:43" pos:end="316:58">(<argument pos:start="316:44" pos:end="316:47"><expr pos:start="316:44" pos:end="316:47"><name pos:start="316:44" pos:end="316:47">ectx</name></expr></argument>, <argument pos:start="316:50" pos:end="316:57"><expr pos:start="316:50" pos:end="316:57"><name pos:start="316:50" pos:end="316:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="317:9" pos:end="317:38"><expr pos:start="317:9" pos:end="317:37"><call pos:start="317:9" pos:end="317:37"><name pos:start="317:9" pos:end="317:17">CU_ASSERT</name><argument_list pos:start="317:18" pos:end="317:37">(<argument pos:start="317:19" pos:end="317:36"><expr pos:start="317:19" pos:end="317:36"><name pos:start="317:19" pos:end="317:20">rv</name> <operator pos:start="317:22" pos:end="317:23">==</operator> <name pos:start="317:25" pos:end="317:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="320:5" pos:end="323:7">/*
     * Convert the cert to an X509.  Be warned this is
     * pure hackery.  
     */</comment>
    <expr_stmt pos:start="324:5" pos:end="324:34"><expr pos:start="324:5" pos:end="324:33"><name pos:start="324:5" pos:end="324:7">b64</name> <operator pos:start="324:9" pos:end="324:9">=</operator> <call pos:start="324:11" pos:end="324:33"><name pos:start="324:11" pos:end="324:17">BIO_new</name><argument_list pos:start="324:18" pos:end="324:33">(<argument pos:start="324:19" pos:end="324:32"><expr pos:start="324:19" pos:end="324:32"><call pos:start="324:19" pos:end="324:32"><name pos:start="324:19" pos:end="324:30">BIO_f_base64</name><argument_list pos:start="324:31" pos:end="324:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="325:5" pos:end="325:47"><expr pos:start="325:5" pos:end="325:46"><name pos:start="325:5" pos:end="325:7">out</name> <operator pos:start="325:9" pos:end="325:9">=</operator> <call pos:start="325:11" pos:end="325:46"><name pos:start="325:11" pos:end="325:25">BIO_new_mem_buf</name><argument_list pos:start="325:26" pos:end="325:46">(<argument pos:start="325:27" pos:end="325:34"><expr pos:start="325:27" pos:end="325:34"><name pos:start="325:27" pos:end="325:34">new_cert</name></expr></argument>, <argument pos:start="325:37" pos:end="325:45"><expr pos:start="325:37" pos:end="325:45"><name pos:start="325:37" pos:end="325:45">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="326:5" pos:end="326:29"><expr pos:start="326:5" pos:end="326:28"><name pos:start="326:5" pos:end="326:7">out</name> <operator pos:start="326:9" pos:end="326:9">=</operator> <call pos:start="326:11" pos:end="326:28"><name pos:start="326:11" pos:end="326:18">BIO_push</name><argument_list pos:start="326:19" pos:end="326:28">(<argument pos:start="326:20" pos:end="326:22"><expr pos:start="326:20" pos:end="326:22"><name pos:start="326:20" pos:end="326:22">b64</name></expr></argument>, <argument pos:start="326:25" pos:end="326:27"><expr pos:start="326:25" pos:end="326:27"><name pos:start="326:25" pos:end="326:27">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="327:5" pos:end="327:33"><expr pos:start="327:5" pos:end="327:32"><name pos:start="327:5" pos:end="327:6">p7</name> <operator pos:start="327:8" pos:end="327:8">=</operator> <call pos:start="327:10" pos:end="327:32"><name pos:start="327:10" pos:end="327:22">d2i_PKCS7_bio</name><argument_list pos:start="327:23" pos:end="327:32">(<argument pos:start="327:24" pos:end="327:26"><expr pos:start="327:24" pos:end="327:26"><name pos:start="327:24" pos:end="327:26">out</name></expr></argument>,<argument pos:start="327:28" pos:end="327:31"><expr pos:start="327:28" pos:end="327:31"><name pos:start="327:28" pos:end="327:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="328:5" pos:end="328:26"><expr pos:start="328:5" pos:end="328:25"><call pos:start="328:5" pos:end="328:25"><name pos:start="328:5" pos:end="328:13">CU_ASSERT</name><argument_list pos:start="328:14" pos:end="328:25">(<argument pos:start="328:15" pos:end="328:24"><expr pos:start="328:15" pos:end="328:24"><name pos:start="328:15" pos:end="328:16">p7</name> <operator pos:start="328:18" pos:end="328:19">!=</operator> <name pos:start="328:21" pos:end="328:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="329:5" pos:end="329:22"><expr pos:start="329:5" pos:end="329:21"><call pos:start="329:5" pos:end="329:21"><name pos:start="329:5" pos:end="329:16">BIO_free_all</name><argument_list pos:start="329:17" pos:end="329:21">(<argument pos:start="329:18" pos:end="329:20"><expr pos:start="329:18" pos:end="329:20"><name pos:start="329:18" pos:end="329:20">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="330:5" pos:end="330:28"><expr pos:start="330:5" pos:end="330:27"><name pos:start="330:5" pos:end="330:5">i</name><operator pos:start="330:6" pos:end="330:6">=</operator><call pos:start="330:7" pos:end="330:27"><name pos:start="330:7" pos:end="330:17">OBJ_obj2nid</name><argument_list pos:start="330:18" pos:end="330:27">(<argument pos:start="330:19" pos:end="330:26"><expr pos:start="330:19" pos:end="330:26"><name pos:start="330:19" pos:end="330:26"><name pos:start="330:19" pos:end="330:20">p7</name><operator pos:start="330:21" pos:end="330:22">-&gt;</operator><name pos:start="330:23" pos:end="330:26">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="331:5" pos:end="340:5">switch <condition pos:start="331:12" pos:end="331:14">(<expr pos:start="331:13" pos:end="331:13"><name pos:start="331:13" pos:end="331:13">i</name></expr>)</condition> <block pos:start="331:16" pos:end="340:5">{<block_content pos:start="332:5" pos:end="339:14">
    <case pos:start="332:5" pos:end="332:26">case <expr pos:start="332:10" pos:end="332:25"><name pos:start="332:10" pos:end="332:25">NID_pkcs7_signed</name></expr>:</case>
	<expr_stmt pos:start="333:9" pos:end="333:33"><expr pos:start="333:9" pos:end="333:32"><name pos:start="333:9" pos:end="333:13">certs</name> <operator pos:start="333:15" pos:end="333:15">=</operator> <name pos:start="333:17" pos:end="333:32"><name pos:start="333:17" pos:end="333:18">p7</name><operator pos:start="333:19" pos:end="333:20">-&gt;</operator><name pos:start="333:21" pos:end="333:21">d</name><operator pos:start="333:22" pos:end="333:22">.</operator><name pos:start="333:23" pos:end="333:26">sign</name><operator pos:start="333:27" pos:end="333:28">-&gt;</operator><name pos:start="333:29" pos:end="333:32">cert</name></name></expr>;</expr_stmt>
	<break pos:start="334:9" pos:end="334:14">break;</break>
    <case pos:start="335:5" pos:end="335:38">case <expr pos:start="335:10" pos:end="335:37"><name pos:start="335:10" pos:end="335:37">NID_pkcs7_signedAndEnveloped</name></expr>:</case>
	<expr_stmt pos:start="336:9" pos:end="336:49"><expr pos:start="336:9" pos:end="336:48"><name pos:start="336:9" pos:end="336:13">certs</name> <operator pos:start="336:15" pos:end="336:15">=</operator> <name pos:start="336:17" pos:end="336:48"><name pos:start="336:17" pos:end="336:18">p7</name><operator pos:start="336:19" pos:end="336:20">-&gt;</operator><name pos:start="336:21" pos:end="336:21">d</name><operator pos:start="336:22" pos:end="336:22">.</operator><name pos:start="336:23" pos:end="336:42">signed_and_enveloped</name><operator pos:start="336:43" pos:end="336:44">-&gt;</operator><name pos:start="336:45" pos:end="336:48">cert</name></name></expr>;</expr_stmt>
	<break pos:start="337:9" pos:end="337:14">break;</break>
    <default pos:start="338:5" pos:end="338:12">default:</default>
	<break pos:start="339:9" pos:end="339:14">break;</break>
    </block_content>}</block></switch>
    <expr_stmt pos:start="341:5" pos:end="341:29"><expr pos:start="341:5" pos:end="341:28"><call pos:start="341:5" pos:end="341:28"><name pos:start="341:5" pos:end="341:13">CU_ASSERT</name><argument_list pos:start="341:14" pos:end="341:28">(<argument pos:start="341:15" pos:end="341:27"><expr pos:start="341:15" pos:end="341:27"><name pos:start="341:15" pos:end="341:19">certs</name> <operator pos:start="341:21" pos:end="341:22">!=</operator> <name pos:start="341:24" pos:end="341:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="342:5" pos:end="342:23"><if pos:start="342:5" pos:end="342:23">if <condition pos:start="342:8" pos:end="342:15">(<expr pos:start="342:9" pos:end="342:14"><operator pos:start="342:9" pos:end="342:9">!</operator><name pos:start="342:10" pos:end="342:14">certs</name></expr>)</condition><block type="pseudo" pos:start="342:17" pos:end="342:23"><block_content pos:start="342:17" pos:end="342:23"> <return pos:start="342:17" pos:end="342:23">return;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="343:5" pos:end="345:51">/* our new cert should be the one and only
     * cert in the pkcs7 blob.  We shouldn't have to
     * iterate through the full list to find it. */</comment>
    <expr_stmt pos:start="346:5" pos:end="346:35"><expr pos:start="346:5" pos:end="346:34"><name pos:start="346:5" pos:end="346:8">cert</name> <operator pos:start="346:10" pos:end="346:10">=</operator> <call pos:start="346:12" pos:end="346:34"><name pos:start="346:12" pos:end="346:24">sk_X509_value</name><argument_list pos:start="346:25" pos:end="346:34">(<argument pos:start="346:26" pos:end="346:30"><expr pos:start="346:26" pos:end="346:30"><name pos:start="346:26" pos:end="346:30">certs</name></expr></argument>, <argument pos:start="346:33" pos:end="346:33"><expr pos:start="346:33" pos:end="346:33"><literal type="number" pos:start="346:33" pos:end="346:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="347:5" pos:end="347:28"><expr pos:start="347:5" pos:end="347:27"><call pos:start="347:5" pos:end="347:27"><name pos:start="347:5" pos:end="347:13">CU_ASSERT</name><argument_list pos:start="347:14" pos:end="347:27">(<argument pos:start="347:15" pos:end="347:26"><expr pos:start="347:15" pos:end="347:26"><name pos:start="347:15" pos:end="347:18">cert</name> <operator pos:start="347:20" pos:end="347:21">!=</operator> <name pos:start="347:23" pos:end="347:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block" pos:start="350:5" pos:end="355:7">/* 
     * Wow, that's a lot of work, but we finally have the X509.
     * (don't you just love OpenSSL!!!)
     * Now that we have an X509 representation of the cert,
     * let's try to re-enroll this cert with the CA
     */</comment>
    <expr_stmt pos:start="356:5" pos:end="356:58"><expr pos:start="356:5" pos:end="356:57"><name pos:start="356:5" pos:end="356:6">rv</name> <operator pos:start="356:8" pos:end="356:8">=</operator> <call pos:start="356:10" pos:end="356:57"><name pos:start="356:10" pos:end="356:28">est_client_reenroll</name><argument_list pos:start="356:29" pos:end="356:57">(<argument pos:start="356:30" pos:end="356:33"><expr pos:start="356:30" pos:end="356:33"><name pos:start="356:30" pos:end="356:33">ectx</name></expr></argument>, <argument pos:start="356:36" pos:end="356:39"><expr pos:start="356:36" pos:end="356:39"><name pos:start="356:36" pos:end="356:39">cert</name></expr></argument>, <argument pos:start="356:42" pos:end="356:51"><expr pos:start="356:42" pos:end="356:51"><operator pos:start="356:42" pos:end="356:42">&amp;</operator><name pos:start="356:43" pos:end="356:51">pkcs7_len</name></expr></argument>, <argument pos:start="356:54" pos:end="356:56"><expr pos:start="356:54" pos:end="356:56"><name pos:start="356:54" pos:end="356:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="357:5" pos:end="357:34"><expr pos:start="357:5" pos:end="357:33"><call pos:start="357:5" pos:end="357:33"><name pos:start="357:5" pos:end="357:13">CU_ASSERT</name><argument_list pos:start="357:14" pos:end="357:33">(<argument pos:start="357:15" pos:end="357:32"><expr pos:start="357:15" pos:end="357:32"><name pos:start="357:15" pos:end="357:16">rv</name> <operator pos:start="357:18" pos:end="357:19">==</operator> <name pos:start="357:21" pos:end="357:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="359:5" pos:end="361:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="362:5" pos:end="362:30"><if pos:start="362:5" pos:end="362:30">if <condition pos:start="362:8" pos:end="362:13">(<expr pos:start="362:9" pos:end="362:12"><name pos:start="362:9" pos:end="362:12">cert</name></expr>)</condition><block type="pseudo" pos:start="362:15" pos:end="362:30"><block_content pos:start="362:15" pos:end="362:30"> <expr_stmt pos:start="362:15" pos:end="362:30"><expr pos:start="362:15" pos:end="362:29"><call pos:start="362:15" pos:end="362:29"><name pos:start="362:15" pos:end="362:23">X509_free</name><argument_list pos:start="362:24" pos:end="362:29">(<argument pos:start="362:25" pos:end="362:28"><expr pos:start="362:25" pos:end="362:28"><name pos:start="362:25" pos:end="362:28">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="363:5" pos:end="363:23"><expr pos:start="363:5" pos:end="363:22"><call pos:start="363:5" pos:end="363:22"><name pos:start="363:5" pos:end="363:17">EVP_PKEY_free</name><argument_list pos:start="363:18" pos:end="363:22">(<argument pos:start="363:19" pos:end="363:21"><expr pos:start="363:19" pos:end="363:21"><name pos:start="363:19" pos:end="363:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="364:5" pos:end="364:33"><if pos:start="364:5" pos:end="364:33">if <condition pos:start="364:8" pos:end="364:17">(<expr pos:start="364:9" pos:end="364:16"><name pos:start="364:9" pos:end="364:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="364:19" pos:end="364:33"><block_content pos:start="364:19" pos:end="364:33"> <expr_stmt pos:start="364:19" pos:end="364:33"><expr pos:start="364:19" pos:end="364:32"><call pos:start="364:19" pos:end="364:32"><name pos:start="364:19" pos:end="364:22">free</name><argument_list pos:start="364:23" pos:end="364:32">(<argument pos:start="364:24" pos:end="364:31"><expr pos:start="364:24" pos:end="364:31"><name pos:start="364:24" pos:end="364:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="365:5" pos:end="365:22"><expr pos:start="365:5" pos:end="365:21"><call pos:start="365:5" pos:end="365:21"><name pos:start="365:5" pos:end="365:15">est_destroy</name><argument_list pos:start="365:16" pos:end="365:21">(<argument pos:start="365:17" pos:end="365:20"><expr pos:start="365:17" pos:end="365:20"><name pos:start="365:17" pos:end="365:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="369:1" pos:end="378:3">/*
 * This test case uses an existing expired cert and
 * attempts to re-enroll it.  The expired certs contains
 * several X509 extensions. We verify the new issued
 * cert preserves these extensions using grep.  Note, 
 * preserving these extensions requires the OpenSSL CA
 * to enable the "copy_extensions" knob in the OpenSSL
 * config file.  This is why this test suite uses a
 * unique copy of estExampleCA.cnf.
 */</comment>
<function pos:start="379:1" pos:end="524:1"><type pos:start="379:1" pos:end="379:11"><specifier pos:start="379:1" pos:end="379:6">static</specifier> <name pos:start="379:8" pos:end="379:11">void</name></type> <name pos:start="379:13" pos:end="379:23">us898_test2</name> <parameter_list pos:start="379:25" pos:end="379:30">(<parameter pos:start="379:26" pos:end="379:29"><decl pos:start="379:26" pos:end="379:29"><type pos:start="379:26" pos:end="379:29"><name pos:start="379:26" pos:end="379:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="380:1" pos:end="524:1">{<block_content pos:start="381:5" pos:end="523:22">
    <decl_stmt pos:start="381:5" pos:end="381:18"><decl pos:start="381:5" pos:end="381:17"><type pos:start="381:5" pos:end="381:13"><name pos:start="381:5" pos:end="381:11">EST_CTX</name> <modifier pos:start="381:13" pos:end="381:13">*</modifier></type><name pos:start="381:14" pos:end="381:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="382:5" pos:end="382:18"><decl pos:start="382:5" pos:end="382:17"><type pos:start="382:5" pos:end="382:14"><name pos:start="382:5" pos:end="382:12">EVP_PKEY</name> <modifier pos:start="382:14" pos:end="382:14">*</modifier></type><name pos:start="382:15" pos:end="382:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="383:5" pos:end="383:27"><decl pos:start="383:5" pos:end="383:26"><type pos:start="383:5" pos:end="383:19"><name pos:start="383:5" pos:end="383:12">unsigned</name> <name pos:start="383:14" pos:end="383:17">char</name> <modifier pos:start="383:19" pos:end="383:19">*</modifier></type><name pos:start="383:20" pos:end="383:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="384:5" pos:end="384:16"><decl pos:start="384:5" pos:end="384:15"><type pos:start="384:5" pos:end="384:7"><name pos:start="384:5" pos:end="384:7">int</name></type> <name pos:start="384:9" pos:end="384:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="385:5" pos:end="385:28"><decl pos:start="385:5" pos:end="385:27"><type pos:start="385:5" pos:end="385:19"><name pos:start="385:5" pos:end="385:12">unsigned</name> <name pos:start="385:14" pos:end="385:17">char</name> <modifier pos:start="385:19" pos:end="385:19">*</modifier></type><name pos:start="385:20" pos:end="385:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="386:5" pos:end="386:17"><decl pos:start="386:5" pos:end="386:16"><type pos:start="386:5" pos:end="386:7"><name pos:start="386:5" pos:end="386:7">int</name></type> <name pos:start="386:9" pos:end="386:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="387:5" pos:end="387:11"><decl pos:start="387:5" pos:end="387:10"><type pos:start="387:5" pos:end="387:7"><name pos:start="387:5" pos:end="387:7">int</name></type> <name pos:start="387:9" pos:end="387:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="388:5" pos:end="388:22"><decl pos:start="388:5" pos:end="388:21"><type pos:start="388:5" pos:end="388:7"><name pos:start="388:5" pos:end="388:7">int</name></type> <name pos:start="388:9" pos:end="388:17">pkcs7_len</name> <init pos:start="388:19" pos:end="388:21">= <expr pos:start="388:21" pos:end="388:21"><literal type="number" pos:start="388:21" pos:end="388:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="389:5" pos:end="389:35"><decl pos:start="389:5" pos:end="389:34"><type pos:start="389:5" pos:end="389:19"><name pos:start="389:5" pos:end="389:12">unsigned</name> <name pos:start="389:14" pos:end="389:17">char</name> <modifier pos:start="389:19" pos:end="389:19">*</modifier></type><name pos:start="389:20" pos:end="389:27">new_cert</name> <init pos:start="389:29" pos:end="389:34">= <expr pos:start="389:31" pos:end="389:34"><name pos:start="389:31" pos:end="389:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="390:5" pos:end="390:22"><decl pos:start="390:5" pos:end="390:21"><type pos:start="390:5" pos:end="390:10"><name pos:start="390:5" pos:end="390:8">X509</name> <modifier pos:start="390:10" pos:end="390:10">*</modifier></type><name pos:start="390:11" pos:end="390:14">cert</name> <init pos:start="390:16" pos:end="390:21">= <expr pos:start="390:18" pos:end="390:21"><name pos:start="390:18" pos:end="390:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="391:5" pos:end="391:12"><decl pos:start="391:5" pos:end="391:11"><type pos:start="391:5" pos:end="391:9"><name pos:start="391:5" pos:end="391:7">BIO</name> <modifier pos:start="391:9" pos:end="391:9">*</modifier></type><name pos:start="391:10" pos:end="391:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="392:5" pos:end="392:18"><decl pos:start="392:5" pos:end="392:17"><type pos:start="392:5" pos:end="392:8"><name pos:start="392:5" pos:end="392:8">char</name></type> <name pos:start="392:10" pos:end="392:17"><name pos:start="392:10" pos:end="392:12">cmd</name><index pos:start="392:13" pos:end="392:17">[<expr pos:start="392:14" pos:end="392:16"><literal type="number" pos:start="392:14" pos:end="392:16">200</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="393:5" pos:end="393:36"><decl pos:start="393:5" pos:end="393:35"><type pos:start="393:5" pos:end="393:19"><name pos:start="393:5" pos:end="393:12">unsigned</name> <name pos:start="393:14" pos:end="393:17">char</name> <modifier pos:start="393:19" pos:end="393:19">*</modifier></type><name pos:start="393:20" pos:end="393:28">attr_data</name> <init pos:start="393:30" pos:end="393:35">= <expr pos:start="393:32" pos:end="393:35"><name pos:start="393:32" pos:end="393:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="394:5" pos:end="394:17"><decl pos:start="394:5" pos:end="394:16"><type pos:start="394:5" pos:end="394:7"><name pos:start="394:5" pos:end="394:7">int</name></type> <name pos:start="394:9" pos:end="394:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="396:5" pos:end="396:16"><expr pos:start="396:5" pos:end="396:15"><name pos:start="396:5" pos:end="396:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="398:5" pos:end="400:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="401:5" pos:end="403:54"><expr pos:start="401:5" pos:end="403:53"><name pos:start="401:5" pos:end="401:8">ectx</name> <operator pos:start="401:10" pos:end="401:10">=</operator> <call pos:start="401:12" pos:end="403:53"><name pos:start="401:12" pos:end="401:26">est_client_init</name><argument_list pos:start="401:27" pos:end="403:53">(<argument pos:start="401:28" pos:end="401:34"><expr pos:start="401:28" pos:end="401:34"><name pos:start="401:28" pos:end="401:34">cacerts</name></expr></argument>, <argument pos:start="401:37" pos:end="401:47"><expr pos:start="401:37" pos:end="401:47"><name pos:start="401:37" pos:end="401:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="402:28" pos:end="402:46"><expr pos:start="402:28" pos:end="402:46"><name pos:start="402:28" pos:end="402:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="403:28" pos:end="403:52"><expr pos:start="403:28" pos:end="403:52"><name pos:start="403:28" pos:end="403:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="404:5" pos:end="404:28"><expr pos:start="404:5" pos:end="404:27"><call pos:start="404:5" pos:end="404:27"><name pos:start="404:5" pos:end="404:13">CU_ASSERT</name><argument_list pos:start="404:14" pos:end="404:27">(<argument pos:start="404:15" pos:end="404:26"><expr pos:start="404:15" pos:end="404:26"><name pos:start="404:15" pos:end="404:18">ectx</name> <operator pos:start="404:20" pos:end="404:21">!=</operator> <name pos:start="404:23" pos:end="404:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="406:5" pos:end="408:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="409:5" pos:end="409:69"><expr pos:start="409:5" pos:end="409:68"><name pos:start="409:5" pos:end="409:6">rv</name> <operator pos:start="409:8" pos:end="409:8">=</operator> <call pos:start="409:10" pos:end="409:68"><name pos:start="409:10" pos:end="409:28">est_client_set_auth</name><argument_list pos:start="409:29" pos:end="409:68">(<argument pos:start="409:30" pos:end="409:33"><expr pos:start="409:30" pos:end="409:33"><name pos:start="409:30" pos:end="409:33">ectx</name></expr></argument>, <argument pos:start="409:36" pos:end="409:44"><expr pos:start="409:36" pos:end="409:44"><name pos:start="409:36" pos:end="409:44">US898_UID</name></expr></argument>, <argument pos:start="409:47" pos:end="409:55"><expr pos:start="409:47" pos:end="409:55"><name pos:start="409:47" pos:end="409:55">US898_PWD</name></expr></argument>, <argument pos:start="409:58" pos:end="409:61"><expr pos:start="409:58" pos:end="409:61"><name pos:start="409:58" pos:end="409:61">NULL</name></expr></argument>, <argument pos:start="409:64" pos:end="409:67"><expr pos:start="409:64" pos:end="409:67"><name pos:start="409:64" pos:end="409:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="410:5" pos:end="410:34"><expr pos:start="410:5" pos:end="410:33"><call pos:start="410:5" pos:end="410:33"><name pos:start="410:5" pos:end="410:13">CU_ASSERT</name><argument_list pos:start="410:14" pos:end="410:33">(<argument pos:start="410:15" pos:end="410:32"><expr pos:start="410:15" pos:end="410:32"><name pos:start="410:15" pos:end="410:16">rv</name> <operator pos:start="410:18" pos:end="410:19">==</operator> <name pos:start="410:21" pos:end="410:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="412:5" pos:end="414:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="415:5" pos:end="415:74"><expr pos:start="415:5" pos:end="415:73"><call pos:start="415:5" pos:end="415:73"><name pos:start="415:5" pos:end="415:25">est_client_set_server</name><argument_list pos:start="415:26" pos:end="415:73">(<argument pos:start="415:27" pos:end="415:30"><expr pos:start="415:27" pos:end="415:30"><name pos:start="415:27" pos:end="415:30">ectx</name></expr></argument>, <argument pos:start="415:33" pos:end="415:47"><expr pos:start="415:33" pos:end="415:47"><name pos:start="415:33" pos:end="415:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="415:50" pos:end="415:66"><expr pos:start="415:50" pos:end="415:66"><name pos:start="415:50" pos:end="415:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="415:69" pos:end="415:72"><expr pos:start="415:69" pos:end="415:72"><name pos:start="415:69" pos:end="415:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="417:5" pos:end="419:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="420:5" pos:end="420:66"><expr pos:start="420:5" pos:end="420:65"><name pos:start="420:5" pos:end="420:11">key_len</name> <operator pos:start="420:13" pos:end="420:13">=</operator> <call pos:start="420:15" pos:end="420:65"><name pos:start="420:15" pos:end="420:30">read_binary_file</name><argument_list pos:start="420:31" pos:end="420:65">(<argument pos:start="420:32" pos:end="420:54"><expr pos:start="420:32" pos:end="420:54"><literal type="string" pos:start="420:32" pos:end="420:54">"US898/key-expired.pem"</literal></expr></argument>, <argument pos:start="420:57" pos:end="420:64"><expr pos:start="420:57" pos:end="420:64"><operator pos:start="420:57" pos:end="420:57">&amp;</operator><name pos:start="420:58" pos:end="420:64">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="421:5" pos:end="421:27"><expr pos:start="421:5" pos:end="421:26"><call pos:start="421:5" pos:end="421:26"><name pos:start="421:5" pos:end="421:13">CU_ASSERT</name><argument_list pos:start="421:14" pos:end="421:26">(<argument pos:start="421:15" pos:end="421:25"><expr pos:start="421:15" pos:end="421:25"><name pos:start="421:15" pos:end="421:21">key_len</name> <operator pos:start="421:23" pos:end="421:23">&gt;</operator> <literal type="number" pos:start="421:25" pos:end="421:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="422:5" pos:end="422:57"><expr pos:start="422:5" pos:end="422:56"><name pos:start="422:5" pos:end="422:7">key</name> <operator pos:start="422:9" pos:end="422:9">=</operator> <call pos:start="422:11" pos:end="422:56"><name pos:start="422:11" pos:end="422:22">est_load_key</name><argument_list pos:start="422:23" pos:end="422:56">(<argument pos:start="422:24" pos:end="422:30"><expr pos:start="422:24" pos:end="422:30"><name pos:start="422:24" pos:end="422:30">key_raw</name></expr></argument>, <argument pos:start="422:33" pos:end="422:39"><expr pos:start="422:33" pos:end="422:39"><name pos:start="422:33" pos:end="422:39">key_len</name></expr></argument>, <argument pos:start="422:42" pos:end="422:55"><expr pos:start="422:42" pos:end="422:55"><name pos:start="422:42" pos:end="422:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="423:5" pos:end="423:27"><expr pos:start="423:5" pos:end="423:26"><call pos:start="423:5" pos:end="423:26"><name pos:start="423:5" pos:end="423:13">CU_ASSERT</name><argument_list pos:start="423:14" pos:end="423:26">(<argument pos:start="423:15" pos:end="423:25"><expr pos:start="423:15" pos:end="423:25"><name pos:start="423:15" pos:end="423:17">key</name> <operator pos:start="423:19" pos:end="423:20">!=</operator> <name pos:start="423:22" pos:end="423:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="424:5" pos:end="424:18"><expr pos:start="424:5" pos:end="424:17"><call pos:start="424:5" pos:end="424:17"><name pos:start="424:5" pos:end="424:8">free</name><argument_list pos:start="424:9" pos:end="424:17">(<argument pos:start="424:10" pos:end="424:16"><expr pos:start="424:10" pos:end="424:16"><name pos:start="424:10" pos:end="424:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="426:5" pos:end="428:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="429:5" pos:end="429:69"><expr pos:start="429:5" pos:end="429:68"><name pos:start="429:5" pos:end="429:12">cert_len</name> <operator pos:start="429:14" pos:end="429:14">=</operator> <call pos:start="429:16" pos:end="429:68"><name pos:start="429:16" pos:end="429:31">read_binary_file</name><argument_list pos:start="429:32" pos:end="429:68">(<argument pos:start="429:33" pos:end="429:56"><expr pos:start="429:33" pos:end="429:56"><literal type="string" pos:start="429:33" pos:end="429:56">"US898/cert-expired.pem"</literal></expr></argument>, <argument pos:start="429:59" pos:end="429:67"><expr pos:start="429:59" pos:end="429:67"><operator pos:start="429:59" pos:end="429:59">&amp;</operator><name pos:start="429:60" pos:end="429:67">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="430:5" pos:end="430:28"><expr pos:start="430:5" pos:end="430:27"><call pos:start="430:5" pos:end="430:27"><name pos:start="430:5" pos:end="430:13">CU_ASSERT</name><argument_list pos:start="430:14" pos:end="430:27">(<argument pos:start="430:15" pos:end="430:26"><expr pos:start="430:15" pos:end="430:26"><name pos:start="430:15" pos:end="430:22">cert_len</name> <operator pos:start="430:24" pos:end="430:24">&gt;</operator> <literal type="number" pos:start="430:26" pos:end="430:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="431:5" pos:end="431:45"><expr pos:start="431:5" pos:end="431:44"><name pos:start="431:5" pos:end="431:6">in</name> <operator pos:start="431:8" pos:end="431:8">=</operator> <call pos:start="431:10" pos:end="431:44"><name pos:start="431:10" pos:end="431:24">BIO_new_mem_buf</name><argument_list pos:start="431:25" pos:end="431:44">(<argument pos:start="431:26" pos:end="431:33"><expr pos:start="431:26" pos:end="431:33"><name pos:start="431:26" pos:end="431:33">cert_raw</name></expr></argument>, <argument pos:start="431:36" pos:end="431:43"><expr pos:start="431:36" pos:end="431:43"><name pos:start="431:36" pos:end="431:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="432:5" pos:end="432:26"><expr pos:start="432:5" pos:end="432:25"><call pos:start="432:5" pos:end="432:25"><name pos:start="432:5" pos:end="432:13">CU_ASSERT</name><argument_list pos:start="432:14" pos:end="432:25">(<argument pos:start="432:15" pos:end="432:24"><expr pos:start="432:15" pos:end="432:24"><name pos:start="432:15" pos:end="432:16">in</name> <operator pos:start="432:18" pos:end="432:19">!=</operator> <name pos:start="432:21" pos:end="432:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="433:5" pos:end="433:20"><if pos:start="433:5" pos:end="433:20">if <condition pos:start="433:8" pos:end="433:12">(<expr pos:start="433:9" pos:end="433:11"><operator pos:start="433:9" pos:end="433:9">!</operator><name pos:start="433:10" pos:end="433:11">in</name></expr>)</condition><block type="pseudo" pos:start="433:14" pos:end="433:20"><block_content pos:start="433:14" pos:end="433:20"> <return pos:start="433:14" pos:end="433:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="434:5" pos:end="434:55"><expr pos:start="434:5" pos:end="434:54"><name pos:start="434:5" pos:end="434:8">cert</name> <operator pos:start="434:10" pos:end="434:10">=</operator> <call pos:start="434:12" pos:end="434:54"><name pos:start="434:12" pos:end="434:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="434:33" pos:end="434:54">(<argument pos:start="434:34" pos:end="434:35"><expr pos:start="434:34" pos:end="434:35"><name pos:start="434:34" pos:end="434:35">in</name></expr></argument>, <argument pos:start="434:38" pos:end="434:41"><expr pos:start="434:38" pos:end="434:41"><name pos:start="434:38" pos:end="434:41">NULL</name></expr></argument>, <argument pos:start="434:44" pos:end="434:47"><expr pos:start="434:44" pos:end="434:47"><name pos:start="434:44" pos:end="434:47">NULL</name></expr></argument>, <argument pos:start="434:50" pos:end="434:53"><expr pos:start="434:50" pos:end="434:53"><name pos:start="434:50" pos:end="434:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="435:5" pos:end="435:28"><expr pos:start="435:5" pos:end="435:27"><call pos:start="435:5" pos:end="435:27"><name pos:start="435:5" pos:end="435:13">CU_ASSERT</name><argument_list pos:start="435:14" pos:end="435:27">(<argument pos:start="435:15" pos:end="435:26"><expr pos:start="435:15" pos:end="435:26"><name pos:start="435:15" pos:end="435:18">cert</name> <operator pos:start="435:20" pos:end="435:21">!=</operator> <name pos:start="435:23" pos:end="435:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="436:5" pos:end="436:22"><if pos:start="436:5" pos:end="436:22">if <condition pos:start="436:8" pos:end="436:14">(<expr pos:start="436:9" pos:end="436:13"><operator pos:start="436:9" pos:end="436:9">!</operator><name pos:start="436:10" pos:end="436:13">cert</name></expr>)</condition><block type="pseudo" pos:start="436:16" pos:end="436:22"><block_content pos:start="436:16" pos:end="436:22"> <return pos:start="436:16" pos:end="436:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="437:5" pos:end="437:21"><expr pos:start="437:5" pos:end="437:20"><call pos:start="437:5" pos:end="437:20"><name pos:start="437:5" pos:end="437:16">BIO_free_all</name><argument_list pos:start="437:17" pos:end="437:20">(<argument pos:start="437:18" pos:end="437:19"><expr pos:start="437:18" pos:end="437:19"><name pos:start="437:18" pos:end="437:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="438:5" pos:end="438:19"><expr pos:start="438:5" pos:end="438:18"><call pos:start="438:5" pos:end="438:18"><name pos:start="438:5" pos:end="438:8">free</name><argument_list pos:start="438:9" pos:end="438:18">(<argument pos:start="438:10" pos:end="438:17"><expr pos:start="438:10" pos:end="438:17"><name pos:start="438:10" pos:end="438:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="440:5" pos:end="442:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="443:5" pos:end="443:62"><expr pos:start="443:5" pos:end="443:61"><name pos:start="443:5" pos:end="443:6">rv</name> <operator pos:start="443:8" pos:end="443:8">=</operator> <call pos:start="443:10" pos:end="443:61"><name pos:start="443:10" pos:end="443:32">est_client_get_csrattrs</name><argument_list pos:start="443:33" pos:end="443:61">(<argument pos:start="443:34" pos:end="443:37"><expr pos:start="443:34" pos:end="443:37"><name pos:start="443:34" pos:end="443:37">ectx</name></expr></argument>, <argument pos:start="443:40" pos:end="443:49"><expr pos:start="443:40" pos:end="443:49"><operator pos:start="443:40" pos:end="443:40">&amp;</operator><name pos:start="443:41" pos:end="443:49">attr_data</name></expr></argument>, <argument pos:start="443:52" pos:end="443:60"><expr pos:start="443:52" pos:end="443:60"><operator pos:start="443:52" pos:end="443:52">&amp;</operator><name pos:start="443:53" pos:end="443:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="444:5" pos:end="444:34"><expr pos:start="444:5" pos:end="444:33"><call pos:start="444:5" pos:end="444:33"><name pos:start="444:5" pos:end="444:13">CU_ASSERT</name><argument_list pos:start="444:14" pos:end="444:33">(<argument pos:start="444:15" pos:end="444:32"><expr pos:start="444:15" pos:end="444:32"><name pos:start="444:15" pos:end="444:16">rv</name> <operator pos:start="444:18" pos:end="444:19">==</operator> <name pos:start="444:21" pos:end="444:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="446:5" pos:end="448:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="449:5" pos:end="449:58"><expr pos:start="449:5" pos:end="449:57"><name pos:start="449:5" pos:end="449:6">rv</name> <operator pos:start="449:8" pos:end="449:8">=</operator> <call pos:start="449:10" pos:end="449:57"><name pos:start="449:10" pos:end="449:28">est_client_reenroll</name><argument_list pos:start="449:29" pos:end="449:57">(<argument pos:start="449:30" pos:end="449:33"><expr pos:start="449:30" pos:end="449:33"><name pos:start="449:30" pos:end="449:33">ectx</name></expr></argument>, <argument pos:start="449:36" pos:end="449:39"><expr pos:start="449:36" pos:end="449:39"><name pos:start="449:36" pos:end="449:39">cert</name></expr></argument>, <argument pos:start="449:42" pos:end="449:51"><expr pos:start="449:42" pos:end="449:51"><operator pos:start="449:42" pos:end="449:42">&amp;</operator><name pos:start="449:43" pos:end="449:51">pkcs7_len</name></expr></argument>, <argument pos:start="449:54" pos:end="449:56"><expr pos:start="449:54" pos:end="449:56"><name pos:start="449:54" pos:end="449:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="450:5" pos:end="450:34"><expr pos:start="450:5" pos:end="450:33"><call pos:start="450:5" pos:end="450:33"><name pos:start="450:5" pos:end="450:13">CU_ASSERT</name><argument_list pos:start="450:14" pos:end="450:33">(<argument pos:start="450:15" pos:end="450:32"><expr pos:start="450:15" pos:end="450:32"><name pos:start="450:15" pos:end="450:16">rv</name> <operator pos:start="450:18" pos:end="450:19">==</operator> <name pos:start="450:21" pos:end="450:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="452:5" pos:end="454:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="455:5" pos:end="460:5"><if pos:start="455:5" pos:end="460:5">if <condition pos:start="455:8" pos:end="455:27">(<expr pos:start="455:9" pos:end="455:26"><name pos:start="455:9" pos:end="455:10">rv</name> <operator pos:start="455:12" pos:end="455:13">==</operator> <name pos:start="455:15" pos:end="455:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="455:29" pos:end="460:5">{<block_content pos:start="456:9" pos:end="459:38">
	<expr_stmt pos:start="456:9" pos:end="456:37"><expr pos:start="456:9" pos:end="456:36"><name pos:start="456:9" pos:end="456:16">new_cert</name> <operator pos:start="456:18" pos:end="456:18">=</operator> <call pos:start="456:20" pos:end="456:36"><name pos:start="456:20" pos:end="456:25">malloc</name><argument_list pos:start="456:26" pos:end="456:36">(<argument pos:start="456:27" pos:end="456:35"><expr pos:start="456:27" pos:end="456:35"><name pos:start="456:27" pos:end="456:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="457:9" pos:end="457:36"><expr pos:start="457:9" pos:end="457:35"><call pos:start="457:9" pos:end="457:35"><name pos:start="457:9" pos:end="457:17">CU_ASSERT</name><argument_list pos:start="457:18" pos:end="457:35">(<argument pos:start="457:19" pos:end="457:34"><expr pos:start="457:19" pos:end="457:34"><name pos:start="457:19" pos:end="457:26">new_cert</name> <operator pos:start="457:28" pos:end="457:29">!=</operator> <name pos:start="457:31" pos:end="457:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="458:9" pos:end="458:59"><expr pos:start="458:9" pos:end="458:58"><name pos:start="458:9" pos:end="458:10">rv</name> <operator pos:start="458:12" pos:end="458:12">=</operator> <call pos:start="458:14" pos:end="458:58"><name pos:start="458:14" pos:end="458:42">est_client_copy_enrolled_cert</name><argument_list pos:start="458:43" pos:end="458:58">(<argument pos:start="458:44" pos:end="458:47"><expr pos:start="458:44" pos:end="458:47"><name pos:start="458:44" pos:end="458:47">ectx</name></expr></argument>, <argument pos:start="458:50" pos:end="458:57"><expr pos:start="458:50" pos:end="458:57"><name pos:start="458:50" pos:end="458:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="459:9" pos:end="459:38"><expr pos:start="459:9" pos:end="459:37"><call pos:start="459:9" pos:end="459:37"><name pos:start="459:9" pos:end="459:17">CU_ASSERT</name><argument_list pos:start="459:18" pos:end="459:37">(<argument pos:start="459:19" pos:end="459:36"><expr pos:start="459:19" pos:end="459:36"><name pos:start="459:19" pos:end="459:20">rv</name> <operator pos:start="459:22" pos:end="459:23">==</operator> <name pos:start="459:25" pos:end="459:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="462:5" pos:end="464:7">/*
     * Save the cert to a local file
     */</comment>
    <expr_stmt pos:start="465:5" pos:end="465:68"><expr pos:start="465:5" pos:end="465:67"><name pos:start="465:5" pos:end="465:6">rv</name> <operator pos:start="465:8" pos:end="465:8">=</operator> <call pos:start="465:10" pos:end="465:67"><name pos:start="465:10" pos:end="465:26">write_binary_file</name><argument_list pos:start="465:27" pos:end="465:67">(<argument pos:start="465:28" pos:end="465:45"><expr pos:start="465:28" pos:end="465:45"><name pos:start="465:28" pos:end="465:45">US898_TC2_CERT_B64</name></expr></argument>, <argument pos:start="465:48" pos:end="465:55"><expr pos:start="465:48" pos:end="465:55"><name pos:start="465:48" pos:end="465:55">new_cert</name></expr></argument>, <argument pos:start="465:58" pos:end="465:66"><expr pos:start="465:58" pos:end="465:66"><name pos:start="465:58" pos:end="465:66">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="466:5" pos:end="466:23"><expr pos:start="466:5" pos:end="466:22"><call pos:start="466:5" pos:end="466:22"><name pos:start="466:5" pos:end="466:13">CU_ASSERT</name><argument_list pos:start="466:14" pos:end="466:22">(<argument pos:start="466:15" pos:end="466:21"><expr pos:start="466:15" pos:end="466:21"><name pos:start="466:15" pos:end="466:16">rv</name> <operator pos:start="466:18" pos:end="466:19">==</operator> <literal type="number" pos:start="466:21" pos:end="466:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="468:5" pos:end="470:7">/*
     * Base 64 decode the cert response
     */</comment>
    <expr_stmt pos:start="471:5" pos:end="471:93"><expr pos:start="471:5" pos:end="471:92"><call pos:start="471:5" pos:end="471:92"><name pos:start="471:5" pos:end="471:11">sprintf</name><argument_list pos:start="471:12" pos:end="471:92">(<argument pos:start="471:13" pos:end="471:15"><expr pos:start="471:13" pos:end="471:15"><name pos:start="471:13" pos:end="471:15">cmd</name></expr></argument>, <argument pos:start="471:18" pos:end="471:51"><expr pos:start="471:18" pos:end="471:51"><literal type="string" pos:start="471:18" pos:end="471:51">"openssl base64 -d -in %s -out %s"</literal></expr></argument>, <argument pos:start="471:54" pos:end="471:71"><expr pos:start="471:54" pos:end="471:71"><name pos:start="471:54" pos:end="471:71">US898_TC2_CERT_B64</name></expr></argument>, <argument pos:start="471:74" pos:end="471:91"><expr pos:start="471:74" pos:end="471:91"><name pos:start="471:74" pos:end="471:91">US898_TC2_CERT_PK7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="472:5" pos:end="472:21"><expr pos:start="472:5" pos:end="472:20"><name pos:start="472:5" pos:end="472:6">rv</name> <operator pos:start="472:8" pos:end="472:8">=</operator> <call pos:start="472:10" pos:end="472:20"><name pos:start="472:10" pos:end="472:15">system</name><argument_list pos:start="472:16" pos:end="472:20">(<argument pos:start="472:17" pos:end="472:19"><expr pos:start="472:17" pos:end="472:19"><name pos:start="472:17" pos:end="472:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="473:5" pos:end="473:23"><expr pos:start="473:5" pos:end="473:22"><call pos:start="473:5" pos:end="473:22"><name pos:start="473:5" pos:end="473:13">CU_ASSERT</name><argument_list pos:start="473:14" pos:end="473:22">(<argument pos:start="473:15" pos:end="473:21"><expr pos:start="473:15" pos:end="473:21"><name pos:start="473:15" pos:end="473:16">rv</name> <operator pos:start="473:18" pos:end="473:19">==</operator> <literal type="number" pos:start="473:21" pos:end="473:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="475:5" pos:end="477:7">/*
     * Convert the pkcs7 cert to a PEM cert
     */</comment>
    <expr_stmt pos:start="478:5" pos:end="478:114"><expr pos:start="478:5" pos:end="478:113"><call pos:start="478:5" pos:end="478:113"><name pos:start="478:5" pos:end="478:11">sprintf</name><argument_list pos:start="478:12" pos:end="478:113">(<argument pos:start="478:13" pos:end="478:15"><expr pos:start="478:13" pos:end="478:15"><name pos:start="478:13" pos:end="478:15">cmd</name></expr></argument>, <argument pos:start="478:18" pos:end="478:72"><expr pos:start="478:18" pos:end="478:72"><literal type="string" pos:start="478:18" pos:end="478:72">"openssl pkcs7 -in %s -inform DER -print_certs -out %s"</literal></expr></argument>, <argument pos:start="478:75" pos:end="478:92"><expr pos:start="478:75" pos:end="478:92"><name pos:start="478:75" pos:end="478:92">US898_TC2_CERT_PK7</name></expr></argument>, <argument pos:start="478:95" pos:end="478:112"><expr pos:start="478:95" pos:end="478:112"><name pos:start="478:95" pos:end="478:112">US898_TC2_CERT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="479:5" pos:end="479:21"><expr pos:start="479:5" pos:end="479:20"><name pos:start="479:5" pos:end="479:6">rv</name> <operator pos:start="479:8" pos:end="479:8">=</operator> <call pos:start="479:10" pos:end="479:20"><name pos:start="479:10" pos:end="479:15">system</name><argument_list pos:start="479:16" pos:end="479:20">(<argument pos:start="479:17" pos:end="479:19"><expr pos:start="479:17" pos:end="479:19"><name pos:start="479:17" pos:end="479:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="480:5" pos:end="480:23"><expr pos:start="480:5" pos:end="480:22"><call pos:start="480:5" pos:end="480:22"><name pos:start="480:5" pos:end="480:13">CU_ASSERT</name><argument_list pos:start="480:14" pos:end="480:22">(<argument pos:start="480:15" pos:end="480:21"><expr pos:start="480:15" pos:end="480:21"><name pos:start="480:15" pos:end="480:16">rv</name> <operator pos:start="480:18" pos:end="480:19">==</operator> <literal type="number" pos:start="480:21" pos:end="480:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="482:5" pos:end="484:7">/*
     * Convert PEM cert to a textual representation of the cert
     */</comment>
    <expr_stmt pos:start="485:5" pos:end="485:91"><expr pos:start="485:5" pos:end="485:90"><call pos:start="485:5" pos:end="485:90"><name pos:start="485:5" pos:end="485:11">sprintf</name><argument_list pos:start="485:12" pos:end="485:90">(<argument pos:start="485:13" pos:end="485:15"><expr pos:start="485:13" pos:end="485:15"><name pos:start="485:13" pos:end="485:15">cmd</name></expr></argument>, <argument pos:start="485:18" pos:end="485:49"><expr pos:start="485:18" pos:end="485:49"><literal type="string" pos:start="485:18" pos:end="485:49">"openssl x509 -text -in %s &gt; %s"</literal></expr></argument>, <argument pos:start="485:52" pos:end="485:69"><expr pos:start="485:52" pos:end="485:69"><name pos:start="485:52" pos:end="485:69">US898_TC2_CERT_PEM</name></expr></argument>, <argument pos:start="485:72" pos:end="485:89"><expr pos:start="485:72" pos:end="485:89"><name pos:start="485:72" pos:end="485:89">US898_TC2_CERT_TXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="486:5" pos:end="486:21"><expr pos:start="486:5" pos:end="486:20"><name pos:start="486:5" pos:end="486:6">rv</name> <operator pos:start="486:8" pos:end="486:8">=</operator> <call pos:start="486:10" pos:end="486:20"><name pos:start="486:10" pos:end="486:15">system</name><argument_list pos:start="486:16" pos:end="486:20">(<argument pos:start="486:17" pos:end="486:19"><expr pos:start="486:17" pos:end="486:19"><name pos:start="486:17" pos:end="486:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="487:5" pos:end="487:23"><expr pos:start="487:5" pos:end="487:22"><call pos:start="487:5" pos:end="487:22"><name pos:start="487:5" pos:end="487:13">CU_ASSERT</name><argument_list pos:start="487:14" pos:end="487:22">(<argument pos:start="487:15" pos:end="487:21"><expr pos:start="487:15" pos:end="487:21"><name pos:start="487:15" pos:end="487:16">rv</name> <operator pos:start="487:18" pos:end="487:19">==</operator> <literal type="number" pos:start="487:21" pos:end="487:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="489:5" pos:end="491:7">/*
     * Verify the jimbob DNS extension was preserved
     */</comment>
    <expr_stmt pos:start="492:5" pos:end="492:44"><expr pos:start="492:5" pos:end="492:43"><name pos:start="492:5" pos:end="492:6">rv</name> <operator pos:start="492:8" pos:end="492:8">=</operator> <call pos:start="492:10" pos:end="492:43"><name pos:start="492:10" pos:end="492:13">grep</name><argument_list pos:start="492:14" pos:end="492:43">(<argument pos:start="492:15" pos:end="492:32"><expr pos:start="492:15" pos:end="492:32"><name pos:start="492:15" pos:end="492:32">US898_TC2_CERT_TXT</name></expr></argument>, <argument pos:start="492:35" pos:end="492:42"><expr pos:start="492:35" pos:end="492:42"><literal type="string" pos:start="492:35" pos:end="492:42">"jimbob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="493:5" pos:end="493:23"><expr pos:start="493:5" pos:end="493:22"><call pos:start="493:5" pos:end="493:22"><name pos:start="493:5" pos:end="493:13">CU_ASSERT</name><argument_list pos:start="493:14" pos:end="493:22">(<argument pos:start="493:15" pos:end="493:21"><expr pos:start="493:15" pos:end="493:21"><name pos:start="493:15" pos:end="493:16">rv</name> <operator pos:start="493:18" pos:end="493:19">==</operator> <literal type="number" pos:start="493:21" pos:end="493:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="495:5" pos:end="497:7">/*
     * Verify the bobcat DNS extension was preserved
     */</comment>
    <expr_stmt pos:start="498:5" pos:end="498:44"><expr pos:start="498:5" pos:end="498:43"><name pos:start="498:5" pos:end="498:6">rv</name> <operator pos:start="498:8" pos:end="498:8">=</operator> <call pos:start="498:10" pos:end="498:43"><name pos:start="498:10" pos:end="498:13">grep</name><argument_list pos:start="498:14" pos:end="498:43">(<argument pos:start="498:15" pos:end="498:32"><expr pos:start="498:15" pos:end="498:32"><name pos:start="498:15" pos:end="498:32">US898_TC2_CERT_TXT</name></expr></argument>, <argument pos:start="498:35" pos:end="498:42"><expr pos:start="498:35" pos:end="498:42"><literal type="string" pos:start="498:35" pos:end="498:42">"bobcat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="499:5" pos:end="499:23"><expr pos:start="499:5" pos:end="499:22"><call pos:start="499:5" pos:end="499:22"><name pos:start="499:5" pos:end="499:13">CU_ASSERT</name><argument_list pos:start="499:14" pos:end="499:22">(<argument pos:start="499:15" pos:end="499:21"><expr pos:start="499:15" pos:end="499:21"><name pos:start="499:15" pos:end="499:16">rv</name> <operator pos:start="499:18" pos:end="499:19">==</operator> <literal type="number" pos:start="499:21" pos:end="499:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="501:5" pos:end="503:7">/*
     * Verify the IP address extension was preserved
     */</comment>
    <expr_stmt pos:start="504:5" pos:end="504:40"><expr pos:start="504:5" pos:end="504:39"><name pos:start="504:5" pos:end="504:6">rv</name> <operator pos:start="504:8" pos:end="504:8">=</operator> <call pos:start="504:10" pos:end="504:39"><name pos:start="504:10" pos:end="504:13">grep</name><argument_list pos:start="504:14" pos:end="504:39">(<argument pos:start="504:15" pos:end="504:32"><expr pos:start="504:15" pos:end="504:32"><name pos:start="504:15" pos:end="504:32">US898_TC2_CERT_TXT</name></expr></argument>,<argument pos:start="504:34" pos:end="504:38"><expr pos:start="504:34" pos:end="504:38"><literal type="string" pos:start="504:34" pos:end="504:38">"172"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="505:5" pos:end="505:23"><expr pos:start="505:5" pos:end="505:22"><call pos:start="505:5" pos:end="505:22"><name pos:start="505:5" pos:end="505:13">CU_ASSERT</name><argument_list pos:start="505:14" pos:end="505:22">(<argument pos:start="505:15" pos:end="505:21"><expr pos:start="505:15" pos:end="505:21"><name pos:start="505:15" pos:end="505:16">rv</name> <operator pos:start="505:18" pos:end="505:19">==</operator> <literal type="number" pos:start="505:21" pos:end="505:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="507:5" pos:end="509:7">/*
     * Verify the Repudiation key usage extension was preserved
     */</comment>
    <expr_stmt pos:start="510:5" pos:end="510:48"><expr pos:start="510:5" pos:end="510:47"><name pos:start="510:5" pos:end="510:6">rv</name> <operator pos:start="510:8" pos:end="510:8">=</operator> <call pos:start="510:10" pos:end="510:47"><name pos:start="510:10" pos:end="510:13">grep</name><argument_list pos:start="510:14" pos:end="510:47">(<argument pos:start="510:15" pos:end="510:32"><expr pos:start="510:15" pos:end="510:32"><name pos:start="510:15" pos:end="510:32">US898_TC2_CERT_TXT</name></expr></argument>,<argument pos:start="510:34" pos:end="510:46"><expr pos:start="510:34" pos:end="510:46"><literal type="string" pos:start="510:34" pos:end="510:46">"Repudiation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="511:5" pos:end="511:23"><expr pos:start="511:5" pos:end="511:22"><call pos:start="511:5" pos:end="511:22"><name pos:start="511:5" pos:end="511:13">CU_ASSERT</name><argument_list pos:start="511:14" pos:end="511:22">(<argument pos:start="511:15" pos:end="511:21"><expr pos:start="511:15" pos:end="511:21"><name pos:start="511:15" pos:end="511:16">rv</name> <operator pos:start="511:18" pos:end="511:19">==</operator> <literal type="number" pos:start="511:21" pos:end="511:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="513:5" pos:end="515:7">/*
     * Verify the public key was preserved
     */</comment>
    <expr_stmt pos:start="516:5" pos:end="516:82"><expr pos:start="516:5" pos:end="516:81"><name pos:start="516:5" pos:end="516:6">rv</name> <operator pos:start="516:8" pos:end="516:8">=</operator> <call pos:start="516:10" pos:end="516:81"><name pos:start="516:10" pos:end="516:13">grep</name><argument_list pos:start="516:14" pos:end="516:81">(<argument pos:start="516:15" pos:end="516:32"><expr pos:start="516:15" pos:end="516:32"><name pos:start="516:15" pos:end="516:32">US898_TC2_CERT_TXT</name></expr></argument>, <argument pos:start="516:35" pos:end="516:80"><expr pos:start="516:35" pos:end="516:80"><literal type="string" pos:start="516:35" pos:end="516:80">"00:e3:ca:38:65:fb:9c:46:a6:22:b1:be:17:bc:50"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="517:5" pos:end="517:23"><expr pos:start="517:5" pos:end="517:22"><call pos:start="517:5" pos:end="517:22"><name pos:start="517:5" pos:end="517:13">CU_ASSERT</name><argument_list pos:start="517:14" pos:end="517:22">(<argument pos:start="517:15" pos:end="517:21"><expr pos:start="517:15" pos:end="517:21"><name pos:start="517:15" pos:end="517:16">rv</name> <operator pos:start="517:18" pos:end="517:19">==</operator> <literal type="number" pos:start="517:21" pos:end="517:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="519:5" pos:end="521:7">/*
     * Clean up
     */</comment>
    <if_stmt pos:start="522:5" pos:end="522:33"><if pos:start="522:5" pos:end="522:33">if <condition pos:start="522:8" pos:end="522:17">(<expr pos:start="522:9" pos:end="522:16"><name pos:start="522:9" pos:end="522:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="522:19" pos:end="522:33"><block_content pos:start="522:19" pos:end="522:33"> <expr_stmt pos:start="522:19" pos:end="522:33"><expr pos:start="522:19" pos:end="522:32"><call pos:start="522:19" pos:end="522:32"><name pos:start="522:19" pos:end="522:22">free</name><argument_list pos:start="522:23" pos:end="522:32">(<argument pos:start="522:24" pos:end="522:31"><expr pos:start="522:24" pos:end="522:31"><name pos:start="522:24" pos:end="522:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="523:5" pos:end="523:22"><expr pos:start="523:5" pos:end="523:21"><call pos:start="523:5" pos:end="523:21"><name pos:start="523:5" pos:end="523:15">est_destroy</name><argument_list pos:start="523:16" pos:end="523:21">(<argument pos:start="523:17" pos:end="523:20"><expr pos:start="523:17" pos:end="523:20"><name pos:start="523:17" pos:end="523:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="526:1" pos:end="529:3">/*
 * Test the re-enroll API to ensure it gracefully
 * handles a null X509 cert pointer.
 */</comment>
<function pos:start="530:1" pos:end="583:1"><type pos:start="530:1" pos:end="530:11"><specifier pos:start="530:1" pos:end="530:6">static</specifier> <name pos:start="530:8" pos:end="530:11">void</name></type> <name pos:start="530:13" pos:end="530:23">us898_test3</name> <parameter_list pos:start="530:25" pos:end="530:30">(<parameter pos:start="530:26" pos:end="530:29"><decl pos:start="530:26" pos:end="530:29"><type pos:start="530:26" pos:end="530:29"><name pos:start="530:26" pos:end="530:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="531:1" pos:end="583:1">{<block_content pos:start="532:5" pos:end="582:22">
    <decl_stmt pos:start="532:5" pos:end="532:18"><decl pos:start="532:5" pos:end="532:17"><type pos:start="532:5" pos:end="532:13"><name pos:start="532:5" pos:end="532:11">EST_CTX</name> <modifier pos:start="532:13" pos:end="532:13">*</modifier></type><name pos:start="532:14" pos:end="532:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="533:5" pos:end="533:18"><decl pos:start="533:5" pos:end="533:17"><type pos:start="533:5" pos:end="533:14"><name pos:start="533:5" pos:end="533:12">EVP_PKEY</name> <modifier pos:start="533:14" pos:end="533:14">*</modifier></type><name pos:start="533:15" pos:end="533:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="534:5" pos:end="534:22"><decl pos:start="534:5" pos:end="534:21"><type pos:start="534:5" pos:end="534:7"><name pos:start="534:5" pos:end="534:7">int</name></type> <name pos:start="534:9" pos:end="534:17">pkcs7_len</name> <init pos:start="534:19" pos:end="534:21">= <expr pos:start="534:21" pos:end="534:21"><literal type="number" pos:start="534:21" pos:end="534:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="535:5" pos:end="535:11"><decl pos:start="535:5" pos:end="535:10"><type pos:start="535:5" pos:end="535:7"><name pos:start="535:5" pos:end="535:7">int</name></type> <name pos:start="535:9" pos:end="535:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="536:5" pos:end="536:36"><decl pos:start="536:5" pos:end="536:35"><type pos:start="536:5" pos:end="536:19"><name pos:start="536:5" pos:end="536:12">unsigned</name> <name pos:start="536:14" pos:end="536:17">char</name> <modifier pos:start="536:19" pos:end="536:19">*</modifier></type><name pos:start="536:20" pos:end="536:28">attr_data</name> <init pos:start="536:30" pos:end="536:35">= <expr pos:start="536:32" pos:end="536:35"><name pos:start="536:32" pos:end="536:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="537:5" pos:end="537:17"><decl pos:start="537:5" pos:end="537:16"><type pos:start="537:5" pos:end="537:7"><name pos:start="537:5" pos:end="537:7">int</name></type> <name pos:start="537:9" pos:end="537:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="539:5" pos:end="539:16"><expr pos:start="539:5" pos:end="539:15"><name pos:start="539:5" pos:end="539:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="541:5" pos:end="543:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="544:5" pos:end="546:54"><expr pos:start="544:5" pos:end="546:53"><name pos:start="544:5" pos:end="544:8">ectx</name> <operator pos:start="544:10" pos:end="544:10">=</operator> <call pos:start="544:12" pos:end="546:53"><name pos:start="544:12" pos:end="544:26">est_client_init</name><argument_list pos:start="544:27" pos:end="546:53">(<argument pos:start="544:28" pos:end="544:34"><expr pos:start="544:28" pos:end="544:34"><name pos:start="544:28" pos:end="544:34">cacerts</name></expr></argument>, <argument pos:start="544:37" pos:end="544:47"><expr pos:start="544:37" pos:end="544:47"><name pos:start="544:37" pos:end="544:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="545:28" pos:end="545:46"><expr pos:start="545:28" pos:end="545:46"><name pos:start="545:28" pos:end="545:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="546:28" pos:end="546:52"><expr pos:start="546:28" pos:end="546:52"><name pos:start="546:28" pos:end="546:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="547:5" pos:end="547:28"><expr pos:start="547:5" pos:end="547:27"><call pos:start="547:5" pos:end="547:27"><name pos:start="547:5" pos:end="547:13">CU_ASSERT</name><argument_list pos:start="547:14" pos:end="547:27">(<argument pos:start="547:15" pos:end="547:26"><expr pos:start="547:15" pos:end="547:26"><name pos:start="547:15" pos:end="547:18">ectx</name> <operator pos:start="547:20" pos:end="547:21">!=</operator> <name pos:start="547:23" pos:end="547:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="549:5" pos:end="551:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="552:5" pos:end="552:69"><expr pos:start="552:5" pos:end="552:68"><name pos:start="552:5" pos:end="552:6">rv</name> <operator pos:start="552:8" pos:end="552:8">=</operator> <call pos:start="552:10" pos:end="552:68"><name pos:start="552:10" pos:end="552:28">est_client_set_auth</name><argument_list pos:start="552:29" pos:end="552:68">(<argument pos:start="552:30" pos:end="552:33"><expr pos:start="552:30" pos:end="552:33"><name pos:start="552:30" pos:end="552:33">ectx</name></expr></argument>, <argument pos:start="552:36" pos:end="552:44"><expr pos:start="552:36" pos:end="552:44"><name pos:start="552:36" pos:end="552:44">US898_UID</name></expr></argument>, <argument pos:start="552:47" pos:end="552:55"><expr pos:start="552:47" pos:end="552:55"><name pos:start="552:47" pos:end="552:55">US898_PWD</name></expr></argument>, <argument pos:start="552:58" pos:end="552:61"><expr pos:start="552:58" pos:end="552:61"><name pos:start="552:58" pos:end="552:61">NULL</name></expr></argument>, <argument pos:start="552:64" pos:end="552:67"><expr pos:start="552:64" pos:end="552:67"><name pos:start="552:64" pos:end="552:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="553:5" pos:end="553:34"><expr pos:start="553:5" pos:end="553:33"><call pos:start="553:5" pos:end="553:33"><name pos:start="553:5" pos:end="553:13">CU_ASSERT</name><argument_list pos:start="553:14" pos:end="553:33">(<argument pos:start="553:15" pos:end="553:32"><expr pos:start="553:15" pos:end="553:32"><name pos:start="553:15" pos:end="553:16">rv</name> <operator pos:start="553:18" pos:end="553:19">==</operator> <name pos:start="553:21" pos:end="553:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="555:5" pos:end="557:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="558:5" pos:end="558:74"><expr pos:start="558:5" pos:end="558:73"><call pos:start="558:5" pos:end="558:73"><name pos:start="558:5" pos:end="558:25">est_client_set_server</name><argument_list pos:start="558:26" pos:end="558:73">(<argument pos:start="558:27" pos:end="558:30"><expr pos:start="558:27" pos:end="558:30"><name pos:start="558:27" pos:end="558:30">ectx</name></expr></argument>, <argument pos:start="558:33" pos:end="558:47"><expr pos:start="558:33" pos:end="558:47"><name pos:start="558:33" pos:end="558:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="558:50" pos:end="558:66"><expr pos:start="558:50" pos:end="558:66"><name pos:start="558:50" pos:end="558:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="558:69" pos:end="558:72"><expr pos:start="558:69" pos:end="558:72"><name pos:start="558:69" pos:end="558:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="560:5" pos:end="562:7">/*
     * Generate a private key
     */</comment>
    <expr_stmt pos:start="563:5" pos:end="563:33"><expr pos:start="563:5" pos:end="563:32"><name pos:start="563:5" pos:end="563:7">key</name> <operator pos:start="563:9" pos:end="563:9">=</operator> <call pos:start="563:11" pos:end="563:32"><name pos:start="563:11" pos:end="563:30">generate_private_key</name><argument_list pos:start="563:31" pos:end="563:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="564:5" pos:end="564:27"><expr pos:start="564:5" pos:end="564:26"><call pos:start="564:5" pos:end="564:26"><name pos:start="564:5" pos:end="564:13">CU_ASSERT</name><argument_list pos:start="564:14" pos:end="564:26">(<argument pos:start="564:15" pos:end="564:25"><expr pos:start="564:15" pos:end="564:25"><name pos:start="564:15" pos:end="564:17">key</name> <operator pos:start="564:19" pos:end="564:20">!=</operator> <name pos:start="564:22" pos:end="564:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="566:5" pos:end="568:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="569:5" pos:end="569:62"><expr pos:start="569:5" pos:end="569:61"><name pos:start="569:5" pos:end="569:6">rv</name> <operator pos:start="569:8" pos:end="569:8">=</operator> <call pos:start="569:10" pos:end="569:61"><name pos:start="569:10" pos:end="569:32">est_client_get_csrattrs</name><argument_list pos:start="569:33" pos:end="569:61">(<argument pos:start="569:34" pos:end="569:37"><expr pos:start="569:34" pos:end="569:37"><name pos:start="569:34" pos:end="569:37">ectx</name></expr></argument>, <argument pos:start="569:40" pos:end="569:49"><expr pos:start="569:40" pos:end="569:49"><operator pos:start="569:40" pos:end="569:40">&amp;</operator><name pos:start="569:41" pos:end="569:49">attr_data</name></expr></argument>, <argument pos:start="569:52" pos:end="569:60"><expr pos:start="569:52" pos:end="569:60"><operator pos:start="569:52" pos:end="569:52">&amp;</operator><name pos:start="569:53" pos:end="569:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="570:5" pos:end="570:34"><expr pos:start="570:5" pos:end="570:33"><call pos:start="570:5" pos:end="570:33"><name pos:start="570:5" pos:end="570:13">CU_ASSERT</name><argument_list pos:start="570:14" pos:end="570:33">(<argument pos:start="570:15" pos:end="570:32"><expr pos:start="570:15" pos:end="570:32"><name pos:start="570:15" pos:end="570:16">rv</name> <operator pos:start="570:18" pos:end="570:19">==</operator> <name pos:start="570:21" pos:end="570:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="572:5" pos:end="574:7">/*
     * re-enroll using a null x509 pointer.
     */</comment>
    <expr_stmt pos:start="575:5" pos:end="575:58"><expr pos:start="575:5" pos:end="575:57"><name pos:start="575:5" pos:end="575:6">rv</name> <operator pos:start="575:8" pos:end="575:8">=</operator> <call pos:start="575:10" pos:end="575:57"><name pos:start="575:10" pos:end="575:28">est_client_reenroll</name><argument_list pos:start="575:29" pos:end="575:57">(<argument pos:start="575:30" pos:end="575:33"><expr pos:start="575:30" pos:end="575:33"><name pos:start="575:30" pos:end="575:33">ectx</name></expr></argument>, <argument pos:start="575:36" pos:end="575:39"><expr pos:start="575:36" pos:end="575:39"><name pos:start="575:36" pos:end="575:39">NULL</name></expr></argument>, <argument pos:start="575:42" pos:end="575:51"><expr pos:start="575:42" pos:end="575:51"><operator pos:start="575:42" pos:end="575:42">&amp;</operator><name pos:start="575:43" pos:end="575:51">pkcs7_len</name></expr></argument>, <argument pos:start="575:54" pos:end="575:56"><expr pos:start="575:54" pos:end="575:56"><name pos:start="575:54" pos:end="575:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="576:5" pos:end="576:37"><expr pos:start="576:5" pos:end="576:36"><call pos:start="576:5" pos:end="576:36"><name pos:start="576:5" pos:end="576:13">CU_ASSERT</name><argument_list pos:start="576:14" pos:end="576:36">(<argument pos:start="576:15" pos:end="576:35"><expr pos:start="576:15" pos:end="576:35"><name pos:start="576:15" pos:end="576:16">rv</name> <operator pos:start="576:18" pos:end="576:19">==</operator> <name pos:start="576:21" pos:end="576:35">EST_ERR_NO_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="578:5" pos:end="580:7">/*
     * Clean up
     */</comment>
    <expr_stmt pos:start="581:5" pos:end="581:23"><expr pos:start="581:5" pos:end="581:22"><call pos:start="581:5" pos:end="581:22"><name pos:start="581:5" pos:end="581:17">EVP_PKEY_free</name><argument_list pos:start="581:18" pos:end="581:22">(<argument pos:start="581:19" pos:end="581:21"><expr pos:start="581:19" pos:end="581:21"><name pos:start="581:19" pos:end="581:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="582:5" pos:end="582:22"><expr pos:start="582:5" pos:end="582:21"><call pos:start="582:5" pos:end="582:21"><name pos:start="582:5" pos:end="582:15">est_destroy</name><argument_list pos:start="582:16" pos:end="582:21">(<argument pos:start="582:17" pos:end="582:20"><expr pos:start="582:17" pos:end="582:20"><name pos:start="582:17" pos:end="582:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="585:1" pos:end="588:3">/*
 * Test the re-enroll API to ensure it gracefully
 * handles a null EVP_PKEY pointer.
 */</comment>
<function pos:start="589:1" pos:end="653:1"><type pos:start="589:1" pos:end="589:11"><specifier pos:start="589:1" pos:end="589:6">static</specifier> <name pos:start="589:8" pos:end="589:11">void</name></type> <name pos:start="589:13" pos:end="589:23">us898_test4</name> <parameter_list pos:start="589:25" pos:end="589:30">(<parameter pos:start="589:26" pos:end="589:29"><decl pos:start="589:26" pos:end="589:29"><type pos:start="589:26" pos:end="589:29"><name pos:start="589:26" pos:end="589:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="590:1" pos:end="653:1">{<block_content pos:start="591:5" pos:end="652:22">
    <decl_stmt pos:start="591:5" pos:end="591:18"><decl pos:start="591:5" pos:end="591:17"><type pos:start="591:5" pos:end="591:13"><name pos:start="591:5" pos:end="591:11">EST_CTX</name> <modifier pos:start="591:13" pos:end="591:13">*</modifier></type><name pos:start="591:14" pos:end="591:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="592:5" pos:end="592:22"><decl pos:start="592:5" pos:end="592:21"><type pos:start="592:5" pos:end="592:7"><name pos:start="592:5" pos:end="592:7">int</name></type> <name pos:start="592:9" pos:end="592:17">pkcs7_len</name> <init pos:start="592:19" pos:end="592:21">= <expr pos:start="592:21" pos:end="592:21"><literal type="number" pos:start="592:21" pos:end="592:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="593:5" pos:end="593:11"><decl pos:start="593:5" pos:end="593:10"><type pos:start="593:5" pos:end="593:7"><name pos:start="593:5" pos:end="593:7">int</name></type> <name pos:start="593:9" pos:end="593:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="594:5" pos:end="594:22"><decl pos:start="594:5" pos:end="594:21"><type pos:start="594:5" pos:end="594:10"><name pos:start="594:5" pos:end="594:8">X509</name> <modifier pos:start="594:10" pos:end="594:10">*</modifier></type><name pos:start="594:11" pos:end="594:14">cert</name> <init pos:start="594:16" pos:end="594:21">= <expr pos:start="594:18" pos:end="594:21"><name pos:start="594:18" pos:end="594:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="595:5" pos:end="595:28"><decl pos:start="595:5" pos:end="595:27"><type pos:start="595:5" pos:end="595:19"><name pos:start="595:5" pos:end="595:12">unsigned</name> <name pos:start="595:14" pos:end="595:17">char</name> <modifier pos:start="595:19" pos:end="595:19">*</modifier></type><name pos:start="595:20" pos:end="595:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="596:5" pos:end="596:17"><decl pos:start="596:5" pos:end="596:16"><type pos:start="596:5" pos:end="596:7"><name pos:start="596:5" pos:end="596:7">int</name></type> <name pos:start="596:9" pos:end="596:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="597:5" pos:end="597:12"><decl pos:start="597:5" pos:end="597:11"><type pos:start="597:5" pos:end="597:9"><name pos:start="597:5" pos:end="597:7">BIO</name> <modifier pos:start="597:9" pos:end="597:9">*</modifier></type><name pos:start="597:10" pos:end="597:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="598:5" pos:end="598:36"><decl pos:start="598:5" pos:end="598:35"><type pos:start="598:5" pos:end="598:19"><name pos:start="598:5" pos:end="598:12">unsigned</name> <name pos:start="598:14" pos:end="598:17">char</name> <modifier pos:start="598:19" pos:end="598:19">*</modifier></type><name pos:start="598:20" pos:end="598:28">attr_data</name> <init pos:start="598:30" pos:end="598:35">= <expr pos:start="598:32" pos:end="598:35"><name pos:start="598:32" pos:end="598:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="599:5" pos:end="599:17"><decl pos:start="599:5" pos:end="599:16"><type pos:start="599:5" pos:end="599:7"><name pos:start="599:5" pos:end="599:7">int</name></type> <name pos:start="599:9" pos:end="599:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="601:5" pos:end="601:16"><expr pos:start="601:5" pos:end="601:15"><name pos:start="601:5" pos:end="601:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="603:5" pos:end="605:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="606:5" pos:end="608:54"><expr pos:start="606:5" pos:end="608:53"><name pos:start="606:5" pos:end="606:8">ectx</name> <operator pos:start="606:10" pos:end="606:10">=</operator> <call pos:start="606:12" pos:end="608:53"><name pos:start="606:12" pos:end="606:26">est_client_init</name><argument_list pos:start="606:27" pos:end="608:53">(<argument pos:start="606:28" pos:end="606:34"><expr pos:start="606:28" pos:end="606:34"><name pos:start="606:28" pos:end="606:34">cacerts</name></expr></argument>, <argument pos:start="606:37" pos:end="606:47"><expr pos:start="606:37" pos:end="606:47"><name pos:start="606:37" pos:end="606:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="607:28" pos:end="607:46"><expr pos:start="607:28" pos:end="607:46"><name pos:start="607:28" pos:end="607:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="608:28" pos:end="608:52"><expr pos:start="608:28" pos:end="608:52"><name pos:start="608:28" pos:end="608:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="609:5" pos:end="609:28"><expr pos:start="609:5" pos:end="609:27"><call pos:start="609:5" pos:end="609:27"><name pos:start="609:5" pos:end="609:13">CU_ASSERT</name><argument_list pos:start="609:14" pos:end="609:27">(<argument pos:start="609:15" pos:end="609:26"><expr pos:start="609:15" pos:end="609:26"><name pos:start="609:15" pos:end="609:18">ectx</name> <operator pos:start="609:20" pos:end="609:21">!=</operator> <name pos:start="609:23" pos:end="609:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="611:5" pos:end="613:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="614:5" pos:end="614:69"><expr pos:start="614:5" pos:end="614:68"><name pos:start="614:5" pos:end="614:6">rv</name> <operator pos:start="614:8" pos:end="614:8">=</operator> <call pos:start="614:10" pos:end="614:68"><name pos:start="614:10" pos:end="614:28">est_client_set_auth</name><argument_list pos:start="614:29" pos:end="614:68">(<argument pos:start="614:30" pos:end="614:33"><expr pos:start="614:30" pos:end="614:33"><name pos:start="614:30" pos:end="614:33">ectx</name></expr></argument>, <argument pos:start="614:36" pos:end="614:44"><expr pos:start="614:36" pos:end="614:44"><name pos:start="614:36" pos:end="614:44">US898_UID</name></expr></argument>, <argument pos:start="614:47" pos:end="614:55"><expr pos:start="614:47" pos:end="614:55"><name pos:start="614:47" pos:end="614:55">US898_PWD</name></expr></argument>, <argument pos:start="614:58" pos:end="614:61"><expr pos:start="614:58" pos:end="614:61"><name pos:start="614:58" pos:end="614:61">NULL</name></expr></argument>, <argument pos:start="614:64" pos:end="614:67"><expr pos:start="614:64" pos:end="614:67"><name pos:start="614:64" pos:end="614:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="615:5" pos:end="615:34"><expr pos:start="615:5" pos:end="615:33"><call pos:start="615:5" pos:end="615:33"><name pos:start="615:5" pos:end="615:13">CU_ASSERT</name><argument_list pos:start="615:14" pos:end="615:33">(<argument pos:start="615:15" pos:end="615:32"><expr pos:start="615:15" pos:end="615:32"><name pos:start="615:15" pos:end="615:16">rv</name> <operator pos:start="615:18" pos:end="615:19">==</operator> <name pos:start="615:21" pos:end="615:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="617:5" pos:end="619:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="620:5" pos:end="620:74"><expr pos:start="620:5" pos:end="620:73"><call pos:start="620:5" pos:end="620:73"><name pos:start="620:5" pos:end="620:25">est_client_set_server</name><argument_list pos:start="620:26" pos:end="620:73">(<argument pos:start="620:27" pos:end="620:30"><expr pos:start="620:27" pos:end="620:30"><name pos:start="620:27" pos:end="620:30">ectx</name></expr></argument>, <argument pos:start="620:33" pos:end="620:47"><expr pos:start="620:33" pos:end="620:47"><name pos:start="620:33" pos:end="620:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="620:50" pos:end="620:66"><expr pos:start="620:50" pos:end="620:66"><name pos:start="620:50" pos:end="620:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="620:69" pos:end="620:72"><expr pos:start="620:69" pos:end="620:72"><name pos:start="620:69" pos:end="620:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="622:5" pos:end="624:7">/*
     * Read in an old cert that we can use for re-enroll
     */</comment>
    <expr_stmt pos:start="625:5" pos:end="625:69"><expr pos:start="625:5" pos:end="625:68"><name pos:start="625:5" pos:end="625:12">cert_len</name> <operator pos:start="625:14" pos:end="625:14">=</operator> <call pos:start="625:16" pos:end="625:68"><name pos:start="625:16" pos:end="625:31">read_binary_file</name><argument_list pos:start="625:32" pos:end="625:68">(<argument pos:start="625:33" pos:end="625:56"><expr pos:start="625:33" pos:end="625:56"><literal type="string" pos:start="625:33" pos:end="625:56">"US898/cert-expired.pem"</literal></expr></argument>, <argument pos:start="625:59" pos:end="625:67"><expr pos:start="625:59" pos:end="625:67"><operator pos:start="625:59" pos:end="625:59">&amp;</operator><name pos:start="625:60" pos:end="625:67">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="626:5" pos:end="626:28"><expr pos:start="626:5" pos:end="626:27"><call pos:start="626:5" pos:end="626:27"><name pos:start="626:5" pos:end="626:13">CU_ASSERT</name><argument_list pos:start="626:14" pos:end="626:27">(<argument pos:start="626:15" pos:end="626:26"><expr pos:start="626:15" pos:end="626:26"><name pos:start="626:15" pos:end="626:22">cert_len</name> <operator pos:start="626:24" pos:end="626:24">&gt;</operator> <literal type="number" pos:start="626:26" pos:end="626:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="627:5" pos:end="627:45"><expr pos:start="627:5" pos:end="627:44"><name pos:start="627:5" pos:end="627:6">in</name> <operator pos:start="627:8" pos:end="627:8">=</operator> <call pos:start="627:10" pos:end="627:44"><name pos:start="627:10" pos:end="627:24">BIO_new_mem_buf</name><argument_list pos:start="627:25" pos:end="627:44">(<argument pos:start="627:26" pos:end="627:33"><expr pos:start="627:26" pos:end="627:33"><name pos:start="627:26" pos:end="627:33">cert_raw</name></expr></argument>, <argument pos:start="627:36" pos:end="627:43"><expr pos:start="627:36" pos:end="627:43"><name pos:start="627:36" pos:end="627:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="628:5" pos:end="628:26"><expr pos:start="628:5" pos:end="628:25"><call pos:start="628:5" pos:end="628:25"><name pos:start="628:5" pos:end="628:13">CU_ASSERT</name><argument_list pos:start="628:14" pos:end="628:25">(<argument pos:start="628:15" pos:end="628:24"><expr pos:start="628:15" pos:end="628:24"><name pos:start="628:15" pos:end="628:16">in</name> <operator pos:start="628:18" pos:end="628:19">!=</operator> <name pos:start="628:21" pos:end="628:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="629:5" pos:end="629:20"><if pos:start="629:5" pos:end="629:20">if <condition pos:start="629:8" pos:end="629:12">(<expr pos:start="629:9" pos:end="629:11"><operator pos:start="629:9" pos:end="629:9">!</operator><name pos:start="629:10" pos:end="629:11">in</name></expr>)</condition><block type="pseudo" pos:start="629:14" pos:end="629:20"><block_content pos:start="629:14" pos:end="629:20"> <return pos:start="629:14" pos:end="629:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="630:5" pos:end="630:55"><expr pos:start="630:5" pos:end="630:54"><name pos:start="630:5" pos:end="630:8">cert</name> <operator pos:start="630:10" pos:end="630:10">=</operator> <call pos:start="630:12" pos:end="630:54"><name pos:start="630:12" pos:end="630:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="630:33" pos:end="630:54">(<argument pos:start="630:34" pos:end="630:35"><expr pos:start="630:34" pos:end="630:35"><name pos:start="630:34" pos:end="630:35">in</name></expr></argument>, <argument pos:start="630:38" pos:end="630:41"><expr pos:start="630:38" pos:end="630:41"><name pos:start="630:38" pos:end="630:41">NULL</name></expr></argument>, <argument pos:start="630:44" pos:end="630:47"><expr pos:start="630:44" pos:end="630:47"><name pos:start="630:44" pos:end="630:47">NULL</name></expr></argument>, <argument pos:start="630:50" pos:end="630:53"><expr pos:start="630:50" pos:end="630:53"><name pos:start="630:50" pos:end="630:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="631:5" pos:end="631:28"><expr pos:start="631:5" pos:end="631:27"><call pos:start="631:5" pos:end="631:27"><name pos:start="631:5" pos:end="631:13">CU_ASSERT</name><argument_list pos:start="631:14" pos:end="631:27">(<argument pos:start="631:15" pos:end="631:26"><expr pos:start="631:15" pos:end="631:26"><name pos:start="631:15" pos:end="631:18">cert</name> <operator pos:start="631:20" pos:end="631:21">!=</operator> <name pos:start="631:23" pos:end="631:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="632:5" pos:end="632:22"><if pos:start="632:5" pos:end="632:22">if <condition pos:start="632:8" pos:end="632:14">(<expr pos:start="632:9" pos:end="632:13"><operator pos:start="632:9" pos:end="632:9">!</operator><name pos:start="632:10" pos:end="632:13">cert</name></expr>)</condition><block type="pseudo" pos:start="632:16" pos:end="632:22"><block_content pos:start="632:16" pos:end="632:22"> <return pos:start="632:16" pos:end="632:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="633:5" pos:end="633:21"><expr pos:start="633:5" pos:end="633:20"><call pos:start="633:5" pos:end="633:20"><name pos:start="633:5" pos:end="633:16">BIO_free_all</name><argument_list pos:start="633:17" pos:end="633:20">(<argument pos:start="633:18" pos:end="633:19"><expr pos:start="633:18" pos:end="633:19"><name pos:start="633:18" pos:end="633:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="634:5" pos:end="634:19"><expr pos:start="634:5" pos:end="634:18"><call pos:start="634:5" pos:end="634:18"><name pos:start="634:5" pos:end="634:8">free</name><argument_list pos:start="634:9" pos:end="634:18">(<argument pos:start="634:10" pos:end="634:17"><expr pos:start="634:10" pos:end="634:17"><name pos:start="634:10" pos:end="634:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="636:5" pos:end="638:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="639:5" pos:end="639:62"><expr pos:start="639:5" pos:end="639:61"><name pos:start="639:5" pos:end="639:6">rv</name> <operator pos:start="639:8" pos:end="639:8">=</operator> <call pos:start="639:10" pos:end="639:61"><name pos:start="639:10" pos:end="639:32">est_client_get_csrattrs</name><argument_list pos:start="639:33" pos:end="639:61">(<argument pos:start="639:34" pos:end="639:37"><expr pos:start="639:34" pos:end="639:37"><name pos:start="639:34" pos:end="639:37">ectx</name></expr></argument>, <argument pos:start="639:40" pos:end="639:49"><expr pos:start="639:40" pos:end="639:49"><operator pos:start="639:40" pos:end="639:40">&amp;</operator><name pos:start="639:41" pos:end="639:49">attr_data</name></expr></argument>, <argument pos:start="639:52" pos:end="639:60"><expr pos:start="639:52" pos:end="639:60"><operator pos:start="639:52" pos:end="639:52">&amp;</operator><name pos:start="639:53" pos:end="639:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="640:5" pos:end="640:34"><expr pos:start="640:5" pos:end="640:33"><call pos:start="640:5" pos:end="640:33"><name pos:start="640:5" pos:end="640:13">CU_ASSERT</name><argument_list pos:start="640:14" pos:end="640:33">(<argument pos:start="640:15" pos:end="640:32"><expr pos:start="640:15" pos:end="640:32"><name pos:start="640:15" pos:end="640:16">rv</name> <operator pos:start="640:18" pos:end="640:19">==</operator> <name pos:start="640:21" pos:end="640:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="642:5" pos:end="644:7">/*
     * re-enroll using a null EVP_KEY pointer.
     */</comment>
    <expr_stmt pos:start="645:5" pos:end="645:59"><expr pos:start="645:5" pos:end="645:58"><name pos:start="645:5" pos:end="645:6">rv</name> <operator pos:start="645:8" pos:end="645:8">=</operator> <call pos:start="645:10" pos:end="645:58"><name pos:start="645:10" pos:end="645:28">est_client_reenroll</name><argument_list pos:start="645:29" pos:end="645:58">(<argument pos:start="645:30" pos:end="645:33"><expr pos:start="645:30" pos:end="645:33"><name pos:start="645:30" pos:end="645:33">ectx</name></expr></argument>, <argument pos:start="645:36" pos:end="645:39"><expr pos:start="645:36" pos:end="645:39"><name pos:start="645:36" pos:end="645:39">cert</name></expr></argument>, <argument pos:start="645:42" pos:end="645:51"><expr pos:start="645:42" pos:end="645:51"><operator pos:start="645:42" pos:end="645:42">&amp;</operator><name pos:start="645:43" pos:end="645:51">pkcs7_len</name></expr></argument>, <argument pos:start="645:54" pos:end="645:57"><expr pos:start="645:54" pos:end="645:57"><name pos:start="645:54" pos:end="645:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="646:5" pos:end="646:36"><expr pos:start="646:5" pos:end="646:35"><call pos:start="646:5" pos:end="646:35"><name pos:start="646:5" pos:end="646:13">CU_ASSERT</name><argument_list pos:start="646:14" pos:end="646:35">(<argument pos:start="646:15" pos:end="646:34"><expr pos:start="646:15" pos:end="646:34"><name pos:start="646:15" pos:end="646:16">rv</name> <operator pos:start="646:18" pos:end="646:19">==</operator> <name pos:start="646:21" pos:end="646:34">EST_ERR_NO_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="648:5" pos:end="650:7">/*
     * Clean up
     */</comment>
    <expr_stmt pos:start="651:5" pos:end="651:20"><expr pos:start="651:5" pos:end="651:19"><call pos:start="651:5" pos:end="651:19"><name pos:start="651:5" pos:end="651:13">X509_free</name><argument_list pos:start="651:14" pos:end="651:19">(<argument pos:start="651:15" pos:end="651:18"><expr pos:start="651:15" pos:end="651:18"><name pos:start="651:15" pos:end="651:18">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="652:5" pos:end="652:22"><expr pos:start="652:5" pos:end="652:21"><call pos:start="652:5" pos:end="652:21"><name pos:start="652:5" pos:end="652:15">est_destroy</name><argument_list pos:start="652:16" pos:end="652:21">(<argument pos:start="652:17" pos:end="652:20"><expr pos:start="652:17" pos:end="652:20"><name pos:start="652:17" pos:end="652:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="655:1" pos:end="658:3">/*
 * This test attempts to re-enroll a corrupted cert
 * The public key in the cert is has been corrupted.
 */</comment>
<function pos:start="659:1" pos:end="734:1"><type pos:start="659:1" pos:end="659:11"><specifier pos:start="659:1" pos:end="659:6">static</specifier> <name pos:start="659:8" pos:end="659:11">void</name></type> <name pos:start="659:13" pos:end="659:23">us898_test5</name> <parameter_list pos:start="659:25" pos:end="659:30">(<parameter pos:start="659:26" pos:end="659:29"><decl pos:start="659:26" pos:end="659:29"><type pos:start="659:26" pos:end="659:29"><name pos:start="659:26" pos:end="659:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="660:1" pos:end="734:1">{<block_content pos:start="661:5" pos:end="733:22">
    <decl_stmt pos:start="661:5" pos:end="661:18"><decl pos:start="661:5" pos:end="661:17"><type pos:start="661:5" pos:end="661:13"><name pos:start="661:5" pos:end="661:11">EST_CTX</name> <modifier pos:start="661:13" pos:end="661:13">*</modifier></type><name pos:start="661:14" pos:end="661:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="662:5" pos:end="662:18"><decl pos:start="662:5" pos:end="662:17"><type pos:start="662:5" pos:end="662:14"><name pos:start="662:5" pos:end="662:12">EVP_PKEY</name> <modifier pos:start="662:14" pos:end="662:14">*</modifier></type><name pos:start="662:15" pos:end="662:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="663:5" pos:end="663:27"><decl pos:start="663:5" pos:end="663:26"><type pos:start="663:5" pos:end="663:19"><name pos:start="663:5" pos:end="663:12">unsigned</name> <name pos:start="663:14" pos:end="663:17">char</name> <modifier pos:start="663:19" pos:end="663:19">*</modifier></type><name pos:start="663:20" pos:end="663:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="664:5" pos:end="664:16"><decl pos:start="664:5" pos:end="664:15"><type pos:start="664:5" pos:end="664:7"><name pos:start="664:5" pos:end="664:7">int</name></type> <name pos:start="664:9" pos:end="664:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="665:5" pos:end="665:28"><decl pos:start="665:5" pos:end="665:27"><type pos:start="665:5" pos:end="665:19"><name pos:start="665:5" pos:end="665:12">unsigned</name> <name pos:start="665:14" pos:end="665:17">char</name> <modifier pos:start="665:19" pos:end="665:19">*</modifier></type><name pos:start="665:20" pos:end="665:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="666:5" pos:end="666:17"><decl pos:start="666:5" pos:end="666:16"><type pos:start="666:5" pos:end="666:7"><name pos:start="666:5" pos:end="666:7">int</name></type> <name pos:start="666:9" pos:end="666:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="667:5" pos:end="667:11"><decl pos:start="667:5" pos:end="667:10"><type pos:start="667:5" pos:end="667:7"><name pos:start="667:5" pos:end="667:7">int</name></type> <name pos:start="667:9" pos:end="667:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="668:5" pos:end="668:22"><decl pos:start="668:5" pos:end="668:21"><type pos:start="668:5" pos:end="668:7"><name pos:start="668:5" pos:end="668:7">int</name></type> <name pos:start="668:9" pos:end="668:17">pkcs7_len</name> <init pos:start="668:19" pos:end="668:21">= <expr pos:start="668:21" pos:end="668:21"><literal type="number" pos:start="668:21" pos:end="668:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="669:5" pos:end="669:22"><decl pos:start="669:5" pos:end="669:21"><type pos:start="669:5" pos:end="669:10"><name pos:start="669:5" pos:end="669:8">X509</name> <modifier pos:start="669:10" pos:end="669:10">*</modifier></type><name pos:start="669:11" pos:end="669:14">cert</name> <init pos:start="669:16" pos:end="669:21">= <expr pos:start="669:18" pos:end="669:21"><name pos:start="669:18" pos:end="669:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="670:5" pos:end="670:12"><decl pos:start="670:5" pos:end="670:11"><type pos:start="670:5" pos:end="670:9"><name pos:start="670:5" pos:end="670:7">BIO</name> <modifier pos:start="670:9" pos:end="670:9">*</modifier></type><name pos:start="670:10" pos:end="670:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="671:5" pos:end="671:36"><decl pos:start="671:5" pos:end="671:35"><type pos:start="671:5" pos:end="671:19"><name pos:start="671:5" pos:end="671:12">unsigned</name> <name pos:start="671:14" pos:end="671:17">char</name> <modifier pos:start="671:19" pos:end="671:19">*</modifier></type><name pos:start="671:20" pos:end="671:28">attr_data</name> <init pos:start="671:30" pos:end="671:35">= <expr pos:start="671:32" pos:end="671:35"><name pos:start="671:32" pos:end="671:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="672:5" pos:end="672:17"><decl pos:start="672:5" pos:end="672:16"><type pos:start="672:5" pos:end="672:7"><name pos:start="672:5" pos:end="672:7">int</name></type> <name pos:start="672:9" pos:end="672:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="674:5" pos:end="674:16"><expr pos:start="674:5" pos:end="674:15"><name pos:start="674:5" pos:end="674:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="676:5" pos:end="678:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="679:5" pos:end="681:54"><expr pos:start="679:5" pos:end="681:53"><name pos:start="679:5" pos:end="679:8">ectx</name> <operator pos:start="679:10" pos:end="679:10">=</operator> <call pos:start="679:12" pos:end="681:53"><name pos:start="679:12" pos:end="679:26">est_client_init</name><argument_list pos:start="679:27" pos:end="681:53">(<argument pos:start="679:28" pos:end="679:34"><expr pos:start="679:28" pos:end="679:34"><name pos:start="679:28" pos:end="679:34">cacerts</name></expr></argument>, <argument pos:start="679:37" pos:end="679:47"><expr pos:start="679:37" pos:end="679:47"><name pos:start="679:37" pos:end="679:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="680:28" pos:end="680:46"><expr pos:start="680:28" pos:end="680:46"><name pos:start="680:28" pos:end="680:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="681:28" pos:end="681:52"><expr pos:start="681:28" pos:end="681:52"><name pos:start="681:28" pos:end="681:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="682:5" pos:end="682:28"><expr pos:start="682:5" pos:end="682:27"><call pos:start="682:5" pos:end="682:27"><name pos:start="682:5" pos:end="682:13">CU_ASSERT</name><argument_list pos:start="682:14" pos:end="682:27">(<argument pos:start="682:15" pos:end="682:26"><expr pos:start="682:15" pos:end="682:26"><name pos:start="682:15" pos:end="682:18">ectx</name> <operator pos:start="682:20" pos:end="682:21">!=</operator> <name pos:start="682:23" pos:end="682:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="684:5" pos:end="686:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="687:5" pos:end="687:69"><expr pos:start="687:5" pos:end="687:68"><name pos:start="687:5" pos:end="687:6">rv</name> <operator pos:start="687:8" pos:end="687:8">=</operator> <call pos:start="687:10" pos:end="687:68"><name pos:start="687:10" pos:end="687:28">est_client_set_auth</name><argument_list pos:start="687:29" pos:end="687:68">(<argument pos:start="687:30" pos:end="687:33"><expr pos:start="687:30" pos:end="687:33"><name pos:start="687:30" pos:end="687:33">ectx</name></expr></argument>, <argument pos:start="687:36" pos:end="687:44"><expr pos:start="687:36" pos:end="687:44"><name pos:start="687:36" pos:end="687:44">US898_UID</name></expr></argument>, <argument pos:start="687:47" pos:end="687:55"><expr pos:start="687:47" pos:end="687:55"><name pos:start="687:47" pos:end="687:55">US898_PWD</name></expr></argument>, <argument pos:start="687:58" pos:end="687:61"><expr pos:start="687:58" pos:end="687:61"><name pos:start="687:58" pos:end="687:61">NULL</name></expr></argument>, <argument pos:start="687:64" pos:end="687:67"><expr pos:start="687:64" pos:end="687:67"><name pos:start="687:64" pos:end="687:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="688:5" pos:end="688:34"><expr pos:start="688:5" pos:end="688:33"><call pos:start="688:5" pos:end="688:33"><name pos:start="688:5" pos:end="688:13">CU_ASSERT</name><argument_list pos:start="688:14" pos:end="688:33">(<argument pos:start="688:15" pos:end="688:32"><expr pos:start="688:15" pos:end="688:32"><name pos:start="688:15" pos:end="688:16">rv</name> <operator pos:start="688:18" pos:end="688:19">==</operator> <name pos:start="688:21" pos:end="688:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="690:5" pos:end="692:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="693:5" pos:end="693:74"><expr pos:start="693:5" pos:end="693:73"><call pos:start="693:5" pos:end="693:73"><name pos:start="693:5" pos:end="693:25">est_client_set_server</name><argument_list pos:start="693:26" pos:end="693:73">(<argument pos:start="693:27" pos:end="693:30"><expr pos:start="693:27" pos:end="693:30"><name pos:start="693:27" pos:end="693:30">ectx</name></expr></argument>, <argument pos:start="693:33" pos:end="693:47"><expr pos:start="693:33" pos:end="693:47"><name pos:start="693:33" pos:end="693:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="693:50" pos:end="693:66"><expr pos:start="693:50" pos:end="693:66"><name pos:start="693:50" pos:end="693:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="693:69" pos:end="693:72"><expr pos:start="693:69" pos:end="693:72"><name pos:start="693:69" pos:end="693:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="695:5" pos:end="697:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="698:5" pos:end="698:66"><expr pos:start="698:5" pos:end="698:65"><name pos:start="698:5" pos:end="698:11">key_len</name> <operator pos:start="698:13" pos:end="698:13">=</operator> <call pos:start="698:15" pos:end="698:65"><name pos:start="698:15" pos:end="698:30">read_binary_file</name><argument_list pos:start="698:31" pos:end="698:65">(<argument pos:start="698:32" pos:end="698:54"><expr pos:start="698:32" pos:end="698:54"><literal type="string" pos:start="698:32" pos:end="698:54">"US898/key-corrupt.pem"</literal></expr></argument>, <argument pos:start="698:57" pos:end="698:64"><expr pos:start="698:57" pos:end="698:64"><operator pos:start="698:57" pos:end="698:57">&amp;</operator><name pos:start="698:58" pos:end="698:64">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="699:5" pos:end="699:27"><expr pos:start="699:5" pos:end="699:26"><call pos:start="699:5" pos:end="699:26"><name pos:start="699:5" pos:end="699:13">CU_ASSERT</name><argument_list pos:start="699:14" pos:end="699:26">(<argument pos:start="699:15" pos:end="699:25"><expr pos:start="699:15" pos:end="699:25"><name pos:start="699:15" pos:end="699:21">key_len</name> <operator pos:start="699:23" pos:end="699:23">&gt;</operator> <literal type="number" pos:start="699:25" pos:end="699:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="700:5" pos:end="700:57"><expr pos:start="700:5" pos:end="700:56"><name pos:start="700:5" pos:end="700:7">key</name> <operator pos:start="700:9" pos:end="700:9">=</operator> <call pos:start="700:11" pos:end="700:56"><name pos:start="700:11" pos:end="700:22">est_load_key</name><argument_list pos:start="700:23" pos:end="700:56">(<argument pos:start="700:24" pos:end="700:30"><expr pos:start="700:24" pos:end="700:30"><name pos:start="700:24" pos:end="700:30">key_raw</name></expr></argument>, <argument pos:start="700:33" pos:end="700:39"><expr pos:start="700:33" pos:end="700:39"><name pos:start="700:33" pos:end="700:39">key_len</name></expr></argument>, <argument pos:start="700:42" pos:end="700:55"><expr pos:start="700:42" pos:end="700:55"><name pos:start="700:42" pos:end="700:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="701:5" pos:end="701:27"><expr pos:start="701:5" pos:end="701:26"><call pos:start="701:5" pos:end="701:26"><name pos:start="701:5" pos:end="701:13">CU_ASSERT</name><argument_list pos:start="701:14" pos:end="701:26">(<argument pos:start="701:15" pos:end="701:25"><expr pos:start="701:15" pos:end="701:25"><name pos:start="701:15" pos:end="701:17">key</name> <operator pos:start="701:19" pos:end="701:20">!=</operator> <name pos:start="701:22" pos:end="701:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="702:5" pos:end="702:18"><expr pos:start="702:5" pos:end="702:17"><call pos:start="702:5" pos:end="702:17"><name pos:start="702:5" pos:end="702:8">free</name><argument_list pos:start="702:9" pos:end="702:17">(<argument pos:start="702:10" pos:end="702:16"><expr pos:start="702:10" pos:end="702:16"><name pos:start="702:10" pos:end="702:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="704:5" pos:end="706:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="707:5" pos:end="707:69"><expr pos:start="707:5" pos:end="707:68"><name pos:start="707:5" pos:end="707:12">cert_len</name> <operator pos:start="707:14" pos:end="707:14">=</operator> <call pos:start="707:16" pos:end="707:68"><name pos:start="707:16" pos:end="707:31">read_binary_file</name><argument_list pos:start="707:32" pos:end="707:68">(<argument pos:start="707:33" pos:end="707:56"><expr pos:start="707:33" pos:end="707:56"><literal type="string" pos:start="707:33" pos:end="707:56">"US898/cert-corrupt.pem"</literal></expr></argument>, <argument pos:start="707:59" pos:end="707:67"><expr pos:start="707:59" pos:end="707:67"><operator pos:start="707:59" pos:end="707:59">&amp;</operator><name pos:start="707:60" pos:end="707:67">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="708:5" pos:end="708:28"><expr pos:start="708:5" pos:end="708:27"><call pos:start="708:5" pos:end="708:27"><name pos:start="708:5" pos:end="708:13">CU_ASSERT</name><argument_list pos:start="708:14" pos:end="708:27">(<argument pos:start="708:15" pos:end="708:26"><expr pos:start="708:15" pos:end="708:26"><name pos:start="708:15" pos:end="708:22">cert_len</name> <operator pos:start="708:24" pos:end="708:24">&gt;</operator> <literal type="number" pos:start="708:26" pos:end="708:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="709:5" pos:end="709:45"><expr pos:start="709:5" pos:end="709:44"><name pos:start="709:5" pos:end="709:6">in</name> <operator pos:start="709:8" pos:end="709:8">=</operator> <call pos:start="709:10" pos:end="709:44"><name pos:start="709:10" pos:end="709:24">BIO_new_mem_buf</name><argument_list pos:start="709:25" pos:end="709:44">(<argument pos:start="709:26" pos:end="709:33"><expr pos:start="709:26" pos:end="709:33"><name pos:start="709:26" pos:end="709:33">cert_raw</name></expr></argument>, <argument pos:start="709:36" pos:end="709:43"><expr pos:start="709:36" pos:end="709:43"><name pos:start="709:36" pos:end="709:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="710:5" pos:end="710:26"><expr pos:start="710:5" pos:end="710:25"><call pos:start="710:5" pos:end="710:25"><name pos:start="710:5" pos:end="710:13">CU_ASSERT</name><argument_list pos:start="710:14" pos:end="710:25">(<argument pos:start="710:15" pos:end="710:24"><expr pos:start="710:15" pos:end="710:24"><name pos:start="710:15" pos:end="710:16">in</name> <operator pos:start="710:18" pos:end="710:19">!=</operator> <name pos:start="710:21" pos:end="710:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="711:5" pos:end="711:20"><if pos:start="711:5" pos:end="711:20">if <condition pos:start="711:8" pos:end="711:12">(<expr pos:start="711:9" pos:end="711:11"><operator pos:start="711:9" pos:end="711:9">!</operator><name pos:start="711:10" pos:end="711:11">in</name></expr>)</condition><block type="pseudo" pos:start="711:14" pos:end="711:20"><block_content pos:start="711:14" pos:end="711:20"> <return pos:start="711:14" pos:end="711:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="712:5" pos:end="712:55"><expr pos:start="712:5" pos:end="712:54"><name pos:start="712:5" pos:end="712:8">cert</name> <operator pos:start="712:10" pos:end="712:10">=</operator> <call pos:start="712:12" pos:end="712:54"><name pos:start="712:12" pos:end="712:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="712:33" pos:end="712:54">(<argument pos:start="712:34" pos:end="712:35"><expr pos:start="712:34" pos:end="712:35"><name pos:start="712:34" pos:end="712:35">in</name></expr></argument>, <argument pos:start="712:38" pos:end="712:41"><expr pos:start="712:38" pos:end="712:41"><name pos:start="712:38" pos:end="712:41">NULL</name></expr></argument>, <argument pos:start="712:44" pos:end="712:47"><expr pos:start="712:44" pos:end="712:47"><name pos:start="712:44" pos:end="712:47">NULL</name></expr></argument>, <argument pos:start="712:50" pos:end="712:53"><expr pos:start="712:50" pos:end="712:53"><name pos:start="712:50" pos:end="712:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="713:5" pos:end="713:28"><expr pos:start="713:5" pos:end="713:27"><call pos:start="713:5" pos:end="713:27"><name pos:start="713:5" pos:end="713:13">CU_ASSERT</name><argument_list pos:start="713:14" pos:end="713:27">(<argument pos:start="713:15" pos:end="713:26"><expr pos:start="713:15" pos:end="713:26"><name pos:start="713:15" pos:end="713:18">cert</name> <operator pos:start="713:20" pos:end="713:21">!=</operator> <name pos:start="713:23" pos:end="713:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="714:5" pos:end="714:22"><if pos:start="714:5" pos:end="714:22">if <condition pos:start="714:8" pos:end="714:14">(<expr pos:start="714:9" pos:end="714:13"><operator pos:start="714:9" pos:end="714:9">!</operator><name pos:start="714:10" pos:end="714:13">cert</name></expr>)</condition><block type="pseudo" pos:start="714:16" pos:end="714:22"><block_content pos:start="714:16" pos:end="714:22"> <return pos:start="714:16" pos:end="714:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="715:5" pos:end="715:21"><expr pos:start="715:5" pos:end="715:20"><call pos:start="715:5" pos:end="715:20"><name pos:start="715:5" pos:end="715:16">BIO_free_all</name><argument_list pos:start="715:17" pos:end="715:20">(<argument pos:start="715:18" pos:end="715:19"><expr pos:start="715:18" pos:end="715:19"><name pos:start="715:18" pos:end="715:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="716:5" pos:end="716:19"><expr pos:start="716:5" pos:end="716:18"><call pos:start="716:5" pos:end="716:18"><name pos:start="716:5" pos:end="716:8">free</name><argument_list pos:start="716:9" pos:end="716:18">(<argument pos:start="716:10" pos:end="716:17"><expr pos:start="716:10" pos:end="716:17"><name pos:start="716:10" pos:end="716:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="718:5" pos:end="720:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="721:5" pos:end="721:62"><expr pos:start="721:5" pos:end="721:61"><name pos:start="721:5" pos:end="721:6">rv</name> <operator pos:start="721:8" pos:end="721:8">=</operator> <call pos:start="721:10" pos:end="721:61"><name pos:start="721:10" pos:end="721:32">est_client_get_csrattrs</name><argument_list pos:start="721:33" pos:end="721:61">(<argument pos:start="721:34" pos:end="721:37"><expr pos:start="721:34" pos:end="721:37"><name pos:start="721:34" pos:end="721:37">ectx</name></expr></argument>, <argument pos:start="721:40" pos:end="721:49"><expr pos:start="721:40" pos:end="721:49"><operator pos:start="721:40" pos:end="721:40">&amp;</operator><name pos:start="721:41" pos:end="721:49">attr_data</name></expr></argument>, <argument pos:start="721:52" pos:end="721:60"><expr pos:start="721:52" pos:end="721:60"><operator pos:start="721:52" pos:end="721:52">&amp;</operator><name pos:start="721:53" pos:end="721:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="722:5" pos:end="722:34"><expr pos:start="722:5" pos:end="722:33"><call pos:start="722:5" pos:end="722:33"><name pos:start="722:5" pos:end="722:13">CU_ASSERT</name><argument_list pos:start="722:14" pos:end="722:33">(<argument pos:start="722:15" pos:end="722:32"><expr pos:start="722:15" pos:end="722:32"><name pos:start="722:15" pos:end="722:16">rv</name> <operator pos:start="722:18" pos:end="722:19">==</operator> <name pos:start="722:21" pos:end="722:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="724:5" pos:end="726:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="727:5" pos:end="727:58"><expr pos:start="727:5" pos:end="727:57"><name pos:start="727:5" pos:end="727:6">rv</name> <operator pos:start="727:8" pos:end="727:8">=</operator> <call pos:start="727:10" pos:end="727:57"><name pos:start="727:10" pos:end="727:28">est_client_reenroll</name><argument_list pos:start="727:29" pos:end="727:57">(<argument pos:start="727:30" pos:end="727:33"><expr pos:start="727:30" pos:end="727:33"><name pos:start="727:30" pos:end="727:33">ectx</name></expr></argument>, <argument pos:start="727:36" pos:end="727:39"><expr pos:start="727:36" pos:end="727:39"><name pos:start="727:36" pos:end="727:39">cert</name></expr></argument>, <argument pos:start="727:42" pos:end="727:51"><expr pos:start="727:42" pos:end="727:51"><operator pos:start="727:42" pos:end="727:42">&amp;</operator><name pos:start="727:43" pos:end="727:51">pkcs7_len</name></expr></argument>, <argument pos:start="727:54" pos:end="727:56"><expr pos:start="727:54" pos:end="727:56"><name pos:start="727:54" pos:end="727:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="728:5" pos:end="728:48"><expr pos:start="728:5" pos:end="728:47"><call pos:start="728:5" pos:end="728:47"><name pos:start="728:5" pos:end="728:13">CU_ASSERT</name><argument_list pos:start="728:14" pos:end="728:47">(<argument pos:start="728:15" pos:end="728:46"><expr pos:start="728:15" pos:end="728:46"><name pos:start="728:15" pos:end="728:16">rv</name> <operator pos:start="728:18" pos:end="728:19">==</operator> <name pos:start="728:21" pos:end="728:46">EST_ERR_CLIENT_INVALID_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="730:5" pos:end="732:7">/*
     * Clean up
     */</comment>
    <expr_stmt pos:start="733:5" pos:end="733:22"><expr pos:start="733:5" pos:end="733:21"><call pos:start="733:5" pos:end="733:21"><name pos:start="733:5" pos:end="733:15">est_destroy</name><argument_list pos:start="733:16" pos:end="733:21">(<argument pos:start="733:17" pos:end="733:20"><expr pos:start="733:17" pos:end="733:20"><name pos:start="733:17" pos:end="733:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="736:1" pos:end="741:3">/*
 * This test attempts to re-enroll an expired cert
 * while the EST server is configured for manual
 * approval.  The server will send back a retry-after
 * response.
 */</comment>
<function pos:start="742:1" pos:end="839:1"><type pos:start="742:1" pos:end="742:11"><specifier pos:start="742:1" pos:end="742:6">static</specifier> <name pos:start="742:8" pos:end="742:11">void</name></type> <name pos:start="742:13" pos:end="742:23">us898_test6</name> <parameter_list pos:start="742:25" pos:end="742:30">(<parameter pos:start="742:26" pos:end="742:29"><decl pos:start="742:26" pos:end="742:29"><type pos:start="742:26" pos:end="742:29"><name pos:start="742:26" pos:end="742:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="743:1" pos:end="839:1">{<block_content pos:start="744:5" pos:end="838:23">
    <decl_stmt pos:start="744:5" pos:end="744:18"><decl pos:start="744:5" pos:end="744:17"><type pos:start="744:5" pos:end="744:13"><name pos:start="744:5" pos:end="744:11">EST_CTX</name> <modifier pos:start="744:13" pos:end="744:13">*</modifier></type><name pos:start="744:14" pos:end="744:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="745:5" pos:end="745:18"><decl pos:start="745:5" pos:end="745:17"><type pos:start="745:5" pos:end="745:14"><name pos:start="745:5" pos:end="745:12">EVP_PKEY</name> <modifier pos:start="745:14" pos:end="745:14">*</modifier></type><name pos:start="745:15" pos:end="745:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="746:5" pos:end="746:27"><decl pos:start="746:5" pos:end="746:26"><type pos:start="746:5" pos:end="746:19"><name pos:start="746:5" pos:end="746:12">unsigned</name> <name pos:start="746:14" pos:end="746:17">char</name> <modifier pos:start="746:19" pos:end="746:19">*</modifier></type><name pos:start="746:20" pos:end="746:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="747:5" pos:end="747:16"><decl pos:start="747:5" pos:end="747:15"><type pos:start="747:5" pos:end="747:7"><name pos:start="747:5" pos:end="747:7">int</name></type> <name pos:start="747:9" pos:end="747:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="748:5" pos:end="748:28"><decl pos:start="748:5" pos:end="748:27"><type pos:start="748:5" pos:end="748:19"><name pos:start="748:5" pos:end="748:12">unsigned</name> <name pos:start="748:14" pos:end="748:17">char</name> <modifier pos:start="748:19" pos:end="748:19">*</modifier></type><name pos:start="748:20" pos:end="748:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="749:5" pos:end="749:17"><decl pos:start="749:5" pos:end="749:16"><type pos:start="749:5" pos:end="749:7"><name pos:start="749:5" pos:end="749:7">int</name></type> <name pos:start="749:9" pos:end="749:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="750:5" pos:end="750:11"><decl pos:start="750:5" pos:end="750:10"><type pos:start="750:5" pos:end="750:7"><name pos:start="750:5" pos:end="750:7">int</name></type> <name pos:start="750:9" pos:end="750:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="751:5" pos:end="751:22"><decl pos:start="751:5" pos:end="751:21"><type pos:start="751:5" pos:end="751:7"><name pos:start="751:5" pos:end="751:7">int</name></type> <name pos:start="751:9" pos:end="751:17">pkcs7_len</name> <init pos:start="751:19" pos:end="751:21">= <expr pos:start="751:21" pos:end="751:21"><literal type="number" pos:start="751:21" pos:end="751:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="752:5" pos:end="752:22"><decl pos:start="752:5" pos:end="752:21"><type pos:start="752:5" pos:end="752:10"><name pos:start="752:5" pos:end="752:8">X509</name> <modifier pos:start="752:10" pos:end="752:10">*</modifier></type><name pos:start="752:11" pos:end="752:14">cert</name> <init pos:start="752:16" pos:end="752:21">= <expr pos:start="752:18" pos:end="752:21"><name pos:start="752:18" pos:end="752:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="753:5" pos:end="753:12"><decl pos:start="753:5" pos:end="753:11"><type pos:start="753:5" pos:end="753:9"><name pos:start="753:5" pos:end="753:7">BIO</name> <modifier pos:start="753:9" pos:end="753:9">*</modifier></type><name pos:start="753:10" pos:end="753:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="754:5" pos:end="754:36"><decl pos:start="754:5" pos:end="754:35"><type pos:start="754:5" pos:end="754:19"><name pos:start="754:5" pos:end="754:12">unsigned</name> <name pos:start="754:14" pos:end="754:17">char</name> <modifier pos:start="754:19" pos:end="754:19">*</modifier></type><name pos:start="754:20" pos:end="754:28">attr_data</name> <init pos:start="754:30" pos:end="754:35">= <expr pos:start="754:32" pos:end="754:35"><name pos:start="754:32" pos:end="754:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="755:5" pos:end="755:17"><decl pos:start="755:5" pos:end="755:16"><type pos:start="755:5" pos:end="755:7"><name pos:start="755:5" pos:end="755:7">int</name></type> <name pos:start="755:9" pos:end="755:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="757:5" pos:end="757:16"><expr pos:start="757:5" pos:end="757:15"><name pos:start="757:5" pos:end="757:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="759:5" pos:end="761:7">/*
     * Stop the server.
     */</comment>
    <expr_stmt pos:start="762:5" pos:end="762:14"><expr pos:start="762:5" pos:end="762:13"><call pos:start="762:5" pos:end="762:13"><name pos:start="762:5" pos:end="762:11">st_stop</name><argument_list pos:start="762:12" pos:end="762:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="764:5" pos:end="766:7">/*
     * Restart the server with manual approval enabled
     */</comment>
    <expr_stmt pos:start="767:5" pos:end="767:34"><expr pos:start="767:5" pos:end="767:33"><name pos:start="767:5" pos:end="767:6">rv</name> <operator pos:start="767:8" pos:end="767:8">=</operator> <call pos:start="767:10" pos:end="767:33"><name pos:start="767:10" pos:end="767:27">us898_start_server</name><argument_list pos:start="767:28" pos:end="767:33">(<argument pos:start="767:29" pos:end="767:29"><expr pos:start="767:29" pos:end="767:29"><literal type="number" pos:start="767:29" pos:end="767:29">1</literal></expr></argument>, <argument pos:start="767:32" pos:end="767:32"><expr pos:start="767:32" pos:end="767:32"><literal type="number" pos:start="767:32" pos:end="767:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="768:5" pos:end="768:23"><expr pos:start="768:5" pos:end="768:22"><call pos:start="768:5" pos:end="768:22"><name pos:start="768:5" pos:end="768:13">CU_ASSERT</name><argument_list pos:start="768:14" pos:end="768:22">(<argument pos:start="768:15" pos:end="768:21"><expr pos:start="768:15" pos:end="768:21"><name pos:start="768:15" pos:end="768:16">rv</name> <operator pos:start="768:18" pos:end="768:19">==</operator> <literal type="number" pos:start="768:21" pos:end="768:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="770:5" pos:end="772:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="773:5" pos:end="775:54"><expr pos:start="773:5" pos:end="775:53"><name pos:start="773:5" pos:end="773:8">ectx</name> <operator pos:start="773:10" pos:end="773:10">=</operator> <call pos:start="773:12" pos:end="775:53"><name pos:start="773:12" pos:end="773:26">est_client_init</name><argument_list pos:start="773:27" pos:end="775:53">(<argument pos:start="773:28" pos:end="773:34"><expr pos:start="773:28" pos:end="773:34"><name pos:start="773:28" pos:end="773:34">cacerts</name></expr></argument>, <argument pos:start="773:37" pos:end="773:47"><expr pos:start="773:37" pos:end="773:47"><name pos:start="773:37" pos:end="773:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="774:28" pos:end="774:46"><expr pos:start="774:28" pos:end="774:46"><name pos:start="774:28" pos:end="774:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="775:28" pos:end="775:52"><expr pos:start="775:28" pos:end="775:52"><name pos:start="775:28" pos:end="775:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="776:5" pos:end="776:28"><expr pos:start="776:5" pos:end="776:27"><call pos:start="776:5" pos:end="776:27"><name pos:start="776:5" pos:end="776:13">CU_ASSERT</name><argument_list pos:start="776:14" pos:end="776:27">(<argument pos:start="776:15" pos:end="776:26"><expr pos:start="776:15" pos:end="776:26"><name pos:start="776:15" pos:end="776:18">ectx</name> <operator pos:start="776:20" pos:end="776:21">!=</operator> <name pos:start="776:23" pos:end="776:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="778:5" pos:end="780:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="781:5" pos:end="781:69"><expr pos:start="781:5" pos:end="781:68"><name pos:start="781:5" pos:end="781:6">rv</name> <operator pos:start="781:8" pos:end="781:8">=</operator> <call pos:start="781:10" pos:end="781:68"><name pos:start="781:10" pos:end="781:28">est_client_set_auth</name><argument_list pos:start="781:29" pos:end="781:68">(<argument pos:start="781:30" pos:end="781:33"><expr pos:start="781:30" pos:end="781:33"><name pos:start="781:30" pos:end="781:33">ectx</name></expr></argument>, <argument pos:start="781:36" pos:end="781:44"><expr pos:start="781:36" pos:end="781:44"><name pos:start="781:36" pos:end="781:44">US898_UID</name></expr></argument>, <argument pos:start="781:47" pos:end="781:55"><expr pos:start="781:47" pos:end="781:55"><name pos:start="781:47" pos:end="781:55">US898_PWD</name></expr></argument>, <argument pos:start="781:58" pos:end="781:61"><expr pos:start="781:58" pos:end="781:61"><name pos:start="781:58" pos:end="781:61">NULL</name></expr></argument>, <argument pos:start="781:64" pos:end="781:67"><expr pos:start="781:64" pos:end="781:67"><name pos:start="781:64" pos:end="781:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="782:5" pos:end="782:34"><expr pos:start="782:5" pos:end="782:33"><call pos:start="782:5" pos:end="782:33"><name pos:start="782:5" pos:end="782:13">CU_ASSERT</name><argument_list pos:start="782:14" pos:end="782:33">(<argument pos:start="782:15" pos:end="782:32"><expr pos:start="782:15" pos:end="782:32"><name pos:start="782:15" pos:end="782:16">rv</name> <operator pos:start="782:18" pos:end="782:19">==</operator> <name pos:start="782:21" pos:end="782:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="784:5" pos:end="786:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="787:5" pos:end="787:74"><expr pos:start="787:5" pos:end="787:73"><call pos:start="787:5" pos:end="787:73"><name pos:start="787:5" pos:end="787:25">est_client_set_server</name><argument_list pos:start="787:26" pos:end="787:73">(<argument pos:start="787:27" pos:end="787:30"><expr pos:start="787:27" pos:end="787:30"><name pos:start="787:27" pos:end="787:30">ectx</name></expr></argument>, <argument pos:start="787:33" pos:end="787:47"><expr pos:start="787:33" pos:end="787:47"><name pos:start="787:33" pos:end="787:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="787:50" pos:end="787:66"><expr pos:start="787:50" pos:end="787:66"><name pos:start="787:50" pos:end="787:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="787:69" pos:end="787:72"><expr pos:start="787:69" pos:end="787:72"><name pos:start="787:69" pos:end="787:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="789:5" pos:end="791:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="792:5" pos:end="792:66"><expr pos:start="792:5" pos:end="792:65"><name pos:start="792:5" pos:end="792:11">key_len</name> <operator pos:start="792:13" pos:end="792:13">=</operator> <call pos:start="792:15" pos:end="792:65"><name pos:start="792:15" pos:end="792:30">read_binary_file</name><argument_list pos:start="792:31" pos:end="792:65">(<argument pos:start="792:32" pos:end="792:54"><expr pos:start="792:32" pos:end="792:54"><literal type="string" pos:start="792:32" pos:end="792:54">"US898/key-expired.pem"</literal></expr></argument>, <argument pos:start="792:57" pos:end="792:64"><expr pos:start="792:57" pos:end="792:64"><operator pos:start="792:57" pos:end="792:57">&amp;</operator><name pos:start="792:58" pos:end="792:64">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="793:5" pos:end="793:27"><expr pos:start="793:5" pos:end="793:26"><call pos:start="793:5" pos:end="793:26"><name pos:start="793:5" pos:end="793:13">CU_ASSERT</name><argument_list pos:start="793:14" pos:end="793:26">(<argument pos:start="793:15" pos:end="793:25"><expr pos:start="793:15" pos:end="793:25"><name pos:start="793:15" pos:end="793:21">key_len</name> <operator pos:start="793:23" pos:end="793:23">&gt;</operator> <literal type="number" pos:start="793:25" pos:end="793:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="794:5" pos:end="794:57"><expr pos:start="794:5" pos:end="794:56"><name pos:start="794:5" pos:end="794:7">key</name> <operator pos:start="794:9" pos:end="794:9">=</operator> <call pos:start="794:11" pos:end="794:56"><name pos:start="794:11" pos:end="794:22">est_load_key</name><argument_list pos:start="794:23" pos:end="794:56">(<argument pos:start="794:24" pos:end="794:30"><expr pos:start="794:24" pos:end="794:30"><name pos:start="794:24" pos:end="794:30">key_raw</name></expr></argument>, <argument pos:start="794:33" pos:end="794:39"><expr pos:start="794:33" pos:end="794:39"><name pos:start="794:33" pos:end="794:39">key_len</name></expr></argument>, <argument pos:start="794:42" pos:end="794:55"><expr pos:start="794:42" pos:end="794:55"><name pos:start="794:42" pos:end="794:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="795:5" pos:end="795:27"><expr pos:start="795:5" pos:end="795:26"><call pos:start="795:5" pos:end="795:26"><name pos:start="795:5" pos:end="795:13">CU_ASSERT</name><argument_list pos:start="795:14" pos:end="795:26">(<argument pos:start="795:15" pos:end="795:25"><expr pos:start="795:15" pos:end="795:25"><name pos:start="795:15" pos:end="795:17">key</name> <operator pos:start="795:19" pos:end="795:20">!=</operator> <name pos:start="795:22" pos:end="795:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="796:5" pos:end="796:18"><expr pos:start="796:5" pos:end="796:17"><call pos:start="796:5" pos:end="796:17"><name pos:start="796:5" pos:end="796:8">free</name><argument_list pos:start="796:9" pos:end="796:17">(<argument pos:start="796:10" pos:end="796:16"><expr pos:start="796:10" pos:end="796:16"><name pos:start="796:10" pos:end="796:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="798:5" pos:end="800:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="801:5" pos:end="801:69"><expr pos:start="801:5" pos:end="801:68"><name pos:start="801:5" pos:end="801:12">cert_len</name> <operator pos:start="801:14" pos:end="801:14">=</operator> <call pos:start="801:16" pos:end="801:68"><name pos:start="801:16" pos:end="801:31">read_binary_file</name><argument_list pos:start="801:32" pos:end="801:68">(<argument pos:start="801:33" pos:end="801:56"><expr pos:start="801:33" pos:end="801:56"><literal type="string" pos:start="801:33" pos:end="801:56">"US898/cert-expired.pem"</literal></expr></argument>, <argument pos:start="801:59" pos:end="801:67"><expr pos:start="801:59" pos:end="801:67"><operator pos:start="801:59" pos:end="801:59">&amp;</operator><name pos:start="801:60" pos:end="801:67">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="802:5" pos:end="802:28"><expr pos:start="802:5" pos:end="802:27"><call pos:start="802:5" pos:end="802:27"><name pos:start="802:5" pos:end="802:13">CU_ASSERT</name><argument_list pos:start="802:14" pos:end="802:27">(<argument pos:start="802:15" pos:end="802:26"><expr pos:start="802:15" pos:end="802:26"><name pos:start="802:15" pos:end="802:22">cert_len</name> <operator pos:start="802:24" pos:end="802:24">&gt;</operator> <literal type="number" pos:start="802:26" pos:end="802:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="803:5" pos:end="803:45"><expr pos:start="803:5" pos:end="803:44"><name pos:start="803:5" pos:end="803:6">in</name> <operator pos:start="803:8" pos:end="803:8">=</operator> <call pos:start="803:10" pos:end="803:44"><name pos:start="803:10" pos:end="803:24">BIO_new_mem_buf</name><argument_list pos:start="803:25" pos:end="803:44">(<argument pos:start="803:26" pos:end="803:33"><expr pos:start="803:26" pos:end="803:33"><name pos:start="803:26" pos:end="803:33">cert_raw</name></expr></argument>, <argument pos:start="803:36" pos:end="803:43"><expr pos:start="803:36" pos:end="803:43"><name pos:start="803:36" pos:end="803:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="804:5" pos:end="804:26"><expr pos:start="804:5" pos:end="804:25"><call pos:start="804:5" pos:end="804:25"><name pos:start="804:5" pos:end="804:13">CU_ASSERT</name><argument_list pos:start="804:14" pos:end="804:25">(<argument pos:start="804:15" pos:end="804:24"><expr pos:start="804:15" pos:end="804:24"><name pos:start="804:15" pos:end="804:16">in</name> <operator pos:start="804:18" pos:end="804:19">!=</operator> <name pos:start="804:21" pos:end="804:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="805:5" pos:end="805:20"><if pos:start="805:5" pos:end="805:20">if <condition pos:start="805:8" pos:end="805:12">(<expr pos:start="805:9" pos:end="805:11"><operator pos:start="805:9" pos:end="805:9">!</operator><name pos:start="805:10" pos:end="805:11">in</name></expr>)</condition><block type="pseudo" pos:start="805:14" pos:end="805:20"><block_content pos:start="805:14" pos:end="805:20"> <return pos:start="805:14" pos:end="805:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="806:5" pos:end="806:55"><expr pos:start="806:5" pos:end="806:54"><name pos:start="806:5" pos:end="806:8">cert</name> <operator pos:start="806:10" pos:end="806:10">=</operator> <call pos:start="806:12" pos:end="806:54"><name pos:start="806:12" pos:end="806:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="806:33" pos:end="806:54">(<argument pos:start="806:34" pos:end="806:35"><expr pos:start="806:34" pos:end="806:35"><name pos:start="806:34" pos:end="806:35">in</name></expr></argument>, <argument pos:start="806:38" pos:end="806:41"><expr pos:start="806:38" pos:end="806:41"><name pos:start="806:38" pos:end="806:41">NULL</name></expr></argument>, <argument pos:start="806:44" pos:end="806:47"><expr pos:start="806:44" pos:end="806:47"><name pos:start="806:44" pos:end="806:47">NULL</name></expr></argument>, <argument pos:start="806:50" pos:end="806:53"><expr pos:start="806:50" pos:end="806:53"><name pos:start="806:50" pos:end="806:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="807:5" pos:end="807:28"><expr pos:start="807:5" pos:end="807:27"><call pos:start="807:5" pos:end="807:27"><name pos:start="807:5" pos:end="807:13">CU_ASSERT</name><argument_list pos:start="807:14" pos:end="807:27">(<argument pos:start="807:15" pos:end="807:26"><expr pos:start="807:15" pos:end="807:26"><name pos:start="807:15" pos:end="807:18">cert</name> <operator pos:start="807:20" pos:end="807:21">!=</operator> <name pos:start="807:23" pos:end="807:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="808:5" pos:end="808:22"><if pos:start="808:5" pos:end="808:22">if <condition pos:start="808:8" pos:end="808:14">(<expr pos:start="808:9" pos:end="808:13"><operator pos:start="808:9" pos:end="808:9">!</operator><name pos:start="808:10" pos:end="808:13">cert</name></expr>)</condition><block type="pseudo" pos:start="808:16" pos:end="808:22"><block_content pos:start="808:16" pos:end="808:22"> <return pos:start="808:16" pos:end="808:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="809:5" pos:end="809:21"><expr pos:start="809:5" pos:end="809:20"><call pos:start="809:5" pos:end="809:20"><name pos:start="809:5" pos:end="809:16">BIO_free_all</name><argument_list pos:start="809:17" pos:end="809:20">(<argument pos:start="809:18" pos:end="809:19"><expr pos:start="809:18" pos:end="809:19"><name pos:start="809:18" pos:end="809:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="810:5" pos:end="810:19"><expr pos:start="810:5" pos:end="810:18"><call pos:start="810:5" pos:end="810:18"><name pos:start="810:5" pos:end="810:8">free</name><argument_list pos:start="810:9" pos:end="810:18">(<argument pos:start="810:10" pos:end="810:17"><expr pos:start="810:10" pos:end="810:17"><name pos:start="810:10" pos:end="810:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="812:5" pos:end="814:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="815:5" pos:end="815:62"><expr pos:start="815:5" pos:end="815:61"><name pos:start="815:5" pos:end="815:6">rv</name> <operator pos:start="815:8" pos:end="815:8">=</operator> <call pos:start="815:10" pos:end="815:61"><name pos:start="815:10" pos:end="815:32">est_client_get_csrattrs</name><argument_list pos:start="815:33" pos:end="815:61">(<argument pos:start="815:34" pos:end="815:37"><expr pos:start="815:34" pos:end="815:37"><name pos:start="815:34" pos:end="815:37">ectx</name></expr></argument>, <argument pos:start="815:40" pos:end="815:49"><expr pos:start="815:40" pos:end="815:49"><operator pos:start="815:40" pos:end="815:40">&amp;</operator><name pos:start="815:41" pos:end="815:49">attr_data</name></expr></argument>, <argument pos:start="815:52" pos:end="815:60"><expr pos:start="815:52" pos:end="815:60"><operator pos:start="815:52" pos:end="815:52">&amp;</operator><name pos:start="815:53" pos:end="815:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="816:5" pos:end="816:34"><expr pos:start="816:5" pos:end="816:33"><call pos:start="816:5" pos:end="816:33"><name pos:start="816:5" pos:end="816:13">CU_ASSERT</name><argument_list pos:start="816:14" pos:end="816:33">(<argument pos:start="816:15" pos:end="816:32"><expr pos:start="816:15" pos:end="816:32"><name pos:start="816:15" pos:end="816:16">rv</name> <operator pos:start="816:18" pos:end="816:19">==</operator> <name pos:start="816:21" pos:end="816:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="818:5" pos:end="820:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="821:5" pos:end="821:58"><expr pos:start="821:5" pos:end="821:57"><name pos:start="821:5" pos:end="821:6">rv</name> <operator pos:start="821:8" pos:end="821:8">=</operator> <call pos:start="821:10" pos:end="821:57"><name pos:start="821:10" pos:end="821:28">est_client_reenroll</name><argument_list pos:start="821:29" pos:end="821:57">(<argument pos:start="821:30" pos:end="821:33"><expr pos:start="821:30" pos:end="821:33"><name pos:start="821:30" pos:end="821:33">ectx</name></expr></argument>, <argument pos:start="821:36" pos:end="821:39"><expr pos:start="821:36" pos:end="821:39"><name pos:start="821:36" pos:end="821:39">cert</name></expr></argument>, <argument pos:start="821:42" pos:end="821:51"><expr pos:start="821:42" pos:end="821:51"><operator pos:start="821:42" pos:end="821:42">&amp;</operator><name pos:start="821:43" pos:end="821:51">pkcs7_len</name></expr></argument>, <argument pos:start="821:54" pos:end="821:56"><expr pos:start="821:54" pos:end="821:56"><name pos:start="821:54" pos:end="821:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="822:5" pos:end="822:45"><expr pos:start="822:5" pos:end="822:44"><call pos:start="822:5" pos:end="822:44"><name pos:start="822:5" pos:end="822:13">CU_ASSERT</name><argument_list pos:start="822:14" pos:end="822:44">(<argument pos:start="822:15" pos:end="822:43"><expr pos:start="822:15" pos:end="822:43"><name pos:start="822:15" pos:end="822:16">rv</name> <operator pos:start="822:18" pos:end="822:19">==</operator> <name pos:start="822:21" pos:end="822:43">EST_ERR_CA_ENROLL_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="824:5" pos:end="826:7">/*
     * Clean up
     */</comment>
    <expr_stmt pos:start="827:5" pos:end="827:22"><expr pos:start="827:5" pos:end="827:21"><call pos:start="827:5" pos:end="827:21"><name pos:start="827:5" pos:end="827:15">est_destroy</name><argument_list pos:start="827:16" pos:end="827:21">(<argument pos:start="827:17" pos:end="827:20"><expr pos:start="827:17" pos:end="827:20"><name pos:start="827:17" pos:end="827:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="829:5" pos:end="831:7">/*
     * Stop the server.
     */</comment>
    <expr_stmt pos:start="832:5" pos:end="832:14"><expr pos:start="832:5" pos:end="832:13"><call pos:start="832:5" pos:end="832:13"><name pos:start="832:5" pos:end="832:11">st_stop</name><argument_list pos:start="832:12" pos:end="832:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="834:5" pos:end="836:7">/*
     * Restart the server with manual approval disabled
     */</comment>
    <expr_stmt pos:start="837:5" pos:end="837:34"><expr pos:start="837:5" pos:end="837:33"><name pos:start="837:5" pos:end="837:6">rv</name> <operator pos:start="837:8" pos:end="837:8">=</operator> <call pos:start="837:10" pos:end="837:33"><name pos:start="837:10" pos:end="837:27">us898_start_server</name><argument_list pos:start="837:28" pos:end="837:33">(<argument pos:start="837:29" pos:end="837:29"><expr pos:start="837:29" pos:end="837:29"><literal type="number" pos:start="837:29" pos:end="837:29">0</literal></expr></argument>, <argument pos:start="837:32" pos:end="837:32"><expr pos:start="837:32" pos:end="837:32"><literal type="number" pos:start="837:32" pos:end="837:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="838:5" pos:end="838:23"><expr pos:start="838:5" pos:end="838:22"><call pos:start="838:5" pos:end="838:22"><name pos:start="838:5" pos:end="838:13">CU_ASSERT</name><argument_list pos:start="838:14" pos:end="838:22">(<argument pos:start="838:15" pos:end="838:21"><expr pos:start="838:15" pos:end="838:21"><name pos:start="838:15" pos:end="838:16">rv</name> <operator pos:start="838:18" pos:end="838:19">==</operator> <literal type="number" pos:start="838:21" pos:end="838:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="841:1" pos:end="844:3">/*
 * Verify that a bogus user ID/password fails when
 * using HTTP basic auth.
 */</comment>
<function pos:start="845:1" pos:end="917:1"><type pos:start="845:1" pos:end="845:11"><specifier pos:start="845:1" pos:end="845:6">static</specifier> <name pos:start="845:8" pos:end="845:11">void</name></type> <name pos:start="845:13" pos:end="845:23">us898_test7</name> <parameter_list pos:start="845:25" pos:end="845:30">(<parameter pos:start="845:26" pos:end="845:29"><decl pos:start="845:26" pos:end="845:29"><type pos:start="845:26" pos:end="845:29"><name pos:start="845:26" pos:end="845:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="846:1" pos:end="917:1">{<block_content pos:start="847:5" pos:end="916:22">
    <decl_stmt pos:start="847:5" pos:end="847:18"><decl pos:start="847:5" pos:end="847:17"><type pos:start="847:5" pos:end="847:13"><name pos:start="847:5" pos:end="847:11">EST_CTX</name> <modifier pos:start="847:13" pos:end="847:13">*</modifier></type><name pos:start="847:14" pos:end="847:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="848:5" pos:end="848:18"><decl pos:start="848:5" pos:end="848:17"><type pos:start="848:5" pos:end="848:14"><name pos:start="848:5" pos:end="848:12">EVP_PKEY</name> <modifier pos:start="848:14" pos:end="848:14">*</modifier></type><name pos:start="848:15" pos:end="848:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="849:5" pos:end="849:27"><decl pos:start="849:5" pos:end="849:26"><type pos:start="849:5" pos:end="849:19"><name pos:start="849:5" pos:end="849:12">unsigned</name> <name pos:start="849:14" pos:end="849:17">char</name> <modifier pos:start="849:19" pos:end="849:19">*</modifier></type><name pos:start="849:20" pos:end="849:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="850:5" pos:end="850:16"><decl pos:start="850:5" pos:end="850:15"><type pos:start="850:5" pos:end="850:7"><name pos:start="850:5" pos:end="850:7">int</name></type> <name pos:start="850:9" pos:end="850:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="851:5" pos:end="851:28"><decl pos:start="851:5" pos:end="851:27"><type pos:start="851:5" pos:end="851:19"><name pos:start="851:5" pos:end="851:12">unsigned</name> <name pos:start="851:14" pos:end="851:17">char</name> <modifier pos:start="851:19" pos:end="851:19">*</modifier></type><name pos:start="851:20" pos:end="851:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="852:5" pos:end="852:17"><decl pos:start="852:5" pos:end="852:16"><type pos:start="852:5" pos:end="852:7"><name pos:start="852:5" pos:end="852:7">int</name></type> <name pos:start="852:9" pos:end="852:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="853:5" pos:end="853:11"><decl pos:start="853:5" pos:end="853:10"><type pos:start="853:5" pos:end="853:7"><name pos:start="853:5" pos:end="853:7">int</name></type> <name pos:start="853:9" pos:end="853:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="854:5" pos:end="854:22"><decl pos:start="854:5" pos:end="854:21"><type pos:start="854:5" pos:end="854:7"><name pos:start="854:5" pos:end="854:7">int</name></type> <name pos:start="854:9" pos:end="854:17">pkcs7_len</name> <init pos:start="854:19" pos:end="854:21">= <expr pos:start="854:21" pos:end="854:21"><literal type="number" pos:start="854:21" pos:end="854:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="855:5" pos:end="855:22"><decl pos:start="855:5" pos:end="855:21"><type pos:start="855:5" pos:end="855:10"><name pos:start="855:5" pos:end="855:8">X509</name> <modifier pos:start="855:10" pos:end="855:10">*</modifier></type><name pos:start="855:11" pos:end="855:14">cert</name> <init pos:start="855:16" pos:end="855:21">= <expr pos:start="855:18" pos:end="855:21"><name pos:start="855:18" pos:end="855:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="856:5" pos:end="856:12"><decl pos:start="856:5" pos:end="856:11"><type pos:start="856:5" pos:end="856:9"><name pos:start="856:5" pos:end="856:7">BIO</name> <modifier pos:start="856:9" pos:end="856:9">*</modifier></type><name pos:start="856:10" pos:end="856:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="857:5" pos:end="857:36"><decl pos:start="857:5" pos:end="857:35"><type pos:start="857:5" pos:end="857:19"><name pos:start="857:5" pos:end="857:12">unsigned</name> <name pos:start="857:14" pos:end="857:17">char</name> <modifier pos:start="857:19" pos:end="857:19">*</modifier></type><name pos:start="857:20" pos:end="857:28">attr_data</name> <init pos:start="857:30" pos:end="857:35">= <expr pos:start="857:32" pos:end="857:35"><name pos:start="857:32" pos:end="857:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="858:5" pos:end="858:17"><decl pos:start="858:5" pos:end="858:16"><type pos:start="858:5" pos:end="858:7"><name pos:start="858:5" pos:end="858:7">int</name></type> <name pos:start="858:9" pos:end="858:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="860:5" pos:end="860:16"><expr pos:start="860:5" pos:end="860:15"><name pos:start="860:5" pos:end="860:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="862:5" pos:end="864:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="865:5" pos:end="867:54"><expr pos:start="865:5" pos:end="867:53"><name pos:start="865:5" pos:end="865:8">ectx</name> <operator pos:start="865:10" pos:end="865:10">=</operator> <call pos:start="865:12" pos:end="867:53"><name pos:start="865:12" pos:end="865:26">est_client_init</name><argument_list pos:start="865:27" pos:end="867:53">(<argument pos:start="865:28" pos:end="865:34"><expr pos:start="865:28" pos:end="865:34"><name pos:start="865:28" pos:end="865:34">cacerts</name></expr></argument>, <argument pos:start="865:37" pos:end="865:47"><expr pos:start="865:37" pos:end="865:47"><name pos:start="865:37" pos:end="865:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="866:28" pos:end="866:46"><expr pos:start="866:28" pos:end="866:46"><name pos:start="866:28" pos:end="866:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="867:28" pos:end="867:52"><expr pos:start="867:28" pos:end="867:52"><name pos:start="867:28" pos:end="867:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="868:5" pos:end="868:28"><expr pos:start="868:5" pos:end="868:27"><call pos:start="868:5" pos:end="868:27"><name pos:start="868:5" pos:end="868:13">CU_ASSERT</name><argument_list pos:start="868:14" pos:end="868:27">(<argument pos:start="868:15" pos:end="868:26"><expr pos:start="868:15" pos:end="868:26"><name pos:start="868:15" pos:end="868:18">ectx</name> <operator pos:start="868:20" pos:end="868:21">!=</operator> <name pos:start="868:23" pos:end="868:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="870:5" pos:end="872:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="873:5" pos:end="873:66"><expr pos:start="873:5" pos:end="873:65"><name pos:start="873:5" pos:end="873:6">rv</name> <operator pos:start="873:8" pos:end="873:8">=</operator> <call pos:start="873:10" pos:end="873:65"><name pos:start="873:10" pos:end="873:28">est_client_set_auth</name><argument_list pos:start="873:29" pos:end="873:65">(<argument pos:start="873:30" pos:end="873:33"><expr pos:start="873:30" pos:end="873:33"><name pos:start="873:30" pos:end="873:33">ectx</name></expr></argument>, <argument pos:start="873:36" pos:end="873:43"><expr pos:start="873:36" pos:end="873:43"><literal type="string" pos:start="873:36" pos:end="873:43">"hoagie"</literal></expr></argument>, <argument pos:start="873:46" pos:end="873:52"><expr pos:start="873:46" pos:end="873:52"><literal type="string" pos:start="873:46" pos:end="873:52">"chili"</literal></expr></argument>, <argument pos:start="873:55" pos:end="873:58"><expr pos:start="873:55" pos:end="873:58"><name pos:start="873:55" pos:end="873:58">NULL</name></expr></argument>, <argument pos:start="873:61" pos:end="873:64"><expr pos:start="873:61" pos:end="873:64"><name pos:start="873:61" pos:end="873:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="874:5" pos:end="874:34"><expr pos:start="874:5" pos:end="874:33"><call pos:start="874:5" pos:end="874:33"><name pos:start="874:5" pos:end="874:13">CU_ASSERT</name><argument_list pos:start="874:14" pos:end="874:33">(<argument pos:start="874:15" pos:end="874:32"><expr pos:start="874:15" pos:end="874:32"><name pos:start="874:15" pos:end="874:16">rv</name> <operator pos:start="874:18" pos:end="874:19">==</operator> <name pos:start="874:21" pos:end="874:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="876:5" pos:end="878:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="879:5" pos:end="879:74"><expr pos:start="879:5" pos:end="879:73"><call pos:start="879:5" pos:end="879:73"><name pos:start="879:5" pos:end="879:25">est_client_set_server</name><argument_list pos:start="879:26" pos:end="879:73">(<argument pos:start="879:27" pos:end="879:30"><expr pos:start="879:27" pos:end="879:30"><name pos:start="879:27" pos:end="879:30">ectx</name></expr></argument>, <argument pos:start="879:33" pos:end="879:47"><expr pos:start="879:33" pos:end="879:47"><name pos:start="879:33" pos:end="879:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="879:50" pos:end="879:66"><expr pos:start="879:50" pos:end="879:66"><name pos:start="879:50" pos:end="879:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="879:69" pos:end="879:72"><expr pos:start="879:69" pos:end="879:72"><name pos:start="879:69" pos:end="879:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="881:5" pos:end="883:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="884:5" pos:end="884:66"><expr pos:start="884:5" pos:end="884:65"><name pos:start="884:5" pos:end="884:11">key_len</name> <operator pos:start="884:13" pos:end="884:13">=</operator> <call pos:start="884:15" pos:end="884:65"><name pos:start="884:15" pos:end="884:30">read_binary_file</name><argument_list pos:start="884:31" pos:end="884:65">(<argument pos:start="884:32" pos:end="884:54"><expr pos:start="884:32" pos:end="884:54"><literal type="string" pos:start="884:32" pos:end="884:54">"US898/key-expired.pem"</literal></expr></argument>, <argument pos:start="884:57" pos:end="884:64"><expr pos:start="884:57" pos:end="884:64"><operator pos:start="884:57" pos:end="884:57">&amp;</operator><name pos:start="884:58" pos:end="884:64">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="885:5" pos:end="885:27"><expr pos:start="885:5" pos:end="885:26"><call pos:start="885:5" pos:end="885:26"><name pos:start="885:5" pos:end="885:13">CU_ASSERT</name><argument_list pos:start="885:14" pos:end="885:26">(<argument pos:start="885:15" pos:end="885:25"><expr pos:start="885:15" pos:end="885:25"><name pos:start="885:15" pos:end="885:21">key_len</name> <operator pos:start="885:23" pos:end="885:23">&gt;</operator> <literal type="number" pos:start="885:25" pos:end="885:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="886:5" pos:end="886:57"><expr pos:start="886:5" pos:end="886:56"><name pos:start="886:5" pos:end="886:7">key</name> <operator pos:start="886:9" pos:end="886:9">=</operator> <call pos:start="886:11" pos:end="886:56"><name pos:start="886:11" pos:end="886:22">est_load_key</name><argument_list pos:start="886:23" pos:end="886:56">(<argument pos:start="886:24" pos:end="886:30"><expr pos:start="886:24" pos:end="886:30"><name pos:start="886:24" pos:end="886:30">key_raw</name></expr></argument>, <argument pos:start="886:33" pos:end="886:39"><expr pos:start="886:33" pos:end="886:39"><name pos:start="886:33" pos:end="886:39">key_len</name></expr></argument>, <argument pos:start="886:42" pos:end="886:55"><expr pos:start="886:42" pos:end="886:55"><name pos:start="886:42" pos:end="886:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="887:5" pos:end="887:27"><expr pos:start="887:5" pos:end="887:26"><call pos:start="887:5" pos:end="887:26"><name pos:start="887:5" pos:end="887:13">CU_ASSERT</name><argument_list pos:start="887:14" pos:end="887:26">(<argument pos:start="887:15" pos:end="887:25"><expr pos:start="887:15" pos:end="887:25"><name pos:start="887:15" pos:end="887:17">key</name> <operator pos:start="887:19" pos:end="887:20">!=</operator> <name pos:start="887:22" pos:end="887:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="888:5" pos:end="888:18"><expr pos:start="888:5" pos:end="888:17"><call pos:start="888:5" pos:end="888:17"><name pos:start="888:5" pos:end="888:8">free</name><argument_list pos:start="888:9" pos:end="888:17">(<argument pos:start="888:10" pos:end="888:16"><expr pos:start="888:10" pos:end="888:16"><name pos:start="888:10" pos:end="888:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="890:5" pos:end="892:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="893:5" pos:end="893:69"><expr pos:start="893:5" pos:end="893:68"><name pos:start="893:5" pos:end="893:12">cert_len</name> <operator pos:start="893:14" pos:end="893:14">=</operator> <call pos:start="893:16" pos:end="893:68"><name pos:start="893:16" pos:end="893:31">read_binary_file</name><argument_list pos:start="893:32" pos:end="893:68">(<argument pos:start="893:33" pos:end="893:56"><expr pos:start="893:33" pos:end="893:56"><literal type="string" pos:start="893:33" pos:end="893:56">"US898/cert-expired.pem"</literal></expr></argument>, <argument pos:start="893:59" pos:end="893:67"><expr pos:start="893:59" pos:end="893:67"><operator pos:start="893:59" pos:end="893:59">&amp;</operator><name pos:start="893:60" pos:end="893:67">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="894:5" pos:end="894:28"><expr pos:start="894:5" pos:end="894:27"><call pos:start="894:5" pos:end="894:27"><name pos:start="894:5" pos:end="894:13">CU_ASSERT</name><argument_list pos:start="894:14" pos:end="894:27">(<argument pos:start="894:15" pos:end="894:26"><expr pos:start="894:15" pos:end="894:26"><name pos:start="894:15" pos:end="894:22">cert_len</name> <operator pos:start="894:24" pos:end="894:24">&gt;</operator> <literal type="number" pos:start="894:26" pos:end="894:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="895:5" pos:end="895:45"><expr pos:start="895:5" pos:end="895:44"><name pos:start="895:5" pos:end="895:6">in</name> <operator pos:start="895:8" pos:end="895:8">=</operator> <call pos:start="895:10" pos:end="895:44"><name pos:start="895:10" pos:end="895:24">BIO_new_mem_buf</name><argument_list pos:start="895:25" pos:end="895:44">(<argument pos:start="895:26" pos:end="895:33"><expr pos:start="895:26" pos:end="895:33"><name pos:start="895:26" pos:end="895:33">cert_raw</name></expr></argument>, <argument pos:start="895:36" pos:end="895:43"><expr pos:start="895:36" pos:end="895:43"><name pos:start="895:36" pos:end="895:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="896:5" pos:end="896:26"><expr pos:start="896:5" pos:end="896:25"><call pos:start="896:5" pos:end="896:25"><name pos:start="896:5" pos:end="896:13">CU_ASSERT</name><argument_list pos:start="896:14" pos:end="896:25">(<argument pos:start="896:15" pos:end="896:24"><expr pos:start="896:15" pos:end="896:24"><name pos:start="896:15" pos:end="896:16">in</name> <operator pos:start="896:18" pos:end="896:19">!=</operator> <name pos:start="896:21" pos:end="896:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="897:5" pos:end="897:20"><if pos:start="897:5" pos:end="897:20">if <condition pos:start="897:8" pos:end="897:12">(<expr pos:start="897:9" pos:end="897:11"><operator pos:start="897:9" pos:end="897:9">!</operator><name pos:start="897:10" pos:end="897:11">in</name></expr>)</condition><block type="pseudo" pos:start="897:14" pos:end="897:20"><block_content pos:start="897:14" pos:end="897:20"> <return pos:start="897:14" pos:end="897:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="898:5" pos:end="898:55"><expr pos:start="898:5" pos:end="898:54"><name pos:start="898:5" pos:end="898:8">cert</name> <operator pos:start="898:10" pos:end="898:10">=</operator> <call pos:start="898:12" pos:end="898:54"><name pos:start="898:12" pos:end="898:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="898:33" pos:end="898:54">(<argument pos:start="898:34" pos:end="898:35"><expr pos:start="898:34" pos:end="898:35"><name pos:start="898:34" pos:end="898:35">in</name></expr></argument>, <argument pos:start="898:38" pos:end="898:41"><expr pos:start="898:38" pos:end="898:41"><name pos:start="898:38" pos:end="898:41">NULL</name></expr></argument>, <argument pos:start="898:44" pos:end="898:47"><expr pos:start="898:44" pos:end="898:47"><name pos:start="898:44" pos:end="898:47">NULL</name></expr></argument>, <argument pos:start="898:50" pos:end="898:53"><expr pos:start="898:50" pos:end="898:53"><name pos:start="898:50" pos:end="898:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="899:5" pos:end="899:28"><expr pos:start="899:5" pos:end="899:27"><call pos:start="899:5" pos:end="899:27"><name pos:start="899:5" pos:end="899:13">CU_ASSERT</name><argument_list pos:start="899:14" pos:end="899:27">(<argument pos:start="899:15" pos:end="899:26"><expr pos:start="899:15" pos:end="899:26"><name pos:start="899:15" pos:end="899:18">cert</name> <operator pos:start="899:20" pos:end="899:21">!=</operator> <name pos:start="899:23" pos:end="899:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="900:5" pos:end="900:22"><if pos:start="900:5" pos:end="900:22">if <condition pos:start="900:8" pos:end="900:14">(<expr pos:start="900:9" pos:end="900:13"><operator pos:start="900:9" pos:end="900:9">!</operator><name pos:start="900:10" pos:end="900:13">cert</name></expr>)</condition><block type="pseudo" pos:start="900:16" pos:end="900:22"><block_content pos:start="900:16" pos:end="900:22"> <return pos:start="900:16" pos:end="900:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="901:5" pos:end="901:21"><expr pos:start="901:5" pos:end="901:20"><call pos:start="901:5" pos:end="901:20"><name pos:start="901:5" pos:end="901:16">BIO_free_all</name><argument_list pos:start="901:17" pos:end="901:20">(<argument pos:start="901:18" pos:end="901:19"><expr pos:start="901:18" pos:end="901:19"><name pos:start="901:18" pos:end="901:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="902:5" pos:end="902:19"><expr pos:start="902:5" pos:end="902:18"><call pos:start="902:5" pos:end="902:18"><name pos:start="902:5" pos:end="902:8">free</name><argument_list pos:start="902:9" pos:end="902:18">(<argument pos:start="902:10" pos:end="902:17"><expr pos:start="902:10" pos:end="902:17"><name pos:start="902:10" pos:end="902:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="904:5" pos:end="906:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="907:5" pos:end="907:62"><expr pos:start="907:5" pos:end="907:61"><name pos:start="907:5" pos:end="907:6">rv</name> <operator pos:start="907:8" pos:end="907:8">=</operator> <call pos:start="907:10" pos:end="907:61"><name pos:start="907:10" pos:end="907:32">est_client_get_csrattrs</name><argument_list pos:start="907:33" pos:end="907:61">(<argument pos:start="907:34" pos:end="907:37"><expr pos:start="907:34" pos:end="907:37"><name pos:start="907:34" pos:end="907:37">ectx</name></expr></argument>, <argument pos:start="907:40" pos:end="907:49"><expr pos:start="907:40" pos:end="907:49"><operator pos:start="907:40" pos:end="907:40">&amp;</operator><name pos:start="907:41" pos:end="907:49">attr_data</name></expr></argument>, <argument pos:start="907:52" pos:end="907:60"><expr pos:start="907:52" pos:end="907:60"><operator pos:start="907:52" pos:end="907:52">&amp;</operator><name pos:start="907:53" pos:end="907:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="908:5" pos:end="908:34"><expr pos:start="908:5" pos:end="908:33"><call pos:start="908:5" pos:end="908:33"><name pos:start="908:5" pos:end="908:13">CU_ASSERT</name><argument_list pos:start="908:14" pos:end="908:33">(<argument pos:start="908:15" pos:end="908:32"><expr pos:start="908:15" pos:end="908:32"><name pos:start="908:15" pos:end="908:16">rv</name> <operator pos:start="908:18" pos:end="908:19">==</operator> <name pos:start="908:21" pos:end="908:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="910:5" pos:end="912:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="913:5" pos:end="913:58"><expr pos:start="913:5" pos:end="913:57"><name pos:start="913:5" pos:end="913:6">rv</name> <operator pos:start="913:8" pos:end="913:8">=</operator> <call pos:start="913:10" pos:end="913:57"><name pos:start="913:10" pos:end="913:28">est_client_reenroll</name><argument_list pos:start="913:29" pos:end="913:57">(<argument pos:start="913:30" pos:end="913:33"><expr pos:start="913:30" pos:end="913:33"><name pos:start="913:30" pos:end="913:33">ectx</name></expr></argument>, <argument pos:start="913:36" pos:end="913:39"><expr pos:start="913:36" pos:end="913:39"><name pos:start="913:36" pos:end="913:39">cert</name></expr></argument>, <argument pos:start="913:42" pos:end="913:51"><expr pos:start="913:42" pos:end="913:51"><operator pos:start="913:42" pos:end="913:42">&amp;</operator><name pos:start="913:43" pos:end="913:51">pkcs7_len</name></expr></argument>, <argument pos:start="913:54" pos:end="913:56"><expr pos:start="913:54" pos:end="913:56"><name pos:start="913:54" pos:end="913:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="914:5" pos:end="914:39"><expr pos:start="914:5" pos:end="914:38"><call pos:start="914:5" pos:end="914:38"><name pos:start="914:5" pos:end="914:13">CU_ASSERT</name><argument_list pos:start="914:14" pos:end="914:38">(<argument pos:start="914:15" pos:end="914:37"><expr pos:start="914:15" pos:end="914:37"><name pos:start="914:15" pos:end="914:16">rv</name> <operator pos:start="914:18" pos:end="914:19">==</operator> <name pos:start="914:21" pos:end="914:37">EST_ERR_AUTH_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="916:5" pos:end="916:22"><expr pos:start="916:5" pos:end="916:21"><call pos:start="916:5" pos:end="916:21"><name pos:start="916:5" pos:end="916:15">est_destroy</name><argument_list pos:start="916:16" pos:end="916:21">(<argument pos:start="916:17" pos:end="916:20"><expr pos:start="916:17" pos:end="916:20"><name pos:start="916:17" pos:end="916:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="919:1" pos:end="922:3">/*
 * Verify that a good user ID/password passes when
 * using HTTP digest auth.
 */</comment>
<function pos:start="923:1" pos:end="1006:1"><type pos:start="923:1" pos:end="923:11"><specifier pos:start="923:1" pos:end="923:6">static</specifier> <name pos:start="923:8" pos:end="923:11">void</name></type> <name pos:start="923:13" pos:end="923:23">us898_test8</name> <parameter_list pos:start="923:25" pos:end="923:30">(<parameter pos:start="923:26" pos:end="923:29"><decl pos:start="923:26" pos:end="923:29"><type pos:start="923:26" pos:end="923:29"><name pos:start="923:26" pos:end="923:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="924:1" pos:end="1006:1">{<block_content pos:start="925:5" pos:end="1004:32">
    <decl_stmt pos:start="925:5" pos:end="925:18"><decl pos:start="925:5" pos:end="925:17"><type pos:start="925:5" pos:end="925:13"><name pos:start="925:5" pos:end="925:11">EST_CTX</name> <modifier pos:start="925:13" pos:end="925:13">*</modifier></type><name pos:start="925:14" pos:end="925:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="926:5" pos:end="926:18"><decl pos:start="926:5" pos:end="926:17"><type pos:start="926:5" pos:end="926:14"><name pos:start="926:5" pos:end="926:12">EVP_PKEY</name> <modifier pos:start="926:14" pos:end="926:14">*</modifier></type><name pos:start="926:15" pos:end="926:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="927:5" pos:end="927:27"><decl pos:start="927:5" pos:end="927:26"><type pos:start="927:5" pos:end="927:19"><name pos:start="927:5" pos:end="927:12">unsigned</name> <name pos:start="927:14" pos:end="927:17">char</name> <modifier pos:start="927:19" pos:end="927:19">*</modifier></type><name pos:start="927:20" pos:end="927:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="928:5" pos:end="928:16"><decl pos:start="928:5" pos:end="928:15"><type pos:start="928:5" pos:end="928:7"><name pos:start="928:5" pos:end="928:7">int</name></type> <name pos:start="928:9" pos:end="928:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="929:5" pos:end="929:28"><decl pos:start="929:5" pos:end="929:27"><type pos:start="929:5" pos:end="929:19"><name pos:start="929:5" pos:end="929:12">unsigned</name> <name pos:start="929:14" pos:end="929:17">char</name> <modifier pos:start="929:19" pos:end="929:19">*</modifier></type><name pos:start="929:20" pos:end="929:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="930:5" pos:end="930:17"><decl pos:start="930:5" pos:end="930:16"><type pos:start="930:5" pos:end="930:7"><name pos:start="930:5" pos:end="930:7">int</name></type> <name pos:start="930:9" pos:end="930:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="931:5" pos:end="931:11"><decl pos:start="931:5" pos:end="931:10"><type pos:start="931:5" pos:end="931:7"><name pos:start="931:5" pos:end="931:7">int</name></type> <name pos:start="931:9" pos:end="931:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="932:5" pos:end="932:22"><decl pos:start="932:5" pos:end="932:21"><type pos:start="932:5" pos:end="932:7"><name pos:start="932:5" pos:end="932:7">int</name></type> <name pos:start="932:9" pos:end="932:17">pkcs7_len</name> <init pos:start="932:19" pos:end="932:21">= <expr pos:start="932:21" pos:end="932:21"><literal type="number" pos:start="932:21" pos:end="932:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="933:5" pos:end="933:22"><decl pos:start="933:5" pos:end="933:21"><type pos:start="933:5" pos:end="933:10"><name pos:start="933:5" pos:end="933:8">X509</name> <modifier pos:start="933:10" pos:end="933:10">*</modifier></type><name pos:start="933:11" pos:end="933:14">cert</name> <init pos:start="933:16" pos:end="933:21">= <expr pos:start="933:18" pos:end="933:21"><name pos:start="933:18" pos:end="933:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="934:5" pos:end="934:12"><decl pos:start="934:5" pos:end="934:11"><type pos:start="934:5" pos:end="934:9"><name pos:start="934:5" pos:end="934:7">BIO</name> <modifier pos:start="934:9" pos:end="934:9">*</modifier></type><name pos:start="934:10" pos:end="934:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="935:5" pos:end="935:36"><decl pos:start="935:5" pos:end="935:35"><type pos:start="935:5" pos:end="935:19"><name pos:start="935:5" pos:end="935:12">unsigned</name> <name pos:start="935:14" pos:end="935:17">char</name> <modifier pos:start="935:19" pos:end="935:19">*</modifier></type><name pos:start="935:20" pos:end="935:28">attr_data</name> <init pos:start="935:30" pos:end="935:35">= <expr pos:start="935:32" pos:end="935:35"><name pos:start="935:32" pos:end="935:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="936:5" pos:end="936:17"><decl pos:start="936:5" pos:end="936:16"><type pos:start="936:5" pos:end="936:7"><name pos:start="936:5" pos:end="936:7">int</name></type> <name pos:start="936:9" pos:end="936:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="938:5" pos:end="938:16"><expr pos:start="938:5" pos:end="938:15"><name pos:start="938:5" pos:end="938:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="940:5" pos:end="942:7">/*
     * Enable HTTP digest authentication
     */</comment>
    <expr_stmt pos:start="943:5" pos:end="943:33"><expr pos:start="943:5" pos:end="943:32"><call pos:start="943:5" pos:end="943:32"><name pos:start="943:5" pos:end="943:30">st_enable_http_digest_auth</name><argument_list pos:start="943:31" pos:end="943:32">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="945:5" pos:end="947:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="948:5" pos:end="950:54"><expr pos:start="948:5" pos:end="950:53"><name pos:start="948:5" pos:end="948:8">ectx</name> <operator pos:start="948:10" pos:end="948:10">=</operator> <call pos:start="948:12" pos:end="950:53"><name pos:start="948:12" pos:end="948:26">est_client_init</name><argument_list pos:start="948:27" pos:end="950:53">(<argument pos:start="948:28" pos:end="948:34"><expr pos:start="948:28" pos:end="948:34"><name pos:start="948:28" pos:end="948:34">cacerts</name></expr></argument>, <argument pos:start="948:37" pos:end="948:47"><expr pos:start="948:37" pos:end="948:47"><name pos:start="948:37" pos:end="948:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="949:28" pos:end="949:46"><expr pos:start="949:28" pos:end="949:46"><name pos:start="949:28" pos:end="949:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="950:28" pos:end="950:52"><expr pos:start="950:28" pos:end="950:52"><name pos:start="950:28" pos:end="950:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="951:5" pos:end="951:28"><expr pos:start="951:5" pos:end="951:27"><call pos:start="951:5" pos:end="951:27"><name pos:start="951:5" pos:end="951:13">CU_ASSERT</name><argument_list pos:start="951:14" pos:end="951:27">(<argument pos:start="951:15" pos:end="951:26"><expr pos:start="951:15" pos:end="951:26"><name pos:start="951:15" pos:end="951:18">ectx</name> <operator pos:start="951:20" pos:end="951:21">!=</operator> <name pos:start="951:23" pos:end="951:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="953:5" pos:end="955:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="956:5" pos:end="956:69"><expr pos:start="956:5" pos:end="956:68"><name pos:start="956:5" pos:end="956:6">rv</name> <operator pos:start="956:8" pos:end="956:8">=</operator> <call pos:start="956:10" pos:end="956:68"><name pos:start="956:10" pos:end="956:28">est_client_set_auth</name><argument_list pos:start="956:29" pos:end="956:68">(<argument pos:start="956:30" pos:end="956:33"><expr pos:start="956:30" pos:end="956:33"><name pos:start="956:30" pos:end="956:33">ectx</name></expr></argument>, <argument pos:start="956:36" pos:end="956:44"><expr pos:start="956:36" pos:end="956:44"><name pos:start="956:36" pos:end="956:44">US898_UID</name></expr></argument>, <argument pos:start="956:47" pos:end="956:55"><expr pos:start="956:47" pos:end="956:55"><name pos:start="956:47" pos:end="956:55">US898_PWD</name></expr></argument>, <argument pos:start="956:58" pos:end="956:61"><expr pos:start="956:58" pos:end="956:61"><name pos:start="956:58" pos:end="956:61">NULL</name></expr></argument>, <argument pos:start="956:64" pos:end="956:67"><expr pos:start="956:64" pos:end="956:67"><name pos:start="956:64" pos:end="956:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="957:5" pos:end="957:34"><expr pos:start="957:5" pos:end="957:33"><call pos:start="957:5" pos:end="957:33"><name pos:start="957:5" pos:end="957:13">CU_ASSERT</name><argument_list pos:start="957:14" pos:end="957:33">(<argument pos:start="957:15" pos:end="957:32"><expr pos:start="957:15" pos:end="957:32"><name pos:start="957:15" pos:end="957:16">rv</name> <operator pos:start="957:18" pos:end="957:19">==</operator> <name pos:start="957:21" pos:end="957:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="959:5" pos:end="961:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="962:5" pos:end="962:74"><expr pos:start="962:5" pos:end="962:73"><call pos:start="962:5" pos:end="962:73"><name pos:start="962:5" pos:end="962:25">est_client_set_server</name><argument_list pos:start="962:26" pos:end="962:73">(<argument pos:start="962:27" pos:end="962:30"><expr pos:start="962:27" pos:end="962:30"><name pos:start="962:27" pos:end="962:30">ectx</name></expr></argument>, <argument pos:start="962:33" pos:end="962:47"><expr pos:start="962:33" pos:end="962:47"><name pos:start="962:33" pos:end="962:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="962:50" pos:end="962:66"><expr pos:start="962:50" pos:end="962:66"><name pos:start="962:50" pos:end="962:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="962:69" pos:end="962:72"><expr pos:start="962:69" pos:end="962:72"><name pos:start="962:69" pos:end="962:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="964:5" pos:end="966:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="967:5" pos:end="967:66"><expr pos:start="967:5" pos:end="967:65"><name pos:start="967:5" pos:end="967:11">key_len</name> <operator pos:start="967:13" pos:end="967:13">=</operator> <call pos:start="967:15" pos:end="967:65"><name pos:start="967:15" pos:end="967:30">read_binary_file</name><argument_list pos:start="967:31" pos:end="967:65">(<argument pos:start="967:32" pos:end="967:54"><expr pos:start="967:32" pos:end="967:54"><literal type="string" pos:start="967:32" pos:end="967:54">"US898/key-expired.pem"</literal></expr></argument>, <argument pos:start="967:57" pos:end="967:64"><expr pos:start="967:57" pos:end="967:64"><operator pos:start="967:57" pos:end="967:57">&amp;</operator><name pos:start="967:58" pos:end="967:64">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="968:5" pos:end="968:27"><expr pos:start="968:5" pos:end="968:26"><call pos:start="968:5" pos:end="968:26"><name pos:start="968:5" pos:end="968:13">CU_ASSERT</name><argument_list pos:start="968:14" pos:end="968:26">(<argument pos:start="968:15" pos:end="968:25"><expr pos:start="968:15" pos:end="968:25"><name pos:start="968:15" pos:end="968:21">key_len</name> <operator pos:start="968:23" pos:end="968:23">&gt;</operator> <literal type="number" pos:start="968:25" pos:end="968:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="969:5" pos:end="969:57"><expr pos:start="969:5" pos:end="969:56"><name pos:start="969:5" pos:end="969:7">key</name> <operator pos:start="969:9" pos:end="969:9">=</operator> <call pos:start="969:11" pos:end="969:56"><name pos:start="969:11" pos:end="969:22">est_load_key</name><argument_list pos:start="969:23" pos:end="969:56">(<argument pos:start="969:24" pos:end="969:30"><expr pos:start="969:24" pos:end="969:30"><name pos:start="969:24" pos:end="969:30">key_raw</name></expr></argument>, <argument pos:start="969:33" pos:end="969:39"><expr pos:start="969:33" pos:end="969:39"><name pos:start="969:33" pos:end="969:39">key_len</name></expr></argument>, <argument pos:start="969:42" pos:end="969:55"><expr pos:start="969:42" pos:end="969:55"><name pos:start="969:42" pos:end="969:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="970:5" pos:end="970:27"><expr pos:start="970:5" pos:end="970:26"><call pos:start="970:5" pos:end="970:26"><name pos:start="970:5" pos:end="970:13">CU_ASSERT</name><argument_list pos:start="970:14" pos:end="970:26">(<argument pos:start="970:15" pos:end="970:25"><expr pos:start="970:15" pos:end="970:25"><name pos:start="970:15" pos:end="970:17">key</name> <operator pos:start="970:19" pos:end="970:20">!=</operator> <name pos:start="970:22" pos:end="970:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="971:5" pos:end="971:18"><expr pos:start="971:5" pos:end="971:17"><call pos:start="971:5" pos:end="971:17"><name pos:start="971:5" pos:end="971:8">free</name><argument_list pos:start="971:9" pos:end="971:17">(<argument pos:start="971:10" pos:end="971:16"><expr pos:start="971:10" pos:end="971:16"><name pos:start="971:10" pos:end="971:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="973:5" pos:end="975:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="976:5" pos:end="976:69"><expr pos:start="976:5" pos:end="976:68"><name pos:start="976:5" pos:end="976:12">cert_len</name> <operator pos:start="976:14" pos:end="976:14">=</operator> <call pos:start="976:16" pos:end="976:68"><name pos:start="976:16" pos:end="976:31">read_binary_file</name><argument_list pos:start="976:32" pos:end="976:68">(<argument pos:start="976:33" pos:end="976:56"><expr pos:start="976:33" pos:end="976:56"><literal type="string" pos:start="976:33" pos:end="976:56">"US898/cert-expired.pem"</literal></expr></argument>, <argument pos:start="976:59" pos:end="976:67"><expr pos:start="976:59" pos:end="976:67"><operator pos:start="976:59" pos:end="976:59">&amp;</operator><name pos:start="976:60" pos:end="976:67">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="977:5" pos:end="977:28"><expr pos:start="977:5" pos:end="977:27"><call pos:start="977:5" pos:end="977:27"><name pos:start="977:5" pos:end="977:13">CU_ASSERT</name><argument_list pos:start="977:14" pos:end="977:27">(<argument pos:start="977:15" pos:end="977:26"><expr pos:start="977:15" pos:end="977:26"><name pos:start="977:15" pos:end="977:22">cert_len</name> <operator pos:start="977:24" pos:end="977:24">&gt;</operator> <literal type="number" pos:start="977:26" pos:end="977:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="978:5" pos:end="978:45"><expr pos:start="978:5" pos:end="978:44"><name pos:start="978:5" pos:end="978:6">in</name> <operator pos:start="978:8" pos:end="978:8">=</operator> <call pos:start="978:10" pos:end="978:44"><name pos:start="978:10" pos:end="978:24">BIO_new_mem_buf</name><argument_list pos:start="978:25" pos:end="978:44">(<argument pos:start="978:26" pos:end="978:33"><expr pos:start="978:26" pos:end="978:33"><name pos:start="978:26" pos:end="978:33">cert_raw</name></expr></argument>, <argument pos:start="978:36" pos:end="978:43"><expr pos:start="978:36" pos:end="978:43"><name pos:start="978:36" pos:end="978:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="979:5" pos:end="979:26"><expr pos:start="979:5" pos:end="979:25"><call pos:start="979:5" pos:end="979:25"><name pos:start="979:5" pos:end="979:13">CU_ASSERT</name><argument_list pos:start="979:14" pos:end="979:25">(<argument pos:start="979:15" pos:end="979:24"><expr pos:start="979:15" pos:end="979:24"><name pos:start="979:15" pos:end="979:16">in</name> <operator pos:start="979:18" pos:end="979:19">!=</operator> <name pos:start="979:21" pos:end="979:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="980:5" pos:end="980:20"><if pos:start="980:5" pos:end="980:20">if <condition pos:start="980:8" pos:end="980:12">(<expr pos:start="980:9" pos:end="980:11"><operator pos:start="980:9" pos:end="980:9">!</operator><name pos:start="980:10" pos:end="980:11">in</name></expr>)</condition><block type="pseudo" pos:start="980:14" pos:end="980:20"><block_content pos:start="980:14" pos:end="980:20"> <return pos:start="980:14" pos:end="980:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="981:5" pos:end="981:55"><expr pos:start="981:5" pos:end="981:54"><name pos:start="981:5" pos:end="981:8">cert</name> <operator pos:start="981:10" pos:end="981:10">=</operator> <call pos:start="981:12" pos:end="981:54"><name pos:start="981:12" pos:end="981:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="981:33" pos:end="981:54">(<argument pos:start="981:34" pos:end="981:35"><expr pos:start="981:34" pos:end="981:35"><name pos:start="981:34" pos:end="981:35">in</name></expr></argument>, <argument pos:start="981:38" pos:end="981:41"><expr pos:start="981:38" pos:end="981:41"><name pos:start="981:38" pos:end="981:41">NULL</name></expr></argument>, <argument pos:start="981:44" pos:end="981:47"><expr pos:start="981:44" pos:end="981:47"><name pos:start="981:44" pos:end="981:47">NULL</name></expr></argument>, <argument pos:start="981:50" pos:end="981:53"><expr pos:start="981:50" pos:end="981:53"><name pos:start="981:50" pos:end="981:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="982:5" pos:end="982:28"><expr pos:start="982:5" pos:end="982:27"><call pos:start="982:5" pos:end="982:27"><name pos:start="982:5" pos:end="982:13">CU_ASSERT</name><argument_list pos:start="982:14" pos:end="982:27">(<argument pos:start="982:15" pos:end="982:26"><expr pos:start="982:15" pos:end="982:26"><name pos:start="982:15" pos:end="982:18">cert</name> <operator pos:start="982:20" pos:end="982:21">!=</operator> <name pos:start="982:23" pos:end="982:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="983:5" pos:end="983:22"><if pos:start="983:5" pos:end="983:22">if <condition pos:start="983:8" pos:end="983:14">(<expr pos:start="983:9" pos:end="983:13"><operator pos:start="983:9" pos:end="983:9">!</operator><name pos:start="983:10" pos:end="983:13">cert</name></expr>)</condition><block type="pseudo" pos:start="983:16" pos:end="983:22"><block_content pos:start="983:16" pos:end="983:22"> <return pos:start="983:16" pos:end="983:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="984:5" pos:end="984:21"><expr pos:start="984:5" pos:end="984:20"><call pos:start="984:5" pos:end="984:20"><name pos:start="984:5" pos:end="984:16">BIO_free_all</name><argument_list pos:start="984:17" pos:end="984:20">(<argument pos:start="984:18" pos:end="984:19"><expr pos:start="984:18" pos:end="984:19"><name pos:start="984:18" pos:end="984:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="985:5" pos:end="985:19"><expr pos:start="985:5" pos:end="985:18"><call pos:start="985:5" pos:end="985:18"><name pos:start="985:5" pos:end="985:8">free</name><argument_list pos:start="985:9" pos:end="985:18">(<argument pos:start="985:10" pos:end="985:17"><expr pos:start="985:10" pos:end="985:17"><name pos:start="985:10" pos:end="985:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="987:5" pos:end="989:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="990:5" pos:end="990:62"><expr pos:start="990:5" pos:end="990:61"><name pos:start="990:5" pos:end="990:6">rv</name> <operator pos:start="990:8" pos:end="990:8">=</operator> <call pos:start="990:10" pos:end="990:61"><name pos:start="990:10" pos:end="990:32">est_client_get_csrattrs</name><argument_list pos:start="990:33" pos:end="990:61">(<argument pos:start="990:34" pos:end="990:37"><expr pos:start="990:34" pos:end="990:37"><name pos:start="990:34" pos:end="990:37">ectx</name></expr></argument>, <argument pos:start="990:40" pos:end="990:49"><expr pos:start="990:40" pos:end="990:49"><operator pos:start="990:40" pos:end="990:40">&amp;</operator><name pos:start="990:41" pos:end="990:49">attr_data</name></expr></argument>, <argument pos:start="990:52" pos:end="990:60"><expr pos:start="990:52" pos:end="990:60"><operator pos:start="990:52" pos:end="990:52">&amp;</operator><name pos:start="990:53" pos:end="990:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="991:5" pos:end="991:34"><expr pos:start="991:5" pos:end="991:33"><call pos:start="991:5" pos:end="991:33"><name pos:start="991:5" pos:end="991:13">CU_ASSERT</name><argument_list pos:start="991:14" pos:end="991:33">(<argument pos:start="991:15" pos:end="991:32"><expr pos:start="991:15" pos:end="991:32"><name pos:start="991:15" pos:end="991:16">rv</name> <operator pos:start="991:18" pos:end="991:19">==</operator> <name pos:start="991:21" pos:end="991:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="993:5" pos:end="995:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="996:5" pos:end="996:58"><expr pos:start="996:5" pos:end="996:57"><name pos:start="996:5" pos:end="996:6">rv</name> <operator pos:start="996:8" pos:end="996:8">=</operator> <call pos:start="996:10" pos:end="996:57"><name pos:start="996:10" pos:end="996:28">est_client_reenroll</name><argument_list pos:start="996:29" pos:end="996:57">(<argument pos:start="996:30" pos:end="996:33"><expr pos:start="996:30" pos:end="996:33"><name pos:start="996:30" pos:end="996:33">ectx</name></expr></argument>, <argument pos:start="996:36" pos:end="996:39"><expr pos:start="996:36" pos:end="996:39"><name pos:start="996:36" pos:end="996:39">cert</name></expr></argument>, <argument pos:start="996:42" pos:end="996:51"><expr pos:start="996:42" pos:end="996:51"><operator pos:start="996:42" pos:end="996:42">&amp;</operator><name pos:start="996:43" pos:end="996:51">pkcs7_len</name></expr></argument>, <argument pos:start="996:54" pos:end="996:56"><expr pos:start="996:54" pos:end="996:56"><name pos:start="996:54" pos:end="996:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="997:5" pos:end="997:34"><expr pos:start="997:5" pos:end="997:33"><call pos:start="997:5" pos:end="997:33"><name pos:start="997:5" pos:end="997:13">CU_ASSERT</name><argument_list pos:start="997:14" pos:end="997:33">(<argument pos:start="997:15" pos:end="997:32"><expr pos:start="997:15" pos:end="997:32"><name pos:start="997:15" pos:end="997:16">rv</name> <operator pos:start="997:18" pos:end="997:19">==</operator> <name pos:start="997:21" pos:end="997:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="999:5" pos:end="999:22"><expr pos:start="999:5" pos:end="999:21"><call pos:start="999:5" pos:end="999:21"><name pos:start="999:5" pos:end="999:15">est_destroy</name><argument_list pos:start="999:16" pos:end="999:21">(<argument pos:start="999:17" pos:end="999:20"><expr pos:start="999:17" pos:end="999:20"><name pos:start="999:17" pos:end="999:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1001:5" pos:end="1003:7">/*
     * Re-enable HTTP basic authentication
     */</comment>
    <expr_stmt pos:start="1004:5" pos:end="1004:32"><expr pos:start="1004:5" pos:end="1004:31"><call pos:start="1004:5" pos:end="1004:31"><name pos:start="1004:5" pos:end="1004:29">st_enable_http_basic_auth</name><argument_list pos:start="1004:30" pos:end="1004:31">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block" pos:start="1008:1" pos:end="1011:3">/*
 * Verify that a bogus user ID/password fails when
 * using HTTP digest auth.
 */</comment>
<function pos:start="1012:1" pos:end="1102:1"><type pos:start="1012:1" pos:end="1012:11"><specifier pos:start="1012:1" pos:end="1012:6">static</specifier> <name pos:start="1012:8" pos:end="1012:11">void</name></type> <name pos:start="1012:13" pos:end="1012:23">us898_test9</name> <parameter_list pos:start="1012:25" pos:end="1012:30">(<parameter pos:start="1012:26" pos:end="1012:29"><decl pos:start="1012:26" pos:end="1012:29"><type pos:start="1012:26" pos:end="1012:29"><name pos:start="1012:26" pos:end="1012:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1013:1" pos:end="1102:1">{<block_content pos:start="1014:5" pos:end="1100:32">
    <decl_stmt pos:start="1014:5" pos:end="1014:18"><decl pos:start="1014:5" pos:end="1014:17"><type pos:start="1014:5" pos:end="1014:13"><name pos:start="1014:5" pos:end="1014:11">EST_CTX</name> <modifier pos:start="1014:13" pos:end="1014:13">*</modifier></type><name pos:start="1014:14" pos:end="1014:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1015:5" pos:end="1015:18"><decl pos:start="1015:5" pos:end="1015:17"><type pos:start="1015:5" pos:end="1015:14"><name pos:start="1015:5" pos:end="1015:12">EVP_PKEY</name> <modifier pos:start="1015:14" pos:end="1015:14">*</modifier></type><name pos:start="1015:15" pos:end="1015:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1016:5" pos:end="1016:27"><decl pos:start="1016:5" pos:end="1016:26"><type pos:start="1016:5" pos:end="1016:19"><name pos:start="1016:5" pos:end="1016:12">unsigned</name> <name pos:start="1016:14" pos:end="1016:17">char</name> <modifier pos:start="1016:19" pos:end="1016:19">*</modifier></type><name pos:start="1016:20" pos:end="1016:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1017:5" pos:end="1017:16"><decl pos:start="1017:5" pos:end="1017:15"><type pos:start="1017:5" pos:end="1017:7"><name pos:start="1017:5" pos:end="1017:7">int</name></type> <name pos:start="1017:9" pos:end="1017:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1018:5" pos:end="1018:28"><decl pos:start="1018:5" pos:end="1018:27"><type pos:start="1018:5" pos:end="1018:19"><name pos:start="1018:5" pos:end="1018:12">unsigned</name> <name pos:start="1018:14" pos:end="1018:17">char</name> <modifier pos:start="1018:19" pos:end="1018:19">*</modifier></type><name pos:start="1018:20" pos:end="1018:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1019:5" pos:end="1019:17"><decl pos:start="1019:5" pos:end="1019:16"><type pos:start="1019:5" pos:end="1019:7"><name pos:start="1019:5" pos:end="1019:7">int</name></type> <name pos:start="1019:9" pos:end="1019:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1020:5" pos:end="1020:11"><decl pos:start="1020:5" pos:end="1020:10"><type pos:start="1020:5" pos:end="1020:7"><name pos:start="1020:5" pos:end="1020:7">int</name></type> <name pos:start="1020:9" pos:end="1020:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1021:5" pos:end="1021:22"><decl pos:start="1021:5" pos:end="1021:21"><type pos:start="1021:5" pos:end="1021:7"><name pos:start="1021:5" pos:end="1021:7">int</name></type> <name pos:start="1021:9" pos:end="1021:17">pkcs7_len</name> <init pos:start="1021:19" pos:end="1021:21">= <expr pos:start="1021:21" pos:end="1021:21"><literal type="number" pos:start="1021:21" pos:end="1021:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1022:5" pos:end="1022:22"><decl pos:start="1022:5" pos:end="1022:21"><type pos:start="1022:5" pos:end="1022:10"><name pos:start="1022:5" pos:end="1022:8">X509</name> <modifier pos:start="1022:10" pos:end="1022:10">*</modifier></type><name pos:start="1022:11" pos:end="1022:14">cert</name> <init pos:start="1022:16" pos:end="1022:21">= <expr pos:start="1022:18" pos:end="1022:21"><name pos:start="1022:18" pos:end="1022:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1023:5" pos:end="1023:12"><decl pos:start="1023:5" pos:end="1023:11"><type pos:start="1023:5" pos:end="1023:9"><name pos:start="1023:5" pos:end="1023:7">BIO</name> <modifier pos:start="1023:9" pos:end="1023:9">*</modifier></type><name pos:start="1023:10" pos:end="1023:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1024:5" pos:end="1024:36"><decl pos:start="1024:5" pos:end="1024:35"><type pos:start="1024:5" pos:end="1024:19"><name pos:start="1024:5" pos:end="1024:12">unsigned</name> <name pos:start="1024:14" pos:end="1024:17">char</name> <modifier pos:start="1024:19" pos:end="1024:19">*</modifier></type><name pos:start="1024:20" pos:end="1024:28">attr_data</name> <init pos:start="1024:30" pos:end="1024:35">= <expr pos:start="1024:32" pos:end="1024:35"><name pos:start="1024:32" pos:end="1024:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1025:5" pos:end="1025:17"><decl pos:start="1025:5" pos:end="1025:16"><type pos:start="1025:5" pos:end="1025:7"><name pos:start="1025:5" pos:end="1025:7">int</name></type> <name pos:start="1025:9" pos:end="1025:16">attr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1026:5" pos:end="1026:20"><decl pos:start="1026:5" pos:end="1026:19"><type pos:start="1026:5" pos:end="1026:7"><name pos:start="1026:5" pos:end="1026:7">int</name></type> <name pos:start="1026:9" pos:end="1026:19">http_status</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1028:5" pos:end="1028:16"><expr pos:start="1028:5" pos:end="1028:15"><name pos:start="1028:5" pos:end="1028:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1030:5" pos:end="1032:7">/*
     * Enable HTTP digest authentication
     */</comment>
    <expr_stmt pos:start="1033:5" pos:end="1033:33"><expr pos:start="1033:5" pos:end="1033:32"><call pos:start="1033:5" pos:end="1033:32"><name pos:start="1033:5" pos:end="1033:30">st_enable_http_digest_auth</name><argument_list pos:start="1033:31" pos:end="1033:32">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1035:5" pos:end="1037:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="1038:5" pos:end="1040:54"><expr pos:start="1038:5" pos:end="1040:53"><name pos:start="1038:5" pos:end="1038:8">ectx</name> <operator pos:start="1038:10" pos:end="1038:10">=</operator> <call pos:start="1038:12" pos:end="1040:53"><name pos:start="1038:12" pos:end="1038:26">est_client_init</name><argument_list pos:start="1038:27" pos:end="1040:53">(<argument pos:start="1038:28" pos:end="1038:34"><expr pos:start="1038:28" pos:end="1038:34"><name pos:start="1038:28" pos:end="1038:34">cacerts</name></expr></argument>, <argument pos:start="1038:37" pos:end="1038:47"><expr pos:start="1038:37" pos:end="1038:47"><name pos:start="1038:37" pos:end="1038:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="1039:28" pos:end="1039:46"><expr pos:start="1039:28" pos:end="1039:46"><name pos:start="1039:28" pos:end="1039:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="1040:28" pos:end="1040:52"><expr pos:start="1040:28" pos:end="1040:52"><name pos:start="1040:28" pos:end="1040:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1041:5" pos:end="1041:28"><expr pos:start="1041:5" pos:end="1041:27"><call pos:start="1041:5" pos:end="1041:27"><name pos:start="1041:5" pos:end="1041:13">CU_ASSERT</name><argument_list pos:start="1041:14" pos:end="1041:27">(<argument pos:start="1041:15" pos:end="1041:26"><expr pos:start="1041:15" pos:end="1041:26"><name pos:start="1041:15" pos:end="1041:18">ectx</name> <operator pos:start="1041:20" pos:end="1041:21">!=</operator> <name pos:start="1041:23" pos:end="1041:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1043:5" pos:end="1045:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1046:5" pos:end="1046:67"><expr pos:start="1046:5" pos:end="1046:66"><name pos:start="1046:5" pos:end="1046:6">rv</name> <operator pos:start="1046:8" pos:end="1046:8">=</operator> <call pos:start="1046:10" pos:end="1046:66"><name pos:start="1046:10" pos:end="1046:28">est_client_set_auth</name><argument_list pos:start="1046:29" pos:end="1046:66">(<argument pos:start="1046:30" pos:end="1046:33"><expr pos:start="1046:30" pos:end="1046:33"><name pos:start="1046:30" pos:end="1046:33">ectx</name></expr></argument>, <argument pos:start="1046:36" pos:end="1046:41"><expr pos:start="1046:36" pos:end="1046:41"><literal type="string" pos:start="1046:36" pos:end="1046:41">"jdoe"</literal></expr></argument>, <argument pos:start="1046:44" pos:end="1046:53"><expr pos:start="1046:44" pos:end="1046:53"><literal type="string" pos:start="1046:44" pos:end="1046:53">"panthers"</literal></expr></argument>, <argument pos:start="1046:56" pos:end="1046:59"><expr pos:start="1046:56" pos:end="1046:59"><name pos:start="1046:56" pos:end="1046:59">NULL</name></expr></argument>, <argument pos:start="1046:62" pos:end="1046:65"><expr pos:start="1046:62" pos:end="1046:65"><name pos:start="1046:62" pos:end="1046:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1047:5" pos:end="1047:34"><expr pos:start="1047:5" pos:end="1047:33"><call pos:start="1047:5" pos:end="1047:33"><name pos:start="1047:5" pos:end="1047:13">CU_ASSERT</name><argument_list pos:start="1047:14" pos:end="1047:33">(<argument pos:start="1047:15" pos:end="1047:32"><expr pos:start="1047:15" pos:end="1047:32"><name pos:start="1047:15" pos:end="1047:16">rv</name> <operator pos:start="1047:18" pos:end="1047:19">==</operator> <name pos:start="1047:21" pos:end="1047:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1049:5" pos:end="1051:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1052:5" pos:end="1052:74"><expr pos:start="1052:5" pos:end="1052:73"><call pos:start="1052:5" pos:end="1052:73"><name pos:start="1052:5" pos:end="1052:25">est_client_set_server</name><argument_list pos:start="1052:26" pos:end="1052:73">(<argument pos:start="1052:27" pos:end="1052:30"><expr pos:start="1052:27" pos:end="1052:30"><name pos:start="1052:27" pos:end="1052:30">ectx</name></expr></argument>, <argument pos:start="1052:33" pos:end="1052:47"><expr pos:start="1052:33" pos:end="1052:47"><name pos:start="1052:33" pos:end="1052:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="1052:50" pos:end="1052:66"><expr pos:start="1052:50" pos:end="1052:66"><name pos:start="1052:50" pos:end="1052:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="1052:69" pos:end="1052:72"><expr pos:start="1052:69" pos:end="1052:72"><name pos:start="1052:69" pos:end="1052:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1054:5" pos:end="1056:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="1057:5" pos:end="1057:66"><expr pos:start="1057:5" pos:end="1057:65"><name pos:start="1057:5" pos:end="1057:11">key_len</name> <operator pos:start="1057:13" pos:end="1057:13">=</operator> <call pos:start="1057:15" pos:end="1057:65"><name pos:start="1057:15" pos:end="1057:30">read_binary_file</name><argument_list pos:start="1057:31" pos:end="1057:65">(<argument pos:start="1057:32" pos:end="1057:54"><expr pos:start="1057:32" pos:end="1057:54"><literal type="string" pos:start="1057:32" pos:end="1057:54">"US898/key-expired.pem"</literal></expr></argument>, <argument pos:start="1057:57" pos:end="1057:64"><expr pos:start="1057:57" pos:end="1057:64"><operator pos:start="1057:57" pos:end="1057:57">&amp;</operator><name pos:start="1057:58" pos:end="1057:64">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1058:5" pos:end="1058:27"><expr pos:start="1058:5" pos:end="1058:26"><call pos:start="1058:5" pos:end="1058:26"><name pos:start="1058:5" pos:end="1058:13">CU_ASSERT</name><argument_list pos:start="1058:14" pos:end="1058:26">(<argument pos:start="1058:15" pos:end="1058:25"><expr pos:start="1058:15" pos:end="1058:25"><name pos:start="1058:15" pos:end="1058:21">key_len</name> <operator pos:start="1058:23" pos:end="1058:23">&gt;</operator> <literal type="number" pos:start="1058:25" pos:end="1058:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1059:5" pos:end="1059:57"><expr pos:start="1059:5" pos:end="1059:56"><name pos:start="1059:5" pos:end="1059:7">key</name> <operator pos:start="1059:9" pos:end="1059:9">=</operator> <call pos:start="1059:11" pos:end="1059:56"><name pos:start="1059:11" pos:end="1059:22">est_load_key</name><argument_list pos:start="1059:23" pos:end="1059:56">(<argument pos:start="1059:24" pos:end="1059:30"><expr pos:start="1059:24" pos:end="1059:30"><name pos:start="1059:24" pos:end="1059:30">key_raw</name></expr></argument>, <argument pos:start="1059:33" pos:end="1059:39"><expr pos:start="1059:33" pos:end="1059:39"><name pos:start="1059:33" pos:end="1059:39">key_len</name></expr></argument>, <argument pos:start="1059:42" pos:end="1059:55"><expr pos:start="1059:42" pos:end="1059:55"><name pos:start="1059:42" pos:end="1059:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1060:5" pos:end="1060:27"><expr pos:start="1060:5" pos:end="1060:26"><call pos:start="1060:5" pos:end="1060:26"><name pos:start="1060:5" pos:end="1060:13">CU_ASSERT</name><argument_list pos:start="1060:14" pos:end="1060:26">(<argument pos:start="1060:15" pos:end="1060:25"><expr pos:start="1060:15" pos:end="1060:25"><name pos:start="1060:15" pos:end="1060:17">key</name> <operator pos:start="1060:19" pos:end="1060:20">!=</operator> <name pos:start="1060:22" pos:end="1060:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1061:5" pos:end="1061:18"><expr pos:start="1061:5" pos:end="1061:17"><call pos:start="1061:5" pos:end="1061:17"><name pos:start="1061:5" pos:end="1061:8">free</name><argument_list pos:start="1061:9" pos:end="1061:17">(<argument pos:start="1061:10" pos:end="1061:16"><expr pos:start="1061:10" pos:end="1061:16"><name pos:start="1061:10" pos:end="1061:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1063:5" pos:end="1065:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="1066:5" pos:end="1066:69"><expr pos:start="1066:5" pos:end="1066:68"><name pos:start="1066:5" pos:end="1066:12">cert_len</name> <operator pos:start="1066:14" pos:end="1066:14">=</operator> <call pos:start="1066:16" pos:end="1066:68"><name pos:start="1066:16" pos:end="1066:31">read_binary_file</name><argument_list pos:start="1066:32" pos:end="1066:68">(<argument pos:start="1066:33" pos:end="1066:56"><expr pos:start="1066:33" pos:end="1066:56"><literal type="string" pos:start="1066:33" pos:end="1066:56">"US898/cert-expired.pem"</literal></expr></argument>, <argument pos:start="1066:59" pos:end="1066:67"><expr pos:start="1066:59" pos:end="1066:67"><operator pos:start="1066:59" pos:end="1066:59">&amp;</operator><name pos:start="1066:60" pos:end="1066:67">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1067:5" pos:end="1067:28"><expr pos:start="1067:5" pos:end="1067:27"><call pos:start="1067:5" pos:end="1067:27"><name pos:start="1067:5" pos:end="1067:13">CU_ASSERT</name><argument_list pos:start="1067:14" pos:end="1067:27">(<argument pos:start="1067:15" pos:end="1067:26"><expr pos:start="1067:15" pos:end="1067:26"><name pos:start="1067:15" pos:end="1067:22">cert_len</name> <operator pos:start="1067:24" pos:end="1067:24">&gt;</operator> <literal type="number" pos:start="1067:26" pos:end="1067:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1068:5" pos:end="1068:45"><expr pos:start="1068:5" pos:end="1068:44"><name pos:start="1068:5" pos:end="1068:6">in</name> <operator pos:start="1068:8" pos:end="1068:8">=</operator> <call pos:start="1068:10" pos:end="1068:44"><name pos:start="1068:10" pos:end="1068:24">BIO_new_mem_buf</name><argument_list pos:start="1068:25" pos:end="1068:44">(<argument pos:start="1068:26" pos:end="1068:33"><expr pos:start="1068:26" pos:end="1068:33"><name pos:start="1068:26" pos:end="1068:33">cert_raw</name></expr></argument>, <argument pos:start="1068:36" pos:end="1068:43"><expr pos:start="1068:36" pos:end="1068:43"><name pos:start="1068:36" pos:end="1068:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1069:5" pos:end="1069:26"><expr pos:start="1069:5" pos:end="1069:25"><call pos:start="1069:5" pos:end="1069:25"><name pos:start="1069:5" pos:end="1069:13">CU_ASSERT</name><argument_list pos:start="1069:14" pos:end="1069:25">(<argument pos:start="1069:15" pos:end="1069:24"><expr pos:start="1069:15" pos:end="1069:24"><name pos:start="1069:15" pos:end="1069:16">in</name> <operator pos:start="1069:18" pos:end="1069:19">!=</operator> <name pos:start="1069:21" pos:end="1069:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1070:5" pos:end="1070:20"><if pos:start="1070:5" pos:end="1070:20">if <condition pos:start="1070:8" pos:end="1070:12">(<expr pos:start="1070:9" pos:end="1070:11"><operator pos:start="1070:9" pos:end="1070:9">!</operator><name pos:start="1070:10" pos:end="1070:11">in</name></expr>)</condition><block type="pseudo" pos:start="1070:14" pos:end="1070:20"><block_content pos:start="1070:14" pos:end="1070:20"> <return pos:start="1070:14" pos:end="1070:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1071:5" pos:end="1071:55"><expr pos:start="1071:5" pos:end="1071:54"><name pos:start="1071:5" pos:end="1071:8">cert</name> <operator pos:start="1071:10" pos:end="1071:10">=</operator> <call pos:start="1071:12" pos:end="1071:54"><name pos:start="1071:12" pos:end="1071:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="1071:33" pos:end="1071:54">(<argument pos:start="1071:34" pos:end="1071:35"><expr pos:start="1071:34" pos:end="1071:35"><name pos:start="1071:34" pos:end="1071:35">in</name></expr></argument>, <argument pos:start="1071:38" pos:end="1071:41"><expr pos:start="1071:38" pos:end="1071:41"><name pos:start="1071:38" pos:end="1071:41">NULL</name></expr></argument>, <argument pos:start="1071:44" pos:end="1071:47"><expr pos:start="1071:44" pos:end="1071:47"><name pos:start="1071:44" pos:end="1071:47">NULL</name></expr></argument>, <argument pos:start="1071:50" pos:end="1071:53"><expr pos:start="1071:50" pos:end="1071:53"><name pos:start="1071:50" pos:end="1071:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1072:5" pos:end="1072:28"><expr pos:start="1072:5" pos:end="1072:27"><call pos:start="1072:5" pos:end="1072:27"><name pos:start="1072:5" pos:end="1072:13">CU_ASSERT</name><argument_list pos:start="1072:14" pos:end="1072:27">(<argument pos:start="1072:15" pos:end="1072:26"><expr pos:start="1072:15" pos:end="1072:26"><name pos:start="1072:15" pos:end="1072:18">cert</name> <operator pos:start="1072:20" pos:end="1072:21">!=</operator> <name pos:start="1072:23" pos:end="1072:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1073:5" pos:end="1073:22"><if pos:start="1073:5" pos:end="1073:22">if <condition pos:start="1073:8" pos:end="1073:14">(<expr pos:start="1073:9" pos:end="1073:13"><operator pos:start="1073:9" pos:end="1073:9">!</operator><name pos:start="1073:10" pos:end="1073:13">cert</name></expr>)</condition><block type="pseudo" pos:start="1073:16" pos:end="1073:22"><block_content pos:start="1073:16" pos:end="1073:22"> <return pos:start="1073:16" pos:end="1073:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="1074:5" pos:end="1074:21"><expr pos:start="1074:5" pos:end="1074:20"><call pos:start="1074:5" pos:end="1074:20"><name pos:start="1074:5" pos:end="1074:16">BIO_free_all</name><argument_list pos:start="1074:17" pos:end="1074:20">(<argument pos:start="1074:18" pos:end="1074:19"><expr pos:start="1074:18" pos:end="1074:19"><name pos:start="1074:18" pos:end="1074:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1075:5" pos:end="1075:19"><expr pos:start="1075:5" pos:end="1075:18"><call pos:start="1075:5" pos:end="1075:18"><name pos:start="1075:5" pos:end="1075:8">free</name><argument_list pos:start="1075:9" pos:end="1075:18">(<argument pos:start="1075:10" pos:end="1075:17"><expr pos:start="1075:10" pos:end="1075:17"><name pos:start="1075:10" pos:end="1075:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1077:5" pos:end="1079:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="1080:5" pos:end="1080:62"><expr pos:start="1080:5" pos:end="1080:61"><name pos:start="1080:5" pos:end="1080:6">rv</name> <operator pos:start="1080:8" pos:end="1080:8">=</operator> <call pos:start="1080:10" pos:end="1080:61"><name pos:start="1080:10" pos:end="1080:32">est_client_get_csrattrs</name><argument_list pos:start="1080:33" pos:end="1080:61">(<argument pos:start="1080:34" pos:end="1080:37"><expr pos:start="1080:34" pos:end="1080:37"><name pos:start="1080:34" pos:end="1080:37">ectx</name></expr></argument>, <argument pos:start="1080:40" pos:end="1080:49"><expr pos:start="1080:40" pos:end="1080:49"><operator pos:start="1080:40" pos:end="1080:40">&amp;</operator><name pos:start="1080:41" pos:end="1080:49">attr_data</name></expr></argument>, <argument pos:start="1080:52" pos:end="1080:60"><expr pos:start="1080:52" pos:end="1080:60"><operator pos:start="1080:52" pos:end="1080:52">&amp;</operator><name pos:start="1080:53" pos:end="1080:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1081:5" pos:end="1081:34"><expr pos:start="1081:5" pos:end="1081:33"><call pos:start="1081:5" pos:end="1081:33"><name pos:start="1081:5" pos:end="1081:13">CU_ASSERT</name><argument_list pos:start="1081:14" pos:end="1081:33">(<argument pos:start="1081:15" pos:end="1081:32"><expr pos:start="1081:15" pos:end="1081:32"><name pos:start="1081:15" pos:end="1081:16">rv</name> <operator pos:start="1081:18" pos:end="1081:19">==</operator> <name pos:start="1081:21" pos:end="1081:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1083:5" pos:end="1085:7">/*
     * Enroll an expired cert that contains x509 extensions.
     */</comment>
    <expr_stmt pos:start="1086:5" pos:end="1086:58"><expr pos:start="1086:5" pos:end="1086:57"><name pos:start="1086:5" pos:end="1086:6">rv</name> <operator pos:start="1086:8" pos:end="1086:8">=</operator> <call pos:start="1086:10" pos:end="1086:57"><name pos:start="1086:10" pos:end="1086:28">est_client_reenroll</name><argument_list pos:start="1086:29" pos:end="1086:57">(<argument pos:start="1086:30" pos:end="1086:33"><expr pos:start="1086:30" pos:end="1086:33"><name pos:start="1086:30" pos:end="1086:33">ectx</name></expr></argument>, <argument pos:start="1086:36" pos:end="1086:39"><expr pos:start="1086:36" pos:end="1086:39"><name pos:start="1086:36" pos:end="1086:39">cert</name></expr></argument>, <argument pos:start="1086:42" pos:end="1086:51"><expr pos:start="1086:42" pos:end="1086:51"><operator pos:start="1086:42" pos:end="1086:42">&amp;</operator><name pos:start="1086:43" pos:end="1086:51">pkcs7_len</name></expr></argument>, <argument pos:start="1086:54" pos:end="1086:56"><expr pos:start="1086:54" pos:end="1086:56"><name pos:start="1086:54" pos:end="1086:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1087:5" pos:end="1087:39"><expr pos:start="1087:5" pos:end="1087:38"><call pos:start="1087:5" pos:end="1087:38"><name pos:start="1087:5" pos:end="1087:13">CU_ASSERT</name><argument_list pos:start="1087:14" pos:end="1087:38">(<argument pos:start="1087:15" pos:end="1087:37"><expr pos:start="1087:15" pos:end="1087:37"><name pos:start="1087:15" pos:end="1087:16">rv</name> <operator pos:start="1087:18" pos:end="1087:19">==</operator> <name pos:start="1087:21" pos:end="1087:37">EST_ERR_AUTH_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1089:5" pos:end="1091:7">/*
     * Check the HTTP status code from the reenroll operation
     */</comment>
    <expr_stmt pos:start="1092:5" pos:end="1092:56"><expr pos:start="1092:5" pos:end="1092:55"><name pos:start="1092:5" pos:end="1092:15">http_status</name> <operator pos:start="1092:17" pos:end="1092:17">=</operator> <call pos:start="1092:19" pos:end="1092:55"><name pos:start="1092:19" pos:end="1092:49">est_client_get_last_http_status</name><argument_list pos:start="1092:50" pos:end="1092:55">(<argument pos:start="1092:51" pos:end="1092:54"><expr pos:start="1092:51" pos:end="1092:54"><name pos:start="1092:51" pos:end="1092:54">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1093:5" pos:end="1093:34"><expr pos:start="1093:5" pos:end="1093:33"><call pos:start="1093:5" pos:end="1093:33"><name pos:start="1093:5" pos:end="1093:13">CU_ASSERT</name><argument_list pos:start="1093:14" pos:end="1093:33">(<argument pos:start="1093:15" pos:end="1093:32"><expr pos:start="1093:15" pos:end="1093:32"><name pos:start="1093:15" pos:end="1093:25">http_status</name> <operator pos:start="1093:27" pos:end="1093:28">==</operator> <literal type="number" pos:start="1093:30" pos:end="1093:32">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1095:5" pos:end="1095:22"><expr pos:start="1095:5" pos:end="1095:21"><call pos:start="1095:5" pos:end="1095:21"><name pos:start="1095:5" pos:end="1095:15">est_destroy</name><argument_list pos:start="1095:16" pos:end="1095:21">(<argument pos:start="1095:17" pos:end="1095:20"><expr pos:start="1095:17" pos:end="1095:20"><name pos:start="1095:17" pos:end="1095:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1097:5" pos:end="1099:7">/*
     * Re-enable HTTP basic authentication
     */</comment>
    <expr_stmt pos:start="1100:5" pos:end="1100:32"><expr pos:start="1100:5" pos:end="1100:31"><call pos:start="1100:5" pos:end="1100:31"><name pos:start="1100:5" pos:end="1100:29">st_enable_http_basic_auth</name><argument_list pos:start="1100:30" pos:end="1100:31">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block" pos:start="1104:1" pos:end="1108:3">/*
 * Verify the server fails authentication when the
 * client sends a valid identity cert but doesn't 
 * provide HTTP auth credentials.
 */</comment>
<function pos:start="1109:1" pos:end="1211:1"><type pos:start="1109:1" pos:end="1109:11"><specifier pos:start="1109:1" pos:end="1109:6">static</specifier> <name pos:start="1109:8" pos:end="1109:11">void</name></type> <name pos:start="1109:13" pos:end="1109:24">us898_test10</name> <parameter_list pos:start="1109:26" pos:end="1109:31">(<parameter pos:start="1109:27" pos:end="1109:30"><decl pos:start="1109:27" pos:end="1109:30"><type pos:start="1109:27" pos:end="1109:30"><name pos:start="1109:27" pos:end="1109:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1110:1" pos:end="1211:1">{<block_content pos:start="1111:5" pos:end="1210:22">
    <decl_stmt pos:start="1111:5" pos:end="1111:18"><decl pos:start="1111:5" pos:end="1111:17"><type pos:start="1111:5" pos:end="1111:8"><name pos:start="1111:5" pos:end="1111:8">char</name></type> <name pos:start="1111:10" pos:end="1111:17"><name pos:start="1111:10" pos:end="1111:12">cmd</name><index pos:start="1111:13" pos:end="1111:17">[<expr pos:start="1111:14" pos:end="1111:16"><literal type="number" pos:start="1111:14" pos:end="1111:16">200</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1112:5" pos:end="1112:11"><decl pos:start="1112:5" pos:end="1112:10"><type pos:start="1112:5" pos:end="1112:7"><name pos:start="1112:5" pos:end="1112:7">int</name></type> <name pos:start="1112:9" pos:end="1112:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1113:5" pos:end="1113:18"><decl pos:start="1113:5" pos:end="1113:17"><type pos:start="1113:5" pos:end="1113:13"><name pos:start="1113:5" pos:end="1113:11">EST_CTX</name> <modifier pos:start="1113:13" pos:end="1113:13">*</modifier></type><name pos:start="1113:14" pos:end="1113:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1114:5" pos:end="1114:18"><decl pos:start="1114:5" pos:end="1114:17"><type pos:start="1114:5" pos:end="1114:14"><name pos:start="1114:5" pos:end="1114:12">EVP_PKEY</name> <modifier pos:start="1114:14" pos:end="1114:14">*</modifier></type><name pos:start="1114:15" pos:end="1114:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1115:5" pos:end="1115:27"><decl pos:start="1115:5" pos:end="1115:26"><type pos:start="1115:5" pos:end="1115:19"><name pos:start="1115:5" pos:end="1115:12">unsigned</name> <name pos:start="1115:14" pos:end="1115:17">char</name> <modifier pos:start="1115:19" pos:end="1115:19">*</modifier></type><name pos:start="1115:20" pos:end="1115:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1116:5" pos:end="1116:16"><decl pos:start="1116:5" pos:end="1116:15"><type pos:start="1116:5" pos:end="1116:7"><name pos:start="1116:5" pos:end="1116:7">int</name></type> <name pos:start="1116:9" pos:end="1116:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1117:5" pos:end="1117:28"><decl pos:start="1117:5" pos:end="1117:27"><type pos:start="1117:5" pos:end="1117:19"><name pos:start="1117:5" pos:end="1117:12">unsigned</name> <name pos:start="1117:14" pos:end="1117:17">char</name> <modifier pos:start="1117:19" pos:end="1117:19">*</modifier></type><name pos:start="1117:20" pos:end="1117:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1118:5" pos:end="1118:17"><decl pos:start="1118:5" pos:end="1118:16"><type pos:start="1118:5" pos:end="1118:7"><name pos:start="1118:5" pos:end="1118:7">int</name></type> <name pos:start="1118:9" pos:end="1118:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1119:5" pos:end="1119:22"><decl pos:start="1119:5" pos:end="1119:21"><type pos:start="1119:5" pos:end="1119:7"><name pos:start="1119:5" pos:end="1119:7">int</name></type> <name pos:start="1119:9" pos:end="1119:17">pkcs7_len</name> <init pos:start="1119:19" pos:end="1119:21">= <expr pos:start="1119:21" pos:end="1119:21"><literal type="number" pos:start="1119:21" pos:end="1119:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1120:5" pos:end="1120:22"><decl pos:start="1120:5" pos:end="1120:21"><type pos:start="1120:5" pos:end="1120:10"><name pos:start="1120:5" pos:end="1120:8">X509</name> <modifier pos:start="1120:10" pos:end="1120:10">*</modifier></type><name pos:start="1120:11" pos:end="1120:14">cert</name> <init pos:start="1120:16" pos:end="1120:21">= <expr pos:start="1120:18" pos:end="1120:21"><name pos:start="1120:18" pos:end="1120:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1121:5" pos:end="1121:12"><decl pos:start="1121:5" pos:end="1121:11"><type pos:start="1121:5" pos:end="1121:9"><name pos:start="1121:5" pos:end="1121:7">BIO</name> <modifier pos:start="1121:9" pos:end="1121:9">*</modifier></type><name pos:start="1121:10" pos:end="1121:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1122:5" pos:end="1122:36"><decl pos:start="1122:5" pos:end="1122:35"><type pos:start="1122:5" pos:end="1122:19"><name pos:start="1122:5" pos:end="1122:12">unsigned</name> <name pos:start="1122:14" pos:end="1122:17">char</name> <modifier pos:start="1122:19" pos:end="1122:19">*</modifier></type><name pos:start="1122:20" pos:end="1122:28">attr_data</name> <init pos:start="1122:30" pos:end="1122:35">= <expr pos:start="1122:32" pos:end="1122:35"><name pos:start="1122:32" pos:end="1122:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1123:5" pos:end="1123:17"><decl pos:start="1123:5" pos:end="1123:16"><type pos:start="1123:5" pos:end="1123:7"><name pos:start="1123:5" pos:end="1123:7">int</name></type> <name pos:start="1123:9" pos:end="1123:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1125:5" pos:end="1125:16"><expr pos:start="1125:5" pos:end="1125:15"><name pos:start="1125:5" pos:end="1125:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1127:5" pos:end="1129:7">/*
     * Create a CSR
     */</comment>
    <expr_stmt pos:start="1130:5" pos:end="1132:44"><expr pos:start="1130:5" pos:end="1132:43"><call pos:start="1130:5" pos:end="1132:43"><name pos:start="1130:5" pos:end="1130:11">sprintf</name><argument_list pos:start="1130:12" pos:end="1132:43">(<argument pos:start="1130:13" pos:end="1130:15"><expr pos:start="1130:13" pos:end="1130:15"><name pos:start="1130:13" pos:end="1130:15">cmd</name></expr></argument>, <argument pos:start="1130:18" pos:end="1131:41"><expr pos:start="1130:18" pos:end="1131:41"><literal type="string" pos:start="1130:18" pos:end="1130:99">"openssl req -new -nodes -out %s -newkey rsa:2048 -keyout %s -subj /CN=127.0.0.1 "</literal>
	    <literal type="string" pos:start="1131:13" pos:end="1131:41">"-config CA/estExampleCA.cnf"</literal></expr></argument>, 
	    <argument pos:start="1132:13" pos:end="1132:26"><expr pos:start="1132:13" pos:end="1132:26"><name pos:start="1132:13" pos:end="1132:26">US898_TC10_CSR</name></expr></argument>, <argument pos:start="1132:29" pos:end="1132:42"><expr pos:start="1132:29" pos:end="1132:42"><name pos:start="1132:29" pos:end="1132:42">US898_TC10_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    <expr_stmt pos:start="1133:5" pos:end="1133:21"><expr pos:start="1133:5" pos:end="1133:20"><name pos:start="1133:5" pos:end="1133:6">rv</name> <operator pos:start="1133:8" pos:end="1133:8">=</operator> <call pos:start="1133:10" pos:end="1133:20"><name pos:start="1133:10" pos:end="1133:15">system</name><argument_list pos:start="1133:16" pos:end="1133:20">(<argument pos:start="1133:17" pos:end="1133:19"><expr pos:start="1133:17" pos:end="1133:19"><name pos:start="1133:17" pos:end="1133:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1134:5" pos:end="1134:23"><expr pos:start="1134:5" pos:end="1134:22"><call pos:start="1134:5" pos:end="1134:22"><name pos:start="1134:5" pos:end="1134:13">CU_ASSERT</name><argument_list pos:start="1134:14" pos:end="1134:22">(<argument pos:start="1134:15" pos:end="1134:21"><expr pos:start="1134:15" pos:end="1134:21"><name pos:start="1134:15" pos:end="1134:16">rv</name> <operator pos:start="1134:18" pos:end="1134:19">==</operator> <literal type="number" pos:start="1134:21" pos:end="1134:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1136:5" pos:end="1138:7">/*
     * Sign the CSR using our local CA
     */</comment>
    <expr_stmt pos:start="1139:5" pos:end="1140:45"><expr pos:start="1139:5" pos:end="1140:44"><call pos:start="1139:5" pos:end="1140:44"><name pos:start="1139:5" pos:end="1139:11">sprintf</name><argument_list pos:start="1139:12" pos:end="1140:44">(<argument pos:start="1139:13" pos:end="1139:15"><expr pos:start="1139:13" pos:end="1139:15"><name pos:start="1139:13" pos:end="1139:15">cmd</name></expr></argument>, <argument pos:start="1139:18" pos:end="1139:84"><expr pos:start="1139:18" pos:end="1139:84"><literal type="string" pos:start="1139:18" pos:end="1139:84">"openssl ca -out %s -batch -config CA/estExampleCA.cnf -infiles %s"</literal></expr></argument>, 
	    <argument pos:start="1140:13" pos:end="1140:27"><expr pos:start="1140:13" pos:end="1140:27"><name pos:start="1140:13" pos:end="1140:27">US898_TC10_CERT</name></expr></argument>, <argument pos:start="1140:30" pos:end="1140:43"><expr pos:start="1140:30" pos:end="1140:43"><name pos:start="1140:30" pos:end="1140:43">US898_TC10_CSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1141:5" pos:end="1141:21"><expr pos:start="1141:5" pos:end="1141:20"><name pos:start="1141:5" pos:end="1141:6">rv</name> <operator pos:start="1141:8" pos:end="1141:8">=</operator> <call pos:start="1141:10" pos:end="1141:20"><name pos:start="1141:10" pos:end="1141:15">system</name><argument_list pos:start="1141:16" pos:end="1141:20">(<argument pos:start="1141:17" pos:end="1141:19"><expr pos:start="1141:17" pos:end="1141:19"><name pos:start="1141:17" pos:end="1141:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1142:5" pos:end="1142:23"><expr pos:start="1142:5" pos:end="1142:22"><call pos:start="1142:5" pos:end="1142:22"><name pos:start="1142:5" pos:end="1142:13">CU_ASSERT</name><argument_list pos:start="1142:14" pos:end="1142:22">(<argument pos:start="1142:15" pos:end="1142:21"><expr pos:start="1142:15" pos:end="1142:21"><name pos:start="1142:15" pos:end="1142:16">rv</name> <operator pos:start="1142:18" pos:end="1142:19">==</operator> <literal type="number" pos:start="1142:21" pos:end="1142:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1144:5" pos:end="1146:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="1147:5" pos:end="1149:54"><expr pos:start="1147:5" pos:end="1149:53"><name pos:start="1147:5" pos:end="1147:8">ectx</name> <operator pos:start="1147:10" pos:end="1147:10">=</operator> <call pos:start="1147:12" pos:end="1149:53"><name pos:start="1147:12" pos:end="1147:26">est_client_init</name><argument_list pos:start="1147:27" pos:end="1149:53">(<argument pos:start="1147:28" pos:end="1147:34"><expr pos:start="1147:28" pos:end="1147:34"><name pos:start="1147:28" pos:end="1147:34">cacerts</name></expr></argument>, <argument pos:start="1147:37" pos:end="1147:47"><expr pos:start="1147:37" pos:end="1147:47"><name pos:start="1147:37" pos:end="1147:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="1148:28" pos:end="1148:46"><expr pos:start="1148:28" pos:end="1148:46"><name pos:start="1148:28" pos:end="1148:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="1149:28" pos:end="1149:52"><expr pos:start="1149:28" pos:end="1149:52"><name pos:start="1149:28" pos:end="1149:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1150:5" pos:end="1150:28"><expr pos:start="1150:5" pos:end="1150:27"><call pos:start="1150:5" pos:end="1150:27"><name pos:start="1150:5" pos:end="1150:13">CU_ASSERT</name><argument_list pos:start="1150:14" pos:end="1150:27">(<argument pos:start="1150:15" pos:end="1150:26"><expr pos:start="1150:15" pos:end="1150:26"><name pos:start="1150:15" pos:end="1150:18">ectx</name> <operator pos:start="1150:20" pos:end="1150:21">!=</operator> <name pos:start="1150:23" pos:end="1150:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1152:5" pos:end="1154:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="1155:5" pos:end="1155:57"><expr pos:start="1155:5" pos:end="1155:56"><name pos:start="1155:5" pos:end="1155:11">key_len</name> <operator pos:start="1155:13" pos:end="1155:13">=</operator> <call pos:start="1155:15" pos:end="1155:56"><name pos:start="1155:15" pos:end="1155:30">read_binary_file</name><argument_list pos:start="1155:31" pos:end="1155:56">(<argument pos:start="1155:32" pos:end="1155:45"><expr pos:start="1155:32" pos:end="1155:45"><name pos:start="1155:32" pos:end="1155:45">US898_TC10_KEY</name></expr></argument>, <argument pos:start="1155:48" pos:end="1155:55"><expr pos:start="1155:48" pos:end="1155:55"><operator pos:start="1155:48" pos:end="1155:48">&amp;</operator><name pos:start="1155:49" pos:end="1155:55">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1156:5" pos:end="1156:27"><expr pos:start="1156:5" pos:end="1156:26"><call pos:start="1156:5" pos:end="1156:26"><name pos:start="1156:5" pos:end="1156:13">CU_ASSERT</name><argument_list pos:start="1156:14" pos:end="1156:26">(<argument pos:start="1156:15" pos:end="1156:25"><expr pos:start="1156:15" pos:end="1156:25"><name pos:start="1156:15" pos:end="1156:21">key_len</name> <operator pos:start="1156:23" pos:end="1156:23">&gt;</operator> <literal type="number" pos:start="1156:25" pos:end="1156:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1157:5" pos:end="1157:57"><expr pos:start="1157:5" pos:end="1157:56"><name pos:start="1157:5" pos:end="1157:7">key</name> <operator pos:start="1157:9" pos:end="1157:9">=</operator> <call pos:start="1157:11" pos:end="1157:56"><name pos:start="1157:11" pos:end="1157:22">est_load_key</name><argument_list pos:start="1157:23" pos:end="1157:56">(<argument pos:start="1157:24" pos:end="1157:30"><expr pos:start="1157:24" pos:end="1157:30"><name pos:start="1157:24" pos:end="1157:30">key_raw</name></expr></argument>, <argument pos:start="1157:33" pos:end="1157:39"><expr pos:start="1157:33" pos:end="1157:39"><name pos:start="1157:33" pos:end="1157:39">key_len</name></expr></argument>, <argument pos:start="1157:42" pos:end="1157:55"><expr pos:start="1157:42" pos:end="1157:55"><name pos:start="1157:42" pos:end="1157:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1158:5" pos:end="1158:27"><expr pos:start="1158:5" pos:end="1158:26"><call pos:start="1158:5" pos:end="1158:26"><name pos:start="1158:5" pos:end="1158:13">CU_ASSERT</name><argument_list pos:start="1158:14" pos:end="1158:26">(<argument pos:start="1158:15" pos:end="1158:25"><expr pos:start="1158:15" pos:end="1158:25"><name pos:start="1158:15" pos:end="1158:17">key</name> <operator pos:start="1158:19" pos:end="1158:20">!=</operator> <name pos:start="1158:22" pos:end="1158:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1159:5" pos:end="1159:18"><expr pos:start="1159:5" pos:end="1159:17"><call pos:start="1159:5" pos:end="1159:17"><name pos:start="1159:5" pos:end="1159:8">free</name><argument_list pos:start="1159:9" pos:end="1159:17">(<argument pos:start="1159:10" pos:end="1159:16"><expr pos:start="1159:10" pos:end="1159:16"><name pos:start="1159:10" pos:end="1159:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1161:5" pos:end="1163:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="1164:5" pos:end="1164:60"><expr pos:start="1164:5" pos:end="1164:59"><name pos:start="1164:5" pos:end="1164:12">cert_len</name> <operator pos:start="1164:14" pos:end="1164:14">=</operator> <call pos:start="1164:16" pos:end="1164:59"><name pos:start="1164:16" pos:end="1164:31">read_binary_file</name><argument_list pos:start="1164:32" pos:end="1164:59">(<argument pos:start="1164:33" pos:end="1164:47"><expr pos:start="1164:33" pos:end="1164:47"><name pos:start="1164:33" pos:end="1164:47">US898_TC10_CERT</name></expr></argument>, <argument pos:start="1164:50" pos:end="1164:58"><expr pos:start="1164:50" pos:end="1164:58"><operator pos:start="1164:50" pos:end="1164:50">&amp;</operator><name pos:start="1164:51" pos:end="1164:58">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1165:5" pos:end="1165:28"><expr pos:start="1165:5" pos:end="1165:27"><call pos:start="1165:5" pos:end="1165:27"><name pos:start="1165:5" pos:end="1165:13">CU_ASSERT</name><argument_list pos:start="1165:14" pos:end="1165:27">(<argument pos:start="1165:15" pos:end="1165:26"><expr pos:start="1165:15" pos:end="1165:26"><name pos:start="1165:15" pos:end="1165:22">cert_len</name> <operator pos:start="1165:24" pos:end="1165:24">&gt;</operator> <literal type="number" pos:start="1165:26" pos:end="1165:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1166:5" pos:end="1166:45"><expr pos:start="1166:5" pos:end="1166:44"><name pos:start="1166:5" pos:end="1166:6">in</name> <operator pos:start="1166:8" pos:end="1166:8">=</operator> <call pos:start="1166:10" pos:end="1166:44"><name pos:start="1166:10" pos:end="1166:24">BIO_new_mem_buf</name><argument_list pos:start="1166:25" pos:end="1166:44">(<argument pos:start="1166:26" pos:end="1166:33"><expr pos:start="1166:26" pos:end="1166:33"><name pos:start="1166:26" pos:end="1166:33">cert_raw</name></expr></argument>, <argument pos:start="1166:36" pos:end="1166:43"><expr pos:start="1166:36" pos:end="1166:43"><name pos:start="1166:36" pos:end="1166:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1167:5" pos:end="1167:26"><expr pos:start="1167:5" pos:end="1167:25"><call pos:start="1167:5" pos:end="1167:25"><name pos:start="1167:5" pos:end="1167:13">CU_ASSERT</name><argument_list pos:start="1167:14" pos:end="1167:25">(<argument pos:start="1167:15" pos:end="1167:24"><expr pos:start="1167:15" pos:end="1167:24"><name pos:start="1167:15" pos:end="1167:16">in</name> <operator pos:start="1167:18" pos:end="1167:19">!=</operator> <name pos:start="1167:21" pos:end="1167:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1168:5" pos:end="1168:20"><if pos:start="1168:5" pos:end="1168:20">if <condition pos:start="1168:8" pos:end="1168:12">(<expr pos:start="1168:9" pos:end="1168:11"><operator pos:start="1168:9" pos:end="1168:9">!</operator><name pos:start="1168:10" pos:end="1168:11">in</name></expr>)</condition><block type="pseudo" pos:start="1168:14" pos:end="1168:20"><block_content pos:start="1168:14" pos:end="1168:20"> <return pos:start="1168:14" pos:end="1168:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1169:5" pos:end="1169:55"><expr pos:start="1169:5" pos:end="1169:54"><name pos:start="1169:5" pos:end="1169:8">cert</name> <operator pos:start="1169:10" pos:end="1169:10">=</operator> <call pos:start="1169:12" pos:end="1169:54"><name pos:start="1169:12" pos:end="1169:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="1169:33" pos:end="1169:54">(<argument pos:start="1169:34" pos:end="1169:35"><expr pos:start="1169:34" pos:end="1169:35"><name pos:start="1169:34" pos:end="1169:35">in</name></expr></argument>, <argument pos:start="1169:38" pos:end="1169:41"><expr pos:start="1169:38" pos:end="1169:41"><name pos:start="1169:38" pos:end="1169:41">NULL</name></expr></argument>, <argument pos:start="1169:44" pos:end="1169:47"><expr pos:start="1169:44" pos:end="1169:47"><name pos:start="1169:44" pos:end="1169:47">NULL</name></expr></argument>, <argument pos:start="1169:50" pos:end="1169:53"><expr pos:start="1169:50" pos:end="1169:53"><name pos:start="1169:50" pos:end="1169:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1170:5" pos:end="1170:28"><expr pos:start="1170:5" pos:end="1170:27"><call pos:start="1170:5" pos:end="1170:27"><name pos:start="1170:5" pos:end="1170:13">CU_ASSERT</name><argument_list pos:start="1170:14" pos:end="1170:27">(<argument pos:start="1170:15" pos:end="1170:26"><expr pos:start="1170:15" pos:end="1170:26"><name pos:start="1170:15" pos:end="1170:18">cert</name> <operator pos:start="1170:20" pos:end="1170:21">!=</operator> <name pos:start="1170:23" pos:end="1170:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1171:5" pos:end="1171:22"><if pos:start="1171:5" pos:end="1171:22">if <condition pos:start="1171:8" pos:end="1171:14">(<expr pos:start="1171:9" pos:end="1171:13"><operator pos:start="1171:9" pos:end="1171:9">!</operator><name pos:start="1171:10" pos:end="1171:13">cert</name></expr>)</condition><block type="pseudo" pos:start="1171:16" pos:end="1171:22"><block_content pos:start="1171:16" pos:end="1171:22"> <return pos:start="1171:16" pos:end="1171:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="1172:5" pos:end="1172:21"><expr pos:start="1172:5" pos:end="1172:20"><call pos:start="1172:5" pos:end="1172:20"><name pos:start="1172:5" pos:end="1172:16">BIO_free_all</name><argument_list pos:start="1172:17" pos:end="1172:20">(<argument pos:start="1172:18" pos:end="1172:19"><expr pos:start="1172:18" pos:end="1172:19"><name pos:start="1172:18" pos:end="1172:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1173:5" pos:end="1173:19"><expr pos:start="1173:5" pos:end="1173:18"><call pos:start="1173:5" pos:end="1173:18"><name pos:start="1173:5" pos:end="1173:8">free</name><argument_list pos:start="1173:9" pos:end="1173:18">(<argument pos:start="1173:10" pos:end="1173:17"><expr pos:start="1173:10" pos:end="1173:17"><name pos:start="1173:10" pos:end="1173:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block" pos:start="1176:5" pos:end="1179:7">/*
     * Set the authentication mode to use the certificate 
     * No HTTP auth credentials are provided.
     */</comment>
    <expr_stmt pos:start="1180:5" pos:end="1180:58"><expr pos:start="1180:5" pos:end="1180:57"><name pos:start="1180:5" pos:end="1180:6">rv</name> <operator pos:start="1180:8" pos:end="1180:8">=</operator> <call pos:start="1180:10" pos:end="1180:57"><name pos:start="1180:10" pos:end="1180:28">est_client_set_auth</name><argument_list pos:start="1180:29" pos:end="1180:57">(<argument pos:start="1180:30" pos:end="1180:33"><expr pos:start="1180:30" pos:end="1180:33"><name pos:start="1180:30" pos:end="1180:33">ectx</name></expr></argument>, <argument pos:start="1180:36" pos:end="1180:39"><expr pos:start="1180:36" pos:end="1180:39"><name pos:start="1180:36" pos:end="1180:39">NULL</name></expr></argument>, <argument pos:start="1180:42" pos:end="1180:45"><expr pos:start="1180:42" pos:end="1180:45"><name pos:start="1180:42" pos:end="1180:45">NULL</name></expr></argument>, <argument pos:start="1180:48" pos:end="1180:51"><expr pos:start="1180:48" pos:end="1180:51"><name pos:start="1180:48" pos:end="1180:51">cert</name></expr></argument>, <argument pos:start="1180:54" pos:end="1180:56"><expr pos:start="1180:54" pos:end="1180:56"><name pos:start="1180:54" pos:end="1180:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1181:5" pos:end="1181:34"><expr pos:start="1181:5" pos:end="1181:33"><call pos:start="1181:5" pos:end="1181:33"><name pos:start="1181:5" pos:end="1181:13">CU_ASSERT</name><argument_list pos:start="1181:14" pos:end="1181:33">(<argument pos:start="1181:15" pos:end="1181:32"><expr pos:start="1181:15" pos:end="1181:32"><name pos:start="1181:15" pos:end="1181:16">rv</name> <operator pos:start="1181:18" pos:end="1181:19">==</operator> <name pos:start="1181:21" pos:end="1181:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1183:5" pos:end="1185:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1186:5" pos:end="1186:74"><expr pos:start="1186:5" pos:end="1186:73"><call pos:start="1186:5" pos:end="1186:73"><name pos:start="1186:5" pos:end="1186:25">est_client_set_server</name><argument_list pos:start="1186:26" pos:end="1186:73">(<argument pos:start="1186:27" pos:end="1186:30"><expr pos:start="1186:27" pos:end="1186:30"><name pos:start="1186:27" pos:end="1186:30">ectx</name></expr></argument>, <argument pos:start="1186:33" pos:end="1186:47"><expr pos:start="1186:33" pos:end="1186:47"><name pos:start="1186:33" pos:end="1186:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="1186:50" pos:end="1186:66"><expr pos:start="1186:50" pos:end="1186:66"><name pos:start="1186:50" pos:end="1186:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="1186:69" pos:end="1186:72"><expr pos:start="1186:69" pos:end="1186:72"><name pos:start="1186:69" pos:end="1186:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1188:5" pos:end="1190:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="1191:5" pos:end="1191:62"><expr pos:start="1191:5" pos:end="1191:61"><name pos:start="1191:5" pos:end="1191:6">rv</name> <operator pos:start="1191:8" pos:end="1191:8">=</operator> <call pos:start="1191:10" pos:end="1191:61"><name pos:start="1191:10" pos:end="1191:32">est_client_get_csrattrs</name><argument_list pos:start="1191:33" pos:end="1191:61">(<argument pos:start="1191:34" pos:end="1191:37"><expr pos:start="1191:34" pos:end="1191:37"><name pos:start="1191:34" pos:end="1191:37">ectx</name></expr></argument>, <argument pos:start="1191:40" pos:end="1191:49"><expr pos:start="1191:40" pos:end="1191:49"><operator pos:start="1191:40" pos:end="1191:40">&amp;</operator><name pos:start="1191:41" pos:end="1191:49">attr_data</name></expr></argument>, <argument pos:start="1191:52" pos:end="1191:60"><expr pos:start="1191:52" pos:end="1191:60"><operator pos:start="1191:52" pos:end="1191:52">&amp;</operator><name pos:start="1191:53" pos:end="1191:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1192:5" pos:end="1192:34"><expr pos:start="1192:5" pos:end="1192:33"><call pos:start="1192:5" pos:end="1192:33"><name pos:start="1192:5" pos:end="1192:13">CU_ASSERT</name><argument_list pos:start="1192:14" pos:end="1192:33">(<argument pos:start="1192:15" pos:end="1192:32"><expr pos:start="1192:15" pos:end="1192:32"><name pos:start="1192:15" pos:end="1192:16">rv</name> <operator pos:start="1192:18" pos:end="1192:19">==</operator> <name pos:start="1192:21" pos:end="1192:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1194:5" pos:end="1197:7">/*
     * Enroll a cert, should fail because we 
     * didn't provide valid HTTP auth credentials
     */</comment>
    <expr_stmt pos:start="1198:5" pos:end="1198:65"><expr pos:start="1198:5" pos:end="1198:64"><name pos:start="1198:5" pos:end="1198:6">rv</name> <operator pos:start="1198:8" pos:end="1198:8">=</operator> <call pos:start="1198:10" pos:end="1198:64"><name pos:start="1198:10" pos:end="1198:26">est_client_enroll</name><argument_list pos:start="1198:27" pos:end="1198:64">(<argument pos:start="1198:28" pos:end="1198:31"><expr pos:start="1198:28" pos:end="1198:31"><name pos:start="1198:28" pos:end="1198:31">ectx</name></expr></argument>, <argument pos:start="1198:34" pos:end="1198:46"><expr pos:start="1198:34" pos:end="1198:46"><literal type="string" pos:start="1198:34" pos:end="1198:46">"TC-US898-10"</literal></expr></argument>, <argument pos:start="1198:49" pos:end="1198:58"><expr pos:start="1198:49" pos:end="1198:58"><operator pos:start="1198:49" pos:end="1198:49">&amp;</operator><name pos:start="1198:50" pos:end="1198:58">pkcs7_len</name></expr></argument>, <argument pos:start="1198:61" pos:end="1198:63"><expr pos:start="1198:61" pos:end="1198:63"><name pos:start="1198:61" pos:end="1198:63">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1199:5" pos:end="1199:39"><expr pos:start="1199:5" pos:end="1199:38"><call pos:start="1199:5" pos:end="1199:38"><name pos:start="1199:5" pos:end="1199:13">CU_ASSERT</name><argument_list pos:start="1199:14" pos:end="1199:38">(<argument pos:start="1199:15" pos:end="1199:37"><expr pos:start="1199:15" pos:end="1199:37"><name pos:start="1199:15" pos:end="1199:16">rv</name> <operator pos:start="1199:18" pos:end="1199:19">==</operator> <name pos:start="1199:21" pos:end="1199:37">EST_ERR_AUTH_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1201:5" pos:end="1206:7">/*
     * Re-Enroll the cert, should work since
     * we provide a valid cert to identify ourselves
     * and HTTP auth isn't required for re-enroll even when
     * the server has enabled HTTP auth.
     */</comment>
    <expr_stmt pos:start="1207:5" pos:end="1207:58"><expr pos:start="1207:5" pos:end="1207:57"><name pos:start="1207:5" pos:end="1207:6">rv</name> <operator pos:start="1207:8" pos:end="1207:8">=</operator> <call pos:start="1207:10" pos:end="1207:57"><name pos:start="1207:10" pos:end="1207:28">est_client_reenroll</name><argument_list pos:start="1207:29" pos:end="1207:57">(<argument pos:start="1207:30" pos:end="1207:33"><expr pos:start="1207:30" pos:end="1207:33"><name pos:start="1207:30" pos:end="1207:33">ectx</name></expr></argument>, <argument pos:start="1207:36" pos:end="1207:39"><expr pos:start="1207:36" pos:end="1207:39"><name pos:start="1207:36" pos:end="1207:39">cert</name></expr></argument>, <argument pos:start="1207:42" pos:end="1207:51"><expr pos:start="1207:42" pos:end="1207:51"><operator pos:start="1207:42" pos:end="1207:42">&amp;</operator><name pos:start="1207:43" pos:end="1207:51">pkcs7_len</name></expr></argument>, <argument pos:start="1207:54" pos:end="1207:56"><expr pos:start="1207:54" pos:end="1207:56"><name pos:start="1207:54" pos:end="1207:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1208:5" pos:end="1208:34"><expr pos:start="1208:5" pos:end="1208:33"><call pos:start="1208:5" pos:end="1208:33"><name pos:start="1208:5" pos:end="1208:13">CU_ASSERT</name><argument_list pos:start="1208:14" pos:end="1208:33">(<argument pos:start="1208:15" pos:end="1208:32"><expr pos:start="1208:15" pos:end="1208:32"><name pos:start="1208:15" pos:end="1208:16">rv</name> <operator pos:start="1208:18" pos:end="1208:19">==</operator> <name pos:start="1208:21" pos:end="1208:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1210:5" pos:end="1210:22"><expr pos:start="1210:5" pos:end="1210:21"><call pos:start="1210:5" pos:end="1210:21"><name pos:start="1210:5" pos:end="1210:15">est_destroy</name><argument_list pos:start="1210:16" pos:end="1210:21">(<argument pos:start="1210:17" pos:end="1210:20"><expr pos:start="1210:17" pos:end="1210:20"><name pos:start="1210:17" pos:end="1210:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1213:1" pos:end="1217:3">/*
 * Verify the server fails authentication when the
 * client sends an expired identy cert and uses 
 * valid HTTP auth credentials.
 */</comment>
<function pos:start="1218:1" pos:end="1292:1"><type pos:start="1218:1" pos:end="1218:11"><specifier pos:start="1218:1" pos:end="1218:6">static</specifier> <name pos:start="1218:8" pos:end="1218:11">void</name></type> <name pos:start="1218:13" pos:end="1218:24">us898_test11</name> <parameter_list pos:start="1218:26" pos:end="1218:31">(<parameter pos:start="1218:27" pos:end="1218:30"><decl pos:start="1218:27" pos:end="1218:30"><type pos:start="1218:27" pos:end="1218:30"><name pos:start="1218:27" pos:end="1218:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1219:1" pos:end="1292:1">{<block_content pos:start="1220:5" pos:end="1291:22">
    <decl_stmt pos:start="1220:5" pos:end="1220:11"><decl pos:start="1220:5" pos:end="1220:10"><type pos:start="1220:5" pos:end="1220:7"><name pos:start="1220:5" pos:end="1220:7">int</name></type> <name pos:start="1220:9" pos:end="1220:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1221:5" pos:end="1221:18"><decl pos:start="1221:5" pos:end="1221:17"><type pos:start="1221:5" pos:end="1221:13"><name pos:start="1221:5" pos:end="1221:11">EST_CTX</name> <modifier pos:start="1221:13" pos:end="1221:13">*</modifier></type><name pos:start="1221:14" pos:end="1221:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1222:5" pos:end="1222:18"><decl pos:start="1222:5" pos:end="1222:17"><type pos:start="1222:5" pos:end="1222:14"><name pos:start="1222:5" pos:end="1222:12">EVP_PKEY</name> <modifier pos:start="1222:14" pos:end="1222:14">*</modifier></type><name pos:start="1222:15" pos:end="1222:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1223:5" pos:end="1223:27"><decl pos:start="1223:5" pos:end="1223:26"><type pos:start="1223:5" pos:end="1223:19"><name pos:start="1223:5" pos:end="1223:12">unsigned</name> <name pos:start="1223:14" pos:end="1223:17">char</name> <modifier pos:start="1223:19" pos:end="1223:19">*</modifier></type><name pos:start="1223:20" pos:end="1223:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1224:5" pos:end="1224:16"><decl pos:start="1224:5" pos:end="1224:15"><type pos:start="1224:5" pos:end="1224:7"><name pos:start="1224:5" pos:end="1224:7">int</name></type> <name pos:start="1224:9" pos:end="1224:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1225:5" pos:end="1225:28"><decl pos:start="1225:5" pos:end="1225:27"><type pos:start="1225:5" pos:end="1225:19"><name pos:start="1225:5" pos:end="1225:12">unsigned</name> <name pos:start="1225:14" pos:end="1225:17">char</name> <modifier pos:start="1225:19" pos:end="1225:19">*</modifier></type><name pos:start="1225:20" pos:end="1225:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1226:5" pos:end="1226:17"><decl pos:start="1226:5" pos:end="1226:16"><type pos:start="1226:5" pos:end="1226:7"><name pos:start="1226:5" pos:end="1226:7">int</name></type> <name pos:start="1226:9" pos:end="1226:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1227:5" pos:end="1227:22"><decl pos:start="1227:5" pos:end="1227:21"><type pos:start="1227:5" pos:end="1227:7"><name pos:start="1227:5" pos:end="1227:7">int</name></type> <name pos:start="1227:9" pos:end="1227:17">pkcs7_len</name> <init pos:start="1227:19" pos:end="1227:21">= <expr pos:start="1227:21" pos:end="1227:21"><literal type="number" pos:start="1227:21" pos:end="1227:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1228:5" pos:end="1228:22"><decl pos:start="1228:5" pos:end="1228:21"><type pos:start="1228:5" pos:end="1228:10"><name pos:start="1228:5" pos:end="1228:8">X509</name> <modifier pos:start="1228:10" pos:end="1228:10">*</modifier></type><name pos:start="1228:11" pos:end="1228:14">cert</name> <init pos:start="1228:16" pos:end="1228:21">= <expr pos:start="1228:18" pos:end="1228:21"><name pos:start="1228:18" pos:end="1228:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1229:5" pos:end="1229:12"><decl pos:start="1229:5" pos:end="1229:11"><type pos:start="1229:5" pos:end="1229:9"><name pos:start="1229:5" pos:end="1229:7">BIO</name> <modifier pos:start="1229:9" pos:end="1229:9">*</modifier></type><name pos:start="1229:10" pos:end="1229:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1230:5" pos:end="1230:36"><decl pos:start="1230:5" pos:end="1230:35"><type pos:start="1230:5" pos:end="1230:19"><name pos:start="1230:5" pos:end="1230:12">unsigned</name> <name pos:start="1230:14" pos:end="1230:17">char</name> <modifier pos:start="1230:19" pos:end="1230:19">*</modifier></type><name pos:start="1230:20" pos:end="1230:28">attr_data</name> <init pos:start="1230:30" pos:end="1230:35">= <expr pos:start="1230:32" pos:end="1230:35"><name pos:start="1230:32" pos:end="1230:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1231:5" pos:end="1231:17"><decl pos:start="1231:5" pos:end="1231:16"><type pos:start="1231:5" pos:end="1231:7"><name pos:start="1231:5" pos:end="1231:7">int</name></type> <name pos:start="1231:9" pos:end="1231:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1233:5" pos:end="1233:16"><expr pos:start="1233:5" pos:end="1233:15"><name pos:start="1233:5" pos:end="1233:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1235:5" pos:end="1237:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="1238:5" pos:end="1240:54"><expr pos:start="1238:5" pos:end="1240:53"><name pos:start="1238:5" pos:end="1238:8">ectx</name> <operator pos:start="1238:10" pos:end="1238:10">=</operator> <call pos:start="1238:12" pos:end="1240:53"><name pos:start="1238:12" pos:end="1238:26">est_client_init</name><argument_list pos:start="1238:27" pos:end="1240:53">(<argument pos:start="1238:28" pos:end="1238:34"><expr pos:start="1238:28" pos:end="1238:34"><name pos:start="1238:28" pos:end="1238:34">cacerts</name></expr></argument>, <argument pos:start="1238:37" pos:end="1238:47"><expr pos:start="1238:37" pos:end="1238:47"><name pos:start="1238:37" pos:end="1238:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="1239:28" pos:end="1239:46"><expr pos:start="1239:28" pos:end="1239:46"><name pos:start="1239:28" pos:end="1239:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="1240:28" pos:end="1240:52"><expr pos:start="1240:28" pos:end="1240:52"><name pos:start="1240:28" pos:end="1240:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1241:5" pos:end="1241:28"><expr pos:start="1241:5" pos:end="1241:27"><call pos:start="1241:5" pos:end="1241:27"><name pos:start="1241:5" pos:end="1241:13">CU_ASSERT</name><argument_list pos:start="1241:14" pos:end="1241:27">(<argument pos:start="1241:15" pos:end="1241:26"><expr pos:start="1241:15" pos:end="1241:26"><name pos:start="1241:15" pos:end="1241:18">ectx</name> <operator pos:start="1241:20" pos:end="1241:21">!=</operator> <name pos:start="1241:23" pos:end="1241:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1243:5" pos:end="1245:7">/*
     * Read in the private key
     */</comment>
    <expr_stmt pos:start="1246:5" pos:end="1246:57"><expr pos:start="1246:5" pos:end="1246:56"><name pos:start="1246:5" pos:end="1246:11">key_len</name> <operator pos:start="1246:13" pos:end="1246:13">=</operator> <call pos:start="1246:15" pos:end="1246:56"><name pos:start="1246:15" pos:end="1246:30">read_binary_file</name><argument_list pos:start="1246:31" pos:end="1246:56">(<argument pos:start="1246:32" pos:end="1246:45"><expr pos:start="1246:32" pos:end="1246:45"><name pos:start="1246:32" pos:end="1246:45">US898_TC11_KEY</name></expr></argument>, <argument pos:start="1246:48" pos:end="1246:55"><expr pos:start="1246:48" pos:end="1246:55"><operator pos:start="1246:48" pos:end="1246:48">&amp;</operator><name pos:start="1246:49" pos:end="1246:55">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1247:5" pos:end="1247:27"><expr pos:start="1247:5" pos:end="1247:26"><call pos:start="1247:5" pos:end="1247:26"><name pos:start="1247:5" pos:end="1247:13">CU_ASSERT</name><argument_list pos:start="1247:14" pos:end="1247:26">(<argument pos:start="1247:15" pos:end="1247:25"><expr pos:start="1247:15" pos:end="1247:25"><name pos:start="1247:15" pos:end="1247:21">key_len</name> <operator pos:start="1247:23" pos:end="1247:23">&gt;</operator> <literal type="number" pos:start="1247:25" pos:end="1247:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1248:5" pos:end="1248:57"><expr pos:start="1248:5" pos:end="1248:56"><name pos:start="1248:5" pos:end="1248:7">key</name> <operator pos:start="1248:9" pos:end="1248:9">=</operator> <call pos:start="1248:11" pos:end="1248:56"><name pos:start="1248:11" pos:end="1248:22">est_load_key</name><argument_list pos:start="1248:23" pos:end="1248:56">(<argument pos:start="1248:24" pos:end="1248:30"><expr pos:start="1248:24" pos:end="1248:30"><name pos:start="1248:24" pos:end="1248:30">key_raw</name></expr></argument>, <argument pos:start="1248:33" pos:end="1248:39"><expr pos:start="1248:33" pos:end="1248:39"><name pos:start="1248:33" pos:end="1248:39">key_len</name></expr></argument>, <argument pos:start="1248:42" pos:end="1248:55"><expr pos:start="1248:42" pos:end="1248:55"><name pos:start="1248:42" pos:end="1248:55">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1249:5" pos:end="1249:27"><expr pos:start="1249:5" pos:end="1249:26"><call pos:start="1249:5" pos:end="1249:26"><name pos:start="1249:5" pos:end="1249:13">CU_ASSERT</name><argument_list pos:start="1249:14" pos:end="1249:26">(<argument pos:start="1249:15" pos:end="1249:25"><expr pos:start="1249:15" pos:end="1249:25"><name pos:start="1249:15" pos:end="1249:17">key</name> <operator pos:start="1249:19" pos:end="1249:20">!=</operator> <name pos:start="1249:22" pos:end="1249:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1250:5" pos:end="1250:18"><expr pos:start="1250:5" pos:end="1250:17"><call pos:start="1250:5" pos:end="1250:17"><name pos:start="1250:5" pos:end="1250:8">free</name><argument_list pos:start="1250:9" pos:end="1250:17">(<argument pos:start="1250:10" pos:end="1250:16"><expr pos:start="1250:10" pos:end="1250:16"><name pos:start="1250:10" pos:end="1250:16">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1252:5" pos:end="1254:7">/*
     * Read in the old cert
     */</comment>
    <expr_stmt pos:start="1255:5" pos:end="1255:60"><expr pos:start="1255:5" pos:end="1255:59"><name pos:start="1255:5" pos:end="1255:12">cert_len</name> <operator pos:start="1255:14" pos:end="1255:14">=</operator> <call pos:start="1255:16" pos:end="1255:59"><name pos:start="1255:16" pos:end="1255:31">read_binary_file</name><argument_list pos:start="1255:32" pos:end="1255:59">(<argument pos:start="1255:33" pos:end="1255:47"><expr pos:start="1255:33" pos:end="1255:47"><name pos:start="1255:33" pos:end="1255:47">US898_TC11_CERT</name></expr></argument>, <argument pos:start="1255:50" pos:end="1255:58"><expr pos:start="1255:50" pos:end="1255:58"><operator pos:start="1255:50" pos:end="1255:50">&amp;</operator><name pos:start="1255:51" pos:end="1255:58">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1256:5" pos:end="1256:28"><expr pos:start="1256:5" pos:end="1256:27"><call pos:start="1256:5" pos:end="1256:27"><name pos:start="1256:5" pos:end="1256:13">CU_ASSERT</name><argument_list pos:start="1256:14" pos:end="1256:27">(<argument pos:start="1256:15" pos:end="1256:26"><expr pos:start="1256:15" pos:end="1256:26"><name pos:start="1256:15" pos:end="1256:22">cert_len</name> <operator pos:start="1256:24" pos:end="1256:24">&gt;</operator> <literal type="number" pos:start="1256:26" pos:end="1256:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1257:5" pos:end="1257:45"><expr pos:start="1257:5" pos:end="1257:44"><name pos:start="1257:5" pos:end="1257:6">in</name> <operator pos:start="1257:8" pos:end="1257:8">=</operator> <call pos:start="1257:10" pos:end="1257:44"><name pos:start="1257:10" pos:end="1257:24">BIO_new_mem_buf</name><argument_list pos:start="1257:25" pos:end="1257:44">(<argument pos:start="1257:26" pos:end="1257:33"><expr pos:start="1257:26" pos:end="1257:33"><name pos:start="1257:26" pos:end="1257:33">cert_raw</name></expr></argument>, <argument pos:start="1257:36" pos:end="1257:43"><expr pos:start="1257:36" pos:end="1257:43"><name pos:start="1257:36" pos:end="1257:43">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1258:5" pos:end="1258:26"><expr pos:start="1258:5" pos:end="1258:25"><call pos:start="1258:5" pos:end="1258:25"><name pos:start="1258:5" pos:end="1258:13">CU_ASSERT</name><argument_list pos:start="1258:14" pos:end="1258:25">(<argument pos:start="1258:15" pos:end="1258:24"><expr pos:start="1258:15" pos:end="1258:24"><name pos:start="1258:15" pos:end="1258:16">in</name> <operator pos:start="1258:18" pos:end="1258:19">!=</operator> <name pos:start="1258:21" pos:end="1258:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1259:5" pos:end="1259:20"><if pos:start="1259:5" pos:end="1259:20">if <condition pos:start="1259:8" pos:end="1259:12">(<expr pos:start="1259:9" pos:end="1259:11"><operator pos:start="1259:9" pos:end="1259:9">!</operator><name pos:start="1259:10" pos:end="1259:11">in</name></expr>)</condition><block type="pseudo" pos:start="1259:14" pos:end="1259:20"><block_content pos:start="1259:14" pos:end="1259:20"> <return pos:start="1259:14" pos:end="1259:20">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1260:5" pos:end="1260:55"><expr pos:start="1260:5" pos:end="1260:54"><name pos:start="1260:5" pos:end="1260:8">cert</name> <operator pos:start="1260:10" pos:end="1260:10">=</operator> <call pos:start="1260:12" pos:end="1260:54"><name pos:start="1260:12" pos:end="1260:32">PEM_read_bio_X509_AUX</name><argument_list pos:start="1260:33" pos:end="1260:54">(<argument pos:start="1260:34" pos:end="1260:35"><expr pos:start="1260:34" pos:end="1260:35"><name pos:start="1260:34" pos:end="1260:35">in</name></expr></argument>, <argument pos:start="1260:38" pos:end="1260:41"><expr pos:start="1260:38" pos:end="1260:41"><name pos:start="1260:38" pos:end="1260:41">NULL</name></expr></argument>, <argument pos:start="1260:44" pos:end="1260:47"><expr pos:start="1260:44" pos:end="1260:47"><name pos:start="1260:44" pos:end="1260:47">NULL</name></expr></argument>, <argument pos:start="1260:50" pos:end="1260:53"><expr pos:start="1260:50" pos:end="1260:53"><name pos:start="1260:50" pos:end="1260:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1261:5" pos:end="1261:28"><expr pos:start="1261:5" pos:end="1261:27"><call pos:start="1261:5" pos:end="1261:27"><name pos:start="1261:5" pos:end="1261:13">CU_ASSERT</name><argument_list pos:start="1261:14" pos:end="1261:27">(<argument pos:start="1261:15" pos:end="1261:26"><expr pos:start="1261:15" pos:end="1261:26"><name pos:start="1261:15" pos:end="1261:18">cert</name> <operator pos:start="1261:20" pos:end="1261:21">!=</operator> <name pos:start="1261:23" pos:end="1261:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1262:5" pos:end="1262:22"><if pos:start="1262:5" pos:end="1262:22">if <condition pos:start="1262:8" pos:end="1262:14">(<expr pos:start="1262:9" pos:end="1262:13"><operator pos:start="1262:9" pos:end="1262:9">!</operator><name pos:start="1262:10" pos:end="1262:13">cert</name></expr>)</condition><block type="pseudo" pos:start="1262:16" pos:end="1262:22"><block_content pos:start="1262:16" pos:end="1262:22"> <return pos:start="1262:16" pos:end="1262:22">return;</return></block_content></block></if></if_stmt> 
    <expr_stmt pos:start="1263:5" pos:end="1263:21"><expr pos:start="1263:5" pos:end="1263:20"><call pos:start="1263:5" pos:end="1263:20"><name pos:start="1263:5" pos:end="1263:16">BIO_free_all</name><argument_list pos:start="1263:17" pos:end="1263:20">(<argument pos:start="1263:18" pos:end="1263:19"><expr pos:start="1263:18" pos:end="1263:19"><name pos:start="1263:18" pos:end="1263:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1264:5" pos:end="1264:19"><expr pos:start="1264:5" pos:end="1264:18"><call pos:start="1264:5" pos:end="1264:18"><name pos:start="1264:5" pos:end="1264:8">free</name><argument_list pos:start="1264:9" pos:end="1264:18">(<argument pos:start="1264:10" pos:end="1264:17"><expr pos:start="1264:10" pos:end="1264:17"><name pos:start="1264:10" pos:end="1264:17">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block" pos:start="1267:5" pos:end="1270:7">/*
     * Set the authentication mode to use the expired certificate 
     * and valid HTTP auth credentials.
     */</comment>
    <expr_stmt pos:start="1271:5" pos:end="1271:68"><expr pos:start="1271:5" pos:end="1271:67"><name pos:start="1271:5" pos:end="1271:6">rv</name> <operator pos:start="1271:8" pos:end="1271:8">=</operator> <call pos:start="1271:10" pos:end="1271:67"><name pos:start="1271:10" pos:end="1271:28">est_client_set_auth</name><argument_list pos:start="1271:29" pos:end="1271:67">(<argument pos:start="1271:30" pos:end="1271:33"><expr pos:start="1271:30" pos:end="1271:33"><name pos:start="1271:30" pos:end="1271:33">ectx</name></expr></argument>, <argument pos:start="1271:36" pos:end="1271:44"><expr pos:start="1271:36" pos:end="1271:44"><name pos:start="1271:36" pos:end="1271:44">US898_UID</name></expr></argument>, <argument pos:start="1271:47" pos:end="1271:55"><expr pos:start="1271:47" pos:end="1271:55"><name pos:start="1271:47" pos:end="1271:55">US898_PWD</name></expr></argument>, <argument pos:start="1271:58" pos:end="1271:61"><expr pos:start="1271:58" pos:end="1271:61"><name pos:start="1271:58" pos:end="1271:61">cert</name></expr></argument>, <argument pos:start="1271:64" pos:end="1271:66"><expr pos:start="1271:64" pos:end="1271:66"><name pos:start="1271:64" pos:end="1271:66">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1272:5" pos:end="1272:34"><expr pos:start="1272:5" pos:end="1272:33"><call pos:start="1272:5" pos:end="1272:33"><name pos:start="1272:5" pos:end="1272:13">CU_ASSERT</name><argument_list pos:start="1272:14" pos:end="1272:33">(<argument pos:start="1272:15" pos:end="1272:32"><expr pos:start="1272:15" pos:end="1272:32"><name pos:start="1272:15" pos:end="1272:16">rv</name> <operator pos:start="1272:18" pos:end="1272:19">==</operator> <name pos:start="1272:21" pos:end="1272:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1274:5" pos:end="1276:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1277:5" pos:end="1277:74"><expr pos:start="1277:5" pos:end="1277:73"><call pos:start="1277:5" pos:end="1277:73"><name pos:start="1277:5" pos:end="1277:25">est_client_set_server</name><argument_list pos:start="1277:26" pos:end="1277:73">(<argument pos:start="1277:27" pos:end="1277:30"><expr pos:start="1277:27" pos:end="1277:30"><name pos:start="1277:27" pos:end="1277:30">ectx</name></expr></argument>, <argument pos:start="1277:33" pos:end="1277:47"><expr pos:start="1277:33" pos:end="1277:47"><name pos:start="1277:33" pos:end="1277:47">US898_SERVER_IP</name></expr></argument>, <argument pos:start="1277:50" pos:end="1277:66"><expr pos:start="1277:50" pos:end="1277:66"><name pos:start="1277:50" pos:end="1277:66">US898_SERVER_PORT</name></expr></argument>, <argument pos:start="1277:69" pos:end="1277:72"><expr pos:start="1277:69" pos:end="1277:72"><name pos:start="1277:69" pos:end="1277:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1279:5" pos:end="1281:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="1282:5" pos:end="1282:62"><expr pos:start="1282:5" pos:end="1282:61"><name pos:start="1282:5" pos:end="1282:6">rv</name> <operator pos:start="1282:8" pos:end="1282:8">=</operator> <call pos:start="1282:10" pos:end="1282:61"><name pos:start="1282:10" pos:end="1282:32">est_client_get_csrattrs</name><argument_list pos:start="1282:33" pos:end="1282:61">(<argument pos:start="1282:34" pos:end="1282:37"><expr pos:start="1282:34" pos:end="1282:37"><name pos:start="1282:34" pos:end="1282:37">ectx</name></expr></argument>, <argument pos:start="1282:40" pos:end="1282:49"><expr pos:start="1282:40" pos:end="1282:49"><operator pos:start="1282:40" pos:end="1282:40">&amp;</operator><name pos:start="1282:41" pos:end="1282:49">attr_data</name></expr></argument>, <argument pos:start="1282:52" pos:end="1282:60"><expr pos:start="1282:52" pos:end="1282:60"><operator pos:start="1282:52" pos:end="1282:52">&amp;</operator><name pos:start="1282:53" pos:end="1282:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1283:5" pos:end="1283:41"><expr pos:start="1283:5" pos:end="1283:40"><call pos:start="1283:5" pos:end="1283:40"><name pos:start="1283:5" pos:end="1283:13">CU_ASSERT</name><argument_list pos:start="1283:14" pos:end="1283:40">(<argument pos:start="1283:15" pos:end="1283:39"><expr pos:start="1283:15" pos:end="1283:39"><name pos:start="1283:15" pos:end="1283:16">rv</name> <operator pos:start="1283:18" pos:end="1283:19">==</operator> <name pos:start="1283:21" pos:end="1283:39">EST_ERR_SSL_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1285:5" pos:end="1287:7">/*
     * Re-Enroll the cert 
     */</comment>
    <expr_stmt pos:start="1288:5" pos:end="1288:58"><expr pos:start="1288:5" pos:end="1288:57"><name pos:start="1288:5" pos:end="1288:6">rv</name> <operator pos:start="1288:8" pos:end="1288:8">=</operator> <call pos:start="1288:10" pos:end="1288:57"><name pos:start="1288:10" pos:end="1288:28">est_client_reenroll</name><argument_list pos:start="1288:29" pos:end="1288:57">(<argument pos:start="1288:30" pos:end="1288:33"><expr pos:start="1288:30" pos:end="1288:33"><name pos:start="1288:30" pos:end="1288:33">ectx</name></expr></argument>, <argument pos:start="1288:36" pos:end="1288:39"><expr pos:start="1288:36" pos:end="1288:39"><name pos:start="1288:36" pos:end="1288:39">cert</name></expr></argument>, <argument pos:start="1288:42" pos:end="1288:51"><expr pos:start="1288:42" pos:end="1288:51"><operator pos:start="1288:42" pos:end="1288:42">&amp;</operator><name pos:start="1288:43" pos:end="1288:51">pkcs7_len</name></expr></argument>, <argument pos:start="1288:54" pos:end="1288:56"><expr pos:start="1288:54" pos:end="1288:56"><name pos:start="1288:54" pos:end="1288:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1289:5" pos:end="1289:41"><expr pos:start="1289:5" pos:end="1289:40"><call pos:start="1289:5" pos:end="1289:40"><name pos:start="1289:5" pos:end="1289:13">CU_ASSERT</name><argument_list pos:start="1289:14" pos:end="1289:40">(<argument pos:start="1289:15" pos:end="1289:39"><expr pos:start="1289:15" pos:end="1289:39"><name pos:start="1289:15" pos:end="1289:16">rv</name> <operator pos:start="1289:18" pos:end="1289:19">==</operator> <name pos:start="1289:21" pos:end="1289:39">EST_ERR_SSL_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1291:5" pos:end="1291:22"><expr pos:start="1291:5" pos:end="1291:21"><call pos:start="1291:5" pos:end="1291:21"><name pos:start="1291:5" pos:end="1291:15">est_destroy</name><argument_list pos:start="1291:16" pos:end="1291:21">(<argument pos:start="1291:17" pos:end="1291:20"><expr pos:start="1291:17" pos:end="1291:20"><name pos:start="1291:17" pos:end="1291:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function pos:start="1295:1" pos:end="1330:1"><type pos:start="1295:1" pos:end="1295:3"><name pos:start="1295:1" pos:end="1295:3">int</name></type> <name pos:start="1295:5" pos:end="1295:19">us898_add_suite</name> <parameter_list pos:start="1295:21" pos:end="1295:26">(<parameter pos:start="1295:22" pos:end="1295:25"><decl pos:start="1295:22" pos:end="1295:25"><type pos:start="1295:22" pos:end="1295:25"><name pos:start="1295:22" pos:end="1295:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1296:1" pos:end="1330:1">{<block_content pos:start="1298:4" pos:end="1330:0">
<cpp:ifdef pos:start="1297:1" pos:end="1297:17">#<cpp:directive pos:start="1297:2" pos:end="1297:6">ifdef</cpp:directive> <name pos:start="1297:8" pos:end="1297:17">HAVE_CUNIT</name></cpp:ifdef>
   <decl_stmt pos:start="1298:4" pos:end="1298:27"><decl pos:start="1298:4" pos:end="1298:26"><type pos:start="1298:4" pos:end="1298:12"><name pos:start="1298:4" pos:end="1298:12">CU_pSuite</name></type> <name pos:start="1298:14" pos:end="1298:19">pSuite</name> <init pos:start="1298:21" pos:end="1298:26">= <expr pos:start="1298:23" pos:end="1298:26"><name pos:start="1298:23" pos:end="1298:26">NULL</name></expr></init></decl>;</decl_stmt>

   <comment type="block" pos:start="1300:4" pos:end="1300:36">/* add a suite to the registry */</comment>
   <expr_stmt pos:start="1301:4" pos:end="1303:47"><expr pos:start="1301:4" pos:end="1303:46"><name pos:start="1301:4" pos:end="1301:9">pSuite</name> <operator pos:start="1301:11" pos:end="1301:11">=</operator> <call pos:start="1301:13" pos:end="1303:46"><name pos:start="1301:13" pos:end="1301:24">CU_add_suite</name><argument_list pos:start="1301:25" pos:end="1303:46">(<argument pos:start="1301:26" pos:end="1301:48"><expr pos:start="1301:26" pos:end="1301:48"><literal type="string" pos:start="1301:26" pos:end="1301:48">"us898_client_reenroll"</literal></expr></argument>, 
	                  <argument pos:start="1302:27" pos:end="1302:42"><expr pos:start="1302:27" pos:end="1302:42"><name pos:start="1302:27" pos:end="1302:42">us898_init_suite</name></expr></argument>, 
			  <argument pos:start="1303:27" pos:end="1303:45"><expr pos:start="1303:27" pos:end="1303:45"><name pos:start="1303:27" pos:end="1303:45">us898_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt pos:start="1304:4" pos:end="1307:4"><if pos:start="1304:4" pos:end="1307:4">if <condition pos:start="1304:7" pos:end="1304:22">(<expr pos:start="1304:8" pos:end="1304:21"><name pos:start="1304:8" pos:end="1304:11">NULL</name> <operator pos:start="1304:13" pos:end="1304:14">==</operator> <name pos:start="1304:16" pos:end="1304:21">pSuite</name></expr>)</condition> <block pos:start="1304:24" pos:end="1307:4">{<block_content pos:start="1305:7" pos:end="1306:28">
      <expr_stmt pos:start="1305:7" pos:end="1305:28"><expr pos:start="1305:7" pos:end="1305:27"><call pos:start="1305:7" pos:end="1305:27"><name pos:start="1305:7" pos:end="1305:25">CU_cleanup_registry</name><argument_list pos:start="1305:26" pos:end="1305:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1306:7" pos:end="1306:28">return <expr pos:start="1306:14" pos:end="1306:27"><call pos:start="1306:14" pos:end="1306:27"><name pos:start="1306:14" pos:end="1306:25">CU_get_error</name><argument_list pos:start="1306:26" pos:end="1306:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <comment type="block" pos:start="1309:4" pos:end="1311:6">/* 
    * Add the tests to the suite 
    */</comment>
   <if_stmt pos:start="1312:4" pos:end="1326:4"><if pos:start="1312:4" pos:end="1326:4">if <condition pos:start="1312:7" pos:end="1322:99">(<expr pos:start="1312:8" pos:end="1322:98"><operator pos:start="1312:8" pos:end="1312:8">(</operator><name pos:start="1312:9" pos:end="1312:12">NULL</name> <operator pos:start="1312:14" pos:end="1312:15">==</operator> <call pos:start="1312:17" pos:end="1312:79"><name pos:start="1312:17" pos:end="1312:27">CU_add_test</name><argument_list pos:start="1312:28" pos:end="1312:79">(<argument pos:start="1312:29" pos:end="1312:34"><expr pos:start="1312:29" pos:end="1312:34"><name pos:start="1312:29" pos:end="1312:34">pSuite</name></expr></argument>, <argument pos:start="1312:37" pos:end="1312:65"><expr pos:start="1312:37" pos:end="1312:65"><literal type="string" pos:start="1312:37" pos:end="1312:65">"Simple enroll and re-enroll"</literal></expr></argument>, <argument pos:start="1312:68" pos:end="1312:78"><expr pos:start="1312:68" pos:end="1312:78"><name pos:start="1312:68" pos:end="1312:78">us898_test1</name></expr></argument>)</argument_list></call><operator pos:start="1312:80" pos:end="1312:80">)</operator> <operator pos:start="1312:82" pos:end="1312:83">||</operator>
       <operator pos:start="1313:8" pos:end="1313:8">(</operator><name pos:start="1313:9" pos:end="1313:12">NULL</name> <operator pos:start="1313:14" pos:end="1313:15">==</operator> <call pos:start="1313:17" pos:end="1313:90"><name pos:start="1313:17" pos:end="1313:27">CU_add_test</name><argument_list pos:start="1313:28" pos:end="1313:90">(<argument pos:start="1313:29" pos:end="1313:34"><expr pos:start="1313:29" pos:end="1313:34"><name pos:start="1313:29" pos:end="1313:34">pSuite</name></expr></argument>, <argument pos:start="1313:37" pos:end="1313:76"><expr pos:start="1313:37" pos:end="1313:76"><literal type="string" pos:start="1313:37" pos:end="1313:76">"Re-enroll expired cert with extensions"</literal></expr></argument>, <argument pos:start="1313:79" pos:end="1313:89"><expr pos:start="1313:79" pos:end="1313:89"><name pos:start="1313:79" pos:end="1313:89">us898_test2</name></expr></argument>)</argument_list></call><operator pos:start="1313:91" pos:end="1313:91">)</operator> <operator pos:start="1313:93" pos:end="1313:94">||</operator> 
       <operator pos:start="1314:8" pos:end="1314:8">(</operator><name pos:start="1314:9" pos:end="1314:12">NULL</name> <operator pos:start="1314:14" pos:end="1314:15">==</operator> <call pos:start="1314:17" pos:end="1314:77"><name pos:start="1314:17" pos:end="1314:27">CU_add_test</name><argument_list pos:start="1314:28" pos:end="1314:77">(<argument pos:start="1314:29" pos:end="1314:34"><expr pos:start="1314:29" pos:end="1314:34"><name pos:start="1314:29" pos:end="1314:34">pSuite</name></expr></argument>, <argument pos:start="1314:37" pos:end="1314:63"><expr pos:start="1314:37" pos:end="1314:63"><literal type="string" pos:start="1314:37" pos:end="1314:63">"Re-enroll using NULL cert"</literal></expr></argument>, <argument pos:start="1314:66" pos:end="1314:76"><expr pos:start="1314:66" pos:end="1314:76"><name pos:start="1314:66" pos:end="1314:76">us898_test3</name></expr></argument>)</argument_list></call><operator pos:start="1314:78" pos:end="1314:78">)</operator> <operator pos:start="1314:80" pos:end="1314:81">||</operator> 
       <operator pos:start="1315:8" pos:end="1315:8">(</operator><name pos:start="1315:9" pos:end="1315:12">NULL</name> <operator pos:start="1315:14" pos:end="1315:15">==</operator> <call pos:start="1315:17" pos:end="1315:76"><name pos:start="1315:17" pos:end="1315:27">CU_add_test</name><argument_list pos:start="1315:28" pos:end="1315:76">(<argument pos:start="1315:29" pos:end="1315:34"><expr pos:start="1315:29" pos:end="1315:34"><name pos:start="1315:29" pos:end="1315:34">pSuite</name></expr></argument>, <argument pos:start="1315:37" pos:end="1315:62"><expr pos:start="1315:37" pos:end="1315:62"><literal type="string" pos:start="1315:37" pos:end="1315:62">"Re-enroll using NULL key"</literal></expr></argument>, <argument pos:start="1315:65" pos:end="1315:75"><expr pos:start="1315:65" pos:end="1315:75"><name pos:start="1315:65" pos:end="1315:75">us898_test4</name></expr></argument>)</argument_list></call><operator pos:start="1315:77" pos:end="1315:77">)</operator> <operator pos:start="1315:79" pos:end="1315:80">||</operator> 
       <operator pos:start="1316:8" pos:end="1316:8">(</operator><name pos:start="1316:9" pos:end="1316:12">NULL</name> <operator pos:start="1316:14" pos:end="1316:15">==</operator> <call pos:start="1316:17" pos:end="1316:87"><name pos:start="1316:17" pos:end="1316:27">CU_add_test</name><argument_list pos:start="1316:28" pos:end="1316:87">(<argument pos:start="1316:29" pos:end="1316:34"><expr pos:start="1316:29" pos:end="1316:34"><name pos:start="1316:29" pos:end="1316:34">pSuite</name></expr></argument>, <argument pos:start="1316:37" pos:end="1316:73"><expr pos:start="1316:37" pos:end="1316:73"><literal type="string" pos:start="1316:37" pos:end="1316:73">"Re-enroll using corrupted X509 cert"</literal></expr></argument>, <argument pos:start="1316:76" pos:end="1316:86"><expr pos:start="1316:76" pos:end="1316:86"><name pos:start="1316:76" pos:end="1316:86">us898_test5</name></expr></argument>)</argument_list></call><operator pos:start="1316:88" pos:end="1316:88">)</operator> <operator pos:start="1316:90" pos:end="1316:91">||</operator> 
       <operator pos:start="1317:8" pos:end="1317:8">(</operator><name pos:start="1317:9" pos:end="1317:12">NULL</name> <operator pos:start="1317:14" pos:end="1317:15">==</operator> <call pos:start="1317:17" pos:end="1317:73"><name pos:start="1317:17" pos:end="1317:27">CU_add_test</name><argument_list pos:start="1317:28" pos:end="1317:73">(<argument pos:start="1317:29" pos:end="1317:34"><expr pos:start="1317:29" pos:end="1317:34"><name pos:start="1317:29" pos:end="1317:34">pSuite</name></expr></argument>, <argument pos:start="1317:37" pos:end="1317:59"><expr pos:start="1317:37" pos:end="1317:59"><literal type="string" pos:start="1317:37" pos:end="1317:59">"Re-enroll retry-after"</literal></expr></argument>, <argument pos:start="1317:62" pos:end="1317:72"><expr pos:start="1317:62" pos:end="1317:72"><name pos:start="1317:62" pos:end="1317:72">us898_test6</name></expr></argument>)</argument_list></call><operator pos:start="1317:74" pos:end="1317:74">)</operator> <operator pos:start="1317:76" pos:end="1317:77">||</operator> 
       <operator pos:start="1318:8" pos:end="1318:8">(</operator><name pos:start="1318:9" pos:end="1318:12">NULL</name> <operator pos:start="1318:14" pos:end="1318:15">==</operator> <call pos:start="1318:17" pos:end="1318:83"><name pos:start="1318:17" pos:end="1318:27">CU_add_test</name><argument_list pos:start="1318:28" pos:end="1318:83">(<argument pos:start="1318:29" pos:end="1318:34"><expr pos:start="1318:29" pos:end="1318:34"><name pos:start="1318:29" pos:end="1318:34">pSuite</name></expr></argument>, <argument pos:start="1318:37" pos:end="1318:69"><expr pos:start="1318:37" pos:end="1318:69"><literal type="string" pos:start="1318:37" pos:end="1318:69">"Re-enroll invalid UID/PWD Basic"</literal></expr></argument>, <argument pos:start="1318:72" pos:end="1318:82"><expr pos:start="1318:72" pos:end="1318:82"><name pos:start="1318:72" pos:end="1318:82">us898_test7</name></expr></argument>)</argument_list></call><operator pos:start="1318:84" pos:end="1318:84">)</operator> <operator pos:start="1318:86" pos:end="1318:87">||</operator> 
       <operator pos:start="1319:8" pos:end="1319:8">(</operator><name pos:start="1319:9" pos:end="1319:12">NULL</name> <operator pos:start="1319:14" pos:end="1319:15">==</operator> <call pos:start="1319:17" pos:end="1319:82"><name pos:start="1319:17" pos:end="1319:27">CU_add_test</name><argument_list pos:start="1319:28" pos:end="1319:82">(<argument pos:start="1319:29" pos:end="1319:34"><expr pos:start="1319:29" pos:end="1319:34"><name pos:start="1319:29" pos:end="1319:34">pSuite</name></expr></argument>, <argument pos:start="1319:37" pos:end="1319:68"><expr pos:start="1319:37" pos:end="1319:68"><literal type="string" pos:start="1319:37" pos:end="1319:68">"Re-enroll valid UID/PWD Digest"</literal></expr></argument>, <argument pos:start="1319:71" pos:end="1319:81"><expr pos:start="1319:71" pos:end="1319:81"><name pos:start="1319:71" pos:end="1319:81">us898_test8</name></expr></argument>)</argument_list></call><operator pos:start="1319:83" pos:end="1319:83">)</operator> <operator pos:start="1319:85" pos:end="1319:86">||</operator> 
       <operator pos:start="1320:8" pos:end="1320:8">(</operator><name pos:start="1320:9" pos:end="1320:12">NULL</name> <operator pos:start="1320:14" pos:end="1320:15">==</operator> <call pos:start="1320:17" pos:end="1320:84"><name pos:start="1320:17" pos:end="1320:27">CU_add_test</name><argument_list pos:start="1320:28" pos:end="1320:84">(<argument pos:start="1320:29" pos:end="1320:34"><expr pos:start="1320:29" pos:end="1320:34"><name pos:start="1320:29" pos:end="1320:34">pSuite</name></expr></argument>, <argument pos:start="1320:37" pos:end="1320:70"><expr pos:start="1320:37" pos:end="1320:70"><literal type="string" pos:start="1320:37" pos:end="1320:70">"Re-enroll invalid UID/PWD Digest"</literal></expr></argument>, <argument pos:start="1320:73" pos:end="1320:83"><expr pos:start="1320:73" pos:end="1320:83"><name pos:start="1320:73" pos:end="1320:83">us898_test9</name></expr></argument>)</argument_list></call><operator pos:start="1320:85" pos:end="1320:85">)</operator> <operator pos:start="1320:87" pos:end="1320:88">||</operator> 
       <operator pos:start="1321:8" pos:end="1321:8">(</operator><name pos:start="1321:9" pos:end="1321:12">NULL</name> <operator pos:start="1321:14" pos:end="1321:15">==</operator> <call pos:start="1321:17" pos:end="1321:93"><name pos:start="1321:17" pos:end="1321:27">CU_add_test</name><argument_list pos:start="1321:28" pos:end="1321:93">(<argument pos:start="1321:29" pos:end="1321:34"><expr pos:start="1321:29" pos:end="1321:34"><name pos:start="1321:29" pos:end="1321:34">pSuite</name></expr></argument>, <argument pos:start="1321:37" pos:end="1321:78"><expr pos:start="1321:37" pos:end="1321:78"><literal type="string" pos:start="1321:37" pos:end="1321:78">"Re-enroll valid certificate no HTTP auth"</literal></expr></argument>, <argument pos:start="1321:81" pos:end="1321:92"><expr pos:start="1321:81" pos:end="1321:92"><name pos:start="1321:81" pos:end="1321:92">us898_test10</name></expr></argument>)</argument_list></call><operator pos:start="1321:94" pos:end="1321:94">)</operator> <operator pos:start="1321:96" pos:end="1321:97">||</operator> 
       <operator pos:start="1322:8" pos:end="1322:8">(</operator><name pos:start="1322:9" pos:end="1322:12">NULL</name> <operator pos:start="1322:14" pos:end="1322:15">==</operator> <call pos:start="1322:17" pos:end="1322:97"><name pos:start="1322:17" pos:end="1322:27">CU_add_test</name><argument_list pos:start="1322:28" pos:end="1322:97">(<argument pos:start="1322:29" pos:end="1322:34"><expr pos:start="1322:29" pos:end="1322:34"><name pos:start="1322:29" pos:end="1322:34">pSuite</name></expr></argument>, <argument pos:start="1322:37" pos:end="1322:82"><expr pos:start="1322:37" pos:end="1322:82"><literal type="string" pos:start="1322:37" pos:end="1322:82">"Re-enroll expired certificate with HTTP auth"</literal></expr></argument>, <argument pos:start="1322:85" pos:end="1322:96"><expr pos:start="1322:85" pos:end="1322:96"><name pos:start="1322:85" pos:end="1322:96">us898_test11</name></expr></argument>)</argument_list></call><operator pos:start="1322:98" pos:end="1322:98">)</operator></expr>)</condition> 
   <block pos:start="1323:4" pos:end="1326:4">{<block_content pos:start="1324:7" pos:end="1325:28">
      <expr_stmt pos:start="1324:7" pos:end="1324:28"><expr pos:start="1324:7" pos:end="1324:27"><call pos:start="1324:7" pos:end="1324:27"><name pos:start="1324:7" pos:end="1324:25">CU_cleanup_registry</name><argument_list pos:start="1324:26" pos:end="1324:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1325:7" pos:end="1325:28">return <expr pos:start="1325:14" pos:end="1325:27"><call pos:start="1325:14" pos:end="1325:27"><name pos:start="1325:14" pos:end="1325:25">CU_get_error</name><argument_list pos:start="1325:26" pos:end="1325:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <return pos:start="1328:4" pos:end="1330:0">return <expr pos:start="1328:11" pos:end="1328:21"><name pos:start="1328:11" pos:end="1328:21">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1329:1" pos:end="1329:6">#<cpp:directive pos:start="1329:2" pos:end="1329:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


</unit>
