<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us1159.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us1159.c - Unit Tests for User Story 1159 - CSR Attributes enforce
 *
 * October, 2014
 *
 * Copyright (c) 2014, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:23">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:24">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:27">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:27">&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>

<cpp:ifdef pos:start="20:1" pos:end="20:17">#<cpp:directive pos:start="20:2" pos:end="20:6">ifdef</cpp:directive> <name pos:start="20:8" pos:end="20:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="21:1" pos:end="21:24">#<cpp:directive pos:start="21:2" pos:end="21:8">include</cpp:directive> <cpp:file pos:start="21:10" pos:end="21:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="22:1" pos:end="22:28">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="25:1" pos:end="25:13">#<cpp:directive pos:start="25:2" pos:end="25:7">ifndef</cpp:directive> <name pos:start="25:9" pos:end="25:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="26:1" pos:end="26:53">#<cpp:directive pos:start="26:2" pos:end="26:7">define</cpp:directive> <cpp:macro pos:start="26:9" pos:end="26:22"><name pos:start="26:9" pos:end="26:22">US1159_CACERTS</name></cpp:macro>          <cpp:value pos:start="26:33" pos:end="26:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="27:1" pos:end="27:53">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:21">US1159_CACERT</name></cpp:macro>           <cpp:value pos:start="27:33" pos:end="27:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="28:1" pos:end="28:74">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:26"><name pos:start="28:9" pos:end="28:26">US1159_SERVER_CERT</name></cpp:macro>      <cpp:value pos:start="28:33" pos:end="28:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="29:1" pos:end="29:74">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:25">US1159_SERVER_KEY</name></cpp:macro>       <cpp:value pos:start="29:33" pos:end="29:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="30:1" pos:end="30:5">#<cpp:directive pos:start="30:2" pos:end="30:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="31:1" pos:end="31:55">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:22">US1159_CACERTS</name></cpp:macro>          <cpp:value pos:start="31:33" pos:end="31:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="32:1" pos:end="32:55">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:21"><name pos:start="32:9" pos:end="32:21">US1159_CACERT</name></cpp:macro>           <cpp:value pos:start="32:33" pos:end="32:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="33:1" pos:end="33:77">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:26">US1159_SERVER_CERT</name></cpp:macro>      <cpp:value pos:start="33:33" pos:end="33:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="34:1" pos:end="34:77">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:25"><name pos:start="34:9" pos:end="34:25">US1159_SERVER_KEY</name></cpp:macro>       <cpp:value pos:start="34:33" pos:end="34:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>
<cpp:define pos:start="36:1" pos:end="36:41">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:18"><name pos:start="36:9" pos:end="36:18">US1159_UID</name></cpp:macro>              <cpp:value pos:start="36:33" pos:end="36:41">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="37:1" pos:end="37:40">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:18">US1159_PWD</name></cpp:macro>              <cpp:value pos:start="37:33" pos:end="37:40">"estpwd"</cpp:value></cpp:define>

<cpp:define pos:start="39:1" pos:end="39:37">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:26">US1159_SERVER_PORT</name></cpp:macro>      <cpp:value pos:start="39:33" pos:end="39:37">15897</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:43">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:24"><name pos:start="40:9" pos:end="40:24">US1159_SERVER_IP</name></cpp:macro>        <cpp:value pos:start="40:33" pos:end="40:43">"127.0.0.1"</cpp:value></cpp:define>

<cpp:define pos:start="42:1" pos:end="42:56">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:28"><name pos:start="42:9" pos:end="42:28">US1159_ATTR_POP_ONLY</name></cpp:macro>    <cpp:value pos:start="42:33" pos:end="42:56">"MAsGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:48">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:27">US1159_ATTR_CN_ONLY</name></cpp:macro>     <cpp:value pos:start="43:33" pos:end="43:48">"MAUGA1UEAw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:192">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:24"><name pos:start="44:9" pos:end="44:24">US1159_ATTR_TEST</name></cpp:macro>        <cpp:value pos:start="44:33" pos:end="44:192">"MHEGBysGAQEBARYwIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBgUrgQQAIgYDVQQDBggqhkjOPQQDAg==\0"</cpp:value></cpp:define>

<decl_stmt pos:start="46:1" pos:end="46:21"><decl pos:start="46:1" pos:end="46:20"><type pos:start="46:1" pos:end="46:16"><specifier pos:start="46:1" pos:end="46:6">extern</specifier> <name pos:start="46:8" pos:end="46:14">EST_CTX</name> <modifier pos:start="46:16" pos:end="46:16">*</modifier></type><name pos:start="46:17" pos:end="46:20">ectx</name></decl>;</decl_stmt>
<decl_stmt pos:start="47:1" pos:end="47:37"><decl pos:start="47:1" pos:end="47:36"><type pos:start="47:1" pos:end="47:22"><specifier pos:start="47:1" pos:end="47:6">static</specifier> <name pos:start="47:8" pos:end="47:15">unsigned</name> <name pos:start="47:17" pos:end="47:20">char</name> <modifier pos:start="47:22" pos:end="47:22">*</modifier></type><name pos:start="47:23" pos:end="47:29">cacerts</name> <init pos:start="47:31" pos:end="47:36">= <expr pos:start="47:33" pos:end="47:36"><name pos:start="47:33" pos:end="47:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="48:1" pos:end="48:27"><decl pos:start="48:1" pos:end="48:26"><type pos:start="48:1" pos:end="48:10"><specifier pos:start="48:1" pos:end="48:6">static</specifier> <name pos:start="48:8" pos:end="48:10">int</name></type> <name pos:start="48:12" pos:end="48:22">cacerts_len</name> <init pos:start="48:24" pos:end="48:26">= <expr pos:start="48:26" pos:end="48:26"><literal type="number" pos:start="48:26" pos:end="48:26">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="49:1" pos:end="49:19"><decl pos:start="49:1" pos:end="49:18"><type pos:start="49:1" pos:end="49:13"><specifier pos:start="49:1" pos:end="49:6">static</specifier> <name pos:start="49:8" pos:end="49:11">char</name> <modifier pos:start="49:13" pos:end="49:13">*</modifier></type><name pos:start="49:14" pos:end="49:18">attrs</name></decl>;</decl_stmt>

<function pos:start="51:1" pos:end="61:1"><type pos:start="51:1" pos:end="51:22"><specifier pos:start="51:1" pos:end="51:6">static</specifier> <name pos:start="51:8" pos:end="51:15">unsigned</name> <name pos:start="51:17" pos:end="51:20">char</name> <modifier pos:start="51:22" pos:end="51:22">*</modifier></type> <name pos:start="51:24" pos:end="51:46">handle_csrattrs_request</name> <parameter_list pos:start="51:48" pos:end="52:63">(<parameter pos:start="51:49" pos:end="51:60"><decl pos:start="51:49" pos:end="51:60"><type pos:start="51:49" pos:end="51:60"><name pos:start="51:49" pos:end="51:51">int</name> <modifier pos:start="51:53" pos:end="51:53">*</modifier></type><name pos:start="51:54" pos:end="51:60">csr_len</name></decl></parameter>, <parameter pos:start="51:63" pos:end="51:76"><decl pos:start="51:63" pos:end="51:76"><type pos:start="51:63" pos:end="51:76"><name pos:start="51:63" pos:end="51:66">char</name> <modifier pos:start="51:68" pos:end="51:68">*</modifier></type><name pos:start="51:69" pos:end="51:76">path_seg</name></decl></parameter>,
                                                <parameter pos:start="52:49" pos:end="52:62"><decl pos:start="52:49" pos:end="52:62"><type pos:start="52:49" pos:end="52:62"><name pos:start="52:49" pos:end="52:52">void</name> <modifier pos:start="52:54" pos:end="52:54">*</modifier></type><name pos:start="52:55" pos:end="52:62">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="53:1" pos:end="61:1">{<block_content pos:start="54:5" pos:end="60:22">
    <decl_stmt pos:start="54:5" pos:end="54:28"><decl pos:start="54:5" pos:end="54:27"><type pos:start="54:5" pos:end="54:19"><name pos:start="54:5" pos:end="54:12">unsigned</name> <name pos:start="54:14" pos:end="54:17">char</name> <modifier pos:start="54:19" pos:end="54:19">*</modifier></type><name pos:start="54:20" pos:end="54:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="56:5" pos:end="56:29"><expr pos:start="56:5" pos:end="56:28"><operator pos:start="56:5" pos:end="56:5">*</operator><name pos:start="56:6" pos:end="56:12">csr_len</name> <operator pos:start="56:14" pos:end="56:14">=</operator> <call pos:start="56:16" pos:end="56:28"><name pos:start="56:16" pos:end="56:21">strlen</name><argument_list pos:start="56:22" pos:end="56:28">(<argument pos:start="56:23" pos:end="56:27"><expr pos:start="56:23" pos:end="56:27"><name pos:start="56:23" pos:end="56:27">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:36"><expr pos:start="57:5" pos:end="57:35"><name pos:start="57:5" pos:end="57:12">csr_data</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:35"><name pos:start="57:16" pos:end="57:21">malloc</name><argument_list pos:start="57:22" pos:end="57:35">(<argument pos:start="57:23" pos:end="57:34"><expr pos:start="57:23" pos:end="57:34"><operator pos:start="57:23" pos:end="57:23">*</operator><name pos:start="57:24" pos:end="57:30">csr_len</name> <operator pos:start="57:32" pos:end="57:32">+</operator> <literal type="number" pos:start="57:34" pos:end="57:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:48"><expr pos:start="58:5" pos:end="58:47"><call pos:start="58:5" pos:end="58:47"><name pos:start="58:5" pos:end="58:11">strncpy</name><argument_list pos:start="58:12" pos:end="58:47">(<argument pos:start="58:13" pos:end="58:29"><expr pos:start="58:13" pos:end="58:29"><operator pos:start="58:13" pos:end="58:13">(</operator><name pos:start="58:14" pos:end="58:17">char</name> <operator pos:start="58:19" pos:end="58:19">*</operator><operator pos:start="58:20" pos:end="58:20">)</operator> <name pos:start="58:22" pos:end="58:29">csr_data</name></expr></argument>, <argument pos:start="58:32" pos:end="58:36"><expr pos:start="58:32" pos:end="58:36"><name pos:start="58:32" pos:end="58:36">attrs</name></expr></argument>, <argument pos:start="58:39" pos:end="58:46"><expr pos:start="58:39" pos:end="58:46"><operator pos:start="58:39" pos:end="58:39">*</operator><name pos:start="58:40" pos:end="58:46">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:12">csr_data</name><index pos:start="59:13" pos:end="59:22">[<expr pos:start="59:14" pos:end="59:21"><operator pos:start="59:14" pos:end="59:14">*</operator><name pos:start="59:15" pos:end="59:21">csr_len</name></expr>]</index></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <literal type="number" pos:start="59:26" pos:end="59:26">0</literal></expr>;</expr_stmt>
    <return pos:start="60:5" pos:end="60:22">return <expr pos:start="60:12" pos:end="60:21"><operator pos:start="60:12" pos:end="60:12">(</operator><name pos:start="60:13" pos:end="60:20">csr_data</name><operator pos:start="60:21" pos:end="60:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="63:1" pos:end="65:1"><type pos:start="63:1" pos:end="63:11"><specifier pos:start="63:1" pos:end="63:6">static</specifier> <name pos:start="63:8" pos:end="63:11">void</name></type> <name pos:start="63:13" pos:end="63:24">us1159_clean</name> <parameter_list pos:start="63:26" pos:end="63:31">(<parameter pos:start="63:27" pos:end="63:30"><decl pos:start="63:27" pos:end="63:30"><type pos:start="63:27" pos:end="63:30"><name pos:start="63:27" pos:end="63:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="64:1" pos:end="65:1">{<block_content>
</block_content>}</block></function>

<function pos:start="67:1" pos:end="100:1"><type pos:start="67:1" pos:end="67:3"><name pos:start="67:1" pos:end="67:3">int</name></type> <name pos:start="67:5" pos:end="67:23">us1159_start_server</name> <parameter_list pos:start="67:25" pos:end="67:26">()</parameter_list>
<block pos:start="68:1" pos:end="100:1">{<block_content pos:start="69:5" pos:end="99:14">
    <decl_stmt pos:start="69:5" pos:end="69:15"><decl pos:start="69:5" pos:end="69:14"><type pos:start="69:5" pos:end="69:7"><name pos:start="69:5" pos:end="69:7">int</name></type> <name pos:start="69:9" pos:end="69:10">rv</name> <init pos:start="69:12" pos:end="69:14">= <expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="71:5" pos:end="73:7">/*
     * Start an EST server acting as the CA
     */</comment>
    <expr_stmt pos:start="74:5" pos:end="83:21"><expr pos:start="74:5" pos:end="83:20"><name pos:start="74:5" pos:end="74:6">rv</name> <operator pos:start="74:8" pos:end="74:8">=</operator> <call pos:start="74:10" pos:end="83:20"><name pos:start="74:10" pos:end="74:17">st_start</name><argument_list pos:start="74:18" pos:end="83:20">(<argument pos:start="74:19" pos:end="74:36"><expr pos:start="74:19" pos:end="74:36"><name pos:start="74:19" pos:end="74:36">US1159_SERVER_PORT</name></expr></argument>,
                  <argument pos:start="75:19" pos:end="75:36"><expr pos:start="75:19" pos:end="75:36"><name pos:start="75:19" pos:end="75:36">US1159_SERVER_CERT</name></expr></argument>,
                  <argument pos:start="76:19" pos:end="76:35"><expr pos:start="76:19" pos:end="76:35"><name pos:start="76:19" pos:end="76:35">US1159_SERVER_KEY</name></expr></argument>,
                  <argument pos:start="77:19" pos:end="77:28"><expr pos:start="77:19" pos:end="77:28"><literal type="string" pos:start="77:19" pos:end="77:28">"estrealm"</literal></expr></argument>,
                  <argument pos:start="78:19" pos:end="78:31"><expr pos:start="78:19" pos:end="78:31"><name pos:start="78:19" pos:end="78:31">US1159_CACERT</name></expr></argument>,
                  <argument pos:start="79:19" pos:end="79:39"><expr pos:start="79:19" pos:end="79:39"><literal type="string" pos:start="79:19" pos:end="79:39">"CA/trustedcerts.crt"</literal></expr></argument>,
                  <argument pos:start="80:19" pos:end="80:39"><expr pos:start="80:19" pos:end="80:39"><literal type="string" pos:start="80:19" pos:end="80:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="81:19" pos:end="81:19"><expr pos:start="81:19" pos:end="81:19"><literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr></argument>, <comment type="line" pos:start="81:22" pos:end="81:37">// manual enroll</comment>
                  <argument pos:start="82:19" pos:end="82:19"><expr pos:start="82:19" pos:end="82:19"><literal type="number" pos:start="82:19" pos:end="82:19">0</literal></expr></argument>,  <comment type="line" pos:start="82:23" pos:end="82:36">// disable PoP</comment>
                  <argument pos:start="83:19" pos:end="83:19"><expr pos:start="83:19" pos:end="83:19"><literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="83:23" pos:end="83:39">// ecdhe nid info</comment>
    <if_stmt pos:start="84:5" pos:end="87:5"><if pos:start="84:5" pos:end="87:5">if <condition pos:start="84:8" pos:end="84:27">(<expr pos:start="84:9" pos:end="84:26"><name pos:start="84:9" pos:end="84:10">rv</name> <operator pos:start="84:12" pos:end="84:13">!=</operator> <name pos:start="84:15" pos:end="84:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="84:29" pos:end="87:5">{<block_content pos:start="85:9" pos:end="86:18">
        <expr_stmt pos:start="85:9" pos:end="85:61"><expr pos:start="85:9" pos:end="85:60"><call pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:14">printf</name><argument_list pos:start="85:15" pos:end="85:60">(<argument pos:start="85:16" pos:end="85:59"><expr pos:start="85:16" pos:end="85:59"><literal type="string" pos:start="85:16" pos:end="85:59">"\nUnable to start EST server for US1159.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="86:9" pos:end="86:18">return <expr pos:start="86:16" pos:end="86:17"><name pos:start="86:16" pos:end="86:17">rv</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:32"><expr pos:start="89:5" pos:end="89:31"><call pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:29">st_enable_csrattr_enforce</name><argument_list pos:start="89:30" pos:end="89:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:56"><expr pos:start="91:5" pos:end="91:55"><name pos:start="91:5" pos:end="91:6">rv</name> <operator pos:start="91:8" pos:end="91:8">=</operator> <call pos:start="91:10" pos:end="91:55"><name pos:start="91:10" pos:end="91:23">est_set_csr_cb</name><argument_list pos:start="91:24" pos:end="91:55">(<argument pos:start="91:25" pos:end="91:28"><expr pos:start="91:25" pos:end="91:28"><name pos:start="91:25" pos:end="91:28">ectx</name></expr></argument>, <argument pos:start="91:31" pos:end="91:54"><expr pos:start="91:31" pos:end="91:54"><operator pos:start="91:31" pos:end="91:31">&amp;</operator><name pos:start="91:32" pos:end="91:54">handle_csrattrs_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="92:5" pos:end="95:5"><if pos:start="92:5" pos:end="95:5">if <condition pos:start="92:8" pos:end="92:27">(<expr pos:start="92:9" pos:end="92:26"><name pos:start="92:9" pos:end="92:10">rv</name> <operator pos:start="92:12" pos:end="92:13">!=</operator> <name pos:start="92:15" pos:end="92:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="92:29" pos:end="95:5">{<block_content pos:start="93:9" pos:end="94:20">
        <expr_stmt pos:start="93:9" pos:end="93:76"><expr pos:start="93:9" pos:end="93:75"><call pos:start="93:9" pos:end="93:75"><name pos:start="93:9" pos:end="93:14">printf</name><argument_list pos:start="93:15" pos:end="93:75">(<argument pos:start="93:16" pos:end="93:74"><expr pos:start="93:16" pos:end="93:74"><literal type="string" pos:start="93:16" pos:end="93:74">"\nUnable to set EST CSR Attributes callback for US1159.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="94:9" pos:end="94:20">return <expr pos:start="94:16" pos:end="94:19"><operator pos:start="94:16" pos:end="94:16">(</operator><name pos:start="94:17" pos:end="94:18">rv</name><operator pos:start="94:19" pos:end="94:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:13"><expr pos:start="97:5" pos:end="97:12"><call pos:start="97:5" pos:end="97:12"><name pos:start="97:5" pos:end="97:9">SLEEP</name><argument_list pos:start="97:10" pos:end="97:12">(<argument pos:start="97:11" pos:end="97:11"><expr pos:start="97:11" pos:end="97:11"><literal type="number" pos:start="97:11" pos:end="97:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:14">return <expr pos:start="99:12" pos:end="99:13"><name pos:start="99:12" pos:end="99:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="102:1" pos:end="106:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="107:1" pos:end="134:1"><type pos:start="107:1" pos:end="107:10"><specifier pos:start="107:1" pos:end="107:6">static</specifier> <name pos:start="107:8" pos:end="107:10">int</name></type> <name pos:start="107:12" pos:end="107:28">us1159_init_suite</name> <parameter_list pos:start="107:30" pos:end="107:35">(<parameter pos:start="107:31" pos:end="107:34"><decl pos:start="107:31" pos:end="107:34"><type pos:start="107:31" pos:end="107:34"><name pos:start="107:31" pos:end="107:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="108:1" pos:end="134:1">{<block_content pos:start="109:5" pos:end="133:14">
    <decl_stmt pos:start="109:5" pos:end="109:11"><decl pos:start="109:5" pos:end="109:10"><type pos:start="109:5" pos:end="109:7"><name pos:start="109:5" pos:end="109:7">int</name></type> <name pos:start="109:9" pos:end="109:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:19"><expr pos:start="111:5" pos:end="111:18"><call pos:start="111:5" pos:end="111:18"><name pos:start="111:5" pos:end="111:16">us1159_clean</name><argument_list pos:start="111:17" pos:end="111:18">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="114:83"><expr pos:start="113:5" pos:end="114:82"><call pos:start="113:5" pos:end="114:82"><name pos:start="113:5" pos:end="113:10">printf</name><argument_list pos:start="113:11" pos:end="114:82">(
        <argument pos:start="114:9" pos:end="114:81"><expr pos:start="114:9" pos:end="114:81"><literal type="string" pos:start="114:9" pos:end="114:81">"\nStarting server for CSR attributes enforcement unit tests (US1159).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="116:5" pos:end="116:33"><expr pos:start="116:5" pos:end="116:32"><name pos:start="116:5" pos:end="116:9">attrs</name> <operator pos:start="116:11" pos:end="116:11">=</operator> <name pos:start="116:13" pos:end="116:32">US1159_ATTR_POP_ONLY</name></expr>;</expr_stmt>
    <expr_stmt pos:start="117:5" pos:end="117:44"><expr pos:start="117:5" pos:end="117:43"><call pos:start="117:5" pos:end="117:43"><name pos:start="117:5" pos:end="117:19">est_init_logger</name><argument_list pos:start="117:20" pos:end="117:43">(<argument pos:start="117:21" pos:end="117:36"><expr pos:start="117:21" pos:end="117:36"><name pos:start="117:21" pos:end="117:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><name pos:start="117:39" pos:end="117:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="119:5" pos:end="121:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="122:5" pos:end="122:61"><expr pos:start="122:5" pos:end="122:60"><name pos:start="122:5" pos:end="122:15">cacerts_len</name> <operator pos:start="122:17" pos:end="122:17">=</operator> <call pos:start="122:19" pos:end="122:60"><name pos:start="122:19" pos:end="122:34">read_binary_file</name><argument_list pos:start="122:35" pos:end="122:60">(<argument pos:start="122:36" pos:end="122:49"><expr pos:start="122:36" pos:end="122:49"><name pos:start="122:36" pos:end="122:49">US1159_CACERTS</name></expr></argument>, <argument pos:start="122:52" pos:end="122:59"><expr pos:start="122:52" pos:end="122:59"><operator pos:start="122:52" pos:end="122:52">&amp;</operator><name pos:start="122:53" pos:end="122:59">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="123:5" pos:end="125:5"><if pos:start="123:5" pos:end="125:5">if <condition pos:start="123:8" pos:end="123:25">(<expr pos:start="123:9" pos:end="123:24"><name pos:start="123:9" pos:end="123:19">cacerts_len</name> <operator pos:start="123:21" pos:end="123:22">&lt;=</operator> <literal type="number" pos:start="123:24" pos:end="123:24">0</literal></expr>)</condition> <block pos:start="123:27" pos:end="125:5">{<block_content pos:start="124:9" pos:end="124:17">
        <return pos:start="124:9" pos:end="124:17">return <expr pos:start="124:16" pos:end="124:16"><literal type="number" pos:start="124:16" pos:end="124:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="127:5" pos:end="130:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="131:5" pos:end="131:31"><expr pos:start="131:5" pos:end="131:30"><name pos:start="131:5" pos:end="131:6">rv</name> <operator pos:start="131:8" pos:end="131:8">=</operator> <call pos:start="131:10" pos:end="131:30"><name pos:start="131:10" pos:end="131:28">us1159_start_server</name><argument_list pos:start="131:29" pos:end="131:30">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="133:5" pos:end="133:14">return <expr pos:start="133:12" pos:end="133:13"><name pos:start="133:12" pos:end="133:13">rv</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="136:1" pos:end="140:1"><type pos:start="136:1" pos:end="136:4"><name pos:start="136:1" pos:end="136:4">void</name></type> <name pos:start="136:6" pos:end="136:23">us1159_stop_server</name> <parameter_list pos:start="136:25" pos:end="136:26">()</parameter_list>
<block pos:start="137:1" pos:end="140:1">{<block_content pos:start="138:5" pos:end="139:13">
    <expr_stmt pos:start="138:5" pos:end="138:14"><expr pos:start="138:5" pos:end="138:13"><call pos:start="138:5" pos:end="138:13"><name pos:start="138:5" pos:end="138:11">st_stop</name><argument_list pos:start="138:12" pos:end="138:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="139:5" pos:end="139:13"><expr pos:start="139:5" pos:end="139:12"><call pos:start="139:5" pos:end="139:12"><name pos:start="139:5" pos:end="139:9">SLEEP</name><argument_list pos:start="139:10" pos:end="139:12">(<argument pos:start="139:11" pos:end="139:11"><expr pos:start="139:11" pos:end="139:11"><literal type="number" pos:start="139:11" pos:end="139:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="142:1" pos:end="146:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="147:1" pos:end="153:1"><type pos:start="147:1" pos:end="147:10"><specifier pos:start="147:1" pos:end="147:6">static</specifier> <name pos:start="147:8" pos:end="147:10">int</name></type> <name pos:start="147:12" pos:end="147:31">us1159_destroy_suite</name> <parameter_list pos:start="147:33" pos:end="147:38">(<parameter pos:start="147:34" pos:end="147:37"><decl pos:start="147:34" pos:end="147:37"><type pos:start="147:34" pos:end="147:37"><name pos:start="147:34" pos:end="147:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="148:1" pos:end="153:1">{<block_content pos:start="149:5" pos:end="152:13">
    <expr_stmt pos:start="149:5" pos:end="149:25"><expr pos:start="149:5" pos:end="149:24"><call pos:start="149:5" pos:end="149:24"><name pos:start="149:5" pos:end="149:22">us1159_stop_server</name><argument_list pos:start="149:23" pos:end="149:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="150:5" pos:end="150:18"><expr pos:start="150:5" pos:end="150:17"><call pos:start="150:5" pos:end="150:17"><name pos:start="150:5" pos:end="150:8">free</name><argument_list pos:start="150:9" pos:end="150:17">(<argument pos:start="150:10" pos:end="150:16"><expr pos:start="150:10" pos:end="150:16"><name pos:start="150:10" pos:end="150:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="151:5" pos:end="151:65"><expr pos:start="151:5" pos:end="151:64"><call pos:start="151:5" pos:end="151:64"><name pos:start="151:5" pos:end="151:10">printf</name><argument_list pos:start="151:11" pos:end="151:64">(<argument pos:start="151:12" pos:end="151:63"><expr pos:start="151:12" pos:end="151:63"><literal type="string" pos:start="151:12" pos:end="151:63">"Completed CSR attributes enforcement unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="152:5" pos:end="152:13">return <expr pos:start="152:12" pos:end="152:12"><literal type="number" pos:start="152:12" pos:end="152:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="155:1" pos:end="181:1"><type pos:start="155:1" pos:end="155:17"><specifier pos:start="155:1" pos:end="155:6">static</specifier> <name pos:start="155:8" pos:end="155:15">EVP_PKEY</name> <modifier pos:start="155:17" pos:end="155:17">*</modifier></type> <name pos:start="155:19" pos:end="155:38">generate_private_key</name> <parameter_list pos:start="155:40" pos:end="155:45">(<parameter pos:start="155:41" pos:end="155:44"><decl pos:start="155:41" pos:end="155:44"><type pos:start="155:41" pos:end="155:44"><name pos:start="155:41" pos:end="155:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="156:1" pos:end="181:1">{<block_content pos:start="157:5" pos:end="180:18">
    <decl_stmt pos:start="157:5" pos:end="157:25"><decl pos:start="157:5" pos:end="157:24"><type pos:start="157:5" pos:end="157:9"><name pos:start="157:5" pos:end="157:7">RSA</name> <modifier pos:start="157:9" pos:end="157:9">*</modifier></type><name pos:start="157:10" pos:end="157:12">rsa</name> <init pos:start="157:14" pos:end="157:24">= <expr pos:start="157:16" pos:end="157:24"><call pos:start="157:16" pos:end="157:24"><name pos:start="157:16" pos:end="157:22">RSA_new</name><argument_list pos:start="157:23" pos:end="157:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="158:5" pos:end="158:26"><decl pos:start="158:5" pos:end="158:25"><type pos:start="158:5" pos:end="158:12"><name pos:start="158:5" pos:end="158:10">BIGNUM</name> <modifier pos:start="158:12" pos:end="158:12">*</modifier></type><name pos:start="158:13" pos:end="158:14">bn</name> <init pos:start="158:16" pos:end="158:25">= <expr pos:start="158:18" pos:end="158:25"><call pos:start="158:18" pos:end="158:25"><name pos:start="158:18" pos:end="158:23">BN_new</name><argument_list pos:start="158:24" pos:end="158:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="159:5" pos:end="159:19"><decl pos:start="159:5" pos:end="159:18"><type pos:start="159:5" pos:end="159:14"><name pos:start="159:5" pos:end="159:12">EVP_PKEY</name> <modifier pos:start="159:14" pos:end="159:14">*</modifier></type><name pos:start="159:15" pos:end="159:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="161:5" pos:end="163:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="164:5" pos:end="164:29"><expr pos:start="164:5" pos:end="164:28"><call pos:start="164:5" pos:end="164:28"><name pos:start="164:5" pos:end="164:15">BN_set_word</name><argument_list pos:start="164:16" pos:end="164:28">(<argument pos:start="164:17" pos:end="164:18"><expr pos:start="164:17" pos:end="164:18"><name pos:start="164:17" pos:end="164:18">bn</name></expr></argument>, <argument pos:start="164:21" pos:end="164:27"><expr pos:start="164:21" pos:end="164:27"><literal type="number" pos:start="164:21" pos:end="164:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="165:5" pos:end="165:45"><expr pos:start="165:5" pos:end="165:44"><call pos:start="165:5" pos:end="165:44"><name pos:start="165:5" pos:end="165:23">RSA_generate_key_ex</name><argument_list pos:start="165:24" pos:end="165:44">(<argument pos:start="165:25" pos:end="165:27"><expr pos:start="165:25" pos:end="165:27"><name pos:start="165:25" pos:end="165:27">rsa</name></expr></argument>, <argument pos:start="165:30" pos:end="165:33"><expr pos:start="165:30" pos:end="165:33"><literal type="number" pos:start="165:30" pos:end="165:33">1024</literal></expr></argument>, <argument pos:start="165:36" pos:end="165:37"><expr pos:start="165:36" pos:end="165:37"><name pos:start="165:36" pos:end="165:37">bn</name></expr></argument>, <argument pos:start="165:40" pos:end="165:43"><expr pos:start="165:40" pos:end="165:43"><name pos:start="165:40" pos:end="165:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:26"><expr pos:start="167:5" pos:end="167:25"><name pos:start="167:5" pos:end="167:8">pkey</name> <operator pos:start="167:10" pos:end="167:10">=</operator> <call pos:start="167:12" pos:end="167:25"><name pos:start="167:12" pos:end="167:23">EVP_PKEY_new</name><argument_list pos:start="167:24" pos:end="167:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="168:5" pos:end="171:5"><if pos:start="168:5" pos:end="171:5">if <condition pos:start="168:8" pos:end="168:21">(<expr pos:start="168:9" pos:end="168:20"><name pos:start="168:9" pos:end="168:12">pkey</name> <operator pos:start="168:14" pos:end="168:15">==</operator> <name pos:start="168:17" pos:end="168:20">NULL</name></expr>)</condition> <block pos:start="168:23" pos:end="171:5">{<block_content pos:start="169:9" pos:end="170:20">
        <expr_stmt pos:start="169:9" pos:end="169:71"><expr pos:start="169:9" pos:end="169:70"><call pos:start="169:9" pos:end="169:70"><name pos:start="169:9" pos:end="169:14">printf</name><argument_list pos:start="169:15" pos:end="169:70">(<argument pos:start="169:16" pos:end="169:69"><expr pos:start="169:16" pos:end="169:69"><literal type="string" pos:start="169:16" pos:end="169:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="170:9" pos:end="170:20">return <expr pos:start="170:16" pos:end="170:19"><name pos:start="170:16" pos:end="170:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="172:5" pos:end="175:5"><if pos:start="172:5" pos:end="175:5">if <condition pos:start="172:8" pos:end="172:38">(<expr pos:start="172:9" pos:end="172:37"><operator pos:start="172:9" pos:end="172:9">!</operator><call pos:start="172:10" pos:end="172:37"><name pos:start="172:10" pos:end="172:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="172:27" pos:end="172:37">(<argument pos:start="172:28" pos:end="172:31"><expr pos:start="172:28" pos:end="172:31"><name pos:start="172:28" pos:end="172:31">pkey</name></expr></argument>, <argument pos:start="172:34" pos:end="172:36"><expr pos:start="172:34" pos:end="172:36"><name pos:start="172:34" pos:end="172:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="172:40" pos:end="175:5">{<block_content pos:start="173:9" pos:end="174:20">
        <expr_stmt pos:start="173:9" pos:end="173:69"><expr pos:start="173:9" pos:end="173:68"><call pos:start="173:9" pos:end="173:68"><name pos:start="173:9" pos:end="173:14">printf</name><argument_list pos:start="173:15" pos:end="173:68">(<argument pos:start="173:16" pos:end="173:67"><expr pos:start="173:16" pos:end="173:67"><literal type="string" pos:start="173:16" pos:end="173:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="174:9" pos:end="174:20">return <expr pos:start="174:16" pos:end="174:19"><name pos:start="174:16" pos:end="174:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:18"><expr pos:start="177:5" pos:end="177:17"><call pos:start="177:5" pos:end="177:17"><name pos:start="177:5" pos:end="177:12">RSA_free</name><argument_list pos:start="177:13" pos:end="177:17">(<argument pos:start="177:14" pos:end="177:16"><expr pos:start="177:14" pos:end="177:16"><name pos:start="177:14" pos:end="177:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="178:5" pos:end="178:16"><expr pos:start="178:5" pos:end="178:15"><call pos:start="178:5" pos:end="178:15"><name pos:start="178:5" pos:end="178:11">BN_free</name><argument_list pos:start="178:12" pos:end="178:15">(<argument pos:start="178:13" pos:end="178:14"><expr pos:start="178:13" pos:end="178:14"><name pos:start="178:13" pos:end="178:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="180:5" pos:end="180:18">return <expr pos:start="180:12" pos:end="180:17"><operator pos:start="180:12" pos:end="180:12">(</operator><name pos:start="180:13" pos:end="180:16">pkey</name><operator pos:start="180:17" pos:end="180:17">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="183:1" pos:end="187:3">/*
 * This function generates an EC public/private key
 * pair that will be used with the certificate
 * we provision.
 */</comment>
<function pos:start="188:1" pos:end="243:1"><type pos:start="188:1" pos:end="188:17"><specifier pos:start="188:1" pos:end="188:6">static</specifier> <name pos:start="188:8" pos:end="188:15">EVP_PKEY</name> <modifier pos:start="188:17" pos:end="188:17">*</modifier></type> <name pos:start="188:19" pos:end="188:41">generate_ec_private_key</name> <parameter_list pos:start="188:43" pos:end="188:51">(<parameter pos:start="188:44" pos:end="188:50"><decl pos:start="188:44" pos:end="188:50"><type pos:start="188:44" pos:end="188:46"><name pos:start="188:44" pos:end="188:46">int</name></type> <name pos:start="188:48" pos:end="188:50">nid</name></decl></parameter>)</parameter_list>
<block pos:start="189:1" pos:end="243:1">{<block_content pos:start="190:5" pos:end="242:26">
    <decl_stmt pos:start="190:5" pos:end="190:18"><decl pos:start="190:5" pos:end="190:17"><type pos:start="190:5" pos:end="190:12"><name pos:start="190:5" pos:end="190:10">EC_KEY</name> <modifier pos:start="190:12" pos:end="190:12">*</modifier></type><name pos:start="190:13" pos:end="190:17">eckey</name></decl>;</decl_stmt>
    <decl_stmt pos:start="191:5" pos:end="191:27"><decl pos:start="191:5" pos:end="191:26"><type pos:start="191:5" pos:end="191:14"><name pos:start="191:5" pos:end="191:12">EC_GROUP</name> <modifier pos:start="191:14" pos:end="191:14">*</modifier></type><name pos:start="191:15" pos:end="191:19">group</name> <init pos:start="191:21" pos:end="191:26">= <expr pos:start="191:23" pos:end="191:26"><name pos:start="191:23" pos:end="191:26">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="192:5" pos:end="192:13"><decl pos:start="192:5" pos:end="192:12"><type pos:start="192:5" pos:end="192:9"><name pos:start="192:5" pos:end="192:7">BIO</name> <modifier pos:start="192:9" pos:end="192:9">*</modifier></type><name pos:start="192:10" pos:end="192:12">out</name></decl>;</decl_stmt>
    <decl_stmt pos:start="193:5" pos:end="193:25"><decl pos:start="193:5" pos:end="193:24"><type pos:start="193:5" pos:end="193:19"><name pos:start="193:5" pos:end="193:12">unsigned</name> <name pos:start="193:14" pos:end="193:17">char</name> <modifier pos:start="193:19" pos:end="193:19">*</modifier></type><name pos:start="193:20" pos:end="193:24">tdata</name></decl>;</decl_stmt>
    <decl_stmt pos:start="194:5" pos:end="194:28"><decl pos:start="194:5" pos:end="194:27"><type pos:start="194:5" pos:end="194:19"><name pos:start="194:5" pos:end="194:12">unsigned</name> <name pos:start="194:14" pos:end="194:17">char</name> <modifier pos:start="194:19" pos:end="194:19">*</modifier></type><name pos:start="194:20" pos:end="194:27">key_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="195:5" pos:end="195:16"><decl pos:start="195:5" pos:end="195:15"><type pos:start="195:5" pos:end="195:7"><name pos:start="195:5" pos:end="195:7">int</name></type> <name pos:start="195:9" pos:end="195:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="196:5" pos:end="196:15"><decl pos:start="196:5" pos:end="196:14"><type pos:start="196:5" pos:end="196:9"><name pos:start="196:5" pos:end="196:7">BIO</name> <modifier pos:start="196:9" pos:end="196:9">*</modifier></type><name pos:start="196:10" pos:end="196:14">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="197:5" pos:end="197:27"><decl pos:start="197:5" pos:end="197:26"><type pos:start="197:5" pos:end="197:14"><name pos:start="197:5" pos:end="197:12">EVP_PKEY</name> <modifier pos:start="197:14" pos:end="197:14">*</modifier></type><name pos:start="197:15" pos:end="197:26">new_priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="198:5" pos:end="198:43"><decl pos:start="198:5" pos:end="198:42"><type pos:start="198:5" pos:end="198:7"><name pos:start="198:5" pos:end="198:7">int</name></type> <name pos:start="198:9" pos:end="198:17">asn1_flag</name> <init pos:start="198:19" pos:end="198:42">= <expr pos:start="198:21" pos:end="198:42"><name pos:start="198:21" pos:end="198:42">OPENSSL_EC_NAMED_CURVE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="199:5" pos:end="199:65"><decl pos:start="199:5" pos:end="199:64"><type pos:start="199:5" pos:end="199:27"><name pos:start="199:5" pos:end="199:27">point_conversion_form_t</name></type> <name pos:start="199:29" pos:end="199:32">form</name> <init pos:start="199:34" pos:end="199:64">= <expr pos:start="199:36" pos:end="199:64"><name pos:start="199:36" pos:end="199:64">POINT_CONVERSION_UNCOMPRESSED</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="201:5" pos:end="203:7">/*
     * Generate an EC key
     */</comment>
    <expr_stmt pos:start="204:5" pos:end="204:69"><expr pos:start="204:5" pos:end="204:68"><name pos:start="204:5" pos:end="204:9">group</name> <operator pos:start="204:11" pos:end="204:11">=</operator> <call pos:start="204:13" pos:end="204:68"><name pos:start="204:13" pos:end="204:38">EC_GROUP_new_by_curve_name</name><argument_list pos:start="204:39" pos:end="204:68">(<argument pos:start="204:40" pos:end="204:42"><expr pos:start="204:40" pos:end="204:42"><name pos:start="204:40" pos:end="204:42">nid</name></expr></argument> <comment type="block" pos:start="204:44" pos:end="204:67">/*NID_X9_62_prime256v1*/</comment>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="205:5" pos:end="205:45"><expr pos:start="205:5" pos:end="205:44"><call pos:start="205:5" pos:end="205:44"><name pos:start="205:5" pos:end="205:26">EC_GROUP_set_asn1_flag</name><argument_list pos:start="205:27" pos:end="205:44">(<argument pos:start="205:28" pos:end="205:32"><expr pos:start="205:28" pos:end="205:32"><name pos:start="205:28" pos:end="205:32">group</name></expr></argument>, <argument pos:start="205:35" pos:end="205:43"><expr pos:start="205:35" pos:end="205:43"><name pos:start="205:35" pos:end="205:43">asn1_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="206:5" pos:end="206:52"><expr pos:start="206:5" pos:end="206:51"><call pos:start="206:5" pos:end="206:51"><name pos:start="206:5" pos:end="206:38">EC_GROUP_set_point_conversion_form</name><argument_list pos:start="206:39" pos:end="206:51">(<argument pos:start="206:40" pos:end="206:44"><expr pos:start="206:40" pos:end="206:44"><name pos:start="206:40" pos:end="206:44">group</name></expr></argument>, <argument pos:start="206:47" pos:end="206:50"><expr pos:start="206:47" pos:end="206:50"><name pos:start="206:47" pos:end="206:50">form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="207:5" pos:end="207:25"><expr pos:start="207:5" pos:end="207:24"><name pos:start="207:5" pos:end="207:9">eckey</name> <operator pos:start="207:11" pos:end="207:11">=</operator> <call pos:start="207:13" pos:end="207:24"><name pos:start="207:13" pos:end="207:22">EC_KEY_new</name><argument_list pos:start="207:23" pos:end="207:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="208:5" pos:end="208:35"><expr pos:start="208:5" pos:end="208:34"><call pos:start="208:5" pos:end="208:34"><name pos:start="208:5" pos:end="208:20">EC_KEY_set_group</name><argument_list pos:start="208:21" pos:end="208:34">(<argument pos:start="208:22" pos:end="208:26"><expr pos:start="208:22" pos:end="208:26"><name pos:start="208:22" pos:end="208:26">eckey</name></expr></argument>, <argument pos:start="208:29" pos:end="208:33"><expr pos:start="208:29" pos:end="208:33"><name pos:start="208:29" pos:end="208:33">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="209:5" pos:end="212:5"><if pos:start="209:5" pos:end="212:5">if <condition pos:start="209:8" pos:end="209:36">(<expr pos:start="209:9" pos:end="209:35"><operator pos:start="209:9" pos:end="209:9">!</operator><call pos:start="209:10" pos:end="209:35"><name pos:start="209:10" pos:end="209:28">EC_KEY_generate_key</name><argument_list pos:start="209:29" pos:end="209:35">(<argument pos:start="209:30" pos:end="209:34"><expr pos:start="209:30" pos:end="209:34"><name pos:start="209:30" pos:end="209:34">eckey</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:38" pos:end="212:5">{<block_content pos:start="210:9" pos:end="211:20">
        <expr_stmt pos:start="210:9" pos:end="210:46"><expr pos:start="210:9" pos:end="210:45"><call pos:start="210:9" pos:end="210:45"><name pos:start="210:9" pos:end="210:14">printf</name><argument_list pos:start="210:15" pos:end="210:45">(<argument pos:start="210:16" pos:end="210:44"><expr pos:start="210:16" pos:end="210:44"><literal type="string" pos:start="210:16" pos:end="210:44">"Failed to generate EC key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="211:9" pos:end="211:20">return <expr pos:start="211:16" pos:end="211:19"><name pos:start="211:16" pos:end="211:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="213:5" pos:end="213:31"><expr pos:start="213:5" pos:end="213:30"><name pos:start="213:5" pos:end="213:7">out</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:30"><name pos:start="213:11" pos:end="213:17">BIO_new</name><argument_list pos:start="213:18" pos:end="213:30">(<argument pos:start="213:19" pos:end="213:29"><expr pos:start="213:19" pos:end="213:29"><call pos:start="213:19" pos:end="213:29"><name pos:start="213:19" pos:end="213:27">BIO_s_mem</name><argument_list pos:start="213:28" pos:end="213:29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="214:5" pos:end="214:45"><expr pos:start="214:5" pos:end="214:44"><call pos:start="214:5" pos:end="214:44"><name pos:start="214:5" pos:end="214:32">PEM_write_bio_ECPKParameters</name><argument_list pos:start="214:33" pos:end="214:44">(<argument pos:start="214:34" pos:end="214:36"><expr pos:start="214:34" pos:end="214:36"><name pos:start="214:34" pos:end="214:36">out</name></expr></argument>, <argument pos:start="214:39" pos:end="214:43"><expr pos:start="214:39" pos:end="214:43"><name pos:start="214:39" pos:end="214:43">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="215:5" pos:end="215:70"><expr pos:start="215:5" pos:end="215:69"><call pos:start="215:5" pos:end="215:69"><name pos:start="215:5" pos:end="215:30">PEM_write_bio_ECPrivateKey</name><argument_list pos:start="215:31" pos:end="215:69">(<argument pos:start="215:32" pos:end="215:34"><expr pos:start="215:32" pos:end="215:34"><name pos:start="215:32" pos:end="215:34">out</name></expr></argument>, <argument pos:start="215:37" pos:end="215:41"><expr pos:start="215:37" pos:end="215:41"><name pos:start="215:37" pos:end="215:41">eckey</name></expr></argument>, <argument pos:start="215:44" pos:end="215:47"><expr pos:start="215:44" pos:end="215:47"><name pos:start="215:44" pos:end="215:47">NULL</name></expr></argument>, <argument pos:start="215:50" pos:end="215:53"><expr pos:start="215:50" pos:end="215:53"><name pos:start="215:50" pos:end="215:53">NULL</name></expr></argument>, <argument pos:start="215:56" pos:end="215:56"><expr pos:start="215:56" pos:end="215:56"><literal type="number" pos:start="215:56" pos:end="215:56">0</literal></expr></argument>, <argument pos:start="215:59" pos:end="215:62"><expr pos:start="215:59" pos:end="215:62"><name pos:start="215:59" pos:end="215:62">NULL</name></expr></argument>, <argument pos:start="215:65" pos:end="215:68"><expr pos:start="215:65" pos:end="215:68"><name pos:start="215:65" pos:end="215:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="216:5" pos:end="216:44"><expr pos:start="216:5" pos:end="216:43"><name pos:start="216:5" pos:end="216:11">key_len</name> <operator pos:start="216:13" pos:end="216:13">=</operator> <call pos:start="216:15" pos:end="216:43"><name pos:start="216:15" pos:end="216:30">BIO_get_mem_data</name><argument_list pos:start="216:31" pos:end="216:43">(<argument pos:start="216:32" pos:end="216:34"><expr pos:start="216:32" pos:end="216:34"><name pos:start="216:32" pos:end="216:34">out</name></expr></argument>, <argument pos:start="216:37" pos:end="216:42"><expr pos:start="216:37" pos:end="216:42"><operator pos:start="216:37" pos:end="216:37">&amp;</operator><name pos:start="216:38" pos:end="216:42">tdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="217:5" pos:end="217:35"><expr pos:start="217:5" pos:end="217:34"><name pos:start="217:5" pos:end="217:12">key_data</name> <operator pos:start="217:14" pos:end="217:14">=</operator> <call pos:start="217:16" pos:end="217:34"><name pos:start="217:16" pos:end="217:21">malloc</name><argument_list pos:start="217:22" pos:end="217:34">(<argument pos:start="217:23" pos:end="217:33"><expr pos:start="217:23" pos:end="217:33"><name pos:start="217:23" pos:end="217:29">key_len</name> <operator pos:start="217:31" pos:end="217:31">+</operator> <literal type="number" pos:start="217:33" pos:end="217:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="218:5" pos:end="218:37"><expr pos:start="218:5" pos:end="218:36"><call pos:start="218:5" pos:end="218:36"><name pos:start="218:5" pos:end="218:10">memcpy</name><argument_list pos:start="218:11" pos:end="218:36">(<argument pos:start="218:12" pos:end="218:19"><expr pos:start="218:12" pos:end="218:19"><name pos:start="218:12" pos:end="218:19">key_data</name></expr></argument>, <argument pos:start="218:22" pos:end="218:26"><expr pos:start="218:22" pos:end="218:26"><name pos:start="218:22" pos:end="218:26">tdata</name></expr></argument>, <argument pos:start="218:29" pos:end="218:35"><expr pos:start="218:29" pos:end="218:35"><name pos:start="218:29" pos:end="218:35">key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="219:5" pos:end="219:23"><expr pos:start="219:5" pos:end="219:22"><call pos:start="219:5" pos:end="219:22"><name pos:start="219:5" pos:end="219:15">EC_KEY_free</name><argument_list pos:start="219:16" pos:end="219:22">(<argument pos:start="219:17" pos:end="219:21"><expr pos:start="219:17" pos:end="219:21"><name pos:start="219:17" pos:end="219:21">eckey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="220:5" pos:end="220:18"><expr pos:start="220:5" pos:end="220:17"><call pos:start="220:5" pos:end="220:17"><name pos:start="220:5" pos:end="220:12">BIO_free</name><argument_list pos:start="220:13" pos:end="220:17">(<argument pos:start="220:14" pos:end="220:16"><expr pos:start="220:14" pos:end="220:16"><name pos:start="220:14" pos:end="220:16">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="222:5" pos:end="224:7">/*
     * read it back in to an EVP_PKEY struct
     */</comment>
    <expr_stmt pos:start="225:5" pos:end="225:33"><expr pos:start="225:5" pos:end="225:32"><name pos:start="225:5" pos:end="225:9">keyin</name> <operator pos:start="225:11" pos:end="225:11">=</operator> <call pos:start="225:13" pos:end="225:32"><name pos:start="225:13" pos:end="225:19">BIO_new</name><argument_list pos:start="225:20" pos:end="225:32">(<argument pos:start="225:21" pos:end="225:31"><expr pos:start="225:21" pos:end="225:31"><call pos:start="225:21" pos:end="225:31"><name pos:start="225:21" pos:end="225:29">BIO_s_mem</name><argument_list pos:start="225:30" pos:end="225:31">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="226:5" pos:end="226:47"><expr pos:start="226:5" pos:end="226:46"><name pos:start="226:5" pos:end="226:9">keyin</name> <operator pos:start="226:11" pos:end="226:11">=</operator> <call pos:start="226:13" pos:end="226:46"><name pos:start="226:13" pos:end="226:27">BIO_new_mem_buf</name><argument_list pos:start="226:28" pos:end="226:46">(<argument pos:start="226:29" pos:end="226:36"><expr pos:start="226:29" pos:end="226:36"><name pos:start="226:29" pos:end="226:36">key_data</name></expr></argument>, <argument pos:start="226:39" pos:end="226:45"><expr pos:start="226:39" pos:end="226:45"><name pos:start="226:39" pos:end="226:45">key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="228:5" pos:end="232:7">/*
     * This reads in the private key file, which is expected to be a PEM
     * encoded private key.  If using DER encoding, you would invoke
     * d2i_PrivateKey_bio() instead.
     */</comment>
    <expr_stmt pos:start="233:5" pos:end="233:68"><expr pos:start="233:5" pos:end="233:67"><name pos:start="233:5" pos:end="233:16">new_priv_key</name> <operator pos:start="233:18" pos:end="233:18">=</operator> <call pos:start="233:20" pos:end="233:67"><name pos:start="233:20" pos:end="233:42">PEM_read_bio_PrivateKey</name><argument_list pos:start="233:43" pos:end="233:67">(<argument pos:start="233:44" pos:end="233:48"><expr pos:start="233:44" pos:end="233:48"><name pos:start="233:44" pos:end="233:48">keyin</name></expr></argument>, <argument pos:start="233:51" pos:end="233:54"><expr pos:start="233:51" pos:end="233:54"><name pos:start="233:51" pos:end="233:54">NULL</name></expr></argument>, <argument pos:start="233:57" pos:end="233:60"><expr pos:start="233:57" pos:end="233:60"><name pos:start="233:57" pos:end="233:60">NULL</name></expr></argument>, <argument pos:start="233:63" pos:end="233:66"><expr pos:start="233:63" pos:end="233:66"><name pos:start="233:63" pos:end="233:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="234:5" pos:end="238:5"><if pos:start="234:5" pos:end="238:5">if <condition pos:start="234:8" pos:end="234:29">(<expr pos:start="234:9" pos:end="234:28"><name pos:start="234:9" pos:end="234:20">new_priv_key</name> <operator pos:start="234:22" pos:end="234:23">==</operator> <name pos:start="234:25" pos:end="234:28">NULL</name></expr>)</condition> <block pos:start="234:31" pos:end="238:5">{<block_content pos:start="235:9" pos:end="237:20">
        <expr_stmt pos:start="235:9" pos:end="235:66"><expr pos:start="235:9" pos:end="235:65"><call pos:start="235:9" pos:end="235:65"><name pos:start="235:9" pos:end="235:14">printf</name><argument_list pos:start="235:15" pos:end="235:65">(<argument pos:start="235:16" pos:end="235:64"><expr pos:start="235:16" pos:end="235:64"><literal type="string" pos:start="235:16" pos:end="235:64">"\nError while reading PEM encoded private key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="236:9" pos:end="236:36"><expr pos:start="236:9" pos:end="236:35"><call pos:start="236:9" pos:end="236:35"><name pos:start="236:9" pos:end="236:27">ERR_print_errors_fp</name><argument_list pos:start="236:28" pos:end="236:35">(<argument pos:start="236:29" pos:end="236:34"><expr pos:start="236:29" pos:end="236:34"><name pos:start="236:29" pos:end="236:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="237:9" pos:end="237:20">return <expr pos:start="237:16" pos:end="237:19"><name pos:start="237:16" pos:end="237:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="239:5" pos:end="239:20"><expr pos:start="239:5" pos:end="239:19"><call pos:start="239:5" pos:end="239:19"><name pos:start="239:5" pos:end="239:12">BIO_free</name><argument_list pos:start="239:13" pos:end="239:19">(<argument pos:start="239:14" pos:end="239:18"><expr pos:start="239:14" pos:end="239:18"><name pos:start="239:14" pos:end="239:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="240:5" pos:end="240:19"><expr pos:start="240:5" pos:end="240:18"><call pos:start="240:5" pos:end="240:18"><name pos:start="240:5" pos:end="240:8">free</name><argument_list pos:start="240:9" pos:end="240:18">(<argument pos:start="240:10" pos:end="240:17"><expr pos:start="240:10" pos:end="240:17"><name pos:start="240:10" pos:end="240:17">key_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="242:5" pos:end="242:26">return <expr pos:start="242:12" pos:end="242:25"><operator pos:start="242:12" pos:end="242:12">(</operator><name pos:start="242:13" pos:end="242:24">new_priv_key</name><operator pos:start="242:25" pos:end="242:25">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="245:1" pos:end="249:3">/*
 * This test attempts does a simple enroll with the
 * client providing no CSR attributes other than
 * challengePassword. The enroll should succeed.
 */</comment>
<function pos:start="250:1" pos:end="310:1"><type pos:start="250:1" pos:end="250:11"><specifier pos:start="250:1" pos:end="250:6">static</specifier> <name pos:start="250:8" pos:end="250:11">void</name></type> <name pos:start="250:13" pos:end="250:24">us1159_test1</name> <parameter_list pos:start="250:26" pos:end="250:31">(<parameter pos:start="250:27" pos:end="250:30"><decl pos:start="250:27" pos:end="250:30"><type pos:start="250:27" pos:end="250:30"><name pos:start="250:27" pos:end="250:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="251:1" pos:end="310:1">{<block_content pos:start="252:5" pos:end="309:21">
    <decl_stmt pos:start="252:5" pos:end="252:17"><decl pos:start="252:5" pos:end="252:16"><type pos:start="252:5" pos:end="252:13"><name pos:start="252:5" pos:end="252:11">EST_CTX</name> <modifier pos:start="252:13" pos:end="252:13">*</modifier></type><name pos:start="252:14" pos:end="252:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="253:5" pos:end="253:18"><decl pos:start="253:5" pos:end="253:17"><type pos:start="253:5" pos:end="253:14"><name pos:start="253:5" pos:end="253:12">EVP_PKEY</name> <modifier pos:start="253:14" pos:end="253:14">*</modifier></type><name pos:start="253:15" pos:end="253:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="254:5" pos:end="254:11"><decl pos:start="254:5" pos:end="254:10"><type pos:start="254:5" pos:end="254:7"><name pos:start="254:5" pos:end="254:7">int</name></type> <name pos:start="254:9" pos:end="254:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="255:5" pos:end="255:22"><decl pos:start="255:5" pos:end="255:21"><type pos:start="255:5" pos:end="255:7"><name pos:start="255:5" pos:end="255:7">int</name></type> <name pos:start="255:9" pos:end="255:17">pkcs7_len</name> <init pos:start="255:19" pos:end="255:21">= <expr pos:start="255:21" pos:end="255:21"><literal type="number" pos:start="255:21" pos:end="255:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="256:5" pos:end="256:35"><decl pos:start="256:5" pos:end="256:34"><type pos:start="256:5" pos:end="256:19"><name pos:start="256:5" pos:end="256:12">unsigned</name> <name pos:start="256:14" pos:end="256:17">char</name> <modifier pos:start="256:19" pos:end="256:19">*</modifier></type><name pos:start="256:20" pos:end="256:27">new_cert</name> <init pos:start="256:29" pos:end="256:34">= <expr pos:start="256:31" pos:end="256:34"><name pos:start="256:31" pos:end="256:34">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="258:5" pos:end="259:5"><expr pos:start="258:5" pos:end="258:15"><name pos:start="258:5" pos:end="258:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="261:5" pos:end="263:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="264:5" pos:end="264:75"><expr pos:start="264:5" pos:end="264:74"><name pos:start="264:5" pos:end="264:7">ctx</name> <operator pos:start="264:9" pos:end="264:9">=</operator> <call pos:start="264:11" pos:end="264:74"><name pos:start="264:11" pos:end="264:25">est_client_init</name><argument_list pos:start="264:26" pos:end="264:74">(<argument pos:start="264:27" pos:end="264:33"><expr pos:start="264:27" pos:end="264:33"><name pos:start="264:27" pos:end="264:33">cacerts</name></expr></argument>, <argument pos:start="264:36" pos:end="264:46"><expr pos:start="264:36" pos:end="264:46"><name pos:start="264:36" pos:end="264:46">cacerts_len</name></expr></argument>, <argument pos:start="264:49" pos:end="264:67"><expr pos:start="264:49" pos:end="264:67"><name pos:start="264:49" pos:end="264:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="264:70" pos:end="264:73"><expr pos:start="264:70" pos:end="264:73"><name pos:start="264:70" pos:end="264:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="265:5" pos:end="265:27"><expr pos:start="265:5" pos:end="265:26"><call pos:start="265:5" pos:end="265:26"><name pos:start="265:5" pos:end="265:13">CU_ASSERT</name><argument_list pos:start="265:14" pos:end="265:26">(<argument pos:start="265:15" pos:end="265:25"><expr pos:start="265:15" pos:end="265:25"><name pos:start="265:15" pos:end="265:17">ctx</name> <operator pos:start="265:19" pos:end="265:20">!=</operator> <name pos:start="265:22" pos:end="265:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:35"><expr pos:start="267:5" pos:end="267:34"><name pos:start="267:5" pos:end="267:6">rv</name> <operator pos:start="267:8" pos:end="267:8">=</operator> <call pos:start="267:10" pos:end="267:34"><name pos:start="267:10" pos:end="267:29">est_client_force_pop</name><argument_list pos:start="267:30" pos:end="267:34">(<argument pos:start="267:31" pos:end="267:33"><expr pos:start="267:31" pos:end="267:33"><name pos:start="267:31" pos:end="267:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="268:5" pos:end="268:34"><expr pos:start="268:5" pos:end="268:33"><call pos:start="268:5" pos:end="268:33"><name pos:start="268:5" pos:end="268:13">CU_ASSERT</name><argument_list pos:start="268:14" pos:end="268:33">(<argument pos:start="268:15" pos:end="268:32"><expr pos:start="268:15" pos:end="268:32"><name pos:start="268:15" pos:end="268:16">rv</name> <operator pos:start="268:18" pos:end="268:19">==</operator> <name pos:start="268:21" pos:end="268:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="270:5" pos:end="272:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="273:5" pos:end="273:70"><expr pos:start="273:5" pos:end="273:69"><name pos:start="273:5" pos:end="273:6">rv</name> <operator pos:start="273:8" pos:end="273:8">=</operator> <call pos:start="273:10" pos:end="273:69"><name pos:start="273:10" pos:end="273:28">est_client_set_auth</name><argument_list pos:start="273:29" pos:end="273:69">(<argument pos:start="273:30" pos:end="273:32"><expr pos:start="273:30" pos:end="273:32"><name pos:start="273:30" pos:end="273:32">ctx</name></expr></argument>, <argument pos:start="273:35" pos:end="273:44"><expr pos:start="273:35" pos:end="273:44"><name pos:start="273:35" pos:end="273:44">US1159_UID</name></expr></argument>, <argument pos:start="273:47" pos:end="273:56"><expr pos:start="273:47" pos:end="273:56"><name pos:start="273:47" pos:end="273:56">US1159_PWD</name></expr></argument>, <argument pos:start="273:59" pos:end="273:62"><expr pos:start="273:59" pos:end="273:62"><name pos:start="273:59" pos:end="273:62">NULL</name></expr></argument>, <argument pos:start="273:65" pos:end="273:68"><expr pos:start="273:65" pos:end="273:68"><name pos:start="273:65" pos:end="273:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="274:5" pos:end="274:34"><expr pos:start="274:5" pos:end="274:33"><call pos:start="274:5" pos:end="274:33"><name pos:start="274:5" pos:end="274:13">CU_ASSERT</name><argument_list pos:start="274:14" pos:end="274:33">(<argument pos:start="274:15" pos:end="274:32"><expr pos:start="274:15" pos:end="274:32"><name pos:start="274:15" pos:end="274:16">rv</name> <operator pos:start="274:18" pos:end="274:19">==</operator> <name pos:start="274:21" pos:end="274:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="276:5" pos:end="278:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="279:5" pos:end="279:75"><expr pos:start="279:5" pos:end="279:74"><call pos:start="279:5" pos:end="279:74"><name pos:start="279:5" pos:end="279:25">est_client_set_server</name><argument_list pos:start="279:26" pos:end="279:74">(<argument pos:start="279:27" pos:end="279:29"><expr pos:start="279:27" pos:end="279:29"><name pos:start="279:27" pos:end="279:29">ctx</name></expr></argument>, <argument pos:start="279:32" pos:end="279:47"><expr pos:start="279:32" pos:end="279:47"><name pos:start="279:32" pos:end="279:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="279:50" pos:end="279:67"><expr pos:start="279:50" pos:end="279:67"><name pos:start="279:50" pos:end="279:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="279:70" pos:end="279:73"><expr pos:start="279:70" pos:end="279:73"><name pos:start="279:70" pos:end="279:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="281:5" pos:end="283:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="284:5" pos:end="284:33"><expr pos:start="284:5" pos:end="284:32"><name pos:start="284:5" pos:end="284:7">key</name> <operator pos:start="284:9" pos:end="284:9">=</operator> <call pos:start="284:11" pos:end="284:32"><name pos:start="284:11" pos:end="284:30">generate_private_key</name><argument_list pos:start="284:31" pos:end="284:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="285:5" pos:end="285:27"><expr pos:start="285:5" pos:end="285:26"><call pos:start="285:5" pos:end="285:26"><name pos:start="285:5" pos:end="285:13">CU_ASSERT</name><argument_list pos:start="285:14" pos:end="285:26">(<argument pos:start="285:15" pos:end="285:25"><expr pos:start="285:15" pos:end="285:25"><name pos:start="285:15" pos:end="285:17">key</name> <operator pos:start="285:19" pos:end="285:20">!=</operator> <name pos:start="285:22" pos:end="285:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="287:5" pos:end="289:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="290:5" pos:end="290:59"><expr pos:start="290:5" pos:end="290:58"><name pos:start="290:5" pos:end="290:6">rv</name> <operator pos:start="290:8" pos:end="290:8">=</operator> <call pos:start="290:10" pos:end="290:58"><name pos:start="290:10" pos:end="290:26">est_client_enroll</name><argument_list pos:start="290:27" pos:end="290:58">(<argument pos:start="290:28" pos:end="290:30"><expr pos:start="290:28" pos:end="290:30"><name pos:start="290:28" pos:end="290:30">ctx</name></expr></argument>, <argument pos:start="290:33" pos:end="290:40"><expr pos:start="290:33" pos:end="290:40"><literal type="string" pos:start="290:33" pos:end="290:40">"Test 1"</literal></expr></argument>, <argument pos:start="290:43" pos:end="290:52"><expr pos:start="290:43" pos:end="290:52"><operator pos:start="290:43" pos:end="290:43">&amp;</operator><name pos:start="290:44" pos:end="290:52">pkcs7_len</name></expr></argument>, <argument pos:start="290:55" pos:end="290:57"><expr pos:start="290:55" pos:end="290:57"><name pos:start="290:55" pos:end="290:57">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="291:5" pos:end="291:34"><expr pos:start="291:5" pos:end="291:33"><call pos:start="291:5" pos:end="291:33"><name pos:start="291:5" pos:end="291:13">CU_ASSERT</name><argument_list pos:start="291:14" pos:end="291:33">(<argument pos:start="291:15" pos:end="291:32"><expr pos:start="291:15" pos:end="291:32"><name pos:start="291:15" pos:end="291:16">rv</name> <operator pos:start="291:18" pos:end="291:19">==</operator> <name pos:start="291:21" pos:end="291:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="293:5" pos:end="295:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="296:5" pos:end="301:5"><if pos:start="296:5" pos:end="301:5">if <condition pos:start="296:8" pos:end="296:27">(<expr pos:start="296:9" pos:end="296:26"><name pos:start="296:9" pos:end="296:10">rv</name> <operator pos:start="296:12" pos:end="296:13">==</operator> <name pos:start="296:15" pos:end="296:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="296:29" pos:end="301:5">{<block_content pos:start="297:9" pos:end="300:38">
        <expr_stmt pos:start="297:9" pos:end="297:37"><expr pos:start="297:9" pos:end="297:36"><name pos:start="297:9" pos:end="297:16">new_cert</name> <operator pos:start="297:18" pos:end="297:18">=</operator> <call pos:start="297:20" pos:end="297:36"><name pos:start="297:20" pos:end="297:25">malloc</name><argument_list pos:start="297:26" pos:end="297:36">(<argument pos:start="297:27" pos:end="297:35"><expr pos:start="297:27" pos:end="297:35"><name pos:start="297:27" pos:end="297:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="298:9" pos:end="298:36"><expr pos:start="298:9" pos:end="298:35"><call pos:start="298:9" pos:end="298:35"><name pos:start="298:9" pos:end="298:17">CU_ASSERT</name><argument_list pos:start="298:18" pos:end="298:35">(<argument pos:start="298:19" pos:end="298:34"><expr pos:start="298:19" pos:end="298:34"><name pos:start="298:19" pos:end="298:26">new_cert</name> <operator pos:start="298:28" pos:end="298:29">!=</operator> <name pos:start="298:31" pos:end="298:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="299:9" pos:end="299:58"><expr pos:start="299:9" pos:end="299:57"><name pos:start="299:9" pos:end="299:10">rv</name> <operator pos:start="299:12" pos:end="299:12">=</operator> <call pos:start="299:14" pos:end="299:57"><name pos:start="299:14" pos:end="299:42">est_client_copy_enrolled_cert</name><argument_list pos:start="299:43" pos:end="299:57">(<argument pos:start="299:44" pos:end="299:46"><expr pos:start="299:44" pos:end="299:46"><name pos:start="299:44" pos:end="299:46">ctx</name></expr></argument>, <argument pos:start="299:49" pos:end="299:56"><expr pos:start="299:49" pos:end="299:56"><name pos:start="299:49" pos:end="299:56">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="300:9" pos:end="300:38"><expr pos:start="300:9" pos:end="300:37"><call pos:start="300:9" pos:end="300:37"><name pos:start="300:9" pos:end="300:17">CU_ASSERT</name><argument_list pos:start="300:18" pos:end="300:37">(<argument pos:start="300:19" pos:end="300:36"><expr pos:start="300:19" pos:end="300:36"><name pos:start="300:19" pos:end="300:20">rv</name> <operator pos:start="300:22" pos:end="300:23">==</operator> <name pos:start="300:25" pos:end="300:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="303:5" pos:end="305:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="306:5" pos:end="306:23"><expr pos:start="306:5" pos:end="306:22"><call pos:start="306:5" pos:end="306:22"><name pos:start="306:5" pos:end="306:17">EVP_PKEY_free</name><argument_list pos:start="306:18" pos:end="306:22">(<argument pos:start="306:19" pos:end="306:21"><expr pos:start="306:19" pos:end="306:21"><name pos:start="306:19" pos:end="306:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="307:5" pos:end="308:23"><if pos:start="307:5" pos:end="308:23">if <condition pos:start="307:8" pos:end="307:17">(<expr pos:start="307:9" pos:end="307:16"><name pos:start="307:9" pos:end="307:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="308:9" pos:end="308:23"><block_content pos:start="308:9" pos:end="308:23">
        <expr_stmt pos:start="308:9" pos:end="308:23"><expr pos:start="308:9" pos:end="308:22"><call pos:start="308:9" pos:end="308:22"><name pos:start="308:9" pos:end="308:12">free</name><argument_list pos:start="308:13" pos:end="308:22">(<argument pos:start="308:14" pos:end="308:21"><expr pos:start="308:14" pos:end="308:21"><name pos:start="308:14" pos:end="308:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="309:5" pos:end="309:21"><expr pos:start="309:5" pos:end="309:20"><call pos:start="309:5" pos:end="309:20"><name pos:start="309:5" pos:end="309:15">est_destroy</name><argument_list pos:start="309:16" pos:end="309:20">(<argument pos:start="309:17" pos:end="309:19"><expr pos:start="309:17" pos:end="309:19"><name pos:start="309:17" pos:end="309:19">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="312:1" pos:end="314:3">/*
 * This routine builds a PKCS10 CSR.
 */</comment>
<function pos:start="315:1" pos:end="466:0"><type pos:start="315:1" pos:end="315:16"><specifier pos:start="315:1" pos:end="315:6">static</specifier> <name pos:start="315:8" pos:end="315:16">EST_ERROR</name></type> <name pos:start="315:18" pos:end="315:38">populate_x509_request</name> <parameter_list pos:start="315:40" pos:end="315:80">(<parameter pos:start="315:41" pos:end="315:53"><decl pos:start="315:41" pos:end="315:53"><type pos:start="315:41" pos:end="315:53"><name pos:start="315:41" pos:end="315:48">X509_REQ</name> <modifier pos:start="315:50" pos:end="315:50">*</modifier></type><name pos:start="315:51" pos:end="315:53">req</name></decl></parameter>, <parameter pos:start="315:56" pos:end="315:69"><decl pos:start="315:56" pos:end="315:69"><type pos:start="315:56" pos:end="315:69"><name pos:start="315:56" pos:end="315:63">EVP_PKEY</name> <modifier pos:start="315:65" pos:end="315:65">*</modifier></type><name pos:start="315:66" pos:end="315:69">pkey</name></decl></parameter>, <parameter pos:start="315:72" pos:end="315:79"><decl pos:start="315:72" pos:end="315:79"><type pos:start="315:72" pos:end="315:79"><name pos:start="315:72" pos:end="315:75">char</name> <modifier pos:start="315:77" pos:end="315:77">*</modifier></type><name pos:start="315:78" pos:end="315:79">cn</name></decl></parameter>)</parameter_list>
<block pos:start="316:1" pos:end="466:0">{<block_content pos:start="317:5" pos:end="430:26">
    <decl_stmt pos:start="317:5" pos:end="317:20"><decl pos:start="317:5" pos:end="317:19"><type pos:start="317:5" pos:end="317:15"><name pos:start="317:5" pos:end="317:13">X509_NAME</name> <modifier pos:start="317:15" pos:end="317:15">*</modifier></type><name pos:start="317:16" pos:end="317:19">subj</name></decl>;</decl_stmt>
    <decl_stmt pos:start="318:5" pos:end="318:11"><decl pos:start="318:5" pos:end="318:10"><type pos:start="318:5" pos:end="318:7"><name pos:start="318:5" pos:end="318:7">int</name></type> <name pos:start="318:9" pos:end="318:10">rv</name></decl>;</decl_stmt>

    <comment type="block" pos:start="320:5" pos:end="320:30">/* setup version number */</comment>
    <expr_stmt pos:start="321:5" pos:end="321:39"><expr pos:start="321:5" pos:end="321:38"><name pos:start="321:5" pos:end="321:6">rv</name> <operator pos:start="321:8" pos:end="321:8">=</operator> <call pos:start="321:10" pos:end="321:38"><name pos:start="321:10" pos:end="321:29">X509_REQ_set_version</name><argument_list pos:start="321:30" pos:end="321:38">(<argument pos:start="321:31" pos:end="321:33"><expr pos:start="321:31" pos:end="321:33"><name pos:start="321:31" pos:end="321:33">req</name></expr></argument>, <argument pos:start="321:36" pos:end="321:37"><expr pos:start="321:36" pos:end="321:37"><literal type="number" pos:start="321:36" pos:end="321:37">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="322:5" pos:end="322:23"><expr pos:start="322:5" pos:end="322:22"><call pos:start="322:5" pos:end="322:22"><name pos:start="322:5" pos:end="322:13">CU_ASSERT</name><argument_list pos:start="322:14" pos:end="322:22">(<argument pos:start="322:15" pos:end="322:21"><expr pos:start="322:15" pos:end="322:21"><name pos:start="322:15" pos:end="322:16">rv</name> <operator pos:start="322:18" pos:end="322:19">!=</operator> <literal type="number" pos:start="322:21" pos:end="322:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="323:5" pos:end="326:5"><if pos:start="323:5" pos:end="326:5">if <condition pos:start="323:8" pos:end="323:12">(<expr pos:start="323:9" pos:end="323:11"><operator pos:start="323:9" pos:end="323:9">!</operator><name pos:start="323:10" pos:end="323:11">rv</name></expr>)</condition> <block pos:start="323:14" pos:end="326:5">{<block_content pos:start="324:9" pos:end="325:34">
        <expr_stmt pos:start="324:9" pos:end="324:36"><expr pos:start="324:9" pos:end="324:35"><call pos:start="324:9" pos:end="324:35"><name pos:start="324:9" pos:end="324:27">ERR_print_errors_fp</name><argument_list pos:start="324:28" pos:end="324:35">(<argument pos:start="324:29" pos:end="324:34"><expr pos:start="324:29" pos:end="324:34"><name pos:start="324:29" pos:end="324:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="325:9" pos:end="325:34">return <expr pos:start="325:16" pos:end="325:33"><operator pos:start="325:16" pos:end="325:16">(</operator><name pos:start="325:17" pos:end="325:32">EST_ERR_X509_VER</name><operator pos:start="325:33" pos:end="325:33">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="328:5" pos:end="330:7">/*
     * Add Common Name entry
     */</comment>
    <expr_stmt pos:start="331:5" pos:end="331:42"><expr pos:start="331:5" pos:end="331:41"><name pos:start="331:5" pos:end="331:8">subj</name> <operator pos:start="331:10" pos:end="331:10">=</operator> <call pos:start="331:12" pos:end="331:41"><name pos:start="331:12" pos:end="331:36">X509_REQ_get_subject_name</name><argument_list pos:start="331:37" pos:end="331:41">(<argument pos:start="331:38" pos:end="331:40"><expr pos:start="331:38" pos:end="331:40"><name pos:start="331:38" pos:end="331:40">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="332:5" pos:end="333:46"><expr pos:start="332:5" pos:end="333:45"><name pos:start="332:5" pos:end="332:6">rv</name> <operator pos:start="332:8" pos:end="332:8">=</operator> <call pos:start="332:10" pos:end="333:45"><name pos:start="332:10" pos:end="332:35">X509_NAME_add_entry_by_txt</name><argument_list pos:start="332:36" pos:end="333:45">(<argument pos:start="332:37" pos:end="332:40"><expr pos:start="332:37" pos:end="332:40"><name pos:start="332:37" pos:end="332:40">subj</name></expr></argument>, <argument pos:start="332:43" pos:end="332:46"><expr pos:start="332:43" pos:end="332:46"><literal type="string" pos:start="332:43" pos:end="332:46">"CN"</literal></expr></argument>, <argument pos:start="332:49" pos:end="332:60"><expr pos:start="332:49" pos:end="332:60"><name pos:start="332:49" pos:end="332:60">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="333:9" pos:end="333:33"><expr pos:start="333:9" pos:end="333:33"><operator pos:start="333:9" pos:end="333:9">(</operator><specifier pos:start="333:10" pos:end="333:14">const</specifier> <name pos:start="333:16" pos:end="333:23">unsigned</name> <name pos:start="333:25" pos:end="333:28">char</name><operator pos:start="333:29" pos:end="333:29">*</operator><operator pos:start="333:30" pos:end="333:30">)</operator> <name pos:start="333:32" pos:end="333:33">cn</name></expr></argument>, <argument pos:start="333:36" pos:end="333:37"><expr pos:start="333:36" pos:end="333:37"><operator pos:start="333:36" pos:end="333:36">-</operator><literal type="number" pos:start="333:37" pos:end="333:37">1</literal></expr></argument>, <argument pos:start="333:40" pos:end="333:41"><expr pos:start="333:40" pos:end="333:41"><operator pos:start="333:40" pos:end="333:40">-</operator><literal type="number" pos:start="333:41" pos:end="333:41">1</literal></expr></argument>, <argument pos:start="333:44" pos:end="333:44"><expr pos:start="333:44" pos:end="333:44"><literal type="number" pos:start="333:44" pos:end="333:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="334:5" pos:end="334:23"><expr pos:start="334:5" pos:end="334:22"><call pos:start="334:5" pos:end="334:22"><name pos:start="334:5" pos:end="334:13">CU_ASSERT</name><argument_list pos:start="334:14" pos:end="334:22">(<argument pos:start="334:15" pos:end="334:21"><expr pos:start="334:15" pos:end="334:21"><name pos:start="334:15" pos:end="334:16">rv</name> <operator pos:start="334:18" pos:end="334:19">!=</operator> <literal type="number" pos:start="334:21" pos:end="334:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="335:5" pos:end="338:5"><if pos:start="335:5" pos:end="338:5">if <condition pos:start="335:8" pos:end="335:12">(<expr pos:start="335:9" pos:end="335:11"><operator pos:start="335:9" pos:end="335:9">!</operator><name pos:start="335:10" pos:end="335:11">rv</name></expr>)</condition> <block pos:start="335:14" pos:end="338:5">{<block_content pos:start="336:9" pos:end="337:33">
        <expr_stmt pos:start="336:9" pos:end="336:36"><expr pos:start="336:9" pos:end="336:35"><call pos:start="336:9" pos:end="336:35"><name pos:start="336:9" pos:end="336:27">ERR_print_errors_fp</name><argument_list pos:start="336:28" pos:end="336:35">(<argument pos:start="336:29" pos:end="336:34"><expr pos:start="336:29" pos:end="336:34"><name pos:start="336:29" pos:end="336:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="337:9" pos:end="337:33">return <expr pos:start="337:16" pos:end="337:32"><operator pos:start="337:16" pos:end="337:16">(</operator><name pos:start="337:17" pos:end="337:31">EST_ERR_X509_CN</name><operator pos:start="337:32" pos:end="337:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="340:5" pos:end="342:7">/*
     * Add serial number Name entry
     */</comment>
    <expr_stmt pos:start="343:5" pos:end="344:49"><expr pos:start="343:5" pos:end="344:48"><name pos:start="343:5" pos:end="343:6">rv</name> <operator pos:start="343:8" pos:end="343:8">=</operator> <call pos:start="343:10" pos:end="344:48"><name pos:start="343:10" pos:end="343:35">X509_NAME_add_entry_by_NID</name><argument_list pos:start="343:36" pos:end="344:48">(<argument pos:start="343:37" pos:end="343:40"><expr pos:start="343:37" pos:end="343:40"><name pos:start="343:37" pos:end="343:40">subj</name></expr></argument>, <argument pos:start="343:43" pos:end="343:58"><expr pos:start="343:43" pos:end="343:58"><name pos:start="343:43" pos:end="343:58">NID_serialNumber</name></expr></argument>, <argument pos:start="343:61" pos:end="343:72"><expr pos:start="343:61" pos:end="343:72"><name pos:start="343:61" pos:end="343:72">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="344:9" pos:end="344:36"><expr pos:start="344:9" pos:end="344:36"><operator pos:start="344:9" pos:end="344:9">(</operator><name pos:start="344:10" pos:end="344:17">unsigned</name> <name pos:start="344:19" pos:end="344:22">char</name><operator pos:start="344:23" pos:end="344:23">*</operator><operator pos:start="344:24" pos:end="344:24">)</operator> <literal type="string" pos:start="344:26" pos:end="344:36">"12349999B"</literal></expr></argument>, <argument pos:start="344:39" pos:end="344:40"><expr pos:start="344:39" pos:end="344:40"><operator pos:start="344:39" pos:end="344:39">-</operator><literal type="number" pos:start="344:40" pos:end="344:40">1</literal></expr></argument>, <argument pos:start="344:43" pos:end="344:44"><expr pos:start="344:43" pos:end="344:44"><operator pos:start="344:43" pos:end="344:43">-</operator><literal type="number" pos:start="344:44" pos:end="344:44">1</literal></expr></argument>, <argument pos:start="344:47" pos:end="344:47"><expr pos:start="344:47" pos:end="344:47"><literal type="number" pos:start="344:47" pos:end="344:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="345:5" pos:end="345:23"><expr pos:start="345:5" pos:end="345:22"><call pos:start="345:5" pos:end="345:22"><name pos:start="345:5" pos:end="345:13">CU_ASSERT</name><argument_list pos:start="345:14" pos:end="345:22">(<argument pos:start="345:15" pos:end="345:21"><expr pos:start="345:15" pos:end="345:21"><name pos:start="345:15" pos:end="345:16">rv</name> <operator pos:start="345:18" pos:end="345:19">!=</operator> <literal type="number" pos:start="345:21" pos:end="345:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="346:5" pos:end="349:5"><if pos:start="346:5" pos:end="349:5">if <condition pos:start="346:8" pos:end="346:12">(<expr pos:start="346:9" pos:end="346:11"><operator pos:start="346:9" pos:end="346:9">!</operator><name pos:start="346:10" pos:end="346:11">rv</name></expr>)</condition> <block pos:start="346:14" pos:end="349:5">{<block_content pos:start="347:9" pos:end="348:33">
        <expr_stmt pos:start="347:9" pos:end="347:36"><expr pos:start="347:9" pos:end="347:35"><call pos:start="347:9" pos:end="347:35"><name pos:start="347:9" pos:end="347:27">ERR_print_errors_fp</name><argument_list pos:start="347:28" pos:end="347:35">(<argument pos:start="347:29" pos:end="347:34"><expr pos:start="347:29" pos:end="347:34"><name pos:start="347:29" pos:end="347:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="348:9" pos:end="348:33">return <expr pos:start="348:16" pos:end="348:32"><operator pos:start="348:16" pos:end="348:16">(</operator><name pos:start="348:17" pos:end="348:31">EST_ERR_X509_CN</name><operator pos:start="348:32" pos:end="348:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="351:5" pos:end="353:7">/*
     * Add all the other attributes that the server will be expecting
     */</comment>
    <expr_stmt pos:start="354:5" pos:end="355:47"><expr pos:start="354:5" pos:end="355:46"><name pos:start="354:5" pos:end="354:6">rv</name> <operator pos:start="354:8" pos:end="354:8">=</operator> <call pos:start="354:10" pos:end="355:46"><name pos:start="354:10" pos:end="354:34">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="354:35" pos:end="355:46">(<argument pos:start="354:36" pos:end="354:38"><expr pos:start="354:36" pos:end="354:38"><name pos:start="354:36" pos:end="354:38">req</name></expr></argument>, <argument pos:start="354:41" pos:end="354:58"><expr pos:start="354:41" pos:end="354:58"><literal type="string" pos:start="354:41" pos:end="354:58">"1.3.6.1.1.1.1.22"</literal></expr></argument>, <argument pos:start="354:61" pos:end="354:72"><expr pos:start="354:61" pos:end="354:72"><name pos:start="354:61" pos:end="354:72">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="355:9" pos:end="355:41"><expr pos:start="355:9" pos:end="355:41"><operator pos:start="355:9" pos:end="355:9">(</operator><specifier pos:start="355:10" pos:end="355:14">const</specifier> <name pos:start="355:16" pos:end="355:23">unsigned</name> <name pos:start="355:25" pos:end="355:28">char</name><operator pos:start="355:29" pos:end="355:29">*</operator><operator pos:start="355:30" pos:end="355:30">)</operator> <literal type="string" pos:start="355:32" pos:end="355:41">"dummymac"</literal></expr></argument>, <argument pos:start="355:44" pos:end="355:45"><expr pos:start="355:44" pos:end="355:45"><operator pos:start="355:44" pos:end="355:44">-</operator><literal type="number" pos:start="355:45" pos:end="355:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="356:5" pos:end="356:23"><expr pos:start="356:5" pos:end="356:22"><call pos:start="356:5" pos:end="356:22"><name pos:start="356:5" pos:end="356:13">CU_ASSERT</name><argument_list pos:start="356:14" pos:end="356:22">(<argument pos:start="356:15" pos:end="356:21"><expr pos:start="356:15" pos:end="356:21"><name pos:start="356:15" pos:end="356:16">rv</name> <operator pos:start="356:18" pos:end="356:19">!=</operator> <literal type="number" pos:start="356:21" pos:end="356:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="357:5" pos:end="360:5"><if pos:start="357:5" pos:end="360:5">if <condition pos:start="357:8" pos:end="357:12">(<expr pos:start="357:9" pos:end="357:11"><operator pos:start="357:9" pos:end="357:9">!</operator><name pos:start="357:10" pos:end="357:11">rv</name></expr>)</condition> <block pos:start="357:14" pos:end="360:5">{<block_content pos:start="358:9" pos:end="359:33">
        <expr_stmt pos:start="358:9" pos:end="358:36"><expr pos:start="358:9" pos:end="358:35"><call pos:start="358:9" pos:end="358:35"><name pos:start="358:9" pos:end="358:27">ERR_print_errors_fp</name><argument_list pos:start="358:28" pos:end="358:35">(<argument pos:start="358:29" pos:end="358:34"><expr pos:start="358:29" pos:end="358:34"><name pos:start="358:29" pos:end="358:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="359:9" pos:end="359:33">return <expr pos:start="359:16" pos:end="359:32"><operator pos:start="359:16" pos:end="359:16">(</operator><name pos:start="359:17" pos:end="359:31">EST_ERR_UNKNOWN</name><operator pos:start="359:32" pos:end="359:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="362:5" pos:end="363:44"><expr pos:start="362:5" pos:end="363:43"><name pos:start="362:5" pos:end="362:6">rv</name> <operator pos:start="362:8" pos:end="362:8">=</operator> <call pos:start="362:10" pos:end="363:43"><name pos:start="362:10" pos:end="362:34">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="362:35" pos:end="363:43">(<argument pos:start="362:36" pos:end="362:38"><expr pos:start="362:36" pos:end="362:38"><name pos:start="362:36" pos:end="362:38">req</name></expr></argument>, <argument pos:start="362:41" pos:end="362:49"><expr pos:start="362:41" pos:end="362:49"><literal type="string" pos:start="362:41" pos:end="362:49">"2.999.1"</literal></expr></argument>, <argument pos:start="362:52" pos:end="362:63"><expr pos:start="362:52" pos:end="362:63"><name pos:start="362:52" pos:end="362:63">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="363:9" pos:end="363:38"><expr pos:start="363:9" pos:end="363:38"><operator pos:start="363:9" pos:end="363:9">(</operator><specifier pos:start="363:10" pos:end="363:14">const</specifier> <name pos:start="363:16" pos:end="363:23">unsigned</name> <name pos:start="363:25" pos:end="363:28">char</name><operator pos:start="363:29" pos:end="363:29">*</operator><operator pos:start="363:30" pos:end="363:30">)</operator> <literal type="string" pos:start="363:32" pos:end="363:38">"dummy"</literal></expr></argument>, <argument pos:start="363:41" pos:end="363:42"><expr pos:start="363:41" pos:end="363:42"><operator pos:start="363:41" pos:end="363:41">-</operator><literal type="number" pos:start="363:42" pos:end="363:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="364:5" pos:end="364:23"><expr pos:start="364:5" pos:end="364:22"><call pos:start="364:5" pos:end="364:22"><name pos:start="364:5" pos:end="364:13">CU_ASSERT</name><argument_list pos:start="364:14" pos:end="364:22">(<argument pos:start="364:15" pos:end="364:21"><expr pos:start="364:15" pos:end="364:21"><name pos:start="364:15" pos:end="364:16">rv</name> <operator pos:start="364:18" pos:end="364:19">!=</operator> <literal type="number" pos:start="364:21" pos:end="364:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="365:5" pos:end="368:5"><if pos:start="365:5" pos:end="368:5">if <condition pos:start="365:8" pos:end="365:12">(<expr pos:start="365:9" pos:end="365:11"><operator pos:start="365:9" pos:end="365:9">!</operator><name pos:start="365:10" pos:end="365:11">rv</name></expr>)</condition> <block pos:start="365:14" pos:end="368:5">{<block_content pos:start="366:9" pos:end="367:33">
        <expr_stmt pos:start="366:9" pos:end="366:36"><expr pos:start="366:9" pos:end="366:35"><call pos:start="366:9" pos:end="366:35"><name pos:start="366:9" pos:end="366:27">ERR_print_errors_fp</name><argument_list pos:start="366:28" pos:end="366:35">(<argument pos:start="366:29" pos:end="366:34"><expr pos:start="366:29" pos:end="366:34"><name pos:start="366:29" pos:end="366:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="367:9" pos:end="367:33">return <expr pos:start="367:16" pos:end="367:32"><operator pos:start="367:16" pos:end="367:16">(</operator><name pos:start="367:17" pos:end="367:31">EST_ERR_UNKNOWN</name><operator pos:start="367:32" pos:end="367:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="370:5" pos:end="371:44"><expr pos:start="370:5" pos:end="371:43"><name pos:start="370:5" pos:end="370:6">rv</name> <operator pos:start="370:8" pos:end="370:8">=</operator> <call pos:start="370:10" pos:end="371:43"><name pos:start="370:10" pos:end="370:34">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="370:35" pos:end="371:43">(<argument pos:start="370:36" pos:end="370:38"><expr pos:start="370:36" pos:end="370:38"><name pos:start="370:36" pos:end="370:38">req</name></expr></argument>, <argument pos:start="370:41" pos:end="370:49"><expr pos:start="370:41" pos:end="370:49"><literal type="string" pos:start="370:41" pos:end="370:49">"2.999.2"</literal></expr></argument>, <argument pos:start="370:52" pos:end="370:63"><expr pos:start="370:52" pos:end="370:63"><name pos:start="370:52" pos:end="370:63">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="371:9" pos:end="371:38"><expr pos:start="371:9" pos:end="371:38"><operator pos:start="371:9" pos:end="371:9">(</operator><specifier pos:start="371:10" pos:end="371:14">const</specifier> <name pos:start="371:16" pos:end="371:23">unsigned</name> <name pos:start="371:25" pos:end="371:28">char</name><operator pos:start="371:29" pos:end="371:29">*</operator><operator pos:start="371:30" pos:end="371:30">)</operator> <literal type="string" pos:start="371:32" pos:end="371:38">"dummy"</literal></expr></argument>, <argument pos:start="371:41" pos:end="371:42"><expr pos:start="371:41" pos:end="371:42"><operator pos:start="371:41" pos:end="371:41">-</operator><literal type="number" pos:start="371:42" pos:end="371:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="372:5" pos:end="372:23"><expr pos:start="372:5" pos:end="372:22"><call pos:start="372:5" pos:end="372:22"><name pos:start="372:5" pos:end="372:13">CU_ASSERT</name><argument_list pos:start="372:14" pos:end="372:22">(<argument pos:start="372:15" pos:end="372:21"><expr pos:start="372:15" pos:end="372:21"><name pos:start="372:15" pos:end="372:16">rv</name> <operator pos:start="372:18" pos:end="372:19">!=</operator> <literal type="number" pos:start="372:21" pos:end="372:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="373:5" pos:end="376:5"><if pos:start="373:5" pos:end="376:5">if <condition pos:start="373:8" pos:end="373:12">(<expr pos:start="373:9" pos:end="373:11"><operator pos:start="373:9" pos:end="373:9">!</operator><name pos:start="373:10" pos:end="373:11">rv</name></expr>)</condition> <block pos:start="373:14" pos:end="376:5">{<block_content pos:start="374:9" pos:end="375:33">
        <expr_stmt pos:start="374:9" pos:end="374:36"><expr pos:start="374:9" pos:end="374:35"><call pos:start="374:9" pos:end="374:35"><name pos:start="374:9" pos:end="374:27">ERR_print_errors_fp</name><argument_list pos:start="374:28" pos:end="374:35">(<argument pos:start="374:29" pos:end="374:34"><expr pos:start="374:29" pos:end="374:34"><name pos:start="374:29" pos:end="374:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="375:9" pos:end="375:33">return <expr pos:start="375:16" pos:end="375:32"><operator pos:start="375:16" pos:end="375:16">(</operator><name pos:start="375:17" pos:end="375:31">EST_ERR_UNKNOWN</name><operator pos:start="375:32" pos:end="375:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="378:5" pos:end="379:44"><expr pos:start="378:5" pos:end="379:43"><name pos:start="378:5" pos:end="378:6">rv</name> <operator pos:start="378:8" pos:end="378:8">=</operator> <call pos:start="378:10" pos:end="379:43"><name pos:start="378:10" pos:end="378:34">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="378:35" pos:end="379:43">(<argument pos:start="378:36" pos:end="378:38"><expr pos:start="378:36" pos:end="378:38"><name pos:start="378:36" pos:end="378:38">req</name></expr></argument>, <argument pos:start="378:41" pos:end="378:49"><expr pos:start="378:41" pos:end="378:49"><literal type="string" pos:start="378:41" pos:end="378:49">"2.999.3"</literal></expr></argument>, <argument pos:start="378:52" pos:end="378:63"><expr pos:start="378:52" pos:end="378:63"><name pos:start="378:52" pos:end="378:63">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="379:9" pos:end="379:38"><expr pos:start="379:9" pos:end="379:38"><operator pos:start="379:9" pos:end="379:9">(</operator><specifier pos:start="379:10" pos:end="379:14">const</specifier> <name pos:start="379:16" pos:end="379:23">unsigned</name> <name pos:start="379:25" pos:end="379:28">char</name><operator pos:start="379:29" pos:end="379:29">*</operator><operator pos:start="379:30" pos:end="379:30">)</operator> <literal type="string" pos:start="379:32" pos:end="379:38">"dummy"</literal></expr></argument>, <argument pos:start="379:41" pos:end="379:42"><expr pos:start="379:41" pos:end="379:42"><operator pos:start="379:41" pos:end="379:41">-</operator><literal type="number" pos:start="379:42" pos:end="379:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="380:5" pos:end="380:23"><expr pos:start="380:5" pos:end="380:22"><call pos:start="380:5" pos:end="380:22"><name pos:start="380:5" pos:end="380:13">CU_ASSERT</name><argument_list pos:start="380:14" pos:end="380:22">(<argument pos:start="380:15" pos:end="380:21"><expr pos:start="380:15" pos:end="380:21"><name pos:start="380:15" pos:end="380:16">rv</name> <operator pos:start="380:18" pos:end="380:19">!=</operator> <literal type="number" pos:start="380:21" pos:end="380:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="381:5" pos:end="384:5"><if pos:start="381:5" pos:end="384:5">if <condition pos:start="381:8" pos:end="381:12">(<expr pos:start="381:9" pos:end="381:11"><operator pos:start="381:9" pos:end="381:9">!</operator><name pos:start="381:10" pos:end="381:11">rv</name></expr>)</condition> <block pos:start="381:14" pos:end="384:5">{<block_content pos:start="382:9" pos:end="383:33">
        <expr_stmt pos:start="382:9" pos:end="382:36"><expr pos:start="382:9" pos:end="382:35"><call pos:start="382:9" pos:end="382:35"><name pos:start="382:9" pos:end="382:27">ERR_print_errors_fp</name><argument_list pos:start="382:28" pos:end="382:35">(<argument pos:start="382:29" pos:end="382:34"><expr pos:start="382:29" pos:end="382:34"><name pos:start="382:29" pos:end="382:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="383:9" pos:end="383:33">return <expr pos:start="383:16" pos:end="383:32"><operator pos:start="383:16" pos:end="383:16">(</operator><name pos:start="383:17" pos:end="383:31">EST_ERR_UNKNOWN</name><operator pos:start="383:32" pos:end="383:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="386:5" pos:end="387:44"><expr pos:start="386:5" pos:end="387:43"><name pos:start="386:5" pos:end="386:6">rv</name> <operator pos:start="386:8" pos:end="386:8">=</operator> <call pos:start="386:10" pos:end="387:43"><name pos:start="386:10" pos:end="386:34">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="386:35" pos:end="387:43">(<argument pos:start="386:36" pos:end="386:38"><expr pos:start="386:36" pos:end="386:38"><name pos:start="386:36" pos:end="386:38">req</name></expr></argument>, <argument pos:start="386:41" pos:end="386:49"><expr pos:start="386:41" pos:end="386:49"><literal type="string" pos:start="386:41" pos:end="386:49">"2.999.4"</literal></expr></argument>, <argument pos:start="386:52" pos:end="386:63"><expr pos:start="386:52" pos:end="386:63"><name pos:start="386:52" pos:end="386:63">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="387:9" pos:end="387:38"><expr pos:start="387:9" pos:end="387:38"><operator pos:start="387:9" pos:end="387:9">(</operator><specifier pos:start="387:10" pos:end="387:14">const</specifier> <name pos:start="387:16" pos:end="387:23">unsigned</name> <name pos:start="387:25" pos:end="387:28">char</name><operator pos:start="387:29" pos:end="387:29">*</operator><operator pos:start="387:30" pos:end="387:30">)</operator> <literal type="string" pos:start="387:32" pos:end="387:38">"dummy"</literal></expr></argument>, <argument pos:start="387:41" pos:end="387:42"><expr pos:start="387:41" pos:end="387:42"><operator pos:start="387:41" pos:end="387:41">-</operator><literal type="number" pos:start="387:42" pos:end="387:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="388:5" pos:end="388:23"><expr pos:start="388:5" pos:end="388:22"><call pos:start="388:5" pos:end="388:22"><name pos:start="388:5" pos:end="388:13">CU_ASSERT</name><argument_list pos:start="388:14" pos:end="388:22">(<argument pos:start="388:15" pos:end="388:21"><expr pos:start="388:15" pos:end="388:21"><name pos:start="388:15" pos:end="388:16">rv</name> <operator pos:start="388:18" pos:end="388:19">!=</operator> <literal type="number" pos:start="388:21" pos:end="388:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="389:5" pos:end="392:5"><if pos:start="389:5" pos:end="392:5">if <condition pos:start="389:8" pos:end="389:12">(<expr pos:start="389:9" pos:end="389:11"><operator pos:start="389:9" pos:end="389:9">!</operator><name pos:start="389:10" pos:end="389:11">rv</name></expr>)</condition> <block pos:start="389:14" pos:end="392:5">{<block_content pos:start="390:9" pos:end="391:33">
        <expr_stmt pos:start="390:9" pos:end="390:36"><expr pos:start="390:9" pos:end="390:35"><call pos:start="390:9" pos:end="390:35"><name pos:start="390:9" pos:end="390:27">ERR_print_errors_fp</name><argument_list pos:start="390:28" pos:end="390:35">(<argument pos:start="390:29" pos:end="390:34"><expr pos:start="390:29" pos:end="390:34"><name pos:start="390:29" pos:end="390:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="391:9" pos:end="391:33">return <expr pos:start="391:16" pos:end="391:32"><operator pos:start="391:16" pos:end="391:16">(</operator><name pos:start="391:17" pos:end="391:31">EST_ERR_UNKNOWN</name><operator pos:start="391:32" pos:end="391:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="394:5" pos:end="395:51"><expr pos:start="394:5" pos:end="395:50"><name pos:start="394:5" pos:end="394:6">rv</name> <operator pos:start="394:8" pos:end="394:8">=</operator> <call pos:start="394:10" pos:end="395:50"><name pos:start="394:10" pos:end="394:34">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="394:35" pos:end="395:50">(<argument pos:start="394:36" pos:end="394:38"><expr pos:start="394:36" pos:end="394:38"><name pos:start="394:36" pos:end="394:38">req</name></expr></argument>, <argument pos:start="394:41" pos:end="394:59"><expr pos:start="394:41" pos:end="394:59"><literal type="string" pos:start="394:41" pos:end="394:59">"1.2.840.10045.2.1"</literal></expr></argument>, <argument pos:start="394:62" pos:end="394:73"><expr pos:start="394:62" pos:end="394:73"><name pos:start="394:62" pos:end="394:73">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="395:9" pos:end="395:45"><expr pos:start="395:9" pos:end="395:45"><operator pos:start="395:9" pos:end="395:9">(</operator><specifier pos:start="395:10" pos:end="395:14">const</specifier> <name pos:start="395:16" pos:end="395:23">unsigned</name> <name pos:start="395:25" pos:end="395:28">char</name><operator pos:start="395:29" pos:end="395:29">*</operator><operator pos:start="395:30" pos:end="395:30">)</operator> <literal type="string" pos:start="395:32" pos:end="395:45">"1.3.132.0.34"</literal></expr></argument>, <argument pos:start="395:48" pos:end="395:49"><expr pos:start="395:48" pos:end="395:49"><operator pos:start="395:48" pos:end="395:48">-</operator><literal type="number" pos:start="395:49" pos:end="395:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="396:5" pos:end="396:23"><expr pos:start="396:5" pos:end="396:22"><call pos:start="396:5" pos:end="396:22"><name pos:start="396:5" pos:end="396:13">CU_ASSERT</name><argument_list pos:start="396:14" pos:end="396:22">(<argument pos:start="396:15" pos:end="396:21"><expr pos:start="396:15" pos:end="396:21"><name pos:start="396:15" pos:end="396:16">rv</name> <operator pos:start="396:18" pos:end="396:19">!=</operator> <literal type="number" pos:start="396:21" pos:end="396:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="397:5" pos:end="400:5"><if pos:start="397:5" pos:end="400:5">if <condition pos:start="397:8" pos:end="397:12">(<expr pos:start="397:9" pos:end="397:11"><operator pos:start="397:9" pos:end="397:9">!</operator><name pos:start="397:10" pos:end="397:11">rv</name></expr>)</condition> <block pos:start="397:14" pos:end="400:5">{<block_content pos:start="398:9" pos:end="399:33">
        <expr_stmt pos:start="398:9" pos:end="398:36"><expr pos:start="398:9" pos:end="398:35"><call pos:start="398:9" pos:end="398:35"><name pos:start="398:9" pos:end="398:27">ERR_print_errors_fp</name><argument_list pos:start="398:28" pos:end="398:35">(<argument pos:start="398:29" pos:end="398:34"><expr pos:start="398:29" pos:end="398:34"><name pos:start="398:29" pos:end="398:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="399:9" pos:end="399:33">return <expr pos:start="399:16" pos:end="399:32"><operator pos:start="399:16" pos:end="399:16">(</operator><name pos:start="399:17" pos:end="399:31">EST_ERR_UNKNOWN</name><operator pos:start="399:32" pos:end="399:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="402:5" pos:end="403:39"><expr pos:start="402:5" pos:end="403:38"><name pos:start="402:5" pos:end="402:6">rv</name> <operator pos:start="402:8" pos:end="402:8">=</operator> <call pos:start="402:10" pos:end="403:38"><name pos:start="402:10" pos:end="402:34">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="402:35" pos:end="403:38">(<argument pos:start="402:36" pos:end="402:38"><expr pos:start="402:36" pos:end="402:38"><name pos:start="402:36" pos:end="402:38">req</name></expr></argument>, <argument pos:start="402:41" pos:end="402:61"><expr pos:start="402:41" pos:end="402:61"><literal type="string" pos:start="402:41" pos:end="402:61">"1.2.840.10045.4.3.3"</literal></expr></argument>, <argument pos:start="402:64" pos:end="402:75"><expr pos:start="402:64" pos:end="402:75"><name pos:start="402:64" pos:end="402:75">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="403:9" pos:end="403:33"><expr pos:start="403:9" pos:end="403:33"><operator pos:start="403:9" pos:end="403:9">(</operator><specifier pos:start="403:10" pos:end="403:14">const</specifier> <name pos:start="403:16" pos:end="403:23">unsigned</name> <name pos:start="403:25" pos:end="403:28">char</name><operator pos:start="403:29" pos:end="403:29">*</operator><operator pos:start="403:30" pos:end="403:30">)</operator> <literal type="string" pos:start="403:32" pos:end="403:33">""</literal></expr></argument>, <argument pos:start="403:36" pos:end="403:37"><expr pos:start="403:36" pos:end="403:37"><operator pos:start="403:36" pos:end="403:36">-</operator><literal type="number" pos:start="403:37" pos:end="403:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="404:5" pos:end="404:23"><expr pos:start="404:5" pos:end="404:22"><call pos:start="404:5" pos:end="404:22"><name pos:start="404:5" pos:end="404:13">CU_ASSERT</name><argument_list pos:start="404:14" pos:end="404:22">(<argument pos:start="404:15" pos:end="404:21"><expr pos:start="404:15" pos:end="404:21"><name pos:start="404:15" pos:end="404:16">rv</name> <operator pos:start="404:18" pos:end="404:19">!=</operator> <literal type="number" pos:start="404:21" pos:end="404:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="405:5" pos:end="408:5"><if pos:start="405:5" pos:end="408:5">if <condition pos:start="405:8" pos:end="405:12">(<expr pos:start="405:9" pos:end="405:11"><operator pos:start="405:9" pos:end="405:9">!</operator><name pos:start="405:10" pos:end="405:11">rv</name></expr>)</condition> <block pos:start="405:14" pos:end="408:5">{<block_content pos:start="406:9" pos:end="407:33">
        <expr_stmt pos:start="406:9" pos:end="406:36"><expr pos:start="406:9" pos:end="406:35"><call pos:start="406:9" pos:end="406:35"><name pos:start="406:9" pos:end="406:27">ERR_print_errors_fp</name><argument_list pos:start="406:28" pos:end="406:35">(<argument pos:start="406:29" pos:end="406:34"><expr pos:start="406:29" pos:end="406:34"><name pos:start="406:29" pos:end="406:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="407:9" pos:end="407:33">return <expr pos:start="407:16" pos:end="407:32"><operator pos:start="407:16" pos:end="407:16">(</operator><name pos:start="407:17" pos:end="407:31">EST_ERR_UNKNOWN</name><operator pos:start="407:32" pos:end="407:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="410:5" pos:end="411:49"><expr pos:start="410:5" pos:end="411:48"><name pos:start="410:5" pos:end="410:6">rv</name> <operator pos:start="410:8" pos:end="410:8">=</operator> <call pos:start="410:10" pos:end="411:48"><name pos:start="410:10" pos:end="410:34">X509_REQ_add1_attr_by_NID</name><argument_list pos:start="410:35" pos:end="411:48">(<argument pos:start="410:36" pos:end="410:38"><expr pos:start="410:36" pos:end="410:38"><name pos:start="410:36" pos:end="410:38">req</name></expr></argument>, <argument pos:start="410:41" pos:end="410:56"><expr pos:start="410:41" pos:end="410:56"><name pos:start="410:41" pos:end="410:56">NID_serialNumber</name></expr></argument>, <argument pos:start="410:59" pos:end="410:70"><expr pos:start="410:59" pos:end="410:70"><name pos:start="410:59" pos:end="410:70">MBSTRING_ASC</name></expr></argument>,
        <argument pos:start="411:9" pos:end="411:43"><expr pos:start="411:9" pos:end="411:43"><operator pos:start="411:9" pos:end="411:9">(</operator><specifier pos:start="411:10" pos:end="411:14">const</specifier> <name pos:start="411:16" pos:end="411:23">unsigned</name> <name pos:start="411:25" pos:end="411:28">char</name><operator pos:start="411:29" pos:end="411:29">*</operator><operator pos:start="411:30" pos:end="411:30">)</operator> <literal type="string" pos:start="411:32" pos:end="411:43">"123456789A"</literal></expr></argument>, <argument pos:start="411:46" pos:end="411:47"><expr pos:start="411:46" pos:end="411:47"><operator pos:start="411:46" pos:end="411:46">-</operator><literal type="number" pos:start="411:47" pos:end="411:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="412:5" pos:end="412:23"><expr pos:start="412:5" pos:end="412:22"><call pos:start="412:5" pos:end="412:22"><name pos:start="412:5" pos:end="412:13">CU_ASSERT</name><argument_list pos:start="412:14" pos:end="412:22">(<argument pos:start="412:15" pos:end="412:21"><expr pos:start="412:15" pos:end="412:21"><name pos:start="412:15" pos:end="412:16">rv</name> <operator pos:start="412:18" pos:end="412:19">!=</operator> <literal type="number" pos:start="412:21" pos:end="412:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="413:5" pos:end="416:5"><if pos:start="413:5" pos:end="416:5">if <condition pos:start="413:8" pos:end="413:12">(<expr pos:start="413:9" pos:end="413:11"><operator pos:start="413:9" pos:end="413:9">!</operator><name pos:start="413:10" pos:end="413:11">rv</name></expr>)</condition> <block pos:start="413:14" pos:end="416:5">{<block_content pos:start="414:9" pos:end="415:33">
        <expr_stmt pos:start="414:9" pos:end="414:36"><expr pos:start="414:9" pos:end="414:35"><call pos:start="414:9" pos:end="414:35"><name pos:start="414:9" pos:end="414:27">ERR_print_errors_fp</name><argument_list pos:start="414:28" pos:end="414:35">(<argument pos:start="414:29" pos:end="414:34"><expr pos:start="414:29" pos:end="414:34"><name pos:start="414:29" pos:end="414:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="415:9" pos:end="415:33">return <expr pos:start="415:16" pos:end="415:32"><operator pos:start="415:16" pos:end="415:16">(</operator><name pos:start="415:17" pos:end="415:31">EST_ERR_UNKNOWN</name><operator pos:start="415:32" pos:end="415:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="418:5" pos:end="420:7">/*
     * Set the public key on the request
     */</comment>
    <expr_stmt pos:start="421:5" pos:end="421:40"><expr pos:start="421:5" pos:end="421:39"><name pos:start="421:5" pos:end="421:6">rv</name> <operator pos:start="421:8" pos:end="421:8">=</operator> <call pos:start="421:10" pos:end="421:39"><name pos:start="421:10" pos:end="421:28">X509_REQ_set_pubkey</name><argument_list pos:start="421:29" pos:end="421:39">(<argument pos:start="421:30" pos:end="421:32"><expr pos:start="421:30" pos:end="421:32"><name pos:start="421:30" pos:end="421:32">req</name></expr></argument>, <argument pos:start="421:35" pos:end="421:38"><expr pos:start="421:35" pos:end="421:38"><name pos:start="421:35" pos:end="421:38">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="422:5" pos:end="422:23"><expr pos:start="422:5" pos:end="422:22"><call pos:start="422:5" pos:end="422:22"><name pos:start="422:5" pos:end="422:13">CU_ASSERT</name><argument_list pos:start="422:14" pos:end="422:22">(<argument pos:start="422:15" pos:end="422:21"><expr pos:start="422:15" pos:end="422:21"><name pos:start="422:15" pos:end="422:16">rv</name> <operator pos:start="422:18" pos:end="422:19">!=</operator> <literal type="number" pos:start="422:21" pos:end="422:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="423:5" pos:end="426:5"><if pos:start="423:5" pos:end="426:5">if <condition pos:start="423:8" pos:end="423:12">(<expr pos:start="423:9" pos:end="423:11"><operator pos:start="423:9" pos:end="423:9">!</operator><name pos:start="423:10" pos:end="423:11">rv</name></expr>)</condition> <block pos:start="423:14" pos:end="426:5">{<block_content pos:start="424:9" pos:end="425:37">
        <expr_stmt pos:start="424:9" pos:end="424:36"><expr pos:start="424:9" pos:end="424:35"><call pos:start="424:9" pos:end="424:35"><name pos:start="424:9" pos:end="424:27">ERR_print_errors_fp</name><argument_list pos:start="424:28" pos:end="424:35">(<argument pos:start="424:29" pos:end="424:34"><expr pos:start="424:29" pos:end="424:34"><name pos:start="424:29" pos:end="424:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="425:9" pos:end="425:37">return <expr pos:start="425:16" pos:end="425:36"><operator pos:start="425:16" pos:end="425:16">(</operator><name pos:start="425:17" pos:end="425:35">EST_ERR_X509_PUBKEY</name><operator pos:start="425:36" pos:end="425:36">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="428:5" pos:end="428:35"><expr pos:start="428:5" pos:end="428:34"><call pos:start="428:5" pos:end="428:34"><name pos:start="428:5" pos:end="428:21">X509_REQ_print_fp</name><argument_list pos:start="428:22" pos:end="428:34">(<argument pos:start="428:23" pos:end="428:28"><expr pos:start="428:23" pos:end="428:28"><name pos:start="428:23" pos:end="428:28">stderr</name></expr></argument>, <argument pos:start="428:31" pos:end="428:33"><expr pos:start="428:31" pos:end="428:33"><name pos:start="428:31" pos:end="428:33">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="430:5" pos:end="430:26">return <expr pos:start="430:12" pos:end="430:25"><operator pos:start="430:12" pos:end="430:12">(</operator><name pos:start="430:13" pos:end="430:24">EST_ERR_NONE</name><operator pos:start="430:25" pos:end="430:25">)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if pos:start="433:1" pos:end="433:5">#<cpp:directive pos:start="433:2" pos:end="433:3">if</cpp:directive> <expr pos:start="433:5" pos:end="433:5"><literal type="number" pos:start="433:5" pos:end="433:5">0</literal></expr></cpp:if>
<comment type="block" pos:start="434:1" pos:end="437:3">/*
 * Sign an X509 certificate request using the digest and the key passed.
 * Returns OpenSSL error code from X509_REQ_sign_ctx();
 */</comment>
static int sign_X509_REQ(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)
{
    int rv;
    EVP_PKEY_CTX *pkctx = NULL;
    EVP_MD_CTX mctx;

    EVP_MD_CTX_init(&amp;mctx);

    if (!EVP_DigestSignInit(&amp;mctx, &amp;pkctx, md, NULL, pkey)) {
        return 0;
    }

    <comment type="block" pos:start="450:5" pos:end="457:7">/*
     * Encode using DER (ASN.1)
     *
     * We have to set the modified flag on the X509_REQ because
     * OpenSSL keeps a cached copy of the DER encoded data in some
     * cases.  Setting this flag tells OpenSSL to run the ASN
     * encoding again rather than using the cached copy.
     */</comment>
    x-&gt;req_info-&gt;enc.modified = 1;
    rv = X509_REQ_sign_ctx(x, &amp;mctx);

    EVP_MD_CTX_cleanup(&amp;mctx);

    return (rv);
}
<cpp:endif pos:start="465:1" pos:end="465:6">#<cpp:directive pos:start="465:2" pos:end="465:6">endif</cpp:directive></cpp:endif>

<comment type="block" pos:start="467:1" pos:end="471:3">/*
 * This test attempts does a simple enroll with the
 * client providing all the required CSR attributes in
 * the CSR. The enroll should succeed.
 */</comment>
<function pos:start="472:1" pos:end="559:1"><type pos:start="472:1" pos:end="472:11"><specifier pos:start="472:1" pos:end="472:6">static</specifier> <name pos:start="472:8" pos:end="472:11">void</name></type> <name pos:start="472:13" pos:end="472:24">us1159_test2</name> <parameter_list pos:start="472:26" pos:end="472:31">(<parameter pos:start="472:27" pos:end="472:30"><decl pos:start="472:27" pos:end="472:30"><type pos:start="472:27" pos:end="472:30"><name pos:start="472:27" pos:end="472:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="473:1" pos:end="559:1">{<block_content pos:start="474:5" pos:end="558:27">
    <decl_stmt pos:start="474:5" pos:end="474:25"><decl pos:start="474:5" pos:end="474:24"><type pos:start="474:5" pos:end="474:14"><name pos:start="474:5" pos:end="474:12">X509_REQ</name> <modifier pos:start="474:14" pos:end="474:14">*</modifier></type><name pos:start="474:15" pos:end="474:17">req</name> <init pos:start="474:19" pos:end="474:24">= <expr pos:start="474:21" pos:end="474:24"><name pos:start="474:21" pos:end="474:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="475:5" pos:end="475:25"><decl pos:start="475:5" pos:end="475:24"><type pos:start="475:5" pos:end="475:14"><name pos:start="475:5" pos:end="475:12">EVP_PKEY</name> <modifier pos:start="475:14" pos:end="475:14">*</modifier></type><name pos:start="475:15" pos:end="475:17">key</name> <init pos:start="475:19" pos:end="475:24">= <expr pos:start="475:21" pos:end="475:24"><name pos:start="475:21" pos:end="475:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="476:5" pos:end="476:22"><decl pos:start="476:5" pos:end="476:21"><type pos:start="476:5" pos:end="476:7"><name pos:start="476:5" pos:end="476:7">int</name></type> <name pos:start="476:9" pos:end="476:17">pkcs7_len</name> <init pos:start="476:19" pos:end="476:21">= <expr pos:start="476:21" pos:end="476:21"><literal type="number" pos:start="476:21" pos:end="476:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="477:5" pos:end="477:35"><decl pos:start="477:5" pos:end="477:34"><type pos:start="477:5" pos:end="477:19"><name pos:start="477:5" pos:end="477:12">unsigned</name> <name pos:start="477:14" pos:end="477:17">char</name> <modifier pos:start="477:19" pos:end="477:19">*</modifier></type><name pos:start="477:20" pos:end="477:27">new_cert</name> <init pos:start="477:29" pos:end="477:34">= <expr pos:start="477:31" pos:end="477:34"><name pos:start="477:31" pos:end="477:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="478:5" pos:end="478:11"><decl pos:start="478:5" pos:end="478:10"><type pos:start="478:5" pos:end="478:7"><name pos:start="478:5" pos:end="478:7">int</name></type> <name pos:start="478:9" pos:end="478:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="479:5" pos:end="479:24"><decl pos:start="479:5" pos:end="479:23"><type pos:start="479:5" pos:end="479:13"><name pos:start="479:5" pos:end="479:11">EST_CTX</name> <modifier pos:start="479:13" pos:end="479:13">*</modifier></type><name pos:start="479:14" pos:end="479:16">ctx</name> <init pos:start="479:18" pos:end="479:23">= <expr pos:start="479:20" pos:end="479:23"><name pos:start="479:20" pos:end="479:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="481:5" pos:end="482:5"><expr pos:start="481:5" pos:end="481:15"><name pos:start="481:5" pos:end="481:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="484:5" pos:end="486:7">/*
     * This sets the full list of attributes on the server
     */</comment>
    <expr_stmt pos:start="487:5" pos:end="487:29"><expr pos:start="487:5" pos:end="487:28"><name pos:start="487:5" pos:end="487:9">attrs</name> <operator pos:start="487:11" pos:end="487:11">=</operator> <name pos:start="487:13" pos:end="487:28">US1159_ATTR_TEST</name></expr>;</expr_stmt>

    <comment type="block" pos:start="489:5" pos:end="491:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="492:5" pos:end="492:49"><expr pos:start="492:5" pos:end="492:48"><name pos:start="492:5" pos:end="492:7">key</name> <operator pos:start="492:9" pos:end="492:9">=</operator> <call pos:start="492:11" pos:end="492:48"><name pos:start="492:11" pos:end="492:33">generate_ec_private_key</name><argument_list pos:start="492:34" pos:end="492:48">(<argument pos:start="492:35" pos:end="492:47"><expr pos:start="492:35" pos:end="492:47"><name pos:start="492:35" pos:end="492:47">NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="493:5" pos:end="493:27"><expr pos:start="493:5" pos:end="493:26"><call pos:start="493:5" pos:end="493:26"><name pos:start="493:5" pos:end="493:13">CU_ASSERT</name><argument_list pos:start="493:14" pos:end="493:26">(<argument pos:start="493:15" pos:end="493:25"><expr pos:start="493:15" pos:end="493:25"><name pos:start="493:15" pos:end="493:17">key</name> <operator pos:start="493:19" pos:end="493:20">!=</operator> <name pos:start="493:22" pos:end="493:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="495:25"><expr pos:start="495:5" pos:end="495:24"><name pos:start="495:5" pos:end="495:7">req</name> <operator pos:start="495:9" pos:end="495:9">=</operator> <call pos:start="495:11" pos:end="495:24"><name pos:start="495:11" pos:end="495:22">X509_REQ_new</name><argument_list pos:start="495:23" pos:end="495:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="496:5" pos:end="496:27"><expr pos:start="496:5" pos:end="496:26"><call pos:start="496:5" pos:end="496:26"><name pos:start="496:5" pos:end="496:13">CU_ASSERT</name><argument_list pos:start="496:14" pos:end="496:26">(<argument pos:start="496:15" pos:end="496:25"><expr pos:start="496:15" pos:end="496:25"><name pos:start="496:15" pos:end="496:17">req</name> <operator pos:start="496:19" pos:end="496:20">!=</operator> <name pos:start="496:22" pos:end="496:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="498:5" pos:end="498:51"><expr pos:start="498:5" pos:end="498:50"><name pos:start="498:5" pos:end="498:6">rv</name> <operator pos:start="498:8" pos:end="498:8">=</operator> <call pos:start="498:10" pos:end="498:50"><name pos:start="498:10" pos:end="498:30">populate_x509_request</name><argument_list pos:start="498:31" pos:end="498:50">(<argument pos:start="498:32" pos:end="498:34"><expr pos:start="498:32" pos:end="498:34"><name pos:start="498:32" pos:end="498:34">req</name></expr></argument>, <argument pos:start="498:37" pos:end="498:39"><expr pos:start="498:37" pos:end="498:39"><name pos:start="498:37" pos:end="498:39">key</name></expr></argument>, <argument pos:start="498:42" pos:end="498:49"><expr pos:start="498:42" pos:end="498:49"><literal type="string" pos:start="498:42" pos:end="498:49">"Test 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="499:5" pos:end="511:0"><expr pos:start="499:5" pos:end="499:33"><call pos:start="499:5" pos:end="499:33"><name pos:start="499:5" pos:end="499:13">CU_ASSERT</name><argument_list pos:start="499:14" pos:end="499:33">(<argument pos:start="499:15" pos:end="499:32"><expr pos:start="499:15" pos:end="499:32"><name pos:start="499:15" pos:end="499:16">rv</name> <operator pos:start="499:18" pos:end="499:19">==</operator> <name pos:start="499:21" pos:end="499:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="501:1" pos:end="501:5">#<cpp:directive pos:start="501:2" pos:end="501:3">if</cpp:directive> <expr pos:start="501:5" pos:end="501:5"><literal type="number" pos:start="501:5" pos:end="501:5">0</literal></expr></cpp:if>
    <comment type="block" pos:start="502:5" pos:end="504:7">/*
     * Sign the request
     */</comment>
    ossl_rv = sign_X509_REQ(req, key, EVP_sha256());
    CU_ASSERT(ossl_rv == 0);
    if (!ossl_rv) {
        ERR_print_errors_fp(stderr);
    }
<cpp:endif pos:start="510:1" pos:end="510:6">#<cpp:directive pos:start="510:2" pos:end="510:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="512:5" pos:end="514:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="515:5" pos:end="515:75"><expr pos:start="515:5" pos:end="515:74"><name pos:start="515:5" pos:end="515:7">ctx</name> <operator pos:start="515:9" pos:end="515:9">=</operator> <call pos:start="515:11" pos:end="515:74"><name pos:start="515:11" pos:end="515:25">est_client_init</name><argument_list pos:start="515:26" pos:end="515:74">(<argument pos:start="515:27" pos:end="515:33"><expr pos:start="515:27" pos:end="515:33"><name pos:start="515:27" pos:end="515:33">cacerts</name></expr></argument>, <argument pos:start="515:36" pos:end="515:46"><expr pos:start="515:36" pos:end="515:46"><name pos:start="515:36" pos:end="515:46">cacerts_len</name></expr></argument>, <argument pos:start="515:49" pos:end="515:67"><expr pos:start="515:49" pos:end="515:67"><name pos:start="515:49" pos:end="515:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="515:70" pos:end="515:73"><expr pos:start="515:70" pos:end="515:73"><name pos:start="515:70" pos:end="515:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="516:5" pos:end="516:27"><expr pos:start="516:5" pos:end="516:26"><call pos:start="516:5" pos:end="516:26"><name pos:start="516:5" pos:end="516:13">CU_ASSERT</name><argument_list pos:start="516:14" pos:end="516:26">(<argument pos:start="516:15" pos:end="516:25"><expr pos:start="516:15" pos:end="516:25"><name pos:start="516:15" pos:end="516:17">ctx</name> <operator pos:start="516:19" pos:end="516:20">!=</operator> <name pos:start="516:22" pos:end="516:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="518:5" pos:end="518:35"><expr pos:start="518:5" pos:end="518:34"><name pos:start="518:5" pos:end="518:6">rv</name> <operator pos:start="518:8" pos:end="518:8">=</operator> <call pos:start="518:10" pos:end="518:34"><name pos:start="518:10" pos:end="518:29">est_client_force_pop</name><argument_list pos:start="518:30" pos:end="518:34">(<argument pos:start="518:31" pos:end="518:33"><expr pos:start="518:31" pos:end="518:33"><name pos:start="518:31" pos:end="518:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="519:5" pos:end="519:34"><expr pos:start="519:5" pos:end="519:33"><call pos:start="519:5" pos:end="519:33"><name pos:start="519:5" pos:end="519:13">CU_ASSERT</name><argument_list pos:start="519:14" pos:end="519:33">(<argument pos:start="519:15" pos:end="519:32"><expr pos:start="519:15" pos:end="519:32"><name pos:start="519:15" pos:end="519:16">rv</name> <operator pos:start="519:18" pos:end="519:19">==</operator> <name pos:start="519:21" pos:end="519:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="521:5" pos:end="523:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="524:5" pos:end="524:70"><expr pos:start="524:5" pos:end="524:69"><name pos:start="524:5" pos:end="524:6">rv</name> <operator pos:start="524:8" pos:end="524:8">=</operator> <call pos:start="524:10" pos:end="524:69"><name pos:start="524:10" pos:end="524:28">est_client_set_auth</name><argument_list pos:start="524:29" pos:end="524:69">(<argument pos:start="524:30" pos:end="524:32"><expr pos:start="524:30" pos:end="524:32"><name pos:start="524:30" pos:end="524:32">ctx</name></expr></argument>, <argument pos:start="524:35" pos:end="524:44"><expr pos:start="524:35" pos:end="524:44"><name pos:start="524:35" pos:end="524:44">US1159_UID</name></expr></argument>, <argument pos:start="524:47" pos:end="524:56"><expr pos:start="524:47" pos:end="524:56"><name pos:start="524:47" pos:end="524:56">US1159_PWD</name></expr></argument>, <argument pos:start="524:59" pos:end="524:62"><expr pos:start="524:59" pos:end="524:62"><name pos:start="524:59" pos:end="524:62">NULL</name></expr></argument>, <argument pos:start="524:65" pos:end="524:68"><expr pos:start="524:65" pos:end="524:68"><name pos:start="524:65" pos:end="524:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="525:5" pos:end="525:34"><expr pos:start="525:5" pos:end="525:33"><call pos:start="525:5" pos:end="525:33"><name pos:start="525:5" pos:end="525:13">CU_ASSERT</name><argument_list pos:start="525:14" pos:end="525:33">(<argument pos:start="525:15" pos:end="525:32"><expr pos:start="525:15" pos:end="525:32"><name pos:start="525:15" pos:end="525:16">rv</name> <operator pos:start="525:18" pos:end="525:19">==</operator> <name pos:start="525:21" pos:end="525:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="527:5" pos:end="529:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="530:5" pos:end="530:75"><expr pos:start="530:5" pos:end="530:74"><call pos:start="530:5" pos:end="530:74"><name pos:start="530:5" pos:end="530:25">est_client_set_server</name><argument_list pos:start="530:26" pos:end="530:74">(<argument pos:start="530:27" pos:end="530:29"><expr pos:start="530:27" pos:end="530:29"><name pos:start="530:27" pos:end="530:29">ctx</name></expr></argument>, <argument pos:start="530:32" pos:end="530:47"><expr pos:start="530:32" pos:end="530:47"><name pos:start="530:32" pos:end="530:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="530:50" pos:end="530:67"><expr pos:start="530:50" pos:end="530:67"><name pos:start="530:50" pos:end="530:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="530:70" pos:end="530:73"><expr pos:start="530:70" pos:end="530:73"><name pos:start="530:70" pos:end="530:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="532:5" pos:end="534:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="535:5" pos:end="535:58"><expr pos:start="535:5" pos:end="535:57"><name pos:start="535:5" pos:end="535:6">rv</name> <operator pos:start="535:8" pos:end="535:8">=</operator> <call pos:start="535:10" pos:end="535:57"><name pos:start="535:10" pos:end="535:30">est_client_enroll_csr</name><argument_list pos:start="535:31" pos:end="535:57">(<argument pos:start="535:32" pos:end="535:34"><expr pos:start="535:32" pos:end="535:34"><name pos:start="535:32" pos:end="535:34">ctx</name></expr></argument>, <argument pos:start="535:37" pos:end="535:39"><expr pos:start="535:37" pos:end="535:39"><name pos:start="535:37" pos:end="535:39">req</name></expr></argument>, <argument pos:start="535:42" pos:end="535:51"><expr pos:start="535:42" pos:end="535:51"><operator pos:start="535:42" pos:end="535:42">&amp;</operator><name pos:start="535:43" pos:end="535:51">pkcs7_len</name></expr></argument>, <argument pos:start="535:54" pos:end="535:56"><expr pos:start="535:54" pos:end="535:56"><name pos:start="535:54" pos:end="535:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="536:5" pos:end="536:34"><expr pos:start="536:5" pos:end="536:33"><call pos:start="536:5" pos:end="536:33"><name pos:start="536:5" pos:end="536:13">CU_ASSERT</name><argument_list pos:start="536:14" pos:end="536:33">(<argument pos:start="536:15" pos:end="536:32"><expr pos:start="536:15" pos:end="536:32"><name pos:start="536:15" pos:end="536:16">rv</name> <operator pos:start="536:18" pos:end="536:19">==</operator> <name pos:start="536:21" pos:end="536:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="538:5" pos:end="540:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="541:5" pos:end="546:5"><if pos:start="541:5" pos:end="546:5">if <condition pos:start="541:8" pos:end="541:27">(<expr pos:start="541:9" pos:end="541:26"><name pos:start="541:9" pos:end="541:10">rv</name> <operator pos:start="541:12" pos:end="541:13">==</operator> <name pos:start="541:15" pos:end="541:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="541:29" pos:end="546:5">{<block_content pos:start="542:9" pos:end="545:38">
        <expr_stmt pos:start="542:9" pos:end="542:37"><expr pos:start="542:9" pos:end="542:36"><name pos:start="542:9" pos:end="542:16">new_cert</name> <operator pos:start="542:18" pos:end="542:18">=</operator> <call pos:start="542:20" pos:end="542:36"><name pos:start="542:20" pos:end="542:25">malloc</name><argument_list pos:start="542:26" pos:end="542:36">(<argument pos:start="542:27" pos:end="542:35"><expr pos:start="542:27" pos:end="542:35"><name pos:start="542:27" pos:end="542:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="543:9" pos:end="543:36"><expr pos:start="543:9" pos:end="543:35"><call pos:start="543:9" pos:end="543:35"><name pos:start="543:9" pos:end="543:17">CU_ASSERT</name><argument_list pos:start="543:18" pos:end="543:35">(<argument pos:start="543:19" pos:end="543:34"><expr pos:start="543:19" pos:end="543:34"><name pos:start="543:19" pos:end="543:26">new_cert</name> <operator pos:start="543:28" pos:end="543:29">!=</operator> <name pos:start="543:31" pos:end="543:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="544:9" pos:end="544:58"><expr pos:start="544:9" pos:end="544:57"><name pos:start="544:9" pos:end="544:10">rv</name> <operator pos:start="544:12" pos:end="544:12">=</operator> <call pos:start="544:14" pos:end="544:57"><name pos:start="544:14" pos:end="544:42">est_client_copy_enrolled_cert</name><argument_list pos:start="544:43" pos:end="544:57">(<argument pos:start="544:44" pos:end="544:46"><expr pos:start="544:44" pos:end="544:46"><name pos:start="544:44" pos:end="544:46">ctx</name></expr></argument>, <argument pos:start="544:49" pos:end="544:56"><expr pos:start="544:49" pos:end="544:56"><name pos:start="544:49" pos:end="544:56">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="545:9" pos:end="545:38"><expr pos:start="545:9" pos:end="545:37"><call pos:start="545:9" pos:end="545:37"><name pos:start="545:9" pos:end="545:17">CU_ASSERT</name><argument_list pos:start="545:18" pos:end="545:37">(<argument pos:start="545:19" pos:end="545:36"><expr pos:start="545:19" pos:end="545:36"><name pos:start="545:19" pos:end="545:20">rv</name> <operator pos:start="545:22" pos:end="545:23">==</operator> <name pos:start="545:25" pos:end="545:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="548:5" pos:end="550:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="551:5" pos:end="552:23"><if pos:start="551:5" pos:end="552:23">if <condition pos:start="551:8" pos:end="551:17">(<expr pos:start="551:9" pos:end="551:16"><name pos:start="551:9" pos:end="551:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="552:9" pos:end="552:23"><block_content pos:start="552:9" pos:end="552:23">
        <expr_stmt pos:start="552:9" pos:end="552:23"><expr pos:start="552:9" pos:end="552:22"><call pos:start="552:9" pos:end="552:22"><name pos:start="552:9" pos:end="552:12">free</name><argument_list pos:start="552:13" pos:end="552:22">(<argument pos:start="552:14" pos:end="552:21"><expr pos:start="552:14" pos:end="552:21"><name pos:start="552:14" pos:end="552:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="553:5" pos:end="554:25"><if pos:start="553:5" pos:end="554:25">if <condition pos:start="553:8" pos:end="553:12">(<expr pos:start="553:9" pos:end="553:11"><name pos:start="553:9" pos:end="553:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="554:9" pos:end="554:25"><block_content pos:start="554:9" pos:end="554:25">
        <expr_stmt pos:start="554:9" pos:end="554:25"><expr pos:start="554:9" pos:end="554:24"><call pos:start="554:9" pos:end="554:24"><name pos:start="554:9" pos:end="554:19">est_destroy</name><argument_list pos:start="554:20" pos:end="554:24">(<argument pos:start="554:21" pos:end="554:23"><expr pos:start="554:21" pos:end="554:23"><name pos:start="554:21" pos:end="554:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="555:5" pos:end="556:27"><if pos:start="555:5" pos:end="556:27">if <condition pos:start="555:8" pos:end="555:12">(<expr pos:start="555:9" pos:end="555:11"><name pos:start="555:9" pos:end="555:11">req</name></expr>)</condition><block type="pseudo" pos:start="556:9" pos:end="556:27"><block_content pos:start="556:9" pos:end="556:27">
        <expr_stmt pos:start="556:9" pos:end="556:27"><expr pos:start="556:9" pos:end="556:26"><call pos:start="556:9" pos:end="556:26"><name pos:start="556:9" pos:end="556:21">X509_REQ_free</name><argument_list pos:start="556:22" pos:end="556:26">(<argument pos:start="556:23" pos:end="556:25"><expr pos:start="556:23" pos:end="556:25"><name pos:start="556:23" pos:end="556:25">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="557:5" pos:end="558:27"><if pos:start="557:5" pos:end="558:27">if <condition pos:start="557:8" pos:end="557:12">(<expr pos:start="557:9" pos:end="557:11"><name pos:start="557:9" pos:end="557:11">key</name></expr>)</condition><block type="pseudo" pos:start="558:9" pos:end="558:27"><block_content pos:start="558:9" pos:end="558:27">
        <expr_stmt pos:start="558:9" pos:end="558:27"><expr pos:start="558:9" pos:end="558:26"><call pos:start="558:9" pos:end="558:26"><name pos:start="558:9" pos:end="558:21">EVP_PKEY_free</name><argument_list pos:start="558:22" pos:end="558:26">(<argument pos:start="558:23" pos:end="558:25"><expr pos:start="558:23" pos:end="558:25"><name pos:start="558:23" pos:end="558:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="561:1" pos:end="567:3">/*
 * This test attempts does a simple enroll with the
 * client providing all the required CSR attributes in
 * the CSR except that the 521-bit curve is used. The enroll
 * should fail since the server CSR attrs specify to
 * use the 384-bit curve.
 */</comment>
<function pos:start="568:1" pos:end="631:1"><type pos:start="568:1" pos:end="568:11"><specifier pos:start="568:1" pos:end="568:6">static</specifier> <name pos:start="568:8" pos:end="568:11">void</name></type> <name pos:start="568:13" pos:end="568:24">us1159_test3</name> <parameter_list pos:start="568:26" pos:end="568:31">(<parameter pos:start="568:27" pos:end="568:30"><decl pos:start="568:27" pos:end="568:30"><type pos:start="568:27" pos:end="568:30"><name pos:start="568:27" pos:end="568:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="569:1" pos:end="631:1">{<block_content pos:start="570:5" pos:end="630:27">
    <decl_stmt pos:start="570:5" pos:end="570:25"><decl pos:start="570:5" pos:end="570:24"><type pos:start="570:5" pos:end="570:14"><name pos:start="570:5" pos:end="570:12">X509_REQ</name> <modifier pos:start="570:14" pos:end="570:14">*</modifier></type><name pos:start="570:15" pos:end="570:17">req</name> <init pos:start="570:19" pos:end="570:24">= <expr pos:start="570:21" pos:end="570:24"><name pos:start="570:21" pos:end="570:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="571:5" pos:end="571:25"><decl pos:start="571:5" pos:end="571:24"><type pos:start="571:5" pos:end="571:14"><name pos:start="571:5" pos:end="571:12">EVP_PKEY</name> <modifier pos:start="571:14" pos:end="571:14">*</modifier></type><name pos:start="571:15" pos:end="571:17">key</name> <init pos:start="571:19" pos:end="571:24">= <expr pos:start="571:21" pos:end="571:24"><name pos:start="571:21" pos:end="571:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="572:5" pos:end="572:22"><decl pos:start="572:5" pos:end="572:21"><type pos:start="572:5" pos:end="572:7"><name pos:start="572:5" pos:end="572:7">int</name></type> <name pos:start="572:9" pos:end="572:17">pkcs7_len</name> <init pos:start="572:19" pos:end="572:21">= <expr pos:start="572:21" pos:end="572:21"><literal type="number" pos:start="572:21" pos:end="572:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="573:5" pos:end="573:11"><decl pos:start="573:5" pos:end="573:10"><type pos:start="573:5" pos:end="573:7"><name pos:start="573:5" pos:end="573:7">int</name></type> <name pos:start="573:9" pos:end="573:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="574:5" pos:end="574:24"><decl pos:start="574:5" pos:end="574:23"><type pos:start="574:5" pos:end="574:13"><name pos:start="574:5" pos:end="574:11">EST_CTX</name> <modifier pos:start="574:13" pos:end="574:13">*</modifier></type><name pos:start="574:14" pos:end="574:16">ctx</name> <init pos:start="574:18" pos:end="574:23">= <expr pos:start="574:20" pos:end="574:23"><name pos:start="574:20" pos:end="574:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="576:5" pos:end="577:5"><expr pos:start="576:5" pos:end="576:15"><name pos:start="576:5" pos:end="576:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="579:5" pos:end="581:7">/*
     * This sets the full list of attributes on the server
     */</comment>
    <expr_stmt pos:start="582:5" pos:end="582:29"><expr pos:start="582:5" pos:end="582:28"><name pos:start="582:5" pos:end="582:9">attrs</name> <operator pos:start="582:11" pos:end="582:11">=</operator> <name pos:start="582:13" pos:end="582:28">US1159_ATTR_TEST</name></expr>;</expr_stmt>

    <comment type="block" pos:start="584:5" pos:end="586:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="587:5" pos:end="587:49"><expr pos:start="587:5" pos:end="587:48"><name pos:start="587:5" pos:end="587:7">key</name> <operator pos:start="587:9" pos:end="587:9">=</operator> <call pos:start="587:11" pos:end="587:48"><name pos:start="587:11" pos:end="587:33">generate_ec_private_key</name><argument_list pos:start="587:34" pos:end="587:48">(<argument pos:start="587:35" pos:end="587:47"><expr pos:start="587:35" pos:end="587:47"><name pos:start="587:35" pos:end="587:47">NID_secp521r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="588:5" pos:end="588:27"><expr pos:start="588:5" pos:end="588:26"><call pos:start="588:5" pos:end="588:26"><name pos:start="588:5" pos:end="588:13">CU_ASSERT</name><argument_list pos:start="588:14" pos:end="588:26">(<argument pos:start="588:15" pos:end="588:25"><expr pos:start="588:15" pos:end="588:25"><name pos:start="588:15" pos:end="588:17">key</name> <operator pos:start="588:19" pos:end="588:20">!=</operator> <name pos:start="588:22" pos:end="588:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="590:5" pos:end="590:25"><expr pos:start="590:5" pos:end="590:24"><name pos:start="590:5" pos:end="590:7">req</name> <operator pos:start="590:9" pos:end="590:9">=</operator> <call pos:start="590:11" pos:end="590:24"><name pos:start="590:11" pos:end="590:22">X509_REQ_new</name><argument_list pos:start="590:23" pos:end="590:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="591:5" pos:end="591:27"><expr pos:start="591:5" pos:end="591:26"><call pos:start="591:5" pos:end="591:26"><name pos:start="591:5" pos:end="591:13">CU_ASSERT</name><argument_list pos:start="591:14" pos:end="591:26">(<argument pos:start="591:15" pos:end="591:25"><expr pos:start="591:15" pos:end="591:25"><name pos:start="591:15" pos:end="591:17">req</name> <operator pos:start="591:19" pos:end="591:20">!=</operator> <name pos:start="591:22" pos:end="591:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="593:5" pos:end="593:51"><expr pos:start="593:5" pos:end="593:50"><name pos:start="593:5" pos:end="593:6">rv</name> <operator pos:start="593:8" pos:end="593:8">=</operator> <call pos:start="593:10" pos:end="593:50"><name pos:start="593:10" pos:end="593:30">populate_x509_request</name><argument_list pos:start="593:31" pos:end="593:50">(<argument pos:start="593:32" pos:end="593:34"><expr pos:start="593:32" pos:end="593:34"><name pos:start="593:32" pos:end="593:34">req</name></expr></argument>, <argument pos:start="593:37" pos:end="593:39"><expr pos:start="593:37" pos:end="593:39"><name pos:start="593:37" pos:end="593:39">key</name></expr></argument>, <argument pos:start="593:42" pos:end="593:49"><expr pos:start="593:42" pos:end="593:49"><literal type="string" pos:start="593:42" pos:end="593:49">"Test 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="594:5" pos:end="594:34"><expr pos:start="594:5" pos:end="594:33"><call pos:start="594:5" pos:end="594:33"><name pos:start="594:5" pos:end="594:13">CU_ASSERT</name><argument_list pos:start="594:14" pos:end="594:33">(<argument pos:start="594:15" pos:end="594:32"><expr pos:start="594:15" pos:end="594:32"><name pos:start="594:15" pos:end="594:16">rv</name> <operator pos:start="594:18" pos:end="594:19">==</operator> <name pos:start="594:21" pos:end="594:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="596:5" pos:end="598:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="599:5" pos:end="599:75"><expr pos:start="599:5" pos:end="599:74"><name pos:start="599:5" pos:end="599:7">ctx</name> <operator pos:start="599:9" pos:end="599:9">=</operator> <call pos:start="599:11" pos:end="599:74"><name pos:start="599:11" pos:end="599:25">est_client_init</name><argument_list pos:start="599:26" pos:end="599:74">(<argument pos:start="599:27" pos:end="599:33"><expr pos:start="599:27" pos:end="599:33"><name pos:start="599:27" pos:end="599:33">cacerts</name></expr></argument>, <argument pos:start="599:36" pos:end="599:46"><expr pos:start="599:36" pos:end="599:46"><name pos:start="599:36" pos:end="599:46">cacerts_len</name></expr></argument>, <argument pos:start="599:49" pos:end="599:67"><expr pos:start="599:49" pos:end="599:67"><name pos:start="599:49" pos:end="599:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="599:70" pos:end="599:73"><expr pos:start="599:70" pos:end="599:73"><name pos:start="599:70" pos:end="599:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="600:5" pos:end="600:27"><expr pos:start="600:5" pos:end="600:26"><call pos:start="600:5" pos:end="600:26"><name pos:start="600:5" pos:end="600:13">CU_ASSERT</name><argument_list pos:start="600:14" pos:end="600:26">(<argument pos:start="600:15" pos:end="600:25"><expr pos:start="600:15" pos:end="600:25"><name pos:start="600:15" pos:end="600:17">ctx</name> <operator pos:start="600:19" pos:end="600:20">!=</operator> <name pos:start="600:22" pos:end="600:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="602:5" pos:end="602:35"><expr pos:start="602:5" pos:end="602:34"><name pos:start="602:5" pos:end="602:6">rv</name> <operator pos:start="602:8" pos:end="602:8">=</operator> <call pos:start="602:10" pos:end="602:34"><name pos:start="602:10" pos:end="602:29">est_client_force_pop</name><argument_list pos:start="602:30" pos:end="602:34">(<argument pos:start="602:31" pos:end="602:33"><expr pos:start="602:31" pos:end="602:33"><name pos:start="602:31" pos:end="602:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="603:5" pos:end="603:34"><expr pos:start="603:5" pos:end="603:33"><call pos:start="603:5" pos:end="603:33"><name pos:start="603:5" pos:end="603:13">CU_ASSERT</name><argument_list pos:start="603:14" pos:end="603:33">(<argument pos:start="603:15" pos:end="603:32"><expr pos:start="603:15" pos:end="603:32"><name pos:start="603:15" pos:end="603:16">rv</name> <operator pos:start="603:18" pos:end="603:19">==</operator> <name pos:start="603:21" pos:end="603:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="605:5" pos:end="607:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="608:5" pos:end="608:70"><expr pos:start="608:5" pos:end="608:69"><name pos:start="608:5" pos:end="608:6">rv</name> <operator pos:start="608:8" pos:end="608:8">=</operator> <call pos:start="608:10" pos:end="608:69"><name pos:start="608:10" pos:end="608:28">est_client_set_auth</name><argument_list pos:start="608:29" pos:end="608:69">(<argument pos:start="608:30" pos:end="608:32"><expr pos:start="608:30" pos:end="608:32"><name pos:start="608:30" pos:end="608:32">ctx</name></expr></argument>, <argument pos:start="608:35" pos:end="608:44"><expr pos:start="608:35" pos:end="608:44"><name pos:start="608:35" pos:end="608:44">US1159_UID</name></expr></argument>, <argument pos:start="608:47" pos:end="608:56"><expr pos:start="608:47" pos:end="608:56"><name pos:start="608:47" pos:end="608:56">US1159_PWD</name></expr></argument>, <argument pos:start="608:59" pos:end="608:62"><expr pos:start="608:59" pos:end="608:62"><name pos:start="608:59" pos:end="608:62">NULL</name></expr></argument>, <argument pos:start="608:65" pos:end="608:68"><expr pos:start="608:65" pos:end="608:68"><name pos:start="608:65" pos:end="608:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="609:5" pos:end="609:34"><expr pos:start="609:5" pos:end="609:33"><call pos:start="609:5" pos:end="609:33"><name pos:start="609:5" pos:end="609:13">CU_ASSERT</name><argument_list pos:start="609:14" pos:end="609:33">(<argument pos:start="609:15" pos:end="609:32"><expr pos:start="609:15" pos:end="609:32"><name pos:start="609:15" pos:end="609:16">rv</name> <operator pos:start="609:18" pos:end="609:19">==</operator> <name pos:start="609:21" pos:end="609:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="611:5" pos:end="613:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="614:5" pos:end="614:75"><expr pos:start="614:5" pos:end="614:74"><call pos:start="614:5" pos:end="614:74"><name pos:start="614:5" pos:end="614:25">est_client_set_server</name><argument_list pos:start="614:26" pos:end="614:74">(<argument pos:start="614:27" pos:end="614:29"><expr pos:start="614:27" pos:end="614:29"><name pos:start="614:27" pos:end="614:29">ctx</name></expr></argument>, <argument pos:start="614:32" pos:end="614:47"><expr pos:start="614:32" pos:end="614:47"><name pos:start="614:32" pos:end="614:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="614:50" pos:end="614:67"><expr pos:start="614:50" pos:end="614:67"><name pos:start="614:50" pos:end="614:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="614:70" pos:end="614:73"><expr pos:start="614:70" pos:end="614:73"><name pos:start="614:70" pos:end="614:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="616:5" pos:end="618:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="619:5" pos:end="619:58"><expr pos:start="619:5" pos:end="619:57"><name pos:start="619:5" pos:end="619:6">rv</name> <operator pos:start="619:8" pos:end="619:8">=</operator> <call pos:start="619:10" pos:end="619:57"><name pos:start="619:10" pos:end="619:30">est_client_enroll_csr</name><argument_list pos:start="619:31" pos:end="619:57">(<argument pos:start="619:32" pos:end="619:34"><expr pos:start="619:32" pos:end="619:34"><name pos:start="619:32" pos:end="619:34">ctx</name></expr></argument>, <argument pos:start="619:37" pos:end="619:39"><expr pos:start="619:37" pos:end="619:39"><name pos:start="619:37" pos:end="619:39">req</name></expr></argument>, <argument pos:start="619:42" pos:end="619:51"><expr pos:start="619:42" pos:end="619:51"><operator pos:start="619:42" pos:end="619:42">&amp;</operator><name pos:start="619:43" pos:end="619:51">pkcs7_len</name></expr></argument>, <argument pos:start="619:54" pos:end="619:56"><expr pos:start="619:54" pos:end="619:56"><name pos:start="619:54" pos:end="619:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="620:5" pos:end="620:42"><expr pos:start="620:5" pos:end="620:41"><call pos:start="620:5" pos:end="620:41"><name pos:start="620:5" pos:end="620:13">CU_ASSERT</name><argument_list pos:start="620:14" pos:end="620:41">(<argument pos:start="620:15" pos:end="620:40"><expr pos:start="620:15" pos:end="620:40"><name pos:start="620:15" pos:end="620:16">rv</name> <operator pos:start="620:18" pos:end="620:19">==</operator> <name pos:start="620:21" pos:end="620:40">EST_ERR_HTTP_BAD_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="622:5" pos:end="624:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="625:5" pos:end="626:25"><if pos:start="625:5" pos:end="626:25">if <condition pos:start="625:8" pos:end="625:12">(<expr pos:start="625:9" pos:end="625:11"><name pos:start="625:9" pos:end="625:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="626:9" pos:end="626:25"><block_content pos:start="626:9" pos:end="626:25">
        <expr_stmt pos:start="626:9" pos:end="626:25"><expr pos:start="626:9" pos:end="626:24"><call pos:start="626:9" pos:end="626:24"><name pos:start="626:9" pos:end="626:19">est_destroy</name><argument_list pos:start="626:20" pos:end="626:24">(<argument pos:start="626:21" pos:end="626:23"><expr pos:start="626:21" pos:end="626:23"><name pos:start="626:21" pos:end="626:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="627:5" pos:end="628:27"><if pos:start="627:5" pos:end="628:27">if <condition pos:start="627:8" pos:end="627:12">(<expr pos:start="627:9" pos:end="627:11"><name pos:start="627:9" pos:end="627:11">req</name></expr>)</condition><block type="pseudo" pos:start="628:9" pos:end="628:27"><block_content pos:start="628:9" pos:end="628:27">
        <expr_stmt pos:start="628:9" pos:end="628:27"><expr pos:start="628:9" pos:end="628:26"><call pos:start="628:9" pos:end="628:26"><name pos:start="628:9" pos:end="628:21">X509_REQ_free</name><argument_list pos:start="628:22" pos:end="628:26">(<argument pos:start="628:23" pos:end="628:25"><expr pos:start="628:23" pos:end="628:25"><name pos:start="628:23" pos:end="628:25">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="629:5" pos:end="630:27"><if pos:start="629:5" pos:end="630:27">if <condition pos:start="629:8" pos:end="629:12">(<expr pos:start="629:9" pos:end="629:11"><name pos:start="629:9" pos:end="629:11">key</name></expr>)</condition><block type="pseudo" pos:start="630:9" pos:end="630:27"><block_content pos:start="630:9" pos:end="630:27">
        <expr_stmt pos:start="630:9" pos:end="630:27"><expr pos:start="630:9" pos:end="630:26"><call pos:start="630:9" pos:end="630:26"><name pos:start="630:9" pos:end="630:21">EVP_PKEY_free</name><argument_list pos:start="630:22" pos:end="630:26">(<argument pos:start="630:23" pos:end="630:25"><expr pos:start="630:23" pos:end="630:25"><name pos:start="630:23" pos:end="630:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="633:1" pos:end="639:3">/*
 * This test attempts does a simple enroll with the
 * client providing all the required CSR attributes in
 * the CSR except that SHA-384 is used for the
 * signature. The enroll should fail since the server
 * CSR attrs require SHA-256.
 */</comment>
<function pos:start="640:1" pos:end="709:1"><type pos:start="640:1" pos:end="640:11"><specifier pos:start="640:1" pos:end="640:6">static</specifier> <name pos:start="640:8" pos:end="640:11">void</name></type> <name pos:start="640:13" pos:end="640:24">us1159_test4</name> <parameter_list pos:start="640:26" pos:end="640:31">(<parameter pos:start="640:27" pos:end="640:30"><decl pos:start="640:27" pos:end="640:30"><type pos:start="640:27" pos:end="640:30"><name pos:start="640:27" pos:end="640:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="641:1" pos:end="709:1">{<block_content pos:start="642:5" pos:end="708:27">
    <decl_stmt pos:start="642:5" pos:end="642:25"><decl pos:start="642:5" pos:end="642:24"><type pos:start="642:5" pos:end="642:14"><name pos:start="642:5" pos:end="642:12">X509_REQ</name> <modifier pos:start="642:14" pos:end="642:14">*</modifier></type><name pos:start="642:15" pos:end="642:17">req</name> <init pos:start="642:19" pos:end="642:24">= <expr pos:start="642:21" pos:end="642:24"><name pos:start="642:21" pos:end="642:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="643:5" pos:end="643:25"><decl pos:start="643:5" pos:end="643:24"><type pos:start="643:5" pos:end="643:14"><name pos:start="643:5" pos:end="643:12">EVP_PKEY</name> <modifier pos:start="643:14" pos:end="643:14">*</modifier></type><name pos:start="643:15" pos:end="643:17">key</name> <init pos:start="643:19" pos:end="643:24">= <expr pos:start="643:21" pos:end="643:24"><name pos:start="643:21" pos:end="643:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="644:5" pos:end="644:22"><decl pos:start="644:5" pos:end="644:21"><type pos:start="644:5" pos:end="644:7"><name pos:start="644:5" pos:end="644:7">int</name></type> <name pos:start="644:9" pos:end="644:17">pkcs7_len</name> <init pos:start="644:19" pos:end="644:21">= <expr pos:start="644:21" pos:end="644:21"><literal type="number" pos:start="644:21" pos:end="644:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="645:5" pos:end="645:11"><decl pos:start="645:5" pos:end="645:10"><type pos:start="645:5" pos:end="645:7"><name pos:start="645:5" pos:end="645:7">int</name></type> <name pos:start="645:9" pos:end="645:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="646:5" pos:end="646:24"><decl pos:start="646:5" pos:end="646:23"><type pos:start="646:5" pos:end="646:13"><name pos:start="646:5" pos:end="646:11">EST_CTX</name> <modifier pos:start="646:13" pos:end="646:13">*</modifier></type><name pos:start="646:14" pos:end="646:16">ctx</name> <init pos:start="646:18" pos:end="646:23">= <expr pos:start="646:20" pos:end="646:23"><name pos:start="646:20" pos:end="646:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="648:5" pos:end="649:5"><expr pos:start="648:5" pos:end="648:15"><name pos:start="648:5" pos:end="648:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="651:5" pos:end="653:7">/*
     * This sets the full list of attributes on the server
     */</comment>
    <expr_stmt pos:start="654:5" pos:end="654:29"><expr pos:start="654:5" pos:end="654:28"><name pos:start="654:5" pos:end="654:9">attrs</name> <operator pos:start="654:11" pos:end="654:11">=</operator> <name pos:start="654:13" pos:end="654:28">US1159_ATTR_TEST</name></expr>;</expr_stmt>

    <comment type="block" pos:start="656:5" pos:end="658:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="659:5" pos:end="659:49"><expr pos:start="659:5" pos:end="659:48"><name pos:start="659:5" pos:end="659:7">key</name> <operator pos:start="659:9" pos:end="659:9">=</operator> <call pos:start="659:11" pos:end="659:48"><name pos:start="659:11" pos:end="659:33">generate_ec_private_key</name><argument_list pos:start="659:34" pos:end="659:48">(<argument pos:start="659:35" pos:end="659:47"><expr pos:start="659:35" pos:end="659:47"><name pos:start="659:35" pos:end="659:47">NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="660:5" pos:end="660:27"><expr pos:start="660:5" pos:end="660:26"><call pos:start="660:5" pos:end="660:26"><name pos:start="660:5" pos:end="660:13">CU_ASSERT</name><argument_list pos:start="660:14" pos:end="660:26">(<argument pos:start="660:15" pos:end="660:25"><expr pos:start="660:15" pos:end="660:25"><name pos:start="660:15" pos:end="660:17">key</name> <operator pos:start="660:19" pos:end="660:20">!=</operator> <name pos:start="660:22" pos:end="660:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="662:5" pos:end="662:25"><expr pos:start="662:5" pos:end="662:24"><name pos:start="662:5" pos:end="662:7">req</name> <operator pos:start="662:9" pos:end="662:9">=</operator> <call pos:start="662:11" pos:end="662:24"><name pos:start="662:11" pos:end="662:22">X509_REQ_new</name><argument_list pos:start="662:23" pos:end="662:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="663:5" pos:end="663:27"><expr pos:start="663:5" pos:end="663:26"><call pos:start="663:5" pos:end="663:26"><name pos:start="663:5" pos:end="663:13">CU_ASSERT</name><argument_list pos:start="663:14" pos:end="663:26">(<argument pos:start="663:15" pos:end="663:25"><expr pos:start="663:15" pos:end="663:25"><name pos:start="663:15" pos:end="663:17">req</name> <operator pos:start="663:19" pos:end="663:20">!=</operator> <name pos:start="663:22" pos:end="663:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="665:5" pos:end="665:51"><expr pos:start="665:5" pos:end="665:50"><name pos:start="665:5" pos:end="665:6">rv</name> <operator pos:start="665:8" pos:end="665:8">=</operator> <call pos:start="665:10" pos:end="665:50"><name pos:start="665:10" pos:end="665:30">populate_x509_request</name><argument_list pos:start="665:31" pos:end="665:50">(<argument pos:start="665:32" pos:end="665:34"><expr pos:start="665:32" pos:end="665:34"><name pos:start="665:32" pos:end="665:34">req</name></expr></argument>, <argument pos:start="665:37" pos:end="665:39"><expr pos:start="665:37" pos:end="665:39"><name pos:start="665:37" pos:end="665:39">key</name></expr></argument>, <argument pos:start="665:42" pos:end="665:49"><expr pos:start="665:42" pos:end="665:49"><literal type="string" pos:start="665:42" pos:end="665:49">"Test 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="666:5" pos:end="666:34"><expr pos:start="666:5" pos:end="666:33"><call pos:start="666:5" pos:end="666:33"><name pos:start="666:5" pos:end="666:13">CU_ASSERT</name><argument_list pos:start="666:14" pos:end="666:33">(<argument pos:start="666:15" pos:end="666:32"><expr pos:start="666:15" pos:end="666:32"><name pos:start="666:15" pos:end="666:16">rv</name> <operator pos:start="666:18" pos:end="666:19">==</operator> <name pos:start="666:21" pos:end="666:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="668:5" pos:end="670:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="671:5" pos:end="671:75"><expr pos:start="671:5" pos:end="671:74"><name pos:start="671:5" pos:end="671:7">ctx</name> <operator pos:start="671:9" pos:end="671:9">=</operator> <call pos:start="671:11" pos:end="671:74"><name pos:start="671:11" pos:end="671:25">est_client_init</name><argument_list pos:start="671:26" pos:end="671:74">(<argument pos:start="671:27" pos:end="671:33"><expr pos:start="671:27" pos:end="671:33"><name pos:start="671:27" pos:end="671:33">cacerts</name></expr></argument>, <argument pos:start="671:36" pos:end="671:46"><expr pos:start="671:36" pos:end="671:46"><name pos:start="671:36" pos:end="671:46">cacerts_len</name></expr></argument>, <argument pos:start="671:49" pos:end="671:67"><expr pos:start="671:49" pos:end="671:67"><name pos:start="671:49" pos:end="671:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="671:70" pos:end="671:73"><expr pos:start="671:70" pos:end="671:73"><name pos:start="671:70" pos:end="671:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="672:5" pos:end="672:27"><expr pos:start="672:5" pos:end="672:26"><call pos:start="672:5" pos:end="672:26"><name pos:start="672:5" pos:end="672:13">CU_ASSERT</name><argument_list pos:start="672:14" pos:end="672:26">(<argument pos:start="672:15" pos:end="672:25"><expr pos:start="672:15" pos:end="672:25"><name pos:start="672:15" pos:end="672:17">ctx</name> <operator pos:start="672:19" pos:end="672:20">!=</operator> <name pos:start="672:22" pos:end="672:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="674:5" pos:end="674:35"><expr pos:start="674:5" pos:end="674:34"><name pos:start="674:5" pos:end="674:6">rv</name> <operator pos:start="674:8" pos:end="674:8">=</operator> <call pos:start="674:10" pos:end="674:34"><name pos:start="674:10" pos:end="674:29">est_client_force_pop</name><argument_list pos:start="674:30" pos:end="674:34">(<argument pos:start="674:31" pos:end="674:33"><expr pos:start="674:31" pos:end="674:33"><name pos:start="674:31" pos:end="674:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="675:5" pos:end="675:34"><expr pos:start="675:5" pos:end="675:33"><call pos:start="675:5" pos:end="675:33"><name pos:start="675:5" pos:end="675:13">CU_ASSERT</name><argument_list pos:start="675:14" pos:end="675:33">(<argument pos:start="675:15" pos:end="675:32"><expr pos:start="675:15" pos:end="675:32"><name pos:start="675:15" pos:end="675:16">rv</name> <operator pos:start="675:18" pos:end="675:19">==</operator> <name pos:start="675:21" pos:end="675:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="677:5" pos:end="679:7">/*
     * Change to SHA-384 for the signature
     */</comment>
    <expr_stmt pos:start="680:5" pos:end="680:53"><expr pos:start="680:5" pos:end="680:52"><name pos:start="680:5" pos:end="680:6">rv</name> <operator pos:start="680:8" pos:end="680:8">=</operator> <call pos:start="680:10" pos:end="680:52"><name pos:start="680:10" pos:end="680:35">est_client_set_sign_digest</name><argument_list pos:start="680:36" pos:end="680:52">(<argument pos:start="680:37" pos:end="680:39"><expr pos:start="680:37" pos:end="680:39"><name pos:start="680:37" pos:end="680:39">ctx</name></expr></argument>, <argument pos:start="680:42" pos:end="680:51"><expr pos:start="680:42" pos:end="680:51"><name pos:start="680:42" pos:end="680:51">NID_sha384</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="681:5" pos:end="681:34"><expr pos:start="681:5" pos:end="681:33"><call pos:start="681:5" pos:end="681:33"><name pos:start="681:5" pos:end="681:13">CU_ASSERT</name><argument_list pos:start="681:14" pos:end="681:33">(<argument pos:start="681:15" pos:end="681:32"><expr pos:start="681:15" pos:end="681:32"><name pos:start="681:15" pos:end="681:16">rv</name> <operator pos:start="681:18" pos:end="681:19">==</operator> <name pos:start="681:21" pos:end="681:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="683:5" pos:end="685:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="686:5" pos:end="686:70"><expr pos:start="686:5" pos:end="686:69"><name pos:start="686:5" pos:end="686:6">rv</name> <operator pos:start="686:8" pos:end="686:8">=</operator> <call pos:start="686:10" pos:end="686:69"><name pos:start="686:10" pos:end="686:28">est_client_set_auth</name><argument_list pos:start="686:29" pos:end="686:69">(<argument pos:start="686:30" pos:end="686:32"><expr pos:start="686:30" pos:end="686:32"><name pos:start="686:30" pos:end="686:32">ctx</name></expr></argument>, <argument pos:start="686:35" pos:end="686:44"><expr pos:start="686:35" pos:end="686:44"><name pos:start="686:35" pos:end="686:44">US1159_UID</name></expr></argument>, <argument pos:start="686:47" pos:end="686:56"><expr pos:start="686:47" pos:end="686:56"><name pos:start="686:47" pos:end="686:56">US1159_PWD</name></expr></argument>, <argument pos:start="686:59" pos:end="686:62"><expr pos:start="686:59" pos:end="686:62"><name pos:start="686:59" pos:end="686:62">NULL</name></expr></argument>, <argument pos:start="686:65" pos:end="686:68"><expr pos:start="686:65" pos:end="686:68"><name pos:start="686:65" pos:end="686:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="687:5" pos:end="687:34"><expr pos:start="687:5" pos:end="687:33"><call pos:start="687:5" pos:end="687:33"><name pos:start="687:5" pos:end="687:13">CU_ASSERT</name><argument_list pos:start="687:14" pos:end="687:33">(<argument pos:start="687:15" pos:end="687:32"><expr pos:start="687:15" pos:end="687:32"><name pos:start="687:15" pos:end="687:16">rv</name> <operator pos:start="687:18" pos:end="687:19">==</operator> <name pos:start="687:21" pos:end="687:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="689:5" pos:end="691:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="692:5" pos:end="692:75"><expr pos:start="692:5" pos:end="692:74"><call pos:start="692:5" pos:end="692:74"><name pos:start="692:5" pos:end="692:25">est_client_set_server</name><argument_list pos:start="692:26" pos:end="692:74">(<argument pos:start="692:27" pos:end="692:29"><expr pos:start="692:27" pos:end="692:29"><name pos:start="692:27" pos:end="692:29">ctx</name></expr></argument>, <argument pos:start="692:32" pos:end="692:47"><expr pos:start="692:32" pos:end="692:47"><name pos:start="692:32" pos:end="692:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="692:50" pos:end="692:67"><expr pos:start="692:50" pos:end="692:67"><name pos:start="692:50" pos:end="692:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="692:70" pos:end="692:73"><expr pos:start="692:70" pos:end="692:73"><name pos:start="692:70" pos:end="692:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="694:5" pos:end="696:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="697:5" pos:end="697:58"><expr pos:start="697:5" pos:end="697:57"><name pos:start="697:5" pos:end="697:6">rv</name> <operator pos:start="697:8" pos:end="697:8">=</operator> <call pos:start="697:10" pos:end="697:57"><name pos:start="697:10" pos:end="697:30">est_client_enroll_csr</name><argument_list pos:start="697:31" pos:end="697:57">(<argument pos:start="697:32" pos:end="697:34"><expr pos:start="697:32" pos:end="697:34"><name pos:start="697:32" pos:end="697:34">ctx</name></expr></argument>, <argument pos:start="697:37" pos:end="697:39"><expr pos:start="697:37" pos:end="697:39"><name pos:start="697:37" pos:end="697:39">req</name></expr></argument>, <argument pos:start="697:42" pos:end="697:51"><expr pos:start="697:42" pos:end="697:51"><operator pos:start="697:42" pos:end="697:42">&amp;</operator><name pos:start="697:43" pos:end="697:51">pkcs7_len</name></expr></argument>, <argument pos:start="697:54" pos:end="697:56"><expr pos:start="697:54" pos:end="697:56"><name pos:start="697:54" pos:end="697:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="698:5" pos:end="698:42"><expr pos:start="698:5" pos:end="698:41"><call pos:start="698:5" pos:end="698:41"><name pos:start="698:5" pos:end="698:13">CU_ASSERT</name><argument_list pos:start="698:14" pos:end="698:41">(<argument pos:start="698:15" pos:end="698:40"><expr pos:start="698:15" pos:end="698:40"><name pos:start="698:15" pos:end="698:16">rv</name> <operator pos:start="698:18" pos:end="698:19">==</operator> <name pos:start="698:21" pos:end="698:40">EST_ERR_HTTP_BAD_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="700:5" pos:end="702:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="703:5" pos:end="704:25"><if pos:start="703:5" pos:end="704:25">if <condition pos:start="703:8" pos:end="703:12">(<expr pos:start="703:9" pos:end="703:11"><name pos:start="703:9" pos:end="703:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="704:9" pos:end="704:25"><block_content pos:start="704:9" pos:end="704:25">
        <expr_stmt pos:start="704:9" pos:end="704:25"><expr pos:start="704:9" pos:end="704:24"><call pos:start="704:9" pos:end="704:24"><name pos:start="704:9" pos:end="704:19">est_destroy</name><argument_list pos:start="704:20" pos:end="704:24">(<argument pos:start="704:21" pos:end="704:23"><expr pos:start="704:21" pos:end="704:23"><name pos:start="704:21" pos:end="704:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="705:5" pos:end="706:27"><if pos:start="705:5" pos:end="706:27">if <condition pos:start="705:8" pos:end="705:12">(<expr pos:start="705:9" pos:end="705:11"><name pos:start="705:9" pos:end="705:11">req</name></expr>)</condition><block type="pseudo" pos:start="706:9" pos:end="706:27"><block_content pos:start="706:9" pos:end="706:27">
        <expr_stmt pos:start="706:9" pos:end="706:27"><expr pos:start="706:9" pos:end="706:26"><call pos:start="706:9" pos:end="706:26"><name pos:start="706:9" pos:end="706:21">X509_REQ_free</name><argument_list pos:start="706:22" pos:end="706:26">(<argument pos:start="706:23" pos:end="706:25"><expr pos:start="706:23" pos:end="706:25"><name pos:start="706:23" pos:end="706:25">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="707:5" pos:end="708:27"><if pos:start="707:5" pos:end="708:27">if <condition pos:start="707:8" pos:end="707:12">(<expr pos:start="707:9" pos:end="707:11"><name pos:start="707:9" pos:end="707:11">key</name></expr>)</condition><block type="pseudo" pos:start="708:9" pos:end="708:27"><block_content pos:start="708:9" pos:end="708:27">
        <expr_stmt pos:start="708:9" pos:end="708:27"><expr pos:start="708:9" pos:end="708:26"><call pos:start="708:9" pos:end="708:26"><name pos:start="708:9" pos:end="708:21">EVP_PKEY_free</name><argument_list pos:start="708:22" pos:end="708:26">(<argument pos:start="708:23" pos:end="708:25"><expr pos:start="708:23" pos:end="708:25"><name pos:start="708:23" pos:end="708:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="711:1" pos:end="717:3">/*
 * This test attempts does a simple enroll when the
 * server has no CSR attributes configured to only
 * require the CommonName.  The CSR attributes on
 * the server are configured through the static API,
 * not the callback.
 */</comment>
<function pos:start="718:1" pos:end="780:1"><type pos:start="718:1" pos:end="718:11"><specifier pos:start="718:1" pos:end="718:6">static</specifier> <name pos:start="718:8" pos:end="718:11">void</name></type> <name pos:start="718:13" pos:end="718:25">us1159_test10</name> <parameter_list pos:start="718:27" pos:end="718:32">(<parameter pos:start="718:28" pos:end="718:31"><decl pos:start="718:28" pos:end="718:31"><type pos:start="718:28" pos:end="718:31"><name pos:start="718:28" pos:end="718:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="719:1" pos:end="780:1">{<block_content pos:start="720:5" pos:end="779:27">
    <decl_stmt pos:start="720:5" pos:end="720:25"><decl pos:start="720:5" pos:end="720:24"><type pos:start="720:5" pos:end="720:14"><name pos:start="720:5" pos:end="720:12">EVP_PKEY</name> <modifier pos:start="720:14" pos:end="720:14">*</modifier></type><name pos:start="720:15" pos:end="720:17">key</name> <init pos:start="720:19" pos:end="720:24">= <expr pos:start="720:21" pos:end="720:24"><name pos:start="720:21" pos:end="720:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="721:5" pos:end="721:22"><decl pos:start="721:5" pos:end="721:21"><type pos:start="721:5" pos:end="721:7"><name pos:start="721:5" pos:end="721:7">int</name></type> <name pos:start="721:9" pos:end="721:17">pkcs7_len</name> <init pos:start="721:19" pos:end="721:21">= <expr pos:start="721:21" pos:end="721:21"><literal type="number" pos:start="721:21" pos:end="721:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="722:5" pos:end="722:11"><decl pos:start="722:5" pos:end="722:10"><type pos:start="722:5" pos:end="722:7"><name pos:start="722:5" pos:end="722:7">int</name></type> <name pos:start="722:9" pos:end="722:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="723:5" pos:end="723:24"><decl pos:start="723:5" pos:end="723:23"><type pos:start="723:5" pos:end="723:13"><name pos:start="723:5" pos:end="723:11">EST_CTX</name> <modifier pos:start="723:13" pos:end="723:13">*</modifier></type><name pos:start="723:14" pos:end="723:16">ctx</name> <init pos:start="723:18" pos:end="723:23">= <expr pos:start="723:20" pos:end="723:23"><name pos:start="723:20" pos:end="723:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="725:5" pos:end="726:5"><expr pos:start="725:5" pos:end="725:15"><name pos:start="725:5" pos:end="725:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="728:5" pos:end="730:7">/*
     * Disable the CSR attr callback on the server context
     */</comment>
    <expr_stmt pos:start="731:5" pos:end="731:36"><expr pos:start="731:5" pos:end="731:35"><name pos:start="731:5" pos:end="731:6">rv</name> <operator pos:start="731:8" pos:end="731:8">=</operator> <call pos:start="731:10" pos:end="731:35"><name pos:start="731:10" pos:end="731:23">est_set_csr_cb</name><argument_list pos:start="731:24" pos:end="731:35">(<argument pos:start="731:25" pos:end="731:28"><expr pos:start="731:25" pos:end="731:28"><name pos:start="731:25" pos:end="731:28">ectx</name></expr></argument>, <argument pos:start="731:31" pos:end="731:34"><expr pos:start="731:31" pos:end="731:34"><name pos:start="731:31" pos:end="731:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="732:5" pos:end="732:34"><expr pos:start="732:5" pos:end="732:33"><call pos:start="732:5" pos:end="732:33"><name pos:start="732:5" pos:end="732:13">CU_ASSERT</name><argument_list pos:start="732:14" pos:end="732:33">(<argument pos:start="732:15" pos:end="732:32"><expr pos:start="732:15" pos:end="732:32"><name pos:start="732:15" pos:end="732:16">rv</name> <operator pos:start="732:18" pos:end="732:19">==</operator> <name pos:start="732:21" pos:end="732:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="734:5" pos:end="736:7">/*
     * Configure the static CSR attributes value
     */</comment>
    <expr_stmt pos:start="737:5" pos:end="738:37"><expr pos:start="737:5" pos:end="738:36"><name pos:start="737:5" pos:end="737:6">rv</name> <operator pos:start="737:8" pos:end="737:8">=</operator> <call pos:start="737:10" pos:end="738:36"><name pos:start="737:10" pos:end="737:33">est_server_init_csrattrs</name><argument_list pos:start="737:34" pos:end="738:36">(<argument pos:start="737:35" pos:end="737:38"><expr pos:start="737:35" pos:end="737:38"><name pos:start="737:35" pos:end="737:38">ectx</name></expr></argument>, <argument pos:start="737:41" pos:end="737:59"><expr pos:start="737:41" pos:end="737:59"><name pos:start="737:41" pos:end="737:59">US1159_ATTR_CN_ONLY</name></expr></argument>,
        <argument pos:start="738:9" pos:end="738:35"><expr pos:start="738:9" pos:end="738:35"><call pos:start="738:9" pos:end="738:35"><name pos:start="738:9" pos:end="738:14">strlen</name><argument_list pos:start="738:15" pos:end="738:35">(<argument pos:start="738:16" pos:end="738:34"><expr pos:start="738:16" pos:end="738:34"><name pos:start="738:16" pos:end="738:34">US1159_ATTR_CN_ONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="739:5" pos:end="739:34"><expr pos:start="739:5" pos:end="739:33"><call pos:start="739:5" pos:end="739:33"><name pos:start="739:5" pos:end="739:13">CU_ASSERT</name><argument_list pos:start="739:14" pos:end="739:33">(<argument pos:start="739:15" pos:end="739:32"><expr pos:start="739:15" pos:end="739:32"><name pos:start="739:15" pos:end="739:16">rv</name> <operator pos:start="739:18" pos:end="739:19">==</operator> <name pos:start="739:21" pos:end="739:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="741:5" pos:end="743:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="744:5" pos:end="744:33"><expr pos:start="744:5" pos:end="744:32"><name pos:start="744:5" pos:end="744:7">key</name> <operator pos:start="744:9" pos:end="744:9">=</operator> <call pos:start="744:11" pos:end="744:32"><name pos:start="744:11" pos:end="744:30">generate_private_key</name><argument_list pos:start="744:31" pos:end="744:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="745:5" pos:end="745:27"><expr pos:start="745:5" pos:end="745:26"><call pos:start="745:5" pos:end="745:26"><name pos:start="745:5" pos:end="745:13">CU_ASSERT</name><argument_list pos:start="745:14" pos:end="745:26">(<argument pos:start="745:15" pos:end="745:25"><expr pos:start="745:15" pos:end="745:25"><name pos:start="745:15" pos:end="745:17">key</name> <operator pos:start="745:19" pos:end="745:20">!=</operator> <name pos:start="745:22" pos:end="745:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="747:5" pos:end="749:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="750:5" pos:end="750:75"><expr pos:start="750:5" pos:end="750:74"><name pos:start="750:5" pos:end="750:7">ctx</name> <operator pos:start="750:9" pos:end="750:9">=</operator> <call pos:start="750:11" pos:end="750:74"><name pos:start="750:11" pos:end="750:25">est_client_init</name><argument_list pos:start="750:26" pos:end="750:74">(<argument pos:start="750:27" pos:end="750:33"><expr pos:start="750:27" pos:end="750:33"><name pos:start="750:27" pos:end="750:33">cacerts</name></expr></argument>, <argument pos:start="750:36" pos:end="750:46"><expr pos:start="750:36" pos:end="750:46"><name pos:start="750:36" pos:end="750:46">cacerts_len</name></expr></argument>, <argument pos:start="750:49" pos:end="750:67"><expr pos:start="750:49" pos:end="750:67"><name pos:start="750:49" pos:end="750:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="750:70" pos:end="750:73"><expr pos:start="750:70" pos:end="750:73"><name pos:start="750:70" pos:end="750:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="751:5" pos:end="751:27"><expr pos:start="751:5" pos:end="751:26"><call pos:start="751:5" pos:end="751:26"><name pos:start="751:5" pos:end="751:13">CU_ASSERT</name><argument_list pos:start="751:14" pos:end="751:26">(<argument pos:start="751:15" pos:end="751:25"><expr pos:start="751:15" pos:end="751:25"><name pos:start="751:15" pos:end="751:17">ctx</name> <operator pos:start="751:19" pos:end="751:20">!=</operator> <name pos:start="751:22" pos:end="751:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="753:5" pos:end="755:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="756:5" pos:end="756:70"><expr pos:start="756:5" pos:end="756:69"><name pos:start="756:5" pos:end="756:6">rv</name> <operator pos:start="756:8" pos:end="756:8">=</operator> <call pos:start="756:10" pos:end="756:69"><name pos:start="756:10" pos:end="756:28">est_client_set_auth</name><argument_list pos:start="756:29" pos:end="756:69">(<argument pos:start="756:30" pos:end="756:32"><expr pos:start="756:30" pos:end="756:32"><name pos:start="756:30" pos:end="756:32">ctx</name></expr></argument>, <argument pos:start="756:35" pos:end="756:44"><expr pos:start="756:35" pos:end="756:44"><name pos:start="756:35" pos:end="756:44">US1159_UID</name></expr></argument>, <argument pos:start="756:47" pos:end="756:56"><expr pos:start="756:47" pos:end="756:56"><name pos:start="756:47" pos:end="756:56">US1159_PWD</name></expr></argument>, <argument pos:start="756:59" pos:end="756:62"><expr pos:start="756:59" pos:end="756:62"><name pos:start="756:59" pos:end="756:62">NULL</name></expr></argument>, <argument pos:start="756:65" pos:end="756:68"><expr pos:start="756:65" pos:end="756:68"><name pos:start="756:65" pos:end="756:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="757:5" pos:end="757:34"><expr pos:start="757:5" pos:end="757:33"><call pos:start="757:5" pos:end="757:33"><name pos:start="757:5" pos:end="757:13">CU_ASSERT</name><argument_list pos:start="757:14" pos:end="757:33">(<argument pos:start="757:15" pos:end="757:32"><expr pos:start="757:15" pos:end="757:32"><name pos:start="757:15" pos:end="757:16">rv</name> <operator pos:start="757:18" pos:end="757:19">==</operator> <name pos:start="757:21" pos:end="757:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="759:5" pos:end="759:35"><expr pos:start="759:5" pos:end="759:34"><name pos:start="759:5" pos:end="759:6">rv</name> <operator pos:start="759:8" pos:end="759:8">=</operator> <call pos:start="759:10" pos:end="759:34"><name pos:start="759:10" pos:end="759:29">est_client_force_pop</name><argument_list pos:start="759:30" pos:end="759:34">(<argument pos:start="759:31" pos:end="759:33"><expr pos:start="759:31" pos:end="759:33"><name pos:start="759:31" pos:end="759:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="760:5" pos:end="760:34"><expr pos:start="760:5" pos:end="760:33"><call pos:start="760:5" pos:end="760:33"><name pos:start="760:5" pos:end="760:13">CU_ASSERT</name><argument_list pos:start="760:14" pos:end="760:33">(<argument pos:start="760:15" pos:end="760:32"><expr pos:start="760:15" pos:end="760:32"><name pos:start="760:15" pos:end="760:16">rv</name> <operator pos:start="760:18" pos:end="760:19">==</operator> <name pos:start="760:21" pos:end="760:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="762:5" pos:end="764:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="765:5" pos:end="765:75"><expr pos:start="765:5" pos:end="765:74"><call pos:start="765:5" pos:end="765:74"><name pos:start="765:5" pos:end="765:25">est_client_set_server</name><argument_list pos:start="765:26" pos:end="765:74">(<argument pos:start="765:27" pos:end="765:29"><expr pos:start="765:27" pos:end="765:29"><name pos:start="765:27" pos:end="765:29">ctx</name></expr></argument>, <argument pos:start="765:32" pos:end="765:47"><expr pos:start="765:32" pos:end="765:47"><name pos:start="765:32" pos:end="765:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="765:50" pos:end="765:67"><expr pos:start="765:50" pos:end="765:67"><name pos:start="765:50" pos:end="765:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="765:70" pos:end="765:73"><expr pos:start="765:70" pos:end="765:73"><name pos:start="765:70" pos:end="765:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="767:5" pos:end="769:7">/*
     * Enroll a new cert
     */</comment>
    <expr_stmt pos:start="770:5" pos:end="770:60"><expr pos:start="770:5" pos:end="770:59"><name pos:start="770:5" pos:end="770:6">rv</name> <operator pos:start="770:8" pos:end="770:8">=</operator> <call pos:start="770:10" pos:end="770:59"><name pos:start="770:10" pos:end="770:26">est_client_enroll</name><argument_list pos:start="770:27" pos:end="770:59">(<argument pos:start="770:28" pos:end="770:30"><expr pos:start="770:28" pos:end="770:30"><name pos:start="770:28" pos:end="770:30">ctx</name></expr></argument>, <argument pos:start="770:33" pos:end="770:41"><expr pos:start="770:33" pos:end="770:41"><literal type="string" pos:start="770:33" pos:end="770:41">"Test 10"</literal></expr></argument>, <argument pos:start="770:44" pos:end="770:53"><expr pos:start="770:44" pos:end="770:53"><operator pos:start="770:44" pos:end="770:44">&amp;</operator><name pos:start="770:45" pos:end="770:53">pkcs7_len</name></expr></argument>, <argument pos:start="770:56" pos:end="770:58"><expr pos:start="770:56" pos:end="770:58"><name pos:start="770:56" pos:end="770:58">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="771:5" pos:end="771:34"><expr pos:start="771:5" pos:end="771:33"><call pos:start="771:5" pos:end="771:33"><name pos:start="771:5" pos:end="771:13">CU_ASSERT</name><argument_list pos:start="771:14" pos:end="771:33">(<argument pos:start="771:15" pos:end="771:32"><expr pos:start="771:15" pos:end="771:32"><name pos:start="771:15" pos:end="771:16">rv</name> <operator pos:start="771:18" pos:end="771:19">==</operator> <name pos:start="771:21" pos:end="771:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="773:5" pos:end="775:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="776:5" pos:end="777:25"><if pos:start="776:5" pos:end="777:25">if <condition pos:start="776:8" pos:end="776:12">(<expr pos:start="776:9" pos:end="776:11"><name pos:start="776:9" pos:end="776:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="777:9" pos:end="777:25"><block_content pos:start="777:9" pos:end="777:25">
        <expr_stmt pos:start="777:9" pos:end="777:25"><expr pos:start="777:9" pos:end="777:24"><call pos:start="777:9" pos:end="777:24"><name pos:start="777:9" pos:end="777:19">est_destroy</name><argument_list pos:start="777:20" pos:end="777:24">(<argument pos:start="777:21" pos:end="777:23"><expr pos:start="777:21" pos:end="777:23"><name pos:start="777:21" pos:end="777:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="778:5" pos:end="779:27"><if pos:start="778:5" pos:end="779:27">if <condition pos:start="778:8" pos:end="778:12">(<expr pos:start="778:9" pos:end="778:11"><name pos:start="778:9" pos:end="778:11">key</name></expr>)</condition><block type="pseudo" pos:start="779:9" pos:end="779:27"><block_content pos:start="779:9" pos:end="779:27">
        <expr_stmt pos:start="779:9" pos:end="779:27"><expr pos:start="779:9" pos:end="779:26"><call pos:start="779:9" pos:end="779:26"><name pos:start="779:9" pos:end="779:21">EVP_PKEY_free</name><argument_list pos:start="779:22" pos:end="779:26">(<argument pos:start="779:23" pos:end="779:25"><expr pos:start="779:23" pos:end="779:25"><name pos:start="779:23" pos:end="779:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="782:1" pos:end="787:3">/*
 * This test attempts does a simple enroll with the
 * client providing all the required CSR attributes in
 * the CSR. The client also provides a large
 * quantity of additional attriutes.
 */</comment>
<function pos:start="788:1" pos:end="882:1"><type pos:start="788:1" pos:end="788:11"><specifier pos:start="788:1" pos:end="788:6">static</specifier> <name pos:start="788:8" pos:end="788:11">void</name></type> <name pos:start="788:13" pos:end="788:25">us1159_test20</name> <parameter_list pos:start="788:27" pos:end="788:32">(<parameter pos:start="788:28" pos:end="788:31"><decl pos:start="788:28" pos:end="788:31"><type pos:start="788:28" pos:end="788:31"><name pos:start="788:28" pos:end="788:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="789:1" pos:end="882:1">{<block_content pos:start="790:5" pos:end="881:27">
    <decl_stmt pos:start="790:5" pos:end="790:25"><decl pos:start="790:5" pos:end="790:24"><type pos:start="790:5" pos:end="790:14"><name pos:start="790:5" pos:end="790:12">X509_REQ</name> <modifier pos:start="790:14" pos:end="790:14">*</modifier></type><name pos:start="790:15" pos:end="790:17">req</name> <init pos:start="790:19" pos:end="790:24">= <expr pos:start="790:21" pos:end="790:24"><name pos:start="790:21" pos:end="790:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="791:5" pos:end="791:25"><decl pos:start="791:5" pos:end="791:24"><type pos:start="791:5" pos:end="791:14"><name pos:start="791:5" pos:end="791:12">EVP_PKEY</name> <modifier pos:start="791:14" pos:end="791:14">*</modifier></type><name pos:start="791:15" pos:end="791:17">key</name> <init pos:start="791:19" pos:end="791:24">= <expr pos:start="791:21" pos:end="791:24"><name pos:start="791:21" pos:end="791:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="792:5" pos:end="792:22"><decl pos:start="792:5" pos:end="792:21"><type pos:start="792:5" pos:end="792:7"><name pos:start="792:5" pos:end="792:7">int</name></type> <name pos:start="792:9" pos:end="792:17">pkcs7_len</name> <init pos:start="792:19" pos:end="792:21">= <expr pos:start="792:21" pos:end="792:21"><literal type="number" pos:start="792:21" pos:end="792:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="793:5" pos:end="793:35"><decl pos:start="793:5" pos:end="793:34"><type pos:start="793:5" pos:end="793:19"><name pos:start="793:5" pos:end="793:12">unsigned</name> <name pos:start="793:14" pos:end="793:17">char</name> <modifier pos:start="793:19" pos:end="793:19">*</modifier></type><name pos:start="793:20" pos:end="793:27">new_cert</name> <init pos:start="793:29" pos:end="793:34">= <expr pos:start="793:31" pos:end="793:34"><name pos:start="793:31" pos:end="793:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="794:5" pos:end="794:11"><decl pos:start="794:5" pos:end="794:10"><type pos:start="794:5" pos:end="794:7"><name pos:start="794:5" pos:end="794:7">int</name></type> <name pos:start="794:9" pos:end="794:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="795:5" pos:end="795:24"><decl pos:start="795:5" pos:end="795:23"><type pos:start="795:5" pos:end="795:13"><name pos:start="795:5" pos:end="795:11">EST_CTX</name> <modifier pos:start="795:13" pos:end="795:13">*</modifier></type><name pos:start="795:14" pos:end="795:16">ctx</name> <init pos:start="795:18" pos:end="795:23">= <expr pos:start="795:20" pos:end="795:23"><name pos:start="795:20" pos:end="795:23">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="796:5" pos:end="796:10"><decl pos:start="796:5" pos:end="796:9"><type pos:start="796:5" pos:end="796:7"><name pos:start="796:5" pos:end="796:7">int</name></type> <name pos:start="796:9" pos:end="796:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="797:5" pos:end="797:24"><decl pos:start="797:5" pos:end="797:23"><type pos:start="797:5" pos:end="797:8"><name pos:start="797:5" pos:end="797:8">char</name></type> <name pos:start="797:10" pos:end="797:23"><name pos:start="797:10" pos:end="797:19">t_attr_str</name><index pos:start="797:20" pos:end="797:23">[<expr pos:start="797:21" pos:end="797:22"><literal type="number" pos:start="797:21" pos:end="797:22">50</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="799:5" pos:end="800:5"><expr pos:start="799:5" pos:end="799:15"><name pos:start="799:5" pos:end="799:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="802:5" pos:end="804:7">/*
     * This sets the full list of attributes on the server
     */</comment>
    <expr_stmt pos:start="805:5" pos:end="805:29"><expr pos:start="805:5" pos:end="805:28"><name pos:start="805:5" pos:end="805:9">attrs</name> <operator pos:start="805:11" pos:end="805:11">=</operator> <name pos:start="805:13" pos:end="805:28">US1159_ATTR_TEST</name></expr>;</expr_stmt>

    <comment type="block" pos:start="807:5" pos:end="809:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="810:5" pos:end="810:49"><expr pos:start="810:5" pos:end="810:48"><name pos:start="810:5" pos:end="810:7">key</name> <operator pos:start="810:9" pos:end="810:9">=</operator> <call pos:start="810:11" pos:end="810:48"><name pos:start="810:11" pos:end="810:33">generate_ec_private_key</name><argument_list pos:start="810:34" pos:end="810:48">(<argument pos:start="810:35" pos:end="810:47"><expr pos:start="810:35" pos:end="810:47"><name pos:start="810:35" pos:end="810:47">NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="811:5" pos:end="811:27"><expr pos:start="811:5" pos:end="811:26"><call pos:start="811:5" pos:end="811:26"><name pos:start="811:5" pos:end="811:13">CU_ASSERT</name><argument_list pos:start="811:14" pos:end="811:26">(<argument pos:start="811:15" pos:end="811:25"><expr pos:start="811:15" pos:end="811:25"><name pos:start="811:15" pos:end="811:17">key</name> <operator pos:start="811:19" pos:end="811:20">!=</operator> <name pos:start="811:22" pos:end="811:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="813:5" pos:end="813:25"><expr pos:start="813:5" pos:end="813:24"><name pos:start="813:5" pos:end="813:7">req</name> <operator pos:start="813:9" pos:end="813:9">=</operator> <call pos:start="813:11" pos:end="813:24"><name pos:start="813:11" pos:end="813:22">X509_REQ_new</name><argument_list pos:start="813:23" pos:end="813:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="814:5" pos:end="814:27"><expr pos:start="814:5" pos:end="814:26"><call pos:start="814:5" pos:end="814:26"><name pos:start="814:5" pos:end="814:13">CU_ASSERT</name><argument_list pos:start="814:14" pos:end="814:26">(<argument pos:start="814:15" pos:end="814:25"><expr pos:start="814:15" pos:end="814:25"><name pos:start="814:15" pos:end="814:17">req</name> <operator pos:start="814:19" pos:end="814:20">!=</operator> <name pos:start="814:22" pos:end="814:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="816:5" pos:end="816:52"><expr pos:start="816:5" pos:end="816:51"><name pos:start="816:5" pos:end="816:6">rv</name> <operator pos:start="816:8" pos:end="816:8">=</operator> <call pos:start="816:10" pos:end="816:51"><name pos:start="816:10" pos:end="816:30">populate_x509_request</name><argument_list pos:start="816:31" pos:end="816:51">(<argument pos:start="816:32" pos:end="816:34"><expr pos:start="816:32" pos:end="816:34"><name pos:start="816:32" pos:end="816:34">req</name></expr></argument>, <argument pos:start="816:37" pos:end="816:39"><expr pos:start="816:37" pos:end="816:39"><name pos:start="816:37" pos:end="816:39">key</name></expr></argument>, <argument pos:start="816:42" pos:end="816:50"><expr pos:start="816:42" pos:end="816:50"><literal type="string" pos:start="816:42" pos:end="816:50">"Test 20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="817:5" pos:end="817:34"><expr pos:start="817:5" pos:end="817:33"><call pos:start="817:5" pos:end="817:33"><name pos:start="817:5" pos:end="817:13">CU_ASSERT</name><argument_list pos:start="817:14" pos:end="817:33">(<argument pos:start="817:15" pos:end="817:32"><expr pos:start="817:15" pos:end="817:32"><name pos:start="817:15" pos:end="817:16">rv</name> <operator pos:start="817:18" pos:end="817:19">==</operator> <name pos:start="817:21" pos:end="817:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="819:5" pos:end="824:7">/*
     * Jam another 25 attributes into the request
     * We could do more, but this causes a failure on the EST server when
     * base64 decoding the CSR due to a safeC constraint.  The max string
     * size in safeC defaults to 4096 bytes.
     */</comment>
    <for pos:start="825:5" pos:end="833:5">for <control pos:start="825:9" pos:end="825:28">(<init pos:start="825:10" pos:end="825:15"><expr pos:start="825:10" pos:end="825:14"><name pos:start="825:10" pos:end="825:10">i</name> <operator pos:start="825:12" pos:end="825:12">=</operator> <literal type="number" pos:start="825:14" pos:end="825:14">0</literal></expr>;</init> <condition pos:start="825:17" pos:end="825:23"><expr pos:start="825:17" pos:end="825:22"><name pos:start="825:17" pos:end="825:17">i</name> <operator pos:start="825:19" pos:end="825:19">&lt;</operator> <literal type="number" pos:start="825:21" pos:end="825:22">25</literal></expr>;</condition> <incr pos:start="825:25" pos:end="825:27"><expr pos:start="825:25" pos:end="825:27"><name pos:start="825:25" pos:end="825:25">i</name><operator pos:start="825:26" pos:end="825:27">++</operator></expr></incr>)</control> <block pos:start="825:30" pos:end="833:5">{<block_content pos:start="826:9" pos:end="832:9">
        <expr_stmt pos:start="826:9" pos:end="826:43"><expr pos:start="826:9" pos:end="826:42"><call pos:start="826:9" pos:end="826:42"><name pos:start="826:9" pos:end="826:15">sprintf</name><argument_list pos:start="826:16" pos:end="826:42">(<argument pos:start="826:17" pos:end="826:26"><expr pos:start="826:17" pos:end="826:26"><name pos:start="826:17" pos:end="826:26">t_attr_str</name></expr></argument>, <argument pos:start="826:29" pos:end="826:38"><expr pos:start="826:29" pos:end="826:38"><literal type="string" pos:start="826:29" pos:end="826:38">"2.899.%d"</literal></expr></argument>, <argument pos:start="826:41" pos:end="826:41"><expr pos:start="826:41" pos:end="826:41"><name pos:start="826:41" pos:end="826:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="827:9" pos:end="828:51"><expr pos:start="827:9" pos:end="828:50"><name pos:start="827:9" pos:end="827:10">rv</name> <operator pos:start="827:12" pos:end="827:12">=</operator> <call pos:start="827:14" pos:end="828:50"><name pos:start="827:14" pos:end="827:38">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="827:39" pos:end="828:50">(<argument pos:start="827:40" pos:end="827:42"><expr pos:start="827:40" pos:end="827:42"><name pos:start="827:40" pos:end="827:42">req</name></expr></argument>, <argument pos:start="827:45" pos:end="827:54"><expr pos:start="827:45" pos:end="827:54"><name pos:start="827:45" pos:end="827:54">t_attr_str</name></expr></argument>, <argument pos:start="827:57" pos:end="827:68"><expr pos:start="827:57" pos:end="827:68"><name pos:start="827:57" pos:end="827:68">MBSTRING_ASC</name></expr></argument>,
            <argument pos:start="828:13" pos:end="828:45"><expr pos:start="828:13" pos:end="828:45"><operator pos:start="828:13" pos:end="828:13">(</operator><specifier pos:start="828:14" pos:end="828:18">const</specifier> <name pos:start="828:20" pos:end="828:27">unsigned</name> <name pos:start="828:29" pos:end="828:32">char</name><operator pos:start="828:33" pos:end="828:33">*</operator><operator pos:start="828:34" pos:end="828:34">)</operator> <literal type="string" pos:start="828:36" pos:end="828:45">"whatever"</literal></expr></argument>, <argument pos:start="828:48" pos:end="828:49"><expr pos:start="828:48" pos:end="828:49"><operator pos:start="828:48" pos:end="828:48">-</operator><literal type="number" pos:start="828:49" pos:end="828:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="829:9" pos:end="829:27"><expr pos:start="829:9" pos:end="829:26"><call pos:start="829:9" pos:end="829:26"><name pos:start="829:9" pos:end="829:17">CU_ASSERT</name><argument_list pos:start="829:18" pos:end="829:26">(<argument pos:start="829:19" pos:end="829:25"><expr pos:start="829:19" pos:end="829:25"><name pos:start="829:19" pos:end="829:20">rv</name> <operator pos:start="829:22" pos:end="829:23">!=</operator> <literal type="number" pos:start="829:25" pos:end="829:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="830:9" pos:end="832:9"><if pos:start="830:9" pos:end="832:9">if <condition pos:start="830:12" pos:end="830:16">(<expr pos:start="830:13" pos:end="830:15"><operator pos:start="830:13" pos:end="830:13">!</operator><name pos:start="830:14" pos:end="830:15">rv</name></expr>)</condition> <block pos:start="830:18" pos:end="832:9">{<block_content pos:start="831:13" pos:end="831:40">
            <expr_stmt pos:start="831:13" pos:end="831:40"><expr pos:start="831:13" pos:end="831:39"><call pos:start="831:13" pos:end="831:39"><name pos:start="831:13" pos:end="831:31">ERR_print_errors_fp</name><argument_list pos:start="831:32" pos:end="831:39">(<argument pos:start="831:33" pos:end="831:38"><expr pos:start="831:33" pos:end="831:38"><name pos:start="831:33" pos:end="831:38">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block" pos:start="835:5" pos:end="837:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="838:5" pos:end="838:75"><expr pos:start="838:5" pos:end="838:74"><name pos:start="838:5" pos:end="838:7">ctx</name> <operator pos:start="838:9" pos:end="838:9">=</operator> <call pos:start="838:11" pos:end="838:74"><name pos:start="838:11" pos:end="838:25">est_client_init</name><argument_list pos:start="838:26" pos:end="838:74">(<argument pos:start="838:27" pos:end="838:33"><expr pos:start="838:27" pos:end="838:33"><name pos:start="838:27" pos:end="838:33">cacerts</name></expr></argument>, <argument pos:start="838:36" pos:end="838:46"><expr pos:start="838:36" pos:end="838:46"><name pos:start="838:36" pos:end="838:46">cacerts_len</name></expr></argument>, <argument pos:start="838:49" pos:end="838:67"><expr pos:start="838:49" pos:end="838:67"><name pos:start="838:49" pos:end="838:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="838:70" pos:end="838:73"><expr pos:start="838:70" pos:end="838:73"><name pos:start="838:70" pos:end="838:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="839:5" pos:end="839:27"><expr pos:start="839:5" pos:end="839:26"><call pos:start="839:5" pos:end="839:26"><name pos:start="839:5" pos:end="839:13">CU_ASSERT</name><argument_list pos:start="839:14" pos:end="839:26">(<argument pos:start="839:15" pos:end="839:25"><expr pos:start="839:15" pos:end="839:25"><name pos:start="839:15" pos:end="839:17">ctx</name> <operator pos:start="839:19" pos:end="839:20">!=</operator> <name pos:start="839:22" pos:end="839:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="841:5" pos:end="841:35"><expr pos:start="841:5" pos:end="841:34"><name pos:start="841:5" pos:end="841:6">rv</name> <operator pos:start="841:8" pos:end="841:8">=</operator> <call pos:start="841:10" pos:end="841:34"><name pos:start="841:10" pos:end="841:29">est_client_force_pop</name><argument_list pos:start="841:30" pos:end="841:34">(<argument pos:start="841:31" pos:end="841:33"><expr pos:start="841:31" pos:end="841:33"><name pos:start="841:31" pos:end="841:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="842:5" pos:end="842:34"><expr pos:start="842:5" pos:end="842:33"><call pos:start="842:5" pos:end="842:33"><name pos:start="842:5" pos:end="842:13">CU_ASSERT</name><argument_list pos:start="842:14" pos:end="842:33">(<argument pos:start="842:15" pos:end="842:32"><expr pos:start="842:15" pos:end="842:32"><name pos:start="842:15" pos:end="842:16">rv</name> <operator pos:start="842:18" pos:end="842:19">==</operator> <name pos:start="842:21" pos:end="842:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="844:5" pos:end="846:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="847:5" pos:end="847:70"><expr pos:start="847:5" pos:end="847:69"><name pos:start="847:5" pos:end="847:6">rv</name> <operator pos:start="847:8" pos:end="847:8">=</operator> <call pos:start="847:10" pos:end="847:69"><name pos:start="847:10" pos:end="847:28">est_client_set_auth</name><argument_list pos:start="847:29" pos:end="847:69">(<argument pos:start="847:30" pos:end="847:32"><expr pos:start="847:30" pos:end="847:32"><name pos:start="847:30" pos:end="847:32">ctx</name></expr></argument>, <argument pos:start="847:35" pos:end="847:44"><expr pos:start="847:35" pos:end="847:44"><name pos:start="847:35" pos:end="847:44">US1159_UID</name></expr></argument>, <argument pos:start="847:47" pos:end="847:56"><expr pos:start="847:47" pos:end="847:56"><name pos:start="847:47" pos:end="847:56">US1159_PWD</name></expr></argument>, <argument pos:start="847:59" pos:end="847:62"><expr pos:start="847:59" pos:end="847:62"><name pos:start="847:59" pos:end="847:62">NULL</name></expr></argument>, <argument pos:start="847:65" pos:end="847:68"><expr pos:start="847:65" pos:end="847:68"><name pos:start="847:65" pos:end="847:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="848:5" pos:end="848:34"><expr pos:start="848:5" pos:end="848:33"><call pos:start="848:5" pos:end="848:33"><name pos:start="848:5" pos:end="848:13">CU_ASSERT</name><argument_list pos:start="848:14" pos:end="848:33">(<argument pos:start="848:15" pos:end="848:32"><expr pos:start="848:15" pos:end="848:32"><name pos:start="848:15" pos:end="848:16">rv</name> <operator pos:start="848:18" pos:end="848:19">==</operator> <name pos:start="848:21" pos:end="848:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="850:5" pos:end="852:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="853:5" pos:end="853:75"><expr pos:start="853:5" pos:end="853:74"><call pos:start="853:5" pos:end="853:74"><name pos:start="853:5" pos:end="853:25">est_client_set_server</name><argument_list pos:start="853:26" pos:end="853:74">(<argument pos:start="853:27" pos:end="853:29"><expr pos:start="853:27" pos:end="853:29"><name pos:start="853:27" pos:end="853:29">ctx</name></expr></argument>, <argument pos:start="853:32" pos:end="853:47"><expr pos:start="853:32" pos:end="853:47"><name pos:start="853:32" pos:end="853:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="853:50" pos:end="853:67"><expr pos:start="853:50" pos:end="853:67"><name pos:start="853:50" pos:end="853:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="853:70" pos:end="853:73"><expr pos:start="853:70" pos:end="853:73"><name pos:start="853:70" pos:end="853:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="855:5" pos:end="857:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="858:5" pos:end="858:58"><expr pos:start="858:5" pos:end="858:57"><name pos:start="858:5" pos:end="858:6">rv</name> <operator pos:start="858:8" pos:end="858:8">=</operator> <call pos:start="858:10" pos:end="858:57"><name pos:start="858:10" pos:end="858:30">est_client_enroll_csr</name><argument_list pos:start="858:31" pos:end="858:57">(<argument pos:start="858:32" pos:end="858:34"><expr pos:start="858:32" pos:end="858:34"><name pos:start="858:32" pos:end="858:34">ctx</name></expr></argument>, <argument pos:start="858:37" pos:end="858:39"><expr pos:start="858:37" pos:end="858:39"><name pos:start="858:37" pos:end="858:39">req</name></expr></argument>, <argument pos:start="858:42" pos:end="858:51"><expr pos:start="858:42" pos:end="858:51"><operator pos:start="858:42" pos:end="858:42">&amp;</operator><name pos:start="858:43" pos:end="858:51">pkcs7_len</name></expr></argument>, <argument pos:start="858:54" pos:end="858:56"><expr pos:start="858:54" pos:end="858:56"><name pos:start="858:54" pos:end="858:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="859:5" pos:end="859:34"><expr pos:start="859:5" pos:end="859:33"><call pos:start="859:5" pos:end="859:33"><name pos:start="859:5" pos:end="859:13">CU_ASSERT</name><argument_list pos:start="859:14" pos:end="859:33">(<argument pos:start="859:15" pos:end="859:32"><expr pos:start="859:15" pos:end="859:32"><name pos:start="859:15" pos:end="859:16">rv</name> <operator pos:start="859:18" pos:end="859:19">==</operator> <name pos:start="859:21" pos:end="859:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="861:5" pos:end="863:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="864:5" pos:end="869:5"><if pos:start="864:5" pos:end="869:5">if <condition pos:start="864:8" pos:end="864:27">(<expr pos:start="864:9" pos:end="864:26"><name pos:start="864:9" pos:end="864:10">rv</name> <operator pos:start="864:12" pos:end="864:13">==</operator> <name pos:start="864:15" pos:end="864:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="864:29" pos:end="869:5">{<block_content pos:start="865:9" pos:end="868:38">
        <expr_stmt pos:start="865:9" pos:end="865:37"><expr pos:start="865:9" pos:end="865:36"><name pos:start="865:9" pos:end="865:16">new_cert</name> <operator pos:start="865:18" pos:end="865:18">=</operator> <call pos:start="865:20" pos:end="865:36"><name pos:start="865:20" pos:end="865:25">malloc</name><argument_list pos:start="865:26" pos:end="865:36">(<argument pos:start="865:27" pos:end="865:35"><expr pos:start="865:27" pos:end="865:35"><name pos:start="865:27" pos:end="865:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="866:9" pos:end="866:36"><expr pos:start="866:9" pos:end="866:35"><call pos:start="866:9" pos:end="866:35"><name pos:start="866:9" pos:end="866:17">CU_ASSERT</name><argument_list pos:start="866:18" pos:end="866:35">(<argument pos:start="866:19" pos:end="866:34"><expr pos:start="866:19" pos:end="866:34"><name pos:start="866:19" pos:end="866:26">new_cert</name> <operator pos:start="866:28" pos:end="866:29">!=</operator> <name pos:start="866:31" pos:end="866:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="867:9" pos:end="867:58"><expr pos:start="867:9" pos:end="867:57"><name pos:start="867:9" pos:end="867:10">rv</name> <operator pos:start="867:12" pos:end="867:12">=</operator> <call pos:start="867:14" pos:end="867:57"><name pos:start="867:14" pos:end="867:42">est_client_copy_enrolled_cert</name><argument_list pos:start="867:43" pos:end="867:57">(<argument pos:start="867:44" pos:end="867:46"><expr pos:start="867:44" pos:end="867:46"><name pos:start="867:44" pos:end="867:46">ctx</name></expr></argument>, <argument pos:start="867:49" pos:end="867:56"><expr pos:start="867:49" pos:end="867:56"><name pos:start="867:49" pos:end="867:56">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="868:9" pos:end="868:38"><expr pos:start="868:9" pos:end="868:37"><call pos:start="868:9" pos:end="868:37"><name pos:start="868:9" pos:end="868:17">CU_ASSERT</name><argument_list pos:start="868:18" pos:end="868:37">(<argument pos:start="868:19" pos:end="868:36"><expr pos:start="868:19" pos:end="868:36"><name pos:start="868:19" pos:end="868:20">rv</name> <operator pos:start="868:22" pos:end="868:23">==</operator> <name pos:start="868:25" pos:end="868:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="871:5" pos:end="873:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="874:5" pos:end="875:23"><if pos:start="874:5" pos:end="875:23">if <condition pos:start="874:8" pos:end="874:17">(<expr pos:start="874:9" pos:end="874:16"><name pos:start="874:9" pos:end="874:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="875:9" pos:end="875:23"><block_content pos:start="875:9" pos:end="875:23">
        <expr_stmt pos:start="875:9" pos:end="875:23"><expr pos:start="875:9" pos:end="875:22"><call pos:start="875:9" pos:end="875:22"><name pos:start="875:9" pos:end="875:12">free</name><argument_list pos:start="875:13" pos:end="875:22">(<argument pos:start="875:14" pos:end="875:21"><expr pos:start="875:14" pos:end="875:21"><name pos:start="875:14" pos:end="875:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="876:5" pos:end="877:25"><if pos:start="876:5" pos:end="877:25">if <condition pos:start="876:8" pos:end="876:12">(<expr pos:start="876:9" pos:end="876:11"><name pos:start="876:9" pos:end="876:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="877:9" pos:end="877:25"><block_content pos:start="877:9" pos:end="877:25">
        <expr_stmt pos:start="877:9" pos:end="877:25"><expr pos:start="877:9" pos:end="877:24"><call pos:start="877:9" pos:end="877:24"><name pos:start="877:9" pos:end="877:19">est_destroy</name><argument_list pos:start="877:20" pos:end="877:24">(<argument pos:start="877:21" pos:end="877:23"><expr pos:start="877:21" pos:end="877:23"><name pos:start="877:21" pos:end="877:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="878:5" pos:end="879:27"><if pos:start="878:5" pos:end="879:27">if <condition pos:start="878:8" pos:end="878:12">(<expr pos:start="878:9" pos:end="878:11"><name pos:start="878:9" pos:end="878:11">req</name></expr>)</condition><block type="pseudo" pos:start="879:9" pos:end="879:27"><block_content pos:start="879:9" pos:end="879:27">
        <expr_stmt pos:start="879:9" pos:end="879:27"><expr pos:start="879:9" pos:end="879:26"><call pos:start="879:9" pos:end="879:26"><name pos:start="879:9" pos:end="879:21">X509_REQ_free</name><argument_list pos:start="879:22" pos:end="879:26">(<argument pos:start="879:23" pos:end="879:25"><expr pos:start="879:23" pos:end="879:25"><name pos:start="879:23" pos:end="879:25">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="880:5" pos:end="881:27"><if pos:start="880:5" pos:end="881:27">if <condition pos:start="880:8" pos:end="880:12">(<expr pos:start="880:9" pos:end="880:11"><name pos:start="880:9" pos:end="880:11">key</name></expr>)</condition><block type="pseudo" pos:start="881:9" pos:end="881:27"><block_content pos:start="881:9" pos:end="881:27">
        <expr_stmt pos:start="881:9" pos:end="881:27"><expr pos:start="881:9" pos:end="881:26"><call pos:start="881:9" pos:end="881:26"><name pos:start="881:9" pos:end="881:21">EVP_PKEY_free</name><argument_list pos:start="881:22" pos:end="881:26">(<argument pos:start="881:23" pos:end="881:25"><expr pos:start="881:23" pos:end="881:25"><name pos:start="881:23" pos:end="881:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="884:1" pos:end="889:3">/*
 * This test attempts does a simple enroll with the
 * client providing all the required CSR attributes in
 * the CSR. The client also provides an attribute with
 * a very long name and value.
 */</comment>
<function pos:start="890:1" pos:end="989:1"><type pos:start="890:1" pos:end="890:11"><specifier pos:start="890:1" pos:end="890:6">static</specifier> <name pos:start="890:8" pos:end="890:11">void</name></type> <name pos:start="890:13" pos:end="890:25">us1159_test21</name> <parameter_list pos:start="890:27" pos:end="890:32">(<parameter pos:start="890:28" pos:end="890:31"><decl pos:start="890:28" pos:end="890:31"><type pos:start="890:28" pos:end="890:31"><name pos:start="890:28" pos:end="890:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="891:1" pos:end="989:1">{<block_content pos:start="892:5" pos:end="988:27">
    <decl_stmt pos:start="892:5" pos:end="892:25"><decl pos:start="892:5" pos:end="892:24"><type pos:start="892:5" pos:end="892:14"><name pos:start="892:5" pos:end="892:12">X509_REQ</name> <modifier pos:start="892:14" pos:end="892:14">*</modifier></type><name pos:start="892:15" pos:end="892:17">req</name> <init pos:start="892:19" pos:end="892:24">= <expr pos:start="892:21" pos:end="892:24"><name pos:start="892:21" pos:end="892:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="893:5" pos:end="893:25"><decl pos:start="893:5" pos:end="893:24"><type pos:start="893:5" pos:end="893:14"><name pos:start="893:5" pos:end="893:12">EVP_PKEY</name> <modifier pos:start="893:14" pos:end="893:14">*</modifier></type><name pos:start="893:15" pos:end="893:17">key</name> <init pos:start="893:19" pos:end="893:24">= <expr pos:start="893:21" pos:end="893:24"><name pos:start="893:21" pos:end="893:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="894:5" pos:end="894:22"><decl pos:start="894:5" pos:end="894:21"><type pos:start="894:5" pos:end="894:7"><name pos:start="894:5" pos:end="894:7">int</name></type> <name pos:start="894:9" pos:end="894:17">pkcs7_len</name> <init pos:start="894:19" pos:end="894:21">= <expr pos:start="894:21" pos:end="894:21"><literal type="number" pos:start="894:21" pos:end="894:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="895:5" pos:end="895:35"><decl pos:start="895:5" pos:end="895:34"><type pos:start="895:5" pos:end="895:19"><name pos:start="895:5" pos:end="895:12">unsigned</name> <name pos:start="895:14" pos:end="895:17">char</name> <modifier pos:start="895:19" pos:end="895:19">*</modifier></type><name pos:start="895:20" pos:end="895:27">new_cert</name> <init pos:start="895:29" pos:end="895:34">= <expr pos:start="895:31" pos:end="895:34"><name pos:start="895:31" pos:end="895:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="896:5" pos:end="896:11"><decl pos:start="896:5" pos:end="896:10"><type pos:start="896:5" pos:end="896:7"><name pos:start="896:5" pos:end="896:7">int</name></type> <name pos:start="896:9" pos:end="896:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="897:5" pos:end="897:24"><decl pos:start="897:5" pos:end="897:23"><type pos:start="897:5" pos:end="897:13"><name pos:start="897:5" pos:end="897:11">EST_CTX</name> <modifier pos:start="897:13" pos:end="897:13">*</modifier></type><name pos:start="897:14" pos:end="897:16">ctx</name> <init pos:start="897:18" pos:end="897:23">= <expr pos:start="897:20" pos:end="897:23"><name pos:start="897:20" pos:end="897:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="899:5" pos:end="900:5"><expr pos:start="899:5" pos:end="899:15"><name pos:start="899:5" pos:end="899:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="902:5" pos:end="904:7">/*
     * This sets the full list of attributes on the server
     */</comment>
    <expr_stmt pos:start="905:5" pos:end="905:29"><expr pos:start="905:5" pos:end="905:28"><name pos:start="905:5" pos:end="905:9">attrs</name> <operator pos:start="905:11" pos:end="905:11">=</operator> <name pos:start="905:13" pos:end="905:28">US1159_ATTR_TEST</name></expr>;</expr_stmt>

    <comment type="block" pos:start="907:5" pos:end="909:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="910:5" pos:end="910:49"><expr pos:start="910:5" pos:end="910:48"><name pos:start="910:5" pos:end="910:7">key</name> <operator pos:start="910:9" pos:end="910:9">=</operator> <call pos:start="910:11" pos:end="910:48"><name pos:start="910:11" pos:end="910:33">generate_ec_private_key</name><argument_list pos:start="910:34" pos:end="910:48">(<argument pos:start="910:35" pos:end="910:47"><expr pos:start="910:35" pos:end="910:47"><name pos:start="910:35" pos:end="910:47">NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="911:5" pos:end="911:27"><expr pos:start="911:5" pos:end="911:26"><call pos:start="911:5" pos:end="911:26"><name pos:start="911:5" pos:end="911:13">CU_ASSERT</name><argument_list pos:start="911:14" pos:end="911:26">(<argument pos:start="911:15" pos:end="911:25"><expr pos:start="911:15" pos:end="911:25"><name pos:start="911:15" pos:end="911:17">key</name> <operator pos:start="911:19" pos:end="911:20">!=</operator> <name pos:start="911:22" pos:end="911:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="913:5" pos:end="913:25"><expr pos:start="913:5" pos:end="913:24"><name pos:start="913:5" pos:end="913:7">req</name> <operator pos:start="913:9" pos:end="913:9">=</operator> <call pos:start="913:11" pos:end="913:24"><name pos:start="913:11" pos:end="913:22">X509_REQ_new</name><argument_list pos:start="913:23" pos:end="913:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="914:5" pos:end="914:27"><expr pos:start="914:5" pos:end="914:26"><call pos:start="914:5" pos:end="914:26"><name pos:start="914:5" pos:end="914:13">CU_ASSERT</name><argument_list pos:start="914:14" pos:end="914:26">(<argument pos:start="914:15" pos:end="914:25"><expr pos:start="914:15" pos:end="914:25"><name pos:start="914:15" pos:end="914:17">req</name> <operator pos:start="914:19" pos:end="914:20">!=</operator> <name pos:start="914:22" pos:end="914:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="916:5" pos:end="916:52"><expr pos:start="916:5" pos:end="916:51"><name pos:start="916:5" pos:end="916:6">rv</name> <operator pos:start="916:8" pos:end="916:8">=</operator> <call pos:start="916:10" pos:end="916:51"><name pos:start="916:10" pos:end="916:30">populate_x509_request</name><argument_list pos:start="916:31" pos:end="916:51">(<argument pos:start="916:32" pos:end="916:34"><expr pos:start="916:32" pos:end="916:34"><name pos:start="916:32" pos:end="916:34">req</name></expr></argument>, <argument pos:start="916:37" pos:end="916:39"><expr pos:start="916:37" pos:end="916:39"><name pos:start="916:37" pos:end="916:39">key</name></expr></argument>, <argument pos:start="916:42" pos:end="916:50"><expr pos:start="916:42" pos:end="916:50"><literal type="string" pos:start="916:42" pos:end="916:50">"Test 21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="917:5" pos:end="917:34"><expr pos:start="917:5" pos:end="917:33"><call pos:start="917:5" pos:end="917:33"><name pos:start="917:5" pos:end="917:13">CU_ASSERT</name><argument_list pos:start="917:14" pos:end="917:33">(<argument pos:start="917:15" pos:end="917:32"><expr pos:start="917:15" pos:end="917:32"><name pos:start="917:15" pos:end="917:16">rv</name> <operator pos:start="917:18" pos:end="917:19">==</operator> <name pos:start="917:21" pos:end="917:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="919:5" pos:end="921:7">/*
     * Add an attribute with a long value
     */</comment>
    <expr_stmt pos:start="922:5" pos:end="925:20"><expr pos:start="922:5" pos:end="925:19"><name pos:start="922:5" pos:end="922:6">rv</name> <operator pos:start="922:8" pos:end="922:8">=</operator>
            <call pos:start="923:13" pos:end="925:19"><name pos:start="923:13" pos:end="923:37">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="923:38" pos:end="925:19">(<argument pos:start="923:39" pos:end="923:41"><expr pos:start="923:39" pos:end="923:41"><name pos:start="923:39" pos:end="923:41">req</name></expr></argument>, <argument pos:start="923:44" pos:end="923:52"><expr pos:start="923:44" pos:end="923:52"><literal type="string" pos:start="923:44" pos:end="923:52">"2.993.8"</literal></expr></argument>, <argument pos:start="923:55" pos:end="923:66"><expr pos:start="923:55" pos:end="923:66"><name pos:start="923:55" pos:end="923:66">MBSTRING_ASC</name></expr></argument>,
                <argument pos:start="924:17" pos:end="924:394"><expr pos:start="924:17" pos:end="924:394"><operator pos:start="924:17" pos:end="924:17">(</operator><specifier pos:start="924:18" pos:end="924:22">const</specifier> <name pos:start="924:24" pos:end="924:31">unsigned</name> <name pos:start="924:33" pos:end="924:36">char</name><operator pos:start="924:37" pos:end="924:37">*</operator><operator pos:start="924:38" pos:end="924:38">)</operator> <literal type="string" pos:start="924:40" pos:end="924:394">"This is an attribute with a very long value that could potentially cause a problem on the EST server.  0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,
                <argument pos:start="925:17" pos:end="925:18"><expr pos:start="925:17" pos:end="925:18"><operator pos:start="925:17" pos:end="925:17">-</operator><literal type="number" pos:start="925:18" pos:end="925:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="926:5" pos:end="926:23"><expr pos:start="926:5" pos:end="926:22"><call pos:start="926:5" pos:end="926:22"><name pos:start="926:5" pos:end="926:13">CU_ASSERT</name><argument_list pos:start="926:14" pos:end="926:22">(<argument pos:start="926:15" pos:end="926:21"><expr pos:start="926:15" pos:end="926:21"><name pos:start="926:15" pos:end="926:16">rv</name> <operator pos:start="926:18" pos:end="926:19">!=</operator> <literal type="number" pos:start="926:21" pos:end="926:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="927:5" pos:end="929:5"><if pos:start="927:5" pos:end="929:5">if <condition pos:start="927:8" pos:end="927:12">(<expr pos:start="927:9" pos:end="927:11"><operator pos:start="927:9" pos:end="927:9">!</operator><name pos:start="927:10" pos:end="927:11">rv</name></expr>)</condition> <block pos:start="927:14" pos:end="929:5">{<block_content pos:start="928:9" pos:end="928:36">
        <expr_stmt pos:start="928:9" pos:end="928:36"><expr pos:start="928:9" pos:end="928:35"><call pos:start="928:9" pos:end="928:35"><name pos:start="928:9" pos:end="928:27">ERR_print_errors_fp</name><argument_list pos:start="928:28" pos:end="928:35">(<argument pos:start="928:29" pos:end="928:34"><expr pos:start="928:29" pos:end="928:34"><name pos:start="928:29" pos:end="928:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="931:5" pos:end="933:7">/*
     * Add an attribute with a long name
     */</comment>
    <expr_stmt pos:start="934:5" pos:end="937:71"><expr pos:start="934:5" pos:end="937:70"><name pos:start="934:5" pos:end="934:6">rv</name> <operator pos:start="934:8" pos:end="934:8">=</operator>
            <call pos:start="935:13" pos:end="937:70"><name pos:start="935:13" pos:end="935:37">X509_REQ_add1_attr_by_txt</name><argument_list pos:start="935:38" pos:end="937:70">(<argument pos:start="935:39" pos:end="935:41"><expr pos:start="935:39" pos:end="935:41"><name pos:start="935:39" pos:end="935:41">req</name></expr></argument>,
                <argument pos:start="936:17" pos:end="936:179"><expr pos:start="936:17" pos:end="936:179"><literal type="string" pos:start="936:17" pos:end="936:179">"2.993.8.828.85.8142.9999.2.1883.2.993.8.828.85.8142.9999.2.1883.2.993.8.828.85.8142.9999.2.1883.2.993.8.828.85.8142.9999.2.1883.2.993.8.828.85.8142.9999.2.1883.7"</literal></expr></argument>,
                <argument pos:start="937:17" pos:end="937:28"><expr pos:start="937:17" pos:end="937:28"><name pos:start="937:17" pos:end="937:28">MBSTRING_ASC</name></expr></argument>, <argument pos:start="937:31" pos:end="937:65"><expr pos:start="937:31" pos:end="937:65"><operator pos:start="937:31" pos:end="937:31">(</operator><specifier pos:start="937:32" pos:end="937:36">const</specifier> <name pos:start="937:38" pos:end="937:45">unsigned</name> <name pos:start="937:47" pos:end="937:50">char</name><operator pos:start="937:51" pos:end="937:51">*</operator><operator pos:start="937:52" pos:end="937:52">)</operator> <literal type="string" pos:start="937:54" pos:end="937:65">"0123456789"</literal></expr></argument>, <argument pos:start="937:68" pos:end="937:69"><expr pos:start="937:68" pos:end="937:69"><operator pos:start="937:68" pos:end="937:68">-</operator><literal type="number" pos:start="937:69" pos:end="937:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="938:5" pos:end="938:23"><expr pos:start="938:5" pos:end="938:22"><call pos:start="938:5" pos:end="938:22"><name pos:start="938:5" pos:end="938:13">CU_ASSERT</name><argument_list pos:start="938:14" pos:end="938:22">(<argument pos:start="938:15" pos:end="938:21"><expr pos:start="938:15" pos:end="938:21"><name pos:start="938:15" pos:end="938:16">rv</name> <operator pos:start="938:18" pos:end="938:19">!=</operator> <literal type="number" pos:start="938:21" pos:end="938:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="939:5" pos:end="941:5"><if pos:start="939:5" pos:end="941:5">if <condition pos:start="939:8" pos:end="939:12">(<expr pos:start="939:9" pos:end="939:11"><operator pos:start="939:9" pos:end="939:9">!</operator><name pos:start="939:10" pos:end="939:11">rv</name></expr>)</condition> <block pos:start="939:14" pos:end="941:5">{<block_content pos:start="940:9" pos:end="940:36">
        <expr_stmt pos:start="940:9" pos:end="940:36"><expr pos:start="940:9" pos:end="940:35"><call pos:start="940:9" pos:end="940:35"><name pos:start="940:9" pos:end="940:27">ERR_print_errors_fp</name><argument_list pos:start="940:28" pos:end="940:35">(<argument pos:start="940:29" pos:end="940:34"><expr pos:start="940:29" pos:end="940:34"><name pos:start="940:29" pos:end="940:34">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="942:5" pos:end="944:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="945:5" pos:end="945:75"><expr pos:start="945:5" pos:end="945:74"><name pos:start="945:5" pos:end="945:7">ctx</name> <operator pos:start="945:9" pos:end="945:9">=</operator> <call pos:start="945:11" pos:end="945:74"><name pos:start="945:11" pos:end="945:25">est_client_init</name><argument_list pos:start="945:26" pos:end="945:74">(<argument pos:start="945:27" pos:end="945:33"><expr pos:start="945:27" pos:end="945:33"><name pos:start="945:27" pos:end="945:33">cacerts</name></expr></argument>, <argument pos:start="945:36" pos:end="945:46"><expr pos:start="945:36" pos:end="945:46"><name pos:start="945:36" pos:end="945:46">cacerts_len</name></expr></argument>, <argument pos:start="945:49" pos:end="945:67"><expr pos:start="945:49" pos:end="945:67"><name pos:start="945:49" pos:end="945:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="945:70" pos:end="945:73"><expr pos:start="945:70" pos:end="945:73"><name pos:start="945:70" pos:end="945:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="946:5" pos:end="946:27"><expr pos:start="946:5" pos:end="946:26"><call pos:start="946:5" pos:end="946:26"><name pos:start="946:5" pos:end="946:13">CU_ASSERT</name><argument_list pos:start="946:14" pos:end="946:26">(<argument pos:start="946:15" pos:end="946:25"><expr pos:start="946:15" pos:end="946:25"><name pos:start="946:15" pos:end="946:17">ctx</name> <operator pos:start="946:19" pos:end="946:20">!=</operator> <name pos:start="946:22" pos:end="946:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="948:5" pos:end="948:35"><expr pos:start="948:5" pos:end="948:34"><name pos:start="948:5" pos:end="948:6">rv</name> <operator pos:start="948:8" pos:end="948:8">=</operator> <call pos:start="948:10" pos:end="948:34"><name pos:start="948:10" pos:end="948:29">est_client_force_pop</name><argument_list pos:start="948:30" pos:end="948:34">(<argument pos:start="948:31" pos:end="948:33"><expr pos:start="948:31" pos:end="948:33"><name pos:start="948:31" pos:end="948:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="949:5" pos:end="949:34"><expr pos:start="949:5" pos:end="949:33"><call pos:start="949:5" pos:end="949:33"><name pos:start="949:5" pos:end="949:13">CU_ASSERT</name><argument_list pos:start="949:14" pos:end="949:33">(<argument pos:start="949:15" pos:end="949:32"><expr pos:start="949:15" pos:end="949:32"><name pos:start="949:15" pos:end="949:16">rv</name> <operator pos:start="949:18" pos:end="949:19">==</operator> <name pos:start="949:21" pos:end="949:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="951:5" pos:end="953:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="954:5" pos:end="954:70"><expr pos:start="954:5" pos:end="954:69"><name pos:start="954:5" pos:end="954:6">rv</name> <operator pos:start="954:8" pos:end="954:8">=</operator> <call pos:start="954:10" pos:end="954:69"><name pos:start="954:10" pos:end="954:28">est_client_set_auth</name><argument_list pos:start="954:29" pos:end="954:69">(<argument pos:start="954:30" pos:end="954:32"><expr pos:start="954:30" pos:end="954:32"><name pos:start="954:30" pos:end="954:32">ctx</name></expr></argument>, <argument pos:start="954:35" pos:end="954:44"><expr pos:start="954:35" pos:end="954:44"><name pos:start="954:35" pos:end="954:44">US1159_UID</name></expr></argument>, <argument pos:start="954:47" pos:end="954:56"><expr pos:start="954:47" pos:end="954:56"><name pos:start="954:47" pos:end="954:56">US1159_PWD</name></expr></argument>, <argument pos:start="954:59" pos:end="954:62"><expr pos:start="954:59" pos:end="954:62"><name pos:start="954:59" pos:end="954:62">NULL</name></expr></argument>, <argument pos:start="954:65" pos:end="954:68"><expr pos:start="954:65" pos:end="954:68"><name pos:start="954:65" pos:end="954:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="955:5" pos:end="955:34"><expr pos:start="955:5" pos:end="955:33"><call pos:start="955:5" pos:end="955:33"><name pos:start="955:5" pos:end="955:13">CU_ASSERT</name><argument_list pos:start="955:14" pos:end="955:33">(<argument pos:start="955:15" pos:end="955:32"><expr pos:start="955:15" pos:end="955:32"><name pos:start="955:15" pos:end="955:16">rv</name> <operator pos:start="955:18" pos:end="955:19">==</operator> <name pos:start="955:21" pos:end="955:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="957:5" pos:end="959:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="960:5" pos:end="960:75"><expr pos:start="960:5" pos:end="960:74"><call pos:start="960:5" pos:end="960:74"><name pos:start="960:5" pos:end="960:25">est_client_set_server</name><argument_list pos:start="960:26" pos:end="960:74">(<argument pos:start="960:27" pos:end="960:29"><expr pos:start="960:27" pos:end="960:29"><name pos:start="960:27" pos:end="960:29">ctx</name></expr></argument>, <argument pos:start="960:32" pos:end="960:47"><expr pos:start="960:32" pos:end="960:47"><name pos:start="960:32" pos:end="960:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="960:50" pos:end="960:67"><expr pos:start="960:50" pos:end="960:67"><name pos:start="960:50" pos:end="960:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="960:70" pos:end="960:73"><expr pos:start="960:70" pos:end="960:73"><name pos:start="960:70" pos:end="960:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="962:5" pos:end="964:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="965:5" pos:end="965:58"><expr pos:start="965:5" pos:end="965:57"><name pos:start="965:5" pos:end="965:6">rv</name> <operator pos:start="965:8" pos:end="965:8">=</operator> <call pos:start="965:10" pos:end="965:57"><name pos:start="965:10" pos:end="965:30">est_client_enroll_csr</name><argument_list pos:start="965:31" pos:end="965:57">(<argument pos:start="965:32" pos:end="965:34"><expr pos:start="965:32" pos:end="965:34"><name pos:start="965:32" pos:end="965:34">ctx</name></expr></argument>, <argument pos:start="965:37" pos:end="965:39"><expr pos:start="965:37" pos:end="965:39"><name pos:start="965:37" pos:end="965:39">req</name></expr></argument>, <argument pos:start="965:42" pos:end="965:51"><expr pos:start="965:42" pos:end="965:51"><operator pos:start="965:42" pos:end="965:42">&amp;</operator><name pos:start="965:43" pos:end="965:51">pkcs7_len</name></expr></argument>, <argument pos:start="965:54" pos:end="965:56"><expr pos:start="965:54" pos:end="965:56"><name pos:start="965:54" pos:end="965:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="966:5" pos:end="966:34"><expr pos:start="966:5" pos:end="966:33"><call pos:start="966:5" pos:end="966:33"><name pos:start="966:5" pos:end="966:13">CU_ASSERT</name><argument_list pos:start="966:14" pos:end="966:33">(<argument pos:start="966:15" pos:end="966:32"><expr pos:start="966:15" pos:end="966:32"><name pos:start="966:15" pos:end="966:16">rv</name> <operator pos:start="966:18" pos:end="966:19">==</operator> <name pos:start="966:21" pos:end="966:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="968:5" pos:end="970:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="971:5" pos:end="976:5"><if pos:start="971:5" pos:end="976:5">if <condition pos:start="971:8" pos:end="971:27">(<expr pos:start="971:9" pos:end="971:26"><name pos:start="971:9" pos:end="971:10">rv</name> <operator pos:start="971:12" pos:end="971:13">==</operator> <name pos:start="971:15" pos:end="971:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="971:29" pos:end="976:5">{<block_content pos:start="972:9" pos:end="975:38">
        <expr_stmt pos:start="972:9" pos:end="972:37"><expr pos:start="972:9" pos:end="972:36"><name pos:start="972:9" pos:end="972:16">new_cert</name> <operator pos:start="972:18" pos:end="972:18">=</operator> <call pos:start="972:20" pos:end="972:36"><name pos:start="972:20" pos:end="972:25">malloc</name><argument_list pos:start="972:26" pos:end="972:36">(<argument pos:start="972:27" pos:end="972:35"><expr pos:start="972:27" pos:end="972:35"><name pos:start="972:27" pos:end="972:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="973:9" pos:end="973:36"><expr pos:start="973:9" pos:end="973:35"><call pos:start="973:9" pos:end="973:35"><name pos:start="973:9" pos:end="973:17">CU_ASSERT</name><argument_list pos:start="973:18" pos:end="973:35">(<argument pos:start="973:19" pos:end="973:34"><expr pos:start="973:19" pos:end="973:34"><name pos:start="973:19" pos:end="973:26">new_cert</name> <operator pos:start="973:28" pos:end="973:29">!=</operator> <name pos:start="973:31" pos:end="973:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="974:9" pos:end="974:58"><expr pos:start="974:9" pos:end="974:57"><name pos:start="974:9" pos:end="974:10">rv</name> <operator pos:start="974:12" pos:end="974:12">=</operator> <call pos:start="974:14" pos:end="974:57"><name pos:start="974:14" pos:end="974:42">est_client_copy_enrolled_cert</name><argument_list pos:start="974:43" pos:end="974:57">(<argument pos:start="974:44" pos:end="974:46"><expr pos:start="974:44" pos:end="974:46"><name pos:start="974:44" pos:end="974:46">ctx</name></expr></argument>, <argument pos:start="974:49" pos:end="974:56"><expr pos:start="974:49" pos:end="974:56"><name pos:start="974:49" pos:end="974:56">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="975:9" pos:end="975:38"><expr pos:start="975:9" pos:end="975:37"><call pos:start="975:9" pos:end="975:37"><name pos:start="975:9" pos:end="975:17">CU_ASSERT</name><argument_list pos:start="975:18" pos:end="975:37">(<argument pos:start="975:19" pos:end="975:36"><expr pos:start="975:19" pos:end="975:36"><name pos:start="975:19" pos:end="975:20">rv</name> <operator pos:start="975:22" pos:end="975:23">==</operator> <name pos:start="975:25" pos:end="975:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="978:5" pos:end="980:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="981:5" pos:end="982:23"><if pos:start="981:5" pos:end="982:23">if <condition pos:start="981:8" pos:end="981:17">(<expr pos:start="981:9" pos:end="981:16"><name pos:start="981:9" pos:end="981:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="982:9" pos:end="982:23"><block_content pos:start="982:9" pos:end="982:23">
        <expr_stmt pos:start="982:9" pos:end="982:23"><expr pos:start="982:9" pos:end="982:22"><call pos:start="982:9" pos:end="982:22"><name pos:start="982:9" pos:end="982:12">free</name><argument_list pos:start="982:13" pos:end="982:22">(<argument pos:start="982:14" pos:end="982:21"><expr pos:start="982:14" pos:end="982:21"><name pos:start="982:14" pos:end="982:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="983:5" pos:end="984:25"><if pos:start="983:5" pos:end="984:25">if <condition pos:start="983:8" pos:end="983:12">(<expr pos:start="983:9" pos:end="983:11"><name pos:start="983:9" pos:end="983:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="984:9" pos:end="984:25"><block_content pos:start="984:9" pos:end="984:25">
        <expr_stmt pos:start="984:9" pos:end="984:25"><expr pos:start="984:9" pos:end="984:24"><call pos:start="984:9" pos:end="984:24"><name pos:start="984:9" pos:end="984:19">est_destroy</name><argument_list pos:start="984:20" pos:end="984:24">(<argument pos:start="984:21" pos:end="984:23"><expr pos:start="984:21" pos:end="984:23"><name pos:start="984:21" pos:end="984:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="985:5" pos:end="986:27"><if pos:start="985:5" pos:end="986:27">if <condition pos:start="985:8" pos:end="985:12">(<expr pos:start="985:9" pos:end="985:11"><name pos:start="985:9" pos:end="985:11">req</name></expr>)</condition><block type="pseudo" pos:start="986:9" pos:end="986:27"><block_content pos:start="986:9" pos:end="986:27">
        <expr_stmt pos:start="986:9" pos:end="986:27"><expr pos:start="986:9" pos:end="986:26"><call pos:start="986:9" pos:end="986:26"><name pos:start="986:9" pos:end="986:21">X509_REQ_free</name><argument_list pos:start="986:22" pos:end="986:26">(<argument pos:start="986:23" pos:end="986:25"><expr pos:start="986:23" pos:end="986:25"><name pos:start="986:23" pos:end="986:25">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="987:5" pos:end="988:27"><if pos:start="987:5" pos:end="988:27">if <condition pos:start="987:8" pos:end="987:12">(<expr pos:start="987:9" pos:end="987:11"><name pos:start="987:9" pos:end="987:11">key</name></expr>)</condition><block type="pseudo" pos:start="988:9" pos:end="988:27"><block_content pos:start="988:9" pos:end="988:27">
        <expr_stmt pos:start="988:9" pos:end="988:27"><expr pos:start="988:9" pos:end="988:26"><call pos:start="988:9" pos:end="988:26"><name pos:start="988:9" pos:end="988:21">EVP_PKEY_free</name><argument_list pos:start="988:22" pos:end="988:26">(<argument pos:start="988:23" pos:end="988:25"><expr pos:start="988:23" pos:end="988:25"><name pos:start="988:23" pos:end="988:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="991:1" pos:end="995:3">/*
 * This test attempts does a simple enroll when the
 * server has no CSR attributes configured with
 * PoP enabled.
 */</comment>
<function pos:start="996:1" pos:end="1053:1"><type pos:start="996:1" pos:end="996:11"><specifier pos:start="996:1" pos:end="996:6">static</specifier> <name pos:start="996:8" pos:end="996:11">void</name></type> <name pos:start="996:13" pos:end="996:25">us1159_test50</name> <parameter_list pos:start="996:27" pos:end="996:32">(<parameter pos:start="996:28" pos:end="996:31"><decl pos:start="996:28" pos:end="996:31"><type pos:start="996:28" pos:end="996:31"><name pos:start="996:28" pos:end="996:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="997:1" pos:end="1053:1">{<block_content pos:start="998:5" pos:end="1052:27">
    <decl_stmt pos:start="998:5" pos:end="998:25"><decl pos:start="998:5" pos:end="998:24"><type pos:start="998:5" pos:end="998:14"><name pos:start="998:5" pos:end="998:12">EVP_PKEY</name> <modifier pos:start="998:14" pos:end="998:14">*</modifier></type><name pos:start="998:15" pos:end="998:17">key</name> <init pos:start="998:19" pos:end="998:24">= <expr pos:start="998:21" pos:end="998:24"><name pos:start="998:21" pos:end="998:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="999:5" pos:end="999:22"><decl pos:start="999:5" pos:end="999:21"><type pos:start="999:5" pos:end="999:7"><name pos:start="999:5" pos:end="999:7">int</name></type> <name pos:start="999:9" pos:end="999:17">pkcs7_len</name> <init pos:start="999:19" pos:end="999:21">= <expr pos:start="999:21" pos:end="999:21"><literal type="number" pos:start="999:21" pos:end="999:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1000:5" pos:end="1000:11"><decl pos:start="1000:5" pos:end="1000:10"><type pos:start="1000:5" pos:end="1000:7"><name pos:start="1000:5" pos:end="1000:7">int</name></type> <name pos:start="1000:9" pos:end="1000:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1001:5" pos:end="1001:24"><decl pos:start="1001:5" pos:end="1001:23"><type pos:start="1001:5" pos:end="1001:13"><name pos:start="1001:5" pos:end="1001:11">EST_CTX</name> <modifier pos:start="1001:13" pos:end="1001:13">*</modifier></type><name pos:start="1001:14" pos:end="1001:16">ctx</name> <init pos:start="1001:18" pos:end="1001:23">= <expr pos:start="1001:20" pos:end="1001:23"><name pos:start="1001:20" pos:end="1001:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1003:5" pos:end="1004:5"><expr pos:start="1003:5" pos:end="1003:15"><name pos:start="1003:5" pos:end="1003:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="1006:5" pos:end="1006:20"><expr pos:start="1006:5" pos:end="1006:19"><call pos:start="1006:5" pos:end="1006:19"><name pos:start="1006:5" pos:end="1006:17">st_enable_pop</name><argument_list pos:start="1006:18" pos:end="1006:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1008:5" pos:end="1010:7">/*
     * Disable the CSR attr callback on the server context
     */</comment>
    <expr_stmt pos:start="1011:5" pos:end="1011:36"><expr pos:start="1011:5" pos:end="1011:35"><name pos:start="1011:5" pos:end="1011:6">rv</name> <operator pos:start="1011:8" pos:end="1011:8">=</operator> <call pos:start="1011:10" pos:end="1011:35"><name pos:start="1011:10" pos:end="1011:23">est_set_csr_cb</name><argument_list pos:start="1011:24" pos:end="1011:35">(<argument pos:start="1011:25" pos:end="1011:28"><expr pos:start="1011:25" pos:end="1011:28"><name pos:start="1011:25" pos:end="1011:28">ectx</name></expr></argument>, <argument pos:start="1011:31" pos:end="1011:34"><expr pos:start="1011:31" pos:end="1011:34"><name pos:start="1011:31" pos:end="1011:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1012:5" pos:end="1012:34"><expr pos:start="1012:5" pos:end="1012:33"><call pos:start="1012:5" pos:end="1012:33"><name pos:start="1012:5" pos:end="1012:13">CU_ASSERT</name><argument_list pos:start="1012:14" pos:end="1012:33">(<argument pos:start="1012:15" pos:end="1012:32"><expr pos:start="1012:15" pos:end="1012:32"><name pos:start="1012:15" pos:end="1012:16">rv</name> <operator pos:start="1012:18" pos:end="1012:19">==</operator> <name pos:start="1012:21" pos:end="1012:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1014:5" pos:end="1016:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="1017:5" pos:end="1017:49"><expr pos:start="1017:5" pos:end="1017:48"><name pos:start="1017:5" pos:end="1017:7">key</name> <operator pos:start="1017:9" pos:end="1017:9">=</operator> <call pos:start="1017:11" pos:end="1017:48"><name pos:start="1017:11" pos:end="1017:33">generate_ec_private_key</name><argument_list pos:start="1017:34" pos:end="1017:48">(<argument pos:start="1017:35" pos:end="1017:47"><expr pos:start="1017:35" pos:end="1017:47"><name pos:start="1017:35" pos:end="1017:47">NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1018:5" pos:end="1018:27"><expr pos:start="1018:5" pos:end="1018:26"><call pos:start="1018:5" pos:end="1018:26"><name pos:start="1018:5" pos:end="1018:13">CU_ASSERT</name><argument_list pos:start="1018:14" pos:end="1018:26">(<argument pos:start="1018:15" pos:end="1018:25"><expr pos:start="1018:15" pos:end="1018:25"><name pos:start="1018:15" pos:end="1018:17">key</name> <operator pos:start="1018:19" pos:end="1018:20">!=</operator> <name pos:start="1018:22" pos:end="1018:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1020:5" pos:end="1022:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="1023:5" pos:end="1023:75"><expr pos:start="1023:5" pos:end="1023:74"><name pos:start="1023:5" pos:end="1023:7">ctx</name> <operator pos:start="1023:9" pos:end="1023:9">=</operator> <call pos:start="1023:11" pos:end="1023:74"><name pos:start="1023:11" pos:end="1023:25">est_client_init</name><argument_list pos:start="1023:26" pos:end="1023:74">(<argument pos:start="1023:27" pos:end="1023:33"><expr pos:start="1023:27" pos:end="1023:33"><name pos:start="1023:27" pos:end="1023:33">cacerts</name></expr></argument>, <argument pos:start="1023:36" pos:end="1023:46"><expr pos:start="1023:36" pos:end="1023:46"><name pos:start="1023:36" pos:end="1023:46">cacerts_len</name></expr></argument>, <argument pos:start="1023:49" pos:end="1023:67"><expr pos:start="1023:49" pos:end="1023:67"><name pos:start="1023:49" pos:end="1023:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="1023:70" pos:end="1023:73"><expr pos:start="1023:70" pos:end="1023:73"><name pos:start="1023:70" pos:end="1023:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1024:5" pos:end="1024:27"><expr pos:start="1024:5" pos:end="1024:26"><call pos:start="1024:5" pos:end="1024:26"><name pos:start="1024:5" pos:end="1024:13">CU_ASSERT</name><argument_list pos:start="1024:14" pos:end="1024:26">(<argument pos:start="1024:15" pos:end="1024:25"><expr pos:start="1024:15" pos:end="1024:25"><name pos:start="1024:15" pos:end="1024:17">ctx</name> <operator pos:start="1024:19" pos:end="1024:20">!=</operator> <name pos:start="1024:22" pos:end="1024:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1026:5" pos:end="1026:35"><expr pos:start="1026:5" pos:end="1026:34"><name pos:start="1026:5" pos:end="1026:6">rv</name> <operator pos:start="1026:8" pos:end="1026:8">=</operator> <call pos:start="1026:10" pos:end="1026:34"><name pos:start="1026:10" pos:end="1026:29">est_client_force_pop</name><argument_list pos:start="1026:30" pos:end="1026:34">(<argument pos:start="1026:31" pos:end="1026:33"><expr pos:start="1026:31" pos:end="1026:33"><name pos:start="1026:31" pos:end="1026:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1027:5" pos:end="1027:34"><expr pos:start="1027:5" pos:end="1027:33"><call pos:start="1027:5" pos:end="1027:33"><name pos:start="1027:5" pos:end="1027:13">CU_ASSERT</name><argument_list pos:start="1027:14" pos:end="1027:33">(<argument pos:start="1027:15" pos:end="1027:32"><expr pos:start="1027:15" pos:end="1027:32"><name pos:start="1027:15" pos:end="1027:16">rv</name> <operator pos:start="1027:18" pos:end="1027:19">==</operator> <name pos:start="1027:21" pos:end="1027:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1029:5" pos:end="1031:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1032:5" pos:end="1032:70"><expr pos:start="1032:5" pos:end="1032:69"><name pos:start="1032:5" pos:end="1032:6">rv</name> <operator pos:start="1032:8" pos:end="1032:8">=</operator> <call pos:start="1032:10" pos:end="1032:69"><name pos:start="1032:10" pos:end="1032:28">est_client_set_auth</name><argument_list pos:start="1032:29" pos:end="1032:69">(<argument pos:start="1032:30" pos:end="1032:32"><expr pos:start="1032:30" pos:end="1032:32"><name pos:start="1032:30" pos:end="1032:32">ctx</name></expr></argument>, <argument pos:start="1032:35" pos:end="1032:44"><expr pos:start="1032:35" pos:end="1032:44"><name pos:start="1032:35" pos:end="1032:44">US1159_UID</name></expr></argument>, <argument pos:start="1032:47" pos:end="1032:56"><expr pos:start="1032:47" pos:end="1032:56"><name pos:start="1032:47" pos:end="1032:56">US1159_PWD</name></expr></argument>, <argument pos:start="1032:59" pos:end="1032:62"><expr pos:start="1032:59" pos:end="1032:62"><name pos:start="1032:59" pos:end="1032:62">NULL</name></expr></argument>, <argument pos:start="1032:65" pos:end="1032:68"><expr pos:start="1032:65" pos:end="1032:68"><name pos:start="1032:65" pos:end="1032:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1033:5" pos:end="1033:34"><expr pos:start="1033:5" pos:end="1033:33"><call pos:start="1033:5" pos:end="1033:33"><name pos:start="1033:5" pos:end="1033:13">CU_ASSERT</name><argument_list pos:start="1033:14" pos:end="1033:33">(<argument pos:start="1033:15" pos:end="1033:32"><expr pos:start="1033:15" pos:end="1033:32"><name pos:start="1033:15" pos:end="1033:16">rv</name> <operator pos:start="1033:18" pos:end="1033:19">==</operator> <name pos:start="1033:21" pos:end="1033:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1035:5" pos:end="1037:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1038:5" pos:end="1038:75"><expr pos:start="1038:5" pos:end="1038:74"><call pos:start="1038:5" pos:end="1038:74"><name pos:start="1038:5" pos:end="1038:25">est_client_set_server</name><argument_list pos:start="1038:26" pos:end="1038:74">(<argument pos:start="1038:27" pos:end="1038:29"><expr pos:start="1038:27" pos:end="1038:29"><name pos:start="1038:27" pos:end="1038:29">ctx</name></expr></argument>, <argument pos:start="1038:32" pos:end="1038:47"><expr pos:start="1038:32" pos:end="1038:47"><name pos:start="1038:32" pos:end="1038:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="1038:50" pos:end="1038:67"><expr pos:start="1038:50" pos:end="1038:67"><name pos:start="1038:50" pos:end="1038:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="1038:70" pos:end="1038:73"><expr pos:start="1038:70" pos:end="1038:73"><name pos:start="1038:70" pos:end="1038:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1040:5" pos:end="1042:7">/*
     * Enroll a new cert
     */</comment>
    <expr_stmt pos:start="1043:5" pos:end="1043:60"><expr pos:start="1043:5" pos:end="1043:59"><name pos:start="1043:5" pos:end="1043:6">rv</name> <operator pos:start="1043:8" pos:end="1043:8">=</operator> <call pos:start="1043:10" pos:end="1043:59"><name pos:start="1043:10" pos:end="1043:26">est_client_enroll</name><argument_list pos:start="1043:27" pos:end="1043:59">(<argument pos:start="1043:28" pos:end="1043:30"><expr pos:start="1043:28" pos:end="1043:30"><name pos:start="1043:28" pos:end="1043:30">ctx</name></expr></argument>, <argument pos:start="1043:33" pos:end="1043:41"><expr pos:start="1043:33" pos:end="1043:41"><literal type="string" pos:start="1043:33" pos:end="1043:41">"Test 50"</literal></expr></argument>, <argument pos:start="1043:44" pos:end="1043:53"><expr pos:start="1043:44" pos:end="1043:53"><operator pos:start="1043:44" pos:end="1043:44">&amp;</operator><name pos:start="1043:45" pos:end="1043:53">pkcs7_len</name></expr></argument>, <argument pos:start="1043:56" pos:end="1043:58"><expr pos:start="1043:56" pos:end="1043:58"><name pos:start="1043:56" pos:end="1043:58">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1044:5" pos:end="1044:34"><expr pos:start="1044:5" pos:end="1044:33"><call pos:start="1044:5" pos:end="1044:33"><name pos:start="1044:5" pos:end="1044:13">CU_ASSERT</name><argument_list pos:start="1044:14" pos:end="1044:33">(<argument pos:start="1044:15" pos:end="1044:32"><expr pos:start="1044:15" pos:end="1044:32"><name pos:start="1044:15" pos:end="1044:16">rv</name> <operator pos:start="1044:18" pos:end="1044:19">==</operator> <name pos:start="1044:21" pos:end="1044:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1046:5" pos:end="1048:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="1049:5" pos:end="1050:25"><if pos:start="1049:5" pos:end="1050:25">if <condition pos:start="1049:8" pos:end="1049:12">(<expr pos:start="1049:9" pos:end="1049:11"><name pos:start="1049:9" pos:end="1049:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="1050:9" pos:end="1050:25"><block_content pos:start="1050:9" pos:end="1050:25">
        <expr_stmt pos:start="1050:9" pos:end="1050:25"><expr pos:start="1050:9" pos:end="1050:24"><call pos:start="1050:9" pos:end="1050:24"><name pos:start="1050:9" pos:end="1050:19">est_destroy</name><argument_list pos:start="1050:20" pos:end="1050:24">(<argument pos:start="1050:21" pos:end="1050:23"><expr pos:start="1050:21" pos:end="1050:23"><name pos:start="1050:21" pos:end="1050:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1051:5" pos:end="1052:27"><if pos:start="1051:5" pos:end="1052:27">if <condition pos:start="1051:8" pos:end="1051:12">(<expr pos:start="1051:9" pos:end="1051:11"><name pos:start="1051:9" pos:end="1051:11">key</name></expr>)</condition><block type="pseudo" pos:start="1052:9" pos:end="1052:27"><block_content pos:start="1052:9" pos:end="1052:27">
        <expr_stmt pos:start="1052:9" pos:end="1052:27"><expr pos:start="1052:9" pos:end="1052:26"><call pos:start="1052:9" pos:end="1052:26"><name pos:start="1052:9" pos:end="1052:21">EVP_PKEY_free</name><argument_list pos:start="1052:22" pos:end="1052:26">(<argument pos:start="1052:23" pos:end="1052:25"><expr pos:start="1052:23" pos:end="1052:25"><name pos:start="1052:23" pos:end="1052:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1055:1" pos:end="1059:3">/*
 * This test attempts does a simple enroll when the
 * server has no CSR attributes configured with
 * PoP disabled.
 */</comment>
<function pos:start="1060:1" pos:end="1114:1"><type pos:start="1060:1" pos:end="1060:11"><specifier pos:start="1060:1" pos:end="1060:6">static</specifier> <name pos:start="1060:8" pos:end="1060:11">void</name></type> <name pos:start="1060:13" pos:end="1060:25">us1159_test51</name> <parameter_list pos:start="1060:27" pos:end="1060:32">(<parameter pos:start="1060:28" pos:end="1060:31"><decl pos:start="1060:28" pos:end="1060:31"><type pos:start="1060:28" pos:end="1060:31"><name pos:start="1060:28" pos:end="1060:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1061:1" pos:end="1114:1">{<block_content pos:start="1062:5" pos:end="1113:27">
    <decl_stmt pos:start="1062:5" pos:end="1062:25"><decl pos:start="1062:5" pos:end="1062:24"><type pos:start="1062:5" pos:end="1062:14"><name pos:start="1062:5" pos:end="1062:12">EVP_PKEY</name> <modifier pos:start="1062:14" pos:end="1062:14">*</modifier></type><name pos:start="1062:15" pos:end="1062:17">key</name> <init pos:start="1062:19" pos:end="1062:24">= <expr pos:start="1062:21" pos:end="1062:24"><name pos:start="1062:21" pos:end="1062:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1063:5" pos:end="1063:22"><decl pos:start="1063:5" pos:end="1063:21"><type pos:start="1063:5" pos:end="1063:7"><name pos:start="1063:5" pos:end="1063:7">int</name></type> <name pos:start="1063:9" pos:end="1063:17">pkcs7_len</name> <init pos:start="1063:19" pos:end="1063:21">= <expr pos:start="1063:21" pos:end="1063:21"><literal type="number" pos:start="1063:21" pos:end="1063:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1064:5" pos:end="1064:11"><decl pos:start="1064:5" pos:end="1064:10"><type pos:start="1064:5" pos:end="1064:7"><name pos:start="1064:5" pos:end="1064:7">int</name></type> <name pos:start="1064:9" pos:end="1064:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1065:5" pos:end="1065:24"><decl pos:start="1065:5" pos:end="1065:23"><type pos:start="1065:5" pos:end="1065:13"><name pos:start="1065:5" pos:end="1065:11">EST_CTX</name> <modifier pos:start="1065:13" pos:end="1065:13">*</modifier></type><name pos:start="1065:14" pos:end="1065:16">ctx</name> <init pos:start="1065:18" pos:end="1065:23">= <expr pos:start="1065:20" pos:end="1065:23"><name pos:start="1065:20" pos:end="1065:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1067:5" pos:end="1068:5"><expr pos:start="1067:5" pos:end="1067:15"><name pos:start="1067:5" pos:end="1067:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="1070:5" pos:end="1070:21"><expr pos:start="1070:5" pos:end="1070:20"><call pos:start="1070:5" pos:end="1070:20"><name pos:start="1070:5" pos:end="1070:18">st_disable_pop</name><argument_list pos:start="1070:19" pos:end="1070:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1072:5" pos:end="1074:7">/*
     * Disable the CSR attr callback on the server context
     */</comment>
    <expr_stmt pos:start="1075:5" pos:end="1075:36"><expr pos:start="1075:5" pos:end="1075:35"><name pos:start="1075:5" pos:end="1075:6">rv</name> <operator pos:start="1075:8" pos:end="1075:8">=</operator> <call pos:start="1075:10" pos:end="1075:35"><name pos:start="1075:10" pos:end="1075:23">est_set_csr_cb</name><argument_list pos:start="1075:24" pos:end="1075:35">(<argument pos:start="1075:25" pos:end="1075:28"><expr pos:start="1075:25" pos:end="1075:28"><name pos:start="1075:25" pos:end="1075:28">ectx</name></expr></argument>, <argument pos:start="1075:31" pos:end="1075:34"><expr pos:start="1075:31" pos:end="1075:34"><name pos:start="1075:31" pos:end="1075:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1076:5" pos:end="1076:34"><expr pos:start="1076:5" pos:end="1076:33"><call pos:start="1076:5" pos:end="1076:33"><name pos:start="1076:5" pos:end="1076:13">CU_ASSERT</name><argument_list pos:start="1076:14" pos:end="1076:33">(<argument pos:start="1076:15" pos:end="1076:32"><expr pos:start="1076:15" pos:end="1076:32"><name pos:start="1076:15" pos:end="1076:16">rv</name> <operator pos:start="1076:18" pos:end="1076:19">==</operator> <name pos:start="1076:21" pos:end="1076:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1078:5" pos:end="1080:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="1081:5" pos:end="1081:49"><expr pos:start="1081:5" pos:end="1081:48"><name pos:start="1081:5" pos:end="1081:7">key</name> <operator pos:start="1081:9" pos:end="1081:9">=</operator> <call pos:start="1081:11" pos:end="1081:48"><name pos:start="1081:11" pos:end="1081:33">generate_ec_private_key</name><argument_list pos:start="1081:34" pos:end="1081:48">(<argument pos:start="1081:35" pos:end="1081:47"><expr pos:start="1081:35" pos:end="1081:47"><name pos:start="1081:35" pos:end="1081:47">NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1082:5" pos:end="1082:27"><expr pos:start="1082:5" pos:end="1082:26"><call pos:start="1082:5" pos:end="1082:26"><name pos:start="1082:5" pos:end="1082:13">CU_ASSERT</name><argument_list pos:start="1082:14" pos:end="1082:26">(<argument pos:start="1082:15" pos:end="1082:25"><expr pos:start="1082:15" pos:end="1082:25"><name pos:start="1082:15" pos:end="1082:17">key</name> <operator pos:start="1082:19" pos:end="1082:20">!=</operator> <name pos:start="1082:22" pos:end="1082:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1084:5" pos:end="1086:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="1087:5" pos:end="1087:75"><expr pos:start="1087:5" pos:end="1087:74"><name pos:start="1087:5" pos:end="1087:7">ctx</name> <operator pos:start="1087:9" pos:end="1087:9">=</operator> <call pos:start="1087:11" pos:end="1087:74"><name pos:start="1087:11" pos:end="1087:25">est_client_init</name><argument_list pos:start="1087:26" pos:end="1087:74">(<argument pos:start="1087:27" pos:end="1087:33"><expr pos:start="1087:27" pos:end="1087:33"><name pos:start="1087:27" pos:end="1087:33">cacerts</name></expr></argument>, <argument pos:start="1087:36" pos:end="1087:46"><expr pos:start="1087:36" pos:end="1087:46"><name pos:start="1087:36" pos:end="1087:46">cacerts_len</name></expr></argument>, <argument pos:start="1087:49" pos:end="1087:67"><expr pos:start="1087:49" pos:end="1087:67"><name pos:start="1087:49" pos:end="1087:67">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="1087:70" pos:end="1087:73"><expr pos:start="1087:70" pos:end="1087:73"><name pos:start="1087:70" pos:end="1087:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1088:5" pos:end="1088:27"><expr pos:start="1088:5" pos:end="1088:26"><call pos:start="1088:5" pos:end="1088:26"><name pos:start="1088:5" pos:end="1088:13">CU_ASSERT</name><argument_list pos:start="1088:14" pos:end="1088:26">(<argument pos:start="1088:15" pos:end="1088:25"><expr pos:start="1088:15" pos:end="1088:25"><name pos:start="1088:15" pos:end="1088:17">ctx</name> <operator pos:start="1088:19" pos:end="1088:20">!=</operator> <name pos:start="1088:22" pos:end="1088:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1090:5" pos:end="1092:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1093:5" pos:end="1093:70"><expr pos:start="1093:5" pos:end="1093:69"><name pos:start="1093:5" pos:end="1093:6">rv</name> <operator pos:start="1093:8" pos:end="1093:8">=</operator> <call pos:start="1093:10" pos:end="1093:69"><name pos:start="1093:10" pos:end="1093:28">est_client_set_auth</name><argument_list pos:start="1093:29" pos:end="1093:69">(<argument pos:start="1093:30" pos:end="1093:32"><expr pos:start="1093:30" pos:end="1093:32"><name pos:start="1093:30" pos:end="1093:32">ctx</name></expr></argument>, <argument pos:start="1093:35" pos:end="1093:44"><expr pos:start="1093:35" pos:end="1093:44"><name pos:start="1093:35" pos:end="1093:44">US1159_UID</name></expr></argument>, <argument pos:start="1093:47" pos:end="1093:56"><expr pos:start="1093:47" pos:end="1093:56"><name pos:start="1093:47" pos:end="1093:56">US1159_PWD</name></expr></argument>, <argument pos:start="1093:59" pos:end="1093:62"><expr pos:start="1093:59" pos:end="1093:62"><name pos:start="1093:59" pos:end="1093:62">NULL</name></expr></argument>, <argument pos:start="1093:65" pos:end="1093:68"><expr pos:start="1093:65" pos:end="1093:68"><name pos:start="1093:65" pos:end="1093:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1094:5" pos:end="1094:34"><expr pos:start="1094:5" pos:end="1094:33"><call pos:start="1094:5" pos:end="1094:33"><name pos:start="1094:5" pos:end="1094:13">CU_ASSERT</name><argument_list pos:start="1094:14" pos:end="1094:33">(<argument pos:start="1094:15" pos:end="1094:32"><expr pos:start="1094:15" pos:end="1094:32"><name pos:start="1094:15" pos:end="1094:16">rv</name> <operator pos:start="1094:18" pos:end="1094:19">==</operator> <name pos:start="1094:21" pos:end="1094:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1096:5" pos:end="1098:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1099:5" pos:end="1099:75"><expr pos:start="1099:5" pos:end="1099:74"><call pos:start="1099:5" pos:end="1099:74"><name pos:start="1099:5" pos:end="1099:25">est_client_set_server</name><argument_list pos:start="1099:26" pos:end="1099:74">(<argument pos:start="1099:27" pos:end="1099:29"><expr pos:start="1099:27" pos:end="1099:29"><name pos:start="1099:27" pos:end="1099:29">ctx</name></expr></argument>, <argument pos:start="1099:32" pos:end="1099:47"><expr pos:start="1099:32" pos:end="1099:47"><name pos:start="1099:32" pos:end="1099:47">US1159_SERVER_IP</name></expr></argument>, <argument pos:start="1099:50" pos:end="1099:67"><expr pos:start="1099:50" pos:end="1099:67"><name pos:start="1099:50" pos:end="1099:67">US1159_SERVER_PORT</name></expr></argument>, <argument pos:start="1099:70" pos:end="1099:73"><expr pos:start="1099:70" pos:end="1099:73"><name pos:start="1099:70" pos:end="1099:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1101:5" pos:end="1103:7">/*
     * Enroll a new cert
     */</comment>
    <expr_stmt pos:start="1104:5" pos:end="1104:60"><expr pos:start="1104:5" pos:end="1104:59"><name pos:start="1104:5" pos:end="1104:6">rv</name> <operator pos:start="1104:8" pos:end="1104:8">=</operator> <call pos:start="1104:10" pos:end="1104:59"><name pos:start="1104:10" pos:end="1104:26">est_client_enroll</name><argument_list pos:start="1104:27" pos:end="1104:59">(<argument pos:start="1104:28" pos:end="1104:30"><expr pos:start="1104:28" pos:end="1104:30"><name pos:start="1104:28" pos:end="1104:30">ctx</name></expr></argument>, <argument pos:start="1104:33" pos:end="1104:41"><expr pos:start="1104:33" pos:end="1104:41"><literal type="string" pos:start="1104:33" pos:end="1104:41">"Test 51"</literal></expr></argument>, <argument pos:start="1104:44" pos:end="1104:53"><expr pos:start="1104:44" pos:end="1104:53"><operator pos:start="1104:44" pos:end="1104:44">&amp;</operator><name pos:start="1104:45" pos:end="1104:53">pkcs7_len</name></expr></argument>, <argument pos:start="1104:56" pos:end="1104:58"><expr pos:start="1104:56" pos:end="1104:58"><name pos:start="1104:56" pos:end="1104:58">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1105:5" pos:end="1105:34"><expr pos:start="1105:5" pos:end="1105:33"><call pos:start="1105:5" pos:end="1105:33"><name pos:start="1105:5" pos:end="1105:13">CU_ASSERT</name><argument_list pos:start="1105:14" pos:end="1105:33">(<argument pos:start="1105:15" pos:end="1105:32"><expr pos:start="1105:15" pos:end="1105:32"><name pos:start="1105:15" pos:end="1105:16">rv</name> <operator pos:start="1105:18" pos:end="1105:19">==</operator> <name pos:start="1105:21" pos:end="1105:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1107:5" pos:end="1109:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="1110:5" pos:end="1111:25"><if pos:start="1110:5" pos:end="1111:25">if <condition pos:start="1110:8" pos:end="1110:12">(<expr pos:start="1110:9" pos:end="1110:11"><name pos:start="1110:9" pos:end="1110:11">ctx</name></expr>)</condition><block type="pseudo" pos:start="1111:9" pos:end="1111:25"><block_content pos:start="1111:9" pos:end="1111:25">
        <expr_stmt pos:start="1111:9" pos:end="1111:25"><expr pos:start="1111:9" pos:end="1111:24"><call pos:start="1111:9" pos:end="1111:24"><name pos:start="1111:9" pos:end="1111:19">est_destroy</name><argument_list pos:start="1111:20" pos:end="1111:24">(<argument pos:start="1111:21" pos:end="1111:23"><expr pos:start="1111:21" pos:end="1111:23"><name pos:start="1111:21" pos:end="1111:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="1112:5" pos:end="1113:27"><if pos:start="1112:5" pos:end="1113:27">if <condition pos:start="1112:8" pos:end="1112:12">(<expr pos:start="1112:9" pos:end="1112:11"><name pos:start="1112:9" pos:end="1112:11">key</name></expr>)</condition><block type="pseudo" pos:start="1113:9" pos:end="1113:27"><block_content pos:start="1113:9" pos:end="1113:27">
        <expr_stmt pos:start="1113:9" pos:end="1113:27"><expr pos:start="1113:9" pos:end="1113:26"><call pos:start="1113:9" pos:end="1113:26"><name pos:start="1113:9" pos:end="1113:21">EVP_PKEY_free</name><argument_list pos:start="1113:22" pos:end="1113:26">(<argument pos:start="1113:23" pos:end="1113:25"><expr pos:start="1113:23" pos:end="1113:25"><name pos:start="1113:23" pos:end="1113:25">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1116:1" pos:end="1119:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="1120:1" pos:end="1152:1"><type pos:start="1120:1" pos:end="1120:3"><name pos:start="1120:1" pos:end="1120:3">int</name></type> <name pos:start="1120:5" pos:end="1120:20">us1159_add_suite</name> <parameter_list pos:start="1120:22" pos:end="1120:27">(<parameter pos:start="1120:23" pos:end="1120:26"><decl pos:start="1120:23" pos:end="1120:26"><type pos:start="1120:23" pos:end="1120:26"><name pos:start="1120:23" pos:end="1120:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1121:1" pos:end="1152:1">{<block_content pos:start="1123:5" pos:end="1152:0">
<cpp:ifdef pos:start="1122:1" pos:end="1122:17">#<cpp:directive pos:start="1122:2" pos:end="1122:6">ifdef</cpp:directive> <name pos:start="1122:8" pos:end="1122:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="1123:5" pos:end="1123:28"><decl pos:start="1123:5" pos:end="1123:27"><type pos:start="1123:5" pos:end="1123:13"><name pos:start="1123:5" pos:end="1123:13">CU_pSuite</name></type> <name pos:start="1123:15" pos:end="1123:20">pSuite</name> <init pos:start="1123:22" pos:end="1123:27">= <expr pos:start="1123:24" pos:end="1123:27"><name pos:start="1123:24" pos:end="1123:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1125:5" pos:end="1125:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="1126:5" pos:end="1128:34"><expr pos:start="1126:5" pos:end="1128:33"><name pos:start="1126:5" pos:end="1126:10">pSuite</name> <operator pos:start="1126:12" pos:end="1126:12">=</operator> <call pos:start="1126:14" pos:end="1128:33"><name pos:start="1126:14" pos:end="1126:25">CU_add_suite</name><argument_list pos:start="1126:26" pos:end="1128:33">(<argument pos:start="1126:27" pos:end="1126:51"><expr pos:start="1126:27" pos:end="1126:51"><literal type="string" pos:start="1126:27" pos:end="1126:51">"us1159_csr_attr_enforce"</literal></expr></argument>,
            <argument pos:start="1127:13" pos:end="1127:29"><expr pos:start="1127:13" pos:end="1127:29"><name pos:start="1127:13" pos:end="1127:29">us1159_init_suite</name></expr></argument>,
            <argument pos:start="1128:13" pos:end="1128:32"><expr pos:start="1128:13" pos:end="1128:32"><name pos:start="1128:13" pos:end="1128:32">us1159_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1129:5" pos:end="1132:5"><if pos:start="1129:5" pos:end="1132:5">if <condition pos:start="1129:8" pos:end="1129:23">(<expr pos:start="1129:9" pos:end="1129:22"><name pos:start="1129:9" pos:end="1129:12">NULL</name> <operator pos:start="1129:14" pos:end="1129:15">==</operator> <name pos:start="1129:17" pos:end="1129:22">pSuite</name></expr>)</condition> <block pos:start="1129:25" pos:end="1132:5">{<block_content pos:start="1130:9" pos:end="1131:30">
        <expr_stmt pos:start="1130:9" pos:end="1130:30"><expr pos:start="1130:9" pos:end="1130:29"><call pos:start="1130:9" pos:end="1130:29"><name pos:start="1130:9" pos:end="1130:27">CU_cleanup_registry</name><argument_list pos:start="1130:28" pos:end="1130:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1131:9" pos:end="1131:30">return <expr pos:start="1131:16" pos:end="1131:29"><call pos:start="1131:16" pos:end="1131:29"><name pos:start="1131:16" pos:end="1131:27">CU_get_error</name><argument_list pos:start="1131:28" pos:end="1131:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1134:5" pos:end="1134:36">/* add the tests to the suite */</comment>
    <comment type="block" pos:start="1135:5" pos:end="1135:71">/* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */</comment>
    <if_stmt pos:start="1136:5" pos:end="1148:5"><if pos:start="1136:5" pos:end="1148:5">if <condition pos:start="1136:8" pos:end="1144:87">(<expr pos:start="1136:9" pos:end="1144:86"><operator pos:start="1136:9" pos:end="1136:9">(</operator><name pos:start="1136:10" pos:end="1136:13">NULL</name> <operator pos:start="1136:15" pos:end="1136:16">==</operator> <call pos:start="1136:18" pos:end="1136:82"><name pos:start="1136:18" pos:end="1136:28">CU_add_test</name><argument_list pos:start="1136:29" pos:end="1136:82">(<argument pos:start="1136:30" pos:end="1136:35"><expr pos:start="1136:30" pos:end="1136:35"><name pos:start="1136:30" pos:end="1136:35">pSuite</name></expr></argument>, <argument pos:start="1136:38" pos:end="1136:67"><expr pos:start="1136:38" pos:end="1136:67"><literal type="string" pos:start="1136:38" pos:end="1136:67">"No attributes required w/pop"</literal></expr></argument>, <argument pos:start="1136:70" pos:end="1136:81"><expr pos:start="1136:70" pos:end="1136:81"><name pos:start="1136:70" pos:end="1136:81">us1159_test1</name></expr></argument>)</argument_list></call><operator pos:start="1136:83" pos:end="1136:83">)</operator> <operator pos:start="1136:85" pos:end="1136:86">||</operator>
        <operator pos:start="1137:9" pos:end="1137:9">(</operator><name pos:start="1137:10" pos:end="1137:13">NULL</name> <operator pos:start="1137:15" pos:end="1137:16">==</operator> <call pos:start="1137:18" pos:end="1137:83"><name pos:start="1137:18" pos:end="1137:28">CU_add_test</name><argument_list pos:start="1137:29" pos:end="1137:83">(<argument pos:start="1137:30" pos:end="1137:35"><expr pos:start="1137:30" pos:end="1137:35"><name pos:start="1137:30" pos:end="1137:35">pSuite</name></expr></argument>, <argument pos:start="1137:38" pos:end="1137:68"><expr pos:start="1137:38" pos:end="1137:68"><literal type="string" pos:start="1137:38" pos:end="1137:68">"All attributes provided w/pop"</literal></expr></argument>, <argument pos:start="1137:71" pos:end="1137:82"><expr pos:start="1137:71" pos:end="1137:82"><name pos:start="1137:71" pos:end="1137:82">us1159_test2</name></expr></argument>)</argument_list></call><operator pos:start="1137:84" pos:end="1137:84">)</operator> <operator pos:start="1137:86" pos:end="1137:87">||</operator>
        <operator pos:start="1138:9" pos:end="1138:9">(</operator><name pos:start="1138:10" pos:end="1138:13">NULL</name> <operator pos:start="1138:15" pos:end="1138:16">==</operator> <call pos:start="1138:18" pos:end="1138:85"><name pos:start="1138:18" pos:end="1138:28">CU_add_test</name><argument_list pos:start="1138:29" pos:end="1138:85">(<argument pos:start="1138:30" pos:end="1138:35"><expr pos:start="1138:30" pos:end="1138:35"><name pos:start="1138:30" pos:end="1138:35">pSuite</name></expr></argument>, <argument pos:start="1138:38" pos:end="1138:70"><expr pos:start="1138:38" pos:end="1138:70"><literal type="string" pos:start="1138:38" pos:end="1138:70">"EC public key wrong curve w/pop"</literal></expr></argument>, <argument pos:start="1138:73" pos:end="1138:84"><expr pos:start="1138:73" pos:end="1138:84"><name pos:start="1138:73" pos:end="1138:84">us1159_test3</name></expr></argument>)</argument_list></call><operator pos:start="1138:86" pos:end="1138:86">)</operator> <operator pos:start="1138:88" pos:end="1138:89">||</operator>
        <operator pos:start="1139:9" pos:end="1139:9">(</operator><name pos:start="1139:10" pos:end="1139:13">NULL</name> <operator pos:start="1139:15" pos:end="1139:16">==</operator> <call pos:start="1139:18" pos:end="1139:93"><name pos:start="1139:18" pos:end="1139:28">CU_add_test</name><argument_list pos:start="1139:29" pos:end="1139:93">(<argument pos:start="1139:30" pos:end="1139:35"><expr pos:start="1139:30" pos:end="1139:35"><name pos:start="1139:30" pos:end="1139:35">pSuite</name></expr></argument>, <argument pos:start="1139:38" pos:end="1139:78"><expr pos:start="1139:38" pos:end="1139:78"><literal type="string" pos:start="1139:38" pos:end="1139:78">"Wrong hash algorithm in signature w/pop"</literal></expr></argument>, <argument pos:start="1139:81" pos:end="1139:92"><expr pos:start="1139:81" pos:end="1139:92"><name pos:start="1139:81" pos:end="1139:92">us1159_test4</name></expr></argument>)</argument_list></call><operator pos:start="1139:94" pos:end="1139:94">)</operator> <operator pos:start="1139:96" pos:end="1139:97">||</operator>
        <operator pos:start="1140:9" pos:end="1140:9">(</operator><name pos:start="1140:10" pos:end="1140:13">NULL</name> <operator pos:start="1140:15" pos:end="1140:16">==</operator> <call pos:start="1140:18" pos:end="1140:88"><name pos:start="1140:18" pos:end="1140:28">CU_add_test</name><argument_list pos:start="1140:29" pos:end="1140:88">(<argument pos:start="1140:30" pos:end="1140:35"><expr pos:start="1140:30" pos:end="1140:35"><name pos:start="1140:30" pos:end="1140:35">pSuite</name></expr></argument>, <argument pos:start="1140:38" pos:end="1140:72"><expr pos:start="1140:38" pos:end="1140:72"><literal type="string" pos:start="1140:38" pos:end="1140:72">"CN only using static config w/pop"</literal></expr></argument>, <argument pos:start="1140:75" pos:end="1140:87"><expr pos:start="1140:75" pos:end="1140:87"><name pos:start="1140:75" pos:end="1140:87">us1159_test10</name></expr></argument>)</argument_list></call><operator pos:start="1140:89" pos:end="1140:89">)</operator> <operator pos:start="1140:91" pos:end="1140:92">||</operator>
        <operator pos:start="1141:9" pos:end="1141:9">(</operator><name pos:start="1141:10" pos:end="1141:13">NULL</name> <operator pos:start="1141:15" pos:end="1141:16">==</operator> <call pos:start="1141:18" pos:end="1141:80"><name pos:start="1141:18" pos:end="1141:28">CU_add_test</name><argument_list pos:start="1141:29" pos:end="1141:80">(<argument pos:start="1141:30" pos:end="1141:35"><expr pos:start="1141:30" pos:end="1141:35"><name pos:start="1141:30" pos:end="1141:35">pSuite</name></expr></argument>, <argument pos:start="1141:38" pos:end="1141:64"><expr pos:start="1141:38" pos:end="1141:64"><literal type="string" pos:start="1141:38" pos:end="1141:64">"A lot of attributes w/pop"</literal></expr></argument>, <argument pos:start="1141:67" pos:end="1141:79"><expr pos:start="1141:67" pos:end="1141:79"><name pos:start="1141:67" pos:end="1141:79">us1159_test20</name></expr></argument>)</argument_list></call><operator pos:start="1141:81" pos:end="1141:81">)</operator> <operator pos:start="1141:83" pos:end="1141:84">||</operator>
        <operator pos:start="1142:9" pos:end="1142:9">(</operator><name pos:start="1142:10" pos:end="1142:13">NULL</name> <operator pos:start="1142:15" pos:end="1142:16">==</operator> <call pos:start="1142:18" pos:end="1142:75"><name pos:start="1142:18" pos:end="1142:28">CU_add_test</name><argument_list pos:start="1142:29" pos:end="1142:75">(<argument pos:start="1142:30" pos:end="1142:35"><expr pos:start="1142:30" pos:end="1142:35"><name pos:start="1142:30" pos:end="1142:35">pSuite</name></expr></argument>, <argument pos:start="1142:38" pos:end="1142:59"><expr pos:start="1142:38" pos:end="1142:59"><literal type="string" pos:start="1142:38" pos:end="1142:59">"Long attribute w/pop"</literal></expr></argument>, <argument pos:start="1142:62" pos:end="1142:74"><expr pos:start="1142:62" pos:end="1142:74"><name pos:start="1142:62" pos:end="1142:74">us1159_test21</name></expr></argument>)</argument_list></call><operator pos:start="1142:76" pos:end="1142:76">)</operator> <operator pos:start="1142:78" pos:end="1142:79">||</operator>
        <operator pos:start="1143:9" pos:end="1143:9">(</operator><name pos:start="1143:10" pos:end="1143:13">NULL</name> <operator pos:start="1143:15" pos:end="1143:16">==</operator> <call pos:start="1143:18" pos:end="1143:83"><name pos:start="1143:18" pos:end="1143:28">CU_add_test</name><argument_list pos:start="1143:29" pos:end="1143:83">(<argument pos:start="1143:30" pos:end="1143:35"><expr pos:start="1143:30" pos:end="1143:35"><name pos:start="1143:30" pos:end="1143:35">pSuite</name></expr></argument>, <argument pos:start="1143:38" pos:end="1143:67"><expr pos:start="1143:38" pos:end="1143:67"><literal type="string" pos:start="1143:38" pos:end="1143:67">"No CSR attrs on server w/pop"</literal></expr></argument>, <argument pos:start="1143:70" pos:end="1143:82"><expr pos:start="1143:70" pos:end="1143:82"><name pos:start="1143:70" pos:end="1143:82">us1159_test50</name></expr></argument>)</argument_list></call><operator pos:start="1143:84" pos:end="1143:84">)</operator> <operator pos:start="1143:86" pos:end="1143:87">||</operator>
        <operator pos:start="1144:9" pos:end="1144:9">(</operator><name pos:start="1144:10" pos:end="1144:13">NULL</name> <operator pos:start="1144:15" pos:end="1144:16">==</operator> <call pos:start="1144:18" pos:end="1144:85"><name pos:start="1144:18" pos:end="1144:28">CU_add_test</name><argument_list pos:start="1144:29" pos:end="1144:85">(<argument pos:start="1144:30" pos:end="1144:35"><expr pos:start="1144:30" pos:end="1144:35"><name pos:start="1144:30" pos:end="1144:35">pSuite</name></expr></argument>, <argument pos:start="1144:38" pos:end="1144:69"><expr pos:start="1144:38" pos:end="1144:69"><literal type="string" pos:start="1144:38" pos:end="1144:69">"No CSR attrs on server w/o pop"</literal></expr></argument>, <argument pos:start="1144:72" pos:end="1144:84"><expr pos:start="1144:72" pos:end="1144:84"><name pos:start="1144:72" pos:end="1144:84">us1159_test51</name></expr></argument>)</argument_list></call><operator pos:start="1144:86" pos:end="1144:86">)</operator></expr>)</condition>
    <block pos:start="1145:5" pos:end="1148:5">{<block_content pos:start="1146:9" pos:end="1147:30">
        <expr_stmt pos:start="1146:9" pos:end="1146:30"><expr pos:start="1146:9" pos:end="1146:29"><call pos:start="1146:9" pos:end="1146:29"><name pos:start="1146:9" pos:end="1146:27">CU_cleanup_registry</name><argument_list pos:start="1146:28" pos:end="1146:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1147:9" pos:end="1147:30">return <expr pos:start="1147:16" pos:end="1147:29"><call pos:start="1147:16" pos:end="1147:29"><name pos:start="1147:16" pos:end="1147:27">CU_get_error</name><argument_list pos:start="1147:28" pos:end="1147:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1150:5" pos:end="1152:0">return <expr pos:start="1150:12" pos:end="1150:22"><name pos:start="1150:12" pos:end="1150:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1151:1" pos:end="1151:6">#<cpp:directive pos:start="1151:2" pos:end="1151:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
