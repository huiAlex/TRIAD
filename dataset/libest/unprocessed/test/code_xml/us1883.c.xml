<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us1883.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="10:3">/*------------------------------------------------------------------
 * us1883.c - Unit Tests for User Story 1883 - Enable token auth mode for
 *            the EST Client.
 *
 * March, 2015
 *
 * Copyright (c) 2015, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="11:1" pos:end="11:18">#<cpp:directive pos:start="11:2" pos:end="11:8">include</cpp:directive> <cpp:file pos:start="11:10" pos:end="11:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="12:1" pos:end="12:13">#<cpp:directive pos:start="12:2" pos:end="12:7">ifndef</cpp:directive> <name pos:start="12:9" pos:end="12:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:8">include</cpp:directive> <cpp:file pos:start="13:10" pos:end="13:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="14:1" pos:end="14:6">#<cpp:directive pos:start="14:2" pos:end="14:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="15:1" pos:end="15:16">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:22">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:23">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:22">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="20:1" pos:end="20:24">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="22:1" pos:end="22:17">#<cpp:directive pos:start="22:2" pos:end="22:6">ifdef</cpp:directive> <name pos:start="22:8" pos:end="22:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="24:1" pos:end="24:28">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="26:1" pos:end="26:18">#<cpp:directive pos:start="26:2" pos:end="26:8">include</cpp:directive> <cpp:file pos:start="26:10" pos:end="26:18">&lt;errno.h&gt;</cpp:file></cpp:include>


<decl_stmt pos:start="29:1" pos:end="29:37"><decl pos:start="29:1" pos:end="29:36"><type pos:start="29:1" pos:end="29:22"><specifier pos:start="29:1" pos:end="29:6">static</specifier> <name pos:start="29:8" pos:end="29:15">unsigned</name> <name pos:start="29:17" pos:end="29:20">char</name> <modifier pos:start="29:22" pos:end="29:22">*</modifier></type><name pos:start="29:23" pos:end="29:29">cacerts</name> <init pos:start="29:31" pos:end="29:36">= <expr pos:start="29:33" pos:end="29:36"><name pos:start="29:33" pos:end="29:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="30:1" pos:end="60:0"><decl pos:start="30:1" pos:end="30:26"><type pos:start="30:1" pos:end="30:10"><specifier pos:start="30:1" pos:end="30:6">static</specifier> <name pos:start="30:8" pos:end="30:10">int</name></type> <name pos:start="30:12" pos:end="30:22">cacerts_len</name> <init pos:start="30:24" pos:end="30:26">= <expr pos:start="30:26" pos:end="30:26"><literal type="number" pos:start="30:26" pos:end="30:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="32:1" pos:end="32:43">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:24"><name pos:start="32:9" pos:end="32:24">US1883_SERVER_IP</name></cpp:macro>        <cpp:value pos:start="32:33" pos:end="32:43">"127.0.0.1"</cpp:value></cpp:define>	
<cpp:define pos:start="33:1" pos:end="33:37">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:23">US1883_TCP_PORT</name></cpp:macro>		<cpp:value pos:start="33:33" pos:end="33:37">29001</cpp:value></cpp:define>

<comment type="block" pos:start="35:1" pos:end="40:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the rsa.req file:
 *
 * openssl req -newkey rsa:2048 -keyout rsakey.pem -keyform PEM -out rsa.req -outform PEM
 */</comment>
<cpp:define pos:start="41:1" pos:end="41:1000">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:29">US1883_PKCS10_RSA2048</name></cpp:macro> <cpp:value pos:start="41:31" pos:end="41:1000">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDJA9mdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:1589">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:30"><name pos:start="42:9" pos:end="42:30">US1883_PKCS10_4096_REQ</name></cpp:macro> <cpp:value pos:start="42:32" pos:end="42:1589">"MIIEZjCCAk4CAQAwITEPMA0GA1UEAwwGSkpUZXN0MQ4wDAYDVQQFEwUwMDAwMTCC\nAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALfLlHxqzObiKWDfX8saZ4l3\n1JyrCP4xmyQitY2pIIGlLvHT7t1WZ0LO9uo0uB7b/8iGbXki8FgqSm1jROe5lwCN\nDIhTJdG4b705c6XmD3Mh436De9d4gzpjedA2qurSI9+GVNVgU0ZOWJFu9g+y3iRH\ndfsjO9u0E2MfZWWR8M72gBqzvbDDPN4BDwLa9TkQ2Rsxf3h2d7bN2DNShNSYX/dE\nIX89d9uC6FegsHQxHINUOdZzeAn3yuQMBU+FwohEl9Ub8Qu9gub2MJUrYNRQnii7\nduvq5/UjkhjNWzIh7LAbdaM+0wSmCe0ju+wKbayUZZkrqoVK6bWZzFs4dYtn95/S\nVVOv95MD5D1EokXw3Iih7GRJygtWn5e4/YO68LONBF7UE24vgBwEieF6J0bFAlxw\n15s7pIalkGF7CUbitRhbB3kTjGfUDR8YpSsKdqxHNmWBXY7ZVk4T8K7168cNWSOL\netZpTk4BtoUJBnWP8Uq38YOi6389U24gmZtGpSpJEEtDy1MJ8Ha4PZE/VkFtmUWq\nbETOx2kubGwc9vXvWfi5BxE2VvetGNsy2EQEZPVwscYaCy0/yO3fu06coEtr7Ekr\ngapDDEzVtiP9NPe5q18Azu+T9ngoOx3PqrCPG1BDN6z1Ue2tSDdOxKNFMNMwqYIn\nZP9MXh+tz8RaKvsclv9JAgMBAAGgADANBgkqhkiG9w0BAQUFAAOCAgEAJMwZ4IUB\nUSH5wQBfsYT4SxtKsZtvun6QX0+7jNMtzzQUOqO79Kx/DKpzsKxLNvHKmFqcxA7g\ngbEwXkAP5+VaMD92DghcNjXOqGKclZdmGj2oREqZwzvTDRo4zP1yen5vgL/Yz7SA\nxze8wPg2WhlV9+qvkVCpHN3EUIfO+rBgi2reo/vF7xq5CAU4UtQ1h4gHax67Yww8\nJmypyGGa0ad0Z8ruiclI/QtluADUxy1YM0Up2FC0s7j72xzrRpEl1fPlOi/bFaZp\nsr4zllOpwnRdxvffXO7gXtXVIr4IHVHNWj6kmDzyk0ovat2Ms5aGUcMDN6Jm8KIB\nNBVH5FgkBVQOPSngkwnEOj0RsaKSxT5EfmOxm9pCrAE3rNdVOgO4t8wZ6DQUqye/\nBUdmgXtWoGsKIg8oR5HAWBER8yw/qdiRlBGgN/PKZdpmYI2TEfZvp/nXwG7QLjGx\nsj5TWeRKNgghUCu3uF+1s0R+gqgY1S9GgiDSifL7+h+bXJ4ncyRGq+XPnrfMiRkB\neSyv3kyIxtZfAB6TjkUbtVfo2KrfqNxu4lbJYE2b6hs1L6t7YPhjubz9aES7wES7\nk+ZZPZn/k/GsqUpsWHnEFEvi5C5WPrnpvVN6rKh0fB+AukGrS+9EK4KNZWfV/yf8\nXN5qWyOtgd4oLUUsgFDJsqNh6A1mlmx6CnY=\n"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:83">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:28">US1883_ENROLL_URL_BA</name></cpp:macro> <cpp:value pos:start="43:30" pos:end="43:83">"https://127.0.0.1:29001/.well-known/est/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:63">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:24"><name pos:start="44:9" pos:end="44:24">US1883_PKCS10_CT</name></cpp:macro>     <cpp:value pos:start="44:30" pos:end="44:63">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 
<cpp:define pos:start="45:1" pos:end="45:45">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:26">US1883_UIDPWD_GOOD</name></cpp:macro>   <cpp:value pos:start="45:30" pos:end="45:45">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:ifndef pos:start="46:1" pos:end="46:13">#<cpp:directive pos:start="46:2" pos:end="46:7">ifndef</cpp:directive> <name pos:start="46:9" pos:end="46:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="47:1" pos:end="47:50">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:22">US1883_CACERTS</name></cpp:macro>	     <cpp:value pos:start="47:30" pos:end="47:50">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:43">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:21"><name pos:start="48:9" pos:end="48:21">US1883_CACERT</name></cpp:macro> <cpp:value pos:start="48:23" pos:end="48:43">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:69">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:26">US1883_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="49:28" pos:end="49:69">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:68">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:25"><name pos:start="50:9" pos:end="50:25">US1883_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="50:27" pos:end="50:68">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:69">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:26">US1883_CLIENT_CERT</name></cpp:macro> <cpp:value pos:start="51:28" pos:end="51:69">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:69">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:25"><name pos:start="52:9" pos:end="52:25">US1883_CLIENT_KEY</name></cpp:macro>  <cpp:value pos:start="52:28" pos:end="52:69">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="53:1" pos:end="53:5">#<cpp:directive pos:start="53:2" pos:end="53:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="54:1" pos:end="54:52">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:22"><name pos:start="54:9" pos:end="54:22">US1883_CACERTS</name></cpp:macro>	     <cpp:value pos:start="54:30" pos:end="54:52">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:45">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:21">US1883_CACERT</name></cpp:macro> <cpp:value pos:start="55:23" pos:end="55:45">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:72">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:26"><name pos:start="56:9" pos:end="56:26">US1883_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="56:28" pos:end="56:72">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:71">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:25">US1883_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="57:27" pos:end="57:71">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="58:1" pos:end="58:72">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:26"><name pos:start="58:9" pos:end="58:26">US1883_CLIENT_CERT</name></cpp:macro> <cpp:value pos:start="58:28" pos:end="58:72">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="59:1" pos:end="59:71">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:25">US1883_CLIENT_KEY</name></cpp:macro>  <cpp:value pos:start="59:28" pos:end="59:71">"CA\\estCA\\private/estservercertandkey.pem"</cpp:value></cpp:define>

<decl_stmt pos:start="61:1" pos:end="61:48"><decl pos:start="61:1" pos:end="61:47"><type pos:start="61:1" pos:end="61:23"><specifier pos:start="61:1" pos:end="61:6">static</specifier> <name pos:start="61:8" pos:end="61:23">CRITICAL_SECTION</name></type> <name pos:start="61:25" pos:end="61:47">logger_critical_section</name></decl>;</decl_stmt>  
<function pos:start="62:1" pos:end="71:0"><type pos:start="62:1" pos:end="62:11"><specifier pos:start="62:1" pos:end="62:6">static</specifier> <name pos:start="62:8" pos:end="62:11">void</name></type> <name pos:start="62:13" pos:end="62:32">us1883_logger_stderr</name> <parameter_list pos:start="62:34" pos:end="62:58">(<parameter pos:start="62:35" pos:end="62:46"><decl pos:start="62:35" pos:end="62:46"><type pos:start="62:35" pos:end="62:46"><name pos:start="62:35" pos:end="62:38">char</name> <modifier pos:start="62:40" pos:end="62:40">*</modifier></type><name pos:start="62:41" pos:end="62:46">format</name></decl></parameter>, <parameter pos:start="62:49" pos:end="62:57"><decl pos:start="62:49" pos:end="62:57"><type pos:start="62:49" pos:end="62:57"><name pos:start="62:49" pos:end="62:55">va_list</name></type> <name pos:start="62:57" pos:end="62:57">l</name></decl></parameter>)</parameter_list> 
<block pos:start="63:1" pos:end="71:0">{<block_content pos:start="64:5" pos:end="67:51">
    <expr_stmt pos:start="64:5" pos:end="64:51"><expr pos:start="64:5" pos:end="64:50"><call pos:start="64:5" pos:end="64:50"><name pos:start="64:5" pos:end="64:24">EnterCriticalSection</name><argument_list pos:start="64:25" pos:end="64:50">(<argument pos:start="64:26" pos:end="64:49"><expr pos:start="64:26" pos:end="64:49"><operator pos:start="64:26" pos:end="64:26">&amp;</operator><name pos:start="64:27" pos:end="64:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="65:9" pos:end="65:36"><expr pos:start="65:9" pos:end="65:35"><call pos:start="65:9" pos:end="65:35"><name pos:start="65:9" pos:end="65:16">vfprintf</name><argument_list pos:start="65:17" pos:end="65:35">(<argument pos:start="65:18" pos:end="65:23"><expr pos:start="65:18" pos:end="65:23"><name pos:start="65:18" pos:end="65:23">stderr</name></expr></argument>, <argument pos:start="65:26" pos:end="65:31"><expr pos:start="65:26" pos:end="65:31"><name pos:start="65:26" pos:end="65:31">format</name></expr></argument>, <argument pos:start="65:34" pos:end="65:34"><expr pos:start="65:34" pos:end="65:34"><name pos:start="65:34" pos:end="65:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="66:9" pos:end="66:23"><expr pos:start="66:9" pos:end="66:22"><call pos:start="66:9" pos:end="66:22"><name pos:start="66:9" pos:end="66:14">fflush</name><argument_list pos:start="66:15" pos:end="66:22">(<argument pos:start="66:16" pos:end="66:21"><expr pos:start="66:16" pos:end="66:21"><name pos:start="66:16" pos:end="66:21">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:51"><expr pos:start="67:5" pos:end="67:50"><call pos:start="67:5" pos:end="67:50"><name pos:start="67:5" pos:end="67:24">LeaveCriticalSection</name><argument_list pos:start="67:25" pos:end="67:50">(<argument pos:start="67:26" pos:end="67:49"><expr pos:start="67:26" pos:end="67:49"><operator pos:start="67:26" pos:end="67:26">&amp;</operator><name pos:start="67:27" pos:end="67:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<cpp:endif pos:start="70:1" pos:end="70:6">#<cpp:directive pos:start="70:2" pos:end="70:6">endif</cpp:directive></cpp:endif> 


<function pos:start="73:1" pos:end="75:1"><type pos:start="73:1" pos:end="73:11"><specifier pos:start="73:1" pos:end="73:6">static</specifier> <name pos:start="73:8" pos:end="73:11">void</name></type> <name pos:start="73:13" pos:end="73:24">us1883_clean</name> <parameter_list pos:start="73:26" pos:end="73:31">(<parameter pos:start="73:27" pos:end="73:30"><decl pos:start="73:27" pos:end="73:30"><type pos:start="73:27" pos:end="73:30"><name pos:start="73:27" pos:end="73:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="74:1" pos:end="75:1">{<block_content>
</block_content>}</block></function>

<function pos:start="77:1" pos:end="92:1"><type pos:start="77:1" pos:end="77:10"><specifier pos:start="77:1" pos:end="77:6">static</specifier> <name pos:start="77:8" pos:end="77:10">int</name></type> <name pos:start="77:12" pos:end="77:30">us1883_start_server</name> <parameter_list pos:start="77:32" pos:end="77:59">(<parameter pos:start="77:33" pos:end="77:49"><decl pos:start="77:33" pos:end="77:49"><type pos:start="77:33" pos:end="77:49"><name pos:start="77:33" pos:end="77:35">int</name></type> <name pos:start="77:37" pos:end="77:49">manual_enroll</name></decl></parameter>, <parameter pos:start="77:52" pos:end="77:58"><decl pos:start="77:52" pos:end="77:58"><type pos:start="77:52" pos:end="77:58"><name pos:start="77:52" pos:end="77:54">int</name></type> <name pos:start="77:56" pos:end="77:58">nid</name></decl></parameter>)</parameter_list>
<block pos:start="78:1" pos:end="92:1">{<block_content pos:start="79:5" pos:end="91:14">
    <decl_stmt pos:start="79:5" pos:end="79:11"><decl pos:start="79:5" pos:end="79:10"><type pos:start="79:5" pos:end="79:7"><name pos:start="79:5" pos:end="79:7">int</name></type> <name pos:start="79:9" pos:end="79:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="81:5" pos:end="90:23"><expr pos:start="81:5" pos:end="90:22"><name pos:start="81:5" pos:end="81:6">rv</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <call pos:start="81:10" pos:end="90:22"><name pos:start="81:10" pos:end="81:17">st_start</name><argument_list pos:start="81:18" pos:end="90:22">(<argument pos:start="81:19" pos:end="81:33"><expr pos:start="81:19" pos:end="81:33"><name pos:start="81:19" pos:end="81:33">US1883_TCP_PORT</name></expr></argument>, 
	          <argument pos:start="82:19" pos:end="82:60"><expr pos:start="82:19" pos:end="82:60"><literal type="string" pos:start="82:19" pos:end="82:60">"CA/estCA/private/estservercertandkey.pem"</literal></expr></argument>,
	          <argument pos:start="83:19" pos:end="83:60"><expr pos:start="83:19" pos:end="83:60"><literal type="string" pos:start="83:19" pos:end="83:60">"CA/estCA/private/estservercertandkey.pem"</literal></expr></argument>,
	          <argument pos:start="84:19" pos:end="84:28"><expr pos:start="84:19" pos:end="84:28"><literal type="string" pos:start="84:19" pos:end="84:28">"estrealm"</literal></expr></argument>,
	          <argument pos:start="85:19" pos:end="85:39"><expr pos:start="85:19" pos:end="85:39"><literal type="string" pos:start="85:19" pos:end="85:39">"CA/estCA/cacert.crt"</literal></expr></argument>,
	          <argument pos:start="86:19" pos:end="86:39"><expr pos:start="86:19" pos:end="86:39"><literal type="string" pos:start="86:19" pos:end="86:39">"CA/trustedcerts.crt"</literal></expr></argument>,
	          <argument pos:start="87:19" pos:end="87:39"><expr pos:start="87:19" pos:end="87:39"><literal type="string" pos:start="87:19" pos:end="87:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="88:19" pos:end="88:31"><expr pos:start="88:19" pos:end="88:31"><name pos:start="88:19" pos:end="88:31">manual_enroll</name></expr></argument>,
		  <argument pos:start="89:19" pos:end="89:19"><expr pos:start="89:19" pos:end="89:19"><literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr></argument>,
		  <argument pos:start="90:19" pos:end="90:21"><expr pos:start="90:19" pos:end="90:21"><name pos:start="90:19" pos:end="90:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="91:5" pos:end="91:14">return <expr pos:start="91:12" pos:end="91:13"><name pos:start="91:12" pos:end="91:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="94:1" pos:end="98:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="99:1" pos:end="124:1"><type pos:start="99:1" pos:end="99:10"><specifier pos:start="99:1" pos:end="99:6">static</specifier> <name pos:start="99:8" pos:end="99:10">int</name></type> <name pos:start="99:12" pos:end="99:28">us1883_init_suite</name> <parameter_list pos:start="99:30" pos:end="99:35">(<parameter pos:start="99:31" pos:end="99:34"><decl pos:start="99:31" pos:end="99:34"><type pos:start="99:31" pos:end="99:34"><name pos:start="99:31" pos:end="99:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="100:1" pos:end="124:1">{<block_content pos:start="101:5" pos:end="123:14">
    <decl_stmt pos:start="101:5" pos:end="103:0"><decl pos:start="101:5" pos:end="101:10"><type pos:start="101:5" pos:end="101:7"><name pos:start="101:5" pos:end="101:7">int</name></type> <name pos:start="101:9" pos:end="101:10">rv</name></decl>;</decl_stmt>
<cpp:ifdef pos:start="102:1" pos:end="102:12">#<cpp:directive pos:start="102:2" pos:end="102:6">ifdef</cpp:directive> <name pos:start="102:8" pos:end="102:12">WIN32</name></cpp:ifdef>
    <expr_stmt pos:start="103:5" pos:end="103:57"><expr pos:start="103:5" pos:end="103:56"><call pos:start="103:5" pos:end="103:56"><name pos:start="103:5" pos:end="103:29">InitializeCriticalSection</name> <argument_list pos:start="103:31" pos:end="103:56">(<argument pos:start="103:32" pos:end="103:55"><expr pos:start="103:32" pos:end="103:55"><operator pos:start="103:32" pos:end="103:32">&amp;</operator><name pos:start="103:33" pos:end="103:55">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="104:5" pos:end="106:0"><expr pos:start="104:5" pos:end="104:60"><call pos:start="104:5" pos:end="104:60"><name pos:start="104:5" pos:end="104:19">est_init_logger</name><argument_list pos:start="104:20" pos:end="104:60">(<argument pos:start="104:21" pos:end="104:36"><expr pos:start="104:21" pos:end="104:36"><name pos:start="104:21" pos:end="104:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="104:39" pos:end="104:59"><expr pos:start="104:39" pos:end="104:59"><operator pos:start="104:39" pos:end="104:39">&amp;</operator><name pos:start="104:40" pos:end="104:59">us1883_logger_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="107:5" pos:end="109:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="110:5" pos:end="110:61"><expr pos:start="110:5" pos:end="110:60"><name pos:start="110:5" pos:end="110:15">cacerts_len</name> <operator pos:start="110:17" pos:end="110:17">=</operator> <call pos:start="110:19" pos:end="110:60"><name pos:start="110:19" pos:end="110:34">read_binary_file</name><argument_list pos:start="110:35" pos:end="110:60">(<argument pos:start="110:36" pos:end="110:49"><expr pos:start="110:36" pos:end="110:49"><name pos:start="110:36" pos:end="110:49">US1883_CACERTS</name></expr></argument>, <argument pos:start="110:52" pos:end="110:59"><expr pos:start="110:52" pos:end="110:59"><operator pos:start="110:52" pos:end="110:52">&amp;</operator><name pos:start="110:53" pos:end="110:59">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="111:5" pos:end="113:5"><if pos:start="111:5" pos:end="113:5">if <condition pos:start="111:8" pos:end="111:25">(<expr pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:19">cacerts_len</name> <operator pos:start="111:21" pos:end="111:22">&lt;=</operator> <literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr>)</condition> <block pos:start="111:27" pos:end="113:5">{<block_content pos:start="112:9" pos:end="112:17">
	<return pos:start="112:9" pos:end="112:17">return <expr pos:start="112:16" pos:end="112:16"><literal type="number" pos:start="112:16" pos:end="112:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:19"><expr pos:start="115:5" pos:end="115:18"><call pos:start="115:5" pos:end="115:18"><name pos:start="115:5" pos:end="115:16">us1883_clean</name><argument_list pos:start="115:17" pos:end="115:18">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="117:5" pos:end="120:7">/*
     * Start an instance of the EST server with 
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="121:5" pos:end="121:35"><expr pos:start="121:5" pos:end="121:34"><name pos:start="121:5" pos:end="121:6">rv</name> <operator pos:start="121:8" pos:end="121:8">=</operator> <call pos:start="121:10" pos:end="121:34"><name pos:start="121:10" pos:end="121:28">us1883_start_server</name><argument_list pos:start="121:29" pos:end="121:34">(<argument pos:start="121:30" pos:end="121:30"><expr pos:start="121:30" pos:end="121:30"><literal type="number" pos:start="121:30" pos:end="121:30">0</literal></expr></argument>, <argument pos:start="121:33" pos:end="121:33"><expr pos:start="121:33" pos:end="121:33"><literal type="number" pos:start="121:33" pos:end="121:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:14">return <expr pos:start="123:12" pos:end="123:13"><name pos:start="123:12" pos:end="123:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="127:1" pos:end="131:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="132:1" pos:end="137:1"><type pos:start="132:1" pos:end="132:10"><specifier pos:start="132:1" pos:end="132:6">static</specifier> <name pos:start="132:8" pos:end="132:10">int</name></type> <name pos:start="132:12" pos:end="132:31">us1883_destroy_suite</name> <parameter_list pos:start="132:33" pos:end="132:38">(<parameter pos:start="132:34" pos:end="132:37"><decl pos:start="132:34" pos:end="132:37"><type pos:start="132:34" pos:end="132:37"><name pos:start="132:34" pos:end="132:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="133:1" pos:end="137:1">{<block_content pos:start="134:5" pos:end="136:13">
    <expr_stmt pos:start="134:5" pos:end="134:14"><expr pos:start="134:5" pos:end="134:13"><call pos:start="134:5" pos:end="134:13"><name pos:start="134:5" pos:end="134:11">st_stop</name><argument_list pos:start="134:12" pos:end="134:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="135:5" pos:end="135:18"><expr pos:start="135:5" pos:end="135:17"><call pos:start="135:5" pos:end="135:17"><name pos:start="135:5" pos:end="135:8">free</name><argument_list pos:start="135:9" pos:end="135:17">(<argument pos:start="135:10" pos:end="135:16"><expr pos:start="135:10" pos:end="135:16"><name pos:start="135:10" pos:end="135:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="136:5" pos:end="136:13">return <expr pos:start="136:12" pos:end="136:12"><literal type="number" pos:start="136:12" pos:end="136:12">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="140:1" pos:end="142:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="143:1" pos:end="172:1"><type pos:start="143:1" pos:end="143:10"><specifier pos:start="143:1" pos:end="143:6">static</specifier> <name pos:start="143:8" pos:end="143:10">int</name></type> <name pos:start="143:12" pos:end="143:36">client_manual_cert_verify</name> <parameter_list pos:start="143:38" pos:end="143:77">(<parameter pos:start="143:39" pos:end="143:52"><decl pos:start="143:39" pos:end="143:52"><type pos:start="143:39" pos:end="143:52"><name pos:start="143:39" pos:end="143:42">X509</name> <modifier pos:start="143:44" pos:end="143:44">*</modifier></type><name pos:start="143:45" pos:end="143:52">cur_cert</name></decl></parameter>, <parameter pos:start="143:55" pos:end="143:76"><decl pos:start="143:55" pos:end="143:76"><type pos:start="143:55" pos:end="143:76"><name pos:start="143:55" pos:end="143:57">int</name></type> <name pos:start="143:59" pos:end="143:76">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="144:1" pos:end="172:1">{<block_content pos:start="145:5" pos:end="171:19">
    <decl_stmt pos:start="145:5" pos:end="145:17"><decl pos:start="145:5" pos:end="145:16"><type pos:start="145:5" pos:end="145:9"><name pos:start="145:5" pos:end="145:7">BIO</name> <modifier pos:start="145:9" pos:end="145:9">*</modifier></type><name pos:start="145:10" pos:end="145:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="146:5" pos:end="146:43"><expr pos:start="146:5" pos:end="146:42"><name pos:start="146:5" pos:end="146:11">bio_err</name><operator pos:start="146:12" pos:end="146:12">=</operator><call pos:start="146:13" pos:end="146:42"><name pos:start="146:13" pos:end="146:22">BIO_new_fp</name><argument_list pos:start="146:23" pos:end="146:42">(<argument pos:start="146:24" pos:end="146:29"><expr pos:start="146:24" pos:end="146:29"><name pos:start="146:24" pos:end="146:29">stderr</name></expr></argument>,<argument pos:start="146:31" pos:end="146:41"><expr pos:start="146:31" pos:end="146:41"><name pos:start="146:31" pos:end="146:41">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="147:5" pos:end="147:20"><decl pos:start="147:5" pos:end="147:19"><type pos:start="147:5" pos:end="147:7"><name pos:start="147:5" pos:end="147:7">int</name></type> <name pos:start="147:9" pos:end="147:15">approve</name> <init pos:start="147:17" pos:end="147:19">= <expr pos:start="147:19" pos:end="147:19"><literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr></init></decl>;</decl_stmt> 
    
    <comment type="block" pos:start="149:5" pos:end="151:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="152:5" pos:end="154:62"><expr pos:start="152:5" pos:end="154:61"><call pos:start="152:5" pos:end="154:61"><name pos:start="152:5" pos:end="152:10">printf</name><argument_list pos:start="152:11" pos:end="154:61">(<argument pos:start="152:12" pos:end="152:117"><expr pos:start="152:12" pos:end="152:117"><literal type="string" pos:start="152:12" pos:end="152:117">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
           <argument pos:start="153:12" pos:end="153:23"><expr pos:start="153:12" pos:end="153:23"><name pos:start="153:12" pos:end="153:23">__FUNCTION__</name></expr></argument>, <argument pos:start="153:26" pos:end="153:43"><expr pos:start="153:26" pos:end="153:43"><name pos:start="153:26" pos:end="153:43">openssl_cert_error</name></expr></argument>,
           <argument pos:start="154:12" pos:end="154:60"><expr pos:start="154:12" pos:end="154:60"><call pos:start="154:12" pos:end="154:60"><name pos:start="154:12" pos:end="154:40">X509_verify_cert_error_string</name><argument_list pos:start="154:41" pos:end="154:60">(<argument pos:start="154:42" pos:end="154:59"><expr pos:start="154:42" pos:end="154:59"><name pos:start="154:42" pos:end="154:59">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="156:5" pos:end="156:30"><expr pos:start="156:5" pos:end="156:29"><call pos:start="156:5" pos:end="156:29"><name pos:start="156:5" pos:end="156:10">printf</name><argument_list pos:start="156:11" pos:end="156:29">(<argument pos:start="156:12" pos:end="156:28"><expr pos:start="156:12" pos:end="156:28"><literal type="string" pos:start="156:12" pos:end="156:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="157:5" pos:end="157:35"><expr pos:start="157:5" pos:end="157:34"><call pos:start="157:5" pos:end="157:34"><name pos:start="157:5" pos:end="157:17">X509_print_fp</name><argument_list pos:start="157:18" pos:end="157:34">(<argument pos:start="157:19" pos:end="157:24"><expr pos:start="157:19" pos:end="157:24"><name pos:start="157:19" pos:end="157:24">stdout</name></expr></argument>,<argument pos:start="157:26" pos:end="157:33"><expr pos:start="157:26" pos:end="157:33"><name pos:start="157:26" pos:end="157:33">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="158:5" pos:end="162:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="163:5" pos:end="163:74"><expr pos:start="163:5" pos:end="163:73"><call pos:start="163:5" pos:end="163:73"><name pos:start="163:5" pos:end="163:24">X509_signature_print</name><argument_list pos:start="163:25" pos:end="163:73">(<argument pos:start="163:26" pos:end="163:32"><expr pos:start="163:26" pos:end="163:32"><name pos:start="163:26" pos:end="163:32">bio_err</name></expr></argument>, <argument pos:start="163:35" pos:end="163:51"><expr pos:start="163:35" pos:end="163:51"><name pos:start="163:35" pos:end="163:51"><name pos:start="163:35" pos:end="163:42">cur_cert</name><operator pos:start="163:43" pos:end="163:44">-&gt;</operator><name pos:start="163:45" pos:end="163:51">sig_alg</name></name></expr></argument>, <argument pos:start="163:54" pos:end="163:72"><expr pos:start="163:54" pos:end="163:72"><name pos:start="163:54" pos:end="163:72"><name pos:start="163:54" pos:end="163:61">cur_cert</name><operator pos:start="163:62" pos:end="163:63">-&gt;</operator><name pos:start="163:64" pos:end="163:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="165:5" pos:end="167:5"><if pos:start="165:5" pos:end="167:5">if <condition pos:start="165:8" pos:end="165:59">(<expr pos:start="165:9" pos:end="165:58"><name pos:start="165:9" pos:end="165:26">openssl_cert_error</name> <operator pos:start="165:28" pos:end="165:29">==</operator> <name pos:start="165:31" pos:end="165:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="165:61" pos:end="167:5">{<block_content pos:start="166:9" pos:end="166:20">
        <expr_stmt pos:start="166:9" pos:end="166:20"><expr pos:start="166:9" pos:end="166:19"><name pos:start="166:9" pos:end="166:15">approve</name> <operator pos:start="166:17" pos:end="166:17">=</operator> <literal type="number" pos:start="166:19" pos:end="166:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt pos:start="169:5" pos:end="169:22"><expr pos:start="169:5" pos:end="169:21"><call pos:start="169:5" pos:end="169:21"><name pos:start="169:5" pos:end="169:12">BIO_free</name><argument_list pos:start="169:13" pos:end="169:21">(<argument pos:start="169:14" pos:end="169:20"><expr pos:start="169:14" pos:end="169:20"><name pos:start="169:14" pos:end="169:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="171:5" pos:end="171:19">return <expr pos:start="171:12" pos:end="171:18"><name pos:start="171:12" pos:end="171:18">approve</name></expr>;</return>
</block_content>}</block></function>


<function pos:start="175:1" pos:end="207:0"><type pos:start="175:1" pos:end="175:17"><specifier pos:start="175:1" pos:end="175:6">static</specifier> <name pos:start="175:8" pos:end="175:15">EVP_PKEY</name> <modifier pos:start="175:17" pos:end="175:17">*</modifier></type> <name pos:start="175:19" pos:end="175:38">generate_private_key</name> <parameter_list pos:start="175:40" pos:end="175:45">(<parameter pos:start="175:41" pos:end="175:44"><decl pos:start="175:41" pos:end="175:44"><type pos:start="175:41" pos:end="175:44"><name pos:start="175:41" pos:end="175:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="176:1" pos:end="207:0">{<block_content pos:start="177:5" pos:end="200:18">
    <decl_stmt pos:start="177:5" pos:end="177:25"><decl pos:start="177:5" pos:end="177:24"><type pos:start="177:5" pos:end="177:9"><name pos:start="177:5" pos:end="177:7">RSA</name> <modifier pos:start="177:9" pos:end="177:9">*</modifier></type><name pos:start="177:10" pos:end="177:12">rsa</name> <init pos:start="177:14" pos:end="177:24">= <expr pos:start="177:16" pos:end="177:24"><call pos:start="177:16" pos:end="177:24"><name pos:start="177:16" pos:end="177:22">RSA_new</name><argument_list pos:start="177:23" pos:end="177:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="178:5" pos:end="178:26"><decl pos:start="178:5" pos:end="178:25"><type pos:start="178:5" pos:end="178:12"><name pos:start="178:5" pos:end="178:10">BIGNUM</name> <modifier pos:start="178:12" pos:end="178:12">*</modifier></type><name pos:start="178:13" pos:end="178:14">bn</name> <init pos:start="178:16" pos:end="178:25">= <expr pos:start="178:18" pos:end="178:25"><call pos:start="178:18" pos:end="178:25"><name pos:start="178:18" pos:end="178:23">BN_new</name><argument_list pos:start="178:24" pos:end="178:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="179:5" pos:end="179:19"><decl pos:start="179:5" pos:end="179:18"><type pos:start="179:5" pos:end="179:14"><name pos:start="179:5" pos:end="179:12">EVP_PKEY</name> <modifier pos:start="179:14" pos:end="179:14">*</modifier></type><name pos:start="179:15" pos:end="179:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="181:5" pos:end="183:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="184:5" pos:end="184:29"><expr pos:start="184:5" pos:end="184:28"><call pos:start="184:5" pos:end="184:28"><name pos:start="184:5" pos:end="184:15">BN_set_word</name><argument_list pos:start="184:16" pos:end="184:28">(<argument pos:start="184:17" pos:end="184:18"><expr pos:start="184:17" pos:end="184:18"><name pos:start="184:17" pos:end="184:18">bn</name></expr></argument>, <argument pos:start="184:21" pos:end="184:27"><expr pos:start="184:21" pos:end="184:27"><literal type="number" pos:start="184:21" pos:end="184:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="185:5" pos:end="185:45"><expr pos:start="185:5" pos:end="185:44"><call pos:start="185:5" pos:end="185:44"><name pos:start="185:5" pos:end="185:23">RSA_generate_key_ex</name><argument_list pos:start="185:24" pos:end="185:44">(<argument pos:start="185:25" pos:end="185:27"><expr pos:start="185:25" pos:end="185:27"><name pos:start="185:25" pos:end="185:27">rsa</name></expr></argument>, <argument pos:start="185:30" pos:end="185:33"><expr pos:start="185:30" pos:end="185:33"><literal type="number" pos:start="185:30" pos:end="185:33">1024</literal></expr></argument>, <argument pos:start="185:36" pos:end="185:37"><expr pos:start="185:36" pos:end="185:37"><name pos:start="185:36" pos:end="185:37">bn</name></expr></argument>, <argument pos:start="185:40" pos:end="185:43"><expr pos:start="185:40" pos:end="185:43"><name pos:start="185:40" pos:end="185:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="187:5" pos:end="187:26"><expr pos:start="187:5" pos:end="187:25"><name pos:start="187:5" pos:end="187:8">pkey</name> <operator pos:start="187:10" pos:end="187:10">=</operator> <call pos:start="187:12" pos:end="187:25"><name pos:start="187:12" pos:end="187:23">EVP_PKEY_new</name><argument_list pos:start="187:24" pos:end="187:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="188:5" pos:end="191:5"><if pos:start="188:5" pos:end="191:5">if <condition pos:start="188:8" pos:end="188:19">(<expr pos:start="188:9" pos:end="188:18"><name pos:start="188:9" pos:end="188:12">pkey</name><operator pos:start="188:13" pos:end="188:14">==</operator><name pos:start="188:15" pos:end="188:18">NULL</name></expr>)</condition> <block pos:start="188:21" pos:end="191:5">{<block_content pos:start="189:9" pos:end="190:20">
        <expr_stmt pos:start="189:9" pos:end="189:71"><expr pos:start="189:9" pos:end="189:70"><call pos:start="189:9" pos:end="189:70"><name pos:start="189:9" pos:end="189:14">printf</name><argument_list pos:start="189:15" pos:end="189:70">(<argument pos:start="189:16" pos:end="189:69"><expr pos:start="189:16" pos:end="189:69"><literal type="string" pos:start="189:16" pos:end="189:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="190:9" pos:end="190:20">return <expr pos:start="190:16" pos:end="190:19"><name pos:start="190:16" pos:end="190:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="192:5" pos:end="195:5"><if pos:start="192:5" pos:end="195:5">if <condition pos:start="192:8" pos:end="192:38">(<expr pos:start="192:9" pos:end="192:37"><operator pos:start="192:9" pos:end="192:9">!</operator><call pos:start="192:10" pos:end="192:37"><name pos:start="192:10" pos:end="192:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="192:27" pos:end="192:37">(<argument pos:start="192:28" pos:end="192:31"><expr pos:start="192:28" pos:end="192:31"><name pos:start="192:28" pos:end="192:31">pkey</name></expr></argument>, <argument pos:start="192:34" pos:end="192:36"><expr pos:start="192:34" pos:end="192:36"><name pos:start="192:34" pos:end="192:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="192:40" pos:end="195:5">{<block_content pos:start="193:9" pos:end="194:20">
        <expr_stmt pos:start="193:9" pos:end="193:69"><expr pos:start="193:9" pos:end="193:68"><call pos:start="193:9" pos:end="193:68"><name pos:start="193:9" pos:end="193:14">printf</name><argument_list pos:start="193:15" pos:end="193:68">(<argument pos:start="193:16" pos:end="193:67"><expr pos:start="193:16" pos:end="193:67"><literal type="string" pos:start="193:16" pos:end="193:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="194:9" pos:end="194:20">return <expr pos:start="194:16" pos:end="194:19"><name pos:start="194:16" pos:end="194:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>        
    
    <expr_stmt pos:start="197:5" pos:end="197:18"><expr pos:start="197:5" pos:end="197:17"><call pos:start="197:5" pos:end="197:17"><name pos:start="197:5" pos:end="197:12">RSA_free</name><argument_list pos:start="197:13" pos:end="197:17">(<argument pos:start="197:14" pos:end="197:16"><expr pos:start="197:14" pos:end="197:16"><name pos:start="197:14" pos:end="197:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="198:5" pos:end="198:16"><expr pos:start="198:5" pos:end="198:15"><call pos:start="198:5" pos:end="198:15"><name pos:start="198:5" pos:end="198:11">BN_free</name><argument_list pos:start="198:12" pos:end="198:15">(<argument pos:start="198:13" pos:end="198:14"><expr pos:start="198:13" pos:end="198:14"><name pos:start="198:13" pos:end="198:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="200:5" pos:end="200:18">return <expr pos:start="200:12" pos:end="200:17"><operator pos:start="200:12" pos:end="200:12">(</operator><name pos:start="200:13" pos:end="200:16">pkey</name><operator pos:start="200:17" pos:end="200:17">)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define pos:start="203:1" pos:end="203:69">#<cpp:directive pos:start="203:2" pos:end="203:7">define</cpp:directive> <cpp:macro pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:18">GOOD_TOKEN</name></cpp:macro> <cpp:value pos:start="203:20" pos:end="203:69">"WW91IGRvbid0IGhhdmUgdG8gaG9sbGVyIEkgaGVhciB5b3U="</cpp:value></cpp:define>
<cpp:define pos:start="204:1" pos:end="204:286">#<cpp:directive pos:start="204:2" pos:end="204:7">define</cpp:directive> <cpp:macro pos:start="204:9" pos:end="204:23"><name pos:start="204:9" pos:end="204:23">DIFFERENT_TOKEN</name></cpp:macro> <cpp:value pos:start="204:25" pos:end="204:286">"V2VsbCwgSSd2ZSBnb3QgdG8gcnVuIHRvIGtlZXAgZnJvbSBoaWRpbicNCkFuZCBJJ20gYm91bmQgdG8ga2VlcCBvbiByaWRpbicNCkFuZCBJJ3ZlIGdvdCBvbmUgbW9yZSBzaWx2ZXIgZG9sbGFyDQpCdXQgSSdtIG5vdCBnb25uYSBsZXQgJ2VtIGNhdGNoIG1lLCBubw0KTm90IGdvbm5hIGxldCAnZW0gY2F0Y2ggdGhlIG1pZG5pZ2h0IHJpZGVy"</cpp:value></cpp:define>
<cpp:define pos:start="205:1" pos:end="205:24">#<cpp:directive pos:start="205:2" pos:end="205:7">define</cpp:directive> <cpp:macro pos:start="205:9" pos:end="205:18"><name pos:start="205:9" pos:end="205:18">NULL_TOKEN</name></cpp:macro> <cpp:value pos:start="205:20" pos:end="205:24">NULL;</cpp:value></cpp:define>
<cpp:define pos:start="206:1" pos:end="206:2069">#<cpp:directive pos:start="206:2" pos:end="206:7">define</cpp:directive> <cpp:macro pos:start="206:9" pos:end="206:18"><name pos:start="206:9" pos:end="206:18">LONG_TOKEN</name></cpp:macro> <cpp:value pos:start="206:20" pos:end="206:2069">"SSBjYW4ndCBhZ3JlZSB0byBkaXNhZ3JlZSANCkZpZ2h0aW5nIGxpa2UgSSdtIGZpZ2h0aW5nIGZvciBsaWZlIA0KVGhleSdyZSBvbmx5IHdvcmRzIGJ1dCB0aGV5IGN1dCBsaWtlIGEgYmxhZGUgDQpTd2luZ2luZyB3aWRlIHdpdGggYWxsIG9mIG15IG1pZ2h0IA0KDQpBaCB5ZWFoLCBJIGd1ZXNzIGl0J3MgYWxsIG9mIHRoYXQgY29mZmVlLCB0aGF0J3MgZ290IG15IG1pbmQgaW4gYSB3aGlybCANCkknbSBzdGlsbCBjdXNzaW5nIGFuZCBiaXRjaGluZyBhbmQgdGhlcmUgYWluJ3Qgbm9ib2R5IGhlcmUgDQoNCk9oIHllYWgsIHlvdSBkb24ndCBoYXZlIHRvIGhvbGxlciBJIGhlYXIgeW91IA0KSSdtIHN0YW5kaW5nIHJpZ2h0IGhlcmUgYmVzaWRlIHlvdSANCk9oLCA5OSBzaGFkZXMgb2YgY3JhenksIEknbSA5OSBzaGFkZXMgb2YgY3JhenkgDQpDcmF6eSwgY3JhenksIGNyYXp5LCBjcmF6eSANCg0KUG91ciBhbm90aGVyIGRyaW5rLCBtYWtlIGl0IGEgZG91YmxlIGZvciBtZSANCk1heWJlIEkgY2FuIGRyaW5rIHRoaXMgYXdheSANCkl0J3MgbmV2ZXIgZnVuIHdoZW4gdGhleSBwdWxsIG91dCB0aGUgZ3VuIA0KQmVhdCB5b3UgYmxhY2sgYW5kIGJsdWUsIGJveSANCllvdSBnb3R0YSBwYXksIHlvdSBnb3R0YSBwYXkgDQoNCk9oLCB3aGVyZSB0aGUgaGVsbCBhbSBJPyBJIGhvcGUgYXQgbGVhc3QgSSBoYWQgZnVuIA0KSSdtIHN0dW1ibGluZyB0aHJvdWdoIE5ldyBPcmxlYW5zIG9oLCB0byB0aGUgcmlzaW5nIHN1biANCg0KT2ggeWVhaCwgeW91IGRvbid0IGhhdmUgdG8gaG9sbGVyIEkgaGVhciB5b3UgDQpJJ20gc3RhbmRpbmcgcmlnaHQgaGVyZSBiZXNpZGUgeW91IA0KT2gsIDk5IHNoYWRlcyBvZiBjcmF6eSwgSSdtIDk5IHNoYWRlcyBvZiBjcmF6eSANCkNyYXp5LCBjcmF6eSwgY3JhenksIGNyYXp5IA0KDQpMb3JkIGhhdmUgbWVyY3kgb24gbWUgDQpOb3ZlbnRhIG51ZXZhIHRvbm9zIGRlIGxvY28gDQoNCkkgbmVlZCBzb21lIHBlYWNlLCBqdXN0IHNvbWUgcmVsaWVmIA0KRnJvbSB0aGlzIHZvaWNlLCBraWxsaW5nIG1lIA0KWW91IHN0YXJlIGF0IG1lLCBhbmQgeW91IGdsYXJlIGF0IG1lIA0KQWxsIHRoaXMgcGFpbiBpdCdzIGFsbCB0aGUgc2FtZSwgaXQncyBhbGwgaW5zYW5lIA0KKHlvdSBzZWUpIA0KDQpJcyB0aGlzIHJlYWxseSBoYXBwZW5pbmcgb3IgZGlkIEkgbWFrZSBpdCBhbGwgdXA/IA0KSSdtIGJvdW5kIGZvciBDaGF0dGFob29jaGVlIG9uIGEgdHVybmlwIHRydWNrIA0KDQpPaCB5ZWFoLCB5b3UgZG9uJ3QgaGF2ZSB0byBob2xsZXIgSSBoZWFyIHlvdSANCkknbSBzdGFuZGluZyByaWdodCBoZXJlIGJlc2lkZSB5b3UgDQpPaCwgOTkgc2hhZGVzIG9mIGNyYXp5LCBJJ20gOTkgc2hhZGVzIG9mIGNyYXp5IA0KQ3JhenksIGNyYXp5LCBjcmF6eSwgY3JhenkgDQoNCkFoIHlvdSdyZSBjcmF6eSB5b3UncmUgY3JhenkgDQpIb2xkIG15IGZlZXQsIGZlZXQgdG8gdGhlIGZpcmUgDQpZb3UgaG9sZCBteSBmZWV0IHRvIHRoZSBmaXJlIA0KSSBuZXZlciBzYWlkIEkgd2FzIGRvd24gd2l0aCB5b3U="</cpp:value></cpp:define>
<decl_stmt pos:start="207:1" pos:end="207:70"><decl pos:start="207:1" pos:end="207:69"><type pos:start="207:1" pos:end="207:6"><name pos:start="207:1" pos:end="207:4">char</name> <modifier pos:start="207:6" pos:end="207:6">*</modifier></type><name pos:start="207:7" pos:end="207:16">test_token</name> <init pos:start="207:18" pos:end="207:69">= <expr pos:start="207:20" pos:end="207:69"><literal type="string" pos:start="207:20" pos:end="207:69">"WW91IGRvbid0IGhhdmUgdG8gaG9sbGVyIEkgaGVhciB5b3U="</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="209:1" pos:end="209:34"><decl pos:start="209:1" pos:end="209:33"><type pos:start="209:1" pos:end="209:3"><name pos:start="209:1" pos:end="209:3">int</name></type> <name pos:start="209:5" pos:end="209:29">auth_cred_callback_called</name> <init pos:start="209:31" pos:end="209:33">= <expr pos:start="209:33" pos:end="209:33"><literal type="number" pos:start="209:33" pos:end="209:33">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="210:1" pos:end="210:30"><decl pos:start="210:1" pos:end="210:29"><type pos:start="210:1" pos:end="210:3"><name pos:start="210:1" pos:end="210:3">int</name></type> <name pos:start="210:5" pos:end="210:25">auth_cred_force_error</name> <init pos:start="210:27" pos:end="210:29">= <expr pos:start="210:29" pos:end="210:29"><literal type="number" pos:start="210:29" pos:end="210:29">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block" pos:start="212:1" pos:end="224:3">/*
 * auth_credentials_token_cb() is the application layer callback function that will
 * return a token based authentication credential when called.  It's registered
 * with the EST Client using the est_client_set_auth_cred_cb().
 * The test function is required to set some global values in order to make this
 * callback operate the way that the test case wants.
 * - auth_cred_force_error = tell this function to force a response code error
 * - test_token = pointer to a hard coded string that is the token string to return
 *
 * This callback must provide the token credentials in a heap based buffer, and
 * ownership of that buffer is implicitly transferred to the ET client library upon
 * return.
 */</comment>
<function pos:start="225:1" pos:end="275:1"><type pos:start="225:1" pos:end="225:21"><name pos:start="225:1" pos:end="225:21">EST_HTTP_AUTH_CRED_RC</name></type> <name pos:start="225:23" pos:end="225:47">auth_credentials_token_cb</name><parameter_list pos:start="225:48" pos:end="225:84">(<parameter pos:start="225:49" pos:end="225:83"><decl pos:start="225:49" pos:end="225:83"><type pos:start="225:49" pos:end="225:67"><name pos:start="225:49" pos:end="225:65">EST_HTTP_AUTH_HDR</name> <modifier pos:start="225:67" pos:end="225:67">*</modifier></type><name pos:start="225:68" pos:end="225:83">auth_credentials</name></decl></parameter>)</parameter_list>
<block pos:start="226:1" pos:end="275:1">{<block_content pos:start="227:5" pos:end="274:46">
    <decl_stmt pos:start="227:5" pos:end="227:27"><decl pos:start="227:5" pos:end="227:26"><type pos:start="227:5" pos:end="227:10"><name pos:start="227:5" pos:end="227:8">char</name> <modifier pos:start="227:10" pos:end="227:10">*</modifier></type><name pos:start="227:11" pos:end="227:19">token_ptr</name> <init pos:start="227:21" pos:end="227:26">= <expr pos:start="227:23" pos:end="227:26"><name pos:start="227:23" pos:end="227:26">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="228:5" pos:end="228:22"><decl pos:start="228:5" pos:end="228:21"><type pos:start="228:5" pos:end="228:7"><name pos:start="228:5" pos:end="228:7">int</name></type> <name pos:start="228:9" pos:end="228:17">token_len</name> <init pos:start="228:19" pos:end="228:21">= <expr pos:start="228:21" pos:end="228:21"><literal type="number" pos:start="228:21" pos:end="228:21">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="230:5" pos:end="230:52"><expr pos:start="230:5" pos:end="230:51"><call pos:start="230:5" pos:end="230:51"><name pos:start="230:5" pos:end="230:13">CU_ASSERT</name><argument_list pos:start="230:14" pos:end="230:51">(<argument pos:start="230:15" pos:end="230:50"><expr pos:start="230:15" pos:end="230:50"><name pos:start="230:15" pos:end="230:36"><name pos:start="230:15" pos:end="230:30">auth_credentials</name><operator pos:start="230:31" pos:end="230:32">-&gt;</operator><name pos:start="230:33" pos:end="230:36">mode</name></name> <operator pos:start="230:38" pos:end="230:39">==</operator> <name pos:start="230:41" pos:end="230:50">AUTH_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="232:5" pos:end="234:7">/*
     * report that the callback has been called.
     */</comment>
    <expr_stmt pos:start="235:5" pos:end="235:34"><expr pos:start="235:5" pos:end="235:33"><name pos:start="235:5" pos:end="235:29">auth_cred_callback_called</name> <operator pos:start="235:31" pos:end="235:31">=</operator> <literal type="number" pos:start="235:33" pos:end="235:33">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="237:5" pos:end="240:7">/*
     * See if the test is requesting to force an error response code from the
     * callback
     */</comment>
    <if_stmt pos:start="241:5" pos:end="243:5"><if pos:start="241:5" pos:end="243:5">if <condition pos:start="241:8" pos:end="241:30">(<expr pos:start="241:9" pos:end="241:29"><name pos:start="241:9" pos:end="241:29">auth_cred_force_error</name></expr>)</condition> <block pos:start="241:32" pos:end="243:5">{<block_content pos:start="242:9" pos:end="242:49">
        <return pos:start="242:9" pos:end="242:49">return<expr pos:start="242:15" pos:end="242:48"><operator pos:start="242:15" pos:end="242:15">(</operator><name pos:start="242:16" pos:end="242:47">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name><operator pos:start="242:48" pos:end="242:48">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="245:5" pos:end="272:5"><if pos:start="245:5" pos:end="272:5">if <condition pos:start="245:8" pos:end="245:45">(<expr pos:start="245:9" pos:end="245:44"><name pos:start="245:9" pos:end="245:30"><name pos:start="245:9" pos:end="245:24">auth_credentials</name><operator pos:start="245:25" pos:end="245:26">-&gt;</operator><name pos:start="245:27" pos:end="245:30">mode</name></name> <operator pos:start="245:32" pos:end="245:33">==</operator> <name pos:start="245:35" pos:end="245:44">AUTH_TOKEN</name></expr>)</condition> <block pos:start="245:47" pos:end="272:5">{<block_content pos:start="250:9" pos:end="271:44">
        <comment type="block" pos:start="246:9" pos:end="249:11">/*
         * If the test_token is set to anything, then we need to allocate
         * space from the heap and copy in the value.
         */</comment>
        <if_stmt pos:start="250:9" pos:end="264:9"><if pos:start="250:9" pos:end="264:9">if <condition pos:start="250:12" pos:end="250:31">(<expr pos:start="250:13" pos:end="250:30"><name pos:start="250:13" pos:end="250:22">test_token</name> <operator pos:start="250:24" pos:end="250:25">!=</operator> <name pos:start="250:27" pos:end="250:30">NULL</name></expr>)</condition> <block pos:start="250:33" pos:end="264:9">{<block_content pos:start="251:13" pos:end="263:40">
            <expr_stmt pos:start="251:13" pos:end="251:43"><expr pos:start="251:13" pos:end="251:42"><name pos:start="251:13" pos:end="251:21">token_len</name> <operator pos:start="251:23" pos:end="251:23">=</operator> <call pos:start="251:25" pos:end="251:42"><name pos:start="251:25" pos:end="251:30">strlen</name><argument_list pos:start="251:31" pos:end="251:42">(<argument pos:start="251:32" pos:end="251:41"><expr pos:start="251:32" pos:end="251:41"><name pos:start="251:32" pos:end="251:41">test_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="251:45" pos:end="252:82">/* use strlen() so that the string can be as large
                                               as needed to test the EST client */</comment>
            <if_stmt pos:start="253:13" pos:end="256:13"><if pos:start="253:13" pos:end="256:13">if <condition pos:start="253:16" pos:end="253:31">(<expr pos:start="253:17" pos:end="253:30"><name pos:start="253:17" pos:end="253:25">token_len</name> <operator pos:start="253:27" pos:end="253:28">==</operator> <literal type="number" pos:start="253:30" pos:end="253:30">0</literal></expr>)</condition> <block pos:start="253:33" pos:end="256:13">{<block_content pos:start="254:17" pos:end="255:56">
                <expr_stmt pos:start="254:17" pos:end="254:92"><expr pos:start="254:17" pos:end="254:91"><call pos:start="254:17" pos:end="254:91"><name pos:start="254:17" pos:end="254:22">printf</name><argument_list pos:start="254:23" pos:end="254:91">(<argument pos:start="254:24" pos:end="254:90"><expr pos:start="254:24" pos:end="254:90"><literal type="string" pos:start="254:24" pos:end="254:90">"\nError determining length of token string used for credentials\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="255:17" pos:end="255:56">return <expr pos:start="255:24" pos:end="255:55"><name pos:start="255:24" pos:end="255:55">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>   
            <expr_stmt pos:start="257:13" pos:end="257:44"><expr pos:start="257:13" pos:end="257:43"><name pos:start="257:13" pos:end="257:21">token_ptr</name> <operator pos:start="257:23" pos:end="257:23">=</operator> <call pos:start="257:25" pos:end="257:43"><name pos:start="257:25" pos:end="257:30">malloc</name><argument_list pos:start="257:31" pos:end="257:43">(<argument pos:start="257:32" pos:end="257:42"><expr pos:start="257:32" pos:end="257:42"><name pos:start="257:32" pos:end="257:40">token_len</name><operator pos:start="257:41" pos:end="257:41">+</operator><literal type="number" pos:start="257:42" pos:end="257:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="258:13" pos:end="261:13"><if pos:start="258:13" pos:end="261:13">if <condition pos:start="258:16" pos:end="258:34">(<expr pos:start="258:17" pos:end="258:33"><name pos:start="258:17" pos:end="258:25">token_ptr</name> <operator pos:start="258:27" pos:end="258:28">==</operator> <name pos:start="258:30" pos:end="258:33">NULL</name></expr>)</condition><block pos:start="258:35" pos:end="261:13">{<block_content pos:start="259:17" pos:end="260:56">
                <expr_stmt pos:start="259:17" pos:end="259:81"><expr pos:start="259:17" pos:end="259:80"><call pos:start="259:17" pos:end="259:80"><name pos:start="259:17" pos:end="259:22">printf</name><argument_list pos:start="259:23" pos:end="259:80">(<argument pos:start="259:24" pos:end="259:79"><expr pos:start="259:24" pos:end="259:79"><literal type="string" pos:start="259:24" pos:end="259:79">"\nError allocating token string used for credentials\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="260:17" pos:end="260:56">return <expr pos:start="260:24" pos:end="260:55"><name pos:start="260:24" pos:end="260:55">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>   
            <expr_stmt pos:start="262:13" pos:end="262:63"><expr pos:start="262:13" pos:end="262:62"><call pos:start="262:13" pos:end="262:62"><name pos:start="262:13" pos:end="262:19">strncpy</name><argument_list pos:start="262:20" pos:end="262:62">(<argument pos:start="262:21" pos:end="262:29"><expr pos:start="262:21" pos:end="262:29"><name pos:start="262:21" pos:end="262:29">token_ptr</name></expr></argument>, <argument pos:start="262:32" pos:end="262:41"><expr pos:start="262:32" pos:end="262:41"><name pos:start="262:32" pos:end="262:41">test_token</name></expr></argument>, <argument pos:start="262:44" pos:end="262:61"><expr pos:start="262:44" pos:end="262:61"><call pos:start="262:44" pos:end="262:61"><name pos:start="262:44" pos:end="262:49">strlen</name><argument_list pos:start="262:50" pos:end="262:61">(<argument pos:start="262:51" pos:end="262:60"><expr pos:start="262:51" pos:end="262:60"><name pos:start="262:51" pos:end="262:60">test_token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="263:13" pos:end="263:40"><expr pos:start="263:13" pos:end="263:39"><name pos:start="263:13" pos:end="263:32"><name pos:start="263:13" pos:end="263:21">token_ptr</name><index pos:start="263:22" pos:end="263:32">[<expr pos:start="263:23" pos:end="263:31"><name pos:start="263:23" pos:end="263:31">token_len</name></expr>]</index></name> <operator pos:start="263:34" pos:end="263:34">=</operator> <literal type="char" pos:start="263:36" pos:end="263:39">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="265:9" pos:end="268:11">/*
         * If we made it this far, token_ptr is pointing to a string
         * containing the token to be returned. Assign it and return success
         */</comment>
        <expr_stmt pos:start="269:9" pos:end="269:49"><expr pos:start="269:9" pos:end="269:48"><name pos:start="269:9" pos:end="269:36"><name pos:start="269:9" pos:end="269:24">auth_credentials</name><operator pos:start="269:25" pos:end="269:26">-&gt;</operator><name pos:start="269:27" pos:end="269:36">auth_token</name></name> <operator pos:start="269:38" pos:end="269:38">=</operator> <name pos:start="269:40" pos:end="269:48">token_ptr</name></expr>;</expr_stmt>
        
        <return pos:start="271:9" pos:end="271:44">return <expr pos:start="271:16" pos:end="271:43"><operator pos:start="271:16" pos:end="271:16">(</operator><name pos:start="271:17" pos:end="271:42">EST_HTTP_AUTH_CRED_SUCCESS</name><operator pos:start="271:43" pos:end="271:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <return pos:start="274:5" pos:end="274:46">return <expr pos:start="274:12" pos:end="274:45"><operator pos:start="274:12" pos:end="274:12">(</operator><name pos:start="274:13" pos:end="274:44">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name><operator pos:start="274:45" pos:end="274:45">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="277:1" pos:end="280:3">/*
 * auth_credentials_basic_cb() is the same as the token based one above, but
 * instead returns the basic credentials of userid and password
 */</comment>
<function pos:start="281:1" pos:end="309:1"><type pos:start="281:1" pos:end="281:21"><name pos:start="281:1" pos:end="281:21">EST_HTTP_AUTH_CRED_RC</name></type> <name pos:start="281:23" pos:end="281:47">auth_credentials_basic_cb</name><parameter_list pos:start="281:48" pos:end="281:84">(<parameter pos:start="281:49" pos:end="281:83"><decl pos:start="281:49" pos:end="281:83"><type pos:start="281:49" pos:end="281:67"><name pos:start="281:49" pos:end="281:65">EST_HTTP_AUTH_HDR</name> <modifier pos:start="281:67" pos:end="281:67">*</modifier></type><name pos:start="281:68" pos:end="281:83">auth_credentials</name></decl></parameter>)</parameter_list>
<block pos:start="282:1" pos:end="309:1">{<block_content pos:start="283:5" pos:end="308:46">
    <expr_stmt pos:start="283:5" pos:end="283:52"><expr pos:start="283:5" pos:end="283:51"><call pos:start="283:5" pos:end="283:51"><name pos:start="283:5" pos:end="283:13">CU_ASSERT</name><argument_list pos:start="283:14" pos:end="283:51">(<argument pos:start="283:15" pos:end="283:50"><expr pos:start="283:15" pos:end="283:50"><name pos:start="283:15" pos:end="283:36"><name pos:start="283:15" pos:end="283:30">auth_credentials</name><operator pos:start="283:31" pos:end="283:32">-&gt;</operator><name pos:start="283:33" pos:end="283:36">mode</name></name> <operator pos:start="283:38" pos:end="283:39">==</operator> <name pos:start="283:41" pos:end="283:50">AUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="285:5" pos:end="287:7">/*
     * report that the callback has been called.
     */</comment>
    <expr_stmt pos:start="288:5" pos:end="288:34"><expr pos:start="288:5" pos:end="288:33"><name pos:start="288:5" pos:end="288:29">auth_cred_callback_called</name> <operator pos:start="288:31" pos:end="288:31">=</operator> <literal type="number" pos:start="288:33" pos:end="288:33">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="290:5" pos:end="293:7">/*
     * See if the test is requesting to force an error response code from the
     * callback
     */</comment>
    <if_stmt pos:start="294:5" pos:end="296:5"><if pos:start="294:5" pos:end="296:5">if <condition pos:start="294:8" pos:end="294:30">(<expr pos:start="294:9" pos:end="294:29"><name pos:start="294:9" pos:end="294:29">auth_cred_force_error</name></expr>)</condition> <block pos:start="294:32" pos:end="296:5">{<block_content pos:start="295:9" pos:end="295:49">
        <return pos:start="295:9" pos:end="295:49">return<expr pos:start="295:15" pos:end="295:48"><operator pos:start="295:15" pos:end="295:15">(</operator><name pos:start="295:16" pos:end="295:47">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name><operator pos:start="295:48" pos:end="295:48">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="298:5" pos:end="306:5"><if pos:start="298:5" pos:end="306:5">if <condition pos:start="298:8" pos:end="298:45">(<expr pos:start="298:9" pos:end="298:44"><name pos:start="298:9" pos:end="298:30"><name pos:start="298:9" pos:end="298:24">auth_credentials</name><operator pos:start="298:25" pos:end="298:26">-&gt;</operator><name pos:start="298:27" pos:end="298:30">mode</name></name> <operator pos:start="298:32" pos:end="298:33">==</operator> <name pos:start="298:35" pos:end="298:44">AUTH_BASIC</name></expr>)</condition> <block pos:start="298:47" pos:end="306:5">{<block_content pos:start="300:9" pos:end="305:44">

        <expr_stmt pos:start="300:9" pos:end="300:59"><expr pos:start="300:9" pos:end="300:58"><name pos:start="300:9" pos:end="300:30"><name pos:start="300:9" pos:end="300:24">auth_credentials</name><operator pos:start="300:25" pos:end="300:26">-&gt;</operator><name pos:start="300:27" pos:end="300:30">user</name></name> <operator pos:start="300:32" pos:end="300:32">=</operator> <call pos:start="300:34" pos:end="300:58"><name pos:start="300:34" pos:end="300:39">malloc</name><argument_list pos:start="300:40" pos:end="300:58">(<argument pos:start="300:41" pos:end="300:57"><expr pos:start="300:41" pos:end="300:57"><sizeof pos:start="300:41" pos:end="300:57">sizeof<argument_list pos:start="300:47" pos:end="300:57">(<argument pos:start="300:48" pos:end="300:56"><expr pos:start="300:48" pos:end="300:56"><literal type="string" pos:start="300:48" pos:end="300:56">"estuser"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="301:9" pos:end="301:70"><expr pos:start="301:9" pos:end="301:69"><call pos:start="301:9" pos:end="301:69"><name pos:start="301:9" pos:end="301:15">strncpy</name><argument_list pos:start="301:16" pos:end="301:69">(<argument pos:start="301:17" pos:end="301:38"><expr pos:start="301:17" pos:end="301:38"><name pos:start="301:17" pos:end="301:38"><name pos:start="301:17" pos:end="301:32">auth_credentials</name><operator pos:start="301:33" pos:end="301:34">-&gt;</operator><name pos:start="301:35" pos:end="301:38">user</name></name></expr></argument>, <argument pos:start="301:41" pos:end="301:49"><expr pos:start="301:41" pos:end="301:49"><literal type="string" pos:start="301:41" pos:end="301:49">"estuser"</literal></expr></argument>, <argument pos:start="301:52" pos:end="301:68"><expr pos:start="301:52" pos:end="301:68"><sizeof pos:start="301:52" pos:end="301:68">sizeof<argument_list pos:start="301:58" pos:end="301:68">(<argument pos:start="301:59" pos:end="301:67"><expr pos:start="301:59" pos:end="301:67"><literal type="string" pos:start="301:59" pos:end="301:67">"estuser"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="302:9" pos:end="302:57"><expr pos:start="302:9" pos:end="302:56"><name pos:start="302:9" pos:end="302:29"><name pos:start="302:9" pos:end="302:24">auth_credentials</name><operator pos:start="302:25" pos:end="302:26">-&gt;</operator><name pos:start="302:27" pos:end="302:29">pwd</name></name> <operator pos:start="302:31" pos:end="302:31">=</operator> <call pos:start="302:33" pos:end="302:56"><name pos:start="302:33" pos:end="302:38">malloc</name><argument_list pos:start="302:39" pos:end="302:56">(<argument pos:start="302:40" pos:end="302:55"><expr pos:start="302:40" pos:end="302:55"><sizeof pos:start="302:40" pos:end="302:55">sizeof<argument_list pos:start="302:46" pos:end="302:55">(<argument pos:start="302:47" pos:end="302:54"><expr pos:start="302:47" pos:end="302:54"><literal type="string" pos:start="302:47" pos:end="302:54">"estpwd"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="303:9" pos:end="303:67"><expr pos:start="303:9" pos:end="303:66"><call pos:start="303:9" pos:end="303:66"><name pos:start="303:9" pos:end="303:15">strncpy</name><argument_list pos:start="303:16" pos:end="303:66">(<argument pos:start="303:17" pos:end="303:37"><expr pos:start="303:17" pos:end="303:37"><name pos:start="303:17" pos:end="303:37"><name pos:start="303:17" pos:end="303:32">auth_credentials</name><operator pos:start="303:33" pos:end="303:34">-&gt;</operator><name pos:start="303:35" pos:end="303:37">pwd</name></name></expr></argument>, <argument pos:start="303:40" pos:end="303:47"><expr pos:start="303:40" pos:end="303:47"><literal type="string" pos:start="303:40" pos:end="303:47">"estpwd"</literal></expr></argument>, <argument pos:start="303:50" pos:end="303:65"><expr pos:start="303:50" pos:end="303:65"><sizeof pos:start="303:50" pos:end="303:65">sizeof<argument_list pos:start="303:56" pos:end="303:65">(<argument pos:start="303:57" pos:end="303:64"><expr pos:start="303:57" pos:end="303:64"><literal type="string" pos:start="303:57" pos:end="303:64">"estpwd"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <return pos:start="305:9" pos:end="305:44">return <expr pos:start="305:16" pos:end="305:43"><operator pos:start="305:16" pos:end="305:16">(</operator><name pos:start="305:17" pos:end="305:42">EST_HTTP_AUTH_CRED_SUCCESS</name><operator pos:start="305:43" pos:end="305:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <return pos:start="308:5" pos:end="308:46">return <expr pos:start="308:12" pos:end="308:45"><operator pos:start="308:12" pos:end="308:12">(</operator><name pos:start="308:13" pos:end="308:44">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name><operator pos:start="308:45" pos:end="308:45">)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="312:1" pos:end="315:3">/*
 * auth_credentials_digest_cb() is the same as the basic based one above, but
 * instead verfies that the auth_mode passed is digest
 */</comment>
<function pos:start="316:1" pos:end="344:1"><type pos:start="316:1" pos:end="316:21"><name pos:start="316:1" pos:end="316:21">EST_HTTP_AUTH_CRED_RC</name></type> <name pos:start="316:23" pos:end="316:48">auth_credentials_digest_cb</name><parameter_list pos:start="316:49" pos:end="316:85">(<parameter pos:start="316:50" pos:end="316:84"><decl pos:start="316:50" pos:end="316:84"><type pos:start="316:50" pos:end="316:68"><name pos:start="316:50" pos:end="316:66">EST_HTTP_AUTH_HDR</name> <modifier pos:start="316:68" pos:end="316:68">*</modifier></type><name pos:start="316:69" pos:end="316:84">auth_credentials</name></decl></parameter>)</parameter_list>
<block pos:start="317:1" pos:end="344:1">{<block_content pos:start="318:5" pos:end="343:46">
    <expr_stmt pos:start="318:5" pos:end="318:53"><expr pos:start="318:5" pos:end="318:52"><call pos:start="318:5" pos:end="318:52"><name pos:start="318:5" pos:end="318:13">CU_ASSERT</name><argument_list pos:start="318:14" pos:end="318:52">(<argument pos:start="318:15" pos:end="318:51"><expr pos:start="318:15" pos:end="318:51"><name pos:start="318:15" pos:end="318:36"><name pos:start="318:15" pos:end="318:30">auth_credentials</name><operator pos:start="318:31" pos:end="318:32">-&gt;</operator><name pos:start="318:33" pos:end="318:36">mode</name></name> <operator pos:start="318:38" pos:end="318:39">==</operator> <name pos:start="318:41" pos:end="318:51">AUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="320:5" pos:end="322:7">/*
     * report that the callback has been called.
     */</comment>
    <expr_stmt pos:start="323:5" pos:end="323:34"><expr pos:start="323:5" pos:end="323:33"><name pos:start="323:5" pos:end="323:29">auth_cred_callback_called</name> <operator pos:start="323:31" pos:end="323:31">=</operator> <literal type="number" pos:start="323:33" pos:end="323:33">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="325:5" pos:end="328:7">/*
     * See if the test is requesting to force an error response code from the
     * callback
     */</comment>
    <if_stmt pos:start="329:5" pos:end="331:5"><if pos:start="329:5" pos:end="331:5">if <condition pos:start="329:8" pos:end="329:30">(<expr pos:start="329:9" pos:end="329:29"><name pos:start="329:9" pos:end="329:29">auth_cred_force_error</name></expr>)</condition> <block pos:start="329:32" pos:end="331:5">{<block_content pos:start="330:9" pos:end="330:49">
        <return pos:start="330:9" pos:end="330:49">return<expr pos:start="330:15" pos:end="330:48"><operator pos:start="330:15" pos:end="330:15">(</operator><name pos:start="330:16" pos:end="330:47">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name><operator pos:start="330:48" pos:end="330:48">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="333:5" pos:end="341:5"><if pos:start="333:5" pos:end="341:5">if <condition pos:start="333:8" pos:end="333:46">(<expr pos:start="333:9" pos:end="333:45"><name pos:start="333:9" pos:end="333:30"><name pos:start="333:9" pos:end="333:24">auth_credentials</name><operator pos:start="333:25" pos:end="333:26">-&gt;</operator><name pos:start="333:27" pos:end="333:30">mode</name></name> <operator pos:start="333:32" pos:end="333:33">==</operator> <name pos:start="333:35" pos:end="333:45">AUTH_DIGEST</name></expr>)</condition> <block pos:start="333:48" pos:end="341:5">{<block_content pos:start="335:9" pos:end="340:44">

        <expr_stmt pos:start="335:9" pos:end="335:59"><expr pos:start="335:9" pos:end="335:58"><name pos:start="335:9" pos:end="335:30"><name pos:start="335:9" pos:end="335:24">auth_credentials</name><operator pos:start="335:25" pos:end="335:26">-&gt;</operator><name pos:start="335:27" pos:end="335:30">user</name></name> <operator pos:start="335:32" pos:end="335:32">=</operator> <call pos:start="335:34" pos:end="335:58"><name pos:start="335:34" pos:end="335:39">malloc</name><argument_list pos:start="335:40" pos:end="335:58">(<argument pos:start="335:41" pos:end="335:57"><expr pos:start="335:41" pos:end="335:57"><sizeof pos:start="335:41" pos:end="335:57">sizeof<argument_list pos:start="335:47" pos:end="335:57">(<argument pos:start="335:48" pos:end="335:56"><expr pos:start="335:48" pos:end="335:56"><literal type="string" pos:start="335:48" pos:end="335:56">"estuser"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="336:9" pos:end="336:70"><expr pos:start="336:9" pos:end="336:69"><call pos:start="336:9" pos:end="336:69"><name pos:start="336:9" pos:end="336:15">strncpy</name><argument_list pos:start="336:16" pos:end="336:69">(<argument pos:start="336:17" pos:end="336:38"><expr pos:start="336:17" pos:end="336:38"><name pos:start="336:17" pos:end="336:38"><name pos:start="336:17" pos:end="336:32">auth_credentials</name><operator pos:start="336:33" pos:end="336:34">-&gt;</operator><name pos:start="336:35" pos:end="336:38">user</name></name></expr></argument>, <argument pos:start="336:41" pos:end="336:49"><expr pos:start="336:41" pos:end="336:49"><literal type="string" pos:start="336:41" pos:end="336:49">"estuser"</literal></expr></argument>, <argument pos:start="336:52" pos:end="336:68"><expr pos:start="336:52" pos:end="336:68"><sizeof pos:start="336:52" pos:end="336:68">sizeof<argument_list pos:start="336:58" pos:end="336:68">(<argument pos:start="336:59" pos:end="336:67"><expr pos:start="336:59" pos:end="336:67"><literal type="string" pos:start="336:59" pos:end="336:67">"estuser"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="337:9" pos:end="337:57"><expr pos:start="337:9" pos:end="337:56"><name pos:start="337:9" pos:end="337:29"><name pos:start="337:9" pos:end="337:24">auth_credentials</name><operator pos:start="337:25" pos:end="337:26">-&gt;</operator><name pos:start="337:27" pos:end="337:29">pwd</name></name> <operator pos:start="337:31" pos:end="337:31">=</operator> <call pos:start="337:33" pos:end="337:56"><name pos:start="337:33" pos:end="337:38">malloc</name><argument_list pos:start="337:39" pos:end="337:56">(<argument pos:start="337:40" pos:end="337:55"><expr pos:start="337:40" pos:end="337:55"><sizeof pos:start="337:40" pos:end="337:55">sizeof<argument_list pos:start="337:46" pos:end="337:55">(<argument pos:start="337:47" pos:end="337:54"><expr pos:start="337:47" pos:end="337:54"><literal type="string" pos:start="337:47" pos:end="337:54">"estpwd"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="338:9" pos:end="338:67"><expr pos:start="338:9" pos:end="338:66"><call pos:start="338:9" pos:end="338:66"><name pos:start="338:9" pos:end="338:15">strncpy</name><argument_list pos:start="338:16" pos:end="338:66">(<argument pos:start="338:17" pos:end="338:37"><expr pos:start="338:17" pos:end="338:37"><name pos:start="338:17" pos:end="338:37"><name pos:start="338:17" pos:end="338:32">auth_credentials</name><operator pos:start="338:33" pos:end="338:34">-&gt;</operator><name pos:start="338:35" pos:end="338:37">pwd</name></name></expr></argument>, <argument pos:start="338:40" pos:end="338:47"><expr pos:start="338:40" pos:end="338:47"><literal type="string" pos:start="338:40" pos:end="338:47">"estpwd"</literal></expr></argument>, <argument pos:start="338:50" pos:end="338:65"><expr pos:start="338:50" pos:end="338:65"><sizeof pos:start="338:50" pos:end="338:65">sizeof<argument_list pos:start="338:56" pos:end="338:65">(<argument pos:start="338:57" pos:end="338:64"><expr pos:start="338:57" pos:end="338:64"><literal type="string" pos:start="338:57" pos:end="338:64">"estpwd"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <return pos:start="340:9" pos:end="340:44">return <expr pos:start="340:16" pos:end="340:43"><operator pos:start="340:16" pos:end="340:16">(</operator><name pos:start="340:17" pos:end="340:42">EST_HTTP_AUTH_CRED_SUCCESS</name><operator pos:start="340:43" pos:end="340:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <return pos:start="343:5" pos:end="343:46">return <expr pos:start="343:12" pos:end="343:45"><operator pos:start="343:12" pos:end="343:12">(</operator><name pos:start="343:13" pos:end="343:44">EST_HTTP_AUTH_CRED_NOT_AVAILABLE</name><operator pos:start="343:45" pos:end="343:45">)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="347:1" pos:end="351:3">/*
 * Test the est_client_set_auth_cred_cb API
 *
 * Exercise the parameters
 */</comment>
<function pos:start="352:1" pos:end="386:1"><type pos:start="352:1" pos:end="352:11"><specifier pos:start="352:1" pos:end="352:6">static</specifier> <name pos:start="352:8" pos:end="352:11">void</name></type> <name pos:start="352:13" pos:end="352:24">us1883_test1</name> <parameter_list pos:start="352:26" pos:end="352:31">(<parameter pos:start="352:27" pos:end="352:30"><decl pos:start="352:27" pos:end="352:30"><type pos:start="352:27" pos:end="352:30"><name pos:start="352:27" pos:end="352:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="353:1" pos:end="386:1">{<block_content pos:start="354:5" pos:end="385:22">
    <decl_stmt pos:start="354:5" pos:end="354:19"><decl pos:start="354:5" pos:end="354:18"><type pos:start="354:5" pos:end="354:13"><name pos:start="354:5" pos:end="354:13">EST_ERROR</name></type> <name pos:start="354:15" pos:end="354:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="355:5" pos:end="355:25"><decl pos:start="355:5" pos:end="355:24"><type pos:start="355:5" pos:end="355:13"><name pos:start="355:5" pos:end="355:11">EST_CTX</name> <modifier pos:start="355:13" pos:end="355:13">*</modifier></type><name pos:start="355:14" pos:end="355:17">ectx</name> <init pos:start="355:19" pos:end="355:24">= <expr pos:start="355:21" pos:end="355:24"><name pos:start="355:21" pos:end="355:24">NULL</name></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="357:5" pos:end="357:16"><expr pos:start="357:5" pos:end="357:15"><name pos:start="357:5" pos:end="357:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="359:5" pos:end="361:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="362:5" pos:end="364:54"><expr pos:start="362:5" pos:end="364:53"><name pos:start="362:5" pos:end="362:8">ectx</name> <operator pos:start="362:10" pos:end="362:10">=</operator> <call pos:start="362:12" pos:end="364:53"><name pos:start="362:12" pos:end="362:26">est_client_init</name><argument_list pos:start="362:27" pos:end="364:53">(<argument pos:start="362:28" pos:end="362:34"><expr pos:start="362:28" pos:end="362:34"><name pos:start="362:28" pos:end="362:34">cacerts</name></expr></argument>, <argument pos:start="362:37" pos:end="362:47"><expr pos:start="362:37" pos:end="362:47"><name pos:start="362:37" pos:end="362:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="363:28" pos:end="363:46"><expr pos:start="363:28" pos:end="363:46"><name pos:start="363:28" pos:end="363:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="364:28" pos:end="364:52"><expr pos:start="364:28" pos:end="364:52"><name pos:start="364:28" pos:end="364:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="365:5" pos:end="365:28"><expr pos:start="365:5" pos:end="365:27"><call pos:start="365:5" pos:end="365:27"><name pos:start="365:5" pos:end="365:13">CU_ASSERT</name><argument_list pos:start="365:14" pos:end="365:27">(<argument pos:start="365:15" pos:end="365:26"><expr pos:start="365:15" pos:end="365:26"><name pos:start="365:15" pos:end="365:18">ectx</name> <operator pos:start="365:20" pos:end="365:21">!=</operator> <name pos:start="365:23" pos:end="365:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="367:5" pos:end="369:7">/* Forgot to specify any parameters. Context will
     * get caught
     */</comment>
    <expr_stmt pos:start="370:5" pos:end="370:51"><expr pos:start="370:5" pos:end="370:50"><name pos:start="370:5" pos:end="370:8">e_rc</name> <operator pos:start="370:10" pos:end="370:10">=</operator> <call pos:start="370:12" pos:end="370:50"><name pos:start="370:12" pos:end="370:38">est_client_set_auth_cred_cb</name><argument_list pos:start="370:39" pos:end="370:50">(<argument pos:start="370:40" pos:end="370:43"><expr pos:start="370:40" pos:end="370:43"><name pos:start="370:40" pos:end="370:43">NULL</name></expr></argument>, <argument pos:start="370:46" pos:end="370:49"><expr pos:start="370:46" pos:end="370:49"><name pos:start="370:46" pos:end="370:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="371:5" pos:end="371:38"><expr pos:start="371:5" pos:end="371:37"><call pos:start="371:5" pos:end="371:37"><name pos:start="371:5" pos:end="371:13">CU_ASSERT</name><argument_list pos:start="371:14" pos:end="371:37">(<argument pos:start="371:15" pos:end="371:36"><expr pos:start="371:15" pos:end="371:36"><name pos:start="371:15" pos:end="371:18">e_rc</name> <operator pos:start="371:20" pos:end="371:21">==</operator> <name pos:start="371:23" pos:end="371:36">EST_ERR_NO_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="373:5" pos:end="375:7">/*
     * valid call
     */</comment>
    <expr_stmt pos:start="376:5" pos:end="376:72"><expr pos:start="376:5" pos:end="376:71"><name pos:start="376:5" pos:end="376:8">e_rc</name> <operator pos:start="376:10" pos:end="376:10">=</operator> <call pos:start="376:12" pos:end="376:71"><name pos:start="376:12" pos:end="376:38">est_client_set_auth_cred_cb</name><argument_list pos:start="376:39" pos:end="376:71">(<argument pos:start="376:40" pos:end="376:43"><expr pos:start="376:40" pos:end="376:43"><name pos:start="376:40" pos:end="376:43">ectx</name></expr></argument>, <argument pos:start="376:46" pos:end="376:70"><expr pos:start="376:46" pos:end="376:70"><name pos:start="376:46" pos:end="376:70">auth_credentials_token_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="377:5" pos:end="377:36"><expr pos:start="377:5" pos:end="377:35"><call pos:start="377:5" pos:end="377:35"><name pos:start="377:5" pos:end="377:13">CU_ASSERT</name><argument_list pos:start="377:14" pos:end="377:35">(<argument pos:start="377:15" pos:end="377:34"><expr pos:start="377:15" pos:end="377:34"><name pos:start="377:15" pos:end="377:18">e_rc</name> <operator pos:start="377:20" pos:end="377:21">==</operator> <name pos:start="377:23" pos:end="377:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="379:5" pos:end="381:7">/*
     * attempt to reset the callback function
     */</comment>
    <expr_stmt pos:start="382:5" pos:end="382:51"><expr pos:start="382:5" pos:end="382:50"><name pos:start="382:5" pos:end="382:8">e_rc</name> <operator pos:start="382:10" pos:end="382:10">=</operator> <call pos:start="382:12" pos:end="382:50"><name pos:start="382:12" pos:end="382:38">est_client_set_auth_cred_cb</name><argument_list pos:start="382:39" pos:end="382:50">(<argument pos:start="382:40" pos:end="382:43"><expr pos:start="382:40" pos:end="382:43"><name pos:start="382:40" pos:end="382:43">ectx</name></expr></argument>, <argument pos:start="382:46" pos:end="382:49"><expr pos:start="382:46" pos:end="382:49"><name pos:start="382:46" pos:end="382:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="383:5" pos:end="383:36"><expr pos:start="383:5" pos:end="383:35"><call pos:start="383:5" pos:end="383:35"><name pos:start="383:5" pos:end="383:13">CU_ASSERT</name><argument_list pos:start="383:14" pos:end="383:35">(<argument pos:start="383:15" pos:end="383:34"><expr pos:start="383:15" pos:end="383:34"><name pos:start="383:15" pos:end="383:18">e_rc</name> <operator pos:start="383:20" pos:end="383:21">==</operator> <name pos:start="383:23" pos:end="383:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:22"><expr pos:start="385:5" pos:end="385:21"><call pos:start="385:5" pos:end="385:21"><name pos:start="385:5" pos:end="385:15">est_destroy</name><argument_list pos:start="385:16" pos:end="385:21">(<argument pos:start="385:17" pos:end="385:20"><expr pos:start="385:17" pos:end="385:20"><name pos:start="385:17" pos:end="385:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="388:1" pos:end="390:3">/*
 * us1883_simple_enroll() is used by test cases to perform a simple enroll.
 */</comment>
<function pos:start="391:1" pos:end="434:1"><type pos:start="391:1" pos:end="391:11"><specifier pos:start="391:1" pos:end="391:6">static</specifier> <name pos:start="391:8" pos:end="391:11">void</name></type> <name pos:start="391:13" pos:end="391:32">us1883_simple_enroll</name> <parameter_list pos:start="391:34" pos:end="391:117">(<parameter pos:start="391:35" pos:end="391:42"><decl pos:start="391:35" pos:end="391:42"><type pos:start="391:35" pos:end="391:42"><name pos:start="391:35" pos:end="391:38">char</name> <modifier pos:start="391:40" pos:end="391:40">*</modifier></type><name pos:start="391:41" pos:end="391:42">cn</name></decl></parameter>, <parameter pos:start="391:45" pos:end="391:56"><decl pos:start="391:45" pos:end="391:56"><type pos:start="391:45" pos:end="391:56"><name pos:start="391:45" pos:end="391:48">char</name> <modifier pos:start="391:50" pos:end="391:50">*</modifier></type><name pos:start="391:51" pos:end="391:56">server</name></decl></parameter>, <parameter pos:start="391:59" pos:end="391:86"><decl pos:start="391:59" pos:end="391:86"><type pos:start="391:59" pos:end="391:86"><name pos:start="391:59" pos:end="391:67">EST_ERROR</name></type> <name pos:start="391:69" pos:end="391:86">expected_enroll_rv</name></decl></parameter>, <parameter pos:start="391:89" pos:end="391:116"><decl pos:start="391:89" pos:end="391:116"><type pos:start="391:89" pos:end="391:116"><name pos:start="391:89" pos:end="391:107">auth_credentials_cb</name></type> <name pos:start="391:109" pos:end="391:116">callback</name></decl></parameter>)</parameter_list>
<block pos:start="392:1" pos:end="434:1">{<block_content pos:start="393:5" pos:end="433:22">
    <decl_stmt pos:start="393:5" pos:end="393:18"><decl pos:start="393:5" pos:end="393:17"><type pos:start="393:5" pos:end="393:13"><name pos:start="393:5" pos:end="393:11">EST_CTX</name> <modifier pos:start="393:13" pos:end="393:13">*</modifier></type><name pos:start="393:14" pos:end="393:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="394:5" pos:end="394:18"><decl pos:start="394:5" pos:end="394:17"><type pos:start="394:5" pos:end="394:14"><name pos:start="394:5" pos:end="394:12">EVP_PKEY</name> <modifier pos:start="394:14" pos:end="394:14">*</modifier></type><name pos:start="394:15" pos:end="394:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="395:5" pos:end="395:17"><decl pos:start="395:5" pos:end="395:16"><type pos:start="395:5" pos:end="395:13"><name pos:start="395:5" pos:end="395:13">EST_ERROR</name></type> <name pos:start="395:15" pos:end="395:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="396:5" pos:end="396:22"><decl pos:start="396:5" pos:end="396:21"><type pos:start="396:5" pos:end="396:7"><name pos:start="396:5" pos:end="396:7">int</name></type> <name pos:start="396:9" pos:end="396:17">pkcs7_len</name> <init pos:start="396:19" pos:end="396:21">= <expr pos:start="396:21" pos:end="396:21"><literal type="number" pos:start="396:21" pos:end="396:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="397:5" pos:end="397:35"><decl pos:start="397:5" pos:end="397:34"><type pos:start="397:5" pos:end="397:19"><name pos:start="397:5" pos:end="397:12">unsigned</name> <name pos:start="397:14" pos:end="397:17">char</name> <modifier pos:start="397:19" pos:end="397:19">*</modifier></type><name pos:start="397:20" pos:end="397:27">new_cert</name> <init pos:start="397:29" pos:end="397:34">= <expr pos:start="397:31" pos:end="397:34"><name pos:start="397:31" pos:end="397:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="398:5" pos:end="398:19"><decl pos:start="398:5" pos:end="398:18"><type pos:start="398:5" pos:end="398:13"><name pos:start="398:5" pos:end="398:13">EST_ERROR</name></type> <name pos:start="398:15" pos:end="398:18">e_rc</name></decl>;</decl_stmt> 

    <comment type="block" pos:start="400:5" pos:end="402:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="403:5" pos:end="405:54"><expr pos:start="403:5" pos:end="405:53"><name pos:start="403:5" pos:end="403:8">ectx</name> <operator pos:start="403:10" pos:end="403:10">=</operator> <call pos:start="403:12" pos:end="405:53"><name pos:start="403:12" pos:end="403:26">est_client_init</name><argument_list pos:start="403:27" pos:end="405:53">(<argument pos:start="403:28" pos:end="403:34"><expr pos:start="403:28" pos:end="403:34"><name pos:start="403:28" pos:end="403:34">cacerts</name></expr></argument>, <argument pos:start="403:37" pos:end="403:47"><expr pos:start="403:37" pos:end="403:47"><name pos:start="403:37" pos:end="403:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="404:28" pos:end="404:46"><expr pos:start="404:28" pos:end="404:46"><name pos:start="404:28" pos:end="404:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="405:28" pos:end="405:52"><expr pos:start="405:28" pos:end="405:52"><name pos:start="405:28" pos:end="405:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="406:5" pos:end="406:28"><expr pos:start="406:5" pos:end="406:27"><call pos:start="406:5" pos:end="406:27"><name pos:start="406:5" pos:end="406:13">CU_ASSERT</name><argument_list pos:start="406:14" pos:end="406:27">(<argument pos:start="406:15" pos:end="406:26"><expr pos:start="406:15" pos:end="406:26"><name pos:start="406:15" pos:end="406:18">ectx</name> <operator pos:start="406:20" pos:end="406:21">!=</operator> <name pos:start="406:23" pos:end="406:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="408:5" pos:end="408:55"><expr pos:start="408:5" pos:end="408:54"><name pos:start="408:5" pos:end="408:8">e_rc</name> <operator pos:start="408:10" pos:end="408:10">=</operator> <call pos:start="408:12" pos:end="408:54"><name pos:start="408:12" pos:end="408:38">est_client_set_auth_cred_cb</name><argument_list pos:start="408:39" pos:end="408:54">(<argument pos:start="408:40" pos:end="408:43"><expr pos:start="408:40" pos:end="408:43"><name pos:start="408:40" pos:end="408:43">ectx</name></expr></argument>, <argument pos:start="408:46" pos:end="408:53"><expr pos:start="408:46" pos:end="408:53"><name pos:start="408:46" pos:end="408:53">callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="409:5" pos:end="409:36"><expr pos:start="409:5" pos:end="409:35"><call pos:start="409:5" pos:end="409:35"><name pos:start="409:5" pos:end="409:13">CU_ASSERT</name><argument_list pos:start="409:14" pos:end="409:35">(<argument pos:start="409:15" pos:end="409:34"><expr pos:start="409:15" pos:end="409:34"><name pos:start="409:15" pos:end="409:18">e_rc</name> <operator pos:start="409:20" pos:end="409:21">==</operator> <name pos:start="409:23" pos:end="409:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="411:5" pos:end="413:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="414:5" pos:end="414:63"><expr pos:start="414:5" pos:end="414:62"><call pos:start="414:5" pos:end="414:62"><name pos:start="414:5" pos:end="414:25">est_client_set_server</name><argument_list pos:start="414:26" pos:end="414:62">(<argument pos:start="414:27" pos:end="414:30"><expr pos:start="414:27" pos:end="414:30"><name pos:start="414:27" pos:end="414:30">ectx</name></expr></argument>, <argument pos:start="414:33" pos:end="414:38"><expr pos:start="414:33" pos:end="414:38"><name pos:start="414:33" pos:end="414:38">server</name></expr></argument>, <argument pos:start="414:41" pos:end="414:55"><expr pos:start="414:41" pos:end="414:55"><name pos:start="414:41" pos:end="414:55">US1883_TCP_PORT</name></expr></argument>, <argument pos:start="414:58" pos:end="414:61"><expr pos:start="414:58" pos:end="414:61"><name pos:start="414:58" pos:end="414:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="416:5" pos:end="418:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="419:5" pos:end="419:33"><expr pos:start="419:5" pos:end="419:32"><name pos:start="419:5" pos:end="419:7">key</name> <operator pos:start="419:9" pos:end="419:9">=</operator> <call pos:start="419:11" pos:end="419:32"><name pos:start="419:11" pos:end="419:30">generate_private_key</name><argument_list pos:start="419:31" pos:end="419:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="420:5" pos:end="420:27"><expr pos:start="420:5" pos:end="420:26"><call pos:start="420:5" pos:end="420:26"><name pos:start="420:5" pos:end="420:13">CU_ASSERT</name><argument_list pos:start="420:14" pos:end="420:26">(<argument pos:start="420:15" pos:end="420:25"><expr pos:start="420:15" pos:end="420:25"><name pos:start="420:15" pos:end="420:17">key</name> <operator pos:start="420:19" pos:end="420:20">!=</operator> <name pos:start="420:22" pos:end="420:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="422:5" pos:end="424:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="425:5" pos:end="425:54"><expr pos:start="425:5" pos:end="425:53"><name pos:start="425:5" pos:end="425:6">rv</name> <operator pos:start="425:8" pos:end="425:8">=</operator> <call pos:start="425:10" pos:end="425:53"><name pos:start="425:10" pos:end="425:26">est_client_enroll</name><argument_list pos:start="425:27" pos:end="425:53">(<argument pos:start="425:28" pos:end="425:31"><expr pos:start="425:28" pos:end="425:31"><name pos:start="425:28" pos:end="425:31">ectx</name></expr></argument>, <argument pos:start="425:34" pos:end="425:35"><expr pos:start="425:34" pos:end="425:35"><name pos:start="425:34" pos:end="425:35">cn</name></expr></argument>, <argument pos:start="425:38" pos:end="425:47"><expr pos:start="425:38" pos:end="425:47"><operator pos:start="425:38" pos:end="425:38">&amp;</operator><name pos:start="425:39" pos:end="425:47">pkcs7_len</name></expr></argument>, <argument pos:start="425:50" pos:end="425:52"><expr pos:start="425:50" pos:end="425:52"><name pos:start="425:50" pos:end="425:52">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="426:5" pos:end="426:40"><expr pos:start="426:5" pos:end="426:39"><call pos:start="426:5" pos:end="426:39"><name pos:start="426:5" pos:end="426:13">CU_ASSERT</name><argument_list pos:start="426:14" pos:end="426:39">(<argument pos:start="426:15" pos:end="426:38"><expr pos:start="426:15" pos:end="426:38"><name pos:start="426:15" pos:end="426:16">rv</name> <operator pos:start="426:18" pos:end="426:19">==</operator> <name pos:start="426:21" pos:end="426:38">expected_enroll_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="428:5" pos:end="430:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="431:5" pos:end="431:23"><expr pos:start="431:5" pos:end="431:22"><call pos:start="431:5" pos:end="431:22"><name pos:start="431:5" pos:end="431:17">EVP_PKEY_free</name><argument_list pos:start="431:18" pos:end="431:22">(<argument pos:start="431:19" pos:end="431:21"><expr pos:start="431:19" pos:end="431:21"><name pos:start="431:19" pos:end="431:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="432:5" pos:end="432:33"><if pos:start="432:5" pos:end="432:33">if <condition pos:start="432:8" pos:end="432:17">(<expr pos:start="432:9" pos:end="432:16"><name pos:start="432:9" pos:end="432:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="432:19" pos:end="432:33"><block_content pos:start="432:19" pos:end="432:33"> <expr_stmt pos:start="432:19" pos:end="432:33"><expr pos:start="432:19" pos:end="432:32"><call pos:start="432:19" pos:end="432:32"><name pos:start="432:19" pos:end="432:22">free</name><argument_list pos:start="432:23" pos:end="432:32">(<argument pos:start="432:24" pos:end="432:31"><expr pos:start="432:24" pos:end="432:31"><name pos:start="432:24" pos:end="432:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="433:5" pos:end="433:22"><expr pos:start="433:5" pos:end="433:21"><call pos:start="433:5" pos:end="433:21"><name pos:start="433:5" pos:end="433:15">est_destroy</name><argument_list pos:start="433:16" pos:end="433:21">(<argument pos:start="433:17" pos:end="433:20"><expr pos:start="433:17" pos:end="433:20"><name pos:start="433:17" pos:end="433:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="437:1" pos:end="446:3">/*
 * Perform a simple enroll first in order to get a valid cert, then perform the
 * reenroll.  The simple enroll needs to be successful, so it's currently
 * being done using basic mode because the EST server does not yet have token
 * based support.
 * PDB NOTE:  Once the server side token support have been implemented, this
 * this function can optionally be updated to do token mode on the first enroll,
 * but it's not absolutely necessary since the purpose of this is to test reenroll
 * and the initial enroll is needed just to get the cert.
 */</comment>
<function pos:start="447:1" pos:end="577:1"><type pos:start="447:1" pos:end="448:4"><specifier pos:start="447:1" pos:end="447:6">static</specifier>
<name pos:start="448:1" pos:end="448:4">void</name></type> <name pos:start="448:6" pos:end="448:27">us1883_simple_reenroll</name> <parameter_list pos:start="448:29" pos:end="448:112">(<parameter pos:start="448:30" pos:end="448:37"><decl pos:start="448:30" pos:end="448:37"><type pos:start="448:30" pos:end="448:37"><name pos:start="448:30" pos:end="448:33">char</name> <modifier pos:start="448:35" pos:end="448:35">*</modifier></type><name pos:start="448:36" pos:end="448:37">cn</name></decl></parameter>, <parameter pos:start="448:40" pos:end="448:51"><decl pos:start="448:40" pos:end="448:51"><type pos:start="448:40" pos:end="448:51"><name pos:start="448:40" pos:end="448:43">char</name> <modifier pos:start="448:45" pos:end="448:45">*</modifier></type><name pos:start="448:46" pos:end="448:51">server</name></decl></parameter>, <parameter pos:start="448:54" pos:end="448:81"><decl pos:start="448:54" pos:end="448:81"><type pos:start="448:54" pos:end="448:81"><name pos:start="448:54" pos:end="448:62">EST_ERROR</name></type> <name pos:start="448:64" pos:end="448:81">expected_enroll_rv</name></decl></parameter>, <parameter pos:start="448:84" pos:end="448:111"><decl pos:start="448:84" pos:end="448:111"><type pos:start="448:84" pos:end="448:111"><name pos:start="448:84" pos:end="448:102">auth_credentials_cb</name></type> <name pos:start="448:104" pos:end="448:111">callback</name></decl></parameter>)</parameter_list>
<block pos:start="449:1" pos:end="577:1">{<block_content pos:start="450:5" pos:end="576:22">
    <decl_stmt pos:start="450:5" pos:end="450:18"><decl pos:start="450:5" pos:end="450:17"><type pos:start="450:5" pos:end="450:13"><name pos:start="450:5" pos:end="450:11">EST_CTX</name> <modifier pos:start="450:13" pos:end="450:13">*</modifier></type><name pos:start="450:14" pos:end="450:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="451:5" pos:end="451:18"><decl pos:start="451:5" pos:end="451:17"><type pos:start="451:5" pos:end="451:14"><name pos:start="451:5" pos:end="451:12">EVP_PKEY</name> <modifier pos:start="451:14" pos:end="451:14">*</modifier></type><name pos:start="451:15" pos:end="451:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="452:5" pos:end="452:17"><decl pos:start="452:5" pos:end="452:16"><type pos:start="452:5" pos:end="452:13"><name pos:start="452:5" pos:end="452:13">EST_ERROR</name></type> <name pos:start="452:15" pos:end="452:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="453:5" pos:end="453:22"><decl pos:start="453:5" pos:end="453:21"><type pos:start="453:5" pos:end="453:7"><name pos:start="453:5" pos:end="453:7">int</name></type> <name pos:start="453:9" pos:end="453:17">pkcs7_len</name> <init pos:start="453:19" pos:end="453:21">= <expr pos:start="453:21" pos:end="453:21"><literal type="number" pos:start="453:21" pos:end="453:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="454:5" pos:end="454:35"><decl pos:start="454:5" pos:end="454:34"><type pos:start="454:5" pos:end="454:19"><name pos:start="454:5" pos:end="454:12">unsigned</name> <name pos:start="454:14" pos:end="454:17">char</name> <modifier pos:start="454:19" pos:end="454:19">*</modifier></type><name pos:start="454:20" pos:end="454:27">new_cert</name> <init pos:start="454:29" pos:end="454:34">= <expr pos:start="454:31" pos:end="454:34"><name pos:start="454:31" pos:end="454:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="456:5" pos:end="456:21"><decl pos:start="456:5" pos:end="456:20"><type pos:start="456:5" pos:end="456:11"><name pos:start="456:5" pos:end="456:9">PKCS7</name> <modifier pos:start="456:11" pos:end="456:11">*</modifier></type><name pos:start="456:12" pos:end="456:13">p7</name> <init pos:start="456:15" pos:end="456:20">= <expr pos:start="456:17" pos:end="456:20"><name pos:start="456:17" pos:end="456:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="457:5" pos:end="457:19"><decl pos:start="457:5" pos:end="457:12"><type pos:start="457:5" pos:end="457:9"><name pos:start="457:5" pos:end="457:7">BIO</name> <modifier pos:start="457:9" pos:end="457:9">*</modifier></type><name pos:start="457:10" pos:end="457:12">b64</name></decl>, <decl pos:start="457:15" pos:end="457:18"><type ref="prev" pos:start="457:5" pos:end="457:9"><modifier pos:start="457:15" pos:end="457:15">*</modifier></type><name pos:start="457:16" pos:end="457:18">out</name></decl>;</decl_stmt>
    <decl_stmt pos:start="458:5" pos:end="458:22"><decl pos:start="458:5" pos:end="458:21"><type pos:start="458:5" pos:end="458:10"><name pos:start="458:5" pos:end="458:8">X509</name> <modifier pos:start="458:10" pos:end="458:10">*</modifier></type><name pos:start="458:11" pos:end="458:14">cert</name> <init pos:start="458:16" pos:end="458:21">= <expr pos:start="458:18" pos:end="458:21"><name pos:start="458:18" pos:end="458:21">NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="459:5" pos:end="459:33"><expr pos:start="459:5" pos:end="459:32"><call pos:start="459:5" pos:end="459:18"><name pos:start="459:5" pos:end="459:12">STACK_OF</name><argument_list pos:start="459:13" pos:end="459:18">(<argument pos:start="459:14" pos:end="459:17"><expr pos:start="459:14" pos:end="459:17"><name pos:start="459:14" pos:end="459:17">X509</name></expr></argument>)</argument_list></call> <operator pos:start="459:20" pos:end="459:20">*</operator><name pos:start="459:21" pos:end="459:25">certs</name> <operator pos:start="459:27" pos:end="459:27">=</operator> <name pos:start="459:29" pos:end="459:32">NULL</name></expr>;</expr_stmt>
    <decl_stmt pos:start="460:5" pos:end="460:10"><decl pos:start="460:5" pos:end="460:9"><type pos:start="460:5" pos:end="460:7"><name pos:start="460:5" pos:end="460:7">int</name></type> <name pos:start="460:9" pos:end="460:9">i</name></decl>;</decl_stmt>
    
    <decl_stmt pos:start="462:5" pos:end="462:19"><decl pos:start="462:5" pos:end="462:18"><type pos:start="462:5" pos:end="462:13"><name pos:start="462:5" pos:end="462:13">EST_ERROR</name></type> <name pos:start="462:15" pos:end="462:18">e_rc</name></decl>;</decl_stmt>    

    <comment type="block" pos:start="464:5" pos:end="466:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="467:5" pos:end="469:54"><expr pos:start="467:5" pos:end="469:53"><name pos:start="467:5" pos:end="467:8">ectx</name> <operator pos:start="467:10" pos:end="467:10">=</operator> <call pos:start="467:12" pos:end="469:53"><name pos:start="467:12" pos:end="467:26">est_client_init</name><argument_list pos:start="467:27" pos:end="469:53">(<argument pos:start="467:28" pos:end="467:34"><expr pos:start="467:28" pos:end="467:34"><name pos:start="467:28" pos:end="467:34">cacerts</name></expr></argument>, <argument pos:start="467:37" pos:end="467:47"><expr pos:start="467:37" pos:end="467:47"><name pos:start="467:37" pos:end="467:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="468:28" pos:end="468:46"><expr pos:start="468:28" pos:end="468:46"><name pos:start="468:28" pos:end="468:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="469:28" pos:end="469:52"><expr pos:start="469:28" pos:end="469:52"><name pos:start="469:28" pos:end="469:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="470:5" pos:end="470:28"><expr pos:start="470:5" pos:end="470:27"><call pos:start="470:5" pos:end="470:27"><name pos:start="470:5" pos:end="470:13">CU_ASSERT</name><argument_list pos:start="470:14" pos:end="470:27">(<argument pos:start="470:15" pos:end="470:26"><expr pos:start="470:15" pos:end="470:26"><name pos:start="470:15" pos:end="470:18">ectx</name> <operator pos:start="470:20" pos:end="470:21">!=</operator> <name pos:start="470:23" pos:end="470:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="472:5" pos:end="474:7">/*
     * Make sure the server is currently in  BASIC auth mode
     */</comment>
    <expr_stmt pos:start="475:5" pos:end="475:32"><expr pos:start="475:5" pos:end="475:31"><call pos:start="475:5" pos:end="475:31"><name pos:start="475:5" pos:end="475:29">st_enable_http_basic_auth</name><argument_list pos:start="475:30" pos:end="475:31">()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="477:5" pos:end="477:72"><expr pos:start="477:5" pos:end="477:71"><name pos:start="477:5" pos:end="477:8">e_rc</name> <operator pos:start="477:10" pos:end="477:10">=</operator> <call pos:start="477:12" pos:end="477:71"><name pos:start="477:12" pos:end="477:38">est_client_set_auth_cred_cb</name><argument_list pos:start="477:39" pos:end="477:71">(<argument pos:start="477:40" pos:end="477:43"><expr pos:start="477:40" pos:end="477:43"><name pos:start="477:40" pos:end="477:43">ectx</name></expr></argument>, <argument pos:start="477:46" pos:end="477:70"><expr pos:start="477:46" pos:end="477:70"><name pos:start="477:46" pos:end="477:70">auth_credentials_basic_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="478:5" pos:end="478:36"><expr pos:start="478:5" pos:end="478:35"><call pos:start="478:5" pos:end="478:35"><name pos:start="478:5" pos:end="478:13">CU_ASSERT</name><argument_list pos:start="478:14" pos:end="478:35">(<argument pos:start="478:15" pos:end="478:34"><expr pos:start="478:15" pos:end="478:34"><name pos:start="478:15" pos:end="478:18">e_rc</name> <operator pos:start="478:20" pos:end="478:21">==</operator> <name pos:start="478:23" pos:end="478:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="480:5" pos:end="482:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="483:5" pos:end="483:63"><expr pos:start="483:5" pos:end="483:62"><call pos:start="483:5" pos:end="483:62"><name pos:start="483:5" pos:end="483:25">est_client_set_server</name><argument_list pos:start="483:26" pos:end="483:62">(<argument pos:start="483:27" pos:end="483:30"><expr pos:start="483:27" pos:end="483:30"><name pos:start="483:27" pos:end="483:30">ectx</name></expr></argument>, <argument pos:start="483:33" pos:end="483:38"><expr pos:start="483:33" pos:end="483:38"><name pos:start="483:33" pos:end="483:38">server</name></expr></argument>, <argument pos:start="483:41" pos:end="483:55"><expr pos:start="483:41" pos:end="483:55"><name pos:start="483:41" pos:end="483:55">US1883_TCP_PORT</name></expr></argument>, <argument pos:start="483:58" pos:end="483:61"><expr pos:start="483:58" pos:end="483:61"><name pos:start="483:58" pos:end="483:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="485:5" pos:end="487:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="488:5" pos:end="488:33"><expr pos:start="488:5" pos:end="488:32"><name pos:start="488:5" pos:end="488:7">key</name> <operator pos:start="488:9" pos:end="488:9">=</operator> <call pos:start="488:11" pos:end="488:32"><name pos:start="488:11" pos:end="488:30">generate_private_key</name><argument_list pos:start="488:31" pos:end="488:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="489:5" pos:end="489:27"><expr pos:start="489:5" pos:end="489:26"><call pos:start="489:5" pos:end="489:26"><name pos:start="489:5" pos:end="489:13">CU_ASSERT</name><argument_list pos:start="489:14" pos:end="489:26">(<argument pos:start="489:15" pos:end="489:25"><expr pos:start="489:15" pos:end="489:25"><name pos:start="489:15" pos:end="489:17">key</name> <operator pos:start="489:19" pos:end="489:20">!=</operator> <name pos:start="489:22" pos:end="489:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="491:5" pos:end="493:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="494:5" pos:end="494:54"><expr pos:start="494:5" pos:end="494:53"><name pos:start="494:5" pos:end="494:6">rv</name> <operator pos:start="494:8" pos:end="494:8">=</operator> <call pos:start="494:10" pos:end="494:53"><name pos:start="494:10" pos:end="494:26">est_client_enroll</name><argument_list pos:start="494:27" pos:end="494:53">(<argument pos:start="494:28" pos:end="494:31"><expr pos:start="494:28" pos:end="494:31"><name pos:start="494:28" pos:end="494:31">ectx</name></expr></argument>, <argument pos:start="494:34" pos:end="494:35"><expr pos:start="494:34" pos:end="494:35"><name pos:start="494:34" pos:end="494:35">cn</name></expr></argument>, <argument pos:start="494:38" pos:end="494:47"><expr pos:start="494:38" pos:end="494:47"><operator pos:start="494:38" pos:end="494:38">&amp;</operator><name pos:start="494:39" pos:end="494:47">pkcs7_len</name></expr></argument>, <argument pos:start="494:50" pos:end="494:52"><expr pos:start="494:50" pos:end="494:52"><name pos:start="494:50" pos:end="494:52">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="495:5" pos:end="495:34"><expr pos:start="495:5" pos:end="495:33"><call pos:start="495:5" pos:end="495:33"><name pos:start="495:5" pos:end="495:13">CU_ASSERT</name><argument_list pos:start="495:14" pos:end="495:33">(<argument pos:start="495:15" pos:end="495:32"><expr pos:start="495:15" pos:end="495:32"><name pos:start="495:15" pos:end="495:16">rv</name> <operator pos:start="495:18" pos:end="495:19">==</operator> <name pos:start="495:21" pos:end="495:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="497:5" pos:end="499:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="500:5" pos:end="505:5"><if pos:start="500:5" pos:end="505:5">if <condition pos:start="500:8" pos:end="500:27">(<expr pos:start="500:9" pos:end="500:26"><name pos:start="500:9" pos:end="500:10">rv</name> <operator pos:start="500:12" pos:end="500:13">==</operator> <name pos:start="500:15" pos:end="500:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="500:29" pos:end="505:5">{<block_content pos:start="501:9" pos:end="504:38">
	<expr_stmt pos:start="501:9" pos:end="501:37"><expr pos:start="501:9" pos:end="501:36"><name pos:start="501:9" pos:end="501:16">new_cert</name> <operator pos:start="501:18" pos:end="501:18">=</operator> <call pos:start="501:20" pos:end="501:36"><name pos:start="501:20" pos:end="501:25">malloc</name><argument_list pos:start="501:26" pos:end="501:36">(<argument pos:start="501:27" pos:end="501:35"><expr pos:start="501:27" pos:end="501:35"><name pos:start="501:27" pos:end="501:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="502:9" pos:end="502:36"><expr pos:start="502:9" pos:end="502:35"><call pos:start="502:9" pos:end="502:35"><name pos:start="502:9" pos:end="502:17">CU_ASSERT</name><argument_list pos:start="502:18" pos:end="502:35">(<argument pos:start="502:19" pos:end="502:34"><expr pos:start="502:19" pos:end="502:34"><name pos:start="502:19" pos:end="502:26">new_cert</name> <operator pos:start="502:28" pos:end="502:29">!=</operator> <name pos:start="502:31" pos:end="502:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="503:9" pos:end="503:59"><expr pos:start="503:9" pos:end="503:58"><name pos:start="503:9" pos:end="503:10">rv</name> <operator pos:start="503:12" pos:end="503:12">=</operator> <call pos:start="503:14" pos:end="503:58"><name pos:start="503:14" pos:end="503:42">est_client_copy_enrolled_cert</name><argument_list pos:start="503:43" pos:end="503:58">(<argument pos:start="503:44" pos:end="503:47"><expr pos:start="503:44" pos:end="503:47"><name pos:start="503:44" pos:end="503:47">ectx</name></expr></argument>, <argument pos:start="503:50" pos:end="503:57"><expr pos:start="503:50" pos:end="503:57"><name pos:start="503:50" pos:end="503:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="504:9" pos:end="504:38"><expr pos:start="504:9" pos:end="504:37"><call pos:start="504:9" pos:end="504:37"><name pos:start="504:9" pos:end="504:17">CU_ASSERT</name><argument_list pos:start="504:18" pos:end="504:37">(<argument pos:start="504:19" pos:end="504:36"><expr pos:start="504:19" pos:end="504:36"><name pos:start="504:19" pos:end="504:20">rv</name> <operator pos:start="504:22" pos:end="504:23">==</operator> <name pos:start="504:25" pos:end="504:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="507:5" pos:end="507:22"><expr pos:start="507:5" pos:end="507:21"><call pos:start="507:5" pos:end="507:21"><name pos:start="507:5" pos:end="507:15">est_destroy</name><argument_list pos:start="507:16" pos:end="507:21">(<argument pos:start="507:17" pos:end="507:20"><expr pos:start="507:17" pos:end="507:20"><name pos:start="507:17" pos:end="507:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="508:5" pos:end="508:16"><expr pos:start="508:5" pos:end="508:15"><name pos:start="508:5" pos:end="508:8">ectx</name> <operator pos:start="508:10" pos:end="508:10">=</operator> <name pos:start="508:12" pos:end="508:15">NULL</name></expr>;</expr_stmt>
    <comment type="block" pos:start="509:5" pos:end="511:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="512:5" pos:end="514:54"><expr pos:start="512:5" pos:end="514:53"><name pos:start="512:5" pos:end="512:8">ectx</name> <operator pos:start="512:10" pos:end="512:10">=</operator> <call pos:start="512:12" pos:end="514:53"><name pos:start="512:12" pos:end="512:26">est_client_init</name><argument_list pos:start="512:27" pos:end="514:53">(<argument pos:start="512:28" pos:end="512:34"><expr pos:start="512:28" pos:end="512:34"><name pos:start="512:28" pos:end="512:34">cacerts</name></expr></argument>, <argument pos:start="512:37" pos:end="512:47"><expr pos:start="512:37" pos:end="512:47"><name pos:start="512:37" pos:end="512:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="513:28" pos:end="513:46"><expr pos:start="513:28" pos:end="513:46"><name pos:start="513:28" pos:end="513:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="514:28" pos:end="514:52"><expr pos:start="514:28" pos:end="514:52"><name pos:start="514:28" pos:end="514:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="515:5" pos:end="515:28"><expr pos:start="515:5" pos:end="515:27"><call pos:start="515:5" pos:end="515:27"><name pos:start="515:5" pos:end="515:13">CU_ASSERT</name><argument_list pos:start="515:14" pos:end="515:27">(<argument pos:start="515:15" pos:end="515:26"><expr pos:start="515:15" pos:end="515:26"><name pos:start="515:15" pos:end="515:18">ectx</name> <operator pos:start="515:20" pos:end="515:21">!=</operator> <name pos:start="515:23" pos:end="515:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="517:5" pos:end="519:7">/*
     * Now that we have the cert, switch the server over to token mode
     */</comment>
    <expr_stmt pos:start="520:5" pos:end="520:32"><expr pos:start="520:5" pos:end="520:31"><call pos:start="520:5" pos:end="520:31"><name pos:start="520:5" pos:end="520:29">st_enable_http_token_auth</name><argument_list pos:start="520:30" pos:end="520:31">()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="522:5" pos:end="522:55"><expr pos:start="522:5" pos:end="522:54"><name pos:start="522:5" pos:end="522:8">e_rc</name> <operator pos:start="522:10" pos:end="522:10">=</operator> <call pos:start="522:12" pos:end="522:54"><name pos:start="522:12" pos:end="522:38">est_client_set_auth_cred_cb</name><argument_list pos:start="522:39" pos:end="522:54">(<argument pos:start="522:40" pos:end="522:43"><expr pos:start="522:40" pos:end="522:43"><name pos:start="522:40" pos:end="522:43">ectx</name></expr></argument>, <argument pos:start="522:46" pos:end="522:53"><expr pos:start="522:46" pos:end="522:53"><name pos:start="522:46" pos:end="522:53">callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="523:5" pos:end="523:36"><expr pos:start="523:5" pos:end="523:35"><call pos:start="523:5" pos:end="523:35"><name pos:start="523:5" pos:end="523:13">CU_ASSERT</name><argument_list pos:start="523:14" pos:end="523:35">(<argument pos:start="523:15" pos:end="523:34"><expr pos:start="523:15" pos:end="523:34"><name pos:start="523:15" pos:end="523:18">e_rc</name> <operator pos:start="523:20" pos:end="523:21">==</operator> <name pos:start="523:23" pos:end="523:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="525:5" pos:end="527:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="528:5" pos:end="528:63"><expr pos:start="528:5" pos:end="528:62"><call pos:start="528:5" pos:end="528:62"><name pos:start="528:5" pos:end="528:25">est_client_set_server</name><argument_list pos:start="528:26" pos:end="528:62">(<argument pos:start="528:27" pos:end="528:30"><expr pos:start="528:27" pos:end="528:30"><name pos:start="528:27" pos:end="528:30">ectx</name></expr></argument>, <argument pos:start="528:33" pos:end="528:38"><expr pos:start="528:33" pos:end="528:38"><name pos:start="528:33" pos:end="528:38">server</name></expr></argument>, <argument pos:start="528:41" pos:end="528:55"><expr pos:start="528:41" pos:end="528:55"><name pos:start="528:41" pos:end="528:55">US1883_TCP_PORT</name></expr></argument>, <argument pos:start="528:58" pos:end="528:61"><expr pos:start="528:58" pos:end="528:61"><name pos:start="528:58" pos:end="528:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="530:5" pos:end="536:7">/*
     * And attempt a reenroll while in token mode
     *
     * Convert the cert to an X509.  Be warned this is
     * pure hackery.
     * PDB: This conversion code comes from other test cases.
     */</comment>
    <expr_stmt pos:start="537:5" pos:end="537:34"><expr pos:start="537:5" pos:end="537:33"><name pos:start="537:5" pos:end="537:7">b64</name> <operator pos:start="537:9" pos:end="537:9">=</operator> <call pos:start="537:11" pos:end="537:33"><name pos:start="537:11" pos:end="537:17">BIO_new</name><argument_list pos:start="537:18" pos:end="537:33">(<argument pos:start="537:19" pos:end="537:32"><expr pos:start="537:19" pos:end="537:32"><call pos:start="537:19" pos:end="537:32"><name pos:start="537:19" pos:end="537:30">BIO_f_base64</name><argument_list pos:start="537:31" pos:end="537:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="538:5" pos:end="538:47"><expr pos:start="538:5" pos:end="538:46"><name pos:start="538:5" pos:end="538:7">out</name> <operator pos:start="538:9" pos:end="538:9">=</operator> <call pos:start="538:11" pos:end="538:46"><name pos:start="538:11" pos:end="538:25">BIO_new_mem_buf</name><argument_list pos:start="538:26" pos:end="538:46">(<argument pos:start="538:27" pos:end="538:34"><expr pos:start="538:27" pos:end="538:34"><name pos:start="538:27" pos:end="538:34">new_cert</name></expr></argument>, <argument pos:start="538:37" pos:end="538:45"><expr pos:start="538:37" pos:end="538:45"><name pos:start="538:37" pos:end="538:45">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="539:5" pos:end="539:29"><expr pos:start="539:5" pos:end="539:28"><name pos:start="539:5" pos:end="539:7">out</name> <operator pos:start="539:9" pos:end="539:9">=</operator> <call pos:start="539:11" pos:end="539:28"><name pos:start="539:11" pos:end="539:18">BIO_push</name><argument_list pos:start="539:19" pos:end="539:28">(<argument pos:start="539:20" pos:end="539:22"><expr pos:start="539:20" pos:end="539:22"><name pos:start="539:20" pos:end="539:22">b64</name></expr></argument>, <argument pos:start="539:25" pos:end="539:27"><expr pos:start="539:25" pos:end="539:27"><name pos:start="539:25" pos:end="539:27">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="540:5" pos:end="540:33"><expr pos:start="540:5" pos:end="540:32"><name pos:start="540:5" pos:end="540:6">p7</name> <operator pos:start="540:8" pos:end="540:8">=</operator> <call pos:start="540:10" pos:end="540:32"><name pos:start="540:10" pos:end="540:22">d2i_PKCS7_bio</name><argument_list pos:start="540:23" pos:end="540:32">(<argument pos:start="540:24" pos:end="540:26"><expr pos:start="540:24" pos:end="540:26"><name pos:start="540:24" pos:end="540:26">out</name></expr></argument>,<argument pos:start="540:28" pos:end="540:31"><expr pos:start="540:28" pos:end="540:31"><name pos:start="540:28" pos:end="540:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="541:5" pos:end="541:26"><expr pos:start="541:5" pos:end="541:25"><call pos:start="541:5" pos:end="541:25"><name pos:start="541:5" pos:end="541:13">CU_ASSERT</name><argument_list pos:start="541:14" pos:end="541:25">(<argument pos:start="541:15" pos:end="541:24"><expr pos:start="541:15" pos:end="541:24"><name pos:start="541:15" pos:end="541:16">p7</name> <operator pos:start="541:18" pos:end="541:19">!=</operator> <name pos:start="541:21" pos:end="541:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="542:5" pos:end="542:22"><expr pos:start="542:5" pos:end="542:21"><call pos:start="542:5" pos:end="542:21"><name pos:start="542:5" pos:end="542:16">BIO_free_all</name><argument_list pos:start="542:17" pos:end="542:21">(<argument pos:start="542:18" pos:end="542:20"><expr pos:start="542:18" pos:end="542:20"><name pos:start="542:18" pos:end="542:20">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="543:5" pos:end="543:28"><expr pos:start="543:5" pos:end="543:27"><name pos:start="543:5" pos:end="543:5">i</name><operator pos:start="543:6" pos:end="543:6">=</operator><call pos:start="543:7" pos:end="543:27"><name pos:start="543:7" pos:end="543:17">OBJ_obj2nid</name><argument_list pos:start="543:18" pos:end="543:27">(<argument pos:start="543:19" pos:end="543:26"><expr pos:start="543:19" pos:end="543:26"><name pos:start="543:19" pos:end="543:26"><name pos:start="543:19" pos:end="543:20">p7</name><operator pos:start="543:21" pos:end="543:22">-&gt;</operator><name pos:start="543:23" pos:end="543:26">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="544:5" pos:end="553:5">switch <condition pos:start="544:12" pos:end="544:14">(<expr pos:start="544:13" pos:end="544:13"><name pos:start="544:13" pos:end="544:13">i</name></expr>)</condition> <block pos:start="544:16" pos:end="553:5">{<block_content pos:start="545:5" pos:end="552:14">
    <case pos:start="545:5" pos:end="545:26">case <expr pos:start="545:10" pos:end="545:25"><name pos:start="545:10" pos:end="545:25">NID_pkcs7_signed</name></expr>:</case>
	<expr_stmt pos:start="546:9" pos:end="546:33"><expr pos:start="546:9" pos:end="546:32"><name pos:start="546:9" pos:end="546:13">certs</name> <operator pos:start="546:15" pos:end="546:15">=</operator> <name pos:start="546:17" pos:end="546:32"><name pos:start="546:17" pos:end="546:18">p7</name><operator pos:start="546:19" pos:end="546:20">-&gt;</operator><name pos:start="546:21" pos:end="546:21">d</name><operator pos:start="546:22" pos:end="546:22">.</operator><name pos:start="546:23" pos:end="546:26">sign</name><operator pos:start="546:27" pos:end="546:28">-&gt;</operator><name pos:start="546:29" pos:end="546:32">cert</name></name></expr>;</expr_stmt>
	<break pos:start="547:9" pos:end="547:14">break;</break>
    <case pos:start="548:5" pos:end="548:38">case <expr pos:start="548:10" pos:end="548:37"><name pos:start="548:10" pos:end="548:37">NID_pkcs7_signedAndEnveloped</name></expr>:</case>
	<expr_stmt pos:start="549:9" pos:end="549:49"><expr pos:start="549:9" pos:end="549:48"><name pos:start="549:9" pos:end="549:13">certs</name> <operator pos:start="549:15" pos:end="549:15">=</operator> <name pos:start="549:17" pos:end="549:48"><name pos:start="549:17" pos:end="549:18">p7</name><operator pos:start="549:19" pos:end="549:20">-&gt;</operator><name pos:start="549:21" pos:end="549:21">d</name><operator pos:start="549:22" pos:end="549:22">.</operator><name pos:start="549:23" pos:end="549:42">signed_and_enveloped</name><operator pos:start="549:43" pos:end="549:44">-&gt;</operator><name pos:start="549:45" pos:end="549:48">cert</name></name></expr>;</expr_stmt>
	<break pos:start="550:9" pos:end="550:14">break;</break>
    <default pos:start="551:5" pos:end="551:12">default:</default>
	<break pos:start="552:9" pos:end="552:14">break;</break>
    </block_content>}</block></switch>
    <expr_stmt pos:start="554:5" pos:end="554:29"><expr pos:start="554:5" pos:end="554:28"><call pos:start="554:5" pos:end="554:28"><name pos:start="554:5" pos:end="554:13">CU_ASSERT</name><argument_list pos:start="554:14" pos:end="554:28">(<argument pos:start="554:15" pos:end="554:27"><expr pos:start="554:15" pos:end="554:27"><name pos:start="554:15" pos:end="554:19">certs</name> <operator pos:start="554:21" pos:end="554:22">!=</operator> <name pos:start="554:24" pos:end="554:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="555:5" pos:end="555:23"><if pos:start="555:5" pos:end="555:23">if <condition pos:start="555:8" pos:end="555:15">(<expr pos:start="555:9" pos:end="555:14"><operator pos:start="555:9" pos:end="555:9">!</operator><name pos:start="555:10" pos:end="555:14">certs</name></expr>)</condition><block type="pseudo" pos:start="555:17" pos:end="555:23"><block_content pos:start="555:17" pos:end="555:23"> <return pos:start="555:17" pos:end="555:23">return;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="556:5" pos:end="558:51">/* our new cert should be the one and only
     * cert in the pkcs7 blob.  We shouldn't have to
     * iterate through the full list to find it. */</comment>
    <expr_stmt pos:start="559:5" pos:end="559:35"><expr pos:start="559:5" pos:end="559:34"><name pos:start="559:5" pos:end="559:8">cert</name> <operator pos:start="559:10" pos:end="559:10">=</operator> <call pos:start="559:12" pos:end="559:34"><name pos:start="559:12" pos:end="559:24">sk_X509_value</name><argument_list pos:start="559:25" pos:end="559:34">(<argument pos:start="559:26" pos:end="559:30"><expr pos:start="559:26" pos:end="559:30"><name pos:start="559:26" pos:end="559:30">certs</name></expr></argument>, <argument pos:start="559:33" pos:end="559:33"><expr pos:start="559:33" pos:end="559:33"><literal type="number" pos:start="559:33" pos:end="559:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="560:5" pos:end="560:28"><expr pos:start="560:5" pos:end="560:27"><call pos:start="560:5" pos:end="560:27"><name pos:start="560:5" pos:end="560:13">CU_ASSERT</name><argument_list pos:start="560:14" pos:end="560:27">(<argument pos:start="560:15" pos:end="560:26"><expr pos:start="560:15" pos:end="560:26"><name pos:start="560:15" pos:end="560:18">cert</name> <operator pos:start="560:20" pos:end="560:21">!=</operator> <name pos:start="560:23" pos:end="560:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="562:5" pos:end="567:7">/*
     * PDB NOTE: At the moment, this is expected to fail since
     * the server does not yet understand requests with token authentication.
     * Once 1884 is complete, the below ASSERT will begin to fail and will need
     * to be changed to a passing response.
     */</comment>
    <expr_stmt pos:start="568:5" pos:end="568:58"><expr pos:start="568:5" pos:end="568:57"><name pos:start="568:5" pos:end="568:6">rv</name> <operator pos:start="568:8" pos:end="568:8">=</operator> <call pos:start="568:10" pos:end="568:57"><name pos:start="568:10" pos:end="568:28">est_client_reenroll</name><argument_list pos:start="568:29" pos:end="568:57">(<argument pos:start="568:30" pos:end="568:33"><expr pos:start="568:30" pos:end="568:33"><name pos:start="568:30" pos:end="568:33">ectx</name></expr></argument>, <argument pos:start="568:36" pos:end="568:39"><expr pos:start="568:36" pos:end="568:39"><name pos:start="568:36" pos:end="568:39">cert</name></expr></argument>, <argument pos:start="568:42" pos:end="568:51"><expr pos:start="568:42" pos:end="568:51"><operator pos:start="568:42" pos:end="568:42">&amp;</operator><name pos:start="568:43" pos:end="568:51">pkcs7_len</name></expr></argument>, <argument pos:start="568:54" pos:end="568:56"><expr pos:start="568:54" pos:end="568:56"><name pos:start="568:54" pos:end="568:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="569:5" pos:end="569:40"><expr pos:start="569:5" pos:end="569:39"><call pos:start="569:5" pos:end="569:39"><name pos:start="569:5" pos:end="569:13">CU_ASSERT</name><argument_list pos:start="569:14" pos:end="569:39">(<argument pos:start="569:15" pos:end="569:38"><expr pos:start="569:15" pos:end="569:38"><name pos:start="569:15" pos:end="569:16">rv</name> <operator pos:start="569:18" pos:end="569:19">==</operator> <name pos:start="569:21" pos:end="569:38">expected_enroll_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="571:5" pos:end="573:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="574:5" pos:end="574:23"><expr pos:start="574:5" pos:end="574:22"><call pos:start="574:5" pos:end="574:22"><name pos:start="574:5" pos:end="574:17">EVP_PKEY_free</name><argument_list pos:start="574:18" pos:end="574:22">(<argument pos:start="574:19" pos:end="574:21"><expr pos:start="574:19" pos:end="574:21"><name pos:start="574:19" pos:end="574:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="575:5" pos:end="575:33"><if pos:start="575:5" pos:end="575:33">if <condition pos:start="575:8" pos:end="575:17">(<expr pos:start="575:9" pos:end="575:16"><name pos:start="575:9" pos:end="575:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="575:19" pos:end="575:33"><block_content pos:start="575:19" pos:end="575:33"> <expr_stmt pos:start="575:19" pos:end="575:33"><expr pos:start="575:19" pos:end="575:32"><call pos:start="575:19" pos:end="575:32"><name pos:start="575:19" pos:end="575:22">free</name><argument_list pos:start="575:23" pos:end="575:32">(<argument pos:start="575:24" pos:end="575:31"><expr pos:start="575:24" pos:end="575:31"><name pos:start="575:24" pos:end="575:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="576:5" pos:end="576:22"><expr pos:start="576:5" pos:end="576:21"><call pos:start="576:5" pos:end="576:21"><name pos:start="576:5" pos:end="576:15">est_destroy</name><argument_list pos:start="576:16" pos:end="576:21">(<argument pos:start="576:17" pos:end="576:20"><expr pos:start="576:17" pos:end="576:20"><name pos:start="576:17" pos:end="576:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="580:1" pos:end="591:3">/*
 * Test2 - Application layer did not register callback, causing an
 *         HTTP Aithentication header with an empty token credential
 *         
 * In this test,
 * - application layer DOES NOT register its callback
 * - EST Client gets the challenge, finds no callback registered and goes with
 *   the credentials it has stored in the Context, which is nothing.
 *   NOTE: This is the way the preloaded credential flow has always worked.
 * - enroll is sent with no token credentials
 * - server fails and does not give a certificate
 */</comment>
<function pos:start="592:1" pos:end="626:1"><type pos:start="592:1" pos:end="592:11"><specifier pos:start="592:1" pos:end="592:6">static</specifier> <name pos:start="592:8" pos:end="592:11">void</name></type> <name pos:start="592:13" pos:end="592:24">us1883_test2</name> <parameter_list pos:start="592:26" pos:end="592:31">(<parameter pos:start="592:27" pos:end="592:30"><decl pos:start="592:27" pos:end="592:30"><type pos:start="592:27" pos:end="592:30"><name pos:start="592:27" pos:end="592:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="593:1" pos:end="626:1">{<block_content pos:start="595:5" pos:end="625:46">

    <expr_stmt pos:start="595:5" pos:end="595:16"><expr pos:start="595:5" pos:end="595:15"><name pos:start="595:5" pos:end="595:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="597:5" pos:end="604:7">/*
     * Switch the server over to Token mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="605:5" pos:end="605:32"><expr pos:start="605:5" pos:end="605:31"><call pos:start="605:5" pos:end="605:31"><name pos:start="605:5" pos:end="605:29">st_enable_http_token_auth</name><argument_list pos:start="605:30" pos:end="605:31">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="606:5" pos:end="608:7">/*
     * tell the server which token to check against.
     */</comment>
    <expr_stmt pos:start="609:5" pos:end="609:29"><expr pos:start="609:5" pos:end="609:28"><call pos:start="609:5" pos:end="609:28"><name pos:start="609:5" pos:end="609:16">st_set_token</name><argument_list pos:start="609:17" pos:end="609:28">(<argument pos:start="609:18" pos:end="609:27"><expr pos:start="609:18" pos:end="609:27"><name pos:start="609:18" pos:end="609:27">GOOD_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="611:5" pos:end="611:34"><expr pos:start="611:5" pos:end="611:33"><name pos:start="611:5" pos:end="611:29">auth_cred_callback_called</name> <operator pos:start="611:31" pos:end="611:31">=</operator> <literal type="number" pos:start="611:33" pos:end="611:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="612:5" pos:end="612:30"><expr pos:start="612:5" pos:end="612:29"><name pos:start="612:5" pos:end="612:25">auth_cred_force_error</name> <operator pos:start="612:27" pos:end="612:27">=</operator> <literal type="number" pos:start="612:29" pos:end="612:29">0</literal></expr>;</expr_stmt>
    
    <comment type="block" pos:start="614:5" pos:end="619:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     * Pass no callback function to catch and handle the request for a token auth.
     *
     * enroll better fail due to missing credentials
     */</comment>
    <expr_stmt pos:start="620:5" pos:end="620:80"><expr pos:start="620:5" pos:end="620:79"><call pos:start="620:5" pos:end="620:79"><name pos:start="620:5" pos:end="620:24">us1883_simple_enroll</name><argument_list pos:start="620:25" pos:end="620:79">(<argument pos:start="620:26" pos:end="620:35"><expr pos:start="620:26" pos:end="620:35"><literal type="string" pos:start="620:26" pos:end="620:35">"TC1883-2"</literal></expr></argument>, <argument pos:start="620:38" pos:end="620:53"><expr pos:start="620:38" pos:end="620:53"><name pos:start="620:38" pos:end="620:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="620:56" pos:end="620:72"><expr pos:start="620:56" pos:end="620:72"><name pos:start="620:56" pos:end="620:72">EST_ERR_AUTH_FAIL</name></expr></argument>, <argument pos:start="620:75" pos:end="620:78"><expr pos:start="620:75" pos:end="620:78"><name pos:start="620:75" pos:end="620:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="622:5" pos:end="624:7">/*
     * callback was never registered, so it should not have been invoked.
     */</comment>
    <expr_stmt pos:start="625:5" pos:end="625:46"><expr pos:start="625:5" pos:end="625:45"><call pos:start="625:5" pos:end="625:45"><name pos:start="625:5" pos:end="625:13">CU_ASSERT</name><argument_list pos:start="625:14" pos:end="625:45">(<argument pos:start="625:15" pos:end="625:44"><expr pos:start="625:15" pos:end="625:44"><name pos:start="625:15" pos:end="625:39">auth_cred_callback_called</name> <operator pos:start="625:41" pos:end="625:42">==</operator> <literal type="number" pos:start="625:44" pos:end="625:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="629:1" pos:end="641:3">/*
 * Test3 - Application layer registers callback, BUT does not set any
 *         credentials when invoked.  Same result as previous test
 *         
 * In this test,
 * - application layer registers its callback
 * - EST Client gets the challenge, calls the callback, gets back an 
 *   empty credential structure and ends up sending an HTTP auth header
 *   with no credentials.
 *   NOTE: This is the way the preloaded credential flow has always worked.
 * - enroll is sent with no token credentials
 * - server fails and does not give a certificate
 */</comment>
<function pos:start="642:1" pos:end="677:1"><type pos:start="642:1" pos:end="642:11"><specifier pos:start="642:1" pos:end="642:6">static</specifier> <name pos:start="642:8" pos:end="642:11">void</name></type> <name pos:start="642:13" pos:end="642:24">us1883_test3</name> <parameter_list pos:start="642:26" pos:end="642:31">(<parameter pos:start="642:27" pos:end="642:30"><decl pos:start="642:27" pos:end="642:30"><type pos:start="642:27" pos:end="642:30"><name pos:start="642:27" pos:end="642:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="643:1" pos:end="677:1">{<block_content pos:start="645:5" pos:end="676:46">

    <expr_stmt pos:start="645:5" pos:end="645:16"><expr pos:start="645:5" pos:end="645:15"><name pos:start="645:5" pos:end="645:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="647:5" pos:end="654:7">/*
     * Switch the server over to Token mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="655:5" pos:end="655:32"><expr pos:start="655:5" pos:end="655:31"><call pos:start="655:5" pos:end="655:31"><name pos:start="655:5" pos:end="655:29">st_enable_http_token_auth</name><argument_list pos:start="655:30" pos:end="655:31">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="656:5" pos:end="658:7">/*
     * tell the server which token to check against.
     */</comment>
    <expr_stmt pos:start="659:5" pos:end="659:29"><expr pos:start="659:5" pos:end="659:28"><call pos:start="659:5" pos:end="659:28"><name pos:start="659:5" pos:end="659:16">st_set_token</name><argument_list pos:start="659:17" pos:end="659:28">(<argument pos:start="659:18" pos:end="659:27"><expr pos:start="659:18" pos:end="659:27"><name pos:start="659:18" pos:end="659:27">GOOD_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="661:5" pos:end="661:34"><expr pos:start="661:5" pos:end="661:33"><name pos:start="661:5" pos:end="661:29">auth_cred_callback_called</name> <operator pos:start="661:31" pos:end="661:31">=</operator> <literal type="number" pos:start="661:33" pos:end="661:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="662:5" pos:end="662:30"><expr pos:start="662:5" pos:end="662:29"><name pos:start="662:5" pos:end="662:25">auth_cred_force_error</name> <operator pos:start="662:27" pos:end="662:27">=</operator> <literal type="number" pos:start="662:29" pos:end="662:29">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="663:5" pos:end="663:28"><expr pos:start="663:5" pos:end="663:27"><name pos:start="663:5" pos:end="663:14">test_token</name> <operator pos:start="663:16" pos:end="663:16">=</operator> <name pos:start="663:18" pos:end="663:27">NULL_TOKEN</name></expr>;</expr_stmt>
    
    <comment type="block" pos:start="665:5" pos:end="670:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     * Register the token based callback, but set it so that it passes back no token.
     *
     * enroll better fail due to missing credentials
     */</comment>
    <expr_stmt pos:start="671:5" pos:end="671:101"><expr pos:start="671:5" pos:end="671:100"><call pos:start="671:5" pos:end="671:100"><name pos:start="671:5" pos:end="671:24">us1883_simple_enroll</name><argument_list pos:start="671:25" pos:end="671:100">(<argument pos:start="671:26" pos:end="671:35"><expr pos:start="671:26" pos:end="671:35"><literal type="string" pos:start="671:26" pos:end="671:35">"TC1883-3"</literal></expr></argument>, <argument pos:start="671:38" pos:end="671:53"><expr pos:start="671:38" pos:end="671:53"><name pos:start="671:38" pos:end="671:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="671:56" pos:end="671:72"><expr pos:start="671:56" pos:end="671:72"><name pos:start="671:56" pos:end="671:72">EST_ERR_AUTH_FAIL</name></expr></argument>, <argument pos:start="671:75" pos:end="671:99"><expr pos:start="671:75" pos:end="671:99"><name pos:start="671:75" pos:end="671:99">auth_credentials_token_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="673:5" pos:end="675:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="676:5" pos:end="676:46"><expr pos:start="676:5" pos:end="676:45"><call pos:start="676:5" pos:end="676:45"><name pos:start="676:5" pos:end="676:13">CU_ASSERT</name><argument_list pos:start="676:14" pos:end="676:45">(<argument pos:start="676:15" pos:end="676:44"><expr pos:start="676:15" pos:end="676:44"><name pos:start="676:15" pos:end="676:39">auth_cred_callback_called</name> <operator pos:start="676:41" pos:end="676:42">==</operator> <literal type="number" pos:start="676:44" pos:end="676:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="680:1" pos:end="688:3">/*
 * Test4 - Good token is sent to server and is accepted.  Cert should
 * be generated and returned
 *
 * In this test,
 * - application layer registers its callback and responds with a valid token
 * - enroll is sent with this token credential
 * - server is set to match on this token and send back a cert
 */</comment>
<function pos:start="689:1" pos:end="723:1"><type pos:start="689:1" pos:end="689:11"><specifier pos:start="689:1" pos:end="689:6">static</specifier> <name pos:start="689:8" pos:end="689:11">void</name></type> <name pos:start="689:13" pos:end="689:24">us1883_test4</name> <parameter_list pos:start="689:26" pos:end="689:31">(<parameter pos:start="689:27" pos:end="689:30"><decl pos:start="689:27" pos:end="689:30"><type pos:start="689:27" pos:end="689:30"><name pos:start="689:27" pos:end="689:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="690:1" pos:end="723:1">{<block_content pos:start="692:5" pos:end="722:46">

    <expr_stmt pos:start="692:5" pos:end="692:16"><expr pos:start="692:5" pos:end="692:15"><name pos:start="692:5" pos:end="692:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="694:5" pos:end="701:7">/*
     * Switch the server over to Token mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="702:5" pos:end="702:32"><expr pos:start="702:5" pos:end="702:31"><call pos:start="702:5" pos:end="702:31"><name pos:start="702:5" pos:end="702:29">st_enable_http_token_auth</name><argument_list pos:start="702:30" pos:end="702:31">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="703:5" pos:end="705:7">/*
     * tell the server which token to check against.
     */</comment>
    <expr_stmt pos:start="706:5" pos:end="706:29"><expr pos:start="706:5" pos:end="706:28"><call pos:start="706:5" pos:end="706:28"><name pos:start="706:5" pos:end="706:16">st_set_token</name><argument_list pos:start="706:17" pos:end="706:28">(<argument pos:start="706:18" pos:end="706:27"><expr pos:start="706:18" pos:end="706:27"><name pos:start="706:18" pos:end="706:27">GOOD_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="708:5" pos:end="708:34"><expr pos:start="708:5" pos:end="708:33"><name pos:start="708:5" pos:end="708:29">auth_cred_callback_called</name> <operator pos:start="708:31" pos:end="708:31">=</operator> <literal type="number" pos:start="708:33" pos:end="708:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="709:5" pos:end="709:30"><expr pos:start="709:5" pos:end="709:29"><name pos:start="709:5" pos:end="709:25">auth_cred_force_error</name> <operator pos:start="709:27" pos:end="709:27">=</operator> <literal type="number" pos:start="709:29" pos:end="709:29">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="710:5" pos:end="710:28"><expr pos:start="710:5" pos:end="710:27"><name pos:start="710:5" pos:end="710:14">test_token</name> <operator pos:start="710:16" pos:end="710:16">=</operator> <name pos:start="710:18" pos:end="710:27">GOOD_TOKEN</name></expr>;</expr_stmt>

    <comment type="block" pos:start="712:5" pos:end="716:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     *
     * Enroll should succeed.
     */</comment>
    <expr_stmt pos:start="717:5" pos:end="717:96"><expr pos:start="717:5" pos:end="717:95"><call pos:start="717:5" pos:end="717:95"><name pos:start="717:5" pos:end="717:24">us1883_simple_enroll</name><argument_list pos:start="717:25" pos:end="717:95">(<argument pos:start="717:26" pos:end="717:35"><expr pos:start="717:26" pos:end="717:35"><literal type="string" pos:start="717:26" pos:end="717:35">"TC1883-4"</literal></expr></argument>, <argument pos:start="717:38" pos:end="717:53"><expr pos:start="717:38" pos:end="717:53"><name pos:start="717:38" pos:end="717:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="717:56" pos:end="717:67"><expr pos:start="717:56" pos:end="717:67"><name pos:start="717:56" pos:end="717:67">EST_ERR_NONE</name></expr></argument>, <argument pos:start="717:70" pos:end="717:94"><expr pos:start="717:70" pos:end="717:94"><name pos:start="717:70" pos:end="717:94">auth_credentials_token_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="719:5" pos:end="721:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="722:5" pos:end="722:46"><expr pos:start="722:5" pos:end="722:45"><call pos:start="722:5" pos:end="722:45"><name pos:start="722:5" pos:end="722:13">CU_ASSERT</name><argument_list pos:start="722:14" pos:end="722:45">(<argument pos:start="722:15" pos:end="722:44"><expr pos:start="722:15" pos:end="722:44"><name pos:start="722:15" pos:end="722:39">auth_cred_callback_called</name> <operator pos:start="722:41" pos:end="722:42">==</operator> <literal type="number" pos:start="722:44" pos:end="722:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="726:1" pos:end="731:3">/*
 * Test EST client receiving a token auth challenge
 *
 * In this test, the application layer registers its callback and responds
 * with a failing return code.
 */</comment>
<function pos:start="732:1" pos:end="764:1"><type pos:start="732:1" pos:end="732:11"><specifier pos:start="732:1" pos:end="732:6">static</specifier> <name pos:start="732:8" pos:end="732:11">void</name></type> <name pos:start="732:13" pos:end="732:24">us1883_test5</name> <parameter_list pos:start="732:26" pos:end="732:31">(<parameter pos:start="732:27" pos:end="732:30"><decl pos:start="732:27" pos:end="732:30"><type pos:start="732:27" pos:end="732:30"><name pos:start="732:27" pos:end="732:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="733:1" pos:end="764:1">{<block_content pos:start="735:5" pos:end="763:46">

    <expr_stmt pos:start="735:5" pos:end="735:16"><expr pos:start="735:5" pos:end="735:15"><name pos:start="735:5" pos:end="735:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="737:5" pos:end="744:7">/*
     * Switch the server over to Token mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="745:5" pos:end="745:32"><expr pos:start="745:5" pos:end="745:31"><call pos:start="745:5" pos:end="745:31"><name pos:start="745:5" pos:end="745:29">st_enable_http_token_auth</name><argument_list pos:start="745:30" pos:end="745:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="747:5" pos:end="747:34"><expr pos:start="747:5" pos:end="747:33"><name pos:start="747:5" pos:end="747:29">auth_cred_callback_called</name> <operator pos:start="747:31" pos:end="747:31">=</operator> <literal type="number" pos:start="747:33" pos:end="747:33">0</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="748:5" pos:end="748:58">/* Force the callback to give a failing return code */</comment>
    <expr_stmt pos:start="749:5" pos:end="749:30"><expr pos:start="749:5" pos:end="749:29"><name pos:start="749:5" pos:end="749:25">auth_cred_force_error</name> <operator pos:start="749:27" pos:end="749:27">=</operator> <literal type="number" pos:start="749:29" pos:end="749:29">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="750:5" pos:end="750:28"><expr pos:start="750:5" pos:end="750:27"><name pos:start="750:5" pos:end="750:14">test_token</name> <operator pos:start="750:16" pos:end="750:16">=</operator> <name pos:start="750:18" pos:end="750:27">GOOD_TOKEN</name></expr>;</expr_stmt>
    
    <comment type="block" pos:start="752:5" pos:end="757:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     *
     * enroll better fail due to credentials not being supplied by the application layer
     * and eventual failure at the server due to missing credentials.
     */</comment>
    <expr_stmt pos:start="758:5" pos:end="758:101"><expr pos:start="758:5" pos:end="758:100"><call pos:start="758:5" pos:end="758:100"><name pos:start="758:5" pos:end="758:24">us1883_simple_enroll</name><argument_list pos:start="758:25" pos:end="758:100">(<argument pos:start="758:26" pos:end="758:35"><expr pos:start="758:26" pos:end="758:35"><literal type="string" pos:start="758:26" pos:end="758:35">"TC1883-5"</literal></expr></argument>, <argument pos:start="758:38" pos:end="758:53"><expr pos:start="758:38" pos:end="758:53"><name pos:start="758:38" pos:end="758:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="758:56" pos:end="758:72"><expr pos:start="758:56" pos:end="758:72"><name pos:start="758:56" pos:end="758:72">EST_ERR_AUTH_FAIL</name></expr></argument>, <argument pos:start="758:75" pos:end="758:99"><expr pos:start="758:75" pos:end="758:99"><name pos:start="758:75" pos:end="758:99">auth_credentials_token_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="760:5" pos:end="762:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="763:5" pos:end="763:46"><expr pos:start="763:5" pos:end="763:45"><call pos:start="763:5" pos:end="763:45"><name pos:start="763:5" pos:end="763:13">CU_ASSERT</name><argument_list pos:start="763:14" pos:end="763:45">(<argument pos:start="763:15" pos:end="763:44"><expr pos:start="763:15" pos:end="763:44"><name pos:start="763:15" pos:end="763:39">auth_cred_callback_called</name> <operator pos:start="763:41" pos:end="763:42">==</operator> <literal type="number" pos:start="763:44" pos:end="763:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="767:1" pos:end="774:3">/*
 * Test6 - Sanity test BASIC auth mode
 *
 * In this test,
 * - server into BASIC mode
 * - Client application registers its BASIC based callback
 * - Client should send the estuser/estpwd credentials and get a cert
 */</comment>
<function pos:start="775:1" pos:end="807:1"><type pos:start="775:1" pos:end="775:11"><specifier pos:start="775:1" pos:end="775:6">static</specifier> <name pos:start="775:8" pos:end="775:11">void</name></type> <name pos:start="775:13" pos:end="775:24">us1883_test6</name> <parameter_list pos:start="775:26" pos:end="775:31">(<parameter pos:start="775:27" pos:end="775:30"><decl pos:start="775:27" pos:end="775:30"><type pos:start="775:27" pos:end="775:30"><name pos:start="775:27" pos:end="775:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="776:1" pos:end="807:1">{<block_content pos:start="778:5" pos:end="806:46">

    <expr_stmt pos:start="778:5" pos:end="778:16"><expr pos:start="778:5" pos:end="778:15"><name pos:start="778:5" pos:end="778:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="780:5" pos:end="787:7">/*
     * Switch the server over to BASIC mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="788:5" pos:end="788:32"><expr pos:start="788:5" pos:end="788:31"><call pos:start="788:5" pos:end="788:31"><name pos:start="788:5" pos:end="788:29">st_enable_http_basic_auth</name><argument_list pos:start="788:30" pos:end="788:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="790:5" pos:end="790:34"><expr pos:start="790:5" pos:end="790:33"><name pos:start="790:5" pos:end="790:29">auth_cred_callback_called</name> <operator pos:start="790:31" pos:end="790:31">=</operator> <literal type="number" pos:start="790:33" pos:end="790:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="791:5" pos:end="791:30"><expr pos:start="791:5" pos:end="791:29"><name pos:start="791:5" pos:end="791:25">auth_cred_force_error</name> <operator pos:start="791:27" pos:end="791:27">=</operator> <literal type="number" pos:start="791:29" pos:end="791:29">0</literal></expr>;</expr_stmt>
    
    <comment type="block" pos:start="793:5" pos:end="800:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     * Pass a callback function to catch and handle the request for a token auth.
     *
     * enroll should pass because BASIC mode fully works.  Make sure that the
     * callback is called.  This will ensure that the credentials came from
     * the callback.
     */</comment>
    <expr_stmt pos:start="801:5" pos:end="801:96"><expr pos:start="801:5" pos:end="801:95"><call pos:start="801:5" pos:end="801:95"><name pos:start="801:5" pos:end="801:24">us1883_simple_enroll</name><argument_list pos:start="801:25" pos:end="801:95">(<argument pos:start="801:26" pos:end="801:35"><expr pos:start="801:26" pos:end="801:35"><literal type="string" pos:start="801:26" pos:end="801:35">"TC1883-6"</literal></expr></argument>, <argument pos:start="801:38" pos:end="801:53"><expr pos:start="801:38" pos:end="801:53"><name pos:start="801:38" pos:end="801:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="801:56" pos:end="801:67"><expr pos:start="801:56" pos:end="801:67"><name pos:start="801:56" pos:end="801:67">EST_ERR_NONE</name></expr></argument>, <argument pos:start="801:70" pos:end="801:94"><expr pos:start="801:70" pos:end="801:94"><name pos:start="801:70" pos:end="801:94">auth_credentials_basic_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="803:5" pos:end="805:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="806:5" pos:end="806:46"><expr pos:start="806:5" pos:end="806:45"><call pos:start="806:5" pos:end="806:45"><name pos:start="806:5" pos:end="806:13">CU_ASSERT</name><argument_list pos:start="806:14" pos:end="806:45">(<argument pos:start="806:15" pos:end="806:44"><expr pos:start="806:15" pos:end="806:44"><name pos:start="806:15" pos:end="806:39">auth_cred_callback_called</name> <operator pos:start="806:41" pos:end="806:42">==</operator> <literal type="number" pos:start="806:44" pos:end="806:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="810:1" pos:end="818:3">/*
 * Test7 - Make sure re-enroll works with the credential callback flow
 *         to obtain credentials
 *
 * In this test,
 * - server into TOKEN mode
 * - Client application registers its TOKEN based callback
 * - Client should send the valid token credential and get a cert
 */</comment>
<function pos:start="819:1" pos:end="846:1"><type pos:start="819:1" pos:end="819:11"><specifier pos:start="819:1" pos:end="819:6">static</specifier> <name pos:start="819:8" pos:end="819:11">void</name></type> <name pos:start="819:13" pos:end="819:24">us1883_test7</name> <parameter_list pos:start="819:26" pos:end="819:31">(<parameter pos:start="819:27" pos:end="819:30"><decl pos:start="819:27" pos:end="819:30"><type pos:start="819:27" pos:end="819:30"><name pos:start="819:27" pos:end="819:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="820:1" pos:end="846:1">{<block_content pos:start="822:5" pos:end="845:46">

    <expr_stmt pos:start="822:5" pos:end="822:16"><expr pos:start="822:5" pos:end="822:15"><name pos:start="822:5" pos:end="822:15">LOG_FUNC_NM</name></expr>;</expr_stmt>
    
    <expr_stmt pos:start="824:5" pos:end="824:34"><expr pos:start="824:5" pos:end="824:33"><name pos:start="824:5" pos:end="824:29">auth_cred_callback_called</name> <operator pos:start="824:31" pos:end="824:31">=</operator> <literal type="number" pos:start="824:33" pos:end="824:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="825:5" pos:end="825:30"><expr pos:start="825:5" pos:end="825:29"><name pos:start="825:5" pos:end="825:25">auth_cred_force_error</name> <operator pos:start="825:27" pos:end="825:27">=</operator> <literal type="number" pos:start="825:29" pos:end="825:29">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="826:5" pos:end="826:28"><expr pos:start="826:5" pos:end="826:27"><name pos:start="826:5" pos:end="826:14">test_token</name> <operator pos:start="826:16" pos:end="826:16">=</operator> <name pos:start="826:18" pos:end="826:27">GOOD_TOKEN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="828:5" pos:end="828:32"><expr pos:start="828:5" pos:end="828:31"><call pos:start="828:5" pos:end="828:31"><name pos:start="828:5" pos:end="828:29">st_enable_http_token_auth</name><argument_list pos:start="828:30" pos:end="828:31">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="829:5" pos:end="831:7">/*
     * tell the server which token to check against.
     */</comment>
    <expr_stmt pos:start="832:5" pos:end="832:29"><expr pos:start="832:5" pos:end="832:28"><call pos:start="832:5" pos:end="832:28"><name pos:start="832:5" pos:end="832:16">st_set_token</name><argument_list pos:start="832:17" pos:end="832:28">(<argument pos:start="832:18" pos:end="832:27"><expr pos:start="832:18" pos:end="832:27"><name pos:start="832:18" pos:end="832:27">GOOD_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="834:5" pos:end="839:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     *
     * Re-enroll should succeed.
     *
     */</comment>
    <expr_stmt pos:start="840:5" pos:end="840:98"><expr pos:start="840:5" pos:end="840:97"><call pos:start="840:5" pos:end="840:97"><name pos:start="840:5" pos:end="840:26">us1883_simple_reenroll</name><argument_list pos:start="840:27" pos:end="840:97">(<argument pos:start="840:28" pos:end="840:37"><expr pos:start="840:28" pos:end="840:37"><literal type="string" pos:start="840:28" pos:end="840:37">"TC1883-7"</literal></expr></argument>, <argument pos:start="840:40" pos:end="840:55"><expr pos:start="840:40" pos:end="840:55"><name pos:start="840:40" pos:end="840:55">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="840:58" pos:end="840:69"><expr pos:start="840:58" pos:end="840:69"><name pos:start="840:58" pos:end="840:69">EST_ERR_NONE</name></expr></argument>, <argument pos:start="840:72" pos:end="840:96"><expr pos:start="840:72" pos:end="840:96"><name pos:start="840:72" pos:end="840:96">auth_credentials_token_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="842:5" pos:end="844:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="845:5" pos:end="845:46"><expr pos:start="845:5" pos:end="845:45"><call pos:start="845:5" pos:end="845:45"><name pos:start="845:5" pos:end="845:13">CU_ASSERT</name><argument_list pos:start="845:14" pos:end="845:45">(<argument pos:start="845:15" pos:end="845:44"><expr pos:start="845:15" pos:end="845:44"><name pos:start="845:15" pos:end="845:39">auth_cred_callback_called</name> <operator pos:start="845:41" pos:end="845:42">==</operator> <literal type="number" pos:start="845:44" pos:end="845:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="849:1" pos:end="857:3">/*
 * Test7 - Token credentials that are too long
 *
 * In this test,
 * - server into TOKEN mode and told to match against the GOOD token
 * - Client application registers its TOKEN based callback and is told to
 *   give back a token that is TOO LONG.
 * - Client should send a corrupted token that does not match the GOOD token.
 */</comment>
<function pos:start="858:1" pos:end="894:1"><type pos:start="858:1" pos:end="858:11"><specifier pos:start="858:1" pos:end="858:6">static</specifier> <name pos:start="858:8" pos:end="858:11">void</name></type> <name pos:start="858:13" pos:end="858:24">us1883_test8</name> <parameter_list pos:start="858:26" pos:end="858:31">(<parameter pos:start="858:27" pos:end="858:30"><decl pos:start="858:27" pos:end="858:30"><type pos:start="858:27" pos:end="858:30"><name pos:start="858:27" pos:end="858:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="859:1" pos:end="894:1">{<block_content pos:start="861:5" pos:end="893:46">

    <expr_stmt pos:start="861:5" pos:end="861:16"><expr pos:start="861:5" pos:end="861:15"><name pos:start="861:5" pos:end="861:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="863:5" pos:end="870:7">/*
     * Switch the server over to Token mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="871:5" pos:end="871:32"><expr pos:start="871:5" pos:end="871:31"><call pos:start="871:5" pos:end="871:31"><name pos:start="871:5" pos:end="871:29">st_enable_http_token_auth</name><argument_list pos:start="871:30" pos:end="871:31">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="872:5" pos:end="874:7">/*
     * tell the server which token to check against.
     */</comment>
    <expr_stmt pos:start="875:5" pos:end="875:29"><expr pos:start="875:5" pos:end="875:28"><call pos:start="875:5" pos:end="875:28"><name pos:start="875:5" pos:end="875:16">st_set_token</name><argument_list pos:start="875:17" pos:end="875:28">(<argument pos:start="875:18" pos:end="875:27"><expr pos:start="875:18" pos:end="875:27"><name pos:start="875:18" pos:end="875:27">GOOD_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="877:5" pos:end="877:34"><expr pos:start="877:5" pos:end="877:33"><name pos:start="877:5" pos:end="877:29">auth_cred_callback_called</name> <operator pos:start="877:31" pos:end="877:31">=</operator> <literal type="number" pos:start="877:33" pos:end="877:33">0</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="878:5" pos:end="878:58">/* Force the callback to give a failing return code */</comment>
    <expr_stmt pos:start="879:5" pos:end="879:30"><expr pos:start="879:5" pos:end="879:29"><name pos:start="879:5" pos:end="879:25">auth_cred_force_error</name> <operator pos:start="879:27" pos:end="879:27">=</operator> <literal type="number" pos:start="879:29" pos:end="879:29">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="880:5" pos:end="880:28"><expr pos:start="880:5" pos:end="880:27"><name pos:start="880:5" pos:end="880:14">test_token</name> <operator pos:start="880:16" pos:end="880:16">=</operator> <name pos:start="880:18" pos:end="880:27">LONG_TOKEN</name></expr>;</expr_stmt>
    
    <comment type="block" pos:start="882:5" pos:end="886:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     * Pass a callback function to catch and handle the request for a token auth.
     *
     */</comment>
    <expr_stmt pos:start="887:5" pos:end="888:52"><expr pos:start="887:5" pos:end="888:51"><call pos:start="887:5" pos:end="888:51"><name pos:start="887:5" pos:end="887:24">us1883_simple_enroll</name><argument_list pos:start="887:25" pos:end="888:51">(<argument pos:start="887:26" pos:end="887:35"><expr pos:start="887:26" pos:end="887:35"><literal type="string" pos:start="887:26" pos:end="887:35">"TC1883-8"</literal></expr></argument>, <argument pos:start="887:38" pos:end="887:53"><expr pos:start="887:38" pos:end="887:53"><name pos:start="887:38" pos:end="887:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="887:56" pos:end="887:72"><expr pos:start="887:56" pos:end="887:72"><name pos:start="887:56" pos:end="887:72">EST_ERR_AUTH_FAIL</name></expr></argument>,
                         <argument pos:start="888:26" pos:end="888:50"><expr pos:start="888:26" pos:end="888:50"><name pos:start="888:26" pos:end="888:50">auth_credentials_token_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="890:5" pos:end="892:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="893:5" pos:end="893:46"><expr pos:start="893:5" pos:end="893:45"><call pos:start="893:5" pos:end="893:45"><name pos:start="893:5" pos:end="893:13">CU_ASSERT</name><argument_list pos:start="893:14" pos:end="893:45">(<argument pos:start="893:15" pos:end="893:44"><expr pos:start="893:15" pos:end="893:44"><name pos:start="893:15" pos:end="893:39">auth_cred_callback_called</name> <operator pos:start="893:41" pos:end="893:42">==</operator> <literal type="number" pos:start="893:44" pos:end="893:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="897:1" pos:end="908:3">/*
 * Test7 - Test DIGEST mode with on demand credential flow
 *
 * In this test,
 * - server into DIGEST mode
 *   NOTE: This means the server is expecting: "estuser"/"estpwd" and "estrealm"
 *         These values are hardcoded into data in the st_server, so st_server
 *         must be started with estrealm so that it returns this realm to client
 *         so that the client returns it in its request.
 * - Client application registers its DIGEST based callback
 * - Client should send a valid DIGEST and get a cert
 */</comment>
<function pos:start="909:1" pos:end="941:1"><type pos:start="909:1" pos:end="909:11"><specifier pos:start="909:1" pos:end="909:6">static</specifier> <name pos:start="909:8" pos:end="909:11">void</name></type> <name pos:start="909:13" pos:end="909:24">us1883_test9</name> <parameter_list pos:start="909:26" pos:end="909:31">(<parameter pos:start="909:27" pos:end="909:30"><decl pos:start="909:27" pos:end="909:30"><type pos:start="909:27" pos:end="909:30"><name pos:start="909:27" pos:end="909:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="910:1" pos:end="941:1">{<block_content pos:start="912:5" pos:end="940:46">

    <expr_stmt pos:start="912:5" pos:end="912:16"><expr pos:start="912:5" pos:end="912:15"><name pos:start="912:5" pos:end="912:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="914:5" pos:end="921:7">/*
     * Switch the server over to DIGEST mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="922:5" pos:end="922:33"><expr pos:start="922:5" pos:end="922:32"><call pos:start="922:5" pos:end="922:32"><name pos:start="922:5" pos:end="922:30">st_enable_http_digest_auth</name><argument_list pos:start="922:31" pos:end="922:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="924:5" pos:end="924:34"><expr pos:start="924:5" pos:end="924:33"><name pos:start="924:5" pos:end="924:29">auth_cred_callback_called</name> <operator pos:start="924:31" pos:end="924:31">=</operator> <literal type="number" pos:start="924:33" pos:end="924:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="925:5" pos:end="925:30"><expr pos:start="925:5" pos:end="925:29"><name pos:start="925:5" pos:end="925:25">auth_cred_force_error</name> <operator pos:start="925:27" pos:end="925:27">=</operator> <literal type="number" pos:start="925:29" pos:end="925:29">0</literal></expr>;</expr_stmt>
    
    <comment type="block" pos:start="927:5" pos:end="934:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     * Pass a callback function to catch and handle the request for a token auth.
     *
     * enroll should pass because DIGEST mode fully works.  Make sure that the
     * callback is called.  This will ensure that the credentials came from
     * the callback.
     */</comment>
    <expr_stmt pos:start="935:5" pos:end="935:97"><expr pos:start="935:5" pos:end="935:96"><call pos:start="935:5" pos:end="935:96"><name pos:start="935:5" pos:end="935:24">us1883_simple_enroll</name><argument_list pos:start="935:25" pos:end="935:96">(<argument pos:start="935:26" pos:end="935:35"><expr pos:start="935:26" pos:end="935:35"><literal type="string" pos:start="935:26" pos:end="935:35">"TC1883-6"</literal></expr></argument>, <argument pos:start="935:38" pos:end="935:53"><expr pos:start="935:38" pos:end="935:53"><name pos:start="935:38" pos:end="935:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="935:56" pos:end="935:67"><expr pos:start="935:56" pos:end="935:67"><name pos:start="935:56" pos:end="935:67">EST_ERR_NONE</name></expr></argument>, <argument pos:start="935:70" pos:end="935:95"><expr pos:start="935:70" pos:end="935:95"><name pos:start="935:70" pos:end="935:95">auth_credentials_digest_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="937:5" pos:end="939:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="940:5" pos:end="940:46"><expr pos:start="940:5" pos:end="940:45"><call pos:start="940:5" pos:end="940:45"><name pos:start="940:5" pos:end="940:13">CU_ASSERT</name><argument_list pos:start="940:14" pos:end="940:45">(<argument pos:start="940:15" pos:end="940:44"><expr pos:start="940:15" pos:end="940:44"><name pos:start="940:15" pos:end="940:39">auth_cred_callback_called</name> <operator pos:start="940:41" pos:end="940:42">==</operator> <literal type="number" pos:start="940:44" pos:end="940:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="944:1" pos:end="953:3">/*
 * Test4 - Valid token is provided by appliaction callback, but it's the WRONG
 *         token
 *
 * In this test,
 * - application layer registers its callback and responds with a valid token
 * - Server is set up for token mode, but with a different token.
 * - enroll is sent with this token credential
 * - server is set to match on this token and send back a cert
 */</comment>
<function pos:start="954:1" pos:end="988:1"><type pos:start="954:1" pos:end="954:11"><specifier pos:start="954:1" pos:end="954:6">static</specifier> <name pos:start="954:8" pos:end="954:11">void</name></type> <name pos:start="954:13" pos:end="954:25">us1883_test10</name> <parameter_list pos:start="954:27" pos:end="954:32">(<parameter pos:start="954:28" pos:end="954:31"><decl pos:start="954:28" pos:end="954:31"><type pos:start="954:28" pos:end="954:31"><name pos:start="954:28" pos:end="954:31">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="955:1" pos:end="988:1">{<block_content pos:start="957:5" pos:end="987:46">

    <expr_stmt pos:start="957:5" pos:end="957:16"><expr pos:start="957:5" pos:end="957:15"><name pos:start="957:5" pos:end="957:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="959:5" pos:end="966:7">/*
     * Switch the server over to Token mode.
     * 
     * NOTE: I see the equivalent calls being made in numerous places, and
     * it's probably safe in a test setting, but it's dangerous to change
     * this on the fly in an operational setting.  Also note, no return code
     * for any of these set/enable functions.
     */</comment>
    <expr_stmt pos:start="967:5" pos:end="967:32"><expr pos:start="967:5" pos:end="967:31"><call pos:start="967:5" pos:end="967:31"><name pos:start="967:5" pos:end="967:29">st_enable_http_token_auth</name><argument_list pos:start="967:30" pos:end="967:31">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="968:5" pos:end="970:7">/*
     * tell the server which token to check against.
     */</comment>
    <expr_stmt pos:start="971:5" pos:end="971:34"><expr pos:start="971:5" pos:end="971:33"><call pos:start="971:5" pos:end="971:33"><name pos:start="971:5" pos:end="971:16">st_set_token</name><argument_list pos:start="971:17" pos:end="971:33">(<argument pos:start="971:18" pos:end="971:32"><expr pos:start="971:18" pos:end="971:32"><name pos:start="971:18" pos:end="971:32">DIFFERENT_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="973:5" pos:end="973:34"><expr pos:start="973:5" pos:end="973:33"><name pos:start="973:5" pos:end="973:29">auth_cred_callback_called</name> <operator pos:start="973:31" pos:end="973:31">=</operator> <literal type="number" pos:start="973:33" pos:end="973:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="974:5" pos:end="974:30"><expr pos:start="974:5" pos:end="974:29"><name pos:start="974:5" pos:end="974:25">auth_cred_force_error</name> <operator pos:start="974:27" pos:end="974:27">=</operator> <literal type="number" pos:start="974:29" pos:end="974:29">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="975:5" pos:end="975:28"><expr pos:start="975:5" pos:end="975:27"><name pos:start="975:5" pos:end="975:14">test_token</name> <operator pos:start="975:16" pos:end="975:16">=</operator> <name pos:start="975:18" pos:end="975:27">GOOD_TOKEN</name></expr>;</expr_stmt>

    <comment type="block" pos:start="977:5" pos:end="981:7">/*
     * Set up the EST Client and have it perform a simple enroll.
     *
     * Enroll should FAIL because the tokens will not match
     */</comment>
    <expr_stmt pos:start="982:5" pos:end="982:101"><expr pos:start="982:5" pos:end="982:100"><call pos:start="982:5" pos:end="982:100"><name pos:start="982:5" pos:end="982:24">us1883_simple_enroll</name><argument_list pos:start="982:25" pos:end="982:100">(<argument pos:start="982:26" pos:end="982:35"><expr pos:start="982:26" pos:end="982:35"><literal type="string" pos:start="982:26" pos:end="982:35">"TC1883-4"</literal></expr></argument>, <argument pos:start="982:38" pos:end="982:53"><expr pos:start="982:38" pos:end="982:53"><name pos:start="982:38" pos:end="982:53">US1883_SERVER_IP</name></expr></argument>, <argument pos:start="982:56" pos:end="982:72"><expr pos:start="982:56" pos:end="982:72"><name pos:start="982:56" pos:end="982:72">EST_ERR_AUTH_FAIL</name></expr></argument>, <argument pos:start="982:75" pos:end="982:99"><expr pos:start="982:75" pos:end="982:99"><name pos:start="982:75" pos:end="982:99">auth_credentials_token_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="984:5" pos:end="986:7">/*
     * callback should have been called
     */</comment>
    <expr_stmt pos:start="987:5" pos:end="987:46"><expr pos:start="987:5" pos:end="987:45"><call pos:start="987:5" pos:end="987:45"><name pos:start="987:5" pos:end="987:13">CU_ASSERT</name><argument_list pos:start="987:14" pos:end="987:45">(<argument pos:start="987:15" pos:end="987:44"><expr pos:start="987:15" pos:end="987:44"><name pos:start="987:15" pos:end="987:39">auth_cred_callback_called</name> <operator pos:start="987:41" pos:end="987:42">==</operator> <literal type="number" pos:start="987:44" pos:end="987:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="991:1" pos:end="994:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="995:1" pos:end="1028:1"><type pos:start="995:1" pos:end="995:3"><name pos:start="995:1" pos:end="995:3">int</name></type> <name pos:start="995:5" pos:end="995:20">us1883_add_suite</name> <parameter_list pos:start="995:22" pos:end="995:27">(<parameter pos:start="995:23" pos:end="995:26"><decl pos:start="995:23" pos:end="995:26"><type pos:start="995:23" pos:end="995:26"><name pos:start="995:23" pos:end="995:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="996:1" pos:end="1028:1">{<block_content pos:start="998:4" pos:end="1028:0">
<cpp:ifdef pos:start="997:1" pos:end="997:17">#<cpp:directive pos:start="997:2" pos:end="997:6">ifdef</cpp:directive> <name pos:start="997:8" pos:end="997:17">HAVE_CUNIT</name></cpp:ifdef>
   <decl_stmt pos:start="998:4" pos:end="998:27"><decl pos:start="998:4" pos:end="998:26"><type pos:start="998:4" pos:end="998:12"><name pos:start="998:4" pos:end="998:12">CU_pSuite</name></type> <name pos:start="998:14" pos:end="998:19">pSuite</name> <init pos:start="998:21" pos:end="998:26">= <expr pos:start="998:23" pos:end="998:26"><name pos:start="998:23" pos:end="998:26">NULL</name></expr></init></decl>;</decl_stmt>

   <comment type="block" pos:start="1000:4" pos:end="1000:36">/* add a suite to the registry */</comment>
   <expr_stmt pos:start="1001:4" pos:end="1003:48"><expr pos:start="1001:4" pos:end="1003:47"><name pos:start="1001:4" pos:end="1001:9">pSuite</name> <operator pos:start="1001:11" pos:end="1001:11">=</operator> <call pos:start="1001:13" pos:end="1003:47"><name pos:start="1001:13" pos:end="1001:24">CU_add_suite</name><argument_list pos:start="1001:25" pos:end="1003:47">(<argument pos:start="1001:26" pos:end="1001:49"><expr pos:start="1001:26" pos:end="1001:49"><literal type="string" pos:start="1001:26" pos:end="1001:49">"us1883_tok_auth_client"</literal></expr></argument>, 
	                  <argument pos:start="1002:27" pos:end="1002:43"><expr pos:start="1002:27" pos:end="1002:43"><name pos:start="1002:27" pos:end="1002:43">us1883_init_suite</name></expr></argument>, 
			  <argument pos:start="1003:27" pos:end="1003:46"><expr pos:start="1003:27" pos:end="1003:46"><name pos:start="1003:27" pos:end="1003:46">us1883_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt pos:start="1004:4" pos:end="1007:4"><if pos:start="1004:4" pos:end="1007:4">if <condition pos:start="1004:7" pos:end="1004:22">(<expr pos:start="1004:8" pos:end="1004:21"><name pos:start="1004:8" pos:end="1004:11">NULL</name> <operator pos:start="1004:13" pos:end="1004:14">==</operator> <name pos:start="1004:16" pos:end="1004:21">pSuite</name></expr>)</condition> <block pos:start="1004:24" pos:end="1007:4">{<block_content pos:start="1005:7" pos:end="1006:28">
      <expr_stmt pos:start="1005:7" pos:end="1005:28"><expr pos:start="1005:7" pos:end="1005:27"><call pos:start="1005:7" pos:end="1005:27"><name pos:start="1005:7" pos:end="1005:25">CU_cleanup_registry</name><argument_list pos:start="1005:26" pos:end="1005:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1006:7" pos:end="1006:28">return <expr pos:start="1006:14" pos:end="1006:27"><call pos:start="1006:14" pos:end="1006:27"><name pos:start="1006:14" pos:end="1006:25">CU_get_error</name><argument_list pos:start="1006:26" pos:end="1006:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <comment type="block" pos:start="1009:4" pos:end="1009:35">/* add the tests to the suite */</comment>
   <if_stmt pos:start="1010:4" pos:end="1024:4"><if pos:start="1010:4" pos:end="1024:4">if <condition pos:start="1010:7" pos:end="1020:8">(<expr pos:start="1010:8" pos:end="1019:98"><operator pos:start="1010:8" pos:end="1010:8">(</operator><name pos:start="1010:9" pos:end="1010:12">NULL</name> <operator pos:start="1010:14" pos:end="1010:15">==</operator> <call pos:start="1010:17" pos:end="1010:67"><name pos:start="1010:17" pos:end="1010:27">CU_add_test</name><argument_list pos:start="1010:28" pos:end="1010:67">(<argument pos:start="1010:29" pos:end="1010:34"><expr pos:start="1010:29" pos:end="1010:34"><name pos:start="1010:29" pos:end="1010:34">pSuite</name></expr></argument>, <argument pos:start="1010:37" pos:end="1010:52"><expr pos:start="1010:37" pos:end="1010:52"><literal type="string" pos:start="1010:37" pos:end="1010:52">"parse response"</literal></expr></argument>, <argument pos:start="1010:55" pos:end="1010:66"><expr pos:start="1010:55" pos:end="1010:66"><name pos:start="1010:55" pos:end="1010:66">us1883_test1</name></expr></argument>)</argument_list></call><operator pos:start="1010:68" pos:end="1010:68">)</operator> <operator pos:start="1010:70" pos:end="1010:71">||</operator>
       <operator pos:start="1011:8" pos:end="1011:8">(</operator><name pos:start="1011:9" pos:end="1011:12">NULL</name> <operator pos:start="1011:14" pos:end="1011:15">==</operator> <call pos:start="1011:17" pos:end="1011:72"><name pos:start="1011:17" pos:end="1011:27">CU_add_test</name><argument_list pos:start="1011:28" pos:end="1011:72">(<argument pos:start="1011:29" pos:end="1011:34"><expr pos:start="1011:29" pos:end="1011:34"><name pos:start="1011:29" pos:end="1011:34">pSuite</name></expr></argument>, <argument pos:start="1011:37" pos:end="1011:57"><expr pos:start="1011:37" pos:end="1011:57"><literal type="string" pos:start="1011:37" pos:end="1011:57">"simple enroll no cb"</literal></expr></argument>, <argument pos:start="1011:60" pos:end="1011:71"><expr pos:start="1011:60" pos:end="1011:71"><name pos:start="1011:60" pos:end="1011:71">us1883_test2</name></expr></argument>)</argument_list></call><operator pos:start="1011:73" pos:end="1011:73">)</operator> <operator pos:start="1011:75" pos:end="1011:76">||</operator>
       <operator pos:start="1012:8" pos:end="1012:8">(</operator><name pos:start="1012:9" pos:end="1012:12">NULL</name> <operator pos:start="1012:14" pos:end="1012:15">==</operator> <call pos:start="1012:17" pos:end="1012:82"><name pos:start="1012:17" pos:end="1012:27">CU_add_test</name><argument_list pos:start="1012:28" pos:end="1012:82">(<argument pos:start="1012:29" pos:end="1012:34"><expr pos:start="1012:29" pos:end="1012:34"><name pos:start="1012:29" pos:end="1012:34">pSuite</name></expr></argument>, <argument pos:start="1012:37" pos:end="1012:67"><expr pos:start="1012:37" pos:end="1012:67"><literal type="string" pos:start="1012:37" pos:end="1012:67">"simple enroll reg cb no token"</literal></expr></argument>, <argument pos:start="1012:70" pos:end="1012:81"><expr pos:start="1012:70" pos:end="1012:81"><name pos:start="1012:70" pos:end="1012:81">us1883_test3</name></expr></argument>)</argument_list></call><operator pos:start="1012:83" pos:end="1012:83">)</operator> <operator pos:start="1012:85" pos:end="1012:86">||</operator>
       <operator pos:start="1013:8" pos:end="1013:8">(</operator><name pos:start="1013:9" pos:end="1013:12">NULL</name> <operator pos:start="1013:14" pos:end="1013:15">==</operator> <call pos:start="1013:17" pos:end="1013:84"><name pos:start="1013:17" pos:end="1013:27">CU_add_test</name><argument_list pos:start="1013:28" pos:end="1013:84">(<argument pos:start="1013:29" pos:end="1013:34"><expr pos:start="1013:29" pos:end="1013:34"><name pos:start="1013:29" pos:end="1013:34">pSuite</name></expr></argument>, <argument pos:start="1013:37" pos:end="1013:69"><expr pos:start="1013:37" pos:end="1013:69"><literal type="string" pos:start="1013:37" pos:end="1013:69">"simple enroll reg cb good token"</literal></expr></argument>, <argument pos:start="1013:72" pos:end="1013:83"><expr pos:start="1013:72" pos:end="1013:83"><name pos:start="1013:72" pos:end="1013:83">us1883_test4</name></expr></argument>)</argument_list></call><operator pos:start="1013:85" pos:end="1013:85">)</operator> <operator pos:start="1013:87" pos:end="1013:88">||</operator>
       <operator pos:start="1014:8" pos:end="1014:8">(</operator><name pos:start="1014:9" pos:end="1014:12">NULL</name> <operator pos:start="1014:14" pos:end="1014:15">==</operator> <call pos:start="1014:17" pos:end="1014:80"><name pos:start="1014:17" pos:end="1014:27">CU_add_test</name><argument_list pos:start="1014:28" pos:end="1014:80">(<argument pos:start="1014:29" pos:end="1014:34"><expr pos:start="1014:29" pos:end="1014:34"><name pos:start="1014:29" pos:end="1014:34">pSuite</name></expr></argument>, <argument pos:start="1014:37" pos:end="1014:65"><expr pos:start="1014:37" pos:end="1014:65"><literal type="string" pos:start="1014:37" pos:end="1014:65">"simple enroll reg cb bad rc"</literal></expr></argument>, <argument pos:start="1014:68" pos:end="1014:79"><expr pos:start="1014:68" pos:end="1014:79"><name pos:start="1014:68" pos:end="1014:79">us1883_test5</name></expr></argument>)</argument_list></call><operator pos:start="1014:81" pos:end="1014:81">)</operator> <operator pos:start="1014:83" pos:end="1014:84">||</operator>
       <operator pos:start="1015:8" pos:end="1015:8">(</operator><name pos:start="1015:9" pos:end="1015:12">NULL</name> <operator pos:start="1015:14" pos:end="1015:15">==</operator> <call pos:start="1015:17" pos:end="1015:84"><name pos:start="1015:17" pos:end="1015:27">CU_add_test</name><argument_list pos:start="1015:28" pos:end="1015:84">(<argument pos:start="1015:29" pos:end="1015:34"><expr pos:start="1015:29" pos:end="1015:34"><name pos:start="1015:29" pos:end="1015:34">pSuite</name></expr></argument>, <argument pos:start="1015:37" pos:end="1015:69"><expr pos:start="1015:37" pos:end="1015:69"><literal type="string" pos:start="1015:37" pos:end="1015:69">"simple enroll reg cb basic mode"</literal></expr></argument>, <argument pos:start="1015:72" pos:end="1015:83"><expr pos:start="1015:72" pos:end="1015:83"><name pos:start="1015:72" pos:end="1015:83">us1883_test6</name></expr></argument>)</argument_list></call><operator pos:start="1015:85" pos:end="1015:85">)</operator> <operator pos:start="1015:87" pos:end="1015:88">||</operator>
       <operator pos:start="1016:8" pos:end="1016:8">(</operator><name pos:start="1016:9" pos:end="1016:12">NULL</name> <operator pos:start="1016:14" pos:end="1016:15">==</operator> <call pos:start="1016:17" pos:end="1016:87"><name pos:start="1016:17" pos:end="1016:27">CU_add_test</name><argument_list pos:start="1016:28" pos:end="1016:87">(<argument pos:start="1016:29" pos:end="1016:34"><expr pos:start="1016:29" pos:end="1016:34"><name pos:start="1016:29" pos:end="1016:34">pSuite</name></expr></argument>, <argument pos:start="1016:37" pos:end="1016:72"><expr pos:start="1016:37" pos:end="1016:72"><literal type="string" pos:start="1016:37" pos:end="1016:72">"simple re-enroll reg cb good token"</literal></expr></argument>, <argument pos:start="1016:75" pos:end="1016:86"><expr pos:start="1016:75" pos:end="1016:86"><name pos:start="1016:75" pos:end="1016:86">us1883_test7</name></expr></argument>)</argument_list></call><operator pos:start="1016:88" pos:end="1016:88">)</operator> <operator pos:start="1016:90" pos:end="1016:91">||</operator>
       <operator pos:start="1017:8" pos:end="1017:8">(</operator><name pos:start="1017:9" pos:end="1017:12">NULL</name> <operator pos:start="1017:14" pos:end="1017:15">==</operator> <call pos:start="1017:17" pos:end="1017:88"><name pos:start="1017:17" pos:end="1017:27">CU_add_test</name><argument_list pos:start="1017:28" pos:end="1017:88">(<argument pos:start="1017:29" pos:end="1017:34"><expr pos:start="1017:29" pos:end="1017:34"><name pos:start="1017:29" pos:end="1017:34">pSuite</name></expr></argument>, <argument pos:start="1017:37" pos:end="1017:73"><expr pos:start="1017:37" pos:end="1017:73"><literal type="string" pos:start="1017:37" pos:end="1017:73">"simple enroll reg cb token too long"</literal></expr></argument>, <argument pos:start="1017:76" pos:end="1017:87"><expr pos:start="1017:76" pos:end="1017:87"><name pos:start="1017:76" pos:end="1017:87">us1883_test8</name></expr></argument>)</argument_list></call><operator pos:start="1017:89" pos:end="1017:89">)</operator> <operator pos:start="1017:91" pos:end="1017:92">||</operator>
       <operator pos:start="1018:8" pos:end="1018:8">(</operator><name pos:start="1018:9" pos:end="1018:12">NULL</name> <operator pos:start="1018:14" pos:end="1018:15">==</operator> <call pos:start="1018:17" pos:end="1018:85"><name pos:start="1018:17" pos:end="1018:27">CU_add_test</name><argument_list pos:start="1018:28" pos:end="1018:85">(<argument pos:start="1018:29" pos:end="1018:34"><expr pos:start="1018:29" pos:end="1018:34"><name pos:start="1018:29" pos:end="1018:34">pSuite</name></expr></argument>, <argument pos:start="1018:37" pos:end="1018:70"><expr pos:start="1018:37" pos:end="1018:70"><literal type="string" pos:start="1018:37" pos:end="1018:70">"simple enroll reg cb digest mode"</literal></expr></argument>, <argument pos:start="1018:73" pos:end="1018:84"><expr pos:start="1018:73" pos:end="1018:84"><name pos:start="1018:73" pos:end="1018:84">us1883_test9</name></expr></argument>)</argument_list></call><operator pos:start="1018:86" pos:end="1018:86">)</operator> <operator pos:start="1018:88" pos:end="1018:89">||</operator>
       <operator pos:start="1019:8" pos:end="1019:8">(</operator><name pos:start="1019:9" pos:end="1019:12">NULL</name> <operator pos:start="1019:14" pos:end="1019:15">==</operator> <call pos:start="1019:17" pos:end="1019:97"><name pos:start="1019:17" pos:end="1019:27">CU_add_test</name><argument_list pos:start="1019:28" pos:end="1019:97">(<argument pos:start="1019:29" pos:end="1019:34"><expr pos:start="1019:29" pos:end="1019:34"><name pos:start="1019:29" pos:end="1019:34">pSuite</name></expr></argument>, <argument pos:start="1019:37" pos:end="1019:81"><expr pos:start="1019:37" pos:end="1019:81"><literal type="string" pos:start="1019:37" pos:end="1019:81">"simple enroll reg cb mismatched valid token"</literal></expr></argument>, <argument pos:start="1019:84" pos:end="1019:96"><expr pos:start="1019:84" pos:end="1019:96"><name pos:start="1019:84" pos:end="1019:96">us1883_test10</name></expr></argument>)</argument_list></call><operator pos:start="1019:98" pos:end="1019:98">)</operator></expr>
       )</condition>
   <block pos:start="1021:4" pos:end="1024:4">{<block_content pos:start="1022:7" pos:end="1023:28">
      <expr_stmt pos:start="1022:7" pos:end="1022:28"><expr pos:start="1022:7" pos:end="1022:27"><call pos:start="1022:7" pos:end="1022:27"><name pos:start="1022:7" pos:end="1022:25">CU_cleanup_registry</name><argument_list pos:start="1022:26" pos:end="1022:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1023:7" pos:end="1023:28">return <expr pos:start="1023:14" pos:end="1023:27"><call pos:start="1023:14" pos:end="1023:27"><name pos:start="1023:14" pos:end="1023:25">CU_get_error</name><argument_list pos:start="1023:26" pos:end="1023:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <return pos:start="1026:4" pos:end="1028:0">return <expr pos:start="1026:11" pos:end="1026:21"><name pos:start="1026:11" pos:end="1026:21">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1027:1" pos:end="1027:6">#<cpp:directive pos:start="1027:2" pos:end="1027:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


</unit>
