<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us748.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us748.c - Unit Tests for User Story 748 - Proxy simple enroll
 *
 * August, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:21">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:21">"st_proxy.h"</cpp:file></cpp:include>
<cpp:include pos:start="20:1" pos:end="20:24">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="22:1" pos:end="22:17">#<cpp:directive pos:start="22:2" pos:end="22:6">ifdef</cpp:directive> <name pos:start="22:8" pos:end="22:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="24:1" pos:end="24:28">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

<decl_stmt pos:start="27:1" pos:end="27:37"><decl pos:start="27:1" pos:end="27:36"><type pos:start="27:1" pos:end="27:22"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:15">unsigned</name> <name pos:start="27:17" pos:end="27:20">char</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:29">cacerts</name> <init pos:start="27:31" pos:end="27:36">= <expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="28:1" pos:end="37:0"><decl pos:start="28:1" pos:end="28:26"><type pos:start="28:1" pos:end="28:10"><specifier pos:start="28:1" pos:end="28:6">static</specifier> <name pos:start="28:8" pos:end="28:10">int</name></type> <name pos:start="28:12" pos:end="28:22">cacerts_len</name> <init pos:start="28:24" pos:end="28:26">= <expr pos:start="28:26" pos:end="28:26"><literal type="number" pos:start="28:26" pos:end="28:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="30:1" pos:end="30:36">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:28"><name pos:start="30:9" pos:end="30:28">US748_RETRY_INTERVAL</name></cpp:macro>    <cpp:value pos:start="30:33" pos:end="30:36">3600</cpp:value></cpp:define>
<comment type="line" pos:start="31:1" pos:end="31:37">//#define US748_TCP_PORT        29001</comment>

<cpp:define pos:start="33:1" pos:end="33:41">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:29">US748_TCP_SERVER_PORT</name></cpp:macro>       <cpp:value pos:start="33:37" pos:end="33:41">15748</cpp:value></cpp:define>
<cpp:define pos:start="34:1" pos:end="34:41">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:28"><name pos:start="34:9" pos:end="34:28">US748_TCP_PROXY_PORT</name></cpp:macro>        <cpp:value pos:start="34:37" pos:end="34:41">16748</cpp:value></cpp:define>

<cpp:ifndef pos:start="36:1" pos:end="36:13">#<cpp:directive pos:start="36:2" pos:end="36:7">ifndef</cpp:directive> <name pos:start="36:9" pos:end="36:13">WIN32</name></cpp:ifndef>
<decl_stmt pos:start="37:1" pos:end="47:0"><decl pos:start="37:1" pos:end="37:59"><type pos:start="37:1" pos:end="37:11"><specifier pos:start="37:1" pos:end="37:6">static</specifier> <name pos:start="37:8" pos:end="37:11">char</name></type> <name pos:start="37:13" pos:end="37:39"><name pos:start="37:13" pos:end="37:25">test5_outfile</name><index pos:start="37:26" pos:end="37:39">[<expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="37:41" pos:end="37:59">= <expr pos:start="37:43" pos:end="37:59"><literal type="string" pos:start="37:43" pos:end="37:59">"US748/test5.hdr"</literal></expr></init></decl>;</decl_stmt>
<cpp:define pos:start="38:1" pos:end="38:68">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:25"><name pos:start="38:9" pos:end="38:25">US748_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="38:27" pos:end="38:68">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:67">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:24">US748_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="39:26" pos:end="39:67">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<comment type="block" pos:start="40:1" pos:end="40:75">/* #define US748_PROXY_CERT "CA/estCA/private/estservercertandkey.pem"   */</comment>
<comment type="block" pos:start="41:1" pos:end="41:72">/* #define US748_PROXY_KEY "CA/estCA/private/estservercertandkey.pem" */</comment>
<cpp:define pos:start="42:1" pos:end="42:41">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:24"><name pos:start="42:9" pos:end="42:24">US748_PROXY_CERT</name></cpp:macro> <cpp:value pos:start="42:26" pos:end="42:41">"US748/cert.pem"</cpp:value></cpp:define>  
<cpp:define pos:start="43:1" pos:end="43:39">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:23">US748_PROXY_KEY</name></cpp:macro> <cpp:value pos:start="43:25" pos:end="43:39">"US748/key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:42">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:20"><name pos:start="44:9" pos:end="44:20">US748_CACERT</name></cpp:macro> <cpp:value pos:start="44:22" pos:end="44:42">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:48">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:26">US748_TRUSTED_CERT</name></cpp:macro> <cpp:value pos:start="45:28" pos:end="45:48">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:else pos:start="46:1" pos:end="46:5">#<cpp:directive pos:start="46:2" pos:end="46:5">else</cpp:directive></cpp:else>
<decl_stmt pos:start="47:1" pos:end="98:0"><decl pos:start="47:1" pos:end="47:60"><type pos:start="47:1" pos:end="47:11"><specifier pos:start="47:1" pos:end="47:6">static</specifier> <name pos:start="47:8" pos:end="47:11">char</name></type> <name pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:25">test5_outfile</name><index pos:start="47:26" pos:end="47:39">[<expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="47:41" pos:end="47:60">= <expr pos:start="47:43" pos:end="47:60"><literal type="string" pos:start="47:43" pos:end="47:60">"US748\\test5.hdr"</literal></expr></init></decl>;</decl_stmt>
<cpp:define pos:start="48:1" pos:end="48:70">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:25"><name pos:start="48:9" pos:end="48:25">US748_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="48:27" pos:end="48:70">"CA\\estCA/private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:70">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:24">US748_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="49:26" pos:end="49:70">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<comment type="block" pos:start="50:1" pos:end="50:75">/* #define US748_PROXY_CERT "CA/estCA/private/estservercertandkey.pem"   */</comment>
<comment type="block" pos:start="51:1" pos:end="51:72">/* #define US748_PROXY_KEY "CA/estCA/private/estservercertandkey.pem" */</comment>
<cpp:define pos:start="52:1" pos:end="52:42">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:24"><name pos:start="52:9" pos:end="52:24">US748_PROXY_CERT</name></cpp:macro> <cpp:value pos:start="52:26" pos:end="52:42">"US748\\cert.pem"</cpp:value></cpp:define>  
<cpp:define pos:start="53:1" pos:end="53:40">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:23">US748_PROXY_KEY</name></cpp:macro> <cpp:value pos:start="53:25" pos:end="53:40">"US748\\key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:44">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:20"><name pos:start="54:9" pos:end="54:20">US748_CACERT</name></cpp:macro> <cpp:value pos:start="54:22" pos:end="54:44">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:49">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:26">US748_TRUSTED_CERT</name></cpp:macro> <cpp:value pos:start="55:28" pos:end="55:49">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:endif pos:start="56:1" pos:end="56:6">#<cpp:directive pos:start="56:2" pos:end="56:6">endif</cpp:directive></cpp:endif>
<comment type="block" pos:start="57:1" pos:end="62:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the rsa.req file:
 *
 * openssl req -newkey rsa:2048 -keyout rsakey.pem -keyform PEM -out rsa.req -outform PEM
 */</comment>
<cpp:define pos:start="63:1" pos:end="63:999">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:28">US748_PKCS10_RSA2048</name></cpp:macro> <cpp:value pos:start="63:30" pos:end="63:999">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDJA9mdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>

<comment type="block" pos:start="65:1" pos:end="70:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the ec.req file:
 *
 * openssl req -newkey ec:256parms -keyout eckey.pem -keyform PEM -out ec.req -outform PEM
 */</comment>
<cpp:define pos:start="71:1" pos:end="71:913">#<cpp:directive pos:start="71:2" pos:end="71:7">define</cpp:directive> <cpp:macro pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:28">US748_PKCS10_DSA1024</name></cpp:macro> <cpp:value pos:start="71:30" pos:end="71:913">"MIICfjCCAj0CAQAwfDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEzARBgNVBAoMCkRTQUNvbXBhbnkxDzANBgNVBAsMBkRTQW9yZzEQMA4G\nA1UEAwwHZHNhIGRvZTEaMBgGCSqGSIb3DQEJARYLZHNhQGRvZS5jb20wggG2MIIB\nKwYHKoZIzjgEATCCAR4CgYEAqIfbyk7rEAaULIPB1GcHHc0ctx6g0dhBfdUdOPNG\nBSE+TP5UF5lw8Qm6oCXstU3nYEJalmMvkjFwbgvBws8aJBnj09dDDn8spKEGcG0M\nZpqdMys6+b4QJjq5YAxEaATVY/1L/rBgGGm1EFDhc/6Ezm2T3CGeQklwo5aBZQCc\naIsCFQDC1olBFuE+phOhjXAwEE5EPJkRJwKBgD+vZ+tLCTjBzVFNjAO8X/SMamwW\noraNfdyZ+ZCEAmYI/D4838nCGAjVRQyDb1q5akkLyxoJX1YV7gNbaBNUys3waqdu\nso1HtuEur2cbhU5iOeKBWpj6MIWlPdD3uCRu4uiBF9XBiANaRID8CT2kchhwy4Ok\nFfQMuYOz4eBhMQqmA4GEAAKBgDuwR7H3U4CfuQjWeTtrI50M1TxhlVZ3TonRtVIx\nEHpuXxAouxATVkthJtaCBKc0EHii1bE/kgNUgGX/ZdFjBUb/XfpkYsRT3QRLF0+s\nPZGY/0TovO9pKjqiw0C10leNKFbEVdlXYtAkjXUbHmyNog3195/t7oKXHMT1A/5p\nhUCRoAAwCQYHKoZIzjgEAwMwADAtAhUAhPCqQG3gKUUPKdwBNCmZfzWDqjsCFAh0\nzn9HujlXNaTA1OhjmPmcJSxT"</cpp:value></cpp:define>

<comment type="block" pos:start="73:1" pos:end="78:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the dsa.req file:
 *
 * openssl req -newkey dsa:dsaparms -keyout dsakey.pem -keyform PEM -out dsa.req -outform PEM
 */</comment>
<cpp:define pos:start="79:1" pos:end="79:456">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:29">US748_PKCS10_ECDSA256</name></cpp:macro> <cpp:value pos:start="79:31" pos:end="79:456">"MIIBMTCB2gIBADB4MQswCQYDVQQGEwJVUzELMAkGA1UECAwCTkMxDDAKBgNVBAcM\nA1JUUDESMBAGA1UECgwJRUNDb21wYW55MQ4wDAYDVQQLDAVFQ29yZzEPMA0GA1UE\nAwwGRUMgZG9lMRkwFwYJKoZIhvcNAQkBFgplY0Bkb2UuY29tMFkwEwYHKoZIzj0C\nAQYIKoZIzj0DAQcDQgAEO1uszCKdXNFzygNLNeS8azQKod1516GT9qdDddt9iJN4\nLpBTnv+7K7+tji5kts1kWSYyvqLxvnq8Q/TU1iQJ56AAMAkGByqGSM49BAEDRwAw\nRAIgP6qda+0TEKZFPopgUfwFMRsxcNmuQUe2yuz16460/SQCIBfLvmuMeyYOqbbD\nX0Ifde9yzkROVBCEPvK0hcU5KsTO"</cpp:value></cpp:define>

<cpp:define pos:start="81:1" pos:end="81:455">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:28">US748_PKCS10_CORRUPT</name></cpp:macro> <cpp:value pos:start="81:30" pos:end="81:455">"MIIBMTCB2gIBADB4MQswCQYDVQQGEwJVUzELMAkGA1UECAwCTkMxDDAKBgNVBAcM\nA1JUUDESMBAGA1UECgwJRUNDb21wYW55MQ4wDAYDVQQLDAVFQ39yZzEPMA0GA1UE\nAwwGRUMgZG9lMRkwFwYJKoZIhvcNAQkBFgplY0Bkb2UuY29tMFkwEwYHKoZIzj0C\nAQYIKoZIzj0DAQcDQgAEO1uszCKdXNFzygNLNeS8azQKod1516GT9qdDddt9iJN4\nLpBTnv+7K7+tji5kts1kWSYyvqLxvnq8Q/TU1iQJ56AAMAkGByqGSM49BAEDRwAw\nRAIgP6qda+0TEKZFPopgUfwFMRsxcNmuQUe2yuz16460/SQCIBfLvmuMeyYOqbbD\nX0Ifde9yzkROVBCEPvK0hcU5KsTO"</cpp:value></cpp:define>

<comment type="block" pos:start="83:1" pos:end="88:3">/*
 * The following is a valid CSR that already contains a PoP
 * challengePassword.  This was collected using estserver with
 * the dumpbin() function.  This CSR should never work since
 * the PoP value in it will be stale.
 */</comment>
<cpp:define pos:start="89:1" pos:end="89:547">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:30">US748_PKCS10_STALE_POP</name></cpp:macro> <cpp:value pos:start="89:32" pos:end="89:547">"MIIBcjCB3AIBADARMQ8wDQYDVQQDEwZURVNUQ04wgZ8wDQYJKoZIhvcNAQEBBQAD\ngY0AMIGJAoGBAPDHvrkVB3+rFHl+KuIsrZGixldRYRD50S2vFs8mW5wWVxDS3xFR\nzcKtqg7JUyW8NYOFNWX0ozhCe87XP2h7tUpHyHlL/8N/84zuMtAtKTLU3Bjgq1xg\nuu8a1ht10wiy8u2r/uEKMhQwpvt56UY5pHzuqmqlO0qlmE+M58WN49IhAgMBAAGg\nIjAgBgkqhkiG9w0BCQcxExYRUjdGN1ZUNUwyd2VueWtMcAowDQYJKoZIhvcNAQEF\nBQADgYEAyenrskmfRIXcpeKBvL3VnW5N4HcLTwI9Hcbr744SWFQaw/R+ru+UXd2j\n99AGBr/GvTkTghINWg2C7vzGF/zhIuG6Ok9FtiMnNr9hZ+5SLYhfSFJbuIv65rWH\nvfLR9N9M2Q9jlf7p4AYfWXD2qD2XOTZw2t4trGZGKA2JR/OiB40="</cpp:value></cpp:define>

<cpp:define pos:start="91:1" pos:end="91:82">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:27">US748_ENROLL_URL_BA</name></cpp:macro> <cpp:value pos:start="91:29" pos:end="91:82">"https://127.0.0.1:15748/.well-known/est/simpleenroll"</cpp:value></cpp:define>

<cpp:define pos:start="93:1" pos:end="93:62">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:23">US748_PKCS10_CT</name></cpp:macro>     <cpp:value pos:start="93:29" pos:end="93:62">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 
<cpp:define pos:start="94:1" pos:end="94:44">#<cpp:directive pos:start="94:2" pos:end="94:7">define</cpp:directive> <cpp:macro pos:start="94:9" pos:end="94:25"><name pos:start="94:9" pos:end="94:25">US748_UIDPWD_GOOD</name></cpp:macro>   <cpp:value pos:start="94:29" pos:end="94:44">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:define pos:start="95:1" pos:end="95:49">#<cpp:directive pos:start="95:2" pos:end="95:7">define</cpp:directive> <cpp:macro pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:21">US748_CACERTS</name></cpp:macro>       <cpp:value pos:start="95:29" pos:end="95:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="96:1" pos:end="96:47">#<cpp:directive pos:start="96:2" pos:end="96:7">define</cpp:directive> <cpp:macro pos:start="96:9" pos:end="96:27"><name pos:start="96:9" pos:end="96:27">US748_EXPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="96:29" pos:end="96:47">"US748/cert-RA.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="97:1" pos:end="97:46">#<cpp:directive pos:start="97:2" pos:end="97:7">define</cpp:directive> <cpp:macro pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:26">US748_EXPLICIT_KEY</name></cpp:macro>  <cpp:value pos:start="97:29" pos:end="97:46">"US748/key-RA.pem"</cpp:value></cpp:define>

<function pos:start="99:1" pos:end="125:1"><type pos:start="99:1" pos:end="99:17"><specifier pos:start="99:1" pos:end="99:6">static</specifier> <name pos:start="99:8" pos:end="99:15">EVP_PKEY</name> <modifier pos:start="99:17" pos:end="99:17">*</modifier></type> <name pos:start="99:19" pos:end="99:38">generate_private_key</name> <parameter_list pos:start="99:40" pos:end="99:45">(<parameter pos:start="99:41" pos:end="99:44"><decl pos:start="99:41" pos:end="99:44"><type pos:start="99:41" pos:end="99:44"><name pos:start="99:41" pos:end="99:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="100:1" pos:end="125:1">{<block_content pos:start="101:5" pos:end="124:18">
    <decl_stmt pos:start="101:5" pos:end="101:25"><decl pos:start="101:5" pos:end="101:24"><type pos:start="101:5" pos:end="101:9"><name pos:start="101:5" pos:end="101:7">RSA</name> <modifier pos:start="101:9" pos:end="101:9">*</modifier></type><name pos:start="101:10" pos:end="101:12">rsa</name> <init pos:start="101:14" pos:end="101:24">= <expr pos:start="101:16" pos:end="101:24"><call pos:start="101:16" pos:end="101:24"><name pos:start="101:16" pos:end="101:22">RSA_new</name><argument_list pos:start="101:23" pos:end="101:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="102:5" pos:end="102:26"><decl pos:start="102:5" pos:end="102:25"><type pos:start="102:5" pos:end="102:12"><name pos:start="102:5" pos:end="102:10">BIGNUM</name> <modifier pos:start="102:12" pos:end="102:12">*</modifier></type><name pos:start="102:13" pos:end="102:14">bn</name> <init pos:start="102:16" pos:end="102:25">= <expr pos:start="102:18" pos:end="102:25"><call pos:start="102:18" pos:end="102:25"><name pos:start="102:18" pos:end="102:23">BN_new</name><argument_list pos:start="102:24" pos:end="102:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="103:5" pos:end="103:19"><decl pos:start="103:5" pos:end="103:18"><type pos:start="103:5" pos:end="103:14"><name pos:start="103:5" pos:end="103:12">EVP_PKEY</name> <modifier pos:start="103:14" pos:end="103:14">*</modifier></type><name pos:start="103:15" pos:end="103:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="105:5" pos:end="107:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="108:5" pos:end="108:29"><expr pos:start="108:5" pos:end="108:28"><call pos:start="108:5" pos:end="108:28"><name pos:start="108:5" pos:end="108:15">BN_set_word</name><argument_list pos:start="108:16" pos:end="108:28">(<argument pos:start="108:17" pos:end="108:18"><expr pos:start="108:17" pos:end="108:18"><name pos:start="108:17" pos:end="108:18">bn</name></expr></argument>, <argument pos:start="108:21" pos:end="108:27"><expr pos:start="108:21" pos:end="108:27"><literal type="number" pos:start="108:21" pos:end="108:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="109:45"><expr pos:start="109:5" pos:end="109:44"><call pos:start="109:5" pos:end="109:44"><name pos:start="109:5" pos:end="109:23">RSA_generate_key_ex</name><argument_list pos:start="109:24" pos:end="109:44">(<argument pos:start="109:25" pos:end="109:27"><expr pos:start="109:25" pos:end="109:27"><name pos:start="109:25" pos:end="109:27">rsa</name></expr></argument>, <argument pos:start="109:30" pos:end="109:33"><expr pos:start="109:30" pos:end="109:33"><literal type="number" pos:start="109:30" pos:end="109:33">1024</literal></expr></argument>, <argument pos:start="109:36" pos:end="109:37"><expr pos:start="109:36" pos:end="109:37"><name pos:start="109:36" pos:end="109:37">bn</name></expr></argument>, <argument pos:start="109:40" pos:end="109:43"><expr pos:start="109:40" pos:end="109:43"><name pos:start="109:40" pos:end="109:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:26"><expr pos:start="111:5" pos:end="111:25"><name pos:start="111:5" pos:end="111:8">pkey</name> <operator pos:start="111:10" pos:end="111:10">=</operator> <call pos:start="111:12" pos:end="111:25"><name pos:start="111:12" pos:end="111:23">EVP_PKEY_new</name><argument_list pos:start="111:24" pos:end="111:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="112:5" pos:end="115:5"><if pos:start="112:5" pos:end="115:5">if <condition pos:start="112:8" pos:end="112:21">(<expr pos:start="112:9" pos:end="112:20"><name pos:start="112:9" pos:end="112:12">pkey</name> <operator pos:start="112:14" pos:end="112:15">==</operator> <name pos:start="112:17" pos:end="112:20">NULL</name></expr>)</condition> <block pos:start="112:23" pos:end="115:5">{<block_content pos:start="113:9" pos:end="114:20">
        <expr_stmt pos:start="113:9" pos:end="113:71"><expr pos:start="113:9" pos:end="113:70"><call pos:start="113:9" pos:end="113:70"><name pos:start="113:9" pos:end="113:14">printf</name><argument_list pos:start="113:15" pos:end="113:70">(<argument pos:start="113:16" pos:end="113:69"><expr pos:start="113:16" pos:end="113:69"><literal type="string" pos:start="113:16" pos:end="113:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="114:9" pos:end="114:20">return <expr pos:start="114:16" pos:end="114:19"><name pos:start="114:16" pos:end="114:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="116:5" pos:end="119:5"><if pos:start="116:5" pos:end="119:5">if <condition pos:start="116:8" pos:end="116:38">(<expr pos:start="116:9" pos:end="116:37"><operator pos:start="116:9" pos:end="116:9">!</operator><call pos:start="116:10" pos:end="116:37"><name pos:start="116:10" pos:end="116:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="116:27" pos:end="116:37">(<argument pos:start="116:28" pos:end="116:31"><expr pos:start="116:28" pos:end="116:31"><name pos:start="116:28" pos:end="116:31">pkey</name></expr></argument>, <argument pos:start="116:34" pos:end="116:36"><expr pos:start="116:34" pos:end="116:36"><name pos:start="116:34" pos:end="116:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="116:40" pos:end="119:5">{<block_content pos:start="117:9" pos:end="118:20">
        <expr_stmt pos:start="117:9" pos:end="117:69"><expr pos:start="117:9" pos:end="117:68"><call pos:start="117:9" pos:end="117:68"><name pos:start="117:9" pos:end="117:14">printf</name><argument_list pos:start="117:15" pos:end="117:68">(<argument pos:start="117:16" pos:end="117:67"><expr pos:start="117:16" pos:end="117:67"><literal type="string" pos:start="117:16" pos:end="117:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="118:9" pos:end="118:20">return <expr pos:start="118:16" pos:end="118:19"><name pos:start="118:16" pos:end="118:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:18"><expr pos:start="121:5" pos:end="121:17"><call pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:12">RSA_free</name><argument_list pos:start="121:13" pos:end="121:17">(<argument pos:start="121:14" pos:end="121:16"><expr pos:start="121:14" pos:end="121:16"><name pos:start="121:14" pos:end="121:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="122:5" pos:end="122:16"><expr pos:start="122:5" pos:end="122:15"><call pos:start="122:5" pos:end="122:15"><name pos:start="122:5" pos:end="122:11">BN_free</name><argument_list pos:start="122:12" pos:end="122:15">(<argument pos:start="122:13" pos:end="122:14"><expr pos:start="122:13" pos:end="122:14"><name pos:start="122:13" pos:end="122:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="124:5" pos:end="124:18">return <expr pos:start="124:12" pos:end="124:17"><operator pos:start="124:12" pos:end="124:12">(</operator><name pos:start="124:13" pos:end="124:16">pkey</name><operator pos:start="124:17" pos:end="124:17">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="127:1" pos:end="129:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="130:1" pos:end="160:1"><type pos:start="130:1" pos:end="130:10"><specifier pos:start="130:1" pos:end="130:6">static</specifier> <name pos:start="130:8" pos:end="130:10">int</name></type> <name pos:start="130:12" pos:end="130:36">client_manual_cert_verify</name> <parameter_list pos:start="130:38" pos:end="130:77">(<parameter pos:start="130:39" pos:end="130:52"><decl pos:start="130:39" pos:end="130:52"><type pos:start="130:39" pos:end="130:52"><name pos:start="130:39" pos:end="130:42">X509</name> <modifier pos:start="130:44" pos:end="130:44">*</modifier></type><name pos:start="130:45" pos:end="130:52">cur_cert</name></decl></parameter>, <parameter pos:start="130:55" pos:end="130:76"><decl pos:start="130:55" pos:end="130:76"><type pos:start="130:55" pos:end="130:76"><name pos:start="130:55" pos:end="130:57">int</name></type> <name pos:start="130:59" pos:end="130:76">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="131:1" pos:end="160:1">{<block_content pos:start="132:5" pos:end="159:19">
    <decl_stmt pos:start="132:5" pos:end="132:18"><decl pos:start="132:5" pos:end="132:17"><type pos:start="132:5" pos:end="132:9"><name pos:start="132:5" pos:end="132:7">BIO</name> <modifier pos:start="132:9" pos:end="132:9">*</modifier></type> <name pos:start="132:11" pos:end="132:17">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="133:5" pos:end="133:46"><expr pos:start="133:5" pos:end="133:45"><name pos:start="133:5" pos:end="133:11">bio_err</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <call pos:start="133:15" pos:end="133:45"><name pos:start="133:15" pos:end="133:24">BIO_new_fp</name><argument_list pos:start="133:25" pos:end="133:45">(<argument pos:start="133:26" pos:end="133:31"><expr pos:start="133:26" pos:end="133:31"><name pos:start="133:26" pos:end="133:31">stderr</name></expr></argument>, <argument pos:start="133:34" pos:end="133:44"><expr pos:start="133:34" pos:end="133:44"><name pos:start="133:34" pos:end="133:44">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="134:5" pos:end="134:20"><decl pos:start="134:5" pos:end="134:19"><type pos:start="134:5" pos:end="134:7"><name pos:start="134:5" pos:end="134:7">int</name></type> <name pos:start="134:9" pos:end="134:15">approve</name> <init pos:start="134:17" pos:end="134:19">= <expr pos:start="134:19" pos:end="134:19"><literal type="number" pos:start="134:19" pos:end="134:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="136:5" pos:end="138:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="139:5" pos:end="142:59"><expr pos:start="139:5" pos:end="142:58"><call pos:start="139:5" pos:end="142:58"><name pos:start="139:5" pos:end="139:10">printf</name><argument_list pos:start="139:11" pos:end="142:58">(
        <argument pos:start="140:9" pos:end="140:114"><expr pos:start="140:9" pos:end="140:114"><literal type="string" pos:start="140:9" pos:end="140:114">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
        <argument pos:start="141:9" pos:end="141:20"><expr pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:20">__FUNCTION__</name></expr></argument>, <argument pos:start="141:23" pos:end="141:40"><expr pos:start="141:23" pos:end="141:40"><name pos:start="141:23" pos:end="141:40">openssl_cert_error</name></expr></argument>,
        <argument pos:start="142:9" pos:end="142:57"><expr pos:start="142:9" pos:end="142:57"><call pos:start="142:9" pos:end="142:57"><name pos:start="142:9" pos:end="142:37">X509_verify_cert_error_string</name><argument_list pos:start="142:38" pos:end="142:57">(<argument pos:start="142:39" pos:end="142:56"><expr pos:start="142:39" pos:end="142:56"><name pos:start="142:39" pos:end="142:56">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="144:5" pos:end="144:30"><expr pos:start="144:5" pos:end="144:29"><call pos:start="144:5" pos:end="144:29"><name pos:start="144:5" pos:end="144:10">printf</name><argument_list pos:start="144:11" pos:end="144:29">(<argument pos:start="144:12" pos:end="144:28"><expr pos:start="144:12" pos:end="144:28"><literal type="string" pos:start="144:12" pos:end="144:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="145:5" pos:end="145:36"><expr pos:start="145:5" pos:end="145:35"><call pos:start="145:5" pos:end="145:35"><name pos:start="145:5" pos:end="145:17">X509_print_fp</name><argument_list pos:start="145:18" pos:end="145:35">(<argument pos:start="145:19" pos:end="145:24"><expr pos:start="145:19" pos:end="145:24"><name pos:start="145:19" pos:end="145:24">stdout</name></expr></argument>, <argument pos:start="145:27" pos:end="145:34"><expr pos:start="145:27" pos:end="145:34"><name pos:start="145:27" pos:end="145:34">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="146:5" pos:end="150:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="151:5" pos:end="151:74"><expr pos:start="151:5" pos:end="151:73"><call pos:start="151:5" pos:end="151:73"><name pos:start="151:5" pos:end="151:24">X509_signature_print</name><argument_list pos:start="151:25" pos:end="151:73">(<argument pos:start="151:26" pos:end="151:32"><expr pos:start="151:26" pos:end="151:32"><name pos:start="151:26" pos:end="151:32">bio_err</name></expr></argument>, <argument pos:start="151:35" pos:end="151:51"><expr pos:start="151:35" pos:end="151:51"><name pos:start="151:35" pos:end="151:51"><name pos:start="151:35" pos:end="151:42">cur_cert</name><operator pos:start="151:43" pos:end="151:44">-&gt;</operator><name pos:start="151:45" pos:end="151:51">sig_alg</name></name></expr></argument>, <argument pos:start="151:54" pos:end="151:72"><expr pos:start="151:54" pos:end="151:72"><name pos:start="151:54" pos:end="151:72"><name pos:start="151:54" pos:end="151:61">cur_cert</name><operator pos:start="151:62" pos:end="151:63">-&gt;</operator><name pos:start="151:64" pos:end="151:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="155:5"><if pos:start="153:5" pos:end="155:5">if <condition pos:start="153:8" pos:end="153:59">(<expr pos:start="153:9" pos:end="153:58"><name pos:start="153:9" pos:end="153:26">openssl_cert_error</name> <operator pos:start="153:28" pos:end="153:29">==</operator> <name pos:start="153:31" pos:end="153:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="153:61" pos:end="155:5">{<block_content pos:start="154:9" pos:end="154:20">
        <expr_stmt pos:start="154:9" pos:end="154:20"><expr pos:start="154:9" pos:end="154:19"><name pos:start="154:9" pos:end="154:15">approve</name> <operator pos:start="154:17" pos:end="154:17">=</operator> <literal type="number" pos:start="154:19" pos:end="154:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:22"><expr pos:start="157:5" pos:end="157:21"><call pos:start="157:5" pos:end="157:21"><name pos:start="157:5" pos:end="157:12">BIO_free</name><argument_list pos:start="157:13" pos:end="157:21">(<argument pos:start="157:14" pos:end="157:20"><expr pos:start="157:14" pos:end="157:20"><name pos:start="157:14" pos:end="157:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:19">return <expr pos:start="159:12" pos:end="159:18"><name pos:start="159:12" pos:end="159:18">approve</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt pos:start="162:1" pos:end="162:21"><decl pos:start="162:1" pos:end="162:20"><type pos:start="162:1" pos:end="162:13"><specifier pos:start="162:1" pos:end="162:6">static</specifier> <name pos:start="162:8" pos:end="162:11">FILE</name> <modifier pos:start="162:13" pos:end="162:13">*</modifier></type><name pos:start="162:14" pos:end="162:20">outfile</name></decl>;</decl_stmt>
<function pos:start="163:1" pos:end="168:1"><type pos:start="163:1" pos:end="163:13"><specifier pos:start="163:1" pos:end="163:6">static</specifier> <name pos:start="163:8" pos:end="163:13">size_t</name></type> <name pos:start="163:15" pos:end="163:24">write_func</name> <parameter_list pos:start="163:26" pos:end="163:79">(<parameter pos:start="163:27" pos:end="163:35"><decl pos:start="163:27" pos:end="163:35"><type pos:start="163:27" pos:end="163:35"><name pos:start="163:27" pos:end="163:30">void</name> <modifier pos:start="163:32" pos:end="163:32">*</modifier></type><name pos:start="163:33" pos:end="163:35">ptr</name></decl></parameter>, <parameter pos:start="163:38" pos:end="163:48"><decl pos:start="163:38" pos:end="163:48"><type pos:start="163:38" pos:end="163:48"><name pos:start="163:38" pos:end="163:43">size_t</name></type> <name pos:start="163:45" pos:end="163:48">size</name></decl></parameter>, <parameter pos:start="163:51" pos:end="163:62"><decl pos:start="163:51" pos:end="163:62"><type pos:start="163:51" pos:end="163:62"><name pos:start="163:51" pos:end="163:56">size_t</name></type> <name pos:start="163:58" pos:end="163:62">nmemb</name></decl></parameter>, <parameter pos:start="163:65" pos:end="163:78"><decl pos:start="163:65" pos:end="163:78"><type pos:start="163:65" pos:end="163:78"><name pos:start="163:65" pos:end="163:68">void</name> <modifier pos:start="163:70" pos:end="163:70">*</modifier></type><name pos:start="163:71" pos:end="163:78">userdata</name></decl></parameter>)</parameter_list>
<block pos:start="164:1" pos:end="168:1">{<block_content pos:start="165:5" pos:end="167:19">
    <decl_stmt pos:start="165:5" pos:end="165:19"><decl pos:start="165:5" pos:end="165:18"><type pos:start="165:5" pos:end="165:10"><name pos:start="165:5" pos:end="165:10">size_t</name></type> <name pos:start="165:12" pos:end="165:18">written</name></decl>;</decl_stmt>
    <expr_stmt pos:start="166:5" pos:end="166:48"><expr pos:start="166:5" pos:end="166:47"><name pos:start="166:5" pos:end="166:11">written</name> <operator pos:start="166:13" pos:end="166:13">=</operator> <call pos:start="166:15" pos:end="166:47"><name pos:start="166:15" pos:end="166:20">fwrite</name><argument_list pos:start="166:21" pos:end="166:47">(<argument pos:start="166:22" pos:end="166:24"><expr pos:start="166:22" pos:end="166:24"><name pos:start="166:22" pos:end="166:24">ptr</name></expr></argument>, <argument pos:start="166:27" pos:end="166:30"><expr pos:start="166:27" pos:end="166:30"><name pos:start="166:27" pos:end="166:30">size</name></expr></argument>, <argument pos:start="166:33" pos:end="166:37"><expr pos:start="166:33" pos:end="166:37"><name pos:start="166:33" pos:end="166:37">nmemb</name></expr></argument>, <argument pos:start="166:40" pos:end="166:46"><expr pos:start="166:40" pos:end="166:46"><name pos:start="166:40" pos:end="166:46">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="167:5" pos:end="167:19">return <expr pos:start="167:12" pos:end="167:18"><name pos:start="167:12" pos:end="167:18">written</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="170:1" pos:end="172:1"><type pos:start="170:1" pos:end="170:11"><specifier pos:start="170:1" pos:end="170:6">static</specifier> <name pos:start="170:8" pos:end="170:11">void</name></type> <name pos:start="170:13" pos:end="170:23">us748_clean</name> <parameter_list pos:start="170:25" pos:end="170:30">(<parameter pos:start="170:26" pos:end="170:29"><decl pos:start="170:26" pos:end="170:29"><type pos:start="170:26" pos:end="170:29"><name pos:start="170:26" pos:end="170:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="171:1" pos:end="172:1">{<block_content>
</block_content>}</block></function>

<function pos:start="174:1" pos:end="213:1"><type pos:start="174:1" pos:end="174:10"><specifier pos:start="174:1" pos:end="174:6">static</specifier> <name pos:start="174:8" pos:end="174:10">int</name></type> <name pos:start="174:12" pos:end="174:29">us748_start_server</name> <parameter_list pos:start="174:31" pos:end="174:58">(<parameter pos:start="174:32" pos:end="174:48"><decl pos:start="174:32" pos:end="174:48"><type pos:start="174:32" pos:end="174:48"><name pos:start="174:32" pos:end="174:34">int</name></type> <name pos:start="174:36" pos:end="174:48">manual_enroll</name></decl></parameter>, <parameter pos:start="174:51" pos:end="174:57"><decl pos:start="174:51" pos:end="174:57"><type pos:start="174:51" pos:end="174:57"><name pos:start="174:51" pos:end="174:53">int</name></type> <name pos:start="174:55" pos:end="174:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="175:1" pos:end="213:1">{<block_content pos:start="176:5" pos:end="212:14">
    <decl_stmt pos:start="176:5" pos:end="176:15"><decl pos:start="176:5" pos:end="176:14"><type pos:start="176:5" pos:end="176:7"><name pos:start="176:5" pos:end="176:7">int</name></type> <name pos:start="176:9" pos:end="176:10">rv</name> <init pos:start="176:12" pos:end="176:14">= <expr pos:start="176:14" pos:end="176:14"><literal type="number" pos:start="176:14" pos:end="176:14">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="178:5" pos:end="180:7">/*
     * First we start an EST server acting as the CA
     */</comment>
    <expr_stmt pos:start="181:5" pos:end="190:23"><expr pos:start="181:5" pos:end="190:22"><name pos:start="181:5" pos:end="181:6">rv</name> <operator pos:start="181:8" pos:end="181:8">=</operator> <call pos:start="181:10" pos:end="190:22"><name pos:start="181:10" pos:end="181:17">st_start</name><argument_list pos:start="181:18" pos:end="190:22">(<argument pos:start="181:19" pos:end="181:39"><expr pos:start="181:19" pos:end="181:39"><name pos:start="181:19" pos:end="181:39">US748_TCP_SERVER_PORT</name></expr></argument>,
                  <argument pos:start="182:19" pos:end="182:35"><expr pos:start="182:19" pos:end="182:35"><name pos:start="182:19" pos:end="182:35">US748_SERVER_CERT</name></expr></argument>,
                  <argument pos:start="183:19" pos:end="183:34"><expr pos:start="183:19" pos:end="183:34"><name pos:start="183:19" pos:end="183:34">US748_SERVER_KEY</name></expr></argument>,
                  <argument pos:start="184:19" pos:end="184:28"><expr pos:start="184:19" pos:end="184:28"><literal type="string" pos:start="184:19" pos:end="184:28">"estrealm"</literal></expr></argument>,
                  <argument pos:start="185:19" pos:end="185:30"><expr pos:start="185:19" pos:end="185:30"><name pos:start="185:19" pos:end="185:30">US748_CACERT</name></expr></argument>,
                  <argument pos:start="186:19" pos:end="186:36"><expr pos:start="186:19" pos:end="186:36"><name pos:start="186:19" pos:end="186:36">US748_TRUSTED_CERT</name></expr></argument>,
                  <argument pos:start="187:19" pos:end="187:42"><expr pos:start="187:19" pos:end="187:42"><literal type="string" pos:start="187:19" pos:end="187:42">"US748/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="188:19" pos:end="188:31"><expr pos:start="188:19" pos:end="188:31"><name pos:start="188:19" pos:end="188:31">manual_enroll</name></expr></argument>, <comment type="line" pos:start="188:34" pos:end="188:49">// manual enroll</comment>
                  <argument pos:start="189:19" pos:end="189:19"><expr pos:start="189:19" pos:end="189:19"><literal type="number" pos:start="189:19" pos:end="189:19">0</literal></expr></argument>,  <comment type="line" pos:start="189:23" pos:end="189:36">// disable PoP</comment>
                  <argument pos:start="190:19" pos:end="190:21"><expr pos:start="190:19" pos:end="190:21"><name pos:start="190:19" pos:end="190:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="190:25" pos:end="190:41">// ecdhe nid info</comment>
    <expr_stmt pos:start="191:5" pos:end="191:13"><expr pos:start="191:5" pos:end="191:12"><call pos:start="191:5" pos:end="191:12"><name pos:start="191:5" pos:end="191:9">SLEEP</name><argument_list pos:start="191:10" pos:end="191:12">(<argument pos:start="191:11" pos:end="191:11"><expr pos:start="191:11" pos:end="191:11"><literal type="number" pos:start="191:11" pos:end="191:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="192:5" pos:end="193:18"><if pos:start="192:5" pos:end="193:18">if <condition pos:start="192:8" pos:end="192:27">(<expr pos:start="192:9" pos:end="192:26"><name pos:start="192:9" pos:end="192:10">rv</name> <operator pos:start="192:12" pos:end="192:13">!=</operator> <name pos:start="192:15" pos:end="192:26">EST_ERR_NONE</name></expr>)</condition><block type="pseudo" pos:start="193:9" pos:end="193:18"><block_content pos:start="193:9" pos:end="193:18">
        <return pos:start="193:9" pos:end="193:18">return <expr pos:start="193:16" pos:end="193:17"><name pos:start="193:16" pos:end="193:17">rv</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="195:5" pos:end="197:7">/*
     * Next we start an EST proxy acting as an RA.
     */</comment>
    <expr_stmt pos:start="198:5" pos:end="209:29"><expr pos:start="198:5" pos:end="209:28"><name pos:start="198:5" pos:end="198:6">rv</name> <operator pos:start="198:8" pos:end="198:8">=</operator> <call pos:start="198:10" pos:end="209:28"><name pos:start="198:10" pos:end="198:23">st_proxy_start</name><argument_list pos:start="198:24" pos:end="209:28">(<argument pos:start="198:25" pos:end="198:44"><expr pos:start="198:25" pos:end="198:44"><name pos:start="198:25" pos:end="198:44">US748_TCP_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="199:25" pos:end="199:40"><expr pos:start="199:25" pos:end="199:40"><name pos:start="199:25" pos:end="199:40">US748_PROXY_CERT</name></expr></argument>,
                        <argument pos:start="200:25" pos:end="200:39"><expr pos:start="200:25" pos:end="200:39"><name pos:start="200:25" pos:end="200:39">US748_PROXY_KEY</name></expr></argument>,
                        <argument pos:start="201:25" pos:end="201:34"><expr pos:start="201:25" pos:end="201:34"><literal type="string" pos:start="201:25" pos:end="201:34">"estrealm"</literal></expr></argument>,
                        <argument pos:start="202:25" pos:end="202:36"><expr pos:start="202:25" pos:end="202:36"><name pos:start="202:25" pos:end="202:36">US748_CACERT</name></expr></argument>,
                        <argument pos:start="203:25" pos:end="203:42"><expr pos:start="203:25" pos:end="203:42"><name pos:start="203:25" pos:end="203:42">US748_TRUSTED_CERT</name></expr></argument>,
                        <argument pos:start="204:25" pos:end="204:33"><expr pos:start="204:25" pos:end="204:33"><literal type="string" pos:start="204:25" pos:end="204:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="205:25" pos:end="205:32"><expr pos:start="205:25" pos:end="205:32"><literal type="string" pos:start="205:25" pos:end="205:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="206:25" pos:end="206:35"><expr pos:start="206:25" pos:end="206:35"><literal type="string" pos:start="206:25" pos:end="206:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="207:25" pos:end="207:45"><expr pos:start="207:25" pos:end="207:45"><name pos:start="207:25" pos:end="207:45">US748_TCP_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="208:25" pos:end="208:25"><expr pos:start="208:25" pos:end="208:25"><literal type="number" pos:start="208:25" pos:end="208:25">0</literal></expr></argument>,  <comment type="line" pos:start="208:29" pos:end="208:42">// disable PoP</comment>
                        <argument pos:start="209:25" pos:end="209:27"><expr pos:start="209:25" pos:end="209:27"><name pos:start="209:25" pos:end="209:27">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="209:32" pos:end="209:48">// ecdhe nid info</comment>
    <expr_stmt pos:start="210:5" pos:end="210:13"><expr pos:start="210:5" pos:end="210:12"><call pos:start="210:5" pos:end="210:12"><name pos:start="210:5" pos:end="210:9">SLEEP</name><argument_list pos:start="210:10" pos:end="210:12">(<argument pos:start="210:11" pos:end="210:11"><expr pos:start="210:11" pos:end="210:11"><literal type="number" pos:start="210:11" pos:end="210:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="212:5" pos:end="212:14">return <expr pos:start="212:12" pos:end="212:13"><name pos:start="212:12" pos:end="212:13">rv</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="215:1" pos:end="220:1"><type pos:start="215:1" pos:end="215:4"><name pos:start="215:1" pos:end="215:4">void</name></type> <name pos:start="215:6" pos:end="215:22">us748_stop_server</name> <parameter_list pos:start="215:24" pos:end="215:25">()</parameter_list>
<block pos:start="216:1" pos:end="220:1">{<block_content pos:start="217:5" pos:end="219:13">
    <expr_stmt pos:start="217:5" pos:end="217:14"><expr pos:start="217:5" pos:end="217:13"><call pos:start="217:5" pos:end="217:13"><name pos:start="217:5" pos:end="217:11">st_stop</name><argument_list pos:start="217:12" pos:end="217:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="218:5" pos:end="218:20"><expr pos:start="218:5" pos:end="218:19"><call pos:start="218:5" pos:end="218:19"><name pos:start="218:5" pos:end="218:17">st_proxy_stop</name><argument_list pos:start="218:18" pos:end="218:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="219:5" pos:end="219:13"><expr pos:start="219:5" pos:end="219:12"><call pos:start="219:5" pos:end="219:12"><name pos:start="219:5" pos:end="219:9">SLEEP</name><argument_list pos:start="219:10" pos:end="219:12">(<argument pos:start="219:11" pos:end="219:11"><expr pos:start="219:11" pos:end="219:11"><literal type="number" pos:start="219:11" pos:end="219:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="222:1" pos:end="226:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="227:1" pos:end="250:1"><type pos:start="227:1" pos:end="227:10"><specifier pos:start="227:1" pos:end="227:6">static</specifier> <name pos:start="227:8" pos:end="227:10">int</name></type> <name pos:start="227:12" pos:end="227:27">us748_init_suite</name> <parameter_list pos:start="227:29" pos:end="227:34">(<parameter pos:start="227:30" pos:end="227:33"><decl pos:start="227:30" pos:end="227:33"><type pos:start="227:30" pos:end="227:33"><name pos:start="227:30" pos:end="227:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="228:1" pos:end="250:1">{<block_content pos:start="229:5" pos:end="249:14">
    <decl_stmt pos:start="229:5" pos:end="229:11"><decl pos:start="229:5" pos:end="229:10"><type pos:start="229:5" pos:end="229:7"><name pos:start="229:5" pos:end="229:7">int</name></type> <name pos:start="229:9" pos:end="229:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:44"><expr pos:start="231:5" pos:end="231:43"><call pos:start="231:5" pos:end="231:43"><name pos:start="231:5" pos:end="231:19">est_init_logger</name><argument_list pos:start="231:20" pos:end="231:43">(<argument pos:start="231:21" pos:end="231:36"><expr pos:start="231:21" pos:end="231:36"><name pos:start="231:21" pos:end="231:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="231:39" pos:end="231:42"><expr pos:start="231:39" pos:end="231:42"><name pos:start="231:39" pos:end="231:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="233:5" pos:end="235:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="236:5" pos:end="236:60"><expr pos:start="236:5" pos:end="236:59"><name pos:start="236:5" pos:end="236:15">cacerts_len</name> <operator pos:start="236:17" pos:end="236:17">=</operator> <call pos:start="236:19" pos:end="236:59"><name pos:start="236:19" pos:end="236:34">read_binary_file</name><argument_list pos:start="236:35" pos:end="236:59">(<argument pos:start="236:36" pos:end="236:48"><expr pos:start="236:36" pos:end="236:48"><name pos:start="236:36" pos:end="236:48">US748_CACERTS</name></expr></argument>, <argument pos:start="236:51" pos:end="236:58"><expr pos:start="236:51" pos:end="236:58"><operator pos:start="236:51" pos:end="236:51">&amp;</operator><name pos:start="236:52" pos:end="236:58">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="237:5" pos:end="239:5"><if pos:start="237:5" pos:end="239:5">if <condition pos:start="237:8" pos:end="237:25">(<expr pos:start="237:9" pos:end="237:24"><name pos:start="237:9" pos:end="237:19">cacerts_len</name> <operator pos:start="237:21" pos:end="237:22">&lt;=</operator> <literal type="number" pos:start="237:24" pos:end="237:24">0</literal></expr>)</condition> <block pos:start="237:27" pos:end="239:5">{<block_content pos:start="238:9" pos:end="238:17">
        <return pos:start="238:9" pos:end="238:17">return <expr pos:start="238:16" pos:end="238:16"><literal type="number" pos:start="238:16" pos:end="238:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:18"><expr pos:start="241:5" pos:end="241:17"><call pos:start="241:5" pos:end="241:17"><name pos:start="241:5" pos:end="241:15">us748_clean</name><argument_list pos:start="241:16" pos:end="241:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="243:5" pos:end="246:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="247:5" pos:end="247:34"><expr pos:start="247:5" pos:end="247:33"><name pos:start="247:5" pos:end="247:6">rv</name> <operator pos:start="247:8" pos:end="247:8">=</operator> <call pos:start="247:10" pos:end="247:33"><name pos:start="247:10" pos:end="247:27">us748_start_server</name><argument_list pos:start="247:28" pos:end="247:33">(<argument pos:start="247:29" pos:end="247:29"><expr pos:start="247:29" pos:end="247:29"><literal type="number" pos:start="247:29" pos:end="247:29">0</literal></expr></argument>, <argument pos:start="247:32" pos:end="247:32"><expr pos:start="247:32" pos:end="247:32"><literal type="number" pos:start="247:32" pos:end="247:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="249:5" pos:end="249:14">return <expr pos:start="249:12" pos:end="249:13"><name pos:start="249:12" pos:end="249:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="252:1" pos:end="256:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="257:1" pos:end="262:1"><type pos:start="257:1" pos:end="257:10"><specifier pos:start="257:1" pos:end="257:6">static</specifier> <name pos:start="257:8" pos:end="257:10">int</name></type> <name pos:start="257:12" pos:end="257:30">us748_destroy_suite</name> <parameter_list pos:start="257:32" pos:end="257:37">(<parameter pos:start="257:33" pos:end="257:36"><decl pos:start="257:33" pos:end="257:36"><type pos:start="257:33" pos:end="257:36"><name pos:start="257:33" pos:end="257:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="258:1" pos:end="262:1">{<block_content pos:start="259:5" pos:end="261:13">
    <expr_stmt pos:start="259:5" pos:end="259:24"><expr pos:start="259:5" pos:end="259:23"><call pos:start="259:5" pos:end="259:23"><name pos:start="259:5" pos:end="259:21">us748_stop_server</name><argument_list pos:start="259:22" pos:end="259:23">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="260:5" pos:end="260:18"><expr pos:start="260:5" pos:end="260:17"><call pos:start="260:5" pos:end="260:17"><name pos:start="260:5" pos:end="260:8">free</name><argument_list pos:start="260:9" pos:end="260:17">(<argument pos:start="260:10" pos:end="260:16"><expr pos:start="260:10" pos:end="260:16"><name pos:start="260:10" pos:end="260:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="261:5" pos:end="261:13">return <expr pos:start="261:12" pos:end="261:12"><literal type="number" pos:start="261:12" pos:end="261:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="264:1" pos:end="270:3">/*
 * Simple enroll - RSA 2048
 *
 * This test case uses libcurl to test simple
 * enrollment of a 2048 bit RSA CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="271:1" pos:end="286:1"><type pos:start="271:1" pos:end="271:11"><specifier pos:start="271:1" pos:end="271:6">static</specifier> <name pos:start="271:8" pos:end="271:11">void</name></type> <name pos:start="271:13" pos:end="271:23">us748_test1</name> <parameter_list pos:start="271:25" pos:end="271:30">(<parameter pos:start="271:26" pos:end="271:29"><decl pos:start="271:26" pos:end="271:29"><type pos:start="271:26" pos:end="271:29"><name pos:start="271:26" pos:end="271:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="272:1" pos:end="286:1">{<block_content pos:start="273:5" pos:end="285:25">
    <decl_stmt pos:start="273:5" pos:end="273:12"><decl pos:start="273:5" pos:end="273:11"><type pos:start="273:5" pos:end="273:8"><name pos:start="273:5" pos:end="273:8">long</name></type> <name pos:start="273:10" pos:end="273:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="275:5" pos:end="276:5"><expr pos:start="275:5" pos:end="275:15"><name pos:start="275:5" pos:end="275:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="278:5" pos:end="280:72"><expr pos:start="278:5" pos:end="280:71"><name pos:start="278:5" pos:end="278:6">rv</name> <operator pos:start="278:8" pos:end="278:8">=</operator> <call pos:start="278:10" pos:end="280:71"><name pos:start="278:10" pos:end="278:23">curl_http_post</name><argument_list pos:start="278:24" pos:end="280:71">(<argument pos:start="278:25" pos:end="278:43"><expr pos:start="278:25" pos:end="278:43"><name pos:start="278:25" pos:end="278:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="278:46" pos:end="278:60"><expr pos:start="278:46" pos:end="278:60"><name pos:start="278:46" pos:end="278:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="279:5" pos:end="279:24"><expr pos:start="279:5" pos:end="279:24"><name pos:start="279:5" pos:end="279:24">US748_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="280:5" pos:end="280:21"><expr pos:start="280:5" pos:end="280:21"><name pos:start="280:5" pos:end="280:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="280:24" pos:end="280:36"><expr pos:start="280:24" pos:end="280:36"><name pos:start="280:24" pos:end="280:36">US748_CACERTS</name></expr></argument>, <argument pos:start="280:39" pos:end="280:52"><expr pos:start="280:39" pos:end="280:52"><name pos:start="280:39" pos:end="280:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="280:55" pos:end="280:58"><expr pos:start="280:55" pos:end="280:58"><name pos:start="280:55" pos:end="280:58">NULL</name></expr></argument>, <argument pos:start="280:61" pos:end="280:64"><expr pos:start="280:61" pos:end="280:64"><name pos:start="280:61" pos:end="280:64">NULL</name></expr></argument>, <argument pos:start="280:67" pos:end="280:70"><expr pos:start="280:67" pos:end="280:70"><name pos:start="280:67" pos:end="280:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="281:5" pos:end="284:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="285:5" pos:end="285:25"><expr pos:start="285:5" pos:end="285:24"><call pos:start="285:5" pos:end="285:24"><name pos:start="285:5" pos:end="285:13">CU_ASSERT</name><argument_list pos:start="285:14" pos:end="285:24">(<argument pos:start="285:15" pos:end="285:23"><expr pos:start="285:15" pos:end="285:23"><name pos:start="285:15" pos:end="285:16">rv</name> <operator pos:start="285:18" pos:end="285:19">==</operator> <literal type="number" pos:start="285:21" pos:end="285:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="288:1" pos:end="294:3">/*
 * Simple enroll - EC prime 256
 *
 * This test case uses libcurl to test simple
 * enrollment of a 256 bit EC CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="295:1" pos:end="310:1"><type pos:start="295:1" pos:end="295:11"><specifier pos:start="295:1" pos:end="295:6">static</specifier> <name pos:start="295:8" pos:end="295:11">void</name></type> <name pos:start="295:13" pos:end="295:23">us748_test2</name> <parameter_list pos:start="295:25" pos:end="295:30">(<parameter pos:start="295:26" pos:end="295:29"><decl pos:start="295:26" pos:end="295:29"><type pos:start="295:26" pos:end="295:29"><name pos:start="295:26" pos:end="295:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="296:1" pos:end="310:1">{<block_content pos:start="297:5" pos:end="309:25">
    <decl_stmt pos:start="297:5" pos:end="297:12"><decl pos:start="297:5" pos:end="297:11"><type pos:start="297:5" pos:end="297:8"><name pos:start="297:5" pos:end="297:8">long</name></type> <name pos:start="297:10" pos:end="297:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="299:5" pos:end="300:5"><expr pos:start="299:5" pos:end="299:15"><name pos:start="299:5" pos:end="299:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="302:5" pos:end="304:72"><expr pos:start="302:5" pos:end="304:71"><name pos:start="302:5" pos:end="302:6">rv</name> <operator pos:start="302:8" pos:end="302:8">=</operator> <call pos:start="302:10" pos:end="304:71"><name pos:start="302:10" pos:end="302:23">curl_http_post</name><argument_list pos:start="302:24" pos:end="304:71">(<argument pos:start="302:25" pos:end="302:43"><expr pos:start="302:25" pos:end="302:43"><name pos:start="302:25" pos:end="302:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="302:46" pos:end="302:60"><expr pos:start="302:46" pos:end="302:60"><name pos:start="302:46" pos:end="302:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="303:5" pos:end="303:25"><expr pos:start="303:5" pos:end="303:25"><name pos:start="303:5" pos:end="303:25">US748_PKCS10_ECDSA256</name></expr></argument>,
    <argument pos:start="304:5" pos:end="304:21"><expr pos:start="304:5" pos:end="304:21"><name pos:start="304:5" pos:end="304:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="304:24" pos:end="304:36"><expr pos:start="304:24" pos:end="304:36"><name pos:start="304:24" pos:end="304:36">US748_CACERTS</name></expr></argument>, <argument pos:start="304:39" pos:end="304:52"><expr pos:start="304:39" pos:end="304:52"><name pos:start="304:39" pos:end="304:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="304:55" pos:end="304:58"><expr pos:start="304:55" pos:end="304:58"><name pos:start="304:55" pos:end="304:58">NULL</name></expr></argument>, <argument pos:start="304:61" pos:end="304:64"><expr pos:start="304:61" pos:end="304:64"><name pos:start="304:61" pos:end="304:64">NULL</name></expr></argument>, <argument pos:start="304:67" pos:end="304:70"><expr pos:start="304:67" pos:end="304:70"><name pos:start="304:67" pos:end="304:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="305:5" pos:end="308:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="309:5" pos:end="309:25"><expr pos:start="309:5" pos:end="309:24"><call pos:start="309:5" pos:end="309:24"><name pos:start="309:5" pos:end="309:13">CU_ASSERT</name><argument_list pos:start="309:14" pos:end="309:24">(<argument pos:start="309:15" pos:end="309:23"><expr pos:start="309:15" pos:end="309:23"><name pos:start="309:15" pos:end="309:16">rv</name> <operator pos:start="309:18" pos:end="309:19">==</operator> <literal type="number" pos:start="309:21" pos:end="309:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="312:1" pos:end="318:3">/*
 * Simple enroll - DSA prime 1024
 *
 * This test case uses libcurl to test simple
 * enrollment of a 1024 bit DSA CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="319:1" pos:end="334:1"><type pos:start="319:1" pos:end="319:11"><specifier pos:start="319:1" pos:end="319:6">static</specifier> <name pos:start="319:8" pos:end="319:11">void</name></type> <name pos:start="319:13" pos:end="319:23">us748_test3</name> <parameter_list pos:start="319:25" pos:end="319:30">(<parameter pos:start="319:26" pos:end="319:29"><decl pos:start="319:26" pos:end="319:29"><type pos:start="319:26" pos:end="319:29"><name pos:start="319:26" pos:end="319:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="320:1" pos:end="334:1">{<block_content pos:start="321:5" pos:end="333:25">
    <decl_stmt pos:start="321:5" pos:end="321:12"><decl pos:start="321:5" pos:end="321:11"><type pos:start="321:5" pos:end="321:8"><name pos:start="321:5" pos:end="321:8">long</name></type> <name pos:start="321:10" pos:end="321:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="323:5" pos:end="324:5"><expr pos:start="323:5" pos:end="323:15"><name pos:start="323:5" pos:end="323:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="326:5" pos:end="328:72"><expr pos:start="326:5" pos:end="328:71"><name pos:start="326:5" pos:end="326:6">rv</name> <operator pos:start="326:8" pos:end="326:8">=</operator> <call pos:start="326:10" pos:end="328:71"><name pos:start="326:10" pos:end="326:23">curl_http_post</name><argument_list pos:start="326:24" pos:end="328:71">(<argument pos:start="326:25" pos:end="326:43"><expr pos:start="326:25" pos:end="326:43"><name pos:start="326:25" pos:end="326:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="326:46" pos:end="326:60"><expr pos:start="326:46" pos:end="326:60"><name pos:start="326:46" pos:end="326:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="327:5" pos:end="327:24"><expr pos:start="327:5" pos:end="327:24"><name pos:start="327:5" pos:end="327:24">US748_PKCS10_DSA1024</name></expr></argument>,
    <argument pos:start="328:5" pos:end="328:21"><expr pos:start="328:5" pos:end="328:21"><name pos:start="328:5" pos:end="328:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="328:24" pos:end="328:36"><expr pos:start="328:24" pos:end="328:36"><name pos:start="328:24" pos:end="328:36">US748_CACERTS</name></expr></argument>, <argument pos:start="328:39" pos:end="328:52"><expr pos:start="328:39" pos:end="328:52"><name pos:start="328:39" pos:end="328:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="328:55" pos:end="328:58"><expr pos:start="328:55" pos:end="328:58"><name pos:start="328:55" pos:end="328:58">NULL</name></expr></argument>, <argument pos:start="328:61" pos:end="328:64"><expr pos:start="328:61" pos:end="328:64"><name pos:start="328:61" pos:end="328:64">NULL</name></expr></argument>, <argument pos:start="328:67" pos:end="328:70"><expr pos:start="328:67" pos:end="328:70"><name pos:start="328:67" pos:end="328:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="329:5" pos:end="332:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="333:5" pos:end="333:25"><expr pos:start="333:5" pos:end="333:24"><call pos:start="333:5" pos:end="333:24"><name pos:start="333:5" pos:end="333:13">CU_ASSERT</name><argument_list pos:start="333:14" pos:end="333:24">(<argument pos:start="333:15" pos:end="333:23"><expr pos:start="333:15" pos:end="333:23"><name pos:start="333:15" pos:end="333:16">rv</name> <operator pos:start="333:18" pos:end="333:19">==</operator> <literal type="number" pos:start="333:21" pos:end="333:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="336:1" pos:end="342:3">/*
 * Simple enroll - Corrupted PKCS10
 *
 * This test case uses libcurl to test simple
 * enrollment usinga corrupted CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="343:1" pos:end="358:1"><type pos:start="343:1" pos:end="343:11"><specifier pos:start="343:1" pos:end="343:6">static</specifier> <name pos:start="343:8" pos:end="343:11">void</name></type> <name pos:start="343:13" pos:end="343:23">us748_test4</name> <parameter_list pos:start="343:25" pos:end="343:30">(<parameter pos:start="343:26" pos:end="343:29"><decl pos:start="343:26" pos:end="343:29"><type pos:start="343:26" pos:end="343:29"><name pos:start="343:26" pos:end="343:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="344:1" pos:end="358:1">{<block_content pos:start="345:5" pos:end="357:25">
    <decl_stmt pos:start="345:5" pos:end="345:12"><decl pos:start="345:5" pos:end="345:11"><type pos:start="345:5" pos:end="345:8"><name pos:start="345:5" pos:end="345:8">long</name></type> <name pos:start="345:10" pos:end="345:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="347:5" pos:end="348:5"><expr pos:start="347:5" pos:end="347:15"><name pos:start="347:5" pos:end="347:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="350:5" pos:end="352:72"><expr pos:start="350:5" pos:end="352:71"><name pos:start="350:5" pos:end="350:6">rv</name> <operator pos:start="350:8" pos:end="350:8">=</operator> <call pos:start="350:10" pos:end="352:71"><name pos:start="350:10" pos:end="350:23">curl_http_post</name><argument_list pos:start="350:24" pos:end="352:71">(<argument pos:start="350:25" pos:end="350:43"><expr pos:start="350:25" pos:end="350:43"><name pos:start="350:25" pos:end="350:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="350:46" pos:end="350:60"><expr pos:start="350:46" pos:end="350:60"><name pos:start="350:46" pos:end="350:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="351:5" pos:end="351:24"><expr pos:start="351:5" pos:end="351:24"><name pos:start="351:5" pos:end="351:24">US748_PKCS10_CORRUPT</name></expr></argument>,
    <argument pos:start="352:5" pos:end="352:21"><expr pos:start="352:5" pos:end="352:21"><name pos:start="352:5" pos:end="352:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="352:24" pos:end="352:36"><expr pos:start="352:24" pos:end="352:36"><name pos:start="352:24" pos:end="352:36">US748_CACERTS</name></expr></argument>, <argument pos:start="352:39" pos:end="352:52"><expr pos:start="352:39" pos:end="352:52"><name pos:start="352:39" pos:end="352:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="352:55" pos:end="352:58"><expr pos:start="352:55" pos:end="352:58"><name pos:start="352:55" pos:end="352:58">NULL</name></expr></argument>, <argument pos:start="352:61" pos:end="352:64"><expr pos:start="352:61" pos:end="352:64"><name pos:start="352:61" pos:end="352:64">NULL</name></expr></argument>, <argument pos:start="352:67" pos:end="352:70"><expr pos:start="352:67" pos:end="352:70"><name pos:start="352:67" pos:end="352:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="353:5" pos:end="356:7">/*
     * Since the CSR is not valid, the server should
     * respond with a 400.
     */</comment>
    <expr_stmt pos:start="357:5" pos:end="357:25"><expr pos:start="357:5" pos:end="357:24"><call pos:start="357:5" pos:end="357:24"><name pos:start="357:5" pos:end="357:13">CU_ASSERT</name><argument_list pos:start="357:14" pos:end="357:24">(<argument pos:start="357:15" pos:end="357:23"><expr pos:start="357:15" pos:end="357:23"><name pos:start="357:15" pos:end="357:16">rv</name> <operator pos:start="357:18" pos:end="357:19">==</operator> <literal type="number" pos:start="357:21" pos:end="357:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="360:1" pos:end="365:3">/*
 * Simple enroll - manual enrollment
 *
 * This test case verifies the server is
 * sending the appropriate retry-after response.
 */</comment>
<function pos:start="366:1" pos:end="423:1"><type pos:start="366:1" pos:end="366:11"><specifier pos:start="366:1" pos:end="366:6">static</specifier> <name pos:start="366:8" pos:end="366:11">void</name></type> <name pos:start="366:13" pos:end="366:23">us748_test5</name> <parameter_list pos:start="366:25" pos:end="366:30">(<parameter pos:start="366:26" pos:end="366:29"><decl pos:start="366:26" pos:end="366:29"><type pos:start="366:26" pos:end="366:29"><name pos:start="366:26" pos:end="366:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="367:1" pos:end="423:1">{<block_content pos:start="368:5" pos:end="422:29">
    <decl_stmt pos:start="368:5" pos:end="368:12"><decl pos:start="368:5" pos:end="368:11"><type pos:start="368:5" pos:end="368:8"><name pos:start="368:5" pos:end="368:8">long</name></type> <name pos:start="368:10" pos:end="368:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="370:5" pos:end="371:5"><expr pos:start="370:5" pos:end="370:15"><name pos:start="370:5" pos:end="370:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="373:5" pos:end="373:29">/* Stop the EST server */</comment>
    <expr_stmt pos:start="374:5" pos:end="374:24"><expr pos:start="374:5" pos:end="374:23"><call pos:start="374:5" pos:end="374:23"><name pos:start="374:5" pos:end="374:21">us748_stop_server</name><argument_list pos:start="374:22" pos:end="374:23">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="376:5" pos:end="376:59">/* Restart the server with manual enrollment enabled */</comment>
    <expr_stmt pos:start="377:5" pos:end="377:29"><expr pos:start="377:5" pos:end="377:28"><call pos:start="377:5" pos:end="377:28"><name pos:start="377:5" pos:end="377:22">us748_start_server</name><argument_list pos:start="377:23" pos:end="377:28">(<argument pos:start="377:24" pos:end="377:24"><expr pos:start="377:24" pos:end="377:24"><literal type="number" pos:start="377:24" pos:end="377:24">1</literal></expr></argument>, <argument pos:start="377:27" pos:end="377:27"><expr pos:start="377:27" pos:end="377:27"><literal type="number" pos:start="377:27" pos:end="377:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:40"><expr pos:start="379:5" pos:end="379:39"><name pos:start="379:5" pos:end="379:11">outfile</name> <operator pos:start="379:13" pos:end="379:13">=</operator> <call pos:start="379:15" pos:end="379:39"><name pos:start="379:15" pos:end="379:19">fopen</name><argument_list pos:start="379:20" pos:end="379:39">(<argument pos:start="379:21" pos:end="379:33"><expr pos:start="379:21" pos:end="379:33"><name pos:start="379:21" pos:end="379:33">test5_outfile</name></expr></argument>, <argument pos:start="379:36" pos:end="379:38"><expr pos:start="379:36" pos:end="379:38"><literal type="string" pos:start="379:36" pos:end="379:38">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="380:5" pos:end="382:79"><expr pos:start="380:5" pos:end="382:78"><name pos:start="380:5" pos:end="380:6">rv</name> <operator pos:start="380:8" pos:end="380:8">=</operator> <call pos:start="380:10" pos:end="382:78"><name pos:start="380:10" pos:end="380:23">curl_http_post</name><argument_list pos:start="380:24" pos:end="382:78">(<argument pos:start="380:25" pos:end="380:43"><expr pos:start="380:25" pos:end="380:43"><name pos:start="380:25" pos:end="380:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="380:46" pos:end="380:60"><expr pos:start="380:46" pos:end="380:60"><name pos:start="380:46" pos:end="380:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="381:5" pos:end="381:24"><expr pos:start="381:5" pos:end="381:24"><name pos:start="381:5" pos:end="381:24">US748_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="382:5" pos:end="382:21"><expr pos:start="382:5" pos:end="382:21"><name pos:start="382:5" pos:end="382:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="382:24" pos:end="382:36"><expr pos:start="382:24" pos:end="382:36"><name pos:start="382:24" pos:end="382:36">US748_CACERTS</name></expr></argument>, <argument pos:start="382:39" pos:end="382:52"><expr pos:start="382:39" pos:end="382:52"><name pos:start="382:39" pos:end="382:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="382:55" pos:end="382:58"><expr pos:start="382:55" pos:end="382:58"><name pos:start="382:55" pos:end="382:58">NULL</name></expr></argument>, <argument pos:start="382:61" pos:end="382:64"><expr pos:start="382:61" pos:end="382:64"><name pos:start="382:61" pos:end="382:64">NULL</name></expr></argument>, <argument pos:start="382:67" pos:end="382:77"><expr pos:start="382:67" pos:end="382:77"><operator pos:start="382:67" pos:end="382:67">&amp;</operator><name pos:start="382:68" pos:end="382:77">write_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="383:5" pos:end="383:20"><expr pos:start="383:5" pos:end="383:19"><call pos:start="383:5" pos:end="383:19"><name pos:start="383:5" pos:end="383:10">fclose</name><argument_list pos:start="383:11" pos:end="383:19">(<argument pos:start="383:12" pos:end="383:18"><expr pos:start="383:12" pos:end="383:18"><name pos:start="383:12" pos:end="383:18">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="385:5" pos:end="388:7">/*
     * Since the server hasn't seen this CSR in the past,
     * it should respond with a retry-after 202 response.
     */</comment>
    <expr_stmt pos:start="389:5" pos:end="389:25"><expr pos:start="389:5" pos:end="389:24"><call pos:start="389:5" pos:end="389:24"><name pos:start="389:5" pos:end="389:13">CU_ASSERT</name><argument_list pos:start="389:14" pos:end="389:24">(<argument pos:start="389:15" pos:end="389:23"><expr pos:start="389:15" pos:end="389:23"><name pos:start="389:15" pos:end="389:16">rv</name> <operator pos:start="389:18" pos:end="389:19">==</operator> <literal type="number" pos:start="389:21" pos:end="389:23">202</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="391:5" pos:end="397:7">/*
     * Verify the retry-after value
     
     sprintf(cmd, "grep Retry-After %s | grep %d", test5_outfile,
     US748_RETRY_INTERVAL);
     rv = system(cmd);
     */</comment>
    <expr_stmt pos:start="398:5" pos:end="398:50"><expr pos:start="398:5" pos:end="398:49"><name pos:start="398:5" pos:end="398:6">rv</name> <operator pos:start="398:8" pos:end="398:8">=</operator> <call pos:start="398:10" pos:end="398:49"><name pos:start="398:10" pos:end="398:13">grep</name><argument_list pos:start="398:14" pos:end="398:49">(<argument pos:start="398:15" pos:end="398:27"><expr pos:start="398:15" pos:end="398:27"><name pos:start="398:15" pos:end="398:27">test5_outfile</name></expr></argument>, <argument pos:start="398:30" pos:end="398:48"><expr pos:start="398:30" pos:end="398:48"><literal type="string" pos:start="398:30" pos:end="398:48">"Retry-After: 3600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="399:5" pos:end="399:23"><expr pos:start="399:5" pos:end="399:22"><call pos:start="399:5" pos:end="399:22"><name pos:start="399:5" pos:end="399:13">CU_ASSERT</name><argument_list pos:start="399:14" pos:end="399:22">(<argument pos:start="399:15" pos:end="399:21"><expr pos:start="399:15" pos:end="399:21"><name pos:start="399:15" pos:end="399:16">rv</name> <operator pos:start="399:18" pos:end="399:19">==</operator> <literal type="number" pos:start="399:21" pos:end="399:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="401:5" pos:end="405:7">/*
     * We will avoid waiting the full retry period since we're
     * only simulating manual enrollment.  Wait a second and then
     * try to enroll the cert again.
     */</comment>
    <expr_stmt pos:start="406:5" pos:end="406:13"><expr pos:start="406:5" pos:end="406:12"><call pos:start="406:5" pos:end="406:12"><name pos:start="406:5" pos:end="406:9">SLEEP</name><argument_list pos:start="406:10" pos:end="406:12">(<argument pos:start="406:11" pos:end="406:11"><expr pos:start="406:11" pos:end="406:11"><literal type="number" pos:start="406:11" pos:end="406:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="407:5" pos:end="409:72"><expr pos:start="407:5" pos:end="409:71"><name pos:start="407:5" pos:end="407:6">rv</name> <operator pos:start="407:8" pos:end="407:8">=</operator> <call pos:start="407:10" pos:end="409:71"><name pos:start="407:10" pos:end="407:23">curl_http_post</name><argument_list pos:start="407:24" pos:end="409:71">(<argument pos:start="407:25" pos:end="407:43"><expr pos:start="407:25" pos:end="407:43"><name pos:start="407:25" pos:end="407:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="407:46" pos:end="407:60"><expr pos:start="407:46" pos:end="407:60"><name pos:start="407:46" pos:end="407:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="408:5" pos:end="408:24"><expr pos:start="408:5" pos:end="408:24"><name pos:start="408:5" pos:end="408:24">US748_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="409:5" pos:end="409:21"><expr pos:start="409:5" pos:end="409:21"><name pos:start="409:5" pos:end="409:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="409:24" pos:end="409:36"><expr pos:start="409:24" pos:end="409:36"><name pos:start="409:24" pos:end="409:36">US748_CACERTS</name></expr></argument>, <argument pos:start="409:39" pos:end="409:52"><expr pos:start="409:39" pos:end="409:52"><name pos:start="409:39" pos:end="409:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="409:55" pos:end="409:58"><expr pos:start="409:55" pos:end="409:58"><name pos:start="409:55" pos:end="409:58">NULL</name></expr></argument>, <argument pos:start="409:61" pos:end="409:64"><expr pos:start="409:61" pos:end="409:64"><name pos:start="409:61" pos:end="409:64">NULL</name></expr></argument>, <argument pos:start="409:67" pos:end="409:70"><expr pos:start="409:67" pos:end="409:70"><name pos:start="409:67" pos:end="409:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="411:5" pos:end="415:7">/*
     * This enrollment request should succeed this time
     * Our simulated manual enrollment will automatically
     * enroll on the second attempt.
     */</comment>
    <expr_stmt pos:start="416:5" pos:end="416:25"><expr pos:start="416:5" pos:end="416:24"><call pos:start="416:5" pos:end="416:24"><name pos:start="416:5" pos:end="416:13">CU_ASSERT</name><argument_list pos:start="416:14" pos:end="416:24">(<argument pos:start="416:15" pos:end="416:23"><expr pos:start="416:15" pos:end="416:23"><name pos:start="416:15" pos:end="416:16">rv</name> <operator pos:start="416:18" pos:end="416:19">==</operator> <literal type="number" pos:start="416:21" pos:end="416:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="418:5" pos:end="418:29">/* Stop the EST server */</comment>
    <expr_stmt pos:start="419:5" pos:end="419:24"><expr pos:start="419:5" pos:end="419:23"><call pos:start="419:5" pos:end="419:23"><name pos:start="419:5" pos:end="419:21">us748_stop_server</name><argument_list pos:start="419:22" pos:end="419:23">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="421:5" pos:end="421:60">/* Restart the server with manual enrollment disabled */</comment>
    <expr_stmt pos:start="422:5" pos:end="422:29"><expr pos:start="422:5" pos:end="422:28"><call pos:start="422:5" pos:end="422:28"><name pos:start="422:5" pos:end="422:22">us748_start_server</name><argument_list pos:start="422:23" pos:end="422:28">(<argument pos:start="422:24" pos:end="422:24"><expr pos:start="422:24" pos:end="422:24"><literal type="number" pos:start="422:24" pos:end="422:24">0</literal></expr></argument>, <argument pos:start="422:27" pos:end="422:27"><expr pos:start="422:27" pos:end="422:27"><literal type="number" pos:start="422:27" pos:end="422:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="425:1" pos:end="431:3">/*
 * Simple enroll - PoP check fails with curl
 *
 * This test case verifies the server is
 * verifying the PoP from the client CSR.  Since curl does not
 * set the PoP, the EST enrollment should fail.
 */</comment>
<function pos:start="432:1" pos:end="455:1"><type pos:start="432:1" pos:end="432:11"><specifier pos:start="432:1" pos:end="432:6">static</specifier> <name pos:start="432:8" pos:end="432:11">void</name></type> <name pos:start="432:13" pos:end="432:23">us748_test6</name> <parameter_list pos:start="432:25" pos:end="432:30">(<parameter pos:start="432:26" pos:end="432:29"><decl pos:start="432:26" pos:end="432:29"><type pos:start="432:26" pos:end="432:29"><name pos:start="432:26" pos:end="432:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="433:1" pos:end="455:1">{<block_content pos:start="434:5" pos:end="454:21">
    <decl_stmt pos:start="434:5" pos:end="434:12"><decl pos:start="434:5" pos:end="434:11"><type pos:start="434:5" pos:end="434:8"><name pos:start="434:5" pos:end="434:8">long</name></type> <name pos:start="434:10" pos:end="434:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="436:5" pos:end="437:5"><expr pos:start="436:5" pos:end="436:15"><name pos:start="436:5" pos:end="436:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:20"><expr pos:start="439:5" pos:end="439:19"><call pos:start="439:5" pos:end="439:19"><name pos:start="439:5" pos:end="439:17">st_enable_pop</name><argument_list pos:start="439:18" pos:end="439:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="441:5" pos:end="444:7">/*
     * Send a valid enroll request using curl.  Curl does not
     * include the PoP
     */</comment>
    <expr_stmt pos:start="445:5" pos:end="447:72"><expr pos:start="445:5" pos:end="447:71"><name pos:start="445:5" pos:end="445:6">rv</name> <operator pos:start="445:8" pos:end="445:8">=</operator> <call pos:start="445:10" pos:end="447:71"><name pos:start="445:10" pos:end="445:23">curl_http_post</name><argument_list pos:start="445:24" pos:end="447:71">(<argument pos:start="445:25" pos:end="445:43"><expr pos:start="445:25" pos:end="445:43"><name pos:start="445:25" pos:end="445:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="445:46" pos:end="445:60"><expr pos:start="445:46" pos:end="445:60"><name pos:start="445:46" pos:end="445:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="446:5" pos:end="446:24"><expr pos:start="446:5" pos:end="446:24"><name pos:start="446:5" pos:end="446:24">US748_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="447:5" pos:end="447:21"><expr pos:start="447:5" pos:end="447:21"><name pos:start="447:5" pos:end="447:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="447:24" pos:end="447:36"><expr pos:start="447:24" pos:end="447:36"><name pos:start="447:24" pos:end="447:36">US748_CACERTS</name></expr></argument>, <argument pos:start="447:39" pos:end="447:52"><expr pos:start="447:39" pos:end="447:52"><name pos:start="447:39" pos:end="447:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="447:55" pos:end="447:58"><expr pos:start="447:55" pos:end="447:58"><name pos:start="447:55" pos:end="447:58">NULL</name></expr></argument>, <argument pos:start="447:61" pos:end="447:64"><expr pos:start="447:61" pos:end="447:64"><name pos:start="447:61" pos:end="447:64">NULL</name></expr></argument>, <argument pos:start="447:67" pos:end="447:70"><expr pos:start="447:67" pos:end="447:70"><name pos:start="447:67" pos:end="447:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="449:5" pos:end="451:7">/*
     * The server should respond with a failure code
     */</comment>
    <expr_stmt pos:start="452:5" pos:end="452:25"><expr pos:start="452:5" pos:end="452:24"><call pos:start="452:5" pos:end="452:24"><name pos:start="452:5" pos:end="452:13">CU_ASSERT</name><argument_list pos:start="452:14" pos:end="452:24">(<argument pos:start="452:15" pos:end="452:23"><expr pos:start="452:15" pos:end="452:23"><name pos:start="452:15" pos:end="452:16">rv</name> <operator pos:start="452:18" pos:end="452:19">==</operator> <literal type="number" pos:start="452:21" pos:end="452:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="454:5" pos:end="454:21"><expr pos:start="454:5" pos:end="454:20"><call pos:start="454:5" pos:end="454:20"><name pos:start="454:5" pos:end="454:18">st_disable_pop</name><argument_list pos:start="454:19" pos:end="454:20">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="457:1" pos:end="463:3">/*
 * Simple enroll - PoP check succeeds with estclient
 *
 * This test case verifies the proxy is
 * verifying the PoP from the client CSR.  We use
 * estclient since it supports the PoP.
 */</comment>
<function pos:start="464:1" pos:end="554:0"><type pos:start="464:1" pos:end="464:11"><specifier pos:start="464:1" pos:end="464:6">static</specifier> <name pos:start="464:8" pos:end="464:11">void</name></type> <name pos:start="464:13" pos:end="464:23">us748_test7</name> <parameter_list pos:start="464:25" pos:end="464:30">(<parameter pos:start="464:26" pos:end="464:29"><decl pos:start="464:26" pos:end="464:29"><type pos:start="464:26" pos:end="464:29"><name pos:start="464:26" pos:end="464:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="465:1" pos:end="554:0">{<block_content pos:start="466:5" pos:end="535:21">
    <decl_stmt pos:start="466:5" pos:end="466:12"><decl pos:start="466:5" pos:end="466:11"><type pos:start="466:5" pos:end="466:8"><name pos:start="466:5" pos:end="466:8">long</name></type> <name pos:start="466:10" pos:end="466:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="467:5" pos:end="467:19"><decl pos:start="467:5" pos:end="467:18"><type pos:start="467:5" pos:end="467:13"><name pos:start="467:5" pos:end="467:11">EST_CTX</name> <modifier pos:start="467:13" pos:end="467:13">*</modifier></type><name pos:start="467:14" pos:end="467:18">c_ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="468:5" pos:end="468:23"><decl pos:start="468:5" pos:end="468:22"><type pos:start="468:5" pos:end="468:14"><name pos:start="468:5" pos:end="468:12">EVP_PKEY</name> <modifier pos:start="468:14" pos:end="468:14">*</modifier></type><name pos:start="468:15" pos:end="468:22">new_pkey</name></decl>;</decl_stmt>
    <decl_stmt pos:start="469:5" pos:end="469:25"><decl pos:start="469:5" pos:end="469:24"><type pos:start="469:5" pos:end="469:19"><name pos:start="469:5" pos:end="469:12">unsigned</name> <name pos:start="469:14" pos:end="469:17">char</name> <modifier pos:start="469:19" pos:end="469:19">*</modifier></type><name pos:start="469:20" pos:end="469:24">pkcs7</name></decl>;</decl_stmt>
    <decl_stmt pos:start="470:5" pos:end="470:18"><decl pos:start="470:5" pos:end="470:17"><type pos:start="470:5" pos:end="470:7"><name pos:start="470:5" pos:end="470:7">int</name></type> <name pos:start="470:9" pos:end="470:17">pkcs7_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="471:5" pos:end="471:29"><decl pos:start="471:5" pos:end="471:28"><type pos:start="471:5" pos:end="471:19"><name pos:start="471:5" pos:end="471:12">unsigned</name> <name pos:start="471:14" pos:end="471:17">char</name> <modifier pos:start="471:19" pos:end="471:19">*</modifier></type><name pos:start="471:20" pos:end="471:28">attr_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="472:5" pos:end="472:17"><decl pos:start="472:5" pos:end="472:16"><type pos:start="472:5" pos:end="472:7"><name pos:start="472:5" pos:end="472:7">int</name></type> <name pos:start="472:9" pos:end="472:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="474:5" pos:end="475:5"><expr pos:start="474:5" pos:end="474:15"><name pos:start="474:5" pos:end="474:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="477:5" pos:end="479:7">/*
     * This test case requires PoP to be enabled
     */</comment>
    <expr_stmt pos:start="480:5" pos:end="480:20"><expr pos:start="480:5" pos:end="480:19"><call pos:start="480:5" pos:end="480:19"><name pos:start="480:5" pos:end="480:17">st_enable_pop</name><argument_list pos:start="480:18" pos:end="480:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="482:5" pos:end="484:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="485:5" pos:end="486:35"><expr pos:start="485:5" pos:end="486:34"><name pos:start="485:5" pos:end="485:9">c_ctx</name> <operator pos:start="485:11" pos:end="485:11">=</operator> <call pos:start="485:13" pos:end="486:34"><name pos:start="485:13" pos:end="485:27">est_client_init</name><argument_list pos:start="485:28" pos:end="486:34">(<argument pos:start="485:29" pos:end="485:35"><expr pos:start="485:29" pos:end="485:35"><name pos:start="485:29" pos:end="485:35">cacerts</name></expr></argument>, <argument pos:start="485:38" pos:end="485:48"><expr pos:start="485:38" pos:end="485:48"><name pos:start="485:38" pos:end="485:48">cacerts_len</name></expr></argument>, <argument pos:start="485:51" pos:end="485:69"><expr pos:start="485:51" pos:end="485:69"><name pos:start="485:51" pos:end="485:69">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="486:9" pos:end="486:33"><expr pos:start="486:9" pos:end="486:33"><name pos:start="486:9" pos:end="486:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="487:5" pos:end="487:29"><expr pos:start="487:5" pos:end="487:28"><call pos:start="487:5" pos:end="487:28"><name pos:start="487:5" pos:end="487:13">CU_ASSERT</name><argument_list pos:start="487:14" pos:end="487:28">(<argument pos:start="487:15" pos:end="487:27"><expr pos:start="487:15" pos:end="487:27"><name pos:start="487:15" pos:end="487:19">c_ctx</name> <operator pos:start="487:21" pos:end="487:22">!=</operator> <name pos:start="487:24" pos:end="487:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="488:5" pos:end="490:5"><if pos:start="488:5" pos:end="490:5">if <condition pos:start="488:8" pos:end="488:15">(<expr pos:start="488:9" pos:end="488:14"><operator pos:start="488:9" pos:end="488:9">!</operator><name pos:start="488:10" pos:end="488:14">c_ctx</name></expr>)</condition> <block pos:start="488:17" pos:end="490:5">{<block_content pos:start="489:9" pos:end="489:15">
        <return pos:start="489:9" pos:end="489:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="492:5" pos:end="495:7">/*
     * Specify user ID and password since the server is running
     * in Basic Authentication mode.
     */</comment>
    <expr_stmt pos:start="496:5" pos:end="496:69"><expr pos:start="496:5" pos:end="496:68"><name pos:start="496:5" pos:end="496:6">rv</name> <operator pos:start="496:8" pos:end="496:8">=</operator> <call pos:start="496:10" pos:end="496:68"><name pos:start="496:10" pos:end="496:28">est_client_set_auth</name><argument_list pos:start="496:29" pos:end="496:68">(<argument pos:start="496:30" pos:end="496:34"><expr pos:start="496:30" pos:end="496:34"><name pos:start="496:30" pos:end="496:34">c_ctx</name></expr></argument>, <argument pos:start="496:37" pos:end="496:45"><expr pos:start="496:37" pos:end="496:45"><literal type="string" pos:start="496:37" pos:end="496:45">"estuser"</literal></expr></argument>, <argument pos:start="496:48" pos:end="496:55"><expr pos:start="496:48" pos:end="496:55"><literal type="string" pos:start="496:48" pos:end="496:55">"estpwd"</literal></expr></argument>, <argument pos:start="496:58" pos:end="496:61"><expr pos:start="496:58" pos:end="496:61"><name pos:start="496:58" pos:end="496:61">NULL</name></expr></argument>, <argument pos:start="496:64" pos:end="496:67"><expr pos:start="496:64" pos:end="496:67"><name pos:start="496:64" pos:end="496:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="497:5" pos:end="497:34"><expr pos:start="497:5" pos:end="497:33"><call pos:start="497:5" pos:end="497:33"><name pos:start="497:5" pos:end="497:13">CU_ASSERT</name><argument_list pos:start="497:14" pos:end="497:33">(<argument pos:start="497:15" pos:end="497:32"><expr pos:start="497:15" pos:end="497:32"><name pos:start="497:15" pos:end="497:16">rv</name> <operator pos:start="497:18" pos:end="497:19">==</operator> <name pos:start="497:21" pos:end="497:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="498:5" pos:end="498:74"><expr pos:start="498:5" pos:end="498:73"><call pos:start="498:5" pos:end="498:73"><name pos:start="498:5" pos:end="498:25">est_client_set_server</name><argument_list pos:start="498:26" pos:end="498:73">(<argument pos:start="498:27" pos:end="498:31"><expr pos:start="498:27" pos:end="498:31"><name pos:start="498:27" pos:end="498:31">c_ctx</name></expr></argument>, <argument pos:start="498:34" pos:end="498:44"><expr pos:start="498:34" pos:end="498:44"><literal type="string" pos:start="498:34" pos:end="498:44">"127.0.0.1"</literal></expr></argument>, <argument pos:start="498:47" pos:end="498:66"><expr pos:start="498:47" pos:end="498:66"><name pos:start="498:47" pos:end="498:66">US748_TCP_PROXY_PORT</name></expr></argument>, <argument pos:start="498:69" pos:end="498:72"><expr pos:start="498:69" pos:end="498:72"><name pos:start="498:69" pos:end="498:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="500:5" pos:end="502:7">/*
     * get a keypair to be used in the enroll.
     */</comment>
    <expr_stmt pos:start="503:5" pos:end="503:38"><expr pos:start="503:5" pos:end="503:37"><name pos:start="503:5" pos:end="503:12">new_pkey</name> <operator pos:start="503:14" pos:end="503:14">=</operator> <call pos:start="503:16" pos:end="503:37"><name pos:start="503:16" pos:end="503:35">generate_private_key</name><argument_list pos:start="503:36" pos:end="503:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="505:5" pos:end="505:63"><expr pos:start="505:5" pos:end="505:62"><name pos:start="505:5" pos:end="505:6">rv</name> <operator pos:start="505:8" pos:end="505:8">=</operator> <call pos:start="505:10" pos:end="505:62"><name pos:start="505:10" pos:end="505:32">est_client_get_csrattrs</name><argument_list pos:start="505:33" pos:end="505:62">(<argument pos:start="505:34" pos:end="505:38"><expr pos:start="505:34" pos:end="505:38"><name pos:start="505:34" pos:end="505:38">c_ctx</name></expr></argument>, <argument pos:start="505:41" pos:end="505:50"><expr pos:start="505:41" pos:end="505:50"><operator pos:start="505:41" pos:end="505:41">&amp;</operator><name pos:start="505:42" pos:end="505:50">attr_data</name></expr></argument>, <argument pos:start="505:53" pos:end="505:61"><expr pos:start="505:53" pos:end="505:61"><operator pos:start="505:53" pos:end="505:53">&amp;</operator><name pos:start="505:54" pos:end="505:61">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="506:5" pos:end="506:34"><expr pos:start="506:5" pos:end="506:33"><call pos:start="506:5" pos:end="506:33"><name pos:start="506:5" pos:end="506:13">CU_ASSERT</name><argument_list pos:start="506:14" pos:end="506:33">(<argument pos:start="506:15" pos:end="506:32"><expr pos:start="506:15" pos:end="506:32"><name pos:start="506:15" pos:end="506:16">rv</name> <operator pos:start="506:18" pos:end="506:19">==</operator> <name pos:start="506:21" pos:end="506:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="508:5" pos:end="510:7">/*
     * Attempt to enroll a CSR
     */</comment>
    <expr_stmt pos:start="511:5" pos:end="511:74"><expr pos:start="511:5" pos:end="511:73"><name pos:start="511:5" pos:end="511:6">rv</name> <operator pos:start="511:8" pos:end="511:8">=</operator> <call pos:start="511:10" pos:end="511:73"><name pos:start="511:10" pos:end="511:26">est_client_enroll</name><argument_list pos:start="511:27" pos:end="511:73">(<argument pos:start="511:28" pos:end="511:32"><expr pos:start="511:28" pos:end="511:32"><name pos:start="511:28" pos:end="511:32">c_ctx</name></expr></argument>, <argument pos:start="511:35" pos:end="511:50"><expr pos:start="511:35" pos:end="511:50"><literal type="string" pos:start="511:35" pos:end="511:50">"US748-test7 CN"</literal></expr></argument>, <argument pos:start="511:53" pos:end="511:62"><expr pos:start="511:53" pos:end="511:62"><operator pos:start="511:53" pos:end="511:53">&amp;</operator><name pos:start="511:54" pos:end="511:62">pkcs7_len</name></expr></argument>, <argument pos:start="511:65" pos:end="511:72"><expr pos:start="511:65" pos:end="511:72"><name pos:start="511:65" pos:end="511:72">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="512:5" pos:end="512:34"><expr pos:start="512:5" pos:end="512:33"><call pos:start="512:5" pos:end="512:33"><name pos:start="512:5" pos:end="512:13">CU_ASSERT</name><argument_list pos:start="512:14" pos:end="512:33">(<argument pos:start="512:15" pos:end="512:32"><expr pos:start="512:15" pos:end="512:32"><name pos:start="512:15" pos:end="512:16">rv</name> <operator pos:start="512:18" pos:end="512:19">==</operator> <name pos:start="512:21" pos:end="512:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="514:5" pos:end="517:7">/*
     * Client library has obtained the new client certificate.
     * Now retrieve it from the library.
     */</comment>
    <expr_stmt pos:start="518:5" pos:end="518:30"><expr pos:start="518:5" pos:end="518:29"><name pos:start="518:5" pos:end="518:9">pkcs7</name> <operator pos:start="518:11" pos:end="518:11">=</operator> <call pos:start="518:13" pos:end="518:29"><name pos:start="518:13" pos:end="518:18">malloc</name><argument_list pos:start="518:19" pos:end="518:29">(<argument pos:start="518:20" pos:end="518:28"><expr pos:start="518:20" pos:end="518:28"><name pos:start="518:20" pos:end="518:28">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="519:5" pos:end="521:5"><if pos:start="519:5" pos:end="521:5">if <condition pos:start="519:8" pos:end="519:15">(<expr pos:start="519:9" pos:end="519:14"><operator pos:start="519:9" pos:end="519:9">!</operator><name pos:start="519:10" pos:end="519:14">pkcs7</name></expr>)</condition> <block pos:start="519:17" pos:end="521:5">{<block_content pos:start="520:9" pos:end="520:15">
        <return pos:start="520:9" pos:end="520:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="522:5" pos:end="522:53"><expr pos:start="522:5" pos:end="522:52"><name pos:start="522:5" pos:end="522:6">rv</name> <operator pos:start="522:8" pos:end="522:8">=</operator> <call pos:start="522:10" pos:end="522:52"><name pos:start="522:10" pos:end="522:38">est_client_copy_enrolled_cert</name><argument_list pos:start="522:39" pos:end="522:52">(<argument pos:start="522:40" pos:end="522:44"><expr pos:start="522:40" pos:end="522:44"><name pos:start="522:40" pos:end="522:44">c_ctx</name></expr></argument>, <argument pos:start="522:47" pos:end="522:51"><expr pos:start="522:47" pos:end="522:51"><name pos:start="522:47" pos:end="522:51">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="523:5" pos:end="523:34"><expr pos:start="523:5" pos:end="523:33"><call pos:start="523:5" pos:end="523:33"><name pos:start="523:5" pos:end="523:13">CU_ASSERT</name><argument_list pos:start="523:14" pos:end="523:33">(<argument pos:start="523:15" pos:end="523:32"><expr pos:start="523:15" pos:end="523:32"><name pos:start="523:15" pos:end="523:16">rv</name> <operator pos:start="523:18" pos:end="523:19">==</operator> <name pos:start="523:21" pos:end="523:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="525:5" pos:end="527:7">/*
     * Clean up
     */</comment>
    <expr_stmt pos:start="528:5" pos:end="528:23"><expr pos:start="528:5" pos:end="528:22"><call pos:start="528:5" pos:end="528:22"><name pos:start="528:5" pos:end="528:15">est_destroy</name><argument_list pos:start="528:16" pos:end="528:22">(<argument pos:start="528:17" pos:end="528:21"><expr pos:start="528:17" pos:end="528:21"><name pos:start="528:17" pos:end="528:21">c_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="529:5" pos:end="529:28"><expr pos:start="529:5" pos:end="529:27"><call pos:start="529:5" pos:end="529:27"><name pos:start="529:5" pos:end="529:17">EVP_PKEY_free</name><argument_list pos:start="529:18" pos:end="529:27">(<argument pos:start="529:19" pos:end="529:26"><expr pos:start="529:19" pos:end="529:26"><name pos:start="529:19" pos:end="529:26">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="530:5" pos:end="530:16"><expr pos:start="530:5" pos:end="530:15"><call pos:start="530:5" pos:end="530:15"><name pos:start="530:5" pos:end="530:8">free</name><argument_list pos:start="530:9" pos:end="530:15">(<argument pos:start="530:10" pos:end="530:14"><expr pos:start="530:10" pos:end="530:14"><name pos:start="530:10" pos:end="530:14">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="532:5" pos:end="534:7">/*
     * Disable PoP for future test cases
     */</comment>
    <expr_stmt pos:start="535:5" pos:end="535:21"><expr pos:start="535:5" pos:end="535:20"><call pos:start="535:5" pos:end="535:20"><name pos:start="535:5" pos:end="535:18">st_disable_pop</name><argument_list pos:start="535:19" pos:end="535:20">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="538:1" pos:end="549:3">/*
 * Simple enroll - PoP is disabled, the CSR contains a
 *                 valid PoP.
 *
 * This test case ensures the server can handle the
 * scenario where the CSR includes a valid PoP even when
 * the server didn't request it.  We have to use
 * CiscoEST as the client to generate a CSR containing
 * a valid PoP.  There's no way to include a valid PoP
 * using Curl since the TLS channel binding information
 * is not known in advance.
 */</comment>
<comment type="line" pos:start="550:1" pos:end="550:62">//The following include should never be used by an application</comment>
<comment type="line" pos:start="551:1" pos:end="551:55">//but we use it here to hack the EST_CTX values mid-way</comment>
<comment type="line" pos:start="552:1" pos:end="552:19">//through this test</comment>
<cpp:include pos:start="553:1" pos:end="553:35">#<cpp:directive pos:start="553:2" pos:end="553:8">include</cpp:directive> <cpp:file pos:start="553:10" pos:end="553:35">"../../src/est/est_locl.h"</cpp:file></cpp:include>
<function pos:start="554:1" pos:end="616:1"><type pos:start="554:1" pos:end="554:11"><specifier pos:start="554:1" pos:end="554:6">static</specifier> <name pos:start="554:8" pos:end="554:11">void</name></type> <name pos:start="554:13" pos:end="554:23">us748_test9</name> <parameter_list pos:start="554:25" pos:end="554:30">(<parameter pos:start="554:26" pos:end="554:29"><decl pos:start="554:26" pos:end="554:29"><type pos:start="554:26" pos:end="554:29"><name pos:start="554:26" pos:end="554:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="555:1" pos:end="616:1">{<block_content pos:start="556:5" pos:end="615:21">
    <decl_stmt pos:start="556:5" pos:end="556:17"><decl pos:start="556:5" pos:end="556:16"><type pos:start="556:5" pos:end="556:13"><name pos:start="556:5" pos:end="556:11">EST_CTX</name> <modifier pos:start="556:13" pos:end="556:13">*</modifier></type><name pos:start="556:14" pos:end="556:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="557:5" pos:end="557:11"><decl pos:start="557:5" pos:end="557:10"><type pos:start="557:5" pos:end="557:7"><name pos:start="557:5" pos:end="557:7">int</name></type> <name pos:start="557:9" pos:end="557:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="558:5" pos:end="558:27"><decl pos:start="558:5" pos:end="558:26"><type pos:start="558:5" pos:end="558:19"><name pos:start="558:5" pos:end="558:12">unsigned</name> <name pos:start="558:14" pos:end="558:17">char</name> <modifier pos:start="558:19" pos:end="558:19">*</modifier></type><name pos:start="558:20" pos:end="558:26">cacerts</name></decl>;</decl_stmt>
    <decl_stmt pos:start="559:5" pos:end="559:19"><decl pos:start="559:5" pos:end="559:18"><type pos:start="559:5" pos:end="559:7"><name pos:start="559:5" pos:end="559:7">int</name></type> <name pos:start="559:9" pos:end="559:14">caclen</name> <init pos:start="559:16" pos:end="559:18">= <expr pos:start="559:18" pos:end="559:18"><literal type="number" pos:start="559:18" pos:end="559:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="560:5" pos:end="560:23"><decl pos:start="560:5" pos:end="560:22"><type pos:start="560:5" pos:end="560:14"><name pos:start="560:5" pos:end="560:12">EVP_PKEY</name> <modifier pos:start="560:14" pos:end="560:14">*</modifier></type><name pos:start="560:15" pos:end="560:22">new_pkey</name></decl>;</decl_stmt>
    <decl_stmt pos:start="561:5" pos:end="561:25"><decl pos:start="561:5" pos:end="561:24"><type pos:start="561:5" pos:end="561:19"><name pos:start="561:5" pos:end="561:12">unsigned</name> <name pos:start="561:14" pos:end="561:17">char</name> <modifier pos:start="561:19" pos:end="561:19">*</modifier></type><name pos:start="561:20" pos:end="561:24">pkcs7</name></decl>;</decl_stmt>
    <decl_stmt pos:start="562:5" pos:end="562:22"><decl pos:start="562:5" pos:end="562:21"><type pos:start="562:5" pos:end="562:7"><name pos:start="562:5" pos:end="562:7">int</name></type> <name pos:start="562:9" pos:end="562:17">pkcs7_len</name> <init pos:start="562:19" pos:end="562:21">= <expr pos:start="562:21" pos:end="562:21"><literal type="number" pos:start="562:21" pos:end="562:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="563:5" pos:end="563:29"><decl pos:start="563:5" pos:end="563:28"><type pos:start="563:5" pos:end="563:19"><name pos:start="563:5" pos:end="563:12">unsigned</name> <name pos:start="563:14" pos:end="563:17">char</name> <modifier pos:start="563:19" pos:end="563:19">*</modifier></type><name pos:start="563:20" pos:end="563:28">attr_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="564:5" pos:end="564:17"><decl pos:start="564:5" pos:end="564:16"><type pos:start="564:5" pos:end="564:7"><name pos:start="564:5" pos:end="564:7">int</name></type> <name pos:start="564:9" pos:end="564:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="566:5" pos:end="567:5"><expr pos:start="566:5" pos:end="566:15"><name pos:start="566:5" pos:end="566:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="569:5" pos:end="571:7">/*
     * Make sure our EST server has PoP disabled
     */</comment>
    <expr_stmt pos:start="572:5" pos:end="572:21"><expr pos:start="572:5" pos:end="572:20"><call pos:start="572:5" pos:end="572:20"><name pos:start="572:5" pos:end="572:18">st_disable_pop</name><argument_list pos:start="572:19" pos:end="572:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="574:5" pos:end="576:7">/*
     * Read in the CA certs
     */</comment>
    <expr_stmt pos:start="577:5" pos:end="577:55"><expr pos:start="577:5" pos:end="577:54"><name pos:start="577:5" pos:end="577:10">caclen</name> <operator pos:start="577:12" pos:end="577:12">=</operator> <call pos:start="577:14" pos:end="577:54"><name pos:start="577:14" pos:end="577:29">read_binary_file</name><argument_list pos:start="577:30" pos:end="577:54">(<argument pos:start="577:31" pos:end="577:43"><expr pos:start="577:31" pos:end="577:43"><name pos:start="577:31" pos:end="577:43">US748_CACERTS</name></expr></argument>, <argument pos:start="577:46" pos:end="577:53"><expr pos:start="577:46" pos:end="577:53"><operator pos:start="577:46" pos:end="577:46">&amp;</operator><name pos:start="577:47" pos:end="577:53">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="578:5" pos:end="578:31"><expr pos:start="578:5" pos:end="578:30"><call pos:start="578:5" pos:end="578:30"><name pos:start="578:5" pos:end="578:13">CU_ASSERT</name><argument_list pos:start="578:14" pos:end="578:30">(<argument pos:start="578:15" pos:end="578:29"><expr pos:start="578:15" pos:end="578:29"><name pos:start="578:15" pos:end="578:25">cacerts_len</name> <operator pos:start="578:27" pos:end="578:27">&gt;</operator> <literal type="number" pos:start="578:29" pos:end="578:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="580:5" pos:end="582:7">/*
     * Init the client context
     */</comment>
    <expr_stmt pos:start="583:5" pos:end="584:35"><expr pos:start="583:5" pos:end="584:34"><name pos:start="583:5" pos:end="583:7">ctx</name> <operator pos:start="583:9" pos:end="583:9">=</operator> <call pos:start="583:11" pos:end="584:34"><name pos:start="583:11" pos:end="583:25">est_client_init</name><argument_list pos:start="583:26" pos:end="584:34">(<argument pos:start="583:27" pos:end="583:33"><expr pos:start="583:27" pos:end="583:33"><name pos:start="583:27" pos:end="583:33">cacerts</name></expr></argument>, <argument pos:start="583:36" pos:end="583:41"><expr pos:start="583:36" pos:end="583:41"><name pos:start="583:36" pos:end="583:41">caclen</name></expr></argument>, <argument pos:start="583:44" pos:end="583:62"><expr pos:start="583:44" pos:end="583:62"><name pos:start="583:44" pos:end="583:62">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="584:9" pos:end="584:33"><expr pos:start="584:9" pos:end="584:33"><name pos:start="584:9" pos:end="584:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="586:5" pos:end="588:7">/*
     * We'll use simple HTTP auth to identify ourselves
     */</comment>
    <expr_stmt pos:start="589:5" pos:end="589:67"><expr pos:start="589:5" pos:end="589:66"><name pos:start="589:5" pos:end="589:6">rv</name> <operator pos:start="589:8" pos:end="589:8">=</operator> <call pos:start="589:10" pos:end="589:66"><name pos:start="589:10" pos:end="589:28">est_client_set_auth</name><argument_list pos:start="589:29" pos:end="589:66">(<argument pos:start="589:30" pos:end="589:32"><expr pos:start="589:30" pos:end="589:32"><name pos:start="589:30" pos:end="589:32">ctx</name></expr></argument>, <argument pos:start="589:35" pos:end="589:43"><expr pos:start="589:35" pos:end="589:43"><literal type="string" pos:start="589:35" pos:end="589:43">"estuser"</literal></expr></argument>, <argument pos:start="589:46" pos:end="589:53"><expr pos:start="589:46" pos:end="589:53"><literal type="string" pos:start="589:46" pos:end="589:53">"estpwd"</literal></expr></argument>, <argument pos:start="589:56" pos:end="589:59"><expr pos:start="589:56" pos:end="589:59"><name pos:start="589:56" pos:end="589:59">NULL</name></expr></argument>, <argument pos:start="589:62" pos:end="589:65"><expr pos:start="589:62" pos:end="589:65"><name pos:start="589:62" pos:end="589:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="590:5" pos:end="590:34"><expr pos:start="590:5" pos:end="590:33"><call pos:start="590:5" pos:end="590:33"><name pos:start="590:5" pos:end="590:13">CU_ASSERT</name><argument_list pos:start="590:14" pos:end="590:33">(<argument pos:start="590:15" pos:end="590:32"><expr pos:start="590:15" pos:end="590:32"><name pos:start="590:15" pos:end="590:16">rv</name> <operator pos:start="590:18" pos:end="590:19">==</operator> <name pos:start="590:21" pos:end="590:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="592:5" pos:end="592:72"><expr pos:start="592:5" pos:end="592:71"><call pos:start="592:5" pos:end="592:71"><name pos:start="592:5" pos:end="592:25">est_client_set_server</name><argument_list pos:start="592:26" pos:end="592:71">(<argument pos:start="592:27" pos:end="592:29"><expr pos:start="592:27" pos:end="592:29"><name pos:start="592:27" pos:end="592:29">ctx</name></expr></argument>, <argument pos:start="592:32" pos:end="592:42"><expr pos:start="592:32" pos:end="592:42"><literal type="string" pos:start="592:32" pos:end="592:42">"127.0.0.1"</literal></expr></argument>, <argument pos:start="592:45" pos:end="592:64"><expr pos:start="592:45" pos:end="592:64"><name pos:start="592:45" pos:end="592:64">US748_TCP_PROXY_PORT</name></expr></argument>, <argument pos:start="592:67" pos:end="592:70"><expr pos:start="592:67" pos:end="592:70"><name pos:start="592:67" pos:end="592:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="594:5" pos:end="597:7">/*
     * Create some space to hold the cert and generate
     * a private key
     */</comment>
    <expr_stmt pos:start="598:5" pos:end="598:38"><expr pos:start="598:5" pos:end="598:37"><name pos:start="598:5" pos:end="598:12">new_pkey</name> <operator pos:start="598:14" pos:end="598:14">=</operator> <call pos:start="598:16" pos:end="598:37"><name pos:start="598:16" pos:end="598:35">generate_private_key</name><argument_list pos:start="598:36" pos:end="598:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="600:5" pos:end="600:61"><expr pos:start="600:5" pos:end="600:60"><name pos:start="600:5" pos:end="600:6">rv</name> <operator pos:start="600:8" pos:end="600:8">=</operator> <call pos:start="600:10" pos:end="600:60"><name pos:start="600:10" pos:end="600:32">est_client_get_csrattrs</name><argument_list pos:start="600:33" pos:end="600:60">(<argument pos:start="600:34" pos:end="600:36"><expr pos:start="600:34" pos:end="600:36"><name pos:start="600:34" pos:end="600:36">ctx</name></expr></argument>, <argument pos:start="600:39" pos:end="600:48"><expr pos:start="600:39" pos:end="600:48"><operator pos:start="600:39" pos:end="600:39">&amp;</operator><name pos:start="600:40" pos:end="600:48">attr_data</name></expr></argument>, <argument pos:start="600:51" pos:end="600:59"><expr pos:start="600:51" pos:end="600:59"><operator pos:start="600:51" pos:end="600:51">&amp;</operator><name pos:start="600:52" pos:end="600:59">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="601:5" pos:end="601:34"><expr pos:start="601:5" pos:end="601:33"><call pos:start="601:5" pos:end="601:33"><name pos:start="601:5" pos:end="601:13">CU_ASSERT</name><argument_list pos:start="601:14" pos:end="601:33">(<argument pos:start="601:15" pos:end="601:32"><expr pos:start="601:15" pos:end="601:32"><name pos:start="601:15" pos:end="601:16">rv</name> <operator pos:start="601:18" pos:end="601:19">==</operator> <name pos:start="601:21" pos:end="601:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="603:5" pos:end="605:7">/*
     * Attempt to enroll
     */</comment>
    <expr_stmt pos:start="606:5" pos:end="606:30"><expr pos:start="606:5" pos:end="606:29"><name pos:start="606:5" pos:end="606:25"><name pos:start="606:5" pos:end="606:7">ctx</name><operator pos:start="606:8" pos:end="606:9">-&gt;</operator><name pos:start="606:10" pos:end="606:25">csr_pop_required</name></name> <operator pos:start="606:27" pos:end="606:27">=</operator> <literal type="number" pos:start="606:29" pos:end="606:29">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="606:32" pos:end="606:86">//This is a hack for testing only, do not attempt this </comment>
    <comment type="line" pos:start="607:5" pos:end="607:61">//We need to force the challengePassword into the CSR    </comment>
    <expr_stmt pos:start="608:5" pos:end="608:67"><expr pos:start="608:5" pos:end="608:66"><name pos:start="608:5" pos:end="608:6">rv</name> <operator pos:start="608:8" pos:end="608:8">=</operator> <call pos:start="608:10" pos:end="608:66"><name pos:start="608:10" pos:end="608:26">est_client_enroll</name><argument_list pos:start="608:27" pos:end="608:66">(<argument pos:start="608:28" pos:end="608:30"><expr pos:start="608:28" pos:end="608:30"><name pos:start="608:28" pos:end="608:30">ctx</name></expr></argument>, <argument pos:start="608:33" pos:end="608:43"><expr pos:start="608:33" pos:end="608:43"><literal type="string" pos:start="608:33" pos:end="608:43">"TestCase9"</literal></expr></argument>, <argument pos:start="608:46" pos:end="608:55"><expr pos:start="608:46" pos:end="608:55"><operator pos:start="608:46" pos:end="608:46">&amp;</operator><name pos:start="608:47" pos:end="608:55">pkcs7_len</name></expr></argument>, <argument pos:start="608:58" pos:end="608:65"><expr pos:start="608:58" pos:end="608:65"><name pos:start="608:58" pos:end="608:65">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="609:5" pos:end="609:34"><expr pos:start="609:5" pos:end="609:33"><call pos:start="609:5" pos:end="609:33"><name pos:start="609:5" pos:end="609:13">CU_ASSERT</name><argument_list pos:start="609:14" pos:end="609:33">(<argument pos:start="609:15" pos:end="609:32"><expr pos:start="609:15" pos:end="609:32"><name pos:start="609:15" pos:end="609:16">rv</name> <operator pos:start="609:18" pos:end="609:19">==</operator> <name pos:start="609:21" pos:end="609:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="611:5" pos:end="611:30"><expr pos:start="611:5" pos:end="611:29"><name pos:start="611:5" pos:end="611:9">pkcs7</name> <operator pos:start="611:11" pos:end="611:11">=</operator> <call pos:start="611:13" pos:end="611:29"><name pos:start="611:13" pos:end="611:18">malloc</name><argument_list pos:start="611:19" pos:end="611:29">(<argument pos:start="611:20" pos:end="611:28"><expr pos:start="611:20" pos:end="611:28"><name pos:start="611:20" pos:end="611:28">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="612:5" pos:end="612:51"><expr pos:start="612:5" pos:end="612:50"><name pos:start="612:5" pos:end="612:6">rv</name> <operator pos:start="612:8" pos:end="612:8">=</operator> <call pos:start="612:10" pos:end="612:50"><name pos:start="612:10" pos:end="612:38">est_client_copy_enrolled_cert</name><argument_list pos:start="612:39" pos:end="612:50">(<argument pos:start="612:40" pos:end="612:42"><expr pos:start="612:40" pos:end="612:42"><name pos:start="612:40" pos:end="612:42">ctx</name></expr></argument>, <argument pos:start="612:45" pos:end="612:49"><expr pos:start="612:45" pos:end="612:49"><name pos:start="612:45" pos:end="612:49">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="614:5" pos:end="614:16"><expr pos:start="614:5" pos:end="614:15"><call pos:start="614:5" pos:end="614:15"><name pos:start="614:5" pos:end="614:8">free</name><argument_list pos:start="614:9" pos:end="614:15">(<argument pos:start="614:10" pos:end="614:14"><expr pos:start="614:10" pos:end="614:14"><name pos:start="614:10" pos:end="614:14">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="615:5" pos:end="615:21"><expr pos:start="615:5" pos:end="615:20"><call pos:start="615:5" pos:end="615:20"><name pos:start="615:5" pos:end="615:15">est_destroy</name><argument_list pos:start="615:16" pos:end="615:20">(<argument pos:start="615:17" pos:end="615:19"><expr pos:start="615:17" pos:end="615:19"><name pos:start="615:17" pos:end="615:19">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="618:1" pos:end="625:3">/*
 * Simple enroll - PoP is disabled, the CSR contains a
 *                 invalid PoP.
 *
 * This test case ensures the server can handle the
 * scenario where the CSR includes an invalid PoP even when
 * the server didn't request it.
 */</comment>
<function pos:start="626:1" pos:end="646:1"><type pos:start="626:1" pos:end="626:11"><specifier pos:start="626:1" pos:end="626:6">static</specifier> <name pos:start="626:8" pos:end="626:11">void</name></type> <name pos:start="626:13" pos:end="626:24">us748_test10</name> <parameter_list pos:start="626:26" pos:end="626:31">(<parameter pos:start="626:27" pos:end="626:30"><decl pos:start="626:27" pos:end="626:30"><type pos:start="626:27" pos:end="626:30"><name pos:start="626:27" pos:end="626:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="627:1" pos:end="646:1">{<block_content pos:start="628:5" pos:end="645:25">
    <decl_stmt pos:start="628:5" pos:end="628:12"><decl pos:start="628:5" pos:end="628:11"><type pos:start="628:5" pos:end="628:8"><name pos:start="628:5" pos:end="628:8">long</name></type> <name pos:start="628:10" pos:end="628:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="630:5" pos:end="631:5"><expr pos:start="630:5" pos:end="630:15"><name pos:start="630:5" pos:end="630:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="633:5" pos:end="635:7">/*
     * Make sure our EST server has PoP disabled
     */</comment>
    <expr_stmt pos:start="636:5" pos:end="636:21"><expr pos:start="636:5" pos:end="636:20"><call pos:start="636:5" pos:end="636:20"><name pos:start="636:5" pos:end="636:18">st_disable_pop</name><argument_list pos:start="636:19" pos:end="636:20">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="638:5" pos:end="640:72"><expr pos:start="638:5" pos:end="640:71"><name pos:start="638:5" pos:end="638:6">rv</name> <operator pos:start="638:8" pos:end="638:8">=</operator> <call pos:start="638:10" pos:end="640:71"><name pos:start="638:10" pos:end="638:23">curl_http_post</name><argument_list pos:start="638:24" pos:end="640:71">(<argument pos:start="638:25" pos:end="638:43"><expr pos:start="638:25" pos:end="638:43"><name pos:start="638:25" pos:end="638:43">US748_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="638:46" pos:end="638:60"><expr pos:start="638:46" pos:end="638:60"><name pos:start="638:46" pos:end="638:60">US748_PKCS10_CT</name></expr></argument>,
    <argument pos:start="639:5" pos:end="639:26"><expr pos:start="639:5" pos:end="639:26"><name pos:start="639:5" pos:end="639:26">US748_PKCS10_STALE_POP</name></expr></argument>,
    <argument pos:start="640:5" pos:end="640:21"><expr pos:start="640:5" pos:end="640:21"><name pos:start="640:5" pos:end="640:21">US748_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="640:24" pos:end="640:36"><expr pos:start="640:24" pos:end="640:36"><name pos:start="640:24" pos:end="640:36">US748_CACERTS</name></expr></argument>, <argument pos:start="640:39" pos:end="640:52"><expr pos:start="640:39" pos:end="640:52"><name pos:start="640:39" pos:end="640:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="640:55" pos:end="640:58"><expr pos:start="640:55" pos:end="640:58"><name pos:start="640:55" pos:end="640:58">NULL</name></expr></argument>, <argument pos:start="640:61" pos:end="640:64"><expr pos:start="640:61" pos:end="640:64"><name pos:start="640:61" pos:end="640:64">NULL</name></expr></argument>, <argument pos:start="640:67" pos:end="640:70"><expr pos:start="640:67" pos:end="640:70"><name pos:start="640:67" pos:end="640:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="641:5" pos:end="644:7">/*
     * The enroll request should fail since the PoP was invalid
     * We expect a 400 response.
     */</comment>
    <expr_stmt pos:start="645:5" pos:end="645:25"><expr pos:start="645:5" pos:end="645:24"><call pos:start="645:5" pos:end="645:24"><name pos:start="645:5" pos:end="645:13">CU_ASSERT</name><argument_list pos:start="645:14" pos:end="645:24">(<argument pos:start="645:15" pos:end="645:23"><expr pos:start="645:15" pos:end="645:23"><name pos:start="645:15" pos:end="645:16">rv</name> <operator pos:start="645:18" pos:end="645:19">==</operator> <literal type="number" pos:start="645:21" pos:end="645:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="648:1" pos:end="651:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="652:1" pos:end="683:1"><type pos:start="652:1" pos:end="652:3"><name pos:start="652:1" pos:end="652:3">int</name></type> <name pos:start="652:5" pos:end="652:19">us748_add_suite</name> <parameter_list pos:start="652:21" pos:end="652:26">(<parameter pos:start="652:22" pos:end="652:25"><decl pos:start="652:22" pos:end="652:25"><type pos:start="652:22" pos:end="652:25"><name pos:start="652:22" pos:end="652:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="653:1" pos:end="683:1">{<block_content pos:start="655:5" pos:end="683:0">
<cpp:ifdef pos:start="654:1" pos:end="654:17">#<cpp:directive pos:start="654:2" pos:end="654:6">ifdef</cpp:directive> <name pos:start="654:8" pos:end="654:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="655:5" pos:end="655:28"><decl pos:start="655:5" pos:end="655:27"><type pos:start="655:5" pos:end="655:13"><name pos:start="655:5" pos:end="655:13">CU_pSuite</name></type> <name pos:start="655:15" pos:end="655:20">pSuite</name> <init pos:start="655:22" pos:end="655:27">= <expr pos:start="655:24" pos:end="655:27"><name pos:start="655:24" pos:end="655:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="657:5" pos:end="657:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="658:5" pos:end="660:33"><expr pos:start="658:5" pos:end="660:32"><name pos:start="658:5" pos:end="658:10">pSuite</name> <operator pos:start="658:12" pos:end="658:12">=</operator> <call pos:start="658:14" pos:end="660:32"><name pos:start="658:14" pos:end="658:25">CU_add_suite</name><argument_list pos:start="658:26" pos:end="660:32">(<argument pos:start="658:27" pos:end="658:48"><expr pos:start="658:27" pos:end="658:48"><literal type="string" pos:start="658:27" pos:end="658:48">"us748_srv_simpenroll"</literal></expr></argument>,
            <argument pos:start="659:13" pos:end="659:28"><expr pos:start="659:13" pos:end="659:28"><name pos:start="659:13" pos:end="659:28">us748_init_suite</name></expr></argument>,
            <argument pos:start="660:13" pos:end="660:31"><expr pos:start="660:13" pos:end="660:31"><name pos:start="660:13" pos:end="660:31">us748_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="661:5" pos:end="664:5"><if pos:start="661:5" pos:end="664:5">if <condition pos:start="661:8" pos:end="661:23">(<expr pos:start="661:9" pos:end="661:22"><name pos:start="661:9" pos:end="661:12">NULL</name> <operator pos:start="661:14" pos:end="661:15">==</operator> <name pos:start="661:17" pos:end="661:22">pSuite</name></expr>)</condition> <block pos:start="661:25" pos:end="664:5">{<block_content pos:start="662:9" pos:end="663:30">
        <expr_stmt pos:start="662:9" pos:end="662:30"><expr pos:start="662:9" pos:end="662:29"><call pos:start="662:9" pos:end="662:29"><name pos:start="662:9" pos:end="662:27">CU_cleanup_registry</name><argument_list pos:start="662:28" pos:end="662:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="663:9" pos:end="663:30">return <expr pos:start="663:16" pos:end="663:29"><call pos:start="663:16" pos:end="663:29"><name pos:start="663:16" pos:end="663:27">CU_get_error</name><argument_list pos:start="663:28" pos:end="663:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="666:5" pos:end="666:36">/* add the tests to the suite */</comment>
    <if_stmt pos:start="667:5" pos:end="679:5"><if pos:start="667:5" pos:end="679:5">if <condition pos:start="667:8" pos:end="675:103">(<expr pos:start="667:9" pos:end="675:102"><operator pos:start="667:9" pos:end="667:9">(</operator><name pos:start="667:10" pos:end="667:13">NULL</name> <operator pos:start="667:15" pos:end="667:16">==</operator> <call pos:start="667:18" pos:end="667:68"><name pos:start="667:18" pos:end="667:28">CU_add_test</name><argument_list pos:start="667:29" pos:end="667:68">(<argument pos:start="667:30" pos:end="667:35"><expr pos:start="667:30" pos:end="667:35"><name pos:start="667:30" pos:end="667:35">pSuite</name></expr></argument>, <argument pos:start="667:38" pos:end="667:54"><expr pos:start="667:38" pos:end="667:54"><literal type="string" pos:start="667:38" pos:end="667:54">"Enroll RSA cert"</literal></expr></argument>, <argument pos:start="667:57" pos:end="667:67"><expr pos:start="667:57" pos:end="667:67"><name pos:start="667:57" pos:end="667:67">us748_test1</name></expr></argument>)</argument_list></call><operator pos:start="667:69" pos:end="667:69">)</operator> <operator pos:start="667:71" pos:end="667:72">||</operator>
        <operator pos:start="668:9" pos:end="668:9">(</operator><name pos:start="668:10" pos:end="668:13">NULL</name> <operator pos:start="668:15" pos:end="668:16">==</operator> <call pos:start="668:18" pos:end="668:70"><name pos:start="668:18" pos:end="668:28">CU_add_test</name><argument_list pos:start="668:29" pos:end="668:70">(<argument pos:start="668:30" pos:end="668:35"><expr pos:start="668:30" pos:end="668:35"><name pos:start="668:30" pos:end="668:35">pSuite</name></expr></argument>, <argument pos:start="668:38" pos:end="668:56"><expr pos:start="668:38" pos:end="668:56"><literal type="string" pos:start="668:38" pos:end="668:56">"Enroll ECDSA cert"</literal></expr></argument>, <argument pos:start="668:59" pos:end="668:69"><expr pos:start="668:59" pos:end="668:69"><name pos:start="668:59" pos:end="668:69">us748_test2</name></expr></argument>)</argument_list></call><operator pos:start="668:71" pos:end="668:71">)</operator> <operator pos:start="668:73" pos:end="668:74">||</operator>
        <operator pos:start="669:9" pos:end="669:9">(</operator><name pos:start="669:10" pos:end="669:13">NULL</name> <operator pos:start="669:15" pos:end="669:16">==</operator> <call pos:start="669:18" pos:end="669:68"><name pos:start="669:18" pos:end="669:28">CU_add_test</name><argument_list pos:start="669:29" pos:end="669:68">(<argument pos:start="669:30" pos:end="669:35"><expr pos:start="669:30" pos:end="669:35"><name pos:start="669:30" pos:end="669:35">pSuite</name></expr></argument>, <argument pos:start="669:38" pos:end="669:54"><expr pos:start="669:38" pos:end="669:54"><literal type="string" pos:start="669:38" pos:end="669:54">"Enroll DSA cert"</literal></expr></argument>, <argument pos:start="669:57" pos:end="669:67"><expr pos:start="669:57" pos:end="669:67"><name pos:start="669:57" pos:end="669:67">us748_test3</name></expr></argument>)</argument_list></call><operator pos:start="669:69" pos:end="669:69">)</operator> <operator pos:start="669:71" pos:end="669:72">||</operator>
        <operator pos:start="670:9" pos:end="670:9">(</operator><name pos:start="670:10" pos:end="670:13">NULL</name> <operator pos:start="670:15" pos:end="670:16">==</operator> <call pos:start="670:18" pos:end="670:80"><name pos:start="670:18" pos:end="670:28">CU_add_test</name><argument_list pos:start="670:29" pos:end="670:80">(<argument pos:start="670:30" pos:end="670:35"><expr pos:start="670:30" pos:end="670:35"><name pos:start="670:30" pos:end="670:35">pSuite</name></expr></argument>, <argument pos:start="670:38" pos:end="670:66"><expr pos:start="670:38" pos:end="670:66"><literal type="string" pos:start="670:38" pos:end="670:66">"Enroll corrupted ECDSA cert"</literal></expr></argument>, <argument pos:start="670:69" pos:end="670:79"><expr pos:start="670:69" pos:end="670:79"><name pos:start="670:69" pos:end="670:79">us748_test4</name></expr></argument>)</argument_list></call><operator pos:start="670:81" pos:end="670:81">)</operator> <operator pos:start="670:83" pos:end="670:84">||</operator>
        <operator pos:start="671:9" pos:end="671:9">(</operator><name pos:start="671:10" pos:end="671:13">NULL</name> <operator pos:start="671:15" pos:end="671:16">==</operator> <call pos:start="671:18" pos:end="671:88"><name pos:start="671:18" pos:end="671:28">CU_add_test</name><argument_list pos:start="671:29" pos:end="671:88">(<argument pos:start="671:30" pos:end="671:35"><expr pos:start="671:30" pos:end="671:35"><name pos:start="671:30" pos:end="671:35">pSuite</name></expr></argument>, <argument pos:start="671:38" pos:end="671:74"><expr pos:start="671:38" pos:end="671:74"><literal type="string" pos:start="671:38" pos:end="671:74">"Enroll retry-after manual approval "</literal></expr></argument>, <argument pos:start="671:77" pos:end="671:87"><expr pos:start="671:77" pos:end="671:87"><name pos:start="671:77" pos:end="671:87">us748_test5</name></expr></argument>)</argument_list></call><operator pos:start="671:89" pos:end="671:89">)</operator> <operator pos:start="671:91" pos:end="671:92">||</operator>
        <operator pos:start="672:9" pos:end="672:9">(</operator><name pos:start="672:10" pos:end="672:13">NULL</name> <operator pos:start="672:15" pos:end="672:16">==</operator> <call pos:start="672:18" pos:end="672:78"><name pos:start="672:18" pos:end="672:28">CU_add_test</name><argument_list pos:start="672:29" pos:end="672:78">(<argument pos:start="672:30" pos:end="672:35"><expr pos:start="672:30" pos:end="672:35"><name pos:start="672:30" pos:end="672:35">pSuite</name></expr></argument>, <argument pos:start="672:38" pos:end="672:64"><expr pos:start="672:38" pos:end="672:64"><literal type="string" pos:start="672:38" pos:end="672:64">"Enroll PoP fail with Curl"</literal></expr></argument>, <argument pos:start="672:67" pos:end="672:77"><expr pos:start="672:67" pos:end="672:77"><name pos:start="672:67" pos:end="672:77">us748_test6</name></expr></argument>)</argument_list></call><operator pos:start="672:79" pos:end="672:79">)</operator> <operator pos:start="672:81" pos:end="672:82">||</operator>
        <operator pos:start="673:9" pos:end="673:9">(</operator><name pos:start="673:10" pos:end="673:13">NULL</name> <operator pos:start="673:15" pos:end="673:16">==</operator> <call pos:start="673:18" pos:end="673:86"><name pos:start="673:18" pos:end="673:28">CU_add_test</name><argument_list pos:start="673:29" pos:end="673:86">(<argument pos:start="673:30" pos:end="673:35"><expr pos:start="673:30" pos:end="673:35"><name pos:start="673:30" pos:end="673:35">pSuite</name></expr></argument>, <argument pos:start="673:38" pos:end="673:72"><expr pos:start="673:38" pos:end="673:72"><literal type="string" pos:start="673:38" pos:end="673:72">"Enroll PoP succeed with estclient"</literal></expr></argument>, <argument pos:start="673:75" pos:end="673:85"><expr pos:start="673:75" pos:end="673:85"><name pos:start="673:75" pos:end="673:85">us748_test7</name></expr></argument>)</argument_list></call><operator pos:start="673:87" pos:end="673:87">)</operator> <operator pos:start="673:89" pos:end="673:90">||</operator>
        <operator pos:start="674:9" pos:end="674:9">(</operator><name pos:start="674:10" pos:end="674:13">NULL</name> <operator pos:start="674:15" pos:end="674:16">==</operator> <call pos:start="674:18" pos:end="674:98"><name pos:start="674:18" pos:end="674:28">CU_add_test</name><argument_list pos:start="674:29" pos:end="674:98">(<argument pos:start="674:30" pos:end="674:35"><expr pos:start="674:30" pos:end="674:35"><name pos:start="674:30" pos:end="674:35">pSuite</name></expr></argument>, <argument pos:start="674:38" pos:end="674:84"><expr pos:start="674:38" pos:end="674:84"><literal type="string" pos:start="674:38" pos:end="674:84">"Enroll w/PoP disabled, CSR includes valid PoP"</literal></expr></argument>, <argument pos:start="674:87" pos:end="674:97"><expr pos:start="674:87" pos:end="674:97"><name pos:start="674:87" pos:end="674:97">us748_test9</name></expr></argument>)</argument_list></call><operator pos:start="674:99" pos:end="674:99">)</operator> <operator pos:start="674:101" pos:end="674:102">||</operator>
        <operator pos:start="675:9" pos:end="675:9">(</operator><name pos:start="675:10" pos:end="675:13">NULL</name> <operator pos:start="675:15" pos:end="675:16">==</operator> <call pos:start="675:18" pos:end="675:101"><name pos:start="675:18" pos:end="675:28">CU_add_test</name><argument_list pos:start="675:29" pos:end="675:101">(<argument pos:start="675:30" pos:end="675:35"><expr pos:start="675:30" pos:end="675:35"><name pos:start="675:30" pos:end="675:35">pSuite</name></expr></argument>, <argument pos:start="675:38" pos:end="675:86"><expr pos:start="675:38" pos:end="675:86"><literal type="string" pos:start="675:38" pos:end="675:86">"Enroll w/PoP disabled, CSR includes invalid PoP"</literal></expr></argument>, <argument pos:start="675:89" pos:end="675:100"><expr pos:start="675:89" pos:end="675:100"><name pos:start="675:89" pos:end="675:100">us748_test10</name></expr></argument>)</argument_list></call><operator pos:start="675:102" pos:end="675:102">)</operator></expr>)</condition>
    <block pos:start="676:5" pos:end="679:5">{<block_content pos:start="677:8" pos:end="678:29">
       <expr_stmt pos:start="677:8" pos:end="677:29"><expr pos:start="677:8" pos:end="677:28"><call pos:start="677:8" pos:end="677:28"><name pos:start="677:8" pos:end="677:26">CU_cleanup_registry</name><argument_list pos:start="677:27" pos:end="677:28">()</argument_list></call></expr>;</expr_stmt>
       <return pos:start="678:8" pos:end="678:29">return <expr pos:start="678:15" pos:end="678:28"><call pos:start="678:15" pos:end="678:28"><name pos:start="678:15" pos:end="678:26">CU_get_error</name><argument_list pos:start="678:27" pos:end="678:28">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="681:5" pos:end="683:0">return <expr pos:start="681:12" pos:end="681:22"><name pos:start="681:12" pos:end="681:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="682:1" pos:end="682:6">#<cpp:directive pos:start="682:2" pos:end="682:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
