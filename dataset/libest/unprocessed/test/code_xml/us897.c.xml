<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us897.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us897.c - Unit Tests for User Story 897 - Client CACerts 
 *
 * June, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:ifdef pos:start="15:1" pos:end="15:17">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="16:1" pos:end="16:24">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:28">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="18:1" pos:end="18:6">#<cpp:directive pos:start="18:2" pos:end="18:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="19:1" pos:end="19:34">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:34">"../../util/test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="20:1" pos:end="20:22">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:22">"st_server.h"</cpp:file></cpp:include>

<comment type="block" pos:start="22:1" pos:end="24:3">/*
 * max command line length when generating system commands
 */</comment>
<cpp:define pos:start="25:1" pos:end="25:30">#<cpp:directive pos:start="25:2" pos:end="25:7">define</cpp:directive> <cpp:macro pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:26">EST_UT_MAX_CMD_LEN</name></cpp:macro> <cpp:value pos:start="25:28" pos:end="25:30">256</cpp:value></cpp:define>
<cpp:define pos:start="26:1" pos:end="26:34">#<cpp:directive pos:start="26:2" pos:end="26:7">define</cpp:directive> <cpp:macro pos:start="26:9" pos:end="26:18"><name pos:start="26:9" pos:end="26:18">EST_CA_MAX</name></cpp:macro>	    <cpp:value pos:start="26:29" pos:end="26:34">200000</cpp:value></cpp:define>
<comment type="block" pos:start="27:1" pos:end="29:3">/*
 * The CA certificate used to verify the EST server.  Grab it from the server's directory
 */</comment>
<comment type="block" pos:start="30:1" pos:end="30:70">/* #define CLIENT_UT_CACERT "../../example/server/estCA/cacert.crt" */</comment>
<cpp:define pos:start="31:1" pos:end="31:33">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:25">US897_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="31:29" pos:end="31:33">29897</cpp:value></cpp:define>
<cpp:define pos:start="32:1" pos:end="32:50">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:24"><name pos:start="32:9" pos:end="32:24">CLIENT_UT_PUBKEY</name></cpp:macro> <cpp:value pos:start="32:26" pos:end="32:50">"./est_client_ut_keypair"</cpp:value></cpp:define>
<cpp:define pos:start="33:1" pos:end="33:39">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:23">US897_SERVER_IP</name></cpp:macro>	    <cpp:value pos:start="33:29" pos:end="33:39">"127.0.0.1"</cpp:value></cpp:define>	
<cpp:define pos:start="34:1" pos:end="34:37">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:17"><name pos:start="34:9" pos:end="34:17">US897_UID</name></cpp:macro>	    <cpp:value pos:start="34:29" pos:end="34:37">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="35:1" pos:end="35:36">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">US897_PWD</name></cpp:macro>	    <cpp:value pos:start="35:29" pos:end="35:36">"estpwd"</cpp:value></cpp:define>

<cpp:ifndef pos:start="37:1" pos:end="37:13">#<cpp:directive pos:start="37:2" pos:end="37:7">ifndef</cpp:directive> <name pos:start="37:9" pos:end="37:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="38:1" pos:end="38:46">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:24"><name pos:start="38:9" pos:end="38:24">CLIENT_UT_CACERT</name></cpp:macro> <cpp:value pos:start="38:26" pos:end="38:46">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:49">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:21">US897_CACERTS</name></cpp:macro>	    <cpp:value pos:start="39:29" pos:end="39:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:49">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:25"><name pos:start="40:9" pos:end="40:25">US897_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="40:29" pos:end="40:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:71">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:28">US897_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="41:30" pos:end="41:71">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:85">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:45"><name pos:start="42:9" pos:end="42:45">US897_CACERTS_SINGLE_CHAIN_MULT_CERTS</name></cpp:macro> <cpp:value pos:start="42:47" pos:end="42:85">"US897/singlechain_10certs_trusted.crt"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:100">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:57"><name pos:start="43:9" pos:end="43:57">US897_CACERTS_SINGLE_CHAIN_MULT_CERTS_ONE_MISSING</name></cpp:macro> <cpp:value pos:start="43:59" pos:end="43:100">"US897/singlechain_9certs_missingcert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:74">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:42"><name pos:start="44:9" pos:end="44:42">US897_CACERTS_SINGLE_CHAIN_EXPIRED</name></cpp:macro> <cpp:value pos:start="44:44" pos:end="44:74">"US897/singlechain_expired.crt"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:97">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:38">US897_CACERTS_MULTI_CHAIN_CRLS</name></cpp:macro> <cpp:value pos:start="45:40" pos:end="45:97">"US897/trustedCHain10RevokedDepth6Implicit10andcacert.crt"</cpp:value></cpp:define>
<cpp:else pos:start="46:1" pos:end="46:5">#<cpp:directive pos:start="46:2" pos:end="46:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="47:1" pos:end="47:47">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:24">CLIENT_UT_CACERT</name></cpp:macro> <cpp:value pos:start="47:26" pos:end="47:47">"CA\\estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:51">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:21"><name pos:start="48:9" pos:end="48:21">US897_CACERTS</name></cpp:macro>	    <cpp:value pos:start="48:29" pos:end="48:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:50">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:25">US897_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="49:29" pos:end="49:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:74">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:28"><name pos:start="50:9" pos:end="50:28">US897_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="50:30" pos:end="50:74">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:86">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:45">US897_CACERTS_SINGLE_CHAIN_MULT_CERTS</name></cpp:macro> <cpp:value pos:start="51:47" pos:end="51:86">"US897\\singlechain_10certs_trusted.crt"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:101">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:57"><name pos:start="52:9" pos:end="52:57">US897_CACERTS_SINGLE_CHAIN_MULT_CERTS_ONE_MISSING</name></cpp:macro> <cpp:value pos:start="52:59" pos:end="52:101">"US897\\singlechain_9certs_missingcert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="53:1" pos:end="53:75">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:42">US897_CACERTS_SINGLE_CHAIN_EXPIRED</name></cpp:macro> <cpp:value pos:start="53:44" pos:end="53:75">"US897\\singlechain_expired.crt"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:98">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:38"><name pos:start="54:9" pos:end="54:38">US897_CACERTS_MULTI_CHAIN_CRLS</name></cpp:macro> <cpp:value pos:start="54:40" pos:end="54:98">"US897\\trustedCHain10RevokedDepth6Implicit10andcacert.crt"</cpp:value></cpp:define>
<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif> 

<function pos:start="57:1" pos:end="59:1"><type pos:start="57:1" pos:end="57:11"><specifier pos:start="57:1" pos:end="57:6">static</specifier> <name pos:start="57:8" pos:end="57:11">void</name></type> <name pos:start="57:13" pos:end="57:23">us897_clean</name> <parameter_list pos:start="57:25" pos:end="57:30">(<parameter pos:start="57:26" pos:end="57:29"><decl pos:start="57:26" pos:end="57:29"><type pos:start="57:26" pos:end="57:29"><name pos:start="57:26" pos:end="57:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="58:1" pos:end="59:1">{<block_content>
</block_content>}</block></function>

<function pos:start="61:1" pos:end="78:1"><type pos:start="61:1" pos:end="61:10"><specifier pos:start="61:1" pos:end="61:6">static</specifier> <name pos:start="61:8" pos:end="61:10">int</name></type> <name pos:start="61:12" pos:end="61:29">us897_start_server</name> <parameter_list pos:start="61:31" pos:end="61:58">(<parameter pos:start="61:32" pos:end="61:48"><decl pos:start="61:32" pos:end="61:48"><type pos:start="61:32" pos:end="61:48"><name pos:start="61:32" pos:end="61:34">int</name></type> <name pos:start="61:36" pos:end="61:48">manual_enroll</name></decl></parameter>, <parameter pos:start="61:51" pos:end="61:57"><decl pos:start="61:51" pos:end="61:57"><type pos:start="61:51" pos:end="61:57"><name pos:start="61:51" pos:end="61:53">int</name></type> <name pos:start="61:55" pos:end="61:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="62:1" pos:end="78:1">{<block_content pos:start="63:5" pos:end="77:14">
    <decl_stmt pos:start="63:5" pos:end="63:11"><decl pos:start="63:5" pos:end="63:10"><type pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:7">int</name></type> <name pos:start="63:9" pos:end="63:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="65:5" pos:end="74:23"><expr pos:start="65:5" pos:end="74:22"><name pos:start="65:5" pos:end="65:6">rv</name> <operator pos:start="65:8" pos:end="65:8">=</operator> <call pos:start="65:10" pos:end="74:22"><name pos:start="65:10" pos:end="65:17">st_start</name><argument_list pos:start="65:18" pos:end="74:22">(<argument pos:start="65:19" pos:end="65:35"><expr pos:start="65:19" pos:end="65:35"><name pos:start="65:19" pos:end="65:35">US897_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="66:19" pos:end="66:38"><expr pos:start="66:19" pos:end="66:38"><name pos:start="66:19" pos:end="66:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="67:19" pos:end="67:38"><expr pos:start="67:19" pos:end="67:38"><name pos:start="67:19" pos:end="67:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="68:19" pos:end="68:36"><expr pos:start="68:19" pos:end="68:36"><literal type="string" pos:start="68:19" pos:end="68:36">"US897 test realm"</literal></expr></argument>,
	          <argument pos:start="69:19" pos:end="69:31"><expr pos:start="69:19" pos:end="69:31"><name pos:start="69:19" pos:end="69:31">US897_CACERTS</name></expr></argument>,
	          <argument pos:start="70:19" pos:end="70:35"><expr pos:start="70:19" pos:end="70:35"><name pos:start="70:19" pos:end="70:35">US897_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="71:19" pos:end="71:39"><expr pos:start="71:19" pos:end="71:39"><literal type="string" pos:start="71:19" pos:end="71:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="72:19" pos:end="72:31"><expr pos:start="72:19" pos:end="72:31"><name pos:start="72:19" pos:end="72:31">manual_enroll</name></expr></argument>,
		  <argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr></argument>,
		  <argument pos:start="74:19" pos:end="74:21"><expr pos:start="74:19" pos:end="74:21"><name pos:start="74:19" pos:end="74:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="76:5" pos:end="76:13"><expr pos:start="76:5" pos:end="76:12"><call pos:start="76:5" pos:end="76:12"><name pos:start="76:5" pos:end="76:9">SLEEP</name><argument_list pos:start="76:10" pos:end="76:12">(<argument pos:start="76:11" pos:end="76:11"><expr pos:start="76:11" pos:end="76:11"><literal type="number" pos:start="76:11" pos:end="76:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="77:5" pos:end="77:14">return <expr pos:start="77:12" pos:end="77:13"><name pos:start="77:12" pos:end="77:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="81:1" pos:end="85:3">/*
 * This routine is called when CUnit initializes this test
 * suite. 
 * 1. Generate the keypair to be used for this EST Client UT suite
 */</comment>
<function pos:start="86:1" pos:end="113:1"><type pos:start="86:1" pos:end="86:10"><specifier pos:start="86:1" pos:end="86:6">static</specifier> <name pos:start="86:8" pos:end="86:10">int</name></type> <name pos:start="86:12" pos:end="86:27">us897_init_suite</name> <parameter_list pos:start="86:29" pos:end="86:34">(<parameter pos:start="86:30" pos:end="86:33"><decl pos:start="86:30" pos:end="86:33"><type pos:start="86:30" pos:end="86:33"><name pos:start="86:30" pos:end="86:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="87:1" pos:end="113:1">{<block_content pos:start="88:5" pos:end="112:14">
    <decl_stmt pos:start="88:5" pos:end="88:15"><decl pos:start="88:5" pos:end="88:14"><type pos:start="88:5" pos:end="88:7"><name pos:start="88:5" pos:end="88:7">int</name></type> <name pos:start="88:9" pos:end="88:10">rv</name> <init pos:start="88:12" pos:end="88:14">= <expr pos:start="88:14" pos:end="88:14"><literal type="number" pos:start="88:14" pos:end="88:14">0</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt pos:start="90:5" pos:end="90:33"><decl pos:start="90:5" pos:end="90:32"><type pos:start="90:5" pos:end="90:8"><name pos:start="90:5" pos:end="90:8">char</name></type> <name pos:start="90:10" pos:end="90:32"><name pos:start="90:10" pos:end="90:12">cmd</name><index pos:start="90:13" pos:end="90:32">[<expr pos:start="90:14" pos:end="90:31"><name pos:start="90:14" pos:end="90:31">EST_UT_MAX_CMD_LEN</name></expr>]</index></name></decl>;</decl_stmt>    
    <expr_stmt pos:start="91:5" pos:end="91:52"><expr pos:start="91:5" pos:end="91:51"><call pos:start="91:5" pos:end="91:51"><name pos:start="91:5" pos:end="91:10">printf</name><argument_list pos:start="91:11" pos:end="91:51">(<argument pos:start="91:12" pos:end="91:50"><expr pos:start="91:12" pos:end="91:50"><literal type="string" pos:start="91:12" pos:end="91:50">"Starting EST Client unit tests. PDB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="93:5" pos:end="95:7">/*
     * gen the keypair to be used for EST Client testing
     */</comment>
    <expr_stmt pos:start="96:5" pos:end="97:83"><expr pos:start="96:5" pos:end="97:82"><call pos:start="96:5" pos:end="97:82"><name pos:start="96:5" pos:end="96:12">snprintf</name><argument_list pos:start="96:13" pos:end="97:82">(<argument pos:start="96:14" pos:end="96:16"><expr pos:start="96:14" pos:end="96:16"><name pos:start="96:14" pos:end="96:16">cmd</name></expr></argument>, <argument pos:start="96:19" pos:end="96:36"><expr pos:start="96:19" pos:end="96:36"><name pos:start="96:19" pos:end="96:36">EST_UT_MAX_CMD_LEN</name></expr></argument>,
             <argument pos:start="97:14" pos:end="97:63"><expr pos:start="97:14" pos:end="97:63"><literal type="string" pos:start="97:14" pos:end="97:63">"openssl ecparam -name prime256v1 -genkey -out %s"</literal></expr></argument>, <argument pos:start="97:66" pos:end="97:81"><expr pos:start="97:66" pos:end="97:81"><name pos:start="97:66" pos:end="97:81">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:24"><expr pos:start="98:5" pos:end="98:23"><call pos:start="98:5" pos:end="98:23"><name pos:start="98:5" pos:end="98:10">printf</name><argument_list pos:start="98:11" pos:end="98:23">(<argument pos:start="98:12" pos:end="98:17"><expr pos:start="98:12" pos:end="98:17"><literal type="string" pos:start="98:12" pos:end="98:17">"%s\n"</literal></expr></argument>, <argument pos:start="98:20" pos:end="98:22"><expr pos:start="98:20" pos:end="98:22"><name pos:start="98:20" pos:end="98:22">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="100:5" pos:end="100:21"><expr pos:start="100:5" pos:end="100:20"><name pos:start="100:5" pos:end="100:6">rv</name> <operator pos:start="100:8" pos:end="100:8">=</operator> <call pos:start="100:10" pos:end="100:20"><name pos:start="100:10" pos:end="100:15">system</name><argument_list pos:start="100:16" pos:end="100:20">(<argument pos:start="100:17" pos:end="100:19"><expr pos:start="100:17" pos:end="100:19"><name pos:start="100:17" pos:end="100:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="102:5" pos:end="104:7">/*
     * start the server for the tests that need to talk to a server
     */</comment>
    <expr_stmt pos:start="105:5" pos:end="105:18"><expr pos:start="105:5" pos:end="105:17"><call pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:15">us897_clean</name><argument_list pos:start="105:16" pos:end="105:17">()</argument_list></call></expr>;</expr_stmt>    
    <comment type="block" pos:start="106:5" pos:end="108:7">/*
     * Start an instance of the EST server
     */</comment>
    <expr_stmt pos:start="109:5" pos:end="109:34"><expr pos:start="109:5" pos:end="109:33"><name pos:start="109:5" pos:end="109:6">rv</name> <operator pos:start="109:8" pos:end="109:8">=</operator> <call pos:start="109:10" pos:end="109:33"><name pos:start="109:10" pos:end="109:27">us897_start_server</name><argument_list pos:start="109:28" pos:end="109:33">(<argument pos:start="109:29" pos:end="109:29"><expr pos:start="109:29" pos:end="109:29"><literal type="number" pos:start="109:29" pos:end="109:29">0</literal></expr></argument>, <argument pos:start="109:32" pos:end="109:32"><expr pos:start="109:32" pos:end="109:32"><literal type="number" pos:start="109:32" pos:end="109:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="110:13"><expr pos:start="110:5" pos:end="110:12"><call pos:start="110:5" pos:end="110:12"><name pos:start="110:5" pos:end="110:9">SLEEP</name><argument_list pos:start="110:10" pos:end="110:12">(<argument pos:start="110:11" pos:end="110:11"><expr pos:start="110:11" pos:end="110:11"><literal type="number" pos:start="110:11" pos:end="110:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="112:5" pos:end="112:14">return <expr pos:start="112:12" pos:end="112:13"><name pos:start="112:12" pos:end="112:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="116:1" pos:end="120:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="121:1" pos:end="126:1"><type pos:start="121:1" pos:end="121:10"><specifier pos:start="121:1" pos:end="121:6">static</specifier> <name pos:start="121:8" pos:end="121:10">int</name></type> <name pos:start="121:12" pos:end="121:30">us897_destroy_suite</name> <parameter_list pos:start="121:32" pos:end="121:37">(<parameter pos:start="121:33" pos:end="121:36"><decl pos:start="121:33" pos:end="121:36"><type pos:start="121:33" pos:end="121:36"><name pos:start="121:33" pos:end="121:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="122:1" pos:end="126:1">{<block_content pos:start="124:5" pos:end="125:13">
    
    <expr_stmt pos:start="124:5" pos:end="124:14"><expr pos:start="124:5" pos:end="124:13"><call pos:start="124:5" pos:end="124:13"><name pos:start="124:5" pos:end="124:11">st_stop</name><argument_list pos:start="124:12" pos:end="124:13">()</argument_list></call></expr>;</expr_stmt>    
    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="128:1" pos:end="130:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="131:1" pos:end="160:1"><type pos:start="131:1" pos:end="131:10"><specifier pos:start="131:1" pos:end="131:6">static</specifier> <name pos:start="131:8" pos:end="131:10">int</name></type> <name pos:start="131:12" pos:end="131:36">client_manual_cert_verify</name><parameter_list pos:start="131:37" pos:end="131:76">(<parameter pos:start="131:38" pos:end="131:51"><decl pos:start="131:38" pos:end="131:51"><type pos:start="131:38" pos:end="131:51"><name pos:start="131:38" pos:end="131:41">X509</name> <modifier pos:start="131:43" pos:end="131:43">*</modifier></type><name pos:start="131:44" pos:end="131:51">cur_cert</name></decl></parameter>, <parameter pos:start="131:54" pos:end="131:75"><decl pos:start="131:54" pos:end="131:75"><type pos:start="131:54" pos:end="131:75"><name pos:start="131:54" pos:end="131:56">int</name></type> <name pos:start="131:58" pos:end="131:75">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="132:1" pos:end="160:1">{<block_content pos:start="133:5" pos:end="159:19">
    <decl_stmt pos:start="133:5" pos:end="133:17"><decl pos:start="133:5" pos:end="133:16"><type pos:start="133:5" pos:end="133:9"><name pos:start="133:5" pos:end="133:7">BIO</name> <modifier pos:start="133:9" pos:end="133:9">*</modifier></type><name pos:start="133:10" pos:end="133:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="134:5" pos:end="134:43"><expr pos:start="134:5" pos:end="134:42"><name pos:start="134:5" pos:end="134:11">bio_err</name><operator pos:start="134:12" pos:end="134:12">=</operator><call pos:start="134:13" pos:end="134:42"><name pos:start="134:13" pos:end="134:22">BIO_new_fp</name><argument_list pos:start="134:23" pos:end="134:42">(<argument pos:start="134:24" pos:end="134:29"><expr pos:start="134:24" pos:end="134:29"><name pos:start="134:24" pos:end="134:29">stderr</name></expr></argument>,<argument pos:start="134:31" pos:end="134:41"><expr pos:start="134:31" pos:end="134:41"><name pos:start="134:31" pos:end="134:41">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="135:5" pos:end="135:20"><decl pos:start="135:5" pos:end="135:19"><type pos:start="135:5" pos:end="135:7"><name pos:start="135:5" pos:end="135:7">int</name></type> <name pos:start="135:9" pos:end="135:15">approve</name> <init pos:start="135:17" pos:end="135:19">= <expr pos:start="135:19" pos:end="135:19"><literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr></init></decl>;</decl_stmt> 
    
    <comment type="block" pos:start="137:5" pos:end="139:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="140:5" pos:end="142:62"><expr pos:start="140:5" pos:end="142:61"><call pos:start="140:5" pos:end="142:61"><name pos:start="140:5" pos:end="140:10">printf</name><argument_list pos:start="140:11" pos:end="142:61">(<argument pos:start="140:12" pos:end="140:117"><expr pos:start="140:12" pos:end="140:117"><literal type="string" pos:start="140:12" pos:end="140:117">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
           <argument pos:start="141:12" pos:end="141:23"><expr pos:start="141:12" pos:end="141:23"><name pos:start="141:12" pos:end="141:23">__FUNCTION__</name></expr></argument>, <argument pos:start="141:26" pos:end="141:43"><expr pos:start="141:26" pos:end="141:43"><name pos:start="141:26" pos:end="141:43">openssl_cert_error</name></expr></argument>,
           <argument pos:start="142:12" pos:end="142:60"><expr pos:start="142:12" pos:end="142:60"><call pos:start="142:12" pos:end="142:60"><name pos:start="142:12" pos:end="142:40">X509_verify_cert_error_string</name><argument_list pos:start="142:41" pos:end="142:60">(<argument pos:start="142:42" pos:end="142:59"><expr pos:start="142:42" pos:end="142:59"><name pos:start="142:42" pos:end="142:59">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="144:5" pos:end="144:30"><expr pos:start="144:5" pos:end="144:29"><call pos:start="144:5" pos:end="144:29"><name pos:start="144:5" pos:end="144:10">printf</name><argument_list pos:start="144:11" pos:end="144:29">(<argument pos:start="144:12" pos:end="144:28"><expr pos:start="144:12" pos:end="144:28"><literal type="string" pos:start="144:12" pos:end="144:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="145:5" pos:end="145:35"><expr pos:start="145:5" pos:end="145:34"><call pos:start="145:5" pos:end="145:34"><name pos:start="145:5" pos:end="145:17">X509_print_fp</name><argument_list pos:start="145:18" pos:end="145:34">(<argument pos:start="145:19" pos:end="145:24"><expr pos:start="145:19" pos:end="145:24"><name pos:start="145:19" pos:end="145:24">stdout</name></expr></argument>,<argument pos:start="145:26" pos:end="145:33"><expr pos:start="145:26" pos:end="145:33"><name pos:start="145:26" pos:end="145:33">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="146:5" pos:end="150:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="151:5" pos:end="151:74"><expr pos:start="151:5" pos:end="151:73"><call pos:start="151:5" pos:end="151:73"><name pos:start="151:5" pos:end="151:24">X509_signature_print</name><argument_list pos:start="151:25" pos:end="151:73">(<argument pos:start="151:26" pos:end="151:32"><expr pos:start="151:26" pos:end="151:32"><name pos:start="151:26" pos:end="151:32">bio_err</name></expr></argument>, <argument pos:start="151:35" pos:end="151:51"><expr pos:start="151:35" pos:end="151:51"><name pos:start="151:35" pos:end="151:51"><name pos:start="151:35" pos:end="151:42">cur_cert</name><operator pos:start="151:43" pos:end="151:44">-&gt;</operator><name pos:start="151:45" pos:end="151:51">sig_alg</name></name></expr></argument>, <argument pos:start="151:54" pos:end="151:72"><expr pos:start="151:54" pos:end="151:72"><name pos:start="151:54" pos:end="151:72"><name pos:start="151:54" pos:end="151:61">cur_cert</name><operator pos:start="151:62" pos:end="151:63">-&gt;</operator><name pos:start="151:64" pos:end="151:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="155:5"><if pos:start="153:5" pos:end="155:5">if <condition pos:start="153:8" pos:end="153:59">(<expr pos:start="153:9" pos:end="153:58"><name pos:start="153:9" pos:end="153:26">openssl_cert_error</name> <operator pos:start="153:28" pos:end="153:29">==</operator> <name pos:start="153:31" pos:end="153:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="153:61" pos:end="155:5">{<block_content pos:start="154:9" pos:end="154:20">
        <expr_stmt pos:start="154:9" pos:end="154:20"><expr pos:start="154:9" pos:end="154:19"><name pos:start="154:9" pos:end="154:15">approve</name> <operator pos:start="154:17" pos:end="154:17">=</operator> <literal type="number" pos:start="154:19" pos:end="154:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt pos:start="157:5" pos:end="157:22"><expr pos:start="157:5" pos:end="157:21"><call pos:start="157:5" pos:end="157:21"><name pos:start="157:5" pos:end="157:12">BIO_free</name><argument_list pos:start="157:13" pos:end="157:21">(<argument pos:start="157:14" pos:end="157:20"><expr pos:start="157:14" pos:end="157:20"><name pos:start="157:14" pos:end="157:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="159:5" pos:end="159:19">return <expr pos:start="159:12" pos:end="159:18"><name pos:start="159:12" pos:end="159:18">approve</name></expr>;</return>
</block_content>}</block></function>
    

<comment type="block" pos:start="163:1" pos:end="167:3">/*
 * This test case initializes an EST client context
 * using local CA certs, no client cert, and a valid public key,
 * no userid and password.
 */</comment>
<function pos:start="168:1" pos:end="212:1"><type pos:start="168:1" pos:end="168:11"><specifier pos:start="168:1" pos:end="168:6">static</specifier> <name pos:start="168:8" pos:end="168:11">void</name></type> <name pos:start="168:13" pos:end="168:23">us897_test1</name> <parameter_list pos:start="168:25" pos:end="168:30">(<parameter pos:start="168:26" pos:end="168:29"><decl pos:start="168:26" pos:end="168:29"><type pos:start="168:26" pos:end="168:29"><name pos:start="168:26" pos:end="168:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="169:1" pos:end="212:1">{<block_content pos:start="170:5" pos:end="211:5">
    <decl_stmt pos:start="170:5" pos:end="170:18"><decl pos:start="170:5" pos:end="170:17"><type pos:start="170:5" pos:end="170:13"><name pos:start="170:5" pos:end="170:11">EST_CTX</name> <modifier pos:start="170:13" pos:end="170:13">*</modifier></type><name pos:start="170:14" pos:end="170:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="171:5" pos:end="171:31"><decl pos:start="171:5" pos:end="171:30"><type pos:start="171:5" pos:end="171:19"><name pos:start="171:5" pos:end="171:12">unsigned</name> <name pos:start="171:14" pos:end="171:17">char</name> <modifier pos:start="171:19" pos:end="171:19">*</modifier></type><name pos:start="171:20" pos:end="171:23">pkey</name> <init pos:start="171:25" pos:end="171:30">= <expr pos:start="171:27" pos:end="171:30"><name pos:start="171:27" pos:end="171:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="172:5" pos:end="172:34"><decl pos:start="172:5" pos:end="172:33"><type pos:start="172:5" pos:end="172:19"><name pos:start="172:5" pos:end="172:12">unsigned</name> <name pos:start="172:14" pos:end="172:17">char</name> <modifier pos:start="172:19" pos:end="172:19">*</modifier></type><name pos:start="172:20" pos:end="172:26">cacerts</name> <init pos:start="172:28" pos:end="172:33">= <expr pos:start="172:30" pos:end="172:33"><name pos:start="172:30" pos:end="172:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="173:5" pos:end="173:24"><decl pos:start="173:5" pos:end="173:23"><type pos:start="173:5" pos:end="173:7"><name pos:start="173:5" pos:end="173:7">int</name></type> <name pos:start="173:9" pos:end="173:19">cacerts_len</name> <init pos:start="173:21" pos:end="173:23">= <expr pos:start="173:23" pos:end="173:23"><literal type="number" pos:start="173:23" pos:end="173:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="174:5" pos:end="174:17"><decl pos:start="174:5" pos:end="174:16"><type pos:start="174:5" pos:end="174:13"><name pos:start="174:5" pos:end="174:13">EST_ERROR</name></type> <name pos:start="174:15" pos:end="174:16">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="175:5" pos:end="175:23"><decl pos:start="175:5" pos:end="175:22"><type pos:start="175:5" pos:end="175:14"><name pos:start="175:5" pos:end="175:12">EVP_PKEY</name> <modifier pos:start="175:14" pos:end="175:14">*</modifier></type><name pos:start="175:15" pos:end="175:22">priv_key</name></decl>;</decl_stmt>
    
    <expr_stmt pos:start="177:5" pos:end="177:13"><expr pos:start="177:5" pos:end="177:12"><call pos:start="177:5" pos:end="177:12"><name pos:start="177:5" pos:end="177:9">SLEEP</name><argument_list pos:start="177:10" pos:end="177:12">(<argument pos:start="177:11" pos:end="177:11"><expr pos:start="177:11" pos:end="177:11"><literal type="number" pos:start="177:11" pos:end="177:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="179:5" pos:end="181:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="182:5" pos:end="182:63"><expr pos:start="182:5" pos:end="182:62"><name pos:start="182:5" pos:end="182:15">cacerts_len</name> <operator pos:start="182:17" pos:end="182:17">=</operator> <call pos:start="182:19" pos:end="182:62"><name pos:start="182:19" pos:end="182:34">read_binary_file</name><argument_list pos:start="182:35" pos:end="182:62">(<argument pos:start="182:36" pos:end="182:51"><expr pos:start="182:36" pos:end="182:51"><name pos:start="182:36" pos:end="182:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="182:54" pos:end="182:61"><expr pos:start="182:54" pos:end="182:61"><operator pos:start="182:54" pos:end="182:54">&amp;</operator><name pos:start="182:55" pos:end="182:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="183:31"><expr pos:start="183:5" pos:end="183:30"><call pos:start="183:5" pos:end="183:30"><name pos:start="183:5" pos:end="183:13">CU_ASSERT</name><argument_list pos:start="183:14" pos:end="183:30">(<argument pos:start="183:15" pos:end="183:29"><expr pos:start="183:15" pos:end="183:29"><name pos:start="183:15" pos:end="183:25">cacerts_len</name> <operator pos:start="183:27" pos:end="183:27">&gt;</operator> <literal type="number" pos:start="183:29" pos:end="183:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="185:5" pos:end="187:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="188:5" pos:end="188:50"><expr pos:start="188:5" pos:end="188:49"><name pos:start="188:5" pos:end="188:12">priv_key</name> <operator pos:start="188:14" pos:end="188:14">=</operator> <call pos:start="188:16" pos:end="188:49"><name pos:start="188:16" pos:end="188:31">read_private_key</name><argument_list pos:start="188:32" pos:end="188:49">(<argument pos:start="188:33" pos:end="188:48"><expr pos:start="188:33" pos:end="188:48"><name pos:start="188:33" pos:end="188:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="189:5" pos:end="192:5"><if pos:start="189:5" pos:end="192:5">if <condition pos:start="189:8" pos:end="189:25">(<expr pos:start="189:9" pos:end="189:24"><name pos:start="189:9" pos:end="189:16">priv_key</name> <operator pos:start="189:18" pos:end="189:19">==</operator> <name pos:start="189:21" pos:end="189:24">NULL</name></expr>)</condition> <block pos:start="189:27" pos:end="192:5">{<block_content pos:start="190:9" pos:end="191:15">
	<expr_stmt pos:start="190:9" pos:end="190:80"><expr pos:start="190:9" pos:end="190:79"><call pos:start="190:9" pos:end="190:79"><name pos:start="190:9" pos:end="190:14">printf</name><argument_list pos:start="190:15" pos:end="190:79">(<argument pos:start="190:16" pos:end="190:60"><expr pos:start="190:16" pos:end="190:60"><literal type="string" pos:start="190:16" pos:end="190:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="190:63" pos:end="190:78"><expr pos:start="190:63" pos:end="190:78"><name pos:start="190:63" pos:end="190:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="191:9" pos:end="191:15">return;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="194:5" pos:end="194:44"><expr pos:start="194:5" pos:end="194:43"><call pos:start="194:5" pos:end="194:43"><name pos:start="194:5" pos:end="194:19">est_init_logger</name><argument_list pos:start="194:20" pos:end="194:43">(<argument pos:start="194:21" pos:end="194:36"><expr pos:start="194:21" pos:end="194:36"><name pos:start="194:21" pos:end="194:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="194:39" pos:end="194:42"><expr pos:start="194:39" pos:end="194:42"><name pos:start="194:39" pos:end="194:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="195:5" pos:end="196:54"><expr pos:start="195:5" pos:end="196:53"><name pos:start="195:5" pos:end="195:8">ectx</name> <operator pos:start="195:10" pos:end="195:10">=</operator> <call pos:start="195:12" pos:end="196:53"><name pos:start="195:12" pos:end="195:26">est_client_init</name><argument_list pos:start="195:27" pos:end="196:53">(<argument pos:start="195:28" pos:end="195:34"><expr pos:start="195:28" pos:end="195:34"><name pos:start="195:28" pos:end="195:34">cacerts</name></expr></argument>, <argument pos:start="195:37" pos:end="195:47"><expr pos:start="195:37" pos:end="195:47"><name pos:start="195:37" pos:end="195:47">cacerts_len</name></expr></argument>, <argument pos:start="195:50" pos:end="195:68"><expr pos:start="195:50" pos:end="195:68"><name pos:start="195:50" pos:end="195:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="196:28" pos:end="196:52"><expr pos:start="196:28" pos:end="196:52"><name pos:start="196:28" pos:end="196:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="197:5" pos:end="197:28"><expr pos:start="197:5" pos:end="197:27"><call pos:start="197:5" pos:end="197:27"><name pos:start="197:5" pos:end="197:13">CU_ASSERT</name><argument_list pos:start="197:14" pos:end="197:27">(<argument pos:start="197:15" pos:end="197:26"><expr pos:start="197:15" pos:end="197:26"><name pos:start="197:15" pos:end="197:18">ectx</name> <operator pos:start="197:20" pos:end="197:21">!=</operator> <name pos:start="197:23" pos:end="197:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:59"><expr pos:start="199:5" pos:end="199:58"><name pos:start="199:5" pos:end="199:6">rc</name> <operator pos:start="199:8" pos:end="199:8">=</operator> <call pos:start="199:10" pos:end="199:58"><name pos:start="199:10" pos:end="199:28">est_client_set_auth</name><argument_list pos:start="199:29" pos:end="199:58">(<argument pos:start="199:30" pos:end="199:33"><expr pos:start="199:30" pos:end="199:33"><name pos:start="199:30" pos:end="199:33">ectx</name></expr></argument>, <argument pos:start="199:36" pos:end="199:37"><expr pos:start="199:36" pos:end="199:37"><literal type="string" pos:start="199:36" pos:end="199:37">""</literal></expr></argument>, <argument pos:start="199:40" pos:end="199:41"><expr pos:start="199:40" pos:end="199:41"><literal type="string" pos:start="199:40" pos:end="199:41">""</literal></expr></argument>, <argument pos:start="199:44" pos:end="199:47"><expr pos:start="199:44" pos:end="199:47"><name pos:start="199:44" pos:end="199:47">NULL</name></expr></argument>, <argument pos:start="199:50" pos:end="199:57"><expr pos:start="199:50" pos:end="199:57"><name pos:start="199:50" pos:end="199:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                             
    <expr_stmt pos:start="201:5" pos:end="201:34"><expr pos:start="201:5" pos:end="201:33"><call pos:start="201:5" pos:end="201:33"><name pos:start="201:5" pos:end="201:13">CU_ASSERT</name><argument_list pos:start="201:14" pos:end="201:33">(<argument pos:start="201:15" pos:end="201:32"><expr pos:start="201:15" pos:end="201:32"><name pos:start="201:15" pos:end="201:16">rc</name> <operator pos:start="201:18" pos:end="201:19">==</operator> <name pos:start="201:21" pos:end="201:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="203:5" pos:end="205:5"><if pos:start="203:5" pos:end="205:5">if <condition pos:start="203:8" pos:end="203:13">(<expr pos:start="203:9" pos:end="203:12"><name pos:start="203:9" pos:end="203:12">ectx</name></expr>)</condition> <block pos:start="203:15" pos:end="205:5">{<block_content pos:start="204:9" pos:end="204:26">
        <expr_stmt pos:start="204:9" pos:end="204:26"><expr pos:start="204:9" pos:end="204:25"><call pos:start="204:9" pos:end="204:25"><name pos:start="204:9" pos:end="204:19">est_destroy</name><argument_list pos:start="204:20" pos:end="204:25">(<argument pos:start="204:21" pos:end="204:24"><expr pos:start="204:21" pos:end="204:24"><name pos:start="204:21" pos:end="204:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="206:5" pos:end="208:5"><if pos:start="206:5" pos:end="208:5">if <condition pos:start="206:8" pos:end="206:16">(<expr pos:start="206:9" pos:end="206:15"><name pos:start="206:9" pos:end="206:15">cacerts</name></expr>)</condition> <block pos:start="206:18" pos:end="208:5">{<block_content pos:start="207:9" pos:end="207:22">
        <expr_stmt pos:start="207:9" pos:end="207:22"><expr pos:start="207:9" pos:end="207:21"><call pos:start="207:9" pos:end="207:21"><name pos:start="207:9" pos:end="207:12">free</name><argument_list pos:start="207:13" pos:end="207:21">(<argument pos:start="207:14" pos:end="207:20"><expr pos:start="207:14" pos:end="207:20"><name pos:start="207:14" pos:end="207:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <if_stmt pos:start="209:5" pos:end="211:5"><if pos:start="209:5" pos:end="211:5">if <condition pos:start="209:8" pos:end="209:13">(<expr pos:start="209:9" pos:end="209:12"><name pos:start="209:9" pos:end="209:12">pkey</name></expr>)</condition> <block pos:start="209:15" pos:end="211:5">{<block_content pos:start="210:9" pos:end="210:19">
        <expr_stmt pos:start="210:9" pos:end="210:19"><expr pos:start="210:9" pos:end="210:18"><call pos:start="210:9" pos:end="210:18"><name pos:start="210:9" pos:end="210:12">free</name><argument_list pos:start="210:13" pos:end="210:18">(<argument pos:start="210:14" pos:end="210:17"><expr pos:start="210:14" pos:end="210:17"><name pos:start="210:14" pos:end="210:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="215:1" pos:end="219:3">/*
 * This test case initializes an EST client context
 * using no local CA certs.  This is expected to be a successful initialization
 * since the local CA trust anchor certs are not mandatory.
 */</comment>
<function pos:start="220:1" pos:end="257:1"><type pos:start="220:1" pos:end="220:11"><specifier pos:start="220:1" pos:end="220:6">static</specifier> <name pos:start="220:8" pos:end="220:11">void</name></type> <name pos:start="220:13" pos:end="220:23">us897_test2</name> <parameter_list pos:start="220:25" pos:end="220:30">(<parameter pos:start="220:26" pos:end="220:29"><decl pos:start="220:26" pos:end="220:29"><type pos:start="220:26" pos:end="220:29"><name pos:start="220:26" pos:end="220:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="221:1" pos:end="257:1">{<block_content pos:start="222:5" pos:end="256:5">
    <decl_stmt pos:start="222:5" pos:end="222:18"><decl pos:start="222:5" pos:end="222:17"><type pos:start="222:5" pos:end="222:13"><name pos:start="222:5" pos:end="222:11">EST_CTX</name> <modifier pos:start="222:13" pos:end="222:13">*</modifier></type><name pos:start="222:14" pos:end="222:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="223:5" pos:end="223:31"><decl pos:start="223:5" pos:end="223:30"><type pos:start="223:5" pos:end="223:19"><name pos:start="223:5" pos:end="223:12">unsigned</name> <name pos:start="223:14" pos:end="223:17">char</name> <modifier pos:start="223:19" pos:end="223:19">*</modifier></type><name pos:start="223:20" pos:end="223:23">pkey</name> <init pos:start="223:25" pos:end="223:30">= <expr pos:start="223:27" pos:end="223:30"><name pos:start="223:27" pos:end="223:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="224:5" pos:end="224:34"><decl pos:start="224:5" pos:end="224:33"><type pos:start="224:5" pos:end="224:19"><name pos:start="224:5" pos:end="224:12">unsigned</name> <name pos:start="224:14" pos:end="224:17">char</name> <modifier pos:start="224:19" pos:end="224:19">*</modifier></type><name pos:start="224:20" pos:end="224:26">cacerts</name> <init pos:start="224:28" pos:end="224:33">= <expr pos:start="224:30" pos:end="224:33"><name pos:start="224:30" pos:end="224:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="225:5" pos:end="225:24"><decl pos:start="225:5" pos:end="225:23"><type pos:start="225:5" pos:end="225:7"><name pos:start="225:5" pos:end="225:7">int</name></type> <name pos:start="225:9" pos:end="225:19">cacerts_len</name> <init pos:start="225:21" pos:end="225:23">= <expr pos:start="225:23" pos:end="225:23"><literal type="number" pos:start="225:23" pos:end="225:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="226:5" pos:end="226:23"><decl pos:start="226:5" pos:end="226:22"><type pos:start="226:5" pos:end="226:14"><name pos:start="226:5" pos:end="226:12">EVP_PKEY</name> <modifier pos:start="226:14" pos:end="226:14">*</modifier></type><name pos:start="226:15" pos:end="226:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="228:5" pos:end="228:13"><expr pos:start="228:5" pos:end="228:12"><call pos:start="228:5" pos:end="228:12"><name pos:start="228:5" pos:end="228:9">SLEEP</name><argument_list pos:start="228:10" pos:end="228:12">(<argument pos:start="228:11" pos:end="228:11"><expr pos:start="228:11" pos:end="228:11"><literal type="number" pos:start="228:11" pos:end="228:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="230:5" pos:end="232:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="233:5" pos:end="233:63"><expr pos:start="233:5" pos:end="233:62"><name pos:start="233:5" pos:end="233:15">cacerts_len</name> <operator pos:start="233:17" pos:end="233:17">=</operator> <call pos:start="233:19" pos:end="233:62"><name pos:start="233:19" pos:end="233:34">read_binary_file</name><argument_list pos:start="233:35" pos:end="233:62">(<argument pos:start="233:36" pos:end="233:51"><expr pos:start="233:36" pos:end="233:51"><name pos:start="233:36" pos:end="233:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="233:54" pos:end="233:61"><expr pos:start="233:54" pos:end="233:61"><operator pos:start="233:54" pos:end="233:54">&amp;</operator><name pos:start="233:55" pos:end="233:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="234:5" pos:end="234:31"><expr pos:start="234:5" pos:end="234:30"><call pos:start="234:5" pos:end="234:30"><name pos:start="234:5" pos:end="234:13">CU_ASSERT</name><argument_list pos:start="234:14" pos:end="234:30">(<argument pos:start="234:15" pos:end="234:29"><expr pos:start="234:15" pos:end="234:29"><name pos:start="234:15" pos:end="234:25">cacerts_len</name> <operator pos:start="234:27" pos:end="234:27">&gt;</operator> <literal type="number" pos:start="234:29" pos:end="234:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="236:5" pos:end="238:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="239:5" pos:end="239:50"><expr pos:start="239:5" pos:end="239:49"><name pos:start="239:5" pos:end="239:12">priv_key</name> <operator pos:start="239:14" pos:end="239:14">=</operator> <call pos:start="239:16" pos:end="239:49"><name pos:start="239:16" pos:end="239:31">read_private_key</name><argument_list pos:start="239:32" pos:end="239:49">(<argument pos:start="239:33" pos:end="239:48"><expr pos:start="239:33" pos:end="239:48"><name pos:start="239:33" pos:end="239:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="240:5" pos:end="243:5"><if pos:start="240:5" pos:end="243:5">if <condition pos:start="240:8" pos:end="240:25">(<expr pos:start="240:9" pos:end="240:24"><name pos:start="240:9" pos:end="240:16">priv_key</name> <operator pos:start="240:18" pos:end="240:19">==</operator> <name pos:start="240:21" pos:end="240:24">NULL</name></expr>)</condition> <block pos:start="240:27" pos:end="243:5">{<block_content pos:start="241:9" pos:end="242:15">
	<expr_stmt pos:start="241:9" pos:end="241:80"><expr pos:start="241:9" pos:end="241:79"><call pos:start="241:9" pos:end="241:79"><name pos:start="241:9" pos:end="241:14">printf</name><argument_list pos:start="241:15" pos:end="241:79">(<argument pos:start="241:16" pos:end="241:60"><expr pos:start="241:16" pos:end="241:60"><literal type="string" pos:start="241:16" pos:end="241:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="241:63" pos:end="241:78"><expr pos:start="241:63" pos:end="241:78"><name pos:start="241:63" pos:end="241:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="242:9" pos:end="242:15">return;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="245:5" pos:end="245:84"><expr pos:start="245:5" pos:end="245:83"><name pos:start="245:5" pos:end="245:8">ectx</name> <operator pos:start="245:10" pos:end="245:10">=</operator> <call pos:start="245:12" pos:end="245:83"><name pos:start="245:12" pos:end="245:26">est_client_init</name><argument_list pos:start="245:27" pos:end="245:83">(<argument pos:start="245:28" pos:end="245:31"><expr pos:start="245:28" pos:end="245:31"><name pos:start="245:28" pos:end="245:31">NULL</name></expr></argument>, <argument pos:start="245:34" pos:end="245:34"><expr pos:start="245:34" pos:end="245:34"><literal type="number" pos:start="245:34" pos:end="245:34">0</literal></expr></argument>, <argument pos:start="245:37" pos:end="245:55"><expr pos:start="245:37" pos:end="245:55"><name pos:start="245:37" pos:end="245:55">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="245:58" pos:end="245:82"><expr pos:start="245:58" pos:end="245:82"><name pos:start="245:58" pos:end="245:82">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="246:5" pos:end="246:28"><expr pos:start="246:5" pos:end="246:27"><call pos:start="246:5" pos:end="246:27"><name pos:start="246:5" pos:end="246:13">CU_ASSERT</name><argument_list pos:start="246:14" pos:end="246:27">(<argument pos:start="246:15" pos:end="246:26"><expr pos:start="246:15" pos:end="246:26"><name pos:start="246:15" pos:end="246:18">ectx</name> <operator pos:start="246:20" pos:end="246:21">!=</operator> <name pos:start="246:23" pos:end="246:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="248:5" pos:end="250:5"><if pos:start="248:5" pos:end="250:5">if <condition pos:start="248:8" pos:end="248:13">(<expr pos:start="248:9" pos:end="248:12"><name pos:start="248:9" pos:end="248:12">ectx</name></expr>)</condition> <block pos:start="248:15" pos:end="250:5">{<block_content pos:start="249:9" pos:end="249:26">
        <expr_stmt pos:start="249:9" pos:end="249:26"><expr pos:start="249:9" pos:end="249:25"><call pos:start="249:9" pos:end="249:25"><name pos:start="249:9" pos:end="249:19">est_destroy</name><argument_list pos:start="249:20" pos:end="249:25">(<argument pos:start="249:21" pos:end="249:24"><expr pos:start="249:21" pos:end="249:24"><name pos:start="249:21" pos:end="249:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <if_stmt pos:start="251:5" pos:end="253:5"><if pos:start="251:5" pos:end="253:5">if <condition pos:start="251:8" pos:end="251:16">(<expr pos:start="251:9" pos:end="251:15"><name pos:start="251:9" pos:end="251:15">cacerts</name></expr>)</condition> <block pos:start="251:18" pos:end="253:5">{<block_content pos:start="252:9" pos:end="252:22">
        <expr_stmt pos:start="252:9" pos:end="252:22"><expr pos:start="252:9" pos:end="252:21"><call pos:start="252:9" pos:end="252:21"><name pos:start="252:9" pos:end="252:12">free</name><argument_list pos:start="252:13" pos:end="252:21">(<argument pos:start="252:14" pos:end="252:20"><expr pos:start="252:14" pos:end="252:20"><name pos:start="252:14" pos:end="252:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="254:5" pos:end="256:5"><if pos:start="254:5" pos:end="256:5">if <condition pos:start="254:8" pos:end="254:13">(<expr pos:start="254:9" pos:end="254:12"><name pos:start="254:9" pos:end="254:12">pkey</name></expr>)</condition> <block pos:start="254:15" pos:end="256:5">{<block_content pos:start="255:9" pos:end="255:19">
        <expr_stmt pos:start="255:9" pos:end="255:19"><expr pos:start="255:9" pos:end="255:18"><call pos:start="255:9" pos:end="255:18"><name pos:start="255:9" pos:end="255:12">free</name><argument_list pos:start="255:13" pos:end="255:18">(<argument pos:start="255:14" pos:end="255:17"><expr pos:start="255:14" pos:end="255:17"><name pos:start="255:14" pos:end="255:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="260:1" pos:end="264:3">/*
 * This test case initializes an EST client context
 * using a local CA cert, no client cert,
 * and a valid public key, no userid and password.
 */</comment>
<function pos:start="265:1" pos:end="357:0"><type pos:start="265:1" pos:end="265:11"><specifier pos:start="265:1" pos:end="265:6">static</specifier> <name pos:start="265:8" pos:end="265:11">void</name></type> <name pos:start="265:13" pos:end="265:23">us897_test3</name> <parameter_list pos:start="265:25" pos:end="265:30">(<parameter pos:start="265:26" pos:end="265:29"><decl pos:start="265:26" pos:end="265:29"><type pos:start="265:26" pos:end="265:29"><name pos:start="265:26" pos:end="265:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="266:1" pos:end="357:0">{<block_content pos:start="267:5" pos:end="306:5">
    <decl_stmt pos:start="267:5" pos:end="267:18"><decl pos:start="267:5" pos:end="267:17"><type pos:start="267:5" pos:end="267:13"><name pos:start="267:5" pos:end="267:11">EST_CTX</name> <modifier pos:start="267:13" pos:end="267:13">*</modifier></type><name pos:start="267:14" pos:end="267:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="268:5" pos:end="268:31"><decl pos:start="268:5" pos:end="268:30"><type pos:start="268:5" pos:end="268:19"><name pos:start="268:5" pos:end="268:12">unsigned</name> <name pos:start="268:14" pos:end="268:17">char</name> <modifier pos:start="268:19" pos:end="268:19">*</modifier></type><name pos:start="268:20" pos:end="268:23">pkey</name> <init pos:start="268:25" pos:end="268:30">= <expr pos:start="268:27" pos:end="268:30"><name pos:start="268:27" pos:end="268:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="269:5" pos:end="269:34"><decl pos:start="269:5" pos:end="269:33"><type pos:start="269:5" pos:end="269:19"><name pos:start="269:5" pos:end="269:12">unsigned</name> <name pos:start="269:14" pos:end="269:17">char</name> <modifier pos:start="269:19" pos:end="269:19">*</modifier></type><name pos:start="269:20" pos:end="269:26">cacerts</name> <init pos:start="269:28" pos:end="269:33">= <expr pos:start="269:30" pos:end="269:33"><name pos:start="269:30" pos:end="269:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="270:5" pos:end="270:24"><decl pos:start="270:5" pos:end="270:23"><type pos:start="270:5" pos:end="270:7"><name pos:start="270:5" pos:end="270:7">int</name></type> <name pos:start="270:9" pos:end="270:19">cacerts_len</name> <init pos:start="270:21" pos:end="270:23">= <expr pos:start="270:23" pos:end="270:23"><literal type="number" pos:start="270:23" pos:end="270:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="271:5" pos:end="271:17"><decl pos:start="271:5" pos:end="271:16"><type pos:start="271:5" pos:end="271:13"><name pos:start="271:5" pos:end="271:13">EST_ERROR</name></type> <name pos:start="271:15" pos:end="271:16">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="272:5" pos:end="272:23"><decl pos:start="272:5" pos:end="272:22"><type pos:start="272:5" pos:end="272:14"><name pos:start="272:5" pos:end="272:12">EVP_PKEY</name> <modifier pos:start="272:14" pos:end="272:14">*</modifier></type><name pos:start="272:15" pos:end="272:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="274:5" pos:end="274:13"><expr pos:start="274:5" pos:end="274:12"><call pos:start="274:5" pos:end="274:12"><name pos:start="274:5" pos:end="274:9">SLEEP</name><argument_list pos:start="274:10" pos:end="274:12">(<argument pos:start="274:11" pos:end="274:11"><expr pos:start="274:11" pos:end="274:11"><literal type="number" pos:start="274:11" pos:end="274:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="276:5" pos:end="278:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="279:5" pos:end="279:63"><expr pos:start="279:5" pos:end="279:62"><name pos:start="279:5" pos:end="279:15">cacerts_len</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <call pos:start="279:19" pos:end="279:62"><name pos:start="279:19" pos:end="279:34">read_binary_file</name><argument_list pos:start="279:35" pos:end="279:62">(<argument pos:start="279:36" pos:end="279:51"><expr pos:start="279:36" pos:end="279:51"><name pos:start="279:36" pos:end="279:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="279:54" pos:end="279:61"><expr pos:start="279:54" pos:end="279:61"><operator pos:start="279:54" pos:end="279:54">&amp;</operator><name pos:start="279:55" pos:end="279:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="280:5" pos:end="280:31"><expr pos:start="280:5" pos:end="280:30"><call pos:start="280:5" pos:end="280:30"><name pos:start="280:5" pos:end="280:13">CU_ASSERT</name><argument_list pos:start="280:14" pos:end="280:30">(<argument pos:start="280:15" pos:end="280:29"><expr pos:start="280:15" pos:end="280:29"><name pos:start="280:15" pos:end="280:25">cacerts_len</name> <operator pos:start="280:27" pos:end="280:27">&gt;</operator> <literal type="number" pos:start="280:29" pos:end="280:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="282:5" pos:end="284:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="285:5" pos:end="285:50"><expr pos:start="285:5" pos:end="285:49"><name pos:start="285:5" pos:end="285:12">priv_key</name> <operator pos:start="285:14" pos:end="285:14">=</operator> <call pos:start="285:16" pos:end="285:49"><name pos:start="285:16" pos:end="285:31">read_private_key</name><argument_list pos:start="285:32" pos:end="285:49">(<argument pos:start="285:33" pos:end="285:48"><expr pos:start="285:33" pos:end="285:48"><name pos:start="285:33" pos:end="285:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="286:5" pos:end="289:5"><if pos:start="286:5" pos:end="289:5">if <condition pos:start="286:8" pos:end="286:25">(<expr pos:start="286:9" pos:end="286:24"><name pos:start="286:9" pos:end="286:16">priv_key</name> <operator pos:start="286:18" pos:end="286:19">==</operator> <name pos:start="286:21" pos:end="286:24">NULL</name></expr>)</condition> <block pos:start="286:27" pos:end="289:5">{<block_content pos:start="287:9" pos:end="288:15">
	<expr_stmt pos:start="287:9" pos:end="287:80"><expr pos:start="287:9" pos:end="287:79"><call pos:start="287:9" pos:end="287:79"><name pos:start="287:9" pos:end="287:14">printf</name><argument_list pos:start="287:15" pos:end="287:79">(<argument pos:start="287:16" pos:end="287:60"><expr pos:start="287:16" pos:end="287:60"><literal type="string" pos:start="287:16" pos:end="287:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="287:63" pos:end="287:78"><expr pos:start="287:63" pos:end="287:78"><name pos:start="287:63" pos:end="287:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="288:9" pos:end="288:15">return;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="291:5" pos:end="292:54"><expr pos:start="291:5" pos:end="292:53"><name pos:start="291:5" pos:end="291:8">ectx</name> <operator pos:start="291:10" pos:end="291:10">=</operator> <call pos:start="291:12" pos:end="292:53"><name pos:start="291:12" pos:end="291:26">est_client_init</name><argument_list pos:start="291:27" pos:end="292:53">(<argument pos:start="291:28" pos:end="291:34"><expr pos:start="291:28" pos:end="291:34"><name pos:start="291:28" pos:end="291:34">cacerts</name></expr></argument>, <argument pos:start="291:37" pos:end="291:47"><expr pos:start="291:37" pos:end="291:47"><name pos:start="291:37" pos:end="291:47">cacerts_len</name></expr></argument>, <argument pos:start="291:50" pos:end="291:68"><expr pos:start="291:50" pos:end="291:68"><name pos:start="291:50" pos:end="291:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="292:28" pos:end="292:52"><expr pos:start="292:28" pos:end="292:52"><name pos:start="292:28" pos:end="292:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="293:5" pos:end="293:28"><expr pos:start="293:5" pos:end="293:27"><call pos:start="293:5" pos:end="293:27"><name pos:start="293:5" pos:end="293:13">CU_ASSERT</name><argument_list pos:start="293:14" pos:end="293:27">(<argument pos:start="293:15" pos:end="293:26"><expr pos:start="293:15" pos:end="293:26"><name pos:start="293:15" pos:end="293:18">ectx</name> <operator pos:start="293:20" pos:end="293:21">!=</operator> <name pos:start="293:23" pos:end="293:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:59"><expr pos:start="295:5" pos:end="295:58"><name pos:start="295:5" pos:end="295:6">rc</name> <operator pos:start="295:8" pos:end="295:8">=</operator> <call pos:start="295:10" pos:end="295:58"><name pos:start="295:10" pos:end="295:28">est_client_set_auth</name><argument_list pos:start="295:29" pos:end="295:58">(<argument pos:start="295:30" pos:end="295:33"><expr pos:start="295:30" pos:end="295:33"><name pos:start="295:30" pos:end="295:33">ectx</name></expr></argument>, <argument pos:start="295:36" pos:end="295:37"><expr pos:start="295:36" pos:end="295:37"><literal type="string" pos:start="295:36" pos:end="295:37">""</literal></expr></argument>, <argument pos:start="295:40" pos:end="295:41"><expr pos:start="295:40" pos:end="295:41"><literal type="string" pos:start="295:40" pos:end="295:41">""</literal></expr></argument>, <argument pos:start="295:44" pos:end="295:47"><expr pos:start="295:44" pos:end="295:47"><name pos:start="295:44" pos:end="295:47">NULL</name></expr></argument>, <argument pos:start="295:50" pos:end="295:57"><expr pos:start="295:50" pos:end="295:57"><name pos:start="295:50" pos:end="295:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="296:5" pos:end="296:34"><expr pos:start="296:5" pos:end="296:33"><call pos:start="296:5" pos:end="296:33"><name pos:start="296:5" pos:end="296:13">CU_ASSERT</name><argument_list pos:start="296:14" pos:end="296:33">(<argument pos:start="296:15" pos:end="296:32"><expr pos:start="296:15" pos:end="296:32"><name pos:start="296:15" pos:end="296:16">rc</name> <operator pos:start="296:18" pos:end="296:19">==</operator> <name pos:start="296:21" pos:end="296:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <if_stmt pos:start="298:5" pos:end="300:5"><if pos:start="298:5" pos:end="300:5">if <condition pos:start="298:8" pos:end="298:13">(<expr pos:start="298:9" pos:end="298:12"><name pos:start="298:9" pos:end="298:12">ectx</name></expr>)</condition> <block pos:start="298:15" pos:end="300:5">{<block_content pos:start="299:9" pos:end="299:26">
        <expr_stmt pos:start="299:9" pos:end="299:26"><expr pos:start="299:9" pos:end="299:25"><call pos:start="299:9" pos:end="299:25"><name pos:start="299:9" pos:end="299:19">est_destroy</name><argument_list pos:start="299:20" pos:end="299:25">(<argument pos:start="299:21" pos:end="299:24"><expr pos:start="299:21" pos:end="299:24"><name pos:start="299:21" pos:end="299:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="301:5" pos:end="303:5"><if pos:start="301:5" pos:end="303:5">if <condition pos:start="301:8" pos:end="301:16">(<expr pos:start="301:9" pos:end="301:15"><name pos:start="301:9" pos:end="301:15">cacerts</name></expr>)</condition> <block pos:start="301:18" pos:end="303:5">{<block_content pos:start="302:9" pos:end="302:22">
        <expr_stmt pos:start="302:9" pos:end="302:22"><expr pos:start="302:9" pos:end="302:21"><call pos:start="302:9" pos:end="302:21"><name pos:start="302:9" pos:end="302:12">free</name><argument_list pos:start="302:13" pos:end="302:21">(<argument pos:start="302:14" pos:end="302:20"><expr pos:start="302:14" pos:end="302:20"><name pos:start="302:14" pos:end="302:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="304:5" pos:end="306:5"><if pos:start="304:5" pos:end="306:5">if <condition pos:start="304:8" pos:end="304:13">(<expr pos:start="304:9" pos:end="304:12"><name pos:start="304:9" pos:end="304:12">pkey</name></expr>)</condition> <block pos:start="304:15" pos:end="306:5">{<block_content pos:start="305:9" pos:end="305:19">
        <expr_stmt pos:start="305:9" pos:end="305:19"><expr pos:start="305:9" pos:end="305:18"><call pos:start="305:9" pos:end="305:18"><name pos:start="305:9" pos:end="305:12">free</name><argument_list pos:start="305:13" pos:end="305:18">(<argument pos:start="305:14" pos:end="305:17"><expr pos:start="305:14" pos:end="305:17"><name pos:start="305:14" pos:end="305:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if pos:start="309:1" pos:end="309:5">#<cpp:directive pos:start="309:2" pos:end="309:3">if</cpp:directive> <expr pos:start="309:5" pos:end="309:5"><literal type="number" pos:start="309:5" pos:end="309:5">0</literal></expr></cpp:if>
<comment type="block" pos:start="310:1" pos:end="314:3">/*
 * This test case initializes an EST client context
 * using explict CA certs, no client cert, and a valid public key,
 * no userid and password.
 */</comment>
static void us897_test3 (void) 
{
    EST_CTX *ectx;
    unsigned char *pkey = NULL;
    unsigned char *cacerts = NULL;
    int cacerts_len = 0;
    EST_ERROR rc;
    EVP_PKEY *priv_key;

    <comment type="block" pos:start="324:5" pos:end="326:7">/*
     * Read in the CA certificates
     */</comment>
    cacerts_len = read_binary_file(CLIENT_UT_CACERT, &amp;cacerts);
    CU_ASSERT(cacerts_len &gt; 0);

    <comment type="block" pos:start="330:5" pos:end="332:7">/*
     * Read in the private key file
     */</comment>
    priv_key = read_private_key(CLIENT_UT_PUBKEY);
    if (priv_key == NULL) {
	printf("\nError while reading private key file %s\n", CLIENT_UT_PUBKEY);
        return;
    }
    
    ectx = est_client_init(cacerts, cacerts_len, EST_CERT_FORMAT_PEM,
                           client_manual_cert_verify);
    CU_ASSERT(ectx != NULL);

    rc = est_client_set_auth(ectx, "", "", NULL, priv_key);
    CU_ASSERT(rc == EST_ERR_NONE);    

    if (ectx) {
        est_destroy(ectx);
    }
    if (cacerts) {
        free(cacerts);
    }
    if (pkey) {
        free(pkey);
    }
}
<cpp:endif pos:start="356:1" pos:end="356:6">#<cpp:directive pos:start="356:2" pos:end="356:6">endif</cpp:directive></cpp:endif>


<comment type="block" pos:start="359:1" pos:end="363:3">/*
 * This test case initializes an EST client context
 * using explict CA certs, no client cert, a public key,
 * and a userid and password.
 */</comment>
<function pos:start="364:1" pos:end="406:1"><type pos:start="364:1" pos:end="364:11"><specifier pos:start="364:1" pos:end="364:6">static</specifier> <name pos:start="364:8" pos:end="364:11">void</name></type> <name pos:start="364:13" pos:end="364:23">us897_test6</name> <parameter_list pos:start="364:25" pos:end="364:30">(<parameter pos:start="364:26" pos:end="364:29"><decl pos:start="364:26" pos:end="364:29"><type pos:start="364:26" pos:end="364:29"><name pos:start="364:26" pos:end="364:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="365:1" pos:end="406:1">{<block_content pos:start="366:5" pos:end="405:5">
    <decl_stmt pos:start="366:5" pos:end="366:18"><decl pos:start="366:5" pos:end="366:17"><type pos:start="366:5" pos:end="366:13"><name pos:start="366:5" pos:end="366:11">EST_CTX</name> <modifier pos:start="366:13" pos:end="366:13">*</modifier></type><name pos:start="366:14" pos:end="366:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="367:5" pos:end="367:31"><decl pos:start="367:5" pos:end="367:30"><type pos:start="367:5" pos:end="367:19"><name pos:start="367:5" pos:end="367:12">unsigned</name> <name pos:start="367:14" pos:end="367:17">char</name> <modifier pos:start="367:19" pos:end="367:19">*</modifier></type><name pos:start="367:20" pos:end="367:23">pkey</name> <init pos:start="367:25" pos:end="367:30">= <expr pos:start="367:27" pos:end="367:30"><name pos:start="367:27" pos:end="367:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="368:5" pos:end="368:34"><decl pos:start="368:5" pos:end="368:33"><type pos:start="368:5" pos:end="368:19"><name pos:start="368:5" pos:end="368:12">unsigned</name> <name pos:start="368:14" pos:end="368:17">char</name> <modifier pos:start="368:19" pos:end="368:19">*</modifier></type><name pos:start="368:20" pos:end="368:26">cacerts</name> <init pos:start="368:28" pos:end="368:33">= <expr pos:start="368:30" pos:end="368:33"><name pos:start="368:30" pos:end="368:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="369:5" pos:end="369:24"><decl pos:start="369:5" pos:end="369:23"><type pos:start="369:5" pos:end="369:7"><name pos:start="369:5" pos:end="369:7">int</name></type> <name pos:start="369:9" pos:end="369:19">cacerts_len</name> <init pos:start="369:21" pos:end="369:23">= <expr pos:start="369:23" pos:end="369:23"><literal type="number" pos:start="369:23" pos:end="369:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="370:5" pos:end="370:17"><decl pos:start="370:5" pos:end="370:16"><type pos:start="370:5" pos:end="370:13"><name pos:start="370:5" pos:end="370:13">EST_ERROR</name></type> <name pos:start="370:15" pos:end="370:16">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="371:5" pos:end="371:23"><decl pos:start="371:5" pos:end="371:22"><type pos:start="371:5" pos:end="371:14"><name pos:start="371:5" pos:end="371:12">EVP_PKEY</name> <modifier pos:start="371:14" pos:end="371:14">*</modifier></type><name pos:start="371:15" pos:end="371:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:13"><expr pos:start="373:5" pos:end="373:12"><call pos:start="373:5" pos:end="373:12"><name pos:start="373:5" pos:end="373:9">SLEEP</name><argument_list pos:start="373:10" pos:end="373:12">(<argument pos:start="373:11" pos:end="373:11"><expr pos:start="373:11" pos:end="373:11"><literal type="number" pos:start="373:11" pos:end="373:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="375:5" pos:end="377:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="378:5" pos:end="378:63"><expr pos:start="378:5" pos:end="378:62"><name pos:start="378:5" pos:end="378:15">cacerts_len</name> <operator pos:start="378:17" pos:end="378:17">=</operator> <call pos:start="378:19" pos:end="378:62"><name pos:start="378:19" pos:end="378:34">read_binary_file</name><argument_list pos:start="378:35" pos:end="378:62">(<argument pos:start="378:36" pos:end="378:51"><expr pos:start="378:36" pos:end="378:51"><name pos:start="378:36" pos:end="378:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="378:54" pos:end="378:61"><expr pos:start="378:54" pos:end="378:61"><operator pos:start="378:54" pos:end="378:54">&amp;</operator><name pos:start="378:55" pos:end="378:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="379:5" pos:end="379:31"><expr pos:start="379:5" pos:end="379:30"><call pos:start="379:5" pos:end="379:30"><name pos:start="379:5" pos:end="379:13">CU_ASSERT</name><argument_list pos:start="379:14" pos:end="379:30">(<argument pos:start="379:15" pos:end="379:29"><expr pos:start="379:15" pos:end="379:29"><name pos:start="379:15" pos:end="379:25">cacerts_len</name> <operator pos:start="379:27" pos:end="379:27">&gt;</operator> <literal type="number" pos:start="379:29" pos:end="379:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="381:5" pos:end="383:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="384:5" pos:end="384:50"><expr pos:start="384:5" pos:end="384:49"><name pos:start="384:5" pos:end="384:12">priv_key</name> <operator pos:start="384:14" pos:end="384:14">=</operator> <call pos:start="384:16" pos:end="384:49"><name pos:start="384:16" pos:end="384:31">read_private_key</name><argument_list pos:start="384:32" pos:end="384:49">(<argument pos:start="384:33" pos:end="384:48"><expr pos:start="384:33" pos:end="384:48"><name pos:start="384:33" pos:end="384:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="385:5" pos:end="388:5"><if pos:start="385:5" pos:end="388:5">if <condition pos:start="385:8" pos:end="385:25">(<expr pos:start="385:9" pos:end="385:24"><name pos:start="385:9" pos:end="385:16">priv_key</name> <operator pos:start="385:18" pos:end="385:19">==</operator> <name pos:start="385:21" pos:end="385:24">NULL</name></expr>)</condition> <block pos:start="385:27" pos:end="388:5">{<block_content pos:start="386:9" pos:end="387:15">
	<expr_stmt pos:start="386:9" pos:end="386:80"><expr pos:start="386:9" pos:end="386:79"><call pos:start="386:9" pos:end="386:79"><name pos:start="386:9" pos:end="386:14">printf</name><argument_list pos:start="386:15" pos:end="386:79">(<argument pos:start="386:16" pos:end="386:60"><expr pos:start="386:16" pos:end="386:60"><literal type="string" pos:start="386:16" pos:end="386:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="386:63" pos:end="386:78"><expr pos:start="386:63" pos:end="386:78"><name pos:start="386:63" pos:end="386:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="387:9" pos:end="387:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="390:5" pos:end="391:54"><expr pos:start="390:5" pos:end="391:53"><name pos:start="390:5" pos:end="390:8">ectx</name> <operator pos:start="390:10" pos:end="390:10">=</operator> <call pos:start="390:12" pos:end="391:53"><name pos:start="390:12" pos:end="390:26">est_client_init</name><argument_list pos:start="390:27" pos:end="391:53">(<argument pos:start="390:28" pos:end="390:34"><expr pos:start="390:28" pos:end="390:34"><name pos:start="390:28" pos:end="390:34">cacerts</name></expr></argument>, <argument pos:start="390:37" pos:end="390:47"><expr pos:start="390:37" pos:end="390:47"><name pos:start="390:37" pos:end="390:47">cacerts_len</name></expr></argument>, <argument pos:start="390:50" pos:end="390:68"><expr pos:start="390:50" pos:end="390:68"><name pos:start="390:50" pos:end="390:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="391:28" pos:end="391:52"><expr pos:start="391:28" pos:end="391:52"><name pos:start="391:28" pos:end="391:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="392:5" pos:end="392:28"><expr pos:start="392:5" pos:end="392:27"><call pos:start="392:5" pos:end="392:27"><name pos:start="392:5" pos:end="392:13">CU_ASSERT</name><argument_list pos:start="392:14" pos:end="392:27">(<argument pos:start="392:15" pos:end="392:26"><expr pos:start="392:15" pos:end="392:26"><name pos:start="392:15" pos:end="392:18">ectx</name> <operator pos:start="392:20" pos:end="392:21">!=</operator> <name pos:start="392:23" pos:end="392:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="394:5" pos:end="394:71"><expr pos:start="394:5" pos:end="394:70"><name pos:start="394:5" pos:end="394:6">rc</name> <operator pos:start="394:8" pos:end="394:8">=</operator> <call pos:start="394:10" pos:end="394:70"><name pos:start="394:10" pos:end="394:28">est_client_set_auth</name><argument_list pos:start="394:29" pos:end="394:70">(<argument pos:start="394:30" pos:end="394:33"><expr pos:start="394:30" pos:end="394:33"><name pos:start="394:30" pos:end="394:33">ectx</name></expr></argument>, <argument pos:start="394:36" pos:end="394:41"><expr pos:start="394:36" pos:end="394:41"><literal type="string" pos:start="394:36" pos:end="394:41">"USER"</literal></expr></argument>, <argument pos:start="394:44" pos:end="394:53"><expr pos:start="394:44" pos:end="394:53"><literal type="string" pos:start="394:44" pos:end="394:53">"PASSWORD"</literal></expr></argument>, <argument pos:start="394:56" pos:end="394:59"><expr pos:start="394:56" pos:end="394:59"><name pos:start="394:56" pos:end="394:59">NULL</name></expr></argument>, <argument pos:start="394:62" pos:end="394:69"><expr pos:start="394:62" pos:end="394:69"><name pos:start="394:62" pos:end="394:69">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="395:5" pos:end="395:34"><expr pos:start="395:5" pos:end="395:33"><call pos:start="395:5" pos:end="395:33"><name pos:start="395:5" pos:end="395:13">CU_ASSERT</name><argument_list pos:start="395:14" pos:end="395:33">(<argument pos:start="395:15" pos:end="395:32"><expr pos:start="395:15" pos:end="395:32"><name pos:start="395:15" pos:end="395:16">rc</name> <operator pos:start="395:18" pos:end="395:19">==</operator> <name pos:start="395:21" pos:end="395:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <if_stmt pos:start="397:5" pos:end="399:5"><if pos:start="397:5" pos:end="399:5">if <condition pos:start="397:8" pos:end="397:13">(<expr pos:start="397:9" pos:end="397:12"><name pos:start="397:9" pos:end="397:12">ectx</name></expr>)</condition> <block pos:start="397:15" pos:end="399:5">{<block_content pos:start="398:9" pos:end="398:26">
        <expr_stmt pos:start="398:9" pos:end="398:26"><expr pos:start="398:9" pos:end="398:25"><call pos:start="398:9" pos:end="398:25"><name pos:start="398:9" pos:end="398:19">est_destroy</name><argument_list pos:start="398:20" pos:end="398:25">(<argument pos:start="398:21" pos:end="398:24"><expr pos:start="398:21" pos:end="398:24"><name pos:start="398:21" pos:end="398:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <if_stmt pos:start="400:5" pos:end="402:5"><if pos:start="400:5" pos:end="402:5">if <condition pos:start="400:8" pos:end="400:16">(<expr pos:start="400:9" pos:end="400:15"><name pos:start="400:9" pos:end="400:15">cacerts</name></expr>)</condition> <block pos:start="400:18" pos:end="402:5">{<block_content pos:start="401:9" pos:end="401:22">
        <expr_stmt pos:start="401:9" pos:end="401:22"><expr pos:start="401:9" pos:end="401:21"><call pos:start="401:9" pos:end="401:21"><name pos:start="401:9" pos:end="401:12">free</name><argument_list pos:start="401:13" pos:end="401:21">(<argument pos:start="401:14" pos:end="401:20"><expr pos:start="401:14" pos:end="401:20"><name pos:start="401:14" pos:end="401:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="403:5" pos:end="405:5"><if pos:start="403:5" pos:end="405:5">if <condition pos:start="403:8" pos:end="403:13">(<expr pos:start="403:9" pos:end="403:12"><name pos:start="403:9" pos:end="403:12">pkey</name></expr>)</condition> <block pos:start="403:15" pos:end="405:5">{<block_content pos:start="404:9" pos:end="404:19">
        <expr_stmt pos:start="404:9" pos:end="404:19"><expr pos:start="404:9" pos:end="404:18"><call pos:start="404:9" pos:end="404:18"><name pos:start="404:9" pos:end="404:12">free</name><argument_list pos:start="404:13" pos:end="404:18">(<argument pos:start="404:14" pos:end="404:17"><expr pos:start="404:14" pos:end="404:17"><name pos:start="404:14" pos:end="404:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="409:1" pos:end="413:3">/*
 * This test case initializes an EST client context
 * using explict CA certs, no client cert, a public key,
 * and a userid and NO password.
 */</comment>
<function pos:start="414:1" pos:end="467:1"><type pos:start="414:1" pos:end="414:11"><specifier pos:start="414:1" pos:end="414:6">static</specifier> <name pos:start="414:8" pos:end="414:11">void</name></type> <name pos:start="414:13" pos:end="414:23">us897_test7</name> <parameter_list pos:start="414:25" pos:end="414:30">(<parameter pos:start="414:26" pos:end="414:29"><decl pos:start="414:26" pos:end="414:29"><type pos:start="414:26" pos:end="414:29"><name pos:start="414:26" pos:end="414:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="415:1" pos:end="467:1">{<block_content pos:start="416:5" pos:end="466:5">
    <decl_stmt pos:start="416:5" pos:end="416:18"><decl pos:start="416:5" pos:end="416:17"><type pos:start="416:5" pos:end="416:13"><name pos:start="416:5" pos:end="416:11">EST_CTX</name> <modifier pos:start="416:13" pos:end="416:13">*</modifier></type><name pos:start="416:14" pos:end="416:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="417:5" pos:end="417:31"><decl pos:start="417:5" pos:end="417:30"><type pos:start="417:5" pos:end="417:19"><name pos:start="417:5" pos:end="417:12">unsigned</name> <name pos:start="417:14" pos:end="417:17">char</name> <modifier pos:start="417:19" pos:end="417:19">*</modifier></type><name pos:start="417:20" pos:end="417:23">pkey</name> <init pos:start="417:25" pos:end="417:30">= <expr pos:start="417:27" pos:end="417:30"><name pos:start="417:27" pos:end="417:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="418:5" pos:end="418:34"><decl pos:start="418:5" pos:end="418:33"><type pos:start="418:5" pos:end="418:19"><name pos:start="418:5" pos:end="418:12">unsigned</name> <name pos:start="418:14" pos:end="418:17">char</name> <modifier pos:start="418:19" pos:end="418:19">*</modifier></type><name pos:start="418:20" pos:end="418:26">cacerts</name> <init pos:start="418:28" pos:end="418:33">= <expr pos:start="418:30" pos:end="418:33"><name pos:start="418:30" pos:end="418:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="419:5" pos:end="419:24"><decl pos:start="419:5" pos:end="419:23"><type pos:start="419:5" pos:end="419:7"><name pos:start="419:5" pos:end="419:7">int</name></type> <name pos:start="419:9" pos:end="419:19">cacerts_len</name> <init pos:start="419:21" pos:end="419:23">= <expr pos:start="419:23" pos:end="419:23"><literal type="number" pos:start="419:23" pos:end="419:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="420:5" pos:end="420:17"><decl pos:start="420:5" pos:end="420:16"><type pos:start="420:5" pos:end="420:13"><name pos:start="420:5" pos:end="420:13">EST_ERROR</name></type> <name pos:start="420:15" pos:end="420:16">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="421:5" pos:end="421:23"><decl pos:start="421:5" pos:end="421:22"><type pos:start="421:5" pos:end="421:14"><name pos:start="421:5" pos:end="421:12">EVP_PKEY</name> <modifier pos:start="421:14" pos:end="421:14">*</modifier></type><name pos:start="421:15" pos:end="421:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:13"><expr pos:start="423:5" pos:end="423:12"><call pos:start="423:5" pos:end="423:12"><name pos:start="423:5" pos:end="423:9">SLEEP</name><argument_list pos:start="423:10" pos:end="423:12">(<argument pos:start="423:11" pos:end="423:11"><expr pos:start="423:11" pos:end="423:11"><literal type="number" pos:start="423:11" pos:end="423:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="425:5" pos:end="427:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="428:5" pos:end="428:63"><expr pos:start="428:5" pos:end="428:62"><name pos:start="428:5" pos:end="428:15">cacerts_len</name> <operator pos:start="428:17" pos:end="428:17">=</operator> <call pos:start="428:19" pos:end="428:62"><name pos:start="428:19" pos:end="428:34">read_binary_file</name><argument_list pos:start="428:35" pos:end="428:62">(<argument pos:start="428:36" pos:end="428:51"><expr pos:start="428:36" pos:end="428:51"><name pos:start="428:36" pos:end="428:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="428:54" pos:end="428:61"><expr pos:start="428:54" pos:end="428:61"><operator pos:start="428:54" pos:end="428:54">&amp;</operator><name pos:start="428:55" pos:end="428:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="429:5" pos:end="429:31"><expr pos:start="429:5" pos:end="429:30"><call pos:start="429:5" pos:end="429:30"><name pos:start="429:5" pos:end="429:13">CU_ASSERT</name><argument_list pos:start="429:14" pos:end="429:30">(<argument pos:start="429:15" pos:end="429:29"><expr pos:start="429:15" pos:end="429:29"><name pos:start="429:15" pos:end="429:25">cacerts_len</name> <operator pos:start="429:27" pos:end="429:27">&gt;</operator> <literal type="number" pos:start="429:29" pos:end="429:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="431:5" pos:end="433:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="434:5" pos:end="434:50"><expr pos:start="434:5" pos:end="434:49"><name pos:start="434:5" pos:end="434:12">priv_key</name> <operator pos:start="434:14" pos:end="434:14">=</operator> <call pos:start="434:16" pos:end="434:49"><name pos:start="434:16" pos:end="434:31">read_private_key</name><argument_list pos:start="434:32" pos:end="434:49">(<argument pos:start="434:33" pos:end="434:48"><expr pos:start="434:33" pos:end="434:48"><name pos:start="434:33" pos:end="434:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="435:5" pos:end="438:5"><if pos:start="435:5" pos:end="438:5">if <condition pos:start="435:8" pos:end="435:25">(<expr pos:start="435:9" pos:end="435:24"><name pos:start="435:9" pos:end="435:16">priv_key</name> <operator pos:start="435:18" pos:end="435:19">==</operator> <name pos:start="435:21" pos:end="435:24">NULL</name></expr>)</condition> <block pos:start="435:27" pos:end="438:5">{<block_content pos:start="436:9" pos:end="437:15">
	<expr_stmt pos:start="436:9" pos:end="436:80"><expr pos:start="436:9" pos:end="436:79"><call pos:start="436:9" pos:end="436:79"><name pos:start="436:9" pos:end="436:14">printf</name><argument_list pos:start="436:15" pos:end="436:79">(<argument pos:start="436:16" pos:end="436:60"><expr pos:start="436:16" pos:end="436:60"><literal type="string" pos:start="436:16" pos:end="436:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="436:63" pos:end="436:78"><expr pos:start="436:63" pos:end="436:78"><name pos:start="436:63" pos:end="436:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="437:9" pos:end="437:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="440:5" pos:end="441:54"><expr pos:start="440:5" pos:end="441:53"><name pos:start="440:5" pos:end="440:8">ectx</name> <operator pos:start="440:10" pos:end="440:10">=</operator> <call pos:start="440:12" pos:end="441:53"><name pos:start="440:12" pos:end="440:26">est_client_init</name><argument_list pos:start="440:27" pos:end="441:53">(<argument pos:start="440:28" pos:end="440:34"><expr pos:start="440:28" pos:end="440:34"><name pos:start="440:28" pos:end="440:34">cacerts</name></expr></argument>, <argument pos:start="440:37" pos:end="440:47"><expr pos:start="440:37" pos:end="440:47"><name pos:start="440:37" pos:end="440:47">cacerts_len</name></expr></argument>, <argument pos:start="440:50" pos:end="440:68"><expr pos:start="440:50" pos:end="440:68"><name pos:start="440:50" pos:end="440:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="441:28" pos:end="441:52"><expr pos:start="441:28" pos:end="441:52"><name pos:start="441:28" pos:end="441:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="442:5" pos:end="442:28"><expr pos:start="442:5" pos:end="442:27"><call pos:start="442:5" pos:end="442:27"><name pos:start="442:5" pos:end="442:13">CU_ASSERT</name><argument_list pos:start="442:14" pos:end="442:27">(<argument pos:start="442:15" pos:end="442:26"><expr pos:start="442:15" pos:end="442:26"><name pos:start="442:15" pos:end="442:18">ectx</name> <operator pos:start="442:20" pos:end="442:21">!=</operator> <name pos:start="442:23" pos:end="442:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="444:5" pos:end="444:65"><expr pos:start="444:5" pos:end="444:64"><name pos:start="444:5" pos:end="444:6">rc</name> <operator pos:start="444:8" pos:end="444:8">=</operator> <call pos:start="444:10" pos:end="444:64"><name pos:start="444:10" pos:end="444:28">est_client_set_auth</name><argument_list pos:start="444:29" pos:end="444:64">(<argument pos:start="444:30" pos:end="444:33"><expr pos:start="444:30" pos:end="444:33"><name pos:start="444:30" pos:end="444:33">ectx</name></expr></argument>, <argument pos:start="444:36" pos:end="444:41"><expr pos:start="444:36" pos:end="444:41"><literal type="string" pos:start="444:36" pos:end="444:41">"USER"</literal></expr></argument>, <argument pos:start="444:44" pos:end="444:47"><expr pos:start="444:44" pos:end="444:47"><name pos:start="444:44" pos:end="444:47">NULL</name></expr></argument>, <argument pos:start="444:50" pos:end="444:53"><expr pos:start="444:50" pos:end="444:53"><name pos:start="444:50" pos:end="444:53">NULL</name></expr></argument>, <argument pos:start="444:56" pos:end="444:63"><expr pos:start="444:56" pos:end="444:63"><name pos:start="444:56" pos:end="444:63">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="445:5" pos:end="445:48"><expr pos:start="445:5" pos:end="445:47"><call pos:start="445:5" pos:end="445:47"><name pos:start="445:5" pos:end="445:13">CU_ASSERT</name><argument_list pos:start="445:14" pos:end="445:47">(<argument pos:start="445:15" pos:end="445:46"><expr pos:start="445:15" pos:end="445:46"><name pos:start="445:15" pos:end="445:16">rc</name> <operator pos:start="445:18" pos:end="445:19">==</operator> <name pos:start="445:21" pos:end="445:46">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="447:5" pos:end="449:5"><if pos:start="447:5" pos:end="449:5">if <condition pos:start="447:8" pos:end="447:13">(<expr pos:start="447:9" pos:end="447:12"><name pos:start="447:9" pos:end="447:12">ectx</name></expr>)</condition> <block pos:start="447:15" pos:end="449:5">{<block_content pos:start="448:9" pos:end="448:26">
        <expr_stmt pos:start="448:9" pos:end="448:26"><expr pos:start="448:9" pos:end="448:25"><call pos:start="448:9" pos:end="448:25"><name pos:start="448:9" pos:end="448:19">est_destroy</name><argument_list pos:start="448:20" pos:end="448:25">(<argument pos:start="448:21" pos:end="448:24"><expr pos:start="448:21" pos:end="448:24"><name pos:start="448:21" pos:end="448:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="451:5" pos:end="452:54"><expr pos:start="451:5" pos:end="452:53"><name pos:start="451:5" pos:end="451:8">ectx</name> <operator pos:start="451:10" pos:end="451:10">=</operator> <call pos:start="451:12" pos:end="452:53"><name pos:start="451:12" pos:end="451:26">est_client_init</name><argument_list pos:start="451:27" pos:end="452:53">(<argument pos:start="451:28" pos:end="451:34"><expr pos:start="451:28" pos:end="451:34"><name pos:start="451:28" pos:end="451:34">cacerts</name></expr></argument>, <argument pos:start="451:37" pos:end="451:47"><expr pos:start="451:37" pos:end="451:47"><name pos:start="451:37" pos:end="451:47">cacerts_len</name></expr></argument>, <argument pos:start="451:50" pos:end="451:68"><expr pos:start="451:50" pos:end="451:68"><name pos:start="451:50" pos:end="451:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="452:28" pos:end="452:52"><expr pos:start="452:28" pos:end="452:52"><name pos:start="452:28" pos:end="452:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="453:5" pos:end="453:28"><expr pos:start="453:5" pos:end="453:27"><call pos:start="453:5" pos:end="453:27"><name pos:start="453:5" pos:end="453:13">CU_ASSERT</name><argument_list pos:start="453:14" pos:end="453:27">(<argument pos:start="453:15" pos:end="453:26"><expr pos:start="453:15" pos:end="453:26"><name pos:start="453:15" pos:end="453:18">ectx</name> <operator pos:start="453:20" pos:end="453:21">!=</operator> <name pos:start="453:23" pos:end="453:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="455:5" pos:end="455:69"><expr pos:start="455:5" pos:end="455:68"><name pos:start="455:5" pos:end="455:6">rc</name> <operator pos:start="455:8" pos:end="455:8">=</operator> <call pos:start="455:10" pos:end="455:68"><name pos:start="455:10" pos:end="455:28">est_client_set_auth</name><argument_list pos:start="455:29" pos:end="455:68">(<argument pos:start="455:30" pos:end="455:33"><expr pos:start="455:30" pos:end="455:33"><name pos:start="455:30" pos:end="455:33">ectx</name></expr></argument>, <argument pos:start="455:36" pos:end="455:39"><expr pos:start="455:36" pos:end="455:39"><name pos:start="455:36" pos:end="455:39">NULL</name></expr></argument>, <argument pos:start="455:42" pos:end="455:51"><expr pos:start="455:42" pos:end="455:51"><literal type="string" pos:start="455:42" pos:end="455:51">"PASSWORD"</literal></expr></argument>, <argument pos:start="455:54" pos:end="455:57"><expr pos:start="455:54" pos:end="455:57"><name pos:start="455:54" pos:end="455:57">NULL</name></expr></argument>, <argument pos:start="455:60" pos:end="455:67"><expr pos:start="455:60" pos:end="455:67"><name pos:start="455:60" pos:end="455:67">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="456:5" pos:end="456:48"><expr pos:start="456:5" pos:end="456:47"><call pos:start="456:5" pos:end="456:47"><name pos:start="456:5" pos:end="456:13">CU_ASSERT</name><argument_list pos:start="456:14" pos:end="456:47">(<argument pos:start="456:15" pos:end="456:46"><expr pos:start="456:15" pos:end="456:46"><name pos:start="456:15" pos:end="456:16">rc</name> <operator pos:start="456:18" pos:end="456:19">==</operator> <name pos:start="456:21" pos:end="456:46">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="458:5" pos:end="460:5"><if pos:start="458:5" pos:end="460:5">if <condition pos:start="458:8" pos:end="458:13">(<expr pos:start="458:9" pos:end="458:12"><name pos:start="458:9" pos:end="458:12">ectx</name></expr>)</condition> <block pos:start="458:15" pos:end="460:5">{<block_content pos:start="459:9" pos:end="459:26">
        <expr_stmt pos:start="459:9" pos:end="459:26"><expr pos:start="459:9" pos:end="459:25"><call pos:start="459:9" pos:end="459:25"><name pos:start="459:9" pos:end="459:19">est_destroy</name><argument_list pos:start="459:20" pos:end="459:25">(<argument pos:start="459:21" pos:end="459:24"><expr pos:start="459:21" pos:end="459:24"><name pos:start="459:21" pos:end="459:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <if_stmt pos:start="461:5" pos:end="463:5"><if pos:start="461:5" pos:end="463:5">if <condition pos:start="461:8" pos:end="461:16">(<expr pos:start="461:9" pos:end="461:15"><name pos:start="461:9" pos:end="461:15">cacerts</name></expr>)</condition> <block pos:start="461:18" pos:end="463:5">{<block_content pos:start="462:9" pos:end="462:22">
        <expr_stmt pos:start="462:9" pos:end="462:22"><expr pos:start="462:9" pos:end="462:21"><call pos:start="462:9" pos:end="462:21"><name pos:start="462:9" pos:end="462:12">free</name><argument_list pos:start="462:13" pos:end="462:21">(<argument pos:start="462:14" pos:end="462:20"><expr pos:start="462:14" pos:end="462:20"><name pos:start="462:14" pos:end="462:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="464:5" pos:end="466:5"><if pos:start="464:5" pos:end="466:5">if <condition pos:start="464:8" pos:end="464:13">(<expr pos:start="464:9" pos:end="464:12"><name pos:start="464:9" pos:end="464:12">pkey</name></expr>)</condition> <block pos:start="464:15" pos:end="466:5">{<block_content pos:start="465:9" pos:end="465:19">
        <expr_stmt pos:start="465:9" pos:end="465:19"><expr pos:start="465:9" pos:end="465:18"><call pos:start="465:9" pos:end="465:18"><name pos:start="465:9" pos:end="465:12">free</name><argument_list pos:start="465:13" pos:end="465:18">(<argument pos:start="465:14" pos:end="465:17"><expr pos:start="465:14" pos:end="465:17"><name pos:start="465:14" pos:end="465:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="470:1" pos:end="472:3">/*
 * This test case tests the set server with valid parameters
 */</comment>
<function pos:start="473:1" pos:end="516:1"><type pos:start="473:1" pos:end="473:11"><specifier pos:start="473:1" pos:end="473:6">static</specifier> <name pos:start="473:8" pos:end="473:11">void</name></type> <name pos:start="473:13" pos:end="473:23">us897_test9</name> <parameter_list pos:start="473:25" pos:end="473:30">(<parameter pos:start="473:26" pos:end="473:29"><decl pos:start="473:26" pos:end="473:29"><type pos:start="473:26" pos:end="473:29"><name pos:start="473:26" pos:end="473:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="474:1" pos:end="516:1">{<block_content pos:start="475:5" pos:end="515:5">
    <decl_stmt pos:start="475:5" pos:end="475:18"><decl pos:start="475:5" pos:end="475:17"><type pos:start="475:5" pos:end="475:13"><name pos:start="475:5" pos:end="475:11">EST_CTX</name> <modifier pos:start="475:13" pos:end="475:13">*</modifier></type><name pos:start="475:14" pos:end="475:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="476:5" pos:end="476:31"><decl pos:start="476:5" pos:end="476:30"><type pos:start="476:5" pos:end="476:19"><name pos:start="476:5" pos:end="476:12">unsigned</name> <name pos:start="476:14" pos:end="476:17">char</name> <modifier pos:start="476:19" pos:end="476:19">*</modifier></type><name pos:start="476:20" pos:end="476:23">pkey</name> <init pos:start="476:25" pos:end="476:30">= <expr pos:start="476:27" pos:end="476:30"><name pos:start="476:27" pos:end="476:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="477:5" pos:end="477:34"><decl pos:start="477:5" pos:end="477:33"><type pos:start="477:5" pos:end="477:19"><name pos:start="477:5" pos:end="477:12">unsigned</name> <name pos:start="477:14" pos:end="477:17">char</name> <modifier pos:start="477:19" pos:end="477:19">*</modifier></type><name pos:start="477:20" pos:end="477:26">cacerts</name> <init pos:start="477:28" pos:end="477:33">= <expr pos:start="477:30" pos:end="477:33"><name pos:start="477:30" pos:end="477:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="478:5" pos:end="478:24"><decl pos:start="478:5" pos:end="478:23"><type pos:start="478:5" pos:end="478:7"><name pos:start="478:5" pos:end="478:7">int</name></type> <name pos:start="478:9" pos:end="478:19">cacerts_len</name> <init pos:start="478:21" pos:end="478:23">= <expr pos:start="478:23" pos:end="478:23"><literal type="number" pos:start="478:23" pos:end="478:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="479:5" pos:end="479:32"><decl pos:start="479:5" pos:end="479:31"><type pos:start="479:5" pos:end="479:13"><name pos:start="479:5" pos:end="479:13">EST_ERROR</name></type> <name pos:start="479:15" pos:end="479:16">rc</name> <init pos:start="479:18" pos:end="479:31">= <expr pos:start="479:20" pos:end="479:31"><name pos:start="479:20" pos:end="479:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="480:5" pos:end="480:23"><decl pos:start="480:5" pos:end="480:22"><type pos:start="480:5" pos:end="480:14"><name pos:start="480:5" pos:end="480:12">EVP_PKEY</name> <modifier pos:start="480:14" pos:end="480:14">*</modifier></type><name pos:start="480:15" pos:end="480:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="482:5" pos:end="482:13"><expr pos:start="482:5" pos:end="482:12"><call pos:start="482:5" pos:end="482:12"><name pos:start="482:5" pos:end="482:9">SLEEP</name><argument_list pos:start="482:10" pos:end="482:12">(<argument pos:start="482:11" pos:end="482:11"><expr pos:start="482:11" pos:end="482:11"><literal type="number" pos:start="482:11" pos:end="482:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="484:5" pos:end="486:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="487:5" pos:end="487:63"><expr pos:start="487:5" pos:end="487:62"><name pos:start="487:5" pos:end="487:15">cacerts_len</name> <operator pos:start="487:17" pos:end="487:17">=</operator> <call pos:start="487:19" pos:end="487:62"><name pos:start="487:19" pos:end="487:34">read_binary_file</name><argument_list pos:start="487:35" pos:end="487:62">(<argument pos:start="487:36" pos:end="487:51"><expr pos:start="487:36" pos:end="487:51"><name pos:start="487:36" pos:end="487:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="487:54" pos:end="487:61"><expr pos:start="487:54" pos:end="487:61"><operator pos:start="487:54" pos:end="487:54">&amp;</operator><name pos:start="487:55" pos:end="487:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="489:5" pos:end="491:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="492:5" pos:end="492:50"><expr pos:start="492:5" pos:end="492:49"><name pos:start="492:5" pos:end="492:12">priv_key</name> <operator pos:start="492:14" pos:end="492:14">=</operator> <call pos:start="492:16" pos:end="492:49"><name pos:start="492:16" pos:end="492:31">read_private_key</name><argument_list pos:start="492:32" pos:end="492:49">(<argument pos:start="492:33" pos:end="492:48"><expr pos:start="492:33" pos:end="492:48"><name pos:start="492:33" pos:end="492:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="493:5" pos:end="496:5"><if pos:start="493:5" pos:end="496:5">if <condition pos:start="493:8" pos:end="493:25">(<expr pos:start="493:9" pos:end="493:24"><name pos:start="493:9" pos:end="493:16">priv_key</name> <operator pos:start="493:18" pos:end="493:19">==</operator> <name pos:start="493:21" pos:end="493:24">NULL</name></expr>)</condition> <block pos:start="493:27" pos:end="496:5">{<block_content pos:start="494:9" pos:end="495:15">
	<expr_stmt pos:start="494:9" pos:end="494:80"><expr pos:start="494:9" pos:end="494:79"><call pos:start="494:9" pos:end="494:79"><name pos:start="494:9" pos:end="494:14">printf</name><argument_list pos:start="494:15" pos:end="494:79">(<argument pos:start="494:16" pos:end="494:60"><expr pos:start="494:16" pos:end="494:60"><literal type="string" pos:start="494:16" pos:end="494:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="494:63" pos:end="494:78"><expr pos:start="494:63" pos:end="494:78"><name pos:start="494:63" pos:end="494:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="495:9" pos:end="495:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="498:5" pos:end="499:54"><expr pos:start="498:5" pos:end="499:53"><name pos:start="498:5" pos:end="498:8">ectx</name> <operator pos:start="498:10" pos:end="498:10">=</operator> <call pos:start="498:12" pos:end="499:53"><name pos:start="498:12" pos:end="498:26">est_client_init</name><argument_list pos:start="498:27" pos:end="499:53">(<argument pos:start="498:28" pos:end="498:34"><expr pos:start="498:28" pos:end="498:34"><name pos:start="498:28" pos:end="498:34">cacerts</name></expr></argument>, <argument pos:start="498:37" pos:end="498:47"><expr pos:start="498:37" pos:end="498:47"><name pos:start="498:37" pos:end="498:47">cacerts_len</name></expr></argument>, <argument pos:start="498:50" pos:end="498:68"><expr pos:start="498:50" pos:end="498:68"><name pos:start="498:50" pos:end="498:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="499:28" pos:end="499:52"><expr pos:start="499:28" pos:end="499:52"><name pos:start="499:28" pos:end="499:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:59"><expr pos:start="501:5" pos:end="501:58"><name pos:start="501:5" pos:end="501:6">rc</name> <operator pos:start="501:8" pos:end="501:8">=</operator> <call pos:start="501:10" pos:end="501:58"><name pos:start="501:10" pos:end="501:28">est_client_set_auth</name><argument_list pos:start="501:29" pos:end="501:58">(<argument pos:start="501:30" pos:end="501:33"><expr pos:start="501:30" pos:end="501:33"><name pos:start="501:30" pos:end="501:33">ectx</name></expr></argument>, <argument pos:start="501:36" pos:end="501:37"><expr pos:start="501:36" pos:end="501:37"><literal type="string" pos:start="501:36" pos:end="501:37">""</literal></expr></argument>, <argument pos:start="501:40" pos:end="501:41"><expr pos:start="501:40" pos:end="501:41"><literal type="string" pos:start="501:40" pos:end="501:41">""</literal></expr></argument>, <argument pos:start="501:44" pos:end="501:47"><expr pos:start="501:44" pos:end="501:47"><name pos:start="501:44" pos:end="501:47">NULL</name></expr></argument>, <argument pos:start="501:50" pos:end="501:57"><expr pos:start="501:50" pos:end="501:57"><name pos:start="501:50" pos:end="501:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="502:5" pos:end="502:34"><expr pos:start="502:5" pos:end="502:33"><call pos:start="502:5" pos:end="502:33"><name pos:start="502:5" pos:end="502:13">CU_ASSERT</name><argument_list pos:start="502:14" pos:end="502:33">(<argument pos:start="502:15" pos:end="502:32"><expr pos:start="502:15" pos:end="502:32"><name pos:start="502:15" pos:end="502:16">rc</name> <operator pos:start="502:18" pos:end="502:19">==</operator> <name pos:start="502:21" pos:end="502:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="504:5" pos:end="504:79"><expr pos:start="504:5" pos:end="504:78"><name pos:start="504:5" pos:end="504:6">rc</name> <operator pos:start="504:8" pos:end="504:8">=</operator> <call pos:start="504:10" pos:end="504:78"><name pos:start="504:10" pos:end="504:30">est_client_set_server</name><argument_list pos:start="504:31" pos:end="504:78">(<argument pos:start="504:32" pos:end="504:35"><expr pos:start="504:32" pos:end="504:35"><name pos:start="504:32" pos:end="504:35">ectx</name></expr></argument>, <argument pos:start="504:38" pos:end="504:52"><expr pos:start="504:38" pos:end="504:52"><name pos:start="504:38" pos:end="504:52">US897_SERVER_IP</name></expr></argument>, <argument pos:start="504:55" pos:end="504:71"><expr pos:start="504:55" pos:end="504:71"><name pos:start="504:55" pos:end="504:71">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="504:74" pos:end="504:77"><expr pos:start="504:74" pos:end="504:77"><name pos:start="504:74" pos:end="504:77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="505:5" pos:end="505:34"><expr pos:start="505:5" pos:end="505:33"><call pos:start="505:5" pos:end="505:33"><name pos:start="505:5" pos:end="505:13">CU_ASSERT</name><argument_list pos:start="505:14" pos:end="505:33">(<argument pos:start="505:15" pos:end="505:32"><expr pos:start="505:15" pos:end="505:32"><name pos:start="505:15" pos:end="505:16">rc</name> <operator pos:start="505:18" pos:end="505:19">==</operator> <name pos:start="505:21" pos:end="505:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="507:5" pos:end="509:5"><if pos:start="507:5" pos:end="509:5">if <condition pos:start="507:8" pos:end="507:13">(<expr pos:start="507:9" pos:end="507:12"><name pos:start="507:9" pos:end="507:12">ectx</name></expr>)</condition> <block pos:start="507:15" pos:end="509:5">{<block_content pos:start="508:9" pos:end="508:26">
        <expr_stmt pos:start="508:9" pos:end="508:26"><expr pos:start="508:9" pos:end="508:25"><call pos:start="508:9" pos:end="508:25"><name pos:start="508:9" pos:end="508:19">est_destroy</name><argument_list pos:start="508:20" pos:end="508:25">(<argument pos:start="508:21" pos:end="508:24"><expr pos:start="508:21" pos:end="508:24"><name pos:start="508:21" pos:end="508:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="510:5" pos:end="512:5"><if pos:start="510:5" pos:end="512:5">if <condition pos:start="510:8" pos:end="510:16">(<expr pos:start="510:9" pos:end="510:15"><name pos:start="510:9" pos:end="510:15">cacerts</name></expr>)</condition> <block pos:start="510:18" pos:end="512:5">{<block_content pos:start="511:9" pos:end="511:22">
        <expr_stmt pos:start="511:9" pos:end="511:22"><expr pos:start="511:9" pos:end="511:21"><call pos:start="511:9" pos:end="511:21"><name pos:start="511:9" pos:end="511:12">free</name><argument_list pos:start="511:13" pos:end="511:21">(<argument pos:start="511:14" pos:end="511:20"><expr pos:start="511:14" pos:end="511:20"><name pos:start="511:14" pos:end="511:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="513:5" pos:end="515:5"><if pos:start="513:5" pos:end="515:5">if <condition pos:start="513:8" pos:end="513:13">(<expr pos:start="513:9" pos:end="513:12"><name pos:start="513:9" pos:end="513:12">pkey</name></expr>)</condition> <block pos:start="513:15" pos:end="515:5">{<block_content pos:start="514:9" pos:end="514:19">
        <expr_stmt pos:start="514:9" pos:end="514:19"><expr pos:start="514:9" pos:end="514:18"><call pos:start="514:9" pos:end="514:18"><name pos:start="514:9" pos:end="514:12">free</name><argument_list pos:start="514:13" pos:end="514:18">(<argument pos:start="514:14" pos:end="514:17"><expr pos:start="514:14" pos:end="514:17"><name pos:start="514:14" pos:end="514:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="519:1" pos:end="521:3">/*
 * This test case tests the set server with invalid parameters
 */</comment>
<function pos:start="522:1" pos:end="591:1"><type pos:start="522:1" pos:end="522:11"><specifier pos:start="522:1" pos:end="522:6">static</specifier> <name pos:start="522:8" pos:end="522:11">void</name></type> <name pos:start="522:13" pos:end="522:24">us897_test10</name> <parameter_list pos:start="522:26" pos:end="522:31">(<parameter pos:start="522:27" pos:end="522:30"><decl pos:start="522:27" pos:end="522:30"><type pos:start="522:27" pos:end="522:30"><name pos:start="522:27" pos:end="522:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="523:1" pos:end="591:1">{<block_content pos:start="524:5" pos:end="590:5">
    <decl_stmt pos:start="524:5" pos:end="524:18"><decl pos:start="524:5" pos:end="524:17"><type pos:start="524:5" pos:end="524:13"><name pos:start="524:5" pos:end="524:11">EST_CTX</name> <modifier pos:start="524:13" pos:end="524:13">*</modifier></type><name pos:start="524:14" pos:end="524:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="525:5" pos:end="525:31"><decl pos:start="525:5" pos:end="525:30"><type pos:start="525:5" pos:end="525:19"><name pos:start="525:5" pos:end="525:12">unsigned</name> <name pos:start="525:14" pos:end="525:17">char</name> <modifier pos:start="525:19" pos:end="525:19">*</modifier></type><name pos:start="525:20" pos:end="525:23">pkey</name> <init pos:start="525:25" pos:end="525:30">= <expr pos:start="525:27" pos:end="525:30"><name pos:start="525:27" pos:end="525:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="526:5" pos:end="526:34"><decl pos:start="526:5" pos:end="526:33"><type pos:start="526:5" pos:end="526:19"><name pos:start="526:5" pos:end="526:12">unsigned</name> <name pos:start="526:14" pos:end="526:17">char</name> <modifier pos:start="526:19" pos:end="526:19">*</modifier></type><name pos:start="526:20" pos:end="526:26">cacerts</name> <init pos:start="526:28" pos:end="526:33">= <expr pos:start="526:30" pos:end="526:33"><name pos:start="526:30" pos:end="526:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="527:5" pos:end="527:24"><decl pos:start="527:5" pos:end="527:23"><type pos:start="527:5" pos:end="527:7"><name pos:start="527:5" pos:end="527:7">int</name></type> <name pos:start="527:9" pos:end="527:19">cacerts_len</name> <init pos:start="527:21" pos:end="527:23">= <expr pos:start="527:23" pos:end="527:23"><literal type="number" pos:start="527:23" pos:end="527:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="528:5" pos:end="528:32"><decl pos:start="528:5" pos:end="528:31"><type pos:start="528:5" pos:end="528:13"><name pos:start="528:5" pos:end="528:13">EST_ERROR</name></type> <name pos:start="528:15" pos:end="528:16">rc</name> <init pos:start="528:18" pos:end="528:31">= <expr pos:start="528:20" pos:end="528:31"><name pos:start="528:20" pos:end="528:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="529:5" pos:end="533:67"><decl pos:start="529:5" pos:end="533:66"><type pos:start="529:5" pos:end="529:10"><name pos:start="529:5" pos:end="529:8">char</name> <modifier pos:start="529:10" pos:end="529:10">*</modifier></type><name pos:start="529:11" pos:end="529:30">server_name_too_long</name> <init pos:start="529:32" pos:end="533:66">= <expr pos:start="529:34" pos:end="533:66"><literal type="string" pos:start="529:34" pos:end="529:85">"12345678901234567890123456789012345678901234567890"</literal>\
        <literal type="string" pos:start="530:9" pos:end="530:60">"12345678901234567890123456789012345678901234567890"</literal>\
        <literal type="string" pos:start="531:9" pos:end="531:60">"12345678901234567890123456789012345678901234567890"</literal>\
        <literal type="string" pos:start="532:9" pos:end="532:60">"12345678901234567890123456789012345678901234567890"</literal>\
        <literal type="string" pos:start="533:9" pos:end="533:66">"12345678901234567890123456789012345678901234567890123456"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="534:5" pos:end="534:23"><decl pos:start="534:5" pos:end="534:22"><type pos:start="534:5" pos:end="534:14"><name pos:start="534:5" pos:end="534:12">EVP_PKEY</name> <modifier pos:start="534:14" pos:end="534:14">*</modifier></type><name pos:start="534:15" pos:end="534:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="536:5" pos:end="536:13"><expr pos:start="536:5" pos:end="536:12"><call pos:start="536:5" pos:end="536:12"><name pos:start="536:5" pos:end="536:9">SLEEP</name><argument_list pos:start="536:10" pos:end="536:12">(<argument pos:start="536:11" pos:end="536:11"><expr pos:start="536:11" pos:end="536:11"><literal type="number" pos:start="536:11" pos:end="536:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="538:5" pos:end="540:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="541:5" pos:end="541:63"><expr pos:start="541:5" pos:end="541:62"><name pos:start="541:5" pos:end="541:15">cacerts_len</name> <operator pos:start="541:17" pos:end="541:17">=</operator> <call pos:start="541:19" pos:end="541:62"><name pos:start="541:19" pos:end="541:34">read_binary_file</name><argument_list pos:start="541:35" pos:end="541:62">(<argument pos:start="541:36" pos:end="541:51"><expr pos:start="541:36" pos:end="541:51"><name pos:start="541:36" pos:end="541:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="541:54" pos:end="541:61"><expr pos:start="541:54" pos:end="541:61"><operator pos:start="541:54" pos:end="541:54">&amp;</operator><name pos:start="541:55" pos:end="541:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="543:5" pos:end="545:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="546:5" pos:end="546:50"><expr pos:start="546:5" pos:end="546:49"><name pos:start="546:5" pos:end="546:12">priv_key</name> <operator pos:start="546:14" pos:end="546:14">=</operator> <call pos:start="546:16" pos:end="546:49"><name pos:start="546:16" pos:end="546:31">read_private_key</name><argument_list pos:start="546:32" pos:end="546:49">(<argument pos:start="546:33" pos:end="546:48"><expr pos:start="546:33" pos:end="546:48"><name pos:start="546:33" pos:end="546:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="547:5" pos:end="550:5"><if pos:start="547:5" pos:end="550:5">if <condition pos:start="547:8" pos:end="547:25">(<expr pos:start="547:9" pos:end="547:24"><name pos:start="547:9" pos:end="547:16">priv_key</name> <operator pos:start="547:18" pos:end="547:19">==</operator> <name pos:start="547:21" pos:end="547:24">NULL</name></expr>)</condition> <block pos:start="547:27" pos:end="550:5">{<block_content pos:start="548:9" pos:end="549:15">
	<expr_stmt pos:start="548:9" pos:end="548:80"><expr pos:start="548:9" pos:end="548:79"><call pos:start="548:9" pos:end="548:79"><name pos:start="548:9" pos:end="548:14">printf</name><argument_list pos:start="548:15" pos:end="548:79">(<argument pos:start="548:16" pos:end="548:60"><expr pos:start="548:16" pos:end="548:60"><literal type="string" pos:start="548:16" pos:end="548:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="548:63" pos:end="548:78"><expr pos:start="548:63" pos:end="548:78"><name pos:start="548:63" pos:end="548:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="549:9" pos:end="549:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="552:5" pos:end="553:54"><expr pos:start="552:5" pos:end="553:53"><name pos:start="552:5" pos:end="552:8">ectx</name> <operator pos:start="552:10" pos:end="552:10">=</operator> <call pos:start="552:12" pos:end="553:53"><name pos:start="552:12" pos:end="552:26">est_client_init</name><argument_list pos:start="552:27" pos:end="553:53">(<argument pos:start="552:28" pos:end="552:34"><expr pos:start="552:28" pos:end="552:34"><name pos:start="552:28" pos:end="552:34">cacerts</name></expr></argument>, <argument pos:start="552:37" pos:end="552:47"><expr pos:start="552:37" pos:end="552:47"><name pos:start="552:37" pos:end="552:47">cacerts_len</name></expr></argument>, <argument pos:start="552:50" pos:end="552:68"><expr pos:start="552:50" pos:end="552:68"><name pos:start="552:50" pos:end="552:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="553:28" pos:end="553:52"><expr pos:start="553:28" pos:end="553:52"><name pos:start="553:28" pos:end="553:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="555:5" pos:end="555:59"><expr pos:start="555:5" pos:end="555:58"><name pos:start="555:5" pos:end="555:6">rc</name> <operator pos:start="555:8" pos:end="555:8">=</operator> <call pos:start="555:10" pos:end="555:58"><name pos:start="555:10" pos:end="555:28">est_client_set_auth</name><argument_list pos:start="555:29" pos:end="555:58">(<argument pos:start="555:30" pos:end="555:33"><expr pos:start="555:30" pos:end="555:33"><name pos:start="555:30" pos:end="555:33">ectx</name></expr></argument>, <argument pos:start="555:36" pos:end="555:37"><expr pos:start="555:36" pos:end="555:37"><literal type="string" pos:start="555:36" pos:end="555:37">""</literal></expr></argument>, <argument pos:start="555:40" pos:end="555:41"><expr pos:start="555:40" pos:end="555:41"><literal type="string" pos:start="555:40" pos:end="555:41">""</literal></expr></argument>, <argument pos:start="555:44" pos:end="555:47"><expr pos:start="555:44" pos:end="555:47"><name pos:start="555:44" pos:end="555:47">NULL</name></expr></argument>, <argument pos:start="555:50" pos:end="555:57"><expr pos:start="555:50" pos:end="555:57"><name pos:start="555:50" pos:end="555:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="556:5" pos:end="556:34"><expr pos:start="556:5" pos:end="556:33"><call pos:start="556:5" pos:end="556:33"><name pos:start="556:5" pos:end="556:13">CU_ASSERT</name><argument_list pos:start="556:14" pos:end="556:33">(<argument pos:start="556:15" pos:end="556:32"><expr pos:start="556:15" pos:end="556:32"><name pos:start="556:15" pos:end="556:16">rc</name> <operator pos:start="556:18" pos:end="556:19">==</operator> <name pos:start="556:21" pos:end="556:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="558:5" pos:end="560:7">/*
     * Null server name
     */</comment>
    <expr_stmt pos:start="561:5" pos:end="561:68"><expr pos:start="561:5" pos:end="561:67"><name pos:start="561:5" pos:end="561:6">rc</name> <operator pos:start="561:8" pos:end="561:8">=</operator> <call pos:start="561:10" pos:end="561:67"><name pos:start="561:10" pos:end="561:30">est_client_set_server</name><argument_list pos:start="561:31" pos:end="561:67">(<argument pos:start="561:32" pos:end="561:35"><expr pos:start="561:32" pos:end="561:35"><name pos:start="561:32" pos:end="561:35">ectx</name></expr></argument>, <argument pos:start="561:38" pos:end="561:41"><expr pos:start="561:38" pos:end="561:41"><name pos:start="561:38" pos:end="561:41">NULL</name></expr></argument>, <argument pos:start="561:44" pos:end="561:60"><expr pos:start="561:44" pos:end="561:60"><name pos:start="561:44" pos:end="561:60">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="561:63" pos:end="561:66"><expr pos:start="561:63" pos:end="561:66"><name pos:start="561:63" pos:end="561:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="562:5" pos:end="562:49"><expr pos:start="562:5" pos:end="562:48"><call pos:start="562:5" pos:end="562:48"><name pos:start="562:5" pos:end="562:13">CU_ASSERT</name><argument_list pos:start="562:14" pos:end="562:48">(<argument pos:start="562:15" pos:end="562:47"><expr pos:start="562:15" pos:end="562:47"><name pos:start="562:15" pos:end="562:16">rc</name> <operator pos:start="562:18" pos:end="562:19">==</operator> <name pos:start="562:21" pos:end="562:47">EST_ERR_INVALID_SERVER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="564:5" pos:end="566:7">/*
     * server too long
     */</comment>
    <expr_stmt pos:start="567:5" pos:end="567:84"><expr pos:start="567:5" pos:end="567:83"><name pos:start="567:5" pos:end="567:6">rc</name> <operator pos:start="567:8" pos:end="567:8">=</operator> <call pos:start="567:10" pos:end="567:83"><name pos:start="567:10" pos:end="567:30">est_client_set_server</name><argument_list pos:start="567:31" pos:end="567:83">(<argument pos:start="567:32" pos:end="567:35"><expr pos:start="567:32" pos:end="567:35"><name pos:start="567:32" pos:end="567:35">ectx</name></expr></argument>, <argument pos:start="567:38" pos:end="567:57"><expr pos:start="567:38" pos:end="567:57"><name pos:start="567:38" pos:end="567:57">server_name_too_long</name></expr></argument>, <argument pos:start="567:60" pos:end="567:76"><expr pos:start="567:60" pos:end="567:76"><name pos:start="567:60" pos:end="567:76">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="567:79" pos:end="567:82"><expr pos:start="567:79" pos:end="567:82"><name pos:start="567:79" pos:end="567:82">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="568:5" pos:end="568:49"><expr pos:start="568:5" pos:end="568:48"><call pos:start="568:5" pos:end="568:48"><name pos:start="568:5" pos:end="568:13">CU_ASSERT</name><argument_list pos:start="568:14" pos:end="568:48">(<argument pos:start="568:15" pos:end="568:47"><expr pos:start="568:15" pos:end="568:47"><name pos:start="568:15" pos:end="568:16">rc</name> <operator pos:start="568:18" pos:end="568:19">==</operator> <name pos:start="568:21" pos:end="568:47">EST_ERR_INVALID_SERVER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="570:5" pos:end="572:7">/*
     *  port num less than 0
     */</comment>
    <expr_stmt pos:start="573:5" pos:end="573:64"><expr pos:start="573:5" pos:end="573:63"><name pos:start="573:5" pos:end="573:6">rc</name> <operator pos:start="573:8" pos:end="573:8">=</operator> <call pos:start="573:10" pos:end="573:63"><name pos:start="573:10" pos:end="573:30">est_client_set_server</name><argument_list pos:start="573:31" pos:end="573:63">(<argument pos:start="573:32" pos:end="573:35"><expr pos:start="573:32" pos:end="573:35"><name pos:start="573:32" pos:end="573:35">ectx</name></expr></argument>, <argument pos:start="573:38" pos:end="573:52"><expr pos:start="573:38" pos:end="573:52"><name pos:start="573:38" pos:end="573:52">US897_SERVER_IP</name></expr></argument>, <argument pos:start="573:55" pos:end="573:56"><expr pos:start="573:55" pos:end="573:56"><operator pos:start="573:55" pos:end="573:55">-</operator><literal type="number" pos:start="573:56" pos:end="573:56">1</literal></expr></argument>, <argument pos:start="573:59" pos:end="573:62"><expr pos:start="573:59" pos:end="573:62"><name pos:start="573:59" pos:end="573:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="574:5" pos:end="574:46"><expr pos:start="574:5" pos:end="574:45"><call pos:start="574:5" pos:end="574:45"><name pos:start="574:5" pos:end="574:13">CU_ASSERT</name><argument_list pos:start="574:14" pos:end="574:45">(<argument pos:start="574:15" pos:end="574:44"><expr pos:start="574:15" pos:end="574:44"><name pos:start="574:15" pos:end="574:16">rc</name> <operator pos:start="574:18" pos:end="574:19">==</operator> <name pos:start="574:21" pos:end="574:44">EST_ERR_INVALID_PORT_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="576:5" pos:end="578:7">/*
     * port num greater than max
     */</comment>
    <expr_stmt pos:start="579:5" pos:end="579:67"><expr pos:start="579:5" pos:end="579:66"><name pos:start="579:5" pos:end="579:6">rc</name> <operator pos:start="579:8" pos:end="579:8">=</operator> <call pos:start="579:10" pos:end="579:66"><name pos:start="579:10" pos:end="579:30">est_client_set_server</name><argument_list pos:start="579:31" pos:end="579:66">(<argument pos:start="579:32" pos:end="579:35"><expr pos:start="579:32" pos:end="579:35"><name pos:start="579:32" pos:end="579:35">ectx</name></expr></argument>, <argument pos:start="579:38" pos:end="579:52"><expr pos:start="579:38" pos:end="579:52"><name pos:start="579:38" pos:end="579:52">US897_SERVER_IP</name></expr></argument>, <argument pos:start="579:55" pos:end="579:59"><expr pos:start="579:55" pos:end="579:59"><literal type="number" pos:start="579:55" pos:end="579:59">65536</literal></expr></argument>, <argument pos:start="579:62" pos:end="579:65"><expr pos:start="579:62" pos:end="579:65"><name pos:start="579:62" pos:end="579:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="580:5" pos:end="580:46"><expr pos:start="580:5" pos:end="580:45"><call pos:start="580:5" pos:end="580:45"><name pos:start="580:5" pos:end="580:13">CU_ASSERT</name><argument_list pos:start="580:14" pos:end="580:45">(<argument pos:start="580:15" pos:end="580:44"><expr pos:start="580:15" pos:end="580:44"><name pos:start="580:15" pos:end="580:16">rc</name> <operator pos:start="580:18" pos:end="580:19">==</operator> <name pos:start="580:21" pos:end="580:44">EST_ERR_INVALID_PORT_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="582:5" pos:end="584:5"><if pos:start="582:5" pos:end="584:5">if <condition pos:start="582:8" pos:end="582:13">(<expr pos:start="582:9" pos:end="582:12"><name pos:start="582:9" pos:end="582:12">ectx</name></expr>)</condition> <block pos:start="582:15" pos:end="584:5">{<block_content pos:start="583:9" pos:end="583:26">
        <expr_stmt pos:start="583:9" pos:end="583:26"><expr pos:start="583:9" pos:end="583:25"><call pos:start="583:9" pos:end="583:25"><name pos:start="583:9" pos:end="583:19">est_destroy</name><argument_list pos:start="583:20" pos:end="583:25">(<argument pos:start="583:21" pos:end="583:24"><expr pos:start="583:21" pos:end="583:24"><name pos:start="583:21" pos:end="583:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="585:5" pos:end="587:5"><if pos:start="585:5" pos:end="587:5">if <condition pos:start="585:8" pos:end="585:16">(<expr pos:start="585:9" pos:end="585:15"><name pos:start="585:9" pos:end="585:15">cacerts</name></expr>)</condition> <block pos:start="585:18" pos:end="587:5">{<block_content pos:start="586:9" pos:end="586:22">
        <expr_stmt pos:start="586:9" pos:end="586:22"><expr pos:start="586:9" pos:end="586:21"><call pos:start="586:9" pos:end="586:21"><name pos:start="586:9" pos:end="586:12">free</name><argument_list pos:start="586:13" pos:end="586:21">(<argument pos:start="586:14" pos:end="586:20"><expr pos:start="586:14" pos:end="586:20"><name pos:start="586:14" pos:end="586:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="588:5" pos:end="590:5"><if pos:start="588:5" pos:end="590:5">if <condition pos:start="588:8" pos:end="588:13">(<expr pos:start="588:9" pos:end="588:12"><name pos:start="588:9" pos:end="588:12">pkey</name></expr>)</condition> <block pos:start="588:15" pos:end="590:5">{<block_content pos:start="589:9" pos:end="589:19">
        <expr_stmt pos:start="589:9" pos:end="589:19"><expr pos:start="589:9" pos:end="589:18"><call pos:start="589:9" pos:end="589:18"><name pos:start="589:9" pos:end="589:12">free</name><argument_list pos:start="589:13" pos:end="589:18">(<argument pos:start="589:14" pos:end="589:17"><expr pos:start="589:14" pos:end="589:17"><name pos:start="589:14" pos:end="589:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="594:1" pos:end="597:3">/*
 * This test case tests the Get CACerts request
 *
 */</comment>
<function pos:start="598:1" pos:end="677:1"><type pos:start="598:1" pos:end="598:11"><specifier pos:start="598:1" pos:end="598:6">static</specifier> <name pos:start="598:8" pos:end="598:11">void</name></type> <name pos:start="598:13" pos:end="598:24">us897_test11</name> <parameter_list pos:start="598:26" pos:end="598:31">(<parameter pos:start="598:27" pos:end="598:30"><decl pos:start="598:27" pos:end="598:30"><type pos:start="598:27" pos:end="598:30"><name pos:start="598:27" pos:end="598:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="599:1" pos:end="677:1">{<block_content pos:start="600:5" pos:end="676:5">
    <decl_stmt pos:start="600:5" pos:end="600:18"><decl pos:start="600:5" pos:end="600:17"><type pos:start="600:5" pos:end="600:13"><name pos:start="600:5" pos:end="600:11">EST_CTX</name> <modifier pos:start="600:13" pos:end="600:13">*</modifier></type><name pos:start="600:14" pos:end="600:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="601:5" pos:end="601:31"><decl pos:start="601:5" pos:end="601:30"><type pos:start="601:5" pos:end="601:19"><name pos:start="601:5" pos:end="601:12">unsigned</name> <name pos:start="601:14" pos:end="601:17">char</name> <modifier pos:start="601:19" pos:end="601:19">*</modifier></type><name pos:start="601:20" pos:end="601:23">pkey</name> <init pos:start="601:25" pos:end="601:30">= <expr pos:start="601:27" pos:end="601:30"><name pos:start="601:27" pos:end="601:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="602:5" pos:end="602:34"><decl pos:start="602:5" pos:end="602:33"><type pos:start="602:5" pos:end="602:19"><name pos:start="602:5" pos:end="602:12">unsigned</name> <name pos:start="602:14" pos:end="602:17">char</name> <modifier pos:start="602:19" pos:end="602:19">*</modifier></type><name pos:start="602:20" pos:end="602:26">cacerts</name> <init pos:start="602:28" pos:end="602:33">= <expr pos:start="602:30" pos:end="602:33"><name pos:start="602:30" pos:end="602:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="603:5" pos:end="603:24"><decl pos:start="603:5" pos:end="603:23"><type pos:start="603:5" pos:end="603:7"><name pos:start="603:5" pos:end="603:7">int</name></type> <name pos:start="603:9" pos:end="603:19">cacerts_len</name> <init pos:start="603:21" pos:end="603:23">= <expr pos:start="603:23" pos:end="603:23"><literal type="number" pos:start="603:23" pos:end="603:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="604:5" pos:end="604:32"><decl pos:start="604:5" pos:end="604:31"><type pos:start="604:5" pos:end="604:13"><name pos:start="604:5" pos:end="604:13">EST_ERROR</name></type> <name pos:start="604:15" pos:end="604:16">rc</name> <init pos:start="604:18" pos:end="604:31">= <expr pos:start="604:20" pos:end="604:31"><name pos:start="604:20" pos:end="604:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="606:5" pos:end="606:44"><decl pos:start="606:5" pos:end="606:43"><type pos:start="606:5" pos:end="606:19"><name pos:start="606:5" pos:end="606:12">unsigned</name> <name pos:start="606:14" pos:end="606:17">char</name> <modifier pos:start="606:19" pos:end="606:19">*</modifier></type><name pos:start="606:20" pos:end="606:36">retrieved_cacerts</name> <init pos:start="606:38" pos:end="606:43">= <expr pos:start="606:40" pos:end="606:43"><name pos:start="606:40" pos:end="606:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="607:5" pos:end="607:35"><decl pos:start="607:5" pos:end="607:34"><type pos:start="607:5" pos:end="607:7"><name pos:start="607:5" pos:end="607:7">int</name></type>  <name pos:start="607:10" pos:end="607:30">retrieved_cacerts_len</name> <init pos:start="607:32" pos:end="607:34">= <expr pos:start="607:34" pos:end="607:34"><literal type="number" pos:start="607:34" pos:end="607:34">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="608:5" pos:end="608:23"><decl pos:start="608:5" pos:end="608:22"><type pos:start="608:5" pos:end="608:14"><name pos:start="608:5" pos:end="608:12">EVP_PKEY</name> <modifier pos:start="608:14" pos:end="608:14">*</modifier></type><name pos:start="608:15" pos:end="608:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="610:5" pos:end="610:13"><expr pos:start="610:5" pos:end="610:12"><call pos:start="610:5" pos:end="610:12"><name pos:start="610:5" pos:end="610:9">SLEEP</name><argument_list pos:start="610:10" pos:end="610:12">(<argument pos:start="610:11" pos:end="610:11"><expr pos:start="610:11" pos:end="610:11"><literal type="number" pos:start="610:11" pos:end="610:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="612:5" pos:end="614:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="615:5" pos:end="615:63"><expr pos:start="615:5" pos:end="615:62"><name pos:start="615:5" pos:end="615:15">cacerts_len</name> <operator pos:start="615:17" pos:end="615:17">=</operator> <call pos:start="615:19" pos:end="615:62"><name pos:start="615:19" pos:end="615:34">read_binary_file</name><argument_list pos:start="615:35" pos:end="615:62">(<argument pos:start="615:36" pos:end="615:51"><expr pos:start="615:36" pos:end="615:51"><name pos:start="615:36" pos:end="615:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="615:54" pos:end="615:61"><expr pos:start="615:54" pos:end="615:61"><operator pos:start="615:54" pos:end="615:54">&amp;</operator><name pos:start="615:55" pos:end="615:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="616:5" pos:end="616:31"><expr pos:start="616:5" pos:end="616:30"><call pos:start="616:5" pos:end="616:30"><name pos:start="616:5" pos:end="616:13">CU_ASSERT</name><argument_list pos:start="616:14" pos:end="616:30">(<argument pos:start="616:15" pos:end="616:29"><expr pos:start="616:15" pos:end="616:29"><name pos:start="616:15" pos:end="616:25">cacerts_len</name> <operator pos:start="616:27" pos:end="616:27">&gt;</operator> <literal type="number" pos:start="616:29" pos:end="616:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="618:5" pos:end="620:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="621:5" pos:end="621:50"><expr pos:start="621:5" pos:end="621:49"><name pos:start="621:5" pos:end="621:12">priv_key</name> <operator pos:start="621:14" pos:end="621:14">=</operator> <call pos:start="621:16" pos:end="621:49"><name pos:start="621:16" pos:end="621:31">read_private_key</name><argument_list pos:start="621:32" pos:end="621:49">(<argument pos:start="621:33" pos:end="621:48"><expr pos:start="621:33" pos:end="621:48"><name pos:start="621:33" pos:end="621:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="622:5" pos:end="625:5"><if pos:start="622:5" pos:end="625:5">if <condition pos:start="622:8" pos:end="622:25">(<expr pos:start="622:9" pos:end="622:24"><name pos:start="622:9" pos:end="622:16">priv_key</name> <operator pos:start="622:18" pos:end="622:19">==</operator> <name pos:start="622:21" pos:end="622:24">NULL</name></expr>)</condition> <block pos:start="622:27" pos:end="625:5">{<block_content pos:start="623:9" pos:end="624:15">
	<expr_stmt pos:start="623:9" pos:end="623:80"><expr pos:start="623:9" pos:end="623:79"><call pos:start="623:9" pos:end="623:79"><name pos:start="623:9" pos:end="623:14">printf</name><argument_list pos:start="623:15" pos:end="623:79">(<argument pos:start="623:16" pos:end="623:60"><expr pos:start="623:16" pos:end="623:60"><literal type="string" pos:start="623:16" pos:end="623:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="623:63" pos:end="623:78"><expr pos:start="623:63" pos:end="623:78"><name pos:start="623:63" pos:end="623:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="624:9" pos:end="624:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="627:5" pos:end="628:54"><expr pos:start="627:5" pos:end="628:53"><name pos:start="627:5" pos:end="627:8">ectx</name> <operator pos:start="627:10" pos:end="627:10">=</operator> <call pos:start="627:12" pos:end="628:53"><name pos:start="627:12" pos:end="627:26">est_client_init</name><argument_list pos:start="627:27" pos:end="628:53">(<argument pos:start="627:28" pos:end="627:34"><expr pos:start="627:28" pos:end="627:34"><name pos:start="627:28" pos:end="627:34">cacerts</name></expr></argument>, <argument pos:start="627:37" pos:end="627:47"><expr pos:start="627:37" pos:end="627:47"><name pos:start="627:37" pos:end="627:47">cacerts_len</name></expr></argument>, <argument pos:start="627:50" pos:end="627:68"><expr pos:start="627:50" pos:end="627:68"><name pos:start="627:50" pos:end="627:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="628:28" pos:end="628:52"><expr pos:start="628:28" pos:end="628:52"><name pos:start="628:28" pos:end="628:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="629:5" pos:end="629:28"><expr pos:start="629:5" pos:end="629:27"><call pos:start="629:5" pos:end="629:27"><name pos:start="629:5" pos:end="629:13">CU_ASSERT</name><argument_list pos:start="629:14" pos:end="629:27">(<argument pos:start="629:15" pos:end="629:26"><expr pos:start="629:15" pos:end="629:26"><name pos:start="629:15" pos:end="629:18">ectx</name> <operator pos:start="629:20" pos:end="629:21">!=</operator> <name pos:start="629:23" pos:end="629:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="631:5" pos:end="631:59"><expr pos:start="631:5" pos:end="631:58"><name pos:start="631:5" pos:end="631:6">rc</name> <operator pos:start="631:8" pos:end="631:8">=</operator> <call pos:start="631:10" pos:end="631:58"><name pos:start="631:10" pos:end="631:28">est_client_set_auth</name><argument_list pos:start="631:29" pos:end="631:58">(<argument pos:start="631:30" pos:end="631:33"><expr pos:start="631:30" pos:end="631:33"><name pos:start="631:30" pos:end="631:33">ectx</name></expr></argument>, <argument pos:start="631:36" pos:end="631:37"><expr pos:start="631:36" pos:end="631:37"><literal type="string" pos:start="631:36" pos:end="631:37">""</literal></expr></argument>, <argument pos:start="631:40" pos:end="631:41"><expr pos:start="631:40" pos:end="631:41"><literal type="string" pos:start="631:40" pos:end="631:41">""</literal></expr></argument>, <argument pos:start="631:44" pos:end="631:47"><expr pos:start="631:44" pos:end="631:47"><name pos:start="631:44" pos:end="631:47">NULL</name></expr></argument>, <argument pos:start="631:50" pos:end="631:57"><expr pos:start="631:50" pos:end="631:57"><name pos:start="631:50" pos:end="631:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="632:5" pos:end="632:34"><expr pos:start="632:5" pos:end="632:33"><call pos:start="632:5" pos:end="632:33"><name pos:start="632:5" pos:end="632:13">CU_ASSERT</name><argument_list pos:start="632:14" pos:end="632:33">(<argument pos:start="632:15" pos:end="632:32"><expr pos:start="632:15" pos:end="632:32"><name pos:start="632:15" pos:end="632:16">rc</name> <operator pos:start="632:18" pos:end="632:19">==</operator> <name pos:start="632:21" pos:end="632:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="634:5" pos:end="634:74"><expr pos:start="634:5" pos:end="634:73"><call pos:start="634:5" pos:end="634:73"><name pos:start="634:5" pos:end="634:25">est_client_set_server</name><argument_list pos:start="634:26" pos:end="634:73">(<argument pos:start="634:27" pos:end="634:30"><expr pos:start="634:27" pos:end="634:30"><name pos:start="634:27" pos:end="634:30">ectx</name></expr></argument>, <argument pos:start="634:33" pos:end="634:47"><expr pos:start="634:33" pos:end="634:47"><name pos:start="634:33" pos:end="634:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="634:50" pos:end="634:66"><expr pos:start="634:50" pos:end="634:66"><name pos:start="634:50" pos:end="634:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="634:69" pos:end="634:72"><expr pos:start="634:69" pos:end="634:72"><name pos:start="634:69" pos:end="634:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="636:5" pos:end="638:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="639:5" pos:end="639:62"><expr pos:start="639:5" pos:end="639:61"><name pos:start="639:5" pos:end="639:6">rc</name> <operator pos:start="639:8" pos:end="639:8">=</operator> <call pos:start="639:10" pos:end="639:61"><name pos:start="639:10" pos:end="639:31">est_client_get_cacerts</name><argument_list pos:start="639:32" pos:end="639:61">(<argument pos:start="639:33" pos:end="639:36"><expr pos:start="639:33" pos:end="639:36"><name pos:start="639:33" pos:end="639:36">ectx</name></expr></argument>, <argument pos:start="639:39" pos:end="639:60"><expr pos:start="639:39" pos:end="639:60"><operator pos:start="639:39" pos:end="639:39">&amp;</operator><name pos:start="639:40" pos:end="639:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="640:5" pos:end="643:7">/*
     * should be successful, and should have obtained a valid buffer
     * containing the CA certs
     */</comment>
    <expr_stmt pos:start="644:5" pos:end="644:34"><expr pos:start="644:5" pos:end="644:33"><call pos:start="644:5" pos:end="644:33"><name pos:start="644:5" pos:end="644:13">CU_ASSERT</name><argument_list pos:start="644:14" pos:end="644:33">(<argument pos:start="644:15" pos:end="644:32"><expr pos:start="644:15" pos:end="644:32"><name pos:start="644:15" pos:end="644:16">rc</name> <operator pos:start="644:18" pos:end="644:19">==</operator> <name pos:start="644:21" pos:end="644:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="645:5" pos:end="645:41"><expr pos:start="645:5" pos:end="645:40"><call pos:start="645:5" pos:end="645:40"><name pos:start="645:5" pos:end="645:13">CU_ASSERT</name><argument_list pos:start="645:14" pos:end="645:40">(<argument pos:start="645:15" pos:end="645:39"><expr pos:start="645:15" pos:end="645:39"><name pos:start="645:15" pos:end="645:35">retrieved_cacerts_len</name> <operator pos:start="645:37" pos:end="645:37">&gt;</operator> <literal type="number" pos:start="645:39" pos:end="645:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="647:5" pos:end="647:54"><expr pos:start="647:5" pos:end="647:53"><name pos:start="647:5" pos:end="647:21">retrieved_cacerts</name> <operator pos:start="647:23" pos:end="647:23">=</operator> <call pos:start="647:25" pos:end="647:53"><name pos:start="647:25" pos:end="647:30">malloc</name><argument_list pos:start="647:31" pos:end="647:53">(<argument pos:start="647:32" pos:end="647:52"><expr pos:start="647:32" pos:end="647:52"><name pos:start="647:32" pos:end="647:52">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="649:5" pos:end="649:58"><expr pos:start="649:5" pos:end="649:57"><name pos:start="649:5" pos:end="649:6">rc</name> <operator pos:start="649:8" pos:end="649:8">=</operator> <call pos:start="649:10" pos:end="649:57"><name pos:start="649:10" pos:end="649:32">est_client_copy_cacerts</name><argument_list pos:start="649:33" pos:end="649:57">(<argument pos:start="649:34" pos:end="649:37"><expr pos:start="649:34" pos:end="649:37"><name pos:start="649:34" pos:end="649:37">ectx</name></expr></argument>, <argument pos:start="649:40" pos:end="649:56"><expr pos:start="649:40" pos:end="649:56"><name pos:start="649:40" pos:end="649:56">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="651:5" pos:end="653:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>    
    <if_stmt pos:start="654:5" pos:end="658:5"><if pos:start="654:5" pos:end="658:5">if <condition pos:start="654:8" pos:end="654:26">(<expr pos:start="654:9" pos:end="654:25"><name pos:start="654:9" pos:end="654:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="654:28" pos:end="658:5">{<block_content pos:start="656:9" pos:end="657:80">

        <expr_stmt pos:start="656:9" pos:end="656:73"><expr pos:start="656:9" pos:end="656:72"><call pos:start="656:9" pos:end="656:72"><name pos:start="656:9" pos:end="656:14">printf</name><argument_list pos:start="656:15" pos:end="656:72">(<argument pos:start="656:16" pos:end="656:52"><expr pos:start="656:16" pos:end="656:52"><literal type="string" pos:start="656:16" pos:end="656:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="656:55" pos:end="656:71"><expr pos:start="656:55" pos:end="656:71"><name pos:start="656:55" pos:end="656:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="657:9" pos:end="657:80"><expr pos:start="657:9" pos:end="657:79"><call pos:start="657:9" pos:end="657:79"><name pos:start="657:9" pos:end="657:14">printf</name><argument_list pos:start="657:15" pos:end="657:79">(<argument pos:start="657:16" pos:end="657:55"><expr pos:start="657:16" pos:end="657:55"><literal type="string" pos:start="657:16" pos:end="657:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="657:58" pos:end="657:78"><expr pos:start="657:58" pos:end="657:78"><name pos:start="657:58" pos:end="657:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="659:5" pos:end="659:28"><expr pos:start="659:5" pos:end="659:27"><call pos:start="659:5" pos:end="659:27"><name pos:start="659:5" pos:end="659:8">free</name><argument_list pos:start="659:9" pos:end="659:27">(<argument pos:start="659:10" pos:end="659:26"><expr pos:start="659:10" pos:end="659:26"><name pos:start="659:10" pos:end="659:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="661:5" pos:end="664:7">/*
     * make sure that the context is no longer valid and the EST client is
     * back to the uninitialized state
     */</comment>
    <expr_stmt pos:start="665:5" pos:end="665:62"><expr pos:start="665:5" pos:end="665:61"><name pos:start="665:5" pos:end="665:6">rc</name> <operator pos:start="665:8" pos:end="665:8">=</operator> <call pos:start="665:10" pos:end="665:61"><name pos:start="665:10" pos:end="665:31">est_client_get_cacerts</name><argument_list pos:start="665:32" pos:end="665:61">(<argument pos:start="665:33" pos:end="665:36"><expr pos:start="665:33" pos:end="665:36"><name pos:start="665:33" pos:end="665:36">ectx</name></expr></argument>, <argument pos:start="665:39" pos:end="665:60"><expr pos:start="665:39" pos:end="665:60"><operator pos:start="665:39" pos:end="665:39">&amp;</operator><name pos:start="665:40" pos:end="665:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="666:5" pos:end="666:52"><expr pos:start="666:5" pos:end="666:51"><call pos:start="666:5" pos:end="666:51"><name pos:start="666:5" pos:end="666:13">CU_ASSERT</name><argument_list pos:start="666:14" pos:end="666:51">(<argument pos:start="666:15" pos:end="666:50"><expr pos:start="666:15" pos:end="666:50"><name pos:start="666:15" pos:end="666:16">rc</name> <operator pos:start="666:18" pos:end="666:19">==</operator> <name pos:start="666:21" pos:end="666:50">EST_ERR_CLIENT_NOT_INITIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="668:5" pos:end="670:5"><if pos:start="668:5" pos:end="670:5">if <condition pos:start="668:8" pos:end="668:13">(<expr pos:start="668:9" pos:end="668:12"><name pos:start="668:9" pos:end="668:12">ectx</name></expr>)</condition> <block pos:start="668:15" pos:end="670:5">{<block_content pos:start="669:9" pos:end="669:26">
        <expr_stmt pos:start="669:9" pos:end="669:26"><expr pos:start="669:9" pos:end="669:25"><call pos:start="669:9" pos:end="669:25"><name pos:start="669:9" pos:end="669:19">est_destroy</name><argument_list pos:start="669:20" pos:end="669:25">(<argument pos:start="669:21" pos:end="669:24"><expr pos:start="669:21" pos:end="669:24"><name pos:start="669:21" pos:end="669:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="671:5" pos:end="673:5"><if pos:start="671:5" pos:end="673:5">if <condition pos:start="671:8" pos:end="671:16">(<expr pos:start="671:9" pos:end="671:15"><name pos:start="671:9" pos:end="671:15">cacerts</name></expr>)</condition> <block pos:start="671:18" pos:end="673:5">{<block_content pos:start="672:9" pos:end="672:22">
        <expr_stmt pos:start="672:9" pos:end="672:22"><expr pos:start="672:9" pos:end="672:21"><call pos:start="672:9" pos:end="672:21"><name pos:start="672:9" pos:end="672:12">free</name><argument_list pos:start="672:13" pos:end="672:21">(<argument pos:start="672:14" pos:end="672:20"><expr pos:start="672:14" pos:end="672:20"><name pos:start="672:14" pos:end="672:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="674:5" pos:end="676:5"><if pos:start="674:5" pos:end="676:5">if <condition pos:start="674:8" pos:end="674:13">(<expr pos:start="674:9" pos:end="674:12"><name pos:start="674:9" pos:end="674:12">pkey</name></expr>)</condition> <block pos:start="674:15" pos:end="676:5">{<block_content pos:start="675:9" pos:end="675:19">
        <expr_stmt pos:start="675:9" pos:end="675:19"><expr pos:start="675:9" pos:end="675:18"><call pos:start="675:9" pos:end="675:18"><name pos:start="675:9" pos:end="675:12">free</name><argument_list pos:start="675:13" pos:end="675:18">(<argument pos:start="675:14" pos:end="675:17"><expr pos:start="675:14" pos:end="675:17"><name pos:start="675:14" pos:end="675:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="680:1" pos:end="683:3">/*
 * This test case tests the Get CACerts request with invalid input parameters
 *
 */</comment>
<function pos:start="684:1" pos:end="738:1"><type pos:start="684:1" pos:end="684:11"><specifier pos:start="684:1" pos:end="684:6">static</specifier> <name pos:start="684:8" pos:end="684:11">void</name></type> <name pos:start="684:13" pos:end="684:24">us897_test12</name> <parameter_list pos:start="684:26" pos:end="684:31">(<parameter pos:start="684:27" pos:end="684:30"><decl pos:start="684:27" pos:end="684:30"><type pos:start="684:27" pos:end="684:30"><name pos:start="684:27" pos:end="684:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="685:1" pos:end="738:1">{<block_content pos:start="686:5" pos:end="737:5">
    <decl_stmt pos:start="686:5" pos:end="686:18"><decl pos:start="686:5" pos:end="686:17"><type pos:start="686:5" pos:end="686:13"><name pos:start="686:5" pos:end="686:11">EST_CTX</name> <modifier pos:start="686:13" pos:end="686:13">*</modifier></type><name pos:start="686:14" pos:end="686:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="687:5" pos:end="687:31"><decl pos:start="687:5" pos:end="687:30"><type pos:start="687:5" pos:end="687:19"><name pos:start="687:5" pos:end="687:12">unsigned</name> <name pos:start="687:14" pos:end="687:17">char</name> <modifier pos:start="687:19" pos:end="687:19">*</modifier></type><name pos:start="687:20" pos:end="687:23">pkey</name> <init pos:start="687:25" pos:end="687:30">= <expr pos:start="687:27" pos:end="687:30"><name pos:start="687:27" pos:end="687:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="688:5" pos:end="688:34"><decl pos:start="688:5" pos:end="688:33"><type pos:start="688:5" pos:end="688:19"><name pos:start="688:5" pos:end="688:12">unsigned</name> <name pos:start="688:14" pos:end="688:17">char</name> <modifier pos:start="688:19" pos:end="688:19">*</modifier></type><name pos:start="688:20" pos:end="688:26">cacerts</name> <init pos:start="688:28" pos:end="688:33">= <expr pos:start="688:30" pos:end="688:33"><name pos:start="688:30" pos:end="688:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="689:5" pos:end="689:24"><decl pos:start="689:5" pos:end="689:23"><type pos:start="689:5" pos:end="689:7"><name pos:start="689:5" pos:end="689:7">int</name></type> <name pos:start="689:9" pos:end="689:19">cacerts_len</name> <init pos:start="689:21" pos:end="689:23">= <expr pos:start="689:23" pos:end="689:23"><literal type="number" pos:start="689:23" pos:end="689:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="690:5" pos:end="690:32"><decl pos:start="690:5" pos:end="690:31"><type pos:start="690:5" pos:end="690:13"><name pos:start="690:5" pos:end="690:13">EST_ERROR</name></type> <name pos:start="690:15" pos:end="690:16">rc</name> <init pos:start="690:18" pos:end="690:31">= <expr pos:start="690:20" pos:end="690:31"><name pos:start="690:20" pos:end="690:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="691:5" pos:end="691:23"><decl pos:start="691:5" pos:end="691:22"><type pos:start="691:5" pos:end="691:14"><name pos:start="691:5" pos:end="691:12">EVP_PKEY</name> <modifier pos:start="691:14" pos:end="691:14">*</modifier></type><name pos:start="691:15" pos:end="691:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="693:5" pos:end="693:13"><expr pos:start="693:5" pos:end="693:12"><call pos:start="693:5" pos:end="693:12"><name pos:start="693:5" pos:end="693:9">SLEEP</name><argument_list pos:start="693:10" pos:end="693:12">(<argument pos:start="693:11" pos:end="693:11"><expr pos:start="693:11" pos:end="693:11"><literal type="number" pos:start="693:11" pos:end="693:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="695:5" pos:end="697:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="698:5" pos:end="698:63"><expr pos:start="698:5" pos:end="698:62"><name pos:start="698:5" pos:end="698:15">cacerts_len</name> <operator pos:start="698:17" pos:end="698:17">=</operator> <call pos:start="698:19" pos:end="698:62"><name pos:start="698:19" pos:end="698:34">read_binary_file</name><argument_list pos:start="698:35" pos:end="698:62">(<argument pos:start="698:36" pos:end="698:51"><expr pos:start="698:36" pos:end="698:51"><name pos:start="698:36" pos:end="698:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="698:54" pos:end="698:61"><expr pos:start="698:54" pos:end="698:61"><operator pos:start="698:54" pos:end="698:54">&amp;</operator><name pos:start="698:55" pos:end="698:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="699:5" pos:end="699:31"><expr pos:start="699:5" pos:end="699:30"><call pos:start="699:5" pos:end="699:30"><name pos:start="699:5" pos:end="699:13">CU_ASSERT</name><argument_list pos:start="699:14" pos:end="699:30">(<argument pos:start="699:15" pos:end="699:29"><expr pos:start="699:15" pos:end="699:29"><name pos:start="699:15" pos:end="699:25">cacerts_len</name> <operator pos:start="699:27" pos:end="699:27">&gt;</operator> <literal type="number" pos:start="699:29" pos:end="699:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="701:5" pos:end="703:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="704:5" pos:end="704:50"><expr pos:start="704:5" pos:end="704:49"><name pos:start="704:5" pos:end="704:12">priv_key</name> <operator pos:start="704:14" pos:end="704:14">=</operator> <call pos:start="704:16" pos:end="704:49"><name pos:start="704:16" pos:end="704:31">read_private_key</name><argument_list pos:start="704:32" pos:end="704:49">(<argument pos:start="704:33" pos:end="704:48"><expr pos:start="704:33" pos:end="704:48"><name pos:start="704:33" pos:end="704:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="705:5" pos:end="708:5"><if pos:start="705:5" pos:end="708:5">if <condition pos:start="705:8" pos:end="705:25">(<expr pos:start="705:9" pos:end="705:24"><name pos:start="705:9" pos:end="705:16">priv_key</name> <operator pos:start="705:18" pos:end="705:19">==</operator> <name pos:start="705:21" pos:end="705:24">NULL</name></expr>)</condition> <block pos:start="705:27" pos:end="708:5">{<block_content pos:start="706:9" pos:end="707:15">
	<expr_stmt pos:start="706:9" pos:end="706:80"><expr pos:start="706:9" pos:end="706:79"><call pos:start="706:9" pos:end="706:79"><name pos:start="706:9" pos:end="706:14">printf</name><argument_list pos:start="706:15" pos:end="706:79">(<argument pos:start="706:16" pos:end="706:60"><expr pos:start="706:16" pos:end="706:60"><literal type="string" pos:start="706:16" pos:end="706:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="706:63" pos:end="706:78"><expr pos:start="706:63" pos:end="706:78"><name pos:start="706:63" pos:end="706:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="707:9" pos:end="707:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="710:5" pos:end="711:54"><expr pos:start="710:5" pos:end="711:53"><name pos:start="710:5" pos:end="710:8">ectx</name> <operator pos:start="710:10" pos:end="710:10">=</operator> <call pos:start="710:12" pos:end="711:53"><name pos:start="710:12" pos:end="710:26">est_client_init</name><argument_list pos:start="710:27" pos:end="711:53">(<argument pos:start="710:28" pos:end="710:34"><expr pos:start="710:28" pos:end="710:34"><name pos:start="710:28" pos:end="710:34">cacerts</name></expr></argument>, <argument pos:start="710:37" pos:end="710:47"><expr pos:start="710:37" pos:end="710:47"><name pos:start="710:37" pos:end="710:47">cacerts_len</name></expr></argument>, <argument pos:start="710:50" pos:end="710:68"><expr pos:start="710:50" pos:end="710:68"><name pos:start="710:50" pos:end="710:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="711:28" pos:end="711:52"><expr pos:start="711:28" pos:end="711:52"><name pos:start="711:28" pos:end="711:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="712:5" pos:end="712:28"><expr pos:start="712:5" pos:end="712:27"><call pos:start="712:5" pos:end="712:27"><name pos:start="712:5" pos:end="712:13">CU_ASSERT</name><argument_list pos:start="712:14" pos:end="712:27">(<argument pos:start="712:15" pos:end="712:26"><expr pos:start="712:15" pos:end="712:26"><name pos:start="712:15" pos:end="712:18">ectx</name> <operator pos:start="712:20" pos:end="712:21">!=</operator> <name pos:start="712:23" pos:end="712:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="714:5" pos:end="714:59"><expr pos:start="714:5" pos:end="714:58"><name pos:start="714:5" pos:end="714:6">rc</name> <operator pos:start="714:8" pos:end="714:8">=</operator> <call pos:start="714:10" pos:end="714:58"><name pos:start="714:10" pos:end="714:28">est_client_set_auth</name><argument_list pos:start="714:29" pos:end="714:58">(<argument pos:start="714:30" pos:end="714:33"><expr pos:start="714:30" pos:end="714:33"><name pos:start="714:30" pos:end="714:33">ectx</name></expr></argument>, <argument pos:start="714:36" pos:end="714:37"><expr pos:start="714:36" pos:end="714:37"><literal type="string" pos:start="714:36" pos:end="714:37">""</literal></expr></argument>, <argument pos:start="714:40" pos:end="714:41"><expr pos:start="714:40" pos:end="714:41"><literal type="string" pos:start="714:40" pos:end="714:41">""</literal></expr></argument>, <argument pos:start="714:44" pos:end="714:47"><expr pos:start="714:44" pos:end="714:47"><name pos:start="714:44" pos:end="714:47">NULL</name></expr></argument>, <argument pos:start="714:50" pos:end="714:57"><expr pos:start="714:50" pos:end="714:57"><name pos:start="714:50" pos:end="714:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="715:5" pos:end="715:34"><expr pos:start="715:5" pos:end="715:33"><call pos:start="715:5" pos:end="715:33"><name pos:start="715:5" pos:end="715:13">CU_ASSERT</name><argument_list pos:start="715:14" pos:end="715:33">(<argument pos:start="715:15" pos:end="715:32"><expr pos:start="715:15" pos:end="715:32"><name pos:start="715:15" pos:end="715:16">rc</name> <operator pos:start="715:18" pos:end="715:19">==</operator> <name pos:start="715:21" pos:end="715:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="717:5" pos:end="717:74"><expr pos:start="717:5" pos:end="717:73"><call pos:start="717:5" pos:end="717:73"><name pos:start="717:5" pos:end="717:25">est_client_set_server</name><argument_list pos:start="717:26" pos:end="717:73">(<argument pos:start="717:27" pos:end="717:30"><expr pos:start="717:27" pos:end="717:30"><name pos:start="717:27" pos:end="717:30">ectx</name></expr></argument>, <argument pos:start="717:33" pos:end="717:47"><expr pos:start="717:33" pos:end="717:47"><name pos:start="717:33" pos:end="717:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="717:50" pos:end="717:66"><expr pos:start="717:50" pos:end="717:66"><name pos:start="717:50" pos:end="717:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="717:69" pos:end="717:72"><expr pos:start="717:69" pos:end="717:72"><name pos:start="717:69" pos:end="717:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="719:5" pos:end="721:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="722:5" pos:end="722:44"><expr pos:start="722:5" pos:end="722:43"><name pos:start="722:5" pos:end="722:6">rc</name> <operator pos:start="722:8" pos:end="722:8">=</operator> <call pos:start="722:10" pos:end="722:43"><name pos:start="722:10" pos:end="722:31">est_client_get_cacerts</name><argument_list pos:start="722:32" pos:end="722:43">(<argument pos:start="722:33" pos:end="722:36"><expr pos:start="722:33" pos:end="722:36"><name pos:start="722:33" pos:end="722:36">ectx</name></expr></argument>, <argument pos:start="722:39" pos:end="722:42"><expr pos:start="722:39" pos:end="722:42"><name pos:start="722:39" pos:end="722:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="723:5" pos:end="726:7">/*
     * should be successful, and should have obtained a valid buffer
     * containing the CA certs
     */</comment>
    <expr_stmt pos:start="727:5" pos:end="727:48"><expr pos:start="727:5" pos:end="727:47"><call pos:start="727:5" pos:end="727:47"><name pos:start="727:5" pos:end="727:13">CU_ASSERT</name><argument_list pos:start="727:14" pos:end="727:47">(<argument pos:start="727:15" pos:end="727:46"><expr pos:start="727:15" pos:end="727:46"><name pos:start="727:15" pos:end="727:16">rc</name> <operator pos:start="727:18" pos:end="727:19">==</operator> <name pos:start="727:21" pos:end="727:46">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="729:5" pos:end="731:5"><if pos:start="729:5" pos:end="731:5">if <condition pos:start="729:8" pos:end="729:13">(<expr pos:start="729:9" pos:end="729:12"><name pos:start="729:9" pos:end="729:12">ectx</name></expr>)</condition> <block pos:start="729:15" pos:end="731:5">{<block_content pos:start="730:9" pos:end="730:26">
        <expr_stmt pos:start="730:9" pos:end="730:26"><expr pos:start="730:9" pos:end="730:25"><call pos:start="730:9" pos:end="730:25"><name pos:start="730:9" pos:end="730:19">est_destroy</name><argument_list pos:start="730:20" pos:end="730:25">(<argument pos:start="730:21" pos:end="730:24"><expr pos:start="730:21" pos:end="730:24"><name pos:start="730:21" pos:end="730:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="732:5" pos:end="734:5"><if pos:start="732:5" pos:end="734:5">if <condition pos:start="732:8" pos:end="732:16">(<expr pos:start="732:9" pos:end="732:15"><name pos:start="732:9" pos:end="732:15">cacerts</name></expr>)</condition> <block pos:start="732:18" pos:end="734:5">{<block_content pos:start="733:9" pos:end="733:22">
        <expr_stmt pos:start="733:9" pos:end="733:22"><expr pos:start="733:9" pos:end="733:21"><call pos:start="733:9" pos:end="733:21"><name pos:start="733:9" pos:end="733:12">free</name><argument_list pos:start="733:13" pos:end="733:21">(<argument pos:start="733:14" pos:end="733:20"><expr pos:start="733:14" pos:end="733:20"><name pos:start="733:14" pos:end="733:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="735:5" pos:end="737:5"><if pos:start="735:5" pos:end="737:5">if <condition pos:start="735:8" pos:end="735:13">(<expr pos:start="735:9" pos:end="735:12"><name pos:start="735:9" pos:end="735:12">pkey</name></expr>)</condition> <block pos:start="735:15" pos:end="737:5">{<block_content pos:start="736:9" pos:end="736:19">
        <expr_stmt pos:start="736:9" pos:end="736:19"><expr pos:start="736:9" pos:end="736:18"><call pos:start="736:9" pos:end="736:18"><name pos:start="736:9" pos:end="736:12">free</name><argument_list pos:start="736:13" pos:end="736:18">(<argument pos:start="736:14" pos:end="736:17"><expr pos:start="736:14" pos:end="736:17"><name pos:start="736:14" pos:end="736:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="741:1" pos:end="744:3">/*
 * This test case tests the CA cert response verification function.  It will
 * verify a CAcert response containing a single certificate
 */</comment>
<function pos:start="745:1" pos:end="839:1"><type pos:start="745:1" pos:end="745:11"><specifier pos:start="745:1" pos:end="745:6">static</specifier> <name pos:start="745:8" pos:end="745:11">void</name></type> <name pos:start="745:13" pos:end="745:24">us897_test13</name> <parameter_list pos:start="745:26" pos:end="745:31">(<parameter pos:start="745:27" pos:end="745:30"><decl pos:start="745:27" pos:end="745:30"><type pos:start="745:27" pos:end="745:30"><name pos:start="745:27" pos:end="745:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="746:1" pos:end="839:1">{<block_content pos:start="747:5" pos:end="838:5">
    <decl_stmt pos:start="747:5" pos:end="747:18"><decl pos:start="747:5" pos:end="747:17"><type pos:start="747:5" pos:end="747:13"><name pos:start="747:5" pos:end="747:11">EST_CTX</name> <modifier pos:start="747:13" pos:end="747:13">*</modifier></type><name pos:start="747:14" pos:end="747:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="748:5" pos:end="748:31"><decl pos:start="748:5" pos:end="748:30"><type pos:start="748:5" pos:end="748:19"><name pos:start="748:5" pos:end="748:12">unsigned</name> <name pos:start="748:14" pos:end="748:17">char</name> <modifier pos:start="748:19" pos:end="748:19">*</modifier></type><name pos:start="748:20" pos:end="748:23">pkey</name> <init pos:start="748:25" pos:end="748:30">= <expr pos:start="748:27" pos:end="748:30"><name pos:start="748:27" pos:end="748:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="749:5" pos:end="749:34"><decl pos:start="749:5" pos:end="749:33"><type pos:start="749:5" pos:end="749:19"><name pos:start="749:5" pos:end="749:12">unsigned</name> <name pos:start="749:14" pos:end="749:17">char</name> <modifier pos:start="749:19" pos:end="749:19">*</modifier></type><name pos:start="749:20" pos:end="749:26">cacerts</name> <init pos:start="749:28" pos:end="749:33">= <expr pos:start="749:30" pos:end="749:33"><name pos:start="749:30" pos:end="749:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="750:5" pos:end="750:24"><decl pos:start="750:5" pos:end="750:23"><type pos:start="750:5" pos:end="750:7"><name pos:start="750:5" pos:end="750:7">int</name></type> <name pos:start="750:9" pos:end="750:19">cacerts_len</name> <init pos:start="750:21" pos:end="750:23">= <expr pos:start="750:23" pos:end="750:23"><literal type="number" pos:start="750:23" pos:end="750:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="751:5" pos:end="751:32"><decl pos:start="751:5" pos:end="751:31"><type pos:start="751:5" pos:end="751:13"><name pos:start="751:5" pos:end="751:13">EST_ERROR</name></type> <name pos:start="751:15" pos:end="751:16">rc</name> <init pos:start="751:18" pos:end="751:31">= <expr pos:start="751:20" pos:end="751:31"><name pos:start="751:20" pos:end="751:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="752:5" pos:end="752:23"><decl pos:start="752:5" pos:end="752:22"><type pos:start="752:5" pos:end="752:14"><name pos:start="752:5" pos:end="752:12">EVP_PKEY</name> <modifier pos:start="752:14" pos:end="752:14">*</modifier></type><name pos:start="752:15" pos:end="752:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="753:5" pos:end="753:44"><decl pos:start="753:5" pos:end="753:43"><type pos:start="753:5" pos:end="753:19"><name pos:start="753:5" pos:end="753:12">unsigned</name> <name pos:start="753:14" pos:end="753:17">char</name> <modifier pos:start="753:19" pos:end="753:19">*</modifier></type><name pos:start="753:20" pos:end="753:36">retrieved_cacerts</name> <init pos:start="753:38" pos:end="753:43">= <expr pos:start="753:40" pos:end="753:43"><name pos:start="753:40" pos:end="753:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="754:5" pos:end="754:35"><decl pos:start="754:5" pos:end="754:34"><type pos:start="754:5" pos:end="754:7"><name pos:start="754:5" pos:end="754:7">int</name></type>  <name pos:start="754:10" pos:end="754:30">retrieved_cacerts_len</name> <init pos:start="754:32" pos:end="754:34">= <expr pos:start="754:34" pos:end="754:34"><literal type="number" pos:start="754:34" pos:end="754:34">0</literal></expr></init></decl>;</decl_stmt>    

    <comment type="block" pos:start="756:5" pos:end="759:7">/*
     * Stop the existing server.  Need to ensure that the server
     * is using a specific CA cert chain.
     */</comment>
    <expr_stmt pos:start="760:5" pos:end="760:14"><expr pos:start="760:5" pos:end="760:13"><call pos:start="760:5" pos:end="760:13"><name pos:start="760:5" pos:end="760:11">st_stop</name><argument_list pos:start="760:12" pos:end="760:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="761:5" pos:end="761:13"><expr pos:start="761:5" pos:end="761:12"><call pos:start="761:5" pos:end="761:12"><name pos:start="761:5" pos:end="761:9">SLEEP</name><argument_list pos:start="761:10" pos:end="761:12">(<argument pos:start="761:11" pos:end="761:11"><expr pos:start="761:11" pos:end="761:11"><literal type="number" pos:start="761:11" pos:end="761:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="763:5" pos:end="766:7">/*
     * Spin up a new instance of the EST server
     * using a CA cert chain that contains just one cert
     */</comment>
    <expr_stmt pos:start="767:5" pos:end="774:27"><expr pos:start="767:5" pos:end="774:26"><name pos:start="767:5" pos:end="767:6">rc</name> <operator pos:start="767:8" pos:end="767:8">=</operator> <call pos:start="767:10" pos:end="774:26"><name pos:start="767:10" pos:end="767:17">st_start</name><argument_list pos:start="767:18" pos:end="774:26">(<argument pos:start="767:19" pos:end="767:35"><expr pos:start="767:19" pos:end="767:35"><name pos:start="767:19" pos:end="767:35">US897_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="768:19" pos:end="768:38"><expr pos:start="768:19" pos:end="768:38"><name pos:start="768:19" pos:end="768:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="769:19" pos:end="769:38"><expr pos:start="769:19" pos:end="769:38"><name pos:start="769:19" pos:end="769:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="770:19" pos:end="770:36"><expr pos:start="770:19" pos:end="770:36"><literal type="string" pos:start="770:19" pos:end="770:36">"US897 test realm"</literal></expr></argument>,
	          <argument pos:start="771:19" pos:end="771:31"><expr pos:start="771:19" pos:end="771:31"><name pos:start="771:19" pos:end="771:31">US897_CACERTS</name></expr></argument>,
	          <argument pos:start="772:19" pos:end="772:35"><expr pos:start="772:19" pos:end="772:35"><name pos:start="772:19" pos:end="772:35">US897_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="773:19" pos:end="773:39"><expr pos:start="773:19" pos:end="773:39"><literal type="string" pos:start="773:19" pos:end="773:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="774:19" pos:end="774:19"><expr pos:start="774:19" pos:end="774:19"><literal type="number" pos:start="774:19" pos:end="774:19">0</literal></expr></argument>, <argument pos:start="774:22" pos:end="774:22"><expr pos:start="774:22" pos:end="774:22"><literal type="number" pos:start="774:22" pos:end="774:22">0</literal></expr></argument>, <argument pos:start="774:25" pos:end="774:25"><expr pos:start="774:25" pos:end="774:25"><literal type="number" pos:start="774:25" pos:end="774:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="776:5" pos:end="776:23"><expr pos:start="776:5" pos:end="776:22"><call pos:start="776:5" pos:end="776:22"><name pos:start="776:5" pos:end="776:13">CU_ASSERT</name><argument_list pos:start="776:14" pos:end="776:22">(<argument pos:start="776:15" pos:end="776:21"><expr pos:start="776:15" pos:end="776:21"><name pos:start="776:15" pos:end="776:16">rc</name> <operator pos:start="776:18" pos:end="776:19">==</operator> <literal type="number" pos:start="776:21" pos:end="776:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="777:5" pos:end="777:19"><if pos:start="777:5" pos:end="777:19">if <condition pos:start="777:8" pos:end="777:11">(<expr pos:start="777:9" pos:end="777:10"><name pos:start="777:9" pos:end="777:10">rc</name></expr>)</condition><block type="pseudo" pos:start="777:13" pos:end="777:19"><block_content pos:start="777:13" pos:end="777:19"> <return pos:start="777:13" pos:end="777:19">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="778:5" pos:end="778:13"><expr pos:start="778:5" pos:end="778:12"><call pos:start="778:5" pos:end="778:12"><name pos:start="778:5" pos:end="778:9">SLEEP</name><argument_list pos:start="778:10" pos:end="778:12">(<argument pos:start="778:11" pos:end="778:11"><expr pos:start="778:11" pos:end="778:11"><literal type="number" pos:start="778:11" pos:end="778:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="780:5" pos:end="782:7">/*
     * Read in thestartup  CA certificates
     */</comment>
    <expr_stmt pos:start="783:5" pos:end="783:63"><expr pos:start="783:5" pos:end="783:62"><name pos:start="783:5" pos:end="783:15">cacerts_len</name> <operator pos:start="783:17" pos:end="783:17">=</operator> <call pos:start="783:19" pos:end="783:62"><name pos:start="783:19" pos:end="783:34">read_binary_file</name><argument_list pos:start="783:35" pos:end="783:62">(<argument pos:start="783:36" pos:end="783:51"><expr pos:start="783:36" pos:end="783:51"><name pos:start="783:36" pos:end="783:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="783:54" pos:end="783:61"><expr pos:start="783:54" pos:end="783:61"><operator pos:start="783:54" pos:end="783:54">&amp;</operator><name pos:start="783:55" pos:end="783:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="784:5" pos:end="784:31"><expr pos:start="784:5" pos:end="784:30"><call pos:start="784:5" pos:end="784:30"><name pos:start="784:5" pos:end="784:13">CU_ASSERT</name><argument_list pos:start="784:14" pos:end="784:30">(<argument pos:start="784:15" pos:end="784:29"><expr pos:start="784:15" pos:end="784:29"><name pos:start="784:15" pos:end="784:25">cacerts_len</name> <operator pos:start="784:27" pos:end="784:27">&gt;</operator> <literal type="number" pos:start="784:29" pos:end="784:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="786:5" pos:end="788:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="789:5" pos:end="789:50"><expr pos:start="789:5" pos:end="789:49"><name pos:start="789:5" pos:end="789:12">priv_key</name> <operator pos:start="789:14" pos:end="789:14">=</operator> <call pos:start="789:16" pos:end="789:49"><name pos:start="789:16" pos:end="789:31">read_private_key</name><argument_list pos:start="789:32" pos:end="789:49">(<argument pos:start="789:33" pos:end="789:48"><expr pos:start="789:33" pos:end="789:48"><name pos:start="789:33" pos:end="789:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="790:5" pos:end="793:5"><if pos:start="790:5" pos:end="793:5">if <condition pos:start="790:8" pos:end="790:25">(<expr pos:start="790:9" pos:end="790:24"><name pos:start="790:9" pos:end="790:16">priv_key</name> <operator pos:start="790:18" pos:end="790:19">==</operator> <name pos:start="790:21" pos:end="790:24">NULL</name></expr>)</condition> <block pos:start="790:27" pos:end="793:5">{<block_content pos:start="791:9" pos:end="792:15">
	<expr_stmt pos:start="791:9" pos:end="791:80"><expr pos:start="791:9" pos:end="791:79"><call pos:start="791:9" pos:end="791:79"><name pos:start="791:9" pos:end="791:14">printf</name><argument_list pos:start="791:15" pos:end="791:79">(<argument pos:start="791:16" pos:end="791:60"><expr pos:start="791:16" pos:end="791:60"><literal type="string" pos:start="791:16" pos:end="791:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="791:63" pos:end="791:78"><expr pos:start="791:63" pos:end="791:78"><name pos:start="791:63" pos:end="791:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="792:9" pos:end="792:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="795:5" pos:end="796:54"><expr pos:start="795:5" pos:end="796:53"><name pos:start="795:5" pos:end="795:8">ectx</name> <operator pos:start="795:10" pos:end="795:10">=</operator> <call pos:start="795:12" pos:end="796:53"><name pos:start="795:12" pos:end="795:26">est_client_init</name><argument_list pos:start="795:27" pos:end="796:53">(<argument pos:start="795:28" pos:end="795:34"><expr pos:start="795:28" pos:end="795:34"><name pos:start="795:28" pos:end="795:34">cacerts</name></expr></argument>, <argument pos:start="795:37" pos:end="795:47"><expr pos:start="795:37" pos:end="795:47"><name pos:start="795:37" pos:end="795:47">cacerts_len</name></expr></argument>, <argument pos:start="795:50" pos:end="795:68"><expr pos:start="795:50" pos:end="795:68"><name pos:start="795:50" pos:end="795:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="796:28" pos:end="796:52"><expr pos:start="796:28" pos:end="796:52"><name pos:start="796:28" pos:end="796:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="797:5" pos:end="797:28"><expr pos:start="797:5" pos:end="797:27"><call pos:start="797:5" pos:end="797:27"><name pos:start="797:5" pos:end="797:13">CU_ASSERT</name><argument_list pos:start="797:14" pos:end="797:27">(<argument pos:start="797:15" pos:end="797:26"><expr pos:start="797:15" pos:end="797:26"><name pos:start="797:15" pos:end="797:18">ectx</name> <operator pos:start="797:20" pos:end="797:21">!=</operator> <name pos:start="797:23" pos:end="797:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="799:5" pos:end="799:59"><expr pos:start="799:5" pos:end="799:58"><name pos:start="799:5" pos:end="799:6">rc</name> <operator pos:start="799:8" pos:end="799:8">=</operator> <call pos:start="799:10" pos:end="799:58"><name pos:start="799:10" pos:end="799:28">est_client_set_auth</name><argument_list pos:start="799:29" pos:end="799:58">(<argument pos:start="799:30" pos:end="799:33"><expr pos:start="799:30" pos:end="799:33"><name pos:start="799:30" pos:end="799:33">ectx</name></expr></argument>, <argument pos:start="799:36" pos:end="799:37"><expr pos:start="799:36" pos:end="799:37"><literal type="string" pos:start="799:36" pos:end="799:37">""</literal></expr></argument>, <argument pos:start="799:40" pos:end="799:41"><expr pos:start="799:40" pos:end="799:41"><literal type="string" pos:start="799:40" pos:end="799:41">""</literal></expr></argument>, <argument pos:start="799:44" pos:end="799:47"><expr pos:start="799:44" pos:end="799:47"><name pos:start="799:44" pos:end="799:47">NULL</name></expr></argument>, <argument pos:start="799:50" pos:end="799:57"><expr pos:start="799:50" pos:end="799:57"><name pos:start="799:50" pos:end="799:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="800:5" pos:end="800:34"><expr pos:start="800:5" pos:end="800:33"><call pos:start="800:5" pos:end="800:33"><name pos:start="800:5" pos:end="800:13">CU_ASSERT</name><argument_list pos:start="800:14" pos:end="800:33">(<argument pos:start="800:15" pos:end="800:32"><expr pos:start="800:15" pos:end="800:32"><name pos:start="800:15" pos:end="800:16">rc</name> <operator pos:start="800:18" pos:end="800:19">==</operator> <name pos:start="800:21" pos:end="800:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="802:5" pos:end="802:74"><expr pos:start="802:5" pos:end="802:73"><call pos:start="802:5" pos:end="802:73"><name pos:start="802:5" pos:end="802:25">est_client_set_server</name><argument_list pos:start="802:26" pos:end="802:73">(<argument pos:start="802:27" pos:end="802:30"><expr pos:start="802:27" pos:end="802:30"><name pos:start="802:27" pos:end="802:30">ectx</name></expr></argument>, <argument pos:start="802:33" pos:end="802:47"><expr pos:start="802:33" pos:end="802:47"><name pos:start="802:33" pos:end="802:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="802:50" pos:end="802:66"><expr pos:start="802:50" pos:end="802:66"><name pos:start="802:50" pos:end="802:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="802:69" pos:end="802:72"><expr pos:start="802:69" pos:end="802:72"><name pos:start="802:69" pos:end="802:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="804:5" pos:end="806:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="807:5" pos:end="807:62"><expr pos:start="807:5" pos:end="807:61"><name pos:start="807:5" pos:end="807:6">rc</name> <operator pos:start="807:8" pos:end="807:8">=</operator> <call pos:start="807:10" pos:end="807:61"><name pos:start="807:10" pos:end="807:31">est_client_get_cacerts</name><argument_list pos:start="807:32" pos:end="807:61">(<argument pos:start="807:33" pos:end="807:36"><expr pos:start="807:33" pos:end="807:36"><name pos:start="807:33" pos:end="807:36">ectx</name></expr></argument>, <argument pos:start="807:39" pos:end="807:60"><expr pos:start="807:39" pos:end="807:60"><operator pos:start="807:39" pos:end="807:39">&amp;</operator><name pos:start="807:40" pos:end="807:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="809:5" pos:end="812:7">/*
     * should be successful, and should have obtained a valid length
     * for the size of the CA certs buffer
     */</comment>
    <expr_stmt pos:start="813:5" pos:end="813:34"><expr pos:start="813:5" pos:end="813:33"><call pos:start="813:5" pos:end="813:33"><name pos:start="813:5" pos:end="813:13">CU_ASSERT</name><argument_list pos:start="813:14" pos:end="813:33">(<argument pos:start="813:15" pos:end="813:32"><expr pos:start="813:15" pos:end="813:32"><name pos:start="813:15" pos:end="813:16">rc</name> <operator pos:start="813:18" pos:end="813:19">==</operator> <name pos:start="813:21" pos:end="813:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="814:5" pos:end="814:41"><expr pos:start="814:5" pos:end="814:40"><call pos:start="814:5" pos:end="814:40"><name pos:start="814:5" pos:end="814:13">CU_ASSERT</name><argument_list pos:start="814:14" pos:end="814:40">(<argument pos:start="814:15" pos:end="814:39"><expr pos:start="814:15" pos:end="814:39"><name pos:start="814:15" pos:end="814:35">retrieved_cacerts_len</name> <operator pos:start="814:37" pos:end="814:37">&gt;</operator> <literal type="number" pos:start="814:39" pos:end="814:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="816:5" pos:end="816:54"><expr pos:start="816:5" pos:end="816:53"><name pos:start="816:5" pos:end="816:21">retrieved_cacerts</name> <operator pos:start="816:23" pos:end="816:23">=</operator> <call pos:start="816:25" pos:end="816:53"><name pos:start="816:25" pos:end="816:30">malloc</name><argument_list pos:start="816:31" pos:end="816:53">(<argument pos:start="816:32" pos:end="816:52"><expr pos:start="816:32" pos:end="816:52"><name pos:start="816:32" pos:end="816:52">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="818:5" pos:end="818:58"><expr pos:start="818:5" pos:end="818:57"><name pos:start="818:5" pos:end="818:6">rc</name> <operator pos:start="818:8" pos:end="818:8">=</operator> <call pos:start="818:10" pos:end="818:57"><name pos:start="818:10" pos:end="818:32">est_client_copy_cacerts</name><argument_list pos:start="818:33" pos:end="818:57">(<argument pos:start="818:34" pos:end="818:37"><expr pos:start="818:34" pos:end="818:37"><name pos:start="818:34" pos:end="818:37">ectx</name></expr></argument>, <argument pos:start="818:40" pos:end="818:56"><expr pos:start="818:40" pos:end="818:56"><name pos:start="818:40" pos:end="818:56">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="820:5" pos:end="822:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>    
    <if_stmt pos:start="823:5" pos:end="827:5"><if pos:start="823:5" pos:end="827:5">if <condition pos:start="823:8" pos:end="823:26">(<expr pos:start="823:9" pos:end="823:25"><name pos:start="823:9" pos:end="823:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="823:28" pos:end="827:5">{<block_content pos:start="825:9" pos:end="826:80">

        <expr_stmt pos:start="825:9" pos:end="825:73"><expr pos:start="825:9" pos:end="825:72"><call pos:start="825:9" pos:end="825:72"><name pos:start="825:9" pos:end="825:14">printf</name><argument_list pos:start="825:15" pos:end="825:72">(<argument pos:start="825:16" pos:end="825:52"><expr pos:start="825:16" pos:end="825:52"><literal type="string" pos:start="825:16" pos:end="825:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="825:55" pos:end="825:71"><expr pos:start="825:55" pos:end="825:71"><name pos:start="825:55" pos:end="825:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="826:9" pos:end="826:80"><expr pos:start="826:9" pos:end="826:79"><call pos:start="826:9" pos:end="826:79"><name pos:start="826:9" pos:end="826:14">printf</name><argument_list pos:start="826:15" pos:end="826:79">(<argument pos:start="826:16" pos:end="826:55"><expr pos:start="826:16" pos:end="826:55"><literal type="string" pos:start="826:16" pos:end="826:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="826:58" pos:end="826:78"><expr pos:start="826:58" pos:end="826:78"><name pos:start="826:58" pos:end="826:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="828:5" pos:end="828:28"><expr pos:start="828:5" pos:end="828:27"><call pos:start="828:5" pos:end="828:27"><name pos:start="828:5" pos:end="828:8">free</name><argument_list pos:start="828:9" pos:end="828:27">(<argument pos:start="828:10" pos:end="828:26"><expr pos:start="828:10" pos:end="828:26"><name pos:start="828:10" pos:end="828:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="830:5" pos:end="832:5"><if pos:start="830:5" pos:end="832:5">if <condition pos:start="830:8" pos:end="830:13">(<expr pos:start="830:9" pos:end="830:12"><name pos:start="830:9" pos:end="830:12">ectx</name></expr>)</condition> <block pos:start="830:15" pos:end="832:5">{<block_content pos:start="831:9" pos:end="831:26">
        <expr_stmt pos:start="831:9" pos:end="831:26"><expr pos:start="831:9" pos:end="831:25"><call pos:start="831:9" pos:end="831:25"><name pos:start="831:9" pos:end="831:19">est_destroy</name><argument_list pos:start="831:20" pos:end="831:25">(<argument pos:start="831:21" pos:end="831:24"><expr pos:start="831:21" pos:end="831:24"><name pos:start="831:21" pos:end="831:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="833:5" pos:end="835:5"><if pos:start="833:5" pos:end="835:5">if <condition pos:start="833:8" pos:end="833:16">(<expr pos:start="833:9" pos:end="833:15"><name pos:start="833:9" pos:end="833:15">cacerts</name></expr>)</condition> <block pos:start="833:18" pos:end="835:5">{<block_content pos:start="834:9" pos:end="834:22">
        <expr_stmt pos:start="834:9" pos:end="834:22"><expr pos:start="834:9" pos:end="834:21"><call pos:start="834:9" pos:end="834:21"><name pos:start="834:9" pos:end="834:12">free</name><argument_list pos:start="834:13" pos:end="834:21">(<argument pos:start="834:14" pos:end="834:20"><expr pos:start="834:14" pos:end="834:20"><name pos:start="834:14" pos:end="834:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="836:5" pos:end="838:5"><if pos:start="836:5" pos:end="838:5">if <condition pos:start="836:8" pos:end="836:13">(<expr pos:start="836:9" pos:end="836:12"><name pos:start="836:9" pos:end="836:12">pkey</name></expr>)</condition> <block pos:start="836:15" pos:end="838:5">{<block_content pos:start="837:9" pos:end="837:19">
        <expr_stmt pos:start="837:9" pos:end="837:19"><expr pos:start="837:9" pos:end="837:18"><call pos:start="837:9" pos:end="837:18"><name pos:start="837:9" pos:end="837:12">free</name><argument_list pos:start="837:13" pos:end="837:18">(<argument pos:start="837:14" pos:end="837:17"><expr pos:start="837:14" pos:end="837:17"><name pos:start="837:14" pos:end="837:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="842:1" pos:end="845:3">/*
 * This test case tests the CA cert response verification function.  It will
 * verify a CAcert response containing a single chain with multiple certs
 */</comment>
<function pos:start="846:1" pos:end="940:1"><type pos:start="846:1" pos:end="846:11"><specifier pos:start="846:1" pos:end="846:6">static</specifier> <name pos:start="846:8" pos:end="846:11">void</name></type> <name pos:start="846:13" pos:end="846:24">us897_test14</name> <parameter_list pos:start="846:26" pos:end="846:31">(<parameter pos:start="846:27" pos:end="846:30"><decl pos:start="846:27" pos:end="846:30"><type pos:start="846:27" pos:end="846:30"><name pos:start="846:27" pos:end="846:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="847:1" pos:end="940:1">{<block_content pos:start="848:5" pos:end="939:5">
    <decl_stmt pos:start="848:5" pos:end="848:18"><decl pos:start="848:5" pos:end="848:17"><type pos:start="848:5" pos:end="848:13"><name pos:start="848:5" pos:end="848:11">EST_CTX</name> <modifier pos:start="848:13" pos:end="848:13">*</modifier></type><name pos:start="848:14" pos:end="848:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="849:5" pos:end="849:31"><decl pos:start="849:5" pos:end="849:30"><type pos:start="849:5" pos:end="849:19"><name pos:start="849:5" pos:end="849:12">unsigned</name> <name pos:start="849:14" pos:end="849:17">char</name> <modifier pos:start="849:19" pos:end="849:19">*</modifier></type><name pos:start="849:20" pos:end="849:23">pkey</name> <init pos:start="849:25" pos:end="849:30">= <expr pos:start="849:27" pos:end="849:30"><name pos:start="849:27" pos:end="849:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="850:5" pos:end="850:34"><decl pos:start="850:5" pos:end="850:33"><type pos:start="850:5" pos:end="850:19"><name pos:start="850:5" pos:end="850:12">unsigned</name> <name pos:start="850:14" pos:end="850:17">char</name> <modifier pos:start="850:19" pos:end="850:19">*</modifier></type><name pos:start="850:20" pos:end="850:26">cacerts</name> <init pos:start="850:28" pos:end="850:33">= <expr pos:start="850:30" pos:end="850:33"><name pos:start="850:30" pos:end="850:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="851:5" pos:end="851:24"><decl pos:start="851:5" pos:end="851:23"><type pos:start="851:5" pos:end="851:7"><name pos:start="851:5" pos:end="851:7">int</name></type> <name pos:start="851:9" pos:end="851:19">cacerts_len</name> <init pos:start="851:21" pos:end="851:23">= <expr pos:start="851:23" pos:end="851:23"><literal type="number" pos:start="851:23" pos:end="851:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="852:5" pos:end="852:32"><decl pos:start="852:5" pos:end="852:31"><type pos:start="852:5" pos:end="852:13"><name pos:start="852:5" pos:end="852:13">EST_ERROR</name></type> <name pos:start="852:15" pos:end="852:16">rc</name> <init pos:start="852:18" pos:end="852:31">= <expr pos:start="852:20" pos:end="852:31"><name pos:start="852:20" pos:end="852:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="853:5" pos:end="853:23"><decl pos:start="853:5" pos:end="853:22"><type pos:start="853:5" pos:end="853:14"><name pos:start="853:5" pos:end="853:12">EVP_PKEY</name> <modifier pos:start="853:14" pos:end="853:14">*</modifier></type><name pos:start="853:15" pos:end="853:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="854:5" pos:end="854:44"><decl pos:start="854:5" pos:end="854:43"><type pos:start="854:5" pos:end="854:19"><name pos:start="854:5" pos:end="854:12">unsigned</name> <name pos:start="854:14" pos:end="854:17">char</name> <modifier pos:start="854:19" pos:end="854:19">*</modifier></type><name pos:start="854:20" pos:end="854:36">retrieved_cacerts</name> <init pos:start="854:38" pos:end="854:43">= <expr pos:start="854:40" pos:end="854:43"><name pos:start="854:40" pos:end="854:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="855:5" pos:end="855:35"><decl pos:start="855:5" pos:end="855:34"><type pos:start="855:5" pos:end="855:7"><name pos:start="855:5" pos:end="855:7">int</name></type>  <name pos:start="855:10" pos:end="855:30">retrieved_cacerts_len</name> <init pos:start="855:32" pos:end="855:34">= <expr pos:start="855:34" pos:end="855:34"><literal type="number" pos:start="855:34" pos:end="855:34">0</literal></expr></init></decl>;</decl_stmt>    

    <comment type="block" pos:start="857:5" pos:end="860:7">/*
     * Stop the existing server.  Need to ensure that the server
     * is using a specific CA cert chain.
     */</comment>
    <expr_stmt pos:start="861:5" pos:end="861:14"><expr pos:start="861:5" pos:end="861:13"><call pos:start="861:5" pos:end="861:13"><name pos:start="861:5" pos:end="861:11">st_stop</name><argument_list pos:start="861:12" pos:end="861:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="862:5" pos:end="862:13"><expr pos:start="862:5" pos:end="862:12"><call pos:start="862:5" pos:end="862:12"><name pos:start="862:5" pos:end="862:9">SLEEP</name><argument_list pos:start="862:10" pos:end="862:12">(<argument pos:start="862:11" pos:end="862:11"><expr pos:start="862:11" pos:end="862:11"><literal type="number" pos:start="862:11" pos:end="862:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="864:5" pos:end="867:7">/*
     * Spin up a new instance of the EST server
     * using a CA cert chain that contains just one cert
     */</comment>
    <expr_stmt pos:start="868:5" pos:end="875:27"><expr pos:start="868:5" pos:end="875:26"><name pos:start="868:5" pos:end="868:6">rc</name> <operator pos:start="868:8" pos:end="868:8">=</operator> <call pos:start="868:10" pos:end="875:26"><name pos:start="868:10" pos:end="868:17">st_start</name><argument_list pos:start="868:18" pos:end="875:26">(<argument pos:start="868:19" pos:end="868:35"><expr pos:start="868:19" pos:end="868:35"><name pos:start="868:19" pos:end="868:35">US897_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="869:19" pos:end="869:38"><expr pos:start="869:19" pos:end="869:38"><name pos:start="869:19" pos:end="869:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="870:19" pos:end="870:38"><expr pos:start="870:19" pos:end="870:38"><name pos:start="870:19" pos:end="870:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="871:19" pos:end="871:36"><expr pos:start="871:19" pos:end="871:36"><literal type="string" pos:start="871:19" pos:end="871:36">"US897 test realm"</literal></expr></argument>,
                  <argument pos:start="872:19" pos:end="872:55"><expr pos:start="872:19" pos:end="872:55"><name pos:start="872:19" pos:end="872:55">US897_CACERTS_SINGLE_CHAIN_MULT_CERTS</name></expr></argument>,
	          <argument pos:start="873:19" pos:end="873:35"><expr pos:start="873:19" pos:end="873:35"><name pos:start="873:19" pos:end="873:35">US897_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="874:19" pos:end="874:39"><expr pos:start="874:19" pos:end="874:39"><literal type="string" pos:start="874:19" pos:end="874:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="875:19" pos:end="875:19"><expr pos:start="875:19" pos:end="875:19"><literal type="number" pos:start="875:19" pos:end="875:19">0</literal></expr></argument>, <argument pos:start="875:22" pos:end="875:22"><expr pos:start="875:22" pos:end="875:22"><literal type="number" pos:start="875:22" pos:end="875:22">0</literal></expr></argument>, <argument pos:start="875:25" pos:end="875:25"><expr pos:start="875:25" pos:end="875:25"><literal type="number" pos:start="875:25" pos:end="875:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="877:5" pos:end="877:23"><expr pos:start="877:5" pos:end="877:22"><call pos:start="877:5" pos:end="877:22"><name pos:start="877:5" pos:end="877:13">CU_ASSERT</name><argument_list pos:start="877:14" pos:end="877:22">(<argument pos:start="877:15" pos:end="877:21"><expr pos:start="877:15" pos:end="877:21"><name pos:start="877:15" pos:end="877:16">rc</name> <operator pos:start="877:18" pos:end="877:19">==</operator> <literal type="number" pos:start="877:21" pos:end="877:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="878:5" pos:end="878:19"><if pos:start="878:5" pos:end="878:19">if <condition pos:start="878:8" pos:end="878:11">(<expr pos:start="878:9" pos:end="878:10"><name pos:start="878:9" pos:end="878:10">rc</name></expr>)</condition><block type="pseudo" pos:start="878:13" pos:end="878:19"><block_content pos:start="878:13" pos:end="878:19"> <return pos:start="878:13" pos:end="878:19">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="879:5" pos:end="879:13"><expr pos:start="879:5" pos:end="879:12"><call pos:start="879:5" pos:end="879:12"><name pos:start="879:5" pos:end="879:9">SLEEP</name><argument_list pos:start="879:10" pos:end="879:12">(<argument pos:start="879:11" pos:end="879:11"><expr pos:start="879:11" pos:end="879:11"><literal type="number" pos:start="879:11" pos:end="879:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="881:5" pos:end="883:7">/*
     * Read in thestartup  CA certificates
     */</comment>
    <expr_stmt pos:start="884:5" pos:end="884:63"><expr pos:start="884:5" pos:end="884:62"><name pos:start="884:5" pos:end="884:15">cacerts_len</name> <operator pos:start="884:17" pos:end="884:17">=</operator> <call pos:start="884:19" pos:end="884:62"><name pos:start="884:19" pos:end="884:34">read_binary_file</name><argument_list pos:start="884:35" pos:end="884:62">(<argument pos:start="884:36" pos:end="884:51"><expr pos:start="884:36" pos:end="884:51"><name pos:start="884:36" pos:end="884:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="884:54" pos:end="884:61"><expr pos:start="884:54" pos:end="884:61"><operator pos:start="884:54" pos:end="884:54">&amp;</operator><name pos:start="884:55" pos:end="884:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="885:5" pos:end="885:31"><expr pos:start="885:5" pos:end="885:30"><call pos:start="885:5" pos:end="885:30"><name pos:start="885:5" pos:end="885:13">CU_ASSERT</name><argument_list pos:start="885:14" pos:end="885:30">(<argument pos:start="885:15" pos:end="885:29"><expr pos:start="885:15" pos:end="885:29"><name pos:start="885:15" pos:end="885:25">cacerts_len</name> <operator pos:start="885:27" pos:end="885:27">&gt;</operator> <literal type="number" pos:start="885:29" pos:end="885:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="887:5" pos:end="889:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="890:5" pos:end="890:50"><expr pos:start="890:5" pos:end="890:49"><name pos:start="890:5" pos:end="890:12">priv_key</name> <operator pos:start="890:14" pos:end="890:14">=</operator> <call pos:start="890:16" pos:end="890:49"><name pos:start="890:16" pos:end="890:31">read_private_key</name><argument_list pos:start="890:32" pos:end="890:49">(<argument pos:start="890:33" pos:end="890:48"><expr pos:start="890:33" pos:end="890:48"><name pos:start="890:33" pos:end="890:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="891:5" pos:end="894:5"><if pos:start="891:5" pos:end="894:5">if <condition pos:start="891:8" pos:end="891:25">(<expr pos:start="891:9" pos:end="891:24"><name pos:start="891:9" pos:end="891:16">priv_key</name> <operator pos:start="891:18" pos:end="891:19">==</operator> <name pos:start="891:21" pos:end="891:24">NULL</name></expr>)</condition> <block pos:start="891:27" pos:end="894:5">{<block_content pos:start="892:9" pos:end="893:15">
	<expr_stmt pos:start="892:9" pos:end="892:80"><expr pos:start="892:9" pos:end="892:79"><call pos:start="892:9" pos:end="892:79"><name pos:start="892:9" pos:end="892:14">printf</name><argument_list pos:start="892:15" pos:end="892:79">(<argument pos:start="892:16" pos:end="892:60"><expr pos:start="892:16" pos:end="892:60"><literal type="string" pos:start="892:16" pos:end="892:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="892:63" pos:end="892:78"><expr pos:start="892:63" pos:end="892:78"><name pos:start="892:63" pos:end="892:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="893:9" pos:end="893:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="896:5" pos:end="897:54"><expr pos:start="896:5" pos:end="897:53"><name pos:start="896:5" pos:end="896:8">ectx</name> <operator pos:start="896:10" pos:end="896:10">=</operator> <call pos:start="896:12" pos:end="897:53"><name pos:start="896:12" pos:end="896:26">est_client_init</name><argument_list pos:start="896:27" pos:end="897:53">(<argument pos:start="896:28" pos:end="896:34"><expr pos:start="896:28" pos:end="896:34"><name pos:start="896:28" pos:end="896:34">cacerts</name></expr></argument>, <argument pos:start="896:37" pos:end="896:47"><expr pos:start="896:37" pos:end="896:47"><name pos:start="896:37" pos:end="896:47">cacerts_len</name></expr></argument>, <argument pos:start="896:50" pos:end="896:68"><expr pos:start="896:50" pos:end="896:68"><name pos:start="896:50" pos:end="896:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="897:28" pos:end="897:52"><expr pos:start="897:28" pos:end="897:52"><name pos:start="897:28" pos:end="897:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="898:5" pos:end="898:28"><expr pos:start="898:5" pos:end="898:27"><call pos:start="898:5" pos:end="898:27"><name pos:start="898:5" pos:end="898:13">CU_ASSERT</name><argument_list pos:start="898:14" pos:end="898:27">(<argument pos:start="898:15" pos:end="898:26"><expr pos:start="898:15" pos:end="898:26"><name pos:start="898:15" pos:end="898:18">ectx</name> <operator pos:start="898:20" pos:end="898:21">!=</operator> <name pos:start="898:23" pos:end="898:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="900:5" pos:end="900:59"><expr pos:start="900:5" pos:end="900:58"><name pos:start="900:5" pos:end="900:6">rc</name> <operator pos:start="900:8" pos:end="900:8">=</operator> <call pos:start="900:10" pos:end="900:58"><name pos:start="900:10" pos:end="900:28">est_client_set_auth</name><argument_list pos:start="900:29" pos:end="900:58">(<argument pos:start="900:30" pos:end="900:33"><expr pos:start="900:30" pos:end="900:33"><name pos:start="900:30" pos:end="900:33">ectx</name></expr></argument>, <argument pos:start="900:36" pos:end="900:37"><expr pos:start="900:36" pos:end="900:37"><literal type="string" pos:start="900:36" pos:end="900:37">""</literal></expr></argument>, <argument pos:start="900:40" pos:end="900:41"><expr pos:start="900:40" pos:end="900:41"><literal type="string" pos:start="900:40" pos:end="900:41">""</literal></expr></argument>, <argument pos:start="900:44" pos:end="900:47"><expr pos:start="900:44" pos:end="900:47"><name pos:start="900:44" pos:end="900:47">NULL</name></expr></argument>, <argument pos:start="900:50" pos:end="900:57"><expr pos:start="900:50" pos:end="900:57"><name pos:start="900:50" pos:end="900:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="901:5" pos:end="901:34"><expr pos:start="901:5" pos:end="901:33"><call pos:start="901:5" pos:end="901:33"><name pos:start="901:5" pos:end="901:13">CU_ASSERT</name><argument_list pos:start="901:14" pos:end="901:33">(<argument pos:start="901:15" pos:end="901:32"><expr pos:start="901:15" pos:end="901:32"><name pos:start="901:15" pos:end="901:16">rc</name> <operator pos:start="901:18" pos:end="901:19">==</operator> <name pos:start="901:21" pos:end="901:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="903:5" pos:end="903:74"><expr pos:start="903:5" pos:end="903:73"><call pos:start="903:5" pos:end="903:73"><name pos:start="903:5" pos:end="903:25">est_client_set_server</name><argument_list pos:start="903:26" pos:end="903:73">(<argument pos:start="903:27" pos:end="903:30"><expr pos:start="903:27" pos:end="903:30"><name pos:start="903:27" pos:end="903:30">ectx</name></expr></argument>, <argument pos:start="903:33" pos:end="903:47"><expr pos:start="903:33" pos:end="903:47"><name pos:start="903:33" pos:end="903:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="903:50" pos:end="903:66"><expr pos:start="903:50" pos:end="903:66"><name pos:start="903:50" pos:end="903:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="903:69" pos:end="903:72"><expr pos:start="903:69" pos:end="903:72"><name pos:start="903:69" pos:end="903:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="905:5" pos:end="907:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="908:5" pos:end="908:62"><expr pos:start="908:5" pos:end="908:61"><name pos:start="908:5" pos:end="908:6">rc</name> <operator pos:start="908:8" pos:end="908:8">=</operator> <call pos:start="908:10" pos:end="908:61"><name pos:start="908:10" pos:end="908:31">est_client_get_cacerts</name><argument_list pos:start="908:32" pos:end="908:61">(<argument pos:start="908:33" pos:end="908:36"><expr pos:start="908:33" pos:end="908:36"><name pos:start="908:33" pos:end="908:36">ectx</name></expr></argument>, <argument pos:start="908:39" pos:end="908:60"><expr pos:start="908:39" pos:end="908:60"><operator pos:start="908:39" pos:end="908:39">&amp;</operator><name pos:start="908:40" pos:end="908:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="910:5" pos:end="913:7">/*
     * should be successful, and should have obtained a valid length
     * for the size of the CA certs buffer
     */</comment>
    <expr_stmt pos:start="914:5" pos:end="914:34"><expr pos:start="914:5" pos:end="914:33"><call pos:start="914:5" pos:end="914:33"><name pos:start="914:5" pos:end="914:13">CU_ASSERT</name><argument_list pos:start="914:14" pos:end="914:33">(<argument pos:start="914:15" pos:end="914:32"><expr pos:start="914:15" pos:end="914:32"><name pos:start="914:15" pos:end="914:16">rc</name> <operator pos:start="914:18" pos:end="914:19">==</operator> <name pos:start="914:21" pos:end="914:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="915:5" pos:end="915:41"><expr pos:start="915:5" pos:end="915:40"><call pos:start="915:5" pos:end="915:40"><name pos:start="915:5" pos:end="915:13">CU_ASSERT</name><argument_list pos:start="915:14" pos:end="915:40">(<argument pos:start="915:15" pos:end="915:39"><expr pos:start="915:15" pos:end="915:39"><name pos:start="915:15" pos:end="915:35">retrieved_cacerts_len</name> <operator pos:start="915:37" pos:end="915:37">&gt;</operator> <literal type="number" pos:start="915:39" pos:end="915:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="917:5" pos:end="917:54"><expr pos:start="917:5" pos:end="917:53"><name pos:start="917:5" pos:end="917:21">retrieved_cacerts</name> <operator pos:start="917:23" pos:end="917:23">=</operator> <call pos:start="917:25" pos:end="917:53"><name pos:start="917:25" pos:end="917:30">malloc</name><argument_list pos:start="917:31" pos:end="917:53">(<argument pos:start="917:32" pos:end="917:52"><expr pos:start="917:32" pos:end="917:52"><name pos:start="917:32" pos:end="917:52">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="919:5" pos:end="919:58"><expr pos:start="919:5" pos:end="919:57"><name pos:start="919:5" pos:end="919:6">rc</name> <operator pos:start="919:8" pos:end="919:8">=</operator> <call pos:start="919:10" pos:end="919:57"><name pos:start="919:10" pos:end="919:32">est_client_copy_cacerts</name><argument_list pos:start="919:33" pos:end="919:57">(<argument pos:start="919:34" pos:end="919:37"><expr pos:start="919:34" pos:end="919:37"><name pos:start="919:34" pos:end="919:37">ectx</name></expr></argument>, <argument pos:start="919:40" pos:end="919:56"><expr pos:start="919:40" pos:end="919:56"><name pos:start="919:40" pos:end="919:56">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="921:5" pos:end="923:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>    
    <if_stmt pos:start="924:5" pos:end="928:5"><if pos:start="924:5" pos:end="928:5">if <condition pos:start="924:8" pos:end="924:26">(<expr pos:start="924:9" pos:end="924:25"><name pos:start="924:9" pos:end="924:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="924:28" pos:end="928:5">{<block_content pos:start="926:9" pos:end="927:80">

        <expr_stmt pos:start="926:9" pos:end="926:73"><expr pos:start="926:9" pos:end="926:72"><call pos:start="926:9" pos:end="926:72"><name pos:start="926:9" pos:end="926:14">printf</name><argument_list pos:start="926:15" pos:end="926:72">(<argument pos:start="926:16" pos:end="926:52"><expr pos:start="926:16" pos:end="926:52"><literal type="string" pos:start="926:16" pos:end="926:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="926:55" pos:end="926:71"><expr pos:start="926:55" pos:end="926:71"><name pos:start="926:55" pos:end="926:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="927:9" pos:end="927:80"><expr pos:start="927:9" pos:end="927:79"><call pos:start="927:9" pos:end="927:79"><name pos:start="927:9" pos:end="927:14">printf</name><argument_list pos:start="927:15" pos:end="927:79">(<argument pos:start="927:16" pos:end="927:55"><expr pos:start="927:16" pos:end="927:55"><literal type="string" pos:start="927:16" pos:end="927:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="927:58" pos:end="927:78"><expr pos:start="927:58" pos:end="927:78"><name pos:start="927:58" pos:end="927:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="929:5" pos:end="929:28"><expr pos:start="929:5" pos:end="929:27"><call pos:start="929:5" pos:end="929:27"><name pos:start="929:5" pos:end="929:8">free</name><argument_list pos:start="929:9" pos:end="929:27">(<argument pos:start="929:10" pos:end="929:26"><expr pos:start="929:10" pos:end="929:26"><name pos:start="929:10" pos:end="929:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="931:5" pos:end="933:5"><if pos:start="931:5" pos:end="933:5">if <condition pos:start="931:8" pos:end="931:13">(<expr pos:start="931:9" pos:end="931:12"><name pos:start="931:9" pos:end="931:12">ectx</name></expr>)</condition> <block pos:start="931:15" pos:end="933:5">{<block_content pos:start="932:9" pos:end="932:26">
        <expr_stmt pos:start="932:9" pos:end="932:26"><expr pos:start="932:9" pos:end="932:25"><call pos:start="932:9" pos:end="932:25"><name pos:start="932:9" pos:end="932:19">est_destroy</name><argument_list pos:start="932:20" pos:end="932:25">(<argument pos:start="932:21" pos:end="932:24"><expr pos:start="932:21" pos:end="932:24"><name pos:start="932:21" pos:end="932:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="934:5" pos:end="936:5"><if pos:start="934:5" pos:end="936:5">if <condition pos:start="934:8" pos:end="934:16">(<expr pos:start="934:9" pos:end="934:15"><name pos:start="934:9" pos:end="934:15">cacerts</name></expr>)</condition> <block pos:start="934:18" pos:end="936:5">{<block_content pos:start="935:9" pos:end="935:22">
        <expr_stmt pos:start="935:9" pos:end="935:22"><expr pos:start="935:9" pos:end="935:21"><call pos:start="935:9" pos:end="935:21"><name pos:start="935:9" pos:end="935:12">free</name><argument_list pos:start="935:13" pos:end="935:21">(<argument pos:start="935:14" pos:end="935:20"><expr pos:start="935:14" pos:end="935:20"><name pos:start="935:14" pos:end="935:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="937:5" pos:end="939:5"><if pos:start="937:5" pos:end="939:5">if <condition pos:start="937:8" pos:end="937:13">(<expr pos:start="937:9" pos:end="937:12"><name pos:start="937:9" pos:end="937:12">pkey</name></expr>)</condition> <block pos:start="937:15" pos:end="939:5">{<block_content pos:start="938:9" pos:end="938:19">
        <expr_stmt pos:start="938:9" pos:end="938:19"><expr pos:start="938:9" pos:end="938:18"><call pos:start="938:9" pos:end="938:18"><name pos:start="938:9" pos:end="938:12">free</name><argument_list pos:start="938:13" pos:end="938:18">(<argument pos:start="938:14" pos:end="938:17"><expr pos:start="938:14" pos:end="938:17"><name pos:start="938:14" pos:end="938:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="943:1" pos:end="947:3">/*
 * This test case tests the CA cert response verification function.  It will
 * verify a CAcert response containing a single chain with multiple certs and
 * a missing cert in the chain.  
 */</comment>
<function pos:start="948:1" pos:end="1051:1"><type pos:start="948:1" pos:end="948:11"><specifier pos:start="948:1" pos:end="948:6">static</specifier> <name pos:start="948:8" pos:end="948:11">void</name></type> <name pos:start="948:13" pos:end="948:24">us897_test15</name> <parameter_list pos:start="948:26" pos:end="948:31">(<parameter pos:start="948:27" pos:end="948:30"><decl pos:start="948:27" pos:end="948:30"><type pos:start="948:27" pos:end="948:30"><name pos:start="948:27" pos:end="948:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="949:1" pos:end="1051:1">{<block_content pos:start="950:5" pos:end="1050:5">
    <decl_stmt pos:start="950:5" pos:end="950:18"><decl pos:start="950:5" pos:end="950:17"><type pos:start="950:5" pos:end="950:13"><name pos:start="950:5" pos:end="950:11">EST_CTX</name> <modifier pos:start="950:13" pos:end="950:13">*</modifier></type><name pos:start="950:14" pos:end="950:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="951:5" pos:end="951:31"><decl pos:start="951:5" pos:end="951:30"><type pos:start="951:5" pos:end="951:19"><name pos:start="951:5" pos:end="951:12">unsigned</name> <name pos:start="951:14" pos:end="951:17">char</name> <modifier pos:start="951:19" pos:end="951:19">*</modifier></type><name pos:start="951:20" pos:end="951:23">pkey</name> <init pos:start="951:25" pos:end="951:30">= <expr pos:start="951:27" pos:end="951:30"><name pos:start="951:27" pos:end="951:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="952:5" pos:end="952:34"><decl pos:start="952:5" pos:end="952:33"><type pos:start="952:5" pos:end="952:19"><name pos:start="952:5" pos:end="952:12">unsigned</name> <name pos:start="952:14" pos:end="952:17">char</name> <modifier pos:start="952:19" pos:end="952:19">*</modifier></type><name pos:start="952:20" pos:end="952:26">cacerts</name> <init pos:start="952:28" pos:end="952:33">= <expr pos:start="952:30" pos:end="952:33"><name pos:start="952:30" pos:end="952:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="953:5" pos:end="953:24"><decl pos:start="953:5" pos:end="953:23"><type pos:start="953:5" pos:end="953:7"><name pos:start="953:5" pos:end="953:7">int</name></type> <name pos:start="953:9" pos:end="953:19">cacerts_len</name> <init pos:start="953:21" pos:end="953:23">= <expr pos:start="953:23" pos:end="953:23"><literal type="number" pos:start="953:23" pos:end="953:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="954:5" pos:end="954:32"><decl pos:start="954:5" pos:end="954:31"><type pos:start="954:5" pos:end="954:13"><name pos:start="954:5" pos:end="954:13">EST_ERROR</name></type> <name pos:start="954:15" pos:end="954:16">rc</name> <init pos:start="954:18" pos:end="954:31">= <expr pos:start="954:20" pos:end="954:31"><name pos:start="954:20" pos:end="954:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="955:5" pos:end="955:23"><decl pos:start="955:5" pos:end="955:22"><type pos:start="955:5" pos:end="955:14"><name pos:start="955:5" pos:end="955:12">EVP_PKEY</name> <modifier pos:start="955:14" pos:end="955:14">*</modifier></type><name pos:start="955:15" pos:end="955:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="956:5" pos:end="956:44"><decl pos:start="956:5" pos:end="956:43"><type pos:start="956:5" pos:end="956:19"><name pos:start="956:5" pos:end="956:12">unsigned</name> <name pos:start="956:14" pos:end="956:17">char</name> <modifier pos:start="956:19" pos:end="956:19">*</modifier></type><name pos:start="956:20" pos:end="956:36">retrieved_cacerts</name> <init pos:start="956:38" pos:end="956:43">= <expr pos:start="956:40" pos:end="956:43"><name pos:start="956:40" pos:end="956:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="957:5" pos:end="957:35"><decl pos:start="957:5" pos:end="957:34"><type pos:start="957:5" pos:end="957:7"><name pos:start="957:5" pos:end="957:7">int</name></type>  <name pos:start="957:10" pos:end="957:30">retrieved_cacerts_len</name> <init pos:start="957:32" pos:end="957:34">= <expr pos:start="957:34" pos:end="957:34"><literal type="number" pos:start="957:34" pos:end="957:34">0</literal></expr></init></decl>;</decl_stmt>    

    <comment type="block" pos:start="959:5" pos:end="962:7">/*
     * Stop the existing server.  Need to ensure that the server
     * is using a specific CA cert chain.
     */</comment>
    <expr_stmt pos:start="963:5" pos:end="963:14"><expr pos:start="963:5" pos:end="963:13"><call pos:start="963:5" pos:end="963:13"><name pos:start="963:5" pos:end="963:11">st_stop</name><argument_list pos:start="963:12" pos:end="963:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="964:5" pos:end="964:13"><expr pos:start="964:5" pos:end="964:12"><call pos:start="964:5" pos:end="964:12"><name pos:start="964:5" pos:end="964:9">SLEEP</name><argument_list pos:start="964:10" pos:end="964:12">(<argument pos:start="964:11" pos:end="964:11"><expr pos:start="964:11" pos:end="964:11"><literal type="number" pos:start="964:11" pos:end="964:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="966:5" pos:end="969:7">/*
     * Spin up a new instance of the EST server
     * using a CA cert chain that contains just one cert
     */</comment>
    <expr_stmt pos:start="970:5" pos:end="977:27"><expr pos:start="970:5" pos:end="977:26"><name pos:start="970:5" pos:end="970:6">rc</name> <operator pos:start="970:8" pos:end="970:8">=</operator> <call pos:start="970:10" pos:end="977:26"><name pos:start="970:10" pos:end="970:17">st_start</name><argument_list pos:start="970:18" pos:end="977:26">(<argument pos:start="970:19" pos:end="970:35"><expr pos:start="970:19" pos:end="970:35"><name pos:start="970:19" pos:end="970:35">US897_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="971:19" pos:end="971:38"><expr pos:start="971:19" pos:end="971:38"><name pos:start="971:19" pos:end="971:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="972:19" pos:end="972:38"><expr pos:start="972:19" pos:end="972:38"><name pos:start="972:19" pos:end="972:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="973:19" pos:end="973:36"><expr pos:start="973:19" pos:end="973:36"><literal type="string" pos:start="973:19" pos:end="973:36">"US897 test realm"</literal></expr></argument>,
                  <argument pos:start="974:19" pos:end="974:67"><expr pos:start="974:19" pos:end="974:67"><name pos:start="974:19" pos:end="974:67">US897_CACERTS_SINGLE_CHAIN_MULT_CERTS_ONE_MISSING</name></expr></argument>,
	          <argument pos:start="975:19" pos:end="975:35"><expr pos:start="975:19" pos:end="975:35"><name pos:start="975:19" pos:end="975:35">US897_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="976:19" pos:end="976:39"><expr pos:start="976:19" pos:end="976:39"><literal type="string" pos:start="976:19" pos:end="976:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="977:19" pos:end="977:19"><expr pos:start="977:19" pos:end="977:19"><literal type="number" pos:start="977:19" pos:end="977:19">0</literal></expr></argument>, <argument pos:start="977:22" pos:end="977:22"><expr pos:start="977:22" pos:end="977:22"><literal type="number" pos:start="977:22" pos:end="977:22">0</literal></expr></argument>, <argument pos:start="977:25" pos:end="977:25"><expr pos:start="977:25" pos:end="977:25"><literal type="number" pos:start="977:25" pos:end="977:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="979:5" pos:end="979:23"><expr pos:start="979:5" pos:end="979:22"><call pos:start="979:5" pos:end="979:22"><name pos:start="979:5" pos:end="979:13">CU_ASSERT</name><argument_list pos:start="979:14" pos:end="979:22">(<argument pos:start="979:15" pos:end="979:21"><expr pos:start="979:15" pos:end="979:21"><name pos:start="979:15" pos:end="979:16">rc</name> <operator pos:start="979:18" pos:end="979:19">==</operator> <literal type="number" pos:start="979:21" pos:end="979:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="980:5" pos:end="980:19"><if pos:start="980:5" pos:end="980:19">if <condition pos:start="980:8" pos:end="980:11">(<expr pos:start="980:9" pos:end="980:10"><name pos:start="980:9" pos:end="980:10">rc</name></expr>)</condition><block type="pseudo" pos:start="980:13" pos:end="980:19"><block_content pos:start="980:13" pos:end="980:19"> <return pos:start="980:13" pos:end="980:19">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="981:5" pos:end="981:13"><expr pos:start="981:5" pos:end="981:12"><call pos:start="981:5" pos:end="981:12"><name pos:start="981:5" pos:end="981:9">SLEEP</name><argument_list pos:start="981:10" pos:end="981:12">(<argument pos:start="981:11" pos:end="981:11"><expr pos:start="981:11" pos:end="981:11"><literal type="number" pos:start="981:11" pos:end="981:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="983:5" pos:end="985:7">/*
     * Read in thestartup  CA certificates
     */</comment>
    <expr_stmt pos:start="986:5" pos:end="986:63"><expr pos:start="986:5" pos:end="986:62"><name pos:start="986:5" pos:end="986:15">cacerts_len</name> <operator pos:start="986:17" pos:end="986:17">=</operator> <call pos:start="986:19" pos:end="986:62"><name pos:start="986:19" pos:end="986:34">read_binary_file</name><argument_list pos:start="986:35" pos:end="986:62">(<argument pos:start="986:36" pos:end="986:51"><expr pos:start="986:36" pos:end="986:51"><name pos:start="986:36" pos:end="986:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="986:54" pos:end="986:61"><expr pos:start="986:54" pos:end="986:61"><operator pos:start="986:54" pos:end="986:54">&amp;</operator><name pos:start="986:55" pos:end="986:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="987:5" pos:end="987:31"><expr pos:start="987:5" pos:end="987:30"><call pos:start="987:5" pos:end="987:30"><name pos:start="987:5" pos:end="987:13">CU_ASSERT</name><argument_list pos:start="987:14" pos:end="987:30">(<argument pos:start="987:15" pos:end="987:29"><expr pos:start="987:15" pos:end="987:29"><name pos:start="987:15" pos:end="987:25">cacerts_len</name> <operator pos:start="987:27" pos:end="987:27">&gt;</operator> <literal type="number" pos:start="987:29" pos:end="987:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="989:5" pos:end="991:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="992:5" pos:end="992:50"><expr pos:start="992:5" pos:end="992:49"><name pos:start="992:5" pos:end="992:12">priv_key</name> <operator pos:start="992:14" pos:end="992:14">=</operator> <call pos:start="992:16" pos:end="992:49"><name pos:start="992:16" pos:end="992:31">read_private_key</name><argument_list pos:start="992:32" pos:end="992:49">(<argument pos:start="992:33" pos:end="992:48"><expr pos:start="992:33" pos:end="992:48"><name pos:start="992:33" pos:end="992:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="993:5" pos:end="996:5"><if pos:start="993:5" pos:end="996:5">if <condition pos:start="993:8" pos:end="993:25">(<expr pos:start="993:9" pos:end="993:24"><name pos:start="993:9" pos:end="993:16">priv_key</name> <operator pos:start="993:18" pos:end="993:19">==</operator> <name pos:start="993:21" pos:end="993:24">NULL</name></expr>)</condition> <block pos:start="993:27" pos:end="996:5">{<block_content pos:start="994:9" pos:end="995:15">
	<expr_stmt pos:start="994:9" pos:end="994:80"><expr pos:start="994:9" pos:end="994:79"><call pos:start="994:9" pos:end="994:79"><name pos:start="994:9" pos:end="994:14">printf</name><argument_list pos:start="994:15" pos:end="994:79">(<argument pos:start="994:16" pos:end="994:60"><expr pos:start="994:16" pos:end="994:60"><literal type="string" pos:start="994:16" pos:end="994:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="994:63" pos:end="994:78"><expr pos:start="994:63" pos:end="994:78"><name pos:start="994:63" pos:end="994:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="995:9" pos:end="995:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="998:5" pos:end="999:54"><expr pos:start="998:5" pos:end="999:53"><name pos:start="998:5" pos:end="998:8">ectx</name> <operator pos:start="998:10" pos:end="998:10">=</operator> <call pos:start="998:12" pos:end="999:53"><name pos:start="998:12" pos:end="998:26">est_client_init</name><argument_list pos:start="998:27" pos:end="999:53">(<argument pos:start="998:28" pos:end="998:34"><expr pos:start="998:28" pos:end="998:34"><name pos:start="998:28" pos:end="998:34">cacerts</name></expr></argument>, <argument pos:start="998:37" pos:end="998:47"><expr pos:start="998:37" pos:end="998:47"><name pos:start="998:37" pos:end="998:47">cacerts_len</name></expr></argument>, <argument pos:start="998:50" pos:end="998:68"><expr pos:start="998:50" pos:end="998:68"><name pos:start="998:50" pos:end="998:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="999:28" pos:end="999:52"><expr pos:start="999:28" pos:end="999:52"><name pos:start="999:28" pos:end="999:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1000:5" pos:end="1000:28"><expr pos:start="1000:5" pos:end="1000:27"><call pos:start="1000:5" pos:end="1000:27"><name pos:start="1000:5" pos:end="1000:13">CU_ASSERT</name><argument_list pos:start="1000:14" pos:end="1000:27">(<argument pos:start="1000:15" pos:end="1000:26"><expr pos:start="1000:15" pos:end="1000:26"><name pos:start="1000:15" pos:end="1000:18">ectx</name> <operator pos:start="1000:20" pos:end="1000:21">!=</operator> <name pos:start="1000:23" pos:end="1000:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1002:5" pos:end="1002:59"><expr pos:start="1002:5" pos:end="1002:58"><name pos:start="1002:5" pos:end="1002:6">rc</name> <operator pos:start="1002:8" pos:end="1002:8">=</operator> <call pos:start="1002:10" pos:end="1002:58"><name pos:start="1002:10" pos:end="1002:28">est_client_set_auth</name><argument_list pos:start="1002:29" pos:end="1002:58">(<argument pos:start="1002:30" pos:end="1002:33"><expr pos:start="1002:30" pos:end="1002:33"><name pos:start="1002:30" pos:end="1002:33">ectx</name></expr></argument>, <argument pos:start="1002:36" pos:end="1002:37"><expr pos:start="1002:36" pos:end="1002:37"><literal type="string" pos:start="1002:36" pos:end="1002:37">""</literal></expr></argument>, <argument pos:start="1002:40" pos:end="1002:41"><expr pos:start="1002:40" pos:end="1002:41"><literal type="string" pos:start="1002:40" pos:end="1002:41">""</literal></expr></argument>, <argument pos:start="1002:44" pos:end="1002:47"><expr pos:start="1002:44" pos:end="1002:47"><name pos:start="1002:44" pos:end="1002:47">NULL</name></expr></argument>, <argument pos:start="1002:50" pos:end="1002:57"><expr pos:start="1002:50" pos:end="1002:57"><name pos:start="1002:50" pos:end="1002:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1003:5" pos:end="1003:34"><expr pos:start="1003:5" pos:end="1003:33"><call pos:start="1003:5" pos:end="1003:33"><name pos:start="1003:5" pos:end="1003:13">CU_ASSERT</name><argument_list pos:start="1003:14" pos:end="1003:33">(<argument pos:start="1003:15" pos:end="1003:32"><expr pos:start="1003:15" pos:end="1003:32"><name pos:start="1003:15" pos:end="1003:16">rc</name> <operator pos:start="1003:18" pos:end="1003:19">==</operator> <name pos:start="1003:21" pos:end="1003:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1005:5" pos:end="1005:74"><expr pos:start="1005:5" pos:end="1005:73"><call pos:start="1005:5" pos:end="1005:73"><name pos:start="1005:5" pos:end="1005:25">est_client_set_server</name><argument_list pos:start="1005:26" pos:end="1005:73">(<argument pos:start="1005:27" pos:end="1005:30"><expr pos:start="1005:27" pos:end="1005:30"><name pos:start="1005:27" pos:end="1005:30">ectx</name></expr></argument>, <argument pos:start="1005:33" pos:end="1005:47"><expr pos:start="1005:33" pos:end="1005:47"><name pos:start="1005:33" pos:end="1005:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="1005:50" pos:end="1005:66"><expr pos:start="1005:50" pos:end="1005:66"><name pos:start="1005:50" pos:end="1005:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="1005:69" pos:end="1005:72"><expr pos:start="1005:69" pos:end="1005:72"><name pos:start="1005:69" pos:end="1005:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="1007:5" pos:end="1009:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="1010:5" pos:end="1010:62"><expr pos:start="1010:5" pos:end="1010:61"><name pos:start="1010:5" pos:end="1010:6">rc</name> <operator pos:start="1010:8" pos:end="1010:8">=</operator> <call pos:start="1010:10" pos:end="1010:61"><name pos:start="1010:10" pos:end="1010:31">est_client_get_cacerts</name><argument_list pos:start="1010:32" pos:end="1010:61">(<argument pos:start="1010:33" pos:end="1010:36"><expr pos:start="1010:33" pos:end="1010:36"><name pos:start="1010:33" pos:end="1010:36">ectx</name></expr></argument>, <argument pos:start="1010:39" pos:end="1010:60"><expr pos:start="1010:39" pos:end="1010:60"><operator pos:start="1010:39" pos:end="1010:39">&amp;</operator><name pos:start="1010:40" pos:end="1010:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1012:5" pos:end="1015:7">/*
     * should be successful, and should have obtained a valid length
     * for the size of the CA certs buffer
     */</comment>
    <expr_stmt pos:start="1016:5" pos:end="1016:49"><expr pos:start="1016:5" pos:end="1016:48"><call pos:start="1016:5" pos:end="1016:48"><name pos:start="1016:5" pos:end="1016:13">CU_ASSERT</name><argument_list pos:start="1016:14" pos:end="1016:48">(<argument pos:start="1016:15" pos:end="1016:47"><expr pos:start="1016:15" pos:end="1016:47"><name pos:start="1016:15" pos:end="1016:16">rc</name> <operator pos:start="1016:18" pos:end="1016:19">==</operator> <name pos:start="1016:21" pos:end="1016:47">EST_ERR_CACERT_VERIFICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1017:5" pos:end="1017:42"><expr pos:start="1017:5" pos:end="1017:41"><call pos:start="1017:5" pos:end="1017:41"><name pos:start="1017:5" pos:end="1017:13">CU_ASSERT</name><argument_list pos:start="1017:14" pos:end="1017:41">(<argument pos:start="1017:15" pos:end="1017:40"><expr pos:start="1017:15" pos:end="1017:40"><name pos:start="1017:15" pos:end="1017:35">retrieved_cacerts_len</name> <operator pos:start="1017:37" pos:end="1017:38">==</operator> <literal type="number" pos:start="1017:40" pos:end="1017:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1019:5" pos:end="1030:5"><if pos:start="1019:5" pos:end="1030:5">if <condition pos:start="1019:8" pos:end="1019:30">(<expr pos:start="1019:9" pos:end="1019:29"><name pos:start="1019:9" pos:end="1019:29">retrieved_cacerts_len</name></expr>)</condition> <block pos:start="1019:32" pos:end="1030:5">{<block_content pos:start="1023:9" pos:end="1029:49">
        <comment type="block" pos:start="1020:9" pos:end="1022:11">/*
         * Shouldn't be in here, but if we are, malloc and call
         */</comment>
        <expr_stmt pos:start="1023:9" pos:end="1023:58"><expr pos:start="1023:9" pos:end="1023:57"><name pos:start="1023:9" pos:end="1023:25">retrieved_cacerts</name> <operator pos:start="1023:27" pos:end="1023:27">=</operator> <call pos:start="1023:29" pos:end="1023:57"><name pos:start="1023:29" pos:end="1023:34">malloc</name><argument_list pos:start="1023:35" pos:end="1023:57">(<argument pos:start="1023:36" pos:end="1023:56"><expr pos:start="1023:36" pos:end="1023:56"><name pos:start="1023:36" pos:end="1023:56">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1024:9" pos:end="1024:62"><expr pos:start="1024:9" pos:end="1024:61"><name pos:start="1024:9" pos:end="1024:10">rc</name> <operator pos:start="1024:12" pos:end="1024:12">=</operator> <call pos:start="1024:14" pos:end="1024:61"><name pos:start="1024:14" pos:end="1024:36">est_client_copy_cacerts</name><argument_list pos:start="1024:37" pos:end="1024:61">(<argument pos:start="1024:38" pos:end="1024:41"><expr pos:start="1024:38" pos:end="1024:41"><name pos:start="1024:38" pos:end="1024:41">ectx</name></expr></argument>, <argument pos:start="1024:44" pos:end="1024:60"><expr pos:start="1024:44" pos:end="1024:60"><name pos:start="1024:44" pos:end="1024:60">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1026:9" pos:end="1028:11">/*
         * est should fail indicating that there's no cert to provide
         */</comment>
         <expr_stmt pos:start="1029:10" pos:end="1029:49"><expr pos:start="1029:10" pos:end="1029:48"><call pos:start="1029:10" pos:end="1029:48"><name pos:start="1029:10" pos:end="1029:18">CU_ASSERT</name><argument_list pos:start="1029:19" pos:end="1029:48">(<argument pos:start="1029:20" pos:end="1029:47"><expr pos:start="1029:20" pos:end="1029:47"><name pos:start="1029:20" pos:end="1029:21">rc</name> <operator pos:start="1029:23" pos:end="1029:24">==</operator> <name pos:start="1029:26" pos:end="1029:47">EST_ERR_NO_CERTIFICATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block" pos:start="1032:5" pos:end="1034:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>    
    <if_stmt pos:start="1035:5" pos:end="1039:5"><if pos:start="1035:5" pos:end="1039:5">if <condition pos:start="1035:8" pos:end="1035:26">(<expr pos:start="1035:9" pos:end="1035:25"><name pos:start="1035:9" pos:end="1035:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="1035:28" pos:end="1039:5">{<block_content pos:start="1037:9" pos:end="1038:80">

        <expr_stmt pos:start="1037:9" pos:end="1037:73"><expr pos:start="1037:9" pos:end="1037:72"><call pos:start="1037:9" pos:end="1037:72"><name pos:start="1037:9" pos:end="1037:14">printf</name><argument_list pos:start="1037:15" pos:end="1037:72">(<argument pos:start="1037:16" pos:end="1037:52"><expr pos:start="1037:16" pos:end="1037:52"><literal type="string" pos:start="1037:16" pos:end="1037:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="1037:55" pos:end="1037:71"><expr pos:start="1037:55" pos:end="1037:71"><name pos:start="1037:55" pos:end="1037:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1038:9" pos:end="1038:80"><expr pos:start="1038:9" pos:end="1038:79"><call pos:start="1038:9" pos:end="1038:79"><name pos:start="1038:9" pos:end="1038:14">printf</name><argument_list pos:start="1038:15" pos:end="1038:79">(<argument pos:start="1038:16" pos:end="1038:55"><expr pos:start="1038:16" pos:end="1038:55"><literal type="string" pos:start="1038:16" pos:end="1038:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="1038:58" pos:end="1038:78"><expr pos:start="1038:58" pos:end="1038:78"><name pos:start="1038:58" pos:end="1038:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1040:5" pos:end="1040:28"><expr pos:start="1040:5" pos:end="1040:27"><call pos:start="1040:5" pos:end="1040:27"><name pos:start="1040:5" pos:end="1040:8">free</name><argument_list pos:start="1040:9" pos:end="1040:27">(<argument pos:start="1040:10" pos:end="1040:26"><expr pos:start="1040:10" pos:end="1040:26"><name pos:start="1040:10" pos:end="1040:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="1042:5" pos:end="1044:5"><if pos:start="1042:5" pos:end="1044:5">if <condition pos:start="1042:8" pos:end="1042:13">(<expr pos:start="1042:9" pos:end="1042:12"><name pos:start="1042:9" pos:end="1042:12">ectx</name></expr>)</condition> <block pos:start="1042:15" pos:end="1044:5">{<block_content pos:start="1043:9" pos:end="1043:26">
        <expr_stmt pos:start="1043:9" pos:end="1043:26"><expr pos:start="1043:9" pos:end="1043:25"><call pos:start="1043:9" pos:end="1043:25"><name pos:start="1043:9" pos:end="1043:19">est_destroy</name><argument_list pos:start="1043:20" pos:end="1043:25">(<argument pos:start="1043:21" pos:end="1043:24"><expr pos:start="1043:21" pos:end="1043:24"><name pos:start="1043:21" pos:end="1043:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1045:5" pos:end="1047:5"><if pos:start="1045:5" pos:end="1047:5">if <condition pos:start="1045:8" pos:end="1045:16">(<expr pos:start="1045:9" pos:end="1045:15"><name pos:start="1045:9" pos:end="1045:15">cacerts</name></expr>)</condition> <block pos:start="1045:18" pos:end="1047:5">{<block_content pos:start="1046:9" pos:end="1046:22">
        <expr_stmt pos:start="1046:9" pos:end="1046:22"><expr pos:start="1046:9" pos:end="1046:21"><call pos:start="1046:9" pos:end="1046:21"><name pos:start="1046:9" pos:end="1046:12">free</name><argument_list pos:start="1046:13" pos:end="1046:21">(<argument pos:start="1046:14" pos:end="1046:20"><expr pos:start="1046:14" pos:end="1046:20"><name pos:start="1046:14" pos:end="1046:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1048:5" pos:end="1050:5"><if pos:start="1048:5" pos:end="1050:5">if <condition pos:start="1048:8" pos:end="1048:13">(<expr pos:start="1048:9" pos:end="1048:12"><name pos:start="1048:9" pos:end="1048:12">pkey</name></expr>)</condition> <block pos:start="1048:15" pos:end="1050:5">{<block_content pos:start="1049:9" pos:end="1049:19">
        <expr_stmt pos:start="1049:9" pos:end="1049:19"><expr pos:start="1049:9" pos:end="1049:18"><call pos:start="1049:9" pos:end="1049:18"><name pos:start="1049:9" pos:end="1049:12">free</name><argument_list pos:start="1049:13" pos:end="1049:18">(<argument pos:start="1049:14" pos:end="1049:17"><expr pos:start="1049:14" pos:end="1049:17"><name pos:start="1049:14" pos:end="1049:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="1054:1" pos:end="1058:3">/*
 * This test case tests the CA cert response verification function.  It will
 * verify a CAcert response containing a single chain with multiple certs 
 * with the intermediate cert expired.
 */</comment>
<function pos:start="1059:1" pos:end="1162:1"><type pos:start="1059:1" pos:end="1059:11"><specifier pos:start="1059:1" pos:end="1059:6">static</specifier> <name pos:start="1059:8" pos:end="1059:11">void</name></type> <name pos:start="1059:13" pos:end="1059:24">us897_test16</name> <parameter_list pos:start="1059:26" pos:end="1059:31">(<parameter pos:start="1059:27" pos:end="1059:30"><decl pos:start="1059:27" pos:end="1059:30"><type pos:start="1059:27" pos:end="1059:30"><name pos:start="1059:27" pos:end="1059:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1060:1" pos:end="1162:1">{<block_content pos:start="1061:5" pos:end="1161:5">
    <decl_stmt pos:start="1061:5" pos:end="1061:18"><decl pos:start="1061:5" pos:end="1061:17"><type pos:start="1061:5" pos:end="1061:13"><name pos:start="1061:5" pos:end="1061:11">EST_CTX</name> <modifier pos:start="1061:13" pos:end="1061:13">*</modifier></type><name pos:start="1061:14" pos:end="1061:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1062:5" pos:end="1062:31"><decl pos:start="1062:5" pos:end="1062:30"><type pos:start="1062:5" pos:end="1062:19"><name pos:start="1062:5" pos:end="1062:12">unsigned</name> <name pos:start="1062:14" pos:end="1062:17">char</name> <modifier pos:start="1062:19" pos:end="1062:19">*</modifier></type><name pos:start="1062:20" pos:end="1062:23">pkey</name> <init pos:start="1062:25" pos:end="1062:30">= <expr pos:start="1062:27" pos:end="1062:30"><name pos:start="1062:27" pos:end="1062:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1063:5" pos:end="1063:34"><decl pos:start="1063:5" pos:end="1063:33"><type pos:start="1063:5" pos:end="1063:19"><name pos:start="1063:5" pos:end="1063:12">unsigned</name> <name pos:start="1063:14" pos:end="1063:17">char</name> <modifier pos:start="1063:19" pos:end="1063:19">*</modifier></type><name pos:start="1063:20" pos:end="1063:26">cacerts</name> <init pos:start="1063:28" pos:end="1063:33">= <expr pos:start="1063:30" pos:end="1063:33"><name pos:start="1063:30" pos:end="1063:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1064:5" pos:end="1064:24"><decl pos:start="1064:5" pos:end="1064:23"><type pos:start="1064:5" pos:end="1064:7"><name pos:start="1064:5" pos:end="1064:7">int</name></type> <name pos:start="1064:9" pos:end="1064:19">cacerts_len</name> <init pos:start="1064:21" pos:end="1064:23">= <expr pos:start="1064:23" pos:end="1064:23"><literal type="number" pos:start="1064:23" pos:end="1064:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1065:5" pos:end="1065:32"><decl pos:start="1065:5" pos:end="1065:31"><type pos:start="1065:5" pos:end="1065:13"><name pos:start="1065:5" pos:end="1065:13">EST_ERROR</name></type> <name pos:start="1065:15" pos:end="1065:16">rc</name> <init pos:start="1065:18" pos:end="1065:31">= <expr pos:start="1065:20" pos:end="1065:31"><name pos:start="1065:20" pos:end="1065:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1066:5" pos:end="1066:23"><decl pos:start="1066:5" pos:end="1066:22"><type pos:start="1066:5" pos:end="1066:14"><name pos:start="1066:5" pos:end="1066:12">EVP_PKEY</name> <modifier pos:start="1066:14" pos:end="1066:14">*</modifier></type><name pos:start="1066:15" pos:end="1066:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1067:5" pos:end="1067:44"><decl pos:start="1067:5" pos:end="1067:43"><type pos:start="1067:5" pos:end="1067:19"><name pos:start="1067:5" pos:end="1067:12">unsigned</name> <name pos:start="1067:14" pos:end="1067:17">char</name> <modifier pos:start="1067:19" pos:end="1067:19">*</modifier></type><name pos:start="1067:20" pos:end="1067:36">retrieved_cacerts</name> <init pos:start="1067:38" pos:end="1067:43">= <expr pos:start="1067:40" pos:end="1067:43"><name pos:start="1067:40" pos:end="1067:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1068:5" pos:end="1068:35"><decl pos:start="1068:5" pos:end="1068:34"><type pos:start="1068:5" pos:end="1068:7"><name pos:start="1068:5" pos:end="1068:7">int</name></type>  <name pos:start="1068:10" pos:end="1068:30">retrieved_cacerts_len</name> <init pos:start="1068:32" pos:end="1068:34">= <expr pos:start="1068:34" pos:end="1068:34"><literal type="number" pos:start="1068:34" pos:end="1068:34">0</literal></expr></init></decl>;</decl_stmt>    

    <comment type="block" pos:start="1070:5" pos:end="1073:7">/*
     * Stop the existing server.  Need to ensure that the server
     * is using a specific CA cert chain.
     */</comment>
    <expr_stmt pos:start="1074:5" pos:end="1074:14"><expr pos:start="1074:5" pos:end="1074:13"><call pos:start="1074:5" pos:end="1074:13"><name pos:start="1074:5" pos:end="1074:11">st_stop</name><argument_list pos:start="1074:12" pos:end="1074:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1075:5" pos:end="1075:13"><expr pos:start="1075:5" pos:end="1075:12"><call pos:start="1075:5" pos:end="1075:12"><name pos:start="1075:5" pos:end="1075:9">SLEEP</name><argument_list pos:start="1075:10" pos:end="1075:12">(<argument pos:start="1075:11" pos:end="1075:11"><expr pos:start="1075:11" pos:end="1075:11"><literal type="number" pos:start="1075:11" pos:end="1075:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1077:5" pos:end="1080:7">/*
     * Spin up a new instance of the EST server
     * using a CA cert chain that contains just one cert
     */</comment>
    <expr_stmt pos:start="1081:5" pos:end="1088:27"><expr pos:start="1081:5" pos:end="1088:26"><name pos:start="1081:5" pos:end="1081:6">rc</name> <operator pos:start="1081:8" pos:end="1081:8">=</operator> <call pos:start="1081:10" pos:end="1088:26"><name pos:start="1081:10" pos:end="1081:17">st_start</name><argument_list pos:start="1081:18" pos:end="1088:26">(<argument pos:start="1081:19" pos:end="1081:35"><expr pos:start="1081:19" pos:end="1081:35"><name pos:start="1081:19" pos:end="1081:35">US897_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="1082:19" pos:end="1082:38"><expr pos:start="1082:19" pos:end="1082:38"><name pos:start="1082:19" pos:end="1082:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="1083:19" pos:end="1083:38"><expr pos:start="1083:19" pos:end="1083:38"><name pos:start="1083:19" pos:end="1083:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="1084:19" pos:end="1084:36"><expr pos:start="1084:19" pos:end="1084:36"><literal type="string" pos:start="1084:19" pos:end="1084:36">"US897 test realm"</literal></expr></argument>,
                  <argument pos:start="1085:19" pos:end="1085:52"><expr pos:start="1085:19" pos:end="1085:52"><name pos:start="1085:19" pos:end="1085:52">US897_CACERTS_SINGLE_CHAIN_EXPIRED</name></expr></argument>,
	          <argument pos:start="1086:19" pos:end="1086:35"><expr pos:start="1086:19" pos:end="1086:35"><name pos:start="1086:19" pos:end="1086:35">US897_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="1087:19" pos:end="1087:39"><expr pos:start="1087:19" pos:end="1087:39"><literal type="string" pos:start="1087:19" pos:end="1087:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="1088:19" pos:end="1088:19"><expr pos:start="1088:19" pos:end="1088:19"><literal type="number" pos:start="1088:19" pos:end="1088:19">0</literal></expr></argument>, <argument pos:start="1088:22" pos:end="1088:22"><expr pos:start="1088:22" pos:end="1088:22"><literal type="number" pos:start="1088:22" pos:end="1088:22">0</literal></expr></argument>, <argument pos:start="1088:25" pos:end="1088:25"><expr pos:start="1088:25" pos:end="1088:25"><literal type="number" pos:start="1088:25" pos:end="1088:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1090:5" pos:end="1090:23"><expr pos:start="1090:5" pos:end="1090:22"><call pos:start="1090:5" pos:end="1090:22"><name pos:start="1090:5" pos:end="1090:13">CU_ASSERT</name><argument_list pos:start="1090:14" pos:end="1090:22">(<argument pos:start="1090:15" pos:end="1090:21"><expr pos:start="1090:15" pos:end="1090:21"><name pos:start="1090:15" pos:end="1090:16">rc</name> <operator pos:start="1090:18" pos:end="1090:19">==</operator> <literal type="number" pos:start="1090:21" pos:end="1090:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1091:5" pos:end="1091:19"><if pos:start="1091:5" pos:end="1091:19">if <condition pos:start="1091:8" pos:end="1091:11">(<expr pos:start="1091:9" pos:end="1091:10"><name pos:start="1091:9" pos:end="1091:10">rc</name></expr>)</condition><block type="pseudo" pos:start="1091:13" pos:end="1091:19"><block_content pos:start="1091:13" pos:end="1091:19"> <return pos:start="1091:13" pos:end="1091:19">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1092:5" pos:end="1092:13"><expr pos:start="1092:5" pos:end="1092:12"><call pos:start="1092:5" pos:end="1092:12"><name pos:start="1092:5" pos:end="1092:9">SLEEP</name><argument_list pos:start="1092:10" pos:end="1092:12">(<argument pos:start="1092:11" pos:end="1092:11"><expr pos:start="1092:11" pos:end="1092:11"><literal type="number" pos:start="1092:11" pos:end="1092:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1094:5" pos:end="1096:7">/*
     * Read in thestartup  CA certificates
     */</comment>
    <expr_stmt pos:start="1097:5" pos:end="1097:63"><expr pos:start="1097:5" pos:end="1097:62"><name pos:start="1097:5" pos:end="1097:15">cacerts_len</name> <operator pos:start="1097:17" pos:end="1097:17">=</operator> <call pos:start="1097:19" pos:end="1097:62"><name pos:start="1097:19" pos:end="1097:34">read_binary_file</name><argument_list pos:start="1097:35" pos:end="1097:62">(<argument pos:start="1097:36" pos:end="1097:51"><expr pos:start="1097:36" pos:end="1097:51"><name pos:start="1097:36" pos:end="1097:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="1097:54" pos:end="1097:61"><expr pos:start="1097:54" pos:end="1097:61"><operator pos:start="1097:54" pos:end="1097:54">&amp;</operator><name pos:start="1097:55" pos:end="1097:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1098:5" pos:end="1098:31"><expr pos:start="1098:5" pos:end="1098:30"><call pos:start="1098:5" pos:end="1098:30"><name pos:start="1098:5" pos:end="1098:13">CU_ASSERT</name><argument_list pos:start="1098:14" pos:end="1098:30">(<argument pos:start="1098:15" pos:end="1098:29"><expr pos:start="1098:15" pos:end="1098:29"><name pos:start="1098:15" pos:end="1098:25">cacerts_len</name> <operator pos:start="1098:27" pos:end="1098:27">&gt;</operator> <literal type="number" pos:start="1098:29" pos:end="1098:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1100:5" pos:end="1102:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="1103:5" pos:end="1103:50"><expr pos:start="1103:5" pos:end="1103:49"><name pos:start="1103:5" pos:end="1103:12">priv_key</name> <operator pos:start="1103:14" pos:end="1103:14">=</operator> <call pos:start="1103:16" pos:end="1103:49"><name pos:start="1103:16" pos:end="1103:31">read_private_key</name><argument_list pos:start="1103:32" pos:end="1103:49">(<argument pos:start="1103:33" pos:end="1103:48"><expr pos:start="1103:33" pos:end="1103:48"><name pos:start="1103:33" pos:end="1103:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1104:5" pos:end="1107:5"><if pos:start="1104:5" pos:end="1107:5">if <condition pos:start="1104:8" pos:end="1104:25">(<expr pos:start="1104:9" pos:end="1104:24"><name pos:start="1104:9" pos:end="1104:16">priv_key</name> <operator pos:start="1104:18" pos:end="1104:19">==</operator> <name pos:start="1104:21" pos:end="1104:24">NULL</name></expr>)</condition> <block pos:start="1104:27" pos:end="1107:5">{<block_content pos:start="1105:9" pos:end="1106:15">
	<expr_stmt pos:start="1105:9" pos:end="1105:80"><expr pos:start="1105:9" pos:end="1105:79"><call pos:start="1105:9" pos:end="1105:79"><name pos:start="1105:9" pos:end="1105:14">printf</name><argument_list pos:start="1105:15" pos:end="1105:79">(<argument pos:start="1105:16" pos:end="1105:60"><expr pos:start="1105:16" pos:end="1105:60"><literal type="string" pos:start="1105:16" pos:end="1105:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="1105:63" pos:end="1105:78"><expr pos:start="1105:63" pos:end="1105:78"><name pos:start="1105:63" pos:end="1105:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1106:9" pos:end="1106:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1109:5" pos:end="1110:54"><expr pos:start="1109:5" pos:end="1110:53"><name pos:start="1109:5" pos:end="1109:8">ectx</name> <operator pos:start="1109:10" pos:end="1109:10">=</operator> <call pos:start="1109:12" pos:end="1110:53"><name pos:start="1109:12" pos:end="1109:26">est_client_init</name><argument_list pos:start="1109:27" pos:end="1110:53">(<argument pos:start="1109:28" pos:end="1109:34"><expr pos:start="1109:28" pos:end="1109:34"><name pos:start="1109:28" pos:end="1109:34">cacerts</name></expr></argument>, <argument pos:start="1109:37" pos:end="1109:47"><expr pos:start="1109:37" pos:end="1109:47"><name pos:start="1109:37" pos:end="1109:47">cacerts_len</name></expr></argument>, <argument pos:start="1109:50" pos:end="1109:68"><expr pos:start="1109:50" pos:end="1109:68"><name pos:start="1109:50" pos:end="1109:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="1110:28" pos:end="1110:52"><expr pos:start="1110:28" pos:end="1110:52"><name pos:start="1110:28" pos:end="1110:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1111:5" pos:end="1111:28"><expr pos:start="1111:5" pos:end="1111:27"><call pos:start="1111:5" pos:end="1111:27"><name pos:start="1111:5" pos:end="1111:13">CU_ASSERT</name><argument_list pos:start="1111:14" pos:end="1111:27">(<argument pos:start="1111:15" pos:end="1111:26"><expr pos:start="1111:15" pos:end="1111:26"><name pos:start="1111:15" pos:end="1111:18">ectx</name> <operator pos:start="1111:20" pos:end="1111:21">!=</operator> <name pos:start="1111:23" pos:end="1111:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1113:5" pos:end="1113:59"><expr pos:start="1113:5" pos:end="1113:58"><name pos:start="1113:5" pos:end="1113:6">rc</name> <operator pos:start="1113:8" pos:end="1113:8">=</operator> <call pos:start="1113:10" pos:end="1113:58"><name pos:start="1113:10" pos:end="1113:28">est_client_set_auth</name><argument_list pos:start="1113:29" pos:end="1113:58">(<argument pos:start="1113:30" pos:end="1113:33"><expr pos:start="1113:30" pos:end="1113:33"><name pos:start="1113:30" pos:end="1113:33">ectx</name></expr></argument>, <argument pos:start="1113:36" pos:end="1113:37"><expr pos:start="1113:36" pos:end="1113:37"><literal type="string" pos:start="1113:36" pos:end="1113:37">""</literal></expr></argument>, <argument pos:start="1113:40" pos:end="1113:41"><expr pos:start="1113:40" pos:end="1113:41"><literal type="string" pos:start="1113:40" pos:end="1113:41">""</literal></expr></argument>, <argument pos:start="1113:44" pos:end="1113:47"><expr pos:start="1113:44" pos:end="1113:47"><name pos:start="1113:44" pos:end="1113:47">NULL</name></expr></argument>, <argument pos:start="1113:50" pos:end="1113:57"><expr pos:start="1113:50" pos:end="1113:57"><name pos:start="1113:50" pos:end="1113:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1114:5" pos:end="1114:34"><expr pos:start="1114:5" pos:end="1114:33"><call pos:start="1114:5" pos:end="1114:33"><name pos:start="1114:5" pos:end="1114:13">CU_ASSERT</name><argument_list pos:start="1114:14" pos:end="1114:33">(<argument pos:start="1114:15" pos:end="1114:32"><expr pos:start="1114:15" pos:end="1114:32"><name pos:start="1114:15" pos:end="1114:16">rc</name> <operator pos:start="1114:18" pos:end="1114:19">==</operator> <name pos:start="1114:21" pos:end="1114:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1116:5" pos:end="1116:74"><expr pos:start="1116:5" pos:end="1116:73"><call pos:start="1116:5" pos:end="1116:73"><name pos:start="1116:5" pos:end="1116:25">est_client_set_server</name><argument_list pos:start="1116:26" pos:end="1116:73">(<argument pos:start="1116:27" pos:end="1116:30"><expr pos:start="1116:27" pos:end="1116:30"><name pos:start="1116:27" pos:end="1116:30">ectx</name></expr></argument>, <argument pos:start="1116:33" pos:end="1116:47"><expr pos:start="1116:33" pos:end="1116:47"><name pos:start="1116:33" pos:end="1116:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="1116:50" pos:end="1116:66"><expr pos:start="1116:50" pos:end="1116:66"><name pos:start="1116:50" pos:end="1116:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="1116:69" pos:end="1116:72"><expr pos:start="1116:69" pos:end="1116:72"><name pos:start="1116:69" pos:end="1116:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="1118:5" pos:end="1120:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="1121:5" pos:end="1121:62"><expr pos:start="1121:5" pos:end="1121:61"><name pos:start="1121:5" pos:end="1121:6">rc</name> <operator pos:start="1121:8" pos:end="1121:8">=</operator> <call pos:start="1121:10" pos:end="1121:61"><name pos:start="1121:10" pos:end="1121:31">est_client_get_cacerts</name><argument_list pos:start="1121:32" pos:end="1121:61">(<argument pos:start="1121:33" pos:end="1121:36"><expr pos:start="1121:33" pos:end="1121:36"><name pos:start="1121:33" pos:end="1121:36">ectx</name></expr></argument>, <argument pos:start="1121:39" pos:end="1121:60"><expr pos:start="1121:39" pos:end="1121:60"><operator pos:start="1121:39" pos:end="1121:39">&amp;</operator><name pos:start="1121:40" pos:end="1121:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1123:5" pos:end="1126:7">/*
     * should be successful, and should have obtained a valid length
     * for the size of the CA certs buffer
     */</comment>
    <expr_stmt pos:start="1127:5" pos:end="1127:49"><expr pos:start="1127:5" pos:end="1127:48"><call pos:start="1127:5" pos:end="1127:48"><name pos:start="1127:5" pos:end="1127:13">CU_ASSERT</name><argument_list pos:start="1127:14" pos:end="1127:48">(<argument pos:start="1127:15" pos:end="1127:47"><expr pos:start="1127:15" pos:end="1127:47"><name pos:start="1127:15" pos:end="1127:16">rc</name> <operator pos:start="1127:18" pos:end="1127:19">==</operator> <name pos:start="1127:21" pos:end="1127:47">EST_ERR_CACERT_VERIFICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1128:5" pos:end="1128:42"><expr pos:start="1128:5" pos:end="1128:41"><call pos:start="1128:5" pos:end="1128:41"><name pos:start="1128:5" pos:end="1128:13">CU_ASSERT</name><argument_list pos:start="1128:14" pos:end="1128:41">(<argument pos:start="1128:15" pos:end="1128:40"><expr pos:start="1128:15" pos:end="1128:40"><name pos:start="1128:15" pos:end="1128:35">retrieved_cacerts_len</name> <operator pos:start="1128:37" pos:end="1128:38">==</operator> <literal type="number" pos:start="1128:40" pos:end="1128:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1130:5" pos:end="1141:5"><if pos:start="1130:5" pos:end="1141:5">if <condition pos:start="1130:8" pos:end="1130:30">(<expr pos:start="1130:9" pos:end="1130:29"><name pos:start="1130:9" pos:end="1130:29">retrieved_cacerts_len</name></expr>)</condition> <block pos:start="1130:32" pos:end="1141:5">{<block_content pos:start="1134:9" pos:end="1140:49">
        <comment type="block" pos:start="1131:9" pos:end="1133:11">/*
         * Shouldn't be in here, but if we are, malloc and call
         */</comment>
        <expr_stmt pos:start="1134:9" pos:end="1134:58"><expr pos:start="1134:9" pos:end="1134:57"><name pos:start="1134:9" pos:end="1134:25">retrieved_cacerts</name> <operator pos:start="1134:27" pos:end="1134:27">=</operator> <call pos:start="1134:29" pos:end="1134:57"><name pos:start="1134:29" pos:end="1134:34">malloc</name><argument_list pos:start="1134:35" pos:end="1134:57">(<argument pos:start="1134:36" pos:end="1134:56"><expr pos:start="1134:36" pos:end="1134:56"><name pos:start="1134:36" pos:end="1134:56">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1135:9" pos:end="1135:62"><expr pos:start="1135:9" pos:end="1135:61"><name pos:start="1135:9" pos:end="1135:10">rc</name> <operator pos:start="1135:12" pos:end="1135:12">=</operator> <call pos:start="1135:14" pos:end="1135:61"><name pos:start="1135:14" pos:end="1135:36">est_client_copy_cacerts</name><argument_list pos:start="1135:37" pos:end="1135:61">(<argument pos:start="1135:38" pos:end="1135:41"><expr pos:start="1135:38" pos:end="1135:41"><name pos:start="1135:38" pos:end="1135:41">ectx</name></expr></argument>, <argument pos:start="1135:44" pos:end="1135:60"><expr pos:start="1135:44" pos:end="1135:60"><name pos:start="1135:44" pos:end="1135:60">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1137:9" pos:end="1139:11">/*
         * est should fail indicating that there's no cert to provide
         */</comment>
         <expr_stmt pos:start="1140:10" pos:end="1140:49"><expr pos:start="1140:10" pos:end="1140:48"><call pos:start="1140:10" pos:end="1140:48"><name pos:start="1140:10" pos:end="1140:18">CU_ASSERT</name><argument_list pos:start="1140:19" pos:end="1140:48">(<argument pos:start="1140:20" pos:end="1140:47"><expr pos:start="1140:20" pos:end="1140:47"><name pos:start="1140:20" pos:end="1140:21">rc</name> <operator pos:start="1140:23" pos:end="1140:24">==</operator> <name pos:start="1140:26" pos:end="1140:47">EST_ERR_NO_CERTIFICATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block" pos:start="1143:5" pos:end="1145:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>    
    <if_stmt pos:start="1146:5" pos:end="1150:5"><if pos:start="1146:5" pos:end="1150:5">if <condition pos:start="1146:8" pos:end="1146:26">(<expr pos:start="1146:9" pos:end="1146:25"><name pos:start="1146:9" pos:end="1146:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="1146:28" pos:end="1150:5">{<block_content pos:start="1148:9" pos:end="1149:80">

        <expr_stmt pos:start="1148:9" pos:end="1148:73"><expr pos:start="1148:9" pos:end="1148:72"><call pos:start="1148:9" pos:end="1148:72"><name pos:start="1148:9" pos:end="1148:14">printf</name><argument_list pos:start="1148:15" pos:end="1148:72">(<argument pos:start="1148:16" pos:end="1148:52"><expr pos:start="1148:16" pos:end="1148:52"><literal type="string" pos:start="1148:16" pos:end="1148:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="1148:55" pos:end="1148:71"><expr pos:start="1148:55" pos:end="1148:71"><name pos:start="1148:55" pos:end="1148:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1149:9" pos:end="1149:80"><expr pos:start="1149:9" pos:end="1149:79"><call pos:start="1149:9" pos:end="1149:79"><name pos:start="1149:9" pos:end="1149:14">printf</name><argument_list pos:start="1149:15" pos:end="1149:79">(<argument pos:start="1149:16" pos:end="1149:55"><expr pos:start="1149:16" pos:end="1149:55"><literal type="string" pos:start="1149:16" pos:end="1149:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="1149:58" pos:end="1149:78"><expr pos:start="1149:58" pos:end="1149:78"><name pos:start="1149:58" pos:end="1149:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1151:5" pos:end="1151:28"><expr pos:start="1151:5" pos:end="1151:27"><call pos:start="1151:5" pos:end="1151:27"><name pos:start="1151:5" pos:end="1151:8">free</name><argument_list pos:start="1151:9" pos:end="1151:27">(<argument pos:start="1151:10" pos:end="1151:26"><expr pos:start="1151:10" pos:end="1151:26"><name pos:start="1151:10" pos:end="1151:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="1153:5" pos:end="1155:5"><if pos:start="1153:5" pos:end="1155:5">if <condition pos:start="1153:8" pos:end="1153:13">(<expr pos:start="1153:9" pos:end="1153:12"><name pos:start="1153:9" pos:end="1153:12">ectx</name></expr>)</condition> <block pos:start="1153:15" pos:end="1155:5">{<block_content pos:start="1154:9" pos:end="1154:26">
        <expr_stmt pos:start="1154:9" pos:end="1154:26"><expr pos:start="1154:9" pos:end="1154:25"><call pos:start="1154:9" pos:end="1154:25"><name pos:start="1154:9" pos:end="1154:19">est_destroy</name><argument_list pos:start="1154:20" pos:end="1154:25">(<argument pos:start="1154:21" pos:end="1154:24"><expr pos:start="1154:21" pos:end="1154:24"><name pos:start="1154:21" pos:end="1154:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1156:5" pos:end="1158:5"><if pos:start="1156:5" pos:end="1158:5">if <condition pos:start="1156:8" pos:end="1156:16">(<expr pos:start="1156:9" pos:end="1156:15"><name pos:start="1156:9" pos:end="1156:15">cacerts</name></expr>)</condition> <block pos:start="1156:18" pos:end="1158:5">{<block_content pos:start="1157:9" pos:end="1157:22">
        <expr_stmt pos:start="1157:9" pos:end="1157:22"><expr pos:start="1157:9" pos:end="1157:21"><call pos:start="1157:9" pos:end="1157:21"><name pos:start="1157:9" pos:end="1157:12">free</name><argument_list pos:start="1157:13" pos:end="1157:21">(<argument pos:start="1157:14" pos:end="1157:20"><expr pos:start="1157:14" pos:end="1157:20"><name pos:start="1157:14" pos:end="1157:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1159:5" pos:end="1161:5"><if pos:start="1159:5" pos:end="1161:5">if <condition pos:start="1159:8" pos:end="1159:13">(<expr pos:start="1159:9" pos:end="1159:12"><name pos:start="1159:9" pos:end="1159:12">pkey</name></expr>)</condition> <block pos:start="1159:15" pos:end="1161:5">{<block_content pos:start="1160:9" pos:end="1160:19">
        <expr_stmt pos:start="1160:9" pos:end="1160:19"><expr pos:start="1160:9" pos:end="1160:18"><call pos:start="1160:9" pos:end="1160:18"><name pos:start="1160:9" pos:end="1160:12">free</name><argument_list pos:start="1160:13" pos:end="1160:18">(<argument pos:start="1160:14" pos:end="1160:17"><expr pos:start="1160:14" pos:end="1160:17"><name pos:start="1160:14" pos:end="1160:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="1165:1" pos:end="1169:3">/*
 * This test case tests the CA cert response verification function.  It will
 * verify a CAcert response containing a multiple chains with multiple certs and
 * a CRL block.  The CRLs should be ignored.  
 */</comment>
<function pos:start="1170:1" pos:end="1273:1"><type pos:start="1170:1" pos:end="1170:11"><specifier pos:start="1170:1" pos:end="1170:6">static</specifier> <name pos:start="1170:8" pos:end="1170:11">void</name></type> <name pos:start="1170:13" pos:end="1170:24">us897_test17</name> <parameter_list pos:start="1170:26" pos:end="1170:31">(<parameter pos:start="1170:27" pos:end="1170:30"><decl pos:start="1170:27" pos:end="1170:30"><type pos:start="1170:27" pos:end="1170:30"><name pos:start="1170:27" pos:end="1170:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1171:1" pos:end="1273:1">{<block_content pos:start="1172:5" pos:end="1272:5">
    <decl_stmt pos:start="1172:5" pos:end="1172:18"><decl pos:start="1172:5" pos:end="1172:17"><type pos:start="1172:5" pos:end="1172:13"><name pos:start="1172:5" pos:end="1172:11">EST_CTX</name> <modifier pos:start="1172:13" pos:end="1172:13">*</modifier></type><name pos:start="1172:14" pos:end="1172:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1173:5" pos:end="1173:31"><decl pos:start="1173:5" pos:end="1173:30"><type pos:start="1173:5" pos:end="1173:19"><name pos:start="1173:5" pos:end="1173:12">unsigned</name> <name pos:start="1173:14" pos:end="1173:17">char</name> <modifier pos:start="1173:19" pos:end="1173:19">*</modifier></type><name pos:start="1173:20" pos:end="1173:23">pkey</name> <init pos:start="1173:25" pos:end="1173:30">= <expr pos:start="1173:27" pos:end="1173:30"><name pos:start="1173:27" pos:end="1173:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1174:5" pos:end="1174:34"><decl pos:start="1174:5" pos:end="1174:33"><type pos:start="1174:5" pos:end="1174:19"><name pos:start="1174:5" pos:end="1174:12">unsigned</name> <name pos:start="1174:14" pos:end="1174:17">char</name> <modifier pos:start="1174:19" pos:end="1174:19">*</modifier></type><name pos:start="1174:20" pos:end="1174:26">cacerts</name> <init pos:start="1174:28" pos:end="1174:33">= <expr pos:start="1174:30" pos:end="1174:33"><name pos:start="1174:30" pos:end="1174:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1175:5" pos:end="1175:24"><decl pos:start="1175:5" pos:end="1175:23"><type pos:start="1175:5" pos:end="1175:7"><name pos:start="1175:5" pos:end="1175:7">int</name></type> <name pos:start="1175:9" pos:end="1175:19">cacerts_len</name> <init pos:start="1175:21" pos:end="1175:23">= <expr pos:start="1175:23" pos:end="1175:23"><literal type="number" pos:start="1175:23" pos:end="1175:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1176:5" pos:end="1176:32"><decl pos:start="1176:5" pos:end="1176:31"><type pos:start="1176:5" pos:end="1176:13"><name pos:start="1176:5" pos:end="1176:13">EST_ERROR</name></type> <name pos:start="1176:15" pos:end="1176:16">rc</name> <init pos:start="1176:18" pos:end="1176:31">= <expr pos:start="1176:20" pos:end="1176:31"><name pos:start="1176:20" pos:end="1176:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1177:5" pos:end="1177:23"><decl pos:start="1177:5" pos:end="1177:22"><type pos:start="1177:5" pos:end="1177:14"><name pos:start="1177:5" pos:end="1177:12">EVP_PKEY</name> <modifier pos:start="1177:14" pos:end="1177:14">*</modifier></type><name pos:start="1177:15" pos:end="1177:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1178:5" pos:end="1178:44"><decl pos:start="1178:5" pos:end="1178:43"><type pos:start="1178:5" pos:end="1178:19"><name pos:start="1178:5" pos:end="1178:12">unsigned</name> <name pos:start="1178:14" pos:end="1178:17">char</name> <modifier pos:start="1178:19" pos:end="1178:19">*</modifier></type><name pos:start="1178:20" pos:end="1178:36">retrieved_cacerts</name> <init pos:start="1178:38" pos:end="1178:43">= <expr pos:start="1178:40" pos:end="1178:43"><name pos:start="1178:40" pos:end="1178:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1179:5" pos:end="1179:35"><decl pos:start="1179:5" pos:end="1179:34"><type pos:start="1179:5" pos:end="1179:7"><name pos:start="1179:5" pos:end="1179:7">int</name></type>  <name pos:start="1179:10" pos:end="1179:30">retrieved_cacerts_len</name> <init pos:start="1179:32" pos:end="1179:34">= <expr pos:start="1179:34" pos:end="1179:34"><literal type="number" pos:start="1179:34" pos:end="1179:34">0</literal></expr></init></decl>;</decl_stmt>    

    <comment type="block" pos:start="1181:5" pos:end="1184:7">/*
     * Stop the existing server.  Need to ensure that the server
     * is using a specific CA cert chain.
     */</comment>
    <expr_stmt pos:start="1185:5" pos:end="1185:14"><expr pos:start="1185:5" pos:end="1185:13"><call pos:start="1185:5" pos:end="1185:13"><name pos:start="1185:5" pos:end="1185:11">st_stop</name><argument_list pos:start="1185:12" pos:end="1185:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1186:5" pos:end="1186:13"><expr pos:start="1186:5" pos:end="1186:12"><call pos:start="1186:5" pos:end="1186:12"><name pos:start="1186:5" pos:end="1186:9">SLEEP</name><argument_list pos:start="1186:10" pos:end="1186:12">(<argument pos:start="1186:11" pos:end="1186:11"><expr pos:start="1186:11" pos:end="1186:11"><literal type="number" pos:start="1186:11" pos:end="1186:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1188:5" pos:end="1191:7">/*
     * Spin up a new instance of the EST server
     * using a CA cert chain that contains just one cert
     */</comment>
    <expr_stmt pos:start="1192:5" pos:end="1199:27"><expr pos:start="1192:5" pos:end="1199:26"><name pos:start="1192:5" pos:end="1192:6">rc</name> <operator pos:start="1192:8" pos:end="1192:8">=</operator> <call pos:start="1192:10" pos:end="1199:26"><name pos:start="1192:10" pos:end="1192:17">st_start</name><argument_list pos:start="1192:18" pos:end="1199:26">(<argument pos:start="1192:19" pos:end="1192:35"><expr pos:start="1192:19" pos:end="1192:35"><name pos:start="1192:19" pos:end="1192:35">US897_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="1193:19" pos:end="1193:38"><expr pos:start="1193:19" pos:end="1193:38"><name pos:start="1193:19" pos:end="1193:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="1194:19" pos:end="1194:38"><expr pos:start="1194:19" pos:end="1194:38"><name pos:start="1194:19" pos:end="1194:38">US897_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="1195:19" pos:end="1195:36"><expr pos:start="1195:19" pos:end="1195:36"><literal type="string" pos:start="1195:19" pos:end="1195:36">"US897 test realm"</literal></expr></argument>,
                  <argument pos:start="1196:19" pos:end="1196:48"><expr pos:start="1196:19" pos:end="1196:48"><name pos:start="1196:19" pos:end="1196:48">US897_CACERTS_MULTI_CHAIN_CRLS</name></expr></argument>,
	          <argument pos:start="1197:19" pos:end="1197:35"><expr pos:start="1197:19" pos:end="1197:35"><name pos:start="1197:19" pos:end="1197:35">US897_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="1198:19" pos:end="1198:39"><expr pos:start="1198:19" pos:end="1198:39"><literal type="string" pos:start="1198:19" pos:end="1198:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="1199:19" pos:end="1199:19"><expr pos:start="1199:19" pos:end="1199:19"><literal type="number" pos:start="1199:19" pos:end="1199:19">0</literal></expr></argument>, <argument pos:start="1199:22" pos:end="1199:22"><expr pos:start="1199:22" pos:end="1199:22"><literal type="number" pos:start="1199:22" pos:end="1199:22">0</literal></expr></argument>, <argument pos:start="1199:25" pos:end="1199:25"><expr pos:start="1199:25" pos:end="1199:25"><literal type="number" pos:start="1199:25" pos:end="1199:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1201:5" pos:end="1201:23"><expr pos:start="1201:5" pos:end="1201:22"><call pos:start="1201:5" pos:end="1201:22"><name pos:start="1201:5" pos:end="1201:13">CU_ASSERT</name><argument_list pos:start="1201:14" pos:end="1201:22">(<argument pos:start="1201:15" pos:end="1201:21"><expr pos:start="1201:15" pos:end="1201:21"><name pos:start="1201:15" pos:end="1201:16">rc</name> <operator pos:start="1201:18" pos:end="1201:19">==</operator> <literal type="number" pos:start="1201:21" pos:end="1201:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1202:5" pos:end="1202:19"><if pos:start="1202:5" pos:end="1202:19">if <condition pos:start="1202:8" pos:end="1202:11">(<expr pos:start="1202:9" pos:end="1202:10"><name pos:start="1202:9" pos:end="1202:10">rc</name></expr>)</condition><block type="pseudo" pos:start="1202:13" pos:end="1202:19"><block_content pos:start="1202:13" pos:end="1202:19"> <return pos:start="1202:13" pos:end="1202:19">return;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1203:5" pos:end="1203:13"><expr pos:start="1203:5" pos:end="1203:12"><call pos:start="1203:5" pos:end="1203:12"><name pos:start="1203:5" pos:end="1203:9">SLEEP</name><argument_list pos:start="1203:10" pos:end="1203:12">(<argument pos:start="1203:11" pos:end="1203:11"><expr pos:start="1203:11" pos:end="1203:11"><literal type="number" pos:start="1203:11" pos:end="1203:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1205:5" pos:end="1207:7">/*
     * Read in the startup CA certificates
     */</comment>
    <expr_stmt pos:start="1208:5" pos:end="1208:63"><expr pos:start="1208:5" pos:end="1208:62"><name pos:start="1208:5" pos:end="1208:15">cacerts_len</name> <operator pos:start="1208:17" pos:end="1208:17">=</operator> <call pos:start="1208:19" pos:end="1208:62"><name pos:start="1208:19" pos:end="1208:34">read_binary_file</name><argument_list pos:start="1208:35" pos:end="1208:62">(<argument pos:start="1208:36" pos:end="1208:51"><expr pos:start="1208:36" pos:end="1208:51"><name pos:start="1208:36" pos:end="1208:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="1208:54" pos:end="1208:61"><expr pos:start="1208:54" pos:end="1208:61"><operator pos:start="1208:54" pos:end="1208:54">&amp;</operator><name pos:start="1208:55" pos:end="1208:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1209:5" pos:end="1209:31"><expr pos:start="1209:5" pos:end="1209:30"><call pos:start="1209:5" pos:end="1209:30"><name pos:start="1209:5" pos:end="1209:13">CU_ASSERT</name><argument_list pos:start="1209:14" pos:end="1209:30">(<argument pos:start="1209:15" pos:end="1209:29"><expr pos:start="1209:15" pos:end="1209:29"><name pos:start="1209:15" pos:end="1209:25">cacerts_len</name> <operator pos:start="1209:27" pos:end="1209:27">&gt;</operator> <literal type="number" pos:start="1209:29" pos:end="1209:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1211:5" pos:end="1213:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="1214:5" pos:end="1214:50"><expr pos:start="1214:5" pos:end="1214:49"><name pos:start="1214:5" pos:end="1214:12">priv_key</name> <operator pos:start="1214:14" pos:end="1214:14">=</operator> <call pos:start="1214:16" pos:end="1214:49"><name pos:start="1214:16" pos:end="1214:31">read_private_key</name><argument_list pos:start="1214:32" pos:end="1214:49">(<argument pos:start="1214:33" pos:end="1214:48"><expr pos:start="1214:33" pos:end="1214:48"><name pos:start="1214:33" pos:end="1214:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1215:5" pos:end="1218:5"><if pos:start="1215:5" pos:end="1218:5">if <condition pos:start="1215:8" pos:end="1215:25">(<expr pos:start="1215:9" pos:end="1215:24"><name pos:start="1215:9" pos:end="1215:16">priv_key</name> <operator pos:start="1215:18" pos:end="1215:19">==</operator> <name pos:start="1215:21" pos:end="1215:24">NULL</name></expr>)</condition> <block pos:start="1215:27" pos:end="1218:5">{<block_content pos:start="1216:9" pos:end="1217:15">
	<expr_stmt pos:start="1216:9" pos:end="1216:80"><expr pos:start="1216:9" pos:end="1216:79"><call pos:start="1216:9" pos:end="1216:79"><name pos:start="1216:9" pos:end="1216:14">printf</name><argument_list pos:start="1216:15" pos:end="1216:79">(<argument pos:start="1216:16" pos:end="1216:60"><expr pos:start="1216:16" pos:end="1216:60"><literal type="string" pos:start="1216:16" pos:end="1216:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="1216:63" pos:end="1216:78"><expr pos:start="1216:63" pos:end="1216:78"><name pos:start="1216:63" pos:end="1216:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1217:9" pos:end="1217:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1220:5" pos:end="1221:54"><expr pos:start="1220:5" pos:end="1221:53"><name pos:start="1220:5" pos:end="1220:8">ectx</name> <operator pos:start="1220:10" pos:end="1220:10">=</operator> <call pos:start="1220:12" pos:end="1221:53"><name pos:start="1220:12" pos:end="1220:26">est_client_init</name><argument_list pos:start="1220:27" pos:end="1221:53">(<argument pos:start="1220:28" pos:end="1220:34"><expr pos:start="1220:28" pos:end="1220:34"><name pos:start="1220:28" pos:end="1220:34">cacerts</name></expr></argument>, <argument pos:start="1220:37" pos:end="1220:47"><expr pos:start="1220:37" pos:end="1220:47"><name pos:start="1220:37" pos:end="1220:47">cacerts_len</name></expr></argument>, <argument pos:start="1220:50" pos:end="1220:68"><expr pos:start="1220:50" pos:end="1220:68"><name pos:start="1220:50" pos:end="1220:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="1221:28" pos:end="1221:52"><expr pos:start="1221:28" pos:end="1221:52"><name pos:start="1221:28" pos:end="1221:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1222:5" pos:end="1222:28"><expr pos:start="1222:5" pos:end="1222:27"><call pos:start="1222:5" pos:end="1222:27"><name pos:start="1222:5" pos:end="1222:13">CU_ASSERT</name><argument_list pos:start="1222:14" pos:end="1222:27">(<argument pos:start="1222:15" pos:end="1222:26"><expr pos:start="1222:15" pos:end="1222:26"><name pos:start="1222:15" pos:end="1222:18">ectx</name> <operator pos:start="1222:20" pos:end="1222:21">!=</operator> <name pos:start="1222:23" pos:end="1222:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1224:5" pos:end="1224:59"><expr pos:start="1224:5" pos:end="1224:58"><name pos:start="1224:5" pos:end="1224:6">rc</name> <operator pos:start="1224:8" pos:end="1224:8">=</operator> <call pos:start="1224:10" pos:end="1224:58"><name pos:start="1224:10" pos:end="1224:28">est_client_set_auth</name><argument_list pos:start="1224:29" pos:end="1224:58">(<argument pos:start="1224:30" pos:end="1224:33"><expr pos:start="1224:30" pos:end="1224:33"><name pos:start="1224:30" pos:end="1224:33">ectx</name></expr></argument>, <argument pos:start="1224:36" pos:end="1224:37"><expr pos:start="1224:36" pos:end="1224:37"><literal type="string" pos:start="1224:36" pos:end="1224:37">""</literal></expr></argument>, <argument pos:start="1224:40" pos:end="1224:41"><expr pos:start="1224:40" pos:end="1224:41"><literal type="string" pos:start="1224:40" pos:end="1224:41">""</literal></expr></argument>, <argument pos:start="1224:44" pos:end="1224:47"><expr pos:start="1224:44" pos:end="1224:47"><name pos:start="1224:44" pos:end="1224:47">NULL</name></expr></argument>, <argument pos:start="1224:50" pos:end="1224:57"><expr pos:start="1224:50" pos:end="1224:57"><name pos:start="1224:50" pos:end="1224:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1225:5" pos:end="1225:34"><expr pos:start="1225:5" pos:end="1225:33"><call pos:start="1225:5" pos:end="1225:33"><name pos:start="1225:5" pos:end="1225:13">CU_ASSERT</name><argument_list pos:start="1225:14" pos:end="1225:33">(<argument pos:start="1225:15" pos:end="1225:32"><expr pos:start="1225:15" pos:end="1225:32"><name pos:start="1225:15" pos:end="1225:16">rc</name> <operator pos:start="1225:18" pos:end="1225:19">==</operator> <name pos:start="1225:21" pos:end="1225:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1227:5" pos:end="1227:74"><expr pos:start="1227:5" pos:end="1227:73"><call pos:start="1227:5" pos:end="1227:73"><name pos:start="1227:5" pos:end="1227:25">est_client_set_server</name><argument_list pos:start="1227:26" pos:end="1227:73">(<argument pos:start="1227:27" pos:end="1227:30"><expr pos:start="1227:27" pos:end="1227:30"><name pos:start="1227:27" pos:end="1227:30">ectx</name></expr></argument>, <argument pos:start="1227:33" pos:end="1227:47"><expr pos:start="1227:33" pos:end="1227:47"><name pos:start="1227:33" pos:end="1227:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="1227:50" pos:end="1227:66"><expr pos:start="1227:50" pos:end="1227:66"><name pos:start="1227:50" pos:end="1227:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="1227:69" pos:end="1227:72"><expr pos:start="1227:69" pos:end="1227:72"><name pos:start="1227:69" pos:end="1227:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="1229:5" pos:end="1231:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="1232:5" pos:end="1232:62"><expr pos:start="1232:5" pos:end="1232:61"><name pos:start="1232:5" pos:end="1232:6">rc</name> <operator pos:start="1232:8" pos:end="1232:8">=</operator> <call pos:start="1232:10" pos:end="1232:61"><name pos:start="1232:10" pos:end="1232:31">est_client_get_cacerts</name><argument_list pos:start="1232:32" pos:end="1232:61">(<argument pos:start="1232:33" pos:end="1232:36"><expr pos:start="1232:33" pos:end="1232:36"><name pos:start="1232:33" pos:end="1232:36">ectx</name></expr></argument>, <argument pos:start="1232:39" pos:end="1232:60"><expr pos:start="1232:39" pos:end="1232:60"><operator pos:start="1232:39" pos:end="1232:39">&amp;</operator><name pos:start="1232:40" pos:end="1232:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1234:5" pos:end="1237:7">/*
     * should be successful, and should have obtained a valid length
     * for the size of the CA certs buffer
     */</comment>
    <expr_stmt pos:start="1238:5" pos:end="1238:34"><expr pos:start="1238:5" pos:end="1238:33"><call pos:start="1238:5" pos:end="1238:33"><name pos:start="1238:5" pos:end="1238:13">CU_ASSERT</name><argument_list pos:start="1238:14" pos:end="1238:33">(<argument pos:start="1238:15" pos:end="1238:32"><expr pos:start="1238:15" pos:end="1238:32"><name pos:start="1238:15" pos:end="1238:16">rc</name> <operator pos:start="1238:18" pos:end="1238:19">==</operator> <name pos:start="1238:21" pos:end="1238:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1239:5" pos:end="1239:41"><expr pos:start="1239:5" pos:end="1239:40"><call pos:start="1239:5" pos:end="1239:40"><name pos:start="1239:5" pos:end="1239:13">CU_ASSERT</name><argument_list pos:start="1239:14" pos:end="1239:40">(<argument pos:start="1239:15" pos:end="1239:39"><expr pos:start="1239:15" pos:end="1239:39"><name pos:start="1239:15" pos:end="1239:35">retrieved_cacerts_len</name> <operator pos:start="1239:37" pos:end="1239:37">&gt;</operator> <literal type="number" pos:start="1239:39" pos:end="1239:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1241:5" pos:end="1252:5"><if pos:start="1241:5" pos:end="1252:5">if <condition pos:start="1241:8" pos:end="1241:30">(<expr pos:start="1241:9" pos:end="1241:29"><name pos:start="1241:9" pos:end="1241:29">retrieved_cacerts_len</name></expr>)</condition> <block pos:start="1241:32" pos:end="1252:5">{<block_content pos:start="1245:9" pos:end="1251:39">
        <comment type="block" pos:start="1242:9" pos:end="1244:11">/*
         * Shouldn't be in here, but if we are, malloc and call
         */</comment>
        <expr_stmt pos:start="1245:9" pos:end="1245:58"><expr pos:start="1245:9" pos:end="1245:57"><name pos:start="1245:9" pos:end="1245:25">retrieved_cacerts</name> <operator pos:start="1245:27" pos:end="1245:27">=</operator> <call pos:start="1245:29" pos:end="1245:57"><name pos:start="1245:29" pos:end="1245:34">malloc</name><argument_list pos:start="1245:35" pos:end="1245:57">(<argument pos:start="1245:36" pos:end="1245:56"><expr pos:start="1245:36" pos:end="1245:56"><name pos:start="1245:36" pos:end="1245:56">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1246:9" pos:end="1246:62"><expr pos:start="1246:9" pos:end="1246:61"><name pos:start="1246:9" pos:end="1246:10">rc</name> <operator pos:start="1246:12" pos:end="1246:12">=</operator> <call pos:start="1246:14" pos:end="1246:61"><name pos:start="1246:14" pos:end="1246:36">est_client_copy_cacerts</name><argument_list pos:start="1246:37" pos:end="1246:61">(<argument pos:start="1246:38" pos:end="1246:41"><expr pos:start="1246:38" pos:end="1246:41"><name pos:start="1246:38" pos:end="1246:41">ectx</name></expr></argument>, <argument pos:start="1246:44" pos:end="1246:60"><expr pos:start="1246:44" pos:end="1246:60"><name pos:start="1246:44" pos:end="1246:60">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1248:9" pos:end="1250:11">/*
         * est should fail indicating that there's no cert to provide
         */</comment>
         <expr_stmt pos:start="1251:10" pos:end="1251:39"><expr pos:start="1251:10" pos:end="1251:38"><call pos:start="1251:10" pos:end="1251:38"><name pos:start="1251:10" pos:end="1251:18">CU_ASSERT</name><argument_list pos:start="1251:19" pos:end="1251:38">(<argument pos:start="1251:20" pos:end="1251:37"><expr pos:start="1251:20" pos:end="1251:37"><name pos:start="1251:20" pos:end="1251:21">rc</name> <operator pos:start="1251:23" pos:end="1251:24">==</operator> <name pos:start="1251:26" pos:end="1251:37">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block" pos:start="1254:5" pos:end="1256:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>    
    <if_stmt pos:start="1257:5" pos:end="1261:5"><if pos:start="1257:5" pos:end="1261:5">if <condition pos:start="1257:8" pos:end="1257:26">(<expr pos:start="1257:9" pos:end="1257:25"><name pos:start="1257:9" pos:end="1257:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="1257:28" pos:end="1261:5">{<block_content pos:start="1259:9" pos:end="1260:80">

        <expr_stmt pos:start="1259:9" pos:end="1259:73"><expr pos:start="1259:9" pos:end="1259:72"><call pos:start="1259:9" pos:end="1259:72"><name pos:start="1259:9" pos:end="1259:14">printf</name><argument_list pos:start="1259:15" pos:end="1259:72">(<argument pos:start="1259:16" pos:end="1259:52"><expr pos:start="1259:16" pos:end="1259:52"><literal type="string" pos:start="1259:16" pos:end="1259:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="1259:55" pos:end="1259:71"><expr pos:start="1259:55" pos:end="1259:71"><name pos:start="1259:55" pos:end="1259:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1260:9" pos:end="1260:80"><expr pos:start="1260:9" pos:end="1260:79"><call pos:start="1260:9" pos:end="1260:79"><name pos:start="1260:9" pos:end="1260:14">printf</name><argument_list pos:start="1260:15" pos:end="1260:79">(<argument pos:start="1260:16" pos:end="1260:55"><expr pos:start="1260:16" pos:end="1260:55"><literal type="string" pos:start="1260:16" pos:end="1260:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="1260:58" pos:end="1260:78"><expr pos:start="1260:58" pos:end="1260:78"><name pos:start="1260:58" pos:end="1260:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1262:5" pos:end="1262:28"><expr pos:start="1262:5" pos:end="1262:27"><call pos:start="1262:5" pos:end="1262:27"><name pos:start="1262:5" pos:end="1262:8">free</name><argument_list pos:start="1262:9" pos:end="1262:27">(<argument pos:start="1262:10" pos:end="1262:26"><expr pos:start="1262:10" pos:end="1262:26"><name pos:start="1262:10" pos:end="1262:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="1264:5" pos:end="1266:5"><if pos:start="1264:5" pos:end="1266:5">if <condition pos:start="1264:8" pos:end="1264:13">(<expr pos:start="1264:9" pos:end="1264:12"><name pos:start="1264:9" pos:end="1264:12">ectx</name></expr>)</condition> <block pos:start="1264:15" pos:end="1266:5">{<block_content pos:start="1265:9" pos:end="1265:26">
        <expr_stmt pos:start="1265:9" pos:end="1265:26"><expr pos:start="1265:9" pos:end="1265:25"><call pos:start="1265:9" pos:end="1265:25"><name pos:start="1265:9" pos:end="1265:19">est_destroy</name><argument_list pos:start="1265:20" pos:end="1265:25">(<argument pos:start="1265:21" pos:end="1265:24"><expr pos:start="1265:21" pos:end="1265:24"><name pos:start="1265:21" pos:end="1265:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1267:5" pos:end="1269:5"><if pos:start="1267:5" pos:end="1269:5">if <condition pos:start="1267:8" pos:end="1267:16">(<expr pos:start="1267:9" pos:end="1267:15"><name pos:start="1267:9" pos:end="1267:15">cacerts</name></expr>)</condition> <block pos:start="1267:18" pos:end="1269:5">{<block_content pos:start="1268:9" pos:end="1268:22">
        <expr_stmt pos:start="1268:9" pos:end="1268:22"><expr pos:start="1268:9" pos:end="1268:21"><call pos:start="1268:9" pos:end="1268:21"><name pos:start="1268:9" pos:end="1268:12">free</name><argument_list pos:start="1268:13" pos:end="1268:21">(<argument pos:start="1268:14" pos:end="1268:20"><expr pos:start="1268:14" pos:end="1268:20"><name pos:start="1268:14" pos:end="1268:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1270:5" pos:end="1272:5"><if pos:start="1270:5" pos:end="1272:5">if <condition pos:start="1270:8" pos:end="1270:13">(<expr pos:start="1270:9" pos:end="1270:12"><name pos:start="1270:9" pos:end="1270:12">pkey</name></expr>)</condition> <block pos:start="1270:15" pos:end="1272:5">{<block_content pos:start="1271:9" pos:end="1271:19">
        <expr_stmt pos:start="1271:9" pos:end="1271:19"><expr pos:start="1271:9" pos:end="1271:18"><call pos:start="1271:9" pos:end="1271:18"><name pos:start="1271:9" pos:end="1271:12">free</name><argument_list pos:start="1271:13" pos:end="1271:18">(<argument pos:start="1271:14" pos:end="1271:17"><expr pos:start="1271:14" pos:end="1271:17"><name pos:start="1271:14" pos:end="1271:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="1276:1" pos:end="1280:3">/*
 * This test case tests the SSL read set timeout API.
 * The setting of the min, the max, a value in between, and a value
 * beyond the max.
 */</comment>
<function pos:start="1281:1" pos:end="1371:1"><type pos:start="1281:1" pos:end="1281:11"><specifier pos:start="1281:1" pos:end="1281:6">static</specifier> <name pos:start="1281:8" pos:end="1281:11">void</name></type> <name pos:start="1281:13" pos:end="1281:24">us897_test18</name> <parameter_list pos:start="1281:26" pos:end="1281:31">(<parameter pos:start="1281:27" pos:end="1281:30"><decl pos:start="1281:27" pos:end="1281:30"><type pos:start="1281:27" pos:end="1281:30"><name pos:start="1281:27" pos:end="1281:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1282:1" pos:end="1371:1">{<block_content pos:start="1283:5" pos:end="1370:5">
    <decl_stmt pos:start="1283:5" pos:end="1283:18"><decl pos:start="1283:5" pos:end="1283:17"><type pos:start="1283:5" pos:end="1283:13"><name pos:start="1283:5" pos:end="1283:11">EST_CTX</name> <modifier pos:start="1283:13" pos:end="1283:13">*</modifier></type><name pos:start="1283:14" pos:end="1283:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1284:5" pos:end="1284:31"><decl pos:start="1284:5" pos:end="1284:30"><type pos:start="1284:5" pos:end="1284:19"><name pos:start="1284:5" pos:end="1284:12">unsigned</name> <name pos:start="1284:14" pos:end="1284:17">char</name> <modifier pos:start="1284:19" pos:end="1284:19">*</modifier></type><name pos:start="1284:20" pos:end="1284:23">pkey</name> <init pos:start="1284:25" pos:end="1284:30">= <expr pos:start="1284:27" pos:end="1284:30"><name pos:start="1284:27" pos:end="1284:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1285:5" pos:end="1285:34"><decl pos:start="1285:5" pos:end="1285:33"><type pos:start="1285:5" pos:end="1285:19"><name pos:start="1285:5" pos:end="1285:12">unsigned</name> <name pos:start="1285:14" pos:end="1285:17">char</name> <modifier pos:start="1285:19" pos:end="1285:19">*</modifier></type><name pos:start="1285:20" pos:end="1285:26">cacerts</name> <init pos:start="1285:28" pos:end="1285:33">= <expr pos:start="1285:30" pos:end="1285:33"><name pos:start="1285:30" pos:end="1285:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1286:5" pos:end="1286:24"><decl pos:start="1286:5" pos:end="1286:23"><type pos:start="1286:5" pos:end="1286:7"><name pos:start="1286:5" pos:end="1286:7">int</name></type> <name pos:start="1286:9" pos:end="1286:19">cacerts_len</name> <init pos:start="1286:21" pos:end="1286:23">= <expr pos:start="1286:23" pos:end="1286:23"><literal type="number" pos:start="1286:23" pos:end="1286:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1287:5" pos:end="1287:32"><decl pos:start="1287:5" pos:end="1287:31"><type pos:start="1287:5" pos:end="1287:13"><name pos:start="1287:5" pos:end="1287:13">EST_ERROR</name></type> <name pos:start="1287:15" pos:end="1287:16">rc</name> <init pos:start="1287:18" pos:end="1287:31">= <expr pos:start="1287:20" pos:end="1287:31"><name pos:start="1287:20" pos:end="1287:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1288:5" pos:end="1288:23"><decl pos:start="1288:5" pos:end="1288:22"><type pos:start="1288:5" pos:end="1288:14"><name pos:start="1288:5" pos:end="1288:12">EVP_PKEY</name> <modifier pos:start="1288:14" pos:end="1288:14">*</modifier></type><name pos:start="1288:15" pos:end="1288:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1289:5" pos:end="1289:44"><decl pos:start="1289:5" pos:end="1289:43"><type pos:start="1289:5" pos:end="1289:19"><name pos:start="1289:5" pos:end="1289:12">unsigned</name> <name pos:start="1289:14" pos:end="1289:17">char</name> <modifier pos:start="1289:19" pos:end="1289:19">*</modifier></type><name pos:start="1289:20" pos:end="1289:36">retrieved_cacerts</name> <init pos:start="1289:38" pos:end="1289:43">= <expr pos:start="1289:40" pos:end="1289:43"><name pos:start="1289:40" pos:end="1289:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1290:5" pos:end="1290:35"><decl pos:start="1290:5" pos:end="1290:34"><type pos:start="1290:5" pos:end="1290:7"><name pos:start="1290:5" pos:end="1290:7">int</name></type>  <name pos:start="1290:10" pos:end="1290:30">retrieved_cacerts_len</name> <init pos:start="1290:32" pos:end="1290:34">= <expr pos:start="1290:34" pos:end="1290:34"><literal type="number" pos:start="1290:34" pos:end="1290:34">0</literal></expr></init></decl>;</decl_stmt>    
  
    <comment type="block" pos:start="1292:5" pos:end="1294:7">/*
     * Read in the startup CA certificates
     */</comment>
    <expr_stmt pos:start="1295:5" pos:end="1295:63"><expr pos:start="1295:5" pos:end="1295:62"><name pos:start="1295:5" pos:end="1295:15">cacerts_len</name> <operator pos:start="1295:17" pos:end="1295:17">=</operator> <call pos:start="1295:19" pos:end="1295:62"><name pos:start="1295:19" pos:end="1295:34">read_binary_file</name><argument_list pos:start="1295:35" pos:end="1295:62">(<argument pos:start="1295:36" pos:end="1295:51"><expr pos:start="1295:36" pos:end="1295:51"><name pos:start="1295:36" pos:end="1295:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="1295:54" pos:end="1295:61"><expr pos:start="1295:54" pos:end="1295:61"><operator pos:start="1295:54" pos:end="1295:54">&amp;</operator><name pos:start="1295:55" pos:end="1295:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1296:5" pos:end="1296:31"><expr pos:start="1296:5" pos:end="1296:30"><call pos:start="1296:5" pos:end="1296:30"><name pos:start="1296:5" pos:end="1296:13">CU_ASSERT</name><argument_list pos:start="1296:14" pos:end="1296:30">(<argument pos:start="1296:15" pos:end="1296:29"><expr pos:start="1296:15" pos:end="1296:29"><name pos:start="1296:15" pos:end="1296:25">cacerts_len</name> <operator pos:start="1296:27" pos:end="1296:27">&gt;</operator> <literal type="number" pos:start="1296:29" pos:end="1296:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1298:5" pos:end="1300:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="1301:5" pos:end="1301:50"><expr pos:start="1301:5" pos:end="1301:49"><name pos:start="1301:5" pos:end="1301:12">priv_key</name> <operator pos:start="1301:14" pos:end="1301:14">=</operator> <call pos:start="1301:16" pos:end="1301:49"><name pos:start="1301:16" pos:end="1301:31">read_private_key</name><argument_list pos:start="1301:32" pos:end="1301:49">(<argument pos:start="1301:33" pos:end="1301:48"><expr pos:start="1301:33" pos:end="1301:48"><name pos:start="1301:33" pos:end="1301:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1302:5" pos:end="1305:5"><if pos:start="1302:5" pos:end="1305:5">if <condition pos:start="1302:8" pos:end="1302:25">(<expr pos:start="1302:9" pos:end="1302:24"><name pos:start="1302:9" pos:end="1302:16">priv_key</name> <operator pos:start="1302:18" pos:end="1302:19">==</operator> <name pos:start="1302:21" pos:end="1302:24">NULL</name></expr>)</condition> <block pos:start="1302:27" pos:end="1305:5">{<block_content pos:start="1303:9" pos:end="1304:15">
	<expr_stmt pos:start="1303:9" pos:end="1303:80"><expr pos:start="1303:9" pos:end="1303:79"><call pos:start="1303:9" pos:end="1303:79"><name pos:start="1303:9" pos:end="1303:14">printf</name><argument_list pos:start="1303:15" pos:end="1303:79">(<argument pos:start="1303:16" pos:end="1303:60"><expr pos:start="1303:16" pos:end="1303:60"><literal type="string" pos:start="1303:16" pos:end="1303:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="1303:63" pos:end="1303:78"><expr pos:start="1303:63" pos:end="1303:78"><name pos:start="1303:63" pos:end="1303:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1304:9" pos:end="1304:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1307:5" pos:end="1308:54"><expr pos:start="1307:5" pos:end="1308:53"><name pos:start="1307:5" pos:end="1307:8">ectx</name> <operator pos:start="1307:10" pos:end="1307:10">=</operator> <call pos:start="1307:12" pos:end="1308:53"><name pos:start="1307:12" pos:end="1307:26">est_client_init</name><argument_list pos:start="1307:27" pos:end="1308:53">(<argument pos:start="1307:28" pos:end="1307:34"><expr pos:start="1307:28" pos:end="1307:34"><name pos:start="1307:28" pos:end="1307:34">cacerts</name></expr></argument>, <argument pos:start="1307:37" pos:end="1307:47"><expr pos:start="1307:37" pos:end="1307:47"><name pos:start="1307:37" pos:end="1307:47">cacerts_len</name></expr></argument>, <argument pos:start="1307:50" pos:end="1307:68"><expr pos:start="1307:50" pos:end="1307:68"><name pos:start="1307:50" pos:end="1307:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="1308:28" pos:end="1308:52"><expr pos:start="1308:28" pos:end="1308:52"><name pos:start="1308:28" pos:end="1308:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1309:5" pos:end="1309:28"><expr pos:start="1309:5" pos:end="1309:27"><call pos:start="1309:5" pos:end="1309:27"><name pos:start="1309:5" pos:end="1309:13">CU_ASSERT</name><argument_list pos:start="1309:14" pos:end="1309:27">(<argument pos:start="1309:15" pos:end="1309:26"><expr pos:start="1309:15" pos:end="1309:26"><name pos:start="1309:15" pos:end="1309:18">ectx</name> <operator pos:start="1309:20" pos:end="1309:21">!=</operator> <name pos:start="1309:23" pos:end="1309:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1311:5" pos:end="1311:59"><expr pos:start="1311:5" pos:end="1311:58"><name pos:start="1311:5" pos:end="1311:6">rc</name> <operator pos:start="1311:8" pos:end="1311:8">=</operator> <call pos:start="1311:10" pos:end="1311:58"><name pos:start="1311:10" pos:end="1311:28">est_client_set_auth</name><argument_list pos:start="1311:29" pos:end="1311:58">(<argument pos:start="1311:30" pos:end="1311:33"><expr pos:start="1311:30" pos:end="1311:33"><name pos:start="1311:30" pos:end="1311:33">ectx</name></expr></argument>, <argument pos:start="1311:36" pos:end="1311:37"><expr pos:start="1311:36" pos:end="1311:37"><literal type="string" pos:start="1311:36" pos:end="1311:37">""</literal></expr></argument>, <argument pos:start="1311:40" pos:end="1311:41"><expr pos:start="1311:40" pos:end="1311:41"><literal type="string" pos:start="1311:40" pos:end="1311:41">""</literal></expr></argument>, <argument pos:start="1311:44" pos:end="1311:47"><expr pos:start="1311:44" pos:end="1311:47"><name pos:start="1311:44" pos:end="1311:47">NULL</name></expr></argument>, <argument pos:start="1311:50" pos:end="1311:57"><expr pos:start="1311:50" pos:end="1311:57"><name pos:start="1311:50" pos:end="1311:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1312:5" pos:end="1312:34"><expr pos:start="1312:5" pos:end="1312:33"><call pos:start="1312:5" pos:end="1312:33"><name pos:start="1312:5" pos:end="1312:13">CU_ASSERT</name><argument_list pos:start="1312:14" pos:end="1312:33">(<argument pos:start="1312:15" pos:end="1312:32"><expr pos:start="1312:15" pos:end="1312:32"><name pos:start="1312:15" pos:end="1312:16">rc</name> <operator pos:start="1312:18" pos:end="1312:19">==</operator> <name pos:start="1312:21" pos:end="1312:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1314:5" pos:end="1314:74"><expr pos:start="1314:5" pos:end="1314:73"><call pos:start="1314:5" pos:end="1314:73"><name pos:start="1314:5" pos:end="1314:25">est_client_set_server</name><argument_list pos:start="1314:26" pos:end="1314:73">(<argument pos:start="1314:27" pos:end="1314:30"><expr pos:start="1314:27" pos:end="1314:30"><name pos:start="1314:27" pos:end="1314:30">ectx</name></expr></argument>, <argument pos:start="1314:33" pos:end="1314:47"><expr pos:start="1314:33" pos:end="1314:47"><name pos:start="1314:33" pos:end="1314:47">US897_SERVER_IP</name></expr></argument>, <argument pos:start="1314:50" pos:end="1314:66"><expr pos:start="1314:50" pos:end="1314:66"><name pos:start="1314:50" pos:end="1314:66">US897_SERVER_PORT</name></expr></argument>, <argument pos:start="1314:69" pos:end="1314:72"><expr pos:start="1314:69" pos:end="1314:72"><name pos:start="1314:69" pos:end="1314:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1316:5" pos:end="1316:69"><expr pos:start="1316:5" pos:end="1316:68"><name pos:start="1316:5" pos:end="1316:6">rc</name> <operator pos:start="1316:8" pos:end="1316:8">=</operator> <call pos:start="1316:10" pos:end="1316:68"><name pos:start="1316:10" pos:end="1316:36">est_client_set_read_timeout</name><argument_list pos:start="1316:37" pos:end="1316:68">(<argument pos:start="1316:38" pos:end="1316:41"><expr pos:start="1316:38" pos:end="1316:41"><name pos:start="1316:38" pos:end="1316:41">ectx</name></expr></argument>, <argument pos:start="1316:44" pos:end="1316:67"><expr pos:start="1316:44" pos:end="1316:67"><name pos:start="1316:44" pos:end="1316:67">EST_SSL_READ_TIMEOUT_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1317:5" pos:end="1317:34"><expr pos:start="1317:5" pos:end="1317:33"><call pos:start="1317:5" pos:end="1317:33"><name pos:start="1317:5" pos:end="1317:13">CU_ASSERT</name><argument_list pos:start="1317:14" pos:end="1317:33">(<argument pos:start="1317:15" pos:end="1317:32"><expr pos:start="1317:15" pos:end="1317:32"><name pos:start="1317:15" pos:end="1317:16">rc</name> <operator pos:start="1317:18" pos:end="1317:19">==</operator> <name pos:start="1317:21" pos:end="1317:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1318:5" pos:end="1318:69"><expr pos:start="1318:5" pos:end="1318:68"><name pos:start="1318:5" pos:end="1318:6">rc</name> <operator pos:start="1318:8" pos:end="1318:8">=</operator> <call pos:start="1318:10" pos:end="1318:68"><name pos:start="1318:10" pos:end="1318:36">est_client_set_read_timeout</name><argument_list pos:start="1318:37" pos:end="1318:68">(<argument pos:start="1318:38" pos:end="1318:41"><expr pos:start="1318:38" pos:end="1318:41"><name pos:start="1318:38" pos:end="1318:41">ectx</name></expr></argument>, <argument pos:start="1318:44" pos:end="1318:67"><expr pos:start="1318:44" pos:end="1318:67"><name pos:start="1318:44" pos:end="1318:67">EST_SSL_READ_TIMEOUT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1319:5" pos:end="1319:34"><expr pos:start="1319:5" pos:end="1319:33"><call pos:start="1319:5" pos:end="1319:33"><name pos:start="1319:5" pos:end="1319:13">CU_ASSERT</name><argument_list pos:start="1319:14" pos:end="1319:33">(<argument pos:start="1319:15" pos:end="1319:32"><expr pos:start="1319:15" pos:end="1319:32"><name pos:start="1319:15" pos:end="1319:16">rc</name> <operator pos:start="1319:18" pos:end="1319:19">==</operator> <name pos:start="1319:21" pos:end="1319:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1320:5" pos:end="1320:71"><expr pos:start="1320:5" pos:end="1320:70"><name pos:start="1320:5" pos:end="1320:6">rc</name> <operator pos:start="1320:8" pos:end="1320:8">=</operator> <call pos:start="1320:10" pos:end="1320:70"><name pos:start="1320:10" pos:end="1320:36">est_client_set_read_timeout</name><argument_list pos:start="1320:37" pos:end="1320:70">(<argument pos:start="1320:38" pos:end="1320:41"><expr pos:start="1320:38" pos:end="1320:41"><name pos:start="1320:38" pos:end="1320:41">ectx</name></expr></argument>, <argument pos:start="1320:44" pos:end="1320:69"><expr pos:start="1320:44" pos:end="1320:69"><name pos:start="1320:44" pos:end="1320:67">EST_SSL_READ_TIMEOUT_MAX</name><operator pos:start="1320:68" pos:end="1320:68">+</operator><literal type="number" pos:start="1320:69" pos:end="1320:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1321:5" pos:end="1321:48"><expr pos:start="1321:5" pos:end="1321:47"><call pos:start="1321:5" pos:end="1321:47"><name pos:start="1321:5" pos:end="1321:13">CU_ASSERT</name><argument_list pos:start="1321:14" pos:end="1321:47">(<argument pos:start="1321:15" pos:end="1321:46"><expr pos:start="1321:15" pos:end="1321:46"><name pos:start="1321:15" pos:end="1321:16">rc</name> <operator pos:start="1321:18" pos:end="1321:19">==</operator> <name pos:start="1321:21" pos:end="1321:46">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1322:5" pos:end="1322:46"><expr pos:start="1322:5" pos:end="1322:45"><name pos:start="1322:5" pos:end="1322:6">rc</name> <operator pos:start="1322:8" pos:end="1322:8">=</operator> <call pos:start="1322:10" pos:end="1322:45"><name pos:start="1322:10" pos:end="1322:36">est_client_set_read_timeout</name><argument_list pos:start="1322:37" pos:end="1322:45">(<argument pos:start="1322:38" pos:end="1322:41"><expr pos:start="1322:38" pos:end="1322:41"><name pos:start="1322:38" pos:end="1322:41">ectx</name></expr></argument>, <argument pos:start="1322:44" pos:end="1322:44"><expr pos:start="1322:44" pos:end="1322:44"><literal type="number" pos:start="1322:44" pos:end="1322:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1323:5" pos:end="1323:34"><expr pos:start="1323:5" pos:end="1323:33"><call pos:start="1323:5" pos:end="1323:33"><name pos:start="1323:5" pos:end="1323:13">CU_ASSERT</name><argument_list pos:start="1323:14" pos:end="1323:33">(<argument pos:start="1323:15" pos:end="1323:32"><expr pos:start="1323:15" pos:end="1323:32"><name pos:start="1323:15" pos:end="1323:16">rc</name> <operator pos:start="1323:18" pos:end="1323:19">==</operator> <name pos:start="1323:21" pos:end="1323:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1325:5" pos:end="1325:79">/* Now proceed on with a GET /cacerts to verify that nothing gets broken */</comment>
    
    <comment type="block" pos:start="1327:5" pos:end="1329:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="1330:5" pos:end="1330:62"><expr pos:start="1330:5" pos:end="1330:61"><name pos:start="1330:5" pos:end="1330:6">rc</name> <operator pos:start="1330:8" pos:end="1330:8">=</operator> <call pos:start="1330:10" pos:end="1330:61"><name pos:start="1330:10" pos:end="1330:31">est_client_get_cacerts</name><argument_list pos:start="1330:32" pos:end="1330:61">(<argument pos:start="1330:33" pos:end="1330:36"><expr pos:start="1330:33" pos:end="1330:36"><name pos:start="1330:33" pos:end="1330:36">ectx</name></expr></argument>, <argument pos:start="1330:39" pos:end="1330:60"><expr pos:start="1330:39" pos:end="1330:60"><operator pos:start="1330:39" pos:end="1330:39">&amp;</operator><name pos:start="1330:40" pos:end="1330:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1332:5" pos:end="1335:7">/*
     * should be successful, and should have obtained a valid length
     * for the size of the CA certs buffer
     */</comment>
    <expr_stmt pos:start="1336:5" pos:end="1336:34"><expr pos:start="1336:5" pos:end="1336:33"><call pos:start="1336:5" pos:end="1336:33"><name pos:start="1336:5" pos:end="1336:13">CU_ASSERT</name><argument_list pos:start="1336:14" pos:end="1336:33">(<argument pos:start="1336:15" pos:end="1336:32"><expr pos:start="1336:15" pos:end="1336:32"><name pos:start="1336:15" pos:end="1336:16">rc</name> <operator pos:start="1336:18" pos:end="1336:19">==</operator> <name pos:start="1336:21" pos:end="1336:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1337:5" pos:end="1337:41"><expr pos:start="1337:5" pos:end="1337:40"><call pos:start="1337:5" pos:end="1337:40"><name pos:start="1337:5" pos:end="1337:13">CU_ASSERT</name><argument_list pos:start="1337:14" pos:end="1337:40">(<argument pos:start="1337:15" pos:end="1337:39"><expr pos:start="1337:15" pos:end="1337:39"><name pos:start="1337:15" pos:end="1337:35">retrieved_cacerts_len</name> <operator pos:start="1337:37" pos:end="1337:37">&gt;</operator> <literal type="number" pos:start="1337:39" pos:end="1337:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1339:5" pos:end="1350:5"><if pos:start="1339:5" pos:end="1350:5">if <condition pos:start="1339:8" pos:end="1339:30">(<expr pos:start="1339:9" pos:end="1339:29"><name pos:start="1339:9" pos:end="1339:29">retrieved_cacerts_len</name></expr>)</condition> <block pos:start="1339:32" pos:end="1350:5">{<block_content pos:start="1343:9" pos:end="1349:39">
        <comment type="block" pos:start="1340:9" pos:end="1342:11">/*
         * Shouldn't be in here, but if we are, malloc and call
         */</comment>
        <expr_stmt pos:start="1343:9" pos:end="1343:58"><expr pos:start="1343:9" pos:end="1343:57"><name pos:start="1343:9" pos:end="1343:25">retrieved_cacerts</name> <operator pos:start="1343:27" pos:end="1343:27">=</operator> <call pos:start="1343:29" pos:end="1343:57"><name pos:start="1343:29" pos:end="1343:34">malloc</name><argument_list pos:start="1343:35" pos:end="1343:57">(<argument pos:start="1343:36" pos:end="1343:56"><expr pos:start="1343:36" pos:end="1343:56"><name pos:start="1343:36" pos:end="1343:56">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1344:9" pos:end="1344:62"><expr pos:start="1344:9" pos:end="1344:61"><name pos:start="1344:9" pos:end="1344:10">rc</name> <operator pos:start="1344:12" pos:end="1344:12">=</operator> <call pos:start="1344:14" pos:end="1344:61"><name pos:start="1344:14" pos:end="1344:36">est_client_copy_cacerts</name><argument_list pos:start="1344:37" pos:end="1344:61">(<argument pos:start="1344:38" pos:end="1344:41"><expr pos:start="1344:38" pos:end="1344:41"><name pos:start="1344:38" pos:end="1344:41">ectx</name></expr></argument>, <argument pos:start="1344:44" pos:end="1344:60"><expr pos:start="1344:44" pos:end="1344:60"><name pos:start="1344:44" pos:end="1344:60">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1346:9" pos:end="1348:11">/*
         * est should fail indicating that there's no cert to provide
         */</comment>
         <expr_stmt pos:start="1349:10" pos:end="1349:39"><expr pos:start="1349:10" pos:end="1349:38"><call pos:start="1349:10" pos:end="1349:38"><name pos:start="1349:10" pos:end="1349:18">CU_ASSERT</name><argument_list pos:start="1349:19" pos:end="1349:38">(<argument pos:start="1349:20" pos:end="1349:37"><expr pos:start="1349:20" pos:end="1349:37"><name pos:start="1349:20" pos:end="1349:21">rc</name> <operator pos:start="1349:23" pos:end="1349:24">==</operator> <name pos:start="1349:26" pos:end="1349:37">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    
    <comment type="block" pos:start="1352:5" pos:end="1354:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>    
    <if_stmt pos:start="1355:5" pos:end="1359:5"><if pos:start="1355:5" pos:end="1359:5">if <condition pos:start="1355:8" pos:end="1355:26">(<expr pos:start="1355:9" pos:end="1355:25"><name pos:start="1355:9" pos:end="1355:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="1355:28" pos:end="1359:5">{<block_content pos:start="1357:9" pos:end="1358:80">

        <expr_stmt pos:start="1357:9" pos:end="1357:73"><expr pos:start="1357:9" pos:end="1357:72"><call pos:start="1357:9" pos:end="1357:72"><name pos:start="1357:9" pos:end="1357:14">printf</name><argument_list pos:start="1357:15" pos:end="1357:72">(<argument pos:start="1357:16" pos:end="1357:52"><expr pos:start="1357:16" pos:end="1357:52"><literal type="string" pos:start="1357:16" pos:end="1357:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="1357:55" pos:end="1357:71"><expr pos:start="1357:55" pos:end="1357:71"><name pos:start="1357:55" pos:end="1357:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1358:9" pos:end="1358:80"><expr pos:start="1358:9" pos:end="1358:79"><call pos:start="1358:9" pos:end="1358:79"><name pos:start="1358:9" pos:end="1358:14">printf</name><argument_list pos:start="1358:15" pos:end="1358:79">(<argument pos:start="1358:16" pos:end="1358:55"><expr pos:start="1358:16" pos:end="1358:55"><literal type="string" pos:start="1358:16" pos:end="1358:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="1358:58" pos:end="1358:78"><expr pos:start="1358:58" pos:end="1358:78"><name pos:start="1358:58" pos:end="1358:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1360:5" pos:end="1360:28"><expr pos:start="1360:5" pos:end="1360:27"><call pos:start="1360:5" pos:end="1360:27"><name pos:start="1360:5" pos:end="1360:8">free</name><argument_list pos:start="1360:9" pos:end="1360:27">(<argument pos:start="1360:10" pos:end="1360:26"><expr pos:start="1360:10" pos:end="1360:26"><name pos:start="1360:10" pos:end="1360:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="1362:5" pos:end="1364:5"><if pos:start="1362:5" pos:end="1364:5">if <condition pos:start="1362:8" pos:end="1362:13">(<expr pos:start="1362:9" pos:end="1362:12"><name pos:start="1362:9" pos:end="1362:12">ectx</name></expr>)</condition> <block pos:start="1362:15" pos:end="1364:5">{<block_content pos:start="1363:9" pos:end="1363:26">
        <expr_stmt pos:start="1363:9" pos:end="1363:26"><expr pos:start="1363:9" pos:end="1363:25"><call pos:start="1363:9" pos:end="1363:25"><name pos:start="1363:9" pos:end="1363:19">est_destroy</name><argument_list pos:start="1363:20" pos:end="1363:25">(<argument pos:start="1363:21" pos:end="1363:24"><expr pos:start="1363:21" pos:end="1363:24"><name pos:start="1363:21" pos:end="1363:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1365:5" pos:end="1367:5"><if pos:start="1365:5" pos:end="1367:5">if <condition pos:start="1365:8" pos:end="1365:16">(<expr pos:start="1365:9" pos:end="1365:15"><name pos:start="1365:9" pos:end="1365:15">cacerts</name></expr>)</condition> <block pos:start="1365:18" pos:end="1367:5">{<block_content pos:start="1366:9" pos:end="1366:22">
        <expr_stmt pos:start="1366:9" pos:end="1366:22"><expr pos:start="1366:9" pos:end="1366:21"><call pos:start="1366:9" pos:end="1366:21"><name pos:start="1366:9" pos:end="1366:12">free</name><argument_list pos:start="1366:13" pos:end="1366:21">(<argument pos:start="1366:14" pos:end="1366:20"><expr pos:start="1366:14" pos:end="1366:20"><name pos:start="1366:14" pos:end="1366:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1368:5" pos:end="1370:5"><if pos:start="1368:5" pos:end="1370:5">if <condition pos:start="1368:8" pos:end="1368:13">(<expr pos:start="1368:9" pos:end="1368:12"><name pos:start="1368:9" pos:end="1368:12">pkey</name></expr>)</condition> <block pos:start="1368:15" pos:end="1370:5">{<block_content pos:start="1369:9" pos:end="1369:19">
        <expr_stmt pos:start="1369:9" pos:end="1369:19"><expr pos:start="1369:9" pos:end="1369:18"><call pos:start="1369:9" pos:end="1369:18"><name pos:start="1369:9" pos:end="1369:12">free</name><argument_list pos:start="1369:13" pos:end="1369:18">(<argument pos:start="1369:14" pos:end="1369:17"><expr pos:start="1369:14" pos:end="1369:17"><name pos:start="1369:14" pos:end="1369:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="1374:1" pos:end="1377:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="1378:1" pos:end="1425:1"><type pos:start="1378:1" pos:end="1378:3"><name pos:start="1378:1" pos:end="1378:3">int</name></type> <name pos:start="1378:5" pos:end="1378:19">us897_add_suite</name> <parameter_list pos:start="1378:21" pos:end="1378:26">(<parameter pos:start="1378:22" pos:end="1378:25"><decl pos:start="1378:22" pos:end="1378:25"><type pos:start="1378:22" pos:end="1378:25"><name pos:start="1378:22" pos:end="1378:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1379:1" pos:end="1425:1">{<block_content pos:start="1380:5" pos:end="1425:0">
    <decl_stmt pos:start="1380:5" pos:end="1383:0"><decl pos:start="1380:5" pos:end="1380:25"><type pos:start="1380:5" pos:end="1380:16"><name pos:start="1380:5" pos:end="1380:16">CU_ErrorCode</name></type> <name pos:start="1380:18" pos:end="1380:25">CU_error</name></decl>;</decl_stmt>
    
<cpp:ifdef pos:start="1382:1" pos:end="1382:17">#<cpp:directive pos:start="1382:2" pos:end="1382:6">ifdef</cpp:directive> <name pos:start="1382:8" pos:end="1382:17">HAVE_CUNIT</name></cpp:ifdef>
   <decl_stmt pos:start="1383:4" pos:end="1383:27"><decl pos:start="1383:4" pos:end="1383:26"><type pos:start="1383:4" pos:end="1383:12"><name pos:start="1383:4" pos:end="1383:12">CU_pSuite</name></type> <name pos:start="1383:14" pos:end="1383:19">pSuite</name> <init pos:start="1383:21" pos:end="1383:26">= <expr pos:start="1383:23" pos:end="1383:26"><name pos:start="1383:23" pos:end="1383:26">NULL</name></expr></init></decl>;</decl_stmt>

   <comment type="block" pos:start="1385:4" pos:end="1385:36">/* add a suite to the registry */</comment>
   <expr_stmt pos:start="1386:4" pos:end="1388:47"><expr pos:start="1386:4" pos:end="1388:46"><name pos:start="1386:4" pos:end="1386:9">pSuite</name> <operator pos:start="1386:11" pos:end="1386:11">=</operator> <call pos:start="1386:13" pos:end="1388:46"><name pos:start="1386:13" pos:end="1386:24">CU_add_suite</name><argument_list pos:start="1386:25" pos:end="1388:46">(<argument pos:start="1386:26" pos:end="1386:47"><expr pos:start="1386:26" pos:end="1386:47"><literal type="string" pos:start="1386:26" pos:end="1386:47">"us897_client_cacerts"</literal></expr></argument>, 
	                  <argument pos:start="1387:27" pos:end="1387:42"><expr pos:start="1387:27" pos:end="1387:42"><name pos:start="1387:27" pos:end="1387:42">us897_init_suite</name></expr></argument>, 
			  <argument pos:start="1388:27" pos:end="1388:45"><expr pos:start="1388:27" pos:end="1388:45"><name pos:start="1388:27" pos:end="1388:45">us897_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt pos:start="1389:4" pos:end="1392:4"><if pos:start="1389:4" pos:end="1392:4">if <condition pos:start="1389:7" pos:end="1389:22">(<expr pos:start="1389:8" pos:end="1389:21"><name pos:start="1389:8" pos:end="1389:11">NULL</name> <operator pos:start="1389:13" pos:end="1389:14">==</operator> <name pos:start="1389:16" pos:end="1389:21">pSuite</name></expr>)</condition> <block pos:start="1389:24" pos:end="1392:4">{<block_content pos:start="1390:7" pos:end="1391:28">
      <expr_stmt pos:start="1390:7" pos:end="1390:28"><expr pos:start="1390:7" pos:end="1390:27"><call pos:start="1390:7" pos:end="1390:27"><name pos:start="1390:7" pos:end="1390:25">CU_cleanup_registry</name><argument_list pos:start="1390:26" pos:end="1390:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1391:7" pos:end="1391:28">return <expr pos:start="1391:14" pos:end="1391:27"><call pos:start="1391:14" pos:end="1391:27"><name pos:start="1391:14" pos:end="1391:25">CU_get_error</name><argument_list pos:start="1391:26" pos:end="1391:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <comment type="block" pos:start="1394:4" pos:end="1394:35">/* add the tests to the suite */</comment>
   <comment type="block" pos:start="1395:4" pos:end="1395:70">/* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */</comment>
   <if_stmt pos:start="1396:4" pos:end="1421:4"><if pos:start="1396:4" pos:end="1421:4">if <condition pos:start="1396:7" pos:end="1413:8">(<expr pos:start="1396:8" pos:end="1412:85"><operator pos:start="1396:8" pos:end="1396:8">(</operator><name pos:start="1396:9" pos:end="1396:12">NULL</name> <operator pos:start="1396:14" pos:end="1396:15">==</operator> <call pos:start="1396:17" pos:end="1396:91"><name pos:start="1396:17" pos:end="1396:27">CU_add_test</name><argument_list pos:start="1396:28" pos:end="1396:91">(<argument pos:start="1396:29" pos:end="1396:34"><expr pos:start="1396:29" pos:end="1396:34"><name pos:start="1396:29" pos:end="1396:34">pSuite</name></expr></argument>, <argument pos:start="1396:37" pos:end="1396:77"><expr pos:start="1396:37" pos:end="1396:77"><literal type="string" pos:start="1396:37" pos:end="1396:77">"EST Client Init: local CA, private key "</literal></expr></argument>, <argument pos:start="1396:80" pos:end="1396:90"><expr pos:start="1396:80" pos:end="1396:90"><name pos:start="1396:80" pos:end="1396:90">us897_test1</name></expr></argument>)</argument_list></call><operator pos:start="1396:92" pos:end="1396:92">)</operator>  <operator pos:start="1396:95" pos:end="1396:96">||</operator>
       <operator pos:start="1397:8" pos:end="1397:8">(</operator><name pos:start="1397:9" pos:end="1397:12">NULL</name> <operator pos:start="1397:14" pos:end="1397:15">==</operator> <call pos:start="1397:17" pos:end="1397:80"><name pos:start="1397:17" pos:end="1397:27">CU_add_test</name><argument_list pos:start="1397:28" pos:end="1397:80">(<argument pos:start="1397:29" pos:end="1397:34"><expr pos:start="1397:29" pos:end="1397:34"><name pos:start="1397:29" pos:end="1397:34">pSuite</name></expr></argument>, <argument pos:start="1397:37" pos:end="1397:66"><expr pos:start="1397:37" pos:end="1397:66"><literal type="string" pos:start="1397:37" pos:end="1397:66">"EST Client Init: no local CA"</literal></expr></argument>, <argument pos:start="1397:69" pos:end="1397:79"><expr pos:start="1397:69" pos:end="1397:79"><name pos:start="1397:69" pos:end="1397:79">us897_test2</name></expr></argument>)</argument_list></call><operator pos:start="1397:81" pos:end="1397:81">)</operator> <operator pos:start="1397:83" pos:end="1397:84">||</operator>
       <operator pos:start="1398:8" pos:end="1398:8">(</operator><name pos:start="1398:9" pos:end="1398:12">NULL</name> <operator pos:start="1398:14" pos:end="1398:15">==</operator> <call pos:start="1398:17" pos:end="1398:103"><name pos:start="1398:17" pos:end="1398:27">CU_add_test</name><argument_list pos:start="1398:28" pos:end="1398:103">(<argument pos:start="1398:29" pos:end="1398:34"><expr pos:start="1398:29" pos:end="1398:34"><name pos:start="1398:29" pos:end="1398:34">pSuite</name></expr></argument>, <argument pos:start="1398:37" pos:end="1398:89"><expr pos:start="1398:37" pos:end="1398:89"><literal type="string" pos:start="1398:37" pos:end="1398:89">"EST Client Init: local CA, explicit CA, private key"</literal></expr></argument>, <argument pos:start="1398:92" pos:end="1398:102"><expr pos:start="1398:92" pos:end="1398:102"><name pos:start="1398:92" pos:end="1398:102">us897_test3</name></expr></argument>)</argument_list></call><operator pos:start="1398:104" pos:end="1398:104">)</operator> <operator pos:start="1398:106" pos:end="1398:107">||</operator>
<comment type="block" pos:start="1399:1" pos:end="1399:124">/*        (NULL == CU_add_test(pSuite, "EST Client Init: local CA, explicit CA, client CA, private key", us897_test4)) || */</comment>
       <operator pos:start="1400:8" pos:end="1400:8">(</operator><name pos:start="1400:9" pos:end="1400:12">NULL</name> <operator pos:start="1400:14" pos:end="1400:15">==</operator> <call pos:start="1400:17" pos:end="1400:94"><name pos:start="1400:17" pos:end="1400:27">CU_add_test</name><argument_list pos:start="1400:28" pos:end="1400:94">(<argument pos:start="1400:29" pos:end="1400:34"><expr pos:start="1400:29" pos:end="1400:34"><name pos:start="1400:29" pos:end="1400:34">pSuite</name></expr></argument>, <argument pos:start="1400:37" pos:end="1400:80"><expr pos:start="1400:37" pos:end="1400:80"><literal type="string" pos:start="1400:37" pos:end="1400:80">"EST Client Init: local CA, userid/password"</literal></expr></argument>, <argument pos:start="1400:83" pos:end="1400:93"><expr pos:start="1400:83" pos:end="1400:93"><name pos:start="1400:83" pos:end="1400:93">us897_test6</name></expr></argument>)</argument_list></call><operator pos:start="1400:95" pos:end="1400:95">)</operator> <operator pos:start="1400:97" pos:end="1400:98">||</operator>
       <operator pos:start="1401:8" pos:end="1401:8">(</operator><name pos:start="1401:9" pos:end="1401:12">NULL</name> <operator pos:start="1401:14" pos:end="1401:15">==</operator> <call pos:start="1401:17" pos:end="1401:97"><name pos:start="1401:17" pos:end="1401:27">CU_add_test</name><argument_list pos:start="1401:28" pos:end="1401:97">(<argument pos:start="1401:29" pos:end="1401:34"><expr pos:start="1401:29" pos:end="1401:34"><name pos:start="1401:29" pos:end="1401:34">pSuite</name></expr></argument>, <argument pos:start="1401:37" pos:end="1401:83"><expr pos:start="1401:37" pos:end="1401:83"><literal type="string" pos:start="1401:37" pos:end="1401:83">"EST Client Init: local CA, userid/no password"</literal></expr></argument>, <argument pos:start="1401:86" pos:end="1401:96"><expr pos:start="1401:86" pos:end="1401:96"><name pos:start="1401:86" pos:end="1401:96">us897_test7</name></expr></argument>)</argument_list></call><operator pos:start="1401:98" pos:end="1401:98">)</operator> <operator pos:start="1401:100" pos:end="1401:101">||</operator>
<comment type="block" pos:start="1402:1" pos:end="1402:107">/*        (NULL == CU_add_test(pSuite, "EST Client Init: local CA, no userid/password", us897_test8)) || */</comment>
       <operator pos:start="1403:8" pos:end="1403:8">(</operator><name pos:start="1403:9" pos:end="1403:12">NULL</name> <operator pos:start="1403:14" pos:end="1403:15">==</operator> <call pos:start="1403:17" pos:end="1403:93"><name pos:start="1403:17" pos:end="1403:27">CU_add_test</name><argument_list pos:start="1403:28" pos:end="1403:93">(<argument pos:start="1403:29" pos:end="1403:34"><expr pos:start="1403:29" pos:end="1403:34"><name pos:start="1403:29" pos:end="1403:34">pSuite</name></expr></argument>, <argument pos:start="1403:37" pos:end="1403:79"><expr pos:start="1403:37" pos:end="1403:79"><literal type="string" pos:start="1403:37" pos:end="1403:79">"EST Client Set Server: correct parameters"</literal></expr></argument>, <argument pos:start="1403:82" pos:end="1403:92"><expr pos:start="1403:82" pos:end="1403:92"><name pos:start="1403:82" pos:end="1403:92">us897_test9</name></expr></argument>)</argument_list></call><operator pos:start="1403:94" pos:end="1403:94">)</operator> <operator pos:start="1403:96" pos:end="1403:97">||</operator>
       <operator pos:start="1404:8" pos:end="1404:8">(</operator><name pos:start="1404:9" pos:end="1404:12">NULL</name> <operator pos:start="1404:14" pos:end="1404:15">==</operator> <call pos:start="1404:17" pos:end="1404:89"><name pos:start="1404:17" pos:end="1404:27">CU_add_test</name><argument_list pos:start="1404:28" pos:end="1404:89">(<argument pos:start="1404:29" pos:end="1404:34"><expr pos:start="1404:29" pos:end="1404:34"><name pos:start="1404:29" pos:end="1404:34">pSuite</name></expr></argument>, <argument pos:start="1404:37" pos:end="1404:74"><expr pos:start="1404:37" pos:end="1404:74"><literal type="string" pos:start="1404:37" pos:end="1404:74">"EST Client Set Server: no parameters"</literal></expr></argument>, <argument pos:start="1404:77" pos:end="1404:88"><expr pos:start="1404:77" pos:end="1404:88"><name pos:start="1404:77" pos:end="1404:88">us897_test10</name></expr></argument>)</argument_list></call><operator pos:start="1404:90" pos:end="1404:90">)</operator> <operator pos:start="1404:92" pos:end="1404:93">||</operator>
       <operator pos:start="1405:8" pos:end="1405:8">(</operator><name pos:start="1405:9" pos:end="1405:12">NULL</name> <operator pos:start="1405:14" pos:end="1405:15">==</operator> <call pos:start="1405:17" pos:end="1405:98"><name pos:start="1405:17" pos:end="1405:27">CU_add_test</name><argument_list pos:start="1405:28" pos:end="1405:98">(<argument pos:start="1405:29" pos:end="1405:34"><expr pos:start="1405:29" pos:end="1405:34"><name pos:start="1405:29" pos:end="1405:34">pSuite</name></expr></argument>, <argument pos:start="1405:37" pos:end="1405:83"><expr pos:start="1405:37" pos:end="1405:83"><literal type="string" pos:start="1405:37" pos:end="1405:83">"EST Client CA Certs: ca_cert valid parameters"</literal></expr></argument>, <argument pos:start="1405:86" pos:end="1405:97"><expr pos:start="1405:86" pos:end="1405:97"><name pos:start="1405:86" pos:end="1405:97">us897_test11</name></expr></argument>)</argument_list></call><operator pos:start="1405:99" pos:end="1405:99">)</operator> <operator pos:start="1405:101" pos:end="1405:102">||</operator>
       <operator pos:start="1406:8" pos:end="1406:8">(</operator><name pos:start="1406:9" pos:end="1406:12">NULL</name> <operator pos:start="1406:14" pos:end="1406:15">==</operator> <call pos:start="1406:17" pos:end="1406:98"><name pos:start="1406:17" pos:end="1406:27">CU_add_test</name><argument_list pos:start="1406:28" pos:end="1406:98">(<argument pos:start="1406:29" pos:end="1406:34"><expr pos:start="1406:29" pos:end="1406:34"><name pos:start="1406:29" pos:end="1406:34">pSuite</name></expr></argument>, <argument pos:start="1406:37" pos:end="1406:83"><expr pos:start="1406:37" pos:end="1406:83"><literal type="string" pos:start="1406:37" pos:end="1406:83">"EST Client CA Certs: missing ca_cert pointers"</literal></expr></argument>, <argument pos:start="1406:86" pos:end="1406:97"><expr pos:start="1406:86" pos:end="1406:97"><name pos:start="1406:86" pos:end="1406:97">us897_test12</name></expr></argument>)</argument_list></call><operator pos:start="1406:99" pos:end="1406:99">)</operator> <operator pos:start="1406:101" pos:end="1406:102">||</operator>
       <operator pos:start="1407:8" pos:end="1407:8">(</operator><name pos:start="1407:9" pos:end="1407:12">NULL</name> <operator pos:start="1407:14" pos:end="1407:15">==</operator> <call pos:start="1407:17" pos:end="1407:107"><name pos:start="1407:17" pos:end="1407:27">CU_add_test</name><argument_list pos:start="1407:28" pos:end="1407:107">(<argument pos:start="1407:29" pos:end="1407:34"><expr pos:start="1407:29" pos:end="1407:34"><name pos:start="1407:29" pos:end="1407:34">pSuite</name></expr></argument>, <argument pos:start="1407:37" pos:end="1407:92"><expr pos:start="1407:37" pos:end="1407:92"><literal type="string" pos:start="1407:37" pos:end="1407:92">"EST Client CA Certs: verify chain-simple chain-success"</literal></expr></argument>, <argument pos:start="1407:95" pos:end="1407:106"><expr pos:start="1407:95" pos:end="1407:106"><name pos:start="1407:95" pos:end="1407:106">us897_test13</name></expr></argument>)</argument_list></call><operator pos:start="1407:108" pos:end="1407:108">)</operator> <operator pos:start="1407:110" pos:end="1407:111">||</operator>
       <operator pos:start="1408:8" pos:end="1408:8">(</operator><name pos:start="1408:9" pos:end="1408:12">NULL</name> <operator pos:start="1408:14" pos:end="1408:15">==</operator> <call pos:start="1408:17" pos:end="1408:109"><name pos:start="1408:17" pos:end="1408:27">CU_add_test</name><argument_list pos:start="1408:28" pos:end="1408:109">(<argument pos:start="1408:29" pos:end="1408:34"><expr pos:start="1408:29" pos:end="1408:34"><name pos:start="1408:29" pos:end="1408:34">pSuite</name></expr></argument>, <argument pos:start="1408:37" pos:end="1408:94"><expr pos:start="1408:37" pos:end="1408:94"><literal type="string" pos:start="1408:37" pos:end="1408:94">"EST Client CA Certs: verify chain-multiple certs-success"</literal></expr></argument>, <argument pos:start="1408:97" pos:end="1408:108"><expr pos:start="1408:97" pos:end="1408:108"><name pos:start="1408:97" pos:end="1408:108">us897_test14</name></expr></argument>)</argument_list></call><operator pos:start="1408:110" pos:end="1408:110">)</operator> <operator pos:start="1408:112" pos:end="1408:113">||</operator>
       <operator pos:start="1409:8" pos:end="1409:8">(</operator><name pos:start="1409:9" pos:end="1409:12">NULL</name> <operator pos:start="1409:14" pos:end="1409:15">==</operator> <call pos:start="1409:17" pos:end="1409:104"><name pos:start="1409:17" pos:end="1409:27">CU_add_test</name><argument_list pos:start="1409:28" pos:end="1409:104">(<argument pos:start="1409:29" pos:end="1409:34"><expr pos:start="1409:29" pos:end="1409:34"><name pos:start="1409:29" pos:end="1409:34">pSuite</name></expr></argument>, <argument pos:start="1409:37" pos:end="1409:89"><expr pos:start="1409:37" pos:end="1409:89"><literal type="string" pos:start="1409:37" pos:end="1409:89">"EST Client CA Certs: verify chain-broken chain-fail"</literal></expr></argument>, <argument pos:start="1409:92" pos:end="1409:103"><expr pos:start="1409:92" pos:end="1409:103"><name pos:start="1409:92" pos:end="1409:103">us897_test15</name></expr></argument>)</argument_list></call><operator pos:start="1409:105" pos:end="1409:105">)</operator> <operator pos:start="1409:107" pos:end="1409:108">||</operator>
       <operator pos:start="1410:8" pos:end="1410:8">(</operator><name pos:start="1410:9" pos:end="1410:12">NULL</name> <operator pos:start="1410:14" pos:end="1410:15">==</operator> <call pos:start="1410:17" pos:end="1410:100"><name pos:start="1410:17" pos:end="1410:27">CU_add_test</name><argument_list pos:start="1410:28" pos:end="1410:100">(<argument pos:start="1410:29" pos:end="1410:34"><expr pos:start="1410:29" pos:end="1410:34"><name pos:start="1410:29" pos:end="1410:34">pSuite</name></expr></argument>, <argument pos:start="1410:37" pos:end="1410:85"><expr pos:start="1410:37" pos:end="1410:85"><literal type="string" pos:start="1410:37" pos:end="1410:85">"EST Client CA Certs: verify chain-bad date-fail"</literal></expr></argument>, <argument pos:start="1410:88" pos:end="1410:99"><expr pos:start="1410:88" pos:end="1410:99"><name pos:start="1410:88" pos:end="1410:99">us897_test16</name></expr></argument>)</argument_list></call><operator pos:start="1410:101" pos:end="1410:101">)</operator> <operator pos:start="1410:103" pos:end="1410:104">||</operator>
       <operator pos:start="1411:8" pos:end="1411:8">(</operator><name pos:start="1411:9" pos:end="1411:12">NULL</name> <operator pos:start="1411:14" pos:end="1411:15">==</operator> <call pos:start="1411:17" pos:end="1411:110"><name pos:start="1411:17" pos:end="1411:27">CU_add_test</name><argument_list pos:start="1411:28" pos:end="1411:110">(<argument pos:start="1411:29" pos:end="1411:34"><expr pos:start="1411:29" pos:end="1411:34"><name pos:start="1411:29" pos:end="1411:34">pSuite</name></expr></argument>, <argument pos:start="1411:37" pos:end="1411:95"><expr pos:start="1411:37" pos:end="1411:95"><literal type="string" pos:start="1411:37" pos:end="1411:95">"EST Client CA Certs: verify chain-multiple chains-success"</literal></expr></argument>, <argument pos:start="1411:98" pos:end="1411:109"><expr pos:start="1411:98" pos:end="1411:109"><name pos:start="1411:98" pos:end="1411:109">us897_test17</name></expr></argument>)</argument_list></call><operator pos:start="1411:111" pos:end="1411:111">)</operator> <operator pos:start="1411:113" pos:end="1411:114">||</operator>
       <operator pos:start="1412:8" pos:end="1412:8">(</operator><name pos:start="1412:9" pos:end="1412:12">NULL</name> <operator pos:start="1412:14" pos:end="1412:15">==</operator> <call pos:start="1412:17" pos:end="1412:84"><name pos:start="1412:17" pos:end="1412:27">CU_add_test</name><argument_list pos:start="1412:28" pos:end="1412:84">(<argument pos:start="1412:29" pos:end="1412:34"><expr pos:start="1412:29" pos:end="1412:34"><name pos:start="1412:29" pos:end="1412:34">pSuite</name></expr></argument>, <argument pos:start="1412:37" pos:end="1412:69"><expr pos:start="1412:37" pos:end="1412:69"><literal type="string" pos:start="1412:37" pos:end="1412:69">"EST Client SSL read timeout API"</literal></expr></argument>, <argument pos:start="1412:72" pos:end="1412:83"><expr pos:start="1412:72" pos:end="1412:83"><name pos:start="1412:72" pos:end="1412:83">us897_test18</name></expr></argument>)</argument_list></call><operator pos:start="1412:85" pos:end="1412:85">)</operator></expr>
       )</condition> 
   <block pos:start="1414:4" pos:end="1421:4">{<block_content pos:start="1415:7" pos:end="1420:28">
      <expr_stmt pos:start="1415:7" pos:end="1415:32"><expr pos:start="1415:7" pos:end="1415:31"><name pos:start="1415:7" pos:end="1415:14">CU_error</name> <operator pos:start="1415:16" pos:end="1415:16">=</operator> <call pos:start="1415:18" pos:end="1415:31"><name pos:start="1415:18" pos:end="1415:29">CU_get_error</name><argument_list pos:start="1415:30" pos:end="1415:31">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1416:7" pos:end="1416:31"><expr pos:start="1416:7" pos:end="1416:30"><call pos:start="1416:7" pos:end="1416:30"><name pos:start="1416:7" pos:end="1416:12">printf</name><argument_list pos:start="1416:13" pos:end="1416:30">(<argument pos:start="1416:14" pos:end="1416:19"><expr pos:start="1416:14" pos:end="1416:19"><literal type="string" pos:start="1416:14" pos:end="1416:19">"%d\n"</literal></expr></argument>, <argument pos:start="1416:22" pos:end="1416:29"><expr pos:start="1416:22" pos:end="1416:29"><name pos:start="1416:22" pos:end="1416:29">CU_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
      <expr_stmt pos:start="1418:7" pos:end="1418:28"><expr pos:start="1418:7" pos:end="1418:27"><call pos:start="1418:7" pos:end="1418:27"><name pos:start="1418:7" pos:end="1418:25">CU_cleanup_registry</name><argument_list pos:start="1418:26" pos:end="1418:27">()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="1419:7" pos:end="1419:41"><expr pos:start="1419:7" pos:end="1419:40"><call pos:start="1419:7" pos:end="1419:40"><name pos:start="1419:7" pos:end="1419:12">printf</name><argument_list pos:start="1419:13" pos:end="1419:40">(<argument pos:start="1419:14" pos:end="1419:19"><expr pos:start="1419:14" pos:end="1419:19"><literal type="string" pos:start="1419:14" pos:end="1419:19">"%s\n"</literal></expr></argument>, <argument pos:start="1419:22" pos:end="1419:39"><expr pos:start="1419:22" pos:end="1419:39"><call pos:start="1419:22" pos:end="1419:39"><name pos:start="1419:22" pos:end="1419:37">CU_get_error_msg</name><argument_list pos:start="1419:38" pos:end="1419:39">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1420:7" pos:end="1420:28">return <expr pos:start="1420:14" pos:end="1420:27"><call pos:start="1420:14" pos:end="1420:27"><name pos:start="1420:14" pos:end="1420:25">CU_get_error</name><argument_list pos:start="1420:26" pos:end="1420:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <return pos:start="1423:4" pos:end="1425:0">return <expr pos:start="1423:11" pos:end="1423:21"><name pos:start="1423:11" pos:end="1423:21">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1424:1" pos:end="1424:6">#<cpp:directive pos:start="1424:2" pos:end="1424:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


</unit>
