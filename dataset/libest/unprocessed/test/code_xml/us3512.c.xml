<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us3512.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us3512.c - Unit Tests URI path segment support in the Server
 *
 * April, 2016
 *
 * Copyright (c) 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:ifdef pos:start="17:1" pos:end="17:17">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="18:1" pos:end="18:24">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:28">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="20:1" pos:end="20:6">#<cpp:directive pos:start="20:2" pos:end="20:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="21:1" pos:end="21:34">#<cpp:directive pos:start="21:2" pos:end="21:8">include</cpp:directive> <cpp:file pos:start="21:10" pos:end="21:34">"../../util/test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="22:1" pos:end="22:22">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:21">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:21">"st_proxy.h"</cpp:file></cpp:include>

<cpp:include pos:start="25:1" pos:end="25:35">#<cpp:directive pos:start="25:2" pos:end="25:8">include</cpp:directive> <cpp:file pos:start="25:10" pos:end="25:35">"../../src/est/est_locl.h"</cpp:file></cpp:include>

<decl_stmt pos:start="27:1" pos:end="27:39"><decl pos:start="27:1" pos:end="27:38"><type pos:start="27:1" pos:end="27:11"><specifier pos:start="27:1" pos:end="27:6">extern</specifier> <name pos:start="27:8" pos:end="27:11">char</name></type> <name pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:36">tst_srvr_path_seg_enroll</name><index pos:start="27:37" pos:end="27:38">[]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="28:1" pos:end="28:40"><decl pos:start="28:1" pos:end="28:39"><type pos:start="28:1" pos:end="28:11"><specifier pos:start="28:1" pos:end="28:6">extern</specifier> <name pos:start="28:8" pos:end="28:11">char</name></type> <name pos:start="28:13" pos:end="28:39"><name pos:start="28:13" pos:end="28:37">tst_srvr_path_seg_cacerts</name><index pos:start="28:38" pos:end="28:39">[]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="29:1" pos:end="29:41"><decl pos:start="29:1" pos:end="29:40"><type pos:start="29:1" pos:end="29:11"><specifier pos:start="29:1" pos:end="29:6">extern</specifier> <name pos:start="29:8" pos:end="29:11">char</name></type> <name pos:start="29:13" pos:end="29:40"><name pos:start="29:13" pos:end="29:38">tst_srvr_path_seg_csrattrs</name><index pos:start="29:39" pos:end="29:40">[]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="30:1" pos:end="30:37"><decl pos:start="30:1" pos:end="30:36"><type pos:start="30:1" pos:end="30:11"><specifier pos:start="30:1" pos:end="30:6">extern</specifier> <name pos:start="30:8" pos:end="30:11">char</name></type> <name pos:start="30:13" pos:end="30:36"><name pos:start="30:13" pos:end="30:34">tst_srvr_path_seg_auth</name><index pos:start="30:35" pos:end="30:36">[]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="31:1" pos:end="31:38"><decl pos:start="31:1" pos:end="31:37"><type pos:start="31:1" pos:end="31:11"><specifier pos:start="31:1" pos:end="31:6">extern</specifier> <name pos:start="31:8" pos:end="31:11">char</name></type> <name pos:start="31:13" pos:end="31:37"><name pos:start="31:13" pos:end="31:35">tst_proxy_path_seg_auth</name><index pos:start="31:36" pos:end="31:37">[]</index></name></decl>;</decl_stmt>

<decl_stmt pos:start="33:1" pos:end="97:0"><decl pos:start="33:1" pos:end="33:31"><type pos:start="33:1" pos:end="33:10"><specifier pos:start="33:1" pos:end="33:6">static</specifier> <name pos:start="33:8" pos:end="33:10">int</name></type> <name pos:start="33:12" pos:end="33:31">path_segment_support</name></decl>;</decl_stmt>

<comment type="block" pos:start="35:1" pos:end="37:3">/*
 * max command line length when generating system commands
 */</comment>
<cpp:define pos:start="38:1" pos:end="38:30">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:26"><name pos:start="38:9" pos:end="38:26">EST_UT_MAX_CMD_LEN</name></cpp:macro> <cpp:value pos:start="38:28" pos:end="38:30">256</cpp:value></cpp:define>

<cpp:define pos:start="40:1" pos:end="40:37">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:26"><name pos:start="40:9" pos:end="40:26">US3512_SERVER_PORT</name></cpp:macro>      <cpp:value pos:start="40:33" pos:end="40:37">29496</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:43">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:24">US3512_SERVER_IP</name></cpp:macro>        <cpp:value pos:start="41:33" pos:end="41:43">"127.0.0.1"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:48">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:26"><name pos:start="42:9" pos:end="42:26">US3512_UIDPWD_GOOD</name></cpp:macro>      <cpp:value pos:start="42:33" pos:end="42:48">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:41">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:18">US3512_UID</name></cpp:macro>              <cpp:value pos:start="43:33" pos:end="43:41">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:40">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:18"><name pos:start="44:9" pos:end="44:18">US3512_PWD</name></cpp:macro>              <cpp:value pos:start="44:33" pos:end="44:40">"estpwd"</cpp:value></cpp:define>
<cpp:ifndef pos:start="45:1" pos:end="45:13">#<cpp:directive pos:start="45:2" pos:end="45:7">ifndef</cpp:directive> <name pos:start="45:9" pos:end="45:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="46:1" pos:end="46:53">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:22"><name pos:start="46:9" pos:end="46:22">US3512_CACERTS</name></cpp:macro>          <cpp:value pos:start="46:33" pos:end="46:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:53">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:26">US3512_TRUST_CERTS</name></cpp:macro>      <cpp:value pos:start="47:33" pos:end="47:53">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:74">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:29"><name pos:start="48:9" pos:end="48:29">US3512_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="48:33" pos:end="48:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:74">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:25">US3512_PROXY_CERT</name></cpp:macro>       <cpp:value pos:start="49:33" pos:end="49:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:74">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:24"><name pos:start="50:9" pos:end="50:24">US3512_PROXY_KEY</name></cpp:macro>        <cpp:value pos:start="50:33" pos:end="50:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:53">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:21">US3512_CACERT</name></cpp:macro>           <cpp:value pos:start="51:33" pos:end="51:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<comment type="block" pos:start="52:1" pos:end="54:3">/*
 * The CA certificate used to verify the EST server.  Grab it from the server's directory
 */</comment>
<comment type="block" pos:start="55:1" pos:end="55:70">/* #define CLIENT_UT_CACERT "../../example/server/estCA/cacert.crt" */</comment>
<cpp:define pos:start="56:1" pos:end="56:53">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:24"><name pos:start="56:9" pos:end="56:24">CLIENT_UT_CACERT</name></cpp:macro>        <cpp:value pos:start="56:33" pos:end="56:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:57">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:24">CLIENT_UT_PUBKEY</name></cpp:macro>        <cpp:value pos:start="57:33" pos:end="57:57">"./est_client_ut_keypair"</cpp:value></cpp:define>
<cpp:else pos:start="58:1" pos:end="58:5">#<cpp:directive pos:start="58:2" pos:end="58:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="59:1" pos:end="59:55">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:22">US3512_CACERTS</name></cpp:macro>          <cpp:value pos:start="59:33" pos:end="59:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="60:1" pos:end="60:53">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:26"><name pos:start="60:9" pos:end="60:26">US3512_TRUST_CERTS</name></cpp:macro>      <cpp:value pos:start="60:33" pos:end="60:53">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="61:1" pos:end="61:75">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:29">US3512_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="61:33" pos:end="61:75">"CA\\estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="62:1" pos:end="62:76">#<cpp:directive pos:start="62:2" pos:end="62:7">define</cpp:directive> <cpp:macro pos:start="62:9" pos:end="62:25"><name pos:start="62:9" pos:end="62:25">US3512_PROXY_CERT</name></cpp:macro>       <cpp:value pos:start="62:33" pos:end="62:76">"CA\\estCA\\private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="63:1" pos:end="63:77">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:24">US3512_PROXY_KEY</name></cpp:macro>        <cpp:value pos:start="63:33" pos:end="63:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="64:1" pos:end="64:55">#<cpp:directive pos:start="64:2" pos:end="64:7">define</cpp:directive> <cpp:macro pos:start="64:9" pos:end="64:21"><name pos:start="64:9" pos:end="64:21">US3512_CACERT</name></cpp:macro>           <cpp:value pos:start="64:33" pos:end="64:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<comment type="block" pos:start="65:1" pos:end="67:3">/*
 * The CA certificate used to verify the EST server.  Grab it from the server's directory
 */</comment>
<comment type="block" pos:start="68:1" pos:end="68:70">/* #define CLIENT_UT_CACERT "../../example/server/estCA/cacert.crt" */</comment>
<cpp:define pos:start="69:1" pos:end="69:55">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:24">CLIENT_UT_CACERT</name></cpp:macro>        <cpp:value pos:start="69:33" pos:end="69:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="70:1" pos:end="70:55">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:24"><name pos:start="70:9" pos:end="70:24">CLIENT_UT_PUBKEY</name></cpp:macro>        <cpp:value pos:start="70:33" pos:end="70:55">"est_client_ut_keypair"</cpp:value></cpp:define>
<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="73:1" pos:end="73:102">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:28">US3512_ENROLL_URL_BA</name></cpp:macro> <cpp:value pos:start="73:30" pos:end="73:102">"https://127.0.0.1:29496/.well-known/est/cacerts-somestring/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="74:1" pos:end="74:114">#<cpp:directive pos:start="74:2" pos:end="74:7">define</cpp:directive> <cpp:macro pos:start="74:9" pos:end="74:38"><name pos:start="74:9" pos:end="74:38">US3512_ENROLL_URL_BA_BACKSLASH</name></cpp:macro> <cpp:value pos:start="74:40" pos:end="74:114">"https://127.0.0.1:29496/.well-known/est/cacerts-\\somestring/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="75:1" pos:end="75:93">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:38">US3512_ENROLL_URL_BA_NOSEGMENT</name></cpp:macro> <cpp:value pos:start="75:40" pos:end="75:93">"https://127.0.0.1:29496/.well-known/est/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="76:1" pos:end="76:66">#<cpp:directive pos:start="76:2" pos:end="76:7">define</cpp:directive> <cpp:macro pos:start="76:9" pos:end="76:24"><name pos:start="76:9" pos:end="76:24">US3512_PKCS10_CT</name></cpp:macro>        <cpp:value pos:start="76:33" pos:end="76:66">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 

<cpp:define pos:start="78:1" pos:end="78:1000">#<cpp:directive pos:start="78:2" pos:end="78:7">define</cpp:directive> <cpp:macro pos:start="78:9" pos:end="78:29"><name pos:start="78:9" pos:end="78:29">US3512_PKCS10_RSA2048</name></cpp:macro> <cpp:value pos:start="78:31" pos:end="78:1000">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDJA9mdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>

<cpp:define pos:start="80:1" pos:end="80:41">#<cpp:directive pos:start="80:2" pos:end="80:7">define</cpp:directive> <cpp:macro pos:start="80:9" pos:end="80:29"><name pos:start="80:9" pos:end="80:29">US3512_TCP_PROXY_PORT</name></cpp:macro>       <cpp:value pos:start="80:37" pos:end="80:41">16894</cpp:value></cpp:define>
<cpp:define pos:start="81:1" pos:end="81:38">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:22">PATH_SEG_VALID</name></cpp:macro>    <cpp:value pos:start="81:27" pos:end="81:38">"somestring"</cpp:value></cpp:define>
<cpp:define pos:start="82:1" pos:end="82:59">#<cpp:directive pos:start="82:2" pos:end="82:7">define</cpp:directive> <cpp:macro pos:start="82:9" pos:end="82:30"><name pos:start="82:9" pos:end="82:30">PATH_SEG_TOO_MANY_SEGS</name></cpp:macro>    <cpp:value pos:start="82:35" pos:end="82:59">"somestring1/somestring2"</cpp:value></cpp:define>
<cpp:define pos:start="83:1" pos:end="83:42">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:29">PATH_SEG_IS_OPERATION</name></cpp:macro>    <cpp:value pos:start="83:34" pos:end="83:42">"cacerts"</cpp:value></cpp:define>
<cpp:define pos:start="84:1" pos:end="84:58">#<cpp:directive pos:start="84:2" pos:end="84:7">define</cpp:directive> <cpp:macro pos:start="84:9" pos:end="84:35"><name pos:start="84:9" pos:end="84:35">PATH_SEG_CONTAINS_OPERATION</name></cpp:macro>    <cpp:value pos:start="84:40" pos:end="84:58">"cacertssomestring"</cpp:value></cpp:define>
<cpp:define pos:start="85:1" pos:end="85:151">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:20">PATH_SEG_MAX</name></cpp:macro> <cpp:value pos:start="85:22" pos:end="85:151">"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"</cpp:value></cpp:define>
<cpp:define pos:start="86:1" pos:end="86:157">#<cpp:directive pos:start="86:2" pos:end="86:7">define</cpp:directive> <cpp:macro pos:start="86:9" pos:end="86:25"><name pos:start="86:9" pos:end="86:25">PATH_SEG_TOO_LONG</name></cpp:macro> <cpp:value pos:start="86:27" pos:end="86:157">"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</cpp:value></cpp:define>

<cpp:define pos:start="88:1" pos:end="88:109">#<cpp:directive pos:start="88:2" pos:end="88:7">define</cpp:directive> <cpp:macro pos:start="88:9" pos:end="88:37"><name pos:start="88:9" pos:end="88:37">US3512_PROXY_ENROLL_URL_VALID</name></cpp:macro> <cpp:value pos:start="88:39" pos:end="88:109">"https://127.0.0.1:16894/.well-known/est/"PATH_SEG_VALID"/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="89:1" pos:end="89:115">#<cpp:directive pos:start="89:2" pos:end="89:7">define</cpp:directive> <cpp:macro pos:start="89:9" pos:end="89:40"><name pos:start="89:9" pos:end="89:40">US3512_PROXY_ENROLL_URL_TOO_LONG</name></cpp:macro> <cpp:value pos:start="89:42" pos:end="89:115">"https://127.0.0.1:16894/.well-known/est/"PATH_SEG_TOO_LONG"/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="90:1" pos:end="90:105">#<cpp:directive pos:start="90:2" pos:end="90:7">define</cpp:directive> <cpp:macro pos:start="90:9" pos:end="90:35"><name pos:start="90:9" pos:end="90:35">US3512_PROXY_ENROLL_URL_MAX</name></cpp:macro> <cpp:value pos:start="90:37" pos:end="90:105">"https://127.0.0.1:16894/.well-known/est/"PATH_SEG_MAX"/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="91:1" pos:end="91:120">#<cpp:directive pos:start="91:2" pos:end="91:7">define</cpp:directive> <cpp:macro pos:start="91:9" pos:end="91:40"><name pos:start="91:9" pos:end="91:40">US3512_PROXY_ENROLL_URL_TOO_MANY</name></cpp:macro> <cpp:value pos:start="91:42" pos:end="91:120">"https://127.0.0.1:16894/.well-known/est/"PATH_SEG_TOO_MANY_SEGS"/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="92:1" pos:end="92:123">#<cpp:directive pos:start="92:2" pos:end="92:7">define</cpp:directive> <cpp:macro pos:start="92:9" pos:end="92:44"><name pos:start="92:9" pos:end="92:44">US3512_PROXY_ENROLL_URL_IS_OPERATION</name></cpp:macro> <cpp:value pos:start="92:46" pos:end="92:123">"https://127.0.0.1:16894/.well-known/est/"PATH_SEG_IS_OPERATION"/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="93:1" pos:end="93:135">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:50"><name pos:start="93:9" pos:end="93:50">US3512_PROXY_ENROLL_URL_CONTAINS_OPERATION</name></cpp:macro> <cpp:value pos:start="93:52" pos:end="93:135">"https://127.0.0.1:16894/.well-known/est/"PATH_SEG_CONTAINS_OPERATION"/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="94:1" pos:end="94:105">#<cpp:directive pos:start="94:2" pos:end="94:7">define</cpp:directive> <cpp:macro pos:start="94:9" pos:end="94:38"><name pos:start="94:9" pos:end="94:38">US3512_PROXY_CACERTS_URL_VALID</name></cpp:macro> <cpp:value pos:start="94:40" pos:end="94:105">"https://127.0.0.1:16894/.well-known/est/"PATH_SEG_VALID"/cacerts"</cpp:value></cpp:define>

<cpp:define pos:start="96:1" pos:end="96:927">#<cpp:directive pos:start="96:2" pos:end="96:7">define</cpp:directive> <cpp:macro pos:start="96:9" pos:end="96:25"><name pos:start="96:9" pos:end="96:25">US3512_PKCS10_REQ</name></cpp:macro>    <cpp:value pos:start="96:30" pos:end="96:927">"MIIChjCCAW4CAQAwQTElMCMGA1UEAxMccmVxIGJ5IGNsaWVudCBpbiBkZW1vIHN0\nZXAgMjEYMBYGA1UEBRMPUElEOldpZGdldCBTTjoyMIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEA/6JUWpXXDwCkvWPDWO0yANDQzFMxroLEIh6/vdNwfRSG\neNGC0efcL5L4NxHZOmO14yqMEMGpCyHz7Ob3hhNPu0K81gMUzRqzwmmJHXwRqobA\ni59OQEkHaPhI1T4RkVnSYZLOowSqonMZjWbT0iqZDY/RD8l3GjH3gEIBMQFv62NT\n1CSu9dfHEg76+DnJAhdddUDJDXO3AWI5s7zsLlzBoPlgd4oK5K1wqEE2pqhnZxei\nc94WFqXQ1kyrW0POVlQ+32moWTQTFA7SQE2uEF+GBXsRPaEO+FLQjE8JHOewLf/T\nqX0ngywnvxKRpKguSBic31WVkswPs8E34pjjZAvdxQIDAQABoAAwDQYJKoZIhvcN\nAQEFBQADggEBAAZXVoorRxAvQPiMNDpRZHhiD5O2Yd7APBBznVgRll1HML5dpgnu\nXY7ZCYwQtxwNGYVtKJaZCiW7dWrZhvnF5ua3wUr9R2ZNoLwVR0Z9Y5wwn1cJrdSG\ncUuBN/0XBGI6g6fQlDDImQoPSF8gygcTCCHba7Uv0i8oiCiwf5UF+F3NYBoBL/PP\nlO2zBEYNQ65+W3YgfUyYP0Cr0NyXgkz3Qh2Xa2eRFeW56oejmcEaMjq6yx7WAC2X\nk3w1G6Le1UInzuenMScNgnt8FaI43eAILMdLQ/Ekxc30fjxA12RDh/YzDYiExFv0\ndPd4o5uPKt4jRitvGiAPm/OCdXiYAwqiu2w=\n"</cpp:value></cpp:define>

<function_decl pos:start="98:1" pos:end="98:78"><type pos:start="98:1" pos:end="98:10"><specifier pos:start="98:1" pos:end="98:6">static</specifier> <name pos:start="98:8" pos:end="98:10">int</name></type> <name pos:start="98:12" pos:end="98:36">client_manual_cert_verify</name> <parameter_list pos:start="98:38" pos:end="98:77">(<parameter pos:start="98:39" pos:end="98:52"><decl pos:start="98:39" pos:end="98:52"><type pos:start="98:39" pos:end="98:52"><name pos:start="98:39" pos:end="98:42">X509</name> <modifier pos:start="98:44" pos:end="98:44">*</modifier></type><name pos:start="98:45" pos:end="98:52">cur_cert</name></decl></parameter>, <parameter pos:start="98:55" pos:end="98:76"><decl pos:start="98:55" pos:end="98:76"><type pos:start="98:55" pos:end="98:76"><name pos:start="98:55" pos:end="98:57">int</name></type> <name pos:start="98:59" pos:end="98:76">openssl_cert_error</name></decl></parameter>)</parameter_list>;</function_decl>

<function pos:start="100:1" pos:end="102:1"><type pos:start="100:1" pos:end="100:11"><specifier pos:start="100:1" pos:end="100:6">static</specifier> <name pos:start="100:8" pos:end="100:11">void</name></type> <name pos:start="100:13" pos:end="100:24">us3512_clean</name> <parameter_list pos:start="100:26" pos:end="100:31">(<parameter pos:start="100:27" pos:end="100:30"><decl pos:start="100:27" pos:end="100:30"><type pos:start="100:27" pos:end="100:30"><name pos:start="100:27" pos:end="100:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="101:1" pos:end="102:1">{<block_content>
</block_content>}</block></function>

<function pos:start="104:1" pos:end="139:1"><type pos:start="104:1" pos:end="104:10"><specifier pos:start="104:1" pos:end="104:6">static</specifier> <name pos:start="104:8" pos:end="104:10">int</name></type> <name pos:start="104:12" pos:end="104:30">us3512_start_server</name> <parameter_list pos:start="104:32" pos:end="104:59">(<parameter pos:start="104:33" pos:end="104:49"><decl pos:start="104:33" pos:end="104:49"><type pos:start="104:33" pos:end="104:49"><name pos:start="104:33" pos:end="104:35">int</name></type> <name pos:start="104:37" pos:end="104:49">manual_enroll</name></decl></parameter>, <parameter pos:start="104:52" pos:end="104:58"><decl pos:start="104:52" pos:end="104:58"><type pos:start="104:52" pos:end="104:58"><name pos:start="104:52" pos:end="104:54">int</name></type> <name pos:start="104:56" pos:end="104:58">nid</name></decl></parameter>)</parameter_list>
<block pos:start="105:1" pos:end="139:1">{<block_content pos:start="106:5" pos:end="138:14">
    <decl_stmt pos:start="106:5" pos:end="106:11"><decl pos:start="106:5" pos:end="106:10"><type pos:start="106:5" pos:end="106:7"><name pos:start="106:5" pos:end="106:7">int</name></type> <name pos:start="106:9" pos:end="106:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="108:5" pos:end="117:33"><expr pos:start="108:5" pos:end="117:32"><name pos:start="108:5" pos:end="108:6">rv</name> <operator pos:start="108:8" pos:end="108:8">=</operator> <call pos:start="108:10" pos:end="117:32"><name pos:start="108:10" pos:end="108:27">st_start_nocacerts</name><argument_list pos:start="108:28" pos:end="117:32">(<argument pos:start="108:29" pos:end="108:46"><expr pos:start="108:29" pos:end="108:46"><name pos:start="108:29" pos:end="108:46">US3512_SERVER_PORT</name></expr></argument>,
                            <argument pos:start="109:29" pos:end="109:49"><expr pos:start="109:29" pos:end="109:49"><name pos:start="109:29" pos:end="109:49">US3512_SERVER_CERTKEY</name></expr></argument>,
                            <argument pos:start="110:29" pos:end="110:49"><expr pos:start="110:29" pos:end="110:49"><name pos:start="110:29" pos:end="110:49">US3512_SERVER_CERTKEY</name></expr></argument>,
                            <argument pos:start="111:29" pos:end="111:47"><expr pos:start="111:29" pos:end="111:47"><literal type="string" pos:start="111:29" pos:end="111:47">"US3512 test realm"</literal></expr></argument>,
                            <argument pos:start="112:29" pos:end="112:42"><expr pos:start="112:29" pos:end="112:42"><name pos:start="112:29" pos:end="112:42">US3512_CACERTS</name></expr></argument>,
                            <argument pos:start="113:29" pos:end="113:46"><expr pos:start="113:29" pos:end="113:46"><name pos:start="113:29" pos:end="113:46">US3512_TRUST_CERTS</name></expr></argument>,
                            <argument pos:start="114:29" pos:end="114:49"><expr pos:start="114:29" pos:end="114:49"><literal type="string" pos:start="114:29" pos:end="114:49">"CA/estExampleCA.cnf"</literal></expr></argument>,
                            <argument pos:start="115:29" pos:end="115:41"><expr pos:start="115:29" pos:end="115:41"><name pos:start="115:29" pos:end="115:41">manual_enroll</name></expr></argument>,
                            <argument pos:start="116:29" pos:end="116:29"><expr pos:start="116:29" pos:end="116:29"><literal type="number" pos:start="116:29" pos:end="116:29">0</literal></expr></argument>,
                            <argument pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:31">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:13"><expr pos:start="119:5" pos:end="119:12"><call pos:start="119:5" pos:end="119:12"><name pos:start="119:5" pos:end="119:9">SLEEP</name><argument_list pos:start="119:10" pos:end="119:12">(<argument pos:start="119:11" pos:end="119:11"><expr pos:start="119:11" pos:end="119:11"><literal type="number" pos:start="119:11" pos:end="119:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="121:5" pos:end="123:7">/*
     * Next we start an EST proxy acting as an RA.
     */</comment>
    <expr_stmt pos:start="124:5" pos:end="135:37"><expr pos:start="124:5" pos:end="135:36"><name pos:start="124:5" pos:end="124:6">rv</name> <operator pos:start="124:8" pos:end="124:8">=</operator> <call pos:start="124:10" pos:end="135:36"><name pos:start="124:10" pos:end="124:33">st_proxy_start_nocacerts</name><argument_list pos:start="124:34" pos:end="135:36">(<argument pos:start="124:35" pos:end="124:55"><expr pos:start="124:35" pos:end="124:55"><name pos:start="124:35" pos:end="124:55">US3512_TCP_PROXY_PORT</name></expr></argument>,
                                  <argument pos:start="125:35" pos:end="125:51"><expr pos:start="125:35" pos:end="125:51"><name pos:start="125:35" pos:end="125:51">US3512_PROXY_CERT</name></expr></argument>,
                                  <argument pos:start="126:35" pos:end="126:50"><expr pos:start="126:35" pos:end="126:50"><name pos:start="126:35" pos:end="126:50">US3512_PROXY_KEY</name></expr></argument>,
                                  <argument pos:start="127:35" pos:end="127:44"><expr pos:start="127:35" pos:end="127:44"><literal type="string" pos:start="127:35" pos:end="127:44">"estrealm"</literal></expr></argument>,
                                  <argument pos:start="128:35" pos:end="128:47"><expr pos:start="128:35" pos:end="128:47"><name pos:start="128:35" pos:end="128:47">US3512_CACERT</name></expr></argument>,
                                  <argument pos:start="129:35" pos:end="129:52"><expr pos:start="129:35" pos:end="129:52"><name pos:start="129:35" pos:end="129:52">US3512_TRUST_CERTS</name></expr></argument>,
                                  <argument pos:start="130:35" pos:end="130:43"><expr pos:start="130:35" pos:end="130:43"><literal type="string" pos:start="130:35" pos:end="130:43">"estuser"</literal></expr></argument>,
                                  <argument pos:start="131:35" pos:end="131:42"><expr pos:start="131:35" pos:end="131:42"><literal type="string" pos:start="131:35" pos:end="131:42">"estpwd"</literal></expr></argument>,
                                  <argument pos:start="132:35" pos:end="132:45"><expr pos:start="132:35" pos:end="132:45"><literal type="string" pos:start="132:35" pos:end="132:45">"127.0.0.1"</literal></expr></argument>,
                                  <argument pos:start="133:35" pos:end="133:52"><expr pos:start="133:35" pos:end="133:52"><name pos:start="133:35" pos:end="133:52">US3512_SERVER_PORT</name></expr></argument>,
                                  <argument pos:start="134:35" pos:end="134:35"><expr pos:start="134:35" pos:end="134:35"><literal type="number" pos:start="134:35" pos:end="134:35">0</literal></expr></argument>,  <comment type="line" pos:start="134:39" pos:end="134:52">// disable PoP</comment>
                                  <argument pos:start="135:35" pos:end="135:35"><expr pos:start="135:35" pos:end="135:35"><literal type="number" pos:start="135:35" pos:end="135:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="135:40" pos:end="135:56">// ecdhe nid info</comment>
    <expr_stmt pos:start="136:5" pos:end="136:13"><expr pos:start="136:5" pos:end="136:12"><call pos:start="136:5" pos:end="136:12"><name pos:start="136:5" pos:end="136:9">SLEEP</name><argument_list pos:start="136:10" pos:end="136:12">(<argument pos:start="136:11" pos:end="136:11"><expr pos:start="136:11" pos:end="136:11"><literal type="number" pos:start="136:11" pos:end="136:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="138:5" pos:end="138:14">return <expr pos:start="138:12" pos:end="138:13"><name pos:start="138:12" pos:end="138:13">rv</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="141:1" pos:end="168:1"><type pos:start="141:1" pos:end="141:10"><specifier pos:start="141:1" pos:end="141:6">static</specifier> <name pos:start="141:8" pos:end="141:10">int</name></type> <name pos:start="141:12" pos:end="141:29">path_seg_supported</name> <parameter_list pos:start="141:31" pos:end="141:36">(<parameter pos:start="141:32" pos:end="141:35"><decl pos:start="141:32" pos:end="141:35"><type pos:start="141:32" pos:end="141:35"><name pos:start="141:32" pos:end="141:35">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="142:1" pos:end="168:1">{<block_content pos:start="144:5" pos:end="167:13">

    <decl_stmt pos:start="144:5" pos:end="144:18"><decl pos:start="144:5" pos:end="144:17"><type pos:start="144:5" pos:end="144:13"><name pos:start="144:5" pos:end="144:11">EST_CTX</name> <modifier pos:start="144:13" pos:end="144:13">*</modifier></type><name pos:start="144:14" pos:end="144:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="145:5" pos:end="145:34"><decl pos:start="145:5" pos:end="145:33"><type pos:start="145:5" pos:end="145:19"><name pos:start="145:5" pos:end="145:12">unsigned</name> <name pos:start="145:14" pos:end="145:17">char</name> <modifier pos:start="145:19" pos:end="145:19">*</modifier></type><name pos:start="145:20" pos:end="145:26">cacerts</name> <init pos:start="145:28" pos:end="145:33">= <expr pos:start="145:30" pos:end="145:33"><name pos:start="145:30" pos:end="145:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="146:5" pos:end="146:24"><decl pos:start="146:5" pos:end="146:23"><type pos:start="146:5" pos:end="146:7"><name pos:start="146:5" pos:end="146:7">int</name></type> <name pos:start="146:9" pos:end="146:19">cacerts_len</name> <init pos:start="146:21" pos:end="146:23">= <expr pos:start="146:23" pos:end="146:23"><literal type="number" pos:start="146:23" pos:end="146:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="147:5" pos:end="147:32"><decl pos:start="147:5" pos:end="147:31"><type pos:start="147:5" pos:end="147:13"><name pos:start="147:5" pos:end="147:13">EST_ERROR</name></type> <name pos:start="147:15" pos:end="147:16">rc</name> <init pos:start="147:18" pos:end="147:31">= <expr pos:start="147:20" pos:end="147:31"><name pos:start="147:20" pos:end="147:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:13"><expr pos:start="149:5" pos:end="149:12"><call pos:start="149:5" pos:end="149:12"><name pos:start="149:5" pos:end="149:9">SLEEP</name><argument_list pos:start="149:10" pos:end="149:12">(<argument pos:start="149:11" pos:end="149:11"><expr pos:start="149:11" pos:end="149:11"><literal type="number" pos:start="149:11" pos:end="149:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="151:5" pos:end="153:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="154:5" pos:end="154:63"><expr pos:start="154:5" pos:end="154:62"><name pos:start="154:5" pos:end="154:15">cacerts_len</name> <operator pos:start="154:17" pos:end="154:17">=</operator> <call pos:start="154:19" pos:end="154:62"><name pos:start="154:19" pos:end="154:34">read_binary_file</name><argument_list pos:start="154:35" pos:end="154:62">(<argument pos:start="154:36" pos:end="154:51"><expr pos:start="154:36" pos:end="154:51"><name pos:start="154:36" pos:end="154:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="154:54" pos:end="154:61"><expr pos:start="154:54" pos:end="154:61"><operator pos:start="154:54" pos:end="154:54">&amp;</operator><name pos:start="154:55" pos:end="154:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="156:5" pos:end="157:35"><expr pos:start="156:5" pos:end="157:34"><name pos:start="156:5" pos:end="156:8">ectx</name> <operator pos:start="156:10" pos:end="156:10">=</operator> <call pos:start="156:12" pos:end="157:34"><name pos:start="156:12" pos:end="156:26">est_client_init</name><argument_list pos:start="156:27" pos:end="157:34">(<argument pos:start="156:28" pos:end="156:34"><expr pos:start="156:28" pos:end="156:34"><name pos:start="156:28" pos:end="156:34">cacerts</name></expr></argument>, <argument pos:start="156:37" pos:end="156:47"><expr pos:start="156:37" pos:end="156:47"><name pos:start="156:37" pos:end="156:47">cacerts_len</name></expr></argument>, <argument pos:start="156:50" pos:end="156:68"><expr pos:start="156:50" pos:end="156:68"><name pos:start="156:50" pos:end="156:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="157:9" pos:end="157:33"><expr pos:start="157:9" pos:end="157:33"><name pos:start="157:9" pos:end="157:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="160:24"><expr pos:start="159:5" pos:end="160:23"><name pos:start="159:5" pos:end="159:6">rc</name> <operator pos:start="159:8" pos:end="159:8">=</operator> <call pos:start="159:10" pos:end="160:23"><name pos:start="159:10" pos:end="159:30">est_client_set_server</name><argument_list pos:start="159:31" pos:end="160:23">(<argument pos:start="159:32" pos:end="159:35"><expr pos:start="159:32" pos:end="159:35"><name pos:start="159:32" pos:end="159:35">ectx</name></expr></argument>, <argument pos:start="159:38" pos:end="159:53"><expr pos:start="159:38" pos:end="159:53"><name pos:start="159:38" pos:end="159:53">US3512_SERVER_IP</name></expr></argument>, <argument pos:start="159:56" pos:end="159:73"><expr pos:start="159:56" pos:end="159:73"><name pos:start="159:56" pos:end="159:73">US3512_SERVER_PORT</name></expr></argument>,
        <argument pos:start="160:9" pos:end="160:22"><expr pos:start="160:9" pos:end="160:22"><literal type="string" pos:start="160:9" pos:end="160:22">"test_segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="163:5">if <condition pos:start="161:8" pos:end="161:27">(<expr pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:10">rc</name> <operator pos:start="161:12" pos:end="161:13">==</operator> <name pos:start="161:15" pos:end="161:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="161:29" pos:end="163:5">{<block_content pos:start="162:9" pos:end="162:17">
        <return pos:start="162:9" pos:end="162:17">return <expr pos:start="162:16" pos:end="162:16"><literal type="number" pos:start="162:16" pos:end="162:16">1</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="163:7" pos:end="165:5">else <block pos:start="163:12" pos:end="165:5">{<block_content pos:start="164:9" pos:end="164:17">
        <return pos:start="164:9" pos:end="164:17">return <expr pos:start="164:16" pos:end="164:16"><literal type="number" pos:start="164:16" pos:end="164:16">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return pos:start="167:5" pos:end="167:13">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="170:1" pos:end="174:3">/*
 * This routine is called when CUnit initializes this test
 * suite.
 * 1. Generate the keypair to be used for this EST Client UT suite
 */</comment>
<function pos:start="175:1" pos:end="211:1"><type pos:start="175:1" pos:end="175:10"><specifier pos:start="175:1" pos:end="175:6">static</specifier> <name pos:start="175:8" pos:end="175:10">int</name></type> <name pos:start="175:12" pos:end="175:28">us3512_init_suite</name> <parameter_list pos:start="175:30" pos:end="175:35">(<parameter pos:start="175:31" pos:end="175:34"><decl pos:start="175:31" pos:end="175:34"><type pos:start="175:31" pos:end="175:34"><name pos:start="175:31" pos:end="175:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="176:1" pos:end="211:1">{<block_content pos:start="177:5" pos:end="210:14">
    <decl_stmt pos:start="177:5" pos:end="177:15"><decl pos:start="177:5" pos:end="177:14"><type pos:start="177:5" pos:end="177:7"><name pos:start="177:5" pos:end="177:7">int</name></type> <name pos:start="177:9" pos:end="177:10">rv</name> <init pos:start="177:12" pos:end="177:14">= <expr pos:start="177:14" pos:end="177:14"><literal type="number" pos:start="177:14" pos:end="177:14">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:44"><expr pos:start="179:5" pos:end="179:43"><call pos:start="179:5" pos:end="179:43"><name pos:start="179:5" pos:end="179:19">est_init_logger</name><argument_list pos:start="179:20" pos:end="179:43">(<argument pos:start="179:21" pos:end="179:36"><expr pos:start="179:21" pos:end="179:36"><name pos:start="179:21" pos:end="179:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="179:39" pos:end="179:42"><expr pos:start="179:39" pos:end="179:42"><name pos:start="179:39" pos:end="179:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="181:5" pos:end="181:33"><decl pos:start="181:5" pos:end="181:32"><type pos:start="181:5" pos:end="181:8"><name pos:start="181:5" pos:end="181:8">char</name></type> <name pos:start="181:10" pos:end="181:32"><name pos:start="181:10" pos:end="181:12">cmd</name><index pos:start="181:13" pos:end="181:32">[<expr pos:start="181:14" pos:end="181:31"><name pos:start="181:14" pos:end="181:31">EST_UT_MAX_CMD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt pos:start="182:5" pos:end="182:61"><expr pos:start="182:5" pos:end="182:60"><call pos:start="182:5" pos:end="182:60"><name pos:start="182:5" pos:end="182:10">printf</name><argument_list pos:start="182:11" pos:end="182:60">(<argument pos:start="182:12" pos:end="182:59"><expr pos:start="182:12" pos:end="182:59"><literal type="string" pos:start="182:12" pos:end="182:59">"Starting EST Server path segment unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="184:5" pos:end="188:5"><if pos:start="184:5" pos:end="188:5">if <condition pos:start="184:8" pos:end="184:30">(<expr pos:start="184:9" pos:end="184:29"><operator pos:start="184:9" pos:end="184:9">!</operator><name pos:start="184:10" pos:end="184:29">path_segment_support</name></expr>)</condition> <block pos:start="184:32" pos:end="188:5">{<block_content pos:start="185:9" pos:end="187:17">
        <expr_stmt pos:start="185:9" pos:end="186:110"><expr pos:start="185:9" pos:end="186:109"><call pos:start="185:9" pos:end="186:109"><name pos:start="185:9" pos:end="185:14">printf</name><argument_list pos:start="185:15" pos:end="186:109">(
            <argument pos:start="186:13" pos:end="186:108"><expr pos:start="186:13" pos:end="186:108"><literal type="string" pos:start="186:13" pos:end="186:108">"URI Path Segment is not supported in this build of EST.  Rebuild using --with-uriparser-dir \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="187:9" pos:end="187:17">return <expr pos:start="187:16" pos:end="187:16"><literal type="number" pos:start="187:16" pos:end="187:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="190:5" pos:end="192:7">/*
     * gen the keypair to be used for EST Client testing
     */</comment>
    <expr_stmt pos:start="193:5" pos:end="195:26"><expr pos:start="193:5" pos:end="195:25"><call pos:start="193:5" pos:end="195:25"><name pos:start="193:5" pos:end="193:12">snprintf</name><argument_list pos:start="193:13" pos:end="195:25">(<argument pos:start="193:14" pos:end="193:16"><expr pos:start="193:14" pos:end="193:16"><name pos:start="193:14" pos:end="193:16">cmd</name></expr></argument>, <argument pos:start="193:19" pos:end="193:36"><expr pos:start="193:19" pos:end="193:36"><name pos:start="193:19" pos:end="193:36">EST_UT_MAX_CMD_LEN</name></expr></argument>,
        <argument pos:start="194:9" pos:end="194:58"><expr pos:start="194:9" pos:end="194:58"><literal type="string" pos:start="194:9" pos:end="194:58">"openssl ecparam -name prime256v1 -genkey -out %s"</literal></expr></argument>,
        <argument pos:start="195:9" pos:end="195:24"><expr pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:24">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="196:5" pos:end="196:24"><expr pos:start="196:5" pos:end="196:23"><call pos:start="196:5" pos:end="196:23"><name pos:start="196:5" pos:end="196:10">printf</name><argument_list pos:start="196:11" pos:end="196:23">(<argument pos:start="196:12" pos:end="196:17"><expr pos:start="196:12" pos:end="196:17"><literal type="string" pos:start="196:12" pos:end="196:17">"%s\n"</literal></expr></argument>, <argument pos:start="196:20" pos:end="196:22"><expr pos:start="196:20" pos:end="196:22"><name pos:start="196:20" pos:end="196:22">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="198:5" pos:end="198:21"><expr pos:start="198:5" pos:end="198:20"><name pos:start="198:5" pos:end="198:6">rv</name> <operator pos:start="198:8" pos:end="198:8">=</operator> <call pos:start="198:10" pos:end="198:20"><name pos:start="198:10" pos:end="198:15">system</name><argument_list pos:start="198:16" pos:end="198:20">(<argument pos:start="198:17" pos:end="198:19"><expr pos:start="198:17" pos:end="198:19"><name pos:start="198:17" pos:end="198:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="200:5" pos:end="202:7">/*
     * start the server for the tests that need to talk to a server
     */</comment>
    <expr_stmt pos:start="203:5" pos:end="203:19"><expr pos:start="203:5" pos:end="203:18"><call pos:start="203:5" pos:end="203:18"><name pos:start="203:5" pos:end="203:16">us3512_clean</name><argument_list pos:start="203:17" pos:end="203:18">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="204:5" pos:end="206:7">/*
     * Start an instance of the EST server
     */</comment>
    <expr_stmt pos:start="207:5" pos:end="207:35"><expr pos:start="207:5" pos:end="207:34"><name pos:start="207:5" pos:end="207:6">rv</name> <operator pos:start="207:8" pos:end="207:8">=</operator> <call pos:start="207:10" pos:end="207:34"><name pos:start="207:10" pos:end="207:28">us3512_start_server</name><argument_list pos:start="207:29" pos:end="207:34">(<argument pos:start="207:30" pos:end="207:30"><expr pos:start="207:30" pos:end="207:30"><literal type="number" pos:start="207:30" pos:end="207:30">0</literal></expr></argument>, <argument pos:start="207:33" pos:end="207:33"><expr pos:start="207:33" pos:end="207:33"><literal type="number" pos:start="207:33" pos:end="207:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="208:5" pos:end="208:13"><expr pos:start="208:5" pos:end="208:12"><call pos:start="208:5" pos:end="208:12"><name pos:start="208:5" pos:end="208:9">SLEEP</name><argument_list pos:start="208:10" pos:end="208:12">(<argument pos:start="208:11" pos:end="208:11"><expr pos:start="208:11" pos:end="208:11"><literal type="number" pos:start="208:11" pos:end="208:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="210:5" pos:end="210:14">return <expr pos:start="210:12" pos:end="210:13"><name pos:start="210:12" pos:end="210:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="213:1" pos:end="217:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="218:1" pos:end="224:1"><type pos:start="218:1" pos:end="218:10"><specifier pos:start="218:1" pos:end="218:6">static</specifier> <name pos:start="218:8" pos:end="218:10">int</name></type> <name pos:start="218:12" pos:end="218:31">us3512_destroy_suite</name> <parameter_list pos:start="218:33" pos:end="218:38">(<parameter pos:start="218:34" pos:end="218:37"><decl pos:start="218:34" pos:end="218:37"><type pos:start="218:34" pos:end="218:37"><name pos:start="218:34" pos:end="218:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="219:1" pos:end="224:1">{<block_content pos:start="221:5" pos:end="223:13">

    <expr_stmt pos:start="221:5" pos:end="221:14"><expr pos:start="221:5" pos:end="221:13"><call pos:start="221:5" pos:end="221:13"><name pos:start="221:5" pos:end="221:11">st_stop</name><argument_list pos:start="221:12" pos:end="221:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="222:5" pos:end="222:20"><expr pos:start="222:5" pos:end="222:19"><call pos:start="222:5" pos:end="222:19"><name pos:start="222:5" pos:end="222:17">st_proxy_stop</name><argument_list pos:start="222:18" pos:end="222:19">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="223:5" pos:end="223:13">return <expr pos:start="223:12" pos:end="223:12"><literal type="number" pos:start="223:12" pos:end="223:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="226:1" pos:end="228:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="229:1" pos:end="259:1"><type pos:start="229:1" pos:end="229:10"><specifier pos:start="229:1" pos:end="229:6">static</specifier> <name pos:start="229:8" pos:end="229:10">int</name></type> <name pos:start="229:12" pos:end="229:36">client_manual_cert_verify</name> <parameter_list pos:start="229:38" pos:end="229:77">(<parameter pos:start="229:39" pos:end="229:52"><decl pos:start="229:39" pos:end="229:52"><type pos:start="229:39" pos:end="229:52"><name pos:start="229:39" pos:end="229:42">X509</name> <modifier pos:start="229:44" pos:end="229:44">*</modifier></type><name pos:start="229:45" pos:end="229:52">cur_cert</name></decl></parameter>, <parameter pos:start="229:55" pos:end="229:76"><decl pos:start="229:55" pos:end="229:76"><type pos:start="229:55" pos:end="229:76"><name pos:start="229:55" pos:end="229:57">int</name></type> <name pos:start="229:59" pos:end="229:76">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="230:1" pos:end="259:1">{<block_content pos:start="231:5" pos:end="258:19">
    <decl_stmt pos:start="231:5" pos:end="231:18"><decl pos:start="231:5" pos:end="231:17"><type pos:start="231:5" pos:end="231:9"><name pos:start="231:5" pos:end="231:7">BIO</name> <modifier pos:start="231:9" pos:end="231:9">*</modifier></type> <name pos:start="231:11" pos:end="231:17">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="232:5" pos:end="232:46"><expr pos:start="232:5" pos:end="232:45"><name pos:start="232:5" pos:end="232:11">bio_err</name> <operator pos:start="232:13" pos:end="232:13">=</operator> <call pos:start="232:15" pos:end="232:45"><name pos:start="232:15" pos:end="232:24">BIO_new_fp</name><argument_list pos:start="232:25" pos:end="232:45">(<argument pos:start="232:26" pos:end="232:31"><expr pos:start="232:26" pos:end="232:31"><name pos:start="232:26" pos:end="232:31">stderr</name></expr></argument>, <argument pos:start="232:34" pos:end="232:44"><expr pos:start="232:34" pos:end="232:44"><name pos:start="232:34" pos:end="232:44">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="233:5" pos:end="233:20"><decl pos:start="233:5" pos:end="233:19"><type pos:start="233:5" pos:end="233:7"><name pos:start="233:5" pos:end="233:7">int</name></type> <name pos:start="233:9" pos:end="233:15">approve</name> <init pos:start="233:17" pos:end="233:19">= <expr pos:start="233:19" pos:end="233:19"><literal type="number" pos:start="233:19" pos:end="233:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="235:5" pos:end="237:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="238:5" pos:end="241:59"><expr pos:start="238:5" pos:end="241:58"><call pos:start="238:5" pos:end="241:58"><name pos:start="238:5" pos:end="238:10">printf</name><argument_list pos:start="238:11" pos:end="241:58">(
        <argument pos:start="239:9" pos:end="239:114"><expr pos:start="239:9" pos:end="239:114"><literal type="string" pos:start="239:9" pos:end="239:114">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
        <argument pos:start="240:9" pos:end="240:20"><expr pos:start="240:9" pos:end="240:20"><name pos:start="240:9" pos:end="240:20">__FUNCTION__</name></expr></argument>, <argument pos:start="240:23" pos:end="240:40"><expr pos:start="240:23" pos:end="240:40"><name pos:start="240:23" pos:end="240:40">openssl_cert_error</name></expr></argument>,
        <argument pos:start="241:9" pos:end="241:57"><expr pos:start="241:9" pos:end="241:57"><call pos:start="241:9" pos:end="241:57"><name pos:start="241:9" pos:end="241:37">X509_verify_cert_error_string</name><argument_list pos:start="241:38" pos:end="241:57">(<argument pos:start="241:39" pos:end="241:56"><expr pos:start="241:39" pos:end="241:56"><name pos:start="241:39" pos:end="241:56">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:30"><expr pos:start="243:5" pos:end="243:29"><call pos:start="243:5" pos:end="243:29"><name pos:start="243:5" pos:end="243:10">printf</name><argument_list pos:start="243:11" pos:end="243:29">(<argument pos:start="243:12" pos:end="243:28"><expr pos:start="243:12" pos:end="243:28"><literal type="string" pos:start="243:12" pos:end="243:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="244:5" pos:end="244:36"><expr pos:start="244:5" pos:end="244:35"><call pos:start="244:5" pos:end="244:35"><name pos:start="244:5" pos:end="244:17">X509_print_fp</name><argument_list pos:start="244:18" pos:end="244:35">(<argument pos:start="244:19" pos:end="244:24"><expr pos:start="244:19" pos:end="244:24"><name pos:start="244:19" pos:end="244:24">stdout</name></expr></argument>, <argument pos:start="244:27" pos:end="244:34"><expr pos:start="244:27" pos:end="244:34"><name pos:start="244:27" pos:end="244:34">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="245:5" pos:end="249:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="250:5" pos:end="250:74"><expr pos:start="250:5" pos:end="250:73"><call pos:start="250:5" pos:end="250:73"><name pos:start="250:5" pos:end="250:24">X509_signature_print</name><argument_list pos:start="250:25" pos:end="250:73">(<argument pos:start="250:26" pos:end="250:32"><expr pos:start="250:26" pos:end="250:32"><name pos:start="250:26" pos:end="250:32">bio_err</name></expr></argument>, <argument pos:start="250:35" pos:end="250:51"><expr pos:start="250:35" pos:end="250:51"><name pos:start="250:35" pos:end="250:51"><name pos:start="250:35" pos:end="250:42">cur_cert</name><operator pos:start="250:43" pos:end="250:44">-&gt;</operator><name pos:start="250:45" pos:end="250:51">sig_alg</name></name></expr></argument>, <argument pos:start="250:54" pos:end="250:72"><expr pos:start="250:54" pos:end="250:72"><name pos:start="250:54" pos:end="250:72"><name pos:start="250:54" pos:end="250:61">cur_cert</name><operator pos:start="250:62" pos:end="250:63">-&gt;</operator><name pos:start="250:64" pos:end="250:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="252:5" pos:end="254:5"><if pos:start="252:5" pos:end="254:5">if <condition pos:start="252:8" pos:end="252:59">(<expr pos:start="252:9" pos:end="252:58"><name pos:start="252:9" pos:end="252:26">openssl_cert_error</name> <operator pos:start="252:28" pos:end="252:29">==</operator> <name pos:start="252:31" pos:end="252:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="252:61" pos:end="254:5">{<block_content pos:start="253:9" pos:end="253:20">
        <expr_stmt pos:start="253:9" pos:end="253:20"><expr pos:start="253:9" pos:end="253:19"><name pos:start="253:9" pos:end="253:15">approve</name> <operator pos:start="253:17" pos:end="253:17">=</operator> <literal type="number" pos:start="253:19" pos:end="253:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="256:5" pos:end="256:22"><expr pos:start="256:5" pos:end="256:21"><call pos:start="256:5" pos:end="256:21"><name pos:start="256:5" pos:end="256:12">BIO_free</name><argument_list pos:start="256:13" pos:end="256:21">(<argument pos:start="256:14" pos:end="256:20"><expr pos:start="256:14" pos:end="256:20"><name pos:start="256:14" pos:end="256:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="258:5" pos:end="258:19">return <expr pos:start="258:12" pos:end="258:18"><name pos:start="258:12" pos:end="258:18">approve</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="261:1" pos:end="267:3">/*
 * Sanity check of the server side path segment processing.
 * - simple enroll
 * - direct to server
 * - with path segment
 * Outcome: pass
 */</comment>
<function pos:start="268:1" pos:end="284:1"><type pos:start="268:1" pos:end="268:11"><specifier pos:start="268:1" pos:end="268:6">static</specifier> <name pos:start="268:8" pos:end="268:11">void</name></type> <name pos:start="268:13" pos:end="268:24">us3512_test1</name> <parameter_list pos:start="268:26" pos:end="268:31">(<parameter pos:start="268:27" pos:end="268:30"><decl pos:start="268:27" pos:end="268:30"><type pos:start="268:27" pos:end="268:30"><name pos:start="268:27" pos:end="268:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="269:1" pos:end="284:1">{<block_content pos:start="270:5" pos:end="283:25">
    <decl_stmt pos:start="270:5" pos:end="270:12"><decl pos:start="270:5" pos:end="270:11"><type pos:start="270:5" pos:end="270:8"><name pos:start="270:5" pos:end="270:8">long</name></type> <name pos:start="270:10" pos:end="270:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="272:5" pos:end="273:5"><expr pos:start="272:5" pos:end="272:15"><name pos:start="272:5" pos:end="272:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="277:74"><expr pos:start="275:5" pos:end="277:73"><name pos:start="275:5" pos:end="275:6">rv</name> <operator pos:start="275:8" pos:end="275:8">=</operator> <call pos:start="275:10" pos:end="277:73"><name pos:start="275:10" pos:end="275:23">curl_http_post</name><argument_list pos:start="275:24" pos:end="277:73">(<argument pos:start="275:25" pos:end="275:54"><expr pos:start="275:25" pos:end="275:54"><name pos:start="275:25" pos:end="275:54">US3512_ENROLL_URL_BA_NOSEGMENT</name></expr></argument>, <argument pos:start="275:57" pos:end="275:72"><expr pos:start="275:57" pos:end="275:72"><name pos:start="275:57" pos:end="275:72">US3512_PKCS10_CT</name></expr></argument>,
    <argument pos:start="276:5" pos:end="276:25"><expr pos:start="276:5" pos:end="276:25"><name pos:start="276:5" pos:end="276:25">US3512_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="277:5" pos:end="277:22"><expr pos:start="277:5" pos:end="277:22"><name pos:start="277:5" pos:end="277:22">US3512_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="277:25" pos:end="277:38"><expr pos:start="277:25" pos:end="277:38"><name pos:start="277:25" pos:end="277:38">US3512_CACERTS</name></expr></argument>, <argument pos:start="277:41" pos:end="277:54"><expr pos:start="277:41" pos:end="277:54"><name pos:start="277:41" pos:end="277:54">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="277:57" pos:end="277:60"><expr pos:start="277:57" pos:end="277:60"><name pos:start="277:57" pos:end="277:60">NULL</name></expr></argument>, <argument pos:start="277:63" pos:end="277:66"><expr pos:start="277:63" pos:end="277:66"><name pos:start="277:63" pos:end="277:66">NULL</name></expr></argument>, <argument pos:start="277:69" pos:end="277:72"><expr pos:start="277:69" pos:end="277:72"><name pos:start="277:69" pos:end="277:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="279:5" pos:end="282:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="283:5" pos:end="283:25"><expr pos:start="283:5" pos:end="283:24"><call pos:start="283:5" pos:end="283:24"><name pos:start="283:5" pos:end="283:13">CU_ASSERT</name><argument_list pos:start="283:14" pos:end="283:24">(<argument pos:start="283:15" pos:end="283:23"><expr pos:start="283:15" pos:end="283:23"><name pos:start="283:15" pos:end="283:16">rv</name> <operator pos:start="283:18" pos:end="283:19">==</operator> <literal type="number" pos:start="283:21" pos:end="283:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="286:1" pos:end="312:1"><type pos:start="286:1" pos:end="286:17"><specifier pos:start="286:1" pos:end="286:6">static</specifier> <name pos:start="286:8" pos:end="286:15">EVP_PKEY</name> <modifier pos:start="286:17" pos:end="286:17">*</modifier></type> <name pos:start="286:19" pos:end="286:38">generate_private_key</name> <parameter_list pos:start="286:40" pos:end="286:45">(<parameter pos:start="286:41" pos:end="286:44"><decl pos:start="286:41" pos:end="286:44"><type pos:start="286:41" pos:end="286:44"><name pos:start="286:41" pos:end="286:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="287:1" pos:end="312:1">{<block_content pos:start="288:5" pos:end="311:18">
    <decl_stmt pos:start="288:5" pos:end="288:25"><decl pos:start="288:5" pos:end="288:24"><type pos:start="288:5" pos:end="288:9"><name pos:start="288:5" pos:end="288:7">RSA</name> <modifier pos:start="288:9" pos:end="288:9">*</modifier></type><name pos:start="288:10" pos:end="288:12">rsa</name> <init pos:start="288:14" pos:end="288:24">= <expr pos:start="288:16" pos:end="288:24"><call pos:start="288:16" pos:end="288:24"><name pos:start="288:16" pos:end="288:22">RSA_new</name><argument_list pos:start="288:23" pos:end="288:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="289:5" pos:end="289:26"><decl pos:start="289:5" pos:end="289:25"><type pos:start="289:5" pos:end="289:12"><name pos:start="289:5" pos:end="289:10">BIGNUM</name> <modifier pos:start="289:12" pos:end="289:12">*</modifier></type><name pos:start="289:13" pos:end="289:14">bn</name> <init pos:start="289:16" pos:end="289:25">= <expr pos:start="289:18" pos:end="289:25"><call pos:start="289:18" pos:end="289:25"><name pos:start="289:18" pos:end="289:23">BN_new</name><argument_list pos:start="289:24" pos:end="289:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="290:5" pos:end="290:19"><decl pos:start="290:5" pos:end="290:18"><type pos:start="290:5" pos:end="290:14"><name pos:start="290:5" pos:end="290:12">EVP_PKEY</name> <modifier pos:start="290:14" pos:end="290:14">*</modifier></type><name pos:start="290:15" pos:end="290:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="292:5" pos:end="294:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="295:5" pos:end="295:29"><expr pos:start="295:5" pos:end="295:28"><call pos:start="295:5" pos:end="295:28"><name pos:start="295:5" pos:end="295:15">BN_set_word</name><argument_list pos:start="295:16" pos:end="295:28">(<argument pos:start="295:17" pos:end="295:18"><expr pos:start="295:17" pos:end="295:18"><name pos:start="295:17" pos:end="295:18">bn</name></expr></argument>, <argument pos:start="295:21" pos:end="295:27"><expr pos:start="295:21" pos:end="295:27"><literal type="number" pos:start="295:21" pos:end="295:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="296:5" pos:end="296:45"><expr pos:start="296:5" pos:end="296:44"><call pos:start="296:5" pos:end="296:44"><name pos:start="296:5" pos:end="296:23">RSA_generate_key_ex</name><argument_list pos:start="296:24" pos:end="296:44">(<argument pos:start="296:25" pos:end="296:27"><expr pos:start="296:25" pos:end="296:27"><name pos:start="296:25" pos:end="296:27">rsa</name></expr></argument>, <argument pos:start="296:30" pos:end="296:33"><expr pos:start="296:30" pos:end="296:33"><literal type="number" pos:start="296:30" pos:end="296:33">1024</literal></expr></argument>, <argument pos:start="296:36" pos:end="296:37"><expr pos:start="296:36" pos:end="296:37"><name pos:start="296:36" pos:end="296:37">bn</name></expr></argument>, <argument pos:start="296:40" pos:end="296:43"><expr pos:start="296:40" pos:end="296:43"><name pos:start="296:40" pos:end="296:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="298:5" pos:end="298:26"><expr pos:start="298:5" pos:end="298:25"><name pos:start="298:5" pos:end="298:8">pkey</name> <operator pos:start="298:10" pos:end="298:10">=</operator> <call pos:start="298:12" pos:end="298:25"><name pos:start="298:12" pos:end="298:23">EVP_PKEY_new</name><argument_list pos:start="298:24" pos:end="298:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="299:5" pos:end="302:5"><if pos:start="299:5" pos:end="302:5">if <condition pos:start="299:8" pos:end="299:21">(<expr pos:start="299:9" pos:end="299:20"><name pos:start="299:9" pos:end="299:12">pkey</name> <operator pos:start="299:14" pos:end="299:15">==</operator> <name pos:start="299:17" pos:end="299:20">NULL</name></expr>)</condition> <block pos:start="299:23" pos:end="302:5">{<block_content pos:start="300:9" pos:end="301:20">
        <expr_stmt pos:start="300:9" pos:end="300:71"><expr pos:start="300:9" pos:end="300:70"><call pos:start="300:9" pos:end="300:70"><name pos:start="300:9" pos:end="300:14">printf</name><argument_list pos:start="300:15" pos:end="300:70">(<argument pos:start="300:16" pos:end="300:69"><expr pos:start="300:16" pos:end="300:69"><literal type="string" pos:start="300:16" pos:end="300:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="301:9" pos:end="301:20">return <expr pos:start="301:16" pos:end="301:19"><name pos:start="301:16" pos:end="301:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="303:5" pos:end="306:5"><if pos:start="303:5" pos:end="306:5">if <condition pos:start="303:8" pos:end="303:38">(<expr pos:start="303:9" pos:end="303:37"><operator pos:start="303:9" pos:end="303:9">!</operator><call pos:start="303:10" pos:end="303:37"><name pos:start="303:10" pos:end="303:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="303:27" pos:end="303:37">(<argument pos:start="303:28" pos:end="303:31"><expr pos:start="303:28" pos:end="303:31"><name pos:start="303:28" pos:end="303:31">pkey</name></expr></argument>, <argument pos:start="303:34" pos:end="303:36"><expr pos:start="303:34" pos:end="303:36"><name pos:start="303:34" pos:end="303:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:40" pos:end="306:5">{<block_content pos:start="304:9" pos:end="305:20">
        <expr_stmt pos:start="304:9" pos:end="304:69"><expr pos:start="304:9" pos:end="304:68"><call pos:start="304:9" pos:end="304:68"><name pos:start="304:9" pos:end="304:14">printf</name><argument_list pos:start="304:15" pos:end="304:68">(<argument pos:start="304:16" pos:end="304:67"><expr pos:start="304:16" pos:end="304:67"><literal type="string" pos:start="304:16" pos:end="304:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="305:9" pos:end="305:20">return <expr pos:start="305:16" pos:end="305:19"><name pos:start="305:16" pos:end="305:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="308:5" pos:end="308:18"><expr pos:start="308:5" pos:end="308:17"><call pos:start="308:5" pos:end="308:17"><name pos:start="308:5" pos:end="308:12">RSA_free</name><argument_list pos:start="308:13" pos:end="308:17">(<argument pos:start="308:14" pos:end="308:16"><expr pos:start="308:14" pos:end="308:16"><name pos:start="308:14" pos:end="308:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="309:5" pos:end="309:16"><expr pos:start="309:5" pos:end="309:15"><call pos:start="309:5" pos:end="309:15"><name pos:start="309:5" pos:end="309:11">BN_free</name><argument_list pos:start="309:12" pos:end="309:15">(<argument pos:start="309:13" pos:end="309:14"><expr pos:start="309:13" pos:end="309:14"><name pos:start="309:13" pos:end="309:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="311:5" pos:end="311:18">return <expr pos:start="311:12" pos:end="311:17"><operator pos:start="311:12" pos:end="311:12">(</operator><name pos:start="311:13" pos:end="311:16">pkey</name><operator pos:start="311:17" pos:end="311:17">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="314:1" pos:end="318:3">/*
 * This function performs a basic simple enroll using
 * a UID/PWD to identify the client to the server.  This
 * is used for a variety of test cases in this module.
 */</comment>
<function pos:start="319:1" pos:end="392:1"><type pos:start="319:1" pos:end="319:11"><specifier pos:start="319:1" pos:end="319:6">static</specifier> <name pos:start="319:8" pos:end="319:11">void</name></type> <name pos:start="319:13" pos:end="319:32">us3512_simple_enroll</name> <parameter_list pos:start="319:34" pos:end="321:53">(<parameter pos:start="319:35" pos:end="319:42"><decl pos:start="319:35" pos:end="319:42"><type pos:start="319:35" pos:end="319:42"><name pos:start="319:35" pos:end="319:38">char</name> <modifier pos:start="319:40" pos:end="319:40">*</modifier></type><name pos:start="319:41" pos:end="319:42">cn</name></decl></parameter>, <parameter pos:start="319:45" pos:end="319:56"><decl pos:start="319:45" pos:end="319:56"><type pos:start="319:45" pos:end="319:56"><name pos:start="319:45" pos:end="319:48">char</name> <modifier pos:start="319:50" pos:end="319:50">*</modifier></type><name pos:start="319:51" pos:end="319:56">server</name></decl></parameter>,
                                  <parameter pos:start="320:35" pos:end="320:62"><decl pos:start="320:35" pos:end="320:62"><type pos:start="320:35" pos:end="320:62"><name pos:start="320:35" pos:end="320:43">EST_ERROR</name></type> <name pos:start="320:45" pos:end="320:62">expected_enroll_rv</name></decl></parameter>,
                                  <parameter pos:start="321:35" pos:end="321:52"><decl pos:start="321:35" pos:end="321:52"><type pos:start="321:35" pos:end="321:52"><name pos:start="321:35" pos:end="321:38">char</name> <modifier pos:start="321:40" pos:end="321:40">*</modifier></type><name pos:start="321:41" pos:end="321:52">path_segment</name></decl></parameter>)</parameter_list>
<block pos:start="322:1" pos:end="392:1">{<block_content pos:start="323:5" pos:end="391:22">
    <decl_stmt pos:start="323:5" pos:end="323:18"><decl pos:start="323:5" pos:end="323:17"><type pos:start="323:5" pos:end="323:13"><name pos:start="323:5" pos:end="323:11">EST_CTX</name> <modifier pos:start="323:13" pos:end="323:13">*</modifier></type><name pos:start="323:14" pos:end="323:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="324:5" pos:end="324:18"><decl pos:start="324:5" pos:end="324:17"><type pos:start="324:5" pos:end="324:14"><name pos:start="324:5" pos:end="324:12">EVP_PKEY</name> <modifier pos:start="324:14" pos:end="324:14">*</modifier></type><name pos:start="324:15" pos:end="324:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="325:5" pos:end="325:11"><decl pos:start="325:5" pos:end="325:10"><type pos:start="325:5" pos:end="325:7"><name pos:start="325:5" pos:end="325:7">int</name></type> <name pos:start="325:9" pos:end="325:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="326:5" pos:end="326:22"><decl pos:start="326:5" pos:end="326:21"><type pos:start="326:5" pos:end="326:7"><name pos:start="326:5" pos:end="326:7">int</name></type> <name pos:start="326:9" pos:end="326:17">pkcs7_len</name> <init pos:start="326:19" pos:end="326:21">= <expr pos:start="326:21" pos:end="326:21"><literal type="number" pos:start="326:21" pos:end="326:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="327:5" pos:end="327:35"><decl pos:start="327:5" pos:end="327:34"><type pos:start="327:5" pos:end="327:19"><name pos:start="327:5" pos:end="327:12">unsigned</name> <name pos:start="327:14" pos:end="327:17">char</name> <modifier pos:start="327:19" pos:end="327:19">*</modifier></type><name pos:start="327:20" pos:end="327:27">new_cert</name> <init pos:start="327:29" pos:end="327:34">= <expr pos:start="327:31" pos:end="327:34"><name pos:start="327:31" pos:end="327:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="328:5" pos:end="328:36"><decl pos:start="328:5" pos:end="328:35"><type pos:start="328:5" pos:end="328:19"><name pos:start="328:5" pos:end="328:12">unsigned</name> <name pos:start="328:14" pos:end="328:17">char</name> <modifier pos:start="328:19" pos:end="328:19">*</modifier></type><name pos:start="328:20" pos:end="328:28">attr_data</name> <init pos:start="328:30" pos:end="328:35">= <expr pos:start="328:32" pos:end="328:35"><name pos:start="328:32" pos:end="328:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="329:5" pos:end="329:17"><decl pos:start="329:5" pos:end="329:16"><type pos:start="329:5" pos:end="329:7"><name pos:start="329:5" pos:end="329:7">int</name></type> <name pos:start="329:9" pos:end="329:16">attr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="330:5" pos:end="330:34"><decl pos:start="330:5" pos:end="330:33"><type pos:start="330:5" pos:end="330:19"><name pos:start="330:5" pos:end="330:12">unsigned</name> <name pos:start="330:14" pos:end="330:17">char</name> <modifier pos:start="330:19" pos:end="330:19">*</modifier></type><name pos:start="330:20" pos:end="330:26">cacerts</name> <init pos:start="330:28" pos:end="330:33">= <expr pos:start="330:30" pos:end="330:33"><name pos:start="330:30" pos:end="330:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="331:5" pos:end="331:24"><decl pos:start="331:5" pos:end="331:23"><type pos:start="331:5" pos:end="331:7"><name pos:start="331:5" pos:end="331:7">int</name></type> <name pos:start="331:9" pos:end="331:19">cacerts_len</name> <init pos:start="331:21" pos:end="331:23">= <expr pos:start="331:23" pos:end="331:23"><literal type="number" pos:start="331:23" pos:end="331:23">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="333:5" pos:end="335:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="336:5" pos:end="336:63"><expr pos:start="336:5" pos:end="336:62"><name pos:start="336:5" pos:end="336:15">cacerts_len</name> <operator pos:start="336:17" pos:end="336:17">=</operator> <call pos:start="336:19" pos:end="336:62"><name pos:start="336:19" pos:end="336:34">read_binary_file</name><argument_list pos:start="336:35" pos:end="336:62">(<argument pos:start="336:36" pos:end="336:51"><expr pos:start="336:36" pos:end="336:51"><name pos:start="336:36" pos:end="336:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="336:54" pos:end="336:61"><expr pos:start="336:54" pos:end="336:61"><operator pos:start="336:54" pos:end="336:54">&amp;</operator><name pos:start="336:55" pos:end="336:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="337:5" pos:end="337:31"><expr pos:start="337:5" pos:end="337:30"><call pos:start="337:5" pos:end="337:30"><name pos:start="337:5" pos:end="337:13">CU_ASSERT</name><argument_list pos:start="337:14" pos:end="337:30">(<argument pos:start="337:15" pos:end="337:29"><expr pos:start="337:15" pos:end="337:29"><name pos:start="337:15" pos:end="337:25">cacerts_len</name> <operator pos:start="337:27" pos:end="337:27">&gt;</operator> <literal type="number" pos:start="337:29" pos:end="337:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="339:5" pos:end="341:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="342:5" pos:end="343:35"><expr pos:start="342:5" pos:end="343:34"><name pos:start="342:5" pos:end="342:8">ectx</name> <operator pos:start="342:10" pos:end="342:10">=</operator> <call pos:start="342:12" pos:end="343:34"><name pos:start="342:12" pos:end="342:26">est_client_init</name><argument_list pos:start="342:27" pos:end="343:34">(<argument pos:start="342:28" pos:end="342:34"><expr pos:start="342:28" pos:end="342:34"><name pos:start="342:28" pos:end="342:34">cacerts</name></expr></argument>, <argument pos:start="342:37" pos:end="342:47"><expr pos:start="342:37" pos:end="342:47"><name pos:start="342:37" pos:end="342:47">cacerts_len</name></expr></argument>, <argument pos:start="342:50" pos:end="342:68"><expr pos:start="342:50" pos:end="342:68"><name pos:start="342:50" pos:end="342:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="343:9" pos:end="343:33"><expr pos:start="343:9" pos:end="343:33"><name pos:start="343:9" pos:end="343:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="344:5" pos:end="344:28"><expr pos:start="344:5" pos:end="344:27"><call pos:start="344:5" pos:end="344:27"><name pos:start="344:5" pos:end="344:13">CU_ASSERT</name><argument_list pos:start="344:14" pos:end="344:27">(<argument pos:start="344:15" pos:end="344:26"><expr pos:start="344:15" pos:end="344:26"><name pos:start="344:15" pos:end="344:18">ectx</name> <operator pos:start="344:20" pos:end="344:21">!=</operator> <name pos:start="344:23" pos:end="344:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="346:5" pos:end="348:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="349:5" pos:end="349:71"><expr pos:start="349:5" pos:end="349:70"><name pos:start="349:5" pos:end="349:6">rv</name> <operator pos:start="349:8" pos:end="349:8">=</operator> <call pos:start="349:10" pos:end="349:70"><name pos:start="349:10" pos:end="349:28">est_client_set_auth</name><argument_list pos:start="349:29" pos:end="349:70">(<argument pos:start="349:30" pos:end="349:33"><expr pos:start="349:30" pos:end="349:33"><name pos:start="349:30" pos:end="349:33">ectx</name></expr></argument>, <argument pos:start="349:36" pos:end="349:45"><expr pos:start="349:36" pos:end="349:45"><name pos:start="349:36" pos:end="349:45">US3512_UID</name></expr></argument>, <argument pos:start="349:48" pos:end="349:57"><expr pos:start="349:48" pos:end="349:57"><name pos:start="349:48" pos:end="349:57">US3512_PWD</name></expr></argument>, <argument pos:start="349:60" pos:end="349:63"><expr pos:start="349:60" pos:end="349:63"><name pos:start="349:60" pos:end="349:63">NULL</name></expr></argument>, <argument pos:start="349:66" pos:end="349:69"><expr pos:start="349:66" pos:end="349:69"><name pos:start="349:66" pos:end="349:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="350:5" pos:end="350:34"><expr pos:start="350:5" pos:end="350:33"><call pos:start="350:5" pos:end="350:33"><name pos:start="350:5" pos:end="350:13">CU_ASSERT</name><argument_list pos:start="350:14" pos:end="350:33">(<argument pos:start="350:15" pos:end="350:32"><expr pos:start="350:15" pos:end="350:32"><name pos:start="350:15" pos:end="350:16">rv</name> <operator pos:start="350:18" pos:end="350:19">==</operator> <name pos:start="350:21" pos:end="350:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="352:5" pos:end="354:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="355:5" pos:end="355:74"><expr pos:start="355:5" pos:end="355:73"><call pos:start="355:5" pos:end="355:73"><name pos:start="355:5" pos:end="355:25">est_client_set_server</name><argument_list pos:start="355:26" pos:end="355:73">(<argument pos:start="355:27" pos:end="355:30"><expr pos:start="355:27" pos:end="355:30"><name pos:start="355:27" pos:end="355:30">ectx</name></expr></argument>, <argument pos:start="355:33" pos:end="355:38"><expr pos:start="355:33" pos:end="355:38"><name pos:start="355:33" pos:end="355:38">server</name></expr></argument>, <argument pos:start="355:41" pos:end="355:58"><expr pos:start="355:41" pos:end="355:58"><name pos:start="355:41" pos:end="355:58">US3512_SERVER_PORT</name></expr></argument>, <argument pos:start="355:61" pos:end="355:72"><expr pos:start="355:61" pos:end="355:72"><name pos:start="355:61" pos:end="355:72">path_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="357:5" pos:end="359:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="360:5" pos:end="360:33"><expr pos:start="360:5" pos:end="360:32"><name pos:start="360:5" pos:end="360:7">key</name> <operator pos:start="360:9" pos:end="360:9">=</operator> <call pos:start="360:11" pos:end="360:32"><name pos:start="360:11" pos:end="360:30">generate_private_key</name><argument_list pos:start="360:31" pos:end="360:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="361:5" pos:end="361:27"><expr pos:start="361:5" pos:end="361:26"><call pos:start="361:5" pos:end="361:26"><name pos:start="361:5" pos:end="361:13">CU_ASSERT</name><argument_list pos:start="361:14" pos:end="361:26">(<argument pos:start="361:15" pos:end="361:25"><expr pos:start="361:15" pos:end="361:25"><name pos:start="361:15" pos:end="361:17">key</name> <operator pos:start="361:19" pos:end="361:20">!=</operator> <name pos:start="361:22" pos:end="361:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="363:5" pos:end="365:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="366:5" pos:end="366:62"><expr pos:start="366:5" pos:end="366:61"><name pos:start="366:5" pos:end="366:6">rv</name> <operator pos:start="366:8" pos:end="366:8">=</operator> <call pos:start="366:10" pos:end="366:61"><name pos:start="366:10" pos:end="366:32">est_client_get_csrattrs</name><argument_list pos:start="366:33" pos:end="366:61">(<argument pos:start="366:34" pos:end="366:37"><expr pos:start="366:34" pos:end="366:37"><name pos:start="366:34" pos:end="366:37">ectx</name></expr></argument>, <argument pos:start="366:40" pos:end="366:49"><expr pos:start="366:40" pos:end="366:49"><operator pos:start="366:40" pos:end="366:40">&amp;</operator><name pos:start="366:41" pos:end="366:49">attr_data</name></expr></argument>, <argument pos:start="366:52" pos:end="366:60"><expr pos:start="366:52" pos:end="366:60"><operator pos:start="366:52" pos:end="366:52">&amp;</operator><name pos:start="366:53" pos:end="366:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="367:5" pos:end="367:40"><expr pos:start="367:5" pos:end="367:39"><call pos:start="367:5" pos:end="367:39"><name pos:start="367:5" pos:end="367:13">CU_ASSERT</name><argument_list pos:start="367:14" pos:end="367:39">(<argument pos:start="367:15" pos:end="367:38"><expr pos:start="367:15" pos:end="367:38"><name pos:start="367:15" pos:end="367:16">rv</name> <operator pos:start="367:18" pos:end="367:19">==</operator> <name pos:start="367:21" pos:end="367:38">expected_enroll_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="369:5" pos:end="371:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="372:5" pos:end="372:54"><expr pos:start="372:5" pos:end="372:53"><name pos:start="372:5" pos:end="372:6">rv</name> <operator pos:start="372:8" pos:end="372:8">=</operator> <call pos:start="372:10" pos:end="372:53"><name pos:start="372:10" pos:end="372:26">est_client_enroll</name><argument_list pos:start="372:27" pos:end="372:53">(<argument pos:start="372:28" pos:end="372:31"><expr pos:start="372:28" pos:end="372:31"><name pos:start="372:28" pos:end="372:31">ectx</name></expr></argument>, <argument pos:start="372:34" pos:end="372:35"><expr pos:start="372:34" pos:end="372:35"><name pos:start="372:34" pos:end="372:35">cn</name></expr></argument>, <argument pos:start="372:38" pos:end="372:47"><expr pos:start="372:38" pos:end="372:47"><operator pos:start="372:38" pos:end="372:38">&amp;</operator><name pos:start="372:39" pos:end="372:47">pkcs7_len</name></expr></argument>, <argument pos:start="372:50" pos:end="372:52"><expr pos:start="372:50" pos:end="372:52"><name pos:start="372:50" pos:end="372:52">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="373:5" pos:end="373:40"><expr pos:start="373:5" pos:end="373:39"><call pos:start="373:5" pos:end="373:39"><name pos:start="373:5" pos:end="373:13">CU_ASSERT</name><argument_list pos:start="373:14" pos:end="373:39">(<argument pos:start="373:15" pos:end="373:38"><expr pos:start="373:15" pos:end="373:38"><name pos:start="373:15" pos:end="373:16">rv</name> <operator pos:start="373:18" pos:end="373:19">==</operator> <name pos:start="373:21" pos:end="373:38">expected_enroll_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="375:5" pos:end="377:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="378:5" pos:end="383:5"><if pos:start="378:5" pos:end="383:5">if <condition pos:start="378:8" pos:end="378:27">(<expr pos:start="378:9" pos:end="378:26"><name pos:start="378:9" pos:end="378:10">rv</name> <operator pos:start="378:12" pos:end="378:13">==</operator> <name pos:start="378:15" pos:end="378:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="378:29" pos:end="383:5">{<block_content pos:start="379:9" pos:end="382:38">
        <expr_stmt pos:start="379:9" pos:end="379:37"><expr pos:start="379:9" pos:end="379:36"><name pos:start="379:9" pos:end="379:16">new_cert</name> <operator pos:start="379:18" pos:end="379:18">=</operator> <call pos:start="379:20" pos:end="379:36"><name pos:start="379:20" pos:end="379:25">malloc</name><argument_list pos:start="379:26" pos:end="379:36">(<argument pos:start="379:27" pos:end="379:35"><expr pos:start="379:27" pos:end="379:35"><name pos:start="379:27" pos:end="379:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="380:9" pos:end="380:36"><expr pos:start="380:9" pos:end="380:35"><call pos:start="380:9" pos:end="380:35"><name pos:start="380:9" pos:end="380:17">CU_ASSERT</name><argument_list pos:start="380:18" pos:end="380:35">(<argument pos:start="380:19" pos:end="380:34"><expr pos:start="380:19" pos:end="380:34"><name pos:start="380:19" pos:end="380:26">new_cert</name> <operator pos:start="380:28" pos:end="380:29">!=</operator> <name pos:start="380:31" pos:end="380:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="381:9" pos:end="381:59"><expr pos:start="381:9" pos:end="381:58"><name pos:start="381:9" pos:end="381:10">rv</name> <operator pos:start="381:12" pos:end="381:12">=</operator> <call pos:start="381:14" pos:end="381:58"><name pos:start="381:14" pos:end="381:42">est_client_copy_enrolled_cert</name><argument_list pos:start="381:43" pos:end="381:58">(<argument pos:start="381:44" pos:end="381:47"><expr pos:start="381:44" pos:end="381:47"><name pos:start="381:44" pos:end="381:47">ectx</name></expr></argument>, <argument pos:start="381:50" pos:end="381:57"><expr pos:start="381:50" pos:end="381:57"><name pos:start="381:50" pos:end="381:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="382:9" pos:end="382:38"><expr pos:start="382:9" pos:end="382:37"><call pos:start="382:9" pos:end="382:37"><name pos:start="382:9" pos:end="382:17">CU_ASSERT</name><argument_list pos:start="382:18" pos:end="382:37">(<argument pos:start="382:19" pos:end="382:36"><expr pos:start="382:19" pos:end="382:36"><name pos:start="382:19" pos:end="382:20">rv</name> <operator pos:start="382:22" pos:end="382:23">==</operator> <name pos:start="382:25" pos:end="382:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="385:5" pos:end="387:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="388:5" pos:end="388:23"><expr pos:start="388:5" pos:end="388:22"><call pos:start="388:5" pos:end="388:22"><name pos:start="388:5" pos:end="388:17">EVP_PKEY_free</name><argument_list pos:start="388:18" pos:end="388:22">(<argument pos:start="388:19" pos:end="388:21"><expr pos:start="388:19" pos:end="388:21"><name pos:start="388:19" pos:end="388:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="389:5" pos:end="390:23"><if pos:start="389:5" pos:end="390:23">if <condition pos:start="389:8" pos:end="389:17">(<expr pos:start="389:9" pos:end="389:16"><name pos:start="389:9" pos:end="389:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="390:9" pos:end="390:23"><block_content pos:start="390:9" pos:end="390:23">
        <expr_stmt pos:start="390:9" pos:end="390:23"><expr pos:start="390:9" pos:end="390:22"><call pos:start="390:9" pos:end="390:22"><name pos:start="390:9" pos:end="390:12">free</name><argument_list pos:start="390:13" pos:end="390:22">(<argument pos:start="390:14" pos:end="390:21"><expr pos:start="390:14" pos:end="390:21"><name pos:start="390:14" pos:end="390:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="391:5" pos:end="391:22"><expr pos:start="391:5" pos:end="391:21"><call pos:start="391:5" pos:end="391:21"><name pos:start="391:5" pos:end="391:15">est_destroy</name><argument_list pos:start="391:16" pos:end="391:21">(<argument pos:start="391:17" pos:end="391:20"><expr pos:start="391:17" pos:end="391:20"><name pos:start="391:17" pos:end="391:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="394:1" pos:end="404:3">/*
 * taken from US899/test1
 * Simple enroll -  including a path segment in the uri.
 *
 * Path Segment testing
 * - This verifies the client includes a configured
 *   path segment properly and sends it.
 * - This verifies that the server correctly parses out
 *   a valid path segment and passes it up on a simple enroll.
 *
 */</comment>
<function pos:start="405:1" pos:end="419:1"><type pos:start="405:1" pos:end="405:11"><specifier pos:start="405:1" pos:end="405:6">static</specifier> <name pos:start="405:8" pos:end="405:11">void</name></type> <name pos:start="405:13" pos:end="405:24">us3512_test2</name> <parameter_list pos:start="405:26" pos:end="405:31">(<parameter pos:start="405:27" pos:end="405:30"><decl pos:start="405:27" pos:end="405:30"><type pos:start="405:27" pos:end="405:30"><name pos:start="405:27" pos:end="405:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="406:1" pos:end="419:1">{<block_content pos:start="407:5" pos:end="418:67">
    <expr_stmt pos:start="407:5" pos:end="408:5"><expr pos:start="407:5" pos:end="407:15"><name pos:start="407:5" pos:end="407:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>
    <decl_stmt pos:start="409:5" pos:end="409:40"><decl pos:start="409:5" pos:end="409:39"><type pos:start="409:5" pos:end="409:10"><name pos:start="409:5" pos:end="409:8">char</name> <modifier pos:start="409:10" pos:end="409:10">*</modifier></type><name pos:start="409:11" pos:end="409:22">path_segment</name> <init pos:start="409:24" pos:end="409:39">= <expr pos:start="409:26" pos:end="409:39"><literal type="string" pos:start="409:26" pos:end="409:39">"path_segment"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:68"><expr pos:start="411:5" pos:end="411:67"><call pos:start="411:5" pos:end="411:67"><name pos:start="411:5" pos:end="411:10">memset</name><argument_list pos:start="411:11" pos:end="411:67">(<argument pos:start="411:12" pos:end="411:33"><expr pos:start="411:12" pos:end="411:33"><name pos:start="411:12" pos:end="411:33">tst_srvr_path_seg_auth</name></expr></argument>, <argument pos:start="411:36" pos:end="411:36"><expr pos:start="411:36" pos:end="411:36"><literal type="number" pos:start="411:36" pos:end="411:36">0</literal></expr></argument>, <argument pos:start="411:39" pos:end="411:66"><expr pos:start="411:39" pos:end="411:66"><name pos:start="411:39" pos:end="411:62">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="411:64" pos:end="411:64">+</operator> <literal type="number" pos:start="411:66" pos:end="411:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="412:5" pos:end="412:70"><expr pos:start="412:5" pos:end="412:69"><call pos:start="412:5" pos:end="412:69"><name pos:start="412:5" pos:end="412:10">memset</name><argument_list pos:start="412:11" pos:end="412:69">(<argument pos:start="412:12" pos:end="412:35"><expr pos:start="412:12" pos:end="412:35"><name pos:start="412:12" pos:end="412:35">tst_srvr_path_seg_enroll</name></expr></argument>, <argument pos:start="412:38" pos:end="412:38"><expr pos:start="412:38" pos:end="412:38"><literal type="number" pos:start="412:38" pos:end="412:38">0</literal></expr></argument>, <argument pos:start="412:41" pos:end="412:68"><expr pos:start="412:41" pos:end="412:68"><name pos:start="412:41" pos:end="412:64">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="412:66" pos:end="412:66">+</operator> <literal type="number" pos:start="412:68" pos:end="412:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="414:5" pos:end="415:22"><expr pos:start="414:5" pos:end="415:21"><call pos:start="414:5" pos:end="415:21"><name pos:start="414:5" pos:end="414:24">us3512_simple_enroll</name><argument_list pos:start="414:25" pos:end="415:21">(<argument pos:start="414:26" pos:end="414:35"><expr pos:start="414:26" pos:end="414:35"><literal type="string" pos:start="414:26" pos:end="414:35">"TC3512-2"</literal></expr></argument>, <argument pos:start="414:38" pos:end="414:53"><expr pos:start="414:38" pos:end="414:53"><name pos:start="414:38" pos:end="414:53">US3512_SERVER_IP</name></expr></argument>, <argument pos:start="414:56" pos:end="414:67"><expr pos:start="414:56" pos:end="414:67"><name pos:start="414:56" pos:end="414:67">EST_ERR_NONE</name></expr></argument>,
        <argument pos:start="415:9" pos:end="415:20"><expr pos:start="415:9" pos:end="415:20"><name pos:start="415:9" pos:end="415:20">path_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:65"><expr pos:start="417:5" pos:end="417:64"><call pos:start="417:5" pos:end="417:64"><name pos:start="417:5" pos:end="417:13">CU_ASSERT</name><argument_list pos:start="417:14" pos:end="417:64">(<argument pos:start="417:15" pos:end="417:63"><expr pos:start="417:15" pos:end="417:63"><call pos:start="417:15" pos:end="417:58"><name pos:start="417:15" pos:end="417:20">strcmp</name><argument_list pos:start="417:21" pos:end="417:58">(<argument pos:start="417:22" pos:end="417:33"><expr pos:start="417:22" pos:end="417:33"><name pos:start="417:22" pos:end="417:33">path_segment</name></expr></argument>, <argument pos:start="417:36" pos:end="417:57"><expr pos:start="417:36" pos:end="417:57"><name pos:start="417:36" pos:end="417:57">tst_srvr_path_seg_auth</name></expr></argument>)</argument_list></call> <operator pos:start="417:60" pos:end="417:61">==</operator> <literal type="number" pos:start="417:63" pos:end="417:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="418:5" pos:end="418:67"><expr pos:start="418:5" pos:end="418:66"><call pos:start="418:5" pos:end="418:66"><name pos:start="418:5" pos:end="418:13">CU_ASSERT</name><argument_list pos:start="418:14" pos:end="418:66">(<argument pos:start="418:15" pos:end="418:65"><expr pos:start="418:15" pos:end="418:65"><call pos:start="418:15" pos:end="418:60"><name pos:start="418:15" pos:end="418:20">strcmp</name><argument_list pos:start="418:21" pos:end="418:60">(<argument pos:start="418:22" pos:end="418:33"><expr pos:start="418:22" pos:end="418:33"><name pos:start="418:22" pos:end="418:33">path_segment</name></expr></argument>, <argument pos:start="418:36" pos:end="418:59"><expr pos:start="418:36" pos:end="418:59"><name pos:start="418:36" pos:end="418:59">tst_srvr_path_seg_enroll</name></expr></argument>)</argument_list></call> <operator pos:start="418:62" pos:end="418:63">==</operator> <literal type="number" pos:start="418:65" pos:end="418:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="421:1" pos:end="431:3">/*
 * taken from US898/test1
 * Simple re-enroll -  including a path segment in the uri.
 *
 * Path Segment testing
 * - Verifies the client includes a configured
 *   path segment
 * - Verifies that the server correctly parses out
 *   a valid path segment and passes it up on a simple re-enroll
 *   as well as the auth callback.
 */</comment>
<function pos:start="432:1" pos:end="562:1"><type pos:start="432:1" pos:end="432:11"><specifier pos:start="432:1" pos:end="432:6">static</specifier> <name pos:start="432:8" pos:end="432:11">void</name></type> <name pos:start="432:13" pos:end="432:24">us3512_test3</name> <parameter_list pos:start="432:26" pos:end="432:31">(<parameter pos:start="432:27" pos:end="432:30"><decl pos:start="432:27" pos:end="432:30"><type pos:start="432:27" pos:end="432:30"><name pos:start="432:27" pos:end="432:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="433:1" pos:end="562:1">{<block_content pos:start="434:5" pos:end="561:22">
    <decl_stmt pos:start="434:5" pos:end="434:18"><decl pos:start="434:5" pos:end="434:17"><type pos:start="434:5" pos:end="434:13"><name pos:start="434:5" pos:end="434:11">EST_CTX</name> <modifier pos:start="434:13" pos:end="434:13">*</modifier></type><name pos:start="434:14" pos:end="434:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="435:5" pos:end="435:18"><decl pos:start="435:5" pos:end="435:17"><type pos:start="435:5" pos:end="435:14"><name pos:start="435:5" pos:end="435:12">EVP_PKEY</name> <modifier pos:start="435:14" pos:end="435:14">*</modifier></type><name pos:start="435:15" pos:end="435:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="436:5" pos:end="436:11"><decl pos:start="436:5" pos:end="436:10"><type pos:start="436:5" pos:end="436:7"><name pos:start="436:5" pos:end="436:7">int</name></type> <name pos:start="436:9" pos:end="436:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="437:5" pos:end="437:22"><decl pos:start="437:5" pos:end="437:21"><type pos:start="437:5" pos:end="437:7"><name pos:start="437:5" pos:end="437:7">int</name></type> <name pos:start="437:9" pos:end="437:17">pkcs7_len</name> <init pos:start="437:19" pos:end="437:21">= <expr pos:start="437:21" pos:end="437:21"><literal type="number" pos:start="437:21" pos:end="437:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="438:5" pos:end="438:35"><decl pos:start="438:5" pos:end="438:34"><type pos:start="438:5" pos:end="438:19"><name pos:start="438:5" pos:end="438:12">unsigned</name> <name pos:start="438:14" pos:end="438:17">char</name> <modifier pos:start="438:19" pos:end="438:19">*</modifier></type><name pos:start="438:20" pos:end="438:27">new_cert</name> <init pos:start="438:29" pos:end="438:34">= <expr pos:start="438:31" pos:end="438:34"><name pos:start="438:31" pos:end="438:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="439:5" pos:end="439:21"><decl pos:start="439:5" pos:end="439:20"><type pos:start="439:5" pos:end="439:11"><name pos:start="439:5" pos:end="439:9">PKCS7</name> <modifier pos:start="439:11" pos:end="439:11">*</modifier></type><name pos:start="439:12" pos:end="439:13">p7</name> <init pos:start="439:15" pos:end="439:20">= <expr pos:start="439:17" pos:end="439:20"><name pos:start="439:17" pos:end="439:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="440:5" pos:end="440:19"><decl pos:start="440:5" pos:end="440:12"><type pos:start="440:5" pos:end="440:9"><name pos:start="440:5" pos:end="440:7">BIO</name> <modifier pos:start="440:9" pos:end="440:9">*</modifier></type><name pos:start="440:10" pos:end="440:12">b64</name></decl>, <decl pos:start="440:15" pos:end="440:18"><type ref="prev" pos:start="440:5" pos:end="440:9"><modifier pos:start="440:15" pos:end="440:15">*</modifier></type><name pos:start="440:16" pos:end="440:18">out</name></decl>;</decl_stmt>
    <decl_stmt pos:start="441:5" pos:end="441:22"><decl pos:start="441:5" pos:end="441:21"><type pos:start="441:5" pos:end="441:10"><name pos:start="441:5" pos:end="441:8">X509</name> <modifier pos:start="441:10" pos:end="441:10">*</modifier></type><name pos:start="441:11" pos:end="441:14">cert</name> <init pos:start="441:16" pos:end="441:21">= <expr pos:start="441:18" pos:end="441:21"><name pos:start="441:18" pos:end="441:21">NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="442:5" pos:end="442:34"><expr pos:start="442:5" pos:end="442:33"><call pos:start="442:5" pos:end="442:18"><name pos:start="442:5" pos:end="442:12">STACK_OF</name><argument_list pos:start="442:13" pos:end="442:18">(<argument pos:start="442:14" pos:end="442:17"><expr pos:start="442:14" pos:end="442:17"><name pos:start="442:14" pos:end="442:17">X509</name></expr></argument>)</argument_list></call> <operator pos:start="442:20" pos:end="442:20">*</operator> <name pos:start="442:22" pos:end="442:26">certs</name> <operator pos:start="442:28" pos:end="442:28">=</operator> <name pos:start="442:30" pos:end="442:33">NULL</name></expr>;</expr_stmt>
    <decl_stmt pos:start="443:5" pos:end="443:10"><decl pos:start="443:5" pos:end="443:9"><type pos:start="443:5" pos:end="443:7"><name pos:start="443:5" pos:end="443:7">int</name></type> <name pos:start="443:9" pos:end="443:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="444:5" pos:end="444:36"><decl pos:start="444:5" pos:end="444:35"><type pos:start="444:5" pos:end="444:19"><name pos:start="444:5" pos:end="444:12">unsigned</name> <name pos:start="444:14" pos:end="444:17">char</name> <modifier pos:start="444:19" pos:end="444:19">*</modifier></type><name pos:start="444:20" pos:end="444:28">attr_data</name> <init pos:start="444:30" pos:end="444:35">= <expr pos:start="444:32" pos:end="444:35"><name pos:start="444:32" pos:end="444:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="445:5" pos:end="445:17"><decl pos:start="445:5" pos:end="445:16"><type pos:start="445:5" pos:end="445:7"><name pos:start="445:5" pos:end="445:7">int</name></type> <name pos:start="445:9" pos:end="445:16">attr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="446:5" pos:end="446:49"><decl pos:start="446:5" pos:end="446:48"><type pos:start="446:5" pos:end="446:10"><name pos:start="446:5" pos:end="446:8">char</name> <modifier pos:start="446:10" pos:end="446:10">*</modifier></type><name pos:start="446:11" pos:end="446:22">path_segment</name> <init pos:start="446:24" pos:end="446:48">= <expr pos:start="446:26" pos:end="446:48"><literal type="string" pos:start="446:26" pos:end="446:48">"path_seg_us3512_test3"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="447:5" pos:end="447:34"><decl pos:start="447:5" pos:end="447:33"><type pos:start="447:5" pos:end="447:19"><name pos:start="447:5" pos:end="447:12">unsigned</name> <name pos:start="447:14" pos:end="447:17">char</name> <modifier pos:start="447:19" pos:end="447:19">*</modifier></type><name pos:start="447:20" pos:end="447:26">cacerts</name> <init pos:start="447:28" pos:end="447:33">= <expr pos:start="447:30" pos:end="447:33"><name pos:start="447:30" pos:end="447:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="448:5" pos:end="448:24"><decl pos:start="448:5" pos:end="448:23"><type pos:start="448:5" pos:end="448:7"><name pos:start="448:5" pos:end="448:7">int</name></type> <name pos:start="448:9" pos:end="448:19">cacerts_len</name> <init pos:start="448:21" pos:end="448:23">= <expr pos:start="448:23" pos:end="448:23"><literal type="number" pos:start="448:23" pos:end="448:23">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="450:5" pos:end="451:5"><expr pos:start="450:5" pos:end="450:15"><name pos:start="450:5" pos:end="450:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="453:5" pos:end="455:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="456:5" pos:end="456:63"><expr pos:start="456:5" pos:end="456:62"><name pos:start="456:5" pos:end="456:15">cacerts_len</name> <operator pos:start="456:17" pos:end="456:17">=</operator> <call pos:start="456:19" pos:end="456:62"><name pos:start="456:19" pos:end="456:34">read_binary_file</name><argument_list pos:start="456:35" pos:end="456:62">(<argument pos:start="456:36" pos:end="456:51"><expr pos:start="456:36" pos:end="456:51"><name pos:start="456:36" pos:end="456:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="456:54" pos:end="456:61"><expr pos:start="456:54" pos:end="456:61"><operator pos:start="456:54" pos:end="456:54">&amp;</operator><name pos:start="456:55" pos:end="456:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="457:5" pos:end="457:31"><expr pos:start="457:5" pos:end="457:30"><call pos:start="457:5" pos:end="457:30"><name pos:start="457:5" pos:end="457:13">CU_ASSERT</name><argument_list pos:start="457:14" pos:end="457:30">(<argument pos:start="457:15" pos:end="457:29"><expr pos:start="457:15" pos:end="457:29"><name pos:start="457:15" pos:end="457:25">cacerts_len</name> <operator pos:start="457:27" pos:end="457:27">&gt;</operator> <literal type="number" pos:start="457:29" pos:end="457:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="459:5" pos:end="461:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="462:5" pos:end="463:35"><expr pos:start="462:5" pos:end="463:34"><name pos:start="462:5" pos:end="462:8">ectx</name> <operator pos:start="462:10" pos:end="462:10">=</operator> <call pos:start="462:12" pos:end="463:34"><name pos:start="462:12" pos:end="462:26">est_client_init</name><argument_list pos:start="462:27" pos:end="463:34">(<argument pos:start="462:28" pos:end="462:34"><expr pos:start="462:28" pos:end="462:34"><name pos:start="462:28" pos:end="462:34">cacerts</name></expr></argument>, <argument pos:start="462:37" pos:end="462:47"><expr pos:start="462:37" pos:end="462:47"><name pos:start="462:37" pos:end="462:47">cacerts_len</name></expr></argument>, <argument pos:start="462:50" pos:end="462:68"><expr pos:start="462:50" pos:end="462:68"><name pos:start="462:50" pos:end="462:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="463:9" pos:end="463:33"><expr pos:start="463:9" pos:end="463:33"><name pos:start="463:9" pos:end="463:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="464:5" pos:end="464:28"><expr pos:start="464:5" pos:end="464:27"><call pos:start="464:5" pos:end="464:27"><name pos:start="464:5" pos:end="464:13">CU_ASSERT</name><argument_list pos:start="464:14" pos:end="464:27">(<argument pos:start="464:15" pos:end="464:26"><expr pos:start="464:15" pos:end="464:26"><name pos:start="464:15" pos:end="464:18">ectx</name> <operator pos:start="464:20" pos:end="464:21">!=</operator> <name pos:start="464:23" pos:end="464:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="466:5" pos:end="468:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="469:5" pos:end="469:71"><expr pos:start="469:5" pos:end="469:70"><name pos:start="469:5" pos:end="469:6">rv</name> <operator pos:start="469:8" pos:end="469:8">=</operator> <call pos:start="469:10" pos:end="469:70"><name pos:start="469:10" pos:end="469:28">est_client_set_auth</name><argument_list pos:start="469:29" pos:end="469:70">(<argument pos:start="469:30" pos:end="469:33"><expr pos:start="469:30" pos:end="469:33"><name pos:start="469:30" pos:end="469:33">ectx</name></expr></argument>, <argument pos:start="469:36" pos:end="469:45"><expr pos:start="469:36" pos:end="469:45"><name pos:start="469:36" pos:end="469:45">US3512_UID</name></expr></argument>, <argument pos:start="469:48" pos:end="469:57"><expr pos:start="469:48" pos:end="469:57"><name pos:start="469:48" pos:end="469:57">US3512_PWD</name></expr></argument>, <argument pos:start="469:60" pos:end="469:63"><expr pos:start="469:60" pos:end="469:63"><name pos:start="469:60" pos:end="469:63">NULL</name></expr></argument>, <argument pos:start="469:66" pos:end="469:69"><expr pos:start="469:66" pos:end="469:69"><name pos:start="469:66" pos:end="469:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="470:5" pos:end="470:34"><expr pos:start="470:5" pos:end="470:33"><call pos:start="470:5" pos:end="470:33"><name pos:start="470:5" pos:end="470:13">CU_ASSERT</name><argument_list pos:start="470:14" pos:end="470:33">(<argument pos:start="470:15" pos:end="470:32"><expr pos:start="470:15" pos:end="470:32"><name pos:start="470:15" pos:end="470:16">rv</name> <operator pos:start="470:18" pos:end="470:19">==</operator> <name pos:start="470:21" pos:end="470:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="472:5" pos:end="474:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="475:5" pos:end="476:22"><expr pos:start="475:5" pos:end="476:21"><call pos:start="475:5" pos:end="476:21"><name pos:start="475:5" pos:end="475:25">est_client_set_server</name><argument_list pos:start="475:26" pos:end="476:21">(<argument pos:start="475:27" pos:end="475:30"><expr pos:start="475:27" pos:end="475:30"><name pos:start="475:27" pos:end="475:30">ectx</name></expr></argument>, <argument pos:start="475:33" pos:end="475:48"><expr pos:start="475:33" pos:end="475:48"><name pos:start="475:33" pos:end="475:48">US3512_SERVER_IP</name></expr></argument>, <argument pos:start="475:51" pos:end="475:68"><expr pos:start="475:51" pos:end="475:68"><name pos:start="475:51" pos:end="475:68">US3512_SERVER_PORT</name></expr></argument>,
        <argument pos:start="476:9" pos:end="476:20"><expr pos:start="476:9" pos:end="476:20"><name pos:start="476:9" pos:end="476:20">path_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="478:5" pos:end="480:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="481:5" pos:end="481:33"><expr pos:start="481:5" pos:end="481:32"><name pos:start="481:5" pos:end="481:7">key</name> <operator pos:start="481:9" pos:end="481:9">=</operator> <call pos:start="481:11" pos:end="481:32"><name pos:start="481:11" pos:end="481:30">generate_private_key</name><argument_list pos:start="481:31" pos:end="481:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="482:5" pos:end="482:27"><expr pos:start="482:5" pos:end="482:26"><call pos:start="482:5" pos:end="482:26"><name pos:start="482:5" pos:end="482:13">CU_ASSERT</name><argument_list pos:start="482:14" pos:end="482:26">(<argument pos:start="482:15" pos:end="482:25"><expr pos:start="482:15" pos:end="482:25"><name pos:start="482:15" pos:end="482:17">key</name> <operator pos:start="482:19" pos:end="482:20">!=</operator> <name pos:start="482:22" pos:end="482:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="484:5" pos:end="486:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="487:5" pos:end="487:62"><expr pos:start="487:5" pos:end="487:61"><name pos:start="487:5" pos:end="487:6">rv</name> <operator pos:start="487:8" pos:end="487:8">=</operator> <call pos:start="487:10" pos:end="487:61"><name pos:start="487:10" pos:end="487:32">est_client_get_csrattrs</name><argument_list pos:start="487:33" pos:end="487:61">(<argument pos:start="487:34" pos:end="487:37"><expr pos:start="487:34" pos:end="487:37"><name pos:start="487:34" pos:end="487:37">ectx</name></expr></argument>, <argument pos:start="487:40" pos:end="487:49"><expr pos:start="487:40" pos:end="487:49"><operator pos:start="487:40" pos:end="487:40">&amp;</operator><name pos:start="487:41" pos:end="487:49">attr_data</name></expr></argument>, <argument pos:start="487:52" pos:end="487:60"><expr pos:start="487:52" pos:end="487:60"><operator pos:start="487:52" pos:end="487:52">&amp;</operator><name pos:start="487:53" pos:end="487:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="488:5" pos:end="488:34"><expr pos:start="488:5" pos:end="488:33"><call pos:start="488:5" pos:end="488:33"><name pos:start="488:5" pos:end="488:13">CU_ASSERT</name><argument_list pos:start="488:14" pos:end="488:33">(<argument pos:start="488:15" pos:end="488:32"><expr pos:start="488:15" pos:end="488:32"><name pos:start="488:15" pos:end="488:16">rv</name> <operator pos:start="488:18" pos:end="488:19">==</operator> <name pos:start="488:21" pos:end="488:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="490:5" pos:end="492:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="493:5" pos:end="493:64"><expr pos:start="493:5" pos:end="493:63"><name pos:start="493:5" pos:end="493:6">rv</name> <operator pos:start="493:8" pos:end="493:8">=</operator> <call pos:start="493:10" pos:end="493:63"><name pos:start="493:10" pos:end="493:26">est_client_enroll</name><argument_list pos:start="493:27" pos:end="493:63">(<argument pos:start="493:28" pos:end="493:31"><expr pos:start="493:28" pos:end="493:31"><name pos:start="493:28" pos:end="493:31">ectx</name></expr></argument>, <argument pos:start="493:34" pos:end="493:45"><expr pos:start="493:34" pos:end="493:45"><literal type="string" pos:start="493:34" pos:end="493:45">"TC-US898-1"</literal></expr></argument>, <argument pos:start="493:48" pos:end="493:57"><expr pos:start="493:48" pos:end="493:57"><operator pos:start="493:48" pos:end="493:48">&amp;</operator><name pos:start="493:49" pos:end="493:57">pkcs7_len</name></expr></argument>, <argument pos:start="493:60" pos:end="493:62"><expr pos:start="493:60" pos:end="493:62"><name pos:start="493:60" pos:end="493:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="494:5" pos:end="494:34"><expr pos:start="494:5" pos:end="494:33"><call pos:start="494:5" pos:end="494:33"><name pos:start="494:5" pos:end="494:13">CU_ASSERT</name><argument_list pos:start="494:14" pos:end="494:33">(<argument pos:start="494:15" pos:end="494:32"><expr pos:start="494:15" pos:end="494:32"><name pos:start="494:15" pos:end="494:16">rv</name> <operator pos:start="494:18" pos:end="494:19">==</operator> <name pos:start="494:21" pos:end="494:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="495:5" pos:end="496:15"><if pos:start="495:5" pos:end="496:15">if <condition pos:start="495:8" pos:end="495:27">(<expr pos:start="495:9" pos:end="495:26"><name pos:start="495:9" pos:end="495:10">rv</name> <operator pos:start="495:12" pos:end="495:13">!=</operator> <name pos:start="495:15" pos:end="495:26">EST_ERR_NONE</name></expr>)</condition><block type="pseudo" pos:start="496:9" pos:end="496:15"><block_content pos:start="496:9" pos:end="496:15">
        <return pos:start="496:9" pos:end="496:15">return;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="498:5" pos:end="500:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="501:5" pos:end="506:5"><if pos:start="501:5" pos:end="506:5">if <condition pos:start="501:8" pos:end="501:27">(<expr pos:start="501:9" pos:end="501:26"><name pos:start="501:9" pos:end="501:10">rv</name> <operator pos:start="501:12" pos:end="501:13">==</operator> <name pos:start="501:15" pos:end="501:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="501:29" pos:end="506:5">{<block_content pos:start="502:9" pos:end="505:38">
        <expr_stmt pos:start="502:9" pos:end="502:37"><expr pos:start="502:9" pos:end="502:36"><name pos:start="502:9" pos:end="502:16">new_cert</name> <operator pos:start="502:18" pos:end="502:18">=</operator> <call pos:start="502:20" pos:end="502:36"><name pos:start="502:20" pos:end="502:25">malloc</name><argument_list pos:start="502:26" pos:end="502:36">(<argument pos:start="502:27" pos:end="502:35"><expr pos:start="502:27" pos:end="502:35"><name pos:start="502:27" pos:end="502:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="503:9" pos:end="503:36"><expr pos:start="503:9" pos:end="503:35"><call pos:start="503:9" pos:end="503:35"><name pos:start="503:9" pos:end="503:17">CU_ASSERT</name><argument_list pos:start="503:18" pos:end="503:35">(<argument pos:start="503:19" pos:end="503:34"><expr pos:start="503:19" pos:end="503:34"><name pos:start="503:19" pos:end="503:26">new_cert</name> <operator pos:start="503:28" pos:end="503:29">!=</operator> <name pos:start="503:31" pos:end="503:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="504:9" pos:end="504:59"><expr pos:start="504:9" pos:end="504:58"><name pos:start="504:9" pos:end="504:10">rv</name> <operator pos:start="504:12" pos:end="504:12">=</operator> <call pos:start="504:14" pos:end="504:58"><name pos:start="504:14" pos:end="504:42">est_client_copy_enrolled_cert</name><argument_list pos:start="504:43" pos:end="504:58">(<argument pos:start="504:44" pos:end="504:47"><expr pos:start="504:44" pos:end="504:47"><name pos:start="504:44" pos:end="504:47">ectx</name></expr></argument>, <argument pos:start="504:50" pos:end="504:57"><expr pos:start="504:50" pos:end="504:57"><name pos:start="504:50" pos:end="504:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="505:9" pos:end="505:38"><expr pos:start="505:9" pos:end="505:37"><call pos:start="505:9" pos:end="505:37"><name pos:start="505:9" pos:end="505:17">CU_ASSERT</name><argument_list pos:start="505:18" pos:end="505:37">(<argument pos:start="505:19" pos:end="505:36"><expr pos:start="505:19" pos:end="505:36"><name pos:start="505:19" pos:end="505:20">rv</name> <operator pos:start="505:22" pos:end="505:23">==</operator> <name pos:start="505:25" pos:end="505:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="508:5" pos:end="511:7">/*
     * Convert the cert to an X509.  Be warned this is
     * pure hackery.
     */</comment>
    <expr_stmt pos:start="512:5" pos:end="512:34"><expr pos:start="512:5" pos:end="512:33"><name pos:start="512:5" pos:end="512:7">b64</name> <operator pos:start="512:9" pos:end="512:9">=</operator> <call pos:start="512:11" pos:end="512:33"><name pos:start="512:11" pos:end="512:17">BIO_new</name><argument_list pos:start="512:18" pos:end="512:33">(<argument pos:start="512:19" pos:end="512:32"><expr pos:start="512:19" pos:end="512:32"><call pos:start="512:19" pos:end="512:32"><name pos:start="512:19" pos:end="512:30">BIO_f_base64</name><argument_list pos:start="512:31" pos:end="512:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="513:5" pos:end="513:47"><expr pos:start="513:5" pos:end="513:46"><name pos:start="513:5" pos:end="513:7">out</name> <operator pos:start="513:9" pos:end="513:9">=</operator> <call pos:start="513:11" pos:end="513:46"><name pos:start="513:11" pos:end="513:25">BIO_new_mem_buf</name><argument_list pos:start="513:26" pos:end="513:46">(<argument pos:start="513:27" pos:end="513:34"><expr pos:start="513:27" pos:end="513:34"><name pos:start="513:27" pos:end="513:34">new_cert</name></expr></argument>, <argument pos:start="513:37" pos:end="513:45"><expr pos:start="513:37" pos:end="513:45"><name pos:start="513:37" pos:end="513:45">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="514:5" pos:end="514:29"><expr pos:start="514:5" pos:end="514:28"><name pos:start="514:5" pos:end="514:7">out</name> <operator pos:start="514:9" pos:end="514:9">=</operator> <call pos:start="514:11" pos:end="514:28"><name pos:start="514:11" pos:end="514:18">BIO_push</name><argument_list pos:start="514:19" pos:end="514:28">(<argument pos:start="514:20" pos:end="514:22"><expr pos:start="514:20" pos:end="514:22"><name pos:start="514:20" pos:end="514:22">b64</name></expr></argument>, <argument pos:start="514:25" pos:end="514:27"><expr pos:start="514:25" pos:end="514:27"><name pos:start="514:25" pos:end="514:27">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="515:5" pos:end="515:34"><expr pos:start="515:5" pos:end="515:33"><name pos:start="515:5" pos:end="515:6">p7</name> <operator pos:start="515:8" pos:end="515:8">=</operator> <call pos:start="515:10" pos:end="515:33"><name pos:start="515:10" pos:end="515:22">d2i_PKCS7_bio</name><argument_list pos:start="515:23" pos:end="515:33">(<argument pos:start="515:24" pos:end="515:26"><expr pos:start="515:24" pos:end="515:26"><name pos:start="515:24" pos:end="515:26">out</name></expr></argument>, <argument pos:start="515:29" pos:end="515:32"><expr pos:start="515:29" pos:end="515:32"><name pos:start="515:29" pos:end="515:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="516:5" pos:end="516:26"><expr pos:start="516:5" pos:end="516:25"><call pos:start="516:5" pos:end="516:25"><name pos:start="516:5" pos:end="516:13">CU_ASSERT</name><argument_list pos:start="516:14" pos:end="516:25">(<argument pos:start="516:15" pos:end="516:24"><expr pos:start="516:15" pos:end="516:24"><name pos:start="516:15" pos:end="516:16">p7</name> <operator pos:start="516:18" pos:end="516:19">!=</operator> <name pos:start="516:21" pos:end="516:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="517:5" pos:end="517:22"><expr pos:start="517:5" pos:end="517:21"><call pos:start="517:5" pos:end="517:21"><name pos:start="517:5" pos:end="517:16">BIO_free_all</name><argument_list pos:start="517:17" pos:end="517:21">(<argument pos:start="517:18" pos:end="517:20"><expr pos:start="517:18" pos:end="517:20"><name pos:start="517:18" pos:end="517:20">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="518:5" pos:end="518:30"><expr pos:start="518:5" pos:end="518:29"><name pos:start="518:5" pos:end="518:5">i</name> <operator pos:start="518:7" pos:end="518:7">=</operator> <call pos:start="518:9" pos:end="518:29"><name pos:start="518:9" pos:end="518:19">OBJ_obj2nid</name><argument_list pos:start="518:20" pos:end="518:29">(<argument pos:start="518:21" pos:end="518:28"><expr pos:start="518:21" pos:end="518:28"><name pos:start="518:21" pos:end="518:28"><name pos:start="518:21" pos:end="518:22">p7</name><operator pos:start="518:23" pos:end="518:24">-&gt;</operator><name pos:start="518:25" pos:end="518:28">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="519:5" pos:end="528:5">switch <condition pos:start="519:12" pos:end="519:14">(<expr pos:start="519:13" pos:end="519:13"><name pos:start="519:13" pos:end="519:13">i</name></expr>)</condition> <block pos:start="519:16" pos:end="528:5">{<block_content pos:start="520:5" pos:end="527:14">
    <case pos:start="520:5" pos:end="520:26">case <expr pos:start="520:10" pos:end="520:25"><name pos:start="520:10" pos:end="520:25">NID_pkcs7_signed</name></expr>:</case>
        <expr_stmt pos:start="521:9" pos:end="521:33"><expr pos:start="521:9" pos:end="521:32"><name pos:start="521:9" pos:end="521:13">certs</name> <operator pos:start="521:15" pos:end="521:15">=</operator> <name pos:start="521:17" pos:end="521:32"><name pos:start="521:17" pos:end="521:18">p7</name><operator pos:start="521:19" pos:end="521:20">-&gt;</operator><name pos:start="521:21" pos:end="521:21">d</name><operator pos:start="521:22" pos:end="521:22">.</operator><name pos:start="521:23" pos:end="521:26">sign</name><operator pos:start="521:27" pos:end="521:28">-&gt;</operator><name pos:start="521:29" pos:end="521:32">cert</name></name></expr>;</expr_stmt>
        <break pos:start="522:9" pos:end="522:14">break;</break>
    <case pos:start="523:5" pos:end="523:38">case <expr pos:start="523:10" pos:end="523:37"><name pos:start="523:10" pos:end="523:37">NID_pkcs7_signedAndEnveloped</name></expr>:</case>
        <expr_stmt pos:start="524:9" pos:end="524:49"><expr pos:start="524:9" pos:end="524:48"><name pos:start="524:9" pos:end="524:13">certs</name> <operator pos:start="524:15" pos:end="524:15">=</operator> <name pos:start="524:17" pos:end="524:48"><name pos:start="524:17" pos:end="524:18">p7</name><operator pos:start="524:19" pos:end="524:20">-&gt;</operator><name pos:start="524:21" pos:end="524:21">d</name><operator pos:start="524:22" pos:end="524:22">.</operator><name pos:start="524:23" pos:end="524:42">signed_and_enveloped</name><operator pos:start="524:43" pos:end="524:44">-&gt;</operator><name pos:start="524:45" pos:end="524:48">cert</name></name></expr>;</expr_stmt>
        <break pos:start="525:9" pos:end="525:14">break;</break>
    <default pos:start="526:5" pos:end="526:12">default:</default>
        <break pos:start="527:9" pos:end="527:14">break;</break>
    </block_content>}</block></switch>
    <expr_stmt pos:start="529:5" pos:end="529:29"><expr pos:start="529:5" pos:end="529:28"><call pos:start="529:5" pos:end="529:28"><name pos:start="529:5" pos:end="529:13">CU_ASSERT</name><argument_list pos:start="529:14" pos:end="529:28">(<argument pos:start="529:15" pos:end="529:27"><expr pos:start="529:15" pos:end="529:27"><name pos:start="529:15" pos:end="529:19">certs</name> <operator pos:start="529:21" pos:end="529:22">!=</operator> <name pos:start="529:24" pos:end="529:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="530:5" pos:end="531:15"><if pos:start="530:5" pos:end="531:15">if <condition pos:start="530:8" pos:end="530:15">(<expr pos:start="530:9" pos:end="530:14"><operator pos:start="530:9" pos:end="530:9">!</operator><name pos:start="530:10" pos:end="530:14">certs</name></expr>)</condition><block type="pseudo" pos:start="531:9" pos:end="531:15"><block_content pos:start="531:9" pos:end="531:15">
        <return pos:start="531:9" pos:end="531:15">return;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="532:5" pos:end="534:51">/* our new cert should be the one and only
     * cert in the pkcs7 blob.  We shouldn't have to
     * iterate through the full list to find it. */</comment>
    <expr_stmt pos:start="535:5" pos:end="535:35"><expr pos:start="535:5" pos:end="535:34"><name pos:start="535:5" pos:end="535:8">cert</name> <operator pos:start="535:10" pos:end="535:10">=</operator> <call pos:start="535:12" pos:end="535:34"><name pos:start="535:12" pos:end="535:24">sk_X509_value</name><argument_list pos:start="535:25" pos:end="535:34">(<argument pos:start="535:26" pos:end="535:30"><expr pos:start="535:26" pos:end="535:30"><name pos:start="535:26" pos:end="535:30">certs</name></expr></argument>, <argument pos:start="535:33" pos:end="535:33"><expr pos:start="535:33" pos:end="535:33"><literal type="number" pos:start="535:33" pos:end="535:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="536:5" pos:end="536:28"><expr pos:start="536:5" pos:end="536:27"><call pos:start="536:5" pos:end="536:27"><name pos:start="536:5" pos:end="536:13">CU_ASSERT</name><argument_list pos:start="536:14" pos:end="536:27">(<argument pos:start="536:15" pos:end="536:26"><expr pos:start="536:15" pos:end="536:26"><name pos:start="536:15" pos:end="536:18">cert</name> <operator pos:start="536:20" pos:end="536:21">!=</operator> <name pos:start="536:23" pos:end="536:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="538:5" pos:end="543:7">/*
     * Wow, that's a lot of work, but we finally have the X509.
     * (don't you just love OpenSSL!!!)
     * Now that we have an X509 representation of the cert,
     * let's try to re-enroll this cert with the CA
     */</comment>
    <expr_stmt pos:start="544:5" pos:end="544:68"><expr pos:start="544:5" pos:end="544:67"><call pos:start="544:5" pos:end="544:67"><name pos:start="544:5" pos:end="544:10">memset</name><argument_list pos:start="544:11" pos:end="544:67">(<argument pos:start="544:12" pos:end="544:33"><expr pos:start="544:12" pos:end="544:33"><name pos:start="544:12" pos:end="544:33">tst_srvr_path_seg_auth</name></expr></argument>, <argument pos:start="544:36" pos:end="544:36"><expr pos:start="544:36" pos:end="544:36"><literal type="number" pos:start="544:36" pos:end="544:36">0</literal></expr></argument>, <argument pos:start="544:39" pos:end="544:66"><expr pos:start="544:39" pos:end="544:66"><name pos:start="544:39" pos:end="544:62">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="544:64" pos:end="544:64">+</operator> <literal type="number" pos:start="544:66" pos:end="544:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="545:5" pos:end="545:70"><expr pos:start="545:5" pos:end="545:69"><call pos:start="545:5" pos:end="545:69"><name pos:start="545:5" pos:end="545:10">memset</name><argument_list pos:start="545:11" pos:end="545:69">(<argument pos:start="545:12" pos:end="545:35"><expr pos:start="545:12" pos:end="545:35"><name pos:start="545:12" pos:end="545:35">tst_srvr_path_seg_enroll</name></expr></argument>, <argument pos:start="545:38" pos:end="545:38"><expr pos:start="545:38" pos:end="545:38"><literal type="number" pos:start="545:38" pos:end="545:38">0</literal></expr></argument>, <argument pos:start="545:41" pos:end="545:68"><expr pos:start="545:41" pos:end="545:68"><name pos:start="545:41" pos:end="545:64">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="545:66" pos:end="545:66">+</operator> <literal type="number" pos:start="545:68" pos:end="545:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="547:5" pos:end="547:58"><expr pos:start="547:5" pos:end="547:57"><name pos:start="547:5" pos:end="547:6">rv</name> <operator pos:start="547:8" pos:end="547:8">=</operator> <call pos:start="547:10" pos:end="547:57"><name pos:start="547:10" pos:end="547:28">est_client_reenroll</name><argument_list pos:start="547:29" pos:end="547:57">(<argument pos:start="547:30" pos:end="547:33"><expr pos:start="547:30" pos:end="547:33"><name pos:start="547:30" pos:end="547:33">ectx</name></expr></argument>, <argument pos:start="547:36" pos:end="547:39"><expr pos:start="547:36" pos:end="547:39"><name pos:start="547:36" pos:end="547:39">cert</name></expr></argument>, <argument pos:start="547:42" pos:end="547:51"><expr pos:start="547:42" pos:end="547:51"><operator pos:start="547:42" pos:end="547:42">&amp;</operator><name pos:start="547:43" pos:end="547:51">pkcs7_len</name></expr></argument>, <argument pos:start="547:54" pos:end="547:56"><expr pos:start="547:54" pos:end="547:56"><name pos:start="547:54" pos:end="547:56">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="548:5" pos:end="548:34"><expr pos:start="548:5" pos:end="548:33"><call pos:start="548:5" pos:end="548:33"><name pos:start="548:5" pos:end="548:13">CU_ASSERT</name><argument_list pos:start="548:14" pos:end="548:33">(<argument pos:start="548:15" pos:end="548:32"><expr pos:start="548:15" pos:end="548:32"><name pos:start="548:15" pos:end="548:16">rv</name> <operator pos:start="548:18" pos:end="548:19">==</operator> <name pos:start="548:21" pos:end="548:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="550:5" pos:end="550:65"><expr pos:start="550:5" pos:end="550:64"><call pos:start="550:5" pos:end="550:64"><name pos:start="550:5" pos:end="550:13">CU_ASSERT</name><argument_list pos:start="550:14" pos:end="550:64">(<argument pos:start="550:15" pos:end="550:63"><expr pos:start="550:15" pos:end="550:63"><call pos:start="550:15" pos:end="550:58"><name pos:start="550:15" pos:end="550:20">strcmp</name><argument_list pos:start="550:21" pos:end="550:58">(<argument pos:start="550:22" pos:end="550:33"><expr pos:start="550:22" pos:end="550:33"><name pos:start="550:22" pos:end="550:33">path_segment</name></expr></argument>, <argument pos:start="550:36" pos:end="550:57"><expr pos:start="550:36" pos:end="550:57"><name pos:start="550:36" pos:end="550:57">tst_srvr_path_seg_auth</name></expr></argument>)</argument_list></call> <operator pos:start="550:60" pos:end="550:61">==</operator> <literal type="number" pos:start="550:63" pos:end="550:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="551:5" pos:end="551:67"><expr pos:start="551:5" pos:end="551:66"><call pos:start="551:5" pos:end="551:66"><name pos:start="551:5" pos:end="551:13">CU_ASSERT</name><argument_list pos:start="551:14" pos:end="551:66">(<argument pos:start="551:15" pos:end="551:65"><expr pos:start="551:15" pos:end="551:65"><call pos:start="551:15" pos:end="551:60"><name pos:start="551:15" pos:end="551:20">strcmp</name><argument_list pos:start="551:21" pos:end="551:60">(<argument pos:start="551:22" pos:end="551:33"><expr pos:start="551:22" pos:end="551:33"><name pos:start="551:22" pos:end="551:33">path_segment</name></expr></argument>, <argument pos:start="551:36" pos:end="551:59"><expr pos:start="551:36" pos:end="551:59"><name pos:start="551:36" pos:end="551:59">tst_srvr_path_seg_enroll</name></expr></argument>)</argument_list></call> <operator pos:start="551:62" pos:end="551:63">==</operator> <literal type="number" pos:start="551:65" pos:end="551:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="553:5" pos:end="555:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="556:5" pos:end="557:24"><if pos:start="556:5" pos:end="557:24">if <condition pos:start="556:8" pos:end="556:13">(<expr pos:start="556:9" pos:end="556:12"><name pos:start="556:9" pos:end="556:12">cert</name></expr>)</condition><block type="pseudo" pos:start="557:9" pos:end="557:24"><block_content pos:start="557:9" pos:end="557:24">
        <expr_stmt pos:start="557:9" pos:end="557:24"><expr pos:start="557:9" pos:end="557:23"><call pos:start="557:9" pos:end="557:23"><name pos:start="557:9" pos:end="557:17">X509_free</name><argument_list pos:start="557:18" pos:end="557:23">(<argument pos:start="557:19" pos:end="557:22"><expr pos:start="557:19" pos:end="557:22"><name pos:start="557:19" pos:end="557:22">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="558:5" pos:end="558:23"><expr pos:start="558:5" pos:end="558:22"><call pos:start="558:5" pos:end="558:22"><name pos:start="558:5" pos:end="558:17">EVP_PKEY_free</name><argument_list pos:start="558:18" pos:end="558:22">(<argument pos:start="558:19" pos:end="558:21"><expr pos:start="558:19" pos:end="558:21"><name pos:start="558:19" pos:end="558:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="559:5" pos:end="560:23"><if pos:start="559:5" pos:end="560:23">if <condition pos:start="559:8" pos:end="559:17">(<expr pos:start="559:9" pos:end="559:16"><name pos:start="559:9" pos:end="559:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="560:9" pos:end="560:23"><block_content pos:start="560:9" pos:end="560:23">
        <expr_stmt pos:start="560:9" pos:end="560:23"><expr pos:start="560:9" pos:end="560:22"><call pos:start="560:9" pos:end="560:22"><name pos:start="560:9" pos:end="560:12">free</name><argument_list pos:start="560:13" pos:end="560:22">(<argument pos:start="560:14" pos:end="560:21"><expr pos:start="560:14" pos:end="560:21"><name pos:start="560:14" pos:end="560:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="561:5" pos:end="561:22"><expr pos:start="561:5" pos:end="561:21"><call pos:start="561:5" pos:end="561:21"><name pos:start="561:5" pos:end="561:15">est_destroy</name><argument_list pos:start="561:16" pos:end="561:21">(<argument pos:start="561:17" pos:end="561:20"><expr pos:start="561:17" pos:end="561:20"><name pos:start="561:17" pos:end="561:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="564:1" pos:end="573:3">/*
 * taken from US897/test11
 * CAcerts to the server - including a path segment in the uri.
 *
 * Path Segment testing
 * - Verifies the client includes a configured
 *   path segment
 * - Verifies that the server correctly parses out
 *   a valid path segment and passes it up on the CA certs callback.
 */</comment>
<function pos:start="574:1" pos:end="660:1"><type pos:start="574:1" pos:end="574:11"><specifier pos:start="574:1" pos:end="574:6">static</specifier> <name pos:start="574:8" pos:end="574:11">void</name></type> <name pos:start="574:13" pos:end="574:24">us3512_test4</name> <parameter_list pos:start="574:26" pos:end="574:31">(<parameter pos:start="574:27" pos:end="574:30"><decl pos:start="574:27" pos:end="574:30"><type pos:start="574:27" pos:end="574:30"><name pos:start="574:27" pos:end="574:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="575:1" pos:end="660:1">{<block_content pos:start="576:5" pos:end="659:5">
    <decl_stmt pos:start="576:5" pos:end="576:18"><decl pos:start="576:5" pos:end="576:17"><type pos:start="576:5" pos:end="576:13"><name pos:start="576:5" pos:end="576:11">EST_CTX</name> <modifier pos:start="576:13" pos:end="576:13">*</modifier></type><name pos:start="576:14" pos:end="576:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="577:5" pos:end="577:31"><decl pos:start="577:5" pos:end="577:30"><type pos:start="577:5" pos:end="577:19"><name pos:start="577:5" pos:end="577:12">unsigned</name> <name pos:start="577:14" pos:end="577:17">char</name> <modifier pos:start="577:19" pos:end="577:19">*</modifier></type><name pos:start="577:20" pos:end="577:23">pkey</name> <init pos:start="577:25" pos:end="577:30">= <expr pos:start="577:27" pos:end="577:30"><name pos:start="577:27" pos:end="577:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="578:5" pos:end="578:34"><decl pos:start="578:5" pos:end="578:33"><type pos:start="578:5" pos:end="578:19"><name pos:start="578:5" pos:end="578:12">unsigned</name> <name pos:start="578:14" pos:end="578:17">char</name> <modifier pos:start="578:19" pos:end="578:19">*</modifier></type><name pos:start="578:20" pos:end="578:26">cacerts</name> <init pos:start="578:28" pos:end="578:33">= <expr pos:start="578:30" pos:end="578:33"><name pos:start="578:30" pos:end="578:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="579:5" pos:end="579:24"><decl pos:start="579:5" pos:end="579:23"><type pos:start="579:5" pos:end="579:7"><name pos:start="579:5" pos:end="579:7">int</name></type> <name pos:start="579:9" pos:end="579:19">cacerts_len</name> <init pos:start="579:21" pos:end="579:23">= <expr pos:start="579:23" pos:end="579:23"><literal type="number" pos:start="579:23" pos:end="579:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="580:5" pos:end="580:32"><decl pos:start="580:5" pos:end="580:31"><type pos:start="580:5" pos:end="580:13"><name pos:start="580:5" pos:end="580:13">EST_ERROR</name></type> <name pos:start="580:15" pos:end="580:16">rc</name> <init pos:start="580:18" pos:end="580:31">= <expr pos:start="580:20" pos:end="580:31"><name pos:start="580:20" pos:end="580:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="582:5" pos:end="582:44"><decl pos:start="582:5" pos:end="582:43"><type pos:start="582:5" pos:end="582:19"><name pos:start="582:5" pos:end="582:12">unsigned</name> <name pos:start="582:14" pos:end="582:17">char</name> <modifier pos:start="582:19" pos:end="582:19">*</modifier></type><name pos:start="582:20" pos:end="582:36">retrieved_cacerts</name> <init pos:start="582:38" pos:end="582:43">= <expr pos:start="582:40" pos:end="582:43"><name pos:start="582:40" pos:end="582:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="583:5" pos:end="583:34"><decl pos:start="583:5" pos:end="583:33"><type pos:start="583:5" pos:end="583:7"><name pos:start="583:5" pos:end="583:7">int</name></type> <name pos:start="583:9" pos:end="583:29">retrieved_cacerts_len</name> <init pos:start="583:31" pos:end="583:33">= <expr pos:start="583:33" pos:end="583:33"><literal type="number" pos:start="583:33" pos:end="583:33">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="584:5" pos:end="584:24"><decl pos:start="584:5" pos:end="584:23"><type pos:start="584:5" pos:end="584:14"><name pos:start="584:5" pos:end="584:12">EVP_PKEY</name> <modifier pos:start="584:14" pos:end="584:14">*</modifier></type> <name pos:start="584:16" pos:end="584:23">priv_key</name></decl>;</decl_stmt>

    <decl_stmt pos:start="586:5" pos:end="586:49"><decl pos:start="586:5" pos:end="586:48"><type pos:start="586:5" pos:end="586:10"><name pos:start="586:5" pos:end="586:8">char</name> <modifier pos:start="586:10" pos:end="586:10">*</modifier></type><name pos:start="586:11" pos:end="586:22">path_segment</name> <init pos:start="586:24" pos:end="586:48">= <expr pos:start="586:26" pos:end="586:48"><literal type="string" pos:start="586:26" pos:end="586:48">"path_seg_us3512_test4"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="588:5" pos:end="588:13"><expr pos:start="588:5" pos:end="588:12"><call pos:start="588:5" pos:end="588:12"><name pos:start="588:5" pos:end="588:9">SLEEP</name><argument_list pos:start="588:10" pos:end="588:12">(<argument pos:start="588:11" pos:end="588:11"><expr pos:start="588:11" pos:end="588:11"><literal type="number" pos:start="588:11" pos:end="588:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="590:5" pos:end="592:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="593:5" pos:end="593:63"><expr pos:start="593:5" pos:end="593:62"><name pos:start="593:5" pos:end="593:15">cacerts_len</name> <operator pos:start="593:17" pos:end="593:17">=</operator> <call pos:start="593:19" pos:end="593:62"><name pos:start="593:19" pos:end="593:34">read_binary_file</name><argument_list pos:start="593:35" pos:end="593:62">(<argument pos:start="593:36" pos:end="593:51"><expr pos:start="593:36" pos:end="593:51"><name pos:start="593:36" pos:end="593:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="593:54" pos:end="593:61"><expr pos:start="593:54" pos:end="593:61"><operator pos:start="593:54" pos:end="593:54">&amp;</operator><name pos:start="593:55" pos:end="593:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="594:5" pos:end="594:31"><expr pos:start="594:5" pos:end="594:30"><call pos:start="594:5" pos:end="594:30"><name pos:start="594:5" pos:end="594:13">CU_ASSERT</name><argument_list pos:start="594:14" pos:end="594:30">(<argument pos:start="594:15" pos:end="594:29"><expr pos:start="594:15" pos:end="594:29"><name pos:start="594:15" pos:end="594:25">cacerts_len</name> <operator pos:start="594:27" pos:end="594:27">&gt;</operator> <literal type="number" pos:start="594:29" pos:end="594:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="596:5" pos:end="598:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="599:5" pos:end="599:50"><expr pos:start="599:5" pos:end="599:49"><name pos:start="599:5" pos:end="599:12">priv_key</name> <operator pos:start="599:14" pos:end="599:14">=</operator> <call pos:start="599:16" pos:end="599:49"><name pos:start="599:16" pos:end="599:31">read_private_key</name><argument_list pos:start="599:32" pos:end="599:49">(<argument pos:start="599:33" pos:end="599:48"><expr pos:start="599:33" pos:end="599:48"><name pos:start="599:33" pos:end="599:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="600:5" pos:end="603:5"><if pos:start="600:5" pos:end="603:5">if <condition pos:start="600:8" pos:end="600:25">(<expr pos:start="600:9" pos:end="600:24"><name pos:start="600:9" pos:end="600:16">priv_key</name> <operator pos:start="600:18" pos:end="600:19">==</operator> <name pos:start="600:21" pos:end="600:24">NULL</name></expr>)</condition> <block pos:start="600:27" pos:end="603:5">{<block_content pos:start="601:9" pos:end="602:15">
        <expr_stmt pos:start="601:9" pos:end="601:80"><expr pos:start="601:9" pos:end="601:79"><call pos:start="601:9" pos:end="601:79"><name pos:start="601:9" pos:end="601:14">printf</name><argument_list pos:start="601:15" pos:end="601:79">(<argument pos:start="601:16" pos:end="601:60"><expr pos:start="601:16" pos:end="601:60"><literal type="string" pos:start="601:16" pos:end="601:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="601:63" pos:end="601:78"><expr pos:start="601:63" pos:end="601:78"><name pos:start="601:63" pos:end="601:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="602:9" pos:end="602:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="605:5" pos:end="606:35"><expr pos:start="605:5" pos:end="606:34"><name pos:start="605:5" pos:end="605:8">ectx</name> <operator pos:start="605:10" pos:end="605:10">=</operator> <call pos:start="605:12" pos:end="606:34"><name pos:start="605:12" pos:end="605:26">est_client_init</name><argument_list pos:start="605:27" pos:end="606:34">(<argument pos:start="605:28" pos:end="605:34"><expr pos:start="605:28" pos:end="605:34"><name pos:start="605:28" pos:end="605:34">cacerts</name></expr></argument>, <argument pos:start="605:37" pos:end="605:47"><expr pos:start="605:37" pos:end="605:47"><name pos:start="605:37" pos:end="605:47">cacerts_len</name></expr></argument>, <argument pos:start="605:50" pos:end="605:68"><expr pos:start="605:50" pos:end="605:68"><name pos:start="605:50" pos:end="605:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="606:9" pos:end="606:33"><expr pos:start="606:9" pos:end="606:33"><name pos:start="606:9" pos:end="606:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="607:5" pos:end="607:28"><expr pos:start="607:5" pos:end="607:27"><call pos:start="607:5" pos:end="607:27"><name pos:start="607:5" pos:end="607:13">CU_ASSERT</name><argument_list pos:start="607:14" pos:end="607:27">(<argument pos:start="607:15" pos:end="607:26"><expr pos:start="607:15" pos:end="607:26"><name pos:start="607:15" pos:end="607:18">ectx</name> <operator pos:start="607:20" pos:end="607:21">!=</operator> <name pos:start="607:23" pos:end="607:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="609:5" pos:end="609:59"><expr pos:start="609:5" pos:end="609:58"><name pos:start="609:5" pos:end="609:6">rc</name> <operator pos:start="609:8" pos:end="609:8">=</operator> <call pos:start="609:10" pos:end="609:58"><name pos:start="609:10" pos:end="609:28">est_client_set_auth</name><argument_list pos:start="609:29" pos:end="609:58">(<argument pos:start="609:30" pos:end="609:33"><expr pos:start="609:30" pos:end="609:33"><name pos:start="609:30" pos:end="609:33">ectx</name></expr></argument>, <argument pos:start="609:36" pos:end="609:37"><expr pos:start="609:36" pos:end="609:37"><literal type="string" pos:start="609:36" pos:end="609:37">""</literal></expr></argument>, <argument pos:start="609:40" pos:end="609:41"><expr pos:start="609:40" pos:end="609:41"><literal type="string" pos:start="609:40" pos:end="609:41">""</literal></expr></argument>, <argument pos:start="609:44" pos:end="609:47"><expr pos:start="609:44" pos:end="609:47"><name pos:start="609:44" pos:end="609:47">NULL</name></expr></argument>, <argument pos:start="609:50" pos:end="609:57"><expr pos:start="609:50" pos:end="609:57"><name pos:start="609:50" pos:end="609:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="610:5" pos:end="610:34"><expr pos:start="610:5" pos:end="610:33"><call pos:start="610:5" pos:end="610:33"><name pos:start="610:5" pos:end="610:13">CU_ASSERT</name><argument_list pos:start="610:14" pos:end="610:33">(<argument pos:start="610:15" pos:end="610:32"><expr pos:start="610:15" pos:end="610:32"><name pos:start="610:15" pos:end="610:16">rc</name> <operator pos:start="610:18" pos:end="610:19">==</operator> <name pos:start="610:21" pos:end="610:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="612:5" pos:end="613:22"><expr pos:start="612:5" pos:end="613:21"><call pos:start="612:5" pos:end="613:21"><name pos:start="612:5" pos:end="612:25">est_client_set_server</name><argument_list pos:start="612:26" pos:end="613:21">(<argument pos:start="612:27" pos:end="612:30"><expr pos:start="612:27" pos:end="612:30"><name pos:start="612:27" pos:end="612:30">ectx</name></expr></argument>, <argument pos:start="612:33" pos:end="612:48"><expr pos:start="612:33" pos:end="612:48"><name pos:start="612:33" pos:end="612:48">US3512_SERVER_IP</name></expr></argument>, <argument pos:start="612:51" pos:end="612:68"><expr pos:start="612:51" pos:end="612:68"><name pos:start="612:51" pos:end="612:68">US3512_SERVER_PORT</name></expr></argument>,
        <argument pos:start="613:9" pos:end="613:20"><expr pos:start="613:9" pos:end="613:20"><name pos:start="613:9" pos:end="613:20">path_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="615:5" pos:end="618:7">/*
     * clear out the global that proves that the path segment
     * made it to the application layer's cal back function
     */</comment>
    <expr_stmt pos:start="619:5" pos:end="619:71"><expr pos:start="619:5" pos:end="619:70"><call pos:start="619:5" pos:end="619:70"><name pos:start="619:5" pos:end="619:10">memset</name><argument_list pos:start="619:11" pos:end="619:70">(<argument pos:start="619:12" pos:end="619:36"><expr pos:start="619:12" pos:end="619:36"><name pos:start="619:12" pos:end="619:36">tst_srvr_path_seg_cacerts</name></expr></argument>, <argument pos:start="619:39" pos:end="619:39"><expr pos:start="619:39" pos:end="619:39"><literal type="number" pos:start="619:39" pos:end="619:39">0</literal></expr></argument>, <argument pos:start="619:42" pos:end="619:69"><expr pos:start="619:42" pos:end="619:69"><name pos:start="619:42" pos:end="619:65">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="619:67" pos:end="619:67">+</operator> <literal type="number" pos:start="619:69" pos:end="619:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="621:5" pos:end="623:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="624:5" pos:end="624:62"><expr pos:start="624:5" pos:end="624:61"><name pos:start="624:5" pos:end="624:6">rc</name> <operator pos:start="624:8" pos:end="624:8">=</operator> <call pos:start="624:10" pos:end="624:61"><name pos:start="624:10" pos:end="624:31">est_client_get_cacerts</name><argument_list pos:start="624:32" pos:end="624:61">(<argument pos:start="624:33" pos:end="624:36"><expr pos:start="624:33" pos:end="624:36"><name pos:start="624:33" pos:end="624:36">ectx</name></expr></argument>, <argument pos:start="624:39" pos:end="624:60"><expr pos:start="624:39" pos:end="624:60"><operator pos:start="624:39" pos:end="624:39">&amp;</operator><name pos:start="624:40" pos:end="624:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="625:5" pos:end="628:7">/*
     * should be successful, and should have obtained a valid buffer
     * containing the CA certs
     */</comment>
    <expr_stmt pos:start="629:5" pos:end="629:34"><expr pos:start="629:5" pos:end="629:33"><call pos:start="629:5" pos:end="629:33"><name pos:start="629:5" pos:end="629:13">CU_ASSERT</name><argument_list pos:start="629:14" pos:end="629:33">(<argument pos:start="629:15" pos:end="629:32"><expr pos:start="629:15" pos:end="629:32"><name pos:start="629:15" pos:end="629:16">rc</name> <operator pos:start="629:18" pos:end="629:19">==</operator> <name pos:start="629:21" pos:end="629:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="630:5" pos:end="630:41"><expr pos:start="630:5" pos:end="630:40"><call pos:start="630:5" pos:end="630:40"><name pos:start="630:5" pos:end="630:13">CU_ASSERT</name><argument_list pos:start="630:14" pos:end="630:40">(<argument pos:start="630:15" pos:end="630:39"><expr pos:start="630:15" pos:end="630:39"><name pos:start="630:15" pos:end="630:35">retrieved_cacerts_len</name> <operator pos:start="630:37" pos:end="630:37">&gt;</operator> <literal type="number" pos:start="630:39" pos:end="630:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="631:5" pos:end="634:7">/*
     * verify that the path segment made it all the way to the callback function
     * at the application layer
     */</comment>
    <expr_stmt pos:start="635:5" pos:end="635:68"><expr pos:start="635:5" pos:end="635:67"><call pos:start="635:5" pos:end="635:67"><name pos:start="635:5" pos:end="635:13">CU_ASSERT</name><argument_list pos:start="635:14" pos:end="635:67">(<argument pos:start="635:15" pos:end="635:66"><expr pos:start="635:15" pos:end="635:66"><call pos:start="635:15" pos:end="635:61"><name pos:start="635:15" pos:end="635:20">strcmp</name><argument_list pos:start="635:21" pos:end="635:61">(<argument pos:start="635:22" pos:end="635:33"><expr pos:start="635:22" pos:end="635:33"><name pos:start="635:22" pos:end="635:33">path_segment</name></expr></argument>, <argument pos:start="635:36" pos:end="635:60"><expr pos:start="635:36" pos:end="635:60"><name pos:start="635:36" pos:end="635:60">tst_srvr_path_seg_cacerts</name></expr></argument>)</argument_list></call> <operator pos:start="635:63" pos:end="635:64">==</operator> <literal type="number" pos:start="635:66" pos:end="635:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="637:5" pos:end="637:54"><expr pos:start="637:5" pos:end="637:53"><name pos:start="637:5" pos:end="637:21">retrieved_cacerts</name> <operator pos:start="637:23" pos:end="637:23">=</operator> <call pos:start="637:25" pos:end="637:53"><name pos:start="637:25" pos:end="637:30">malloc</name><argument_list pos:start="637:31" pos:end="637:53">(<argument pos:start="637:32" pos:end="637:52"><expr pos:start="637:32" pos:end="637:52"><name pos:start="637:32" pos:end="637:52">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="639:5" pos:end="639:58"><expr pos:start="639:5" pos:end="639:57"><name pos:start="639:5" pos:end="639:6">rc</name> <operator pos:start="639:8" pos:end="639:8">=</operator> <call pos:start="639:10" pos:end="639:57"><name pos:start="639:10" pos:end="639:32">est_client_copy_cacerts</name><argument_list pos:start="639:33" pos:end="639:57">(<argument pos:start="639:34" pos:end="639:37"><expr pos:start="639:34" pos:end="639:37"><name pos:start="639:34" pos:end="639:37">ectx</name></expr></argument>, <argument pos:start="639:40" pos:end="639:56"><expr pos:start="639:40" pos:end="639:56"><name pos:start="639:40" pos:end="639:56">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="641:5" pos:end="643:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>
    <if_stmt pos:start="644:5" pos:end="648:5"><if pos:start="644:5" pos:end="648:5">if <condition pos:start="644:8" pos:end="644:26">(<expr pos:start="644:9" pos:end="644:25"><name pos:start="644:9" pos:end="644:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="644:28" pos:end="648:5">{<block_content pos:start="646:9" pos:end="647:80">

        <expr_stmt pos:start="646:9" pos:end="646:73"><expr pos:start="646:9" pos:end="646:72"><call pos:start="646:9" pos:end="646:72"><name pos:start="646:9" pos:end="646:14">printf</name><argument_list pos:start="646:15" pos:end="646:72">(<argument pos:start="646:16" pos:end="646:52"><expr pos:start="646:16" pos:end="646:52"><literal type="string" pos:start="646:16" pos:end="646:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="646:55" pos:end="646:71"><expr pos:start="646:55" pos:end="646:71"><name pos:start="646:55" pos:end="646:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="647:9" pos:end="647:80"><expr pos:start="647:9" pos:end="647:79"><call pos:start="647:9" pos:end="647:79"><name pos:start="647:9" pos:end="647:14">printf</name><argument_list pos:start="647:15" pos:end="647:79">(<argument pos:start="647:16" pos:end="647:55"><expr pos:start="647:16" pos:end="647:55"><literal type="string" pos:start="647:16" pos:end="647:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="647:58" pos:end="647:78"><expr pos:start="647:58" pos:end="647:78"><name pos:start="647:58" pos:end="647:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="649:5" pos:end="649:28"><expr pos:start="649:5" pos:end="649:27"><call pos:start="649:5" pos:end="649:27"><name pos:start="649:5" pos:end="649:8">free</name><argument_list pos:start="649:9" pos:end="649:27">(<argument pos:start="649:10" pos:end="649:26"><expr pos:start="649:10" pos:end="649:26"><name pos:start="649:10" pos:end="649:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="651:5" pos:end="653:5"><if pos:start="651:5" pos:end="653:5">if <condition pos:start="651:8" pos:end="651:13">(<expr pos:start="651:9" pos:end="651:12"><name pos:start="651:9" pos:end="651:12">ectx</name></expr>)</condition> <block pos:start="651:15" pos:end="653:5">{<block_content pos:start="652:9" pos:end="652:26">
        <expr_stmt pos:start="652:9" pos:end="652:26"><expr pos:start="652:9" pos:end="652:25"><call pos:start="652:9" pos:end="652:25"><name pos:start="652:9" pos:end="652:19">est_destroy</name><argument_list pos:start="652:20" pos:end="652:25">(<argument pos:start="652:21" pos:end="652:24"><expr pos:start="652:21" pos:end="652:24"><name pos:start="652:21" pos:end="652:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="654:5" pos:end="656:5"><if pos:start="654:5" pos:end="656:5">if <condition pos:start="654:8" pos:end="654:16">(<expr pos:start="654:9" pos:end="654:15"><name pos:start="654:9" pos:end="654:15">cacerts</name></expr>)</condition> <block pos:start="654:18" pos:end="656:5">{<block_content pos:start="655:9" pos:end="655:22">
        <expr_stmt pos:start="655:9" pos:end="655:22"><expr pos:start="655:9" pos:end="655:21"><call pos:start="655:9" pos:end="655:21"><name pos:start="655:9" pos:end="655:12">free</name><argument_list pos:start="655:13" pos:end="655:21">(<argument pos:start="655:14" pos:end="655:20"><expr pos:start="655:14" pos:end="655:20"><name pos:start="655:14" pos:end="655:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="657:5" pos:end="659:5"><if pos:start="657:5" pos:end="659:5">if <condition pos:start="657:8" pos:end="657:13">(<expr pos:start="657:9" pos:end="657:12"><name pos:start="657:9" pos:end="657:12">pkey</name></expr>)</condition> <block pos:start="657:15" pos:end="659:5">{<block_content pos:start="658:9" pos:end="658:19">
        <expr_stmt pos:start="658:9" pos:end="658:19"><expr pos:start="658:9" pos:end="658:18"><call pos:start="658:9" pos:end="658:18"><name pos:start="658:9" pos:end="658:12">free</name><argument_list pos:start="658:13" pos:end="658:18">(<argument pos:start="658:14" pos:end="658:17"><expr pos:start="658:14" pos:end="658:17"><name pos:start="658:14" pos:end="658:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="662:1" pos:end="671:3">/*
 * taken from US898/test1
 * CSRAttributes -  including a path segment in the uri.
 *
 * Path Segment testing
 * - Verifies the client includes a configured
 *   path segment
 * - Verifies that the server correctly parses out
 *   a valid path segment and passes it up on a csr attributes callback
 */</comment>
<function pos:start="672:1" pos:end="749:1"><type pos:start="672:1" pos:end="672:11"><specifier pos:start="672:1" pos:end="672:6">static</specifier> <name pos:start="672:8" pos:end="672:11">void</name></type> <name pos:start="672:13" pos:end="672:24">us3512_test5</name> <parameter_list pos:start="672:26" pos:end="672:31">(<parameter pos:start="672:27" pos:end="672:30"><decl pos:start="672:27" pos:end="672:30"><type pos:start="672:27" pos:end="672:30"><name pos:start="672:27" pos:end="672:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="673:1" pos:end="749:1">{<block_content pos:start="674:5" pos:end="748:22">
    <decl_stmt pos:start="674:5" pos:end="674:18"><decl pos:start="674:5" pos:end="674:17"><type pos:start="674:5" pos:end="674:13"><name pos:start="674:5" pos:end="674:11">EST_CTX</name> <modifier pos:start="674:13" pos:end="674:13">*</modifier></type><name pos:start="674:14" pos:end="674:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="675:5" pos:end="675:18"><decl pos:start="675:5" pos:end="675:17"><type pos:start="675:5" pos:end="675:14"><name pos:start="675:5" pos:end="675:12">EVP_PKEY</name> <modifier pos:start="675:14" pos:end="675:14">*</modifier></type><name pos:start="675:15" pos:end="675:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="676:5" pos:end="676:11"><decl pos:start="676:5" pos:end="676:10"><type pos:start="676:5" pos:end="676:7"><name pos:start="676:5" pos:end="676:7">int</name></type> <name pos:start="676:9" pos:end="676:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="677:5" pos:end="677:35"><decl pos:start="677:5" pos:end="677:34"><type pos:start="677:5" pos:end="677:19"><name pos:start="677:5" pos:end="677:12">unsigned</name> <name pos:start="677:14" pos:end="677:17">char</name> <modifier pos:start="677:19" pos:end="677:19">*</modifier></type><name pos:start="677:20" pos:end="677:27">new_cert</name> <init pos:start="677:29" pos:end="677:34">= <expr pos:start="677:31" pos:end="677:34"><name pos:start="677:31" pos:end="677:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="678:5" pos:end="678:22"><decl pos:start="678:5" pos:end="678:21"><type pos:start="678:5" pos:end="678:10"><name pos:start="678:5" pos:end="678:8">X509</name> <modifier pos:start="678:10" pos:end="678:10">*</modifier></type><name pos:start="678:11" pos:end="678:14">cert</name> <init pos:start="678:16" pos:end="678:21">= <expr pos:start="678:18" pos:end="678:21"><name pos:start="678:18" pos:end="678:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="679:5" pos:end="679:36"><decl pos:start="679:5" pos:end="679:35"><type pos:start="679:5" pos:end="679:19"><name pos:start="679:5" pos:end="679:12">unsigned</name> <name pos:start="679:14" pos:end="679:17">char</name> <modifier pos:start="679:19" pos:end="679:19">*</modifier></type><name pos:start="679:20" pos:end="679:28">attr_data</name> <init pos:start="679:30" pos:end="679:35">= <expr pos:start="679:32" pos:end="679:35"><name pos:start="679:32" pos:end="679:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="680:5" pos:end="680:17"><decl pos:start="680:5" pos:end="680:16"><type pos:start="680:5" pos:end="680:7"><name pos:start="680:5" pos:end="680:7">int</name></type> <name pos:start="680:9" pos:end="680:16">attr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="681:5" pos:end="681:49"><decl pos:start="681:5" pos:end="681:48"><type pos:start="681:5" pos:end="681:10"><name pos:start="681:5" pos:end="681:8">char</name> <modifier pos:start="681:10" pos:end="681:10">*</modifier></type><name pos:start="681:11" pos:end="681:22">path_segment</name> <init pos:start="681:24" pos:end="681:48">= <expr pos:start="681:26" pos:end="681:48"><literal type="string" pos:start="681:26" pos:end="681:48">"path_seg_us3512_test5"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="682:5" pos:end="682:34"><decl pos:start="682:5" pos:end="682:33"><type pos:start="682:5" pos:end="682:19"><name pos:start="682:5" pos:end="682:12">unsigned</name> <name pos:start="682:14" pos:end="682:17">char</name> <modifier pos:start="682:19" pos:end="682:19">*</modifier></type><name pos:start="682:20" pos:end="682:26">cacerts</name> <init pos:start="682:28" pos:end="682:33">= <expr pos:start="682:30" pos:end="682:33"><name pos:start="682:30" pos:end="682:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="683:5" pos:end="683:24"><decl pos:start="683:5" pos:end="683:23"><type pos:start="683:5" pos:end="683:7"><name pos:start="683:5" pos:end="683:7">int</name></type> <name pos:start="683:9" pos:end="683:19">cacerts_len</name> <init pos:start="683:21" pos:end="683:23">= <expr pos:start="683:23" pos:end="683:23"><literal type="number" pos:start="683:23" pos:end="683:23">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="685:5" pos:end="686:5"><expr pos:start="685:5" pos:end="685:15"><name pos:start="685:5" pos:end="685:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="688:5" pos:end="690:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="691:5" pos:end="691:63"><expr pos:start="691:5" pos:end="691:62"><name pos:start="691:5" pos:end="691:15">cacerts_len</name> <operator pos:start="691:17" pos:end="691:17">=</operator> <call pos:start="691:19" pos:end="691:62"><name pos:start="691:19" pos:end="691:34">read_binary_file</name><argument_list pos:start="691:35" pos:end="691:62">(<argument pos:start="691:36" pos:end="691:51"><expr pos:start="691:36" pos:end="691:51"><name pos:start="691:36" pos:end="691:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="691:54" pos:end="691:61"><expr pos:start="691:54" pos:end="691:61"><operator pos:start="691:54" pos:end="691:54">&amp;</operator><name pos:start="691:55" pos:end="691:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="692:5" pos:end="692:31"><expr pos:start="692:5" pos:end="692:30"><call pos:start="692:5" pos:end="692:30"><name pos:start="692:5" pos:end="692:13">CU_ASSERT</name><argument_list pos:start="692:14" pos:end="692:30">(<argument pos:start="692:15" pos:end="692:29"><expr pos:start="692:15" pos:end="692:29"><name pos:start="692:15" pos:end="692:25">cacerts_len</name> <operator pos:start="692:27" pos:end="692:27">&gt;</operator> <literal type="number" pos:start="692:29" pos:end="692:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="694:5" pos:end="696:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="697:5" pos:end="698:35"><expr pos:start="697:5" pos:end="698:34"><name pos:start="697:5" pos:end="697:8">ectx</name> <operator pos:start="697:10" pos:end="697:10">=</operator> <call pos:start="697:12" pos:end="698:34"><name pos:start="697:12" pos:end="697:26">est_client_init</name><argument_list pos:start="697:27" pos:end="698:34">(<argument pos:start="697:28" pos:end="697:34"><expr pos:start="697:28" pos:end="697:34"><name pos:start="697:28" pos:end="697:34">cacerts</name></expr></argument>, <argument pos:start="697:37" pos:end="697:47"><expr pos:start="697:37" pos:end="697:47"><name pos:start="697:37" pos:end="697:47">cacerts_len</name></expr></argument>, <argument pos:start="697:50" pos:end="697:68"><expr pos:start="697:50" pos:end="697:68"><name pos:start="697:50" pos:end="697:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="698:9" pos:end="698:33"><expr pos:start="698:9" pos:end="698:33"><name pos:start="698:9" pos:end="698:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="699:5" pos:end="699:28"><expr pos:start="699:5" pos:end="699:27"><call pos:start="699:5" pos:end="699:27"><name pos:start="699:5" pos:end="699:13">CU_ASSERT</name><argument_list pos:start="699:14" pos:end="699:27">(<argument pos:start="699:15" pos:end="699:26"><expr pos:start="699:15" pos:end="699:26"><name pos:start="699:15" pos:end="699:18">ectx</name> <operator pos:start="699:20" pos:end="699:21">!=</operator> <name pos:start="699:23" pos:end="699:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="701:5" pos:end="703:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="704:5" pos:end="704:71"><expr pos:start="704:5" pos:end="704:70"><name pos:start="704:5" pos:end="704:6">rv</name> <operator pos:start="704:8" pos:end="704:8">=</operator> <call pos:start="704:10" pos:end="704:70"><name pos:start="704:10" pos:end="704:28">est_client_set_auth</name><argument_list pos:start="704:29" pos:end="704:70">(<argument pos:start="704:30" pos:end="704:33"><expr pos:start="704:30" pos:end="704:33"><name pos:start="704:30" pos:end="704:33">ectx</name></expr></argument>, <argument pos:start="704:36" pos:end="704:45"><expr pos:start="704:36" pos:end="704:45"><name pos:start="704:36" pos:end="704:45">US3512_UID</name></expr></argument>, <argument pos:start="704:48" pos:end="704:57"><expr pos:start="704:48" pos:end="704:57"><name pos:start="704:48" pos:end="704:57">US3512_PWD</name></expr></argument>, <argument pos:start="704:60" pos:end="704:63"><expr pos:start="704:60" pos:end="704:63"><name pos:start="704:60" pos:end="704:63">NULL</name></expr></argument>, <argument pos:start="704:66" pos:end="704:69"><expr pos:start="704:66" pos:end="704:69"><name pos:start="704:66" pos:end="704:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="705:5" pos:end="705:34"><expr pos:start="705:5" pos:end="705:33"><call pos:start="705:5" pos:end="705:33"><name pos:start="705:5" pos:end="705:13">CU_ASSERT</name><argument_list pos:start="705:14" pos:end="705:33">(<argument pos:start="705:15" pos:end="705:32"><expr pos:start="705:15" pos:end="705:32"><name pos:start="705:15" pos:end="705:16">rv</name> <operator pos:start="705:18" pos:end="705:19">==</operator> <name pos:start="705:21" pos:end="705:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="707:5" pos:end="709:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="710:5" pos:end="711:22"><expr pos:start="710:5" pos:end="711:21"><call pos:start="710:5" pos:end="711:21"><name pos:start="710:5" pos:end="710:25">est_client_set_server</name><argument_list pos:start="710:26" pos:end="711:21">(<argument pos:start="710:27" pos:end="710:30"><expr pos:start="710:27" pos:end="710:30"><name pos:start="710:27" pos:end="710:30">ectx</name></expr></argument>, <argument pos:start="710:33" pos:end="710:48"><expr pos:start="710:33" pos:end="710:48"><name pos:start="710:33" pos:end="710:48">US3512_SERVER_IP</name></expr></argument>, <argument pos:start="710:51" pos:end="710:68"><expr pos:start="710:51" pos:end="710:68"><name pos:start="710:51" pos:end="710:68">US3512_SERVER_PORT</name></expr></argument>,
        <argument pos:start="711:9" pos:end="711:20"><expr pos:start="711:9" pos:end="711:20"><name pos:start="711:9" pos:end="711:20">path_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="713:5" pos:end="715:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="716:5" pos:end="716:33"><expr pos:start="716:5" pos:end="716:32"><name pos:start="716:5" pos:end="716:7">key</name> <operator pos:start="716:9" pos:end="716:9">=</operator> <call pos:start="716:11" pos:end="716:32"><name pos:start="716:11" pos:end="716:30">generate_private_key</name><argument_list pos:start="716:31" pos:end="716:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="717:5" pos:end="717:27"><expr pos:start="717:5" pos:end="717:26"><call pos:start="717:5" pos:end="717:26"><name pos:start="717:5" pos:end="717:13">CU_ASSERT</name><argument_list pos:start="717:14" pos:end="717:26">(<argument pos:start="717:15" pos:end="717:25"><expr pos:start="717:15" pos:end="717:25"><name pos:start="717:15" pos:end="717:17">key</name> <operator pos:start="717:19" pos:end="717:20">!=</operator> <name pos:start="717:22" pos:end="717:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="719:5" pos:end="722:7">/*
     * clear out the global that proves that the path segment
     * made it to the application layer's cal back function
     */</comment>
    <expr_stmt pos:start="723:5" pos:end="723:72"><expr pos:start="723:5" pos:end="723:71"><call pos:start="723:5" pos:end="723:71"><name pos:start="723:5" pos:end="723:10">memset</name><argument_list pos:start="723:11" pos:end="723:71">(<argument pos:start="723:12" pos:end="723:37"><expr pos:start="723:12" pos:end="723:37"><name pos:start="723:12" pos:end="723:37">tst_srvr_path_seg_csrattrs</name></expr></argument>, <argument pos:start="723:40" pos:end="723:40"><expr pos:start="723:40" pos:end="723:40"><literal type="number" pos:start="723:40" pos:end="723:40">0</literal></expr></argument>, <argument pos:start="723:43" pos:end="723:70"><expr pos:start="723:43" pos:end="723:70"><name pos:start="723:43" pos:end="723:66">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="723:68" pos:end="723:68">+</operator> <literal type="number" pos:start="723:70" pos:end="723:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="725:5" pos:end="727:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="728:5" pos:end="728:62"><expr pos:start="728:5" pos:end="728:61"><name pos:start="728:5" pos:end="728:6">rv</name> <operator pos:start="728:8" pos:end="728:8">=</operator> <call pos:start="728:10" pos:end="728:61"><name pos:start="728:10" pos:end="728:32">est_client_get_csrattrs</name><argument_list pos:start="728:33" pos:end="728:61">(<argument pos:start="728:34" pos:end="728:37"><expr pos:start="728:34" pos:end="728:37"><name pos:start="728:34" pos:end="728:37">ectx</name></expr></argument>, <argument pos:start="728:40" pos:end="728:49"><expr pos:start="728:40" pos:end="728:49"><operator pos:start="728:40" pos:end="728:40">&amp;</operator><name pos:start="728:41" pos:end="728:49">attr_data</name></expr></argument>, <argument pos:start="728:52" pos:end="728:60"><expr pos:start="728:52" pos:end="728:60"><operator pos:start="728:52" pos:end="728:52">&amp;</operator><name pos:start="728:53" pos:end="728:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="729:5" pos:end="732:7">/*
     * should be successful, and should have obtained a valid buffer
     * containing the CA certs
     */</comment>
    <expr_stmt pos:start="733:5" pos:end="733:34"><expr pos:start="733:5" pos:end="733:33"><call pos:start="733:5" pos:end="733:33"><name pos:start="733:5" pos:end="733:13">CU_ASSERT</name><argument_list pos:start="733:14" pos:end="733:33">(<argument pos:start="733:15" pos:end="733:32"><expr pos:start="733:15" pos:end="733:32"><name pos:start="733:15" pos:end="733:16">rv</name> <operator pos:start="733:18" pos:end="733:19">==</operator> <name pos:start="733:21" pos:end="733:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="734:5" pos:end="737:7">/*
     * verify that the path segment made it all the way to the callback function
     * at the application layer
     */</comment>
    <expr_stmt pos:start="738:5" pos:end="738:69"><expr pos:start="738:5" pos:end="738:68"><call pos:start="738:5" pos:end="738:68"><name pos:start="738:5" pos:end="738:13">CU_ASSERT</name><argument_list pos:start="738:14" pos:end="738:68">(<argument pos:start="738:15" pos:end="738:67"><expr pos:start="738:15" pos:end="738:67"><call pos:start="738:15" pos:end="738:62"><name pos:start="738:15" pos:end="738:20">strcmp</name><argument_list pos:start="738:21" pos:end="738:62">(<argument pos:start="738:22" pos:end="738:33"><expr pos:start="738:22" pos:end="738:33"><name pos:start="738:22" pos:end="738:33">path_segment</name></expr></argument>, <argument pos:start="738:36" pos:end="738:61"><expr pos:start="738:36" pos:end="738:61"><name pos:start="738:36" pos:end="738:61">tst_srvr_path_seg_csrattrs</name></expr></argument>)</argument_list></call> <operator pos:start="738:64" pos:end="738:65">==</operator> <literal type="number" pos:start="738:67" pos:end="738:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="740:5" pos:end="742:7">/*
     * Cleanup
     */</comment>
    <if_stmt pos:start="743:5" pos:end="744:24"><if pos:start="743:5" pos:end="744:24">if <condition pos:start="743:8" pos:end="743:13">(<expr pos:start="743:9" pos:end="743:12"><name pos:start="743:9" pos:end="743:12">cert</name></expr>)</condition><block type="pseudo" pos:start="744:9" pos:end="744:24"><block_content pos:start="744:9" pos:end="744:24">
        <expr_stmt pos:start="744:9" pos:end="744:24"><expr pos:start="744:9" pos:end="744:23"><call pos:start="744:9" pos:end="744:23"><name pos:start="744:9" pos:end="744:17">X509_free</name><argument_list pos:start="744:18" pos:end="744:23">(<argument pos:start="744:19" pos:end="744:22"><expr pos:start="744:19" pos:end="744:22"><name pos:start="744:19" pos:end="744:22">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="745:5" pos:end="745:23"><expr pos:start="745:5" pos:end="745:22"><call pos:start="745:5" pos:end="745:22"><name pos:start="745:5" pos:end="745:17">EVP_PKEY_free</name><argument_list pos:start="745:18" pos:end="745:22">(<argument pos:start="745:19" pos:end="745:21"><expr pos:start="745:19" pos:end="745:21"><name pos:start="745:19" pos:end="745:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="746:5" pos:end="747:23"><if pos:start="746:5" pos:end="747:23">if <condition pos:start="746:8" pos:end="746:17">(<expr pos:start="746:9" pos:end="746:16"><name pos:start="746:9" pos:end="746:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="747:9" pos:end="747:23"><block_content pos:start="747:9" pos:end="747:23">
        <expr_stmt pos:start="747:9" pos:end="747:23"><expr pos:start="747:9" pos:end="747:22"><call pos:start="747:9" pos:end="747:22"><name pos:start="747:9" pos:end="747:12">free</name><argument_list pos:start="747:13" pos:end="747:22">(<argument pos:start="747:14" pos:end="747:21"><expr pos:start="747:14" pos:end="747:21"><name pos:start="747:14" pos:end="747:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="748:5" pos:end="748:22"><expr pos:start="748:5" pos:end="748:21"><call pos:start="748:5" pos:end="748:21"><name pos:start="748:5" pos:end="748:15">est_destroy</name><argument_list pos:start="748:16" pos:end="748:21">(<argument pos:start="748:17" pos:end="748:20"><expr pos:start="748:17" pos:end="748:20"><name pos:start="748:17" pos:end="748:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="751:1" pos:end="754:3">/*
 * Test the flow of path segments through proxy mode - valid path segment
 * SimpleEnroll
 */</comment>
<function pos:start="755:1" pos:end="777:1"><type pos:start="755:1" pos:end="755:11"><specifier pos:start="755:1" pos:end="755:6">static</specifier> <name pos:start="755:8" pos:end="755:11">void</name></type> <name pos:start="755:13" pos:end="755:24">us3512_test6</name> <parameter_list pos:start="755:26" pos:end="755:31">(<parameter pos:start="755:27" pos:end="755:30"><decl pos:start="755:27" pos:end="755:30"><type pos:start="755:27" pos:end="755:30"><name pos:start="755:27" pos:end="755:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="756:1" pos:end="777:1">{<block_content pos:start="757:5" pos:end="776:25">
    <decl_stmt pos:start="757:5" pos:end="757:12"><decl pos:start="757:5" pos:end="757:11"><type pos:start="757:5" pos:end="757:8"><name pos:start="757:5" pos:end="757:8">long</name></type> <name pos:start="757:10" pos:end="757:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="759:5" pos:end="760:5"><expr pos:start="759:5" pos:end="759:15"><name pos:start="759:5" pos:end="759:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="762:5" pos:end="762:13"><expr pos:start="762:5" pos:end="762:12"><call pos:start="762:5" pos:end="762:12"><name pos:start="762:5" pos:end="762:9">SLEEP</name><argument_list pos:start="762:10" pos:end="762:12">(<argument pos:start="762:11" pos:end="762:11"><expr pos:start="762:11" pos:end="762:11"><literal type="number" pos:start="762:11" pos:end="762:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="764:5" pos:end="764:70"><expr pos:start="764:5" pos:end="764:69"><call pos:start="764:5" pos:end="764:69"><name pos:start="764:5" pos:end="764:10">memset</name><argument_list pos:start="764:11" pos:end="764:69">(<argument pos:start="764:12" pos:end="764:35"><expr pos:start="764:12" pos:end="764:35"><name pos:start="764:12" pos:end="764:35">tst_srvr_path_seg_enroll</name></expr></argument>, <argument pos:start="764:38" pos:end="764:38"><expr pos:start="764:38" pos:end="764:38"><literal type="number" pos:start="764:38" pos:end="764:38">0</literal></expr></argument>, <argument pos:start="764:41" pos:end="764:68"><expr pos:start="764:41" pos:end="764:68"><name pos:start="764:41" pos:end="764:64">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="764:66" pos:end="764:66">+</operator> <literal type="number" pos:start="764:68" pos:end="764:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="766:5" pos:end="768:54"><expr pos:start="766:5" pos:end="768:53"><name pos:start="766:5" pos:end="766:6">rv</name> <operator pos:start="766:8" pos:end="766:8">=</operator> <call pos:start="766:10" pos:end="768:53"><name pos:start="766:10" pos:end="766:23">curl_http_post</name><argument_list pos:start="766:24" pos:end="768:53">(<argument pos:start="766:25" pos:end="766:53"><expr pos:start="766:25" pos:end="766:53"><name pos:start="766:25" pos:end="766:53">US3512_PROXY_ENROLL_URL_VALID</name></expr></argument>, <argument pos:start="766:56" pos:end="766:71"><expr pos:start="766:56" pos:end="766:71"><name pos:start="766:56" pos:end="766:71">US3512_PKCS10_CT</name></expr></argument>,
    <argument pos:start="767:5" pos:end="767:21"><expr pos:start="767:5" pos:end="767:21"><name pos:start="767:5" pos:end="767:21">US3512_PKCS10_REQ</name></expr></argument>, <argument pos:start="767:24" pos:end="767:41"><expr pos:start="767:24" pos:end="767:41"><name pos:start="767:24" pos:end="767:41">US3512_UIDPWD_GOOD</name></expr></argument>,
    <argument pos:start="768:5" pos:end="768:18"><expr pos:start="768:5" pos:end="768:18"><name pos:start="768:5" pos:end="768:18">US3512_CACERTS</name></expr></argument>, <argument pos:start="768:21" pos:end="768:34"><expr pos:start="768:21" pos:end="768:34"><name pos:start="768:21" pos:end="768:34">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="768:37" pos:end="768:40"><expr pos:start="768:37" pos:end="768:40"><name pos:start="768:37" pos:end="768:40">NULL</name></expr></argument>, <argument pos:start="768:43" pos:end="768:46"><expr pos:start="768:43" pos:end="768:46"><name pos:start="768:43" pos:end="768:46">NULL</name></expr></argument>, <argument pos:start="768:49" pos:end="768:52"><expr pos:start="768:49" pos:end="768:52"><name pos:start="768:49" pos:end="768:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="770:5" pos:end="770:69"><expr pos:start="770:5" pos:end="770:68"><call pos:start="770:5" pos:end="770:68"><name pos:start="770:5" pos:end="770:13">CU_ASSERT</name><argument_list pos:start="770:14" pos:end="770:68">(<argument pos:start="770:15" pos:end="770:67"><expr pos:start="770:15" pos:end="770:67"><call pos:start="770:15" pos:end="770:62"><name pos:start="770:15" pos:end="770:20">strcmp</name><argument_list pos:start="770:21" pos:end="770:62">(<argument pos:start="770:22" pos:end="770:35"><expr pos:start="770:22" pos:end="770:35"><name pos:start="770:22" pos:end="770:35">PATH_SEG_VALID</name></expr></argument>, <argument pos:start="770:38" pos:end="770:61"><expr pos:start="770:38" pos:end="770:61"><name pos:start="770:38" pos:end="770:61">tst_srvr_path_seg_enroll</name></expr></argument>)</argument_list></call> <operator pos:start="770:64" pos:end="770:65">==</operator> <literal type="number" pos:start="770:67" pos:end="770:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="772:5" pos:end="775:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="776:5" pos:end="776:25"><expr pos:start="776:5" pos:end="776:24"><call pos:start="776:5" pos:end="776:24"><name pos:start="776:5" pos:end="776:13">CU_ASSERT</name><argument_list pos:start="776:14" pos:end="776:24">(<argument pos:start="776:15" pos:end="776:23"><expr pos:start="776:15" pos:end="776:23"><name pos:start="776:15" pos:end="776:16">rv</name> <operator pos:start="776:18" pos:end="776:19">==</operator> <literal type="number" pos:start="776:21" pos:end="776:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="779:1" pos:end="783:3">/*
 * Test the flow of path segments through proxy mode -
 *  path segment is set to the maximum size
 *
 */</comment>
<function pos:start="784:1" pos:end="800:1"><type pos:start="784:1" pos:end="784:11"><specifier pos:start="784:1" pos:end="784:6">static</specifier> <name pos:start="784:8" pos:end="784:11">void</name></type> <name pos:start="784:13" pos:end="784:24">us3512_test7</name> <parameter_list pos:start="784:26" pos:end="784:31">(<parameter pos:start="784:27" pos:end="784:30"><decl pos:start="784:27" pos:end="784:30"><type pos:start="784:27" pos:end="784:30"><name pos:start="784:27" pos:end="784:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="785:1" pos:end="800:1">{<block_content pos:start="786:5" pos:end="799:25">
    <decl_stmt pos:start="786:5" pos:end="786:12"><decl pos:start="786:5" pos:end="786:11"><type pos:start="786:5" pos:end="786:8"><name pos:start="786:5" pos:end="786:8">long</name></type> <name pos:start="786:10" pos:end="786:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="788:5" pos:end="789:5"><expr pos:start="788:5" pos:end="788:15"><name pos:start="788:5" pos:end="788:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="791:5" pos:end="791:13"><expr pos:start="791:5" pos:end="791:12"><call pos:start="791:5" pos:end="791:12"><name pos:start="791:5" pos:end="791:9">SLEEP</name><argument_list pos:start="791:10" pos:end="791:12">(<argument pos:start="791:11" pos:end="791:11"><expr pos:start="791:11" pos:end="791:11"><literal type="number" pos:start="791:11" pos:end="791:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="792:5" pos:end="794:20"><expr pos:start="792:5" pos:end="794:19"><name pos:start="792:5" pos:end="792:6">rv</name> <operator pos:start="792:8" pos:end="792:8">=</operator> <call pos:start="792:10" pos:end="794:19"><name pos:start="792:10" pos:end="792:23">curl_http_post</name><argument_list pos:start="792:24" pos:end="794:19">(<argument pos:start="792:25" pos:end="792:51"><expr pos:start="792:25" pos:end="792:51"><name pos:start="792:25" pos:end="792:51">US3512_PROXY_ENROLL_URL_MAX</name></expr></argument>, <argument pos:start="792:54" pos:end="792:69"><expr pos:start="792:54" pos:end="792:69"><name pos:start="792:54" pos:end="792:69">US3512_PKCS10_CT</name></expr></argument>,
    <argument pos:start="793:5" pos:end="793:21"><expr pos:start="793:5" pos:end="793:21"><name pos:start="793:5" pos:end="793:21">US3512_PKCS10_REQ</name></expr></argument>, <argument pos:start="793:24" pos:end="793:41"><expr pos:start="793:24" pos:end="793:41"><name pos:start="793:24" pos:end="793:41">US3512_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="793:44" pos:end="793:57"><expr pos:start="793:44" pos:end="793:57"><name pos:start="793:44" pos:end="793:57">US3512_CACERTS</name></expr></argument>, <argument pos:start="793:60" pos:end="793:73"><expr pos:start="793:60" pos:end="793:73"><name pos:start="793:60" pos:end="793:73">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="793:76" pos:end="793:79"><expr pos:start="793:76" pos:end="793:79"><name pos:start="793:76" pos:end="793:79">NULL</name></expr></argument>,
        <argument pos:start="794:9" pos:end="794:12"><expr pos:start="794:9" pos:end="794:12"><name pos:start="794:9" pos:end="794:12">NULL</name></expr></argument>, <argument pos:start="794:15" pos:end="794:18"><expr pos:start="794:15" pos:end="794:18"><name pos:start="794:15" pos:end="794:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="795:5" pos:end="798:7">/*
     * Since we passed in a path segment that is too long, it
     * should get caught at the proxy and a 400 should be returned
     */</comment>
    <expr_stmt pos:start="799:5" pos:end="799:25"><expr pos:start="799:5" pos:end="799:24"><call pos:start="799:5" pos:end="799:24"><name pos:start="799:5" pos:end="799:13">CU_ASSERT</name><argument_list pos:start="799:14" pos:end="799:24">(<argument pos:start="799:15" pos:end="799:23"><expr pos:start="799:15" pos:end="799:23"><name pos:start="799:15" pos:end="799:16">rv</name> <operator pos:start="799:18" pos:end="799:19">==</operator> <literal type="number" pos:start="799:21" pos:end="799:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="802:1" pos:end="806:3">/*
 * Test the flow of path segments through proxy mode -
 *  path segment that is too large
 *
 */</comment>
<function pos:start="807:1" pos:end="823:1"><type pos:start="807:1" pos:end="807:11"><specifier pos:start="807:1" pos:end="807:6">static</specifier> <name pos:start="807:8" pos:end="807:11">void</name></type> <name pos:start="807:13" pos:end="807:24">us3512_test8</name> <parameter_list pos:start="807:26" pos:end="807:31">(<parameter pos:start="807:27" pos:end="807:30"><decl pos:start="807:27" pos:end="807:30"><type pos:start="807:27" pos:end="807:30"><name pos:start="807:27" pos:end="807:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="808:1" pos:end="823:1">{<block_content pos:start="809:5" pos:end="822:25">
    <decl_stmt pos:start="809:5" pos:end="809:12"><decl pos:start="809:5" pos:end="809:11"><type pos:start="809:5" pos:end="809:8"><name pos:start="809:5" pos:end="809:8">long</name></type> <name pos:start="809:10" pos:end="809:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="811:5" pos:end="812:5"><expr pos:start="811:5" pos:end="811:15"><name pos:start="811:5" pos:end="811:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="814:5" pos:end="814:13"><expr pos:start="814:5" pos:end="814:12"><call pos:start="814:5" pos:end="814:12"><name pos:start="814:5" pos:end="814:9">SLEEP</name><argument_list pos:start="814:10" pos:end="814:12">(<argument pos:start="814:11" pos:end="814:11"><expr pos:start="814:11" pos:end="814:11"><literal type="number" pos:start="814:11" pos:end="814:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="815:5" pos:end="817:20"><expr pos:start="815:5" pos:end="817:19"><name pos:start="815:5" pos:end="815:6">rv</name> <operator pos:start="815:8" pos:end="815:8">=</operator> <call pos:start="815:10" pos:end="817:19"><name pos:start="815:10" pos:end="815:23">curl_http_post</name><argument_list pos:start="815:24" pos:end="817:19">(<argument pos:start="815:25" pos:end="815:56"><expr pos:start="815:25" pos:end="815:56"><name pos:start="815:25" pos:end="815:56">US3512_PROXY_ENROLL_URL_TOO_LONG</name></expr></argument>, <argument pos:start="815:59" pos:end="815:74"><expr pos:start="815:59" pos:end="815:74"><name pos:start="815:59" pos:end="815:74">US3512_PKCS10_CT</name></expr></argument>,
    <argument pos:start="816:5" pos:end="816:21"><expr pos:start="816:5" pos:end="816:21"><name pos:start="816:5" pos:end="816:21">US3512_PKCS10_REQ</name></expr></argument>, <argument pos:start="816:24" pos:end="816:41"><expr pos:start="816:24" pos:end="816:41"><name pos:start="816:24" pos:end="816:41">US3512_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="816:44" pos:end="816:57"><expr pos:start="816:44" pos:end="816:57"><name pos:start="816:44" pos:end="816:57">US3512_CACERTS</name></expr></argument>, <argument pos:start="816:60" pos:end="816:73"><expr pos:start="816:60" pos:end="816:73"><name pos:start="816:60" pos:end="816:73">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="816:76" pos:end="816:79"><expr pos:start="816:76" pos:end="816:79"><name pos:start="816:76" pos:end="816:79">NULL</name></expr></argument>,
        <argument pos:start="817:9" pos:end="817:12"><expr pos:start="817:9" pos:end="817:12"><name pos:start="817:9" pos:end="817:12">NULL</name></expr></argument>, <argument pos:start="817:15" pos:end="817:18"><expr pos:start="817:15" pos:end="817:18"><name pos:start="817:15" pos:end="817:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="818:5" pos:end="821:7">/*
     * Since we passed in a path segment that is too long, it
     * should get caught at the proxy and a 400 should be returned
     */</comment>
    <expr_stmt pos:start="822:5" pos:end="822:25"><expr pos:start="822:5" pos:end="822:24"><call pos:start="822:5" pos:end="822:24"><name pos:start="822:5" pos:end="822:13">CU_ASSERT</name><argument_list pos:start="822:14" pos:end="822:24">(<argument pos:start="822:15" pos:end="822:23"><expr pos:start="822:15" pos:end="822:23"><name pos:start="822:15" pos:end="822:16">rv</name> <operator pos:start="822:18" pos:end="822:19">==</operator> <literal type="number" pos:start="822:21" pos:end="822:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="825:1" pos:end="828:3">/*
 * Test segment that is an operation path
 *
 */</comment>
<function pos:start="829:1" pos:end="845:1"><type pos:start="829:1" pos:end="829:11"><specifier pos:start="829:1" pos:end="829:6">static</specifier> <name pos:start="829:8" pos:end="829:11">void</name></type> <name pos:start="829:13" pos:end="829:24">us3512_test9</name> <parameter_list pos:start="829:26" pos:end="829:31">(<parameter pos:start="829:27" pos:end="829:30"><decl pos:start="829:27" pos:end="829:30"><type pos:start="829:27" pos:end="829:30"><name pos:start="829:27" pos:end="829:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="830:1" pos:end="845:1">{<block_content pos:start="831:5" pos:end="844:25">
    <decl_stmt pos:start="831:5" pos:end="831:12"><decl pos:start="831:5" pos:end="831:11"><type pos:start="831:5" pos:end="831:8"><name pos:start="831:5" pos:end="831:8">long</name></type> <name pos:start="831:10" pos:end="831:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="833:5" pos:end="834:5"><expr pos:start="833:5" pos:end="833:15"><name pos:start="833:5" pos:end="833:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="836:5" pos:end="836:13"><expr pos:start="836:5" pos:end="836:12"><call pos:start="836:5" pos:end="836:12"><name pos:start="836:5" pos:end="836:9">SLEEP</name><argument_list pos:start="836:10" pos:end="836:12">(<argument pos:start="836:11" pos:end="836:11"><expr pos:start="836:11" pos:end="836:11"><literal type="number" pos:start="836:11" pos:end="836:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="837:5" pos:end="839:20"><expr pos:start="837:5" pos:end="839:19"><name pos:start="837:5" pos:end="837:6">rv</name> <operator pos:start="837:8" pos:end="837:8">=</operator> <call pos:start="837:10" pos:end="839:19"><name pos:start="837:10" pos:end="837:23">curl_http_post</name><argument_list pos:start="837:24" pos:end="839:19">(<argument pos:start="837:25" pos:end="837:60"><expr pos:start="837:25" pos:end="837:60"><name pos:start="837:25" pos:end="837:60">US3512_PROXY_ENROLL_URL_IS_OPERATION</name></expr></argument>, <argument pos:start="837:63" pos:end="837:78"><expr pos:start="837:63" pos:end="837:78"><name pos:start="837:63" pos:end="837:78">US3512_PKCS10_CT</name></expr></argument>,
    <argument pos:start="838:5" pos:end="838:21"><expr pos:start="838:5" pos:end="838:21"><name pos:start="838:5" pos:end="838:21">US3512_PKCS10_REQ</name></expr></argument>, <argument pos:start="838:24" pos:end="838:41"><expr pos:start="838:24" pos:end="838:41"><name pos:start="838:24" pos:end="838:41">US3512_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="838:44" pos:end="838:57"><expr pos:start="838:44" pos:end="838:57"><name pos:start="838:44" pos:end="838:57">US3512_CACERTS</name></expr></argument>, <argument pos:start="838:60" pos:end="838:73"><expr pos:start="838:60" pos:end="838:73"><name pos:start="838:60" pos:end="838:73">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="838:76" pos:end="838:79"><expr pos:start="838:76" pos:end="838:79"><name pos:start="838:76" pos:end="838:79">NULL</name></expr></argument>,
        <argument pos:start="839:9" pos:end="839:12"><expr pos:start="839:9" pos:end="839:12"><name pos:start="839:9" pos:end="839:12">NULL</name></expr></argument>, <argument pos:start="839:15" pos:end="839:18"><expr pos:start="839:15" pos:end="839:18"><name pos:start="839:15" pos:end="839:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="840:5" pos:end="843:7">/*
     * Since we passed in a path segment that equals an operation we
     * should get a 400 in return
     */</comment>
    <expr_stmt pos:start="844:5" pos:end="844:25"><expr pos:start="844:5" pos:end="844:24"><call pos:start="844:5" pos:end="844:24"><name pos:start="844:5" pos:end="844:13">CU_ASSERT</name><argument_list pos:start="844:14" pos:end="844:24">(<argument pos:start="844:15" pos:end="844:23"><expr pos:start="844:15" pos:end="844:23"><name pos:start="844:15" pos:end="844:16">rv</name> <operator pos:start="844:18" pos:end="844:19">==</operator> <literal type="number" pos:start="844:21" pos:end="844:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="847:1" pos:end="850:3">/*
 * Test segment that is an operation path
 *
 */</comment>
<function pos:start="851:1" pos:end="867:1"><type pos:start="851:1" pos:end="851:11"><specifier pos:start="851:1" pos:end="851:6">static</specifier> <name pos:start="851:8" pos:end="851:11">void</name></type> <name pos:start="851:13" pos:end="851:25">us3512_test10</name> <parameter_list pos:start="851:27" pos:end="851:32">(<parameter pos:start="851:28" pos:end="851:31"><decl pos:start="851:28" pos:end="851:31"><type pos:start="851:28" pos:end="851:31"><name pos:start="851:28" pos:end="851:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="852:1" pos:end="867:1">{<block_content pos:start="853:5" pos:end="866:25">
    <decl_stmt pos:start="853:5" pos:end="853:12"><decl pos:start="853:5" pos:end="853:11"><type pos:start="853:5" pos:end="853:8"><name pos:start="853:5" pos:end="853:8">long</name></type> <name pos:start="853:10" pos:end="853:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="855:5" pos:end="856:5"><expr pos:start="855:5" pos:end="855:15"><name pos:start="855:5" pos:end="855:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="858:5" pos:end="858:13"><expr pos:start="858:5" pos:end="858:12"><call pos:start="858:5" pos:end="858:12"><name pos:start="858:5" pos:end="858:9">SLEEP</name><argument_list pos:start="858:10" pos:end="858:12">(<argument pos:start="858:11" pos:end="858:11"><expr pos:start="858:11" pos:end="858:11"><literal type="number" pos:start="858:11" pos:end="858:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="859:5" pos:end="861:20"><expr pos:start="859:5" pos:end="861:19"><name pos:start="859:5" pos:end="859:6">rv</name> <operator pos:start="859:8" pos:end="859:8">=</operator> <call pos:start="859:10" pos:end="861:19"><name pos:start="859:10" pos:end="859:23">curl_http_post</name><argument_list pos:start="859:24" pos:end="861:19">(<argument pos:start="859:25" pos:end="859:56"><expr pos:start="859:25" pos:end="859:56"><name pos:start="859:25" pos:end="859:56">US3512_PROXY_ENROLL_URL_TOO_MANY</name></expr></argument>, <argument pos:start="859:59" pos:end="859:74"><expr pos:start="859:59" pos:end="859:74"><name pos:start="859:59" pos:end="859:74">US3512_PKCS10_CT</name></expr></argument>,
    <argument pos:start="860:5" pos:end="860:21"><expr pos:start="860:5" pos:end="860:21"><name pos:start="860:5" pos:end="860:21">US3512_PKCS10_REQ</name></expr></argument>, <argument pos:start="860:24" pos:end="860:41"><expr pos:start="860:24" pos:end="860:41"><name pos:start="860:24" pos:end="860:41">US3512_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="860:44" pos:end="860:57"><expr pos:start="860:44" pos:end="860:57"><name pos:start="860:44" pos:end="860:57">US3512_CACERTS</name></expr></argument>, <argument pos:start="860:60" pos:end="860:73"><expr pos:start="860:60" pos:end="860:73"><name pos:start="860:60" pos:end="860:73">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="860:76" pos:end="860:79"><expr pos:start="860:76" pos:end="860:79"><name pos:start="860:76" pos:end="860:79">NULL</name></expr></argument>,
        <argument pos:start="861:9" pos:end="861:12"><expr pos:start="861:9" pos:end="861:12"><name pos:start="861:9" pos:end="861:12">NULL</name></expr></argument>, <argument pos:start="861:15" pos:end="861:18"><expr pos:start="861:15" pos:end="861:18"><name pos:start="861:15" pos:end="861:18">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="862:5" pos:end="865:7">/*
     * Since we passed in a path segment that equals an operation we
     * should get a 400 in return
     */</comment>
    <expr_stmt pos:start="866:5" pos:end="866:25"><expr pos:start="866:5" pos:end="866:24"><call pos:start="866:5" pos:end="866:24"><name pos:start="866:5" pos:end="866:13">CU_ASSERT</name><argument_list pos:start="866:14" pos:end="866:24">(<argument pos:start="866:15" pos:end="866:23"><expr pos:start="866:15" pos:end="866:23"><name pos:start="866:15" pos:end="866:16">rv</name> <operator pos:start="866:18" pos:end="866:19">==</operator> <literal type="number" pos:start="866:21" pos:end="866:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="869:1" pos:end="874:3">/*
 * Test segment that contains a valid operation string within it,
 * in this case, at the front.  This is a valid path segment, so
 * the test should pass.
 *
 */</comment>
<function pos:start="875:1" pos:end="901:1"><type pos:start="875:1" pos:end="875:11"><specifier pos:start="875:1" pos:end="875:6">static</specifier> <name pos:start="875:8" pos:end="875:11">void</name></type> <name pos:start="875:13" pos:end="875:25">us3512_test11</name> <parameter_list pos:start="875:27" pos:end="875:32">(<parameter pos:start="875:28" pos:end="875:31"><decl pos:start="875:28" pos:end="875:31"><type pos:start="875:28" pos:end="875:31"><name pos:start="875:28" pos:end="875:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="876:1" pos:end="901:1">{<block_content pos:start="877:5" pos:end="900:25">
    <decl_stmt pos:start="877:5" pos:end="877:12"><decl pos:start="877:5" pos:end="877:11"><type pos:start="877:5" pos:end="877:8"><name pos:start="877:5" pos:end="877:8">long</name></type> <name pos:start="877:10" pos:end="877:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="879:5" pos:end="880:5"><expr pos:start="879:5" pos:end="879:15"><name pos:start="879:5" pos:end="879:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="882:5" pos:end="882:13"><expr pos:start="882:5" pos:end="882:12"><call pos:start="882:5" pos:end="882:12"><name pos:start="882:5" pos:end="882:9">SLEEP</name><argument_list pos:start="882:10" pos:end="882:12">(<argument pos:start="882:11" pos:end="882:11"><expr pos:start="882:11" pos:end="882:11"><literal type="number" pos:start="882:11" pos:end="882:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="884:5" pos:end="884:70"><expr pos:start="884:5" pos:end="884:69"><call pos:start="884:5" pos:end="884:69"><name pos:start="884:5" pos:end="884:10">memset</name><argument_list pos:start="884:11" pos:end="884:69">(<argument pos:start="884:12" pos:end="884:35"><expr pos:start="884:12" pos:end="884:35"><name pos:start="884:12" pos:end="884:35">tst_srvr_path_seg_enroll</name></expr></argument>, <argument pos:start="884:38" pos:end="884:38"><expr pos:start="884:38" pos:end="884:38"><literal type="number" pos:start="884:38" pos:end="884:38">0</literal></expr></argument>, <argument pos:start="884:41" pos:end="884:68"><expr pos:start="884:41" pos:end="884:68"><name pos:start="884:41" pos:end="884:64">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="884:66" pos:end="884:66">+</operator> <literal type="number" pos:start="884:68" pos:end="884:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="885:5" pos:end="885:69"><expr pos:start="885:5" pos:end="885:68"><call pos:start="885:5" pos:end="885:68"><name pos:start="885:5" pos:end="885:10">memset</name><argument_list pos:start="885:11" pos:end="885:68">(<argument pos:start="885:12" pos:end="885:34"><expr pos:start="885:12" pos:end="885:34"><name pos:start="885:12" pos:end="885:34">tst_proxy_path_seg_auth</name></expr></argument>, <argument pos:start="885:37" pos:end="885:37"><expr pos:start="885:37" pos:end="885:37"><literal type="number" pos:start="885:37" pos:end="885:37">0</literal></expr></argument>, <argument pos:start="885:40" pos:end="885:67"><expr pos:start="885:40" pos:end="885:67"><name pos:start="885:40" pos:end="885:63">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="885:65" pos:end="885:65">+</operator> <literal type="number" pos:start="885:67" pos:end="885:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="887:5" pos:end="889:74"><expr pos:start="887:5" pos:end="889:73"><name pos:start="887:5" pos:end="887:6">rv</name> <operator pos:start="887:8" pos:end="887:8">=</operator> <call pos:start="887:10" pos:end="889:73"><name pos:start="887:10" pos:end="887:23">curl_http_post</name><argument_list pos:start="887:24" pos:end="889:73">(<argument pos:start="887:25" pos:end="887:66"><expr pos:start="887:25" pos:end="887:66"><name pos:start="887:25" pos:end="887:66">US3512_PROXY_ENROLL_URL_CONTAINS_OPERATION</name></expr></argument>,
    <argument pos:start="888:5" pos:end="888:20"><expr pos:start="888:5" pos:end="888:20"><name pos:start="888:5" pos:end="888:20">US3512_PKCS10_CT</name></expr></argument>, <argument pos:start="888:23" pos:end="888:39"><expr pos:start="888:23" pos:end="888:39"><name pos:start="888:23" pos:end="888:39">US3512_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="889:5" pos:end="889:22"><expr pos:start="889:5" pos:end="889:22"><name pos:start="889:5" pos:end="889:22">US3512_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="889:25" pos:end="889:38"><expr pos:start="889:25" pos:end="889:38"><name pos:start="889:25" pos:end="889:38">US3512_CACERTS</name></expr></argument>, <argument pos:start="889:41" pos:end="889:54"><expr pos:start="889:41" pos:end="889:54"><name pos:start="889:41" pos:end="889:54">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="889:57" pos:end="889:60"><expr pos:start="889:57" pos:end="889:60"><name pos:start="889:57" pos:end="889:60">NULL</name></expr></argument>, <argument pos:start="889:63" pos:end="889:66"><expr pos:start="889:63" pos:end="889:66"><name pos:start="889:63" pos:end="889:66">NULL</name></expr></argument>, <argument pos:start="889:69" pos:end="889:72"><expr pos:start="889:69" pos:end="889:72"><name pos:start="889:69" pos:end="889:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="891:5" pos:end="892:76"><expr pos:start="891:5" pos:end="892:75"><call pos:start="891:5" pos:end="892:75"><name pos:start="891:5" pos:end="891:13">CU_ASSERT</name><argument_list pos:start="891:14" pos:end="892:75">(
        <argument pos:start="892:9" pos:end="892:74"><expr pos:start="892:9" pos:end="892:74"><call pos:start="892:9" pos:end="892:69"><name pos:start="892:9" pos:end="892:14">strcmp</name><argument_list pos:start="892:15" pos:end="892:69">(<argument pos:start="892:16" pos:end="892:42"><expr pos:start="892:16" pos:end="892:42"><name pos:start="892:16" pos:end="892:42">PATH_SEG_CONTAINS_OPERATION</name></expr></argument>, <argument pos:start="892:45" pos:end="892:68"><expr pos:start="892:45" pos:end="892:68"><name pos:start="892:45" pos:end="892:68">tst_srvr_path_seg_enroll</name></expr></argument>)</argument_list></call> <operator pos:start="892:71" pos:end="892:72">==</operator> <literal type="number" pos:start="892:74" pos:end="892:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="893:5" pos:end="894:75"><expr pos:start="893:5" pos:end="894:74"><call pos:start="893:5" pos:end="894:74"><name pos:start="893:5" pos:end="893:13">CU_ASSERT</name><argument_list pos:start="893:14" pos:end="894:74">(
        <argument pos:start="894:9" pos:end="894:73"><expr pos:start="894:9" pos:end="894:73"><call pos:start="894:9" pos:end="894:68"><name pos:start="894:9" pos:end="894:14">strcmp</name><argument_list pos:start="894:15" pos:end="894:68">(<argument pos:start="894:16" pos:end="894:42"><expr pos:start="894:16" pos:end="894:42"><name pos:start="894:16" pos:end="894:42">PATH_SEG_CONTAINS_OPERATION</name></expr></argument>, <argument pos:start="894:45" pos:end="894:67"><expr pos:start="894:45" pos:end="894:67"><name pos:start="894:45" pos:end="894:67">tst_proxy_path_seg_auth</name></expr></argument>)</argument_list></call> <operator pos:start="894:70" pos:end="894:71">==</operator> <literal type="number" pos:start="894:73" pos:end="894:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="896:5" pos:end="899:7">/*
     * Since we passed in a path segment that equals an operation we
     * should get a 400 in return
     */</comment>
    <expr_stmt pos:start="900:5" pos:end="900:25"><expr pos:start="900:5" pos:end="900:24"><call pos:start="900:5" pos:end="900:24"><name pos:start="900:5" pos:end="900:13">CU_ASSERT</name><argument_list pos:start="900:14" pos:end="900:24">(<argument pos:start="900:15" pos:end="900:23"><expr pos:start="900:15" pos:end="900:23"><name pos:start="900:15" pos:end="900:16">rv</name> <operator pos:start="900:18" pos:end="900:19">==</operator> <literal type="number" pos:start="900:21" pos:end="900:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="903:1" pos:end="912:3">/*
 * taken from US897/test11
 * CAcerts to the server - including a path segment in the uri.
 *
 * Path Segment testing
 * - Verifies the client includes a configured
 *   path segment
 * - Verifies that the server correctly parses out
 *   a valid path segment and passes it up on the CA certs callback.
 */</comment>
<function pos:start="913:1" pos:end="999:1"><type pos:start="913:1" pos:end="913:11"><specifier pos:start="913:1" pos:end="913:6">static</specifier> <name pos:start="913:8" pos:end="913:11">void</name></type> <name pos:start="913:13" pos:end="913:25">us3512_test12</name> <parameter_list pos:start="913:27" pos:end="913:32">(<parameter pos:start="913:28" pos:end="913:31"><decl pos:start="913:28" pos:end="913:31"><type pos:start="913:28" pos:end="913:31"><name pos:start="913:28" pos:end="913:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="914:1" pos:end="999:1">{<block_content pos:start="915:5" pos:end="998:5">
    <decl_stmt pos:start="915:5" pos:end="915:18"><decl pos:start="915:5" pos:end="915:17"><type pos:start="915:5" pos:end="915:13"><name pos:start="915:5" pos:end="915:11">EST_CTX</name> <modifier pos:start="915:13" pos:end="915:13">*</modifier></type><name pos:start="915:14" pos:end="915:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="916:5" pos:end="916:31"><decl pos:start="916:5" pos:end="916:30"><type pos:start="916:5" pos:end="916:19"><name pos:start="916:5" pos:end="916:12">unsigned</name> <name pos:start="916:14" pos:end="916:17">char</name> <modifier pos:start="916:19" pos:end="916:19">*</modifier></type><name pos:start="916:20" pos:end="916:23">pkey</name> <init pos:start="916:25" pos:end="916:30">= <expr pos:start="916:27" pos:end="916:30"><name pos:start="916:27" pos:end="916:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="917:5" pos:end="917:34"><decl pos:start="917:5" pos:end="917:33"><type pos:start="917:5" pos:end="917:19"><name pos:start="917:5" pos:end="917:12">unsigned</name> <name pos:start="917:14" pos:end="917:17">char</name> <modifier pos:start="917:19" pos:end="917:19">*</modifier></type><name pos:start="917:20" pos:end="917:26">cacerts</name> <init pos:start="917:28" pos:end="917:33">= <expr pos:start="917:30" pos:end="917:33"><name pos:start="917:30" pos:end="917:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="918:5" pos:end="918:24"><decl pos:start="918:5" pos:end="918:23"><type pos:start="918:5" pos:end="918:7"><name pos:start="918:5" pos:end="918:7">int</name></type> <name pos:start="918:9" pos:end="918:19">cacerts_len</name> <init pos:start="918:21" pos:end="918:23">= <expr pos:start="918:23" pos:end="918:23"><literal type="number" pos:start="918:23" pos:end="918:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="919:5" pos:end="919:32"><decl pos:start="919:5" pos:end="919:31"><type pos:start="919:5" pos:end="919:13"><name pos:start="919:5" pos:end="919:13">EST_ERROR</name></type> <name pos:start="919:15" pos:end="919:16">rc</name> <init pos:start="919:18" pos:end="919:31">= <expr pos:start="919:20" pos:end="919:31"><name pos:start="919:20" pos:end="919:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="921:5" pos:end="921:44"><decl pos:start="921:5" pos:end="921:43"><type pos:start="921:5" pos:end="921:19"><name pos:start="921:5" pos:end="921:12">unsigned</name> <name pos:start="921:14" pos:end="921:17">char</name> <modifier pos:start="921:19" pos:end="921:19">*</modifier></type><name pos:start="921:20" pos:end="921:36">retrieved_cacerts</name> <init pos:start="921:38" pos:end="921:43">= <expr pos:start="921:40" pos:end="921:43"><name pos:start="921:40" pos:end="921:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="922:5" pos:end="922:34"><decl pos:start="922:5" pos:end="922:33"><type pos:start="922:5" pos:end="922:7"><name pos:start="922:5" pos:end="922:7">int</name></type> <name pos:start="922:9" pos:end="922:29">retrieved_cacerts_len</name> <init pos:start="922:31" pos:end="922:33">= <expr pos:start="922:33" pos:end="922:33"><literal type="number" pos:start="922:33" pos:end="922:33">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="923:5" pos:end="923:24"><decl pos:start="923:5" pos:end="923:23"><type pos:start="923:5" pos:end="923:14"><name pos:start="923:5" pos:end="923:12">EVP_PKEY</name> <modifier pos:start="923:14" pos:end="923:14">*</modifier></type> <name pos:start="923:16" pos:end="923:23">priv_key</name></decl>;</decl_stmt>

    <decl_stmt pos:start="925:5" pos:end="925:49"><decl pos:start="925:5" pos:end="925:48"><type pos:start="925:5" pos:end="925:10"><name pos:start="925:5" pos:end="925:8">char</name> <modifier pos:start="925:10" pos:end="925:10">*</modifier></type><name pos:start="925:11" pos:end="925:22">path_segment</name> <init pos:start="925:24" pos:end="925:48">= <expr pos:start="925:26" pos:end="925:48"><literal type="string" pos:start="925:26" pos:end="925:48">"path_seg_us3512_test4"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="927:5" pos:end="927:13"><expr pos:start="927:5" pos:end="927:12"><call pos:start="927:5" pos:end="927:12"><name pos:start="927:5" pos:end="927:9">SLEEP</name><argument_list pos:start="927:10" pos:end="927:12">(<argument pos:start="927:11" pos:end="927:11"><expr pos:start="927:11" pos:end="927:11"><literal type="number" pos:start="927:11" pos:end="927:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="929:5" pos:end="931:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="932:5" pos:end="932:63"><expr pos:start="932:5" pos:end="932:62"><name pos:start="932:5" pos:end="932:15">cacerts_len</name> <operator pos:start="932:17" pos:end="932:17">=</operator> <call pos:start="932:19" pos:end="932:62"><name pos:start="932:19" pos:end="932:34">read_binary_file</name><argument_list pos:start="932:35" pos:end="932:62">(<argument pos:start="932:36" pos:end="932:51"><expr pos:start="932:36" pos:end="932:51"><name pos:start="932:36" pos:end="932:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="932:54" pos:end="932:61"><expr pos:start="932:54" pos:end="932:61"><operator pos:start="932:54" pos:end="932:54">&amp;</operator><name pos:start="932:55" pos:end="932:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="933:5" pos:end="933:31"><expr pos:start="933:5" pos:end="933:30"><call pos:start="933:5" pos:end="933:30"><name pos:start="933:5" pos:end="933:13">CU_ASSERT</name><argument_list pos:start="933:14" pos:end="933:30">(<argument pos:start="933:15" pos:end="933:29"><expr pos:start="933:15" pos:end="933:29"><name pos:start="933:15" pos:end="933:25">cacerts_len</name> <operator pos:start="933:27" pos:end="933:27">&gt;</operator> <literal type="number" pos:start="933:29" pos:end="933:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="935:5" pos:end="937:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="938:5" pos:end="938:50"><expr pos:start="938:5" pos:end="938:49"><name pos:start="938:5" pos:end="938:12">priv_key</name> <operator pos:start="938:14" pos:end="938:14">=</operator> <call pos:start="938:16" pos:end="938:49"><name pos:start="938:16" pos:end="938:31">read_private_key</name><argument_list pos:start="938:32" pos:end="938:49">(<argument pos:start="938:33" pos:end="938:48"><expr pos:start="938:33" pos:end="938:48"><name pos:start="938:33" pos:end="938:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="939:5" pos:end="942:5"><if pos:start="939:5" pos:end="942:5">if <condition pos:start="939:8" pos:end="939:25">(<expr pos:start="939:9" pos:end="939:24"><name pos:start="939:9" pos:end="939:16">priv_key</name> <operator pos:start="939:18" pos:end="939:19">==</operator> <name pos:start="939:21" pos:end="939:24">NULL</name></expr>)</condition> <block pos:start="939:27" pos:end="942:5">{<block_content pos:start="940:9" pos:end="941:15">
        <expr_stmt pos:start="940:9" pos:end="940:80"><expr pos:start="940:9" pos:end="940:79"><call pos:start="940:9" pos:end="940:79"><name pos:start="940:9" pos:end="940:14">printf</name><argument_list pos:start="940:15" pos:end="940:79">(<argument pos:start="940:16" pos:end="940:60"><expr pos:start="940:16" pos:end="940:60"><literal type="string" pos:start="940:16" pos:end="940:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="940:63" pos:end="940:78"><expr pos:start="940:63" pos:end="940:78"><name pos:start="940:63" pos:end="940:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="941:9" pos:end="941:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="944:5" pos:end="945:35"><expr pos:start="944:5" pos:end="945:34"><name pos:start="944:5" pos:end="944:8">ectx</name> <operator pos:start="944:10" pos:end="944:10">=</operator> <call pos:start="944:12" pos:end="945:34"><name pos:start="944:12" pos:end="944:26">est_client_init</name><argument_list pos:start="944:27" pos:end="945:34">(<argument pos:start="944:28" pos:end="944:34"><expr pos:start="944:28" pos:end="944:34"><name pos:start="944:28" pos:end="944:34">cacerts</name></expr></argument>, <argument pos:start="944:37" pos:end="944:47"><expr pos:start="944:37" pos:end="944:47"><name pos:start="944:37" pos:end="944:47">cacerts_len</name></expr></argument>, <argument pos:start="944:50" pos:end="944:68"><expr pos:start="944:50" pos:end="944:68"><name pos:start="944:50" pos:end="944:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="945:9" pos:end="945:33"><expr pos:start="945:9" pos:end="945:33"><name pos:start="945:9" pos:end="945:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="946:5" pos:end="946:28"><expr pos:start="946:5" pos:end="946:27"><call pos:start="946:5" pos:end="946:27"><name pos:start="946:5" pos:end="946:13">CU_ASSERT</name><argument_list pos:start="946:14" pos:end="946:27">(<argument pos:start="946:15" pos:end="946:26"><expr pos:start="946:15" pos:end="946:26"><name pos:start="946:15" pos:end="946:18">ectx</name> <operator pos:start="946:20" pos:end="946:21">!=</operator> <name pos:start="946:23" pos:end="946:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="948:5" pos:end="948:59"><expr pos:start="948:5" pos:end="948:58"><name pos:start="948:5" pos:end="948:6">rc</name> <operator pos:start="948:8" pos:end="948:8">=</operator> <call pos:start="948:10" pos:end="948:58"><name pos:start="948:10" pos:end="948:28">est_client_set_auth</name><argument_list pos:start="948:29" pos:end="948:58">(<argument pos:start="948:30" pos:end="948:33"><expr pos:start="948:30" pos:end="948:33"><name pos:start="948:30" pos:end="948:33">ectx</name></expr></argument>, <argument pos:start="948:36" pos:end="948:37"><expr pos:start="948:36" pos:end="948:37"><literal type="string" pos:start="948:36" pos:end="948:37">""</literal></expr></argument>, <argument pos:start="948:40" pos:end="948:41"><expr pos:start="948:40" pos:end="948:41"><literal type="string" pos:start="948:40" pos:end="948:41">""</literal></expr></argument>, <argument pos:start="948:44" pos:end="948:47"><expr pos:start="948:44" pos:end="948:47"><name pos:start="948:44" pos:end="948:47">NULL</name></expr></argument>, <argument pos:start="948:50" pos:end="948:57"><expr pos:start="948:50" pos:end="948:57"><name pos:start="948:50" pos:end="948:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="949:5" pos:end="949:34"><expr pos:start="949:5" pos:end="949:33"><call pos:start="949:5" pos:end="949:33"><name pos:start="949:5" pos:end="949:13">CU_ASSERT</name><argument_list pos:start="949:14" pos:end="949:33">(<argument pos:start="949:15" pos:end="949:32"><expr pos:start="949:15" pos:end="949:32"><name pos:start="949:15" pos:end="949:16">rc</name> <operator pos:start="949:18" pos:end="949:19">==</operator> <name pos:start="949:21" pos:end="949:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="951:5" pos:end="952:22"><expr pos:start="951:5" pos:end="952:21"><call pos:start="951:5" pos:end="952:21"><name pos:start="951:5" pos:end="951:25">est_client_set_server</name><argument_list pos:start="951:26" pos:end="952:21">(<argument pos:start="951:27" pos:end="951:30"><expr pos:start="951:27" pos:end="951:30"><name pos:start="951:27" pos:end="951:30">ectx</name></expr></argument>, <argument pos:start="951:33" pos:end="951:48"><expr pos:start="951:33" pos:end="951:48"><name pos:start="951:33" pos:end="951:48">US3512_SERVER_IP</name></expr></argument>, <argument pos:start="951:51" pos:end="951:71"><expr pos:start="951:51" pos:end="951:71"><name pos:start="951:51" pos:end="951:71">US3512_TCP_PROXY_PORT</name></expr></argument>,
        <argument pos:start="952:9" pos:end="952:20"><expr pos:start="952:9" pos:end="952:20"><name pos:start="952:9" pos:end="952:20">path_segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="954:5" pos:end="957:7">/*
     * clear out the global that proves that the path segment
     * made it to the application layer's cal back function
     */</comment>
    <expr_stmt pos:start="958:5" pos:end="958:71"><expr pos:start="958:5" pos:end="958:70"><call pos:start="958:5" pos:end="958:70"><name pos:start="958:5" pos:end="958:10">memset</name><argument_list pos:start="958:11" pos:end="958:70">(<argument pos:start="958:12" pos:end="958:36"><expr pos:start="958:12" pos:end="958:36"><name pos:start="958:12" pos:end="958:36">tst_srvr_path_seg_cacerts</name></expr></argument>, <argument pos:start="958:39" pos:end="958:39"><expr pos:start="958:39" pos:end="958:39"><literal type="number" pos:start="958:39" pos:end="958:39">0</literal></expr></argument>, <argument pos:start="958:42" pos:end="958:69"><expr pos:start="958:42" pos:end="958:69"><name pos:start="958:42" pos:end="958:65">EST_MAX_PATH_SEGMENT_LEN</name> <operator pos:start="958:67" pos:end="958:67">+</operator> <literal type="number" pos:start="958:69" pos:end="958:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="960:5" pos:end="962:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="963:5" pos:end="963:62"><expr pos:start="963:5" pos:end="963:61"><name pos:start="963:5" pos:end="963:6">rc</name> <operator pos:start="963:8" pos:end="963:8">=</operator> <call pos:start="963:10" pos:end="963:61"><name pos:start="963:10" pos:end="963:31">est_client_get_cacerts</name><argument_list pos:start="963:32" pos:end="963:61">(<argument pos:start="963:33" pos:end="963:36"><expr pos:start="963:33" pos:end="963:36"><name pos:start="963:33" pos:end="963:36">ectx</name></expr></argument>, <argument pos:start="963:39" pos:end="963:60"><expr pos:start="963:39" pos:end="963:60"><operator pos:start="963:39" pos:end="963:39">&amp;</operator><name pos:start="963:40" pos:end="963:60">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="964:5" pos:end="967:7">/*
     * should be successful, and should have obtained a valid buffer
     * containing the CA certs
     */</comment>
    <expr_stmt pos:start="968:5" pos:end="968:34"><expr pos:start="968:5" pos:end="968:33"><call pos:start="968:5" pos:end="968:33"><name pos:start="968:5" pos:end="968:13">CU_ASSERT</name><argument_list pos:start="968:14" pos:end="968:33">(<argument pos:start="968:15" pos:end="968:32"><expr pos:start="968:15" pos:end="968:32"><name pos:start="968:15" pos:end="968:16">rc</name> <operator pos:start="968:18" pos:end="968:19">==</operator> <name pos:start="968:21" pos:end="968:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="969:5" pos:end="969:41"><expr pos:start="969:5" pos:end="969:40"><call pos:start="969:5" pos:end="969:40"><name pos:start="969:5" pos:end="969:13">CU_ASSERT</name><argument_list pos:start="969:14" pos:end="969:40">(<argument pos:start="969:15" pos:end="969:39"><expr pos:start="969:15" pos:end="969:39"><name pos:start="969:15" pos:end="969:35">retrieved_cacerts_len</name> <operator pos:start="969:37" pos:end="969:37">&gt;</operator> <literal type="number" pos:start="969:39" pos:end="969:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="970:5" pos:end="973:7">/*
     * verify that the path segment made it all the way to the callback function
     * at the application layer
     */</comment>
    <expr_stmt pos:start="974:5" pos:end="974:68"><expr pos:start="974:5" pos:end="974:67"><call pos:start="974:5" pos:end="974:67"><name pos:start="974:5" pos:end="974:13">CU_ASSERT</name><argument_list pos:start="974:14" pos:end="974:67">(<argument pos:start="974:15" pos:end="974:66"><expr pos:start="974:15" pos:end="974:66"><call pos:start="974:15" pos:end="974:61"><name pos:start="974:15" pos:end="974:20">strcmp</name><argument_list pos:start="974:21" pos:end="974:61">(<argument pos:start="974:22" pos:end="974:33"><expr pos:start="974:22" pos:end="974:33"><name pos:start="974:22" pos:end="974:33">path_segment</name></expr></argument>, <argument pos:start="974:36" pos:end="974:60"><expr pos:start="974:36" pos:end="974:60"><name pos:start="974:36" pos:end="974:60">tst_srvr_path_seg_cacerts</name></expr></argument>)</argument_list></call> <operator pos:start="974:63" pos:end="974:64">==</operator> <literal type="number" pos:start="974:66" pos:end="974:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="976:5" pos:end="976:54"><expr pos:start="976:5" pos:end="976:53"><name pos:start="976:5" pos:end="976:21">retrieved_cacerts</name> <operator pos:start="976:23" pos:end="976:23">=</operator> <call pos:start="976:25" pos:end="976:53"><name pos:start="976:25" pos:end="976:30">malloc</name><argument_list pos:start="976:31" pos:end="976:53">(<argument pos:start="976:32" pos:end="976:52"><expr pos:start="976:32" pos:end="976:52"><name pos:start="976:32" pos:end="976:52">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="978:5" pos:end="978:58"><expr pos:start="978:5" pos:end="978:57"><name pos:start="978:5" pos:end="978:6">rc</name> <operator pos:start="978:8" pos:end="978:8">=</operator> <call pos:start="978:10" pos:end="978:57"><name pos:start="978:10" pos:end="978:32">est_client_copy_cacerts</name><argument_list pos:start="978:33" pos:end="978:57">(<argument pos:start="978:34" pos:end="978:37"><expr pos:start="978:34" pos:end="978:37"><name pos:start="978:34" pos:end="978:37">ectx</name></expr></argument>, <argument pos:start="978:40" pos:end="978:56"><expr pos:start="978:40" pos:end="978:56"><name pos:start="978:40" pos:end="978:56">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="980:5" pos:end="982:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>
    <if_stmt pos:start="983:5" pos:end="987:5"><if pos:start="983:5" pos:end="987:5">if <condition pos:start="983:8" pos:end="983:26">(<expr pos:start="983:9" pos:end="983:25"><name pos:start="983:9" pos:end="983:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="983:28" pos:end="987:5">{<block_content pos:start="985:9" pos:end="986:80">

        <expr_stmt pos:start="985:9" pos:end="985:73"><expr pos:start="985:9" pos:end="985:72"><call pos:start="985:9" pos:end="985:72"><name pos:start="985:9" pos:end="985:14">printf</name><argument_list pos:start="985:15" pos:end="985:72">(<argument pos:start="985:16" pos:end="985:52"><expr pos:start="985:16" pos:end="985:52"><literal type="string" pos:start="985:16" pos:end="985:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="985:55" pos:end="985:71"><expr pos:start="985:55" pos:end="985:71"><name pos:start="985:55" pos:end="985:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="986:9" pos:end="986:80"><expr pos:start="986:9" pos:end="986:79"><call pos:start="986:9" pos:end="986:79"><name pos:start="986:9" pos:end="986:14">printf</name><argument_list pos:start="986:15" pos:end="986:79">(<argument pos:start="986:16" pos:end="986:55"><expr pos:start="986:16" pos:end="986:55"><literal type="string" pos:start="986:16" pos:end="986:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="986:58" pos:end="986:78"><expr pos:start="986:58" pos:end="986:78"><name pos:start="986:58" pos:end="986:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="988:5" pos:end="988:28"><expr pos:start="988:5" pos:end="988:27"><call pos:start="988:5" pos:end="988:27"><name pos:start="988:5" pos:end="988:8">free</name><argument_list pos:start="988:9" pos:end="988:27">(<argument pos:start="988:10" pos:end="988:26"><expr pos:start="988:10" pos:end="988:26"><name pos:start="988:10" pos:end="988:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="990:5" pos:end="992:5"><if pos:start="990:5" pos:end="992:5">if <condition pos:start="990:8" pos:end="990:13">(<expr pos:start="990:9" pos:end="990:12"><name pos:start="990:9" pos:end="990:12">ectx</name></expr>)</condition> <block pos:start="990:15" pos:end="992:5">{<block_content pos:start="991:9" pos:end="991:26">
        <expr_stmt pos:start="991:9" pos:end="991:26"><expr pos:start="991:9" pos:end="991:25"><call pos:start="991:9" pos:end="991:25"><name pos:start="991:9" pos:end="991:19">est_destroy</name><argument_list pos:start="991:20" pos:end="991:25">(<argument pos:start="991:21" pos:end="991:24"><expr pos:start="991:21" pos:end="991:24"><name pos:start="991:21" pos:end="991:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="993:5" pos:end="995:5"><if pos:start="993:5" pos:end="995:5">if <condition pos:start="993:8" pos:end="993:16">(<expr pos:start="993:9" pos:end="993:15"><name pos:start="993:9" pos:end="993:15">cacerts</name></expr>)</condition> <block pos:start="993:18" pos:end="995:5">{<block_content pos:start="994:9" pos:end="994:22">
        <expr_stmt pos:start="994:9" pos:end="994:22"><expr pos:start="994:9" pos:end="994:21"><call pos:start="994:9" pos:end="994:21"><name pos:start="994:9" pos:end="994:12">free</name><argument_list pos:start="994:13" pos:end="994:21">(<argument pos:start="994:14" pos:end="994:20"><expr pos:start="994:14" pos:end="994:20"><name pos:start="994:14" pos:end="994:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="996:5" pos:end="998:5"><if pos:start="996:5" pos:end="998:5">if <condition pos:start="996:8" pos:end="996:13">(<expr pos:start="996:9" pos:end="996:12"><name pos:start="996:9" pos:end="996:12">pkey</name></expr>)</condition> <block pos:start="996:15" pos:end="998:5">{<block_content pos:start="997:9" pos:end="997:19">
        <expr_stmt pos:start="997:9" pos:end="997:19"><expr pos:start="997:9" pos:end="997:18"><call pos:start="997:9" pos:end="997:18"><name pos:start="997:9" pos:end="997:12">free</name><argument_list pos:start="997:13" pos:end="997:18">(<argument pos:start="997:14" pos:end="997:17"><expr pos:start="997:14" pos:end="997:17"><name pos:start="997:14" pos:end="997:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1001:1" pos:end="1004:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="1005:1" pos:end="1060:1"><type pos:start="1005:1" pos:end="1005:3"><name pos:start="1005:1" pos:end="1005:3">int</name></type> <name pos:start="1005:5" pos:end="1005:20">us3512_add_suite</name> <parameter_list pos:start="1005:22" pos:end="1005:27">(<parameter pos:start="1005:23" pos:end="1005:26"><decl pos:start="1005:23" pos:end="1005:26"><type pos:start="1005:23" pos:end="1005:26"><name pos:start="1005:23" pos:end="1005:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1006:1" pos:end="1060:1">{<block_content pos:start="1007:5" pos:end="1060:0">
    <decl_stmt pos:start="1007:5" pos:end="1010:0"><decl pos:start="1007:5" pos:end="1007:25"><type pos:start="1007:5" pos:end="1007:16"><name pos:start="1007:5" pos:end="1007:16">CU_ErrorCode</name></type> <name pos:start="1007:18" pos:end="1007:25">CU_error</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="1009:1" pos:end="1009:17">#<cpp:directive pos:start="1009:2" pos:end="1009:6">ifdef</cpp:directive> <name pos:start="1009:8" pos:end="1009:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="1010:5" pos:end="1010:28"><decl pos:start="1010:5" pos:end="1010:27"><type pos:start="1010:5" pos:end="1010:13"><name pos:start="1010:5" pos:end="1010:13">CU_pSuite</name></type> <name pos:start="1010:15" pos:end="1010:20">pSuite</name> <init pos:start="1010:22" pos:end="1010:27">= <expr pos:start="1010:24" pos:end="1010:27"><name pos:start="1010:24" pos:end="1010:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="1012:5" pos:end="1012:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="1013:5" pos:end="1015:34"><expr pos:start="1013:5" pos:end="1015:33"><name pos:start="1013:5" pos:end="1013:10">pSuite</name> <operator pos:start="1013:12" pos:end="1013:12">=</operator> <call pos:start="1013:14" pos:end="1015:33"><name pos:start="1013:14" pos:end="1013:25">CU_add_suite</name><argument_list pos:start="1013:26" pos:end="1015:33">(<argument pos:start="1013:27" pos:end="1013:50"><expr pos:start="1013:27" pos:end="1013:50"><literal type="string" pos:start="1013:27" pos:end="1013:50">"us3512_server_path_seg"</literal></expr></argument>,
            <argument pos:start="1014:13" pos:end="1014:29"><expr pos:start="1014:13" pos:end="1014:29"><name pos:start="1014:13" pos:end="1014:29">us3512_init_suite</name></expr></argument>,
            <argument pos:start="1015:13" pos:end="1015:32"><expr pos:start="1015:13" pos:end="1015:32"><name pos:start="1015:13" pos:end="1015:32">us3512_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1016:5" pos:end="1019:5"><if pos:start="1016:5" pos:end="1019:5">if <condition pos:start="1016:8" pos:end="1016:23">(<expr pos:start="1016:9" pos:end="1016:22"><name pos:start="1016:9" pos:end="1016:12">NULL</name> <operator pos:start="1016:14" pos:end="1016:15">==</operator> <name pos:start="1016:17" pos:end="1016:22">pSuite</name></expr>)</condition> <block pos:start="1016:25" pos:end="1019:5">{<block_content pos:start="1017:9" pos:end="1018:30">
        <expr_stmt pos:start="1017:9" pos:end="1017:30"><expr pos:start="1017:9" pos:end="1017:29"><call pos:start="1017:9" pos:end="1017:29"><name pos:start="1017:9" pos:end="1017:27">CU_cleanup_registry</name><argument_list pos:start="1017:28" pos:end="1017:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1018:9" pos:end="1018:30">return <expr pos:start="1018:16" pos:end="1018:29"><call pos:start="1018:16" pos:end="1018:29"><name pos:start="1018:16" pos:end="1018:27">CU_get_error</name><argument_list pos:start="1018:28" pos:end="1018:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1021:5" pos:end="1023:7">/*
     * check to see if path segment support has been compiled in
     */</comment>
    <if_stmt pos:start="1024:5" pos:end="1028:5"><if pos:start="1024:5" pos:end="1028:5">if <condition pos:start="1024:8" pos:end="1024:30">(<expr pos:start="1024:9" pos:end="1024:29"><operator pos:start="1024:9" pos:end="1024:9">!</operator><call pos:start="1024:10" pos:end="1024:29"><name pos:start="1024:10" pos:end="1024:27">path_seg_supported</name><argument_list pos:start="1024:28" pos:end="1024:29">()</argument_list></call></expr>)</condition> <block pos:start="1024:32" pos:end="1028:5">{<block_content pos:start="1025:9" pos:end="1027:17">
        <expr_stmt pos:start="1025:9" pos:end="1025:114"><expr pos:start="1025:9" pos:end="1025:113"><call pos:start="1025:9" pos:end="1025:113"><name pos:start="1025:9" pos:end="1025:14">printf</name><argument_list pos:start="1025:15" pos:end="1025:113">(<argument pos:start="1025:16" pos:end="1025:112"><expr pos:start="1025:16" pos:end="1025:112"><literal type="string" pos:start="1025:16" pos:end="1025:112">"URI Path Segment is not supported in this build of EST.  Rebuild using --with-uriparser-dir= \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1026:9" pos:end="1026:33"><expr pos:start="1026:9" pos:end="1026:32"><name pos:start="1026:9" pos:end="1026:28">path_segment_support</name> <operator pos:start="1026:30" pos:end="1026:30">=</operator> <literal type="number" pos:start="1026:32" pos:end="1026:32">0</literal></expr>;</expr_stmt>
        <return pos:start="1027:9" pos:end="1027:17">return <expr pos:start="1027:16" pos:end="1027:16"><literal type="number" pos:start="1027:16" pos:end="1027:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1029:5" pos:end="1029:29"><expr pos:start="1029:5" pos:end="1029:28"><name pos:start="1029:5" pos:end="1029:24">path_segment_support</name> <operator pos:start="1029:26" pos:end="1029:26">=</operator> <literal type="number" pos:start="1029:28" pos:end="1029:28">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="1031:5" pos:end="1057:9"><if pos:start="1031:5" pos:end="1057:9">if <condition pos:start="1031:8" pos:end="1031:29">(<expr pos:start="1031:9" pos:end="1031:28"><name pos:start="1031:9" pos:end="1031:28">path_segment_support</name></expr>)</condition> <block pos:start="1031:31" pos:end="1057:9">{<block_content pos:start="1035:9" pos:end="1056:13">

        <comment type="block" pos:start="1033:9" pos:end="1033:40">/* add the tests to the suite */</comment>
        <comment type="block" pos:start="1034:9" pos:end="1034:75">/* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */</comment>
        <if_stmt pos:start="1035:9" pos:end="1056:13"><if pos:start="1035:9" pos:end="1056:13">if <condition pos:start="1035:12" pos:end="1048:13">(
            <expr pos:start="1036:13" pos:end="1047:117"><operator pos:start="1036:13" pos:end="1036:13">(</operator><name pos:start="1036:14" pos:end="1036:17">NULL</name> <operator pos:start="1036:19" pos:end="1036:20">==</operator> <call pos:start="1036:22" pos:end="1036:104"><name pos:start="1036:22" pos:end="1036:32">CU_add_test</name><argument_list pos:start="1036:33" pos:end="1036:104">(<argument pos:start="1036:34" pos:end="1036:39"><expr pos:start="1036:34" pos:end="1036:39"><name pos:start="1036:34" pos:end="1036:39">pSuite</name></expr></argument>, <argument pos:start="1036:42" pos:end="1036:89"><expr pos:start="1036:42" pos:end="1036:89"><literal type="string" pos:start="1036:42" pos:end="1036:89">"EST Client: Simple enroll with no path segment"</literal></expr></argument>, <argument pos:start="1036:92" pos:end="1036:103"><expr pos:start="1036:92" pos:end="1036:103"><name pos:start="1036:92" pos:end="1036:103">us3512_test1</name></expr></argument>)</argument_list></call><operator pos:start="1036:105" pos:end="1036:105">)</operator> <operator pos:start="1036:107" pos:end="1036:108">||</operator>
            <operator pos:start="1037:13" pos:end="1037:13">(</operator><name pos:start="1037:14" pos:end="1037:17">NULL</name> <operator pos:start="1037:19" pos:end="1037:20">==</operator> <call pos:start="1037:22" pos:end="1037:101"><name pos:start="1037:22" pos:end="1037:32">CU_add_test</name><argument_list pos:start="1037:33" pos:end="1037:101">(<argument pos:start="1037:34" pos:end="1037:39"><expr pos:start="1037:34" pos:end="1037:39"><name pos:start="1037:34" pos:end="1037:39">pSuite</name></expr></argument>, <argument pos:start="1037:42" pos:end="1037:86"><expr pos:start="1037:42" pos:end="1037:86"><literal type="string" pos:start="1037:42" pos:end="1037:86">"EST Server: Simple Enroll with path segment"</literal></expr></argument>, <argument pos:start="1037:89" pos:end="1037:100"><expr pos:start="1037:89" pos:end="1037:100"><name pos:start="1037:89" pos:end="1037:100">us3512_test2</name></expr></argument>)</argument_list></call><operator pos:start="1037:102" pos:end="1037:102">)</operator> <operator pos:start="1037:104" pos:end="1037:105">||</operator>
            <operator pos:start="1038:13" pos:end="1038:13">(</operator><name pos:start="1038:14" pos:end="1038:17">NULL</name> <operator pos:start="1038:19" pos:end="1038:20">==</operator> <call pos:start="1038:22" pos:end="1038:104"><name pos:start="1038:22" pos:end="1038:32">CU_add_test</name><argument_list pos:start="1038:33" pos:end="1038:104">(<argument pos:start="1038:34" pos:end="1038:39"><expr pos:start="1038:34" pos:end="1038:39"><name pos:start="1038:34" pos:end="1038:39">pSuite</name></expr></argument>, <argument pos:start="1038:42" pos:end="1038:89"><expr pos:start="1038:42" pos:end="1038:89"><literal type="string" pos:start="1038:42" pos:end="1038:89">"EST Server: Simple Re-enroll with path segment"</literal></expr></argument>, <argument pos:start="1038:92" pos:end="1038:103"><expr pos:start="1038:92" pos:end="1038:103"><name pos:start="1038:92" pos:end="1038:103">us3512_test3</name></expr></argument>)</argument_list></call><operator pos:start="1038:105" pos:end="1038:105">)</operator> <operator pos:start="1038:107" pos:end="1038:108">||</operator>
            <operator pos:start="1039:13" pos:end="1039:13">(</operator><name pos:start="1039:14" pos:end="1039:17">NULL</name> <operator pos:start="1039:19" pos:end="1039:20">==</operator> <call pos:start="1039:22" pos:end="1039:95"><name pos:start="1039:22" pos:end="1039:32">CU_add_test</name><argument_list pos:start="1039:33" pos:end="1039:95">(<argument pos:start="1039:34" pos:end="1039:39"><expr pos:start="1039:34" pos:end="1039:39"><name pos:start="1039:34" pos:end="1039:39">pSuite</name></expr></argument>, <argument pos:start="1039:42" pos:end="1039:80"><expr pos:start="1039:42" pos:end="1039:80"><literal type="string" pos:start="1039:42" pos:end="1039:80">"EST Server: CACerts with path segment"</literal></expr></argument>, <argument pos:start="1039:83" pos:end="1039:94"><expr pos:start="1039:83" pos:end="1039:94"><name pos:start="1039:83" pos:end="1039:94">us3512_test4</name></expr></argument>)</argument_list></call><operator pos:start="1039:96" pos:end="1039:96">)</operator> <operator pos:start="1039:98" pos:end="1039:99">||</operator>
            <operator pos:start="1040:13" pos:end="1040:13">(</operator><name pos:start="1040:14" pos:end="1040:17">NULL</name> <operator pos:start="1040:19" pos:end="1040:20">==</operator> <call pos:start="1040:22" pos:end="1040:96"><name pos:start="1040:22" pos:end="1040:32">CU_add_test</name><argument_list pos:start="1040:33" pos:end="1040:96">(<argument pos:start="1040:34" pos:end="1040:39"><expr pos:start="1040:34" pos:end="1040:39"><name pos:start="1040:34" pos:end="1040:39">pSuite</name></expr></argument>, <argument pos:start="1040:42" pos:end="1040:81"><expr pos:start="1040:42" pos:end="1040:81"><literal type="string" pos:start="1040:42" pos:end="1040:81">"EST Server: CSRAttrs with path segment"</literal></expr></argument>, <argument pos:start="1040:84" pos:end="1040:95"><expr pos:start="1040:84" pos:end="1040:95"><name pos:start="1040:84" pos:end="1040:95">us3512_test5</name></expr></argument>)</argument_list></call><operator pos:start="1040:97" pos:end="1040:97">)</operator> <operator pos:start="1040:99" pos:end="1040:100">||</operator>
            <operator pos:start="1041:13" pos:end="1041:13">(</operator><name pos:start="1041:14" pos:end="1041:17">NULL</name> <operator pos:start="1041:19" pos:end="1041:20">==</operator> <call pos:start="1041:22" pos:end="1041:97"><name pos:start="1041:22" pos:end="1041:32">CU_add_test</name><argument_list pos:start="1041:33" pos:end="1041:97">(<argument pos:start="1041:34" pos:end="1041:39"><expr pos:start="1041:34" pos:end="1041:39"><name pos:start="1041:34" pos:end="1041:39">pSuite</name></expr></argument>, <argument pos:start="1041:42" pos:end="1041:82"><expr pos:start="1041:42" pos:end="1041:82"><literal type="string" pos:start="1041:42" pos:end="1041:82">"EST Server: EST Proxy with path segment"</literal></expr></argument>, <argument pos:start="1041:85" pos:end="1041:96"><expr pos:start="1041:85" pos:end="1041:96"><name pos:start="1041:85" pos:end="1041:96">us3512_test6</name></expr></argument>)</argument_list></call><operator pos:start="1041:98" pos:end="1041:98">)</operator> <operator pos:start="1041:100" pos:end="1041:101">||</operator>
            <operator pos:start="1042:13" pos:end="1042:13">(</operator><name pos:start="1042:14" pos:end="1042:17">NULL</name> <operator pos:start="1042:19" pos:end="1042:20">==</operator> <call pos:start="1042:22" pos:end="1042:108"><name pos:start="1042:22" pos:end="1042:32">CU_add_test</name><argument_list pos:start="1042:33" pos:end="1042:108">(<argument pos:start="1042:34" pos:end="1042:39"><expr pos:start="1042:34" pos:end="1042:39"><name pos:start="1042:34" pos:end="1042:39">pSuite</name></expr></argument>, <argument pos:start="1042:42" pos:end="1042:93"><expr pos:start="1042:42" pos:end="1042:93"><literal type="string" pos:start="1042:42" pos:end="1042:93">"EST Server: EST Proxy with path segment at the max"</literal></expr></argument>, <argument pos:start="1042:96" pos:end="1042:107"><expr pos:start="1042:96" pos:end="1042:107"><name pos:start="1042:96" pos:end="1042:107">us3512_test7</name></expr></argument>)</argument_list></call><operator pos:start="1042:109" pos:end="1042:109">)</operator> <operator pos:start="1042:111" pos:end="1042:112">||</operator>
            <operator pos:start="1043:13" pos:end="1043:13">(</operator><name pos:start="1043:14" pos:end="1043:17">NULL</name> <operator pos:start="1043:19" pos:end="1043:20">==</operator> <call pos:start="1043:22" pos:end="1043:106"><name pos:start="1043:22" pos:end="1043:32">CU_add_test</name><argument_list pos:start="1043:33" pos:end="1043:106">(<argument pos:start="1043:34" pos:end="1043:39"><expr pos:start="1043:34" pos:end="1043:39"><name pos:start="1043:34" pos:end="1043:39">pSuite</name></expr></argument>, <argument pos:start="1043:42" pos:end="1043:91"><expr pos:start="1043:42" pos:end="1043:91"><literal type="string" pos:start="1043:42" pos:end="1043:91">"EST Server: EST Proxy with path segment too long"</literal></expr></argument>, <argument pos:start="1043:94" pos:end="1043:105"><expr pos:start="1043:94" pos:end="1043:105"><name pos:start="1043:94" pos:end="1043:105">us3512_test8</name></expr></argument>)</argument_list></call><operator pos:start="1043:107" pos:end="1043:107">)</operator> <operator pos:start="1043:109" pos:end="1043:110">||</operator>
            <operator pos:start="1044:13" pos:end="1044:13">(</operator><name pos:start="1044:14" pos:end="1044:17">NULL</name> <operator pos:start="1044:19" pos:end="1044:20">==</operator> <call pos:start="1044:22" pos:end="1044:115"><name pos:start="1044:22" pos:end="1044:32">CU_add_test</name><argument_list pos:start="1044:33" pos:end="1044:115">(<argument pos:start="1044:34" pos:end="1044:39"><expr pos:start="1044:34" pos:end="1044:39"><name pos:start="1044:34" pos:end="1044:39">pSuite</name></expr></argument>, <argument pos:start="1044:42" pos:end="1044:100"><expr pos:start="1044:42" pos:end="1044:100"><literal type="string" pos:start="1044:42" pos:end="1044:100">"EST Server: EST Proxy with path segment that is operation"</literal></expr></argument>, <argument pos:start="1044:103" pos:end="1044:114"><expr pos:start="1044:103" pos:end="1044:114"><name pos:start="1044:103" pos:end="1044:114">us3512_test9</name></expr></argument>)</argument_list></call><operator pos:start="1044:116" pos:end="1044:116">)</operator> <operator pos:start="1044:118" pos:end="1044:119">||</operator>
            <operator pos:start="1045:13" pos:end="1045:13">(</operator><name pos:start="1045:14" pos:end="1045:17">NULL</name> <operator pos:start="1045:19" pos:end="1045:20">==</operator> <call pos:start="1045:22" pos:end="1045:127"><name pos:start="1045:22" pos:end="1045:32">CU_add_test</name><argument_list pos:start="1045:33" pos:end="1045:127">(<argument pos:start="1045:34" pos:end="1045:39"><expr pos:start="1045:34" pos:end="1045:39"><name pos:start="1045:34" pos:end="1045:39">pSuite</name></expr></argument>, <argument pos:start="1045:42" pos:end="1045:111"><expr pos:start="1045:42" pos:end="1045:111"><literal type="string" pos:start="1045:42" pos:end="1045:111">"EST Server: EST Proxy with path segment containing too many segments"</literal></expr></argument>, <argument pos:start="1045:114" pos:end="1045:126"><expr pos:start="1045:114" pos:end="1045:126"><name pos:start="1045:114" pos:end="1045:126">us3512_test10</name></expr></argument>)</argument_list></call><operator pos:start="1045:128" pos:end="1045:128">)</operator> <operator pos:start="1045:130" pos:end="1045:131">||</operator>
            <operator pos:start="1046:13" pos:end="1046:13">(</operator><name pos:start="1046:14" pos:end="1046:17">NULL</name> <operator pos:start="1046:19" pos:end="1046:20">==</operator> <call pos:start="1046:22" pos:end="1046:122"><name pos:start="1046:22" pos:end="1046:32">CU_add_test</name><argument_list pos:start="1046:33" pos:end="1046:122">(<argument pos:start="1046:34" pos:end="1046:39"><expr pos:start="1046:34" pos:end="1046:39"><name pos:start="1046:34" pos:end="1046:39">pSuite</name></expr></argument>, <argument pos:start="1046:42" pos:end="1046:106"><expr pos:start="1046:42" pos:end="1046:106"><literal type="string" pos:start="1046:42" pos:end="1046:106">"EST Server: EST Proxy with path segment containing an operation"</literal></expr></argument>, <argument pos:start="1046:109" pos:end="1046:121"><expr pos:start="1046:109" pos:end="1046:121"><name pos:start="1046:109" pos:end="1046:121">us3512_test11</name></expr></argument>)</argument_list></call><operator pos:start="1046:123" pos:end="1046:123">)</operator> <operator pos:start="1046:125" pos:end="1046:126">||</operator>
            <operator pos:start="1047:13" pos:end="1047:13">(</operator><name pos:start="1047:14" pos:end="1047:17">NULL</name> <operator pos:start="1047:19" pos:end="1047:20">==</operator> <call pos:start="1047:22" pos:end="1047:116"><name pos:start="1047:22" pos:end="1047:32">CU_add_test</name><argument_list pos:start="1047:33" pos:end="1047:116">(<argument pos:start="1047:34" pos:end="1047:39"><expr pos:start="1047:34" pos:end="1047:39"><name pos:start="1047:34" pos:end="1047:39">pSuite</name></expr></argument>, <argument pos:start="1047:42" pos:end="1047:100"><expr pos:start="1047:42" pos:end="1047:100"><literal type="string" pos:start="1047:42" pos:end="1047:100">"EST Server: EST Proxy with path segment valid and cacerts"</literal></expr></argument>, <argument pos:start="1047:103" pos:end="1047:115"><expr pos:start="1047:103" pos:end="1047:115"><name pos:start="1047:103" pos:end="1047:115">us3512_test12</name></expr></argument>)</argument_list></call><operator pos:start="1047:117" pos:end="1047:117">)</operator></expr>
            )</condition>
            <block pos:start="1049:13" pos:end="1056:13">{<block_content pos:start="1050:17" pos:end="1055:38">
                <expr_stmt pos:start="1050:17" pos:end="1050:42"><expr pos:start="1050:17" pos:end="1050:41"><name pos:start="1050:17" pos:end="1050:24">CU_error</name> <operator pos:start="1050:26" pos:end="1050:26">=</operator> <call pos:start="1050:28" pos:end="1050:41"><name pos:start="1050:28" pos:end="1050:39">CU_get_error</name><argument_list pos:start="1050:40" pos:end="1050:41">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1051:17" pos:end="1051:41"><expr pos:start="1051:17" pos:end="1051:40"><call pos:start="1051:17" pos:end="1051:40"><name pos:start="1051:17" pos:end="1051:22">printf</name><argument_list pos:start="1051:23" pos:end="1051:40">(<argument pos:start="1051:24" pos:end="1051:29"><expr pos:start="1051:24" pos:end="1051:29"><literal type="string" pos:start="1051:24" pos:end="1051:29">"%d\n"</literal></expr></argument>, <argument pos:start="1051:32" pos:end="1051:39"><expr pos:start="1051:32" pos:end="1051:39"><name pos:start="1051:32" pos:end="1051:39">CU_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1053:17" pos:end="1053:38"><expr pos:start="1053:17" pos:end="1053:37"><call pos:start="1053:17" pos:end="1053:37"><name pos:start="1053:17" pos:end="1053:35">CU_cleanup_registry</name><argument_list pos:start="1053:36" pos:end="1053:37">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1054:17" pos:end="1054:51"><expr pos:start="1054:17" pos:end="1054:50"><call pos:start="1054:17" pos:end="1054:50"><name pos:start="1054:17" pos:end="1054:22">printf</name><argument_list pos:start="1054:23" pos:end="1054:50">(<argument pos:start="1054:24" pos:end="1054:29"><expr pos:start="1054:24" pos:end="1054:29"><literal type="string" pos:start="1054:24" pos:end="1054:29">"%s\n"</literal></expr></argument>, <argument pos:start="1054:32" pos:end="1054:49"><expr pos:start="1054:32" pos:end="1054:49"><call pos:start="1054:32" pos:end="1054:49"><name pos:start="1054:32" pos:end="1054:47">CU_get_error_msg</name><argument_list pos:start="1054:48" pos:end="1054:49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1055:17" pos:end="1055:38">return <expr pos:start="1055:24" pos:end="1055:37"><call pos:start="1055:24" pos:end="1055:37"><name pos:start="1055:24" pos:end="1055:35">CU_get_error</name><argument_list pos:start="1055:36" pos:end="1055:37">()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return pos:start="1058:9" pos:end="1060:0">return <expr pos:start="1058:16" pos:end="1058:26"><name pos:start="1058:16" pos:end="1058:26">CUE_SUCCESS</name></expr>;</return>
     <cpp:endif pos:start="1059:6" pos:end="1059:11">#<cpp:directive pos:start="1059:7" pos:end="1059:11">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
