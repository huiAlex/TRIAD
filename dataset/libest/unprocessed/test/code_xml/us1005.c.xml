<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us1005.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us1005.c - Unit Tests for User Story 1005 - Client easy provision
 *
 * November, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="11:1" pos:end="11:19">#<cpp:directive pos:start="11:2" pos:end="11:8">include</cpp:directive> <cpp:file pos:start="11:10" pos:end="11:19">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="12:1" pos:end="12:13">#<cpp:directive pos:start="12:2" pos:end="12:7">ifndef</cpp:directive> <name pos:start="12:9" pos:end="12:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:8">include</cpp:directive> <cpp:file pos:start="13:10" pos:end="13:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="14:1" pos:end="14:6">#<cpp:directive pos:start="14:2" pos:end="14:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="15:1" pos:end="15:16">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:22">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:24">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:27">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:27">&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="26:1" pos:end="26:12">#<cpp:directive pos:start="26:2" pos:end="26:6">ifdef</cpp:directive> <name pos:start="26:8" pos:end="26:12">WIN32</name></cpp:ifdef>
<decl_stmt pos:start="27:1" pos:end="29:0"><decl pos:start="27:1" pos:end="27:47"><type pos:start="27:1" pos:end="27:23"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:23">CRITICAL_SECTION</name></type> <name pos:start="27:25" pos:end="27:47">logger_critical_section</name></decl>;</decl_stmt>
<cpp:endif pos:start="28:1" pos:end="28:6">#<cpp:directive pos:start="28:2" pos:end="28:6">endif</cpp:directive></cpp:endif> 

<decl_stmt pos:start="30:1" pos:end="30:37"><decl pos:start="30:1" pos:end="30:36"><type pos:start="30:1" pos:end="30:22"><specifier pos:start="30:1" pos:end="30:6">static</specifier> <name pos:start="30:8" pos:end="30:15">unsigned</name> <name pos:start="30:17" pos:end="30:20">char</name> <modifier pos:start="30:22" pos:end="30:22">*</modifier></type><name pos:start="30:23" pos:end="30:29">cacerts</name> <init pos:start="30:31" pos:end="30:36">= <expr pos:start="30:33" pos:end="30:36"><name pos:start="30:33" pos:end="30:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="31:1" pos:end="51:0"><decl pos:start="31:1" pos:end="31:26"><type pos:start="31:1" pos:end="31:10"><specifier pos:start="31:1" pos:end="31:6">static</specifier> <name pos:start="31:8" pos:end="31:10">int</name></type> <name pos:start="31:12" pos:end="31:22">cacerts_len</name> <init pos:start="31:24" pos:end="31:26">= <expr pos:start="31:26" pos:end="31:26"><literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="33:1" pos:end="33:37">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:26">US1005_SERVER_PORT</name></cpp:macro>      <cpp:value pos:start="33:33" pos:end="33:37">31005</cpp:value></cpp:define>
<cpp:define pos:start="34:1" pos:end="34:39">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:24"><name pos:start="34:9" pos:end="34:24">US1005_SERVER_IP</name></cpp:macro>    <cpp:value pos:start="34:29" pos:end="34:39">"127.0.0.1"</cpp:value></cpp:define> 
<cpp:define pos:start="35:1" pos:end="35:37">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:18">US1005_UID</name></cpp:macro>          <cpp:value pos:start="35:29" pos:end="35:37">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="36:1" pos:end="36:36">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:18"><name pos:start="36:9" pos:end="36:18">US1005_PWD</name></cpp:macro>          <cpp:value pos:start="36:29" pos:end="36:36">"estpwd"</cpp:value></cpp:define>
<cpp:ifndef pos:start="37:1" pos:end="37:13">#<cpp:directive pos:start="37:2" pos:end="37:7">ifndef</cpp:directive> <name pos:start="37:9" pos:end="37:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="38:1" pos:end="38:53">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:22"><name pos:start="38:9" pos:end="38:22">US1005_CACERTS</name></cpp:macro>          <cpp:value pos:start="38:33" pos:end="38:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:53">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:26">US1005_TRUST_CERTS</name></cpp:macro>      <cpp:value pos:start="39:33" pos:end="39:53">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:74">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:29"><name pos:start="40:9" pos:end="40:29">US1005_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="40:33" pos:end="40:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:57">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:25">US1005_CLIENT_KEY</name></cpp:macro>       <cpp:value pos:start="41:33" pos:end="41:57">"US1005/implicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:58">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:26"><name pos:start="42:9" pos:end="42:26">US1005_CLIENT_CERT</name></cpp:macro>      <cpp:value pos:start="42:33" pos:end="42:58">"US1005/implicit-cert.pem"</cpp:value></cpp:define>
<cpp:else pos:start="43:1" pos:end="43:5">#<cpp:directive pos:start="43:2" pos:end="43:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="44:1" pos:end="44:55">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:22"><name pos:start="44:9" pos:end="44:22">US1005_CACERTS</name></cpp:macro>          <cpp:value pos:start="44:33" pos:end="44:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:54">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:26">US1005_TRUST_CERTS</name></cpp:macro>      <cpp:value pos:start="45:33" pos:end="45:54">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="46:1" pos:end="46:77">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:29"><name pos:start="46:9" pos:end="46:29">US1005_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="46:33" pos:end="46:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:58">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:25">US1005_CLIENT_KEY</name></cpp:macro>       <cpp:value pos:start="47:33" pos:end="47:58">"US1005\\implicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:59">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:26">US1005_CLIENT_CERT</name></cpp:macro>      <cpp:value pos:start="48:33" pos:end="48:59">"US1005\\implicit-cert.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif> 
<cpp:define pos:start="50:1" pos:end="50:68">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:24"><name pos:start="50:9" pos:end="50:24">US1005_CSR_NOPOP</name></cpp:macro>        <cpp:value pos:start="50:33" pos:end="50:68">"MBQGBysGAQEBARYGCWCGSAFlAwQCAg==\0"</cpp:value></cpp:define>

<decl_stmt pos:start="52:1" pos:end="52:38"><decl pos:start="52:1" pos:end="52:37"><type pos:start="52:1" pos:end="52:13"><specifier pos:start="52:1" pos:end="52:6">static</specifier> <name pos:start="52:8" pos:end="52:11">char</name> <modifier pos:start="52:13" pos:end="52:13">*</modifier></type><name pos:start="52:14" pos:end="52:30">log_search_target</name> <init pos:start="52:32" pos:end="52:37">= <expr pos:start="52:34" pos:end="52:37"><name pos:start="52:34" pos:end="52:37">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="53:1" pos:end="53:35"><decl pos:start="53:1" pos:end="53:34"><type pos:start="53:1" pos:end="53:10"><specifier pos:start="53:1" pos:end="53:6">static</specifier> <name pos:start="53:8" pos:end="53:10">int</name></type> <name pos:start="53:12" pos:end="53:30">search_target_found</name> <init pos:start="53:32" pos:end="53:34">= <expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">0</literal></expr></init></decl>;</decl_stmt>
<comment type="block" pos:start="54:1" pos:end="58:3">/*
 * This is a simple callback used to override the default
 * logging facility in libest.  We'll use this to look
 * for specific debug output.
 */</comment>
<function pos:start="59:1" pos:end="82:1"><type pos:start="59:1" pos:end="59:11"><specifier pos:start="59:1" pos:end="59:6">static</specifier> <name pos:start="59:8" pos:end="59:11">void</name></type> <name pos:start="59:13" pos:end="59:32">us1005_logger_stderr</name> <parameter_list pos:start="59:34" pos:end="59:58">(<parameter pos:start="59:35" pos:end="59:46"><decl pos:start="59:35" pos:end="59:46"><type pos:start="59:35" pos:end="59:46"><name pos:start="59:35" pos:end="59:38">char</name> <modifier pos:start="59:40" pos:end="59:40">*</modifier></type><name pos:start="59:41" pos:end="59:46">format</name></decl></parameter>, <parameter pos:start="59:49" pos:end="59:57"><decl pos:start="59:49" pos:end="59:57"><type pos:start="59:49" pos:end="59:57"><name pos:start="59:49" pos:end="59:55">va_list</name></type> <name pos:start="59:57" pos:end="59:57">l</name></decl></parameter>)</parameter_list>
<block pos:start="60:1" pos:end="82:1">{<block_content pos:start="61:5" pos:end="82:0">
    <decl_stmt pos:start="61:5" pos:end="63:0"><decl pos:start="61:5" pos:end="61:20"><type pos:start="61:5" pos:end="61:8"><name pos:start="61:5" pos:end="61:8">char</name></type> <name pos:start="61:10" pos:end="61:20"><name pos:start="61:10" pos:end="61:14">t_log</name><index pos:start="61:15" pos:end="61:20">[<expr pos:start="61:16" pos:end="61:19"><literal type="number" pos:start="61:16" pos:end="61:19">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifndef pos:start="62:1" pos:end="62:13">#<cpp:directive pos:start="62:2" pos:end="62:7">ifndef</cpp:directive> <name pos:start="62:9" pos:end="62:13">WIN32</name></cpp:ifndef>
    <expr_stmt pos:start="63:5" pos:end="65:0"><expr pos:start="63:5" pos:end="63:21"><call pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:13">flockfile</name><argument_list pos:start="63:14" pos:end="63:21">(<argument pos:start="63:15" pos:end="63:20"><expr pos:start="63:15" pos:end="63:20"><name pos:start="63:15" pos:end="63:20">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="64:1" pos:end="64:5">#<cpp:directive pos:start="64:2" pos:end="64:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="65:5" pos:end="67:0"><expr pos:start="65:5" pos:end="65:50"><call pos:start="65:5" pos:end="65:50"><name pos:start="65:5" pos:end="65:24">EnterCriticalSection</name><argument_list pos:start="65:25" pos:end="65:50">(<argument pos:start="65:26" pos:end="65:49"><expr pos:start="65:26" pos:end="65:49"><operator pos:start="65:26" pos:end="65:26">&amp;</operator><name pos:start="65:27" pos:end="65:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="66:1" pos:end="66:6">#<cpp:directive pos:start="66:2" pos:end="66:6">endif</cpp:directive></cpp:endif> 
    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:26">(<expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:25">log_search_target</name></expr>)</condition> <block pos:start="67:28" pos:end="73:5">{<block_content pos:start="68:9" pos:end="72:37">
        <expr_stmt pos:start="68:9" pos:end="68:42"><expr pos:start="68:9" pos:end="68:41"><call pos:start="68:9" pos:end="68:41"><name pos:start="68:9" pos:end="68:17">vsnprintf</name><argument_list pos:start="68:18" pos:end="68:41">(<argument pos:start="68:19" pos:end="68:23"><expr pos:start="68:19" pos:end="68:23"><name pos:start="68:19" pos:end="68:23">t_log</name></expr></argument>, <argument pos:start="68:26" pos:end="68:29"><expr pos:start="68:26" pos:end="68:29"><literal type="number" pos:start="68:26" pos:end="68:29">1024</literal></expr></argument>, <argument pos:start="68:32" pos:end="68:37"><expr pos:start="68:32" pos:end="68:37"><name pos:start="68:32" pos:end="68:37">format</name></expr></argument>, <argument pos:start="68:40" pos:end="68:40"><expr pos:start="68:40" pos:end="68:40"><name pos:start="68:40" pos:end="68:40">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="69:9" pos:end="71:9"><if pos:start="69:9" pos:end="71:9">if <condition pos:start="69:12" pos:end="69:45">(<expr pos:start="69:13" pos:end="69:44"><call pos:start="69:13" pos:end="69:44"><name pos:start="69:13" pos:end="69:18">strstr</name><argument_list pos:start="69:19" pos:end="69:44">(<argument pos:start="69:20" pos:end="69:24"><expr pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:24">t_log</name></expr></argument>, <argument pos:start="69:27" pos:end="69:43"><expr pos:start="69:27" pos:end="69:43"><name pos:start="69:27" pos:end="69:43">log_search_target</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:47" pos:end="71:9">{<block_content pos:start="70:13" pos:end="70:36">
            <expr_stmt pos:start="70:13" pos:end="70:36"><expr pos:start="70:13" pos:end="70:35"><name pos:start="70:13" pos:end="70:31">search_target_found</name> <operator pos:start="70:33" pos:end="70:33">=</operator> <literal type="number" pos:start="70:35" pos:end="70:35">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="72:9" pos:end="72:37"><expr pos:start="72:9" pos:end="72:36"><call pos:start="72:9" pos:end="72:36"><name pos:start="72:9" pos:end="72:15">fprintf</name><argument_list pos:start="72:16" pos:end="72:36">(<argument pos:start="72:17" pos:end="72:22"><expr pos:start="72:17" pos:end="72:22"><name pos:start="72:17" pos:end="72:22">stderr</name></expr></argument>, <argument pos:start="72:25" pos:end="72:28"><expr pos:start="72:25" pos:end="72:28"><literal type="string" pos:start="72:25" pos:end="72:28">"%s"</literal></expr></argument>, <argument pos:start="72:31" pos:end="72:35"><expr pos:start="72:31" pos:end="72:35"><name pos:start="72:31" pos:end="72:35">t_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="73:7" pos:end="75:5">else <block pos:start="73:12" pos:end="75:5">{<block_content pos:start="74:9" pos:end="74:36">
        <expr_stmt pos:start="74:9" pos:end="74:36"><expr pos:start="74:9" pos:end="74:35"><call pos:start="74:9" pos:end="74:35"><name pos:start="74:9" pos:end="74:16">vfprintf</name><argument_list pos:start="74:17" pos:end="74:35">(<argument pos:start="74:18" pos:end="74:23"><expr pos:start="74:18" pos:end="74:23"><name pos:start="74:18" pos:end="74:23">stderr</name></expr></argument>, <argument pos:start="74:26" pos:end="74:31"><expr pos:start="74:26" pos:end="74:31"><name pos:start="74:26" pos:end="74:31">format</name></expr></argument>, <argument pos:start="74:34" pos:end="74:34"><expr pos:start="74:34" pos:end="74:34"><name pos:start="74:34" pos:end="74:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="76:5" pos:end="78:0"><expr pos:start="76:5" pos:end="76:18"><call pos:start="76:5" pos:end="76:18"><name pos:start="76:5" pos:end="76:10">fflush</name><argument_list pos:start="76:11" pos:end="76:18">(<argument pos:start="76:12" pos:end="76:17"><expr pos:start="76:12" pos:end="76:17"><name pos:start="76:12" pos:end="76:17">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef pos:start="77:1" pos:end="77:13">#<cpp:directive pos:start="77:2" pos:end="77:7">ifndef</cpp:directive> <name pos:start="77:9" pos:end="77:13">WIN32</name></cpp:ifndef>
    <expr_stmt pos:start="78:5" pos:end="80:0"><expr pos:start="78:5" pos:end="78:23"><call pos:start="78:5" pos:end="78:23"><name pos:start="78:5" pos:end="78:15">funlockfile</name><argument_list pos:start="78:16" pos:end="78:23">(<argument pos:start="78:17" pos:end="78:22"><expr pos:start="78:17" pos:end="78:22"><name pos:start="78:17" pos:end="78:22">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="79:1" pos:end="79:5">#<cpp:directive pos:start="79:2" pos:end="79:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="80:5" pos:end="82:0"><expr pos:start="80:5" pos:end="80:50"><call pos:start="80:5" pos:end="80:50"><name pos:start="80:5" pos:end="80:24">LeaveCriticalSection</name><argument_list pos:start="80:25" pos:end="80:50">(<argument pos:start="80:26" pos:end="80:49"><expr pos:start="80:26" pos:end="80:49"><operator pos:start="80:26" pos:end="80:26">&amp;</operator><name pos:start="80:27" pos:end="80:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif> 
</block_content>}</block></function>

<function pos:start="84:1" pos:end="86:1"><type pos:start="84:1" pos:end="84:11"><specifier pos:start="84:1" pos:end="84:6">static</specifier> <name pos:start="84:8" pos:end="84:11">void</name></type> <name pos:start="84:13" pos:end="84:24">us1005_clean</name> <parameter_list pos:start="84:26" pos:end="84:31">(<parameter pos:start="84:27" pos:end="84:30"><decl pos:start="84:27" pos:end="84:30"><type pos:start="84:27" pos:end="84:30"><name pos:start="84:27" pos:end="84:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="85:1" pos:end="86:1">{<block_content>
</block_content>}</block></function>

<function pos:start="88:1" pos:end="109:1"><type pos:start="88:1" pos:end="88:10"><specifier pos:start="88:1" pos:end="88:6">static</specifier> <name pos:start="88:8" pos:end="88:10">int</name></type> <name pos:start="88:12" pos:end="88:30">us1005_start_server</name> <parameter_list pos:start="88:32" pos:end="89:47">(<parameter pos:start="88:33" pos:end="88:49"><decl pos:start="88:33" pos:end="88:49"><type pos:start="88:33" pos:end="88:49"><name pos:start="88:33" pos:end="88:35">int</name></type> <name pos:start="88:37" pos:end="88:49">manual_enroll</name></decl></parameter>, <parameter pos:start="88:52" pos:end="88:58"><decl pos:start="88:52" pos:end="88:58"><type pos:start="88:52" pos:end="88:58"><name pos:start="88:52" pos:end="88:54">int</name></type> <name pos:start="88:56" pos:end="88:58">nid</name></decl></parameter>, <parameter pos:start="88:61" pos:end="88:76"><decl pos:start="88:61" pos:end="88:76"><type pos:start="88:61" pos:end="88:76"><name pos:start="88:61" pos:end="88:63">int</name></type> <name pos:start="88:65" pos:end="88:76">no_http_auth</name></decl></parameter>,
                                <parameter pos:start="89:33" pos:end="89:46"><decl pos:start="89:33" pos:end="89:46"><type pos:start="89:33" pos:end="89:46"><name pos:start="89:33" pos:end="89:35">int</name></type> <name pos:start="89:37" pos:end="89:46">enable_pop</name></decl></parameter>)</parameter_list>
<block pos:start="90:1" pos:end="109:1">{<block_content pos:start="91:5" pos:end="108:14">
    <decl_stmt pos:start="91:5" pos:end="91:11"><decl pos:start="91:5" pos:end="91:10"><type pos:start="91:5" pos:end="91:7"><name pos:start="91:5" pos:end="91:7">int</name></type> <name pos:start="91:9" pos:end="91:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="93:5" pos:end="102:23"><expr pos:start="93:5" pos:end="102:22"><name pos:start="93:5" pos:end="93:6">rv</name> <operator pos:start="93:8" pos:end="93:8">=</operator> <call pos:start="93:10" pos:end="102:22"><name pos:start="93:10" pos:end="93:17">st_start</name><argument_list pos:start="93:18" pos:end="102:22">(<argument pos:start="93:19" pos:end="93:36"><expr pos:start="93:19" pos:end="93:36"><name pos:start="93:19" pos:end="93:36">US1005_SERVER_PORT</name></expr></argument>,
                  <argument pos:start="94:19" pos:end="94:39"><expr pos:start="94:19" pos:end="94:39"><name pos:start="94:19" pos:end="94:39">US1005_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="95:19" pos:end="95:39"><expr pos:start="95:19" pos:end="95:39"><name pos:start="95:19" pos:end="95:39">US1005_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="96:19" pos:end="96:37"><expr pos:start="96:19" pos:end="96:37"><literal type="string" pos:start="96:19" pos:end="96:37">"US1005 test realm"</literal></expr></argument>,
                  <argument pos:start="97:19" pos:end="97:32"><expr pos:start="97:19" pos:end="97:32"><name pos:start="97:19" pos:end="97:32">US1005_CACERTS</name></expr></argument>,
                  <argument pos:start="98:19" pos:end="98:36"><expr pos:start="98:19" pos:end="98:36"><name pos:start="98:19" pos:end="98:36">US1005_TRUST_CERTS</name></expr></argument>,
                  <argument pos:start="99:19" pos:end="99:39"><expr pos:start="99:19" pos:end="99:39"><literal type="string" pos:start="99:19" pos:end="99:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="100:19" pos:end="100:31"><expr pos:start="100:19" pos:end="100:31"><name pos:start="100:19" pos:end="100:31">manual_enroll</name></expr></argument>,
                  <argument pos:start="101:19" pos:end="101:28"><expr pos:start="101:19" pos:end="101:28"><name pos:start="101:19" pos:end="101:28">enable_pop</name></expr></argument>,
                  <argument pos:start="102:19" pos:end="102:21"><expr pos:start="102:19" pos:end="102:21"><name pos:start="102:19" pos:end="102:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="104:5" pos:end="106:5"><if pos:start="104:5" pos:end="106:5">if <condition pos:start="104:8" pos:end="104:21">(<expr pos:start="104:9" pos:end="104:20"><name pos:start="104:9" pos:end="104:20">no_http_auth</name></expr>)</condition> <block pos:start="104:23" pos:end="106:5">{<block_content pos:start="105:9" pos:end="105:31">
        <expr_stmt pos:start="105:9" pos:end="105:31"><expr pos:start="105:9" pos:end="105:30"><call pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:28">st_disable_http_auth</name><argument_list pos:start="105:29" pos:end="105:30">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="108:5" pos:end="108:14">return <expr pos:start="108:12" pos:end="108:13"><name pos:start="108:12" pos:end="108:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="111:1" pos:end="115:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="116:1" pos:end="144:1"><type pos:start="116:1" pos:end="116:10"><specifier pos:start="116:1" pos:end="116:6">static</specifier> <name pos:start="116:8" pos:end="116:10">int</name></type> <name pos:start="116:12" pos:end="116:28">us1005_init_suite</name> <parameter_list pos:start="116:30" pos:end="116:35">(<parameter pos:start="116:31" pos:end="116:34"><decl pos:start="116:31" pos:end="116:34"><type pos:start="116:31" pos:end="116:34"><name pos:start="116:31" pos:end="116:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="117:1" pos:end="144:1">{<block_content pos:start="118:5" pos:end="143:14">
    <decl_stmt pos:start="118:5" pos:end="121:0"><decl pos:start="118:5" pos:end="118:10"><type pos:start="118:5" pos:end="118:7"><name pos:start="118:5" pos:end="118:7">int</name></type> <name pos:start="118:9" pos:end="118:10">rv</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="120:1" pos:end="120:12">#<cpp:directive pos:start="120:2" pos:end="120:6">ifdef</cpp:directive> <name pos:start="120:8" pos:end="120:12">WIN32</name></cpp:ifdef>
    <comment type="block" pos:start="121:5" pos:end="121:47">/* Initialize critical section on Windows*/</comment>
    <expr_stmt pos:start="122:5" pos:end="124:0"><expr pos:start="122:5" pos:end="122:55"><call pos:start="122:5" pos:end="122:55"><name pos:start="122:5" pos:end="122:29">InitializeCriticalSection</name><argument_list pos:start="122:30" pos:end="122:55">(<argument pos:start="122:31" pos:end="122:54"><expr pos:start="122:31" pos:end="122:54"><operator pos:start="122:31" pos:end="122:31">&amp;</operator><name pos:start="122:32" pos:end="122:54">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif> 

    <expr_stmt pos:start="125:5" pos:end="125:61"><expr pos:start="125:5" pos:end="125:60"><call pos:start="125:5" pos:end="125:60"><name pos:start="125:5" pos:end="125:19">est_init_logger</name><argument_list pos:start="125:20" pos:end="125:60">(<argument pos:start="125:21" pos:end="125:36"><expr pos:start="125:21" pos:end="125:36"><name pos:start="125:21" pos:end="125:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="125:39" pos:end="125:59"><expr pos:start="125:39" pos:end="125:59"><operator pos:start="125:39" pos:end="125:39">&amp;</operator><name pos:start="125:40" pos:end="125:59">us1005_logger_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="127:5" pos:end="129:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="130:5" pos:end="130:61"><expr pos:start="130:5" pos:end="130:60"><name pos:start="130:5" pos:end="130:15">cacerts_len</name> <operator pos:start="130:17" pos:end="130:17">=</operator> <call pos:start="130:19" pos:end="130:60"><name pos:start="130:19" pos:end="130:34">read_binary_file</name><argument_list pos:start="130:35" pos:end="130:60">(<argument pos:start="130:36" pos:end="130:49"><expr pos:start="130:36" pos:end="130:49"><name pos:start="130:36" pos:end="130:49">US1005_CACERTS</name></expr></argument>, <argument pos:start="130:52" pos:end="130:59"><expr pos:start="130:52" pos:end="130:59"><operator pos:start="130:52" pos:end="130:52">&amp;</operator><name pos:start="130:53" pos:end="130:59">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="131:5" pos:end="133:5"><if pos:start="131:5" pos:end="133:5">if <condition pos:start="131:8" pos:end="131:25">(<expr pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:19">cacerts_len</name> <operator pos:start="131:21" pos:end="131:22">&lt;=</operator> <literal type="number" pos:start="131:24" pos:end="131:24">0</literal></expr>)</condition> <block pos:start="131:27" pos:end="133:5">{<block_content pos:start="132:9" pos:end="132:17">
        <return pos:start="132:9" pos:end="132:17">return <expr pos:start="132:16" pos:end="132:16"><literal type="number" pos:start="132:16" pos:end="132:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:19"><expr pos:start="135:5" pos:end="135:18"><call pos:start="135:5" pos:end="135:18"><name pos:start="135:5" pos:end="135:16">us1005_clean</name><argument_list pos:start="135:17" pos:end="135:18">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="137:5" pos:end="140:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="141:5" pos:end="141:41"><expr pos:start="141:5" pos:end="141:40"><name pos:start="141:5" pos:end="141:6">rv</name> <operator pos:start="141:8" pos:end="141:8">=</operator> <call pos:start="141:10" pos:end="141:40"><name pos:start="141:10" pos:end="141:28">us1005_start_server</name><argument_list pos:start="141:29" pos:end="141:40">(<argument pos:start="141:30" pos:end="141:30"><expr pos:start="141:30" pos:end="141:30"><literal type="number" pos:start="141:30" pos:end="141:30">0</literal></expr></argument>, <argument pos:start="141:33" pos:end="141:33"><expr pos:start="141:33" pos:end="141:33"><literal type="number" pos:start="141:33" pos:end="141:33">0</literal></expr></argument>, <argument pos:start="141:36" pos:end="141:36"><expr pos:start="141:36" pos:end="141:36"><literal type="number" pos:start="141:36" pos:end="141:36">0</literal></expr></argument>, <argument pos:start="141:39" pos:end="141:39"><expr pos:start="141:39" pos:end="141:39"><literal type="number" pos:start="141:39" pos:end="141:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:14">return <expr pos:start="143:12" pos:end="143:13"><name pos:start="143:12" pos:end="143:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="146:1" pos:end="150:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="151:1" pos:end="156:1"><type pos:start="151:1" pos:end="151:10"><specifier pos:start="151:1" pos:end="151:6">static</specifier> <name pos:start="151:8" pos:end="151:10">int</name></type> <name pos:start="151:12" pos:end="151:31">us1005_destroy_suite</name> <parameter_list pos:start="151:33" pos:end="151:38">(<parameter pos:start="151:34" pos:end="151:37"><decl pos:start="151:34" pos:end="151:37"><type pos:start="151:34" pos:end="151:37"><name pos:start="151:34" pos:end="151:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="152:1" pos:end="156:1">{<block_content pos:start="153:5" pos:end="155:13">
    <expr_stmt pos:start="153:5" pos:end="153:14"><expr pos:start="153:5" pos:end="153:13"><call pos:start="153:5" pos:end="153:13"><name pos:start="153:5" pos:end="153:11">st_stop</name><argument_list pos:start="153:12" pos:end="153:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="154:5" pos:end="154:18"><expr pos:start="154:5" pos:end="154:17"><call pos:start="154:5" pos:end="154:17"><name pos:start="154:5" pos:end="154:8">free</name><argument_list pos:start="154:9" pos:end="154:17">(<argument pos:start="154:10" pos:end="154:16"><expr pos:start="154:10" pos:end="154:16"><name pos:start="154:10" pos:end="154:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="158:1" pos:end="184:1"><type pos:start="158:1" pos:end="158:17"><specifier pos:start="158:1" pos:end="158:6">static</specifier> <name pos:start="158:8" pos:end="158:15">EVP_PKEY</name> <modifier pos:start="158:17" pos:end="158:17">*</modifier></type> <name pos:start="158:19" pos:end="158:38">generate_private_key</name> <parameter_list pos:start="158:40" pos:end="158:45">(<parameter pos:start="158:41" pos:end="158:44"><decl pos:start="158:41" pos:end="158:44"><type pos:start="158:41" pos:end="158:44"><name pos:start="158:41" pos:end="158:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="159:1" pos:end="184:1">{<block_content pos:start="160:5" pos:end="183:18">
    <decl_stmt pos:start="160:5" pos:end="160:25"><decl pos:start="160:5" pos:end="160:24"><type pos:start="160:5" pos:end="160:9"><name pos:start="160:5" pos:end="160:7">RSA</name> <modifier pos:start="160:9" pos:end="160:9">*</modifier></type><name pos:start="160:10" pos:end="160:12">rsa</name> <init pos:start="160:14" pos:end="160:24">= <expr pos:start="160:16" pos:end="160:24"><call pos:start="160:16" pos:end="160:24"><name pos:start="160:16" pos:end="160:22">RSA_new</name><argument_list pos:start="160:23" pos:end="160:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="161:5" pos:end="161:26"><decl pos:start="161:5" pos:end="161:25"><type pos:start="161:5" pos:end="161:12"><name pos:start="161:5" pos:end="161:10">BIGNUM</name> <modifier pos:start="161:12" pos:end="161:12">*</modifier></type><name pos:start="161:13" pos:end="161:14">bn</name> <init pos:start="161:16" pos:end="161:25">= <expr pos:start="161:18" pos:end="161:25"><call pos:start="161:18" pos:end="161:25"><name pos:start="161:18" pos:end="161:23">BN_new</name><argument_list pos:start="161:24" pos:end="161:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="162:5" pos:end="162:19"><decl pos:start="162:5" pos:end="162:18"><type pos:start="162:5" pos:end="162:14"><name pos:start="162:5" pos:end="162:12">EVP_PKEY</name> <modifier pos:start="162:14" pos:end="162:14">*</modifier></type><name pos:start="162:15" pos:end="162:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="164:5" pos:end="166:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="167:5" pos:end="167:29"><expr pos:start="167:5" pos:end="167:28"><call pos:start="167:5" pos:end="167:28"><name pos:start="167:5" pos:end="167:15">BN_set_word</name><argument_list pos:start="167:16" pos:end="167:28">(<argument pos:start="167:17" pos:end="167:18"><expr pos:start="167:17" pos:end="167:18"><name pos:start="167:17" pos:end="167:18">bn</name></expr></argument>, <argument pos:start="167:21" pos:end="167:27"><expr pos:start="167:21" pos:end="167:27"><literal type="number" pos:start="167:21" pos:end="167:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="168:5" pos:end="168:45"><expr pos:start="168:5" pos:end="168:44"><call pos:start="168:5" pos:end="168:44"><name pos:start="168:5" pos:end="168:23">RSA_generate_key_ex</name><argument_list pos:start="168:24" pos:end="168:44">(<argument pos:start="168:25" pos:end="168:27"><expr pos:start="168:25" pos:end="168:27"><name pos:start="168:25" pos:end="168:27">rsa</name></expr></argument>, <argument pos:start="168:30" pos:end="168:33"><expr pos:start="168:30" pos:end="168:33"><literal type="number" pos:start="168:30" pos:end="168:33">1024</literal></expr></argument>, <argument pos:start="168:36" pos:end="168:37"><expr pos:start="168:36" pos:end="168:37"><name pos:start="168:36" pos:end="168:37">bn</name></expr></argument>, <argument pos:start="168:40" pos:end="168:43"><expr pos:start="168:40" pos:end="168:43"><name pos:start="168:40" pos:end="168:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="170:5" pos:end="170:26"><expr pos:start="170:5" pos:end="170:25"><name pos:start="170:5" pos:end="170:8">pkey</name> <operator pos:start="170:10" pos:end="170:10">=</operator> <call pos:start="170:12" pos:end="170:25"><name pos:start="170:12" pos:end="170:23">EVP_PKEY_new</name><argument_list pos:start="170:24" pos:end="170:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="171:5" pos:end="174:5"><if pos:start="171:5" pos:end="174:5">if <condition pos:start="171:8" pos:end="171:21">(<expr pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:12">pkey</name> <operator pos:start="171:14" pos:end="171:15">==</operator> <name pos:start="171:17" pos:end="171:20">NULL</name></expr>)</condition> <block pos:start="171:23" pos:end="174:5">{<block_content pos:start="172:9" pos:end="173:20">
        <expr_stmt pos:start="172:9" pos:end="172:71"><expr pos:start="172:9" pos:end="172:70"><call pos:start="172:9" pos:end="172:70"><name pos:start="172:9" pos:end="172:14">printf</name><argument_list pos:start="172:15" pos:end="172:70">(<argument pos:start="172:16" pos:end="172:69"><expr pos:start="172:16" pos:end="172:69"><literal type="string" pos:start="172:16" pos:end="172:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="173:9" pos:end="173:20">return <expr pos:start="173:16" pos:end="173:19"><name pos:start="173:16" pos:end="173:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="175:5" pos:end="178:5"><if pos:start="175:5" pos:end="178:5">if <condition pos:start="175:8" pos:end="175:38">(<expr pos:start="175:9" pos:end="175:37"><operator pos:start="175:9" pos:end="175:9">!</operator><call pos:start="175:10" pos:end="175:37"><name pos:start="175:10" pos:end="175:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="175:27" pos:end="175:37">(<argument pos:start="175:28" pos:end="175:31"><expr pos:start="175:28" pos:end="175:31"><name pos:start="175:28" pos:end="175:31">pkey</name></expr></argument>, <argument pos:start="175:34" pos:end="175:36"><expr pos:start="175:34" pos:end="175:36"><name pos:start="175:34" pos:end="175:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:40" pos:end="178:5">{<block_content pos:start="176:9" pos:end="177:20">
        <expr_stmt pos:start="176:9" pos:end="176:69"><expr pos:start="176:9" pos:end="176:68"><call pos:start="176:9" pos:end="176:68"><name pos:start="176:9" pos:end="176:14">printf</name><argument_list pos:start="176:15" pos:end="176:68">(<argument pos:start="176:16" pos:end="176:67"><expr pos:start="176:16" pos:end="176:67"><literal type="string" pos:start="176:16" pos:end="176:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="177:9" pos:end="177:20">return <expr pos:start="177:16" pos:end="177:19"><name pos:start="177:16" pos:end="177:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="180:5" pos:end="180:18"><expr pos:start="180:5" pos:end="180:17"><call pos:start="180:5" pos:end="180:17"><name pos:start="180:5" pos:end="180:12">RSA_free</name><argument_list pos:start="180:13" pos:end="180:17">(<argument pos:start="180:14" pos:end="180:16"><expr pos:start="180:14" pos:end="180:16"><name pos:start="180:14" pos:end="180:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="181:5" pos:end="181:16"><expr pos:start="181:5" pos:end="181:15"><call pos:start="181:5" pos:end="181:15"><name pos:start="181:5" pos:end="181:11">BN_free</name><argument_list pos:start="181:12" pos:end="181:15">(<argument pos:start="181:13" pos:end="181:14"><expr pos:start="181:13" pos:end="181:14"><name pos:start="181:13" pos:end="181:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:18">return <expr pos:start="183:12" pos:end="183:17"><operator pos:start="183:12" pos:end="183:12">(</operator><name pos:start="183:13" pos:end="183:16">pkey</name><operator pos:start="183:17" pos:end="183:17">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="186:1" pos:end="190:3">/*
 * This function performs the easy provision operation using
 * a UID/PWD to identify the client to the server.  This
 * is used for a variety of test cases in this module.
 */</comment>
<function pos:start="191:1" pos:end="308:1"><type pos:start="191:1" pos:end="191:11"><specifier pos:start="191:1" pos:end="191:6">static</specifier> <name pos:start="191:8" pos:end="191:11">void</name></type> <name pos:start="191:13" pos:end="191:33">us1005_easy_provision</name> <parameter_list pos:start="191:35" pos:end="192:48">(<parameter pos:start="191:36" pos:end="191:43"><decl pos:start="191:36" pos:end="191:43"><type pos:start="191:36" pos:end="191:43"><name pos:start="191:36" pos:end="191:39">char</name> <modifier pos:start="191:41" pos:end="191:41">*</modifier></type><name pos:start="191:42" pos:end="191:43">cn</name></decl></parameter>, <parameter pos:start="191:46" pos:end="191:57"><decl pos:start="191:46" pos:end="191:57"><type pos:start="191:46" pos:end="191:57"><name pos:start="191:46" pos:end="191:49">char</name> <modifier pos:start="191:51" pos:end="191:51">*</modifier></type><name pos:start="191:52" pos:end="191:57">server</name></decl></parameter>, <parameter pos:start="191:60" pos:end="191:70"><decl pos:start="191:60" pos:end="191:70"><type pos:start="191:60" pos:end="191:70"><name pos:start="191:60" pos:end="191:62">int</name></type> <name pos:start="191:64" pos:end="191:70">ba_hint</name></decl></parameter>,
                                   <parameter pos:start="192:36" pos:end="192:47"><decl pos:start="192:36" pos:end="192:47"><type pos:start="192:36" pos:end="192:47"><name pos:start="192:36" pos:end="192:38">int</name></type> <name pos:start="192:40" pos:end="192:47">use_cert</name></decl></parameter>)</parameter_list>
<block pos:start="193:1" pos:end="308:1">{<block_content pos:start="194:5" pos:end="307:22">
    <decl_stmt pos:start="194:5" pos:end="194:18"><decl pos:start="194:5" pos:end="194:17"><type pos:start="194:5" pos:end="194:13"><name pos:start="194:5" pos:end="194:11">EST_CTX</name> <modifier pos:start="194:13" pos:end="194:13">*</modifier></type><name pos:start="194:14" pos:end="194:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="195:5" pos:end="195:22"><decl pos:start="195:5" pos:end="195:21"><type pos:start="195:5" pos:end="195:14"><name pos:start="195:5" pos:end="195:12">EVP_PKEY</name> <modifier pos:start="195:14" pos:end="195:14">*</modifier></type><name pos:start="195:15" pos:end="195:21">new_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="196:5" pos:end="196:11"><decl pos:start="196:5" pos:end="196:10"><type pos:start="196:5" pos:end="196:7"><name pos:start="196:5" pos:end="196:7">int</name></type> <name pos:start="196:9" pos:end="196:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="197:5" pos:end="197:22"><decl pos:start="197:5" pos:end="197:21"><type pos:start="197:5" pos:end="197:7"><name pos:start="197:5" pos:end="197:7">int</name></type> <name pos:start="197:9" pos:end="197:17">pkcs7_len</name> <init pos:start="197:19" pos:end="197:21">= <expr pos:start="197:21" pos:end="197:21"><literal type="number" pos:start="197:21" pos:end="197:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="198:5" pos:end="198:25"><decl pos:start="198:5" pos:end="198:24"><type pos:start="198:5" pos:end="198:7"><name pos:start="198:5" pos:end="198:7">int</name></type> <name pos:start="198:9" pos:end="198:20">ca_certs_len</name> <init pos:start="198:22" pos:end="198:24">= <expr pos:start="198:24" pos:end="198:24"><literal type="number" pos:start="198:24" pos:end="198:24">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="199:5" pos:end="199:35"><decl pos:start="199:5" pos:end="199:34"><type pos:start="199:5" pos:end="199:19"><name pos:start="199:5" pos:end="199:12">unsigned</name> <name pos:start="199:14" pos:end="199:17">char</name> <modifier pos:start="199:19" pos:end="199:19">*</modifier></type><name pos:start="199:20" pos:end="199:27">new_cert</name> <init pos:start="199:29" pos:end="199:34">= <expr pos:start="199:31" pos:end="199:34"><name pos:start="199:31" pos:end="199:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="200:5" pos:end="200:25"><decl pos:start="200:5" pos:end="200:24"><type pos:start="200:5" pos:end="200:14"><name pos:start="200:5" pos:end="200:12">EVP_PKEY</name> <modifier pos:start="200:14" pos:end="200:14">*</modifier></type><name pos:start="200:15" pos:end="200:17">key</name> <init pos:start="200:19" pos:end="200:24">= <expr pos:start="200:21" pos:end="200:24"><name pos:start="200:21" pos:end="200:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="201:5" pos:end="201:27"><decl pos:start="201:5" pos:end="201:26"><type pos:start="201:5" pos:end="201:19"><name pos:start="201:5" pos:end="201:12">unsigned</name> <name pos:start="201:14" pos:end="201:17">char</name> <modifier pos:start="201:19" pos:end="201:19">*</modifier></type><name pos:start="201:20" pos:end="201:26">key_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="202:5" pos:end="202:16"><decl pos:start="202:5" pos:end="202:15"><type pos:start="202:5" pos:end="202:7"><name pos:start="202:5" pos:end="202:7">int</name></type> <name pos:start="202:9" pos:end="202:15">key_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="203:5" pos:end="203:28"><decl pos:start="203:5" pos:end="203:27"><type pos:start="203:5" pos:end="203:19"><name pos:start="203:5" pos:end="203:12">unsigned</name> <name pos:start="203:14" pos:end="203:17">char</name> <modifier pos:start="203:19" pos:end="203:19">*</modifier></type><name pos:start="203:20" pos:end="203:27">cert_raw</name></decl>;</decl_stmt>
    <decl_stmt pos:start="204:5" pos:end="204:17"><decl pos:start="204:5" pos:end="204:16"><type pos:start="204:5" pos:end="204:7"><name pos:start="204:5" pos:end="204:7">int</name></type> <name pos:start="204:9" pos:end="204:16">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="205:5" pos:end="205:22"><decl pos:start="205:5" pos:end="205:21"><type pos:start="205:5" pos:end="205:10"><name pos:start="205:5" pos:end="205:8">X509</name> <modifier pos:start="205:10" pos:end="205:10">*</modifier></type><name pos:start="205:11" pos:end="205:14">cert</name> <init pos:start="205:16" pos:end="205:21">= <expr pos:start="205:18" pos:end="205:21"><name pos:start="205:18" pos:end="205:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="206:5" pos:end="206:12"><decl pos:start="206:5" pos:end="206:11"><type pos:start="206:5" pos:end="206:9"><name pos:start="206:5" pos:end="206:7">BIO</name> <modifier pos:start="206:9" pos:end="206:9">*</modifier></type><name pos:start="206:10" pos:end="206:11">in</name></decl>;</decl_stmt>

    <comment type="block" pos:start="208:5" pos:end="210:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="211:5" pos:end="211:76"><expr pos:start="211:5" pos:end="211:75"><name pos:start="211:5" pos:end="211:8">ectx</name> <operator pos:start="211:10" pos:end="211:10">=</operator> <call pos:start="211:12" pos:end="211:75"><name pos:start="211:12" pos:end="211:26">est_client_init</name><argument_list pos:start="211:27" pos:end="211:75">(<argument pos:start="211:28" pos:end="211:34"><expr pos:start="211:28" pos:end="211:34"><name pos:start="211:28" pos:end="211:34">cacerts</name></expr></argument>, <argument pos:start="211:37" pos:end="211:47"><expr pos:start="211:37" pos:end="211:47"><name pos:start="211:37" pos:end="211:47">cacerts_len</name></expr></argument>, <argument pos:start="211:50" pos:end="211:68"><expr pos:start="211:50" pos:end="211:68"><name pos:start="211:50" pos:end="211:68">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="211:71" pos:end="211:74"><expr pos:start="211:71" pos:end="211:74"><name pos:start="211:71" pos:end="211:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="212:5" pos:end="212:28"><expr pos:start="212:5" pos:end="212:27"><call pos:start="212:5" pos:end="212:27"><name pos:start="212:5" pos:end="212:13">CU_ASSERT</name><argument_list pos:start="212:14" pos:end="212:27">(<argument pos:start="212:15" pos:end="212:26"><expr pos:start="212:15" pos:end="212:26"><name pos:start="212:15" pos:end="212:18">ectx</name> <operator pos:start="212:20" pos:end="212:21">!=</operator> <name pos:start="212:23" pos:end="212:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="214:5" pos:end="239:5"><if pos:start="214:5" pos:end="239:5">if <condition pos:start="214:8" pos:end="214:17">(<expr pos:start="214:9" pos:end="214:16"><name pos:start="214:9" pos:end="214:16">use_cert</name></expr>)</condition> <block pos:start="214:19" pos:end="239:5">{<block_content pos:start="218:9" pos:end="238:23">
        <comment type="block" pos:start="215:9" pos:end="217:11">/*
         * Read in the private key
         */</comment>
        <expr_stmt pos:start="218:9" pos:end="218:64"><expr pos:start="218:9" pos:end="218:63"><name pos:start="218:9" pos:end="218:15">key_len</name> <operator pos:start="218:17" pos:end="218:17">=</operator> <call pos:start="218:19" pos:end="218:63"><name pos:start="218:19" pos:end="218:34">read_binary_file</name><argument_list pos:start="218:35" pos:end="218:63">(<argument pos:start="218:36" pos:end="218:52"><expr pos:start="218:36" pos:end="218:52"><name pos:start="218:36" pos:end="218:52">US1005_CLIENT_KEY</name></expr></argument>, <argument pos:start="218:55" pos:end="218:62"><expr pos:start="218:55" pos:end="218:62"><operator pos:start="218:55" pos:end="218:55">&amp;</operator><name pos:start="218:56" pos:end="218:62">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="219:9" pos:end="219:31"><expr pos:start="219:9" pos:end="219:30"><call pos:start="219:9" pos:end="219:30"><name pos:start="219:9" pos:end="219:17">CU_ASSERT</name><argument_list pos:start="219:18" pos:end="219:30">(<argument pos:start="219:19" pos:end="219:29"><expr pos:start="219:19" pos:end="219:29"><name pos:start="219:19" pos:end="219:25">key_len</name> <operator pos:start="219:27" pos:end="219:27">&gt;</operator> <literal type="number" pos:start="219:29" pos:end="219:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="220:9" pos:end="220:61"><expr pos:start="220:9" pos:end="220:60"><name pos:start="220:9" pos:end="220:11">key</name> <operator pos:start="220:13" pos:end="220:13">=</operator> <call pos:start="220:15" pos:end="220:60"><name pos:start="220:15" pos:end="220:26">est_load_key</name><argument_list pos:start="220:27" pos:end="220:60">(<argument pos:start="220:28" pos:end="220:34"><expr pos:start="220:28" pos:end="220:34"><name pos:start="220:28" pos:end="220:34">key_raw</name></expr></argument>, <argument pos:start="220:37" pos:end="220:43"><expr pos:start="220:37" pos:end="220:43"><name pos:start="220:37" pos:end="220:43">key_len</name></expr></argument>, <argument pos:start="220:46" pos:end="220:59"><expr pos:start="220:46" pos:end="220:59"><name pos:start="220:46" pos:end="220:59">EST_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="221:9" pos:end="221:31"><expr pos:start="221:9" pos:end="221:30"><call pos:start="221:9" pos:end="221:30"><name pos:start="221:9" pos:end="221:17">CU_ASSERT</name><argument_list pos:start="221:18" pos:end="221:30">(<argument pos:start="221:19" pos:end="221:29"><expr pos:start="221:19" pos:end="221:29"><name pos:start="221:19" pos:end="221:21">key</name> <operator pos:start="221:23" pos:end="221:24">!=</operator> <name pos:start="221:26" pos:end="221:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="222:9" pos:end="222:22"><expr pos:start="222:9" pos:end="222:21"><call pos:start="222:9" pos:end="222:21"><name pos:start="222:9" pos:end="222:12">free</name><argument_list pos:start="222:13" pos:end="222:21">(<argument pos:start="222:14" pos:end="222:20"><expr pos:start="222:14" pos:end="222:20"><name pos:start="222:14" pos:end="222:20">key_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="224:9" pos:end="226:11">/*
         * Read in the old cert
         */</comment>
        <expr_stmt pos:start="227:9" pos:end="227:67"><expr pos:start="227:9" pos:end="227:66"><name pos:start="227:9" pos:end="227:16">cert_len</name> <operator pos:start="227:18" pos:end="227:18">=</operator> <call pos:start="227:20" pos:end="227:66"><name pos:start="227:20" pos:end="227:35">read_binary_file</name><argument_list pos:start="227:36" pos:end="227:66">(<argument pos:start="227:37" pos:end="227:54"><expr pos:start="227:37" pos:end="227:54"><name pos:start="227:37" pos:end="227:54">US1005_CLIENT_CERT</name></expr></argument>, <argument pos:start="227:57" pos:end="227:65"><expr pos:start="227:57" pos:end="227:65"><operator pos:start="227:57" pos:end="227:57">&amp;</operator><name pos:start="227:58" pos:end="227:65">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="228:9" pos:end="228:32"><expr pos:start="228:9" pos:end="228:31"><call pos:start="228:9" pos:end="228:31"><name pos:start="228:9" pos:end="228:17">CU_ASSERT</name><argument_list pos:start="228:18" pos:end="228:31">(<argument pos:start="228:19" pos:end="228:30"><expr pos:start="228:19" pos:end="228:30"><name pos:start="228:19" pos:end="228:26">cert_len</name> <operator pos:start="228:28" pos:end="228:28">&gt;</operator> <literal type="number" pos:start="228:30" pos:end="228:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="229:9" pos:end="229:49"><expr pos:start="229:9" pos:end="229:48"><name pos:start="229:9" pos:end="229:10">in</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <call pos:start="229:14" pos:end="229:48"><name pos:start="229:14" pos:end="229:28">BIO_new_mem_buf</name><argument_list pos:start="229:29" pos:end="229:48">(<argument pos:start="229:30" pos:end="229:37"><expr pos:start="229:30" pos:end="229:37"><name pos:start="229:30" pos:end="229:37">cert_raw</name></expr></argument>, <argument pos:start="229:40" pos:end="229:47"><expr pos:start="229:40" pos:end="229:47"><name pos:start="229:40" pos:end="229:47">cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="230:9" pos:end="230:30"><expr pos:start="230:9" pos:end="230:29"><call pos:start="230:9" pos:end="230:29"><name pos:start="230:9" pos:end="230:17">CU_ASSERT</name><argument_list pos:start="230:18" pos:end="230:29">(<argument pos:start="230:19" pos:end="230:28"><expr pos:start="230:19" pos:end="230:28"><name pos:start="230:19" pos:end="230:20">in</name> <operator pos:start="230:22" pos:end="230:23">!=</operator> <name pos:start="230:25" pos:end="230:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="231:9" pos:end="232:19"><if pos:start="231:9" pos:end="232:19">if <condition pos:start="231:12" pos:end="231:16">(<expr pos:start="231:13" pos:end="231:15"><operator pos:start="231:13" pos:end="231:13">!</operator><name pos:start="231:14" pos:end="231:15">in</name></expr>)</condition><block type="pseudo" pos:start="232:13" pos:end="232:19"><block_content pos:start="232:13" pos:end="232:19">
            <return pos:start="232:13" pos:end="232:19">return;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="233:9" pos:end="233:59"><expr pos:start="233:9" pos:end="233:58"><name pos:start="233:9" pos:end="233:12">cert</name> <operator pos:start="233:14" pos:end="233:14">=</operator> <call pos:start="233:16" pos:end="233:58"><name pos:start="233:16" pos:end="233:36">PEM_read_bio_X509_AUX</name><argument_list pos:start="233:37" pos:end="233:58">(<argument pos:start="233:38" pos:end="233:39"><expr pos:start="233:38" pos:end="233:39"><name pos:start="233:38" pos:end="233:39">in</name></expr></argument>, <argument pos:start="233:42" pos:end="233:45"><expr pos:start="233:42" pos:end="233:45"><name pos:start="233:42" pos:end="233:45">NULL</name></expr></argument>, <argument pos:start="233:48" pos:end="233:51"><expr pos:start="233:48" pos:end="233:51"><name pos:start="233:48" pos:end="233:51">NULL</name></expr></argument>, <argument pos:start="233:54" pos:end="233:57"><expr pos:start="233:54" pos:end="233:57"><name pos:start="233:54" pos:end="233:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="234:9" pos:end="234:32"><expr pos:start="234:9" pos:end="234:31"><call pos:start="234:9" pos:end="234:31"><name pos:start="234:9" pos:end="234:17">CU_ASSERT</name><argument_list pos:start="234:18" pos:end="234:31">(<argument pos:start="234:19" pos:end="234:30"><expr pos:start="234:19" pos:end="234:30"><name pos:start="234:19" pos:end="234:22">cert</name> <operator pos:start="234:24" pos:end="234:25">!=</operator> <name pos:start="234:27" pos:end="234:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="235:9" pos:end="236:19"><if pos:start="235:9" pos:end="236:19">if <condition pos:start="235:12" pos:end="235:18">(<expr pos:start="235:13" pos:end="235:17"><operator pos:start="235:13" pos:end="235:13">!</operator><name pos:start="235:14" pos:end="235:17">cert</name></expr>)</condition><block type="pseudo" pos:start="236:13" pos:end="236:19"><block_content pos:start="236:13" pos:end="236:19">
            <return pos:start="236:13" pos:end="236:19">return;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="237:9" pos:end="237:25"><expr pos:start="237:9" pos:end="237:24"><call pos:start="237:9" pos:end="237:24"><name pos:start="237:9" pos:end="237:20">BIO_free_all</name><argument_list pos:start="237:21" pos:end="237:24">(<argument pos:start="237:22" pos:end="237:23"><expr pos:start="237:22" pos:end="237:23"><name pos:start="237:22" pos:end="237:23">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="238:9" pos:end="238:23"><expr pos:start="238:9" pos:end="238:22"><call pos:start="238:9" pos:end="238:22"><name pos:start="238:9" pos:end="238:12">free</name><argument_list pos:start="238:13" pos:end="238:22">(<argument pos:start="238:14" pos:end="238:21"><expr pos:start="238:14" pos:end="238:21"><name pos:start="238:14" pos:end="238:21">cert_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="241:5" pos:end="243:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="244:5" pos:end="244:70"><expr pos:start="244:5" pos:end="244:69"><name pos:start="244:5" pos:end="244:6">rv</name> <operator pos:start="244:8" pos:end="244:8">=</operator> <call pos:start="244:10" pos:end="244:69"><name pos:start="244:10" pos:end="244:28">est_client_set_auth</name><argument_list pos:start="244:29" pos:end="244:69">(<argument pos:start="244:30" pos:end="244:33"><expr pos:start="244:30" pos:end="244:33"><name pos:start="244:30" pos:end="244:33">ectx</name></expr></argument>, <argument pos:start="244:36" pos:end="244:45"><expr pos:start="244:36" pos:end="244:45"><name pos:start="244:36" pos:end="244:45">US1005_UID</name></expr></argument>, <argument pos:start="244:48" pos:end="244:57"><expr pos:start="244:48" pos:end="244:57"><name pos:start="244:48" pos:end="244:57">US1005_PWD</name></expr></argument>, <argument pos:start="244:60" pos:end="244:63"><expr pos:start="244:60" pos:end="244:63"><name pos:start="244:60" pos:end="244:63">cert</name></expr></argument>, <argument pos:start="244:66" pos:end="244:68"><expr pos:start="244:66" pos:end="244:68"><name pos:start="244:66" pos:end="244:68">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="245:5" pos:end="245:34"><expr pos:start="245:5" pos:end="245:33"><call pos:start="245:5" pos:end="245:33"><name pos:start="245:5" pos:end="245:13">CU_ASSERT</name><argument_list pos:start="245:14" pos:end="245:33">(<argument pos:start="245:15" pos:end="245:32"><expr pos:start="245:15" pos:end="245:32"><name pos:start="245:15" pos:end="245:16">rv</name> <operator pos:start="245:18" pos:end="245:19">==</operator> <name pos:start="245:21" pos:end="245:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="250:5"><if pos:start="247:5" pos:end="250:5">if <condition pos:start="247:8" pos:end="247:16">(<expr pos:start="247:9" pos:end="247:15"><name pos:start="247:9" pos:end="247:15">ba_hint</name></expr>)</condition> <block pos:start="247:18" pos:end="250:5">{<block_content pos:start="248:9" pos:end="249:38">
        <expr_stmt pos:start="248:9" pos:end="248:53"><expr pos:start="248:9" pos:end="248:52"><name pos:start="248:9" pos:end="248:10">rv</name> <operator pos:start="248:12" pos:end="248:12">=</operator> <call pos:start="248:14" pos:end="248:52"><name pos:start="248:14" pos:end="248:46">est_client_enable_basic_auth_hint</name><argument_list pos:start="248:47" pos:end="248:52">(<argument pos:start="248:48" pos:end="248:51"><expr pos:start="248:48" pos:end="248:51"><name pos:start="248:48" pos:end="248:51">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="249:9" pos:end="249:38"><expr pos:start="249:9" pos:end="249:37"><call pos:start="249:9" pos:end="249:37"><name pos:start="249:9" pos:end="249:17">CU_ASSERT</name><argument_list pos:start="249:18" pos:end="249:37">(<argument pos:start="249:19" pos:end="249:36"><expr pos:start="249:19" pos:end="249:36"><name pos:start="249:19" pos:end="249:20">rv</name> <operator pos:start="249:22" pos:end="249:23">==</operator> <name pos:start="249:25" pos:end="249:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="252:5" pos:end="254:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="255:5" pos:end="255:66"><expr pos:start="255:5" pos:end="255:65"><call pos:start="255:5" pos:end="255:65"><name pos:start="255:5" pos:end="255:25">est_client_set_server</name><argument_list pos:start="255:26" pos:end="255:65">(<argument pos:start="255:27" pos:end="255:30"><expr pos:start="255:27" pos:end="255:30"><name pos:start="255:27" pos:end="255:30">ectx</name></expr></argument>, <argument pos:start="255:33" pos:end="255:38"><expr pos:start="255:33" pos:end="255:38"><name pos:start="255:33" pos:end="255:38">server</name></expr></argument>, <argument pos:start="255:41" pos:end="255:58"><expr pos:start="255:41" pos:end="255:58"><name pos:start="255:41" pos:end="255:58">US1005_SERVER_PORT</name></expr></argument>, <argument pos:start="255:61" pos:end="255:64"><expr pos:start="255:61" pos:end="255:64"><name pos:start="255:61" pos:end="255:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="257:5" pos:end="259:7">/*
     * generate a new private key
     */</comment>
    <expr_stmt pos:start="260:5" pos:end="260:37"><expr pos:start="260:5" pos:end="260:36"><name pos:start="260:5" pos:end="260:11">new_key</name> <operator pos:start="260:13" pos:end="260:13">=</operator> <call pos:start="260:15" pos:end="260:36"><name pos:start="260:15" pos:end="260:34">generate_private_key</name><argument_list pos:start="260:35" pos:end="260:36">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="261:5" pos:end="261:31"><expr pos:start="261:5" pos:end="261:30"><call pos:start="261:5" pos:end="261:30"><name pos:start="261:5" pos:end="261:13">CU_ASSERT</name><argument_list pos:start="261:14" pos:end="261:30">(<argument pos:start="261:15" pos:end="261:29"><expr pos:start="261:15" pos:end="261:29"><name pos:start="261:15" pos:end="261:21">new_key</name> <operator pos:start="261:23" pos:end="261:24">!=</operator> <name pos:start="261:26" pos:end="261:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="263:5" pos:end="265:7">/*
     * Attempt to provision a new cert
     */</comment>
    <expr_stmt pos:start="266:5" pos:end="267:17"><expr pos:start="266:5" pos:end="267:16"><name pos:start="266:5" pos:end="266:6">rv</name> <operator pos:start="266:8" pos:end="266:8">=</operator> <call pos:start="266:10" pos:end="267:16"><name pos:start="266:10" pos:end="266:34">est_client_provision_cert</name><argument_list pos:start="266:35" pos:end="267:16">(<argument pos:start="266:36" pos:end="266:39"><expr pos:start="266:36" pos:end="266:39"><name pos:start="266:36" pos:end="266:39">ectx</name></expr></argument>, <argument pos:start="266:42" pos:end="266:43"><expr pos:start="266:42" pos:end="266:43"><name pos:start="266:42" pos:end="266:43">cn</name></expr></argument>, <argument pos:start="266:46" pos:end="266:55"><expr pos:start="266:46" pos:end="266:55"><operator pos:start="266:46" pos:end="266:46">&amp;</operator><name pos:start="266:47" pos:end="266:55">pkcs7_len</name></expr></argument>, <argument pos:start="266:58" pos:end="266:70"><expr pos:start="266:58" pos:end="266:70"><operator pos:start="266:58" pos:end="266:58">&amp;</operator><name pos:start="266:59" pos:end="266:70">ca_certs_len</name></expr></argument>,
        <argument pos:start="267:9" pos:end="267:15"><expr pos:start="267:9" pos:end="267:15"><name pos:start="267:9" pos:end="267:15">new_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="268:5" pos:end="268:34"><expr pos:start="268:5" pos:end="268:33"><call pos:start="268:5" pos:end="268:33"><name pos:start="268:5" pos:end="268:13">CU_ASSERT</name><argument_list pos:start="268:14" pos:end="268:33">(<argument pos:start="268:15" pos:end="268:32"><expr pos:start="268:15" pos:end="268:32"><name pos:start="268:15" pos:end="268:16">rv</name> <operator pos:start="268:18" pos:end="268:19">==</operator> <name pos:start="268:21" pos:end="268:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:27"><expr pos:start="269:5" pos:end="269:26"><call pos:start="269:5" pos:end="269:26"><name pos:start="269:5" pos:end="269:17">EVP_PKEY_free</name><argument_list pos:start="269:18" pos:end="269:26">(<argument pos:start="269:19" pos:end="269:25"><expr pos:start="269:19" pos:end="269:25"><name pos:start="269:19" pos:end="269:25">new_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="271:5" pos:end="273:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="274:5" pos:end="284:5"><if pos:start="274:5" pos:end="281:5">if <condition pos:start="274:8" pos:end="274:27">(<expr pos:start="274:9" pos:end="274:26"><name pos:start="274:9" pos:end="274:10">rv</name> <operator pos:start="274:12" pos:end="274:13">==</operator> <name pos:start="274:15" pos:end="274:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="274:29" pos:end="281:5">{<block_content pos:start="275:9" pos:end="280:27">
        <expr_stmt pos:start="275:9" pos:end="275:37"><expr pos:start="275:9" pos:end="275:36"><name pos:start="275:9" pos:end="275:16">new_cert</name> <operator pos:start="275:18" pos:end="275:18">=</operator> <call pos:start="275:20" pos:end="275:36"><name pos:start="275:20" pos:end="275:25">malloc</name><argument_list pos:start="275:26" pos:end="275:36">(<argument pos:start="275:27" pos:end="275:35"><expr pos:start="275:27" pos:end="275:35"><name pos:start="275:27" pos:end="275:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="276:9" pos:end="276:36"><expr pos:start="276:9" pos:end="276:35"><call pos:start="276:9" pos:end="276:35"><name pos:start="276:9" pos:end="276:17">CU_ASSERT</name><argument_list pos:start="276:18" pos:end="276:35">(<argument pos:start="276:19" pos:end="276:34"><expr pos:start="276:19" pos:end="276:34"><name pos:start="276:19" pos:end="276:26">new_cert</name> <operator pos:start="276:28" pos:end="276:29">!=</operator> <name pos:start="276:31" pos:end="276:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="277:9" pos:end="277:59"><expr pos:start="277:9" pos:end="277:58"><name pos:start="277:9" pos:end="277:10">rv</name> <operator pos:start="277:12" pos:end="277:12">=</operator> <call pos:start="277:14" pos:end="277:58"><name pos:start="277:14" pos:end="277:42">est_client_copy_enrolled_cert</name><argument_list pos:start="277:43" pos:end="277:58">(<argument pos:start="277:44" pos:end="277:47"><expr pos:start="277:44" pos:end="277:47"><name pos:start="277:44" pos:end="277:47">ectx</name></expr></argument>, <argument pos:start="277:50" pos:end="277:57"><expr pos:start="277:50" pos:end="277:57"><name pos:start="277:50" pos:end="277:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="278:9" pos:end="278:38"><expr pos:start="278:9" pos:end="278:37"><call pos:start="278:9" pos:end="278:37"><name pos:start="278:9" pos:end="278:17">CU_ASSERT</name><argument_list pos:start="278:18" pos:end="278:37">(<argument pos:start="278:19" pos:end="278:36"><expr pos:start="278:19" pos:end="278:36"><name pos:start="278:19" pos:end="278:20">rv</name> <operator pos:start="278:22" pos:end="278:23">==</operator> <name pos:start="278:25" pos:end="278:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="279:9" pos:end="280:27"><if pos:start="279:9" pos:end="280:27">if <condition pos:start="279:12" pos:end="279:21">(<expr pos:start="279:13" pos:end="279:20"><name pos:start="279:13" pos:end="279:20">new_cert</name></expr>)</condition><block type="pseudo" pos:start="280:13" pos:end="280:27"><block_content pos:start="280:13" pos:end="280:27">
            <expr_stmt pos:start="280:13" pos:end="280:27"><expr pos:start="280:13" pos:end="280:26"><call pos:start="280:13" pos:end="280:26"><name pos:start="280:13" pos:end="280:16">free</name><argument_list pos:start="280:17" pos:end="280:26">(<argument pos:start="280:18" pos:end="280:25"><expr pos:start="280:18" pos:end="280:25"><name pos:start="280:18" pos:end="280:25">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="281:7" pos:end="284:5">else <block pos:start="281:12" pos:end="284:5">{<block_content pos:start="282:9" pos:end="283:15">
        <expr_stmt pos:start="282:9" pos:end="282:26"><expr pos:start="282:9" pos:end="282:25"><call pos:start="282:9" pos:end="282:25"><name pos:start="282:9" pos:end="282:19">est_destroy</name><argument_list pos:start="282:20" pos:end="282:25">(<argument pos:start="282:21" pos:end="282:24"><expr pos:start="282:21" pos:end="282:24"><name pos:start="282:21" pos:end="282:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="283:9" pos:end="283:15">return;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="286:5" pos:end="288:7">/*
     * Retrieve a copy of the new CA certs
     */</comment>
    <if_stmt pos:start="289:5" pos:end="299:5"><if pos:start="289:5" pos:end="296:5">if <condition pos:start="289:8" pos:end="289:27">(<expr pos:start="289:9" pos:end="289:26"><name pos:start="289:9" pos:end="289:10">rv</name> <operator pos:start="289:12" pos:end="289:13">==</operator> <name pos:start="289:15" pos:end="289:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="289:29" pos:end="296:5">{<block_content pos:start="290:9" pos:end="295:27">
        <expr_stmt pos:start="290:9" pos:end="290:40"><expr pos:start="290:9" pos:end="290:39"><name pos:start="290:9" pos:end="290:16">new_cert</name> <operator pos:start="290:18" pos:end="290:18">=</operator> <call pos:start="290:20" pos:end="290:39"><name pos:start="290:20" pos:end="290:25">malloc</name><argument_list pos:start="290:26" pos:end="290:39">(<argument pos:start="290:27" pos:end="290:38"><expr pos:start="290:27" pos:end="290:38"><name pos:start="290:27" pos:end="290:38">ca_certs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="291:9" pos:end="291:36"><expr pos:start="291:9" pos:end="291:35"><call pos:start="291:9" pos:end="291:35"><name pos:start="291:9" pos:end="291:17">CU_ASSERT</name><argument_list pos:start="291:18" pos:end="291:35">(<argument pos:start="291:19" pos:end="291:34"><expr pos:start="291:19" pos:end="291:34"><name pos:start="291:19" pos:end="291:26">new_cert</name> <operator pos:start="291:28" pos:end="291:29">!=</operator> <name pos:start="291:31" pos:end="291:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="292:9" pos:end="292:53"><expr pos:start="292:9" pos:end="292:52"><name pos:start="292:9" pos:end="292:10">rv</name> <operator pos:start="292:12" pos:end="292:12">=</operator> <call pos:start="292:14" pos:end="292:52"><name pos:start="292:14" pos:end="292:36">est_client_copy_cacerts</name><argument_list pos:start="292:37" pos:end="292:52">(<argument pos:start="292:38" pos:end="292:41"><expr pos:start="292:38" pos:end="292:41"><name pos:start="292:38" pos:end="292:41">ectx</name></expr></argument>, <argument pos:start="292:44" pos:end="292:51"><expr pos:start="292:44" pos:end="292:51"><name pos:start="292:44" pos:end="292:51">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="293:9" pos:end="293:38"><expr pos:start="293:9" pos:end="293:37"><call pos:start="293:9" pos:end="293:37"><name pos:start="293:9" pos:end="293:17">CU_ASSERT</name><argument_list pos:start="293:18" pos:end="293:37">(<argument pos:start="293:19" pos:end="293:36"><expr pos:start="293:19" pos:end="293:36"><name pos:start="293:19" pos:end="293:20">rv</name> <operator pos:start="293:22" pos:end="293:23">==</operator> <name pos:start="293:25" pos:end="293:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="294:9" pos:end="295:27"><if pos:start="294:9" pos:end="295:27">if <condition pos:start="294:12" pos:end="294:21">(<expr pos:start="294:13" pos:end="294:20"><name pos:start="294:13" pos:end="294:20">new_cert</name></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:27"><block_content pos:start="295:13" pos:end="295:27">
            <expr_stmt pos:start="295:13" pos:end="295:27"><expr pos:start="295:13" pos:end="295:26"><call pos:start="295:13" pos:end="295:26"><name pos:start="295:13" pos:end="295:16">free</name><argument_list pos:start="295:17" pos:end="295:26">(<argument pos:start="295:18" pos:end="295:25"><expr pos:start="295:18" pos:end="295:25"><name pos:start="295:18" pos:end="295:25">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="296:7" pos:end="299:5">else <block pos:start="296:12" pos:end="299:5">{<block_content pos:start="297:9" pos:end="298:15">
        <expr_stmt pos:start="297:9" pos:end="297:26"><expr pos:start="297:9" pos:end="297:25"><call pos:start="297:9" pos:end="297:25"><name pos:start="297:9" pos:end="297:19">est_destroy</name><argument_list pos:start="297:20" pos:end="297:25">(<argument pos:start="297:21" pos:end="297:24"><expr pos:start="297:21" pos:end="297:24"><name pos:start="297:21" pos:end="297:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="298:9" pos:end="298:15">return;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:23"><expr pos:start="301:5" pos:end="301:22"><call pos:start="301:5" pos:end="301:22"><name pos:start="301:5" pos:end="301:17">EVP_PKEY_free</name><argument_list pos:start="301:18" pos:end="301:22">(<argument pos:start="301:19" pos:end="301:21"><expr pos:start="301:19" pos:end="301:21"><name pos:start="301:19" pos:end="301:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="302:5" pos:end="302:20"><expr pos:start="302:5" pos:end="302:19"><call pos:start="302:5" pos:end="302:19"><name pos:start="302:5" pos:end="302:13">X509_free</name><argument_list pos:start="302:14" pos:end="302:19">(<argument pos:start="302:15" pos:end="302:18"><expr pos:start="302:15" pos:end="302:18"><name pos:start="302:15" pos:end="302:18">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="304:5" pos:end="306:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="307:5" pos:end="307:22"><expr pos:start="307:5" pos:end="307:21"><call pos:start="307:5" pos:end="307:21"><name pos:start="307:5" pos:end="307:15">est_destroy</name><argument_list pos:start="307:16" pos:end="307:21">(<argument pos:start="307:17" pos:end="307:20"><expr pos:start="307:17" pos:end="307:20"><name pos:start="307:17" pos:end="307:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="310:1" pos:end="317:3">/*
 * Easy provision - HTTP basic auth, no client cert
 *
 * This is a basic test to perform a a full trusted enroll
 * sequence of /cacerts, /csrattrs, and /simpleenroll using a
 * user ID and password to identify the client to the server.
 * No identity certificate is used by the client.
 */</comment>
<function pos:start="318:1" pos:end="324:1"><type pos:start="318:1" pos:end="318:11"><specifier pos:start="318:1" pos:end="318:6">static</specifier> <name pos:start="318:8" pos:end="318:11">void</name></type> <name pos:start="318:13" pos:end="318:24">us1005_test1</name> <parameter_list pos:start="318:26" pos:end="318:31">(<parameter pos:start="318:27" pos:end="318:30"><decl pos:start="318:27" pos:end="318:30"><type pos:start="318:27" pos:end="318:30"><name pos:start="318:27" pos:end="318:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="319:1" pos:end="324:1">{<block_content pos:start="320:5" pos:end="323:62">
    <expr_stmt pos:start="320:5" pos:end="321:5"><expr pos:start="320:5" pos:end="320:15"><name pos:start="320:5" pos:end="320:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:62"><expr pos:start="323:5" pos:end="323:61"><call pos:start="323:5" pos:end="323:61"><name pos:start="323:5" pos:end="323:25">us1005_easy_provision</name><argument_list pos:start="323:26" pos:end="323:61">(<argument pos:start="323:27" pos:end="323:36"><expr pos:start="323:27" pos:end="323:36"><literal type="string" pos:start="323:27" pos:end="323:36">"TC1005-1"</literal></expr></argument>, <argument pos:start="323:39" pos:end="323:54"><expr pos:start="323:39" pos:end="323:54"><name pos:start="323:39" pos:end="323:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="323:57" pos:end="323:57"><expr pos:start="323:57" pos:end="323:57"><literal type="number" pos:start="323:57" pos:end="323:57">0</literal></expr></argument>, <argument pos:start="323:60" pos:end="323:60"><expr pos:start="323:60" pos:end="323:60"><literal type="number" pos:start="323:60" pos:end="323:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="326:1" pos:end="333:3">/*
 * Easy provision - with HTTP basic auth hint enabled, no client cert
 *
 * This is a basic test to perform a a full trusted enroll
 * sequence of /cacerts, /csrattrs, and /simpleenroll using a
 * user ID and password to identify the client to the server.
 * No identity certificate is used by the client.
 */</comment>
<function pos:start="334:1" pos:end="340:1"><type pos:start="334:1" pos:end="334:11"><specifier pos:start="334:1" pos:end="334:6">static</specifier> <name pos:start="334:8" pos:end="334:11">void</name></type> <name pos:start="334:13" pos:end="334:24">us1005_test2</name> <parameter_list pos:start="334:26" pos:end="334:31">(<parameter pos:start="334:27" pos:end="334:30"><decl pos:start="334:27" pos:end="334:30"><type pos:start="334:27" pos:end="334:30"><name pos:start="334:27" pos:end="334:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="335:1" pos:end="340:1">{<block_content pos:start="336:5" pos:end="339:62">
    <expr_stmt pos:start="336:5" pos:end="337:5"><expr pos:start="336:5" pos:end="336:15"><name pos:start="336:5" pos:end="336:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:62"><expr pos:start="339:5" pos:end="339:61"><call pos:start="339:5" pos:end="339:61"><name pos:start="339:5" pos:end="339:25">us1005_easy_provision</name><argument_list pos:start="339:26" pos:end="339:61">(<argument pos:start="339:27" pos:end="339:36"><expr pos:start="339:27" pos:end="339:36"><literal type="string" pos:start="339:27" pos:end="339:36">"TC1005-2"</literal></expr></argument>, <argument pos:start="339:39" pos:end="339:54"><expr pos:start="339:39" pos:end="339:54"><name pos:start="339:39" pos:end="339:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="339:57" pos:end="339:57"><expr pos:start="339:57" pos:end="339:57"><literal type="number" pos:start="339:57" pos:end="339:57">1</literal></expr></argument>, <argument pos:start="339:60" pos:end="339:60"><expr pos:start="339:60" pos:end="339:60"><literal type="number" pos:start="339:60" pos:end="339:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="342:1" pos:end="349:3">/*
 * Easy provision - client cert with HTTP basic auth enabled
 *
 * This is a basic test to perform a a full trusted enroll
 * sequence of /cacerts, /csrattrs, and /simpleenroll using a
 * user ID and password to identify the client to the server.
 * No identity certificate is used by the client.
 */</comment>
<function pos:start="350:1" pos:end="356:1"><type pos:start="350:1" pos:end="350:11"><specifier pos:start="350:1" pos:end="350:6">static</specifier> <name pos:start="350:8" pos:end="350:11">void</name></type> <name pos:start="350:13" pos:end="350:24">us1005_test3</name> <parameter_list pos:start="350:26" pos:end="350:31">(<parameter pos:start="350:27" pos:end="350:30"><decl pos:start="350:27" pos:end="350:30"><type pos:start="350:27" pos:end="350:30"><name pos:start="350:27" pos:end="350:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="351:1" pos:end="356:1">{<block_content pos:start="352:5" pos:end="355:62">
    <expr_stmt pos:start="352:5" pos:end="353:5"><expr pos:start="352:5" pos:end="352:15"><name pos:start="352:5" pos:end="352:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:62"><expr pos:start="355:5" pos:end="355:61"><call pos:start="355:5" pos:end="355:61"><name pos:start="355:5" pos:end="355:25">us1005_easy_provision</name><argument_list pos:start="355:26" pos:end="355:61">(<argument pos:start="355:27" pos:end="355:36"><expr pos:start="355:27" pos:end="355:36"><literal type="string" pos:start="355:27" pos:end="355:36">"TC1005-3"</literal></expr></argument>, <argument pos:start="355:39" pos:end="355:54"><expr pos:start="355:39" pos:end="355:54"><name pos:start="355:39" pos:end="355:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="355:57" pos:end="355:57"><expr pos:start="355:57" pos:end="355:57"><literal type="number" pos:start="355:57" pos:end="355:57">0</literal></expr></argument>, <argument pos:start="355:60" pos:end="355:60"><expr pos:start="355:60" pos:end="355:60"><literal type="number" pos:start="355:60" pos:end="355:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="358:1" pos:end="365:3">/*
 * Easy provision - client cert with HTTP basic auth hint enabled
 *
 * This is a basic test to perform a a full trusted enroll
 * sequence of /cacerts, /csrattrs, and /simpleenroll using a
 * user ID and password to identify the client to the server.
 * No identity certificate is used by the client.
 */</comment>
<function pos:start="366:1" pos:end="372:1"><type pos:start="366:1" pos:end="366:11"><specifier pos:start="366:1" pos:end="366:6">static</specifier> <name pos:start="366:8" pos:end="366:11">void</name></type> <name pos:start="366:13" pos:end="366:24">us1005_test4</name> <parameter_list pos:start="366:26" pos:end="366:31">(<parameter pos:start="366:27" pos:end="366:30"><decl pos:start="366:27" pos:end="366:30"><type pos:start="366:27" pos:end="366:30"><name pos:start="366:27" pos:end="366:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="367:1" pos:end="372:1">{<block_content pos:start="368:5" pos:end="371:62">
    <expr_stmt pos:start="368:5" pos:end="369:5"><expr pos:start="368:5" pos:end="368:15"><name pos:start="368:5" pos:end="368:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:62"><expr pos:start="371:5" pos:end="371:61"><call pos:start="371:5" pos:end="371:61"><name pos:start="371:5" pos:end="371:25">us1005_easy_provision</name><argument_list pos:start="371:26" pos:end="371:61">(<argument pos:start="371:27" pos:end="371:36"><expr pos:start="371:27" pos:end="371:36"><literal type="string" pos:start="371:27" pos:end="371:36">"TC1005-4"</literal></expr></argument>, <argument pos:start="371:39" pos:end="371:54"><expr pos:start="371:39" pos:end="371:54"><name pos:start="371:39" pos:end="371:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="371:57" pos:end="371:57"><expr pos:start="371:57" pos:end="371:57"><literal type="number" pos:start="371:57" pos:end="371:57">1</literal></expr></argument>, <argument pos:start="371:60" pos:end="371:60"><expr pos:start="371:60" pos:end="371:60"><literal type="number" pos:start="371:60" pos:end="371:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="374:1" pos:end="376:3">/*
 * Null pointers test
 */</comment>
<function pos:start="377:1" pos:end="437:1"><type pos:start="377:1" pos:end="377:11"><specifier pos:start="377:1" pos:end="377:6">static</specifier> <name pos:start="377:8" pos:end="377:11">void</name></type> <name pos:start="377:13" pos:end="377:24">us1005_test5</name> <parameter_list pos:start="377:26" pos:end="377:31">(<parameter pos:start="377:27" pos:end="377:30"><decl pos:start="377:27" pos:end="377:30"><type pos:start="377:27" pos:end="377:30"><name pos:start="377:27" pos:end="377:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="378:1" pos:end="437:1">{<block_content pos:start="379:5" pos:end="436:22">
    <decl_stmt pos:start="379:5" pos:end="379:18"><decl pos:start="379:5" pos:end="379:17"><type pos:start="379:5" pos:end="379:7"><name pos:start="379:5" pos:end="379:7">int</name></type> <name pos:start="379:9" pos:end="379:13">p7len</name> <init pos:start="379:15" pos:end="379:17">= <expr pos:start="379:17" pos:end="379:17"><literal type="number" pos:start="379:17" pos:end="379:17">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="380:5" pos:end="380:18"><decl pos:start="380:5" pos:end="380:17"><type pos:start="380:5" pos:end="380:7"><name pos:start="380:5" pos:end="380:7">int</name></type> <name pos:start="380:9" pos:end="380:13">calen</name> <init pos:start="380:15" pos:end="380:17">= <expr pos:start="380:17" pos:end="380:17"><literal type="number" pos:start="380:17" pos:end="380:17">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="381:5" pos:end="381:18"><decl pos:start="381:5" pos:end="381:17"><type pos:start="381:5" pos:end="381:14"><name pos:start="381:5" pos:end="381:12">EVP_PKEY</name> <modifier pos:start="381:14" pos:end="381:14">*</modifier></type><name pos:start="381:15" pos:end="381:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="382:5" pos:end="382:11"><decl pos:start="382:5" pos:end="382:10"><type pos:start="382:5" pos:end="382:7"><name pos:start="382:5" pos:end="382:7">int</name></type> <name pos:start="382:9" pos:end="382:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="383:5" pos:end="383:18"><decl pos:start="383:5" pos:end="383:17"><type pos:start="383:5" pos:end="383:13"><name pos:start="383:5" pos:end="383:11">EST_CTX</name> <modifier pos:start="383:13" pos:end="383:13">*</modifier></type><name pos:start="383:14" pos:end="383:17">ectx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="385:5" pos:end="386:5"><expr pos:start="385:5" pos:end="385:15"><name pos:start="385:5" pos:end="385:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="388:5" pos:end="390:7">/*
     * Create a valid context
     */</comment>
    <expr_stmt pos:start="391:5" pos:end="391:76"><expr pos:start="391:5" pos:end="391:75"><name pos:start="391:5" pos:end="391:8">ectx</name> <operator pos:start="391:10" pos:end="391:10">=</operator> <call pos:start="391:12" pos:end="391:75"><name pos:start="391:12" pos:end="391:26">est_client_init</name><argument_list pos:start="391:27" pos:end="391:75">(<argument pos:start="391:28" pos:end="391:34"><expr pos:start="391:28" pos:end="391:34"><name pos:start="391:28" pos:end="391:34">cacerts</name></expr></argument>, <argument pos:start="391:37" pos:end="391:47"><expr pos:start="391:37" pos:end="391:47"><name pos:start="391:37" pos:end="391:47">cacerts_len</name></expr></argument>, <argument pos:start="391:50" pos:end="391:68"><expr pos:start="391:50" pos:end="391:68"><name pos:start="391:50" pos:end="391:68">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="391:71" pos:end="391:74"><expr pos:start="391:71" pos:end="391:74"><name pos:start="391:71" pos:end="391:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="392:5" pos:end="392:28"><expr pos:start="392:5" pos:end="392:27"><call pos:start="392:5" pos:end="392:27"><name pos:start="392:5" pos:end="392:13">CU_ASSERT</name><argument_list pos:start="392:14" pos:end="392:27">(<argument pos:start="392:15" pos:end="392:26"><expr pos:start="392:15" pos:end="392:26"><name pos:start="392:15" pos:end="392:18">ectx</name> <operator pos:start="392:20" pos:end="392:21">!=</operator> <name pos:start="392:23" pos:end="392:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="394:5" pos:end="396:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="397:5" pos:end="397:71"><expr pos:start="397:5" pos:end="397:70"><name pos:start="397:5" pos:end="397:6">rv</name> <operator pos:start="397:8" pos:end="397:8">=</operator> <call pos:start="397:10" pos:end="397:70"><name pos:start="397:10" pos:end="397:28">est_client_set_auth</name><argument_list pos:start="397:29" pos:end="397:70">(<argument pos:start="397:30" pos:end="397:33"><expr pos:start="397:30" pos:end="397:33"><name pos:start="397:30" pos:end="397:33">ectx</name></expr></argument>, <argument pos:start="397:36" pos:end="397:45"><expr pos:start="397:36" pos:end="397:45"><name pos:start="397:36" pos:end="397:45">US1005_UID</name></expr></argument>, <argument pos:start="397:48" pos:end="397:57"><expr pos:start="397:48" pos:end="397:57"><name pos:start="397:48" pos:end="397:57">US1005_PWD</name></expr></argument>, <argument pos:start="397:60" pos:end="397:63"><expr pos:start="397:60" pos:end="397:63"><name pos:start="397:60" pos:end="397:63">NULL</name></expr></argument>, <argument pos:start="397:66" pos:end="397:69"><expr pos:start="397:66" pos:end="397:69"><name pos:start="397:66" pos:end="397:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="398:5" pos:end="398:34"><expr pos:start="398:5" pos:end="398:33"><call pos:start="398:5" pos:end="398:33"><name pos:start="398:5" pos:end="398:13">CU_ASSERT</name><argument_list pos:start="398:14" pos:end="398:33">(<argument pos:start="398:15" pos:end="398:32"><expr pos:start="398:15" pos:end="398:32"><name pos:start="398:15" pos:end="398:16">rv</name> <operator pos:start="398:18" pos:end="398:19">==</operator> <name pos:start="398:21" pos:end="398:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="400:5" pos:end="402:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="403:5" pos:end="403:76"><expr pos:start="403:5" pos:end="403:75"><call pos:start="403:5" pos:end="403:75"><name pos:start="403:5" pos:end="403:25">est_client_set_server</name><argument_list pos:start="403:26" pos:end="403:75">(<argument pos:start="403:27" pos:end="403:30"><expr pos:start="403:27" pos:end="403:30"><name pos:start="403:27" pos:end="403:30">ectx</name></expr></argument>, <argument pos:start="403:33" pos:end="403:48"><expr pos:start="403:33" pos:end="403:48"><name pos:start="403:33" pos:end="403:48">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="403:51" pos:end="403:68"><expr pos:start="403:51" pos:end="403:68"><name pos:start="403:51" pos:end="403:68">US1005_SERVER_PORT</name></expr></argument>, <argument pos:start="403:71" pos:end="403:74"><expr pos:start="403:71" pos:end="403:74"><name pos:start="403:71" pos:end="403:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="405:5" pos:end="407:7">/*
     * Create a valid key pair
     */</comment>
    <expr_stmt pos:start="408:5" pos:end="408:33"><expr pos:start="408:5" pos:end="408:32"><name pos:start="408:5" pos:end="408:7">key</name> <operator pos:start="408:9" pos:end="408:9">=</operator> <call pos:start="408:11" pos:end="408:32"><name pos:start="408:11" pos:end="408:30">generate_private_key</name><argument_list pos:start="408:31" pos:end="408:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="409:5" pos:end="409:27"><expr pos:start="409:5" pos:end="409:26"><call pos:start="409:5" pos:end="409:26"><name pos:start="409:5" pos:end="409:13">CU_ASSERT</name><argument_list pos:start="409:14" pos:end="409:26">(<argument pos:start="409:15" pos:end="409:25"><expr pos:start="409:15" pos:end="409:25"><name pos:start="409:15" pos:end="409:17">key</name> <operator pos:start="409:19" pos:end="409:20">!=</operator> <name pos:start="409:22" pos:end="409:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="411:5" pos:end="413:7">/*
     * Try with a NULL context
     */</comment>
    <expr_stmt pos:start="414:5" pos:end="414:71"><expr pos:start="414:5" pos:end="414:70"><name pos:start="414:5" pos:end="414:6">rv</name> <operator pos:start="414:8" pos:end="414:8">=</operator> <call pos:start="414:10" pos:end="414:70"><name pos:start="414:10" pos:end="414:34">est_client_provision_cert</name><argument_list pos:start="414:35" pos:end="414:70">(<argument pos:start="414:36" pos:end="414:39"><expr pos:start="414:36" pos:end="414:39"><name pos:start="414:36" pos:end="414:39">NULL</name></expr></argument>, <argument pos:start="414:42" pos:end="414:48"><expr pos:start="414:42" pos:end="414:48"><literal type="string" pos:start="414:42" pos:end="414:48">"TEST2"</literal></expr></argument>, <argument pos:start="414:51" pos:end="414:56"><expr pos:start="414:51" pos:end="414:56"><operator pos:start="414:51" pos:end="414:51">&amp;</operator><name pos:start="414:52" pos:end="414:56">p7len</name></expr></argument>, <argument pos:start="414:59" pos:end="414:64"><expr pos:start="414:59" pos:end="414:64"><operator pos:start="414:59" pos:end="414:59">&amp;</operator><name pos:start="414:60" pos:end="414:64">calen</name></expr></argument>, <argument pos:start="414:67" pos:end="414:69"><expr pos:start="414:67" pos:end="414:69"><name pos:start="414:67" pos:end="414:69">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="415:5" pos:end="415:36"><expr pos:start="415:5" pos:end="415:35"><call pos:start="415:5" pos:end="415:35"><name pos:start="415:5" pos:end="415:13">CU_ASSERT</name><argument_list pos:start="415:14" pos:end="415:35">(<argument pos:start="415:15" pos:end="415:34"><expr pos:start="415:15" pos:end="415:34"><name pos:start="415:15" pos:end="415:16">rv</name> <operator pos:start="415:18" pos:end="415:19">==</operator> <name pos:start="415:21" pos:end="415:34">EST_ERR_NO_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="417:5" pos:end="419:7">/*
     * Try with a NULL p7 length
     */</comment>
    <expr_stmt pos:start="420:5" pos:end="420:69"><expr pos:start="420:5" pos:end="420:68"><name pos:start="420:5" pos:end="420:6">rv</name> <operator pos:start="420:8" pos:end="420:8">=</operator> <call pos:start="420:10" pos:end="420:68"><name pos:start="420:10" pos:end="420:34">est_client_provision_cert</name><argument_list pos:start="420:35" pos:end="420:68">(<argument pos:start="420:36" pos:end="420:39"><expr pos:start="420:36" pos:end="420:39"><name pos:start="420:36" pos:end="420:39">ectx</name></expr></argument>, <argument pos:start="420:42" pos:end="420:48"><expr pos:start="420:42" pos:end="420:48"><literal type="string" pos:start="420:42" pos:end="420:48">"TEST2"</literal></expr></argument>, <argument pos:start="420:51" pos:end="420:54"><expr pos:start="420:51" pos:end="420:54"><name pos:start="420:51" pos:end="420:54">NULL</name></expr></argument>, <argument pos:start="420:57" pos:end="420:62"><expr pos:start="420:57" pos:end="420:62"><operator pos:start="420:57" pos:end="420:57">&amp;</operator><name pos:start="420:58" pos:end="420:62">calen</name></expr></argument>, <argument pos:start="420:65" pos:end="420:67"><expr pos:start="420:65" pos:end="420:67"><name pos:start="420:65" pos:end="420:67">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="421:5" pos:end="421:48"><expr pos:start="421:5" pos:end="421:47"><call pos:start="421:5" pos:end="421:47"><name pos:start="421:5" pos:end="421:13">CU_ASSERT</name><argument_list pos:start="421:14" pos:end="421:47">(<argument pos:start="421:15" pos:end="421:46"><expr pos:start="421:15" pos:end="421:46"><name pos:start="421:15" pos:end="421:16">rv</name> <operator pos:start="421:18" pos:end="421:19">==</operator> <name pos:start="421:21" pos:end="421:46">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="423:5" pos:end="425:7">/*
     * Try with a NULL cacerts length
     */</comment>
    <expr_stmt pos:start="426:5" pos:end="426:69"><expr pos:start="426:5" pos:end="426:68"><name pos:start="426:5" pos:end="426:6">rv</name> <operator pos:start="426:8" pos:end="426:8">=</operator> <call pos:start="426:10" pos:end="426:68"><name pos:start="426:10" pos:end="426:34">est_client_provision_cert</name><argument_list pos:start="426:35" pos:end="426:68">(<argument pos:start="426:36" pos:end="426:39"><expr pos:start="426:36" pos:end="426:39"><name pos:start="426:36" pos:end="426:39">ectx</name></expr></argument>, <argument pos:start="426:42" pos:end="426:48"><expr pos:start="426:42" pos:end="426:48"><literal type="string" pos:start="426:42" pos:end="426:48">"TEST2"</literal></expr></argument>, <argument pos:start="426:51" pos:end="426:56"><expr pos:start="426:51" pos:end="426:56"><operator pos:start="426:51" pos:end="426:51">&amp;</operator><name pos:start="426:52" pos:end="426:56">p7len</name></expr></argument>, <argument pos:start="426:59" pos:end="426:62"><expr pos:start="426:59" pos:end="426:62"><name pos:start="426:59" pos:end="426:62">NULL</name></expr></argument>, <argument pos:start="426:65" pos:end="426:67"><expr pos:start="426:65" pos:end="426:67"><name pos:start="426:65" pos:end="426:67">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="427:5" pos:end="427:48"><expr pos:start="427:5" pos:end="427:47"><call pos:start="427:5" pos:end="427:47"><name pos:start="427:5" pos:end="427:13">CU_ASSERT</name><argument_list pos:start="427:14" pos:end="427:47">(<argument pos:start="427:15" pos:end="427:46"><expr pos:start="427:15" pos:end="427:46"><name pos:start="427:15" pos:end="427:16">rv</name> <operator pos:start="427:18" pos:end="427:19">==</operator> <name pos:start="427:21" pos:end="427:46">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="429:5" pos:end="431:7">/*
     * Try with a NULL key
     */</comment>
    <expr_stmt pos:start="432:5" pos:end="432:72"><expr pos:start="432:5" pos:end="432:71"><name pos:start="432:5" pos:end="432:6">rv</name> <operator pos:start="432:8" pos:end="432:8">=</operator> <call pos:start="432:10" pos:end="432:71"><name pos:start="432:10" pos:end="432:34">est_client_provision_cert</name><argument_list pos:start="432:35" pos:end="432:71">(<argument pos:start="432:36" pos:end="432:39"><expr pos:start="432:36" pos:end="432:39"><name pos:start="432:36" pos:end="432:39">ectx</name></expr></argument>, <argument pos:start="432:42" pos:end="432:48"><expr pos:start="432:42" pos:end="432:48"><literal type="string" pos:start="432:42" pos:end="432:48">"TEST2"</literal></expr></argument>, <argument pos:start="432:51" pos:end="432:56"><expr pos:start="432:51" pos:end="432:56"><operator pos:start="432:51" pos:end="432:51">&amp;</operator><name pos:start="432:52" pos:end="432:56">p7len</name></expr></argument>, <argument pos:start="432:59" pos:end="432:64"><expr pos:start="432:59" pos:end="432:64"><operator pos:start="432:59" pos:end="432:59">&amp;</operator><name pos:start="432:60" pos:end="432:64">calen</name></expr></argument>, <argument pos:start="432:67" pos:end="432:70"><expr pos:start="432:67" pos:end="432:70"><name pos:start="432:67" pos:end="432:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="433:5" pos:end="433:36"><expr pos:start="433:5" pos:end="433:35"><call pos:start="433:5" pos:end="433:35"><name pos:start="433:5" pos:end="433:13">CU_ASSERT</name><argument_list pos:start="433:14" pos:end="433:35">(<argument pos:start="433:15" pos:end="433:34"><expr pos:start="433:15" pos:end="433:34"><name pos:start="433:15" pos:end="433:16">rv</name> <operator pos:start="433:18" pos:end="433:19">==</operator> <name pos:start="433:21" pos:end="433:34">EST_ERR_NO_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:23"><expr pos:start="435:5" pos:end="435:22"><call pos:start="435:5" pos:end="435:22"><name pos:start="435:5" pos:end="435:17">EVP_PKEY_free</name><argument_list pos:start="435:18" pos:end="435:22">(<argument pos:start="435:19" pos:end="435:21"><expr pos:start="435:19" pos:end="435:21"><name pos:start="435:19" pos:end="435:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="436:5" pos:end="436:22"><expr pos:start="436:5" pos:end="436:21"><call pos:start="436:5" pos:end="436:21"><name pos:start="436:5" pos:end="436:15">est_destroy</name><argument_list pos:start="436:16" pos:end="436:21">(<argument pos:start="436:17" pos:end="436:20"><expr pos:start="436:17" pos:end="436:20"><name pos:start="436:17" pos:end="436:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="439:1" pos:end="441:3">/*
 *  Enable pop on server, enable CSR attributes on server w/o challengePassword OID
 */</comment>
<function pos:start="442:1" pos:end="476:1"><type pos:start="442:1" pos:end="442:11"><specifier pos:start="442:1" pos:end="442:6">static</specifier> <name pos:start="442:8" pos:end="442:11">void</name></type> <name pos:start="442:13" pos:end="442:24">us1005_test6</name> <parameter_list pos:start="442:26" pos:end="442:31">(<parameter pos:start="442:27" pos:end="442:30"><decl pos:start="442:27" pos:end="442:30"><type pos:start="442:27" pos:end="442:30"><name pos:start="442:27" pos:end="442:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="443:1" pos:end="476:1">{<block_content pos:start="444:5" pos:end="475:26">
    <expr_stmt pos:start="444:5" pos:end="445:5"><expr pos:start="444:5" pos:end="444:15"><name pos:start="444:5" pos:end="444:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="447:5" pos:end="449:7">/*
     * Restart the server with PoP enabled
     */</comment>
    <expr_stmt pos:start="450:5" pos:end="450:14"><expr pos:start="450:5" pos:end="450:13"><call pos:start="450:5" pos:end="450:13"><name pos:start="450:5" pos:end="450:11">st_stop</name><argument_list pos:start="450:12" pos:end="450:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="451:5" pos:end="451:36"><expr pos:start="451:5" pos:end="451:35"><call pos:start="451:5" pos:end="451:35"><name pos:start="451:5" pos:end="451:23">us1005_start_server</name><argument_list pos:start="451:24" pos:end="451:35">(<argument pos:start="451:25" pos:end="451:25"><expr pos:start="451:25" pos:end="451:25"><literal type="number" pos:start="451:25" pos:end="451:25">0</literal></expr></argument>, <argument pos:start="451:28" pos:end="451:28"><expr pos:start="451:28" pos:end="451:28"><literal type="number" pos:start="451:28" pos:end="451:28">0</literal></expr></argument>, <argument pos:start="451:31" pos:end="451:31"><expr pos:start="451:31" pos:end="451:31"><literal type="number" pos:start="451:31" pos:end="451:31">0</literal></expr></argument>, <argument pos:start="451:34" pos:end="451:34"><expr pos:start="451:34" pos:end="451:34"><literal type="number" pos:start="451:34" pos:end="451:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="453:5" pos:end="455:7">/*
     * Set the CSR attributes to a value that doesn't include challengePassword OID
     */</comment>
    <expr_stmt pos:start="456:5" pos:end="456:38"><expr pos:start="456:5" pos:end="456:37"><call pos:start="456:5" pos:end="456:37"><name pos:start="456:5" pos:end="456:19">st_set_csrattrs</name><argument_list pos:start="456:20" pos:end="456:37">(<argument pos:start="456:21" pos:end="456:36"><expr pos:start="456:21" pos:end="456:36"><name pos:start="456:21" pos:end="456:36">US1005_CSR_NOPOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="458:5" pos:end="461:7">/*
     * We will search the debugs for the appropriate output
     * to confirm the PoP behavior is working as desired.
     */</comment>
    <expr_stmt pos:start="462:5" pos:end="462:73"><expr pos:start="462:5" pos:end="462:72"><name pos:start="462:5" pos:end="462:21">log_search_target</name> <operator pos:start="462:23" pos:end="462:23">=</operator> <literal type="string" pos:start="462:25" pos:end="462:72">"Client will include challengePassword in CSR\0"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="463:5" pos:end="463:28"><expr pos:start="463:5" pos:end="463:27"><name pos:start="463:5" pos:end="463:23">search_target_found</name> <operator pos:start="463:25" pos:end="463:25">=</operator> <literal type="number" pos:start="463:27" pos:end="463:27">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="465:5" pos:end="467:7">/*
     * Provision a new cert
     */</comment>
    <expr_stmt pos:start="468:5" pos:end="468:62"><expr pos:start="468:5" pos:end="468:61"><call pos:start="468:5" pos:end="468:61"><name pos:start="468:5" pos:end="468:25">us1005_easy_provision</name><argument_list pos:start="468:26" pos:end="468:61">(<argument pos:start="468:27" pos:end="468:36"><expr pos:start="468:27" pos:end="468:36"><literal type="string" pos:start="468:27" pos:end="468:36">"TC1005-6"</literal></expr></argument>, <argument pos:start="468:39" pos:end="468:54"><expr pos:start="468:39" pos:end="468:54"><name pos:start="468:39" pos:end="468:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="468:57" pos:end="468:57"><expr pos:start="468:57" pos:end="468:57"><literal type="number" pos:start="468:57" pos:end="468:57">0</literal></expr></argument>, <argument pos:start="468:60" pos:end="468:60"><expr pos:start="468:60" pos:end="468:60"><literal type="number" pos:start="468:60" pos:end="468:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="470:5" pos:end="470:40"><expr pos:start="470:5" pos:end="470:39"><call pos:start="470:5" pos:end="470:39"><name pos:start="470:5" pos:end="470:13">CU_ASSERT</name><argument_list pos:start="470:14" pos:end="470:39">(<argument pos:start="470:15" pos:end="470:38"><expr pos:start="470:15" pos:end="470:38"><name pos:start="470:15" pos:end="470:33">search_target_found</name> <operator pos:start="470:35" pos:end="470:36">==</operator> <literal type="number" pos:start="470:38" pos:end="470:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="472:5" pos:end="474:7">/*
     * Set the CSR attributes back to default value
     */</comment>
    <expr_stmt pos:start="475:5" pos:end="475:26"><expr pos:start="475:5" pos:end="475:25"><call pos:start="475:5" pos:end="475:25"><name pos:start="475:5" pos:end="475:19">st_set_csrattrs</name><argument_list pos:start="475:20" pos:end="475:25">(<argument pos:start="475:21" pos:end="475:24"><expr pos:start="475:21" pos:end="475:24"><name pos:start="475:21" pos:end="475:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="478:1" pos:end="480:3">/*
 *  Disable pop on server, enable CSR attributes on server w/o challengePassword OID
 */</comment>
<function pos:start="481:1" pos:end="515:1"><type pos:start="481:1" pos:end="481:11"><specifier pos:start="481:1" pos:end="481:6">static</specifier> <name pos:start="481:8" pos:end="481:11">void</name></type> <name pos:start="481:13" pos:end="481:24">us1005_test7</name> <parameter_list pos:start="481:26" pos:end="481:31">(<parameter pos:start="481:27" pos:end="481:30"><decl pos:start="481:27" pos:end="481:30"><type pos:start="481:27" pos:end="481:30"><name pos:start="481:27" pos:end="481:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="482:1" pos:end="515:1">{<block_content pos:start="483:5" pos:end="514:26">
    <expr_stmt pos:start="483:5" pos:end="484:5"><expr pos:start="483:5" pos:end="483:15"><name pos:start="483:5" pos:end="483:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="486:5" pos:end="488:7">/*
     * Restart the server with PoP disabled
     */</comment>
    <expr_stmt pos:start="489:5" pos:end="489:14"><expr pos:start="489:5" pos:end="489:13"><call pos:start="489:5" pos:end="489:13"><name pos:start="489:5" pos:end="489:11">st_stop</name><argument_list pos:start="489:12" pos:end="489:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="490:5" pos:end="490:36"><expr pos:start="490:5" pos:end="490:35"><call pos:start="490:5" pos:end="490:35"><name pos:start="490:5" pos:end="490:23">us1005_start_server</name><argument_list pos:start="490:24" pos:end="490:35">(<argument pos:start="490:25" pos:end="490:25"><expr pos:start="490:25" pos:end="490:25"><literal type="number" pos:start="490:25" pos:end="490:25">0</literal></expr></argument>, <argument pos:start="490:28" pos:end="490:28"><expr pos:start="490:28" pos:end="490:28"><literal type="number" pos:start="490:28" pos:end="490:28">0</literal></expr></argument>, <argument pos:start="490:31" pos:end="490:31"><expr pos:start="490:31" pos:end="490:31"><literal type="number" pos:start="490:31" pos:end="490:31">0</literal></expr></argument>, <argument pos:start="490:34" pos:end="490:34"><expr pos:start="490:34" pos:end="490:34"><literal type="number" pos:start="490:34" pos:end="490:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="492:5" pos:end="494:7">/*
     * Set the CSR attributes to a value that doesn't include challengePassword OID
     */</comment>
    <expr_stmt pos:start="495:5" pos:end="495:38"><expr pos:start="495:5" pos:end="495:37"><call pos:start="495:5" pos:end="495:37"><name pos:start="495:5" pos:end="495:19">st_set_csrattrs</name><argument_list pos:start="495:20" pos:end="495:37">(<argument pos:start="495:21" pos:end="495:36"><expr pos:start="495:21" pos:end="495:36"><name pos:start="495:21" pos:end="495:36">US1005_CSR_NOPOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="497:5" pos:end="500:7">/*
     * We will search the debugs for the appropriate output
     * to confirm the PoP behavior is working as desired.
     */</comment>
    <expr_stmt pos:start="501:5" pos:end="501:62"><expr pos:start="501:5" pos:end="501:61"><name pos:start="501:5" pos:end="501:21">log_search_target</name> <operator pos:start="501:23" pos:end="501:23">=</operator> <literal type="string" pos:start="501:25" pos:end="501:61">"Cert request does not contain PoP\0"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="502:5" pos:end="502:28"><expr pos:start="502:5" pos:end="502:27"><name pos:start="502:5" pos:end="502:23">search_target_found</name> <operator pos:start="502:25" pos:end="502:25">=</operator> <literal type="number" pos:start="502:27" pos:end="502:27">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="504:5" pos:end="506:7">/*
     * Provision a new cert
     */</comment>
    <expr_stmt pos:start="507:5" pos:end="507:62"><expr pos:start="507:5" pos:end="507:61"><call pos:start="507:5" pos:end="507:61"><name pos:start="507:5" pos:end="507:25">us1005_easy_provision</name><argument_list pos:start="507:26" pos:end="507:61">(<argument pos:start="507:27" pos:end="507:36"><expr pos:start="507:27" pos:end="507:36"><literal type="string" pos:start="507:27" pos:end="507:36">"TC1005-7"</literal></expr></argument>, <argument pos:start="507:39" pos:end="507:54"><expr pos:start="507:39" pos:end="507:54"><name pos:start="507:39" pos:end="507:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="507:57" pos:end="507:57"><expr pos:start="507:57" pos:end="507:57"><literal type="number" pos:start="507:57" pos:end="507:57">0</literal></expr></argument>, <argument pos:start="507:60" pos:end="507:60"><expr pos:start="507:60" pos:end="507:60"><literal type="number" pos:start="507:60" pos:end="507:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="509:5" pos:end="509:40"><expr pos:start="509:5" pos:end="509:39"><call pos:start="509:5" pos:end="509:39"><name pos:start="509:5" pos:end="509:13">CU_ASSERT</name><argument_list pos:start="509:14" pos:end="509:39">(<argument pos:start="509:15" pos:end="509:38"><expr pos:start="509:15" pos:end="509:38"><name pos:start="509:15" pos:end="509:33">search_target_found</name> <operator pos:start="509:35" pos:end="509:36">==</operator> <literal type="number" pos:start="509:38" pos:end="509:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="511:5" pos:end="513:7">/*
     * Set the CSR attributes back to default value
     */</comment>
    <expr_stmt pos:start="514:5" pos:end="514:26"><expr pos:start="514:5" pos:end="514:25"><call pos:start="514:5" pos:end="514:25"><name pos:start="514:5" pos:end="514:19">st_set_csrattrs</name><argument_list pos:start="514:20" pos:end="514:25">(<argument pos:start="514:21" pos:end="514:24"><expr pos:start="514:21" pos:end="514:24"><name pos:start="514:21" pos:end="514:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="517:1" pos:end="519:3">/*
 *  Enable pop on server, enable CSR attributes on server w/ challengePassword OID
 */</comment>
<function pos:start="520:1" pos:end="554:1"><type pos:start="520:1" pos:end="520:11"><specifier pos:start="520:1" pos:end="520:6">static</specifier> <name pos:start="520:8" pos:end="520:11">void</name></type> <name pos:start="520:13" pos:end="520:24">us1005_test8</name> <parameter_list pos:start="520:26" pos:end="520:31">(<parameter pos:start="520:27" pos:end="520:30"><decl pos:start="520:27" pos:end="520:30"><type pos:start="520:27" pos:end="520:30"><name pos:start="520:27" pos:end="520:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="521:1" pos:end="554:1">{<block_content pos:start="522:5" pos:end="553:26">
    <expr_stmt pos:start="522:5" pos:end="523:5"><expr pos:start="522:5" pos:end="522:15"><name pos:start="522:5" pos:end="522:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="525:5" pos:end="527:7">/*
     * Restart the server with PoP enabled
     */</comment>
    <expr_stmt pos:start="528:5" pos:end="528:14"><expr pos:start="528:5" pos:end="528:13"><call pos:start="528:5" pos:end="528:13"><name pos:start="528:5" pos:end="528:11">st_stop</name><argument_list pos:start="528:12" pos:end="528:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="529:5" pos:end="529:36"><expr pos:start="529:5" pos:end="529:35"><call pos:start="529:5" pos:end="529:35"><name pos:start="529:5" pos:end="529:23">us1005_start_server</name><argument_list pos:start="529:24" pos:end="529:35">(<argument pos:start="529:25" pos:end="529:25"><expr pos:start="529:25" pos:end="529:25"><literal type="number" pos:start="529:25" pos:end="529:25">0</literal></expr></argument>, <argument pos:start="529:28" pos:end="529:28"><expr pos:start="529:28" pos:end="529:28"><literal type="number" pos:start="529:28" pos:end="529:28">0</literal></expr></argument>, <argument pos:start="529:31" pos:end="529:31"><expr pos:start="529:31" pos:end="529:31"><literal type="number" pos:start="529:31" pos:end="529:31">0</literal></expr></argument>, <argument pos:start="529:34" pos:end="529:34"><expr pos:start="529:34" pos:end="529:34"><literal type="number" pos:start="529:34" pos:end="529:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="531:5" pos:end="533:7">/*
     * Set the CSR attributes to the default value, which includes challengePassword OID
     */</comment>
    <expr_stmt pos:start="534:5" pos:end="534:26"><expr pos:start="534:5" pos:end="534:25"><call pos:start="534:5" pos:end="534:25"><name pos:start="534:5" pos:end="534:19">st_set_csrattrs</name><argument_list pos:start="534:20" pos:end="534:25">(<argument pos:start="534:21" pos:end="534:24"><expr pos:start="534:21" pos:end="534:24"><name pos:start="534:21" pos:end="534:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="536:5" pos:end="539:7">/*
     * We will search the debugs for the appropriate output
     * to confirm the PoP behavior is working as desired.
     */</comment>
    <expr_stmt pos:start="540:5" pos:end="540:73"><expr pos:start="540:5" pos:end="540:72"><name pos:start="540:5" pos:end="540:21">log_search_target</name> <operator pos:start="540:23" pos:end="540:23">=</operator> <literal type="string" pos:start="540:25" pos:end="540:72">"Client will include challengePassword in CSR\0"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="541:5" pos:end="541:28"><expr pos:start="541:5" pos:end="541:27"><name pos:start="541:5" pos:end="541:23">search_target_found</name> <operator pos:start="541:25" pos:end="541:25">=</operator> <literal type="number" pos:start="541:27" pos:end="541:27">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="543:5" pos:end="545:7">/*
     * Provision a new cert
     */</comment>
    <expr_stmt pos:start="546:5" pos:end="546:62"><expr pos:start="546:5" pos:end="546:61"><call pos:start="546:5" pos:end="546:61"><name pos:start="546:5" pos:end="546:25">us1005_easy_provision</name><argument_list pos:start="546:26" pos:end="546:61">(<argument pos:start="546:27" pos:end="546:36"><expr pos:start="546:27" pos:end="546:36"><literal type="string" pos:start="546:27" pos:end="546:36">"TC1005-8"</literal></expr></argument>, <argument pos:start="546:39" pos:end="546:54"><expr pos:start="546:39" pos:end="546:54"><name pos:start="546:39" pos:end="546:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="546:57" pos:end="546:57"><expr pos:start="546:57" pos:end="546:57"><literal type="number" pos:start="546:57" pos:end="546:57">0</literal></expr></argument>, <argument pos:start="546:60" pos:end="546:60"><expr pos:start="546:60" pos:end="546:60"><literal type="number" pos:start="546:60" pos:end="546:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="548:5" pos:end="548:40"><expr pos:start="548:5" pos:end="548:39"><call pos:start="548:5" pos:end="548:39"><name pos:start="548:5" pos:end="548:13">CU_ASSERT</name><argument_list pos:start="548:14" pos:end="548:39">(<argument pos:start="548:15" pos:end="548:38"><expr pos:start="548:15" pos:end="548:38"><name pos:start="548:15" pos:end="548:33">search_target_found</name> <operator pos:start="548:35" pos:end="548:36">==</operator> <literal type="number" pos:start="548:38" pos:end="548:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="550:5" pos:end="552:7">/*
     * Set the CSR attributes back to default value
     */</comment>
    <expr_stmt pos:start="553:5" pos:end="553:26"><expr pos:start="553:5" pos:end="553:25"><call pos:start="553:5" pos:end="553:25"><name pos:start="553:5" pos:end="553:19">st_set_csrattrs</name><argument_list pos:start="553:20" pos:end="553:25">(<argument pos:start="553:21" pos:end="553:24"><expr pos:start="553:21" pos:end="553:24"><name pos:start="553:21" pos:end="553:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="556:1" pos:end="558:3">/*
 *  Disable pop on server, enable CSR attributes on server w/challengePassword OID
 */</comment>
<function pos:start="559:1" pos:end="593:1"><type pos:start="559:1" pos:end="559:11"><specifier pos:start="559:1" pos:end="559:6">static</specifier> <name pos:start="559:8" pos:end="559:11">void</name></type> <name pos:start="559:13" pos:end="559:24">us1005_test9</name> <parameter_list pos:start="559:26" pos:end="559:31">(<parameter pos:start="559:27" pos:end="559:30"><decl pos:start="559:27" pos:end="559:30"><type pos:start="559:27" pos:end="559:30"><name pos:start="559:27" pos:end="559:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="560:1" pos:end="593:1">{<block_content pos:start="561:5" pos:end="592:26">
    <expr_stmt pos:start="561:5" pos:end="562:5"><expr pos:start="561:5" pos:end="561:15"><name pos:start="561:5" pos:end="561:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="564:5" pos:end="566:7">/*
     * Restart the server with PoP disabled
     */</comment>
    <expr_stmt pos:start="567:5" pos:end="567:14"><expr pos:start="567:5" pos:end="567:13"><call pos:start="567:5" pos:end="567:13"><name pos:start="567:5" pos:end="567:11">st_stop</name><argument_list pos:start="567:12" pos:end="567:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="568:5" pos:end="568:36"><expr pos:start="568:5" pos:end="568:35"><call pos:start="568:5" pos:end="568:35"><name pos:start="568:5" pos:end="568:23">us1005_start_server</name><argument_list pos:start="568:24" pos:end="568:35">(<argument pos:start="568:25" pos:end="568:25"><expr pos:start="568:25" pos:end="568:25"><literal type="number" pos:start="568:25" pos:end="568:25">0</literal></expr></argument>, <argument pos:start="568:28" pos:end="568:28"><expr pos:start="568:28" pos:end="568:28"><literal type="number" pos:start="568:28" pos:end="568:28">0</literal></expr></argument>, <argument pos:start="568:31" pos:end="568:31"><expr pos:start="568:31" pos:end="568:31"><literal type="number" pos:start="568:31" pos:end="568:31">0</literal></expr></argument>, <argument pos:start="568:34" pos:end="568:34"><expr pos:start="568:34" pos:end="568:34"><literal type="number" pos:start="568:34" pos:end="568:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="570:5" pos:end="572:7">/*
     * Set the CSR attributes to the default value, which includes challengePassword OID
     */</comment>
    <expr_stmt pos:start="573:5" pos:end="573:26"><expr pos:start="573:5" pos:end="573:25"><call pos:start="573:5" pos:end="573:25"><name pos:start="573:5" pos:end="573:19">st_set_csrattrs</name><argument_list pos:start="573:20" pos:end="573:25">(<argument pos:start="573:21" pos:end="573:24"><expr pos:start="573:21" pos:end="573:24"><name pos:start="573:21" pos:end="573:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="575:5" pos:end="578:7">/*
     * We will search the debugs for the appropriate output
     * to confirm the PoP behavior is working as desired.
     */</comment>
    <expr_stmt pos:start="579:5" pos:end="579:73"><expr pos:start="579:5" pos:end="579:72"><name pos:start="579:5" pos:end="579:21">log_search_target</name> <operator pos:start="579:23" pos:end="579:23">=</operator> <literal type="string" pos:start="579:25" pos:end="579:72">"Client will include challengePassword in CSR\0"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="580:5" pos:end="580:28"><expr pos:start="580:5" pos:end="580:27"><name pos:start="580:5" pos:end="580:23">search_target_found</name> <operator pos:start="580:25" pos:end="580:25">=</operator> <literal type="number" pos:start="580:27" pos:end="580:27">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="582:5" pos:end="584:7">/*
     * Provision a new cert
     */</comment>
    <expr_stmt pos:start="585:5" pos:end="585:62"><expr pos:start="585:5" pos:end="585:61"><call pos:start="585:5" pos:end="585:61"><name pos:start="585:5" pos:end="585:25">us1005_easy_provision</name><argument_list pos:start="585:26" pos:end="585:61">(<argument pos:start="585:27" pos:end="585:36"><expr pos:start="585:27" pos:end="585:36"><literal type="string" pos:start="585:27" pos:end="585:36">"TC1005-9"</literal></expr></argument>, <argument pos:start="585:39" pos:end="585:54"><expr pos:start="585:39" pos:end="585:54"><name pos:start="585:39" pos:end="585:54">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="585:57" pos:end="585:57"><expr pos:start="585:57" pos:end="585:57"><literal type="number" pos:start="585:57" pos:end="585:57">0</literal></expr></argument>, <argument pos:start="585:60" pos:end="585:60"><expr pos:start="585:60" pos:end="585:60"><literal type="number" pos:start="585:60" pos:end="585:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="587:5" pos:end="587:40"><expr pos:start="587:5" pos:end="587:39"><call pos:start="587:5" pos:end="587:39"><name pos:start="587:5" pos:end="587:13">CU_ASSERT</name><argument_list pos:start="587:14" pos:end="587:39">(<argument pos:start="587:15" pos:end="587:38"><expr pos:start="587:15" pos:end="587:38"><name pos:start="587:15" pos:end="587:33">search_target_found</name> <operator pos:start="587:35" pos:end="587:36">==</operator> <literal type="number" pos:start="587:38" pos:end="587:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="589:5" pos:end="591:7">/*
     * Set the CSR attributes back to default value
     */</comment>
    <expr_stmt pos:start="592:5" pos:end="592:26"><expr pos:start="592:5" pos:end="592:25"><call pos:start="592:5" pos:end="592:25"><name pos:start="592:5" pos:end="592:19">st_set_csrattrs</name><argument_list pos:start="592:20" pos:end="592:25">(<argument pos:start="592:21" pos:end="592:24"><expr pos:start="592:21" pos:end="592:24"><name pos:start="592:21" pos:end="592:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="595:1" pos:end="597:3">/*
 *  Enable pop on server, disable CSR attributes on server
 */</comment>
<function pos:start="598:1" pos:end="633:1"><type pos:start="598:1" pos:end="598:11"><specifier pos:start="598:1" pos:end="598:6">static</specifier> <name pos:start="598:8" pos:end="598:11">void</name></type> <name pos:start="598:13" pos:end="598:25">us1005_test10</name> <parameter_list pos:start="598:27" pos:end="598:32">(<parameter pos:start="598:28" pos:end="598:31"><decl pos:start="598:28" pos:end="598:31"><type pos:start="598:28" pos:end="598:31"><name pos:start="598:28" pos:end="598:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="599:1" pos:end="633:1">{<block_content pos:start="600:5" pos:end="632:26">
    <expr_stmt pos:start="600:5" pos:end="601:5"><expr pos:start="600:5" pos:end="600:15"><name pos:start="600:5" pos:end="600:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="603:5" pos:end="605:7">/*
     * Restart the server with PoP enabled
     */</comment>
    <expr_stmt pos:start="606:5" pos:end="606:14"><expr pos:start="606:5" pos:end="606:13"><call pos:start="606:5" pos:end="606:13"><name pos:start="606:5" pos:end="606:11">st_stop</name><argument_list pos:start="606:12" pos:end="606:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="607:5" pos:end="607:36"><expr pos:start="607:5" pos:end="607:35"><call pos:start="607:5" pos:end="607:35"><name pos:start="607:5" pos:end="607:23">us1005_start_server</name><argument_list pos:start="607:24" pos:end="607:35">(<argument pos:start="607:25" pos:end="607:25"><expr pos:start="607:25" pos:end="607:25"><literal type="number" pos:start="607:25" pos:end="607:25">0</literal></expr></argument>, <argument pos:start="607:28" pos:end="607:28"><expr pos:start="607:28" pos:end="607:28"><literal type="number" pos:start="607:28" pos:end="607:28">0</literal></expr></argument>, <argument pos:start="607:31" pos:end="607:31"><expr pos:start="607:31" pos:end="607:31"><literal type="number" pos:start="607:31" pos:end="607:31">0</literal></expr></argument>, <argument pos:start="607:34" pos:end="607:34"><expr pos:start="607:34" pos:end="607:34"><literal type="number" pos:start="607:34" pos:end="607:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="609:5" pos:end="611:7">/*
     * Set the CSR attributes to the default value, which includes challengePassword OID
     */</comment>
    <expr_stmt pos:start="612:5" pos:end="612:26"><expr pos:start="612:5" pos:end="612:25"><call pos:start="612:5" pos:end="612:25"><name pos:start="612:5" pos:end="612:19">st_set_csrattrs</name><argument_list pos:start="612:20" pos:end="612:25">(<argument pos:start="612:21" pos:end="612:24"><expr pos:start="612:21" pos:end="612:24"><name pos:start="612:21" pos:end="612:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="613:5" pos:end="613:24"><expr pos:start="613:5" pos:end="613:23"><call pos:start="613:5" pos:end="613:23"><name pos:start="613:5" pos:end="613:21">st_disable_csr_cb</name><argument_list pos:start="613:22" pos:end="613:23">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="615:5" pos:end="618:7">/*
     * We will search the debugs for the appropriate output
     * to confirm the PoP behavior is working as desired.
     */</comment>
    <expr_stmt pos:start="619:5" pos:end="619:73"><expr pos:start="619:5" pos:end="619:72"><name pos:start="619:5" pos:end="619:21">log_search_target</name> <operator pos:start="619:23" pos:end="619:23">=</operator> <literal type="string" pos:start="619:25" pos:end="619:72">"Client will include challengePassword in CSR\0"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="620:5" pos:end="620:28"><expr pos:start="620:5" pos:end="620:27"><name pos:start="620:5" pos:end="620:23">search_target_found</name> <operator pos:start="620:25" pos:end="620:25">=</operator> <literal type="number" pos:start="620:27" pos:end="620:27">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="622:5" pos:end="624:7">/*
     * Provision a new cert
     */</comment>
    <expr_stmt pos:start="625:5" pos:end="625:63"><expr pos:start="625:5" pos:end="625:62"><call pos:start="625:5" pos:end="625:62"><name pos:start="625:5" pos:end="625:25">us1005_easy_provision</name><argument_list pos:start="625:26" pos:end="625:62">(<argument pos:start="625:27" pos:end="625:37"><expr pos:start="625:27" pos:end="625:37"><literal type="string" pos:start="625:27" pos:end="625:37">"TC1005-10"</literal></expr></argument>, <argument pos:start="625:40" pos:end="625:55"><expr pos:start="625:40" pos:end="625:55"><name pos:start="625:40" pos:end="625:55">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="625:58" pos:end="625:58"><expr pos:start="625:58" pos:end="625:58"><literal type="number" pos:start="625:58" pos:end="625:58">0</literal></expr></argument>, <argument pos:start="625:61" pos:end="625:61"><expr pos:start="625:61" pos:end="625:61"><literal type="number" pos:start="625:61" pos:end="625:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="627:5" pos:end="627:40"><expr pos:start="627:5" pos:end="627:39"><call pos:start="627:5" pos:end="627:39"><name pos:start="627:5" pos:end="627:13">CU_ASSERT</name><argument_list pos:start="627:14" pos:end="627:39">(<argument pos:start="627:15" pos:end="627:38"><expr pos:start="627:15" pos:end="627:38"><name pos:start="627:15" pos:end="627:33">search_target_found</name> <operator pos:start="627:35" pos:end="627:36">==</operator> <literal type="number" pos:start="627:38" pos:end="627:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="629:5" pos:end="631:7">/*
     * Set the CSR attributes back to default value
     */</comment>
    <expr_stmt pos:start="632:5" pos:end="632:26"><expr pos:start="632:5" pos:end="632:25"><call pos:start="632:5" pos:end="632:25"><name pos:start="632:5" pos:end="632:19">st_set_csrattrs</name><argument_list pos:start="632:20" pos:end="632:25">(<argument pos:start="632:21" pos:end="632:24"><expr pos:start="632:21" pos:end="632:24"><name pos:start="632:21" pos:end="632:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="635:1" pos:end="637:3">/*
 *  Disable pop on server, disable CSR attributes on server
 */</comment>
<function pos:start="638:1" pos:end="673:1"><type pos:start="638:1" pos:end="638:11"><specifier pos:start="638:1" pos:end="638:6">static</specifier> <name pos:start="638:8" pos:end="638:11">void</name></type> <name pos:start="638:13" pos:end="638:25">us1005_test11</name> <parameter_list pos:start="638:27" pos:end="638:32">(<parameter pos:start="638:28" pos:end="638:31"><decl pos:start="638:28" pos:end="638:31"><type pos:start="638:28" pos:end="638:31"><name pos:start="638:28" pos:end="638:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="639:1" pos:end="673:1">{<block_content pos:start="640:5" pos:end="672:26">
    <expr_stmt pos:start="640:5" pos:end="641:5"><expr pos:start="640:5" pos:end="640:15"><name pos:start="640:5" pos:end="640:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="643:5" pos:end="645:7">/*
     * Restart the server with PoP disabled
     */</comment>
    <expr_stmt pos:start="646:5" pos:end="646:14"><expr pos:start="646:5" pos:end="646:13"><call pos:start="646:5" pos:end="646:13"><name pos:start="646:5" pos:end="646:11">st_stop</name><argument_list pos:start="646:12" pos:end="646:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="647:5" pos:end="647:36"><expr pos:start="647:5" pos:end="647:35"><call pos:start="647:5" pos:end="647:35"><name pos:start="647:5" pos:end="647:23">us1005_start_server</name><argument_list pos:start="647:24" pos:end="647:35">(<argument pos:start="647:25" pos:end="647:25"><expr pos:start="647:25" pos:end="647:25"><literal type="number" pos:start="647:25" pos:end="647:25">0</literal></expr></argument>, <argument pos:start="647:28" pos:end="647:28"><expr pos:start="647:28" pos:end="647:28"><literal type="number" pos:start="647:28" pos:end="647:28">0</literal></expr></argument>, <argument pos:start="647:31" pos:end="647:31"><expr pos:start="647:31" pos:end="647:31"><literal type="number" pos:start="647:31" pos:end="647:31">0</literal></expr></argument>, <argument pos:start="647:34" pos:end="647:34"><expr pos:start="647:34" pos:end="647:34"><literal type="number" pos:start="647:34" pos:end="647:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="649:5" pos:end="651:7">/*
     * Set the CSR attributes to the default value, which includes challengePassword OID
     */</comment>
    <expr_stmt pos:start="652:5" pos:end="652:26"><expr pos:start="652:5" pos:end="652:25"><call pos:start="652:5" pos:end="652:25"><name pos:start="652:5" pos:end="652:19">st_set_csrattrs</name><argument_list pos:start="652:20" pos:end="652:25">(<argument pos:start="652:21" pos:end="652:24"><expr pos:start="652:21" pos:end="652:24"><name pos:start="652:21" pos:end="652:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="653:5" pos:end="653:24"><expr pos:start="653:5" pos:end="653:23"><call pos:start="653:5" pos:end="653:23"><name pos:start="653:5" pos:end="653:21">st_disable_csr_cb</name><argument_list pos:start="653:22" pos:end="653:23">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="655:5" pos:end="658:7">/*
     * We will search the debugs for the appropriate output
     * to confirm the PoP behavior is working as desired.
     */</comment>
    <expr_stmt pos:start="659:5" pos:end="659:62"><expr pos:start="659:5" pos:end="659:61"><name pos:start="659:5" pos:end="659:21">log_search_target</name> <operator pos:start="659:23" pos:end="659:23">=</operator> <literal type="string" pos:start="659:25" pos:end="659:61">"Cert request does not contain PoP\0"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="660:5" pos:end="660:28"><expr pos:start="660:5" pos:end="660:27"><name pos:start="660:5" pos:end="660:23">search_target_found</name> <operator pos:start="660:25" pos:end="660:25">=</operator> <literal type="number" pos:start="660:27" pos:end="660:27">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="662:5" pos:end="664:7">/*
     * Provision a new cert
     */</comment>
    <expr_stmt pos:start="665:5" pos:end="665:63"><expr pos:start="665:5" pos:end="665:62"><call pos:start="665:5" pos:end="665:62"><name pos:start="665:5" pos:end="665:25">us1005_easy_provision</name><argument_list pos:start="665:26" pos:end="665:62">(<argument pos:start="665:27" pos:end="665:37"><expr pos:start="665:27" pos:end="665:37"><literal type="string" pos:start="665:27" pos:end="665:37">"TC1005-11"</literal></expr></argument>, <argument pos:start="665:40" pos:end="665:55"><expr pos:start="665:40" pos:end="665:55"><name pos:start="665:40" pos:end="665:55">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="665:58" pos:end="665:58"><expr pos:start="665:58" pos:end="665:58"><literal type="number" pos:start="665:58" pos:end="665:58">0</literal></expr></argument>, <argument pos:start="665:61" pos:end="665:61"><expr pos:start="665:61" pos:end="665:61"><literal type="number" pos:start="665:61" pos:end="665:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="667:5" pos:end="667:40"><expr pos:start="667:5" pos:end="667:39"><call pos:start="667:5" pos:end="667:39"><name pos:start="667:5" pos:end="667:13">CU_ASSERT</name><argument_list pos:start="667:14" pos:end="667:39">(<argument pos:start="667:15" pos:end="667:38"><expr pos:start="667:15" pos:end="667:38"><name pos:start="667:15" pos:end="667:33">search_target_found</name> <operator pos:start="667:35" pos:end="667:36">==</operator> <literal type="number" pos:start="667:38" pos:end="667:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="669:5" pos:end="671:7">/*
     * Set the CSR attributes back to default value
     */</comment>
    <expr_stmt pos:start="672:5" pos:end="672:26"><expr pos:start="672:5" pos:end="672:25"><call pos:start="672:5" pos:end="672:25"><name pos:start="672:5" pos:end="672:19">st_set_csrattrs</name><argument_list pos:start="672:20" pos:end="672:25">(<argument pos:start="672:21" pos:end="672:24"><expr pos:start="672:21" pos:end="672:24"><name pos:start="672:21" pos:end="672:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" pos:start="675:1" pos:end="675:2">//</comment>
<comment type="line" pos:start="676:1" pos:end="676:54">// The next two test caes repeate tests 3 &amp; 4 but with</comment>
<comment type="line" pos:start="677:1" pos:end="677:36">// HTTP auth disabled on the server.</comment>
<comment type="line" pos:start="678:1" pos:end="678:2">//</comment>

<comment type="block" pos:start="680:1" pos:end="687:3">/*
 * Easy provision - client cert with HTTP basic auth disabled
 *
 * This is a basic test to perform a a full trusted enroll
 * sequence of /cacerts, /csrattrs, and /simpleenroll using a
 * user ID and password to identify the client to the server.
 * No identity certificate is used by the client.
 */</comment>
<function pos:start="688:1" pos:end="700:1"><type pos:start="688:1" pos:end="688:11"><specifier pos:start="688:1" pos:end="688:6">static</specifier> <name pos:start="688:8" pos:end="688:11">void</name></type> <name pos:start="688:13" pos:end="688:25">us1005_test93</name> <parameter_list pos:start="688:27" pos:end="688:32">(<parameter pos:start="688:28" pos:end="688:31"><decl pos:start="688:28" pos:end="688:31"><type pos:start="688:28" pos:end="688:31"><name pos:start="688:28" pos:end="688:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="689:1" pos:end="700:1">{<block_content pos:start="690:5" pos:end="699:63">
    <expr_stmt pos:start="690:5" pos:end="691:5"><expr pos:start="690:5" pos:end="690:15"><name pos:start="690:5" pos:end="690:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="693:5" pos:end="695:7">/*
     * Restart the server with HTTP auth disabled
     */</comment>
    <expr_stmt pos:start="696:5" pos:end="696:14"><expr pos:start="696:5" pos:end="696:13"><call pos:start="696:5" pos:end="696:13"><name pos:start="696:5" pos:end="696:11">st_stop</name><argument_list pos:start="696:12" pos:end="696:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="697:5" pos:end="697:36"><expr pos:start="697:5" pos:end="697:35"><call pos:start="697:5" pos:end="697:35"><name pos:start="697:5" pos:end="697:23">us1005_start_server</name><argument_list pos:start="697:24" pos:end="697:35">(<argument pos:start="697:25" pos:end="697:25"><expr pos:start="697:25" pos:end="697:25"><literal type="number" pos:start="697:25" pos:end="697:25">0</literal></expr></argument>, <argument pos:start="697:28" pos:end="697:28"><expr pos:start="697:28" pos:end="697:28"><literal type="number" pos:start="697:28" pos:end="697:28">0</literal></expr></argument>, <argument pos:start="697:31" pos:end="697:31"><expr pos:start="697:31" pos:end="697:31"><literal type="number" pos:start="697:31" pos:end="697:31">1</literal></expr></argument>, <argument pos:start="697:34" pos:end="697:34"><expr pos:start="697:34" pos:end="697:34"><literal type="number" pos:start="697:34" pos:end="697:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="699:5" pos:end="699:63"><expr pos:start="699:5" pos:end="699:62"><call pos:start="699:5" pos:end="699:62"><name pos:start="699:5" pos:end="699:25">us1005_easy_provision</name><argument_list pos:start="699:26" pos:end="699:62">(<argument pos:start="699:27" pos:end="699:37"><expr pos:start="699:27" pos:end="699:37"><literal type="string" pos:start="699:27" pos:end="699:37">"TC1005-93"</literal></expr></argument>, <argument pos:start="699:40" pos:end="699:55"><expr pos:start="699:40" pos:end="699:55"><name pos:start="699:40" pos:end="699:55">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="699:58" pos:end="699:58"><expr pos:start="699:58" pos:end="699:58"><literal type="number" pos:start="699:58" pos:end="699:58">0</literal></expr></argument>, <argument pos:start="699:61" pos:end="699:61"><expr pos:start="699:61" pos:end="699:61"><literal type="number" pos:start="699:61" pos:end="699:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="702:1" pos:end="709:3">/*
 * Easy provision - client cert with HTTP basic auth hint enabled
 *
 * This is a basic test to perform a a full trusted enroll
 * sequence of /cacerts, /csrattrs, and /simpleenroll using a
 * user ID and password to identify the client to the server.
 * No identity certificate is used by the client.
 */</comment>
<function pos:start="710:1" pos:end="716:1"><type pos:start="710:1" pos:end="710:11"><specifier pos:start="710:1" pos:end="710:6">static</specifier> <name pos:start="710:8" pos:end="710:11">void</name></type> <name pos:start="710:13" pos:end="710:25">us1005_test94</name> <parameter_list pos:start="710:27" pos:end="710:32">(<parameter pos:start="710:28" pos:end="710:31"><decl pos:start="710:28" pos:end="710:31"><type pos:start="710:28" pos:end="710:31"><name pos:start="710:28" pos:end="710:31">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="711:1" pos:end="716:1">{<block_content pos:start="712:5" pos:end="715:63">
    <expr_stmt pos:start="712:5" pos:end="713:5"><expr pos:start="712:5" pos:end="712:15"><name pos:start="712:5" pos:end="712:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="715:5" pos:end="715:63"><expr pos:start="715:5" pos:end="715:62"><call pos:start="715:5" pos:end="715:62"><name pos:start="715:5" pos:end="715:25">us1005_easy_provision</name><argument_list pos:start="715:26" pos:end="715:62">(<argument pos:start="715:27" pos:end="715:37"><expr pos:start="715:27" pos:end="715:37"><literal type="string" pos:start="715:27" pos:end="715:37">"TC1005-94"</literal></expr></argument>, <argument pos:start="715:40" pos:end="715:55"><expr pos:start="715:40" pos:end="715:55"><name pos:start="715:40" pos:end="715:55">US1005_SERVER_IP</name></expr></argument>, <argument pos:start="715:58" pos:end="715:58"><expr pos:start="715:58" pos:end="715:58"><literal type="number" pos:start="715:58" pos:end="715:58">1</literal></expr></argument>, <argument pos:start="715:61" pos:end="715:61"><expr pos:start="715:61" pos:end="715:61"><literal type="number" pos:start="715:61" pos:end="715:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="718:1" pos:end="763:1"><type pos:start="718:1" pos:end="718:3"><name pos:start="718:1" pos:end="718:3">int</name></type> <name pos:start="718:5" pos:end="718:20">us1005_add_suite</name> <parameter_list pos:start="718:22" pos:end="718:27">(<parameter pos:start="718:23" pos:end="718:26"><decl pos:start="718:23" pos:end="718:26"><type pos:start="718:23" pos:end="718:26"><name pos:start="718:23" pos:end="718:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="719:1" pos:end="763:1">{<block_content pos:start="721:5" pos:end="763:0">
<cpp:ifdef pos:start="720:1" pos:end="720:17">#<cpp:directive pos:start="720:2" pos:end="720:6">ifdef</cpp:directive> <name pos:start="720:8" pos:end="720:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="721:5" pos:end="721:28"><decl pos:start="721:5" pos:end="721:27"><type pos:start="721:5" pos:end="721:13"><name pos:start="721:5" pos:end="721:13">CU_pSuite</name></type> <name pos:start="721:15" pos:end="721:20">pSuite</name> <init pos:start="721:22" pos:end="721:27">= <expr pos:start="721:24" pos:end="721:27"><name pos:start="721:24" pos:end="721:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="723:5" pos:end="723:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="724:5" pos:end="726:34"><expr pos:start="724:5" pos:end="726:33"><name pos:start="724:5" pos:end="724:10">pSuite</name> <operator pos:start="724:12" pos:end="724:12">=</operator> <call pos:start="724:14" pos:end="726:33"><name pos:start="724:14" pos:end="724:25">CU_add_suite</name><argument_list pos:start="724:26" pos:end="726:33">(<argument pos:start="724:27" pos:end="724:56"><expr pos:start="724:27" pos:end="724:56"><literal type="string" pos:start="724:27" pos:end="724:56">"us1005_client_easy_provision"</literal></expr></argument>,
            <argument pos:start="725:13" pos:end="725:29"><expr pos:start="725:13" pos:end="725:29"><name pos:start="725:13" pos:end="725:29">us1005_init_suite</name></expr></argument>,
            <argument pos:start="726:13" pos:end="726:32"><expr pos:start="726:13" pos:end="726:32"><name pos:start="726:13" pos:end="726:32">us1005_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="727:5" pos:end="730:5"><if pos:start="727:5" pos:end="730:5">if <condition pos:start="727:8" pos:end="727:23">(<expr pos:start="727:9" pos:end="727:22"><name pos:start="727:9" pos:end="727:12">NULL</name> <operator pos:start="727:14" pos:end="727:15">==</operator> <name pos:start="727:17" pos:end="727:22">pSuite</name></expr>)</condition> <block pos:start="727:25" pos:end="730:5">{<block_content pos:start="728:9" pos:end="729:30">
        <expr_stmt pos:start="728:9" pos:end="728:30"><expr pos:start="728:9" pos:end="728:29"><call pos:start="728:9" pos:end="728:29"><name pos:start="728:9" pos:end="728:27">CU_cleanup_registry</name><argument_list pos:start="728:28" pos:end="728:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="729:9" pos:end="729:30">return <expr pos:start="729:16" pos:end="729:29"><call pos:start="729:16" pos:end="729:29"><name pos:start="729:16" pos:end="729:27">CU_get_error</name><argument_list pos:start="729:28" pos:end="729:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="732:5" pos:end="742:7">/*
     * Add the tests to the suite
     *
     * ********************IMPORTANT*********************
     * Do not change the order of these tests.
     * Some of the tests stop the EST server and restart
     * it using different certs.  If you change the order
     * then false negatives may occur.
     * **************************************************
     *
     */</comment>
    <if_stmt pos:start="743:5" pos:end="759:5"><if pos:start="743:5" pos:end="759:5">if <condition pos:start="743:8" pos:end="755:108">(<expr pos:start="743:9" pos:end="755:107"><operator pos:start="743:9" pos:end="743:9">(</operator><name pos:start="743:10" pos:end="743:13">NULL</name> <operator pos:start="743:15" pos:end="743:16">==</operator> <call pos:start="743:18" pos:end="743:78"><name pos:start="743:18" pos:end="743:28">CU_add_test</name><argument_list pos:start="743:29" pos:end="743:78">(<argument pos:start="743:30" pos:end="743:35"><expr pos:start="743:30" pos:end="743:35"><name pos:start="743:30" pos:end="743:35">pSuite</name></expr></argument>, <argument pos:start="743:38" pos:end="743:63"><expr pos:start="743:38" pos:end="743:63"><literal type="string" pos:start="743:38" pos:end="743:63">"Easy provision - no cert"</literal></expr></argument>, <argument pos:start="743:66" pos:end="743:77"><expr pos:start="743:66" pos:end="743:77"><name pos:start="743:66" pos:end="743:77">us1005_test1</name></expr></argument>)</argument_list></call><operator pos:start="743:79" pos:end="743:79">)</operator> <operator pos:start="743:81" pos:end="743:82">||</operator>
        <operator pos:start="744:9" pos:end="744:9">(</operator><name pos:start="744:10" pos:end="744:13">NULL</name> <operator pos:start="744:15" pos:end="744:16">==</operator> <call pos:start="744:18" pos:end="744:91"><name pos:start="744:18" pos:end="744:28">CU_add_test</name><argument_list pos:start="744:29" pos:end="744:91">(<argument pos:start="744:30" pos:end="744:35"><expr pos:start="744:30" pos:end="744:35"><name pos:start="744:30" pos:end="744:35">pSuite</name></expr></argument>, <argument pos:start="744:38" pos:end="744:76"><expr pos:start="744:38" pos:end="744:76"><literal type="string" pos:start="744:38" pos:end="744:76">"Easy provision - no cert HTTP BA hint"</literal></expr></argument>, <argument pos:start="744:79" pos:end="744:90"><expr pos:start="744:79" pos:end="744:90"><name pos:start="744:79" pos:end="744:90">us1005_test2</name></expr></argument>)</argument_list></call><operator pos:start="744:92" pos:end="744:92">)</operator> <operator pos:start="744:94" pos:end="744:95">||</operator>
        <operator pos:start="745:9" pos:end="745:9">(</operator><name pos:start="745:10" pos:end="745:13">NULL</name> <operator pos:start="745:15" pos:end="745:16">==</operator> <call pos:start="745:18" pos:end="745:77"><name pos:start="745:18" pos:end="745:28">CU_add_test</name><argument_list pos:start="745:29" pos:end="745:77">(<argument pos:start="745:30" pos:end="745:35"><expr pos:start="745:30" pos:end="745:35"><name pos:start="745:30" pos:end="745:35">pSuite</name></expr></argument>, <argument pos:start="745:38" pos:end="745:62"><expr pos:start="745:38" pos:end="745:62"><literal type="string" pos:start="745:38" pos:end="745:62">"Easy provision - w/cert"</literal></expr></argument>, <argument pos:start="745:65" pos:end="745:76"><expr pos:start="745:65" pos:end="745:76"><name pos:start="745:65" pos:end="745:76">us1005_test3</name></expr></argument>)</argument_list></call><operator pos:start="745:78" pos:end="745:78">)</operator> <operator pos:start="745:80" pos:end="745:81">||</operator>
        <operator pos:start="746:9" pos:end="746:9">(</operator><name pos:start="746:10" pos:end="746:13">NULL</name> <operator pos:start="746:15" pos:end="746:16">==</operator> <call pos:start="746:18" pos:end="746:90"><name pos:start="746:18" pos:end="746:28">CU_add_test</name><argument_list pos:start="746:29" pos:end="746:90">(<argument pos:start="746:30" pos:end="746:35"><expr pos:start="746:30" pos:end="746:35"><name pos:start="746:30" pos:end="746:35">pSuite</name></expr></argument>, <argument pos:start="746:38" pos:end="746:75"><expr pos:start="746:38" pos:end="746:75"><literal type="string" pos:start="746:38" pos:end="746:75">"Easy provision - w/cert HTTP BA hint"</literal></expr></argument>, <argument pos:start="746:78" pos:end="746:89"><expr pos:start="746:78" pos:end="746:89"><name pos:start="746:78" pos:end="746:89">us1005_test4</name></expr></argument>)</argument_list></call><operator pos:start="746:91" pos:end="746:91">)</operator> <operator pos:start="746:93" pos:end="746:94">||</operator>
        <operator pos:start="747:9" pos:end="747:9">(</operator><name pos:start="747:10" pos:end="747:13">NULL</name> <operator pos:start="747:15" pos:end="747:16">==</operator> <call pos:start="747:18" pos:end="747:67"><name pos:start="747:18" pos:end="747:28">CU_add_test</name><argument_list pos:start="747:29" pos:end="747:67">(<argument pos:start="747:30" pos:end="747:35"><expr pos:start="747:30" pos:end="747:35"><name pos:start="747:30" pos:end="747:35">pSuite</name></expr></argument>, <argument pos:start="747:38" pos:end="747:52"><expr pos:start="747:38" pos:end="747:52"><literal type="string" pos:start="747:38" pos:end="747:52">"Null pointers"</literal></expr></argument>, <argument pos:start="747:55" pos:end="747:66"><expr pos:start="747:55" pos:end="747:66"><name pos:start="747:55" pos:end="747:66">us1005_test5</name></expr></argument>)</argument_list></call><operator pos:start="747:68" pos:end="747:68">)</operator> <operator pos:start="747:70" pos:end="747:71">||</operator>
        <operator pos:start="748:9" pos:end="748:9">(</operator><name pos:start="748:10" pos:end="748:13">NULL</name> <operator pos:start="748:15" pos:end="748:16">==</operator> <call pos:start="748:18" pos:end="748:87"><name pos:start="748:18" pos:end="748:28">CU_add_test</name><argument_list pos:start="748:29" pos:end="748:87">(<argument pos:start="748:30" pos:end="748:35"><expr pos:start="748:30" pos:end="748:35"><name pos:start="748:30" pos:end="748:35">pSuite</name></expr></argument>, <argument pos:start="748:38" pos:end="748:72"><expr pos:start="748:38" pos:end="748:72"><literal type="string" pos:start="748:38" pos:end="748:72">"Enable PoP - no challengePassword"</literal></expr></argument>, <argument pos:start="748:75" pos:end="748:86"><expr pos:start="748:75" pos:end="748:86"><name pos:start="748:75" pos:end="748:86">us1005_test6</name></expr></argument>)</argument_list></call><operator pos:start="748:88" pos:end="748:88">)</operator> <operator pos:start="748:90" pos:end="748:91">||</operator>
        <operator pos:start="749:9" pos:end="749:9">(</operator><name pos:start="749:10" pos:end="749:13">NULL</name> <operator pos:start="749:15" pos:end="749:16">==</operator> <call pos:start="749:18" pos:end="749:88"><name pos:start="749:18" pos:end="749:28">CU_add_test</name><argument_list pos:start="749:29" pos:end="749:88">(<argument pos:start="749:30" pos:end="749:35"><expr pos:start="749:30" pos:end="749:35"><name pos:start="749:30" pos:end="749:35">pSuite</name></expr></argument>, <argument pos:start="749:38" pos:end="749:73"><expr pos:start="749:38" pos:end="749:73"><literal type="string" pos:start="749:38" pos:end="749:73">"Disable PoP - no challengePassword"</literal></expr></argument>, <argument pos:start="749:76" pos:end="749:87"><expr pos:start="749:76" pos:end="749:87"><name pos:start="749:76" pos:end="749:87">us1005_test7</name></expr></argument>)</argument_list></call><operator pos:start="749:89" pos:end="749:89">)</operator> <operator pos:start="749:91" pos:end="749:92">||</operator>
        <operator pos:start="750:9" pos:end="750:9">(</operator><name pos:start="750:10" pos:end="750:13">NULL</name> <operator pos:start="750:15" pos:end="750:16">==</operator> <call pos:start="750:18" pos:end="750:86"><name pos:start="750:18" pos:end="750:28">CU_add_test</name><argument_list pos:start="750:29" pos:end="750:86">(<argument pos:start="750:30" pos:end="750:35"><expr pos:start="750:30" pos:end="750:35"><name pos:start="750:30" pos:end="750:35">pSuite</name></expr></argument>, <argument pos:start="750:38" pos:end="750:71"><expr pos:start="750:38" pos:end="750:71"><literal type="string" pos:start="750:38" pos:end="750:71">"Enable PoP - w/challengePassword"</literal></expr></argument>, <argument pos:start="750:74" pos:end="750:85"><expr pos:start="750:74" pos:end="750:85"><name pos:start="750:74" pos:end="750:85">us1005_test8</name></expr></argument>)</argument_list></call><operator pos:start="750:87" pos:end="750:87">)</operator> <operator pos:start="750:89" pos:end="750:90">||</operator>
        <operator pos:start="751:9" pos:end="751:9">(</operator><name pos:start="751:10" pos:end="751:13">NULL</name> <operator pos:start="751:15" pos:end="751:16">==</operator> <call pos:start="751:18" pos:end="751:87"><name pos:start="751:18" pos:end="751:28">CU_add_test</name><argument_list pos:start="751:29" pos:end="751:87">(<argument pos:start="751:30" pos:end="751:35"><expr pos:start="751:30" pos:end="751:35"><name pos:start="751:30" pos:end="751:35">pSuite</name></expr></argument>, <argument pos:start="751:38" pos:end="751:72"><expr pos:start="751:38" pos:end="751:72"><literal type="string" pos:start="751:38" pos:end="751:72">"Disable PoP - w/challengePassword"</literal></expr></argument>, <argument pos:start="751:75" pos:end="751:86"><expr pos:start="751:75" pos:end="751:86"><name pos:start="751:75" pos:end="751:86">us1005_test9</name></expr></argument>)</argument_list></call><operator pos:start="751:88" pos:end="751:88">)</operator> <operator pos:start="751:90" pos:end="751:91">||</operator>
        <operator pos:start="752:9" pos:end="752:9">(</operator><name pos:start="752:10" pos:end="752:13">NULL</name> <operator pos:start="752:15" pos:end="752:16">==</operator> <call pos:start="752:18" pos:end="752:80"><name pos:start="752:18" pos:end="752:28">CU_add_test</name><argument_list pos:start="752:29" pos:end="752:80">(<argument pos:start="752:30" pos:end="752:35"><expr pos:start="752:30" pos:end="752:35"><name pos:start="752:30" pos:end="752:35">pSuite</name></expr></argument>, <argument pos:start="752:38" pos:end="752:64"><expr pos:start="752:38" pos:end="752:64"><literal type="string" pos:start="752:38" pos:end="752:64">"Enable PoP - CSR disabled"</literal></expr></argument>, <argument pos:start="752:67" pos:end="752:79"><expr pos:start="752:67" pos:end="752:79"><name pos:start="752:67" pos:end="752:79">us1005_test10</name></expr></argument>)</argument_list></call><operator pos:start="752:81" pos:end="752:81">)</operator> <operator pos:start="752:83" pos:end="752:84">||</operator>
        <operator pos:start="753:9" pos:end="753:9">(</operator><name pos:start="753:10" pos:end="753:13">NULL</name> <operator pos:start="753:15" pos:end="753:16">==</operator> <call pos:start="753:18" pos:end="753:81"><name pos:start="753:18" pos:end="753:28">CU_add_test</name><argument_list pos:start="753:29" pos:end="753:81">(<argument pos:start="753:30" pos:end="753:35"><expr pos:start="753:30" pos:end="753:35"><name pos:start="753:30" pos:end="753:35">pSuite</name></expr></argument>, <argument pos:start="753:38" pos:end="753:65"><expr pos:start="753:38" pos:end="753:65"><literal type="string" pos:start="753:38" pos:end="753:65">"Disable PoP - CSR disabled"</literal></expr></argument>, <argument pos:start="753:68" pos:end="753:80"><expr pos:start="753:68" pos:end="753:80"><name pos:start="753:68" pos:end="753:80">us1005_test11</name></expr></argument>)</argument_list></call><operator pos:start="753:82" pos:end="753:82">)</operator> <operator pos:start="753:84" pos:end="753:85">||</operator>
        <operator pos:start="754:9" pos:end="754:9">(</operator><name pos:start="754:10" pos:end="754:13">NULL</name> <operator pos:start="754:15" pos:end="754:16">==</operator> <call pos:start="754:18" pos:end="754:93"><name pos:start="754:18" pos:end="754:28">CU_add_test</name><argument_list pos:start="754:29" pos:end="754:93">(<argument pos:start="754:30" pos:end="754:35"><expr pos:start="754:30" pos:end="754:35"><name pos:start="754:30" pos:end="754:35">pSuite</name></expr></argument>, <argument pos:start="754:38" pos:end="754:77"><expr pos:start="754:38" pos:end="754:77"><literal type="string" pos:start="754:38" pos:end="754:77">"Easy provision - w/cert no server auth"</literal></expr></argument>, <argument pos:start="754:80" pos:end="754:92"><expr pos:start="754:80" pos:end="754:92"><name pos:start="754:80" pos:end="754:92">us1005_test93</name></expr></argument>)</argument_list></call><operator pos:start="754:94" pos:end="754:94">)</operator> <operator pos:start="754:96" pos:end="754:97">||</operator>
        <operator pos:start="755:9" pos:end="755:9">(</operator><name pos:start="755:10" pos:end="755:13">NULL</name> <operator pos:start="755:15" pos:end="755:16">==</operator> <call pos:start="755:18" pos:end="755:106"><name pos:start="755:18" pos:end="755:28">CU_add_test</name><argument_list pos:start="755:29" pos:end="755:106">(<argument pos:start="755:30" pos:end="755:35"><expr pos:start="755:30" pos:end="755:35"><name pos:start="755:30" pos:end="755:35">pSuite</name></expr></argument>, <argument pos:start="755:38" pos:end="755:90"><expr pos:start="755:38" pos:end="755:90"><literal type="string" pos:start="755:38" pos:end="755:90">"Easy provision - w/cert HTTP BA hint no server auth"</literal></expr></argument>, <argument pos:start="755:93" pos:end="755:105"><expr pos:start="755:93" pos:end="755:105"><name pos:start="755:93" pos:end="755:105">us1005_test94</name></expr></argument>)</argument_list></call><operator pos:start="755:107" pos:end="755:107">)</operator></expr>)</condition>
    <block pos:start="756:5" pos:end="759:5">{<block_content pos:start="757:8" pos:end="758:29">
       <expr_stmt pos:start="757:8" pos:end="757:29"><expr pos:start="757:8" pos:end="757:28"><call pos:start="757:8" pos:end="757:28"><name pos:start="757:8" pos:end="757:26">CU_cleanup_registry</name><argument_list pos:start="757:27" pos:end="757:28">()</argument_list></call></expr>;</expr_stmt>
       <return pos:start="758:8" pos:end="758:29">return <expr pos:start="758:15" pos:end="758:28"><call pos:start="758:15" pos:end="758:28"><name pos:start="758:15" pos:end="758:26">CU_get_error</name><argument_list pos:start="758:27" pos:end="758:28">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="761:5" pos:end="763:0">return <expr pos:start="761:12" pos:end="761:22"><name pos:start="761:12" pos:end="761:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="762:1" pos:end="762:6">#<cpp:directive pos:start="762:2" pos:end="762:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
