<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us896.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us896.c - Unit Tests for User Story 896 - Client CSR Attributes
 *
 * November, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="26:1" pos:end="26:13">#<cpp:directive pos:start="26:2" pos:end="26:7">ifndef</cpp:directive> <name pos:start="26:9" pos:end="26:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="27:1" pos:end="27:46">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:24">CLIENT_UT_CACERT</name></cpp:macro> <cpp:value pos:start="27:26" pos:end="27:46">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="28:1" pos:end="28:49">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:21"><name pos:start="28:9" pos:end="28:21">US896_CACERTS</name></cpp:macro>       <cpp:value pos:start="28:29" pos:end="28:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="29:1" pos:end="29:49">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:25">US896_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="29:29" pos:end="29:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="30:1" pos:end="30:71">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:28"><name pos:start="30:9" pos:end="30:28">US896_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="30:30" pos:end="30:71">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="31:1" pos:end="31:5">#<cpp:directive pos:start="31:2" pos:end="31:5">else</cpp:directive></cpp:else> 
<cpp:define pos:start="32:1" pos:end="32:48">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:24"><name pos:start="32:9" pos:end="32:24">CLIENT_UT_CACERT</name></cpp:macro> <cpp:value pos:start="32:26" pos:end="32:48">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="33:1" pos:end="33:51">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:21">US896_CACERTS</name></cpp:macro>       <cpp:value pos:start="33:29" pos:end="33:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="34:1" pos:end="34:50">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:25"><name pos:start="34:9" pos:end="34:25">US896_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="34:29" pos:end="34:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="35:1" pos:end="35:74">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:28">US896_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="35:30" pos:end="35:74">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="36:1" pos:end="36:6">#<cpp:directive pos:start="36:2" pos:end="36:6">endif</cpp:directive></cpp:endif> 

<cpp:define pos:start="38:1" pos:end="38:50">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:24"><name pos:start="38:9" pos:end="38:24">CLIENT_UT_PUBKEY</name></cpp:macro> <cpp:value pos:start="38:26" pos:end="38:50">"./est_client_ut_keypair"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:33">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:25">US896_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="39:29" pos:end="39:33">29896</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:39">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:23"><name pos:start="40:9" pos:end="40:23">US896_SERVER_IP</name></cpp:macro>     <cpp:value pos:start="40:29" pos:end="40:39">"127.0.0.1"</cpp:value></cpp:define> 
<cpp:define pos:start="41:1" pos:end="41:31">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:23">TEST_SHORT_ATTR</name></cpp:macro> <cpp:value pos:start="41:25" pos:end="41:31">"M==\0"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:1471">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:22"><name pos:start="42:9" pos:end="42:22">TEST_LONG_ATTR</name></cpp:macro> <cpp:value pos:start="42:24" pos:end="42:1471">"MIIENzCCA54GA4g3AjGCA5UGA4g3AwYDiDcEEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTATUVBhcnNlIFNFVCBhcyAyLjk5OS4yIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MAYJYIZIAWUDBAICBgkrJAMDAggBAQswawYDiDcBMWQTYlBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwYWIxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTEyMzQ1BgcrBgEBAQEWBgcrBgEBAQEW\0"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:197">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:26">TEST_CORRUPT_ATTR1</name></cpp:macro> <cpp:value pos:start="43:28" pos:end="43:197">"MHwwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOIExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYJKoZIhvcNAQkH\0"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:324">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:26"><name pos:start="44:9" pos:end="44:26">TEST_CORRUPT_ATTR2</name></cpp:macro> <cpp:value pos:start="44:28" pos:end="44:324">"MIHTMIGBBgOINwIxegEB/wICAP8GA4g3AwYDiDcECgECEhAxMjM0NTY3ODkwQUJDREVGExRQYXJzZSBTRVQgYXMgMi45OTkuMhQFM12345TIzNDUUBTEyMzQ1FgUxMjM0NRoFMTIzNDUcFAAAADEAAAAyAAAAMwAAADQAAAA1HgoAMQAyADMANAA1BglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYHKwYBAQEBFgEBAA==\0"</cpp:value></cpp:define>

<cpp:define pos:start="46:1" pos:end="46:30">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:26"><name pos:start="46:9" pos:end="46:26">EST_UT_MAX_CMD_LEN</name></cpp:macro> <cpp:value pos:start="46:28" pos:end="46:30">255</cpp:value></cpp:define>

<function pos:start="48:1" pos:end="49:1"><type pos:start="48:1" pos:end="48:11"><specifier pos:start="48:1" pos:end="48:6">static</specifier> <name pos:start="48:8" pos:end="48:11">void</name></type> <name pos:start="48:13" pos:end="48:23">us896_clean</name><parameter_list pos:start="48:24" pos:end="48:29">(<parameter pos:start="48:25" pos:end="48:28"><decl pos:start="48:25" pos:end="48:28"><type pos:start="48:25" pos:end="48:28"><name pos:start="48:25" pos:end="48:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="48:31" pos:end="49:1">{<block_content>
</block_content>}</block></function>

<function pos:start="51:1" pos:end="62:1"><type pos:start="51:1" pos:end="51:10"><specifier pos:start="51:1" pos:end="51:6">static</specifier> <name pos:start="51:8" pos:end="51:10">int</name></type> <name pos:start="51:12" pos:end="51:29">us896_start_server</name><parameter_list pos:start="51:30" pos:end="51:57">(<parameter pos:start="51:31" pos:end="51:47"><decl pos:start="51:31" pos:end="51:47"><type pos:start="51:31" pos:end="51:47"><name pos:start="51:31" pos:end="51:33">int</name></type> <name pos:start="51:35" pos:end="51:47">manual_enroll</name></decl></parameter>, <parameter pos:start="51:50" pos:end="51:56"><decl pos:start="51:50" pos:end="51:56"><type pos:start="51:50" pos:end="51:56"><name pos:start="51:50" pos:end="51:52">int</name></type> <name pos:start="51:54" pos:end="51:56">nid</name></decl></parameter>)</parameter_list> <block pos:start="51:59" pos:end="62:1">{<block_content pos:start="52:5" pos:end="61:14">
    <decl_stmt pos:start="52:5" pos:end="52:11"><decl pos:start="52:5" pos:end="52:10"><type pos:start="52:5" pos:end="52:7"><name pos:start="52:5" pos:end="52:7">int</name></type> <name pos:start="52:9" pos:end="52:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="54:5" pos:end="58:69"><expr pos:start="54:5" pos:end="58:68"><name pos:start="54:5" pos:end="54:6">rv</name> <operator pos:start="54:8" pos:end="54:8">=</operator> <call pos:start="54:10" pos:end="58:68"><name pos:start="54:10" pos:end="54:17">st_start</name><argument_list pos:start="54:18" pos:end="58:68">(<argument pos:start="54:19" pos:end="54:35"><expr pos:start="54:19" pos:end="54:35"><name pos:start="54:19" pos:end="54:35">US896_SERVER_PORT</name></expr></argument>,
    <argument pos:start="55:5" pos:end="55:24"><expr pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:24">US896_SERVER_CERTKEY</name></expr></argument>,
    <argument pos:start="56:5" pos:end="56:24"><expr pos:start="56:5" pos:end="56:24"><name pos:start="56:5" pos:end="56:24">US896_SERVER_CERTKEY</name></expr></argument>, <argument pos:start="56:27" pos:end="56:44"><expr pos:start="56:27" pos:end="56:44"><literal type="string" pos:start="56:27" pos:end="56:44">"US896 test realm"</literal></expr></argument>,
    <argument pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:17">US896_CACERTS</name></expr></argument>,
    <argument pos:start="58:5" pos:end="58:21"><expr pos:start="58:5" pos:end="58:21"><name pos:start="58:5" pos:end="58:21">US896_TRUST_CERTS</name></expr></argument>, <argument pos:start="58:24" pos:end="58:44"><expr pos:start="58:24" pos:end="58:44"><literal type="string" pos:start="58:24" pos:end="58:44">"CA/estExampleCA.cnf"</literal></expr></argument>, <argument pos:start="58:47" pos:end="58:59"><expr pos:start="58:47" pos:end="58:59"><name pos:start="58:47" pos:end="58:59">manual_enroll</name></expr></argument>, <argument pos:start="58:62" pos:end="58:62"><expr pos:start="58:62" pos:end="58:62"><literal type="number" pos:start="58:62" pos:end="58:62">0</literal></expr></argument>, <argument pos:start="58:65" pos:end="58:67"><expr pos:start="58:65" pos:end="58:67"><name pos:start="58:65" pos:end="58:67">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="60:5" pos:end="60:13"><expr pos:start="60:5" pos:end="60:12"><call pos:start="60:5" pos:end="60:12"><name pos:start="60:5" pos:end="60:9">SLEEP</name><argument_list pos:start="60:10" pos:end="60:12">(<argument pos:start="60:11" pos:end="60:11"><expr pos:start="60:11" pos:end="60:11"><literal type="number" pos:start="60:11" pos:end="60:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="61:5" pos:end="61:14">return <expr pos:start="61:12" pos:end="61:13"><name pos:start="61:12" pos:end="61:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="64:1" pos:end="68:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="69:1" pos:end="96:1"><type pos:start="69:1" pos:end="69:10"><specifier pos:start="69:1" pos:end="69:6">static</specifier> <name pos:start="69:8" pos:end="69:10">int</name></type> <name pos:start="69:12" pos:end="69:27">us896_init_suite</name><parameter_list pos:start="69:28" pos:end="69:33">(<parameter pos:start="69:29" pos:end="69:32"><decl pos:start="69:29" pos:end="69:32"><type pos:start="69:29" pos:end="69:32"><name pos:start="69:29" pos:end="69:32">void</name></type></decl></parameter>)</parameter_list> <block pos:start="69:35" pos:end="96:1">{<block_content pos:start="70:5" pos:end="95:14">
    <decl_stmt pos:start="70:5" pos:end="70:15"><decl pos:start="70:5" pos:end="70:14"><type pos:start="70:5" pos:end="70:7"><name pos:start="70:5" pos:end="70:7">int</name></type> <name pos:start="70:9" pos:end="70:10">rv</name> <init pos:start="70:12" pos:end="70:14">= <expr pos:start="70:14" pos:end="70:14"><literal type="number" pos:start="70:14" pos:end="70:14">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="71:5" pos:end="71:33"><decl pos:start="71:5" pos:end="71:32"><type pos:start="71:5" pos:end="71:8"><name pos:start="71:5" pos:end="71:8">char</name></type> <name pos:start="71:10" pos:end="71:32"><name pos:start="71:10" pos:end="71:12">cmd</name><index pos:start="71:13" pos:end="71:32">[<expr pos:start="71:14" pos:end="71:31"><name pos:start="71:14" pos:end="71:31">EST_UT_MAX_CMD_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:63"><expr pos:start="73:5" pos:end="73:62"><call pos:start="73:5" pos:end="73:62"><name pos:start="73:5" pos:end="73:10">printf</name><argument_list pos:start="73:11" pos:end="73:62">(<argument pos:start="73:12" pos:end="73:61"><expr pos:start="73:12" pos:end="73:61"><literal type="string" pos:start="73:12" pos:end="73:61">"Starting EST Server CSR attributes unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="75:5" pos:end="77:7">/*
     * gen the keypair to be used for EST Client testing
     */</comment>
    <expr_stmt pos:start="78:5" pos:end="80:30"><expr pos:start="78:5" pos:end="80:29"><call pos:start="78:5" pos:end="80:29"><name pos:start="78:5" pos:end="78:12">snprintf</name><argument_list pos:start="78:13" pos:end="80:29">(<argument pos:start="78:14" pos:end="78:16"><expr pos:start="78:14" pos:end="78:16"><name pos:start="78:14" pos:end="78:16">cmd</name></expr></argument>, <argument pos:start="78:19" pos:end="78:36"><expr pos:start="78:19" pos:end="78:36"><name pos:start="78:19" pos:end="78:36">EST_UT_MAX_CMD_LEN</name></expr></argument>,
            <argument pos:start="79:13" pos:end="79:62"><expr pos:start="79:13" pos:end="79:62"><literal type="string" pos:start="79:13" pos:end="79:62">"openssl ecparam -name prime256v1 -genkey -out %s"</literal></expr></argument>,
            <argument pos:start="80:13" pos:end="80:28"><expr pos:start="80:13" pos:end="80:28"><name pos:start="80:13" pos:end="80:28">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="81:5" pos:end="81:24"><expr pos:start="81:5" pos:end="81:23"><call pos:start="81:5" pos:end="81:23"><name pos:start="81:5" pos:end="81:10">printf</name><argument_list pos:start="81:11" pos:end="81:23">(<argument pos:start="81:12" pos:end="81:17"><expr pos:start="81:12" pos:end="81:17"><literal type="string" pos:start="81:12" pos:end="81:17">"%s\n"</literal></expr></argument>, <argument pos:start="81:20" pos:end="81:22"><expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:6">rv</name> <operator pos:start="83:8" pos:end="83:8">=</operator> <call pos:start="83:10" pos:end="83:20"><name pos:start="83:10" pos:end="83:15">system</name><argument_list pos:start="83:16" pos:end="83:20">(<argument pos:start="83:17" pos:end="83:19"><expr pos:start="83:17" pos:end="83:19"><name pos:start="83:17" pos:end="83:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="85:5" pos:end="87:7">/*
     * start the server for the tests that need to talk to a server
     */</comment>
    <expr_stmt pos:start="88:5" pos:end="88:18"><expr pos:start="88:5" pos:end="88:17"><call pos:start="88:5" pos:end="88:17"><name pos:start="88:5" pos:end="88:15">us896_clean</name><argument_list pos:start="88:16" pos:end="88:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="90:5" pos:end="92:7">/*
     * Start an instance of the EST server 
     */</comment>
    <expr_stmt pos:start="93:5" pos:end="93:34"><expr pos:start="93:5" pos:end="93:33"><name pos:start="93:5" pos:end="93:6">rv</name> <operator pos:start="93:8" pos:end="93:8">=</operator> <call pos:start="93:10" pos:end="93:33"><name pos:start="93:10" pos:end="93:27">us896_start_server</name><argument_list pos:start="93:28" pos:end="93:33">(<argument pos:start="93:29" pos:end="93:29"><expr pos:start="93:29" pos:end="93:29"><literal type="number" pos:start="93:29" pos:end="93:29">0</literal></expr></argument>, <argument pos:start="93:32" pos:end="93:32"><expr pos:start="93:32" pos:end="93:32"><literal type="number" pos:start="93:32" pos:end="93:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="95:5" pos:end="95:14">return <expr pos:start="95:12" pos:end="95:13"><name pos:start="95:12" pos:end="95:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="98:1" pos:end="102:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="103:1" pos:end="107:1"><type pos:start="103:1" pos:end="103:10"><specifier pos:start="103:1" pos:end="103:6">static</specifier> <name pos:start="103:8" pos:end="103:10">int</name></type> <name pos:start="103:12" pos:end="103:30">us896_destroy_suite</name><parameter_list pos:start="103:31" pos:end="103:36">(<parameter pos:start="103:32" pos:end="103:35"><decl pos:start="103:32" pos:end="103:35"><type pos:start="103:32" pos:end="103:35"><name pos:start="103:32" pos:end="103:35">void</name></type></decl></parameter>)</parameter_list> <block pos:start="103:38" pos:end="107:1">{<block_content pos:start="104:5" pos:end="106:13">
    <expr_stmt pos:start="104:5" pos:end="104:14"><expr pos:start="104:5" pos:end="104:13"><call pos:start="104:5" pos:end="104:13"><name pos:start="104:5" pos:end="104:11">st_stop</name><argument_list pos:start="104:12" pos:end="104:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="105:5" pos:end="105:13"><expr pos:start="105:5" pos:end="105:12"><call pos:start="105:5" pos:end="105:12"><name pos:start="105:5" pos:end="105:9">SLEEP</name><argument_list pos:start="105:10" pos:end="105:12">(<argument pos:start="105:11" pos:end="105:11"><expr pos:start="105:11" pos:end="105:11"><literal type="number" pos:start="105:11" pos:end="105:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="106:5" pos:end="106:13">return <expr pos:start="106:12" pos:end="106:12"><literal type="number" pos:start="106:12" pos:end="106:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="109:1" pos:end="111:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="112:1" pos:end="141:1"><type pos:start="112:1" pos:end="112:10"><specifier pos:start="112:1" pos:end="112:6">static</specifier> <name pos:start="112:8" pos:end="112:10">int</name></type> <name pos:start="112:12" pos:end="112:36">client_manual_cert_verify</name><parameter_list pos:start="112:37" pos:end="112:76">(<parameter pos:start="112:38" pos:end="112:51"><decl pos:start="112:38" pos:end="112:51"><type pos:start="112:38" pos:end="112:51"><name pos:start="112:38" pos:end="112:41">X509</name> <modifier pos:start="112:43" pos:end="112:43">*</modifier></type><name pos:start="112:44" pos:end="112:51">cur_cert</name></decl></parameter>, <parameter pos:start="112:54" pos:end="112:75"><decl pos:start="112:54" pos:end="112:75"><type pos:start="112:54" pos:end="112:75"><name pos:start="112:54" pos:end="112:56">int</name></type> <name pos:start="112:58" pos:end="112:75">openssl_cert_error</name></decl></parameter>)</parameter_list> <block pos:start="112:78" pos:end="141:1">{<block_content pos:start="113:5" pos:end="140:19">
    <decl_stmt pos:start="113:5" pos:end="113:17"><decl pos:start="113:5" pos:end="113:16"><type pos:start="113:5" pos:end="113:9"><name pos:start="113:5" pos:end="113:7">BIO</name> <modifier pos:start="113:9" pos:end="113:9">*</modifier></type><name pos:start="113:10" pos:end="113:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="114:5" pos:end="114:46"><expr pos:start="114:5" pos:end="114:45"><name pos:start="114:5" pos:end="114:11">bio_err</name> <operator pos:start="114:13" pos:end="114:13">=</operator> <call pos:start="114:15" pos:end="114:45"><name pos:start="114:15" pos:end="114:24">BIO_new_fp</name><argument_list pos:start="114:25" pos:end="114:45">(<argument pos:start="114:26" pos:end="114:31"><expr pos:start="114:26" pos:end="114:31"><name pos:start="114:26" pos:end="114:31">stderr</name></expr></argument>, <argument pos:start="114:34" pos:end="114:44"><expr pos:start="114:34" pos:end="114:44"><name pos:start="114:34" pos:end="114:44">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="115:5" pos:end="115:20"><decl pos:start="115:5" pos:end="115:19"><type pos:start="115:5" pos:end="115:7"><name pos:start="115:5" pos:end="115:7">int</name></type> <name pos:start="115:9" pos:end="115:15">approve</name> <init pos:start="115:17" pos:end="115:19">= <expr pos:start="115:19" pos:end="115:19"><literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="117:5" pos:end="119:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="120:5" pos:end="123:63"><expr pos:start="120:5" pos:end="123:62"><call pos:start="120:5" pos:end="123:62"><name pos:start="120:5" pos:end="120:10">printf</name><argument_list pos:start="120:11" pos:end="123:62">(
            <argument pos:start="121:13" pos:end="121:118"><expr pos:start="121:13" pos:end="121:118"><literal type="string" pos:start="121:13" pos:end="121:118">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
            <argument pos:start="122:13" pos:end="122:24"><expr pos:start="122:13" pos:end="122:24"><name pos:start="122:13" pos:end="122:24">__FUNCTION__</name></expr></argument>, <argument pos:start="122:27" pos:end="122:44"><expr pos:start="122:27" pos:end="122:44"><name pos:start="122:27" pos:end="122:44">openssl_cert_error</name></expr></argument>,
            <argument pos:start="123:13" pos:end="123:61"><expr pos:start="123:13" pos:end="123:61"><call pos:start="123:13" pos:end="123:61"><name pos:start="123:13" pos:end="123:41">X509_verify_cert_error_string</name><argument_list pos:start="123:42" pos:end="123:61">(<argument pos:start="123:43" pos:end="123:60"><expr pos:start="123:43" pos:end="123:60"><name pos:start="123:43" pos:end="123:60">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:30"><expr pos:start="125:5" pos:end="125:29"><call pos:start="125:5" pos:end="125:29"><name pos:start="125:5" pos:end="125:10">printf</name><argument_list pos:start="125:11" pos:end="125:29">(<argument pos:start="125:12" pos:end="125:28"><expr pos:start="125:12" pos:end="125:28"><literal type="string" pos:start="125:12" pos:end="125:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="126:5" pos:end="126:36"><expr pos:start="126:5" pos:end="126:35"><call pos:start="126:5" pos:end="126:35"><name pos:start="126:5" pos:end="126:17">X509_print_fp</name><argument_list pos:start="126:18" pos:end="126:35">(<argument pos:start="126:19" pos:end="126:24"><expr pos:start="126:19" pos:end="126:24"><name pos:start="126:19" pos:end="126:24">stdout</name></expr></argument>, <argument pos:start="126:27" pos:end="126:34"><expr pos:start="126:27" pos:end="126:34"><name pos:start="126:27" pos:end="126:34">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="127:5" pos:end="131:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="132:5" pos:end="132:74"><expr pos:start="132:5" pos:end="132:73"><call pos:start="132:5" pos:end="132:73"><name pos:start="132:5" pos:end="132:24">X509_signature_print</name><argument_list pos:start="132:25" pos:end="132:73">(<argument pos:start="132:26" pos:end="132:32"><expr pos:start="132:26" pos:end="132:32"><name pos:start="132:26" pos:end="132:32">bio_err</name></expr></argument>, <argument pos:start="132:35" pos:end="132:51"><expr pos:start="132:35" pos:end="132:51"><name pos:start="132:35" pos:end="132:51"><name pos:start="132:35" pos:end="132:42">cur_cert</name><operator pos:start="132:43" pos:end="132:44">-&gt;</operator><name pos:start="132:45" pos:end="132:51">sig_alg</name></name></expr></argument>, <argument pos:start="132:54" pos:end="132:72"><expr pos:start="132:54" pos:end="132:72"><name pos:start="132:54" pos:end="132:72"><name pos:start="132:54" pos:end="132:61">cur_cert</name><operator pos:start="132:62" pos:end="132:63">-&gt;</operator><name pos:start="132:64" pos:end="132:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="134:5" pos:end="136:5"><if pos:start="134:5" pos:end="136:5">if <condition pos:start="134:8" pos:end="134:59">(<expr pos:start="134:9" pos:end="134:58"><name pos:start="134:9" pos:end="134:26">openssl_cert_error</name> <operator pos:start="134:28" pos:end="134:29">==</operator> <name pos:start="134:31" pos:end="134:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="134:61" pos:end="136:5">{<block_content pos:start="135:9" pos:end="135:20">
        <expr_stmt pos:start="135:9" pos:end="135:20"><expr pos:start="135:9" pos:end="135:19"><name pos:start="135:9" pos:end="135:15">approve</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <literal type="number" pos:start="135:19" pos:end="135:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="138:5" pos:end="138:22"><expr pos:start="138:5" pos:end="138:21"><call pos:start="138:5" pos:end="138:21"><name pos:start="138:5" pos:end="138:12">BIO_free</name><argument_list pos:start="138:13" pos:end="138:21">(<argument pos:start="138:14" pos:end="138:20"><expr pos:start="138:14" pos:end="138:20"><name pos:start="138:14" pos:end="138:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="140:5" pos:end="140:19">return <expr pos:start="140:12" pos:end="140:18"><name pos:start="140:12" pos:end="140:18">approve</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="143:1" pos:end="145:3">/*
 * Test1 - exercise the est_client_get_csrattrs() API.
 */</comment>
<function pos:start="146:1" pos:end="164:1"><type pos:start="146:1" pos:end="146:11"><specifier pos:start="146:1" pos:end="146:6">static</specifier> <name pos:start="146:8" pos:end="146:11">void</name></type> <name pos:start="146:13" pos:end="146:23">us896_test1</name><parameter_list pos:start="146:24" pos:end="146:29">(<parameter pos:start="146:25" pos:end="146:28"><decl pos:start="146:25" pos:end="146:28"><type pos:start="146:25" pos:end="146:28"><name pos:start="146:25" pos:end="146:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="146:31" pos:end="164:1">{<block_content pos:start="147:5" pos:end="162:34">
    <decl_stmt pos:start="147:5" pos:end="147:11"><decl pos:start="147:5" pos:end="147:10"><type pos:start="147:5" pos:end="147:7"><name pos:start="147:5" pos:end="147:7">int</name></type> <name pos:start="147:9" pos:end="147:10">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="148:5" pos:end="148:28"><decl pos:start="148:5" pos:end="148:27"><type pos:start="148:5" pos:end="148:19"><name pos:start="148:5" pos:end="148:12">unsigned</name> <name pos:start="148:14" pos:end="148:17">char</name> <modifier pos:start="148:19" pos:end="148:19">*</modifier></type><name pos:start="148:20" pos:end="148:27">csr_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="149:5" pos:end="149:16"><decl pos:start="149:5" pos:end="149:15"><type pos:start="149:5" pos:end="149:7"><name pos:start="149:5" pos:end="149:7">int</name></type> <name pos:start="149:9" pos:end="149:15">csr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="150:5" pos:end="150:24"><decl pos:start="150:5" pos:end="150:23"><type pos:start="150:5" pos:end="150:13"><name pos:start="150:5" pos:end="150:11">EST_CTX</name> <modifier pos:start="150:13" pos:end="150:13">*</modifier></type><name pos:start="150:14" pos:end="150:16">ctx</name> <init pos:start="150:18" pos:end="150:23">= <expr pos:start="150:20" pos:end="150:23"><name pos:start="150:20" pos:end="150:23">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="152:5" pos:end="153:5"><expr pos:start="152:5" pos:end="152:15"><name pos:start="152:5" pos:end="152:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:59"><expr pos:start="155:5" pos:end="155:58"><name pos:start="155:5" pos:end="155:6">rc</name> <operator pos:start="155:8" pos:end="155:8">=</operator> <call pos:start="155:10" pos:end="155:58"><name pos:start="155:10" pos:end="155:32">est_client_get_csrattrs</name><argument_list pos:start="155:33" pos:end="155:58">(<argument pos:start="155:34" pos:end="155:36"><expr pos:start="155:34" pos:end="155:36"><name pos:start="155:34" pos:end="155:36">ctx</name></expr></argument>, <argument pos:start="155:39" pos:end="155:47"><expr pos:start="155:39" pos:end="155:47"><operator pos:start="155:39" pos:end="155:39">&amp;</operator><name pos:start="155:40" pos:end="155:47">csr_data</name></expr></argument>, <argument pos:start="155:50" pos:end="155:57"><expr pos:start="155:50" pos:end="155:57"><operator pos:start="155:50" pos:end="155:50">&amp;</operator><name pos:start="155:51" pos:end="155:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="156:5" pos:end="156:34"><expr pos:start="156:5" pos:end="156:33"><call pos:start="156:5" pos:end="156:33"><name pos:start="156:5" pos:end="156:13">CU_ASSERT</name><argument_list pos:start="156:14" pos:end="156:33">(<argument pos:start="156:15" pos:end="156:32"><expr pos:start="156:15" pos:end="156:32"><name pos:start="156:15" pos:end="156:16">rc</name> <operator pos:start="156:18" pos:end="156:19">!=</operator> <name pos:start="156:21" pos:end="156:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="158:5" pos:end="158:54"><expr pos:start="158:5" pos:end="158:53"><name pos:start="158:5" pos:end="158:6">rc</name> <operator pos:start="158:8" pos:end="158:8">=</operator> <call pos:start="158:10" pos:end="158:53"><name pos:start="158:10" pos:end="158:32">est_client_get_csrattrs</name><argument_list pos:start="158:33" pos:end="158:53">(<argument pos:start="158:34" pos:end="158:36"><expr pos:start="158:34" pos:end="158:36"><name pos:start="158:34" pos:end="158:36">ctx</name></expr></argument>, <argument pos:start="158:39" pos:end="158:42"><expr pos:start="158:39" pos:end="158:42"><name pos:start="158:39" pos:end="158:42">NULL</name></expr></argument>, <argument pos:start="158:45" pos:end="158:52"><expr pos:start="158:45" pos:end="158:52"><operator pos:start="158:45" pos:end="158:45">&amp;</operator><name pos:start="158:46" pos:end="158:52">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="159:5" pos:end="159:34"><expr pos:start="159:5" pos:end="159:33"><call pos:start="159:5" pos:end="159:33"><name pos:start="159:5" pos:end="159:13">CU_ASSERT</name><argument_list pos:start="159:14" pos:end="159:33">(<argument pos:start="159:15" pos:end="159:32"><expr pos:start="159:15" pos:end="159:32"><name pos:start="159:15" pos:end="159:16">rc</name> <operator pos:start="159:18" pos:end="159:19">!=</operator> <name pos:start="159:21" pos:end="159:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:55"><expr pos:start="161:5" pos:end="161:54"><name pos:start="161:5" pos:end="161:6">rc</name> <operator pos:start="161:8" pos:end="161:8">=</operator> <call pos:start="161:10" pos:end="161:54"><name pos:start="161:10" pos:end="161:32">est_client_get_csrattrs</name><argument_list pos:start="161:33" pos:end="161:54">(<argument pos:start="161:34" pos:end="161:36"><expr pos:start="161:34" pos:end="161:36"><name pos:start="161:34" pos:end="161:36">ctx</name></expr></argument>, <argument pos:start="161:39" pos:end="161:47"><expr pos:start="161:39" pos:end="161:47"><operator pos:start="161:39" pos:end="161:39">&amp;</operator><name pos:start="161:40" pos:end="161:47">csr_data</name></expr></argument>, <argument pos:start="161:50" pos:end="161:53"><expr pos:start="161:50" pos:end="161:53"><name pos:start="161:50" pos:end="161:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="162:5" pos:end="162:34"><expr pos:start="162:5" pos:end="162:33"><call pos:start="162:5" pos:end="162:33"><name pos:start="162:5" pos:end="162:13">CU_ASSERT</name><argument_list pos:start="162:14" pos:end="162:33">(<argument pos:start="162:15" pos:end="162:32"><expr pos:start="162:15" pos:end="162:32"><name pos:start="162:15" pos:end="162:16">rc</name> <operator pos:start="162:18" pos:end="162:19">!=</operator> <name pos:start="162:21" pos:end="162:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block" pos:start="166:1" pos:end="169:3">/*
 * Test2 - exercise the response  variations triggered
 *         by est_client_get_csrattrs()
 */</comment>
<function pos:start="170:1" pos:end="292:1"><type pos:start="170:1" pos:end="170:11"><specifier pos:start="170:1" pos:end="170:6">static</specifier> <name pos:start="170:8" pos:end="170:11">void</name></type> <name pos:start="170:13" pos:end="170:23">us896_test2</name><parameter_list pos:start="170:24" pos:end="170:29">(<parameter pos:start="170:25" pos:end="170:28"><decl pos:start="170:25" pos:end="170:28"><type pos:start="170:25" pos:end="170:28"><name pos:start="170:25" pos:end="170:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="170:31" pos:end="292:1">{<block_content pos:start="171:5" pos:end="291:5">
    <decl_stmt pos:start="171:5" pos:end="171:17"><decl pos:start="171:5" pos:end="171:16"><type pos:start="171:5" pos:end="171:13"><name pos:start="171:5" pos:end="171:11">EST_CTX</name> <modifier pos:start="171:13" pos:end="171:13">*</modifier></type><name pos:start="171:14" pos:end="171:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="172:5" pos:end="172:31"><decl pos:start="172:5" pos:end="172:30"><type pos:start="172:5" pos:end="172:19"><name pos:start="172:5" pos:end="172:12">unsigned</name> <name pos:start="172:14" pos:end="172:17">char</name> <modifier pos:start="172:19" pos:end="172:19">*</modifier></type><name pos:start="172:20" pos:end="172:23">pkey</name> <init pos:start="172:25" pos:end="172:30">= <expr pos:start="172:27" pos:end="172:30"><name pos:start="172:27" pos:end="172:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="173:5" pos:end="173:34"><decl pos:start="173:5" pos:end="173:33"><type pos:start="173:5" pos:end="173:19"><name pos:start="173:5" pos:end="173:12">unsigned</name> <name pos:start="173:14" pos:end="173:17">char</name> <modifier pos:start="173:19" pos:end="173:19">*</modifier></type><name pos:start="173:20" pos:end="173:26">cacerts</name> <init pos:start="173:28" pos:end="173:33">= <expr pos:start="173:30" pos:end="173:33"><name pos:start="173:30" pos:end="173:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="174:5" pos:end="174:24"><decl pos:start="174:5" pos:end="174:23"><type pos:start="174:5" pos:end="174:7"><name pos:start="174:5" pos:end="174:7">int</name></type> <name pos:start="174:9" pos:end="174:19">cacerts_len</name> <init pos:start="174:21" pos:end="174:23">= <expr pos:start="174:23" pos:end="174:23"><literal type="number" pos:start="174:23" pos:end="174:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="175:5" pos:end="175:32"><decl pos:start="175:5" pos:end="175:31"><type pos:start="175:5" pos:end="175:13"><name pos:start="175:5" pos:end="175:13">EST_ERROR</name></type> <name pos:start="175:15" pos:end="175:16">rc</name> <init pos:start="175:18" pos:end="175:31">= <expr pos:start="175:20" pos:end="175:31"><name pos:start="175:20" pos:end="175:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="176:5" pos:end="176:44"><decl pos:start="176:5" pos:end="176:43"><type pos:start="176:5" pos:end="176:19"><name pos:start="176:5" pos:end="176:12">unsigned</name> <name pos:start="176:14" pos:end="176:17">char</name> <modifier pos:start="176:19" pos:end="176:19">*</modifier></type><name pos:start="176:20" pos:end="176:36">retrieved_cacerts</name> <init pos:start="176:38" pos:end="176:43">= <expr pos:start="176:40" pos:end="176:43"><name pos:start="176:40" pos:end="176:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="177:5" pos:end="177:34"><decl pos:start="177:5" pos:end="177:33"><type pos:start="177:5" pos:end="177:7"><name pos:start="177:5" pos:end="177:7">int</name></type> <name pos:start="177:9" pos:end="177:29">retrieved_cacerts_len</name> <init pos:start="177:31" pos:end="177:33">= <expr pos:start="177:33" pos:end="177:33"><literal type="number" pos:start="177:33" pos:end="177:33">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="178:5" pos:end="178:23"><decl pos:start="178:5" pos:end="178:22"><type pos:start="178:5" pos:end="178:14"><name pos:start="178:5" pos:end="178:12">EVP_PKEY</name> <modifier pos:start="178:14" pos:end="178:14">*</modifier></type><name pos:start="178:15" pos:end="178:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="180:5" pos:end="180:13"><expr pos:start="180:5" pos:end="180:12"><call pos:start="180:5" pos:end="180:12"><name pos:start="180:5" pos:end="180:9">SLEEP</name><argument_list pos:start="180:10" pos:end="180:12">(<argument pos:start="180:11" pos:end="180:11"><expr pos:start="180:11" pos:end="180:11"><literal type="number" pos:start="180:11" pos:end="180:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="182:5" pos:end="183:5"><expr pos:start="182:5" pos:end="182:15"><name pos:start="182:5" pos:end="182:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="185:5" pos:end="187:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="188:5" pos:end="188:63"><expr pos:start="188:5" pos:end="188:62"><name pos:start="188:5" pos:end="188:15">cacerts_len</name> <operator pos:start="188:17" pos:end="188:17">=</operator> <call pos:start="188:19" pos:end="188:62"><name pos:start="188:19" pos:end="188:34">read_binary_file</name><argument_list pos:start="188:35" pos:end="188:62">(<argument pos:start="188:36" pos:end="188:51"><expr pos:start="188:36" pos:end="188:51"><name pos:start="188:36" pos:end="188:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="188:54" pos:end="188:61"><expr pos:start="188:54" pos:end="188:61"><operator pos:start="188:54" pos:end="188:54">&amp;</operator><name pos:start="188:55" pos:end="188:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="189:5" pos:end="189:31"><expr pos:start="189:5" pos:end="189:30"><call pos:start="189:5" pos:end="189:30"><name pos:start="189:5" pos:end="189:13">CU_ASSERT</name><argument_list pos:start="189:14" pos:end="189:30">(<argument pos:start="189:15" pos:end="189:29"><expr pos:start="189:15" pos:end="189:29"><name pos:start="189:15" pos:end="189:25">cacerts_len</name> <operator pos:start="189:27" pos:end="189:27">&gt;</operator> <literal type="number" pos:start="189:29" pos:end="189:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="191:5" pos:end="193:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="194:5" pos:end="194:50"><expr pos:start="194:5" pos:end="194:49"><name pos:start="194:5" pos:end="194:12">priv_key</name> <operator pos:start="194:14" pos:end="194:14">=</operator> <call pos:start="194:16" pos:end="194:49"><name pos:start="194:16" pos:end="194:31">read_private_key</name><argument_list pos:start="194:32" pos:end="194:49">(<argument pos:start="194:33" pos:end="194:48"><expr pos:start="194:33" pos:end="194:48"><name pos:start="194:33" pos:end="194:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="195:5" pos:end="198:5"><if pos:start="195:5" pos:end="198:5">if <condition pos:start="195:8" pos:end="195:25">(<expr pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:16">priv_key</name> <operator pos:start="195:18" pos:end="195:19">==</operator> <name pos:start="195:21" pos:end="195:24">NULL</name></expr>)</condition> <block pos:start="195:27" pos:end="198:5">{<block_content pos:start="196:9" pos:end="197:15">
        <expr_stmt pos:start="196:9" pos:end="196:80"><expr pos:start="196:9" pos:end="196:79"><call pos:start="196:9" pos:end="196:79"><name pos:start="196:9" pos:end="196:14">printf</name><argument_list pos:start="196:15" pos:end="196:79">(<argument pos:start="196:16" pos:end="196:60"><expr pos:start="196:16" pos:end="196:60"><literal type="string" pos:start="196:16" pos:end="196:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="196:63" pos:end="196:78"><expr pos:start="196:63" pos:end="196:78"><name pos:start="196:63" pos:end="196:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="197:9" pos:end="197:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="200:5" pos:end="201:39"><expr pos:start="200:5" pos:end="201:38"><name pos:start="200:5" pos:end="200:7">ctx</name> <operator pos:start="200:9" pos:end="200:9">=</operator> <call pos:start="200:11" pos:end="201:38"><name pos:start="200:11" pos:end="200:25">est_client_init</name><argument_list pos:start="200:26" pos:end="201:38">(<argument pos:start="200:27" pos:end="200:33"><expr pos:start="200:27" pos:end="200:33"><name pos:start="200:27" pos:end="200:33">cacerts</name></expr></argument>, <argument pos:start="200:36" pos:end="200:46"><expr pos:start="200:36" pos:end="200:46"><name pos:start="200:36" pos:end="200:46">cacerts_len</name></expr></argument>, <argument pos:start="200:49" pos:end="200:67"><expr pos:start="200:49" pos:end="200:67"><name pos:start="200:49" pos:end="200:67">EST_CERT_FORMAT_PEM</name></expr></argument>,
            <argument pos:start="201:13" pos:end="201:37"><expr pos:start="201:13" pos:end="201:37"><name pos:start="201:13" pos:end="201:37">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="202:5" pos:end="202:27"><expr pos:start="202:5" pos:end="202:26"><call pos:start="202:5" pos:end="202:26"><name pos:start="202:5" pos:end="202:13">CU_ASSERT</name><argument_list pos:start="202:14" pos:end="202:26">(<argument pos:start="202:15" pos:end="202:25"><expr pos:start="202:15" pos:end="202:25"><name pos:start="202:15" pos:end="202:17">ctx</name> <operator pos:start="202:19" pos:end="202:20">!=</operator> <name pos:start="202:22" pos:end="202:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="204:5" pos:end="204:58"><expr pos:start="204:5" pos:end="204:57"><name pos:start="204:5" pos:end="204:6">rc</name> <operator pos:start="204:8" pos:end="204:8">=</operator> <call pos:start="204:10" pos:end="204:57"><name pos:start="204:10" pos:end="204:28">est_client_set_auth</name><argument_list pos:start="204:29" pos:end="204:57">(<argument pos:start="204:30" pos:end="204:32"><expr pos:start="204:30" pos:end="204:32"><name pos:start="204:30" pos:end="204:32">ctx</name></expr></argument>, <argument pos:start="204:35" pos:end="204:36"><expr pos:start="204:35" pos:end="204:36"><literal type="string" pos:start="204:35" pos:end="204:36">""</literal></expr></argument>, <argument pos:start="204:39" pos:end="204:40"><expr pos:start="204:39" pos:end="204:40"><literal type="string" pos:start="204:39" pos:end="204:40">""</literal></expr></argument>, <argument pos:start="204:43" pos:end="204:46"><expr pos:start="204:43" pos:end="204:46"><name pos:start="204:43" pos:end="204:46">NULL</name></expr></argument>, <argument pos:start="204:49" pos:end="204:56"><expr pos:start="204:49" pos:end="204:56"><name pos:start="204:49" pos:end="204:56">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="205:5" pos:end="205:34"><expr pos:start="205:5" pos:end="205:33"><call pos:start="205:5" pos:end="205:33"><name pos:start="205:5" pos:end="205:13">CU_ASSERT</name><argument_list pos:start="205:14" pos:end="205:33">(<argument pos:start="205:15" pos:end="205:32"><expr pos:start="205:15" pos:end="205:32"><name pos:start="205:15" pos:end="205:16">rc</name> <operator pos:start="205:18" pos:end="205:19">==</operator> <name pos:start="205:21" pos:end="205:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:73"><expr pos:start="207:5" pos:end="207:72"><call pos:start="207:5" pos:end="207:72"><name pos:start="207:5" pos:end="207:25">est_client_set_server</name><argument_list pos:start="207:26" pos:end="207:72">(<argument pos:start="207:27" pos:end="207:29"><expr pos:start="207:27" pos:end="207:29"><name pos:start="207:27" pos:end="207:29">ctx</name></expr></argument>, <argument pos:start="207:32" pos:end="207:46"><expr pos:start="207:32" pos:end="207:46"><name pos:start="207:32" pos:end="207:46">US896_SERVER_IP</name></expr></argument>, <argument pos:start="207:49" pos:end="207:65"><expr pos:start="207:49" pos:end="207:65"><name pos:start="207:49" pos:end="207:65">US896_SERVER_PORT</name></expr></argument>, <argument pos:start="207:68" pos:end="207:71"><expr pos:start="207:68" pos:end="207:71"><name pos:start="207:68" pos:end="207:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="209:5" pos:end="211:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="212:5" pos:end="212:61"><expr pos:start="212:5" pos:end="212:60"><name pos:start="212:5" pos:end="212:6">rc</name> <operator pos:start="212:8" pos:end="212:8">=</operator> <call pos:start="212:10" pos:end="212:60"><name pos:start="212:10" pos:end="212:31">est_client_get_cacerts</name><argument_list pos:start="212:32" pos:end="212:60">(<argument pos:start="212:33" pos:end="212:35"><expr pos:start="212:33" pos:end="212:35"><name pos:start="212:33" pos:end="212:35">ctx</name></expr></argument>, <argument pos:start="212:38" pos:end="212:59"><expr pos:start="212:38" pos:end="212:59"><operator pos:start="212:38" pos:end="212:38">&amp;</operator><name pos:start="212:39" pos:end="212:59">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="213:5" pos:end="216:7">/*
     * should be successful, and should have obtained a valid buffer
     * containing the CA certs
     */</comment>
    <expr_stmt pos:start="217:5" pos:end="217:34"><expr pos:start="217:5" pos:end="217:33"><call pos:start="217:5" pos:end="217:33"><name pos:start="217:5" pos:end="217:13">CU_ASSERT</name><argument_list pos:start="217:14" pos:end="217:33">(<argument pos:start="217:15" pos:end="217:32"><expr pos:start="217:15" pos:end="217:32"><name pos:start="217:15" pos:end="217:16">rc</name> <operator pos:start="217:18" pos:end="217:19">==</operator> <name pos:start="217:21" pos:end="217:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="218:5" pos:end="218:41"><expr pos:start="218:5" pos:end="218:40"><call pos:start="218:5" pos:end="218:40"><name pos:start="218:5" pos:end="218:13">CU_ASSERT</name><argument_list pos:start="218:14" pos:end="218:40">(<argument pos:start="218:15" pos:end="218:39"><expr pos:start="218:15" pos:end="218:39"><name pos:start="218:15" pos:end="218:35">retrieved_cacerts_len</name> <operator pos:start="218:37" pos:end="218:37">&gt;</operator> <literal type="number" pos:start="218:39" pos:end="218:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="220:5" pos:end="220:54"><expr pos:start="220:5" pos:end="220:53"><name pos:start="220:5" pos:end="220:21">retrieved_cacerts</name> <operator pos:start="220:23" pos:end="220:23">=</operator> <call pos:start="220:25" pos:end="220:53"><name pos:start="220:25" pos:end="220:30">malloc</name><argument_list pos:start="220:31" pos:end="220:53">(<argument pos:start="220:32" pos:end="220:52"><expr pos:start="220:32" pos:end="220:52"><name pos:start="220:32" pos:end="220:52">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="222:5" pos:end="222:57"><expr pos:start="222:5" pos:end="222:56"><name pos:start="222:5" pos:end="222:6">rc</name> <operator pos:start="222:8" pos:end="222:8">=</operator> <call pos:start="222:10" pos:end="222:56"><name pos:start="222:10" pos:end="222:32">est_client_copy_cacerts</name><argument_list pos:start="222:33" pos:end="222:56">(<argument pos:start="222:34" pos:end="222:36"><expr pos:start="222:34" pos:end="222:36"><name pos:start="222:34" pos:end="222:36">ctx</name></expr></argument>, <argument pos:start="222:39" pos:end="222:55"><expr pos:start="222:39" pos:end="222:55"><name pos:start="222:39" pos:end="222:55">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="224:5" pos:end="226:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>
    <if_stmt pos:start="227:5" pos:end="231:5"><if pos:start="227:5" pos:end="231:5">if <condition pos:start="227:8" pos:end="227:26">(<expr pos:start="227:9" pos:end="227:25"><name pos:start="227:9" pos:end="227:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="227:28" pos:end="231:5">{<block_content pos:start="229:9" pos:end="230:80">

        <expr_stmt pos:start="229:9" pos:end="229:73"><expr pos:start="229:9" pos:end="229:72"><call pos:start="229:9" pos:end="229:72"><name pos:start="229:9" pos:end="229:14">printf</name><argument_list pos:start="229:15" pos:end="229:72">(<argument pos:start="229:16" pos:end="229:52"><expr pos:start="229:16" pos:end="229:52"><literal type="string" pos:start="229:16" pos:end="229:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="229:55" pos:end="229:71"><expr pos:start="229:55" pos:end="229:71"><name pos:start="229:55" pos:end="229:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="230:9" pos:end="230:80"><expr pos:start="230:9" pos:end="230:79"><call pos:start="230:9" pos:end="230:79"><name pos:start="230:9" pos:end="230:14">printf</name><argument_list pos:start="230:15" pos:end="230:79">(<argument pos:start="230:16" pos:end="230:55"><expr pos:start="230:16" pos:end="230:55"><literal type="string" pos:start="230:16" pos:end="230:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="230:58" pos:end="230:78"><expr pos:start="230:58" pos:end="230:78"><name pos:start="230:58" pos:end="230:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="232:5" pos:end="240:0"><expr pos:start="232:5" pos:end="232:27"><call pos:start="232:5" pos:end="232:27"><name pos:start="232:5" pos:end="232:8">free</name><argument_list pos:start="232:9" pos:end="232:27">(<argument pos:start="232:10" pos:end="232:26"><expr pos:start="232:10" pos:end="232:26"><name pos:start="232:10" pos:end="232:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="234:5" pos:end="238:7">/* 
     * All of these are negative tests and require that code in the
     * EST server is modified such that it will allow bad/corrupted
     * attributes to be initialized so they can be sent to the client.
     */</comment>
<cpp:ifdef pos:start="239:1" pos:end="239:25">#<cpp:directive pos:start="239:2" pos:end="239:6">ifdef</cpp:directive> <name pos:start="239:8" pos:end="239:25">NEGATIVE_UNIT_TEST</name></cpp:ifdef>
    <decl_stmt pos:start="240:5" pos:end="240:28"><decl pos:start="240:5" pos:end="240:27"><type pos:start="240:5" pos:end="240:19"><name pos:start="240:5" pos:end="240:12">unsigned</name> <name pos:start="240:14" pos:end="240:17">char</name> <modifier pos:start="240:19" pos:end="240:19">*</modifier></type><name pos:start="240:20" pos:end="240:27">csr_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="241:5" pos:end="241:16"><decl pos:start="241:5" pos:end="241:15"><type pos:start="241:5" pos:end="241:7"><name pos:start="241:5" pos:end="241:7">int</name></type> <name pos:start="241:9" pos:end="241:15">csr_len</name></decl>;</decl_stmt>

    <comment type="block" pos:start="243:5" pos:end="243:24">/* clear callback */</comment>
    <if_stmt pos:start="244:5" pos:end="247:5"><if pos:start="244:5" pos:end="247:5">if <condition pos:start="244:8" pos:end="244:35">(<expr pos:start="244:9" pos:end="244:34"><call pos:start="244:9" pos:end="244:34"><name pos:start="244:9" pos:end="244:22">est_set_csr_cb</name><argument_list pos:start="244:23" pos:end="244:34">(<argument pos:start="244:24" pos:end="244:27"><expr pos:start="244:24" pos:end="244:27"><name pos:start="244:24" pos:end="244:27">ectx</name></expr></argument>, <argument pos:start="244:30" pos:end="244:33"><expr pos:start="244:30" pos:end="244:33"><name pos:start="244:30" pos:end="244:33">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="244:37" pos:end="247:5">{<block_content pos:start="245:9" pos:end="246:16">
        <expr_stmt pos:start="245:9" pos:end="245:78"><expr pos:start="245:9" pos:end="245:77"><call pos:start="245:9" pos:end="245:77"><name pos:start="245:9" pos:end="245:14">printf</name><argument_list pos:start="245:15" pos:end="245:77">(<argument pos:start="245:16" pos:end="245:76"><expr pos:start="245:16" pos:end="245:76"><literal type="string" pos:start="245:16" pos:end="245:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="246:9" pos:end="246:16"><expr pos:start="246:9" pos:end="246:15"><call pos:start="246:9" pos:end="246:15"><name pos:start="246:9" pos:end="246:12">exit</name><argument_list pos:start="246:13" pos:end="246:15">(<argument pos:start="246:14" pos:end="246:14"><expr pos:start="246:14" pos:end="246:14"><literal type="number" pos:start="246:14" pos:end="246:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:88"><expr pos:start="249:5" pos:end="249:87"><name pos:start="249:5" pos:end="249:6">rc</name> <operator pos:start="249:8" pos:end="249:8">=</operator> <call pos:start="249:10" pos:end="249:87"><name pos:start="249:10" pos:end="249:33">est_server_init_csrattrs</name><argument_list pos:start="249:34" pos:end="249:87">(<argument pos:start="249:35" pos:end="249:38"><expr pos:start="249:35" pos:end="249:38"><name pos:start="249:35" pos:end="249:38">ectx</name></expr></argument>, <argument pos:start="249:41" pos:end="249:58"><expr pos:start="249:41" pos:end="249:58"><name pos:start="249:41" pos:end="249:58">TEST_CORRUPT_ATTR1</name></expr></argument>, <argument pos:start="249:61" pos:end="249:86"><expr pos:start="249:61" pos:end="249:86"><call pos:start="249:61" pos:end="249:86"><name pos:start="249:61" pos:end="249:66">strlen</name><argument_list pos:start="249:67" pos:end="249:86">(<argument pos:start="249:68" pos:end="249:85"><expr pos:start="249:68" pos:end="249:85"><name pos:start="249:68" pos:end="249:85">TEST_CORRUPT_ATTR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="250:5" pos:end="250:34"><expr pos:start="250:5" pos:end="250:33"><call pos:start="250:5" pos:end="250:33"><name pos:start="250:5" pos:end="250:13">CU_ASSERT</name><argument_list pos:start="250:14" pos:end="250:33">(<argument pos:start="250:15" pos:end="250:32"><expr pos:start="250:15" pos:end="250:32"><name pos:start="250:15" pos:end="250:16">rc</name> <operator pos:start="250:18" pos:end="250:19">==</operator> <name pos:start="250:21" pos:end="250:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="252:5" pos:end="252:59"><expr pos:start="252:5" pos:end="252:58"><name pos:start="252:5" pos:end="252:6">rc</name> <operator pos:start="252:8" pos:end="252:8">=</operator> <call pos:start="252:10" pos:end="252:58"><name pos:start="252:10" pos:end="252:32">est_client_get_csrattrs</name><argument_list pos:start="252:33" pos:end="252:58">(<argument pos:start="252:34" pos:end="252:36"><expr pos:start="252:34" pos:end="252:36"><name pos:start="252:34" pos:end="252:36">ctx</name></expr></argument>, <argument pos:start="252:39" pos:end="252:47"><expr pos:start="252:39" pos:end="252:47"><operator pos:start="252:39" pos:end="252:39">&amp;</operator><name pos:start="252:40" pos:end="252:47">csr_data</name></expr></argument>, <argument pos:start="252:50" pos:end="252:57"><expr pos:start="252:50" pos:end="252:57"><operator pos:start="252:50" pos:end="252:50">&amp;</operator><name pos:start="252:51" pos:end="252:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="253:5" pos:end="253:34"><expr pos:start="253:5" pos:end="253:33"><call pos:start="253:5" pos:end="253:33"><name pos:start="253:5" pos:end="253:13">CU_ASSERT</name><argument_list pos:start="253:14" pos:end="253:33">(<argument pos:start="253:15" pos:end="253:32"><expr pos:start="253:15" pos:end="253:32"><name pos:start="253:15" pos:end="253:16">rc</name> <operator pos:start="253:18" pos:end="253:19">!=</operator> <name pos:start="253:21" pos:end="253:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="254:5" pos:end="254:28"><expr pos:start="254:5" pos:end="254:27"><call pos:start="254:5" pos:end="254:27"><name pos:start="254:5" pos:end="254:13">CU_ASSERT</name><argument_list pos:start="254:14" pos:end="254:27">(<argument pos:start="254:15" pos:end="254:26"><expr pos:start="254:15" pos:end="254:26"><name pos:start="254:15" pos:end="254:21">csr_len</name> <operator pos:start="254:23" pos:end="254:24">==</operator> <literal type="number" pos:start="254:26" pos:end="254:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="255:5" pos:end="255:32"><expr pos:start="255:5" pos:end="255:31"><call pos:start="255:5" pos:end="255:31"><name pos:start="255:5" pos:end="255:13">CU_ASSERT</name><argument_list pos:start="255:14" pos:end="255:31">(<argument pos:start="255:15" pos:end="255:30"><expr pos:start="255:15" pos:end="255:30"><name pos:start="255:15" pos:end="255:22">csr_data</name> <operator pos:start="255:24" pos:end="255:25">==</operator> <name pos:start="255:27" pos:end="255:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:88"><expr pos:start="257:5" pos:end="257:87"><name pos:start="257:5" pos:end="257:6">rc</name> <operator pos:start="257:8" pos:end="257:8">=</operator> <call pos:start="257:10" pos:end="257:87"><name pos:start="257:10" pos:end="257:33">est_server_init_csrattrs</name><argument_list pos:start="257:34" pos:end="257:87">(<argument pos:start="257:35" pos:end="257:38"><expr pos:start="257:35" pos:end="257:38"><name pos:start="257:35" pos:end="257:38">ectx</name></expr></argument>, <argument pos:start="257:41" pos:end="257:58"><expr pos:start="257:41" pos:end="257:58"><name pos:start="257:41" pos:end="257:58">TEST_CORRUPT_ATTR2</name></expr></argument>, <argument pos:start="257:61" pos:end="257:86"><expr pos:start="257:61" pos:end="257:86"><call pos:start="257:61" pos:end="257:86"><name pos:start="257:61" pos:end="257:66">strlen</name><argument_list pos:start="257:67" pos:end="257:86">(<argument pos:start="257:68" pos:end="257:85"><expr pos:start="257:68" pos:end="257:85"><name pos:start="257:68" pos:end="257:85">TEST_CORRUPT_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="258:5" pos:end="258:34"><expr pos:start="258:5" pos:end="258:33"><call pos:start="258:5" pos:end="258:33"><name pos:start="258:5" pos:end="258:13">CU_ASSERT</name><argument_list pos:start="258:14" pos:end="258:33">(<argument pos:start="258:15" pos:end="258:32"><expr pos:start="258:15" pos:end="258:32"><name pos:start="258:15" pos:end="258:16">rc</name> <operator pos:start="258:18" pos:end="258:19">==</operator> <name pos:start="258:21" pos:end="258:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="260:5" pos:end="260:59"><expr pos:start="260:5" pos:end="260:58"><name pos:start="260:5" pos:end="260:6">rc</name> <operator pos:start="260:8" pos:end="260:8">=</operator> <call pos:start="260:10" pos:end="260:58"><name pos:start="260:10" pos:end="260:32">est_client_get_csrattrs</name><argument_list pos:start="260:33" pos:end="260:58">(<argument pos:start="260:34" pos:end="260:36"><expr pos:start="260:34" pos:end="260:36"><name pos:start="260:34" pos:end="260:36">ctx</name></expr></argument>, <argument pos:start="260:39" pos:end="260:47"><expr pos:start="260:39" pos:end="260:47"><operator pos:start="260:39" pos:end="260:39">&amp;</operator><name pos:start="260:40" pos:end="260:47">csr_data</name></expr></argument>, <argument pos:start="260:50" pos:end="260:57"><expr pos:start="260:50" pos:end="260:57"><operator pos:start="260:50" pos:end="260:50">&amp;</operator><name pos:start="260:51" pos:end="260:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="261:5" pos:end="261:34"><expr pos:start="261:5" pos:end="261:33"><call pos:start="261:5" pos:end="261:33"><name pos:start="261:5" pos:end="261:13">CU_ASSERT</name><argument_list pos:start="261:14" pos:end="261:33">(<argument pos:start="261:15" pos:end="261:32"><expr pos:start="261:15" pos:end="261:32"><name pos:start="261:15" pos:end="261:16">rc</name> <operator pos:start="261:18" pos:end="261:19">!=</operator> <name pos:start="261:21" pos:end="261:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="262:5" pos:end="262:28"><expr pos:start="262:5" pos:end="262:27"><call pos:start="262:5" pos:end="262:27"><name pos:start="262:5" pos:end="262:13">CU_ASSERT</name><argument_list pos:start="262:14" pos:end="262:27">(<argument pos:start="262:15" pos:end="262:26"><expr pos:start="262:15" pos:end="262:26"><name pos:start="262:15" pos:end="262:21">csr_len</name> <operator pos:start="262:23" pos:end="262:24">==</operator> <literal type="number" pos:start="262:26" pos:end="262:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="263:5" pos:end="263:32"><expr pos:start="263:5" pos:end="263:31"><call pos:start="263:5" pos:end="263:31"><name pos:start="263:5" pos:end="263:13">CU_ASSERT</name><argument_list pos:start="263:14" pos:end="263:31">(<argument pos:start="263:15" pos:end="263:30"><expr pos:start="263:15" pos:end="263:30"><name pos:start="263:15" pos:end="263:22">csr_data</name> <operator pos:start="263:24" pos:end="263:25">==</operator> <name pos:start="263:27" pos:end="263:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:82"><expr pos:start="265:5" pos:end="265:81"><name pos:start="265:5" pos:end="265:6">rc</name> <operator pos:start="265:8" pos:end="265:8">=</operator> <call pos:start="265:10" pos:end="265:81"><name pos:start="265:10" pos:end="265:33">est_server_init_csrattrs</name><argument_list pos:start="265:34" pos:end="265:81">(<argument pos:start="265:35" pos:end="265:38"><expr pos:start="265:35" pos:end="265:38"><name pos:start="265:35" pos:end="265:38">ectx</name></expr></argument>, <argument pos:start="265:41" pos:end="265:55"><expr pos:start="265:41" pos:end="265:55"><name pos:start="265:41" pos:end="265:55">TEST_SHORT_ATTR</name></expr></argument>, <argument pos:start="265:58" pos:end="265:80"><expr pos:start="265:58" pos:end="265:80"><call pos:start="265:58" pos:end="265:80"><name pos:start="265:58" pos:end="265:63">strlen</name><argument_list pos:start="265:64" pos:end="265:80">(<argument pos:start="265:65" pos:end="265:79"><expr pos:start="265:65" pos:end="265:79"><name pos:start="265:65" pos:end="265:79">TEST_SHORT_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="266:5" pos:end="266:34"><expr pos:start="266:5" pos:end="266:33"><call pos:start="266:5" pos:end="266:33"><name pos:start="266:5" pos:end="266:13">CU_ASSERT</name><argument_list pos:start="266:14" pos:end="266:33">(<argument pos:start="266:15" pos:end="266:32"><expr pos:start="266:15" pos:end="266:32"><name pos:start="266:15" pos:end="266:16">rc</name> <operator pos:start="266:18" pos:end="266:19">==</operator> <name pos:start="266:21" pos:end="266:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="268:5" pos:end="268:59"><expr pos:start="268:5" pos:end="268:58"><name pos:start="268:5" pos:end="268:6">rc</name> <operator pos:start="268:8" pos:end="268:8">=</operator> <call pos:start="268:10" pos:end="268:58"><name pos:start="268:10" pos:end="268:32">est_client_get_csrattrs</name><argument_list pos:start="268:33" pos:end="268:58">(<argument pos:start="268:34" pos:end="268:36"><expr pos:start="268:34" pos:end="268:36"><name pos:start="268:34" pos:end="268:36">ctx</name></expr></argument>, <argument pos:start="268:39" pos:end="268:47"><expr pos:start="268:39" pos:end="268:47"><operator pos:start="268:39" pos:end="268:39">&amp;</operator><name pos:start="268:40" pos:end="268:47">csr_data</name></expr></argument>, <argument pos:start="268:50" pos:end="268:57"><expr pos:start="268:50" pos:end="268:57"><operator pos:start="268:50" pos:end="268:50">&amp;</operator><name pos:start="268:51" pos:end="268:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:34"><expr pos:start="269:5" pos:end="269:33"><call pos:start="269:5" pos:end="269:33"><name pos:start="269:5" pos:end="269:13">CU_ASSERT</name><argument_list pos:start="269:14" pos:end="269:33">(<argument pos:start="269:15" pos:end="269:32"><expr pos:start="269:15" pos:end="269:32"><name pos:start="269:15" pos:end="269:16">rc</name> <operator pos:start="269:18" pos:end="269:19">!=</operator> <name pos:start="269:21" pos:end="269:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="270:5" pos:end="270:28"><expr pos:start="270:5" pos:end="270:27"><call pos:start="270:5" pos:end="270:27"><name pos:start="270:5" pos:end="270:13">CU_ASSERT</name><argument_list pos:start="270:14" pos:end="270:27">(<argument pos:start="270:15" pos:end="270:26"><expr pos:start="270:15" pos:end="270:26"><name pos:start="270:15" pos:end="270:21">csr_len</name> <operator pos:start="270:23" pos:end="270:24">==</operator> <literal type="number" pos:start="270:26" pos:end="270:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="271:5" pos:end="271:32"><expr pos:start="271:5" pos:end="271:31"><call pos:start="271:5" pos:end="271:31"><name pos:start="271:5" pos:end="271:13">CU_ASSERT</name><argument_list pos:start="271:14" pos:end="271:31">(<argument pos:start="271:15" pos:end="271:30"><expr pos:start="271:15" pos:end="271:30"><name pos:start="271:15" pos:end="271:22">csr_data</name> <operator pos:start="271:24" pos:end="271:25">==</operator> <name pos:start="271:27" pos:end="271:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:80"><expr pos:start="273:5" pos:end="273:79"><name pos:start="273:5" pos:end="273:6">rc</name> <operator pos:start="273:8" pos:end="273:8">=</operator> <call pos:start="273:10" pos:end="273:79"><name pos:start="273:10" pos:end="273:33">est_server_init_csrattrs</name><argument_list pos:start="273:34" pos:end="273:79">(<argument pos:start="273:35" pos:end="273:38"><expr pos:start="273:35" pos:end="273:38"><name pos:start="273:35" pos:end="273:38">ectx</name></expr></argument>, <argument pos:start="273:41" pos:end="273:54"><expr pos:start="273:41" pos:end="273:54"><name pos:start="273:41" pos:end="273:54">TEST_LONG_ATTR</name></expr></argument>, <argument pos:start="273:57" pos:end="273:78"><expr pos:start="273:57" pos:end="273:78"><call pos:start="273:57" pos:end="273:78"><name pos:start="273:57" pos:end="273:62">strlen</name><argument_list pos:start="273:63" pos:end="273:78">(<argument pos:start="273:64" pos:end="273:77"><expr pos:start="273:64" pos:end="273:77"><name pos:start="273:64" pos:end="273:77">TEST_LONG_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="274:5" pos:end="274:34"><expr pos:start="274:5" pos:end="274:33"><call pos:start="274:5" pos:end="274:33"><name pos:start="274:5" pos:end="274:13">CU_ASSERT</name><argument_list pos:start="274:14" pos:end="274:33">(<argument pos:start="274:15" pos:end="274:32"><expr pos:start="274:15" pos:end="274:32"><name pos:start="274:15" pos:end="274:16">rc</name> <operator pos:start="274:18" pos:end="274:19">==</operator> <name pos:start="274:21" pos:end="274:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="276:5" pos:end="276:59"><expr pos:start="276:5" pos:end="276:58"><name pos:start="276:5" pos:end="276:6">rc</name> <operator pos:start="276:8" pos:end="276:8">=</operator> <call pos:start="276:10" pos:end="276:58"><name pos:start="276:10" pos:end="276:32">est_client_get_csrattrs</name><argument_list pos:start="276:33" pos:end="276:58">(<argument pos:start="276:34" pos:end="276:36"><expr pos:start="276:34" pos:end="276:36"><name pos:start="276:34" pos:end="276:36">ctx</name></expr></argument>, <argument pos:start="276:39" pos:end="276:47"><expr pos:start="276:39" pos:end="276:47"><operator pos:start="276:39" pos:end="276:39">&amp;</operator><name pos:start="276:40" pos:end="276:47">csr_data</name></expr></argument>, <argument pos:start="276:50" pos:end="276:57"><expr pos:start="276:50" pos:end="276:57"><operator pos:start="276:50" pos:end="276:50">&amp;</operator><name pos:start="276:51" pos:end="276:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="277:5" pos:end="277:34"><expr pos:start="277:5" pos:end="277:33"><call pos:start="277:5" pos:end="277:33"><name pos:start="277:5" pos:end="277:13">CU_ASSERT</name><argument_list pos:start="277:14" pos:end="277:33">(<argument pos:start="277:15" pos:end="277:32"><expr pos:start="277:15" pos:end="277:32"><name pos:start="277:15" pos:end="277:16">rc</name> <operator pos:start="277:18" pos:end="277:19">!=</operator> <name pos:start="277:21" pos:end="277:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="278:5" pos:end="278:28"><expr pos:start="278:5" pos:end="278:27"><call pos:start="278:5" pos:end="278:27"><name pos:start="278:5" pos:end="278:13">CU_ASSERT</name><argument_list pos:start="278:14" pos:end="278:27">(<argument pos:start="278:15" pos:end="278:26"><expr pos:start="278:15" pos:end="278:26"><name pos:start="278:15" pos:end="278:21">csr_len</name> <operator pos:start="278:23" pos:end="278:24">==</operator> <literal type="number" pos:start="278:26" pos:end="278:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="279:5" pos:end="282:0"><expr pos:start="279:5" pos:end="279:31"><call pos:start="279:5" pos:end="279:31"><name pos:start="279:5" pos:end="279:13">CU_ASSERT</name><argument_list pos:start="279:14" pos:end="279:31">(<argument pos:start="279:15" pos:end="279:30"><expr pos:start="279:15" pos:end="279:30"><name pos:start="279:15" pos:end="279:22">csr_data</name> <operator pos:start="279:24" pos:end="279:25">==</operator> <name pos:start="279:27" pos:end="279:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="281:1" pos:end="281:6">#<cpp:directive pos:start="281:2" pos:end="281:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="283:5" pos:end="285:5"><if pos:start="283:5" pos:end="285:5">if <condition pos:start="283:8" pos:end="283:12">(<expr pos:start="283:9" pos:end="283:11"><name pos:start="283:9" pos:end="283:11">ctx</name></expr>)</condition> <block pos:start="283:14" pos:end="285:5">{<block_content pos:start="284:9" pos:end="284:25">
        <expr_stmt pos:start="284:9" pos:end="284:25"><expr pos:start="284:9" pos:end="284:24"><call pos:start="284:9" pos:end="284:24"><name pos:start="284:9" pos:end="284:19">est_destroy</name><argument_list pos:start="284:20" pos:end="284:24">(<argument pos:start="284:21" pos:end="284:23"><expr pos:start="284:21" pos:end="284:23"><name pos:start="284:21" pos:end="284:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="286:5" pos:end="288:5"><if pos:start="286:5" pos:end="288:5">if <condition pos:start="286:8" pos:end="286:16">(<expr pos:start="286:9" pos:end="286:15"><name pos:start="286:9" pos:end="286:15">cacerts</name></expr>)</condition> <block pos:start="286:18" pos:end="288:5">{<block_content pos:start="287:9" pos:end="287:22">
        <expr_stmt pos:start="287:9" pos:end="287:22"><expr pos:start="287:9" pos:end="287:21"><call pos:start="287:9" pos:end="287:21"><name pos:start="287:9" pos:end="287:12">free</name><argument_list pos:start="287:13" pos:end="287:21">(<argument pos:start="287:14" pos:end="287:20"><expr pos:start="287:14" pos:end="287:20"><name pos:start="287:14" pos:end="287:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="289:5" pos:end="291:5"><if pos:start="289:5" pos:end="291:5">if <condition pos:start="289:8" pos:end="289:13">(<expr pos:start="289:9" pos:end="289:12"><name pos:start="289:9" pos:end="289:12">pkey</name></expr>)</condition> <block pos:start="289:15" pos:end="291:5">{<block_content pos:start="290:9" pos:end="290:19">
        <expr_stmt pos:start="290:9" pos:end="290:19"><expr pos:start="290:9" pos:end="290:18"><call pos:start="290:9" pos:end="290:18"><name pos:start="290:9" pos:end="290:12">free</name><argument_list pos:start="290:13" pos:end="290:18">(<argument pos:start="290:14" pos:end="290:17"><expr pos:start="290:14" pos:end="290:17"><name pos:start="290:14" pos:end="290:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="294:1" pos:end="297:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="298:1" pos:end="321:1"><type pos:start="298:1" pos:end="298:3"><name pos:start="298:1" pos:end="298:3">int</name></type> <name pos:start="298:5" pos:end="298:19">us896_add_suite</name><parameter_list pos:start="298:20" pos:end="298:25">(<parameter pos:start="298:21" pos:end="298:24"><decl pos:start="298:21" pos:end="298:24"><type pos:start="298:21" pos:end="298:24"><name pos:start="298:21" pos:end="298:24">void</name></type></decl></parameter>)</parameter_list> <block pos:start="298:27" pos:end="321:1">{<block_content pos:start="300:5" pos:end="321:0">
<cpp:ifdef pos:start="299:1" pos:end="299:17">#<cpp:directive pos:start="299:2" pos:end="299:6">ifdef</cpp:directive> <name pos:start="299:8" pos:end="299:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="300:5" pos:end="300:28"><decl pos:start="300:5" pos:end="300:27"><type pos:start="300:5" pos:end="300:13"><name pos:start="300:5" pos:end="300:13">CU_pSuite</name></type> <name pos:start="300:15" pos:end="300:20">pSuite</name> <init pos:start="300:22" pos:end="300:27">= <expr pos:start="300:24" pos:end="300:27"><name pos:start="300:24" pos:end="300:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="302:5" pos:end="302:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="303:5" pos:end="305:33"><expr pos:start="303:5" pos:end="305:32"><name pos:start="303:5" pos:end="303:10">pSuite</name> <operator pos:start="303:12" pos:end="303:12">=</operator> <call pos:start="303:14" pos:end="305:32"><name pos:start="303:14" pos:end="303:25">CU_add_suite</name><argument_list pos:start="303:26" pos:end="305:32">(<argument pos:start="303:27" pos:end="303:49"><expr pos:start="303:27" pos:end="303:49"><literal type="string" pos:start="303:27" pos:end="303:49">"us896_client_csrattrs"</literal></expr></argument>,
            <argument pos:start="304:13" pos:end="304:28"><expr pos:start="304:13" pos:end="304:28"><name pos:start="304:13" pos:end="304:28">us896_init_suite</name></expr></argument>,
            <argument pos:start="305:13" pos:end="305:31"><expr pos:start="305:13" pos:end="305:31"><name pos:start="305:13" pos:end="305:31">us896_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="306:5" pos:end="309:5"><if pos:start="306:5" pos:end="309:5">if <condition pos:start="306:8" pos:end="306:23">(<expr pos:start="306:9" pos:end="306:22"><name pos:start="306:9" pos:end="306:12">NULL</name> <operator pos:start="306:14" pos:end="306:15">==</operator> <name pos:start="306:17" pos:end="306:22">pSuite</name></expr>)</condition> <block pos:start="306:25" pos:end="309:5">{<block_content pos:start="307:9" pos:end="308:30">
        <expr_stmt pos:start="307:9" pos:end="307:30"><expr pos:start="307:9" pos:end="307:29"><call pos:start="307:9" pos:end="307:29"><name pos:start="307:9" pos:end="307:27">CU_cleanup_registry</name><argument_list pos:start="307:28" pos:end="307:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="308:9" pos:end="308:30">return <expr pos:start="308:16" pos:end="308:29"><call pos:start="308:16" pos:end="308:29"><name pos:start="308:16" pos:end="308:27">CU_get_error</name><argument_list pos:start="308:28" pos:end="308:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="311:5" pos:end="311:36">/* add the tests to the suite */</comment>
    <if_stmt pos:start="312:5" pos:end="317:5"><if pos:start="312:5" pos:end="317:5">if <condition pos:start="312:8" pos:end="313:86">(<expr pos:start="312:9" pos:end="313:85"><operator pos:start="312:9" pos:end="312:9">(</operator><name pos:start="312:10" pos:end="312:13">NULL</name> <operator pos:start="312:15" pos:end="312:16">==</operator> <call pos:start="312:18" pos:end="312:79"><name pos:start="312:18" pos:end="312:28">CU_add_test</name><argument_list pos:start="312:29" pos:end="312:79">(<argument pos:start="312:30" pos:end="312:35"><expr pos:start="312:30" pos:end="312:35"><name pos:start="312:30" pos:end="312:35">pSuite</name></expr></argument>, <argument pos:start="312:38" pos:end="312:65"><expr pos:start="312:38" pos:end="312:65"><literal type="string" pos:start="312:38" pos:end="312:65">"CSR Client Attributes API1"</literal></expr></argument>, <argument pos:start="312:68" pos:end="312:78"><expr pos:start="312:68" pos:end="312:78"><name pos:start="312:68" pos:end="312:78">us896_test1</name></expr></argument>)</argument_list></call><operator pos:start="312:80" pos:end="312:80">)</operator> <operator pos:start="312:82" pos:end="312:83">||</operator>
            <operator pos:start="313:13" pos:end="313:13">(</operator><name pos:start="313:14" pos:end="313:17">NULL</name> <operator pos:start="313:19" pos:end="313:20">==</operator> <call pos:start="313:22" pos:end="313:84"><name pos:start="313:22" pos:end="313:32">CU_add_test</name><argument_list pos:start="313:33" pos:end="313:84">(<argument pos:start="313:34" pos:end="313:39"><expr pos:start="313:34" pos:end="313:39"><name pos:start="313:34" pos:end="313:39">pSuite</name></expr></argument>, <argument pos:start="313:42" pos:end="313:70"><expr pos:start="313:42" pos:end="313:70"><literal type="string" pos:start="313:42" pos:end="313:70">"CSR Client Attributes API2 "</literal></expr></argument>, <argument pos:start="313:73" pos:end="313:83"><expr pos:start="313:73" pos:end="313:83"><name pos:start="313:73" pos:end="313:83">us896_test2</name></expr></argument>)</argument_list></call><operator pos:start="313:85" pos:end="313:85">)</operator></expr>)</condition>
    <block pos:start="314:5" pos:end="317:5">{<block_content pos:start="315:9" pos:end="316:30">
        <expr_stmt pos:start="315:9" pos:end="315:30"><expr pos:start="315:9" pos:end="315:29"><call pos:start="315:9" pos:end="315:29"><name pos:start="315:9" pos:end="315:27">CU_cleanup_registry</name><argument_list pos:start="315:28" pos:end="315:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="316:9" pos:end="316:30">return <expr pos:start="316:16" pos:end="316:29"><call pos:start="316:16" pos:end="316:29"><name pos:start="316:16" pos:end="316:27">CU_get_error</name><argument_list pos:start="316:28" pos:end="316:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="319:5" pos:end="321:0">return <expr pos:start="319:12" pos:end="319:22"><name pos:start="319:12" pos:end="319:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="320:1" pos:end="320:6">#<cpp:directive pos:start="320:2" pos:end="320:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


</unit>
