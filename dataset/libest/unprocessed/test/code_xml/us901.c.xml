<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us901.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us901.c - Unit Tests for User Story 901 - Server cacerts
 *
 * June, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="26:1" pos:end="26:926">#<cpp:directive pos:start="26:2" pos:end="26:7">define</cpp:directive> <cpp:macro pos:start="26:9" pos:end="26:24"><name pos:start="26:9" pos:end="26:24">US901_PKCS10_REQ</name></cpp:macro>    <cpp:value pos:start="26:29" pos:end="26:926">"MIIChjCCAW4CAQAwQTElMCMGA1UEAxMccmVxIGJ5IGNsaWVudCBpbiBkZW1vIHN0\nZXAgMjEYMBYGA1UEBRMPUElEOldpZGdldCBTTjoyMIIBIjANBgkqhkiG9w0BAQEF\nAAOCAQ8AMIIBCgKCAQEA/6JUWpXXDwCkvWPDWO0yANDQzFMxroLEIh6/vdNwfRSG\neNGC0efcL5L4NxHZOmO14yqMEMGpCyHz7Ob3hhNPu0K81gMUzRqzwmmJHXwRqobA\ni59OQEkHaPhI1T4RkVnSYZLOowSqonMZjWbT0iqZDY/RD8l3GjH3gEIBMQFv62NT\n1CSu9dfHEg76+DnJAhdddUDJDXO3AWI5s7zsLlzBoPlgd4oK5K1wqEE2pqhnZxei\nc94WFqXQ1kyrW0POVlQ+32moWTQTFA7SQE2uEF+GBXsRPaEO+FLQjE8JHOewLf/T\nqX0ngywnvxKRpKguSBic31WVkswPs8E34pjjZAvdxQIDAQABoAAwDQYJKoZIhvcN\nAQEFBQADggEBAAZXVoorRxAvQPiMNDpRZHhiD5O2Yd7APBBznVgRll1HML5dpgnu\nXY7ZCYwQtxwNGYVtKJaZCiW7dWrZhvnF5ua3wUr9R2ZNoLwVR0Z9Y5wwn1cJrdSG\ncUuBN/0XBGI6g6fQlDDImQoPSF8gygcTCCHba7Uv0i8oiCiwf5UF+F3NYBoBL/PP\nlO2zBEYNQ65+W3YgfUyYP0Cr0NyXgkz3Qh2Xa2eRFeW56oejmcEaMjq6yx7WAC2X\nk3w1G6Le1UInzuenMScNgnt8FaI43eAILMdLQ/Ekxc30fjxA12RDh/YzDYiExFv0\ndPd4o5uPKt4jRitvGiAPm/OCdXiYAwqiu2w=\n"</cpp:value></cpp:define>
<cpp:define pos:start="27:1" pos:end="27:79">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:24">US901_ENROLL_URL</name></cpp:macro> <cpp:value pos:start="27:26" pos:end="27:79">"https://127.0.0.1:29901/.well-known/est/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="28:1" pos:end="28:74">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:24"><name pos:start="28:9" pos:end="28:24">US901_CACERT_URL</name></cpp:macro> <cpp:value pos:start="28:26" pos:end="28:74">"https://127.0.0.1:29901/.well-known/est/cacerts"</cpp:value></cpp:define>
<cpp:define pos:start="29:1" pos:end="29:62">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:23">US901_PKCS10_CT</name></cpp:macro>     <cpp:value pos:start="29:29" pos:end="29:62">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 
<cpp:define pos:start="30:1" pos:end="30:44">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:25"><name pos:start="30:9" pos:end="30:25">US901_UIDPWD_GOOD</name></cpp:macro>   <cpp:value pos:start="30:29" pos:end="30:44">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:define pos:start="31:1" pos:end="31:43">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:24">US901_UIDPWD_BAD</name></cpp:macro>    <cpp:value pos:start="31:29" pos:end="31:43">"estuser:bogus"</cpp:value></cpp:define>
<cpp:define pos:start="32:1" pos:end="32:31">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:25"><name pos:start="32:9" pos:end="32:25">US901_SERVER_PORT</name></cpp:macro> <cpp:value pos:start="32:27" pos:end="32:31">29901</cpp:value></cpp:define>
<cpp:ifndef pos:start="33:1" pos:end="33:13">#<cpp:directive pos:start="33:2" pos:end="33:7">ifndef</cpp:directive> <name pos:start="33:9" pos:end="33:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="34:1" pos:end="34:49">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:21"><name pos:start="34:9" pos:end="34:21">US901_CACERTS</name></cpp:macro>       <cpp:value pos:start="34:29" pos:end="34:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="35:1" pos:end="35:53">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:27">US901_EXPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="35:29" pos:end="35:53">"US901/explicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="36:1" pos:end="36:51">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:26"><name pos:start="36:9" pos:end="36:26">US901_EXPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="36:28" pos:end="36:51">"US901/explicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="37:1" pos:end="37:53">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:27">US901_IMPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="37:29" pos:end="37:53">"US901/implicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="38:1" pos:end="38:51">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:26"><name pos:start="38:9" pos:end="38:26">US901_IMPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="38:28" pos:end="38:51">"US901/implicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:51">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:26">US901_REVOKED_CERT</name></cpp:macro> <cpp:value pos:start="39:28" pos:end="39:51">"US901/revoked-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="40:1" pos:end="40:49">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:25"><name pos:start="40:9" pos:end="40:25">US901_REVOKED_KEY</name></cpp:macro> <cpp:value pos:start="40:27" pos:end="40:49">"US901/revoked-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:55">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:27">US901_SELFSIGN_CERT</name></cpp:macro> <cpp:value pos:start="41:29" pos:end="41:55">"US901/selfsigned-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="42:1" pos:end="42:53">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:26"><name pos:start="42:9" pos:end="42:26">US901_SELFSIGN_KEY</name></cpp:macro> <cpp:value pos:start="42:28" pos:end="42:53">"US901/selfsigned-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:42">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:20">US901_CACERT</name></cpp:macro> <cpp:value pos:start="43:22" pos:end="43:42">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:43">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:21"><name pos:start="44:9" pos:end="44:21">US901_EXTCERT</name></cpp:macro> <cpp:value pos:start="44:23" pos:end="44:43">"CA/extCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:68">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:25">US901_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="45:27" pos:end="45:68">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="46:1" pos:end="46:67">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:24"><name pos:start="46:9" pos:end="46:24">US901_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="46:26" pos:end="46:67">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:71">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:28">US901_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="47:30" pos:end="47:71">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<decl_stmt pos:start="48:1" pos:end="64:0"><decl pos:start="48:1" pos:end="48:59"><type pos:start="48:1" pos:end="48:11"><specifier pos:start="48:1" pos:end="48:6">static</specifier> <name pos:start="48:8" pos:end="48:11">char</name></type> <name pos:start="48:13" pos:end="48:39"><name pos:start="48:13" pos:end="48:25">test5_outfile</name><index pos:start="48:26" pos:end="48:39">[<expr pos:start="48:27" pos:end="48:38"><name pos:start="48:27" pos:end="48:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="48:41" pos:end="48:59">= <expr pos:start="48:43" pos:end="48:59"><literal type="string" pos:start="48:43" pos:end="48:59">"US901/test5.crt"</literal></expr></init></decl>;</decl_stmt>
<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="50:1" pos:end="50:51">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:21"><name pos:start="50:9" pos:end="50:21">US901_CACERTS</name></cpp:macro>       <cpp:value pos:start="50:29" pos:end="50:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:54">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:27">US901_EXPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="51:29" pos:end="51:54">"US901\\explicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="52:1" pos:end="52:52">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:26"><name pos:start="52:9" pos:end="52:26">US901_EXPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="52:28" pos:end="52:52">"US901\\explicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="53:1" pos:end="53:54">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:27">US901_IMPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="53:29" pos:end="53:54">"US901\\implicit-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="54:1" pos:end="54:52">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:26"><name pos:start="54:9" pos:end="54:26">US901_IMPLICIT_KEY</name></cpp:macro> <cpp:value pos:start="54:28" pos:end="54:52">"US901\\implicit-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:52">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:26">US901_REVOKED_CERT</name></cpp:macro> <cpp:value pos:start="55:28" pos:end="55:52">"US901\\revoked-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="56:1" pos:end="56:50">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:25"><name pos:start="56:9" pos:end="56:25">US901_REVOKED_KEY</name></cpp:macro> <cpp:value pos:start="56:27" pos:end="56:50">"US901\\revoked-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:56">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:27">US901_SELFSIGN_CERT</name></cpp:macro> <cpp:value pos:start="57:29" pos:end="57:56">"US901\\selfsigned-cert.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="58:1" pos:end="58:54">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:26"><name pos:start="58:9" pos:end="58:26">US901_SELFSIGN_KEY</name></cpp:macro> <cpp:value pos:start="58:28" pos:end="58:54">"US901\\selfsigned-key.pem"</cpp:value></cpp:define>
<cpp:define pos:start="59:1" pos:end="59:44">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:20">US901_CACERT</name></cpp:macro> <cpp:value pos:start="59:22" pos:end="59:44">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="60:1" pos:end="60:45">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:21"><name pos:start="60:9" pos:end="60:21">US901_EXTCERT</name></cpp:macro> <cpp:value pos:start="60:23" pos:end="60:45">"CA\\extCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="61:1" pos:end="61:71">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:25">US901_SERVER_CERT</name></cpp:macro> <cpp:value pos:start="61:27" pos:end="61:71">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="62:1" pos:end="62:70">#<cpp:directive pos:start="62:2" pos:end="62:7">define</cpp:directive> <cpp:macro pos:start="62:9" pos:end="62:24"><name pos:start="62:9" pos:end="62:24">US901_SERVER_KEY</name></cpp:macro> <cpp:value pos:start="62:26" pos:end="62:70">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="63:1" pos:end="63:73">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:28">US901_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="63:30" pos:end="63:73">"CA\\estCA\\private/estservercertandkey.pem"</cpp:value></cpp:define>
<decl_stmt pos:start="64:1" pos:end="66:0"><decl pos:start="64:1" pos:end="64:60"><type pos:start="64:1" pos:end="64:11"><specifier pos:start="64:1" pos:end="64:6">static</specifier> <name pos:start="64:8" pos:end="64:11">char</name></type> <name pos:start="64:13" pos:end="64:39"><name pos:start="64:13" pos:end="64:25">test5_outfile</name><index pos:start="64:26" pos:end="64:39">[<expr pos:start="64:27" pos:end="64:38"><name pos:start="64:27" pos:end="64:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="64:41" pos:end="64:60">= <expr pos:start="64:43" pos:end="64:60"><literal type="string" pos:start="64:43" pos:end="64:60">"US901\\test5.crt"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

<function pos:start="67:1" pos:end="71:1"><type pos:start="67:1" pos:end="67:11"><specifier pos:start="67:1" pos:end="67:6">static</specifier> <name pos:start="67:8" pos:end="67:11">void</name></type> <name pos:start="67:13" pos:end="67:23">us901_clean</name><parameter_list pos:start="67:24" pos:end="67:29">(<parameter pos:start="67:25" pos:end="67:28"><decl pos:start="67:25" pos:end="67:28"><type pos:start="67:25" pos:end="67:28"><name pos:start="67:25" pos:end="67:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="67:31" pos:end="71:1">{<block_content pos:start="68:5" pos:end="70:16">
    <decl_stmt pos:start="68:5" pos:end="68:18"><decl pos:start="68:5" pos:end="68:17"><type pos:start="68:5" pos:end="68:8"><name pos:start="68:5" pos:end="68:8">char</name></type> <name pos:start="68:10" pos:end="68:17"><name pos:start="68:10" pos:end="68:12">cmd</name><index pos:start="68:13" pos:end="68:17">[<expr pos:start="68:14" pos:end="68:16"><literal type="number" pos:start="68:14" pos:end="68:16">200</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><call pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:11">sprintf</name><argument_list pos:start="69:12" pos:end="69:40">(<argument pos:start="69:13" pos:end="69:15"><expr pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">cmd</name></expr></argument>, <argument pos:start="69:18" pos:end="69:24"><expr pos:start="69:18" pos:end="69:24"><literal type="string" pos:start="69:18" pos:end="69:24">"rm %s"</literal></expr></argument>, <argument pos:start="69:27" pos:end="69:39"><expr pos:start="69:27" pos:end="69:39"><name pos:start="69:27" pos:end="69:39">test5_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="70:5" pos:end="70:16"><expr pos:start="70:5" pos:end="70:15"><call pos:start="70:5" pos:end="70:15"><name pos:start="70:5" pos:end="70:10">system</name><argument_list pos:start="70:11" pos:end="70:15">(<argument pos:start="70:12" pos:end="70:14"><expr pos:start="70:12" pos:end="70:14"><name pos:start="70:12" pos:end="70:14">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="73:1" pos:end="77:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="78:1" pos:end="84:1"><type pos:start="78:1" pos:end="78:10"><specifier pos:start="78:1" pos:end="78:6">static</specifier> <name pos:start="78:8" pos:end="78:10">int</name></type> <name pos:start="78:12" pos:end="78:27">us901_init_suite</name><parameter_list pos:start="78:28" pos:end="78:33">(<parameter pos:start="78:29" pos:end="78:32"><decl pos:start="78:29" pos:end="78:32"><type pos:start="78:29" pos:end="78:32"><name pos:start="78:29" pos:end="78:32">void</name></type></decl></parameter>)</parameter_list> <block pos:start="78:35" pos:end="84:1">{<block_content pos:start="79:5" pos:end="83:13">
    <expr_stmt pos:start="79:5" pos:end="79:18"><expr pos:start="79:5" pos:end="79:17"><call pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:15">us901_clean</name><argument_list pos:start="79:16" pos:end="79:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:44"><expr pos:start="81:5" pos:end="81:43"><call pos:start="81:5" pos:end="81:43"><name pos:start="81:5" pos:end="81:19">est_init_logger</name><argument_list pos:start="81:20" pos:end="81:43">(<argument pos:start="81:21" pos:end="81:36"><expr pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="81:39" pos:end="81:42"><expr pos:start="81:39" pos:end="81:42"><name pos:start="81:39" pos:end="81:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="86:1" pos:end="90:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="91:1" pos:end="93:1"><type pos:start="91:1" pos:end="91:10"><specifier pos:start="91:1" pos:end="91:6">static</specifier> <name pos:start="91:8" pos:end="91:10">int</name></type> <name pos:start="91:12" pos:end="91:30">us901_destory_suite</name><parameter_list pos:start="91:31" pos:end="91:36">(<parameter pos:start="91:32" pos:end="91:35"><decl pos:start="91:32" pos:end="91:35"><type pos:start="91:32" pos:end="91:35"><name pos:start="91:32" pos:end="91:35">void</name></type></decl></parameter>)</parameter_list> <block pos:start="91:38" pos:end="93:1">{<block_content pos:start="92:5" pos:end="92:13">
    <return pos:start="92:5" pos:end="92:13">return <expr pos:start="92:12" pos:end="92:12"><literal type="number" pos:start="92:12" pos:end="92:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="95:1" pos:end="102:3">/*
 * Start the appropriate flavor of st_server
 * based what character is specified
 * B - Basic auth
 * D - Digest auth
 * C - CRL checking
 * N = No auth
 */</comment>
<function pos:start="103:1" pos:end="148:1"><type pos:start="103:1" pos:end="103:10"><specifier pos:start="103:1" pos:end="103:6">static</specifier> <name pos:start="103:8" pos:end="103:10">int</name></type> <name pos:start="103:12" pos:end="103:29">us901_start_server</name><parameter_list pos:start="103:30" pos:end="103:47">(<parameter pos:start="103:31" pos:end="103:46"><decl pos:start="103:31" pos:end="103:46"><type pos:start="103:31" pos:end="103:34"><name pos:start="103:31" pos:end="103:34">char</name></type> <name pos:start="103:36" pos:end="103:46">server_type</name></decl></parameter>)</parameter_list> <block pos:start="103:49" pos:end="148:1">{<block_content pos:start="104:5" pos:end="147:14">
    <decl_stmt pos:start="104:5" pos:end="104:11"><decl pos:start="104:5" pos:end="104:10"><type pos:start="104:5" pos:end="104:7"><name pos:start="104:5" pos:end="104:7">int</name></type> <name pos:start="104:9" pos:end="104:10">rv</name></decl>;</decl_stmt>

    <switch pos:start="106:5" pos:end="145:5">switch <condition pos:start="106:12" pos:end="106:24">(<expr pos:start="106:13" pos:end="106:23"><name pos:start="106:13" pos:end="106:23">server_type</name></expr>)</condition> <block pos:start="106:26" pos:end="145:5">{<block_content pos:start="107:5" pos:end="144:14">
    <case pos:start="107:5" pos:end="107:13">case <expr pos:start="107:10" pos:end="107:12"><literal type="char" pos:start="107:10" pos:end="107:12">'B'</literal></expr>:</case>
        <expr_stmt pos:start="108:9" pos:end="111:71"><expr pos:start="108:9" pos:end="111:70"><name pos:start="108:9" pos:end="108:10">rv</name> <operator pos:start="108:12" pos:end="108:12">=</operator> <call pos:start="108:14" pos:end="111:70"><name pos:start="108:14" pos:end="108:21">st_start</name><argument_list pos:start="108:22" pos:end="111:70">(<argument pos:start="108:23" pos:end="108:39"><expr pos:start="108:23" pos:end="108:39"><name pos:start="108:23" pos:end="108:39">US901_SERVER_PORT</name></expr></argument>,
        <argument pos:start="109:9" pos:end="109:28"><expr pos:start="109:9" pos:end="109:28"><name pos:start="109:9" pos:end="109:28">US901_SERVER_CERTKEY</name></expr></argument>,
        <argument pos:start="110:9" pos:end="110:28"><expr pos:start="110:9" pos:end="110:28"><name pos:start="110:9" pos:end="110:28">US901_SERVER_CERTKEY</name></expr></argument>, <argument pos:start="110:31" pos:end="110:40"><expr pos:start="110:31" pos:end="110:40"><literal type="string" pos:start="110:31" pos:end="110:40">"estrealm"</literal></expr></argument>, <argument pos:start="110:43" pos:end="110:63"><expr pos:start="110:43" pos:end="110:63"><literal type="string" pos:start="110:43" pos:end="110:63">"CA/estCA/cacert.crt"</literal></expr></argument>,
                <argument pos:start="111:17" pos:end="111:37"><expr pos:start="111:17" pos:end="111:37"><literal type="string" pos:start="111:17" pos:end="111:37">"CA/trustedcerts.crt"</literal></expr></argument>, <argument pos:start="111:40" pos:end="111:60"><expr pos:start="111:40" pos:end="111:60"><literal type="string" pos:start="111:40" pos:end="111:60">"CA/estExampleCA.cnf"</literal></expr></argument>, <argument pos:start="111:63" pos:end="111:63"><expr pos:start="111:63" pos:end="111:63"><literal type="number" pos:start="111:63" pos:end="111:63">0</literal></expr></argument>, <argument pos:start="111:66" pos:end="111:66"><expr pos:start="111:66" pos:end="111:66"><literal type="number" pos:start="111:66" pos:end="111:66">0</literal></expr></argument>, <argument pos:start="111:69" pos:end="111:69"><expr pos:start="111:69" pos:end="111:69"><literal type="number" pos:start="111:69" pos:end="111:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="112:9" pos:end="112:36"><expr pos:start="112:9" pos:end="112:35"><call pos:start="112:9" pos:end="112:35"><name pos:start="112:9" pos:end="112:33">st_enable_http_basic_auth</name><argument_list pos:start="112:34" pos:end="112:35">()</argument_list></call></expr>;</expr_stmt>
        <break pos:start="113:9" pos:end="113:14">break;</break>
    <case pos:start="114:5" pos:end="114:13">case <expr pos:start="114:10" pos:end="114:12"><literal type="char" pos:start="114:10" pos:end="114:12">'D'</literal></expr>:</case>
        <expr_stmt pos:start="115:9" pos:end="118:71"><expr pos:start="115:9" pos:end="118:70"><name pos:start="115:9" pos:end="115:10">rv</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <call pos:start="115:14" pos:end="118:70"><name pos:start="115:14" pos:end="115:21">st_start</name><argument_list pos:start="115:22" pos:end="118:70">(<argument pos:start="115:23" pos:end="115:39"><expr pos:start="115:23" pos:end="115:39"><name pos:start="115:23" pos:end="115:39">US901_SERVER_PORT</name></expr></argument>,
        <argument pos:start="116:9" pos:end="116:28"><expr pos:start="116:9" pos:end="116:28"><name pos:start="116:9" pos:end="116:28">US901_SERVER_CERTKEY</name></expr></argument>,
        <argument pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:28">US901_SERVER_CERTKEY</name></expr></argument>, <argument pos:start="117:31" pos:end="117:40"><expr pos:start="117:31" pos:end="117:40"><literal type="string" pos:start="117:31" pos:end="117:40">"estrealm"</literal></expr></argument>, <argument pos:start="117:43" pos:end="117:63"><expr pos:start="117:43" pos:end="117:63"><literal type="string" pos:start="117:43" pos:end="117:63">"CA/estCA/cacert.crt"</literal></expr></argument>,
                <argument pos:start="118:17" pos:end="118:37"><expr pos:start="118:17" pos:end="118:37"><literal type="string" pos:start="118:17" pos:end="118:37">"CA/trustedcerts.crt"</literal></expr></argument>, <argument pos:start="118:40" pos:end="118:60"><expr pos:start="118:40" pos:end="118:60"><literal type="string" pos:start="118:40" pos:end="118:60">"CA/estExampleCA.cnf"</literal></expr></argument>, <argument pos:start="118:63" pos:end="118:63"><expr pos:start="118:63" pos:end="118:63"><literal type="number" pos:start="118:63" pos:end="118:63">0</literal></expr></argument>, <argument pos:start="118:66" pos:end="118:66"><expr pos:start="118:66" pos:end="118:66"><literal type="number" pos:start="118:66" pos:end="118:66">0</literal></expr></argument>, <argument pos:start="118:69" pos:end="118:69"><expr pos:start="118:69" pos:end="118:69"><literal type="number" pos:start="118:69" pos:end="118:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="119:9" pos:end="119:37"><expr pos:start="119:9" pos:end="119:36"><call pos:start="119:9" pos:end="119:36"><name pos:start="119:9" pos:end="119:34">st_enable_http_digest_auth</name><argument_list pos:start="119:35" pos:end="119:36">()</argument_list></call></expr>;</expr_stmt>
        <break pos:start="120:9" pos:end="120:14">break;</break>
    <case pos:start="121:5" pos:end="121:13">case <expr pos:start="121:10" pos:end="121:12"><literal type="char" pos:start="121:10" pos:end="121:12">'C'</literal></expr>:</case>
        <expr_stmt pos:start="122:9" pos:end="123:88"><expr pos:start="122:9" pos:end="123:87"><call pos:start="122:9" pos:end="123:87"><name pos:start="122:9" pos:end="122:14">system</name><argument_list pos:start="122:15" pos:end="123:87">(
                <argument pos:start="123:17" pos:end="123:86"><expr pos:start="123:17" pos:end="123:86"><literal type="string" pos:start="123:17" pos:end="123:86">"openssl ca -config CA/estExampleCA.cnf -gencrl -out CA/estCA/crl.pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="124:9" pos:end="124:17"><expr pos:start="124:9" pos:end="124:16"><call pos:start="124:9" pos:end="124:16"><name pos:start="124:9" pos:end="124:13">SLEEP</name><argument_list pos:start="124:14" pos:end="124:16">(<argument pos:start="124:15" pos:end="124:15"><expr pos:start="124:15" pos:end="124:15"><literal type="number" pos:start="124:15" pos:end="124:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="125:9" pos:end="126:91"><expr pos:start="125:9" pos:end="126:90"><call pos:start="125:9" pos:end="126:90"><name pos:start="125:9" pos:end="125:14">system</name><argument_list pos:start="125:15" pos:end="126:90">(
                <argument pos:start="126:17" pos:end="126:89"><expr pos:start="126:17" pos:end="126:89"><literal type="string" pos:start="126:17" pos:end="126:89">"cat CA/trustedcerts.crt CA/estCA/crl.pem &gt; US901/trustedcertsandcrl.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="127:9" pos:end="127:17"><expr pos:start="127:9" pos:end="127:16"><call pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:13">SLEEP</name><argument_list pos:start="127:14" pos:end="127:16">(<argument pos:start="127:15" pos:end="127:15"><expr pos:start="127:15" pos:end="127:15"><literal type="number" pos:start="127:15" pos:end="127:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="128:9" pos:end="131:80"><expr pos:start="128:9" pos:end="131:79"><name pos:start="128:9" pos:end="128:10">rv</name> <operator pos:start="128:12" pos:end="128:12">=</operator> <call pos:start="128:14" pos:end="131:79"><name pos:start="128:14" pos:end="128:21">st_start</name><argument_list pos:start="128:22" pos:end="131:79">(<argument pos:start="128:23" pos:end="128:39"><expr pos:start="128:23" pos:end="128:39"><name pos:start="128:23" pos:end="128:39">US901_SERVER_PORT</name></expr></argument>,
        <argument pos:start="129:9" pos:end="129:28"><expr pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:28">US901_SERVER_CERTKEY</name></expr></argument>,
        <argument pos:start="130:9" pos:end="130:28"><expr pos:start="130:9" pos:end="130:28"><name pos:start="130:9" pos:end="130:28">US901_SERVER_CERTKEY</name></expr></argument>, <argument pos:start="130:31" pos:end="130:40"><expr pos:start="130:31" pos:end="130:40"><literal type="string" pos:start="130:31" pos:end="130:40">"estrealm"</literal></expr></argument>, <argument pos:start="130:43" pos:end="130:63"><expr pos:start="130:43" pos:end="130:63"><literal type="string" pos:start="130:43" pos:end="130:63">"CA/estCA/cacert.crt"</literal></expr></argument>,
                <argument pos:start="131:17" pos:end="131:46"><expr pos:start="131:17" pos:end="131:46"><literal type="string" pos:start="131:17" pos:end="131:46">"US901/trustedcertsandcrl.crt"</literal></expr></argument>, <argument pos:start="131:49" pos:end="131:69"><expr pos:start="131:49" pos:end="131:69"><literal type="string" pos:start="131:49" pos:end="131:69">"CA/estExampleCA.cnf"</literal></expr></argument>, <argument pos:start="131:72" pos:end="131:72"><expr pos:start="131:72" pos:end="131:72"><literal type="number" pos:start="131:72" pos:end="131:72">0</literal></expr></argument>, <argument pos:start="131:75" pos:end="131:75"><expr pos:start="131:75" pos:end="131:75"><literal type="number" pos:start="131:75" pos:end="131:75">0</literal></expr></argument>, <argument pos:start="131:78" pos:end="131:78"><expr pos:start="131:78" pos:end="131:78"><literal type="number" pos:start="131:78" pos:end="131:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="132:9" pos:end="132:24"><expr pos:start="132:9" pos:end="132:23"><call pos:start="132:9" pos:end="132:23"><name pos:start="132:9" pos:end="132:21">st_enable_crl</name><argument_list pos:start="132:22" pos:end="132:23">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="133:9" pos:end="133:31"><expr pos:start="133:9" pos:end="133:30"><call pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:28">st_disable_http_auth</name><argument_list pos:start="133:29" pos:end="133:30">()</argument_list></call></expr>;</expr_stmt>
        <break pos:start="134:9" pos:end="134:14">break;</break>
    <case pos:start="135:5" pos:end="135:13">case <expr pos:start="135:10" pos:end="135:12"><literal type="char" pos:start="135:10" pos:end="135:12">'N'</literal></expr>:</case>
        <expr_stmt pos:start="136:9" pos:end="139:71"><expr pos:start="136:9" pos:end="139:70"><name pos:start="136:9" pos:end="136:10">rv</name> <operator pos:start="136:12" pos:end="136:12">=</operator> <call pos:start="136:14" pos:end="139:70"><name pos:start="136:14" pos:end="136:21">st_start</name><argument_list pos:start="136:22" pos:end="139:70">(<argument pos:start="136:23" pos:end="136:39"><expr pos:start="136:23" pos:end="136:39"><name pos:start="136:23" pos:end="136:39">US901_SERVER_PORT</name></expr></argument>,
        <argument pos:start="137:9" pos:end="137:28"><expr pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:28">US901_SERVER_CERTKEY</name></expr></argument>,
        <argument pos:start="138:9" pos:end="138:28"><expr pos:start="138:9" pos:end="138:28"><name pos:start="138:9" pos:end="138:28">US901_SERVER_CERTKEY</name></expr></argument>, <argument pos:start="138:31" pos:end="138:40"><expr pos:start="138:31" pos:end="138:40"><literal type="string" pos:start="138:31" pos:end="138:40">"estrealm"</literal></expr></argument>, <argument pos:start="138:43" pos:end="138:63"><expr pos:start="138:43" pos:end="138:63"><literal type="string" pos:start="138:43" pos:end="138:63">"CA/estCA/cacert.crt"</literal></expr></argument>,
                <argument pos:start="139:17" pos:end="139:37"><expr pos:start="139:17" pos:end="139:37"><literal type="string" pos:start="139:17" pos:end="139:37">"CA/trustedcerts.crt"</literal></expr></argument>, <argument pos:start="139:40" pos:end="139:60"><expr pos:start="139:40" pos:end="139:60"><literal type="string" pos:start="139:40" pos:end="139:60">"CA/estExampleCA.cnf"</literal></expr></argument>, <argument pos:start="139:63" pos:end="139:63"><expr pos:start="139:63" pos:end="139:63"><literal type="number" pos:start="139:63" pos:end="139:63">0</literal></expr></argument>, <argument pos:start="139:66" pos:end="139:66"><expr pos:start="139:66" pos:end="139:66"><literal type="number" pos:start="139:66" pos:end="139:66">0</literal></expr></argument>, <argument pos:start="139:69" pos:end="139:69"><expr pos:start="139:69" pos:end="139:69"><literal type="number" pos:start="139:69" pos:end="139:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="140:9" pos:end="140:31"><expr pos:start="140:9" pos:end="140:30"><call pos:start="140:9" pos:end="140:30"><name pos:start="140:9" pos:end="140:28">st_disable_http_auth</name><argument_list pos:start="140:29" pos:end="140:30">()</argument_list></call></expr>;</expr_stmt>
        <break pos:start="141:9" pos:end="141:14">break;</break>
    <default pos:start="142:5" pos:end="142:12">default:</default>
        <expr_stmt pos:start="143:9" pos:end="143:16"><expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:10">rv</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <operator pos:start="143:14" pos:end="143:14">-</operator><literal type="number" pos:start="143:15" pos:end="143:15">1</literal></expr>;</expr_stmt>
        <break pos:start="144:9" pos:end="144:14">break;</break>
    </block_content>}</block></switch>

    <return pos:start="147:5" pos:end="147:14">return <expr pos:start="147:12" pos:end="147:13"><name pos:start="147:12" pos:end="147:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="150:1" pos:end="160:3">/*
 * HTTP Basic auth
 *
 * This test case uses libcurl to test HTTP Basic
 * authentication is working on the EST server.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.  The EST server should be
 * running and listing to port 8088 prior to this
 * test being run.
 */</comment>
<function pos:start="161:1" pos:end="186:1"><type pos:start="161:1" pos:end="161:11"><specifier pos:start="161:1" pos:end="161:6">static</specifier> <name pos:start="161:8" pos:end="161:11">void</name></type> <name pos:start="161:13" pos:end="161:23">us901_test1</name><parameter_list pos:start="161:24" pos:end="161:29">(<parameter pos:start="161:25" pos:end="161:28"><decl pos:start="161:25" pos:end="161:28"><type pos:start="161:25" pos:end="161:28"><name pos:start="161:25" pos:end="161:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="161:31" pos:end="186:1">{<block_content pos:start="162:5" pos:end="184:13">
    <decl_stmt pos:start="162:5" pos:end="162:12"><decl pos:start="162:5" pos:end="162:11"><type pos:start="162:5" pos:end="162:8"><name pos:start="162:5" pos:end="162:8">long</name></type> <name pos:start="162:10" pos:end="162:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="163:5" pos:end="163:14"><decl pos:start="163:5" pos:end="163:13"><type pos:start="163:5" pos:end="163:7"><name pos:start="163:5" pos:end="163:7">int</name></type> <name pos:start="163:9" pos:end="163:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:36"><expr pos:start="165:5" pos:end="165:35"><name pos:start="165:5" pos:end="165:9">st_rv</name> <operator pos:start="165:11" pos:end="165:11">=</operator> <call pos:start="165:13" pos:end="165:35"><name pos:start="165:13" pos:end="165:30">us901_start_server</name><argument_list pos:start="165:31" pos:end="165:35">(<argument pos:start="165:32" pos:end="165:34"><expr pos:start="165:32" pos:end="165:34"><literal type="char" pos:start="165:32" pos:end="165:34">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="166:5" pos:end="168:5"><if pos:start="166:5" pos:end="168:5">if <condition pos:start="166:8" pos:end="166:14">(<expr pos:start="166:9" pos:end="166:13"><name pos:start="166:9" pos:end="166:13">st_rv</name></expr>)</condition> <block pos:start="166:16" pos:end="168:5">{<block_content pos:start="167:9" pos:end="167:15">
        <return pos:start="167:9" pos:end="167:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="170:5" pos:end="171:5"><expr pos:start="170:5" pos:end="170:15"><name pos:start="170:5" pos:end="170:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:13"><expr pos:start="173:5" pos:end="173:12"><call pos:start="173:5" pos:end="173:12"><name pos:start="173:5" pos:end="173:9">SLEEP</name><argument_list pos:start="173:10" pos:end="173:12">(<argument pos:start="173:11" pos:end="173:11"><expr pos:start="173:11" pos:end="173:11"><literal type="number" pos:start="173:11" pos:end="173:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="174:5" pos:end="176:22"><expr pos:start="174:5" pos:end="176:21"><name pos:start="174:5" pos:end="174:6">rv</name> <operator pos:start="174:8" pos:end="174:8">=</operator> <call pos:start="174:10" pos:end="176:21"><name pos:start="174:10" pos:end="174:23">curl_http_post</name><argument_list pos:start="174:24" pos:end="176:21">(<argument pos:start="174:25" pos:end="174:40"><expr pos:start="174:25" pos:end="174:40"><name pos:start="174:25" pos:end="174:40">US901_ENROLL_URL</name></expr></argument>, <argument pos:start="174:43" pos:end="174:57"><expr pos:start="174:43" pos:end="174:57"><name pos:start="174:43" pos:end="174:57">US901_PKCS10_CT</name></expr></argument>, <argument pos:start="174:60" pos:end="174:75"><expr pos:start="174:60" pos:end="174:75"><name pos:start="174:60" pos:end="174:75">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="175:5" pos:end="175:21"><expr pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:21">US901_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="175:24" pos:end="175:36"><expr pos:start="175:24" pos:end="175:36"><name pos:start="175:24" pos:end="175:36">US901_CACERTS</name></expr></argument>, <argument pos:start="175:39" pos:end="175:52"><expr pos:start="175:39" pos:end="175:52"><name pos:start="175:39" pos:end="175:52">CURLAUTH_BASIC</name></expr></argument>,
    <argument pos:start="176:5" pos:end="176:8"><expr pos:start="176:5" pos:end="176:8"><name pos:start="176:5" pos:end="176:8">NULL</name></expr></argument>, <argument pos:start="176:11" pos:end="176:14"><expr pos:start="176:11" pos:end="176:14"><name pos:start="176:11" pos:end="176:14">NULL</name></expr></argument>, <argument pos:start="176:17" pos:end="176:20"><expr pos:start="176:17" pos:end="176:20"><name pos:start="176:17" pos:end="176:20">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="177:5" pos:end="180:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="181:5" pos:end="181:25"><expr pos:start="181:5" pos:end="181:24"><call pos:start="181:5" pos:end="181:24"><name pos:start="181:5" pos:end="181:13">CU_ASSERT</name><argument_list pos:start="181:14" pos:end="181:24">(<argument pos:start="181:15" pos:end="181:23"><expr pos:start="181:15" pos:end="181:23"><name pos:start="181:15" pos:end="181:16">rv</name> <operator pos:start="181:18" pos:end="181:19">==</operator> <literal type="number" pos:start="181:21" pos:end="181:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:14"><expr pos:start="183:5" pos:end="183:13"><call pos:start="183:5" pos:end="183:13"><name pos:start="183:5" pos:end="183:11">st_stop</name><argument_list pos:start="183:12" pos:end="183:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="184:5" pos:end="184:13"><expr pos:start="184:5" pos:end="184:12"><call pos:start="184:5" pos:end="184:12"><name pos:start="184:5" pos:end="184:9">SLEEP</name><argument_list pos:start="184:10" pos:end="184:12">(<argument pos:start="184:11" pos:end="184:11"><expr pos:start="184:11" pos:end="184:11"><literal type="number" pos:start="184:11" pos:end="184:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block" pos:start="188:1" pos:end="198:3">/*
 * HTTP Basic Auth failure
 *
 * This test case uses libcurl to test HTTP Basic
 * authentication is working on the EST server,
 * while using a bogus password.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.  The EST server should be
 * running prior to this test being run.
 */</comment>
<function pos:start="199:1" pos:end="223:1"><type pos:start="199:1" pos:end="199:11"><specifier pos:start="199:1" pos:end="199:6">static</specifier> <name pos:start="199:8" pos:end="199:11">void</name></type> <name pos:start="199:13" pos:end="199:23">us901_test2</name><parameter_list pos:start="199:24" pos:end="199:29">(<parameter pos:start="199:25" pos:end="199:28"><decl pos:start="199:25" pos:end="199:28"><type pos:start="199:25" pos:end="199:28"><name pos:start="199:25" pos:end="199:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="199:31" pos:end="223:1">{<block_content pos:start="200:5" pos:end="222:13">
    <decl_stmt pos:start="200:5" pos:end="200:12"><decl pos:start="200:5" pos:end="200:11"><type pos:start="200:5" pos:end="200:8"><name pos:start="200:5" pos:end="200:8">long</name></type> <name pos:start="200:10" pos:end="200:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="201:5" pos:end="201:14"><decl pos:start="201:5" pos:end="201:13"><type pos:start="201:5" pos:end="201:7"><name pos:start="201:5" pos:end="201:7">int</name></type> <name pos:start="201:9" pos:end="201:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:36"><expr pos:start="203:5" pos:end="203:35"><name pos:start="203:5" pos:end="203:9">st_rv</name> <operator pos:start="203:11" pos:end="203:11">=</operator> <call pos:start="203:13" pos:end="203:35"><name pos:start="203:13" pos:end="203:30">us901_start_server</name><argument_list pos:start="203:31" pos:end="203:35">(<argument pos:start="203:32" pos:end="203:34"><expr pos:start="203:32" pos:end="203:34"><literal type="char" pos:start="203:32" pos:end="203:34">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="204:5" pos:end="206:5"><if pos:start="204:5" pos:end="206:5">if <condition pos:start="204:8" pos:end="204:14">(<expr pos:start="204:9" pos:end="204:13"><name pos:start="204:9" pos:end="204:13">st_rv</name></expr>)</condition> <block pos:start="204:16" pos:end="206:5">{<block_content pos:start="205:9" pos:end="205:15">
        <return pos:start="205:9" pos:end="205:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="208:5" pos:end="209:5"><expr pos:start="208:5" pos:end="208:15"><name pos:start="208:5" pos:end="208:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:13"><expr pos:start="211:5" pos:end="211:12"><call pos:start="211:5" pos:end="211:12"><name pos:start="211:5" pos:end="211:9">SLEEP</name><argument_list pos:start="211:10" pos:end="211:12">(<argument pos:start="211:11" pos:end="211:11"><expr pos:start="211:11" pos:end="211:11"><literal type="number" pos:start="211:11" pos:end="211:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="212:5" pos:end="214:22"><expr pos:start="212:5" pos:end="214:21"><name pos:start="212:5" pos:end="212:6">rv</name> <operator pos:start="212:8" pos:end="212:8">=</operator> <call pos:start="212:10" pos:end="214:21"><name pos:start="212:10" pos:end="212:23">curl_http_post</name><argument_list pos:start="212:24" pos:end="214:21">(<argument pos:start="212:25" pos:end="212:40"><expr pos:start="212:25" pos:end="212:40"><name pos:start="212:25" pos:end="212:40">US901_ENROLL_URL</name></expr></argument>, <argument pos:start="212:43" pos:end="212:57"><expr pos:start="212:43" pos:end="212:57"><name pos:start="212:43" pos:end="212:57">US901_PKCS10_CT</name></expr></argument>, <argument pos:start="212:60" pos:end="212:75"><expr pos:start="212:60" pos:end="212:75"><name pos:start="212:60" pos:end="212:75">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="213:5" pos:end="213:20"><expr pos:start="213:5" pos:end="213:20"><name pos:start="213:5" pos:end="213:20">US901_UIDPWD_BAD</name></expr></argument>, <argument pos:start="213:23" pos:end="213:35"><expr pos:start="213:23" pos:end="213:35"><name pos:start="213:23" pos:end="213:35">US901_CACERTS</name></expr></argument>, <argument pos:start="213:38" pos:end="213:51"><expr pos:start="213:38" pos:end="213:51"><name pos:start="213:38" pos:end="213:51">CURLAUTH_BASIC</name></expr></argument>,
    <argument pos:start="214:5" pos:end="214:8"><expr pos:start="214:5" pos:end="214:8"><name pos:start="214:5" pos:end="214:8">NULL</name></expr></argument>, <argument pos:start="214:11" pos:end="214:14"><expr pos:start="214:11" pos:end="214:14"><name pos:start="214:11" pos:end="214:14">NULL</name></expr></argument>, <argument pos:start="214:17" pos:end="214:20"><expr pos:start="214:17" pos:end="214:20"><name pos:start="214:17" pos:end="214:20">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="215:5" pos:end="218:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with 400
     */</comment>
    <expr_stmt pos:start="219:5" pos:end="219:25"><expr pos:start="219:5" pos:end="219:24"><call pos:start="219:5" pos:end="219:24"><name pos:start="219:5" pos:end="219:13">CU_ASSERT</name><argument_list pos:start="219:14" pos:end="219:24">(<argument pos:start="219:15" pos:end="219:23"><expr pos:start="219:15" pos:end="219:23"><name pos:start="219:15" pos:end="219:16">rv</name> <operator pos:start="219:18" pos:end="219:19">==</operator> <literal type="number" pos:start="219:21" pos:end="219:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:14"><expr pos:start="221:5" pos:end="221:13"><call pos:start="221:5" pos:end="221:13"><name pos:start="221:5" pos:end="221:11">st_stop</name><argument_list pos:start="221:12" pos:end="221:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="222:5" pos:end="222:13"><expr pos:start="222:5" pos:end="222:12"><call pos:start="222:5" pos:end="222:12"><name pos:start="222:5" pos:end="222:9">SLEEP</name><argument_list pos:start="222:10" pos:end="222:12">(<argument pos:start="222:11" pos:end="222:11"><expr pos:start="222:11" pos:end="222:11"><literal type="number" pos:start="222:11" pos:end="222:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="225:1" pos:end="235:3">/*
 * HTTP Digest Auth
 *
 * This test case uses libcurl to test HTTP Digest
 * authentication is working on the EST server.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.  The EST server should be
 * running and listening to port 8087 prior to this
 * test being run.
 */</comment>
<function pos:start="236:1" pos:end="261:1"><type pos:start="236:1" pos:end="236:11"><specifier pos:start="236:1" pos:end="236:6">static</specifier> <name pos:start="236:8" pos:end="236:11">void</name></type> <name pos:start="236:13" pos:end="236:23">us901_test3</name><parameter_list pos:start="236:24" pos:end="236:29">(<parameter pos:start="236:25" pos:end="236:28"><decl pos:start="236:25" pos:end="236:28"><type pos:start="236:25" pos:end="236:28"><name pos:start="236:25" pos:end="236:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="236:31" pos:end="261:1">{<block_content pos:start="237:5" pos:end="260:13">
    <decl_stmt pos:start="237:5" pos:end="237:12"><decl pos:start="237:5" pos:end="237:11"><type pos:start="237:5" pos:end="237:8"><name pos:start="237:5" pos:end="237:8">long</name></type> <name pos:start="237:10" pos:end="237:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="238:5" pos:end="238:14"><decl pos:start="238:5" pos:end="238:13"><type pos:start="238:5" pos:end="238:7"><name pos:start="238:5" pos:end="238:7">int</name></type> <name pos:start="238:9" pos:end="238:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="240:5" pos:end="240:36"><expr pos:start="240:5" pos:end="240:35"><name pos:start="240:5" pos:end="240:9">st_rv</name> <operator pos:start="240:11" pos:end="240:11">=</operator> <call pos:start="240:13" pos:end="240:35"><name pos:start="240:13" pos:end="240:30">us901_start_server</name><argument_list pos:start="240:31" pos:end="240:35">(<argument pos:start="240:32" pos:end="240:34"><expr pos:start="240:32" pos:end="240:34"><literal type="char" pos:start="240:32" pos:end="240:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="241:5" pos:end="243:5"><if pos:start="241:5" pos:end="243:5">if <condition pos:start="241:8" pos:end="241:14">(<expr pos:start="241:9" pos:end="241:13"><name pos:start="241:9" pos:end="241:13">st_rv</name></expr>)</condition> <block pos:start="241:16" pos:end="243:5">{<block_content pos:start="242:9" pos:end="242:15">
        <return pos:start="242:9" pos:end="242:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="246:5"><expr pos:start="245:5" pos:end="245:15"><name pos:start="245:5" pos:end="245:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="248:5" pos:end="248:13"><expr pos:start="248:5" pos:end="248:12"><call pos:start="248:5" pos:end="248:12"><name pos:start="248:5" pos:end="248:9">SLEEP</name><argument_list pos:start="248:10" pos:end="248:12">(<argument pos:start="248:11" pos:end="248:11"><expr pos:start="248:11" pos:end="248:11"><literal type="number" pos:start="248:11" pos:end="248:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="250:5" pos:end="252:22"><expr pos:start="250:5" pos:end="252:21"><name pos:start="250:5" pos:end="250:6">rv</name> <operator pos:start="250:8" pos:end="250:8">=</operator> <call pos:start="250:10" pos:end="252:21"><name pos:start="250:10" pos:end="250:23">curl_http_post</name><argument_list pos:start="250:24" pos:end="252:21">(<argument pos:start="250:25" pos:end="250:40"><expr pos:start="250:25" pos:end="250:40"><name pos:start="250:25" pos:end="250:40">US901_ENROLL_URL</name></expr></argument>, <argument pos:start="250:43" pos:end="250:57"><expr pos:start="250:43" pos:end="250:57"><name pos:start="250:43" pos:end="250:57">US901_PKCS10_CT</name></expr></argument>, <argument pos:start="250:60" pos:end="250:75"><expr pos:start="250:60" pos:end="250:75"><name pos:start="250:60" pos:end="250:75">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="251:5" pos:end="251:21"><expr pos:start="251:5" pos:end="251:21"><name pos:start="251:5" pos:end="251:21">US901_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="251:24" pos:end="251:36"><expr pos:start="251:24" pos:end="251:36"><name pos:start="251:24" pos:end="251:36">US901_CACERTS</name></expr></argument>, <argument pos:start="251:39" pos:end="251:53"><expr pos:start="251:39" pos:end="251:53"><name pos:start="251:39" pos:end="251:53">CURLAUTH_DIGEST</name></expr></argument>,
    <argument pos:start="252:5" pos:end="252:8"><expr pos:start="252:5" pos:end="252:8"><name pos:start="252:5" pos:end="252:8">NULL</name></expr></argument>, <argument pos:start="252:11" pos:end="252:14"><expr pos:start="252:11" pos:end="252:14"><name pos:start="252:11" pos:end="252:14">NULL</name></expr></argument>, <argument pos:start="252:17" pos:end="252:20"><expr pos:start="252:17" pos:end="252:20"><name pos:start="252:17" pos:end="252:20">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="253:5" pos:end="256:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with success
     */</comment>
    <expr_stmt pos:start="257:5" pos:end="257:25"><expr pos:start="257:5" pos:end="257:24"><call pos:start="257:5" pos:end="257:24"><name pos:start="257:5" pos:end="257:13">CU_ASSERT</name><argument_list pos:start="257:14" pos:end="257:24">(<argument pos:start="257:15" pos:end="257:23"><expr pos:start="257:15" pos:end="257:23"><name pos:start="257:15" pos:end="257:16">rv</name> <operator pos:start="257:18" pos:end="257:19">==</operator> <literal type="number" pos:start="257:21" pos:end="257:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:14"><expr pos:start="259:5" pos:end="259:13"><call pos:start="259:5" pos:end="259:13"><name pos:start="259:5" pos:end="259:11">st_stop</name><argument_list pos:start="259:12" pos:end="259:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="260:5" pos:end="260:13"><expr pos:start="260:5" pos:end="260:12"><call pos:start="260:5" pos:end="260:12"><name pos:start="260:5" pos:end="260:9">SLEEP</name><argument_list pos:start="260:10" pos:end="260:12">(<argument pos:start="260:11" pos:end="260:11"><expr pos:start="260:11" pos:end="260:11"><literal type="number" pos:start="260:11" pos:end="260:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="263:1" pos:end="274:3">/*
 * HTTP Digest Auth fail
 *
 * This test case uses libcurl to test HTTP Digest
 * authentication is working on the EST server.
 * This is the negative test case for Digest auth.
 * It must use a simpleenroll message since the
 * cacerts message does not require the client
 * to be authenticated.  The EST server should be
 * running and listening to port 8087 prior to this
 * test being run.
 */</comment>
<function pos:start="275:1" pos:end="299:1"><type pos:start="275:1" pos:end="275:11"><specifier pos:start="275:1" pos:end="275:6">static</specifier> <name pos:start="275:8" pos:end="275:11">void</name></type> <name pos:start="275:13" pos:end="275:23">us901_test4</name><parameter_list pos:start="275:24" pos:end="275:29">(<parameter pos:start="275:25" pos:end="275:28"><decl pos:start="275:25" pos:end="275:28"><type pos:start="275:25" pos:end="275:28"><name pos:start="275:25" pos:end="275:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="275:31" pos:end="299:1">{<block_content pos:start="276:5" pos:end="298:13">
    <decl_stmt pos:start="276:5" pos:end="276:12"><decl pos:start="276:5" pos:end="276:11"><type pos:start="276:5" pos:end="276:8"><name pos:start="276:5" pos:end="276:8">long</name></type> <name pos:start="276:10" pos:end="276:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="277:5" pos:end="277:14"><decl pos:start="277:5" pos:end="277:13"><type pos:start="277:5" pos:end="277:7"><name pos:start="277:5" pos:end="277:7">int</name></type> <name pos:start="277:9" pos:end="277:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:36"><expr pos:start="279:5" pos:end="279:35"><name pos:start="279:5" pos:end="279:9">st_rv</name> <operator pos:start="279:11" pos:end="279:11">=</operator> <call pos:start="279:13" pos:end="279:35"><name pos:start="279:13" pos:end="279:30">us901_start_server</name><argument_list pos:start="279:31" pos:end="279:35">(<argument pos:start="279:32" pos:end="279:34"><expr pos:start="279:32" pos:end="279:34"><literal type="char" pos:start="279:32" pos:end="279:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="280:5" pos:end="282:5"><if pos:start="280:5" pos:end="282:5">if <condition pos:start="280:8" pos:end="280:14">(<expr pos:start="280:9" pos:end="280:13"><name pos:start="280:9" pos:end="280:13">st_rv</name></expr>)</condition> <block pos:start="280:16" pos:end="282:5">{<block_content pos:start="281:9" pos:end="281:15">
        <return pos:start="281:9" pos:end="281:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="284:5" pos:end="285:5"><expr pos:start="284:5" pos:end="284:15"><name pos:start="284:5" pos:end="284:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:13"><expr pos:start="287:5" pos:end="287:12"><call pos:start="287:5" pos:end="287:12"><name pos:start="287:5" pos:end="287:9">SLEEP</name><argument_list pos:start="287:10" pos:end="287:12">(<argument pos:start="287:11" pos:end="287:11"><expr pos:start="287:11" pos:end="287:11"><literal type="number" pos:start="287:11" pos:end="287:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="291:22"><expr pos:start="289:5" pos:end="291:21"><name pos:start="289:5" pos:end="289:6">rv</name> <operator pos:start="289:8" pos:end="289:8">=</operator> <call pos:start="289:10" pos:end="291:21"><name pos:start="289:10" pos:end="289:23">curl_http_post</name><argument_list pos:start="289:24" pos:end="291:21">(<argument pos:start="289:25" pos:end="289:40"><expr pos:start="289:25" pos:end="289:40"><name pos:start="289:25" pos:end="289:40">US901_ENROLL_URL</name></expr></argument>, <argument pos:start="289:43" pos:end="289:57"><expr pos:start="289:43" pos:end="289:57"><name pos:start="289:43" pos:end="289:57">US901_PKCS10_CT</name></expr></argument>, <argument pos:start="289:60" pos:end="289:75"><expr pos:start="289:60" pos:end="289:75"><name pos:start="289:60" pos:end="289:75">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="290:5" pos:end="290:20"><expr pos:start="290:5" pos:end="290:20"><name pos:start="290:5" pos:end="290:20">US901_UIDPWD_BAD</name></expr></argument>, <argument pos:start="290:23" pos:end="290:35"><expr pos:start="290:23" pos:end="290:35"><name pos:start="290:23" pos:end="290:35">US901_CACERTS</name></expr></argument>, <argument pos:start="290:38" pos:end="290:52"><expr pos:start="290:38" pos:end="290:52"><name pos:start="290:38" pos:end="290:52">CURLAUTH_DIGEST</name></expr></argument>,
    <argument pos:start="291:5" pos:end="291:8"><expr pos:start="291:5" pos:end="291:8"><name pos:start="291:5" pos:end="291:8">NULL</name></expr></argument>, <argument pos:start="291:11" pos:end="291:14"><expr pos:start="291:11" pos:end="291:14"><name pos:start="291:11" pos:end="291:14">NULL</name></expr></argument>, <argument pos:start="291:17" pos:end="291:20"><expr pos:start="291:17" pos:end="291:20"><name pos:start="291:17" pos:end="291:20">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="292:5" pos:end="295:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with a 400
     */</comment>
    <expr_stmt pos:start="296:5" pos:end="296:25"><expr pos:start="296:5" pos:end="296:24"><call pos:start="296:5" pos:end="296:24"><name pos:start="296:5" pos:end="296:13">CU_ASSERT</name><argument_list pos:start="296:14" pos:end="296:24">(<argument pos:start="296:15" pos:end="296:23"><expr pos:start="296:15" pos:end="296:23"><name pos:start="296:15" pos:end="296:16">rv</name> <operator pos:start="296:18" pos:end="296:19">==</operator> <literal type="number" pos:start="296:21" pos:end="296:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="297:5" pos:end="297:14"><expr pos:start="297:5" pos:end="297:13"><call pos:start="297:5" pos:end="297:13"><name pos:start="297:5" pos:end="297:11">st_stop</name><argument_list pos:start="297:12" pos:end="297:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="298:5" pos:end="298:13"><expr pos:start="298:5" pos:end="298:12"><call pos:start="298:5" pos:end="298:12"><name pos:start="298:5" pos:end="298:9">SLEEP</name><argument_list pos:start="298:10" pos:end="298:12">(<argument pos:start="298:11" pos:end="298:11"><expr pos:start="298:11" pos:end="298:11"><literal type="number" pos:start="298:11" pos:end="298:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt pos:start="301:1" pos:end="301:21"><decl pos:start="301:1" pos:end="301:20"><type pos:start="301:1" pos:end="301:13"><specifier pos:start="301:1" pos:end="301:6">static</specifier> <name pos:start="301:8" pos:end="301:11">FILE</name> <modifier pos:start="301:13" pos:end="301:13">*</modifier></type><name pos:start="301:14" pos:end="301:20">outfile</name></decl>;</decl_stmt>
<function pos:start="302:1" pos:end="306:1"><type pos:start="302:1" pos:end="302:13"><specifier pos:start="302:1" pos:end="302:6">static</specifier> <name pos:start="302:8" pos:end="302:13">size_t</name></type> <name pos:start="302:15" pos:end="302:24">write_func</name><parameter_list pos:start="302:25" pos:end="302:78">(<parameter pos:start="302:26" pos:end="302:34"><decl pos:start="302:26" pos:end="302:34"><type pos:start="302:26" pos:end="302:34"><name pos:start="302:26" pos:end="302:29">void</name> <modifier pos:start="302:31" pos:end="302:31">*</modifier></type><name pos:start="302:32" pos:end="302:34">ptr</name></decl></parameter>, <parameter pos:start="302:37" pos:end="302:47"><decl pos:start="302:37" pos:end="302:47"><type pos:start="302:37" pos:end="302:47"><name pos:start="302:37" pos:end="302:42">size_t</name></type> <name pos:start="302:44" pos:end="302:47">size</name></decl></parameter>, <parameter pos:start="302:50" pos:end="302:61"><decl pos:start="302:50" pos:end="302:61"><type pos:start="302:50" pos:end="302:61"><name pos:start="302:50" pos:end="302:55">size_t</name></type> <name pos:start="302:57" pos:end="302:61">nmemb</name></decl></parameter>, <parameter pos:start="302:64" pos:end="302:77"><decl pos:start="302:64" pos:end="302:77"><type pos:start="302:64" pos:end="302:77"><name pos:start="302:64" pos:end="302:67">void</name> <modifier pos:start="302:69" pos:end="302:69">*</modifier></type><name pos:start="302:70" pos:end="302:77">userdata</name></decl></parameter>)</parameter_list> <block pos:start="302:80" pos:end="306:1">{<block_content pos:start="303:5" pos:end="305:19">
    <decl_stmt pos:start="303:5" pos:end="303:19"><decl pos:start="303:5" pos:end="303:18"><type pos:start="303:5" pos:end="303:10"><name pos:start="303:5" pos:end="303:10">size_t</name></type> <name pos:start="303:12" pos:end="303:18">written</name></decl>;</decl_stmt>
    <expr_stmt pos:start="304:5" pos:end="304:48"><expr pos:start="304:5" pos:end="304:47"><name pos:start="304:5" pos:end="304:11">written</name> <operator pos:start="304:13" pos:end="304:13">=</operator> <call pos:start="304:15" pos:end="304:47"><name pos:start="304:15" pos:end="304:20">fwrite</name><argument_list pos:start="304:21" pos:end="304:47">(<argument pos:start="304:22" pos:end="304:24"><expr pos:start="304:22" pos:end="304:24"><name pos:start="304:22" pos:end="304:24">ptr</name></expr></argument>, <argument pos:start="304:27" pos:end="304:30"><expr pos:start="304:27" pos:end="304:30"><name pos:start="304:27" pos:end="304:30">size</name></expr></argument>, <argument pos:start="304:33" pos:end="304:37"><expr pos:start="304:33" pos:end="304:37"><name pos:start="304:33" pos:end="304:37">nmemb</name></expr></argument>, <argument pos:start="304:40" pos:end="304:46"><expr pos:start="304:40" pos:end="304:46"><name pos:start="304:40" pos:end="304:46">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="305:5" pos:end="305:19">return <expr pos:start="305:12" pos:end="305:18"><name pos:start="305:12" pos:end="305:18">written</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="308:1" pos:end="311:3">/*
 * This test case does a simple cacerts request
 * and looks for the HTTP 200 response code.
 */</comment>
<function pos:start="312:1" pos:end="343:1"><type pos:start="312:1" pos:end="312:11"><specifier pos:start="312:1" pos:end="312:6">static</specifier> <name pos:start="312:8" pos:end="312:11">void</name></type> <name pos:start="312:13" pos:end="312:23">us901_test5</name><parameter_list pos:start="312:24" pos:end="312:29">(<parameter pos:start="312:25" pos:end="312:28"><decl pos:start="312:25" pos:end="312:28"><type pos:start="312:25" pos:end="312:28"><name pos:start="312:25" pos:end="312:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="312:31" pos:end="343:1">{<block_content pos:start="313:5" pos:end="342:13">
    <decl_stmt pos:start="313:5" pos:end="313:12"><decl pos:start="313:5" pos:end="313:11"><type pos:start="313:5" pos:end="313:8"><name pos:start="313:5" pos:end="313:8">long</name></type> <name pos:start="313:10" pos:end="313:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="314:5" pos:end="314:18"><decl pos:start="314:5" pos:end="314:17"><type pos:start="314:5" pos:end="314:8"><name pos:start="314:5" pos:end="314:8">char</name></type> <name pos:start="314:10" pos:end="314:17"><name pos:start="314:10" pos:end="314:12">cmd</name><index pos:start="314:13" pos:end="314:17">[<expr pos:start="314:14" pos:end="314:16"><literal type="number" pos:start="314:14" pos:end="314:16">200</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="315:5" pos:end="315:14"><decl pos:start="315:5" pos:end="315:13"><type pos:start="315:5" pos:end="315:7"><name pos:start="315:5" pos:end="315:7">int</name></type> <name pos:start="315:9" pos:end="315:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:36"><expr pos:start="317:5" pos:end="317:35"><name pos:start="317:5" pos:end="317:9">st_rv</name> <operator pos:start="317:11" pos:end="317:11">=</operator> <call pos:start="317:13" pos:end="317:35"><name pos:start="317:13" pos:end="317:30">us901_start_server</name><argument_list pos:start="317:31" pos:end="317:35">(<argument pos:start="317:32" pos:end="317:34"><expr pos:start="317:32" pos:end="317:34"><literal type="char" pos:start="317:32" pos:end="317:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="318:5" pos:end="320:5"><if pos:start="318:5" pos:end="320:5">if <condition pos:start="318:8" pos:end="318:14">(<expr pos:start="318:9" pos:end="318:13"><name pos:start="318:9" pos:end="318:13">st_rv</name></expr>)</condition> <block pos:start="318:16" pos:end="320:5">{<block_content pos:start="319:9" pos:end="319:15">
        <return pos:start="319:9" pos:end="319:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="322:5" pos:end="323:5"><expr pos:start="322:5" pos:end="322:15"><name pos:start="322:5" pos:end="322:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:13"><expr pos:start="325:5" pos:end="325:12"><call pos:start="325:5" pos:end="325:12"><name pos:start="325:5" pos:end="325:9">SLEEP</name><argument_list pos:start="325:10" pos:end="325:12">(<argument pos:start="325:11" pos:end="325:11"><expr pos:start="325:11" pos:end="325:11"><literal type="number" pos:start="325:11" pos:end="325:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:40"><expr pos:start="327:5" pos:end="327:39"><name pos:start="327:5" pos:end="327:11">outfile</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <call pos:start="327:15" pos:end="327:39"><name pos:start="327:15" pos:end="327:19">fopen</name><argument_list pos:start="327:20" pos:end="327:39">(<argument pos:start="327:21" pos:end="327:33"><expr pos:start="327:21" pos:end="327:33"><name pos:start="327:21" pos:end="327:33">test5_outfile</name></expr></argument>, <argument pos:start="327:36" pos:end="327:38"><expr pos:start="327:36" pos:end="327:38"><literal type="string" pos:start="327:36" pos:end="327:38">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="328:5" pos:end="328:69"><expr pos:start="328:5" pos:end="328:68"><name pos:start="328:5" pos:end="328:6">rv</name> <operator pos:start="328:8" pos:end="328:8">=</operator> <call pos:start="328:10" pos:end="328:68"><name pos:start="328:10" pos:end="328:22">curl_http_get</name><argument_list pos:start="328:23" pos:end="328:68">(<argument pos:start="328:24" pos:end="328:39"><expr pos:start="328:24" pos:end="328:39"><name pos:start="328:24" pos:end="328:39">US901_CACERT_URL</name></expr></argument>, <argument pos:start="328:42" pos:end="328:54"><expr pos:start="328:42" pos:end="328:54"><name pos:start="328:42" pos:end="328:54">US901_CACERTS</name></expr></argument>, <argument pos:start="328:57" pos:end="328:67"><expr pos:start="328:57" pos:end="328:67"><operator pos:start="328:57" pos:end="328:57">&amp;</operator><name pos:start="328:58" pos:end="328:67">write_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="329:5" pos:end="329:20"><expr pos:start="329:5" pos:end="329:19"><call pos:start="329:5" pos:end="329:19"><name pos:start="329:5" pos:end="329:10">fclose</name><argument_list pos:start="329:11" pos:end="329:19">(<argument pos:start="329:12" pos:end="329:18"><expr pos:start="329:12" pos:end="329:18"><name pos:start="329:12" pos:end="329:18">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="331:5" pos:end="333:7">/*
     * we expect the server to respond with a 200
     */</comment>
    <expr_stmt pos:start="334:5" pos:end="334:25"><expr pos:start="334:5" pos:end="334:24"><call pos:start="334:5" pos:end="334:24"><name pos:start="334:5" pos:end="334:13">CU_ASSERT</name><argument_list pos:start="334:14" pos:end="334:24">(<argument pos:start="334:15" pos:end="334:23"><expr pos:start="334:15" pos:end="334:23"><name pos:start="334:15" pos:end="334:16">rv</name> <operator pos:start="334:18" pos:end="334:19">==</operator> <literal type="number" pos:start="334:21" pos:end="334:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="336:5" pos:end="338:27"><expr pos:start="336:5" pos:end="338:26"><call pos:start="336:5" pos:end="338:26"><name pos:start="336:5" pos:end="336:11">sprintf</name><argument_list pos:start="336:12" pos:end="338:26">(<argument pos:start="336:13" pos:end="336:15"><expr pos:start="336:13" pos:end="336:15"><name pos:start="336:13" pos:end="336:15">cmd</name></expr></argument>,
            <argument pos:start="337:13" pos:end="337:85"><expr pos:start="337:13" pos:end="337:85"><literal type="string" pos:start="337:13" pos:end="337:85">"openssl base64 -d -in %s | openssl pkcs7 -inform DER -text -print_certs"</literal></expr></argument>,
            <argument pos:start="338:13" pos:end="338:25"><expr pos:start="338:13" pos:end="338:25"><name pos:start="338:13" pos:end="338:25">test5_outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="339:5" pos:end="339:21"><expr pos:start="339:5" pos:end="339:20"><name pos:start="339:5" pos:end="339:6">rv</name> <operator pos:start="339:8" pos:end="339:8">=</operator> <call pos:start="339:10" pos:end="339:20"><name pos:start="339:10" pos:end="339:15">system</name><argument_list pos:start="339:16" pos:end="339:20">(<argument pos:start="339:17" pos:end="339:19"><expr pos:start="339:17" pos:end="339:19"><name pos:start="339:17" pos:end="339:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="340:5" pos:end="340:23"><expr pos:start="340:5" pos:end="340:22"><call pos:start="340:5" pos:end="340:22"><name pos:start="340:5" pos:end="340:13">CU_ASSERT</name><argument_list pos:start="340:14" pos:end="340:22">(<argument pos:start="340:15" pos:end="340:21"><expr pos:start="340:15" pos:end="340:21"><name pos:start="340:15" pos:end="340:16">rv</name> <operator pos:start="340:18" pos:end="340:19">==</operator> <literal type="number" pos:start="340:21" pos:end="340:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="341:5" pos:end="341:14"><expr pos:start="341:5" pos:end="341:13"><call pos:start="341:5" pos:end="341:13"><name pos:start="341:5" pos:end="341:11">st_stop</name><argument_list pos:start="341:12" pos:end="341:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="342:5" pos:end="342:13"><expr pos:start="342:5" pos:end="342:12"><call pos:start="342:5" pos:end="342:12"><name pos:start="342:5" pos:end="342:9">SLEEP</name><argument_list pos:start="342:10" pos:end="342:12">(<argument pos:start="342:11" pos:end="342:11"><expr pos:start="342:11" pos:end="342:11"><literal type="number" pos:start="342:11" pos:end="342:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="345:1" pos:end="395:1"><type pos:start="345:1" pos:end="345:11"><specifier pos:start="345:1" pos:end="345:6">static</specifier> <name pos:start="345:8" pos:end="345:11">void</name></type> <name pos:start="345:13" pos:end="345:33">us901_test_sslversion</name><parameter_list pos:start="345:34" pos:end="345:71">(<parameter pos:start="345:35" pos:end="345:53"><decl pos:start="345:35" pos:end="345:53"><type pos:start="345:35" pos:end="345:53"><specifier pos:start="345:35" pos:end="345:39">const</specifier> <name pos:start="345:41" pos:end="345:50">SSL_METHOD</name> <modifier pos:start="345:52" pos:end="345:52">*</modifier></type><name pos:start="345:53" pos:end="345:53">m</name></decl></parameter>, <parameter pos:start="345:56" pos:end="345:70"><decl pos:start="345:56" pos:end="345:70"><type pos:start="345:56" pos:end="345:70"><name pos:start="345:56" pos:end="345:58">int</name></type> <name pos:start="345:60" pos:end="345:70">expect_fail</name></decl></parameter>)</parameter_list> <block pos:start="345:73" pos:end="395:1">{<block_content pos:start="346:5" pos:end="394:13">
    <decl_stmt pos:start="346:5" pos:end="346:14"><decl pos:start="346:5" pos:end="346:13"><type pos:start="346:5" pos:end="346:9"><name pos:start="346:5" pos:end="346:7">BIO</name> <modifier pos:start="346:9" pos:end="346:9">*</modifier></type><name pos:start="346:10" pos:end="346:13">conn</name></decl>;</decl_stmt>
    <decl_stmt pos:start="347:5" pos:end="347:13"><decl pos:start="347:5" pos:end="347:12"><type pos:start="347:5" pos:end="347:9"><name pos:start="347:5" pos:end="347:7">SSL</name> <modifier pos:start="347:9" pos:end="347:9">*</modifier></type><name pos:start="347:10" pos:end="347:12">ssl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="348:5" pos:end="348:28"><decl pos:start="348:5" pos:end="348:27"><type pos:start="348:5" pos:end="348:13"><name pos:start="348:5" pos:end="348:11">SSL_CTX</name> <modifier pos:start="348:13" pos:end="348:13">*</modifier></type><name pos:start="348:14" pos:end="348:20">ssl_ctx</name> <init pos:start="348:22" pos:end="348:27">= <expr pos:start="348:24" pos:end="348:27"><name pos:start="348:24" pos:end="348:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="349:5" pos:end="349:11"><decl pos:start="349:5" pos:end="349:10"><type pos:start="349:5" pos:end="349:7"><name pos:start="349:5" pos:end="349:7">int</name></type> <name pos:start="349:9" pos:end="349:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="350:5" pos:end="350:14"><decl pos:start="350:5" pos:end="350:13"><type pos:start="350:5" pos:end="350:7"><name pos:start="350:5" pos:end="350:7">int</name></type> <name pos:start="350:9" pos:end="350:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="352:5" pos:end="352:36"><expr pos:start="352:5" pos:end="352:35"><name pos:start="352:5" pos:end="352:9">st_rv</name> <operator pos:start="352:11" pos:end="352:11">=</operator> <call pos:start="352:13" pos:end="352:35"><name pos:start="352:13" pos:end="352:30">us901_start_server</name><argument_list pos:start="352:31" pos:end="352:35">(<argument pos:start="352:32" pos:end="352:34"><expr pos:start="352:32" pos:end="352:34"><literal type="char" pos:start="352:32" pos:end="352:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="353:5" pos:end="355:5"><if pos:start="353:5" pos:end="355:5">if <condition pos:start="353:8" pos:end="353:14">(<expr pos:start="353:9" pos:end="353:13"><name pos:start="353:9" pos:end="353:13">st_rv</name></expr>)</condition> <block pos:start="353:16" pos:end="355:5">{<block_content pos:start="354:9" pos:end="354:15">
        <return pos:start="354:9" pos:end="354:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="357:5" pos:end="358:5"><expr pos:start="357:5" pos:end="357:15"><name pos:start="357:5" pos:end="357:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="360:5" pos:end="360:29"><expr pos:start="360:5" pos:end="360:28"><name pos:start="360:5" pos:end="360:11">ssl_ctx</name> <operator pos:start="360:13" pos:end="360:13">=</operator> <call pos:start="360:15" pos:end="360:28"><name pos:start="360:15" pos:end="360:25">SSL_CTX_new</name><argument_list pos:start="360:26" pos:end="360:28">(<argument pos:start="360:27" pos:end="360:27"><expr pos:start="360:27" pos:end="360:27"><name pos:start="360:27" pos:end="360:27">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="361:5" pos:end="361:31"><expr pos:start="361:5" pos:end="361:30"><call pos:start="361:5" pos:end="361:30"><name pos:start="361:5" pos:end="361:13">CU_ASSERT</name><argument_list pos:start="361:14" pos:end="361:30">(<argument pos:start="361:15" pos:end="361:29"><expr pos:start="361:15" pos:end="361:29"><name pos:start="361:15" pos:end="361:21">ssl_ctx</name> <operator pos:start="361:23" pos:end="361:24">!=</operator> <name pos:start="361:26" pos:end="361:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="363:5" pos:end="366:7">/*
     * Now that the SSL context is ready, open a socket
     * with the server and bind that socket to the context.
     */</comment>
    <expr_stmt pos:start="367:5" pos:end="367:54"><expr pos:start="367:5" pos:end="367:53"><name pos:start="367:5" pos:end="367:8">conn</name> <operator pos:start="367:10" pos:end="367:10">=</operator> <call pos:start="367:12" pos:end="367:53"><name pos:start="367:12" pos:end="367:31">open_tcp_socket_ipv4</name><argument_list pos:start="367:32" pos:end="367:53">(<argument pos:start="367:33" pos:end="367:43"><expr pos:start="367:33" pos:end="367:43"><literal type="string" pos:start="367:33" pos:end="367:43">"127.0.0.1"</literal></expr></argument>, <argument pos:start="367:46" pos:end="367:52"><expr pos:start="367:46" pos:end="367:52"><literal type="string" pos:start="367:46" pos:end="367:52">"29901"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="368:5" pos:end="368:28"><expr pos:start="368:5" pos:end="368:27"><call pos:start="368:5" pos:end="368:27"><name pos:start="368:5" pos:end="368:13">CU_ASSERT</name><argument_list pos:start="368:14" pos:end="368:27">(<argument pos:start="368:15" pos:end="368:26"><expr pos:start="368:15" pos:end="368:26"><name pos:start="368:15" pos:end="368:18">conn</name> <operator pos:start="368:20" pos:end="368:21">!=</operator> <name pos:start="368:23" pos:end="368:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="370:5" pos:end="372:7">/*
     * Creaea SSL session context
     */</comment>
    <expr_stmt pos:start="373:5" pos:end="373:27"><expr pos:start="373:5" pos:end="373:26"><name pos:start="373:5" pos:end="373:7">ssl</name> <operator pos:start="373:9" pos:end="373:9">=</operator> <call pos:start="373:11" pos:end="373:26"><name pos:start="373:11" pos:end="373:17">SSL_new</name><argument_list pos:start="373:18" pos:end="373:26">(<argument pos:start="373:19" pos:end="373:25"><expr pos:start="373:19" pos:end="373:25"><name pos:start="373:19" pos:end="373:25">ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="374:5" pos:end="374:33"><expr pos:start="374:5" pos:end="374:32"><call pos:start="374:5" pos:end="374:32"><name pos:start="374:5" pos:end="374:15">SSL_set_bio</name><argument_list pos:start="374:16" pos:end="374:32">(<argument pos:start="374:17" pos:end="374:19"><expr pos:start="374:17" pos:end="374:19"><name pos:start="374:17" pos:end="374:19">ssl</name></expr></argument>, <argument pos:start="374:22" pos:end="374:25"><expr pos:start="374:22" pos:end="374:25"><name pos:start="374:22" pos:end="374:25">conn</name></expr></argument>, <argument pos:start="374:28" pos:end="374:31"><expr pos:start="374:28" pos:end="374:31"><name pos:start="374:28" pos:end="374:31">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="376:5" pos:end="379:7">/*
     * Now that we have everything ready, let's initiate the TLS
     * handshake.
     */</comment>
    <expr_stmt pos:start="380:5" pos:end="380:26"><expr pos:start="380:5" pos:end="380:25"><name pos:start="380:5" pos:end="380:6">rv</name> <operator pos:start="380:8" pos:end="380:8">=</operator> <call pos:start="380:10" pos:end="380:25"><name pos:start="380:10" pos:end="380:20">SSL_connect</name><argument_list pos:start="380:21" pos:end="380:25">(<argument pos:start="380:22" pos:end="380:24"><expr pos:start="380:22" pos:end="380:24"><name pos:start="380:22" pos:end="380:24">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="381:5" pos:end="385:5"><if pos:start="381:5" pos:end="383:5">if <condition pos:start="381:8" pos:end="381:21">(<expr pos:start="381:9" pos:end="381:20"><operator pos:start="381:9" pos:end="381:9">!</operator><name pos:start="381:10" pos:end="381:20">expect_fail</name></expr>)</condition> <block pos:start="381:23" pos:end="383:5">{<block_content pos:start="382:9" pos:end="382:26">
        <expr_stmt pos:start="382:9" pos:end="382:26"><expr pos:start="382:9" pos:end="382:25"><call pos:start="382:9" pos:end="382:25"><name pos:start="382:9" pos:end="382:17">CU_ASSERT</name><argument_list pos:start="382:18" pos:end="382:25">(<argument pos:start="382:19" pos:end="382:24"><expr pos:start="382:19" pos:end="382:24"><name pos:start="382:19" pos:end="382:20">rv</name> <operator pos:start="382:22" pos:end="382:22">&gt;</operator> <literal type="number" pos:start="382:24" pos:end="382:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="383:7" pos:end="385:5">else <block pos:start="383:12" pos:end="385:5">{<block_content pos:start="384:9" pos:end="384:27">
        <expr_stmt pos:start="384:9" pos:end="384:27"><expr pos:start="384:9" pos:end="384:26"><call pos:start="384:9" pos:end="384:26"><name pos:start="384:9" pos:end="384:17">CU_ASSERT</name><argument_list pos:start="384:18" pos:end="384:26">(<argument pos:start="384:19" pos:end="384:25"><expr pos:start="384:19" pos:end="384:25"><name pos:start="384:19" pos:end="384:20">rv</name> <operator pos:start="384:22" pos:end="384:23">&lt;=</operator> <literal type="number" pos:start="384:25" pos:end="384:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="387:5" pos:end="389:7">/*
     * Cleanup all the data
     */</comment>
    <expr_stmt pos:start="390:5" pos:end="390:22"><expr pos:start="390:5" pos:end="390:21"><call pos:start="390:5" pos:end="390:21"><name pos:start="390:5" pos:end="390:16">SSL_shutdown</name><argument_list pos:start="390:17" pos:end="390:21">(<argument pos:start="390:18" pos:end="390:20"><expr pos:start="390:18" pos:end="390:20"><name pos:start="390:18" pos:end="390:20">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="391:5" pos:end="391:18"><expr pos:start="391:5" pos:end="391:17"><call pos:start="391:5" pos:end="391:17"><name pos:start="391:5" pos:end="391:12">SSL_free</name><argument_list pos:start="391:13" pos:end="391:17">(<argument pos:start="391:14" pos:end="391:16"><expr pos:start="391:14" pos:end="391:16"><name pos:start="391:14" pos:end="391:16">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="392:5" pos:end="392:26"><expr pos:start="392:5" pos:end="392:25"><call pos:start="392:5" pos:end="392:25"><name pos:start="392:5" pos:end="392:16">SSL_CTX_free</name><argument_list pos:start="392:17" pos:end="392:25">(<argument pos:start="392:18" pos:end="392:24"><expr pos:start="392:18" pos:end="392:24"><name pos:start="392:18" pos:end="392:24">ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="393:5" pos:end="393:14"><expr pos:start="393:5" pos:end="393:13"><call pos:start="393:5" pos:end="393:13"><name pos:start="393:5" pos:end="393:11">st_stop</name><argument_list pos:start="393:12" pos:end="393:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="394:5" pos:end="394:13"><expr pos:start="394:5" pos:end="394:12"><call pos:start="394:5" pos:end="394:12"><name pos:start="394:5" pos:end="394:9">SLEEP</name><argument_list pos:start="394:10" pos:end="394:12">(<argument pos:start="394:11" pos:end="394:11"><expr pos:start="394:11" pos:end="394:11"><literal type="number" pos:start="394:11" pos:end="394:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="397:1" pos:end="401:3">/*
 * This test attempts to create a SSL 3.0 connection
 * with the EST server.  This should fail, as TLS 1.0
 * is not allowed.
 */</comment>
<function pos:start="402:1" pos:end="407:1"><type pos:start="402:1" pos:end="402:11"><specifier pos:start="402:1" pos:end="402:6">static</specifier> <name pos:start="402:8" pos:end="402:11">void</name></type> <name pos:start="402:13" pos:end="402:23">us901_test6</name><parameter_list pos:start="402:24" pos:end="402:29">(<parameter pos:start="402:25" pos:end="402:28"><decl pos:start="402:25" pos:end="402:28"><type pos:start="402:25" pos:end="402:28"><name pos:start="402:25" pos:end="402:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="402:31" pos:end="407:1">{<block_content pos:start="403:5" pos:end="406:52">
    <expr_stmt pos:start="403:5" pos:end="404:5"><expr pos:start="403:5" pos:end="403:15"><name pos:start="403:5" pos:end="403:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="406:5" pos:end="406:52"><expr pos:start="406:5" pos:end="406:51"><call pos:start="406:5" pos:end="406:51"><name pos:start="406:5" pos:end="406:25">us901_test_sslversion</name><argument_list pos:start="406:26" pos:end="406:51">(<argument pos:start="406:27" pos:end="406:47"><expr pos:start="406:27" pos:end="406:47"><call pos:start="406:27" pos:end="406:47"><name pos:start="406:27" pos:end="406:45">SSLv3_client_method</name><argument_list pos:start="406:46" pos:end="406:47">()</argument_list></call></expr></argument>, <argument pos:start="406:50" pos:end="406:50"><expr pos:start="406:50" pos:end="406:50"><literal type="number" pos:start="406:50" pos:end="406:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="409:1" pos:end="413:3">/*
 * This test attempts to create a TLS 1.0 connection
 * with the EST server.  This should fail, as TLS 1.0
 * is not allowed.
 */</comment>
<function pos:start="414:1" pos:end="419:1"><type pos:start="414:1" pos:end="414:11"><specifier pos:start="414:1" pos:end="414:6">static</specifier> <name pos:start="414:8" pos:end="414:11">void</name></type> <name pos:start="414:13" pos:end="414:23">us901_test7</name><parameter_list pos:start="414:24" pos:end="414:29">(<parameter pos:start="414:25" pos:end="414:28"><decl pos:start="414:25" pos:end="414:28"><type pos:start="414:25" pos:end="414:28"><name pos:start="414:25" pos:end="414:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="414:31" pos:end="419:1">{<block_content pos:start="415:5" pos:end="418:52">
    <expr_stmt pos:start="415:5" pos:end="416:5"><expr pos:start="415:5" pos:end="415:15"><name pos:start="415:5" pos:end="415:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="418:5" pos:end="418:52"><expr pos:start="418:5" pos:end="418:51"><call pos:start="418:5" pos:end="418:51"><name pos:start="418:5" pos:end="418:25">us901_test_sslversion</name><argument_list pos:start="418:26" pos:end="418:51">(<argument pos:start="418:27" pos:end="418:47"><expr pos:start="418:27" pos:end="418:47"><call pos:start="418:27" pos:end="418:47"><name pos:start="418:27" pos:end="418:45">TLSv1_client_method</name><argument_list pos:start="418:46" pos:end="418:47">()</argument_list></call></expr></argument>, <argument pos:start="418:50" pos:end="418:50"><expr pos:start="418:50" pos:end="418:50"><literal type="number" pos:start="418:50" pos:end="418:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="421:1" pos:end="424:3">/*
 * This test attempts to create a TLS 1.1 connection
 * with the EST server.  This should succeed.
 */</comment>
<function pos:start="425:1" pos:end="430:1"><type pos:start="425:1" pos:end="425:11"><specifier pos:start="425:1" pos:end="425:6">static</specifier> <name pos:start="425:8" pos:end="425:11">void</name></type> <name pos:start="425:13" pos:end="425:23">us901_test8</name><parameter_list pos:start="425:24" pos:end="425:29">(<parameter pos:start="425:25" pos:end="425:28"><decl pos:start="425:25" pos:end="425:28"><type pos:start="425:25" pos:end="425:28"><name pos:start="425:25" pos:end="425:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="425:31" pos:end="430:1">{<block_content pos:start="426:5" pos:end="429:54">
    <expr_stmt pos:start="426:5" pos:end="427:5"><expr pos:start="426:5" pos:end="426:15"><name pos:start="426:5" pos:end="426:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:54"><expr pos:start="429:5" pos:end="429:53"><call pos:start="429:5" pos:end="429:53"><name pos:start="429:5" pos:end="429:25">us901_test_sslversion</name><argument_list pos:start="429:26" pos:end="429:53">(<argument pos:start="429:27" pos:end="429:49"><expr pos:start="429:27" pos:end="429:49"><call pos:start="429:27" pos:end="429:49"><name pos:start="429:27" pos:end="429:47">TLSv1_1_client_method</name><argument_list pos:start="429:48" pos:end="429:49">()</argument_list></call></expr></argument>, <argument pos:start="429:52" pos:end="429:52"><expr pos:start="429:52" pos:end="429:52"><literal type="number" pos:start="429:52" pos:end="429:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="432:1" pos:end="435:3">/*
 * This test attempts to create a TLS 1.2 connection
 * with the EST server.  This should succeed.
 */</comment>
<function pos:start="436:1" pos:end="441:1"><type pos:start="436:1" pos:end="436:11"><specifier pos:start="436:1" pos:end="436:6">static</specifier> <name pos:start="436:8" pos:end="436:11">void</name></type> <name pos:start="436:13" pos:end="436:23">us901_test9</name><parameter_list pos:start="436:24" pos:end="436:29">(<parameter pos:start="436:25" pos:end="436:28"><decl pos:start="436:25" pos:end="436:28"><type pos:start="436:25" pos:end="436:28"><name pos:start="436:25" pos:end="436:28">void</name></type></decl></parameter>)</parameter_list> <block pos:start="436:31" pos:end="441:1">{<block_content pos:start="437:5" pos:end="440:54">
    <expr_stmt pos:start="437:5" pos:end="438:5"><expr pos:start="437:5" pos:end="437:15"><name pos:start="437:5" pos:end="437:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="440:5" pos:end="440:54"><expr pos:start="440:5" pos:end="440:53"><call pos:start="440:5" pos:end="440:53"><name pos:start="440:5" pos:end="440:25">us901_test_sslversion</name><argument_list pos:start="440:26" pos:end="440:53">(<argument pos:start="440:27" pos:end="440:49"><expr pos:start="440:27" pos:end="440:49"><call pos:start="440:27" pos:end="440:49"><name pos:start="440:27" pos:end="440:47">TLSv1_2_client_method</name><argument_list pos:start="440:48" pos:end="440:49">()</argument_list></call></expr></argument>, <argument pos:start="440:52" pos:end="440:52"><expr pos:start="440:52" pos:end="440:52"><literal type="number" pos:start="440:52" pos:end="440:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="443:1" pos:end="448:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentiaiton is working.
 * The certificate used is signed by the explicit cert
 * chain. This should succeed.
 */</comment>
<function pos:start="449:1" pos:end="476:1"><type pos:start="449:1" pos:end="449:11"><specifier pos:start="449:1" pos:end="449:6">static</specifier> <name pos:start="449:8" pos:end="449:11">void</name></type> <name pos:start="449:13" pos:end="449:24">us901_test10</name><parameter_list pos:start="449:25" pos:end="449:30">(<parameter pos:start="449:26" pos:end="449:29"><decl pos:start="449:26" pos:end="449:29"><type pos:start="449:26" pos:end="449:29"><name pos:start="449:26" pos:end="449:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="449:32" pos:end="476:1">{<block_content pos:start="450:5" pos:end="475:13">
    <decl_stmt pos:start="450:5" pos:end="450:12"><decl pos:start="450:5" pos:end="450:11"><type pos:start="450:5" pos:end="450:8"><name pos:start="450:5" pos:end="450:8">long</name></type> <name pos:start="450:10" pos:end="450:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="451:5" pos:end="451:14"><decl pos:start="451:5" pos:end="451:13"><type pos:start="451:5" pos:end="451:7"><name pos:start="451:5" pos:end="451:7">int</name></type> <name pos:start="451:9" pos:end="451:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="453:5" pos:end="453:36"><expr pos:start="453:5" pos:end="453:35"><name pos:start="453:5" pos:end="453:9">st_rv</name> <operator pos:start="453:11" pos:end="453:11">=</operator> <call pos:start="453:13" pos:end="453:35"><name pos:start="453:13" pos:end="453:30">us901_start_server</name><argument_list pos:start="453:31" pos:end="453:35">(<argument pos:start="453:32" pos:end="453:34"><expr pos:start="453:32" pos:end="453:34"><literal type="char" pos:start="453:32" pos:end="453:34">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="454:5" pos:end="456:5"><if pos:start="454:5" pos:end="456:5">if <condition pos:start="454:8" pos:end="454:14">(<expr pos:start="454:9" pos:end="454:13"><name pos:start="454:9" pos:end="454:13">st_rv</name></expr>)</condition> <block pos:start="454:16" pos:end="456:5">{<block_content pos:start="455:9" pos:end="455:15">
        <return pos:start="455:9" pos:end="455:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="458:5" pos:end="459:5"><expr pos:start="458:5" pos:end="458:15"><name pos:start="458:5" pos:end="458:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="461:5" pos:end="461:13"><expr pos:start="461:5" pos:end="461:12"><call pos:start="461:5" pos:end="461:12"><name pos:start="461:5" pos:end="461:9">SLEEP</name><argument_list pos:start="461:10" pos:end="461:12">(<argument pos:start="461:11" pos:end="461:11"><expr pos:start="461:11" pos:end="461:11"><literal type="number" pos:start="461:11" pos:end="461:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="462:5" pos:end="468:10"><expr pos:start="462:5" pos:end="468:9"><name pos:start="462:5" pos:end="462:6">rv</name> <operator pos:start="462:8" pos:end="462:8">=</operator> <call pos:start="462:10" pos:end="468:9"><name pos:start="462:10" pos:end="462:28">curl_http_post_cert</name><argument_list pos:start="462:29" pos:end="468:9">(<argument pos:start="462:30" pos:end="462:45"><expr pos:start="462:30" pos:end="462:45"><name pos:start="462:30" pos:end="462:45">US901_ENROLL_URL</name></expr></argument>,
    <argument pos:start="463:5" pos:end="463:19"><expr pos:start="463:5" pos:end="463:19"><name pos:start="463:5" pos:end="463:19">US901_PKCS10_CT</name></expr></argument>,
    <argument pos:start="464:5" pos:end="464:20"><expr pos:start="464:5" pos:end="464:20"><name pos:start="464:5" pos:end="464:20">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="465:5" pos:end="465:23"><expr pos:start="465:5" pos:end="465:23"><name pos:start="465:5" pos:end="465:23">US901_EXPLICIT_CERT</name></expr></argument>,
    <argument pos:start="466:5" pos:end="466:22"><expr pos:start="466:5" pos:end="466:22"><name pos:start="466:5" pos:end="466:22">US901_EXPLICIT_KEY</name></expr></argument>,
    <argument pos:start="467:5" pos:end="467:17"><expr pos:start="467:5" pos:end="467:17"><name pos:start="467:5" pos:end="467:17">US901_CACERTS</name></expr></argument>,
    <argument pos:start="468:5" pos:end="468:8"><expr pos:start="468:5" pos:end="468:8"><name pos:start="468:5" pos:end="468:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="469:5" pos:end="472:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="473:5" pos:end="473:25"><expr pos:start="473:5" pos:end="473:24"><call pos:start="473:5" pos:end="473:24"><name pos:start="473:5" pos:end="473:13">CU_ASSERT</name><argument_list pos:start="473:14" pos:end="473:24">(<argument pos:start="473:15" pos:end="473:23"><expr pos:start="473:15" pos:end="473:23"><name pos:start="473:15" pos:end="473:16">rv</name> <operator pos:start="473:18" pos:end="473:19">==</operator> <literal type="number" pos:start="473:21" pos:end="473:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="474:5" pos:end="474:14"><expr pos:start="474:5" pos:end="474:13"><call pos:start="474:5" pos:end="474:13"><name pos:start="474:5" pos:end="474:11">st_stop</name><argument_list pos:start="474:12" pos:end="474:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="475:5" pos:end="475:13"><expr pos:start="475:5" pos:end="475:12"><call pos:start="475:5" pos:end="475:12"><name pos:start="475:5" pos:end="475:9">SLEEP</name><argument_list pos:start="475:10" pos:end="475:12">(<argument pos:start="475:11" pos:end="475:11"><expr pos:start="475:11" pos:end="475:11"><literal type="number" pos:start="475:11" pos:end="475:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="478:1" pos:end="483:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentiaiton is working.
 * The certificate used is signed by the implicit cert
 * chain. This should succeed.
 */</comment>
<function pos:start="484:1" pos:end="511:1"><type pos:start="484:1" pos:end="484:11"><specifier pos:start="484:1" pos:end="484:6">static</specifier> <name pos:start="484:8" pos:end="484:11">void</name></type> <name pos:start="484:13" pos:end="484:24">us901_test11</name><parameter_list pos:start="484:25" pos:end="484:30">(<parameter pos:start="484:26" pos:end="484:29"><decl pos:start="484:26" pos:end="484:29"><type pos:start="484:26" pos:end="484:29"><name pos:start="484:26" pos:end="484:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="484:32" pos:end="511:1">{<block_content pos:start="485:5" pos:end="510:13">
    <decl_stmt pos:start="485:5" pos:end="485:12"><decl pos:start="485:5" pos:end="485:11"><type pos:start="485:5" pos:end="485:8"><name pos:start="485:5" pos:end="485:8">long</name></type> <name pos:start="485:10" pos:end="485:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="486:5" pos:end="486:14"><decl pos:start="486:5" pos:end="486:13"><type pos:start="486:5" pos:end="486:7"><name pos:start="486:5" pos:end="486:7">int</name></type> <name pos:start="486:9" pos:end="486:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="488:5" pos:end="488:36"><expr pos:start="488:5" pos:end="488:35"><name pos:start="488:5" pos:end="488:9">st_rv</name> <operator pos:start="488:11" pos:end="488:11">=</operator> <call pos:start="488:13" pos:end="488:35"><name pos:start="488:13" pos:end="488:30">us901_start_server</name><argument_list pos:start="488:31" pos:end="488:35">(<argument pos:start="488:32" pos:end="488:34"><expr pos:start="488:32" pos:end="488:34"><literal type="char" pos:start="488:32" pos:end="488:34">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="489:5" pos:end="491:5"><if pos:start="489:5" pos:end="491:5">if <condition pos:start="489:8" pos:end="489:14">(<expr pos:start="489:9" pos:end="489:13"><name pos:start="489:9" pos:end="489:13">st_rv</name></expr>)</condition> <block pos:start="489:16" pos:end="491:5">{<block_content pos:start="490:9" pos:end="490:15">
        <return pos:start="490:9" pos:end="490:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="493:5" pos:end="494:5"><expr pos:start="493:5" pos:end="493:15"><name pos:start="493:5" pos:end="493:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="496:5" pos:end="496:13"><expr pos:start="496:5" pos:end="496:12"><call pos:start="496:5" pos:end="496:12"><name pos:start="496:5" pos:end="496:9">SLEEP</name><argument_list pos:start="496:10" pos:end="496:12">(<argument pos:start="496:11" pos:end="496:11"><expr pos:start="496:11" pos:end="496:11"><literal type="number" pos:start="496:11" pos:end="496:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="497:5" pos:end="503:10"><expr pos:start="497:5" pos:end="503:9"><name pos:start="497:5" pos:end="497:6">rv</name> <operator pos:start="497:8" pos:end="497:8">=</operator> <call pos:start="497:10" pos:end="503:9"><name pos:start="497:10" pos:end="497:28">curl_http_post_cert</name><argument_list pos:start="497:29" pos:end="503:9">(<argument pos:start="497:30" pos:end="497:45"><expr pos:start="497:30" pos:end="497:45"><name pos:start="497:30" pos:end="497:45">US901_ENROLL_URL</name></expr></argument>,
    <argument pos:start="498:5" pos:end="498:19"><expr pos:start="498:5" pos:end="498:19"><name pos:start="498:5" pos:end="498:19">US901_PKCS10_CT</name></expr></argument>,
    <argument pos:start="499:5" pos:end="499:20"><expr pos:start="499:5" pos:end="499:20"><name pos:start="499:5" pos:end="499:20">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="500:5" pos:end="500:23"><expr pos:start="500:5" pos:end="500:23"><name pos:start="500:5" pos:end="500:23">US901_IMPLICIT_CERT</name></expr></argument>,
    <argument pos:start="501:5" pos:end="501:22"><expr pos:start="501:5" pos:end="501:22"><name pos:start="501:5" pos:end="501:22">US901_IMPLICIT_KEY</name></expr></argument>,
    <argument pos:start="502:5" pos:end="502:17"><expr pos:start="502:5" pos:end="502:17"><name pos:start="502:5" pos:end="502:17">US901_CACERTS</name></expr></argument>,
    <argument pos:start="503:5" pos:end="503:8"><expr pos:start="503:5" pos:end="503:8"><name pos:start="503:5" pos:end="503:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="504:5" pos:end="507:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="508:5" pos:end="508:25"><expr pos:start="508:5" pos:end="508:24"><call pos:start="508:5" pos:end="508:24"><name pos:start="508:5" pos:end="508:13">CU_ASSERT</name><argument_list pos:start="508:14" pos:end="508:24">(<argument pos:start="508:15" pos:end="508:23"><expr pos:start="508:15" pos:end="508:23"><name pos:start="508:15" pos:end="508:16">rv</name> <operator pos:start="508:18" pos:end="508:19">==</operator> <literal type="number" pos:start="508:21" pos:end="508:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="509:5" pos:end="509:14"><expr pos:start="509:5" pos:end="509:13"><call pos:start="509:5" pos:end="509:13"><name pos:start="509:5" pos:end="509:11">st_stop</name><argument_list pos:start="509:12" pos:end="509:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="510:5" pos:end="510:13"><expr pos:start="510:5" pos:end="510:12"><call pos:start="510:5" pos:end="510:12"><name pos:start="510:5" pos:end="510:9">SLEEP</name><argument_list pos:start="510:10" pos:end="510:12">(<argument pos:start="510:11" pos:end="510:11"><expr pos:start="510:11" pos:end="510:11"><literal type="number" pos:start="510:11" pos:end="510:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="513:1" pos:end="517:3">/*
 * This test attempts to use a revoked client certificate to
 * verify CRL checks are working in the TLS layer.
 * This should fail.
 */</comment>
<function pos:start="518:1" pos:end="545:1"><type pos:start="518:1" pos:end="518:11"><specifier pos:start="518:1" pos:end="518:6">static</specifier> <name pos:start="518:8" pos:end="518:11">void</name></type> <name pos:start="518:13" pos:end="518:24">us901_test12</name><parameter_list pos:start="518:25" pos:end="518:30">(<parameter pos:start="518:26" pos:end="518:29"><decl pos:start="518:26" pos:end="518:29"><type pos:start="518:26" pos:end="518:29"><name pos:start="518:26" pos:end="518:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="518:32" pos:end="545:1">{<block_content pos:start="519:5" pos:end="544:14">
    <decl_stmt pos:start="519:5" pos:end="519:12"><decl pos:start="519:5" pos:end="519:11"><type pos:start="519:5" pos:end="519:8"><name pos:start="519:5" pos:end="519:8">long</name></type> <name pos:start="519:10" pos:end="519:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="520:5" pos:end="520:14"><decl pos:start="520:5" pos:end="520:13"><type pos:start="520:5" pos:end="520:7"><name pos:start="520:5" pos:end="520:7">int</name></type> <name pos:start="520:9" pos:end="520:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="522:5" pos:end="522:36"><expr pos:start="522:5" pos:end="522:35"><name pos:start="522:5" pos:end="522:9">st_rv</name> <operator pos:start="522:11" pos:end="522:11">=</operator> <call pos:start="522:13" pos:end="522:35"><name pos:start="522:13" pos:end="522:30">us901_start_server</name><argument_list pos:start="522:31" pos:end="522:35">(<argument pos:start="522:32" pos:end="522:34"><expr pos:start="522:32" pos:end="522:34"><literal type="char" pos:start="522:32" pos:end="522:34">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="523:5" pos:end="525:5"><if pos:start="523:5" pos:end="525:5">if <condition pos:start="523:8" pos:end="523:14">(<expr pos:start="523:9" pos:end="523:13"><name pos:start="523:9" pos:end="523:13">st_rv</name></expr>)</condition> <block pos:start="523:16" pos:end="525:5">{<block_content pos:start="524:9" pos:end="524:15">
        <return pos:start="524:9" pos:end="524:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="527:5" pos:end="528:5"><expr pos:start="527:5" pos:end="527:15"><name pos:start="527:5" pos:end="527:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="530:5" pos:end="530:13"><expr pos:start="530:5" pos:end="530:12"><call pos:start="530:5" pos:end="530:12"><name pos:start="530:5" pos:end="530:9">SLEEP</name><argument_list pos:start="530:10" pos:end="530:12">(<argument pos:start="530:11" pos:end="530:11"><expr pos:start="530:11" pos:end="530:11"><literal type="number" pos:start="530:11" pos:end="530:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="531:5" pos:end="537:10"><expr pos:start="531:5" pos:end="537:9"><name pos:start="531:5" pos:end="531:6">rv</name> <operator pos:start="531:8" pos:end="531:8">=</operator> <call pos:start="531:10" pos:end="537:9"><name pos:start="531:10" pos:end="531:28">curl_http_post_cert</name><argument_list pos:start="531:29" pos:end="537:9">(<argument pos:start="531:30" pos:end="531:45"><expr pos:start="531:30" pos:end="531:45"><name pos:start="531:30" pos:end="531:45">US901_ENROLL_URL</name></expr></argument>,
    <argument pos:start="532:5" pos:end="532:19"><expr pos:start="532:5" pos:end="532:19"><name pos:start="532:5" pos:end="532:19">US901_PKCS10_CT</name></expr></argument>,
    <argument pos:start="533:5" pos:end="533:20"><expr pos:start="533:5" pos:end="533:20"><name pos:start="533:5" pos:end="533:20">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="534:5" pos:end="534:22"><expr pos:start="534:5" pos:end="534:22"><name pos:start="534:5" pos:end="534:22">US901_REVOKED_CERT</name></expr></argument>,
    <argument pos:start="535:5" pos:end="535:21"><expr pos:start="535:5" pos:end="535:21"><name pos:start="535:5" pos:end="535:21">US901_REVOKED_KEY</name></expr></argument>,
    <argument pos:start="536:5" pos:end="536:17"><expr pos:start="536:5" pos:end="536:17"><name pos:start="536:5" pos:end="536:17">US901_CACERTS</name></expr></argument>,
    <argument pos:start="537:5" pos:end="537:8"><expr pos:start="537:5" pos:end="537:8"><name pos:start="537:5" pos:end="537:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="539:5" pos:end="542:7">/*
     * Since the client cert has been revoked the TLS handshake
     * will fail.  The EST server should return a 401 response.
     */</comment>
    <expr_stmt pos:start="543:5" pos:end="543:23"><expr pos:start="543:5" pos:end="543:22"><call pos:start="543:5" pos:end="543:22"><name pos:start="543:5" pos:end="543:13">CU_ASSERT</name><argument_list pos:start="543:14" pos:end="543:22">(<argument pos:start="543:15" pos:end="543:21"><expr pos:start="543:15" pos:end="543:21"><name pos:start="543:15" pos:end="543:16">rv</name> <operator pos:start="543:18" pos:end="543:19">==</operator> <literal type="number" pos:start="543:21" pos:end="543:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="544:5" pos:end="544:14"><expr pos:start="544:5" pos:end="544:13"><call pos:start="544:5" pos:end="544:13"><name pos:start="544:5" pos:end="544:11">st_stop</name><argument_list pos:start="544:12" pos:end="544:13">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="547:1" pos:end="551:3">/*
 * This test attempts to use a self-signed client certificate to
 * verify cert chain will reject a cert that has not been
 * signed by a valid CA.  This should fail.
 */</comment>
<function pos:start="552:1" pos:end="581:1"><type pos:start="552:1" pos:end="552:11"><specifier pos:start="552:1" pos:end="552:6">static</specifier> <name pos:start="552:8" pos:end="552:11">void</name></type> <name pos:start="552:13" pos:end="552:24">us901_test13</name><parameter_list pos:start="552:25" pos:end="552:30">(<parameter pos:start="552:26" pos:end="552:29"><decl pos:start="552:26" pos:end="552:29"><type pos:start="552:26" pos:end="552:29"><name pos:start="552:26" pos:end="552:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="552:32" pos:end="581:1">{<block_content pos:start="553:5" pos:end="580:14">
    <decl_stmt pos:start="553:5" pos:end="553:12"><decl pos:start="553:5" pos:end="553:11"><type pos:start="553:5" pos:end="553:8"><name pos:start="553:5" pos:end="553:8">long</name></type> <name pos:start="553:10" pos:end="553:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="554:5" pos:end="554:14"><decl pos:start="554:5" pos:end="554:13"><type pos:start="554:5" pos:end="554:7"><name pos:start="554:5" pos:end="554:7">int</name></type> <name pos:start="554:9" pos:end="554:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="556:5" pos:end="556:36"><expr pos:start="556:5" pos:end="556:35"><name pos:start="556:5" pos:end="556:9">st_rv</name> <operator pos:start="556:11" pos:end="556:11">=</operator> <call pos:start="556:13" pos:end="556:35"><name pos:start="556:13" pos:end="556:30">us901_start_server</name><argument_list pos:start="556:31" pos:end="556:35">(<argument pos:start="556:32" pos:end="556:34"><expr pos:start="556:32" pos:end="556:34"><literal type="char" pos:start="556:32" pos:end="556:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="557:5" pos:end="559:5"><if pos:start="557:5" pos:end="559:5">if <condition pos:start="557:8" pos:end="557:14">(<expr pos:start="557:9" pos:end="557:13"><name pos:start="557:9" pos:end="557:13">st_rv</name></expr>)</condition> <block pos:start="557:16" pos:end="559:5">{<block_content pos:start="558:9" pos:end="558:15">
        <return pos:start="558:9" pos:end="558:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="561:5" pos:end="562:5"><expr pos:start="561:5" pos:end="561:15"><name pos:start="561:5" pos:end="561:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="564:5" pos:end="564:13"><expr pos:start="564:5" pos:end="564:12"><call pos:start="564:5" pos:end="564:12"><name pos:start="564:5" pos:end="564:9">SLEEP</name><argument_list pos:start="564:10" pos:end="564:12">(<argument pos:start="564:11" pos:end="564:11"><expr pos:start="564:11" pos:end="564:11"><literal type="number" pos:start="564:11" pos:end="564:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="565:5" pos:end="571:10"><expr pos:start="565:5" pos:end="571:9"><name pos:start="565:5" pos:end="565:6">rv</name> <operator pos:start="565:8" pos:end="565:8">=</operator> <call pos:start="565:10" pos:end="571:9"><name pos:start="565:10" pos:end="565:28">curl_http_post_cert</name><argument_list pos:start="565:29" pos:end="571:9">(<argument pos:start="565:30" pos:end="565:45"><expr pos:start="565:30" pos:end="565:45"><name pos:start="565:30" pos:end="565:45">US901_ENROLL_URL</name></expr></argument>,
    <argument pos:start="566:5" pos:end="566:19"><expr pos:start="566:5" pos:end="566:19"><name pos:start="566:5" pos:end="566:19">US901_PKCS10_CT</name></expr></argument>,
    <argument pos:start="567:5" pos:end="567:20"><expr pos:start="567:5" pos:end="567:20"><name pos:start="567:5" pos:end="567:20">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="568:5" pos:end="568:23"><expr pos:start="568:5" pos:end="568:23"><name pos:start="568:5" pos:end="568:23">US901_SELFSIGN_CERT</name></expr></argument>,
    <argument pos:start="569:5" pos:end="569:22"><expr pos:start="569:5" pos:end="569:22"><name pos:start="569:5" pos:end="569:22">US901_SELFSIGN_KEY</name></expr></argument>,
    <argument pos:start="570:5" pos:end="570:17"><expr pos:start="570:5" pos:end="570:17"><name pos:start="570:5" pos:end="570:17">US901_CACERTS</name></expr></argument>,
    <argument pos:start="571:5" pos:end="571:8"><expr pos:start="571:5" pos:end="571:8"><name pos:start="571:5" pos:end="571:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="573:5" pos:end="578:7">/*
     * Since the client cert is not signed by either the local CA
     * or external CA, the TLS handshake will fail.
     * We will not receive an HTTP status message
     * from the server.
     */</comment>
    <expr_stmt pos:start="579:5" pos:end="579:23"><expr pos:start="579:5" pos:end="579:22"><call pos:start="579:5" pos:end="579:22"><name pos:start="579:5" pos:end="579:13">CU_ASSERT</name><argument_list pos:start="579:14" pos:end="579:22">(<argument pos:start="579:15" pos:end="579:21"><expr pos:start="579:15" pos:end="579:21"><name pos:start="579:15" pos:end="579:16">rv</name> <operator pos:start="579:18" pos:end="579:19">==</operator> <literal type="number" pos:start="579:21" pos:end="579:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="580:5" pos:end="580:14"><expr pos:start="580:5" pos:end="580:13"><call pos:start="580:5" pos:end="580:13"><name pos:start="580:5" pos:end="580:11">st_stop</name><argument_list pos:start="580:12" pos:end="580:13">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="583:1" pos:end="591:3">/*
 * TLS anonymous cipher suites disabled
 *
 * This test case uses libcurl to test that the
 * EST server will not accept anonymous cipher
 * suites from the client.  We only test a single
 * cipher suite here.  This attempts to do a
 * simple enroll with the server.
 */</comment>
<function pos:start="592:1" pos:end="614:1"><type pos:start="592:1" pos:end="592:11"><specifier pos:start="592:1" pos:end="592:6">static</specifier> <name pos:start="592:8" pos:end="592:11">void</name></type> <name pos:start="592:13" pos:end="592:24">us901_test14</name><parameter_list pos:start="592:25" pos:end="592:30">(<parameter pos:start="592:26" pos:end="592:29"><decl pos:start="592:26" pos:end="592:29"><type pos:start="592:26" pos:end="592:29"><name pos:start="592:26" pos:end="592:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="592:32" pos:end="614:1">{<block_content pos:start="593:5" pos:end="613:13">
    <decl_stmt pos:start="593:5" pos:end="593:12"><decl pos:start="593:5" pos:end="593:11"><type pos:start="593:5" pos:end="593:8"><name pos:start="593:5" pos:end="593:8">long</name></type> <name pos:start="593:10" pos:end="593:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="594:5" pos:end="594:14"><decl pos:start="594:5" pos:end="594:13"><type pos:start="594:5" pos:end="594:7"><name pos:start="594:5" pos:end="594:7">int</name></type> <name pos:start="594:9" pos:end="594:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="596:5" pos:end="596:36"><expr pos:start="596:5" pos:end="596:35"><name pos:start="596:5" pos:end="596:9">st_rv</name> <operator pos:start="596:11" pos:end="596:11">=</operator> <call pos:start="596:13" pos:end="596:35"><name pos:start="596:13" pos:end="596:30">us901_start_server</name><argument_list pos:start="596:31" pos:end="596:35">(<argument pos:start="596:32" pos:end="596:34"><expr pos:start="596:32" pos:end="596:34"><literal type="char" pos:start="596:32" pos:end="596:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="597:5" pos:end="599:5"><if pos:start="597:5" pos:end="599:5">if <condition pos:start="597:8" pos:end="597:14">(<expr pos:start="597:9" pos:end="597:13"><name pos:start="597:9" pos:end="597:13">st_rv</name></expr>)</condition> <block pos:start="597:16" pos:end="599:5">{<block_content pos:start="598:9" pos:end="598:15">
        <return pos:start="598:9" pos:end="598:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="601:5" pos:end="602:5"><expr pos:start="601:5" pos:end="601:15"><name pos:start="601:5" pos:end="601:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="604:5" pos:end="604:13"><expr pos:start="604:5" pos:end="604:12"><call pos:start="604:5" pos:end="604:12"><name pos:start="604:5" pos:end="604:9">SLEEP</name><argument_list pos:start="604:10" pos:end="604:12">(<argument pos:start="604:11" pos:end="604:11"><expr pos:start="604:11" pos:end="604:11"><literal type="number" pos:start="604:11" pos:end="604:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="605:5" pos:end="607:18"><expr pos:start="605:5" pos:end="607:17"><name pos:start="605:5" pos:end="605:6">rv</name> <operator pos:start="605:8" pos:end="605:8">=</operator> <call pos:start="605:10" pos:end="607:17"><name pos:start="605:10" pos:end="605:23">curl_http_post</name><argument_list pos:start="605:24" pos:end="607:17">(<argument pos:start="605:25" pos:end="605:40"><expr pos:start="605:25" pos:end="605:40"><name pos:start="605:25" pos:end="605:40">US901_ENROLL_URL</name></expr></argument>, <argument pos:start="605:43" pos:end="605:57"><expr pos:start="605:43" pos:end="605:57"><name pos:start="605:43" pos:end="605:57">US901_PKCS10_CT</name></expr></argument>, <argument pos:start="605:60" pos:end="605:75"><expr pos:start="605:60" pos:end="605:75"><name pos:start="605:60" pos:end="605:75">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="606:5" pos:end="606:21"><expr pos:start="606:5" pos:end="606:21"><name pos:start="606:5" pos:end="606:21">US901_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="606:24" pos:end="606:36"><expr pos:start="606:24" pos:end="606:36"><name pos:start="606:24" pos:end="606:36">US901_CACERTS</name></expr></argument>, <argument pos:start="606:39" pos:end="606:52"><expr pos:start="606:39" pos:end="606:52"><name pos:start="606:39" pos:end="606:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="606:55" pos:end="606:73"><expr pos:start="606:55" pos:end="606:73"><literal type="string" pos:start="606:55" pos:end="606:73">"ADH-AES128-SHA256"</literal></expr></argument>, <argument pos:start="606:76" pos:end="606:79"><expr pos:start="606:76" pos:end="606:79"><name pos:start="606:76" pos:end="606:79">NULL</name></expr></argument>,
            <argument pos:start="607:13" pos:end="607:16"><expr pos:start="607:13" pos:end="607:16"><name pos:start="607:13" pos:end="607:16">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="608:5" pos:end="610:7">/*
     * TLS handshake should have failed, curl should return 0
     */</comment>
    <expr_stmt pos:start="611:5" pos:end="611:23"><expr pos:start="611:5" pos:end="611:22"><call pos:start="611:5" pos:end="611:22"><name pos:start="611:5" pos:end="611:13">CU_ASSERT</name><argument_list pos:start="611:14" pos:end="611:22">(<argument pos:start="611:15" pos:end="611:21"><expr pos:start="611:15" pos:end="611:21"><name pos:start="611:15" pos:end="611:16">rv</name> <operator pos:start="611:18" pos:end="611:19">==</operator> <literal type="number" pos:start="611:21" pos:end="611:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="612:5" pos:end="612:14"><expr pos:start="612:5" pos:end="612:13"><call pos:start="612:5" pos:end="612:13"><name pos:start="612:5" pos:end="612:11">st_stop</name><argument_list pos:start="612:12" pos:end="612:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="613:5" pos:end="613:13"><expr pos:start="613:5" pos:end="613:12"><call pos:start="613:5" pos:end="613:12"><name pos:start="613:5" pos:end="613:9">SLEEP</name><argument_list pos:start="613:10" pos:end="613:12">(<argument pos:start="613:11" pos:end="613:11"><expr pos:start="613:11" pos:end="613:11"><literal type="number" pos:start="613:11" pos:end="613:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="616:1" pos:end="618:3">/*
 * Null HTTP realm when initializing server
 */</comment>
<function pos:start="619:1" pos:end="668:1"><type pos:start="619:1" pos:end="619:11"><specifier pos:start="619:1" pos:end="619:6">static</specifier> <name pos:start="619:8" pos:end="619:11">void</name></type> <name pos:start="619:13" pos:end="619:24">us901_test15</name><parameter_list pos:start="619:25" pos:end="619:30">(<parameter pos:start="619:26" pos:end="619:29"><decl pos:start="619:26" pos:end="619:29"><type pos:start="619:26" pos:end="619:29"><name pos:start="619:26" pos:end="619:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="619:32" pos:end="668:1">{<block_content pos:start="620:5" pos:end="667:28">
    <decl_stmt pos:start="620:5" pos:end="620:34"><decl pos:start="620:5" pos:end="620:33"><type pos:start="620:5" pos:end="620:19"><name pos:start="620:5" pos:end="620:12">unsigned</name> <name pos:start="620:14" pos:end="620:17">char</name> <modifier pos:start="620:19" pos:end="620:19">*</modifier></type><name pos:start="620:20" pos:end="620:26">cacerts</name> <init pos:start="620:28" pos:end="620:33">= <expr pos:start="620:30" pos:end="620:33"><name pos:start="620:30" pos:end="620:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="621:5" pos:end="621:24"><decl pos:start="621:5" pos:end="621:23"><type pos:start="621:5" pos:end="621:7"><name pos:start="621:5" pos:end="621:7">int</name></type> <name pos:start="621:9" pos:end="621:19">cacerts_len</name> <init pos:start="621:21" pos:end="621:23">= <expr pos:start="621:23" pos:end="621:23"><literal type="number" pos:start="621:23" pos:end="621:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="622:5" pos:end="622:24"><decl pos:start="622:5" pos:end="622:15"><type pos:start="622:5" pos:end="622:9"><name pos:start="622:5" pos:end="622:7">BIO</name> <modifier pos:start="622:9" pos:end="622:9">*</modifier></type><name pos:start="622:10" pos:end="622:15">certin</name></decl>, <decl pos:start="622:18" pos:end="622:23"><type ref="prev" pos:start="622:5" pos:end="622:9"><modifier pos:start="622:18" pos:end="622:18">*</modifier></type><name pos:start="622:19" pos:end="622:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="623:5" pos:end="623:12"><decl pos:start="623:5" pos:end="623:11"><type pos:start="623:5" pos:end="623:10"><name pos:start="623:5" pos:end="623:8">X509</name> <modifier pos:start="623:10" pos:end="623:10">*</modifier></type><name pos:start="623:11" pos:end="623:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="624:5" pos:end="624:23"><decl pos:start="624:5" pos:end="624:22"><type pos:start="624:5" pos:end="624:14"><name pos:start="624:5" pos:end="624:12">EVP_PKEY</name> <modifier pos:start="624:14" pos:end="624:14">*</modifier></type><name pos:start="624:15" pos:end="624:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="625:5" pos:end="625:11"><decl pos:start="625:5" pos:end="625:10"><type pos:start="625:5" pos:end="625:7"><name pos:start="625:5" pos:end="625:7">int</name></type> <name pos:start="625:9" pos:end="625:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="626:5" pos:end="626:17"><decl pos:start="626:5" pos:end="626:16"><type pos:start="626:5" pos:end="626:13"><name pos:start="626:5" pos:end="626:11">EST_CTX</name> <modifier pos:start="626:13" pos:end="626:13">*</modifier></type><name pos:start="626:14" pos:end="626:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="628:5" pos:end="629:5"><expr pos:start="628:5" pos:end="628:15"><name pos:start="628:5" pos:end="628:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="631:5" pos:end="633:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="634:5" pos:end="634:59"><expr pos:start="634:5" pos:end="634:58"><name pos:start="634:5" pos:end="634:15">cacerts_len</name> <operator pos:start="634:17" pos:end="634:17">=</operator> <call pos:start="634:19" pos:end="634:58"><name pos:start="634:19" pos:end="634:34">read_binary_file</name><argument_list pos:start="634:35" pos:end="634:58">(<argument pos:start="634:36" pos:end="634:47"><expr pos:start="634:36" pos:end="634:47"><name pos:start="634:36" pos:end="634:47">US901_CACERT</name></expr></argument>, <argument pos:start="634:50" pos:end="634:57"><expr pos:start="634:50" pos:end="634:57"><operator pos:start="634:50" pos:end="634:50">&amp;</operator><name pos:start="634:51" pos:end="634:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="635:5" pos:end="635:31"><expr pos:start="635:5" pos:end="635:30"><call pos:start="635:5" pos:end="635:30"><name pos:start="635:5" pos:end="635:13">CU_ASSERT</name><argument_list pos:start="635:14" pos:end="635:30">(<argument pos:start="635:15" pos:end="635:29"><expr pos:start="635:15" pos:end="635:29"><name pos:start="635:15" pos:end="635:25">cacerts_len</name> <operator pos:start="635:27" pos:end="635:27">&gt;</operator> <literal type="number" pos:start="635:29" pos:end="635:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="637:5" pos:end="639:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="640:5" pos:end="640:44"><expr pos:start="640:5" pos:end="640:43"><name pos:start="640:5" pos:end="640:10">certin</name> <operator pos:start="640:12" pos:end="640:12">=</operator> <call pos:start="640:14" pos:end="640:43"><name pos:start="640:14" pos:end="640:20">BIO_new</name><argument_list pos:start="640:21" pos:end="640:43">(<argument pos:start="640:22" pos:end="640:42"><expr pos:start="640:22" pos:end="640:42"><call pos:start="640:22" pos:end="640:42"><name pos:start="640:22" pos:end="640:40">BIO_s_file_internal</name><argument_list pos:start="640:41" pos:end="640:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="641:5" pos:end="641:54"><expr pos:start="641:5" pos:end="641:53"><name pos:start="641:5" pos:end="641:6">rv</name> <operator pos:start="641:8" pos:end="641:8">=</operator> <call pos:start="641:10" pos:end="641:53"><name pos:start="641:10" pos:end="641:26">BIO_read_filename</name><argument_list pos:start="641:27" pos:end="641:53">(<argument pos:start="641:28" pos:end="641:33"><expr pos:start="641:28" pos:end="641:33"><name pos:start="641:28" pos:end="641:33">certin</name></expr></argument>, <argument pos:start="641:36" pos:end="641:52"><expr pos:start="641:36" pos:end="641:52"><name pos:start="641:36" pos:end="641:52">US901_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="642:5" pos:end="642:22"><expr pos:start="642:5" pos:end="642:21"><call pos:start="642:5" pos:end="642:21"><name pos:start="642:5" pos:end="642:13">CU_ASSERT</name><argument_list pos:start="642:14" pos:end="642:21">(<argument pos:start="642:15" pos:end="642:20"><expr pos:start="642:15" pos:end="642:20"><name pos:start="642:15" pos:end="642:16">rv</name> <operator pos:start="642:18" pos:end="642:18">&gt;</operator> <literal type="number" pos:start="642:20" pos:end="642:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="643:5" pos:end="643:52"><expr pos:start="643:5" pos:end="643:51"><name pos:start="643:5" pos:end="643:5">x</name> <operator pos:start="643:7" pos:end="643:7">=</operator> <call pos:start="643:9" pos:end="643:51"><name pos:start="643:9" pos:end="643:25">PEM_read_bio_X509</name><argument_list pos:start="643:26" pos:end="643:51">(<argument pos:start="643:27" pos:end="643:32"><expr pos:start="643:27" pos:end="643:32"><name pos:start="643:27" pos:end="643:32">certin</name></expr></argument>, <argument pos:start="643:35" pos:end="643:38"><expr pos:start="643:35" pos:end="643:38"><name pos:start="643:35" pos:end="643:38">NULL</name></expr></argument>, <argument pos:start="643:41" pos:end="643:44"><expr pos:start="643:41" pos:end="643:44"><name pos:start="643:41" pos:end="643:44">NULL</name></expr></argument>, <argument pos:start="643:47" pos:end="643:50"><expr pos:start="643:47" pos:end="643:50"><name pos:start="643:47" pos:end="643:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="644:5" pos:end="644:25"><expr pos:start="644:5" pos:end="644:24"><call pos:start="644:5" pos:end="644:24"><name pos:start="644:5" pos:end="644:13">CU_ASSERT</name><argument_list pos:start="644:14" pos:end="644:24">(<argument pos:start="644:15" pos:end="644:23"><expr pos:start="644:15" pos:end="644:23"><name pos:start="644:15" pos:end="644:15">x</name> <operator pos:start="644:17" pos:end="644:18">!=</operator> <name pos:start="644:20" pos:end="644:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="645:5" pos:end="645:21"><expr pos:start="645:5" pos:end="645:20"><call pos:start="645:5" pos:end="645:20"><name pos:start="645:5" pos:end="645:12">BIO_free</name><argument_list pos:start="645:13" pos:end="645:20">(<argument pos:start="645:14" pos:end="645:19"><expr pos:start="645:14" pos:end="645:19"><name pos:start="645:14" pos:end="645:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="647:5" pos:end="649:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="650:5" pos:end="650:43"><expr pos:start="650:5" pos:end="650:42"><name pos:start="650:5" pos:end="650:9">keyin</name> <operator pos:start="650:11" pos:end="650:11">=</operator> <call pos:start="650:13" pos:end="650:42"><name pos:start="650:13" pos:end="650:19">BIO_new</name><argument_list pos:start="650:20" pos:end="650:42">(<argument pos:start="650:21" pos:end="650:41"><expr pos:start="650:21" pos:end="650:41"><call pos:start="650:21" pos:end="650:41"><name pos:start="650:21" pos:end="650:39">BIO_s_file_internal</name><argument_list pos:start="650:40" pos:end="650:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="651:5" pos:end="651:52"><expr pos:start="651:5" pos:end="651:51"><name pos:start="651:5" pos:end="651:6">rv</name> <operator pos:start="651:8" pos:end="651:8">=</operator> <call pos:start="651:10" pos:end="651:51"><name pos:start="651:10" pos:end="651:26">BIO_read_filename</name><argument_list pos:start="651:27" pos:end="651:51">(<argument pos:start="651:28" pos:end="651:32"><expr pos:start="651:28" pos:end="651:32"><name pos:start="651:28" pos:end="651:32">keyin</name></expr></argument>, <argument pos:start="651:35" pos:end="651:50"><expr pos:start="651:35" pos:end="651:50"><name pos:start="651:35" pos:end="651:50">US901_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="652:5" pos:end="652:22"><expr pos:start="652:5" pos:end="652:21"><call pos:start="652:5" pos:end="652:21"><name pos:start="652:5" pos:end="652:13">CU_ASSERT</name><argument_list pos:start="652:14" pos:end="652:21">(<argument pos:start="652:15" pos:end="652:20"><expr pos:start="652:15" pos:end="652:20"><name pos:start="652:15" pos:end="652:16">rv</name> <operator pos:start="652:18" pos:end="652:18">&gt;</operator> <literal type="number" pos:start="652:20" pos:end="652:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="653:5" pos:end="653:64"><expr pos:start="653:5" pos:end="653:63"><name pos:start="653:5" pos:end="653:12">priv_key</name> <operator pos:start="653:14" pos:end="653:14">=</operator> <call pos:start="653:16" pos:end="653:63"><name pos:start="653:16" pos:end="653:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="653:39" pos:end="653:63">(<argument pos:start="653:40" pos:end="653:44"><expr pos:start="653:40" pos:end="653:44"><name pos:start="653:40" pos:end="653:44">keyin</name></expr></argument>, <argument pos:start="653:47" pos:end="653:50"><expr pos:start="653:47" pos:end="653:50"><name pos:start="653:47" pos:end="653:50">NULL</name></expr></argument>, <argument pos:start="653:53" pos:end="653:56"><expr pos:start="653:53" pos:end="653:56"><name pos:start="653:53" pos:end="653:56">NULL</name></expr></argument>, <argument pos:start="653:59" pos:end="653:62"><expr pos:start="653:59" pos:end="653:62"><name pos:start="653:59" pos:end="653:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="654:5" pos:end="654:32"><expr pos:start="654:5" pos:end="654:31"><call pos:start="654:5" pos:end="654:31"><name pos:start="654:5" pos:end="654:13">CU_ASSERT</name><argument_list pos:start="654:14" pos:end="654:31">(<argument pos:start="654:15" pos:end="654:30"><expr pos:start="654:15" pos:end="654:30"><name pos:start="654:15" pos:end="654:22">priv_key</name> <operator pos:start="654:24" pos:end="654:25">!=</operator> <name pos:start="654:27" pos:end="654:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="655:5" pos:end="655:20"><expr pos:start="655:5" pos:end="655:19"><call pos:start="655:5" pos:end="655:19"><name pos:start="655:5" pos:end="655:12">BIO_free</name><argument_list pos:start="655:13" pos:end="655:19">(<argument pos:start="655:14" pos:end="655:18"><expr pos:start="655:14" pos:end="655:18"><name pos:start="655:14" pos:end="655:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="657:5" pos:end="659:7">/*
     * Attempt to init EST server using NULL realm
     */</comment>
    <expr_stmt pos:start="660:5" pos:end="660:44"><expr pos:start="660:5" pos:end="660:43"><call pos:start="660:5" pos:end="660:43"><name pos:start="660:5" pos:end="660:19">est_init_logger</name><argument_list pos:start="660:20" pos:end="660:43">(<argument pos:start="660:21" pos:end="660:36"><expr pos:start="660:21" pos:end="660:36"><name pos:start="660:21" pos:end="660:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="660:39" pos:end="660:42"><expr pos:start="660:39" pos:end="660:42"><name pos:start="660:39" pos:end="660:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="661:5" pos:end="663:31"><expr pos:start="661:5" pos:end="663:30"><name pos:start="661:5" pos:end="661:7">ctx</name> <operator pos:start="661:9" pos:end="661:9">=</operator> <call pos:start="661:11" pos:end="663:30"><name pos:start="661:11" pos:end="661:25">est_server_init</name><argument_list pos:start="661:26" pos:end="663:30">(<argument pos:start="661:27" pos:end="661:33"><expr pos:start="661:27" pos:end="661:33"><name pos:start="661:27" pos:end="661:33">cacerts</name></expr></argument>, <argument pos:start="661:36" pos:end="661:46"><expr pos:start="661:36" pos:end="661:46"><name pos:start="661:36" pos:end="661:46">cacerts_len</name></expr></argument>, <argument pos:start="661:49" pos:end="661:55"><expr pos:start="661:49" pos:end="661:55"><name pos:start="661:49" pos:end="661:55">cacerts</name></expr></argument>, <argument pos:start="661:58" pos:end="661:68"><expr pos:start="661:58" pos:end="661:68"><name pos:start="661:58" pos:end="661:68">cacerts_len</name></expr></argument>,
            <argument pos:start="662:13" pos:end="662:31"><expr pos:start="662:13" pos:end="662:31"><name pos:start="662:13" pos:end="662:31">EST_CERT_FORMAT_PEM</name></expr></argument>,
            <argument pos:start="663:13" pos:end="663:16"><expr pos:start="663:13" pos:end="663:16"><name pos:start="663:13" pos:end="663:16">NULL</name></expr></argument>, <argument pos:start="663:19" pos:end="663:19"><expr pos:start="663:19" pos:end="663:19"><name pos:start="663:19" pos:end="663:19">x</name></expr></argument>, <argument pos:start="663:22" pos:end="663:29"><expr pos:start="663:22" pos:end="663:29"><name pos:start="663:22" pos:end="663:29">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="664:5" pos:end="664:27"><expr pos:start="664:5" pos:end="664:26"><call pos:start="664:5" pos:end="664:26"><name pos:start="664:5" pos:end="664:13">CU_ASSERT</name><argument_list pos:start="664:14" pos:end="664:26">(<argument pos:start="664:15" pos:end="664:25"><expr pos:start="664:15" pos:end="664:25"><name pos:start="664:15" pos:end="664:17">ctx</name> <operator pos:start="664:19" pos:end="664:20">==</operator> <name pos:start="664:22" pos:end="664:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="666:5" pos:end="666:17"><expr pos:start="666:5" pos:end="666:16"><call pos:start="666:5" pos:end="666:16"><name pos:start="666:5" pos:end="666:13">X509_free</name><argument_list pos:start="666:14" pos:end="666:16">(<argument pos:start="666:15" pos:end="666:15"><expr pos:start="666:15" pos:end="666:15"><name pos:start="666:15" pos:end="666:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="667:5" pos:end="667:28"><expr pos:start="667:5" pos:end="667:27"><call pos:start="667:5" pos:end="667:27"><name pos:start="667:5" pos:end="667:17">EVP_PKEY_free</name><argument_list pos:start="667:18" pos:end="667:27">(<argument pos:start="667:19" pos:end="667:26"><expr pos:start="667:19" pos:end="667:26"><name pos:start="667:19" pos:end="667:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="670:1" pos:end="672:3">/*
 * Null Server certificate when initializing server
 */</comment>
<function pos:start="673:1" pos:end="709:1"><type pos:start="673:1" pos:end="673:11"><specifier pos:start="673:1" pos:end="673:6">static</specifier> <name pos:start="673:8" pos:end="673:11">void</name></type> <name pos:start="673:13" pos:end="673:24">us901_test16</name><parameter_list pos:start="673:25" pos:end="673:30">(<parameter pos:start="673:26" pos:end="673:29"><decl pos:start="673:26" pos:end="673:29"><type pos:start="673:26" pos:end="673:29"><name pos:start="673:26" pos:end="673:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="673:32" pos:end="709:1">{<block_content pos:start="674:5" pos:end="708:28">
    <decl_stmt pos:start="674:5" pos:end="674:34"><decl pos:start="674:5" pos:end="674:33"><type pos:start="674:5" pos:end="674:19"><name pos:start="674:5" pos:end="674:12">unsigned</name> <name pos:start="674:14" pos:end="674:17">char</name> <modifier pos:start="674:19" pos:end="674:19">*</modifier></type><name pos:start="674:20" pos:end="674:26">cacerts</name> <init pos:start="674:28" pos:end="674:33">= <expr pos:start="674:30" pos:end="674:33"><name pos:start="674:30" pos:end="674:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="675:5" pos:end="675:24"><decl pos:start="675:5" pos:end="675:23"><type pos:start="675:5" pos:end="675:7"><name pos:start="675:5" pos:end="675:7">int</name></type> <name pos:start="675:9" pos:end="675:19">cacerts_len</name> <init pos:start="675:21" pos:end="675:23">= <expr pos:start="675:23" pos:end="675:23"><literal type="number" pos:start="675:23" pos:end="675:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="676:5" pos:end="676:15"><decl pos:start="676:5" pos:end="676:14"><type pos:start="676:5" pos:end="676:9"><name pos:start="676:5" pos:end="676:7">BIO</name> <modifier pos:start="676:9" pos:end="676:9">*</modifier></type><name pos:start="676:10" pos:end="676:14">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="677:5" pos:end="677:23"><decl pos:start="677:5" pos:end="677:22"><type pos:start="677:5" pos:end="677:14"><name pos:start="677:5" pos:end="677:12">EVP_PKEY</name> <modifier pos:start="677:14" pos:end="677:14">*</modifier></type><name pos:start="677:15" pos:end="677:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="678:5" pos:end="678:11"><decl pos:start="678:5" pos:end="678:10"><type pos:start="678:5" pos:end="678:7"><name pos:start="678:5" pos:end="678:7">int</name></type> <name pos:start="678:9" pos:end="678:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="679:5" pos:end="679:17"><decl pos:start="679:5" pos:end="679:16"><type pos:start="679:5" pos:end="679:13"><name pos:start="679:5" pos:end="679:11">EST_CTX</name> <modifier pos:start="679:13" pos:end="679:13">*</modifier></type><name pos:start="679:14" pos:end="679:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="681:5" pos:end="682:5"><expr pos:start="681:5" pos:end="681:15"><name pos:start="681:5" pos:end="681:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="684:5" pos:end="686:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="687:5" pos:end="687:59"><expr pos:start="687:5" pos:end="687:58"><name pos:start="687:5" pos:end="687:15">cacerts_len</name> <operator pos:start="687:17" pos:end="687:17">=</operator> <call pos:start="687:19" pos:end="687:58"><name pos:start="687:19" pos:end="687:34">read_binary_file</name><argument_list pos:start="687:35" pos:end="687:58">(<argument pos:start="687:36" pos:end="687:47"><expr pos:start="687:36" pos:end="687:47"><name pos:start="687:36" pos:end="687:47">US901_CACERT</name></expr></argument>, <argument pos:start="687:50" pos:end="687:57"><expr pos:start="687:50" pos:end="687:57"><operator pos:start="687:50" pos:end="687:50">&amp;</operator><name pos:start="687:51" pos:end="687:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="688:5" pos:end="688:31"><expr pos:start="688:5" pos:end="688:30"><call pos:start="688:5" pos:end="688:30"><name pos:start="688:5" pos:end="688:13">CU_ASSERT</name><argument_list pos:start="688:14" pos:end="688:30">(<argument pos:start="688:15" pos:end="688:29"><expr pos:start="688:15" pos:end="688:29"><name pos:start="688:15" pos:end="688:25">cacerts_len</name> <operator pos:start="688:27" pos:end="688:27">&gt;</operator> <literal type="number" pos:start="688:29" pos:end="688:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="690:5" pos:end="692:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="693:5" pos:end="693:43"><expr pos:start="693:5" pos:end="693:42"><name pos:start="693:5" pos:end="693:9">keyin</name> <operator pos:start="693:11" pos:end="693:11">=</operator> <call pos:start="693:13" pos:end="693:42"><name pos:start="693:13" pos:end="693:19">BIO_new</name><argument_list pos:start="693:20" pos:end="693:42">(<argument pos:start="693:21" pos:end="693:41"><expr pos:start="693:21" pos:end="693:41"><call pos:start="693:21" pos:end="693:41"><name pos:start="693:21" pos:end="693:39">BIO_s_file_internal</name><argument_list pos:start="693:40" pos:end="693:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="694:5" pos:end="694:52"><expr pos:start="694:5" pos:end="694:51"><name pos:start="694:5" pos:end="694:6">rv</name> <operator pos:start="694:8" pos:end="694:8">=</operator> <call pos:start="694:10" pos:end="694:51"><name pos:start="694:10" pos:end="694:26">BIO_read_filename</name><argument_list pos:start="694:27" pos:end="694:51">(<argument pos:start="694:28" pos:end="694:32"><expr pos:start="694:28" pos:end="694:32"><name pos:start="694:28" pos:end="694:32">keyin</name></expr></argument>, <argument pos:start="694:35" pos:end="694:50"><expr pos:start="694:35" pos:end="694:50"><name pos:start="694:35" pos:end="694:50">US901_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="695:5" pos:end="695:22"><expr pos:start="695:5" pos:end="695:21"><call pos:start="695:5" pos:end="695:21"><name pos:start="695:5" pos:end="695:13">CU_ASSERT</name><argument_list pos:start="695:14" pos:end="695:21">(<argument pos:start="695:15" pos:end="695:20"><expr pos:start="695:15" pos:end="695:20"><name pos:start="695:15" pos:end="695:16">rv</name> <operator pos:start="695:18" pos:end="695:18">&gt;</operator> <literal type="number" pos:start="695:20" pos:end="695:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="696:5" pos:end="696:64"><expr pos:start="696:5" pos:end="696:63"><name pos:start="696:5" pos:end="696:12">priv_key</name> <operator pos:start="696:14" pos:end="696:14">=</operator> <call pos:start="696:16" pos:end="696:63"><name pos:start="696:16" pos:end="696:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="696:39" pos:end="696:63">(<argument pos:start="696:40" pos:end="696:44"><expr pos:start="696:40" pos:end="696:44"><name pos:start="696:40" pos:end="696:44">keyin</name></expr></argument>, <argument pos:start="696:47" pos:end="696:50"><expr pos:start="696:47" pos:end="696:50"><name pos:start="696:47" pos:end="696:50">NULL</name></expr></argument>, <argument pos:start="696:53" pos:end="696:56"><expr pos:start="696:53" pos:end="696:56"><name pos:start="696:53" pos:end="696:56">NULL</name></expr></argument>, <argument pos:start="696:59" pos:end="696:62"><expr pos:start="696:59" pos:end="696:62"><name pos:start="696:59" pos:end="696:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="697:5" pos:end="697:32"><expr pos:start="697:5" pos:end="697:31"><call pos:start="697:5" pos:end="697:31"><name pos:start="697:5" pos:end="697:13">CU_ASSERT</name><argument_list pos:start="697:14" pos:end="697:31">(<argument pos:start="697:15" pos:end="697:30"><expr pos:start="697:15" pos:end="697:30"><name pos:start="697:15" pos:end="697:22">priv_key</name> <operator pos:start="697:24" pos:end="697:25">!=</operator> <name pos:start="697:27" pos:end="697:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="698:5" pos:end="698:20"><expr pos:start="698:5" pos:end="698:19"><call pos:start="698:5" pos:end="698:19"><name pos:start="698:5" pos:end="698:12">BIO_free</name><argument_list pos:start="698:13" pos:end="698:19">(<argument pos:start="698:14" pos:end="698:18"><expr pos:start="698:14" pos:end="698:18"><name pos:start="698:14" pos:end="698:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="700:5" pos:end="702:7">/*
     * Attempt to init EST server using NULL server key
     */</comment>
    <expr_stmt pos:start="703:5" pos:end="703:44"><expr pos:start="703:5" pos:end="703:43"><call pos:start="703:5" pos:end="703:43"><name pos:start="703:5" pos:end="703:19">est_init_logger</name><argument_list pos:start="703:20" pos:end="703:43">(<argument pos:start="703:21" pos:end="703:36"><expr pos:start="703:21" pos:end="703:36"><name pos:start="703:21" pos:end="703:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="703:39" pos:end="703:42"><expr pos:start="703:39" pos:end="703:42"><name pos:start="703:39" pos:end="703:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="704:5" pos:end="705:62"><expr pos:start="704:5" pos:end="705:61"><name pos:start="704:5" pos:end="704:7">ctx</name> <operator pos:start="704:9" pos:end="704:9">=</operator> <call pos:start="704:11" pos:end="705:61"><name pos:start="704:11" pos:end="704:25">est_server_init</name><argument_list pos:start="704:26" pos:end="705:61">(<argument pos:start="704:27" pos:end="704:33"><expr pos:start="704:27" pos:end="704:33"><name pos:start="704:27" pos:end="704:33">cacerts</name></expr></argument>, <argument pos:start="704:36" pos:end="704:46"><expr pos:start="704:36" pos:end="704:46"><name pos:start="704:36" pos:end="704:46">cacerts_len</name></expr></argument>, <argument pos:start="704:49" pos:end="704:55"><expr pos:start="704:49" pos:end="704:55"><name pos:start="704:49" pos:end="704:55">cacerts</name></expr></argument>, <argument pos:start="704:58" pos:end="704:68"><expr pos:start="704:58" pos:end="704:68"><name pos:start="704:58" pos:end="704:68">cacerts_len</name></expr></argument>,
            <argument pos:start="705:13" pos:end="705:31"><expr pos:start="705:13" pos:end="705:31"><name pos:start="705:13" pos:end="705:31">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="705:34" pos:end="705:44"><expr pos:start="705:34" pos:end="705:44"><literal type="string" pos:start="705:34" pos:end="705:44">"testrealm"</literal></expr></argument>, <argument pos:start="705:47" pos:end="705:50"><expr pos:start="705:47" pos:end="705:50"><name pos:start="705:47" pos:end="705:50">NULL</name></expr></argument>, <argument pos:start="705:53" pos:end="705:60"><expr pos:start="705:53" pos:end="705:60"><name pos:start="705:53" pos:end="705:60">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="706:5" pos:end="706:27"><expr pos:start="706:5" pos:end="706:26"><call pos:start="706:5" pos:end="706:26"><name pos:start="706:5" pos:end="706:13">CU_ASSERT</name><argument_list pos:start="706:14" pos:end="706:26">(<argument pos:start="706:15" pos:end="706:25"><expr pos:start="706:15" pos:end="706:25"><name pos:start="706:15" pos:end="706:17">ctx</name> <operator pos:start="706:19" pos:end="706:20">==</operator> <name pos:start="706:22" pos:end="706:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="708:5" pos:end="708:28"><expr pos:start="708:5" pos:end="708:27"><call pos:start="708:5" pos:end="708:27"><name pos:start="708:5" pos:end="708:17">EVP_PKEY_free</name><argument_list pos:start="708:18" pos:end="708:27">(<argument pos:start="708:19" pos:end="708:26"><expr pos:start="708:19" pos:end="708:26"><name pos:start="708:19" pos:end="708:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="711:1" pos:end="713:3">/*
 * Null Server certificate private key when initializing server
 */</comment>
<function pos:start="714:1" pos:end="750:1"><type pos:start="714:1" pos:end="714:11"><specifier pos:start="714:1" pos:end="714:6">static</specifier> <name pos:start="714:8" pos:end="714:11">void</name></type> <name pos:start="714:13" pos:end="714:24">us901_test17</name><parameter_list pos:start="714:25" pos:end="714:30">(<parameter pos:start="714:26" pos:end="714:29"><decl pos:start="714:26" pos:end="714:29"><type pos:start="714:26" pos:end="714:29"><name pos:start="714:26" pos:end="714:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="714:32" pos:end="750:1">{<block_content pos:start="715:5" pos:end="749:17">
    <decl_stmt pos:start="715:5" pos:end="715:34"><decl pos:start="715:5" pos:end="715:33"><type pos:start="715:5" pos:end="715:19"><name pos:start="715:5" pos:end="715:12">unsigned</name> <name pos:start="715:14" pos:end="715:17">char</name> <modifier pos:start="715:19" pos:end="715:19">*</modifier></type><name pos:start="715:20" pos:end="715:26">cacerts</name> <init pos:start="715:28" pos:end="715:33">= <expr pos:start="715:30" pos:end="715:33"><name pos:start="715:30" pos:end="715:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="716:5" pos:end="716:24"><decl pos:start="716:5" pos:end="716:23"><type pos:start="716:5" pos:end="716:7"><name pos:start="716:5" pos:end="716:7">int</name></type> <name pos:start="716:9" pos:end="716:19">cacerts_len</name> <init pos:start="716:21" pos:end="716:23">= <expr pos:start="716:23" pos:end="716:23"><literal type="number" pos:start="716:23" pos:end="716:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="717:5" pos:end="717:16"><decl pos:start="717:5" pos:end="717:15"><type pos:start="717:5" pos:end="717:9"><name pos:start="717:5" pos:end="717:7">BIO</name> <modifier pos:start="717:9" pos:end="717:9">*</modifier></type><name pos:start="717:10" pos:end="717:15">certin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="718:5" pos:end="718:12"><decl pos:start="718:5" pos:end="718:11"><type pos:start="718:5" pos:end="718:10"><name pos:start="718:5" pos:end="718:8">X509</name> <modifier pos:start="718:10" pos:end="718:10">*</modifier></type><name pos:start="718:11" pos:end="718:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="719:5" pos:end="719:11"><decl pos:start="719:5" pos:end="719:10"><type pos:start="719:5" pos:end="719:7"><name pos:start="719:5" pos:end="719:7">int</name></type> <name pos:start="719:9" pos:end="719:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="720:5" pos:end="720:17"><decl pos:start="720:5" pos:end="720:16"><type pos:start="720:5" pos:end="720:13"><name pos:start="720:5" pos:end="720:11">EST_CTX</name> <modifier pos:start="720:13" pos:end="720:13">*</modifier></type><name pos:start="720:14" pos:end="720:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="722:5" pos:end="723:5"><expr pos:start="722:5" pos:end="722:15"><name pos:start="722:5" pos:end="722:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="725:5" pos:end="727:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="728:5" pos:end="728:59"><expr pos:start="728:5" pos:end="728:58"><name pos:start="728:5" pos:end="728:15">cacerts_len</name> <operator pos:start="728:17" pos:end="728:17">=</operator> <call pos:start="728:19" pos:end="728:58"><name pos:start="728:19" pos:end="728:34">read_binary_file</name><argument_list pos:start="728:35" pos:end="728:58">(<argument pos:start="728:36" pos:end="728:47"><expr pos:start="728:36" pos:end="728:47"><name pos:start="728:36" pos:end="728:47">US901_CACERT</name></expr></argument>, <argument pos:start="728:50" pos:end="728:57"><expr pos:start="728:50" pos:end="728:57"><operator pos:start="728:50" pos:end="728:50">&amp;</operator><name pos:start="728:51" pos:end="728:57">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="729:5" pos:end="729:31"><expr pos:start="729:5" pos:end="729:30"><call pos:start="729:5" pos:end="729:30"><name pos:start="729:5" pos:end="729:13">CU_ASSERT</name><argument_list pos:start="729:14" pos:end="729:30">(<argument pos:start="729:15" pos:end="729:29"><expr pos:start="729:15" pos:end="729:29"><name pos:start="729:15" pos:end="729:25">cacerts_len</name> <operator pos:start="729:27" pos:end="729:27">&gt;</operator> <literal type="number" pos:start="729:29" pos:end="729:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="731:5" pos:end="733:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="734:5" pos:end="734:44"><expr pos:start="734:5" pos:end="734:43"><name pos:start="734:5" pos:end="734:10">certin</name> <operator pos:start="734:12" pos:end="734:12">=</operator> <call pos:start="734:14" pos:end="734:43"><name pos:start="734:14" pos:end="734:20">BIO_new</name><argument_list pos:start="734:21" pos:end="734:43">(<argument pos:start="734:22" pos:end="734:42"><expr pos:start="734:22" pos:end="734:42"><call pos:start="734:22" pos:end="734:42"><name pos:start="734:22" pos:end="734:40">BIO_s_file_internal</name><argument_list pos:start="734:41" pos:end="734:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="735:5" pos:end="735:54"><expr pos:start="735:5" pos:end="735:53"><name pos:start="735:5" pos:end="735:6">rv</name> <operator pos:start="735:8" pos:end="735:8">=</operator> <call pos:start="735:10" pos:end="735:53"><name pos:start="735:10" pos:end="735:26">BIO_read_filename</name><argument_list pos:start="735:27" pos:end="735:53">(<argument pos:start="735:28" pos:end="735:33"><expr pos:start="735:28" pos:end="735:33"><name pos:start="735:28" pos:end="735:33">certin</name></expr></argument>, <argument pos:start="735:36" pos:end="735:52"><expr pos:start="735:36" pos:end="735:52"><name pos:start="735:36" pos:end="735:52">US901_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="736:5" pos:end="736:22"><expr pos:start="736:5" pos:end="736:21"><call pos:start="736:5" pos:end="736:21"><name pos:start="736:5" pos:end="736:13">CU_ASSERT</name><argument_list pos:start="736:14" pos:end="736:21">(<argument pos:start="736:15" pos:end="736:20"><expr pos:start="736:15" pos:end="736:20"><name pos:start="736:15" pos:end="736:16">rv</name> <operator pos:start="736:18" pos:end="736:18">&gt;</operator> <literal type="number" pos:start="736:20" pos:end="736:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="737:5" pos:end="737:52"><expr pos:start="737:5" pos:end="737:51"><name pos:start="737:5" pos:end="737:5">x</name> <operator pos:start="737:7" pos:end="737:7">=</operator> <call pos:start="737:9" pos:end="737:51"><name pos:start="737:9" pos:end="737:25">PEM_read_bio_X509</name><argument_list pos:start="737:26" pos:end="737:51">(<argument pos:start="737:27" pos:end="737:32"><expr pos:start="737:27" pos:end="737:32"><name pos:start="737:27" pos:end="737:32">certin</name></expr></argument>, <argument pos:start="737:35" pos:end="737:38"><expr pos:start="737:35" pos:end="737:38"><name pos:start="737:35" pos:end="737:38">NULL</name></expr></argument>, <argument pos:start="737:41" pos:end="737:44"><expr pos:start="737:41" pos:end="737:44"><name pos:start="737:41" pos:end="737:44">NULL</name></expr></argument>, <argument pos:start="737:47" pos:end="737:50"><expr pos:start="737:47" pos:end="737:50"><name pos:start="737:47" pos:end="737:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="738:5" pos:end="738:25"><expr pos:start="738:5" pos:end="738:24"><call pos:start="738:5" pos:end="738:24"><name pos:start="738:5" pos:end="738:13">CU_ASSERT</name><argument_list pos:start="738:14" pos:end="738:24">(<argument pos:start="738:15" pos:end="738:23"><expr pos:start="738:15" pos:end="738:23"><name pos:start="738:15" pos:end="738:15">x</name> <operator pos:start="738:17" pos:end="738:18">!=</operator> <name pos:start="738:20" pos:end="738:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="739:5" pos:end="739:21"><expr pos:start="739:5" pos:end="739:20"><call pos:start="739:5" pos:end="739:20"><name pos:start="739:5" pos:end="739:12">BIO_free</name><argument_list pos:start="739:13" pos:end="739:20">(<argument pos:start="739:14" pos:end="739:19"><expr pos:start="739:14" pos:end="739:19"><name pos:start="739:14" pos:end="739:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="741:5" pos:end="743:7">/*
     * Attempt to init EST server using NULL private key
     */</comment>
    <expr_stmt pos:start="744:5" pos:end="744:44"><expr pos:start="744:5" pos:end="744:43"><call pos:start="744:5" pos:end="744:43"><name pos:start="744:5" pos:end="744:19">est_init_logger</name><argument_list pos:start="744:20" pos:end="744:43">(<argument pos:start="744:21" pos:end="744:36"><expr pos:start="744:21" pos:end="744:36"><name pos:start="744:21" pos:end="744:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="744:39" pos:end="744:42"><expr pos:start="744:39" pos:end="744:42"><name pos:start="744:39" pos:end="744:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="745:5" pos:end="746:55"><expr pos:start="745:5" pos:end="746:54"><name pos:start="745:5" pos:end="745:7">ctx</name> <operator pos:start="745:9" pos:end="745:9">=</operator> <call pos:start="745:11" pos:end="746:54"><name pos:start="745:11" pos:end="745:25">est_server_init</name><argument_list pos:start="745:26" pos:end="746:54">(<argument pos:start="745:27" pos:end="745:33"><expr pos:start="745:27" pos:end="745:33"><name pos:start="745:27" pos:end="745:33">cacerts</name></expr></argument>, <argument pos:start="745:36" pos:end="745:46"><expr pos:start="745:36" pos:end="745:46"><name pos:start="745:36" pos:end="745:46">cacerts_len</name></expr></argument>, <argument pos:start="745:49" pos:end="745:55"><expr pos:start="745:49" pos:end="745:55"><name pos:start="745:49" pos:end="745:55">cacerts</name></expr></argument>, <argument pos:start="745:58" pos:end="745:68"><expr pos:start="745:58" pos:end="745:68"><name pos:start="745:58" pos:end="745:68">cacerts_len</name></expr></argument>,
            <argument pos:start="746:13" pos:end="746:31"><expr pos:start="746:13" pos:end="746:31"><name pos:start="746:13" pos:end="746:31">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="746:34" pos:end="746:44"><expr pos:start="746:34" pos:end="746:44"><literal type="string" pos:start="746:34" pos:end="746:44">"testrealm"</literal></expr></argument>, <argument pos:start="746:47" pos:end="746:47"><expr pos:start="746:47" pos:end="746:47"><name pos:start="746:47" pos:end="746:47">x</name></expr></argument>, <argument pos:start="746:50" pos:end="746:53"><expr pos:start="746:50" pos:end="746:53"><name pos:start="746:50" pos:end="746:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="747:5" pos:end="747:27"><expr pos:start="747:5" pos:end="747:26"><call pos:start="747:5" pos:end="747:26"><name pos:start="747:5" pos:end="747:13">CU_ASSERT</name><argument_list pos:start="747:14" pos:end="747:26">(<argument pos:start="747:15" pos:end="747:25"><expr pos:start="747:15" pos:end="747:25"><name pos:start="747:15" pos:end="747:17">ctx</name> <operator pos:start="747:19" pos:end="747:20">==</operator> <name pos:start="747:22" pos:end="747:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="749:5" pos:end="749:17"><expr pos:start="749:5" pos:end="749:16"><call pos:start="749:5" pos:end="749:16"><name pos:start="749:5" pos:end="749:13">X509_free</name><argument_list pos:start="749:14" pos:end="749:16">(<argument pos:start="749:15" pos:end="749:15"><expr pos:start="749:15" pos:end="749:15"><name pos:start="749:15" pos:end="749:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="752:1" pos:end="754:3">/*
 * Null trusted CA chain when initializing server
 */</comment>
<function pos:start="755:1" pos:end="795:1"><type pos:start="755:1" pos:end="755:11"><specifier pos:start="755:1" pos:end="755:6">static</specifier> <name pos:start="755:8" pos:end="755:11">void</name></type> <name pos:start="755:13" pos:end="755:24">us901_test18</name><parameter_list pos:start="755:25" pos:end="755:30">(<parameter pos:start="755:26" pos:end="755:29"><decl pos:start="755:26" pos:end="755:29"><type pos:start="755:26" pos:end="755:29"><name pos:start="755:26" pos:end="755:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="755:32" pos:end="795:1">{<block_content pos:start="756:5" pos:end="794:28">
    <decl_stmt pos:start="756:5" pos:end="756:24"><decl pos:start="756:5" pos:end="756:15"><type pos:start="756:5" pos:end="756:9"><name pos:start="756:5" pos:end="756:7">BIO</name> <modifier pos:start="756:9" pos:end="756:9">*</modifier></type><name pos:start="756:10" pos:end="756:15">certin</name></decl>, <decl pos:start="756:18" pos:end="756:23"><type ref="prev" pos:start="756:5" pos:end="756:9"><modifier pos:start="756:18" pos:end="756:18">*</modifier></type><name pos:start="756:19" pos:end="756:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="757:5" pos:end="757:12"><decl pos:start="757:5" pos:end="757:11"><type pos:start="757:5" pos:end="757:10"><name pos:start="757:5" pos:end="757:8">X509</name> <modifier pos:start="757:10" pos:end="757:10">*</modifier></type><name pos:start="757:11" pos:end="757:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="758:5" pos:end="758:23"><decl pos:start="758:5" pos:end="758:22"><type pos:start="758:5" pos:end="758:14"><name pos:start="758:5" pos:end="758:12">EVP_PKEY</name> <modifier pos:start="758:14" pos:end="758:14">*</modifier></type><name pos:start="758:15" pos:end="758:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="759:5" pos:end="759:11"><decl pos:start="759:5" pos:end="759:10"><type pos:start="759:5" pos:end="759:7"><name pos:start="759:5" pos:end="759:7">int</name></type> <name pos:start="759:9" pos:end="759:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="760:5" pos:end="760:17"><decl pos:start="760:5" pos:end="760:16"><type pos:start="760:5" pos:end="760:13"><name pos:start="760:5" pos:end="760:11">EST_CTX</name> <modifier pos:start="760:13" pos:end="760:13">*</modifier></type><name pos:start="760:14" pos:end="760:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="762:5" pos:end="763:5"><expr pos:start="762:5" pos:end="762:15"><name pos:start="762:5" pos:end="762:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="765:5" pos:end="767:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="768:5" pos:end="768:44"><expr pos:start="768:5" pos:end="768:43"><name pos:start="768:5" pos:end="768:10">certin</name> <operator pos:start="768:12" pos:end="768:12">=</operator> <call pos:start="768:14" pos:end="768:43"><name pos:start="768:14" pos:end="768:20">BIO_new</name><argument_list pos:start="768:21" pos:end="768:43">(<argument pos:start="768:22" pos:end="768:42"><expr pos:start="768:22" pos:end="768:42"><call pos:start="768:22" pos:end="768:42"><name pos:start="768:22" pos:end="768:40">BIO_s_file_internal</name><argument_list pos:start="768:41" pos:end="768:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="769:5" pos:end="769:54"><expr pos:start="769:5" pos:end="769:53"><name pos:start="769:5" pos:end="769:6">rv</name> <operator pos:start="769:8" pos:end="769:8">=</operator> <call pos:start="769:10" pos:end="769:53"><name pos:start="769:10" pos:end="769:26">BIO_read_filename</name><argument_list pos:start="769:27" pos:end="769:53">(<argument pos:start="769:28" pos:end="769:33"><expr pos:start="769:28" pos:end="769:33"><name pos:start="769:28" pos:end="769:33">certin</name></expr></argument>, <argument pos:start="769:36" pos:end="769:52"><expr pos:start="769:36" pos:end="769:52"><name pos:start="769:36" pos:end="769:52">US901_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="770:5" pos:end="770:22"><expr pos:start="770:5" pos:end="770:21"><call pos:start="770:5" pos:end="770:21"><name pos:start="770:5" pos:end="770:13">CU_ASSERT</name><argument_list pos:start="770:14" pos:end="770:21">(<argument pos:start="770:15" pos:end="770:20"><expr pos:start="770:15" pos:end="770:20"><name pos:start="770:15" pos:end="770:16">rv</name> <operator pos:start="770:18" pos:end="770:18">&gt;</operator> <literal type="number" pos:start="770:20" pos:end="770:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="771:5" pos:end="771:52"><expr pos:start="771:5" pos:end="771:51"><name pos:start="771:5" pos:end="771:5">x</name> <operator pos:start="771:7" pos:end="771:7">=</operator> <call pos:start="771:9" pos:end="771:51"><name pos:start="771:9" pos:end="771:25">PEM_read_bio_X509</name><argument_list pos:start="771:26" pos:end="771:51">(<argument pos:start="771:27" pos:end="771:32"><expr pos:start="771:27" pos:end="771:32"><name pos:start="771:27" pos:end="771:32">certin</name></expr></argument>, <argument pos:start="771:35" pos:end="771:38"><expr pos:start="771:35" pos:end="771:38"><name pos:start="771:35" pos:end="771:38">NULL</name></expr></argument>, <argument pos:start="771:41" pos:end="771:44"><expr pos:start="771:41" pos:end="771:44"><name pos:start="771:41" pos:end="771:44">NULL</name></expr></argument>, <argument pos:start="771:47" pos:end="771:50"><expr pos:start="771:47" pos:end="771:50"><name pos:start="771:47" pos:end="771:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="772:5" pos:end="772:25"><expr pos:start="772:5" pos:end="772:24"><call pos:start="772:5" pos:end="772:24"><name pos:start="772:5" pos:end="772:13">CU_ASSERT</name><argument_list pos:start="772:14" pos:end="772:24">(<argument pos:start="772:15" pos:end="772:23"><expr pos:start="772:15" pos:end="772:23"><name pos:start="772:15" pos:end="772:15">x</name> <operator pos:start="772:17" pos:end="772:18">!=</operator> <name pos:start="772:20" pos:end="772:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="773:5" pos:end="773:21"><expr pos:start="773:5" pos:end="773:20"><call pos:start="773:5" pos:end="773:20"><name pos:start="773:5" pos:end="773:12">BIO_free</name><argument_list pos:start="773:13" pos:end="773:20">(<argument pos:start="773:14" pos:end="773:19"><expr pos:start="773:14" pos:end="773:19"><name pos:start="773:14" pos:end="773:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="775:5" pos:end="777:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="778:5" pos:end="778:43"><expr pos:start="778:5" pos:end="778:42"><name pos:start="778:5" pos:end="778:9">keyin</name> <operator pos:start="778:11" pos:end="778:11">=</operator> <call pos:start="778:13" pos:end="778:42"><name pos:start="778:13" pos:end="778:19">BIO_new</name><argument_list pos:start="778:20" pos:end="778:42">(<argument pos:start="778:21" pos:end="778:41"><expr pos:start="778:21" pos:end="778:41"><call pos:start="778:21" pos:end="778:41"><name pos:start="778:21" pos:end="778:39">BIO_s_file_internal</name><argument_list pos:start="778:40" pos:end="778:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="779:5" pos:end="779:52"><expr pos:start="779:5" pos:end="779:51"><name pos:start="779:5" pos:end="779:6">rv</name> <operator pos:start="779:8" pos:end="779:8">=</operator> <call pos:start="779:10" pos:end="779:51"><name pos:start="779:10" pos:end="779:26">BIO_read_filename</name><argument_list pos:start="779:27" pos:end="779:51">(<argument pos:start="779:28" pos:end="779:32"><expr pos:start="779:28" pos:end="779:32"><name pos:start="779:28" pos:end="779:32">keyin</name></expr></argument>, <argument pos:start="779:35" pos:end="779:50"><expr pos:start="779:35" pos:end="779:50"><name pos:start="779:35" pos:end="779:50">US901_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="780:5" pos:end="780:22"><expr pos:start="780:5" pos:end="780:21"><call pos:start="780:5" pos:end="780:21"><name pos:start="780:5" pos:end="780:13">CU_ASSERT</name><argument_list pos:start="780:14" pos:end="780:21">(<argument pos:start="780:15" pos:end="780:20"><expr pos:start="780:15" pos:end="780:20"><name pos:start="780:15" pos:end="780:16">rv</name> <operator pos:start="780:18" pos:end="780:18">&gt;</operator> <literal type="number" pos:start="780:20" pos:end="780:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="781:5" pos:end="781:64"><expr pos:start="781:5" pos:end="781:63"><name pos:start="781:5" pos:end="781:12">priv_key</name> <operator pos:start="781:14" pos:end="781:14">=</operator> <call pos:start="781:16" pos:end="781:63"><name pos:start="781:16" pos:end="781:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="781:39" pos:end="781:63">(<argument pos:start="781:40" pos:end="781:44"><expr pos:start="781:40" pos:end="781:44"><name pos:start="781:40" pos:end="781:44">keyin</name></expr></argument>, <argument pos:start="781:47" pos:end="781:50"><expr pos:start="781:47" pos:end="781:50"><name pos:start="781:47" pos:end="781:50">NULL</name></expr></argument>, <argument pos:start="781:53" pos:end="781:56"><expr pos:start="781:53" pos:end="781:56"><name pos:start="781:53" pos:end="781:56">NULL</name></expr></argument>, <argument pos:start="781:59" pos:end="781:62"><expr pos:start="781:59" pos:end="781:62"><name pos:start="781:59" pos:end="781:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="782:5" pos:end="782:32"><expr pos:start="782:5" pos:end="782:31"><call pos:start="782:5" pos:end="782:31"><name pos:start="782:5" pos:end="782:13">CU_ASSERT</name><argument_list pos:start="782:14" pos:end="782:31">(<argument pos:start="782:15" pos:end="782:30"><expr pos:start="782:15" pos:end="782:30"><name pos:start="782:15" pos:end="782:22">priv_key</name> <operator pos:start="782:24" pos:end="782:25">!=</operator> <name pos:start="782:27" pos:end="782:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="783:5" pos:end="783:20"><expr pos:start="783:5" pos:end="783:19"><call pos:start="783:5" pos:end="783:19"><name pos:start="783:5" pos:end="783:12">BIO_free</name><argument_list pos:start="783:13" pos:end="783:19">(<argument pos:start="783:14" pos:end="783:18"><expr pos:start="783:14" pos:end="783:18"><name pos:start="783:14" pos:end="783:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="785:5" pos:end="787:7">/*
     * Attempt to init EST server using NULL local CA chain
     */</comment>
    <expr_stmt pos:start="788:5" pos:end="788:44"><expr pos:start="788:5" pos:end="788:43"><call pos:start="788:5" pos:end="788:43"><name pos:start="788:5" pos:end="788:19">est_init_logger</name><argument_list pos:start="788:20" pos:end="788:43">(<argument pos:start="788:21" pos:end="788:36"><expr pos:start="788:21" pos:end="788:36"><name pos:start="788:21" pos:end="788:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="788:39" pos:end="788:42"><expr pos:start="788:39" pos:end="788:42"><name pos:start="788:39" pos:end="788:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="789:5" pos:end="790:22"><expr pos:start="789:5" pos:end="790:21"><name pos:start="789:5" pos:end="789:7">ctx</name> <operator pos:start="789:9" pos:end="789:9">=</operator> <call pos:start="789:11" pos:end="790:21"><name pos:start="789:11" pos:end="789:25">est_server_init</name><argument_list pos:start="789:26" pos:end="790:21">(<argument pos:start="789:27" pos:end="789:30"><expr pos:start="789:27" pos:end="789:30"><name pos:start="789:27" pos:end="789:30">NULL</name></expr></argument>, <argument pos:start="789:33" pos:end="789:33"><expr pos:start="789:33" pos:end="789:33"><literal type="number" pos:start="789:33" pos:end="789:33">0</literal></expr></argument>, <argument pos:start="789:36" pos:end="789:39"><expr pos:start="789:36" pos:end="789:39"><name pos:start="789:36" pos:end="789:39">NULL</name></expr></argument>, <argument pos:start="789:42" pos:end="789:42"><expr pos:start="789:42" pos:end="789:42"><literal type="number" pos:start="789:42" pos:end="789:42">0</literal></expr></argument>, <argument pos:start="789:45" pos:end="789:63"><expr pos:start="789:45" pos:end="789:63"><name pos:start="789:45" pos:end="789:63">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="789:66" pos:end="789:76"><expr pos:start="789:66" pos:end="789:76"><literal type="string" pos:start="789:66" pos:end="789:76">"testrealm"</literal></expr></argument>, <argument pos:start="789:79" pos:end="789:79"><expr pos:start="789:79" pos:end="789:79"><name pos:start="789:79" pos:end="789:79">x</name></expr></argument>,
            <argument pos:start="790:13" pos:end="790:20"><expr pos:start="790:13" pos:end="790:20"><name pos:start="790:13" pos:end="790:20">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="791:5" pos:end="791:27"><expr pos:start="791:5" pos:end="791:26"><call pos:start="791:5" pos:end="791:26"><name pos:start="791:5" pos:end="791:13">CU_ASSERT</name><argument_list pos:start="791:14" pos:end="791:26">(<argument pos:start="791:15" pos:end="791:25"><expr pos:start="791:15" pos:end="791:25"><name pos:start="791:15" pos:end="791:17">ctx</name> <operator pos:start="791:19" pos:end="791:20">==</operator> <name pos:start="791:22" pos:end="791:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="793:5" pos:end="793:17"><expr pos:start="793:5" pos:end="793:16"><call pos:start="793:5" pos:end="793:16"><name pos:start="793:5" pos:end="793:13">X509_free</name><argument_list pos:start="793:14" pos:end="793:16">(<argument pos:start="793:15" pos:end="793:15"><expr pos:start="793:15" pos:end="793:15"><name pos:start="793:15" pos:end="793:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="794:5" pos:end="794:28"><expr pos:start="794:5" pos:end="794:27"><call pos:start="794:5" pos:end="794:27"><name pos:start="794:5" pos:end="794:17">EVP_PKEY_free</name><argument_list pos:start="794:18" pos:end="794:27">(<argument pos:start="794:19" pos:end="794:26"><expr pos:start="794:19" pos:end="794:26"><name pos:start="794:19" pos:end="794:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="797:1" pos:end="799:3">/*
 * Corrupted CA chain when initializing server
 */</comment>
<function pos:start="800:1" pos:end="841:1"><type pos:start="800:1" pos:end="800:11"><specifier pos:start="800:1" pos:end="800:6">static</specifier> <name pos:start="800:8" pos:end="800:11">void</name></type> <name pos:start="800:13" pos:end="800:24">us901_test19</name><parameter_list pos:start="800:25" pos:end="800:30">(<parameter pos:start="800:26" pos:end="800:29"><decl pos:start="800:26" pos:end="800:29"><type pos:start="800:26" pos:end="800:29"><name pos:start="800:26" pos:end="800:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="800:32" pos:end="841:1">{<block_content pos:start="801:5" pos:end="840:28">
    <decl_stmt pos:start="801:5" pos:end="801:24"><decl pos:start="801:5" pos:end="801:15"><type pos:start="801:5" pos:end="801:9"><name pos:start="801:5" pos:end="801:7">BIO</name> <modifier pos:start="801:9" pos:end="801:9">*</modifier></type><name pos:start="801:10" pos:end="801:15">certin</name></decl>, <decl pos:start="801:18" pos:end="801:23"><type ref="prev" pos:start="801:5" pos:end="801:9"><modifier pos:start="801:18" pos:end="801:18">*</modifier></type><name pos:start="801:19" pos:end="801:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="802:5" pos:end="802:12"><decl pos:start="802:5" pos:end="802:11"><type pos:start="802:5" pos:end="802:10"><name pos:start="802:5" pos:end="802:8">X509</name> <modifier pos:start="802:10" pos:end="802:10">*</modifier></type><name pos:start="802:11" pos:end="802:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="803:5" pos:end="803:23"><decl pos:start="803:5" pos:end="803:22"><type pos:start="803:5" pos:end="803:14"><name pos:start="803:5" pos:end="803:12">EVP_PKEY</name> <modifier pos:start="803:14" pos:end="803:14">*</modifier></type><name pos:start="803:15" pos:end="803:22">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="804:5" pos:end="804:11"><decl pos:start="804:5" pos:end="804:10"><type pos:start="804:5" pos:end="804:7"><name pos:start="804:5" pos:end="804:7">int</name></type> <name pos:start="804:9" pos:end="804:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="805:5" pos:end="805:17"><decl pos:start="805:5" pos:end="805:16"><type pos:start="805:5" pos:end="805:13"><name pos:start="805:5" pos:end="805:11">EST_CTX</name> <modifier pos:start="805:13" pos:end="805:13">*</modifier></type><name pos:start="805:14" pos:end="805:16">ctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="807:5" pos:end="808:5"><expr pos:start="807:5" pos:end="807:15"><name pos:start="807:5" pos:end="807:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="810:5" pos:end="812:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="813:5" pos:end="813:44"><expr pos:start="813:5" pos:end="813:43"><name pos:start="813:5" pos:end="813:10">certin</name> <operator pos:start="813:12" pos:end="813:12">=</operator> <call pos:start="813:14" pos:end="813:43"><name pos:start="813:14" pos:end="813:20">BIO_new</name><argument_list pos:start="813:21" pos:end="813:43">(<argument pos:start="813:22" pos:end="813:42"><expr pos:start="813:22" pos:end="813:42"><call pos:start="813:22" pos:end="813:42"><name pos:start="813:22" pos:end="813:40">BIO_s_file_internal</name><argument_list pos:start="813:41" pos:end="813:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="814:5" pos:end="814:54"><expr pos:start="814:5" pos:end="814:53"><name pos:start="814:5" pos:end="814:6">rv</name> <operator pos:start="814:8" pos:end="814:8">=</operator> <call pos:start="814:10" pos:end="814:53"><name pos:start="814:10" pos:end="814:26">BIO_read_filename</name><argument_list pos:start="814:27" pos:end="814:53">(<argument pos:start="814:28" pos:end="814:33"><expr pos:start="814:28" pos:end="814:33"><name pos:start="814:28" pos:end="814:33">certin</name></expr></argument>, <argument pos:start="814:36" pos:end="814:52"><expr pos:start="814:36" pos:end="814:52"><name pos:start="814:36" pos:end="814:52">US901_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="815:5" pos:end="815:22"><expr pos:start="815:5" pos:end="815:21"><call pos:start="815:5" pos:end="815:21"><name pos:start="815:5" pos:end="815:13">CU_ASSERT</name><argument_list pos:start="815:14" pos:end="815:21">(<argument pos:start="815:15" pos:end="815:20"><expr pos:start="815:15" pos:end="815:20"><name pos:start="815:15" pos:end="815:16">rv</name> <operator pos:start="815:18" pos:end="815:18">&gt;</operator> <literal type="number" pos:start="815:20" pos:end="815:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="816:5" pos:end="816:52"><expr pos:start="816:5" pos:end="816:51"><name pos:start="816:5" pos:end="816:5">x</name> <operator pos:start="816:7" pos:end="816:7">=</operator> <call pos:start="816:9" pos:end="816:51"><name pos:start="816:9" pos:end="816:25">PEM_read_bio_X509</name><argument_list pos:start="816:26" pos:end="816:51">(<argument pos:start="816:27" pos:end="816:32"><expr pos:start="816:27" pos:end="816:32"><name pos:start="816:27" pos:end="816:32">certin</name></expr></argument>, <argument pos:start="816:35" pos:end="816:38"><expr pos:start="816:35" pos:end="816:38"><name pos:start="816:35" pos:end="816:38">NULL</name></expr></argument>, <argument pos:start="816:41" pos:end="816:44"><expr pos:start="816:41" pos:end="816:44"><name pos:start="816:41" pos:end="816:44">NULL</name></expr></argument>, <argument pos:start="816:47" pos:end="816:50"><expr pos:start="816:47" pos:end="816:50"><name pos:start="816:47" pos:end="816:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="817:5" pos:end="817:25"><expr pos:start="817:5" pos:end="817:24"><call pos:start="817:5" pos:end="817:24"><name pos:start="817:5" pos:end="817:13">CU_ASSERT</name><argument_list pos:start="817:14" pos:end="817:24">(<argument pos:start="817:15" pos:end="817:23"><expr pos:start="817:15" pos:end="817:23"><name pos:start="817:15" pos:end="817:15">x</name> <operator pos:start="817:17" pos:end="817:18">!=</operator> <name pos:start="817:20" pos:end="817:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="818:5" pos:end="818:21"><expr pos:start="818:5" pos:end="818:20"><call pos:start="818:5" pos:end="818:20"><name pos:start="818:5" pos:end="818:12">BIO_free</name><argument_list pos:start="818:13" pos:end="818:20">(<argument pos:start="818:14" pos:end="818:19"><expr pos:start="818:14" pos:end="818:19"><name pos:start="818:14" pos:end="818:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="820:5" pos:end="822:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="823:5" pos:end="823:43"><expr pos:start="823:5" pos:end="823:42"><name pos:start="823:5" pos:end="823:9">keyin</name> <operator pos:start="823:11" pos:end="823:11">=</operator> <call pos:start="823:13" pos:end="823:42"><name pos:start="823:13" pos:end="823:19">BIO_new</name><argument_list pos:start="823:20" pos:end="823:42">(<argument pos:start="823:21" pos:end="823:41"><expr pos:start="823:21" pos:end="823:41"><call pos:start="823:21" pos:end="823:41"><name pos:start="823:21" pos:end="823:39">BIO_s_file_internal</name><argument_list pos:start="823:40" pos:end="823:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="824:5" pos:end="824:52"><expr pos:start="824:5" pos:end="824:51"><name pos:start="824:5" pos:end="824:6">rv</name> <operator pos:start="824:8" pos:end="824:8">=</operator> <call pos:start="824:10" pos:end="824:51"><name pos:start="824:10" pos:end="824:26">BIO_read_filename</name><argument_list pos:start="824:27" pos:end="824:51">(<argument pos:start="824:28" pos:end="824:32"><expr pos:start="824:28" pos:end="824:32"><name pos:start="824:28" pos:end="824:32">keyin</name></expr></argument>, <argument pos:start="824:35" pos:end="824:50"><expr pos:start="824:35" pos:end="824:50"><name pos:start="824:35" pos:end="824:50">US901_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="825:5" pos:end="825:22"><expr pos:start="825:5" pos:end="825:21"><call pos:start="825:5" pos:end="825:21"><name pos:start="825:5" pos:end="825:13">CU_ASSERT</name><argument_list pos:start="825:14" pos:end="825:21">(<argument pos:start="825:15" pos:end="825:20"><expr pos:start="825:15" pos:end="825:20"><name pos:start="825:15" pos:end="825:16">rv</name> <operator pos:start="825:18" pos:end="825:18">&gt;</operator> <literal type="number" pos:start="825:20" pos:end="825:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="826:5" pos:end="826:64"><expr pos:start="826:5" pos:end="826:63"><name pos:start="826:5" pos:end="826:12">priv_key</name> <operator pos:start="826:14" pos:end="826:14">=</operator> <call pos:start="826:16" pos:end="826:63"><name pos:start="826:16" pos:end="826:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="826:39" pos:end="826:63">(<argument pos:start="826:40" pos:end="826:44"><expr pos:start="826:40" pos:end="826:44"><name pos:start="826:40" pos:end="826:44">keyin</name></expr></argument>, <argument pos:start="826:47" pos:end="826:50"><expr pos:start="826:47" pos:end="826:50"><name pos:start="826:47" pos:end="826:50">NULL</name></expr></argument>, <argument pos:start="826:53" pos:end="826:56"><expr pos:start="826:53" pos:end="826:56"><name pos:start="826:53" pos:end="826:56">NULL</name></expr></argument>, <argument pos:start="826:59" pos:end="826:62"><expr pos:start="826:59" pos:end="826:62"><name pos:start="826:59" pos:end="826:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="827:5" pos:end="827:32"><expr pos:start="827:5" pos:end="827:31"><call pos:start="827:5" pos:end="827:31"><name pos:start="827:5" pos:end="827:13">CU_ASSERT</name><argument_list pos:start="827:14" pos:end="827:31">(<argument pos:start="827:15" pos:end="827:30"><expr pos:start="827:15" pos:end="827:30"><name pos:start="827:15" pos:end="827:22">priv_key</name> <operator pos:start="827:24" pos:end="827:25">!=</operator> <name pos:start="827:27" pos:end="827:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="828:5" pos:end="828:20"><expr pos:start="828:5" pos:end="828:19"><call pos:start="828:5" pos:end="828:19"><name pos:start="828:5" pos:end="828:12">BIO_free</name><argument_list pos:start="828:13" pos:end="828:19">(<argument pos:start="828:14" pos:end="828:18"><expr pos:start="828:14" pos:end="828:18"><name pos:start="828:14" pos:end="828:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="830:5" pos:end="832:7">/*
     * Attempt to init EST server a corrupted CA chain
     */</comment>
    <expr_stmt pos:start="833:5" pos:end="833:44"><expr pos:start="833:5" pos:end="833:43"><call pos:start="833:5" pos:end="833:43"><name pos:start="833:5" pos:end="833:19">est_init_logger</name><argument_list pos:start="833:20" pos:end="833:43">(<argument pos:start="833:21" pos:end="833:36"><expr pos:start="833:21" pos:end="833:36"><name pos:start="833:21" pos:end="833:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="833:39" pos:end="833:42"><expr pos:start="833:39" pos:end="833:42"><name pos:start="833:39" pos:end="833:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="834:5" pos:end="836:38"><expr pos:start="834:5" pos:end="836:37"><name pos:start="834:5" pos:end="834:7">ctx</name> <operator pos:start="834:9" pos:end="834:9">=</operator> <call pos:start="834:11" pos:end="836:37"><name pos:start="834:11" pos:end="834:25">est_server_init</name><argument_list pos:start="834:26" pos:end="836:37">(<argument pos:start="834:27" pos:end="834:59"><expr pos:start="834:27" pos:end="834:59"><operator pos:start="834:27" pos:end="834:27">(</operator><name pos:start="834:28" pos:end="834:35">unsigned</name> <name pos:start="834:37" pos:end="834:40">char</name><operator pos:start="834:41" pos:end="834:41">*</operator><operator pos:start="834:42" pos:end="834:42">)</operator> <literal type="string" pos:start="834:44" pos:end="834:59">"Bogus CA chain"</literal></expr></argument>, <argument pos:start="834:62" pos:end="834:63"><expr pos:start="834:62" pos:end="834:63"><literal type="number" pos:start="834:62" pos:end="834:63">14</literal></expr></argument>,
            <argument pos:start="835:13" pos:end="835:45"><expr pos:start="835:13" pos:end="835:45"><operator pos:start="835:13" pos:end="835:13">(</operator><name pos:start="835:14" pos:end="835:21">unsigned</name> <name pos:start="835:23" pos:end="835:26">char</name><operator pos:start="835:27" pos:end="835:27">*</operator><operator pos:start="835:28" pos:end="835:28">)</operator> <literal type="string" pos:start="835:30" pos:end="835:45">"Bogus CA chain"</literal></expr></argument>, <argument pos:start="835:48" pos:end="835:49"><expr pos:start="835:48" pos:end="835:49"><literal type="number" pos:start="835:48" pos:end="835:49">14</literal></expr></argument>, <argument pos:start="835:52" pos:end="835:70"><expr pos:start="835:52" pos:end="835:70"><name pos:start="835:52" pos:end="835:70">EST_CERT_FORMAT_PEM</name></expr></argument>,
            <argument pos:start="836:13" pos:end="836:23"><expr pos:start="836:13" pos:end="836:23"><literal type="string" pos:start="836:13" pos:end="836:23">"testrealm"</literal></expr></argument>, <argument pos:start="836:26" pos:end="836:26"><expr pos:start="836:26" pos:end="836:26"><name pos:start="836:26" pos:end="836:26">x</name></expr></argument>, <argument pos:start="836:29" pos:end="836:36"><expr pos:start="836:29" pos:end="836:36"><name pos:start="836:29" pos:end="836:36">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="837:5" pos:end="837:27"><expr pos:start="837:5" pos:end="837:26"><call pos:start="837:5" pos:end="837:26"><name pos:start="837:5" pos:end="837:13">CU_ASSERT</name><argument_list pos:start="837:14" pos:end="837:26">(<argument pos:start="837:15" pos:end="837:25"><expr pos:start="837:15" pos:end="837:25"><name pos:start="837:15" pos:end="837:17">ctx</name> <operator pos:start="837:19" pos:end="837:20">==</operator> <name pos:start="837:22" pos:end="837:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="839:5" pos:end="839:17"><expr pos:start="839:5" pos:end="839:16"><call pos:start="839:5" pos:end="839:16"><name pos:start="839:5" pos:end="839:13">X509_free</name><argument_list pos:start="839:14" pos:end="839:16">(<argument pos:start="839:15" pos:end="839:15"><expr pos:start="839:15" pos:end="839:15"><name pos:start="839:15" pos:end="839:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="840:5" pos:end="840:28"><expr pos:start="840:5" pos:end="840:27"><call pos:start="840:5" pos:end="840:27"><name pos:start="840:5" pos:end="840:17">EVP_PKEY_free</name><argument_list pos:start="840:18" pos:end="840:27">(<argument pos:start="840:19" pos:end="840:26"><expr pos:start="840:19" pos:end="840:26"><name pos:start="840:19" pos:end="840:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="843:1" pos:end="846:3">/*
 * This test case attempts simple cacerts request using
 * POST instead of GET.  It should fail.
 */</comment>
<function pos:start="847:1" pos:end="873:1"><type pos:start="847:1" pos:end="847:11"><specifier pos:start="847:1" pos:end="847:6">static</specifier> <name pos:start="847:8" pos:end="847:11">void</name></type> <name pos:start="847:13" pos:end="847:24">us901_test20</name><parameter_list pos:start="847:25" pos:end="847:30">(<parameter pos:start="847:26" pos:end="847:29"><decl pos:start="847:26" pos:end="847:29"><type pos:start="847:26" pos:end="847:29"><name pos:start="847:26" pos:end="847:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="847:32" pos:end="873:1">{<block_content pos:start="848:5" pos:end="872:13">
    <decl_stmt pos:start="848:5" pos:end="848:12"><decl pos:start="848:5" pos:end="848:11"><type pos:start="848:5" pos:end="848:8"><name pos:start="848:5" pos:end="848:8">long</name></type> <name pos:start="848:10" pos:end="848:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="849:5" pos:end="849:14"><decl pos:start="849:5" pos:end="849:13"><type pos:start="849:5" pos:end="849:7"><name pos:start="849:5" pos:end="849:7">int</name></type> <name pos:start="849:9" pos:end="849:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="851:5" pos:end="851:36"><expr pos:start="851:5" pos:end="851:35"><name pos:start="851:5" pos:end="851:9">st_rv</name> <operator pos:start="851:11" pos:end="851:11">=</operator> <call pos:start="851:13" pos:end="851:35"><name pos:start="851:13" pos:end="851:30">us901_start_server</name><argument_list pos:start="851:31" pos:end="851:35">(<argument pos:start="851:32" pos:end="851:34"><expr pos:start="851:32" pos:end="851:34"><literal type="char" pos:start="851:32" pos:end="851:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="852:5" pos:end="854:5"><if pos:start="852:5" pos:end="854:5">if <condition pos:start="852:8" pos:end="852:14">(<expr pos:start="852:9" pos:end="852:13"><name pos:start="852:9" pos:end="852:13">st_rv</name></expr>)</condition> <block pos:start="852:16" pos:end="854:5">{<block_content pos:start="853:9" pos:end="853:15">
        <return pos:start="853:9" pos:end="853:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="856:5" pos:end="857:5"><expr pos:start="856:5" pos:end="856:15"><name pos:start="856:5" pos:end="856:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="859:5" pos:end="859:13"><expr pos:start="859:5" pos:end="859:12"><call pos:start="859:5" pos:end="859:12"><name pos:start="859:5" pos:end="859:9">SLEEP</name><argument_list pos:start="859:10" pos:end="859:12">(<argument pos:start="859:11" pos:end="859:11"><expr pos:start="859:11" pos:end="859:11"><literal type="number" pos:start="859:11" pos:end="859:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="861:5" pos:end="861:40"><expr pos:start="861:5" pos:end="861:39"><name pos:start="861:5" pos:end="861:11">outfile</name> <operator pos:start="861:13" pos:end="861:13">=</operator> <call pos:start="861:15" pos:end="861:39"><name pos:start="861:15" pos:end="861:19">fopen</name><argument_list pos:start="861:20" pos:end="861:39">(<argument pos:start="861:21" pos:end="861:33"><expr pos:start="861:21" pos:end="861:33"><name pos:start="861:21" pos:end="861:33">test5_outfile</name></expr></argument>, <argument pos:start="861:36" pos:end="861:38"><expr pos:start="861:36" pos:end="861:38"><literal type="string" pos:start="861:36" pos:end="861:38">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="862:5" pos:end="864:22"><expr pos:start="862:5" pos:end="864:21"><name pos:start="862:5" pos:end="862:6">rv</name> <operator pos:start="862:8" pos:end="862:8">=</operator> <call pos:start="862:10" pos:end="864:21"><name pos:start="862:10" pos:end="862:23">curl_http_post</name><argument_list pos:start="862:24" pos:end="864:21">(<argument pos:start="862:25" pos:end="862:40"><expr pos:start="862:25" pos:end="862:40"><name pos:start="862:25" pos:end="862:40">US901_CACERT_URL</name></expr></argument>, <argument pos:start="862:43" pos:end="862:57"><expr pos:start="862:43" pos:end="862:57"><name pos:start="862:43" pos:end="862:57">US901_PKCS10_CT</name></expr></argument>, <argument pos:start="862:60" pos:end="862:75"><expr pos:start="862:60" pos:end="862:75"><name pos:start="862:60" pos:end="862:75">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="863:5" pos:end="863:21"><expr pos:start="863:5" pos:end="863:21"><name pos:start="863:5" pos:end="863:21">US901_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="863:24" pos:end="863:36"><expr pos:start="863:24" pos:end="863:36"><name pos:start="863:24" pos:end="863:36">US901_CACERTS</name></expr></argument>, <argument pos:start="863:39" pos:end="863:52"><expr pos:start="863:39" pos:end="863:52"><name pos:start="863:39" pos:end="863:52">CURLAUTH_BASIC</name></expr></argument>,
    <argument pos:start="864:5" pos:end="864:8"><expr pos:start="864:5" pos:end="864:8"><name pos:start="864:5" pos:end="864:8">NULL</name></expr></argument>, <argument pos:start="864:11" pos:end="864:14"><expr pos:start="864:11" pos:end="864:14"><name pos:start="864:11" pos:end="864:14">NULL</name></expr></argument>, <argument pos:start="864:17" pos:end="864:20"><expr pos:start="864:17" pos:end="864:20"><name pos:start="864:17" pos:end="864:20">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="865:5" pos:end="865:20"><expr pos:start="865:5" pos:end="865:19"><call pos:start="865:5" pos:end="865:19"><name pos:start="865:5" pos:end="865:10">fclose</name><argument_list pos:start="865:11" pos:end="865:19">(<argument pos:start="865:12" pos:end="865:18"><expr pos:start="865:12" pos:end="865:18"><name pos:start="865:12" pos:end="865:18">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="867:5" pos:end="869:7">/*
     * we expect the server to respond with a 400
     */</comment>
    <expr_stmt pos:start="870:5" pos:end="870:25"><expr pos:start="870:5" pos:end="870:24"><call pos:start="870:5" pos:end="870:24"><name pos:start="870:5" pos:end="870:13">CU_ASSERT</name><argument_list pos:start="870:14" pos:end="870:24">(<argument pos:start="870:15" pos:end="870:23"><expr pos:start="870:15" pos:end="870:23"><name pos:start="870:15" pos:end="870:16">rv</name> <operator pos:start="870:18" pos:end="870:19">==</operator> <literal type="number" pos:start="870:21" pos:end="870:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="871:5" pos:end="871:14"><expr pos:start="871:5" pos:end="871:13"><call pos:start="871:5" pos:end="871:13"><name pos:start="871:5" pos:end="871:11">st_stop</name><argument_list pos:start="871:12" pos:end="871:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="872:5" pos:end="872:13"><expr pos:start="872:5" pos:end="872:12"><call pos:start="872:5" pos:end="872:12"><name pos:start="872:5" pos:end="872:9">SLEEP</name><argument_list pos:start="872:10" pos:end="872:12">(<argument pos:start="872:11" pos:end="872:11"><expr pos:start="872:11" pos:end="872:11"><literal type="number" pos:start="872:11" pos:end="872:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="875:1" pos:end="881:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentiaiton is working.
 * The certificate used is signed by the explicit cert
 * chain. Valid HTTP authentication credentials are
 * also provided.  This should succeed.
 */</comment>
<function pos:start="882:1" pos:end="910:1"><type pos:start="882:1" pos:end="882:11"><specifier pos:start="882:1" pos:end="882:6">static</specifier> <name pos:start="882:8" pos:end="882:11">void</name></type> <name pos:start="882:13" pos:end="882:24">us901_test21</name><parameter_list pos:start="882:25" pos:end="882:30">(<parameter pos:start="882:26" pos:end="882:29"><decl pos:start="882:26" pos:end="882:29"><type pos:start="882:26" pos:end="882:29"><name pos:start="882:26" pos:end="882:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="882:32" pos:end="910:1">{<block_content pos:start="883:5" pos:end="909:13">
    <decl_stmt pos:start="883:5" pos:end="883:12"><decl pos:start="883:5" pos:end="883:11"><type pos:start="883:5" pos:end="883:8"><name pos:start="883:5" pos:end="883:8">long</name></type> <name pos:start="883:10" pos:end="883:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="884:5" pos:end="884:14"><decl pos:start="884:5" pos:end="884:13"><type pos:start="884:5" pos:end="884:7"><name pos:start="884:5" pos:end="884:7">int</name></type> <name pos:start="884:9" pos:end="884:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="886:5" pos:end="886:36"><expr pos:start="886:5" pos:end="886:35"><name pos:start="886:5" pos:end="886:9">st_rv</name> <operator pos:start="886:11" pos:end="886:11">=</operator> <call pos:start="886:13" pos:end="886:35"><name pos:start="886:13" pos:end="886:30">us901_start_server</name><argument_list pos:start="886:31" pos:end="886:35">(<argument pos:start="886:32" pos:end="886:34"><expr pos:start="886:32" pos:end="886:34"><literal type="char" pos:start="886:32" pos:end="886:34">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="887:5" pos:end="889:5"><if pos:start="887:5" pos:end="889:5">if <condition pos:start="887:8" pos:end="887:14">(<expr pos:start="887:9" pos:end="887:13"><name pos:start="887:9" pos:end="887:13">st_rv</name></expr>)</condition> <block pos:start="887:16" pos:end="889:5">{<block_content pos:start="888:9" pos:end="888:15">
        <return pos:start="888:9" pos:end="888:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="891:5" pos:end="892:5"><expr pos:start="891:5" pos:end="891:15"><name pos:start="891:5" pos:end="891:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="894:5" pos:end="894:13"><expr pos:start="894:5" pos:end="894:12"><call pos:start="894:5" pos:end="894:12"><name pos:start="894:5" pos:end="894:9">SLEEP</name><argument_list pos:start="894:10" pos:end="894:12">(<argument pos:start="894:11" pos:end="894:11"><expr pos:start="894:11" pos:end="894:11"><literal type="number" pos:start="894:11" pos:end="894:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="895:5" pos:end="902:10"><expr pos:start="895:5" pos:end="902:9"><name pos:start="895:5" pos:end="895:6">rv</name> <operator pos:start="895:8" pos:end="895:8">=</operator> <call pos:start="895:10" pos:end="902:9"><name pos:start="895:10" pos:end="895:31">curl_http_post_certuid</name><argument_list pos:start="895:32" pos:end="902:9">(<argument pos:start="895:33" pos:end="895:48"><expr pos:start="895:33" pos:end="895:48"><name pos:start="895:33" pos:end="895:48">US901_ENROLL_URL</name></expr></argument>,
    <argument pos:start="896:5" pos:end="896:19"><expr pos:start="896:5" pos:end="896:19"><name pos:start="896:5" pos:end="896:19">US901_PKCS10_CT</name></expr></argument>,
    <argument pos:start="897:5" pos:end="897:20"><expr pos:start="897:5" pos:end="897:20"><name pos:start="897:5" pos:end="897:20">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="898:5" pos:end="898:21"><expr pos:start="898:5" pos:end="898:21"><name pos:start="898:5" pos:end="898:21">US901_UIDPWD_GOOD</name></expr></argument>,
    <argument pos:start="899:5" pos:end="899:23"><expr pos:start="899:5" pos:end="899:23"><name pos:start="899:5" pos:end="899:23">US901_EXPLICIT_CERT</name></expr></argument>,
    <argument pos:start="900:5" pos:end="900:22"><expr pos:start="900:5" pos:end="900:22"><name pos:start="900:5" pos:end="900:22">US901_EXPLICIT_KEY</name></expr></argument>,
    <argument pos:start="901:5" pos:end="901:17"><expr pos:start="901:5" pos:end="901:17"><name pos:start="901:5" pos:end="901:17">US901_CACERTS</name></expr></argument>,
    <argument pos:start="902:5" pos:end="902:8"><expr pos:start="902:5" pos:end="902:8"><name pos:start="902:5" pos:end="902:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="903:5" pos:end="906:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="907:5" pos:end="907:25"><expr pos:start="907:5" pos:end="907:24"><call pos:start="907:5" pos:end="907:24"><name pos:start="907:5" pos:end="907:13">CU_ASSERT</name><argument_list pos:start="907:14" pos:end="907:24">(<argument pos:start="907:15" pos:end="907:23"><expr pos:start="907:15" pos:end="907:23"><name pos:start="907:15" pos:end="907:16">rv</name> <operator pos:start="907:18" pos:end="907:19">==</operator> <literal type="number" pos:start="907:21" pos:end="907:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="908:5" pos:end="908:14"><expr pos:start="908:5" pos:end="908:13"><call pos:start="908:5" pos:end="908:13"><name pos:start="908:5" pos:end="908:11">st_stop</name><argument_list pos:start="908:12" pos:end="908:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="909:5" pos:end="909:13"><expr pos:start="909:5" pos:end="909:12"><call pos:start="909:5" pos:end="909:12"><name pos:start="909:5" pos:end="909:9">SLEEP</name><argument_list pos:start="909:10" pos:end="909:12">(<argument pos:start="909:11" pos:end="909:11"><expr pos:start="909:11" pos:end="909:11"><literal type="number" pos:start="909:11" pos:end="909:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="912:1" pos:end="918:3">/*
 * This test attempts to use a client certificate to
 * verify the TLS client authentiaiton is working.
 * The certificate used is signed by the explicit cert
 * chain. Invalid HTTP authentication credentials are
 * also provided.  This should fail with a 401 response.
 */</comment>
<function pos:start="919:1" pos:end="947:1"><type pos:start="919:1" pos:end="919:11"><specifier pos:start="919:1" pos:end="919:6">static</specifier> <name pos:start="919:8" pos:end="919:11">void</name></type> <name pos:start="919:13" pos:end="919:24">us901_test22</name><parameter_list pos:start="919:25" pos:end="919:30">(<parameter pos:start="919:26" pos:end="919:29"><decl pos:start="919:26" pos:end="919:29"><type pos:start="919:26" pos:end="919:29"><name pos:start="919:26" pos:end="919:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="919:32" pos:end="947:1">{<block_content pos:start="920:5" pos:end="946:13">
    <decl_stmt pos:start="920:5" pos:end="920:12"><decl pos:start="920:5" pos:end="920:11"><type pos:start="920:5" pos:end="920:8"><name pos:start="920:5" pos:end="920:8">long</name></type> <name pos:start="920:10" pos:end="920:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="921:5" pos:end="921:14"><decl pos:start="921:5" pos:end="921:13"><type pos:start="921:5" pos:end="921:7"><name pos:start="921:5" pos:end="921:7">int</name></type> <name pos:start="921:9" pos:end="921:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="923:5" pos:end="923:36"><expr pos:start="923:5" pos:end="923:35"><name pos:start="923:5" pos:end="923:9">st_rv</name> <operator pos:start="923:11" pos:end="923:11">=</operator> <call pos:start="923:13" pos:end="923:35"><name pos:start="923:13" pos:end="923:30">us901_start_server</name><argument_list pos:start="923:31" pos:end="923:35">(<argument pos:start="923:32" pos:end="923:34"><expr pos:start="923:32" pos:end="923:34"><literal type="char" pos:start="923:32" pos:end="923:34">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="924:5" pos:end="926:5"><if pos:start="924:5" pos:end="926:5">if <condition pos:start="924:8" pos:end="924:14">(<expr pos:start="924:9" pos:end="924:13"><name pos:start="924:9" pos:end="924:13">st_rv</name></expr>)</condition> <block pos:start="924:16" pos:end="926:5">{<block_content pos:start="925:9" pos:end="925:15">
        <return pos:start="925:9" pos:end="925:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="928:5" pos:end="929:5"><expr pos:start="928:5" pos:end="928:15"><name pos:start="928:5" pos:end="928:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="931:5" pos:end="931:13"><expr pos:start="931:5" pos:end="931:12"><call pos:start="931:5" pos:end="931:12"><name pos:start="931:5" pos:end="931:9">SLEEP</name><argument_list pos:start="931:10" pos:end="931:12">(<argument pos:start="931:11" pos:end="931:11"><expr pos:start="931:11" pos:end="931:11"><literal type="number" pos:start="931:11" pos:end="931:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="932:5" pos:end="939:10"><expr pos:start="932:5" pos:end="939:9"><name pos:start="932:5" pos:end="932:6">rv</name> <operator pos:start="932:8" pos:end="932:8">=</operator> <call pos:start="932:10" pos:end="939:9"><name pos:start="932:10" pos:end="932:31">curl_http_post_certuid</name><argument_list pos:start="932:32" pos:end="939:9">(<argument pos:start="932:33" pos:end="932:48"><expr pos:start="932:33" pos:end="932:48"><name pos:start="932:33" pos:end="932:48">US901_ENROLL_URL</name></expr></argument>,
    <argument pos:start="933:5" pos:end="933:19"><expr pos:start="933:5" pos:end="933:19"><name pos:start="933:5" pos:end="933:19">US901_PKCS10_CT</name></expr></argument>,
    <argument pos:start="934:5" pos:end="934:20"><expr pos:start="934:5" pos:end="934:20"><name pos:start="934:5" pos:end="934:20">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="935:5" pos:end="935:20"><expr pos:start="935:5" pos:end="935:20"><name pos:start="935:5" pos:end="935:20">US901_UIDPWD_BAD</name></expr></argument>,
    <argument pos:start="936:5" pos:end="936:23"><expr pos:start="936:5" pos:end="936:23"><name pos:start="936:5" pos:end="936:23">US901_EXPLICIT_CERT</name></expr></argument>,
    <argument pos:start="937:5" pos:end="937:22"><expr pos:start="937:5" pos:end="937:22"><name pos:start="937:5" pos:end="937:22">US901_EXPLICIT_KEY</name></expr></argument>,
    <argument pos:start="938:5" pos:end="938:17"><expr pos:start="938:5" pos:end="938:17"><name pos:start="938:5" pos:end="938:17">US901_CACERTS</name></expr></argument>,
    <argument pos:start="939:5" pos:end="939:8"><expr pos:start="939:5" pos:end="939:8"><name pos:start="939:5" pos:end="939:8">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="940:5" pos:end="943:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with 401
     */</comment>
    <expr_stmt pos:start="944:5" pos:end="944:25"><expr pos:start="944:5" pos:end="944:24"><call pos:start="944:5" pos:end="944:24"><name pos:start="944:5" pos:end="944:13">CU_ASSERT</name><argument_list pos:start="944:14" pos:end="944:24">(<argument pos:start="944:15" pos:end="944:23"><expr pos:start="944:15" pos:end="944:23"><name pos:start="944:15" pos:end="944:16">rv</name> <operator pos:start="944:18" pos:end="944:19">==</operator> <literal type="number" pos:start="944:21" pos:end="944:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="945:5" pos:end="945:14"><expr pos:start="945:5" pos:end="945:13"><call pos:start="945:5" pos:end="945:13"><name pos:start="945:5" pos:end="945:11">st_stop</name><argument_list pos:start="945:12" pos:end="945:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="946:5" pos:end="946:13"><expr pos:start="946:5" pos:end="946:12"><call pos:start="946:5" pos:end="946:12"><name pos:start="946:5" pos:end="946:9">SLEEP</name><argument_list pos:start="946:10" pos:end="946:12">(<argument pos:start="946:11" pos:end="946:11"><expr pos:start="946:11" pos:end="946:11"><literal type="number" pos:start="946:11" pos:end="946:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="949:1" pos:end="955:3">/*
 * This test attempts to enroll without using a certificate
 * to identity the client, while using a good user ID/pwd.
 * However, the EST server is setup to only perform
 * certificate authentication (HTTP auth disabled).
 * This should fail with a 401 response.
 */</comment>
<function pos:start="956:1" pos:end="983:1"><type pos:start="956:1" pos:end="956:11"><specifier pos:start="956:1" pos:end="956:6">static</specifier> <name pos:start="956:8" pos:end="956:11">void</name></type> <name pos:start="956:13" pos:end="956:24">us901_test23</name><parameter_list pos:start="956:25" pos:end="956:30">(<parameter pos:start="956:26" pos:end="956:29"><decl pos:start="956:26" pos:end="956:29"><type pos:start="956:26" pos:end="956:29"><name pos:start="956:26" pos:end="956:29">void</name></type></decl></parameter>)</parameter_list> <block pos:start="956:32" pos:end="983:1">{<block_content pos:start="957:5" pos:end="982:13">
    <decl_stmt pos:start="957:5" pos:end="957:12"><decl pos:start="957:5" pos:end="957:11"><type pos:start="957:5" pos:end="957:8"><name pos:start="957:5" pos:end="957:8">long</name></type> <name pos:start="957:10" pos:end="957:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="958:5" pos:end="958:14"><decl pos:start="958:5" pos:end="958:13"><type pos:start="958:5" pos:end="958:7"><name pos:start="958:5" pos:end="958:7">int</name></type> <name pos:start="958:9" pos:end="958:13">st_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="960:5" pos:end="960:36"><expr pos:start="960:5" pos:end="960:35"><name pos:start="960:5" pos:end="960:9">st_rv</name> <operator pos:start="960:11" pos:end="960:11">=</operator> <call pos:start="960:13" pos:end="960:35"><name pos:start="960:13" pos:end="960:30">us901_start_server</name><argument_list pos:start="960:31" pos:end="960:35">(<argument pos:start="960:32" pos:end="960:34"><expr pos:start="960:32" pos:end="960:34"><literal type="char" pos:start="960:32" pos:end="960:34">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="961:5" pos:end="963:5"><if pos:start="961:5" pos:end="963:5">if <condition pos:start="961:8" pos:end="961:14">(<expr pos:start="961:9" pos:end="961:13"><name pos:start="961:9" pos:end="961:13">st_rv</name></expr>)</condition> <block pos:start="961:16" pos:end="963:5">{<block_content pos:start="962:9" pos:end="962:15">
        <return pos:start="962:9" pos:end="962:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="965:5" pos:end="966:5"><expr pos:start="965:5" pos:end="965:15"><name pos:start="965:5" pos:end="965:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="968:5" pos:end="968:13"><expr pos:start="968:5" pos:end="968:12"><call pos:start="968:5" pos:end="968:12"><name pos:start="968:5" pos:end="968:9">SLEEP</name><argument_list pos:start="968:10" pos:end="968:12">(<argument pos:start="968:11" pos:end="968:11"><expr pos:start="968:11" pos:end="968:11"><literal type="number" pos:start="968:11" pos:end="968:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="969:5" pos:end="975:22"><expr pos:start="969:5" pos:end="975:21"><name pos:start="969:5" pos:end="969:6">rv</name> <operator pos:start="969:8" pos:end="969:8">=</operator> <call pos:start="969:10" pos:end="975:21"><name pos:start="969:10" pos:end="969:23">curl_http_post</name><argument_list pos:start="969:24" pos:end="975:21">(<argument pos:start="969:25" pos:end="969:40"><expr pos:start="969:25" pos:end="969:40"><name pos:start="969:25" pos:end="969:40">US901_ENROLL_URL</name></expr></argument>,
    <argument pos:start="970:5" pos:end="970:19"><expr pos:start="970:5" pos:end="970:19"><name pos:start="970:5" pos:end="970:19">US901_PKCS10_CT</name></expr></argument>,
    <argument pos:start="971:5" pos:end="971:20"><expr pos:start="971:5" pos:end="971:20"><name pos:start="971:5" pos:end="971:20">US901_PKCS10_REQ</name></expr></argument>,
    <argument pos:start="972:5" pos:end="972:21"><expr pos:start="972:5" pos:end="972:21"><name pos:start="972:5" pos:end="972:21">US901_UIDPWD_GOOD</name></expr></argument>,
    <argument pos:start="973:5" pos:end="973:17"><expr pos:start="973:5" pos:end="973:17"><name pos:start="973:5" pos:end="973:17">US901_CACERTS</name></expr></argument>,
    <argument pos:start="974:5" pos:end="974:18"><expr pos:start="974:5" pos:end="974:18"><name pos:start="974:5" pos:end="974:18">CURLAUTH_BASIC</name></expr></argument>,
    <argument pos:start="975:5" pos:end="975:8"><expr pos:start="975:5" pos:end="975:8"><name pos:start="975:5" pos:end="975:8">NULL</name></expr></argument>, <argument pos:start="975:11" pos:end="975:14"><expr pos:start="975:11" pos:end="975:14"><name pos:start="975:11" pos:end="975:14">NULL</name></expr></argument>, <argument pos:start="975:17" pos:end="975:20"><expr pos:start="975:17" pos:end="975:20"><name pos:start="975:17" pos:end="975:20">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="976:5" pos:end="979:7">/*
     * Since we passed in an invalid userID/password,
     * we expect the server to respond with 401
     */</comment>
    <expr_stmt pos:start="980:5" pos:end="980:25"><expr pos:start="980:5" pos:end="980:24"><call pos:start="980:5" pos:end="980:24"><name pos:start="980:5" pos:end="980:13">CU_ASSERT</name><argument_list pos:start="980:14" pos:end="980:24">(<argument pos:start="980:15" pos:end="980:23"><expr pos:start="980:15" pos:end="980:23"><name pos:start="980:15" pos:end="980:16">rv</name> <operator pos:start="980:18" pos:end="980:19">==</operator> <literal type="number" pos:start="980:21" pos:end="980:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="981:5" pos:end="981:14"><expr pos:start="981:5" pos:end="981:13"><call pos:start="981:5" pos:end="981:13"><name pos:start="981:5" pos:end="981:11">st_stop</name><argument_list pos:start="981:12" pos:end="981:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="982:5" pos:end="982:13"><expr pos:start="982:5" pos:end="982:12"><call pos:start="982:5" pos:end="982:12"><name pos:start="982:5" pos:end="982:9">SLEEP</name><argument_list pos:start="982:10" pos:end="982:12">(<argument pos:start="982:11" pos:end="982:11"><expr pos:start="982:11" pos:end="982:11"><literal type="number" pos:start="982:11" pos:end="982:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="985:1" pos:end="988:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="989:1" pos:end="1034:1"><type pos:start="989:1" pos:end="989:3"><name pos:start="989:1" pos:end="989:3">int</name></type> <name pos:start="989:5" pos:end="989:19">us901_add_suite</name><parameter_list pos:start="989:20" pos:end="989:25">(<parameter pos:start="989:21" pos:end="989:24"><decl pos:start="989:21" pos:end="989:24"><type pos:start="989:21" pos:end="989:24"><name pos:start="989:21" pos:end="989:24">void</name></type></decl></parameter>)</parameter_list> <block pos:start="989:27" pos:end="1034:1">{<block_content pos:start="991:5" pos:end="1034:0">
<cpp:ifdef pos:start="990:1" pos:end="990:17">#<cpp:directive pos:start="990:2" pos:end="990:6">ifdef</cpp:directive> <name pos:start="990:8" pos:end="990:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="991:5" pos:end="991:28"><decl pos:start="991:5" pos:end="991:27"><type pos:start="991:5" pos:end="991:13"><name pos:start="991:5" pos:end="991:13">CU_pSuite</name></type> <name pos:start="991:15" pos:end="991:20">pSuite</name> <init pos:start="991:22" pos:end="991:27">= <expr pos:start="991:24" pos:end="991:27"><name pos:start="991:24" pos:end="991:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="993:5" pos:end="993:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="994:5" pos:end="996:33"><expr pos:start="994:5" pos:end="996:32"><name pos:start="994:5" pos:end="994:10">pSuite</name> <operator pos:start="994:12" pos:end="994:12">=</operator> <call pos:start="994:14" pos:end="996:32"><name pos:start="994:14" pos:end="994:25">CU_add_suite</name><argument_list pos:start="994:26" pos:end="996:32">(<argument pos:start="994:27" pos:end="994:45"><expr pos:start="994:27" pos:end="994:45"><literal type="string" pos:start="994:27" pos:end="994:45">"us901_srv_cacerts"</literal></expr></argument>,
            <argument pos:start="995:13" pos:end="995:28"><expr pos:start="995:13" pos:end="995:28"><name pos:start="995:13" pos:end="995:28">us901_init_suite</name></expr></argument>,
            <argument pos:start="996:13" pos:end="996:31"><expr pos:start="996:13" pos:end="996:31"><name pos:start="996:13" pos:end="996:31">us901_destory_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="997:5" pos:end="1000:5"><if pos:start="997:5" pos:end="1000:5">if <condition pos:start="997:8" pos:end="997:23">(<expr pos:start="997:9" pos:end="997:22"><name pos:start="997:9" pos:end="997:12">NULL</name> <operator pos:start="997:14" pos:end="997:15">==</operator> <name pos:start="997:17" pos:end="997:22">pSuite</name></expr>)</condition> <block pos:start="997:25" pos:end="1000:5">{<block_content pos:start="998:9" pos:end="999:30">
        <expr_stmt pos:start="998:9" pos:end="998:30"><expr pos:start="998:9" pos:end="998:29"><call pos:start="998:9" pos:end="998:29"><name pos:start="998:9" pos:end="998:27">CU_cleanup_registry</name><argument_list pos:start="998:28" pos:end="998:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="999:9" pos:end="999:30">return <expr pos:start="999:16" pos:end="999:29"><call pos:start="999:16" pos:end="999:29"><name pos:start="999:16" pos:end="999:27">CU_get_error</name><argument_list pos:start="999:28" pos:end="999:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1002:5" pos:end="1002:36">/* add the tests to the suite */</comment>
    <comment type="block" pos:start="1003:5" pos:end="1003:71">/* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */</comment>
    <if_stmt pos:start="1004:5" pos:end="1030:5"><if pos:start="1004:5" pos:end="1030:5">if <condition pos:start="1004:8" pos:end="1026:95">(<expr pos:start="1004:9" pos:end="1026:94"><operator pos:start="1004:9" pos:end="1004:9">(</operator><name pos:start="1004:10" pos:end="1004:13">NULL</name> <operator pos:start="1004:15" pos:end="1004:16">==</operator> <call pos:start="1004:18" pos:end="1004:68"><name pos:start="1004:18" pos:end="1004:28">CU_add_test</name><argument_list pos:start="1004:29" pos:end="1004:68">(<argument pos:start="1004:30" pos:end="1004:35"><expr pos:start="1004:30" pos:end="1004:35"><name pos:start="1004:30" pos:end="1004:35">pSuite</name></expr></argument>, <argument pos:start="1004:38" pos:end="1004:54"><expr pos:start="1004:38" pos:end="1004:54"><literal type="string" pos:start="1004:38" pos:end="1004:54">"HTTP Basic Auth"</literal></expr></argument>, <argument pos:start="1004:57" pos:end="1004:67"><expr pos:start="1004:57" pos:end="1004:67"><name pos:start="1004:57" pos:end="1004:67">us901_test1</name></expr></argument>)</argument_list></call><operator pos:start="1004:69" pos:end="1004:69">)</operator> <operator pos:start="1004:71" pos:end="1004:72">||</operator>
            <operator pos:start="1005:13" pos:end="1005:13">(</operator><name pos:start="1005:14" pos:end="1005:17">NULL</name> <operator pos:start="1005:19" pos:end="1005:20">==</operator> <call pos:start="1005:22" pos:end="1005:77"><name pos:start="1005:22" pos:end="1005:32">CU_add_test</name><argument_list pos:start="1005:33" pos:end="1005:77">(<argument pos:start="1005:34" pos:end="1005:39"><expr pos:start="1005:34" pos:end="1005:39"><name pos:start="1005:34" pos:end="1005:39">pSuite</name></expr></argument>, <argument pos:start="1005:42" pos:end="1005:63"><expr pos:start="1005:42" pos:end="1005:63"><literal type="string" pos:start="1005:42" pos:end="1005:63">"HTTP Basic Auth Fail"</literal></expr></argument>, <argument pos:start="1005:66" pos:end="1005:76"><expr pos:start="1005:66" pos:end="1005:76"><name pos:start="1005:66" pos:end="1005:76">us901_test2</name></expr></argument>)</argument_list></call><operator pos:start="1005:78" pos:end="1005:78">)</operator> <operator pos:start="1005:80" pos:end="1005:81">||</operator>
            <operator pos:start="1006:13" pos:end="1006:13">(</operator><name pos:start="1006:14" pos:end="1006:17">NULL</name> <operator pos:start="1006:19" pos:end="1006:20">==</operator> <call pos:start="1006:22" pos:end="1006:73"><name pos:start="1006:22" pos:end="1006:32">CU_add_test</name><argument_list pos:start="1006:33" pos:end="1006:73">(<argument pos:start="1006:34" pos:end="1006:39"><expr pos:start="1006:34" pos:end="1006:39"><name pos:start="1006:34" pos:end="1006:39">pSuite</name></expr></argument>, <argument pos:start="1006:42" pos:end="1006:59"><expr pos:start="1006:42" pos:end="1006:59"><literal type="string" pos:start="1006:42" pos:end="1006:59">"HTTP Digest Auth"</literal></expr></argument>, <argument pos:start="1006:62" pos:end="1006:72"><expr pos:start="1006:62" pos:end="1006:72"><name pos:start="1006:62" pos:end="1006:72">us901_test3</name></expr></argument>)</argument_list></call><operator pos:start="1006:74" pos:end="1006:74">)</operator> <operator pos:start="1006:76" pos:end="1006:77">||</operator>
            <operator pos:start="1007:13" pos:end="1007:13">(</operator><name pos:start="1007:14" pos:end="1007:17">NULL</name> <operator pos:start="1007:19" pos:end="1007:20">==</operator> <call pos:start="1007:22" pos:end="1007:78"><name pos:start="1007:22" pos:end="1007:32">CU_add_test</name><argument_list pos:start="1007:33" pos:end="1007:78">(<argument pos:start="1007:34" pos:end="1007:39"><expr pos:start="1007:34" pos:end="1007:39"><name pos:start="1007:34" pos:end="1007:39">pSuite</name></expr></argument>, <argument pos:start="1007:42" pos:end="1007:64"><expr pos:start="1007:42" pos:end="1007:64"><literal type="string" pos:start="1007:42" pos:end="1007:64">"HTTP Digest Auth Fail"</literal></expr></argument>, <argument pos:start="1007:67" pos:end="1007:77"><expr pos:start="1007:67" pos:end="1007:77"><name pos:start="1007:67" pos:end="1007:77">us901_test4</name></expr></argument>)</argument_list></call><operator pos:start="1007:79" pos:end="1007:79">)</operator> <operator pos:start="1007:81" pos:end="1007:82">||</operator>
            <operator pos:start="1008:13" pos:end="1008:13">(</operator><name pos:start="1008:14" pos:end="1008:17">NULL</name> <operator pos:start="1008:19" pos:end="1008:20">==</operator> <call pos:start="1008:22" pos:end="1008:76"><name pos:start="1008:22" pos:end="1008:32">CU_add_test</name><argument_list pos:start="1008:33" pos:end="1008:76">(<argument pos:start="1008:34" pos:end="1008:39"><expr pos:start="1008:34" pos:end="1008:39"><name pos:start="1008:34" pos:end="1008:39">pSuite</name></expr></argument>, <argument pos:start="1008:42" pos:end="1008:62"><expr pos:start="1008:42" pos:end="1008:62"><literal type="string" pos:start="1008:42" pos:end="1008:62">"Get CA Certificates"</literal></expr></argument>, <argument pos:start="1008:65" pos:end="1008:75"><expr pos:start="1008:65" pos:end="1008:75"><name pos:start="1008:65" pos:end="1008:75">us901_test5</name></expr></argument>)</argument_list></call><operator pos:start="1008:77" pos:end="1008:77">)</operator> <operator pos:start="1008:79" pos:end="1008:80">||</operator>
            <operator pos:start="1009:13" pos:end="1009:13">(</operator><name pos:start="1009:14" pos:end="1009:17">NULL</name> <operator pos:start="1009:19" pos:end="1009:20">==</operator> <call pos:start="1009:22" pos:end="1009:69"><name pos:start="1009:22" pos:end="1009:32">CU_add_test</name><argument_list pos:start="1009:33" pos:end="1009:69">(<argument pos:start="1009:34" pos:end="1009:39"><expr pos:start="1009:34" pos:end="1009:39"><name pos:start="1009:34" pos:end="1009:39">pSuite</name></expr></argument>, <argument pos:start="1009:42" pos:end="1009:55"><expr pos:start="1009:42" pos:end="1009:55"><literal type="string" pos:start="1009:42" pos:end="1009:55">"SSL 3.0 Fail"</literal></expr></argument>, <argument pos:start="1009:58" pos:end="1009:68"><expr pos:start="1009:58" pos:end="1009:68"><name pos:start="1009:58" pos:end="1009:68">us901_test6</name></expr></argument>)</argument_list></call><operator pos:start="1009:70" pos:end="1009:70">)</operator> <operator pos:start="1009:72" pos:end="1009:73">||</operator>
            <operator pos:start="1010:13" pos:end="1010:13">(</operator><name pos:start="1010:14" pos:end="1010:17">NULL</name> <operator pos:start="1010:19" pos:end="1010:20">==</operator> <call pos:start="1010:22" pos:end="1010:69"><name pos:start="1010:22" pos:end="1010:32">CU_add_test</name><argument_list pos:start="1010:33" pos:end="1010:69">(<argument pos:start="1010:34" pos:end="1010:39"><expr pos:start="1010:34" pos:end="1010:39"><name pos:start="1010:34" pos:end="1010:39">pSuite</name></expr></argument>, <argument pos:start="1010:42" pos:end="1010:55"><expr pos:start="1010:42" pos:end="1010:55"><literal type="string" pos:start="1010:42" pos:end="1010:55">"TLS 1.0 Fail"</literal></expr></argument>, <argument pos:start="1010:58" pos:end="1010:68"><expr pos:start="1010:58" pos:end="1010:68"><name pos:start="1010:58" pos:end="1010:68">us901_test7</name></expr></argument>)</argument_list></call><operator pos:start="1010:70" pos:end="1010:70">)</operator> <operator pos:start="1010:72" pos:end="1010:73">||</operator>
            <operator pos:start="1011:13" pos:end="1011:13">(</operator><name pos:start="1011:14" pos:end="1011:17">NULL</name> <operator pos:start="1011:19" pos:end="1011:20">==</operator> <call pos:start="1011:22" pos:end="1011:64"><name pos:start="1011:22" pos:end="1011:32">CU_add_test</name><argument_list pos:start="1011:33" pos:end="1011:64">(<argument pos:start="1011:34" pos:end="1011:39"><expr pos:start="1011:34" pos:end="1011:39"><name pos:start="1011:34" pos:end="1011:39">pSuite</name></expr></argument>, <argument pos:start="1011:42" pos:end="1011:50"><expr pos:start="1011:42" pos:end="1011:50"><literal type="string" pos:start="1011:42" pos:end="1011:50">"TLS 1.1"</literal></expr></argument>, <argument pos:start="1011:53" pos:end="1011:63"><expr pos:start="1011:53" pos:end="1011:63"><name pos:start="1011:53" pos:end="1011:63">us901_test8</name></expr></argument>)</argument_list></call><operator pos:start="1011:65" pos:end="1011:65">)</operator> <operator pos:start="1011:67" pos:end="1011:68">||</operator>
            <operator pos:start="1012:13" pos:end="1012:13">(</operator><name pos:start="1012:14" pos:end="1012:17">NULL</name> <operator pos:start="1012:19" pos:end="1012:20">==</operator> <call pos:start="1012:22" pos:end="1012:64"><name pos:start="1012:22" pos:end="1012:32">CU_add_test</name><argument_list pos:start="1012:33" pos:end="1012:64">(<argument pos:start="1012:34" pos:end="1012:39"><expr pos:start="1012:34" pos:end="1012:39"><name pos:start="1012:34" pos:end="1012:39">pSuite</name></expr></argument>, <argument pos:start="1012:42" pos:end="1012:50"><expr pos:start="1012:42" pos:end="1012:50"><literal type="string" pos:start="1012:42" pos:end="1012:50">"TLS 1.2"</literal></expr></argument>, <argument pos:start="1012:53" pos:end="1012:63"><expr pos:start="1012:53" pos:end="1012:63"><name pos:start="1012:53" pos:end="1012:63">us901_test9</name></expr></argument>)</argument_list></call><operator pos:start="1012:65" pos:end="1012:65">)</operator> <operator pos:start="1012:67" pos:end="1012:68">||</operator>
            <operator pos:start="1013:13" pos:end="1013:13">(</operator><name pos:start="1013:14" pos:end="1013:17">NULL</name> <operator pos:start="1013:19" pos:end="1013:20">==</operator> <call pos:start="1013:22" pos:end="1013:96"><name pos:start="1013:22" pos:end="1013:32">CU_add_test</name><argument_list pos:start="1013:33" pos:end="1013:96">(<argument pos:start="1013:34" pos:end="1013:39"><expr pos:start="1013:34" pos:end="1013:39"><name pos:start="1013:34" pos:end="1013:39">pSuite</name></expr></argument>, <argument pos:start="1013:42" pos:end="1013:81"><expr pos:start="1013:42" pos:end="1013:81"><literal type="string" pos:start="1013:42" pos:end="1013:81">"Certificate auth - explicit cert chain"</literal></expr></argument>, <argument pos:start="1013:84" pos:end="1013:95"><expr pos:start="1013:84" pos:end="1013:95"><name pos:start="1013:84" pos:end="1013:95">us901_test10</name></expr></argument>)</argument_list></call><operator pos:start="1013:97" pos:end="1013:97">)</operator> <operator pos:start="1013:99" pos:end="1013:100">||</operator>
            <operator pos:start="1014:13" pos:end="1014:13">(</operator><name pos:start="1014:14" pos:end="1014:17">NULL</name> <operator pos:start="1014:19" pos:end="1014:20">==</operator> <call pos:start="1014:22" pos:end="1014:96"><name pos:start="1014:22" pos:end="1014:32">CU_add_test</name><argument_list pos:start="1014:33" pos:end="1014:96">(<argument pos:start="1014:34" pos:end="1014:39"><expr pos:start="1014:34" pos:end="1014:39"><name pos:start="1014:34" pos:end="1014:39">pSuite</name></expr></argument>, <argument pos:start="1014:42" pos:end="1014:81"><expr pos:start="1014:42" pos:end="1014:81"><literal type="string" pos:start="1014:42" pos:end="1014:81">"Certificate auth - implicit cert chain"</literal></expr></argument>, <argument pos:start="1014:84" pos:end="1014:95"><expr pos:start="1014:84" pos:end="1014:95"><name pos:start="1014:84" pos:end="1014:95">us901_test11</name></expr></argument>)</argument_list></call><operator pos:start="1014:97" pos:end="1014:97">)</operator> <operator pos:start="1014:99" pos:end="1014:100">||</operator>
            <operator pos:start="1015:13" pos:end="1015:13">(</operator><name pos:start="1015:14" pos:end="1015:17">NULL</name> <operator pos:start="1015:19" pos:end="1015:20">==</operator> <call pos:start="1015:22" pos:end="1015:89"><name pos:start="1015:22" pos:end="1015:32">CU_add_test</name><argument_list pos:start="1015:33" pos:end="1015:89">(<argument pos:start="1015:34" pos:end="1015:39"><expr pos:start="1015:34" pos:end="1015:39"><name pos:start="1015:34" pos:end="1015:39">pSuite</name></expr></argument>, <argument pos:start="1015:42" pos:end="1015:74"><expr pos:start="1015:42" pos:end="1015:74"><literal type="string" pos:start="1015:42" pos:end="1015:74">"Certificate auth - revoked cert"</literal></expr></argument>, <argument pos:start="1015:77" pos:end="1015:88"><expr pos:start="1015:77" pos:end="1015:88"><name pos:start="1015:77" pos:end="1015:88">us901_test12</name></expr></argument>)</argument_list></call><operator pos:start="1015:90" pos:end="1015:90">)</operator> <operator pos:start="1015:92" pos:end="1015:93">||</operator>
            <operator pos:start="1016:13" pos:end="1016:13">(</operator><name pos:start="1016:14" pos:end="1016:17">NULL</name> <operator pos:start="1016:19" pos:end="1016:20">==</operator> <call pos:start="1016:22" pos:end="1016:93"><name pos:start="1016:22" pos:end="1016:32">CU_add_test</name><argument_list pos:start="1016:33" pos:end="1016:93">(<argument pos:start="1016:34" pos:end="1016:39"><expr pos:start="1016:34" pos:end="1016:39"><name pos:start="1016:34" pos:end="1016:39">pSuite</name></expr></argument>, <argument pos:start="1016:42" pos:end="1016:78"><expr pos:start="1016:42" pos:end="1016:78"><literal type="string" pos:start="1016:42" pos:end="1016:78">"Certificate auth - self-signed cert"</literal></expr></argument>, <argument pos:start="1016:81" pos:end="1016:92"><expr pos:start="1016:81" pos:end="1016:92"><name pos:start="1016:81" pos:end="1016:92">us901_test13</name></expr></argument>)</argument_list></call><operator pos:start="1016:94" pos:end="1016:94">)</operator> <operator pos:start="1016:96" pos:end="1016:97">||</operator>
            <operator pos:start="1017:13" pos:end="1017:13">(</operator><name pos:start="1017:14" pos:end="1017:17">NULL</name> <operator pos:start="1017:19" pos:end="1017:20">==</operator> <call pos:start="1017:22" pos:end="1017:84"><name pos:start="1017:22" pos:end="1017:32">CU_add_test</name><argument_list pos:start="1017:33" pos:end="1017:84">(<argument pos:start="1017:34" pos:end="1017:39"><expr pos:start="1017:34" pos:end="1017:39"><name pos:start="1017:34" pos:end="1017:39">pSuite</name></expr></argument>, <argument pos:start="1017:42" pos:end="1017:69"><expr pos:start="1017:42" pos:end="1017:69"><literal type="string" pos:start="1017:42" pos:end="1017:69">"Anon cipher suite disabled"</literal></expr></argument>, <argument pos:start="1017:72" pos:end="1017:83"><expr pos:start="1017:72" pos:end="1017:83"><name pos:start="1017:72" pos:end="1017:83">us901_test14</name></expr></argument>)</argument_list></call><operator pos:start="1017:85" pos:end="1017:85">)</operator> <operator pos:start="1017:87" pos:end="1017:88">||</operator>
            <operator pos:start="1018:13" pos:end="1018:13">(</operator><name pos:start="1018:14" pos:end="1018:17">NULL</name> <operator pos:start="1018:19" pos:end="1018:20">==</operator> <call pos:start="1018:22" pos:end="1018:68"><name pos:start="1018:22" pos:end="1018:32">CU_add_test</name><argument_list pos:start="1018:33" pos:end="1018:68">(<argument pos:start="1018:34" pos:end="1018:39"><expr pos:start="1018:34" pos:end="1018:39"><name pos:start="1018:34" pos:end="1018:39">pSuite</name></expr></argument>, <argument pos:start="1018:42" pos:end="1018:53"><expr pos:start="1018:42" pos:end="1018:53"><literal type="string" pos:start="1018:42" pos:end="1018:53">"NULL Realm"</literal></expr></argument>, <argument pos:start="1018:56" pos:end="1018:67"><expr pos:start="1018:56" pos:end="1018:67"><name pos:start="1018:56" pos:end="1018:67">us901_test15</name></expr></argument>)</argument_list></call><operator pos:start="1018:69" pos:end="1018:69">)</operator> <operator pos:start="1018:71" pos:end="1018:72">||</operator>
            <operator pos:start="1019:13" pos:end="1019:13">(</operator><name pos:start="1019:14" pos:end="1019:17">NULL</name> <operator pos:start="1019:19" pos:end="1019:20">==</operator> <call pos:start="1019:22" pos:end="1019:74"><name pos:start="1019:22" pos:end="1019:32">CU_add_test</name><argument_list pos:start="1019:33" pos:end="1019:74">(<argument pos:start="1019:34" pos:end="1019:39"><expr pos:start="1019:34" pos:end="1019:39"><name pos:start="1019:34" pos:end="1019:39">pSuite</name></expr></argument>, <argument pos:start="1019:42" pos:end="1019:59"><expr pos:start="1019:42" pos:end="1019:59"><literal type="string" pos:start="1019:42" pos:end="1019:59">"NULL server cert"</literal></expr></argument>, <argument pos:start="1019:62" pos:end="1019:73"><expr pos:start="1019:62" pos:end="1019:73"><name pos:start="1019:62" pos:end="1019:73">us901_test16</name></expr></argument>)</argument_list></call><operator pos:start="1019:75" pos:end="1019:75">)</operator> <operator pos:start="1019:77" pos:end="1019:78">||</operator>
            <operator pos:start="1020:13" pos:end="1020:13">(</operator><name pos:start="1020:14" pos:end="1020:17">NULL</name> <operator pos:start="1020:19" pos:end="1020:20">==</operator> <call pos:start="1020:22" pos:end="1020:73"><name pos:start="1020:22" pos:end="1020:32">CU_add_test</name><argument_list pos:start="1020:33" pos:end="1020:73">(<argument pos:start="1020:34" pos:end="1020:39"><expr pos:start="1020:34" pos:end="1020:39"><name pos:start="1020:34" pos:end="1020:39">pSuite</name></expr></argument>, <argument pos:start="1020:42" pos:end="1020:58"><expr pos:start="1020:42" pos:end="1020:58"><literal type="string" pos:start="1020:42" pos:end="1020:58">"NULL server key"</literal></expr></argument>, <argument pos:start="1020:61" pos:end="1020:72"><expr pos:start="1020:61" pos:end="1020:72"><name pos:start="1020:61" pos:end="1020:72">us901_test17</name></expr></argument>)</argument_list></call><operator pos:start="1020:74" pos:end="1020:74">)</operator> <operator pos:start="1020:76" pos:end="1020:77">||</operator>
            <operator pos:start="1021:13" pos:end="1021:13">(</operator><name pos:start="1021:14" pos:end="1021:17">NULL</name> <operator pos:start="1021:19" pos:end="1021:20">==</operator> <call pos:start="1021:22" pos:end="1021:77"><name pos:start="1021:22" pos:end="1021:32">CU_add_test</name><argument_list pos:start="1021:33" pos:end="1021:77">(<argument pos:start="1021:34" pos:end="1021:39"><expr pos:start="1021:34" pos:end="1021:39"><name pos:start="1021:34" pos:end="1021:39">pSuite</name></expr></argument>, <argument pos:start="1021:42" pos:end="1021:62"><expr pos:start="1021:42" pos:end="1021:62"><literal type="string" pos:start="1021:42" pos:end="1021:62">"NULL local CA chain"</literal></expr></argument>, <argument pos:start="1021:65" pos:end="1021:76"><expr pos:start="1021:65" pos:end="1021:76"><name pos:start="1021:65" pos:end="1021:76">us901_test18</name></expr></argument>)</argument_list></call><operator pos:start="1021:78" pos:end="1021:78">)</operator> <operator pos:start="1021:80" pos:end="1021:81">||</operator>
            <operator pos:start="1022:13" pos:end="1022:13">(</operator><name pos:start="1022:14" pos:end="1022:17">NULL</name> <operator pos:start="1022:19" pos:end="1022:20">==</operator> <call pos:start="1022:22" pos:end="1022:82"><name pos:start="1022:22" pos:end="1022:32">CU_add_test</name><argument_list pos:start="1022:33" pos:end="1022:82">(<argument pos:start="1022:34" pos:end="1022:39"><expr pos:start="1022:34" pos:end="1022:39"><name pos:start="1022:34" pos:end="1022:39">pSuite</name></expr></argument>, <argument pos:start="1022:42" pos:end="1022:67"><expr pos:start="1022:42" pos:end="1022:67"><literal type="string" pos:start="1022:42" pos:end="1022:67">"Corrupted local CA chain"</literal></expr></argument>, <argument pos:start="1022:70" pos:end="1022:81"><expr pos:start="1022:70" pos:end="1022:81"><name pos:start="1022:70" pos:end="1022:81">us901_test19</name></expr></argument>)</argument_list></call><operator pos:start="1022:83" pos:end="1022:83">)</operator> <operator pos:start="1022:85" pos:end="1022:86">||</operator>
            <operator pos:start="1023:13" pos:end="1023:13">(</operator><name pos:start="1023:14" pos:end="1023:17">NULL</name> <operator pos:start="1023:19" pos:end="1023:20">==</operator> <call pos:start="1023:22" pos:end="1023:75"><name pos:start="1023:22" pos:end="1023:32">CU_add_test</name><argument_list pos:start="1023:33" pos:end="1023:75">(<argument pos:start="1023:34" pos:end="1023:39"><expr pos:start="1023:34" pos:end="1023:39"><name pos:start="1023:34" pos:end="1023:39">pSuite</name></expr></argument>, <argument pos:start="1023:42" pos:end="1023:60"><expr pos:start="1023:42" pos:end="1023:60"><literal type="string" pos:start="1023:42" pos:end="1023:60">"HTTP POST cacerts"</literal></expr></argument>, <argument pos:start="1023:63" pos:end="1023:74"><expr pos:start="1023:63" pos:end="1023:74"><name pos:start="1023:63" pos:end="1023:74">us901_test20</name></expr></argument>)</argument_list></call><operator pos:start="1023:76" pos:end="1023:76">)</operator> <operator pos:start="1023:78" pos:end="1023:79">||</operator>
            <operator pos:start="1024:13" pos:end="1024:13">(</operator><name pos:start="1024:14" pos:end="1024:17">NULL</name> <operator pos:start="1024:19" pos:end="1024:20">==</operator> <call pos:start="1024:22" pos:end="1024:97"><name pos:start="1024:22" pos:end="1024:32">CU_add_test</name><argument_list pos:start="1024:33" pos:end="1024:97">(<argument pos:start="1024:34" pos:end="1024:39"><expr pos:start="1024:34" pos:end="1024:39"><name pos:start="1024:34" pos:end="1024:39">pSuite</name></expr></argument>, <argument pos:start="1024:42" pos:end="1024:82"><expr pos:start="1024:42" pos:end="1024:82"><literal type="string" pos:start="1024:42" pos:end="1024:82">"SimpleEnroll - good HTTP auth/good Cert"</literal></expr></argument>, <argument pos:start="1024:85" pos:end="1024:96"><expr pos:start="1024:85" pos:end="1024:96"><name pos:start="1024:85" pos:end="1024:96">us901_test21</name></expr></argument>)</argument_list></call><operator pos:start="1024:98" pos:end="1024:98">)</operator> <operator pos:start="1024:100" pos:end="1024:101">||</operator>
            <operator pos:start="1025:13" pos:end="1025:13">(</operator><name pos:start="1025:14" pos:end="1025:17">NULL</name> <operator pos:start="1025:19" pos:end="1025:20">==</operator> <call pos:start="1025:22" pos:end="1025:96"><name pos:start="1025:22" pos:end="1025:32">CU_add_test</name><argument_list pos:start="1025:33" pos:end="1025:96">(<argument pos:start="1025:34" pos:end="1025:39"><expr pos:start="1025:34" pos:end="1025:39"><name pos:start="1025:34" pos:end="1025:39">pSuite</name></expr></argument>, <argument pos:start="1025:42" pos:end="1025:81"><expr pos:start="1025:42" pos:end="1025:81"><literal type="string" pos:start="1025:42" pos:end="1025:81">"SimpleEnroll - bad HTTP auth/good Cert"</literal></expr></argument>, <argument pos:start="1025:84" pos:end="1025:95"><expr pos:start="1025:84" pos:end="1025:95"><name pos:start="1025:84" pos:end="1025:95">us901_test22</name></expr></argument>)</argument_list></call><operator pos:start="1025:97" pos:end="1025:97">)</operator> <operator pos:start="1025:99" pos:end="1025:100">||</operator>
            <operator pos:start="1026:13" pos:end="1026:13">(</operator><name pos:start="1026:14" pos:end="1026:17">NULL</name> <operator pos:start="1026:19" pos:end="1026:20">==</operator> <call pos:start="1026:22" pos:end="1026:93"><name pos:start="1026:22" pos:end="1026:32">CU_add_test</name><argument_list pos:start="1026:33" pos:end="1026:93">(<argument pos:start="1026:34" pos:end="1026:39"><expr pos:start="1026:34" pos:end="1026:39"><name pos:start="1026:34" pos:end="1026:39">pSuite</name></expr></argument>, <argument pos:start="1026:42" pos:end="1026:78"><expr pos:start="1026:42" pos:end="1026:78"><literal type="string" pos:start="1026:42" pos:end="1026:78">"SimpleEnroll - no HTTP auth/no Cert"</literal></expr></argument>, <argument pos:start="1026:81" pos:end="1026:92"><expr pos:start="1026:81" pos:end="1026:92"><name pos:start="1026:81" pos:end="1026:92">us901_test23</name></expr></argument>)</argument_list></call><operator pos:start="1026:94" pos:end="1026:94">)</operator></expr>)</condition>
    <block pos:start="1027:5" pos:end="1030:5">{<block_content pos:start="1028:9" pos:end="1029:30">
        <expr_stmt pos:start="1028:9" pos:end="1028:30"><expr pos:start="1028:9" pos:end="1028:29"><call pos:start="1028:9" pos:end="1028:29"><name pos:start="1028:9" pos:end="1028:27">CU_cleanup_registry</name><argument_list pos:start="1028:28" pos:end="1028:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1029:9" pos:end="1029:30">return <expr pos:start="1029:16" pos:end="1029:29"><call pos:start="1029:16" pos:end="1029:29"><name pos:start="1029:16" pos:end="1029:27">CU_get_error</name><argument_list pos:start="1029:28" pos:end="1029:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1032:5" pos:end="1034:0">return <expr pos:start="1032:12" pos:end="1032:22"><name pos:start="1032:12" pos:end="1032:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1033:1" pos:end="1033:6">#<cpp:directive pos:start="1033:2" pos:end="1033:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
