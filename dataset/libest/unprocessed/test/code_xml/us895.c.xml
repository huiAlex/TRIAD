<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us895.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us895.c - Unit Tests for User Story 895 - Proxy CSR Attributes
 *
 * November, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:21">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:21">"st_proxy.h"</cpp:file></cpp:include>
<cpp:include pos:start="20:1" pos:end="20:24">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="22:1" pos:end="22:17">#<cpp:directive pos:start="22:2" pos:end="22:6">ifdef</cpp:directive> <name pos:start="22:8" pos:end="22:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="24:1" pos:end="24:28">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

<decl_stmt pos:start="27:1" pos:end="27:37"><decl pos:start="27:1" pos:end="27:36"><type pos:start="27:1" pos:end="27:22"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:15">unsigned</name> <name pos:start="27:17" pos:end="27:20">char</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:29">cacerts</name> <init pos:start="27:31" pos:end="27:36">= <expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="28:1" pos:end="83:0"><decl pos:start="28:1" pos:end="28:26"><type pos:start="28:1" pos:end="28:10"><specifier pos:start="28:1" pos:end="28:6">static</specifier> <name pos:start="28:8" pos:end="28:10">int</name></type> <name pos:start="28:12" pos:end="28:22">cacerts_len</name> <init pos:start="28:24" pos:end="28:26">= <expr pos:start="28:26" pos:end="28:26"><literal type="number" pos:start="28:26" pos:end="28:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="30:1" pos:end="30:33">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:25"><name pos:start="30:9" pos:end="30:25">US895_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="30:29" pos:end="30:33">29895</cpp:value></cpp:define>
<cpp:define pos:start="31:1" pos:end="31:32">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:24">US895_PROXY_PORT</name></cpp:macro>   <cpp:value pos:start="31:28" pos:end="31:32">29095</cpp:value></cpp:define>

<cpp:ifndef pos:start="33:1" pos:end="33:13">#<cpp:directive pos:start="33:2" pos:end="33:7">ifndef</cpp:directive> <name pos:start="33:9" pos:end="33:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="34:1" pos:end="34:49">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:20"><name pos:start="34:9" pos:end="34:20">US895_CACERT</name></cpp:macro>        <cpp:value pos:start="34:29" pos:end="34:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="35:1" pos:end="35:49">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:26">US895_TRUSTED_CERT</name></cpp:macro>  <cpp:value pos:start="35:29" pos:end="35:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="36:1" pos:end="36:49">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:24"><name pos:start="36:9" pos:end="36:24">SERVER_UT_CACERT</name></cpp:macro>    <cpp:value pos:start="36:29" pos:end="36:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="37:1" pos:end="37:53">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24">SERVER_UT_PUBKEY</name></cpp:macro>    <cpp:value pos:start="37:29" pos:end="37:53">"./est_client_ut_keypair"</cpp:value></cpp:define>

<cpp:define pos:start="39:1" pos:end="39:39">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:23">US895_SERVER_IP</name></cpp:macro>     <cpp:value pos:start="39:29" pos:end="39:39">"127.0.0.1"</cpp:value></cpp:define> 
<cpp:define pos:start="40:1" pos:end="40:49">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:21"><name pos:start="40:9" pos:end="40:21">US895_CACERTS</name></cpp:macro>       <cpp:value pos:start="40:29" pos:end="40:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:49">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:25">US895_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="41:29" pos:end="41:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:71">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:28"><name pos:start="42:9" pos:end="42:28">US895_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="42:30" pos:end="42:71">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="43:1" pos:end="43:5">#<cpp:directive pos:start="43:2" pos:end="43:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="44:1" pos:end="44:51">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:20"><name pos:start="44:9" pos:end="44:20">US895_CACERT</name></cpp:macro>        <cpp:value pos:start="44:29" pos:end="44:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:50">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:26">US895_TRUSTED_CERT</name></cpp:macro>  <cpp:value pos:start="45:29" pos:end="45:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="46:1" pos:end="46:52">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:24"><name pos:start="46:9" pos:end="46:24">SERVER_UT_CACERT</name></cpp:macro>     <cpp:value pos:start="46:30" pos:end="46:52">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:51">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:24">SERVER_UT_PUBKEY</name></cpp:macro>    <cpp:value pos:start="47:29" pos:end="47:51">"est_client_ut_keypair"</cpp:value></cpp:define>

<cpp:define pos:start="49:1" pos:end="49:39">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:23">US895_SERVER_IP</name></cpp:macro>     <cpp:value pos:start="49:29" pos:end="49:39">"127.0.0.1"</cpp:value></cpp:define> 
<cpp:define pos:start="50:1" pos:end="50:51">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:21"><name pos:start="50:9" pos:end="50:21">US895_CACERTS</name></cpp:macro>       <cpp:value pos:start="50:29" pos:end="50:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:50">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:25">US895_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="51:29" pos:end="51:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:74">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:28"><name pos:start="52:9" pos:end="52:28">US895_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="52:30" pos:end="52:74">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="55:1" pos:end="55:46">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:21">TEST_ATTR_POP</name></cpp:macro> <cpp:value pos:start="55:23" pos:end="55:46">"MAsGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:184">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:23"><name pos:start="56:9" pos:end="56:23">TEST_ATTR_NOPOP</name></cpp:macro> <cpp:value pos:start="56:25" pos:end="56:184">"MHEwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:199">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:26">TEST_ATTR_NOPOPPOP</name></cpp:macro> <cpp:value pos:start="57:28" pos:end="57:199">"MHwwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYJKoZIhvcNAQkH\0"</cpp:value></cpp:define>
<cpp:define pos:start="58:1" pos:end="58:199">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:26"><name pos:start="58:9" pos:end="58:26">TEST_ATTR_POPADDED</name></cpp:macro> <cpp:value pos:start="58:28" pos:end="58:199">"MHwwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYJKoZIhvcNAQkH\0"</cpp:value></cpp:define>
<cpp:define pos:start="59:1" pos:end="59:79">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:18">TEST_ATTR1</name></cpp:macro> <cpp:value pos:start="59:20" pos:end="59:79">"MCYGBysGAQEBARYGCSqGSIb3DQEJBwYFK4EEACIGCWCGSAFlAwQCAg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="60:1" pos:end="60:27">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:18"><name pos:start="60:9" pos:end="60:18">TEST_ATTR2</name></cpp:macro> <cpp:value pos:start="60:20" pos:end="60:27">"MAA=\0"</cpp:value></cpp:define>
<cpp:define pos:start="61:1" pos:end="61:27">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:18">TEST_ATTR7</name></cpp:macro> <cpp:value pos:start="61:20" pos:end="61:27">"MA==\0"</cpp:value></cpp:define>
<cpp:define pos:start="62:1" pos:end="62:47">#<cpp:directive pos:start="62:2" pos:end="62:7">define</cpp:directive> <cpp:macro pos:start="62:9" pos:end="62:22"><name pos:start="62:9" pos:end="62:22">TEST_ATTR2_POP</name></cpp:macro> <cpp:value pos:start="62:24" pos:end="62:47">"MAsGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="63:1" pos:end="63:53">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:18">TEST_ATTR8</name></cpp:macro> <cpp:value pos:start="63:20" pos:end="63:53">"MAthisis badsGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="64:1" pos:end="64:223">#<cpp:directive pos:start="64:2" pos:end="64:7">define</cpp:directive> <cpp:macro pos:start="64:9" pos:end="64:18"><name pos:start="64:9" pos:end="64:18">TEST_ATTR3</name></cpp:macro> <cpp:value pos:start="64:20" pos:end="64:223">"MIGSMFgGA4g3AjFRExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhExlQYXJzZSBTRVQgYXMgMi45OTkuMyBkYXRhExlQYXJzZSBTRVQgYXMgMi45OTkuNCBkYXRhBgkqhkiG9w0BCQcwIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="65:1" pos:end="65:195">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:22">TEST_ATTR4_122</name></cpp:macro> <cpp:value pos:start="65:24" pos:end="65:195">"MHowLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYHKwYBAQEBFg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="66:1" pos:end="66:214">#<cpp:directive pos:start="66:2" pos:end="66:7">define</cpp:directive> <cpp:macro pos:start="66:9" pos:end="66:25"><name pos:start="66:9" pos:end="66:25">TEST_ATTR4_122POP</name></cpp:macro> <cpp:value pos:start="66:27" pos:end="66:214">"MIGFMCwGA4g3AjElBgOINwMGA4g3BBMZUGFyc2UgU0VUIGFzIDIuOTk5LjIgZGF0YQYJYIZIAWUDBAICBgkrJAMDAggBAQswIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEGBysGAQEBARYGBysGAQEBARYGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="67:1" pos:end="67:187">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:22">TEST_ATTR5_117</name></cpp:macro> <cpp:value pos:start="67:24" pos:end="67:187">"MHUwJwYDiDcCMSAGA4g3AwYDiDcEExRQYXJzZSBTRVQgYXMgMi45OTkuMgYJYIZIAWUDBAICBgkrJAMDAggBAQswIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="68:1" pos:end="68:206">#<cpp:directive pos:start="68:2" pos:end="68:7">define</cpp:directive> <cpp:macro pos:start="68:9" pos:end="68:25"><name pos:start="68:9" pos:end="68:25">TEST_ATTR5_117POP</name></cpp:macro> <cpp:value pos:start="68:27" pos:end="68:206">"MIGAMCcGA4g3AjEgBgOINwMGA4g3BBMUUGFyc2UgU0VUIGFzIDIuOTk5LjIGCWCGSAFlAwQCAgYJKyQDAwIIAQELMCIGA4g3ATEbExlQYXJzZSBTRVQgYXMgMi45OTkuMSBkYXRhBgcrBgEBAQEWBgcrBgEBAQEWBgkqhkiG9w0BCQc=\0"</cpp:value></cpp:define>
<cpp:define pos:start="69:1" pos:end="69:187">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:22">TEST_ATTR6_116</name></cpp:macro> <cpp:value pos:start="69:24" pos:end="69:187">"MHQwJwYDiDcCMSAGA4g3AwYDiDcEExRQYXJzZSBTRVQgYXMgMi45OTkuMgYJYIZIAWUDBAICBgkrJAMDAggBAQswIQYDiDcBMRoTGFBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdAYHKwYBAQEBFgYHKwYBAQEBFg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="70:1" pos:end="70:358">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:21"><name pos:start="70:9" pos:end="70:21">TEST_ATTR_244</name></cpp:macro> <cpp:value pos:start="70:23" pos:end="70:358">"MIH1MGQGA4g3AjFdBgOINwMGA4g3BBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBlBgOINwExXhNcUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="71:1" pos:end="71:358">#<cpp:directive pos:start="71:2" pos:end="71:7">define</cpp:directive> <cpp:macro pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:21">TEST_ATTR_245</name></cpp:macro> <cpp:value pos:start="71:23" pos:end="71:358">"MIH2MGQGA4g3AjFdBgOINwMGA4g3BBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBmBgOINwExXxNdUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1BgcrBgEBAQEWBgcrBgEBAQEW\0"</cpp:value></cpp:define>
<cpp:define pos:start="72:1" pos:end="72:366">#<cpp:directive pos:start="72:2" pos:end="72:7">define</cpp:directive> <cpp:macro pos:start="72:9" pos:end="72:21"><name pos:start="72:9" pos:end="72:21">TEST_ATTR_250</name></cpp:macro> <cpp:value pos:start="72:23" pos:end="72:366">"MIH7MGQGA4g3AjFdBgOINwMGA4g3BBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBrBgOINwExZBNiUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1MTIzNDUGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="73:1" pos:end="73:385">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:24">TEST_ATTR_250POP</name></cpp:macro> <cpp:value pos:start="73:26" pos:end="73:385">"MIIBBjBkBgOINwIxXQYDiDcDBgOINwQTUVBhcnNlIFNFVCBhcyAyLjk5OS4yIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MAYJYIZIAWUDBAICBgkrJAMDAggBAQswawYDiDcBMWQTYlBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwYWIxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTEyMzQ1BgcrBgEBAQEWBgcrBgEBAQEWBgkqhkiG9w0BCQc=\0"</cpp:value></cpp:define>
<cpp:define pos:start="74:1" pos:end="74:314">#<cpp:directive pos:start="74:2" pos:end="74:7">define</cpp:directive> <cpp:macro pos:start="74:9" pos:end="74:21"><name pos:start="74:9" pos:end="74:21">TEST_ALL_ATTR</name></cpp:macro> <cpp:value pos:start="74:23" pos:end="74:314">"MIHTMIGBBgOINwIxegEB/wICAP8GA4g3AwYDiDcECgECEhAxMjM0NTY3ODkwQUJDREVGExRQYXJzZSBTRVQgYXMgMi45OTkuMhQFMTIzNDUUBTEyMzQ1FgUxMjM0NRoFMTIzNDUcFAAAADEAAAAyAAAAMwAAADQAAAA1HgoAMQAyADMANAA1BglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYHKwYBAQEBFgEBAA==\0"</cpp:value></cpp:define>
<cpp:define pos:start="75:1" pos:end="75:1396">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:23">TEST_1024_NOPOP</name></cpp:macro> <cpp:value pos:start="75:25" pos:end="75:1396">"MIID/DCCA2MGA4g3AjGCA1oGA4g3AwYDiDcEEioxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTISZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwE1FQYXJzZSBTRVQgYXMgMi45OTkuMiAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAGCWCGSAFlAwQCAgYJKyQDAwIIAQELMGsGA4g3ATFkE2JQYXJzZSBTRVQgYXMgMi45OTkuMSBkYXRhIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MGFiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDUxMjM0NQYHKwYBAQEBFgYHKwYBAQEBFg==\0"</cpp:value></cpp:define>

<cpp:define pos:start="77:1" pos:end="77:1396">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:23">TEST_1025_NOPOP</name></cpp:macro> <cpp:value pos:start="77:25" pos:end="77:1396">"MIID/TCCA2QGA4g3AjGCA1sGA4g3AwYDiDcEEisxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBrBgOINwExZBNiUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1MTIzNDUGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="78:1" pos:end="78:1406">#<cpp:directive pos:start="78:2" pos:end="78:7">define</cpp:directive> <cpp:macro pos:start="78:9" pos:end="78:21"><name pos:start="78:9" pos:end="78:21">TEST_1024_POP</name></cpp:macro> <cpp:value pos:start="78:23" pos:end="78:1406">"MIIEBzCCA2MGA4g3AjGCA1oGA4g3AwYDiDcEEioxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTISZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwE1FQYXJzZSBTRVQgYXMgMi45OTkuMiAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAGCWCGSAFlAwQCAgYJKyQDAwIIAQELMGsGA4g3ATFkE2JQYXJzZSBTRVQgYXMgMi45OTkuMSBkYXRhIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MGFiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDUxMjM0NQYHKwYBAQEBFgYHKwYBAQEBFgYJKoZIhvcNAQkH\0"</cpp:value></cpp:define>

<cpp:define pos:start="80:1" pos:end="80:1471">#<cpp:directive pos:start="80:2" pos:end="80:7">define</cpp:directive> <cpp:macro pos:start="80:9" pos:end="80:22"><name pos:start="80:9" pos:end="80:22">TEST_LONG_ATTR</name></cpp:macro> <cpp:value pos:start="80:24" pos:end="80:1471">"MIIENzCCA54GA4g3AjGCA5UGA4g3AwYDiDcEEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTATUVBhcnNlIFNFVCBhcyAyLjk5OS4yIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MAYJYIZIAWUDBAICBgkrJAMDAggBAQswawYDiDcBMWQTYlBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwYWIxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTEyMzQ1BgcrBgEBAQEWBgcrBgEBAQEW\0"</cpp:value></cpp:define>

<cpp:define pos:start="82:1" pos:end="82:30">#<cpp:directive pos:start="82:2" pos:end="82:7">define</cpp:directive> <cpp:macro pos:start="82:9" pos:end="82:26"><name pos:start="82:9" pos:end="82:26">EST_UT_MAX_CMD_LEN</name></cpp:macro> <cpp:value pos:start="82:28" pos:end="82:30">255</cpp:value></cpp:define>
<decl_stmt pos:start="83:1" pos:end="83:21"><decl pos:start="83:1" pos:end="83:20"><type pos:start="83:1" pos:end="83:16"><specifier pos:start="83:1" pos:end="83:6">extern</specifier> <name pos:start="83:8" pos:end="83:14">EST_CTX</name> <modifier pos:start="83:16" pos:end="83:16">*</modifier></type><name pos:start="83:17" pos:end="83:20">ectx</name></decl>;</decl_stmt>

<function pos:start="85:1" pos:end="87:1"><type pos:start="85:1" pos:end="85:11"><specifier pos:start="85:1" pos:end="85:6">static</specifier> <name pos:start="85:8" pos:end="85:11">void</name></type> <name pos:start="85:13" pos:end="85:23">us895_clean</name> <parameter_list pos:start="85:25" pos:end="85:30">(<parameter pos:start="85:26" pos:end="85:29"><decl pos:start="85:26" pos:end="85:29"><type pos:start="85:26" pos:end="85:29"><name pos:start="85:26" pos:end="85:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="86:1" pos:end="87:1">{<block_content>
</block_content>}</block></function>

<function pos:start="89:1" pos:end="126:1"><type pos:start="89:1" pos:end="89:10"><specifier pos:start="89:1" pos:end="89:6">static</specifier> <name pos:start="89:8" pos:end="89:10">int</name></type> <name pos:start="89:12" pos:end="89:29">us895_start_server</name> <parameter_list pos:start="89:31" pos:end="89:58">(<parameter pos:start="89:32" pos:end="89:48"><decl pos:start="89:32" pos:end="89:48"><type pos:start="89:32" pos:end="89:48"><name pos:start="89:32" pos:end="89:34">int</name></type> <name pos:start="89:36" pos:end="89:48">manual_enroll</name></decl></parameter>, <parameter pos:start="89:51" pos:end="89:57"><decl pos:start="89:51" pos:end="89:57"><type pos:start="89:51" pos:end="89:57"><name pos:start="89:51" pos:end="89:53">int</name></type> <name pos:start="89:55" pos:end="89:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="90:1" pos:end="126:1">{<block_content pos:start="91:5" pos:end="125:14">
    <decl_stmt pos:start="91:5" pos:end="91:11"><decl pos:start="91:5" pos:end="91:10"><type pos:start="91:5" pos:end="91:7"><name pos:start="91:5" pos:end="91:7">int</name></type> <name pos:start="91:9" pos:end="91:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="93:5" pos:end="102:23"><expr pos:start="93:5" pos:end="102:22"><name pos:start="93:5" pos:end="93:6">rv</name> <operator pos:start="93:8" pos:end="93:8">=</operator> <call pos:start="93:10" pos:end="102:22"><name pos:start="93:10" pos:end="93:17">st_start</name><argument_list pos:start="93:18" pos:end="102:22">(<argument pos:start="93:19" pos:end="93:35"><expr pos:start="93:19" pos:end="93:35"><name pos:start="93:19" pos:end="93:35">US895_SERVER_PORT</name></expr></argument>,
                  <argument pos:start="94:19" pos:end="94:38"><expr pos:start="94:19" pos:end="94:38"><name pos:start="94:19" pos:end="94:38">US895_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="95:19" pos:end="95:38"><expr pos:start="95:19" pos:end="95:38"><name pos:start="95:19" pos:end="95:38">US895_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="96:19" pos:end="96:36"><expr pos:start="96:19" pos:end="96:36"><literal type="string" pos:start="96:19" pos:end="96:36">"US895 test realm"</literal></expr></argument>,
                  <argument pos:start="97:19" pos:end="97:30"><expr pos:start="97:19" pos:end="97:30"><name pos:start="97:19" pos:end="97:30">US895_CACERT</name></expr></argument>,
                  <argument pos:start="98:19" pos:end="98:36"><expr pos:start="98:19" pos:end="98:36"><name pos:start="98:19" pos:end="98:36">US895_TRUSTED_CERT</name></expr></argument>,
                  <argument pos:start="99:19" pos:end="99:39"><expr pos:start="99:19" pos:end="99:39"><literal type="string" pos:start="99:19" pos:end="99:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="100:19" pos:end="100:31"><expr pos:start="100:19" pos:end="100:31"><name pos:start="100:19" pos:end="100:31">manual_enroll</name></expr></argument>,
                  <argument pos:start="101:19" pos:end="101:19"><expr pos:start="101:19" pos:end="101:19"><literal type="number" pos:start="101:19" pos:end="101:19">0</literal></expr></argument>,
                  <argument pos:start="102:19" pos:end="102:21"><expr pos:start="102:19" pos:end="102:21"><name pos:start="102:19" pos:end="102:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="104:5" pos:end="106:5"><if pos:start="104:5" pos:end="106:5">if <condition pos:start="104:8" pos:end="104:11">(<expr pos:start="104:9" pos:end="104:10"><name pos:start="104:9" pos:end="104:10">rv</name></expr>)</condition> <block pos:start="104:13" pos:end="106:5">{<block_content pos:start="105:9" pos:end="105:20">
        <return pos:start="105:9" pos:end="105:20">return <expr pos:start="105:16" pos:end="105:19"><operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:18">rv</name><operator pos:start="105:19" pos:end="105:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="108:5" pos:end="110:7">/*
     * Next we start an EST proxy acting as an RA
     */</comment>
    <expr_stmt pos:start="111:5" pos:end="122:29"><expr pos:start="111:5" pos:end="122:28"><name pos:start="111:5" pos:end="111:6">rv</name> <operator pos:start="111:8" pos:end="111:8">=</operator> <call pos:start="111:10" pos:end="122:28"><name pos:start="111:10" pos:end="111:23">st_proxy_start</name><argument_list pos:start="111:24" pos:end="122:28">(<argument pos:start="111:25" pos:end="111:40"><expr pos:start="111:25" pos:end="111:40"><name pos:start="111:25" pos:end="111:40">US895_PROXY_PORT</name></expr></argument>,
                        <argument pos:start="112:25" pos:end="112:44"><expr pos:start="112:25" pos:end="112:44"><name pos:start="112:25" pos:end="112:44">US895_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="113:25" pos:end="113:44"><expr pos:start="113:25" pos:end="113:44"><name pos:start="113:25" pos:end="113:44">US895_SERVER_CERTKEY</name></expr></argument>,
                        <argument pos:start="114:25" pos:end="114:42"><expr pos:start="114:25" pos:end="114:42"><literal type="string" pos:start="114:25" pos:end="114:42">"US895 test realm"</literal></expr></argument>,
                        <argument pos:start="115:25" pos:end="115:36"><expr pos:start="115:25" pos:end="115:36"><name pos:start="115:25" pos:end="115:36">US895_CACERT</name></expr></argument>,
                        <argument pos:start="116:25" pos:end="116:42"><expr pos:start="116:25" pos:end="116:42"><name pos:start="116:25" pos:end="116:42">US895_TRUSTED_CERT</name></expr></argument>,
                        <argument pos:start="117:25" pos:end="117:33"><expr pos:start="117:25" pos:end="117:33"><literal type="string" pos:start="117:25" pos:end="117:33">"estuser"</literal></expr></argument>,
                        <argument pos:start="118:25" pos:end="118:32"><expr pos:start="118:25" pos:end="118:32"><literal type="string" pos:start="118:25" pos:end="118:32">"estpwd"</literal></expr></argument>,
                        <argument pos:start="119:25" pos:end="119:35"><expr pos:start="119:25" pos:end="119:35"><literal type="string" pos:start="119:25" pos:end="119:35">"127.0.0.1"</literal></expr></argument>,
                        <argument pos:start="120:25" pos:end="120:41"><expr pos:start="120:25" pos:end="120:41"><name pos:start="120:25" pos:end="120:41">US895_SERVER_PORT</name></expr></argument>,
                        <argument pos:start="121:25" pos:end="121:25"><expr pos:start="121:25" pos:end="121:25"><literal type="number" pos:start="121:25" pos:end="121:25">0</literal></expr></argument>,
                        <argument pos:start="122:25" pos:end="122:27"><expr pos:start="122:25" pos:end="122:27"><name pos:start="122:25" pos:end="122:27">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="124:5" pos:end="124:13"><expr pos:start="124:5" pos:end="124:12"><call pos:start="124:5" pos:end="124:12"><name pos:start="124:5" pos:end="124:9">SLEEP</name><argument_list pos:start="124:10" pos:end="124:12">(<argument pos:start="124:11" pos:end="124:11"><expr pos:start="124:11" pos:end="124:11"><literal type="number" pos:start="124:11" pos:end="124:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="125:5" pos:end="125:14">return <expr pos:start="125:12" pos:end="125:13"><name pos:start="125:12" pos:end="125:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="128:1" pos:end="132:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="133:1" pos:end="170:1"><type pos:start="133:1" pos:end="133:10"><specifier pos:start="133:1" pos:end="133:6">static</specifier> <name pos:start="133:8" pos:end="133:10">int</name></type> <name pos:start="133:12" pos:end="133:27">us895_init_suite</name> <parameter_list pos:start="133:29" pos:end="133:34">(<parameter pos:start="133:30" pos:end="133:33"><decl pos:start="133:30" pos:end="133:33"><type pos:start="133:30" pos:end="133:33"><name pos:start="133:30" pos:end="133:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="134:1" pos:end="170:1">{<block_content pos:start="135:5" pos:end="169:14">
    <decl_stmt pos:start="135:5" pos:end="135:15"><decl pos:start="135:5" pos:end="135:14"><type pos:start="135:5" pos:end="135:7"><name pos:start="135:5" pos:end="135:7">int</name></type> <name pos:start="135:9" pos:end="135:10">rv</name> <init pos:start="135:12" pos:end="135:14">= <expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="136:5" pos:end="136:33"><decl pos:start="136:5" pos:end="136:32"><type pos:start="136:5" pos:end="136:8"><name pos:start="136:5" pos:end="136:8">char</name></type> <name pos:start="136:10" pos:end="136:32"><name pos:start="136:10" pos:end="136:12">cmd</name><index pos:start="136:13" pos:end="136:32">[<expr pos:start="136:14" pos:end="136:31"><name pos:start="136:14" pos:end="136:31">EST_UT_MAX_CMD_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="138:5" pos:end="138:63"><expr pos:start="138:5" pos:end="138:62"><call pos:start="138:5" pos:end="138:62"><name pos:start="138:5" pos:end="138:10">printf</name><argument_list pos:start="138:11" pos:end="138:62">(<argument pos:start="138:12" pos:end="138:61"><expr pos:start="138:12" pos:end="138:61"><literal type="string" pos:start="138:12" pos:end="138:61">"Starting EST Server CSR attributes unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="140:5" pos:end="142:7">/*
     * gen the keypair to be used for EST Proxy testing
     */</comment>
    <expr_stmt pos:start="143:5" pos:end="147:26"><expr pos:start="143:5" pos:end="147:25"><call pos:start="143:5" pos:end="147:25"><name pos:start="143:5" pos:end="143:12">snprintf</name><argument_list pos:start="143:13" pos:end="147:25">(
        <argument pos:start="144:9" pos:end="144:11"><expr pos:start="144:9" pos:end="144:11"><name pos:start="144:9" pos:end="144:11">cmd</name></expr></argument>,
        <argument pos:start="145:9" pos:end="145:26"><expr pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:26">EST_UT_MAX_CMD_LEN</name></expr></argument>,
        <argument pos:start="146:9" pos:end="146:58"><expr pos:start="146:9" pos:end="146:58"><literal type="string" pos:start="146:9" pos:end="146:58">"openssl ecparam -name prime256v1 -genkey -out %s"</literal></expr></argument>,
        <argument pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:24"><name pos:start="147:9" pos:end="147:24">SERVER_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="148:5" pos:end="148:24"><expr pos:start="148:5" pos:end="148:23"><call pos:start="148:5" pos:end="148:23"><name pos:start="148:5" pos:end="148:10">printf</name><argument_list pos:start="148:11" pos:end="148:23">(<argument pos:start="148:12" pos:end="148:17"><expr pos:start="148:12" pos:end="148:17"><literal type="string" pos:start="148:12" pos:end="148:17">"%s\n"</literal></expr></argument>, <argument pos:start="148:20" pos:end="148:22"><expr pos:start="148:20" pos:end="148:22"><name pos:start="148:20" pos:end="148:22">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:21"><expr pos:start="150:5" pos:end="150:20"><name pos:start="150:5" pos:end="150:6">rv</name> <operator pos:start="150:8" pos:end="150:8">=</operator> <call pos:start="150:10" pos:end="150:20"><name pos:start="150:10" pos:end="150:15">system</name><argument_list pos:start="150:16" pos:end="150:20">(<argument pos:start="150:17" pos:end="150:19"><expr pos:start="150:17" pos:end="150:19"><name pos:start="150:17" pos:end="150:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="152:5" pos:end="154:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="155:5" pos:end="155:60"><expr pos:start="155:5" pos:end="155:59"><name pos:start="155:5" pos:end="155:15">cacerts_len</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:59"><name pos:start="155:19" pos:end="155:34">read_binary_file</name><argument_list pos:start="155:35" pos:end="155:59">(<argument pos:start="155:36" pos:end="155:48"><expr pos:start="155:36" pos:end="155:48"><name pos:start="155:36" pos:end="155:48">US895_CACERTS</name></expr></argument>, <argument pos:start="155:51" pos:end="155:58"><expr pos:start="155:51" pos:end="155:58"><operator pos:start="155:51" pos:end="155:51">&amp;</operator><name pos:start="155:52" pos:end="155:58">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="156:5" pos:end="158:5"><if pos:start="156:5" pos:end="158:5">if <condition pos:start="156:8" pos:end="156:25">(<expr pos:start="156:9" pos:end="156:24"><name pos:start="156:9" pos:end="156:19">cacerts_len</name> <operator pos:start="156:21" pos:end="156:22">&lt;=</operator> <literal type="number" pos:start="156:24" pos:end="156:24">0</literal></expr>)</condition> <block pos:start="156:27" pos:end="158:5">{<block_content pos:start="157:9" pos:end="157:17">
        <return pos:start="157:9" pos:end="157:17">return <expr pos:start="157:16" pos:end="157:16"><literal type="number" pos:start="157:16" pos:end="157:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="160:5" pos:end="162:7">/*
     * start the server for the tests that need to talk to a server
     */</comment>
    <expr_stmt pos:start="163:5" pos:end="163:18"><expr pos:start="163:5" pos:end="163:17"><call pos:start="163:5" pos:end="163:17"><name pos:start="163:5" pos:end="163:15">us895_clean</name><argument_list pos:start="163:16" pos:end="163:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="165:5" pos:end="167:7">/*
     * Start an instance of the EST server
     */</comment>
    <expr_stmt pos:start="168:5" pos:end="168:34"><expr pos:start="168:5" pos:end="168:33"><name pos:start="168:5" pos:end="168:6">rv</name> <operator pos:start="168:8" pos:end="168:8">=</operator> <call pos:start="168:10" pos:end="168:33"><name pos:start="168:10" pos:end="168:27">us895_start_server</name><argument_list pos:start="168:28" pos:end="168:33">(<argument pos:start="168:29" pos:end="168:29"><expr pos:start="168:29" pos:end="168:29"><literal type="number" pos:start="168:29" pos:end="168:29">0</literal></expr></argument>, <argument pos:start="168:32" pos:end="168:32"><expr pos:start="168:32" pos:end="168:32"><literal type="number" pos:start="168:32" pos:end="168:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="169:5" pos:end="169:14">return <expr pos:start="169:12" pos:end="169:13"><name pos:start="169:12" pos:end="169:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="172:1" pos:end="176:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="177:1" pos:end="183:1"><type pos:start="177:1" pos:end="177:10"><specifier pos:start="177:1" pos:end="177:6">static</specifier> <name pos:start="177:8" pos:end="177:10">int</name></type> <name pos:start="177:12" pos:end="177:30">us895_destroy_suite</name> <parameter_list pos:start="177:32" pos:end="177:37">(<parameter pos:start="177:33" pos:end="177:36"><decl pos:start="177:33" pos:end="177:36"><type pos:start="177:33" pos:end="177:36"><name pos:start="177:33" pos:end="177:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="178:1" pos:end="183:1">{<block_content pos:start="179:5" pos:end="182:13">
    <expr_stmt pos:start="179:5" pos:end="179:14"><expr pos:start="179:5" pos:end="179:13"><call pos:start="179:5" pos:end="179:13"><name pos:start="179:5" pos:end="179:11">st_stop</name><argument_list pos:start="179:12" pos:end="179:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="180:5" pos:end="180:20"><expr pos:start="180:5" pos:end="180:19"><call pos:start="180:5" pos:end="180:19"><name pos:start="180:5" pos:end="180:17">st_proxy_stop</name><argument_list pos:start="180:18" pos:end="180:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="181:5" pos:end="181:13"><expr pos:start="181:5" pos:end="181:12"><call pos:start="181:5" pos:end="181:12"><name pos:start="181:5" pos:end="181:9">SLEEP</name><argument_list pos:start="181:10" pos:end="181:12">(<argument pos:start="181:11" pos:end="181:11"><expr pos:start="181:11" pos:end="181:11"><literal type="number" pos:start="181:11" pos:end="181:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="182:5" pos:end="182:13">return <expr pos:start="182:12" pos:end="182:12"><literal type="number" pos:start="182:12" pos:end="182:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="185:1" pos:end="196:1"><type pos:start="185:1" pos:end="185:22"><specifier pos:start="185:1" pos:end="185:6">static</specifier> <name pos:start="185:8" pos:end="185:15">unsigned</name> <name pos:start="185:17" pos:end="185:20">char</name> <modifier pos:start="185:22" pos:end="185:22">*</modifier></type> <name pos:start="185:24" pos:end="185:52">handle_short_csrattrs_request</name> <parameter_list pos:start="185:54" pos:end="187:69">(<parameter pos:start="185:55" pos:end="185:66"><decl pos:start="185:55" pos:end="185:66"><type pos:start="185:55" pos:end="185:66"><name pos:start="185:55" pos:end="185:57">int</name> <modifier pos:start="185:59" pos:end="185:59">*</modifier></type><name pos:start="185:60" pos:end="185:66">csr_len</name></decl></parameter>,
                                                      <parameter pos:start="186:55" pos:end="186:68"><decl pos:start="186:55" pos:end="186:68"><type pos:start="186:55" pos:end="186:68"><name pos:start="186:55" pos:end="186:58">char</name> <modifier pos:start="186:60" pos:end="186:60">*</modifier></type><name pos:start="186:61" pos:end="186:68">path_seg</name></decl></parameter>,
                                                      <parameter pos:start="187:55" pos:end="187:68"><decl pos:start="187:55" pos:end="187:68"><type pos:start="187:55" pos:end="187:68"><name pos:start="187:55" pos:end="187:58">void</name> <modifier pos:start="187:60" pos:end="187:60">*</modifier></type><name pos:start="187:61" pos:end="187:68">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="188:1" pos:end="196:1">{<block_content pos:start="189:5" pos:end="195:22">
    <decl_stmt pos:start="189:5" pos:end="189:28"><decl pos:start="189:5" pos:end="189:27"><type pos:start="189:5" pos:end="189:19"><name pos:start="189:5" pos:end="189:12">unsigned</name> <name pos:start="189:14" pos:end="189:17">char</name> <modifier pos:start="189:19" pos:end="189:19">*</modifier></type><name pos:start="189:20" pos:end="189:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:34"><expr pos:start="191:5" pos:end="191:33"><operator pos:start="191:5" pos:end="191:5">*</operator><name pos:start="191:6" pos:end="191:12">csr_len</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <call pos:start="191:16" pos:end="191:33"><name pos:start="191:16" pos:end="191:21">strlen</name><argument_list pos:start="191:22" pos:end="191:33">(<argument pos:start="191:23" pos:end="191:32"><expr pos:start="191:23" pos:end="191:32"><name pos:start="191:23" pos:end="191:32">TEST_ATTR7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:36"><expr pos:start="192:5" pos:end="192:35"><name pos:start="192:5" pos:end="192:12">csr_data</name> <operator pos:start="192:14" pos:end="192:14">=</operator> <call pos:start="192:16" pos:end="192:35"><name pos:start="192:16" pos:end="192:21">malloc</name><argument_list pos:start="192:22" pos:end="192:35">(<argument pos:start="192:23" pos:end="192:34"><expr pos:start="192:23" pos:end="192:34"><operator pos:start="192:23" pos:end="192:23">*</operator><name pos:start="192:24" pos:end="192:30">csr_len</name> <operator pos:start="192:32" pos:end="192:32">+</operator> <literal type="number" pos:start="192:34" pos:end="192:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="193:5" pos:end="193:53"><expr pos:start="193:5" pos:end="193:52"><call pos:start="193:5" pos:end="193:52"><name pos:start="193:5" pos:end="193:11">strncpy</name><argument_list pos:start="193:12" pos:end="193:52">(<argument pos:start="193:13" pos:end="193:29"><expr pos:start="193:13" pos:end="193:29"><operator pos:start="193:13" pos:end="193:13">(</operator><name pos:start="193:14" pos:end="193:17">char</name> <operator pos:start="193:19" pos:end="193:19">*</operator><operator pos:start="193:20" pos:end="193:20">)</operator> <name pos:start="193:22" pos:end="193:29">csr_data</name></expr></argument>, <argument pos:start="193:32" pos:end="193:41"><expr pos:start="193:32" pos:end="193:41"><name pos:start="193:32" pos:end="193:41">TEST_ATTR7</name></expr></argument>, <argument pos:start="193:44" pos:end="193:51"><expr pos:start="193:44" pos:end="193:51"><operator pos:start="193:44" pos:end="193:44">*</operator><name pos:start="193:45" pos:end="193:51">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="194:5" pos:end="194:27"><expr pos:start="194:5" pos:end="194:26"><name pos:start="194:5" pos:end="194:22"><name pos:start="194:5" pos:end="194:12">csr_data</name><index pos:start="194:13" pos:end="194:22">[<expr pos:start="194:14" pos:end="194:21"><operator pos:start="194:14" pos:end="194:14">*</operator><name pos:start="194:15" pos:end="194:21">csr_len</name></expr>]</index></name> <operator pos:start="194:24" pos:end="194:24">=</operator> <literal type="number" pos:start="194:26" pos:end="194:26">0</literal></expr>;</expr_stmt>
    <return pos:start="195:5" pos:end="195:22">return <expr pos:start="195:12" pos:end="195:21"><operator pos:start="195:12" pos:end="195:12">(</operator><name pos:start="195:13" pos:end="195:20">csr_data</name><operator pos:start="195:21" pos:end="195:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="198:1" pos:end="209:1"><type pos:start="198:1" pos:end="198:22"><specifier pos:start="198:1" pos:end="198:6">static</specifier> <name pos:start="198:8" pos:end="198:15">unsigned</name> <name pos:start="198:17" pos:end="198:20">char</name> <modifier pos:start="198:22" pos:end="198:22">*</modifier></type> <name pos:start="198:24" pos:end="198:54">handle_corrupt_csrattrs_request</name> <parameter_list pos:start="198:56" pos:end="200:71">(<parameter pos:start="198:57" pos:end="198:68"><decl pos:start="198:57" pos:end="198:68"><type pos:start="198:57" pos:end="198:68"><name pos:start="198:57" pos:end="198:59">int</name> <modifier pos:start="198:61" pos:end="198:61">*</modifier></type><name pos:start="198:62" pos:end="198:68">csr_len</name></decl></parameter>,
                                                        <parameter pos:start="199:57" pos:end="199:70"><decl pos:start="199:57" pos:end="199:70"><type pos:start="199:57" pos:end="199:70"><name pos:start="199:57" pos:end="199:60">char</name> <modifier pos:start="199:62" pos:end="199:62">*</modifier></type><name pos:start="199:63" pos:end="199:70">path_seg</name></decl></parameter>,
                                                        <parameter pos:start="200:57" pos:end="200:70"><decl pos:start="200:57" pos:end="200:70"><type pos:start="200:57" pos:end="200:70"><name pos:start="200:57" pos:end="200:60">void</name> <modifier pos:start="200:62" pos:end="200:62">*</modifier></type><name pos:start="200:63" pos:end="200:70">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="201:1" pos:end="209:1">{<block_content pos:start="202:5" pos:end="208:22">
    <decl_stmt pos:start="202:5" pos:end="202:28"><decl pos:start="202:5" pos:end="202:27"><type pos:start="202:5" pos:end="202:19"><name pos:start="202:5" pos:end="202:12">unsigned</name> <name pos:start="202:14" pos:end="202:17">char</name> <modifier pos:start="202:19" pos:end="202:19">*</modifier></type><name pos:start="202:20" pos:end="202:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="204:5" pos:end="204:34"><expr pos:start="204:5" pos:end="204:33"><operator pos:start="204:5" pos:end="204:5">*</operator><name pos:start="204:6" pos:end="204:12">csr_len</name> <operator pos:start="204:14" pos:end="204:14">=</operator> <call pos:start="204:16" pos:end="204:33"><name pos:start="204:16" pos:end="204:21">strlen</name><argument_list pos:start="204:22" pos:end="204:33">(<argument pos:start="204:23" pos:end="204:32"><expr pos:start="204:23" pos:end="204:32"><name pos:start="204:23" pos:end="204:32">TEST_ATTR8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="205:5" pos:end="205:36"><expr pos:start="205:5" pos:end="205:35"><name pos:start="205:5" pos:end="205:12">csr_data</name> <operator pos:start="205:14" pos:end="205:14">=</operator> <call pos:start="205:16" pos:end="205:35"><name pos:start="205:16" pos:end="205:21">malloc</name><argument_list pos:start="205:22" pos:end="205:35">(<argument pos:start="205:23" pos:end="205:34"><expr pos:start="205:23" pos:end="205:34"><operator pos:start="205:23" pos:end="205:23">*</operator><name pos:start="205:24" pos:end="205:30">csr_len</name> <operator pos:start="205:32" pos:end="205:32">+</operator> <literal type="number" pos:start="205:34" pos:end="205:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="206:5" pos:end="206:53"><expr pos:start="206:5" pos:end="206:52"><call pos:start="206:5" pos:end="206:52"><name pos:start="206:5" pos:end="206:11">strncpy</name><argument_list pos:start="206:12" pos:end="206:52">(<argument pos:start="206:13" pos:end="206:29"><expr pos:start="206:13" pos:end="206:29"><operator pos:start="206:13" pos:end="206:13">(</operator><name pos:start="206:14" pos:end="206:17">char</name> <operator pos:start="206:19" pos:end="206:19">*</operator><operator pos:start="206:20" pos:end="206:20">)</operator> <name pos:start="206:22" pos:end="206:29">csr_data</name></expr></argument>, <argument pos:start="206:32" pos:end="206:41"><expr pos:start="206:32" pos:end="206:41"><name pos:start="206:32" pos:end="206:41">TEST_ATTR8</name></expr></argument>, <argument pos:start="206:44" pos:end="206:51"><expr pos:start="206:44" pos:end="206:51"><operator pos:start="206:44" pos:end="206:44">*</operator><name pos:start="206:45" pos:end="206:51">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="207:5" pos:end="207:27"><expr pos:start="207:5" pos:end="207:26"><name pos:start="207:5" pos:end="207:22"><name pos:start="207:5" pos:end="207:12">csr_data</name><index pos:start="207:13" pos:end="207:22">[<expr pos:start="207:14" pos:end="207:21"><operator pos:start="207:14" pos:end="207:14">*</operator><name pos:start="207:15" pos:end="207:21">csr_len</name></expr>]</index></name> <operator pos:start="207:24" pos:end="207:24">=</operator> <literal type="number" pos:start="207:26" pos:end="207:26">0</literal></expr>;</expr_stmt>
    <return pos:start="208:5" pos:end="208:22">return <expr pos:start="208:12" pos:end="208:21"><operator pos:start="208:12" pos:end="208:12">(</operator><name pos:start="208:13" pos:end="208:20">csr_data</name><operator pos:start="208:21" pos:end="208:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="211:1" pos:end="222:1"><type pos:start="211:1" pos:end="211:22"><specifier pos:start="211:1" pos:end="211:6">static</specifier> <name pos:start="211:8" pos:end="211:15">unsigned</name> <name pos:start="211:17" pos:end="211:20">char</name> <modifier pos:start="211:22" pos:end="211:22">*</modifier></type> <name pos:start="211:24" pos:end="211:51">handle_long_csrattrs_request</name> <parameter_list pos:start="211:53" pos:end="213:68">(<parameter pos:start="211:54" pos:end="211:65"><decl pos:start="211:54" pos:end="211:65"><type pos:start="211:54" pos:end="211:65"><name pos:start="211:54" pos:end="211:56">int</name> <modifier pos:start="211:58" pos:end="211:58">*</modifier></type><name pos:start="211:59" pos:end="211:65">csr_len</name></decl></parameter>,
                                                     <parameter pos:start="212:54" pos:end="212:67"><decl pos:start="212:54" pos:end="212:67"><type pos:start="212:54" pos:end="212:67"><name pos:start="212:54" pos:end="212:57">char</name> <modifier pos:start="212:59" pos:end="212:59">*</modifier></type><name pos:start="212:60" pos:end="212:67">path_seg</name></decl></parameter>,
                                                     <parameter pos:start="213:54" pos:end="213:67"><decl pos:start="213:54" pos:end="213:67"><type pos:start="213:54" pos:end="213:67"><name pos:start="213:54" pos:end="213:57">void</name> <modifier pos:start="213:59" pos:end="213:59">*</modifier></type><name pos:start="213:60" pos:end="213:67">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="214:1" pos:end="222:1">{<block_content pos:start="215:5" pos:end="221:22">
    <decl_stmt pos:start="215:5" pos:end="215:28"><decl pos:start="215:5" pos:end="215:27"><type pos:start="215:5" pos:end="215:19"><name pos:start="215:5" pos:end="215:12">unsigned</name> <name pos:start="215:14" pos:end="215:17">char</name> <modifier pos:start="215:19" pos:end="215:19">*</modifier></type><name pos:start="215:20" pos:end="215:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:38"><expr pos:start="217:5" pos:end="217:37"><operator pos:start="217:5" pos:end="217:5">*</operator><name pos:start="217:6" pos:end="217:12">csr_len</name> <operator pos:start="217:14" pos:end="217:14">=</operator> <call pos:start="217:16" pos:end="217:37"><name pos:start="217:16" pos:end="217:21">strlen</name><argument_list pos:start="217:22" pos:end="217:37">(<argument pos:start="217:23" pos:end="217:36"><expr pos:start="217:23" pos:end="217:36"><name pos:start="217:23" pos:end="217:36">TEST_LONG_ATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="218:5" pos:end="218:36"><expr pos:start="218:5" pos:end="218:35"><name pos:start="218:5" pos:end="218:12">csr_data</name> <operator pos:start="218:14" pos:end="218:14">=</operator> <call pos:start="218:16" pos:end="218:35"><name pos:start="218:16" pos:end="218:21">malloc</name><argument_list pos:start="218:22" pos:end="218:35">(<argument pos:start="218:23" pos:end="218:34"><expr pos:start="218:23" pos:end="218:34"><operator pos:start="218:23" pos:end="218:23">*</operator><name pos:start="218:24" pos:end="218:30">csr_len</name> <operator pos:start="218:32" pos:end="218:32">+</operator> <literal type="number" pos:start="218:34" pos:end="218:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="219:5" pos:end="219:57"><expr pos:start="219:5" pos:end="219:56"><call pos:start="219:5" pos:end="219:56"><name pos:start="219:5" pos:end="219:11">strncpy</name><argument_list pos:start="219:12" pos:end="219:56">(<argument pos:start="219:13" pos:end="219:29"><expr pos:start="219:13" pos:end="219:29"><operator pos:start="219:13" pos:end="219:13">(</operator><name pos:start="219:14" pos:end="219:17">char</name> <operator pos:start="219:19" pos:end="219:19">*</operator><operator pos:start="219:20" pos:end="219:20">)</operator> <name pos:start="219:22" pos:end="219:29">csr_data</name></expr></argument>, <argument pos:start="219:32" pos:end="219:45"><expr pos:start="219:32" pos:end="219:45"><name pos:start="219:32" pos:end="219:45">TEST_LONG_ATTR</name></expr></argument>, <argument pos:start="219:48" pos:end="219:55"><expr pos:start="219:48" pos:end="219:55"><operator pos:start="219:48" pos:end="219:48">*</operator><name pos:start="219:49" pos:end="219:55">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="220:5" pos:end="220:27"><expr pos:start="220:5" pos:end="220:26"><name pos:start="220:5" pos:end="220:22"><name pos:start="220:5" pos:end="220:12">csr_data</name><index pos:start="220:13" pos:end="220:22">[<expr pos:start="220:14" pos:end="220:21"><operator pos:start="220:14" pos:end="220:14">*</operator><name pos:start="220:15" pos:end="220:21">csr_len</name></expr>]</index></name> <operator pos:start="220:24" pos:end="220:24">=</operator> <literal type="number" pos:start="220:26" pos:end="220:26">0</literal></expr>;</expr_stmt>
    <return pos:start="221:5" pos:end="221:22">return <expr pos:start="221:12" pos:end="221:21"><operator pos:start="221:12" pos:end="221:12">(</operator><name pos:start="221:13" pos:end="221:20">csr_data</name><operator pos:start="221:21" pos:end="221:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="224:1" pos:end="235:1"><type pos:start="224:1" pos:end="224:22"><specifier pos:start="224:1" pos:end="224:6">static</specifier> <name pos:start="224:8" pos:end="224:15">unsigned</name> <name pos:start="224:17" pos:end="224:20">char</name> <modifier pos:start="224:22" pos:end="224:22">*</modifier></type> <name pos:start="224:24" pos:end="224:54">handle_correct_csrattrs_request</name> <parameter_list pos:start="224:56" pos:end="226:71">(<parameter pos:start="224:57" pos:end="224:68"><decl pos:start="224:57" pos:end="224:68"><type pos:start="224:57" pos:end="224:68"><name pos:start="224:57" pos:end="224:59">int</name> <modifier pos:start="224:61" pos:end="224:61">*</modifier></type><name pos:start="224:62" pos:end="224:68">csr_len</name></decl></parameter>,
                                                        <parameter pos:start="225:57" pos:end="225:71"><decl pos:start="225:57" pos:end="225:71"><type pos:start="225:57" pos:end="225:71"><name pos:start="225:57" pos:end="225:60">char</name> <modifier pos:start="225:62" pos:end="225:62">*</modifier></type> <name pos:start="225:64" pos:end="225:71">path_seg</name></decl></parameter>,
                                                        <parameter pos:start="226:57" pos:end="226:70"><decl pos:start="226:57" pos:end="226:70"><type pos:start="226:57" pos:end="226:70"><name pos:start="226:57" pos:end="226:60">void</name> <modifier pos:start="226:62" pos:end="226:62">*</modifier></type><name pos:start="226:63" pos:end="226:70">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="227:1" pos:end="235:1">{<block_content pos:start="228:5" pos:end="234:22">
    <decl_stmt pos:start="228:5" pos:end="228:28"><decl pos:start="228:5" pos:end="228:27"><type pos:start="228:5" pos:end="228:19"><name pos:start="228:5" pos:end="228:12">unsigned</name> <name pos:start="228:14" pos:end="228:17">char</name> <modifier pos:start="228:19" pos:end="228:19">*</modifier></type><name pos:start="228:20" pos:end="228:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="230:5" pos:end="230:34"><expr pos:start="230:5" pos:end="230:33"><operator pos:start="230:5" pos:end="230:5">*</operator><name pos:start="230:6" pos:end="230:12">csr_len</name> <operator pos:start="230:14" pos:end="230:14">=</operator> <call pos:start="230:16" pos:end="230:33"><name pos:start="230:16" pos:end="230:21">strlen</name><argument_list pos:start="230:22" pos:end="230:33">(<argument pos:start="230:23" pos:end="230:32"><expr pos:start="230:23" pos:end="230:32"><name pos:start="230:23" pos:end="230:32">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="231:5" pos:end="231:36"><expr pos:start="231:5" pos:end="231:35"><name pos:start="231:5" pos:end="231:12">csr_data</name> <operator pos:start="231:14" pos:end="231:14">=</operator> <call pos:start="231:16" pos:end="231:35"><name pos:start="231:16" pos:end="231:21">malloc</name><argument_list pos:start="231:22" pos:end="231:35">(<argument pos:start="231:23" pos:end="231:34"><expr pos:start="231:23" pos:end="231:34"><operator pos:start="231:23" pos:end="231:23">*</operator><name pos:start="231:24" pos:end="231:30">csr_len</name> <operator pos:start="231:32" pos:end="231:32">+</operator> <literal type="number" pos:start="231:34" pos:end="231:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="232:5" pos:end="232:53"><expr pos:start="232:5" pos:end="232:52"><call pos:start="232:5" pos:end="232:52"><name pos:start="232:5" pos:end="232:11">strncpy</name><argument_list pos:start="232:12" pos:end="232:52">(<argument pos:start="232:13" pos:end="232:29"><expr pos:start="232:13" pos:end="232:29"><operator pos:start="232:13" pos:end="232:13">(</operator><name pos:start="232:14" pos:end="232:17">char</name> <operator pos:start="232:19" pos:end="232:19">*</operator><operator pos:start="232:20" pos:end="232:20">)</operator> <name pos:start="232:22" pos:end="232:29">csr_data</name></expr></argument>, <argument pos:start="232:32" pos:end="232:41"><expr pos:start="232:32" pos:end="232:41"><name pos:start="232:32" pos:end="232:41">TEST_ATTR1</name></expr></argument>, <argument pos:start="232:44" pos:end="232:51"><expr pos:start="232:44" pos:end="232:51"><operator pos:start="232:44" pos:end="232:44">*</operator><name pos:start="232:45" pos:end="232:51">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="233:5" pos:end="233:27"><expr pos:start="233:5" pos:end="233:26"><name pos:start="233:5" pos:end="233:22"><name pos:start="233:5" pos:end="233:12">csr_data</name><index pos:start="233:13" pos:end="233:22">[<expr pos:start="233:14" pos:end="233:21"><operator pos:start="233:14" pos:end="233:14">*</operator><name pos:start="233:15" pos:end="233:21">csr_len</name></expr>]</index></name> <operator pos:start="233:24" pos:end="233:24">=</operator> <literal type="number" pos:start="233:26" pos:end="233:26">0</literal></expr>;</expr_stmt>
    <return pos:start="234:5" pos:end="234:22">return <expr pos:start="234:12" pos:end="234:21"><operator pos:start="234:12" pos:end="234:12">(</operator><name pos:start="234:13" pos:end="234:20">csr_data</name><operator pos:start="234:21" pos:end="234:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="237:1" pos:end="248:1"><type pos:start="237:1" pos:end="237:22"><specifier pos:start="237:1" pos:end="237:6">static</specifier> <name pos:start="237:8" pos:end="237:15">unsigned</name> <name pos:start="237:17" pos:end="237:20">char</name> <modifier pos:start="237:22" pos:end="237:22">*</modifier></type> <name pos:start="237:24" pos:end="237:52">handle_nopop_csrattrs_request</name> <parameter_list pos:start="237:54" pos:end="239:69">(<parameter pos:start="237:55" pos:end="237:66"><decl pos:start="237:55" pos:end="237:66"><type pos:start="237:55" pos:end="237:66"><name pos:start="237:55" pos:end="237:57">int</name> <modifier pos:start="237:59" pos:end="237:59">*</modifier></type><name pos:start="237:60" pos:end="237:66">csr_len</name></decl></parameter>,
                                                      <parameter pos:start="238:55" pos:end="238:68"><decl pos:start="238:55" pos:end="238:68"><type pos:start="238:55" pos:end="238:68"><name pos:start="238:55" pos:end="238:58">char</name> <modifier pos:start="238:60" pos:end="238:60">*</modifier></type><name pos:start="238:61" pos:end="238:68">path_seg</name></decl></parameter>,
                                                      <parameter pos:start="239:55" pos:end="239:68"><decl pos:start="239:55" pos:end="239:68"><type pos:start="239:55" pos:end="239:68"><name pos:start="239:55" pos:end="239:58">void</name> <modifier pos:start="239:60" pos:end="239:60">*</modifier></type><name pos:start="239:61" pos:end="239:68">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="240:1" pos:end="248:1">{<block_content pos:start="241:5" pos:end="247:22">
    <decl_stmt pos:start="241:5" pos:end="241:28"><decl pos:start="241:5" pos:end="241:27"><type pos:start="241:5" pos:end="241:19"><name pos:start="241:5" pos:end="241:12">unsigned</name> <name pos:start="241:14" pos:end="241:17">char</name> <modifier pos:start="241:19" pos:end="241:19">*</modifier></type><name pos:start="241:20" pos:end="241:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:39"><expr pos:start="243:5" pos:end="243:38"><operator pos:start="243:5" pos:end="243:5">*</operator><name pos:start="243:6" pos:end="243:12">csr_len</name> <operator pos:start="243:14" pos:end="243:14">=</operator> <call pos:start="243:16" pos:end="243:38"><name pos:start="243:16" pos:end="243:21">strlen</name><argument_list pos:start="243:22" pos:end="243:38">(<argument pos:start="243:23" pos:end="243:37"><expr pos:start="243:23" pos:end="243:37"><name pos:start="243:23" pos:end="243:37">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="244:5" pos:end="244:36"><expr pos:start="244:5" pos:end="244:35"><name pos:start="244:5" pos:end="244:12">csr_data</name> <operator pos:start="244:14" pos:end="244:14">=</operator> <call pos:start="244:16" pos:end="244:35"><name pos:start="244:16" pos:end="244:21">malloc</name><argument_list pos:start="244:22" pos:end="244:35">(<argument pos:start="244:23" pos:end="244:34"><expr pos:start="244:23" pos:end="244:34"><operator pos:start="244:23" pos:end="244:23">*</operator><name pos:start="244:24" pos:end="244:30">csr_len</name> <operator pos:start="244:32" pos:end="244:32">+</operator> <literal type="number" pos:start="244:34" pos:end="244:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="245:5" pos:end="245:58"><expr pos:start="245:5" pos:end="245:57"><call pos:start="245:5" pos:end="245:57"><name pos:start="245:5" pos:end="245:11">strncpy</name><argument_list pos:start="245:12" pos:end="245:57">(<argument pos:start="245:13" pos:end="245:29"><expr pos:start="245:13" pos:end="245:29"><operator pos:start="245:13" pos:end="245:13">(</operator><name pos:start="245:14" pos:end="245:17">char</name> <operator pos:start="245:19" pos:end="245:19">*</operator><operator pos:start="245:20" pos:end="245:20">)</operator> <name pos:start="245:22" pos:end="245:29">csr_data</name></expr></argument>, <argument pos:start="245:32" pos:end="245:46"><expr pos:start="245:32" pos:end="245:46"><name pos:start="245:32" pos:end="245:46">TEST_ATTR_NOPOP</name></expr></argument>, <argument pos:start="245:49" pos:end="245:56"><expr pos:start="245:49" pos:end="245:56"><operator pos:start="245:49" pos:end="245:49">*</operator><name pos:start="245:50" pos:end="245:56">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="246:5" pos:end="246:27"><expr pos:start="246:5" pos:end="246:26"><name pos:start="246:5" pos:end="246:22"><name pos:start="246:5" pos:end="246:12">csr_data</name><index pos:start="246:13" pos:end="246:22">[<expr pos:start="246:14" pos:end="246:21"><operator pos:start="246:14" pos:end="246:14">*</operator><name pos:start="246:15" pos:end="246:21">csr_len</name></expr>]</index></name> <operator pos:start="246:24" pos:end="246:24">=</operator> <literal type="number" pos:start="246:26" pos:end="246:26">0</literal></expr>;</expr_stmt>
    <return pos:start="247:5" pos:end="247:22">return <expr pos:start="247:12" pos:end="247:21"><operator pos:start="247:12" pos:end="247:12">(</operator><name pos:start="247:13" pos:end="247:20">csr_data</name><operator pos:start="247:21" pos:end="247:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="250:1" pos:end="259:1"><type pos:start="250:1" pos:end="250:22"><specifier pos:start="250:1" pos:end="250:6">static</specifier> <name pos:start="250:8" pos:end="250:15">unsigned</name> <name pos:start="250:17" pos:end="250:20">char</name> <modifier pos:start="250:22" pos:end="250:22">*</modifier></type> <name pos:start="250:24" pos:end="250:52">handle_empty_csrattrs_request</name> <parameter_list pos:start="250:54" pos:end="252:69">(<parameter pos:start="250:55" pos:end="250:66"><decl pos:start="250:55" pos:end="250:66"><type pos:start="250:55" pos:end="250:66"><name pos:start="250:55" pos:end="250:57">int</name> <modifier pos:start="250:59" pos:end="250:59">*</modifier></type><name pos:start="250:60" pos:end="250:66">csr_len</name></decl></parameter>,
                                                      <parameter pos:start="251:55" pos:end="251:68"><decl pos:start="251:55" pos:end="251:68"><type pos:start="251:55" pos:end="251:68"><name pos:start="251:55" pos:end="251:58">char</name> <modifier pos:start="251:60" pos:end="251:60">*</modifier></type><name pos:start="251:61" pos:end="251:68">path_seg</name></decl></parameter>,
                                                      <parameter pos:start="252:55" pos:end="252:68"><decl pos:start="252:55" pos:end="252:68"><type pos:start="252:55" pos:end="252:68"><name pos:start="252:55" pos:end="252:58">void</name> <modifier pos:start="252:60" pos:end="252:60">*</modifier></type><name pos:start="252:61" pos:end="252:68">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="253:1" pos:end="259:1">{<block_content pos:start="254:5" pos:end="258:22">
    <decl_stmt pos:start="254:5" pos:end="254:28"><decl pos:start="254:5" pos:end="254:27"><type pos:start="254:5" pos:end="254:19"><name pos:start="254:5" pos:end="254:12">unsigned</name> <name pos:start="254:14" pos:end="254:17">char</name> <modifier pos:start="254:19" pos:end="254:19">*</modifier></type><name pos:start="254:20" pos:end="254:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="256:5" pos:end="256:17"><expr pos:start="256:5" pos:end="256:16"><operator pos:start="256:5" pos:end="256:5">*</operator><name pos:start="256:6" pos:end="256:12">csr_len</name> <operator pos:start="256:14" pos:end="256:14">=</operator> <literal type="number" pos:start="256:16" pos:end="256:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="257:5" pos:end="257:20"><expr pos:start="257:5" pos:end="257:19"><name pos:start="257:5" pos:end="257:12">csr_data</name> <operator pos:start="257:14" pos:end="257:14">=</operator> <name pos:start="257:16" pos:end="257:19">NULL</name></expr>;</expr_stmt>
    <return pos:start="258:5" pos:end="258:22">return <expr pos:start="258:12" pos:end="258:21"><operator pos:start="258:12" pos:end="258:12">(</operator><name pos:start="258:13" pos:end="258:20">csr_data</name><operator pos:start="258:21" pos:end="258:21">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="261:1" pos:end="263:3">/*
 * Callback function passed to est_proxy_init()
 */</comment>
<function pos:start="264:1" pos:end="295:1"><type pos:start="264:1" pos:end="264:10"><specifier pos:start="264:1" pos:end="264:6">static</specifier> <name pos:start="264:8" pos:end="264:10">int</name></type> <name pos:start="264:12" pos:end="264:35">proxy_manual_cert_verify</name> <parameter_list pos:start="264:37" pos:end="264:76">(<parameter pos:start="264:38" pos:end="264:51"><decl pos:start="264:38" pos:end="264:51"><type pos:start="264:38" pos:end="264:51"><name pos:start="264:38" pos:end="264:41">X509</name> <modifier pos:start="264:43" pos:end="264:43">*</modifier></type><name pos:start="264:44" pos:end="264:51">cur_cert</name></decl></parameter>, <parameter pos:start="264:54" pos:end="264:75"><decl pos:start="264:54" pos:end="264:75"><type pos:start="264:54" pos:end="264:75"><name pos:start="264:54" pos:end="264:56">int</name></type> <name pos:start="264:58" pos:end="264:75">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="265:1" pos:end="295:1">{<block_content pos:start="266:5" pos:end="294:19">
    <decl_stmt pos:start="266:5" pos:end="266:18"><decl pos:start="266:5" pos:end="266:17"><type pos:start="266:5" pos:end="266:9"><name pos:start="266:5" pos:end="266:7">BIO</name> <modifier pos:start="266:9" pos:end="266:9">*</modifier></type> <name pos:start="266:11" pos:end="266:17">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="267:5" pos:end="267:46"><expr pos:start="267:5" pos:end="267:45"><name pos:start="267:5" pos:end="267:11">bio_err</name> <operator pos:start="267:13" pos:end="267:13">=</operator> <call pos:start="267:15" pos:end="267:45"><name pos:start="267:15" pos:end="267:24">BIO_new_fp</name><argument_list pos:start="267:25" pos:end="267:45">(<argument pos:start="267:26" pos:end="267:31"><expr pos:start="267:26" pos:end="267:31"><name pos:start="267:26" pos:end="267:31">stderr</name></expr></argument>, <argument pos:start="267:34" pos:end="267:44"><expr pos:start="267:34" pos:end="267:44"><name pos:start="267:34" pos:end="267:44">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="268:5" pos:end="268:20"><decl pos:start="268:5" pos:end="268:19"><type pos:start="268:5" pos:end="268:7"><name pos:start="268:5" pos:end="268:7">int</name></type> <name pos:start="268:9" pos:end="268:15">approve</name> <init pos:start="268:17" pos:end="268:19">= <expr pos:start="268:19" pos:end="268:19"><literal type="number" pos:start="268:19" pos:end="268:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="270:5" pos:end="272:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="273:5" pos:end="277:59"><expr pos:start="273:5" pos:end="277:58"><call pos:start="273:5" pos:end="277:58"><name pos:start="273:5" pos:end="273:10">printf</name><argument_list pos:start="273:11" pos:end="277:58">(
        <argument pos:start="274:9" pos:end="274:114"><expr pos:start="274:9" pos:end="274:114"><literal type="string" pos:start="274:9" pos:end="274:114">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
        <argument pos:start="275:9" pos:end="275:20"><expr pos:start="275:9" pos:end="275:20"><name pos:start="275:9" pos:end="275:20">__FUNCTION__</name></expr></argument>,
        <argument pos:start="276:9" pos:end="276:26"><expr pos:start="276:9" pos:end="276:26"><name pos:start="276:9" pos:end="276:26">openssl_cert_error</name></expr></argument>,
        <argument pos:start="277:9" pos:end="277:57"><expr pos:start="277:9" pos:end="277:57"><call pos:start="277:9" pos:end="277:57"><name pos:start="277:9" pos:end="277:37">X509_verify_cert_error_string</name><argument_list pos:start="277:38" pos:end="277:57">(<argument pos:start="277:39" pos:end="277:56"><expr pos:start="277:39" pos:end="277:56"><name pos:start="277:39" pos:end="277:56">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:30"><expr pos:start="279:5" pos:end="279:29"><call pos:start="279:5" pos:end="279:29"><name pos:start="279:5" pos:end="279:10">printf</name><argument_list pos:start="279:11" pos:end="279:29">(<argument pos:start="279:12" pos:end="279:28"><expr pos:start="279:12" pos:end="279:28"><literal type="string" pos:start="279:12" pos:end="279:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="280:5" pos:end="280:36"><expr pos:start="280:5" pos:end="280:35"><call pos:start="280:5" pos:end="280:35"><name pos:start="280:5" pos:end="280:17">X509_print_fp</name><argument_list pos:start="280:18" pos:end="280:35">(<argument pos:start="280:19" pos:end="280:24"><expr pos:start="280:19" pos:end="280:24"><name pos:start="280:19" pos:end="280:24">stdout</name></expr></argument>, <argument pos:start="280:27" pos:end="280:34"><expr pos:start="280:27" pos:end="280:34"><name pos:start="280:27" pos:end="280:34">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="281:5" pos:end="285:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="286:5" pos:end="286:74"><expr pos:start="286:5" pos:end="286:73"><call pos:start="286:5" pos:end="286:73"><name pos:start="286:5" pos:end="286:24">X509_signature_print</name><argument_list pos:start="286:25" pos:end="286:73">(<argument pos:start="286:26" pos:end="286:32"><expr pos:start="286:26" pos:end="286:32"><name pos:start="286:26" pos:end="286:32">bio_err</name></expr></argument>, <argument pos:start="286:35" pos:end="286:51"><expr pos:start="286:35" pos:end="286:51"><name pos:start="286:35" pos:end="286:51"><name pos:start="286:35" pos:end="286:42">cur_cert</name><operator pos:start="286:43" pos:end="286:44">-&gt;</operator><name pos:start="286:45" pos:end="286:51">sig_alg</name></name></expr></argument>, <argument pos:start="286:54" pos:end="286:72"><expr pos:start="286:54" pos:end="286:72"><name pos:start="286:54" pos:end="286:72"><name pos:start="286:54" pos:end="286:61">cur_cert</name><operator pos:start="286:62" pos:end="286:63">-&gt;</operator><name pos:start="286:64" pos:end="286:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="288:5" pos:end="290:5"><if pos:start="288:5" pos:end="290:5">if <condition pos:start="288:8" pos:end="288:59">(<expr pos:start="288:9" pos:end="288:58"><name pos:start="288:9" pos:end="288:26">openssl_cert_error</name> <operator pos:start="288:28" pos:end="288:29">==</operator> <name pos:start="288:31" pos:end="288:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="288:61" pos:end="290:5">{<block_content pos:start="289:9" pos:end="289:20">
        <expr_stmt pos:start="289:9" pos:end="289:20"><expr pos:start="289:9" pos:end="289:19"><name pos:start="289:9" pos:end="289:15">approve</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <literal type="number" pos:start="289:19" pos:end="289:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="292:5" pos:end="292:22"><expr pos:start="292:5" pos:end="292:21"><call pos:start="292:5" pos:end="292:21"><name pos:start="292:5" pos:end="292:12">BIO_free</name><argument_list pos:start="292:13" pos:end="292:21">(<argument pos:start="292:14" pos:end="292:20"><expr pos:start="292:14" pos:end="292:20"><name pos:start="292:14" pos:end="292:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="294:5" pos:end="294:19">return <expr pos:start="294:12" pos:end="294:18"><name pos:start="294:12" pos:end="294:18">approve</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="297:1" pos:end="300:3">/*
 * Test1 - exercise the server side variations triggered
 *         by est_client_get_csrattrs()
 */</comment>
<function pos:start="301:1" pos:end="611:1"><type pos:start="301:1" pos:end="301:11"><specifier pos:start="301:1" pos:end="301:6">static</specifier> <name pos:start="301:8" pos:end="301:11">void</name></type> <name pos:start="301:13" pos:end="301:23">us895_test1</name> <parameter_list pos:start="301:25" pos:end="301:30">(<parameter pos:start="301:26" pos:end="301:29"><decl pos:start="301:26" pos:end="301:29"><type pos:start="301:26" pos:end="301:29"><name pos:start="301:26" pos:end="301:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="302:1" pos:end="611:1">{<block_content pos:start="303:5" pos:end="610:5">
    <decl_stmt pos:start="303:5" pos:end="303:17"><decl pos:start="303:5" pos:end="303:16"><type pos:start="303:5" pos:end="303:13"><name pos:start="303:5" pos:end="303:11">EST_CTX</name> <modifier pos:start="303:13" pos:end="303:13">*</modifier></type><name pos:start="303:14" pos:end="303:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="304:5" pos:end="304:31"><decl pos:start="304:5" pos:end="304:30"><type pos:start="304:5" pos:end="304:19"><name pos:start="304:5" pos:end="304:12">unsigned</name> <name pos:start="304:14" pos:end="304:17">char</name> <modifier pos:start="304:19" pos:end="304:19">*</modifier></type><name pos:start="304:20" pos:end="304:23">pkey</name> <init pos:start="304:25" pos:end="304:30">= <expr pos:start="304:27" pos:end="304:30"><name pos:start="304:27" pos:end="304:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="305:5" pos:end="305:34"><decl pos:start="305:5" pos:end="305:33"><type pos:start="305:5" pos:end="305:19"><name pos:start="305:5" pos:end="305:12">unsigned</name> <name pos:start="305:14" pos:end="305:17">char</name> <modifier pos:start="305:19" pos:end="305:19">*</modifier></type><name pos:start="305:20" pos:end="305:26">cacerts</name> <init pos:start="305:28" pos:end="305:33">= <expr pos:start="305:30" pos:end="305:33"><name pos:start="305:30" pos:end="305:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="306:5" pos:end="306:24"><decl pos:start="306:5" pos:end="306:23"><type pos:start="306:5" pos:end="306:7"><name pos:start="306:5" pos:end="306:7">int</name></type> <name pos:start="306:9" pos:end="306:19">cacerts_len</name> <init pos:start="306:21" pos:end="306:23">= <expr pos:start="306:23" pos:end="306:23"><literal type="number" pos:start="306:23" pos:end="306:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="307:5" pos:end="307:32"><decl pos:start="307:5" pos:end="307:31"><type pos:start="307:5" pos:end="307:13"><name pos:start="307:5" pos:end="307:13">EST_ERROR</name></type> <name pos:start="307:15" pos:end="307:16">rc</name> <init pos:start="307:18" pos:end="307:31">= <expr pos:start="307:20" pos:end="307:31"><name pos:start="307:20" pos:end="307:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="308:5" pos:end="308:24"><decl pos:start="308:5" pos:end="308:23"><type pos:start="308:5" pos:end="308:14"><name pos:start="308:5" pos:end="308:12">EVP_PKEY</name> <modifier pos:start="308:14" pos:end="308:14">*</modifier></type> <name pos:start="308:16" pos:end="308:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="309:5" pos:end="309:16"><decl pos:start="309:5" pos:end="309:15"><type pos:start="309:5" pos:end="309:7"><name pos:start="309:5" pos:end="309:7">int</name></type> <name pos:start="309:9" pos:end="309:15">csr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="310:5" pos:end="310:35"><decl pos:start="310:5" pos:end="310:34"><type pos:start="310:5" pos:end="310:19"><name pos:start="310:5" pos:end="310:12">unsigned</name> <name pos:start="310:14" pos:end="310:17">char</name> <modifier pos:start="310:19" pos:end="310:19">*</modifier></type><name pos:start="310:20" pos:end="310:27">csr_data</name> <init pos:start="310:29" pos:end="310:34">= <expr pos:start="310:31" pos:end="310:34"><name pos:start="310:31" pos:end="310:34">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="312:5" pos:end="312:13"><expr pos:start="312:5" pos:end="312:12"><call pos:start="312:5" pos:end="312:12"><name pos:start="312:5" pos:end="312:9">SLEEP</name><argument_list pos:start="312:10" pos:end="312:12">(<argument pos:start="312:11" pos:end="312:11"><expr pos:start="312:11" pos:end="312:11"><literal type="number" pos:start="312:11" pos:end="312:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="314:5" pos:end="315:5"><expr pos:start="314:5" pos:end="314:15"><name pos:start="314:5" pos:end="314:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="317:5" pos:end="319:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="320:5" pos:end="320:63"><expr pos:start="320:5" pos:end="320:62"><name pos:start="320:5" pos:end="320:15">cacerts_len</name> <operator pos:start="320:17" pos:end="320:17">=</operator> <call pos:start="320:19" pos:end="320:62"><name pos:start="320:19" pos:end="320:34">read_binary_file</name><argument_list pos:start="320:35" pos:end="320:62">(<argument pos:start="320:36" pos:end="320:51"><expr pos:start="320:36" pos:end="320:51"><name pos:start="320:36" pos:end="320:51">SERVER_UT_CACERT</name></expr></argument>, <argument pos:start="320:54" pos:end="320:61"><expr pos:start="320:54" pos:end="320:61"><operator pos:start="320:54" pos:end="320:54">&amp;</operator><name pos:start="320:55" pos:end="320:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="321:5" pos:end="321:31"><expr pos:start="321:5" pos:end="321:30"><call pos:start="321:5" pos:end="321:30"><name pos:start="321:5" pos:end="321:13">CU_ASSERT</name><argument_list pos:start="321:14" pos:end="321:30">(<argument pos:start="321:15" pos:end="321:29"><expr pos:start="321:15" pos:end="321:29"><name pos:start="321:15" pos:end="321:25">cacerts_len</name> <operator pos:start="321:27" pos:end="321:27">&gt;</operator> <literal type="number" pos:start="321:29" pos:end="321:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="323:5" pos:end="325:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="326:5" pos:end="326:50"><expr pos:start="326:5" pos:end="326:49"><name pos:start="326:5" pos:end="326:12">priv_key</name> <operator pos:start="326:14" pos:end="326:14">=</operator> <call pos:start="326:16" pos:end="326:49"><name pos:start="326:16" pos:end="326:31">read_private_key</name><argument_list pos:start="326:32" pos:end="326:49">(<argument pos:start="326:33" pos:end="326:48"><expr pos:start="326:33" pos:end="326:48"><name pos:start="326:33" pos:end="326:48">SERVER_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="327:5" pos:end="330:5"><if pos:start="327:5" pos:end="330:5">if <condition pos:start="327:8" pos:end="327:25">(<expr pos:start="327:9" pos:end="327:24"><name pos:start="327:9" pos:end="327:16">priv_key</name> <operator pos:start="327:18" pos:end="327:19">==</operator> <name pos:start="327:21" pos:end="327:24">NULL</name></expr>)</condition> <block pos:start="327:27" pos:end="330:5">{<block_content pos:start="328:9" pos:end="329:15">
        <expr_stmt pos:start="328:9" pos:end="328:80"><expr pos:start="328:9" pos:end="328:79"><call pos:start="328:9" pos:end="328:79"><name pos:start="328:9" pos:end="328:14">printf</name><argument_list pos:start="328:15" pos:end="328:79">(<argument pos:start="328:16" pos:end="328:60"><expr pos:start="328:16" pos:end="328:60"><literal type="string" pos:start="328:16" pos:end="328:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="328:63" pos:end="328:78"><expr pos:start="328:63" pos:end="328:78"><name pos:start="328:63" pos:end="328:78">SERVER_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="329:9" pos:end="329:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="332:5" pos:end="336:34"><expr pos:start="332:5" pos:end="336:33"><name pos:start="332:5" pos:end="332:7">ctx</name> <operator pos:start="332:9" pos:end="332:9">=</operator> <call pos:start="332:11" pos:end="336:33"><name pos:start="332:11" pos:end="332:25">est_client_init</name><argument_list pos:start="332:26" pos:end="336:33">(
        <argument pos:start="333:9" pos:end="333:15"><expr pos:start="333:9" pos:end="333:15"><name pos:start="333:9" pos:end="333:15">cacerts</name></expr></argument>,
        <argument pos:start="334:9" pos:end="334:19"><expr pos:start="334:9" pos:end="334:19"><name pos:start="334:9" pos:end="334:19">cacerts_len</name></expr></argument>,
        <argument pos:start="335:9" pos:end="335:27"><expr pos:start="335:9" pos:end="335:27"><name pos:start="335:9" pos:end="335:27">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="336:9" pos:end="336:32"><expr pos:start="336:9" pos:end="336:32"><name pos:start="336:9" pos:end="336:32">proxy_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="337:5" pos:end="337:27"><expr pos:start="337:5" pos:end="337:26"><call pos:start="337:5" pos:end="337:26"><name pos:start="337:5" pos:end="337:13">CU_ASSERT</name><argument_list pos:start="337:14" pos:end="337:26">(<argument pos:start="337:15" pos:end="337:25"><expr pos:start="337:15" pos:end="337:25"><name pos:start="337:15" pos:end="337:17">ctx</name> <operator pos:start="337:19" pos:end="337:20">!=</operator> <name pos:start="337:22" pos:end="337:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:58"><expr pos:start="339:5" pos:end="339:57"><name pos:start="339:5" pos:end="339:6">rc</name> <operator pos:start="339:8" pos:end="339:8">=</operator> <call pos:start="339:10" pos:end="339:57"><name pos:start="339:10" pos:end="339:28">est_client_set_auth</name><argument_list pos:start="339:29" pos:end="339:57">(<argument pos:start="339:30" pos:end="339:32"><expr pos:start="339:30" pos:end="339:32"><name pos:start="339:30" pos:end="339:32">ctx</name></expr></argument>, <argument pos:start="339:35" pos:end="339:36"><expr pos:start="339:35" pos:end="339:36"><literal type="string" pos:start="339:35" pos:end="339:36">""</literal></expr></argument>, <argument pos:start="339:39" pos:end="339:40"><expr pos:start="339:39" pos:end="339:40"><literal type="string" pos:start="339:39" pos:end="339:40">""</literal></expr></argument>, <argument pos:start="339:43" pos:end="339:46"><expr pos:start="339:43" pos:end="339:46"><name pos:start="339:43" pos:end="339:46">NULL</name></expr></argument>, <argument pos:start="339:49" pos:end="339:56"><expr pos:start="339:49" pos:end="339:56"><name pos:start="339:49" pos:end="339:56">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="340:5" pos:end="340:34"><expr pos:start="340:5" pos:end="340:33"><call pos:start="340:5" pos:end="340:33"><name pos:start="340:5" pos:end="340:13">CU_ASSERT</name><argument_list pos:start="340:14" pos:end="340:33">(<argument pos:start="340:15" pos:end="340:32"><expr pos:start="340:15" pos:end="340:32"><name pos:start="340:15" pos:end="340:16">rc</name> <operator pos:start="340:18" pos:end="340:19">==</operator> <name pos:start="340:21" pos:end="340:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="342:5" pos:end="342:72"><expr pos:start="342:5" pos:end="342:71"><call pos:start="342:5" pos:end="342:71"><name pos:start="342:5" pos:end="342:25">est_client_set_server</name><argument_list pos:start="342:26" pos:end="342:71">(<argument pos:start="342:27" pos:end="342:29"><expr pos:start="342:27" pos:end="342:29"><name pos:start="342:27" pos:end="342:29">ctx</name></expr></argument>, <argument pos:start="342:32" pos:end="342:46"><expr pos:start="342:32" pos:end="342:46"><name pos:start="342:32" pos:end="342:46">US895_SERVER_IP</name></expr></argument>, <argument pos:start="342:49" pos:end="342:64"><expr pos:start="342:49" pos:end="342:64"><name pos:start="342:49" pos:end="342:64">US895_PROXY_PORT</name></expr></argument>, <argument pos:start="342:67" pos:end="342:70"><expr pos:start="342:67" pos:end="342:70"><name pos:start="342:67" pos:end="342:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="344:5" pos:end="344:24">/* clear callback */</comment>
    <if_stmt pos:start="345:5" pos:end="348:5"><if pos:start="345:5" pos:end="348:5">if <condition pos:start="345:8" pos:end="345:35">(<expr pos:start="345:9" pos:end="345:34"><call pos:start="345:9" pos:end="345:34"><name pos:start="345:9" pos:end="345:22">est_set_csr_cb</name><argument_list pos:start="345:23" pos:end="345:34">(<argument pos:start="345:24" pos:end="345:27"><expr pos:start="345:24" pos:end="345:27"><name pos:start="345:24" pos:end="345:27">ectx</name></expr></argument>, <argument pos:start="345:30" pos:end="345:33"><expr pos:start="345:30" pos:end="345:33"><name pos:start="345:30" pos:end="345:33">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="345:37" pos:end="348:5">{<block_content pos:start="346:9" pos:end="347:16">
        <expr_stmt pos:start="346:9" pos:end="346:78"><expr pos:start="346:9" pos:end="346:77"><call pos:start="346:9" pos:end="346:77"><name pos:start="346:9" pos:end="346:14">printf</name><argument_list pos:start="346:15" pos:end="346:77">(<argument pos:start="346:16" pos:end="346:76"><expr pos:start="346:16" pos:end="346:76"><literal type="string" pos:start="346:16" pos:end="346:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="347:9" pos:end="347:16"><expr pos:start="347:9" pos:end="347:15"><call pos:start="347:9" pos:end="347:15"><name pos:start="347:9" pos:end="347:12">exit</name><argument_list pos:start="347:13" pos:end="347:15">(<argument pos:start="347:14" pos:end="347:14"><expr pos:start="347:14" pos:end="347:14"><literal type="number" pos:start="347:14" pos:end="347:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="350:5" pos:end="350:24">/* clear csrattrs */</comment>
    <expr_stmt pos:start="351:5" pos:end="351:49"><expr pos:start="351:5" pos:end="351:48"><name pos:start="351:5" pos:end="351:6">rc</name> <operator pos:start="351:8" pos:end="351:8">=</operator> <call pos:start="351:10" pos:end="351:48"><name pos:start="351:10" pos:end="351:33">est_server_init_csrattrs</name><argument_list pos:start="351:34" pos:end="351:48">(<argument pos:start="351:35" pos:end="351:38"><expr pos:start="351:35" pos:end="351:38"><name pos:start="351:35" pos:end="351:38">ectx</name></expr></argument>, <argument pos:start="351:41" pos:end="351:44"><expr pos:start="351:41" pos:end="351:44"><name pos:start="351:41" pos:end="351:44">NULL</name></expr></argument>, <argument pos:start="351:47" pos:end="351:47"><expr pos:start="351:47" pos:end="351:47"><literal type="number" pos:start="351:47" pos:end="351:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="352:5" pos:end="352:34"><expr pos:start="352:5" pos:end="352:33"><call pos:start="352:5" pos:end="352:33"><name pos:start="352:5" pos:end="352:13">CU_ASSERT</name><argument_list pos:start="352:14" pos:end="352:33">(<argument pos:start="352:15" pos:end="352:32"><expr pos:start="352:15" pos:end="352:32"><name pos:start="352:15" pos:end="352:16">rc</name> <operator pos:start="352:18" pos:end="352:19">==</operator> <name pos:start="352:21" pos:end="352:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="353:5" pos:end="353:37">/* should get 204 with no data */</comment>
    <expr_stmt pos:start="354:5" pos:end="354:59"><expr pos:start="354:5" pos:end="354:58"><name pos:start="354:5" pos:end="354:6">rc</name> <operator pos:start="354:8" pos:end="354:8">=</operator> <call pos:start="354:10" pos:end="354:58"><name pos:start="354:10" pos:end="354:32">est_client_get_csrattrs</name><argument_list pos:start="354:33" pos:end="354:58">(<argument pos:start="354:34" pos:end="354:36"><expr pos:start="354:34" pos:end="354:36"><name pos:start="354:34" pos:end="354:36">ctx</name></expr></argument>, <argument pos:start="354:39" pos:end="354:47"><expr pos:start="354:39" pos:end="354:47"><operator pos:start="354:39" pos:end="354:39">&amp;</operator><name pos:start="354:40" pos:end="354:47">csr_data</name></expr></argument>, <argument pos:start="354:50" pos:end="354:57"><expr pos:start="354:50" pos:end="354:57"><operator pos:start="354:50" pos:end="354:50">&amp;</operator><name pos:start="354:51" pos:end="354:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="355:5" pos:end="355:34"><expr pos:start="355:5" pos:end="355:33"><call pos:start="355:5" pos:end="355:33"><name pos:start="355:5" pos:end="355:13">CU_ASSERT</name><argument_list pos:start="355:14" pos:end="355:33">(<argument pos:start="355:15" pos:end="355:32"><expr pos:start="355:15" pos:end="355:32"><name pos:start="355:15" pos:end="355:16">rc</name> <operator pos:start="355:18" pos:end="355:19">==</operator> <name pos:start="355:21" pos:end="355:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="356:5" pos:end="356:28"><expr pos:start="356:5" pos:end="356:27"><call pos:start="356:5" pos:end="356:27"><name pos:start="356:5" pos:end="356:13">CU_ASSERT</name><argument_list pos:start="356:14" pos:end="356:27">(<argument pos:start="356:15" pos:end="356:26"><expr pos:start="356:15" pos:end="356:26"><name pos:start="356:15" pos:end="356:21">csr_len</name> <operator pos:start="356:23" pos:end="356:24">==</operator> <literal type="number" pos:start="356:26" pos:end="356:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="357:5" pos:end="357:32"><expr pos:start="357:5" pos:end="357:31"><call pos:start="357:5" pos:end="357:31"><name pos:start="357:5" pos:end="357:13">CU_ASSERT</name><argument_list pos:start="357:14" pos:end="357:31">(<argument pos:start="357:15" pos:end="357:30"><expr pos:start="357:15" pos:end="357:30"><name pos:start="357:15" pos:end="357:22">csr_data</name> <operator pos:start="357:24" pos:end="357:25">==</operator> <name pos:start="357:27" pos:end="357:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="359:5" pos:end="359:42">/* Real base64 string - should pass */</comment>
    <expr_stmt pos:start="360:5" pos:end="360:78"><expr pos:start="360:5" pos:end="360:77"><name pos:start="360:5" pos:end="360:6">rc</name> <operator pos:start="360:8" pos:end="360:8">=</operator> <call pos:start="360:10" pos:end="360:77"><name pos:start="360:10" pos:end="360:33">est_server_init_csrattrs</name><argument_list pos:start="360:34" pos:end="360:77">(<argument pos:start="360:35" pos:end="360:38"><expr pos:start="360:35" pos:end="360:38"><name pos:start="360:35" pos:end="360:38">ectx</name></expr></argument>, <argument pos:start="360:41" pos:end="360:53"><expr pos:start="360:41" pos:end="360:53"><name pos:start="360:41" pos:end="360:53">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="360:56" pos:end="360:76"><expr pos:start="360:56" pos:end="360:76"><call pos:start="360:56" pos:end="360:76"><name pos:start="360:56" pos:end="360:61">strlen</name><argument_list pos:start="360:62" pos:end="360:76">(<argument pos:start="360:63" pos:end="360:75"><expr pos:start="360:63" pos:end="360:75"><name pos:start="360:63" pos:end="360:75">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="361:5" pos:end="361:34"><expr pos:start="361:5" pos:end="361:33"><call pos:start="361:5" pos:end="361:33"><name pos:start="361:5" pos:end="361:13">CU_ASSERT</name><argument_list pos:start="361:14" pos:end="361:33">(<argument pos:start="361:15" pos:end="361:32"><expr pos:start="361:15" pos:end="361:32"><name pos:start="361:15" pos:end="361:16">rc</name> <operator pos:start="361:18" pos:end="361:19">==</operator> <name pos:start="361:21" pos:end="361:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="362:5" pos:end="362:59"><expr pos:start="362:5" pos:end="362:58"><name pos:start="362:5" pos:end="362:6">rc</name> <operator pos:start="362:8" pos:end="362:8">=</operator> <call pos:start="362:10" pos:end="362:58"><name pos:start="362:10" pos:end="362:32">est_client_get_csrattrs</name><argument_list pos:start="362:33" pos:end="362:58">(<argument pos:start="362:34" pos:end="362:36"><expr pos:start="362:34" pos:end="362:36"><name pos:start="362:34" pos:end="362:36">ctx</name></expr></argument>, <argument pos:start="362:39" pos:end="362:47"><expr pos:start="362:39" pos:end="362:47"><operator pos:start="362:39" pos:end="362:39">&amp;</operator><name pos:start="362:40" pos:end="362:47">csr_data</name></expr></argument>, <argument pos:start="362:50" pos:end="362:57"><expr pos:start="362:50" pos:end="362:57"><operator pos:start="362:50" pos:end="362:50">&amp;</operator><name pos:start="362:51" pos:end="362:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="363:5" pos:end="363:34"><expr pos:start="363:5" pos:end="363:33"><call pos:start="363:5" pos:end="363:33"><name pos:start="363:5" pos:end="363:13">CU_ASSERT</name><argument_list pos:start="363:14" pos:end="363:33">(<argument pos:start="363:15" pos:end="363:32"><expr pos:start="363:15" pos:end="363:32"><name pos:start="363:15" pos:end="363:16">rc</name> <operator pos:start="363:18" pos:end="363:19">==</operator> <name pos:start="363:21" pos:end="363:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="364:5" pos:end="364:48"><expr pos:start="364:5" pos:end="364:47"><call pos:start="364:5" pos:end="364:47"><name pos:start="364:5" pos:end="364:13">CU_ASSERT</name><argument_list pos:start="364:14" pos:end="364:47">(<argument pos:start="364:15" pos:end="364:46"><expr pos:start="364:15" pos:end="364:46"><name pos:start="364:15" pos:end="364:21">csr_len</name> <operator pos:start="364:23" pos:end="364:24">==</operator> <call pos:start="364:26" pos:end="364:46"><name pos:start="364:26" pos:end="364:31">strlen</name><argument_list pos:start="364:32" pos:end="364:46">(<argument pos:start="364:33" pos:end="364:45"><expr pos:start="364:33" pos:end="364:45"><name pos:start="364:33" pos:end="364:45">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="365:5" pos:end="365:77"><expr pos:start="365:5" pos:end="365:76"><call pos:start="365:5" pos:end="365:76"><name pos:start="365:5" pos:end="365:13">CU_ASSERT</name><argument_list pos:start="365:14" pos:end="365:76">(<argument pos:start="365:15" pos:end="365:75"><expr pos:start="365:15" pos:end="365:75"><call pos:start="365:15" pos:end="365:70"><name pos:start="365:15" pos:end="365:21">strncmp</name><argument_list pos:start="365:22" pos:end="365:70">(<argument pos:start="365:23" pos:end="365:35"><expr pos:start="365:23" pos:end="365:35"><name pos:start="365:23" pos:end="365:35">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="365:38" pos:end="365:60"><expr pos:start="365:38" pos:end="365:60"><operator pos:start="365:38" pos:end="365:38">(</operator><specifier pos:start="365:39" pos:end="365:43">const</specifier> <name pos:start="365:45" pos:end="365:48">char</name> <operator pos:start="365:50" pos:end="365:50">*</operator><operator pos:start="365:51" pos:end="365:51">)</operator> <name pos:start="365:53" pos:end="365:60">csr_data</name></expr></argument>, <argument pos:start="365:63" pos:end="365:69"><expr pos:start="365:63" pos:end="365:69"><name pos:start="365:63" pos:end="365:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="365:72" pos:end="365:73">==</operator> <literal type="number" pos:start="365:75" pos:end="365:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="367:5" pos:end="370:5"><if pos:start="367:5" pos:end="370:5">if <condition pos:start="367:8" pos:end="367:61">(<expr pos:start="367:9" pos:end="367:60"><call pos:start="367:9" pos:end="367:60"><name pos:start="367:9" pos:end="367:22">est_set_csr_cb</name><argument_list pos:start="367:23" pos:end="367:60">(<argument pos:start="367:24" pos:end="367:27"><expr pos:start="367:24" pos:end="367:27"><name pos:start="367:24" pos:end="367:27">ectx</name></expr></argument>, <argument pos:start="367:30" pos:end="367:59"><expr pos:start="367:30" pos:end="367:59"><operator pos:start="367:30" pos:end="367:30">&amp;</operator><name pos:start="367:31" pos:end="367:59">handle_short_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="367:63" pos:end="370:5">{<block_content pos:start="368:9" pos:end="369:16">
        <expr_stmt pos:start="368:9" pos:end="368:78"><expr pos:start="368:9" pos:end="368:77"><call pos:start="368:9" pos:end="368:77"><name pos:start="368:9" pos:end="368:14">printf</name><argument_list pos:start="368:15" pos:end="368:77">(<argument pos:start="368:16" pos:end="368:76"><expr pos:start="368:16" pos:end="368:76"><literal type="string" pos:start="368:16" pos:end="368:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="369:9" pos:end="369:16"><expr pos:start="369:9" pos:end="369:15"><call pos:start="369:9" pos:end="369:15"><name pos:start="369:9" pos:end="369:12">exit</name><argument_list pos:start="369:13" pos:end="369:15">(<argument pos:start="369:14" pos:end="369:14"><expr pos:start="369:14" pos:end="369:14"><literal type="number" pos:start="369:14" pos:end="369:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="371:5" pos:end="371:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="372:5" pos:end="372:59"><expr pos:start="372:5" pos:end="372:58"><name pos:start="372:5" pos:end="372:6">rc</name> <operator pos:start="372:8" pos:end="372:8">=</operator> <call pos:start="372:10" pos:end="372:58"><name pos:start="372:10" pos:end="372:32">est_client_get_csrattrs</name><argument_list pos:start="372:33" pos:end="372:58">(<argument pos:start="372:34" pos:end="372:36"><expr pos:start="372:34" pos:end="372:36"><name pos:start="372:34" pos:end="372:36">ctx</name></expr></argument>, <argument pos:start="372:39" pos:end="372:47"><expr pos:start="372:39" pos:end="372:47"><operator pos:start="372:39" pos:end="372:39">&amp;</operator><name pos:start="372:40" pos:end="372:47">csr_data</name></expr></argument>, <argument pos:start="372:50" pos:end="372:57"><expr pos:start="372:50" pos:end="372:57"><operator pos:start="372:50" pos:end="372:50">&amp;</operator><name pos:start="372:51" pos:end="372:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="373:5" pos:end="373:34"><expr pos:start="373:5" pos:end="373:33"><call pos:start="373:5" pos:end="373:33"><name pos:start="373:5" pos:end="373:13">CU_ASSERT</name><argument_list pos:start="373:14" pos:end="373:33">(<argument pos:start="373:15" pos:end="373:32"><expr pos:start="373:15" pos:end="373:32"><name pos:start="373:15" pos:end="373:16">rc</name> <operator pos:start="373:18" pos:end="373:19">==</operator> <name pos:start="373:21" pos:end="373:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="374:5" pos:end="374:28"><expr pos:start="374:5" pos:end="374:27"><call pos:start="374:5" pos:end="374:27"><name pos:start="374:5" pos:end="374:13">CU_ASSERT</name><argument_list pos:start="374:14" pos:end="374:27">(<argument pos:start="374:15" pos:end="374:26"><expr pos:start="374:15" pos:end="374:26"><name pos:start="374:15" pos:end="374:21">csr_len</name> <operator pos:start="374:23" pos:end="374:24">==</operator> <literal type="number" pos:start="374:26" pos:end="374:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="376:5" pos:end="379:5"><if pos:start="376:5" pos:end="379:5">if <condition pos:start="376:8" pos:end="376:63">(<expr pos:start="376:9" pos:end="376:62"><call pos:start="376:9" pos:end="376:62"><name pos:start="376:9" pos:end="376:22">est_set_csr_cb</name><argument_list pos:start="376:23" pos:end="376:62">(<argument pos:start="376:24" pos:end="376:27"><expr pos:start="376:24" pos:end="376:27"><name pos:start="376:24" pos:end="376:27">ectx</name></expr></argument>, <argument pos:start="376:30" pos:end="376:61"><expr pos:start="376:30" pos:end="376:61"><operator pos:start="376:30" pos:end="376:30">&amp;</operator><name pos:start="376:31" pos:end="376:61">handle_corrupt_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="376:65" pos:end="379:5">{<block_content pos:start="377:9" pos:end="378:16">
        <expr_stmt pos:start="377:9" pos:end="377:78"><expr pos:start="377:9" pos:end="377:77"><call pos:start="377:9" pos:end="377:77"><name pos:start="377:9" pos:end="377:14">printf</name><argument_list pos:start="377:15" pos:end="377:77">(<argument pos:start="377:16" pos:end="377:76"><expr pos:start="377:16" pos:end="377:76"><literal type="string" pos:start="377:16" pos:end="377:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="378:9" pos:end="378:16"><expr pos:start="378:9" pos:end="378:15"><call pos:start="378:9" pos:end="378:15"><name pos:start="378:9" pos:end="378:12">exit</name><argument_list pos:start="378:13" pos:end="378:15">(<argument pos:start="378:14" pos:end="378:14"><expr pos:start="378:14" pos:end="378:14"><literal type="number" pos:start="378:14" pos:end="378:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="380:5" pos:end="380:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="381:5" pos:end="381:59"><expr pos:start="381:5" pos:end="381:58"><name pos:start="381:5" pos:end="381:6">rc</name> <operator pos:start="381:8" pos:end="381:8">=</operator> <call pos:start="381:10" pos:end="381:58"><name pos:start="381:10" pos:end="381:32">est_client_get_csrattrs</name><argument_list pos:start="381:33" pos:end="381:58">(<argument pos:start="381:34" pos:end="381:36"><expr pos:start="381:34" pos:end="381:36"><name pos:start="381:34" pos:end="381:36">ctx</name></expr></argument>, <argument pos:start="381:39" pos:end="381:47"><expr pos:start="381:39" pos:end="381:47"><operator pos:start="381:39" pos:end="381:39">&amp;</operator><name pos:start="381:40" pos:end="381:47">csr_data</name></expr></argument>, <argument pos:start="381:50" pos:end="381:57"><expr pos:start="381:50" pos:end="381:57"><operator pos:start="381:50" pos:end="381:50">&amp;</operator><name pos:start="381:51" pos:end="381:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="382:5" pos:end="382:34"><expr pos:start="382:5" pos:end="382:33"><call pos:start="382:5" pos:end="382:33"><name pos:start="382:5" pos:end="382:13">CU_ASSERT</name><argument_list pos:start="382:14" pos:end="382:33">(<argument pos:start="382:15" pos:end="382:32"><expr pos:start="382:15" pos:end="382:32"><name pos:start="382:15" pos:end="382:16">rc</name> <operator pos:start="382:18" pos:end="382:19">==</operator> <name pos:start="382:21" pos:end="382:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="383:5" pos:end="383:28"><expr pos:start="383:5" pos:end="383:27"><call pos:start="383:5" pos:end="383:27"><name pos:start="383:5" pos:end="383:13">CU_ASSERT</name><argument_list pos:start="383:14" pos:end="383:27">(<argument pos:start="383:15" pos:end="383:26"><expr pos:start="383:15" pos:end="383:26"><name pos:start="383:15" pos:end="383:21">csr_len</name> <operator pos:start="383:23" pos:end="383:24">==</operator> <literal type="number" pos:start="383:26" pos:end="383:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="385:5" pos:end="388:5"><if pos:start="385:5" pos:end="388:5">if <condition pos:start="385:8" pos:end="385:60">(<expr pos:start="385:9" pos:end="385:59"><call pos:start="385:9" pos:end="385:59"><name pos:start="385:9" pos:end="385:22">est_set_csr_cb</name><argument_list pos:start="385:23" pos:end="385:59">(<argument pos:start="385:24" pos:end="385:27"><expr pos:start="385:24" pos:end="385:27"><name pos:start="385:24" pos:end="385:27">ectx</name></expr></argument>, <argument pos:start="385:30" pos:end="385:58"><expr pos:start="385:30" pos:end="385:58"><operator pos:start="385:30" pos:end="385:30">&amp;</operator><name pos:start="385:31" pos:end="385:58">handle_long_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="385:62" pos:end="388:5">{<block_content pos:start="386:9" pos:end="387:16">
        <expr_stmt pos:start="386:9" pos:end="386:78"><expr pos:start="386:9" pos:end="386:77"><call pos:start="386:9" pos:end="386:77"><name pos:start="386:9" pos:end="386:14">printf</name><argument_list pos:start="386:15" pos:end="386:77">(<argument pos:start="386:16" pos:end="386:76"><expr pos:start="386:16" pos:end="386:76"><literal type="string" pos:start="386:16" pos:end="386:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="387:9" pos:end="387:16"><expr pos:start="387:9" pos:end="387:15"><call pos:start="387:9" pos:end="387:15"><name pos:start="387:9" pos:end="387:12">exit</name><argument_list pos:start="387:13" pos:end="387:15">(<argument pos:start="387:14" pos:end="387:14"><expr pos:start="387:14" pos:end="387:14"><literal type="number" pos:start="387:14" pos:end="387:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="389:5" pos:end="389:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="390:5" pos:end="390:59"><expr pos:start="390:5" pos:end="390:58"><name pos:start="390:5" pos:end="390:6">rc</name> <operator pos:start="390:8" pos:end="390:8">=</operator> <call pos:start="390:10" pos:end="390:58"><name pos:start="390:10" pos:end="390:32">est_client_get_csrattrs</name><argument_list pos:start="390:33" pos:end="390:58">(<argument pos:start="390:34" pos:end="390:36"><expr pos:start="390:34" pos:end="390:36"><name pos:start="390:34" pos:end="390:36">ctx</name></expr></argument>, <argument pos:start="390:39" pos:end="390:47"><expr pos:start="390:39" pos:end="390:47"><operator pos:start="390:39" pos:end="390:39">&amp;</operator><name pos:start="390:40" pos:end="390:47">csr_data</name></expr></argument>, <argument pos:start="390:50" pos:end="390:57"><expr pos:start="390:50" pos:end="390:57"><operator pos:start="390:50" pos:end="390:50">&amp;</operator><name pos:start="390:51" pos:end="390:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="391:5" pos:end="391:34"><expr pos:start="391:5" pos:end="391:33"><call pos:start="391:5" pos:end="391:33"><name pos:start="391:5" pos:end="391:13">CU_ASSERT</name><argument_list pos:start="391:14" pos:end="391:33">(<argument pos:start="391:15" pos:end="391:32"><expr pos:start="391:15" pos:end="391:32"><name pos:start="391:15" pos:end="391:16">rc</name> <operator pos:start="391:18" pos:end="391:19">==</operator> <name pos:start="391:21" pos:end="391:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="392:5" pos:end="392:28"><expr pos:start="392:5" pos:end="392:27"><call pos:start="392:5" pos:end="392:27"><name pos:start="392:5" pos:end="392:13">CU_ASSERT</name><argument_list pos:start="392:14" pos:end="392:27">(<argument pos:start="392:15" pos:end="392:26"><expr pos:start="392:15" pos:end="392:26"><name pos:start="392:15" pos:end="392:21">csr_len</name> <operator pos:start="392:23" pos:end="392:24">==</operator> <literal type="number" pos:start="392:26" pos:end="392:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="394:5" pos:end="397:5"><if pos:start="394:5" pos:end="397:5">if <condition pos:start="394:8" pos:end="394:63">(<expr pos:start="394:9" pos:end="394:62"><call pos:start="394:9" pos:end="394:62"><name pos:start="394:9" pos:end="394:22">est_set_csr_cb</name><argument_list pos:start="394:23" pos:end="394:62">(<argument pos:start="394:24" pos:end="394:27"><expr pos:start="394:24" pos:end="394:27"><name pos:start="394:24" pos:end="394:27">ectx</name></expr></argument>, <argument pos:start="394:30" pos:end="394:61"><expr pos:start="394:30" pos:end="394:61"><operator pos:start="394:30" pos:end="394:30">&amp;</operator><name pos:start="394:31" pos:end="394:61">handle_correct_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="394:65" pos:end="397:5">{<block_content pos:start="395:9" pos:end="396:16">
        <expr_stmt pos:start="395:9" pos:end="395:78"><expr pos:start="395:9" pos:end="395:77"><call pos:start="395:9" pos:end="395:77"><name pos:start="395:9" pos:end="395:14">printf</name><argument_list pos:start="395:15" pos:end="395:77">(<argument pos:start="395:16" pos:end="395:76"><expr pos:start="395:16" pos:end="395:76"><literal type="string" pos:start="395:16" pos:end="395:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="396:9" pos:end="396:16"><expr pos:start="396:9" pos:end="396:15"><call pos:start="396:9" pos:end="396:15"><name pos:start="396:9" pos:end="396:12">exit</name><argument_list pos:start="396:13" pos:end="396:15">(<argument pos:start="396:14" pos:end="396:14"><expr pos:start="396:14" pos:end="396:14"><literal type="number" pos:start="396:14" pos:end="396:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="398:5" pos:end="398:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="399:5" pos:end="399:59"><expr pos:start="399:5" pos:end="399:58"><name pos:start="399:5" pos:end="399:6">rc</name> <operator pos:start="399:8" pos:end="399:8">=</operator> <call pos:start="399:10" pos:end="399:58"><name pos:start="399:10" pos:end="399:32">est_client_get_csrattrs</name><argument_list pos:start="399:33" pos:end="399:58">(<argument pos:start="399:34" pos:end="399:36"><expr pos:start="399:34" pos:end="399:36"><name pos:start="399:34" pos:end="399:36">ctx</name></expr></argument>, <argument pos:start="399:39" pos:end="399:47"><expr pos:start="399:39" pos:end="399:47"><operator pos:start="399:39" pos:end="399:39">&amp;</operator><name pos:start="399:40" pos:end="399:47">csr_data</name></expr></argument>, <argument pos:start="399:50" pos:end="399:57"><expr pos:start="399:50" pos:end="399:57"><operator pos:start="399:50" pos:end="399:50">&amp;</operator><name pos:start="399:51" pos:end="399:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="400:5" pos:end="400:34"><expr pos:start="400:5" pos:end="400:33"><call pos:start="400:5" pos:end="400:33"><name pos:start="400:5" pos:end="400:13">CU_ASSERT</name><argument_list pos:start="400:14" pos:end="400:33">(<argument pos:start="400:15" pos:end="400:32"><expr pos:start="400:15" pos:end="400:32"><name pos:start="400:15" pos:end="400:16">rc</name> <operator pos:start="400:18" pos:end="400:19">==</operator> <name pos:start="400:21" pos:end="400:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="401:5" pos:end="401:45"><expr pos:start="401:5" pos:end="401:44"><call pos:start="401:5" pos:end="401:44"><name pos:start="401:5" pos:end="401:13">CU_ASSERT</name><argument_list pos:start="401:14" pos:end="401:44">(<argument pos:start="401:15" pos:end="401:43"><expr pos:start="401:15" pos:end="401:43"><name pos:start="401:15" pos:end="401:21">csr_len</name> <operator pos:start="401:23" pos:end="401:24">==</operator> <call pos:start="401:26" pos:end="401:43"><name pos:start="401:26" pos:end="401:31">strlen</name><argument_list pos:start="401:32" pos:end="401:43">(<argument pos:start="401:33" pos:end="401:42"><expr pos:start="401:33" pos:end="401:42"><name pos:start="401:33" pos:end="401:42">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="402:5" pos:end="402:74"><expr pos:start="402:5" pos:end="402:73"><call pos:start="402:5" pos:end="402:73"><name pos:start="402:5" pos:end="402:13">CU_ASSERT</name><argument_list pos:start="402:14" pos:end="402:73">(<argument pos:start="402:15" pos:end="402:72"><expr pos:start="402:15" pos:end="402:72"><call pos:start="402:15" pos:end="402:67"><name pos:start="402:15" pos:end="402:21">strncmp</name><argument_list pos:start="402:22" pos:end="402:67">(<argument pos:start="402:23" pos:end="402:32"><expr pos:start="402:23" pos:end="402:32"><name pos:start="402:23" pos:end="402:32">TEST_ATTR1</name></expr></argument>, <argument pos:start="402:35" pos:end="402:57"><expr pos:start="402:35" pos:end="402:57"><operator pos:start="402:35" pos:end="402:35">(</operator><specifier pos:start="402:36" pos:end="402:40">const</specifier> <name pos:start="402:42" pos:end="402:45">char</name> <operator pos:start="402:47" pos:end="402:47">*</operator><operator pos:start="402:48" pos:end="402:48">)</operator> <name pos:start="402:50" pos:end="402:57">csr_data</name></expr></argument>, <argument pos:start="402:60" pos:end="402:66"><expr pos:start="402:60" pos:end="402:66"><name pos:start="402:60" pos:end="402:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="402:69" pos:end="402:70">==</operator> <literal type="number" pos:start="402:72" pos:end="402:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="404:5" pos:end="404:24">/* clear csrattrs */</comment>
    <expr_stmt pos:start="405:5" pos:end="405:49"><expr pos:start="405:5" pos:end="405:48"><name pos:start="405:5" pos:end="405:6">rc</name> <operator pos:start="405:8" pos:end="405:8">=</operator> <call pos:start="405:10" pos:end="405:48"><name pos:start="405:10" pos:end="405:33">est_server_init_csrattrs</name><argument_list pos:start="405:34" pos:end="405:48">(<argument pos:start="405:35" pos:end="405:38"><expr pos:start="405:35" pos:end="405:38"><name pos:start="405:35" pos:end="405:38">ectx</name></expr></argument>, <argument pos:start="405:41" pos:end="405:44"><expr pos:start="405:41" pos:end="405:44"><name pos:start="405:41" pos:end="405:44">NULL</name></expr></argument>, <argument pos:start="405:47" pos:end="405:47"><expr pos:start="405:47" pos:end="405:47"><literal type="number" pos:start="405:47" pos:end="405:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="406:5" pos:end="406:34"><expr pos:start="406:5" pos:end="406:33"><call pos:start="406:5" pos:end="406:33"><name pos:start="406:5" pos:end="406:13">CU_ASSERT</name><argument_list pos:start="406:14" pos:end="406:33">(<argument pos:start="406:15" pos:end="406:32"><expr pos:start="406:15" pos:end="406:32"><name pos:start="406:15" pos:end="406:16">rc</name> <operator pos:start="406:18" pos:end="406:19">==</operator> <name pos:start="406:21" pos:end="406:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="407:5" pos:end="407:59"><expr pos:start="407:5" pos:end="407:58"><name pos:start="407:5" pos:end="407:6">rc</name> <operator pos:start="407:8" pos:end="407:8">=</operator> <call pos:start="407:10" pos:end="407:58"><name pos:start="407:10" pos:end="407:32">est_client_get_csrattrs</name><argument_list pos:start="407:33" pos:end="407:58">(<argument pos:start="407:34" pos:end="407:36"><expr pos:start="407:34" pos:end="407:36"><name pos:start="407:34" pos:end="407:36">ctx</name></expr></argument>, <argument pos:start="407:39" pos:end="407:47"><expr pos:start="407:39" pos:end="407:47"><operator pos:start="407:39" pos:end="407:39">&amp;</operator><name pos:start="407:40" pos:end="407:47">csr_data</name></expr></argument>, <argument pos:start="407:50" pos:end="407:57"><expr pos:start="407:50" pos:end="407:57"><operator pos:start="407:50" pos:end="407:50">&amp;</operator><name pos:start="407:51" pos:end="407:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="408:5" pos:end="408:34"><expr pos:start="408:5" pos:end="408:33"><call pos:start="408:5" pos:end="408:33"><name pos:start="408:5" pos:end="408:13">CU_ASSERT</name><argument_list pos:start="408:14" pos:end="408:33">(<argument pos:start="408:15" pos:end="408:32"><expr pos:start="408:15" pos:end="408:32"><name pos:start="408:15" pos:end="408:16">rc</name> <operator pos:start="408:18" pos:end="408:19">==</operator> <name pos:start="408:21" pos:end="408:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="409:5" pos:end="409:45"><expr pos:start="409:5" pos:end="409:44"><call pos:start="409:5" pos:end="409:44"><name pos:start="409:5" pos:end="409:13">CU_ASSERT</name><argument_list pos:start="409:14" pos:end="409:44">(<argument pos:start="409:15" pos:end="409:43"><expr pos:start="409:15" pos:end="409:43"><name pos:start="409:15" pos:end="409:21">csr_len</name> <operator pos:start="409:23" pos:end="409:24">==</operator> <call pos:start="409:26" pos:end="409:43"><name pos:start="409:26" pos:end="409:31">strlen</name><argument_list pos:start="409:32" pos:end="409:43">(<argument pos:start="409:33" pos:end="409:42"><expr pos:start="409:33" pos:end="409:42"><name pos:start="409:33" pos:end="409:42">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="410:5" pos:end="410:74"><expr pos:start="410:5" pos:end="410:73"><call pos:start="410:5" pos:end="410:73"><name pos:start="410:5" pos:end="410:13">CU_ASSERT</name><argument_list pos:start="410:14" pos:end="410:73">(<argument pos:start="410:15" pos:end="410:72"><expr pos:start="410:15" pos:end="410:72"><call pos:start="410:15" pos:end="410:67"><name pos:start="410:15" pos:end="410:21">strncmp</name><argument_list pos:start="410:22" pos:end="410:67">(<argument pos:start="410:23" pos:end="410:32"><expr pos:start="410:23" pos:end="410:32"><name pos:start="410:23" pos:end="410:32">TEST_ATTR1</name></expr></argument>, <argument pos:start="410:35" pos:end="410:57"><expr pos:start="410:35" pos:end="410:57"><operator pos:start="410:35" pos:end="410:35">(</operator><specifier pos:start="410:36" pos:end="410:40">const</specifier> <name pos:start="410:42" pos:end="410:45">char</name> <operator pos:start="410:47" pos:end="410:47">*</operator><operator pos:start="410:48" pos:end="410:48">)</operator> <name pos:start="410:50" pos:end="410:57">csr_data</name></expr></argument>, <argument pos:start="410:60" pos:end="410:66"><expr pos:start="410:60" pos:end="410:66"><name pos:start="410:60" pos:end="410:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="410:69" pos:end="410:70">==</operator> <literal type="number" pos:start="410:72" pos:end="410:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="412:5" pos:end="412:24">/* clear callback */</comment>
    <if_stmt pos:start="413:5" pos:end="416:5"><if pos:start="413:5" pos:end="416:5">if <condition pos:start="413:8" pos:end="413:35">(<expr pos:start="413:9" pos:end="413:34"><call pos:start="413:9" pos:end="413:34"><name pos:start="413:9" pos:end="413:22">est_set_csr_cb</name><argument_list pos:start="413:23" pos:end="413:34">(<argument pos:start="413:24" pos:end="413:27"><expr pos:start="413:24" pos:end="413:27"><name pos:start="413:24" pos:end="413:27">ectx</name></expr></argument>, <argument pos:start="413:30" pos:end="413:33"><expr pos:start="413:30" pos:end="413:33"><name pos:start="413:30" pos:end="413:33">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="413:37" pos:end="416:5">{<block_content pos:start="414:9" pos:end="415:16">
        <expr_stmt pos:start="414:9" pos:end="414:78"><expr pos:start="414:9" pos:end="414:77"><call pos:start="414:9" pos:end="414:77"><name pos:start="414:9" pos:end="414:14">printf</name><argument_list pos:start="414:15" pos:end="414:77">(<argument pos:start="414:16" pos:end="414:76"><expr pos:start="414:16" pos:end="414:76"><literal type="string" pos:start="414:16" pos:end="414:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="415:9" pos:end="415:16"><expr pos:start="415:9" pos:end="415:15"><call pos:start="415:9" pos:end="415:15"><name pos:start="415:9" pos:end="415:12">exit</name><argument_list pos:start="415:13" pos:end="415:15">(<argument pos:start="415:14" pos:end="415:14"><expr pos:start="415:14" pos:end="415:14"><literal type="number" pos:start="415:14" pos:end="415:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="418:5" pos:end="418:42">/* Setting the smallest base64 size */</comment>
    <expr_stmt pos:start="419:5" pos:end="419:72"><expr pos:start="419:5" pos:end="419:71"><name pos:start="419:5" pos:end="419:6">rc</name> <operator pos:start="419:8" pos:end="419:8">=</operator> <call pos:start="419:10" pos:end="419:71"><name pos:start="419:10" pos:end="419:33">est_server_init_csrattrs</name><argument_list pos:start="419:34" pos:end="419:71">(<argument pos:start="419:35" pos:end="419:38"><expr pos:start="419:35" pos:end="419:38"><name pos:start="419:35" pos:end="419:38">ectx</name></expr></argument>, <argument pos:start="419:41" pos:end="419:50"><expr pos:start="419:41" pos:end="419:50"><name pos:start="419:41" pos:end="419:50">TEST_ATTR2</name></expr></argument>, <argument pos:start="419:53" pos:end="419:70"><expr pos:start="419:53" pos:end="419:70"><call pos:start="419:53" pos:end="419:70"><name pos:start="419:53" pos:end="419:58">strlen</name><argument_list pos:start="419:59" pos:end="419:70">(<argument pos:start="419:60" pos:end="419:69"><expr pos:start="419:60" pos:end="419:69"><name pos:start="419:60" pos:end="419:69">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="420:5" pos:end="420:34"><expr pos:start="420:5" pos:end="420:33"><call pos:start="420:5" pos:end="420:33"><name pos:start="420:5" pos:end="420:13">CU_ASSERT</name><argument_list pos:start="420:14" pos:end="420:33">(<argument pos:start="420:15" pos:end="420:32"><expr pos:start="420:15" pos:end="420:32"><name pos:start="420:15" pos:end="420:16">rc</name> <operator pos:start="420:18" pos:end="420:19">==</operator> <name pos:start="420:21" pos:end="420:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="421:5" pos:end="421:59"><expr pos:start="421:5" pos:end="421:58"><name pos:start="421:5" pos:end="421:6">rc</name> <operator pos:start="421:8" pos:end="421:8">=</operator> <call pos:start="421:10" pos:end="421:58"><name pos:start="421:10" pos:end="421:32">est_client_get_csrattrs</name><argument_list pos:start="421:33" pos:end="421:58">(<argument pos:start="421:34" pos:end="421:36"><expr pos:start="421:34" pos:end="421:36"><name pos:start="421:34" pos:end="421:36">ctx</name></expr></argument>, <argument pos:start="421:39" pos:end="421:47"><expr pos:start="421:39" pos:end="421:47"><operator pos:start="421:39" pos:end="421:39">&amp;</operator><name pos:start="421:40" pos:end="421:47">csr_data</name></expr></argument>, <argument pos:start="421:50" pos:end="421:57"><expr pos:start="421:50" pos:end="421:57"><operator pos:start="421:50" pos:end="421:50">&amp;</operator><name pos:start="421:51" pos:end="421:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="422:5" pos:end="422:34"><expr pos:start="422:5" pos:end="422:33"><call pos:start="422:5" pos:end="422:33"><name pos:start="422:5" pos:end="422:13">CU_ASSERT</name><argument_list pos:start="422:14" pos:end="422:33">(<argument pos:start="422:15" pos:end="422:32"><expr pos:start="422:15" pos:end="422:32"><name pos:start="422:15" pos:end="422:16">rc</name> <operator pos:start="422:18" pos:end="422:19">==</operator> <name pos:start="422:21" pos:end="422:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="423:5" pos:end="423:45"><expr pos:start="423:5" pos:end="423:44"><call pos:start="423:5" pos:end="423:44"><name pos:start="423:5" pos:end="423:13">CU_ASSERT</name><argument_list pos:start="423:14" pos:end="423:44">(<argument pos:start="423:15" pos:end="423:43"><expr pos:start="423:15" pos:end="423:43"><name pos:start="423:15" pos:end="423:21">csr_len</name> <operator pos:start="423:23" pos:end="423:24">==</operator> <call pos:start="423:26" pos:end="423:43"><name pos:start="423:26" pos:end="423:31">strlen</name><argument_list pos:start="423:32" pos:end="423:43">(<argument pos:start="423:33" pos:end="423:42"><expr pos:start="423:33" pos:end="423:42"><name pos:start="423:33" pos:end="423:42">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="424:5" pos:end="424:74"><expr pos:start="424:5" pos:end="424:73"><call pos:start="424:5" pos:end="424:73"><name pos:start="424:5" pos:end="424:13">CU_ASSERT</name><argument_list pos:start="424:14" pos:end="424:73">(<argument pos:start="424:15" pos:end="424:72"><expr pos:start="424:15" pos:end="424:72"><call pos:start="424:15" pos:end="424:67"><name pos:start="424:15" pos:end="424:21">strncmp</name><argument_list pos:start="424:22" pos:end="424:67">(<argument pos:start="424:23" pos:end="424:32"><expr pos:start="424:23" pos:end="424:32"><name pos:start="424:23" pos:end="424:32">TEST_ATTR2</name></expr></argument>, <argument pos:start="424:35" pos:end="424:57"><expr pos:start="424:35" pos:end="424:57"><operator pos:start="424:35" pos:end="424:35">(</operator><specifier pos:start="424:36" pos:end="424:40">const</specifier> <name pos:start="424:42" pos:end="424:45">char</name> <operator pos:start="424:47" pos:end="424:47">*</operator><operator pos:start="424:48" pos:end="424:48">)</operator> <name pos:start="424:50" pos:end="424:57">csr_data</name></expr></argument>, <argument pos:start="424:60" pos:end="424:66"><expr pos:start="424:60" pos:end="424:66"><name pos:start="424:60" pos:end="424:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="424:69" pos:end="424:70">==</operator> <literal type="number" pos:start="424:72" pos:end="424:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="426:5" pos:end="426:72"><expr pos:start="426:5" pos:end="426:71"><name pos:start="426:5" pos:end="426:6">rc</name> <operator pos:start="426:8" pos:end="426:8">=</operator> <call pos:start="426:10" pos:end="426:71"><name pos:start="426:10" pos:end="426:33">est_server_init_csrattrs</name><argument_list pos:start="426:34" pos:end="426:71">(<argument pos:start="426:35" pos:end="426:38"><expr pos:start="426:35" pos:end="426:38"><name pos:start="426:35" pos:end="426:38">ectx</name></expr></argument>, <argument pos:start="426:41" pos:end="426:50"><expr pos:start="426:41" pos:end="426:50"><name pos:start="426:41" pos:end="426:50">TEST_ATTR3</name></expr></argument>, <argument pos:start="426:53" pos:end="426:70"><expr pos:start="426:53" pos:end="426:70"><call pos:start="426:53" pos:end="426:70"><name pos:start="426:53" pos:end="426:58">strlen</name><argument_list pos:start="426:59" pos:end="426:70">(<argument pos:start="426:60" pos:end="426:69"><expr pos:start="426:60" pos:end="426:69"><name pos:start="426:60" pos:end="426:69">TEST_ATTR3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="427:5" pos:end="427:34"><expr pos:start="427:5" pos:end="427:33"><call pos:start="427:5" pos:end="427:33"><name pos:start="427:5" pos:end="427:13">CU_ASSERT</name><argument_list pos:start="427:14" pos:end="427:33">(<argument pos:start="427:15" pos:end="427:32"><expr pos:start="427:15" pos:end="427:32"><name pos:start="427:15" pos:end="427:16">rc</name> <operator pos:start="427:18" pos:end="427:19">==</operator> <name pos:start="427:21" pos:end="427:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="428:5" pos:end="428:59"><expr pos:start="428:5" pos:end="428:58"><name pos:start="428:5" pos:end="428:6">rc</name> <operator pos:start="428:8" pos:end="428:8">=</operator> <call pos:start="428:10" pos:end="428:58"><name pos:start="428:10" pos:end="428:32">est_client_get_csrattrs</name><argument_list pos:start="428:33" pos:end="428:58">(<argument pos:start="428:34" pos:end="428:36"><expr pos:start="428:34" pos:end="428:36"><name pos:start="428:34" pos:end="428:36">ctx</name></expr></argument>, <argument pos:start="428:39" pos:end="428:47"><expr pos:start="428:39" pos:end="428:47"><operator pos:start="428:39" pos:end="428:39">&amp;</operator><name pos:start="428:40" pos:end="428:47">csr_data</name></expr></argument>, <argument pos:start="428:50" pos:end="428:57"><expr pos:start="428:50" pos:end="428:57"><operator pos:start="428:50" pos:end="428:50">&amp;</operator><name pos:start="428:51" pos:end="428:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="429:5" pos:end="429:34"><expr pos:start="429:5" pos:end="429:33"><call pos:start="429:5" pos:end="429:33"><name pos:start="429:5" pos:end="429:13">CU_ASSERT</name><argument_list pos:start="429:14" pos:end="429:33">(<argument pos:start="429:15" pos:end="429:32"><expr pos:start="429:15" pos:end="429:32"><name pos:start="429:15" pos:end="429:16">rc</name> <operator pos:start="429:18" pos:end="429:19">==</operator> <name pos:start="429:21" pos:end="429:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="430:5" pos:end="430:45"><expr pos:start="430:5" pos:end="430:44"><call pos:start="430:5" pos:end="430:44"><name pos:start="430:5" pos:end="430:13">CU_ASSERT</name><argument_list pos:start="430:14" pos:end="430:44">(<argument pos:start="430:15" pos:end="430:43"><expr pos:start="430:15" pos:end="430:43"><name pos:start="430:15" pos:end="430:21">csr_len</name> <operator pos:start="430:23" pos:end="430:24">==</operator> <call pos:start="430:26" pos:end="430:43"><name pos:start="430:26" pos:end="430:31">strlen</name><argument_list pos:start="430:32" pos:end="430:43">(<argument pos:start="430:33" pos:end="430:42"><expr pos:start="430:33" pos:end="430:42"><name pos:start="430:33" pos:end="430:42">TEST_ATTR3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="431:5" pos:end="431:74"><expr pos:start="431:5" pos:end="431:73"><call pos:start="431:5" pos:end="431:73"><name pos:start="431:5" pos:end="431:13">CU_ASSERT</name><argument_list pos:start="431:14" pos:end="431:73">(<argument pos:start="431:15" pos:end="431:72"><expr pos:start="431:15" pos:end="431:72"><call pos:start="431:15" pos:end="431:67"><name pos:start="431:15" pos:end="431:21">strncmp</name><argument_list pos:start="431:22" pos:end="431:67">(<argument pos:start="431:23" pos:end="431:32"><expr pos:start="431:23" pos:end="431:32"><name pos:start="431:23" pos:end="431:32">TEST_ATTR3</name></expr></argument>, <argument pos:start="431:35" pos:end="431:57"><expr pos:start="431:35" pos:end="431:57"><operator pos:start="431:35" pos:end="431:35">(</operator><specifier pos:start="431:36" pos:end="431:40">const</specifier> <name pos:start="431:42" pos:end="431:45">char</name> <operator pos:start="431:47" pos:end="431:47">*</operator><operator pos:start="431:48" pos:end="431:48">)</operator> <name pos:start="431:50" pos:end="431:57">csr_data</name></expr></argument>, <argument pos:start="431:60" pos:end="431:66"><expr pos:start="431:60" pos:end="431:66"><name pos:start="431:60" pos:end="431:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="431:69" pos:end="431:70">==</operator> <literal type="number" pos:start="431:72" pos:end="431:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="433:5" pos:end="433:24">/* clear csrattrs */</comment>
    <expr_stmt pos:start="434:5" pos:end="434:49"><expr pos:start="434:5" pos:end="434:48"><name pos:start="434:5" pos:end="434:6">rc</name> <operator pos:start="434:8" pos:end="434:8">=</operator> <call pos:start="434:10" pos:end="434:48"><name pos:start="434:10" pos:end="434:33">est_server_init_csrattrs</name><argument_list pos:start="434:34" pos:end="434:48">(<argument pos:start="434:35" pos:end="434:38"><expr pos:start="434:35" pos:end="434:38"><name pos:start="434:35" pos:end="434:38">ectx</name></expr></argument>, <argument pos:start="434:41" pos:end="434:44"><expr pos:start="434:41" pos:end="434:44"><name pos:start="434:41" pos:end="434:44">NULL</name></expr></argument>, <argument pos:start="434:47" pos:end="434:47"><expr pos:start="434:47" pos:end="434:47"><literal type="number" pos:start="434:47" pos:end="434:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="435:5" pos:end="435:34"><expr pos:start="435:5" pos:end="435:33"><call pos:start="435:5" pos:end="435:33"><name pos:start="435:5" pos:end="435:13">CU_ASSERT</name><argument_list pos:start="435:14" pos:end="435:33">(<argument pos:start="435:15" pos:end="435:32"><expr pos:start="435:15" pos:end="435:32"><name pos:start="435:15" pos:end="435:16">rc</name> <operator pos:start="435:18" pos:end="435:19">==</operator> <name pos:start="435:21" pos:end="435:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="436:5" pos:end="436:59"><expr pos:start="436:5" pos:end="436:58"><name pos:start="436:5" pos:end="436:6">rc</name> <operator pos:start="436:8" pos:end="436:8">=</operator> <call pos:start="436:10" pos:end="436:58"><name pos:start="436:10" pos:end="436:32">est_client_get_csrattrs</name><argument_list pos:start="436:33" pos:end="436:58">(<argument pos:start="436:34" pos:end="436:36"><expr pos:start="436:34" pos:end="436:36"><name pos:start="436:34" pos:end="436:36">ctx</name></expr></argument>, <argument pos:start="436:39" pos:end="436:47"><expr pos:start="436:39" pos:end="436:47"><operator pos:start="436:39" pos:end="436:39">&amp;</operator><name pos:start="436:40" pos:end="436:47">csr_data</name></expr></argument>, <argument pos:start="436:50" pos:end="436:57"><expr pos:start="436:50" pos:end="436:57"><operator pos:start="436:50" pos:end="436:50">&amp;</operator><name pos:start="436:51" pos:end="436:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="437:5" pos:end="437:34"><expr pos:start="437:5" pos:end="437:33"><call pos:start="437:5" pos:end="437:33"><name pos:start="437:5" pos:end="437:13">CU_ASSERT</name><argument_list pos:start="437:14" pos:end="437:33">(<argument pos:start="437:15" pos:end="437:32"><expr pos:start="437:15" pos:end="437:32"><name pos:start="437:15" pos:end="437:16">rc</name> <operator pos:start="437:18" pos:end="437:19">==</operator> <name pos:start="437:21" pos:end="437:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="438:5" pos:end="438:28"><expr pos:start="438:5" pos:end="438:27"><call pos:start="438:5" pos:end="438:27"><name pos:start="438:5" pos:end="438:13">CU_ASSERT</name><argument_list pos:start="438:14" pos:end="438:27">(<argument pos:start="438:15" pos:end="438:26"><expr pos:start="438:15" pos:end="438:26"><name pos:start="438:15" pos:end="438:21">csr_len</name> <operator pos:start="438:23" pos:end="438:24">==</operator> <literal type="number" pos:start="438:26" pos:end="438:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="440:5" pos:end="443:33"><expr pos:start="440:5" pos:end="443:32"><name pos:start="440:5" pos:end="440:6">rc</name> <operator pos:start="440:8" pos:end="440:8">=</operator> <call pos:start="440:10" pos:end="443:32"><name pos:start="440:10" pos:end="440:33">est_server_init_csrattrs</name><argument_list pos:start="440:34" pos:end="443:32">(
        <argument pos:start="441:9" pos:end="441:12"><expr pos:start="441:9" pos:end="441:12"><name pos:start="441:9" pos:end="441:12">ectx</name></expr></argument>,
        <argument pos:start="442:9" pos:end="442:23"><expr pos:start="442:9" pos:end="442:23"><name pos:start="442:9" pos:end="442:23">TEST_1024_NOPOP</name></expr></argument>,
        <argument pos:start="443:9" pos:end="443:31"><expr pos:start="443:9" pos:end="443:31"><call pos:start="443:9" pos:end="443:31"><name pos:start="443:9" pos:end="443:14">strlen</name><argument_list pos:start="443:15" pos:end="443:31">(<argument pos:start="443:16" pos:end="443:30"><expr pos:start="443:16" pos:end="443:30"><name pos:start="443:16" pos:end="443:30">TEST_1024_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="444:5" pos:end="444:34"><expr pos:start="444:5" pos:end="444:33"><call pos:start="444:5" pos:end="444:33"><name pos:start="444:5" pos:end="444:13">CU_ASSERT</name><argument_list pos:start="444:14" pos:end="444:33">(<argument pos:start="444:15" pos:end="444:32"><expr pos:start="444:15" pos:end="444:32"><name pos:start="444:15" pos:end="444:16">rc</name> <operator pos:start="444:18" pos:end="444:19">==</operator> <name pos:start="444:21" pos:end="444:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="445:5" pos:end="445:59"><expr pos:start="445:5" pos:end="445:58"><name pos:start="445:5" pos:end="445:6">rc</name> <operator pos:start="445:8" pos:end="445:8">=</operator> <call pos:start="445:10" pos:end="445:58"><name pos:start="445:10" pos:end="445:32">est_client_get_csrattrs</name><argument_list pos:start="445:33" pos:end="445:58">(<argument pos:start="445:34" pos:end="445:36"><expr pos:start="445:34" pos:end="445:36"><name pos:start="445:34" pos:end="445:36">ctx</name></expr></argument>, <argument pos:start="445:39" pos:end="445:47"><expr pos:start="445:39" pos:end="445:47"><operator pos:start="445:39" pos:end="445:39">&amp;</operator><name pos:start="445:40" pos:end="445:47">csr_data</name></expr></argument>, <argument pos:start="445:50" pos:end="445:57"><expr pos:start="445:50" pos:end="445:57"><operator pos:start="445:50" pos:end="445:50">&amp;</operator><name pos:start="445:51" pos:end="445:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="446:5" pos:end="446:34"><expr pos:start="446:5" pos:end="446:33"><call pos:start="446:5" pos:end="446:33"><name pos:start="446:5" pos:end="446:13">CU_ASSERT</name><argument_list pos:start="446:14" pos:end="446:33">(<argument pos:start="446:15" pos:end="446:32"><expr pos:start="446:15" pos:end="446:32"><name pos:start="446:15" pos:end="446:16">rc</name> <operator pos:start="446:18" pos:end="446:19">==</operator> <name pos:start="446:21" pos:end="446:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="447:5" pos:end="447:50"><expr pos:start="447:5" pos:end="447:49"><call pos:start="447:5" pos:end="447:49"><name pos:start="447:5" pos:end="447:13">CU_ASSERT</name><argument_list pos:start="447:14" pos:end="447:49">(<argument pos:start="447:15" pos:end="447:48"><expr pos:start="447:15" pos:end="447:48"><name pos:start="447:15" pos:end="447:21">csr_len</name> <operator pos:start="447:23" pos:end="447:24">==</operator> <call pos:start="447:26" pos:end="447:48"><name pos:start="447:26" pos:end="447:31">strlen</name><argument_list pos:start="447:32" pos:end="447:48">(<argument pos:start="447:33" pos:end="447:47"><expr pos:start="447:33" pos:end="447:47"><name pos:start="447:33" pos:end="447:47">TEST_1024_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="448:5" pos:end="448:79"><expr pos:start="448:5" pos:end="448:78"><call pos:start="448:5" pos:end="448:78"><name pos:start="448:5" pos:end="448:13">CU_ASSERT</name><argument_list pos:start="448:14" pos:end="448:78">(<argument pos:start="448:15" pos:end="448:77"><expr pos:start="448:15" pos:end="448:77"><call pos:start="448:15" pos:end="448:72"><name pos:start="448:15" pos:end="448:21">strncmp</name><argument_list pos:start="448:22" pos:end="448:72">(<argument pos:start="448:23" pos:end="448:37"><expr pos:start="448:23" pos:end="448:37"><name pos:start="448:23" pos:end="448:37">TEST_1024_NOPOP</name></expr></argument>, <argument pos:start="448:40" pos:end="448:62"><expr pos:start="448:40" pos:end="448:62"><operator pos:start="448:40" pos:end="448:40">(</operator><specifier pos:start="448:41" pos:end="448:45">const</specifier> <name pos:start="448:47" pos:end="448:50">char</name> <operator pos:start="448:52" pos:end="448:52">*</operator><operator pos:start="448:53" pos:end="448:53">)</operator> <name pos:start="448:55" pos:end="448:62">csr_data</name></expr></argument>, <argument pos:start="448:65" pos:end="448:71"><expr pos:start="448:65" pos:end="448:71"><name pos:start="448:65" pos:end="448:71">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="448:74" pos:end="448:75">==</operator> <literal type="number" pos:start="448:77" pos:end="448:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="450:5" pos:end="450:54">/* Enable PoP and test responses with PoP added */</comment>
    <expr_stmt pos:start="451:5" pos:end="451:20"><expr pos:start="451:5" pos:end="451:19"><call pos:start="451:5" pos:end="451:19"><name pos:start="451:5" pos:end="451:17">st_enable_pop</name><argument_list pos:start="451:18" pos:end="451:19">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="453:5" pos:end="453:78"><expr pos:start="453:5" pos:end="453:77"><name pos:start="453:5" pos:end="453:6">rc</name> <operator pos:start="453:8" pos:end="453:8">=</operator> <call pos:start="453:10" pos:end="453:77"><name pos:start="453:10" pos:end="453:33">est_server_init_csrattrs</name><argument_list pos:start="453:34" pos:end="453:77">(<argument pos:start="453:35" pos:end="453:38"><expr pos:start="453:35" pos:end="453:38"><name pos:start="453:35" pos:end="453:38">ectx</name></expr></argument>, <argument pos:start="453:41" pos:end="453:53"><expr pos:start="453:41" pos:end="453:53"><name pos:start="453:41" pos:end="453:53">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="453:56" pos:end="453:76"><expr pos:start="453:56" pos:end="453:76"><call pos:start="453:56" pos:end="453:76"><name pos:start="453:56" pos:end="453:61">strlen</name><argument_list pos:start="453:62" pos:end="453:76">(<argument pos:start="453:63" pos:end="453:75"><expr pos:start="453:63" pos:end="453:75"><name pos:start="453:63" pos:end="453:75">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="454:5" pos:end="454:34"><expr pos:start="454:5" pos:end="454:33"><call pos:start="454:5" pos:end="454:33"><name pos:start="454:5" pos:end="454:13">CU_ASSERT</name><argument_list pos:start="454:14" pos:end="454:33">(<argument pos:start="454:15" pos:end="454:32"><expr pos:start="454:15" pos:end="454:32"><name pos:start="454:15" pos:end="454:16">rc</name> <operator pos:start="454:18" pos:end="454:19">==</operator> <name pos:start="454:21" pos:end="454:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="455:5" pos:end="455:59"><expr pos:start="455:5" pos:end="455:58"><name pos:start="455:5" pos:end="455:6">rc</name> <operator pos:start="455:8" pos:end="455:8">=</operator> <call pos:start="455:10" pos:end="455:58"><name pos:start="455:10" pos:end="455:32">est_client_get_csrattrs</name><argument_list pos:start="455:33" pos:end="455:58">(<argument pos:start="455:34" pos:end="455:36"><expr pos:start="455:34" pos:end="455:36"><name pos:start="455:34" pos:end="455:36">ctx</name></expr></argument>, <argument pos:start="455:39" pos:end="455:47"><expr pos:start="455:39" pos:end="455:47"><operator pos:start="455:39" pos:end="455:39">&amp;</operator><name pos:start="455:40" pos:end="455:47">csr_data</name></expr></argument>, <argument pos:start="455:50" pos:end="455:57"><expr pos:start="455:50" pos:end="455:57"><operator pos:start="455:50" pos:end="455:50">&amp;</operator><name pos:start="455:51" pos:end="455:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="456:5" pos:end="456:34"><expr pos:start="456:5" pos:end="456:33"><call pos:start="456:5" pos:end="456:33"><name pos:start="456:5" pos:end="456:13">CU_ASSERT</name><argument_list pos:start="456:14" pos:end="456:33">(<argument pos:start="456:15" pos:end="456:32"><expr pos:start="456:15" pos:end="456:32"><name pos:start="456:15" pos:end="456:16">rc</name> <operator pos:start="456:18" pos:end="456:19">==</operator> <name pos:start="456:21" pos:end="456:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="457:5" pos:end="457:32"><expr pos:start="457:5" pos:end="457:31"><call pos:start="457:5" pos:end="457:31"><name pos:start="457:5" pos:end="457:13">CU_ASSERT</name><argument_list pos:start="457:14" pos:end="457:31">(<argument pos:start="457:15" pos:end="457:30"><expr pos:start="457:15" pos:end="457:30"><name pos:start="457:15" pos:end="457:22">csr_data</name> <operator pos:start="457:24" pos:end="457:25">!=</operator> <name pos:start="457:27" pos:end="457:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="458:5" pos:end="458:28"><expr pos:start="458:5" pos:end="458:27"><call pos:start="458:5" pos:end="458:27"><name pos:start="458:5" pos:end="458:13">CU_ASSERT</name><argument_list pos:start="458:14" pos:end="458:27">(<argument pos:start="458:15" pos:end="458:26"><expr pos:start="458:15" pos:end="458:26"><name pos:start="458:15" pos:end="458:21">csr_len</name> <operator pos:start="458:23" pos:end="458:23">=</operator> <literal type="number" pos:start="458:25" pos:end="458:26">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="459:5" pos:end="459:77"><expr pos:start="459:5" pos:end="459:76"><call pos:start="459:5" pos:end="459:76"><name pos:start="459:5" pos:end="459:13">CU_ASSERT</name><argument_list pos:start="459:14" pos:end="459:76">(<argument pos:start="459:15" pos:end="459:75"><expr pos:start="459:15" pos:end="459:75"><call pos:start="459:15" pos:end="459:70"><name pos:start="459:15" pos:end="459:21">strncmp</name><argument_list pos:start="459:22" pos:end="459:70">(<argument pos:start="459:23" pos:end="459:35"><expr pos:start="459:23" pos:end="459:35"><name pos:start="459:23" pos:end="459:35">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="459:38" pos:end="459:60"><expr pos:start="459:38" pos:end="459:60"><operator pos:start="459:38" pos:end="459:38">(</operator><specifier pos:start="459:39" pos:end="459:43">const</specifier> <name pos:start="459:45" pos:end="459:48">char</name> <operator pos:start="459:50" pos:end="459:50">*</operator><operator pos:start="459:51" pos:end="459:51">)</operator> <name pos:start="459:53" pos:end="459:60">csr_data</name></expr></argument>, <argument pos:start="459:63" pos:end="459:69"><expr pos:start="459:63" pos:end="459:69"><name pos:start="459:63" pos:end="459:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="459:72" pos:end="459:73">==</operator> <literal type="number" pos:start="459:75" pos:end="459:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="461:5" pos:end="464:33"><expr pos:start="461:5" pos:end="464:32"><name pos:start="461:5" pos:end="461:6">rc</name> <operator pos:start="461:8" pos:end="461:8">=</operator> <call pos:start="461:10" pos:end="464:32"><name pos:start="461:10" pos:end="461:33">est_server_init_csrattrs</name><argument_list pos:start="461:34" pos:end="464:32">(
        <argument pos:start="462:9" pos:end="462:12"><expr pos:start="462:9" pos:end="462:12"><name pos:start="462:9" pos:end="462:12">ectx</name></expr></argument>,
        <argument pos:start="463:9" pos:end="463:23"><expr pos:start="463:9" pos:end="463:23"><name pos:start="463:9" pos:end="463:23">TEST_1024_NOPOP</name></expr></argument>,
        <argument pos:start="464:9" pos:end="464:31"><expr pos:start="464:9" pos:end="464:31"><call pos:start="464:9" pos:end="464:31"><name pos:start="464:9" pos:end="464:14">strlen</name><argument_list pos:start="464:15" pos:end="464:31">(<argument pos:start="464:16" pos:end="464:30"><expr pos:start="464:16" pos:end="464:30"><name pos:start="464:16" pos:end="464:30">TEST_1024_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="465:5" pos:end="465:34"><expr pos:start="465:5" pos:end="465:33"><call pos:start="465:5" pos:end="465:33"><name pos:start="465:5" pos:end="465:13">CU_ASSERT</name><argument_list pos:start="465:14" pos:end="465:33">(<argument pos:start="465:15" pos:end="465:32"><expr pos:start="465:15" pos:end="465:32"><name pos:start="465:15" pos:end="465:16">rc</name> <operator pos:start="465:18" pos:end="465:19">==</operator> <name pos:start="465:21" pos:end="465:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="466:5" pos:end="466:59"><expr pos:start="466:5" pos:end="466:58"><name pos:start="466:5" pos:end="466:6">rc</name> <operator pos:start="466:8" pos:end="466:8">=</operator> <call pos:start="466:10" pos:end="466:58"><name pos:start="466:10" pos:end="466:32">est_client_get_csrattrs</name><argument_list pos:start="466:33" pos:end="466:58">(<argument pos:start="466:34" pos:end="466:36"><expr pos:start="466:34" pos:end="466:36"><name pos:start="466:34" pos:end="466:36">ctx</name></expr></argument>, <argument pos:start="466:39" pos:end="466:47"><expr pos:start="466:39" pos:end="466:47"><operator pos:start="466:39" pos:end="466:39">&amp;</operator><name pos:start="466:40" pos:end="466:47">csr_data</name></expr></argument>, <argument pos:start="466:50" pos:end="466:57"><expr pos:start="466:50" pos:end="466:57"><operator pos:start="466:50" pos:end="466:50">&amp;</operator><name pos:start="466:51" pos:end="466:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="467:5" pos:end="467:34"><expr pos:start="467:5" pos:end="467:33"><call pos:start="467:5" pos:end="467:33"><name pos:start="467:5" pos:end="467:13">CU_ASSERT</name><argument_list pos:start="467:14" pos:end="467:33">(<argument pos:start="467:15" pos:end="467:32"><expr pos:start="467:15" pos:end="467:32"><name pos:start="467:15" pos:end="467:16">rc</name> <operator pos:start="467:18" pos:end="467:19">==</operator> <name pos:start="467:21" pos:end="467:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="468:5" pos:end="468:48"><expr pos:start="468:5" pos:end="468:47"><call pos:start="468:5" pos:end="468:47"><name pos:start="468:5" pos:end="468:13">CU_ASSERT</name><argument_list pos:start="468:14" pos:end="468:47">(<argument pos:start="468:15" pos:end="468:46"><expr pos:start="468:15" pos:end="468:46"><name pos:start="468:15" pos:end="468:21">csr_len</name> <operator pos:start="468:23" pos:end="468:24">==</operator> <call pos:start="468:26" pos:end="468:46"><name pos:start="468:26" pos:end="468:31">strlen</name><argument_list pos:start="468:32" pos:end="468:46">(<argument pos:start="468:33" pos:end="468:45"><expr pos:start="468:33" pos:end="468:45"><name pos:start="468:33" pos:end="468:45">TEST_1024_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="469:5" pos:end="469:77"><expr pos:start="469:5" pos:end="469:76"><call pos:start="469:5" pos:end="469:76"><name pos:start="469:5" pos:end="469:13">CU_ASSERT</name><argument_list pos:start="469:14" pos:end="469:76">(<argument pos:start="469:15" pos:end="469:75"><expr pos:start="469:15" pos:end="469:75"><call pos:start="469:15" pos:end="469:70"><name pos:start="469:15" pos:end="469:21">strncmp</name><argument_list pos:start="469:22" pos:end="469:70">(<argument pos:start="469:23" pos:end="469:35"><expr pos:start="469:23" pos:end="469:35"><name pos:start="469:23" pos:end="469:35">TEST_1024_POP</name></expr></argument>, <argument pos:start="469:38" pos:end="469:60"><expr pos:start="469:38" pos:end="469:60"><operator pos:start="469:38" pos:end="469:38">(</operator><specifier pos:start="469:39" pos:end="469:43">const</specifier> <name pos:start="469:45" pos:end="469:48">char</name> <operator pos:start="469:50" pos:end="469:50">*</operator><operator pos:start="469:51" pos:end="469:51">)</operator> <name pos:start="469:53" pos:end="469:60">csr_data</name></expr></argument>, <argument pos:start="469:63" pos:end="469:69"><expr pos:start="469:63" pos:end="469:69"><name pos:start="469:63" pos:end="469:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="469:72" pos:end="469:73">==</operator> <literal type="number" pos:start="469:75" pos:end="469:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="471:5" pos:end="471:30">/* Setting the size 122 */</comment>
    <expr_stmt pos:start="472:5" pos:end="472:80"><expr pos:start="472:5" pos:end="472:79"><name pos:start="472:5" pos:end="472:6">rc</name> <operator pos:start="472:8" pos:end="472:8">=</operator> <call pos:start="472:10" pos:end="472:79"><name pos:start="472:10" pos:end="472:33">est_server_init_csrattrs</name><argument_list pos:start="472:34" pos:end="472:79">(<argument pos:start="472:35" pos:end="472:38"><expr pos:start="472:35" pos:end="472:38"><name pos:start="472:35" pos:end="472:38">ectx</name></expr></argument>, <argument pos:start="472:41" pos:end="472:54"><expr pos:start="472:41" pos:end="472:54"><name pos:start="472:41" pos:end="472:54">TEST_ATTR4_122</name></expr></argument>, <argument pos:start="472:57" pos:end="472:78"><expr pos:start="472:57" pos:end="472:78"><call pos:start="472:57" pos:end="472:78"><name pos:start="472:57" pos:end="472:62">strlen</name><argument_list pos:start="472:63" pos:end="472:78">(<argument pos:start="472:64" pos:end="472:77"><expr pos:start="472:64" pos:end="472:77"><name pos:start="472:64" pos:end="472:77">TEST_ATTR4_122</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="473:5" pos:end="473:34"><expr pos:start="473:5" pos:end="473:33"><call pos:start="473:5" pos:end="473:33"><name pos:start="473:5" pos:end="473:13">CU_ASSERT</name><argument_list pos:start="473:14" pos:end="473:33">(<argument pos:start="473:15" pos:end="473:32"><expr pos:start="473:15" pos:end="473:32"><name pos:start="473:15" pos:end="473:16">rc</name> <operator pos:start="473:18" pos:end="473:19">==</operator> <name pos:start="473:21" pos:end="473:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="474:5" pos:end="474:59"><expr pos:start="474:5" pos:end="474:58"><name pos:start="474:5" pos:end="474:6">rc</name> <operator pos:start="474:8" pos:end="474:8">=</operator> <call pos:start="474:10" pos:end="474:58"><name pos:start="474:10" pos:end="474:32">est_client_get_csrattrs</name><argument_list pos:start="474:33" pos:end="474:58">(<argument pos:start="474:34" pos:end="474:36"><expr pos:start="474:34" pos:end="474:36"><name pos:start="474:34" pos:end="474:36">ctx</name></expr></argument>, <argument pos:start="474:39" pos:end="474:47"><expr pos:start="474:39" pos:end="474:47"><operator pos:start="474:39" pos:end="474:39">&amp;</operator><name pos:start="474:40" pos:end="474:47">csr_data</name></expr></argument>, <argument pos:start="474:50" pos:end="474:57"><expr pos:start="474:50" pos:end="474:57"><operator pos:start="474:50" pos:end="474:50">&amp;</operator><name pos:start="474:51" pos:end="474:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="475:5" pos:end="475:34"><expr pos:start="475:5" pos:end="475:33"><call pos:start="475:5" pos:end="475:33"><name pos:start="475:5" pos:end="475:13">CU_ASSERT</name><argument_list pos:start="475:14" pos:end="475:33">(<argument pos:start="475:15" pos:end="475:32"><expr pos:start="475:15" pos:end="475:32"><name pos:start="475:15" pos:end="475:16">rc</name> <operator pos:start="475:18" pos:end="475:19">==</operator> <name pos:start="475:21" pos:end="475:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="476:5" pos:end="476:52"><expr pos:start="476:5" pos:end="476:51"><call pos:start="476:5" pos:end="476:51"><name pos:start="476:5" pos:end="476:13">CU_ASSERT</name><argument_list pos:start="476:14" pos:end="476:51">(<argument pos:start="476:15" pos:end="476:50"><expr pos:start="476:15" pos:end="476:50"><name pos:start="476:15" pos:end="476:21">csr_len</name> <operator pos:start="476:23" pos:end="476:24">==</operator> <call pos:start="476:26" pos:end="476:50"><name pos:start="476:26" pos:end="476:31">strlen</name><argument_list pos:start="476:32" pos:end="476:50">(<argument pos:start="476:33" pos:end="476:49"><expr pos:start="476:33" pos:end="476:49"><name pos:start="476:33" pos:end="476:49">TEST_ATTR4_122POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="477:5" pos:end="478:75"><expr pos:start="477:5" pos:end="478:74"><call pos:start="477:5" pos:end="478:74"><name pos:start="477:5" pos:end="477:13">CU_ASSERT</name><argument_list pos:start="477:14" pos:end="478:74">(
        <argument pos:start="478:9" pos:end="478:73"><expr pos:start="478:9" pos:end="478:73"><call pos:start="478:9" pos:end="478:68"><name pos:start="478:9" pos:end="478:15">strncmp</name><argument_list pos:start="478:16" pos:end="478:68">(<argument pos:start="478:17" pos:end="478:33"><expr pos:start="478:17" pos:end="478:33"><name pos:start="478:17" pos:end="478:33">TEST_ATTR4_122POP</name></expr></argument>, <argument pos:start="478:36" pos:end="478:58"><expr pos:start="478:36" pos:end="478:58"><operator pos:start="478:36" pos:end="478:36">(</operator><specifier pos:start="478:37" pos:end="478:41">const</specifier> <name pos:start="478:43" pos:end="478:46">char</name> <operator pos:start="478:48" pos:end="478:48">*</operator><operator pos:start="478:49" pos:end="478:49">)</operator> <name pos:start="478:51" pos:end="478:58">csr_data</name></expr></argument>, <argument pos:start="478:61" pos:end="478:67"><expr pos:start="478:61" pos:end="478:67"><name pos:start="478:61" pos:end="478:67">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="478:70" pos:end="478:71">==</operator> <literal type="number" pos:start="478:73" pos:end="478:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="480:5" pos:end="480:30">/* Setting the size 117 */</comment>
    <expr_stmt pos:start="481:5" pos:end="481:80"><expr pos:start="481:5" pos:end="481:79"><name pos:start="481:5" pos:end="481:6">rc</name> <operator pos:start="481:8" pos:end="481:8">=</operator> <call pos:start="481:10" pos:end="481:79"><name pos:start="481:10" pos:end="481:33">est_server_init_csrattrs</name><argument_list pos:start="481:34" pos:end="481:79">(<argument pos:start="481:35" pos:end="481:38"><expr pos:start="481:35" pos:end="481:38"><name pos:start="481:35" pos:end="481:38">ectx</name></expr></argument>, <argument pos:start="481:41" pos:end="481:54"><expr pos:start="481:41" pos:end="481:54"><name pos:start="481:41" pos:end="481:54">TEST_ATTR5_117</name></expr></argument>, <argument pos:start="481:57" pos:end="481:78"><expr pos:start="481:57" pos:end="481:78"><call pos:start="481:57" pos:end="481:78"><name pos:start="481:57" pos:end="481:62">strlen</name><argument_list pos:start="481:63" pos:end="481:78">(<argument pos:start="481:64" pos:end="481:77"><expr pos:start="481:64" pos:end="481:77"><name pos:start="481:64" pos:end="481:77">TEST_ATTR5_117</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="482:5" pos:end="482:34"><expr pos:start="482:5" pos:end="482:33"><call pos:start="482:5" pos:end="482:33"><name pos:start="482:5" pos:end="482:13">CU_ASSERT</name><argument_list pos:start="482:14" pos:end="482:33">(<argument pos:start="482:15" pos:end="482:32"><expr pos:start="482:15" pos:end="482:32"><name pos:start="482:15" pos:end="482:16">rc</name> <operator pos:start="482:18" pos:end="482:19">==</operator> <name pos:start="482:21" pos:end="482:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="483:5" pos:end="483:59"><expr pos:start="483:5" pos:end="483:58"><name pos:start="483:5" pos:end="483:6">rc</name> <operator pos:start="483:8" pos:end="483:8">=</operator> <call pos:start="483:10" pos:end="483:58"><name pos:start="483:10" pos:end="483:32">est_client_get_csrattrs</name><argument_list pos:start="483:33" pos:end="483:58">(<argument pos:start="483:34" pos:end="483:36"><expr pos:start="483:34" pos:end="483:36"><name pos:start="483:34" pos:end="483:36">ctx</name></expr></argument>, <argument pos:start="483:39" pos:end="483:47"><expr pos:start="483:39" pos:end="483:47"><operator pos:start="483:39" pos:end="483:39">&amp;</operator><name pos:start="483:40" pos:end="483:47">csr_data</name></expr></argument>, <argument pos:start="483:50" pos:end="483:57"><expr pos:start="483:50" pos:end="483:57"><operator pos:start="483:50" pos:end="483:50">&amp;</operator><name pos:start="483:51" pos:end="483:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="484:5" pos:end="484:34"><expr pos:start="484:5" pos:end="484:33"><call pos:start="484:5" pos:end="484:33"><name pos:start="484:5" pos:end="484:13">CU_ASSERT</name><argument_list pos:start="484:14" pos:end="484:33">(<argument pos:start="484:15" pos:end="484:32"><expr pos:start="484:15" pos:end="484:32"><name pos:start="484:15" pos:end="484:16">rc</name> <operator pos:start="484:18" pos:end="484:19">==</operator> <name pos:start="484:21" pos:end="484:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="485:5" pos:end="485:52"><expr pos:start="485:5" pos:end="485:51"><call pos:start="485:5" pos:end="485:51"><name pos:start="485:5" pos:end="485:13">CU_ASSERT</name><argument_list pos:start="485:14" pos:end="485:51">(<argument pos:start="485:15" pos:end="485:50"><expr pos:start="485:15" pos:end="485:50"><name pos:start="485:15" pos:end="485:21">csr_len</name> <operator pos:start="485:23" pos:end="485:24">==</operator> <call pos:start="485:26" pos:end="485:50"><name pos:start="485:26" pos:end="485:31">strlen</name><argument_list pos:start="485:32" pos:end="485:50">(<argument pos:start="485:33" pos:end="485:49"><expr pos:start="485:33" pos:end="485:49"><name pos:start="485:33" pos:end="485:49">TEST_ATTR5_117POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="486:5" pos:end="487:75"><expr pos:start="486:5" pos:end="487:74"><call pos:start="486:5" pos:end="487:74"><name pos:start="486:5" pos:end="486:13">CU_ASSERT</name><argument_list pos:start="486:14" pos:end="487:74">(
        <argument pos:start="487:9" pos:end="487:73"><expr pos:start="487:9" pos:end="487:73"><call pos:start="487:9" pos:end="487:68"><name pos:start="487:9" pos:end="487:15">strncmp</name><argument_list pos:start="487:16" pos:end="487:68">(<argument pos:start="487:17" pos:end="487:33"><expr pos:start="487:17" pos:end="487:33"><name pos:start="487:17" pos:end="487:33">TEST_ATTR5_117POP</name></expr></argument>, <argument pos:start="487:36" pos:end="487:58"><expr pos:start="487:36" pos:end="487:58"><operator pos:start="487:36" pos:end="487:36">(</operator><specifier pos:start="487:37" pos:end="487:41">const</specifier> <name pos:start="487:43" pos:end="487:46">char</name> <operator pos:start="487:48" pos:end="487:48">*</operator><operator pos:start="487:49" pos:end="487:49">)</operator> <name pos:start="487:51" pos:end="487:58">csr_data</name></expr></argument>, <argument pos:start="487:61" pos:end="487:67"><expr pos:start="487:61" pos:end="487:67"><name pos:start="487:61" pos:end="487:67">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="487:70" pos:end="487:71">==</operator> <literal type="number" pos:start="487:73" pos:end="487:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="489:5" pos:end="489:58">/* Real base64 string needs PoP added - should pass */</comment>
    <expr_stmt pos:start="490:5" pos:end="493:33"><expr pos:start="490:5" pos:end="493:32"><name pos:start="490:5" pos:end="490:6">rc</name> <operator pos:start="490:8" pos:end="490:8">=</operator> <call pos:start="490:10" pos:end="493:32"><name pos:start="490:10" pos:end="490:33">est_server_init_csrattrs</name><argument_list pos:start="490:34" pos:end="493:32">(
        <argument pos:start="491:9" pos:end="491:12"><expr pos:start="491:9" pos:end="491:12"><name pos:start="491:9" pos:end="491:12">ectx</name></expr></argument>,
        <argument pos:start="492:9" pos:end="492:23"><expr pos:start="492:9" pos:end="492:23"><name pos:start="492:9" pos:end="492:23">TEST_ATTR_NOPOP</name></expr></argument>,
        <argument pos:start="493:9" pos:end="493:31"><expr pos:start="493:9" pos:end="493:31"><call pos:start="493:9" pos:end="493:31"><name pos:start="493:9" pos:end="493:14">strlen</name><argument_list pos:start="493:15" pos:end="493:31">(<argument pos:start="493:16" pos:end="493:30"><expr pos:start="493:16" pos:end="493:30"><name pos:start="493:16" pos:end="493:30">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="494:5" pos:end="494:34"><expr pos:start="494:5" pos:end="494:33"><call pos:start="494:5" pos:end="494:33"><name pos:start="494:5" pos:end="494:13">CU_ASSERT</name><argument_list pos:start="494:14" pos:end="494:33">(<argument pos:start="494:15" pos:end="494:32"><expr pos:start="494:15" pos:end="494:32"><name pos:start="494:15" pos:end="494:16">rc</name> <operator pos:start="494:18" pos:end="494:19">==</operator> <name pos:start="494:21" pos:end="494:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="495:5" pos:end="495:59"><expr pos:start="495:5" pos:end="495:58"><name pos:start="495:5" pos:end="495:6">rc</name> <operator pos:start="495:8" pos:end="495:8">=</operator> <call pos:start="495:10" pos:end="495:58"><name pos:start="495:10" pos:end="495:32">est_client_get_csrattrs</name><argument_list pos:start="495:33" pos:end="495:58">(<argument pos:start="495:34" pos:end="495:36"><expr pos:start="495:34" pos:end="495:36"><name pos:start="495:34" pos:end="495:36">ctx</name></expr></argument>, <argument pos:start="495:39" pos:end="495:47"><expr pos:start="495:39" pos:end="495:47"><operator pos:start="495:39" pos:end="495:39">&amp;</operator><name pos:start="495:40" pos:end="495:47">csr_data</name></expr></argument>, <argument pos:start="495:50" pos:end="495:57"><expr pos:start="495:50" pos:end="495:57"><operator pos:start="495:50" pos:end="495:50">&amp;</operator><name pos:start="495:51" pos:end="495:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="496:5" pos:end="496:34"><expr pos:start="496:5" pos:end="496:33"><call pos:start="496:5" pos:end="496:33"><name pos:start="496:5" pos:end="496:13">CU_ASSERT</name><argument_list pos:start="496:14" pos:end="496:33">(<argument pos:start="496:15" pos:end="496:32"><expr pos:start="496:15" pos:end="496:32"><name pos:start="496:15" pos:end="496:16">rc</name> <operator pos:start="496:18" pos:end="496:19">==</operator> <name pos:start="496:21" pos:end="496:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="497:5" pos:end="497:53"><expr pos:start="497:5" pos:end="497:52"><call pos:start="497:5" pos:end="497:52"><name pos:start="497:5" pos:end="497:13">CU_ASSERT</name><argument_list pos:start="497:14" pos:end="497:52">(<argument pos:start="497:15" pos:end="497:51"><expr pos:start="497:15" pos:end="497:51"><name pos:start="497:15" pos:end="497:21">csr_len</name> <operator pos:start="497:23" pos:end="497:24">==</operator> <call pos:start="497:26" pos:end="497:51"><name pos:start="497:26" pos:end="497:31">strlen</name><argument_list pos:start="497:32" pos:end="497:51">(<argument pos:start="497:33" pos:end="497:50"><expr pos:start="497:33" pos:end="497:50"><name pos:start="497:33" pos:end="497:50">TEST_ATTR_NOPOPPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="498:5" pos:end="499:76"><expr pos:start="498:5" pos:end="499:75"><call pos:start="498:5" pos:end="499:75"><name pos:start="498:5" pos:end="498:13">CU_ASSERT</name><argument_list pos:start="498:14" pos:end="499:75">(
        <argument pos:start="499:9" pos:end="499:74"><expr pos:start="499:9" pos:end="499:74"><call pos:start="499:9" pos:end="499:69"><name pos:start="499:9" pos:end="499:15">strncmp</name><argument_list pos:start="499:16" pos:end="499:69">(<argument pos:start="499:17" pos:end="499:34"><expr pos:start="499:17" pos:end="499:34"><name pos:start="499:17" pos:end="499:34">TEST_ATTR_NOPOPPOP</name></expr></argument>, <argument pos:start="499:37" pos:end="499:59"><expr pos:start="499:37" pos:end="499:59"><operator pos:start="499:37" pos:end="499:37">(</operator><specifier pos:start="499:38" pos:end="499:42">const</specifier> <name pos:start="499:44" pos:end="499:47">char</name> <operator pos:start="499:49" pos:end="499:49">*</operator><operator pos:start="499:50" pos:end="499:50">)</operator> <name pos:start="499:52" pos:end="499:59">csr_data</name></expr></argument>, <argument pos:start="499:62" pos:end="499:68"><expr pos:start="499:62" pos:end="499:68"><name pos:start="499:62" pos:end="499:68">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="499:71" pos:end="499:72">==</operator> <literal type="number" pos:start="499:74" pos:end="499:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="501:5" pos:end="501:48">/* Not a real base64 string - should fail */</comment>
    <expr_stmt pos:start="502:5" pos:end="502:59"><expr pos:start="502:5" pos:end="502:58"><name pos:start="502:5" pos:end="502:6">rc</name> <operator pos:start="502:8" pos:end="502:8">=</operator> <call pos:start="502:10" pos:end="502:58"><name pos:start="502:10" pos:end="502:33">est_server_init_csrattrs</name><argument_list pos:start="502:34" pos:end="502:58">(<argument pos:start="502:35" pos:end="502:38"><expr pos:start="502:35" pos:end="502:38"><name pos:start="502:35" pos:end="502:38">ectx</name></expr></argument>, <argument pos:start="502:41" pos:end="502:53"><expr pos:start="502:41" pos:end="502:53"><literal type="string" pos:start="502:41" pos:end="502:53">"US900 test1"</literal></expr></argument>, <argument pos:start="502:56" pos:end="502:57"><expr pos:start="502:56" pos:end="502:57"><literal type="number" pos:start="502:56" pos:end="502:57">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="503:5" pos:end="503:34"><expr pos:start="503:5" pos:end="503:33"><call pos:start="503:5" pos:end="503:33"><name pos:start="503:5" pos:end="503:13">CU_ASSERT</name><argument_list pos:start="503:14" pos:end="503:33">(<argument pos:start="503:15" pos:end="503:32"><expr pos:start="503:15" pos:end="503:32"><name pos:start="503:15" pos:end="503:16">rc</name> <operator pos:start="503:18" pos:end="503:19">!=</operator> <name pos:start="503:21" pos:end="503:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="504:5" pos:end="504:59"><expr pos:start="504:5" pos:end="504:58"><name pos:start="504:5" pos:end="504:6">rc</name> <operator pos:start="504:8" pos:end="504:8">=</operator> <call pos:start="504:10" pos:end="504:58"><name pos:start="504:10" pos:end="504:32">est_client_get_csrattrs</name><argument_list pos:start="504:33" pos:end="504:58">(<argument pos:start="504:34" pos:end="504:36"><expr pos:start="504:34" pos:end="504:36"><name pos:start="504:34" pos:end="504:36">ctx</name></expr></argument>, <argument pos:start="504:39" pos:end="504:47"><expr pos:start="504:39" pos:end="504:47"><operator pos:start="504:39" pos:end="504:39">&amp;</operator><name pos:start="504:40" pos:end="504:47">csr_data</name></expr></argument>, <argument pos:start="504:50" pos:end="504:57"><expr pos:start="504:50" pos:end="504:57"><operator pos:start="504:50" pos:end="504:50">&amp;</operator><name pos:start="504:51" pos:end="504:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="505:5" pos:end="505:34"><expr pos:start="505:5" pos:end="505:33"><call pos:start="505:5" pos:end="505:33"><name pos:start="505:5" pos:end="505:13">CU_ASSERT</name><argument_list pos:start="505:14" pos:end="505:33">(<argument pos:start="505:15" pos:end="505:32"><expr pos:start="505:15" pos:end="505:32"><name pos:start="505:15" pos:end="505:16">rc</name> <operator pos:start="505:18" pos:end="505:19">==</operator> <name pos:start="505:21" pos:end="505:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="506:5" pos:end="506:48"><expr pos:start="506:5" pos:end="506:47"><call pos:start="506:5" pos:end="506:47"><name pos:start="506:5" pos:end="506:13">CU_ASSERT</name><argument_list pos:start="506:14" pos:end="506:47">(<argument pos:start="506:15" pos:end="506:46"><expr pos:start="506:15" pos:end="506:46"><name pos:start="506:15" pos:end="506:21">csr_len</name> <operator pos:start="506:23" pos:end="506:24">==</operator> <call pos:start="506:26" pos:end="506:46"><name pos:start="506:26" pos:end="506:31">strlen</name><argument_list pos:start="506:32" pos:end="506:46">(<argument pos:start="506:33" pos:end="506:45"><expr pos:start="506:33" pos:end="506:45"><name pos:start="506:33" pos:end="506:45">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="507:5" pos:end="507:77"><expr pos:start="507:5" pos:end="507:76"><call pos:start="507:5" pos:end="507:76"><name pos:start="507:5" pos:end="507:13">CU_ASSERT</name><argument_list pos:start="507:14" pos:end="507:76">(<argument pos:start="507:15" pos:end="507:75"><expr pos:start="507:15" pos:end="507:75"><call pos:start="507:15" pos:end="507:70"><name pos:start="507:15" pos:end="507:21">strncmp</name><argument_list pos:start="507:22" pos:end="507:70">(<argument pos:start="507:23" pos:end="507:35"><expr pos:start="507:23" pos:end="507:35"><name pos:start="507:23" pos:end="507:35">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="507:38" pos:end="507:60"><expr pos:start="507:38" pos:end="507:60"><operator pos:start="507:38" pos:end="507:38">(</operator><specifier pos:start="507:39" pos:end="507:43">const</specifier> <name pos:start="507:45" pos:end="507:48">char</name> <operator pos:start="507:50" pos:end="507:50">*</operator><operator pos:start="507:51" pos:end="507:51">)</operator> <name pos:start="507:53" pos:end="507:60">csr_data</name></expr></argument>, <argument pos:start="507:63" pos:end="507:69"><expr pos:start="507:63" pos:end="507:69"><name pos:start="507:63" pos:end="507:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="507:72" pos:end="507:73">==</operator> <literal type="number" pos:start="507:75" pos:end="507:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="509:5" pos:end="509:35">/* Setting the smallest size */</comment>
    <expr_stmt pos:start="510:5" pos:end="510:72"><expr pos:start="510:5" pos:end="510:71"><name pos:start="510:5" pos:end="510:6">rc</name> <operator pos:start="510:8" pos:end="510:8">=</operator> <call pos:start="510:10" pos:end="510:71"><name pos:start="510:10" pos:end="510:33">est_server_init_csrattrs</name><argument_list pos:start="510:34" pos:end="510:71">(<argument pos:start="510:35" pos:end="510:38"><expr pos:start="510:35" pos:end="510:38"><name pos:start="510:35" pos:end="510:38">ectx</name></expr></argument>, <argument pos:start="510:41" pos:end="510:50"><expr pos:start="510:41" pos:end="510:50"><name pos:start="510:41" pos:end="510:50">TEST_ATTR2</name></expr></argument>, <argument pos:start="510:53" pos:end="510:70"><expr pos:start="510:53" pos:end="510:70"><call pos:start="510:53" pos:end="510:70"><name pos:start="510:53" pos:end="510:58">strlen</name><argument_list pos:start="510:59" pos:end="510:70">(<argument pos:start="510:60" pos:end="510:69"><expr pos:start="510:60" pos:end="510:69"><name pos:start="510:60" pos:end="510:69">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="511:5" pos:end="511:34"><expr pos:start="511:5" pos:end="511:33"><call pos:start="511:5" pos:end="511:33"><name pos:start="511:5" pos:end="511:13">CU_ASSERT</name><argument_list pos:start="511:14" pos:end="511:33">(<argument pos:start="511:15" pos:end="511:32"><expr pos:start="511:15" pos:end="511:32"><name pos:start="511:15" pos:end="511:16">rc</name> <operator pos:start="511:18" pos:end="511:19">==</operator> <name pos:start="511:21" pos:end="511:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="512:5" pos:end="512:59"><expr pos:start="512:5" pos:end="512:58"><name pos:start="512:5" pos:end="512:6">rc</name> <operator pos:start="512:8" pos:end="512:8">=</operator> <call pos:start="512:10" pos:end="512:58"><name pos:start="512:10" pos:end="512:32">est_client_get_csrattrs</name><argument_list pos:start="512:33" pos:end="512:58">(<argument pos:start="512:34" pos:end="512:36"><expr pos:start="512:34" pos:end="512:36"><name pos:start="512:34" pos:end="512:36">ctx</name></expr></argument>, <argument pos:start="512:39" pos:end="512:47"><expr pos:start="512:39" pos:end="512:47"><operator pos:start="512:39" pos:end="512:39">&amp;</operator><name pos:start="512:40" pos:end="512:47">csr_data</name></expr></argument>, <argument pos:start="512:50" pos:end="512:57"><expr pos:start="512:50" pos:end="512:57"><operator pos:start="512:50" pos:end="512:50">&amp;</operator><name pos:start="512:51" pos:end="512:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="513:5" pos:end="513:34"><expr pos:start="513:5" pos:end="513:33"><call pos:start="513:5" pos:end="513:33"><name pos:start="513:5" pos:end="513:13">CU_ASSERT</name><argument_list pos:start="513:14" pos:end="513:33">(<argument pos:start="513:15" pos:end="513:32"><expr pos:start="513:15" pos:end="513:32"><name pos:start="513:15" pos:end="513:16">rc</name> <operator pos:start="513:18" pos:end="513:19">==</operator> <name pos:start="513:21" pos:end="513:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="514:5" pos:end="514:49"><expr pos:start="514:5" pos:end="514:48"><call pos:start="514:5" pos:end="514:48"><name pos:start="514:5" pos:end="514:13">CU_ASSERT</name><argument_list pos:start="514:14" pos:end="514:48">(<argument pos:start="514:15" pos:end="514:47"><expr pos:start="514:15" pos:end="514:47"><name pos:start="514:15" pos:end="514:21">csr_len</name> <operator pos:start="514:23" pos:end="514:24">==</operator> <call pos:start="514:26" pos:end="514:47"><name pos:start="514:26" pos:end="514:31">strlen</name><argument_list pos:start="514:32" pos:end="514:47">(<argument pos:start="514:33" pos:end="514:46"><expr pos:start="514:33" pos:end="514:46"><name pos:start="514:33" pos:end="514:46">TEST_ATTR2_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="515:5" pos:end="515:78"><expr pos:start="515:5" pos:end="515:77"><call pos:start="515:5" pos:end="515:77"><name pos:start="515:5" pos:end="515:13">CU_ASSERT</name><argument_list pos:start="515:14" pos:end="515:77">(<argument pos:start="515:15" pos:end="515:76"><expr pos:start="515:15" pos:end="515:76"><call pos:start="515:15" pos:end="515:71"><name pos:start="515:15" pos:end="515:21">strncmp</name><argument_list pos:start="515:22" pos:end="515:71">(<argument pos:start="515:23" pos:end="515:36"><expr pos:start="515:23" pos:end="515:36"><name pos:start="515:23" pos:end="515:36">TEST_ATTR2_POP</name></expr></argument>, <argument pos:start="515:39" pos:end="515:61"><expr pos:start="515:39" pos:end="515:61"><operator pos:start="515:39" pos:end="515:39">(</operator><specifier pos:start="515:40" pos:end="515:44">const</specifier> <name pos:start="515:46" pos:end="515:49">char</name> <operator pos:start="515:51" pos:end="515:51">*</operator><operator pos:start="515:52" pos:end="515:52">)</operator> <name pos:start="515:54" pos:end="515:61">csr_data</name></expr></argument>, <argument pos:start="515:64" pos:end="515:70"><expr pos:start="515:64" pos:end="515:70"><name pos:start="515:64" pos:end="515:70">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="515:73" pos:end="515:74">==</operator> <literal type="number" pos:start="515:76" pos:end="515:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="517:5" pos:end="517:30">/* Setting the size 116 */</comment>
    <expr_stmt pos:start="518:5" pos:end="518:80"><expr pos:start="518:5" pos:end="518:79"><name pos:start="518:5" pos:end="518:6">rc</name> <operator pos:start="518:8" pos:end="518:8">=</operator> <call pos:start="518:10" pos:end="518:79"><name pos:start="518:10" pos:end="518:33">est_server_init_csrattrs</name><argument_list pos:start="518:34" pos:end="518:79">(<argument pos:start="518:35" pos:end="518:38"><expr pos:start="518:35" pos:end="518:38"><name pos:start="518:35" pos:end="518:38">ectx</name></expr></argument>, <argument pos:start="518:41" pos:end="518:54"><expr pos:start="518:41" pos:end="518:54"><name pos:start="518:41" pos:end="518:54">TEST_ATTR6_116</name></expr></argument>, <argument pos:start="518:57" pos:end="518:78"><expr pos:start="518:57" pos:end="518:78"><call pos:start="518:57" pos:end="518:78"><name pos:start="518:57" pos:end="518:62">strlen</name><argument_list pos:start="518:63" pos:end="518:78">(<argument pos:start="518:64" pos:end="518:77"><expr pos:start="518:64" pos:end="518:77"><name pos:start="518:64" pos:end="518:77">TEST_ATTR6_116</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="519:5" pos:end="519:34"><expr pos:start="519:5" pos:end="519:33"><call pos:start="519:5" pos:end="519:33"><name pos:start="519:5" pos:end="519:13">CU_ASSERT</name><argument_list pos:start="519:14" pos:end="519:33">(<argument pos:start="519:15" pos:end="519:32"><expr pos:start="519:15" pos:end="519:32"><name pos:start="519:15" pos:end="519:16">rc</name> <operator pos:start="519:18" pos:end="519:19">==</operator> <name pos:start="519:21" pos:end="519:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="520:5" pos:end="520:59"><expr pos:start="520:5" pos:end="520:58"><name pos:start="520:5" pos:end="520:6">rc</name> <operator pos:start="520:8" pos:end="520:8">=</operator> <call pos:start="520:10" pos:end="520:58"><name pos:start="520:10" pos:end="520:32">est_client_get_csrattrs</name><argument_list pos:start="520:33" pos:end="520:58">(<argument pos:start="520:34" pos:end="520:36"><expr pos:start="520:34" pos:end="520:36"><name pos:start="520:34" pos:end="520:36">ctx</name></expr></argument>, <argument pos:start="520:39" pos:end="520:47"><expr pos:start="520:39" pos:end="520:47"><operator pos:start="520:39" pos:end="520:39">&amp;</operator><name pos:start="520:40" pos:end="520:47">csr_data</name></expr></argument>, <argument pos:start="520:50" pos:end="520:57"><expr pos:start="520:50" pos:end="520:57"><operator pos:start="520:50" pos:end="520:50">&amp;</operator><name pos:start="520:51" pos:end="520:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="521:5" pos:end="521:34"><expr pos:start="521:5" pos:end="521:33"><call pos:start="521:5" pos:end="521:33"><name pos:start="521:5" pos:end="521:13">CU_ASSERT</name><argument_list pos:start="521:14" pos:end="521:33">(<argument pos:start="521:15" pos:end="521:32"><expr pos:start="521:15" pos:end="521:32"><name pos:start="521:15" pos:end="521:16">rc</name> <operator pos:start="521:18" pos:end="521:19">==</operator> <name pos:start="521:21" pos:end="521:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="523:5" pos:end="523:30">/* Setting the size 244 */</comment>
    <expr_stmt pos:start="524:5" pos:end="524:78"><expr pos:start="524:5" pos:end="524:77"><name pos:start="524:5" pos:end="524:6">rc</name> <operator pos:start="524:8" pos:end="524:8">=</operator> <call pos:start="524:10" pos:end="524:77"><name pos:start="524:10" pos:end="524:33">est_server_init_csrattrs</name><argument_list pos:start="524:34" pos:end="524:77">(<argument pos:start="524:35" pos:end="524:38"><expr pos:start="524:35" pos:end="524:38"><name pos:start="524:35" pos:end="524:38">ectx</name></expr></argument>, <argument pos:start="524:41" pos:end="524:53"><expr pos:start="524:41" pos:end="524:53"><name pos:start="524:41" pos:end="524:53">TEST_ATTR_244</name></expr></argument>, <argument pos:start="524:56" pos:end="524:76"><expr pos:start="524:56" pos:end="524:76"><call pos:start="524:56" pos:end="524:76"><name pos:start="524:56" pos:end="524:61">strlen</name><argument_list pos:start="524:62" pos:end="524:76">(<argument pos:start="524:63" pos:end="524:75"><expr pos:start="524:63" pos:end="524:75"><name pos:start="524:63" pos:end="524:75">TEST_ATTR_244</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="525:5" pos:end="525:34"><expr pos:start="525:5" pos:end="525:33"><call pos:start="525:5" pos:end="525:33"><name pos:start="525:5" pos:end="525:13">CU_ASSERT</name><argument_list pos:start="525:14" pos:end="525:33">(<argument pos:start="525:15" pos:end="525:32"><expr pos:start="525:15" pos:end="525:32"><name pos:start="525:15" pos:end="525:16">rc</name> <operator pos:start="525:18" pos:end="525:19">==</operator> <name pos:start="525:21" pos:end="525:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="526:5" pos:end="526:59"><expr pos:start="526:5" pos:end="526:58"><name pos:start="526:5" pos:end="526:6">rc</name> <operator pos:start="526:8" pos:end="526:8">=</operator> <call pos:start="526:10" pos:end="526:58"><name pos:start="526:10" pos:end="526:32">est_client_get_csrattrs</name><argument_list pos:start="526:33" pos:end="526:58">(<argument pos:start="526:34" pos:end="526:36"><expr pos:start="526:34" pos:end="526:36"><name pos:start="526:34" pos:end="526:36">ctx</name></expr></argument>, <argument pos:start="526:39" pos:end="526:47"><expr pos:start="526:39" pos:end="526:47"><operator pos:start="526:39" pos:end="526:39">&amp;</operator><name pos:start="526:40" pos:end="526:47">csr_data</name></expr></argument>, <argument pos:start="526:50" pos:end="526:57"><expr pos:start="526:50" pos:end="526:57"><operator pos:start="526:50" pos:end="526:50">&amp;</operator><name pos:start="526:51" pos:end="526:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="527:5" pos:end="527:34"><expr pos:start="527:5" pos:end="527:33"><call pos:start="527:5" pos:end="527:33"><name pos:start="527:5" pos:end="527:13">CU_ASSERT</name><argument_list pos:start="527:14" pos:end="527:33">(<argument pos:start="527:15" pos:end="527:32"><expr pos:start="527:15" pos:end="527:32"><name pos:start="527:15" pos:end="527:16">rc</name> <operator pos:start="527:18" pos:end="527:19">==</operator> <name pos:start="527:21" pos:end="527:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="529:5" pos:end="529:30">/* Setting the size 245 */</comment>
    <expr_stmt pos:start="530:5" pos:end="530:78"><expr pos:start="530:5" pos:end="530:77"><name pos:start="530:5" pos:end="530:6">rc</name> <operator pos:start="530:8" pos:end="530:8">=</operator> <call pos:start="530:10" pos:end="530:77"><name pos:start="530:10" pos:end="530:33">est_server_init_csrattrs</name><argument_list pos:start="530:34" pos:end="530:77">(<argument pos:start="530:35" pos:end="530:38"><expr pos:start="530:35" pos:end="530:38"><name pos:start="530:35" pos:end="530:38">ectx</name></expr></argument>, <argument pos:start="530:41" pos:end="530:53"><expr pos:start="530:41" pos:end="530:53"><name pos:start="530:41" pos:end="530:53">TEST_ATTR_245</name></expr></argument>, <argument pos:start="530:56" pos:end="530:76"><expr pos:start="530:56" pos:end="530:76"><call pos:start="530:56" pos:end="530:76"><name pos:start="530:56" pos:end="530:61">strlen</name><argument_list pos:start="530:62" pos:end="530:76">(<argument pos:start="530:63" pos:end="530:75"><expr pos:start="530:63" pos:end="530:75"><name pos:start="530:63" pos:end="530:75">TEST_ATTR_245</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="531:5" pos:end="531:34"><expr pos:start="531:5" pos:end="531:33"><call pos:start="531:5" pos:end="531:33"><name pos:start="531:5" pos:end="531:13">CU_ASSERT</name><argument_list pos:start="531:14" pos:end="531:33">(<argument pos:start="531:15" pos:end="531:32"><expr pos:start="531:15" pos:end="531:32"><name pos:start="531:15" pos:end="531:16">rc</name> <operator pos:start="531:18" pos:end="531:19">==</operator> <name pos:start="531:21" pos:end="531:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="532:5" pos:end="532:59"><expr pos:start="532:5" pos:end="532:58"><name pos:start="532:5" pos:end="532:6">rc</name> <operator pos:start="532:8" pos:end="532:8">=</operator> <call pos:start="532:10" pos:end="532:58"><name pos:start="532:10" pos:end="532:32">est_client_get_csrattrs</name><argument_list pos:start="532:33" pos:end="532:58">(<argument pos:start="532:34" pos:end="532:36"><expr pos:start="532:34" pos:end="532:36"><name pos:start="532:34" pos:end="532:36">ctx</name></expr></argument>, <argument pos:start="532:39" pos:end="532:47"><expr pos:start="532:39" pos:end="532:47"><operator pos:start="532:39" pos:end="532:39">&amp;</operator><name pos:start="532:40" pos:end="532:47">csr_data</name></expr></argument>, <argument pos:start="532:50" pos:end="532:57"><expr pos:start="532:50" pos:end="532:57"><operator pos:start="532:50" pos:end="532:50">&amp;</operator><name pos:start="532:51" pos:end="532:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="533:5" pos:end="533:34"><expr pos:start="533:5" pos:end="533:33"><call pos:start="533:5" pos:end="533:33"><name pos:start="533:5" pos:end="533:13">CU_ASSERT</name><argument_list pos:start="533:14" pos:end="533:33">(<argument pos:start="533:15" pos:end="533:32"><expr pos:start="533:15" pos:end="533:32"><name pos:start="533:15" pos:end="533:16">rc</name> <operator pos:start="533:18" pos:end="533:19">==</operator> <name pos:start="533:21" pos:end="533:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="535:5" pos:end="535:30">/* Setting the size 250 */</comment>
    <expr_stmt pos:start="536:5" pos:end="536:78"><expr pos:start="536:5" pos:end="536:77"><name pos:start="536:5" pos:end="536:6">rc</name> <operator pos:start="536:8" pos:end="536:8">=</operator> <call pos:start="536:10" pos:end="536:77"><name pos:start="536:10" pos:end="536:33">est_server_init_csrattrs</name><argument_list pos:start="536:34" pos:end="536:77">(<argument pos:start="536:35" pos:end="536:38"><expr pos:start="536:35" pos:end="536:38"><name pos:start="536:35" pos:end="536:38">ectx</name></expr></argument>, <argument pos:start="536:41" pos:end="536:53"><expr pos:start="536:41" pos:end="536:53"><name pos:start="536:41" pos:end="536:53">TEST_ATTR_250</name></expr></argument>, <argument pos:start="536:56" pos:end="536:76"><expr pos:start="536:56" pos:end="536:76"><call pos:start="536:56" pos:end="536:76"><name pos:start="536:56" pos:end="536:61">strlen</name><argument_list pos:start="536:62" pos:end="536:76">(<argument pos:start="536:63" pos:end="536:75"><expr pos:start="536:63" pos:end="536:75"><name pos:start="536:63" pos:end="536:75">TEST_ATTR_250</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="537:5" pos:end="537:34"><expr pos:start="537:5" pos:end="537:33"><call pos:start="537:5" pos:end="537:33"><name pos:start="537:5" pos:end="537:13">CU_ASSERT</name><argument_list pos:start="537:14" pos:end="537:33">(<argument pos:start="537:15" pos:end="537:32"><expr pos:start="537:15" pos:end="537:32"><name pos:start="537:15" pos:end="537:16">rc</name> <operator pos:start="537:18" pos:end="537:19">==</operator> <name pos:start="537:21" pos:end="537:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="538:5" pos:end="538:59"><expr pos:start="538:5" pos:end="538:58"><name pos:start="538:5" pos:end="538:6">rc</name> <operator pos:start="538:8" pos:end="538:8">=</operator> <call pos:start="538:10" pos:end="538:58"><name pos:start="538:10" pos:end="538:32">est_client_get_csrattrs</name><argument_list pos:start="538:33" pos:end="538:58">(<argument pos:start="538:34" pos:end="538:36"><expr pos:start="538:34" pos:end="538:36"><name pos:start="538:34" pos:end="538:36">ctx</name></expr></argument>, <argument pos:start="538:39" pos:end="538:47"><expr pos:start="538:39" pos:end="538:47"><operator pos:start="538:39" pos:end="538:39">&amp;</operator><name pos:start="538:40" pos:end="538:47">csr_data</name></expr></argument>, <argument pos:start="538:50" pos:end="538:57"><expr pos:start="538:50" pos:end="538:57"><operator pos:start="538:50" pos:end="538:50">&amp;</operator><name pos:start="538:51" pos:end="538:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="539:5" pos:end="539:34"><expr pos:start="539:5" pos:end="539:33"><call pos:start="539:5" pos:end="539:33"><name pos:start="539:5" pos:end="539:13">CU_ASSERT</name><argument_list pos:start="539:14" pos:end="539:33">(<argument pos:start="539:15" pos:end="539:32"><expr pos:start="539:15" pos:end="539:32"><name pos:start="539:15" pos:end="539:16">rc</name> <operator pos:start="539:18" pos:end="539:19">==</operator> <name pos:start="539:21" pos:end="539:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="540:5" pos:end="540:51"><expr pos:start="540:5" pos:end="540:50"><call pos:start="540:5" pos:end="540:50"><name pos:start="540:5" pos:end="540:13">CU_ASSERT</name><argument_list pos:start="540:14" pos:end="540:50">(<argument pos:start="540:15" pos:end="540:49"><expr pos:start="540:15" pos:end="540:49"><name pos:start="540:15" pos:end="540:21">csr_len</name> <operator pos:start="540:23" pos:end="540:24">==</operator> <call pos:start="540:26" pos:end="540:49"><name pos:start="540:26" pos:end="540:31">strlen</name><argument_list pos:start="540:32" pos:end="540:49">(<argument pos:start="540:33" pos:end="540:48"><expr pos:start="540:33" pos:end="540:48"><name pos:start="540:33" pos:end="540:48">TEST_ATTR_250POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="541:5" pos:end="541:80"><expr pos:start="541:5" pos:end="541:79"><call pos:start="541:5" pos:end="541:79"><name pos:start="541:5" pos:end="541:13">CU_ASSERT</name><argument_list pos:start="541:14" pos:end="541:79">(<argument pos:start="541:15" pos:end="541:78"><expr pos:start="541:15" pos:end="541:78"><call pos:start="541:15" pos:end="541:73"><name pos:start="541:15" pos:end="541:21">strncmp</name><argument_list pos:start="541:22" pos:end="541:73">(<argument pos:start="541:23" pos:end="541:38"><expr pos:start="541:23" pos:end="541:38"><name pos:start="541:23" pos:end="541:38">TEST_ATTR_250POP</name></expr></argument>, <argument pos:start="541:41" pos:end="541:63"><expr pos:start="541:41" pos:end="541:63"><operator pos:start="541:41" pos:end="541:41">(</operator><specifier pos:start="541:42" pos:end="541:46">const</specifier> <name pos:start="541:48" pos:end="541:51">char</name> <operator pos:start="541:53" pos:end="541:53">*</operator><operator pos:start="541:54" pos:end="541:54">)</operator> <name pos:start="541:56" pos:end="541:63">csr_data</name></expr></argument>, <argument pos:start="541:66" pos:end="541:72"><expr pos:start="541:66" pos:end="541:72"><name pos:start="541:66" pos:end="541:72">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="541:75" pos:end="541:76">==</operator> <literal type="number" pos:start="541:78" pos:end="541:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="543:5" pos:end="546:5"><if pos:start="543:5" pos:end="546:5">if <condition pos:start="543:8" pos:end="543:63">(<expr pos:start="543:9" pos:end="543:62"><call pos:start="543:9" pos:end="543:62"><name pos:start="543:9" pos:end="543:22">est_set_csr_cb</name><argument_list pos:start="543:23" pos:end="543:62">(<argument pos:start="543:24" pos:end="543:27"><expr pos:start="543:24" pos:end="543:27"><name pos:start="543:24" pos:end="543:27">ectx</name></expr></argument>, <argument pos:start="543:30" pos:end="543:61"><expr pos:start="543:30" pos:end="543:61"><operator pos:start="543:30" pos:end="543:30">&amp;</operator><name pos:start="543:31" pos:end="543:61">handle_correct_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="543:65" pos:end="546:5">{<block_content pos:start="544:9" pos:end="545:16">
        <expr_stmt pos:start="544:9" pos:end="544:78"><expr pos:start="544:9" pos:end="544:77"><call pos:start="544:9" pos:end="544:77"><name pos:start="544:9" pos:end="544:14">printf</name><argument_list pos:start="544:15" pos:end="544:77">(<argument pos:start="544:16" pos:end="544:76"><expr pos:start="544:16" pos:end="544:76"><literal type="string" pos:start="544:16" pos:end="544:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="545:9" pos:end="545:16"><expr pos:start="545:9" pos:end="545:15"><call pos:start="545:9" pos:end="545:15"><name pos:start="545:9" pos:end="545:12">exit</name><argument_list pos:start="545:13" pos:end="545:15">(<argument pos:start="545:14" pos:end="545:14"><expr pos:start="545:14" pos:end="545:14"><literal type="number" pos:start="545:14" pos:end="545:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="548:5" pos:end="548:59"><expr pos:start="548:5" pos:end="548:58"><name pos:start="548:5" pos:end="548:6">rc</name> <operator pos:start="548:8" pos:end="548:8">=</operator> <call pos:start="548:10" pos:end="548:58"><name pos:start="548:10" pos:end="548:32">est_client_get_csrattrs</name><argument_list pos:start="548:33" pos:end="548:58">(<argument pos:start="548:34" pos:end="548:36"><expr pos:start="548:34" pos:end="548:36"><name pos:start="548:34" pos:end="548:36">ctx</name></expr></argument>, <argument pos:start="548:39" pos:end="548:47"><expr pos:start="548:39" pos:end="548:47"><operator pos:start="548:39" pos:end="548:39">&amp;</operator><name pos:start="548:40" pos:end="548:47">csr_data</name></expr></argument>, <argument pos:start="548:50" pos:end="548:57"><expr pos:start="548:50" pos:end="548:57"><operator pos:start="548:50" pos:end="548:50">&amp;</operator><name pos:start="548:51" pos:end="548:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="549:5" pos:end="549:34"><expr pos:start="549:5" pos:end="549:33"><call pos:start="549:5" pos:end="549:33"><name pos:start="549:5" pos:end="549:13">CU_ASSERT</name><argument_list pos:start="549:14" pos:end="549:33">(<argument pos:start="549:15" pos:end="549:32"><expr pos:start="549:15" pos:end="549:32"><name pos:start="549:15" pos:end="549:16">rc</name> <operator pos:start="549:18" pos:end="549:19">==</operator> <name pos:start="549:21" pos:end="549:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="550:5" pos:end="550:45"><expr pos:start="550:5" pos:end="550:44"><call pos:start="550:5" pos:end="550:44"><name pos:start="550:5" pos:end="550:13">CU_ASSERT</name><argument_list pos:start="550:14" pos:end="550:44">(<argument pos:start="550:15" pos:end="550:43"><expr pos:start="550:15" pos:end="550:43"><name pos:start="550:15" pos:end="550:21">csr_len</name> <operator pos:start="550:23" pos:end="550:24">==</operator> <call pos:start="550:26" pos:end="550:43"><name pos:start="550:26" pos:end="550:31">strlen</name><argument_list pos:start="550:32" pos:end="550:43">(<argument pos:start="550:33" pos:end="550:42"><expr pos:start="550:33" pos:end="550:42"><name pos:start="550:33" pos:end="550:42">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="551:5" pos:end="551:74"><expr pos:start="551:5" pos:end="551:73"><call pos:start="551:5" pos:end="551:73"><name pos:start="551:5" pos:end="551:13">CU_ASSERT</name><argument_list pos:start="551:14" pos:end="551:73">(<argument pos:start="551:15" pos:end="551:72"><expr pos:start="551:15" pos:end="551:72"><call pos:start="551:15" pos:end="551:67"><name pos:start="551:15" pos:end="551:21">strncmp</name><argument_list pos:start="551:22" pos:end="551:67">(<argument pos:start="551:23" pos:end="551:32"><expr pos:start="551:23" pos:end="551:32"><name pos:start="551:23" pos:end="551:32">TEST_ATTR1</name></expr></argument>, <argument pos:start="551:35" pos:end="551:57"><expr pos:start="551:35" pos:end="551:57"><operator pos:start="551:35" pos:end="551:35">(</operator><specifier pos:start="551:36" pos:end="551:40">const</specifier> <name pos:start="551:42" pos:end="551:45">char</name> <operator pos:start="551:47" pos:end="551:47">*</operator><operator pos:start="551:48" pos:end="551:48">)</operator> <name pos:start="551:50" pos:end="551:57">csr_data</name></expr></argument>, <argument pos:start="551:60" pos:end="551:66"><expr pos:start="551:60" pos:end="551:66"><name pos:start="551:60" pos:end="551:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="551:69" pos:end="551:70">==</operator> <literal type="number" pos:start="551:72" pos:end="551:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="553:5" pos:end="556:5"><if pos:start="553:5" pos:end="556:5">if <condition pos:start="553:8" pos:end="553:61">(<expr pos:start="553:9" pos:end="553:60"><call pos:start="553:9" pos:end="553:60"><name pos:start="553:9" pos:end="553:22">est_set_csr_cb</name><argument_list pos:start="553:23" pos:end="553:60">(<argument pos:start="553:24" pos:end="553:27"><expr pos:start="553:24" pos:end="553:27"><name pos:start="553:24" pos:end="553:27">ectx</name></expr></argument>, <argument pos:start="553:30" pos:end="553:59"><expr pos:start="553:30" pos:end="553:59"><operator pos:start="553:30" pos:end="553:30">&amp;</operator><name pos:start="553:31" pos:end="553:59">handle_nopop_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="553:63" pos:end="556:5">{<block_content pos:start="554:9" pos:end="555:16">
        <expr_stmt pos:start="554:9" pos:end="554:78"><expr pos:start="554:9" pos:end="554:77"><call pos:start="554:9" pos:end="554:77"><name pos:start="554:9" pos:end="554:14">printf</name><argument_list pos:start="554:15" pos:end="554:77">(<argument pos:start="554:16" pos:end="554:76"><expr pos:start="554:16" pos:end="554:76"><literal type="string" pos:start="554:16" pos:end="554:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="555:9" pos:end="555:16"><expr pos:start="555:9" pos:end="555:15"><call pos:start="555:9" pos:end="555:15"><name pos:start="555:9" pos:end="555:12">exit</name><argument_list pos:start="555:13" pos:end="555:15">(<argument pos:start="555:14" pos:end="555:14"><expr pos:start="555:14" pos:end="555:14"><literal type="number" pos:start="555:14" pos:end="555:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="558:5" pos:end="558:59"><expr pos:start="558:5" pos:end="558:58"><name pos:start="558:5" pos:end="558:6">rc</name> <operator pos:start="558:8" pos:end="558:8">=</operator> <call pos:start="558:10" pos:end="558:58"><name pos:start="558:10" pos:end="558:32">est_client_get_csrattrs</name><argument_list pos:start="558:33" pos:end="558:58">(<argument pos:start="558:34" pos:end="558:36"><expr pos:start="558:34" pos:end="558:36"><name pos:start="558:34" pos:end="558:36">ctx</name></expr></argument>, <argument pos:start="558:39" pos:end="558:47"><expr pos:start="558:39" pos:end="558:47"><operator pos:start="558:39" pos:end="558:39">&amp;</operator><name pos:start="558:40" pos:end="558:47">csr_data</name></expr></argument>, <argument pos:start="558:50" pos:end="558:57"><expr pos:start="558:50" pos:end="558:57"><operator pos:start="558:50" pos:end="558:50">&amp;</operator><name pos:start="558:51" pos:end="558:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="559:5" pos:end="559:34"><expr pos:start="559:5" pos:end="559:33"><call pos:start="559:5" pos:end="559:33"><name pos:start="559:5" pos:end="559:13">CU_ASSERT</name><argument_list pos:start="559:14" pos:end="559:33">(<argument pos:start="559:15" pos:end="559:32"><expr pos:start="559:15" pos:end="559:32"><name pos:start="559:15" pos:end="559:16">rc</name> <operator pos:start="559:18" pos:end="559:19">==</operator> <name pos:start="559:21" pos:end="559:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="560:5" pos:end="560:53"><expr pos:start="560:5" pos:end="560:52"><call pos:start="560:5" pos:end="560:52"><name pos:start="560:5" pos:end="560:13">CU_ASSERT</name><argument_list pos:start="560:14" pos:end="560:52">(<argument pos:start="560:15" pos:end="560:51"><expr pos:start="560:15" pos:end="560:51"><name pos:start="560:15" pos:end="560:21">csr_len</name> <operator pos:start="560:23" pos:end="560:24">==</operator> <call pos:start="560:26" pos:end="560:51"><name pos:start="560:26" pos:end="560:31">strlen</name><argument_list pos:start="560:32" pos:end="560:51">(<argument pos:start="560:33" pos:end="560:50"><expr pos:start="560:33" pos:end="560:50"><name pos:start="560:33" pos:end="560:50">TEST_ATTR_NOPOPPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="561:5" pos:end="562:76"><expr pos:start="561:5" pos:end="562:75"><call pos:start="561:5" pos:end="562:75"><name pos:start="561:5" pos:end="561:13">CU_ASSERT</name><argument_list pos:start="561:14" pos:end="562:75">(
        <argument pos:start="562:9" pos:end="562:74"><expr pos:start="562:9" pos:end="562:74"><call pos:start="562:9" pos:end="562:69"><name pos:start="562:9" pos:end="562:15">strncmp</name><argument_list pos:start="562:16" pos:end="562:69">(<argument pos:start="562:17" pos:end="562:34"><expr pos:start="562:17" pos:end="562:34"><name pos:start="562:17" pos:end="562:34">TEST_ATTR_NOPOPPOP</name></expr></argument>, <argument pos:start="562:37" pos:end="562:59"><expr pos:start="562:37" pos:end="562:59"><operator pos:start="562:37" pos:end="562:37">(</operator><specifier pos:start="562:38" pos:end="562:42">const</specifier> <name pos:start="562:44" pos:end="562:47">char</name> <operator pos:start="562:49" pos:end="562:49">*</operator><operator pos:start="562:50" pos:end="562:50">)</operator> <name pos:start="562:52" pos:end="562:59">csr_data</name></expr></argument>, <argument pos:start="562:62" pos:end="562:68"><expr pos:start="562:62" pos:end="562:68"><name pos:start="562:62" pos:end="562:68">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="562:71" pos:end="562:72">==</operator> <literal type="number" pos:start="562:74" pos:end="562:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="564:5" pos:end="567:5"><if pos:start="564:5" pos:end="567:5">if <condition pos:start="564:8" pos:end="564:61">(<expr pos:start="564:9" pos:end="564:60"><call pos:start="564:9" pos:end="564:60"><name pos:start="564:9" pos:end="564:22">est_set_csr_cb</name><argument_list pos:start="564:23" pos:end="564:60">(<argument pos:start="564:24" pos:end="564:27"><expr pos:start="564:24" pos:end="564:27"><name pos:start="564:24" pos:end="564:27">ectx</name></expr></argument>, <argument pos:start="564:30" pos:end="564:59"><expr pos:start="564:30" pos:end="564:59"><operator pos:start="564:30" pos:end="564:30">&amp;</operator><name pos:start="564:31" pos:end="564:59">handle_empty_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="564:63" pos:end="567:5">{<block_content pos:start="565:9" pos:end="566:16">
        <expr_stmt pos:start="565:9" pos:end="565:78"><expr pos:start="565:9" pos:end="565:77"><call pos:start="565:9" pos:end="565:77"><name pos:start="565:9" pos:end="565:14">printf</name><argument_list pos:start="565:15" pos:end="565:77">(<argument pos:start="565:16" pos:end="565:76"><expr pos:start="565:16" pos:end="565:76"><literal type="string" pos:start="565:16" pos:end="565:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="566:9" pos:end="566:16"><expr pos:start="566:9" pos:end="566:15"><call pos:start="566:9" pos:end="566:15"><name pos:start="566:9" pos:end="566:12">exit</name><argument_list pos:start="566:13" pos:end="566:15">(<argument pos:start="566:14" pos:end="566:14"><expr pos:start="566:14" pos:end="566:14"><literal type="number" pos:start="566:14" pos:end="566:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="569:5" pos:end="569:59"><expr pos:start="569:5" pos:end="569:58"><name pos:start="569:5" pos:end="569:6">rc</name> <operator pos:start="569:8" pos:end="569:8">=</operator> <call pos:start="569:10" pos:end="569:58"><name pos:start="569:10" pos:end="569:32">est_client_get_csrattrs</name><argument_list pos:start="569:33" pos:end="569:58">(<argument pos:start="569:34" pos:end="569:36"><expr pos:start="569:34" pos:end="569:36"><name pos:start="569:34" pos:end="569:36">ctx</name></expr></argument>, <argument pos:start="569:39" pos:end="569:47"><expr pos:start="569:39" pos:end="569:47"><operator pos:start="569:39" pos:end="569:39">&amp;</operator><name pos:start="569:40" pos:end="569:47">csr_data</name></expr></argument>, <argument pos:start="569:50" pos:end="569:57"><expr pos:start="569:50" pos:end="569:57"><operator pos:start="569:50" pos:end="569:50">&amp;</operator><name pos:start="569:51" pos:end="569:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="570:5" pos:end="570:34"><expr pos:start="570:5" pos:end="570:33"><call pos:start="570:5" pos:end="570:33"><name pos:start="570:5" pos:end="570:13">CU_ASSERT</name><argument_list pos:start="570:14" pos:end="570:33">(<argument pos:start="570:15" pos:end="570:32"><expr pos:start="570:15" pos:end="570:32"><name pos:start="570:15" pos:end="570:16">rc</name> <operator pos:start="570:18" pos:end="570:19">==</operator> <name pos:start="570:21" pos:end="570:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="571:5" pos:end="571:49"><expr pos:start="571:5" pos:end="571:48"><call pos:start="571:5" pos:end="571:48"><name pos:start="571:5" pos:end="571:13">CU_ASSERT</name><argument_list pos:start="571:14" pos:end="571:48">(<argument pos:start="571:15" pos:end="571:47"><expr pos:start="571:15" pos:end="571:47"><name pos:start="571:15" pos:end="571:21">csr_len</name> <operator pos:start="571:23" pos:end="571:24">==</operator> <call pos:start="571:26" pos:end="571:47"><name pos:start="571:26" pos:end="571:31">strlen</name><argument_list pos:start="571:32" pos:end="571:47">(<argument pos:start="571:33" pos:end="571:46"><expr pos:start="571:33" pos:end="571:46"><name pos:start="571:33" pos:end="571:46">TEST_ATTR2_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="572:5" pos:end="572:78"><expr pos:start="572:5" pos:end="572:77"><call pos:start="572:5" pos:end="572:77"><name pos:start="572:5" pos:end="572:13">CU_ASSERT</name><argument_list pos:start="572:14" pos:end="572:77">(<argument pos:start="572:15" pos:end="572:76"><expr pos:start="572:15" pos:end="572:76"><call pos:start="572:15" pos:end="572:71"><name pos:start="572:15" pos:end="572:21">strncmp</name><argument_list pos:start="572:22" pos:end="572:71">(<argument pos:start="572:23" pos:end="572:36"><expr pos:start="572:23" pos:end="572:36"><name pos:start="572:23" pos:end="572:36">TEST_ATTR2_POP</name></expr></argument>, <argument pos:start="572:39" pos:end="572:61"><expr pos:start="572:39" pos:end="572:61"><operator pos:start="572:39" pos:end="572:39">(</operator><specifier pos:start="572:40" pos:end="572:44">const</specifier> <name pos:start="572:46" pos:end="572:49">char</name> <operator pos:start="572:51" pos:end="572:51">*</operator><operator pos:start="572:52" pos:end="572:52">)</operator> <name pos:start="572:54" pos:end="572:61">csr_data</name></expr></argument>, <argument pos:start="572:64" pos:end="572:70"><expr pos:start="572:64" pos:end="572:70"><name pos:start="572:64" pos:end="572:70">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="572:73" pos:end="572:74">==</operator> <literal type="number" pos:start="572:76" pos:end="572:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="574:5" pos:end="574:21">/* disable PoP */</comment>
    <expr_stmt pos:start="575:5" pos:end="575:21"><expr pos:start="575:5" pos:end="575:20"><call pos:start="575:5" pos:end="575:20"><name pos:start="575:5" pos:end="575:18">st_disable_pop</name><argument_list pos:start="575:19" pos:end="575:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="577:5" pos:end="577:24">/* clear callback */</comment>
    <if_stmt pos:start="578:5" pos:end="581:5"><if pos:start="578:5" pos:end="581:5">if <condition pos:start="578:8" pos:end="578:35">(<expr pos:start="578:9" pos:end="578:34"><call pos:start="578:9" pos:end="578:34"><name pos:start="578:9" pos:end="578:22">est_set_csr_cb</name><argument_list pos:start="578:23" pos:end="578:34">(<argument pos:start="578:24" pos:end="578:27"><expr pos:start="578:24" pos:end="578:27"><name pos:start="578:24" pos:end="578:27">ectx</name></expr></argument>, <argument pos:start="578:30" pos:end="578:33"><expr pos:start="578:30" pos:end="578:33"><name pos:start="578:30" pos:end="578:33">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="578:37" pos:end="581:5">{<block_content pos:start="579:9" pos:end="580:16">
        <expr_stmt pos:start="579:9" pos:end="579:78"><expr pos:start="579:9" pos:end="579:77"><call pos:start="579:9" pos:end="579:77"><name pos:start="579:9" pos:end="579:14">printf</name><argument_list pos:start="579:15" pos:end="579:77">(<argument pos:start="579:16" pos:end="579:76"><expr pos:start="579:16" pos:end="579:76"><literal type="string" pos:start="579:16" pos:end="579:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="580:9" pos:end="580:16"><expr pos:start="580:9" pos:end="580:15"><call pos:start="580:9" pos:end="580:15"><name pos:start="580:9" pos:end="580:12">exit</name><argument_list pos:start="580:13" pos:end="580:15">(<argument pos:start="580:14" pos:end="580:14"><expr pos:start="580:14" pos:end="580:14"><literal type="number" pos:start="580:14" pos:end="580:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="583:5" pos:end="583:66">/* Real base64 string PoP should not be added - should pass */</comment>
    <expr_stmt pos:start="584:5" pos:end="587:33"><expr pos:start="584:5" pos:end="587:32"><name pos:start="584:5" pos:end="584:6">rc</name> <operator pos:start="584:8" pos:end="584:8">=</operator> <call pos:start="584:10" pos:end="587:32"><name pos:start="584:10" pos:end="584:33">est_server_init_csrattrs</name><argument_list pos:start="584:34" pos:end="587:32">(
        <argument pos:start="585:9" pos:end="585:12"><expr pos:start="585:9" pos:end="585:12"><name pos:start="585:9" pos:end="585:12">ectx</name></expr></argument>,
        <argument pos:start="586:9" pos:end="586:23"><expr pos:start="586:9" pos:end="586:23"><name pos:start="586:9" pos:end="586:23">TEST_ATTR_NOPOP</name></expr></argument>,
        <argument pos:start="587:9" pos:end="587:31"><expr pos:start="587:9" pos:end="587:31"><call pos:start="587:9" pos:end="587:31"><name pos:start="587:9" pos:end="587:14">strlen</name><argument_list pos:start="587:15" pos:end="587:31">(<argument pos:start="587:16" pos:end="587:30"><expr pos:start="587:16" pos:end="587:30"><name pos:start="587:16" pos:end="587:30">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="588:5" pos:end="588:34"><expr pos:start="588:5" pos:end="588:33"><call pos:start="588:5" pos:end="588:33"><name pos:start="588:5" pos:end="588:13">CU_ASSERT</name><argument_list pos:start="588:14" pos:end="588:33">(<argument pos:start="588:15" pos:end="588:32"><expr pos:start="588:15" pos:end="588:32"><name pos:start="588:15" pos:end="588:16">rc</name> <operator pos:start="588:18" pos:end="588:19">==</operator> <name pos:start="588:21" pos:end="588:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="589:5" pos:end="589:59"><expr pos:start="589:5" pos:end="589:58"><name pos:start="589:5" pos:end="589:6">rc</name> <operator pos:start="589:8" pos:end="589:8">=</operator> <call pos:start="589:10" pos:end="589:58"><name pos:start="589:10" pos:end="589:32">est_client_get_csrattrs</name><argument_list pos:start="589:33" pos:end="589:58">(<argument pos:start="589:34" pos:end="589:36"><expr pos:start="589:34" pos:end="589:36"><name pos:start="589:34" pos:end="589:36">ctx</name></expr></argument>, <argument pos:start="589:39" pos:end="589:47"><expr pos:start="589:39" pos:end="589:47"><operator pos:start="589:39" pos:end="589:39">&amp;</operator><name pos:start="589:40" pos:end="589:47">csr_data</name></expr></argument>, <argument pos:start="589:50" pos:end="589:57"><expr pos:start="589:50" pos:end="589:57"><operator pos:start="589:50" pos:end="589:50">&amp;</operator><name pos:start="589:51" pos:end="589:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="590:5" pos:end="590:34"><expr pos:start="590:5" pos:end="590:33"><call pos:start="590:5" pos:end="590:33"><name pos:start="590:5" pos:end="590:13">CU_ASSERT</name><argument_list pos:start="590:14" pos:end="590:33">(<argument pos:start="590:15" pos:end="590:32"><expr pos:start="590:15" pos:end="590:32"><name pos:start="590:15" pos:end="590:16">rc</name> <operator pos:start="590:18" pos:end="590:19">==</operator> <name pos:start="590:21" pos:end="590:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="591:5" pos:end="591:50"><expr pos:start="591:5" pos:end="591:49"><call pos:start="591:5" pos:end="591:49"><name pos:start="591:5" pos:end="591:13">CU_ASSERT</name><argument_list pos:start="591:14" pos:end="591:49">(<argument pos:start="591:15" pos:end="591:48"><expr pos:start="591:15" pos:end="591:48"><name pos:start="591:15" pos:end="591:21">csr_len</name> <operator pos:start="591:23" pos:end="591:24">==</operator> <call pos:start="591:26" pos:end="591:48"><name pos:start="591:26" pos:end="591:31">strlen</name><argument_list pos:start="591:32" pos:end="591:48">(<argument pos:start="591:33" pos:end="591:47"><expr pos:start="591:33" pos:end="591:47"><name pos:start="591:33" pos:end="591:47">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="592:5" pos:end="592:79"><expr pos:start="592:5" pos:end="592:78"><call pos:start="592:5" pos:end="592:78"><name pos:start="592:5" pos:end="592:13">CU_ASSERT</name><argument_list pos:start="592:14" pos:end="592:78">(<argument pos:start="592:15" pos:end="592:77"><expr pos:start="592:15" pos:end="592:77"><call pos:start="592:15" pos:end="592:72"><name pos:start="592:15" pos:end="592:21">strncmp</name><argument_list pos:start="592:22" pos:end="592:72">(<argument pos:start="592:23" pos:end="592:37"><expr pos:start="592:23" pos:end="592:37"><name pos:start="592:23" pos:end="592:37">TEST_ATTR_NOPOP</name></expr></argument>, <argument pos:start="592:40" pos:end="592:62"><expr pos:start="592:40" pos:end="592:62"><operator pos:start="592:40" pos:end="592:40">(</operator><specifier pos:start="592:41" pos:end="592:45">const</specifier> <name pos:start="592:47" pos:end="592:50">char</name> <operator pos:start="592:52" pos:end="592:52">*</operator><operator pos:start="592:53" pos:end="592:53">)</operator> <name pos:start="592:55" pos:end="592:62">csr_data</name></expr></argument>, <argument pos:start="592:65" pos:end="592:71"><expr pos:start="592:65" pos:end="592:71"><name pos:start="592:65" pos:end="592:71">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="592:74" pos:end="592:75">==</operator> <literal type="number" pos:start="592:77" pos:end="592:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="594:5" pos:end="594:47">/* All ASN.1 types supported by CiscoSSL */</comment>
    <expr_stmt pos:start="595:5" pos:end="595:78"><expr pos:start="595:5" pos:end="595:77"><name pos:start="595:5" pos:end="595:6">rc</name> <operator pos:start="595:8" pos:end="595:8">=</operator> <call pos:start="595:10" pos:end="595:77"><name pos:start="595:10" pos:end="595:33">est_server_init_csrattrs</name><argument_list pos:start="595:34" pos:end="595:77">(<argument pos:start="595:35" pos:end="595:38"><expr pos:start="595:35" pos:end="595:38"><name pos:start="595:35" pos:end="595:38">ectx</name></expr></argument>, <argument pos:start="595:41" pos:end="595:53"><expr pos:start="595:41" pos:end="595:53"><name pos:start="595:41" pos:end="595:53">TEST_ALL_ATTR</name></expr></argument>, <argument pos:start="595:56" pos:end="595:76"><expr pos:start="595:56" pos:end="595:76"><call pos:start="595:56" pos:end="595:76"><name pos:start="595:56" pos:end="595:61">strlen</name><argument_list pos:start="595:62" pos:end="595:76">(<argument pos:start="595:63" pos:end="595:75"><expr pos:start="595:63" pos:end="595:75"><name pos:start="595:63" pos:end="595:75">TEST_ALL_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="596:5" pos:end="596:34"><expr pos:start="596:5" pos:end="596:33"><call pos:start="596:5" pos:end="596:33"><name pos:start="596:5" pos:end="596:13">CU_ASSERT</name><argument_list pos:start="596:14" pos:end="596:33">(<argument pos:start="596:15" pos:end="596:32"><expr pos:start="596:15" pos:end="596:32"><name pos:start="596:15" pos:end="596:16">rc</name> <operator pos:start="596:18" pos:end="596:19">==</operator> <name pos:start="596:21" pos:end="596:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="597:5" pos:end="597:59"><expr pos:start="597:5" pos:end="597:58"><name pos:start="597:5" pos:end="597:6">rc</name> <operator pos:start="597:8" pos:end="597:8">=</operator> <call pos:start="597:10" pos:end="597:58"><name pos:start="597:10" pos:end="597:32">est_client_get_csrattrs</name><argument_list pos:start="597:33" pos:end="597:58">(<argument pos:start="597:34" pos:end="597:36"><expr pos:start="597:34" pos:end="597:36"><name pos:start="597:34" pos:end="597:36">ctx</name></expr></argument>, <argument pos:start="597:39" pos:end="597:47"><expr pos:start="597:39" pos:end="597:47"><operator pos:start="597:39" pos:end="597:39">&amp;</operator><name pos:start="597:40" pos:end="597:47">csr_data</name></expr></argument>, <argument pos:start="597:50" pos:end="597:57"><expr pos:start="597:50" pos:end="597:57"><operator pos:start="597:50" pos:end="597:50">&amp;</operator><name pos:start="597:51" pos:end="597:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="598:5" pos:end="598:34"><expr pos:start="598:5" pos:end="598:33"><call pos:start="598:5" pos:end="598:33"><name pos:start="598:5" pos:end="598:13">CU_ASSERT</name><argument_list pos:start="598:14" pos:end="598:33">(<argument pos:start="598:15" pos:end="598:32"><expr pos:start="598:15" pos:end="598:32"><name pos:start="598:15" pos:end="598:16">rc</name> <operator pos:start="598:18" pos:end="598:19">==</operator> <name pos:start="598:21" pos:end="598:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="599:5" pos:end="599:48"><expr pos:start="599:5" pos:end="599:47"><call pos:start="599:5" pos:end="599:47"><name pos:start="599:5" pos:end="599:13">CU_ASSERT</name><argument_list pos:start="599:14" pos:end="599:47">(<argument pos:start="599:15" pos:end="599:46"><expr pos:start="599:15" pos:end="599:46"><name pos:start="599:15" pos:end="599:21">csr_len</name> <operator pos:start="599:23" pos:end="599:24">==</operator> <call pos:start="599:26" pos:end="599:46"><name pos:start="599:26" pos:end="599:31">strlen</name><argument_list pos:start="599:32" pos:end="599:46">(<argument pos:start="599:33" pos:end="599:45"><expr pos:start="599:33" pos:end="599:45"><name pos:start="599:33" pos:end="599:45">TEST_ALL_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="600:5" pos:end="600:77"><expr pos:start="600:5" pos:end="600:76"><call pos:start="600:5" pos:end="600:76"><name pos:start="600:5" pos:end="600:13">CU_ASSERT</name><argument_list pos:start="600:14" pos:end="600:76">(<argument pos:start="600:15" pos:end="600:75"><expr pos:start="600:15" pos:end="600:75"><call pos:start="600:15" pos:end="600:70"><name pos:start="600:15" pos:end="600:21">strncmp</name><argument_list pos:start="600:22" pos:end="600:70">(<argument pos:start="600:23" pos:end="600:35"><expr pos:start="600:23" pos:end="600:35"><name pos:start="600:23" pos:end="600:35">TEST_ALL_ATTR</name></expr></argument>, <argument pos:start="600:38" pos:end="600:60"><expr pos:start="600:38" pos:end="600:60"><operator pos:start="600:38" pos:end="600:38">(</operator><specifier pos:start="600:39" pos:end="600:43">const</specifier> <name pos:start="600:45" pos:end="600:48">char</name> <operator pos:start="600:50" pos:end="600:50">*</operator><operator pos:start="600:51" pos:end="600:51">)</operator> <name pos:start="600:53" pos:end="600:60">csr_data</name></expr></argument>, <argument pos:start="600:63" pos:end="600:69"><expr pos:start="600:63" pos:end="600:69"><name pos:start="600:63" pos:end="600:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="600:72" pos:end="600:73">==</operator> <literal type="number" pos:start="600:75" pos:end="600:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="602:5" pos:end="604:5"><if pos:start="602:5" pos:end="604:5">if <condition pos:start="602:8" pos:end="602:12">(<expr pos:start="602:9" pos:end="602:11"><name pos:start="602:9" pos:end="602:11">ctx</name></expr>)</condition> <block pos:start="602:14" pos:end="604:5">{<block_content pos:start="603:9" pos:end="603:25">
        <expr_stmt pos:start="603:9" pos:end="603:25"><expr pos:start="603:9" pos:end="603:24"><call pos:start="603:9" pos:end="603:24"><name pos:start="603:9" pos:end="603:19">est_destroy</name><argument_list pos:start="603:20" pos:end="603:24">(<argument pos:start="603:21" pos:end="603:23"><expr pos:start="603:21" pos:end="603:23"><name pos:start="603:21" pos:end="603:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="605:5" pos:end="607:5"><if pos:start="605:5" pos:end="607:5">if <condition pos:start="605:8" pos:end="605:16">(<expr pos:start="605:9" pos:end="605:15"><name pos:start="605:9" pos:end="605:15">cacerts</name></expr>)</condition> <block pos:start="605:18" pos:end="607:5">{<block_content pos:start="606:9" pos:end="606:22">
        <expr_stmt pos:start="606:9" pos:end="606:22"><expr pos:start="606:9" pos:end="606:21"><call pos:start="606:9" pos:end="606:21"><name pos:start="606:9" pos:end="606:12">free</name><argument_list pos:start="606:13" pos:end="606:21">(<argument pos:start="606:14" pos:end="606:20"><expr pos:start="606:14" pos:end="606:20"><name pos:start="606:14" pos:end="606:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="608:5" pos:end="610:5"><if pos:start="608:5" pos:end="610:5">if <condition pos:start="608:8" pos:end="608:13">(<expr pos:start="608:9" pos:end="608:12"><name pos:start="608:9" pos:end="608:12">pkey</name></expr>)</condition> <block pos:start="608:15" pos:end="610:5">{<block_content pos:start="609:9" pos:end="609:19">
        <expr_stmt pos:start="609:9" pos:end="609:19"><expr pos:start="609:9" pos:end="609:18"><call pos:start="609:9" pos:end="609:18"><name pos:start="609:9" pos:end="609:12">free</name><argument_list pos:start="609:13" pos:end="609:18">(<argument pos:start="609:14" pos:end="609:17"><expr pos:start="609:14" pos:end="609:17"><name pos:start="609:14" pos:end="609:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="613:1" pos:end="616:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="617:1" pos:end="640:1"><type pos:start="617:1" pos:end="617:3"><name pos:start="617:1" pos:end="617:3">int</name></type> <name pos:start="617:5" pos:end="617:19">us895_add_suite</name> <parameter_list pos:start="617:21" pos:end="617:26">(<parameter pos:start="617:22" pos:end="617:25"><decl pos:start="617:22" pos:end="617:25"><type pos:start="617:22" pos:end="617:25"><name pos:start="617:22" pos:end="617:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="618:1" pos:end="640:1">{<block_content pos:start="620:5" pos:end="640:0">
<cpp:ifdef pos:start="619:1" pos:end="619:17">#<cpp:directive pos:start="619:2" pos:end="619:6">ifdef</cpp:directive> <name pos:start="619:8" pos:end="619:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="620:5" pos:end="620:28"><decl pos:start="620:5" pos:end="620:27"><type pos:start="620:5" pos:end="620:13"><name pos:start="620:5" pos:end="620:13">CU_pSuite</name></type> <name pos:start="620:15" pos:end="620:20">pSuite</name> <init pos:start="620:22" pos:end="620:27">= <expr pos:start="620:24" pos:end="620:27"><name pos:start="620:24" pos:end="620:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="622:5" pos:end="622:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="623:5" pos:end="625:33"><expr pos:start="623:5" pos:end="625:32"><name pos:start="623:5" pos:end="623:10">pSuite</name> <operator pos:start="623:12" pos:end="623:12">=</operator> <call pos:start="623:14" pos:end="625:32"><name pos:start="623:14" pos:end="623:25">CU_add_suite</name><argument_list pos:start="623:26" pos:end="625:32">(<argument pos:start="623:27" pos:end="623:48"><expr pos:start="623:27" pos:end="623:48"><literal type="string" pos:start="623:27" pos:end="623:48">"us895_proxy_csrattrs"</literal></expr></argument>,
            <argument pos:start="624:13" pos:end="624:28"><expr pos:start="624:13" pos:end="624:28"><name pos:start="624:13" pos:end="624:28">us895_init_suite</name></expr></argument>,
            <argument pos:start="625:13" pos:end="625:31"><expr pos:start="625:13" pos:end="625:31"><name pos:start="625:13" pos:end="625:31">us895_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="626:5" pos:end="629:5"><if pos:start="626:5" pos:end="629:5">if <condition pos:start="626:8" pos:end="626:23">(<expr pos:start="626:9" pos:end="626:22"><name pos:start="626:9" pos:end="626:12">NULL</name> <operator pos:start="626:14" pos:end="626:15">==</operator> <name pos:start="626:17" pos:end="626:22">pSuite</name></expr>)</condition> <block pos:start="626:25" pos:end="629:5">{<block_content pos:start="627:9" pos:end="628:30">
        <expr_stmt pos:start="627:9" pos:end="627:30"><expr pos:start="627:9" pos:end="627:29"><call pos:start="627:9" pos:end="627:29"><name pos:start="627:9" pos:end="627:27">CU_cleanup_registry</name><argument_list pos:start="627:28" pos:end="627:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="628:9" pos:end="628:30">return <expr pos:start="628:16" pos:end="628:29"><call pos:start="628:16" pos:end="628:29"><name pos:start="628:16" pos:end="628:27">CU_get_error</name><argument_list pos:start="628:28" pos:end="628:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="631:5" pos:end="631:36">/* add the tests to the suite */</comment>
    <if_stmt pos:start="632:5" pos:end="636:5"><if pos:start="632:5" pos:end="636:5">if <condition pos:start="632:8" pos:end="632:80">(<expr pos:start="632:9" pos:end="632:79"><operator pos:start="632:9" pos:end="632:9">(</operator><name pos:start="632:10" pos:end="632:13">NULL</name> <operator pos:start="632:15" pos:end="632:16">==</operator> <call pos:start="632:18" pos:end="632:78"><name pos:start="632:18" pos:end="632:28">CU_add_test</name><argument_list pos:start="632:29" pos:end="632:78">(<argument pos:start="632:30" pos:end="632:35"><expr pos:start="632:30" pos:end="632:35"><name pos:start="632:30" pos:end="632:35">pSuite</name></expr></argument>, <argument pos:start="632:38" pos:end="632:64"><expr pos:start="632:38" pos:end="632:64"><literal type="string" pos:start="632:38" pos:end="632:64">"CSR Proxy Attributes API1"</literal></expr></argument>, <argument pos:start="632:67" pos:end="632:77"><expr pos:start="632:67" pos:end="632:77"><name pos:start="632:67" pos:end="632:77">us895_test1</name></expr></argument>)</argument_list></call><operator pos:start="632:79" pos:end="632:79">)</operator></expr>)</condition>
    <block pos:start="633:5" pos:end="636:5">{<block_content pos:start="634:9" pos:end="635:30">
        <expr_stmt pos:start="634:9" pos:end="634:30"><expr pos:start="634:9" pos:end="634:29"><call pos:start="634:9" pos:end="634:29"><name pos:start="634:9" pos:end="634:27">CU_cleanup_registry</name><argument_list pos:start="634:28" pos:end="634:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="635:9" pos:end="635:30">return <expr pos:start="635:16" pos:end="635:29"><call pos:start="635:16" pos:end="635:29"><name pos:start="635:16" pos:end="635:27">CU_get_error</name><argument_list pos:start="635:28" pos:end="635:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="638:5" pos:end="640:0">return <expr pos:start="638:12" pos:end="638:22"><name pos:start="638:12" pos:end="638:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="639:1" pos:end="639:6">#<cpp:directive pos:start="639:2" pos:end="639:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
