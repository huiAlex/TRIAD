<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us4020.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="11:3">/*------------------------------------------------------------------
 * us4020.c - Unit Test for User Story 4020 - Unit test client
 *            proxy mode.  Test the new API function and
 *            verify correct operation of Client proxy modes.
 *
 * October, 2016
 *
 * Copyright (c) 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="12:1" pos:end="12:18">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="13:1" pos:end="13:13">#<cpp:directive pos:start="13:2" pos:end="13:7">ifndef</cpp:directive> <name pos:start="13:9" pos:end="13:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="14:1" pos:end="14:19">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="16:1" pos:end="16:16">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:16">"est.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:22">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:23">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:23">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="20:1" pos:end="20:22">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="21:1" pos:end="21:24">#<cpp:directive pos:start="21:2" pos:end="21:8">include</cpp:directive> <cpp:file pos:start="21:10" pos:end="21:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="23:1" pos:end="23:17">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="24:1" pos:end="24:24">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="25:1" pos:end="25:28">#<cpp:directive pos:start="25:2" pos:end="25:8">include</cpp:directive> <cpp:file pos:start="25:10" pos:end="25:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="26:1" pos:end="26:6">#<cpp:directive pos:start="26:2" pos:end="26:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="27:1" pos:end="27:18">#<cpp:directive pos:start="27:2" pos:end="27:8">include</cpp:directive> <cpp:file pos:start="27:10" pos:end="27:18">&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="28:1" pos:end="28:18">#<cpp:directive pos:start="28:2" pos:end="28:8">include</cpp:directive> <cpp:file pos:start="28:10" pos:end="28:18">&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:define pos:start="30:1" pos:end="30:26">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:21"><name pos:start="30:9" pos:end="30:21">MAX_4020_CMDS</name></cpp:macro> <cpp:value pos:start="30:23" pos:end="30:26">1024</cpp:value></cpp:define>

<decl_stmt pos:start="32:1" pos:end="32:37"><decl pos:start="32:1" pos:end="32:36"><type pos:start="32:1" pos:end="32:22"><specifier pos:start="32:1" pos:end="32:6">static</specifier> <name pos:start="32:8" pos:end="32:15">unsigned</name> <name pos:start="32:17" pos:end="32:20">char</name> <modifier pos:start="32:22" pos:end="32:22">*</modifier></type><name pos:start="32:23" pos:end="32:29">cacerts</name> <init pos:start="32:31" pos:end="32:36">= <expr pos:start="32:33" pos:end="32:36"><name pos:start="32:33" pos:end="32:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="33:1" pos:end="54:0"><decl pos:start="33:1" pos:end="33:26"><type pos:start="33:1" pos:end="33:10"><specifier pos:start="33:1" pos:end="33:6">static</specifier> <name pos:start="33:8" pos:end="33:10">int</name></type> <name pos:start="33:12" pos:end="33:22">cacerts_len</name> <init pos:start="33:24" pos:end="33:26">= <expr pos:start="33:26" pos:end="33:26"><literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="35:1" pos:end="35:55">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:33">US4020_SERVER_DOMAIN_NAME</name></cpp:macro> <cpp:value pos:start="35:35" pos:end="35:55">"localhost.cisco.com"</cpp:value></cpp:define>
<cpp:define pos:start="36:1" pos:end="36:43">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:24"><name pos:start="36:9" pos:end="36:24">US4020_SERVER_IP</name></cpp:macro>        <cpp:value pos:start="36:33" pos:end="36:43">"127.0.0.1"</cpp:value></cpp:define>	
<cpp:define pos:start="37:1" pos:end="37:37">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:30">US4020_SERVER_TCP_PORT</name></cpp:macro>	<cpp:value pos:start="37:33" pos:end="37:37">40200</cpp:value></cpp:define>

<cpp:define pos:start="39:1" pos:end="39:43">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:23">US4020_PROXY_IP</name></cpp:macro>         <cpp:value pos:start="39:33" pos:end="39:43">"127.0.0.1"</cpp:value></cpp:define>	
<cpp:define pos:start="40:1" pos:end="40:37">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:29"><name pos:start="40:9" pos:end="40:29">US4020_PROXY_TCP_PORT</name></cpp:macro>	<cpp:value pos:start="40:33" pos:end="40:37">40208</cpp:value></cpp:define>

<cpp:define pos:start="42:1" pos:end="42:37">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:18"><name pos:start="42:9" pos:end="42:18">US4020_UID</name></cpp:macro>	    <cpp:value pos:start="42:29" pos:end="42:37">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:36">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:18">US4020_PWD</name></cpp:macro>	    <cpp:value pos:start="43:29" pos:end="43:36">"estpwd"</cpp:value></cpp:define>

<cpp:ifndef pos:start="45:1" pos:end="45:13">#<cpp:directive pos:start="45:2" pos:end="45:7">ifndef</cpp:directive> <name pos:start="45:9" pos:end="45:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="46:1" pos:end="46:50">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:22"><name pos:start="46:9" pos:end="46:22">US4020_CACERTS</name></cpp:macro>	     <cpp:value pos:start="46:30" pos:end="46:50">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<comment type="block" pos:start="47:1" pos:end="47:49">/* #define US4020_CACERT "CA/estCA/cacert.crt" */</comment>
<comment type="block" pos:start="48:1" pos:end="48:75">/* #define US4020_SERVER_CERT "CA/estCA/private/estservercertandkey.pem" */</comment>
<comment type="block" pos:start="49:1" pos:end="49:74">/* #define US4020_SERVER_KEY "CA/estCA/private/estservercertandkey.pem" */</comment>
<comment type="block" pos:start="50:1" pos:end="50:75">/* #define US4020_CLIENT_CERT "CA/estCA/private/estservercertandkey.pem" */</comment>
<comment type="block" pos:start="51:1" pos:end="51:75">/* #define US4020_CLIENT_KEY  "CA/estCA/private/estservercertandkey.pem" */</comment>
<cpp:else pos:start="52:1" pos:end="52:5">#<cpp:directive pos:start="52:2" pos:end="52:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="53:1" pos:end="53:52">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:22">US4020_CACERTS</name></cpp:macro>	     <cpp:value pos:start="53:30" pos:end="53:52">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<comment type="block" pos:start="54:1" pos:end="54:51">/* #define US4020_CACERT "CA\\estCA\\cacert.crt" */</comment>
<comment type="block" pos:start="55:1" pos:end="55:78">/* #define US4020_SERVER_CERT "CA\\estCA\\private\\estservercertandkey.pem" */</comment>
<comment type="block" pos:start="56:1" pos:end="56:77">/* #define US4020_SERVER_KEY "CA\\estCA\\private\\estservercertandkey.pem" */</comment>
<comment type="block" pos:start="57:1" pos:end="57:78">/* #define US4020_CLIENT_CERT "CA\\estCA\\private\\estservercertandkey.pem" */</comment>
<comment type="block" pos:start="58:1" pos:end="58:77">/* #define US4020_CLIENT_KEY  "CA\\estCA\\private/estservercertandkey.pem" */</comment>

<decl_stmt pos:start="60:1" pos:end="60:48"><decl pos:start="60:1" pos:end="60:47"><type pos:start="60:1" pos:end="60:23"><specifier pos:start="60:1" pos:end="60:6">static</specifier> <name pos:start="60:8" pos:end="60:23">CRITICAL_SECTION</name></type> <name pos:start="60:25" pos:end="60:47">logger_critical_section</name></decl>;</decl_stmt>  
<function pos:start="61:1" pos:end="69:0"><type pos:start="61:1" pos:end="61:11"><specifier pos:start="61:1" pos:end="61:6">static</specifier> <name pos:start="61:8" pos:end="61:11">void</name></type> <name pos:start="61:13" pos:end="61:32">us4020_logger_stderr</name> <parameter_list pos:start="61:34" pos:end="61:58">(<parameter pos:start="61:35" pos:end="61:46"><decl pos:start="61:35" pos:end="61:46"><type pos:start="61:35" pos:end="61:46"><name pos:start="61:35" pos:end="61:38">char</name> <modifier pos:start="61:40" pos:end="61:40">*</modifier></type><name pos:start="61:41" pos:end="61:46">format</name></decl></parameter>, <parameter pos:start="61:49" pos:end="61:57"><decl pos:start="61:49" pos:end="61:57"><type pos:start="61:49" pos:end="61:57"><name pos:start="61:49" pos:end="61:55">va_list</name></type> <name pos:start="61:57" pos:end="61:57">l</name></decl></parameter>)</parameter_list> 
<block pos:start="62:1" pos:end="69:0">{<block_content pos:start="63:5" pos:end="66:51">
    <expr_stmt pos:start="63:5" pos:end="63:51"><expr pos:start="63:5" pos:end="63:50"><call pos:start="63:5" pos:end="63:50"><name pos:start="63:5" pos:end="63:24">EnterCriticalSection</name><argument_list pos:start="63:25" pos:end="63:50">(<argument pos:start="63:26" pos:end="63:49"><expr pos:start="63:26" pos:end="63:49"><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="64:9" pos:end="64:36"><expr pos:start="64:9" pos:end="64:35"><call pos:start="64:9" pos:end="64:35"><name pos:start="64:9" pos:end="64:16">vfprintf</name><argument_list pos:start="64:17" pos:end="64:35">(<argument pos:start="64:18" pos:end="64:23"><expr pos:start="64:18" pos:end="64:23"><name pos:start="64:18" pos:end="64:23">stderr</name></expr></argument>, <argument pos:start="64:26" pos:end="64:31"><expr pos:start="64:26" pos:end="64:31"><name pos:start="64:26" pos:end="64:31">format</name></expr></argument>, <argument pos:start="64:34" pos:end="64:34"><expr pos:start="64:34" pos:end="64:34"><name pos:start="64:34" pos:end="64:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="65:9" pos:end="65:23"><expr pos:start="65:9" pos:end="65:22"><call pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:14">fflush</name><argument_list pos:start="65:15" pos:end="65:22">(<argument pos:start="65:16" pos:end="65:21"><expr pos:start="65:16" pos:end="65:21"><name pos:start="65:16" pos:end="65:21">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:51"><expr pos:start="66:5" pos:end="66:50"><call pos:start="66:5" pos:end="66:50"><name pos:start="66:5" pos:end="66:24">LeaveCriticalSection</name><argument_list pos:start="66:25" pos:end="66:50">(<argument pos:start="66:26" pos:end="66:49"><expr pos:start="66:26" pos:end="66:49"><operator pos:start="66:26" pos:end="66:26">&amp;</operator><name pos:start="66:27" pos:end="66:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
<cpp:endif pos:start="68:1" pos:end="68:6">#<cpp:directive pos:start="68:2" pos:end="68:6">endif</cpp:directive></cpp:endif> 

<function pos:start="70:1" pos:end="96:1"><type pos:start="70:1" pos:end="70:17"><specifier pos:start="70:1" pos:end="70:6">static</specifier> <name pos:start="70:8" pos:end="70:15">EVP_PKEY</name> <modifier pos:start="70:17" pos:end="70:17">*</modifier></type><name pos:start="70:18" pos:end="70:37">generate_private_key</name> <parameter_list pos:start="70:39" pos:end="70:44">(<parameter pos:start="70:40" pos:end="70:43"><decl pos:start="70:40" pos:end="70:43"><type pos:start="70:40" pos:end="70:43"><name pos:start="70:40" pos:end="70:43">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="71:1" pos:end="96:1">{<block_content pos:start="72:5" pos:end="95:18">
    <decl_stmt pos:start="72:5" pos:end="72:25"><decl pos:start="72:5" pos:end="72:24"><type pos:start="72:5" pos:end="72:9"><name pos:start="72:5" pos:end="72:7">RSA</name> <modifier pos:start="72:9" pos:end="72:9">*</modifier></type><name pos:start="72:10" pos:end="72:12">rsa</name> <init pos:start="72:14" pos:end="72:24">= <expr pos:start="72:16" pos:end="72:24"><call pos:start="72:16" pos:end="72:24"><name pos:start="72:16" pos:end="72:22">RSA_new</name><argument_list pos:start="72:23" pos:end="72:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="73:5" pos:end="73:26"><decl pos:start="73:5" pos:end="73:25"><type pos:start="73:5" pos:end="73:12"><name pos:start="73:5" pos:end="73:10">BIGNUM</name> <modifier pos:start="73:12" pos:end="73:12">*</modifier></type><name pos:start="73:13" pos:end="73:14">bn</name> <init pos:start="73:16" pos:end="73:25">= <expr pos:start="73:18" pos:end="73:25"><call pos:start="73:18" pos:end="73:25"><name pos:start="73:18" pos:end="73:23">BN_new</name><argument_list pos:start="73:24" pos:end="73:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="74:5" pos:end="74:19"><decl pos:start="74:5" pos:end="74:18"><type pos:start="74:5" pos:end="74:14"><name pos:start="74:5" pos:end="74:12">EVP_PKEY</name> <modifier pos:start="74:14" pos:end="74:14">*</modifier></type><name pos:start="74:15" pos:end="74:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="76:5" pos:end="78:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><call pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:15">BN_set_word</name><argument_list pos:start="79:16" pos:end="79:28">(<argument pos:start="79:17" pos:end="79:18"><expr pos:start="79:17" pos:end="79:18"><name pos:start="79:17" pos:end="79:18">bn</name></expr></argument>, <argument pos:start="79:21" pos:end="79:27"><expr pos:start="79:21" pos:end="79:27"><literal type="number" pos:start="79:21" pos:end="79:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="80:45"><expr pos:start="80:5" pos:end="80:44"><call pos:start="80:5" pos:end="80:44"><name pos:start="80:5" pos:end="80:23">RSA_generate_key_ex</name><argument_list pos:start="80:24" pos:end="80:44">(<argument pos:start="80:25" pos:end="80:27"><expr pos:start="80:25" pos:end="80:27"><name pos:start="80:25" pos:end="80:27">rsa</name></expr></argument>, <argument pos:start="80:30" pos:end="80:33"><expr pos:start="80:30" pos:end="80:33"><literal type="number" pos:start="80:30" pos:end="80:33">1024</literal></expr></argument>, <argument pos:start="80:36" pos:end="80:37"><expr pos:start="80:36" pos:end="80:37"><name pos:start="80:36" pos:end="80:37">bn</name></expr></argument>, <argument pos:start="80:40" pos:end="80:43"><expr pos:start="80:40" pos:end="80:43"><name pos:start="80:40" pos:end="80:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="82:5" pos:end="82:26"><expr pos:start="82:5" pos:end="82:25"><name pos:start="82:5" pos:end="82:8">pkey</name> <operator pos:start="82:10" pos:end="82:10">=</operator> <call pos:start="82:12" pos:end="82:25"><name pos:start="82:12" pos:end="82:23">EVP_PKEY_new</name><argument_list pos:start="82:24" pos:end="82:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="83:5" pos:end="86:5"><if pos:start="83:5" pos:end="86:5">if <condition pos:start="83:8" pos:end="83:19">(<expr pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:12">pkey</name><operator pos:start="83:13" pos:end="83:14">==</operator><name pos:start="83:15" pos:end="83:18">NULL</name></expr>)</condition> <block pos:start="83:21" pos:end="86:5">{<block_content pos:start="84:9" pos:end="85:20">
        <expr_stmt pos:start="84:9" pos:end="84:71"><expr pos:start="84:9" pos:end="84:70"><call pos:start="84:9" pos:end="84:70"><name pos:start="84:9" pos:end="84:14">printf</name><argument_list pos:start="84:15" pos:end="84:70">(<argument pos:start="84:16" pos:end="84:69"><expr pos:start="84:16" pos:end="84:69"><literal type="string" pos:start="84:16" pos:end="84:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="85:9" pos:end="85:20">return <expr pos:start="85:16" pos:end="85:19"><name pos:start="85:16" pos:end="85:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="87:5" pos:end="90:5"><if pos:start="87:5" pos:end="90:5">if <condition pos:start="87:8" pos:end="87:38">(<expr pos:start="87:9" pos:end="87:37"><operator pos:start="87:9" pos:end="87:9">!</operator><call pos:start="87:10" pos:end="87:37"><name pos:start="87:10" pos:end="87:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="87:27" pos:end="87:37">(<argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><name pos:start="87:28" pos:end="87:31">pkey</name></expr></argument>, <argument pos:start="87:34" pos:end="87:36"><expr pos:start="87:34" pos:end="87:36"><name pos:start="87:34" pos:end="87:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:40" pos:end="90:5">{<block_content pos:start="88:9" pos:end="89:20">
        <expr_stmt pos:start="88:9" pos:end="88:69"><expr pos:start="88:9" pos:end="88:68"><call pos:start="88:9" pos:end="88:68"><name pos:start="88:9" pos:end="88:14">printf</name><argument_list pos:start="88:15" pos:end="88:68">(<argument pos:start="88:16" pos:end="88:67"><expr pos:start="88:16" pos:end="88:67"><literal type="string" pos:start="88:16" pos:end="88:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="89:9" pos:end="89:20">return <expr pos:start="89:16" pos:end="89:19"><name pos:start="89:16" pos:end="89:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>        
    
    <expr_stmt pos:start="92:5" pos:end="92:18"><expr pos:start="92:5" pos:end="92:17"><call pos:start="92:5" pos:end="92:17"><name pos:start="92:5" pos:end="92:12">RSA_free</name><argument_list pos:start="92:13" pos:end="92:17">(<argument pos:start="92:14" pos:end="92:16"><expr pos:start="92:14" pos:end="92:16"><name pos:start="92:14" pos:end="92:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><call pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:11">BN_free</name><argument_list pos:start="93:12" pos:end="93:15">(<argument pos:start="93:13" pos:end="93:14"><expr pos:start="93:13" pos:end="93:14"><name pos:start="93:13" pos:end="93:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="95:5" pos:end="95:18">return <expr pos:start="95:12" pos:end="95:17"><operator pos:start="95:12" pos:end="95:12">(</operator><name pos:start="95:13" pos:end="95:16">pkey</name><operator pos:start="95:17" pos:end="95:17">)</operator></expr>;</return>
</block_content>}</block></function>


<function pos:start="99:1" pos:end="101:1"><type pos:start="99:1" pos:end="99:11"><specifier pos:start="99:1" pos:end="99:6">static</specifier> <name pos:start="99:8" pos:end="99:11">void</name></type> <name pos:start="99:13" pos:end="99:24">us4020_clean</name> <parameter_list pos:start="99:26" pos:end="99:31">(<parameter pos:start="99:27" pos:end="99:30"><decl pos:start="99:27" pos:end="99:30"><type pos:start="99:27" pos:end="99:30"><name pos:start="99:27" pos:end="99:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="100:1" pos:end="101:1">{<block_content>
</block_content>}</block></function>

<function pos:start="103:1" pos:end="122:0"><type pos:start="103:1" pos:end="103:3"><name pos:start="103:1" pos:end="103:3">int</name></type> <name pos:start="103:5" pos:end="103:23">us4020_start_server</name> <parameter_list pos:start="103:25" pos:end="103:52">(<parameter pos:start="103:26" pos:end="103:42"><decl pos:start="103:26" pos:end="103:42"><type pos:start="103:26" pos:end="103:42"><name pos:start="103:26" pos:end="103:28">int</name></type> <name pos:start="103:30" pos:end="103:42">manual_enroll</name></decl></parameter>, <parameter pos:start="103:45" pos:end="103:51"><decl pos:start="103:45" pos:end="103:51"><type pos:start="103:45" pos:end="103:51"><name pos:start="103:45" pos:end="103:47">int</name></type> <name pos:start="103:49" pos:end="103:51">nid</name></decl></parameter>)</parameter_list>
<block pos:start="104:1" pos:end="122:0">{<block_content pos:start="105:5" pos:end="117:14">
    <decl_stmt pos:start="105:5" pos:end="105:11"><decl pos:start="105:5" pos:end="105:10"><type pos:start="105:5" pos:end="105:7"><name pos:start="105:5" pos:end="105:7">int</name></type> <name pos:start="105:9" pos:end="105:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="107:5" pos:end="116:23"><expr pos:start="107:5" pos:end="116:22"><name pos:start="107:5" pos:end="107:6">rv</name> <operator pos:start="107:8" pos:end="107:8">=</operator> <call pos:start="107:10" pos:end="116:22"><name pos:start="107:10" pos:end="107:17">st_start</name><argument_list pos:start="107:18" pos:end="116:22">(<argument pos:start="107:19" pos:end="107:40"><expr pos:start="107:19" pos:end="107:40"><name pos:start="107:19" pos:end="107:40">US4020_SERVER_TCP_PORT</name></expr></argument>, 
	          <argument pos:start="108:19" pos:end="108:60"><expr pos:start="108:19" pos:end="108:60"><literal type="string" pos:start="108:19" pos:end="108:60">"CA/estCA/private/estservercertandkey.pem"</literal></expr></argument>,
	          <argument pos:start="109:19" pos:end="109:60"><expr pos:start="109:19" pos:end="109:60"><literal type="string" pos:start="109:19" pos:end="109:60">"CA/estCA/private/estservercertandkey.pem"</literal></expr></argument>,
	          <argument pos:start="110:19" pos:end="110:28"><expr pos:start="110:19" pos:end="110:28"><literal type="string" pos:start="110:19" pos:end="110:28">"estrealm"</literal></expr></argument>,
	          <argument pos:start="111:19" pos:end="111:39"><expr pos:start="111:19" pos:end="111:39"><literal type="string" pos:start="111:19" pos:end="111:39">"CA/estCA/cacert.crt"</literal></expr></argument>,
	          <argument pos:start="112:19" pos:end="112:39"><expr pos:start="112:19" pos:end="112:39"><literal type="string" pos:start="112:19" pos:end="112:39">"CA/trustedcerts.crt"</literal></expr></argument>,
	          <argument pos:start="113:19" pos:end="113:39"><expr pos:start="113:19" pos:end="113:39"><literal type="string" pos:start="113:19" pos:end="113:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="114:19" pos:end="114:31"><expr pos:start="114:19" pos:end="114:31"><name pos:start="114:19" pos:end="114:31">manual_enroll</name></expr></argument>,
		  <argument pos:start="115:19" pos:end="115:19"><expr pos:start="115:19" pos:end="115:19"><literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr></argument>,
		  <argument pos:start="116:19" pos:end="116:21"><expr pos:start="116:19" pos:end="116:21"><name pos:start="116:19" pos:end="116:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="117:5" pos:end="117:14">return <expr pos:start="117:12" pos:end="117:13"><name pos:start="117:12" pos:end="117:13">rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:define pos:start="120:1" pos:end="120:23">#<cpp:directive pos:start="120:2" pos:end="120:7">define</cpp:directive> <cpp:macro pos:start="120:9" pos:end="120:19"><name pos:start="120:9" pos:end="120:19">MAX_CMD_BUF</name></cpp:macro> <cpp:value pos:start="120:21" pos:end="120:23">256</cpp:value></cpp:define>
<cpp:define pos:start="121:1" pos:end="121:23">#<cpp:directive pos:start="121:2" pos:end="121:7">define</cpp:directive> <cpp:macro pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:19">MAX_PID_BUF</name></cpp:macro> <cpp:value pos:start="121:21" pos:end="121:23">128</cpp:value></cpp:define>
<function pos:start="122:1" pos:end="140:1"><type pos:start="122:1" pos:end="122:11"><specifier pos:start="122:1" pos:end="122:6">static</specifier> <name pos:start="122:8" pos:end="122:11">void</name></type> <name pos:start="122:13" pos:end="122:28">shutdown_antinat</name> <parameter_list pos:start="122:30" pos:end="122:35">(<parameter pos:start="122:31" pos:end="122:34"><decl pos:start="122:31" pos:end="122:34"><type pos:start="122:31" pos:end="122:34"><name pos:start="122:31" pos:end="122:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="123:1" pos:end="140:1">{<block_content pos:start="124:5" pos:end="139:5">
    <decl_stmt pos:start="124:5" pos:end="124:11"><decl pos:start="124:5" pos:end="124:10"><type pos:start="124:5" pos:end="124:7"><name pos:start="124:5" pos:end="124:7">int</name></type> <name pos:start="124:9" pos:end="124:10">fh</name></decl>;</decl_stmt>
    <decl_stmt pos:start="125:5" pos:end="125:31"><decl pos:start="125:5" pos:end="125:30"><type pos:start="125:5" pos:end="125:8"><name pos:start="125:5" pos:end="125:8">char</name></type> <name pos:start="125:10" pos:end="125:30"><name pos:start="125:10" pos:end="125:17">read_pid</name><index pos:start="125:18" pos:end="125:30">[<expr pos:start="125:19" pos:end="125:29"><name pos:start="125:19" pos:end="125:29">MAX_PID_BUF</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="126:5" pos:end="126:26"><decl pos:start="126:5" pos:end="126:25"><type pos:start="126:5" pos:end="126:8"><name pos:start="126:5" pos:end="126:8">char</name></type> <name pos:start="126:10" pos:end="126:25"><name pos:start="126:10" pos:end="126:12">cmd</name><index pos:start="126:13" pos:end="126:25">[<expr pos:start="126:14" pos:end="126:24"><name pos:start="126:14" pos:end="126:24">MAX_CMD_BUF</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="127:5" pos:end="127:15"><decl pos:start="127:5" pos:end="127:14"><type pos:start="127:5" pos:end="127:7"><name pos:start="127:5" pos:end="127:7">int</name></type> <name pos:start="127:9" pos:end="127:10">rv</name> <init pos:start="127:12" pos:end="127:14">= <expr pos:start="127:14" pos:end="127:14"><literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt pos:start="129:5" pos:end="129:46"><expr pos:start="129:5" pos:end="129:45"><name pos:start="129:5" pos:end="129:6">fh</name> <operator pos:start="129:8" pos:end="129:8">=</operator> <call pos:start="129:10" pos:end="129:45"><name pos:start="129:10" pos:end="129:13">open</name> <argument_list pos:start="129:15" pos:end="129:45">(<argument pos:start="129:16" pos:end="129:30"><expr pos:start="129:16" pos:end="129:30"><literal type="string" pos:start="129:16" pos:end="129:30">"./antinat-pid"</literal></expr></argument>, <argument pos:start="129:33" pos:end="129:38"><expr pos:start="129:33" pos:end="129:38"><name pos:start="129:33" pos:end="129:38">O_RDWR</name></expr></argument>, <argument pos:start="129:41" pos:end="129:44"><expr pos:start="129:41" pos:end="129:44"><literal type="number" pos:start="129:41" pos:end="129:44">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="131:5" pos:end="131:42"><expr pos:start="131:5" pos:end="131:41"><operator pos:start="131:5" pos:end="131:5">(</operator><name pos:start="131:6" pos:end="131:9">void</name><operator pos:start="131:10" pos:end="131:10">)</operator><call pos:start="131:11" pos:end="131:41"><name pos:start="131:11" pos:end="131:14">read</name><argument_list pos:start="131:15" pos:end="131:41">(<argument pos:start="131:16" pos:end="131:17"><expr pos:start="131:16" pos:end="131:17"><name pos:start="131:16" pos:end="131:17">fh</name></expr></argument>, <argument pos:start="131:20" pos:end="131:27"><expr pos:start="131:20" pos:end="131:27"><name pos:start="131:20" pos:end="131:27">read_pid</name></expr></argument>, <argument pos:start="131:30" pos:end="131:40"><expr pos:start="131:30" pos:end="131:40"><name pos:start="131:30" pos:end="131:40">MAX_PID_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="132:5" pos:end="132:48"><expr pos:start="132:5" pos:end="132:47"><call pos:start="132:5" pos:end="132:47"><name pos:start="132:5" pos:end="132:10">printf</name><argument_list pos:start="132:11" pos:end="132:47">(<argument pos:start="132:12" pos:end="132:36"><expr pos:start="132:12" pos:end="132:36"><literal type="string" pos:start="132:12" pos:end="132:36">"pid read back in = %s\n"</literal></expr></argument>, <argument pos:start="132:39" pos:end="132:46"><expr pos:start="132:39" pos:end="132:46"><name pos:start="132:39" pos:end="132:46">read_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="134:5" pos:end="134:54"><expr pos:start="134:5" pos:end="134:53"><call pos:start="134:5" pos:end="134:53"><name pos:start="134:5" pos:end="134:12">snprintf</name><argument_list pos:start="134:13" pos:end="134:53">(<argument pos:start="134:14" pos:end="134:16"><expr pos:start="134:14" pos:end="134:16"><name pos:start="134:14" pos:end="134:16">cmd</name></expr></argument>, <argument pos:start="134:19" pos:end="134:29"><expr pos:start="134:19" pos:end="134:29"><name pos:start="134:19" pos:end="134:29">MAX_CMD_BUF</name></expr></argument>, <argument pos:start="134:32" pos:end="134:42"><expr pos:start="134:32" pos:end="134:42"><literal type="string" pos:start="134:32" pos:end="134:42">"kill %s\n"</literal></expr></argument>, <argument pos:start="134:45" pos:end="134:52"><expr pos:start="134:45" pos:end="134:52"><name pos:start="134:45" pos:end="134:52">read_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:6">rv</name> <operator pos:start="135:8" pos:end="135:8">=</operator> <call pos:start="135:10" pos:end="135:20"><name pos:start="135:10" pos:end="135:15">system</name><argument_list pos:start="135:16" pos:end="135:20">(<argument pos:start="135:17" pos:end="135:19"><expr pos:start="135:17" pos:end="135:19"><name pos:start="135:17" pos:end="135:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="139:5"><if pos:start="137:5" pos:end="139:5">if <condition pos:start="137:8" pos:end="137:11">(<expr pos:start="137:9" pos:end="137:10"><name pos:start="137:9" pos:end="137:10">rv</name></expr>)</condition> <block pos:start="137:13" pos:end="139:5">{<block_content pos:start="138:9" pos:end="138:49">
        <expr_stmt pos:start="138:9" pos:end="138:49"><expr pos:start="138:9" pos:end="138:48"><call pos:start="138:9" pos:end="138:48"><name pos:start="138:9" pos:end="138:14">printf</name><argument_list pos:start="138:15" pos:end="138:48">(<argument pos:start="138:16" pos:end="138:47"><expr pos:start="138:16" pos:end="138:47"><literal type="string" pos:start="138:16" pos:end="138:47">"Failed to terminate antinat.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="142:1" pos:end="162:1"><type pos:start="142:1" pos:end="142:11"><specifier pos:start="142:1" pos:end="142:6">static</specifier> <name pos:start="142:8" pos:end="142:11">void</name></type> <name pos:start="142:13" pos:end="142:28">shutdown_haproxy</name> <parameter_list pos:start="142:30" pos:end="142:35">(<parameter pos:start="142:31" pos:end="142:34"><decl pos:start="142:31" pos:end="142:34"><type pos:start="142:31" pos:end="142:34"><name pos:start="142:31" pos:end="142:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="143:1" pos:end="162:1">{<block_content pos:start="144:5" pos:end="161:5">
    <decl_stmt pos:start="144:5" pos:end="144:11"><decl pos:start="144:5" pos:end="144:10"><type pos:start="144:5" pos:end="144:7"><name pos:start="144:5" pos:end="144:7">int</name></type> <name pos:start="144:9" pos:end="144:10">fh</name></decl>;</decl_stmt>
<comment type="block" pos:start="145:1" pos:end="145:33">/*     int readbyte_count = 0; */</comment>
    <decl_stmt pos:start="146:5" pos:end="146:31"><decl pos:start="146:5" pos:end="146:30"><type pos:start="146:5" pos:end="146:8"><name pos:start="146:5" pos:end="146:8">char</name></type> <name pos:start="146:10" pos:end="146:30"><name pos:start="146:10" pos:end="146:17">read_pid</name><index pos:start="146:18" pos:end="146:30">[<expr pos:start="146:19" pos:end="146:29"><name pos:start="146:19" pos:end="146:29">MAX_PID_BUF</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="147:5" pos:end="147:26"><decl pos:start="147:5" pos:end="147:25"><type pos:start="147:5" pos:end="147:8"><name pos:start="147:5" pos:end="147:8">char</name></type> <name pos:start="147:10" pos:end="147:25"><name pos:start="147:10" pos:end="147:12">cmd</name><index pos:start="147:13" pos:end="147:25">[<expr pos:start="147:14" pos:end="147:24"><name pos:start="147:14" pos:end="147:24">MAX_CMD_BUF</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="148:5" pos:end="148:15"><decl pos:start="148:5" pos:end="148:14"><type pos:start="148:5" pos:end="148:7"><name pos:start="148:5" pos:end="148:7">int</name></type> <name pos:start="148:9" pos:end="148:10">rv</name> <init pos:start="148:12" pos:end="148:14">= <expr pos:start="148:14" pos:end="148:14"><literal type="number" pos:start="148:14" pos:end="148:14">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:46"><expr pos:start="150:5" pos:end="150:45"><name pos:start="150:5" pos:end="150:6">fh</name> <operator pos:start="150:8" pos:end="150:8">=</operator> <call pos:start="150:10" pos:end="150:45"><name pos:start="150:10" pos:end="150:13">open</name> <argument_list pos:start="150:15" pos:end="150:45">(<argument pos:start="150:16" pos:end="150:30"><expr pos:start="150:16" pos:end="150:30"><literal type="string" pos:start="150:16" pos:end="150:30">"./haproxy.pid"</literal></expr></argument>, <argument pos:start="150:33" pos:end="150:38"><expr pos:start="150:33" pos:end="150:38"><name pos:start="150:33" pos:end="150:38">O_RDWR</name></expr></argument>, <argument pos:start="150:41" pos:end="150:44"><expr pos:start="150:41" pos:end="150:44"><literal type="number" pos:start="150:41" pos:end="150:44">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<comment type="block" pos:start="152:1" pos:end="152:59">/*     readbyte_count = read(fh, read_pid, MAX_PID_BUF); */</comment>
    <expr_stmt pos:start="153:5" pos:end="153:42"><expr pos:start="153:5" pos:end="153:41"><operator pos:start="153:5" pos:end="153:5">(</operator><name pos:start="153:6" pos:end="153:9">void</name><operator pos:start="153:10" pos:end="153:10">)</operator><call pos:start="153:11" pos:end="153:41"><name pos:start="153:11" pos:end="153:14">read</name><argument_list pos:start="153:15" pos:end="153:41">(<argument pos:start="153:16" pos:end="153:17"><expr pos:start="153:16" pos:end="153:17"><name pos:start="153:16" pos:end="153:17">fh</name></expr></argument>, <argument pos:start="153:20" pos:end="153:27"><expr pos:start="153:20" pos:end="153:27"><name pos:start="153:20" pos:end="153:27">read_pid</name></expr></argument>, <argument pos:start="153:30" pos:end="153:40"><expr pos:start="153:30" pos:end="153:40"><name pos:start="153:30" pos:end="153:40">MAX_PID_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="154:5" pos:end="154:48"><expr pos:start="154:5" pos:end="154:47"><call pos:start="154:5" pos:end="154:47"><name pos:start="154:5" pos:end="154:10">printf</name><argument_list pos:start="154:11" pos:end="154:47">(<argument pos:start="154:12" pos:end="154:36"><expr pos:start="154:12" pos:end="154:36"><literal type="string" pos:start="154:12" pos:end="154:36">"pid read back in = %s\n"</literal></expr></argument>, <argument pos:start="154:39" pos:end="154:46"><expr pos:start="154:39" pos:end="154:46"><name pos:start="154:39" pos:end="154:46">read_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="156:5" pos:end="156:54"><expr pos:start="156:5" pos:end="156:53"><call pos:start="156:5" pos:end="156:53"><name pos:start="156:5" pos:end="156:12">snprintf</name><argument_list pos:start="156:13" pos:end="156:53">(<argument pos:start="156:14" pos:end="156:16"><expr pos:start="156:14" pos:end="156:16"><name pos:start="156:14" pos:end="156:16">cmd</name></expr></argument>, <argument pos:start="156:19" pos:end="156:29"><expr pos:start="156:19" pos:end="156:29"><name pos:start="156:19" pos:end="156:29">MAX_CMD_BUF</name></expr></argument>, <argument pos:start="156:32" pos:end="156:42"><expr pos:start="156:32" pos:end="156:42"><literal type="string" pos:start="156:32" pos:end="156:42">"kill %s\n"</literal></expr></argument>, <argument pos:start="156:45" pos:end="156:52"><expr pos:start="156:45" pos:end="156:52"><name pos:start="156:45" pos:end="156:52">read_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="157:5" pos:end="157:21"><expr pos:start="157:5" pos:end="157:20"><name pos:start="157:5" pos:end="157:6">rv</name> <operator pos:start="157:8" pos:end="157:8">=</operator> <call pos:start="157:10" pos:end="157:20"><name pos:start="157:10" pos:end="157:15">system</name><argument_list pos:start="157:16" pos:end="157:20">(<argument pos:start="157:17" pos:end="157:19"><expr pos:start="157:17" pos:end="157:19"><name pos:start="157:17" pos:end="157:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="161:5"><if pos:start="159:5" pos:end="161:5">if <condition pos:start="159:8" pos:end="159:11">(<expr pos:start="159:9" pos:end="159:10"><name pos:start="159:9" pos:end="159:10">rv</name></expr>)</condition> <block pos:start="159:13" pos:end="161:5">{<block_content pos:start="160:9" pos:end="160:49">
        <expr_stmt pos:start="160:9" pos:end="160:49"><expr pos:start="160:9" pos:end="160:48"><call pos:start="160:9" pos:end="160:48"><name pos:start="160:9" pos:end="160:14">printf</name><argument_list pos:start="160:15" pos:end="160:48">(<argument pos:start="160:16" pos:end="160:47"><expr pos:start="160:16" pos:end="160:47"><literal type="string" pos:start="160:16" pos:end="160:47">"Failed to terminate haproxy.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="165:1" pos:end="169:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="170:1" pos:end="197:1"><type pos:start="170:1" pos:end="170:10"><specifier pos:start="170:1" pos:end="170:6">static</specifier> <name pos:start="170:8" pos:end="170:10">int</name></type> <name pos:start="170:12" pos:end="170:28">us4020_init_suite</name> <parameter_list pos:start="170:30" pos:end="170:35">(<parameter pos:start="170:31" pos:end="170:34"><decl pos:start="170:31" pos:end="170:34"><type pos:start="170:31" pos:end="170:34"><name pos:start="170:31" pos:end="170:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="171:1" pos:end="197:1">{<block_content pos:start="172:5" pos:end="196:14">
    <decl_stmt pos:start="172:5" pos:end="174:0"><decl pos:start="172:5" pos:end="172:10"><type pos:start="172:5" pos:end="172:7"><name pos:start="172:5" pos:end="172:7">int</name></type> <name pos:start="172:9" pos:end="172:10">rv</name></decl>;</decl_stmt>
<cpp:ifdef pos:start="173:1" pos:end="173:12">#<cpp:directive pos:start="173:2" pos:end="173:6">ifdef</cpp:directive> <name pos:start="173:8" pos:end="173:12">WIN32</name></cpp:ifdef>
    <expr_stmt pos:start="174:5" pos:end="174:57"><expr pos:start="174:5" pos:end="174:56"><call pos:start="174:5" pos:end="174:56"><name pos:start="174:5" pos:end="174:29">InitializeCriticalSection</name> <argument_list pos:start="174:31" pos:end="174:56">(<argument pos:start="174:32" pos:end="174:55"><expr pos:start="174:32" pos:end="174:55"><operator pos:start="174:32" pos:end="174:32">&amp;</operator><name pos:start="174:33" pos:end="174:55">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="175:5" pos:end="177:0"><expr pos:start="175:5" pos:end="175:60"><call pos:start="175:5" pos:end="175:60"><name pos:start="175:5" pos:end="175:19">est_init_logger</name><argument_list pos:start="175:20" pos:end="175:60">(<argument pos:start="175:21" pos:end="175:36"><expr pos:start="175:21" pos:end="175:36"><name pos:start="175:21" pos:end="175:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="175:39" pos:end="175:59"><expr pos:start="175:39" pos:end="175:59"><operator pos:start="175:39" pos:end="175:39">&amp;</operator><name pos:start="175:40" pos:end="175:59">us4020_logger_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="176:1" pos:end="176:5">#<cpp:directive pos:start="176:2" pos:end="176:5">else</cpp:directive></cpp:else> 
    <expr_stmt pos:start="177:5" pos:end="179:0"><expr pos:start="177:5" pos:end="177:43"><call pos:start="177:5" pos:end="177:43"><name pos:start="177:5" pos:end="177:19">est_init_logger</name><argument_list pos:start="177:20" pos:end="177:43">(<argument pos:start="177:21" pos:end="177:36"><expr pos:start="177:21" pos:end="177:36"><name pos:start="177:21" pos:end="177:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="177:39" pos:end="177:42"><expr pos:start="177:39" pos:end="177:42"><name pos:start="177:39" pos:end="177:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="178:1" pos:end="178:6">#<cpp:directive pos:start="178:2" pos:end="178:6">endif</cpp:directive></cpp:endif>    

    <comment type="block" pos:start="180:5" pos:end="182:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="183:5" pos:end="183:61"><expr pos:start="183:5" pos:end="183:60"><name pos:start="183:5" pos:end="183:15">cacerts_len</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:60"><name pos:start="183:19" pos:end="183:34">read_binary_file</name><argument_list pos:start="183:35" pos:end="183:60">(<argument pos:start="183:36" pos:end="183:49"><expr pos:start="183:36" pos:end="183:49"><name pos:start="183:36" pos:end="183:49">US4020_CACERTS</name></expr></argument>, <argument pos:start="183:52" pos:end="183:59"><expr pos:start="183:52" pos:end="183:59"><operator pos:start="183:52" pos:end="183:52">&amp;</operator><name pos:start="183:53" pos:end="183:59">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="184:5" pos:end="186:5"><if pos:start="184:5" pos:end="186:5">if <condition pos:start="184:8" pos:end="184:25">(<expr pos:start="184:9" pos:end="184:24"><name pos:start="184:9" pos:end="184:19">cacerts_len</name> <operator pos:start="184:21" pos:end="184:22">&lt;=</operator> <literal type="number" pos:start="184:24" pos:end="184:24">0</literal></expr>)</condition> <block pos:start="184:27" pos:end="186:5">{<block_content pos:start="185:9" pos:end="185:17">
	<return pos:start="185:9" pos:end="185:17">return <expr pos:start="185:16" pos:end="185:16"><literal type="number" pos:start="185:16" pos:end="185:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="188:5" pos:end="188:19"><expr pos:start="188:5" pos:end="188:18"><call pos:start="188:5" pos:end="188:18"><name pos:start="188:5" pos:end="188:16">us4020_clean</name><argument_list pos:start="188:17" pos:end="188:18">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="190:5" pos:end="193:7">/*
     * Start an instance of the EST server with 
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="194:5" pos:end="194:35"><expr pos:start="194:5" pos:end="194:34"><name pos:start="194:5" pos:end="194:6">rv</name> <operator pos:start="194:8" pos:end="194:8">=</operator> <call pos:start="194:10" pos:end="194:34"><name pos:start="194:10" pos:end="194:28">us4020_start_server</name><argument_list pos:start="194:29" pos:end="194:34">(<argument pos:start="194:30" pos:end="194:30"><expr pos:start="194:30" pos:end="194:30"><literal type="number" pos:start="194:30" pos:end="194:30">0</literal></expr></argument>, <argument pos:start="194:33" pos:end="194:33"><expr pos:start="194:33" pos:end="194:33"><literal type="number" pos:start="194:33" pos:end="194:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="196:5" pos:end="196:14">return <expr pos:start="196:12" pos:end="196:13"><name pos:start="196:12" pos:end="196:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="200:1" pos:end="204:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="205:1" pos:end="210:1"><type pos:start="205:1" pos:end="205:10"><specifier pos:start="205:1" pos:end="205:6">static</specifier> <name pos:start="205:8" pos:end="205:10">int</name></type> <name pos:start="205:12" pos:end="205:31">us4020_destroy_suite</name> <parameter_list pos:start="205:33" pos:end="205:38">(<parameter pos:start="205:34" pos:end="205:37"><decl pos:start="205:34" pos:end="205:37"><type pos:start="205:34" pos:end="205:37"><name pos:start="205:34" pos:end="205:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="206:1" pos:end="210:1">{<block_content pos:start="207:5" pos:end="209:13">
    <expr_stmt pos:start="207:5" pos:end="207:14"><expr pos:start="207:5" pos:end="207:13"><call pos:start="207:5" pos:end="207:13"><name pos:start="207:5" pos:end="207:11">st_stop</name><argument_list pos:start="207:12" pos:end="207:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="208:5" pos:end="208:18"><expr pos:start="208:5" pos:end="208:17"><call pos:start="208:5" pos:end="208:17"><name pos:start="208:5" pos:end="208:8">free</name><argument_list pos:start="208:9" pos:end="208:17">(<argument pos:start="208:10" pos:end="208:16"><expr pos:start="208:10" pos:end="208:16"><name pos:start="208:10" pos:end="208:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="209:5" pos:end="209:13">return <expr pos:start="209:12" pos:end="209:12"><literal type="number" pos:start="209:12" pos:end="209:12">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="213:1" pos:end="215:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="216:1" pos:end="245:1"><type pos:start="216:1" pos:end="216:10"><specifier pos:start="216:1" pos:end="216:6">static</specifier> <name pos:start="216:8" pos:end="216:10">int</name></type> <name pos:start="216:12" pos:end="216:36">client_manual_cert_verify</name> <parameter_list pos:start="216:38" pos:end="216:77">(<parameter pos:start="216:39" pos:end="216:52"><decl pos:start="216:39" pos:end="216:52"><type pos:start="216:39" pos:end="216:52"><name pos:start="216:39" pos:end="216:42">X509</name> <modifier pos:start="216:44" pos:end="216:44">*</modifier></type><name pos:start="216:45" pos:end="216:52">cur_cert</name></decl></parameter>, <parameter pos:start="216:55" pos:end="216:76"><decl pos:start="216:55" pos:end="216:76"><type pos:start="216:55" pos:end="216:76"><name pos:start="216:55" pos:end="216:57">int</name></type> <name pos:start="216:59" pos:end="216:76">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="217:1" pos:end="245:1">{<block_content pos:start="218:5" pos:end="244:19">
    <decl_stmt pos:start="218:5" pos:end="218:17"><decl pos:start="218:5" pos:end="218:16"><type pos:start="218:5" pos:end="218:9"><name pos:start="218:5" pos:end="218:7">BIO</name> <modifier pos:start="218:9" pos:end="218:9">*</modifier></type><name pos:start="218:10" pos:end="218:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="219:5" pos:end="219:43"><expr pos:start="219:5" pos:end="219:42"><name pos:start="219:5" pos:end="219:11">bio_err</name><operator pos:start="219:12" pos:end="219:12">=</operator><call pos:start="219:13" pos:end="219:42"><name pos:start="219:13" pos:end="219:22">BIO_new_fp</name><argument_list pos:start="219:23" pos:end="219:42">(<argument pos:start="219:24" pos:end="219:29"><expr pos:start="219:24" pos:end="219:29"><name pos:start="219:24" pos:end="219:29">stderr</name></expr></argument>,<argument pos:start="219:31" pos:end="219:41"><expr pos:start="219:31" pos:end="219:41"><name pos:start="219:31" pos:end="219:41">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="220:5" pos:end="220:20"><decl pos:start="220:5" pos:end="220:19"><type pos:start="220:5" pos:end="220:7"><name pos:start="220:5" pos:end="220:7">int</name></type> <name pos:start="220:9" pos:end="220:15">approve</name> <init pos:start="220:17" pos:end="220:19">= <expr pos:start="220:19" pos:end="220:19"><literal type="number" pos:start="220:19" pos:end="220:19">0</literal></expr></init></decl>;</decl_stmt> 
    
    <comment type="block" pos:start="222:5" pos:end="224:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="225:5" pos:end="227:62"><expr pos:start="225:5" pos:end="227:61"><call pos:start="225:5" pos:end="227:61"><name pos:start="225:5" pos:end="225:10">printf</name><argument_list pos:start="225:11" pos:end="227:61">(<argument pos:start="225:12" pos:end="225:117"><expr pos:start="225:12" pos:end="225:117"><literal type="string" pos:start="225:12" pos:end="225:117">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
           <argument pos:start="226:12" pos:end="226:23"><expr pos:start="226:12" pos:end="226:23"><name pos:start="226:12" pos:end="226:23">__FUNCTION__</name></expr></argument>, <argument pos:start="226:26" pos:end="226:43"><expr pos:start="226:26" pos:end="226:43"><name pos:start="226:26" pos:end="226:43">openssl_cert_error</name></expr></argument>,
           <argument pos:start="227:12" pos:end="227:60"><expr pos:start="227:12" pos:end="227:60"><call pos:start="227:12" pos:end="227:60"><name pos:start="227:12" pos:end="227:40">X509_verify_cert_error_string</name><argument_list pos:start="227:41" pos:end="227:60">(<argument pos:start="227:42" pos:end="227:59"><expr pos:start="227:42" pos:end="227:59"><name pos:start="227:42" pos:end="227:59">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="229:5" pos:end="229:30"><expr pos:start="229:5" pos:end="229:29"><call pos:start="229:5" pos:end="229:29"><name pos:start="229:5" pos:end="229:10">printf</name><argument_list pos:start="229:11" pos:end="229:29">(<argument pos:start="229:12" pos:end="229:28"><expr pos:start="229:12" pos:end="229:28"><literal type="string" pos:start="229:12" pos:end="229:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="230:5" pos:end="230:35"><expr pos:start="230:5" pos:end="230:34"><call pos:start="230:5" pos:end="230:34"><name pos:start="230:5" pos:end="230:17">X509_print_fp</name><argument_list pos:start="230:18" pos:end="230:34">(<argument pos:start="230:19" pos:end="230:24"><expr pos:start="230:19" pos:end="230:24"><name pos:start="230:19" pos:end="230:24">stdout</name></expr></argument>,<argument pos:start="230:26" pos:end="230:33"><expr pos:start="230:26" pos:end="230:33"><name pos:start="230:26" pos:end="230:33">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="231:5" pos:end="235:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="236:5" pos:end="236:74"><expr pos:start="236:5" pos:end="236:73"><call pos:start="236:5" pos:end="236:73"><name pos:start="236:5" pos:end="236:24">X509_signature_print</name><argument_list pos:start="236:25" pos:end="236:73">(<argument pos:start="236:26" pos:end="236:32"><expr pos:start="236:26" pos:end="236:32"><name pos:start="236:26" pos:end="236:32">bio_err</name></expr></argument>, <argument pos:start="236:35" pos:end="236:51"><expr pos:start="236:35" pos:end="236:51"><name pos:start="236:35" pos:end="236:51"><name pos:start="236:35" pos:end="236:42">cur_cert</name><operator pos:start="236:43" pos:end="236:44">-&gt;</operator><name pos:start="236:45" pos:end="236:51">sig_alg</name></name></expr></argument>, <argument pos:start="236:54" pos:end="236:72"><expr pos:start="236:54" pos:end="236:72"><name pos:start="236:54" pos:end="236:72"><name pos:start="236:54" pos:end="236:61">cur_cert</name><operator pos:start="236:62" pos:end="236:63">-&gt;</operator><name pos:start="236:64" pos:end="236:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="238:5" pos:end="240:5"><if pos:start="238:5" pos:end="240:5">if <condition pos:start="238:8" pos:end="238:59">(<expr pos:start="238:9" pos:end="238:58"><name pos:start="238:9" pos:end="238:26">openssl_cert_error</name> <operator pos:start="238:28" pos:end="238:29">==</operator> <name pos:start="238:31" pos:end="238:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="238:61" pos:end="240:5">{<block_content pos:start="239:9" pos:end="239:20">
        <expr_stmt pos:start="239:9" pos:end="239:20"><expr pos:start="239:9" pos:end="239:19"><name pos:start="239:9" pos:end="239:15">approve</name> <operator pos:start="239:17" pos:end="239:17">=</operator> <literal type="number" pos:start="239:19" pos:end="239:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt pos:start="242:5" pos:end="242:22"><expr pos:start="242:5" pos:end="242:21"><call pos:start="242:5" pos:end="242:21"><name pos:start="242:5" pos:end="242:12">BIO_free</name><argument_list pos:start="242:13" pos:end="242:21">(<argument pos:start="242:14" pos:end="242:20"><expr pos:start="242:14" pos:end="242:20"><name pos:start="242:14" pos:end="242:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="244:5" pos:end="244:19">return <expr pos:start="244:12" pos:end="244:18"><name pos:start="244:12" pos:end="244:18">approve</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="248:1" pos:end="250:3">/*
 * Error check the parameters to the API
 */</comment>
<function pos:start="251:1" pos:end="472:1"><type pos:start="251:1" pos:end="251:11"><specifier pos:start="251:1" pos:end="251:6">static</specifier> <name pos:start="251:8" pos:end="251:11">void</name></type> <name pos:start="251:13" pos:end="251:24">us4020_test1</name> <parameter_list pos:start="251:26" pos:end="251:31">(<parameter pos:start="251:27" pos:end="251:30"><decl pos:start="251:27" pos:end="251:30"><type pos:start="251:27" pos:end="251:30"><name pos:start="251:27" pos:end="251:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="252:1" pos:end="472:1">{<block_content pos:start="253:5" pos:end="470:22">
    <decl_stmt pos:start="253:5" pos:end="253:19"><decl pos:start="253:5" pos:end="253:18"><type pos:start="253:5" pos:end="253:13"><name pos:start="253:5" pos:end="253:13">EST_ERROR</name></type> <name pos:start="253:15" pos:end="253:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="254:5" pos:end="254:25"><decl pos:start="254:5" pos:end="254:24"><type pos:start="254:5" pos:end="254:13"><name pos:start="254:5" pos:end="254:11">EST_CTX</name> <modifier pos:start="254:13" pos:end="254:13">*</modifier></type><name pos:start="254:14" pos:end="254:17">ectx</name> <init pos:start="254:19" pos:end="254:24">= <expr pos:start="254:21" pos:end="254:24"><name pos:start="254:21" pos:end="254:24">NULL</name></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="256:5" pos:end="256:16"><expr pos:start="256:5" pos:end="256:15"><name pos:start="256:5" pos:end="256:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="258:5" pos:end="260:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="261:5" pos:end="263:54"><expr pos:start="261:5" pos:end="263:53"><name pos:start="261:5" pos:end="261:8">ectx</name> <operator pos:start="261:10" pos:end="261:10">=</operator> <call pos:start="261:12" pos:end="263:53"><name pos:start="261:12" pos:end="261:26">est_client_init</name><argument_list pos:start="261:27" pos:end="263:53">(<argument pos:start="261:28" pos:end="261:34"><expr pos:start="261:28" pos:end="261:34"><name pos:start="261:28" pos:end="261:34">cacerts</name></expr></argument>, <argument pos:start="261:37" pos:end="261:47"><expr pos:start="261:37" pos:end="261:47"><name pos:start="261:37" pos:end="261:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="262:28" pos:end="262:46"><expr pos:start="262:28" pos:end="262:46"><name pos:start="262:28" pos:end="262:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="263:28" pos:end="263:52"><expr pos:start="263:28" pos:end="263:52"><name pos:start="263:28" pos:end="263:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="264:5" pos:end="264:28"><expr pos:start="264:5" pos:end="264:27"><call pos:start="264:5" pos:end="264:27"><name pos:start="264:5" pos:end="264:13">CU_ASSERT</name><argument_list pos:start="264:14" pos:end="264:27">(<argument pos:start="264:15" pos:end="264:26"><expr pos:start="264:15" pos:end="264:26"><name pos:start="264:15" pos:end="264:18">ectx</name> <operator pos:start="264:20" pos:end="264:21">!=</operator> <name pos:start="264:23" pos:end="264:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="266:5" pos:end="268:7">/*
     *  Attempt to call the API without a context
     */</comment>
    <expr_stmt pos:start="269:5" pos:end="273:52"><expr pos:start="269:5" pos:end="273:51"><name pos:start="269:5" pos:end="269:8">e_rc</name><operator pos:start="269:9" pos:end="269:9">=</operator> <call pos:start="269:11" pos:end="273:51"><name pos:start="269:11" pos:end="269:30">est_client_set_proxy</name><argument_list pos:start="269:31" pos:end="273:51">(<argument pos:start="269:32" pos:end="269:35"><expr pos:start="269:32" pos:end="269:35"><name pos:start="269:32" pos:end="269:35">NULL</name></expr></argument>, <argument pos:start="269:38" pos:end="269:67"><expr pos:start="269:38" pos:end="269:67"><name pos:start="269:38" pos:end="269:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="270:32" pos:end="270:46"><expr pos:start="270:32" pos:end="270:46"><name pos:start="270:32" pos:end="270:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="271:32" pos:end="271:52"><expr pos:start="271:32" pos:end="271:52"><name pos:start="271:32" pos:end="271:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="272:32" pos:end="272:58"><expr pos:start="272:32" pos:end="272:58"><name pos:start="272:32" pos:end="272:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="273:32" pos:end="273:40"><expr pos:start="273:32" pos:end="273:40"><literal type="string" pos:start="273:32" pos:end="273:40">"estuser"</literal></expr></argument>, <argument pos:start="273:43" pos:end="273:50"><expr pos:start="273:43" pos:end="273:50"><literal type="string" pos:start="273:43" pos:end="273:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="274:5" pos:end="274:38"><expr pos:start="274:5" pos:end="274:37"><call pos:start="274:5" pos:end="274:37"><name pos:start="274:5" pos:end="274:13">CU_ASSERT</name><argument_list pos:start="274:14" pos:end="274:37">(<argument pos:start="274:15" pos:end="274:36"><expr pos:start="274:15" pos:end="274:36"><name pos:start="274:15" pos:end="274:18">e_rc</name> <operator pos:start="274:20" pos:end="274:21">==</operator> <name pos:start="274:23" pos:end="274:36">EST_ERR_NO_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="276:5" pos:end="278:7">/*
     * valid call
     */</comment>
    <expr_stmt pos:start="279:5" pos:end="283:52"><expr pos:start="279:5" pos:end="283:51"><name pos:start="279:5" pos:end="279:8">e_rc</name><operator pos:start="279:9" pos:end="279:9">=</operator> <call pos:start="279:11" pos:end="283:51"><name pos:start="279:11" pos:end="279:30">est_client_set_proxy</name><argument_list pos:start="279:31" pos:end="283:51">(<argument pos:start="279:32" pos:end="279:35"><expr pos:start="279:32" pos:end="279:35"><name pos:start="279:32" pos:end="279:35">ectx</name></expr></argument>, <argument pos:start="279:38" pos:end="279:67"><expr pos:start="279:38" pos:end="279:67"><name pos:start="279:38" pos:end="279:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="280:32" pos:end="280:46"><expr pos:start="280:32" pos:end="280:46"><name pos:start="280:32" pos:end="280:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="281:32" pos:end="281:52"><expr pos:start="281:32" pos:end="281:52"><name pos:start="281:32" pos:end="281:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="282:32" pos:end="282:58"><expr pos:start="282:32" pos:end="282:58"><name pos:start="282:32" pos:end="282:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="283:32" pos:end="283:40"><expr pos:start="283:32" pos:end="283:40"><literal type="string" pos:start="283:32" pos:end="283:40">"estuser"</literal></expr></argument>, <argument pos:start="283:43" pos:end="283:50"><expr pos:start="283:43" pos:end="283:50"><literal type="string" pos:start="283:43" pos:end="283:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="284:5" pos:end="284:36"><expr pos:start="284:5" pos:end="284:35"><call pos:start="284:5" pos:end="284:35"><name pos:start="284:5" pos:end="284:13">CU_ASSERT</name><argument_list pos:start="284:14" pos:end="284:35">(<argument pos:start="284:15" pos:end="284:34"><expr pos:start="284:15" pos:end="284:34"><name pos:start="284:15" pos:end="284:18">e_rc</name> <operator pos:start="284:20" pos:end="284:21">==</operator> <name pos:start="284:23" pos:end="284:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="286:5" pos:end="288:7">/*
     * don't set the server 
     */</comment>
    <expr_stmt pos:start="289:5" pos:end="293:52"><expr pos:start="289:5" pos:end="293:51"><name pos:start="289:5" pos:end="289:8">e_rc</name><operator pos:start="289:9" pos:end="289:9">=</operator> <call pos:start="289:11" pos:end="293:51"><name pos:start="289:11" pos:end="289:30">est_client_set_proxy</name><argument_list pos:start="289:31" pos:end="293:51">(<argument pos:start="289:32" pos:end="289:35"><expr pos:start="289:32" pos:end="289:35"><name pos:start="289:32" pos:end="289:35">ectx</name></expr></argument>, <argument pos:start="289:38" pos:end="289:67"><expr pos:start="289:38" pos:end="289:67"><name pos:start="289:38" pos:end="289:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="290:32" pos:end="290:35"><expr pos:start="290:32" pos:end="290:35"><name pos:start="290:32" pos:end="290:35">NULL</name></expr></argument>,
                               <argument pos:start="291:32" pos:end="291:52"><expr pos:start="291:32" pos:end="291:52"><name pos:start="291:32" pos:end="291:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="292:32" pos:end="292:58"><expr pos:start="292:32" pos:end="292:58"><name pos:start="292:32" pos:end="292:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="293:32" pos:end="293:40"><expr pos:start="293:32" pos:end="293:40"><literal type="string" pos:start="293:32" pos:end="293:40">"estuser"</literal></expr></argument>, <argument pos:start="293:43" pos:end="293:50"><expr pos:start="293:43" pos:end="293:50"><literal type="string" pos:start="293:43" pos:end="293:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:51"><expr pos:start="295:5" pos:end="295:50"><call pos:start="295:5" pos:end="295:50"><name pos:start="295:5" pos:end="295:13">CU_ASSERT</name><argument_list pos:start="295:14" pos:end="295:50">(<argument pos:start="295:15" pos:end="295:49"><expr pos:start="295:15" pos:end="295:49"><name pos:start="295:15" pos:end="295:18">e_rc</name> <operator pos:start="295:20" pos:end="295:21">==</operator> <name pos:start="295:23" pos:end="295:49">EST_ERR_INVALID_SERVER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="297:5" pos:end="299:7">/*
     * server to empty string
     */</comment>
    <expr_stmt pos:start="300:5" pos:end="304:52"><expr pos:start="300:5" pos:end="304:51"><name pos:start="300:5" pos:end="300:8">e_rc</name><operator pos:start="300:9" pos:end="300:9">=</operator> <call pos:start="300:11" pos:end="304:51"><name pos:start="300:11" pos:end="300:30">est_client_set_proxy</name><argument_list pos:start="300:31" pos:end="304:51">(<argument pos:start="300:32" pos:end="300:35"><expr pos:start="300:32" pos:end="300:35"><name pos:start="300:32" pos:end="300:35">ectx</name></expr></argument>, <argument pos:start="300:38" pos:end="300:67"><expr pos:start="300:38" pos:end="300:67"><name pos:start="300:38" pos:end="300:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="301:32" pos:end="301:33"><expr pos:start="301:32" pos:end="301:33"><literal type="string" pos:start="301:32" pos:end="301:33">""</literal></expr></argument>,
                               <argument pos:start="302:32" pos:end="302:52"><expr pos:start="302:32" pos:end="302:52"><name pos:start="302:32" pos:end="302:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="303:32" pos:end="303:58"><expr pos:start="303:32" pos:end="303:58"><name pos:start="303:32" pos:end="303:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="304:32" pos:end="304:40"><expr pos:start="304:32" pos:end="304:40"><literal type="string" pos:start="304:32" pos:end="304:40">"estuser"</literal></expr></argument>, <argument pos:start="304:43" pos:end="304:50"><expr pos:start="304:43" pos:end="304:50"><literal type="string" pos:start="304:43" pos:end="304:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="306:5" pos:end="306:51"><expr pos:start="306:5" pos:end="306:50"><call pos:start="306:5" pos:end="306:50"><name pos:start="306:5" pos:end="306:13">CU_ASSERT</name><argument_list pos:start="306:14" pos:end="306:50">(<argument pos:start="306:15" pos:end="306:49"><expr pos:start="306:15" pos:end="306:49"><name pos:start="306:15" pos:end="306:18">e_rc</name> <operator pos:start="306:20" pos:end="306:21">==</operator> <name pos:start="306:23" pos:end="306:49">EST_ERR_INVALID_SERVER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="308:5" pos:end="310:7">/*
     * max server name 
     */</comment>
    <decl_stmt pos:start="311:5" pos:end="315:47"><decl pos:start="311:5" pos:end="315:46"><type pos:start="311:5" pos:end="311:10"><name pos:start="311:5" pos:end="311:8">char</name> <modifier pos:start="311:10" pos:end="311:10">*</modifier></type> <name pos:start="311:12" pos:end="311:26">max_server_name</name> <init pos:start="311:28" pos:end="315:46">= <expr pos:start="311:30" pos:end="315:46"><literal type="string" pos:start="311:30" pos:end="311:91">"123456789012345678901234567890123456789012345678901234567890"</literal>
                             <literal type="string" pos:start="312:30" pos:end="312:91">"123456789012345678901234567890123456789012345678901234567890"</literal>
                             <literal type="string" pos:start="313:30" pos:end="313:91">"123456789012345678901234567890123456789012345678901234567890"</literal>
                             <literal type="string" pos:start="314:30" pos:end="314:91">"123456789012345678901234567890123456789012345678901234567890"</literal>
                             <literal type="string" pos:start="315:30" pos:end="315:46">"123456789012345"</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt pos:start="317:5" pos:end="321:52"><expr pos:start="317:5" pos:end="321:51"><name pos:start="317:5" pos:end="317:8">e_rc</name><operator pos:start="317:9" pos:end="317:9">=</operator> <call pos:start="317:11" pos:end="321:51"><name pos:start="317:11" pos:end="317:30">est_client_set_proxy</name><argument_list pos:start="317:31" pos:end="321:51">(<argument pos:start="317:32" pos:end="317:35"><expr pos:start="317:32" pos:end="317:35"><name pos:start="317:32" pos:end="317:35">ectx</name></expr></argument>, <argument pos:start="317:38" pos:end="317:67"><expr pos:start="317:38" pos:end="317:67"><name pos:start="317:38" pos:end="317:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="318:32" pos:end="318:46"><expr pos:start="318:32" pos:end="318:46"><name pos:start="318:32" pos:end="318:46">max_server_name</name></expr></argument>,
                               <argument pos:start="319:32" pos:end="319:52"><expr pos:start="319:32" pos:end="319:52"><name pos:start="319:32" pos:end="319:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="320:32" pos:end="320:58"><expr pos:start="320:32" pos:end="320:58"><name pos:start="320:32" pos:end="320:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="321:32" pos:end="321:40"><expr pos:start="321:32" pos:end="321:40"><literal type="string" pos:start="321:32" pos:end="321:40">"estuser"</literal></expr></argument>, <argument pos:start="321:43" pos:end="321:50"><expr pos:start="321:43" pos:end="321:50"><literal type="string" pos:start="321:43" pos:end="321:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:36"><expr pos:start="323:5" pos:end="323:35"><call pos:start="323:5" pos:end="323:35"><name pos:start="323:5" pos:end="323:13">CU_ASSERT</name><argument_list pos:start="323:14" pos:end="323:35">(<argument pos:start="323:15" pos:end="323:34"><expr pos:start="323:15" pos:end="323:34"><name pos:start="323:15" pos:end="323:18">e_rc</name> <operator pos:start="323:20" pos:end="323:21">==</operator> <name pos:start="323:23" pos:end="323:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="325:5" pos:end="327:7">/*
     * server name too long
     */</comment>
    <decl_stmt pos:start="328:5" pos:end="332:49"><decl pos:start="328:5" pos:end="332:48"><type pos:start="328:5" pos:end="328:10"><name pos:start="328:5" pos:end="328:8">char</name> <modifier pos:start="328:10" pos:end="328:10">*</modifier></type> <name pos:start="328:12" pos:end="328:27">long_server_name</name> <init pos:start="328:29" pos:end="332:48">= <expr pos:start="328:31" pos:end="332:48"><literal type="string" pos:start="328:31" pos:end="328:92">"123456789012345678901234567890123456789012345678901234567890"</literal>
                              <literal type="string" pos:start="329:31" pos:end="329:92">"123456789012345678901234567890123456789012345678901234567890"</literal>
                              <literal type="string" pos:start="330:31" pos:end="330:92">"123456789012345678901234567890123456789012345678901234567890"</literal>
                              <literal type="string" pos:start="331:31" pos:end="331:92">"123456789012345678901234567890123456789012345678901234567890"</literal>
                              <literal type="string" pos:start="332:31" pos:end="332:48">"1234567890123456"</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt pos:start="334:5" pos:end="338:52"><expr pos:start="334:5" pos:end="338:51"><name pos:start="334:5" pos:end="334:8">e_rc</name><operator pos:start="334:9" pos:end="334:9">=</operator> <call pos:start="334:11" pos:end="338:51"><name pos:start="334:11" pos:end="334:30">est_client_set_proxy</name><argument_list pos:start="334:31" pos:end="338:51">(<argument pos:start="334:32" pos:end="334:35"><expr pos:start="334:32" pos:end="334:35"><name pos:start="334:32" pos:end="334:35">ectx</name></expr></argument>, <argument pos:start="334:38" pos:end="334:67"><expr pos:start="334:38" pos:end="334:67"><name pos:start="334:38" pos:end="334:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="335:32" pos:end="335:47"><expr pos:start="335:32" pos:end="335:47"><name pos:start="335:32" pos:end="335:47">long_server_name</name></expr></argument>,
                               <argument pos:start="336:32" pos:end="336:52"><expr pos:start="336:32" pos:end="336:52"><name pos:start="336:32" pos:end="336:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="337:32" pos:end="337:58"><expr pos:start="337:32" pos:end="337:58"><name pos:start="337:32" pos:end="337:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="338:32" pos:end="338:40"><expr pos:start="338:32" pos:end="338:40"><literal type="string" pos:start="338:32" pos:end="338:40">"estuser"</literal></expr></argument>, <argument pos:start="338:43" pos:end="338:50"><expr pos:start="338:43" pos:end="338:50"><literal type="string" pos:start="338:43" pos:end="338:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="340:5" pos:end="340:51"><expr pos:start="340:5" pos:end="340:50"><call pos:start="340:5" pos:end="340:50"><name pos:start="340:5" pos:end="340:13">CU_ASSERT</name><argument_list pos:start="340:14" pos:end="340:50">(<argument pos:start="340:15" pos:end="340:49"><expr pos:start="340:15" pos:end="340:49"><name pos:start="340:15" pos:end="340:18">e_rc</name> <operator pos:start="340:20" pos:end="340:21">==</operator> <name pos:start="340:23" pos:end="340:49">EST_ERR_INVALID_SERVER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="342:5" pos:end="344:7">/*
     * don't set the port
     */</comment>
    <expr_stmt pos:start="345:5" pos:end="349:52"><expr pos:start="345:5" pos:end="349:51"><name pos:start="345:5" pos:end="345:8">e_rc</name><operator pos:start="345:9" pos:end="345:9">=</operator> <call pos:start="345:11" pos:end="349:51"><name pos:start="345:11" pos:end="345:30">est_client_set_proxy</name><argument_list pos:start="345:31" pos:end="349:51">(<argument pos:start="345:32" pos:end="345:35"><expr pos:start="345:32" pos:end="345:35"><name pos:start="345:32" pos:end="345:35">ectx</name></expr></argument>, <argument pos:start="345:38" pos:end="345:67"><expr pos:start="345:38" pos:end="345:67"><name pos:start="345:38" pos:end="345:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="346:32" pos:end="346:46"><expr pos:start="346:32" pos:end="346:46"><name pos:start="346:32" pos:end="346:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="347:32" pos:end="347:32"><expr pos:start="347:32" pos:end="347:32"><literal type="number" pos:start="347:32" pos:end="347:32">0</literal></expr></argument>,
                               <argument pos:start="348:32" pos:end="348:58"><expr pos:start="348:32" pos:end="348:58"><name pos:start="348:32" pos:end="348:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="349:32" pos:end="349:40"><expr pos:start="349:32" pos:end="349:40"><literal type="string" pos:start="349:32" pos:end="349:40">"estuser"</literal></expr></argument>, <argument pos:start="349:43" pos:end="349:50"><expr pos:start="349:43" pos:end="349:50"><literal type="string" pos:start="349:43" pos:end="349:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:48"><expr pos:start="351:5" pos:end="351:47"><call pos:start="351:5" pos:end="351:47"><name pos:start="351:5" pos:end="351:13">CU_ASSERT</name><argument_list pos:start="351:14" pos:end="351:47">(<argument pos:start="351:15" pos:end="351:46"><expr pos:start="351:15" pos:end="351:46"><name pos:start="351:15" pos:end="351:18">e_rc</name> <operator pos:start="351:20" pos:end="351:21">==</operator> <name pos:start="351:23" pos:end="351:46">EST_ERR_INVALID_PORT_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="353:5" pos:end="353:32">/* proxy protocol invalid */</comment>
    <expr_stmt pos:start="354:5" pos:end="358:52"><expr pos:start="354:5" pos:end="358:51"><name pos:start="354:5" pos:end="354:8">e_rc</name><operator pos:start="354:9" pos:end="354:9">=</operator> <call pos:start="354:11" pos:end="358:51"><name pos:start="354:11" pos:end="354:30">est_client_set_proxy</name><argument_list pos:start="354:31" pos:end="358:51">(<argument pos:start="354:32" pos:end="354:35"><expr pos:start="354:32" pos:end="354:35"><name pos:start="354:32" pos:end="354:35">ectx</name></expr></argument>, <argument pos:start="354:38" pos:end="354:39"><expr pos:start="354:38" pos:end="354:39"><literal type="number" pos:start="354:38" pos:end="354:39">25</literal></expr></argument>,
                               <argument pos:start="355:32" pos:end="355:46"><expr pos:start="355:32" pos:end="355:46"><name pos:start="355:32" pos:end="355:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="356:32" pos:end="356:52"><expr pos:start="356:32" pos:end="356:52"><name pos:start="356:32" pos:end="356:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="357:32" pos:end="357:58"><expr pos:start="357:32" pos:end="357:58"><name pos:start="357:32" pos:end="357:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="358:32" pos:end="358:40"><expr pos:start="358:32" pos:end="358:40"><literal type="string" pos:start="358:32" pos:end="358:40">"estuser"</literal></expr></argument>, <argument pos:start="358:43" pos:end="358:50"><expr pos:start="358:43" pos:end="358:50"><literal type="string" pos:start="358:43" pos:end="358:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="360:5" pos:end="360:61"><expr pos:start="360:5" pos:end="360:60"><call pos:start="360:5" pos:end="360:60"><name pos:start="360:5" pos:end="360:13">CU_ASSERT</name><argument_list pos:start="360:14" pos:end="360:60">(<argument pos:start="360:15" pos:end="360:59"><expr pos:start="360:15" pos:end="360:59"><name pos:start="360:15" pos:end="360:18">e_rc</name> <operator pos:start="360:20" pos:end="360:21">==</operator> <name pos:start="360:23" pos:end="360:59">EST_ERR_INVALID_CLIENT_PROXY_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="362:5" pos:end="362:32">/* proxy protocol invalid */</comment>
    <expr_stmt pos:start="363:5" pos:end="367:52"><expr pos:start="363:5" pos:end="367:51"><name pos:start="363:5" pos:end="363:8">e_rc</name><operator pos:start="363:9" pos:end="363:9">=</operator> <call pos:start="363:11" pos:end="367:51"><name pos:start="363:11" pos:end="363:30">est_client_set_proxy</name><argument_list pos:start="363:31" pos:end="367:51">(<argument pos:start="363:32" pos:end="363:35"><expr pos:start="363:32" pos:end="363:35"><name pos:start="363:32" pos:end="363:35">ectx</name></expr></argument>, <argument pos:start="363:38" pos:end="363:39"><expr pos:start="363:38" pos:end="363:39"><operator pos:start="363:38" pos:end="363:38">-</operator><literal type="number" pos:start="363:39" pos:end="363:39">2</literal></expr></argument>,
                               <argument pos:start="364:32" pos:end="364:46"><expr pos:start="364:32" pos:end="364:46"><name pos:start="364:32" pos:end="364:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="365:32" pos:end="365:52"><expr pos:start="365:32" pos:end="365:52"><name pos:start="365:32" pos:end="365:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="366:32" pos:end="366:58"><expr pos:start="366:32" pos:end="366:58"><name pos:start="366:32" pos:end="366:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="367:32" pos:end="367:40"><expr pos:start="367:32" pos:end="367:40"><literal type="string" pos:start="367:32" pos:end="367:40">"estuser"</literal></expr></argument>, <argument pos:start="367:43" pos:end="367:50"><expr pos:start="367:43" pos:end="367:50"><literal type="string" pos:start="367:43" pos:end="367:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:61"><expr pos:start="369:5" pos:end="369:60"><call pos:start="369:5" pos:end="369:60"><name pos:start="369:5" pos:end="369:13">CU_ASSERT</name><argument_list pos:start="369:14" pos:end="369:60">(<argument pos:start="369:15" pos:end="369:59"><expr pos:start="369:15" pos:end="369:59"><name pos:start="369:15" pos:end="369:18">e_rc</name> <operator pos:start="369:20" pos:end="369:21">==</operator> <name pos:start="369:23" pos:end="369:59">EST_ERR_INVALID_CLIENT_PROXY_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="371:5" pos:end="371:28">/* proxy auth invalid */</comment>
    <expr_stmt pos:start="372:5" pos:end="376:52"><expr pos:start="372:5" pos:end="376:51"><name pos:start="372:5" pos:end="372:8">e_rc</name><operator pos:start="372:9" pos:end="372:9">=</operator> <call pos:start="372:11" pos:end="376:51"><name pos:start="372:11" pos:end="372:30">est_client_set_proxy</name><argument_list pos:start="372:31" pos:end="376:51">(<argument pos:start="372:32" pos:end="372:35"><expr pos:start="372:32" pos:end="372:35"><name pos:start="372:32" pos:end="372:35">ectx</name></expr></argument>, <argument pos:start="372:38" pos:end="372:67"><expr pos:start="372:38" pos:end="372:67"><name pos:start="372:38" pos:end="372:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="373:32" pos:end="373:46"><expr pos:start="373:32" pos:end="373:46"><name pos:start="373:32" pos:end="373:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="374:32" pos:end="374:52"><expr pos:start="374:32" pos:end="374:52"><name pos:start="374:32" pos:end="374:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="375:32" pos:end="375:33"><expr pos:start="375:32" pos:end="375:33"><literal type="number" pos:start="375:32" pos:end="375:33">25</literal></expr></argument>,
                               <argument pos:start="376:32" pos:end="376:40"><expr pos:start="376:32" pos:end="376:40"><literal type="string" pos:start="376:32" pos:end="376:40">"estuser"</literal></expr></argument>, <argument pos:start="376:43" pos:end="376:50"><expr pos:start="376:43" pos:end="376:50"><literal type="string" pos:start="376:43" pos:end="376:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="378:5" pos:end="378:57"><expr pos:start="378:5" pos:end="378:56"><call pos:start="378:5" pos:end="378:56"><name pos:start="378:5" pos:end="378:13">CU_ASSERT</name><argument_list pos:start="378:14" pos:end="378:56">(<argument pos:start="378:15" pos:end="378:55"><expr pos:start="378:15" pos:end="378:55"><name pos:start="378:15" pos:end="378:18">e_rc</name> <operator pos:start="378:20" pos:end="378:21">==</operator> <name pos:start="378:23" pos:end="378:55">EST_ERR_INVALID_CLIENT_PROXY_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="380:5" pos:end="382:7">/*
     * max userid
     */</comment>
    <decl_stmt pos:start="383:5" pos:end="387:42"><decl pos:start="383:5" pos:end="387:41"><type pos:start="383:5" pos:end="383:10"><name pos:start="383:5" pos:end="383:8">char</name> <modifier pos:start="383:10" pos:end="383:10">*</modifier></type> <name pos:start="383:12" pos:end="383:21">max_userid</name> <init pos:start="383:23" pos:end="387:41">= <expr pos:start="383:25" pos:end="387:41"><literal type="string" pos:start="383:25" pos:end="383:86">"123456789012345678901234567890123456789012345678901234567890"</literal>
                        <literal type="string" pos:start="384:25" pos:end="384:86">"123456789012345678901234567890123456789012345678901234567890"</literal>
                        <literal type="string" pos:start="385:25" pos:end="385:86">"123456789012345678901234567890123456789012345678901234567890"</literal>
                        <literal type="string" pos:start="386:25" pos:end="386:86">"123456789012345678901234567890123456789012345678901234567890"</literal>
                        <literal type="string" pos:start="387:25" pos:end="387:41">"123456789012345"</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt pos:start="389:5" pos:end="393:53"><expr pos:start="389:5" pos:end="393:52"><name pos:start="389:5" pos:end="389:8">e_rc</name><operator pos:start="389:9" pos:end="389:9">=</operator> <call pos:start="389:11" pos:end="393:52"><name pos:start="389:11" pos:end="389:30">est_client_set_proxy</name><argument_list pos:start="389:31" pos:end="393:52">(<argument pos:start="389:32" pos:end="389:35"><expr pos:start="389:32" pos:end="389:35"><name pos:start="389:32" pos:end="389:35">ectx</name></expr></argument>, <argument pos:start="389:38" pos:end="389:67"><expr pos:start="389:38" pos:end="389:67"><name pos:start="389:38" pos:end="389:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="390:32" pos:end="390:46"><expr pos:start="390:32" pos:end="390:46"><name pos:start="390:32" pos:end="390:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="391:32" pos:end="391:52"><expr pos:start="391:32" pos:end="391:52"><name pos:start="391:32" pos:end="391:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="392:32" pos:end="392:58"><expr pos:start="392:32" pos:end="392:58"><name pos:start="392:32" pos:end="392:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="393:32" pos:end="393:41"><expr pos:start="393:32" pos:end="393:41"><name pos:start="393:32" pos:end="393:41">max_userid</name></expr></argument>, <argument pos:start="393:44" pos:end="393:51"><expr pos:start="393:44" pos:end="393:51"><literal type="string" pos:start="393:44" pos:end="393:51">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:36"><expr pos:start="395:5" pos:end="395:35"><call pos:start="395:5" pos:end="395:35"><name pos:start="395:5" pos:end="395:13">CU_ASSERT</name><argument_list pos:start="395:14" pos:end="395:35">(<argument pos:start="395:15" pos:end="395:34"><expr pos:start="395:15" pos:end="395:34"><name pos:start="395:15" pos:end="395:18">e_rc</name> <operator pos:start="395:20" pos:end="395:21">==</operator> <name pos:start="395:23" pos:end="395:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="397:5" pos:end="399:7">/*
     * userid too long
     */</comment>
    <decl_stmt pos:start="400:5" pos:end="404:44"><decl pos:start="400:5" pos:end="404:43"><type pos:start="400:5" pos:end="400:10"><name pos:start="400:5" pos:end="400:8">char</name> <modifier pos:start="400:10" pos:end="400:10">*</modifier></type> <name pos:start="400:12" pos:end="400:22">long_userid</name> <init pos:start="400:24" pos:end="404:43">= <expr pos:start="400:26" pos:end="404:43"><literal type="string" pos:start="400:26" pos:end="400:87">"123456789012345678901234567890123456789012345678901234567890"</literal>
                         <literal type="string" pos:start="401:26" pos:end="401:87">"123456789012345678901234567890123456789012345678901234567890"</literal>
                         <literal type="string" pos:start="402:26" pos:end="402:87">"123456789012345678901234567890123456789012345678901234567890"</literal>
                         <literal type="string" pos:start="403:26" pos:end="403:87">"123456789012345678901234567890123456789012345678901234567890"</literal>
                         <literal type="string" pos:start="404:26" pos:end="404:43">"1234567890123456"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="406:5" pos:end="410:54"><expr pos:start="406:5" pos:end="410:53"><name pos:start="406:5" pos:end="406:8">e_rc</name><operator pos:start="406:9" pos:end="406:9">=</operator> <call pos:start="406:11" pos:end="410:53"><name pos:start="406:11" pos:end="406:30">est_client_set_proxy</name><argument_list pos:start="406:31" pos:end="410:53">(<argument pos:start="406:32" pos:end="406:35"><expr pos:start="406:32" pos:end="406:35"><name pos:start="406:32" pos:end="406:35">ectx</name></expr></argument>, <argument pos:start="406:38" pos:end="406:67"><expr pos:start="406:38" pos:end="406:67"><name pos:start="406:38" pos:end="406:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="407:32" pos:end="407:46"><expr pos:start="407:32" pos:end="407:46"><name pos:start="407:32" pos:end="407:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="408:32" pos:end="408:52"><expr pos:start="408:32" pos:end="408:52"><name pos:start="408:32" pos:end="408:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="409:32" pos:end="409:58"><expr pos:start="409:32" pos:end="409:58"><name pos:start="409:32" pos:end="409:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="410:32" pos:end="410:42"><expr pos:start="410:32" pos:end="410:42"><name pos:start="410:32" pos:end="410:42">long_userid</name></expr></argument>, <argument pos:start="410:45" pos:end="410:52"><expr pos:start="410:45" pos:end="410:52"><literal type="string" pos:start="410:45" pos:end="410:52">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="412:5" pos:end="412:50"><expr pos:start="412:5" pos:end="412:49"><call pos:start="412:5" pos:end="412:49"><name pos:start="412:5" pos:end="412:13">CU_ASSERT</name><argument_list pos:start="412:14" pos:end="412:49">(<argument pos:start="412:15" pos:end="412:48"><expr pos:start="412:15" pos:end="412:48"><name pos:start="412:15" pos:end="412:18">e_rc</name> <operator pos:start="412:20" pos:end="412:21">==</operator> <name pos:start="412:23" pos:end="412:48">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="414:5" pos:end="416:7">/*
     * userid is an empty string
     */</comment>    
    <expr_stmt pos:start="417:5" pos:end="421:45"><expr pos:start="417:5" pos:end="421:44"><name pos:start="417:5" pos:end="417:8">e_rc</name><operator pos:start="417:9" pos:end="417:9">=</operator> <call pos:start="417:11" pos:end="421:44"><name pos:start="417:11" pos:end="417:30">est_client_set_proxy</name><argument_list pos:start="417:31" pos:end="421:44">(<argument pos:start="417:32" pos:end="417:35"><expr pos:start="417:32" pos:end="417:35"><name pos:start="417:32" pos:end="417:35">ectx</name></expr></argument>, <argument pos:start="417:38" pos:end="417:67"><expr pos:start="417:38" pos:end="417:67"><name pos:start="417:38" pos:end="417:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="418:32" pos:end="418:46"><expr pos:start="418:32" pos:end="418:46"><name pos:start="418:32" pos:end="418:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="419:32" pos:end="419:52"><expr pos:start="419:32" pos:end="419:52"><name pos:start="419:32" pos:end="419:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="420:32" pos:end="420:58"><expr pos:start="420:32" pos:end="420:58"><name pos:start="420:32" pos:end="420:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="421:32" pos:end="421:33"><expr pos:start="421:32" pos:end="421:33"><literal type="string" pos:start="421:32" pos:end="421:33">""</literal></expr></argument>, <argument pos:start="421:36" pos:end="421:43"><expr pos:start="421:36" pos:end="421:43"><literal type="string" pos:start="421:36" pos:end="421:43">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:50"><expr pos:start="423:5" pos:end="423:49"><call pos:start="423:5" pos:end="423:49"><name pos:start="423:5" pos:end="423:13">CU_ASSERT</name><argument_list pos:start="423:14" pos:end="423:49">(<argument pos:start="423:15" pos:end="423:48"><expr pos:start="423:15" pos:end="423:48"><name pos:start="423:15" pos:end="423:18">e_rc</name> <operator pos:start="423:20" pos:end="423:21">==</operator> <name pos:start="423:23" pos:end="423:48">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="425:5" pos:end="427:7">/*
     * max pwd
     */</comment>
    <decl_stmt pos:start="428:5" pos:end="432:39"><decl pos:start="428:5" pos:end="432:38"><type pos:start="428:5" pos:end="428:10"><name pos:start="428:5" pos:end="428:8">char</name> <modifier pos:start="428:10" pos:end="428:10">*</modifier></type> <name pos:start="428:12" pos:end="428:18">max_pwd</name> <init pos:start="428:20" pos:end="432:38">= <expr pos:start="428:22" pos:end="432:38"><literal type="string" pos:start="428:22" pos:end="428:83">"123456789012345678901234567890123456789012345678901234567890"</literal>
                     <literal type="string" pos:start="429:22" pos:end="429:83">"123456789012345678901234567890123456789012345678901234567890"</literal>
                     <literal type="string" pos:start="430:22" pos:end="430:83">"123456789012345678901234567890123456789012345678901234567890"</literal>
                     <literal type="string" pos:start="431:22" pos:end="431:83">"123456789012345678901234567890123456789012345678901234567890"</literal>
                     <literal type="string" pos:start="432:22" pos:end="432:38">"123456789012345"</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt pos:start="434:5" pos:end="438:51"><expr pos:start="434:5" pos:end="438:50"><name pos:start="434:5" pos:end="434:8">e_rc</name><operator pos:start="434:9" pos:end="434:9">=</operator> <call pos:start="434:11" pos:end="438:50"><name pos:start="434:11" pos:end="434:30">est_client_set_proxy</name><argument_list pos:start="434:31" pos:end="438:50">(<argument pos:start="434:32" pos:end="434:35"><expr pos:start="434:32" pos:end="434:35"><name pos:start="434:32" pos:end="434:35">ectx</name></expr></argument>, <argument pos:start="434:38" pos:end="434:67"><expr pos:start="434:38" pos:end="434:67"><name pos:start="434:38" pos:end="434:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="435:32" pos:end="435:46"><expr pos:start="435:32" pos:end="435:46"><name pos:start="435:32" pos:end="435:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="436:32" pos:end="436:52"><expr pos:start="436:32" pos:end="436:52"><name pos:start="436:32" pos:end="436:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="437:32" pos:end="437:58"><expr pos:start="437:32" pos:end="437:58"><name pos:start="437:32" pos:end="437:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="438:32" pos:end="438:40"><expr pos:start="438:32" pos:end="438:40"><literal type="string" pos:start="438:32" pos:end="438:40">"estuser"</literal></expr></argument>, <argument pos:start="438:43" pos:end="438:49"><expr pos:start="438:43" pos:end="438:49"><name pos:start="438:43" pos:end="438:49">max_pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="440:5" pos:end="440:36"><expr pos:start="440:5" pos:end="440:35"><call pos:start="440:5" pos:end="440:35"><name pos:start="440:5" pos:end="440:13">CU_ASSERT</name><argument_list pos:start="440:14" pos:end="440:35">(<argument pos:start="440:15" pos:end="440:34"><expr pos:start="440:15" pos:end="440:34"><name pos:start="440:15" pos:end="440:18">e_rc</name> <operator pos:start="440:20" pos:end="440:21">==</operator> <name pos:start="440:23" pos:end="440:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="442:5" pos:end="444:7">/*
     * pwd too long
     */</comment>    
    <decl_stmt pos:start="445:5" pos:end="449:41"><decl pos:start="445:5" pos:end="449:40"><type pos:start="445:5" pos:end="445:10"><name pos:start="445:5" pos:end="445:8">char</name> <modifier pos:start="445:10" pos:end="445:10">*</modifier></type> <name pos:start="445:12" pos:end="445:19">long_pwd</name> <init pos:start="445:21" pos:end="449:40">= <expr pos:start="445:23" pos:end="449:40"><literal type="string" pos:start="445:23" pos:end="445:84">"123456789012345678901234567890123456789012345678901234567890"</literal>
                      <literal type="string" pos:start="446:23" pos:end="446:84">"123456789012345678901234567890123456789012345678901234567890"</literal>
                      <literal type="string" pos:start="447:23" pos:end="447:84">"123456789012345678901234567890123456789012345678901234567890"</literal>
                      <literal type="string" pos:start="448:23" pos:end="448:84">"123456789012345678901234567890123456789012345678901234567890"</literal>
                      <literal type="string" pos:start="449:23" pos:end="449:40">"1234567890123456"</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt pos:start="451:5" pos:end="455:52"><expr pos:start="451:5" pos:end="455:51"><name pos:start="451:5" pos:end="451:8">e_rc</name><operator pos:start="451:9" pos:end="451:9">=</operator> <call pos:start="451:11" pos:end="455:51"><name pos:start="451:11" pos:end="451:30">est_client_set_proxy</name><argument_list pos:start="451:31" pos:end="455:51">(<argument pos:start="451:32" pos:end="451:35"><expr pos:start="451:32" pos:end="451:35"><name pos:start="451:32" pos:end="451:35">ectx</name></expr></argument>, <argument pos:start="451:38" pos:end="451:67"><expr pos:start="451:38" pos:end="451:67"><name pos:start="451:38" pos:end="451:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="452:32" pos:end="452:46"><expr pos:start="452:32" pos:end="452:46"><name pos:start="452:32" pos:end="452:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="453:32" pos:end="453:52"><expr pos:start="453:32" pos:end="453:52"><name pos:start="453:32" pos:end="453:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="454:32" pos:end="454:58"><expr pos:start="454:32" pos:end="454:58"><name pos:start="454:32" pos:end="454:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="455:32" pos:end="455:40"><expr pos:start="455:32" pos:end="455:40"><literal type="string" pos:start="455:32" pos:end="455:40">"estuser"</literal></expr></argument>, <argument pos:start="455:43" pos:end="455:50"><expr pos:start="455:43" pos:end="455:50"><name pos:start="455:43" pos:end="455:50">long_pwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="457:5" pos:end="457:50"><expr pos:start="457:5" pos:end="457:49"><call pos:start="457:5" pos:end="457:49"><name pos:start="457:5" pos:end="457:13">CU_ASSERT</name><argument_list pos:start="457:14" pos:end="457:49">(<argument pos:start="457:15" pos:end="457:48"><expr pos:start="457:15" pos:end="457:48"><name pos:start="457:15" pos:end="457:18">e_rc</name> <operator pos:start="457:20" pos:end="457:21">==</operator> <name pos:start="457:23" pos:end="457:48">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="459:5" pos:end="461:7">/*
     * password is an empty string
     */</comment>    
    <expr_stmt pos:start="462:5" pos:end="466:46"><expr pos:start="462:5" pos:end="466:45"><name pos:start="462:5" pos:end="462:8">e_rc</name><operator pos:start="462:9" pos:end="462:9">=</operator> <call pos:start="462:11" pos:end="466:45"><name pos:start="462:11" pos:end="462:30">est_client_set_proxy</name><argument_list pos:start="462:31" pos:end="466:45">(<argument pos:start="462:32" pos:end="462:35"><expr pos:start="462:32" pos:end="462:35"><name pos:start="462:32" pos:end="462:35">ectx</name></expr></argument>, <argument pos:start="462:38" pos:end="462:67"><expr pos:start="462:38" pos:end="462:67"><name pos:start="462:38" pos:end="462:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="463:32" pos:end="463:46"><expr pos:start="463:32" pos:end="463:46"><name pos:start="463:32" pos:end="463:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="464:32" pos:end="464:52"><expr pos:start="464:32" pos:end="464:52"><name pos:start="464:32" pos:end="464:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="465:32" pos:end="465:58"><expr pos:start="465:32" pos:end="465:58"><name pos:start="465:32" pos:end="465:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="466:32" pos:end="466:40"><expr pos:start="466:32" pos:end="466:40"><literal type="string" pos:start="466:32" pos:end="466:40">"estuser"</literal></expr></argument>, <argument pos:start="466:43" pos:end="466:44"><expr pos:start="466:43" pos:end="466:44"><literal type="string" pos:start="466:43" pos:end="466:44">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="468:5" pos:end="468:50"><expr pos:start="468:5" pos:end="468:49"><call pos:start="468:5" pos:end="468:49"><name pos:start="468:5" pos:end="468:13">CU_ASSERT</name><argument_list pos:start="468:14" pos:end="468:49">(<argument pos:start="468:15" pos:end="468:48"><expr pos:start="468:15" pos:end="468:48"><name pos:start="468:15" pos:end="468:18">e_rc</name> <operator pos:start="468:20" pos:end="468:21">==</operator> <name pos:start="468:23" pos:end="468:48">EST_ERR_INVALID_PARAMETERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <expr_stmt pos:start="470:5" pos:end="470:22"><expr pos:start="470:5" pos:end="470:21"><call pos:start="470:5" pos:end="470:21"><name pos:start="470:5" pos:end="470:15">est_destroy</name><argument_list pos:start="470:16" pos:end="470:21">(<argument pos:start="470:17" pos:end="470:20"><expr pos:start="470:17" pos:end="470:20"><name pos:start="470:17" pos:end="470:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
</block_content>}</block></function>


<comment type="block" pos:start="475:1" pos:end="478:3">/*
 * Test for SOCKS 4 mode, no credentials, should pass
 *
 */</comment>
<function pos:start="479:1" pos:end="541:1"><type pos:start="479:1" pos:end="479:11"><specifier pos:start="479:1" pos:end="479:6">static</specifier> <name pos:start="479:8" pos:end="479:11">void</name></type> <name pos:start="479:13" pos:end="479:24">us4020_test2</name> <parameter_list pos:start="479:26" pos:end="479:31">(<parameter pos:start="479:27" pos:end="479:30"><decl pos:start="479:27" pos:end="479:30"><type pos:start="479:27" pos:end="479:30"><name pos:start="479:27" pos:end="479:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="480:1" pos:end="541:1">{<block_content pos:start="481:5" pos:end="540:22">
    <decl_stmt pos:start="481:5" pos:end="481:19"><decl pos:start="481:5" pos:end="481:18"><type pos:start="481:5" pos:end="481:7"><name pos:start="481:5" pos:end="481:7">int</name></type> <name pos:start="481:9" pos:end="481:14">sys_rc</name> <init pos:start="481:16" pos:end="481:18">= <expr pos:start="481:18" pos:end="481:18"><literal type="number" pos:start="481:18" pos:end="481:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="482:5" pos:end="482:19"><decl pos:start="482:5" pos:end="482:18"><type pos:start="482:5" pos:end="482:13"><name pos:start="482:5" pos:end="482:13">EST_ERROR</name></type> <name pos:start="482:15" pos:end="482:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="483:5" pos:end="483:25"><decl pos:start="483:5" pos:end="483:24"><type pos:start="483:5" pos:end="483:13"><name pos:start="483:5" pos:end="483:11">EST_CTX</name> <modifier pos:start="483:13" pos:end="483:13">*</modifier></type><name pos:start="483:14" pos:end="483:17">ectx</name> <init pos:start="483:19" pos:end="483:24">= <expr pos:start="483:21" pos:end="483:24"><name pos:start="483:21" pos:end="483:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="484:5" pos:end="484:28"><decl pos:start="484:5" pos:end="484:27"><type pos:start="484:5" pos:end="484:8"><name pos:start="484:5" pos:end="484:8">char</name></type> <name pos:start="484:10" pos:end="484:27"><name pos:start="484:10" pos:end="484:12">cmd</name><index pos:start="484:13" pos:end="484:27">[<expr pos:start="484:14" pos:end="484:26"><name pos:start="484:14" pos:end="484:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="485:5" pos:end="485:18"><decl pos:start="485:5" pos:end="485:17"><type pos:start="485:5" pos:end="485:14"><name pos:start="485:5" pos:end="485:12">EVP_PKEY</name> <modifier pos:start="485:14" pos:end="485:14">*</modifier></type><name pos:start="485:15" pos:end="485:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="486:5" pos:end="486:22"><decl pos:start="486:5" pos:end="486:21"><type pos:start="486:5" pos:end="486:7"><name pos:start="486:5" pos:end="486:7">int</name></type> <name pos:start="486:9" pos:end="486:17">pkcs7_len</name> <init pos:start="486:19" pos:end="486:21">= <expr pos:start="486:21" pos:end="486:21"><literal type="number" pos:start="486:21" pos:end="486:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="488:5" pos:end="488:16"><expr pos:start="488:5" pos:end="488:15"><name pos:start="488:5" pos:end="488:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="490:5" pos:end="492:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="493:5" pos:end="493:70"><expr pos:start="493:5" pos:end="493:69"><call pos:start="493:5" pos:end="493:69"><name pos:start="493:5" pos:end="493:12">snprintf</name><argument_list pos:start="493:13" pos:end="493:69">(<argument pos:start="493:14" pos:end="493:16"><expr pos:start="493:14" pos:end="493:16"><name pos:start="493:14" pos:end="493:16">cmd</name></expr></argument>, <argument pos:start="493:19" pos:end="493:31"><expr pos:start="493:19" pos:end="493:31"><name pos:start="493:19" pos:end="493:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="493:34" pos:end="493:68"><expr pos:start="493:34" pos:end="493:68"><literal type="string" pos:start="493:34" pos:end="493:68">"antinat -xcUS4020/antinat-cfg.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="495:25"><expr pos:start="495:5" pos:end="495:24"><name pos:start="495:5" pos:end="495:10">sys_rc</name> <operator pos:start="495:12" pos:end="495:12">=</operator> <call pos:start="495:14" pos:end="495:24"><name pos:start="495:14" pos:end="495:19">system</name><argument_list pos:start="495:20" pos:end="495:24">(<argument pos:start="495:21" pos:end="495:23"><expr pos:start="495:21" pos:end="495:23"><name pos:start="495:21" pos:end="495:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="496:5" pos:end="496:27"><expr pos:start="496:5" pos:end="496:26"><call pos:start="496:5" pos:end="496:26"><name pos:start="496:5" pos:end="496:13">CU_ASSERT</name><argument_list pos:start="496:14" pos:end="496:26">(<argument pos:start="496:15" pos:end="496:25"><expr pos:start="496:15" pos:end="496:25"><name pos:start="496:15" pos:end="496:20">sys_rc</name> <operator pos:start="496:22" pos:end="496:23">==</operator> <literal type="number" pos:start="496:25" pos:end="496:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="498:5" pos:end="500:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="501:5" pos:end="503:54"><expr pos:start="501:5" pos:end="503:53"><name pos:start="501:5" pos:end="501:8">ectx</name> <operator pos:start="501:10" pos:end="501:10">=</operator> <call pos:start="501:12" pos:end="503:53"><name pos:start="501:12" pos:end="501:26">est_client_init</name><argument_list pos:start="501:27" pos:end="503:53">(<argument pos:start="501:28" pos:end="501:34"><expr pos:start="501:28" pos:end="501:34"><name pos:start="501:28" pos:end="501:34">cacerts</name></expr></argument>, <argument pos:start="501:37" pos:end="501:47"><expr pos:start="501:37" pos:end="501:47"><name pos:start="501:37" pos:end="501:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="502:28" pos:end="502:46"><expr pos:start="502:28" pos:end="502:46"><name pos:start="502:28" pos:end="502:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="503:28" pos:end="503:52"><expr pos:start="503:28" pos:end="503:52"><name pos:start="503:28" pos:end="503:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="504:5" pos:end="504:28"><expr pos:start="504:5" pos:end="504:27"><call pos:start="504:5" pos:end="504:27"><name pos:start="504:5" pos:end="504:13">CU_ASSERT</name><argument_list pos:start="504:14" pos:end="504:27">(<argument pos:start="504:15" pos:end="504:26"><expr pos:start="504:15" pos:end="504:26"><name pos:start="504:15" pos:end="504:18">ectx</name> <operator pos:start="504:20" pos:end="504:21">!=</operator> <name pos:start="504:23" pos:end="504:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="506:5" pos:end="508:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="509:5" pos:end="513:43"><expr pos:start="509:5" pos:end="513:42"><name pos:start="509:5" pos:end="509:8">e_rc</name><operator pos:start="509:9" pos:end="509:9">=</operator> <call pos:start="509:11" pos:end="513:42"><name pos:start="509:11" pos:end="509:30">est_client_set_proxy</name><argument_list pos:start="509:31" pos:end="513:42">(<argument pos:start="509:32" pos:end="509:35"><expr pos:start="509:32" pos:end="509:35"><name pos:start="509:32" pos:end="509:35">ectx</name></expr></argument>, <argument pos:start="509:38" pos:end="509:60"><expr pos:start="509:38" pos:end="509:60"><name pos:start="509:38" pos:end="509:60">EST_CLIENT_PROXY_SOCKS4</name></expr></argument>,
                               <argument pos:start="510:32" pos:end="510:46"><expr pos:start="510:32" pos:end="510:46"><name pos:start="510:32" pos:end="510:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="511:32" pos:end="511:52"><expr pos:start="511:32" pos:end="511:52"><name pos:start="511:32" pos:end="511:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="512:32" pos:end="512:58"><expr pos:start="512:32" pos:end="512:58"><name pos:start="512:32" pos:end="512:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="513:32" pos:end="513:35"><expr pos:start="513:32" pos:end="513:35"><name pos:start="513:32" pos:end="513:35">NULL</name></expr></argument>, <argument pos:start="513:38" pos:end="513:41"><expr pos:start="513:38" pos:end="513:41"><name pos:start="513:38" pos:end="513:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="514:5" pos:end="514:36"><expr pos:start="514:5" pos:end="514:35"><call pos:start="514:5" pos:end="514:35"><name pos:start="514:5" pos:end="514:13">CU_ASSERT</name><argument_list pos:start="514:14" pos:end="514:35">(<argument pos:start="514:15" pos:end="514:34"><expr pos:start="514:15" pos:end="514:34"><name pos:start="514:15" pos:end="514:18">e_rc</name> <operator pos:start="514:20" pos:end="514:21">==</operator> <name pos:start="514:23" pos:end="514:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="516:5" pos:end="518:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="519:5" pos:end="519:73"><expr pos:start="519:5" pos:end="519:72"><name pos:start="519:5" pos:end="519:8">e_rc</name> <operator pos:start="519:10" pos:end="519:10">=</operator> <call pos:start="519:12" pos:end="519:72"><name pos:start="519:12" pos:end="519:30">est_client_set_auth</name><argument_list pos:start="519:31" pos:end="519:72">(<argument pos:start="519:32" pos:end="519:35"><expr pos:start="519:32" pos:end="519:35"><name pos:start="519:32" pos:end="519:35">ectx</name></expr></argument>, <argument pos:start="519:38" pos:end="519:47"><expr pos:start="519:38" pos:end="519:47"><name pos:start="519:38" pos:end="519:47">US4020_UID</name></expr></argument>, <argument pos:start="519:50" pos:end="519:59"><expr pos:start="519:50" pos:end="519:59"><name pos:start="519:50" pos:end="519:59">US4020_PWD</name></expr></argument>, <argument pos:start="519:62" pos:end="519:65"><expr pos:start="519:62" pos:end="519:65"><name pos:start="519:62" pos:end="519:65">NULL</name></expr></argument>, <argument pos:start="519:68" pos:end="519:71"><expr pos:start="519:68" pos:end="519:71"><name pos:start="519:68" pos:end="519:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="520:5" pos:end="520:36"><expr pos:start="520:5" pos:end="520:35"><call pos:start="520:5" pos:end="520:35"><name pos:start="520:5" pos:end="520:13">CU_ASSERT</name><argument_list pos:start="520:14" pos:end="520:35">(<argument pos:start="520:15" pos:end="520:34"><expr pos:start="520:15" pos:end="520:34"><name pos:start="520:15" pos:end="520:18">e_rc</name> <operator pos:start="520:20" pos:end="520:21">==</operator> <name pos:start="520:23" pos:end="520:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="522:5" pos:end="524:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="525:5" pos:end="525:80"><expr pos:start="525:5" pos:end="525:79"><call pos:start="525:5" pos:end="525:79"><name pos:start="525:5" pos:end="525:25">est_client_set_server</name><argument_list pos:start="525:26" pos:end="525:79">(<argument pos:start="525:27" pos:end="525:30"><expr pos:start="525:27" pos:end="525:30"><name pos:start="525:27" pos:end="525:30">ectx</name></expr></argument>, <argument pos:start="525:33" pos:end="525:48"><expr pos:start="525:33" pos:end="525:48"><name pos:start="525:33" pos:end="525:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="525:51" pos:end="525:72"><expr pos:start="525:51" pos:end="525:72"><name pos:start="525:51" pos:end="525:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="525:75" pos:end="525:78"><expr pos:start="525:75" pos:end="525:78"><name pos:start="525:75" pos:end="525:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="527:5" pos:end="529:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="530:5" pos:end="530:33"><expr pos:start="530:5" pos:end="530:32"><name pos:start="530:5" pos:end="530:7">key</name> <operator pos:start="530:9" pos:end="530:9">=</operator> <call pos:start="530:11" pos:end="530:32"><name pos:start="530:11" pos:end="530:30">generate_private_key</name><argument_list pos:start="530:31" pos:end="530:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="531:5" pos:end="531:27"><expr pos:start="531:5" pos:end="531:26"><call pos:start="531:5" pos:end="531:26"><name pos:start="531:5" pos:end="531:13">CU_ASSERT</name><argument_list pos:start="531:14" pos:end="531:26">(<argument pos:start="531:15" pos:end="531:25"><expr pos:start="531:15" pos:end="531:25"><name pos:start="531:15" pos:end="531:17">key</name> <operator pos:start="531:19" pos:end="531:20">!=</operator> <name pos:start="531:22" pos:end="531:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="533:5" pos:end="535:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="536:5" pos:end="536:64"><expr pos:start="536:5" pos:end="536:63"><name pos:start="536:5" pos:end="536:8">e_rc</name> <operator pos:start="536:10" pos:end="536:10">=</operator> <call pos:start="536:12" pos:end="536:63"><name pos:start="536:12" pos:end="536:28">est_client_enroll</name><argument_list pos:start="536:29" pos:end="536:63">(<argument pos:start="536:30" pos:end="536:33"><expr pos:start="536:30" pos:end="536:33"><name pos:start="536:30" pos:end="536:33">ectx</name></expr></argument>, <argument pos:start="536:36" pos:end="536:45"><expr pos:start="536:36" pos:end="536:45"><literal type="string" pos:start="536:36" pos:end="536:45">"TC4020-2"</literal></expr></argument>, <argument pos:start="536:48" pos:end="536:57"><expr pos:start="536:48" pos:end="536:57"><operator pos:start="536:48" pos:end="536:48">&amp;</operator><name pos:start="536:49" pos:end="536:57">pkcs7_len</name></expr></argument>, <argument pos:start="536:60" pos:end="536:62"><expr pos:start="536:60" pos:end="536:62"><name pos:start="536:60" pos:end="536:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="537:5" pos:end="537:36"><expr pos:start="537:5" pos:end="537:35"><call pos:start="537:5" pos:end="537:35"><name pos:start="537:5" pos:end="537:13">CU_ASSERT</name><argument_list pos:start="537:14" pos:end="537:35">(<argument pos:start="537:15" pos:end="537:34"><expr pos:start="537:15" pos:end="537:34"><name pos:start="537:15" pos:end="537:18">e_rc</name> <operator pos:start="537:20" pos:end="537:21">==</operator> <name pos:start="537:23" pos:end="537:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="539:5" pos:end="539:23"><expr pos:start="539:5" pos:end="539:22"><call pos:start="539:5" pos:end="539:22"><name pos:start="539:5" pos:end="539:20">shutdown_antinat</name><argument_list pos:start="539:21" pos:end="539:22">()</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="540:5" pos:end="540:22"><expr pos:start="540:5" pos:end="540:21"><call pos:start="540:5" pos:end="540:21"><name pos:start="540:5" pos:end="540:15">est_destroy</name><argument_list pos:start="540:16" pos:end="540:21">(<argument pos:start="540:17" pos:end="540:20"><expr pos:start="540:17" pos:end="540:20"><name pos:start="540:17" pos:end="540:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="544:1" pos:end="547:3">/*
 * Test for SOCKS 4 mode, with credentials, should pass
 *
 */</comment>
<function pos:start="548:1" pos:end="610:1"><type pos:start="548:1" pos:end="548:11"><specifier pos:start="548:1" pos:end="548:6">static</specifier> <name pos:start="548:8" pos:end="548:11">void</name></type> <name pos:start="548:13" pos:end="548:24">us4020_test3</name> <parameter_list pos:start="548:26" pos:end="548:31">(<parameter pos:start="548:27" pos:end="548:30"><decl pos:start="548:27" pos:end="548:30"><type pos:start="548:27" pos:end="548:30"><name pos:start="548:27" pos:end="548:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="549:1" pos:end="610:1">{<block_content pos:start="550:5" pos:end="609:22">
    <decl_stmt pos:start="550:5" pos:end="550:19"><decl pos:start="550:5" pos:end="550:18"><type pos:start="550:5" pos:end="550:7"><name pos:start="550:5" pos:end="550:7">int</name></type> <name pos:start="550:9" pos:end="550:14">sys_rc</name> <init pos:start="550:16" pos:end="550:18">= <expr pos:start="550:18" pos:end="550:18"><literal type="number" pos:start="550:18" pos:end="550:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="551:5" pos:end="551:19"><decl pos:start="551:5" pos:end="551:18"><type pos:start="551:5" pos:end="551:13"><name pos:start="551:5" pos:end="551:13">EST_ERROR</name></type> <name pos:start="551:15" pos:end="551:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="552:5" pos:end="552:25"><decl pos:start="552:5" pos:end="552:24"><type pos:start="552:5" pos:end="552:13"><name pos:start="552:5" pos:end="552:11">EST_CTX</name> <modifier pos:start="552:13" pos:end="552:13">*</modifier></type><name pos:start="552:14" pos:end="552:17">ectx</name> <init pos:start="552:19" pos:end="552:24">= <expr pos:start="552:21" pos:end="552:24"><name pos:start="552:21" pos:end="552:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="553:5" pos:end="553:28"><decl pos:start="553:5" pos:end="553:27"><type pos:start="553:5" pos:end="553:8"><name pos:start="553:5" pos:end="553:8">char</name></type> <name pos:start="553:10" pos:end="553:27"><name pos:start="553:10" pos:end="553:12">cmd</name><index pos:start="553:13" pos:end="553:27">[<expr pos:start="553:14" pos:end="553:26"><name pos:start="553:14" pos:end="553:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="554:5" pos:end="554:18"><decl pos:start="554:5" pos:end="554:17"><type pos:start="554:5" pos:end="554:14"><name pos:start="554:5" pos:end="554:12">EVP_PKEY</name> <modifier pos:start="554:14" pos:end="554:14">*</modifier></type><name pos:start="554:15" pos:end="554:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="555:5" pos:end="555:22"><decl pos:start="555:5" pos:end="555:21"><type pos:start="555:5" pos:end="555:7"><name pos:start="555:5" pos:end="555:7">int</name></type> <name pos:start="555:9" pos:end="555:17">pkcs7_len</name> <init pos:start="555:19" pos:end="555:21">= <expr pos:start="555:21" pos:end="555:21"><literal type="number" pos:start="555:21" pos:end="555:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="557:5" pos:end="557:16"><expr pos:start="557:5" pos:end="557:15"><name pos:start="557:5" pos:end="557:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="559:5" pos:end="561:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="562:5" pos:end="562:70"><expr pos:start="562:5" pos:end="562:69"><call pos:start="562:5" pos:end="562:69"><name pos:start="562:5" pos:end="562:12">snprintf</name><argument_list pos:start="562:13" pos:end="562:69">(<argument pos:start="562:14" pos:end="562:16"><expr pos:start="562:14" pos:end="562:16"><name pos:start="562:14" pos:end="562:16">cmd</name></expr></argument>, <argument pos:start="562:19" pos:end="562:31"><expr pos:start="562:19" pos:end="562:31"><name pos:start="562:19" pos:end="562:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="562:34" pos:end="562:68"><expr pos:start="562:34" pos:end="562:68"><literal type="string" pos:start="562:34" pos:end="562:68">"antinat -xcUS4020/antinat-cfg.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="564:5" pos:end="564:25"><expr pos:start="564:5" pos:end="564:24"><name pos:start="564:5" pos:end="564:10">sys_rc</name> <operator pos:start="564:12" pos:end="564:12">=</operator> <call pos:start="564:14" pos:end="564:24"><name pos:start="564:14" pos:end="564:19">system</name><argument_list pos:start="564:20" pos:end="564:24">(<argument pos:start="564:21" pos:end="564:23"><expr pos:start="564:21" pos:end="564:23"><name pos:start="564:21" pos:end="564:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="565:5" pos:end="565:27"><expr pos:start="565:5" pos:end="565:26"><call pos:start="565:5" pos:end="565:26"><name pos:start="565:5" pos:end="565:13">CU_ASSERT</name><argument_list pos:start="565:14" pos:end="565:26">(<argument pos:start="565:15" pos:end="565:25"><expr pos:start="565:15" pos:end="565:25"><name pos:start="565:15" pos:end="565:20">sys_rc</name> <operator pos:start="565:22" pos:end="565:23">==</operator> <literal type="number" pos:start="565:25" pos:end="565:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="567:5" pos:end="569:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="570:5" pos:end="572:54"><expr pos:start="570:5" pos:end="572:53"><name pos:start="570:5" pos:end="570:8">ectx</name> <operator pos:start="570:10" pos:end="570:10">=</operator> <call pos:start="570:12" pos:end="572:53"><name pos:start="570:12" pos:end="570:26">est_client_init</name><argument_list pos:start="570:27" pos:end="572:53">(<argument pos:start="570:28" pos:end="570:34"><expr pos:start="570:28" pos:end="570:34"><name pos:start="570:28" pos:end="570:34">cacerts</name></expr></argument>, <argument pos:start="570:37" pos:end="570:47"><expr pos:start="570:37" pos:end="570:47"><name pos:start="570:37" pos:end="570:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="571:28" pos:end="571:46"><expr pos:start="571:28" pos:end="571:46"><name pos:start="571:28" pos:end="571:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="572:28" pos:end="572:52"><expr pos:start="572:28" pos:end="572:52"><name pos:start="572:28" pos:end="572:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="573:5" pos:end="573:28"><expr pos:start="573:5" pos:end="573:27"><call pos:start="573:5" pos:end="573:27"><name pos:start="573:5" pos:end="573:13">CU_ASSERT</name><argument_list pos:start="573:14" pos:end="573:27">(<argument pos:start="573:15" pos:end="573:26"><expr pos:start="573:15" pos:end="573:26"><name pos:start="573:15" pos:end="573:18">ectx</name> <operator pos:start="573:20" pos:end="573:21">!=</operator> <name pos:start="573:23" pos:end="573:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="575:5" pos:end="577:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="578:5" pos:end="582:52"><expr pos:start="578:5" pos:end="582:51"><name pos:start="578:5" pos:end="578:8">e_rc</name><operator pos:start="578:9" pos:end="578:9">=</operator> <call pos:start="578:11" pos:end="582:51"><name pos:start="578:11" pos:end="578:30">est_client_set_proxy</name><argument_list pos:start="578:31" pos:end="582:51">(<argument pos:start="578:32" pos:end="578:35"><expr pos:start="578:32" pos:end="578:35"><name pos:start="578:32" pos:end="578:35">ectx</name></expr></argument>, <argument pos:start="578:38" pos:end="578:60"><expr pos:start="578:38" pos:end="578:60"><name pos:start="578:38" pos:end="578:60">EST_CLIENT_PROXY_SOCKS4</name></expr></argument>,
                               <argument pos:start="579:32" pos:end="579:46"><expr pos:start="579:32" pos:end="579:46"><name pos:start="579:32" pos:end="579:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="580:32" pos:end="580:52"><expr pos:start="580:32" pos:end="580:52"><name pos:start="580:32" pos:end="580:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="581:32" pos:end="581:58"><expr pos:start="581:32" pos:end="581:58"><name pos:start="581:32" pos:end="581:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="582:32" pos:end="582:40"><expr pos:start="582:32" pos:end="582:40"><literal type="string" pos:start="582:32" pos:end="582:40">"estuser"</literal></expr></argument>, <argument pos:start="582:43" pos:end="582:50"><expr pos:start="582:43" pos:end="582:50"><literal type="string" pos:start="582:43" pos:end="582:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="583:5" pos:end="583:36"><expr pos:start="583:5" pos:end="583:35"><call pos:start="583:5" pos:end="583:35"><name pos:start="583:5" pos:end="583:13">CU_ASSERT</name><argument_list pos:start="583:14" pos:end="583:35">(<argument pos:start="583:15" pos:end="583:34"><expr pos:start="583:15" pos:end="583:34"><name pos:start="583:15" pos:end="583:18">e_rc</name> <operator pos:start="583:20" pos:end="583:21">==</operator> <name pos:start="583:23" pos:end="583:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="585:5" pos:end="587:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="588:5" pos:end="588:73"><expr pos:start="588:5" pos:end="588:72"><name pos:start="588:5" pos:end="588:8">e_rc</name> <operator pos:start="588:10" pos:end="588:10">=</operator> <call pos:start="588:12" pos:end="588:72"><name pos:start="588:12" pos:end="588:30">est_client_set_auth</name><argument_list pos:start="588:31" pos:end="588:72">(<argument pos:start="588:32" pos:end="588:35"><expr pos:start="588:32" pos:end="588:35"><name pos:start="588:32" pos:end="588:35">ectx</name></expr></argument>, <argument pos:start="588:38" pos:end="588:47"><expr pos:start="588:38" pos:end="588:47"><name pos:start="588:38" pos:end="588:47">US4020_UID</name></expr></argument>, <argument pos:start="588:50" pos:end="588:59"><expr pos:start="588:50" pos:end="588:59"><name pos:start="588:50" pos:end="588:59">US4020_PWD</name></expr></argument>, <argument pos:start="588:62" pos:end="588:65"><expr pos:start="588:62" pos:end="588:65"><name pos:start="588:62" pos:end="588:65">NULL</name></expr></argument>, <argument pos:start="588:68" pos:end="588:71"><expr pos:start="588:68" pos:end="588:71"><name pos:start="588:68" pos:end="588:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="589:5" pos:end="589:36"><expr pos:start="589:5" pos:end="589:35"><call pos:start="589:5" pos:end="589:35"><name pos:start="589:5" pos:end="589:13">CU_ASSERT</name><argument_list pos:start="589:14" pos:end="589:35">(<argument pos:start="589:15" pos:end="589:34"><expr pos:start="589:15" pos:end="589:34"><name pos:start="589:15" pos:end="589:18">e_rc</name> <operator pos:start="589:20" pos:end="589:21">==</operator> <name pos:start="589:23" pos:end="589:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="591:5" pos:end="593:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="594:5" pos:end="594:80"><expr pos:start="594:5" pos:end="594:79"><call pos:start="594:5" pos:end="594:79"><name pos:start="594:5" pos:end="594:25">est_client_set_server</name><argument_list pos:start="594:26" pos:end="594:79">(<argument pos:start="594:27" pos:end="594:30"><expr pos:start="594:27" pos:end="594:30"><name pos:start="594:27" pos:end="594:30">ectx</name></expr></argument>, <argument pos:start="594:33" pos:end="594:48"><expr pos:start="594:33" pos:end="594:48"><name pos:start="594:33" pos:end="594:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="594:51" pos:end="594:72"><expr pos:start="594:51" pos:end="594:72"><name pos:start="594:51" pos:end="594:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="594:75" pos:end="594:78"><expr pos:start="594:75" pos:end="594:78"><name pos:start="594:75" pos:end="594:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="596:5" pos:end="598:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="599:5" pos:end="599:33"><expr pos:start="599:5" pos:end="599:32"><name pos:start="599:5" pos:end="599:7">key</name> <operator pos:start="599:9" pos:end="599:9">=</operator> <call pos:start="599:11" pos:end="599:32"><name pos:start="599:11" pos:end="599:30">generate_private_key</name><argument_list pos:start="599:31" pos:end="599:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="600:5" pos:end="600:27"><expr pos:start="600:5" pos:end="600:26"><call pos:start="600:5" pos:end="600:26"><name pos:start="600:5" pos:end="600:13">CU_ASSERT</name><argument_list pos:start="600:14" pos:end="600:26">(<argument pos:start="600:15" pos:end="600:25"><expr pos:start="600:15" pos:end="600:25"><name pos:start="600:15" pos:end="600:17">key</name> <operator pos:start="600:19" pos:end="600:20">!=</operator> <name pos:start="600:22" pos:end="600:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="602:5" pos:end="604:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="605:5" pos:end="605:64"><expr pos:start="605:5" pos:end="605:63"><name pos:start="605:5" pos:end="605:8">e_rc</name> <operator pos:start="605:10" pos:end="605:10">=</operator> <call pos:start="605:12" pos:end="605:63"><name pos:start="605:12" pos:end="605:28">est_client_enroll</name><argument_list pos:start="605:29" pos:end="605:63">(<argument pos:start="605:30" pos:end="605:33"><expr pos:start="605:30" pos:end="605:33"><name pos:start="605:30" pos:end="605:33">ectx</name></expr></argument>, <argument pos:start="605:36" pos:end="605:45"><expr pos:start="605:36" pos:end="605:45"><literal type="string" pos:start="605:36" pos:end="605:45">"TC4020-3"</literal></expr></argument>, <argument pos:start="605:48" pos:end="605:57"><expr pos:start="605:48" pos:end="605:57"><operator pos:start="605:48" pos:end="605:48">&amp;</operator><name pos:start="605:49" pos:end="605:57">pkcs7_len</name></expr></argument>, <argument pos:start="605:60" pos:end="605:62"><expr pos:start="605:60" pos:end="605:62"><name pos:start="605:60" pos:end="605:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="606:5" pos:end="606:36"><expr pos:start="606:5" pos:end="606:35"><call pos:start="606:5" pos:end="606:35"><name pos:start="606:5" pos:end="606:13">CU_ASSERT</name><argument_list pos:start="606:14" pos:end="606:35">(<argument pos:start="606:15" pos:end="606:34"><expr pos:start="606:15" pos:end="606:34"><name pos:start="606:15" pos:end="606:18">e_rc</name> <operator pos:start="606:20" pos:end="606:21">==</operator> <name pos:start="606:23" pos:end="606:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="608:5" pos:end="608:23"><expr pos:start="608:5" pos:end="608:22"><call pos:start="608:5" pos:end="608:22"><name pos:start="608:5" pos:end="608:20">shutdown_antinat</name><argument_list pos:start="608:21" pos:end="608:22">()</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="609:5" pos:end="609:22"><expr pos:start="609:5" pos:end="609:21"><call pos:start="609:5" pos:end="609:21"><name pos:start="609:5" pos:end="609:15">est_destroy</name><argument_list pos:start="609:16" pos:end="609:21">(<argument pos:start="609:17" pos:end="609:20"><expr pos:start="609:17" pos:end="609:20"><name pos:start="609:17" pos:end="609:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="613:1" pos:end="616:3">/*
 * Test for SOCKS 5 mode
 *
 */</comment>
<function pos:start="617:1" pos:end="680:1"><type pos:start="617:1" pos:end="617:11"><specifier pos:start="617:1" pos:end="617:6">static</specifier> <name pos:start="617:8" pos:end="617:11">void</name></type> <name pos:start="617:13" pos:end="617:24">us4020_test4</name> <parameter_list pos:start="617:26" pos:end="617:31">(<parameter pos:start="617:27" pos:end="617:30"><decl pos:start="617:27" pos:end="617:30"><type pos:start="617:27" pos:end="617:30"><name pos:start="617:27" pos:end="617:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="618:1" pos:end="680:1">{<block_content pos:start="619:5" pos:end="679:22">
    <decl_stmt pos:start="619:5" pos:end="619:19"><decl pos:start="619:5" pos:end="619:18"><type pos:start="619:5" pos:end="619:7"><name pos:start="619:5" pos:end="619:7">int</name></type> <name pos:start="619:9" pos:end="619:14">sys_rc</name> <init pos:start="619:16" pos:end="619:18">= <expr pos:start="619:18" pos:end="619:18"><literal type="number" pos:start="619:18" pos:end="619:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="620:5" pos:end="620:19"><decl pos:start="620:5" pos:end="620:18"><type pos:start="620:5" pos:end="620:13"><name pos:start="620:5" pos:end="620:13">EST_ERROR</name></type> <name pos:start="620:15" pos:end="620:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="621:5" pos:end="621:25"><decl pos:start="621:5" pos:end="621:24"><type pos:start="621:5" pos:end="621:13"><name pos:start="621:5" pos:end="621:11">EST_CTX</name> <modifier pos:start="621:13" pos:end="621:13">*</modifier></type><name pos:start="621:14" pos:end="621:17">ectx</name> <init pos:start="621:19" pos:end="621:24">= <expr pos:start="621:21" pos:end="621:24"><name pos:start="621:21" pos:end="621:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="622:5" pos:end="622:28"><decl pos:start="622:5" pos:end="622:27"><type pos:start="622:5" pos:end="622:8"><name pos:start="622:5" pos:end="622:8">char</name></type> <name pos:start="622:10" pos:end="622:27"><name pos:start="622:10" pos:end="622:12">cmd</name><index pos:start="622:13" pos:end="622:27">[<expr pos:start="622:14" pos:end="622:26"><name pos:start="622:14" pos:end="622:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="623:5" pos:end="623:18"><decl pos:start="623:5" pos:end="623:17"><type pos:start="623:5" pos:end="623:14"><name pos:start="623:5" pos:end="623:12">EVP_PKEY</name> <modifier pos:start="623:14" pos:end="623:14">*</modifier></type><name pos:start="623:15" pos:end="623:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="624:5" pos:end="624:22"><decl pos:start="624:5" pos:end="624:21"><type pos:start="624:5" pos:end="624:7"><name pos:start="624:5" pos:end="624:7">int</name></type> <name pos:start="624:9" pos:end="624:17">pkcs7_len</name> <init pos:start="624:19" pos:end="624:21">= <expr pos:start="624:21" pos:end="624:21"><literal type="number" pos:start="624:21" pos:end="624:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="626:5" pos:end="626:16"><expr pos:start="626:5" pos:end="626:15"><name pos:start="626:5" pos:end="626:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="628:5" pos:end="630:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="631:5" pos:end="631:70"><expr pos:start="631:5" pos:end="631:69"><call pos:start="631:5" pos:end="631:69"><name pos:start="631:5" pos:end="631:12">snprintf</name><argument_list pos:start="631:13" pos:end="631:69">(<argument pos:start="631:14" pos:end="631:16"><expr pos:start="631:14" pos:end="631:16"><name pos:start="631:14" pos:end="631:16">cmd</name></expr></argument>, <argument pos:start="631:19" pos:end="631:31"><expr pos:start="631:19" pos:end="631:31"><name pos:start="631:19" pos:end="631:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="631:34" pos:end="631:68"><expr pos:start="631:34" pos:end="631:68"><literal type="string" pos:start="631:34" pos:end="631:68">"antinat -xcUS4020/antinat-cfg.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="633:5" pos:end="633:25"><expr pos:start="633:5" pos:end="633:24"><name pos:start="633:5" pos:end="633:10">sys_rc</name> <operator pos:start="633:12" pos:end="633:12">=</operator> <call pos:start="633:14" pos:end="633:24"><name pos:start="633:14" pos:end="633:19">system</name><argument_list pos:start="633:20" pos:end="633:24">(<argument pos:start="633:21" pos:end="633:23"><expr pos:start="633:21" pos:end="633:23"><name pos:start="633:21" pos:end="633:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="634:5" pos:end="634:27"><expr pos:start="634:5" pos:end="634:26"><call pos:start="634:5" pos:end="634:26"><name pos:start="634:5" pos:end="634:13">CU_ASSERT</name><argument_list pos:start="634:14" pos:end="634:26">(<argument pos:start="634:15" pos:end="634:25"><expr pos:start="634:15" pos:end="634:25"><name pos:start="634:15" pos:end="634:20">sys_rc</name> <operator pos:start="634:22" pos:end="634:23">==</operator> <literal type="number" pos:start="634:25" pos:end="634:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="636:5" pos:end="638:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="639:5" pos:end="641:54"><expr pos:start="639:5" pos:end="641:53"><name pos:start="639:5" pos:end="639:8">ectx</name> <operator pos:start="639:10" pos:end="639:10">=</operator> <call pos:start="639:12" pos:end="641:53"><name pos:start="639:12" pos:end="639:26">est_client_init</name><argument_list pos:start="639:27" pos:end="641:53">(<argument pos:start="639:28" pos:end="639:34"><expr pos:start="639:28" pos:end="639:34"><name pos:start="639:28" pos:end="639:34">cacerts</name></expr></argument>, <argument pos:start="639:37" pos:end="639:47"><expr pos:start="639:37" pos:end="639:47"><name pos:start="639:37" pos:end="639:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="640:28" pos:end="640:46"><expr pos:start="640:28" pos:end="640:46"><name pos:start="640:28" pos:end="640:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="641:28" pos:end="641:52"><expr pos:start="641:28" pos:end="641:52"><name pos:start="641:28" pos:end="641:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="642:5" pos:end="642:28"><expr pos:start="642:5" pos:end="642:27"><call pos:start="642:5" pos:end="642:27"><name pos:start="642:5" pos:end="642:13">CU_ASSERT</name><argument_list pos:start="642:14" pos:end="642:27">(<argument pos:start="642:15" pos:end="642:26"><expr pos:start="642:15" pos:end="642:26"><name pos:start="642:15" pos:end="642:18">ectx</name> <operator pos:start="642:20" pos:end="642:21">!=</operator> <name pos:start="642:23" pos:end="642:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="644:5" pos:end="646:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="647:5" pos:end="651:43"><expr pos:start="647:5" pos:end="651:42"><name pos:start="647:5" pos:end="647:8">e_rc</name><operator pos:start="647:9" pos:end="647:9">=</operator> <call pos:start="647:11" pos:end="651:42"><name pos:start="647:11" pos:end="647:30">est_client_set_proxy</name><argument_list pos:start="647:31" pos:end="651:42">(<argument pos:start="647:32" pos:end="647:35"><expr pos:start="647:32" pos:end="647:35"><name pos:start="647:32" pos:end="647:35">ectx</name></expr></argument>, <argument pos:start="647:38" pos:end="647:60"><expr pos:start="647:38" pos:end="647:60"><name pos:start="647:38" pos:end="647:60">EST_CLIENT_PROXY_SOCKS5</name></expr></argument>,
                               <argument pos:start="648:32" pos:end="648:46"><expr pos:start="648:32" pos:end="648:46"><name pos:start="648:32" pos:end="648:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="649:32" pos:end="649:52"><expr pos:start="649:32" pos:end="649:52"><name pos:start="649:32" pos:end="649:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="650:32" pos:end="650:58"><expr pos:start="650:32" pos:end="650:58"><name pos:start="650:32" pos:end="650:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="651:32" pos:end="651:35"><expr pos:start="651:32" pos:end="651:35"><name pos:start="651:32" pos:end="651:35">NULL</name></expr></argument>, <argument pos:start="651:38" pos:end="651:41"><expr pos:start="651:38" pos:end="651:41"><name pos:start="651:38" pos:end="651:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="652:1" pos:end="652:58">/*                                "estuser", "estpwd"); */</comment>
    <expr_stmt pos:start="653:5" pos:end="653:36"><expr pos:start="653:5" pos:end="653:35"><call pos:start="653:5" pos:end="653:35"><name pos:start="653:5" pos:end="653:13">CU_ASSERT</name><argument_list pos:start="653:14" pos:end="653:35">(<argument pos:start="653:15" pos:end="653:34"><expr pos:start="653:15" pos:end="653:34"><name pos:start="653:15" pos:end="653:18">e_rc</name> <operator pos:start="653:20" pos:end="653:21">==</operator> <name pos:start="653:23" pos:end="653:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="655:5" pos:end="657:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="658:5" pos:end="658:73"><expr pos:start="658:5" pos:end="658:72"><name pos:start="658:5" pos:end="658:8">e_rc</name> <operator pos:start="658:10" pos:end="658:10">=</operator> <call pos:start="658:12" pos:end="658:72"><name pos:start="658:12" pos:end="658:30">est_client_set_auth</name><argument_list pos:start="658:31" pos:end="658:72">(<argument pos:start="658:32" pos:end="658:35"><expr pos:start="658:32" pos:end="658:35"><name pos:start="658:32" pos:end="658:35">ectx</name></expr></argument>, <argument pos:start="658:38" pos:end="658:47"><expr pos:start="658:38" pos:end="658:47"><name pos:start="658:38" pos:end="658:47">US4020_UID</name></expr></argument>, <argument pos:start="658:50" pos:end="658:59"><expr pos:start="658:50" pos:end="658:59"><name pos:start="658:50" pos:end="658:59">US4020_PWD</name></expr></argument>, <argument pos:start="658:62" pos:end="658:65"><expr pos:start="658:62" pos:end="658:65"><name pos:start="658:62" pos:end="658:65">NULL</name></expr></argument>, <argument pos:start="658:68" pos:end="658:71"><expr pos:start="658:68" pos:end="658:71"><name pos:start="658:68" pos:end="658:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="659:5" pos:end="659:36"><expr pos:start="659:5" pos:end="659:35"><call pos:start="659:5" pos:end="659:35"><name pos:start="659:5" pos:end="659:13">CU_ASSERT</name><argument_list pos:start="659:14" pos:end="659:35">(<argument pos:start="659:15" pos:end="659:34"><expr pos:start="659:15" pos:end="659:34"><name pos:start="659:15" pos:end="659:18">e_rc</name> <operator pos:start="659:20" pos:end="659:21">==</operator> <name pos:start="659:23" pos:end="659:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="661:5" pos:end="663:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="664:5" pos:end="664:80"><expr pos:start="664:5" pos:end="664:79"><call pos:start="664:5" pos:end="664:79"><name pos:start="664:5" pos:end="664:25">est_client_set_server</name><argument_list pos:start="664:26" pos:end="664:79">(<argument pos:start="664:27" pos:end="664:30"><expr pos:start="664:27" pos:end="664:30"><name pos:start="664:27" pos:end="664:30">ectx</name></expr></argument>, <argument pos:start="664:33" pos:end="664:48"><expr pos:start="664:33" pos:end="664:48"><name pos:start="664:33" pos:end="664:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="664:51" pos:end="664:72"><expr pos:start="664:51" pos:end="664:72"><name pos:start="664:51" pos:end="664:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="664:75" pos:end="664:78"><expr pos:start="664:75" pos:end="664:78"><name pos:start="664:75" pos:end="664:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="666:5" pos:end="668:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="669:5" pos:end="669:33"><expr pos:start="669:5" pos:end="669:32"><name pos:start="669:5" pos:end="669:7">key</name> <operator pos:start="669:9" pos:end="669:9">=</operator> <call pos:start="669:11" pos:end="669:32"><name pos:start="669:11" pos:end="669:30">generate_private_key</name><argument_list pos:start="669:31" pos:end="669:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="670:5" pos:end="670:27"><expr pos:start="670:5" pos:end="670:26"><call pos:start="670:5" pos:end="670:26"><name pos:start="670:5" pos:end="670:13">CU_ASSERT</name><argument_list pos:start="670:14" pos:end="670:26">(<argument pos:start="670:15" pos:end="670:25"><expr pos:start="670:15" pos:end="670:25"><name pos:start="670:15" pos:end="670:17">key</name> <operator pos:start="670:19" pos:end="670:20">!=</operator> <name pos:start="670:22" pos:end="670:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="672:5" pos:end="674:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="675:5" pos:end="675:64"><expr pos:start="675:5" pos:end="675:63"><name pos:start="675:5" pos:end="675:8">e_rc</name> <operator pos:start="675:10" pos:end="675:10">=</operator> <call pos:start="675:12" pos:end="675:63"><name pos:start="675:12" pos:end="675:28">est_client_enroll</name><argument_list pos:start="675:29" pos:end="675:63">(<argument pos:start="675:30" pos:end="675:33"><expr pos:start="675:30" pos:end="675:33"><name pos:start="675:30" pos:end="675:33">ectx</name></expr></argument>, <argument pos:start="675:36" pos:end="675:45"><expr pos:start="675:36" pos:end="675:45"><literal type="string" pos:start="675:36" pos:end="675:45">"TC4020-4"</literal></expr></argument>, <argument pos:start="675:48" pos:end="675:57"><expr pos:start="675:48" pos:end="675:57"><operator pos:start="675:48" pos:end="675:48">&amp;</operator><name pos:start="675:49" pos:end="675:57">pkcs7_len</name></expr></argument>, <argument pos:start="675:60" pos:end="675:62"><expr pos:start="675:60" pos:end="675:62"><name pos:start="675:60" pos:end="675:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="676:5" pos:end="676:36"><expr pos:start="676:5" pos:end="676:35"><call pos:start="676:5" pos:end="676:35"><name pos:start="676:5" pos:end="676:13">CU_ASSERT</name><argument_list pos:start="676:14" pos:end="676:35">(<argument pos:start="676:15" pos:end="676:34"><expr pos:start="676:15" pos:end="676:34"><name pos:start="676:15" pos:end="676:18">e_rc</name> <operator pos:start="676:20" pos:end="676:21">==</operator> <name pos:start="676:23" pos:end="676:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="678:5" pos:end="678:23"><expr pos:start="678:5" pos:end="678:22"><call pos:start="678:5" pos:end="678:22"><name pos:start="678:5" pos:end="678:20">shutdown_antinat</name><argument_list pos:start="678:21" pos:end="678:22">()</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="679:5" pos:end="679:22"><expr pos:start="679:5" pos:end="679:21"><call pos:start="679:5" pos:end="679:21"><name pos:start="679:5" pos:end="679:15">est_destroy</name><argument_list pos:start="679:16" pos:end="679:21">(<argument pos:start="679:17" pos:end="679:20"><expr pos:start="679:17" pos:end="679:20"><name pos:start="679:17" pos:end="679:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="683:1" pos:end="686:3">/*
 * Test for SOCKS 4A mode
 *
 */</comment>
<function pos:start="687:1" pos:end="750:1"><type pos:start="687:1" pos:end="687:11"><specifier pos:start="687:1" pos:end="687:6">static</specifier> <name pos:start="687:8" pos:end="687:11">void</name></type> <name pos:start="687:13" pos:end="687:24">us4020_test5</name> <parameter_list pos:start="687:26" pos:end="687:31">(<parameter pos:start="687:27" pos:end="687:30"><decl pos:start="687:27" pos:end="687:30"><type pos:start="687:27" pos:end="687:30"><name pos:start="687:27" pos:end="687:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="688:1" pos:end="750:1">{<block_content pos:start="689:5" pos:end="749:22">
    <decl_stmt pos:start="689:5" pos:end="689:19"><decl pos:start="689:5" pos:end="689:18"><type pos:start="689:5" pos:end="689:7"><name pos:start="689:5" pos:end="689:7">int</name></type> <name pos:start="689:9" pos:end="689:14">sys_rc</name> <init pos:start="689:16" pos:end="689:18">= <expr pos:start="689:18" pos:end="689:18"><literal type="number" pos:start="689:18" pos:end="689:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="690:5" pos:end="690:19"><decl pos:start="690:5" pos:end="690:18"><type pos:start="690:5" pos:end="690:13"><name pos:start="690:5" pos:end="690:13">EST_ERROR</name></type> <name pos:start="690:15" pos:end="690:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="691:5" pos:end="691:25"><decl pos:start="691:5" pos:end="691:24"><type pos:start="691:5" pos:end="691:13"><name pos:start="691:5" pos:end="691:11">EST_CTX</name> <modifier pos:start="691:13" pos:end="691:13">*</modifier></type><name pos:start="691:14" pos:end="691:17">ectx</name> <init pos:start="691:19" pos:end="691:24">= <expr pos:start="691:21" pos:end="691:24"><name pos:start="691:21" pos:end="691:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="692:5" pos:end="692:28"><decl pos:start="692:5" pos:end="692:27"><type pos:start="692:5" pos:end="692:8"><name pos:start="692:5" pos:end="692:8">char</name></type> <name pos:start="692:10" pos:end="692:27"><name pos:start="692:10" pos:end="692:12">cmd</name><index pos:start="692:13" pos:end="692:27">[<expr pos:start="692:14" pos:end="692:26"><name pos:start="692:14" pos:end="692:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="693:5" pos:end="693:18"><decl pos:start="693:5" pos:end="693:17"><type pos:start="693:5" pos:end="693:14"><name pos:start="693:5" pos:end="693:12">EVP_PKEY</name> <modifier pos:start="693:14" pos:end="693:14">*</modifier></type><name pos:start="693:15" pos:end="693:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="694:5" pos:end="694:22"><decl pos:start="694:5" pos:end="694:21"><type pos:start="694:5" pos:end="694:7"><name pos:start="694:5" pos:end="694:7">int</name></type> <name pos:start="694:9" pos:end="694:17">pkcs7_len</name> <init pos:start="694:19" pos:end="694:21">= <expr pos:start="694:21" pos:end="694:21"><literal type="number" pos:start="694:21" pos:end="694:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="696:5" pos:end="696:16"><expr pos:start="696:5" pos:end="696:15"><name pos:start="696:5" pos:end="696:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="698:5" pos:end="700:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="701:5" pos:end="701:70"><expr pos:start="701:5" pos:end="701:69"><call pos:start="701:5" pos:end="701:69"><name pos:start="701:5" pos:end="701:12">snprintf</name><argument_list pos:start="701:13" pos:end="701:69">(<argument pos:start="701:14" pos:end="701:16"><expr pos:start="701:14" pos:end="701:16"><name pos:start="701:14" pos:end="701:16">cmd</name></expr></argument>, <argument pos:start="701:19" pos:end="701:31"><expr pos:start="701:19" pos:end="701:31"><name pos:start="701:19" pos:end="701:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="701:34" pos:end="701:68"><expr pos:start="701:34" pos:end="701:68"><literal type="string" pos:start="701:34" pos:end="701:68">"antinat -xcUS4020/antinat-cfg.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="703:5" pos:end="703:25"><expr pos:start="703:5" pos:end="703:24"><name pos:start="703:5" pos:end="703:10">sys_rc</name> <operator pos:start="703:12" pos:end="703:12">=</operator> <call pos:start="703:14" pos:end="703:24"><name pos:start="703:14" pos:end="703:19">system</name><argument_list pos:start="703:20" pos:end="703:24">(<argument pos:start="703:21" pos:end="703:23"><expr pos:start="703:21" pos:end="703:23"><name pos:start="703:21" pos:end="703:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="704:5" pos:end="704:27"><expr pos:start="704:5" pos:end="704:26"><call pos:start="704:5" pos:end="704:26"><name pos:start="704:5" pos:end="704:13">CU_ASSERT</name><argument_list pos:start="704:14" pos:end="704:26">(<argument pos:start="704:15" pos:end="704:25"><expr pos:start="704:15" pos:end="704:25"><name pos:start="704:15" pos:end="704:20">sys_rc</name> <operator pos:start="704:22" pos:end="704:23">==</operator> <literal type="number" pos:start="704:25" pos:end="704:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="706:5" pos:end="708:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="709:5" pos:end="711:54"><expr pos:start="709:5" pos:end="711:53"><name pos:start="709:5" pos:end="709:8">ectx</name> <operator pos:start="709:10" pos:end="709:10">=</operator> <call pos:start="709:12" pos:end="711:53"><name pos:start="709:12" pos:end="709:26">est_client_init</name><argument_list pos:start="709:27" pos:end="711:53">(<argument pos:start="709:28" pos:end="709:34"><expr pos:start="709:28" pos:end="709:34"><name pos:start="709:28" pos:end="709:34">cacerts</name></expr></argument>, <argument pos:start="709:37" pos:end="709:47"><expr pos:start="709:37" pos:end="709:47"><name pos:start="709:37" pos:end="709:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="710:28" pos:end="710:46"><expr pos:start="710:28" pos:end="710:46"><name pos:start="710:28" pos:end="710:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="711:28" pos:end="711:52"><expr pos:start="711:28" pos:end="711:52"><name pos:start="711:28" pos:end="711:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="712:5" pos:end="712:28"><expr pos:start="712:5" pos:end="712:27"><call pos:start="712:5" pos:end="712:27"><name pos:start="712:5" pos:end="712:13">CU_ASSERT</name><argument_list pos:start="712:14" pos:end="712:27">(<argument pos:start="712:15" pos:end="712:26"><expr pos:start="712:15" pos:end="712:26"><name pos:start="712:15" pos:end="712:18">ectx</name> <operator pos:start="712:20" pos:end="712:21">!=</operator> <name pos:start="712:23" pos:end="712:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="714:5" pos:end="716:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="717:5" pos:end="721:43"><expr pos:start="717:5" pos:end="721:42"><name pos:start="717:5" pos:end="717:8">e_rc</name><operator pos:start="717:9" pos:end="717:9">=</operator> <call pos:start="717:11" pos:end="721:42"><name pos:start="717:11" pos:end="717:30">est_client_set_proxy</name><argument_list pos:start="717:31" pos:end="721:42">(<argument pos:start="717:32" pos:end="717:35"><expr pos:start="717:32" pos:end="717:35"><name pos:start="717:32" pos:end="717:35">ectx</name></expr></argument>, <argument pos:start="717:38" pos:end="717:61"><expr pos:start="717:38" pos:end="717:61"><name pos:start="717:38" pos:end="717:61">EST_CLIENT_PROXY_SOCKS4A</name></expr></argument>,
                               <argument pos:start="718:32" pos:end="718:46"><expr pos:start="718:32" pos:end="718:46"><name pos:start="718:32" pos:end="718:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="719:32" pos:end="719:52"><expr pos:start="719:32" pos:end="719:52"><name pos:start="719:32" pos:end="719:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="720:32" pos:end="720:58"><expr pos:start="720:32" pos:end="720:58"><name pos:start="720:32" pos:end="720:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="721:32" pos:end="721:35"><expr pos:start="721:32" pos:end="721:35"><name pos:start="721:32" pos:end="721:35">NULL</name></expr></argument>, <argument pos:start="721:38" pos:end="721:41"><expr pos:start="721:38" pos:end="721:41"><name pos:start="721:38" pos:end="721:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:start="722:1" pos:end="722:58">/*                                "estuser", "estpwd"); */</comment>
    <expr_stmt pos:start="723:5" pos:end="723:36"><expr pos:start="723:5" pos:end="723:35"><call pos:start="723:5" pos:end="723:35"><name pos:start="723:5" pos:end="723:13">CU_ASSERT</name><argument_list pos:start="723:14" pos:end="723:35">(<argument pos:start="723:15" pos:end="723:34"><expr pos:start="723:15" pos:end="723:34"><name pos:start="723:15" pos:end="723:18">e_rc</name> <operator pos:start="723:20" pos:end="723:21">==</operator> <name pos:start="723:23" pos:end="723:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="725:5" pos:end="727:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="728:5" pos:end="728:73"><expr pos:start="728:5" pos:end="728:72"><name pos:start="728:5" pos:end="728:8">e_rc</name> <operator pos:start="728:10" pos:end="728:10">=</operator> <call pos:start="728:12" pos:end="728:72"><name pos:start="728:12" pos:end="728:30">est_client_set_auth</name><argument_list pos:start="728:31" pos:end="728:72">(<argument pos:start="728:32" pos:end="728:35"><expr pos:start="728:32" pos:end="728:35"><name pos:start="728:32" pos:end="728:35">ectx</name></expr></argument>, <argument pos:start="728:38" pos:end="728:47"><expr pos:start="728:38" pos:end="728:47"><name pos:start="728:38" pos:end="728:47">US4020_UID</name></expr></argument>, <argument pos:start="728:50" pos:end="728:59"><expr pos:start="728:50" pos:end="728:59"><name pos:start="728:50" pos:end="728:59">US4020_PWD</name></expr></argument>, <argument pos:start="728:62" pos:end="728:65"><expr pos:start="728:62" pos:end="728:65"><name pos:start="728:62" pos:end="728:65">NULL</name></expr></argument>, <argument pos:start="728:68" pos:end="728:71"><expr pos:start="728:68" pos:end="728:71"><name pos:start="728:68" pos:end="728:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="729:5" pos:end="729:36"><expr pos:start="729:5" pos:end="729:35"><call pos:start="729:5" pos:end="729:35"><name pos:start="729:5" pos:end="729:13">CU_ASSERT</name><argument_list pos:start="729:14" pos:end="729:35">(<argument pos:start="729:15" pos:end="729:34"><expr pos:start="729:15" pos:end="729:34"><name pos:start="729:15" pos:end="729:18">e_rc</name> <operator pos:start="729:20" pos:end="729:21">==</operator> <name pos:start="729:23" pos:end="729:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="731:5" pos:end="733:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="734:5" pos:end="734:80"><expr pos:start="734:5" pos:end="734:79"><call pos:start="734:5" pos:end="734:79"><name pos:start="734:5" pos:end="734:25">est_client_set_server</name><argument_list pos:start="734:26" pos:end="734:79">(<argument pos:start="734:27" pos:end="734:30"><expr pos:start="734:27" pos:end="734:30"><name pos:start="734:27" pos:end="734:30">ectx</name></expr></argument>, <argument pos:start="734:33" pos:end="734:48"><expr pos:start="734:33" pos:end="734:48"><name pos:start="734:33" pos:end="734:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="734:51" pos:end="734:72"><expr pos:start="734:51" pos:end="734:72"><name pos:start="734:51" pos:end="734:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="734:75" pos:end="734:78"><expr pos:start="734:75" pos:end="734:78"><name pos:start="734:75" pos:end="734:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="736:5" pos:end="738:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="739:5" pos:end="739:33"><expr pos:start="739:5" pos:end="739:32"><name pos:start="739:5" pos:end="739:7">key</name> <operator pos:start="739:9" pos:end="739:9">=</operator> <call pos:start="739:11" pos:end="739:32"><name pos:start="739:11" pos:end="739:30">generate_private_key</name><argument_list pos:start="739:31" pos:end="739:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="740:5" pos:end="740:27"><expr pos:start="740:5" pos:end="740:26"><call pos:start="740:5" pos:end="740:26"><name pos:start="740:5" pos:end="740:13">CU_ASSERT</name><argument_list pos:start="740:14" pos:end="740:26">(<argument pos:start="740:15" pos:end="740:25"><expr pos:start="740:15" pos:end="740:25"><name pos:start="740:15" pos:end="740:17">key</name> <operator pos:start="740:19" pos:end="740:20">!=</operator> <name pos:start="740:22" pos:end="740:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="742:5" pos:end="744:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="745:5" pos:end="745:64"><expr pos:start="745:5" pos:end="745:63"><name pos:start="745:5" pos:end="745:8">e_rc</name> <operator pos:start="745:10" pos:end="745:10">=</operator> <call pos:start="745:12" pos:end="745:63"><name pos:start="745:12" pos:end="745:28">est_client_enroll</name><argument_list pos:start="745:29" pos:end="745:63">(<argument pos:start="745:30" pos:end="745:33"><expr pos:start="745:30" pos:end="745:33"><name pos:start="745:30" pos:end="745:33">ectx</name></expr></argument>, <argument pos:start="745:36" pos:end="745:45"><expr pos:start="745:36" pos:end="745:45"><literal type="string" pos:start="745:36" pos:end="745:45">"TC4020-5"</literal></expr></argument>, <argument pos:start="745:48" pos:end="745:57"><expr pos:start="745:48" pos:end="745:57"><operator pos:start="745:48" pos:end="745:48">&amp;</operator><name pos:start="745:49" pos:end="745:57">pkcs7_len</name></expr></argument>, <argument pos:start="745:60" pos:end="745:62"><expr pos:start="745:60" pos:end="745:62"><name pos:start="745:60" pos:end="745:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="746:5" pos:end="746:36"><expr pos:start="746:5" pos:end="746:35"><call pos:start="746:5" pos:end="746:35"><name pos:start="746:5" pos:end="746:13">CU_ASSERT</name><argument_list pos:start="746:14" pos:end="746:35">(<argument pos:start="746:15" pos:end="746:34"><expr pos:start="746:15" pos:end="746:34"><name pos:start="746:15" pos:end="746:18">e_rc</name> <operator pos:start="746:20" pos:end="746:21">==</operator> <name pos:start="746:23" pos:end="746:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="748:5" pos:end="748:23"><expr pos:start="748:5" pos:end="748:22"><call pos:start="748:5" pos:end="748:22"><name pos:start="748:5" pos:end="748:20">shutdown_antinat</name><argument_list pos:start="748:21" pos:end="748:22">()</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="749:5" pos:end="749:22"><expr pos:start="749:5" pos:end="749:21"><call pos:start="749:5" pos:end="749:21"><name pos:start="749:5" pos:end="749:15">est_destroy</name><argument_list pos:start="749:16" pos:end="749:21">(<argument pos:start="749:17" pos:end="749:20"><expr pos:start="749:17" pos:end="749:20"><name pos:start="749:17" pos:end="749:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="753:1" pos:end="756:3">/*
 * Test for SOCKS 5 mode, with no credentials
 *
 */</comment>
<function pos:start="757:1" pos:end="819:1"><type pos:start="757:1" pos:end="757:11"><specifier pos:start="757:1" pos:end="757:6">static</specifier> <name pos:start="757:8" pos:end="757:11">void</name></type> <name pos:start="757:13" pos:end="757:24">us4020_test6</name> <parameter_list pos:start="757:26" pos:end="757:31">(<parameter pos:start="757:27" pos:end="757:30"><decl pos:start="757:27" pos:end="757:30"><type pos:start="757:27" pos:end="757:30"><name pos:start="757:27" pos:end="757:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="758:1" pos:end="819:1">{<block_content pos:start="759:5" pos:end="818:22">
    <decl_stmt pos:start="759:5" pos:end="759:19"><decl pos:start="759:5" pos:end="759:18"><type pos:start="759:5" pos:end="759:7"><name pos:start="759:5" pos:end="759:7">int</name></type> <name pos:start="759:9" pos:end="759:14">sys_rc</name> <init pos:start="759:16" pos:end="759:18">= <expr pos:start="759:18" pos:end="759:18"><literal type="number" pos:start="759:18" pos:end="759:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="760:5" pos:end="760:19"><decl pos:start="760:5" pos:end="760:18"><type pos:start="760:5" pos:end="760:13"><name pos:start="760:5" pos:end="760:13">EST_ERROR</name></type> <name pos:start="760:15" pos:end="760:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="761:5" pos:end="761:25"><decl pos:start="761:5" pos:end="761:24"><type pos:start="761:5" pos:end="761:13"><name pos:start="761:5" pos:end="761:11">EST_CTX</name> <modifier pos:start="761:13" pos:end="761:13">*</modifier></type><name pos:start="761:14" pos:end="761:17">ectx</name> <init pos:start="761:19" pos:end="761:24">= <expr pos:start="761:21" pos:end="761:24"><name pos:start="761:21" pos:end="761:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="762:5" pos:end="762:28"><decl pos:start="762:5" pos:end="762:27"><type pos:start="762:5" pos:end="762:8"><name pos:start="762:5" pos:end="762:8">char</name></type> <name pos:start="762:10" pos:end="762:27"><name pos:start="762:10" pos:end="762:12">cmd</name><index pos:start="762:13" pos:end="762:27">[<expr pos:start="762:14" pos:end="762:26"><name pos:start="762:14" pos:end="762:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="763:5" pos:end="763:18"><decl pos:start="763:5" pos:end="763:17"><type pos:start="763:5" pos:end="763:14"><name pos:start="763:5" pos:end="763:12">EVP_PKEY</name> <modifier pos:start="763:14" pos:end="763:14">*</modifier></type><name pos:start="763:15" pos:end="763:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="764:5" pos:end="764:22"><decl pos:start="764:5" pos:end="764:21"><type pos:start="764:5" pos:end="764:7"><name pos:start="764:5" pos:end="764:7">int</name></type> <name pos:start="764:9" pos:end="764:17">pkcs7_len</name> <init pos:start="764:19" pos:end="764:21">= <expr pos:start="764:21" pos:end="764:21"><literal type="number" pos:start="764:21" pos:end="764:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="766:5" pos:end="766:16"><expr pos:start="766:5" pos:end="766:15"><name pos:start="766:5" pos:end="766:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="768:5" pos:end="770:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="771:5" pos:end="771:70"><expr pos:start="771:5" pos:end="771:69"><call pos:start="771:5" pos:end="771:69"><name pos:start="771:5" pos:end="771:12">snprintf</name><argument_list pos:start="771:13" pos:end="771:69">(<argument pos:start="771:14" pos:end="771:16"><expr pos:start="771:14" pos:end="771:16"><name pos:start="771:14" pos:end="771:16">cmd</name></expr></argument>, <argument pos:start="771:19" pos:end="771:31"><expr pos:start="771:19" pos:end="771:31"><name pos:start="771:19" pos:end="771:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="771:34" pos:end="771:68"><expr pos:start="771:34" pos:end="771:68"><literal type="string" pos:start="771:34" pos:end="771:68">"antinat -xcUS4020/antinat-cfg.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="773:5" pos:end="773:25"><expr pos:start="773:5" pos:end="773:24"><name pos:start="773:5" pos:end="773:10">sys_rc</name> <operator pos:start="773:12" pos:end="773:12">=</operator> <call pos:start="773:14" pos:end="773:24"><name pos:start="773:14" pos:end="773:19">system</name><argument_list pos:start="773:20" pos:end="773:24">(<argument pos:start="773:21" pos:end="773:23"><expr pos:start="773:21" pos:end="773:23"><name pos:start="773:21" pos:end="773:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="774:5" pos:end="774:27"><expr pos:start="774:5" pos:end="774:26"><call pos:start="774:5" pos:end="774:26"><name pos:start="774:5" pos:end="774:13">CU_ASSERT</name><argument_list pos:start="774:14" pos:end="774:26">(<argument pos:start="774:15" pos:end="774:25"><expr pos:start="774:15" pos:end="774:25"><name pos:start="774:15" pos:end="774:20">sys_rc</name> <operator pos:start="774:22" pos:end="774:23">==</operator> <literal type="number" pos:start="774:25" pos:end="774:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="776:5" pos:end="778:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="779:5" pos:end="781:54"><expr pos:start="779:5" pos:end="781:53"><name pos:start="779:5" pos:end="779:8">ectx</name> <operator pos:start="779:10" pos:end="779:10">=</operator> <call pos:start="779:12" pos:end="781:53"><name pos:start="779:12" pos:end="779:26">est_client_init</name><argument_list pos:start="779:27" pos:end="781:53">(<argument pos:start="779:28" pos:end="779:34"><expr pos:start="779:28" pos:end="779:34"><name pos:start="779:28" pos:end="779:34">cacerts</name></expr></argument>, <argument pos:start="779:37" pos:end="779:47"><expr pos:start="779:37" pos:end="779:47"><name pos:start="779:37" pos:end="779:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="780:28" pos:end="780:46"><expr pos:start="780:28" pos:end="780:46"><name pos:start="780:28" pos:end="780:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="781:28" pos:end="781:52"><expr pos:start="781:28" pos:end="781:52"><name pos:start="781:28" pos:end="781:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="782:5" pos:end="782:28"><expr pos:start="782:5" pos:end="782:27"><call pos:start="782:5" pos:end="782:27"><name pos:start="782:5" pos:end="782:13">CU_ASSERT</name><argument_list pos:start="782:14" pos:end="782:27">(<argument pos:start="782:15" pos:end="782:26"><expr pos:start="782:15" pos:end="782:26"><name pos:start="782:15" pos:end="782:18">ectx</name> <operator pos:start="782:20" pos:end="782:21">!=</operator> <name pos:start="782:23" pos:end="782:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="784:5" pos:end="786:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="787:5" pos:end="791:43"><expr pos:start="787:5" pos:end="791:42"><name pos:start="787:5" pos:end="787:8">e_rc</name><operator pos:start="787:9" pos:end="787:9">=</operator> <call pos:start="787:11" pos:end="791:42"><name pos:start="787:11" pos:end="787:30">est_client_set_proxy</name><argument_list pos:start="787:31" pos:end="791:42">(<argument pos:start="787:32" pos:end="787:35"><expr pos:start="787:32" pos:end="787:35"><name pos:start="787:32" pos:end="787:35">ectx</name></expr></argument>, <argument pos:start="787:38" pos:end="787:60"><expr pos:start="787:38" pos:end="787:60"><name pos:start="787:38" pos:end="787:60">EST_CLIENT_PROXY_SOCKS5</name></expr></argument>,
                               <argument pos:start="788:32" pos:end="788:46"><expr pos:start="788:32" pos:end="788:46"><name pos:start="788:32" pos:end="788:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="789:32" pos:end="789:52"><expr pos:start="789:32" pos:end="789:52"><name pos:start="789:32" pos:end="789:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="790:32" pos:end="790:58"><expr pos:start="790:32" pos:end="790:58"><name pos:start="790:32" pos:end="790:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="791:32" pos:end="791:35"><expr pos:start="791:32" pos:end="791:35"><name pos:start="791:32" pos:end="791:35">NULL</name></expr></argument>, <argument pos:start="791:38" pos:end="791:41"><expr pos:start="791:38" pos:end="791:41"><name pos:start="791:38" pos:end="791:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="792:5" pos:end="792:36"><expr pos:start="792:5" pos:end="792:35"><call pos:start="792:5" pos:end="792:35"><name pos:start="792:5" pos:end="792:13">CU_ASSERT</name><argument_list pos:start="792:14" pos:end="792:35">(<argument pos:start="792:15" pos:end="792:34"><expr pos:start="792:15" pos:end="792:34"><name pos:start="792:15" pos:end="792:18">e_rc</name> <operator pos:start="792:20" pos:end="792:21">==</operator> <name pos:start="792:23" pos:end="792:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="794:5" pos:end="796:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="797:5" pos:end="797:73"><expr pos:start="797:5" pos:end="797:72"><name pos:start="797:5" pos:end="797:8">e_rc</name> <operator pos:start="797:10" pos:end="797:10">=</operator> <call pos:start="797:12" pos:end="797:72"><name pos:start="797:12" pos:end="797:30">est_client_set_auth</name><argument_list pos:start="797:31" pos:end="797:72">(<argument pos:start="797:32" pos:end="797:35"><expr pos:start="797:32" pos:end="797:35"><name pos:start="797:32" pos:end="797:35">ectx</name></expr></argument>, <argument pos:start="797:38" pos:end="797:47"><expr pos:start="797:38" pos:end="797:47"><name pos:start="797:38" pos:end="797:47">US4020_UID</name></expr></argument>, <argument pos:start="797:50" pos:end="797:59"><expr pos:start="797:50" pos:end="797:59"><name pos:start="797:50" pos:end="797:59">US4020_PWD</name></expr></argument>, <argument pos:start="797:62" pos:end="797:65"><expr pos:start="797:62" pos:end="797:65"><name pos:start="797:62" pos:end="797:65">NULL</name></expr></argument>, <argument pos:start="797:68" pos:end="797:71"><expr pos:start="797:68" pos:end="797:71"><name pos:start="797:68" pos:end="797:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="798:5" pos:end="798:36"><expr pos:start="798:5" pos:end="798:35"><call pos:start="798:5" pos:end="798:35"><name pos:start="798:5" pos:end="798:13">CU_ASSERT</name><argument_list pos:start="798:14" pos:end="798:35">(<argument pos:start="798:15" pos:end="798:34"><expr pos:start="798:15" pos:end="798:34"><name pos:start="798:15" pos:end="798:18">e_rc</name> <operator pos:start="798:20" pos:end="798:21">==</operator> <name pos:start="798:23" pos:end="798:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="800:5" pos:end="802:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="803:5" pos:end="803:80"><expr pos:start="803:5" pos:end="803:79"><call pos:start="803:5" pos:end="803:79"><name pos:start="803:5" pos:end="803:25">est_client_set_server</name><argument_list pos:start="803:26" pos:end="803:79">(<argument pos:start="803:27" pos:end="803:30"><expr pos:start="803:27" pos:end="803:30"><name pos:start="803:27" pos:end="803:30">ectx</name></expr></argument>, <argument pos:start="803:33" pos:end="803:48"><expr pos:start="803:33" pos:end="803:48"><name pos:start="803:33" pos:end="803:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="803:51" pos:end="803:72"><expr pos:start="803:51" pos:end="803:72"><name pos:start="803:51" pos:end="803:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="803:75" pos:end="803:78"><expr pos:start="803:75" pos:end="803:78"><name pos:start="803:75" pos:end="803:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="805:5" pos:end="807:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="808:5" pos:end="808:33"><expr pos:start="808:5" pos:end="808:32"><name pos:start="808:5" pos:end="808:7">key</name> <operator pos:start="808:9" pos:end="808:9">=</operator> <call pos:start="808:11" pos:end="808:32"><name pos:start="808:11" pos:end="808:30">generate_private_key</name><argument_list pos:start="808:31" pos:end="808:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="809:5" pos:end="809:27"><expr pos:start="809:5" pos:end="809:26"><call pos:start="809:5" pos:end="809:26"><name pos:start="809:5" pos:end="809:13">CU_ASSERT</name><argument_list pos:start="809:14" pos:end="809:26">(<argument pos:start="809:15" pos:end="809:25"><expr pos:start="809:15" pos:end="809:25"><name pos:start="809:15" pos:end="809:17">key</name> <operator pos:start="809:19" pos:end="809:20">!=</operator> <name pos:start="809:22" pos:end="809:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="811:5" pos:end="813:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="814:5" pos:end="814:64"><expr pos:start="814:5" pos:end="814:63"><name pos:start="814:5" pos:end="814:8">e_rc</name> <operator pos:start="814:10" pos:end="814:10">=</operator> <call pos:start="814:12" pos:end="814:63"><name pos:start="814:12" pos:end="814:28">est_client_enroll</name><argument_list pos:start="814:29" pos:end="814:63">(<argument pos:start="814:30" pos:end="814:33"><expr pos:start="814:30" pos:end="814:33"><name pos:start="814:30" pos:end="814:33">ectx</name></expr></argument>, <argument pos:start="814:36" pos:end="814:45"><expr pos:start="814:36" pos:end="814:45"><literal type="string" pos:start="814:36" pos:end="814:45">"TC4020-6"</literal></expr></argument>, <argument pos:start="814:48" pos:end="814:57"><expr pos:start="814:48" pos:end="814:57"><operator pos:start="814:48" pos:end="814:48">&amp;</operator><name pos:start="814:49" pos:end="814:57">pkcs7_len</name></expr></argument>, <argument pos:start="814:60" pos:end="814:62"><expr pos:start="814:60" pos:end="814:62"><name pos:start="814:60" pos:end="814:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="815:5" pos:end="815:36"><expr pos:start="815:5" pos:end="815:35"><call pos:start="815:5" pos:end="815:35"><name pos:start="815:5" pos:end="815:13">CU_ASSERT</name><argument_list pos:start="815:14" pos:end="815:35">(<argument pos:start="815:15" pos:end="815:34"><expr pos:start="815:15" pos:end="815:34"><name pos:start="815:15" pos:end="815:18">e_rc</name> <operator pos:start="815:20" pos:end="815:21">==</operator> <name pos:start="815:23" pos:end="815:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="817:5" pos:end="817:23"><expr pos:start="817:5" pos:end="817:22"><call pos:start="817:5" pos:end="817:22"><name pos:start="817:5" pos:end="817:20">shutdown_antinat</name><argument_list pos:start="817:21" pos:end="817:22">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="818:5" pos:end="818:22"><expr pos:start="818:5" pos:end="818:21"><call pos:start="818:5" pos:end="818:21"><name pos:start="818:5" pos:end="818:15">est_destroy</name><argument_list pos:start="818:16" pos:end="818:21">(<argument pos:start="818:17" pos:end="818:20"><expr pos:start="818:17" pos:end="818:20"><name pos:start="818:17" pos:end="818:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="822:1" pos:end="825:3">/*
 * Test for SOCKS 5 mode, with good credentials
 *
 */</comment>
<function pos:start="826:1" pos:end="888:1"><type pos:start="826:1" pos:end="826:11"><specifier pos:start="826:1" pos:end="826:6">static</specifier> <name pos:start="826:8" pos:end="826:11">void</name></type> <name pos:start="826:13" pos:end="826:24">us4020_test7</name> <parameter_list pos:start="826:26" pos:end="826:31">(<parameter pos:start="826:27" pos:end="826:30"><decl pos:start="826:27" pos:end="826:30"><type pos:start="826:27" pos:end="826:30"><name pos:start="826:27" pos:end="826:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="827:1" pos:end="888:1">{<block_content pos:start="828:5" pos:end="887:22">
    <decl_stmt pos:start="828:5" pos:end="828:19"><decl pos:start="828:5" pos:end="828:18"><type pos:start="828:5" pos:end="828:7"><name pos:start="828:5" pos:end="828:7">int</name></type> <name pos:start="828:9" pos:end="828:14">sys_rc</name> <init pos:start="828:16" pos:end="828:18">= <expr pos:start="828:18" pos:end="828:18"><literal type="number" pos:start="828:18" pos:end="828:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="829:5" pos:end="829:19"><decl pos:start="829:5" pos:end="829:18"><type pos:start="829:5" pos:end="829:13"><name pos:start="829:5" pos:end="829:13">EST_ERROR</name></type> <name pos:start="829:15" pos:end="829:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="830:5" pos:end="830:25"><decl pos:start="830:5" pos:end="830:24"><type pos:start="830:5" pos:end="830:13"><name pos:start="830:5" pos:end="830:11">EST_CTX</name> <modifier pos:start="830:13" pos:end="830:13">*</modifier></type><name pos:start="830:14" pos:end="830:17">ectx</name> <init pos:start="830:19" pos:end="830:24">= <expr pos:start="830:21" pos:end="830:24"><name pos:start="830:21" pos:end="830:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="831:5" pos:end="831:28"><decl pos:start="831:5" pos:end="831:27"><type pos:start="831:5" pos:end="831:8"><name pos:start="831:5" pos:end="831:8">char</name></type> <name pos:start="831:10" pos:end="831:27"><name pos:start="831:10" pos:end="831:12">cmd</name><index pos:start="831:13" pos:end="831:27">[<expr pos:start="831:14" pos:end="831:26"><name pos:start="831:14" pos:end="831:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="832:5" pos:end="832:18"><decl pos:start="832:5" pos:end="832:17"><type pos:start="832:5" pos:end="832:14"><name pos:start="832:5" pos:end="832:12">EVP_PKEY</name> <modifier pos:start="832:14" pos:end="832:14">*</modifier></type><name pos:start="832:15" pos:end="832:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="833:5" pos:end="833:22"><decl pos:start="833:5" pos:end="833:21"><type pos:start="833:5" pos:end="833:7"><name pos:start="833:5" pos:end="833:7">int</name></type> <name pos:start="833:9" pos:end="833:17">pkcs7_len</name> <init pos:start="833:19" pos:end="833:21">= <expr pos:start="833:21" pos:end="833:21"><literal type="number" pos:start="833:21" pos:end="833:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="835:5" pos:end="835:16"><expr pos:start="835:5" pos:end="835:15"><name pos:start="835:5" pos:end="835:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="837:5" pos:end="839:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="840:5" pos:end="840:79"><expr pos:start="840:5" pos:end="840:78"><call pos:start="840:5" pos:end="840:78"><name pos:start="840:5" pos:end="840:12">snprintf</name><argument_list pos:start="840:13" pos:end="840:78">(<argument pos:start="840:14" pos:end="840:16"><expr pos:start="840:14" pos:end="840:16"><name pos:start="840:14" pos:end="840:16">cmd</name></expr></argument>, <argument pos:start="840:19" pos:end="840:31"><expr pos:start="840:19" pos:end="840:31"><name pos:start="840:19" pos:end="840:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="840:34" pos:end="840:77"><expr pos:start="840:34" pos:end="840:77"><literal type="string" pos:start="840:34" pos:end="840:77">"antinat -xcUS4020/antinat-cfg-goodcred.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="842:5" pos:end="842:25"><expr pos:start="842:5" pos:end="842:24"><name pos:start="842:5" pos:end="842:10">sys_rc</name> <operator pos:start="842:12" pos:end="842:12">=</operator> <call pos:start="842:14" pos:end="842:24"><name pos:start="842:14" pos:end="842:19">system</name><argument_list pos:start="842:20" pos:end="842:24">(<argument pos:start="842:21" pos:end="842:23"><expr pos:start="842:21" pos:end="842:23"><name pos:start="842:21" pos:end="842:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="843:5" pos:end="843:27"><expr pos:start="843:5" pos:end="843:26"><call pos:start="843:5" pos:end="843:26"><name pos:start="843:5" pos:end="843:13">CU_ASSERT</name><argument_list pos:start="843:14" pos:end="843:26">(<argument pos:start="843:15" pos:end="843:25"><expr pos:start="843:15" pos:end="843:25"><name pos:start="843:15" pos:end="843:20">sys_rc</name> <operator pos:start="843:22" pos:end="843:23">==</operator> <literal type="number" pos:start="843:25" pos:end="843:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="845:5" pos:end="847:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="848:5" pos:end="850:54"><expr pos:start="848:5" pos:end="850:53"><name pos:start="848:5" pos:end="848:8">ectx</name> <operator pos:start="848:10" pos:end="848:10">=</operator> <call pos:start="848:12" pos:end="850:53"><name pos:start="848:12" pos:end="848:26">est_client_init</name><argument_list pos:start="848:27" pos:end="850:53">(<argument pos:start="848:28" pos:end="848:34"><expr pos:start="848:28" pos:end="848:34"><name pos:start="848:28" pos:end="848:34">cacerts</name></expr></argument>, <argument pos:start="848:37" pos:end="848:47"><expr pos:start="848:37" pos:end="848:47"><name pos:start="848:37" pos:end="848:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="849:28" pos:end="849:46"><expr pos:start="849:28" pos:end="849:46"><name pos:start="849:28" pos:end="849:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="850:28" pos:end="850:52"><expr pos:start="850:28" pos:end="850:52"><name pos:start="850:28" pos:end="850:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="851:5" pos:end="851:28"><expr pos:start="851:5" pos:end="851:27"><call pos:start="851:5" pos:end="851:27"><name pos:start="851:5" pos:end="851:13">CU_ASSERT</name><argument_list pos:start="851:14" pos:end="851:27">(<argument pos:start="851:15" pos:end="851:26"><expr pos:start="851:15" pos:end="851:26"><name pos:start="851:15" pos:end="851:18">ectx</name> <operator pos:start="851:20" pos:end="851:21">!=</operator> <name pos:start="851:23" pos:end="851:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="853:5" pos:end="855:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="856:5" pos:end="860:52"><expr pos:start="856:5" pos:end="860:51"><name pos:start="856:5" pos:end="856:8">e_rc</name><operator pos:start="856:9" pos:end="856:9">=</operator> <call pos:start="856:11" pos:end="860:51"><name pos:start="856:11" pos:end="856:30">est_client_set_proxy</name><argument_list pos:start="856:31" pos:end="860:51">(<argument pos:start="856:32" pos:end="856:35"><expr pos:start="856:32" pos:end="856:35"><name pos:start="856:32" pos:end="856:35">ectx</name></expr></argument>, <argument pos:start="856:38" pos:end="856:60"><expr pos:start="856:38" pos:end="856:60"><name pos:start="856:38" pos:end="856:60">EST_CLIENT_PROXY_SOCKS5</name></expr></argument>,
                               <argument pos:start="857:32" pos:end="857:46"><expr pos:start="857:32" pos:end="857:46"><name pos:start="857:32" pos:end="857:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="858:32" pos:end="858:52"><expr pos:start="858:32" pos:end="858:52"><name pos:start="858:32" pos:end="858:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="859:32" pos:end="859:58"><expr pos:start="859:32" pos:end="859:58"><name pos:start="859:32" pos:end="859:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="860:32" pos:end="860:40"><expr pos:start="860:32" pos:end="860:40"><literal type="string" pos:start="860:32" pos:end="860:40">"estuser"</literal></expr></argument>, <argument pos:start="860:43" pos:end="860:50"><expr pos:start="860:43" pos:end="860:50"><literal type="string" pos:start="860:43" pos:end="860:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="861:5" pos:end="861:36"><expr pos:start="861:5" pos:end="861:35"><call pos:start="861:5" pos:end="861:35"><name pos:start="861:5" pos:end="861:13">CU_ASSERT</name><argument_list pos:start="861:14" pos:end="861:35">(<argument pos:start="861:15" pos:end="861:34"><expr pos:start="861:15" pos:end="861:34"><name pos:start="861:15" pos:end="861:18">e_rc</name> <operator pos:start="861:20" pos:end="861:21">==</operator> <name pos:start="861:23" pos:end="861:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="863:5" pos:end="865:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="866:5" pos:end="866:73"><expr pos:start="866:5" pos:end="866:72"><name pos:start="866:5" pos:end="866:8">e_rc</name> <operator pos:start="866:10" pos:end="866:10">=</operator> <call pos:start="866:12" pos:end="866:72"><name pos:start="866:12" pos:end="866:30">est_client_set_auth</name><argument_list pos:start="866:31" pos:end="866:72">(<argument pos:start="866:32" pos:end="866:35"><expr pos:start="866:32" pos:end="866:35"><name pos:start="866:32" pos:end="866:35">ectx</name></expr></argument>, <argument pos:start="866:38" pos:end="866:47"><expr pos:start="866:38" pos:end="866:47"><name pos:start="866:38" pos:end="866:47">US4020_UID</name></expr></argument>, <argument pos:start="866:50" pos:end="866:59"><expr pos:start="866:50" pos:end="866:59"><name pos:start="866:50" pos:end="866:59">US4020_PWD</name></expr></argument>, <argument pos:start="866:62" pos:end="866:65"><expr pos:start="866:62" pos:end="866:65"><name pos:start="866:62" pos:end="866:65">NULL</name></expr></argument>, <argument pos:start="866:68" pos:end="866:71"><expr pos:start="866:68" pos:end="866:71"><name pos:start="866:68" pos:end="866:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="867:5" pos:end="867:36"><expr pos:start="867:5" pos:end="867:35"><call pos:start="867:5" pos:end="867:35"><name pos:start="867:5" pos:end="867:13">CU_ASSERT</name><argument_list pos:start="867:14" pos:end="867:35">(<argument pos:start="867:15" pos:end="867:34"><expr pos:start="867:15" pos:end="867:34"><name pos:start="867:15" pos:end="867:18">e_rc</name> <operator pos:start="867:20" pos:end="867:21">==</operator> <name pos:start="867:23" pos:end="867:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="869:5" pos:end="871:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="872:5" pos:end="872:80"><expr pos:start="872:5" pos:end="872:79"><call pos:start="872:5" pos:end="872:79"><name pos:start="872:5" pos:end="872:25">est_client_set_server</name><argument_list pos:start="872:26" pos:end="872:79">(<argument pos:start="872:27" pos:end="872:30"><expr pos:start="872:27" pos:end="872:30"><name pos:start="872:27" pos:end="872:30">ectx</name></expr></argument>, <argument pos:start="872:33" pos:end="872:48"><expr pos:start="872:33" pos:end="872:48"><name pos:start="872:33" pos:end="872:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="872:51" pos:end="872:72"><expr pos:start="872:51" pos:end="872:72"><name pos:start="872:51" pos:end="872:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="872:75" pos:end="872:78"><expr pos:start="872:75" pos:end="872:78"><name pos:start="872:75" pos:end="872:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="874:5" pos:end="876:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="877:5" pos:end="877:33"><expr pos:start="877:5" pos:end="877:32"><name pos:start="877:5" pos:end="877:7">key</name> <operator pos:start="877:9" pos:end="877:9">=</operator> <call pos:start="877:11" pos:end="877:32"><name pos:start="877:11" pos:end="877:30">generate_private_key</name><argument_list pos:start="877:31" pos:end="877:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="878:5" pos:end="878:27"><expr pos:start="878:5" pos:end="878:26"><call pos:start="878:5" pos:end="878:26"><name pos:start="878:5" pos:end="878:13">CU_ASSERT</name><argument_list pos:start="878:14" pos:end="878:26">(<argument pos:start="878:15" pos:end="878:25"><expr pos:start="878:15" pos:end="878:25"><name pos:start="878:15" pos:end="878:17">key</name> <operator pos:start="878:19" pos:end="878:20">!=</operator> <name pos:start="878:22" pos:end="878:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="880:5" pos:end="882:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="883:5" pos:end="883:64"><expr pos:start="883:5" pos:end="883:63"><name pos:start="883:5" pos:end="883:8">e_rc</name> <operator pos:start="883:10" pos:end="883:10">=</operator> <call pos:start="883:12" pos:end="883:63"><name pos:start="883:12" pos:end="883:28">est_client_enroll</name><argument_list pos:start="883:29" pos:end="883:63">(<argument pos:start="883:30" pos:end="883:33"><expr pos:start="883:30" pos:end="883:33"><name pos:start="883:30" pos:end="883:33">ectx</name></expr></argument>, <argument pos:start="883:36" pos:end="883:45"><expr pos:start="883:36" pos:end="883:45"><literal type="string" pos:start="883:36" pos:end="883:45">"TC4020-6"</literal></expr></argument>, <argument pos:start="883:48" pos:end="883:57"><expr pos:start="883:48" pos:end="883:57"><operator pos:start="883:48" pos:end="883:48">&amp;</operator><name pos:start="883:49" pos:end="883:57">pkcs7_len</name></expr></argument>, <argument pos:start="883:60" pos:end="883:62"><expr pos:start="883:60" pos:end="883:62"><name pos:start="883:60" pos:end="883:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="884:5" pos:end="884:36"><expr pos:start="884:5" pos:end="884:35"><call pos:start="884:5" pos:end="884:35"><name pos:start="884:5" pos:end="884:13">CU_ASSERT</name><argument_list pos:start="884:14" pos:end="884:35">(<argument pos:start="884:15" pos:end="884:34"><expr pos:start="884:15" pos:end="884:34"><name pos:start="884:15" pos:end="884:18">e_rc</name> <operator pos:start="884:20" pos:end="884:21">==</operator> <name pos:start="884:23" pos:end="884:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="886:5" pos:end="886:23"><expr pos:start="886:5" pos:end="886:22"><call pos:start="886:5" pos:end="886:22"><name pos:start="886:5" pos:end="886:20">shutdown_antinat</name><argument_list pos:start="886:21" pos:end="886:22">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="887:5" pos:end="887:22"><expr pos:start="887:5" pos:end="887:21"><call pos:start="887:5" pos:end="887:21"><name pos:start="887:5" pos:end="887:15">est_destroy</name><argument_list pos:start="887:16" pos:end="887:21">(<argument pos:start="887:17" pos:end="887:20"><expr pos:start="887:17" pos:end="887:20"><name pos:start="887:17" pos:end="887:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="891:1" pos:end="894:3">/*
 * Test for SOCKS 5 mode, with good credentials, but forgotten
 *
 */</comment>
<function pos:start="895:1" pos:end="957:1"><type pos:start="895:1" pos:end="895:11"><specifier pos:start="895:1" pos:end="895:6">static</specifier> <name pos:start="895:8" pos:end="895:11">void</name></type> <name pos:start="895:13" pos:end="895:24">us4020_test8</name> <parameter_list pos:start="895:26" pos:end="895:31">(<parameter pos:start="895:27" pos:end="895:30"><decl pos:start="895:27" pos:end="895:30"><type pos:start="895:27" pos:end="895:30"><name pos:start="895:27" pos:end="895:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="896:1" pos:end="957:1">{<block_content pos:start="897:5" pos:end="956:22">
    <decl_stmt pos:start="897:5" pos:end="897:19"><decl pos:start="897:5" pos:end="897:18"><type pos:start="897:5" pos:end="897:7"><name pos:start="897:5" pos:end="897:7">int</name></type> <name pos:start="897:9" pos:end="897:14">sys_rc</name> <init pos:start="897:16" pos:end="897:18">= <expr pos:start="897:18" pos:end="897:18"><literal type="number" pos:start="897:18" pos:end="897:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="898:5" pos:end="898:19"><decl pos:start="898:5" pos:end="898:18"><type pos:start="898:5" pos:end="898:13"><name pos:start="898:5" pos:end="898:13">EST_ERROR</name></type> <name pos:start="898:15" pos:end="898:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="899:5" pos:end="899:25"><decl pos:start="899:5" pos:end="899:24"><type pos:start="899:5" pos:end="899:13"><name pos:start="899:5" pos:end="899:11">EST_CTX</name> <modifier pos:start="899:13" pos:end="899:13">*</modifier></type><name pos:start="899:14" pos:end="899:17">ectx</name> <init pos:start="899:19" pos:end="899:24">= <expr pos:start="899:21" pos:end="899:24"><name pos:start="899:21" pos:end="899:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="900:5" pos:end="900:28"><decl pos:start="900:5" pos:end="900:27"><type pos:start="900:5" pos:end="900:8"><name pos:start="900:5" pos:end="900:8">char</name></type> <name pos:start="900:10" pos:end="900:27"><name pos:start="900:10" pos:end="900:12">cmd</name><index pos:start="900:13" pos:end="900:27">[<expr pos:start="900:14" pos:end="900:26"><name pos:start="900:14" pos:end="900:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="901:5" pos:end="901:18"><decl pos:start="901:5" pos:end="901:17"><type pos:start="901:5" pos:end="901:14"><name pos:start="901:5" pos:end="901:12">EVP_PKEY</name> <modifier pos:start="901:14" pos:end="901:14">*</modifier></type><name pos:start="901:15" pos:end="901:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="902:5" pos:end="902:22"><decl pos:start="902:5" pos:end="902:21"><type pos:start="902:5" pos:end="902:7"><name pos:start="902:5" pos:end="902:7">int</name></type> <name pos:start="902:9" pos:end="902:17">pkcs7_len</name> <init pos:start="902:19" pos:end="902:21">= <expr pos:start="902:21" pos:end="902:21"><literal type="number" pos:start="902:21" pos:end="902:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="904:5" pos:end="904:16"><expr pos:start="904:5" pos:end="904:15"><name pos:start="904:5" pos:end="904:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="906:5" pos:end="908:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="909:5" pos:end="909:79"><expr pos:start="909:5" pos:end="909:78"><call pos:start="909:5" pos:end="909:78"><name pos:start="909:5" pos:end="909:12">snprintf</name><argument_list pos:start="909:13" pos:end="909:78">(<argument pos:start="909:14" pos:end="909:16"><expr pos:start="909:14" pos:end="909:16"><name pos:start="909:14" pos:end="909:16">cmd</name></expr></argument>, <argument pos:start="909:19" pos:end="909:31"><expr pos:start="909:19" pos:end="909:31"><name pos:start="909:19" pos:end="909:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="909:34" pos:end="909:77"><expr pos:start="909:34" pos:end="909:77"><literal type="string" pos:start="909:34" pos:end="909:77">"antinat -xcUS4020/antinat-cfg-goodcred.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="911:5" pos:end="911:25"><expr pos:start="911:5" pos:end="911:24"><name pos:start="911:5" pos:end="911:10">sys_rc</name> <operator pos:start="911:12" pos:end="911:12">=</operator> <call pos:start="911:14" pos:end="911:24"><name pos:start="911:14" pos:end="911:19">system</name><argument_list pos:start="911:20" pos:end="911:24">(<argument pos:start="911:21" pos:end="911:23"><expr pos:start="911:21" pos:end="911:23"><name pos:start="911:21" pos:end="911:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="912:5" pos:end="912:27"><expr pos:start="912:5" pos:end="912:26"><call pos:start="912:5" pos:end="912:26"><name pos:start="912:5" pos:end="912:13">CU_ASSERT</name><argument_list pos:start="912:14" pos:end="912:26">(<argument pos:start="912:15" pos:end="912:25"><expr pos:start="912:15" pos:end="912:25"><name pos:start="912:15" pos:end="912:20">sys_rc</name> <operator pos:start="912:22" pos:end="912:23">==</operator> <literal type="number" pos:start="912:25" pos:end="912:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="914:5" pos:end="916:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="917:5" pos:end="919:54"><expr pos:start="917:5" pos:end="919:53"><name pos:start="917:5" pos:end="917:8">ectx</name> <operator pos:start="917:10" pos:end="917:10">=</operator> <call pos:start="917:12" pos:end="919:53"><name pos:start="917:12" pos:end="917:26">est_client_init</name><argument_list pos:start="917:27" pos:end="919:53">(<argument pos:start="917:28" pos:end="917:34"><expr pos:start="917:28" pos:end="917:34"><name pos:start="917:28" pos:end="917:34">cacerts</name></expr></argument>, <argument pos:start="917:37" pos:end="917:47"><expr pos:start="917:37" pos:end="917:47"><name pos:start="917:37" pos:end="917:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="918:28" pos:end="918:46"><expr pos:start="918:28" pos:end="918:46"><name pos:start="918:28" pos:end="918:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="919:28" pos:end="919:52"><expr pos:start="919:28" pos:end="919:52"><name pos:start="919:28" pos:end="919:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="920:5" pos:end="920:28"><expr pos:start="920:5" pos:end="920:27"><call pos:start="920:5" pos:end="920:27"><name pos:start="920:5" pos:end="920:13">CU_ASSERT</name><argument_list pos:start="920:14" pos:end="920:27">(<argument pos:start="920:15" pos:end="920:26"><expr pos:start="920:15" pos:end="920:26"><name pos:start="920:15" pos:end="920:18">ectx</name> <operator pos:start="920:20" pos:end="920:21">!=</operator> <name pos:start="920:23" pos:end="920:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="922:5" pos:end="924:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="925:5" pos:end="929:43"><expr pos:start="925:5" pos:end="929:42"><name pos:start="925:5" pos:end="925:8">e_rc</name><operator pos:start="925:9" pos:end="925:9">=</operator> <call pos:start="925:11" pos:end="929:42"><name pos:start="925:11" pos:end="925:30">est_client_set_proxy</name><argument_list pos:start="925:31" pos:end="929:42">(<argument pos:start="925:32" pos:end="925:35"><expr pos:start="925:32" pos:end="925:35"><name pos:start="925:32" pos:end="925:35">ectx</name></expr></argument>, <argument pos:start="925:38" pos:end="925:60"><expr pos:start="925:38" pos:end="925:60"><name pos:start="925:38" pos:end="925:60">EST_CLIENT_PROXY_SOCKS5</name></expr></argument>,
                               <argument pos:start="926:32" pos:end="926:46"><expr pos:start="926:32" pos:end="926:46"><name pos:start="926:32" pos:end="926:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="927:32" pos:end="927:52"><expr pos:start="927:32" pos:end="927:52"><name pos:start="927:32" pos:end="927:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="928:32" pos:end="928:58"><expr pos:start="928:32" pos:end="928:58"><name pos:start="928:32" pos:end="928:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="929:32" pos:end="929:35"><expr pos:start="929:32" pos:end="929:35"><name pos:start="929:32" pos:end="929:35">NULL</name></expr></argument>, <argument pos:start="929:38" pos:end="929:41"><expr pos:start="929:38" pos:end="929:41"><name pos:start="929:38" pos:end="929:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="930:5" pos:end="930:36"><expr pos:start="930:5" pos:end="930:35"><call pos:start="930:5" pos:end="930:35"><name pos:start="930:5" pos:end="930:13">CU_ASSERT</name><argument_list pos:start="930:14" pos:end="930:35">(<argument pos:start="930:15" pos:end="930:34"><expr pos:start="930:15" pos:end="930:34"><name pos:start="930:15" pos:end="930:18">e_rc</name> <operator pos:start="930:20" pos:end="930:21">==</operator> <name pos:start="930:23" pos:end="930:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="932:5" pos:end="934:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="935:5" pos:end="935:73"><expr pos:start="935:5" pos:end="935:72"><name pos:start="935:5" pos:end="935:8">e_rc</name> <operator pos:start="935:10" pos:end="935:10">=</operator> <call pos:start="935:12" pos:end="935:72"><name pos:start="935:12" pos:end="935:30">est_client_set_auth</name><argument_list pos:start="935:31" pos:end="935:72">(<argument pos:start="935:32" pos:end="935:35"><expr pos:start="935:32" pos:end="935:35"><name pos:start="935:32" pos:end="935:35">ectx</name></expr></argument>, <argument pos:start="935:38" pos:end="935:47"><expr pos:start="935:38" pos:end="935:47"><name pos:start="935:38" pos:end="935:47">US4020_UID</name></expr></argument>, <argument pos:start="935:50" pos:end="935:59"><expr pos:start="935:50" pos:end="935:59"><name pos:start="935:50" pos:end="935:59">US4020_PWD</name></expr></argument>, <argument pos:start="935:62" pos:end="935:65"><expr pos:start="935:62" pos:end="935:65"><name pos:start="935:62" pos:end="935:65">NULL</name></expr></argument>, <argument pos:start="935:68" pos:end="935:71"><expr pos:start="935:68" pos:end="935:71"><name pos:start="935:68" pos:end="935:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="936:5" pos:end="936:36"><expr pos:start="936:5" pos:end="936:35"><call pos:start="936:5" pos:end="936:35"><name pos:start="936:5" pos:end="936:13">CU_ASSERT</name><argument_list pos:start="936:14" pos:end="936:35">(<argument pos:start="936:15" pos:end="936:34"><expr pos:start="936:15" pos:end="936:34"><name pos:start="936:15" pos:end="936:18">e_rc</name> <operator pos:start="936:20" pos:end="936:21">==</operator> <name pos:start="936:23" pos:end="936:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="938:5" pos:end="940:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="941:5" pos:end="941:80"><expr pos:start="941:5" pos:end="941:79"><call pos:start="941:5" pos:end="941:79"><name pos:start="941:5" pos:end="941:25">est_client_set_server</name><argument_list pos:start="941:26" pos:end="941:79">(<argument pos:start="941:27" pos:end="941:30"><expr pos:start="941:27" pos:end="941:30"><name pos:start="941:27" pos:end="941:30">ectx</name></expr></argument>, <argument pos:start="941:33" pos:end="941:48"><expr pos:start="941:33" pos:end="941:48"><name pos:start="941:33" pos:end="941:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="941:51" pos:end="941:72"><expr pos:start="941:51" pos:end="941:72"><name pos:start="941:51" pos:end="941:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="941:75" pos:end="941:78"><expr pos:start="941:75" pos:end="941:78"><name pos:start="941:75" pos:end="941:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="943:5" pos:end="945:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="946:5" pos:end="946:33"><expr pos:start="946:5" pos:end="946:32"><name pos:start="946:5" pos:end="946:7">key</name> <operator pos:start="946:9" pos:end="946:9">=</operator> <call pos:start="946:11" pos:end="946:32"><name pos:start="946:11" pos:end="946:30">generate_private_key</name><argument_list pos:start="946:31" pos:end="946:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="947:5" pos:end="947:27"><expr pos:start="947:5" pos:end="947:26"><call pos:start="947:5" pos:end="947:26"><name pos:start="947:5" pos:end="947:13">CU_ASSERT</name><argument_list pos:start="947:14" pos:end="947:26">(<argument pos:start="947:15" pos:end="947:25"><expr pos:start="947:15" pos:end="947:25"><name pos:start="947:15" pos:end="947:17">key</name> <operator pos:start="947:19" pos:end="947:20">!=</operator> <name pos:start="947:22" pos:end="947:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="949:5" pos:end="951:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="952:5" pos:end="952:64"><expr pos:start="952:5" pos:end="952:63"><name pos:start="952:5" pos:end="952:8">e_rc</name> <operator pos:start="952:10" pos:end="952:10">=</operator> <call pos:start="952:12" pos:end="952:63"><name pos:start="952:12" pos:end="952:28">est_client_enroll</name><argument_list pos:start="952:29" pos:end="952:63">(<argument pos:start="952:30" pos:end="952:33"><expr pos:start="952:30" pos:end="952:33"><name pos:start="952:30" pos:end="952:33">ectx</name></expr></argument>, <argument pos:start="952:36" pos:end="952:45"><expr pos:start="952:36" pos:end="952:45"><literal type="string" pos:start="952:36" pos:end="952:45">"TC4020-6"</literal></expr></argument>, <argument pos:start="952:48" pos:end="952:57"><expr pos:start="952:48" pos:end="952:57"><operator pos:start="952:48" pos:end="952:48">&amp;</operator><name pos:start="952:49" pos:end="952:57">pkcs7_len</name></expr></argument>, <argument pos:start="952:60" pos:end="952:62"><expr pos:start="952:60" pos:end="952:62"><name pos:start="952:60" pos:end="952:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="953:5" pos:end="953:42"><expr pos:start="953:5" pos:end="953:41"><call pos:start="953:5" pos:end="953:41"><name pos:start="953:5" pos:end="953:13">CU_ASSERT</name><argument_list pos:start="953:14" pos:end="953:41">(<argument pos:start="953:15" pos:end="953:40"><expr pos:start="953:15" pos:end="953:40"><name pos:start="953:15" pos:end="953:18">e_rc</name> <operator pos:start="953:20" pos:end="953:21">==</operator> <name pos:start="953:23" pos:end="953:40">EST_ERR_IP_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="955:5" pos:end="955:23"><expr pos:start="955:5" pos:end="955:22"><call pos:start="955:5" pos:end="955:22"><name pos:start="955:5" pos:end="955:20">shutdown_antinat</name><argument_list pos:start="955:21" pos:end="955:22">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="956:5" pos:end="956:22"><expr pos:start="956:5" pos:end="956:21"><call pos:start="956:5" pos:end="956:21"><name pos:start="956:5" pos:end="956:15">est_destroy</name><argument_list pos:start="956:16" pos:end="956:21">(<argument pos:start="956:17" pos:end="956:20"><expr pos:start="956:17" pos:end="956:20"><name pos:start="956:17" pos:end="956:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="960:1" pos:end="963:3">/*
 * Test for SOCKS 5 mode, with bad credentials
 *
 */</comment>
<function pos:start="964:1" pos:end="1101:0"><type pos:start="964:1" pos:end="964:11"><specifier pos:start="964:1" pos:end="964:6">static</specifier> <name pos:start="964:8" pos:end="964:11">void</name></type> <name pos:start="964:13" pos:end="964:24">us4020_test9</name> <parameter_list pos:start="964:26" pos:end="964:31">(<parameter pos:start="964:27" pos:end="964:30"><decl pos:start="964:27" pos:end="964:30"><type pos:start="964:27" pos:end="964:30"><name pos:start="964:27" pos:end="964:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="965:1" pos:end="1101:0">{<block_content pos:start="966:5" pos:end="1025:22">
    <decl_stmt pos:start="966:5" pos:end="966:19"><decl pos:start="966:5" pos:end="966:18"><type pos:start="966:5" pos:end="966:7"><name pos:start="966:5" pos:end="966:7">int</name></type> <name pos:start="966:9" pos:end="966:14">sys_rc</name> <init pos:start="966:16" pos:end="966:18">= <expr pos:start="966:18" pos:end="966:18"><literal type="number" pos:start="966:18" pos:end="966:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="967:5" pos:end="967:19"><decl pos:start="967:5" pos:end="967:18"><type pos:start="967:5" pos:end="967:13"><name pos:start="967:5" pos:end="967:13">EST_ERROR</name></type> <name pos:start="967:15" pos:end="967:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="968:5" pos:end="968:25"><decl pos:start="968:5" pos:end="968:24"><type pos:start="968:5" pos:end="968:13"><name pos:start="968:5" pos:end="968:11">EST_CTX</name> <modifier pos:start="968:13" pos:end="968:13">*</modifier></type><name pos:start="968:14" pos:end="968:17">ectx</name> <init pos:start="968:19" pos:end="968:24">= <expr pos:start="968:21" pos:end="968:24"><name pos:start="968:21" pos:end="968:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="969:5" pos:end="969:28"><decl pos:start="969:5" pos:end="969:27"><type pos:start="969:5" pos:end="969:8"><name pos:start="969:5" pos:end="969:8">char</name></type> <name pos:start="969:10" pos:end="969:27"><name pos:start="969:10" pos:end="969:12">cmd</name><index pos:start="969:13" pos:end="969:27">[<expr pos:start="969:14" pos:end="969:26"><name pos:start="969:14" pos:end="969:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="970:5" pos:end="970:18"><decl pos:start="970:5" pos:end="970:17"><type pos:start="970:5" pos:end="970:14"><name pos:start="970:5" pos:end="970:12">EVP_PKEY</name> <modifier pos:start="970:14" pos:end="970:14">*</modifier></type><name pos:start="970:15" pos:end="970:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="971:5" pos:end="971:22"><decl pos:start="971:5" pos:end="971:21"><type pos:start="971:5" pos:end="971:7"><name pos:start="971:5" pos:end="971:7">int</name></type> <name pos:start="971:9" pos:end="971:17">pkcs7_len</name> <init pos:start="971:19" pos:end="971:21">= <expr pos:start="971:21" pos:end="971:21"><literal type="number" pos:start="971:21" pos:end="971:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="973:5" pos:end="973:16"><expr pos:start="973:5" pos:end="973:15"><name pos:start="973:5" pos:end="973:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="975:5" pos:end="977:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    <expr_stmt pos:start="978:5" pos:end="978:78"><expr pos:start="978:5" pos:end="978:77"><call pos:start="978:5" pos:end="978:77"><name pos:start="978:5" pos:end="978:12">snprintf</name><argument_list pos:start="978:13" pos:end="978:77">(<argument pos:start="978:14" pos:end="978:16"><expr pos:start="978:14" pos:end="978:16"><name pos:start="978:14" pos:end="978:16">cmd</name></expr></argument>, <argument pos:start="978:19" pos:end="978:31"><expr pos:start="978:19" pos:end="978:31"><name pos:start="978:19" pos:end="978:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="978:34" pos:end="978:76"><expr pos:start="978:34" pos:end="978:76"><literal type="string" pos:start="978:34" pos:end="978:76">"antinat -xcUS4020/antinat-cfg-badcred.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="980:5" pos:end="980:25"><expr pos:start="980:5" pos:end="980:24"><name pos:start="980:5" pos:end="980:10">sys_rc</name> <operator pos:start="980:12" pos:end="980:12">=</operator> <call pos:start="980:14" pos:end="980:24"><name pos:start="980:14" pos:end="980:19">system</name><argument_list pos:start="980:20" pos:end="980:24">(<argument pos:start="980:21" pos:end="980:23"><expr pos:start="980:21" pos:end="980:23"><name pos:start="980:21" pos:end="980:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="981:5" pos:end="981:27"><expr pos:start="981:5" pos:end="981:26"><call pos:start="981:5" pos:end="981:26"><name pos:start="981:5" pos:end="981:13">CU_ASSERT</name><argument_list pos:start="981:14" pos:end="981:26">(<argument pos:start="981:15" pos:end="981:25"><expr pos:start="981:15" pos:end="981:25"><name pos:start="981:15" pos:end="981:20">sys_rc</name> <operator pos:start="981:22" pos:end="981:23">==</operator> <literal type="number" pos:start="981:25" pos:end="981:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="983:5" pos:end="985:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="986:5" pos:end="988:54"><expr pos:start="986:5" pos:end="988:53"><name pos:start="986:5" pos:end="986:8">ectx</name> <operator pos:start="986:10" pos:end="986:10">=</operator> <call pos:start="986:12" pos:end="988:53"><name pos:start="986:12" pos:end="986:26">est_client_init</name><argument_list pos:start="986:27" pos:end="988:53">(<argument pos:start="986:28" pos:end="986:34"><expr pos:start="986:28" pos:end="986:34"><name pos:start="986:28" pos:end="986:34">cacerts</name></expr></argument>, <argument pos:start="986:37" pos:end="986:47"><expr pos:start="986:37" pos:end="986:47"><name pos:start="986:37" pos:end="986:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="987:28" pos:end="987:46"><expr pos:start="987:28" pos:end="987:46"><name pos:start="987:28" pos:end="987:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="988:28" pos:end="988:52"><expr pos:start="988:28" pos:end="988:52"><name pos:start="988:28" pos:end="988:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="989:5" pos:end="989:28"><expr pos:start="989:5" pos:end="989:27"><call pos:start="989:5" pos:end="989:27"><name pos:start="989:5" pos:end="989:13">CU_ASSERT</name><argument_list pos:start="989:14" pos:end="989:27">(<argument pos:start="989:15" pos:end="989:26"><expr pos:start="989:15" pos:end="989:26"><name pos:start="989:15" pos:end="989:18">ectx</name> <operator pos:start="989:20" pos:end="989:21">!=</operator> <name pos:start="989:23" pos:end="989:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="991:5" pos:end="993:7">/*
     *  socks4
     */</comment>
    <expr_stmt pos:start="994:5" pos:end="998:52"><expr pos:start="994:5" pos:end="998:51"><name pos:start="994:5" pos:end="994:8">e_rc</name><operator pos:start="994:9" pos:end="994:9">=</operator> <call pos:start="994:11" pos:end="998:51"><name pos:start="994:11" pos:end="994:30">est_client_set_proxy</name><argument_list pos:start="994:31" pos:end="998:51">(<argument pos:start="994:32" pos:end="994:35"><expr pos:start="994:32" pos:end="994:35"><name pos:start="994:32" pos:end="994:35">ectx</name></expr></argument>, <argument pos:start="994:38" pos:end="994:60"><expr pos:start="994:38" pos:end="994:60"><name pos:start="994:38" pos:end="994:60">EST_CLIENT_PROXY_SOCKS5</name></expr></argument>,
                               <argument pos:start="995:32" pos:end="995:46"><expr pos:start="995:32" pos:end="995:46"><name pos:start="995:32" pos:end="995:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="996:32" pos:end="996:52"><expr pos:start="996:32" pos:end="996:52"><name pos:start="996:32" pos:end="996:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="997:32" pos:end="997:58"><expr pos:start="997:32" pos:end="997:58"><name pos:start="997:32" pos:end="997:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="998:32" pos:end="998:40"><expr pos:start="998:32" pos:end="998:40"><literal type="string" pos:start="998:32" pos:end="998:40">"estuser"</literal></expr></argument>, <argument pos:start="998:43" pos:end="998:50"><expr pos:start="998:43" pos:end="998:50"><literal type="string" pos:start="998:43" pos:end="998:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="999:5" pos:end="999:36"><expr pos:start="999:5" pos:end="999:35"><call pos:start="999:5" pos:end="999:35"><name pos:start="999:5" pos:end="999:13">CU_ASSERT</name><argument_list pos:start="999:14" pos:end="999:35">(<argument pos:start="999:15" pos:end="999:34"><expr pos:start="999:15" pos:end="999:34"><name pos:start="999:15" pos:end="999:18">e_rc</name> <operator pos:start="999:20" pos:end="999:21">==</operator> <name pos:start="999:23" pos:end="999:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1001:5" pos:end="1003:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1004:5" pos:end="1004:73"><expr pos:start="1004:5" pos:end="1004:72"><name pos:start="1004:5" pos:end="1004:8">e_rc</name> <operator pos:start="1004:10" pos:end="1004:10">=</operator> <call pos:start="1004:12" pos:end="1004:72"><name pos:start="1004:12" pos:end="1004:30">est_client_set_auth</name><argument_list pos:start="1004:31" pos:end="1004:72">(<argument pos:start="1004:32" pos:end="1004:35"><expr pos:start="1004:32" pos:end="1004:35"><name pos:start="1004:32" pos:end="1004:35">ectx</name></expr></argument>, <argument pos:start="1004:38" pos:end="1004:47"><expr pos:start="1004:38" pos:end="1004:47"><name pos:start="1004:38" pos:end="1004:47">US4020_UID</name></expr></argument>, <argument pos:start="1004:50" pos:end="1004:59"><expr pos:start="1004:50" pos:end="1004:59"><name pos:start="1004:50" pos:end="1004:59">US4020_PWD</name></expr></argument>, <argument pos:start="1004:62" pos:end="1004:65"><expr pos:start="1004:62" pos:end="1004:65"><name pos:start="1004:62" pos:end="1004:65">NULL</name></expr></argument>, <argument pos:start="1004:68" pos:end="1004:71"><expr pos:start="1004:68" pos:end="1004:71"><name pos:start="1004:68" pos:end="1004:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1005:5" pos:end="1005:36"><expr pos:start="1005:5" pos:end="1005:35"><call pos:start="1005:5" pos:end="1005:35"><name pos:start="1005:5" pos:end="1005:13">CU_ASSERT</name><argument_list pos:start="1005:14" pos:end="1005:35">(<argument pos:start="1005:15" pos:end="1005:34"><expr pos:start="1005:15" pos:end="1005:34"><name pos:start="1005:15" pos:end="1005:18">e_rc</name> <operator pos:start="1005:20" pos:end="1005:21">==</operator> <name pos:start="1005:23" pos:end="1005:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1007:5" pos:end="1009:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1010:5" pos:end="1010:80"><expr pos:start="1010:5" pos:end="1010:79"><call pos:start="1010:5" pos:end="1010:79"><name pos:start="1010:5" pos:end="1010:25">est_client_set_server</name><argument_list pos:start="1010:26" pos:end="1010:79">(<argument pos:start="1010:27" pos:end="1010:30"><expr pos:start="1010:27" pos:end="1010:30"><name pos:start="1010:27" pos:end="1010:30">ectx</name></expr></argument>, <argument pos:start="1010:33" pos:end="1010:48"><expr pos:start="1010:33" pos:end="1010:48"><name pos:start="1010:33" pos:end="1010:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="1010:51" pos:end="1010:72"><expr pos:start="1010:51" pos:end="1010:72"><name pos:start="1010:51" pos:end="1010:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="1010:75" pos:end="1010:78"><expr pos:start="1010:75" pos:end="1010:78"><name pos:start="1010:75" pos:end="1010:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1012:5" pos:end="1014:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="1015:5" pos:end="1015:33"><expr pos:start="1015:5" pos:end="1015:32"><name pos:start="1015:5" pos:end="1015:7">key</name> <operator pos:start="1015:9" pos:end="1015:9">=</operator> <call pos:start="1015:11" pos:end="1015:32"><name pos:start="1015:11" pos:end="1015:30">generate_private_key</name><argument_list pos:start="1015:31" pos:end="1015:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1016:5" pos:end="1016:27"><expr pos:start="1016:5" pos:end="1016:26"><call pos:start="1016:5" pos:end="1016:26"><name pos:start="1016:5" pos:end="1016:13">CU_ASSERT</name><argument_list pos:start="1016:14" pos:end="1016:26">(<argument pos:start="1016:15" pos:end="1016:25"><expr pos:start="1016:15" pos:end="1016:25"><name pos:start="1016:15" pos:end="1016:17">key</name> <operator pos:start="1016:19" pos:end="1016:20">!=</operator> <name pos:start="1016:22" pos:end="1016:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="1018:5" pos:end="1020:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="1021:5" pos:end="1021:64"><expr pos:start="1021:5" pos:end="1021:63"><name pos:start="1021:5" pos:end="1021:8">e_rc</name> <operator pos:start="1021:10" pos:end="1021:10">=</operator> <call pos:start="1021:12" pos:end="1021:63"><name pos:start="1021:12" pos:end="1021:28">est_client_enroll</name><argument_list pos:start="1021:29" pos:end="1021:63">(<argument pos:start="1021:30" pos:end="1021:33"><expr pos:start="1021:30" pos:end="1021:33"><name pos:start="1021:30" pos:end="1021:33">ectx</name></expr></argument>, <argument pos:start="1021:36" pos:end="1021:45"><expr pos:start="1021:36" pos:end="1021:45"><literal type="string" pos:start="1021:36" pos:end="1021:45">"TC4020-6"</literal></expr></argument>, <argument pos:start="1021:48" pos:end="1021:57"><expr pos:start="1021:48" pos:end="1021:57"><operator pos:start="1021:48" pos:end="1021:48">&amp;</operator><name pos:start="1021:49" pos:end="1021:57">pkcs7_len</name></expr></argument>, <argument pos:start="1021:60" pos:end="1021:62"><expr pos:start="1021:60" pos:end="1021:62"><name pos:start="1021:60" pos:end="1021:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1022:5" pos:end="1022:42"><expr pos:start="1022:5" pos:end="1022:41"><call pos:start="1022:5" pos:end="1022:41"><name pos:start="1022:5" pos:end="1022:13">CU_ASSERT</name><argument_list pos:start="1022:14" pos:end="1022:41">(<argument pos:start="1022:15" pos:end="1022:40"><expr pos:start="1022:15" pos:end="1022:40"><name pos:start="1022:15" pos:end="1022:18">e_rc</name> <operator pos:start="1022:20" pos:end="1022:21">==</operator> <name pos:start="1022:23" pos:end="1022:40">EST_ERR_IP_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="1024:5" pos:end="1024:23"><expr pos:start="1024:5" pos:end="1024:22"><call pos:start="1024:5" pos:end="1024:22"><name pos:start="1024:5" pos:end="1024:20">shutdown_antinat</name><argument_list pos:start="1024:21" pos:end="1024:22">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1025:5" pos:end="1025:22"><expr pos:start="1025:5" pos:end="1025:21"><call pos:start="1025:5" pos:end="1025:21"><name pos:start="1025:5" pos:end="1025:15">est_destroy</name><argument_list pos:start="1025:16" pos:end="1025:21">(<argument pos:start="1025:17" pos:end="1025:20"><expr pos:start="1025:17" pos:end="1025:20"><name pos:start="1025:17" pos:end="1025:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if pos:start="1029:1" pos:end="1029:5">#<cpp:directive pos:start="1029:2" pos:end="1029:3">if</cpp:directive> <expr pos:start="1029:5" pos:end="1029:5"><literal type="number" pos:start="1029:5" pos:end="1029:5">0</literal></expr></cpp:if>
<comment type="block" pos:start="1030:1" pos:end="1032:3">/*
 * could be tested, but needs certifcates updated
 */</comment>
<comment type="block" pos:start="1033:1" pos:end="1036:3">/*
 * Test for SOCKS 4A mode, with domain name 
 *
 */</comment>
static void us4020_test8 (void) 
{
    int sys_rc = 0;
    EST_ERROR e_rc;
    EST_CTX *ectx = NULL;
    char cmd[MAX_4020_CMDS];
    EVP_PKEY *key;
    int pkcs7_len = 0;
     
    LOG_FUNC_NM;

    <comment type="block" pos:start="1048:5" pos:end="1050:7">/*
     * Set up a SOCKS 4 proxy server locally
     */</comment>
    snprintf(cmd, MAX_4020_CMDS, "antinat -xcUS4020/antinat-cfg.xml");

    sys_rc = system(cmd);
    CU_ASSERT(sys_rc == 0);    
    
    <comment type="block" pos:start="1056:5" pos:end="1058:7">/*
     * Create a client context 
     */</comment>
    ectx = est_client_init(cacerts, cacerts_len, 
                           EST_CERT_FORMAT_PEM,
                           client_manual_cert_verify);
    CU_ASSERT(ectx != NULL);
    
    <comment type="block" pos:start="1064:5" pos:end="1066:7">/*
     *  socks4
     */</comment>
    e_rc= est_client_set_proxy(ectx, EST_CLIENT_PROXY_SOCKS4A,
                               US4020_PROXY_IP,
                               US4020_PROXY_TCP_PORT,
                               EST_CLIENT_PROXY_AUTH_BASIC,
                               NULL, NULL);
    CU_ASSERT(e_rc == EST_ERR_NONE);

    <comment type="block" pos:start="1074:5" pos:end="1076:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    e_rc = est_client_set_auth(ectx, US4020_UID, US4020_PWD, NULL, NULL);
    CU_ASSERT(e_rc == EST_ERR_NONE);

    <comment type="block" pos:start="1080:5" pos:end="1082:7">/*
     * Set the EST server address/port
     */</comment>
    est_client_set_server(ectx, US4020_SERVER_DOMAIN_NAME, US4020_SERVER_TCP_PORT, NULL);

    <comment type="block" pos:start="1085:5" pos:end="1087:7">/*
     * generate a private key
     */</comment>
    key = generate_private_key();
    CU_ASSERT(key != NULL);
    
    <comment type="block" pos:start="1091:5" pos:end="1093:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    e_rc = est_client_enroll(ectx, "TC4020-7", &amp;pkcs7_len, key);
    CU_ASSERT(e_rc == EST_ERR_NONE);

    shutdown_antinat();    
    est_destroy(ectx);
}
<cpp:endif pos:start="1100:1" pos:end="1100:6">#<cpp:directive pos:start="1100:2" pos:end="1100:6">endif</cpp:directive></cpp:endif>

<comment type="block" pos:start="1102:1" pos:end="1107:3">/*
 * Test HTTP proxy mode
 *
 * NOTE: only non-tunnel mode is tested.  tunnel mode does not
 * work with CiscoEST server.
 */</comment>
<function pos:start="1108:1" pos:end="1168:1"><type pos:start="1108:1" pos:end="1108:11"><specifier pos:start="1108:1" pos:end="1108:6">static</specifier> <name pos:start="1108:8" pos:end="1108:11">void</name></type> <name pos:start="1108:13" pos:end="1108:25">us4020_test10</name> <parameter_list pos:start="1108:27" pos:end="1108:32">(<parameter pos:start="1108:28" pos:end="1108:31"><decl pos:start="1108:28" pos:end="1108:31"><type pos:start="1108:28" pos:end="1108:31"><name pos:start="1108:28" pos:end="1108:31">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1109:1" pos:end="1168:1">{<block_content pos:start="1110:5" pos:end="1167:22">
    <decl_stmt pos:start="1110:5" pos:end="1110:19"><decl pos:start="1110:5" pos:end="1110:18"><type pos:start="1110:5" pos:end="1110:7"><name pos:start="1110:5" pos:end="1110:7">int</name></type> <name pos:start="1110:9" pos:end="1110:14">sys_rc</name> <init pos:start="1110:16" pos:end="1110:18">= <expr pos:start="1110:18" pos:end="1110:18"><literal type="number" pos:start="1110:18" pos:end="1110:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1111:5" pos:end="1111:19"><decl pos:start="1111:5" pos:end="1111:18"><type pos:start="1111:5" pos:end="1111:13"><name pos:start="1111:5" pos:end="1111:13">EST_ERROR</name></type> <name pos:start="1111:15" pos:end="1111:18">e_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1112:5" pos:end="1112:25"><decl pos:start="1112:5" pos:end="1112:24"><type pos:start="1112:5" pos:end="1112:13"><name pos:start="1112:5" pos:end="1112:11">EST_CTX</name> <modifier pos:start="1112:13" pos:end="1112:13">*</modifier></type><name pos:start="1112:14" pos:end="1112:17">ectx</name> <init pos:start="1112:19" pos:end="1112:24">= <expr pos:start="1112:21" pos:end="1112:24"><name pos:start="1112:21" pos:end="1112:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1113:5" pos:end="1113:28"><decl pos:start="1113:5" pos:end="1113:27"><type pos:start="1113:5" pos:end="1113:8"><name pos:start="1113:5" pos:end="1113:8">char</name></type> <name pos:start="1113:10" pos:end="1113:27"><name pos:start="1113:10" pos:end="1113:12">cmd</name><index pos:start="1113:13" pos:end="1113:27">[<expr pos:start="1113:14" pos:end="1113:26"><name pos:start="1113:14" pos:end="1113:26">MAX_4020_CMDS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1114:5" pos:end="1114:18"><decl pos:start="1114:5" pos:end="1114:17"><type pos:start="1114:5" pos:end="1114:14"><name pos:start="1114:5" pos:end="1114:12">EVP_PKEY</name> <modifier pos:start="1114:14" pos:end="1114:14">*</modifier></type><name pos:start="1114:15" pos:end="1114:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1115:5" pos:end="1115:22"><decl pos:start="1115:5" pos:end="1115:21"><type pos:start="1115:5" pos:end="1115:7"><name pos:start="1115:5" pos:end="1115:7">int</name></type> <name pos:start="1115:9" pos:end="1115:17">pkcs7_len</name> <init pos:start="1115:19" pos:end="1115:21">= <expr pos:start="1115:21" pos:end="1115:21"><literal type="number" pos:start="1115:21" pos:end="1115:21">0</literal></expr></init></decl>;</decl_stmt>
     
    <expr_stmt pos:start="1117:5" pos:end="1117:16"><expr pos:start="1117:5" pos:end="1117:15"><name pos:start="1117:5" pos:end="1117:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1119:5" pos:end="1121:7">/*
     * Set up a HTTP proxy server locally
     */</comment>
    <expr_stmt pos:start="1122:5" pos:end="1122:86"><expr pos:start="1122:5" pos:end="1122:85"><call pos:start="1122:5" pos:end="1122:85"><name pos:start="1122:5" pos:end="1122:12">snprintf</name><argument_list pos:start="1122:13" pos:end="1122:85">(<argument pos:start="1122:14" pos:end="1122:16"><expr pos:start="1122:14" pos:end="1122:16"><name pos:start="1122:14" pos:end="1122:16">cmd</name></expr></argument>, <argument pos:start="1122:19" pos:end="1122:31"><expr pos:start="1122:19" pos:end="1122:31"><name pos:start="1122:19" pos:end="1122:31">MAX_4020_CMDS</name></expr></argument>, <argument pos:start="1122:34" pos:end="1122:84"><expr pos:start="1122:34" pos:end="1122:84"><literal type="string" pos:start="1122:34" pos:end="1122:84">"haproxy -D -f US4020/haproxy.cfg -p ./haproxy.pid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1124:5" pos:end="1124:25"><expr pos:start="1124:5" pos:end="1124:24"><name pos:start="1124:5" pos:end="1124:10">sys_rc</name> <operator pos:start="1124:12" pos:end="1124:12">=</operator> <call pos:start="1124:14" pos:end="1124:24"><name pos:start="1124:14" pos:end="1124:19">system</name><argument_list pos:start="1124:20" pos:end="1124:24">(<argument pos:start="1124:21" pos:end="1124:23"><expr pos:start="1124:21" pos:end="1124:23"><name pos:start="1124:21" pos:end="1124:23">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1125:5" pos:end="1125:27"><expr pos:start="1125:5" pos:end="1125:26"><call pos:start="1125:5" pos:end="1125:26"><name pos:start="1125:5" pos:end="1125:13">CU_ASSERT</name><argument_list pos:start="1125:14" pos:end="1125:26">(<argument pos:start="1125:15" pos:end="1125:25"><expr pos:start="1125:15" pos:end="1125:25"><name pos:start="1125:15" pos:end="1125:20">sys_rc</name> <operator pos:start="1125:22" pos:end="1125:23">==</operator> <literal type="number" pos:start="1125:25" pos:end="1125:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    
    <comment type="block" pos:start="1127:5" pos:end="1129:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="1130:5" pos:end="1132:54"><expr pos:start="1130:5" pos:end="1132:53"><name pos:start="1130:5" pos:end="1130:8">ectx</name> <operator pos:start="1130:10" pos:end="1130:10">=</operator> <call pos:start="1130:12" pos:end="1132:53"><name pos:start="1130:12" pos:end="1130:26">est_client_init</name><argument_list pos:start="1130:27" pos:end="1132:53">(<argument pos:start="1130:28" pos:end="1130:34"><expr pos:start="1130:28" pos:end="1130:34"><name pos:start="1130:28" pos:end="1130:34">cacerts</name></expr></argument>, <argument pos:start="1130:37" pos:end="1130:47"><expr pos:start="1130:37" pos:end="1130:47"><name pos:start="1130:37" pos:end="1130:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="1131:28" pos:end="1131:46"><expr pos:start="1131:28" pos:end="1131:46"><name pos:start="1131:28" pos:end="1131:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="1132:28" pos:end="1132:52"><expr pos:start="1132:28" pos:end="1132:52"><name pos:start="1132:28" pos:end="1132:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1133:5" pos:end="1133:28"><expr pos:start="1133:5" pos:end="1133:27"><call pos:start="1133:5" pos:end="1133:27"><name pos:start="1133:5" pos:end="1133:13">CU_ASSERT</name><argument_list pos:start="1133:14" pos:end="1133:27">(<argument pos:start="1133:15" pos:end="1133:26"><expr pos:start="1133:15" pos:end="1133:26"><name pos:start="1133:15" pos:end="1133:18">ectx</name> <operator pos:start="1133:20" pos:end="1133:21">!=</operator> <name pos:start="1133:23" pos:end="1133:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="1135:5" pos:end="1139:52"><expr pos:start="1135:5" pos:end="1139:51"><name pos:start="1135:5" pos:end="1135:8">e_rc</name><operator pos:start="1135:9" pos:end="1135:9">=</operator> <call pos:start="1135:11" pos:end="1139:51"><name pos:start="1135:11" pos:end="1135:30">est_client_set_proxy</name><argument_list pos:start="1135:31" pos:end="1139:51">(<argument pos:start="1135:32" pos:end="1135:35"><expr pos:start="1135:32" pos:end="1135:35"><name pos:start="1135:32" pos:end="1135:35">ectx</name></expr></argument>, <argument pos:start="1135:38" pos:end="1135:67"><expr pos:start="1135:38" pos:end="1135:67"><name pos:start="1135:38" pos:end="1135:67">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr></argument>,
                               <argument pos:start="1136:32" pos:end="1136:46"><expr pos:start="1136:32" pos:end="1136:46"><name pos:start="1136:32" pos:end="1136:46">US4020_PROXY_IP</name></expr></argument>,
                               <argument pos:start="1137:32" pos:end="1137:52"><expr pos:start="1137:32" pos:end="1137:52"><name pos:start="1137:32" pos:end="1137:52">US4020_PROXY_TCP_PORT</name></expr></argument>,
                               <argument pos:start="1138:32" pos:end="1138:58"><expr pos:start="1138:32" pos:end="1138:58"><name pos:start="1138:32" pos:end="1138:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr></argument>,
                               <argument pos:start="1139:32" pos:end="1139:40"><expr pos:start="1139:32" pos:end="1139:40"><literal type="string" pos:start="1139:32" pos:end="1139:40">"estuser"</literal></expr></argument>, <argument pos:start="1139:43" pos:end="1139:50"><expr pos:start="1139:43" pos:end="1139:50"><literal type="string" pos:start="1139:43" pos:end="1139:50">"estpwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1141:5" pos:end="1141:36"><expr pos:start="1141:5" pos:end="1141:35"><call pos:start="1141:5" pos:end="1141:35"><name pos:start="1141:5" pos:end="1141:13">CU_ASSERT</name><argument_list pos:start="1141:14" pos:end="1141:35">(<argument pos:start="1141:15" pos:end="1141:34"><expr pos:start="1141:15" pos:end="1141:34"><name pos:start="1141:15" pos:end="1141:18">e_rc</name> <operator pos:start="1141:20" pos:end="1141:21">==</operator> <name pos:start="1141:23" pos:end="1141:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1143:5" pos:end="1145:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1146:5" pos:end="1146:73"><expr pos:start="1146:5" pos:end="1146:72"><name pos:start="1146:5" pos:end="1146:8">e_rc</name> <operator pos:start="1146:10" pos:end="1146:10">=</operator> <call pos:start="1146:12" pos:end="1146:72"><name pos:start="1146:12" pos:end="1146:30">est_client_set_auth</name><argument_list pos:start="1146:31" pos:end="1146:72">(<argument pos:start="1146:32" pos:end="1146:35"><expr pos:start="1146:32" pos:end="1146:35"><name pos:start="1146:32" pos:end="1146:35">ectx</name></expr></argument>, <argument pos:start="1146:38" pos:end="1146:47"><expr pos:start="1146:38" pos:end="1146:47"><name pos:start="1146:38" pos:end="1146:47">US4020_UID</name></expr></argument>, <argument pos:start="1146:50" pos:end="1146:59"><expr pos:start="1146:50" pos:end="1146:59"><name pos:start="1146:50" pos:end="1146:59">US4020_PWD</name></expr></argument>, <argument pos:start="1146:62" pos:end="1146:65"><expr pos:start="1146:62" pos:end="1146:65"><name pos:start="1146:62" pos:end="1146:65">NULL</name></expr></argument>, <argument pos:start="1146:68" pos:end="1146:71"><expr pos:start="1146:68" pos:end="1146:71"><name pos:start="1146:68" pos:end="1146:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1147:5" pos:end="1147:36"><expr pos:start="1147:5" pos:end="1147:35"><call pos:start="1147:5" pos:end="1147:35"><name pos:start="1147:5" pos:end="1147:13">CU_ASSERT</name><argument_list pos:start="1147:14" pos:end="1147:35">(<argument pos:start="1147:15" pos:end="1147:34"><expr pos:start="1147:15" pos:end="1147:34"><name pos:start="1147:15" pos:end="1147:18">e_rc</name> <operator pos:start="1147:20" pos:end="1147:21">==</operator> <name pos:start="1147:23" pos:end="1147:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1149:5" pos:end="1151:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1152:5" pos:end="1152:80"><expr pos:start="1152:5" pos:end="1152:79"><call pos:start="1152:5" pos:end="1152:79"><name pos:start="1152:5" pos:end="1152:25">est_client_set_server</name><argument_list pos:start="1152:26" pos:end="1152:79">(<argument pos:start="1152:27" pos:end="1152:30"><expr pos:start="1152:27" pos:end="1152:30"><name pos:start="1152:27" pos:end="1152:30">ectx</name></expr></argument>, <argument pos:start="1152:33" pos:end="1152:48"><expr pos:start="1152:33" pos:end="1152:48"><name pos:start="1152:33" pos:end="1152:48">US4020_SERVER_IP</name></expr></argument>, <argument pos:start="1152:51" pos:end="1152:72"><expr pos:start="1152:51" pos:end="1152:72"><name pos:start="1152:51" pos:end="1152:72">US4020_SERVER_TCP_PORT</name></expr></argument>, <argument pos:start="1152:75" pos:end="1152:78"><expr pos:start="1152:75" pos:end="1152:78"><name pos:start="1152:75" pos:end="1152:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1154:5" pos:end="1156:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="1157:5" pos:end="1157:33"><expr pos:start="1157:5" pos:end="1157:32"><name pos:start="1157:5" pos:end="1157:7">key</name> <operator pos:start="1157:9" pos:end="1157:9">=</operator> <call pos:start="1157:11" pos:end="1157:32"><name pos:start="1157:11" pos:end="1157:30">generate_private_key</name><argument_list pos:start="1157:31" pos:end="1157:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1158:5" pos:end="1158:27"><expr pos:start="1158:5" pos:end="1158:26"><call pos:start="1158:5" pos:end="1158:26"><name pos:start="1158:5" pos:end="1158:13">CU_ASSERT</name><argument_list pos:start="1158:14" pos:end="1158:26">(<argument pos:start="1158:15" pos:end="1158:25"><expr pos:start="1158:15" pos:end="1158:25"><name pos:start="1158:15" pos:end="1158:17">key</name> <operator pos:start="1158:19" pos:end="1158:20">!=</operator> <name pos:start="1158:22" pos:end="1158:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="1160:5" pos:end="1162:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="1163:5" pos:end="1163:64"><expr pos:start="1163:5" pos:end="1163:63"><name pos:start="1163:5" pos:end="1163:8">e_rc</name> <operator pos:start="1163:10" pos:end="1163:10">=</operator> <call pos:start="1163:12" pos:end="1163:63"><name pos:start="1163:12" pos:end="1163:28">est_client_enroll</name><argument_list pos:start="1163:29" pos:end="1163:63">(<argument pos:start="1163:30" pos:end="1163:33"><expr pos:start="1163:30" pos:end="1163:33"><name pos:start="1163:30" pos:end="1163:33">ectx</name></expr></argument>, <argument pos:start="1163:36" pos:end="1163:45"><expr pos:start="1163:36" pos:end="1163:45"><literal type="string" pos:start="1163:36" pos:end="1163:45">"TC4020-8"</literal></expr></argument>, <argument pos:start="1163:48" pos:end="1163:57"><expr pos:start="1163:48" pos:end="1163:57"><operator pos:start="1163:48" pos:end="1163:48">&amp;</operator><name pos:start="1163:49" pos:end="1163:57">pkcs7_len</name></expr></argument>, <argument pos:start="1163:60" pos:end="1163:62"><expr pos:start="1163:60" pos:end="1163:62"><name pos:start="1163:60" pos:end="1163:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1164:5" pos:end="1164:36"><expr pos:start="1164:5" pos:end="1164:35"><call pos:start="1164:5" pos:end="1164:35"><name pos:start="1164:5" pos:end="1164:13">CU_ASSERT</name><argument_list pos:start="1164:14" pos:end="1164:35">(<argument pos:start="1164:15" pos:end="1164:34"><expr pos:start="1164:15" pos:end="1164:34"><name pos:start="1164:15" pos:end="1164:18">e_rc</name> <operator pos:start="1164:20" pos:end="1164:21">==</operator> <name pos:start="1164:23" pos:end="1164:34">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1166:5" pos:end="1166:23"><expr pos:start="1166:5" pos:end="1166:22"><call pos:start="1166:5" pos:end="1166:22"><name pos:start="1166:5" pos:end="1166:20">shutdown_haproxy</name><argument_list pos:start="1166:21" pos:end="1166:22">()</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="1167:5" pos:end="1167:22"><expr pos:start="1167:5" pos:end="1167:21"><call pos:start="1167:5" pos:end="1167:21"><name pos:start="1167:5" pos:end="1167:15">est_destroy</name><argument_list pos:start="1167:16" pos:end="1167:21">(<argument pos:start="1167:17" pos:end="1167:20"><expr pos:start="1167:17" pos:end="1167:20"><name pos:start="1167:17" pos:end="1167:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="1171:1" pos:end="1174:3">/*
 * Indicate whether client proxy support has been built into
 * the library or not
 */</comment>
<function pos:start="1175:1" pos:end="1185:1"><type pos:start="1175:1" pos:end="1175:10"><specifier pos:start="1175:1" pos:end="1175:6">static</specifier> <name pos:start="1175:8" pos:end="1175:10">int</name></type> <name pos:start="1175:12" pos:end="1175:31">client_proxy_enabled</name> <parameter_list pos:start="1175:33" pos:end="1175:38">(<parameter pos:start="1175:34" pos:end="1175:37"><decl pos:start="1175:34" pos:end="1175:37"><type pos:start="1175:34" pos:end="1175:37"><name pos:start="1175:34" pos:end="1175:37">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1176:1" pos:end="1185:1">{<block_content pos:start="1177:5" pos:end="1184:5">
    <decl_stmt pos:start="1177:5" pos:end="1177:19"><decl pos:start="1177:5" pos:end="1177:18"><type pos:start="1177:5" pos:end="1177:13"><name pos:start="1177:5" pos:end="1177:13">EST_ERROR</name></type> <name pos:start="1177:15" pos:end="1177:18">e_rc</name></decl>;</decl_stmt>
    
    <expr_stmt pos:start="1179:5" pos:end="1179:65"><expr pos:start="1179:5" pos:end="1179:64"><name pos:start="1179:5" pos:end="1179:8">e_rc</name> <operator pos:start="1179:10" pos:end="1179:10">=</operator> <call pos:start="1179:12" pos:end="1179:64"><name pos:start="1179:12" pos:end="1179:31">est_client_set_proxy</name><argument_list pos:start="1179:32" pos:end="1179:64">(<argument pos:start="1179:33" pos:end="1179:36"><expr pos:start="1179:33" pos:end="1179:36"><name pos:start="1179:33" pos:end="1179:36">NULL</name></expr></argument>, <argument pos:start="1179:39" pos:end="1179:39"><expr pos:start="1179:39" pos:end="1179:39"><literal type="number" pos:start="1179:39" pos:end="1179:39">0</literal></expr></argument>, <argument pos:start="1179:42" pos:end="1179:45"><expr pos:start="1179:42" pos:end="1179:45"><name pos:start="1179:42" pos:end="1179:45">NULL</name></expr></argument>, <argument pos:start="1179:48" pos:end="1179:48"><expr pos:start="1179:48" pos:end="1179:48"><literal type="number" pos:start="1179:48" pos:end="1179:48">0</literal></expr></argument>, <argument pos:start="1179:51" pos:end="1179:51"><expr pos:start="1179:51" pos:end="1179:51"><literal type="number" pos:start="1179:51" pos:end="1179:51">0</literal></expr></argument>, <argument pos:start="1179:54" pos:end="1179:57"><expr pos:start="1179:54" pos:end="1179:57"><name pos:start="1179:54" pos:end="1179:57">NULL</name></expr></argument>, <argument pos:start="1179:60" pos:end="1179:63"><expr pos:start="1179:60" pos:end="1179:63"><name pos:start="1179:60" pos:end="1179:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1180:5" pos:end="1184:5"><if pos:start="1180:5" pos:end="1182:5">if <condition pos:start="1180:8" pos:end="1180:56">(<expr pos:start="1180:9" pos:end="1180:55"><name pos:start="1180:9" pos:end="1180:12">e_rc</name> <operator pos:start="1180:14" pos:end="1180:15">==</operator> <name pos:start="1180:17" pos:end="1180:55">EST_ERR_CLIENT_PROXY_MODE_NOT_SUPPORTED</name></expr>)</condition> <block pos:start="1180:58" pos:end="1182:5">{<block_content pos:start="1181:9" pos:end="1181:17">
        <return pos:start="1181:9" pos:end="1181:17">return <expr pos:start="1181:16" pos:end="1181:16"><literal type="number" pos:start="1181:16" pos:end="1181:16">0</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="1182:7" pos:end="1184:5">else <block pos:start="1182:12" pos:end="1184:5">{<block_content pos:start="1183:9" pos:end="1183:17">
        <return pos:start="1183:9" pos:end="1183:17">return <expr pos:start="1183:16" pos:end="1183:16"><literal type="number" pos:start="1183:16" pos:end="1183:16">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="1188:1" pos:end="1191:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="1192:1" pos:end="1233:1"><type pos:start="1192:1" pos:end="1192:3"><name pos:start="1192:1" pos:end="1192:3">int</name></type> <name pos:start="1192:5" pos:end="1192:20">us4020_add_suite</name> <parameter_list pos:start="1192:22" pos:end="1192:27">(<parameter pos:start="1192:23" pos:end="1192:26"><decl pos:start="1192:23" pos:end="1192:26"><type pos:start="1192:23" pos:end="1192:26"><name pos:start="1192:23" pos:end="1192:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1193:1" pos:end="1233:1">{<block_content pos:start="1195:4" pos:end="1233:0">
<cpp:ifdef pos:start="1194:1" pos:end="1194:17">#<cpp:directive pos:start="1194:2" pos:end="1194:6">ifdef</cpp:directive> <name pos:start="1194:8" pos:end="1194:17">HAVE_CUNIT</name></cpp:ifdef>
   <decl_stmt pos:start="1195:4" pos:end="1195:27"><decl pos:start="1195:4" pos:end="1195:26"><type pos:start="1195:4" pos:end="1195:12"><name pos:start="1195:4" pos:end="1195:12">CU_pSuite</name></type> <name pos:start="1195:14" pos:end="1195:19">pSuite</name> <init pos:start="1195:21" pos:end="1195:26">= <expr pos:start="1195:23" pos:end="1195:26"><name pos:start="1195:23" pos:end="1195:26">NULL</name></expr></init></decl>;</decl_stmt>

   <comment type="block" pos:start="1197:4" pos:end="1197:36">/* add a suite to the registry */</comment>
   <expr_stmt pos:start="1198:4" pos:end="1200:48"><expr pos:start="1198:4" pos:end="1200:47"><name pos:start="1198:4" pos:end="1198:9">pSuite</name> <operator pos:start="1198:11" pos:end="1198:11">=</operator> <call pos:start="1198:13" pos:end="1200:47"><name pos:start="1198:13" pos:end="1198:24">CU_add_suite</name><argument_list pos:start="1198:25" pos:end="1200:47">(<argument pos:start="1198:26" pos:end="1198:49"><expr pos:start="1198:26" pos:end="1198:49"><literal type="string" pos:start="1198:26" pos:end="1198:49">"us4020_tok_auth_client"</literal></expr></argument>, 
	                  <argument pos:start="1199:27" pos:end="1199:43"><expr pos:start="1199:27" pos:end="1199:43"><name pos:start="1199:27" pos:end="1199:43">us4020_init_suite</name></expr></argument>, 
			  <argument pos:start="1200:27" pos:end="1200:46"><expr pos:start="1200:27" pos:end="1200:46"><name pos:start="1200:27" pos:end="1200:46">us4020_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt pos:start="1201:4" pos:end="1206:0"><if pos:start="1201:4" pos:end="1206:0">if <condition pos:start="1201:7" pos:end="1201:22">(<expr pos:start="1201:8" pos:end="1201:21"><name pos:start="1201:8" pos:end="1201:11">NULL</name> <operator pos:start="1201:13" pos:end="1201:14">==</operator> <name pos:start="1201:16" pos:end="1201:21">pSuite</name></expr>)</condition> <block pos:start="1201:24" pos:end="1206:0">{<block_content pos:start="1202:7" pos:end="1203:28">
      <expr_stmt pos:start="1202:7" pos:end="1202:28"><expr pos:start="1202:7" pos:end="1202:27"><call pos:start="1202:7" pos:end="1202:27"><name pos:start="1202:7" pos:end="1202:25">CU_cleanup_registry</name><argument_list pos:start="1202:26" pos:end="1202:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1203:7" pos:end="1203:28">return <expr pos:start="1203:14" pos:end="1203:27"><call pos:start="1203:14" pos:end="1203:27"><name pos:start="1203:14" pos:end="1203:25">CU_get_error</name><argument_list pos:start="1203:26" pos:end="1203:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>
<cpp:ifndef pos:start="1205:1" pos:end="1205:13">#<cpp:directive pos:start="1205:2" pos:end="1205:7">ifndef</cpp:directive> <name pos:start="1205:9" pos:end="1205:13">WIN32</name></cpp:ifndef>
   <comment type="block" pos:start="1206:4" pos:end="1208:6">/*
    * client proxy mode is only supported when libcurl has been specified.
    */</comment>
   <if_stmt pos:start="1209:4" pos:end="1231:0"><if pos:start="1209:4" pos:end="1231:0">if <condition pos:start="1209:7" pos:end="1209:30">(<expr pos:start="1209:8" pos:end="1209:29"><call pos:start="1209:8" pos:end="1209:29"><name pos:start="1209:8" pos:end="1209:27">client_proxy_enabled</name><argument_list pos:start="1209:28" pos:end="1209:29">()</argument_list></call></expr>)</condition><block pos:start="1209:31" pos:end="1231:0">{<block_content pos:start="1212:8" pos:end="1228:12">
       
       <comment type="block" pos:start="1211:8" pos:end="1211:39">/* add the tests to the suite */</comment>
       <if_stmt pos:start="1212:8" pos:end="1228:12"><if pos:start="1212:8" pos:end="1228:12">if <condition pos:start="1212:11" pos:end="1224:12">(
           <expr pos:start="1213:12" pos:end="1223:69"><operator pos:start="1213:12" pos:end="1213:12">(</operator><name pos:start="1213:13" pos:end="1213:16">NULL</name> <operator pos:start="1213:18" pos:end="1213:19">==</operator> <call pos:start="1213:21" pos:end="1213:76"><name pos:start="1213:21" pos:end="1213:31">CU_add_test</name><argument_list pos:start="1213:32" pos:end="1213:76">(<argument pos:start="1213:33" pos:end="1213:38"><expr pos:start="1213:33" pos:end="1213:38"><name pos:start="1213:33" pos:end="1213:38">pSuite</name></expr></argument>, <argument pos:start="1213:41" pos:end="1213:61"><expr pos:start="1213:41" pos:end="1213:61"><literal type="string" pos:start="1213:41" pos:end="1213:61">"parameter check API"</literal></expr></argument>, <argument pos:start="1213:64" pos:end="1213:75"><expr pos:start="1213:64" pos:end="1213:75"><name pos:start="1213:64" pos:end="1213:75">us4020_test1</name></expr></argument>)</argument_list></call><operator pos:start="1213:77" pos:end="1213:77">)</operator> <operator pos:start="1213:79" pos:end="1213:80">||</operator>
           <operator pos:start="1214:12" pos:end="1214:12">(</operator><name pos:start="1214:13" pos:end="1214:16">NULL</name> <operator pos:start="1214:18" pos:end="1214:19">==</operator> <call pos:start="1214:21" pos:end="1214:69"><name pos:start="1214:21" pos:end="1214:31">CU_add_test</name><argument_list pos:start="1214:32" pos:end="1214:69">(<argument pos:start="1214:33" pos:end="1214:38"><expr pos:start="1214:33" pos:end="1214:38"><name pos:start="1214:33" pos:end="1214:38">pSuite</name></expr></argument>, <argument pos:start="1214:41" pos:end="1214:54"><expr pos:start="1214:41" pos:end="1214:54"><literal type="string" pos:start="1214:41" pos:end="1214:54">"SOCKS 4 mode"</literal></expr></argument>, <argument pos:start="1214:57" pos:end="1214:68"><expr pos:start="1214:57" pos:end="1214:68"><name pos:start="1214:57" pos:end="1214:68">us4020_test2</name></expr></argument>)</argument_list></call><operator pos:start="1214:70" pos:end="1214:70">)</operator> <operator pos:start="1214:72" pos:end="1214:73">||</operator>
           <operator pos:start="1215:12" pos:end="1215:12">(</operator><name pos:start="1215:13" pos:end="1215:16">NULL</name> <operator pos:start="1215:18" pos:end="1215:19">==</operator> <call pos:start="1215:21" pos:end="1215:84"><name pos:start="1215:21" pos:end="1215:31">CU_add_test</name><argument_list pos:start="1215:32" pos:end="1215:84">(<argument pos:start="1215:33" pos:end="1215:38"><expr pos:start="1215:33" pos:end="1215:38"><name pos:start="1215:33" pos:end="1215:38">pSuite</name></expr></argument>, <argument pos:start="1215:41" pos:end="1215:69"><expr pos:start="1215:41" pos:end="1215:69"><literal type="string" pos:start="1215:41" pos:end="1215:69">"SOCKS 4 mode w/ credentials"</literal></expr></argument>, <argument pos:start="1215:72" pos:end="1215:83"><expr pos:start="1215:72" pos:end="1215:83"><name pos:start="1215:72" pos:end="1215:83">us4020_test3</name></expr></argument>)</argument_list></call><operator pos:start="1215:85" pos:end="1215:85">)</operator> <operator pos:start="1215:87" pos:end="1215:88">||</operator>
           <operator pos:start="1216:12" pos:end="1216:12">(</operator><name pos:start="1216:13" pos:end="1216:16">NULL</name> <operator pos:start="1216:18" pos:end="1216:19">==</operator> <call pos:start="1216:21" pos:end="1216:69"><name pos:start="1216:21" pos:end="1216:31">CU_add_test</name><argument_list pos:start="1216:32" pos:end="1216:69">(<argument pos:start="1216:33" pos:end="1216:38"><expr pos:start="1216:33" pos:end="1216:38"><name pos:start="1216:33" pos:end="1216:38">pSuite</name></expr></argument>, <argument pos:start="1216:41" pos:end="1216:54"><expr pos:start="1216:41" pos:end="1216:54"><literal type="string" pos:start="1216:41" pos:end="1216:54">"SOCKS 5 mode"</literal></expr></argument>, <argument pos:start="1216:57" pos:end="1216:68"><expr pos:start="1216:57" pos:end="1216:68"><name pos:start="1216:57" pos:end="1216:68">us4020_test4</name></expr></argument>)</argument_list></call><operator pos:start="1216:70" pos:end="1216:70">)</operator> <operator pos:start="1216:72" pos:end="1216:73">||</operator>
           <operator pos:start="1217:12" pos:end="1217:12">(</operator><name pos:start="1217:13" pos:end="1217:16">NULL</name> <operator pos:start="1217:18" pos:end="1217:19">==</operator> <call pos:start="1217:21" pos:end="1217:70"><name pos:start="1217:21" pos:end="1217:31">CU_add_test</name><argument_list pos:start="1217:32" pos:end="1217:70">(<argument pos:start="1217:33" pos:end="1217:38"><expr pos:start="1217:33" pos:end="1217:38"><name pos:start="1217:33" pos:end="1217:38">pSuite</name></expr></argument>, <argument pos:start="1217:41" pos:end="1217:55"><expr pos:start="1217:41" pos:end="1217:55"><literal type="string" pos:start="1217:41" pos:end="1217:55">"SOCKS 4A mode"</literal></expr></argument>, <argument pos:start="1217:58" pos:end="1217:69"><expr pos:start="1217:58" pos:end="1217:69"><name pos:start="1217:58" pos:end="1217:69">us4020_test5</name></expr></argument>)</argument_list></call><operator pos:start="1217:71" pos:end="1217:71">)</operator> <operator pos:start="1217:73" pos:end="1217:74">||</operator>
           <operator pos:start="1218:12" pos:end="1218:12">(</operator><name pos:start="1218:13" pos:end="1218:16">NULL</name> <operator pos:start="1218:18" pos:end="1218:19">==</operator> <call pos:start="1218:21" pos:end="1218:85"><name pos:start="1218:21" pos:end="1218:31">CU_add_test</name><argument_list pos:start="1218:32" pos:end="1218:85">(<argument pos:start="1218:33" pos:end="1218:38"><expr pos:start="1218:33" pos:end="1218:38"><name pos:start="1218:33" pos:end="1218:38">pSuite</name></expr></argument>, <argument pos:start="1218:41" pos:end="1218:70"><expr pos:start="1218:41" pos:end="1218:70"><literal type="string" pos:start="1218:41" pos:end="1218:70">"SOCKS 5 mode, no credentials"</literal></expr></argument>, <argument pos:start="1218:73" pos:end="1218:84"><expr pos:start="1218:73" pos:end="1218:84"><name pos:start="1218:73" pos:end="1218:84">us4020_test6</name></expr></argument>)</argument_list></call><operator pos:start="1218:86" pos:end="1218:86">)</operator> <operator pos:start="1218:88" pos:end="1218:89">||</operator>
           <operator pos:start="1219:12" pos:end="1219:12">(</operator><name pos:start="1219:13" pos:end="1219:16">NULL</name> <operator pos:start="1219:18" pos:end="1219:19">==</operator> <call pos:start="1219:21" pos:end="1219:87"><name pos:start="1219:21" pos:end="1219:31">CU_add_test</name><argument_list pos:start="1219:32" pos:end="1219:87">(<argument pos:start="1219:33" pos:end="1219:38"><expr pos:start="1219:33" pos:end="1219:38"><name pos:start="1219:33" pos:end="1219:38">pSuite</name></expr></argument>, <argument pos:start="1219:41" pos:end="1219:72"><expr pos:start="1219:41" pos:end="1219:72"><literal type="string" pos:start="1219:41" pos:end="1219:72">"SOCKS 5 mode, good credentials"</literal></expr></argument>, <argument pos:start="1219:75" pos:end="1219:86"><expr pos:start="1219:75" pos:end="1219:86"><name pos:start="1219:75" pos:end="1219:86">us4020_test7</name></expr></argument>)</argument_list></call><operator pos:start="1219:88" pos:end="1219:88">)</operator> <operator pos:start="1219:90" pos:end="1219:91">||</operator>
           <operator pos:start="1220:12" pos:end="1220:12">(</operator><name pos:start="1220:13" pos:end="1220:16">NULL</name> <operator pos:start="1220:18" pos:end="1220:19">==</operator> <call pos:start="1220:21" pos:end="1220:92"><name pos:start="1220:21" pos:end="1220:31">CU_add_test</name><argument_list pos:start="1220:32" pos:end="1220:92">(<argument pos:start="1220:33" pos:end="1220:38"><expr pos:start="1220:33" pos:end="1220:38"><name pos:start="1220:33" pos:end="1220:38">pSuite</name></expr></argument>, <argument pos:start="1220:41" pos:end="1220:77"><expr pos:start="1220:41" pos:end="1220:77"><literal type="string" pos:start="1220:41" pos:end="1220:77">"SOCKS 5 mode, forgotten credentials"</literal></expr></argument>, <argument pos:start="1220:80" pos:end="1220:91"><expr pos:start="1220:80" pos:end="1220:91"><name pos:start="1220:80" pos:end="1220:91">us4020_test8</name></expr></argument>)</argument_list></call><operator pos:start="1220:93" pos:end="1220:93">)</operator> <operator pos:start="1220:95" pos:end="1220:96">||</operator>
           <operator pos:start="1221:12" pos:end="1221:12">(</operator><name pos:start="1221:13" pos:end="1221:16">NULL</name> <operator pos:start="1221:18" pos:end="1221:19">==</operator> <call pos:start="1221:21" pos:end="1221:86"><name pos:start="1221:21" pos:end="1221:31">CU_add_test</name><argument_list pos:start="1221:32" pos:end="1221:86">(<argument pos:start="1221:33" pos:end="1221:38"><expr pos:start="1221:33" pos:end="1221:38"><name pos:start="1221:33" pos:end="1221:38">pSuite</name></expr></argument>, <argument pos:start="1221:41" pos:end="1221:71"><expr pos:start="1221:41" pos:end="1221:71"><literal type="string" pos:start="1221:41" pos:end="1221:71">"SOCKS 5 mode, bad credentials"</literal></expr></argument>, <argument pos:start="1221:74" pos:end="1221:85"><expr pos:start="1221:74" pos:end="1221:85"><name pos:start="1221:74" pos:end="1221:85">us4020_test9</name></expr></argument>)</argument_list></call><operator pos:start="1221:87" pos:end="1221:87">)</operator> <operator pos:start="1221:89" pos:end="1221:90">||</operator>
<comment type="block" pos:start="1222:1" pos:end="1222:119">/*            (NULL == CU_add_test(pSuite, "SOCKS 4A mode with domain name instead of IP address", us4020_test7)) || */</comment>
           <operator pos:start="1223:12" pos:end="1223:12">(</operator><name pos:start="1223:13" pos:end="1223:16">NULL</name> <operator pos:start="1223:18" pos:end="1223:19">==</operator> <call pos:start="1223:21" pos:end="1223:68"><name pos:start="1223:21" pos:end="1223:31">CU_add_test</name><argument_list pos:start="1223:32" pos:end="1223:68">(<argument pos:start="1223:33" pos:end="1223:38"><expr pos:start="1223:33" pos:end="1223:38"><name pos:start="1223:33" pos:end="1223:38">pSuite</name></expr></argument>, <argument pos:start="1223:41" pos:end="1223:52"><expr pos:start="1223:41" pos:end="1223:52"><literal type="string" pos:start="1223:41" pos:end="1223:52">"HTTP proxy"</literal></expr></argument>, <argument pos:start="1223:55" pos:end="1223:67"><expr pos:start="1223:55" pos:end="1223:67"><name pos:start="1223:55" pos:end="1223:67">us4020_test10</name></expr></argument>)</argument_list></call><operator pos:start="1223:69" pos:end="1223:69">)</operator></expr>
           )</condition>
           <block pos:start="1225:12" pos:end="1228:12">{<block_content pos:start="1226:16" pos:end="1227:37">
               <expr_stmt pos:start="1226:16" pos:end="1226:37"><expr pos:start="1226:16" pos:end="1226:36"><call pos:start="1226:16" pos:end="1226:36"><name pos:start="1226:16" pos:end="1226:34">CU_cleanup_registry</name><argument_list pos:start="1226:35" pos:end="1226:36">()</argument_list></call></expr>;</expr_stmt>
               <return pos:start="1227:16" pos:end="1227:37">return <expr pos:start="1227:23" pos:end="1227:36"><call pos:start="1227:23" pos:end="1227:36"><name pos:start="1227:23" pos:end="1227:34">CU_get_error</name><argument_list pos:start="1227:35" pos:end="1227:36">()</argument_list></call></expr>;</return>
           </block_content>}</block></if></if_stmt>
   </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="1230:1" pos:end="1230:6">#<cpp:directive pos:start="1230:2" pos:end="1230:6">endif</cpp:directive></cpp:endif>   
   <return pos:start="1231:4" pos:end="1233:0">return <expr pos:start="1231:11" pos:end="1231:21"><name pos:start="1231:11" pos:end="1231:21">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1232:1" pos:end="1232:6">#<cpp:directive pos:start="1232:2" pos:end="1232:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
