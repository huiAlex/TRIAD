<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us3496.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us3496.c - Unit Tests URI path segment extension support 
 *
 * March, 2016
 *
 * Copyright (c) 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:ifdef pos:start="17:1" pos:end="17:17">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="18:1" pos:end="18:24">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:28">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="20:1" pos:end="20:6">#<cpp:directive pos:start="20:2" pos:end="20:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="21:1" pos:end="21:34">#<cpp:directive pos:start="21:2" pos:end="21:8">include</cpp:directive> <cpp:file pos:start="21:10" pos:end="21:34">"../../util/test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="22:1" pos:end="22:22">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:22">"st_server.h"</cpp:file></cpp:include>

<cpp:include pos:start="24:1" pos:end="24:35">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:35">"../../src/est/est_locl.h"</cpp:file></cpp:include>

<decl_stmt pos:start="26:1" pos:end="26:39"><decl pos:start="26:1" pos:end="26:38"><type pos:start="26:1" pos:end="26:11"><specifier pos:start="26:1" pos:end="26:6">extern</specifier> <name pos:start="26:8" pos:end="26:11">char</name></type> <name pos:start="26:13" pos:end="26:38"><name pos:start="26:13" pos:end="26:36">tst_srvr_path_seg_enroll</name><index pos:start="26:37" pos:end="26:38">[]</index></name></decl>;</decl_stmt>
<decl_stmt pos:start="27:1" pos:end="27:37"><decl pos:start="27:1" pos:end="27:36"><type pos:start="27:1" pos:end="27:11"><specifier pos:start="27:1" pos:end="27:6">extern</specifier> <name pos:start="27:8" pos:end="27:11">char</name></type> <name pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:34">tst_srvr_path_seg_auth</name><index pos:start="27:35" pos:end="27:36">[]</index></name></decl>;</decl_stmt>

<decl_stmt pos:start="29:1" pos:end="56:0"><decl pos:start="29:1" pos:end="29:31"><type pos:start="29:1" pos:end="29:10"><specifier pos:start="29:1" pos:end="29:6">static</specifier> <name pos:start="29:8" pos:end="29:10">int</name></type> <name pos:start="29:12" pos:end="29:31">path_segment_support</name></decl>;</decl_stmt>

<comment type="block" pos:start="31:1" pos:end="33:3">/*
 * max command line length when generating system commands
 */</comment>
<cpp:define pos:start="34:1" pos:end="34:30">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:26"><name pos:start="34:9" pos:end="34:26">EST_UT_MAX_CMD_LEN</name></cpp:macro> <cpp:value pos:start="34:28" pos:end="34:30">256</cpp:value></cpp:define>

<comment type="block" pos:start="36:1" pos:end="38:3">/*
 * The CA certificate used to verify the EST server.  Grab it from the server's directory
 */</comment>
<comment type="block" pos:start="39:1" pos:end="39:70">/* #define CLIENT_UT_CACERT "../../example/server/estCA/cacert.crt" */</comment>
<cpp:define pos:start="40:1" pos:end="40:46">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:24"><name pos:start="40:9" pos:end="40:24">CLIENT_UT_CACERT</name></cpp:macro> <cpp:value pos:start="40:26" pos:end="40:46">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:50">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:24">CLIENT_UT_PUBKEY</name></cpp:macro> <cpp:value pos:start="41:26" pos:end="41:50">"./est_client_ut_keypair"</cpp:value></cpp:define>

<cpp:define pos:start="43:1" pos:end="43:34">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:26">US3496_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="43:30" pos:end="43:34">29496</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:39">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:24"><name pos:start="44:9" pos:end="44:24">US3496_SERVER_IP</name></cpp:macro>    <cpp:value pos:start="44:29" pos:end="44:39">"127.0.0.1"</cpp:value></cpp:define>	
<cpp:define pos:start="45:1" pos:end="45:45">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:26">US3496_UIDPWD_GOOD</name></cpp:macro>   <cpp:value pos:start="45:30" pos:end="45:45">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:define pos:start="46:1" pos:end="46:38">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:18"><name pos:start="46:9" pos:end="46:18">US3496_UID</name></cpp:macro>           <cpp:value pos:start="46:30" pos:end="46:38">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:37">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:18">US3496_PWD</name></cpp:macro>           <cpp:value pos:start="47:30" pos:end="47:37">"estpwd"</cpp:value></cpp:define>
<cpp:ifndef pos:start="48:1" pos:end="48:13">#<cpp:directive pos:start="48:2" pos:end="48:7">ifndef</cpp:directive> <name pos:start="48:9" pos:end="48:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="49:1" pos:end="49:49">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:22">US3496_CACERTS</name></cpp:macro>	    <cpp:value pos:start="49:29" pos:end="49:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:50">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:26"><name pos:start="50:9" pos:end="50:26">US3496_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="50:30" pos:end="50:50">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:72">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:29">US3496_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="51:31" pos:end="51:72">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="52:1" pos:end="52:5">#<cpp:directive pos:start="52:2" pos:end="52:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="53:1" pos:end="53:51">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:22">US3496_CACERTS</name></cpp:macro>	    <cpp:value pos:start="53:29" pos:end="53:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:51">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:26"><name pos:start="54:9" pos:end="54:26">US3496_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="54:30" pos:end="54:51">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:75">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:29">US3496_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="55:31" pos:end="55:75">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>

<decl_stmt pos:start="57:1" pos:end="57:48"><decl pos:start="57:1" pos:end="57:47"><type pos:start="57:1" pos:end="57:23"><specifier pos:start="57:1" pos:end="57:6">static</specifier> <name pos:start="57:8" pos:end="57:23">CRITICAL_SECTION</name></type> <name pos:start="57:25" pos:end="57:47">logger_critical_section</name></decl>;</decl_stmt>  
<function pos:start="58:1" pos:end="71:0"><type pos:start="58:1" pos:end="58:11"><specifier pos:start="58:1" pos:end="58:6">static</specifier> <name pos:start="58:8" pos:end="58:11">void</name></type> <name pos:start="58:13" pos:end="58:32">us3496_logger_stderr</name> <parameter_list pos:start="58:34" pos:end="58:58">(<parameter pos:start="58:35" pos:end="58:46"><decl pos:start="58:35" pos:end="58:46"><type pos:start="58:35" pos:end="58:46"><name pos:start="58:35" pos:end="58:38">char</name> <modifier pos:start="58:40" pos:end="58:40">*</modifier></type><name pos:start="58:41" pos:end="58:46">format</name></decl></parameter>, <parameter pos:start="58:49" pos:end="58:57"><decl pos:start="58:49" pos:end="58:57"><type pos:start="58:49" pos:end="58:57"><name pos:start="58:49" pos:end="58:55">va_list</name></type> <name pos:start="58:57" pos:end="58:57">l</name></decl></parameter>)</parameter_list> 
<block pos:start="59:1" pos:end="71:0">{<block_content pos:start="60:5" pos:end="63:51">
    <expr_stmt pos:start="60:5" pos:end="60:51"><expr pos:start="60:5" pos:end="60:50"><call pos:start="60:5" pos:end="60:50"><name pos:start="60:5" pos:end="60:24">EnterCriticalSection</name><argument_list pos:start="60:25" pos:end="60:50">(<argument pos:start="60:26" pos:end="60:49"><expr pos:start="60:26" pos:end="60:49"><operator pos:start="60:26" pos:end="60:26">&amp;</operator><name pos:start="60:27" pos:end="60:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><call pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:16">vfprintf</name><argument_list pos:start="61:17" pos:end="61:35">(<argument pos:start="61:18" pos:end="61:23"><expr pos:start="61:18" pos:end="61:23"><name pos:start="61:18" pos:end="61:23">stderr</name></expr></argument>, <argument pos:start="61:26" pos:end="61:31"><expr pos:start="61:26" pos:end="61:31"><name pos:start="61:26" pos:end="61:31">format</name></expr></argument>, <argument pos:start="61:34" pos:end="61:34"><expr pos:start="61:34" pos:end="61:34"><name pos:start="61:34" pos:end="61:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="62:9" pos:end="62:23"><expr pos:start="62:9" pos:end="62:22"><call pos:start="62:9" pos:end="62:22"><name pos:start="62:9" pos:end="62:14">fflush</name><argument_list pos:start="62:15" pos:end="62:22">(<argument pos:start="62:16" pos:end="62:21"><expr pos:start="62:16" pos:end="62:21"><name pos:start="62:16" pos:end="62:21">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:51"><expr pos:start="63:5" pos:end="63:50"><call pos:start="63:5" pos:end="63:50"><name pos:start="63:5" pos:end="63:24">LeaveCriticalSection</name><argument_list pos:start="63:25" pos:end="63:50">(<argument pos:start="63:26" pos:end="63:49"><expr pos:start="63:26" pos:end="63:49"><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="67:1" pos:end="67:102">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:28">US3496_ENROLL_URL_BA</name></cpp:macro> <cpp:value pos:start="67:30" pos:end="67:102">"https://127.0.0.1:29496/.well-known/est/cacerts-somestring/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="68:1" pos:end="68:70">#<cpp:directive pos:start="68:2" pos:end="68:7">define</cpp:directive> <cpp:macro pos:start="68:9" pos:end="68:24"><name pos:start="68:9" pos:end="68:24">US3496_PKCS10_CT</name></cpp:macro>	    <cpp:value pos:start="68:37" pos:end="68:70">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 

<cpp:define pos:start="70:1" pos:end="70:1000">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:29"><name pos:start="70:9" pos:end="70:29">US3496_PKCS10_RSA2048</name></cpp:macro> <cpp:value pos:start="70:31" pos:end="70:1000">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDJA9mdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>

<function_decl pos:start="72:1" pos:end="72:78"><type pos:start="72:1" pos:end="72:10"><specifier pos:start="72:1" pos:end="72:6">static</specifier> <name pos:start="72:8" pos:end="72:10">int</name></type> <name pos:start="72:12" pos:end="72:36">client_manual_cert_verify</name> <parameter_list pos:start="72:38" pos:end="72:77">(<parameter pos:start="72:39" pos:end="72:52"><decl pos:start="72:39" pos:end="72:52"><type pos:start="72:39" pos:end="72:52"><name pos:start="72:39" pos:end="72:42">X509</name> <modifier pos:start="72:44" pos:end="72:44">*</modifier></type><name pos:start="72:45" pos:end="72:52">cur_cert</name></decl></parameter>, <parameter pos:start="72:55" pos:end="72:76"><decl pos:start="72:55" pos:end="72:76"><type pos:start="72:55" pos:end="72:76"><name pos:start="72:55" pos:end="72:57">int</name></type> <name pos:start="72:59" pos:end="72:76">openssl_cert_error</name></decl></parameter>)</parameter_list>;</function_decl>

<function pos:start="74:1" pos:end="76:1"><type pos:start="74:1" pos:end="74:11"><specifier pos:start="74:1" pos:end="74:6">static</specifier> <name pos:start="74:8" pos:end="74:11">void</name></type> <name pos:start="74:13" pos:end="74:24">us3496_clean</name> <parameter_list pos:start="74:26" pos:end="74:31">(<parameter pos:start="74:27" pos:end="74:30"><decl pos:start="74:27" pos:end="74:30"><type pos:start="74:27" pos:end="74:30"><name pos:start="74:27" pos:end="74:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="75:1" pos:end="76:1">{<block_content>
</block_content>}</block></function>

<function pos:start="78:1" pos:end="95:1"><type pos:start="78:1" pos:end="78:10"><specifier pos:start="78:1" pos:end="78:6">static</specifier> <name pos:start="78:8" pos:end="78:10">int</name></type> <name pos:start="78:12" pos:end="78:30">us3496_start_server</name> <parameter_list pos:start="78:32" pos:end="78:59">(<parameter pos:start="78:33" pos:end="78:49"><decl pos:start="78:33" pos:end="78:49"><type pos:start="78:33" pos:end="78:49"><name pos:start="78:33" pos:end="78:35">int</name></type> <name pos:start="78:37" pos:end="78:49">manual_enroll</name></decl></parameter>, <parameter pos:start="78:52" pos:end="78:58"><decl pos:start="78:52" pos:end="78:58"><type pos:start="78:52" pos:end="78:58"><name pos:start="78:52" pos:end="78:54">int</name></type> <name pos:start="78:56" pos:end="78:58">nid</name></decl></parameter>)</parameter_list>
<block pos:start="79:1" pos:end="95:1">{<block_content pos:start="80:5" pos:end="94:14">
    <decl_stmt pos:start="80:5" pos:end="80:11"><decl pos:start="80:5" pos:end="80:10"><type pos:start="80:5" pos:end="80:7"><name pos:start="80:5" pos:end="80:7">int</name></type> <name pos:start="80:9" pos:end="80:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="82:5" pos:end="91:23"><expr pos:start="82:5" pos:end="91:22"><name pos:start="82:5" pos:end="82:6">rv</name> <operator pos:start="82:8" pos:end="82:8">=</operator> <call pos:start="82:10" pos:end="91:22"><name pos:start="82:10" pos:end="82:17">st_start</name><argument_list pos:start="82:18" pos:end="91:22">(<argument pos:start="82:19" pos:end="82:36"><expr pos:start="82:19" pos:end="82:36"><name pos:start="82:19" pos:end="82:36">US3496_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="83:19" pos:end="83:39"><expr pos:start="83:19" pos:end="83:39"><name pos:start="83:19" pos:end="83:39">US3496_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="84:19" pos:end="84:39"><expr pos:start="84:19" pos:end="84:39"><name pos:start="84:19" pos:end="84:39">US3496_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="85:19" pos:end="85:37"><expr pos:start="85:19" pos:end="85:37"><literal type="string" pos:start="85:19" pos:end="85:37">"US3496 test realm"</literal></expr></argument>,
	          <argument pos:start="86:19" pos:end="86:32"><expr pos:start="86:19" pos:end="86:32"><name pos:start="86:19" pos:end="86:32">US3496_CACERTS</name></expr></argument>,
	          <argument pos:start="87:19" pos:end="87:36"><expr pos:start="87:19" pos:end="87:36"><name pos:start="87:19" pos:end="87:36">US3496_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="88:19" pos:end="88:39"><expr pos:start="88:19" pos:end="88:39"><literal type="string" pos:start="88:19" pos:end="88:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="89:19" pos:end="89:31"><expr pos:start="89:19" pos:end="89:31"><name pos:start="89:19" pos:end="89:31">manual_enroll</name></expr></argument>,
		  <argument pos:start="90:19" pos:end="90:19"><expr pos:start="90:19" pos:end="90:19"><literal type="number" pos:start="90:19" pos:end="90:19">0</literal></expr></argument>,
		  <argument pos:start="91:19" pos:end="91:21"><expr pos:start="91:19" pos:end="91:21"><name pos:start="91:19" pos:end="91:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="93:5" pos:end="93:13"><expr pos:start="93:5" pos:end="93:12"><call pos:start="93:5" pos:end="93:12"><name pos:start="93:5" pos:end="93:9">SLEEP</name><argument_list pos:start="93:10" pos:end="93:12">(<argument pos:start="93:11" pos:end="93:11"><expr pos:start="93:11" pos:end="93:11"><literal type="number" pos:start="93:11" pos:end="93:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="94:5" pos:end="94:14">return <expr pos:start="94:12" pos:end="94:13"><name pos:start="94:12" pos:end="94:13">rv</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="97:1" pos:end="124:1"><type pos:start="97:1" pos:end="97:10"><specifier pos:start="97:1" pos:end="97:6">static</specifier> <name pos:start="97:8" pos:end="97:10">int</name></type> <name pos:start="97:12" pos:end="97:29">path_seg_supported</name><parameter_list pos:start="97:30" pos:end="97:35">(<parameter pos:start="97:31" pos:end="97:34"><decl pos:start="97:31" pos:end="97:34"><type pos:start="97:31" pos:end="97:34"><name pos:start="97:31" pos:end="97:34">void</name></type></decl></parameter>)</parameter_list> <block pos:start="97:37" pos:end="124:1">{<block_content pos:start="99:5" pos:end="123:13">

    <decl_stmt pos:start="99:5" pos:end="99:18"><decl pos:start="99:5" pos:end="99:17"><type pos:start="99:5" pos:end="99:13"><name pos:start="99:5" pos:end="99:11">EST_CTX</name> <modifier pos:start="99:13" pos:end="99:13">*</modifier></type><name pos:start="99:14" pos:end="99:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="100:5" pos:end="100:34"><decl pos:start="100:5" pos:end="100:33"><type pos:start="100:5" pos:end="100:19"><name pos:start="100:5" pos:end="100:12">unsigned</name> <name pos:start="100:14" pos:end="100:17">char</name> <modifier pos:start="100:19" pos:end="100:19">*</modifier></type><name pos:start="100:20" pos:end="100:26">cacerts</name> <init pos:start="100:28" pos:end="100:33">= <expr pos:start="100:30" pos:end="100:33"><name pos:start="100:30" pos:end="100:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="101:5" pos:end="101:24"><decl pos:start="101:5" pos:end="101:23"><type pos:start="101:5" pos:end="101:7"><name pos:start="101:5" pos:end="101:7">int</name></type> <name pos:start="101:9" pos:end="101:19">cacerts_len</name> <init pos:start="101:21" pos:end="101:23">= <expr pos:start="101:23" pos:end="101:23"><literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="102:5" pos:end="102:32"><decl pos:start="102:5" pos:end="102:31"><type pos:start="102:5" pos:end="102:13"><name pos:start="102:5" pos:end="102:13">EST_ERROR</name></type> <name pos:start="102:15" pos:end="102:16">rc</name> <init pos:start="102:18" pos:end="102:31">= <expr pos:start="102:20" pos:end="102:31"><name pos:start="102:20" pos:end="102:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="104:5" pos:end="104:13"><expr pos:start="104:5" pos:end="104:12"><call pos:start="104:5" pos:end="104:12"><name pos:start="104:5" pos:end="104:9">SLEEP</name><argument_list pos:start="104:10" pos:end="104:12">(<argument pos:start="104:11" pos:end="104:11"><expr pos:start="104:11" pos:end="104:11"><literal type="number" pos:start="104:11" pos:end="104:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="106:5" pos:end="108:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="109:5" pos:end="109:63"><expr pos:start="109:5" pos:end="109:62"><name pos:start="109:5" pos:end="109:15">cacerts_len</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:62"><name pos:start="109:19" pos:end="109:34">read_binary_file</name><argument_list pos:start="109:35" pos:end="109:62">(<argument pos:start="109:36" pos:end="109:51"><expr pos:start="109:36" pos:end="109:51"><name pos:start="109:36" pos:end="109:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="109:54" pos:end="109:61"><expr pos:start="109:54" pos:end="109:61"><operator pos:start="109:54" pos:end="109:54">&amp;</operator><name pos:start="109:55" pos:end="109:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="112:5" pos:end="113:54"><expr pos:start="112:5" pos:end="113:53"><name pos:start="112:5" pos:end="112:8">ectx</name> <operator pos:start="112:10" pos:end="112:10">=</operator> <call pos:start="112:12" pos:end="113:53"><name pos:start="112:12" pos:end="112:26">est_client_init</name><argument_list pos:start="112:27" pos:end="113:53">(<argument pos:start="112:28" pos:end="112:34"><expr pos:start="112:28" pos:end="112:34"><name pos:start="112:28" pos:end="112:34">cacerts</name></expr></argument>, <argument pos:start="112:37" pos:end="112:47"><expr pos:start="112:37" pos:end="112:47"><name pos:start="112:37" pos:end="112:47">cacerts_len</name></expr></argument>, <argument pos:start="112:50" pos:end="112:68"><expr pos:start="112:50" pos:end="112:68"><name pos:start="112:50" pos:end="112:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="113:28" pos:end="113:52"><expr pos:start="113:28" pos:end="113:52"><name pos:start="113:28" pos:end="113:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:91"><expr pos:start="115:5" pos:end="115:90"><name pos:start="115:5" pos:end="115:6">rc</name> <operator pos:start="115:8" pos:end="115:8">=</operator> <call pos:start="115:10" pos:end="115:90"><name pos:start="115:10" pos:end="115:30">est_client_set_server</name><argument_list pos:start="115:31" pos:end="115:90">(<argument pos:start="115:32" pos:end="115:35"><expr pos:start="115:32" pos:end="115:35"><name pos:start="115:32" pos:end="115:35">ectx</name></expr></argument>, <argument pos:start="115:38" pos:end="115:53"><expr pos:start="115:38" pos:end="115:53"><name pos:start="115:38" pos:end="115:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="115:56" pos:end="115:73"><expr pos:start="115:56" pos:end="115:73"><name pos:start="115:56" pos:end="115:73">US3496_SERVER_PORT</name></expr></argument>, <argument pos:start="115:76" pos:end="115:89"><expr pos:start="115:76" pos:end="115:89"><literal type="string" pos:start="115:76" pos:end="115:89">"test_segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="119:5">if <condition pos:start="117:8" pos:end="117:27">(<expr pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:10">rc</name> <operator pos:start="117:12" pos:end="117:13">==</operator> <name pos:start="117:15" pos:end="117:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="117:29" pos:end="119:5">{<block_content pos:start="118:9" pos:end="118:17">
        <return pos:start="118:9" pos:end="118:17">return <expr pos:start="118:16" pos:end="118:16"><literal type="number" pos:start="118:16" pos:end="118:16">1</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="119:7" pos:end="121:5">else <block pos:start="119:12" pos:end="121:5">{<block_content pos:start="120:9" pos:end="120:17">
        <return pos:start="120:9" pos:end="120:17">return <expr pos:start="120:16" pos:end="120:16"><literal type="number" pos:start="120:16" pos:end="120:16">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="127:1" pos:end="131:3">/*
 * This routine is called when CUnit initializes this test
 * suite. 
 * 1. Generate the keypair to be used for this EST Client UT suite
 */</comment>
<function pos:start="132:1" pos:end="167:1"><type pos:start="132:1" pos:end="132:10"><specifier pos:start="132:1" pos:end="132:6">static</specifier> <name pos:start="132:8" pos:end="132:10">int</name></type> <name pos:start="132:12" pos:end="132:28">us3496_init_suite</name> <parameter_list pos:start="132:30" pos:end="132:35">(<parameter pos:start="132:31" pos:end="132:34"><decl pos:start="132:31" pos:end="132:34"><type pos:start="132:31" pos:end="132:34"><name pos:start="132:31" pos:end="132:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="133:1" pos:end="167:1">{<block_content pos:start="134:5" pos:end="166:14">
    <decl_stmt pos:start="134:5" pos:end="134:15"><decl pos:start="134:5" pos:end="134:14"><type pos:start="134:5" pos:end="134:7"><name pos:start="134:5" pos:end="134:7">int</name></type> <name pos:start="134:9" pos:end="134:10">rv</name> <init pos:start="134:12" pos:end="134:14">= <expr pos:start="134:14" pos:end="134:14"><literal type="number" pos:start="134:14" pos:end="134:14">0</literal></expr></init></decl>;</decl_stmt>
   
    <decl_stmt pos:start="136:5" pos:end="136:33"><decl pos:start="136:5" pos:end="136:32"><type pos:start="136:5" pos:end="136:8"><name pos:start="136:5" pos:end="136:8">char</name></type> <name pos:start="136:10" pos:end="136:32"><name pos:start="136:10" pos:end="136:12">cmd</name><index pos:start="136:13" pos:end="136:32">[<expr pos:start="136:14" pos:end="136:31"><name pos:start="136:14" pos:end="136:31">EST_UT_MAX_CMD_LEN</name></expr>]</index></name></decl>;</decl_stmt>    
    <expr_stmt pos:start="137:5" pos:end="137:67"><expr pos:start="137:5" pos:end="137:66"><call pos:start="137:5" pos:end="137:66"><name pos:start="137:5" pos:end="137:10">printf</name><argument_list pos:start="137:11" pos:end="137:66">(<argument pos:start="137:12" pos:end="137:65"><expr pos:start="137:12" pos:end="137:65"><literal type="string" pos:start="137:12" pos:end="137:65">"Starting EST Client/Proxy path segment unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="139:5" pos:end="141:7">/*
     * check to see if path segment support has been compiled in
     */</comment>
    <if_stmt pos:start="142:5" pos:end="145:5"><if pos:start="142:5" pos:end="145:5">if <condition pos:start="142:8" pos:end="142:30">(<expr pos:start="142:9" pos:end="142:29"><operator pos:start="142:9" pos:end="142:9">!</operator><name pos:start="142:10" pos:end="142:29">path_segment_support</name></expr>)</condition> <block pos:start="142:32" pos:end="145:5">{<block_content pos:start="143:9" pos:end="144:17">
        <expr_stmt pos:start="143:9" pos:end="143:113"><expr pos:start="143:9" pos:end="143:112"><call pos:start="143:9" pos:end="143:112"><name pos:start="143:9" pos:end="143:14">printf</name><argument_list pos:start="143:15" pos:end="143:112">(<argument pos:start="143:16" pos:end="143:111"><expr pos:start="143:16" pos:end="143:111"><literal type="string" pos:start="143:16" pos:end="143:111">"URI Path Segment is not supported in this build of EST.  Rebuild using --with-uriparser-dir \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="144:9" pos:end="144:17">return <expr pos:start="144:16" pos:end="144:16"><literal type="number" pos:start="144:16" pos:end="144:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="147:5" pos:end="149:7">/*
     * gen the keypair to be used for EST Client testing
     */</comment>
    <expr_stmt pos:start="150:5" pos:end="151:83"><expr pos:start="150:5" pos:end="151:82"><call pos:start="150:5" pos:end="151:82"><name pos:start="150:5" pos:end="150:12">snprintf</name><argument_list pos:start="150:13" pos:end="151:82">(<argument pos:start="150:14" pos:end="150:16"><expr pos:start="150:14" pos:end="150:16"><name pos:start="150:14" pos:end="150:16">cmd</name></expr></argument>, <argument pos:start="150:19" pos:end="150:36"><expr pos:start="150:19" pos:end="150:36"><name pos:start="150:19" pos:end="150:36">EST_UT_MAX_CMD_LEN</name></expr></argument>,
             <argument pos:start="151:14" pos:end="151:63"><expr pos:start="151:14" pos:end="151:63"><literal type="string" pos:start="151:14" pos:end="151:63">"openssl ecparam -name prime256v1 -genkey -out %s"</literal></expr></argument>, <argument pos:start="151:66" pos:end="151:81"><expr pos:start="151:66" pos:end="151:81"><name pos:start="151:66" pos:end="151:81">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="152:5" pos:end="152:24"><expr pos:start="152:5" pos:end="152:23"><call pos:start="152:5" pos:end="152:23"><name pos:start="152:5" pos:end="152:10">printf</name><argument_list pos:start="152:11" pos:end="152:23">(<argument pos:start="152:12" pos:end="152:17"><expr pos:start="152:12" pos:end="152:17"><literal type="string" pos:start="152:12" pos:end="152:17">"%s\n"</literal></expr></argument>, <argument pos:start="152:20" pos:end="152:22"><expr pos:start="152:20" pos:end="152:22"><name pos:start="152:20" pos:end="152:22">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="154:5" pos:end="154:21"><expr pos:start="154:5" pos:end="154:20"><name pos:start="154:5" pos:end="154:6">rv</name> <operator pos:start="154:8" pos:end="154:8">=</operator> <call pos:start="154:10" pos:end="154:20"><name pos:start="154:10" pos:end="154:15">system</name><argument_list pos:start="154:16" pos:end="154:20">(<argument pos:start="154:17" pos:end="154:19"><expr pos:start="154:17" pos:end="154:19"><name pos:start="154:17" pos:end="154:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="156:5" pos:end="158:7">/*
     * start the server for the tests that need to talk to a server
     */</comment>
    <expr_stmt pos:start="159:5" pos:end="159:19"><expr pos:start="159:5" pos:end="159:18"><call pos:start="159:5" pos:end="159:18"><name pos:start="159:5" pos:end="159:16">us3496_clean</name><argument_list pos:start="159:17" pos:end="159:18">()</argument_list></call></expr>;</expr_stmt>    
    <comment type="block" pos:start="160:5" pos:end="162:7">/*
     * Start an instance of the EST server
     */</comment>
    <expr_stmt pos:start="163:5" pos:end="163:35"><expr pos:start="163:5" pos:end="163:34"><name pos:start="163:5" pos:end="163:6">rv</name> <operator pos:start="163:8" pos:end="163:8">=</operator> <call pos:start="163:10" pos:end="163:34"><name pos:start="163:10" pos:end="163:28">us3496_start_server</name><argument_list pos:start="163:29" pos:end="163:34">(<argument pos:start="163:30" pos:end="163:30"><expr pos:start="163:30" pos:end="163:30"><literal type="number" pos:start="163:30" pos:end="163:30">0</literal></expr></argument>, <argument pos:start="163:33" pos:end="163:33"><expr pos:start="163:33" pos:end="163:33"><literal type="number" pos:start="163:33" pos:end="163:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="164:5" pos:end="164:13"><expr pos:start="164:5" pos:end="164:12"><call pos:start="164:5" pos:end="164:12"><name pos:start="164:5" pos:end="164:9">SLEEP</name><argument_list pos:start="164:10" pos:end="164:12">(<argument pos:start="164:11" pos:end="164:11"><expr pos:start="164:11" pos:end="164:11"><literal type="number" pos:start="164:11" pos:end="164:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="166:5" pos:end="166:14">return <expr pos:start="166:12" pos:end="166:13"><name pos:start="166:12" pos:end="166:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="170:1" pos:end="174:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="175:1" pos:end="180:1"><type pos:start="175:1" pos:end="175:10"><specifier pos:start="175:1" pos:end="175:6">static</specifier> <name pos:start="175:8" pos:end="175:10">int</name></type> <name pos:start="175:12" pos:end="175:31">us3496_destroy_suite</name> <parameter_list pos:start="175:33" pos:end="175:38">(<parameter pos:start="175:34" pos:end="175:37"><decl pos:start="175:34" pos:end="175:37"><type pos:start="175:34" pos:end="175:37"><name pos:start="175:34" pos:end="175:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="176:1" pos:end="180:1">{<block_content pos:start="178:5" pos:end="179:13">
    
    <expr_stmt pos:start="178:5" pos:end="178:14"><expr pos:start="178:5" pos:end="178:13"><call pos:start="178:5" pos:end="178:13"><name pos:start="178:5" pos:end="178:11">st_stop</name><argument_list pos:start="178:12" pos:end="178:13">()</argument_list></call></expr>;</expr_stmt>    
    <return pos:start="179:5" pos:end="179:13">return <expr pos:start="179:12" pos:end="179:12"><literal type="number" pos:start="179:12" pos:end="179:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="182:1" pos:end="184:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="185:1" pos:end="214:1"><type pos:start="185:1" pos:end="185:10"><specifier pos:start="185:1" pos:end="185:6">static</specifier> <name pos:start="185:8" pos:end="185:10">int</name></type> <name pos:start="185:12" pos:end="185:36">client_manual_cert_verify</name> <parameter_list pos:start="185:38" pos:end="185:77">(<parameter pos:start="185:39" pos:end="185:52"><decl pos:start="185:39" pos:end="185:52"><type pos:start="185:39" pos:end="185:52"><name pos:start="185:39" pos:end="185:42">X509</name> <modifier pos:start="185:44" pos:end="185:44">*</modifier></type><name pos:start="185:45" pos:end="185:52">cur_cert</name></decl></parameter>, <parameter pos:start="185:55" pos:end="185:76"><decl pos:start="185:55" pos:end="185:76"><type pos:start="185:55" pos:end="185:76"><name pos:start="185:55" pos:end="185:57">int</name></type> <name pos:start="185:59" pos:end="185:76">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="186:1" pos:end="214:1">{<block_content pos:start="187:5" pos:end="213:19">
    <decl_stmt pos:start="187:5" pos:end="187:17"><decl pos:start="187:5" pos:end="187:16"><type pos:start="187:5" pos:end="187:9"><name pos:start="187:5" pos:end="187:7">BIO</name> <modifier pos:start="187:9" pos:end="187:9">*</modifier></type><name pos:start="187:10" pos:end="187:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="188:5" pos:end="188:43"><expr pos:start="188:5" pos:end="188:42"><name pos:start="188:5" pos:end="188:11">bio_err</name><operator pos:start="188:12" pos:end="188:12">=</operator><call pos:start="188:13" pos:end="188:42"><name pos:start="188:13" pos:end="188:22">BIO_new_fp</name><argument_list pos:start="188:23" pos:end="188:42">(<argument pos:start="188:24" pos:end="188:29"><expr pos:start="188:24" pos:end="188:29"><name pos:start="188:24" pos:end="188:29">stderr</name></expr></argument>,<argument pos:start="188:31" pos:end="188:41"><expr pos:start="188:31" pos:end="188:41"><name pos:start="188:31" pos:end="188:41">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="189:5" pos:end="189:20"><decl pos:start="189:5" pos:end="189:19"><type pos:start="189:5" pos:end="189:7"><name pos:start="189:5" pos:end="189:7">int</name></type> <name pos:start="189:9" pos:end="189:15">approve</name> <init pos:start="189:17" pos:end="189:19">= <expr pos:start="189:19" pos:end="189:19"><literal type="number" pos:start="189:19" pos:end="189:19">0</literal></expr></init></decl>;</decl_stmt> 
    
    <comment type="block" pos:start="191:5" pos:end="193:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="194:5" pos:end="196:62"><expr pos:start="194:5" pos:end="196:61"><call pos:start="194:5" pos:end="196:61"><name pos:start="194:5" pos:end="194:10">printf</name><argument_list pos:start="194:11" pos:end="196:61">(<argument pos:start="194:12" pos:end="194:117"><expr pos:start="194:12" pos:end="194:117"><literal type="string" pos:start="194:12" pos:end="194:117">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
           <argument pos:start="195:12" pos:end="195:23"><expr pos:start="195:12" pos:end="195:23"><name pos:start="195:12" pos:end="195:23">__FUNCTION__</name></expr></argument>, <argument pos:start="195:26" pos:end="195:43"><expr pos:start="195:26" pos:end="195:43"><name pos:start="195:26" pos:end="195:43">openssl_cert_error</name></expr></argument>,
           <argument pos:start="196:12" pos:end="196:60"><expr pos:start="196:12" pos:end="196:60"><call pos:start="196:12" pos:end="196:60"><name pos:start="196:12" pos:end="196:40">X509_verify_cert_error_string</name><argument_list pos:start="196:41" pos:end="196:60">(<argument pos:start="196:42" pos:end="196:59"><expr pos:start="196:42" pos:end="196:59"><name pos:start="196:42" pos:end="196:59">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="198:5" pos:end="198:30"><expr pos:start="198:5" pos:end="198:29"><call pos:start="198:5" pos:end="198:29"><name pos:start="198:5" pos:end="198:10">printf</name><argument_list pos:start="198:11" pos:end="198:29">(<argument pos:start="198:12" pos:end="198:28"><expr pos:start="198:12" pos:end="198:28"><literal type="string" pos:start="198:12" pos:end="198:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="199:5" pos:end="199:35"><expr pos:start="199:5" pos:end="199:34"><call pos:start="199:5" pos:end="199:34"><name pos:start="199:5" pos:end="199:17">X509_print_fp</name><argument_list pos:start="199:18" pos:end="199:34">(<argument pos:start="199:19" pos:end="199:24"><expr pos:start="199:19" pos:end="199:24"><name pos:start="199:19" pos:end="199:24">stdout</name></expr></argument>,<argument pos:start="199:26" pos:end="199:33"><expr pos:start="199:26" pos:end="199:33"><name pos:start="199:26" pos:end="199:33">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="200:5" pos:end="204:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="205:5" pos:end="205:74"><expr pos:start="205:5" pos:end="205:73"><call pos:start="205:5" pos:end="205:73"><name pos:start="205:5" pos:end="205:24">X509_signature_print</name><argument_list pos:start="205:25" pos:end="205:73">(<argument pos:start="205:26" pos:end="205:32"><expr pos:start="205:26" pos:end="205:32"><name pos:start="205:26" pos:end="205:32">bio_err</name></expr></argument>, <argument pos:start="205:35" pos:end="205:51"><expr pos:start="205:35" pos:end="205:51"><name pos:start="205:35" pos:end="205:51"><name pos:start="205:35" pos:end="205:42">cur_cert</name><operator pos:start="205:43" pos:end="205:44">-&gt;</operator><name pos:start="205:45" pos:end="205:51">sig_alg</name></name></expr></argument>, <argument pos:start="205:54" pos:end="205:72"><expr pos:start="205:54" pos:end="205:72"><name pos:start="205:54" pos:end="205:72"><name pos:start="205:54" pos:end="205:61">cur_cert</name><operator pos:start="205:62" pos:end="205:63">-&gt;</operator><name pos:start="205:64" pos:end="205:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="207:5" pos:end="209:5"><if pos:start="207:5" pos:end="209:5">if <condition pos:start="207:8" pos:end="207:59">(<expr pos:start="207:9" pos:end="207:58"><name pos:start="207:9" pos:end="207:26">openssl_cert_error</name> <operator pos:start="207:28" pos:end="207:29">==</operator> <name pos:start="207:31" pos:end="207:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="207:61" pos:end="209:5">{<block_content pos:start="208:9" pos:end="208:20">
        <expr_stmt pos:start="208:9" pos:end="208:20"><expr pos:start="208:9" pos:end="208:19"><name pos:start="208:9" pos:end="208:15">approve</name> <operator pos:start="208:17" pos:end="208:17">=</operator> <literal type="number" pos:start="208:19" pos:end="208:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt pos:start="211:5" pos:end="211:22"><expr pos:start="211:5" pos:end="211:21"><call pos:start="211:5" pos:end="211:21"><name pos:start="211:5" pos:end="211:12">BIO_free</name><argument_list pos:start="211:13" pos:end="211:21">(<argument pos:start="211:14" pos:end="211:20"><expr pos:start="211:14" pos:end="211:20"><name pos:start="211:14" pos:end="211:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="213:5" pos:end="213:19">return <expr pos:start="213:12" pos:end="213:18"><name pos:start="213:12" pos:end="213:18">approve</name></expr>;</return>
</block_content>}</block></function>
    


<comment type="block" pos:start="218:1" pos:end="221:3">/*
 * This test case tests the set server with valid parameters,
 * NO path segment
 */</comment>
<function pos:start="222:1" pos:end="265:1"><type pos:start="222:1" pos:end="222:11"><specifier pos:start="222:1" pos:end="222:6">static</specifier> <name pos:start="222:8" pos:end="222:11">void</name></type> <name pos:start="222:13" pos:end="222:24">us3496_test1</name> <parameter_list pos:start="222:26" pos:end="222:31">(<parameter pos:start="222:27" pos:end="222:30"><decl pos:start="222:27" pos:end="222:30"><type pos:start="222:27" pos:end="222:30"><name pos:start="222:27" pos:end="222:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="223:1" pos:end="265:1">{<block_content pos:start="224:5" pos:end="264:5">
    <decl_stmt pos:start="224:5" pos:end="224:18"><decl pos:start="224:5" pos:end="224:17"><type pos:start="224:5" pos:end="224:13"><name pos:start="224:5" pos:end="224:11">EST_CTX</name> <modifier pos:start="224:13" pos:end="224:13">*</modifier></type><name pos:start="224:14" pos:end="224:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="225:5" pos:end="225:31"><decl pos:start="225:5" pos:end="225:30"><type pos:start="225:5" pos:end="225:19"><name pos:start="225:5" pos:end="225:12">unsigned</name> <name pos:start="225:14" pos:end="225:17">char</name> <modifier pos:start="225:19" pos:end="225:19">*</modifier></type><name pos:start="225:20" pos:end="225:23">pkey</name> <init pos:start="225:25" pos:end="225:30">= <expr pos:start="225:27" pos:end="225:30"><name pos:start="225:27" pos:end="225:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="226:5" pos:end="226:34"><decl pos:start="226:5" pos:end="226:33"><type pos:start="226:5" pos:end="226:19"><name pos:start="226:5" pos:end="226:12">unsigned</name> <name pos:start="226:14" pos:end="226:17">char</name> <modifier pos:start="226:19" pos:end="226:19">*</modifier></type><name pos:start="226:20" pos:end="226:26">cacerts</name> <init pos:start="226:28" pos:end="226:33">= <expr pos:start="226:30" pos:end="226:33"><name pos:start="226:30" pos:end="226:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="227:5" pos:end="227:24"><decl pos:start="227:5" pos:end="227:23"><type pos:start="227:5" pos:end="227:7"><name pos:start="227:5" pos:end="227:7">int</name></type> <name pos:start="227:9" pos:end="227:19">cacerts_len</name> <init pos:start="227:21" pos:end="227:23">= <expr pos:start="227:23" pos:end="227:23"><literal type="number" pos:start="227:23" pos:end="227:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="228:5" pos:end="228:32"><decl pos:start="228:5" pos:end="228:31"><type pos:start="228:5" pos:end="228:13"><name pos:start="228:5" pos:end="228:13">EST_ERROR</name></type> <name pos:start="228:15" pos:end="228:16">rc</name> <init pos:start="228:18" pos:end="228:31">= <expr pos:start="228:20" pos:end="228:31"><name pos:start="228:20" pos:end="228:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="229:5" pos:end="229:23"><decl pos:start="229:5" pos:end="229:22"><type pos:start="229:5" pos:end="229:14"><name pos:start="229:5" pos:end="229:12">EVP_PKEY</name> <modifier pos:start="229:14" pos:end="229:14">*</modifier></type><name pos:start="229:15" pos:end="229:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:13"><expr pos:start="231:5" pos:end="231:12"><call pos:start="231:5" pos:end="231:12"><name pos:start="231:5" pos:end="231:9">SLEEP</name><argument_list pos:start="231:10" pos:end="231:12">(<argument pos:start="231:11" pos:end="231:11"><expr pos:start="231:11" pos:end="231:11"><literal type="number" pos:start="231:11" pos:end="231:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="233:5" pos:end="235:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="236:5" pos:end="236:63"><expr pos:start="236:5" pos:end="236:62"><name pos:start="236:5" pos:end="236:15">cacerts_len</name> <operator pos:start="236:17" pos:end="236:17">=</operator> <call pos:start="236:19" pos:end="236:62"><name pos:start="236:19" pos:end="236:34">read_binary_file</name><argument_list pos:start="236:35" pos:end="236:62">(<argument pos:start="236:36" pos:end="236:51"><expr pos:start="236:36" pos:end="236:51"><name pos:start="236:36" pos:end="236:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="236:54" pos:end="236:61"><expr pos:start="236:54" pos:end="236:61"><operator pos:start="236:54" pos:end="236:54">&amp;</operator><name pos:start="236:55" pos:end="236:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="238:5" pos:end="240:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="241:5" pos:end="241:50"><expr pos:start="241:5" pos:end="241:49"><name pos:start="241:5" pos:end="241:12">priv_key</name> <operator pos:start="241:14" pos:end="241:14">=</operator> <call pos:start="241:16" pos:end="241:49"><name pos:start="241:16" pos:end="241:31">read_private_key</name><argument_list pos:start="241:32" pos:end="241:49">(<argument pos:start="241:33" pos:end="241:48"><expr pos:start="241:33" pos:end="241:48"><name pos:start="241:33" pos:end="241:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="242:5" pos:end="245:5"><if pos:start="242:5" pos:end="245:5">if <condition pos:start="242:8" pos:end="242:25">(<expr pos:start="242:9" pos:end="242:24"><name pos:start="242:9" pos:end="242:16">priv_key</name> <operator pos:start="242:18" pos:end="242:19">==</operator> <name pos:start="242:21" pos:end="242:24">NULL</name></expr>)</condition> <block pos:start="242:27" pos:end="245:5">{<block_content pos:start="243:9" pos:end="244:15">
	<expr_stmt pos:start="243:9" pos:end="243:80"><expr pos:start="243:9" pos:end="243:79"><call pos:start="243:9" pos:end="243:79"><name pos:start="243:9" pos:end="243:14">printf</name><argument_list pos:start="243:15" pos:end="243:79">(<argument pos:start="243:16" pos:end="243:60"><expr pos:start="243:16" pos:end="243:60"><literal type="string" pos:start="243:16" pos:end="243:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="243:63" pos:end="243:78"><expr pos:start="243:63" pos:end="243:78"><name pos:start="243:63" pos:end="243:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="244:9" pos:end="244:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="247:5" pos:end="248:54"><expr pos:start="247:5" pos:end="248:53"><name pos:start="247:5" pos:end="247:8">ectx</name> <operator pos:start="247:10" pos:end="247:10">=</operator> <call pos:start="247:12" pos:end="248:53"><name pos:start="247:12" pos:end="247:26">est_client_init</name><argument_list pos:start="247:27" pos:end="248:53">(<argument pos:start="247:28" pos:end="247:34"><expr pos:start="247:28" pos:end="247:34"><name pos:start="247:28" pos:end="247:34">cacerts</name></expr></argument>, <argument pos:start="247:37" pos:end="247:47"><expr pos:start="247:37" pos:end="247:47"><name pos:start="247:37" pos:end="247:47">cacerts_len</name></expr></argument>, <argument pos:start="247:50" pos:end="247:68"><expr pos:start="247:50" pos:end="247:68"><name pos:start="247:50" pos:end="247:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="248:28" pos:end="248:52"><expr pos:start="248:28" pos:end="248:52"><name pos:start="248:28" pos:end="248:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="250:5" pos:end="250:59"><expr pos:start="250:5" pos:end="250:58"><name pos:start="250:5" pos:end="250:6">rc</name> <operator pos:start="250:8" pos:end="250:8">=</operator> <call pos:start="250:10" pos:end="250:58"><name pos:start="250:10" pos:end="250:28">est_client_set_auth</name><argument_list pos:start="250:29" pos:end="250:58">(<argument pos:start="250:30" pos:end="250:33"><expr pos:start="250:30" pos:end="250:33"><name pos:start="250:30" pos:end="250:33">ectx</name></expr></argument>, <argument pos:start="250:36" pos:end="250:37"><expr pos:start="250:36" pos:end="250:37"><literal type="string" pos:start="250:36" pos:end="250:37">""</literal></expr></argument>, <argument pos:start="250:40" pos:end="250:41"><expr pos:start="250:40" pos:end="250:41"><literal type="string" pos:start="250:40" pos:end="250:41">""</literal></expr></argument>, <argument pos:start="250:44" pos:end="250:47"><expr pos:start="250:44" pos:end="250:47"><name pos:start="250:44" pos:end="250:47">NULL</name></expr></argument>, <argument pos:start="250:50" pos:end="250:57"><expr pos:start="250:50" pos:end="250:57"><name pos:start="250:50" pos:end="250:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="251:5" pos:end="251:34"><expr pos:start="251:5" pos:end="251:33"><call pos:start="251:5" pos:end="251:33"><name pos:start="251:5" pos:end="251:13">CU_ASSERT</name><argument_list pos:start="251:14" pos:end="251:33">(<argument pos:start="251:15" pos:end="251:32"><expr pos:start="251:15" pos:end="251:32"><name pos:start="251:15" pos:end="251:16">rc</name> <operator pos:start="251:18" pos:end="251:19">==</operator> <name pos:start="251:21" pos:end="251:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="253:5" pos:end="253:81"><expr pos:start="253:5" pos:end="253:80"><name pos:start="253:5" pos:end="253:6">rc</name> <operator pos:start="253:8" pos:end="253:8">=</operator> <call pos:start="253:10" pos:end="253:80"><name pos:start="253:10" pos:end="253:30">est_client_set_server</name><argument_list pos:start="253:31" pos:end="253:80">(<argument pos:start="253:32" pos:end="253:35"><expr pos:start="253:32" pos:end="253:35"><name pos:start="253:32" pos:end="253:35">ectx</name></expr></argument>, <argument pos:start="253:38" pos:end="253:53"><expr pos:start="253:38" pos:end="253:53"><name pos:start="253:38" pos:end="253:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="253:56" pos:end="253:73"><expr pos:start="253:56" pos:end="253:73"><name pos:start="253:56" pos:end="253:73">US3496_SERVER_PORT</name></expr></argument>, <argument pos:start="253:76" pos:end="253:79"><expr pos:start="253:76" pos:end="253:79"><name pos:start="253:76" pos:end="253:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="254:5" pos:end="254:34"><expr pos:start="254:5" pos:end="254:33"><call pos:start="254:5" pos:end="254:33"><name pos:start="254:5" pos:end="254:13">CU_ASSERT</name><argument_list pos:start="254:14" pos:end="254:33">(<argument pos:start="254:15" pos:end="254:32"><expr pos:start="254:15" pos:end="254:32"><name pos:start="254:15" pos:end="254:16">rc</name> <operator pos:start="254:18" pos:end="254:19">==</operator> <name pos:start="254:21" pos:end="254:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="256:5" pos:end="258:5"><if pos:start="256:5" pos:end="258:5">if <condition pos:start="256:8" pos:end="256:13">(<expr pos:start="256:9" pos:end="256:12"><name pos:start="256:9" pos:end="256:12">ectx</name></expr>)</condition> <block pos:start="256:15" pos:end="258:5">{<block_content pos:start="257:9" pos:end="257:26">
        <expr_stmt pos:start="257:9" pos:end="257:26"><expr pos:start="257:9" pos:end="257:25"><call pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:19">est_destroy</name><argument_list pos:start="257:20" pos:end="257:25">(<argument pos:start="257:21" pos:end="257:24"><expr pos:start="257:21" pos:end="257:24"><name pos:start="257:21" pos:end="257:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="259:5" pos:end="261:5"><if pos:start="259:5" pos:end="261:5">if <condition pos:start="259:8" pos:end="259:16">(<expr pos:start="259:9" pos:end="259:15"><name pos:start="259:9" pos:end="259:15">cacerts</name></expr>)</condition> <block pos:start="259:18" pos:end="261:5">{<block_content pos:start="260:9" pos:end="260:22">
        <expr_stmt pos:start="260:9" pos:end="260:22"><expr pos:start="260:9" pos:end="260:21"><call pos:start="260:9" pos:end="260:21"><name pos:start="260:9" pos:end="260:12">free</name><argument_list pos:start="260:13" pos:end="260:21">(<argument pos:start="260:14" pos:end="260:20"><expr pos:start="260:14" pos:end="260:20"><name pos:start="260:14" pos:end="260:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="262:5" pos:end="264:5"><if pos:start="262:5" pos:end="264:5">if <condition pos:start="262:8" pos:end="262:13">(<expr pos:start="262:9" pos:end="262:12"><name pos:start="262:9" pos:end="262:12">pkey</name></expr>)</condition> <block pos:start="262:15" pos:end="264:5">{<block_content pos:start="263:9" pos:end="263:19">
        <expr_stmt pos:start="263:9" pos:end="263:19"><expr pos:start="263:9" pos:end="263:18"><call pos:start="263:9" pos:end="263:18"><name pos:start="263:9" pos:end="263:12">free</name><argument_list pos:start="263:13" pos:end="263:18">(<argument pos:start="263:14" pos:end="263:17"><expr pos:start="263:14" pos:end="263:17"><name pos:start="263:14" pos:end="263:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="268:1" pos:end="270:3">/*
 * pass down path segment that is valid
 */</comment>
<function pos:start="271:1" pos:end="315:1"><type pos:start="271:1" pos:end="271:11"><specifier pos:start="271:1" pos:end="271:6">static</specifier> <name pos:start="271:8" pos:end="271:11">void</name></type> <name pos:start="271:13" pos:end="271:24">us3496_test2</name> <parameter_list pos:start="271:26" pos:end="271:31">(<parameter pos:start="271:27" pos:end="271:30"><decl pos:start="271:27" pos:end="271:30"><type pos:start="271:27" pos:end="271:30"><name pos:start="271:27" pos:end="271:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="272:1" pos:end="315:1">{<block_content pos:start="273:5" pos:end="314:5">
    <decl_stmt pos:start="273:5" pos:end="273:18"><decl pos:start="273:5" pos:end="273:17"><type pos:start="273:5" pos:end="273:13"><name pos:start="273:5" pos:end="273:11">EST_CTX</name> <modifier pos:start="273:13" pos:end="273:13">*</modifier></type><name pos:start="273:14" pos:end="273:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="274:5" pos:end="274:31"><decl pos:start="274:5" pos:end="274:30"><type pos:start="274:5" pos:end="274:19"><name pos:start="274:5" pos:end="274:12">unsigned</name> <name pos:start="274:14" pos:end="274:17">char</name> <modifier pos:start="274:19" pos:end="274:19">*</modifier></type><name pos:start="274:20" pos:end="274:23">pkey</name> <init pos:start="274:25" pos:end="274:30">= <expr pos:start="274:27" pos:end="274:30"><name pos:start="274:27" pos:end="274:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="275:5" pos:end="275:34"><decl pos:start="275:5" pos:end="275:33"><type pos:start="275:5" pos:end="275:19"><name pos:start="275:5" pos:end="275:12">unsigned</name> <name pos:start="275:14" pos:end="275:17">char</name> <modifier pos:start="275:19" pos:end="275:19">*</modifier></type><name pos:start="275:20" pos:end="275:26">cacerts</name> <init pos:start="275:28" pos:end="275:33">= <expr pos:start="275:30" pos:end="275:33"><name pos:start="275:30" pos:end="275:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="276:5" pos:end="276:24"><decl pos:start="276:5" pos:end="276:23"><type pos:start="276:5" pos:end="276:7"><name pos:start="276:5" pos:end="276:7">int</name></type> <name pos:start="276:9" pos:end="276:19">cacerts_len</name> <init pos:start="276:21" pos:end="276:23">= <expr pos:start="276:23" pos:end="276:23"><literal type="number" pos:start="276:23" pos:end="276:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="277:5" pos:end="277:32"><decl pos:start="277:5" pos:end="277:31"><type pos:start="277:5" pos:end="277:13"><name pos:start="277:5" pos:end="277:13">EST_ERROR</name></type> <name pos:start="277:15" pos:end="277:16">rc</name> <init pos:start="277:18" pos:end="277:31">= <expr pos:start="277:20" pos:end="277:31"><name pos:start="277:20" pos:end="277:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="278:5" pos:end="278:23"><decl pos:start="278:5" pos:end="278:22"><type pos:start="278:5" pos:end="278:14"><name pos:start="278:5" pos:end="278:12">EVP_PKEY</name> <modifier pos:start="278:14" pos:end="278:14">*</modifier></type><name pos:start="278:15" pos:end="278:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="280:5" pos:end="280:13"><expr pos:start="280:5" pos:end="280:12"><call pos:start="280:5" pos:end="280:12"><name pos:start="280:5" pos:end="280:9">SLEEP</name><argument_list pos:start="280:10" pos:end="280:12">(<argument pos:start="280:11" pos:end="280:11"><expr pos:start="280:11" pos:end="280:11"><literal type="number" pos:start="280:11" pos:end="280:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="282:5" pos:end="284:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="285:5" pos:end="285:63"><expr pos:start="285:5" pos:end="285:62"><name pos:start="285:5" pos:end="285:15">cacerts_len</name> <operator pos:start="285:17" pos:end="285:17">=</operator> <call pos:start="285:19" pos:end="285:62"><name pos:start="285:19" pos:end="285:34">read_binary_file</name><argument_list pos:start="285:35" pos:end="285:62">(<argument pos:start="285:36" pos:end="285:51"><expr pos:start="285:36" pos:end="285:51"><name pos:start="285:36" pos:end="285:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="285:54" pos:end="285:61"><expr pos:start="285:54" pos:end="285:61"><operator pos:start="285:54" pos:end="285:54">&amp;</operator><name pos:start="285:55" pos:end="285:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="287:5" pos:end="289:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="290:5" pos:end="290:50"><expr pos:start="290:5" pos:end="290:49"><name pos:start="290:5" pos:end="290:12">priv_key</name> <operator pos:start="290:14" pos:end="290:14">=</operator> <call pos:start="290:16" pos:end="290:49"><name pos:start="290:16" pos:end="290:31">read_private_key</name><argument_list pos:start="290:32" pos:end="290:49">(<argument pos:start="290:33" pos:end="290:48"><expr pos:start="290:33" pos:end="290:48"><name pos:start="290:33" pos:end="290:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="291:5" pos:end="294:5"><if pos:start="291:5" pos:end="294:5">if <condition pos:start="291:8" pos:end="291:25">(<expr pos:start="291:9" pos:end="291:24"><name pos:start="291:9" pos:end="291:16">priv_key</name> <operator pos:start="291:18" pos:end="291:19">==</operator> <name pos:start="291:21" pos:end="291:24">NULL</name></expr>)</condition> <block pos:start="291:27" pos:end="294:5">{<block_content pos:start="292:9" pos:end="293:15">
	<expr_stmt pos:start="292:9" pos:end="292:80"><expr pos:start="292:9" pos:end="292:79"><call pos:start="292:9" pos:end="292:79"><name pos:start="292:9" pos:end="292:14">printf</name><argument_list pos:start="292:15" pos:end="292:79">(<argument pos:start="292:16" pos:end="292:60"><expr pos:start="292:16" pos:end="292:60"><literal type="string" pos:start="292:16" pos:end="292:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="292:63" pos:end="292:78"><expr pos:start="292:63" pos:end="292:78"><name pos:start="292:63" pos:end="292:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="293:9" pos:end="293:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="296:5" pos:end="297:54"><expr pos:start="296:5" pos:end="297:53"><name pos:start="296:5" pos:end="296:8">ectx</name> <operator pos:start="296:10" pos:end="296:10">=</operator> <call pos:start="296:12" pos:end="297:53"><name pos:start="296:12" pos:end="296:26">est_client_init</name><argument_list pos:start="296:27" pos:end="297:53">(<argument pos:start="296:28" pos:end="296:34"><expr pos:start="296:28" pos:end="296:34"><name pos:start="296:28" pos:end="296:34">cacerts</name></expr></argument>, <argument pos:start="296:37" pos:end="296:47"><expr pos:start="296:37" pos:end="296:47"><name pos:start="296:37" pos:end="296:47">cacerts_len</name></expr></argument>, <argument pos:start="296:50" pos:end="296:68"><expr pos:start="296:50" pos:end="296:68"><name pos:start="296:50" pos:end="296:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="297:28" pos:end="297:52"><expr pos:start="297:28" pos:end="297:52"><name pos:start="297:28" pos:end="297:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:59"><expr pos:start="299:5" pos:end="299:58"><name pos:start="299:5" pos:end="299:6">rc</name> <operator pos:start="299:8" pos:end="299:8">=</operator> <call pos:start="299:10" pos:end="299:58"><name pos:start="299:10" pos:end="299:28">est_client_set_auth</name><argument_list pos:start="299:29" pos:end="299:58">(<argument pos:start="299:30" pos:end="299:33"><expr pos:start="299:30" pos:end="299:33"><name pos:start="299:30" pos:end="299:33">ectx</name></expr></argument>, <argument pos:start="299:36" pos:end="299:37"><expr pos:start="299:36" pos:end="299:37"><literal type="string" pos:start="299:36" pos:end="299:37">""</literal></expr></argument>, <argument pos:start="299:40" pos:end="299:41"><expr pos:start="299:40" pos:end="299:41"><literal type="string" pos:start="299:40" pos:end="299:41">""</literal></expr></argument>, <argument pos:start="299:44" pos:end="299:47"><expr pos:start="299:44" pos:end="299:47"><name pos:start="299:44" pos:end="299:47">NULL</name></expr></argument>, <argument pos:start="299:50" pos:end="299:57"><expr pos:start="299:50" pos:end="299:57"><name pos:start="299:50" pos:end="299:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="300:5" pos:end="300:34"><expr pos:start="300:5" pos:end="300:33"><call pos:start="300:5" pos:end="300:33"><name pos:start="300:5" pos:end="300:13">CU_ASSERT</name><argument_list pos:start="300:14" pos:end="300:33">(<argument pos:start="300:15" pos:end="300:32"><expr pos:start="300:15" pos:end="300:32"><name pos:start="300:15" pos:end="300:16">rc</name> <operator pos:start="300:18" pos:end="300:19">==</operator> <name pos:start="300:21" pos:end="300:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="302:5" pos:end="303:45"><expr pos:start="302:5" pos:end="303:44"><name pos:start="302:5" pos:end="302:6">rc</name> <operator pos:start="302:8" pos:end="302:8">=</operator> <call pos:start="302:10" pos:end="303:44"><name pos:start="302:10" pos:end="302:30">est_client_set_server</name><argument_list pos:start="302:31" pos:end="303:44">(<argument pos:start="302:32" pos:end="302:35"><expr pos:start="302:32" pos:end="302:35"><name pos:start="302:32" pos:end="302:35">ectx</name></expr></argument>, <argument pos:start="302:38" pos:end="302:53"><expr pos:start="302:38" pos:end="302:53"><name pos:start="302:38" pos:end="302:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="302:56" pos:end="302:73"><expr pos:start="302:56" pos:end="302:73"><name pos:start="302:56" pos:end="302:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="303:32" pos:end="303:43"><expr pos:start="303:32" pos:end="303:43"><literal type="string" pos:start="303:32" pos:end="303:43">"somestring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="304:5" pos:end="304:34"><expr pos:start="304:5" pos:end="304:33"><call pos:start="304:5" pos:end="304:33"><name pos:start="304:5" pos:end="304:13">CU_ASSERT</name><argument_list pos:start="304:14" pos:end="304:33">(<argument pos:start="304:15" pos:end="304:32"><expr pos:start="304:15" pos:end="304:32"><name pos:start="304:15" pos:end="304:16">rc</name> <operator pos:start="304:18" pos:end="304:19">==</operator> <name pos:start="304:21" pos:end="304:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="306:5" pos:end="308:5"><if pos:start="306:5" pos:end="308:5">if <condition pos:start="306:8" pos:end="306:13">(<expr pos:start="306:9" pos:end="306:12"><name pos:start="306:9" pos:end="306:12">ectx</name></expr>)</condition> <block pos:start="306:15" pos:end="308:5">{<block_content pos:start="307:9" pos:end="307:26">
        <expr_stmt pos:start="307:9" pos:end="307:26"><expr pos:start="307:9" pos:end="307:25"><call pos:start="307:9" pos:end="307:25"><name pos:start="307:9" pos:end="307:19">est_destroy</name><argument_list pos:start="307:20" pos:end="307:25">(<argument pos:start="307:21" pos:end="307:24"><expr pos:start="307:21" pos:end="307:24"><name pos:start="307:21" pos:end="307:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="309:5" pos:end="311:5"><if pos:start="309:5" pos:end="311:5">if <condition pos:start="309:8" pos:end="309:16">(<expr pos:start="309:9" pos:end="309:15"><name pos:start="309:9" pos:end="309:15">cacerts</name></expr>)</condition> <block pos:start="309:18" pos:end="311:5">{<block_content pos:start="310:9" pos:end="310:22">
        <expr_stmt pos:start="310:9" pos:end="310:22"><expr pos:start="310:9" pos:end="310:21"><call pos:start="310:9" pos:end="310:21"><name pos:start="310:9" pos:end="310:12">free</name><argument_list pos:start="310:13" pos:end="310:21">(<argument pos:start="310:14" pos:end="310:20"><expr pos:start="310:14" pos:end="310:20"><name pos:start="310:14" pos:end="310:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="312:5" pos:end="314:5"><if pos:start="312:5" pos:end="314:5">if <condition pos:start="312:8" pos:end="312:13">(<expr pos:start="312:9" pos:end="312:12"><name pos:start="312:9" pos:end="312:12">pkey</name></expr>)</condition> <block pos:start="312:15" pos:end="314:5">{<block_content pos:start="313:9" pos:end="313:19">
        <expr_stmt pos:start="313:9" pos:end="313:19"><expr pos:start="313:9" pos:end="313:18"><call pos:start="313:9" pos:end="313:18"><name pos:start="313:9" pos:end="313:12">free</name><argument_list pos:start="313:13" pos:end="313:18">(<argument pos:start="313:14" pos:end="313:17"><expr pos:start="313:14" pos:end="313:17"><name pos:start="313:14" pos:end="313:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="318:1" pos:end="320:3">/*
 * pass down path segment that contains 2 segments, should fail
 */</comment>
<function pos:start="321:1" pos:end="373:0"><type pos:start="321:1" pos:end="321:11"><specifier pos:start="321:1" pos:end="321:6">static</specifier> <name pos:start="321:8" pos:end="321:11">void</name></type> <name pos:start="321:13" pos:end="321:24">us3496_test3</name> <parameter_list pos:start="321:26" pos:end="321:31">(<parameter pos:start="321:27" pos:end="321:30"><decl pos:start="321:27" pos:end="321:30"><type pos:start="321:27" pos:end="321:30"><name pos:start="321:27" pos:end="321:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="322:1" pos:end="373:0">{<block_content pos:start="323:5" pos:end="365:5">
    <decl_stmt pos:start="323:5" pos:end="323:18"><decl pos:start="323:5" pos:end="323:17"><type pos:start="323:5" pos:end="323:13"><name pos:start="323:5" pos:end="323:11">EST_CTX</name> <modifier pos:start="323:13" pos:end="323:13">*</modifier></type><name pos:start="323:14" pos:end="323:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="324:5" pos:end="324:31"><decl pos:start="324:5" pos:end="324:30"><type pos:start="324:5" pos:end="324:19"><name pos:start="324:5" pos:end="324:12">unsigned</name> <name pos:start="324:14" pos:end="324:17">char</name> <modifier pos:start="324:19" pos:end="324:19">*</modifier></type><name pos:start="324:20" pos:end="324:23">pkey</name> <init pos:start="324:25" pos:end="324:30">= <expr pos:start="324:27" pos:end="324:30"><name pos:start="324:27" pos:end="324:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="325:5" pos:end="325:34"><decl pos:start="325:5" pos:end="325:33"><type pos:start="325:5" pos:end="325:19"><name pos:start="325:5" pos:end="325:12">unsigned</name> <name pos:start="325:14" pos:end="325:17">char</name> <modifier pos:start="325:19" pos:end="325:19">*</modifier></type><name pos:start="325:20" pos:end="325:26">cacerts</name> <init pos:start="325:28" pos:end="325:33">= <expr pos:start="325:30" pos:end="325:33"><name pos:start="325:30" pos:end="325:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="326:5" pos:end="326:24"><decl pos:start="326:5" pos:end="326:23"><type pos:start="326:5" pos:end="326:7"><name pos:start="326:5" pos:end="326:7">int</name></type> <name pos:start="326:9" pos:end="326:19">cacerts_len</name> <init pos:start="326:21" pos:end="326:23">= <expr pos:start="326:23" pos:end="326:23"><literal type="number" pos:start="326:23" pos:end="326:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="327:5" pos:end="327:32"><decl pos:start="327:5" pos:end="327:31"><type pos:start="327:5" pos:end="327:13"><name pos:start="327:5" pos:end="327:13">EST_ERROR</name></type> <name pos:start="327:15" pos:end="327:16">rc</name> <init pos:start="327:18" pos:end="327:31">= <expr pos:start="327:20" pos:end="327:31"><name pos:start="327:20" pos:end="327:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="328:5" pos:end="328:23"><decl pos:start="328:5" pos:end="328:22"><type pos:start="328:5" pos:end="328:14"><name pos:start="328:5" pos:end="328:12">EVP_PKEY</name> <modifier pos:start="328:14" pos:end="328:14">*</modifier></type><name pos:start="328:15" pos:end="328:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="330:5" pos:end="330:13"><expr pos:start="330:5" pos:end="330:12"><call pos:start="330:5" pos:end="330:12"><name pos:start="330:5" pos:end="330:9">SLEEP</name><argument_list pos:start="330:10" pos:end="330:12">(<argument pos:start="330:11" pos:end="330:11"><expr pos:start="330:11" pos:end="330:11"><literal type="number" pos:start="330:11" pos:end="330:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="332:5" pos:end="334:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="335:5" pos:end="335:63"><expr pos:start="335:5" pos:end="335:62"><name pos:start="335:5" pos:end="335:15">cacerts_len</name> <operator pos:start="335:17" pos:end="335:17">=</operator> <call pos:start="335:19" pos:end="335:62"><name pos:start="335:19" pos:end="335:34">read_binary_file</name><argument_list pos:start="335:35" pos:end="335:62">(<argument pos:start="335:36" pos:end="335:51"><expr pos:start="335:36" pos:end="335:51"><name pos:start="335:36" pos:end="335:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="335:54" pos:end="335:61"><expr pos:start="335:54" pos:end="335:61"><operator pos:start="335:54" pos:end="335:54">&amp;</operator><name pos:start="335:55" pos:end="335:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="337:5" pos:end="339:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="340:5" pos:end="340:50"><expr pos:start="340:5" pos:end="340:49"><name pos:start="340:5" pos:end="340:12">priv_key</name> <operator pos:start="340:14" pos:end="340:14">=</operator> <call pos:start="340:16" pos:end="340:49"><name pos:start="340:16" pos:end="340:31">read_private_key</name><argument_list pos:start="340:32" pos:end="340:49">(<argument pos:start="340:33" pos:end="340:48"><expr pos:start="340:33" pos:end="340:48"><name pos:start="340:33" pos:end="340:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="341:5" pos:end="344:5"><if pos:start="341:5" pos:end="344:5">if <condition pos:start="341:8" pos:end="341:25">(<expr pos:start="341:9" pos:end="341:24"><name pos:start="341:9" pos:end="341:16">priv_key</name> <operator pos:start="341:18" pos:end="341:19">==</operator> <name pos:start="341:21" pos:end="341:24">NULL</name></expr>)</condition> <block pos:start="341:27" pos:end="344:5">{<block_content pos:start="342:9" pos:end="343:15">
	<expr_stmt pos:start="342:9" pos:end="342:80"><expr pos:start="342:9" pos:end="342:79"><call pos:start="342:9" pos:end="342:79"><name pos:start="342:9" pos:end="342:14">printf</name><argument_list pos:start="342:15" pos:end="342:79">(<argument pos:start="342:16" pos:end="342:60"><expr pos:start="342:16" pos:end="342:60"><literal type="string" pos:start="342:16" pos:end="342:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="342:63" pos:end="342:78"><expr pos:start="342:63" pos:end="342:78"><name pos:start="342:63" pos:end="342:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="343:9" pos:end="343:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="346:5" pos:end="347:54"><expr pos:start="346:5" pos:end="347:53"><name pos:start="346:5" pos:end="346:8">ectx</name> <operator pos:start="346:10" pos:end="346:10">=</operator> <call pos:start="346:12" pos:end="347:53"><name pos:start="346:12" pos:end="346:26">est_client_init</name><argument_list pos:start="346:27" pos:end="347:53">(<argument pos:start="346:28" pos:end="346:34"><expr pos:start="346:28" pos:end="346:34"><name pos:start="346:28" pos:end="346:34">cacerts</name></expr></argument>, <argument pos:start="346:37" pos:end="346:47"><expr pos:start="346:37" pos:end="346:47"><name pos:start="346:37" pos:end="346:47">cacerts_len</name></expr></argument>, <argument pos:start="346:50" pos:end="346:68"><expr pos:start="346:50" pos:end="346:68"><name pos:start="346:50" pos:end="346:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="347:28" pos:end="347:52"><expr pos:start="347:28" pos:end="347:52"><name pos:start="347:28" pos:end="347:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:59"><expr pos:start="349:5" pos:end="349:58"><name pos:start="349:5" pos:end="349:6">rc</name> <operator pos:start="349:8" pos:end="349:8">=</operator> <call pos:start="349:10" pos:end="349:58"><name pos:start="349:10" pos:end="349:28">est_client_set_auth</name><argument_list pos:start="349:29" pos:end="349:58">(<argument pos:start="349:30" pos:end="349:33"><expr pos:start="349:30" pos:end="349:33"><name pos:start="349:30" pos:end="349:33">ectx</name></expr></argument>, <argument pos:start="349:36" pos:end="349:37"><expr pos:start="349:36" pos:end="349:37"><literal type="string" pos:start="349:36" pos:end="349:37">""</literal></expr></argument>, <argument pos:start="349:40" pos:end="349:41"><expr pos:start="349:40" pos:end="349:41"><literal type="string" pos:start="349:40" pos:end="349:41">""</literal></expr></argument>, <argument pos:start="349:44" pos:end="349:47"><expr pos:start="349:44" pos:end="349:47"><name pos:start="349:44" pos:end="349:47">NULL</name></expr></argument>, <argument pos:start="349:50" pos:end="349:57"><expr pos:start="349:50" pos:end="349:57"><name pos:start="349:50" pos:end="349:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="350:5" pos:end="350:34"><expr pos:start="350:5" pos:end="350:33"><call pos:start="350:5" pos:end="350:33"><name pos:start="350:5" pos:end="350:13">CU_ASSERT</name><argument_list pos:start="350:14" pos:end="350:33">(<argument pos:start="350:15" pos:end="350:32"><expr pos:start="350:15" pos:end="350:32"><name pos:start="350:15" pos:end="350:16">rc</name> <operator pos:start="350:18" pos:end="350:19">==</operator> <name pos:start="350:21" pos:end="350:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="352:5" pos:end="353:58"><expr pos:start="352:5" pos:end="353:57"><name pos:start="352:5" pos:end="352:6">rc</name> <operator pos:start="352:8" pos:end="352:8">=</operator> <call pos:start="352:10" pos:end="353:57"><name pos:start="352:10" pos:end="352:30">est_client_set_server</name><argument_list pos:start="352:31" pos:end="353:57">(<argument pos:start="352:32" pos:end="352:35"><expr pos:start="352:32" pos:end="352:35"><name pos:start="352:32" pos:end="352:35">ectx</name></expr></argument>, <argument pos:start="352:38" pos:end="352:53"><expr pos:start="352:38" pos:end="352:53"><name pos:start="352:38" pos:end="352:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="352:56" pos:end="352:73"><expr pos:start="352:56" pos:end="352:73"><name pos:start="352:56" pos:end="352:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="353:32" pos:end="353:56"><expr pos:start="353:32" pos:end="353:56"><literal type="string" pos:start="353:32" pos:end="353:56">"somestring1/somestring2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:55"><expr pos:start="355:5" pos:end="355:54"><call pos:start="355:5" pos:end="355:54"><name pos:start="355:5" pos:end="355:13">CU_ASSERT</name><argument_list pos:start="355:14" pos:end="355:54">(<argument pos:start="355:15" pos:end="355:53"><expr pos:start="355:15" pos:end="355:53"><name pos:start="355:15" pos:end="355:16">rc</name> <operator pos:start="355:18" pos:end="355:19">==</operator> <name pos:start="355:21" pos:end="355:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="357:5" pos:end="359:5"><if pos:start="357:5" pos:end="359:5">if <condition pos:start="357:8" pos:end="357:13">(<expr pos:start="357:9" pos:end="357:12"><name pos:start="357:9" pos:end="357:12">ectx</name></expr>)</condition> <block pos:start="357:15" pos:end="359:5">{<block_content pos:start="358:9" pos:end="358:26">
        <expr_stmt pos:start="358:9" pos:end="358:26"><expr pos:start="358:9" pos:end="358:25"><call pos:start="358:9" pos:end="358:25"><name pos:start="358:9" pos:end="358:19">est_destroy</name><argument_list pos:start="358:20" pos:end="358:25">(<argument pos:start="358:21" pos:end="358:24"><expr pos:start="358:21" pos:end="358:24"><name pos:start="358:21" pos:end="358:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="360:5" pos:end="362:5"><if pos:start="360:5" pos:end="362:5">if <condition pos:start="360:8" pos:end="360:16">(<expr pos:start="360:9" pos:end="360:15"><name pos:start="360:9" pos:end="360:15">cacerts</name></expr>)</condition> <block pos:start="360:18" pos:end="362:5">{<block_content pos:start="361:9" pos:end="361:22">
        <expr_stmt pos:start="361:9" pos:end="361:22"><expr pos:start="361:9" pos:end="361:21"><call pos:start="361:9" pos:end="361:21"><name pos:start="361:9" pos:end="361:12">free</name><argument_list pos:start="361:13" pos:end="361:21">(<argument pos:start="361:14" pos:end="361:20"><expr pos:start="361:14" pos:end="361:20"><name pos:start="361:14" pos:end="361:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="363:5" pos:end="365:5"><if pos:start="363:5" pos:end="365:5">if <condition pos:start="363:8" pos:end="363:13">(<expr pos:start="363:9" pos:end="363:12"><name pos:start="363:9" pos:end="363:12">pkey</name></expr>)</condition> <block pos:start="363:15" pos:end="365:5">{<block_content pos:start="364:9" pos:end="364:19">
        <expr_stmt pos:start="364:9" pos:end="364:19"><expr pos:start="364:9" pos:end="364:18"><call pos:start="364:9" pos:end="364:18"><name pos:start="364:9" pos:end="364:12">free</name><argument_list pos:start="364:13" pos:end="364:18">(<argument pos:start="364:14" pos:end="364:17"><expr pos:start="364:14" pos:end="364:17"><name pos:start="364:14" pos:end="364:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="369:1" pos:end="371:3">/*
 * all valid characters
 */</comment>
<cpp:define pos:start="372:1" pos:end="372:122">#<cpp:directive pos:start="372:2" pos:end="372:7">define</cpp:directive> <cpp:macro pos:start="372:9" pos:end="372:32"><name pos:start="372:9" pos:end="372:32">PATH_SEG_ALL_VALID_CHARS</name></cpp:macro> <cpp:value pos:start="372:34" pos:end="372:122">"@%50%44%42ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890-._~!$&amp;'()*+,;="</cpp:value></cpp:define>
<function pos:start="373:1" pos:end="417:1"><type pos:start="373:1" pos:end="373:11"><specifier pos:start="373:1" pos:end="373:6">static</specifier> <name pos:start="373:8" pos:end="373:11">void</name></type> <name pos:start="373:13" pos:end="373:24">us3496_test4</name> <parameter_list pos:start="373:26" pos:end="373:31">(<parameter pos:start="373:27" pos:end="373:30"><decl pos:start="373:27" pos:end="373:30"><type pos:start="373:27" pos:end="373:30"><name pos:start="373:27" pos:end="373:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="374:1" pos:end="417:1">{<block_content pos:start="375:5" pos:end="416:5">
    <decl_stmt pos:start="375:5" pos:end="375:18"><decl pos:start="375:5" pos:end="375:17"><type pos:start="375:5" pos:end="375:13"><name pos:start="375:5" pos:end="375:11">EST_CTX</name> <modifier pos:start="375:13" pos:end="375:13">*</modifier></type><name pos:start="375:14" pos:end="375:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="376:5" pos:end="376:31"><decl pos:start="376:5" pos:end="376:30"><type pos:start="376:5" pos:end="376:19"><name pos:start="376:5" pos:end="376:12">unsigned</name> <name pos:start="376:14" pos:end="376:17">char</name> <modifier pos:start="376:19" pos:end="376:19">*</modifier></type><name pos:start="376:20" pos:end="376:23">pkey</name> <init pos:start="376:25" pos:end="376:30">= <expr pos:start="376:27" pos:end="376:30"><name pos:start="376:27" pos:end="376:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="377:5" pos:end="377:34"><decl pos:start="377:5" pos:end="377:33"><type pos:start="377:5" pos:end="377:19"><name pos:start="377:5" pos:end="377:12">unsigned</name> <name pos:start="377:14" pos:end="377:17">char</name> <modifier pos:start="377:19" pos:end="377:19">*</modifier></type><name pos:start="377:20" pos:end="377:26">cacerts</name> <init pos:start="377:28" pos:end="377:33">= <expr pos:start="377:30" pos:end="377:33"><name pos:start="377:30" pos:end="377:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="378:5" pos:end="378:24"><decl pos:start="378:5" pos:end="378:23"><type pos:start="378:5" pos:end="378:7"><name pos:start="378:5" pos:end="378:7">int</name></type> <name pos:start="378:9" pos:end="378:19">cacerts_len</name> <init pos:start="378:21" pos:end="378:23">= <expr pos:start="378:23" pos:end="378:23"><literal type="number" pos:start="378:23" pos:end="378:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="379:5" pos:end="379:32"><decl pos:start="379:5" pos:end="379:31"><type pos:start="379:5" pos:end="379:13"><name pos:start="379:5" pos:end="379:13">EST_ERROR</name></type> <name pos:start="379:15" pos:end="379:16">rc</name> <init pos:start="379:18" pos:end="379:31">= <expr pos:start="379:20" pos:end="379:31"><name pos:start="379:20" pos:end="379:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="380:5" pos:end="380:23"><decl pos:start="380:5" pos:end="380:22"><type pos:start="380:5" pos:end="380:14"><name pos:start="380:5" pos:end="380:12">EVP_PKEY</name> <modifier pos:start="380:14" pos:end="380:14">*</modifier></type><name pos:start="380:15" pos:end="380:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="382:5" pos:end="382:13"><expr pos:start="382:5" pos:end="382:12"><call pos:start="382:5" pos:end="382:12"><name pos:start="382:5" pos:end="382:9">SLEEP</name><argument_list pos:start="382:10" pos:end="382:12">(<argument pos:start="382:11" pos:end="382:11"><expr pos:start="382:11" pos:end="382:11"><literal type="number" pos:start="382:11" pos:end="382:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="384:5" pos:end="386:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="387:5" pos:end="387:63"><expr pos:start="387:5" pos:end="387:62"><name pos:start="387:5" pos:end="387:15">cacerts_len</name> <operator pos:start="387:17" pos:end="387:17">=</operator> <call pos:start="387:19" pos:end="387:62"><name pos:start="387:19" pos:end="387:34">read_binary_file</name><argument_list pos:start="387:35" pos:end="387:62">(<argument pos:start="387:36" pos:end="387:51"><expr pos:start="387:36" pos:end="387:51"><name pos:start="387:36" pos:end="387:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="387:54" pos:end="387:61"><expr pos:start="387:54" pos:end="387:61"><operator pos:start="387:54" pos:end="387:54">&amp;</operator><name pos:start="387:55" pos:end="387:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="389:5" pos:end="391:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="392:5" pos:end="392:50"><expr pos:start="392:5" pos:end="392:49"><name pos:start="392:5" pos:end="392:12">priv_key</name> <operator pos:start="392:14" pos:end="392:14">=</operator> <call pos:start="392:16" pos:end="392:49"><name pos:start="392:16" pos:end="392:31">read_private_key</name><argument_list pos:start="392:32" pos:end="392:49">(<argument pos:start="392:33" pos:end="392:48"><expr pos:start="392:33" pos:end="392:48"><name pos:start="392:33" pos:end="392:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="393:5" pos:end="396:5"><if pos:start="393:5" pos:end="396:5">if <condition pos:start="393:8" pos:end="393:25">(<expr pos:start="393:9" pos:end="393:24"><name pos:start="393:9" pos:end="393:16">priv_key</name> <operator pos:start="393:18" pos:end="393:19">==</operator> <name pos:start="393:21" pos:end="393:24">NULL</name></expr>)</condition> <block pos:start="393:27" pos:end="396:5">{<block_content pos:start="394:9" pos:end="395:15">
	<expr_stmt pos:start="394:9" pos:end="394:80"><expr pos:start="394:9" pos:end="394:79"><call pos:start="394:9" pos:end="394:79"><name pos:start="394:9" pos:end="394:14">printf</name><argument_list pos:start="394:15" pos:end="394:79">(<argument pos:start="394:16" pos:end="394:60"><expr pos:start="394:16" pos:end="394:60"><literal type="string" pos:start="394:16" pos:end="394:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="394:63" pos:end="394:78"><expr pos:start="394:63" pos:end="394:78"><name pos:start="394:63" pos:end="394:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="395:9" pos:end="395:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="398:5" pos:end="399:54"><expr pos:start="398:5" pos:end="399:53"><name pos:start="398:5" pos:end="398:8">ectx</name> <operator pos:start="398:10" pos:end="398:10">=</operator> <call pos:start="398:12" pos:end="399:53"><name pos:start="398:12" pos:end="398:26">est_client_init</name><argument_list pos:start="398:27" pos:end="399:53">(<argument pos:start="398:28" pos:end="398:34"><expr pos:start="398:28" pos:end="398:34"><name pos:start="398:28" pos:end="398:34">cacerts</name></expr></argument>, <argument pos:start="398:37" pos:end="398:47"><expr pos:start="398:37" pos:end="398:47"><name pos:start="398:37" pos:end="398:47">cacerts_len</name></expr></argument>, <argument pos:start="398:50" pos:end="398:68"><expr pos:start="398:50" pos:end="398:68"><name pos:start="398:50" pos:end="398:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="399:28" pos:end="399:52"><expr pos:start="399:28" pos:end="399:52"><name pos:start="399:28" pos:end="399:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:59"><expr pos:start="401:5" pos:end="401:58"><name pos:start="401:5" pos:end="401:6">rc</name> <operator pos:start="401:8" pos:end="401:8">=</operator> <call pos:start="401:10" pos:end="401:58"><name pos:start="401:10" pos:end="401:28">est_client_set_auth</name><argument_list pos:start="401:29" pos:end="401:58">(<argument pos:start="401:30" pos:end="401:33"><expr pos:start="401:30" pos:end="401:33"><name pos:start="401:30" pos:end="401:33">ectx</name></expr></argument>, <argument pos:start="401:36" pos:end="401:37"><expr pos:start="401:36" pos:end="401:37"><literal type="string" pos:start="401:36" pos:end="401:37">""</literal></expr></argument>, <argument pos:start="401:40" pos:end="401:41"><expr pos:start="401:40" pos:end="401:41"><literal type="string" pos:start="401:40" pos:end="401:41">""</literal></expr></argument>, <argument pos:start="401:44" pos:end="401:47"><expr pos:start="401:44" pos:end="401:47"><name pos:start="401:44" pos:end="401:47">NULL</name></expr></argument>, <argument pos:start="401:50" pos:end="401:57"><expr pos:start="401:50" pos:end="401:57"><name pos:start="401:50" pos:end="401:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="402:5" pos:end="402:34"><expr pos:start="402:5" pos:end="402:33"><call pos:start="402:5" pos:end="402:33"><name pos:start="402:5" pos:end="402:13">CU_ASSERT</name><argument_list pos:start="402:14" pos:end="402:33">(<argument pos:start="402:15" pos:end="402:32"><expr pos:start="402:15" pos:end="402:32"><name pos:start="402:15" pos:end="402:16">rc</name> <operator pos:start="402:18" pos:end="402:19">==</operator> <name pos:start="402:21" pos:end="402:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="404:5" pos:end="405:55"><expr pos:start="404:5" pos:end="405:54"><name pos:start="404:5" pos:end="404:6">rc</name> <operator pos:start="404:8" pos:end="404:8">=</operator> <call pos:start="404:10" pos:end="405:54"><name pos:start="404:10" pos:end="404:30">est_client_set_server</name><argument_list pos:start="404:31" pos:end="405:54">(<argument pos:start="404:32" pos:end="404:35"><expr pos:start="404:32" pos:end="404:35"><name pos:start="404:32" pos:end="404:35">ectx</name></expr></argument>, <argument pos:start="404:38" pos:end="404:53"><expr pos:start="404:38" pos:end="404:53"><name pos:start="404:38" pos:end="404:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="404:56" pos:end="404:73"><expr pos:start="404:56" pos:end="404:73"><name pos:start="404:56" pos:end="404:73">US3496_SERVER_PORT</name></expr></argument>,
                             <argument pos:start="405:30" pos:end="405:53"><expr pos:start="405:30" pos:end="405:53"><name pos:start="405:30" pos:end="405:53">PATH_SEG_ALL_VALID_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="406:5" pos:end="406:34"><expr pos:start="406:5" pos:end="406:33"><call pos:start="406:5" pos:end="406:33"><name pos:start="406:5" pos:end="406:13">CU_ASSERT</name><argument_list pos:start="406:14" pos:end="406:33">(<argument pos:start="406:15" pos:end="406:32"><expr pos:start="406:15" pos:end="406:32"><name pos:start="406:15" pos:end="406:16">rc</name> <operator pos:start="406:18" pos:end="406:19">==</operator> <name pos:start="406:21" pos:end="406:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="408:5" pos:end="410:5"><if pos:start="408:5" pos:end="410:5">if <condition pos:start="408:8" pos:end="408:13">(<expr pos:start="408:9" pos:end="408:12"><name pos:start="408:9" pos:end="408:12">ectx</name></expr>)</condition> <block pos:start="408:15" pos:end="410:5">{<block_content pos:start="409:9" pos:end="409:26">
        <expr_stmt pos:start="409:9" pos:end="409:26"><expr pos:start="409:9" pos:end="409:25"><call pos:start="409:9" pos:end="409:25"><name pos:start="409:9" pos:end="409:19">est_destroy</name><argument_list pos:start="409:20" pos:end="409:25">(<argument pos:start="409:21" pos:end="409:24"><expr pos:start="409:21" pos:end="409:24"><name pos:start="409:21" pos:end="409:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="411:5" pos:end="413:5"><if pos:start="411:5" pos:end="413:5">if <condition pos:start="411:8" pos:end="411:16">(<expr pos:start="411:9" pos:end="411:15"><name pos:start="411:9" pos:end="411:15">cacerts</name></expr>)</condition> <block pos:start="411:18" pos:end="413:5">{<block_content pos:start="412:9" pos:end="412:22">
        <expr_stmt pos:start="412:9" pos:end="412:22"><expr pos:start="412:9" pos:end="412:21"><call pos:start="412:9" pos:end="412:21"><name pos:start="412:9" pos:end="412:12">free</name><argument_list pos:start="412:13" pos:end="412:21">(<argument pos:start="412:14" pos:end="412:20"><expr pos:start="412:14" pos:end="412:20"><name pos:start="412:14" pos:end="412:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="414:5" pos:end="416:5"><if pos:start="414:5" pos:end="416:5">if <condition pos:start="414:8" pos:end="414:13">(<expr pos:start="414:9" pos:end="414:12"><name pos:start="414:9" pos:end="414:12">pkey</name></expr>)</condition> <block pos:start="414:15" pos:end="416:5">{<block_content pos:start="415:9" pos:end="415:19">
        <expr_stmt pos:start="415:9" pos:end="415:19"><expr pos:start="415:9" pos:end="415:18"><call pos:start="415:9" pos:end="415:18"><name pos:start="415:9" pos:end="415:12">free</name><argument_list pos:start="415:13" pos:end="415:18">(<argument pos:start="415:14" pos:end="415:17"><expr pos:start="415:14" pos:end="415:17"><name pos:start="415:14" pos:end="415:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="420:1" pos:end="422:3">/*
 * pass down path segment that is invalid. invalid character.
 */</comment>
<function pos:start="423:1" pos:end="474:0"><type pos:start="423:1" pos:end="423:11"><specifier pos:start="423:1" pos:end="423:6">static</specifier> <name pos:start="423:8" pos:end="423:11">void</name></type> <name pos:start="423:13" pos:end="423:24">us3496_test5</name> <parameter_list pos:start="423:26" pos:end="423:31">(<parameter pos:start="423:27" pos:end="423:30"><decl pos:start="423:27" pos:end="423:30"><type pos:start="423:27" pos:end="423:30"><name pos:start="423:27" pos:end="423:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="424:1" pos:end="474:0">{<block_content pos:start="425:5" pos:end="466:5">
    <decl_stmt pos:start="425:5" pos:end="425:18"><decl pos:start="425:5" pos:end="425:17"><type pos:start="425:5" pos:end="425:13"><name pos:start="425:5" pos:end="425:11">EST_CTX</name> <modifier pos:start="425:13" pos:end="425:13">*</modifier></type><name pos:start="425:14" pos:end="425:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="426:5" pos:end="426:31"><decl pos:start="426:5" pos:end="426:30"><type pos:start="426:5" pos:end="426:19"><name pos:start="426:5" pos:end="426:12">unsigned</name> <name pos:start="426:14" pos:end="426:17">char</name> <modifier pos:start="426:19" pos:end="426:19">*</modifier></type><name pos:start="426:20" pos:end="426:23">pkey</name> <init pos:start="426:25" pos:end="426:30">= <expr pos:start="426:27" pos:end="426:30"><name pos:start="426:27" pos:end="426:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="427:5" pos:end="427:34"><decl pos:start="427:5" pos:end="427:33"><type pos:start="427:5" pos:end="427:19"><name pos:start="427:5" pos:end="427:12">unsigned</name> <name pos:start="427:14" pos:end="427:17">char</name> <modifier pos:start="427:19" pos:end="427:19">*</modifier></type><name pos:start="427:20" pos:end="427:26">cacerts</name> <init pos:start="427:28" pos:end="427:33">= <expr pos:start="427:30" pos:end="427:33"><name pos:start="427:30" pos:end="427:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="428:5" pos:end="428:24"><decl pos:start="428:5" pos:end="428:23"><type pos:start="428:5" pos:end="428:7"><name pos:start="428:5" pos:end="428:7">int</name></type> <name pos:start="428:9" pos:end="428:19">cacerts_len</name> <init pos:start="428:21" pos:end="428:23">= <expr pos:start="428:23" pos:end="428:23"><literal type="number" pos:start="428:23" pos:end="428:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="429:5" pos:end="429:32"><decl pos:start="429:5" pos:end="429:31"><type pos:start="429:5" pos:end="429:13"><name pos:start="429:5" pos:end="429:13">EST_ERROR</name></type> <name pos:start="429:15" pos:end="429:16">rc</name> <init pos:start="429:18" pos:end="429:31">= <expr pos:start="429:20" pos:end="429:31"><name pos:start="429:20" pos:end="429:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="430:5" pos:end="430:23"><decl pos:start="430:5" pos:end="430:22"><type pos:start="430:5" pos:end="430:14"><name pos:start="430:5" pos:end="430:12">EVP_PKEY</name> <modifier pos:start="430:14" pos:end="430:14">*</modifier></type><name pos:start="430:15" pos:end="430:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="432:5" pos:end="432:13"><expr pos:start="432:5" pos:end="432:12"><call pos:start="432:5" pos:end="432:12"><name pos:start="432:5" pos:end="432:9">SLEEP</name><argument_list pos:start="432:10" pos:end="432:12">(<argument pos:start="432:11" pos:end="432:11"><expr pos:start="432:11" pos:end="432:11"><literal type="number" pos:start="432:11" pos:end="432:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="434:5" pos:end="436:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="437:5" pos:end="437:63"><expr pos:start="437:5" pos:end="437:62"><name pos:start="437:5" pos:end="437:15">cacerts_len</name> <operator pos:start="437:17" pos:end="437:17">=</operator> <call pos:start="437:19" pos:end="437:62"><name pos:start="437:19" pos:end="437:34">read_binary_file</name><argument_list pos:start="437:35" pos:end="437:62">(<argument pos:start="437:36" pos:end="437:51"><expr pos:start="437:36" pos:end="437:51"><name pos:start="437:36" pos:end="437:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="437:54" pos:end="437:61"><expr pos:start="437:54" pos:end="437:61"><operator pos:start="437:54" pos:end="437:54">&amp;</operator><name pos:start="437:55" pos:end="437:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="439:5" pos:end="441:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="442:5" pos:end="442:50"><expr pos:start="442:5" pos:end="442:49"><name pos:start="442:5" pos:end="442:12">priv_key</name> <operator pos:start="442:14" pos:end="442:14">=</operator> <call pos:start="442:16" pos:end="442:49"><name pos:start="442:16" pos:end="442:31">read_private_key</name><argument_list pos:start="442:32" pos:end="442:49">(<argument pos:start="442:33" pos:end="442:48"><expr pos:start="442:33" pos:end="442:48"><name pos:start="442:33" pos:end="442:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="443:5" pos:end="446:5"><if pos:start="443:5" pos:end="446:5">if <condition pos:start="443:8" pos:end="443:25">(<expr pos:start="443:9" pos:end="443:24"><name pos:start="443:9" pos:end="443:16">priv_key</name> <operator pos:start="443:18" pos:end="443:19">==</operator> <name pos:start="443:21" pos:end="443:24">NULL</name></expr>)</condition> <block pos:start="443:27" pos:end="446:5">{<block_content pos:start="444:9" pos:end="445:15">
	<expr_stmt pos:start="444:9" pos:end="444:80"><expr pos:start="444:9" pos:end="444:79"><call pos:start="444:9" pos:end="444:79"><name pos:start="444:9" pos:end="444:14">printf</name><argument_list pos:start="444:15" pos:end="444:79">(<argument pos:start="444:16" pos:end="444:60"><expr pos:start="444:16" pos:end="444:60"><literal type="string" pos:start="444:16" pos:end="444:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="444:63" pos:end="444:78"><expr pos:start="444:63" pos:end="444:78"><name pos:start="444:63" pos:end="444:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="445:9" pos:end="445:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="448:5" pos:end="449:54"><expr pos:start="448:5" pos:end="449:53"><name pos:start="448:5" pos:end="448:8">ectx</name> <operator pos:start="448:10" pos:end="448:10">=</operator> <call pos:start="448:12" pos:end="449:53"><name pos:start="448:12" pos:end="448:26">est_client_init</name><argument_list pos:start="448:27" pos:end="449:53">(<argument pos:start="448:28" pos:end="448:34"><expr pos:start="448:28" pos:end="448:34"><name pos:start="448:28" pos:end="448:34">cacerts</name></expr></argument>, <argument pos:start="448:37" pos:end="448:47"><expr pos:start="448:37" pos:end="448:47"><name pos:start="448:37" pos:end="448:47">cacerts_len</name></expr></argument>, <argument pos:start="448:50" pos:end="448:68"><expr pos:start="448:50" pos:end="448:68"><name pos:start="448:50" pos:end="448:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="449:28" pos:end="449:52"><expr pos:start="449:28" pos:end="449:52"><name pos:start="449:28" pos:end="449:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="451:5" pos:end="451:59"><expr pos:start="451:5" pos:end="451:58"><name pos:start="451:5" pos:end="451:6">rc</name> <operator pos:start="451:8" pos:end="451:8">=</operator> <call pos:start="451:10" pos:end="451:58"><name pos:start="451:10" pos:end="451:28">est_client_set_auth</name><argument_list pos:start="451:29" pos:end="451:58">(<argument pos:start="451:30" pos:end="451:33"><expr pos:start="451:30" pos:end="451:33"><name pos:start="451:30" pos:end="451:33">ectx</name></expr></argument>, <argument pos:start="451:36" pos:end="451:37"><expr pos:start="451:36" pos:end="451:37"><literal type="string" pos:start="451:36" pos:end="451:37">""</literal></expr></argument>, <argument pos:start="451:40" pos:end="451:41"><expr pos:start="451:40" pos:end="451:41"><literal type="string" pos:start="451:40" pos:end="451:41">""</literal></expr></argument>, <argument pos:start="451:44" pos:end="451:47"><expr pos:start="451:44" pos:end="451:47"><name pos:start="451:44" pos:end="451:47">NULL</name></expr></argument>, <argument pos:start="451:50" pos:end="451:57"><expr pos:start="451:50" pos:end="451:57"><name pos:start="451:50" pos:end="451:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="452:5" pos:end="452:34"><expr pos:start="452:5" pos:end="452:33"><call pos:start="452:5" pos:end="452:33"><name pos:start="452:5" pos:end="452:13">CU_ASSERT</name><argument_list pos:start="452:14" pos:end="452:33">(<argument pos:start="452:15" pos:end="452:32"><expr pos:start="452:15" pos:end="452:32"><name pos:start="452:15" pos:end="452:16">rc</name> <operator pos:start="452:18" pos:end="452:19">==</operator> <name pos:start="452:21" pos:end="452:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="454:5" pos:end="455:53"><expr pos:start="454:5" pos:end="455:52"><name pos:start="454:5" pos:end="454:6">rc</name> <operator pos:start="454:8" pos:end="454:8">=</operator> <call pos:start="454:10" pos:end="455:52"><name pos:start="454:10" pos:end="454:30">est_client_set_server</name><argument_list pos:start="454:31" pos:end="455:52">(<argument pos:start="454:32" pos:end="454:35"><expr pos:start="454:32" pos:end="454:35"><name pos:start="454:32" pos:end="454:35">ectx</name></expr></argument>, <argument pos:start="454:38" pos:end="454:53"><expr pos:start="454:38" pos:end="454:53"><name pos:start="454:38" pos:end="454:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="454:56" pos:end="454:73"><expr pos:start="454:56" pos:end="454:73"><name pos:start="454:56" pos:end="454:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="455:32" pos:end="455:51"><expr pos:start="455:32" pos:end="455:51"><literal type="string" pos:start="455:32" pos:end="455:51">"someinvalid&lt;string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="456:5" pos:end="456:55"><expr pos:start="456:5" pos:end="456:54"><call pos:start="456:5" pos:end="456:54"><name pos:start="456:5" pos:end="456:13">CU_ASSERT</name><argument_list pos:start="456:14" pos:end="456:54">(<argument pos:start="456:15" pos:end="456:53"><expr pos:start="456:15" pos:end="456:53"><name pos:start="456:15" pos:end="456:16">rc</name> <operator pos:start="456:18" pos:end="456:19">==</operator> <name pos:start="456:21" pos:end="456:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="458:5" pos:end="460:5"><if pos:start="458:5" pos:end="460:5">if <condition pos:start="458:8" pos:end="458:13">(<expr pos:start="458:9" pos:end="458:12"><name pos:start="458:9" pos:end="458:12">ectx</name></expr>)</condition> <block pos:start="458:15" pos:end="460:5">{<block_content pos:start="459:9" pos:end="459:26">
        <expr_stmt pos:start="459:9" pos:end="459:26"><expr pos:start="459:9" pos:end="459:25"><call pos:start="459:9" pos:end="459:25"><name pos:start="459:9" pos:end="459:19">est_destroy</name><argument_list pos:start="459:20" pos:end="459:25">(<argument pos:start="459:21" pos:end="459:24"><expr pos:start="459:21" pos:end="459:24"><name pos:start="459:21" pos:end="459:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="461:5" pos:end="463:5"><if pos:start="461:5" pos:end="463:5">if <condition pos:start="461:8" pos:end="461:16">(<expr pos:start="461:9" pos:end="461:15"><name pos:start="461:9" pos:end="461:15">cacerts</name></expr>)</condition> <block pos:start="461:18" pos:end="463:5">{<block_content pos:start="462:9" pos:end="462:22">
        <expr_stmt pos:start="462:9" pos:end="462:22"><expr pos:start="462:9" pos:end="462:21"><call pos:start="462:9" pos:end="462:21"><name pos:start="462:9" pos:end="462:12">free</name><argument_list pos:start="462:13" pos:end="462:21">(<argument pos:start="462:14" pos:end="462:20"><expr pos:start="462:14" pos:end="462:20"><name pos:start="462:14" pos:end="462:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="464:5" pos:end="466:5"><if pos:start="464:5" pos:end="466:5">if <condition pos:start="464:8" pos:end="464:13">(<expr pos:start="464:9" pos:end="464:12"><name pos:start="464:9" pos:end="464:12">pkey</name></expr>)</condition> <block pos:start="464:15" pos:end="466:5">{<block_content pos:start="465:9" pos:end="465:19">
        <expr_stmt pos:start="465:9" pos:end="465:19"><expr pos:start="465:9" pos:end="465:18"><call pos:start="465:9" pos:end="465:18"><name pos:start="465:9" pos:end="465:12">free</name><argument_list pos:start="465:13" pos:end="465:18">(<argument pos:start="465:14" pos:end="465:17"><expr pos:start="465:14" pos:end="465:17"><name pos:start="465:14" pos:end="465:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="470:1" pos:end="472:3">/*
 * pass down path segment that is too long (129)
 */</comment>
<cpp:define pos:start="473:1" pos:end="473:161">#<cpp:directive pos:start="473:2" pos:end="473:7">define</cpp:directive> <cpp:macro pos:start="473:9" pos:end="473:29"><name pos:start="473:9" pos:end="473:29">path_segment_too_long</name></cpp:macro> <cpp:value pos:start="473:31" pos:end="473:161">"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</cpp:value></cpp:define>
<function pos:start="474:1" pos:end="518:1"><type pos:start="474:1" pos:end="474:11"><specifier pos:start="474:1" pos:end="474:6">static</specifier> <name pos:start="474:8" pos:end="474:11">void</name></type> <name pos:start="474:13" pos:end="474:24">us3496_test6</name> <parameter_list pos:start="474:26" pos:end="474:31">(<parameter pos:start="474:27" pos:end="474:30"><decl pos:start="474:27" pos:end="474:30"><type pos:start="474:27" pos:end="474:30"><name pos:start="474:27" pos:end="474:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="475:1" pos:end="518:1">{<block_content pos:start="476:5" pos:end="517:5">
    <decl_stmt pos:start="476:5" pos:end="476:18"><decl pos:start="476:5" pos:end="476:17"><type pos:start="476:5" pos:end="476:13"><name pos:start="476:5" pos:end="476:11">EST_CTX</name> <modifier pos:start="476:13" pos:end="476:13">*</modifier></type><name pos:start="476:14" pos:end="476:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="477:5" pos:end="477:31"><decl pos:start="477:5" pos:end="477:30"><type pos:start="477:5" pos:end="477:19"><name pos:start="477:5" pos:end="477:12">unsigned</name> <name pos:start="477:14" pos:end="477:17">char</name> <modifier pos:start="477:19" pos:end="477:19">*</modifier></type><name pos:start="477:20" pos:end="477:23">pkey</name> <init pos:start="477:25" pos:end="477:30">= <expr pos:start="477:27" pos:end="477:30"><name pos:start="477:27" pos:end="477:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="478:5" pos:end="478:34"><decl pos:start="478:5" pos:end="478:33"><type pos:start="478:5" pos:end="478:19"><name pos:start="478:5" pos:end="478:12">unsigned</name> <name pos:start="478:14" pos:end="478:17">char</name> <modifier pos:start="478:19" pos:end="478:19">*</modifier></type><name pos:start="478:20" pos:end="478:26">cacerts</name> <init pos:start="478:28" pos:end="478:33">= <expr pos:start="478:30" pos:end="478:33"><name pos:start="478:30" pos:end="478:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="479:5" pos:end="479:24"><decl pos:start="479:5" pos:end="479:23"><type pos:start="479:5" pos:end="479:7"><name pos:start="479:5" pos:end="479:7">int</name></type> <name pos:start="479:9" pos:end="479:19">cacerts_len</name> <init pos:start="479:21" pos:end="479:23">= <expr pos:start="479:23" pos:end="479:23"><literal type="number" pos:start="479:23" pos:end="479:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="480:5" pos:end="480:32"><decl pos:start="480:5" pos:end="480:31"><type pos:start="480:5" pos:end="480:13"><name pos:start="480:5" pos:end="480:13">EST_ERROR</name></type> <name pos:start="480:15" pos:end="480:16">rc</name> <init pos:start="480:18" pos:end="480:31">= <expr pos:start="480:20" pos:end="480:31"><name pos:start="480:20" pos:end="480:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="481:5" pos:end="481:23"><decl pos:start="481:5" pos:end="481:22"><type pos:start="481:5" pos:end="481:14"><name pos:start="481:5" pos:end="481:12">EVP_PKEY</name> <modifier pos:start="481:14" pos:end="481:14">*</modifier></type><name pos:start="481:15" pos:end="481:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="483:5" pos:end="483:13"><expr pos:start="483:5" pos:end="483:12"><call pos:start="483:5" pos:end="483:12"><name pos:start="483:5" pos:end="483:9">SLEEP</name><argument_list pos:start="483:10" pos:end="483:12">(<argument pos:start="483:11" pos:end="483:11"><expr pos:start="483:11" pos:end="483:11"><literal type="number" pos:start="483:11" pos:end="483:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="485:5" pos:end="487:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="488:5" pos:end="488:63"><expr pos:start="488:5" pos:end="488:62"><name pos:start="488:5" pos:end="488:15">cacerts_len</name> <operator pos:start="488:17" pos:end="488:17">=</operator> <call pos:start="488:19" pos:end="488:62"><name pos:start="488:19" pos:end="488:34">read_binary_file</name><argument_list pos:start="488:35" pos:end="488:62">(<argument pos:start="488:36" pos:end="488:51"><expr pos:start="488:36" pos:end="488:51"><name pos:start="488:36" pos:end="488:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="488:54" pos:end="488:61"><expr pos:start="488:54" pos:end="488:61"><operator pos:start="488:54" pos:end="488:54">&amp;</operator><name pos:start="488:55" pos:end="488:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="490:5" pos:end="492:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="493:5" pos:end="493:50"><expr pos:start="493:5" pos:end="493:49"><name pos:start="493:5" pos:end="493:12">priv_key</name> <operator pos:start="493:14" pos:end="493:14">=</operator> <call pos:start="493:16" pos:end="493:49"><name pos:start="493:16" pos:end="493:31">read_private_key</name><argument_list pos:start="493:32" pos:end="493:49">(<argument pos:start="493:33" pos:end="493:48"><expr pos:start="493:33" pos:end="493:48"><name pos:start="493:33" pos:end="493:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="494:5" pos:end="497:5"><if pos:start="494:5" pos:end="497:5">if <condition pos:start="494:8" pos:end="494:25">(<expr pos:start="494:9" pos:end="494:24"><name pos:start="494:9" pos:end="494:16">priv_key</name> <operator pos:start="494:18" pos:end="494:19">==</operator> <name pos:start="494:21" pos:end="494:24">NULL</name></expr>)</condition> <block pos:start="494:27" pos:end="497:5">{<block_content pos:start="495:9" pos:end="496:15">
	<expr_stmt pos:start="495:9" pos:end="495:80"><expr pos:start="495:9" pos:end="495:79"><call pos:start="495:9" pos:end="495:79"><name pos:start="495:9" pos:end="495:14">printf</name><argument_list pos:start="495:15" pos:end="495:79">(<argument pos:start="495:16" pos:end="495:60"><expr pos:start="495:16" pos:end="495:60"><literal type="string" pos:start="495:16" pos:end="495:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="495:63" pos:end="495:78"><expr pos:start="495:63" pos:end="495:78"><name pos:start="495:63" pos:end="495:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="496:9" pos:end="496:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="499:5" pos:end="500:54"><expr pos:start="499:5" pos:end="500:53"><name pos:start="499:5" pos:end="499:8">ectx</name> <operator pos:start="499:10" pos:end="499:10">=</operator> <call pos:start="499:12" pos:end="500:53"><name pos:start="499:12" pos:end="499:26">est_client_init</name><argument_list pos:start="499:27" pos:end="500:53">(<argument pos:start="499:28" pos:end="499:34"><expr pos:start="499:28" pos:end="499:34"><name pos:start="499:28" pos:end="499:34">cacerts</name></expr></argument>, <argument pos:start="499:37" pos:end="499:47"><expr pos:start="499:37" pos:end="499:47"><name pos:start="499:37" pos:end="499:47">cacerts_len</name></expr></argument>, <argument pos:start="499:50" pos:end="499:68"><expr pos:start="499:50" pos:end="499:68"><name pos:start="499:50" pos:end="499:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="500:28" pos:end="500:52"><expr pos:start="500:28" pos:end="500:52"><name pos:start="500:28" pos:end="500:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="502:5" pos:end="502:59"><expr pos:start="502:5" pos:end="502:58"><name pos:start="502:5" pos:end="502:6">rc</name> <operator pos:start="502:8" pos:end="502:8">=</operator> <call pos:start="502:10" pos:end="502:58"><name pos:start="502:10" pos:end="502:28">est_client_set_auth</name><argument_list pos:start="502:29" pos:end="502:58">(<argument pos:start="502:30" pos:end="502:33"><expr pos:start="502:30" pos:end="502:33"><name pos:start="502:30" pos:end="502:33">ectx</name></expr></argument>, <argument pos:start="502:36" pos:end="502:37"><expr pos:start="502:36" pos:end="502:37"><literal type="string" pos:start="502:36" pos:end="502:37">""</literal></expr></argument>, <argument pos:start="502:40" pos:end="502:41"><expr pos:start="502:40" pos:end="502:41"><literal type="string" pos:start="502:40" pos:end="502:41">""</literal></expr></argument>, <argument pos:start="502:44" pos:end="502:47"><expr pos:start="502:44" pos:end="502:47"><name pos:start="502:44" pos:end="502:47">NULL</name></expr></argument>, <argument pos:start="502:50" pos:end="502:57"><expr pos:start="502:50" pos:end="502:57"><name pos:start="502:50" pos:end="502:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="503:5" pos:end="503:34"><expr pos:start="503:5" pos:end="503:33"><call pos:start="503:5" pos:end="503:33"><name pos:start="503:5" pos:end="503:13">CU_ASSERT</name><argument_list pos:start="503:14" pos:end="503:33">(<argument pos:start="503:15" pos:end="503:32"><expr pos:start="503:15" pos:end="503:32"><name pos:start="503:15" pos:end="503:16">rc</name> <operator pos:start="503:18" pos:end="503:19">==</operator> <name pos:start="503:21" pos:end="503:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="505:5" pos:end="506:54"><expr pos:start="505:5" pos:end="506:53"><name pos:start="505:5" pos:end="505:6">rc</name> <operator pos:start="505:8" pos:end="505:8">=</operator> <call pos:start="505:10" pos:end="506:53"><name pos:start="505:10" pos:end="505:30">est_client_set_server</name><argument_list pos:start="505:31" pos:end="506:53">(<argument pos:start="505:32" pos:end="505:35"><expr pos:start="505:32" pos:end="505:35"><name pos:start="505:32" pos:end="505:35">ectx</name></expr></argument>, <argument pos:start="505:38" pos:end="505:53"><expr pos:start="505:38" pos:end="505:53"><name pos:start="505:38" pos:end="505:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="505:56" pos:end="505:73"><expr pos:start="505:56" pos:end="505:73"><name pos:start="505:56" pos:end="505:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="506:32" pos:end="506:52"><expr pos:start="506:32" pos:end="506:52"><name pos:start="506:32" pos:end="506:52">path_segment_too_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="507:5" pos:end="507:55"><expr pos:start="507:5" pos:end="507:54"><call pos:start="507:5" pos:end="507:54"><name pos:start="507:5" pos:end="507:13">CU_ASSERT</name><argument_list pos:start="507:14" pos:end="507:54">(<argument pos:start="507:15" pos:end="507:53"><expr pos:start="507:15" pos:end="507:53"><name pos:start="507:15" pos:end="507:16">rc</name> <operator pos:start="507:18" pos:end="507:19">==</operator> <name pos:start="507:21" pos:end="507:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="509:5" pos:end="511:5"><if pos:start="509:5" pos:end="511:5">if <condition pos:start="509:8" pos:end="509:13">(<expr pos:start="509:9" pos:end="509:12"><name pos:start="509:9" pos:end="509:12">ectx</name></expr>)</condition> <block pos:start="509:15" pos:end="511:5">{<block_content pos:start="510:9" pos:end="510:26">
        <expr_stmt pos:start="510:9" pos:end="510:26"><expr pos:start="510:9" pos:end="510:25"><call pos:start="510:9" pos:end="510:25"><name pos:start="510:9" pos:end="510:19">est_destroy</name><argument_list pos:start="510:20" pos:end="510:25">(<argument pos:start="510:21" pos:end="510:24"><expr pos:start="510:21" pos:end="510:24"><name pos:start="510:21" pos:end="510:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="512:5" pos:end="514:5"><if pos:start="512:5" pos:end="514:5">if <condition pos:start="512:8" pos:end="512:16">(<expr pos:start="512:9" pos:end="512:15"><name pos:start="512:9" pos:end="512:15">cacerts</name></expr>)</condition> <block pos:start="512:18" pos:end="514:5">{<block_content pos:start="513:9" pos:end="513:22">
        <expr_stmt pos:start="513:9" pos:end="513:22"><expr pos:start="513:9" pos:end="513:21"><call pos:start="513:9" pos:end="513:21"><name pos:start="513:9" pos:end="513:12">free</name><argument_list pos:start="513:13" pos:end="513:21">(<argument pos:start="513:14" pos:end="513:20"><expr pos:start="513:14" pos:end="513:20"><name pos:start="513:14" pos:end="513:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="515:5" pos:end="517:5"><if pos:start="515:5" pos:end="517:5">if <condition pos:start="515:8" pos:end="515:13">(<expr pos:start="515:9" pos:end="515:12"><name pos:start="515:9" pos:end="515:12">pkey</name></expr>)</condition> <block pos:start="515:15" pos:end="517:5">{<block_content pos:start="516:9" pos:end="516:19">
        <expr_stmt pos:start="516:9" pos:end="516:19"><expr pos:start="516:9" pos:end="516:18"><call pos:start="516:9" pos:end="516:18"><name pos:start="516:9" pos:end="516:12">free</name><argument_list pos:start="516:13" pos:end="516:18">(<argument pos:start="516:14" pos:end="516:17"><expr pos:start="516:14" pos:end="516:17"><name pos:start="516:14" pos:end="516:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="521:1" pos:end="523:3">/*
 * pass down a path segment that is equal to an operation (cacerts)
 */</comment>
<function pos:start="524:1" pos:end="568:1"><type pos:start="524:1" pos:end="524:11"><specifier pos:start="524:1" pos:end="524:6">static</specifier> <name pos:start="524:8" pos:end="524:11">void</name></type> <name pos:start="524:13" pos:end="524:24">us3496_test7</name> <parameter_list pos:start="524:26" pos:end="524:31">(<parameter pos:start="524:27" pos:end="524:30"><decl pos:start="524:27" pos:end="524:30"><type pos:start="524:27" pos:end="524:30"><name pos:start="524:27" pos:end="524:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="525:1" pos:end="568:1">{<block_content pos:start="526:5" pos:end="567:5">
    <decl_stmt pos:start="526:5" pos:end="526:18"><decl pos:start="526:5" pos:end="526:17"><type pos:start="526:5" pos:end="526:13"><name pos:start="526:5" pos:end="526:11">EST_CTX</name> <modifier pos:start="526:13" pos:end="526:13">*</modifier></type><name pos:start="526:14" pos:end="526:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="527:5" pos:end="527:31"><decl pos:start="527:5" pos:end="527:30"><type pos:start="527:5" pos:end="527:19"><name pos:start="527:5" pos:end="527:12">unsigned</name> <name pos:start="527:14" pos:end="527:17">char</name> <modifier pos:start="527:19" pos:end="527:19">*</modifier></type><name pos:start="527:20" pos:end="527:23">pkey</name> <init pos:start="527:25" pos:end="527:30">= <expr pos:start="527:27" pos:end="527:30"><name pos:start="527:27" pos:end="527:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="528:5" pos:end="528:34"><decl pos:start="528:5" pos:end="528:33"><type pos:start="528:5" pos:end="528:19"><name pos:start="528:5" pos:end="528:12">unsigned</name> <name pos:start="528:14" pos:end="528:17">char</name> <modifier pos:start="528:19" pos:end="528:19">*</modifier></type><name pos:start="528:20" pos:end="528:26">cacerts</name> <init pos:start="528:28" pos:end="528:33">= <expr pos:start="528:30" pos:end="528:33"><name pos:start="528:30" pos:end="528:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="529:5" pos:end="529:24"><decl pos:start="529:5" pos:end="529:23"><type pos:start="529:5" pos:end="529:7"><name pos:start="529:5" pos:end="529:7">int</name></type> <name pos:start="529:9" pos:end="529:19">cacerts_len</name> <init pos:start="529:21" pos:end="529:23">= <expr pos:start="529:23" pos:end="529:23"><literal type="number" pos:start="529:23" pos:end="529:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="530:5" pos:end="530:32"><decl pos:start="530:5" pos:end="530:31"><type pos:start="530:5" pos:end="530:13"><name pos:start="530:5" pos:end="530:13">EST_ERROR</name></type> <name pos:start="530:15" pos:end="530:16">rc</name> <init pos:start="530:18" pos:end="530:31">= <expr pos:start="530:20" pos:end="530:31"><name pos:start="530:20" pos:end="530:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="531:5" pos:end="531:23"><decl pos:start="531:5" pos:end="531:22"><type pos:start="531:5" pos:end="531:14"><name pos:start="531:5" pos:end="531:12">EVP_PKEY</name> <modifier pos:start="531:14" pos:end="531:14">*</modifier></type><name pos:start="531:15" pos:end="531:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="533:5" pos:end="533:13"><expr pos:start="533:5" pos:end="533:12"><call pos:start="533:5" pos:end="533:12"><name pos:start="533:5" pos:end="533:9">SLEEP</name><argument_list pos:start="533:10" pos:end="533:12">(<argument pos:start="533:11" pos:end="533:11"><expr pos:start="533:11" pos:end="533:11"><literal type="number" pos:start="533:11" pos:end="533:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="535:5" pos:end="537:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="538:5" pos:end="538:63"><expr pos:start="538:5" pos:end="538:62"><name pos:start="538:5" pos:end="538:15">cacerts_len</name> <operator pos:start="538:17" pos:end="538:17">=</operator> <call pos:start="538:19" pos:end="538:62"><name pos:start="538:19" pos:end="538:34">read_binary_file</name><argument_list pos:start="538:35" pos:end="538:62">(<argument pos:start="538:36" pos:end="538:51"><expr pos:start="538:36" pos:end="538:51"><name pos:start="538:36" pos:end="538:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="538:54" pos:end="538:61"><expr pos:start="538:54" pos:end="538:61"><operator pos:start="538:54" pos:end="538:54">&amp;</operator><name pos:start="538:55" pos:end="538:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="540:5" pos:end="542:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="543:5" pos:end="543:50"><expr pos:start="543:5" pos:end="543:49"><name pos:start="543:5" pos:end="543:12">priv_key</name> <operator pos:start="543:14" pos:end="543:14">=</operator> <call pos:start="543:16" pos:end="543:49"><name pos:start="543:16" pos:end="543:31">read_private_key</name><argument_list pos:start="543:32" pos:end="543:49">(<argument pos:start="543:33" pos:end="543:48"><expr pos:start="543:33" pos:end="543:48"><name pos:start="543:33" pos:end="543:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="544:5" pos:end="547:5"><if pos:start="544:5" pos:end="547:5">if <condition pos:start="544:8" pos:end="544:25">(<expr pos:start="544:9" pos:end="544:24"><name pos:start="544:9" pos:end="544:16">priv_key</name> <operator pos:start="544:18" pos:end="544:19">==</operator> <name pos:start="544:21" pos:end="544:24">NULL</name></expr>)</condition> <block pos:start="544:27" pos:end="547:5">{<block_content pos:start="545:9" pos:end="546:15">
	<expr_stmt pos:start="545:9" pos:end="545:80"><expr pos:start="545:9" pos:end="545:79"><call pos:start="545:9" pos:end="545:79"><name pos:start="545:9" pos:end="545:14">printf</name><argument_list pos:start="545:15" pos:end="545:79">(<argument pos:start="545:16" pos:end="545:60"><expr pos:start="545:16" pos:end="545:60"><literal type="string" pos:start="545:16" pos:end="545:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="545:63" pos:end="545:78"><expr pos:start="545:63" pos:end="545:78"><name pos:start="545:63" pos:end="545:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="546:9" pos:end="546:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="549:5" pos:end="550:54"><expr pos:start="549:5" pos:end="550:53"><name pos:start="549:5" pos:end="549:8">ectx</name> <operator pos:start="549:10" pos:end="549:10">=</operator> <call pos:start="549:12" pos:end="550:53"><name pos:start="549:12" pos:end="549:26">est_client_init</name><argument_list pos:start="549:27" pos:end="550:53">(<argument pos:start="549:28" pos:end="549:34"><expr pos:start="549:28" pos:end="549:34"><name pos:start="549:28" pos:end="549:34">cacerts</name></expr></argument>, <argument pos:start="549:37" pos:end="549:47"><expr pos:start="549:37" pos:end="549:47"><name pos:start="549:37" pos:end="549:47">cacerts_len</name></expr></argument>, <argument pos:start="549:50" pos:end="549:68"><expr pos:start="549:50" pos:end="549:68"><name pos:start="549:50" pos:end="549:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="550:28" pos:end="550:52"><expr pos:start="550:28" pos:end="550:52"><name pos:start="550:28" pos:end="550:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="552:5" pos:end="552:59"><expr pos:start="552:5" pos:end="552:58"><name pos:start="552:5" pos:end="552:6">rc</name> <operator pos:start="552:8" pos:end="552:8">=</operator> <call pos:start="552:10" pos:end="552:58"><name pos:start="552:10" pos:end="552:28">est_client_set_auth</name><argument_list pos:start="552:29" pos:end="552:58">(<argument pos:start="552:30" pos:end="552:33"><expr pos:start="552:30" pos:end="552:33"><name pos:start="552:30" pos:end="552:33">ectx</name></expr></argument>, <argument pos:start="552:36" pos:end="552:37"><expr pos:start="552:36" pos:end="552:37"><literal type="string" pos:start="552:36" pos:end="552:37">""</literal></expr></argument>, <argument pos:start="552:40" pos:end="552:41"><expr pos:start="552:40" pos:end="552:41"><literal type="string" pos:start="552:40" pos:end="552:41">""</literal></expr></argument>, <argument pos:start="552:44" pos:end="552:47"><expr pos:start="552:44" pos:end="552:47"><name pos:start="552:44" pos:end="552:47">NULL</name></expr></argument>, <argument pos:start="552:50" pos:end="552:57"><expr pos:start="552:50" pos:end="552:57"><name pos:start="552:50" pos:end="552:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="553:5" pos:end="553:34"><expr pos:start="553:5" pos:end="553:33"><call pos:start="553:5" pos:end="553:33"><name pos:start="553:5" pos:end="553:13">CU_ASSERT</name><argument_list pos:start="553:14" pos:end="553:33">(<argument pos:start="553:15" pos:end="553:32"><expr pos:start="553:15" pos:end="553:32"><name pos:start="553:15" pos:end="553:16">rc</name> <operator pos:start="553:18" pos:end="553:19">==</operator> <name pos:start="553:21" pos:end="553:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="555:5" pos:end="556:42"><expr pos:start="555:5" pos:end="556:41"><name pos:start="555:5" pos:end="555:6">rc</name> <operator pos:start="555:8" pos:end="555:8">=</operator> <call pos:start="555:10" pos:end="556:41"><name pos:start="555:10" pos:end="555:30">est_client_set_server</name><argument_list pos:start="555:31" pos:end="556:41">(<argument pos:start="555:32" pos:end="555:35"><expr pos:start="555:32" pos:end="555:35"><name pos:start="555:32" pos:end="555:35">ectx</name></expr></argument>, <argument pos:start="555:38" pos:end="555:53"><expr pos:start="555:38" pos:end="555:53"><name pos:start="555:38" pos:end="555:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="555:56" pos:end="555:73"><expr pos:start="555:56" pos:end="555:73"><name pos:start="555:56" pos:end="555:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="556:32" pos:end="556:40"><expr pos:start="556:32" pos:end="556:40"><literal type="string" pos:start="556:32" pos:end="556:40">"cacerts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="557:5" pos:end="557:55"><expr pos:start="557:5" pos:end="557:54"><call pos:start="557:5" pos:end="557:54"><name pos:start="557:5" pos:end="557:13">CU_ASSERT</name><argument_list pos:start="557:14" pos:end="557:54">(<argument pos:start="557:15" pos:end="557:53"><expr pos:start="557:15" pos:end="557:53"><name pos:start="557:15" pos:end="557:16">rc</name> <operator pos:start="557:18" pos:end="557:19">==</operator> <name pos:start="557:21" pos:end="557:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="559:5" pos:end="561:5"><if pos:start="559:5" pos:end="561:5">if <condition pos:start="559:8" pos:end="559:13">(<expr pos:start="559:9" pos:end="559:12"><name pos:start="559:9" pos:end="559:12">ectx</name></expr>)</condition> <block pos:start="559:15" pos:end="561:5">{<block_content pos:start="560:9" pos:end="560:26">
        <expr_stmt pos:start="560:9" pos:end="560:26"><expr pos:start="560:9" pos:end="560:25"><call pos:start="560:9" pos:end="560:25"><name pos:start="560:9" pos:end="560:19">est_destroy</name><argument_list pos:start="560:20" pos:end="560:25">(<argument pos:start="560:21" pos:end="560:24"><expr pos:start="560:21" pos:end="560:24"><name pos:start="560:21" pos:end="560:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="562:5" pos:end="564:5"><if pos:start="562:5" pos:end="564:5">if <condition pos:start="562:8" pos:end="562:16">(<expr pos:start="562:9" pos:end="562:15"><name pos:start="562:9" pos:end="562:15">cacerts</name></expr>)</condition> <block pos:start="562:18" pos:end="564:5">{<block_content pos:start="563:9" pos:end="563:22">
        <expr_stmt pos:start="563:9" pos:end="563:22"><expr pos:start="563:9" pos:end="563:21"><call pos:start="563:9" pos:end="563:21"><name pos:start="563:9" pos:end="563:12">free</name><argument_list pos:start="563:13" pos:end="563:21">(<argument pos:start="563:14" pos:end="563:20"><expr pos:start="563:14" pos:end="563:20"><name pos:start="563:14" pos:end="563:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="565:5" pos:end="567:5"><if pos:start="565:5" pos:end="567:5">if <condition pos:start="565:8" pos:end="565:13">(<expr pos:start="565:9" pos:end="565:12"><name pos:start="565:9" pos:end="565:12">pkey</name></expr>)</condition> <block pos:start="565:15" pos:end="567:5">{<block_content pos:start="566:9" pos:end="566:19">
        <expr_stmt pos:start="566:9" pos:end="566:19"><expr pos:start="566:9" pos:end="566:18"><call pos:start="566:9" pos:end="566:18"><name pos:start="566:9" pos:end="566:12">free</name><argument_list pos:start="566:13" pos:end="566:18">(<argument pos:start="566:14" pos:end="566:17"><expr pos:start="566:14" pos:end="566:17"><name pos:start="566:14" pos:end="566:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="571:1" pos:end="574:3">/*
 * pass down a path segment that contains an operation (cacerts),
 * in this case it's at the front of the string
 */</comment>
<function pos:start="575:1" pos:end="619:1"><type pos:start="575:1" pos:end="575:11"><specifier pos:start="575:1" pos:end="575:6">static</specifier> <name pos:start="575:8" pos:end="575:11">void</name></type> <name pos:start="575:13" pos:end="575:24">us3496_test8</name> <parameter_list pos:start="575:26" pos:end="575:31">(<parameter pos:start="575:27" pos:end="575:30"><decl pos:start="575:27" pos:end="575:30"><type pos:start="575:27" pos:end="575:30"><name pos:start="575:27" pos:end="575:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="576:1" pos:end="619:1">{<block_content pos:start="577:5" pos:end="618:5">
    <decl_stmt pos:start="577:5" pos:end="577:18"><decl pos:start="577:5" pos:end="577:17"><type pos:start="577:5" pos:end="577:13"><name pos:start="577:5" pos:end="577:11">EST_CTX</name> <modifier pos:start="577:13" pos:end="577:13">*</modifier></type><name pos:start="577:14" pos:end="577:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="578:5" pos:end="578:31"><decl pos:start="578:5" pos:end="578:30"><type pos:start="578:5" pos:end="578:19"><name pos:start="578:5" pos:end="578:12">unsigned</name> <name pos:start="578:14" pos:end="578:17">char</name> <modifier pos:start="578:19" pos:end="578:19">*</modifier></type><name pos:start="578:20" pos:end="578:23">pkey</name> <init pos:start="578:25" pos:end="578:30">= <expr pos:start="578:27" pos:end="578:30"><name pos:start="578:27" pos:end="578:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="579:5" pos:end="579:34"><decl pos:start="579:5" pos:end="579:33"><type pos:start="579:5" pos:end="579:19"><name pos:start="579:5" pos:end="579:12">unsigned</name> <name pos:start="579:14" pos:end="579:17">char</name> <modifier pos:start="579:19" pos:end="579:19">*</modifier></type><name pos:start="579:20" pos:end="579:26">cacerts</name> <init pos:start="579:28" pos:end="579:33">= <expr pos:start="579:30" pos:end="579:33"><name pos:start="579:30" pos:end="579:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="580:5" pos:end="580:24"><decl pos:start="580:5" pos:end="580:23"><type pos:start="580:5" pos:end="580:7"><name pos:start="580:5" pos:end="580:7">int</name></type> <name pos:start="580:9" pos:end="580:19">cacerts_len</name> <init pos:start="580:21" pos:end="580:23">= <expr pos:start="580:23" pos:end="580:23"><literal type="number" pos:start="580:23" pos:end="580:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="581:5" pos:end="581:32"><decl pos:start="581:5" pos:end="581:31"><type pos:start="581:5" pos:end="581:13"><name pos:start="581:5" pos:end="581:13">EST_ERROR</name></type> <name pos:start="581:15" pos:end="581:16">rc</name> <init pos:start="581:18" pos:end="581:31">= <expr pos:start="581:20" pos:end="581:31"><name pos:start="581:20" pos:end="581:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="582:5" pos:end="582:23"><decl pos:start="582:5" pos:end="582:22"><type pos:start="582:5" pos:end="582:14"><name pos:start="582:5" pos:end="582:12">EVP_PKEY</name> <modifier pos:start="582:14" pos:end="582:14">*</modifier></type><name pos:start="582:15" pos:end="582:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="584:5" pos:end="584:13"><expr pos:start="584:5" pos:end="584:12"><call pos:start="584:5" pos:end="584:12"><name pos:start="584:5" pos:end="584:9">SLEEP</name><argument_list pos:start="584:10" pos:end="584:12">(<argument pos:start="584:11" pos:end="584:11"><expr pos:start="584:11" pos:end="584:11"><literal type="number" pos:start="584:11" pos:end="584:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="586:5" pos:end="588:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="589:5" pos:end="589:63"><expr pos:start="589:5" pos:end="589:62"><name pos:start="589:5" pos:end="589:15">cacerts_len</name> <operator pos:start="589:17" pos:end="589:17">=</operator> <call pos:start="589:19" pos:end="589:62"><name pos:start="589:19" pos:end="589:34">read_binary_file</name><argument_list pos:start="589:35" pos:end="589:62">(<argument pos:start="589:36" pos:end="589:51"><expr pos:start="589:36" pos:end="589:51"><name pos:start="589:36" pos:end="589:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="589:54" pos:end="589:61"><expr pos:start="589:54" pos:end="589:61"><operator pos:start="589:54" pos:end="589:54">&amp;</operator><name pos:start="589:55" pos:end="589:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="591:5" pos:end="593:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="594:5" pos:end="594:50"><expr pos:start="594:5" pos:end="594:49"><name pos:start="594:5" pos:end="594:12">priv_key</name> <operator pos:start="594:14" pos:end="594:14">=</operator> <call pos:start="594:16" pos:end="594:49"><name pos:start="594:16" pos:end="594:31">read_private_key</name><argument_list pos:start="594:32" pos:end="594:49">(<argument pos:start="594:33" pos:end="594:48"><expr pos:start="594:33" pos:end="594:48"><name pos:start="594:33" pos:end="594:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="595:5" pos:end="598:5"><if pos:start="595:5" pos:end="598:5">if <condition pos:start="595:8" pos:end="595:25">(<expr pos:start="595:9" pos:end="595:24"><name pos:start="595:9" pos:end="595:16">priv_key</name> <operator pos:start="595:18" pos:end="595:19">==</operator> <name pos:start="595:21" pos:end="595:24">NULL</name></expr>)</condition> <block pos:start="595:27" pos:end="598:5">{<block_content pos:start="596:9" pos:end="597:15">
	<expr_stmt pos:start="596:9" pos:end="596:80"><expr pos:start="596:9" pos:end="596:79"><call pos:start="596:9" pos:end="596:79"><name pos:start="596:9" pos:end="596:14">printf</name><argument_list pos:start="596:15" pos:end="596:79">(<argument pos:start="596:16" pos:end="596:60"><expr pos:start="596:16" pos:end="596:60"><literal type="string" pos:start="596:16" pos:end="596:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="596:63" pos:end="596:78"><expr pos:start="596:63" pos:end="596:78"><name pos:start="596:63" pos:end="596:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="597:9" pos:end="597:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="600:5" pos:end="601:54"><expr pos:start="600:5" pos:end="601:53"><name pos:start="600:5" pos:end="600:8">ectx</name> <operator pos:start="600:10" pos:end="600:10">=</operator> <call pos:start="600:12" pos:end="601:53"><name pos:start="600:12" pos:end="600:26">est_client_init</name><argument_list pos:start="600:27" pos:end="601:53">(<argument pos:start="600:28" pos:end="600:34"><expr pos:start="600:28" pos:end="600:34"><name pos:start="600:28" pos:end="600:34">cacerts</name></expr></argument>, <argument pos:start="600:37" pos:end="600:47"><expr pos:start="600:37" pos:end="600:47"><name pos:start="600:37" pos:end="600:47">cacerts_len</name></expr></argument>, <argument pos:start="600:50" pos:end="600:68"><expr pos:start="600:50" pos:end="600:68"><name pos:start="600:50" pos:end="600:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="601:28" pos:end="601:52"><expr pos:start="601:28" pos:end="601:52"><name pos:start="601:28" pos:end="601:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="603:5" pos:end="603:59"><expr pos:start="603:5" pos:end="603:58"><name pos:start="603:5" pos:end="603:6">rc</name> <operator pos:start="603:8" pos:end="603:8">=</operator> <call pos:start="603:10" pos:end="603:58"><name pos:start="603:10" pos:end="603:28">est_client_set_auth</name><argument_list pos:start="603:29" pos:end="603:58">(<argument pos:start="603:30" pos:end="603:33"><expr pos:start="603:30" pos:end="603:33"><name pos:start="603:30" pos:end="603:33">ectx</name></expr></argument>, <argument pos:start="603:36" pos:end="603:37"><expr pos:start="603:36" pos:end="603:37"><literal type="string" pos:start="603:36" pos:end="603:37">""</literal></expr></argument>, <argument pos:start="603:40" pos:end="603:41"><expr pos:start="603:40" pos:end="603:41"><literal type="string" pos:start="603:40" pos:end="603:41">""</literal></expr></argument>, <argument pos:start="603:44" pos:end="603:47"><expr pos:start="603:44" pos:end="603:47"><name pos:start="603:44" pos:end="603:47">NULL</name></expr></argument>, <argument pos:start="603:50" pos:end="603:57"><expr pos:start="603:50" pos:end="603:57"><name pos:start="603:50" pos:end="603:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="604:5" pos:end="604:34"><expr pos:start="604:5" pos:end="604:33"><call pos:start="604:5" pos:end="604:33"><name pos:start="604:5" pos:end="604:13">CU_ASSERT</name><argument_list pos:start="604:14" pos:end="604:33">(<argument pos:start="604:15" pos:end="604:32"><expr pos:start="604:15" pos:end="604:32"><name pos:start="604:15" pos:end="604:16">rc</name> <operator pos:start="604:18" pos:end="604:19">==</operator> <name pos:start="604:21" pos:end="604:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="606:5" pos:end="607:49"><expr pos:start="606:5" pos:end="607:48"><name pos:start="606:5" pos:end="606:6">rc</name> <operator pos:start="606:8" pos:end="606:8">=</operator> <call pos:start="606:10" pos:end="607:48"><name pos:start="606:10" pos:end="606:30">est_client_set_server</name><argument_list pos:start="606:31" pos:end="607:48">(<argument pos:start="606:32" pos:end="606:35"><expr pos:start="606:32" pos:end="606:35"><name pos:start="606:32" pos:end="606:35">ectx</name></expr></argument>, <argument pos:start="606:38" pos:end="606:53"><expr pos:start="606:38" pos:end="606:53"><name pos:start="606:38" pos:end="606:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="606:56" pos:end="606:73"><expr pos:start="606:56" pos:end="606:73"><name pos:start="606:56" pos:end="606:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="607:32" pos:end="607:47"><expr pos:start="607:32" pos:end="607:47"><literal type="string" pos:start="607:32" pos:end="607:47">"cacerts-server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="608:5" pos:end="608:34"><expr pos:start="608:5" pos:end="608:33"><call pos:start="608:5" pos:end="608:33"><name pos:start="608:5" pos:end="608:13">CU_ASSERT</name><argument_list pos:start="608:14" pos:end="608:33">(<argument pos:start="608:15" pos:end="608:32"><expr pos:start="608:15" pos:end="608:32"><name pos:start="608:15" pos:end="608:16">rc</name> <operator pos:start="608:18" pos:end="608:19">==</operator> <name pos:start="608:21" pos:end="608:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="610:5" pos:end="612:5"><if pos:start="610:5" pos:end="612:5">if <condition pos:start="610:8" pos:end="610:13">(<expr pos:start="610:9" pos:end="610:12"><name pos:start="610:9" pos:end="610:12">ectx</name></expr>)</condition> <block pos:start="610:15" pos:end="612:5">{<block_content pos:start="611:9" pos:end="611:26">
        <expr_stmt pos:start="611:9" pos:end="611:26"><expr pos:start="611:9" pos:end="611:25"><call pos:start="611:9" pos:end="611:25"><name pos:start="611:9" pos:end="611:19">est_destroy</name><argument_list pos:start="611:20" pos:end="611:25">(<argument pos:start="611:21" pos:end="611:24"><expr pos:start="611:21" pos:end="611:24"><name pos:start="611:21" pos:end="611:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="613:5" pos:end="615:5"><if pos:start="613:5" pos:end="615:5">if <condition pos:start="613:8" pos:end="613:16">(<expr pos:start="613:9" pos:end="613:15"><name pos:start="613:9" pos:end="613:15">cacerts</name></expr>)</condition> <block pos:start="613:18" pos:end="615:5">{<block_content pos:start="614:9" pos:end="614:22">
        <expr_stmt pos:start="614:9" pos:end="614:22"><expr pos:start="614:9" pos:end="614:21"><call pos:start="614:9" pos:end="614:21"><name pos:start="614:9" pos:end="614:12">free</name><argument_list pos:start="614:13" pos:end="614:21">(<argument pos:start="614:14" pos:end="614:20"><expr pos:start="614:14" pos:end="614:20"><name pos:start="614:14" pos:end="614:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="616:5" pos:end="618:5"><if pos:start="616:5" pos:end="618:5">if <condition pos:start="616:8" pos:end="616:13">(<expr pos:start="616:9" pos:end="616:12"><name pos:start="616:9" pos:end="616:12">pkey</name></expr>)</condition> <block pos:start="616:15" pos:end="618:5">{<block_content pos:start="617:9" pos:end="617:19">
        <expr_stmt pos:start="617:9" pos:end="617:19"><expr pos:start="617:9" pos:end="617:18"><call pos:start="617:9" pos:end="617:18"><name pos:start="617:9" pos:end="617:12">free</name><argument_list pos:start="617:13" pos:end="617:18">(<argument pos:start="617:14" pos:end="617:17"><expr pos:start="617:14" pos:end="617:17"><name pos:start="617:14" pos:end="617:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="622:1" pos:end="625:3">/*
 * pass down a path segment that is the empty string.
 * This should fail.
 */</comment>
<function pos:start="626:1" pos:end="670:1"><type pos:start="626:1" pos:end="626:11"><specifier pos:start="626:1" pos:end="626:6">static</specifier> <name pos:start="626:8" pos:end="626:11">void</name></type> <name pos:start="626:13" pos:end="626:24">us3496_test9</name> <parameter_list pos:start="626:26" pos:end="626:31">(<parameter pos:start="626:27" pos:end="626:30"><decl pos:start="626:27" pos:end="626:30"><type pos:start="626:27" pos:end="626:30"><name pos:start="626:27" pos:end="626:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="627:1" pos:end="670:1">{<block_content pos:start="628:5" pos:end="669:5">
    <decl_stmt pos:start="628:5" pos:end="628:18"><decl pos:start="628:5" pos:end="628:17"><type pos:start="628:5" pos:end="628:13"><name pos:start="628:5" pos:end="628:11">EST_CTX</name> <modifier pos:start="628:13" pos:end="628:13">*</modifier></type><name pos:start="628:14" pos:end="628:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="629:5" pos:end="629:31"><decl pos:start="629:5" pos:end="629:30"><type pos:start="629:5" pos:end="629:19"><name pos:start="629:5" pos:end="629:12">unsigned</name> <name pos:start="629:14" pos:end="629:17">char</name> <modifier pos:start="629:19" pos:end="629:19">*</modifier></type><name pos:start="629:20" pos:end="629:23">pkey</name> <init pos:start="629:25" pos:end="629:30">= <expr pos:start="629:27" pos:end="629:30"><name pos:start="629:27" pos:end="629:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="630:5" pos:end="630:34"><decl pos:start="630:5" pos:end="630:33"><type pos:start="630:5" pos:end="630:19"><name pos:start="630:5" pos:end="630:12">unsigned</name> <name pos:start="630:14" pos:end="630:17">char</name> <modifier pos:start="630:19" pos:end="630:19">*</modifier></type><name pos:start="630:20" pos:end="630:26">cacerts</name> <init pos:start="630:28" pos:end="630:33">= <expr pos:start="630:30" pos:end="630:33"><name pos:start="630:30" pos:end="630:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="631:5" pos:end="631:24"><decl pos:start="631:5" pos:end="631:23"><type pos:start="631:5" pos:end="631:7"><name pos:start="631:5" pos:end="631:7">int</name></type> <name pos:start="631:9" pos:end="631:19">cacerts_len</name> <init pos:start="631:21" pos:end="631:23">= <expr pos:start="631:23" pos:end="631:23"><literal type="number" pos:start="631:23" pos:end="631:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="632:5" pos:end="632:32"><decl pos:start="632:5" pos:end="632:31"><type pos:start="632:5" pos:end="632:13"><name pos:start="632:5" pos:end="632:13">EST_ERROR</name></type> <name pos:start="632:15" pos:end="632:16">rc</name> <init pos:start="632:18" pos:end="632:31">= <expr pos:start="632:20" pos:end="632:31"><name pos:start="632:20" pos:end="632:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="633:5" pos:end="633:23"><decl pos:start="633:5" pos:end="633:22"><type pos:start="633:5" pos:end="633:14"><name pos:start="633:5" pos:end="633:12">EVP_PKEY</name> <modifier pos:start="633:14" pos:end="633:14">*</modifier></type><name pos:start="633:15" pos:end="633:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="635:5" pos:end="635:13"><expr pos:start="635:5" pos:end="635:12"><call pos:start="635:5" pos:end="635:12"><name pos:start="635:5" pos:end="635:9">SLEEP</name><argument_list pos:start="635:10" pos:end="635:12">(<argument pos:start="635:11" pos:end="635:11"><expr pos:start="635:11" pos:end="635:11"><literal type="number" pos:start="635:11" pos:end="635:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="637:5" pos:end="639:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="640:5" pos:end="640:63"><expr pos:start="640:5" pos:end="640:62"><name pos:start="640:5" pos:end="640:15">cacerts_len</name> <operator pos:start="640:17" pos:end="640:17">=</operator> <call pos:start="640:19" pos:end="640:62"><name pos:start="640:19" pos:end="640:34">read_binary_file</name><argument_list pos:start="640:35" pos:end="640:62">(<argument pos:start="640:36" pos:end="640:51"><expr pos:start="640:36" pos:end="640:51"><name pos:start="640:36" pos:end="640:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="640:54" pos:end="640:61"><expr pos:start="640:54" pos:end="640:61"><operator pos:start="640:54" pos:end="640:54">&amp;</operator><name pos:start="640:55" pos:end="640:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="642:5" pos:end="644:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="645:5" pos:end="645:50"><expr pos:start="645:5" pos:end="645:49"><name pos:start="645:5" pos:end="645:12">priv_key</name> <operator pos:start="645:14" pos:end="645:14">=</operator> <call pos:start="645:16" pos:end="645:49"><name pos:start="645:16" pos:end="645:31">read_private_key</name><argument_list pos:start="645:32" pos:end="645:49">(<argument pos:start="645:33" pos:end="645:48"><expr pos:start="645:33" pos:end="645:48"><name pos:start="645:33" pos:end="645:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="646:5" pos:end="649:5"><if pos:start="646:5" pos:end="649:5">if <condition pos:start="646:8" pos:end="646:25">(<expr pos:start="646:9" pos:end="646:24"><name pos:start="646:9" pos:end="646:16">priv_key</name> <operator pos:start="646:18" pos:end="646:19">==</operator> <name pos:start="646:21" pos:end="646:24">NULL</name></expr>)</condition> <block pos:start="646:27" pos:end="649:5">{<block_content pos:start="647:9" pos:end="648:15">
	<expr_stmt pos:start="647:9" pos:end="647:80"><expr pos:start="647:9" pos:end="647:79"><call pos:start="647:9" pos:end="647:79"><name pos:start="647:9" pos:end="647:14">printf</name><argument_list pos:start="647:15" pos:end="647:79">(<argument pos:start="647:16" pos:end="647:60"><expr pos:start="647:16" pos:end="647:60"><literal type="string" pos:start="647:16" pos:end="647:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="647:63" pos:end="647:78"><expr pos:start="647:63" pos:end="647:78"><name pos:start="647:63" pos:end="647:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="648:9" pos:end="648:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="651:5" pos:end="652:54"><expr pos:start="651:5" pos:end="652:53"><name pos:start="651:5" pos:end="651:8">ectx</name> <operator pos:start="651:10" pos:end="651:10">=</operator> <call pos:start="651:12" pos:end="652:53"><name pos:start="651:12" pos:end="651:26">est_client_init</name><argument_list pos:start="651:27" pos:end="652:53">(<argument pos:start="651:28" pos:end="651:34"><expr pos:start="651:28" pos:end="651:34"><name pos:start="651:28" pos:end="651:34">cacerts</name></expr></argument>, <argument pos:start="651:37" pos:end="651:47"><expr pos:start="651:37" pos:end="651:47"><name pos:start="651:37" pos:end="651:47">cacerts_len</name></expr></argument>, <argument pos:start="651:50" pos:end="651:68"><expr pos:start="651:50" pos:end="651:68"><name pos:start="651:50" pos:end="651:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="652:28" pos:end="652:52"><expr pos:start="652:28" pos:end="652:52"><name pos:start="652:28" pos:end="652:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="654:5" pos:end="654:59"><expr pos:start="654:5" pos:end="654:58"><name pos:start="654:5" pos:end="654:6">rc</name> <operator pos:start="654:8" pos:end="654:8">=</operator> <call pos:start="654:10" pos:end="654:58"><name pos:start="654:10" pos:end="654:28">est_client_set_auth</name><argument_list pos:start="654:29" pos:end="654:58">(<argument pos:start="654:30" pos:end="654:33"><expr pos:start="654:30" pos:end="654:33"><name pos:start="654:30" pos:end="654:33">ectx</name></expr></argument>, <argument pos:start="654:36" pos:end="654:37"><expr pos:start="654:36" pos:end="654:37"><literal type="string" pos:start="654:36" pos:end="654:37">""</literal></expr></argument>, <argument pos:start="654:40" pos:end="654:41"><expr pos:start="654:40" pos:end="654:41"><literal type="string" pos:start="654:40" pos:end="654:41">""</literal></expr></argument>, <argument pos:start="654:44" pos:end="654:47"><expr pos:start="654:44" pos:end="654:47"><name pos:start="654:44" pos:end="654:47">NULL</name></expr></argument>, <argument pos:start="654:50" pos:end="654:57"><expr pos:start="654:50" pos:end="654:57"><name pos:start="654:50" pos:end="654:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="655:5" pos:end="655:34"><expr pos:start="655:5" pos:end="655:33"><call pos:start="655:5" pos:end="655:33"><name pos:start="655:5" pos:end="655:13">CU_ASSERT</name><argument_list pos:start="655:14" pos:end="655:33">(<argument pos:start="655:15" pos:end="655:32"><expr pos:start="655:15" pos:end="655:32"><name pos:start="655:15" pos:end="655:16">rc</name> <operator pos:start="655:18" pos:end="655:19">==</operator> <name pos:start="655:21" pos:end="655:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="657:5" pos:end="658:35"><expr pos:start="657:5" pos:end="658:34"><name pos:start="657:5" pos:end="657:6">rc</name> <operator pos:start="657:8" pos:end="657:8">=</operator> <call pos:start="657:10" pos:end="658:34"><name pos:start="657:10" pos:end="657:30">est_client_set_server</name><argument_list pos:start="657:31" pos:end="658:34">(<argument pos:start="657:32" pos:end="657:35"><expr pos:start="657:32" pos:end="657:35"><name pos:start="657:32" pos:end="657:35">ectx</name></expr></argument>, <argument pos:start="657:38" pos:end="657:53"><expr pos:start="657:38" pos:end="657:53"><name pos:start="657:38" pos:end="657:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="657:56" pos:end="657:73"><expr pos:start="657:56" pos:end="657:73"><name pos:start="657:56" pos:end="657:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="658:32" pos:end="658:33"><expr pos:start="658:32" pos:end="658:33"><literal type="string" pos:start="658:32" pos:end="658:33">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="659:5" pos:end="659:55"><expr pos:start="659:5" pos:end="659:54"><call pos:start="659:5" pos:end="659:54"><name pos:start="659:5" pos:end="659:13">CU_ASSERT</name><argument_list pos:start="659:14" pos:end="659:54">(<argument pos:start="659:15" pos:end="659:53"><expr pos:start="659:15" pos:end="659:53"><name pos:start="659:15" pos:end="659:16">rc</name> <operator pos:start="659:18" pos:end="659:19">==</operator> <name pos:start="659:21" pos:end="659:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="661:5" pos:end="663:5"><if pos:start="661:5" pos:end="663:5">if <condition pos:start="661:8" pos:end="661:13">(<expr pos:start="661:9" pos:end="661:12"><name pos:start="661:9" pos:end="661:12">ectx</name></expr>)</condition> <block pos:start="661:15" pos:end="663:5">{<block_content pos:start="662:9" pos:end="662:26">
        <expr_stmt pos:start="662:9" pos:end="662:26"><expr pos:start="662:9" pos:end="662:25"><call pos:start="662:9" pos:end="662:25"><name pos:start="662:9" pos:end="662:19">est_destroy</name><argument_list pos:start="662:20" pos:end="662:25">(<argument pos:start="662:21" pos:end="662:24"><expr pos:start="662:21" pos:end="662:24"><name pos:start="662:21" pos:end="662:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="664:5" pos:end="666:5"><if pos:start="664:5" pos:end="666:5">if <condition pos:start="664:8" pos:end="664:16">(<expr pos:start="664:9" pos:end="664:15"><name pos:start="664:9" pos:end="664:15">cacerts</name></expr>)</condition> <block pos:start="664:18" pos:end="666:5">{<block_content pos:start="665:9" pos:end="665:22">
        <expr_stmt pos:start="665:9" pos:end="665:22"><expr pos:start="665:9" pos:end="665:21"><call pos:start="665:9" pos:end="665:21"><name pos:start="665:9" pos:end="665:12">free</name><argument_list pos:start="665:13" pos:end="665:21">(<argument pos:start="665:14" pos:end="665:20"><expr pos:start="665:14" pos:end="665:20"><name pos:start="665:14" pos:end="665:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="667:5" pos:end="669:5"><if pos:start="667:5" pos:end="669:5">if <condition pos:start="667:8" pos:end="667:13">(<expr pos:start="667:9" pos:end="667:12"><name pos:start="667:9" pos:end="667:12">pkey</name></expr>)</condition> <block pos:start="667:15" pos:end="669:5">{<block_content pos:start="668:9" pos:end="668:19">
        <expr_stmt pos:start="668:9" pos:end="668:19"><expr pos:start="668:9" pos:end="668:18"><call pos:start="668:9" pos:end="668:18"><name pos:start="668:9" pos:end="668:12">free</name><argument_list pos:start="668:13" pos:end="668:18">(<argument pos:start="668:14" pos:end="668:17"><expr pos:start="668:14" pos:end="668:17"><name pos:start="668:14" pos:end="668:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="673:1" pos:end="676:3">/*
 * pass down a path segment that contains a ':'.
 * This should pass.
 */</comment>
<function pos:start="677:1" pos:end="727:0"><type pos:start="677:1" pos:end="677:11"><specifier pos:start="677:1" pos:end="677:6">static</specifier> <name pos:start="677:8" pos:end="677:11">void</name></type> <name pos:start="677:13" pos:end="677:25">us3496_test10</name> <parameter_list pos:start="677:27" pos:end="677:32">(<parameter pos:start="677:28" pos:end="677:31"><decl pos:start="677:28" pos:end="677:31"><type pos:start="677:28" pos:end="677:31"><name pos:start="677:28" pos:end="677:31">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="678:1" pos:end="727:0">{<block_content pos:start="679:5" pos:end="719:5">
    <decl_stmt pos:start="679:5" pos:end="679:18"><decl pos:start="679:5" pos:end="679:17"><type pos:start="679:5" pos:end="679:13"><name pos:start="679:5" pos:end="679:11">EST_CTX</name> <modifier pos:start="679:13" pos:end="679:13">*</modifier></type><name pos:start="679:14" pos:end="679:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="680:5" pos:end="680:31"><decl pos:start="680:5" pos:end="680:30"><type pos:start="680:5" pos:end="680:19"><name pos:start="680:5" pos:end="680:12">unsigned</name> <name pos:start="680:14" pos:end="680:17">char</name> <modifier pos:start="680:19" pos:end="680:19">*</modifier></type><name pos:start="680:20" pos:end="680:23">pkey</name> <init pos:start="680:25" pos:end="680:30">= <expr pos:start="680:27" pos:end="680:30"><name pos:start="680:27" pos:end="680:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="681:5" pos:end="681:34"><decl pos:start="681:5" pos:end="681:33"><type pos:start="681:5" pos:end="681:19"><name pos:start="681:5" pos:end="681:12">unsigned</name> <name pos:start="681:14" pos:end="681:17">char</name> <modifier pos:start="681:19" pos:end="681:19">*</modifier></type><name pos:start="681:20" pos:end="681:26">cacerts</name> <init pos:start="681:28" pos:end="681:33">= <expr pos:start="681:30" pos:end="681:33"><name pos:start="681:30" pos:end="681:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="682:5" pos:end="682:24"><decl pos:start="682:5" pos:end="682:23"><type pos:start="682:5" pos:end="682:7"><name pos:start="682:5" pos:end="682:7">int</name></type> <name pos:start="682:9" pos:end="682:19">cacerts_len</name> <init pos:start="682:21" pos:end="682:23">= <expr pos:start="682:23" pos:end="682:23"><literal type="number" pos:start="682:23" pos:end="682:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="683:5" pos:end="683:32"><decl pos:start="683:5" pos:end="683:31"><type pos:start="683:5" pos:end="683:13"><name pos:start="683:5" pos:end="683:13">EST_ERROR</name></type> <name pos:start="683:15" pos:end="683:16">rc</name> <init pos:start="683:18" pos:end="683:31">= <expr pos:start="683:20" pos:end="683:31"><name pos:start="683:20" pos:end="683:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="684:5" pos:end="684:23"><decl pos:start="684:5" pos:end="684:22"><type pos:start="684:5" pos:end="684:14"><name pos:start="684:5" pos:end="684:12">EVP_PKEY</name> <modifier pos:start="684:14" pos:end="684:14">*</modifier></type><name pos:start="684:15" pos:end="684:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="686:5" pos:end="686:13"><expr pos:start="686:5" pos:end="686:12"><call pos:start="686:5" pos:end="686:12"><name pos:start="686:5" pos:end="686:9">SLEEP</name><argument_list pos:start="686:10" pos:end="686:12">(<argument pos:start="686:11" pos:end="686:11"><expr pos:start="686:11" pos:end="686:11"><literal type="number" pos:start="686:11" pos:end="686:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="688:5" pos:end="690:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="691:5" pos:end="691:63"><expr pos:start="691:5" pos:end="691:62"><name pos:start="691:5" pos:end="691:15">cacerts_len</name> <operator pos:start="691:17" pos:end="691:17">=</operator> <call pos:start="691:19" pos:end="691:62"><name pos:start="691:19" pos:end="691:34">read_binary_file</name><argument_list pos:start="691:35" pos:end="691:62">(<argument pos:start="691:36" pos:end="691:51"><expr pos:start="691:36" pos:end="691:51"><name pos:start="691:36" pos:end="691:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="691:54" pos:end="691:61"><expr pos:start="691:54" pos:end="691:61"><operator pos:start="691:54" pos:end="691:54">&amp;</operator><name pos:start="691:55" pos:end="691:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="693:5" pos:end="695:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="696:5" pos:end="696:50"><expr pos:start="696:5" pos:end="696:49"><name pos:start="696:5" pos:end="696:12">priv_key</name> <operator pos:start="696:14" pos:end="696:14">=</operator> <call pos:start="696:16" pos:end="696:49"><name pos:start="696:16" pos:end="696:31">read_private_key</name><argument_list pos:start="696:32" pos:end="696:49">(<argument pos:start="696:33" pos:end="696:48"><expr pos:start="696:33" pos:end="696:48"><name pos:start="696:33" pos:end="696:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="697:5" pos:end="700:5"><if pos:start="697:5" pos:end="700:5">if <condition pos:start="697:8" pos:end="697:25">(<expr pos:start="697:9" pos:end="697:24"><name pos:start="697:9" pos:end="697:16">priv_key</name> <operator pos:start="697:18" pos:end="697:19">==</operator> <name pos:start="697:21" pos:end="697:24">NULL</name></expr>)</condition> <block pos:start="697:27" pos:end="700:5">{<block_content pos:start="698:9" pos:end="699:15">
	<expr_stmt pos:start="698:9" pos:end="698:80"><expr pos:start="698:9" pos:end="698:79"><call pos:start="698:9" pos:end="698:79"><name pos:start="698:9" pos:end="698:14">printf</name><argument_list pos:start="698:15" pos:end="698:79">(<argument pos:start="698:16" pos:end="698:60"><expr pos:start="698:16" pos:end="698:60"><literal type="string" pos:start="698:16" pos:end="698:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="698:63" pos:end="698:78"><expr pos:start="698:63" pos:end="698:78"><name pos:start="698:63" pos:end="698:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="699:9" pos:end="699:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="702:5" pos:end="703:54"><expr pos:start="702:5" pos:end="703:53"><name pos:start="702:5" pos:end="702:8">ectx</name> <operator pos:start="702:10" pos:end="702:10">=</operator> <call pos:start="702:12" pos:end="703:53"><name pos:start="702:12" pos:end="702:26">est_client_init</name><argument_list pos:start="702:27" pos:end="703:53">(<argument pos:start="702:28" pos:end="702:34"><expr pos:start="702:28" pos:end="702:34"><name pos:start="702:28" pos:end="702:34">cacerts</name></expr></argument>, <argument pos:start="702:37" pos:end="702:47"><expr pos:start="702:37" pos:end="702:47"><name pos:start="702:37" pos:end="702:47">cacerts_len</name></expr></argument>, <argument pos:start="702:50" pos:end="702:68"><expr pos:start="702:50" pos:end="702:68"><name pos:start="702:50" pos:end="702:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="703:28" pos:end="703:52"><expr pos:start="703:28" pos:end="703:52"><name pos:start="703:28" pos:end="703:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="705:5" pos:end="705:59"><expr pos:start="705:5" pos:end="705:58"><name pos:start="705:5" pos:end="705:6">rc</name> <operator pos:start="705:8" pos:end="705:8">=</operator> <call pos:start="705:10" pos:end="705:58"><name pos:start="705:10" pos:end="705:28">est_client_set_auth</name><argument_list pos:start="705:29" pos:end="705:58">(<argument pos:start="705:30" pos:end="705:33"><expr pos:start="705:30" pos:end="705:33"><name pos:start="705:30" pos:end="705:33">ectx</name></expr></argument>, <argument pos:start="705:36" pos:end="705:37"><expr pos:start="705:36" pos:end="705:37"><literal type="string" pos:start="705:36" pos:end="705:37">""</literal></expr></argument>, <argument pos:start="705:40" pos:end="705:41"><expr pos:start="705:40" pos:end="705:41"><literal type="string" pos:start="705:40" pos:end="705:41">""</literal></expr></argument>, <argument pos:start="705:44" pos:end="705:47"><expr pos:start="705:44" pos:end="705:47"><name pos:start="705:44" pos:end="705:47">NULL</name></expr></argument>, <argument pos:start="705:50" pos:end="705:57"><expr pos:start="705:50" pos:end="705:57"><name pos:start="705:50" pos:end="705:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="706:5" pos:end="706:34"><expr pos:start="706:5" pos:end="706:33"><call pos:start="706:5" pos:end="706:33"><name pos:start="706:5" pos:end="706:13">CU_ASSERT</name><argument_list pos:start="706:14" pos:end="706:33">(<argument pos:start="706:15" pos:end="706:32"><expr pos:start="706:15" pos:end="706:32"><name pos:start="706:15" pos:end="706:16">rc</name> <operator pos:start="706:18" pos:end="706:19">==</operator> <name pos:start="706:21" pos:end="706:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="708:5" pos:end="708:96"><expr pos:start="708:5" pos:end="708:95"><name pos:start="708:5" pos:end="708:6">rc</name> <operator pos:start="708:8" pos:end="708:8">=</operator> <call pos:start="708:10" pos:end="708:95"><name pos:start="708:10" pos:end="708:30">est_client_set_server</name><argument_list pos:start="708:31" pos:end="708:95">(<argument pos:start="708:32" pos:end="708:35"><expr pos:start="708:32" pos:end="708:35"><name pos:start="708:32" pos:end="708:35">ectx</name></expr></argument>, <argument pos:start="708:38" pos:end="708:53"><expr pos:start="708:38" pos:end="708:53"><name pos:start="708:38" pos:end="708:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="708:56" pos:end="708:73"><expr pos:start="708:56" pos:end="708:73"><name pos:start="708:56" pos:end="708:73">US3496_SERVER_PORT</name></expr></argument>, <argument pos:start="708:76" pos:end="708:94"><expr pos:start="708:76" pos:end="708:94"><literal type="string" pos:start="708:76" pos:end="708:94">"-._~:@!$&amp;'()*+,;="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="709:5" pos:end="709:34"><expr pos:start="709:5" pos:end="709:33"><call pos:start="709:5" pos:end="709:33"><name pos:start="709:5" pos:end="709:13">CU_ASSERT</name><argument_list pos:start="709:14" pos:end="709:33">(<argument pos:start="709:15" pos:end="709:32"><expr pos:start="709:15" pos:end="709:32"><name pos:start="709:15" pos:end="709:16">rc</name> <operator pos:start="709:18" pos:end="709:19">==</operator> <name pos:start="709:21" pos:end="709:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="711:5" pos:end="713:5"><if pos:start="711:5" pos:end="713:5">if <condition pos:start="711:8" pos:end="711:13">(<expr pos:start="711:9" pos:end="711:12"><name pos:start="711:9" pos:end="711:12">ectx</name></expr>)</condition> <block pos:start="711:15" pos:end="713:5">{<block_content pos:start="712:9" pos:end="712:26">
        <expr_stmt pos:start="712:9" pos:end="712:26"><expr pos:start="712:9" pos:end="712:25"><call pos:start="712:9" pos:end="712:25"><name pos:start="712:9" pos:end="712:19">est_destroy</name><argument_list pos:start="712:20" pos:end="712:25">(<argument pos:start="712:21" pos:end="712:24"><expr pos:start="712:21" pos:end="712:24"><name pos:start="712:21" pos:end="712:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="714:5" pos:end="716:5"><if pos:start="714:5" pos:end="716:5">if <condition pos:start="714:8" pos:end="714:16">(<expr pos:start="714:9" pos:end="714:15"><name pos:start="714:9" pos:end="714:15">cacerts</name></expr>)</condition> <block pos:start="714:18" pos:end="716:5">{<block_content pos:start="715:9" pos:end="715:22">
        <expr_stmt pos:start="715:9" pos:end="715:22"><expr pos:start="715:9" pos:end="715:21"><call pos:start="715:9" pos:end="715:21"><name pos:start="715:9" pos:end="715:12">free</name><argument_list pos:start="715:13" pos:end="715:21">(<argument pos:start="715:14" pos:end="715:20"><expr pos:start="715:14" pos:end="715:20"><name pos:start="715:14" pos:end="715:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="717:5" pos:end="719:5"><if pos:start="717:5" pos:end="719:5">if <condition pos:start="717:8" pos:end="717:13">(<expr pos:start="717:9" pos:end="717:12"><name pos:start="717:9" pos:end="717:12">pkey</name></expr>)</condition> <block pos:start="717:15" pos:end="719:5">{<block_content pos:start="718:9" pos:end="718:19">
        <expr_stmt pos:start="718:9" pos:end="718:19"><expr pos:start="718:9" pos:end="718:18"><call pos:start="718:9" pos:end="718:18"><name pos:start="718:9" pos:end="718:12">free</name><argument_list pos:start="718:13" pos:end="718:18">(<argument pos:start="718:14" pos:end="718:17"><expr pos:start="718:14" pos:end="718:17"><name pos:start="718:14" pos:end="718:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="723:1" pos:end="725:3">/*
 * pass down path segment that is too long (129)
 */</comment>
<cpp:define pos:start="726:1" pos:end="726:155">#<cpp:directive pos:start="726:2" pos:end="726:7">define</cpp:directive> <cpp:macro pos:start="726:9" pos:end="726:24"><name pos:start="726:9" pos:end="726:24">path_segment_max</name></cpp:macro> <cpp:value pos:start="726:26" pos:end="726:155">"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"</cpp:value></cpp:define>
<function pos:start="727:1" pos:end="771:1"><type pos:start="727:1" pos:end="727:11"><specifier pos:start="727:1" pos:end="727:6">static</specifier> <name pos:start="727:8" pos:end="727:11">void</name></type> <name pos:start="727:13" pos:end="727:25">us3496_test11</name> <parameter_list pos:start="727:27" pos:end="727:32">(<parameter pos:start="727:28" pos:end="727:31"><decl pos:start="727:28" pos:end="727:31"><type pos:start="727:28" pos:end="727:31"><name pos:start="727:28" pos:end="727:31">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="728:1" pos:end="771:1">{<block_content pos:start="729:5" pos:end="770:5">
    <decl_stmt pos:start="729:5" pos:end="729:18"><decl pos:start="729:5" pos:end="729:17"><type pos:start="729:5" pos:end="729:13"><name pos:start="729:5" pos:end="729:11">EST_CTX</name> <modifier pos:start="729:13" pos:end="729:13">*</modifier></type><name pos:start="729:14" pos:end="729:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="730:5" pos:end="730:31"><decl pos:start="730:5" pos:end="730:30"><type pos:start="730:5" pos:end="730:19"><name pos:start="730:5" pos:end="730:12">unsigned</name> <name pos:start="730:14" pos:end="730:17">char</name> <modifier pos:start="730:19" pos:end="730:19">*</modifier></type><name pos:start="730:20" pos:end="730:23">pkey</name> <init pos:start="730:25" pos:end="730:30">= <expr pos:start="730:27" pos:end="730:30"><name pos:start="730:27" pos:end="730:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="731:5" pos:end="731:34"><decl pos:start="731:5" pos:end="731:33"><type pos:start="731:5" pos:end="731:19"><name pos:start="731:5" pos:end="731:12">unsigned</name> <name pos:start="731:14" pos:end="731:17">char</name> <modifier pos:start="731:19" pos:end="731:19">*</modifier></type><name pos:start="731:20" pos:end="731:26">cacerts</name> <init pos:start="731:28" pos:end="731:33">= <expr pos:start="731:30" pos:end="731:33"><name pos:start="731:30" pos:end="731:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="732:5" pos:end="732:24"><decl pos:start="732:5" pos:end="732:23"><type pos:start="732:5" pos:end="732:7"><name pos:start="732:5" pos:end="732:7">int</name></type> <name pos:start="732:9" pos:end="732:19">cacerts_len</name> <init pos:start="732:21" pos:end="732:23">= <expr pos:start="732:23" pos:end="732:23"><literal type="number" pos:start="732:23" pos:end="732:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="733:5" pos:end="733:32"><decl pos:start="733:5" pos:end="733:31"><type pos:start="733:5" pos:end="733:13"><name pos:start="733:5" pos:end="733:13">EST_ERROR</name></type> <name pos:start="733:15" pos:end="733:16">rc</name> <init pos:start="733:18" pos:end="733:31">= <expr pos:start="733:20" pos:end="733:31"><name pos:start="733:20" pos:end="733:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="734:5" pos:end="734:23"><decl pos:start="734:5" pos:end="734:22"><type pos:start="734:5" pos:end="734:14"><name pos:start="734:5" pos:end="734:12">EVP_PKEY</name> <modifier pos:start="734:14" pos:end="734:14">*</modifier></type><name pos:start="734:15" pos:end="734:22">priv_key</name></decl>;</decl_stmt>

    <expr_stmt pos:start="736:5" pos:end="736:13"><expr pos:start="736:5" pos:end="736:12"><call pos:start="736:5" pos:end="736:12"><name pos:start="736:5" pos:end="736:9">SLEEP</name><argument_list pos:start="736:10" pos:end="736:12">(<argument pos:start="736:11" pos:end="736:11"><expr pos:start="736:11" pos:end="736:11"><literal type="number" pos:start="736:11" pos:end="736:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="738:5" pos:end="740:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="741:5" pos:end="741:63"><expr pos:start="741:5" pos:end="741:62"><name pos:start="741:5" pos:end="741:15">cacerts_len</name> <operator pos:start="741:17" pos:end="741:17">=</operator> <call pos:start="741:19" pos:end="741:62"><name pos:start="741:19" pos:end="741:34">read_binary_file</name><argument_list pos:start="741:35" pos:end="741:62">(<argument pos:start="741:36" pos:end="741:51"><expr pos:start="741:36" pos:end="741:51"><name pos:start="741:36" pos:end="741:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="741:54" pos:end="741:61"><expr pos:start="741:54" pos:end="741:61"><operator pos:start="741:54" pos:end="741:54">&amp;</operator><name pos:start="741:55" pos:end="741:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="743:5" pos:end="745:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="746:5" pos:end="746:50"><expr pos:start="746:5" pos:end="746:49"><name pos:start="746:5" pos:end="746:12">priv_key</name> <operator pos:start="746:14" pos:end="746:14">=</operator> <call pos:start="746:16" pos:end="746:49"><name pos:start="746:16" pos:end="746:31">read_private_key</name><argument_list pos:start="746:32" pos:end="746:49">(<argument pos:start="746:33" pos:end="746:48"><expr pos:start="746:33" pos:end="746:48"><name pos:start="746:33" pos:end="746:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="747:5" pos:end="750:5"><if pos:start="747:5" pos:end="750:5">if <condition pos:start="747:8" pos:end="747:25">(<expr pos:start="747:9" pos:end="747:24"><name pos:start="747:9" pos:end="747:16">priv_key</name> <operator pos:start="747:18" pos:end="747:19">==</operator> <name pos:start="747:21" pos:end="747:24">NULL</name></expr>)</condition> <block pos:start="747:27" pos:end="750:5">{<block_content pos:start="748:9" pos:end="749:15">
	<expr_stmt pos:start="748:9" pos:end="748:80"><expr pos:start="748:9" pos:end="748:79"><call pos:start="748:9" pos:end="748:79"><name pos:start="748:9" pos:end="748:14">printf</name><argument_list pos:start="748:15" pos:end="748:79">(<argument pos:start="748:16" pos:end="748:60"><expr pos:start="748:16" pos:end="748:60"><literal type="string" pos:start="748:16" pos:end="748:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="748:63" pos:end="748:78"><expr pos:start="748:63" pos:end="748:78"><name pos:start="748:63" pos:end="748:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="749:9" pos:end="749:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="752:5" pos:end="753:54"><expr pos:start="752:5" pos:end="753:53"><name pos:start="752:5" pos:end="752:8">ectx</name> <operator pos:start="752:10" pos:end="752:10">=</operator> <call pos:start="752:12" pos:end="753:53"><name pos:start="752:12" pos:end="752:26">est_client_init</name><argument_list pos:start="752:27" pos:end="753:53">(<argument pos:start="752:28" pos:end="752:34"><expr pos:start="752:28" pos:end="752:34"><name pos:start="752:28" pos:end="752:34">cacerts</name></expr></argument>, <argument pos:start="752:37" pos:end="752:47"><expr pos:start="752:37" pos:end="752:47"><name pos:start="752:37" pos:end="752:47">cacerts_len</name></expr></argument>, <argument pos:start="752:50" pos:end="752:68"><expr pos:start="752:50" pos:end="752:68"><name pos:start="752:50" pos:end="752:68">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="753:28" pos:end="753:52"><expr pos:start="753:28" pos:end="753:52"><name pos:start="753:28" pos:end="753:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="755:5" pos:end="755:59"><expr pos:start="755:5" pos:end="755:58"><name pos:start="755:5" pos:end="755:6">rc</name> <operator pos:start="755:8" pos:end="755:8">=</operator> <call pos:start="755:10" pos:end="755:58"><name pos:start="755:10" pos:end="755:28">est_client_set_auth</name><argument_list pos:start="755:29" pos:end="755:58">(<argument pos:start="755:30" pos:end="755:33"><expr pos:start="755:30" pos:end="755:33"><name pos:start="755:30" pos:end="755:33">ectx</name></expr></argument>, <argument pos:start="755:36" pos:end="755:37"><expr pos:start="755:36" pos:end="755:37"><literal type="string" pos:start="755:36" pos:end="755:37">""</literal></expr></argument>, <argument pos:start="755:40" pos:end="755:41"><expr pos:start="755:40" pos:end="755:41"><literal type="string" pos:start="755:40" pos:end="755:41">""</literal></expr></argument>, <argument pos:start="755:44" pos:end="755:47"><expr pos:start="755:44" pos:end="755:47"><name pos:start="755:44" pos:end="755:47">NULL</name></expr></argument>, <argument pos:start="755:50" pos:end="755:57"><expr pos:start="755:50" pos:end="755:57"><name pos:start="755:50" pos:end="755:57">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="756:5" pos:end="756:34"><expr pos:start="756:5" pos:end="756:33"><call pos:start="756:5" pos:end="756:33"><name pos:start="756:5" pos:end="756:13">CU_ASSERT</name><argument_list pos:start="756:14" pos:end="756:33">(<argument pos:start="756:15" pos:end="756:32"><expr pos:start="756:15" pos:end="756:32"><name pos:start="756:15" pos:end="756:16">rc</name> <operator pos:start="756:18" pos:end="756:19">==</operator> <name pos:start="756:21" pos:end="756:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="758:5" pos:end="759:49"><expr pos:start="758:5" pos:end="759:48"><name pos:start="758:5" pos:end="758:6">rc</name> <operator pos:start="758:8" pos:end="758:8">=</operator> <call pos:start="758:10" pos:end="759:48"><name pos:start="758:10" pos:end="758:30">est_client_set_server</name><argument_list pos:start="758:31" pos:end="759:48">(<argument pos:start="758:32" pos:end="758:35"><expr pos:start="758:32" pos:end="758:35"><name pos:start="758:32" pos:end="758:35">ectx</name></expr></argument>, <argument pos:start="758:38" pos:end="758:53"><expr pos:start="758:38" pos:end="758:53"><name pos:start="758:38" pos:end="758:53">US3496_SERVER_IP</name></expr></argument>, <argument pos:start="758:56" pos:end="758:73"><expr pos:start="758:56" pos:end="758:73"><name pos:start="758:56" pos:end="758:73">US3496_SERVER_PORT</name></expr></argument>,
                               <argument pos:start="759:32" pos:end="759:47"><expr pos:start="759:32" pos:end="759:47"><name pos:start="759:32" pos:end="759:47">path_segment_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="760:5" pos:end="760:34"><expr pos:start="760:5" pos:end="760:33"><call pos:start="760:5" pos:end="760:33"><name pos:start="760:5" pos:end="760:13">CU_ASSERT</name><argument_list pos:start="760:14" pos:end="760:33">(<argument pos:start="760:15" pos:end="760:32"><expr pos:start="760:15" pos:end="760:32"><name pos:start="760:15" pos:end="760:16">rc</name> <operator pos:start="760:18" pos:end="760:19">==</operator> <name pos:start="760:21" pos:end="760:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt pos:start="762:5" pos:end="764:5"><if pos:start="762:5" pos:end="764:5">if <condition pos:start="762:8" pos:end="762:13">(<expr pos:start="762:9" pos:end="762:12"><name pos:start="762:9" pos:end="762:12">ectx</name></expr>)</condition> <block pos:start="762:15" pos:end="764:5">{<block_content pos:start="763:9" pos:end="763:26">
        <expr_stmt pos:start="763:9" pos:end="763:26"><expr pos:start="763:9" pos:end="763:25"><call pos:start="763:9" pos:end="763:25"><name pos:start="763:9" pos:end="763:19">est_destroy</name><argument_list pos:start="763:20" pos:end="763:25">(<argument pos:start="763:21" pos:end="763:24"><expr pos:start="763:21" pos:end="763:24"><name pos:start="763:21" pos:end="763:24">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="765:5" pos:end="767:5"><if pos:start="765:5" pos:end="767:5">if <condition pos:start="765:8" pos:end="765:16">(<expr pos:start="765:9" pos:end="765:15"><name pos:start="765:9" pos:end="765:15">cacerts</name></expr>)</condition> <block pos:start="765:18" pos:end="767:5">{<block_content pos:start="766:9" pos:end="766:22">
        <expr_stmt pos:start="766:9" pos:end="766:22"><expr pos:start="766:9" pos:end="766:21"><call pos:start="766:9" pos:end="766:21"><name pos:start="766:9" pos:end="766:12">free</name><argument_list pos:start="766:13" pos:end="766:21">(<argument pos:start="766:14" pos:end="766:20"><expr pos:start="766:14" pos:end="766:20"><name pos:start="766:14" pos:end="766:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="768:5" pos:end="770:5"><if pos:start="768:5" pos:end="770:5">if <condition pos:start="768:8" pos:end="768:13">(<expr pos:start="768:9" pos:end="768:12"><name pos:start="768:9" pos:end="768:12">pkey</name></expr>)</condition> <block pos:start="768:15" pos:end="770:5">{<block_content pos:start="769:9" pos:end="769:19">
        <expr_stmt pos:start="769:9" pos:end="769:19"><expr pos:start="769:9" pos:end="769:18"><call pos:start="769:9" pos:end="769:18"><name pos:start="769:9" pos:end="769:12">free</name><argument_list pos:start="769:13" pos:end="769:18">(<argument pos:start="769:14" pos:end="769:17"><expr pos:start="769:14" pos:end="769:17"><name pos:start="769:14" pos:end="769:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="774:1" pos:end="777:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="778:1" pos:end="838:1"><type pos:start="778:1" pos:end="778:3"><name pos:start="778:1" pos:end="778:3">int</name></type> <name pos:start="778:5" pos:end="778:20">us3496_add_suite</name> <parameter_list pos:start="778:22" pos:end="778:27">(<parameter pos:start="778:23" pos:end="778:26"><decl pos:start="778:23" pos:end="778:26"><type pos:start="778:23" pos:end="778:26"><name pos:start="778:23" pos:end="778:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="779:1" pos:end="838:1">{<block_content pos:start="780:5" pos:end="838:0">
    <decl_stmt pos:start="780:5" pos:end="783:0"><decl pos:start="780:5" pos:end="780:25"><type pos:start="780:5" pos:end="780:16"><name pos:start="780:5" pos:end="780:16">CU_ErrorCode</name></type> <name pos:start="780:18" pos:end="780:25">CU_error</name></decl>;</decl_stmt>
    
<cpp:ifdef pos:start="782:1" pos:end="782:17">#<cpp:directive pos:start="782:2" pos:end="782:6">ifdef</cpp:directive> <name pos:start="782:8" pos:end="782:17">HAVE_CUNIT</name></cpp:ifdef>
   <decl_stmt pos:start="783:4" pos:end="783:27"><decl pos:start="783:4" pos:end="783:26"><type pos:start="783:4" pos:end="783:12"><name pos:start="783:4" pos:end="783:12">CU_pSuite</name></type> <name pos:start="783:14" pos:end="783:19">pSuite</name> <init pos:start="783:21" pos:end="783:26">= <expr pos:start="783:23" pos:end="783:26"><name pos:start="783:23" pos:end="783:26">NULL</name></expr></init></decl>;</decl_stmt>

   <comment type="block" pos:start="785:4" pos:end="785:36">/* add a suite to the registry */</comment>
   <expr_stmt pos:start="786:4" pos:end="788:48"><expr pos:start="786:4" pos:end="788:47"><name pos:start="786:4" pos:end="786:9">pSuite</name> <operator pos:start="786:11" pos:end="786:11">=</operator> <call pos:start="786:13" pos:end="788:47"><name pos:start="786:13" pos:end="786:24">CU_add_suite</name><argument_list pos:start="786:25" pos:end="788:47">(<argument pos:start="786:26" pos:end="786:55"><expr pos:start="786:26" pos:end="786:55"><literal type="string" pos:start="786:26" pos:end="786:55">"us3496_client_proxy_path_seg"</literal></expr></argument>, 
	                  <argument pos:start="787:27" pos:end="787:43"><expr pos:start="787:27" pos:end="787:43"><name pos:start="787:27" pos:end="787:43">us3496_init_suite</name></expr></argument>, 
			  <argument pos:start="788:27" pos:end="788:46"><expr pos:start="788:27" pos:end="788:46"><name pos:start="788:27" pos:end="788:46">us3496_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt pos:start="789:4" pos:end="795:0"><if pos:start="789:4" pos:end="795:0">if <condition pos:start="789:7" pos:end="789:22">(<expr pos:start="789:8" pos:end="789:21"><name pos:start="789:8" pos:end="789:11">NULL</name> <operator pos:start="789:13" pos:end="789:14">==</operator> <name pos:start="789:16" pos:end="789:21">pSuite</name></expr>)</condition> <block pos:start="789:24" pos:end="795:0">{<block_content pos:start="790:7" pos:end="791:28">
      <expr_stmt pos:start="790:7" pos:end="790:28"><expr pos:start="790:7" pos:end="790:27"><call pos:start="790:7" pos:end="790:27"><name pos:start="790:7" pos:end="790:25">CU_cleanup_registry</name><argument_list pos:start="790:26" pos:end="790:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="791:7" pos:end="791:28">return <expr pos:start="791:14" pos:end="791:27"><call pos:start="791:14" pos:end="791:27"><name pos:start="791:14" pos:end="791:25">CU_get_error</name><argument_list pos:start="791:26" pos:end="791:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>
   
<cpp:ifdef pos:start="794:1" pos:end="794:12">#<cpp:directive pos:start="794:2" pos:end="794:6">ifdef</cpp:directive> <name pos:start="794:8" pos:end="794:12">WIN32</name></cpp:ifdef>
    <expr_stmt pos:start="795:5" pos:end="795:57"><expr pos:start="795:5" pos:end="795:56"><call pos:start="795:5" pos:end="795:56"><name pos:start="795:5" pos:end="795:29">InitializeCriticalSection</name> <argument_list pos:start="795:31" pos:end="795:56">(<argument pos:start="795:32" pos:end="795:55"><expr pos:start="795:32" pos:end="795:55"><operator pos:start="795:32" pos:end="795:32">&amp;</operator><name pos:start="795:33" pos:end="795:55">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="796:5" pos:end="798:0"><expr pos:start="796:5" pos:end="796:60"><call pos:start="796:5" pos:end="796:60"><name pos:start="796:5" pos:end="796:19">est_init_logger</name><argument_list pos:start="796:20" pos:end="796:60">(<argument pos:start="796:21" pos:end="796:36"><expr pos:start="796:21" pos:end="796:36"><name pos:start="796:21" pos:end="796:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="796:39" pos:end="796:59"><expr pos:start="796:39" pos:end="796:59"><operator pos:start="796:39" pos:end="796:39">&amp;</operator><name pos:start="796:40" pos:end="796:59">us3496_logger_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="797:1" pos:end="797:6">#<cpp:directive pos:start="797:2" pos:end="797:6">endif</cpp:directive></cpp:endif>

   <comment type="block" pos:start="799:4" pos:end="801:6">/*
    * check to see if path segment support has been compiled in
    */</comment>
   <if_stmt pos:start="802:4" pos:end="806:4"><if pos:start="802:4" pos:end="806:4">if <condition pos:start="802:7" pos:end="802:29">(<expr pos:start="802:8" pos:end="802:28"><operator pos:start="802:8" pos:end="802:8">!</operator><call pos:start="802:9" pos:end="802:28"><name pos:start="802:9" pos:end="802:26">path_seg_supported</name><argument_list pos:start="802:27" pos:end="802:28">()</argument_list></call></expr>)</condition> <block pos:start="802:31" pos:end="806:4">{<block_content pos:start="803:8" pos:end="805:16">
       <expr_stmt pos:start="803:8" pos:end="803:113"><expr pos:start="803:8" pos:end="803:112"><call pos:start="803:8" pos:end="803:112"><name pos:start="803:8" pos:end="803:13">printf</name><argument_list pos:start="803:14" pos:end="803:112">(<argument pos:start="803:15" pos:end="803:111"><expr pos:start="803:15" pos:end="803:111"><literal type="string" pos:start="803:15" pos:end="803:111">"URI Path Segment is not supported in this build of EST.  Rebuild using --with-uriparser-dir= \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt pos:start="804:8" pos:end="804:32"><expr pos:start="804:8" pos:end="804:31"><name pos:start="804:8" pos:end="804:27">path_segment_support</name> <operator pos:start="804:29" pos:end="804:29">=</operator> <literal type="number" pos:start="804:31" pos:end="804:31">0</literal></expr>;</expr_stmt>
       <return pos:start="805:8" pos:end="805:16">return <expr pos:start="805:15" pos:end="805:15"><literal type="number" pos:start="805:15" pos:end="805:15">0</literal></expr>;</return>
   </block_content>}</block></if></if_stmt>
   <expr_stmt pos:start="807:4" pos:end="807:28"><expr pos:start="807:4" pos:end="807:27"><name pos:start="807:4" pos:end="807:23">path_segment_support</name> <operator pos:start="807:25" pos:end="807:25">=</operator> <literal type="number" pos:start="807:27" pos:end="807:27">1</literal></expr>;</expr_stmt> 
   
   <if_stmt pos:start="809:4" pos:end="833:4"><if pos:start="809:4" pos:end="833:4">if <condition pos:start="809:7" pos:end="809:28">(<expr pos:start="809:8" pos:end="809:27"><name pos:start="809:8" pos:end="809:27">path_segment_support</name></expr>)</condition> <block pos:start="809:30" pos:end="833:4">{<block_content pos:start="813:8" pos:end="832:8">
       
       <comment type="block" pos:start="811:8" pos:end="811:39">/* add the tests to the suite */</comment>
       <comment type="block" pos:start="812:8" pos:end="812:74">/* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */</comment>
       <if_stmt pos:start="813:8" pos:end="832:8"><if pos:start="813:8" pos:end="832:8">if <condition pos:start="813:11" pos:end="825:12">(
           <expr pos:start="814:12" pos:end="824:132"><operator pos:start="814:12" pos:end="814:12">(</operator><name pos:start="814:13" pos:end="814:16">NULL</name> <operator pos:start="814:18" pos:end="814:19">==</operator> <call pos:start="814:21" pos:end="814:115"><name pos:start="814:21" pos:end="814:31">CU_add_test</name><argument_list pos:start="814:32" pos:end="814:115">(<argument pos:start="814:33" pos:end="814:38"><expr pos:start="814:33" pos:end="814:38"><name pos:start="814:33" pos:end="814:38">pSuite</name></expr></argument>, <argument pos:start="814:41" pos:end="814:100"><expr pos:start="814:41" pos:end="814:100"><literal type="string" pos:start="814:41" pos:end="814:100">"EST Client Set Server: correct parameters, no path segment"</literal></expr></argument>, <argument pos:start="814:103" pos:end="814:114"><expr pos:start="814:103" pos:end="814:114"><name pos:start="814:103" pos:end="814:114">us3496_test1</name></expr></argument>)</argument_list></call><operator pos:start="814:116" pos:end="814:116">)</operator> <operator pos:start="814:118" pos:end="814:119">||</operator>
           <operator pos:start="815:12" pos:end="815:12">(</operator><name pos:start="815:13" pos:end="815:16">NULL</name> <operator pos:start="815:18" pos:end="815:19">==</operator> <call pos:start="815:21" pos:end="815:118"><name pos:start="815:21" pos:end="815:31">CU_add_test</name><argument_list pos:start="815:32" pos:end="815:118">(<argument pos:start="815:33" pos:end="815:38"><expr pos:start="815:33" pos:end="815:38"><name pos:start="815:33" pos:end="815:38">pSuite</name></expr></argument>, <argument pos:start="815:41" pos:end="815:103"><expr pos:start="815:41" pos:end="815:103"><literal type="string" pos:start="815:41" pos:end="815:103">"EST Client Set Server: correct parameters, valid path segment"</literal></expr></argument>, <argument pos:start="815:106" pos:end="815:117"><expr pos:start="815:106" pos:end="815:117"><name pos:start="815:106" pos:end="815:117">us3496_test2</name></expr></argument>)</argument_list></call><operator pos:start="815:119" pos:end="815:119">)</operator> <operator pos:start="815:121" pos:end="815:122">||</operator>
           <operator pos:start="816:12" pos:end="816:12">(</operator><name pos:start="816:13" pos:end="816:16">NULL</name> <operator pos:start="816:18" pos:end="816:19">==</operator> <call pos:start="816:21" pos:end="816:126"><name pos:start="816:21" pos:end="816:31">CU_add_test</name><argument_list pos:start="816:32" pos:end="816:126">(<argument pos:start="816:33" pos:end="816:38"><expr pos:start="816:33" pos:end="816:38"><name pos:start="816:33" pos:end="816:38">pSuite</name></expr></argument>, <argument pos:start="816:41" pos:end="816:111"><expr pos:start="816:41" pos:end="816:111"><literal type="string" pos:start="816:41" pos:end="816:111">"EST Client Set Server: correct parameters, multi segment path segment"</literal></expr></argument>, <argument pos:start="816:114" pos:end="816:125"><expr pos:start="816:114" pos:end="816:125"><name pos:start="816:114" pos:end="816:125">us3496_test3</name></expr></argument>)</argument_list></call><operator pos:start="816:127" pos:end="816:127">)</operator> <operator pos:start="816:129" pos:end="816:130">||</operator>
           <operator pos:start="817:12" pos:end="817:12">(</operator><name pos:start="817:13" pos:end="817:16">NULL</name> <operator pos:start="817:18" pos:end="817:19">==</operator> <call pos:start="817:21" pos:end="817:136"><name pos:start="817:21" pos:end="817:31">CU_add_test</name><argument_list pos:start="817:32" pos:end="817:136">(<argument pos:start="817:33" pos:end="817:38"><expr pos:start="817:33" pos:end="817:38"><name pos:start="817:33" pos:end="817:38">pSuite</name></expr></argument>, <argument pos:start="817:41" pos:end="817:121"><expr pos:start="817:41" pos:end="817:121"><literal type="string" pos:start="817:41" pos:end="817:121">"EST Client Set Server: correct parameters, valid path segment - all valid chars"</literal></expr></argument>, <argument pos:start="817:124" pos:end="817:135"><expr pos:start="817:124" pos:end="817:135"><name pos:start="817:124" pos:end="817:135">us3496_test4</name></expr></argument>)</argument_list></call><operator pos:start="817:137" pos:end="817:137">)</operator> <operator pos:start="817:139" pos:end="817:140">||</operator>
           <operator pos:start="818:12" pos:end="818:12">(</operator><name pos:start="818:13" pos:end="818:16">NULL</name> <operator pos:start="818:18" pos:end="818:19">==</operator> <call pos:start="818:21" pos:end="818:120"><name pos:start="818:21" pos:end="818:31">CU_add_test</name><argument_list pos:start="818:32" pos:end="818:120">(<argument pos:start="818:33" pos:end="818:38"><expr pos:start="818:33" pos:end="818:38"><name pos:start="818:33" pos:end="818:38">pSuite</name></expr></argument>, <argument pos:start="818:41" pos:end="818:105"><expr pos:start="818:41" pos:end="818:105"><literal type="string" pos:start="818:41" pos:end="818:105">"EST Client Set Server: correct parameters, invalid path segment"</literal></expr></argument>, <argument pos:start="818:108" pos:end="818:119"><expr pos:start="818:108" pos:end="818:119"><name pos:start="818:108" pos:end="818:119">us3496_test5</name></expr></argument>)</argument_list></call><operator pos:start="818:121" pos:end="818:121">)</operator> <operator pos:start="818:123" pos:end="818:124">||</operator>
           <operator pos:start="819:12" pos:end="819:12">(</operator><name pos:start="819:13" pos:end="819:16">NULL</name> <operator pos:start="819:18" pos:end="819:19">==</operator> <call pos:start="819:21" pos:end="819:121"><name pos:start="819:21" pos:end="819:31">CU_add_test</name><argument_list pos:start="819:32" pos:end="819:121">(<argument pos:start="819:33" pos:end="819:38"><expr pos:start="819:33" pos:end="819:38"><name pos:start="819:33" pos:end="819:38">pSuite</name></expr></argument>, <argument pos:start="819:41" pos:end="819:106"><expr pos:start="819:41" pos:end="819:106"><literal type="string" pos:start="819:41" pos:end="819:106">"EST Client Set Server: correct parameters, path segment too long"</literal></expr></argument>, <argument pos:start="819:109" pos:end="819:120"><expr pos:start="819:109" pos:end="819:120"><name pos:start="819:109" pos:end="819:120">us3496_test6</name></expr></argument>)</argument_list></call><operator pos:start="819:122" pos:end="819:122">)</operator> <operator pos:start="819:124" pos:end="819:125">||</operator>
           <operator pos:start="820:12" pos:end="820:12">(</operator><name pos:start="820:13" pos:end="820:16">NULL</name> <operator pos:start="820:18" pos:end="820:19">==</operator> <call pos:start="820:21" pos:end="820:136"><name pos:start="820:21" pos:end="820:31">CU_add_test</name><argument_list pos:start="820:32" pos:end="820:136">(<argument pos:start="820:33" pos:end="820:38"><expr pos:start="820:33" pos:end="820:38"><name pos:start="820:33" pos:end="820:38">pSuite</name></expr></argument>, <argument pos:start="820:41" pos:end="820:121"><expr pos:start="820:41" pos:end="820:121"><literal type="string" pos:start="820:41" pos:end="820:121">"EST Client Set Server: correct parameters, path segment equals operation string"</literal></expr></argument>, <argument pos:start="820:124" pos:end="820:135"><expr pos:start="820:124" pos:end="820:135"><name pos:start="820:124" pos:end="820:135">us3496_test7</name></expr></argument>)</argument_list></call><operator pos:start="820:137" pos:end="820:137">)</operator> <operator pos:start="820:139" pos:end="820:140">||</operator>
           <operator pos:start="821:12" pos:end="821:12">(</operator><name pos:start="821:13" pos:end="821:16">NULL</name> <operator pos:start="821:18" pos:end="821:19">==</operator> <call pos:start="821:21" pos:end="821:138"><name pos:start="821:21" pos:end="821:31">CU_add_test</name><argument_list pos:start="821:32" pos:end="821:138">(<argument pos:start="821:33" pos:end="821:38"><expr pos:start="821:33" pos:end="821:38"><name pos:start="821:33" pos:end="821:38">pSuite</name></expr></argument>, <argument pos:start="821:41" pos:end="821:123"><expr pos:start="821:41" pos:end="821:123"><literal type="string" pos:start="821:41" pos:end="821:123">"EST Client Set Server: correct parameters, path segment contains operation string"</literal></expr></argument>, <argument pos:start="821:126" pos:end="821:137"><expr pos:start="821:126" pos:end="821:137"><name pos:start="821:126" pos:end="821:137">us3496_test8</name></expr></argument>)</argument_list></call><operator pos:start="821:139" pos:end="821:139">)</operator> <operator pos:start="821:141" pos:end="821:142">||</operator>
           <operator pos:start="822:12" pos:end="822:12">(</operator><name pos:start="822:13" pos:end="822:16">NULL</name> <operator pos:start="822:18" pos:end="822:19">==</operator> <call pos:start="822:21" pos:end="822:132"><name pos:start="822:21" pos:end="822:31">CU_add_test</name><argument_list pos:start="822:32" pos:end="822:132">(<argument pos:start="822:33" pos:end="822:38"><expr pos:start="822:33" pos:end="822:38"><name pos:start="822:33" pos:end="822:38">pSuite</name></expr></argument>, <argument pos:start="822:41" pos:end="822:117"><expr pos:start="822:41" pos:end="822:117"><literal type="string" pos:start="822:41" pos:end="822:117">"EST Client Set Server: correct parameters, path segment is the empty string"</literal></expr></argument>, <argument pos:start="822:120" pos:end="822:131"><expr pos:start="822:120" pos:end="822:131"><name pos:start="822:120" pos:end="822:131">us3496_test9</name></expr></argument>)</argument_list></call><operator pos:start="822:133" pos:end="822:133">)</operator> <operator pos:start="822:135" pos:end="822:136">||</operator>
           <operator pos:start="823:12" pos:end="823:12">(</operator><name pos:start="823:13" pos:end="823:16">NULL</name> <operator pos:start="823:18" pos:end="823:19">==</operator> <call pos:start="823:21" pos:end="823:130"><name pos:start="823:21" pos:end="823:31">CU_add_test</name><argument_list pos:start="823:32" pos:end="823:130">(<argument pos:start="823:33" pos:end="823:38"><expr pos:start="823:33" pos:end="823:38"><name pos:start="823:33" pos:end="823:38">pSuite</name></expr></argument>, <argument pos:start="823:41" pos:end="823:114"><expr pos:start="823:41" pos:end="823:114"><literal type="string" pos:start="823:41" pos:end="823:114">"EST Client Set Server: correct parameters, path segment contains a colon"</literal></expr></argument>, <argument pos:start="823:117" pos:end="823:129"><expr pos:start="823:117" pos:end="823:129"><name pos:start="823:117" pos:end="823:129">us3496_test10</name></expr></argument>)</argument_list></call><operator pos:start="823:131" pos:end="823:131">)</operator> <operator pos:start="823:133" pos:end="823:134">||</operator>
           <operator pos:start="824:12" pos:end="824:12">(</operator><name pos:start="824:13" pos:end="824:16">NULL</name> <operator pos:start="824:18" pos:end="824:19">==</operator> <call pos:start="824:21" pos:end="824:131"><name pos:start="824:21" pos:end="824:31">CU_add_test</name><argument_list pos:start="824:32" pos:end="824:131">(<argument pos:start="824:33" pos:end="824:38"><expr pos:start="824:33" pos:end="824:38"><name pos:start="824:33" pos:end="824:38">pSuite</name></expr></argument>, <argument pos:start="824:41" pos:end="824:115"><expr pos:start="824:41" pos:end="824:115"><literal type="string" pos:start="824:41" pos:end="824:115">"EST Client Set Server: correct parameters, path segment is the max length"</literal></expr></argument>, <argument pos:start="824:118" pos:end="824:130"><expr pos:start="824:118" pos:end="824:130"><name pos:start="824:118" pos:end="824:130">us3496_test11</name></expr></argument>)</argument_list></call><operator pos:start="824:132" pos:end="824:132">)</operator></expr>
           )</condition> <block pos:start="825:14" pos:end="832:8">{<block_content pos:start="826:12" pos:end="831:33">
           <expr_stmt pos:start="826:12" pos:end="826:37"><expr pos:start="826:12" pos:end="826:36"><name pos:start="826:12" pos:end="826:19">CU_error</name> <operator pos:start="826:21" pos:end="826:21">=</operator> <call pos:start="826:23" pos:end="826:36"><name pos:start="826:23" pos:end="826:34">CU_get_error</name><argument_list pos:start="826:35" pos:end="826:36">()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt pos:start="827:12" pos:end="827:36"><expr pos:start="827:12" pos:end="827:35"><call pos:start="827:12" pos:end="827:35"><name pos:start="827:12" pos:end="827:17">printf</name><argument_list pos:start="827:18" pos:end="827:35">(<argument pos:start="827:19" pos:end="827:24"><expr pos:start="827:19" pos:end="827:24"><literal type="string" pos:start="827:19" pos:end="827:24">"%d\n"</literal></expr></argument>, <argument pos:start="827:27" pos:end="827:34"><expr pos:start="827:27" pos:end="827:34"><name pos:start="827:27" pos:end="827:34">CU_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           
           <expr_stmt pos:start="829:12" pos:end="829:33"><expr pos:start="829:12" pos:end="829:32"><call pos:start="829:12" pos:end="829:32"><name pos:start="829:12" pos:end="829:30">CU_cleanup_registry</name><argument_list pos:start="829:31" pos:end="829:32">()</argument_list></call></expr>;</expr_stmt>
           <expr_stmt pos:start="830:12" pos:end="830:46"><expr pos:start="830:12" pos:end="830:45"><call pos:start="830:12" pos:end="830:45"><name pos:start="830:12" pos:end="830:17">printf</name><argument_list pos:start="830:18" pos:end="830:45">(<argument pos:start="830:19" pos:end="830:24"><expr pos:start="830:19" pos:end="830:24"><literal type="string" pos:start="830:19" pos:end="830:24">"%s\n"</literal></expr></argument>, <argument pos:start="830:27" pos:end="830:44"><expr pos:start="830:27" pos:end="830:44"><call pos:start="830:27" pos:end="830:44"><name pos:start="830:27" pos:end="830:42">CU_get_error_msg</name><argument_list pos:start="830:43" pos:end="830:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <return pos:start="831:12" pos:end="831:33">return <expr pos:start="831:19" pos:end="831:32"><call pos:start="831:19" pos:end="831:32"><name pos:start="831:19" pos:end="831:30">CU_get_error</name><argument_list pos:start="831:31" pos:end="831:32">()</argument_list></call></expr>;</return>
       </block_content>}</block></if></if_stmt>
   </block_content>}</block></if></if_stmt>
   

   <return pos:start="836:4" pos:end="838:0">return <expr pos:start="836:11" pos:end="836:21"><name pos:start="836:11" pos:end="836:21">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="837:1" pos:end="837:6">#<cpp:directive pos:start="837:2" pos:end="837:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


</unit>
