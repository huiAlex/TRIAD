<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us1864.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us1864.c - Unit Tests for User Story 1864 - Enable Token Auth mode in server
 *
 * March, 2015
 *
 * Copyright (c) 2015, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="25:1" pos:end="25:18">#<cpp:directive pos:start="25:2" pos:end="25:8">include</cpp:directive> <cpp:file pos:start="25:10" pos:end="25:18">&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt pos:start="27:1" pos:end="27:37"><decl pos:start="27:1" pos:end="27:36"><type pos:start="27:1" pos:end="27:22"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:15">unsigned</name> <name pos:start="27:17" pos:end="27:20">char</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:29">cacerts</name> <init pos:start="27:31" pos:end="27:36">= <expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="28:1" pos:end="61:0"><decl pos:start="28:1" pos:end="28:26"><type pos:start="28:1" pos:end="28:10"><specifier pos:start="28:1" pos:end="28:6">static</specifier> <name pos:start="28:8" pos:end="28:10">int</name></type> <name pos:start="28:12" pos:end="28:22">cacerts_len</name> <init pos:start="28:24" pos:end="28:26">= <expr pos:start="28:26" pos:end="28:26"><literal type="number" pos:start="28:26" pos:end="28:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="30:1" pos:end="30:33">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:23"><name pos:start="30:9" pos:end="30:23">US1864_TCP_PORT</name></cpp:macro>     <cpp:value pos:start="30:29" pos:end="30:33">29001</cpp:value></cpp:define>

<comment type="block" pos:start="32:1" pos:end="37:3">/*
 * The following CSR was generated using the following openssl command and theng
 * using cat on the rsa.req file:
 *
 * openssl req -newkey rsa:2048 -keyout rsakey.pem -keyform PEM -out rsa.req -outform PEM
 */</comment>
<cpp:define pos:start="38:1" pos:end="38:1002">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:29"><name pos:start="38:9" pos:end="38:29">US1864_PKCS10_RSA2048</name></cpp:macro>   <cpp:value pos:start="38:33" pos:end="38:1002">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDJA9mdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:1590">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:30">US1864_PKCS10_4096_REQ</name></cpp:macro>  <cpp:value pos:start="39:33" pos:end="39:1590">"MIIEZjCCAk4CAQAwITEPMA0GA1UEAwwGSkpUZXN0MQ4wDAYDVQQFEwUwMDAwMTCC\nAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALfLlHxqzObiKWDfX8saZ4l3\n1JyrCP4xmyQitY2pIIGlLvHT7t1WZ0LO9uo0uB7b/8iGbXki8FgqSm1jROe5lwCN\nDIhTJdG4b705c6XmD3Mh436De9d4gzpjedA2qurSI9+GVNVgU0ZOWJFu9g+y3iRH\ndfsjO9u0E2MfZWWR8M72gBqzvbDDPN4BDwLa9TkQ2Rsxf3h2d7bN2DNShNSYX/dE\nIX89d9uC6FegsHQxHINUOdZzeAn3yuQMBU+FwohEl9Ub8Qu9gub2MJUrYNRQnii7\nduvq5/UjkhjNWzIh7LAbdaM+0wSmCe0ju+wKbayUZZkrqoVK6bWZzFs4dYtn95/S\nVVOv95MD5D1EokXw3Iih7GRJygtWn5e4/YO68LONBF7UE24vgBwEieF6J0bFAlxw\n15s7pIalkGF7CUbitRhbB3kTjGfUDR8YpSsKdqxHNmWBXY7ZVk4T8K7168cNWSOL\netZpTk4BtoUJBnWP8Uq38YOi6389U24gmZtGpSpJEEtDy1MJ8Ha4PZE/VkFtmUWq\nbETOx2kubGwc9vXvWfi5BxE2VvetGNsy2EQEZPVwscYaCy0/yO3fu06coEtr7Ekr\ngapDDEzVtiP9NPe5q18Azu+T9ngoOx3PqrCPG1BDN6z1Ue2tSDdOxKNFMNMwqYIn\nZP9MXh+tz8RaKvsclv9JAgMBAAGgADANBgkqhkiG9w0BAQUFAAOCAgEAJMwZ4IUB\nUSH5wQBfsYT4SxtKsZtvun6QX0+7jNMtzzQUOqO79Kx/DKpzsKxLNvHKmFqcxA7g\ngbEwXkAP5+VaMD92DghcNjXOqGKclZdmGj2oREqZwzvTDRo4zP1yen5vgL/Yz7SA\nxze8wPg2WhlV9+qvkVCpHN3EUIfO+rBgi2reo/vF7xq5CAU4UtQ1h4gHax67Yww8\nJmypyGGa0ad0Z8ruiclI/QtluADUxy1YM0Up2FC0s7j72xzrRpEl1fPlOi/bFaZp\nsr4zllOpwnRdxvffXO7gXtXVIr4IHVHNWj6kmDzyk0ovat2Ms5aGUcMDN6Jm8KIB\nNBVH5FgkBVQOPSngkwnEOj0RsaKSxT5EfmOxm9pCrAE3rNdVOgO4t8wZ6DQUqye/\nBUdmgXtWoGsKIg8oR5HAWBER8yw/qdiRlBGgN/PKZdpmYI2TEfZvp/nXwG7QLjGx\nsj5TWeRKNgghUCu3uF+1s0R+gqgY1S9GgiDSifL7+h+bXJ4ncyRGq+XPnrfMiRkB\neSyv3kyIxtZfAB6TjkUbtVfo2KrfqNxu4lbJYE2b6hs1L6t7YPhjubz9aES7wES7\nk+ZZPZn/k/GsqUpsWHnEFEvi5C5WPrnpvVN6rKh0fB+AukGrS+9EK4KNZWfV/yf8\nXN5qWyOtgd4oLUUsgFDJsqNh6A1mlmx6CnY=\n"</cpp:value></cpp:define>

<cpp:define pos:start="41:1" pos:end="41:86">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:28">US1864_ENROLL_URL_BA</name></cpp:macro>    <cpp:value pos:start="41:33" pos:end="41:86">"https://127.0.0.1:29001/.well-known/est/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:66">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:24"><name pos:start="42:9" pos:end="42:24">US1864_PKCS10_CT</name></cpp:macro>        <cpp:value pos:start="42:33" pos:end="42:66">"Content-Type: application/pkcs10"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:48">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:26">US1864_UIDPWD_GOOD</name></cpp:macro>      <cpp:value pos:start="43:33" pos:end="43:48">"estuser:estpwd"</cpp:value></cpp:define>
<cpp:ifndef pos:start="44:1" pos:end="44:13">#<cpp:directive pos:start="44:2" pos:end="44:7">ifndef</cpp:directive> <name pos:start="44:9" pos:end="44:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="45:1" pos:end="45:53">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:22">US1864_CACERTS</name></cpp:macro>          <cpp:value pos:start="45:33" pos:end="45:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="46:1" pos:end="46:53">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:21"><name pos:start="46:9" pos:end="46:21">US1864_CACERT</name></cpp:macro>           <cpp:value pos:start="46:33" pos:end="46:53">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:53">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:27">US1864_TRUSTED_CERT</name></cpp:macro>     <cpp:value pos:start="47:33" pos:end="47:53">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:74">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:26">US1864_SERVER_CERT</name></cpp:macro>      <cpp:value pos:start="48:33" pos:end="48:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:74">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:25">US1864_SERVER_KEY</name></cpp:macro>       <cpp:value pos:start="49:33" pos:end="49:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:74">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:26"><name pos:start="50:9" pos:end="50:26">US1864_CLIENT_CERT</name></cpp:macro>      <cpp:value pos:start="50:33" pos:end="50:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:74">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:25">US1864_CLIENT_KEY</name></cpp:macro>       <cpp:value pos:start="51:33" pos:end="51:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="52:1" pos:end="52:5">#<cpp:directive pos:start="52:2" pos:end="52:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="53:1" pos:end="53:55">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:22">US1864_CACERTS</name></cpp:macro>          <cpp:value pos:start="53:33" pos:end="53:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:55">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:21"><name pos:start="54:9" pos:end="54:21">US1864_CACERT</name></cpp:macro>           <cpp:value pos:start="54:33" pos:end="54:55">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:54">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:27">US1864_TRUSTED_CERT</name></cpp:macro>     <cpp:value pos:start="55:33" pos:end="55:54">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:77">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:26"><name pos:start="56:9" pos:end="56:26">US1864_SERVER_CERT</name></cpp:macro>      <cpp:value pos:start="56:33" pos:end="56:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:77">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:25">US1864_SERVER_KEY</name></cpp:macro>       <cpp:value pos:start="57:33" pos:end="57:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="58:1" pos:end="58:77">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:26"><name pos:start="58:9" pos:end="58:26">US1864_CLIENT_CERT</name></cpp:macro>      <cpp:value pos:start="58:33" pos:end="58:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="59:1" pos:end="59:77">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:25">US1864_CLIENT_KEY</name></cpp:macro>       <cpp:value pos:start="59:33" pos:end="59:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="60:1" pos:end="60:6">#<cpp:directive pos:start="60:2" pos:end="60:6">endif</cpp:directive></cpp:endif>

<comment type="block" pos:start="62:1" pos:end="67:3">/*
 * curl_data_cb is passed to Curl and will be called from Curl whenever data
 * has been received, or if this function has been specified to retrieve the
 * http headers.  In this test it's used to retrieve the http headers and
 * look for the "bearer" token Authorization challenge.
 */</comment>
<decl_stmt pos:start="68:1" pos:end="68:28"><decl pos:start="68:1" pos:end="68:27"><type pos:start="68:1" pos:end="68:10"><specifier pos:start="68:1" pos:end="68:6">static</specifier> <name pos:start="68:8" pos:end="68:10">int</name></type> <name pos:start="68:12" pos:end="68:23">bearer_found</name> <init pos:start="68:25" pos:end="68:27">= <expr pos:start="68:27" pos:end="68:27"><literal type="number" pos:start="68:27" pos:end="68:27">0</literal></expr></init></decl>;</decl_stmt>
<function pos:start="69:1" pos:end="88:1"><type pos:start="69:1" pos:end="69:13"><specifier pos:start="69:1" pos:end="69:6">static</specifier> <name pos:start="69:8" pos:end="69:13">size_t</name></type> <name pos:start="69:15" pos:end="69:26">curl_data_cb</name> <parameter_list pos:start="69:28" pos:end="70:43">(<parameter pos:start="69:29" pos:end="69:37"><decl pos:start="69:29" pos:end="69:37"><type pos:start="69:29" pos:end="69:37"><name pos:start="69:29" pos:end="69:32">void</name> <modifier pos:start="69:34" pos:end="69:34">*</modifier></type><name pos:start="69:35" pos:end="69:37">ptr</name></decl></parameter>, <parameter pos:start="69:40" pos:end="69:50"><decl pos:start="69:40" pos:end="69:50"><type pos:start="69:40" pos:end="69:50"><name pos:start="69:40" pos:end="69:45">size_t</name></type> <name pos:start="69:47" pos:end="69:50">size</name></decl></parameter>, <parameter pos:start="69:53" pos:end="69:64"><decl pos:start="69:53" pos:end="69:64"><type pos:start="69:53" pos:end="69:64"><name pos:start="69:53" pos:end="69:58">size_t</name></type> <name pos:start="69:60" pos:end="69:64">nmemb</name></decl></parameter>,
                            <parameter pos:start="70:29" pos:end="70:42"><decl pos:start="70:29" pos:end="70:42"><type pos:start="70:29" pos:end="70:42"><name pos:start="70:29" pos:end="70:32">void</name> <modifier pos:start="70:34" pos:end="70:34">*</modifier></type><name pos:start="70:35" pos:end="70:42">userdata</name></decl></parameter>)</parameter_list>
<block pos:start="71:1" pos:end="88:1">{<block_content pos:start="72:5" pos:end="87:24">
    <decl_stmt pos:start="72:5" pos:end="72:14"><decl pos:start="72:5" pos:end="72:13"><type pos:start="72:5" pos:end="72:10"><name pos:start="72:5" pos:end="72:8">void</name> <modifier pos:start="72:10" pos:end="72:10">*</modifier></type> <name pos:start="72:12" pos:end="72:13">rc</name></decl>;</decl_stmt>

    <if_stmt pos:start="74:5" pos:end="85:5"><if pos:start="74:5" pos:end="85:5">if <condition pos:start="74:8" pos:end="74:26">(<expr pos:start="74:9" pos:end="74:25"><name pos:start="74:9" pos:end="74:20">bearer_found</name> <operator pos:start="74:22" pos:end="74:23">==</operator> <literal type="number" pos:start="74:25" pos:end="74:25">0</literal></expr>)</condition> <block pos:start="74:28" pos:end="85:5">{<block_content pos:start="81:9" pos:end="84:9">

        <comment type="block" pos:start="76:9" pos:end="80:11">/*
         * WARNING: strstr can be dangerous because it assumes null terminated
         * strings.  In this case the http headers came from EST server and we
         * know they are null terminated
         */</comment>
        <expr_stmt pos:start="81:9" pos:end="81:53"><expr pos:start="81:9" pos:end="81:52"><name pos:start="81:9" pos:end="81:10">rc</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:52"><name pos:start="81:14" pos:end="81:19">strstr</name><argument_list pos:start="81:20" pos:end="81:52">(<argument pos:start="81:21" pos:end="81:23"><expr pos:start="81:21" pos:end="81:23"><name pos:start="81:21" pos:end="81:23">ptr</name></expr></argument>, <argument pos:start="81:26" pos:end="81:51"><expr pos:start="81:26" pos:end="81:51"><literal type="string" pos:start="81:26" pos:end="81:51">"WWW-Authenticate: Bearer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="82:9" pos:end="84:9"><if pos:start="82:9" pos:end="84:9">if <condition pos:start="82:12" pos:end="82:15">(<expr pos:start="82:13" pos:end="82:14"><name pos:start="82:13" pos:end="82:14">rc</name></expr>)</condition> <block pos:start="82:17" pos:end="84:9">{<block_content pos:start="83:13" pos:end="83:29">
            <expr_stmt pos:start="83:13" pos:end="83:29"><expr pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:24">bearer_found</name> <operator pos:start="83:26" pos:end="83:26">=</operator> <literal type="number" pos:start="83:28" pos:end="83:28">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="87:5" pos:end="87:24">return <expr pos:start="87:12" pos:end="87:23"><name pos:start="87:12" pos:end="87:15">size</name> <operator pos:start="87:17" pos:end="87:17">*</operator> <name pos:start="87:19" pos:end="87:23">nmemb</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="90:1" pos:end="92:1"><type pos:start="90:1" pos:end="90:11"><specifier pos:start="90:1" pos:end="90:6">static</specifier> <name pos:start="90:8" pos:end="90:11">void</name></type> <name pos:start="90:13" pos:end="90:24">us1864_clean</name> <parameter_list pos:start="90:26" pos:end="90:31">(<parameter pos:start="90:27" pos:end="90:30"><decl pos:start="90:27" pos:end="90:30"><type pos:start="90:27" pos:end="90:30"><name pos:start="90:27" pos:end="90:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="91:1" pos:end="92:1">{<block_content>
</block_content>}</block></function>

<function pos:start="94:1" pos:end="109:1"><type pos:start="94:1" pos:end="94:10"><specifier pos:start="94:1" pos:end="94:6">static</specifier> <name pos:start="94:8" pos:end="94:10">int</name></type> <name pos:start="94:12" pos:end="94:30">us1864_start_server</name> <parameter_list pos:start="94:32" pos:end="94:59">(<parameter pos:start="94:33" pos:end="94:49"><decl pos:start="94:33" pos:end="94:49"><type pos:start="94:33" pos:end="94:49"><name pos:start="94:33" pos:end="94:35">int</name></type> <name pos:start="94:37" pos:end="94:49">manual_enroll</name></decl></parameter>, <parameter pos:start="94:52" pos:end="94:58"><decl pos:start="94:52" pos:end="94:58"><type pos:start="94:52" pos:end="94:58"><name pos:start="94:52" pos:end="94:54">int</name></type> <name pos:start="94:56" pos:end="94:58">nid</name></decl></parameter>)</parameter_list>
<block pos:start="95:1" pos:end="109:1">{<block_content pos:start="96:5" pos:end="108:14">
    <decl_stmt pos:start="96:5" pos:end="96:11"><decl pos:start="96:5" pos:end="96:10"><type pos:start="96:5" pos:end="96:7"><name pos:start="96:5" pos:end="96:7">int</name></type> <name pos:start="96:9" pos:end="96:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="98:5" pos:end="107:23"><expr pos:start="98:5" pos:end="107:22"><name pos:start="98:5" pos:end="98:6">rv</name> <operator pos:start="98:8" pos:end="98:8">=</operator> <call pos:start="98:10" pos:end="107:22"><name pos:start="98:10" pos:end="98:17">st_start</name><argument_list pos:start="98:18" pos:end="107:22">(<argument pos:start="98:19" pos:end="98:33"><expr pos:start="98:19" pos:end="98:33"><name pos:start="98:19" pos:end="98:33">US1864_TCP_PORT</name></expr></argument>,
                  <argument pos:start="99:19" pos:end="99:36"><expr pos:start="99:19" pos:end="99:36"><name pos:start="99:19" pos:end="99:36">US1864_SERVER_CERT</name></expr></argument>,
                  <argument pos:start="100:19" pos:end="100:35"><expr pos:start="100:19" pos:end="100:35"><name pos:start="100:19" pos:end="100:35">US1864_SERVER_KEY</name></expr></argument>,
                  <argument pos:start="101:19" pos:end="101:37"><expr pos:start="101:19" pos:end="101:37"><literal type="string" pos:start="101:19" pos:end="101:37">"US1864 test realm"</literal></expr></argument>,
                  <argument pos:start="102:19" pos:end="102:32"><expr pos:start="102:19" pos:end="102:32"><name pos:start="102:19" pos:end="102:32">US1864_CACERTS</name></expr></argument>,
                  <argument pos:start="103:19" pos:end="103:37"><expr pos:start="103:19" pos:end="103:37"><name pos:start="103:19" pos:end="103:37">US1864_TRUSTED_CERT</name></expr></argument>,
                  <argument pos:start="104:19" pos:end="104:39"><expr pos:start="104:19" pos:end="104:39"><literal type="string" pos:start="104:19" pos:end="104:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="105:19" pos:end="105:31"><expr pos:start="105:19" pos:end="105:31"><name pos:start="105:19" pos:end="105:31">manual_enroll</name></expr></argument>,
                  <argument pos:start="106:19" pos:end="106:19"><expr pos:start="106:19" pos:end="106:19"><literal type="number" pos:start="106:19" pos:end="106:19">0</literal></expr></argument>,
                  <argument pos:start="107:19" pos:end="107:21"><expr pos:start="107:19" pos:end="107:21"><name pos:start="107:19" pos:end="107:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="108:5" pos:end="108:14">return <expr pos:start="108:12" pos:end="108:13"><name pos:start="108:12" pos:end="108:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="111:1" pos:end="115:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="116:1" pos:end="139:1"><type pos:start="116:1" pos:end="116:10"><specifier pos:start="116:1" pos:end="116:6">static</specifier> <name pos:start="116:8" pos:end="116:10">int</name></type> <name pos:start="116:12" pos:end="116:28">us1864_init_suite</name> <parameter_list pos:start="116:30" pos:end="116:35">(<parameter pos:start="116:31" pos:end="116:34"><decl pos:start="116:31" pos:end="116:34"><type pos:start="116:31" pos:end="116:34"><name pos:start="116:31" pos:end="116:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="117:1" pos:end="139:1">{<block_content pos:start="118:5" pos:end="138:14">
    <decl_stmt pos:start="118:5" pos:end="118:11"><decl pos:start="118:5" pos:end="118:10"><type pos:start="118:5" pos:end="118:7"><name pos:start="118:5" pos:end="118:7">int</name></type> <name pos:start="118:9" pos:end="118:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="120:5" pos:end="120:44"><expr pos:start="120:5" pos:end="120:43"><call pos:start="120:5" pos:end="120:43"><name pos:start="120:5" pos:end="120:19">est_init_logger</name><argument_list pos:start="120:20" pos:end="120:43">(<argument pos:start="120:21" pos:end="120:36"><expr pos:start="120:21" pos:end="120:36"><name pos:start="120:21" pos:end="120:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="120:39" pos:end="120:42"><expr pos:start="120:39" pos:end="120:42"><name pos:start="120:39" pos:end="120:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="122:5" pos:end="124:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="125:5" pos:end="125:61"><expr pos:start="125:5" pos:end="125:60"><name pos:start="125:5" pos:end="125:15">cacerts_len</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:60"><name pos:start="125:19" pos:end="125:34">read_binary_file</name><argument_list pos:start="125:35" pos:end="125:60">(<argument pos:start="125:36" pos:end="125:49"><expr pos:start="125:36" pos:end="125:49"><name pos:start="125:36" pos:end="125:49">US1864_CACERTS</name></expr></argument>, <argument pos:start="125:52" pos:end="125:59"><expr pos:start="125:52" pos:end="125:59"><operator pos:start="125:52" pos:end="125:52">&amp;</operator><name pos:start="125:53" pos:end="125:59">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="126:5" pos:end="128:5"><if pos:start="126:5" pos:end="128:5">if <condition pos:start="126:8" pos:end="126:25">(<expr pos:start="126:9" pos:end="126:24"><name pos:start="126:9" pos:end="126:19">cacerts_len</name> <operator pos:start="126:21" pos:end="126:22">&lt;=</operator> <literal type="number" pos:start="126:24" pos:end="126:24">0</literal></expr>)</condition> <block pos:start="126:27" pos:end="128:5">{<block_content pos:start="127:9" pos:end="127:17">
        <return pos:start="127:9" pos:end="127:17">return <expr pos:start="127:16" pos:end="127:16"><literal type="number" pos:start="127:16" pos:end="127:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="130:5" pos:end="130:19"><expr pos:start="130:5" pos:end="130:18"><call pos:start="130:5" pos:end="130:18"><name pos:start="130:5" pos:end="130:16">us1864_clean</name><argument_list pos:start="130:17" pos:end="130:18">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="132:5" pos:end="135:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="136:5" pos:end="136:35"><expr pos:start="136:5" pos:end="136:34"><name pos:start="136:5" pos:end="136:6">rv</name> <operator pos:start="136:8" pos:end="136:8">=</operator> <call pos:start="136:10" pos:end="136:34"><name pos:start="136:10" pos:end="136:28">us1864_start_server</name><argument_list pos:start="136:29" pos:end="136:34">(<argument pos:start="136:30" pos:end="136:30"><expr pos:start="136:30" pos:end="136:30"><literal type="number" pos:start="136:30" pos:end="136:30">0</literal></expr></argument>, <argument pos:start="136:33" pos:end="136:33"><expr pos:start="136:33" pos:end="136:33"><literal type="number" pos:start="136:33" pos:end="136:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="138:5" pos:end="138:14">return <expr pos:start="138:12" pos:end="138:13"><name pos:start="138:12" pos:end="138:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="141:1" pos:end="145:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="146:1" pos:end="151:1"><type pos:start="146:1" pos:end="146:10"><specifier pos:start="146:1" pos:end="146:6">static</specifier> <name pos:start="146:8" pos:end="146:10">int</name></type> <name pos:start="146:12" pos:end="146:31">us1864_destroy_suite</name> <parameter_list pos:start="146:33" pos:end="146:38">(<parameter pos:start="146:34" pos:end="146:37"><decl pos:start="146:34" pos:end="146:37"><type pos:start="146:34" pos:end="146:37"><name pos:start="146:34" pos:end="146:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="147:1" pos:end="151:1">{<block_content pos:start="148:5" pos:end="150:13">
    <expr_stmt pos:start="148:5" pos:end="148:14"><expr pos:start="148:5" pos:end="148:13"><call pos:start="148:5" pos:end="148:13"><name pos:start="148:5" pos:end="148:11">st_stop</name><argument_list pos:start="148:12" pos:end="148:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="149:5" pos:end="149:18"><expr pos:start="149:5" pos:end="149:17"><call pos:start="149:5" pos:end="149:17"><name pos:start="149:5" pos:end="149:8">free</name><argument_list pos:start="149:9" pos:end="149:17">(<argument pos:start="149:10" pos:end="149:16"><expr pos:start="149:10" pos:end="149:16"><name pos:start="149:10" pos:end="149:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="150:5" pos:end="150:13">return <expr pos:start="150:12" pos:end="150:12"><literal type="number" pos:start="150:12" pos:end="150:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="153:1" pos:end="157:3">/*
 * est_server_set_auth_mode() - unit test
 *
 * First, Test the parameters of est_server_set_auth_mode()
 */</comment>
<function pos:start="158:1" pos:end="230:1"><type pos:start="158:1" pos:end="158:11"><specifier pos:start="158:1" pos:end="158:6">static</specifier> <name pos:start="158:8" pos:end="158:11">void</name></type> <name pos:start="158:13" pos:end="158:24">us1864_test1</name> <parameter_list pos:start="158:26" pos:end="158:31">(<parameter pos:start="158:27" pos:end="158:30"><decl pos:start="158:27" pos:end="158:30"><type pos:start="158:27" pos:end="158:30"><name pos:start="158:27" pos:end="158:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="159:1" pos:end="230:1">{<block_content pos:start="160:5" pos:end="229:21">
    <decl_stmt pos:start="160:5" pos:end="160:34"><decl pos:start="160:5" pos:end="160:33"><type pos:start="160:5" pos:end="160:19"><name pos:start="160:5" pos:end="160:12">unsigned</name> <name pos:start="160:14" pos:end="160:17">char</name> <modifier pos:start="160:19" pos:end="160:19">*</modifier></type><name pos:start="160:20" pos:end="160:26">cacerts</name> <init pos:start="160:28" pos:end="160:33">= <expr pos:start="160:30" pos:end="160:33"><name pos:start="160:30" pos:end="160:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="161:5" pos:end="161:24"><decl pos:start="161:5" pos:end="161:23"><type pos:start="161:5" pos:end="161:7"><name pos:start="161:5" pos:end="161:7">int</name></type> <name pos:start="161:9" pos:end="161:19">cacerts_len</name> <init pos:start="161:21" pos:end="161:23">= <expr pos:start="161:23" pos:end="161:23"><literal type="number" pos:start="161:23" pos:end="161:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="162:5" pos:end="162:24"><decl pos:start="162:5" pos:end="162:15"><type pos:start="162:5" pos:end="162:9"><name pos:start="162:5" pos:end="162:7">BIO</name> <modifier pos:start="162:9" pos:end="162:9">*</modifier></type><name pos:start="162:10" pos:end="162:15">certin</name></decl>, <decl pos:start="162:18" pos:end="162:23"><type ref="prev" pos:start="162:5" pos:end="162:9"><modifier pos:start="162:18" pos:end="162:18">*</modifier></type><name pos:start="162:19" pos:end="162:23">keyin</name></decl>;</decl_stmt>
    <decl_stmt pos:start="163:5" pos:end="163:12"><decl pos:start="163:5" pos:end="163:11"><type pos:start="163:5" pos:end="163:10"><name pos:start="163:5" pos:end="163:8">X509</name> <modifier pos:start="163:10" pos:end="163:10">*</modifier></type><name pos:start="163:11" pos:end="163:11">x</name></decl>;</decl_stmt>
    <decl_stmt pos:start="164:5" pos:end="164:24"><decl pos:start="164:5" pos:end="164:23"><type pos:start="164:5" pos:end="164:14"><name pos:start="164:5" pos:end="164:12">EVP_PKEY</name> <modifier pos:start="164:14" pos:end="164:14">*</modifier></type> <name pos:start="164:16" pos:end="164:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="165:5" pos:end="165:11"><decl pos:start="165:5" pos:end="165:10"><type pos:start="165:5" pos:end="165:7"><name pos:start="165:5" pos:end="165:7">int</name></type> <name pos:start="165:9" pos:end="165:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="166:5" pos:end="166:17"><decl pos:start="166:5" pos:end="166:16"><type pos:start="166:5" pos:end="166:13"><name pos:start="166:5" pos:end="166:11">EST_CTX</name> <modifier pos:start="166:13" pos:end="166:13">*</modifier></type><name pos:start="166:14" pos:end="166:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="167:5" pos:end="167:21"><decl pos:start="167:5" pos:end="167:20"><type pos:start="167:5" pos:end="167:13"><name pos:start="167:5" pos:end="167:13">EST_ERROR</name></type> <name pos:start="167:15" pos:end="167:20">est_rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="169:5" pos:end="170:5"><expr pos:start="169:5" pos:end="169:15"><name pos:start="169:5" pos:end="169:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="172:5" pos:end="174:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="175:5" pos:end="175:60"><expr pos:start="175:5" pos:end="175:59"><name pos:start="175:5" pos:end="175:15">cacerts_len</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <call pos:start="175:19" pos:end="175:59"><name pos:start="175:19" pos:end="175:34">read_binary_file</name><argument_list pos:start="175:35" pos:end="175:59">(<argument pos:start="175:36" pos:end="175:48"><expr pos:start="175:36" pos:end="175:48"><name pos:start="175:36" pos:end="175:48">US1864_CACERT</name></expr></argument>, <argument pos:start="175:51" pos:end="175:58"><expr pos:start="175:51" pos:end="175:58"><operator pos:start="175:51" pos:end="175:51">&amp;</operator><name pos:start="175:52" pos:end="175:58">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="176:5" pos:end="176:31"><expr pos:start="176:5" pos:end="176:30"><call pos:start="176:5" pos:end="176:30"><name pos:start="176:5" pos:end="176:13">CU_ASSERT</name><argument_list pos:start="176:14" pos:end="176:30">(<argument pos:start="176:15" pos:end="176:29"><expr pos:start="176:15" pos:end="176:29"><name pos:start="176:15" pos:end="176:25">cacerts_len</name> <operator pos:start="176:27" pos:end="176:27">&gt;</operator> <literal type="number" pos:start="176:29" pos:end="176:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="178:5" pos:end="180:7">/*
     * Read the server cert
     */</comment>
    <expr_stmt pos:start="181:5" pos:end="181:44"><expr pos:start="181:5" pos:end="181:43"><name pos:start="181:5" pos:end="181:10">certin</name> <operator pos:start="181:12" pos:end="181:12">=</operator> <call pos:start="181:14" pos:end="181:43"><name pos:start="181:14" pos:end="181:20">BIO_new</name><argument_list pos:start="181:21" pos:end="181:43">(<argument pos:start="181:22" pos:end="181:42"><expr pos:start="181:22" pos:end="181:42"><call pos:start="181:22" pos:end="181:42"><name pos:start="181:22" pos:end="181:40">BIO_s_file_internal</name><argument_list pos:start="181:41" pos:end="181:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="182:5" pos:end="182:55"><expr pos:start="182:5" pos:end="182:54"><name pos:start="182:5" pos:end="182:6">rv</name> <operator pos:start="182:8" pos:end="182:8">=</operator> <call pos:start="182:10" pos:end="182:54"><name pos:start="182:10" pos:end="182:26">BIO_read_filename</name><argument_list pos:start="182:27" pos:end="182:54">(<argument pos:start="182:28" pos:end="182:33"><expr pos:start="182:28" pos:end="182:33"><name pos:start="182:28" pos:end="182:33">certin</name></expr></argument>, <argument pos:start="182:36" pos:end="182:53"><expr pos:start="182:36" pos:end="182:53"><name pos:start="182:36" pos:end="182:53">US1864_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="183:22"><expr pos:start="183:5" pos:end="183:21"><call pos:start="183:5" pos:end="183:21"><name pos:start="183:5" pos:end="183:13">CU_ASSERT</name><argument_list pos:start="183:14" pos:end="183:21">(<argument pos:start="183:15" pos:end="183:20"><expr pos:start="183:15" pos:end="183:20"><name pos:start="183:15" pos:end="183:16">rv</name> <operator pos:start="183:18" pos:end="183:18">&gt;</operator> <literal type="number" pos:start="183:20" pos:end="183:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="184:5" pos:end="184:52"><expr pos:start="184:5" pos:end="184:51"><name pos:start="184:5" pos:end="184:5">x</name> <operator pos:start="184:7" pos:end="184:7">=</operator> <call pos:start="184:9" pos:end="184:51"><name pos:start="184:9" pos:end="184:25">PEM_read_bio_X509</name><argument_list pos:start="184:26" pos:end="184:51">(<argument pos:start="184:27" pos:end="184:32"><expr pos:start="184:27" pos:end="184:32"><name pos:start="184:27" pos:end="184:32">certin</name></expr></argument>, <argument pos:start="184:35" pos:end="184:38"><expr pos:start="184:35" pos:end="184:38"><name pos:start="184:35" pos:end="184:38">NULL</name></expr></argument>, <argument pos:start="184:41" pos:end="184:44"><expr pos:start="184:41" pos:end="184:44"><name pos:start="184:41" pos:end="184:44">NULL</name></expr></argument>, <argument pos:start="184:47" pos:end="184:50"><expr pos:start="184:47" pos:end="184:50"><name pos:start="184:47" pos:end="184:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="185:5" pos:end="185:25"><expr pos:start="185:5" pos:end="185:24"><call pos:start="185:5" pos:end="185:24"><name pos:start="185:5" pos:end="185:13">CU_ASSERT</name><argument_list pos:start="185:14" pos:end="185:24">(<argument pos:start="185:15" pos:end="185:23"><expr pos:start="185:15" pos:end="185:23"><name pos:start="185:15" pos:end="185:15">x</name> <operator pos:start="185:17" pos:end="185:18">!=</operator> <name pos:start="185:20" pos:end="185:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="186:5" pos:end="186:21"><expr pos:start="186:5" pos:end="186:20"><call pos:start="186:5" pos:end="186:20"><name pos:start="186:5" pos:end="186:12">BIO_free</name><argument_list pos:start="186:13" pos:end="186:20">(<argument pos:start="186:14" pos:end="186:19"><expr pos:start="186:14" pos:end="186:19"><name pos:start="186:14" pos:end="186:19">certin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="188:5" pos:end="190:7">/*
     * Read the server key
     */</comment>
    <expr_stmt pos:start="191:5" pos:end="191:43"><expr pos:start="191:5" pos:end="191:42"><name pos:start="191:5" pos:end="191:9">keyin</name> <operator pos:start="191:11" pos:end="191:11">=</operator> <call pos:start="191:13" pos:end="191:42"><name pos:start="191:13" pos:end="191:19">BIO_new</name><argument_list pos:start="191:20" pos:end="191:42">(<argument pos:start="191:21" pos:end="191:41"><expr pos:start="191:21" pos:end="191:41"><call pos:start="191:21" pos:end="191:41"><name pos:start="191:21" pos:end="191:39">BIO_s_file_internal</name><argument_list pos:start="191:40" pos:end="191:41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:53"><expr pos:start="192:5" pos:end="192:52"><name pos:start="192:5" pos:end="192:6">rv</name> <operator pos:start="192:8" pos:end="192:8">=</operator> <call pos:start="192:10" pos:end="192:52"><name pos:start="192:10" pos:end="192:26">BIO_read_filename</name><argument_list pos:start="192:27" pos:end="192:52">(<argument pos:start="192:28" pos:end="192:32"><expr pos:start="192:28" pos:end="192:32"><name pos:start="192:28" pos:end="192:32">keyin</name></expr></argument>, <argument pos:start="192:35" pos:end="192:51"><expr pos:start="192:35" pos:end="192:51"><name pos:start="192:35" pos:end="192:51">US1864_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="193:5" pos:end="193:22"><expr pos:start="193:5" pos:end="193:21"><call pos:start="193:5" pos:end="193:21"><name pos:start="193:5" pos:end="193:13">CU_ASSERT</name><argument_list pos:start="193:14" pos:end="193:21">(<argument pos:start="193:15" pos:end="193:20"><expr pos:start="193:15" pos:end="193:20"><name pos:start="193:15" pos:end="193:16">rv</name> <operator pos:start="193:18" pos:end="193:18">&gt;</operator> <literal type="number" pos:start="193:20" pos:end="193:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="194:5" pos:end="194:64"><expr pos:start="194:5" pos:end="194:63"><name pos:start="194:5" pos:end="194:12">priv_key</name> <operator pos:start="194:14" pos:end="194:14">=</operator> <call pos:start="194:16" pos:end="194:63"><name pos:start="194:16" pos:end="194:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="194:39" pos:end="194:63">(<argument pos:start="194:40" pos:end="194:44"><expr pos:start="194:40" pos:end="194:44"><name pos:start="194:40" pos:end="194:44">keyin</name></expr></argument>, <argument pos:start="194:47" pos:end="194:50"><expr pos:start="194:47" pos:end="194:50"><name pos:start="194:47" pos:end="194:50">NULL</name></expr></argument>, <argument pos:start="194:53" pos:end="194:56"><expr pos:start="194:53" pos:end="194:56"><name pos:start="194:53" pos:end="194:56">NULL</name></expr></argument>, <argument pos:start="194:59" pos:end="194:62"><expr pos:start="194:59" pos:end="194:62"><name pos:start="194:59" pos:end="194:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="195:5" pos:end="195:32"><expr pos:start="195:5" pos:end="195:31"><call pos:start="195:5" pos:end="195:31"><name pos:start="195:5" pos:end="195:13">CU_ASSERT</name><argument_list pos:start="195:14" pos:end="195:31">(<argument pos:start="195:15" pos:end="195:30"><expr pos:start="195:15" pos:end="195:30"><name pos:start="195:15" pos:end="195:22">priv_key</name> <operator pos:start="195:24" pos:end="195:25">!=</operator> <name pos:start="195:27" pos:end="195:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="196:5" pos:end="196:20"><expr pos:start="196:5" pos:end="196:19"><call pos:start="196:5" pos:end="196:19"><name pos:start="196:5" pos:end="196:12">BIO_free</name><argument_list pos:start="196:13" pos:end="196:19">(<argument pos:start="196:14" pos:end="196:18"><expr pos:start="196:14" pos:end="196:18"><name pos:start="196:14" pos:end="196:18">keyin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="198:5" pos:end="200:7">/*
     * init EST in server mode
     */</comment>
    <expr_stmt pos:start="201:5" pos:end="201:44"><expr pos:start="201:5" pos:end="201:43"><call pos:start="201:5" pos:end="201:43"><name pos:start="201:5" pos:end="201:19">est_init_logger</name><argument_list pos:start="201:20" pos:end="201:43">(<argument pos:start="201:21" pos:end="201:36"><expr pos:start="201:21" pos:end="201:36"><name pos:start="201:21" pos:end="201:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="201:39" pos:end="201:42"><expr pos:start="201:39" pos:end="201:42"><name pos:start="201:39" pos:end="201:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="202:5" pos:end="203:55"><expr pos:start="202:5" pos:end="203:54"><name pos:start="202:5" pos:end="202:7">ctx</name> <operator pos:start="202:9" pos:end="202:9">=</operator> <call pos:start="202:11" pos:end="203:54"><name pos:start="202:11" pos:end="202:25">est_server_init</name><argument_list pos:start="202:26" pos:end="203:54">(<argument pos:start="202:27" pos:end="202:33"><expr pos:start="202:27" pos:end="202:33"><name pos:start="202:27" pos:end="202:33">cacerts</name></expr></argument>, <argument pos:start="202:36" pos:end="202:46"><expr pos:start="202:36" pos:end="202:46"><name pos:start="202:36" pos:end="202:46">cacerts_len</name></expr></argument>, <argument pos:start="202:49" pos:end="202:55"><expr pos:start="202:49" pos:end="202:55"><name pos:start="202:49" pos:end="202:55">cacerts</name></expr></argument>, <argument pos:start="202:58" pos:end="202:68"><expr pos:start="202:58" pos:end="202:68"><name pos:start="202:58" pos:end="202:68">cacerts_len</name></expr></argument>,
        <argument pos:start="203:9" pos:end="203:27"><expr pos:start="203:9" pos:end="203:27"><name pos:start="203:9" pos:end="203:27">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="203:30" pos:end="203:40"><expr pos:start="203:30" pos:end="203:40"><literal type="string" pos:start="203:30" pos:end="203:40">"testrealm"</literal></expr></argument>, <argument pos:start="203:43" pos:end="203:43"><expr pos:start="203:43" pos:end="203:43"><name pos:start="203:43" pos:end="203:43">x</name></expr></argument>, <argument pos:start="203:46" pos:end="203:53"><expr pos:start="203:46" pos:end="203:53"><name pos:start="203:46" pos:end="203:53">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:27"><expr pos:start="205:5" pos:end="205:26"><call pos:start="205:5" pos:end="205:26"><name pos:start="205:5" pos:end="205:13">CU_ASSERT</name><argument_list pos:start="205:14" pos:end="205:26">(<argument pos:start="205:15" pos:end="205:25"><expr pos:start="205:15" pos:end="205:25"><name pos:start="205:15" pos:end="205:17">ctx</name> <operator pos:start="205:19" pos:end="205:20">!=</operator> <name pos:start="205:22" pos:end="205:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:54"><expr pos:start="207:5" pos:end="207:53"><name pos:start="207:5" pos:end="207:10">est_rv</name> <operator pos:start="207:12" pos:end="207:12">=</operator> <call pos:start="207:14" pos:end="207:53"><name pos:start="207:14" pos:end="207:37">est_server_set_auth_mode</name><argument_list pos:start="207:38" pos:end="207:53">(<argument pos:start="207:39" pos:end="207:41"><expr pos:start="207:39" pos:end="207:41"><name pos:start="207:39" pos:end="207:41">ctx</name></expr></argument>, <argument pos:start="207:44" pos:end="207:52"><expr pos:start="207:44" pos:end="207:52"><name pos:start="207:44" pos:end="207:52">AUTH_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="208:5" pos:end="208:42"><expr pos:start="208:5" pos:end="208:41"><call pos:start="208:5" pos:end="208:41"><name pos:start="208:5" pos:end="208:13">CU_ASSERT</name><argument_list pos:start="208:14" pos:end="208:41">(<argument pos:start="208:15" pos:end="208:40"><expr pos:start="208:15" pos:end="208:40"><name pos:start="208:15" pos:end="208:20">est_rv</name> <operator pos:start="208:22" pos:end="208:23">==</operator> <name pos:start="208:25" pos:end="208:40">EST_ERR_BAD_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="209:5" pos:end="209:55"><expr pos:start="209:5" pos:end="209:54"><name pos:start="209:5" pos:end="209:10">est_rv</name> <operator pos:start="209:12" pos:end="209:12">=</operator> <call pos:start="209:14" pos:end="209:54"><name pos:start="209:14" pos:end="209:37">est_server_set_auth_mode</name><argument_list pos:start="209:38" pos:end="209:54">(<argument pos:start="209:39" pos:end="209:41"><expr pos:start="209:39" pos:end="209:41"><name pos:start="209:39" pos:end="209:41">ctx</name></expr></argument>, <argument pos:start="209:44" pos:end="209:53"><expr pos:start="209:44" pos:end="209:53"><name pos:start="209:44" pos:end="209:53">AUTH_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="210:5" pos:end="210:38"><expr pos:start="210:5" pos:end="210:37"><call pos:start="210:5" pos:end="210:37"><name pos:start="210:5" pos:end="210:13">CU_ASSERT</name><argument_list pos:start="210:14" pos:end="210:37">(<argument pos:start="210:15" pos:end="210:36"><expr pos:start="210:15" pos:end="210:36"><name pos:start="210:15" pos:end="210:20">est_rv</name> <operator pos:start="210:22" pos:end="210:23">==</operator> <name pos:start="210:25" pos:end="210:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="211:5" pos:end="211:56"><expr pos:start="211:5" pos:end="211:55"><name pos:start="211:5" pos:end="211:10">est_rv</name> <operator pos:start="211:12" pos:end="211:12">=</operator> <call pos:start="211:14" pos:end="211:55"><name pos:start="211:14" pos:end="211:37">est_server_set_auth_mode</name><argument_list pos:start="211:38" pos:end="211:55">(<argument pos:start="211:39" pos:end="211:41"><expr pos:start="211:39" pos:end="211:41"><name pos:start="211:39" pos:end="211:41">ctx</name></expr></argument>, <argument pos:start="211:44" pos:end="211:54"><expr pos:start="211:44" pos:end="211:54"><name pos:start="211:44" pos:end="211:54">AUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="212:5" pos:end="212:38"><expr pos:start="212:5" pos:end="212:37"><call pos:start="212:5" pos:end="212:37"><name pos:start="212:5" pos:end="212:13">CU_ASSERT</name><argument_list pos:start="212:14" pos:end="212:37">(<argument pos:start="212:15" pos:end="212:36"><expr pos:start="212:15" pos:end="212:36"><name pos:start="212:15" pos:end="212:20">est_rv</name> <operator pos:start="212:22" pos:end="212:23">==</operator> <name pos:start="212:25" pos:end="212:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="213:5" pos:end="213:55"><expr pos:start="213:5" pos:end="213:54"><name pos:start="213:5" pos:end="213:10">est_rv</name> <operator pos:start="213:12" pos:end="213:12">=</operator> <call pos:start="213:14" pos:end="213:54"><name pos:start="213:14" pos:end="213:37">est_server_set_auth_mode</name><argument_list pos:start="213:38" pos:end="213:54">(<argument pos:start="213:39" pos:end="213:41"><expr pos:start="213:39" pos:end="213:41"><name pos:start="213:39" pos:end="213:41">ctx</name></expr></argument>, <argument pos:start="213:44" pos:end="213:53"><expr pos:start="213:44" pos:end="213:53"><name pos:start="213:44" pos:end="213:53">AUTH_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="214:5" pos:end="214:38"><expr pos:start="214:5" pos:end="214:37"><call pos:start="214:5" pos:end="214:37"><name pos:start="214:5" pos:end="214:13">CU_ASSERT</name><argument_list pos:start="214:14" pos:end="214:37">(<argument pos:start="214:15" pos:end="214:36"><expr pos:start="214:15" pos:end="214:36"><name pos:start="214:15" pos:end="214:20">est_rv</name> <operator pos:start="214:22" pos:end="214:23">==</operator> <name pos:start="214:25" pos:end="214:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="215:5" pos:end="215:55"><expr pos:start="215:5" pos:end="215:54"><name pos:start="215:5" pos:end="215:10">est_rv</name> <operator pos:start="215:12" pos:end="215:12">=</operator> <call pos:start="215:14" pos:end="215:54"><name pos:start="215:14" pos:end="215:37">est_server_set_auth_mode</name><argument_list pos:start="215:38" pos:end="215:54">(<argument pos:start="215:39" pos:end="215:41"><expr pos:start="215:39" pos:end="215:41"><name pos:start="215:39" pos:end="215:41">ctx</name></expr></argument>, <argument pos:start="215:44" pos:end="215:53"><expr pos:start="215:44" pos:end="215:53"><literal type="number" pos:start="215:44" pos:end="215:53">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="216:5" pos:end="216:42"><expr pos:start="216:5" pos:end="216:41"><call pos:start="216:5" pos:end="216:41"><name pos:start="216:5" pos:end="216:13">CU_ASSERT</name><argument_list pos:start="216:14" pos:end="216:41">(<argument pos:start="216:15" pos:end="216:40"><expr pos:start="216:15" pos:end="216:40"><name pos:start="216:15" pos:end="216:20">est_rv</name> <operator pos:start="216:22" pos:end="216:23">==</operator> <name pos:start="216:25" pos:end="216:40">EST_ERR_BAD_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="218:5" pos:end="220:7">/*
     * Make sure we don't allow DIGEST mode when in FIPS mode
     */</comment>
    <expr_stmt pos:start="221:5" pos:end="221:21"><expr pos:start="221:5" pos:end="221:20"><call pos:start="221:5" pos:end="221:20"><name pos:start="221:5" pos:end="221:17">FIPS_mode_set</name><argument_list pos:start="221:18" pos:end="221:20">(<argument pos:start="221:19" pos:end="221:19"><expr pos:start="221:19" pos:end="221:19"><literal type="number" pos:start="221:19" pos:end="221:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="222:5" pos:end="222:56"><expr pos:start="222:5" pos:end="222:55"><name pos:start="222:5" pos:end="222:10">est_rv</name> <operator pos:start="222:12" pos:end="222:12">=</operator> <call pos:start="222:14" pos:end="222:55"><name pos:start="222:14" pos:end="222:37">est_server_set_auth_mode</name><argument_list pos:start="222:38" pos:end="222:55">(<argument pos:start="222:39" pos:end="222:41"><expr pos:start="222:39" pos:end="222:41"><name pos:start="222:39" pos:end="222:41">ctx</name></expr></argument>, <argument pos:start="222:44" pos:end="222:54"><expr pos:start="222:44" pos:end="222:54"><name pos:start="222:44" pos:end="222:54">AUTH_DIGEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="223:5" pos:end="223:42"><expr pos:start="223:5" pos:end="223:41"><call pos:start="223:5" pos:end="223:41"><name pos:start="223:5" pos:end="223:13">CU_ASSERT</name><argument_list pos:start="223:14" pos:end="223:41">(<argument pos:start="223:15" pos:end="223:40"><expr pos:start="223:15" pos:end="223:40"><name pos:start="223:15" pos:end="223:20">est_rv</name> <operator pos:start="223:22" pos:end="223:23">==</operator> <name pos:start="223:25" pos:end="223:40">EST_ERR_BAD_MODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="224:5" pos:end="224:21"><expr pos:start="224:5" pos:end="224:20"><call pos:start="224:5" pos:end="224:20"><name pos:start="224:5" pos:end="224:17">FIPS_mode_set</name><argument_list pos:start="224:18" pos:end="224:20">(<argument pos:start="224:19" pos:end="224:19"><expr pos:start="224:19" pos:end="224:19"><literal type="number" pos:start="224:19" pos:end="224:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="226:5" pos:end="226:17"><expr pos:start="226:5" pos:end="226:16"><call pos:start="226:5" pos:end="226:16"><name pos:start="226:5" pos:end="226:13">X509_free</name><argument_list pos:start="226:14" pos:end="226:16">(<argument pos:start="226:15" pos:end="226:15"><expr pos:start="226:15" pos:end="226:15"><name pos:start="226:15" pos:end="226:15">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="227:5" pos:end="227:28"><expr pos:start="227:5" pos:end="227:27"><call pos:start="227:5" pos:end="227:27"><name pos:start="227:5" pos:end="227:17">EVP_PKEY_free</name><argument_list pos:start="227:18" pos:end="227:27">(<argument pos:start="227:19" pos:end="227:26"><expr pos:start="227:19" pos:end="227:26"><name pos:start="227:19" pos:end="227:26">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:21"><expr pos:start="229:5" pos:end="229:20"><call pos:start="229:5" pos:end="229:20"><name pos:start="229:5" pos:end="229:15">est_destroy</name><argument_list pos:start="229:16" pos:end="229:20">(<argument pos:start="229:17" pos:end="229:19"><expr pos:start="229:17" pos:end="229:19"><name pos:start="229:17" pos:end="229:19">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="232:1" pos:end="242:3">/*
 * Simple enroll - Token Auth Mode
 *
 * The goal of this test is to verify that the EST server responds with the
 * correct auth challenge when it's configured for Token Auth mode.  It will
 * first perform a sanity check by performing an HTTP Basic request while the
 * server is still in its default mode of HTTP Basic auth.  The test will then
 * configure the server for Token Auth mode and issue a request that does not
 * contain any auth header.  This should force the server to respond with a
 * token auth challenge header.
 */</comment>
<function pos:start="243:1" pos:end="286:1"><type pos:start="243:1" pos:end="243:11"><specifier pos:start="243:1" pos:end="243:6">static</specifier> <name pos:start="243:8" pos:end="243:11">void</name></type> <name pos:start="243:13" pos:end="243:24">us1864_test2</name> <parameter_list pos:start="243:26" pos:end="243:31">(<parameter pos:start="243:27" pos:end="243:30"><decl pos:start="243:27" pos:end="243:30"><type pos:start="243:27" pos:end="243:30"><name pos:start="243:27" pos:end="243:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="244:1" pos:end="286:1">{<block_content pos:start="245:5" pos:end="284:33">
    <decl_stmt pos:start="245:5" pos:end="245:12"><decl pos:start="245:5" pos:end="245:11"><type pos:start="245:5" pos:end="245:8"><name pos:start="245:5" pos:end="245:8">long</name></type> <name pos:start="245:10" pos:end="245:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="247:5" pos:end="248:5"><expr pos:start="247:5" pos:end="247:15"><name pos:start="247:5" pos:end="247:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="250:5" pos:end="252:74"><expr pos:start="250:5" pos:end="252:73"><name pos:start="250:5" pos:end="250:6">rv</name> <operator pos:start="250:8" pos:end="250:8">=</operator> <call pos:start="250:10" pos:end="252:73"><name pos:start="250:10" pos:end="250:23">curl_http_post</name><argument_list pos:start="250:24" pos:end="252:73">(<argument pos:start="250:25" pos:end="250:44"><expr pos:start="250:25" pos:end="250:44"><name pos:start="250:25" pos:end="250:44">US1864_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="250:47" pos:end="250:62"><expr pos:start="250:47" pos:end="250:62"><name pos:start="250:47" pos:end="250:62">US1864_PKCS10_CT</name></expr></argument>,
    <argument pos:start="251:5" pos:end="251:25"><expr pos:start="251:5" pos:end="251:25"><name pos:start="251:5" pos:end="251:25">US1864_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="252:5" pos:end="252:22"><expr pos:start="252:5" pos:end="252:22"><name pos:start="252:5" pos:end="252:22">US1864_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="252:25" pos:end="252:38"><expr pos:start="252:25" pos:end="252:38"><name pos:start="252:25" pos:end="252:38">US1864_CACERTS</name></expr></argument>, <argument pos:start="252:41" pos:end="252:54"><expr pos:start="252:41" pos:end="252:54"><name pos:start="252:41" pos:end="252:54">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="252:57" pos:end="252:60"><expr pos:start="252:57" pos:end="252:60"><name pos:start="252:57" pos:end="252:60">NULL</name></expr></argument>, <argument pos:start="252:63" pos:end="252:66"><expr pos:start="252:63" pos:end="252:66"><name pos:start="252:63" pos:end="252:66">NULL</name></expr></argument>, <argument pos:start="252:69" pos:end="252:72"><expr pos:start="252:69" pos:end="252:72"><name pos:start="252:69" pos:end="252:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="253:5" pos:end="256:7">/*
     * Since we specify BASIC and the server is still in BASIC
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="257:5" pos:end="257:25"><expr pos:start="257:5" pos:end="257:24"><call pos:start="257:5" pos:end="257:24"><name pos:start="257:5" pos:end="257:13">CU_ASSERT</name><argument_list pos:start="257:14" pos:end="257:24">(<argument pos:start="257:15" pos:end="257:23"><expr pos:start="257:15" pos:end="257:23"><name pos:start="257:15" pos:end="257:16">rv</name> <operator pos:start="257:18" pos:end="257:19">==</operator> <literal type="number" pos:start="257:21" pos:end="257:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="259:5" pos:end="266:7">/*
     * Switch the server over to Token mode.
     *
     * NOTE: I see this being done in numerous places, and it's probably safe
     * in a test setting, but it is dangerous to change this on the fly in an
     * operational setting.  Also note, no return code for any of these
     * set/enable functions.
     */</comment>
    <expr_stmt pos:start="267:5" pos:end="267:32"><expr pos:start="267:5" pos:end="267:31"><call pos:start="267:5" pos:end="267:31"><name pos:start="267:5" pos:end="267:29">st_enable_http_token_auth</name><argument_list pos:start="267:30" pos:end="267:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:21"><expr pos:start="269:5" pos:end="269:20"><name pos:start="269:5" pos:end="269:16">bearer_found</name> <operator pos:start="269:18" pos:end="269:18">=</operator> <literal type="number" pos:start="269:20" pos:end="269:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="276:48"><expr pos:start="271:5" pos:end="276:47"><name pos:start="271:5" pos:end="271:6">rv</name> <operator pos:start="271:8" pos:end="271:8">=</operator> <call pos:start="271:10" pos:end="276:47"><name pos:start="271:10" pos:end="271:34">curl_http_post_cert_write</name><argument_list pos:start="271:35" pos:end="276:47">(<argument pos:start="271:36" pos:end="271:55"><expr pos:start="271:36" pos:end="271:55"><name pos:start="271:36" pos:end="271:55">US1864_ENROLL_URL_BA</name></expr></argument>,
    <argument pos:start="272:5" pos:end="272:20"><expr pos:start="272:5" pos:end="272:20"><name pos:start="272:5" pos:end="272:20">US1864_PKCS10_CT</name></expr></argument>,
    <argument pos:start="273:5" pos:end="273:25"><expr pos:start="273:5" pos:end="273:25"><name pos:start="273:5" pos:end="273:25">US1864_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="274:5" pos:end="274:22"><expr pos:start="274:5" pos:end="274:22"><name pos:start="274:5" pos:end="274:22">US1864_CLIENT_CERT</name></expr></argument>,
    <argument pos:start="275:5" pos:end="275:21"><expr pos:start="275:5" pos:end="275:21"><name pos:start="275:5" pos:end="275:21">US1864_CLIENT_KEY</name></expr></argument>,
    <argument pos:start="276:5" pos:end="276:18"><expr pos:start="276:5" pos:end="276:18"><name pos:start="276:5" pos:end="276:18">US1864_CACERTS</name></expr></argument>, <argument pos:start="276:21" pos:end="276:32"><expr pos:start="276:21" pos:end="276:32"><name pos:start="276:21" pos:end="276:32">curl_data_cb</name></expr></argument>, <argument pos:start="276:35" pos:end="276:46"><expr pos:start="276:35" pos:end="276:46"><name pos:start="276:35" pos:end="276:46">curl_data_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="278:5" pos:end="282:7">/*
     * Since we changed auth modes on the server we expect this to now
     * fail.  We're not capturing the actual auth challenge we
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="283:5" pos:end="283:25"><expr pos:start="283:5" pos:end="283:24"><call pos:start="283:5" pos:end="283:24"><name pos:start="283:5" pos:end="283:13">CU_ASSERT</name><argument_list pos:start="283:14" pos:end="283:24">(<argument pos:start="283:15" pos:end="283:23"><expr pos:start="283:15" pos:end="283:23"><name pos:start="283:15" pos:end="283:16">rv</name> <operator pos:start="283:18" pos:end="283:19">==</operator> <literal type="number" pos:start="283:21" pos:end="283:23">401</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="284:5" pos:end="284:33"><expr pos:start="284:5" pos:end="284:32"><call pos:start="284:5" pos:end="284:32"><name pos:start="284:5" pos:end="284:13">CU_ASSERT</name><argument_list pos:start="284:14" pos:end="284:32">(<argument pos:start="284:15" pos:end="284:31"><expr pos:start="284:15" pos:end="284:31"><name pos:start="284:15" pos:end="284:26">bearer_found</name> <operator pos:start="284:28" pos:end="284:29">==</operator> <literal type="number" pos:start="284:31" pos:end="284:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block" pos:start="288:1" pos:end="291:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="292:1" pos:end="317:2"><type pos:start="292:1" pos:end="292:3"><name pos:start="292:1" pos:end="292:3">int</name></type> <name pos:start="292:5" pos:end="292:20">us1864_add_suite</name> <parameter_list pos:start="292:22" pos:end="292:27">(<parameter pos:start="292:23" pos:end="292:26"><decl pos:start="292:23" pos:end="292:26"><type pos:start="292:23" pos:end="292:26"><name pos:start="292:23" pos:end="292:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="293:1" pos:end="317:2">{<block_content pos:start="295:5" pos:end="317:0">
<cpp:ifdef pos:start="294:1" pos:end="294:17">#<cpp:directive pos:start="294:2" pos:end="294:6">ifdef</cpp:directive> <name pos:start="294:8" pos:end="294:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="295:5" pos:end="295:28"><decl pos:start="295:5" pos:end="295:27"><type pos:start="295:5" pos:end="295:13"><name pos:start="295:5" pos:end="295:13">CU_pSuite</name></type> <name pos:start="295:15" pos:end="295:20">pSuite</name> <init pos:start="295:22" pos:end="295:27">= <expr pos:start="295:24" pos:end="295:27"><name pos:start="295:24" pos:end="295:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="297:5" pos:end="297:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="298:5" pos:end="300:34"><expr pos:start="298:5" pos:end="300:33"><name pos:start="298:5" pos:end="298:10">pSuite</name> <operator pos:start="298:12" pos:end="298:12">=</operator> <call pos:start="298:14" pos:end="300:33"><name pos:start="298:14" pos:end="298:25">CU_add_suite</name><argument_list pos:start="298:26" pos:end="300:33">(<argument pos:start="298:27" pos:end="298:47"><expr pos:start="298:27" pos:end="298:47"><literal type="string" pos:start="298:27" pos:end="298:47">"us1864_cfg_tok_auth"</literal></expr></argument>,
            <argument pos:start="299:13" pos:end="299:29"><expr pos:start="299:13" pos:end="299:29"><name pos:start="299:13" pos:end="299:29">us1864_init_suite</name></expr></argument>,
            <argument pos:start="300:13" pos:end="300:32"><expr pos:start="300:13" pos:end="300:32"><name pos:start="300:13" pos:end="300:32">us1864_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="301:5" pos:end="304:5"><if pos:start="301:5" pos:end="304:5">if <condition pos:start="301:8" pos:end="301:23">(<expr pos:start="301:9" pos:end="301:22"><name pos:start="301:9" pos:end="301:12">NULL</name> <operator pos:start="301:14" pos:end="301:15">==</operator> <name pos:start="301:17" pos:end="301:22">pSuite</name></expr>)</condition> <block pos:start="301:25" pos:end="304:5">{<block_content pos:start="302:9" pos:end="303:30">
        <expr_stmt pos:start="302:9" pos:end="302:30"><expr pos:start="302:9" pos:end="302:29"><call pos:start="302:9" pos:end="302:29"><name pos:start="302:9" pos:end="302:27">CU_cleanup_registry</name><argument_list pos:start="302:28" pos:end="302:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="303:9" pos:end="303:30">return <expr pos:start="303:16" pos:end="303:29"><call pos:start="303:16" pos:end="303:29"><name pos:start="303:16" pos:end="303:27">CU_get_error</name><argument_list pos:start="303:28" pos:end="303:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="306:5" pos:end="306:36">/* add the tests to the suite */</comment>
    <if_stmt pos:start="307:5" pos:end="313:5"><if pos:start="307:5" pos:end="313:5">if <condition pos:start="307:8" pos:end="309:9">(<expr pos:start="307:9" pos:end="308:82"><operator pos:start="307:9" pos:end="307:9">(</operator><name pos:start="307:10" pos:end="307:13">NULL</name> <operator pos:start="307:15" pos:end="307:16">==</operator> <call pos:start="307:18" pos:end="307:65"><name pos:start="307:18" pos:end="307:28">CU_add_test</name><argument_list pos:start="307:29" pos:end="307:65">(<argument pos:start="307:30" pos:end="307:35"><expr pos:start="307:30" pos:end="307:35"><name pos:start="307:30" pos:end="307:35">pSuite</name></expr></argument>, <argument pos:start="307:38" pos:end="307:50"><expr pos:start="307:38" pos:end="307:50"><literal type="string" pos:start="307:38" pos:end="307:50">"Check parms"</literal></expr></argument>, <argument pos:start="307:53" pos:end="307:64"><expr pos:start="307:53" pos:end="307:64"><name pos:start="307:53" pos:end="307:64">us1864_test1</name></expr></argument>)</argument_list></call><operator pos:start="307:66" pos:end="307:66">)</operator> <operator pos:start="307:68" pos:end="307:69">||</operator>
        <operator pos:start="308:9" pos:end="308:9">(</operator><name pos:start="308:10" pos:end="308:13">NULL</name> <operator pos:start="308:15" pos:end="308:16">==</operator> <call pos:start="308:18" pos:end="308:81"><name pos:start="308:18" pos:end="308:28">CU_add_test</name><argument_list pos:start="308:29" pos:end="308:81">(<argument pos:start="308:30" pos:end="308:35"><expr pos:start="308:30" pos:end="308:35"><name pos:start="308:30" pos:end="308:35">pSuite</name></expr></argument>, <argument pos:start="308:38" pos:end="308:66"><expr pos:start="308:38" pos:end="308:66"><literal type="string" pos:start="308:38" pos:end="308:66">"Attempt enroll - BASIC pass"</literal></expr></argument>, <argument pos:start="308:69" pos:end="308:80"><expr pos:start="308:69" pos:end="308:80"><name pos:start="308:69" pos:end="308:80">us1864_test2</name></expr></argument>)</argument_list></call><operator pos:start="308:82" pos:end="308:82">)</operator></expr>
        )</condition>
    <block pos:start="310:5" pos:end="313:5">{<block_content pos:start="311:8" pos:end="312:29">
       <expr_stmt pos:start="311:8" pos:end="311:29"><expr pos:start="311:8" pos:end="311:28"><call pos:start="311:8" pos:end="311:28"><name pos:start="311:8" pos:end="311:26">CU_cleanup_registry</name><argument_list pos:start="311:27" pos:end="311:28">()</argument_list></call></expr>;</expr_stmt>
       <return pos:start="312:8" pos:end="312:29">return <expr pos:start="312:15" pos:end="312:28"><call pos:start="312:15" pos:end="312:28"><name pos:start="312:15" pos:end="312:26">CU_get_error</name><argument_list pos:start="312:27" pos:end="312:28">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="315:5" pos:end="317:0">return <expr pos:start="315:12" pos:end="315:22"><name pos:start="315:12" pos:end="315:22">CUE_SUCCESS</name></expr>;</return>
 <cpp:endif pos:start="316:2" pos:end="316:7">#<cpp:directive pos:start="316:3" pos:end="316:7">endif</cpp:directive></cpp:endif>
 </block_content>}</block></function>

</unit>
