<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us900.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us900.c - Unit Tests for User Story 900 - Server CSR Attributes
 *
 * November, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="26:1" pos:end="26:33">#<cpp:directive pos:start="26:2" pos:end="26:7">define</cpp:directive> <cpp:macro pos:start="26:9" pos:end="26:25"><name pos:start="26:9" pos:end="26:25">US900_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="26:29" pos:end="26:33">29900</cpp:value></cpp:define>
<cpp:define pos:start="27:1" pos:end="27:39">#<cpp:directive pos:start="27:2" pos:end="27:7">define</cpp:directive> <cpp:macro pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:23">US900_SERVER_IP</name></cpp:macro>     <cpp:value pos:start="27:29" pos:end="27:39">"127.0.0.1"</cpp:value></cpp:define> 

<cpp:ifndef pos:start="29:1" pos:end="29:13">#<cpp:directive pos:start="29:2" pos:end="29:7">ifndef</cpp:directive> <name pos:start="29:9" pos:end="29:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="30:1" pos:end="30:46">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:24"><name pos:start="30:9" pos:end="30:24">CLIENT_UT_CACERT</name></cpp:macro> <cpp:value pos:start="30:26" pos:end="30:46">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="31:1" pos:end="31:50">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:24">CLIENT_UT_PUBKEY</name></cpp:macro> <cpp:value pos:start="31:26" pos:end="31:50">"./est_client_ut_keypair"</cpp:value></cpp:define>
<cpp:define pos:start="32:1" pos:end="32:49">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:21"><name pos:start="32:9" pos:end="32:21">US900_CACERTS</name></cpp:macro>       <cpp:value pos:start="32:29" pos:end="32:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="33:1" pos:end="33:49">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:25">US900_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="33:29" pos:end="33:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="34:1" pos:end="34:71">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:28"><name pos:start="34:9" pos:end="34:28">US900_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="34:30" pos:end="34:71">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="36:1" pos:end="36:48">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:24"><name pos:start="36:9" pos:end="36:24">CLIENT_UT_CACERT</name></cpp:macro> <cpp:value pos:start="36:26" pos:end="36:48">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="37:1" pos:end="37:48">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24">CLIENT_UT_PUBKEY</name></cpp:macro> <cpp:value pos:start="37:26" pos:end="37:48">"est_client_ut_keypair"</cpp:value></cpp:define>
<cpp:define pos:start="38:1" pos:end="38:50">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:21"><name pos:start="38:9" pos:end="38:21">US900_CACERTS</name></cpp:macro>       <cpp:value pos:start="38:29" pos:end="38:50">"CA\\estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:50">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:25">US900_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="39:29" pos:end="39:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:74">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:28"><name pos:start="40:9" pos:end="40:28">US900_SERVER_CERTKEY</name></cpp:macro> <cpp:value pos:start="40:30" pos:end="40:74">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

<cpp:define pos:start="43:1" pos:end="43:46">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:21">TEST_ATTR_POP</name></cpp:macro> <cpp:value pos:start="43:23" pos:end="43:46">"MAsGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:184">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:23"><name pos:start="44:9" pos:end="44:23">TEST_ATTR_NOPOP</name></cpp:macro> <cpp:value pos:start="44:25" pos:end="44:184">"MHEwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:199">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:26">TEST_ATTR_NOPOPPOP</name></cpp:macro> <cpp:value pos:start="45:28" pos:end="45:199">"MHwwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYJKoZIhvcNAQkH\0"</cpp:value></cpp:define>
<cpp:define pos:start="46:1" pos:end="46:199">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:26"><name pos:start="46:9" pos:end="46:26">TEST_ATTR_POPADDED</name></cpp:macro> <cpp:value pos:start="46:28" pos:end="46:199">"MHwwLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYJKoZIhvcNAQkH\0"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:79">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:18">TEST_ATTR1</name></cpp:macro> <cpp:value pos:start="47:20" pos:end="47:79">"MCYGBysGAQEBARYGCSqGSIb3DQEJBwYFK4EEACIGCWCGSAFlAwQCAg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:27">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:18"><name pos:start="48:9" pos:end="48:18">TEST_ATTR2</name></cpp:macro> <cpp:value pos:start="48:20" pos:end="48:27">"MAA=\0"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:27">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:18">TEST_ATTR7</name></cpp:macro> <cpp:value pos:start="49:20" pos:end="49:27">"MA==\0"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:47">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:22"><name pos:start="50:9" pos:end="50:22">TEST_ATTR2_POP</name></cpp:macro> <cpp:value pos:start="50:24" pos:end="50:47">"MAsGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:53">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:18">TEST_ATTR8</name></cpp:macro> <cpp:value pos:start="51:20" pos:end="51:53">"MAthisis badsGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:223">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:18"><name pos:start="52:9" pos:end="52:18">TEST_ATTR3</name></cpp:macro> <cpp:value pos:start="52:20" pos:end="52:223">"MIGSMFgGA4g3AjFRExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhExlQYXJzZSBTRVQgYXMgMi45OTkuMyBkYXRhExlQYXJzZSBTRVQgYXMgMi45OTkuNCBkYXRhBgkqhkiG9w0BCQcwIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="53:1" pos:end="53:195">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:22">TEST_ATTR4_122</name></cpp:macro> <cpp:value pos:start="53:24" pos:end="53:195">"MHowLAYDiDcCMSUGA4g3AwYDiDcEExlQYXJzZSBTRVQgYXMgMi45OTkuMiBkYXRhBglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYHKwYBAQEBFg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:214">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:25"><name pos:start="54:9" pos:end="54:25">TEST_ATTR4_122POP</name></cpp:macro> <cpp:value pos:start="54:27" pos:end="54:214">"MIGFMCwGA4g3AjElBgOINwMGA4g3BBMZUGFyc2UgU0VUIGFzIDIuOTk5LjIgZGF0YQYJYIZIAWUDBAICBgkrJAMDAggBAQswIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEGBysGAQEBARYGBysGAQEBARYGCSqGSIb3DQEJBw==\0"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:187">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:22">TEST_ATTR5_117</name></cpp:macro> <cpp:value pos:start="55:24" pos:end="55:187">"MHUwJwYDiDcCMSAGA4g3AwYDiDcEExRQYXJzZSBTRVQgYXMgMi45OTkuMgYJYIZIAWUDBAICBgkrJAMDAggBAQswIgYDiDcBMRsTGVBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:206">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:25"><name pos:start="56:9" pos:end="56:25">TEST_ATTR5_117POP</name></cpp:macro> <cpp:value pos:start="56:27" pos:end="56:206">"MIGAMCcGA4g3AjEgBgOINwMGA4g3BBMUUGFyc2UgU0VUIGFzIDIuOTk5LjIGCWCGSAFlAwQCAgYJKyQDAwIIAQELMCIGA4g3ATEbExlQYXJzZSBTRVQgYXMgMi45OTkuMSBkYXRhBgcrBgEBAQEWBgcrBgEBAQEWBgkqhkiG9w0BCQc=\0"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:187">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:22">TEST_ATTR6_116</name></cpp:macro> <cpp:value pos:start="57:24" pos:end="57:187">"MHQwJwYDiDcCMSAGA4g3AwYDiDcEExRQYXJzZSBTRVQgYXMgMi45OTkuMgYJYIZIAWUDBAICBgkrJAMDAggBAQswIQYDiDcBMRoTGFBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdAYHKwYBAQEBFgYHKwYBAQEBFg==\0"</cpp:value></cpp:define>
<cpp:define pos:start="58:1" pos:end="58:358">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:21"><name pos:start="58:9" pos:end="58:21">TEST_ATTR_244</name></cpp:macro> <cpp:value pos:start="58:23" pos:end="58:358">"MIH1MGQGA4g3AjFdBgOINwMGA4g3BBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBlBgOINwExXhNcUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="59:1" pos:end="59:358">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:21">TEST_ATTR_245</name></cpp:macro> <cpp:value pos:start="59:23" pos:end="59:358">"MIH2MGQGA4g3AjFdBgOINwMGA4g3BBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBmBgOINwExXxNdUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1BgcrBgEBAQEWBgcrBgEBAQEW\0"</cpp:value></cpp:define>
<cpp:define pos:start="60:1" pos:end="60:366">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:21"><name pos:start="60:9" pos:end="60:21">TEST_ATTR_250</name></cpp:macro> <cpp:value pos:start="60:23" pos:end="60:366">"MIH7MGQGA4g3AjFdBgOINwMGA4g3BBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBrBgOINwExZBNiUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1MTIzNDUGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="61:1" pos:end="61:385">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:24">TEST_ATTR_250POP</name></cpp:macro> <cpp:value pos:start="61:26" pos:end="61:385">"MIIBBjBkBgOINwIxXQYDiDcDBgOINwQTUVBhcnNlIFNFVCBhcyAyLjk5OS4yIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MAYJYIZIAWUDBAICBgkrJAMDAggBAQswawYDiDcBMWQTYlBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwYWIxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTEyMzQ1BgcrBgEBAQEWBgcrBgEBAQEWBgkqhkiG9w0BCQc=\0"</cpp:value></cpp:define>
<cpp:define pos:start="62:1" pos:end="62:314">#<cpp:directive pos:start="62:2" pos:end="62:7">define</cpp:directive> <cpp:macro pos:start="62:9" pos:end="62:21"><name pos:start="62:9" pos:end="62:21">TEST_ALL_ATTR</name></cpp:macro> <cpp:value pos:start="62:23" pos:end="62:314">"MIHTMIGBBgOINwIxegEB/wICAP8GA4g3AwYDiDcECgECEhAxMjM0NTY3ODkwQUJDREVGExRQYXJzZSBTRVQgYXMgMi45OTkuMhQFMTIzNDUUBTEyMzQ1FgUxMjM0NRoFMTIzNDUcFAAAADEAAAAyAAAAMwAAADQAAAA1HgoAMQAyADMANAA1BglghkgBZQMEAgIGCSskAwMCCAEBCzAiBgOINwExGxMZUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YQYHKwYBAQEBFgYHKwYBAQEBFgEBAA==\0"</cpp:value></cpp:define>
<cpp:define pos:start="63:1" pos:end="63:1396">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:23">TEST_1024_NOPOP</name></cpp:macro> <cpp:value pos:start="63:25" pos:end="63:1396">"MIID/DCCA2MGA4g3AjGCA1oGA4g3AwYDiDcEEioxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTISZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwE1FQYXJzZSBTRVQgYXMgMi45OTkuMiAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAGCWCGSAFlAwQCAgYJKyQDAwIIAQELMGsGA4g3ATFkE2JQYXJzZSBTRVQgYXMgMi45OTkuMSBkYXRhIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MGFiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDUxMjM0NQYHKwYBAQEBFgYHKwYBAQEBFg==\0"</cpp:value></cpp:define>

<cpp:define pos:start="65:1" pos:end="65:1396">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:23">TEST_1025_NOPOP</name></cpp:macro> <cpp:value pos:start="65:25" pos:end="65:1396">"MIID/TCCA2QGA4g3AjGCA1sGA4g3AwYDiDcEEisxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBNRUGFyc2UgU0VUIGFzIDIuOTk5LjIgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwBglghkgBZQMEAgIGCSskAwMCCAEBCzBrBgOINwExZBNiUGFyc2UgU0VUIGFzIDIuOTk5LjEgZGF0YSAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTBhYjEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1MTIzNDUGBysGAQEBARYGBysGAQEBARY=\0"</cpp:value></cpp:define>
<cpp:define pos:start="66:1" pos:end="66:1406">#<cpp:directive pos:start="66:2" pos:end="66:7">define</cpp:directive> <cpp:macro pos:start="66:9" pos:end="66:21"><name pos:start="66:9" pos:end="66:21">TEST_1024_POP</name></cpp:macro> <cpp:value pos:start="66:23" pos:end="66:1406">"MIIEBzCCA2MGA4g3AjGCA1oGA4g3AwYDiDcEEioxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTISZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwE1FQYXJzZSBTRVQgYXMgMi45OTkuMiAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAGCWCGSAFlAwQCAgYJKyQDAwIIAQELMGsGA4g3ATFkE2JQYXJzZSBTRVQgYXMgMi45OTkuMSBkYXRhIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MGFiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDUxMjM0NQYHKwYBAQEBFgYHKwYBAQEBFgYJKoZIhvcNAQkH\0"</cpp:value></cpp:define>

<cpp:define pos:start="68:1" pos:end="68:1471">#<cpp:directive pos:start="68:2" pos:end="68:7">define</cpp:directive> <cpp:macro pos:start="68:9" pos:end="68:22"><name pos:start="68:9" pos:end="68:22">TEST_LONG_ATTR</name></cpp:macro> <cpp:value pos:start="68:24" pos:end="68:1471">"MIIENzCCA54GA4g3AjGCA5UGA4g3AwYDiDcEEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTASZTEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDAxMjM0NTY3ODkwEmUxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAwMTIzNDU2Nzg5MBJlMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMDEyMzQ1Njc4OTATUVBhcnNlIFNFVCBhcyAyLjk5OS4yIDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MAYJYIZIAWUDBAICBgkrJAMDAggBAQswawYDiDcBMWQTYlBhcnNlIFNFVCBhcyAyLjk5OS4xIGRhdGEgMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwYWIxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTEyMzQ1BgcrBgEBAQEWBgcrBgEBAQEW\0"</cpp:value></cpp:define>

<cpp:define pos:start="70:1" pos:end="70:30">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:26"><name pos:start="70:9" pos:end="70:26">EST_UT_MAX_CMD_LEN</name></cpp:macro> <cpp:value pos:start="70:28" pos:end="70:30">255</cpp:value></cpp:define>
<decl_stmt pos:start="71:1" pos:end="71:21"><decl pos:start="71:1" pos:end="71:20"><type pos:start="71:1" pos:end="71:16"><specifier pos:start="71:1" pos:end="71:6">extern</specifier> <name pos:start="71:8" pos:end="71:14">EST_CTX</name> <modifier pos:start="71:16" pos:end="71:16">*</modifier></type><name pos:start="71:17" pos:end="71:20">ectx</name></decl>;</decl_stmt>

<function pos:start="73:1" pos:end="75:1"><type pos:start="73:1" pos:end="73:11"><specifier pos:start="73:1" pos:end="73:6">static</specifier> <name pos:start="73:8" pos:end="73:11">void</name></type> <name pos:start="73:13" pos:end="73:23">us900_clean</name> <parameter_list pos:start="73:25" pos:end="73:30">(<parameter pos:start="73:26" pos:end="73:29"><decl pos:start="73:26" pos:end="73:29"><type pos:start="73:26" pos:end="73:29"><name pos:start="73:26" pos:end="73:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="74:1" pos:end="75:1">{<block_content>
</block_content>}</block></function>

<function pos:start="77:1" pos:end="94:1"><type pos:start="77:1" pos:end="77:10"><specifier pos:start="77:1" pos:end="77:6">static</specifier> <name pos:start="77:8" pos:end="77:10">int</name></type> <name pos:start="77:12" pos:end="77:29">us900_start_server</name> <parameter_list pos:start="77:31" pos:end="77:58">(<parameter pos:start="77:32" pos:end="77:48"><decl pos:start="77:32" pos:end="77:48"><type pos:start="77:32" pos:end="77:48"><name pos:start="77:32" pos:end="77:34">int</name></type> <name pos:start="77:36" pos:end="77:48">manual_enroll</name></decl></parameter>, <parameter pos:start="77:51" pos:end="77:57"><decl pos:start="77:51" pos:end="77:57"><type pos:start="77:51" pos:end="77:57"><name pos:start="77:51" pos:end="77:53">int</name></type> <name pos:start="77:55" pos:end="77:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="78:1" pos:end="94:1">{<block_content pos:start="79:5" pos:end="93:14">
    <decl_stmt pos:start="79:5" pos:end="79:11"><decl pos:start="79:5" pos:end="79:10"><type pos:start="79:5" pos:end="79:7"><name pos:start="79:5" pos:end="79:7">int</name></type> <name pos:start="79:9" pos:end="79:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="81:5" pos:end="90:23"><expr pos:start="81:5" pos:end="90:22"><name pos:start="81:5" pos:end="81:6">rv</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <call pos:start="81:10" pos:end="90:22"><name pos:start="81:10" pos:end="81:17">st_start</name><argument_list pos:start="81:18" pos:end="90:22">(<argument pos:start="81:19" pos:end="81:35"><expr pos:start="81:19" pos:end="81:35"><name pos:start="81:19" pos:end="81:35">US900_SERVER_PORT</name></expr></argument>,
                  <argument pos:start="82:19" pos:end="82:38"><expr pos:start="82:19" pos:end="82:38"><name pos:start="82:19" pos:end="82:38">US900_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="83:19" pos:end="83:38"><expr pos:start="83:19" pos:end="83:38"><name pos:start="83:19" pos:end="83:38">US900_SERVER_CERTKEY</name></expr></argument>,
                  <argument pos:start="84:19" pos:end="84:36"><expr pos:start="84:19" pos:end="84:36"><literal type="string" pos:start="84:19" pos:end="84:36">"US900 test realm"</literal></expr></argument>,
                  <argument pos:start="85:19" pos:end="85:31"><expr pos:start="85:19" pos:end="85:31"><name pos:start="85:19" pos:end="85:31">US900_CACERTS</name></expr></argument>,
                  <argument pos:start="86:19" pos:end="86:35"><expr pos:start="86:19" pos:end="86:35"><name pos:start="86:19" pos:end="86:35">US900_TRUST_CERTS</name></expr></argument>,
                  <argument pos:start="87:19" pos:end="87:39"><expr pos:start="87:19" pos:end="87:39"><literal type="string" pos:start="87:19" pos:end="87:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="88:19" pos:end="88:31"><expr pos:start="88:19" pos:end="88:31"><name pos:start="88:19" pos:end="88:31">manual_enroll</name></expr></argument>,
                  <argument pos:start="89:19" pos:end="89:19"><expr pos:start="89:19" pos:end="89:19"><literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr></argument>,
                  <argument pos:start="90:19" pos:end="90:21"><expr pos:start="90:19" pos:end="90:21"><name pos:start="90:19" pos:end="90:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="92:5" pos:end="92:13"><expr pos:start="92:5" pos:end="92:12"><call pos:start="92:5" pos:end="92:12"><name pos:start="92:5" pos:end="92:9">SLEEP</name><argument_list pos:start="92:10" pos:end="92:12">(<argument pos:start="92:11" pos:end="92:11"><expr pos:start="92:11" pos:end="92:11"><literal type="number" pos:start="92:11" pos:end="92:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="93:5" pos:end="93:14">return <expr pos:start="93:12" pos:end="93:13"><name pos:start="93:12" pos:end="93:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="96:1" pos:end="100:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="101:1" pos:end="131:1"><type pos:start="101:1" pos:end="101:10"><specifier pos:start="101:1" pos:end="101:6">static</specifier> <name pos:start="101:8" pos:end="101:10">int</name></type> <name pos:start="101:12" pos:end="101:27">us900_init_suite</name> <parameter_list pos:start="101:29" pos:end="101:34">(<parameter pos:start="101:30" pos:end="101:33"><decl pos:start="101:30" pos:end="101:33"><type pos:start="101:30" pos:end="101:33"><name pos:start="101:30" pos:end="101:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="102:1" pos:end="131:1">{<block_content pos:start="103:5" pos:end="130:14">
    <decl_stmt pos:start="103:5" pos:end="103:15"><decl pos:start="103:5" pos:end="103:14"><type pos:start="103:5" pos:end="103:7"><name pos:start="103:5" pos:end="103:7">int</name></type> <name pos:start="103:9" pos:end="103:10">rv</name> <init pos:start="103:12" pos:end="103:14">= <expr pos:start="103:14" pos:end="103:14"><literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="104:5" pos:end="104:33"><decl pos:start="104:5" pos:end="104:32"><type pos:start="104:5" pos:end="104:8"><name pos:start="104:5" pos:end="104:8">char</name></type> <name pos:start="104:10" pos:end="104:32"><name pos:start="104:10" pos:end="104:12">cmd</name><index pos:start="104:13" pos:end="104:32">[<expr pos:start="104:14" pos:end="104:31"><name pos:start="104:14" pos:end="104:31">EST_UT_MAX_CMD_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="106:5" pos:end="106:63"><expr pos:start="106:5" pos:end="106:62"><call pos:start="106:5" pos:end="106:62"><name pos:start="106:5" pos:end="106:10">printf</name><argument_list pos:start="106:11" pos:end="106:62">(<argument pos:start="106:12" pos:end="106:61"><expr pos:start="106:12" pos:end="106:61"><literal type="string" pos:start="106:12" pos:end="106:61">"Starting EST Server CSR attributes unit tests.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="108:5" pos:end="110:7">/*
     * gen the keypair to be used for EST Client testing
     */</comment>
    <expr_stmt pos:start="111:5" pos:end="115:26"><expr pos:start="111:5" pos:end="115:25"><call pos:start="111:5" pos:end="115:25"><name pos:start="111:5" pos:end="111:12">snprintf</name><argument_list pos:start="111:13" pos:end="115:25">(
        <argument pos:start="112:9" pos:end="112:11"><expr pos:start="112:9" pos:end="112:11"><name pos:start="112:9" pos:end="112:11">cmd</name></expr></argument>,
        <argument pos:start="113:9" pos:end="113:26"><expr pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:26">EST_UT_MAX_CMD_LEN</name></expr></argument>,
        <argument pos:start="114:9" pos:end="114:58"><expr pos:start="114:9" pos:end="114:58"><literal type="string" pos:start="114:9" pos:end="114:58">"openssl ecparam -name prime256v1 -genkey -out %s"</literal></expr></argument>,
        <argument pos:start="115:9" pos:end="115:24"><expr pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:24">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="116:5" pos:end="116:24"><expr pos:start="116:5" pos:end="116:23"><call pos:start="116:5" pos:end="116:23"><name pos:start="116:5" pos:end="116:10">printf</name><argument_list pos:start="116:11" pos:end="116:23">(<argument pos:start="116:12" pos:end="116:17"><expr pos:start="116:12" pos:end="116:17"><literal type="string" pos:start="116:12" pos:end="116:17">"%s\n"</literal></expr></argument>, <argument pos:start="116:20" pos:end="116:22"><expr pos:start="116:20" pos:end="116:22"><name pos:start="116:20" pos:end="116:22">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="118:5" pos:end="118:21"><expr pos:start="118:5" pos:end="118:20"><name pos:start="118:5" pos:end="118:6">rv</name> <operator pos:start="118:8" pos:end="118:8">=</operator> <call pos:start="118:10" pos:end="118:20"><name pos:start="118:10" pos:end="118:15">system</name><argument_list pos:start="118:16" pos:end="118:20">(<argument pos:start="118:17" pos:end="118:19"><expr pos:start="118:17" pos:end="118:19"><name pos:start="118:17" pos:end="118:19">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="120:5" pos:end="122:7">/*
     * start the server for the tests that need to talk to a server
     */</comment>
    <expr_stmt pos:start="123:5" pos:end="123:18"><expr pos:start="123:5" pos:end="123:17"><call pos:start="123:5" pos:end="123:17"><name pos:start="123:5" pos:end="123:15">us900_clean</name><argument_list pos:start="123:16" pos:end="123:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="125:5" pos:end="127:7">/*
     * Start an instance of the EST server
     */</comment>
    <expr_stmt pos:start="128:5" pos:end="128:34"><expr pos:start="128:5" pos:end="128:33"><name pos:start="128:5" pos:end="128:6">rv</name> <operator pos:start="128:8" pos:end="128:8">=</operator> <call pos:start="128:10" pos:end="128:33"><name pos:start="128:10" pos:end="128:27">us900_start_server</name><argument_list pos:start="128:28" pos:end="128:33">(<argument pos:start="128:29" pos:end="128:29"><expr pos:start="128:29" pos:end="128:29"><literal type="number" pos:start="128:29" pos:end="128:29">0</literal></expr></argument>, <argument pos:start="128:32" pos:end="128:32"><expr pos:start="128:32" pos:end="128:32"><literal type="number" pos:start="128:32" pos:end="128:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="130:5" pos:end="130:14">return <expr pos:start="130:12" pos:end="130:13"><name pos:start="130:12" pos:end="130:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="133:1" pos:end="137:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="138:1" pos:end="143:1"><type pos:start="138:1" pos:end="138:10"><specifier pos:start="138:1" pos:end="138:6">static</specifier> <name pos:start="138:8" pos:end="138:10">int</name></type> <name pos:start="138:12" pos:end="138:30">us900_destroy_suite</name> <parameter_list pos:start="138:32" pos:end="138:37">(<parameter pos:start="138:33" pos:end="138:36"><decl pos:start="138:33" pos:end="138:36"><type pos:start="138:33" pos:end="138:36"><name pos:start="138:33" pos:end="138:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="139:1" pos:end="143:1">{<block_content pos:start="140:5" pos:end="142:13">
    <expr_stmt pos:start="140:5" pos:end="140:14"><expr pos:start="140:5" pos:end="140:13"><call pos:start="140:5" pos:end="140:13"><name pos:start="140:5" pos:end="140:11">st_stop</name><argument_list pos:start="140:12" pos:end="140:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="141:5" pos:end="141:13"><expr pos:start="141:5" pos:end="141:12"><call pos:start="141:5" pos:end="141:12"><name pos:start="141:5" pos:end="141:9">SLEEP</name><argument_list pos:start="141:10" pos:end="141:12">(<argument pos:start="141:11" pos:end="141:11"><expr pos:start="141:11" pos:end="141:11"><literal type="number" pos:start="141:11" pos:end="141:11">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="142:5" pos:end="142:13">return <expr pos:start="142:12" pos:end="142:12"><literal type="number" pos:start="142:12" pos:end="142:12">0</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="145:1" pos:end="156:1"><type pos:start="145:1" pos:end="145:22"><specifier pos:start="145:1" pos:end="145:6">static</specifier> <name pos:start="145:8" pos:end="145:15">unsigned</name> <name pos:start="145:17" pos:end="145:20">char</name> <modifier pos:start="145:22" pos:end="145:22">*</modifier></type> <name pos:start="145:24" pos:end="145:54">handle_correct_csrattrs_request</name> <parameter_list pos:start="145:56" pos:end="147:71">(<parameter pos:start="145:57" pos:end="145:68"><decl pos:start="145:57" pos:end="145:68"><type pos:start="145:57" pos:end="145:68"><name pos:start="145:57" pos:end="145:59">int</name> <modifier pos:start="145:61" pos:end="145:61">*</modifier></type><name pos:start="145:62" pos:end="145:68">csr_len</name></decl></parameter>,
                                                        <parameter pos:start="146:57" pos:end="146:70"><decl pos:start="146:57" pos:end="146:70"><type pos:start="146:57" pos:end="146:70"><name pos:start="146:57" pos:end="146:60">char</name> <modifier pos:start="146:62" pos:end="146:62">*</modifier></type><name pos:start="146:63" pos:end="146:70">path_seg</name></decl></parameter>,
                                                        <parameter pos:start="147:57" pos:end="147:70"><decl pos:start="147:57" pos:end="147:70"><type pos:start="147:57" pos:end="147:70"><name pos:start="147:57" pos:end="147:60">void</name> <modifier pos:start="147:62" pos:end="147:62">*</modifier></type><name pos:start="147:63" pos:end="147:70">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="148:1" pos:end="156:1">{<block_content pos:start="149:5" pos:end="155:22">
    <decl_stmt pos:start="149:5" pos:end="149:28"><decl pos:start="149:5" pos:end="149:27"><type pos:start="149:5" pos:end="149:19"><name pos:start="149:5" pos:end="149:12">unsigned</name> <name pos:start="149:14" pos:end="149:17">char</name> <modifier pos:start="149:19" pos:end="149:19">*</modifier></type><name pos:start="149:20" pos:end="149:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:34"><expr pos:start="151:5" pos:end="151:33"><operator pos:start="151:5" pos:end="151:5">*</operator><name pos:start="151:6" pos:end="151:12">csr_len</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:33"><name pos:start="151:16" pos:end="151:21">strlen</name><argument_list pos:start="151:22" pos:end="151:33">(<argument pos:start="151:23" pos:end="151:32"><expr pos:start="151:23" pos:end="151:32"><name pos:start="151:23" pos:end="151:32">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="152:5" pos:end="152:36"><expr pos:start="152:5" pos:end="152:35"><name pos:start="152:5" pos:end="152:12">csr_data</name> <operator pos:start="152:14" pos:end="152:14">=</operator> <call pos:start="152:16" pos:end="152:35"><name pos:start="152:16" pos:end="152:21">malloc</name><argument_list pos:start="152:22" pos:end="152:35">(<argument pos:start="152:23" pos:end="152:34"><expr pos:start="152:23" pos:end="152:34"><operator pos:start="152:23" pos:end="152:23">*</operator><name pos:start="152:24" pos:end="152:30">csr_len</name> <operator pos:start="152:32" pos:end="152:32">+</operator> <literal type="number" pos:start="152:34" pos:end="152:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="153:5" pos:end="153:53"><expr pos:start="153:5" pos:end="153:52"><call pos:start="153:5" pos:end="153:52"><name pos:start="153:5" pos:end="153:11">strncpy</name><argument_list pos:start="153:12" pos:end="153:52">(<argument pos:start="153:13" pos:end="153:29"><expr pos:start="153:13" pos:end="153:29"><operator pos:start="153:13" pos:end="153:13">(</operator><name pos:start="153:14" pos:end="153:17">char</name> <operator pos:start="153:19" pos:end="153:19">*</operator><operator pos:start="153:20" pos:end="153:20">)</operator> <name pos:start="153:22" pos:end="153:29">csr_data</name></expr></argument>, <argument pos:start="153:32" pos:end="153:41"><expr pos:start="153:32" pos:end="153:41"><name pos:start="153:32" pos:end="153:41">TEST_ATTR1</name></expr></argument>, <argument pos:start="153:44" pos:end="153:51"><expr pos:start="153:44" pos:end="153:51"><operator pos:start="153:44" pos:end="153:44">*</operator><name pos:start="153:45" pos:end="153:51">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="154:5" pos:end="154:27"><expr pos:start="154:5" pos:end="154:26"><name pos:start="154:5" pos:end="154:22"><name pos:start="154:5" pos:end="154:12">csr_data</name><index pos:start="154:13" pos:end="154:22">[<expr pos:start="154:14" pos:end="154:21"><operator pos:start="154:14" pos:end="154:14">*</operator><name pos:start="154:15" pos:end="154:21">csr_len</name></expr>]</index></name> <operator pos:start="154:24" pos:end="154:24">=</operator> <literal type="number" pos:start="154:26" pos:end="154:26">0</literal></expr>;</expr_stmt>
    <return pos:start="155:5" pos:end="155:22">return <expr pos:start="155:12" pos:end="155:21"><operator pos:start="155:12" pos:end="155:12">(</operator><name pos:start="155:13" pos:end="155:20">csr_data</name><operator pos:start="155:21" pos:end="155:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="158:1" pos:end="169:1"><type pos:start="158:1" pos:end="158:22"><specifier pos:start="158:1" pos:end="158:6">static</specifier> <name pos:start="158:8" pos:end="158:15">unsigned</name> <name pos:start="158:17" pos:end="158:20">char</name> <modifier pos:start="158:22" pos:end="158:22">*</modifier></type> <name pos:start="158:24" pos:end="158:54">handle_corrupt_csrattrs_request</name> <parameter_list pos:start="158:56" pos:end="160:71">(<parameter pos:start="158:57" pos:end="158:68"><decl pos:start="158:57" pos:end="158:68"><type pos:start="158:57" pos:end="158:68"><name pos:start="158:57" pos:end="158:59">int</name> <modifier pos:start="158:61" pos:end="158:61">*</modifier></type><name pos:start="158:62" pos:end="158:68">csr_len</name></decl></parameter>,
                                                        <parameter pos:start="159:57" pos:end="159:70"><decl pos:start="159:57" pos:end="159:70"><type pos:start="159:57" pos:end="159:70"><name pos:start="159:57" pos:end="159:60">char</name> <modifier pos:start="159:62" pos:end="159:62">*</modifier></type><name pos:start="159:63" pos:end="159:70">path_seg</name></decl></parameter>,
                                                        <parameter pos:start="160:57" pos:end="160:70"><decl pos:start="160:57" pos:end="160:70"><type pos:start="160:57" pos:end="160:70"><name pos:start="160:57" pos:end="160:60">void</name> <modifier pos:start="160:62" pos:end="160:62">*</modifier></type><name pos:start="160:63" pos:end="160:70">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="161:1" pos:end="169:1">{<block_content pos:start="162:5" pos:end="168:22">
    <decl_stmt pos:start="162:5" pos:end="162:28"><decl pos:start="162:5" pos:end="162:27"><type pos:start="162:5" pos:end="162:19"><name pos:start="162:5" pos:end="162:12">unsigned</name> <name pos:start="162:14" pos:end="162:17">char</name> <modifier pos:start="162:19" pos:end="162:19">*</modifier></type><name pos:start="162:20" pos:end="162:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="164:5" pos:end="164:34"><expr pos:start="164:5" pos:end="164:33"><operator pos:start="164:5" pos:end="164:5">*</operator><name pos:start="164:6" pos:end="164:12">csr_len</name> <operator pos:start="164:14" pos:end="164:14">=</operator> <call pos:start="164:16" pos:end="164:33"><name pos:start="164:16" pos:end="164:21">strlen</name><argument_list pos:start="164:22" pos:end="164:33">(<argument pos:start="164:23" pos:end="164:32"><expr pos:start="164:23" pos:end="164:32"><name pos:start="164:23" pos:end="164:32">TEST_ATTR8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="165:5" pos:end="165:36"><expr pos:start="165:5" pos:end="165:35"><name pos:start="165:5" pos:end="165:12">csr_data</name> <operator pos:start="165:14" pos:end="165:14">=</operator> <call pos:start="165:16" pos:end="165:35"><name pos:start="165:16" pos:end="165:21">malloc</name><argument_list pos:start="165:22" pos:end="165:35">(<argument pos:start="165:23" pos:end="165:34"><expr pos:start="165:23" pos:end="165:34"><operator pos:start="165:23" pos:end="165:23">*</operator><name pos:start="165:24" pos:end="165:30">csr_len</name> <operator pos:start="165:32" pos:end="165:32">+</operator> <literal type="number" pos:start="165:34" pos:end="165:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="166:5" pos:end="166:53"><expr pos:start="166:5" pos:end="166:52"><call pos:start="166:5" pos:end="166:52"><name pos:start="166:5" pos:end="166:11">strncpy</name><argument_list pos:start="166:12" pos:end="166:52">(<argument pos:start="166:13" pos:end="166:29"><expr pos:start="166:13" pos:end="166:29"><operator pos:start="166:13" pos:end="166:13">(</operator><name pos:start="166:14" pos:end="166:17">char</name> <operator pos:start="166:19" pos:end="166:19">*</operator><operator pos:start="166:20" pos:end="166:20">)</operator> <name pos:start="166:22" pos:end="166:29">csr_data</name></expr></argument>, <argument pos:start="166:32" pos:end="166:41"><expr pos:start="166:32" pos:end="166:41"><name pos:start="166:32" pos:end="166:41">TEST_ATTR8</name></expr></argument>, <argument pos:start="166:44" pos:end="166:51"><expr pos:start="166:44" pos:end="166:51"><operator pos:start="166:44" pos:end="166:44">*</operator><name pos:start="166:45" pos:end="166:51">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="167:5" pos:end="167:27"><expr pos:start="167:5" pos:end="167:26"><name pos:start="167:5" pos:end="167:22"><name pos:start="167:5" pos:end="167:12">csr_data</name><index pos:start="167:13" pos:end="167:22">[<expr pos:start="167:14" pos:end="167:21"><operator pos:start="167:14" pos:end="167:14">*</operator><name pos:start="167:15" pos:end="167:21">csr_len</name></expr>]</index></name> <operator pos:start="167:24" pos:end="167:24">=</operator> <literal type="number" pos:start="167:26" pos:end="167:26">0</literal></expr>;</expr_stmt>
    <return pos:start="168:5" pos:end="168:22">return <expr pos:start="168:12" pos:end="168:21"><operator pos:start="168:12" pos:end="168:12">(</operator><name pos:start="168:13" pos:end="168:20">csr_data</name><operator pos:start="168:21" pos:end="168:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="171:1" pos:end="182:1"><type pos:start="171:1" pos:end="171:22"><specifier pos:start="171:1" pos:end="171:6">static</specifier> <name pos:start="171:8" pos:end="171:15">unsigned</name> <name pos:start="171:17" pos:end="171:20">char</name> <modifier pos:start="171:22" pos:end="171:22">*</modifier></type> <name pos:start="171:24" pos:end="171:52">handle_short_csrattrs_request</name> <parameter_list pos:start="171:54" pos:end="173:69">(<parameter pos:start="171:55" pos:end="171:66"><decl pos:start="171:55" pos:end="171:66"><type pos:start="171:55" pos:end="171:66"><name pos:start="171:55" pos:end="171:57">int</name> <modifier pos:start="171:59" pos:end="171:59">*</modifier></type><name pos:start="171:60" pos:end="171:66">csr_len</name></decl></parameter>,
                                                      <parameter pos:start="172:55" pos:end="172:68"><decl pos:start="172:55" pos:end="172:68"><type pos:start="172:55" pos:end="172:68"><name pos:start="172:55" pos:end="172:58">char</name> <modifier pos:start="172:60" pos:end="172:60">*</modifier></type><name pos:start="172:61" pos:end="172:68">path_seg</name></decl></parameter>,
                                                      <parameter pos:start="173:55" pos:end="173:68"><decl pos:start="173:55" pos:end="173:68"><type pos:start="173:55" pos:end="173:68"><name pos:start="173:55" pos:end="173:58">void</name> <modifier pos:start="173:60" pos:end="173:60">*</modifier></type><name pos:start="173:61" pos:end="173:68">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="174:1" pos:end="182:1">{<block_content pos:start="175:5" pos:end="181:22">
    <decl_stmt pos:start="175:5" pos:end="175:28"><decl pos:start="175:5" pos:end="175:27"><type pos:start="175:5" pos:end="175:19"><name pos:start="175:5" pos:end="175:12">unsigned</name> <name pos:start="175:14" pos:end="175:17">char</name> <modifier pos:start="175:19" pos:end="175:19">*</modifier></type><name pos:start="175:20" pos:end="175:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:34"><expr pos:start="177:5" pos:end="177:33"><operator pos:start="177:5" pos:end="177:5">*</operator><name pos:start="177:6" pos:end="177:12">csr_len</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <call pos:start="177:16" pos:end="177:33"><name pos:start="177:16" pos:end="177:21">strlen</name><argument_list pos:start="177:22" pos:end="177:33">(<argument pos:start="177:23" pos:end="177:32"><expr pos:start="177:23" pos:end="177:32"><name pos:start="177:23" pos:end="177:32">TEST_ATTR7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="178:5" pos:end="178:36"><expr pos:start="178:5" pos:end="178:35"><name pos:start="178:5" pos:end="178:12">csr_data</name> <operator pos:start="178:14" pos:end="178:14">=</operator> <call pos:start="178:16" pos:end="178:35"><name pos:start="178:16" pos:end="178:21">malloc</name><argument_list pos:start="178:22" pos:end="178:35">(<argument pos:start="178:23" pos:end="178:34"><expr pos:start="178:23" pos:end="178:34"><operator pos:start="178:23" pos:end="178:23">*</operator><name pos:start="178:24" pos:end="178:30">csr_len</name> <operator pos:start="178:32" pos:end="178:32">+</operator> <literal type="number" pos:start="178:34" pos:end="178:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="179:5" pos:end="179:53"><expr pos:start="179:5" pos:end="179:52"><call pos:start="179:5" pos:end="179:52"><name pos:start="179:5" pos:end="179:11">strncpy</name><argument_list pos:start="179:12" pos:end="179:52">(<argument pos:start="179:13" pos:end="179:29"><expr pos:start="179:13" pos:end="179:29"><operator pos:start="179:13" pos:end="179:13">(</operator><name pos:start="179:14" pos:end="179:17">char</name> <operator pos:start="179:19" pos:end="179:19">*</operator><operator pos:start="179:20" pos:end="179:20">)</operator> <name pos:start="179:22" pos:end="179:29">csr_data</name></expr></argument>, <argument pos:start="179:32" pos:end="179:41"><expr pos:start="179:32" pos:end="179:41"><name pos:start="179:32" pos:end="179:41">TEST_ATTR7</name></expr></argument>, <argument pos:start="179:44" pos:end="179:51"><expr pos:start="179:44" pos:end="179:51"><operator pos:start="179:44" pos:end="179:44">*</operator><name pos:start="179:45" pos:end="179:51">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="180:5" pos:end="180:27"><expr pos:start="180:5" pos:end="180:26"><name pos:start="180:5" pos:end="180:22"><name pos:start="180:5" pos:end="180:12">csr_data</name><index pos:start="180:13" pos:end="180:22">[<expr pos:start="180:14" pos:end="180:21"><operator pos:start="180:14" pos:end="180:14">*</operator><name pos:start="180:15" pos:end="180:21">csr_len</name></expr>]</index></name> <operator pos:start="180:24" pos:end="180:24">=</operator> <literal type="number" pos:start="180:26" pos:end="180:26">0</literal></expr>;</expr_stmt>
    <return pos:start="181:5" pos:end="181:22">return <expr pos:start="181:12" pos:end="181:21"><operator pos:start="181:12" pos:end="181:12">(</operator><name pos:start="181:13" pos:end="181:20">csr_data</name><operator pos:start="181:21" pos:end="181:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="184:1" pos:end="195:1"><type pos:start="184:1" pos:end="184:22"><specifier pos:start="184:1" pos:end="184:6">static</specifier> <name pos:start="184:8" pos:end="184:15">unsigned</name> <name pos:start="184:17" pos:end="184:20">char</name> <modifier pos:start="184:22" pos:end="184:22">*</modifier></type> <name pos:start="184:24" pos:end="184:51">handle_long_csrattrs_request</name> <parameter_list pos:start="184:53" pos:end="186:68">(<parameter pos:start="184:54" pos:end="184:65"><decl pos:start="184:54" pos:end="184:65"><type pos:start="184:54" pos:end="184:65"><name pos:start="184:54" pos:end="184:56">int</name> <modifier pos:start="184:58" pos:end="184:58">*</modifier></type><name pos:start="184:59" pos:end="184:65">csr_len</name></decl></parameter>,
                                                     <parameter pos:start="185:54" pos:end="185:67"><decl pos:start="185:54" pos:end="185:67"><type pos:start="185:54" pos:end="185:67"><name pos:start="185:54" pos:end="185:57">char</name> <modifier pos:start="185:59" pos:end="185:59">*</modifier></type><name pos:start="185:60" pos:end="185:67">path_seg</name></decl></parameter>,
                                                     <parameter pos:start="186:54" pos:end="186:67"><decl pos:start="186:54" pos:end="186:67"><type pos:start="186:54" pos:end="186:67"><name pos:start="186:54" pos:end="186:57">void</name> <modifier pos:start="186:59" pos:end="186:59">*</modifier></type><name pos:start="186:60" pos:end="186:67">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="187:1" pos:end="195:1">{<block_content pos:start="188:5" pos:end="194:22">
    <decl_stmt pos:start="188:5" pos:end="188:28"><decl pos:start="188:5" pos:end="188:27"><type pos:start="188:5" pos:end="188:19"><name pos:start="188:5" pos:end="188:12">unsigned</name> <name pos:start="188:14" pos:end="188:17">char</name> <modifier pos:start="188:19" pos:end="188:19">*</modifier></type><name pos:start="188:20" pos:end="188:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="190:5" pos:end="190:38"><expr pos:start="190:5" pos:end="190:37"><operator pos:start="190:5" pos:end="190:5">*</operator><name pos:start="190:6" pos:end="190:12">csr_len</name> <operator pos:start="190:14" pos:end="190:14">=</operator> <call pos:start="190:16" pos:end="190:37"><name pos:start="190:16" pos:end="190:21">strlen</name><argument_list pos:start="190:22" pos:end="190:37">(<argument pos:start="190:23" pos:end="190:36"><expr pos:start="190:23" pos:end="190:36"><name pos:start="190:23" pos:end="190:36">TEST_LONG_ATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="191:5" pos:end="191:36"><expr pos:start="191:5" pos:end="191:35"><name pos:start="191:5" pos:end="191:12">csr_data</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <call pos:start="191:16" pos:end="191:35"><name pos:start="191:16" pos:end="191:21">malloc</name><argument_list pos:start="191:22" pos:end="191:35">(<argument pos:start="191:23" pos:end="191:34"><expr pos:start="191:23" pos:end="191:34"><operator pos:start="191:23" pos:end="191:23">*</operator><name pos:start="191:24" pos:end="191:30">csr_len</name> <operator pos:start="191:32" pos:end="191:32">+</operator> <literal type="number" pos:start="191:34" pos:end="191:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:57"><expr pos:start="192:5" pos:end="192:56"><call pos:start="192:5" pos:end="192:56"><name pos:start="192:5" pos:end="192:11">strncpy</name><argument_list pos:start="192:12" pos:end="192:56">(<argument pos:start="192:13" pos:end="192:29"><expr pos:start="192:13" pos:end="192:29"><operator pos:start="192:13" pos:end="192:13">(</operator><name pos:start="192:14" pos:end="192:17">char</name> <operator pos:start="192:19" pos:end="192:19">*</operator><operator pos:start="192:20" pos:end="192:20">)</operator> <name pos:start="192:22" pos:end="192:29">csr_data</name></expr></argument>, <argument pos:start="192:32" pos:end="192:45"><expr pos:start="192:32" pos:end="192:45"><name pos:start="192:32" pos:end="192:45">TEST_LONG_ATTR</name></expr></argument>, <argument pos:start="192:48" pos:end="192:55"><expr pos:start="192:48" pos:end="192:55"><operator pos:start="192:48" pos:end="192:48">*</operator><name pos:start="192:49" pos:end="192:55">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="193:5" pos:end="193:27"><expr pos:start="193:5" pos:end="193:26"><name pos:start="193:5" pos:end="193:22"><name pos:start="193:5" pos:end="193:12">csr_data</name><index pos:start="193:13" pos:end="193:22">[<expr pos:start="193:14" pos:end="193:21"><operator pos:start="193:14" pos:end="193:14">*</operator><name pos:start="193:15" pos:end="193:21">csr_len</name></expr>]</index></name> <operator pos:start="193:24" pos:end="193:24">=</operator> <literal type="number" pos:start="193:26" pos:end="193:26">0</literal></expr>;</expr_stmt>
    <return pos:start="194:5" pos:end="194:22">return <expr pos:start="194:12" pos:end="194:21"><operator pos:start="194:12" pos:end="194:12">(</operator><name pos:start="194:13" pos:end="194:20">csr_data</name><operator pos:start="194:21" pos:end="194:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="197:1" pos:end="208:1"><type pos:start="197:1" pos:end="197:22"><specifier pos:start="197:1" pos:end="197:6">static</specifier> <name pos:start="197:8" pos:end="197:15">unsigned</name> <name pos:start="197:17" pos:end="197:20">char</name> <modifier pos:start="197:22" pos:end="197:22">*</modifier></type> <name pos:start="197:24" pos:end="197:52">handle_nopop_csrattrs_request</name> <parameter_list pos:start="197:54" pos:end="199:69">(<parameter pos:start="197:55" pos:end="197:66"><decl pos:start="197:55" pos:end="197:66"><type pos:start="197:55" pos:end="197:66"><name pos:start="197:55" pos:end="197:57">int</name> <modifier pos:start="197:59" pos:end="197:59">*</modifier></type><name pos:start="197:60" pos:end="197:66">csr_len</name></decl></parameter>,
                                                      <parameter pos:start="198:55" pos:end="198:68"><decl pos:start="198:55" pos:end="198:68"><type pos:start="198:55" pos:end="198:68"><name pos:start="198:55" pos:end="198:58">char</name> <modifier pos:start="198:60" pos:end="198:60">*</modifier></type><name pos:start="198:61" pos:end="198:68">path_seg</name></decl></parameter>,
                                                      <parameter pos:start="199:55" pos:end="199:68"><decl pos:start="199:55" pos:end="199:68"><type pos:start="199:55" pos:end="199:68"><name pos:start="199:55" pos:end="199:58">void</name> <modifier pos:start="199:60" pos:end="199:60">*</modifier></type><name pos:start="199:61" pos:end="199:68">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="200:1" pos:end="208:1">{<block_content pos:start="201:5" pos:end="207:22">
    <decl_stmt pos:start="201:5" pos:end="201:28"><decl pos:start="201:5" pos:end="201:27"><type pos:start="201:5" pos:end="201:19"><name pos:start="201:5" pos:end="201:12">unsigned</name> <name pos:start="201:14" pos:end="201:17">char</name> <modifier pos:start="201:19" pos:end="201:19">*</modifier></type><name pos:start="201:20" pos:end="201:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:39"><expr pos:start="203:5" pos:end="203:38"><operator pos:start="203:5" pos:end="203:5">*</operator><name pos:start="203:6" pos:end="203:12">csr_len</name> <operator pos:start="203:14" pos:end="203:14">=</operator> <call pos:start="203:16" pos:end="203:38"><name pos:start="203:16" pos:end="203:21">strlen</name><argument_list pos:start="203:22" pos:end="203:38">(<argument pos:start="203:23" pos:end="203:37"><expr pos:start="203:23" pos:end="203:37"><name pos:start="203:23" pos:end="203:37">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="204:5" pos:end="204:36"><expr pos:start="204:5" pos:end="204:35"><name pos:start="204:5" pos:end="204:12">csr_data</name> <operator pos:start="204:14" pos:end="204:14">=</operator> <call pos:start="204:16" pos:end="204:35"><name pos:start="204:16" pos:end="204:21">malloc</name><argument_list pos:start="204:22" pos:end="204:35">(<argument pos:start="204:23" pos:end="204:34"><expr pos:start="204:23" pos:end="204:34"><operator pos:start="204:23" pos:end="204:23">*</operator><name pos:start="204:24" pos:end="204:30">csr_len</name> <operator pos:start="204:32" pos:end="204:32">+</operator> <literal type="number" pos:start="204:34" pos:end="204:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="205:5" pos:end="205:58"><expr pos:start="205:5" pos:end="205:57"><call pos:start="205:5" pos:end="205:57"><name pos:start="205:5" pos:end="205:11">strncpy</name><argument_list pos:start="205:12" pos:end="205:57">(<argument pos:start="205:13" pos:end="205:29"><expr pos:start="205:13" pos:end="205:29"><operator pos:start="205:13" pos:end="205:13">(</operator><name pos:start="205:14" pos:end="205:17">char</name> <operator pos:start="205:19" pos:end="205:19">*</operator><operator pos:start="205:20" pos:end="205:20">)</operator> <name pos:start="205:22" pos:end="205:29">csr_data</name></expr></argument>, <argument pos:start="205:32" pos:end="205:46"><expr pos:start="205:32" pos:end="205:46"><name pos:start="205:32" pos:end="205:46">TEST_ATTR_NOPOP</name></expr></argument>, <argument pos:start="205:49" pos:end="205:56"><expr pos:start="205:49" pos:end="205:56"><operator pos:start="205:49" pos:end="205:49">*</operator><name pos:start="205:50" pos:end="205:56">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="206:5" pos:end="206:27"><expr pos:start="206:5" pos:end="206:26"><name pos:start="206:5" pos:end="206:22"><name pos:start="206:5" pos:end="206:12">csr_data</name><index pos:start="206:13" pos:end="206:22">[<expr pos:start="206:14" pos:end="206:21"><operator pos:start="206:14" pos:end="206:14">*</operator><name pos:start="206:15" pos:end="206:21">csr_len</name></expr>]</index></name> <operator pos:start="206:24" pos:end="206:24">=</operator> <literal type="number" pos:start="206:26" pos:end="206:26">0</literal></expr>;</expr_stmt>
    <return pos:start="207:5" pos:end="207:22">return <expr pos:start="207:12" pos:end="207:21"><operator pos:start="207:12" pos:end="207:12">(</operator><name pos:start="207:13" pos:end="207:20">csr_data</name><operator pos:start="207:21" pos:end="207:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="210:1" pos:end="219:1"><type pos:start="210:1" pos:end="210:22"><specifier pos:start="210:1" pos:end="210:6">static</specifier> <name pos:start="210:8" pos:end="210:15">unsigned</name> <name pos:start="210:17" pos:end="210:20">char</name> <modifier pos:start="210:22" pos:end="210:22">*</modifier></type> <name pos:start="210:24" pos:end="210:52">handle_empty_csrattrs_request</name> <parameter_list pos:start="210:54" pos:end="212:69">(<parameter pos:start="210:55" pos:end="210:66"><decl pos:start="210:55" pos:end="210:66"><type pos:start="210:55" pos:end="210:66"><name pos:start="210:55" pos:end="210:57">int</name> <modifier pos:start="210:59" pos:end="210:59">*</modifier></type><name pos:start="210:60" pos:end="210:66">csr_len</name></decl></parameter>,
                                                      <parameter pos:start="211:55" pos:end="211:68"><decl pos:start="211:55" pos:end="211:68"><type pos:start="211:55" pos:end="211:68"><name pos:start="211:55" pos:end="211:58">char</name> <modifier pos:start="211:60" pos:end="211:60">*</modifier></type><name pos:start="211:61" pos:end="211:68">path_seg</name></decl></parameter>,
                                                      <parameter pos:start="212:55" pos:end="212:68"><decl pos:start="212:55" pos:end="212:68"><type pos:start="212:55" pos:end="212:68"><name pos:start="212:55" pos:end="212:58">void</name> <modifier pos:start="212:60" pos:end="212:60">*</modifier></type><name pos:start="212:61" pos:end="212:68">app_data</name></decl></parameter>)</parameter_list>
<block pos:start="213:1" pos:end="219:1">{<block_content pos:start="214:5" pos:end="218:22">
    <decl_stmt pos:start="214:5" pos:end="214:28"><decl pos:start="214:5" pos:end="214:27"><type pos:start="214:5" pos:end="214:19"><name pos:start="214:5" pos:end="214:12">unsigned</name> <name pos:start="214:14" pos:end="214:17">char</name> <modifier pos:start="214:19" pos:end="214:19">*</modifier></type><name pos:start="214:20" pos:end="214:27">csr_data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="216:5" pos:end="216:17"><expr pos:start="216:5" pos:end="216:16"><operator pos:start="216:5" pos:end="216:5">*</operator><name pos:start="216:6" pos:end="216:12">csr_len</name> <operator pos:start="216:14" pos:end="216:14">=</operator> <literal type="number" pos:start="216:16" pos:end="216:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="217:5" pos:end="217:20"><expr pos:start="217:5" pos:end="217:19"><name pos:start="217:5" pos:end="217:12">csr_data</name> <operator pos:start="217:14" pos:end="217:14">=</operator> <name pos:start="217:16" pos:end="217:19">NULL</name></expr>;</expr_stmt>
    <return pos:start="218:5" pos:end="218:22">return <expr pos:start="218:12" pos:end="218:21"><operator pos:start="218:12" pos:end="218:12">(</operator><name pos:start="218:13" pos:end="218:20">csr_data</name><operator pos:start="218:21" pos:end="218:21">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="221:1" pos:end="223:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="224:1" pos:end="255:1"><type pos:start="224:1" pos:end="224:10"><specifier pos:start="224:1" pos:end="224:6">static</specifier> <name pos:start="224:8" pos:end="224:10">int</name></type> <name pos:start="224:12" pos:end="224:36">client_manual_cert_verify</name> <parameter_list pos:start="224:38" pos:end="224:77">(<parameter pos:start="224:39" pos:end="224:52"><decl pos:start="224:39" pos:end="224:52"><type pos:start="224:39" pos:end="224:52"><name pos:start="224:39" pos:end="224:42">X509</name> <modifier pos:start="224:44" pos:end="224:44">*</modifier></type><name pos:start="224:45" pos:end="224:52">cur_cert</name></decl></parameter>, <parameter pos:start="224:55" pos:end="224:76"><decl pos:start="224:55" pos:end="224:76"><type pos:start="224:55" pos:end="224:76"><name pos:start="224:55" pos:end="224:57">int</name></type> <name pos:start="224:59" pos:end="224:76">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="225:1" pos:end="255:1">{<block_content pos:start="226:5" pos:end="254:19">
    <decl_stmt pos:start="226:5" pos:end="226:18"><decl pos:start="226:5" pos:end="226:17"><type pos:start="226:5" pos:end="226:9"><name pos:start="226:5" pos:end="226:7">BIO</name> <modifier pos:start="226:9" pos:end="226:9">*</modifier></type> <name pos:start="226:11" pos:end="226:17">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="227:5" pos:end="227:46"><expr pos:start="227:5" pos:end="227:45"><name pos:start="227:5" pos:end="227:11">bio_err</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <call pos:start="227:15" pos:end="227:45"><name pos:start="227:15" pos:end="227:24">BIO_new_fp</name><argument_list pos:start="227:25" pos:end="227:45">(<argument pos:start="227:26" pos:end="227:31"><expr pos:start="227:26" pos:end="227:31"><name pos:start="227:26" pos:end="227:31">stderr</name></expr></argument>, <argument pos:start="227:34" pos:end="227:44"><expr pos:start="227:34" pos:end="227:44"><name pos:start="227:34" pos:end="227:44">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="228:5" pos:end="228:20"><decl pos:start="228:5" pos:end="228:19"><type pos:start="228:5" pos:end="228:7"><name pos:start="228:5" pos:end="228:7">int</name></type> <name pos:start="228:9" pos:end="228:15">approve</name> <init pos:start="228:17" pos:end="228:19">= <expr pos:start="228:19" pos:end="228:19"><literal type="number" pos:start="228:19" pos:end="228:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="230:5" pos:end="232:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="233:5" pos:end="237:59"><expr pos:start="233:5" pos:end="237:58"><call pos:start="233:5" pos:end="237:58"><name pos:start="233:5" pos:end="233:10">printf</name><argument_list pos:start="233:11" pos:end="237:58">(
        <argument pos:start="234:9" pos:end="234:114"><expr pos:start="234:9" pos:end="234:114"><literal type="string" pos:start="234:9" pos:end="234:114">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
        <argument pos:start="235:9" pos:end="235:20"><expr pos:start="235:9" pos:end="235:20"><name pos:start="235:9" pos:end="235:20">__FUNCTION__</name></expr></argument>,
        <argument pos:start="236:9" pos:end="236:26"><expr pos:start="236:9" pos:end="236:26"><name pos:start="236:9" pos:end="236:26">openssl_cert_error</name></expr></argument>,
        <argument pos:start="237:9" pos:end="237:57"><expr pos:start="237:9" pos:end="237:57"><call pos:start="237:9" pos:end="237:57"><name pos:start="237:9" pos:end="237:37">X509_verify_cert_error_string</name><argument_list pos:start="237:38" pos:end="237:57">(<argument pos:start="237:39" pos:end="237:56"><expr pos:start="237:39" pos:end="237:56"><name pos:start="237:39" pos:end="237:56">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:30"><expr pos:start="239:5" pos:end="239:29"><call pos:start="239:5" pos:end="239:29"><name pos:start="239:5" pos:end="239:10">printf</name><argument_list pos:start="239:11" pos:end="239:29">(<argument pos:start="239:12" pos:end="239:28"><expr pos:start="239:12" pos:end="239:28"><literal type="string" pos:start="239:12" pos:end="239:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="240:5" pos:end="240:36"><expr pos:start="240:5" pos:end="240:35"><call pos:start="240:5" pos:end="240:35"><name pos:start="240:5" pos:end="240:17">X509_print_fp</name><argument_list pos:start="240:18" pos:end="240:35">(<argument pos:start="240:19" pos:end="240:24"><expr pos:start="240:19" pos:end="240:24"><name pos:start="240:19" pos:end="240:24">stdout</name></expr></argument>, <argument pos:start="240:27" pos:end="240:34"><expr pos:start="240:27" pos:end="240:34"><name pos:start="240:27" pos:end="240:34">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="241:5" pos:end="245:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="246:5" pos:end="246:74"><expr pos:start="246:5" pos:end="246:73"><call pos:start="246:5" pos:end="246:73"><name pos:start="246:5" pos:end="246:24">X509_signature_print</name><argument_list pos:start="246:25" pos:end="246:73">(<argument pos:start="246:26" pos:end="246:32"><expr pos:start="246:26" pos:end="246:32"><name pos:start="246:26" pos:end="246:32">bio_err</name></expr></argument>, <argument pos:start="246:35" pos:end="246:51"><expr pos:start="246:35" pos:end="246:51"><name pos:start="246:35" pos:end="246:51"><name pos:start="246:35" pos:end="246:42">cur_cert</name><operator pos:start="246:43" pos:end="246:44">-&gt;</operator><name pos:start="246:45" pos:end="246:51">sig_alg</name></name></expr></argument>, <argument pos:start="246:54" pos:end="246:72"><expr pos:start="246:54" pos:end="246:72"><name pos:start="246:54" pos:end="246:72"><name pos:start="246:54" pos:end="246:61">cur_cert</name><operator pos:start="246:62" pos:end="246:63">-&gt;</operator><name pos:start="246:64" pos:end="246:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="248:5" pos:end="250:5"><if pos:start="248:5" pos:end="250:5">if <condition pos:start="248:8" pos:end="248:59">(<expr pos:start="248:9" pos:end="248:58"><name pos:start="248:9" pos:end="248:26">openssl_cert_error</name> <operator pos:start="248:28" pos:end="248:29">==</operator> <name pos:start="248:31" pos:end="248:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="248:61" pos:end="250:5">{<block_content pos:start="249:9" pos:end="249:20">
        <expr_stmt pos:start="249:9" pos:end="249:20"><expr pos:start="249:9" pos:end="249:19"><name pos:start="249:9" pos:end="249:15">approve</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <literal type="number" pos:start="249:19" pos:end="249:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="252:5" pos:end="252:22"><expr pos:start="252:5" pos:end="252:21"><call pos:start="252:5" pos:end="252:21"><name pos:start="252:5" pos:end="252:12">BIO_free</name><argument_list pos:start="252:13" pos:end="252:21">(<argument pos:start="252:14" pos:end="252:20"><expr pos:start="252:14" pos:end="252:20"><name pos:start="252:14" pos:end="252:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="254:5" pos:end="254:19">return <expr pos:start="254:12" pos:end="254:18"><name pos:start="254:12" pos:end="254:18">approve</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="257:1" pos:end="259:3">/*
 * Test1 - exercise the est_server_init_csrattrs() API.
 */</comment>
<function pos:start="260:1" pos:end="366:1"><type pos:start="260:1" pos:end="260:11"><specifier pos:start="260:1" pos:end="260:6">static</specifier> <name pos:start="260:8" pos:end="260:11">void</name></type> <name pos:start="260:13" pos:end="260:23">us900_test1</name> <parameter_list pos:start="260:25" pos:end="260:30">(<parameter pos:start="260:26" pos:end="260:29"><decl pos:start="260:26" pos:end="260:29"><type pos:start="260:26" pos:end="260:29"><name pos:start="260:26" pos:end="260:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="261:1" pos:end="366:1">{<block_content pos:start="262:5" pos:end="365:34">
    <decl_stmt pos:start="262:5" pos:end="262:11"><decl pos:start="262:5" pos:end="262:10"><type pos:start="262:5" pos:end="262:7"><name pos:start="262:5" pos:end="262:7">int</name></type> <name pos:start="262:9" pos:end="262:10">rc</name></decl>;</decl_stmt>

    <expr_stmt pos:start="264:5" pos:end="265:5"><expr pos:start="264:5" pos:end="264:15"><name pos:start="264:5" pos:end="264:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="267:5" pos:end="267:32">/* NULL ctx - should fail */</comment>
    <expr_stmt pos:start="268:5" pos:end="268:59"><expr pos:start="268:5" pos:end="268:58"><name pos:start="268:5" pos:end="268:6">rc</name> <operator pos:start="268:8" pos:end="268:8">=</operator> <call pos:start="268:10" pos:end="268:58"><name pos:start="268:10" pos:end="268:33">est_server_init_csrattrs</name><argument_list pos:start="268:34" pos:end="268:58">(<argument pos:start="268:35" pos:end="268:38"><expr pos:start="268:35" pos:end="268:38"><name pos:start="268:35" pos:end="268:38">NULL</name></expr></argument>, <argument pos:start="268:41" pos:end="268:53"><expr pos:start="268:41" pos:end="268:53"><literal type="string" pos:start="268:41" pos:end="268:53">"US900 test1"</literal></expr></argument>, <argument pos:start="268:56" pos:end="268:57"><expr pos:start="268:56" pos:end="268:57"><literal type="number" pos:start="268:56" pos:end="268:57">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:34"><expr pos:start="269:5" pos:end="269:33"><call pos:start="269:5" pos:end="269:33"><name pos:start="269:5" pos:end="269:13">CU_ASSERT</name><argument_list pos:start="269:14" pos:end="269:33">(<argument pos:start="269:15" pos:end="269:32"><expr pos:start="269:15" pos:end="269:32"><name pos:start="269:15" pos:end="269:16">rc</name> <operator pos:start="269:18" pos:end="269:19">!=</operator> <name pos:start="269:21" pos:end="269:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="271:5" pos:end="271:35">/* NULL string - should pass */</comment>
    <expr_stmt pos:start="272:5" pos:end="272:50"><expr pos:start="272:5" pos:end="272:49"><name pos:start="272:5" pos:end="272:6">rc</name> <operator pos:start="272:8" pos:end="272:8">=</operator> <call pos:start="272:10" pos:end="272:49"><name pos:start="272:10" pos:end="272:33">est_server_init_csrattrs</name><argument_list pos:start="272:34" pos:end="272:49">(<argument pos:start="272:35" pos:end="272:38"><expr pos:start="272:35" pos:end="272:38"><name pos:start="272:35" pos:end="272:38">ectx</name></expr></argument>, <argument pos:start="272:41" pos:end="272:44"><expr pos:start="272:41" pos:end="272:44"><name pos:start="272:41" pos:end="272:44">NULL</name></expr></argument>, <argument pos:start="272:47" pos:end="272:48"><expr pos:start="272:47" pos:end="272:48"><literal type="number" pos:start="272:47" pos:end="272:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="273:5" pos:end="273:34"><expr pos:start="273:5" pos:end="273:33"><call pos:start="273:5" pos:end="273:33"><name pos:start="273:5" pos:end="273:13">CU_ASSERT</name><argument_list pos:start="273:14" pos:end="273:33">(<argument pos:start="273:15" pos:end="273:32"><expr pos:start="273:15" pos:end="273:32"><name pos:start="273:15" pos:end="273:16">rc</name> <operator pos:start="273:18" pos:end="273:19">==</operator> <name pos:start="273:21" pos:end="273:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="275:5" pos:end="275:35">/* Zero length - should fail */</comment>
    <expr_stmt pos:start="276:5" pos:end="276:58"><expr pos:start="276:5" pos:end="276:57"><name pos:start="276:5" pos:end="276:6">rc</name> <operator pos:start="276:8" pos:end="276:8">=</operator> <call pos:start="276:10" pos:end="276:57"><name pos:start="276:10" pos:end="276:33">est_server_init_csrattrs</name><argument_list pos:start="276:34" pos:end="276:57">(<argument pos:start="276:35" pos:end="276:38"><expr pos:start="276:35" pos:end="276:38"><name pos:start="276:35" pos:end="276:38">ectx</name></expr></argument>, <argument pos:start="276:41" pos:end="276:53"><expr pos:start="276:41" pos:end="276:53"><literal type="string" pos:start="276:41" pos:end="276:53">"US900 test1"</literal></expr></argument>, <argument pos:start="276:56" pos:end="276:56"><expr pos:start="276:56" pos:end="276:56"><literal type="number" pos:start="276:56" pos:end="276:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="277:5" pos:end="277:34"><expr pos:start="277:5" pos:end="277:33"><call pos:start="277:5" pos:end="277:33"><name pos:start="277:5" pos:end="277:13">CU_ASSERT</name><argument_list pos:start="277:14" pos:end="277:33">(<argument pos:start="277:15" pos:end="277:32"><expr pos:start="277:15" pos:end="277:32"><name pos:start="277:15" pos:end="277:16">rc</name> <operator pos:start="277:18" pos:end="277:19">!=</operator> <name pos:start="277:21" pos:end="277:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="279:5" pos:end="279:39">/* Length too long - should fail */</comment>
    <expr_stmt pos:start="280:5" pos:end="280:73"><expr pos:start="280:5" pos:end="280:72"><name pos:start="280:5" pos:end="280:6">rc</name> <operator pos:start="280:8" pos:end="280:8">=</operator> <call pos:start="280:10" pos:end="280:72"><name pos:start="280:10" pos:end="280:33">est_server_init_csrattrs</name><argument_list pos:start="280:34" pos:end="280:72">(<argument pos:start="280:35" pos:end="280:38"><expr pos:start="280:35" pos:end="280:38"><name pos:start="280:35" pos:end="280:38">ectx</name></expr></argument>, <argument pos:start="280:41" pos:end="280:53"><expr pos:start="280:41" pos:end="280:53"><literal type="string" pos:start="280:41" pos:end="280:53">"US900 test1"</literal></expr></argument>, <argument pos:start="280:56" pos:end="280:71"><expr pos:start="280:56" pos:end="280:71"><name pos:start="280:56" pos:end="280:67">MAX_CSRATTRS</name> <operator pos:start="280:69" pos:end="280:69">+</operator> <literal type="number" pos:start="280:71" pos:end="280:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="281:5" pos:end="281:34"><expr pos:start="281:5" pos:end="281:33"><call pos:start="281:5" pos:end="281:33"><name pos:start="281:5" pos:end="281:13">CU_ASSERT</name><argument_list pos:start="281:14" pos:end="281:33">(<argument pos:start="281:15" pos:end="281:32"><expr pos:start="281:15" pos:end="281:32"><name pos:start="281:15" pos:end="281:16">rc</name> <operator pos:start="281:18" pos:end="281:19">!=</operator> <name pos:start="281:21" pos:end="281:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="283:5" pos:end="283:48">/* Not a real base64 string - should fail */</comment>
    <expr_stmt pos:start="284:5" pos:end="284:59"><expr pos:start="284:5" pos:end="284:58"><name pos:start="284:5" pos:end="284:6">rc</name> <operator pos:start="284:8" pos:end="284:8">=</operator> <call pos:start="284:10" pos:end="284:58"><name pos:start="284:10" pos:end="284:33">est_server_init_csrattrs</name><argument_list pos:start="284:34" pos:end="284:58">(<argument pos:start="284:35" pos:end="284:38"><expr pos:start="284:35" pos:end="284:38"><name pos:start="284:35" pos:end="284:38">ectx</name></expr></argument>, <argument pos:start="284:41" pos:end="284:53"><expr pos:start="284:41" pos:end="284:53"><literal type="string" pos:start="284:41" pos:end="284:53">"US900 test1"</literal></expr></argument>, <argument pos:start="284:56" pos:end="284:57"><expr pos:start="284:56" pos:end="284:57"><literal type="number" pos:start="284:56" pos:end="284:57">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="285:5" pos:end="285:34"><expr pos:start="285:5" pos:end="285:33"><call pos:start="285:5" pos:end="285:33"><name pos:start="285:5" pos:end="285:13">CU_ASSERT</name><argument_list pos:start="285:14" pos:end="285:33">(<argument pos:start="285:15" pos:end="285:32"><expr pos:start="285:15" pos:end="285:32"><name pos:start="285:15" pos:end="285:16">rc</name> <operator pos:start="285:18" pos:end="285:19">!=</operator> <name pos:start="285:21" pos:end="285:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="287:5" pos:end="287:42">/* Real base64 string - should pass */</comment>
    <expr_stmt pos:start="288:5" pos:end="288:78"><expr pos:start="288:5" pos:end="288:77"><name pos:start="288:5" pos:end="288:6">rc</name> <operator pos:start="288:8" pos:end="288:8">=</operator> <call pos:start="288:10" pos:end="288:77"><name pos:start="288:10" pos:end="288:33">est_server_init_csrattrs</name><argument_list pos:start="288:34" pos:end="288:77">(<argument pos:start="288:35" pos:end="288:38"><expr pos:start="288:35" pos:end="288:38"><name pos:start="288:35" pos:end="288:38">ectx</name></expr></argument>, <argument pos:start="288:41" pos:end="288:53"><expr pos:start="288:41" pos:end="288:53"><name pos:start="288:41" pos:end="288:53">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="288:56" pos:end="288:76"><expr pos:start="288:56" pos:end="288:76"><call pos:start="288:56" pos:end="288:76"><name pos:start="288:56" pos:end="288:61">strlen</name><argument_list pos:start="288:62" pos:end="288:76">(<argument pos:start="288:63" pos:end="288:75"><expr pos:start="288:63" pos:end="288:75"><name pos:start="288:63" pos:end="288:75">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="289:5" pos:end="289:34"><expr pos:start="289:5" pos:end="289:33"><call pos:start="289:5" pos:end="289:33"><name pos:start="289:5" pos:end="289:13">CU_ASSERT</name><argument_list pos:start="289:14" pos:end="289:33">(<argument pos:start="289:15" pos:end="289:32"><expr pos:start="289:15" pos:end="289:32"><name pos:start="289:15" pos:end="289:16">rc</name> <operator pos:start="289:18" pos:end="289:19">==</operator> <name pos:start="289:21" pos:end="289:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="291:5" pos:end="291:42">/* Setting the smallest base64 size */</comment>
    <expr_stmt pos:start="292:5" pos:end="292:72"><expr pos:start="292:5" pos:end="292:71"><name pos:start="292:5" pos:end="292:6">rc</name> <operator pos:start="292:8" pos:end="292:8">=</operator> <call pos:start="292:10" pos:end="292:71"><name pos:start="292:10" pos:end="292:33">est_server_init_csrattrs</name><argument_list pos:start="292:34" pos:end="292:71">(<argument pos:start="292:35" pos:end="292:38"><expr pos:start="292:35" pos:end="292:38"><name pos:start="292:35" pos:end="292:38">ectx</name></expr></argument>, <argument pos:start="292:41" pos:end="292:50"><expr pos:start="292:41" pos:end="292:50"><name pos:start="292:41" pos:end="292:50">TEST_ATTR2</name></expr></argument>, <argument pos:start="292:53" pos:end="292:70"><expr pos:start="292:53" pos:end="292:70"><call pos:start="292:53" pos:end="292:70"><name pos:start="292:53" pos:end="292:58">strlen</name><argument_list pos:start="292:59" pos:end="292:70">(<argument pos:start="292:60" pos:end="292:69"><expr pos:start="292:60" pos:end="292:69"><name pos:start="292:60" pos:end="292:69">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="293:5" pos:end="293:34"><expr pos:start="293:5" pos:end="293:33"><call pos:start="293:5" pos:end="293:33"><name pos:start="293:5" pos:end="293:13">CU_ASSERT</name><argument_list pos:start="293:14" pos:end="293:33">(<argument pos:start="293:15" pos:end="293:32"><expr pos:start="293:15" pos:end="293:32"><name pos:start="293:15" pos:end="293:16">rc</name> <operator pos:start="293:18" pos:end="293:19">==</operator> <name pos:start="293:21" pos:end="293:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="295:5" pos:end="295:48">/* Setting an illegally small base64 size */</comment>
    <expr_stmt pos:start="296:5" pos:end="296:72"><expr pos:start="296:5" pos:end="296:71"><name pos:start="296:5" pos:end="296:6">rc</name> <operator pos:start="296:8" pos:end="296:8">=</operator> <call pos:start="296:10" pos:end="296:71"><name pos:start="296:10" pos:end="296:33">est_server_init_csrattrs</name><argument_list pos:start="296:34" pos:end="296:71">(<argument pos:start="296:35" pos:end="296:38"><expr pos:start="296:35" pos:end="296:38"><name pos:start="296:35" pos:end="296:38">ectx</name></expr></argument>, <argument pos:start="296:41" pos:end="296:50"><expr pos:start="296:41" pos:end="296:50"><name pos:start="296:41" pos:end="296:50">TEST_ATTR7</name></expr></argument>, <argument pos:start="296:53" pos:end="296:70"><expr pos:start="296:53" pos:end="296:70"><call pos:start="296:53" pos:end="296:70"><name pos:start="296:53" pos:end="296:58">strlen</name><argument_list pos:start="296:59" pos:end="296:70">(<argument pos:start="296:60" pos:end="296:69"><expr pos:start="296:60" pos:end="296:69"><name pos:start="296:60" pos:end="296:69">TEST_ATTR7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="297:5" pos:end="297:34"><expr pos:start="297:5" pos:end="297:33"><call pos:start="297:5" pos:end="297:33"><name pos:start="297:5" pos:end="297:13">CU_ASSERT</name><argument_list pos:start="297:14" pos:end="297:33">(<argument pos:start="297:15" pos:end="297:32"><expr pos:start="297:15" pos:end="297:32"><name pos:start="297:15" pos:end="297:16">rc</name> <operator pos:start="297:18" pos:end="297:19">!=</operator> <name pos:start="297:21" pos:end="297:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="299:5" pos:end="299:30">/* Setting the size 122 */</comment>
    <expr_stmt pos:start="300:5" pos:end="300:80"><expr pos:start="300:5" pos:end="300:79"><name pos:start="300:5" pos:end="300:6">rc</name> <operator pos:start="300:8" pos:end="300:8">=</operator> <call pos:start="300:10" pos:end="300:79"><name pos:start="300:10" pos:end="300:33">est_server_init_csrattrs</name><argument_list pos:start="300:34" pos:end="300:79">(<argument pos:start="300:35" pos:end="300:38"><expr pos:start="300:35" pos:end="300:38"><name pos:start="300:35" pos:end="300:38">ectx</name></expr></argument>, <argument pos:start="300:41" pos:end="300:54"><expr pos:start="300:41" pos:end="300:54"><name pos:start="300:41" pos:end="300:54">TEST_ATTR4_122</name></expr></argument>, <argument pos:start="300:57" pos:end="300:78"><expr pos:start="300:57" pos:end="300:78"><call pos:start="300:57" pos:end="300:78"><name pos:start="300:57" pos:end="300:62">strlen</name><argument_list pos:start="300:63" pos:end="300:78">(<argument pos:start="300:64" pos:end="300:77"><expr pos:start="300:64" pos:end="300:77"><name pos:start="300:64" pos:end="300:77">TEST_ATTR4_122</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="301:5" pos:end="301:34"><expr pos:start="301:5" pos:end="301:33"><call pos:start="301:5" pos:end="301:33"><name pos:start="301:5" pos:end="301:13">CU_ASSERT</name><argument_list pos:start="301:14" pos:end="301:33">(<argument pos:start="301:15" pos:end="301:32"><expr pos:start="301:15" pos:end="301:32"><name pos:start="301:15" pos:end="301:16">rc</name> <operator pos:start="301:18" pos:end="301:19">==</operator> <name pos:start="301:21" pos:end="301:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="303:5" pos:end="303:30">/* Setting the size 117 */</comment>
    <expr_stmt pos:start="304:5" pos:end="304:80"><expr pos:start="304:5" pos:end="304:79"><name pos:start="304:5" pos:end="304:6">rc</name> <operator pos:start="304:8" pos:end="304:8">=</operator> <call pos:start="304:10" pos:end="304:79"><name pos:start="304:10" pos:end="304:33">est_server_init_csrattrs</name><argument_list pos:start="304:34" pos:end="304:79">(<argument pos:start="304:35" pos:end="304:38"><expr pos:start="304:35" pos:end="304:38"><name pos:start="304:35" pos:end="304:38">ectx</name></expr></argument>, <argument pos:start="304:41" pos:end="304:54"><expr pos:start="304:41" pos:end="304:54"><name pos:start="304:41" pos:end="304:54">TEST_ATTR5_117</name></expr></argument>, <argument pos:start="304:57" pos:end="304:78"><expr pos:start="304:57" pos:end="304:78"><call pos:start="304:57" pos:end="304:78"><name pos:start="304:57" pos:end="304:62">strlen</name><argument_list pos:start="304:63" pos:end="304:78">(<argument pos:start="304:64" pos:end="304:77"><expr pos:start="304:64" pos:end="304:77"><name pos:start="304:64" pos:end="304:77">TEST_ATTR5_117</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="305:5" pos:end="305:34"><expr pos:start="305:5" pos:end="305:33"><call pos:start="305:5" pos:end="305:33"><name pos:start="305:5" pos:end="305:13">CU_ASSERT</name><argument_list pos:start="305:14" pos:end="305:33">(<argument pos:start="305:15" pos:end="305:32"><expr pos:start="305:15" pos:end="305:32"><name pos:start="305:15" pos:end="305:16">rc</name> <operator pos:start="305:18" pos:end="305:19">==</operator> <name pos:start="305:21" pos:end="305:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="307:5" pos:end="307:20">/* enable PoP */</comment>
    <expr_stmt pos:start="308:5" pos:end="308:20"><expr pos:start="308:5" pos:end="308:19"><call pos:start="308:5" pos:end="308:19"><name pos:start="308:5" pos:end="308:17">st_enable_pop</name><argument_list pos:start="308:18" pos:end="308:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="310:5" pos:end="310:58">/* Real base64 string needs PoP added - should pass */</comment>
    <expr_stmt pos:start="311:5" pos:end="314:33"><expr pos:start="311:5" pos:end="314:32"><name pos:start="311:5" pos:end="311:6">rc</name> <operator pos:start="311:8" pos:end="311:8">=</operator> <call pos:start="311:10" pos:end="314:32"><name pos:start="311:10" pos:end="311:33">est_server_init_csrattrs</name><argument_list pos:start="311:34" pos:end="314:32">(
        <argument pos:start="312:9" pos:end="312:12"><expr pos:start="312:9" pos:end="312:12"><name pos:start="312:9" pos:end="312:12">ectx</name></expr></argument>,
        <argument pos:start="313:9" pos:end="313:23"><expr pos:start="313:9" pos:end="313:23"><name pos:start="313:9" pos:end="313:23">TEST_ATTR_NOPOP</name></expr></argument>,
        <argument pos:start="314:9" pos:end="314:31"><expr pos:start="314:9" pos:end="314:31"><call pos:start="314:9" pos:end="314:31"><name pos:start="314:9" pos:end="314:14">strlen</name><argument_list pos:start="314:15" pos:end="314:31">(<argument pos:start="314:16" pos:end="314:30"><expr pos:start="314:16" pos:end="314:30"><name pos:start="314:16" pos:end="314:30">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="315:5" pos:end="315:34"><expr pos:start="315:5" pos:end="315:33"><call pos:start="315:5" pos:end="315:33"><name pos:start="315:5" pos:end="315:13">CU_ASSERT</name><argument_list pos:start="315:14" pos:end="315:33">(<argument pos:start="315:15" pos:end="315:32"><expr pos:start="315:15" pos:end="315:32"><name pos:start="315:15" pos:end="315:16">rc</name> <operator pos:start="315:18" pos:end="315:19">==</operator> <name pos:start="315:21" pos:end="315:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="317:5" pos:end="317:48">/* Not a real base64 string - should fail */</comment>
    <expr_stmt pos:start="318:5" pos:end="318:59"><expr pos:start="318:5" pos:end="318:58"><name pos:start="318:5" pos:end="318:6">rc</name> <operator pos:start="318:8" pos:end="318:8">=</operator> <call pos:start="318:10" pos:end="318:58"><name pos:start="318:10" pos:end="318:33">est_server_init_csrattrs</name><argument_list pos:start="318:34" pos:end="318:58">(<argument pos:start="318:35" pos:end="318:38"><expr pos:start="318:35" pos:end="318:38"><name pos:start="318:35" pos:end="318:38">ectx</name></expr></argument>, <argument pos:start="318:41" pos:end="318:53"><expr pos:start="318:41" pos:end="318:53"><literal type="string" pos:start="318:41" pos:end="318:53">"US900 test1"</literal></expr></argument>, <argument pos:start="318:56" pos:end="318:57"><expr pos:start="318:56" pos:end="318:57"><literal type="number" pos:start="318:56" pos:end="318:57">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="319:5" pos:end="319:34"><expr pos:start="319:5" pos:end="319:33"><call pos:start="319:5" pos:end="319:33"><name pos:start="319:5" pos:end="319:13">CU_ASSERT</name><argument_list pos:start="319:14" pos:end="319:33">(<argument pos:start="319:15" pos:end="319:32"><expr pos:start="319:15" pos:end="319:32"><name pos:start="319:15" pos:end="319:16">rc</name> <operator pos:start="319:18" pos:end="319:19">!=</operator> <name pos:start="319:21" pos:end="319:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="321:5" pos:end="321:35">/* Setting the smallest size */</comment>
    <expr_stmt pos:start="322:5" pos:end="322:72"><expr pos:start="322:5" pos:end="322:71"><name pos:start="322:5" pos:end="322:6">rc</name> <operator pos:start="322:8" pos:end="322:8">=</operator> <call pos:start="322:10" pos:end="322:71"><name pos:start="322:10" pos:end="322:33">est_server_init_csrattrs</name><argument_list pos:start="322:34" pos:end="322:71">(<argument pos:start="322:35" pos:end="322:38"><expr pos:start="322:35" pos:end="322:38"><name pos:start="322:35" pos:end="322:38">ectx</name></expr></argument>, <argument pos:start="322:41" pos:end="322:50"><expr pos:start="322:41" pos:end="322:50"><name pos:start="322:41" pos:end="322:50">TEST_ATTR2</name></expr></argument>, <argument pos:start="322:53" pos:end="322:70"><expr pos:start="322:53" pos:end="322:70"><call pos:start="322:53" pos:end="322:70"><name pos:start="322:53" pos:end="322:58">strlen</name><argument_list pos:start="322:59" pos:end="322:70">(<argument pos:start="322:60" pos:end="322:69"><expr pos:start="322:60" pos:end="322:69"><name pos:start="322:60" pos:end="322:69">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="323:5" pos:end="323:34"><expr pos:start="323:5" pos:end="323:33"><call pos:start="323:5" pos:end="323:33"><name pos:start="323:5" pos:end="323:13">CU_ASSERT</name><argument_list pos:start="323:14" pos:end="323:33">(<argument pos:start="323:15" pos:end="323:32"><expr pos:start="323:15" pos:end="323:32"><name pos:start="323:15" pos:end="323:16">rc</name> <operator pos:start="323:18" pos:end="323:19">==</operator> <name pos:start="323:21" pos:end="323:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="325:5" pos:end="325:30">/* Setting the size 122 */</comment>
    <expr_stmt pos:start="326:5" pos:end="326:80"><expr pos:start="326:5" pos:end="326:79"><name pos:start="326:5" pos:end="326:6">rc</name> <operator pos:start="326:8" pos:end="326:8">=</operator> <call pos:start="326:10" pos:end="326:79"><name pos:start="326:10" pos:end="326:33">est_server_init_csrattrs</name><argument_list pos:start="326:34" pos:end="326:79">(<argument pos:start="326:35" pos:end="326:38"><expr pos:start="326:35" pos:end="326:38"><name pos:start="326:35" pos:end="326:38">ectx</name></expr></argument>, <argument pos:start="326:41" pos:end="326:54"><expr pos:start="326:41" pos:end="326:54"><name pos:start="326:41" pos:end="326:54">TEST_ATTR4_122</name></expr></argument>, <argument pos:start="326:57" pos:end="326:78"><expr pos:start="326:57" pos:end="326:78"><call pos:start="326:57" pos:end="326:78"><name pos:start="326:57" pos:end="326:62">strlen</name><argument_list pos:start="326:63" pos:end="326:78">(<argument pos:start="326:64" pos:end="326:77"><expr pos:start="326:64" pos:end="326:77"><name pos:start="326:64" pos:end="326:77">TEST_ATTR4_122</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="327:5" pos:end="327:34"><expr pos:start="327:5" pos:end="327:33"><call pos:start="327:5" pos:end="327:33"><name pos:start="327:5" pos:end="327:13">CU_ASSERT</name><argument_list pos:start="327:14" pos:end="327:33">(<argument pos:start="327:15" pos:end="327:32"><expr pos:start="327:15" pos:end="327:32"><name pos:start="327:15" pos:end="327:16">rc</name> <operator pos:start="327:18" pos:end="327:19">==</operator> <name pos:start="327:21" pos:end="327:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="329:5" pos:end="329:30">/* Setting the size 117 */</comment>
    <expr_stmt pos:start="330:5" pos:end="330:80"><expr pos:start="330:5" pos:end="330:79"><name pos:start="330:5" pos:end="330:6">rc</name> <operator pos:start="330:8" pos:end="330:8">=</operator> <call pos:start="330:10" pos:end="330:79"><name pos:start="330:10" pos:end="330:33">est_server_init_csrattrs</name><argument_list pos:start="330:34" pos:end="330:79">(<argument pos:start="330:35" pos:end="330:38"><expr pos:start="330:35" pos:end="330:38"><name pos:start="330:35" pos:end="330:38">ectx</name></expr></argument>, <argument pos:start="330:41" pos:end="330:54"><expr pos:start="330:41" pos:end="330:54"><name pos:start="330:41" pos:end="330:54">TEST_ATTR5_117</name></expr></argument>, <argument pos:start="330:57" pos:end="330:78"><expr pos:start="330:57" pos:end="330:78"><call pos:start="330:57" pos:end="330:78"><name pos:start="330:57" pos:end="330:62">strlen</name><argument_list pos:start="330:63" pos:end="330:78">(<argument pos:start="330:64" pos:end="330:77"><expr pos:start="330:64" pos:end="330:77"><name pos:start="330:64" pos:end="330:77">TEST_ATTR5_117</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="331:5" pos:end="331:34"><expr pos:start="331:5" pos:end="331:33"><call pos:start="331:5" pos:end="331:33"><name pos:start="331:5" pos:end="331:13">CU_ASSERT</name><argument_list pos:start="331:14" pos:end="331:33">(<argument pos:start="331:15" pos:end="331:32"><expr pos:start="331:15" pos:end="331:32"><name pos:start="331:15" pos:end="331:16">rc</name> <operator pos:start="331:18" pos:end="331:19">==</operator> <name pos:start="331:21" pos:end="331:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="333:5" pos:end="333:30">/* Setting the size 116 */</comment>
    <expr_stmt pos:start="334:5" pos:end="334:80"><expr pos:start="334:5" pos:end="334:79"><name pos:start="334:5" pos:end="334:6">rc</name> <operator pos:start="334:8" pos:end="334:8">=</operator> <call pos:start="334:10" pos:end="334:79"><name pos:start="334:10" pos:end="334:33">est_server_init_csrattrs</name><argument_list pos:start="334:34" pos:end="334:79">(<argument pos:start="334:35" pos:end="334:38"><expr pos:start="334:35" pos:end="334:38"><name pos:start="334:35" pos:end="334:38">ectx</name></expr></argument>, <argument pos:start="334:41" pos:end="334:54"><expr pos:start="334:41" pos:end="334:54"><name pos:start="334:41" pos:end="334:54">TEST_ATTR6_116</name></expr></argument>, <argument pos:start="334:57" pos:end="334:78"><expr pos:start="334:57" pos:end="334:78"><call pos:start="334:57" pos:end="334:78"><name pos:start="334:57" pos:end="334:62">strlen</name><argument_list pos:start="334:63" pos:end="334:78">(<argument pos:start="334:64" pos:end="334:77"><expr pos:start="334:64" pos:end="334:77"><name pos:start="334:64" pos:end="334:77">TEST_ATTR6_116</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="335:5" pos:end="335:34"><expr pos:start="335:5" pos:end="335:33"><call pos:start="335:5" pos:end="335:33"><name pos:start="335:5" pos:end="335:13">CU_ASSERT</name><argument_list pos:start="335:14" pos:end="335:33">(<argument pos:start="335:15" pos:end="335:32"><expr pos:start="335:15" pos:end="335:32"><name pos:start="335:15" pos:end="335:16">rc</name> <operator pos:start="335:18" pos:end="335:19">==</operator> <name pos:start="335:21" pos:end="335:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="337:5" pos:end="337:30">/* Setting the size 244 */</comment>
    <expr_stmt pos:start="338:5" pos:end="338:78"><expr pos:start="338:5" pos:end="338:77"><name pos:start="338:5" pos:end="338:6">rc</name> <operator pos:start="338:8" pos:end="338:8">=</operator> <call pos:start="338:10" pos:end="338:77"><name pos:start="338:10" pos:end="338:33">est_server_init_csrattrs</name><argument_list pos:start="338:34" pos:end="338:77">(<argument pos:start="338:35" pos:end="338:38"><expr pos:start="338:35" pos:end="338:38"><name pos:start="338:35" pos:end="338:38">ectx</name></expr></argument>, <argument pos:start="338:41" pos:end="338:53"><expr pos:start="338:41" pos:end="338:53"><name pos:start="338:41" pos:end="338:53">TEST_ATTR_244</name></expr></argument>, <argument pos:start="338:56" pos:end="338:76"><expr pos:start="338:56" pos:end="338:76"><call pos:start="338:56" pos:end="338:76"><name pos:start="338:56" pos:end="338:61">strlen</name><argument_list pos:start="338:62" pos:end="338:76">(<argument pos:start="338:63" pos:end="338:75"><expr pos:start="338:63" pos:end="338:75"><name pos:start="338:63" pos:end="338:75">TEST_ATTR_244</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="339:5" pos:end="339:34"><expr pos:start="339:5" pos:end="339:33"><call pos:start="339:5" pos:end="339:33"><name pos:start="339:5" pos:end="339:13">CU_ASSERT</name><argument_list pos:start="339:14" pos:end="339:33">(<argument pos:start="339:15" pos:end="339:32"><expr pos:start="339:15" pos:end="339:32"><name pos:start="339:15" pos:end="339:16">rc</name> <operator pos:start="339:18" pos:end="339:19">==</operator> <name pos:start="339:21" pos:end="339:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="341:5" pos:end="341:30">/* Setting the size 245 */</comment>
    <expr_stmt pos:start="342:5" pos:end="342:78"><expr pos:start="342:5" pos:end="342:77"><name pos:start="342:5" pos:end="342:6">rc</name> <operator pos:start="342:8" pos:end="342:8">=</operator> <call pos:start="342:10" pos:end="342:77"><name pos:start="342:10" pos:end="342:33">est_server_init_csrattrs</name><argument_list pos:start="342:34" pos:end="342:77">(<argument pos:start="342:35" pos:end="342:38"><expr pos:start="342:35" pos:end="342:38"><name pos:start="342:35" pos:end="342:38">ectx</name></expr></argument>, <argument pos:start="342:41" pos:end="342:53"><expr pos:start="342:41" pos:end="342:53"><name pos:start="342:41" pos:end="342:53">TEST_ATTR_245</name></expr></argument>, <argument pos:start="342:56" pos:end="342:76"><expr pos:start="342:56" pos:end="342:76"><call pos:start="342:56" pos:end="342:76"><name pos:start="342:56" pos:end="342:61">strlen</name><argument_list pos:start="342:62" pos:end="342:76">(<argument pos:start="342:63" pos:end="342:75"><expr pos:start="342:63" pos:end="342:75"><name pos:start="342:63" pos:end="342:75">TEST_ATTR_245</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="343:5" pos:end="343:34"><expr pos:start="343:5" pos:end="343:33"><call pos:start="343:5" pos:end="343:33"><name pos:start="343:5" pos:end="343:13">CU_ASSERT</name><argument_list pos:start="343:14" pos:end="343:33">(<argument pos:start="343:15" pos:end="343:32"><expr pos:start="343:15" pos:end="343:32"><name pos:start="343:15" pos:end="343:16">rc</name> <operator pos:start="343:18" pos:end="343:19">==</operator> <name pos:start="343:21" pos:end="343:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="345:5" pos:end="345:30">/* Setting the size 250 */</comment>
    <expr_stmt pos:start="346:5" pos:end="346:78"><expr pos:start="346:5" pos:end="346:77"><name pos:start="346:5" pos:end="346:6">rc</name> <operator pos:start="346:8" pos:end="346:8">=</operator> <call pos:start="346:10" pos:end="346:77"><name pos:start="346:10" pos:end="346:33">est_server_init_csrattrs</name><argument_list pos:start="346:34" pos:end="346:77">(<argument pos:start="346:35" pos:end="346:38"><expr pos:start="346:35" pos:end="346:38"><name pos:start="346:35" pos:end="346:38">ectx</name></expr></argument>, <argument pos:start="346:41" pos:end="346:53"><expr pos:start="346:41" pos:end="346:53"><name pos:start="346:41" pos:end="346:53">TEST_ATTR_250</name></expr></argument>, <argument pos:start="346:56" pos:end="346:76"><expr pos:start="346:56" pos:end="346:76"><call pos:start="346:56" pos:end="346:76"><name pos:start="346:56" pos:end="346:61">strlen</name><argument_list pos:start="346:62" pos:end="346:76">(<argument pos:start="346:63" pos:end="346:75"><expr pos:start="346:63" pos:end="346:75"><name pos:start="346:63" pos:end="346:75">TEST_ATTR_250</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="347:5" pos:end="347:34"><expr pos:start="347:5" pos:end="347:33"><call pos:start="347:5" pos:end="347:33"><name pos:start="347:5" pos:end="347:13">CU_ASSERT</name><argument_list pos:start="347:14" pos:end="347:33">(<argument pos:start="347:15" pos:end="347:32"><expr pos:start="347:15" pos:end="347:32"><name pos:start="347:15" pos:end="347:16">rc</name> <operator pos:start="347:18" pos:end="347:19">==</operator> <name pos:start="347:21" pos:end="347:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="349:5" pos:end="349:47">/* All ASN.1 types supported by CiscoSSL */</comment>
    <expr_stmt pos:start="350:5" pos:end="350:78"><expr pos:start="350:5" pos:end="350:77"><name pos:start="350:5" pos:end="350:6">rc</name> <operator pos:start="350:8" pos:end="350:8">=</operator> <call pos:start="350:10" pos:end="350:77"><name pos:start="350:10" pos:end="350:33">est_server_init_csrattrs</name><argument_list pos:start="350:34" pos:end="350:77">(<argument pos:start="350:35" pos:end="350:38"><expr pos:start="350:35" pos:end="350:38"><name pos:start="350:35" pos:end="350:38">ectx</name></expr></argument>, <argument pos:start="350:41" pos:end="350:53"><expr pos:start="350:41" pos:end="350:53"><name pos:start="350:41" pos:end="350:53">TEST_ALL_ATTR</name></expr></argument>, <argument pos:start="350:56" pos:end="350:76"><expr pos:start="350:56" pos:end="350:76"><call pos:start="350:56" pos:end="350:76"><name pos:start="350:56" pos:end="350:61">strlen</name><argument_list pos:start="350:62" pos:end="350:76">(<argument pos:start="350:63" pos:end="350:75"><expr pos:start="350:63" pos:end="350:75"><name pos:start="350:63" pos:end="350:75">TEST_ALL_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="351:5" pos:end="351:34"><expr pos:start="351:5" pos:end="351:33"><call pos:start="351:5" pos:end="351:33"><name pos:start="351:5" pos:end="351:13">CU_ASSERT</name><argument_list pos:start="351:14" pos:end="351:33">(<argument pos:start="351:15" pos:end="351:32"><expr pos:start="351:15" pos:end="351:32"><name pos:start="351:15" pos:end="351:16">rc</name> <operator pos:start="351:18" pos:end="351:19">==</operator> <name pos:start="351:21" pos:end="351:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="353:5" pos:end="353:21">/* disable PoP */</comment>
    <expr_stmt pos:start="354:5" pos:end="354:21"><expr pos:start="354:5" pos:end="354:20"><call pos:start="354:5" pos:end="354:20"><name pos:start="354:5" pos:end="354:18">st_disable_pop</name><argument_list pos:start="354:19" pos:end="354:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="356:5" pos:end="356:47">/* All ASN.1 types supported by CiscoSSL */</comment>
    <expr_stmt pos:start="357:5" pos:end="357:78"><expr pos:start="357:5" pos:end="357:77"><name pos:start="357:5" pos:end="357:6">rc</name> <operator pos:start="357:8" pos:end="357:8">=</operator> <call pos:start="357:10" pos:end="357:77"><name pos:start="357:10" pos:end="357:33">est_server_init_csrattrs</name><argument_list pos:start="357:34" pos:end="357:77">(<argument pos:start="357:35" pos:end="357:38"><expr pos:start="357:35" pos:end="357:38"><name pos:start="357:35" pos:end="357:38">ectx</name></expr></argument>, <argument pos:start="357:41" pos:end="357:53"><expr pos:start="357:41" pos:end="357:53"><name pos:start="357:41" pos:end="357:53">TEST_ALL_ATTR</name></expr></argument>, <argument pos:start="357:56" pos:end="357:76"><expr pos:start="357:56" pos:end="357:76"><call pos:start="357:56" pos:end="357:76"><name pos:start="357:56" pos:end="357:61">strlen</name><argument_list pos:start="357:62" pos:end="357:76">(<argument pos:start="357:63" pos:end="357:75"><expr pos:start="357:63" pos:end="357:75"><name pos:start="357:63" pos:end="357:75">TEST_ALL_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="358:5" pos:end="358:34"><expr pos:start="358:5" pos:end="358:33"><call pos:start="358:5" pos:end="358:33"><name pos:start="358:5" pos:end="358:13">CU_ASSERT</name><argument_list pos:start="358:14" pos:end="358:33">(<argument pos:start="358:15" pos:end="358:32"><expr pos:start="358:15" pos:end="358:32"><name pos:start="358:15" pos:end="358:16">rc</name> <operator pos:start="358:18" pos:end="358:19">==</operator> <name pos:start="358:21" pos:end="358:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="360:5" pos:end="360:66">/* Real base64 string PoP should not be added - should pass */</comment>
    <expr_stmt pos:start="361:5" pos:end="364:33"><expr pos:start="361:5" pos:end="364:32"><name pos:start="361:5" pos:end="361:6">rc</name> <operator pos:start="361:8" pos:end="361:8">=</operator> <call pos:start="361:10" pos:end="364:32"><name pos:start="361:10" pos:end="361:33">est_server_init_csrattrs</name><argument_list pos:start="361:34" pos:end="364:32">(
        <argument pos:start="362:9" pos:end="362:12"><expr pos:start="362:9" pos:end="362:12"><name pos:start="362:9" pos:end="362:12">ectx</name></expr></argument>,
        <argument pos:start="363:9" pos:end="363:23"><expr pos:start="363:9" pos:end="363:23"><name pos:start="363:9" pos:end="363:23">TEST_ATTR_NOPOP</name></expr></argument>,
        <argument pos:start="364:9" pos:end="364:31"><expr pos:start="364:9" pos:end="364:31"><call pos:start="364:9" pos:end="364:31"><name pos:start="364:9" pos:end="364:14">strlen</name><argument_list pos:start="364:15" pos:end="364:31">(<argument pos:start="364:16" pos:end="364:30"><expr pos:start="364:16" pos:end="364:30"><name pos:start="364:16" pos:end="364:30">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="365:5" pos:end="365:34"><expr pos:start="365:5" pos:end="365:33"><call pos:start="365:5" pos:end="365:33"><name pos:start="365:5" pos:end="365:13">CU_ASSERT</name><argument_list pos:start="365:14" pos:end="365:33">(<argument pos:start="365:15" pos:end="365:32"><expr pos:start="365:15" pos:end="365:32"><name pos:start="365:15" pos:end="365:16">rc</name> <operator pos:start="365:18" pos:end="365:19">==</operator> <name pos:start="365:21" pos:end="365:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="368:1" pos:end="371:3">/*
 * Test2 - exercise the server side variations triggered
 *         by est_client_get_csrattrs()
 */</comment>
<function pos:start="372:1" pos:end="722:1"><type pos:start="372:1" pos:end="372:11"><specifier pos:start="372:1" pos:end="372:6">static</specifier> <name pos:start="372:8" pos:end="372:11">void</name></type> <name pos:start="372:13" pos:end="372:23">us900_test2</name> <parameter_list pos:start="372:25" pos:end="372:30">(<parameter pos:start="372:26" pos:end="372:29"><decl pos:start="372:26" pos:end="372:29"><type pos:start="372:26" pos:end="372:29"><name pos:start="372:26" pos:end="372:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="373:1" pos:end="722:1">{<block_content pos:start="374:5" pos:end="721:5">
    <decl_stmt pos:start="374:5" pos:end="374:17"><decl pos:start="374:5" pos:end="374:16"><type pos:start="374:5" pos:end="374:13"><name pos:start="374:5" pos:end="374:11">EST_CTX</name> <modifier pos:start="374:13" pos:end="374:13">*</modifier></type><name pos:start="374:14" pos:end="374:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="375:5" pos:end="375:31"><decl pos:start="375:5" pos:end="375:30"><type pos:start="375:5" pos:end="375:19"><name pos:start="375:5" pos:end="375:12">unsigned</name> <name pos:start="375:14" pos:end="375:17">char</name> <modifier pos:start="375:19" pos:end="375:19">*</modifier></type><name pos:start="375:20" pos:end="375:23">pkey</name> <init pos:start="375:25" pos:end="375:30">= <expr pos:start="375:27" pos:end="375:30"><name pos:start="375:27" pos:end="375:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="376:5" pos:end="376:34"><decl pos:start="376:5" pos:end="376:33"><type pos:start="376:5" pos:end="376:19"><name pos:start="376:5" pos:end="376:12">unsigned</name> <name pos:start="376:14" pos:end="376:17">char</name> <modifier pos:start="376:19" pos:end="376:19">*</modifier></type><name pos:start="376:20" pos:end="376:26">cacerts</name> <init pos:start="376:28" pos:end="376:33">= <expr pos:start="376:30" pos:end="376:33"><name pos:start="376:30" pos:end="376:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="377:5" pos:end="377:24"><decl pos:start="377:5" pos:end="377:23"><type pos:start="377:5" pos:end="377:7"><name pos:start="377:5" pos:end="377:7">int</name></type> <name pos:start="377:9" pos:end="377:19">cacerts_len</name> <init pos:start="377:21" pos:end="377:23">= <expr pos:start="377:23" pos:end="377:23"><literal type="number" pos:start="377:23" pos:end="377:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="378:5" pos:end="378:32"><decl pos:start="378:5" pos:end="378:31"><type pos:start="378:5" pos:end="378:13"><name pos:start="378:5" pos:end="378:13">EST_ERROR</name></type> <name pos:start="378:15" pos:end="378:16">rc</name> <init pos:start="378:18" pos:end="378:31">= <expr pos:start="378:20" pos:end="378:31"><name pos:start="378:20" pos:end="378:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="379:5" pos:end="379:44"><decl pos:start="379:5" pos:end="379:43"><type pos:start="379:5" pos:end="379:19"><name pos:start="379:5" pos:end="379:12">unsigned</name> <name pos:start="379:14" pos:end="379:17">char</name> <modifier pos:start="379:19" pos:end="379:19">*</modifier></type><name pos:start="379:20" pos:end="379:36">retrieved_cacerts</name> <init pos:start="379:38" pos:end="379:43">= <expr pos:start="379:40" pos:end="379:43"><name pos:start="379:40" pos:end="379:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="380:5" pos:end="380:34"><decl pos:start="380:5" pos:end="380:33"><type pos:start="380:5" pos:end="380:7"><name pos:start="380:5" pos:end="380:7">int</name></type> <name pos:start="380:9" pos:end="380:29">retrieved_cacerts_len</name> <init pos:start="380:31" pos:end="380:33">= <expr pos:start="380:33" pos:end="380:33"><literal type="number" pos:start="380:33" pos:end="380:33">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="381:5" pos:end="381:24"><decl pos:start="381:5" pos:end="381:23"><type pos:start="381:5" pos:end="381:14"><name pos:start="381:5" pos:end="381:12">EVP_PKEY</name> <modifier pos:start="381:14" pos:end="381:14">*</modifier></type> <name pos:start="381:16" pos:end="381:23">priv_key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="382:5" pos:end="382:16"><decl pos:start="382:5" pos:end="382:15"><type pos:start="382:5" pos:end="382:7"><name pos:start="382:5" pos:end="382:7">int</name></type> <name pos:start="382:9" pos:end="382:15">csr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="383:5" pos:end="383:35"><decl pos:start="383:5" pos:end="383:34"><type pos:start="383:5" pos:end="383:19"><name pos:start="383:5" pos:end="383:12">unsigned</name> <name pos:start="383:14" pos:end="383:17">char</name> <modifier pos:start="383:19" pos:end="383:19">*</modifier></type><name pos:start="383:20" pos:end="383:27">csr_data</name> <init pos:start="383:29" pos:end="383:34">= <expr pos:start="383:31" pos:end="383:34"><name pos:start="383:31" pos:end="383:34">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:13"><expr pos:start="385:5" pos:end="385:12"><call pos:start="385:5" pos:end="385:12"><name pos:start="385:5" pos:end="385:9">SLEEP</name><argument_list pos:start="385:10" pos:end="385:12">(<argument pos:start="385:11" pos:end="385:11"><expr pos:start="385:11" pos:end="385:11"><literal type="number" pos:start="385:11" pos:end="385:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="387:5" pos:end="388:5"><expr pos:start="387:5" pos:end="387:15"><name pos:start="387:5" pos:end="387:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="390:5" pos:end="392:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="393:5" pos:end="393:63"><expr pos:start="393:5" pos:end="393:62"><name pos:start="393:5" pos:end="393:15">cacerts_len</name> <operator pos:start="393:17" pos:end="393:17">=</operator> <call pos:start="393:19" pos:end="393:62"><name pos:start="393:19" pos:end="393:34">read_binary_file</name><argument_list pos:start="393:35" pos:end="393:62">(<argument pos:start="393:36" pos:end="393:51"><expr pos:start="393:36" pos:end="393:51"><name pos:start="393:36" pos:end="393:51">CLIENT_UT_CACERT</name></expr></argument>, <argument pos:start="393:54" pos:end="393:61"><expr pos:start="393:54" pos:end="393:61"><operator pos:start="393:54" pos:end="393:54">&amp;</operator><name pos:start="393:55" pos:end="393:61">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="394:5" pos:end="394:31"><expr pos:start="394:5" pos:end="394:30"><call pos:start="394:5" pos:end="394:30"><name pos:start="394:5" pos:end="394:13">CU_ASSERT</name><argument_list pos:start="394:14" pos:end="394:30">(<argument pos:start="394:15" pos:end="394:29"><expr pos:start="394:15" pos:end="394:29"><name pos:start="394:15" pos:end="394:25">cacerts_len</name> <operator pos:start="394:27" pos:end="394:27">&gt;</operator> <literal type="number" pos:start="394:29" pos:end="394:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="396:5" pos:end="398:7">/*
     * Read in the private key file
     */</comment>
    <expr_stmt pos:start="399:5" pos:end="399:50"><expr pos:start="399:5" pos:end="399:49"><name pos:start="399:5" pos:end="399:12">priv_key</name> <operator pos:start="399:14" pos:end="399:14">=</operator> <call pos:start="399:16" pos:end="399:49"><name pos:start="399:16" pos:end="399:31">read_private_key</name><argument_list pos:start="399:32" pos:end="399:49">(<argument pos:start="399:33" pos:end="399:48"><expr pos:start="399:33" pos:end="399:48"><name pos:start="399:33" pos:end="399:48">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="400:5" pos:end="403:5"><if pos:start="400:5" pos:end="403:5">if <condition pos:start="400:8" pos:end="400:25">(<expr pos:start="400:9" pos:end="400:24"><name pos:start="400:9" pos:end="400:16">priv_key</name> <operator pos:start="400:18" pos:end="400:19">==</operator> <name pos:start="400:21" pos:end="400:24">NULL</name></expr>)</condition> <block pos:start="400:27" pos:end="403:5">{<block_content pos:start="401:9" pos:end="402:15">
        <expr_stmt pos:start="401:9" pos:end="401:80"><expr pos:start="401:9" pos:end="401:79"><call pos:start="401:9" pos:end="401:79"><name pos:start="401:9" pos:end="401:14">printf</name><argument_list pos:start="401:15" pos:end="401:79">(<argument pos:start="401:16" pos:end="401:60"><expr pos:start="401:16" pos:end="401:60"><literal type="string" pos:start="401:16" pos:end="401:60">"\nError while reading private key file %s\n"</literal></expr></argument>, <argument pos:start="401:63" pos:end="401:78"><expr pos:start="401:63" pos:end="401:78"><name pos:start="401:63" pos:end="401:78">CLIENT_UT_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="402:9" pos:end="402:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="405:5" pos:end="409:35"><expr pos:start="405:5" pos:end="409:34"><name pos:start="405:5" pos:end="405:7">ctx</name> <operator pos:start="405:9" pos:end="405:9">=</operator> <call pos:start="405:11" pos:end="409:34"><name pos:start="405:11" pos:end="405:25">est_client_init</name><argument_list pos:start="405:26" pos:end="409:34">(
        <argument pos:start="406:9" pos:end="406:15"><expr pos:start="406:9" pos:end="406:15"><name pos:start="406:9" pos:end="406:15">cacerts</name></expr></argument>,
        <argument pos:start="407:9" pos:end="407:19"><expr pos:start="407:9" pos:end="407:19"><name pos:start="407:9" pos:end="407:19">cacerts_len</name></expr></argument>,
        <argument pos:start="408:9" pos:end="408:27"><expr pos:start="408:9" pos:end="408:27"><name pos:start="408:9" pos:end="408:27">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="409:9" pos:end="409:33"><expr pos:start="409:9" pos:end="409:33"><name pos:start="409:9" pos:end="409:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="410:5" pos:end="410:27"><expr pos:start="410:5" pos:end="410:26"><call pos:start="410:5" pos:end="410:26"><name pos:start="410:5" pos:end="410:13">CU_ASSERT</name><argument_list pos:start="410:14" pos:end="410:26">(<argument pos:start="410:15" pos:end="410:25"><expr pos:start="410:15" pos:end="410:25"><name pos:start="410:15" pos:end="410:17">ctx</name> <operator pos:start="410:19" pos:end="410:20">!=</operator> <name pos:start="410:22" pos:end="410:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="412:5" pos:end="412:58"><expr pos:start="412:5" pos:end="412:57"><name pos:start="412:5" pos:end="412:6">rc</name> <operator pos:start="412:8" pos:end="412:8">=</operator> <call pos:start="412:10" pos:end="412:57"><name pos:start="412:10" pos:end="412:28">est_client_set_auth</name><argument_list pos:start="412:29" pos:end="412:57">(<argument pos:start="412:30" pos:end="412:32"><expr pos:start="412:30" pos:end="412:32"><name pos:start="412:30" pos:end="412:32">ctx</name></expr></argument>, <argument pos:start="412:35" pos:end="412:36"><expr pos:start="412:35" pos:end="412:36"><literal type="string" pos:start="412:35" pos:end="412:36">""</literal></expr></argument>, <argument pos:start="412:39" pos:end="412:40"><expr pos:start="412:39" pos:end="412:40"><literal type="string" pos:start="412:39" pos:end="412:40">""</literal></expr></argument>, <argument pos:start="412:43" pos:end="412:46"><expr pos:start="412:43" pos:end="412:46"><name pos:start="412:43" pos:end="412:46">NULL</name></expr></argument>, <argument pos:start="412:49" pos:end="412:56"><expr pos:start="412:49" pos:end="412:56"><name pos:start="412:49" pos:end="412:56">priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="413:5" pos:end="413:34"><expr pos:start="413:5" pos:end="413:33"><call pos:start="413:5" pos:end="413:33"><name pos:start="413:5" pos:end="413:13">CU_ASSERT</name><argument_list pos:start="413:14" pos:end="413:33">(<argument pos:start="413:15" pos:end="413:32"><expr pos:start="413:15" pos:end="413:32"><name pos:start="413:15" pos:end="413:16">rc</name> <operator pos:start="413:18" pos:end="413:19">==</operator> <name pos:start="413:21" pos:end="413:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="415:5" pos:end="415:73"><expr pos:start="415:5" pos:end="415:72"><call pos:start="415:5" pos:end="415:72"><name pos:start="415:5" pos:end="415:25">est_client_set_server</name><argument_list pos:start="415:26" pos:end="415:72">(<argument pos:start="415:27" pos:end="415:29"><expr pos:start="415:27" pos:end="415:29"><name pos:start="415:27" pos:end="415:29">ctx</name></expr></argument>, <argument pos:start="415:32" pos:end="415:46"><expr pos:start="415:32" pos:end="415:46"><name pos:start="415:32" pos:end="415:46">US900_SERVER_IP</name></expr></argument>, <argument pos:start="415:49" pos:end="415:65"><expr pos:start="415:49" pos:end="415:65"><name pos:start="415:49" pos:end="415:65">US900_SERVER_PORT</name></expr></argument>, <argument pos:start="415:68" pos:end="415:71"><expr pos:start="415:68" pos:end="415:71"><name pos:start="415:68" pos:end="415:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="417:5" pos:end="419:7">/*
     * issue the get ca certs request
     */</comment>
    <expr_stmt pos:start="420:5" pos:end="420:61"><expr pos:start="420:5" pos:end="420:60"><name pos:start="420:5" pos:end="420:6">rc</name> <operator pos:start="420:8" pos:end="420:8">=</operator> <call pos:start="420:10" pos:end="420:60"><name pos:start="420:10" pos:end="420:31">est_client_get_cacerts</name><argument_list pos:start="420:32" pos:end="420:60">(<argument pos:start="420:33" pos:end="420:35"><expr pos:start="420:33" pos:end="420:35"><name pos:start="420:33" pos:end="420:35">ctx</name></expr></argument>, <argument pos:start="420:38" pos:end="420:59"><expr pos:start="420:38" pos:end="420:59"><operator pos:start="420:38" pos:end="420:38">&amp;</operator><name pos:start="420:39" pos:end="420:59">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="421:5" pos:end="424:7">/*
     * should be successful, and should have obtained a valid buffer
     * containing the CA certs
     */</comment>
    <expr_stmt pos:start="425:5" pos:end="425:34"><expr pos:start="425:5" pos:end="425:33"><call pos:start="425:5" pos:end="425:33"><name pos:start="425:5" pos:end="425:13">CU_ASSERT</name><argument_list pos:start="425:14" pos:end="425:33">(<argument pos:start="425:15" pos:end="425:32"><expr pos:start="425:15" pos:end="425:32"><name pos:start="425:15" pos:end="425:16">rc</name> <operator pos:start="425:18" pos:end="425:19">==</operator> <name pos:start="425:21" pos:end="425:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="426:5" pos:end="426:41"><expr pos:start="426:5" pos:end="426:40"><call pos:start="426:5" pos:end="426:40"><name pos:start="426:5" pos:end="426:13">CU_ASSERT</name><argument_list pos:start="426:14" pos:end="426:40">(<argument pos:start="426:15" pos:end="426:39"><expr pos:start="426:15" pos:end="426:39"><name pos:start="426:15" pos:end="426:35">retrieved_cacerts_len</name> <operator pos:start="426:37" pos:end="426:37">&gt;</operator> <literal type="number" pos:start="426:39" pos:end="426:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="428:5" pos:end="428:54"><expr pos:start="428:5" pos:end="428:53"><name pos:start="428:5" pos:end="428:21">retrieved_cacerts</name> <operator pos:start="428:23" pos:end="428:23">=</operator> <call pos:start="428:25" pos:end="428:53"><name pos:start="428:25" pos:end="428:30">malloc</name><argument_list pos:start="428:31" pos:end="428:53">(<argument pos:start="428:32" pos:end="428:52"><expr pos:start="428:32" pos:end="428:52"><name pos:start="428:32" pos:end="428:52">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="430:5" pos:end="430:57"><expr pos:start="430:5" pos:end="430:56"><name pos:start="430:5" pos:end="430:6">rc</name> <operator pos:start="430:8" pos:end="430:8">=</operator> <call pos:start="430:10" pos:end="430:56"><name pos:start="430:10" pos:end="430:32">est_client_copy_cacerts</name><argument_list pos:start="430:33" pos:end="430:56">(<argument pos:start="430:34" pos:end="430:36"><expr pos:start="430:34" pos:end="430:36"><name pos:start="430:34" pos:end="430:36">ctx</name></expr></argument>, <argument pos:start="430:39" pos:end="430:55"><expr pos:start="430:39" pos:end="430:55"><name pos:start="430:39" pos:end="430:55">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="432:5" pos:end="434:7">/*
     * output the retrieved ca certs and compare to what they should be
     */</comment>
    <if_stmt pos:start="435:5" pos:end="439:5"><if pos:start="435:5" pos:end="439:5">if <condition pos:start="435:8" pos:end="435:26">(<expr pos:start="435:9" pos:end="435:25"><name pos:start="435:9" pos:end="435:25">retrieved_cacerts</name></expr>)</condition> <block pos:start="435:28" pos:end="439:5">{<block_content pos:start="437:9" pos:end="438:80">

        <expr_stmt pos:start="437:9" pos:end="437:73"><expr pos:start="437:9" pos:end="437:72"><call pos:start="437:9" pos:end="437:72"><name pos:start="437:9" pos:end="437:14">printf</name><argument_list pos:start="437:15" pos:end="437:72">(<argument pos:start="437:16" pos:end="437:52"><expr pos:start="437:16" pos:end="437:52"><literal type="string" pos:start="437:16" pos:end="437:52">"\nRetrieved CA Certs buffer:\n %s\n"</literal></expr></argument>, <argument pos:start="437:55" pos:end="437:71"><expr pos:start="437:55" pos:end="437:71"><name pos:start="437:55" pos:end="437:71">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="438:9" pos:end="438:80"><expr pos:start="438:9" pos:end="438:79"><call pos:start="438:9" pos:end="438:79"><name pos:start="438:9" pos:end="438:14">printf</name><argument_list pos:start="438:15" pos:end="438:79">(<argument pos:start="438:16" pos:end="438:55"><expr pos:start="438:16" pos:end="438:55"><literal type="string" pos:start="438:16" pos:end="438:55">"Retrieved CA certs buffer length: %d\n"</literal></expr></argument>, <argument pos:start="438:58" pos:end="438:78"><expr pos:start="438:58" pos:end="438:78"><name pos:start="438:58" pos:end="438:78">retrieved_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="440:5" pos:end="440:28"><expr pos:start="440:5" pos:end="440:27"><call pos:start="440:5" pos:end="440:27"><name pos:start="440:5" pos:end="440:8">free</name><argument_list pos:start="440:9" pos:end="440:27">(<argument pos:start="440:10" pos:end="440:26"><expr pos:start="440:10" pos:end="440:26"><name pos:start="440:10" pos:end="440:26">retrieved_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="442:5" pos:end="442:24">/* clear callback */</comment>
    <if_stmt pos:start="443:5" pos:end="446:5"><if pos:start="443:5" pos:end="446:5">if <condition pos:start="443:8" pos:end="443:35">(<expr pos:start="443:9" pos:end="443:34"><call pos:start="443:9" pos:end="443:34"><name pos:start="443:9" pos:end="443:22">est_set_csr_cb</name><argument_list pos:start="443:23" pos:end="443:34">(<argument pos:start="443:24" pos:end="443:27"><expr pos:start="443:24" pos:end="443:27"><name pos:start="443:24" pos:end="443:27">ectx</name></expr></argument>, <argument pos:start="443:30" pos:end="443:33"><expr pos:start="443:30" pos:end="443:33"><name pos:start="443:30" pos:end="443:33">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="443:37" pos:end="446:5">{<block_content pos:start="444:9" pos:end="445:16">
        <expr_stmt pos:start="444:9" pos:end="444:78"><expr pos:start="444:9" pos:end="444:77"><call pos:start="444:9" pos:end="444:77"><name pos:start="444:9" pos:end="444:14">printf</name><argument_list pos:start="444:15" pos:end="444:77">(<argument pos:start="444:16" pos:end="444:76"><expr pos:start="444:16" pos:end="444:76"><literal type="string" pos:start="444:16" pos:end="444:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="445:9" pos:end="445:16"><expr pos:start="445:9" pos:end="445:15"><call pos:start="445:9" pos:end="445:15"><name pos:start="445:9" pos:end="445:12">exit</name><argument_list pos:start="445:13" pos:end="445:15">(<argument pos:start="445:14" pos:end="445:14"><expr pos:start="445:14" pos:end="445:14"><literal type="number" pos:start="445:14" pos:end="445:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="448:5" pos:end="448:24">/* clear csrattrs */</comment>
    <expr_stmt pos:start="449:5" pos:end="449:49"><expr pos:start="449:5" pos:end="449:48"><name pos:start="449:5" pos:end="449:6">rc</name> <operator pos:start="449:8" pos:end="449:8">=</operator> <call pos:start="449:10" pos:end="449:48"><name pos:start="449:10" pos:end="449:33">est_server_init_csrattrs</name><argument_list pos:start="449:34" pos:end="449:48">(<argument pos:start="449:35" pos:end="449:38"><expr pos:start="449:35" pos:end="449:38"><name pos:start="449:35" pos:end="449:38">ectx</name></expr></argument>, <argument pos:start="449:41" pos:end="449:44"><expr pos:start="449:41" pos:end="449:44"><name pos:start="449:41" pos:end="449:44">NULL</name></expr></argument>, <argument pos:start="449:47" pos:end="449:47"><expr pos:start="449:47" pos:end="449:47"><literal type="number" pos:start="449:47" pos:end="449:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="450:5" pos:end="450:34"><expr pos:start="450:5" pos:end="450:33"><call pos:start="450:5" pos:end="450:33"><name pos:start="450:5" pos:end="450:13">CU_ASSERT</name><argument_list pos:start="450:14" pos:end="450:33">(<argument pos:start="450:15" pos:end="450:32"><expr pos:start="450:15" pos:end="450:32"><name pos:start="450:15" pos:end="450:16">rc</name> <operator pos:start="450:18" pos:end="450:19">==</operator> <name pos:start="450:21" pos:end="450:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="452:5" pos:end="452:37">/* should get 204 with no data */</comment>
    <expr_stmt pos:start="453:5" pos:end="453:59"><expr pos:start="453:5" pos:end="453:58"><name pos:start="453:5" pos:end="453:6">rc</name> <operator pos:start="453:8" pos:end="453:8">=</operator> <call pos:start="453:10" pos:end="453:58"><name pos:start="453:10" pos:end="453:32">est_client_get_csrattrs</name><argument_list pos:start="453:33" pos:end="453:58">(<argument pos:start="453:34" pos:end="453:36"><expr pos:start="453:34" pos:end="453:36"><name pos:start="453:34" pos:end="453:36">ctx</name></expr></argument>, <argument pos:start="453:39" pos:end="453:47"><expr pos:start="453:39" pos:end="453:47"><operator pos:start="453:39" pos:end="453:39">&amp;</operator><name pos:start="453:40" pos:end="453:47">csr_data</name></expr></argument>, <argument pos:start="453:50" pos:end="453:57"><expr pos:start="453:50" pos:end="453:57"><operator pos:start="453:50" pos:end="453:50">&amp;</operator><name pos:start="453:51" pos:end="453:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="454:5" pos:end="454:34"><expr pos:start="454:5" pos:end="454:33"><call pos:start="454:5" pos:end="454:33"><name pos:start="454:5" pos:end="454:13">CU_ASSERT</name><argument_list pos:start="454:14" pos:end="454:33">(<argument pos:start="454:15" pos:end="454:32"><expr pos:start="454:15" pos:end="454:32"><name pos:start="454:15" pos:end="454:16">rc</name> <operator pos:start="454:18" pos:end="454:19">==</operator> <name pos:start="454:21" pos:end="454:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="455:5" pos:end="455:28"><expr pos:start="455:5" pos:end="455:27"><call pos:start="455:5" pos:end="455:27"><name pos:start="455:5" pos:end="455:13">CU_ASSERT</name><argument_list pos:start="455:14" pos:end="455:27">(<argument pos:start="455:15" pos:end="455:26"><expr pos:start="455:15" pos:end="455:26"><name pos:start="455:15" pos:end="455:21">csr_len</name> <operator pos:start="455:23" pos:end="455:24">==</operator> <literal type="number" pos:start="455:26" pos:end="455:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="456:5" pos:end="456:32"><expr pos:start="456:5" pos:end="456:31"><call pos:start="456:5" pos:end="456:31"><name pos:start="456:5" pos:end="456:13">CU_ASSERT</name><argument_list pos:start="456:14" pos:end="456:31">(<argument pos:start="456:15" pos:end="456:30"><expr pos:start="456:15" pos:end="456:30"><name pos:start="456:15" pos:end="456:22">csr_data</name> <operator pos:start="456:24" pos:end="456:25">==</operator> <name pos:start="456:27" pos:end="456:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="458:5" pos:end="458:42">/* Real base64 string - should pass */</comment>
    <expr_stmt pos:start="459:5" pos:end="459:78"><expr pos:start="459:5" pos:end="459:77"><name pos:start="459:5" pos:end="459:6">rc</name> <operator pos:start="459:8" pos:end="459:8">=</operator> <call pos:start="459:10" pos:end="459:77"><name pos:start="459:10" pos:end="459:33">est_server_init_csrattrs</name><argument_list pos:start="459:34" pos:end="459:77">(<argument pos:start="459:35" pos:end="459:38"><expr pos:start="459:35" pos:end="459:38"><name pos:start="459:35" pos:end="459:38">ectx</name></expr></argument>, <argument pos:start="459:41" pos:end="459:53"><expr pos:start="459:41" pos:end="459:53"><name pos:start="459:41" pos:end="459:53">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="459:56" pos:end="459:76"><expr pos:start="459:56" pos:end="459:76"><call pos:start="459:56" pos:end="459:76"><name pos:start="459:56" pos:end="459:61">strlen</name><argument_list pos:start="459:62" pos:end="459:76">(<argument pos:start="459:63" pos:end="459:75"><expr pos:start="459:63" pos:end="459:75"><name pos:start="459:63" pos:end="459:75">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="460:5" pos:end="460:34"><expr pos:start="460:5" pos:end="460:33"><call pos:start="460:5" pos:end="460:33"><name pos:start="460:5" pos:end="460:13">CU_ASSERT</name><argument_list pos:start="460:14" pos:end="460:33">(<argument pos:start="460:15" pos:end="460:32"><expr pos:start="460:15" pos:end="460:32"><name pos:start="460:15" pos:end="460:16">rc</name> <operator pos:start="460:18" pos:end="460:19">==</operator> <name pos:start="460:21" pos:end="460:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="462:5" pos:end="462:59"><expr pos:start="462:5" pos:end="462:58"><name pos:start="462:5" pos:end="462:6">rc</name> <operator pos:start="462:8" pos:end="462:8">=</operator> <call pos:start="462:10" pos:end="462:58"><name pos:start="462:10" pos:end="462:32">est_client_get_csrattrs</name><argument_list pos:start="462:33" pos:end="462:58">(<argument pos:start="462:34" pos:end="462:36"><expr pos:start="462:34" pos:end="462:36"><name pos:start="462:34" pos:end="462:36">ctx</name></expr></argument>, <argument pos:start="462:39" pos:end="462:47"><expr pos:start="462:39" pos:end="462:47"><operator pos:start="462:39" pos:end="462:39">&amp;</operator><name pos:start="462:40" pos:end="462:47">csr_data</name></expr></argument>, <argument pos:start="462:50" pos:end="462:57"><expr pos:start="462:50" pos:end="462:57"><operator pos:start="462:50" pos:end="462:50">&amp;</operator><name pos:start="462:51" pos:end="462:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="463:5" pos:end="463:34"><expr pos:start="463:5" pos:end="463:33"><call pos:start="463:5" pos:end="463:33"><name pos:start="463:5" pos:end="463:13">CU_ASSERT</name><argument_list pos:start="463:14" pos:end="463:33">(<argument pos:start="463:15" pos:end="463:32"><expr pos:start="463:15" pos:end="463:32"><name pos:start="463:15" pos:end="463:16">rc</name> <operator pos:start="463:18" pos:end="463:19">==</operator> <name pos:start="463:21" pos:end="463:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="464:5" pos:end="464:48"><expr pos:start="464:5" pos:end="464:47"><call pos:start="464:5" pos:end="464:47"><name pos:start="464:5" pos:end="464:13">CU_ASSERT</name><argument_list pos:start="464:14" pos:end="464:47">(<argument pos:start="464:15" pos:end="464:46"><expr pos:start="464:15" pos:end="464:46"><name pos:start="464:15" pos:end="464:21">csr_len</name> <operator pos:start="464:23" pos:end="464:24">==</operator> <call pos:start="464:26" pos:end="464:46"><name pos:start="464:26" pos:end="464:31">strlen</name><argument_list pos:start="464:32" pos:end="464:46">(<argument pos:start="464:33" pos:end="464:45"><expr pos:start="464:33" pos:end="464:45"><name pos:start="464:33" pos:end="464:45">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="465:5" pos:end="465:77"><expr pos:start="465:5" pos:end="465:76"><call pos:start="465:5" pos:end="465:76"><name pos:start="465:5" pos:end="465:13">CU_ASSERT</name><argument_list pos:start="465:14" pos:end="465:76">(<argument pos:start="465:15" pos:end="465:75"><expr pos:start="465:15" pos:end="465:75"><call pos:start="465:15" pos:end="465:70"><name pos:start="465:15" pos:end="465:21">strncmp</name><argument_list pos:start="465:22" pos:end="465:70">(<argument pos:start="465:23" pos:end="465:35"><expr pos:start="465:23" pos:end="465:35"><name pos:start="465:23" pos:end="465:35">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="465:38" pos:end="465:60"><expr pos:start="465:38" pos:end="465:60"><operator pos:start="465:38" pos:end="465:38">(</operator><specifier pos:start="465:39" pos:end="465:43">const</specifier> <name pos:start="465:45" pos:end="465:48">char</name> <operator pos:start="465:50" pos:end="465:50">*</operator><operator pos:start="465:51" pos:end="465:51">)</operator> <name pos:start="465:53" pos:end="465:60">csr_data</name></expr></argument>, <argument pos:start="465:63" pos:end="465:69"><expr pos:start="465:63" pos:end="465:69"><name pos:start="465:63" pos:end="465:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="465:72" pos:end="465:73">==</operator> <literal type="number" pos:start="465:75" pos:end="465:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="467:5" pos:end="470:5"><if pos:start="467:5" pos:end="470:5">if <condition pos:start="467:8" pos:end="467:63">(<expr pos:start="467:9" pos:end="467:62"><call pos:start="467:9" pos:end="467:62"><name pos:start="467:9" pos:end="467:22">est_set_csr_cb</name><argument_list pos:start="467:23" pos:end="467:62">(<argument pos:start="467:24" pos:end="467:27"><expr pos:start="467:24" pos:end="467:27"><name pos:start="467:24" pos:end="467:27">ectx</name></expr></argument>, <argument pos:start="467:30" pos:end="467:61"><expr pos:start="467:30" pos:end="467:61"><operator pos:start="467:30" pos:end="467:30">&amp;</operator><name pos:start="467:31" pos:end="467:61">handle_corrupt_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="467:65" pos:end="470:5">{<block_content pos:start="468:9" pos:end="469:16">
        <expr_stmt pos:start="468:9" pos:end="468:78"><expr pos:start="468:9" pos:end="468:77"><call pos:start="468:9" pos:end="468:77"><name pos:start="468:9" pos:end="468:14">printf</name><argument_list pos:start="468:15" pos:end="468:77">(<argument pos:start="468:16" pos:end="468:76"><expr pos:start="468:16" pos:end="468:76"><literal type="string" pos:start="468:16" pos:end="468:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="469:9" pos:end="469:16"><expr pos:start="469:9" pos:end="469:15"><call pos:start="469:9" pos:end="469:15"><name pos:start="469:9" pos:end="469:12">exit</name><argument_list pos:start="469:13" pos:end="469:15">(<argument pos:start="469:14" pos:end="469:14"><expr pos:start="469:14" pos:end="469:14"><literal type="number" pos:start="469:14" pos:end="469:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="471:5" pos:end="471:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="472:5" pos:end="472:59"><expr pos:start="472:5" pos:end="472:58"><name pos:start="472:5" pos:end="472:6">rc</name> <operator pos:start="472:8" pos:end="472:8">=</operator> <call pos:start="472:10" pos:end="472:58"><name pos:start="472:10" pos:end="472:32">est_client_get_csrattrs</name><argument_list pos:start="472:33" pos:end="472:58">(<argument pos:start="472:34" pos:end="472:36"><expr pos:start="472:34" pos:end="472:36"><name pos:start="472:34" pos:end="472:36">ctx</name></expr></argument>, <argument pos:start="472:39" pos:end="472:47"><expr pos:start="472:39" pos:end="472:47"><operator pos:start="472:39" pos:end="472:39">&amp;</operator><name pos:start="472:40" pos:end="472:47">csr_data</name></expr></argument>, <argument pos:start="472:50" pos:end="472:57"><expr pos:start="472:50" pos:end="472:57"><operator pos:start="472:50" pos:end="472:50">&amp;</operator><name pos:start="472:51" pos:end="472:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="473:5" pos:end="473:34"><expr pos:start="473:5" pos:end="473:33"><call pos:start="473:5" pos:end="473:33"><name pos:start="473:5" pos:end="473:13">CU_ASSERT</name><argument_list pos:start="473:14" pos:end="473:33">(<argument pos:start="473:15" pos:end="473:32"><expr pos:start="473:15" pos:end="473:32"><name pos:start="473:15" pos:end="473:16">rc</name> <operator pos:start="473:18" pos:end="473:19">==</operator> <name pos:start="473:21" pos:end="473:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="474:5" pos:end="474:28"><expr pos:start="474:5" pos:end="474:27"><call pos:start="474:5" pos:end="474:27"><name pos:start="474:5" pos:end="474:13">CU_ASSERT</name><argument_list pos:start="474:14" pos:end="474:27">(<argument pos:start="474:15" pos:end="474:26"><expr pos:start="474:15" pos:end="474:26"><name pos:start="474:15" pos:end="474:21">csr_len</name> <operator pos:start="474:23" pos:end="474:24">==</operator> <literal type="number" pos:start="474:26" pos:end="474:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="476:5" pos:end="479:5"><if pos:start="476:5" pos:end="479:5">if <condition pos:start="476:8" pos:end="476:61">(<expr pos:start="476:9" pos:end="476:60"><call pos:start="476:9" pos:end="476:60"><name pos:start="476:9" pos:end="476:22">est_set_csr_cb</name><argument_list pos:start="476:23" pos:end="476:60">(<argument pos:start="476:24" pos:end="476:27"><expr pos:start="476:24" pos:end="476:27"><name pos:start="476:24" pos:end="476:27">ectx</name></expr></argument>, <argument pos:start="476:30" pos:end="476:59"><expr pos:start="476:30" pos:end="476:59"><operator pos:start="476:30" pos:end="476:30">&amp;</operator><name pos:start="476:31" pos:end="476:59">handle_short_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="476:63" pos:end="479:5">{<block_content pos:start="477:9" pos:end="478:16">
        <expr_stmt pos:start="477:9" pos:end="477:78"><expr pos:start="477:9" pos:end="477:77"><call pos:start="477:9" pos:end="477:77"><name pos:start="477:9" pos:end="477:14">printf</name><argument_list pos:start="477:15" pos:end="477:77">(<argument pos:start="477:16" pos:end="477:76"><expr pos:start="477:16" pos:end="477:76"><literal type="string" pos:start="477:16" pos:end="477:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="478:9" pos:end="478:16"><expr pos:start="478:9" pos:end="478:15"><call pos:start="478:9" pos:end="478:15"><name pos:start="478:9" pos:end="478:12">exit</name><argument_list pos:start="478:13" pos:end="478:15">(<argument pos:start="478:14" pos:end="478:14"><expr pos:start="478:14" pos:end="478:14"><literal type="number" pos:start="478:14" pos:end="478:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="480:5" pos:end="480:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="481:5" pos:end="481:59"><expr pos:start="481:5" pos:end="481:58"><name pos:start="481:5" pos:end="481:6">rc</name> <operator pos:start="481:8" pos:end="481:8">=</operator> <call pos:start="481:10" pos:end="481:58"><name pos:start="481:10" pos:end="481:32">est_client_get_csrattrs</name><argument_list pos:start="481:33" pos:end="481:58">(<argument pos:start="481:34" pos:end="481:36"><expr pos:start="481:34" pos:end="481:36"><name pos:start="481:34" pos:end="481:36">ctx</name></expr></argument>, <argument pos:start="481:39" pos:end="481:47"><expr pos:start="481:39" pos:end="481:47"><operator pos:start="481:39" pos:end="481:39">&amp;</operator><name pos:start="481:40" pos:end="481:47">csr_data</name></expr></argument>, <argument pos:start="481:50" pos:end="481:57"><expr pos:start="481:50" pos:end="481:57"><operator pos:start="481:50" pos:end="481:50">&amp;</operator><name pos:start="481:51" pos:end="481:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="482:5" pos:end="482:34"><expr pos:start="482:5" pos:end="482:33"><call pos:start="482:5" pos:end="482:33"><name pos:start="482:5" pos:end="482:13">CU_ASSERT</name><argument_list pos:start="482:14" pos:end="482:33">(<argument pos:start="482:15" pos:end="482:32"><expr pos:start="482:15" pos:end="482:32"><name pos:start="482:15" pos:end="482:16">rc</name> <operator pos:start="482:18" pos:end="482:19">==</operator> <name pos:start="482:21" pos:end="482:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="483:5" pos:end="483:28"><expr pos:start="483:5" pos:end="483:27"><call pos:start="483:5" pos:end="483:27"><name pos:start="483:5" pos:end="483:13">CU_ASSERT</name><argument_list pos:start="483:14" pos:end="483:27">(<argument pos:start="483:15" pos:end="483:26"><expr pos:start="483:15" pos:end="483:26"><name pos:start="483:15" pos:end="483:21">csr_len</name> <operator pos:start="483:23" pos:end="483:24">==</operator> <literal type="number" pos:start="483:26" pos:end="483:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="485:5" pos:end="488:5"><if pos:start="485:5" pos:end="488:5">if <condition pos:start="485:8" pos:end="485:60">(<expr pos:start="485:9" pos:end="485:59"><call pos:start="485:9" pos:end="485:59"><name pos:start="485:9" pos:end="485:22">est_set_csr_cb</name><argument_list pos:start="485:23" pos:end="485:59">(<argument pos:start="485:24" pos:end="485:27"><expr pos:start="485:24" pos:end="485:27"><name pos:start="485:24" pos:end="485:27">ectx</name></expr></argument>, <argument pos:start="485:30" pos:end="485:58"><expr pos:start="485:30" pos:end="485:58"><operator pos:start="485:30" pos:end="485:30">&amp;</operator><name pos:start="485:31" pos:end="485:58">handle_long_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="485:62" pos:end="488:5">{<block_content pos:start="486:9" pos:end="487:16">
        <expr_stmt pos:start="486:9" pos:end="486:78"><expr pos:start="486:9" pos:end="486:77"><call pos:start="486:9" pos:end="486:77"><name pos:start="486:9" pos:end="486:14">printf</name><argument_list pos:start="486:15" pos:end="486:77">(<argument pos:start="486:16" pos:end="486:76"><expr pos:start="486:16" pos:end="486:76"><literal type="string" pos:start="486:16" pos:end="486:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="487:9" pos:end="487:16"><expr pos:start="487:9" pos:end="487:15"><call pos:start="487:9" pos:end="487:15"><name pos:start="487:9" pos:end="487:12">exit</name><argument_list pos:start="487:13" pos:end="487:15">(<argument pos:start="487:14" pos:end="487:14"><expr pos:start="487:14" pos:end="487:14"><literal type="number" pos:start="487:14" pos:end="487:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="489:5" pos:end="489:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="490:5" pos:end="490:59"><expr pos:start="490:5" pos:end="490:58"><name pos:start="490:5" pos:end="490:6">rc</name> <operator pos:start="490:8" pos:end="490:8">=</operator> <call pos:start="490:10" pos:end="490:58"><name pos:start="490:10" pos:end="490:32">est_client_get_csrattrs</name><argument_list pos:start="490:33" pos:end="490:58">(<argument pos:start="490:34" pos:end="490:36"><expr pos:start="490:34" pos:end="490:36"><name pos:start="490:34" pos:end="490:36">ctx</name></expr></argument>, <argument pos:start="490:39" pos:end="490:47"><expr pos:start="490:39" pos:end="490:47"><operator pos:start="490:39" pos:end="490:39">&amp;</operator><name pos:start="490:40" pos:end="490:47">csr_data</name></expr></argument>, <argument pos:start="490:50" pos:end="490:57"><expr pos:start="490:50" pos:end="490:57"><operator pos:start="490:50" pos:end="490:50">&amp;</operator><name pos:start="490:51" pos:end="490:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="491:5" pos:end="491:34"><expr pos:start="491:5" pos:end="491:33"><call pos:start="491:5" pos:end="491:33"><name pos:start="491:5" pos:end="491:13">CU_ASSERT</name><argument_list pos:start="491:14" pos:end="491:33">(<argument pos:start="491:15" pos:end="491:32"><expr pos:start="491:15" pos:end="491:32"><name pos:start="491:15" pos:end="491:16">rc</name> <operator pos:start="491:18" pos:end="491:19">==</operator> <name pos:start="491:21" pos:end="491:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="492:5" pos:end="492:28"><expr pos:start="492:5" pos:end="492:27"><call pos:start="492:5" pos:end="492:27"><name pos:start="492:5" pos:end="492:13">CU_ASSERT</name><argument_list pos:start="492:14" pos:end="492:27">(<argument pos:start="492:15" pos:end="492:26"><expr pos:start="492:15" pos:end="492:26"><name pos:start="492:15" pos:end="492:21">csr_len</name> <operator pos:start="492:23" pos:end="492:24">==</operator> <literal type="number" pos:start="492:26" pos:end="492:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="494:5" pos:end="497:5"><if pos:start="494:5" pos:end="497:5">if <condition pos:start="494:8" pos:end="494:63">(<expr pos:start="494:9" pos:end="494:62"><call pos:start="494:9" pos:end="494:62"><name pos:start="494:9" pos:end="494:22">est_set_csr_cb</name><argument_list pos:start="494:23" pos:end="494:62">(<argument pos:start="494:24" pos:end="494:27"><expr pos:start="494:24" pos:end="494:27"><name pos:start="494:24" pos:end="494:27">ectx</name></expr></argument>, <argument pos:start="494:30" pos:end="494:61"><expr pos:start="494:30" pos:end="494:61"><operator pos:start="494:30" pos:end="494:30">&amp;</operator><name pos:start="494:31" pos:end="494:61">handle_correct_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="494:65" pos:end="497:5">{<block_content pos:start="495:9" pos:end="496:16">
        <expr_stmt pos:start="495:9" pos:end="495:78"><expr pos:start="495:9" pos:end="495:77"><call pos:start="495:9" pos:end="495:77"><name pos:start="495:9" pos:end="495:14">printf</name><argument_list pos:start="495:15" pos:end="495:77">(<argument pos:start="495:16" pos:end="495:76"><expr pos:start="495:16" pos:end="495:76"><literal type="string" pos:start="495:16" pos:end="495:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="496:9" pos:end="496:16"><expr pos:start="496:9" pos:end="496:15"><call pos:start="496:9" pos:end="496:15"><name pos:start="496:9" pos:end="496:12">exit</name><argument_list pos:start="496:13" pos:end="496:15">(<argument pos:start="496:14" pos:end="496:14"><expr pos:start="496:14" pos:end="496:14"><literal type="number" pos:start="496:14" pos:end="496:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="498:5" pos:end="498:49">/* callback should supersede init csrattrs */</comment>
    <expr_stmt pos:start="499:5" pos:end="499:59"><expr pos:start="499:5" pos:end="499:58"><name pos:start="499:5" pos:end="499:6">rc</name> <operator pos:start="499:8" pos:end="499:8">=</operator> <call pos:start="499:10" pos:end="499:58"><name pos:start="499:10" pos:end="499:32">est_client_get_csrattrs</name><argument_list pos:start="499:33" pos:end="499:58">(<argument pos:start="499:34" pos:end="499:36"><expr pos:start="499:34" pos:end="499:36"><name pos:start="499:34" pos:end="499:36">ctx</name></expr></argument>, <argument pos:start="499:39" pos:end="499:47"><expr pos:start="499:39" pos:end="499:47"><operator pos:start="499:39" pos:end="499:39">&amp;</operator><name pos:start="499:40" pos:end="499:47">csr_data</name></expr></argument>, <argument pos:start="499:50" pos:end="499:57"><expr pos:start="499:50" pos:end="499:57"><operator pos:start="499:50" pos:end="499:50">&amp;</operator><name pos:start="499:51" pos:end="499:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="500:5" pos:end="500:34"><expr pos:start="500:5" pos:end="500:33"><call pos:start="500:5" pos:end="500:33"><name pos:start="500:5" pos:end="500:13">CU_ASSERT</name><argument_list pos:start="500:14" pos:end="500:33">(<argument pos:start="500:15" pos:end="500:32"><expr pos:start="500:15" pos:end="500:32"><name pos:start="500:15" pos:end="500:16">rc</name> <operator pos:start="500:18" pos:end="500:19">==</operator> <name pos:start="500:21" pos:end="500:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="501:5" pos:end="501:45"><expr pos:start="501:5" pos:end="501:44"><call pos:start="501:5" pos:end="501:44"><name pos:start="501:5" pos:end="501:13">CU_ASSERT</name><argument_list pos:start="501:14" pos:end="501:44">(<argument pos:start="501:15" pos:end="501:43"><expr pos:start="501:15" pos:end="501:43"><name pos:start="501:15" pos:end="501:21">csr_len</name> <operator pos:start="501:23" pos:end="501:24">==</operator> <call pos:start="501:26" pos:end="501:43"><name pos:start="501:26" pos:end="501:31">strlen</name><argument_list pos:start="501:32" pos:end="501:43">(<argument pos:start="501:33" pos:end="501:42"><expr pos:start="501:33" pos:end="501:42"><name pos:start="501:33" pos:end="501:42">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="502:5" pos:end="502:74"><expr pos:start="502:5" pos:end="502:73"><call pos:start="502:5" pos:end="502:73"><name pos:start="502:5" pos:end="502:13">CU_ASSERT</name><argument_list pos:start="502:14" pos:end="502:73">(<argument pos:start="502:15" pos:end="502:72"><expr pos:start="502:15" pos:end="502:72"><call pos:start="502:15" pos:end="502:67"><name pos:start="502:15" pos:end="502:21">strncmp</name><argument_list pos:start="502:22" pos:end="502:67">(<argument pos:start="502:23" pos:end="502:32"><expr pos:start="502:23" pos:end="502:32"><name pos:start="502:23" pos:end="502:32">TEST_ATTR1</name></expr></argument>, <argument pos:start="502:35" pos:end="502:57"><expr pos:start="502:35" pos:end="502:57"><operator pos:start="502:35" pos:end="502:35">(</operator><specifier pos:start="502:36" pos:end="502:40">const</specifier> <name pos:start="502:42" pos:end="502:45">char</name> <operator pos:start="502:47" pos:end="502:47">*</operator><operator pos:start="502:48" pos:end="502:48">)</operator> <name pos:start="502:50" pos:end="502:57">csr_data</name></expr></argument>, <argument pos:start="502:60" pos:end="502:66"><expr pos:start="502:60" pos:end="502:66"><name pos:start="502:60" pos:end="502:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="502:69" pos:end="502:70">==</operator> <literal type="number" pos:start="502:72" pos:end="502:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="504:5" pos:end="504:24">/* clear csrattrs */</comment>
    <expr_stmt pos:start="505:5" pos:end="505:49"><expr pos:start="505:5" pos:end="505:48"><name pos:start="505:5" pos:end="505:6">rc</name> <operator pos:start="505:8" pos:end="505:8">=</operator> <call pos:start="505:10" pos:end="505:48"><name pos:start="505:10" pos:end="505:33">est_server_init_csrattrs</name><argument_list pos:start="505:34" pos:end="505:48">(<argument pos:start="505:35" pos:end="505:38"><expr pos:start="505:35" pos:end="505:38"><name pos:start="505:35" pos:end="505:38">ectx</name></expr></argument>, <argument pos:start="505:41" pos:end="505:44"><expr pos:start="505:41" pos:end="505:44"><name pos:start="505:41" pos:end="505:44">NULL</name></expr></argument>, <argument pos:start="505:47" pos:end="505:47"><expr pos:start="505:47" pos:end="505:47"><literal type="number" pos:start="505:47" pos:end="505:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="506:5" pos:end="506:34"><expr pos:start="506:5" pos:end="506:33"><call pos:start="506:5" pos:end="506:33"><name pos:start="506:5" pos:end="506:13">CU_ASSERT</name><argument_list pos:start="506:14" pos:end="506:33">(<argument pos:start="506:15" pos:end="506:32"><expr pos:start="506:15" pos:end="506:32"><name pos:start="506:15" pos:end="506:16">rc</name> <operator pos:start="506:18" pos:end="506:19">==</operator> <name pos:start="506:21" pos:end="506:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="508:5" pos:end="508:59"><expr pos:start="508:5" pos:end="508:58"><name pos:start="508:5" pos:end="508:6">rc</name> <operator pos:start="508:8" pos:end="508:8">=</operator> <call pos:start="508:10" pos:end="508:58"><name pos:start="508:10" pos:end="508:32">est_client_get_csrattrs</name><argument_list pos:start="508:33" pos:end="508:58">(<argument pos:start="508:34" pos:end="508:36"><expr pos:start="508:34" pos:end="508:36"><name pos:start="508:34" pos:end="508:36">ctx</name></expr></argument>, <argument pos:start="508:39" pos:end="508:47"><expr pos:start="508:39" pos:end="508:47"><operator pos:start="508:39" pos:end="508:39">&amp;</operator><name pos:start="508:40" pos:end="508:47">csr_data</name></expr></argument>, <argument pos:start="508:50" pos:end="508:57"><expr pos:start="508:50" pos:end="508:57"><operator pos:start="508:50" pos:end="508:50">&amp;</operator><name pos:start="508:51" pos:end="508:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="509:5" pos:end="509:34"><expr pos:start="509:5" pos:end="509:33"><call pos:start="509:5" pos:end="509:33"><name pos:start="509:5" pos:end="509:13">CU_ASSERT</name><argument_list pos:start="509:14" pos:end="509:33">(<argument pos:start="509:15" pos:end="509:32"><expr pos:start="509:15" pos:end="509:32"><name pos:start="509:15" pos:end="509:16">rc</name> <operator pos:start="509:18" pos:end="509:19">==</operator> <name pos:start="509:21" pos:end="509:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="510:5" pos:end="510:45"><expr pos:start="510:5" pos:end="510:44"><call pos:start="510:5" pos:end="510:44"><name pos:start="510:5" pos:end="510:13">CU_ASSERT</name><argument_list pos:start="510:14" pos:end="510:44">(<argument pos:start="510:15" pos:end="510:43"><expr pos:start="510:15" pos:end="510:43"><name pos:start="510:15" pos:end="510:21">csr_len</name> <operator pos:start="510:23" pos:end="510:24">==</operator> <call pos:start="510:26" pos:end="510:43"><name pos:start="510:26" pos:end="510:31">strlen</name><argument_list pos:start="510:32" pos:end="510:43">(<argument pos:start="510:33" pos:end="510:42"><expr pos:start="510:33" pos:end="510:42"><name pos:start="510:33" pos:end="510:42">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="511:5" pos:end="511:74"><expr pos:start="511:5" pos:end="511:73"><call pos:start="511:5" pos:end="511:73"><name pos:start="511:5" pos:end="511:13">CU_ASSERT</name><argument_list pos:start="511:14" pos:end="511:73">(<argument pos:start="511:15" pos:end="511:72"><expr pos:start="511:15" pos:end="511:72"><call pos:start="511:15" pos:end="511:67"><name pos:start="511:15" pos:end="511:21">strncmp</name><argument_list pos:start="511:22" pos:end="511:67">(<argument pos:start="511:23" pos:end="511:32"><expr pos:start="511:23" pos:end="511:32"><name pos:start="511:23" pos:end="511:32">TEST_ATTR1</name></expr></argument>, <argument pos:start="511:35" pos:end="511:57"><expr pos:start="511:35" pos:end="511:57"><operator pos:start="511:35" pos:end="511:35">(</operator><specifier pos:start="511:36" pos:end="511:40">const</specifier> <name pos:start="511:42" pos:end="511:45">char</name> <operator pos:start="511:47" pos:end="511:47">*</operator><operator pos:start="511:48" pos:end="511:48">)</operator> <name pos:start="511:50" pos:end="511:57">csr_data</name></expr></argument>, <argument pos:start="511:60" pos:end="511:66"><expr pos:start="511:60" pos:end="511:66"><name pos:start="511:60" pos:end="511:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="511:69" pos:end="511:70">==</operator> <literal type="number" pos:start="511:72" pos:end="511:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="513:5" pos:end="513:24">/* clear callback */</comment>
    <if_stmt pos:start="514:5" pos:end="517:5"><if pos:start="514:5" pos:end="517:5">if <condition pos:start="514:8" pos:end="514:35">(<expr pos:start="514:9" pos:end="514:34"><call pos:start="514:9" pos:end="514:34"><name pos:start="514:9" pos:end="514:22">est_set_csr_cb</name><argument_list pos:start="514:23" pos:end="514:34">(<argument pos:start="514:24" pos:end="514:27"><expr pos:start="514:24" pos:end="514:27"><name pos:start="514:24" pos:end="514:27">ectx</name></expr></argument>, <argument pos:start="514:30" pos:end="514:33"><expr pos:start="514:30" pos:end="514:33"><name pos:start="514:30" pos:end="514:33">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="514:37" pos:end="517:5">{<block_content pos:start="515:9" pos:end="516:16">
        <expr_stmt pos:start="515:9" pos:end="515:78"><expr pos:start="515:9" pos:end="515:77"><call pos:start="515:9" pos:end="515:77"><name pos:start="515:9" pos:end="515:14">printf</name><argument_list pos:start="515:15" pos:end="515:77">(<argument pos:start="515:16" pos:end="515:76"><expr pos:start="515:16" pos:end="515:76"><literal type="string" pos:start="515:16" pos:end="515:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="516:9" pos:end="516:16"><expr pos:start="516:9" pos:end="516:15"><call pos:start="516:9" pos:end="516:15"><name pos:start="516:9" pos:end="516:12">exit</name><argument_list pos:start="516:13" pos:end="516:15">(<argument pos:start="516:14" pos:end="516:14"><expr pos:start="516:14" pos:end="516:14"><literal type="number" pos:start="516:14" pos:end="516:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="519:5" pos:end="519:35">/* Setting the smallest size */</comment>
    <expr_stmt pos:start="520:5" pos:end="520:72"><expr pos:start="520:5" pos:end="520:71"><name pos:start="520:5" pos:end="520:6">rc</name> <operator pos:start="520:8" pos:end="520:8">=</operator> <call pos:start="520:10" pos:end="520:71"><name pos:start="520:10" pos:end="520:33">est_server_init_csrattrs</name><argument_list pos:start="520:34" pos:end="520:71">(<argument pos:start="520:35" pos:end="520:38"><expr pos:start="520:35" pos:end="520:38"><name pos:start="520:35" pos:end="520:38">ectx</name></expr></argument>, <argument pos:start="520:41" pos:end="520:50"><expr pos:start="520:41" pos:end="520:50"><name pos:start="520:41" pos:end="520:50">TEST_ATTR2</name></expr></argument>, <argument pos:start="520:53" pos:end="520:70"><expr pos:start="520:53" pos:end="520:70"><call pos:start="520:53" pos:end="520:70"><name pos:start="520:53" pos:end="520:58">strlen</name><argument_list pos:start="520:59" pos:end="520:70">(<argument pos:start="520:60" pos:end="520:69"><expr pos:start="520:60" pos:end="520:69"><name pos:start="520:60" pos:end="520:69">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="521:5" pos:end="521:34"><expr pos:start="521:5" pos:end="521:33"><call pos:start="521:5" pos:end="521:33"><name pos:start="521:5" pos:end="521:13">CU_ASSERT</name><argument_list pos:start="521:14" pos:end="521:33">(<argument pos:start="521:15" pos:end="521:32"><expr pos:start="521:15" pos:end="521:32"><name pos:start="521:15" pos:end="521:16">rc</name> <operator pos:start="521:18" pos:end="521:19">==</operator> <name pos:start="521:21" pos:end="521:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="523:5" pos:end="523:59"><expr pos:start="523:5" pos:end="523:58"><name pos:start="523:5" pos:end="523:6">rc</name> <operator pos:start="523:8" pos:end="523:8">=</operator> <call pos:start="523:10" pos:end="523:58"><name pos:start="523:10" pos:end="523:32">est_client_get_csrattrs</name><argument_list pos:start="523:33" pos:end="523:58">(<argument pos:start="523:34" pos:end="523:36"><expr pos:start="523:34" pos:end="523:36"><name pos:start="523:34" pos:end="523:36">ctx</name></expr></argument>, <argument pos:start="523:39" pos:end="523:47"><expr pos:start="523:39" pos:end="523:47"><operator pos:start="523:39" pos:end="523:39">&amp;</operator><name pos:start="523:40" pos:end="523:47">csr_data</name></expr></argument>, <argument pos:start="523:50" pos:end="523:57"><expr pos:start="523:50" pos:end="523:57"><operator pos:start="523:50" pos:end="523:50">&amp;</operator><name pos:start="523:51" pos:end="523:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="524:5" pos:end="524:34"><expr pos:start="524:5" pos:end="524:33"><call pos:start="524:5" pos:end="524:33"><name pos:start="524:5" pos:end="524:13">CU_ASSERT</name><argument_list pos:start="524:14" pos:end="524:33">(<argument pos:start="524:15" pos:end="524:32"><expr pos:start="524:15" pos:end="524:32"><name pos:start="524:15" pos:end="524:16">rc</name> <operator pos:start="524:18" pos:end="524:19">==</operator> <name pos:start="524:21" pos:end="524:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="525:5" pos:end="525:45"><expr pos:start="525:5" pos:end="525:44"><call pos:start="525:5" pos:end="525:44"><name pos:start="525:5" pos:end="525:13">CU_ASSERT</name><argument_list pos:start="525:14" pos:end="525:44">(<argument pos:start="525:15" pos:end="525:43"><expr pos:start="525:15" pos:end="525:43"><name pos:start="525:15" pos:end="525:21">csr_len</name> <operator pos:start="525:23" pos:end="525:24">==</operator> <call pos:start="525:26" pos:end="525:43"><name pos:start="525:26" pos:end="525:31">strlen</name><argument_list pos:start="525:32" pos:end="525:43">(<argument pos:start="525:33" pos:end="525:42"><expr pos:start="525:33" pos:end="525:42"><name pos:start="525:33" pos:end="525:42">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="526:5" pos:end="526:74"><expr pos:start="526:5" pos:end="526:73"><call pos:start="526:5" pos:end="526:73"><name pos:start="526:5" pos:end="526:13">CU_ASSERT</name><argument_list pos:start="526:14" pos:end="526:73">(<argument pos:start="526:15" pos:end="526:72"><expr pos:start="526:15" pos:end="526:72"><call pos:start="526:15" pos:end="526:67"><name pos:start="526:15" pos:end="526:21">strncmp</name><argument_list pos:start="526:22" pos:end="526:67">(<argument pos:start="526:23" pos:end="526:32"><expr pos:start="526:23" pos:end="526:32"><name pos:start="526:23" pos:end="526:32">TEST_ATTR2</name></expr></argument>, <argument pos:start="526:35" pos:end="526:57"><expr pos:start="526:35" pos:end="526:57"><operator pos:start="526:35" pos:end="526:35">(</operator><specifier pos:start="526:36" pos:end="526:40">const</specifier> <name pos:start="526:42" pos:end="526:45">char</name> <operator pos:start="526:47" pos:end="526:47">*</operator><operator pos:start="526:48" pos:end="526:48">)</operator> <name pos:start="526:50" pos:end="526:57">csr_data</name></expr></argument>, <argument pos:start="526:60" pos:end="526:66"><expr pos:start="526:60" pos:end="526:66"><name pos:start="526:60" pos:end="526:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="526:69" pos:end="526:70">==</operator> <literal type="number" pos:start="526:72" pos:end="526:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="528:5" pos:end="528:72"><expr pos:start="528:5" pos:end="528:71"><name pos:start="528:5" pos:end="528:6">rc</name> <operator pos:start="528:8" pos:end="528:8">=</operator> <call pos:start="528:10" pos:end="528:71"><name pos:start="528:10" pos:end="528:33">est_server_init_csrattrs</name><argument_list pos:start="528:34" pos:end="528:71">(<argument pos:start="528:35" pos:end="528:38"><expr pos:start="528:35" pos:end="528:38"><name pos:start="528:35" pos:end="528:38">ectx</name></expr></argument>, <argument pos:start="528:41" pos:end="528:50"><expr pos:start="528:41" pos:end="528:50"><name pos:start="528:41" pos:end="528:50">TEST_ATTR3</name></expr></argument>, <argument pos:start="528:53" pos:end="528:70"><expr pos:start="528:53" pos:end="528:70"><call pos:start="528:53" pos:end="528:70"><name pos:start="528:53" pos:end="528:58">strlen</name><argument_list pos:start="528:59" pos:end="528:70">(<argument pos:start="528:60" pos:end="528:69"><expr pos:start="528:60" pos:end="528:69"><name pos:start="528:60" pos:end="528:69">TEST_ATTR3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="529:5" pos:end="529:34"><expr pos:start="529:5" pos:end="529:33"><call pos:start="529:5" pos:end="529:33"><name pos:start="529:5" pos:end="529:13">CU_ASSERT</name><argument_list pos:start="529:14" pos:end="529:33">(<argument pos:start="529:15" pos:end="529:32"><expr pos:start="529:15" pos:end="529:32"><name pos:start="529:15" pos:end="529:16">rc</name> <operator pos:start="529:18" pos:end="529:19">==</operator> <name pos:start="529:21" pos:end="529:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="531:5" pos:end="531:59"><expr pos:start="531:5" pos:end="531:58"><name pos:start="531:5" pos:end="531:6">rc</name> <operator pos:start="531:8" pos:end="531:8">=</operator> <call pos:start="531:10" pos:end="531:58"><name pos:start="531:10" pos:end="531:32">est_client_get_csrattrs</name><argument_list pos:start="531:33" pos:end="531:58">(<argument pos:start="531:34" pos:end="531:36"><expr pos:start="531:34" pos:end="531:36"><name pos:start="531:34" pos:end="531:36">ctx</name></expr></argument>, <argument pos:start="531:39" pos:end="531:47"><expr pos:start="531:39" pos:end="531:47"><operator pos:start="531:39" pos:end="531:39">&amp;</operator><name pos:start="531:40" pos:end="531:47">csr_data</name></expr></argument>, <argument pos:start="531:50" pos:end="531:57"><expr pos:start="531:50" pos:end="531:57"><operator pos:start="531:50" pos:end="531:50">&amp;</operator><name pos:start="531:51" pos:end="531:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="532:5" pos:end="532:34"><expr pos:start="532:5" pos:end="532:33"><call pos:start="532:5" pos:end="532:33"><name pos:start="532:5" pos:end="532:13">CU_ASSERT</name><argument_list pos:start="532:14" pos:end="532:33">(<argument pos:start="532:15" pos:end="532:32"><expr pos:start="532:15" pos:end="532:32"><name pos:start="532:15" pos:end="532:16">rc</name> <operator pos:start="532:18" pos:end="532:19">==</operator> <name pos:start="532:21" pos:end="532:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="533:5" pos:end="533:45"><expr pos:start="533:5" pos:end="533:44"><call pos:start="533:5" pos:end="533:44"><name pos:start="533:5" pos:end="533:13">CU_ASSERT</name><argument_list pos:start="533:14" pos:end="533:44">(<argument pos:start="533:15" pos:end="533:43"><expr pos:start="533:15" pos:end="533:43"><name pos:start="533:15" pos:end="533:21">csr_len</name> <operator pos:start="533:23" pos:end="533:24">==</operator> <call pos:start="533:26" pos:end="533:43"><name pos:start="533:26" pos:end="533:31">strlen</name><argument_list pos:start="533:32" pos:end="533:43">(<argument pos:start="533:33" pos:end="533:42"><expr pos:start="533:33" pos:end="533:42"><name pos:start="533:33" pos:end="533:42">TEST_ATTR3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="534:5" pos:end="534:74"><expr pos:start="534:5" pos:end="534:73"><call pos:start="534:5" pos:end="534:73"><name pos:start="534:5" pos:end="534:13">CU_ASSERT</name><argument_list pos:start="534:14" pos:end="534:73">(<argument pos:start="534:15" pos:end="534:72"><expr pos:start="534:15" pos:end="534:72"><call pos:start="534:15" pos:end="534:67"><name pos:start="534:15" pos:end="534:21">strncmp</name><argument_list pos:start="534:22" pos:end="534:67">(<argument pos:start="534:23" pos:end="534:32"><expr pos:start="534:23" pos:end="534:32"><name pos:start="534:23" pos:end="534:32">TEST_ATTR3</name></expr></argument>, <argument pos:start="534:35" pos:end="534:57"><expr pos:start="534:35" pos:end="534:57"><operator pos:start="534:35" pos:end="534:35">(</operator><specifier pos:start="534:36" pos:end="534:40">const</specifier> <name pos:start="534:42" pos:end="534:45">char</name> <operator pos:start="534:47" pos:end="534:47">*</operator><operator pos:start="534:48" pos:end="534:48">)</operator> <name pos:start="534:50" pos:end="534:57">csr_data</name></expr></argument>, <argument pos:start="534:60" pos:end="534:66"><expr pos:start="534:60" pos:end="534:66"><name pos:start="534:60" pos:end="534:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="534:69" pos:end="534:70">==</operator> <literal type="number" pos:start="534:72" pos:end="534:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="536:5" pos:end="536:24">/* clear csrattrs */</comment>
    <expr_stmt pos:start="537:5" pos:end="537:49"><expr pos:start="537:5" pos:end="537:48"><name pos:start="537:5" pos:end="537:6">rc</name> <operator pos:start="537:8" pos:end="537:8">=</operator> <call pos:start="537:10" pos:end="537:48"><name pos:start="537:10" pos:end="537:33">est_server_init_csrattrs</name><argument_list pos:start="537:34" pos:end="537:48">(<argument pos:start="537:35" pos:end="537:38"><expr pos:start="537:35" pos:end="537:38"><name pos:start="537:35" pos:end="537:38">ectx</name></expr></argument>, <argument pos:start="537:41" pos:end="537:44"><expr pos:start="537:41" pos:end="537:44"><name pos:start="537:41" pos:end="537:44">NULL</name></expr></argument>, <argument pos:start="537:47" pos:end="537:47"><expr pos:start="537:47" pos:end="537:47"><literal type="number" pos:start="537:47" pos:end="537:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="538:5" pos:end="538:34"><expr pos:start="538:5" pos:end="538:33"><call pos:start="538:5" pos:end="538:33"><name pos:start="538:5" pos:end="538:13">CU_ASSERT</name><argument_list pos:start="538:14" pos:end="538:33">(<argument pos:start="538:15" pos:end="538:32"><expr pos:start="538:15" pos:end="538:32"><name pos:start="538:15" pos:end="538:16">rc</name> <operator pos:start="538:18" pos:end="538:19">==</operator> <name pos:start="538:21" pos:end="538:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="539:5" pos:end="539:59"><expr pos:start="539:5" pos:end="539:58"><name pos:start="539:5" pos:end="539:6">rc</name> <operator pos:start="539:8" pos:end="539:8">=</operator> <call pos:start="539:10" pos:end="539:58"><name pos:start="539:10" pos:end="539:32">est_client_get_csrattrs</name><argument_list pos:start="539:33" pos:end="539:58">(<argument pos:start="539:34" pos:end="539:36"><expr pos:start="539:34" pos:end="539:36"><name pos:start="539:34" pos:end="539:36">ctx</name></expr></argument>, <argument pos:start="539:39" pos:end="539:47"><expr pos:start="539:39" pos:end="539:47"><operator pos:start="539:39" pos:end="539:39">&amp;</operator><name pos:start="539:40" pos:end="539:47">csr_data</name></expr></argument>, <argument pos:start="539:50" pos:end="539:57"><expr pos:start="539:50" pos:end="539:57"><operator pos:start="539:50" pos:end="539:50">&amp;</operator><name pos:start="539:51" pos:end="539:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="540:5" pos:end="540:34"><expr pos:start="540:5" pos:end="540:33"><call pos:start="540:5" pos:end="540:33"><name pos:start="540:5" pos:end="540:13">CU_ASSERT</name><argument_list pos:start="540:14" pos:end="540:33">(<argument pos:start="540:15" pos:end="540:32"><expr pos:start="540:15" pos:end="540:32"><name pos:start="540:15" pos:end="540:16">rc</name> <operator pos:start="540:18" pos:end="540:19">==</operator> <name pos:start="540:21" pos:end="540:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="541:5" pos:end="541:28"><expr pos:start="541:5" pos:end="541:27"><call pos:start="541:5" pos:end="541:27"><name pos:start="541:5" pos:end="541:13">CU_ASSERT</name><argument_list pos:start="541:14" pos:end="541:27">(<argument pos:start="541:15" pos:end="541:26"><expr pos:start="541:15" pos:end="541:26"><name pos:start="541:15" pos:end="541:21">csr_len</name> <operator pos:start="541:23" pos:end="541:24">==</operator> <literal type="number" pos:start="541:26" pos:end="541:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="546:33"><expr pos:start="543:5" pos:end="546:32"><name pos:start="543:5" pos:end="543:6">rc</name> <operator pos:start="543:8" pos:end="543:8">=</operator> <call pos:start="543:10" pos:end="546:32"><name pos:start="543:10" pos:end="543:33">est_server_init_csrattrs</name><argument_list pos:start="543:34" pos:end="546:32">(
        <argument pos:start="544:9" pos:end="544:12"><expr pos:start="544:9" pos:end="544:12"><name pos:start="544:9" pos:end="544:12">ectx</name></expr></argument>,
        <argument pos:start="545:9" pos:end="545:23"><expr pos:start="545:9" pos:end="545:23"><name pos:start="545:9" pos:end="545:23">TEST_1024_NOPOP</name></expr></argument>,
        <argument pos:start="546:9" pos:end="546:31"><expr pos:start="546:9" pos:end="546:31"><call pos:start="546:9" pos:end="546:31"><name pos:start="546:9" pos:end="546:14">strlen</name><argument_list pos:start="546:15" pos:end="546:31">(<argument pos:start="546:16" pos:end="546:30"><expr pos:start="546:16" pos:end="546:30"><name pos:start="546:16" pos:end="546:30">TEST_1024_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="547:5" pos:end="547:34"><expr pos:start="547:5" pos:end="547:33"><call pos:start="547:5" pos:end="547:33"><name pos:start="547:5" pos:end="547:13">CU_ASSERT</name><argument_list pos:start="547:14" pos:end="547:33">(<argument pos:start="547:15" pos:end="547:32"><expr pos:start="547:15" pos:end="547:32"><name pos:start="547:15" pos:end="547:16">rc</name> <operator pos:start="547:18" pos:end="547:19">==</operator> <name pos:start="547:21" pos:end="547:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="548:5" pos:end="548:59"><expr pos:start="548:5" pos:end="548:58"><name pos:start="548:5" pos:end="548:6">rc</name> <operator pos:start="548:8" pos:end="548:8">=</operator> <call pos:start="548:10" pos:end="548:58"><name pos:start="548:10" pos:end="548:32">est_client_get_csrattrs</name><argument_list pos:start="548:33" pos:end="548:58">(<argument pos:start="548:34" pos:end="548:36"><expr pos:start="548:34" pos:end="548:36"><name pos:start="548:34" pos:end="548:36">ctx</name></expr></argument>, <argument pos:start="548:39" pos:end="548:47"><expr pos:start="548:39" pos:end="548:47"><operator pos:start="548:39" pos:end="548:39">&amp;</operator><name pos:start="548:40" pos:end="548:47">csr_data</name></expr></argument>, <argument pos:start="548:50" pos:end="548:57"><expr pos:start="548:50" pos:end="548:57"><operator pos:start="548:50" pos:end="548:50">&amp;</operator><name pos:start="548:51" pos:end="548:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="549:5" pos:end="549:34"><expr pos:start="549:5" pos:end="549:33"><call pos:start="549:5" pos:end="549:33"><name pos:start="549:5" pos:end="549:13">CU_ASSERT</name><argument_list pos:start="549:14" pos:end="549:33">(<argument pos:start="549:15" pos:end="549:32"><expr pos:start="549:15" pos:end="549:32"><name pos:start="549:15" pos:end="549:16">rc</name> <operator pos:start="549:18" pos:end="549:19">==</operator> <name pos:start="549:21" pos:end="549:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="550:5" pos:end="550:50"><expr pos:start="550:5" pos:end="550:49"><call pos:start="550:5" pos:end="550:49"><name pos:start="550:5" pos:end="550:13">CU_ASSERT</name><argument_list pos:start="550:14" pos:end="550:49">(<argument pos:start="550:15" pos:end="550:48"><expr pos:start="550:15" pos:end="550:48"><name pos:start="550:15" pos:end="550:21">csr_len</name> <operator pos:start="550:23" pos:end="550:24">==</operator> <call pos:start="550:26" pos:end="550:48"><name pos:start="550:26" pos:end="550:31">strlen</name><argument_list pos:start="550:32" pos:end="550:48">(<argument pos:start="550:33" pos:end="550:47"><expr pos:start="550:33" pos:end="550:47"><name pos:start="550:33" pos:end="550:47">TEST_1024_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="551:5" pos:end="551:79"><expr pos:start="551:5" pos:end="551:78"><call pos:start="551:5" pos:end="551:78"><name pos:start="551:5" pos:end="551:13">CU_ASSERT</name><argument_list pos:start="551:14" pos:end="551:78">(<argument pos:start="551:15" pos:end="551:77"><expr pos:start="551:15" pos:end="551:77"><call pos:start="551:15" pos:end="551:72"><name pos:start="551:15" pos:end="551:21">strncmp</name><argument_list pos:start="551:22" pos:end="551:72">(<argument pos:start="551:23" pos:end="551:37"><expr pos:start="551:23" pos:end="551:37"><name pos:start="551:23" pos:end="551:37">TEST_1024_NOPOP</name></expr></argument>, <argument pos:start="551:40" pos:end="551:62"><expr pos:start="551:40" pos:end="551:62"><operator pos:start="551:40" pos:end="551:40">(</operator><specifier pos:start="551:41" pos:end="551:45">const</specifier> <name pos:start="551:47" pos:end="551:50">char</name> <operator pos:start="551:52" pos:end="551:52">*</operator><operator pos:start="551:53" pos:end="551:53">)</operator> <name pos:start="551:55" pos:end="551:62">csr_data</name></expr></argument>, <argument pos:start="551:65" pos:end="551:71"><expr pos:start="551:65" pos:end="551:71"><name pos:start="551:65" pos:end="551:71">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="551:74" pos:end="551:75">==</operator> <literal type="number" pos:start="551:77" pos:end="551:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="553:5" pos:end="553:54">/* Enable PoP and test responses with PoP added */</comment>
    <expr_stmt pos:start="554:5" pos:end="554:20"><expr pos:start="554:5" pos:end="554:19"><call pos:start="554:5" pos:end="554:19"><name pos:start="554:5" pos:end="554:17">st_enable_pop</name><argument_list pos:start="554:18" pos:end="554:19">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="556:5" pos:end="556:78"><expr pos:start="556:5" pos:end="556:77"><name pos:start="556:5" pos:end="556:6">rc</name> <operator pos:start="556:8" pos:end="556:8">=</operator> <call pos:start="556:10" pos:end="556:77"><name pos:start="556:10" pos:end="556:33">est_server_init_csrattrs</name><argument_list pos:start="556:34" pos:end="556:77">(<argument pos:start="556:35" pos:end="556:38"><expr pos:start="556:35" pos:end="556:38"><name pos:start="556:35" pos:end="556:38">ectx</name></expr></argument>, <argument pos:start="556:41" pos:end="556:53"><expr pos:start="556:41" pos:end="556:53"><name pos:start="556:41" pos:end="556:53">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="556:56" pos:end="556:76"><expr pos:start="556:56" pos:end="556:76"><call pos:start="556:56" pos:end="556:76"><name pos:start="556:56" pos:end="556:61">strlen</name><argument_list pos:start="556:62" pos:end="556:76">(<argument pos:start="556:63" pos:end="556:75"><expr pos:start="556:63" pos:end="556:75"><name pos:start="556:63" pos:end="556:75">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="557:5" pos:end="557:34"><expr pos:start="557:5" pos:end="557:33"><call pos:start="557:5" pos:end="557:33"><name pos:start="557:5" pos:end="557:13">CU_ASSERT</name><argument_list pos:start="557:14" pos:end="557:33">(<argument pos:start="557:15" pos:end="557:32"><expr pos:start="557:15" pos:end="557:32"><name pos:start="557:15" pos:end="557:16">rc</name> <operator pos:start="557:18" pos:end="557:19">==</operator> <name pos:start="557:21" pos:end="557:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="558:5" pos:end="558:59"><expr pos:start="558:5" pos:end="558:58"><name pos:start="558:5" pos:end="558:6">rc</name> <operator pos:start="558:8" pos:end="558:8">=</operator> <call pos:start="558:10" pos:end="558:58"><name pos:start="558:10" pos:end="558:32">est_client_get_csrattrs</name><argument_list pos:start="558:33" pos:end="558:58">(<argument pos:start="558:34" pos:end="558:36"><expr pos:start="558:34" pos:end="558:36"><name pos:start="558:34" pos:end="558:36">ctx</name></expr></argument>, <argument pos:start="558:39" pos:end="558:47"><expr pos:start="558:39" pos:end="558:47"><operator pos:start="558:39" pos:end="558:39">&amp;</operator><name pos:start="558:40" pos:end="558:47">csr_data</name></expr></argument>, <argument pos:start="558:50" pos:end="558:57"><expr pos:start="558:50" pos:end="558:57"><operator pos:start="558:50" pos:end="558:50">&amp;</operator><name pos:start="558:51" pos:end="558:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="559:5" pos:end="559:34"><expr pos:start="559:5" pos:end="559:33"><call pos:start="559:5" pos:end="559:33"><name pos:start="559:5" pos:end="559:13">CU_ASSERT</name><argument_list pos:start="559:14" pos:end="559:33">(<argument pos:start="559:15" pos:end="559:32"><expr pos:start="559:15" pos:end="559:32"><name pos:start="559:15" pos:end="559:16">rc</name> <operator pos:start="559:18" pos:end="559:19">==</operator> <name pos:start="559:21" pos:end="559:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="560:5" pos:end="560:32"><expr pos:start="560:5" pos:end="560:31"><call pos:start="560:5" pos:end="560:31"><name pos:start="560:5" pos:end="560:13">CU_ASSERT</name><argument_list pos:start="560:14" pos:end="560:31">(<argument pos:start="560:15" pos:end="560:30"><expr pos:start="560:15" pos:end="560:30"><name pos:start="560:15" pos:end="560:22">csr_data</name> <operator pos:start="560:24" pos:end="560:25">!=</operator> <name pos:start="560:27" pos:end="560:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="561:5" pos:end="561:28"><expr pos:start="561:5" pos:end="561:27"><call pos:start="561:5" pos:end="561:27"><name pos:start="561:5" pos:end="561:13">CU_ASSERT</name><argument_list pos:start="561:14" pos:end="561:27">(<argument pos:start="561:15" pos:end="561:26"><expr pos:start="561:15" pos:end="561:26"><name pos:start="561:15" pos:end="561:21">csr_len</name> <operator pos:start="561:23" pos:end="561:23">=</operator> <literal type="number" pos:start="561:25" pos:end="561:26">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="562:5" pos:end="562:77"><expr pos:start="562:5" pos:end="562:76"><call pos:start="562:5" pos:end="562:76"><name pos:start="562:5" pos:end="562:13">CU_ASSERT</name><argument_list pos:start="562:14" pos:end="562:76">(<argument pos:start="562:15" pos:end="562:75"><expr pos:start="562:15" pos:end="562:75"><call pos:start="562:15" pos:end="562:70"><name pos:start="562:15" pos:end="562:21">strncmp</name><argument_list pos:start="562:22" pos:end="562:70">(<argument pos:start="562:23" pos:end="562:35"><expr pos:start="562:23" pos:end="562:35"><name pos:start="562:23" pos:end="562:35">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="562:38" pos:end="562:60"><expr pos:start="562:38" pos:end="562:60"><operator pos:start="562:38" pos:end="562:38">(</operator><specifier pos:start="562:39" pos:end="562:43">const</specifier> <name pos:start="562:45" pos:end="562:48">char</name> <operator pos:start="562:50" pos:end="562:50">*</operator><operator pos:start="562:51" pos:end="562:51">)</operator> <name pos:start="562:53" pos:end="562:60">csr_data</name></expr></argument>, <argument pos:start="562:63" pos:end="562:69"><expr pos:start="562:63" pos:end="562:69"><name pos:start="562:63" pos:end="562:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="562:72" pos:end="562:73">==</operator> <literal type="number" pos:start="562:75" pos:end="562:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="564:5" pos:end="567:33"><expr pos:start="564:5" pos:end="567:32"><name pos:start="564:5" pos:end="564:6">rc</name> <operator pos:start="564:8" pos:end="564:8">=</operator> <call pos:start="564:10" pos:end="567:32"><name pos:start="564:10" pos:end="564:33">est_server_init_csrattrs</name><argument_list pos:start="564:34" pos:end="567:32">(
        <argument pos:start="565:9" pos:end="565:12"><expr pos:start="565:9" pos:end="565:12"><name pos:start="565:9" pos:end="565:12">ectx</name></expr></argument>,
        <argument pos:start="566:9" pos:end="566:23"><expr pos:start="566:9" pos:end="566:23"><name pos:start="566:9" pos:end="566:23">TEST_1024_NOPOP</name></expr></argument>,
        <argument pos:start="567:9" pos:end="567:31"><expr pos:start="567:9" pos:end="567:31"><call pos:start="567:9" pos:end="567:31"><name pos:start="567:9" pos:end="567:14">strlen</name><argument_list pos:start="567:15" pos:end="567:31">(<argument pos:start="567:16" pos:end="567:30"><expr pos:start="567:16" pos:end="567:30"><name pos:start="567:16" pos:end="567:30">TEST_1024_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="568:5" pos:end="568:34"><expr pos:start="568:5" pos:end="568:33"><call pos:start="568:5" pos:end="568:33"><name pos:start="568:5" pos:end="568:13">CU_ASSERT</name><argument_list pos:start="568:14" pos:end="568:33">(<argument pos:start="568:15" pos:end="568:32"><expr pos:start="568:15" pos:end="568:32"><name pos:start="568:15" pos:end="568:16">rc</name> <operator pos:start="568:18" pos:end="568:19">==</operator> <name pos:start="568:21" pos:end="568:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="569:5" pos:end="569:59"><expr pos:start="569:5" pos:end="569:58"><name pos:start="569:5" pos:end="569:6">rc</name> <operator pos:start="569:8" pos:end="569:8">=</operator> <call pos:start="569:10" pos:end="569:58"><name pos:start="569:10" pos:end="569:32">est_client_get_csrattrs</name><argument_list pos:start="569:33" pos:end="569:58">(<argument pos:start="569:34" pos:end="569:36"><expr pos:start="569:34" pos:end="569:36"><name pos:start="569:34" pos:end="569:36">ctx</name></expr></argument>, <argument pos:start="569:39" pos:end="569:47"><expr pos:start="569:39" pos:end="569:47"><operator pos:start="569:39" pos:end="569:39">&amp;</operator><name pos:start="569:40" pos:end="569:47">csr_data</name></expr></argument>, <argument pos:start="569:50" pos:end="569:57"><expr pos:start="569:50" pos:end="569:57"><operator pos:start="569:50" pos:end="569:50">&amp;</operator><name pos:start="569:51" pos:end="569:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="570:5" pos:end="570:34"><expr pos:start="570:5" pos:end="570:33"><call pos:start="570:5" pos:end="570:33"><name pos:start="570:5" pos:end="570:13">CU_ASSERT</name><argument_list pos:start="570:14" pos:end="570:33">(<argument pos:start="570:15" pos:end="570:32"><expr pos:start="570:15" pos:end="570:32"><name pos:start="570:15" pos:end="570:16">rc</name> <operator pos:start="570:18" pos:end="570:19">==</operator> <name pos:start="570:21" pos:end="570:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="571:5" pos:end="571:48"><expr pos:start="571:5" pos:end="571:47"><call pos:start="571:5" pos:end="571:47"><name pos:start="571:5" pos:end="571:13">CU_ASSERT</name><argument_list pos:start="571:14" pos:end="571:47">(<argument pos:start="571:15" pos:end="571:46"><expr pos:start="571:15" pos:end="571:46"><name pos:start="571:15" pos:end="571:21">csr_len</name> <operator pos:start="571:23" pos:end="571:24">==</operator> <call pos:start="571:26" pos:end="571:46"><name pos:start="571:26" pos:end="571:31">strlen</name><argument_list pos:start="571:32" pos:end="571:46">(<argument pos:start="571:33" pos:end="571:45"><expr pos:start="571:33" pos:end="571:45"><name pos:start="571:33" pos:end="571:45">TEST_1024_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="572:5" pos:end="572:77"><expr pos:start="572:5" pos:end="572:76"><call pos:start="572:5" pos:end="572:76"><name pos:start="572:5" pos:end="572:13">CU_ASSERT</name><argument_list pos:start="572:14" pos:end="572:76">(<argument pos:start="572:15" pos:end="572:75"><expr pos:start="572:15" pos:end="572:75"><call pos:start="572:15" pos:end="572:70"><name pos:start="572:15" pos:end="572:21">strncmp</name><argument_list pos:start="572:22" pos:end="572:70">(<argument pos:start="572:23" pos:end="572:35"><expr pos:start="572:23" pos:end="572:35"><name pos:start="572:23" pos:end="572:35">TEST_1024_POP</name></expr></argument>, <argument pos:start="572:38" pos:end="572:60"><expr pos:start="572:38" pos:end="572:60"><operator pos:start="572:38" pos:end="572:38">(</operator><specifier pos:start="572:39" pos:end="572:43">const</specifier> <name pos:start="572:45" pos:end="572:48">char</name> <operator pos:start="572:50" pos:end="572:50">*</operator><operator pos:start="572:51" pos:end="572:51">)</operator> <name pos:start="572:53" pos:end="572:60">csr_data</name></expr></argument>, <argument pos:start="572:63" pos:end="572:69"><expr pos:start="572:63" pos:end="572:69"><name pos:start="572:63" pos:end="572:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="572:72" pos:end="572:73">==</operator> <literal type="number" pos:start="572:75" pos:end="572:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="574:5" pos:end="574:30">/* Setting the size 122 */</comment>
    <expr_stmt pos:start="575:5" pos:end="575:80"><expr pos:start="575:5" pos:end="575:79"><name pos:start="575:5" pos:end="575:6">rc</name> <operator pos:start="575:8" pos:end="575:8">=</operator> <call pos:start="575:10" pos:end="575:79"><name pos:start="575:10" pos:end="575:33">est_server_init_csrattrs</name><argument_list pos:start="575:34" pos:end="575:79">(<argument pos:start="575:35" pos:end="575:38"><expr pos:start="575:35" pos:end="575:38"><name pos:start="575:35" pos:end="575:38">ectx</name></expr></argument>, <argument pos:start="575:41" pos:end="575:54"><expr pos:start="575:41" pos:end="575:54"><name pos:start="575:41" pos:end="575:54">TEST_ATTR4_122</name></expr></argument>, <argument pos:start="575:57" pos:end="575:78"><expr pos:start="575:57" pos:end="575:78"><call pos:start="575:57" pos:end="575:78"><name pos:start="575:57" pos:end="575:62">strlen</name><argument_list pos:start="575:63" pos:end="575:78">(<argument pos:start="575:64" pos:end="575:77"><expr pos:start="575:64" pos:end="575:77"><name pos:start="575:64" pos:end="575:77">TEST_ATTR4_122</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="576:5" pos:end="576:34"><expr pos:start="576:5" pos:end="576:33"><call pos:start="576:5" pos:end="576:33"><name pos:start="576:5" pos:end="576:13">CU_ASSERT</name><argument_list pos:start="576:14" pos:end="576:33">(<argument pos:start="576:15" pos:end="576:32"><expr pos:start="576:15" pos:end="576:32"><name pos:start="576:15" pos:end="576:16">rc</name> <operator pos:start="576:18" pos:end="576:19">==</operator> <name pos:start="576:21" pos:end="576:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="577:5" pos:end="577:59"><expr pos:start="577:5" pos:end="577:58"><name pos:start="577:5" pos:end="577:6">rc</name> <operator pos:start="577:8" pos:end="577:8">=</operator> <call pos:start="577:10" pos:end="577:58"><name pos:start="577:10" pos:end="577:32">est_client_get_csrattrs</name><argument_list pos:start="577:33" pos:end="577:58">(<argument pos:start="577:34" pos:end="577:36"><expr pos:start="577:34" pos:end="577:36"><name pos:start="577:34" pos:end="577:36">ctx</name></expr></argument>, <argument pos:start="577:39" pos:end="577:47"><expr pos:start="577:39" pos:end="577:47"><operator pos:start="577:39" pos:end="577:39">&amp;</operator><name pos:start="577:40" pos:end="577:47">csr_data</name></expr></argument>, <argument pos:start="577:50" pos:end="577:57"><expr pos:start="577:50" pos:end="577:57"><operator pos:start="577:50" pos:end="577:50">&amp;</operator><name pos:start="577:51" pos:end="577:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="578:5" pos:end="578:34"><expr pos:start="578:5" pos:end="578:33"><call pos:start="578:5" pos:end="578:33"><name pos:start="578:5" pos:end="578:13">CU_ASSERT</name><argument_list pos:start="578:14" pos:end="578:33">(<argument pos:start="578:15" pos:end="578:32"><expr pos:start="578:15" pos:end="578:32"><name pos:start="578:15" pos:end="578:16">rc</name> <operator pos:start="578:18" pos:end="578:19">==</operator> <name pos:start="578:21" pos:end="578:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="579:5" pos:end="579:52"><expr pos:start="579:5" pos:end="579:51"><call pos:start="579:5" pos:end="579:51"><name pos:start="579:5" pos:end="579:13">CU_ASSERT</name><argument_list pos:start="579:14" pos:end="579:51">(<argument pos:start="579:15" pos:end="579:50"><expr pos:start="579:15" pos:end="579:50"><name pos:start="579:15" pos:end="579:21">csr_len</name> <operator pos:start="579:23" pos:end="579:24">==</operator> <call pos:start="579:26" pos:end="579:50"><name pos:start="579:26" pos:end="579:31">strlen</name><argument_list pos:start="579:32" pos:end="579:50">(<argument pos:start="579:33" pos:end="579:49"><expr pos:start="579:33" pos:end="579:49"><name pos:start="579:33" pos:end="579:49">TEST_ATTR4_122POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="580:5" pos:end="581:75"><expr pos:start="580:5" pos:end="581:74"><call pos:start="580:5" pos:end="581:74"><name pos:start="580:5" pos:end="580:13">CU_ASSERT</name><argument_list pos:start="580:14" pos:end="581:74">(
        <argument pos:start="581:9" pos:end="581:73"><expr pos:start="581:9" pos:end="581:73"><call pos:start="581:9" pos:end="581:68"><name pos:start="581:9" pos:end="581:15">strncmp</name><argument_list pos:start="581:16" pos:end="581:68">(<argument pos:start="581:17" pos:end="581:33"><expr pos:start="581:17" pos:end="581:33"><name pos:start="581:17" pos:end="581:33">TEST_ATTR4_122POP</name></expr></argument>, <argument pos:start="581:36" pos:end="581:58"><expr pos:start="581:36" pos:end="581:58"><operator pos:start="581:36" pos:end="581:36">(</operator><specifier pos:start="581:37" pos:end="581:41">const</specifier> <name pos:start="581:43" pos:end="581:46">char</name> <operator pos:start="581:48" pos:end="581:48">*</operator><operator pos:start="581:49" pos:end="581:49">)</operator> <name pos:start="581:51" pos:end="581:58">csr_data</name></expr></argument>, <argument pos:start="581:61" pos:end="581:67"><expr pos:start="581:61" pos:end="581:67"><name pos:start="581:61" pos:end="581:67">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="581:70" pos:end="581:71">==</operator> <literal type="number" pos:start="581:73" pos:end="581:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="583:5" pos:end="583:30">/* Setting the size 117 */</comment>
    <expr_stmt pos:start="584:5" pos:end="584:80"><expr pos:start="584:5" pos:end="584:79"><name pos:start="584:5" pos:end="584:6">rc</name> <operator pos:start="584:8" pos:end="584:8">=</operator> <call pos:start="584:10" pos:end="584:79"><name pos:start="584:10" pos:end="584:33">est_server_init_csrattrs</name><argument_list pos:start="584:34" pos:end="584:79">(<argument pos:start="584:35" pos:end="584:38"><expr pos:start="584:35" pos:end="584:38"><name pos:start="584:35" pos:end="584:38">ectx</name></expr></argument>, <argument pos:start="584:41" pos:end="584:54"><expr pos:start="584:41" pos:end="584:54"><name pos:start="584:41" pos:end="584:54">TEST_ATTR5_117</name></expr></argument>, <argument pos:start="584:57" pos:end="584:78"><expr pos:start="584:57" pos:end="584:78"><call pos:start="584:57" pos:end="584:78"><name pos:start="584:57" pos:end="584:62">strlen</name><argument_list pos:start="584:63" pos:end="584:78">(<argument pos:start="584:64" pos:end="584:77"><expr pos:start="584:64" pos:end="584:77"><name pos:start="584:64" pos:end="584:77">TEST_ATTR5_117</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="585:5" pos:end="585:34"><expr pos:start="585:5" pos:end="585:33"><call pos:start="585:5" pos:end="585:33"><name pos:start="585:5" pos:end="585:13">CU_ASSERT</name><argument_list pos:start="585:14" pos:end="585:33">(<argument pos:start="585:15" pos:end="585:32"><expr pos:start="585:15" pos:end="585:32"><name pos:start="585:15" pos:end="585:16">rc</name> <operator pos:start="585:18" pos:end="585:19">==</operator> <name pos:start="585:21" pos:end="585:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="586:5" pos:end="586:59"><expr pos:start="586:5" pos:end="586:58"><name pos:start="586:5" pos:end="586:6">rc</name> <operator pos:start="586:8" pos:end="586:8">=</operator> <call pos:start="586:10" pos:end="586:58"><name pos:start="586:10" pos:end="586:32">est_client_get_csrattrs</name><argument_list pos:start="586:33" pos:end="586:58">(<argument pos:start="586:34" pos:end="586:36"><expr pos:start="586:34" pos:end="586:36"><name pos:start="586:34" pos:end="586:36">ctx</name></expr></argument>, <argument pos:start="586:39" pos:end="586:47"><expr pos:start="586:39" pos:end="586:47"><operator pos:start="586:39" pos:end="586:39">&amp;</operator><name pos:start="586:40" pos:end="586:47">csr_data</name></expr></argument>, <argument pos:start="586:50" pos:end="586:57"><expr pos:start="586:50" pos:end="586:57"><operator pos:start="586:50" pos:end="586:50">&amp;</operator><name pos:start="586:51" pos:end="586:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="587:5" pos:end="587:34"><expr pos:start="587:5" pos:end="587:33"><call pos:start="587:5" pos:end="587:33"><name pos:start="587:5" pos:end="587:13">CU_ASSERT</name><argument_list pos:start="587:14" pos:end="587:33">(<argument pos:start="587:15" pos:end="587:32"><expr pos:start="587:15" pos:end="587:32"><name pos:start="587:15" pos:end="587:16">rc</name> <operator pos:start="587:18" pos:end="587:19">==</operator> <name pos:start="587:21" pos:end="587:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="588:5" pos:end="588:52"><expr pos:start="588:5" pos:end="588:51"><call pos:start="588:5" pos:end="588:51"><name pos:start="588:5" pos:end="588:13">CU_ASSERT</name><argument_list pos:start="588:14" pos:end="588:51">(<argument pos:start="588:15" pos:end="588:50"><expr pos:start="588:15" pos:end="588:50"><name pos:start="588:15" pos:end="588:21">csr_len</name> <operator pos:start="588:23" pos:end="588:24">==</operator> <call pos:start="588:26" pos:end="588:50"><name pos:start="588:26" pos:end="588:31">strlen</name><argument_list pos:start="588:32" pos:end="588:50">(<argument pos:start="588:33" pos:end="588:49"><expr pos:start="588:33" pos:end="588:49"><name pos:start="588:33" pos:end="588:49">TEST_ATTR5_117POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="589:5" pos:end="590:75"><expr pos:start="589:5" pos:end="590:74"><call pos:start="589:5" pos:end="590:74"><name pos:start="589:5" pos:end="589:13">CU_ASSERT</name><argument_list pos:start="589:14" pos:end="590:74">(
        <argument pos:start="590:9" pos:end="590:73"><expr pos:start="590:9" pos:end="590:73"><call pos:start="590:9" pos:end="590:68"><name pos:start="590:9" pos:end="590:15">strncmp</name><argument_list pos:start="590:16" pos:end="590:68">(<argument pos:start="590:17" pos:end="590:33"><expr pos:start="590:17" pos:end="590:33"><name pos:start="590:17" pos:end="590:33">TEST_ATTR5_117POP</name></expr></argument>, <argument pos:start="590:36" pos:end="590:58"><expr pos:start="590:36" pos:end="590:58"><operator pos:start="590:36" pos:end="590:36">(</operator><specifier pos:start="590:37" pos:end="590:41">const</specifier> <name pos:start="590:43" pos:end="590:46">char</name> <operator pos:start="590:48" pos:end="590:48">*</operator><operator pos:start="590:49" pos:end="590:49">)</operator> <name pos:start="590:51" pos:end="590:58">csr_data</name></expr></argument>, <argument pos:start="590:61" pos:end="590:67"><expr pos:start="590:61" pos:end="590:67"><name pos:start="590:61" pos:end="590:67">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="590:70" pos:end="590:71">==</operator> <literal type="number" pos:start="590:73" pos:end="590:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="592:5" pos:end="592:58">/* Real base64 string needs PoP added - should pass */</comment>
    <expr_stmt pos:start="593:5" pos:end="596:33"><expr pos:start="593:5" pos:end="596:32"><name pos:start="593:5" pos:end="593:6">rc</name> <operator pos:start="593:8" pos:end="593:8">=</operator> <call pos:start="593:10" pos:end="596:32"><name pos:start="593:10" pos:end="593:33">est_server_init_csrattrs</name><argument_list pos:start="593:34" pos:end="596:32">(
        <argument pos:start="594:9" pos:end="594:12"><expr pos:start="594:9" pos:end="594:12"><name pos:start="594:9" pos:end="594:12">ectx</name></expr></argument>,
        <argument pos:start="595:9" pos:end="595:23"><expr pos:start="595:9" pos:end="595:23"><name pos:start="595:9" pos:end="595:23">TEST_ATTR_NOPOP</name></expr></argument>,
        <argument pos:start="596:9" pos:end="596:31"><expr pos:start="596:9" pos:end="596:31"><call pos:start="596:9" pos:end="596:31"><name pos:start="596:9" pos:end="596:14">strlen</name><argument_list pos:start="596:15" pos:end="596:31">(<argument pos:start="596:16" pos:end="596:30"><expr pos:start="596:16" pos:end="596:30"><name pos:start="596:16" pos:end="596:30">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="597:5" pos:end="597:34"><expr pos:start="597:5" pos:end="597:33"><call pos:start="597:5" pos:end="597:33"><name pos:start="597:5" pos:end="597:13">CU_ASSERT</name><argument_list pos:start="597:14" pos:end="597:33">(<argument pos:start="597:15" pos:end="597:32"><expr pos:start="597:15" pos:end="597:32"><name pos:start="597:15" pos:end="597:16">rc</name> <operator pos:start="597:18" pos:end="597:19">==</operator> <name pos:start="597:21" pos:end="597:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="598:5" pos:end="598:59"><expr pos:start="598:5" pos:end="598:58"><name pos:start="598:5" pos:end="598:6">rc</name> <operator pos:start="598:8" pos:end="598:8">=</operator> <call pos:start="598:10" pos:end="598:58"><name pos:start="598:10" pos:end="598:32">est_client_get_csrattrs</name><argument_list pos:start="598:33" pos:end="598:58">(<argument pos:start="598:34" pos:end="598:36"><expr pos:start="598:34" pos:end="598:36"><name pos:start="598:34" pos:end="598:36">ctx</name></expr></argument>, <argument pos:start="598:39" pos:end="598:47"><expr pos:start="598:39" pos:end="598:47"><operator pos:start="598:39" pos:end="598:39">&amp;</operator><name pos:start="598:40" pos:end="598:47">csr_data</name></expr></argument>, <argument pos:start="598:50" pos:end="598:57"><expr pos:start="598:50" pos:end="598:57"><operator pos:start="598:50" pos:end="598:50">&amp;</operator><name pos:start="598:51" pos:end="598:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="599:5" pos:end="599:34"><expr pos:start="599:5" pos:end="599:33"><call pos:start="599:5" pos:end="599:33"><name pos:start="599:5" pos:end="599:13">CU_ASSERT</name><argument_list pos:start="599:14" pos:end="599:33">(<argument pos:start="599:15" pos:end="599:32"><expr pos:start="599:15" pos:end="599:32"><name pos:start="599:15" pos:end="599:16">rc</name> <operator pos:start="599:18" pos:end="599:19">==</operator> <name pos:start="599:21" pos:end="599:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="600:5" pos:end="600:53"><expr pos:start="600:5" pos:end="600:52"><call pos:start="600:5" pos:end="600:52"><name pos:start="600:5" pos:end="600:13">CU_ASSERT</name><argument_list pos:start="600:14" pos:end="600:52">(<argument pos:start="600:15" pos:end="600:51"><expr pos:start="600:15" pos:end="600:51"><name pos:start="600:15" pos:end="600:21">csr_len</name> <operator pos:start="600:23" pos:end="600:24">==</operator> <call pos:start="600:26" pos:end="600:51"><name pos:start="600:26" pos:end="600:31">strlen</name><argument_list pos:start="600:32" pos:end="600:51">(<argument pos:start="600:33" pos:end="600:50"><expr pos:start="600:33" pos:end="600:50"><name pos:start="600:33" pos:end="600:50">TEST_ATTR_NOPOPPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="601:5" pos:end="602:76"><expr pos:start="601:5" pos:end="602:75"><call pos:start="601:5" pos:end="602:75"><name pos:start="601:5" pos:end="601:13">CU_ASSERT</name><argument_list pos:start="601:14" pos:end="602:75">(
        <argument pos:start="602:9" pos:end="602:74"><expr pos:start="602:9" pos:end="602:74"><call pos:start="602:9" pos:end="602:69"><name pos:start="602:9" pos:end="602:15">strncmp</name><argument_list pos:start="602:16" pos:end="602:69">(<argument pos:start="602:17" pos:end="602:34"><expr pos:start="602:17" pos:end="602:34"><name pos:start="602:17" pos:end="602:34">TEST_ATTR_NOPOPPOP</name></expr></argument>, <argument pos:start="602:37" pos:end="602:59"><expr pos:start="602:37" pos:end="602:59"><operator pos:start="602:37" pos:end="602:37">(</operator><specifier pos:start="602:38" pos:end="602:42">const</specifier> <name pos:start="602:44" pos:end="602:47">char</name> <operator pos:start="602:49" pos:end="602:49">*</operator><operator pos:start="602:50" pos:end="602:50">)</operator> <name pos:start="602:52" pos:end="602:59">csr_data</name></expr></argument>, <argument pos:start="602:62" pos:end="602:68"><expr pos:start="602:62" pos:end="602:68"><name pos:start="602:62" pos:end="602:68">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="602:71" pos:end="602:72">==</operator> <literal type="number" pos:start="602:74" pos:end="602:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="604:5" pos:end="604:48">/* Not a real base64 string - should fail */</comment>
    <expr_stmt pos:start="605:5" pos:end="605:59"><expr pos:start="605:5" pos:end="605:58"><name pos:start="605:5" pos:end="605:6">rc</name> <operator pos:start="605:8" pos:end="605:8">=</operator> <call pos:start="605:10" pos:end="605:58"><name pos:start="605:10" pos:end="605:33">est_server_init_csrattrs</name><argument_list pos:start="605:34" pos:end="605:58">(<argument pos:start="605:35" pos:end="605:38"><expr pos:start="605:35" pos:end="605:38"><name pos:start="605:35" pos:end="605:38">ectx</name></expr></argument>, <argument pos:start="605:41" pos:end="605:53"><expr pos:start="605:41" pos:end="605:53"><literal type="string" pos:start="605:41" pos:end="605:53">"US900 test1"</literal></expr></argument>, <argument pos:start="605:56" pos:end="605:57"><expr pos:start="605:56" pos:end="605:57"><literal type="number" pos:start="605:56" pos:end="605:57">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="606:5" pos:end="606:34"><expr pos:start="606:5" pos:end="606:33"><call pos:start="606:5" pos:end="606:33"><name pos:start="606:5" pos:end="606:13">CU_ASSERT</name><argument_list pos:start="606:14" pos:end="606:33">(<argument pos:start="606:15" pos:end="606:32"><expr pos:start="606:15" pos:end="606:32"><name pos:start="606:15" pos:end="606:16">rc</name> <operator pos:start="606:18" pos:end="606:19">!=</operator> <name pos:start="606:21" pos:end="606:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="607:5" pos:end="607:59"><expr pos:start="607:5" pos:end="607:58"><name pos:start="607:5" pos:end="607:6">rc</name> <operator pos:start="607:8" pos:end="607:8">=</operator> <call pos:start="607:10" pos:end="607:58"><name pos:start="607:10" pos:end="607:32">est_client_get_csrattrs</name><argument_list pos:start="607:33" pos:end="607:58">(<argument pos:start="607:34" pos:end="607:36"><expr pos:start="607:34" pos:end="607:36"><name pos:start="607:34" pos:end="607:36">ctx</name></expr></argument>, <argument pos:start="607:39" pos:end="607:47"><expr pos:start="607:39" pos:end="607:47"><operator pos:start="607:39" pos:end="607:39">&amp;</operator><name pos:start="607:40" pos:end="607:47">csr_data</name></expr></argument>, <argument pos:start="607:50" pos:end="607:57"><expr pos:start="607:50" pos:end="607:57"><operator pos:start="607:50" pos:end="607:50">&amp;</operator><name pos:start="607:51" pos:end="607:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="608:5" pos:end="608:34"><expr pos:start="608:5" pos:end="608:33"><call pos:start="608:5" pos:end="608:33"><name pos:start="608:5" pos:end="608:13">CU_ASSERT</name><argument_list pos:start="608:14" pos:end="608:33">(<argument pos:start="608:15" pos:end="608:32"><expr pos:start="608:15" pos:end="608:32"><name pos:start="608:15" pos:end="608:16">rc</name> <operator pos:start="608:18" pos:end="608:19">==</operator> <name pos:start="608:21" pos:end="608:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="609:5" pos:end="609:48"><expr pos:start="609:5" pos:end="609:47"><call pos:start="609:5" pos:end="609:47"><name pos:start="609:5" pos:end="609:13">CU_ASSERT</name><argument_list pos:start="609:14" pos:end="609:47">(<argument pos:start="609:15" pos:end="609:46"><expr pos:start="609:15" pos:end="609:46"><name pos:start="609:15" pos:end="609:21">csr_len</name> <operator pos:start="609:23" pos:end="609:24">==</operator> <call pos:start="609:26" pos:end="609:46"><name pos:start="609:26" pos:end="609:31">strlen</name><argument_list pos:start="609:32" pos:end="609:46">(<argument pos:start="609:33" pos:end="609:45"><expr pos:start="609:33" pos:end="609:45"><name pos:start="609:33" pos:end="609:45">TEST_ATTR_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="610:5" pos:end="610:77"><expr pos:start="610:5" pos:end="610:76"><call pos:start="610:5" pos:end="610:76"><name pos:start="610:5" pos:end="610:13">CU_ASSERT</name><argument_list pos:start="610:14" pos:end="610:76">(<argument pos:start="610:15" pos:end="610:75"><expr pos:start="610:15" pos:end="610:75"><call pos:start="610:15" pos:end="610:70"><name pos:start="610:15" pos:end="610:21">strncmp</name><argument_list pos:start="610:22" pos:end="610:70">(<argument pos:start="610:23" pos:end="610:35"><expr pos:start="610:23" pos:end="610:35"><name pos:start="610:23" pos:end="610:35">TEST_ATTR_POP</name></expr></argument>, <argument pos:start="610:38" pos:end="610:60"><expr pos:start="610:38" pos:end="610:60"><operator pos:start="610:38" pos:end="610:38">(</operator><specifier pos:start="610:39" pos:end="610:43">const</specifier> <name pos:start="610:45" pos:end="610:48">char</name> <operator pos:start="610:50" pos:end="610:50">*</operator><operator pos:start="610:51" pos:end="610:51">)</operator> <name pos:start="610:53" pos:end="610:60">csr_data</name></expr></argument>, <argument pos:start="610:63" pos:end="610:69"><expr pos:start="610:63" pos:end="610:69"><name pos:start="610:63" pos:end="610:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="610:72" pos:end="610:73">==</operator> <literal type="number" pos:start="610:75" pos:end="610:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="612:5" pos:end="612:35">/* Setting the smallest size */</comment>
    <expr_stmt pos:start="613:5" pos:end="613:72"><expr pos:start="613:5" pos:end="613:71"><name pos:start="613:5" pos:end="613:6">rc</name> <operator pos:start="613:8" pos:end="613:8">=</operator> <call pos:start="613:10" pos:end="613:71"><name pos:start="613:10" pos:end="613:33">est_server_init_csrattrs</name><argument_list pos:start="613:34" pos:end="613:71">(<argument pos:start="613:35" pos:end="613:38"><expr pos:start="613:35" pos:end="613:38"><name pos:start="613:35" pos:end="613:38">ectx</name></expr></argument>, <argument pos:start="613:41" pos:end="613:50"><expr pos:start="613:41" pos:end="613:50"><name pos:start="613:41" pos:end="613:50">TEST_ATTR2</name></expr></argument>, <argument pos:start="613:53" pos:end="613:70"><expr pos:start="613:53" pos:end="613:70"><call pos:start="613:53" pos:end="613:70"><name pos:start="613:53" pos:end="613:58">strlen</name><argument_list pos:start="613:59" pos:end="613:70">(<argument pos:start="613:60" pos:end="613:69"><expr pos:start="613:60" pos:end="613:69"><name pos:start="613:60" pos:end="613:69">TEST_ATTR2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="614:5" pos:end="614:34"><expr pos:start="614:5" pos:end="614:33"><call pos:start="614:5" pos:end="614:33"><name pos:start="614:5" pos:end="614:13">CU_ASSERT</name><argument_list pos:start="614:14" pos:end="614:33">(<argument pos:start="614:15" pos:end="614:32"><expr pos:start="614:15" pos:end="614:32"><name pos:start="614:15" pos:end="614:16">rc</name> <operator pos:start="614:18" pos:end="614:19">==</operator> <name pos:start="614:21" pos:end="614:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="615:5" pos:end="615:59"><expr pos:start="615:5" pos:end="615:58"><name pos:start="615:5" pos:end="615:6">rc</name> <operator pos:start="615:8" pos:end="615:8">=</operator> <call pos:start="615:10" pos:end="615:58"><name pos:start="615:10" pos:end="615:32">est_client_get_csrattrs</name><argument_list pos:start="615:33" pos:end="615:58">(<argument pos:start="615:34" pos:end="615:36"><expr pos:start="615:34" pos:end="615:36"><name pos:start="615:34" pos:end="615:36">ctx</name></expr></argument>, <argument pos:start="615:39" pos:end="615:47"><expr pos:start="615:39" pos:end="615:47"><operator pos:start="615:39" pos:end="615:39">&amp;</operator><name pos:start="615:40" pos:end="615:47">csr_data</name></expr></argument>, <argument pos:start="615:50" pos:end="615:57"><expr pos:start="615:50" pos:end="615:57"><operator pos:start="615:50" pos:end="615:50">&amp;</operator><name pos:start="615:51" pos:end="615:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="616:5" pos:end="616:34"><expr pos:start="616:5" pos:end="616:33"><call pos:start="616:5" pos:end="616:33"><name pos:start="616:5" pos:end="616:13">CU_ASSERT</name><argument_list pos:start="616:14" pos:end="616:33">(<argument pos:start="616:15" pos:end="616:32"><expr pos:start="616:15" pos:end="616:32"><name pos:start="616:15" pos:end="616:16">rc</name> <operator pos:start="616:18" pos:end="616:19">==</operator> <name pos:start="616:21" pos:end="616:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="617:5" pos:end="617:49"><expr pos:start="617:5" pos:end="617:48"><call pos:start="617:5" pos:end="617:48"><name pos:start="617:5" pos:end="617:13">CU_ASSERT</name><argument_list pos:start="617:14" pos:end="617:48">(<argument pos:start="617:15" pos:end="617:47"><expr pos:start="617:15" pos:end="617:47"><name pos:start="617:15" pos:end="617:21">csr_len</name> <operator pos:start="617:23" pos:end="617:24">==</operator> <call pos:start="617:26" pos:end="617:47"><name pos:start="617:26" pos:end="617:31">strlen</name><argument_list pos:start="617:32" pos:end="617:47">(<argument pos:start="617:33" pos:end="617:46"><expr pos:start="617:33" pos:end="617:46"><name pos:start="617:33" pos:end="617:46">TEST_ATTR2_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="618:5" pos:end="618:78"><expr pos:start="618:5" pos:end="618:77"><call pos:start="618:5" pos:end="618:77"><name pos:start="618:5" pos:end="618:13">CU_ASSERT</name><argument_list pos:start="618:14" pos:end="618:77">(<argument pos:start="618:15" pos:end="618:76"><expr pos:start="618:15" pos:end="618:76"><call pos:start="618:15" pos:end="618:71"><name pos:start="618:15" pos:end="618:21">strncmp</name><argument_list pos:start="618:22" pos:end="618:71">(<argument pos:start="618:23" pos:end="618:36"><expr pos:start="618:23" pos:end="618:36"><name pos:start="618:23" pos:end="618:36">TEST_ATTR2_POP</name></expr></argument>, <argument pos:start="618:39" pos:end="618:61"><expr pos:start="618:39" pos:end="618:61"><operator pos:start="618:39" pos:end="618:39">(</operator><specifier pos:start="618:40" pos:end="618:44">const</specifier> <name pos:start="618:46" pos:end="618:49">char</name> <operator pos:start="618:51" pos:end="618:51">*</operator><operator pos:start="618:52" pos:end="618:52">)</operator> <name pos:start="618:54" pos:end="618:61">csr_data</name></expr></argument>, <argument pos:start="618:64" pos:end="618:70"><expr pos:start="618:64" pos:end="618:70"><name pos:start="618:64" pos:end="618:70">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="618:73" pos:end="618:74">==</operator> <literal type="number" pos:start="618:76" pos:end="618:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="620:5" pos:end="620:30">/* Setting the size 116 */</comment>
    <expr_stmt pos:start="621:5" pos:end="621:80"><expr pos:start="621:5" pos:end="621:79"><name pos:start="621:5" pos:end="621:6">rc</name> <operator pos:start="621:8" pos:end="621:8">=</operator> <call pos:start="621:10" pos:end="621:79"><name pos:start="621:10" pos:end="621:33">est_server_init_csrattrs</name><argument_list pos:start="621:34" pos:end="621:79">(<argument pos:start="621:35" pos:end="621:38"><expr pos:start="621:35" pos:end="621:38"><name pos:start="621:35" pos:end="621:38">ectx</name></expr></argument>, <argument pos:start="621:41" pos:end="621:54"><expr pos:start="621:41" pos:end="621:54"><name pos:start="621:41" pos:end="621:54">TEST_ATTR6_116</name></expr></argument>, <argument pos:start="621:57" pos:end="621:78"><expr pos:start="621:57" pos:end="621:78"><call pos:start="621:57" pos:end="621:78"><name pos:start="621:57" pos:end="621:62">strlen</name><argument_list pos:start="621:63" pos:end="621:78">(<argument pos:start="621:64" pos:end="621:77"><expr pos:start="621:64" pos:end="621:77"><name pos:start="621:64" pos:end="621:77">TEST_ATTR6_116</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="622:5" pos:end="622:34"><expr pos:start="622:5" pos:end="622:33"><call pos:start="622:5" pos:end="622:33"><name pos:start="622:5" pos:end="622:13">CU_ASSERT</name><argument_list pos:start="622:14" pos:end="622:33">(<argument pos:start="622:15" pos:end="622:32"><expr pos:start="622:15" pos:end="622:32"><name pos:start="622:15" pos:end="622:16">rc</name> <operator pos:start="622:18" pos:end="622:19">==</operator> <name pos:start="622:21" pos:end="622:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="623:5" pos:end="623:59"><expr pos:start="623:5" pos:end="623:58"><name pos:start="623:5" pos:end="623:6">rc</name> <operator pos:start="623:8" pos:end="623:8">=</operator> <call pos:start="623:10" pos:end="623:58"><name pos:start="623:10" pos:end="623:32">est_client_get_csrattrs</name><argument_list pos:start="623:33" pos:end="623:58">(<argument pos:start="623:34" pos:end="623:36"><expr pos:start="623:34" pos:end="623:36"><name pos:start="623:34" pos:end="623:36">ctx</name></expr></argument>, <argument pos:start="623:39" pos:end="623:47"><expr pos:start="623:39" pos:end="623:47"><operator pos:start="623:39" pos:end="623:39">&amp;</operator><name pos:start="623:40" pos:end="623:47">csr_data</name></expr></argument>, <argument pos:start="623:50" pos:end="623:57"><expr pos:start="623:50" pos:end="623:57"><operator pos:start="623:50" pos:end="623:50">&amp;</operator><name pos:start="623:51" pos:end="623:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="624:5" pos:end="624:34"><expr pos:start="624:5" pos:end="624:33"><call pos:start="624:5" pos:end="624:33"><name pos:start="624:5" pos:end="624:13">CU_ASSERT</name><argument_list pos:start="624:14" pos:end="624:33">(<argument pos:start="624:15" pos:end="624:32"><expr pos:start="624:15" pos:end="624:32"><name pos:start="624:15" pos:end="624:16">rc</name> <operator pos:start="624:18" pos:end="624:19">==</operator> <name pos:start="624:21" pos:end="624:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="626:5" pos:end="626:30">/* Setting the size 244 */</comment>
    <expr_stmt pos:start="627:5" pos:end="627:78"><expr pos:start="627:5" pos:end="627:77"><name pos:start="627:5" pos:end="627:6">rc</name> <operator pos:start="627:8" pos:end="627:8">=</operator> <call pos:start="627:10" pos:end="627:77"><name pos:start="627:10" pos:end="627:33">est_server_init_csrattrs</name><argument_list pos:start="627:34" pos:end="627:77">(<argument pos:start="627:35" pos:end="627:38"><expr pos:start="627:35" pos:end="627:38"><name pos:start="627:35" pos:end="627:38">ectx</name></expr></argument>, <argument pos:start="627:41" pos:end="627:53"><expr pos:start="627:41" pos:end="627:53"><name pos:start="627:41" pos:end="627:53">TEST_ATTR_244</name></expr></argument>, <argument pos:start="627:56" pos:end="627:76"><expr pos:start="627:56" pos:end="627:76"><call pos:start="627:56" pos:end="627:76"><name pos:start="627:56" pos:end="627:61">strlen</name><argument_list pos:start="627:62" pos:end="627:76">(<argument pos:start="627:63" pos:end="627:75"><expr pos:start="627:63" pos:end="627:75"><name pos:start="627:63" pos:end="627:75">TEST_ATTR_244</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="628:5" pos:end="628:34"><expr pos:start="628:5" pos:end="628:33"><call pos:start="628:5" pos:end="628:33"><name pos:start="628:5" pos:end="628:13">CU_ASSERT</name><argument_list pos:start="628:14" pos:end="628:33">(<argument pos:start="628:15" pos:end="628:32"><expr pos:start="628:15" pos:end="628:32"><name pos:start="628:15" pos:end="628:16">rc</name> <operator pos:start="628:18" pos:end="628:19">==</operator> <name pos:start="628:21" pos:end="628:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="629:5" pos:end="629:59"><expr pos:start="629:5" pos:end="629:58"><name pos:start="629:5" pos:end="629:6">rc</name> <operator pos:start="629:8" pos:end="629:8">=</operator> <call pos:start="629:10" pos:end="629:58"><name pos:start="629:10" pos:end="629:32">est_client_get_csrattrs</name><argument_list pos:start="629:33" pos:end="629:58">(<argument pos:start="629:34" pos:end="629:36"><expr pos:start="629:34" pos:end="629:36"><name pos:start="629:34" pos:end="629:36">ctx</name></expr></argument>, <argument pos:start="629:39" pos:end="629:47"><expr pos:start="629:39" pos:end="629:47"><operator pos:start="629:39" pos:end="629:39">&amp;</operator><name pos:start="629:40" pos:end="629:47">csr_data</name></expr></argument>, <argument pos:start="629:50" pos:end="629:57"><expr pos:start="629:50" pos:end="629:57"><operator pos:start="629:50" pos:end="629:50">&amp;</operator><name pos:start="629:51" pos:end="629:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="630:5" pos:end="630:34"><expr pos:start="630:5" pos:end="630:33"><call pos:start="630:5" pos:end="630:33"><name pos:start="630:5" pos:end="630:13">CU_ASSERT</name><argument_list pos:start="630:14" pos:end="630:33">(<argument pos:start="630:15" pos:end="630:32"><expr pos:start="630:15" pos:end="630:32"><name pos:start="630:15" pos:end="630:16">rc</name> <operator pos:start="630:18" pos:end="630:19">==</operator> <name pos:start="630:21" pos:end="630:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="632:5" pos:end="632:30">/* Setting the size 245 */</comment>
    <expr_stmt pos:start="633:5" pos:end="633:78"><expr pos:start="633:5" pos:end="633:77"><name pos:start="633:5" pos:end="633:6">rc</name> <operator pos:start="633:8" pos:end="633:8">=</operator> <call pos:start="633:10" pos:end="633:77"><name pos:start="633:10" pos:end="633:33">est_server_init_csrattrs</name><argument_list pos:start="633:34" pos:end="633:77">(<argument pos:start="633:35" pos:end="633:38"><expr pos:start="633:35" pos:end="633:38"><name pos:start="633:35" pos:end="633:38">ectx</name></expr></argument>, <argument pos:start="633:41" pos:end="633:53"><expr pos:start="633:41" pos:end="633:53"><name pos:start="633:41" pos:end="633:53">TEST_ATTR_245</name></expr></argument>, <argument pos:start="633:56" pos:end="633:76"><expr pos:start="633:56" pos:end="633:76"><call pos:start="633:56" pos:end="633:76"><name pos:start="633:56" pos:end="633:61">strlen</name><argument_list pos:start="633:62" pos:end="633:76">(<argument pos:start="633:63" pos:end="633:75"><expr pos:start="633:63" pos:end="633:75"><name pos:start="633:63" pos:end="633:75">TEST_ATTR_245</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="634:5" pos:end="634:34"><expr pos:start="634:5" pos:end="634:33"><call pos:start="634:5" pos:end="634:33"><name pos:start="634:5" pos:end="634:13">CU_ASSERT</name><argument_list pos:start="634:14" pos:end="634:33">(<argument pos:start="634:15" pos:end="634:32"><expr pos:start="634:15" pos:end="634:32"><name pos:start="634:15" pos:end="634:16">rc</name> <operator pos:start="634:18" pos:end="634:19">==</operator> <name pos:start="634:21" pos:end="634:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="635:5" pos:end="635:59"><expr pos:start="635:5" pos:end="635:58"><name pos:start="635:5" pos:end="635:6">rc</name> <operator pos:start="635:8" pos:end="635:8">=</operator> <call pos:start="635:10" pos:end="635:58"><name pos:start="635:10" pos:end="635:32">est_client_get_csrattrs</name><argument_list pos:start="635:33" pos:end="635:58">(<argument pos:start="635:34" pos:end="635:36"><expr pos:start="635:34" pos:end="635:36"><name pos:start="635:34" pos:end="635:36">ctx</name></expr></argument>, <argument pos:start="635:39" pos:end="635:47"><expr pos:start="635:39" pos:end="635:47"><operator pos:start="635:39" pos:end="635:39">&amp;</operator><name pos:start="635:40" pos:end="635:47">csr_data</name></expr></argument>, <argument pos:start="635:50" pos:end="635:57"><expr pos:start="635:50" pos:end="635:57"><operator pos:start="635:50" pos:end="635:50">&amp;</operator><name pos:start="635:51" pos:end="635:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="636:5" pos:end="636:34"><expr pos:start="636:5" pos:end="636:33"><call pos:start="636:5" pos:end="636:33"><name pos:start="636:5" pos:end="636:13">CU_ASSERT</name><argument_list pos:start="636:14" pos:end="636:33">(<argument pos:start="636:15" pos:end="636:32"><expr pos:start="636:15" pos:end="636:32"><name pos:start="636:15" pos:end="636:16">rc</name> <operator pos:start="636:18" pos:end="636:19">==</operator> <name pos:start="636:21" pos:end="636:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="638:5" pos:end="638:30">/* Setting the size 250 */</comment>
    <expr_stmt pos:start="639:5" pos:end="639:78"><expr pos:start="639:5" pos:end="639:77"><name pos:start="639:5" pos:end="639:6">rc</name> <operator pos:start="639:8" pos:end="639:8">=</operator> <call pos:start="639:10" pos:end="639:77"><name pos:start="639:10" pos:end="639:33">est_server_init_csrattrs</name><argument_list pos:start="639:34" pos:end="639:77">(<argument pos:start="639:35" pos:end="639:38"><expr pos:start="639:35" pos:end="639:38"><name pos:start="639:35" pos:end="639:38">ectx</name></expr></argument>, <argument pos:start="639:41" pos:end="639:53"><expr pos:start="639:41" pos:end="639:53"><name pos:start="639:41" pos:end="639:53">TEST_ATTR_250</name></expr></argument>, <argument pos:start="639:56" pos:end="639:76"><expr pos:start="639:56" pos:end="639:76"><call pos:start="639:56" pos:end="639:76"><name pos:start="639:56" pos:end="639:61">strlen</name><argument_list pos:start="639:62" pos:end="639:76">(<argument pos:start="639:63" pos:end="639:75"><expr pos:start="639:63" pos:end="639:75"><name pos:start="639:63" pos:end="639:75">TEST_ATTR_250</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="640:5" pos:end="640:34"><expr pos:start="640:5" pos:end="640:33"><call pos:start="640:5" pos:end="640:33"><name pos:start="640:5" pos:end="640:13">CU_ASSERT</name><argument_list pos:start="640:14" pos:end="640:33">(<argument pos:start="640:15" pos:end="640:32"><expr pos:start="640:15" pos:end="640:32"><name pos:start="640:15" pos:end="640:16">rc</name> <operator pos:start="640:18" pos:end="640:19">==</operator> <name pos:start="640:21" pos:end="640:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="641:5" pos:end="641:59"><expr pos:start="641:5" pos:end="641:58"><name pos:start="641:5" pos:end="641:6">rc</name> <operator pos:start="641:8" pos:end="641:8">=</operator> <call pos:start="641:10" pos:end="641:58"><name pos:start="641:10" pos:end="641:32">est_client_get_csrattrs</name><argument_list pos:start="641:33" pos:end="641:58">(<argument pos:start="641:34" pos:end="641:36"><expr pos:start="641:34" pos:end="641:36"><name pos:start="641:34" pos:end="641:36">ctx</name></expr></argument>, <argument pos:start="641:39" pos:end="641:47"><expr pos:start="641:39" pos:end="641:47"><operator pos:start="641:39" pos:end="641:39">&amp;</operator><name pos:start="641:40" pos:end="641:47">csr_data</name></expr></argument>, <argument pos:start="641:50" pos:end="641:57"><expr pos:start="641:50" pos:end="641:57"><operator pos:start="641:50" pos:end="641:50">&amp;</operator><name pos:start="641:51" pos:end="641:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="642:5" pos:end="642:34"><expr pos:start="642:5" pos:end="642:33"><call pos:start="642:5" pos:end="642:33"><name pos:start="642:5" pos:end="642:13">CU_ASSERT</name><argument_list pos:start="642:14" pos:end="642:33">(<argument pos:start="642:15" pos:end="642:32"><expr pos:start="642:15" pos:end="642:32"><name pos:start="642:15" pos:end="642:16">rc</name> <operator pos:start="642:18" pos:end="642:19">==</operator> <name pos:start="642:21" pos:end="642:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="643:5" pos:end="643:51"><expr pos:start="643:5" pos:end="643:50"><call pos:start="643:5" pos:end="643:50"><name pos:start="643:5" pos:end="643:13">CU_ASSERT</name><argument_list pos:start="643:14" pos:end="643:50">(<argument pos:start="643:15" pos:end="643:49"><expr pos:start="643:15" pos:end="643:49"><name pos:start="643:15" pos:end="643:21">csr_len</name> <operator pos:start="643:23" pos:end="643:24">==</operator> <call pos:start="643:26" pos:end="643:49"><name pos:start="643:26" pos:end="643:31">strlen</name><argument_list pos:start="643:32" pos:end="643:49">(<argument pos:start="643:33" pos:end="643:48"><expr pos:start="643:33" pos:end="643:48"><name pos:start="643:33" pos:end="643:48">TEST_ATTR_250POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="644:5" pos:end="644:80"><expr pos:start="644:5" pos:end="644:79"><call pos:start="644:5" pos:end="644:79"><name pos:start="644:5" pos:end="644:13">CU_ASSERT</name><argument_list pos:start="644:14" pos:end="644:79">(<argument pos:start="644:15" pos:end="644:78"><expr pos:start="644:15" pos:end="644:78"><call pos:start="644:15" pos:end="644:73"><name pos:start="644:15" pos:end="644:21">strncmp</name><argument_list pos:start="644:22" pos:end="644:73">(<argument pos:start="644:23" pos:end="644:38"><expr pos:start="644:23" pos:end="644:38"><name pos:start="644:23" pos:end="644:38">TEST_ATTR_250POP</name></expr></argument>, <argument pos:start="644:41" pos:end="644:63"><expr pos:start="644:41" pos:end="644:63"><operator pos:start="644:41" pos:end="644:41">(</operator><specifier pos:start="644:42" pos:end="644:46">const</specifier> <name pos:start="644:48" pos:end="644:51">char</name> <operator pos:start="644:53" pos:end="644:53">*</operator><operator pos:start="644:54" pos:end="644:54">)</operator> <name pos:start="644:56" pos:end="644:63">csr_data</name></expr></argument>, <argument pos:start="644:66" pos:end="644:72"><expr pos:start="644:66" pos:end="644:72"><name pos:start="644:66" pos:end="644:72">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="644:75" pos:end="644:76">==</operator> <literal type="number" pos:start="644:78" pos:end="644:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="646:5" pos:end="649:5"><if pos:start="646:5" pos:end="649:5">if <condition pos:start="646:8" pos:end="646:63">(<expr pos:start="646:9" pos:end="646:62"><call pos:start="646:9" pos:end="646:62"><name pos:start="646:9" pos:end="646:22">est_set_csr_cb</name><argument_list pos:start="646:23" pos:end="646:62">(<argument pos:start="646:24" pos:end="646:27"><expr pos:start="646:24" pos:end="646:27"><name pos:start="646:24" pos:end="646:27">ectx</name></expr></argument>, <argument pos:start="646:30" pos:end="646:61"><expr pos:start="646:30" pos:end="646:61"><operator pos:start="646:30" pos:end="646:30">&amp;</operator><name pos:start="646:31" pos:end="646:61">handle_correct_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="646:65" pos:end="649:5">{<block_content pos:start="647:9" pos:end="648:16">
        <expr_stmt pos:start="647:9" pos:end="647:78"><expr pos:start="647:9" pos:end="647:77"><call pos:start="647:9" pos:end="647:77"><name pos:start="647:9" pos:end="647:14">printf</name><argument_list pos:start="647:15" pos:end="647:77">(<argument pos:start="647:16" pos:end="647:76"><expr pos:start="647:16" pos:end="647:76"><literal type="string" pos:start="647:16" pos:end="647:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="648:9" pos:end="648:16"><expr pos:start="648:9" pos:end="648:15"><call pos:start="648:9" pos:end="648:15"><name pos:start="648:9" pos:end="648:12">exit</name><argument_list pos:start="648:13" pos:end="648:15">(<argument pos:start="648:14" pos:end="648:14"><expr pos:start="648:14" pos:end="648:14"><literal type="number" pos:start="648:14" pos:end="648:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="651:5" pos:end="651:59"><expr pos:start="651:5" pos:end="651:58"><name pos:start="651:5" pos:end="651:6">rc</name> <operator pos:start="651:8" pos:end="651:8">=</operator> <call pos:start="651:10" pos:end="651:58"><name pos:start="651:10" pos:end="651:32">est_client_get_csrattrs</name><argument_list pos:start="651:33" pos:end="651:58">(<argument pos:start="651:34" pos:end="651:36"><expr pos:start="651:34" pos:end="651:36"><name pos:start="651:34" pos:end="651:36">ctx</name></expr></argument>, <argument pos:start="651:39" pos:end="651:47"><expr pos:start="651:39" pos:end="651:47"><operator pos:start="651:39" pos:end="651:39">&amp;</operator><name pos:start="651:40" pos:end="651:47">csr_data</name></expr></argument>, <argument pos:start="651:50" pos:end="651:57"><expr pos:start="651:50" pos:end="651:57"><operator pos:start="651:50" pos:end="651:50">&amp;</operator><name pos:start="651:51" pos:end="651:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="652:5" pos:end="652:34"><expr pos:start="652:5" pos:end="652:33"><call pos:start="652:5" pos:end="652:33"><name pos:start="652:5" pos:end="652:13">CU_ASSERT</name><argument_list pos:start="652:14" pos:end="652:33">(<argument pos:start="652:15" pos:end="652:32"><expr pos:start="652:15" pos:end="652:32"><name pos:start="652:15" pos:end="652:16">rc</name> <operator pos:start="652:18" pos:end="652:19">==</operator> <name pos:start="652:21" pos:end="652:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="653:5" pos:end="653:45"><expr pos:start="653:5" pos:end="653:44"><call pos:start="653:5" pos:end="653:44"><name pos:start="653:5" pos:end="653:13">CU_ASSERT</name><argument_list pos:start="653:14" pos:end="653:44">(<argument pos:start="653:15" pos:end="653:43"><expr pos:start="653:15" pos:end="653:43"><name pos:start="653:15" pos:end="653:21">csr_len</name> <operator pos:start="653:23" pos:end="653:24">==</operator> <call pos:start="653:26" pos:end="653:43"><name pos:start="653:26" pos:end="653:31">strlen</name><argument_list pos:start="653:32" pos:end="653:43">(<argument pos:start="653:33" pos:end="653:42"><expr pos:start="653:33" pos:end="653:42"><name pos:start="653:33" pos:end="653:42">TEST_ATTR1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="654:5" pos:end="654:74"><expr pos:start="654:5" pos:end="654:73"><call pos:start="654:5" pos:end="654:73"><name pos:start="654:5" pos:end="654:13">CU_ASSERT</name><argument_list pos:start="654:14" pos:end="654:73">(<argument pos:start="654:15" pos:end="654:72"><expr pos:start="654:15" pos:end="654:72"><call pos:start="654:15" pos:end="654:67"><name pos:start="654:15" pos:end="654:21">strncmp</name><argument_list pos:start="654:22" pos:end="654:67">(<argument pos:start="654:23" pos:end="654:32"><expr pos:start="654:23" pos:end="654:32"><name pos:start="654:23" pos:end="654:32">TEST_ATTR1</name></expr></argument>, <argument pos:start="654:35" pos:end="654:57"><expr pos:start="654:35" pos:end="654:57"><operator pos:start="654:35" pos:end="654:35">(</operator><specifier pos:start="654:36" pos:end="654:40">const</specifier> <name pos:start="654:42" pos:end="654:45">char</name> <operator pos:start="654:47" pos:end="654:47">*</operator><operator pos:start="654:48" pos:end="654:48">)</operator> <name pos:start="654:50" pos:end="654:57">csr_data</name></expr></argument>, <argument pos:start="654:60" pos:end="654:66"><expr pos:start="654:60" pos:end="654:66"><name pos:start="654:60" pos:end="654:66">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="654:69" pos:end="654:70">==</operator> <literal type="number" pos:start="654:72" pos:end="654:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="656:5" pos:end="659:5"><if pos:start="656:5" pos:end="659:5">if <condition pos:start="656:8" pos:end="656:61">(<expr pos:start="656:9" pos:end="656:60"><call pos:start="656:9" pos:end="656:60"><name pos:start="656:9" pos:end="656:22">est_set_csr_cb</name><argument_list pos:start="656:23" pos:end="656:60">(<argument pos:start="656:24" pos:end="656:27"><expr pos:start="656:24" pos:end="656:27"><name pos:start="656:24" pos:end="656:27">ectx</name></expr></argument>, <argument pos:start="656:30" pos:end="656:59"><expr pos:start="656:30" pos:end="656:59"><operator pos:start="656:30" pos:end="656:30">&amp;</operator><name pos:start="656:31" pos:end="656:59">handle_nopop_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="656:63" pos:end="659:5">{<block_content pos:start="657:9" pos:end="658:16">
        <expr_stmt pos:start="657:9" pos:end="657:78"><expr pos:start="657:9" pos:end="657:77"><call pos:start="657:9" pos:end="657:77"><name pos:start="657:9" pos:end="657:14">printf</name><argument_list pos:start="657:15" pos:end="657:77">(<argument pos:start="657:16" pos:end="657:76"><expr pos:start="657:16" pos:end="657:76"><literal type="string" pos:start="657:16" pos:end="657:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="658:9" pos:end="658:16"><expr pos:start="658:9" pos:end="658:15"><call pos:start="658:9" pos:end="658:15"><name pos:start="658:9" pos:end="658:12">exit</name><argument_list pos:start="658:13" pos:end="658:15">(<argument pos:start="658:14" pos:end="658:14"><expr pos:start="658:14" pos:end="658:14"><literal type="number" pos:start="658:14" pos:end="658:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="661:5" pos:end="661:59"><expr pos:start="661:5" pos:end="661:58"><name pos:start="661:5" pos:end="661:6">rc</name> <operator pos:start="661:8" pos:end="661:8">=</operator> <call pos:start="661:10" pos:end="661:58"><name pos:start="661:10" pos:end="661:32">est_client_get_csrattrs</name><argument_list pos:start="661:33" pos:end="661:58">(<argument pos:start="661:34" pos:end="661:36"><expr pos:start="661:34" pos:end="661:36"><name pos:start="661:34" pos:end="661:36">ctx</name></expr></argument>, <argument pos:start="661:39" pos:end="661:47"><expr pos:start="661:39" pos:end="661:47"><operator pos:start="661:39" pos:end="661:39">&amp;</operator><name pos:start="661:40" pos:end="661:47">csr_data</name></expr></argument>, <argument pos:start="661:50" pos:end="661:57"><expr pos:start="661:50" pos:end="661:57"><operator pos:start="661:50" pos:end="661:50">&amp;</operator><name pos:start="661:51" pos:end="661:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="662:5" pos:end="662:34"><expr pos:start="662:5" pos:end="662:33"><call pos:start="662:5" pos:end="662:33"><name pos:start="662:5" pos:end="662:13">CU_ASSERT</name><argument_list pos:start="662:14" pos:end="662:33">(<argument pos:start="662:15" pos:end="662:32"><expr pos:start="662:15" pos:end="662:32"><name pos:start="662:15" pos:end="662:16">rc</name> <operator pos:start="662:18" pos:end="662:19">==</operator> <name pos:start="662:21" pos:end="662:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="663:5" pos:end="663:53"><expr pos:start="663:5" pos:end="663:52"><call pos:start="663:5" pos:end="663:52"><name pos:start="663:5" pos:end="663:13">CU_ASSERT</name><argument_list pos:start="663:14" pos:end="663:52">(<argument pos:start="663:15" pos:end="663:51"><expr pos:start="663:15" pos:end="663:51"><name pos:start="663:15" pos:end="663:21">csr_len</name> <operator pos:start="663:23" pos:end="663:24">==</operator> <call pos:start="663:26" pos:end="663:51"><name pos:start="663:26" pos:end="663:31">strlen</name><argument_list pos:start="663:32" pos:end="663:51">(<argument pos:start="663:33" pos:end="663:50"><expr pos:start="663:33" pos:end="663:50"><name pos:start="663:33" pos:end="663:50">TEST_ATTR_NOPOPPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="664:5" pos:end="665:76"><expr pos:start="664:5" pos:end="665:75"><call pos:start="664:5" pos:end="665:75"><name pos:start="664:5" pos:end="664:13">CU_ASSERT</name><argument_list pos:start="664:14" pos:end="665:75">(
        <argument pos:start="665:9" pos:end="665:74"><expr pos:start="665:9" pos:end="665:74"><call pos:start="665:9" pos:end="665:69"><name pos:start="665:9" pos:end="665:15">strncmp</name><argument_list pos:start="665:16" pos:end="665:69">(<argument pos:start="665:17" pos:end="665:34"><expr pos:start="665:17" pos:end="665:34"><name pos:start="665:17" pos:end="665:34">TEST_ATTR_NOPOPPOP</name></expr></argument>, <argument pos:start="665:37" pos:end="665:59"><expr pos:start="665:37" pos:end="665:59"><operator pos:start="665:37" pos:end="665:37">(</operator><specifier pos:start="665:38" pos:end="665:42">const</specifier> <name pos:start="665:44" pos:end="665:47">char</name> <operator pos:start="665:49" pos:end="665:49">*</operator><operator pos:start="665:50" pos:end="665:50">)</operator> <name pos:start="665:52" pos:end="665:59">csr_data</name></expr></argument>, <argument pos:start="665:62" pos:end="665:68"><expr pos:start="665:62" pos:end="665:68"><name pos:start="665:62" pos:end="665:68">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="665:71" pos:end="665:72">==</operator> <literal type="number" pos:start="665:74" pos:end="665:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="667:5" pos:end="670:5"><if pos:start="667:5" pos:end="670:5">if <condition pos:start="667:8" pos:end="667:61">(<expr pos:start="667:9" pos:end="667:60"><call pos:start="667:9" pos:end="667:60"><name pos:start="667:9" pos:end="667:22">est_set_csr_cb</name><argument_list pos:start="667:23" pos:end="667:60">(<argument pos:start="667:24" pos:end="667:27"><expr pos:start="667:24" pos:end="667:27"><name pos:start="667:24" pos:end="667:27">ectx</name></expr></argument>, <argument pos:start="667:30" pos:end="667:59"><expr pos:start="667:30" pos:end="667:59"><operator pos:start="667:30" pos:end="667:30">&amp;</operator><name pos:start="667:31" pos:end="667:59">handle_empty_csrattrs_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="667:63" pos:end="670:5">{<block_content pos:start="668:9" pos:end="669:16">
        <expr_stmt pos:start="668:9" pos:end="668:78"><expr pos:start="668:9" pos:end="668:77"><call pos:start="668:9" pos:end="668:77"><name pos:start="668:9" pos:end="668:14">printf</name><argument_list pos:start="668:15" pos:end="668:77">(<argument pos:start="668:16" pos:end="668:76"><expr pos:start="668:16" pos:end="668:76"><literal type="string" pos:start="668:16" pos:end="668:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="669:9" pos:end="669:16"><expr pos:start="669:9" pos:end="669:15"><call pos:start="669:9" pos:end="669:15"><name pos:start="669:9" pos:end="669:12">exit</name><argument_list pos:start="669:13" pos:end="669:15">(<argument pos:start="669:14" pos:end="669:14"><expr pos:start="669:14" pos:end="669:14"><literal type="number" pos:start="669:14" pos:end="669:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="672:5" pos:end="672:59"><expr pos:start="672:5" pos:end="672:58"><name pos:start="672:5" pos:end="672:6">rc</name> <operator pos:start="672:8" pos:end="672:8">=</operator> <call pos:start="672:10" pos:end="672:58"><name pos:start="672:10" pos:end="672:32">est_client_get_csrattrs</name><argument_list pos:start="672:33" pos:end="672:58">(<argument pos:start="672:34" pos:end="672:36"><expr pos:start="672:34" pos:end="672:36"><name pos:start="672:34" pos:end="672:36">ctx</name></expr></argument>, <argument pos:start="672:39" pos:end="672:47"><expr pos:start="672:39" pos:end="672:47"><operator pos:start="672:39" pos:end="672:39">&amp;</operator><name pos:start="672:40" pos:end="672:47">csr_data</name></expr></argument>, <argument pos:start="672:50" pos:end="672:57"><expr pos:start="672:50" pos:end="672:57"><operator pos:start="672:50" pos:end="672:50">&amp;</operator><name pos:start="672:51" pos:end="672:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="673:5" pos:end="673:34"><expr pos:start="673:5" pos:end="673:33"><call pos:start="673:5" pos:end="673:33"><name pos:start="673:5" pos:end="673:13">CU_ASSERT</name><argument_list pos:start="673:14" pos:end="673:33">(<argument pos:start="673:15" pos:end="673:32"><expr pos:start="673:15" pos:end="673:32"><name pos:start="673:15" pos:end="673:16">rc</name> <operator pos:start="673:18" pos:end="673:19">==</operator> <name pos:start="673:21" pos:end="673:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="674:5" pos:end="674:49"><expr pos:start="674:5" pos:end="674:48"><call pos:start="674:5" pos:end="674:48"><name pos:start="674:5" pos:end="674:13">CU_ASSERT</name><argument_list pos:start="674:14" pos:end="674:48">(<argument pos:start="674:15" pos:end="674:47"><expr pos:start="674:15" pos:end="674:47"><name pos:start="674:15" pos:end="674:21">csr_len</name> <operator pos:start="674:23" pos:end="674:24">==</operator> <call pos:start="674:26" pos:end="674:47"><name pos:start="674:26" pos:end="674:31">strlen</name><argument_list pos:start="674:32" pos:end="674:47">(<argument pos:start="674:33" pos:end="674:46"><expr pos:start="674:33" pos:end="674:46"><name pos:start="674:33" pos:end="674:46">TEST_ATTR2_POP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="675:5" pos:end="675:78"><expr pos:start="675:5" pos:end="675:77"><call pos:start="675:5" pos:end="675:77"><name pos:start="675:5" pos:end="675:13">CU_ASSERT</name><argument_list pos:start="675:14" pos:end="675:77">(<argument pos:start="675:15" pos:end="675:76"><expr pos:start="675:15" pos:end="675:76"><call pos:start="675:15" pos:end="675:71"><name pos:start="675:15" pos:end="675:21">strncmp</name><argument_list pos:start="675:22" pos:end="675:71">(<argument pos:start="675:23" pos:end="675:36"><expr pos:start="675:23" pos:end="675:36"><name pos:start="675:23" pos:end="675:36">TEST_ATTR2_POP</name></expr></argument>, <argument pos:start="675:39" pos:end="675:61"><expr pos:start="675:39" pos:end="675:61"><operator pos:start="675:39" pos:end="675:39">(</operator><specifier pos:start="675:40" pos:end="675:44">const</specifier> <name pos:start="675:46" pos:end="675:49">char</name> <operator pos:start="675:51" pos:end="675:51">*</operator><operator pos:start="675:52" pos:end="675:52">)</operator> <name pos:start="675:54" pos:end="675:61">csr_data</name></expr></argument>, <argument pos:start="675:64" pos:end="675:70"><expr pos:start="675:64" pos:end="675:70"><name pos:start="675:64" pos:end="675:70">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="675:73" pos:end="675:74">==</operator> <literal type="number" pos:start="675:76" pos:end="675:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="677:5" pos:end="677:21">/* disable PoP */</comment>
    <expr_stmt pos:start="678:5" pos:end="678:21"><expr pos:start="678:5" pos:end="678:20"><call pos:start="678:5" pos:end="678:20"><name pos:start="678:5" pos:end="678:18">st_disable_pop</name><argument_list pos:start="678:19" pos:end="678:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="680:5" pos:end="680:24">/* clear callback */</comment>
    <if_stmt pos:start="681:5" pos:end="684:5"><if pos:start="681:5" pos:end="684:5">if <condition pos:start="681:8" pos:end="681:35">(<expr pos:start="681:9" pos:end="681:34"><call pos:start="681:9" pos:end="681:34"><name pos:start="681:9" pos:end="681:22">est_set_csr_cb</name><argument_list pos:start="681:23" pos:end="681:34">(<argument pos:start="681:24" pos:end="681:27"><expr pos:start="681:24" pos:end="681:27"><name pos:start="681:24" pos:end="681:27">ectx</name></expr></argument>, <argument pos:start="681:30" pos:end="681:33"><expr pos:start="681:30" pos:end="681:33"><name pos:start="681:30" pos:end="681:33">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="681:37" pos:end="684:5">{<block_content pos:start="682:9" pos:end="683:16">
        <expr_stmt pos:start="682:9" pos:end="682:78"><expr pos:start="682:9" pos:end="682:77"><call pos:start="682:9" pos:end="682:77"><name pos:start="682:9" pos:end="682:14">printf</name><argument_list pos:start="682:15" pos:end="682:77">(<argument pos:start="682:16" pos:end="682:76"><expr pos:start="682:16" pos:end="682:76"><literal type="string" pos:start="682:16" pos:end="682:76">"\nUnable to set EST CSR Attributes callback.  Aborting!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="683:9" pos:end="683:16"><expr pos:start="683:9" pos:end="683:15"><call pos:start="683:9" pos:end="683:15"><name pos:start="683:9" pos:end="683:12">exit</name><argument_list pos:start="683:13" pos:end="683:15">(<argument pos:start="683:14" pos:end="683:14"><expr pos:start="683:14" pos:end="683:14"><literal type="number" pos:start="683:14" pos:end="683:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="686:5" pos:end="686:66">/* Real base64 string PoP should not be added - should pass */</comment>
    <expr_stmt pos:start="687:5" pos:end="690:33"><expr pos:start="687:5" pos:end="690:32"><name pos:start="687:5" pos:end="687:6">rc</name> <operator pos:start="687:8" pos:end="687:8">=</operator> <call pos:start="687:10" pos:end="690:32"><name pos:start="687:10" pos:end="687:33">est_server_init_csrattrs</name><argument_list pos:start="687:34" pos:end="690:32">(
        <argument pos:start="688:9" pos:end="688:12"><expr pos:start="688:9" pos:end="688:12"><name pos:start="688:9" pos:end="688:12">ectx</name></expr></argument>,
        <argument pos:start="689:9" pos:end="689:23"><expr pos:start="689:9" pos:end="689:23"><name pos:start="689:9" pos:end="689:23">TEST_ATTR_NOPOP</name></expr></argument>,
        <argument pos:start="690:9" pos:end="690:31"><expr pos:start="690:9" pos:end="690:31"><call pos:start="690:9" pos:end="690:31"><name pos:start="690:9" pos:end="690:14">strlen</name><argument_list pos:start="690:15" pos:end="690:31">(<argument pos:start="690:16" pos:end="690:30"><expr pos:start="690:16" pos:end="690:30"><name pos:start="690:16" pos:end="690:30">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="691:5" pos:end="691:34"><expr pos:start="691:5" pos:end="691:33"><call pos:start="691:5" pos:end="691:33"><name pos:start="691:5" pos:end="691:13">CU_ASSERT</name><argument_list pos:start="691:14" pos:end="691:33">(<argument pos:start="691:15" pos:end="691:32"><expr pos:start="691:15" pos:end="691:32"><name pos:start="691:15" pos:end="691:16">rc</name> <operator pos:start="691:18" pos:end="691:19">==</operator> <name pos:start="691:21" pos:end="691:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="692:5" pos:end="692:59"><expr pos:start="692:5" pos:end="692:58"><name pos:start="692:5" pos:end="692:6">rc</name> <operator pos:start="692:8" pos:end="692:8">=</operator> <call pos:start="692:10" pos:end="692:58"><name pos:start="692:10" pos:end="692:32">est_client_get_csrattrs</name><argument_list pos:start="692:33" pos:end="692:58">(<argument pos:start="692:34" pos:end="692:36"><expr pos:start="692:34" pos:end="692:36"><name pos:start="692:34" pos:end="692:36">ctx</name></expr></argument>, <argument pos:start="692:39" pos:end="692:47"><expr pos:start="692:39" pos:end="692:47"><operator pos:start="692:39" pos:end="692:39">&amp;</operator><name pos:start="692:40" pos:end="692:47">csr_data</name></expr></argument>, <argument pos:start="692:50" pos:end="692:57"><expr pos:start="692:50" pos:end="692:57"><operator pos:start="692:50" pos:end="692:50">&amp;</operator><name pos:start="692:51" pos:end="692:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="693:5" pos:end="693:34"><expr pos:start="693:5" pos:end="693:33"><call pos:start="693:5" pos:end="693:33"><name pos:start="693:5" pos:end="693:13">CU_ASSERT</name><argument_list pos:start="693:14" pos:end="693:33">(<argument pos:start="693:15" pos:end="693:32"><expr pos:start="693:15" pos:end="693:32"><name pos:start="693:15" pos:end="693:16">rc</name> <operator pos:start="693:18" pos:end="693:19">==</operator> <name pos:start="693:21" pos:end="693:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="694:5" pos:end="694:50"><expr pos:start="694:5" pos:end="694:49"><call pos:start="694:5" pos:end="694:49"><name pos:start="694:5" pos:end="694:13">CU_ASSERT</name><argument_list pos:start="694:14" pos:end="694:49">(<argument pos:start="694:15" pos:end="694:48"><expr pos:start="694:15" pos:end="694:48"><name pos:start="694:15" pos:end="694:21">csr_len</name> <operator pos:start="694:23" pos:end="694:24">==</operator> <call pos:start="694:26" pos:end="694:48"><name pos:start="694:26" pos:end="694:31">strlen</name><argument_list pos:start="694:32" pos:end="694:48">(<argument pos:start="694:33" pos:end="694:47"><expr pos:start="694:33" pos:end="694:47"><name pos:start="694:33" pos:end="694:47">TEST_ATTR_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="695:5" pos:end="695:79"><expr pos:start="695:5" pos:end="695:78"><call pos:start="695:5" pos:end="695:78"><name pos:start="695:5" pos:end="695:13">CU_ASSERT</name><argument_list pos:start="695:14" pos:end="695:78">(<argument pos:start="695:15" pos:end="695:77"><expr pos:start="695:15" pos:end="695:77"><call pos:start="695:15" pos:end="695:72"><name pos:start="695:15" pos:end="695:21">strncmp</name><argument_list pos:start="695:22" pos:end="695:72">(<argument pos:start="695:23" pos:end="695:37"><expr pos:start="695:23" pos:end="695:37"><name pos:start="695:23" pos:end="695:37">TEST_ATTR_NOPOP</name></expr></argument>, <argument pos:start="695:40" pos:end="695:62"><expr pos:start="695:40" pos:end="695:62"><operator pos:start="695:40" pos:end="695:40">(</operator><specifier pos:start="695:41" pos:end="695:45">const</specifier> <name pos:start="695:47" pos:end="695:50">char</name> <operator pos:start="695:52" pos:end="695:52">*</operator><operator pos:start="695:53" pos:end="695:53">)</operator> <name pos:start="695:55" pos:end="695:62">csr_data</name></expr></argument>, <argument pos:start="695:65" pos:end="695:71"><expr pos:start="695:65" pos:end="695:71"><name pos:start="695:65" pos:end="695:71">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="695:74" pos:end="695:75">==</operator> <literal type="number" pos:start="695:77" pos:end="695:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="697:5" pos:end="697:47">/* All ASN.1 types supported by CiscoSSL */</comment>
    <expr_stmt pos:start="698:5" pos:end="698:78"><expr pos:start="698:5" pos:end="698:77"><name pos:start="698:5" pos:end="698:6">rc</name> <operator pos:start="698:8" pos:end="698:8">=</operator> <call pos:start="698:10" pos:end="698:77"><name pos:start="698:10" pos:end="698:33">est_server_init_csrattrs</name><argument_list pos:start="698:34" pos:end="698:77">(<argument pos:start="698:35" pos:end="698:38"><expr pos:start="698:35" pos:end="698:38"><name pos:start="698:35" pos:end="698:38">ectx</name></expr></argument>, <argument pos:start="698:41" pos:end="698:53"><expr pos:start="698:41" pos:end="698:53"><name pos:start="698:41" pos:end="698:53">TEST_ALL_ATTR</name></expr></argument>, <argument pos:start="698:56" pos:end="698:76"><expr pos:start="698:56" pos:end="698:76"><call pos:start="698:56" pos:end="698:76"><name pos:start="698:56" pos:end="698:61">strlen</name><argument_list pos:start="698:62" pos:end="698:76">(<argument pos:start="698:63" pos:end="698:75"><expr pos:start="698:63" pos:end="698:75"><name pos:start="698:63" pos:end="698:75">TEST_ALL_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="699:5" pos:end="699:34"><expr pos:start="699:5" pos:end="699:33"><call pos:start="699:5" pos:end="699:33"><name pos:start="699:5" pos:end="699:13">CU_ASSERT</name><argument_list pos:start="699:14" pos:end="699:33">(<argument pos:start="699:15" pos:end="699:32"><expr pos:start="699:15" pos:end="699:32"><name pos:start="699:15" pos:end="699:16">rc</name> <operator pos:start="699:18" pos:end="699:19">==</operator> <name pos:start="699:21" pos:end="699:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="700:5" pos:end="700:59"><expr pos:start="700:5" pos:end="700:58"><name pos:start="700:5" pos:end="700:6">rc</name> <operator pos:start="700:8" pos:end="700:8">=</operator> <call pos:start="700:10" pos:end="700:58"><name pos:start="700:10" pos:end="700:32">est_client_get_csrattrs</name><argument_list pos:start="700:33" pos:end="700:58">(<argument pos:start="700:34" pos:end="700:36"><expr pos:start="700:34" pos:end="700:36"><name pos:start="700:34" pos:end="700:36">ctx</name></expr></argument>, <argument pos:start="700:39" pos:end="700:47"><expr pos:start="700:39" pos:end="700:47"><operator pos:start="700:39" pos:end="700:39">&amp;</operator><name pos:start="700:40" pos:end="700:47">csr_data</name></expr></argument>, <argument pos:start="700:50" pos:end="700:57"><expr pos:start="700:50" pos:end="700:57"><operator pos:start="700:50" pos:end="700:50">&amp;</operator><name pos:start="700:51" pos:end="700:57">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="701:5" pos:end="701:34"><expr pos:start="701:5" pos:end="701:33"><call pos:start="701:5" pos:end="701:33"><name pos:start="701:5" pos:end="701:13">CU_ASSERT</name><argument_list pos:start="701:14" pos:end="701:33">(<argument pos:start="701:15" pos:end="701:32"><expr pos:start="701:15" pos:end="701:32"><name pos:start="701:15" pos:end="701:16">rc</name> <operator pos:start="701:18" pos:end="701:19">==</operator> <name pos:start="701:21" pos:end="701:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="702:5" pos:end="702:48"><expr pos:start="702:5" pos:end="702:47"><call pos:start="702:5" pos:end="702:47"><name pos:start="702:5" pos:end="702:13">CU_ASSERT</name><argument_list pos:start="702:14" pos:end="702:47">(<argument pos:start="702:15" pos:end="702:46"><expr pos:start="702:15" pos:end="702:46"><name pos:start="702:15" pos:end="702:21">csr_len</name> <operator pos:start="702:23" pos:end="702:24">==</operator> <call pos:start="702:26" pos:end="702:46"><name pos:start="702:26" pos:end="702:31">strlen</name><argument_list pos:start="702:32" pos:end="702:46">(<argument pos:start="702:33" pos:end="702:45"><expr pos:start="702:33" pos:end="702:45"><name pos:start="702:33" pos:end="702:45">TEST_ALL_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="703:5" pos:end="703:77"><expr pos:start="703:5" pos:end="703:76"><call pos:start="703:5" pos:end="703:76"><name pos:start="703:5" pos:end="703:13">CU_ASSERT</name><argument_list pos:start="703:14" pos:end="703:76">(<argument pos:start="703:15" pos:end="703:75"><expr pos:start="703:15" pos:end="703:75"><call pos:start="703:15" pos:end="703:70"><name pos:start="703:15" pos:end="703:21">strncmp</name><argument_list pos:start="703:22" pos:end="703:70">(<argument pos:start="703:23" pos:end="703:35"><expr pos:start="703:23" pos:end="703:35"><name pos:start="703:23" pos:end="703:35">TEST_ALL_ATTR</name></expr></argument>, <argument pos:start="703:38" pos:end="703:60"><expr pos:start="703:38" pos:end="703:60"><operator pos:start="703:38" pos:end="703:38">(</operator><specifier pos:start="703:39" pos:end="703:43">const</specifier> <name pos:start="703:45" pos:end="703:48">char</name> <operator pos:start="703:50" pos:end="703:50">*</operator><operator pos:start="703:51" pos:end="703:51">)</operator> <name pos:start="703:53" pos:end="703:60">csr_data</name></expr></argument>, <argument pos:start="703:63" pos:end="703:69"><expr pos:start="703:63" pos:end="703:69"><name pos:start="703:63" pos:end="703:69">csr_len</name></expr></argument>)</argument_list></call> <operator pos:start="703:72" pos:end="703:73">==</operator> <literal type="number" pos:start="703:75" pos:end="703:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="705:5" pos:end="708:33"><expr pos:start="705:5" pos:end="708:32"><name pos:start="705:5" pos:end="705:6">rc</name> <operator pos:start="705:8" pos:end="705:8">=</operator> <call pos:start="705:10" pos:end="708:32"><name pos:start="705:10" pos:end="705:33">est_server_init_csrattrs</name><argument_list pos:start="705:34" pos:end="708:32">(
        <argument pos:start="706:9" pos:end="706:12"><expr pos:start="706:9" pos:end="706:12"><name pos:start="706:9" pos:end="706:12">ectx</name></expr></argument>,
        <argument pos:start="707:9" pos:end="707:23"><expr pos:start="707:9" pos:end="707:23"><name pos:start="707:9" pos:end="707:23">TEST_1025_NOPOP</name></expr></argument>,
        <argument pos:start="708:9" pos:end="708:31"><expr pos:start="708:9" pos:end="708:31"><call pos:start="708:9" pos:end="708:31"><name pos:start="708:9" pos:end="708:14">strlen</name><argument_list pos:start="708:15" pos:end="708:31">(<argument pos:start="708:16" pos:end="708:30"><expr pos:start="708:16" pos:end="708:30"><name pos:start="708:16" pos:end="708:30">TEST_1025_NOPOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="709:5" pos:end="709:34"><expr pos:start="709:5" pos:end="709:33"><call pos:start="709:5" pos:end="709:33"><name pos:start="709:5" pos:end="709:13">CU_ASSERT</name><argument_list pos:start="709:14" pos:end="709:33">(<argument pos:start="709:15" pos:end="709:32"><expr pos:start="709:15" pos:end="709:32"><name pos:start="709:15" pos:end="709:16">rc</name> <operator pos:start="709:18" pos:end="709:19">!=</operator> <name pos:start="709:21" pos:end="709:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="710:5" pos:end="710:80"><expr pos:start="710:5" pos:end="710:79"><name pos:start="710:5" pos:end="710:6">rc</name> <operator pos:start="710:8" pos:end="710:8">=</operator> <call pos:start="710:10" pos:end="710:79"><name pos:start="710:10" pos:end="710:33">est_server_init_csrattrs</name><argument_list pos:start="710:34" pos:end="710:79">(<argument pos:start="710:35" pos:end="710:38"><expr pos:start="710:35" pos:end="710:38"><name pos:start="710:35" pos:end="710:38">ectx</name></expr></argument>, <argument pos:start="710:41" pos:end="710:54"><expr pos:start="710:41" pos:end="710:54"><name pos:start="710:41" pos:end="710:54">TEST_LONG_ATTR</name></expr></argument>, <argument pos:start="710:57" pos:end="710:78"><expr pos:start="710:57" pos:end="710:78"><call pos:start="710:57" pos:end="710:78"><name pos:start="710:57" pos:end="710:62">strlen</name><argument_list pos:start="710:63" pos:end="710:78">(<argument pos:start="710:64" pos:end="710:77"><expr pos:start="710:64" pos:end="710:77"><name pos:start="710:64" pos:end="710:77">TEST_LONG_ATTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="711:5" pos:end="711:34"><expr pos:start="711:5" pos:end="711:33"><call pos:start="711:5" pos:end="711:33"><name pos:start="711:5" pos:end="711:13">CU_ASSERT</name><argument_list pos:start="711:14" pos:end="711:33">(<argument pos:start="711:15" pos:end="711:32"><expr pos:start="711:15" pos:end="711:32"><name pos:start="711:15" pos:end="711:16">rc</name> <operator pos:start="711:18" pos:end="711:19">!=</operator> <name pos:start="711:21" pos:end="711:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="713:5" pos:end="715:5"><if pos:start="713:5" pos:end="715:5">if <condition pos:start="713:8" pos:end="713:12">(<expr pos:start="713:9" pos:end="713:11"><name pos:start="713:9" pos:end="713:11">ctx</name></expr>)</condition> <block pos:start="713:14" pos:end="715:5">{<block_content pos:start="714:9" pos:end="714:25">
        <expr_stmt pos:start="714:9" pos:end="714:25"><expr pos:start="714:9" pos:end="714:24"><call pos:start="714:9" pos:end="714:24"><name pos:start="714:9" pos:end="714:19">est_destroy</name><argument_list pos:start="714:20" pos:end="714:24">(<argument pos:start="714:21" pos:end="714:23"><expr pos:start="714:21" pos:end="714:23"><name pos:start="714:21" pos:end="714:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="716:5" pos:end="718:5"><if pos:start="716:5" pos:end="718:5">if <condition pos:start="716:8" pos:end="716:16">(<expr pos:start="716:9" pos:end="716:15"><name pos:start="716:9" pos:end="716:15">cacerts</name></expr>)</condition> <block pos:start="716:18" pos:end="718:5">{<block_content pos:start="717:9" pos:end="717:22">
        <expr_stmt pos:start="717:9" pos:end="717:22"><expr pos:start="717:9" pos:end="717:21"><call pos:start="717:9" pos:end="717:21"><name pos:start="717:9" pos:end="717:12">free</name><argument_list pos:start="717:13" pos:end="717:21">(<argument pos:start="717:14" pos:end="717:20"><expr pos:start="717:14" pos:end="717:20"><name pos:start="717:14" pos:end="717:20">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="719:5" pos:end="721:5"><if pos:start="719:5" pos:end="721:5">if <condition pos:start="719:8" pos:end="719:13">(<expr pos:start="719:9" pos:end="719:12"><name pos:start="719:9" pos:end="719:12">pkey</name></expr>)</condition> <block pos:start="719:15" pos:end="721:5">{<block_content pos:start="720:9" pos:end="720:19">
        <expr_stmt pos:start="720:9" pos:end="720:19"><expr pos:start="720:9" pos:end="720:18"><call pos:start="720:9" pos:end="720:18"><name pos:start="720:9" pos:end="720:12">free</name><argument_list pos:start="720:13" pos:end="720:18">(<argument pos:start="720:14" pos:end="720:17"><expr pos:start="720:14" pos:end="720:17"><name pos:start="720:14" pos:end="720:17">pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="724:1" pos:end="727:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="728:1" pos:end="752:1"><type pos:start="728:1" pos:end="728:3"><name pos:start="728:1" pos:end="728:3">int</name></type> <name pos:start="728:5" pos:end="728:19">us900_add_suite</name> <parameter_list pos:start="728:21" pos:end="728:26">(<parameter pos:start="728:22" pos:end="728:25"><decl pos:start="728:22" pos:end="728:25"><type pos:start="728:22" pos:end="728:25"><name pos:start="728:22" pos:end="728:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="729:1" pos:end="752:1">{<block_content pos:start="731:5" pos:end="752:0">
<cpp:ifdef pos:start="730:1" pos:end="730:17">#<cpp:directive pos:start="730:2" pos:end="730:6">ifdef</cpp:directive> <name pos:start="730:8" pos:end="730:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="731:5" pos:end="731:28"><decl pos:start="731:5" pos:end="731:27"><type pos:start="731:5" pos:end="731:13"><name pos:start="731:5" pos:end="731:13">CU_pSuite</name></type> <name pos:start="731:15" pos:end="731:20">pSuite</name> <init pos:start="731:22" pos:end="731:27">= <expr pos:start="731:24" pos:end="731:27"><name pos:start="731:24" pos:end="731:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="733:5" pos:end="733:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="734:5" pos:end="736:33"><expr pos:start="734:5" pos:end="736:32"><name pos:start="734:5" pos:end="734:10">pSuite</name> <operator pos:start="734:12" pos:end="734:12">=</operator> <call pos:start="734:14" pos:end="736:32"><name pos:start="734:14" pos:end="734:25">CU_add_suite</name><argument_list pos:start="734:26" pos:end="736:32">(<argument pos:start="734:27" pos:end="734:46"><expr pos:start="734:27" pos:end="734:46"><literal type="string" pos:start="734:27" pos:end="734:46">"us900_srv_csrattrs"</literal></expr></argument>,
            <argument pos:start="735:13" pos:end="735:28"><expr pos:start="735:13" pos:end="735:28"><name pos:start="735:13" pos:end="735:28">us900_init_suite</name></expr></argument>,
            <argument pos:start="736:13" pos:end="736:31"><expr pos:start="736:13" pos:end="736:31"><name pos:start="736:13" pos:end="736:31">us900_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="737:5" pos:end="740:5"><if pos:start="737:5" pos:end="740:5">if <condition pos:start="737:8" pos:end="737:23">(<expr pos:start="737:9" pos:end="737:22"><name pos:start="737:9" pos:end="737:12">NULL</name> <operator pos:start="737:14" pos:end="737:15">==</operator> <name pos:start="737:17" pos:end="737:22">pSuite</name></expr>)</condition> <block pos:start="737:25" pos:end="740:5">{<block_content pos:start="738:9" pos:end="739:30">
        <expr_stmt pos:start="738:9" pos:end="738:30"><expr pos:start="738:9" pos:end="738:29"><call pos:start="738:9" pos:end="738:29"><name pos:start="738:9" pos:end="738:27">CU_cleanup_registry</name><argument_list pos:start="738:28" pos:end="738:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="739:9" pos:end="739:30">return <expr pos:start="739:16" pos:end="739:29"><call pos:start="739:16" pos:end="739:29"><name pos:start="739:16" pos:end="739:27">CU_get_error</name><argument_list pos:start="739:28" pos:end="739:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="742:5" pos:end="742:36">/* add the tests to the suite */</comment>
    <if_stmt pos:start="743:5" pos:end="748:5"><if pos:start="743:5" pos:end="748:5">if <condition pos:start="743:8" pos:end="744:81">(<expr pos:start="743:9" pos:end="744:80"><operator pos:start="743:9" pos:end="743:9">(</operator><name pos:start="743:10" pos:end="743:13">NULL</name> <operator pos:start="743:15" pos:end="743:16">==</operator> <call pos:start="743:18" pos:end="743:79"><name pos:start="743:18" pos:end="743:28">CU_add_test</name><argument_list pos:start="743:29" pos:end="743:79">(<argument pos:start="743:30" pos:end="743:35"><expr pos:start="743:30" pos:end="743:35"><name pos:start="743:30" pos:end="743:35">pSuite</name></expr></argument>, <argument pos:start="743:38" pos:end="743:65"><expr pos:start="743:38" pos:end="743:65"><literal type="string" pos:start="743:38" pos:end="743:65">"CSR Server Attributes API1"</literal></expr></argument>, <argument pos:start="743:68" pos:end="743:78"><expr pos:start="743:68" pos:end="743:78"><name pos:start="743:68" pos:end="743:78">us900_test1</name></expr></argument>)</argument_list></call><operator pos:start="743:80" pos:end="743:80">)</operator> <operator pos:start="743:82" pos:end="743:83">||</operator>
        <operator pos:start="744:9" pos:end="744:9">(</operator><name pos:start="744:10" pos:end="744:13">NULL</name> <operator pos:start="744:15" pos:end="744:16">==</operator> <call pos:start="744:18" pos:end="744:79"><name pos:start="744:18" pos:end="744:28">CU_add_test</name><argument_list pos:start="744:29" pos:end="744:79">(<argument pos:start="744:30" pos:end="744:35"><expr pos:start="744:30" pos:end="744:35"><name pos:start="744:30" pos:end="744:35">pSuite</name></expr></argument>, <argument pos:start="744:38" pos:end="744:65"><expr pos:start="744:38" pos:end="744:65"><literal type="string" pos:start="744:38" pos:end="744:65">"CSR Server Attributes API2"</literal></expr></argument>, <argument pos:start="744:68" pos:end="744:78"><expr pos:start="744:68" pos:end="744:78"><name pos:start="744:68" pos:end="744:78">us900_test2</name></expr></argument>)</argument_list></call><operator pos:start="744:80" pos:end="744:80">)</operator></expr>)</condition>
    <block pos:start="745:5" pos:end="748:5">{<block_content pos:start="746:9" pos:end="747:30">
        <expr_stmt pos:start="746:9" pos:end="746:30"><expr pos:start="746:9" pos:end="746:29"><call pos:start="746:9" pos:end="746:29"><name pos:start="746:9" pos:end="746:27">CU_cleanup_registry</name><argument_list pos:start="746:28" pos:end="746:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="747:9" pos:end="747:30">return <expr pos:start="747:16" pos:end="747:29"><call pos:start="747:16" pos:end="747:29"><name pos:start="747:16" pos:end="747:27">CU_get_error</name><argument_list pos:start="747:28" pos:end="747:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="750:5" pos:end="752:0">return <expr pos:start="750:12" pos:end="750:22"><name pos:start="750:12" pos:end="750:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="751:1" pos:end="751:6">#<cpp:directive pos:start="751:2" pos:end="751:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
