<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us899.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us899.c - Unit Tests for User Story 899 - Client simple enroll 
 *
 * September, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:23">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:22">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:24">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:27">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:27">&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="20:1" pos:end="20:17">#<cpp:directive pos:start="20:2" pos:end="20:6">ifdef</cpp:directive> <name pos:start="20:8" pos:end="20:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="21:1" pos:end="21:24">#<cpp:directive pos:start="21:2" pos:end="21:8">include</cpp:directive> <cpp:file pos:start="21:10" pos:end="21:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="22:1" pos:end="22:28">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

<decl_stmt pos:start="25:1" pos:end="25:37"><decl pos:start="25:1" pos:end="25:36"><type pos:start="25:1" pos:end="25:22"><specifier pos:start="25:1" pos:end="25:6">static</specifier> <name pos:start="25:8" pos:end="25:15">unsigned</name> <name pos:start="25:17" pos:end="25:20">char</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:29">cacerts</name> <init pos:start="25:31" pos:end="25:36">= <expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="26:1" pos:end="86:0"><decl pos:start="26:1" pos:end="26:26"><type pos:start="26:1" pos:end="26:10"><specifier pos:start="26:1" pos:end="26:6">static</specifier> <name pos:start="26:8" pos:end="26:10">int</name></type> <name pos:start="26:12" pos:end="26:22">cacerts_len</name> <init pos:start="26:24" pos:end="26:26">= <expr pos:start="26:26" pos:end="26:26"><literal type="number" pos:start="26:26" pos:end="26:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="28:1" pos:end="28:33">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:25"><name pos:start="28:9" pos:end="28:25">US899_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="28:29" pos:end="28:33">29899</cpp:value></cpp:define>
<cpp:define pos:start="29:1" pos:end="29:39">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:23">US899_SERVER_IP</name></cpp:macro>	    <cpp:value pos:start="29:29" pos:end="29:39">"127.0.0.1"</cpp:value></cpp:define>	
<cpp:define pos:start="30:1" pos:end="30:37">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:17"><name pos:start="30:9" pos:end="30:17">US899_UID</name></cpp:macro>	    <cpp:value pos:start="30:29" pos:end="30:37">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="31:1" pos:end="31:36">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">US899_PWD</name></cpp:macro>	    <cpp:value pos:start="31:29" pos:end="31:36">"estpwd"</cpp:value></cpp:define>

<comment type="block" pos:start="33:1" pos:end="35:3">/*
 * The following certs are used for FQDN testing
 */</comment>
<cpp:ifndef pos:start="36:1" pos:end="36:13">#<cpp:directive pos:start="36:2" pos:end="36:7">ifndef</cpp:directive> <name pos:start="36:9" pos:end="36:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="37:1" pos:end="37:49">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:21">US899_CACERTS</name></cpp:macro>	    <cpp:value pos:start="37:29" pos:end="37:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="38:1" pos:end="38:49">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:25"><name pos:start="38:9" pos:end="38:25">US899_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="38:29" pos:end="38:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:73">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:28">US899_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="39:32" pos:end="39:73">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>

<cpp:define pos:start="41:1" pos:end="41:72">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:37">US899_SERVER_CERT_CN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="41:45" pos:end="41:72">"US899/cert_cn_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="42:1" pos:end="42:71">#<cpp:directive pos:start="42:2" pos:end="42:7">define</cpp:directive> <cpp:macro pos:start="42:9" pos:end="42:36"><name pos:start="42:9" pos:end="42:36">US899_SERVER_KEY_CN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="42:45" pos:end="42:71">"US899/key_cn_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="43:1" pos:end="43:75">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:40">US899_SERVER_CERT_CN_MISMATCH_IP</name></cpp:macro>    <cpp:value pos:start="43:45" pos:end="43:75">"US899/cert_cn_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="44:1" pos:end="44:74">#<cpp:directive pos:start="44:2" pos:end="44:7">define</cpp:directive> <cpp:macro pos:start="44:9" pos:end="44:39"><name pos:start="44:9" pos:end="44:39">US899_SERVER_KEY_CN_MISMATCH_IP</name></cpp:macro>	    <cpp:value pos:start="44:45" pos:end="44:74">"US899/key_cn_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="45:1" pos:end="45:72">#<cpp:directive pos:start="45:2" pos:end="45:7">define</cpp:directive> <cpp:macro pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:37">US899_SERVER_CERT_CN_MATCH_WC</name></cpp:macro>       <cpp:value pos:start="45:45" pos:end="45:72">"US899/cert_cn_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="46:1" pos:end="46:71">#<cpp:directive pos:start="46:2" pos:end="46:7">define</cpp:directive> <cpp:macro pos:start="46:9" pos:end="46:36"><name pos:start="46:9" pos:end="46:36">US899_SERVER_KEY_CN_MATCH_WC</name></cpp:macro>	    <cpp:value pos:start="46:45" pos:end="46:71">"US899/key_cn_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="47:1" pos:end="47:75">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:40">US899_SERVER_CERT_CN_MISMATCH_WC</name></cpp:macro>    <cpp:value pos:start="47:45" pos:end="47:75">"US899/cert_cn_mismatch_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:74">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:39"><name pos:start="48:9" pos:end="48:39">US899_SERVER_KEY_CN_MISMATCH_WC</name></cpp:macro>	    <cpp:value pos:start="48:45" pos:end="48:74">"US899/key_cn_mismatch_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="49:1" pos:end="49:70">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:35">US899_SERVER_CERT_SAN_MATCH</name></cpp:macro>	    <cpp:value pos:start="49:45" pos:end="49:70">"US899/cert_san_match.pem"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:69">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:34"><name pos:start="50:9" pos:end="50:34">US899_SERVER_KEY_SAN_MATCH</name></cpp:macro>	    <cpp:value pos:start="50:45" pos:end="50:69">"US899/key_san_match.pem"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:73">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:38">US899_SERVER_CERT_SAN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="51:45" pos:end="51:73">"US899/cert_san_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:72">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:37"><name pos:start="52:9" pos:end="52:37">US899_SERVER_KEY_SAN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="52:45" pos:end="52:72">"US899/key_san_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="53:1" pos:end="53:76">#<cpp:directive pos:start="53:2" pos:end="53:7">define</cpp:directive> <cpp:macro pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:41">US899_SERVER_CERT_SAN_MISMATCH_IP</name></cpp:macro>   <cpp:value pos:start="53:45" pos:end="53:76">"US899/cert_san_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="54:1" pos:end="54:75">#<cpp:directive pos:start="54:2" pos:end="54:7">define</cpp:directive> <cpp:macro pos:start="54:9" pos:end="54:40"><name pos:start="54:9" pos:end="54:40">US899_SERVER_KEY_SAN_MISMATCH_IP</name></cpp:macro>    <cpp:value pos:start="54:45" pos:end="54:75">"US899/key_san_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="55:1" pos:end="55:73">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:38">US899_SERVER_CERT_SAN_MATCH_IP</name></cpp:macro>      <cpp:value pos:start="55:45" pos:end="55:73">"US899/cert_san_match_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:72">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:37"><name pos:start="56:9" pos:end="56:37">US899_SERVER_KEY_SAN_MATCH_IP</name></cpp:macro>       <cpp:value pos:start="56:45" pos:end="56:72">"US899/key_san_match_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:73">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:38">US899_SERVER_CERT_SAN_MATCH_WC</name></cpp:macro>      <cpp:value pos:start="57:45" pos:end="57:73">"US899/cert_san_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="58:1" pos:end="58:72">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:37"><name pos:start="58:9" pos:end="58:37">US899_SERVER_KEY_SAN_MATCH_WC</name></cpp:macro>       <cpp:value pos:start="58:45" pos:end="58:72">"US899/key_san_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="59:1" pos:end="59:76">#<cpp:directive pos:start="59:2" pos:end="59:7">define</cpp:directive> <cpp:macro pos:start="59:9" pos:end="59:41"><name pos:start="59:9" pos:end="59:41">US899_SERVER_CERT_SAN_MISMATCH_WC</name></cpp:macro>   <cpp:value pos:start="59:45" pos:end="59:76">"US899/cert_san_mismatch_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="60:1" pos:end="60:75">#<cpp:directive pos:start="60:2" pos:end="60:7">define</cpp:directive> <cpp:macro pos:start="60:9" pos:end="60:40"><name pos:start="60:9" pos:end="60:40">US899_SERVER_KEY_SAN_MISMATCH_WC</name></cpp:macro>    <cpp:value pos:start="60:45" pos:end="60:75">"US899/key_san_mismatch_wc.pem"</cpp:value></cpp:define>
<cpp:else pos:start="61:1" pos:end="61:5">#<cpp:directive pos:start="61:2" pos:end="61:5">else</cpp:directive></cpp:else> 
<cpp:define pos:start="62:1" pos:end="62:51">#<cpp:directive pos:start="62:2" pos:end="62:7">define</cpp:directive> <cpp:macro pos:start="62:9" pos:end="62:21"><name pos:start="62:9" pos:end="62:21">US899_CACERTS</name></cpp:macro>	    <cpp:value pos:start="62:29" pos:end="62:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="63:1" pos:end="63:50">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:25">US899_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="63:29" pos:end="63:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="64:1" pos:end="64:76">#<cpp:directive pos:start="64:2" pos:end="64:7">define</cpp:directive> <cpp:macro pos:start="64:9" pos:end="64:28"><name pos:start="64:9" pos:end="64:28">US899_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="64:32" pos:end="64:76">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>

<cpp:define pos:start="66:1" pos:end="66:73">#<cpp:directive pos:start="66:2" pos:end="66:7">define</cpp:directive> <cpp:macro pos:start="66:9" pos:end="66:37"><name pos:start="66:9" pos:end="66:37">US899_SERVER_CERT_CN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="66:45" pos:end="66:73">"US899\\cert_cn_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="67:1" pos:end="67:72">#<cpp:directive pos:start="67:2" pos:end="67:7">define</cpp:directive> <cpp:macro pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:36">US899_SERVER_KEY_CN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="67:45" pos:end="67:72">"US899\\key_cn_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="68:1" pos:end="68:76">#<cpp:directive pos:start="68:2" pos:end="68:7">define</cpp:directive> <cpp:macro pos:start="68:9" pos:end="68:40"><name pos:start="68:9" pos:end="68:40">US899_SERVER_CERT_CN_MISMATCH_IP</name></cpp:macro>    <cpp:value pos:start="68:45" pos:end="68:76">"US899\\cert_cn_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="69:1" pos:end="69:75">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:39">US899_SERVER_KEY_CN_MISMATCH_IP</name></cpp:macro>	    <cpp:value pos:start="69:45" pos:end="69:75">"US899\\key_cn_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="70:1" pos:end="70:73">#<cpp:directive pos:start="70:2" pos:end="70:7">define</cpp:directive> <cpp:macro pos:start="70:9" pos:end="70:37"><name pos:start="70:9" pos:end="70:37">US899_SERVER_CERT_CN_MATCH_WC</name></cpp:macro>       <cpp:value pos:start="70:45" pos:end="70:73">"US899\\cert_cn_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="71:1" pos:end="71:72">#<cpp:directive pos:start="71:2" pos:end="71:7">define</cpp:directive> <cpp:macro pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:36">US899_SERVER_KEY_CN_MATCH_WC</name></cpp:macro>	    <cpp:value pos:start="71:45" pos:end="71:72">"US899\\key_cn_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="72:1" pos:end="72:76">#<cpp:directive pos:start="72:2" pos:end="72:7">define</cpp:directive> <cpp:macro pos:start="72:9" pos:end="72:40"><name pos:start="72:9" pos:end="72:40">US899_SERVER_CERT_CN_MISMATCH_WC</name></cpp:macro>    <cpp:value pos:start="72:45" pos:end="72:76">"US899\\cert_cn_mismatch_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="73:1" pos:end="73:75">#<cpp:directive pos:start="73:2" pos:end="73:7">define</cpp:directive> <cpp:macro pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:39">US899_SERVER_KEY_CN_MISMATCH_WC</name></cpp:macro>	    <cpp:value pos:start="73:45" pos:end="73:75">"US899\\key_cn_mismatch_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="74:1" pos:end="74:71">#<cpp:directive pos:start="74:2" pos:end="74:7">define</cpp:directive> <cpp:macro pos:start="74:9" pos:end="74:35"><name pos:start="74:9" pos:end="74:35">US899_SERVER_CERT_SAN_MATCH</name></cpp:macro>	    <cpp:value pos:start="74:45" pos:end="74:71">"US899\\cert_san_match.pem"</cpp:value></cpp:define>
<cpp:define pos:start="75:1" pos:end="75:70">#<cpp:directive pos:start="75:2" pos:end="75:7">define</cpp:directive> <cpp:macro pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:34">US899_SERVER_KEY_SAN_MATCH</name></cpp:macro>	    <cpp:value pos:start="75:45" pos:end="75:70">"US899\\key_san_match.pem"</cpp:value></cpp:define>
<cpp:define pos:start="76:1" pos:end="76:74">#<cpp:directive pos:start="76:2" pos:end="76:7">define</cpp:directive> <cpp:macro pos:start="76:9" pos:end="76:38"><name pos:start="76:9" pos:end="76:38">US899_SERVER_CERT_SAN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="76:45" pos:end="76:74">"US899\\cert_san_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="77:1" pos:end="77:73">#<cpp:directive pos:start="77:2" pos:end="77:7">define</cpp:directive> <cpp:macro pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:37">US899_SERVER_KEY_SAN_MISMATCH</name></cpp:macro>	    <cpp:value pos:start="77:45" pos:end="77:73">"US899\\key_san_mismatch.pem"</cpp:value></cpp:define>
<cpp:define pos:start="78:1" pos:end="78:77">#<cpp:directive pos:start="78:2" pos:end="78:7">define</cpp:directive> <cpp:macro pos:start="78:9" pos:end="78:41"><name pos:start="78:9" pos:end="78:41">US899_SERVER_CERT_SAN_MISMATCH_IP</name></cpp:macro>   <cpp:value pos:start="78:45" pos:end="78:77">"US899\\cert_san_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="79:1" pos:end="79:76">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:40">US899_SERVER_KEY_SAN_MISMATCH_IP</name></cpp:macro>    <cpp:value pos:start="79:45" pos:end="79:76">"US899\\key_san_mismatch_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="80:1" pos:end="80:74">#<cpp:directive pos:start="80:2" pos:end="80:7">define</cpp:directive> <cpp:macro pos:start="80:9" pos:end="80:38"><name pos:start="80:9" pos:end="80:38">US899_SERVER_CERT_SAN_MATCH_IP</name></cpp:macro>      <cpp:value pos:start="80:45" pos:end="80:74">"US899\\cert_san_match_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="81:1" pos:end="81:73">#<cpp:directive pos:start="81:2" pos:end="81:7">define</cpp:directive> <cpp:macro pos:start="81:9" pos:end="81:37"><name pos:start="81:9" pos:end="81:37">US899_SERVER_KEY_SAN_MATCH_IP</name></cpp:macro>       <cpp:value pos:start="81:45" pos:end="81:73">"US899\\key_san_match_ip.pem"</cpp:value></cpp:define>
<cpp:define pos:start="82:1" pos:end="82:74">#<cpp:directive pos:start="82:2" pos:end="82:7">define</cpp:directive> <cpp:macro pos:start="82:9" pos:end="82:38"><name pos:start="82:9" pos:end="82:38">US899_SERVER_CERT_SAN_MATCH_WC</name></cpp:macro>      <cpp:value pos:start="82:45" pos:end="82:74">"US899\\cert_san_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="83:1" pos:end="83:73">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:37">US899_SERVER_KEY_SAN_MATCH_WC</name></cpp:macro>       <cpp:value pos:start="83:45" pos:end="83:73">"US899\\key_san_match_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="84:1" pos:end="84:77">#<cpp:directive pos:start="84:2" pos:end="84:7">define</cpp:directive> <cpp:macro pos:start="84:9" pos:end="84:41"><name pos:start="84:9" pos:end="84:41">US899_SERVER_CERT_SAN_MISMATCH_WC</name></cpp:macro>   <cpp:value pos:start="84:45" pos:end="84:77">"US899\\cert_san_mismatch_wc.pem"</cpp:value></cpp:define>
<cpp:define pos:start="85:1" pos:end="85:76">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:40"><name pos:start="85:9" pos:end="85:40">US899_SERVER_KEY_SAN_MISMATCH_WC</name></cpp:macro>    <cpp:value pos:start="85:45" pos:end="85:76">"US899\\key_san_mismatch_wc.pem"</cpp:value></cpp:define>

<decl_stmt pos:start="87:1" pos:end="87:48"><decl pos:start="87:1" pos:end="87:47"><type pos:start="87:1" pos:end="87:23"><specifier pos:start="87:1" pos:end="87:6">static</specifier> <name pos:start="87:8" pos:end="87:23">CRITICAL_SECTION</name></type> <name pos:start="87:25" pos:end="87:47">logger_critical_section</name></decl>;</decl_stmt>  
<function pos:start="88:1" pos:end="100:0"><type pos:start="88:1" pos:end="88:11"><specifier pos:start="88:1" pos:end="88:6">static</specifier> <name pos:start="88:8" pos:end="88:11">void</name></type> <name pos:start="88:13" pos:end="88:31">us899_logger_stderr</name> <parameter_list pos:start="88:33" pos:end="88:57">(<parameter pos:start="88:34" pos:end="88:45"><decl pos:start="88:34" pos:end="88:45"><type pos:start="88:34" pos:end="88:45"><name pos:start="88:34" pos:end="88:37">char</name> <modifier pos:start="88:39" pos:end="88:39">*</modifier></type><name pos:start="88:40" pos:end="88:45">format</name></decl></parameter>, <parameter pos:start="88:48" pos:end="88:56"><decl pos:start="88:48" pos:end="88:56"><type pos:start="88:48" pos:end="88:56"><name pos:start="88:48" pos:end="88:54">va_list</name></type> <name pos:start="88:56" pos:end="88:56">l</name></decl></parameter>)</parameter_list> 
<block pos:start="89:1" pos:end="100:0">{<block_content pos:start="90:5" pos:end="93:51">
    <expr_stmt pos:start="90:5" pos:end="90:51"><expr pos:start="90:5" pos:end="90:50"><call pos:start="90:5" pos:end="90:50"><name pos:start="90:5" pos:end="90:24">EnterCriticalSection</name><argument_list pos:start="90:25" pos:end="90:50">(<argument pos:start="90:26" pos:end="90:49"><expr pos:start="90:26" pos:end="90:49"><operator pos:start="90:26" pos:end="90:26">&amp;</operator><name pos:start="90:27" pos:end="90:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="91:9" pos:end="91:36"><expr pos:start="91:9" pos:end="91:35"><call pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:16">vfprintf</name><argument_list pos:start="91:17" pos:end="91:35">(<argument pos:start="91:18" pos:end="91:23"><expr pos:start="91:18" pos:end="91:23"><name pos:start="91:18" pos:end="91:23">stderr</name></expr></argument>, <argument pos:start="91:26" pos:end="91:31"><expr pos:start="91:26" pos:end="91:31"><name pos:start="91:26" pos:end="91:31">format</name></expr></argument>, <argument pos:start="91:34" pos:end="91:34"><expr pos:start="91:34" pos:end="91:34"><name pos:start="91:34" pos:end="91:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="92:9" pos:end="92:23"><expr pos:start="92:9" pos:end="92:22"><call pos:start="92:9" pos:end="92:22"><name pos:start="92:9" pos:end="92:14">fflush</name><argument_list pos:start="92:15" pos:end="92:22">(<argument pos:start="92:16" pos:end="92:21"><expr pos:start="92:16" pos:end="92:21"><name pos:start="92:16" pos:end="92:21">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:51"><expr pos:start="93:5" pos:end="93:50"><call pos:start="93:5" pos:end="93:50"><name pos:start="93:5" pos:end="93:24">LeaveCriticalSection</name><argument_list pos:start="93:25" pos:end="93:50">(<argument pos:start="93:26" pos:end="93:49"><expr pos:start="93:26" pos:end="93:49"><operator pos:start="93:26" pos:end="93:26">&amp;</operator><name pos:start="93:27" pos:end="93:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif> 



<cpp:define pos:start="99:1" pos:end="99:642">#<cpp:directive pos:start="99:2" pos:end="99:7">define</cpp:directive> <cpp:macro pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:27">US899_VALID_CSR_PEM</name></cpp:macro> <cpp:value pos:start="99:29" pos:end="99:642">"-----BEGIN CERTIFICATE REQUEST-----\nMIIBhDCB7gIBADBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEh\nMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEB\nAQUAA4GNADCBiQKBgQC13wEG36vBY8Mq+uu80SKvkx0ZCt0lc18kaMSDLwML2IRS\n+SaCLEZbjJYeSxwZ9qXy4Rt1vFDRRTL57/lQTgT5kzKI2D2YUZ+Dg6wQqx/4t99S\naCv/lxcUTfIPiaqATUQxeZA+h7Fo0ti9wLSw6AQft9hibYPRJZ6zHa24lXwd7wID\nAQABoAAwDQYJKoZIhvcNAQEFBQADgYEAjwSjLqFAzoPGa4GKn7AEitepVA+3QjXL\n45LSzrVJMW4Jl8Ovm/aPatnFRQYm82rVKb7Sq4Ddo9nDJ9tgZ450oqIWbujUmGEU\nsUUxJSJ3vGXyQy+8NeTy4GmmsNWIwhSKMkqh7YVlBvgkwGoNFuQ8mD90prFmld+J\nhHBZXCaekrE=\n-----END CERTIFICATE REQUEST-----"</cpp:value></cpp:define>


<comment type="block" pos:start="102:1" pos:end="104:3">/*
 * Note: this array was generated using:  xdd -i req.der req.c
 */</comment>
<decl_stmt pos:start="105:1" pos:end="142:2"><decl pos:start="105:1" pos:end="142:1"><type pos:start="105:1" pos:end="105:20"><specifier pos:start="105:1" pos:end="105:6">static</specifier> <name pos:start="105:8" pos:end="105:15">unsigned</name> <name pos:start="105:17" pos:end="105:20">char</name></type> <name pos:start="105:22" pos:end="105:42"><name pos:start="105:22" pos:end="105:40">US899_VALID_CSR_DER</name><index pos:start="105:41" pos:end="105:42">[]</index></name> <init pos:start="105:44" pos:end="142:1">= <expr pos:start="105:46" pos:end="142:1"><block pos:start="105:46" pos:end="142:1">{
  <expr pos:start="106:3" pos:end="106:6"><literal type="number" pos:start="106:3" pos:end="106:6">0x30</literal></expr>, <expr pos:start="106:9" pos:end="106:12"><literal type="number" pos:start="106:9" pos:end="106:12">0x82</literal></expr>, <expr pos:start="106:15" pos:end="106:18"><literal type="number" pos:start="106:15" pos:end="106:18">0x01</literal></expr>, <expr pos:start="106:21" pos:end="106:24"><literal type="number" pos:start="106:21" pos:end="106:24">0xa8</literal></expr>, <expr pos:start="106:27" pos:end="106:30"><literal type="number" pos:start="106:27" pos:end="106:30">0x30</literal></expr>, <expr pos:start="106:33" pos:end="106:36"><literal type="number" pos:start="106:33" pos:end="106:36">0x82</literal></expr>, <expr pos:start="106:39" pos:end="106:42"><literal type="number" pos:start="106:39" pos:end="106:42">0x01</literal></expr>, <expr pos:start="106:45" pos:end="106:48"><literal type="number" pos:start="106:45" pos:end="106:48">0x11</literal></expr>, <expr pos:start="106:51" pos:end="106:54"><literal type="number" pos:start="106:51" pos:end="106:54">0x02</literal></expr>, <expr pos:start="106:57" pos:end="106:60"><literal type="number" pos:start="106:57" pos:end="106:60">0x01</literal></expr>, <expr pos:start="106:63" pos:end="106:66"><literal type="number" pos:start="106:63" pos:end="106:66">0x00</literal></expr>, <expr pos:start="106:69" pos:end="106:72"><literal type="number" pos:start="106:69" pos:end="106:72">0x30</literal></expr>,
  <expr pos:start="107:3" pos:end="107:6"><literal type="number" pos:start="107:3" pos:end="107:6">0x68</literal></expr>, <expr pos:start="107:9" pos:end="107:12"><literal type="number" pos:start="107:9" pos:end="107:12">0x31</literal></expr>, <expr pos:start="107:15" pos:end="107:18"><literal type="number" pos:start="107:15" pos:end="107:18">0x0b</literal></expr>, <expr pos:start="107:21" pos:end="107:24"><literal type="number" pos:start="107:21" pos:end="107:24">0x30</literal></expr>, <expr pos:start="107:27" pos:end="107:30"><literal type="number" pos:start="107:27" pos:end="107:30">0x09</literal></expr>, <expr pos:start="107:33" pos:end="107:36"><literal type="number" pos:start="107:33" pos:end="107:36">0x06</literal></expr>, <expr pos:start="107:39" pos:end="107:42"><literal type="number" pos:start="107:39" pos:end="107:42">0x03</literal></expr>, <expr pos:start="107:45" pos:end="107:48"><literal type="number" pos:start="107:45" pos:end="107:48">0x55</literal></expr>, <expr pos:start="107:51" pos:end="107:54"><literal type="number" pos:start="107:51" pos:end="107:54">0x04</literal></expr>, <expr pos:start="107:57" pos:end="107:60"><literal type="number" pos:start="107:57" pos:end="107:60">0x06</literal></expr>, <expr pos:start="107:63" pos:end="107:66"><literal type="number" pos:start="107:63" pos:end="107:66">0x13</literal></expr>, <expr pos:start="107:69" pos:end="107:72"><literal type="number" pos:start="107:69" pos:end="107:72">0x02</literal></expr>,
  <expr pos:start="108:3" pos:end="108:6"><literal type="number" pos:start="108:3" pos:end="108:6">0x55</literal></expr>, <expr pos:start="108:9" pos:end="108:12"><literal type="number" pos:start="108:9" pos:end="108:12">0x53</literal></expr>, <expr pos:start="108:15" pos:end="108:18"><literal type="number" pos:start="108:15" pos:end="108:18">0x31</literal></expr>, <expr pos:start="108:21" pos:end="108:24"><literal type="number" pos:start="108:21" pos:end="108:24">0x0b</literal></expr>, <expr pos:start="108:27" pos:end="108:30"><literal type="number" pos:start="108:27" pos:end="108:30">0x30</literal></expr>, <expr pos:start="108:33" pos:end="108:36"><literal type="number" pos:start="108:33" pos:end="108:36">0x09</literal></expr>, <expr pos:start="108:39" pos:end="108:42"><literal type="number" pos:start="108:39" pos:end="108:42">0x06</literal></expr>, <expr pos:start="108:45" pos:end="108:48"><literal type="number" pos:start="108:45" pos:end="108:48">0x03</literal></expr>, <expr pos:start="108:51" pos:end="108:54"><literal type="number" pos:start="108:51" pos:end="108:54">0x55</literal></expr>, <expr pos:start="108:57" pos:end="108:60"><literal type="number" pos:start="108:57" pos:end="108:60">0x04</literal></expr>, <expr pos:start="108:63" pos:end="108:66"><literal type="number" pos:start="108:63" pos:end="108:66">0x08</literal></expr>, <expr pos:start="108:69" pos:end="108:72"><literal type="number" pos:start="108:69" pos:end="108:72">0x0c</literal></expr>,
  <expr pos:start="109:3" pos:end="109:6"><literal type="number" pos:start="109:3" pos:end="109:6">0x02</literal></expr>, <expr pos:start="109:9" pos:end="109:12"><literal type="number" pos:start="109:9" pos:end="109:12">0x6e</literal></expr>, <expr pos:start="109:15" pos:end="109:18"><literal type="number" pos:start="109:15" pos:end="109:18">0x63</literal></expr>, <expr pos:start="109:21" pos:end="109:24"><literal type="number" pos:start="109:21" pos:end="109:24">0x31</literal></expr>, <expr pos:start="109:27" pos:end="109:30"><literal type="number" pos:start="109:27" pos:end="109:30">0x0c</literal></expr>, <expr pos:start="109:33" pos:end="109:36"><literal type="number" pos:start="109:33" pos:end="109:36">0x30</literal></expr>, <expr pos:start="109:39" pos:end="109:42"><literal type="number" pos:start="109:39" pos:end="109:42">0x0a</literal></expr>, <expr pos:start="109:45" pos:end="109:48"><literal type="number" pos:start="109:45" pos:end="109:48">0x06</literal></expr>, <expr pos:start="109:51" pos:end="109:54"><literal type="number" pos:start="109:51" pos:end="109:54">0x03</literal></expr>, <expr pos:start="109:57" pos:end="109:60"><literal type="number" pos:start="109:57" pos:end="109:60">0x55</literal></expr>, <expr pos:start="109:63" pos:end="109:66"><literal type="number" pos:start="109:63" pos:end="109:66">0x04</literal></expr>, <expr pos:start="109:69" pos:end="109:72"><literal type="number" pos:start="109:69" pos:end="109:72">0x07</literal></expr>,
  <expr pos:start="110:3" pos:end="110:6"><literal type="number" pos:start="110:3" pos:end="110:6">0x0c</literal></expr>, <expr pos:start="110:9" pos:end="110:12"><literal type="number" pos:start="110:9" pos:end="110:12">0x03</literal></expr>, <expr pos:start="110:15" pos:end="110:18"><literal type="number" pos:start="110:15" pos:end="110:18">0x73</literal></expr>, <expr pos:start="110:21" pos:end="110:24"><literal type="number" pos:start="110:21" pos:end="110:24">0x73</literal></expr>, <expr pos:start="110:27" pos:end="110:30"><literal type="number" pos:start="110:27" pos:end="110:30">0x73</literal></expr>, <expr pos:start="110:33" pos:end="110:36"><literal type="number" pos:start="110:33" pos:end="110:36">0x31</literal></expr>, <expr pos:start="110:39" pos:end="110:42"><literal type="number" pos:start="110:39" pos:end="110:42">0x0c</literal></expr>, <expr pos:start="110:45" pos:end="110:48"><literal type="number" pos:start="110:45" pos:end="110:48">0x30</literal></expr>, <expr pos:start="110:51" pos:end="110:54"><literal type="number" pos:start="110:51" pos:end="110:54">0x0a</literal></expr>, <expr pos:start="110:57" pos:end="110:60"><literal type="number" pos:start="110:57" pos:end="110:60">0x06</literal></expr>, <expr pos:start="110:63" pos:end="110:66"><literal type="number" pos:start="110:63" pos:end="110:66">0x03</literal></expr>, <expr pos:start="110:69" pos:end="110:72"><literal type="number" pos:start="110:69" pos:end="110:72">0x55</literal></expr>,
  <expr pos:start="111:3" pos:end="111:6"><literal type="number" pos:start="111:3" pos:end="111:6">0x04</literal></expr>, <expr pos:start="111:9" pos:end="111:12"><literal type="number" pos:start="111:9" pos:end="111:12">0x0a</literal></expr>, <expr pos:start="111:15" pos:end="111:18"><literal type="number" pos:start="111:15" pos:end="111:18">0x0c</literal></expr>, <expr pos:start="111:21" pos:end="111:24"><literal type="number" pos:start="111:21" pos:end="111:24">0x03</literal></expr>, <expr pos:start="111:27" pos:end="111:30"><literal type="number" pos:start="111:27" pos:end="111:30">0x64</literal></expr>, <expr pos:start="111:33" pos:end="111:36"><literal type="number" pos:start="111:33" pos:end="111:36">0x64</literal></expr>, <expr pos:start="111:39" pos:end="111:42"><literal type="number" pos:start="111:39" pos:end="111:42">0x64</literal></expr>, <expr pos:start="111:45" pos:end="111:48"><literal type="number" pos:start="111:45" pos:end="111:48">0x31</literal></expr>, <expr pos:start="111:51" pos:end="111:54"><literal type="number" pos:start="111:51" pos:end="111:54">0x0d</literal></expr>, <expr pos:start="111:57" pos:end="111:60"><literal type="number" pos:start="111:57" pos:end="111:60">0x30</literal></expr>, <expr pos:start="111:63" pos:end="111:66"><literal type="number" pos:start="111:63" pos:end="111:66">0x0b</literal></expr>, <expr pos:start="111:69" pos:end="111:72"><literal type="number" pos:start="111:69" pos:end="111:72">0x06</literal></expr>,
  <expr pos:start="112:3" pos:end="112:6"><literal type="number" pos:start="112:3" pos:end="112:6">0x03</literal></expr>, <expr pos:start="112:9" pos:end="112:12"><literal type="number" pos:start="112:9" pos:end="112:12">0x55</literal></expr>, <expr pos:start="112:15" pos:end="112:18"><literal type="number" pos:start="112:15" pos:end="112:18">0x04</literal></expr>, <expr pos:start="112:21" pos:end="112:24"><literal type="number" pos:start="112:21" pos:end="112:24">0x0b</literal></expr>, <expr pos:start="112:27" pos:end="112:30"><literal type="number" pos:start="112:27" pos:end="112:30">0x0c</literal></expr>, <expr pos:start="112:33" pos:end="112:36"><literal type="number" pos:start="112:33" pos:end="112:36">0x04</literal></expr>, <expr pos:start="112:39" pos:end="112:42"><literal type="number" pos:start="112:39" pos:end="112:42">0x66</literal></expr>, <expr pos:start="112:45" pos:end="112:48"><literal type="number" pos:start="112:45" pos:end="112:48">0x6a</literal></expr>, <expr pos:start="112:51" pos:end="112:54"><literal type="number" pos:start="112:51" pos:end="112:54">0x6a</literal></expr>, <expr pos:start="112:57" pos:end="112:60"><literal type="number" pos:start="112:57" pos:end="112:60">0x64</literal></expr>, <expr pos:start="112:63" pos:end="112:66"><literal type="number" pos:start="112:63" pos:end="112:66">0x31</literal></expr>, <expr pos:start="112:69" pos:end="112:72"><literal type="number" pos:start="112:69" pos:end="112:72">0x0c</literal></expr>,
  <expr pos:start="113:3" pos:end="113:6"><literal type="number" pos:start="113:3" pos:end="113:6">0x30</literal></expr>, <expr pos:start="113:9" pos:end="113:12"><literal type="number" pos:start="113:9" pos:end="113:12">0x0a</literal></expr>, <expr pos:start="113:15" pos:end="113:18"><literal type="number" pos:start="113:15" pos:end="113:18">0x06</literal></expr>, <expr pos:start="113:21" pos:end="113:24"><literal type="number" pos:start="113:21" pos:end="113:24">0x03</literal></expr>, <expr pos:start="113:27" pos:end="113:30"><literal type="number" pos:start="113:27" pos:end="113:30">0x55</literal></expr>, <expr pos:start="113:33" pos:end="113:36"><literal type="number" pos:start="113:33" pos:end="113:36">0x04</literal></expr>, <expr pos:start="113:39" pos:end="113:42"><literal type="number" pos:start="113:39" pos:end="113:42">0x03</literal></expr>, <expr pos:start="113:45" pos:end="113:48"><literal type="number" pos:start="113:45" pos:end="113:48">0x0c</literal></expr>, <expr pos:start="113:51" pos:end="113:54"><literal type="number" pos:start="113:51" pos:end="113:54">0x03</literal></expr>, <expr pos:start="113:57" pos:end="113:60"><literal type="number" pos:start="113:57" pos:end="113:60">0x31</literal></expr>, <expr pos:start="113:63" pos:end="113:66"><literal type="number" pos:start="113:63" pos:end="113:66">0x32</literal></expr>, <expr pos:start="113:69" pos:end="113:72"><literal type="number" pos:start="113:69" pos:end="113:72">0x37</literal></expr>,
  <expr pos:start="114:3" pos:end="114:6"><literal type="number" pos:start="114:3" pos:end="114:6">0x31</literal></expr>, <expr pos:start="114:9" pos:end="114:12"><literal type="number" pos:start="114:9" pos:end="114:12">0x13</literal></expr>, <expr pos:start="114:15" pos:end="114:18"><literal type="number" pos:start="114:15" pos:end="114:18">0x30</literal></expr>, <expr pos:start="114:21" pos:end="114:24"><literal type="number" pos:start="114:21" pos:end="114:24">0x11</literal></expr>, <expr pos:start="114:27" pos:end="114:30"><literal type="number" pos:start="114:27" pos:end="114:30">0x06</literal></expr>, <expr pos:start="114:33" pos:end="114:36"><literal type="number" pos:start="114:33" pos:end="114:36">0x09</literal></expr>, <expr pos:start="114:39" pos:end="114:42"><literal type="number" pos:start="114:39" pos:end="114:42">0x2a</literal></expr>, <expr pos:start="114:45" pos:end="114:48"><literal type="number" pos:start="114:45" pos:end="114:48">0x86</literal></expr>, <expr pos:start="114:51" pos:end="114:54"><literal type="number" pos:start="114:51" pos:end="114:54">0x48</literal></expr>, <expr pos:start="114:57" pos:end="114:60"><literal type="number" pos:start="114:57" pos:end="114:60">0x86</literal></expr>, <expr pos:start="114:63" pos:end="114:66"><literal type="number" pos:start="114:63" pos:end="114:66">0xf7</literal></expr>, <expr pos:start="114:69" pos:end="114:72"><literal type="number" pos:start="114:69" pos:end="114:72">0x0d</literal></expr>,
  <expr pos:start="115:3" pos:end="115:6"><literal type="number" pos:start="115:3" pos:end="115:6">0x01</literal></expr>, <expr pos:start="115:9" pos:end="115:12"><literal type="number" pos:start="115:9" pos:end="115:12">0x09</literal></expr>, <expr pos:start="115:15" pos:end="115:18"><literal type="number" pos:start="115:15" pos:end="115:18">0x01</literal></expr>, <expr pos:start="115:21" pos:end="115:24"><literal type="number" pos:start="115:21" pos:end="115:24">0x16</literal></expr>, <expr pos:start="115:27" pos:end="115:30"><literal type="number" pos:start="115:27" pos:end="115:30">0x04</literal></expr>, <expr pos:start="115:33" pos:end="115:36"><literal type="number" pos:start="115:33" pos:end="115:36">0x6e</literal></expr>, <expr pos:start="115:39" pos:end="115:42"><literal type="number" pos:start="115:39" pos:end="115:42">0x6f</literal></expr>, <expr pos:start="115:45" pos:end="115:48"><literal type="number" pos:start="115:45" pos:end="115:48">0x6e</literal></expr>, <expr pos:start="115:51" pos:end="115:54"><literal type="number" pos:start="115:51" pos:end="115:54">0x65</literal></expr>, <expr pos:start="115:57" pos:end="115:60"><literal type="number" pos:start="115:57" pos:end="115:60">0x30</literal></expr>, <expr pos:start="115:63" pos:end="115:66"><literal type="number" pos:start="115:63" pos:end="115:66">0x81</literal></expr>, <expr pos:start="115:69" pos:end="115:72"><literal type="number" pos:start="115:69" pos:end="115:72">0x9f</literal></expr>,
  <expr pos:start="116:3" pos:end="116:6"><literal type="number" pos:start="116:3" pos:end="116:6">0x30</literal></expr>, <expr pos:start="116:9" pos:end="116:12"><literal type="number" pos:start="116:9" pos:end="116:12">0x0d</literal></expr>, <expr pos:start="116:15" pos:end="116:18"><literal type="number" pos:start="116:15" pos:end="116:18">0x06</literal></expr>, <expr pos:start="116:21" pos:end="116:24"><literal type="number" pos:start="116:21" pos:end="116:24">0x09</literal></expr>, <expr pos:start="116:27" pos:end="116:30"><literal type="number" pos:start="116:27" pos:end="116:30">0x2a</literal></expr>, <expr pos:start="116:33" pos:end="116:36"><literal type="number" pos:start="116:33" pos:end="116:36">0x86</literal></expr>, <expr pos:start="116:39" pos:end="116:42"><literal type="number" pos:start="116:39" pos:end="116:42">0x48</literal></expr>, <expr pos:start="116:45" pos:end="116:48"><literal type="number" pos:start="116:45" pos:end="116:48">0x86</literal></expr>, <expr pos:start="116:51" pos:end="116:54"><literal type="number" pos:start="116:51" pos:end="116:54">0xf7</literal></expr>, <expr pos:start="116:57" pos:end="116:60"><literal type="number" pos:start="116:57" pos:end="116:60">0x0d</literal></expr>, <expr pos:start="116:63" pos:end="116:66"><literal type="number" pos:start="116:63" pos:end="116:66">0x01</literal></expr>, <expr pos:start="116:69" pos:end="116:72"><literal type="number" pos:start="116:69" pos:end="116:72">0x01</literal></expr>,
  <expr pos:start="117:3" pos:end="117:6"><literal type="number" pos:start="117:3" pos:end="117:6">0x01</literal></expr>, <expr pos:start="117:9" pos:end="117:12"><literal type="number" pos:start="117:9" pos:end="117:12">0x05</literal></expr>, <expr pos:start="117:15" pos:end="117:18"><literal type="number" pos:start="117:15" pos:end="117:18">0x00</literal></expr>, <expr pos:start="117:21" pos:end="117:24"><literal type="number" pos:start="117:21" pos:end="117:24">0x03</literal></expr>, <expr pos:start="117:27" pos:end="117:30"><literal type="number" pos:start="117:27" pos:end="117:30">0x81</literal></expr>, <expr pos:start="117:33" pos:end="117:36"><literal type="number" pos:start="117:33" pos:end="117:36">0x8d</literal></expr>, <expr pos:start="117:39" pos:end="117:42"><literal type="number" pos:start="117:39" pos:end="117:42">0x00</literal></expr>, <expr pos:start="117:45" pos:end="117:48"><literal type="number" pos:start="117:45" pos:end="117:48">0x30</literal></expr>, <expr pos:start="117:51" pos:end="117:54"><literal type="number" pos:start="117:51" pos:end="117:54">0x81</literal></expr>, <expr pos:start="117:57" pos:end="117:60"><literal type="number" pos:start="117:57" pos:end="117:60">0x89</literal></expr>, <expr pos:start="117:63" pos:end="117:66"><literal type="number" pos:start="117:63" pos:end="117:66">0x02</literal></expr>, <expr pos:start="117:69" pos:end="117:72"><literal type="number" pos:start="117:69" pos:end="117:72">0x81</literal></expr>,
  <expr pos:start="118:3" pos:end="118:6"><literal type="number" pos:start="118:3" pos:end="118:6">0x81</literal></expr>, <expr pos:start="118:9" pos:end="118:12"><literal type="number" pos:start="118:9" pos:end="118:12">0x00</literal></expr>, <expr pos:start="118:15" pos:end="118:18"><literal type="number" pos:start="118:15" pos:end="118:18">0xb9</literal></expr>, <expr pos:start="118:21" pos:end="118:24"><literal type="number" pos:start="118:21" pos:end="118:24">0x9f</literal></expr>, <expr pos:start="118:27" pos:end="118:30"><literal type="number" pos:start="118:27" pos:end="118:30">0xdd</literal></expr>, <expr pos:start="118:33" pos:end="118:36"><literal type="number" pos:start="118:33" pos:end="118:36">0xd0</literal></expr>, <expr pos:start="118:39" pos:end="118:42"><literal type="number" pos:start="118:39" pos:end="118:42">0xa4</literal></expr>, <expr pos:start="118:45" pos:end="118:48"><literal type="number" pos:start="118:45" pos:end="118:48">0xdf</literal></expr>, <expr pos:start="118:51" pos:end="118:54"><literal type="number" pos:start="118:51" pos:end="118:54">0x06</literal></expr>, <expr pos:start="118:57" pos:end="118:60"><literal type="number" pos:start="118:57" pos:end="118:60">0x50</literal></expr>, <expr pos:start="118:63" pos:end="118:66"><literal type="number" pos:start="118:63" pos:end="118:66">0xf5</literal></expr>, <expr pos:start="118:69" pos:end="118:72"><literal type="number" pos:start="118:69" pos:end="118:72">0x4e</literal></expr>,
  <expr pos:start="119:3" pos:end="119:6"><literal type="number" pos:start="119:3" pos:end="119:6">0x85</literal></expr>, <expr pos:start="119:9" pos:end="119:12"><literal type="number" pos:start="119:9" pos:end="119:12">0x80</literal></expr>, <expr pos:start="119:15" pos:end="119:18"><literal type="number" pos:start="119:15" pos:end="119:18">0xeb</literal></expr>, <expr pos:start="119:21" pos:end="119:24"><literal type="number" pos:start="119:21" pos:end="119:24">0x2a</literal></expr>, <expr pos:start="119:27" pos:end="119:30"><literal type="number" pos:start="119:27" pos:end="119:30">0x1e</literal></expr>, <expr pos:start="119:33" pos:end="119:36"><literal type="number" pos:start="119:33" pos:end="119:36">0xff</literal></expr>, <expr pos:start="119:39" pos:end="119:42"><literal type="number" pos:start="119:39" pos:end="119:42">0x3c</literal></expr>, <expr pos:start="119:45" pos:end="119:48"><literal type="number" pos:start="119:45" pos:end="119:48">0x0f</literal></expr>, <expr pos:start="119:51" pos:end="119:54"><literal type="number" pos:start="119:51" pos:end="119:54">0x0d</literal></expr>, <expr pos:start="119:57" pos:end="119:60"><literal type="number" pos:start="119:57" pos:end="119:60">0x98</literal></expr>, <expr pos:start="119:63" pos:end="119:66"><literal type="number" pos:start="119:63" pos:end="119:66">0x6e</literal></expr>, <expr pos:start="119:69" pos:end="119:72"><literal type="number" pos:start="119:69" pos:end="119:72">0xfe</literal></expr>,
  <expr pos:start="120:3" pos:end="120:6"><literal type="number" pos:start="120:3" pos:end="120:6">0x08</literal></expr>, <expr pos:start="120:9" pos:end="120:12"><literal type="number" pos:start="120:9" pos:end="120:12">0x74</literal></expr>, <expr pos:start="120:15" pos:end="120:18"><literal type="number" pos:start="120:15" pos:end="120:18">0xf4</literal></expr>, <expr pos:start="120:21" pos:end="120:24"><literal type="number" pos:start="120:21" pos:end="120:24">0xce</literal></expr>, <expr pos:start="120:27" pos:end="120:30"><literal type="number" pos:start="120:27" pos:end="120:30">0xf5</literal></expr>, <expr pos:start="120:33" pos:end="120:36"><literal type="number" pos:start="120:33" pos:end="120:36">0xfd</literal></expr>, <expr pos:start="120:39" pos:end="120:42"><literal type="number" pos:start="120:39" pos:end="120:42">0xf9</literal></expr>, <expr pos:start="120:45" pos:end="120:48"><literal type="number" pos:start="120:45" pos:end="120:48">0x2f</literal></expr>, <expr pos:start="120:51" pos:end="120:54"><literal type="number" pos:start="120:51" pos:end="120:54">0x86</literal></expr>, <expr pos:start="120:57" pos:end="120:60"><literal type="number" pos:start="120:57" pos:end="120:60">0x20</literal></expr>, <expr pos:start="120:63" pos:end="120:66"><literal type="number" pos:start="120:63" pos:end="120:66">0xf7</literal></expr>, <expr pos:start="120:69" pos:end="120:72"><literal type="number" pos:start="120:69" pos:end="120:72">0xcc</literal></expr>,
  <expr pos:start="121:3" pos:end="121:6"><literal type="number" pos:start="121:3" pos:end="121:6">0x08</literal></expr>, <expr pos:start="121:9" pos:end="121:12"><literal type="number" pos:start="121:9" pos:end="121:12">0x05</literal></expr>, <expr pos:start="121:15" pos:end="121:18"><literal type="number" pos:start="121:15" pos:end="121:18">0xce</literal></expr>, <expr pos:start="121:21" pos:end="121:24"><literal type="number" pos:start="121:21" pos:end="121:24">0x98</literal></expr>, <expr pos:start="121:27" pos:end="121:30"><literal type="number" pos:start="121:27" pos:end="121:30">0x69</literal></expr>, <expr pos:start="121:33" pos:end="121:36"><literal type="number" pos:start="121:33" pos:end="121:36">0x5c</literal></expr>, <expr pos:start="121:39" pos:end="121:42"><literal type="number" pos:start="121:39" pos:end="121:42">0x8c</literal></expr>, <expr pos:start="121:45" pos:end="121:48"><literal type="number" pos:start="121:45" pos:end="121:48">0xbd</literal></expr>, <expr pos:start="121:51" pos:end="121:54"><literal type="number" pos:start="121:51" pos:end="121:54">0x20</literal></expr>, <expr pos:start="121:57" pos:end="121:60"><literal type="number" pos:start="121:57" pos:end="121:60">0xa7</literal></expr>, <expr pos:start="121:63" pos:end="121:66"><literal type="number" pos:start="121:63" pos:end="121:66">0x28</literal></expr>, <expr pos:start="121:69" pos:end="121:72"><literal type="number" pos:start="121:69" pos:end="121:72">0xf7</literal></expr>,
  <expr pos:start="122:3" pos:end="122:6"><literal type="number" pos:start="122:3" pos:end="122:6">0xe4</literal></expr>, <expr pos:start="122:9" pos:end="122:12"><literal type="number" pos:start="122:9" pos:end="122:12">0x22</literal></expr>, <expr pos:start="122:15" pos:end="122:18"><literal type="number" pos:start="122:15" pos:end="122:18">0xfa</literal></expr>, <expr pos:start="122:21" pos:end="122:24"><literal type="number" pos:start="122:21" pos:end="122:24">0xaf</literal></expr>, <expr pos:start="122:27" pos:end="122:30"><literal type="number" pos:start="122:27" pos:end="122:30">0xe4</literal></expr>, <expr pos:start="122:33" pos:end="122:36"><literal type="number" pos:start="122:33" pos:end="122:36">0x15</literal></expr>, <expr pos:start="122:39" pos:end="122:42"><literal type="number" pos:start="122:39" pos:end="122:42">0xc4</literal></expr>, <expr pos:start="122:45" pos:end="122:48"><literal type="number" pos:start="122:45" pos:end="122:48">0xb9</literal></expr>, <expr pos:start="122:51" pos:end="122:54"><literal type="number" pos:start="122:51" pos:end="122:54">0x85</literal></expr>, <expr pos:start="122:57" pos:end="122:60"><literal type="number" pos:start="122:57" pos:end="122:60">0xcb</literal></expr>, <expr pos:start="122:63" pos:end="122:66"><literal type="number" pos:start="122:63" pos:end="122:66">0x0f</literal></expr>, <expr pos:start="122:69" pos:end="122:72"><literal type="number" pos:start="122:69" pos:end="122:72">0x11</literal></expr>,
  <expr pos:start="123:3" pos:end="123:6"><literal type="number" pos:start="123:3" pos:end="123:6">0xc6</literal></expr>, <expr pos:start="123:9" pos:end="123:12"><literal type="number" pos:start="123:9" pos:end="123:12">0x55</literal></expr>, <expr pos:start="123:15" pos:end="123:18"><literal type="number" pos:start="123:15" pos:end="123:18">0x0d</literal></expr>, <expr pos:start="123:21" pos:end="123:24"><literal type="number" pos:start="123:21" pos:end="123:24">0x31</literal></expr>, <expr pos:start="123:27" pos:end="123:30"><literal type="number" pos:start="123:27" pos:end="123:30">0x5c</literal></expr>, <expr pos:start="123:33" pos:end="123:36"><literal type="number" pos:start="123:33" pos:end="123:36">0xfb</literal></expr>, <expr pos:start="123:39" pos:end="123:42"><literal type="number" pos:start="123:39" pos:end="123:42">0x5e</literal></expr>, <expr pos:start="123:45" pos:end="123:48"><literal type="number" pos:start="123:45" pos:end="123:48">0xcf</literal></expr>, <expr pos:start="123:51" pos:end="123:54"><literal type="number" pos:start="123:51" pos:end="123:54">0x8e</literal></expr>, <expr pos:start="123:57" pos:end="123:60"><literal type="number" pos:start="123:57" pos:end="123:60">0xd1</literal></expr>, <expr pos:start="123:63" pos:end="123:66"><literal type="number" pos:start="123:63" pos:end="123:66">0xde</literal></expr>, <expr pos:start="123:69" pos:end="123:72"><literal type="number" pos:start="123:69" pos:end="123:72">0x77</literal></expr>,
  <expr pos:start="124:3" pos:end="124:6"><literal type="number" pos:start="124:3" pos:end="124:6">0x15</literal></expr>, <expr pos:start="124:9" pos:end="124:12"><literal type="number" pos:start="124:9" pos:end="124:12">0x2c</literal></expr>, <expr pos:start="124:15" pos:end="124:18"><literal type="number" pos:start="124:15" pos:end="124:18">0x8c</literal></expr>, <expr pos:start="124:21" pos:end="124:24"><literal type="number" pos:start="124:21" pos:end="124:24">0x4e</literal></expr>, <expr pos:start="124:27" pos:end="124:30"><literal type="number" pos:start="124:27" pos:end="124:30">0x88</literal></expr>, <expr pos:start="124:33" pos:end="124:36"><literal type="number" pos:start="124:33" pos:end="124:36">0x4e</literal></expr>, <expr pos:start="124:39" pos:end="124:42"><literal type="number" pos:start="124:39" pos:end="124:42">0x21</literal></expr>, <expr pos:start="124:45" pos:end="124:48"><literal type="number" pos:start="124:45" pos:end="124:48">0xb6</literal></expr>, <expr pos:start="124:51" pos:end="124:54"><literal type="number" pos:start="124:51" pos:end="124:54">0x69</literal></expr>, <expr pos:start="124:57" pos:end="124:60"><literal type="number" pos:start="124:57" pos:end="124:60">0x9c</literal></expr>, <expr pos:start="124:63" pos:end="124:66"><literal type="number" pos:start="124:63" pos:end="124:66">0xa7</literal></expr>, <expr pos:start="124:69" pos:end="124:72"><literal type="number" pos:start="124:69" pos:end="124:72">0x7d</literal></expr>,
  <expr pos:start="125:3" pos:end="125:6"><literal type="number" pos:start="125:3" pos:end="125:6">0x06</literal></expr>, <expr pos:start="125:9" pos:end="125:12"><literal type="number" pos:start="125:9" pos:end="125:12">0xc5</literal></expr>, <expr pos:start="125:15" pos:end="125:18"><literal type="number" pos:start="125:15" pos:end="125:18">0x75</literal></expr>, <expr pos:start="125:21" pos:end="125:24"><literal type="number" pos:start="125:21" pos:end="125:24">0x3f</literal></expr>, <expr pos:start="125:27" pos:end="125:30"><literal type="number" pos:start="125:27" pos:end="125:30">0xdc</literal></expr>, <expr pos:start="125:33" pos:end="125:36"><literal type="number" pos:start="125:33" pos:end="125:36">0x18</literal></expr>, <expr pos:start="125:39" pos:end="125:42"><literal type="number" pos:start="125:39" pos:end="125:42">0xf6</literal></expr>, <expr pos:start="125:45" pos:end="125:48"><literal type="number" pos:start="125:45" pos:end="125:48">0x00</literal></expr>, <expr pos:start="125:51" pos:end="125:54"><literal type="number" pos:start="125:51" pos:end="125:54">0x51</literal></expr>, <expr pos:start="125:57" pos:end="125:60"><literal type="number" pos:start="125:57" pos:end="125:60">0xd5</literal></expr>, <expr pos:start="125:63" pos:end="125:66"><literal type="number" pos:start="125:63" pos:end="125:66">0x00</literal></expr>, <expr pos:start="125:69" pos:end="125:72"><literal type="number" pos:start="125:69" pos:end="125:72">0x47</literal></expr>,
  <expr pos:start="126:3" pos:end="126:6"><literal type="number" pos:start="126:3" pos:end="126:6">0x62</literal></expr>, <expr pos:start="126:9" pos:end="126:12"><literal type="number" pos:start="126:9" pos:end="126:12">0xfc</literal></expr>, <expr pos:start="126:15" pos:end="126:18"><literal type="number" pos:start="126:15" pos:end="126:18">0x95</literal></expr>, <expr pos:start="126:21" pos:end="126:24"><literal type="number" pos:start="126:21" pos:end="126:24">0xc8</literal></expr>, <expr pos:start="126:27" pos:end="126:30"><literal type="number" pos:start="126:27" pos:end="126:30">0xd4</literal></expr>, <expr pos:start="126:33" pos:end="126:36"><literal type="number" pos:start="126:33" pos:end="126:36">0xef</literal></expr>, <expr pos:start="126:39" pos:end="126:42"><literal type="number" pos:start="126:39" pos:end="126:42">0x31</literal></expr>, <expr pos:start="126:45" pos:end="126:48"><literal type="number" pos:start="126:45" pos:end="126:48">0x4a</literal></expr>, <expr pos:start="126:51" pos:end="126:54"><literal type="number" pos:start="126:51" pos:end="126:54">0xb0</literal></expr>, <expr pos:start="126:57" pos:end="126:60"><literal type="number" pos:start="126:57" pos:end="126:60">0x15</literal></expr>, <expr pos:start="126:63" pos:end="126:66"><literal type="number" pos:start="126:63" pos:end="126:66">0xa9</literal></expr>, <expr pos:start="126:69" pos:end="126:72"><literal type="number" pos:start="126:69" pos:end="126:72">0x50</literal></expr>,
  <expr pos:start="127:3" pos:end="127:6"><literal type="number" pos:start="127:3" pos:end="127:6">0x04</literal></expr>, <expr pos:start="127:9" pos:end="127:12"><literal type="number" pos:start="127:9" pos:end="127:12">0x6e</literal></expr>, <expr pos:start="127:15" pos:end="127:18"><literal type="number" pos:start="127:15" pos:end="127:18">0x13</literal></expr>, <expr pos:start="127:21" pos:end="127:24"><literal type="number" pos:start="127:21" pos:end="127:24">0x14</literal></expr>, <expr pos:start="127:27" pos:end="127:30"><literal type="number" pos:start="127:27" pos:end="127:30">0xd4</literal></expr>, <expr pos:start="127:33" pos:end="127:36"><literal type="number" pos:start="127:33" pos:end="127:36">0xbb</literal></expr>, <expr pos:start="127:39" pos:end="127:42"><literal type="number" pos:start="127:39" pos:end="127:42">0x56</literal></expr>, <expr pos:start="127:45" pos:end="127:48"><literal type="number" pos:start="127:45" pos:end="127:48">0x22</literal></expr>, <expr pos:start="127:51" pos:end="127:54"><literal type="number" pos:start="127:51" pos:end="127:54">0x6f</literal></expr>, <expr pos:start="127:57" pos:end="127:60"><literal type="number" pos:start="127:57" pos:end="127:60">0x3b</literal></expr>, <expr pos:start="127:63" pos:end="127:66"><literal type="number" pos:start="127:63" pos:end="127:66">0x91</literal></expr>, <expr pos:start="127:69" pos:end="127:72"><literal type="number" pos:start="127:69" pos:end="127:72">0xb6</literal></expr>,
  <expr pos:start="128:3" pos:end="128:6"><literal type="number" pos:start="128:3" pos:end="128:6">0xeb</literal></expr>, <expr pos:start="128:9" pos:end="128:12"><literal type="number" pos:start="128:9" pos:end="128:12">0xba</literal></expr>, <expr pos:start="128:15" pos:end="128:18"><literal type="number" pos:start="128:15" pos:end="128:18">0x25</literal></expr>, <expr pos:start="128:21" pos:end="128:24"><literal type="number" pos:start="128:21" pos:end="128:24">0x8f</literal></expr>, <expr pos:start="128:27" pos:end="128:30"><literal type="number" pos:start="128:27" pos:end="128:30">0x12</literal></expr>, <expr pos:start="128:33" pos:end="128:36"><literal type="number" pos:start="128:33" pos:end="128:36">0xea</literal></expr>, <expr pos:start="128:39" pos:end="128:42"><literal type="number" pos:start="128:39" pos:end="128:42">0xfd</literal></expr>, <expr pos:start="128:45" pos:end="128:48"><literal type="number" pos:start="128:45" pos:end="128:48">0xd4</literal></expr>, <expr pos:start="128:51" pos:end="128:54"><literal type="number" pos:start="128:51" pos:end="128:54">0xd0</literal></expr>, <expr pos:start="128:57" pos:end="128:60"><literal type="number" pos:start="128:57" pos:end="128:60">0x6d</literal></expr>, <expr pos:start="128:63" pos:end="128:66"><literal type="number" pos:start="128:63" pos:end="128:66">0x02</literal></expr>, <expr pos:start="128:69" pos:end="128:72"><literal type="number" pos:start="128:69" pos:end="128:72">0x03</literal></expr>,
  <expr pos:start="129:3" pos:end="129:6"><literal type="number" pos:start="129:3" pos:end="129:6">0x01</literal></expr>, <expr pos:start="129:9" pos:end="129:12"><literal type="number" pos:start="129:9" pos:end="129:12">0x00</literal></expr>, <expr pos:start="129:15" pos:end="129:18"><literal type="number" pos:start="129:15" pos:end="129:18">0x01</literal></expr>, <expr pos:start="129:21" pos:end="129:24"><literal type="number" pos:start="129:21" pos:end="129:24">0xa0</literal></expr>, <expr pos:start="129:27" pos:end="129:30"><literal type="number" pos:start="129:27" pos:end="129:30">0x00</literal></expr>, <expr pos:start="129:33" pos:end="129:36"><literal type="number" pos:start="129:33" pos:end="129:36">0x30</literal></expr>, <expr pos:start="129:39" pos:end="129:42"><literal type="number" pos:start="129:39" pos:end="129:42">0x0d</literal></expr>, <expr pos:start="129:45" pos:end="129:48"><literal type="number" pos:start="129:45" pos:end="129:48">0x06</literal></expr>, <expr pos:start="129:51" pos:end="129:54"><literal type="number" pos:start="129:51" pos:end="129:54">0x09</literal></expr>, <expr pos:start="129:57" pos:end="129:60"><literal type="number" pos:start="129:57" pos:end="129:60">0x2a</literal></expr>, <expr pos:start="129:63" pos:end="129:66"><literal type="number" pos:start="129:63" pos:end="129:66">0x86</literal></expr>, <expr pos:start="129:69" pos:end="129:72"><literal type="number" pos:start="129:69" pos:end="129:72">0x48</literal></expr>,
  <expr pos:start="130:3" pos:end="130:6"><literal type="number" pos:start="130:3" pos:end="130:6">0x86</literal></expr>, <expr pos:start="130:9" pos:end="130:12"><literal type="number" pos:start="130:9" pos:end="130:12">0xf7</literal></expr>, <expr pos:start="130:15" pos:end="130:18"><literal type="number" pos:start="130:15" pos:end="130:18">0x0d</literal></expr>, <expr pos:start="130:21" pos:end="130:24"><literal type="number" pos:start="130:21" pos:end="130:24">0x01</literal></expr>, <expr pos:start="130:27" pos:end="130:30"><literal type="number" pos:start="130:27" pos:end="130:30">0x01</literal></expr>, <expr pos:start="130:33" pos:end="130:36"><literal type="number" pos:start="130:33" pos:end="130:36">0x05</literal></expr>, <expr pos:start="130:39" pos:end="130:42"><literal type="number" pos:start="130:39" pos:end="130:42">0x05</literal></expr>, <expr pos:start="130:45" pos:end="130:48"><literal type="number" pos:start="130:45" pos:end="130:48">0x00</literal></expr>, <expr pos:start="130:51" pos:end="130:54"><literal type="number" pos:start="130:51" pos:end="130:54">0x03</literal></expr>, <expr pos:start="130:57" pos:end="130:60"><literal type="number" pos:start="130:57" pos:end="130:60">0x81</literal></expr>, <expr pos:start="130:63" pos:end="130:66"><literal type="number" pos:start="130:63" pos:end="130:66">0x81</literal></expr>, <expr pos:start="130:69" pos:end="130:72"><literal type="number" pos:start="130:69" pos:end="130:72">0x00</literal></expr>,
  <expr pos:start="131:3" pos:end="131:6"><literal type="number" pos:start="131:3" pos:end="131:6">0x3b</literal></expr>, <expr pos:start="131:9" pos:end="131:12"><literal type="number" pos:start="131:9" pos:end="131:12">0xa5</literal></expr>, <expr pos:start="131:15" pos:end="131:18"><literal type="number" pos:start="131:15" pos:end="131:18">0xb4</literal></expr>, <expr pos:start="131:21" pos:end="131:24"><literal type="number" pos:start="131:21" pos:end="131:24">0x97</literal></expr>, <expr pos:start="131:27" pos:end="131:30"><literal type="number" pos:start="131:27" pos:end="131:30">0x6c</literal></expr>, <expr pos:start="131:33" pos:end="131:36"><literal type="number" pos:start="131:33" pos:end="131:36">0xea</literal></expr>, <expr pos:start="131:39" pos:end="131:42"><literal type="number" pos:start="131:39" pos:end="131:42">0xe4</literal></expr>, <expr pos:start="131:45" pos:end="131:48"><literal type="number" pos:start="131:45" pos:end="131:48">0x9f</literal></expr>, <expr pos:start="131:51" pos:end="131:54"><literal type="number" pos:start="131:51" pos:end="131:54">0xeb</literal></expr>, <expr pos:start="131:57" pos:end="131:60"><literal type="number" pos:start="131:57" pos:end="131:60">0x56</literal></expr>, <expr pos:start="131:63" pos:end="131:66"><literal type="number" pos:start="131:63" pos:end="131:66">0xca</literal></expr>, <expr pos:start="131:69" pos:end="131:72"><literal type="number" pos:start="131:69" pos:end="131:72">0x7a</literal></expr>,
  <expr pos:start="132:3" pos:end="132:6"><literal type="number" pos:start="132:3" pos:end="132:6">0x7f</literal></expr>, <expr pos:start="132:9" pos:end="132:12"><literal type="number" pos:start="132:9" pos:end="132:12">0xfa</literal></expr>, <expr pos:start="132:15" pos:end="132:18"><literal type="number" pos:start="132:15" pos:end="132:18">0x53</literal></expr>, <expr pos:start="132:21" pos:end="132:24"><literal type="number" pos:start="132:21" pos:end="132:24">0x8d</literal></expr>, <expr pos:start="132:27" pos:end="132:30"><literal type="number" pos:start="132:27" pos:end="132:30">0xee</literal></expr>, <expr pos:start="132:33" pos:end="132:36"><literal type="number" pos:start="132:33" pos:end="132:36">0x6f</literal></expr>, <expr pos:start="132:39" pos:end="132:42"><literal type="number" pos:start="132:39" pos:end="132:42">0x7e</literal></expr>, <expr pos:start="132:45" pos:end="132:48"><literal type="number" pos:start="132:45" pos:end="132:48">0xa1</literal></expr>, <expr pos:start="132:51" pos:end="132:54"><literal type="number" pos:start="132:51" pos:end="132:54">0x08</literal></expr>, <expr pos:start="132:57" pos:end="132:60"><literal type="number" pos:start="132:57" pos:end="132:60">0x65</literal></expr>, <expr pos:start="132:63" pos:end="132:66"><literal type="number" pos:start="132:63" pos:end="132:66">0xe0</literal></expr>, <expr pos:start="132:69" pos:end="132:72"><literal type="number" pos:start="132:69" pos:end="132:72">0x05</literal></expr>,
  <expr pos:start="133:3" pos:end="133:6"><literal type="number" pos:start="133:3" pos:end="133:6">0x5b</literal></expr>, <expr pos:start="133:9" pos:end="133:12"><literal type="number" pos:start="133:9" pos:end="133:12">0x0e</literal></expr>, <expr pos:start="133:15" pos:end="133:18"><literal type="number" pos:start="133:15" pos:end="133:18">0x5a</literal></expr>, <expr pos:start="133:21" pos:end="133:24"><literal type="number" pos:start="133:21" pos:end="133:24">0x92</literal></expr>, <expr pos:start="133:27" pos:end="133:30"><literal type="number" pos:start="133:27" pos:end="133:30">0xdb</literal></expr>, <expr pos:start="133:33" pos:end="133:36"><literal type="number" pos:start="133:33" pos:end="133:36">0x3c</literal></expr>, <expr pos:start="133:39" pos:end="133:42"><literal type="number" pos:start="133:39" pos:end="133:42">0xc5</literal></expr>, <expr pos:start="133:45" pos:end="133:48"><literal type="number" pos:start="133:45" pos:end="133:48">0x6d</literal></expr>, <expr pos:start="133:51" pos:end="133:54"><literal type="number" pos:start="133:51" pos:end="133:54">0x0d</literal></expr>, <expr pos:start="133:57" pos:end="133:60"><literal type="number" pos:start="133:57" pos:end="133:60">0xcd</literal></expr>, <expr pos:start="133:63" pos:end="133:66"><literal type="number" pos:start="133:63" pos:end="133:66">0x2c</literal></expr>, <expr pos:start="133:69" pos:end="133:72"><literal type="number" pos:start="133:69" pos:end="133:72">0xcd</literal></expr>,
  <expr pos:start="134:3" pos:end="134:6"><literal type="number" pos:start="134:3" pos:end="134:6">0x4d</literal></expr>, <expr pos:start="134:9" pos:end="134:12"><literal type="number" pos:start="134:9" pos:end="134:12">0x10</literal></expr>, <expr pos:start="134:15" pos:end="134:18"><literal type="number" pos:start="134:15" pos:end="134:18">0x2a</literal></expr>, <expr pos:start="134:21" pos:end="134:24"><literal type="number" pos:start="134:21" pos:end="134:24">0x92</literal></expr>, <expr pos:start="134:27" pos:end="134:30"><literal type="number" pos:start="134:27" pos:end="134:30">0x78</literal></expr>, <expr pos:start="134:33" pos:end="134:36"><literal type="number" pos:start="134:33" pos:end="134:36">0x1d</literal></expr>, <expr pos:start="134:39" pos:end="134:42"><literal type="number" pos:start="134:39" pos:end="134:42">0xfb</literal></expr>, <expr pos:start="134:45" pos:end="134:48"><literal type="number" pos:start="134:45" pos:end="134:48">0x92</literal></expr>, <expr pos:start="134:51" pos:end="134:54"><literal type="number" pos:start="134:51" pos:end="134:54">0x66</literal></expr>, <expr pos:start="134:57" pos:end="134:60"><literal type="number" pos:start="134:57" pos:end="134:60">0x33</literal></expr>, <expr pos:start="134:63" pos:end="134:66"><literal type="number" pos:start="134:63" pos:end="134:66">0x18</literal></expr>, <expr pos:start="134:69" pos:end="134:72"><literal type="number" pos:start="134:69" pos:end="134:72">0xdd</literal></expr>,
  <expr pos:start="135:3" pos:end="135:6"><literal type="number" pos:start="135:3" pos:end="135:6">0xf8</literal></expr>, <expr pos:start="135:9" pos:end="135:12"><literal type="number" pos:start="135:9" pos:end="135:12">0x78</literal></expr>, <expr pos:start="135:15" pos:end="135:18"><literal type="number" pos:start="135:15" pos:end="135:18">0xc5</literal></expr>, <expr pos:start="135:21" pos:end="135:24"><literal type="number" pos:start="135:21" pos:end="135:24">0x1a</literal></expr>, <expr pos:start="135:27" pos:end="135:30"><literal type="number" pos:start="135:27" pos:end="135:30">0x03</literal></expr>, <expr pos:start="135:33" pos:end="135:36"><literal type="number" pos:start="135:33" pos:end="135:36">0xf9</literal></expr>, <expr pos:start="135:39" pos:end="135:42"><literal type="number" pos:start="135:39" pos:end="135:42">0x58</literal></expr>, <expr pos:start="135:45" pos:end="135:48"><literal type="number" pos:start="135:45" pos:end="135:48">0x9f</literal></expr>, <expr pos:start="135:51" pos:end="135:54"><literal type="number" pos:start="135:51" pos:end="135:54">0x32</literal></expr>, <expr pos:start="135:57" pos:end="135:60"><literal type="number" pos:start="135:57" pos:end="135:60">0x49</literal></expr>, <expr pos:start="135:63" pos:end="135:66"><literal type="number" pos:start="135:63" pos:end="135:66">0xde</literal></expr>, <expr pos:start="135:69" pos:end="135:72"><literal type="number" pos:start="135:69" pos:end="135:72">0xd2</literal></expr>,
  <expr pos:start="136:3" pos:end="136:6"><literal type="number" pos:start="136:3" pos:end="136:6">0x26</literal></expr>, <expr pos:start="136:9" pos:end="136:12"><literal type="number" pos:start="136:9" pos:end="136:12">0x78</literal></expr>, <expr pos:start="136:15" pos:end="136:18"><literal type="number" pos:start="136:15" pos:end="136:18">0x80</literal></expr>, <expr pos:start="136:21" pos:end="136:24"><literal type="number" pos:start="136:21" pos:end="136:24">0x87</literal></expr>, <expr pos:start="136:27" pos:end="136:30"><literal type="number" pos:start="136:27" pos:end="136:30">0x18</literal></expr>, <expr pos:start="136:33" pos:end="136:36"><literal type="number" pos:start="136:33" pos:end="136:36">0xf3</literal></expr>, <expr pos:start="136:39" pos:end="136:42"><literal type="number" pos:start="136:39" pos:end="136:42">0x6d</literal></expr>, <expr pos:start="136:45" pos:end="136:48"><literal type="number" pos:start="136:45" pos:end="136:48">0xc3</literal></expr>, <expr pos:start="136:51" pos:end="136:54"><literal type="number" pos:start="136:51" pos:end="136:54">0x35</literal></expr>, <expr pos:start="136:57" pos:end="136:60"><literal type="number" pos:start="136:57" pos:end="136:60">0x5d</literal></expr>, <expr pos:start="136:63" pos:end="136:66"><literal type="number" pos:start="136:63" pos:end="136:66">0x21</literal></expr>, <expr pos:start="136:69" pos:end="136:72"><literal type="number" pos:start="136:69" pos:end="136:72">0x8b</literal></expr>,
  <expr pos:start="137:3" pos:end="137:6"><literal type="number" pos:start="137:3" pos:end="137:6">0x4c</literal></expr>, <expr pos:start="137:9" pos:end="137:12"><literal type="number" pos:start="137:9" pos:end="137:12">0x8c</literal></expr>, <expr pos:start="137:15" pos:end="137:18"><literal type="number" pos:start="137:15" pos:end="137:18">0x87</literal></expr>, <expr pos:start="137:21" pos:end="137:24"><literal type="number" pos:start="137:21" pos:end="137:24">0xef</literal></expr>, <expr pos:start="137:27" pos:end="137:30"><literal type="number" pos:start="137:27" pos:end="137:30">0xb1</literal></expr>, <expr pos:start="137:33" pos:end="137:36"><literal type="number" pos:start="137:33" pos:end="137:36">0xfc</literal></expr>, <expr pos:start="137:39" pos:end="137:42"><literal type="number" pos:start="137:39" pos:end="137:42">0x2c</literal></expr>, <expr pos:start="137:45" pos:end="137:48"><literal type="number" pos:start="137:45" pos:end="137:48">0xec</literal></expr>, <expr pos:start="137:51" pos:end="137:54"><literal type="number" pos:start="137:51" pos:end="137:54">0xdb</literal></expr>, <expr pos:start="137:57" pos:end="137:60"><literal type="number" pos:start="137:57" pos:end="137:60">0xd6</literal></expr>, <expr pos:start="137:63" pos:end="137:66"><literal type="number" pos:start="137:63" pos:end="137:66">0x00</literal></expr>, <expr pos:start="137:69" pos:end="137:72"><literal type="number" pos:start="137:69" pos:end="137:72">0xe5</literal></expr>,
  <expr pos:start="138:3" pos:end="138:6"><literal type="number" pos:start="138:3" pos:end="138:6">0x21</literal></expr>, <expr pos:start="138:9" pos:end="138:12"><literal type="number" pos:start="138:9" pos:end="138:12">0xfa</literal></expr>, <expr pos:start="138:15" pos:end="138:18"><literal type="number" pos:start="138:15" pos:end="138:18">0x34</literal></expr>, <expr pos:start="138:21" pos:end="138:24"><literal type="number" pos:start="138:21" pos:end="138:24">0x5a</literal></expr>, <expr pos:start="138:27" pos:end="138:30"><literal type="number" pos:start="138:27" pos:end="138:30">0x3c</literal></expr>, <expr pos:start="138:33" pos:end="138:36"><literal type="number" pos:start="138:33" pos:end="138:36">0xc3</literal></expr>, <expr pos:start="138:39" pos:end="138:42"><literal type="number" pos:start="138:39" pos:end="138:42">0x82</literal></expr>, <expr pos:start="138:45" pos:end="138:48"><literal type="number" pos:start="138:45" pos:end="138:48">0x52</literal></expr>, <expr pos:start="138:51" pos:end="138:54"><literal type="number" pos:start="138:51" pos:end="138:54">0x6f</literal></expr>, <expr pos:start="138:57" pos:end="138:60"><literal type="number" pos:start="138:57" pos:end="138:60">0x81</literal></expr>, <expr pos:start="138:63" pos:end="138:66"><literal type="number" pos:start="138:63" pos:end="138:66">0x2a</literal></expr>, <expr pos:start="138:69" pos:end="138:72"><literal type="number" pos:start="138:69" pos:end="138:72">0x05</literal></expr>,
  <expr pos:start="139:3" pos:end="139:6"><literal type="number" pos:start="139:3" pos:end="139:6">0xcc</literal></expr>, <expr pos:start="139:9" pos:end="139:12"><literal type="number" pos:start="139:9" pos:end="139:12">0xdc</literal></expr>, <expr pos:start="139:15" pos:end="139:18"><literal type="number" pos:start="139:15" pos:end="139:18">0x8a</literal></expr>, <expr pos:start="139:21" pos:end="139:24"><literal type="number" pos:start="139:21" pos:end="139:24">0x51</literal></expr>, <expr pos:start="139:27" pos:end="139:30"><literal type="number" pos:start="139:27" pos:end="139:30">0xf6</literal></expr>, <expr pos:start="139:33" pos:end="139:36"><literal type="number" pos:start="139:33" pos:end="139:36">0x65</literal></expr>, <expr pos:start="139:39" pos:end="139:42"><literal type="number" pos:start="139:39" pos:end="139:42">0x1d</literal></expr>, <expr pos:start="139:45" pos:end="139:48"><literal type="number" pos:start="139:45" pos:end="139:48">0xc5</literal></expr>, <expr pos:start="139:51" pos:end="139:54"><literal type="number" pos:start="139:51" pos:end="139:54">0x64</literal></expr>, <expr pos:start="139:57" pos:end="139:60"><literal type="number" pos:start="139:57" pos:end="139:60">0x86</literal></expr>, <expr pos:start="139:63" pos:end="139:66"><literal type="number" pos:start="139:63" pos:end="139:66">0xc1</literal></expr>, <expr pos:start="139:69" pos:end="139:72"><literal type="number" pos:start="139:69" pos:end="139:72">0x28</literal></expr>,
  <expr pos:start="140:3" pos:end="140:6"><literal type="number" pos:start="140:3" pos:end="140:6">0xf5</literal></expr>, <expr pos:start="140:9" pos:end="140:12"><literal type="number" pos:start="140:9" pos:end="140:12">0x0c</literal></expr>, <expr pos:start="140:15" pos:end="140:18"><literal type="number" pos:start="140:15" pos:end="140:18">0x8f</literal></expr>, <expr pos:start="140:21" pos:end="140:24"><literal type="number" pos:start="140:21" pos:end="140:24">0x09</literal></expr>, <expr pos:start="140:27" pos:end="140:30"><literal type="number" pos:start="140:27" pos:end="140:30">0xd4</literal></expr>, <expr pos:start="140:33" pos:end="140:36"><literal type="number" pos:start="140:33" pos:end="140:36">0x84</literal></expr>, <expr pos:start="140:39" pos:end="140:42"><literal type="number" pos:start="140:39" pos:end="140:42">0x8f</literal></expr>, <expr pos:start="140:45" pos:end="140:48"><literal type="number" pos:start="140:45" pos:end="140:48">0x69</literal></expr>, <expr pos:start="140:51" pos:end="140:54"><literal type="number" pos:start="140:51" pos:end="140:54">0x04</literal></expr>, <expr pos:start="140:57" pos:end="140:60"><literal type="number" pos:start="140:57" pos:end="140:60">0x24</literal></expr>, <expr pos:start="140:63" pos:end="140:66"><literal type="number" pos:start="140:63" pos:end="140:66">0x65</literal></expr>, <expr pos:start="140:69" pos:end="140:72"><literal type="number" pos:start="140:69" pos:end="140:72">0xf4</literal></expr>,
  <expr pos:start="141:3" pos:end="141:6"><literal type="number" pos:start="141:3" pos:end="141:6">0x47</literal></expr>, <expr pos:start="141:9" pos:end="141:12"><literal type="number" pos:start="141:9" pos:end="141:12">0x6c</literal></expr>, <expr pos:start="141:15" pos:end="141:18"><literal type="number" pos:start="141:15" pos:end="141:18">0x90</literal></expr>, <expr pos:start="141:21" pos:end="141:24"><literal type="number" pos:start="141:21" pos:end="141:24">0x57</literal></expr>, <expr pos:start="141:27" pos:end="141:30"><literal type="number" pos:start="141:27" pos:end="141:30">0x3c</literal></expr>, <expr pos:start="141:33" pos:end="141:36"><literal type="number" pos:start="141:33" pos:end="141:36">0x04</literal></expr>, <expr pos:start="141:39" pos:end="141:42"><literal type="number" pos:start="141:39" pos:end="141:42">0x4d</literal></expr>, <expr pos:start="141:45" pos:end="141:48"><literal type="number" pos:start="141:45" pos:end="141:48">0x52</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="143:1" pos:end="154:0"><decl pos:start="143:1" pos:end="143:49"><type pos:start="143:1" pos:end="143:19"><specifier pos:start="143:1" pos:end="143:6">static</specifier> <name pos:start="143:8" pos:end="143:15">unsigned</name> <name pos:start="143:17" pos:end="143:19">int</name></type> <name pos:start="143:21" pos:end="143:43">US899_VALID_CSR_DER_LEN</name> <init pos:start="143:45" pos:end="143:49">= <expr pos:start="143:47" pos:end="143:49"><literal type="number" pos:start="143:47" pos:end="143:49">428</literal></expr></init></decl>;</decl_stmt>
<cpp:if pos:start="144:1" pos:end="144:5">#<cpp:directive pos:start="144:2" pos:end="144:3">if</cpp:directive> <expr pos:start="144:5" pos:end="144:5"><literal type="number" pos:start="144:5" pos:end="144:5">0</literal></expr></cpp:if>
<comment type="line" pos:start="145:1" pos:end="145:63">//Leaving this in for now, we may need this for some test cases</comment>
static FILE *outfile;
static size_t write_func(void *ptr, size_t size, size_t nmemb, void *userdata)
{
    size_t written;
    written = fwrite(ptr,size,nmemb,outfile);
    return written;
}
<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

<function pos:start="155:1" pos:end="157:1"><type pos:start="155:1" pos:end="155:11"><specifier pos:start="155:1" pos:end="155:6">static</specifier> <name pos:start="155:8" pos:end="155:11">void</name></type> <name pos:start="155:13" pos:end="155:23">us899_clean</name> <parameter_list pos:start="155:25" pos:end="155:30">(<parameter pos:start="155:26" pos:end="155:29"><decl pos:start="155:26" pos:end="155:29"><type pos:start="155:26" pos:end="155:29"><name pos:start="155:26" pos:end="155:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="156:1" pos:end="157:1">{<block_content>
</block_content>}</block></function>

<function pos:start="159:1" pos:end="174:1"><type pos:start="159:1" pos:end="159:10"><specifier pos:start="159:1" pos:end="159:6">static</specifier> <name pos:start="159:8" pos:end="159:10">int</name></type> <name pos:start="159:12" pos:end="159:29">us899_start_server</name> <parameter_list pos:start="159:31" pos:end="159:58">(<parameter pos:start="159:32" pos:end="159:48"><decl pos:start="159:32" pos:end="159:48"><type pos:start="159:32" pos:end="159:48"><name pos:start="159:32" pos:end="159:34">int</name></type> <name pos:start="159:36" pos:end="159:48">manual_enroll</name></decl></parameter>, <parameter pos:start="159:51" pos:end="159:57"><decl pos:start="159:51" pos:end="159:57"><type pos:start="159:51" pos:end="159:57"><name pos:start="159:51" pos:end="159:53">int</name></type> <name pos:start="159:55" pos:end="159:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="160:1" pos:end="174:1">{<block_content pos:start="161:5" pos:end="173:14">
    <decl_stmt pos:start="161:5" pos:end="161:11"><decl pos:start="161:5" pos:end="161:10"><type pos:start="161:5" pos:end="161:7"><name pos:start="161:5" pos:end="161:7">int</name></type> <name pos:start="161:9" pos:end="161:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="163:5" pos:end="172:23"><expr pos:start="163:5" pos:end="172:22"><name pos:start="163:5" pos:end="163:6">rv</name> <operator pos:start="163:8" pos:end="163:8">=</operator> <call pos:start="163:10" pos:end="172:22"><name pos:start="163:10" pos:end="163:17">st_start</name><argument_list pos:start="163:18" pos:end="172:22">(<argument pos:start="163:19" pos:end="163:35"><expr pos:start="163:19" pos:end="163:35"><name pos:start="163:19" pos:end="163:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="164:19" pos:end="164:38"><expr pos:start="164:19" pos:end="164:38"><name pos:start="164:19" pos:end="164:38">US899_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="165:19" pos:end="165:38"><expr pos:start="165:19" pos:end="165:38"><name pos:start="165:19" pos:end="165:38">US899_SERVER_CERTKEY</name></expr></argument>,
	          <argument pos:start="166:19" pos:end="166:36"><expr pos:start="166:19" pos:end="166:36"><literal type="string" pos:start="166:19" pos:end="166:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="167:19" pos:end="167:31"><expr pos:start="167:19" pos:end="167:31"><name pos:start="167:19" pos:end="167:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="168:19" pos:end="168:35"><expr pos:start="168:19" pos:end="168:35"><name pos:start="168:19" pos:end="168:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="169:19" pos:end="169:39"><expr pos:start="169:19" pos:end="169:39"><literal type="string" pos:start="169:19" pos:end="169:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="170:19" pos:end="170:31"><expr pos:start="170:19" pos:end="170:31"><name pos:start="170:19" pos:end="170:31">manual_enroll</name></expr></argument>,
		  <argument pos:start="171:19" pos:end="171:19"><expr pos:start="171:19" pos:end="171:19"><literal type="number" pos:start="171:19" pos:end="171:19">0</literal></expr></argument>,
		  <argument pos:start="172:19" pos:end="172:21"><expr pos:start="172:19" pos:end="172:21"><name pos:start="172:19" pos:end="172:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="173:5" pos:end="173:14">return <expr pos:start="173:12" pos:end="173:13"><name pos:start="173:12" pos:end="173:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="176:1" pos:end="180:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="181:1" pos:end="207:1"><type pos:start="181:1" pos:end="181:10"><specifier pos:start="181:1" pos:end="181:6">static</specifier> <name pos:start="181:8" pos:end="181:10">int</name></type> <name pos:start="181:12" pos:end="181:27">us899_init_suite</name> <parameter_list pos:start="181:29" pos:end="181:34">(<parameter pos:start="181:30" pos:end="181:33"><decl pos:start="181:30" pos:end="181:33"><type pos:start="181:30" pos:end="181:33"><name pos:start="181:30" pos:end="181:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="182:1" pos:end="207:1">{<block_content pos:start="183:5" pos:end="206:14">
    <decl_stmt pos:start="183:5" pos:end="186:0"><decl pos:start="183:5" pos:end="183:10"><type pos:start="183:5" pos:end="183:7"><name pos:start="183:5" pos:end="183:7">int</name></type> <name pos:start="183:9" pos:end="183:10">rv</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="185:1" pos:end="185:12">#<cpp:directive pos:start="185:2" pos:end="185:6">ifdef</cpp:directive> <name pos:start="185:8" pos:end="185:12">WIN32</name></cpp:ifdef>
    <expr_stmt pos:start="186:5" pos:end="186:57"><expr pos:start="186:5" pos:end="186:56"><call pos:start="186:5" pos:end="186:56"><name pos:start="186:5" pos:end="186:29">InitializeCriticalSection</name> <argument_list pos:start="186:31" pos:end="186:56">(<argument pos:start="186:32" pos:end="186:55"><expr pos:start="186:32" pos:end="186:55"><operator pos:start="186:32" pos:end="186:32">&amp;</operator><name pos:start="186:33" pos:end="186:55">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="187:5" pos:end="189:0"><expr pos:start="187:5" pos:end="187:59"><call pos:start="187:5" pos:end="187:59"><name pos:start="187:5" pos:end="187:19">est_init_logger</name><argument_list pos:start="187:20" pos:end="187:59">(<argument pos:start="187:21" pos:end="187:36"><expr pos:start="187:21" pos:end="187:36"><name pos:start="187:21" pos:end="187:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="187:39" pos:end="187:58"><expr pos:start="187:39" pos:end="187:58"><operator pos:start="187:39" pos:end="187:39">&amp;</operator><name pos:start="187:40" pos:end="187:58">us899_logger_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="188:1" pos:end="188:6">#<cpp:directive pos:start="188:2" pos:end="188:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="190:5" pos:end="192:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="193:5" pos:end="193:60"><expr pos:start="193:5" pos:end="193:59"><name pos:start="193:5" pos:end="193:15">cacerts_len</name> <operator pos:start="193:17" pos:end="193:17">=</operator> <call pos:start="193:19" pos:end="193:59"><name pos:start="193:19" pos:end="193:34">read_binary_file</name><argument_list pos:start="193:35" pos:end="193:59">(<argument pos:start="193:36" pos:end="193:48"><expr pos:start="193:36" pos:end="193:48"><name pos:start="193:36" pos:end="193:48">US899_CACERTS</name></expr></argument>, <argument pos:start="193:51" pos:end="193:58"><expr pos:start="193:51" pos:end="193:58"><operator pos:start="193:51" pos:end="193:51">&amp;</operator><name pos:start="193:52" pos:end="193:58">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="194:5" pos:end="196:5"><if pos:start="194:5" pos:end="196:5">if <condition pos:start="194:8" pos:end="194:25">(<expr pos:start="194:9" pos:end="194:24"><name pos:start="194:9" pos:end="194:19">cacerts_len</name> <operator pos:start="194:21" pos:end="194:22">&lt;=</operator> <literal type="number" pos:start="194:24" pos:end="194:24">0</literal></expr>)</condition> <block pos:start="194:27" pos:end="196:5">{<block_content pos:start="195:9" pos:end="195:17">
	<return pos:start="195:9" pos:end="195:17">return <expr pos:start="195:16" pos:end="195:16"><literal type="number" pos:start="195:16" pos:end="195:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="198:5" pos:end="198:18"><expr pos:start="198:5" pos:end="198:17"><call pos:start="198:5" pos:end="198:17"><name pos:start="198:5" pos:end="198:15">us899_clean</name><argument_list pos:start="198:16" pos:end="198:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="200:5" pos:end="203:7">/*
     * Start an instance of the EST server with 
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="204:5" pos:end="204:34"><expr pos:start="204:5" pos:end="204:33"><name pos:start="204:5" pos:end="204:6">rv</name> <operator pos:start="204:8" pos:end="204:8">=</operator> <call pos:start="204:10" pos:end="204:33"><name pos:start="204:10" pos:end="204:27">us899_start_server</name><argument_list pos:start="204:28" pos:end="204:33">(<argument pos:start="204:29" pos:end="204:29"><expr pos:start="204:29" pos:end="204:29"><literal type="number" pos:start="204:29" pos:end="204:29">0</literal></expr></argument>, <argument pos:start="204:32" pos:end="204:32"><expr pos:start="204:32" pos:end="204:32"><literal type="number" pos:start="204:32" pos:end="204:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="206:5" pos:end="206:14">return <expr pos:start="206:12" pos:end="206:13"><name pos:start="206:12" pos:end="206:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="210:1" pos:end="214:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="215:1" pos:end="220:1"><type pos:start="215:1" pos:end="215:10"><specifier pos:start="215:1" pos:end="215:6">static</specifier> <name pos:start="215:8" pos:end="215:10">int</name></type> <name pos:start="215:12" pos:end="215:30">us899_destroy_suite</name> <parameter_list pos:start="215:32" pos:end="215:37">(<parameter pos:start="215:33" pos:end="215:36"><decl pos:start="215:33" pos:end="215:36"><type pos:start="215:33" pos:end="215:36"><name pos:start="215:33" pos:end="215:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="216:1" pos:end="220:1">{<block_content pos:start="217:5" pos:end="219:13">
    <expr_stmt pos:start="217:5" pos:end="217:14"><expr pos:start="217:5" pos:end="217:13"><call pos:start="217:5" pos:end="217:13"><name pos:start="217:5" pos:end="217:11">st_stop</name><argument_list pos:start="217:12" pos:end="217:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="218:5" pos:end="218:18"><expr pos:start="218:5" pos:end="218:17"><call pos:start="218:5" pos:end="218:17"><name pos:start="218:5" pos:end="218:8">free</name><argument_list pos:start="218:9" pos:end="218:17">(<argument pos:start="218:10" pos:end="218:16"><expr pos:start="218:10" pos:end="218:16"><name pos:start="218:10" pos:end="218:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="219:5" pos:end="219:13">return <expr pos:start="219:12" pos:end="219:12"><literal type="number" pos:start="219:12" pos:end="219:12">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="223:1" pos:end="225:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="226:1" pos:end="255:1"><type pos:start="226:1" pos:end="226:10"><specifier pos:start="226:1" pos:end="226:6">static</specifier> <name pos:start="226:8" pos:end="226:10">int</name></type> <name pos:start="226:12" pos:end="226:36">client_manual_cert_verify</name><parameter_list pos:start="226:37" pos:end="226:76">(<parameter pos:start="226:38" pos:end="226:51"><decl pos:start="226:38" pos:end="226:51"><type pos:start="226:38" pos:end="226:51"><name pos:start="226:38" pos:end="226:41">X509</name> <modifier pos:start="226:43" pos:end="226:43">*</modifier></type><name pos:start="226:44" pos:end="226:51">cur_cert</name></decl></parameter>, <parameter pos:start="226:54" pos:end="226:75"><decl pos:start="226:54" pos:end="226:75"><type pos:start="226:54" pos:end="226:75"><name pos:start="226:54" pos:end="226:56">int</name></type> <name pos:start="226:58" pos:end="226:75">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="227:1" pos:end="255:1">{<block_content pos:start="228:5" pos:end="254:19">
    <decl_stmt pos:start="228:5" pos:end="228:17"><decl pos:start="228:5" pos:end="228:16"><type pos:start="228:5" pos:end="228:9"><name pos:start="228:5" pos:end="228:7">BIO</name> <modifier pos:start="228:9" pos:end="228:9">*</modifier></type><name pos:start="228:10" pos:end="228:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="229:5" pos:end="229:43"><expr pos:start="229:5" pos:end="229:42"><name pos:start="229:5" pos:end="229:11">bio_err</name><operator pos:start="229:12" pos:end="229:12">=</operator><call pos:start="229:13" pos:end="229:42"><name pos:start="229:13" pos:end="229:22">BIO_new_fp</name><argument_list pos:start="229:23" pos:end="229:42">(<argument pos:start="229:24" pos:end="229:29"><expr pos:start="229:24" pos:end="229:29"><name pos:start="229:24" pos:end="229:29">stderr</name></expr></argument>,<argument pos:start="229:31" pos:end="229:41"><expr pos:start="229:31" pos:end="229:41"><name pos:start="229:31" pos:end="229:41">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="230:5" pos:end="230:20"><decl pos:start="230:5" pos:end="230:19"><type pos:start="230:5" pos:end="230:7"><name pos:start="230:5" pos:end="230:7">int</name></type> <name pos:start="230:9" pos:end="230:15">approve</name> <init pos:start="230:17" pos:end="230:19">= <expr pos:start="230:19" pos:end="230:19"><literal type="number" pos:start="230:19" pos:end="230:19">0</literal></expr></init></decl>;</decl_stmt> 
    
    <comment type="block" pos:start="232:5" pos:end="234:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="235:5" pos:end="237:62"><expr pos:start="235:5" pos:end="237:61"><call pos:start="235:5" pos:end="237:61"><name pos:start="235:5" pos:end="235:10">printf</name><argument_list pos:start="235:11" pos:end="237:61">(<argument pos:start="235:12" pos:end="235:117"><expr pos:start="235:12" pos:end="235:117"><literal type="string" pos:start="235:12" pos:end="235:117">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
           <argument pos:start="236:12" pos:end="236:23"><expr pos:start="236:12" pos:end="236:23"><name pos:start="236:12" pos:end="236:23">__FUNCTION__</name></expr></argument>, <argument pos:start="236:26" pos:end="236:43"><expr pos:start="236:26" pos:end="236:43"><name pos:start="236:26" pos:end="236:43">openssl_cert_error</name></expr></argument>,
           <argument pos:start="237:12" pos:end="237:60"><expr pos:start="237:12" pos:end="237:60"><call pos:start="237:12" pos:end="237:60"><name pos:start="237:12" pos:end="237:40">X509_verify_cert_error_string</name><argument_list pos:start="237:41" pos:end="237:60">(<argument pos:start="237:42" pos:end="237:59"><expr pos:start="237:42" pos:end="237:59"><name pos:start="237:42" pos:end="237:59">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="239:5" pos:end="239:30"><expr pos:start="239:5" pos:end="239:29"><call pos:start="239:5" pos:end="239:29"><name pos:start="239:5" pos:end="239:10">printf</name><argument_list pos:start="239:11" pos:end="239:29">(<argument pos:start="239:12" pos:end="239:28"><expr pos:start="239:12" pos:end="239:28"><literal type="string" pos:start="239:12" pos:end="239:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="240:5" pos:end="240:35"><expr pos:start="240:5" pos:end="240:34"><call pos:start="240:5" pos:end="240:34"><name pos:start="240:5" pos:end="240:17">X509_print_fp</name><argument_list pos:start="240:18" pos:end="240:34">(<argument pos:start="240:19" pos:end="240:24"><expr pos:start="240:19" pos:end="240:24"><name pos:start="240:19" pos:end="240:24">stdout</name></expr></argument>,<argument pos:start="240:26" pos:end="240:33"><expr pos:start="240:26" pos:end="240:33"><name pos:start="240:26" pos:end="240:33">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="241:5" pos:end="245:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="246:5" pos:end="246:74"><expr pos:start="246:5" pos:end="246:73"><call pos:start="246:5" pos:end="246:73"><name pos:start="246:5" pos:end="246:24">X509_signature_print</name><argument_list pos:start="246:25" pos:end="246:73">(<argument pos:start="246:26" pos:end="246:32"><expr pos:start="246:26" pos:end="246:32"><name pos:start="246:26" pos:end="246:32">bio_err</name></expr></argument>, <argument pos:start="246:35" pos:end="246:51"><expr pos:start="246:35" pos:end="246:51"><name pos:start="246:35" pos:end="246:51"><name pos:start="246:35" pos:end="246:42">cur_cert</name><operator pos:start="246:43" pos:end="246:44">-&gt;</operator><name pos:start="246:45" pos:end="246:51">sig_alg</name></name></expr></argument>, <argument pos:start="246:54" pos:end="246:72"><expr pos:start="246:54" pos:end="246:72"><name pos:start="246:54" pos:end="246:72"><name pos:start="246:54" pos:end="246:61">cur_cert</name><operator pos:start="246:62" pos:end="246:63">-&gt;</operator><name pos:start="246:64" pos:end="246:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="248:5" pos:end="250:5"><if pos:start="248:5" pos:end="250:5">if <condition pos:start="248:8" pos:end="248:59">(<expr pos:start="248:9" pos:end="248:58"><name pos:start="248:9" pos:end="248:26">openssl_cert_error</name> <operator pos:start="248:28" pos:end="248:29">==</operator> <name pos:start="248:31" pos:end="248:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="248:61" pos:end="250:5">{<block_content pos:start="249:9" pos:end="249:20">
        <expr_stmt pos:start="249:9" pos:end="249:20"><expr pos:start="249:9" pos:end="249:19"><name pos:start="249:9" pos:end="249:15">approve</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <literal type="number" pos:start="249:19" pos:end="249:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt pos:start="252:5" pos:end="252:22"><expr pos:start="252:5" pos:end="252:21"><call pos:start="252:5" pos:end="252:21"><name pos:start="252:5" pos:end="252:12">BIO_free</name><argument_list pos:start="252:13" pos:end="252:21">(<argument pos:start="252:14" pos:end="252:20"><expr pos:start="252:14" pos:end="252:20"><name pos:start="252:14" pos:end="252:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="254:5" pos:end="254:19">return <expr pos:start="254:12" pos:end="254:18"><name pos:start="254:12" pos:end="254:18">approve</name></expr>;</return>
</block_content>}</block></function>    


<function pos:start="258:1" pos:end="284:1"><type pos:start="258:1" pos:end="258:17"><specifier pos:start="258:1" pos:end="258:6">static</specifier> <name pos:start="258:8" pos:end="258:15">EVP_PKEY</name> <modifier pos:start="258:17" pos:end="258:17">*</modifier></type> <name pos:start="258:19" pos:end="258:38">generate_private_key</name> <parameter_list pos:start="258:40" pos:end="258:45">(<parameter pos:start="258:41" pos:end="258:44"><decl pos:start="258:41" pos:end="258:44"><type pos:start="258:41" pos:end="258:44"><name pos:start="258:41" pos:end="258:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="259:1" pos:end="284:1">{<block_content pos:start="260:5" pos:end="283:18">
    <decl_stmt pos:start="260:5" pos:end="260:25"><decl pos:start="260:5" pos:end="260:24"><type pos:start="260:5" pos:end="260:9"><name pos:start="260:5" pos:end="260:7">RSA</name> <modifier pos:start="260:9" pos:end="260:9">*</modifier></type><name pos:start="260:10" pos:end="260:12">rsa</name> <init pos:start="260:14" pos:end="260:24">= <expr pos:start="260:16" pos:end="260:24"><call pos:start="260:16" pos:end="260:24"><name pos:start="260:16" pos:end="260:22">RSA_new</name><argument_list pos:start="260:23" pos:end="260:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="261:5" pos:end="261:26"><decl pos:start="261:5" pos:end="261:25"><type pos:start="261:5" pos:end="261:12"><name pos:start="261:5" pos:end="261:10">BIGNUM</name> <modifier pos:start="261:12" pos:end="261:12">*</modifier></type><name pos:start="261:13" pos:end="261:14">bn</name> <init pos:start="261:16" pos:end="261:25">= <expr pos:start="261:18" pos:end="261:25"><call pos:start="261:18" pos:end="261:25"><name pos:start="261:18" pos:end="261:23">BN_new</name><argument_list pos:start="261:24" pos:end="261:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="262:5" pos:end="262:19"><decl pos:start="262:5" pos:end="262:18"><type pos:start="262:5" pos:end="262:14"><name pos:start="262:5" pos:end="262:12">EVP_PKEY</name> <modifier pos:start="262:14" pos:end="262:14">*</modifier></type><name pos:start="262:15" pos:end="262:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="264:5" pos:end="266:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="267:5" pos:end="267:29"><expr pos:start="267:5" pos:end="267:28"><call pos:start="267:5" pos:end="267:28"><name pos:start="267:5" pos:end="267:15">BN_set_word</name><argument_list pos:start="267:16" pos:end="267:28">(<argument pos:start="267:17" pos:end="267:18"><expr pos:start="267:17" pos:end="267:18"><name pos:start="267:17" pos:end="267:18">bn</name></expr></argument>, <argument pos:start="267:21" pos:end="267:27"><expr pos:start="267:21" pos:end="267:27"><literal type="number" pos:start="267:21" pos:end="267:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="268:5" pos:end="268:45"><expr pos:start="268:5" pos:end="268:44"><call pos:start="268:5" pos:end="268:44"><name pos:start="268:5" pos:end="268:23">RSA_generate_key_ex</name><argument_list pos:start="268:24" pos:end="268:44">(<argument pos:start="268:25" pos:end="268:27"><expr pos:start="268:25" pos:end="268:27"><name pos:start="268:25" pos:end="268:27">rsa</name></expr></argument>, <argument pos:start="268:30" pos:end="268:33"><expr pos:start="268:30" pos:end="268:33"><literal type="number" pos:start="268:30" pos:end="268:33">1024</literal></expr></argument>, <argument pos:start="268:36" pos:end="268:37"><expr pos:start="268:36" pos:end="268:37"><name pos:start="268:36" pos:end="268:37">bn</name></expr></argument>, <argument pos:start="268:40" pos:end="268:43"><expr pos:start="268:40" pos:end="268:43"><name pos:start="268:40" pos:end="268:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <expr_stmt pos:start="270:5" pos:end="270:26"><expr pos:start="270:5" pos:end="270:25"><name pos:start="270:5" pos:end="270:8">pkey</name> <operator pos:start="270:10" pos:end="270:10">=</operator> <call pos:start="270:12" pos:end="270:25"><name pos:start="270:12" pos:end="270:23">EVP_PKEY_new</name><argument_list pos:start="270:24" pos:end="270:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="271:5" pos:end="274:5"><if pos:start="271:5" pos:end="274:5">if <condition pos:start="271:8" pos:end="271:19">(<expr pos:start="271:9" pos:end="271:18"><name pos:start="271:9" pos:end="271:12">pkey</name><operator pos:start="271:13" pos:end="271:14">==</operator><name pos:start="271:15" pos:end="271:18">NULL</name></expr>)</condition> <block pos:start="271:21" pos:end="274:5">{<block_content pos:start="272:9" pos:end="273:20">
        <expr_stmt pos:start="272:9" pos:end="272:71"><expr pos:start="272:9" pos:end="272:70"><call pos:start="272:9" pos:end="272:70"><name pos:start="272:9" pos:end="272:14">printf</name><argument_list pos:start="272:15" pos:end="272:70">(<argument pos:start="272:16" pos:end="272:69"><expr pos:start="272:16" pos:end="272:69"><literal type="string" pos:start="272:16" pos:end="272:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="273:9" pos:end="273:20">return <expr pos:start="273:16" pos:end="273:19"><name pos:start="273:16" pos:end="273:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="275:5" pos:end="278:5"><if pos:start="275:5" pos:end="278:5">if <condition pos:start="275:8" pos:end="275:38">(<expr pos:start="275:9" pos:end="275:37"><operator pos:start="275:9" pos:end="275:9">!</operator><call pos:start="275:10" pos:end="275:37"><name pos:start="275:10" pos:end="275:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="275:27" pos:end="275:37">(<argument pos:start="275:28" pos:end="275:31"><expr pos:start="275:28" pos:end="275:31"><name pos:start="275:28" pos:end="275:31">pkey</name></expr></argument>, <argument pos:start="275:34" pos:end="275:36"><expr pos:start="275:34" pos:end="275:36"><name pos:start="275:34" pos:end="275:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="275:40" pos:end="278:5">{<block_content pos:start="276:9" pos:end="277:20">
        <expr_stmt pos:start="276:9" pos:end="276:69"><expr pos:start="276:9" pos:end="276:68"><call pos:start="276:9" pos:end="276:68"><name pos:start="276:9" pos:end="276:14">printf</name><argument_list pos:start="276:15" pos:end="276:68">(<argument pos:start="276:16" pos:end="276:67"><expr pos:start="276:16" pos:end="276:67"><literal type="string" pos:start="276:16" pos:end="276:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="277:9" pos:end="277:20">return <expr pos:start="277:16" pos:end="277:19"><name pos:start="277:16" pos:end="277:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>        
    
    <expr_stmt pos:start="280:5" pos:end="280:18"><expr pos:start="280:5" pos:end="280:17"><call pos:start="280:5" pos:end="280:17"><name pos:start="280:5" pos:end="280:12">RSA_free</name><argument_list pos:start="280:13" pos:end="280:17">(<argument pos:start="280:14" pos:end="280:16"><expr pos:start="280:14" pos:end="280:16"><name pos:start="280:14" pos:end="280:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="281:5" pos:end="281:16"><expr pos:start="281:5" pos:end="281:15"><call pos:start="281:5" pos:end="281:15"><name pos:start="281:5" pos:end="281:11">BN_free</name><argument_list pos:start="281:12" pos:end="281:15">(<argument pos:start="281:13" pos:end="281:14"><expr pos:start="281:13" pos:end="281:14"><name pos:start="281:13" pos:end="281:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="283:5" pos:end="283:18">return <expr pos:start="283:12" pos:end="283:17"><operator pos:start="283:12" pos:end="283:12">(</operator><name pos:start="283:13" pos:end="283:16">pkey</name><operator pos:start="283:17" pos:end="283:17">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="286:1" pos:end="315:1"><type pos:start="286:1" pos:end="286:10"><specifier pos:start="286:1" pos:end="286:6">static</specifier> <name pos:start="286:8" pos:end="286:10">int</name></type> <name pos:start="286:12" pos:end="286:28">populate_x509_csr</name> <parameter_list pos:start="286:30" pos:end="286:70">(<parameter pos:start="286:31" pos:end="286:43"><decl pos:start="286:31" pos:end="286:43"><type pos:start="286:31" pos:end="286:43"><name pos:start="286:31" pos:end="286:38">X509_REQ</name> <modifier pos:start="286:40" pos:end="286:40">*</modifier></type><name pos:start="286:41" pos:end="286:43">req</name></decl></parameter>, <parameter pos:start="286:46" pos:end="286:59"><decl pos:start="286:46" pos:end="286:59"><type pos:start="286:46" pos:end="286:59"><name pos:start="286:46" pos:end="286:53">EVP_PKEY</name> <modifier pos:start="286:55" pos:end="286:55">*</modifier></type><name pos:start="286:56" pos:end="286:59">pkey</name></decl></parameter>, <parameter pos:start="286:62" pos:end="286:69"><decl pos:start="286:62" pos:end="286:69"><type pos:start="286:62" pos:end="286:69"><name pos:start="286:62" pos:end="286:65">char</name> <modifier pos:start="286:67" pos:end="286:67">*</modifier></type><name pos:start="286:68" pos:end="286:69">cn</name></decl></parameter>)</parameter_list>
<block pos:start="287:1" pos:end="315:1">{<block_content pos:start="288:5" pos:end="314:15">
    <decl_stmt pos:start="288:5" pos:end="288:20"><decl pos:start="288:5" pos:end="288:19"><type pos:start="288:5" pos:end="288:15"><name pos:start="288:5" pos:end="288:13">X509_NAME</name> <modifier pos:start="288:15" pos:end="288:15">*</modifier></type><name pos:start="288:16" pos:end="288:19">subj</name></decl>;</decl_stmt>

    <comment type="block" pos:start="290:5" pos:end="290:30">/* setup version number */</comment>
    <if_stmt pos:start="291:5" pos:end="294:5"><if pos:start="291:5" pos:end="294:5">if <condition pos:start="291:8" pos:end="291:39">(<expr pos:start="291:9" pos:end="291:38"><operator pos:start="291:9" pos:end="291:9">!</operator><call pos:start="291:10" pos:end="291:38"><name pos:start="291:10" pos:end="291:29">X509_REQ_set_version</name><argument_list pos:start="291:30" pos:end="291:38">(<argument pos:start="291:31" pos:end="291:33"><expr pos:start="291:31" pos:end="291:33"><name pos:start="291:31" pos:end="291:33">req</name></expr></argument>, <argument pos:start="291:36" pos:end="291:37"><expr pos:start="291:36" pos:end="291:37"><literal type="number" pos:start="291:36" pos:end="291:37">0L</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:41" pos:end="294:5">{<block_content pos:start="292:9" pos:end="293:20">
	<expr_stmt pos:start="292:9" pos:end="292:50"><expr pos:start="292:9" pos:end="292:49"><call pos:start="292:9" pos:end="292:49"><name pos:start="292:9" pos:end="292:14">printf</name><argument_list pos:start="292:15" pos:end="292:49">(<argument pos:start="292:16" pos:end="292:48"><expr pos:start="292:16" pos:end="292:48"><literal type="string" pos:start="292:16" pos:end="292:48">"\nUnable to set X509 version#\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="293:9" pos:end="293:20">return <expr pos:start="293:16" pos:end="293:19"><operator pos:start="293:16" pos:end="293:16">(</operator><operator pos:start="293:17" pos:end="293:17">-</operator><literal type="number" pos:start="293:18" pos:end="293:18">1</literal><operator pos:start="293:19" pos:end="293:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="296:5" pos:end="298:7">/*
     * Add Common Name entry
     */</comment>
    <expr_stmt pos:start="299:5" pos:end="299:42"><expr pos:start="299:5" pos:end="299:41"><name pos:start="299:5" pos:end="299:8">subj</name> <operator pos:start="299:10" pos:end="299:10">=</operator> <call pos:start="299:12" pos:end="299:41"><name pos:start="299:12" pos:end="299:36">X509_REQ_get_subject_name</name><argument_list pos:start="299:37" pos:end="299:41">(<argument pos:start="299:38" pos:end="299:40"><expr pos:start="299:38" pos:end="299:40"><name pos:start="299:38" pos:end="299:40">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="300:5" pos:end="304:5"><if pos:start="300:5" pos:end="304:5">if <condition pos:start="300:8" pos:end="301:67">(<expr pos:start="300:9" pos:end="301:66"><operator pos:start="300:9" pos:end="300:9">!</operator><call pos:start="300:10" pos:end="301:66"><name pos:start="300:10" pos:end="300:35">X509_NAME_add_entry_by_txt</name><argument_list pos:start="300:36" pos:end="301:66">(<argument pos:start="300:37" pos:end="300:40"><expr pos:start="300:37" pos:end="300:40"><name pos:start="300:37" pos:end="300:40">subj</name></expr></argument>, <argument pos:start="300:43" pos:end="300:46"><expr pos:start="300:43" pos:end="300:46"><literal type="string" pos:start="300:43" pos:end="300:46">"CN"</literal></expr></argument>, <argument pos:start="300:49" pos:end="300:60"><expr pos:start="300:49" pos:end="300:60"><name pos:start="300:49" pos:end="300:60">MBSTRING_ASC</name></expr></argument>,
                                    <argument pos:start="301:37" pos:end="301:54"><expr pos:start="301:37" pos:end="301:54"><operator pos:start="301:37" pos:end="301:37">(</operator><name pos:start="301:38" pos:end="301:45">unsigned</name> <name pos:start="301:47" pos:end="301:50">char</name><operator pos:start="301:51" pos:end="301:51">*</operator><operator pos:start="301:52" pos:end="301:52">)</operator><name pos:start="301:53" pos:end="301:54">cn</name></expr></argument>, <argument pos:start="301:57" pos:end="301:58"><expr pos:start="301:57" pos:end="301:58"><operator pos:start="301:57" pos:end="301:57">-</operator><literal type="number" pos:start="301:58" pos:end="301:58">1</literal></expr></argument>, <argument pos:start="301:61" pos:end="301:62"><expr pos:start="301:61" pos:end="301:62"><operator pos:start="301:61" pos:end="301:61">-</operator><literal type="number" pos:start="301:62" pos:end="301:62">1</literal></expr></argument>, <argument pos:start="301:65" pos:end="301:65"><expr pos:start="301:65" pos:end="301:65"><literal type="number" pos:start="301:65" pos:end="301:65">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="301:69" pos:end="304:5">{<block_content pos:start="302:9" pos:end="303:20">
	<expr_stmt pos:start="302:9" pos:end="302:62"><expr pos:start="302:9" pos:end="302:61"><call pos:start="302:9" pos:end="302:61"><name pos:start="302:9" pos:end="302:14">printf</name><argument_list pos:start="302:15" pos:end="302:61">(<argument pos:start="302:16" pos:end="302:60"><expr pos:start="302:16" pos:end="302:60"><literal type="string" pos:start="302:16" pos:end="302:60">"\nUnable to create X509 Common Name entry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="303:9" pos:end="303:20">return <expr pos:start="303:16" pos:end="303:19"><operator pos:start="303:16" pos:end="303:16">(</operator><operator pos:start="303:17" pos:end="303:17">-</operator><literal type="number" pos:start="303:18" pos:end="303:18">1</literal><operator pos:start="303:19" pos:end="303:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="306:5" pos:end="308:7">/*
     * Set the public key on the request
     */</comment>
    <if_stmt pos:start="309:5" pos:end="312:5"><if pos:start="309:5" pos:end="312:5">if <condition pos:start="309:8" pos:end="309:40">(<expr pos:start="309:9" pos:end="309:39"><operator pos:start="309:9" pos:end="309:9">!</operator><call pos:start="309:10" pos:end="309:39"><name pos:start="309:10" pos:end="309:28">X509_REQ_set_pubkey</name><argument_list pos:start="309:29" pos:end="309:39">(<argument pos:start="309:30" pos:end="309:32"><expr pos:start="309:30" pos:end="309:32"><name pos:start="309:30" pos:end="309:32">req</name></expr></argument>, <argument pos:start="309:35" pos:end="309:38"><expr pos:start="309:35" pos:end="309:38"><name pos:start="309:35" pos:end="309:38">pkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="309:42" pos:end="312:5">{<block_content pos:start="310:9" pos:end="311:20">
	<expr_stmt pos:start="310:9" pos:end="310:52"><expr pos:start="310:9" pos:end="310:51"><call pos:start="310:9" pos:end="310:51"><name pos:start="310:9" pos:end="310:14">printf</name><argument_list pos:start="310:15" pos:end="310:51">(<argument pos:start="310:16" pos:end="310:50"><expr pos:start="310:16" pos:end="310:50"><literal type="string" pos:start="310:16" pos:end="310:50">"\nUnable to set X509 public key\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="311:9" pos:end="311:20">return <expr pos:start="311:16" pos:end="311:19"><operator pos:start="311:16" pos:end="311:16">(</operator><operator pos:start="311:17" pos:end="311:17">-</operator><literal type="number" pos:start="311:18" pos:end="311:18">1</literal><operator pos:start="311:19" pos:end="311:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="314:5" pos:end="314:15">return <expr pos:start="314:12" pos:end="314:14"><operator pos:start="314:12" pos:end="314:12">(</operator><literal type="number" pos:start="314:13" pos:end="314:13">0</literal><operator pos:start="314:14" pos:end="314:14">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="317:1" pos:end="320:3">/*
 * Sign an X509 certificate request using the digest and the key passed.
 * Returns OpenSSL error code from X509_REQ_sign_ctx();
 */</comment>
<function pos:start="321:1" pos:end="347:1"><type pos:start="321:1" pos:end="321:10"><specifier pos:start="321:1" pos:end="321:6">static</specifier> <name pos:start="321:8" pos:end="321:10">int</name></type> <name pos:start="321:12" pos:end="321:24">sign_X509_req</name> <parameter_list pos:start="321:26" pos:end="321:72">(<parameter pos:start="321:27" pos:end="321:37"><decl pos:start="321:27" pos:end="321:37"><type pos:start="321:27" pos:end="321:37"><name pos:start="321:27" pos:end="321:34">X509_REQ</name> <modifier pos:start="321:36" pos:end="321:36">*</modifier></type><name pos:start="321:37" pos:end="321:37">x</name></decl></parameter>, <parameter pos:start="321:40" pos:end="321:53"><decl pos:start="321:40" pos:end="321:53"><type pos:start="321:40" pos:end="321:53"><name pos:start="321:40" pos:end="321:47">EVP_PKEY</name> <modifier pos:start="321:49" pos:end="321:49">*</modifier></type><name pos:start="321:50" pos:end="321:53">pkey</name></decl></parameter>, <parameter pos:start="321:56" pos:end="321:71"><decl pos:start="321:56" pos:end="321:71"><type pos:start="321:56" pos:end="321:71"><specifier pos:start="321:56" pos:end="321:60">const</specifier> <name pos:start="321:62" pos:end="321:67">EVP_MD</name> <modifier pos:start="321:69" pos:end="321:69">*</modifier></type><name pos:start="321:70" pos:end="321:71">md</name></decl></parameter>)</parameter_list>
<block pos:start="322:1" pos:end="347:1">{<block_content pos:start="323:5" pos:end="346:16">
    <decl_stmt pos:start="323:5" pos:end="323:11"><decl pos:start="323:5" pos:end="323:10"><type pos:start="323:5" pos:end="323:7"><name pos:start="323:5" pos:end="323:7">int</name></type> <name pos:start="323:9" pos:end="323:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="324:5" pos:end="324:31"><decl pos:start="324:5" pos:end="324:30"><type pos:start="324:5" pos:end="324:18"><name pos:start="324:5" pos:end="324:16">EVP_PKEY_CTX</name> <modifier pos:start="324:18" pos:end="324:18">*</modifier></type><name pos:start="324:19" pos:end="324:23">pkctx</name> <init pos:start="324:25" pos:end="324:30">= <expr pos:start="324:27" pos:end="324:30"><name pos:start="324:27" pos:end="324:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="325:5" pos:end="325:20"><decl pos:start="325:5" pos:end="325:19"><type pos:start="325:5" pos:end="325:14"><name pos:start="325:5" pos:end="325:14">EVP_MD_CTX</name></type> <name pos:start="325:16" pos:end="325:19">mctx</name></decl>;</decl_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:27"><expr pos:start="327:5" pos:end="327:26"><call pos:start="327:5" pos:end="327:26"><name pos:start="327:5" pos:end="327:19">EVP_MD_CTX_init</name><argument_list pos:start="327:20" pos:end="327:26">(<argument pos:start="327:21" pos:end="327:25"><expr pos:start="327:21" pos:end="327:25"><operator pos:start="327:21" pos:end="327:21">&amp;</operator><name pos:start="327:22" pos:end="327:25">mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="329:5" pos:end="331:5"><if pos:start="329:5" pos:end="331:5">if <condition pos:start="329:8" pos:end="329:59">(<expr pos:start="329:9" pos:end="329:58"><operator pos:start="329:9" pos:end="329:9">!</operator><call pos:start="329:10" pos:end="329:58"><name pos:start="329:10" pos:end="329:27">EVP_DigestSignInit</name><argument_list pos:start="329:28" pos:end="329:58">(<argument pos:start="329:29" pos:end="329:33"><expr pos:start="329:29" pos:end="329:33"><operator pos:start="329:29" pos:end="329:29">&amp;</operator><name pos:start="329:30" pos:end="329:33">mctx</name></expr></argument>, <argument pos:start="329:36" pos:end="329:41"><expr pos:start="329:36" pos:end="329:41"><operator pos:start="329:36" pos:end="329:36">&amp;</operator><name pos:start="329:37" pos:end="329:41">pkctx</name></expr></argument>, <argument pos:start="329:44" pos:end="329:45"><expr pos:start="329:44" pos:end="329:45"><name pos:start="329:44" pos:end="329:45">md</name></expr></argument>, <argument pos:start="329:48" pos:end="329:51"><expr pos:start="329:48" pos:end="329:51"><name pos:start="329:48" pos:end="329:51">NULL</name></expr></argument>, <argument pos:start="329:54" pos:end="329:57"><expr pos:start="329:54" pos:end="329:57"><name pos:start="329:54" pos:end="329:57">pkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="329:61" pos:end="331:5">{<block_content pos:start="330:9" pos:end="330:17">
        <return pos:start="330:9" pos:end="330:17">return <expr pos:start="330:16" pos:end="330:16"><literal type="number" pos:start="330:16" pos:end="330:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="333:5" pos:end="340:7">/*
     * Encode using DER (ASN.1) 
     *
     * We have to set the modified flag on the X509_REQ because
     * OpenSSL keeps a cached copy of the DER encoded data in some
     * cases.  Setting this flag tells OpenSSL to run the ASN
     * encoding again rather than using the cached copy.
     */</comment>
    <expr_stmt pos:start="341:5" pos:end="341:34"><expr pos:start="341:5" pos:end="341:33"><name pos:start="341:5" pos:end="341:29"><name pos:start="341:5" pos:end="341:5">x</name><operator pos:start="341:6" pos:end="341:7">-&gt;</operator><name pos:start="341:8" pos:end="341:15">req_info</name><operator pos:start="341:16" pos:end="341:17">-&gt;</operator><name pos:start="341:18" pos:end="341:20">enc</name><operator pos:start="341:21" pos:end="341:21">.</operator><name pos:start="341:22" pos:end="341:29">modified</name></name> <operator pos:start="341:31" pos:end="341:31">=</operator> <literal type="number" pos:start="341:33" pos:end="341:33">1</literal></expr>;</expr_stmt> 
    <expr_stmt pos:start="342:5" pos:end="342:37"><expr pos:start="342:5" pos:end="342:36"><name pos:start="342:5" pos:end="342:6">rv</name> <operator pos:start="342:8" pos:end="342:8">=</operator> <call pos:start="342:10" pos:end="342:36"><name pos:start="342:10" pos:end="342:26">X509_REQ_sign_ctx</name><argument_list pos:start="342:27" pos:end="342:36">(<argument pos:start="342:28" pos:end="342:28"><expr pos:start="342:28" pos:end="342:28"><name pos:start="342:28" pos:end="342:28">x</name></expr></argument>, <argument pos:start="342:31" pos:end="342:35"><expr pos:start="342:31" pos:end="342:35"><operator pos:start="342:31" pos:end="342:31">&amp;</operator><name pos:start="342:32" pos:end="342:35">mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="344:5" pos:end="344:30"><expr pos:start="344:5" pos:end="344:29"><call pos:start="344:5" pos:end="344:29"><name pos:start="344:5" pos:end="344:22">EVP_MD_CTX_cleanup</name><argument_list pos:start="344:23" pos:end="344:29">(<argument pos:start="344:24" pos:end="344:28"><expr pos:start="344:24" pos:end="344:28"><operator pos:start="344:24" pos:end="344:24">&amp;</operator><name pos:start="344:25" pos:end="344:28">mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="346:5" pos:end="346:16">return <expr pos:start="346:12" pos:end="346:15"><operator pos:start="346:12" pos:end="346:12">(</operator><name pos:start="346:13" pos:end="346:14">rv</name><operator pos:start="346:15" pos:end="346:15">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="349:1" pos:end="353:3">/*
 * This function performs a basic simple enroll using
 * a UID/PWD to identify the client to the server.  This
 * is used for a variety of test cases in this module.
 */</comment>
<function pos:start="354:1" pos:end="417:1"><type pos:start="354:1" pos:end="354:11"><specifier pos:start="354:1" pos:end="354:6">static</specifier> <name pos:start="354:8" pos:end="354:11">void</name></type> <name pos:start="354:13" pos:end="354:31">us899_simple_enroll</name> <parameter_list pos:start="354:33" pos:end="354:86">(<parameter pos:start="354:34" pos:end="354:41"><decl pos:start="354:34" pos:end="354:41"><type pos:start="354:34" pos:end="354:41"><name pos:start="354:34" pos:end="354:37">char</name> <modifier pos:start="354:39" pos:end="354:39">*</modifier></type><name pos:start="354:40" pos:end="354:41">cn</name></decl></parameter>, <parameter pos:start="354:44" pos:end="354:55"><decl pos:start="354:44" pos:end="354:55"><type pos:start="354:44" pos:end="354:55"><name pos:start="354:44" pos:end="354:47">char</name> <modifier pos:start="354:49" pos:end="354:49">*</modifier></type><name pos:start="354:50" pos:end="354:55">server</name></decl></parameter>, <parameter pos:start="354:58" pos:end="354:85"><decl pos:start="354:58" pos:end="354:85"><type pos:start="354:58" pos:end="354:85"><name pos:start="354:58" pos:end="354:66">EST_ERROR</name></type> <name pos:start="354:68" pos:end="354:85">expected_enroll_rv</name></decl></parameter>)</parameter_list> 
<block pos:start="355:1" pos:end="417:1">{<block_content pos:start="356:5" pos:end="416:22">
    <decl_stmt pos:start="356:5" pos:end="356:18"><decl pos:start="356:5" pos:end="356:17"><type pos:start="356:5" pos:end="356:13"><name pos:start="356:5" pos:end="356:11">EST_CTX</name> <modifier pos:start="356:13" pos:end="356:13">*</modifier></type><name pos:start="356:14" pos:end="356:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="357:5" pos:end="357:18"><decl pos:start="357:5" pos:end="357:17"><type pos:start="357:5" pos:end="357:14"><name pos:start="357:5" pos:end="357:12">EVP_PKEY</name> <modifier pos:start="357:14" pos:end="357:14">*</modifier></type><name pos:start="357:15" pos:end="357:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="358:5" pos:end="358:11"><decl pos:start="358:5" pos:end="358:10"><type pos:start="358:5" pos:end="358:7"><name pos:start="358:5" pos:end="358:7">int</name></type> <name pos:start="358:9" pos:end="358:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="359:5" pos:end="359:22"><decl pos:start="359:5" pos:end="359:21"><type pos:start="359:5" pos:end="359:7"><name pos:start="359:5" pos:end="359:7">int</name></type> <name pos:start="359:9" pos:end="359:17">pkcs7_len</name> <init pos:start="359:19" pos:end="359:21">= <expr pos:start="359:21" pos:end="359:21"><literal type="number" pos:start="359:21" pos:end="359:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="360:5" pos:end="360:35"><decl pos:start="360:5" pos:end="360:34"><type pos:start="360:5" pos:end="360:19"><name pos:start="360:5" pos:end="360:12">unsigned</name> <name pos:start="360:14" pos:end="360:17">char</name> <modifier pos:start="360:19" pos:end="360:19">*</modifier></type><name pos:start="360:20" pos:end="360:27">new_cert</name> <init pos:start="360:29" pos:end="360:34">= <expr pos:start="360:31" pos:end="360:34"><name pos:start="360:31" pos:end="360:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="361:5" pos:end="361:36"><decl pos:start="361:5" pos:end="361:35"><type pos:start="361:5" pos:end="361:19"><name pos:start="361:5" pos:end="361:12">unsigned</name> <name pos:start="361:14" pos:end="361:17">char</name> <modifier pos:start="361:19" pos:end="361:19">*</modifier></type><name pos:start="361:20" pos:end="361:28">attr_data</name> <init pos:start="361:30" pos:end="361:35">= <expr pos:start="361:32" pos:end="361:35"><name pos:start="361:32" pos:end="361:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="362:5" pos:end="362:17"><decl pos:start="362:5" pos:end="362:16"><type pos:start="362:5" pos:end="362:7"><name pos:start="362:5" pos:end="362:7">int</name></type> <name pos:start="362:9" pos:end="362:16">attr_len</name></decl>;</decl_stmt>

    <comment type="block" pos:start="364:5" pos:end="366:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="367:5" pos:end="369:54"><expr pos:start="367:5" pos:end="369:53"><name pos:start="367:5" pos:end="367:8">ectx</name> <operator pos:start="367:10" pos:end="367:10">=</operator> <call pos:start="367:12" pos:end="369:53"><name pos:start="367:12" pos:end="367:26">est_client_init</name><argument_list pos:start="367:27" pos:end="369:53">(<argument pos:start="367:28" pos:end="367:34"><expr pos:start="367:28" pos:end="367:34"><name pos:start="367:28" pos:end="367:34">cacerts</name></expr></argument>, <argument pos:start="367:37" pos:end="367:47"><expr pos:start="367:37" pos:end="367:47"><name pos:start="367:37" pos:end="367:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="368:28" pos:end="368:46"><expr pos:start="368:28" pos:end="368:46"><name pos:start="368:28" pos:end="368:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="369:28" pos:end="369:52"><expr pos:start="369:28" pos:end="369:52"><name pos:start="369:28" pos:end="369:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="370:5" pos:end="370:28"><expr pos:start="370:5" pos:end="370:27"><call pos:start="370:5" pos:end="370:27"><name pos:start="370:5" pos:end="370:13">CU_ASSERT</name><argument_list pos:start="370:14" pos:end="370:27">(<argument pos:start="370:15" pos:end="370:26"><expr pos:start="370:15" pos:end="370:26"><name pos:start="370:15" pos:end="370:18">ectx</name> <operator pos:start="370:20" pos:end="370:21">!=</operator> <name pos:start="370:23" pos:end="370:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="372:5" pos:end="374:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="375:5" pos:end="375:69"><expr pos:start="375:5" pos:end="375:68"><name pos:start="375:5" pos:end="375:6">rv</name> <operator pos:start="375:8" pos:end="375:8">=</operator> <call pos:start="375:10" pos:end="375:68"><name pos:start="375:10" pos:end="375:28">est_client_set_auth</name><argument_list pos:start="375:29" pos:end="375:68">(<argument pos:start="375:30" pos:end="375:33"><expr pos:start="375:30" pos:end="375:33"><name pos:start="375:30" pos:end="375:33">ectx</name></expr></argument>, <argument pos:start="375:36" pos:end="375:44"><expr pos:start="375:36" pos:end="375:44"><name pos:start="375:36" pos:end="375:44">US899_UID</name></expr></argument>, <argument pos:start="375:47" pos:end="375:55"><expr pos:start="375:47" pos:end="375:55"><name pos:start="375:47" pos:end="375:55">US899_PWD</name></expr></argument>, <argument pos:start="375:58" pos:end="375:61"><expr pos:start="375:58" pos:end="375:61"><name pos:start="375:58" pos:end="375:61">NULL</name></expr></argument>, <argument pos:start="375:64" pos:end="375:67"><expr pos:start="375:64" pos:end="375:67"><name pos:start="375:64" pos:end="375:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="376:5" pos:end="376:34"><expr pos:start="376:5" pos:end="376:33"><call pos:start="376:5" pos:end="376:33"><name pos:start="376:5" pos:end="376:13">CU_ASSERT</name><argument_list pos:start="376:14" pos:end="376:33">(<argument pos:start="376:15" pos:end="376:32"><expr pos:start="376:15" pos:end="376:32"><name pos:start="376:15" pos:end="376:16">rv</name> <operator pos:start="376:18" pos:end="376:19">==</operator> <name pos:start="376:21" pos:end="376:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="378:5" pos:end="380:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="381:5" pos:end="381:65"><expr pos:start="381:5" pos:end="381:64"><call pos:start="381:5" pos:end="381:64"><name pos:start="381:5" pos:end="381:25">est_client_set_server</name><argument_list pos:start="381:26" pos:end="381:64">(<argument pos:start="381:27" pos:end="381:30"><expr pos:start="381:27" pos:end="381:30"><name pos:start="381:27" pos:end="381:30">ectx</name></expr></argument>, <argument pos:start="381:33" pos:end="381:38"><expr pos:start="381:33" pos:end="381:38"><name pos:start="381:33" pos:end="381:38">server</name></expr></argument>, <argument pos:start="381:41" pos:end="381:57"><expr pos:start="381:41" pos:end="381:57"><name pos:start="381:41" pos:end="381:57">US899_SERVER_PORT</name></expr></argument>, <argument pos:start="381:60" pos:end="381:63"><expr pos:start="381:60" pos:end="381:63"><name pos:start="381:60" pos:end="381:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="383:5" pos:end="385:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="386:5" pos:end="386:33"><expr pos:start="386:5" pos:end="386:32"><name pos:start="386:5" pos:end="386:7">key</name> <operator pos:start="386:9" pos:end="386:9">=</operator> <call pos:start="386:11" pos:end="386:32"><name pos:start="386:11" pos:end="386:30">generate_private_key</name><argument_list pos:start="386:31" pos:end="386:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="387:5" pos:end="387:27"><expr pos:start="387:5" pos:end="387:26"><call pos:start="387:5" pos:end="387:26"><name pos:start="387:5" pos:end="387:13">CU_ASSERT</name><argument_list pos:start="387:14" pos:end="387:26">(<argument pos:start="387:15" pos:end="387:25"><expr pos:start="387:15" pos:end="387:25"><name pos:start="387:15" pos:end="387:17">key</name> <operator pos:start="387:19" pos:end="387:20">!=</operator> <name pos:start="387:22" pos:end="387:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="389:5" pos:end="391:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="392:5" pos:end="392:62"><expr pos:start="392:5" pos:end="392:61"><name pos:start="392:5" pos:end="392:6">rv</name> <operator pos:start="392:8" pos:end="392:8">=</operator> <call pos:start="392:10" pos:end="392:61"><name pos:start="392:10" pos:end="392:32">est_client_get_csrattrs</name><argument_list pos:start="392:33" pos:end="392:61">(<argument pos:start="392:34" pos:end="392:37"><expr pos:start="392:34" pos:end="392:37"><name pos:start="392:34" pos:end="392:37">ectx</name></expr></argument>, <argument pos:start="392:40" pos:end="392:49"><expr pos:start="392:40" pos:end="392:49"><operator pos:start="392:40" pos:end="392:40">&amp;</operator><name pos:start="392:41" pos:end="392:49">attr_data</name></expr></argument>, <argument pos:start="392:52" pos:end="392:60"><expr pos:start="392:52" pos:end="392:60"><operator pos:start="392:52" pos:end="392:52">&amp;</operator><name pos:start="392:53" pos:end="392:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="393:5" pos:end="393:40"><expr pos:start="393:5" pos:end="393:39"><call pos:start="393:5" pos:end="393:39"><name pos:start="393:5" pos:end="393:13">CU_ASSERT</name><argument_list pos:start="393:14" pos:end="393:39">(<argument pos:start="393:15" pos:end="393:38"><expr pos:start="393:15" pos:end="393:38"><name pos:start="393:15" pos:end="393:16">rv</name> <operator pos:start="393:18" pos:end="393:19">==</operator> <name pos:start="393:21" pos:end="393:38">expected_enroll_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="395:5" pos:end="397:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="398:5" pos:end="398:54"><expr pos:start="398:5" pos:end="398:53"><name pos:start="398:5" pos:end="398:6">rv</name> <operator pos:start="398:8" pos:end="398:8">=</operator> <call pos:start="398:10" pos:end="398:53"><name pos:start="398:10" pos:end="398:26">est_client_enroll</name><argument_list pos:start="398:27" pos:end="398:53">(<argument pos:start="398:28" pos:end="398:31"><expr pos:start="398:28" pos:end="398:31"><name pos:start="398:28" pos:end="398:31">ectx</name></expr></argument>, <argument pos:start="398:34" pos:end="398:35"><expr pos:start="398:34" pos:end="398:35"><name pos:start="398:34" pos:end="398:35">cn</name></expr></argument>, <argument pos:start="398:38" pos:end="398:47"><expr pos:start="398:38" pos:end="398:47"><operator pos:start="398:38" pos:end="398:38">&amp;</operator><name pos:start="398:39" pos:end="398:47">pkcs7_len</name></expr></argument>, <argument pos:start="398:50" pos:end="398:52"><expr pos:start="398:50" pos:end="398:52"><name pos:start="398:50" pos:end="398:52">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="399:5" pos:end="399:40"><expr pos:start="399:5" pos:end="399:39"><call pos:start="399:5" pos:end="399:39"><name pos:start="399:5" pos:end="399:13">CU_ASSERT</name><argument_list pos:start="399:14" pos:end="399:39">(<argument pos:start="399:15" pos:end="399:38"><expr pos:start="399:15" pos:end="399:38"><name pos:start="399:15" pos:end="399:16">rv</name> <operator pos:start="399:18" pos:end="399:19">==</operator> <name pos:start="399:21" pos:end="399:38">expected_enroll_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="401:5" pos:end="403:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="404:5" pos:end="409:5"><if pos:start="404:5" pos:end="409:5">if <condition pos:start="404:8" pos:end="404:27">(<expr pos:start="404:9" pos:end="404:26"><name pos:start="404:9" pos:end="404:10">rv</name> <operator pos:start="404:12" pos:end="404:13">==</operator> <name pos:start="404:15" pos:end="404:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="404:29" pos:end="409:5">{<block_content pos:start="405:9" pos:end="408:38">
	<expr_stmt pos:start="405:9" pos:end="405:37"><expr pos:start="405:9" pos:end="405:36"><name pos:start="405:9" pos:end="405:16">new_cert</name> <operator pos:start="405:18" pos:end="405:18">=</operator> <call pos:start="405:20" pos:end="405:36"><name pos:start="405:20" pos:end="405:25">malloc</name><argument_list pos:start="405:26" pos:end="405:36">(<argument pos:start="405:27" pos:end="405:35"><expr pos:start="405:27" pos:end="405:35"><name pos:start="405:27" pos:end="405:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="406:9" pos:end="406:36"><expr pos:start="406:9" pos:end="406:35"><call pos:start="406:9" pos:end="406:35"><name pos:start="406:9" pos:end="406:17">CU_ASSERT</name><argument_list pos:start="406:18" pos:end="406:35">(<argument pos:start="406:19" pos:end="406:34"><expr pos:start="406:19" pos:end="406:34"><name pos:start="406:19" pos:end="406:26">new_cert</name> <operator pos:start="406:28" pos:end="406:29">!=</operator> <name pos:start="406:31" pos:end="406:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="407:9" pos:end="407:59"><expr pos:start="407:9" pos:end="407:58"><name pos:start="407:9" pos:end="407:10">rv</name> <operator pos:start="407:12" pos:end="407:12">=</operator> <call pos:start="407:14" pos:end="407:58"><name pos:start="407:14" pos:end="407:42">est_client_copy_enrolled_cert</name><argument_list pos:start="407:43" pos:end="407:58">(<argument pos:start="407:44" pos:end="407:47"><expr pos:start="407:44" pos:end="407:47"><name pos:start="407:44" pos:end="407:47">ectx</name></expr></argument>, <argument pos:start="407:50" pos:end="407:57"><expr pos:start="407:50" pos:end="407:57"><name pos:start="407:50" pos:end="407:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="408:9" pos:end="408:38"><expr pos:start="408:9" pos:end="408:37"><call pos:start="408:9" pos:end="408:37"><name pos:start="408:9" pos:end="408:17">CU_ASSERT</name><argument_list pos:start="408:18" pos:end="408:37">(<argument pos:start="408:19" pos:end="408:36"><expr pos:start="408:19" pos:end="408:36"><name pos:start="408:19" pos:end="408:20">rv</name> <operator pos:start="408:22" pos:end="408:23">==</operator> <name pos:start="408:25" pos:end="408:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="411:5" pos:end="413:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="414:5" pos:end="414:23"><expr pos:start="414:5" pos:end="414:22"><call pos:start="414:5" pos:end="414:22"><name pos:start="414:5" pos:end="414:17">EVP_PKEY_free</name><argument_list pos:start="414:18" pos:end="414:22">(<argument pos:start="414:19" pos:end="414:21"><expr pos:start="414:19" pos:end="414:21"><name pos:start="414:19" pos:end="414:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="415:5" pos:end="415:33"><if pos:start="415:5" pos:end="415:33">if <condition pos:start="415:8" pos:end="415:17">(<expr pos:start="415:9" pos:end="415:16"><name pos:start="415:9" pos:end="415:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="415:19" pos:end="415:33"><block_content pos:start="415:19" pos:end="415:33"> <expr_stmt pos:start="415:19" pos:end="415:33"><expr pos:start="415:19" pos:end="415:32"><call pos:start="415:19" pos:end="415:32"><name pos:start="415:19" pos:end="415:22">free</name><argument_list pos:start="415:23" pos:end="415:32">(<argument pos:start="415:24" pos:end="415:31"><expr pos:start="415:24" pos:end="415:31"><name pos:start="415:24" pos:end="415:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="416:5" pos:end="416:22"><expr pos:start="416:5" pos:end="416:21"><call pos:start="416:5" pos:end="416:21"><name pos:start="416:5" pos:end="416:15">est_destroy</name><argument_list pos:start="416:16" pos:end="416:21">(<argument pos:start="416:17" pos:end="416:20"><expr pos:start="416:17" pos:end="416:20"><name pos:start="416:17" pos:end="416:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="420:1" pos:end="426:3">/*
 * Simple enroll -  
 *
 * This is a basic test to perform a /simpleenroll using a 
 * user ID and password to identify the client to the server. 
 * No identity certificate is used by the client.
 */</comment>
<function pos:start="427:1" pos:end="432:1"><type pos:start="427:1" pos:end="427:11"><specifier pos:start="427:1" pos:end="427:6">static</specifier> <name pos:start="427:8" pos:end="427:11">void</name></type> <name pos:start="427:13" pos:end="427:23">us899_test1</name> <parameter_list pos:start="427:25" pos:end="427:30">(<parameter pos:start="427:26" pos:end="427:29"><decl pos:start="427:26" pos:end="427:29"><type pos:start="427:26" pos:end="427:29"><name pos:start="427:26" pos:end="427:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="428:1" pos:end="432:1">{<block_content pos:start="429:5" pos:end="431:66">
    <expr_stmt pos:start="429:5" pos:end="429:16"><expr pos:start="429:5" pos:end="429:15"><name pos:start="429:5" pos:end="429:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:66"><expr pos:start="431:5" pos:end="431:65"><call pos:start="431:5" pos:end="431:65"><name pos:start="431:5" pos:end="431:23">us899_simple_enroll</name><argument_list pos:start="431:24" pos:end="431:65">(<argument pos:start="431:25" pos:end="431:33"><expr pos:start="431:25" pos:end="431:33"><literal type="string" pos:start="431:25" pos:end="431:33">"TC899-1"</literal></expr></argument>, <argument pos:start="431:36" pos:end="431:50"><expr pos:start="431:36" pos:end="431:50"><name pos:start="431:36" pos:end="431:50">US899_SERVER_IP</name></expr></argument>, <argument pos:start="431:53" pos:end="431:64"><expr pos:start="431:53" pos:end="431:64"><name pos:start="431:53" pos:end="431:64">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<comment type="block" pos:start="435:1" pos:end="444:3">/*
 * Simple enroll CSR  
 *
 * This is a basic test to perform a /simpleenroll using a 
 * user ID and password to identify the client to the server. 
 * No identity certificate is used by the client.
 * This test case uses the alternate enroll method where the CSR
 * is provided by the application layer rather than having libest
 * generate the CSR.
 */</comment>
<function pos:start="445:1" pos:end="521:1"><type pos:start="445:1" pos:end="445:11"><specifier pos:start="445:1" pos:end="445:6">static</specifier> <name pos:start="445:8" pos:end="445:11">void</name></type> <name pos:start="445:13" pos:end="445:23">us899_test2</name> <parameter_list pos:start="445:25" pos:end="445:30">(<parameter pos:start="445:26" pos:end="445:29"><decl pos:start="445:26" pos:end="445:29"><type pos:start="445:26" pos:end="445:29"><name pos:start="445:26" pos:end="445:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="446:1" pos:end="521:1">{<block_content pos:start="447:5" pos:end="520:22">
    <decl_stmt pos:start="447:5" pos:end="447:18"><decl pos:start="447:5" pos:end="447:17"><type pos:start="447:5" pos:end="447:13"><name pos:start="447:5" pos:end="447:11">EST_CTX</name> <modifier pos:start="447:13" pos:end="447:13">*</modifier></type><name pos:start="447:14" pos:end="447:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="448:5" pos:end="448:18"><decl pos:start="448:5" pos:end="448:17"><type pos:start="448:5" pos:end="448:14"><name pos:start="448:5" pos:end="448:12">EVP_PKEY</name> <modifier pos:start="448:14" pos:end="448:14">*</modifier></type><name pos:start="448:15" pos:end="448:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="449:5" pos:end="449:11"><decl pos:start="449:5" pos:end="449:10"><type pos:start="449:5" pos:end="449:7"><name pos:start="449:5" pos:end="449:7">int</name></type> <name pos:start="449:9" pos:end="449:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="450:5" pos:end="450:22"><decl pos:start="450:5" pos:end="450:21"><type pos:start="450:5" pos:end="450:7"><name pos:start="450:5" pos:end="450:7">int</name></type> <name pos:start="450:9" pos:end="450:17">pkcs7_len</name> <init pos:start="450:19" pos:end="450:21">= <expr pos:start="450:21" pos:end="450:21"><literal type="number" pos:start="450:21" pos:end="450:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="451:5" pos:end="451:35"><decl pos:start="451:5" pos:end="451:34"><type pos:start="451:5" pos:end="451:19"><name pos:start="451:5" pos:end="451:12">unsigned</name> <name pos:start="451:14" pos:end="451:17">char</name> <modifier pos:start="451:19" pos:end="451:19">*</modifier></type><name pos:start="451:20" pos:end="451:27">new_cert</name> <init pos:start="451:29" pos:end="451:34">= <expr pos:start="451:31" pos:end="451:34"><name pos:start="451:31" pos:end="451:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="452:5" pos:end="452:18"><decl pos:start="452:5" pos:end="452:17"><type pos:start="452:5" pos:end="452:14"><name pos:start="452:5" pos:end="452:12">X509_REQ</name> <modifier pos:start="452:14" pos:end="452:14">*</modifier></type><name pos:start="452:15" pos:end="452:17">csr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="453:5" pos:end="453:36"><decl pos:start="453:5" pos:end="453:35"><type pos:start="453:5" pos:end="453:19"><name pos:start="453:5" pos:end="453:12">unsigned</name> <name pos:start="453:14" pos:end="453:17">char</name> <modifier pos:start="453:19" pos:end="453:19">*</modifier></type><name pos:start="453:20" pos:end="453:28">attr_data</name> <init pos:start="453:30" pos:end="453:35">= <expr pos:start="453:32" pos:end="453:35"><name pos:start="453:32" pos:end="453:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="454:5" pos:end="454:17"><decl pos:start="454:5" pos:end="454:16"><type pos:start="454:5" pos:end="454:7"><name pos:start="454:5" pos:end="454:7">int</name></type> <name pos:start="454:9" pos:end="454:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="456:5" pos:end="456:16"><expr pos:start="456:5" pos:end="456:15"><name pos:start="456:5" pos:end="456:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="458:5" pos:end="460:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="461:5" pos:end="463:54"><expr pos:start="461:5" pos:end="463:53"><name pos:start="461:5" pos:end="461:8">ectx</name> <operator pos:start="461:10" pos:end="461:10">=</operator> <call pos:start="461:12" pos:end="463:53"><name pos:start="461:12" pos:end="461:26">est_client_init</name><argument_list pos:start="461:27" pos:end="463:53">(<argument pos:start="461:28" pos:end="461:34"><expr pos:start="461:28" pos:end="461:34"><name pos:start="461:28" pos:end="461:34">cacerts</name></expr></argument>, <argument pos:start="461:37" pos:end="461:47"><expr pos:start="461:37" pos:end="461:47"><name pos:start="461:37" pos:end="461:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="462:28" pos:end="462:46"><expr pos:start="462:28" pos:end="462:46"><name pos:start="462:28" pos:end="462:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="463:28" pos:end="463:52"><expr pos:start="463:28" pos:end="463:52"><name pos:start="463:28" pos:end="463:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="464:5" pos:end="464:28"><expr pos:start="464:5" pos:end="464:27"><call pos:start="464:5" pos:end="464:27"><name pos:start="464:5" pos:end="464:13">CU_ASSERT</name><argument_list pos:start="464:14" pos:end="464:27">(<argument pos:start="464:15" pos:end="464:26"><expr pos:start="464:15" pos:end="464:26"><name pos:start="464:15" pos:end="464:18">ectx</name> <operator pos:start="464:20" pos:end="464:21">!=</operator> <name pos:start="464:23" pos:end="464:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="466:5" pos:end="468:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="469:5" pos:end="469:69"><expr pos:start="469:5" pos:end="469:68"><name pos:start="469:5" pos:end="469:6">rv</name> <operator pos:start="469:8" pos:end="469:8">=</operator> <call pos:start="469:10" pos:end="469:68"><name pos:start="469:10" pos:end="469:28">est_client_set_auth</name><argument_list pos:start="469:29" pos:end="469:68">(<argument pos:start="469:30" pos:end="469:33"><expr pos:start="469:30" pos:end="469:33"><name pos:start="469:30" pos:end="469:33">ectx</name></expr></argument>, <argument pos:start="469:36" pos:end="469:44"><expr pos:start="469:36" pos:end="469:44"><name pos:start="469:36" pos:end="469:44">US899_UID</name></expr></argument>, <argument pos:start="469:47" pos:end="469:55"><expr pos:start="469:47" pos:end="469:55"><name pos:start="469:47" pos:end="469:55">US899_PWD</name></expr></argument>, <argument pos:start="469:58" pos:end="469:61"><expr pos:start="469:58" pos:end="469:61"><name pos:start="469:58" pos:end="469:61">NULL</name></expr></argument>, <argument pos:start="469:64" pos:end="469:67"><expr pos:start="469:64" pos:end="469:67"><name pos:start="469:64" pos:end="469:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="470:5" pos:end="470:34"><expr pos:start="470:5" pos:end="470:33"><call pos:start="470:5" pos:end="470:33"><name pos:start="470:5" pos:end="470:13">CU_ASSERT</name><argument_list pos:start="470:14" pos:end="470:33">(<argument pos:start="470:15" pos:end="470:32"><expr pos:start="470:15" pos:end="470:32"><name pos:start="470:15" pos:end="470:16">rv</name> <operator pos:start="470:18" pos:end="470:19">==</operator> <name pos:start="470:21" pos:end="470:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="472:5" pos:end="474:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="475:5" pos:end="475:74"><expr pos:start="475:5" pos:end="475:73"><call pos:start="475:5" pos:end="475:73"><name pos:start="475:5" pos:end="475:25">est_client_set_server</name><argument_list pos:start="475:26" pos:end="475:73">(<argument pos:start="475:27" pos:end="475:30"><expr pos:start="475:27" pos:end="475:30"><name pos:start="475:27" pos:end="475:30">ectx</name></expr></argument>, <argument pos:start="475:33" pos:end="475:47"><expr pos:start="475:33" pos:end="475:47"><name pos:start="475:33" pos:end="475:47">US899_SERVER_IP</name></expr></argument>, <argument pos:start="475:50" pos:end="475:66"><expr pos:start="475:50" pos:end="475:66"><name pos:start="475:50" pos:end="475:66">US899_SERVER_PORT</name></expr></argument>, <argument pos:start="475:69" pos:end="475:72"><expr pos:start="475:69" pos:end="475:72"><name pos:start="475:69" pos:end="475:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="477:5" pos:end="479:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="480:5" pos:end="480:33"><expr pos:start="480:5" pos:end="480:32"><name pos:start="480:5" pos:end="480:7">key</name> <operator pos:start="480:9" pos:end="480:9">=</operator> <call pos:start="480:11" pos:end="480:32"><name pos:start="480:11" pos:end="480:30">generate_private_key</name><argument_list pos:start="480:31" pos:end="480:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="481:5" pos:end="481:27"><expr pos:start="481:5" pos:end="481:26"><call pos:start="481:5" pos:end="481:26"><name pos:start="481:5" pos:end="481:13">CU_ASSERT</name><argument_list pos:start="481:14" pos:end="481:26">(<argument pos:start="481:15" pos:end="481:25"><expr pos:start="481:15" pos:end="481:25"><name pos:start="481:15" pos:end="481:17">key</name> <operator pos:start="481:19" pos:end="481:20">!=</operator> <name pos:start="481:22" pos:end="481:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="483:5" pos:end="485:7">/*
     * Generate a CSR
     */</comment>
    <expr_stmt pos:start="486:5" pos:end="486:25"><expr pos:start="486:5" pos:end="486:24"><name pos:start="486:5" pos:end="486:7">csr</name> <operator pos:start="486:9" pos:end="486:9">=</operator> <call pos:start="486:11" pos:end="486:24"><name pos:start="486:11" pos:end="486:22">X509_REQ_new</name><argument_list pos:start="486:23" pos:end="486:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="487:5" pos:end="487:27"><expr pos:start="487:5" pos:end="487:26"><call pos:start="487:5" pos:end="487:26"><name pos:start="487:5" pos:end="487:13">CU_ASSERT</name><argument_list pos:start="487:14" pos:end="487:26">(<argument pos:start="487:15" pos:end="487:25"><expr pos:start="487:15" pos:end="487:25"><name pos:start="487:15" pos:end="487:17">csr</name> <operator pos:start="487:19" pos:end="487:20">!=</operator> <name pos:start="487:22" pos:end="487:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="488:5" pos:end="488:50"><expr pos:start="488:5" pos:end="488:49"><name pos:start="488:5" pos:end="488:6">rv</name> <operator pos:start="488:8" pos:end="488:8">=</operator> <call pos:start="488:10" pos:end="488:49"><name pos:start="488:10" pos:end="488:26">populate_x509_csr</name><argument_list pos:start="488:27" pos:end="488:49">(<argument pos:start="488:28" pos:end="488:30"><expr pos:start="488:28" pos:end="488:30"><name pos:start="488:28" pos:end="488:30">csr</name></expr></argument>, <argument pos:start="488:33" pos:end="488:35"><expr pos:start="488:33" pos:end="488:35"><name pos:start="488:33" pos:end="488:35">key</name></expr></argument>, <argument pos:start="488:38" pos:end="488:48"><expr pos:start="488:38" pos:end="488:48"><literal type="string" pos:start="488:38" pos:end="488:48">"US899-TC2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="490:5" pos:end="492:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="493:5" pos:end="493:62"><expr pos:start="493:5" pos:end="493:61"><name pos:start="493:5" pos:end="493:6">rv</name> <operator pos:start="493:8" pos:end="493:8">=</operator> <call pos:start="493:10" pos:end="493:61"><name pos:start="493:10" pos:end="493:32">est_client_get_csrattrs</name><argument_list pos:start="493:33" pos:end="493:61">(<argument pos:start="493:34" pos:end="493:37"><expr pos:start="493:34" pos:end="493:37"><name pos:start="493:34" pos:end="493:37">ectx</name></expr></argument>, <argument pos:start="493:40" pos:end="493:49"><expr pos:start="493:40" pos:end="493:49"><operator pos:start="493:40" pos:end="493:40">&amp;</operator><name pos:start="493:41" pos:end="493:49">attr_data</name></expr></argument>, <argument pos:start="493:52" pos:end="493:60"><expr pos:start="493:52" pos:end="493:60"><operator pos:start="493:52" pos:end="493:52">&amp;</operator><name pos:start="493:53" pos:end="493:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="494:5" pos:end="494:34"><expr pos:start="494:5" pos:end="494:33"><call pos:start="494:5" pos:end="494:33"><name pos:start="494:5" pos:end="494:13">CU_ASSERT</name><argument_list pos:start="494:14" pos:end="494:33">(<argument pos:start="494:15" pos:end="494:32"><expr pos:start="494:15" pos:end="494:32"><name pos:start="494:15" pos:end="494:16">rv</name> <operator pos:start="494:18" pos:end="494:19">==</operator> <name pos:start="494:21" pos:end="494:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="496:5" pos:end="498:7">/*
     * Use the alternate API to enroll an existing CSR
     */</comment>
    <expr_stmt pos:start="499:5" pos:end="499:59"><expr pos:start="499:5" pos:end="499:58"><name pos:start="499:5" pos:end="499:6">rv</name> <operator pos:start="499:8" pos:end="499:8">=</operator> <call pos:start="499:10" pos:end="499:58"><name pos:start="499:10" pos:end="499:30">est_client_enroll_csr</name><argument_list pos:start="499:31" pos:end="499:58">(<argument pos:start="499:32" pos:end="499:35"><expr pos:start="499:32" pos:end="499:35"><name pos:start="499:32" pos:end="499:35">ectx</name></expr></argument>, <argument pos:start="499:38" pos:end="499:40"><expr pos:start="499:38" pos:end="499:40"><name pos:start="499:38" pos:end="499:40">csr</name></expr></argument>, <argument pos:start="499:43" pos:end="499:52"><expr pos:start="499:43" pos:end="499:52"><operator pos:start="499:43" pos:end="499:43">&amp;</operator><name pos:start="499:44" pos:end="499:52">pkcs7_len</name></expr></argument>, <argument pos:start="499:55" pos:end="499:57"><expr pos:start="499:55" pos:end="499:57"><name pos:start="499:55" pos:end="499:57">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="500:5" pos:end="500:34"><expr pos:start="500:5" pos:end="500:33"><call pos:start="500:5" pos:end="500:33"><name pos:start="500:5" pos:end="500:13">CU_ASSERT</name><argument_list pos:start="500:14" pos:end="500:33">(<argument pos:start="500:15" pos:end="500:32"><expr pos:start="500:15" pos:end="500:32"><name pos:start="500:15" pos:end="500:16">rv</name> <operator pos:start="500:18" pos:end="500:19">==</operator> <name pos:start="500:21" pos:end="500:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="502:5" pos:end="504:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="505:5" pos:end="510:5"><if pos:start="505:5" pos:end="510:5">if <condition pos:start="505:8" pos:end="505:27">(<expr pos:start="505:9" pos:end="505:26"><name pos:start="505:9" pos:end="505:10">rv</name> <operator pos:start="505:12" pos:end="505:13">==</operator> <name pos:start="505:15" pos:end="505:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="505:29" pos:end="510:5">{<block_content pos:start="506:9" pos:end="509:38">
	<expr_stmt pos:start="506:9" pos:end="506:37"><expr pos:start="506:9" pos:end="506:36"><name pos:start="506:9" pos:end="506:16">new_cert</name> <operator pos:start="506:18" pos:end="506:18">=</operator> <call pos:start="506:20" pos:end="506:36"><name pos:start="506:20" pos:end="506:25">malloc</name><argument_list pos:start="506:26" pos:end="506:36">(<argument pos:start="506:27" pos:end="506:35"><expr pos:start="506:27" pos:end="506:35"><name pos:start="506:27" pos:end="506:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="507:9" pos:end="507:36"><expr pos:start="507:9" pos:end="507:35"><call pos:start="507:9" pos:end="507:35"><name pos:start="507:9" pos:end="507:17">CU_ASSERT</name><argument_list pos:start="507:18" pos:end="507:35">(<argument pos:start="507:19" pos:end="507:34"><expr pos:start="507:19" pos:end="507:34"><name pos:start="507:19" pos:end="507:26">new_cert</name> <operator pos:start="507:28" pos:end="507:29">!=</operator> <name pos:start="507:31" pos:end="507:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="508:9" pos:end="508:59"><expr pos:start="508:9" pos:end="508:58"><name pos:start="508:9" pos:end="508:10">rv</name> <operator pos:start="508:12" pos:end="508:12">=</operator> <call pos:start="508:14" pos:end="508:58"><name pos:start="508:14" pos:end="508:42">est_client_copy_enrolled_cert</name><argument_list pos:start="508:43" pos:end="508:58">(<argument pos:start="508:44" pos:end="508:47"><expr pos:start="508:44" pos:end="508:47"><name pos:start="508:44" pos:end="508:47">ectx</name></expr></argument>, <argument pos:start="508:50" pos:end="508:57"><expr pos:start="508:50" pos:end="508:57"><name pos:start="508:50" pos:end="508:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="509:9" pos:end="509:38"><expr pos:start="509:9" pos:end="509:37"><call pos:start="509:9" pos:end="509:37"><name pos:start="509:9" pos:end="509:17">CU_ASSERT</name><argument_list pos:start="509:18" pos:end="509:37">(<argument pos:start="509:19" pos:end="509:36"><expr pos:start="509:19" pos:end="509:36"><name pos:start="509:19" pos:end="509:20">rv</name> <operator pos:start="509:22" pos:end="509:23">==</operator> <name pos:start="509:25" pos:end="509:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="512:5" pos:end="514:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="515:5" pos:end="515:23"><expr pos:start="515:5" pos:end="515:22"><call pos:start="515:5" pos:end="515:22"><name pos:start="515:5" pos:end="515:17">X509_REQ_free</name><argument_list pos:start="515:18" pos:end="515:22">(<argument pos:start="515:19" pos:end="515:21"><expr pos:start="515:19" pos:end="515:21"><name pos:start="515:19" pos:end="515:21">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="516:5" pos:end="516:23"><expr pos:start="516:5" pos:end="516:22"><call pos:start="516:5" pos:end="516:22"><name pos:start="516:5" pos:end="516:17">EVP_PKEY_free</name><argument_list pos:start="516:18" pos:end="516:22">(<argument pos:start="516:19" pos:end="516:21"><expr pos:start="516:19" pos:end="516:21"><name pos:start="516:19" pos:end="516:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="517:5" pos:end="519:5"><if pos:start="517:5" pos:end="519:5">if <condition pos:start="517:8" pos:end="517:17">(<expr pos:start="517:9" pos:end="517:16"><name pos:start="517:9" pos:end="517:16">new_cert</name></expr>)</condition> <block pos:start="517:19" pos:end="519:5">{<block_content pos:start="518:9" pos:end="518:23">
        <expr_stmt pos:start="518:9" pos:end="518:23"><expr pos:start="518:9" pos:end="518:22"><call pos:start="518:9" pos:end="518:22"><name pos:start="518:9" pos:end="518:12">free</name><argument_list pos:start="518:13" pos:end="518:22">(<argument pos:start="518:14" pos:end="518:21"><expr pos:start="518:14" pos:end="518:21"><name pos:start="518:14" pos:end="518:21">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="520:5" pos:end="520:22"><expr pos:start="520:5" pos:end="520:21"><call pos:start="520:5" pos:end="520:21"><name pos:start="520:5" pos:end="520:15">est_destroy</name><argument_list pos:start="520:16" pos:end="520:21">(<argument pos:start="520:17" pos:end="520:20"><expr pos:start="520:17" pos:end="520:20"><name pos:start="520:17" pos:end="520:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="523:1" pos:end="533:3">/*
 * Simple enroll CSR - Null 
 *
 * This is a basic test to perform a /simpleenroll using a 
 * user ID and password to identify the client to the server. 
 * No identity certificate is used by the client.
 * This test case uses the alternate enroll method where the CSR
 * is provided by the application layer rather than having libest
 * generate the CSR.  It attempts to pass in null CSR, which should
 * fail.
 */</comment>
<function pos:start="534:1" pos:end="579:1"><type pos:start="534:1" pos:end="534:11"><specifier pos:start="534:1" pos:end="534:6">static</specifier> <name pos:start="534:8" pos:end="534:11">void</name></type> <name pos:start="534:13" pos:end="534:23">us899_test3</name> <parameter_list pos:start="534:25" pos:end="534:30">(<parameter pos:start="534:26" pos:end="534:29"><decl pos:start="534:26" pos:end="534:29"><type pos:start="534:26" pos:end="534:29"><name pos:start="534:26" pos:end="534:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="535:1" pos:end="579:1">{<block_content pos:start="536:5" pos:end="578:22">
    <decl_stmt pos:start="536:5" pos:end="536:18"><decl pos:start="536:5" pos:end="536:17"><type pos:start="536:5" pos:end="536:13"><name pos:start="536:5" pos:end="536:11">EST_CTX</name> <modifier pos:start="536:13" pos:end="536:13">*</modifier></type><name pos:start="536:14" pos:end="536:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="537:5" pos:end="537:18"><decl pos:start="537:5" pos:end="537:17"><type pos:start="537:5" pos:end="537:14"><name pos:start="537:5" pos:end="537:12">EVP_PKEY</name> <modifier pos:start="537:14" pos:end="537:14">*</modifier></type><name pos:start="537:15" pos:end="537:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="538:5" pos:end="538:11"><decl pos:start="538:5" pos:end="538:10"><type pos:start="538:5" pos:end="538:7"><name pos:start="538:5" pos:end="538:7">int</name></type> <name pos:start="538:9" pos:end="538:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="539:5" pos:end="539:22"><decl pos:start="539:5" pos:end="539:21"><type pos:start="539:5" pos:end="539:7"><name pos:start="539:5" pos:end="539:7">int</name></type> <name pos:start="539:9" pos:end="539:17">pkcs7_len</name> <init pos:start="539:19" pos:end="539:21">= <expr pos:start="539:21" pos:end="539:21"><literal type="number" pos:start="539:21" pos:end="539:21">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="541:5" pos:end="541:16"><expr pos:start="541:5" pos:end="541:15"><name pos:start="541:5" pos:end="541:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="543:5" pos:end="545:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="546:5" pos:end="548:54"><expr pos:start="546:5" pos:end="548:53"><name pos:start="546:5" pos:end="546:8">ectx</name> <operator pos:start="546:10" pos:end="546:10">=</operator> <call pos:start="546:12" pos:end="548:53"><name pos:start="546:12" pos:end="546:26">est_client_init</name><argument_list pos:start="546:27" pos:end="548:53">(<argument pos:start="546:28" pos:end="546:34"><expr pos:start="546:28" pos:end="546:34"><name pos:start="546:28" pos:end="546:34">cacerts</name></expr></argument>, <argument pos:start="546:37" pos:end="546:47"><expr pos:start="546:37" pos:end="546:47"><name pos:start="546:37" pos:end="546:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="547:28" pos:end="547:46"><expr pos:start="547:28" pos:end="547:46"><name pos:start="547:28" pos:end="547:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="548:28" pos:end="548:52"><expr pos:start="548:28" pos:end="548:52"><name pos:start="548:28" pos:end="548:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="549:5" pos:end="549:28"><expr pos:start="549:5" pos:end="549:27"><call pos:start="549:5" pos:end="549:27"><name pos:start="549:5" pos:end="549:13">CU_ASSERT</name><argument_list pos:start="549:14" pos:end="549:27">(<argument pos:start="549:15" pos:end="549:26"><expr pos:start="549:15" pos:end="549:26"><name pos:start="549:15" pos:end="549:18">ectx</name> <operator pos:start="549:20" pos:end="549:21">!=</operator> <name pos:start="549:23" pos:end="549:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="551:5" pos:end="553:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="554:5" pos:end="554:69"><expr pos:start="554:5" pos:end="554:68"><name pos:start="554:5" pos:end="554:6">rv</name> <operator pos:start="554:8" pos:end="554:8">=</operator> <call pos:start="554:10" pos:end="554:68"><name pos:start="554:10" pos:end="554:28">est_client_set_auth</name><argument_list pos:start="554:29" pos:end="554:68">(<argument pos:start="554:30" pos:end="554:33"><expr pos:start="554:30" pos:end="554:33"><name pos:start="554:30" pos:end="554:33">ectx</name></expr></argument>, <argument pos:start="554:36" pos:end="554:44"><expr pos:start="554:36" pos:end="554:44"><name pos:start="554:36" pos:end="554:44">US899_UID</name></expr></argument>, <argument pos:start="554:47" pos:end="554:55"><expr pos:start="554:47" pos:end="554:55"><name pos:start="554:47" pos:end="554:55">US899_PWD</name></expr></argument>, <argument pos:start="554:58" pos:end="554:61"><expr pos:start="554:58" pos:end="554:61"><name pos:start="554:58" pos:end="554:61">NULL</name></expr></argument>, <argument pos:start="554:64" pos:end="554:67"><expr pos:start="554:64" pos:end="554:67"><name pos:start="554:64" pos:end="554:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="555:5" pos:end="555:34"><expr pos:start="555:5" pos:end="555:33"><call pos:start="555:5" pos:end="555:33"><name pos:start="555:5" pos:end="555:13">CU_ASSERT</name><argument_list pos:start="555:14" pos:end="555:33">(<argument pos:start="555:15" pos:end="555:32"><expr pos:start="555:15" pos:end="555:32"><name pos:start="555:15" pos:end="555:16">rv</name> <operator pos:start="555:18" pos:end="555:19">==</operator> <name pos:start="555:21" pos:end="555:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="557:5" pos:end="559:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="560:5" pos:end="560:74"><expr pos:start="560:5" pos:end="560:73"><call pos:start="560:5" pos:end="560:73"><name pos:start="560:5" pos:end="560:25">est_client_set_server</name><argument_list pos:start="560:26" pos:end="560:73">(<argument pos:start="560:27" pos:end="560:30"><expr pos:start="560:27" pos:end="560:30"><name pos:start="560:27" pos:end="560:30">ectx</name></expr></argument>, <argument pos:start="560:33" pos:end="560:47"><expr pos:start="560:33" pos:end="560:47"><name pos:start="560:33" pos:end="560:47">US899_SERVER_IP</name></expr></argument>, <argument pos:start="560:50" pos:end="560:66"><expr pos:start="560:50" pos:end="560:66"><name pos:start="560:50" pos:end="560:66">US899_SERVER_PORT</name></expr></argument>, <argument pos:start="560:69" pos:end="560:72"><expr pos:start="560:69" pos:end="560:72"><name pos:start="560:69" pos:end="560:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="562:5" pos:end="564:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="565:5" pos:end="565:33"><expr pos:start="565:5" pos:end="565:32"><name pos:start="565:5" pos:end="565:7">key</name> <operator pos:start="565:9" pos:end="565:9">=</operator> <call pos:start="565:11" pos:end="565:32"><name pos:start="565:11" pos:end="565:30">generate_private_key</name><argument_list pos:start="565:31" pos:end="565:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="566:5" pos:end="566:27"><expr pos:start="566:5" pos:end="566:26"><call pos:start="566:5" pos:end="566:26"><name pos:start="566:5" pos:end="566:13">CU_ASSERT</name><argument_list pos:start="566:14" pos:end="566:26">(<argument pos:start="566:15" pos:end="566:25"><expr pos:start="566:15" pos:end="566:25"><name pos:start="566:15" pos:end="566:17">key</name> <operator pos:start="566:19" pos:end="566:20">!=</operator> <name pos:start="566:22" pos:end="566:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="568:5" pos:end="570:7">/*
     * Use the alternate API to enroll a null CSR
     */</comment>
    <expr_stmt pos:start="571:5" pos:end="571:60"><expr pos:start="571:5" pos:end="571:59"><name pos:start="571:5" pos:end="571:6">rv</name> <operator pos:start="571:8" pos:end="571:8">=</operator> <call pos:start="571:10" pos:end="571:59"><name pos:start="571:10" pos:end="571:30">est_client_enroll_csr</name><argument_list pos:start="571:31" pos:end="571:59">(<argument pos:start="571:32" pos:end="571:35"><expr pos:start="571:32" pos:end="571:35"><name pos:start="571:32" pos:end="571:35">ectx</name></expr></argument>, <argument pos:start="571:38" pos:end="571:41"><expr pos:start="571:38" pos:end="571:41"><name pos:start="571:38" pos:end="571:41">NULL</name></expr></argument>, <argument pos:start="571:44" pos:end="571:53"><expr pos:start="571:44" pos:end="571:53"><operator pos:start="571:44" pos:end="571:44">&amp;</operator><name pos:start="571:45" pos:end="571:53">pkcs7_len</name></expr></argument>, <argument pos:start="571:56" pos:end="571:58"><expr pos:start="571:56" pos:end="571:58"><name pos:start="571:56" pos:end="571:58">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="572:5" pos:end="572:36"><expr pos:start="572:5" pos:end="572:35"><call pos:start="572:5" pos:end="572:35"><name pos:start="572:5" pos:end="572:13">CU_ASSERT</name><argument_list pos:start="572:14" pos:end="572:35">(<argument pos:start="572:15" pos:end="572:34"><expr pos:start="572:15" pos:end="572:34"><name pos:start="572:15" pos:end="572:16">rv</name> <operator pos:start="572:18" pos:end="572:19">==</operator> <name pos:start="572:21" pos:end="572:34">EST_ERR_NO_CSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="574:5" pos:end="576:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="577:5" pos:end="577:23"><expr pos:start="577:5" pos:end="577:22"><call pos:start="577:5" pos:end="577:22"><name pos:start="577:5" pos:end="577:17">EVP_PKEY_free</name><argument_list pos:start="577:18" pos:end="577:22">(<argument pos:start="577:19" pos:end="577:21"><expr pos:start="577:19" pos:end="577:21"><name pos:start="577:19" pos:end="577:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="578:5" pos:end="578:22"><expr pos:start="578:5" pos:end="578:21"><call pos:start="578:5" pos:end="578:21"><name pos:start="578:5" pos:end="578:15">est_destroy</name><argument_list pos:start="578:16" pos:end="578:21">(<argument pos:start="578:17" pos:end="578:20"><expr pos:start="578:17" pos:end="578:20"><name pos:start="578:17" pos:end="578:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="581:1" pos:end="585:3">/*
 * Simple enroll CSR - corrupted  
 *
 * This test checks the X509_REQ helper function is working proplery.
 */</comment>
<function pos:start="586:1" pos:end="636:1"><type pos:start="586:1" pos:end="586:11"><specifier pos:start="586:1" pos:end="586:6">static</specifier> <name pos:start="586:8" pos:end="586:11">void</name></type> <name pos:start="586:13" pos:end="586:23">us899_test4</name> <parameter_list pos:start="586:25" pos:end="586:30">(<parameter pos:start="586:26" pos:end="586:29"><decl pos:start="586:26" pos:end="586:29"><type pos:start="586:26" pos:end="586:29"><name pos:start="586:26" pos:end="586:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="587:1" pos:end="636:1">{<block_content pos:start="588:5" pos:end="635:5">
    <decl_stmt pos:start="588:5" pos:end="588:18"><decl pos:start="588:5" pos:end="588:17"><type pos:start="588:5" pos:end="588:14"><name pos:start="588:5" pos:end="588:12">X509_REQ</name> <modifier pos:start="588:14" pos:end="588:14">*</modifier></type><name pos:start="588:15" pos:end="588:17">csr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="589:5" pos:end="589:47"><decl pos:start="589:5" pos:end="589:46"><type pos:start="589:5" pos:end="589:17"><name pos:start="589:5" pos:end="589:12">unsigned</name> <name pos:start="589:14" pos:end="589:17">char</name></type> <name pos:start="589:19" pos:end="589:28"><name pos:start="589:19" pos:end="589:24">badreq</name><index pos:start="589:25" pos:end="589:28">[<expr pos:start="589:26" pos:end="589:27"><literal type="number" pos:start="589:26" pos:end="589:27">14</literal></expr>]</index></name> <init pos:start="589:30" pos:end="589:46">= <expr pos:start="589:32" pos:end="589:46"><literal type="string" pos:start="589:32" pos:end="589:46">"bogus request"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="591:5" pos:end="591:16"><expr pos:start="591:5" pos:end="591:15"><name pos:start="591:5" pos:end="591:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="593:5" pos:end="595:7">/*
     * First try PEM decoding 
     */</comment>
    <expr_stmt pos:start="596:5" pos:end="596:65"><expr pos:start="596:5" pos:end="596:64"><name pos:start="596:5" pos:end="596:7">csr</name> <operator pos:start="596:9" pos:end="596:9">=</operator> <call pos:start="596:11" pos:end="596:64"><name pos:start="596:11" pos:end="596:31">est_read_x509_request</name><argument_list pos:start="596:32" pos:end="596:64">(<argument pos:start="596:33" pos:end="596:38"><expr pos:start="596:33" pos:end="596:38"><name pos:start="596:33" pos:end="596:38">badreq</name></expr></argument>, <argument pos:start="596:41" pos:end="596:42"><expr pos:start="596:41" pos:end="596:42"><literal type="number" pos:start="596:41" pos:end="596:42">13</literal></expr></argument>, <argument pos:start="596:45" pos:end="596:63"><expr pos:start="596:45" pos:end="596:63"><name pos:start="596:45" pos:end="596:63">EST_CERT_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="597:5" pos:end="597:27"><expr pos:start="597:5" pos:end="597:26"><call pos:start="597:5" pos:end="597:26"><name pos:start="597:5" pos:end="597:13">CU_ASSERT</name><argument_list pos:start="597:14" pos:end="597:26">(<argument pos:start="597:15" pos:end="597:25"><expr pos:start="597:15" pos:end="597:25"><name pos:start="597:15" pos:end="597:17">csr</name> <operator pos:start="597:19" pos:end="597:20">==</operator> <name pos:start="597:22" pos:end="597:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="599:5" pos:end="601:7">/*
     * Next try DER decoding 
     */</comment>
    <expr_stmt pos:start="602:5" pos:end="602:65"><expr pos:start="602:5" pos:end="602:64"><name pos:start="602:5" pos:end="602:7">csr</name> <operator pos:start="602:9" pos:end="602:9">=</operator> <call pos:start="602:11" pos:end="602:64"><name pos:start="602:11" pos:end="602:31">est_read_x509_request</name><argument_list pos:start="602:32" pos:end="602:64">(<argument pos:start="602:33" pos:end="602:38"><expr pos:start="602:33" pos:end="602:38"><name pos:start="602:33" pos:end="602:38">badreq</name></expr></argument>, <argument pos:start="602:41" pos:end="602:42"><expr pos:start="602:41" pos:end="602:42"><literal type="number" pos:start="602:41" pos:end="602:42">13</literal></expr></argument>, <argument pos:start="602:45" pos:end="602:63"><expr pos:start="602:45" pos:end="602:63"><name pos:start="602:45" pos:end="602:63">EST_CERT_FORMAT_DER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="603:5" pos:end="603:27"><expr pos:start="603:5" pos:end="603:26"><call pos:start="603:5" pos:end="603:26"><name pos:start="603:5" pos:end="603:13">CU_ASSERT</name><argument_list pos:start="603:14" pos:end="603:26">(<argument pos:start="603:15" pos:end="603:25"><expr pos:start="603:15" pos:end="603:25"><name pos:start="603:15" pos:end="603:17">csr</name> <operator pos:start="603:19" pos:end="603:20">==</operator> <name pos:start="603:22" pos:end="603:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="605:5" pos:end="607:7">/*
     * Next try an invalid format
     */</comment>
    <expr_stmt pos:start="608:5" pos:end="608:49"><expr pos:start="608:5" pos:end="608:48"><name pos:start="608:5" pos:end="608:7">csr</name> <operator pos:start="608:9" pos:end="608:9">=</operator> <call pos:start="608:11" pos:end="608:48"><name pos:start="608:11" pos:end="608:31">est_read_x509_request</name><argument_list pos:start="608:32" pos:end="608:48">(<argument pos:start="608:33" pos:end="608:38"><expr pos:start="608:33" pos:end="608:38"><name pos:start="608:33" pos:end="608:38">badreq</name></expr></argument>, <argument pos:start="608:41" pos:end="608:42"><expr pos:start="608:41" pos:end="608:42"><literal type="number" pos:start="608:41" pos:end="608:42">13</literal></expr></argument>, <argument pos:start="608:45" pos:end="608:47"><expr pos:start="608:45" pos:end="608:47"><literal type="number" pos:start="608:45" pos:end="608:47">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="609:5" pos:end="609:27"><expr pos:start="609:5" pos:end="609:26"><call pos:start="609:5" pos:end="609:26"><name pos:start="609:5" pos:end="609:13">CU_ASSERT</name><argument_list pos:start="609:14" pos:end="609:26">(<argument pos:start="609:15" pos:end="609:25"><expr pos:start="609:15" pos:end="609:25"><name pos:start="609:15" pos:end="609:17">csr</name> <operator pos:start="609:19" pos:end="609:20">==</operator> <name pos:start="609:22" pos:end="609:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="611:5" pos:end="613:7">/*
     * Next try an invalid csr length
     */</comment>
    <expr_stmt pos:start="614:5" pos:end="614:69"><expr pos:start="614:5" pos:end="614:68"><name pos:start="614:5" pos:end="614:7">csr</name> <operator pos:start="614:9" pos:end="614:9">=</operator> <call pos:start="614:11" pos:end="614:68"><name pos:start="614:11" pos:end="614:31">est_read_x509_request</name><argument_list pos:start="614:32" pos:end="614:68">(<argument pos:start="614:33" pos:end="614:38"><expr pos:start="614:33" pos:end="614:38"><name pos:start="614:33" pos:end="614:38">badreq</name></expr></argument>, <argument pos:start="614:41" pos:end="614:46"><expr pos:start="614:41" pos:end="614:46"><literal type="number" pos:start="614:41" pos:end="614:46">999999</literal></expr></argument>, <argument pos:start="614:49" pos:end="614:67"><expr pos:start="614:49" pos:end="614:67"><name pos:start="614:49" pos:end="614:67">EST_CERT_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="615:5" pos:end="615:27"><expr pos:start="615:5" pos:end="615:26"><call pos:start="615:5" pos:end="615:26"><name pos:start="615:5" pos:end="615:13">CU_ASSERT</name><argument_list pos:start="615:14" pos:end="615:26">(<argument pos:start="615:15" pos:end="615:25"><expr pos:start="615:15" pos:end="615:25"><name pos:start="615:15" pos:end="615:17">csr</name> <operator pos:start="615:19" pos:end="615:20">==</operator> <name pos:start="615:22" pos:end="615:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="617:5" pos:end="619:7">/*
     * Next try a valid PEM encoded csr
     */</comment>
    <expr_stmt pos:start="620:5" pos:end="621:54"><expr pos:start="620:5" pos:end="621:53"><name pos:start="620:5" pos:end="620:7">csr</name> <operator pos:start="620:9" pos:end="620:9">=</operator> <call pos:start="620:11" pos:end="621:53"><name pos:start="620:11" pos:end="620:31">est_read_x509_request</name><argument_list pos:start="620:32" pos:end="621:53">(<argument pos:start="620:33" pos:end="620:67"><expr pos:start="620:33" pos:end="620:67"><operator pos:start="620:33" pos:end="620:33">(</operator><name pos:start="620:34" pos:end="620:41">unsigned</name> <name pos:start="620:43" pos:end="620:46">char</name><operator pos:start="620:47" pos:end="620:47">*</operator><operator pos:start="620:48" pos:end="620:48">)</operator><name pos:start="620:49" pos:end="620:67">US899_VALID_CSR_PEM</name></expr></argument>, <argument pos:start="620:70" pos:end="620:96"><expr pos:start="620:70" pos:end="620:96"><call pos:start="620:70" pos:end="620:96"><name pos:start="620:70" pos:end="620:75">strlen</name><argument_list pos:start="620:76" pos:end="620:96">(<argument pos:start="620:77" pos:end="620:95"><expr pos:start="620:77" pos:end="620:95"><name pos:start="620:77" pos:end="620:95">US899_VALID_CSR_PEM</name></expr></argument>)</argument_list></call></expr></argument>, 
	                         <argument pos:start="621:34" pos:end="621:52"><expr pos:start="621:34" pos:end="621:52"><name pos:start="621:34" pos:end="621:52">EST_CERT_FORMAT_PEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="622:5" pos:end="622:27"><expr pos:start="622:5" pos:end="622:26"><call pos:start="622:5" pos:end="622:26"><name pos:start="622:5" pos:end="622:13">CU_ASSERT</name><argument_list pos:start="622:14" pos:end="622:26">(<argument pos:start="622:15" pos:end="622:25"><expr pos:start="622:15" pos:end="622:25"><name pos:start="622:15" pos:end="622:17">csr</name> <operator pos:start="622:19" pos:end="622:20">!=</operator> <name pos:start="622:22" pos:end="622:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="623:5" pos:end="625:5"><if pos:start="623:5" pos:end="625:5">if <condition pos:start="623:8" pos:end="623:12">(<expr pos:start="623:9" pos:end="623:11"><name pos:start="623:9" pos:end="623:11">csr</name></expr>)</condition> <block pos:start="623:14" pos:end="625:5">{<block_content pos:start="624:9" pos:end="624:27">
	<expr_stmt pos:start="624:9" pos:end="624:27"><expr pos:start="624:9" pos:end="624:26"><call pos:start="624:9" pos:end="624:26"><name pos:start="624:9" pos:end="624:21">X509_REQ_free</name><argument_list pos:start="624:22" pos:end="624:26">(<argument pos:start="624:23" pos:end="624:25"><expr pos:start="624:23" pos:end="624:25"><name pos:start="624:23" pos:end="624:25">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="627:5" pos:end="629:7">/*
     * Next try a valid DER encoded csr
     */</comment>
    <expr_stmt pos:start="630:5" pos:end="631:54"><expr pos:start="630:5" pos:end="631:53"><name pos:start="630:5" pos:end="630:7">csr</name> <operator pos:start="630:9" pos:end="630:9">=</operator> <call pos:start="630:11" pos:end="631:53"><name pos:start="630:11" pos:end="630:31">est_read_x509_request</name><argument_list pos:start="630:32" pos:end="631:53">(<argument pos:start="630:33" pos:end="630:67"><expr pos:start="630:33" pos:end="630:67"><operator pos:start="630:33" pos:end="630:33">(</operator><name pos:start="630:34" pos:end="630:41">unsigned</name> <name pos:start="630:43" pos:end="630:46">char</name><operator pos:start="630:47" pos:end="630:47">*</operator><operator pos:start="630:48" pos:end="630:48">)</operator><name pos:start="630:49" pos:end="630:67">US899_VALID_CSR_DER</name></expr></argument>, <argument pos:start="630:70" pos:end="630:92"><expr pos:start="630:70" pos:end="630:92"><name pos:start="630:70" pos:end="630:92">US899_VALID_CSR_DER_LEN</name></expr></argument>, 
	                         <argument pos:start="631:34" pos:end="631:52"><expr pos:start="631:34" pos:end="631:52"><name pos:start="631:34" pos:end="631:52">EST_CERT_FORMAT_DER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="632:5" pos:end="632:27"><expr pos:start="632:5" pos:end="632:26"><call pos:start="632:5" pos:end="632:26"><name pos:start="632:5" pos:end="632:13">CU_ASSERT</name><argument_list pos:start="632:14" pos:end="632:26">(<argument pos:start="632:15" pos:end="632:25"><expr pos:start="632:15" pos:end="632:25"><name pos:start="632:15" pos:end="632:17">csr</name> <operator pos:start="632:19" pos:end="632:20">!=</operator> <name pos:start="632:22" pos:end="632:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="633:5" pos:end="635:5"><if pos:start="633:5" pos:end="635:5">if <condition pos:start="633:8" pos:end="633:12">(<expr pos:start="633:9" pos:end="633:11"><name pos:start="633:9" pos:end="633:11">csr</name></expr>)</condition> <block pos:start="633:14" pos:end="635:5">{<block_content pos:start="634:9" pos:end="634:27">
	<expr_stmt pos:start="634:9" pos:end="634:27"><expr pos:start="634:9" pos:end="634:26"><call pos:start="634:9" pos:end="634:26"><name pos:start="634:9" pos:end="634:21">X509_REQ_free</name><argument_list pos:start="634:22" pos:end="634:26">(<argument pos:start="634:23" pos:end="634:25"><expr pos:start="634:23" pos:end="634:25"><name pos:start="634:23" pos:end="634:25">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line" pos:start="638:1" pos:end="638:70">//C. Attempt to enroll a newly created CSR that's already been signed </comment>
<comment type="line" pos:start="639:1" pos:end="639:30">//   via est_client_enroll_csr</comment>
<function pos:start="640:1" pos:end="709:1"><type pos:start="640:1" pos:end="640:11"><specifier pos:start="640:1" pos:end="640:6">static</specifier> <name pos:start="640:8" pos:end="640:11">void</name></type> <name pos:start="640:13" pos:end="640:23">us899_test5</name> <parameter_list pos:start="640:25" pos:end="640:30">(<parameter pos:start="640:26" pos:end="640:29"><decl pos:start="640:26" pos:end="640:29"><type pos:start="640:26" pos:end="640:29"><name pos:start="640:26" pos:end="640:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="641:1" pos:end="709:1">{<block_content pos:start="642:5" pos:end="708:22">
    <decl_stmt pos:start="642:5" pos:end="642:18"><decl pos:start="642:5" pos:end="642:17"><type pos:start="642:5" pos:end="642:13"><name pos:start="642:5" pos:end="642:11">EST_CTX</name> <modifier pos:start="642:13" pos:end="642:13">*</modifier></type><name pos:start="642:14" pos:end="642:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="643:5" pos:end="643:18"><decl pos:start="643:5" pos:end="643:17"><type pos:start="643:5" pos:end="643:14"><name pos:start="643:5" pos:end="643:12">EVP_PKEY</name> <modifier pos:start="643:14" pos:end="643:14">*</modifier></type><name pos:start="643:15" pos:end="643:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="644:5" pos:end="644:11"><decl pos:start="644:5" pos:end="644:10"><type pos:start="644:5" pos:end="644:7"><name pos:start="644:5" pos:end="644:7">int</name></type> <name pos:start="644:9" pos:end="644:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="645:5" pos:end="645:22"><decl pos:start="645:5" pos:end="645:21"><type pos:start="645:5" pos:end="645:7"><name pos:start="645:5" pos:end="645:7">int</name></type> <name pos:start="645:9" pos:end="645:17">pkcs7_len</name> <init pos:start="645:19" pos:end="645:21">= <expr pos:start="645:21" pos:end="645:21"><literal type="number" pos:start="645:21" pos:end="645:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="646:5" pos:end="646:18"><decl pos:start="646:5" pos:end="646:17"><type pos:start="646:5" pos:end="646:14"><name pos:start="646:5" pos:end="646:12">X509_REQ</name> <modifier pos:start="646:14" pos:end="646:14">*</modifier></type><name pos:start="646:15" pos:end="646:17">csr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="647:5" pos:end="647:36"><decl pos:start="647:5" pos:end="647:35"><type pos:start="647:5" pos:end="647:19"><name pos:start="647:5" pos:end="647:12">unsigned</name> <name pos:start="647:14" pos:end="647:17">char</name> <modifier pos:start="647:19" pos:end="647:19">*</modifier></type><name pos:start="647:20" pos:end="647:28">attr_data</name> <init pos:start="647:30" pos:end="647:35">= <expr pos:start="647:32" pos:end="647:35"><name pos:start="647:32" pos:end="647:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="648:5" pos:end="648:17"><decl pos:start="648:5" pos:end="648:16"><type pos:start="648:5" pos:end="648:7"><name pos:start="648:5" pos:end="648:7">int</name></type> <name pos:start="648:9" pos:end="648:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="650:5" pos:end="650:16"><expr pos:start="650:5" pos:end="650:15"><name pos:start="650:5" pos:end="650:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="652:5" pos:end="654:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="655:5" pos:end="657:54"><expr pos:start="655:5" pos:end="657:53"><name pos:start="655:5" pos:end="655:8">ectx</name> <operator pos:start="655:10" pos:end="655:10">=</operator> <call pos:start="655:12" pos:end="657:53"><name pos:start="655:12" pos:end="655:26">est_client_init</name><argument_list pos:start="655:27" pos:end="657:53">(<argument pos:start="655:28" pos:end="655:34"><expr pos:start="655:28" pos:end="655:34"><name pos:start="655:28" pos:end="655:34">cacerts</name></expr></argument>, <argument pos:start="655:37" pos:end="655:47"><expr pos:start="655:37" pos:end="655:47"><name pos:start="655:37" pos:end="655:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="656:28" pos:end="656:46"><expr pos:start="656:28" pos:end="656:46"><name pos:start="656:28" pos:end="656:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="657:28" pos:end="657:52"><expr pos:start="657:28" pos:end="657:52"><name pos:start="657:28" pos:end="657:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="658:5" pos:end="658:28"><expr pos:start="658:5" pos:end="658:27"><call pos:start="658:5" pos:end="658:27"><name pos:start="658:5" pos:end="658:13">CU_ASSERT</name><argument_list pos:start="658:14" pos:end="658:27">(<argument pos:start="658:15" pos:end="658:26"><expr pos:start="658:15" pos:end="658:26"><name pos:start="658:15" pos:end="658:18">ectx</name> <operator pos:start="658:20" pos:end="658:21">!=</operator> <name pos:start="658:23" pos:end="658:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="660:5" pos:end="662:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="663:5" pos:end="663:69"><expr pos:start="663:5" pos:end="663:68"><name pos:start="663:5" pos:end="663:6">rv</name> <operator pos:start="663:8" pos:end="663:8">=</operator> <call pos:start="663:10" pos:end="663:68"><name pos:start="663:10" pos:end="663:28">est_client_set_auth</name><argument_list pos:start="663:29" pos:end="663:68">(<argument pos:start="663:30" pos:end="663:33"><expr pos:start="663:30" pos:end="663:33"><name pos:start="663:30" pos:end="663:33">ectx</name></expr></argument>, <argument pos:start="663:36" pos:end="663:44"><expr pos:start="663:36" pos:end="663:44"><name pos:start="663:36" pos:end="663:44">US899_UID</name></expr></argument>, <argument pos:start="663:47" pos:end="663:55"><expr pos:start="663:47" pos:end="663:55"><name pos:start="663:47" pos:end="663:55">US899_PWD</name></expr></argument>, <argument pos:start="663:58" pos:end="663:61"><expr pos:start="663:58" pos:end="663:61"><name pos:start="663:58" pos:end="663:61">NULL</name></expr></argument>, <argument pos:start="663:64" pos:end="663:67"><expr pos:start="663:64" pos:end="663:67"><name pos:start="663:64" pos:end="663:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="664:5" pos:end="664:34"><expr pos:start="664:5" pos:end="664:33"><call pos:start="664:5" pos:end="664:33"><name pos:start="664:5" pos:end="664:13">CU_ASSERT</name><argument_list pos:start="664:14" pos:end="664:33">(<argument pos:start="664:15" pos:end="664:32"><expr pos:start="664:15" pos:end="664:32"><name pos:start="664:15" pos:end="664:16">rv</name> <operator pos:start="664:18" pos:end="664:19">==</operator> <name pos:start="664:21" pos:end="664:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="666:5" pos:end="668:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="669:5" pos:end="669:74"><expr pos:start="669:5" pos:end="669:73"><call pos:start="669:5" pos:end="669:73"><name pos:start="669:5" pos:end="669:25">est_client_set_server</name><argument_list pos:start="669:26" pos:end="669:73">(<argument pos:start="669:27" pos:end="669:30"><expr pos:start="669:27" pos:end="669:30"><name pos:start="669:27" pos:end="669:30">ectx</name></expr></argument>, <argument pos:start="669:33" pos:end="669:47"><expr pos:start="669:33" pos:end="669:47"><name pos:start="669:33" pos:end="669:47">US899_SERVER_IP</name></expr></argument>, <argument pos:start="669:50" pos:end="669:66"><expr pos:start="669:50" pos:end="669:66"><name pos:start="669:50" pos:end="669:66">US899_SERVER_PORT</name></expr></argument>, <argument pos:start="669:69" pos:end="669:72"><expr pos:start="669:69" pos:end="669:72"><name pos:start="669:69" pos:end="669:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="671:5" pos:end="673:7">/*
     * Generate a private key
     */</comment>
    <expr_stmt pos:start="674:5" pos:end="674:33"><expr pos:start="674:5" pos:end="674:32"><name pos:start="674:5" pos:end="674:7">key</name> <operator pos:start="674:9" pos:end="674:9">=</operator> <call pos:start="674:11" pos:end="674:32"><name pos:start="674:11" pos:end="674:30">generate_private_key</name><argument_list pos:start="674:31" pos:end="674:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="675:5" pos:end="675:27"><expr pos:start="675:5" pos:end="675:26"><call pos:start="675:5" pos:end="675:26"><name pos:start="675:5" pos:end="675:13">CU_ASSERT</name><argument_list pos:start="675:14" pos:end="675:26">(<argument pos:start="675:15" pos:end="675:25"><expr pos:start="675:15" pos:end="675:25"><name pos:start="675:15" pos:end="675:17">key</name> <operator pos:start="675:19" pos:end="675:20">!=</operator> <name pos:start="675:22" pos:end="675:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="677:5" pos:end="679:7">/*
     * Generate a new CSR
     */</comment>
    <expr_stmt pos:start="680:5" pos:end="680:25"><expr pos:start="680:5" pos:end="680:24"><name pos:start="680:5" pos:end="680:7">csr</name> <operator pos:start="680:9" pos:end="680:9">=</operator> <call pos:start="680:11" pos:end="680:24"><name pos:start="680:11" pos:end="680:22">X509_REQ_new</name><argument_list pos:start="680:23" pos:end="680:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="681:5" pos:end="681:27"><expr pos:start="681:5" pos:end="681:26"><call pos:start="681:5" pos:end="681:26"><name pos:start="681:5" pos:end="681:13">CU_ASSERT</name><argument_list pos:start="681:14" pos:end="681:26">(<argument pos:start="681:15" pos:end="681:25"><expr pos:start="681:15" pos:end="681:25"><name pos:start="681:15" pos:end="681:17">csr</name> <operator pos:start="681:19" pos:end="681:20">!=</operator> <name pos:start="681:22" pos:end="681:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="682:5" pos:end="682:50"><expr pos:start="682:5" pos:end="682:49"><name pos:start="682:5" pos:end="682:6">rv</name> <operator pos:start="682:8" pos:end="682:8">=</operator> <call pos:start="682:10" pos:end="682:49"><name pos:start="682:10" pos:end="682:26">populate_x509_csr</name><argument_list pos:start="682:27" pos:end="682:49">(<argument pos:start="682:28" pos:end="682:30"><expr pos:start="682:28" pos:end="682:30"><name pos:start="682:28" pos:end="682:30">csr</name></expr></argument>, <argument pos:start="682:33" pos:end="682:35"><expr pos:start="682:33" pos:end="682:35"><name pos:start="682:33" pos:end="682:35">key</name></expr></argument>, <argument pos:start="682:38" pos:end="682:48"><expr pos:start="682:38" pos:end="682:48"><literal type="string" pos:start="682:38" pos:end="682:48">"US899-TC5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="683:5" pos:end="683:27"><expr pos:start="683:5" pos:end="683:26"><call pos:start="683:5" pos:end="683:26"><name pos:start="683:5" pos:end="683:13">CU_ASSERT</name><argument_list pos:start="683:14" pos:end="683:26">(<argument pos:start="683:15" pos:end="683:25"><expr pos:start="683:15" pos:end="683:25"><name pos:start="683:15" pos:end="683:17">csr</name> <operator pos:start="683:19" pos:end="683:20">!=</operator> <name pos:start="683:22" pos:end="683:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="685:5" pos:end="687:7">/*
     * Sign the CSR
     */</comment>

    <expr_stmt pos:start="689:5" pos:end="689:45"><expr pos:start="689:5" pos:end="689:44"><name pos:start="689:5" pos:end="689:6">rv</name> <operator pos:start="689:8" pos:end="689:8">=</operator> <call pos:start="689:10" pos:end="689:44"><name pos:start="689:10" pos:end="689:22">sign_X509_req</name><argument_list pos:start="689:23" pos:end="689:44">(<argument pos:start="689:24" pos:end="689:26"><expr pos:start="689:24" pos:end="689:26"><name pos:start="689:24" pos:end="689:26">csr</name></expr></argument>,<argument pos:start="689:28" pos:end="689:30"><expr pos:start="689:28" pos:end="689:30"><name pos:start="689:28" pos:end="689:30">key</name></expr></argument>,<argument pos:start="689:32" pos:end="689:43"><expr pos:start="689:32" pos:end="689:43"><call pos:start="689:32" pos:end="689:43"><name pos:start="689:32" pos:end="689:41">EVP_sha256</name><argument_list pos:start="689:42" pos:end="689:43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <comment type="block" pos:start="691:5" pos:end="693:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="694:5" pos:end="694:62"><expr pos:start="694:5" pos:end="694:61"><name pos:start="694:5" pos:end="694:6">rv</name> <operator pos:start="694:8" pos:end="694:8">=</operator> <call pos:start="694:10" pos:end="694:61"><name pos:start="694:10" pos:end="694:32">est_client_get_csrattrs</name><argument_list pos:start="694:33" pos:end="694:61">(<argument pos:start="694:34" pos:end="694:37"><expr pos:start="694:34" pos:end="694:37"><name pos:start="694:34" pos:end="694:37">ectx</name></expr></argument>, <argument pos:start="694:40" pos:end="694:49"><expr pos:start="694:40" pos:end="694:49"><operator pos:start="694:40" pos:end="694:40">&amp;</operator><name pos:start="694:41" pos:end="694:49">attr_data</name></expr></argument>, <argument pos:start="694:52" pos:end="694:60"><expr pos:start="694:52" pos:end="694:60"><operator pos:start="694:52" pos:end="694:52">&amp;</operator><name pos:start="694:53" pos:end="694:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="695:5" pos:end="695:34"><expr pos:start="695:5" pos:end="695:33"><call pos:start="695:5" pos:end="695:33"><name pos:start="695:5" pos:end="695:13">CU_ASSERT</name><argument_list pos:start="695:14" pos:end="695:33">(<argument pos:start="695:15" pos:end="695:32"><expr pos:start="695:15" pos:end="695:32"><name pos:start="695:15" pos:end="695:16">rv</name> <operator pos:start="695:18" pos:end="695:19">==</operator> <name pos:start="695:21" pos:end="695:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="697:5" pos:end="699:7">/*
     * Use the alternate API to enroll an existing CSR.  This should pass.
     */</comment>
    <expr_stmt pos:start="700:5" pos:end="700:59"><expr pos:start="700:5" pos:end="700:58"><name pos:start="700:5" pos:end="700:6">rv</name> <operator pos:start="700:8" pos:end="700:8">=</operator> <call pos:start="700:10" pos:end="700:58"><name pos:start="700:10" pos:end="700:30">est_client_enroll_csr</name><argument_list pos:start="700:31" pos:end="700:58">(<argument pos:start="700:32" pos:end="700:35"><expr pos:start="700:32" pos:end="700:35"><name pos:start="700:32" pos:end="700:35">ectx</name></expr></argument>, <argument pos:start="700:38" pos:end="700:40"><expr pos:start="700:38" pos:end="700:40"><name pos:start="700:38" pos:end="700:40">csr</name></expr></argument>, <argument pos:start="700:43" pos:end="700:52"><expr pos:start="700:43" pos:end="700:52"><operator pos:start="700:43" pos:end="700:43">&amp;</operator><name pos:start="700:44" pos:end="700:52">pkcs7_len</name></expr></argument>, <argument pos:start="700:55" pos:end="700:57"><expr pos:start="700:55" pos:end="700:57"><name pos:start="700:55" pos:end="700:57">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="701:5" pos:end="701:34"><expr pos:start="701:5" pos:end="701:33"><call pos:start="701:5" pos:end="701:33"><name pos:start="701:5" pos:end="701:13">CU_ASSERT</name><argument_list pos:start="701:14" pos:end="701:33">(<argument pos:start="701:15" pos:end="701:32"><expr pos:start="701:15" pos:end="701:32"><name pos:start="701:15" pos:end="701:16">rv</name> <operator pos:start="701:18" pos:end="701:19">==</operator> <name pos:start="701:21" pos:end="701:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="703:5" pos:end="705:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="706:5" pos:end="706:23"><expr pos:start="706:5" pos:end="706:22"><call pos:start="706:5" pos:end="706:22"><name pos:start="706:5" pos:end="706:17">X509_REQ_free</name><argument_list pos:start="706:18" pos:end="706:22">(<argument pos:start="706:19" pos:end="706:21"><expr pos:start="706:19" pos:end="706:21"><name pos:start="706:19" pos:end="706:21">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="707:5" pos:end="707:23"><expr pos:start="707:5" pos:end="707:22"><call pos:start="707:5" pos:end="707:22"><name pos:start="707:5" pos:end="707:17">EVP_PKEY_free</name><argument_list pos:start="707:18" pos:end="707:22">(<argument pos:start="707:19" pos:end="707:21"><expr pos:start="707:19" pos:end="707:21"><name pos:start="707:19" pos:end="707:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="708:5" pos:end="708:22"><expr pos:start="708:5" pos:end="708:21"><call pos:start="708:5" pos:end="708:21"><name pos:start="708:5" pos:end="708:15">est_destroy</name><argument_list pos:start="708:16" pos:end="708:21">(<argument pos:start="708:17" pos:end="708:20"><expr pos:start="708:17" pos:end="708:20"><name pos:start="708:17" pos:end="708:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="711:1" pos:end="717:3">/*
 * Simple enroll - FQDN mismatch hostname in CN 
 *
 * This test confirms that a mismatched host name on
 * the server cert CN will result in an auth failure
 * at the TLS layer on the client side.
 */</comment>
<function pos:start="718:1" pos:end="748:1"><type pos:start="718:1" pos:end="718:11"><specifier pos:start="718:1" pos:end="718:6">static</specifier> <name pos:start="718:8" pos:end="718:11">void</name></type> <name pos:start="718:13" pos:end="718:23">us899_test6</name> <parameter_list pos:start="718:25" pos:end="718:30">(<parameter pos:start="718:26" pos:end="718:29"><decl pos:start="718:26" pos:end="718:29"><type pos:start="718:26" pos:end="718:29"><name pos:start="718:26" pos:end="718:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="719:1" pos:end="748:1">{<block_content pos:start="720:5" pos:end="746:75">
    <decl_stmt pos:start="720:5" pos:end="720:11"><decl pos:start="720:5" pos:end="720:10"><type pos:start="720:5" pos:end="720:7"><name pos:start="720:5" pos:end="720:7">int</name></type> <name pos:start="720:9" pos:end="720:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="722:5" pos:end="722:16"><expr pos:start="722:5" pos:end="722:15"><name pos:start="722:5" pos:end="722:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="724:5" pos:end="727:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="728:5" pos:end="728:14"><expr pos:start="728:5" pos:end="728:13"><call pos:start="728:5" pos:end="728:13"><name pos:start="728:5" pos:end="728:11">st_stop</name><argument_list pos:start="728:12" pos:end="728:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="730:5" pos:end="734:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="735:5" pos:end="742:27"><expr pos:start="735:5" pos:end="742:26"><name pos:start="735:5" pos:end="735:6">rv</name> <operator pos:start="735:8" pos:end="735:8">=</operator> <call pos:start="735:10" pos:end="742:26"><name pos:start="735:10" pos:end="735:17">st_start</name><argument_list pos:start="735:18" pos:end="742:26">(<argument pos:start="735:19" pos:end="735:35"><expr pos:start="735:19" pos:end="735:35"><name pos:start="735:19" pos:end="735:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="736:19" pos:end="736:47"><expr pos:start="736:19" pos:end="736:47"><name pos:start="736:19" pos:end="736:47">US899_SERVER_CERT_CN_MISMATCH</name></expr></argument>,
	          <argument pos:start="737:19" pos:end="737:46"><expr pos:start="737:19" pos:end="737:46"><name pos:start="737:19" pos:end="737:46">US899_SERVER_KEY_CN_MISMATCH</name></expr></argument>,
	          <argument pos:start="738:19" pos:end="738:36"><expr pos:start="738:19" pos:end="738:36"><literal type="string" pos:start="738:19" pos:end="738:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="739:19" pos:end="739:31"><expr pos:start="739:19" pos:end="739:31"><name pos:start="739:19" pos:end="739:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="740:19" pos:end="740:35"><expr pos:start="740:19" pos:end="740:35"><name pos:start="740:19" pos:end="740:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="741:19" pos:end="741:39"><expr pos:start="741:19" pos:end="741:39"><literal type="string" pos:start="741:19" pos:end="741:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="742:19" pos:end="742:19"><expr pos:start="742:19" pos:end="742:19"><literal type="number" pos:start="742:19" pos:end="742:19">0</literal></expr></argument>, <argument pos:start="742:22" pos:end="742:22"><expr pos:start="742:22" pos:end="742:22"><literal type="number" pos:start="742:22" pos:end="742:22">0</literal></expr></argument>, <argument pos:start="742:25" pos:end="742:25"><expr pos:start="742:25" pos:end="742:25"><literal type="number" pos:start="742:25" pos:end="742:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="743:5" pos:end="743:23"><expr pos:start="743:5" pos:end="743:22"><call pos:start="743:5" pos:end="743:22"><name pos:start="743:5" pos:end="743:13">CU_ASSERT</name><argument_list pos:start="743:14" pos:end="743:22">(<argument pos:start="743:15" pos:end="743:21"><expr pos:start="743:15" pos:end="743:21"><name pos:start="743:15" pos:end="743:16">rv</name> <operator pos:start="743:18" pos:end="743:19">==</operator> <literal type="number" pos:start="743:21" pos:end="743:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="744:5" pos:end="744:19"><if pos:start="744:5" pos:end="744:19">if <condition pos:start="744:8" pos:end="744:11">(<expr pos:start="744:9" pos:end="744:10"><name pos:start="744:9" pos:end="744:10">rv</name></expr>)</condition><block type="pseudo" pos:start="744:13" pos:end="744:19"><block_content pos:start="744:13" pos:end="744:19"> <return pos:start="744:13" pos:end="744:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="746:5" pos:end="746:75"><expr pos:start="746:5" pos:end="746:74"><call pos:start="746:5" pos:end="746:74"><name pos:start="746:5" pos:end="746:23">us899_simple_enroll</name><argument_list pos:start="746:24" pos:end="746:74">(<argument pos:start="746:25" pos:end="746:33"><expr pos:start="746:25" pos:end="746:33"><literal type="string" pos:start="746:25" pos:end="746:33">"TC899-6"</literal></expr></argument>, <argument pos:start="746:36" pos:end="746:50"><expr pos:start="746:36" pos:end="746:50"><name pos:start="746:36" pos:end="746:50">US899_SERVER_IP</name></expr></argument>, <argument pos:start="746:53" pos:end="746:73"><expr pos:start="746:53" pos:end="746:73"><name pos:start="746:53" pos:end="746:73">EST_ERR_FQDN_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<comment type="block" pos:start="750:1" pos:end="759:3">/*
 * Simple enroll - FQDN mismatch IPv4 address in CN 
 *
 * This test confirms that a mismatched IP address in
 * the server cert CN will result in an auth failure
 * at the TLS layer on the client side.
 * Note: this test may be redundant since the IP address
 *       matching logic only occurs when the dNSName is 
 *       used instead of the CommonName.
 */</comment>
<function pos:start="760:1" pos:end="790:1"><type pos:start="760:1" pos:end="760:11"><specifier pos:start="760:1" pos:end="760:6">static</specifier> <name pos:start="760:8" pos:end="760:11">void</name></type> <name pos:start="760:13" pos:end="760:23">us899_test7</name> <parameter_list pos:start="760:25" pos:end="760:30">(<parameter pos:start="760:26" pos:end="760:29"><decl pos:start="760:26" pos:end="760:29"><type pos:start="760:26" pos:end="760:29"><name pos:start="760:26" pos:end="760:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="761:1" pos:end="790:1">{<block_content pos:start="762:5" pos:end="788:75">
    <decl_stmt pos:start="762:5" pos:end="762:11"><decl pos:start="762:5" pos:end="762:10"><type pos:start="762:5" pos:end="762:7"><name pos:start="762:5" pos:end="762:7">int</name></type> <name pos:start="762:9" pos:end="762:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="764:5" pos:end="764:16"><expr pos:start="764:5" pos:end="764:15"><name pos:start="764:5" pos:end="764:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="766:5" pos:end="769:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="770:5" pos:end="770:14"><expr pos:start="770:5" pos:end="770:13"><call pos:start="770:5" pos:end="770:13"><name pos:start="770:5" pos:end="770:11">st_stop</name><argument_list pos:start="770:12" pos:end="770:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="772:5" pos:end="776:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="777:5" pos:end="784:27"><expr pos:start="777:5" pos:end="784:26"><name pos:start="777:5" pos:end="777:6">rv</name> <operator pos:start="777:8" pos:end="777:8">=</operator> <call pos:start="777:10" pos:end="784:26"><name pos:start="777:10" pos:end="777:17">st_start</name><argument_list pos:start="777:18" pos:end="784:26">(<argument pos:start="777:19" pos:end="777:35"><expr pos:start="777:19" pos:end="777:35"><name pos:start="777:19" pos:end="777:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="778:19" pos:end="778:50"><expr pos:start="778:19" pos:end="778:50"><name pos:start="778:19" pos:end="778:50">US899_SERVER_CERT_CN_MISMATCH_IP</name></expr></argument>,
	          <argument pos:start="779:19" pos:end="779:49"><expr pos:start="779:19" pos:end="779:49"><name pos:start="779:19" pos:end="779:49">US899_SERVER_KEY_CN_MISMATCH_IP</name></expr></argument>,
	          <argument pos:start="780:19" pos:end="780:36"><expr pos:start="780:19" pos:end="780:36"><literal type="string" pos:start="780:19" pos:end="780:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="781:19" pos:end="781:31"><expr pos:start="781:19" pos:end="781:31"><name pos:start="781:19" pos:end="781:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="782:19" pos:end="782:35"><expr pos:start="782:19" pos:end="782:35"><name pos:start="782:19" pos:end="782:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="783:19" pos:end="783:39"><expr pos:start="783:19" pos:end="783:39"><literal type="string" pos:start="783:19" pos:end="783:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="784:19" pos:end="784:19"><expr pos:start="784:19" pos:end="784:19"><literal type="number" pos:start="784:19" pos:end="784:19">0</literal></expr></argument>, <argument pos:start="784:22" pos:end="784:22"><expr pos:start="784:22" pos:end="784:22"><literal type="number" pos:start="784:22" pos:end="784:22">0</literal></expr></argument>, <argument pos:start="784:25" pos:end="784:25"><expr pos:start="784:25" pos:end="784:25"><literal type="number" pos:start="784:25" pos:end="784:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="785:5" pos:end="785:23"><expr pos:start="785:5" pos:end="785:22"><call pos:start="785:5" pos:end="785:22"><name pos:start="785:5" pos:end="785:13">CU_ASSERT</name><argument_list pos:start="785:14" pos:end="785:22">(<argument pos:start="785:15" pos:end="785:21"><expr pos:start="785:15" pos:end="785:21"><name pos:start="785:15" pos:end="785:16">rv</name> <operator pos:start="785:18" pos:end="785:19">==</operator> <literal type="number" pos:start="785:21" pos:end="785:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="786:5" pos:end="786:19"><if pos:start="786:5" pos:end="786:19">if <condition pos:start="786:8" pos:end="786:11">(<expr pos:start="786:9" pos:end="786:10"><name pos:start="786:9" pos:end="786:10">rv</name></expr>)</condition><block type="pseudo" pos:start="786:13" pos:end="786:19"><block_content pos:start="786:13" pos:end="786:19"> <return pos:start="786:13" pos:end="786:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="788:5" pos:end="788:75"><expr pos:start="788:5" pos:end="788:74"><call pos:start="788:5" pos:end="788:74"><name pos:start="788:5" pos:end="788:23">us899_simple_enroll</name><argument_list pos:start="788:24" pos:end="788:74">(<argument pos:start="788:25" pos:end="788:33"><expr pos:start="788:25" pos:end="788:33"><literal type="string" pos:start="788:25" pos:end="788:33">"TC899-7"</literal></expr></argument>, <argument pos:start="788:36" pos:end="788:50"><expr pos:start="788:36" pos:end="788:50"><name pos:start="788:36" pos:end="788:50">US899_SERVER_IP</name></expr></argument>, <argument pos:start="788:53" pos:end="788:73"><expr pos:start="788:53" pos:end="788:73"><name pos:start="788:53" pos:end="788:73">EST_ERR_FQDN_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<comment type="block" pos:start="792:1" pos:end="799:3">/*
 * Simple enroll - FQDN matched wildcard in CN 
 *
 * This test confirms that wildcard matching logic
 * in the CN is working. The cert uses a wildcard
 * pattern of *.cisco.com with a server address
 * of localhost.cisco.com.
 */</comment>
<function pos:start="800:1" pos:end="830:1"><type pos:start="800:1" pos:end="800:11"><specifier pos:start="800:1" pos:end="800:6">static</specifier> <name pos:start="800:8" pos:end="800:11">void</name></type> <name pos:start="800:13" pos:end="800:23">us899_test8</name> <parameter_list pos:start="800:25" pos:end="800:30">(<parameter pos:start="800:26" pos:end="800:29"><decl pos:start="800:26" pos:end="800:29"><type pos:start="800:26" pos:end="800:29"><name pos:start="800:26" pos:end="800:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="801:1" pos:end="830:1">{<block_content pos:start="802:5" pos:end="828:72">
    <decl_stmt pos:start="802:5" pos:end="802:11"><decl pos:start="802:5" pos:end="802:10"><type pos:start="802:5" pos:end="802:7"><name pos:start="802:5" pos:end="802:7">int</name></type> <name pos:start="802:9" pos:end="802:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="804:5" pos:end="804:16"><expr pos:start="804:5" pos:end="804:15"><name pos:start="804:5" pos:end="804:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="806:5" pos:end="809:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="810:5" pos:end="810:14"><expr pos:start="810:5" pos:end="810:13"><call pos:start="810:5" pos:end="810:13"><name pos:start="810:5" pos:end="810:11">st_stop</name><argument_list pos:start="810:12" pos:end="810:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="812:5" pos:end="816:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="817:5" pos:end="824:27"><expr pos:start="817:5" pos:end="824:26"><name pos:start="817:5" pos:end="817:6">rv</name> <operator pos:start="817:8" pos:end="817:8">=</operator> <call pos:start="817:10" pos:end="824:26"><name pos:start="817:10" pos:end="817:17">st_start</name><argument_list pos:start="817:18" pos:end="824:26">(<argument pos:start="817:19" pos:end="817:35"><expr pos:start="817:19" pos:end="817:35"><name pos:start="817:19" pos:end="817:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="818:19" pos:end="818:47"><expr pos:start="818:19" pos:end="818:47"><name pos:start="818:19" pos:end="818:47">US899_SERVER_CERT_CN_MATCH_WC</name></expr></argument>,
	          <argument pos:start="819:19" pos:end="819:46"><expr pos:start="819:19" pos:end="819:46"><name pos:start="819:19" pos:end="819:46">US899_SERVER_KEY_CN_MATCH_WC</name></expr></argument>,
	          <argument pos:start="820:19" pos:end="820:36"><expr pos:start="820:19" pos:end="820:36"><literal type="string" pos:start="820:19" pos:end="820:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="821:19" pos:end="821:31"><expr pos:start="821:19" pos:end="821:31"><name pos:start="821:19" pos:end="821:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="822:19" pos:end="822:35"><expr pos:start="822:19" pos:end="822:35"><name pos:start="822:19" pos:end="822:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="823:19" pos:end="823:39"><expr pos:start="823:19" pos:end="823:39"><literal type="string" pos:start="823:19" pos:end="823:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="824:19" pos:end="824:19"><expr pos:start="824:19" pos:end="824:19"><literal type="number" pos:start="824:19" pos:end="824:19">0</literal></expr></argument>, <argument pos:start="824:22" pos:end="824:22"><expr pos:start="824:22" pos:end="824:22"><literal type="number" pos:start="824:22" pos:end="824:22">0</literal></expr></argument>, <argument pos:start="824:25" pos:end="824:25"><expr pos:start="824:25" pos:end="824:25"><literal type="number" pos:start="824:25" pos:end="824:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="825:5" pos:end="825:23"><expr pos:start="825:5" pos:end="825:22"><call pos:start="825:5" pos:end="825:22"><name pos:start="825:5" pos:end="825:13">CU_ASSERT</name><argument_list pos:start="825:14" pos:end="825:22">(<argument pos:start="825:15" pos:end="825:21"><expr pos:start="825:15" pos:end="825:21"><name pos:start="825:15" pos:end="825:16">rv</name> <operator pos:start="825:18" pos:end="825:19">==</operator> <literal type="number" pos:start="825:21" pos:end="825:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="826:5" pos:end="826:19"><if pos:start="826:5" pos:end="826:19">if <condition pos:start="826:8" pos:end="826:11">(<expr pos:start="826:9" pos:end="826:10"><name pos:start="826:9" pos:end="826:10">rv</name></expr>)</condition><block type="pseudo" pos:start="826:13" pos:end="826:19"><block_content pos:start="826:13" pos:end="826:19"> <return pos:start="826:13" pos:end="826:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="828:5" pos:end="828:72"><expr pos:start="828:5" pos:end="828:71"><call pos:start="828:5" pos:end="828:71"><name pos:start="828:5" pos:end="828:23">us899_simple_enroll</name><argument_list pos:start="828:24" pos:end="828:71">(<argument pos:start="828:25" pos:end="828:33"><expr pos:start="828:25" pos:end="828:33"><literal type="string" pos:start="828:25" pos:end="828:33">"TC899-8"</literal></expr></argument>, <argument pos:start="828:36" pos:end="828:56"><expr pos:start="828:36" pos:end="828:56"><literal type="string" pos:start="828:36" pos:end="828:56">"localhost.cisco.com"</literal></expr></argument>, <argument pos:start="828:59" pos:end="828:70"><expr pos:start="828:59" pos:end="828:70"><name pos:start="828:59" pos:end="828:70">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<comment type="block" pos:start="832:1" pos:end="839:3">/*
 * Simple enroll - FQDN mismatched wildcard in CN 
 *
 * This test confirms that wildcard matching logic
 * in the CN is working. The cert uses a wildcard
 * pattern of *.google.com with a server address
 * of localhost.cisco.com.
 */</comment>
<function pos:start="840:1" pos:end="869:1"><type pos:start="840:1" pos:end="840:11"><specifier pos:start="840:1" pos:end="840:6">static</specifier> <name pos:start="840:8" pos:end="840:11">void</name></type> <name pos:start="840:13" pos:end="840:23">us899_test9</name> <parameter_list pos:start="840:25" pos:end="840:30">(<parameter pos:start="840:26" pos:end="840:29"><decl pos:start="840:26" pos:end="840:29"><type pos:start="840:26" pos:end="840:29"><name pos:start="840:26" pos:end="840:29">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="841:1" pos:end="869:1">{<block_content pos:start="842:5" pos:end="868:81">
    <decl_stmt pos:start="842:5" pos:end="842:11"><decl pos:start="842:5" pos:end="842:10"><type pos:start="842:5" pos:end="842:7"><name pos:start="842:5" pos:end="842:7">int</name></type> <name pos:start="842:9" pos:end="842:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="844:5" pos:end="844:16"><expr pos:start="844:5" pos:end="844:15"><name pos:start="844:5" pos:end="844:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="846:5" pos:end="849:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="850:5" pos:end="850:14"><expr pos:start="850:5" pos:end="850:13"><call pos:start="850:5" pos:end="850:13"><name pos:start="850:5" pos:end="850:11">st_stop</name><argument_list pos:start="850:12" pos:end="850:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="852:5" pos:end="856:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="857:5" pos:end="864:27"><expr pos:start="857:5" pos:end="864:26"><name pos:start="857:5" pos:end="857:6">rv</name> <operator pos:start="857:8" pos:end="857:8">=</operator> <call pos:start="857:10" pos:end="864:26"><name pos:start="857:10" pos:end="857:17">st_start</name><argument_list pos:start="857:18" pos:end="864:26">(<argument pos:start="857:19" pos:end="857:35"><expr pos:start="857:19" pos:end="857:35"><name pos:start="857:19" pos:end="857:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="858:19" pos:end="858:50"><expr pos:start="858:19" pos:end="858:50"><name pos:start="858:19" pos:end="858:50">US899_SERVER_CERT_CN_MISMATCH_WC</name></expr></argument>,
	          <argument pos:start="859:19" pos:end="859:49"><expr pos:start="859:19" pos:end="859:49"><name pos:start="859:19" pos:end="859:49">US899_SERVER_KEY_CN_MISMATCH_WC</name></expr></argument>,
	          <argument pos:start="860:19" pos:end="860:36"><expr pos:start="860:19" pos:end="860:36"><literal type="string" pos:start="860:19" pos:end="860:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="861:19" pos:end="861:31"><expr pos:start="861:19" pos:end="861:31"><name pos:start="861:19" pos:end="861:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="862:19" pos:end="862:35"><expr pos:start="862:19" pos:end="862:35"><name pos:start="862:19" pos:end="862:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="863:19" pos:end="863:39"><expr pos:start="863:19" pos:end="863:39"><literal type="string" pos:start="863:19" pos:end="863:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="864:19" pos:end="864:19"><expr pos:start="864:19" pos:end="864:19"><literal type="number" pos:start="864:19" pos:end="864:19">0</literal></expr></argument>, <argument pos:start="864:22" pos:end="864:22"><expr pos:start="864:22" pos:end="864:22"><literal type="number" pos:start="864:22" pos:end="864:22">0</literal></expr></argument>, <argument pos:start="864:25" pos:end="864:25"><expr pos:start="864:25" pos:end="864:25"><literal type="number" pos:start="864:25" pos:end="864:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="865:5" pos:end="865:23"><expr pos:start="865:5" pos:end="865:22"><call pos:start="865:5" pos:end="865:22"><name pos:start="865:5" pos:end="865:13">CU_ASSERT</name><argument_list pos:start="865:14" pos:end="865:22">(<argument pos:start="865:15" pos:end="865:21"><expr pos:start="865:15" pos:end="865:21"><name pos:start="865:15" pos:end="865:16">rv</name> <operator pos:start="865:18" pos:end="865:19">==</operator> <literal type="number" pos:start="865:21" pos:end="865:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="866:5" pos:end="866:19"><if pos:start="866:5" pos:end="866:19">if <condition pos:start="866:8" pos:end="866:11">(<expr pos:start="866:9" pos:end="866:10"><name pos:start="866:9" pos:end="866:10">rv</name></expr>)</condition><block type="pseudo" pos:start="866:13" pos:end="866:19"><block_content pos:start="866:13" pos:end="866:19"> <return pos:start="866:13" pos:end="866:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="868:5" pos:end="868:81"><expr pos:start="868:5" pos:end="868:80"><call pos:start="868:5" pos:end="868:80"><name pos:start="868:5" pos:end="868:23">us899_simple_enroll</name><argument_list pos:start="868:24" pos:end="868:80">(<argument pos:start="868:25" pos:end="868:33"><expr pos:start="868:25" pos:end="868:33"><literal type="string" pos:start="868:25" pos:end="868:33">"TC899-9"</literal></expr></argument>, <argument pos:start="868:36" pos:end="868:56"><expr pos:start="868:36" pos:end="868:56"><literal type="string" pos:start="868:36" pos:end="868:56">"localhost.cisco.com"</literal></expr></argument>, <argument pos:start="868:59" pos:end="868:79"><expr pos:start="868:59" pos:end="868:79"><name pos:start="868:59" pos:end="868:79">EST_ERR_FQDN_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<comment type="block" pos:start="871:1" pos:end="876:3">/*
 * Simple enroll - FQDN matched hostname in SubjectAltName 
 *
 * This test confirms that a matched host name on
 * the server cert SubjectAltName ext will result in an auth success. 
 */</comment>
<function pos:start="877:1" pos:end="906:1"><type pos:start="877:1" pos:end="877:11"><specifier pos:start="877:1" pos:end="877:6">static</specifier> <name pos:start="877:8" pos:end="877:11">void</name></type> <name pos:start="877:13" pos:end="877:24">us899_test10</name> <parameter_list pos:start="877:26" pos:end="877:31">(<parameter pos:start="877:27" pos:end="877:30"><decl pos:start="877:27" pos:end="877:30"><type pos:start="877:27" pos:end="877:30"><name pos:start="877:27" pos:end="877:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="878:1" pos:end="906:1">{<block_content pos:start="879:5" pos:end="905:73">
    <decl_stmt pos:start="879:5" pos:end="879:11"><decl pos:start="879:5" pos:end="879:10"><type pos:start="879:5" pos:end="879:7"><name pos:start="879:5" pos:end="879:7">int</name></type> <name pos:start="879:9" pos:end="879:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="881:5" pos:end="881:16"><expr pos:start="881:5" pos:end="881:15"><name pos:start="881:5" pos:end="881:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="883:5" pos:end="886:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="887:5" pos:end="887:14"><expr pos:start="887:5" pos:end="887:13"><call pos:start="887:5" pos:end="887:13"><name pos:start="887:5" pos:end="887:11">st_stop</name><argument_list pos:start="887:12" pos:end="887:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="889:5" pos:end="893:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="894:5" pos:end="901:27"><expr pos:start="894:5" pos:end="901:26"><name pos:start="894:5" pos:end="894:6">rv</name> <operator pos:start="894:8" pos:end="894:8">=</operator> <call pos:start="894:10" pos:end="901:26"><name pos:start="894:10" pos:end="894:17">st_start</name><argument_list pos:start="894:18" pos:end="901:26">(<argument pos:start="894:19" pos:end="894:35"><expr pos:start="894:19" pos:end="894:35"><name pos:start="894:19" pos:end="894:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="895:19" pos:end="895:45"><expr pos:start="895:19" pos:end="895:45"><name pos:start="895:19" pos:end="895:45">US899_SERVER_CERT_SAN_MATCH</name></expr></argument>,
	          <argument pos:start="896:19" pos:end="896:44"><expr pos:start="896:19" pos:end="896:44"><name pos:start="896:19" pos:end="896:44">US899_SERVER_KEY_SAN_MATCH</name></expr></argument>,
	          <argument pos:start="897:19" pos:end="897:36"><expr pos:start="897:19" pos:end="897:36"><literal type="string" pos:start="897:19" pos:end="897:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="898:19" pos:end="898:31"><expr pos:start="898:19" pos:end="898:31"><name pos:start="898:19" pos:end="898:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="899:19" pos:end="899:35"><expr pos:start="899:19" pos:end="899:35"><name pos:start="899:19" pos:end="899:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="900:19" pos:end="900:39"><expr pos:start="900:19" pos:end="900:39"><literal type="string" pos:start="900:19" pos:end="900:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="901:19" pos:end="901:19"><expr pos:start="901:19" pos:end="901:19"><literal type="number" pos:start="901:19" pos:end="901:19">0</literal></expr></argument>, <argument pos:start="901:22" pos:end="901:22"><expr pos:start="901:22" pos:end="901:22"><literal type="number" pos:start="901:22" pos:end="901:22">0</literal></expr></argument>, <argument pos:start="901:25" pos:end="901:25"><expr pos:start="901:25" pos:end="901:25"><literal type="number" pos:start="901:25" pos:end="901:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="902:5" pos:end="902:23"><expr pos:start="902:5" pos:end="902:22"><call pos:start="902:5" pos:end="902:22"><name pos:start="902:5" pos:end="902:13">CU_ASSERT</name><argument_list pos:start="902:14" pos:end="902:22">(<argument pos:start="902:15" pos:end="902:21"><expr pos:start="902:15" pos:end="902:21"><name pos:start="902:15" pos:end="902:16">rv</name> <operator pos:start="902:18" pos:end="902:19">==</operator> <literal type="number" pos:start="902:21" pos:end="902:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="903:5" pos:end="903:19"><if pos:start="903:5" pos:end="903:19">if <condition pos:start="903:8" pos:end="903:11">(<expr pos:start="903:9" pos:end="903:10"><name pos:start="903:9" pos:end="903:10">rv</name></expr>)</condition><block type="pseudo" pos:start="903:13" pos:end="903:19"><block_content pos:start="903:13" pos:end="903:19"> <return pos:start="903:13" pos:end="903:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="905:5" pos:end="905:73"><expr pos:start="905:5" pos:end="905:72"><call pos:start="905:5" pos:end="905:72"><name pos:start="905:5" pos:end="905:23">us899_simple_enroll</name><argument_list pos:start="905:24" pos:end="905:72">(<argument pos:start="905:25" pos:end="905:34"><expr pos:start="905:25" pos:end="905:34"><literal type="string" pos:start="905:25" pos:end="905:34">"TC899-10"</literal></expr></argument>, <argument pos:start="905:37" pos:end="905:57"><expr pos:start="905:37" pos:end="905:57"><literal type="string" pos:start="905:37" pos:end="905:57">"localhost.cisco.com"</literal></expr></argument>, <argument pos:start="905:60" pos:end="905:71"><expr pos:start="905:60" pos:end="905:71"><name pos:start="905:60" pos:end="905:71">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<comment type="block" pos:start="908:1" pos:end="913:3">/*
 * Simple enroll - FQDN mismatched hostname in SubjectAltName 
 *
 * This test confirms that a mismatched host name on
 * the server cert SubjectAltName ext will result in an auth failure. 
 */</comment>
<function pos:start="914:1" pos:end="943:1"><type pos:start="914:1" pos:end="914:11"><specifier pos:start="914:1" pos:end="914:6">static</specifier> <name pos:start="914:8" pos:end="914:11">void</name></type> <name pos:start="914:13" pos:end="914:24">us899_test11</name> <parameter_list pos:start="914:26" pos:end="914:31">(<parameter pos:start="914:27" pos:end="914:30"><decl pos:start="914:27" pos:end="914:30"><type pos:start="914:27" pos:end="914:30"><name pos:start="914:27" pos:end="914:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="915:1" pos:end="943:1">{<block_content pos:start="916:5" pos:end="942:82">
    <decl_stmt pos:start="916:5" pos:end="916:11"><decl pos:start="916:5" pos:end="916:10"><type pos:start="916:5" pos:end="916:7"><name pos:start="916:5" pos:end="916:7">int</name></type> <name pos:start="916:9" pos:end="916:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="918:5" pos:end="918:16"><expr pos:start="918:5" pos:end="918:15"><name pos:start="918:5" pos:end="918:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="920:5" pos:end="923:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="924:5" pos:end="924:14"><expr pos:start="924:5" pos:end="924:13"><call pos:start="924:5" pos:end="924:13"><name pos:start="924:5" pos:end="924:11">st_stop</name><argument_list pos:start="924:12" pos:end="924:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="926:5" pos:end="930:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="931:5" pos:end="938:27"><expr pos:start="931:5" pos:end="938:26"><name pos:start="931:5" pos:end="931:6">rv</name> <operator pos:start="931:8" pos:end="931:8">=</operator> <call pos:start="931:10" pos:end="938:26"><name pos:start="931:10" pos:end="931:17">st_start</name><argument_list pos:start="931:18" pos:end="938:26">(<argument pos:start="931:19" pos:end="931:35"><expr pos:start="931:19" pos:end="931:35"><name pos:start="931:19" pos:end="931:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="932:19" pos:end="932:48"><expr pos:start="932:19" pos:end="932:48"><name pos:start="932:19" pos:end="932:48">US899_SERVER_CERT_SAN_MISMATCH</name></expr></argument>,
	          <argument pos:start="933:19" pos:end="933:47"><expr pos:start="933:19" pos:end="933:47"><name pos:start="933:19" pos:end="933:47">US899_SERVER_KEY_SAN_MISMATCH</name></expr></argument>,
	          <argument pos:start="934:19" pos:end="934:36"><expr pos:start="934:19" pos:end="934:36"><literal type="string" pos:start="934:19" pos:end="934:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="935:19" pos:end="935:31"><expr pos:start="935:19" pos:end="935:31"><name pos:start="935:19" pos:end="935:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="936:19" pos:end="936:35"><expr pos:start="936:19" pos:end="936:35"><name pos:start="936:19" pos:end="936:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="937:19" pos:end="937:39"><expr pos:start="937:19" pos:end="937:39"><literal type="string" pos:start="937:19" pos:end="937:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="938:19" pos:end="938:19"><expr pos:start="938:19" pos:end="938:19"><literal type="number" pos:start="938:19" pos:end="938:19">0</literal></expr></argument>, <argument pos:start="938:22" pos:end="938:22"><expr pos:start="938:22" pos:end="938:22"><literal type="number" pos:start="938:22" pos:end="938:22">0</literal></expr></argument>, <argument pos:start="938:25" pos:end="938:25"><expr pos:start="938:25" pos:end="938:25"><literal type="number" pos:start="938:25" pos:end="938:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="939:5" pos:end="939:23"><expr pos:start="939:5" pos:end="939:22"><call pos:start="939:5" pos:end="939:22"><name pos:start="939:5" pos:end="939:13">CU_ASSERT</name><argument_list pos:start="939:14" pos:end="939:22">(<argument pos:start="939:15" pos:end="939:21"><expr pos:start="939:15" pos:end="939:21"><name pos:start="939:15" pos:end="939:16">rv</name> <operator pos:start="939:18" pos:end="939:19">==</operator> <literal type="number" pos:start="939:21" pos:end="939:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="940:5" pos:end="940:19"><if pos:start="940:5" pos:end="940:19">if <condition pos:start="940:8" pos:end="940:11">(<expr pos:start="940:9" pos:end="940:10"><name pos:start="940:9" pos:end="940:10">rv</name></expr>)</condition><block type="pseudo" pos:start="940:13" pos:end="940:19"><block_content pos:start="940:13" pos:end="940:19"> <return pos:start="940:13" pos:end="940:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="942:5" pos:end="942:82"><expr pos:start="942:5" pos:end="942:81"><call pos:start="942:5" pos:end="942:81"><name pos:start="942:5" pos:end="942:23">us899_simple_enroll</name><argument_list pos:start="942:24" pos:end="942:81">(<argument pos:start="942:25" pos:end="942:34"><expr pos:start="942:25" pos:end="942:34"><literal type="string" pos:start="942:25" pos:end="942:34">"TC899-11"</literal></expr></argument>, <argument pos:start="942:37" pos:end="942:57"><expr pos:start="942:37" pos:end="942:57"><literal type="string" pos:start="942:37" pos:end="942:57">"localhost.cisco.com"</literal></expr></argument>, <argument pos:start="942:60" pos:end="942:80"><expr pos:start="942:60" pos:end="942:80"><name pos:start="942:60" pos:end="942:80">EST_ERR_FQDN_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<comment type="block" pos:start="945:1" pos:end="950:3">/*
 * Simple enroll - FQDN mismatched IPv4 address in SubjectAltName 
 *
 * This test confirms that a mismatched IPv4 address on
 * the server cert SubjectAltName ext will result in an auth failure. 
 */</comment>
<function pos:start="951:1" pos:end="980:1"><type pos:start="951:1" pos:end="951:11"><specifier pos:start="951:1" pos:end="951:6">static</specifier> <name pos:start="951:8" pos:end="951:11">void</name></type> <name pos:start="951:13" pos:end="951:24">us899_test12</name> <parameter_list pos:start="951:26" pos:end="951:31">(<parameter pos:start="951:27" pos:end="951:30"><decl pos:start="951:27" pos:end="951:30"><type pos:start="951:27" pos:end="951:30"><name pos:start="951:27" pos:end="951:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="952:1" pos:end="980:1">{<block_content pos:start="953:5" pos:end="979:76">
    <decl_stmt pos:start="953:5" pos:end="953:11"><decl pos:start="953:5" pos:end="953:10"><type pos:start="953:5" pos:end="953:7"><name pos:start="953:5" pos:end="953:7">int</name></type> <name pos:start="953:9" pos:end="953:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="955:5" pos:end="955:16"><expr pos:start="955:5" pos:end="955:15"><name pos:start="955:5" pos:end="955:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="957:5" pos:end="960:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="961:5" pos:end="961:14"><expr pos:start="961:5" pos:end="961:13"><call pos:start="961:5" pos:end="961:13"><name pos:start="961:5" pos:end="961:11">st_stop</name><argument_list pos:start="961:12" pos:end="961:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="963:5" pos:end="967:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="968:5" pos:end="975:27"><expr pos:start="968:5" pos:end="975:26"><name pos:start="968:5" pos:end="968:6">rv</name> <operator pos:start="968:8" pos:end="968:8">=</operator> <call pos:start="968:10" pos:end="975:26"><name pos:start="968:10" pos:end="968:17">st_start</name><argument_list pos:start="968:18" pos:end="975:26">(<argument pos:start="968:19" pos:end="968:35"><expr pos:start="968:19" pos:end="968:35"><name pos:start="968:19" pos:end="968:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="969:19" pos:end="969:51"><expr pos:start="969:19" pos:end="969:51"><name pos:start="969:19" pos:end="969:51">US899_SERVER_CERT_SAN_MISMATCH_IP</name></expr></argument>,
	          <argument pos:start="970:19" pos:end="970:50"><expr pos:start="970:19" pos:end="970:50"><name pos:start="970:19" pos:end="970:50">US899_SERVER_KEY_SAN_MISMATCH_IP</name></expr></argument>,
	          <argument pos:start="971:19" pos:end="971:36"><expr pos:start="971:19" pos:end="971:36"><literal type="string" pos:start="971:19" pos:end="971:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="972:19" pos:end="972:31"><expr pos:start="972:19" pos:end="972:31"><name pos:start="972:19" pos:end="972:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="973:19" pos:end="973:35"><expr pos:start="973:19" pos:end="973:35"><name pos:start="973:19" pos:end="973:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="974:19" pos:end="974:39"><expr pos:start="974:19" pos:end="974:39"><literal type="string" pos:start="974:19" pos:end="974:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="975:19" pos:end="975:19"><expr pos:start="975:19" pos:end="975:19"><literal type="number" pos:start="975:19" pos:end="975:19">0</literal></expr></argument>, <argument pos:start="975:22" pos:end="975:22"><expr pos:start="975:22" pos:end="975:22"><literal type="number" pos:start="975:22" pos:end="975:22">0</literal></expr></argument>, <argument pos:start="975:25" pos:end="975:25"><expr pos:start="975:25" pos:end="975:25"><literal type="number" pos:start="975:25" pos:end="975:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="976:5" pos:end="976:23"><expr pos:start="976:5" pos:end="976:22"><call pos:start="976:5" pos:end="976:22"><name pos:start="976:5" pos:end="976:13">CU_ASSERT</name><argument_list pos:start="976:14" pos:end="976:22">(<argument pos:start="976:15" pos:end="976:21"><expr pos:start="976:15" pos:end="976:21"><name pos:start="976:15" pos:end="976:16">rv</name> <operator pos:start="976:18" pos:end="976:19">==</operator> <literal type="number" pos:start="976:21" pos:end="976:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="977:5" pos:end="977:19"><if pos:start="977:5" pos:end="977:19">if <condition pos:start="977:8" pos:end="977:11">(<expr pos:start="977:9" pos:end="977:10"><name pos:start="977:9" pos:end="977:10">rv</name></expr>)</condition><block type="pseudo" pos:start="977:13" pos:end="977:19"><block_content pos:start="977:13" pos:end="977:19"> <return pos:start="977:13" pos:end="977:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="979:5" pos:end="979:76"><expr pos:start="979:5" pos:end="979:75"><call pos:start="979:5" pos:end="979:75"><name pos:start="979:5" pos:end="979:23">us899_simple_enroll</name><argument_list pos:start="979:24" pos:end="979:75">(<argument pos:start="979:25" pos:end="979:34"><expr pos:start="979:25" pos:end="979:34"><literal type="string" pos:start="979:25" pos:end="979:34">"TC899-12"</literal></expr></argument>, <argument pos:start="979:37" pos:end="979:51"><expr pos:start="979:37" pos:end="979:51"><name pos:start="979:37" pos:end="979:51">US899_SERVER_IP</name></expr></argument>, <argument pos:start="979:54" pos:end="979:74"><expr pos:start="979:54" pos:end="979:74"><name pos:start="979:54" pos:end="979:74">EST_ERR_FQDN_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<comment type="block" pos:start="982:1" pos:end="987:3">/*
 * Simple enroll - FQDN matched IPv4 address in SubjectAltName 
 *
 * This test confirms that a matched IPv4 address on
 * the server cert SubjectAltName ext will result in an auth success. 
 */</comment>
<function pos:start="988:1" pos:end="1017:1"><type pos:start="988:1" pos:end="988:11"><specifier pos:start="988:1" pos:end="988:6">static</specifier> <name pos:start="988:8" pos:end="988:11">void</name></type> <name pos:start="988:13" pos:end="988:24">us899_test13</name> <parameter_list pos:start="988:26" pos:end="988:31">(<parameter pos:start="988:27" pos:end="988:30"><decl pos:start="988:27" pos:end="988:30"><type pos:start="988:27" pos:end="988:30"><name pos:start="988:27" pos:end="988:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="989:1" pos:end="1017:1">{<block_content pos:start="990:5" pos:end="1016:67">
    <decl_stmt pos:start="990:5" pos:end="990:11"><decl pos:start="990:5" pos:end="990:10"><type pos:start="990:5" pos:end="990:7"><name pos:start="990:5" pos:end="990:7">int</name></type> <name pos:start="990:9" pos:end="990:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="992:5" pos:end="992:16"><expr pos:start="992:5" pos:end="992:15"><name pos:start="992:5" pos:end="992:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="994:5" pos:end="997:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="998:5" pos:end="998:14"><expr pos:start="998:5" pos:end="998:13"><call pos:start="998:5" pos:end="998:13"><name pos:start="998:5" pos:end="998:11">st_stop</name><argument_list pos:start="998:12" pos:end="998:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1000:5" pos:end="1004:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="1005:5" pos:end="1012:27"><expr pos:start="1005:5" pos:end="1012:26"><name pos:start="1005:5" pos:end="1005:6">rv</name> <operator pos:start="1005:8" pos:end="1005:8">=</operator> <call pos:start="1005:10" pos:end="1012:26"><name pos:start="1005:10" pos:end="1005:17">st_start</name><argument_list pos:start="1005:18" pos:end="1012:26">(<argument pos:start="1005:19" pos:end="1005:35"><expr pos:start="1005:19" pos:end="1005:35"><name pos:start="1005:19" pos:end="1005:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="1006:19" pos:end="1006:48"><expr pos:start="1006:19" pos:end="1006:48"><name pos:start="1006:19" pos:end="1006:48">US899_SERVER_CERT_SAN_MATCH_IP</name></expr></argument>,
	          <argument pos:start="1007:19" pos:end="1007:47"><expr pos:start="1007:19" pos:end="1007:47"><name pos:start="1007:19" pos:end="1007:47">US899_SERVER_KEY_SAN_MATCH_IP</name></expr></argument>,
	          <argument pos:start="1008:19" pos:end="1008:36"><expr pos:start="1008:19" pos:end="1008:36"><literal type="string" pos:start="1008:19" pos:end="1008:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="1009:19" pos:end="1009:31"><expr pos:start="1009:19" pos:end="1009:31"><name pos:start="1009:19" pos:end="1009:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="1010:19" pos:end="1010:35"><expr pos:start="1010:19" pos:end="1010:35"><name pos:start="1010:19" pos:end="1010:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="1011:19" pos:end="1011:39"><expr pos:start="1011:19" pos:end="1011:39"><literal type="string" pos:start="1011:19" pos:end="1011:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="1012:19" pos:end="1012:19"><expr pos:start="1012:19" pos:end="1012:19"><literal type="number" pos:start="1012:19" pos:end="1012:19">0</literal></expr></argument>, <argument pos:start="1012:22" pos:end="1012:22"><expr pos:start="1012:22" pos:end="1012:22"><literal type="number" pos:start="1012:22" pos:end="1012:22">0</literal></expr></argument>, <argument pos:start="1012:25" pos:end="1012:25"><expr pos:start="1012:25" pos:end="1012:25"><literal type="number" pos:start="1012:25" pos:end="1012:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1013:5" pos:end="1013:23"><expr pos:start="1013:5" pos:end="1013:22"><call pos:start="1013:5" pos:end="1013:22"><name pos:start="1013:5" pos:end="1013:13">CU_ASSERT</name><argument_list pos:start="1013:14" pos:end="1013:22">(<argument pos:start="1013:15" pos:end="1013:21"><expr pos:start="1013:15" pos:end="1013:21"><name pos:start="1013:15" pos:end="1013:16">rv</name> <operator pos:start="1013:18" pos:end="1013:19">==</operator> <literal type="number" pos:start="1013:21" pos:end="1013:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1014:5" pos:end="1014:19"><if pos:start="1014:5" pos:end="1014:19">if <condition pos:start="1014:8" pos:end="1014:11">(<expr pos:start="1014:9" pos:end="1014:10"><name pos:start="1014:9" pos:end="1014:10">rv</name></expr>)</condition><block type="pseudo" pos:start="1014:13" pos:end="1014:19"><block_content pos:start="1014:13" pos:end="1014:19"> <return pos:start="1014:13" pos:end="1014:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1016:5" pos:end="1016:67"><expr pos:start="1016:5" pos:end="1016:66"><call pos:start="1016:5" pos:end="1016:66"><name pos:start="1016:5" pos:end="1016:23">us899_simple_enroll</name><argument_list pos:start="1016:24" pos:end="1016:66">(<argument pos:start="1016:25" pos:end="1016:34"><expr pos:start="1016:25" pos:end="1016:34"><literal type="string" pos:start="1016:25" pos:end="1016:34">"TC899-13"</literal></expr></argument>, <argument pos:start="1016:37" pos:end="1016:51"><expr pos:start="1016:37" pos:end="1016:51"><name pos:start="1016:37" pos:end="1016:51">US899_SERVER_IP</name></expr></argument>, <argument pos:start="1016:54" pos:end="1016:65"><expr pos:start="1016:54" pos:end="1016:65"><name pos:start="1016:54" pos:end="1016:65">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<comment type="block" pos:start="1019:1" pos:end="1024:3">/*
 * Simple enroll - FQDN matched hostname in SubjectAltName with wildcard 
 *
 * This test confirms that a hostname matches a wildcard pattern in
 * the server cert SubjectAltName ext, which will result in an auth success. 
 */</comment>
<function pos:start="1025:1" pos:end="1054:1"><type pos:start="1025:1" pos:end="1025:11"><specifier pos:start="1025:1" pos:end="1025:6">static</specifier> <name pos:start="1025:8" pos:end="1025:11">void</name></type> <name pos:start="1025:13" pos:end="1025:24">us899_test14</name> <parameter_list pos:start="1025:26" pos:end="1025:31">(<parameter pos:start="1025:27" pos:end="1025:30"><decl pos:start="1025:27" pos:end="1025:30"><type pos:start="1025:27" pos:end="1025:30"><name pos:start="1025:27" pos:end="1025:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1026:1" pos:end="1054:1">{<block_content pos:start="1027:5" pos:end="1053:73">
    <decl_stmt pos:start="1027:5" pos:end="1027:11"><decl pos:start="1027:5" pos:end="1027:10"><type pos:start="1027:5" pos:end="1027:7"><name pos:start="1027:5" pos:end="1027:7">int</name></type> <name pos:start="1027:9" pos:end="1027:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1029:5" pos:end="1029:16"><expr pos:start="1029:5" pos:end="1029:15"><name pos:start="1029:5" pos:end="1029:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1031:5" pos:end="1034:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="1035:5" pos:end="1035:14"><expr pos:start="1035:5" pos:end="1035:13"><call pos:start="1035:5" pos:end="1035:13"><name pos:start="1035:5" pos:end="1035:11">st_stop</name><argument_list pos:start="1035:12" pos:end="1035:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1037:5" pos:end="1041:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="1042:5" pos:end="1049:27"><expr pos:start="1042:5" pos:end="1049:26"><name pos:start="1042:5" pos:end="1042:6">rv</name> <operator pos:start="1042:8" pos:end="1042:8">=</operator> <call pos:start="1042:10" pos:end="1049:26"><name pos:start="1042:10" pos:end="1042:17">st_start</name><argument_list pos:start="1042:18" pos:end="1049:26">(<argument pos:start="1042:19" pos:end="1042:35"><expr pos:start="1042:19" pos:end="1042:35"><name pos:start="1042:19" pos:end="1042:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="1043:19" pos:end="1043:48"><expr pos:start="1043:19" pos:end="1043:48"><name pos:start="1043:19" pos:end="1043:48">US899_SERVER_CERT_SAN_MATCH_WC</name></expr></argument>,
	          <argument pos:start="1044:19" pos:end="1044:47"><expr pos:start="1044:19" pos:end="1044:47"><name pos:start="1044:19" pos:end="1044:47">US899_SERVER_KEY_SAN_MATCH_WC</name></expr></argument>,
	          <argument pos:start="1045:19" pos:end="1045:36"><expr pos:start="1045:19" pos:end="1045:36"><literal type="string" pos:start="1045:19" pos:end="1045:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="1046:19" pos:end="1046:31"><expr pos:start="1046:19" pos:end="1046:31"><name pos:start="1046:19" pos:end="1046:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="1047:19" pos:end="1047:35"><expr pos:start="1047:19" pos:end="1047:35"><name pos:start="1047:19" pos:end="1047:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="1048:19" pos:end="1048:39"><expr pos:start="1048:19" pos:end="1048:39"><literal type="string" pos:start="1048:19" pos:end="1048:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="1049:19" pos:end="1049:19"><expr pos:start="1049:19" pos:end="1049:19"><literal type="number" pos:start="1049:19" pos:end="1049:19">0</literal></expr></argument>, <argument pos:start="1049:22" pos:end="1049:22"><expr pos:start="1049:22" pos:end="1049:22"><literal type="number" pos:start="1049:22" pos:end="1049:22">0</literal></expr></argument>, <argument pos:start="1049:25" pos:end="1049:25"><expr pos:start="1049:25" pos:end="1049:25"><literal type="number" pos:start="1049:25" pos:end="1049:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1050:5" pos:end="1050:23"><expr pos:start="1050:5" pos:end="1050:22"><call pos:start="1050:5" pos:end="1050:22"><name pos:start="1050:5" pos:end="1050:13">CU_ASSERT</name><argument_list pos:start="1050:14" pos:end="1050:22">(<argument pos:start="1050:15" pos:end="1050:21"><expr pos:start="1050:15" pos:end="1050:21"><name pos:start="1050:15" pos:end="1050:16">rv</name> <operator pos:start="1050:18" pos:end="1050:19">==</operator> <literal type="number" pos:start="1050:21" pos:end="1050:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1051:5" pos:end="1051:19"><if pos:start="1051:5" pos:end="1051:19">if <condition pos:start="1051:8" pos:end="1051:11">(<expr pos:start="1051:9" pos:end="1051:10"><name pos:start="1051:9" pos:end="1051:10">rv</name></expr>)</condition><block type="pseudo" pos:start="1051:13" pos:end="1051:19"><block_content pos:start="1051:13" pos:end="1051:19"> <return pos:start="1051:13" pos:end="1051:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1053:5" pos:end="1053:73"><expr pos:start="1053:5" pos:end="1053:72"><call pos:start="1053:5" pos:end="1053:72"><name pos:start="1053:5" pos:end="1053:23">us899_simple_enroll</name><argument_list pos:start="1053:24" pos:end="1053:72">(<argument pos:start="1053:25" pos:end="1053:34"><expr pos:start="1053:25" pos:end="1053:34"><literal type="string" pos:start="1053:25" pos:end="1053:34">"TC899-14"</literal></expr></argument>, <argument pos:start="1053:37" pos:end="1053:57"><expr pos:start="1053:37" pos:end="1053:57"><literal type="string" pos:start="1053:37" pos:end="1053:57">"localhost.cisco.com"</literal></expr></argument>, <argument pos:start="1053:60" pos:end="1053:71"><expr pos:start="1053:60" pos:end="1053:71"><name pos:start="1053:60" pos:end="1053:71">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>

<comment type="block" pos:start="1056:1" pos:end="1061:3">/*
 * Simple enroll - FQDN mismatched hostname in SubjectAltName with wildcard 
 *
 * This test confirms that a hostname mismatches a wildcard pattern in
 * the server cert SubjectAltName ext, which will result in an auth fail. 
 */</comment>
<function pos:start="1062:1" pos:end="1091:1"><type pos:start="1062:1" pos:end="1062:11"><specifier pos:start="1062:1" pos:end="1062:6">static</specifier> <name pos:start="1062:8" pos:end="1062:11">void</name></type> <name pos:start="1062:13" pos:end="1062:24">us899_test15</name> <parameter_list pos:start="1062:26" pos:end="1062:31">(<parameter pos:start="1062:27" pos:end="1062:30"><decl pos:start="1062:27" pos:end="1062:30"><type pos:start="1062:27" pos:end="1062:30"><name pos:start="1062:27" pos:end="1062:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1063:1" pos:end="1091:1">{<block_content pos:start="1064:5" pos:end="1090:82">
    <decl_stmt pos:start="1064:5" pos:end="1064:11"><decl pos:start="1064:5" pos:end="1064:10"><type pos:start="1064:5" pos:end="1064:7"><name pos:start="1064:5" pos:end="1064:7">int</name></type> <name pos:start="1064:9" pos:end="1064:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1066:5" pos:end="1066:16"><expr pos:start="1066:5" pos:end="1066:15"><name pos:start="1066:5" pos:end="1066:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1068:5" pos:end="1071:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="1072:5" pos:end="1072:14"><expr pos:start="1072:5" pos:end="1072:13"><call pos:start="1072:5" pos:end="1072:13"><name pos:start="1072:5" pos:end="1072:11">st_stop</name><argument_list pos:start="1072:12" pos:end="1072:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1074:5" pos:end="1078:7">/*
     * Spin up a new instance of the EST server
     * using a certificate that contains a
     * bogus hostname in the CN
     */</comment>
    <expr_stmt pos:start="1079:5" pos:end="1086:27"><expr pos:start="1079:5" pos:end="1086:26"><name pos:start="1079:5" pos:end="1079:6">rv</name> <operator pos:start="1079:8" pos:end="1079:8">=</operator> <call pos:start="1079:10" pos:end="1086:26"><name pos:start="1079:10" pos:end="1079:17">st_start</name><argument_list pos:start="1079:18" pos:end="1086:26">(<argument pos:start="1079:19" pos:end="1079:35"><expr pos:start="1079:19" pos:end="1079:35"><name pos:start="1079:19" pos:end="1079:35">US899_SERVER_PORT</name></expr></argument>, 
	          <argument pos:start="1080:19" pos:end="1080:51"><expr pos:start="1080:19" pos:end="1080:51"><name pos:start="1080:19" pos:end="1080:51">US899_SERVER_CERT_SAN_MISMATCH_WC</name></expr></argument>,
	          <argument pos:start="1081:19" pos:end="1081:50"><expr pos:start="1081:19" pos:end="1081:50"><name pos:start="1081:19" pos:end="1081:50">US899_SERVER_KEY_SAN_MISMATCH_WC</name></expr></argument>,
	          <argument pos:start="1082:19" pos:end="1082:36"><expr pos:start="1082:19" pos:end="1082:36"><literal type="string" pos:start="1082:19" pos:end="1082:36">"US899 test realm"</literal></expr></argument>,
	          <argument pos:start="1083:19" pos:end="1083:31"><expr pos:start="1083:19" pos:end="1083:31"><name pos:start="1083:19" pos:end="1083:31">US899_CACERTS</name></expr></argument>,
	          <argument pos:start="1084:19" pos:end="1084:35"><expr pos:start="1084:19" pos:end="1084:35"><name pos:start="1084:19" pos:end="1084:35">US899_TRUST_CERTS</name></expr></argument>,
	          <argument pos:start="1085:19" pos:end="1085:39"><expr pos:start="1085:19" pos:end="1085:39"><literal type="string" pos:start="1085:19" pos:end="1085:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
		  <argument pos:start="1086:19" pos:end="1086:19"><expr pos:start="1086:19" pos:end="1086:19"><literal type="number" pos:start="1086:19" pos:end="1086:19">0</literal></expr></argument>, <argument pos:start="1086:22" pos:end="1086:22"><expr pos:start="1086:22" pos:end="1086:22"><literal type="number" pos:start="1086:22" pos:end="1086:22">0</literal></expr></argument>, <argument pos:start="1086:25" pos:end="1086:25"><expr pos:start="1086:25" pos:end="1086:25"><literal type="number" pos:start="1086:25" pos:end="1086:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1087:5" pos:end="1087:23"><expr pos:start="1087:5" pos:end="1087:22"><call pos:start="1087:5" pos:end="1087:22"><name pos:start="1087:5" pos:end="1087:13">CU_ASSERT</name><argument_list pos:start="1087:14" pos:end="1087:22">(<argument pos:start="1087:15" pos:end="1087:21"><expr pos:start="1087:15" pos:end="1087:21"><name pos:start="1087:15" pos:end="1087:16">rv</name> <operator pos:start="1087:18" pos:end="1087:19">==</operator> <literal type="number" pos:start="1087:21" pos:end="1087:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1088:5" pos:end="1088:19"><if pos:start="1088:5" pos:end="1088:19">if <condition pos:start="1088:8" pos:end="1088:11">(<expr pos:start="1088:9" pos:end="1088:10"><name pos:start="1088:9" pos:end="1088:10">rv</name></expr>)</condition><block type="pseudo" pos:start="1088:13" pos:end="1088:19"><block_content pos:start="1088:13" pos:end="1088:19"> <return pos:start="1088:13" pos:end="1088:19">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="1090:5" pos:end="1090:82"><expr pos:start="1090:5" pos:end="1090:81"><call pos:start="1090:5" pos:end="1090:81"><name pos:start="1090:5" pos:end="1090:23">us899_simple_enroll</name><argument_list pos:start="1090:24" pos:end="1090:81">(<argument pos:start="1090:25" pos:end="1090:34"><expr pos:start="1090:25" pos:end="1090:34"><literal type="string" pos:start="1090:25" pos:end="1090:34">"TC899-15"</literal></expr></argument>, <argument pos:start="1090:37" pos:end="1090:57"><expr pos:start="1090:37" pos:end="1090:57"><literal type="string" pos:start="1090:37" pos:end="1090:57">"localhost.cisco.com"</literal></expr></argument>, <argument pos:start="1090:60" pos:end="1090:80"><expr pos:start="1090:60" pos:end="1090:80"><name pos:start="1090:60" pos:end="1090:80">EST_ERR_FQDN_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>


<comment type="block" pos:start="1094:1" pos:end="1100:3">/*
 * Simple enroll - CRL check enabled on client
 *
 * We enable CRL checking on the client side.  We will
 * generate a CRL, but the server cert will not be
 * revoked.  The enroll should succeed.
 */</comment>
<function pos:start="1101:1" pos:end="1217:1"><type pos:start="1101:1" pos:end="1101:11"><specifier pos:start="1101:1" pos:end="1101:6">static</specifier> <name pos:start="1101:8" pos:end="1101:11">void</name></type> <name pos:start="1101:13" pos:end="1101:24">us899_test16</name> <parameter_list pos:start="1101:26" pos:end="1101:31">(<parameter pos:start="1101:27" pos:end="1101:30"><decl pos:start="1101:27" pos:end="1101:30"><type pos:start="1101:27" pos:end="1101:30"><name pos:start="1101:27" pos:end="1101:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1102:1" pos:end="1217:1">{<block_content pos:start="1103:5" pos:end="1216:21">
    <decl_stmt pos:start="1103:5" pos:end="1103:11"><decl pos:start="1103:5" pos:end="1103:10"><type pos:start="1103:5" pos:end="1103:7"><name pos:start="1103:5" pos:end="1103:7">int</name></type> <name pos:start="1103:9" pos:end="1103:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1104:5" pos:end="1104:18"><decl pos:start="1104:5" pos:end="1104:17"><type pos:start="1104:5" pos:end="1104:13"><name pos:start="1104:5" pos:end="1104:11">EST_CTX</name> <modifier pos:start="1104:13" pos:end="1104:13">*</modifier></type><name pos:start="1104:14" pos:end="1104:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1105:5" pos:end="1105:18"><decl pos:start="1105:5" pos:end="1105:17"><type pos:start="1105:5" pos:end="1105:14"><name pos:start="1105:5" pos:end="1105:12">EVP_PKEY</name> <modifier pos:start="1105:14" pos:end="1105:14">*</modifier></type><name pos:start="1105:15" pos:end="1105:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1106:5" pos:end="1106:22"><decl pos:start="1106:5" pos:end="1106:21"><type pos:start="1106:5" pos:end="1106:7"><name pos:start="1106:5" pos:end="1106:7">int</name></type> <name pos:start="1106:9" pos:end="1106:17">pkcs7_len</name> <init pos:start="1106:19" pos:end="1106:21">= <expr pos:start="1106:21" pos:end="1106:21"><literal type="number" pos:start="1106:21" pos:end="1106:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1107:5" pos:end="1107:35"><decl pos:start="1107:5" pos:end="1107:34"><type pos:start="1107:5" pos:end="1107:19"><name pos:start="1107:5" pos:end="1107:12">unsigned</name> <name pos:start="1107:14" pos:end="1107:17">char</name> <modifier pos:start="1107:19" pos:end="1107:19">*</modifier></type><name pos:start="1107:20" pos:end="1107:27">new_cert</name> <init pos:start="1107:29" pos:end="1107:34">= <expr pos:start="1107:31" pos:end="1107:34"><name pos:start="1107:31" pos:end="1107:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1108:5" pos:end="1108:37"><decl pos:start="1108:5" pos:end="1108:36"><type pos:start="1108:5" pos:end="1108:19"><name pos:start="1108:5" pos:end="1108:12">unsigned</name> <name pos:start="1108:14" pos:end="1108:17">char</name> <modifier pos:start="1108:19" pos:end="1108:19">*</modifier></type><name pos:start="1108:20" pos:end="1108:29">cacrlcerts</name> <init pos:start="1108:31" pos:end="1108:36">= <expr pos:start="1108:33" pos:end="1108:36"><name pos:start="1108:33" pos:end="1108:36">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1109:5" pos:end="1109:27"><decl pos:start="1109:5" pos:end="1109:26"><type pos:start="1109:5" pos:end="1109:7"><name pos:start="1109:5" pos:end="1109:7">int</name></type> <name pos:start="1109:9" pos:end="1109:22">cacrlcerts_len</name> <init pos:start="1109:24" pos:end="1109:26">= <expr pos:start="1109:26" pos:end="1109:26"><literal type="number" pos:start="1109:26" pos:end="1109:26">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1110:5" pos:end="1110:36"><decl pos:start="1110:5" pos:end="1110:35"><type pos:start="1110:5" pos:end="1110:19"><name pos:start="1110:5" pos:end="1110:12">unsigned</name> <name pos:start="1110:14" pos:end="1110:17">char</name> <modifier pos:start="1110:19" pos:end="1110:19">*</modifier></type><name pos:start="1110:20" pos:end="1110:28">attr_data</name> <init pos:start="1110:30" pos:end="1110:35">= <expr pos:start="1110:32" pos:end="1110:35"><name pos:start="1110:32" pos:end="1110:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1111:5" pos:end="1111:17"><decl pos:start="1111:5" pos:end="1111:16"><type pos:start="1111:5" pos:end="1111:7"><name pos:start="1111:5" pos:end="1111:7">int</name></type> <name pos:start="1111:9" pos:end="1111:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1113:5" pos:end="1113:16"><expr pos:start="1113:5" pos:end="1113:15"><name pos:start="1113:5" pos:end="1113:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1115:5" pos:end="1118:7">/*
     * Stop the existing server.  This test case needs
     * the server to use a different cert.
     */</comment>
    <expr_stmt pos:start="1119:5" pos:end="1119:14"><expr pos:start="1119:5" pos:end="1119:13"><call pos:start="1119:5" pos:end="1119:13"><name pos:start="1119:5" pos:end="1119:11">st_stop</name><argument_list pos:start="1119:12" pos:end="1119:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1121:5" pos:end="1124:7">/*
     * Now that all the FQDN tests are completed, start
     * the normal server.
     */</comment>
    <expr_stmt pos:start="1125:5" pos:end="1125:34"><expr pos:start="1125:5" pos:end="1125:33"><name pos:start="1125:5" pos:end="1125:6">rv</name> <operator pos:start="1125:8" pos:end="1125:8">=</operator> <call pos:start="1125:10" pos:end="1125:33"><name pos:start="1125:10" pos:end="1125:27">us899_start_server</name><argument_list pos:start="1125:28" pos:end="1125:33">(<argument pos:start="1125:29" pos:end="1125:29"><expr pos:start="1125:29" pos:end="1125:29"><literal type="number" pos:start="1125:29" pos:end="1125:29">0</literal></expr></argument>, <argument pos:start="1125:32" pos:end="1125:32"><expr pos:start="1125:32" pos:end="1125:32"><literal type="number" pos:start="1125:32" pos:end="1125:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1126:5" pos:end="1133:0"><expr pos:start="1126:5" pos:end="1126:22"><call pos:start="1126:5" pos:end="1126:22"><name pos:start="1126:5" pos:end="1126:13">CU_ASSERT</name><argument_list pos:start="1126:14" pos:end="1126:22">(<argument pos:start="1126:15" pos:end="1126:21"><expr pos:start="1126:15" pos:end="1126:21"><name pos:start="1126:15" pos:end="1126:16">rv</name> <operator pos:start="1126:18" pos:end="1126:19">==</operator> <literal type="number" pos:start="1126:21" pos:end="1126:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1128:5" pos:end="1131:7">/*
     * Generate a CRL and append it to the CA chain
     * we're using on the client side.
     */</comment>
<cpp:ifndef pos:start="1132:1" pos:end="1132:13">#<cpp:directive pos:start="1132:2" pos:end="1132:7">ifndef</cpp:directive> <name pos:start="1132:9" pos:end="1132:13">WIN32</name></cpp:ifndef>
    <expr_stmt pos:start="1133:5" pos:end="1133:87"><expr pos:start="1133:5" pos:end="1133:86"><call pos:start="1133:5" pos:end="1133:86"><name pos:start="1133:5" pos:end="1133:10">system</name><argument_list pos:start="1133:11" pos:end="1133:86">(<argument pos:start="1133:12" pos:end="1133:85"><expr pos:start="1133:12" pos:end="1133:85"><literal type="string" pos:start="1133:12" pos:end="1133:85">"openssl ca -config CA/estExampleCA.cnf -gencrl -out US899/test16_crl.pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1134:5" pos:end="1134:13"><expr pos:start="1134:5" pos:end="1134:12"><call pos:start="1134:5" pos:end="1134:12"><name pos:start="1134:5" pos:end="1134:9">SLEEP</name><argument_list pos:start="1134:10" pos:end="1134:12">(<argument pos:start="1134:11" pos:end="1134:11"><expr pos:start="1134:11" pos:end="1134:11"><literal type="number" pos:start="1134:11" pos:end="1134:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1135:5" pos:end="1135:62"><expr pos:start="1135:5" pos:end="1135:61"><call pos:start="1135:5" pos:end="1135:61"><name pos:start="1135:5" pos:end="1135:10">system</name><argument_list pos:start="1135:11" pos:end="1135:61">(<argument pos:start="1135:12" pos:end="1135:60"><expr pos:start="1135:12" pos:end="1135:60"><literal type="string" pos:start="1135:12" pos:end="1135:60">"cat CA/trustedcerts.crt &gt; US899/test16trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1136:5" pos:end="1136:13"><expr pos:start="1136:5" pos:end="1136:12"><call pos:start="1136:5" pos:end="1136:12"><name pos:start="1136:5" pos:end="1136:9">SLEEP</name><argument_list pos:start="1136:10" pos:end="1136:12">(<argument pos:start="1136:11" pos:end="1136:11"><expr pos:start="1136:11" pos:end="1136:11"><literal type="number" pos:start="1136:11" pos:end="1136:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1137:5" pos:end="1137:64"><expr pos:start="1137:5" pos:end="1137:63"><call pos:start="1137:5" pos:end="1137:63"><name pos:start="1137:5" pos:end="1137:10">system</name><argument_list pos:start="1137:11" pos:end="1137:63">(<argument pos:start="1137:12" pos:end="1137:62"><expr pos:start="1137:12" pos:end="1137:62"><literal type="string" pos:start="1137:12" pos:end="1137:62">"cat US899/test16_crl.pem &gt;&gt; US899/test16trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1138:5" pos:end="1140:0"><expr pos:start="1138:5" pos:end="1138:12"><call pos:start="1138:5" pos:end="1138:12"><name pos:start="1138:5" pos:end="1138:9">SLEEP</name><argument_list pos:start="1138:10" pos:end="1138:12">(<argument pos:start="1138:11" pos:end="1138:11"><expr pos:start="1138:11" pos:end="1138:11"><literal type="number" pos:start="1138:11" pos:end="1138:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="1139:1" pos:end="1139:5">#<cpp:directive pos:start="1139:2" pos:end="1139:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="1140:5" pos:end="1140:87"><expr pos:start="1140:5" pos:end="1140:86"><call pos:start="1140:5" pos:end="1140:86"><name pos:start="1140:5" pos:end="1140:10">system</name><argument_list pos:start="1140:11" pos:end="1140:86">(<argument pos:start="1140:12" pos:end="1140:85"><expr pos:start="1140:12" pos:end="1140:85"><literal type="string" pos:start="1140:12" pos:end="1140:85">"openssl ca -config CA/estExampleCA.cnf -gencrl -out US899/test16_crl.pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1141:5" pos:end="1141:13"><expr pos:start="1141:5" pos:end="1141:12"><call pos:start="1141:5" pos:end="1141:12"><name pos:start="1141:5" pos:end="1141:9">SLEEP</name><argument_list pos:start="1141:10" pos:end="1141:12">(<argument pos:start="1141:11" pos:end="1141:11"><expr pos:start="1141:11" pos:end="1141:11"><literal type="number" pos:start="1141:11" pos:end="1141:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1142:5" pos:end="1142:65"><expr pos:start="1142:5" pos:end="1142:64"><call pos:start="1142:5" pos:end="1142:64"><name pos:start="1142:5" pos:end="1142:10">system</name><argument_list pos:start="1142:11" pos:end="1142:64">(<argument pos:start="1142:12" pos:end="1142:63"><expr pos:start="1142:12" pos:end="1142:63"><literal type="string" pos:start="1142:12" pos:end="1142:63">"type CA\\trustedcerts.crt &gt; US899\\test16trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1143:5" pos:end="1143:13"><expr pos:start="1143:5" pos:end="1143:12"><call pos:start="1143:5" pos:end="1143:12"><name pos:start="1143:5" pos:end="1143:9">SLEEP</name><argument_list pos:start="1143:10" pos:end="1143:12">(<argument pos:start="1143:11" pos:end="1143:11"><expr pos:start="1143:11" pos:end="1143:11"><literal type="number" pos:start="1143:11" pos:end="1143:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1144:5" pos:end="1144:67"><expr pos:start="1144:5" pos:end="1144:66"><call pos:start="1144:5" pos:end="1144:66"><name pos:start="1144:5" pos:end="1144:10">system</name><argument_list pos:start="1144:11" pos:end="1144:66">(<argument pos:start="1144:12" pos:end="1144:65"><expr pos:start="1144:12" pos:end="1144:65"><literal type="string" pos:start="1144:12" pos:end="1144:65">"type US899\\test16_crl.pem &gt;&gt; US899\\test16trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1145:5" pos:end="1147:0"><expr pos:start="1145:5" pos:end="1145:12"><call pos:start="1145:5" pos:end="1145:12"><name pos:start="1145:5" pos:end="1145:9">SLEEP</name><argument_list pos:start="1145:10" pos:end="1145:12">(<argument pos:start="1145:11" pos:end="1145:11"><expr pos:start="1145:11" pos:end="1145:11"><literal type="number" pos:start="1145:11" pos:end="1145:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1146:1" pos:end="1146:6">#<cpp:directive pos:start="1146:2" pos:end="1146:6">endif</cpp:directive></cpp:endif> 

    <comment type="block" pos:start="1148:5" pos:end="1150:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="1151:5" pos:end="1151:76"><expr pos:start="1151:5" pos:end="1151:75"><name pos:start="1151:5" pos:end="1151:18">cacrlcerts_len</name> <operator pos:start="1151:20" pos:end="1151:20">=</operator> <call pos:start="1151:22" pos:end="1151:75"><name pos:start="1151:22" pos:end="1151:37">read_binary_file</name><argument_list pos:start="1151:38" pos:end="1151:75">(<argument pos:start="1151:39" pos:end="1151:61"><expr pos:start="1151:39" pos:end="1151:61"><literal type="string" pos:start="1151:39" pos:end="1151:61">"US899/test16trust.crt"</literal></expr></argument>, <argument pos:start="1151:64" pos:end="1151:74"><expr pos:start="1151:64" pos:end="1151:74"><operator pos:start="1151:64" pos:end="1151:64">&amp;</operator><name pos:start="1151:65" pos:end="1151:74">cacrlcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1152:5" pos:end="1152:30"><expr pos:start="1152:5" pos:end="1152:29"><call pos:start="1152:5" pos:end="1152:29"><name pos:start="1152:5" pos:end="1152:13">CU_ASSERT</name><argument_list pos:start="1152:14" pos:end="1152:29">(<argument pos:start="1152:15" pos:end="1152:28"><expr pos:start="1152:15" pos:end="1152:28"><name pos:start="1152:15" pos:end="1152:24">cacrlcerts</name> <operator pos:start="1152:26" pos:end="1152:26">&gt;</operator> <literal type="number" pos:start="1152:28" pos:end="1152:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1153:5" pos:end="1155:5"><if pos:start="1153:5" pos:end="1155:5">if <condition pos:start="1153:8" pos:end="1153:28">(<expr pos:start="1153:9" pos:end="1153:27"><name pos:start="1153:9" pos:end="1153:22">cacrlcerts_len</name> <operator pos:start="1153:24" pos:end="1153:25">&lt;=</operator> <literal type="number" pos:start="1153:27" pos:end="1153:27">0</literal></expr>)</condition> <block pos:start="1153:30" pos:end="1155:5">{<block_content pos:start="1154:9" pos:end="1154:15">
	<return pos:start="1154:9" pos:end="1154:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1157:5" pos:end="1159:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="1160:5" pos:end="1162:54"><expr pos:start="1160:5" pos:end="1162:53"><name pos:start="1160:5" pos:end="1160:8">ectx</name> <operator pos:start="1160:10" pos:end="1160:10">=</operator> <call pos:start="1160:12" pos:end="1162:53"><name pos:start="1160:12" pos:end="1160:26">est_client_init</name><argument_list pos:start="1160:27" pos:end="1162:53">(<argument pos:start="1160:28" pos:end="1160:37"><expr pos:start="1160:28" pos:end="1160:37"><name pos:start="1160:28" pos:end="1160:37">cacrlcerts</name></expr></argument>, <argument pos:start="1160:40" pos:end="1160:53"><expr pos:start="1160:40" pos:end="1160:53"><name pos:start="1160:40" pos:end="1160:53">cacrlcerts_len</name></expr></argument>, 
                           <argument pos:start="1161:28" pos:end="1161:46"><expr pos:start="1161:28" pos:end="1161:46"><name pos:start="1161:28" pos:end="1161:46">EST_CERT_FORMAT_PEM</name></expr></argument>, 
                           <argument pos:start="1162:28" pos:end="1162:52"><expr pos:start="1162:28" pos:end="1162:52"><name pos:start="1162:28" pos:end="1162:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1163:5" pos:end="1163:28"><expr pos:start="1163:5" pos:end="1163:27"><call pos:start="1163:5" pos:end="1163:27"><name pos:start="1163:5" pos:end="1163:13">CU_ASSERT</name><argument_list pos:start="1163:14" pos:end="1163:27">(<argument pos:start="1163:15" pos:end="1163:26"><expr pos:start="1163:15" pos:end="1163:26"><name pos:start="1163:15" pos:end="1163:18">ectx</name> <operator pos:start="1163:20" pos:end="1163:21">!=</operator> <name pos:start="1163:23" pos:end="1163:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1165:5" pos:end="1167:7">/*
     * Enable CRL checking on the client
     */</comment>
    <expr_stmt pos:start="1168:5" pos:end="1168:30"><expr pos:start="1168:5" pos:end="1168:29"><name pos:start="1168:5" pos:end="1168:6">rv</name> <operator pos:start="1168:8" pos:end="1168:8">=</operator> <call pos:start="1168:10" pos:end="1168:29"><name pos:start="1168:10" pos:end="1168:23">est_enable_crl</name><argument_list pos:start="1168:24" pos:end="1168:29">(<argument pos:start="1168:25" pos:end="1168:28"><expr pos:start="1168:25" pos:end="1168:28"><name pos:start="1168:25" pos:end="1168:28">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1169:5" pos:end="1169:34"><expr pos:start="1169:5" pos:end="1169:33"><call pos:start="1169:5" pos:end="1169:33"><name pos:start="1169:5" pos:end="1169:13">CU_ASSERT</name><argument_list pos:start="1169:14" pos:end="1169:33">(<argument pos:start="1169:15" pos:end="1169:32"><expr pos:start="1169:15" pos:end="1169:32"><name pos:start="1169:15" pos:end="1169:16">rv</name> <operator pos:start="1169:18" pos:end="1169:19">==</operator> <name pos:start="1169:21" pos:end="1169:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1171:5" pos:end="1173:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1174:5" pos:end="1174:69"><expr pos:start="1174:5" pos:end="1174:68"><name pos:start="1174:5" pos:end="1174:6">rv</name> <operator pos:start="1174:8" pos:end="1174:8">=</operator> <call pos:start="1174:10" pos:end="1174:68"><name pos:start="1174:10" pos:end="1174:28">est_client_set_auth</name><argument_list pos:start="1174:29" pos:end="1174:68">(<argument pos:start="1174:30" pos:end="1174:33"><expr pos:start="1174:30" pos:end="1174:33"><name pos:start="1174:30" pos:end="1174:33">ectx</name></expr></argument>, <argument pos:start="1174:36" pos:end="1174:44"><expr pos:start="1174:36" pos:end="1174:44"><name pos:start="1174:36" pos:end="1174:44">US899_UID</name></expr></argument>, <argument pos:start="1174:47" pos:end="1174:55"><expr pos:start="1174:47" pos:end="1174:55"><name pos:start="1174:47" pos:end="1174:55">US899_PWD</name></expr></argument>, <argument pos:start="1174:58" pos:end="1174:61"><expr pos:start="1174:58" pos:end="1174:61"><name pos:start="1174:58" pos:end="1174:61">NULL</name></expr></argument>, <argument pos:start="1174:64" pos:end="1174:67"><expr pos:start="1174:64" pos:end="1174:67"><name pos:start="1174:64" pos:end="1174:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1175:5" pos:end="1175:34"><expr pos:start="1175:5" pos:end="1175:33"><call pos:start="1175:5" pos:end="1175:33"><name pos:start="1175:5" pos:end="1175:13">CU_ASSERT</name><argument_list pos:start="1175:14" pos:end="1175:33">(<argument pos:start="1175:15" pos:end="1175:32"><expr pos:start="1175:15" pos:end="1175:32"><name pos:start="1175:15" pos:end="1175:16">rv</name> <operator pos:start="1175:18" pos:end="1175:19">==</operator> <name pos:start="1175:21" pos:end="1175:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1177:5" pos:end="1179:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1180:5" pos:end="1180:74"><expr pos:start="1180:5" pos:end="1180:73"><call pos:start="1180:5" pos:end="1180:73"><name pos:start="1180:5" pos:end="1180:25">est_client_set_server</name><argument_list pos:start="1180:26" pos:end="1180:73">(<argument pos:start="1180:27" pos:end="1180:30"><expr pos:start="1180:27" pos:end="1180:30"><name pos:start="1180:27" pos:end="1180:30">ectx</name></expr></argument>, <argument pos:start="1180:33" pos:end="1180:47"><expr pos:start="1180:33" pos:end="1180:47"><name pos:start="1180:33" pos:end="1180:47">US899_SERVER_IP</name></expr></argument>, <argument pos:start="1180:50" pos:end="1180:66"><expr pos:start="1180:50" pos:end="1180:66"><name pos:start="1180:50" pos:end="1180:66">US899_SERVER_PORT</name></expr></argument>, <argument pos:start="1180:69" pos:end="1180:72"><expr pos:start="1180:69" pos:end="1180:72"><name pos:start="1180:69" pos:end="1180:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1182:5" pos:end="1184:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="1185:5" pos:end="1185:33"><expr pos:start="1185:5" pos:end="1185:32"><name pos:start="1185:5" pos:end="1185:7">key</name> <operator pos:start="1185:9" pos:end="1185:9">=</operator> <call pos:start="1185:11" pos:end="1185:32"><name pos:start="1185:11" pos:end="1185:30">generate_private_key</name><argument_list pos:start="1185:31" pos:end="1185:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1186:5" pos:end="1186:27"><expr pos:start="1186:5" pos:end="1186:26"><call pos:start="1186:5" pos:end="1186:26"><name pos:start="1186:5" pos:end="1186:13">CU_ASSERT</name><argument_list pos:start="1186:14" pos:end="1186:26">(<argument pos:start="1186:15" pos:end="1186:25"><expr pos:start="1186:15" pos:end="1186:25"><name pos:start="1186:15" pos:end="1186:17">key</name> <operator pos:start="1186:19" pos:end="1186:20">!=</operator> <name pos:start="1186:22" pos:end="1186:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1188:5" pos:end="1190:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="1191:5" pos:end="1191:62"><expr pos:start="1191:5" pos:end="1191:61"><name pos:start="1191:5" pos:end="1191:6">rv</name> <operator pos:start="1191:8" pos:end="1191:8">=</operator> <call pos:start="1191:10" pos:end="1191:61"><name pos:start="1191:10" pos:end="1191:32">est_client_get_csrattrs</name><argument_list pos:start="1191:33" pos:end="1191:61">(<argument pos:start="1191:34" pos:end="1191:37"><expr pos:start="1191:34" pos:end="1191:37"><name pos:start="1191:34" pos:end="1191:37">ectx</name></expr></argument>, <argument pos:start="1191:40" pos:end="1191:49"><expr pos:start="1191:40" pos:end="1191:49"><operator pos:start="1191:40" pos:end="1191:40">&amp;</operator><name pos:start="1191:41" pos:end="1191:49">attr_data</name></expr></argument>, <argument pos:start="1191:52" pos:end="1191:60"><expr pos:start="1191:52" pos:end="1191:60"><operator pos:start="1191:52" pos:end="1191:52">&amp;</operator><name pos:start="1191:53" pos:end="1191:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1192:5" pos:end="1192:34"><expr pos:start="1192:5" pos:end="1192:33"><call pos:start="1192:5" pos:end="1192:33"><name pos:start="1192:5" pos:end="1192:13">CU_ASSERT</name><argument_list pos:start="1192:14" pos:end="1192:33">(<argument pos:start="1192:15" pos:end="1192:32"><expr pos:start="1192:15" pos:end="1192:32"><name pos:start="1192:15" pos:end="1192:16">rv</name> <operator pos:start="1192:18" pos:end="1192:19">==</operator> <name pos:start="1192:21" pos:end="1192:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1194:5" pos:end="1196:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="1197:5" pos:end="1197:63"><expr pos:start="1197:5" pos:end="1197:62"><name pos:start="1197:5" pos:end="1197:6">rv</name> <operator pos:start="1197:8" pos:end="1197:8">=</operator> <call pos:start="1197:10" pos:end="1197:62"><name pos:start="1197:10" pos:end="1197:26">est_client_enroll</name><argument_list pos:start="1197:27" pos:end="1197:62">(<argument pos:start="1197:28" pos:end="1197:31"><expr pos:start="1197:28" pos:end="1197:31"><name pos:start="1197:28" pos:end="1197:31">ectx</name></expr></argument>, <argument pos:start="1197:34" pos:end="1197:44"><expr pos:start="1197:34" pos:end="1197:44"><literal type="string" pos:start="1197:34" pos:end="1197:44">"TEST16-CN"</literal></expr></argument>, <argument pos:start="1197:47" pos:end="1197:56"><expr pos:start="1197:47" pos:end="1197:56"><operator pos:start="1197:47" pos:end="1197:47">&amp;</operator><name pos:start="1197:48" pos:end="1197:56">pkcs7_len</name></expr></argument>, <argument pos:start="1197:59" pos:end="1197:61"><expr pos:start="1197:59" pos:end="1197:61"><name pos:start="1197:59" pos:end="1197:61">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1198:5" pos:end="1198:34"><expr pos:start="1198:5" pos:end="1198:33"><call pos:start="1198:5" pos:end="1198:33"><name pos:start="1198:5" pos:end="1198:13">CU_ASSERT</name><argument_list pos:start="1198:14" pos:end="1198:33">(<argument pos:start="1198:15" pos:end="1198:32"><expr pos:start="1198:15" pos:end="1198:32"><name pos:start="1198:15" pos:end="1198:16">rv</name> <operator pos:start="1198:18" pos:end="1198:19">==</operator> <name pos:start="1198:21" pos:end="1198:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1200:5" pos:end="1202:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="1203:5" pos:end="1208:5"><if pos:start="1203:5" pos:end="1208:5">if <condition pos:start="1203:8" pos:end="1203:27">(<expr pos:start="1203:9" pos:end="1203:26"><name pos:start="1203:9" pos:end="1203:10">rv</name> <operator pos:start="1203:12" pos:end="1203:13">==</operator> <name pos:start="1203:15" pos:end="1203:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1203:29" pos:end="1208:5">{<block_content pos:start="1204:9" pos:end="1207:38">
	<expr_stmt pos:start="1204:9" pos:end="1204:37"><expr pos:start="1204:9" pos:end="1204:36"><name pos:start="1204:9" pos:end="1204:16">new_cert</name> <operator pos:start="1204:18" pos:end="1204:18">=</operator> <call pos:start="1204:20" pos:end="1204:36"><name pos:start="1204:20" pos:end="1204:25">malloc</name><argument_list pos:start="1204:26" pos:end="1204:36">(<argument pos:start="1204:27" pos:end="1204:35"><expr pos:start="1204:27" pos:end="1204:35"><name pos:start="1204:27" pos:end="1204:35">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1205:9" pos:end="1205:36"><expr pos:start="1205:9" pos:end="1205:35"><call pos:start="1205:9" pos:end="1205:35"><name pos:start="1205:9" pos:end="1205:17">CU_ASSERT</name><argument_list pos:start="1205:18" pos:end="1205:35">(<argument pos:start="1205:19" pos:end="1205:34"><expr pos:start="1205:19" pos:end="1205:34"><name pos:start="1205:19" pos:end="1205:26">new_cert</name> <operator pos:start="1205:28" pos:end="1205:29">!=</operator> <name pos:start="1205:31" pos:end="1205:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1206:9" pos:end="1206:59"><expr pos:start="1206:9" pos:end="1206:58"><name pos:start="1206:9" pos:end="1206:10">rv</name> <operator pos:start="1206:12" pos:end="1206:12">=</operator> <call pos:start="1206:14" pos:end="1206:58"><name pos:start="1206:14" pos:end="1206:42">est_client_copy_enrolled_cert</name><argument_list pos:start="1206:43" pos:end="1206:58">(<argument pos:start="1206:44" pos:end="1206:47"><expr pos:start="1206:44" pos:end="1206:47"><name pos:start="1206:44" pos:end="1206:47">ectx</name></expr></argument>, <argument pos:start="1206:50" pos:end="1206:57"><expr pos:start="1206:50" pos:end="1206:57"><name pos:start="1206:50" pos:end="1206:57">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1207:9" pos:end="1207:38"><expr pos:start="1207:9" pos:end="1207:37"><call pos:start="1207:9" pos:end="1207:37"><name pos:start="1207:9" pos:end="1207:17">CU_ASSERT</name><argument_list pos:start="1207:18" pos:end="1207:37">(<argument pos:start="1207:19" pos:end="1207:36"><expr pos:start="1207:19" pos:end="1207:36"><name pos:start="1207:19" pos:end="1207:20">rv</name> <operator pos:start="1207:22" pos:end="1207:23">==</operator> <name pos:start="1207:25" pos:end="1207:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1210:5" pos:end="1212:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="1213:5" pos:end="1213:23"><expr pos:start="1213:5" pos:end="1213:22"><call pos:start="1213:5" pos:end="1213:22"><name pos:start="1213:5" pos:end="1213:17">EVP_PKEY_free</name><argument_list pos:start="1213:18" pos:end="1213:22">(<argument pos:start="1213:19" pos:end="1213:21"><expr pos:start="1213:19" pos:end="1213:21"><name pos:start="1213:19" pos:end="1213:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1214:5" pos:end="1214:33"><if pos:start="1214:5" pos:end="1214:33">if <condition pos:start="1214:8" pos:end="1214:17">(<expr pos:start="1214:9" pos:end="1214:16"><name pos:start="1214:9" pos:end="1214:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="1214:19" pos:end="1214:33"><block_content pos:start="1214:19" pos:end="1214:33"> <expr_stmt pos:start="1214:19" pos:end="1214:33"><expr pos:start="1214:19" pos:end="1214:32"><call pos:start="1214:19" pos:end="1214:32"><name pos:start="1214:19" pos:end="1214:22">free</name><argument_list pos:start="1214:23" pos:end="1214:32">(<argument pos:start="1214:24" pos:end="1214:31"><expr pos:start="1214:24" pos:end="1214:31"><name pos:start="1214:24" pos:end="1214:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1215:5" pos:end="1215:22"><expr pos:start="1215:5" pos:end="1215:21"><call pos:start="1215:5" pos:end="1215:21"><name pos:start="1215:5" pos:end="1215:15">est_destroy</name><argument_list pos:start="1215:16" pos:end="1215:21">(<argument pos:start="1215:17" pos:end="1215:20"><expr pos:start="1215:17" pos:end="1215:20"><name pos:start="1215:17" pos:end="1215:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1216:5" pos:end="1216:21"><expr pos:start="1216:5" pos:end="1216:20"><call pos:start="1216:5" pos:end="1216:20"><name pos:start="1216:5" pos:end="1216:8">free</name><argument_list pos:start="1216:9" pos:end="1216:20">(<argument pos:start="1216:10" pos:end="1216:19"><expr pos:start="1216:10" pos:end="1216:19"><name pos:start="1216:10" pos:end="1216:19">cacrlcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1219:1" pos:end="1225:3">/*
 * Simple enroll - CRL check enabled on client
 *
 * We enable CRL checking on the client side.  We will
 * generate a CRL, the server cert will  be
 * revoked.  The enroll should fail.
 */</comment>
<function pos:start="1226:1" pos:end="1329:1"><type pos:start="1226:1" pos:end="1226:11"><specifier pos:start="1226:1" pos:end="1226:6">static</specifier> <name pos:start="1226:8" pos:end="1226:11">void</name></type> <name pos:start="1226:13" pos:end="1226:24">us899_test17</name> <parameter_list pos:start="1226:26" pos:end="1226:31">(<parameter pos:start="1226:27" pos:end="1226:30"><decl pos:start="1226:27" pos:end="1226:30"><type pos:start="1226:27" pos:end="1226:30"><name pos:start="1226:27" pos:end="1226:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1227:1" pos:end="1329:1">{<block_content pos:start="1228:5" pos:end="1328:21">
    <decl_stmt pos:start="1228:5" pos:end="1228:11"><decl pos:start="1228:5" pos:end="1228:10"><type pos:start="1228:5" pos:end="1228:7"><name pos:start="1228:5" pos:end="1228:7">int</name></type> <name pos:start="1228:9" pos:end="1228:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1229:5" pos:end="1229:18"><decl pos:start="1229:5" pos:end="1229:17"><type pos:start="1229:5" pos:end="1229:13"><name pos:start="1229:5" pos:end="1229:11">EST_CTX</name> <modifier pos:start="1229:13" pos:end="1229:13">*</modifier></type><name pos:start="1229:14" pos:end="1229:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1230:5" pos:end="1230:18"><decl pos:start="1230:5" pos:end="1230:17"><type pos:start="1230:5" pos:end="1230:14"><name pos:start="1230:5" pos:end="1230:12">EVP_PKEY</name> <modifier pos:start="1230:14" pos:end="1230:14">*</modifier></type><name pos:start="1230:15" pos:end="1230:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1231:5" pos:end="1231:22"><decl pos:start="1231:5" pos:end="1231:21"><type pos:start="1231:5" pos:end="1231:7"><name pos:start="1231:5" pos:end="1231:7">int</name></type> <name pos:start="1231:9" pos:end="1231:17">pkcs7_len</name> <init pos:start="1231:19" pos:end="1231:21">= <expr pos:start="1231:21" pos:end="1231:21"><literal type="number" pos:start="1231:21" pos:end="1231:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1232:5" pos:end="1232:37"><decl pos:start="1232:5" pos:end="1232:36"><type pos:start="1232:5" pos:end="1232:19"><name pos:start="1232:5" pos:end="1232:12">unsigned</name> <name pos:start="1232:14" pos:end="1232:17">char</name> <modifier pos:start="1232:19" pos:end="1232:19">*</modifier></type><name pos:start="1232:20" pos:end="1232:29">cacrlcerts</name> <init pos:start="1232:31" pos:end="1232:36">= <expr pos:start="1232:33" pos:end="1232:36"><name pos:start="1232:33" pos:end="1232:36">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1233:5" pos:end="1233:27"><decl pos:start="1233:5" pos:end="1233:26"><type pos:start="1233:5" pos:end="1233:7"><name pos:start="1233:5" pos:end="1233:7">int</name></type> <name pos:start="1233:9" pos:end="1233:22">cacrlcerts_len</name> <init pos:start="1233:24" pos:end="1233:26">= <expr pos:start="1233:26" pos:end="1233:26"><literal type="number" pos:start="1233:26" pos:end="1233:26">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1234:5" pos:end="1234:36"><decl pos:start="1234:5" pos:end="1234:35"><type pos:start="1234:5" pos:end="1234:19"><name pos:start="1234:5" pos:end="1234:12">unsigned</name> <name pos:start="1234:14" pos:end="1234:17">char</name> <modifier pos:start="1234:19" pos:end="1234:19">*</modifier></type><name pos:start="1234:20" pos:end="1234:28">attr_data</name> <init pos:start="1234:30" pos:end="1234:35">= <expr pos:start="1234:32" pos:end="1234:35"><name pos:start="1234:32" pos:end="1234:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1235:5" pos:end="1235:17"><decl pos:start="1235:5" pos:end="1235:16"><type pos:start="1235:5" pos:end="1235:7"><name pos:start="1235:5" pos:end="1235:7">int</name></type> <name pos:start="1235:9" pos:end="1235:16">attr_len</name></decl>;</decl_stmt>
    
    <expr_stmt pos:start="1237:5" pos:end="1244:0"><expr pos:start="1237:5" pos:end="1237:15"><name pos:start="1237:5" pos:end="1237:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1239:5" pos:end="1242:7">/*
     * Revoke the server cert, generate a CRL and append it to the CA chain
     * we're using on the client side.
     */</comment>
<cpp:ifndef pos:start="1243:1" pos:end="1243:13">#<cpp:directive pos:start="1243:2" pos:end="1243:7">ifndef</cpp:directive> <name pos:start="1243:9" pos:end="1243:13">WIN32</name></cpp:ifndef>
    <expr_stmt pos:start="1244:5" pos:end="1244:60"><expr pos:start="1244:5" pos:end="1244:59"><call pos:start="1244:5" pos:end="1244:59"><name pos:start="1244:5" pos:end="1244:10">system</name><argument_list pos:start="1244:11" pos:end="1244:59">(<argument pos:start="1244:12" pos:end="1244:58"><expr pos:start="1244:12" pos:end="1244:58"><literal type="string" pos:start="1244:12" pos:end="1244:58">"cp CA/estCA/index.txt CA/estCA/index.txt.save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1245:5" pos:end="1245:13"><expr pos:start="1245:5" pos:end="1245:12"><call pos:start="1245:5" pos:end="1245:12"><name pos:start="1245:5" pos:end="1245:9">SLEEP</name><argument_list pos:start="1245:10" pos:end="1245:12">(<argument pos:start="1245:11" pos:end="1245:11"><expr pos:start="1245:11" pos:end="1245:11"><literal type="number" pos:start="1245:11" pos:end="1245:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1246:5" pos:end="1246:102"><expr pos:start="1246:5" pos:end="1246:101"><call pos:start="1246:5" pos:end="1246:101"><name pos:start="1246:5" pos:end="1246:10">system</name><argument_list pos:start="1246:11" pos:end="1246:101">(<argument pos:start="1246:12" pos:end="1246:100"><expr pos:start="1246:12" pos:end="1246:100"><literal type="string" pos:start="1246:12" pos:end="1246:100">"openssl ca -config CA/estExampleCA.cnf -revoke CA/estCA/private/estservercertandkey.pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1247:5" pos:end="1247:13"><expr pos:start="1247:5" pos:end="1247:12"><call pos:start="1247:5" pos:end="1247:12"><name pos:start="1247:5" pos:end="1247:9">SLEEP</name><argument_list pos:start="1247:10" pos:end="1247:12">(<argument pos:start="1247:11" pos:end="1247:11"><expr pos:start="1247:11" pos:end="1247:11"><literal type="number" pos:start="1247:11" pos:end="1247:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1248:5" pos:end="1248:87"><expr pos:start="1248:5" pos:end="1248:86"><call pos:start="1248:5" pos:end="1248:86"><name pos:start="1248:5" pos:end="1248:10">system</name><argument_list pos:start="1248:11" pos:end="1248:86">(<argument pos:start="1248:12" pos:end="1248:85"><expr pos:start="1248:12" pos:end="1248:85"><literal type="string" pos:start="1248:12" pos:end="1248:85">"openssl ca -config CA/estExampleCA.cnf -gencrl -out US899/test17_crl.pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1249:5" pos:end="1249:13"><expr pos:start="1249:5" pos:end="1249:12"><call pos:start="1249:5" pos:end="1249:12"><name pos:start="1249:5" pos:end="1249:9">SLEEP</name><argument_list pos:start="1249:10" pos:end="1249:12">(<argument pos:start="1249:11" pos:end="1249:11"><expr pos:start="1249:11" pos:end="1249:11"><literal type="number" pos:start="1249:11" pos:end="1249:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1250:5" pos:end="1250:62"><expr pos:start="1250:5" pos:end="1250:61"><call pos:start="1250:5" pos:end="1250:61"><name pos:start="1250:5" pos:end="1250:10">system</name><argument_list pos:start="1250:11" pos:end="1250:61">(<argument pos:start="1250:12" pos:end="1250:60"><expr pos:start="1250:12" pos:end="1250:60"><literal type="string" pos:start="1250:12" pos:end="1250:60">"cat CA/trustedcerts.crt &gt; US899/test17trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1251:5" pos:end="1251:13"><expr pos:start="1251:5" pos:end="1251:12"><call pos:start="1251:5" pos:end="1251:12"><name pos:start="1251:5" pos:end="1251:9">SLEEP</name><argument_list pos:start="1251:10" pos:end="1251:12">(<argument pos:start="1251:11" pos:end="1251:11"><expr pos:start="1251:11" pos:end="1251:11"><literal type="number" pos:start="1251:11" pos:end="1251:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1252:5" pos:end="1252:64"><expr pos:start="1252:5" pos:end="1252:63"><call pos:start="1252:5" pos:end="1252:63"><name pos:start="1252:5" pos:end="1252:10">system</name><argument_list pos:start="1252:11" pos:end="1252:63">(<argument pos:start="1252:12" pos:end="1252:62"><expr pos:start="1252:12" pos:end="1252:62"><literal type="string" pos:start="1252:12" pos:end="1252:62">"cat US899/test17_crl.pem &gt;&gt; US899/test17trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1253:5" pos:end="1253:13"><expr pos:start="1253:5" pos:end="1253:12"><call pos:start="1253:5" pos:end="1253:12"><name pos:start="1253:5" pos:end="1253:9">SLEEP</name><argument_list pos:start="1253:10" pos:end="1253:12">(<argument pos:start="1253:11" pos:end="1253:11"><expr pos:start="1253:11" pos:end="1253:11"><literal type="number" pos:start="1253:11" pos:end="1253:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1254:5" pos:end="1254:60"><expr pos:start="1254:5" pos:end="1254:59"><call pos:start="1254:5" pos:end="1254:59"><name pos:start="1254:5" pos:end="1254:10">system</name><argument_list pos:start="1254:11" pos:end="1254:59">(<argument pos:start="1254:12" pos:end="1254:58"><expr pos:start="1254:12" pos:end="1254:58"><literal type="string" pos:start="1254:12" pos:end="1254:58">"cp CA/estCA/index.txt.save CA/estCA/index.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1255:5" pos:end="1257:0"><expr pos:start="1255:5" pos:end="1255:12"><call pos:start="1255:5" pos:end="1255:12"><name pos:start="1255:5" pos:end="1255:9">SLEEP</name><argument_list pos:start="1255:10" pos:end="1255:12">(<argument pos:start="1255:11" pos:end="1255:11"><expr pos:start="1255:11" pos:end="1255:11"><literal type="number" pos:start="1255:11" pos:end="1255:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="1256:1" pos:end="1256:5">#<cpp:directive pos:start="1256:2" pos:end="1256:5">else</cpp:directive></cpp:else> 
    <expr_stmt pos:start="1257:5" pos:end="1257:66"><expr pos:start="1257:5" pos:end="1257:65"><call pos:start="1257:5" pos:end="1257:65"><name pos:start="1257:5" pos:end="1257:10">system</name><argument_list pos:start="1257:11" pos:end="1257:65">(<argument pos:start="1257:12" pos:end="1257:64"><expr pos:start="1257:12" pos:end="1257:64"><literal type="string" pos:start="1257:12" pos:end="1257:64">"copy CA\\estCA\\index.txt CA\\estCA\\index.txt.save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1258:5" pos:end="1258:13"><expr pos:start="1258:5" pos:end="1258:12"><call pos:start="1258:5" pos:end="1258:12"><name pos:start="1258:5" pos:end="1258:9">SLEEP</name><argument_list pos:start="1258:10" pos:end="1258:12">(<argument pos:start="1258:11" pos:end="1258:11"><expr pos:start="1258:11" pos:end="1258:11"><literal type="number" pos:start="1258:11" pos:end="1258:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1259:5" pos:end="1259:106"><expr pos:start="1259:5" pos:end="1259:105"><call pos:start="1259:5" pos:end="1259:105"><name pos:start="1259:5" pos:end="1259:10">system</name><argument_list pos:start="1259:11" pos:end="1259:105">(<argument pos:start="1259:12" pos:end="1259:104"><expr pos:start="1259:12" pos:end="1259:104"><literal type="string" pos:start="1259:12" pos:end="1259:104">"openssl ca -config CA\\estExampleCA.cnf -revoke CA\\estCA\\private\\estservercertandkey.pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1260:9" pos:end="1260:17"><expr pos:start="1260:9" pos:end="1260:16"><call pos:start="1260:9" pos:end="1260:16"><name pos:start="1260:9" pos:end="1260:13">SLEEP</name><argument_list pos:start="1260:14" pos:end="1260:16">(<argument pos:start="1260:15" pos:end="1260:15"><expr pos:start="1260:15" pos:end="1260:15"><literal type="number" pos:start="1260:15" pos:end="1260:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt pos:start="1261:5" pos:end="1261:89"><expr pos:start="1261:5" pos:end="1261:88"><call pos:start="1261:5" pos:end="1261:88"><name pos:start="1261:5" pos:end="1261:10">system</name><argument_list pos:start="1261:11" pos:end="1261:88">(<argument pos:start="1261:12" pos:end="1261:87"><expr pos:start="1261:12" pos:end="1261:87"><literal type="string" pos:start="1261:12" pos:end="1261:87">"openssl ca -config CA\\estExampleCA.cnf -gencrl -out US899\\test17_crl.pem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1262:5" pos:end="1262:13"><expr pos:start="1262:5" pos:end="1262:12"><call pos:start="1262:5" pos:end="1262:12"><name pos:start="1262:5" pos:end="1262:9">SLEEP</name><argument_list pos:start="1262:10" pos:end="1262:12">(<argument pos:start="1262:11" pos:end="1262:11"><expr pos:start="1262:11" pos:end="1262:11"><literal type="number" pos:start="1262:11" pos:end="1262:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1263:5" pos:end="1263:65"><expr pos:start="1263:5" pos:end="1263:64"><call pos:start="1263:5" pos:end="1263:64"><name pos:start="1263:5" pos:end="1263:10">system</name><argument_list pos:start="1263:11" pos:end="1263:64">(<argument pos:start="1263:12" pos:end="1263:63"><expr pos:start="1263:12" pos:end="1263:63"><literal type="string" pos:start="1263:12" pos:end="1263:63">"type CA\\trustedcerts.crt &gt; US899\\test17trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1264:5" pos:end="1264:13"><expr pos:start="1264:5" pos:end="1264:12"><call pos:start="1264:5" pos:end="1264:12"><name pos:start="1264:5" pos:end="1264:9">SLEEP</name><argument_list pos:start="1264:10" pos:end="1264:12">(<argument pos:start="1264:11" pos:end="1264:11"><expr pos:start="1264:11" pos:end="1264:11"><literal type="number" pos:start="1264:11" pos:end="1264:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1265:5" pos:end="1265:67"><expr pos:start="1265:5" pos:end="1265:66"><call pos:start="1265:5" pos:end="1265:66"><name pos:start="1265:5" pos:end="1265:10">system</name><argument_list pos:start="1265:11" pos:end="1265:66">(<argument pos:start="1265:12" pos:end="1265:65"><expr pos:start="1265:12" pos:end="1265:65"><literal type="string" pos:start="1265:12" pos:end="1265:65">"type US899\\test17_crl.pem &gt;&gt; US899\\test17trust.crt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1266:5" pos:end="1266:13"><expr pos:start="1266:5" pos:end="1266:12"><call pos:start="1266:5" pos:end="1266:12"><name pos:start="1266:5" pos:end="1266:9">SLEEP</name><argument_list pos:start="1266:10" pos:end="1266:12">(<argument pos:start="1266:11" pos:end="1266:11"><expr pos:start="1266:11" pos:end="1266:11"><literal type="number" pos:start="1266:11" pos:end="1266:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1267:5" pos:end="1267:66"><expr pos:start="1267:5" pos:end="1267:65"><call pos:start="1267:5" pos:end="1267:65"><name pos:start="1267:5" pos:end="1267:10">system</name><argument_list pos:start="1267:11" pos:end="1267:65">(<argument pos:start="1267:12" pos:end="1267:64"><expr pos:start="1267:12" pos:end="1267:64"><literal type="string" pos:start="1267:12" pos:end="1267:64">"copy CA\\estCA\\index.txt.save CA\\estCA\\index.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1268:5" pos:end="1270:0"><expr pos:start="1268:5" pos:end="1268:12"><call pos:start="1268:5" pos:end="1268:12"><name pos:start="1268:5" pos:end="1268:9">SLEEP</name><argument_list pos:start="1268:10" pos:end="1268:12">(<argument pos:start="1268:11" pos:end="1268:11"><expr pos:start="1268:11" pos:end="1268:11"><literal type="number" pos:start="1268:11" pos:end="1268:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1269:1" pos:end="1269:6">#<cpp:directive pos:start="1269:2" pos:end="1269:6">endif</cpp:directive></cpp:endif> 

    <comment type="block" pos:start="1271:5" pos:end="1273:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="1274:5" pos:end="1274:76"><expr pos:start="1274:5" pos:end="1274:75"><name pos:start="1274:5" pos:end="1274:18">cacrlcerts_len</name> <operator pos:start="1274:20" pos:end="1274:20">=</operator> <call pos:start="1274:22" pos:end="1274:75"><name pos:start="1274:22" pos:end="1274:37">read_binary_file</name><argument_list pos:start="1274:38" pos:end="1274:75">(<argument pos:start="1274:39" pos:end="1274:61"><expr pos:start="1274:39" pos:end="1274:61"><literal type="string" pos:start="1274:39" pos:end="1274:61">"US899/test17trust.crt"</literal></expr></argument>, <argument pos:start="1274:64" pos:end="1274:74"><expr pos:start="1274:64" pos:end="1274:74"><operator pos:start="1274:64" pos:end="1274:64">&amp;</operator><name pos:start="1274:65" pos:end="1274:74">cacrlcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1275:5" pos:end="1275:30"><expr pos:start="1275:5" pos:end="1275:29"><call pos:start="1275:5" pos:end="1275:29"><name pos:start="1275:5" pos:end="1275:13">CU_ASSERT</name><argument_list pos:start="1275:14" pos:end="1275:29">(<argument pos:start="1275:15" pos:end="1275:28"><expr pos:start="1275:15" pos:end="1275:28"><name pos:start="1275:15" pos:end="1275:24">cacrlcerts</name> <operator pos:start="1275:26" pos:end="1275:26">&gt;</operator> <literal type="number" pos:start="1275:28" pos:end="1275:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1276:5" pos:end="1278:5"><if pos:start="1276:5" pos:end="1278:5">if <condition pos:start="1276:8" pos:end="1276:28">(<expr pos:start="1276:9" pos:end="1276:27"><name pos:start="1276:9" pos:end="1276:22">cacrlcerts_len</name> <operator pos:start="1276:24" pos:end="1276:25">&lt;=</operator> <literal type="number" pos:start="1276:27" pos:end="1276:27">0</literal></expr>)</condition> <block pos:start="1276:30" pos:end="1278:5">{<block_content pos:start="1277:9" pos:end="1277:15">
	<return pos:start="1277:9" pos:end="1277:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1280:5" pos:end="1282:7">/*
     * Create a client context 
     */</comment>
    <expr_stmt pos:start="1283:5" pos:end="1285:54"><expr pos:start="1283:5" pos:end="1285:53"><name pos:start="1283:5" pos:end="1283:8">ectx</name> <operator pos:start="1283:10" pos:end="1283:10">=</operator> <call pos:start="1283:12" pos:end="1285:53"><name pos:start="1283:12" pos:end="1283:26">est_client_init</name><argument_list pos:start="1283:27" pos:end="1285:53">(<argument pos:start="1283:28" pos:end="1283:37"><expr pos:start="1283:28" pos:end="1283:37"><name pos:start="1283:28" pos:end="1283:37">cacrlcerts</name></expr></argument>, <argument pos:start="1283:40" pos:end="1283:53"><expr pos:start="1283:40" pos:end="1283:53"><name pos:start="1283:40" pos:end="1283:53">cacrlcerts_len</name></expr></argument>, 
                           <argument pos:start="1284:28" pos:end="1284:46"><expr pos:start="1284:28" pos:end="1284:46"><name pos:start="1284:28" pos:end="1284:46">EST_CERT_FORMAT_PEM</name></expr></argument>, 
                           <argument pos:start="1285:28" pos:end="1285:52"><expr pos:start="1285:28" pos:end="1285:52"><name pos:start="1285:28" pos:end="1285:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1286:5" pos:end="1286:28"><expr pos:start="1286:5" pos:end="1286:27"><call pos:start="1286:5" pos:end="1286:27"><name pos:start="1286:5" pos:end="1286:13">CU_ASSERT</name><argument_list pos:start="1286:14" pos:end="1286:27">(<argument pos:start="1286:15" pos:end="1286:26"><expr pos:start="1286:15" pos:end="1286:26"><name pos:start="1286:15" pos:end="1286:18">ectx</name> <operator pos:start="1286:20" pos:end="1286:21">!=</operator> <name pos:start="1286:23" pos:end="1286:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1288:5" pos:end="1290:7">/*
     * Enable CRL checking on the client
     */</comment>
    <expr_stmt pos:start="1291:5" pos:end="1291:30"><expr pos:start="1291:5" pos:end="1291:29"><name pos:start="1291:5" pos:end="1291:6">rv</name> <operator pos:start="1291:8" pos:end="1291:8">=</operator> <call pos:start="1291:10" pos:end="1291:29"><name pos:start="1291:10" pos:end="1291:23">est_enable_crl</name><argument_list pos:start="1291:24" pos:end="1291:29">(<argument pos:start="1291:25" pos:end="1291:28"><expr pos:start="1291:25" pos:end="1291:28"><name pos:start="1291:25" pos:end="1291:28">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1292:5" pos:end="1292:34"><expr pos:start="1292:5" pos:end="1292:33"><call pos:start="1292:5" pos:end="1292:33"><name pos:start="1292:5" pos:end="1292:13">CU_ASSERT</name><argument_list pos:start="1292:14" pos:end="1292:33">(<argument pos:start="1292:15" pos:end="1292:32"><expr pos:start="1292:15" pos:end="1292:32"><name pos:start="1292:15" pos:end="1292:16">rv</name> <operator pos:start="1292:18" pos:end="1292:19">==</operator> <name pos:start="1292:21" pos:end="1292:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1294:5" pos:end="1296:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1297:5" pos:end="1297:69"><expr pos:start="1297:5" pos:end="1297:68"><name pos:start="1297:5" pos:end="1297:6">rv</name> <operator pos:start="1297:8" pos:end="1297:8">=</operator> <call pos:start="1297:10" pos:end="1297:68"><name pos:start="1297:10" pos:end="1297:28">est_client_set_auth</name><argument_list pos:start="1297:29" pos:end="1297:68">(<argument pos:start="1297:30" pos:end="1297:33"><expr pos:start="1297:30" pos:end="1297:33"><name pos:start="1297:30" pos:end="1297:33">ectx</name></expr></argument>, <argument pos:start="1297:36" pos:end="1297:44"><expr pos:start="1297:36" pos:end="1297:44"><name pos:start="1297:36" pos:end="1297:44">US899_UID</name></expr></argument>, <argument pos:start="1297:47" pos:end="1297:55"><expr pos:start="1297:47" pos:end="1297:55"><name pos:start="1297:47" pos:end="1297:55">US899_PWD</name></expr></argument>, <argument pos:start="1297:58" pos:end="1297:61"><expr pos:start="1297:58" pos:end="1297:61"><name pos:start="1297:58" pos:end="1297:61">NULL</name></expr></argument>, <argument pos:start="1297:64" pos:end="1297:67"><expr pos:start="1297:64" pos:end="1297:67"><name pos:start="1297:64" pos:end="1297:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1298:5" pos:end="1298:34"><expr pos:start="1298:5" pos:end="1298:33"><call pos:start="1298:5" pos:end="1298:33"><name pos:start="1298:5" pos:end="1298:13">CU_ASSERT</name><argument_list pos:start="1298:14" pos:end="1298:33">(<argument pos:start="1298:15" pos:end="1298:32"><expr pos:start="1298:15" pos:end="1298:32"><name pos:start="1298:15" pos:end="1298:16">rv</name> <operator pos:start="1298:18" pos:end="1298:19">==</operator> <name pos:start="1298:21" pos:end="1298:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1300:5" pos:end="1302:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1303:5" pos:end="1303:74"><expr pos:start="1303:5" pos:end="1303:73"><call pos:start="1303:5" pos:end="1303:73"><name pos:start="1303:5" pos:end="1303:25">est_client_set_server</name><argument_list pos:start="1303:26" pos:end="1303:73">(<argument pos:start="1303:27" pos:end="1303:30"><expr pos:start="1303:27" pos:end="1303:30"><name pos:start="1303:27" pos:end="1303:30">ectx</name></expr></argument>, <argument pos:start="1303:33" pos:end="1303:47"><expr pos:start="1303:33" pos:end="1303:47"><name pos:start="1303:33" pos:end="1303:47">US899_SERVER_IP</name></expr></argument>, <argument pos:start="1303:50" pos:end="1303:66"><expr pos:start="1303:50" pos:end="1303:66"><name pos:start="1303:50" pos:end="1303:66">US899_SERVER_PORT</name></expr></argument>, <argument pos:start="1303:69" pos:end="1303:72"><expr pos:start="1303:69" pos:end="1303:72"><name pos:start="1303:69" pos:end="1303:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1305:5" pos:end="1307:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="1308:5" pos:end="1308:33"><expr pos:start="1308:5" pos:end="1308:32"><name pos:start="1308:5" pos:end="1308:7">key</name> <operator pos:start="1308:9" pos:end="1308:9">=</operator> <call pos:start="1308:11" pos:end="1308:32"><name pos:start="1308:11" pos:end="1308:30">generate_private_key</name><argument_list pos:start="1308:31" pos:end="1308:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1309:5" pos:end="1309:27"><expr pos:start="1309:5" pos:end="1309:26"><call pos:start="1309:5" pos:end="1309:26"><name pos:start="1309:5" pos:end="1309:13">CU_ASSERT</name><argument_list pos:start="1309:14" pos:end="1309:26">(<argument pos:start="1309:15" pos:end="1309:25"><expr pos:start="1309:15" pos:end="1309:25"><name pos:start="1309:15" pos:end="1309:17">key</name> <operator pos:start="1309:19" pos:end="1309:20">!=</operator> <name pos:start="1309:22" pos:end="1309:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1311:5" pos:end="1313:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="1314:5" pos:end="1314:62"><expr pos:start="1314:5" pos:end="1314:61"><name pos:start="1314:5" pos:end="1314:6">rv</name> <operator pos:start="1314:8" pos:end="1314:8">=</operator> <call pos:start="1314:10" pos:end="1314:61"><name pos:start="1314:10" pos:end="1314:32">est_client_get_csrattrs</name><argument_list pos:start="1314:33" pos:end="1314:61">(<argument pos:start="1314:34" pos:end="1314:37"><expr pos:start="1314:34" pos:end="1314:37"><name pos:start="1314:34" pos:end="1314:37">ectx</name></expr></argument>, <argument pos:start="1314:40" pos:end="1314:49"><expr pos:start="1314:40" pos:end="1314:49"><operator pos:start="1314:40" pos:end="1314:40">&amp;</operator><name pos:start="1314:41" pos:end="1314:49">attr_data</name></expr></argument>, <argument pos:start="1314:52" pos:end="1314:60"><expr pos:start="1314:52" pos:end="1314:60"><operator pos:start="1314:52" pos:end="1314:52">&amp;</operator><name pos:start="1314:53" pos:end="1314:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1315:5" pos:end="1315:41"><expr pos:start="1315:5" pos:end="1315:40"><call pos:start="1315:5" pos:end="1315:40"><name pos:start="1315:5" pos:end="1315:13">CU_ASSERT</name><argument_list pos:start="1315:14" pos:end="1315:40">(<argument pos:start="1315:15" pos:end="1315:39"><expr pos:start="1315:15" pos:end="1315:39"><name pos:start="1315:15" pos:end="1315:16">rv</name> <operator pos:start="1315:18" pos:end="1315:19">==</operator> <name pos:start="1315:21" pos:end="1315:39">EST_ERR_SSL_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1317:5" pos:end="1319:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="1320:5" pos:end="1320:63"><expr pos:start="1320:5" pos:end="1320:62"><name pos:start="1320:5" pos:end="1320:6">rv</name> <operator pos:start="1320:8" pos:end="1320:8">=</operator> <call pos:start="1320:10" pos:end="1320:62"><name pos:start="1320:10" pos:end="1320:26">est_client_enroll</name><argument_list pos:start="1320:27" pos:end="1320:62">(<argument pos:start="1320:28" pos:end="1320:31"><expr pos:start="1320:28" pos:end="1320:31"><name pos:start="1320:28" pos:end="1320:31">ectx</name></expr></argument>, <argument pos:start="1320:34" pos:end="1320:44"><expr pos:start="1320:34" pos:end="1320:44"><literal type="string" pos:start="1320:34" pos:end="1320:44">"TEST17-CN"</literal></expr></argument>, <argument pos:start="1320:47" pos:end="1320:56"><expr pos:start="1320:47" pos:end="1320:56"><operator pos:start="1320:47" pos:end="1320:47">&amp;</operator><name pos:start="1320:48" pos:end="1320:56">pkcs7_len</name></expr></argument>, <argument pos:start="1320:59" pos:end="1320:61"><expr pos:start="1320:59" pos:end="1320:61"><name pos:start="1320:59" pos:end="1320:61">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1321:5" pos:end="1321:41"><expr pos:start="1321:5" pos:end="1321:40"><call pos:start="1321:5" pos:end="1321:40"><name pos:start="1321:5" pos:end="1321:13">CU_ASSERT</name><argument_list pos:start="1321:14" pos:end="1321:40">(<argument pos:start="1321:15" pos:end="1321:39"><expr pos:start="1321:15" pos:end="1321:39"><name pos:start="1321:15" pos:end="1321:16">rv</name> <operator pos:start="1321:18" pos:end="1321:19">==</operator> <name pos:start="1321:21" pos:end="1321:39">EST_ERR_SSL_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1323:5" pos:end="1325:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="1326:5" pos:end="1326:23"><expr pos:start="1326:5" pos:end="1326:22"><call pos:start="1326:5" pos:end="1326:22"><name pos:start="1326:5" pos:end="1326:17">EVP_PKEY_free</name><argument_list pos:start="1326:18" pos:end="1326:22">(<argument pos:start="1326:19" pos:end="1326:21"><expr pos:start="1326:19" pos:end="1326:21"><name pos:start="1326:19" pos:end="1326:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1327:5" pos:end="1327:22"><expr pos:start="1327:5" pos:end="1327:21"><call pos:start="1327:5" pos:end="1327:21"><name pos:start="1327:5" pos:end="1327:15">est_destroy</name><argument_list pos:start="1327:16" pos:end="1327:21">(<argument pos:start="1327:17" pos:end="1327:20"><expr pos:start="1327:17" pos:end="1327:20"><name pos:start="1327:17" pos:end="1327:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1328:5" pos:end="1328:21"><expr pos:start="1328:5" pos:end="1328:20"><call pos:start="1328:5" pos:end="1328:20"><name pos:start="1328:5" pos:end="1328:8">free</name><argument_list pos:start="1328:9" pos:end="1328:20">(<argument pos:start="1328:10" pos:end="1328:19"><expr pos:start="1328:10" pos:end="1328:19"><name pos:start="1328:10" pos:end="1328:19">cacrlcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="1331:1" pos:end="1337:3">/*
 * Simple enroll - Receive Retry-After response 
 *
 * Client issues an Enroll request and receives
 * a Retry-After response.  Ensure that the
 * retry after value can be obtained from the client.
 */</comment>
<function pos:start="1338:1" pos:end="1415:1"><type pos:start="1338:1" pos:end="1338:11"><specifier pos:start="1338:1" pos:end="1338:6">static</specifier> <name pos:start="1338:8" pos:end="1338:11">void</name></type> <name pos:start="1338:13" pos:end="1338:24">us899_test18</name> <parameter_list pos:start="1338:26" pos:end="1338:31">(<parameter pos:start="1338:27" pos:end="1338:30"><decl pos:start="1338:27" pos:end="1338:30"><type pos:start="1338:27" pos:end="1338:30"><name pos:start="1338:27" pos:end="1338:30">void</name></type></decl></parameter>)</parameter_list> 
<block pos:start="1339:1" pos:end="1415:1">{<block_content pos:start="1340:5" pos:end="1414:22">
    <decl_stmt pos:start="1340:5" pos:end="1340:11"><decl pos:start="1340:5" pos:end="1340:10"><type pos:start="1340:5" pos:end="1340:7"><name pos:start="1340:5" pos:end="1340:7">int</name></type> <name pos:start="1340:9" pos:end="1340:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1341:5" pos:end="1341:18"><decl pos:start="1341:5" pos:end="1341:17"><type pos:start="1341:5" pos:end="1341:13"><name pos:start="1341:5" pos:end="1341:11">EST_CTX</name> <modifier pos:start="1341:13" pos:end="1341:13">*</modifier></type><name pos:start="1341:14" pos:end="1341:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1342:5" pos:end="1342:18"><decl pos:start="1342:5" pos:end="1342:17"><type pos:start="1342:5" pos:end="1342:14"><name pos:start="1342:5" pos:end="1342:12">EVP_PKEY</name> <modifier pos:start="1342:14" pos:end="1342:14">*</modifier></type><name pos:start="1342:15" pos:end="1342:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1343:5" pos:end="1343:22"><decl pos:start="1343:5" pos:end="1343:21"><type pos:start="1343:5" pos:end="1343:7"><name pos:start="1343:5" pos:end="1343:7">int</name></type> <name pos:start="1343:9" pos:end="1343:17">pkcs7_len</name> <init pos:start="1343:19" pos:end="1343:21">= <expr pos:start="1343:21" pos:end="1343:21"><literal type="number" pos:start="1343:21" pos:end="1343:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1344:5" pos:end="1344:23"><decl pos:start="1344:5" pos:end="1344:22"><type pos:start="1344:5" pos:end="1344:7"><name pos:start="1344:5" pos:end="1344:7">int</name></type> <name pos:start="1344:9" pos:end="1344:18">delay_secs</name> <init pos:start="1344:20" pos:end="1344:22">= <expr pos:start="1344:22" pos:end="1344:22"><literal type="number" pos:start="1344:22" pos:end="1344:22">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1345:5" pos:end="1345:26"><decl pos:start="1345:5" pos:end="1345:25"><type pos:start="1345:5" pos:end="1345:10"><name pos:start="1345:5" pos:end="1345:10">time_t</name></type> <name pos:start="1345:12" pos:end="1345:21">retry_date</name> <init pos:start="1345:23" pos:end="1345:25">= <expr pos:start="1345:25" pos:end="1345:25"><literal type="number" pos:start="1345:25" pos:end="1345:25">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1346:5" pos:end="1346:36"><decl pos:start="1346:5" pos:end="1346:35"><type pos:start="1346:5" pos:end="1346:19"><name pos:start="1346:5" pos:end="1346:12">unsigned</name> <name pos:start="1346:14" pos:end="1346:17">char</name> <modifier pos:start="1346:19" pos:end="1346:19">*</modifier></type><name pos:start="1346:20" pos:end="1346:28">attr_data</name> <init pos:start="1346:30" pos:end="1346:35">= <expr pos:start="1346:32" pos:end="1346:35"><name pos:start="1346:32" pos:end="1346:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1347:5" pos:end="1347:17"><decl pos:start="1347:5" pos:end="1347:16"><type pos:start="1347:5" pos:end="1347:7"><name pos:start="1347:5" pos:end="1347:7">int</name></type> <name pos:start="1347:9" pos:end="1347:16">attr_len</name></decl>;</decl_stmt>
    
    <expr_stmt pos:start="1349:5" pos:end="1349:16"><expr pos:start="1349:5" pos:end="1349:15"><name pos:start="1349:5" pos:end="1349:15">LOG_FUNC_NM</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1351:5" pos:end="1354:7">/*
     * Stop the existing server.  This test case needs
     * the server to go into manual enroll mode
     */</comment>
    <expr_stmt pos:start="1355:5" pos:end="1355:14"><expr pos:start="1355:5" pos:end="1355:13"><call pos:start="1355:5" pos:end="1355:13"><name pos:start="1355:5" pos:end="1355:11">st_stop</name><argument_list pos:start="1355:12" pos:end="1355:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1357:5" pos:end="1359:7">/*
     * Start the server up in manual enroll mode
     */</comment>
    <expr_stmt pos:start="1360:5" pos:end="1360:34"><expr pos:start="1360:5" pos:end="1360:33"><name pos:start="1360:5" pos:end="1360:6">rv</name> <operator pos:start="1360:8" pos:end="1360:8">=</operator> <call pos:start="1360:10" pos:end="1360:33"><name pos:start="1360:10" pos:end="1360:27">us899_start_server</name><argument_list pos:start="1360:28" pos:end="1360:33">(<argument pos:start="1360:29" pos:end="1360:29"><expr pos:start="1360:29" pos:end="1360:29"><literal type="number" pos:start="1360:29" pos:end="1360:29">1</literal></expr></argument>, <argument pos:start="1360:32" pos:end="1360:32"><expr pos:start="1360:32" pos:end="1360:32"><literal type="number" pos:start="1360:32" pos:end="1360:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1361:5" pos:end="1361:23"><expr pos:start="1361:5" pos:end="1361:22"><call pos:start="1361:5" pos:end="1361:22"><name pos:start="1361:5" pos:end="1361:13">CU_ASSERT</name><argument_list pos:start="1361:14" pos:end="1361:22">(<argument pos:start="1361:15" pos:end="1361:21"><expr pos:start="1361:15" pos:end="1361:21"><name pos:start="1361:15" pos:end="1361:16">rv</name> <operator pos:start="1361:18" pos:end="1361:19">==</operator> <literal type="number" pos:start="1361:21" pos:end="1361:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

    <comment type="block" pos:start="1363:5" pos:end="1365:7">/*
     * Create a client context using the default CA certs
     */</comment>
    <expr_stmt pos:start="1366:5" pos:end="1368:54"><expr pos:start="1366:5" pos:end="1368:53"><name pos:start="1366:5" pos:end="1366:8">ectx</name> <operator pos:start="1366:10" pos:end="1366:10">=</operator> <call pos:start="1366:12" pos:end="1368:53"><name pos:start="1366:12" pos:end="1366:26">est_client_init</name><argument_list pos:start="1366:27" pos:end="1368:53">(<argument pos:start="1366:28" pos:end="1366:34"><expr pos:start="1366:28" pos:end="1366:34"><name pos:start="1366:28" pos:end="1366:34">cacerts</name></expr></argument>, <argument pos:start="1366:37" pos:end="1366:47"><expr pos:start="1366:37" pos:end="1366:47"><name pos:start="1366:37" pos:end="1366:47">cacerts_len</name></expr></argument>, 
                           <argument pos:start="1367:28" pos:end="1367:46"><expr pos:start="1367:28" pos:end="1367:46"><name pos:start="1367:28" pos:end="1367:46">EST_CERT_FORMAT_PEM</name></expr></argument>, 
                           <argument pos:start="1368:28" pos:end="1368:52"><expr pos:start="1368:28" pos:end="1368:52"><name pos:start="1368:28" pos:end="1368:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1369:5" pos:end="1369:28"><expr pos:start="1369:5" pos:end="1369:27"><call pos:start="1369:5" pos:end="1369:27"><name pos:start="1369:5" pos:end="1369:13">CU_ASSERT</name><argument_list pos:start="1369:14" pos:end="1369:27">(<argument pos:start="1369:15" pos:end="1369:26"><expr pos:start="1369:15" pos:end="1369:26"><name pos:start="1369:15" pos:end="1369:18">ectx</name> <operator pos:start="1369:20" pos:end="1369:21">!=</operator> <name pos:start="1369:23" pos:end="1369:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1371:5" pos:end="1373:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="1374:5" pos:end="1374:69"><expr pos:start="1374:5" pos:end="1374:68"><name pos:start="1374:5" pos:end="1374:6">rv</name> <operator pos:start="1374:8" pos:end="1374:8">=</operator> <call pos:start="1374:10" pos:end="1374:68"><name pos:start="1374:10" pos:end="1374:28">est_client_set_auth</name><argument_list pos:start="1374:29" pos:end="1374:68">(<argument pos:start="1374:30" pos:end="1374:33"><expr pos:start="1374:30" pos:end="1374:33"><name pos:start="1374:30" pos:end="1374:33">ectx</name></expr></argument>, <argument pos:start="1374:36" pos:end="1374:44"><expr pos:start="1374:36" pos:end="1374:44"><name pos:start="1374:36" pos:end="1374:44">US899_UID</name></expr></argument>, <argument pos:start="1374:47" pos:end="1374:55"><expr pos:start="1374:47" pos:end="1374:55"><name pos:start="1374:47" pos:end="1374:55">US899_PWD</name></expr></argument>, <argument pos:start="1374:58" pos:end="1374:61"><expr pos:start="1374:58" pos:end="1374:61"><name pos:start="1374:58" pos:end="1374:61">NULL</name></expr></argument>, <argument pos:start="1374:64" pos:end="1374:67"><expr pos:start="1374:64" pos:end="1374:67"><name pos:start="1374:64" pos:end="1374:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1375:5" pos:end="1375:34"><expr pos:start="1375:5" pos:end="1375:33"><call pos:start="1375:5" pos:end="1375:33"><name pos:start="1375:5" pos:end="1375:13">CU_ASSERT</name><argument_list pos:start="1375:14" pos:end="1375:33">(<argument pos:start="1375:15" pos:end="1375:32"><expr pos:start="1375:15" pos:end="1375:32"><name pos:start="1375:15" pos:end="1375:16">rv</name> <operator pos:start="1375:18" pos:end="1375:19">==</operator> <name pos:start="1375:21" pos:end="1375:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1377:5" pos:end="1379:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="1380:5" pos:end="1380:74"><expr pos:start="1380:5" pos:end="1380:73"><call pos:start="1380:5" pos:end="1380:73"><name pos:start="1380:5" pos:end="1380:25">est_client_set_server</name><argument_list pos:start="1380:26" pos:end="1380:73">(<argument pos:start="1380:27" pos:end="1380:30"><expr pos:start="1380:27" pos:end="1380:30"><name pos:start="1380:27" pos:end="1380:30">ectx</name></expr></argument>, <argument pos:start="1380:33" pos:end="1380:47"><expr pos:start="1380:33" pos:end="1380:47"><name pos:start="1380:33" pos:end="1380:47">US899_SERVER_IP</name></expr></argument>, <argument pos:start="1380:50" pos:end="1380:66"><expr pos:start="1380:50" pos:end="1380:66"><name pos:start="1380:50" pos:end="1380:66">US899_SERVER_PORT</name></expr></argument>, <argument pos:start="1380:69" pos:end="1380:72"><expr pos:start="1380:69" pos:end="1380:72"><name pos:start="1380:69" pos:end="1380:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1382:5" pos:end="1384:7">/*
     * generate a private key
     */</comment>
    <expr_stmt pos:start="1385:5" pos:end="1385:33"><expr pos:start="1385:5" pos:end="1385:32"><name pos:start="1385:5" pos:end="1385:7">key</name> <operator pos:start="1385:9" pos:end="1385:9">=</operator> <call pos:start="1385:11" pos:end="1385:32"><name pos:start="1385:11" pos:end="1385:30">generate_private_key</name><argument_list pos:start="1385:31" pos:end="1385:32">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1386:5" pos:end="1386:27"><expr pos:start="1386:5" pos:end="1386:26"><call pos:start="1386:5" pos:end="1386:26"><name pos:start="1386:5" pos:end="1386:13">CU_ASSERT</name><argument_list pos:start="1386:14" pos:end="1386:26">(<argument pos:start="1386:15" pos:end="1386:25"><expr pos:start="1386:15" pos:end="1386:25"><name pos:start="1386:15" pos:end="1386:17">key</name> <operator pos:start="1386:19" pos:end="1386:20">!=</operator> <name pos:start="1386:22" pos:end="1386:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1388:5" pos:end="1390:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="1391:5" pos:end="1391:62"><expr pos:start="1391:5" pos:end="1391:61"><name pos:start="1391:5" pos:end="1391:6">rv</name> <operator pos:start="1391:8" pos:end="1391:8">=</operator> <call pos:start="1391:10" pos:end="1391:61"><name pos:start="1391:10" pos:end="1391:32">est_client_get_csrattrs</name><argument_list pos:start="1391:33" pos:end="1391:61">(<argument pos:start="1391:34" pos:end="1391:37"><expr pos:start="1391:34" pos:end="1391:37"><name pos:start="1391:34" pos:end="1391:37">ectx</name></expr></argument>, <argument pos:start="1391:40" pos:end="1391:49"><expr pos:start="1391:40" pos:end="1391:49"><operator pos:start="1391:40" pos:end="1391:40">&amp;</operator><name pos:start="1391:41" pos:end="1391:49">attr_data</name></expr></argument>, <argument pos:start="1391:52" pos:end="1391:60"><expr pos:start="1391:52" pos:end="1391:60"><operator pos:start="1391:52" pos:end="1391:52">&amp;</operator><name pos:start="1391:53" pos:end="1391:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1392:5" pos:end="1392:34"><expr pos:start="1392:5" pos:end="1392:33"><call pos:start="1392:5" pos:end="1392:33"><name pos:start="1392:5" pos:end="1392:13">CU_ASSERT</name><argument_list pos:start="1392:14" pos:end="1392:33">(<argument pos:start="1392:15" pos:end="1392:32"><expr pos:start="1392:15" pos:end="1392:32"><name pos:start="1392:15" pos:end="1392:16">rv</name> <operator pos:start="1392:18" pos:end="1392:19">==</operator> <name pos:start="1392:21" pos:end="1392:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1394:5" pos:end="1396:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="1397:5" pos:end="1397:63"><expr pos:start="1397:5" pos:end="1397:62"><name pos:start="1397:5" pos:end="1397:6">rv</name> <operator pos:start="1397:8" pos:end="1397:8">=</operator> <call pos:start="1397:10" pos:end="1397:62"><name pos:start="1397:10" pos:end="1397:26">est_client_enroll</name><argument_list pos:start="1397:27" pos:end="1397:62">(<argument pos:start="1397:28" pos:end="1397:31"><expr pos:start="1397:28" pos:end="1397:31"><name pos:start="1397:28" pos:end="1397:31">ectx</name></expr></argument>, <argument pos:start="1397:34" pos:end="1397:44"><expr pos:start="1397:34" pos:end="1397:44"><literal type="string" pos:start="1397:34" pos:end="1397:44">"TEST18-CN"</literal></expr></argument>, <argument pos:start="1397:47" pos:end="1397:56"><expr pos:start="1397:47" pos:end="1397:56"><operator pos:start="1397:47" pos:end="1397:47">&amp;</operator><name pos:start="1397:48" pos:end="1397:56">pkcs7_len</name></expr></argument>, <argument pos:start="1397:59" pos:end="1397:61"><expr pos:start="1397:59" pos:end="1397:61"><name pos:start="1397:59" pos:end="1397:61">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1398:5" pos:end="1398:45"><expr pos:start="1398:5" pos:end="1398:44"><call pos:start="1398:5" pos:end="1398:44"><name pos:start="1398:5" pos:end="1398:13">CU_ASSERT</name><argument_list pos:start="1398:14" pos:end="1398:44">(<argument pos:start="1398:15" pos:end="1398:43"><expr pos:start="1398:15" pos:end="1398:43"><name pos:start="1398:15" pos:end="1398:16">rv</name> <operator pos:start="1398:18" pos:end="1398:19">==</operator> <name pos:start="1398:21" pos:end="1398:43">EST_ERR_CA_ENROLL_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1400:5" pos:end="1408:5"><if pos:start="1400:5" pos:end="1408:5">if <condition pos:start="1400:8" pos:end="1400:38">(<expr pos:start="1400:9" pos:end="1400:37"><name pos:start="1400:9" pos:end="1400:10">rv</name> <operator pos:start="1400:12" pos:end="1400:13">==</operator> <name pos:start="1400:15" pos:end="1400:37">EST_ERR_CA_ENROLL_RETRY</name></expr>)</condition> <block pos:start="1400:40" pos:end="1408:5">{<block_content pos:start="1405:9" pos:end="1407:38">
        <comment type="block" pos:start="1401:9" pos:end="1404:11">/*
         * go get the retry duration
         * make sure it's set to the default value
         */</comment>
        <expr_stmt pos:start="1405:9" pos:end="1405:73"><expr pos:start="1405:9" pos:end="1405:72"><name pos:start="1405:9" pos:end="1405:10">rv</name> <operator pos:start="1405:12" pos:end="1405:12">=</operator> <call pos:start="1405:14" pos:end="1405:72"><name pos:start="1405:14" pos:end="1405:40">est_client_copy_retry_after</name><argument_list pos:start="1405:41" pos:end="1405:72">(<argument pos:start="1405:42" pos:end="1405:45"><expr pos:start="1405:42" pos:end="1405:45"><name pos:start="1405:42" pos:end="1405:45">ectx</name></expr></argument>, <argument pos:start="1405:48" pos:end="1405:58"><expr pos:start="1405:48" pos:end="1405:58"><operator pos:start="1405:48" pos:end="1405:48">&amp;</operator><name pos:start="1405:49" pos:end="1405:58">delay_secs</name></expr></argument>, <argument pos:start="1405:61" pos:end="1405:71"><expr pos:start="1405:61" pos:end="1405:71"><operator pos:start="1405:61" pos:end="1405:61">&amp;</operator><name pos:start="1405:62" pos:end="1405:71">retry_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1406:9" pos:end="1406:38"><expr pos:start="1406:9" pos:end="1406:37"><call pos:start="1406:9" pos:end="1406:37"><name pos:start="1406:9" pos:end="1406:17">CU_ASSERT</name><argument_list pos:start="1406:18" pos:end="1406:37">(<argument pos:start="1406:19" pos:end="1406:36"><expr pos:start="1406:19" pos:end="1406:36"><name pos:start="1406:19" pos:end="1406:20">rv</name> <operator pos:start="1406:22" pos:end="1406:23">==</operator> <name pos:start="1406:25" pos:end="1406:36">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1407:9" pos:end="1407:38"><expr pos:start="1407:9" pos:end="1407:37"><call pos:start="1407:9" pos:end="1407:37"><name pos:start="1407:9" pos:end="1407:17">CU_ASSERT</name><argument_list pos:start="1407:18" pos:end="1407:37">(<argument pos:start="1407:19" pos:end="1407:36"><expr pos:start="1407:19" pos:end="1407:36"><name pos:start="1407:19" pos:end="1407:28">delay_secs</name> <operator pos:start="1407:30" pos:end="1407:31">==</operator> <literal type="number" pos:start="1407:33" pos:end="1407:36">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="1410:5" pos:end="1412:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="1413:5" pos:end="1413:23"><expr pos:start="1413:5" pos:end="1413:22"><call pos:start="1413:5" pos:end="1413:22"><name pos:start="1413:5" pos:end="1413:17">EVP_PKEY_free</name><argument_list pos:start="1413:18" pos:end="1413:22">(<argument pos:start="1413:19" pos:end="1413:21"><expr pos:start="1413:19" pos:end="1413:21"><name pos:start="1413:19" pos:end="1413:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1414:5" pos:end="1414:22"><expr pos:start="1414:5" pos:end="1414:21"><call pos:start="1414:5" pos:end="1414:21"><name pos:start="1414:5" pos:end="1414:15">est_destroy</name><argument_list pos:start="1414:16" pos:end="1414:21">(<argument pos:start="1414:17" pos:end="1414:20"><expr pos:start="1414:17" pos:end="1414:20"><name pos:start="1414:17" pos:end="1414:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" pos:start="1417:1" pos:end="1417:7">//TO DO</comment>
<comment type="line" pos:start="1418:1" pos:end="1418:2">//</comment>
<comment type="line" pos:start="1419:1" pos:end="1419:43">//Auth (HTTP basic auth enabled on server) </comment>
<comment type="line" pos:start="1420:1" pos:end="1420:40">//A. Enroll CSR using valid cert, no UID</comment>
<comment type="line" pos:start="1421:1" pos:end="1421:43">//B. Enroll CSR using valid cert, valid UID</comment>
<comment type="line" pos:start="1422:1" pos:end="1422:45">//C. Enroll CSR using valid cert, invalid UID</comment>
<comment type="line" pos:start="1423:1" pos:end="1423:42">//D. Enroll CSR using invalid cert, no UID</comment>
<comment type="line" pos:start="1424:1" pos:end="1424:45">//E. Enroll CSR using invalid cert, valid UID</comment>
<comment type="line" pos:start="1425:1" pos:end="1425:47">//F. Enroll CSR using invalid cert, invalid UID</comment>
<comment type="line" pos:start="1426:1" pos:end="1426:2">//</comment>
<comment type="line" pos:start="1427:1" pos:end="1427:44">//Auth (HTTP digest auth enabled on server) </comment>
<comment type="line" pos:start="1428:1" pos:end="1428:40">//A. Enroll CSR using valid cert, no UID</comment>
<comment type="line" pos:start="1429:1" pos:end="1429:43">//B. Enroll CSR using valid cert, valid UID</comment>
<comment type="line" pos:start="1430:1" pos:end="1430:45">//C. Enroll CSR using valid cert, invalid UID</comment>
<comment type="line" pos:start="1431:1" pos:end="1431:42">//D. Enroll CSR using invalid cert, no UID</comment>
<comment type="line" pos:start="1432:1" pos:end="1432:45">//E. Enroll CSR using invalid cert, valid UID</comment>
<comment type="line" pos:start="1433:1" pos:end="1433:47">//F. Enroll CSR using invalid cert, invalid UID</comment>
<comment type="line" pos:start="1434:1" pos:end="1434:2">//</comment>

<function pos:start="1436:1" pos:end="1486:1"><type pos:start="1436:1" pos:end="1436:3"><name pos:start="1436:1" pos:end="1436:3">int</name></type> <name pos:start="1436:5" pos:end="1436:19">us899_add_suite</name> <parameter_list pos:start="1436:21" pos:end="1436:26">(<parameter pos:start="1436:22" pos:end="1436:25"><decl pos:start="1436:22" pos:end="1436:25"><type pos:start="1436:22" pos:end="1436:25"><name pos:start="1436:22" pos:end="1436:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1437:1" pos:end="1486:1">{<block_content pos:start="1439:4" pos:end="1486:0">
<cpp:ifdef pos:start="1438:1" pos:end="1438:17">#<cpp:directive pos:start="1438:2" pos:end="1438:6">ifdef</cpp:directive> <name pos:start="1438:8" pos:end="1438:17">HAVE_CUNIT</name></cpp:ifdef>
   <decl_stmt pos:start="1439:4" pos:end="1439:27"><decl pos:start="1439:4" pos:end="1439:26"><type pos:start="1439:4" pos:end="1439:12"><name pos:start="1439:4" pos:end="1439:12">CU_pSuite</name></type> <name pos:start="1439:14" pos:end="1439:19">pSuite</name> <init pos:start="1439:21" pos:end="1439:26">= <expr pos:start="1439:23" pos:end="1439:26"><name pos:start="1439:23" pos:end="1439:26">NULL</name></expr></init></decl>;</decl_stmt>

   <comment type="block" pos:start="1441:4" pos:end="1441:36">/* add a suite to the registry */</comment>
   <expr_stmt pos:start="1442:4" pos:end="1444:47"><expr pos:start="1442:4" pos:end="1444:46"><name pos:start="1442:4" pos:end="1442:9">pSuite</name> <operator pos:start="1442:11" pos:end="1442:11">=</operator> <call pos:start="1442:13" pos:end="1444:46"><name pos:start="1442:13" pos:end="1442:24">CU_add_suite</name><argument_list pos:start="1442:25" pos:end="1444:46">(<argument pos:start="1442:26" pos:end="1442:50"><expr pos:start="1442:26" pos:end="1442:50"><literal type="string" pos:start="1442:26" pos:end="1442:50">"us899_client_simpenroll"</literal></expr></argument>, 
	                  <argument pos:start="1443:27" pos:end="1443:42"><expr pos:start="1443:27" pos:end="1443:42"><name pos:start="1443:27" pos:end="1443:42">us899_init_suite</name></expr></argument>, 
			  <argument pos:start="1444:27" pos:end="1444:45"><expr pos:start="1444:27" pos:end="1444:45"><name pos:start="1444:27" pos:end="1444:45">us899_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt pos:start="1445:4" pos:end="1448:4"><if pos:start="1445:4" pos:end="1448:4">if <condition pos:start="1445:7" pos:end="1445:22">(<expr pos:start="1445:8" pos:end="1445:21"><name pos:start="1445:8" pos:end="1445:11">NULL</name> <operator pos:start="1445:13" pos:end="1445:14">==</operator> <name pos:start="1445:16" pos:end="1445:21">pSuite</name></expr>)</condition> <block pos:start="1445:24" pos:end="1448:4">{<block_content pos:start="1446:7" pos:end="1447:28">
      <expr_stmt pos:start="1446:7" pos:end="1446:28"><expr pos:start="1446:7" pos:end="1446:27"><call pos:start="1446:7" pos:end="1446:27"><name pos:start="1446:7" pos:end="1446:25">CU_cleanup_registry</name><argument_list pos:start="1446:26" pos:end="1446:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1447:7" pos:end="1447:28">return <expr pos:start="1447:14" pos:end="1447:27"><call pos:start="1447:14" pos:end="1447:27"><name pos:start="1447:14" pos:end="1447:25">CU_get_error</name><argument_list pos:start="1447:26" pos:end="1447:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <comment type="block" pos:start="1450:4" pos:end="1460:6">/* 
    * Add the tests to the suite 
    *
    * ********************IMPORTANT*********************
    * Do not change the order of these tests.
    * Some of the tests stop the EST server and restart
    * it using different certs.  If you change the order
    * then false negatives may occur.
    * **************************************************
    *
    */</comment>
   <if_stmt pos:start="1461:4" pos:end="1482:4"><if pos:start="1461:4" pos:end="1482:4">if <condition pos:start="1461:7" pos:end="1478:91">(<expr pos:start="1461:8" pos:end="1478:90"><operator pos:start="1461:8" pos:end="1461:8">(</operator><name pos:start="1461:9" pos:end="1461:12">NULL</name> <operator pos:start="1461:14" pos:end="1461:15">==</operator> <call pos:start="1461:17" pos:end="1461:65"><name pos:start="1461:17" pos:end="1461:27">CU_add_test</name><argument_list pos:start="1461:28" pos:end="1461:65">(<argument pos:start="1461:29" pos:end="1461:34"><expr pos:start="1461:29" pos:end="1461:34"><name pos:start="1461:29" pos:end="1461:34">pSuite</name></expr></argument>, <argument pos:start="1461:37" pos:end="1461:51"><expr pos:start="1461:37" pos:end="1461:51"><literal type="string" pos:start="1461:37" pos:end="1461:51">"Simple enroll"</literal></expr></argument>, <argument pos:start="1461:54" pos:end="1461:64"><expr pos:start="1461:54" pos:end="1461:64"><name pos:start="1461:54" pos:end="1461:64">us899_test1</name></expr></argument>)</argument_list></call><operator pos:start="1461:66" pos:end="1461:66">)</operator> <operator pos:start="1461:68" pos:end="1461:69">||</operator>
       <operator pos:start="1462:8" pos:end="1462:8">(</operator><name pos:start="1462:9" pos:end="1462:12">NULL</name> <operator pos:start="1462:14" pos:end="1462:15">==</operator> <call pos:start="1462:17" pos:end="1462:69"><name pos:start="1462:17" pos:end="1462:27">CU_add_test</name><argument_list pos:start="1462:28" pos:end="1462:69">(<argument pos:start="1462:29" pos:end="1462:34"><expr pos:start="1462:29" pos:end="1462:34"><name pos:start="1462:29" pos:end="1462:34">pSuite</name></expr></argument>, <argument pos:start="1462:37" pos:end="1462:55"><expr pos:start="1462:37" pos:end="1462:55"><literal type="string" pos:start="1462:37" pos:end="1462:55">"Simple enroll CSR"</literal></expr></argument>, <argument pos:start="1462:58" pos:end="1462:68"><expr pos:start="1462:58" pos:end="1462:68"><name pos:start="1462:58" pos:end="1462:68">us899_test2</name></expr></argument>)</argument_list></call><operator pos:start="1462:70" pos:end="1462:70">)</operator> <operator pos:start="1462:72" pos:end="1462:73">||</operator>
       <operator pos:start="1463:8" pos:end="1463:8">(</operator><name pos:start="1463:9" pos:end="1463:12">NULL</name> <operator pos:start="1463:14" pos:end="1463:15">==</operator> <call pos:start="1463:17" pos:end="1463:74"><name pos:start="1463:17" pos:end="1463:27">CU_add_test</name><argument_list pos:start="1463:28" pos:end="1463:74">(<argument pos:start="1463:29" pos:end="1463:34"><expr pos:start="1463:29" pos:end="1463:34"><name pos:start="1463:29" pos:end="1463:34">pSuite</name></expr></argument>, <argument pos:start="1463:37" pos:end="1463:60"><expr pos:start="1463:37" pos:end="1463:60"><literal type="string" pos:start="1463:37" pos:end="1463:60">"Simple enroll null CSR"</literal></expr></argument>, <argument pos:start="1463:63" pos:end="1463:73"><expr pos:start="1463:63" pos:end="1463:73"><name pos:start="1463:63" pos:end="1463:73">us899_test3</name></expr></argument>)</argument_list></call><operator pos:start="1463:75" pos:end="1463:75">)</operator> <operator pos:start="1463:77" pos:end="1463:78">||</operator>
       <operator pos:start="1464:8" pos:end="1464:8">(</operator><name pos:start="1464:9" pos:end="1464:12">NULL</name> <operator pos:start="1464:14" pos:end="1464:15">==</operator> <call pos:start="1464:17" pos:end="1464:79"><name pos:start="1464:17" pos:end="1464:27">CU_add_test</name><argument_list pos:start="1464:28" pos:end="1464:79">(<argument pos:start="1464:29" pos:end="1464:34"><expr pos:start="1464:29" pos:end="1464:34"><name pos:start="1464:29" pos:end="1464:34">pSuite</name></expr></argument>, <argument pos:start="1464:37" pos:end="1464:65"><expr pos:start="1464:37" pos:end="1464:65"><literal type="string" pos:start="1464:37" pos:end="1464:65">"Simple enroll corrupted CSR"</literal></expr></argument>, <argument pos:start="1464:68" pos:end="1464:78"><expr pos:start="1464:68" pos:end="1464:78"><name pos:start="1464:68" pos:end="1464:78">us899_test4</name></expr></argument>)</argument_list></call><operator pos:start="1464:80" pos:end="1464:80">)</operator> <operator pos:start="1464:82" pos:end="1464:83">||</operator>
       <operator pos:start="1465:8" pos:end="1465:8">(</operator><name pos:start="1465:9" pos:end="1465:12">NULL</name> <operator pos:start="1465:14" pos:end="1465:15">==</operator> <call pos:start="1465:17" pos:end="1465:76"><name pos:start="1465:17" pos:end="1465:27">CU_add_test</name><argument_list pos:start="1465:28" pos:end="1465:76">(<argument pos:start="1465:29" pos:end="1465:34"><expr pos:start="1465:29" pos:end="1465:34"><name pos:start="1465:29" pos:end="1465:34">pSuite</name></expr></argument>, <argument pos:start="1465:37" pos:end="1465:62"><expr pos:start="1465:37" pos:end="1465:62"><literal type="string" pos:start="1465:37" pos:end="1465:62">"Simple enroll signed CSR"</literal></expr></argument>, <argument pos:start="1465:65" pos:end="1465:75"><expr pos:start="1465:65" pos:end="1465:75"><name pos:start="1465:65" pos:end="1465:75">us899_test5</name></expr></argument>)</argument_list></call><operator pos:start="1465:77" pos:end="1465:77">)</operator> <operator pos:start="1465:79" pos:end="1465:80">||</operator>
       <operator pos:start="1466:8" pos:end="1466:8">(</operator><name pos:start="1466:9" pos:end="1466:12">NULL</name> <operator pos:start="1466:14" pos:end="1466:15">==</operator> <call pos:start="1466:17" pos:end="1466:93"><name pos:start="1466:17" pos:end="1466:27">CU_add_test</name><argument_list pos:start="1466:28" pos:end="1466:93">(<argument pos:start="1466:29" pos:end="1466:34"><expr pos:start="1466:29" pos:end="1466:34"><name pos:start="1466:29" pos:end="1466:34">pSuite</name></expr></argument>, <argument pos:start="1466:37" pos:end="1466:79"><expr pos:start="1466:37" pos:end="1466:79"><literal type="string" pos:start="1466:37" pos:end="1466:79">"Simple enroll - hostname mismatch FQDN CN"</literal></expr></argument>, <argument pos:start="1466:82" pos:end="1466:92"><expr pos:start="1466:82" pos:end="1466:92"><name pos:start="1466:82" pos:end="1466:92">us899_test6</name></expr></argument>)</argument_list></call><operator pos:start="1466:94" pos:end="1466:94">)</operator> <operator pos:start="1466:96" pos:end="1466:97">||</operator>
       <operator pos:start="1467:8" pos:end="1467:8">(</operator><name pos:start="1467:9" pos:end="1467:12">NULL</name> <operator pos:start="1467:14" pos:end="1467:15">==</operator> <call pos:start="1467:17" pos:end="1467:89"><name pos:start="1467:17" pos:end="1467:27">CU_add_test</name><argument_list pos:start="1467:28" pos:end="1467:89">(<argument pos:start="1467:29" pos:end="1467:34"><expr pos:start="1467:29" pos:end="1467:34"><name pos:start="1467:29" pos:end="1467:34">pSuite</name></expr></argument>, <argument pos:start="1467:37" pos:end="1467:75"><expr pos:start="1467:37" pos:end="1467:75"><literal type="string" pos:start="1467:37" pos:end="1467:75">"Simple enroll - IPv4 mismatch FQDN CN"</literal></expr></argument>, <argument pos:start="1467:78" pos:end="1467:88"><expr pos:start="1467:78" pos:end="1467:88"><name pos:start="1467:78" pos:end="1467:88">us899_test7</name></expr></argument>)</argument_list></call><operator pos:start="1467:90" pos:end="1467:90">)</operator> <operator pos:start="1467:92" pos:end="1467:93">||</operator>
       <operator pos:start="1468:8" pos:end="1468:8">(</operator><name pos:start="1468:9" pos:end="1468:12">NULL</name> <operator pos:start="1468:14" pos:end="1468:15">==</operator> <call pos:start="1468:17" pos:end="1468:90"><name pos:start="1468:17" pos:end="1468:27">CU_add_test</name><argument_list pos:start="1468:28" pos:end="1468:90">(<argument pos:start="1468:29" pos:end="1468:34"><expr pos:start="1468:29" pos:end="1468:34"><name pos:start="1468:29" pos:end="1468:34">pSuite</name></expr></argument>, <argument pos:start="1468:37" pos:end="1468:76"><expr pos:start="1468:37" pos:end="1468:76"><literal type="string" pos:start="1468:37" pos:end="1468:76">"Simple enroll - wildcard match FQDN CN"</literal></expr></argument>, <argument pos:start="1468:79" pos:end="1468:89"><expr pos:start="1468:79" pos:end="1468:89"><name pos:start="1468:79" pos:end="1468:89">us899_test8</name></expr></argument>)</argument_list></call><operator pos:start="1468:91" pos:end="1468:91">)</operator> <operator pos:start="1468:93" pos:end="1468:94">||</operator>
       <operator pos:start="1469:8" pos:end="1469:8">(</operator><name pos:start="1469:9" pos:end="1469:12">NULL</name> <operator pos:start="1469:14" pos:end="1469:15">==</operator> <call pos:start="1469:17" pos:end="1469:93"><name pos:start="1469:17" pos:end="1469:27">CU_add_test</name><argument_list pos:start="1469:28" pos:end="1469:93">(<argument pos:start="1469:29" pos:end="1469:34"><expr pos:start="1469:29" pos:end="1469:34"><name pos:start="1469:29" pos:end="1469:34">pSuite</name></expr></argument>, <argument pos:start="1469:37" pos:end="1469:79"><expr pos:start="1469:37" pos:end="1469:79"><literal type="string" pos:start="1469:37" pos:end="1469:79">"Simple enroll - wildcard mismatch FQDN CN"</literal></expr></argument>, <argument pos:start="1469:82" pos:end="1469:92"><expr pos:start="1469:82" pos:end="1469:92"><name pos:start="1469:82" pos:end="1469:92">us899_test9</name></expr></argument>)</argument_list></call><operator pos:start="1469:94" pos:end="1469:94">)</operator> <operator pos:start="1469:96" pos:end="1469:97">||</operator>
       <operator pos:start="1470:8" pos:end="1470:8">(</operator><name pos:start="1470:9" pos:end="1470:12">NULL</name> <operator pos:start="1470:14" pos:end="1470:15">==</operator> <call pos:start="1470:17" pos:end="1470:92"><name pos:start="1470:17" pos:end="1470:27">CU_add_test</name><argument_list pos:start="1470:28" pos:end="1470:92">(<argument pos:start="1470:29" pos:end="1470:34"><expr pos:start="1470:29" pos:end="1470:34"><name pos:start="1470:29" pos:end="1470:34">pSuite</name></expr></argument>, <argument pos:start="1470:37" pos:end="1470:77"><expr pos:start="1470:37" pos:end="1470:77"><literal type="string" pos:start="1470:37" pos:end="1470:77">"Simple enroll - hostname match FQDN SAN"</literal></expr></argument>, <argument pos:start="1470:80" pos:end="1470:91"><expr pos:start="1470:80" pos:end="1470:91"><name pos:start="1470:80" pos:end="1470:91">us899_test10</name></expr></argument>)</argument_list></call><operator pos:start="1470:93" pos:end="1470:93">)</operator> <operator pos:start="1470:95" pos:end="1470:96">||</operator>
       <operator pos:start="1471:8" pos:end="1471:8">(</operator><name pos:start="1471:9" pos:end="1471:12">NULL</name> <operator pos:start="1471:14" pos:end="1471:15">==</operator> <call pos:start="1471:17" pos:end="1471:95"><name pos:start="1471:17" pos:end="1471:27">CU_add_test</name><argument_list pos:start="1471:28" pos:end="1471:95">(<argument pos:start="1471:29" pos:end="1471:34"><expr pos:start="1471:29" pos:end="1471:34"><name pos:start="1471:29" pos:end="1471:34">pSuite</name></expr></argument>, <argument pos:start="1471:37" pos:end="1471:80"><expr pos:start="1471:37" pos:end="1471:80"><literal type="string" pos:start="1471:37" pos:end="1471:80">"Simple enroll - hostname mismatch FQDN SAN"</literal></expr></argument>, <argument pos:start="1471:83" pos:end="1471:94"><expr pos:start="1471:83" pos:end="1471:94"><name pos:start="1471:83" pos:end="1471:94">us899_test11</name></expr></argument>)</argument_list></call><operator pos:start="1471:96" pos:end="1471:96">)</operator> <operator pos:start="1471:98" pos:end="1471:99">||</operator>
       <operator pos:start="1472:8" pos:end="1472:8">(</operator><name pos:start="1472:9" pos:end="1472:12">NULL</name> <operator pos:start="1472:14" pos:end="1472:15">==</operator> <call pos:start="1472:17" pos:end="1472:91"><name pos:start="1472:17" pos:end="1472:27">CU_add_test</name><argument_list pos:start="1472:28" pos:end="1472:91">(<argument pos:start="1472:29" pos:end="1472:34"><expr pos:start="1472:29" pos:end="1472:34"><name pos:start="1472:29" pos:end="1472:34">pSuite</name></expr></argument>, <argument pos:start="1472:37" pos:end="1472:76"><expr pos:start="1472:37" pos:end="1472:76"><literal type="string" pos:start="1472:37" pos:end="1472:76">"Simple enroll - IPv4 mismatch FQDN SAN"</literal></expr></argument>, <argument pos:start="1472:79" pos:end="1472:90"><expr pos:start="1472:79" pos:end="1472:90"><name pos:start="1472:79" pos:end="1472:90">us899_test12</name></expr></argument>)</argument_list></call><operator pos:start="1472:92" pos:end="1472:92">)</operator> <operator pos:start="1472:94" pos:end="1472:95">||</operator>
       <operator pos:start="1473:8" pos:end="1473:8">(</operator><name pos:start="1473:9" pos:end="1473:12">NULL</name> <operator pos:start="1473:14" pos:end="1473:15">==</operator> <call pos:start="1473:17" pos:end="1473:88"><name pos:start="1473:17" pos:end="1473:27">CU_add_test</name><argument_list pos:start="1473:28" pos:end="1473:88">(<argument pos:start="1473:29" pos:end="1473:34"><expr pos:start="1473:29" pos:end="1473:34"><name pos:start="1473:29" pos:end="1473:34">pSuite</name></expr></argument>, <argument pos:start="1473:37" pos:end="1473:73"><expr pos:start="1473:37" pos:end="1473:73"><literal type="string" pos:start="1473:37" pos:end="1473:73">"Simple enroll - IPv4 match FQDN SAN"</literal></expr></argument>, <argument pos:start="1473:76" pos:end="1473:87"><expr pos:start="1473:76" pos:end="1473:87"><name pos:start="1473:76" pos:end="1473:87">us899_test13</name></expr></argument>)</argument_list></call><operator pos:start="1473:89" pos:end="1473:89">)</operator> <operator pos:start="1473:91" pos:end="1473:92">||</operator>
       <operator pos:start="1474:8" pos:end="1474:8">(</operator><name pos:start="1474:9" pos:end="1474:12">NULL</name> <operator pos:start="1474:14" pos:end="1474:15">==</operator> <call pos:start="1474:17" pos:end="1474:92"><name pos:start="1474:17" pos:end="1474:27">CU_add_test</name><argument_list pos:start="1474:28" pos:end="1474:92">(<argument pos:start="1474:29" pos:end="1474:34"><expr pos:start="1474:29" pos:end="1474:34"><name pos:start="1474:29" pos:end="1474:34">pSuite</name></expr></argument>, <argument pos:start="1474:37" pos:end="1474:77"><expr pos:start="1474:37" pos:end="1474:77"><literal type="string" pos:start="1474:37" pos:end="1474:77">"Simple enroll - wildcard match FQDN SAN"</literal></expr></argument>, <argument pos:start="1474:80" pos:end="1474:91"><expr pos:start="1474:80" pos:end="1474:91"><name pos:start="1474:80" pos:end="1474:91">us899_test14</name></expr></argument>)</argument_list></call><operator pos:start="1474:93" pos:end="1474:93">)</operator> <operator pos:start="1474:95" pos:end="1474:96">||</operator>
       <operator pos:start="1475:8" pos:end="1475:8">(</operator><name pos:start="1475:9" pos:end="1475:12">NULL</name> <operator pos:start="1475:14" pos:end="1475:15">==</operator> <call pos:start="1475:17" pos:end="1475:95"><name pos:start="1475:17" pos:end="1475:27">CU_add_test</name><argument_list pos:start="1475:28" pos:end="1475:95">(<argument pos:start="1475:29" pos:end="1475:34"><expr pos:start="1475:29" pos:end="1475:34"><name pos:start="1475:29" pos:end="1475:34">pSuite</name></expr></argument>, <argument pos:start="1475:37" pos:end="1475:80"><expr pos:start="1475:37" pos:end="1475:80"><literal type="string" pos:start="1475:37" pos:end="1475:80">"Simple enroll - wildcard mismatch FQDN SAN"</literal></expr></argument>, <argument pos:start="1475:83" pos:end="1475:94"><expr pos:start="1475:83" pos:end="1475:94"><name pos:start="1475:83" pos:end="1475:94">us899_test15</name></expr></argument>)</argument_list></call><operator pos:start="1475:96" pos:end="1475:96">)</operator> <operator pos:start="1475:98" pos:end="1475:99">||</operator>
       <operator pos:start="1476:8" pos:end="1476:8">(</operator><name pos:start="1476:9" pos:end="1476:12">NULL</name> <operator pos:start="1476:14" pos:end="1476:15">==</operator> <call pos:start="1476:17" pos:end="1476:99"><name pos:start="1476:17" pos:end="1476:27">CU_add_test</name><argument_list pos:start="1476:28" pos:end="1476:99">(<argument pos:start="1476:29" pos:end="1476:34"><expr pos:start="1476:29" pos:end="1476:34"><name pos:start="1476:29" pos:end="1476:34">pSuite</name></expr></argument>, <argument pos:start="1476:37" pos:end="1476:84"><expr pos:start="1476:37" pos:end="1476:84"><literal type="string" pos:start="1476:37" pos:end="1476:84">"Simple enroll - CRL enabled, valid server cert"</literal></expr></argument>, <argument pos:start="1476:87" pos:end="1476:98"><expr pos:start="1476:87" pos:end="1476:98"><name pos:start="1476:87" pos:end="1476:98">us899_test16</name></expr></argument>)</argument_list></call><operator pos:start="1476:100" pos:end="1476:100">)</operator> <operator pos:start="1476:102" pos:end="1476:103">||</operator>
       <operator pos:start="1477:8" pos:end="1477:8">(</operator><name pos:start="1477:9" pos:end="1477:12">NULL</name> <operator pos:start="1477:14" pos:end="1477:15">==</operator> <call pos:start="1477:17" pos:end="1477:101"><name pos:start="1477:17" pos:end="1477:27">CU_add_test</name><argument_list pos:start="1477:28" pos:end="1477:101">(<argument pos:start="1477:29" pos:end="1477:34"><expr pos:start="1477:29" pos:end="1477:34"><name pos:start="1477:29" pos:end="1477:34">pSuite</name></expr></argument>, <argument pos:start="1477:37" pos:end="1477:86"><expr pos:start="1477:37" pos:end="1477:86"><literal type="string" pos:start="1477:37" pos:end="1477:86">"Simple enroll - CRL enabled, revoked server cert"</literal></expr></argument>, <argument pos:start="1477:89" pos:end="1477:100"><expr pos:start="1477:89" pos:end="1477:100"><name pos:start="1477:89" pos:end="1477:100">us899_test17</name></expr></argument>)</argument_list></call><operator pos:start="1477:102" pos:end="1477:102">)</operator> <operator pos:start="1477:104" pos:end="1477:105">||</operator>
       <operator pos:start="1478:8" pos:end="1478:8">(</operator><name pos:start="1478:9" pos:end="1478:12">NULL</name> <operator pos:start="1478:14" pos:end="1478:15">==</operator> <call pos:start="1478:17" pos:end="1478:89"><name pos:start="1478:17" pos:end="1478:27">CU_add_test</name><argument_list pos:start="1478:28" pos:end="1478:89">(<argument pos:start="1478:29" pos:end="1478:34"><expr pos:start="1478:29" pos:end="1478:34"><name pos:start="1478:29" pos:end="1478:34">pSuite</name></expr></argument>, <argument pos:start="1478:37" pos:end="1478:74"><expr pos:start="1478:37" pos:end="1478:74"><literal type="string" pos:start="1478:37" pos:end="1478:74">"Simple enroll - Retry-After received"</literal></expr></argument>, <argument pos:start="1478:77" pos:end="1478:88"><expr pos:start="1478:77" pos:end="1478:88"><name pos:start="1478:77" pos:end="1478:88">us899_test18</name></expr></argument>)</argument_list></call><operator pos:start="1478:90" pos:end="1478:90">)</operator></expr>)</condition>
   <block pos:start="1479:4" pos:end="1482:4">{<block_content pos:start="1480:7" pos:end="1481:28">
      <expr_stmt pos:start="1480:7" pos:end="1480:28"><expr pos:start="1480:7" pos:end="1480:27"><call pos:start="1480:7" pos:end="1480:27"><name pos:start="1480:7" pos:end="1480:25">CU_cleanup_registry</name><argument_list pos:start="1480:26" pos:end="1480:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="1481:7" pos:end="1481:28">return <expr pos:start="1481:14" pos:end="1481:27"><call pos:start="1481:14" pos:end="1481:27"><name pos:start="1481:14" pos:end="1481:25">CU_get_error</name><argument_list pos:start="1481:26" pos:end="1481:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <return pos:start="1484:4" pos:end="1486:0">return <expr pos:start="1484:11" pos:end="1484:21"><name pos:start="1484:11" pos:end="1484:21">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="1485:1" pos:end="1485:6">#<cpp:directive pos:start="1485:2" pos:end="1485:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


</unit>
