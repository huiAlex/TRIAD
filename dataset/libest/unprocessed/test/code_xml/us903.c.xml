<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us903.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="9:3">/*------------------------------------------------------------------
 * us903.c - Unit Tests for User Story 903 - Server simple enroll
 *
 * August, 2013
 *
 * Copyright (c) 2013, 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 */</comment>
<cpp:include pos:start="10:1" pos:end="10:18">#<cpp:directive pos:start="10:2" pos:end="10:8">include</cpp:directive> <cpp:file pos:start="10:10" pos:end="10:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="12:1" pos:end="12:19">#<cpp:directive pos:start="12:2" pos:end="12:8">include</cpp:directive> <cpp:file pos:start="12:10" pos:end="12:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif> 
<cpp:include pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:8">include</cpp:directive> <cpp:file pos:start="14:10" pos:end="14:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:22">&lt;curl/curl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="16:1" pos:end="16:23">#<cpp:directive pos:start="16:2" pos:end="16:8">include</cpp:directive> <cpp:file pos:start="16:10" pos:end="16:23">"curl_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:22">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="21:1" pos:end="21:17">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="22:1" pos:end="22:24">#<cpp:directive pos:start="22:2" pos:end="22:8">include</cpp:directive> <cpp:file pos:start="22:10" pos:end="22:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="23:1" pos:end="23:28">#<cpp:directive pos:start="23:2" pos:end="23:8">include</cpp:directive> <cpp:file pos:start="23:10" pos:end="23:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="24:1" pos:end="24:6">#<cpp:directive pos:start="24:2" pos:end="24:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="26:1" pos:end="26:13">#<cpp:directive pos:start="26:2" pos:end="26:7">ifndef</cpp:directive> <name pos:start="26:9" pos:end="26:13">WIN32</name></cpp:ifndef>
<decl_stmt pos:start="27:1" pos:end="35:0"><decl pos:start="27:1" pos:end="27:59"><type pos:start="27:1" pos:end="27:11"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:11">char</name></type> <name pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:25">test5_outfile</name><index pos:start="27:26" pos:end="27:39">[<expr pos:start="27:27" pos:end="27:38"><name pos:start="27:27" pos:end="27:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="27:41" pos:end="27:59">= <expr pos:start="27:43" pos:end="27:59"><literal type="string" pos:start="27:43" pos:end="27:59">"US903/test5.hdr"</literal></expr></init></decl>;</decl_stmt>
<cpp:define pos:start="28:1" pos:end="28:49">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:21"><name pos:start="28:9" pos:end="28:21">US903_CACERTS</name></cpp:macro>       <cpp:value pos:start="28:29" pos:end="28:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="29:1" pos:end="29:47">#<cpp:directive pos:start="29:2" pos:end="29:7">define</cpp:directive> <cpp:macro pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:27">US903_EXPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="29:29" pos:end="29:47">"US903/cert-RA.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="30:1" pos:end="30:46">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:26"><name pos:start="30:9" pos:end="30:26">US903_EXPLICIT_KEY</name></cpp:macro>  <cpp:value pos:start="30:29" pos:end="30:46">"US903/key-RA.pem"</cpp:value></cpp:define>
<cpp:define pos:start="31:1" pos:end="31:49">#<cpp:directive pos:start="31:2" pos:end="31:7">define</cpp:directive> <cpp:macro pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:21">US903_CACERTS</name></cpp:macro>       <cpp:value pos:start="31:29" pos:end="31:49">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="32:1" pos:end="32:49">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:26"><name pos:start="32:9" pos:end="32:26">US903_TRUSTED_CERT</name></cpp:macro>  <cpp:value pos:start="32:29" pos:end="32:49">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="33:1" pos:end="33:76">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:33">US903_SERVER_CERT_AND_KEY</name></cpp:macro> <cpp:value pos:start="33:35" pos:end="33:76">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:else pos:start="34:1" pos:end="34:5">#<cpp:directive pos:start="34:2" pos:end="34:5">else</cpp:directive></cpp:else>
<decl_stmt pos:start="35:1" pos:end="43:0"><decl pos:start="35:1" pos:end="35:60"><type pos:start="35:1" pos:end="35:11"><specifier pos:start="35:1" pos:end="35:6">static</specifier> <name pos:start="35:8" pos:end="35:11">char</name></type> <name pos:start="35:13" pos:end="35:39"><name pos:start="35:13" pos:end="35:25">test5_outfile</name><index pos:start="35:26" pos:end="35:39">[<expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">FILENAME_MAX</name></expr>]</index></name> <init pos:start="35:41" pos:end="35:60">= <expr pos:start="35:43" pos:end="35:60"><literal type="string" pos:start="35:43" pos:end="35:60">"US903\\test5.hdr"</literal></expr></init></decl>;</decl_stmt>
<cpp:define pos:start="36:1" pos:end="36:51">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:21"><name pos:start="36:9" pos:end="36:21">US903_CACERTS</name></cpp:macro>       <cpp:value pos:start="36:29" pos:end="36:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="37:1" pos:end="37:48">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:27">US903_EXPLICIT_CERT</name></cpp:macro> <cpp:value pos:start="37:29" pos:end="37:48">"US903\\cert-RA.pem"</cpp:value></cpp:define> 
<cpp:define pos:start="38:1" pos:end="38:47">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:26"><name pos:start="38:9" pos:end="38:26">US903_EXPLICIT_KEY</name></cpp:macro>  <cpp:value pos:start="38:29" pos:end="38:47">"US903\\key-RA.pem"</cpp:value></cpp:define>
<cpp:define pos:start="39:1" pos:end="39:51">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:21">US903_CACERTS</name></cpp:macro>       <cpp:value pos:start="39:29" pos:end="39:51">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="40:1" pos:end="40:50">#<cpp:directive pos:start="40:2" pos:end="40:7">define</cpp:directive> <cpp:macro pos:start="40:9" pos:end="40:26"><name pos:start="40:9" pos:end="40:26">US903_TRUSTED_CERT</name></cpp:macro>  <cpp:value pos:start="40:29" pos:end="40:50">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="41:1" pos:end="41:79">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:33">US903_SERVER_CERT_AND_KEY</name></cpp:macro> <cpp:value pos:start="41:35" pos:end="41:79">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:endif pos:start="42:1" pos:end="42:6">#<cpp:directive pos:start="42:2" pos:end="42:6">endif</cpp:directive></cpp:endif>

<decl_stmt pos:start="44:1" pos:end="44:37"><decl pos:start="44:1" pos:end="44:36"><type pos:start="44:1" pos:end="44:22"><specifier pos:start="44:1" pos:end="44:6">static</specifier> <name pos:start="44:8" pos:end="44:15">unsigned</name> <name pos:start="44:17" pos:end="44:20">char</name> <modifier pos:start="44:22" pos:end="44:22">*</modifier></type><name pos:start="44:23" pos:end="44:29">cacerts</name> <init pos:start="44:31" pos:end="44:36">= <expr pos:start="44:33" pos:end="44:36"><name pos:start="44:33" pos:end="44:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="45:1" pos:end="87:0"><decl pos:start="45:1" pos:end="45:26"><type pos:start="45:1" pos:end="45:10"><specifier pos:start="45:1" pos:end="45:6">static</specifier> <name pos:start="45:8" pos:end="45:10">int</name></type> <name pos:start="45:12" pos:end="45:22">cacerts_len</name> <init pos:start="45:24" pos:end="45:26">= <expr pos:start="45:26" pos:end="45:26"><literal type="number" pos:start="45:26" pos:end="45:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="47:1" pos:end="47:36">#<cpp:directive pos:start="47:2" pos:end="47:7">define</cpp:directive> <cpp:macro pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:28">US903_RETRY_INTERVAL</name></cpp:macro>    <cpp:value pos:start="47:33" pos:end="47:36">3600</cpp:value></cpp:define>
<cpp:define pos:start="48:1" pos:end="48:33">#<cpp:directive pos:start="48:2" pos:end="48:7">define</cpp:directive> <cpp:macro pos:start="48:9" pos:end="48:22"><name pos:start="48:9" pos:end="48:22">US903_TCP_PORT</name></cpp:macro>      <cpp:value pos:start="48:29" pos:end="48:33">29001</cpp:value></cpp:define>

<comment type="block" pos:start="50:1" pos:end="55:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the rsa.req file:
 *
 * openssl req -newkey rsa:2048 -keyout rsakey.pem -keyform PEM -out rsa.req -outform PEM
 */</comment>
<cpp:define pos:start="56:1" pos:end="56:999">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:28"><name pos:start="56:9" pos:end="56:28">US903_PKCS10_RSA2048</name></cpp:macro> <cpp:value pos:start="56:30" pos:end="56:999">"MIICvTCCAaUCAQAweDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEjAQBgNVBAoMCVJTQWNlcnRjbzEMMAoGA1UECwwDcnNhMRAwDgYDVQQD\nDAdyc2EgZG9lMRowGAYJKoZIhvcNAQkBFgtyc2FAZG9lLmNvbTCCASIwDQYJKoZI\nhvcNAQEBBQADggEPADCCAQoCggEBAN6pCTBrK7T029Bganq0QHXHyNL8opvxc7JY\nXaQz39R3J9BoBE72XZ0QXsBtUEYGNhHOLaISASNzs2ZKWpvMHJWmPYNt39OCi48Y\nFOgLDbAn83mAOKSfcMLbibCcsh4HOlhaaFrWskRTAsew16MUOzFu6vBkw/AhI82J\nKPYws0dYOxuWFIgE1HL+m/gplbzq7FrBIdrqkNL+ddgyXoDd5NuLMJGDAK7vB1Ww\n9/Baw/6Ai9V5psye1v8fWDr6HW2gg9XnVtMwB4pCg1rl1lSYstumTGYbM6cxJywe\nLuMnDjj1ZwDsZ1wIXaBAXZaxEIS/rXOX0HnZMTefxY/gpFk1Kv0CAwEAAaAAMA0G\nCSqGSIb3DQEBBQUAA4IBAQB6rIwNjE8l8jFKR1hQ/qeSvee/bAQa58RufZ4USKuK\nlsih7UCf8bkQvgljnhscQuczIbnJzeqEPqSdnomFW6CvMc/ah+QfX87FGYxJgpwF\nutnUifjDiZhrWgf/jNNbtHrkecw/Zex4sZ/HC127jtE3cyEkDsrA1oBxYRCq93tC\nW2q9PLVmLlyjcZcS1KHVD2nya79kfS0YGMocsw1GelVL2iz/ocayAS5GB9Y2sEBw\nRkCaYZw6vhj5qjpCUzJ3E8Cl3VD4Kpi3j3bZGDJA9mdmd8j5ZyPY56eAuxarWssD\nciUM/h6E99w3tmrUZbLljkjJ7pBXRnontgm5WZmQFH4X"</cpp:value></cpp:define>

<comment type="block" pos:start="58:1" pos:end="63:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the ec.req file:
 *
 * openssl req -newkey ec:256parms -keyout eckey.pem -keyform PEM -out ec.req -outform PEM
 */</comment>
<cpp:define pos:start="64:1" pos:end="64:913">#<cpp:directive pos:start="64:2" pos:end="64:7">define</cpp:directive> <cpp:macro pos:start="64:9" pos:end="64:28"><name pos:start="64:9" pos:end="64:28">US903_PKCS10_DSA1024</name></cpp:macro> <cpp:value pos:start="64:30" pos:end="64:913">"MIICfjCCAj0CAQAwfDELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAk5DMQwwCgYDVQQH\nDANSVFAxEzARBgNVBAoMCkRTQUNvbXBhbnkxDzANBgNVBAsMBkRTQW9yZzEQMA4G\nA1UEAwwHZHNhIGRvZTEaMBgGCSqGSIb3DQEJARYLZHNhQGRvZS5jb20wggG2MIIB\nKwYHKoZIzjgEATCCAR4CgYEAqIfbyk7rEAaULIPB1GcHHc0ctx6g0dhBfdUdOPNG\nBSE+TP5UF5lw8Qm6oCXstU3nYEJalmMvkjFwbgvBws8aJBnj09dDDn8spKEGcG0M\nZpqdMys6+b4QJjq5YAxEaATVY/1L/rBgGGm1EFDhc/6Ezm2T3CGeQklwo5aBZQCc\naIsCFQDC1olBFuE+phOhjXAwEE5EPJkRJwKBgD+vZ+tLCTjBzVFNjAO8X/SMamwW\noraNfdyZ+ZCEAmYI/D4838nCGAjVRQyDb1q5akkLyxoJX1YV7gNbaBNUys3waqdu\nso1HtuEur2cbhU5iOeKBWpj6MIWlPdD3uCRu4uiBF9XBiANaRID8CT2kchhwy4Ok\nFfQMuYOz4eBhMQqmA4GEAAKBgDuwR7H3U4CfuQjWeTtrI50M1TxhlVZ3TonRtVIx\nEHpuXxAouxATVkthJtaCBKc0EHii1bE/kgNUgGX/ZdFjBUb/XfpkYsRT3QRLF0+s\nPZGY/0TovO9pKjqiw0C10leNKFbEVdlXYtAkjXUbHmyNog3195/t7oKXHMT1A/5p\nhUCRoAAwCQYHKoZIzjgEAwMwADAtAhUAhPCqQG3gKUUPKdwBNCmZfzWDqjsCFAh0\nzn9HujlXNaTA1OhjmPmcJSxT"</cpp:value></cpp:define>

<comment type="block" pos:start="66:1" pos:end="71:3">/*
 * The following CSR was generated using the following openssl command and then
 * using cat on the dsa.req file:
 *
 * openssl req -newkey dsa:dsaparms -keyout dsakey.pem -keyform PEM -out dsa.req -outform PEM
 */</comment>
<cpp:define pos:start="72:1" pos:end="72:456">#<cpp:directive pos:start="72:2" pos:end="72:7">define</cpp:directive> <cpp:macro pos:start="72:9" pos:end="72:29"><name pos:start="72:9" pos:end="72:29">US903_PKCS10_ECDSA256</name></cpp:macro> <cpp:value pos:start="72:31" pos:end="72:456">"MIIBMTCB2gIBADB4MQswCQYDVQQGEwJVUzELMAkGA1UECAwCTkMxDDAKBgNVBAcM\nA1JUUDESMBAGA1UECgwJRUNDb21wYW55MQ4wDAYDVQQLDAVFQ29yZzEPMA0GA1UE\nAwwGRUMgZG9lMRkwFwYJKoZIhvcNAQkBFgplY0Bkb2UuY29tMFkwEwYHKoZIzj0C\nAQYIKoZIzj0DAQcDQgAEO1uszCKdXNFzygNLNeS8azQKod1516GT9qdDddt9iJN4\nLpBTnv+7K7+tji5kts1kWSYyvqLxvnq8Q/TU1iQJ56AAMAkGByqGSM49BAEDRwAw\nRAIgP6qda+0TEKZFPopgUfwFMRsxcNmuQUe2yuz16460/SQCIBfLvmuMeyYOqbbD\nX0Ifde9yzkROVBCEPvK0hcU5KsTO"</cpp:value></cpp:define>

<cpp:define pos:start="74:1" pos:end="74:455">#<cpp:directive pos:start="74:2" pos:end="74:7">define</cpp:directive> <cpp:macro pos:start="74:9" pos:end="74:28"><name pos:start="74:9" pos:end="74:28">US903_PKCS10_CORRUPT</name></cpp:macro> <cpp:value pos:start="74:30" pos:end="74:455">"MIIBMTCB2gIBADB4MQswCQYDVQQGEwJVUzELMAkGA1UECAwCTkMxDDAKBgNVBAcM\nA1JUUDESMBAGA1UECgwJRUNDb21wYW55MQ4wDAYDVQQLDAVFQ39yZzEPMA0GA1UE\nAwwGRUMgZG9lMRkwFwYJKoZIhvcNAQkBFgplY0Bkb2UuY29tMFkwEwYHKoZIzj0C\nAQYIKoZIzj0DAQcDQgAEO1uszCKdXNFzygNLNeS8azQKod1516GT9qdDddt9iJN4\nLpBTnv+7K7+tji5kts1kWSYyvqLxvnq8Q/TU1iQJ56AAMAkGByqGSM49BAEDRwAw\nRAIgP6qda+0TEKZFPopgUfwFMRsxcNmuQUe2yuz16460/SQCIBfLvmuMeyYOqbbD\nX0Ifde9yzkROVBCEPvK0hcU5KsTO"</cpp:value></cpp:define>

<comment type="block" pos:start="76:1" pos:end="81:3">/*
 * The following is a valid CSR that already contains a PoP
 * challengePassword.  This was collected using estserver with
 * the dumpbin() function.  This CSR should never work since
 * the PoP value in it will be stale.
 */</comment>
<cpp:define pos:start="82:1" pos:end="82:547">#<cpp:directive pos:start="82:2" pos:end="82:7">define</cpp:directive> <cpp:macro pos:start="82:9" pos:end="82:30"><name pos:start="82:9" pos:end="82:30">US903_PKCS10_STALE_POP</name></cpp:macro> <cpp:value pos:start="82:32" pos:end="82:547">"MIIBcjCB3AIBADARMQ8wDQYDVQQDEwZURVNUQ04wgZ8wDQYJKoZIhvcNAQEBBQAD\ngY0AMIGJAoGBAPDHvrkVB3+rFHl+KuIsrZGixldRYRD50S2vFs8mW5wWVxDS3xFR\nzcKtqg7JUyW8NYOFNWX0ozhCe87XP2h7tUpHyHlL/8N/84zuMtAtKTLU3Bjgq1xg\nuu8a1ht10wiy8u2r/uEKMhQwpvt56UY5pHzuqmqlO0qlmE+M58WN49IhAgMBAAGg\nIjAgBgkqhkiG9w0BCQcxExYRUjdGN1ZUNUwyd2VueWtMcAowDQYJKoZIhvcNAQEF\nBQADgYEAyenrskmfRIXcpeKBvL3VnW5N4HcLTwI9Hcbr744SWFQaw/R+ru+UXd2j\n99AGBr/GvTkTghINWg2C7vzGF/zhIuG6Ok9FtiMnNr9hZ+5SLYhfSFJbuIv65rWH\nvfLR9N9M2Q9jlf7p4AYfWXD2qD2XOTZw2t4trGZGKA2JR/OiB40="</cpp:value></cpp:define>

<cpp:define pos:start="84:1" pos:end="84:82">#<cpp:directive pos:start="84:2" pos:end="84:7">define</cpp:directive> <cpp:macro pos:start="84:9" pos:end="84:27"><name pos:start="84:9" pos:end="84:27">US903_ENROLL_URL_BA</name></cpp:macro> <cpp:value pos:start="84:29" pos:end="84:82">"https://127.0.0.1:29001/.well-known/est/simpleenroll"</cpp:value></cpp:define>
<cpp:define pos:start="85:1" pos:end="85:62">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:23">US903_PKCS10_CT</name></cpp:macro>     <cpp:value pos:start="85:29" pos:end="85:62">"Content-Type: application/pkcs10"</cpp:value></cpp:define> 
<cpp:define pos:start="86:1" pos:end="86:44">#<cpp:directive pos:start="86:2" pos:end="86:7">define</cpp:directive> <cpp:macro pos:start="86:9" pos:end="86:25"><name pos:start="86:9" pos:end="86:25">US903_UIDPWD_GOOD</name></cpp:macro>   <cpp:value pos:start="86:29" pos:end="86:44">"estuser:estpwd"</cpp:value></cpp:define>

<function pos:start="88:1" pos:end="114:1"><type pos:start="88:1" pos:end="88:17"><specifier pos:start="88:1" pos:end="88:6">static</specifier> <name pos:start="88:8" pos:end="88:15">EVP_PKEY</name> <modifier pos:start="88:17" pos:end="88:17">*</modifier></type> <name pos:start="88:19" pos:end="88:38">generate_private_key</name> <parameter_list pos:start="88:40" pos:end="88:45">(<parameter pos:start="88:41" pos:end="88:44"><decl pos:start="88:41" pos:end="88:44"><type pos:start="88:41" pos:end="88:44"><name pos:start="88:41" pos:end="88:44">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="89:1" pos:end="114:1">{<block_content pos:start="90:5" pos:end="113:18">
    <decl_stmt pos:start="90:5" pos:end="90:25"><decl pos:start="90:5" pos:end="90:24"><type pos:start="90:5" pos:end="90:9"><name pos:start="90:5" pos:end="90:7">RSA</name> <modifier pos:start="90:9" pos:end="90:9">*</modifier></type><name pos:start="90:10" pos:end="90:12">rsa</name> <init pos:start="90:14" pos:end="90:24">= <expr pos:start="90:16" pos:end="90:24"><call pos:start="90:16" pos:end="90:24"><name pos:start="90:16" pos:end="90:22">RSA_new</name><argument_list pos:start="90:23" pos:end="90:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="91:5" pos:end="91:26"><decl pos:start="91:5" pos:end="91:25"><type pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:10">BIGNUM</name> <modifier pos:start="91:12" pos:end="91:12">*</modifier></type><name pos:start="91:13" pos:end="91:14">bn</name> <init pos:start="91:16" pos:end="91:25">= <expr pos:start="91:18" pos:end="91:25"><call pos:start="91:18" pos:end="91:25"><name pos:start="91:18" pos:end="91:23">BN_new</name><argument_list pos:start="91:24" pos:end="91:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="92:5" pos:end="92:19"><decl pos:start="92:5" pos:end="92:18"><type pos:start="92:5" pos:end="92:14"><name pos:start="92:5" pos:end="92:12">EVP_PKEY</name> <modifier pos:start="92:14" pos:end="92:14">*</modifier></type><name pos:start="92:15" pos:end="92:18">pkey</name></decl>;</decl_stmt>

    <comment type="block" pos:start="94:5" pos:end="96:7">/*
     * create an RSA keypair and assign them to a PKEY and return it.
     */</comment>
    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><call pos:start="97:5" pos:end="97:28"><name pos:start="97:5" pos:end="97:15">BN_set_word</name><argument_list pos:start="97:16" pos:end="97:28">(<argument pos:start="97:17" pos:end="97:18"><expr pos:start="97:17" pos:end="97:18"><name pos:start="97:17" pos:end="97:18">bn</name></expr></argument>, <argument pos:start="97:21" pos:end="97:27"><expr pos:start="97:21" pos:end="97:27"><literal type="number" pos:start="97:21" pos:end="97:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:45"><expr pos:start="98:5" pos:end="98:44"><call pos:start="98:5" pos:end="98:44"><name pos:start="98:5" pos:end="98:23">RSA_generate_key_ex</name><argument_list pos:start="98:24" pos:end="98:44">(<argument pos:start="98:25" pos:end="98:27"><expr pos:start="98:25" pos:end="98:27"><name pos:start="98:25" pos:end="98:27">rsa</name></expr></argument>, <argument pos:start="98:30" pos:end="98:33"><expr pos:start="98:30" pos:end="98:33"><literal type="number" pos:start="98:30" pos:end="98:33">1024</literal></expr></argument>, <argument pos:start="98:36" pos:end="98:37"><expr pos:start="98:36" pos:end="98:37"><name pos:start="98:36" pos:end="98:37">bn</name></expr></argument>, <argument pos:start="98:40" pos:end="98:43"><expr pos:start="98:40" pos:end="98:43"><name pos:start="98:40" pos:end="98:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="100:5" pos:end="100:26"><expr pos:start="100:5" pos:end="100:25"><name pos:start="100:5" pos:end="100:8">pkey</name> <operator pos:start="100:10" pos:end="100:10">=</operator> <call pos:start="100:12" pos:end="100:25"><name pos:start="100:12" pos:end="100:23">EVP_PKEY_new</name><argument_list pos:start="100:24" pos:end="100:25">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="101:5" pos:end="104:5"><if pos:start="101:5" pos:end="104:5">if <condition pos:start="101:8" pos:end="101:21">(<expr pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:12">pkey</name> <operator pos:start="101:14" pos:end="101:15">==</operator> <name pos:start="101:17" pos:end="101:20">NULL</name></expr>)</condition> <block pos:start="101:23" pos:end="104:5">{<block_content pos:start="102:9" pos:end="103:20">
        <expr_stmt pos:start="102:9" pos:end="102:71"><expr pos:start="102:9" pos:end="102:70"><call pos:start="102:9" pos:end="102:70"><name pos:start="102:9" pos:end="102:14">printf</name><argument_list pos:start="102:15" pos:end="102:70">(<argument pos:start="102:16" pos:end="102:69"><expr pos:start="102:16" pos:end="102:69"><literal type="string" pos:start="102:16" pos:end="102:69">"\nError allocating PKEY structure for new key pair\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="103:9" pos:end="103:20">return <expr pos:start="103:16" pos:end="103:19"><name pos:start="103:16" pos:end="103:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="105:5" pos:end="108:5"><if pos:start="105:5" pos:end="108:5">if <condition pos:start="105:8" pos:end="105:38">(<expr pos:start="105:9" pos:end="105:37"><operator pos:start="105:9" pos:end="105:9">!</operator><call pos:start="105:10" pos:end="105:37"><name pos:start="105:10" pos:end="105:26">EVP_PKEY_set1_RSA</name><argument_list pos:start="105:27" pos:end="105:37">(<argument pos:start="105:28" pos:end="105:31"><expr pos:start="105:28" pos:end="105:31"><name pos:start="105:28" pos:end="105:31">pkey</name></expr></argument>, <argument pos:start="105:34" pos:end="105:36"><expr pos:start="105:34" pos:end="105:36"><name pos:start="105:34" pos:end="105:36">rsa</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:40" pos:end="108:5">{<block_content pos:start="106:9" pos:end="107:20">
        <expr_stmt pos:start="106:9" pos:end="106:69"><expr pos:start="106:9" pos:end="106:68"><call pos:start="106:9" pos:end="106:68"><name pos:start="106:9" pos:end="106:14">printf</name><argument_list pos:start="106:15" pos:end="106:68">(<argument pos:start="106:16" pos:end="106:67"><expr pos:start="106:16" pos:end="106:67"><literal type="string" pos:start="106:16" pos:end="106:67">"\nError assigning RSA key pair to PKEY structure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="107:9" pos:end="107:20">return <expr pos:start="107:16" pos:end="107:19"><name pos:start="107:16" pos:end="107:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="110:5" pos:end="110:18"><expr pos:start="110:5" pos:end="110:17"><call pos:start="110:5" pos:end="110:17"><name pos:start="110:5" pos:end="110:12">RSA_free</name><argument_list pos:start="110:13" pos:end="110:17">(<argument pos:start="110:14" pos:end="110:16"><expr pos:start="110:14" pos:end="110:16"><name pos:start="110:14" pos:end="110:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="111:5" pos:end="111:16"><expr pos:start="111:5" pos:end="111:15"><call pos:start="111:5" pos:end="111:15"><name pos:start="111:5" pos:end="111:11">BN_free</name><argument_list pos:start="111:12" pos:end="111:15">(<argument pos:start="111:13" pos:end="111:14"><expr pos:start="111:13" pos:end="111:14"><name pos:start="111:13" pos:end="111:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="113:5" pos:end="113:18">return <expr pos:start="113:12" pos:end="113:17"><operator pos:start="113:12" pos:end="113:12">(</operator><name pos:start="113:13" pos:end="113:16">pkey</name><operator pos:start="113:17" pos:end="113:17">)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="116:1" pos:end="118:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="119:1" pos:end="150:1"><type pos:start="119:1" pos:end="119:10"><specifier pos:start="119:1" pos:end="119:6">static</specifier> <name pos:start="119:8" pos:end="119:10">int</name></type> <name pos:start="119:12" pos:end="119:36">client_manual_cert_verify</name> <parameter_list pos:start="119:38" pos:end="119:77">(<parameter pos:start="119:39" pos:end="119:52"><decl pos:start="119:39" pos:end="119:52"><type pos:start="119:39" pos:end="119:52"><name pos:start="119:39" pos:end="119:42">X509</name> <modifier pos:start="119:44" pos:end="119:44">*</modifier></type><name pos:start="119:45" pos:end="119:52">cur_cert</name></decl></parameter>, <parameter pos:start="119:55" pos:end="119:76"><decl pos:start="119:55" pos:end="119:76"><type pos:start="119:55" pos:end="119:76"><name pos:start="119:55" pos:end="119:57">int</name></type> <name pos:start="119:59" pos:end="119:76">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="120:1" pos:end="150:1">{<block_content pos:start="121:5" pos:end="149:19">
    <decl_stmt pos:start="121:5" pos:end="121:18"><decl pos:start="121:5" pos:end="121:17"><type pos:start="121:5" pos:end="121:9"><name pos:start="121:5" pos:end="121:7">BIO</name> <modifier pos:start="121:9" pos:end="121:9">*</modifier></type> <name pos:start="121:11" pos:end="121:17">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="122:5" pos:end="122:46"><expr pos:start="122:5" pos:end="122:45"><name pos:start="122:5" pos:end="122:11">bio_err</name> <operator pos:start="122:13" pos:end="122:13">=</operator> <call pos:start="122:15" pos:end="122:45"><name pos:start="122:15" pos:end="122:24">BIO_new_fp</name><argument_list pos:start="122:25" pos:end="122:45">(<argument pos:start="122:26" pos:end="122:31"><expr pos:start="122:26" pos:end="122:31"><name pos:start="122:26" pos:end="122:31">stderr</name></expr></argument>, <argument pos:start="122:34" pos:end="122:44"><expr pos:start="122:34" pos:end="122:44"><name pos:start="122:34" pos:end="122:44">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="123:5" pos:end="123:20"><decl pos:start="123:5" pos:end="123:19"><type pos:start="123:5" pos:end="123:7"><name pos:start="123:5" pos:end="123:7">int</name></type> <name pos:start="123:9" pos:end="123:15">approve</name> <init pos:start="123:17" pos:end="123:19">= <expr pos:start="123:19" pos:end="123:19"><literal type="number" pos:start="123:19" pos:end="123:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="125:5" pos:end="127:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="128:5" pos:end="132:59"><expr pos:start="128:5" pos:end="132:58"><call pos:start="128:5" pos:end="132:58"><name pos:start="128:5" pos:end="128:10">printf</name><argument_list pos:start="128:11" pos:end="132:58">(
        <argument pos:start="129:9" pos:end="129:114"><expr pos:start="129:9" pos:end="129:114"><literal type="string" pos:start="129:9" pos:end="129:114">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
        <argument pos:start="130:9" pos:end="130:20"><expr pos:start="130:9" pos:end="130:20"><name pos:start="130:9" pos:end="130:20">__FUNCTION__</name></expr></argument>,
        <argument pos:start="131:9" pos:end="131:26"><expr pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:26">openssl_cert_error</name></expr></argument>,
        <argument pos:start="132:9" pos:end="132:57"><expr pos:start="132:9" pos:end="132:57"><call pos:start="132:9" pos:end="132:57"><name pos:start="132:9" pos:end="132:37">X509_verify_cert_error_string</name><argument_list pos:start="132:38" pos:end="132:57">(<argument pos:start="132:39" pos:end="132:56"><expr pos:start="132:39" pos:end="132:56"><name pos:start="132:39" pos:end="132:56">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="134:5" pos:end="134:30"><expr pos:start="134:5" pos:end="134:29"><call pos:start="134:5" pos:end="134:29"><name pos:start="134:5" pos:end="134:10">printf</name><argument_list pos:start="134:11" pos:end="134:29">(<argument pos:start="134:12" pos:end="134:28"><expr pos:start="134:12" pos:end="134:28"><literal type="string" pos:start="134:12" pos:end="134:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="135:5" pos:end="135:36"><expr pos:start="135:5" pos:end="135:35"><call pos:start="135:5" pos:end="135:35"><name pos:start="135:5" pos:end="135:17">X509_print_fp</name><argument_list pos:start="135:18" pos:end="135:35">(<argument pos:start="135:19" pos:end="135:24"><expr pos:start="135:19" pos:end="135:24"><name pos:start="135:19" pos:end="135:24">stdout</name></expr></argument>, <argument pos:start="135:27" pos:end="135:34"><expr pos:start="135:27" pos:end="135:34"><name pos:start="135:27" pos:end="135:34">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="136:5" pos:end="140:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="141:5" pos:end="141:74"><expr pos:start="141:5" pos:end="141:73"><call pos:start="141:5" pos:end="141:73"><name pos:start="141:5" pos:end="141:24">X509_signature_print</name><argument_list pos:start="141:25" pos:end="141:73">(<argument pos:start="141:26" pos:end="141:32"><expr pos:start="141:26" pos:end="141:32"><name pos:start="141:26" pos:end="141:32">bio_err</name></expr></argument>, <argument pos:start="141:35" pos:end="141:51"><expr pos:start="141:35" pos:end="141:51"><name pos:start="141:35" pos:end="141:51"><name pos:start="141:35" pos:end="141:42">cur_cert</name><operator pos:start="141:43" pos:end="141:44">-&gt;</operator><name pos:start="141:45" pos:end="141:51">sig_alg</name></name></expr></argument>, <argument pos:start="141:54" pos:end="141:72"><expr pos:start="141:54" pos:end="141:72"><name pos:start="141:54" pos:end="141:72"><name pos:start="141:54" pos:end="141:61">cur_cert</name><operator pos:start="141:62" pos:end="141:63">-&gt;</operator><name pos:start="141:64" pos:end="141:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="145:5"><if pos:start="143:5" pos:end="145:5">if <condition pos:start="143:8" pos:end="143:59">(<expr pos:start="143:9" pos:end="143:58"><name pos:start="143:9" pos:end="143:26">openssl_cert_error</name> <operator pos:start="143:28" pos:end="143:29">==</operator> <name pos:start="143:31" pos:end="143:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="143:61" pos:end="145:5">{<block_content pos:start="144:9" pos:end="144:20">
        <expr_stmt pos:start="144:9" pos:end="144:20"><expr pos:start="144:9" pos:end="144:19"><name pos:start="144:9" pos:end="144:15">approve</name> <operator pos:start="144:17" pos:end="144:17">=</operator> <literal type="number" pos:start="144:19" pos:end="144:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:22"><expr pos:start="147:5" pos:end="147:21"><call pos:start="147:5" pos:end="147:21"><name pos:start="147:5" pos:end="147:12">BIO_free</name><argument_list pos:start="147:13" pos:end="147:21">(<argument pos:start="147:14" pos:end="147:20"><expr pos:start="147:14" pos:end="147:20"><name pos:start="147:14" pos:end="147:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="149:5" pos:end="149:19">return <expr pos:start="149:12" pos:end="149:18"><name pos:start="149:12" pos:end="149:18">approve</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt pos:start="152:1" pos:end="152:21"><decl pos:start="152:1" pos:end="152:20"><type pos:start="152:1" pos:end="152:13"><specifier pos:start="152:1" pos:end="152:6">static</specifier> <name pos:start="152:8" pos:end="152:11">FILE</name> <modifier pos:start="152:13" pos:end="152:13">*</modifier></type><name pos:start="152:14" pos:end="152:20">outfile</name></decl>;</decl_stmt>
<function pos:start="153:1" pos:end="158:1"><type pos:start="153:1" pos:end="153:13"><specifier pos:start="153:1" pos:end="153:6">static</specifier> <name pos:start="153:8" pos:end="153:13">size_t</name></type> <name pos:start="153:15" pos:end="153:24">write_func</name> <parameter_list pos:start="153:26" pos:end="153:79">(<parameter pos:start="153:27" pos:end="153:35"><decl pos:start="153:27" pos:end="153:35"><type pos:start="153:27" pos:end="153:35"><name pos:start="153:27" pos:end="153:30">void</name> <modifier pos:start="153:32" pos:end="153:32">*</modifier></type><name pos:start="153:33" pos:end="153:35">ptr</name></decl></parameter>, <parameter pos:start="153:38" pos:end="153:48"><decl pos:start="153:38" pos:end="153:48"><type pos:start="153:38" pos:end="153:48"><name pos:start="153:38" pos:end="153:43">size_t</name></type> <name pos:start="153:45" pos:end="153:48">size</name></decl></parameter>, <parameter pos:start="153:51" pos:end="153:62"><decl pos:start="153:51" pos:end="153:62"><type pos:start="153:51" pos:end="153:62"><name pos:start="153:51" pos:end="153:56">size_t</name></type> <name pos:start="153:58" pos:end="153:62">nmemb</name></decl></parameter>, <parameter pos:start="153:65" pos:end="153:78"><decl pos:start="153:65" pos:end="153:78"><type pos:start="153:65" pos:end="153:78"><name pos:start="153:65" pos:end="153:68">void</name> <modifier pos:start="153:70" pos:end="153:70">*</modifier></type><name pos:start="153:71" pos:end="153:78">userdata</name></decl></parameter>)</parameter_list>
<block pos:start="154:1" pos:end="158:1">{<block_content pos:start="155:5" pos:end="157:19">
    <decl_stmt pos:start="155:5" pos:end="155:19"><decl pos:start="155:5" pos:end="155:18"><type pos:start="155:5" pos:end="155:10"><name pos:start="155:5" pos:end="155:10">size_t</name></type> <name pos:start="155:12" pos:end="155:18">written</name></decl>;</decl_stmt>
    <expr_stmt pos:start="156:5" pos:end="156:48"><expr pos:start="156:5" pos:end="156:47"><name pos:start="156:5" pos:end="156:11">written</name> <operator pos:start="156:13" pos:end="156:13">=</operator> <call pos:start="156:15" pos:end="156:47"><name pos:start="156:15" pos:end="156:20">fwrite</name><argument_list pos:start="156:21" pos:end="156:47">(<argument pos:start="156:22" pos:end="156:24"><expr pos:start="156:22" pos:end="156:24"><name pos:start="156:22" pos:end="156:24">ptr</name></expr></argument>, <argument pos:start="156:27" pos:end="156:30"><expr pos:start="156:27" pos:end="156:30"><name pos:start="156:27" pos:end="156:30">size</name></expr></argument>, <argument pos:start="156:33" pos:end="156:37"><expr pos:start="156:33" pos:end="156:37"><name pos:start="156:33" pos:end="156:37">nmemb</name></expr></argument>, <argument pos:start="156:40" pos:end="156:46"><expr pos:start="156:40" pos:end="156:46"><name pos:start="156:40" pos:end="156:46">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="157:5" pos:end="157:19">return <expr pos:start="157:12" pos:end="157:18"><name pos:start="157:12" pos:end="157:18">written</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="160:1" pos:end="162:1"><type pos:start="160:1" pos:end="160:11"><specifier pos:start="160:1" pos:end="160:6">static</specifier> <name pos:start="160:8" pos:end="160:11">void</name></type> <name pos:start="160:13" pos:end="160:23">us903_clean</name> <parameter_list pos:start="160:25" pos:end="160:30">(<parameter pos:start="160:26" pos:end="160:29"><decl pos:start="160:26" pos:end="160:29"><type pos:start="160:26" pos:end="160:29"><name pos:start="160:26" pos:end="160:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="161:1" pos:end="162:1">{<block_content>
</block_content>}</block></function>

<function pos:start="164:1" pos:end="179:1"><type pos:start="164:1" pos:end="164:10"><specifier pos:start="164:1" pos:end="164:6">static</specifier> <name pos:start="164:8" pos:end="164:10">int</name></type> <name pos:start="164:12" pos:end="164:29">us903_start_server</name> <parameter_list pos:start="164:31" pos:end="164:58">(<parameter pos:start="164:32" pos:end="164:48"><decl pos:start="164:32" pos:end="164:48"><type pos:start="164:32" pos:end="164:48"><name pos:start="164:32" pos:end="164:34">int</name></type> <name pos:start="164:36" pos:end="164:48">manual_enroll</name></decl></parameter>, <parameter pos:start="164:51" pos:end="164:57"><decl pos:start="164:51" pos:end="164:57"><type pos:start="164:51" pos:end="164:57"><name pos:start="164:51" pos:end="164:53">int</name></type> <name pos:start="164:55" pos:end="164:57">nid</name></decl></parameter>)</parameter_list>
<block pos:start="165:1" pos:end="179:1">{<block_content pos:start="166:5" pos:end="178:14">
    <decl_stmt pos:start="166:5" pos:end="166:11"><decl pos:start="166:5" pos:end="166:10"><type pos:start="166:5" pos:end="166:7"><name pos:start="166:5" pos:end="166:7">int</name></type> <name pos:start="166:9" pos:end="166:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="168:5" pos:end="177:23"><expr pos:start="168:5" pos:end="177:22"><name pos:start="168:5" pos:end="168:6">rv</name> <operator pos:start="168:8" pos:end="168:8">=</operator> <call pos:start="168:10" pos:end="177:22"><name pos:start="168:10" pos:end="168:17">st_start</name><argument_list pos:start="168:18" pos:end="177:22">(<argument pos:start="168:19" pos:end="168:32"><expr pos:start="168:19" pos:end="168:32"><name pos:start="168:19" pos:end="168:32">US903_TCP_PORT</name></expr></argument>,
                  <argument pos:start="169:19" pos:end="169:43"><expr pos:start="169:19" pos:end="169:43"><name pos:start="169:19" pos:end="169:43">US903_SERVER_CERT_AND_KEY</name></expr></argument>,
                  <argument pos:start="170:19" pos:end="170:43"><expr pos:start="170:19" pos:end="170:43"><name pos:start="170:19" pos:end="170:43">US903_SERVER_CERT_AND_KEY</name></expr></argument>,
                  <argument pos:start="171:19" pos:end="171:36"><expr pos:start="171:19" pos:end="171:36"><literal type="string" pos:start="171:19" pos:end="171:36">"US903 test realm"</literal></expr></argument>,
                  <argument pos:start="172:19" pos:end="172:31"><expr pos:start="172:19" pos:end="172:31"><name pos:start="172:19" pos:end="172:31">US903_CACERTS</name></expr></argument>,
                  <argument pos:start="173:19" pos:end="173:36"><expr pos:start="173:19" pos:end="173:36"><name pos:start="173:19" pos:end="173:36">US903_TRUSTED_CERT</name></expr></argument>,
                  <argument pos:start="174:19" pos:end="174:39"><expr pos:start="174:19" pos:end="174:39"><literal type="string" pos:start="174:19" pos:end="174:39">"CA/estExampleCA.cnf"</literal></expr></argument>,
                  <argument pos:start="175:19" pos:end="175:31"><expr pos:start="175:19" pos:end="175:31"><name pos:start="175:19" pos:end="175:31">manual_enroll</name></expr></argument>,
                  <argument pos:start="176:19" pos:end="176:19"><expr pos:start="176:19" pos:end="176:19"><literal type="number" pos:start="176:19" pos:end="176:19">0</literal></expr></argument>,
                  <argument pos:start="177:19" pos:end="177:21"><expr pos:start="177:19" pos:end="177:21"><name pos:start="177:19" pos:end="177:21">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="178:5" pos:end="178:14">return <expr pos:start="178:12" pos:end="178:13"><name pos:start="178:12" pos:end="178:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="181:1" pos:end="185:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="186:1" pos:end="209:1"><type pos:start="186:1" pos:end="186:10"><specifier pos:start="186:1" pos:end="186:6">static</specifier> <name pos:start="186:8" pos:end="186:10">int</name></type> <name pos:start="186:12" pos:end="186:27">us903_init_suite</name> <parameter_list pos:start="186:29" pos:end="186:34">(<parameter pos:start="186:30" pos:end="186:33"><decl pos:start="186:30" pos:end="186:33"><type pos:start="186:30" pos:end="186:33"><name pos:start="186:30" pos:end="186:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="187:1" pos:end="209:1">{<block_content pos:start="188:5" pos:end="208:14">
    <decl_stmt pos:start="188:5" pos:end="188:11"><decl pos:start="188:5" pos:end="188:10"><type pos:start="188:5" pos:end="188:7"><name pos:start="188:5" pos:end="188:7">int</name></type> <name pos:start="188:9" pos:end="188:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="190:5" pos:end="190:44"><expr pos:start="190:5" pos:end="190:43"><call pos:start="190:5" pos:end="190:43"><name pos:start="190:5" pos:end="190:19">est_init_logger</name><argument_list pos:start="190:20" pos:end="190:43">(<argument pos:start="190:21" pos:end="190:36"><expr pos:start="190:21" pos:end="190:36"><name pos:start="190:21" pos:end="190:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="190:39" pos:end="190:42"><expr pos:start="190:39" pos:end="190:42"><name pos:start="190:39" pos:end="190:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="192:5" pos:end="194:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="195:5" pos:end="195:60"><expr pos:start="195:5" pos:end="195:59"><name pos:start="195:5" pos:end="195:15">cacerts_len</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <call pos:start="195:19" pos:end="195:59"><name pos:start="195:19" pos:end="195:34">read_binary_file</name><argument_list pos:start="195:35" pos:end="195:59">(<argument pos:start="195:36" pos:end="195:48"><expr pos:start="195:36" pos:end="195:48"><name pos:start="195:36" pos:end="195:48">US903_CACERTS</name></expr></argument>, <argument pos:start="195:51" pos:end="195:58"><expr pos:start="195:51" pos:end="195:58"><operator pos:start="195:51" pos:end="195:51">&amp;</operator><name pos:start="195:52" pos:end="195:58">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="196:5" pos:end="198:5"><if pos:start="196:5" pos:end="198:5">if <condition pos:start="196:8" pos:end="196:25">(<expr pos:start="196:9" pos:end="196:24"><name pos:start="196:9" pos:end="196:19">cacerts_len</name> <operator pos:start="196:21" pos:end="196:22">&lt;=</operator> <literal type="number" pos:start="196:24" pos:end="196:24">0</literal></expr>)</condition> <block pos:start="196:27" pos:end="198:5">{<block_content pos:start="197:9" pos:end="197:17">
        <return pos:start="197:9" pos:end="197:17">return <expr pos:start="197:16" pos:end="197:16"><literal type="number" pos:start="197:16" pos:end="197:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="200:5" pos:end="200:18"><expr pos:start="200:5" pos:end="200:17"><call pos:start="200:5" pos:end="200:17"><name pos:start="200:5" pos:end="200:15">us903_clean</name><argument_list pos:start="200:16" pos:end="200:17">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="202:5" pos:end="205:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="206:5" pos:end="206:34"><expr pos:start="206:5" pos:end="206:33"><name pos:start="206:5" pos:end="206:6">rv</name> <operator pos:start="206:8" pos:end="206:8">=</operator> <call pos:start="206:10" pos:end="206:33"><name pos:start="206:10" pos:end="206:27">us903_start_server</name><argument_list pos:start="206:28" pos:end="206:33">(<argument pos:start="206:29" pos:end="206:29"><expr pos:start="206:29" pos:end="206:29"><literal type="number" pos:start="206:29" pos:end="206:29">0</literal></expr></argument>, <argument pos:start="206:32" pos:end="206:32"><expr pos:start="206:32" pos:end="206:32"><literal type="number" pos:start="206:32" pos:end="206:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="208:5" pos:end="208:14">return <expr pos:start="208:12" pos:end="208:13"><name pos:start="208:12" pos:end="208:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="211:1" pos:end="215:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="216:1" pos:end="221:1"><type pos:start="216:1" pos:end="216:10"><specifier pos:start="216:1" pos:end="216:6">static</specifier> <name pos:start="216:8" pos:end="216:10">int</name></type> <name pos:start="216:12" pos:end="216:30">us903_destory_suite</name> <parameter_list pos:start="216:32" pos:end="216:37">(<parameter pos:start="216:33" pos:end="216:36"><decl pos:start="216:33" pos:end="216:36"><type pos:start="216:33" pos:end="216:36"><name pos:start="216:33" pos:end="216:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="217:1" pos:end="221:1">{<block_content pos:start="218:5" pos:end="220:13">
    <expr_stmt pos:start="218:5" pos:end="218:14"><expr pos:start="218:5" pos:end="218:13"><call pos:start="218:5" pos:end="218:13"><name pos:start="218:5" pos:end="218:11">st_stop</name><argument_list pos:start="218:12" pos:end="218:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="219:5" pos:end="219:18"><expr pos:start="219:5" pos:end="219:17"><call pos:start="219:5" pos:end="219:17"><name pos:start="219:5" pos:end="219:8">free</name><argument_list pos:start="219:9" pos:end="219:17">(<argument pos:start="219:10" pos:end="219:16"><expr pos:start="219:10" pos:end="219:16"><name pos:start="219:10" pos:end="219:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="220:5" pos:end="220:13">return <expr pos:start="220:12" pos:end="220:12"><literal type="number" pos:start="220:12" pos:end="220:12">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="223:1" pos:end="229:3">/*
 * Simple enroll - RSA 2048
 *
 * This test case uses libcurl to test simple
 * enrollment of a 2048 bit RSA CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="230:1" pos:end="245:1"><type pos:start="230:1" pos:end="230:11"><specifier pos:start="230:1" pos:end="230:6">static</specifier> <name pos:start="230:8" pos:end="230:11">void</name></type> <name pos:start="230:13" pos:end="230:23">us903_test1</name> <parameter_list pos:start="230:25" pos:end="230:30">(<parameter pos:start="230:26" pos:end="230:29"><decl pos:start="230:26" pos:end="230:29"><type pos:start="230:26" pos:end="230:29"><name pos:start="230:26" pos:end="230:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="231:1" pos:end="245:1">{<block_content pos:start="232:5" pos:end="244:25">
    <decl_stmt pos:start="232:5" pos:end="232:12"><decl pos:start="232:5" pos:end="232:11"><type pos:start="232:5" pos:end="232:8"><name pos:start="232:5" pos:end="232:8">long</name></type> <name pos:start="232:10" pos:end="232:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="234:5" pos:end="235:5"><expr pos:start="234:5" pos:end="234:15"><name pos:start="234:5" pos:end="234:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="239:72"><expr pos:start="237:5" pos:end="239:71"><name pos:start="237:5" pos:end="237:6">rv</name> <operator pos:start="237:8" pos:end="237:8">=</operator> <call pos:start="237:10" pos:end="239:71"><name pos:start="237:10" pos:end="237:23">curl_http_post</name><argument_list pos:start="237:24" pos:end="239:71">(<argument pos:start="237:25" pos:end="237:43"><expr pos:start="237:25" pos:end="237:43"><name pos:start="237:25" pos:end="237:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="237:46" pos:end="237:60"><expr pos:start="237:46" pos:end="237:60"><name pos:start="237:46" pos:end="237:60">US903_PKCS10_CT</name></expr></argument>,
    <argument pos:start="238:5" pos:end="238:24"><expr pos:start="238:5" pos:end="238:24"><name pos:start="238:5" pos:end="238:24">US903_PKCS10_RSA2048</name></expr></argument>,
    <argument pos:start="239:5" pos:end="239:21"><expr pos:start="239:5" pos:end="239:21"><name pos:start="239:5" pos:end="239:21">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="239:24" pos:end="239:36"><expr pos:start="239:24" pos:end="239:36"><name pos:start="239:24" pos:end="239:36">US903_CACERTS</name></expr></argument>, <argument pos:start="239:39" pos:end="239:52"><expr pos:start="239:39" pos:end="239:52"><name pos:start="239:39" pos:end="239:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="239:55" pos:end="239:58"><expr pos:start="239:55" pos:end="239:58"><name pos:start="239:55" pos:end="239:58">NULL</name></expr></argument>, <argument pos:start="239:61" pos:end="239:64"><expr pos:start="239:61" pos:end="239:64"><name pos:start="239:61" pos:end="239:64">NULL</name></expr></argument>, <argument pos:start="239:67" pos:end="239:70"><expr pos:start="239:67" pos:end="239:70"><name pos:start="239:67" pos:end="239:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="240:5" pos:end="243:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="244:5" pos:end="244:25"><expr pos:start="244:5" pos:end="244:24"><call pos:start="244:5" pos:end="244:24"><name pos:start="244:5" pos:end="244:13">CU_ASSERT</name><argument_list pos:start="244:14" pos:end="244:24">(<argument pos:start="244:15" pos:end="244:23"><expr pos:start="244:15" pos:end="244:23"><name pos:start="244:15" pos:end="244:16">rv</name> <operator pos:start="244:18" pos:end="244:19">==</operator> <literal type="number" pos:start="244:21" pos:end="244:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="247:1" pos:end="253:3">/*
 * Simple enroll - EC prime 256
 *
 * This test case uses libcurl to test simple
 * enrollment of a 256 bit EC CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="254:1" pos:end="269:1"><type pos:start="254:1" pos:end="254:11"><specifier pos:start="254:1" pos:end="254:6">static</specifier> <name pos:start="254:8" pos:end="254:11">void</name></type> <name pos:start="254:13" pos:end="254:23">us903_test2</name> <parameter_list pos:start="254:25" pos:end="254:30">(<parameter pos:start="254:26" pos:end="254:29"><decl pos:start="254:26" pos:end="254:29"><type pos:start="254:26" pos:end="254:29"><name pos:start="254:26" pos:end="254:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="255:1" pos:end="269:1">{<block_content pos:start="256:5" pos:end="268:25">
    <decl_stmt pos:start="256:5" pos:end="256:12"><decl pos:start="256:5" pos:end="256:11"><type pos:start="256:5" pos:end="256:8"><name pos:start="256:5" pos:end="256:8">long</name></type> <name pos:start="256:10" pos:end="256:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="258:5" pos:end="259:5"><expr pos:start="258:5" pos:end="258:15"><name pos:start="258:5" pos:end="258:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="263:42"><expr pos:start="261:5" pos:end="263:41"><name pos:start="261:5" pos:end="261:6">rv</name> <operator pos:start="261:8" pos:end="261:8">=</operator> <call pos:start="261:10" pos:end="263:41"><name pos:start="261:10" pos:end="261:23">curl_http_post</name><argument_list pos:start="261:24" pos:end="263:41">(<argument pos:start="261:25" pos:end="261:43"><expr pos:start="261:25" pos:end="261:43"><name pos:start="261:25" pos:end="261:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="261:46" pos:end="261:60"><expr pos:start="261:46" pos:end="261:60"><name pos:start="261:46" pos:end="261:60">US903_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="262:25" pos:end="262:45"><expr pos:start="262:25" pos:end="262:45"><name pos:start="262:25" pos:end="262:45">US903_PKCS10_ECDSA256</name></expr></argument>,<argument pos:start="262:47" pos:end="262:63"><expr pos:start="262:47" pos:end="262:63"><name pos:start="262:47" pos:end="262:63">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="262:66" pos:end="262:78"><expr pos:start="262:66" pos:end="262:78"><name pos:start="262:66" pos:end="262:78">US903_CACERTS</name></expr></argument>, <argument pos:start="262:81" pos:end="262:94"><expr pos:start="262:81" pos:end="262:94"><name pos:start="262:81" pos:end="262:94">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="263:25" pos:end="263:28"><expr pos:start="263:25" pos:end="263:28"><name pos:start="263:25" pos:end="263:28">NULL</name></expr></argument>, <argument pos:start="263:31" pos:end="263:34"><expr pos:start="263:31" pos:end="263:34"><name pos:start="263:31" pos:end="263:34">NULL</name></expr></argument>, <argument pos:start="263:37" pos:end="263:40"><expr pos:start="263:37" pos:end="263:40"><name pos:start="263:37" pos:end="263:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="264:5" pos:end="267:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="268:5" pos:end="268:25"><expr pos:start="268:5" pos:end="268:24"><call pos:start="268:5" pos:end="268:24"><name pos:start="268:5" pos:end="268:13">CU_ASSERT</name><argument_list pos:start="268:14" pos:end="268:24">(<argument pos:start="268:15" pos:end="268:23"><expr pos:start="268:15" pos:end="268:23"><name pos:start="268:15" pos:end="268:16">rv</name> <operator pos:start="268:18" pos:end="268:19">==</operator> <literal type="number" pos:start="268:21" pos:end="268:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="271:1" pos:end="277:3">/*
 * Simple enroll - DSA prime 1024
 *
 * This test case uses libcurl to test simple
 * enrollment of a 1024 bit DSA CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="278:1" pos:end="293:1"><type pos:start="278:1" pos:end="278:11"><specifier pos:start="278:1" pos:end="278:6">static</specifier> <name pos:start="278:8" pos:end="278:11">void</name></type> <name pos:start="278:13" pos:end="278:23">us903_test3</name> <parameter_list pos:start="278:25" pos:end="278:30">(<parameter pos:start="278:26" pos:end="278:29"><decl pos:start="278:26" pos:end="278:29"><type pos:start="278:26" pos:end="278:29"><name pos:start="278:26" pos:end="278:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="279:1" pos:end="293:1">{<block_content pos:start="280:5" pos:end="292:25">
    <decl_stmt pos:start="280:5" pos:end="280:12"><decl pos:start="280:5" pos:end="280:11"><type pos:start="280:5" pos:end="280:8"><name pos:start="280:5" pos:end="280:8">long</name></type> <name pos:start="280:10" pos:end="280:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="282:5" pos:end="283:5"><expr pos:start="282:5" pos:end="282:15"><name pos:start="282:5" pos:end="282:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="287:42"><expr pos:start="285:5" pos:end="287:41"><name pos:start="285:5" pos:end="285:6">rv</name> <operator pos:start="285:8" pos:end="285:8">=</operator> <call pos:start="285:10" pos:end="287:41"><name pos:start="285:10" pos:end="285:23">curl_http_post</name><argument_list pos:start="285:24" pos:end="287:41">(<argument pos:start="285:25" pos:end="285:43"><expr pos:start="285:25" pos:end="285:43"><name pos:start="285:25" pos:end="285:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="285:46" pos:end="285:60"><expr pos:start="285:46" pos:end="285:60"><name pos:start="285:46" pos:end="285:60">US903_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="286:25" pos:end="286:44"><expr pos:start="286:25" pos:end="286:44"><name pos:start="286:25" pos:end="286:44">US903_PKCS10_DSA1024</name></expr></argument>, <argument pos:start="286:47" pos:end="286:63"><expr pos:start="286:47" pos:end="286:63"><name pos:start="286:47" pos:end="286:63">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="286:66" pos:end="286:78"><expr pos:start="286:66" pos:end="286:78"><name pos:start="286:66" pos:end="286:78">US903_CACERTS</name></expr></argument>, <argument pos:start="286:81" pos:end="286:94"><expr pos:start="286:81" pos:end="286:94"><name pos:start="286:81" pos:end="286:94">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="287:25" pos:end="287:28"><expr pos:start="287:25" pos:end="287:28"><name pos:start="287:25" pos:end="287:28">NULL</name></expr></argument>, <argument pos:start="287:31" pos:end="287:34"><expr pos:start="287:31" pos:end="287:34"><name pos:start="287:31" pos:end="287:34">NULL</name></expr></argument>, <argument pos:start="287:37" pos:end="287:40"><expr pos:start="287:37" pos:end="287:40"><name pos:start="287:37" pos:end="287:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="288:5" pos:end="291:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="292:5" pos:end="292:25"><expr pos:start="292:5" pos:end="292:24"><call pos:start="292:5" pos:end="292:24"><name pos:start="292:5" pos:end="292:13">CU_ASSERT</name><argument_list pos:start="292:14" pos:end="292:24">(<argument pos:start="292:15" pos:end="292:23"><expr pos:start="292:15" pos:end="292:23"><name pos:start="292:15" pos:end="292:16">rv</name> <operator pos:start="292:18" pos:end="292:19">==</operator> <literal type="number" pos:start="292:21" pos:end="292:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="295:1" pos:end="301:3">/*
 * Simple enroll - Corrupted PKCS10
 *
 * This test case uses libcurl to test simple
 * enrollment usinga corrupted CSR.  HTTP Basic
 * authentication is used.
 */</comment>
<function pos:start="302:1" pos:end="317:1"><type pos:start="302:1" pos:end="302:11"><specifier pos:start="302:1" pos:end="302:6">static</specifier> <name pos:start="302:8" pos:end="302:11">void</name></type> <name pos:start="302:13" pos:end="302:23">us903_test4</name> <parameter_list pos:start="302:25" pos:end="302:30">(<parameter pos:start="302:26" pos:end="302:29"><decl pos:start="302:26" pos:end="302:29"><type pos:start="302:26" pos:end="302:29"><name pos:start="302:26" pos:end="302:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="303:1" pos:end="317:1">{<block_content pos:start="304:5" pos:end="316:25">
    <decl_stmt pos:start="304:5" pos:end="304:12"><decl pos:start="304:5" pos:end="304:11"><type pos:start="304:5" pos:end="304:8"><name pos:start="304:5" pos:end="304:8">long</name></type> <name pos:start="304:10" pos:end="304:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="306:5" pos:end="307:5"><expr pos:start="306:5" pos:end="306:15"><name pos:start="306:5" pos:end="306:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="311:42"><expr pos:start="309:5" pos:end="311:41"><name pos:start="309:5" pos:end="309:6">rv</name> <operator pos:start="309:8" pos:end="309:8">=</operator> <call pos:start="309:10" pos:end="311:41"><name pos:start="309:10" pos:end="309:23">curl_http_post</name><argument_list pos:start="309:24" pos:end="311:41">(<argument pos:start="309:25" pos:end="309:43"><expr pos:start="309:25" pos:end="309:43"><name pos:start="309:25" pos:end="309:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="309:46" pos:end="309:60"><expr pos:start="309:46" pos:end="309:60"><name pos:start="309:46" pos:end="309:60">US903_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="310:25" pos:end="310:44"><expr pos:start="310:25" pos:end="310:44"><name pos:start="310:25" pos:end="310:44">US903_PKCS10_CORRUPT</name></expr></argument>, <argument pos:start="310:47" pos:end="310:63"><expr pos:start="310:47" pos:end="310:63"><name pos:start="310:47" pos:end="310:63">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="310:66" pos:end="310:78"><expr pos:start="310:66" pos:end="310:78"><name pos:start="310:66" pos:end="310:78">US903_CACERTS</name></expr></argument>, <argument pos:start="310:81" pos:end="310:94"><expr pos:start="310:81" pos:end="310:94"><name pos:start="310:81" pos:end="310:94">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="311:25" pos:end="311:28"><expr pos:start="311:25" pos:end="311:28"><name pos:start="311:25" pos:end="311:28">NULL</name></expr></argument>, <argument pos:start="311:31" pos:end="311:34"><expr pos:start="311:31" pos:end="311:34"><name pos:start="311:31" pos:end="311:34">NULL</name></expr></argument>, <argument pos:start="311:37" pos:end="311:40"><expr pos:start="311:37" pos:end="311:40"><name pos:start="311:37" pos:end="311:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="312:5" pos:end="315:7">/*
     * Since the CSR is not valid, the server should
     * respond with a 400.
     */</comment>
    <expr_stmt pos:start="316:5" pos:end="316:25"><expr pos:start="316:5" pos:end="316:24"><call pos:start="316:5" pos:end="316:24"><name pos:start="316:5" pos:end="316:13">CU_ASSERT</name><argument_list pos:start="316:14" pos:end="316:24">(<argument pos:start="316:15" pos:end="316:23"><expr pos:start="316:15" pos:end="316:23"><name pos:start="316:15" pos:end="316:16">rv</name> <operator pos:start="316:18" pos:end="316:19">==</operator> <literal type="number" pos:start="316:21" pos:end="316:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="319:1" pos:end="324:3">/*
 * Simple enroll - manual enrollment
 *
 * This test case verifies the server is
 * sending the appropriate retry-after response.
 */</comment>
<function pos:start="325:1" pos:end="378:1"><type pos:start="325:1" pos:end="325:11"><specifier pos:start="325:1" pos:end="325:6">static</specifier> <name pos:start="325:8" pos:end="325:11">void</name></type> <name pos:start="325:13" pos:end="325:23">us903_test5</name> <parameter_list pos:start="325:25" pos:end="325:30">(<parameter pos:start="325:26" pos:end="325:29"><decl pos:start="325:26" pos:end="325:29"><type pos:start="325:26" pos:end="325:29"><name pos:start="325:26" pos:end="325:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="326:1" pos:end="378:1">{<block_content pos:start="327:5" pos:end="377:29">
    <decl_stmt pos:start="327:5" pos:end="327:12"><decl pos:start="327:5" pos:end="327:11"><type pos:start="327:5" pos:end="327:8"><name pos:start="327:5" pos:end="327:8">long</name></type> <name pos:start="327:10" pos:end="327:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="329:5" pos:end="330:5"><expr pos:start="329:5" pos:end="329:15"><name pos:start="329:5" pos:end="329:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="332:5" pos:end="332:29">/* Stop the EST server */</comment>
    <expr_stmt pos:start="333:5" pos:end="333:14"><expr pos:start="333:5" pos:end="333:13"><call pos:start="333:5" pos:end="333:13"><name pos:start="333:5" pos:end="333:11">st_stop</name><argument_list pos:start="333:12" pos:end="333:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="335:5" pos:end="335:59">/* Restart the server with manual enrollment enabled */</comment>
    <expr_stmt pos:start="336:5" pos:end="336:29"><expr pos:start="336:5" pos:end="336:28"><call pos:start="336:5" pos:end="336:28"><name pos:start="336:5" pos:end="336:22">us903_start_server</name><argument_list pos:start="336:23" pos:end="336:28">(<argument pos:start="336:24" pos:end="336:24"><expr pos:start="336:24" pos:end="336:24"><literal type="number" pos:start="336:24" pos:end="336:24">1</literal></expr></argument>, <argument pos:start="336:27" pos:end="336:27"><expr pos:start="336:27" pos:end="336:27"><literal type="number" pos:start="336:27" pos:end="336:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="338:5" pos:end="338:40"><expr pos:start="338:5" pos:end="338:39"><name pos:start="338:5" pos:end="338:11">outfile</name> <operator pos:start="338:13" pos:end="338:13">=</operator> <call pos:start="338:15" pos:end="338:39"><name pos:start="338:15" pos:end="338:19">fopen</name><argument_list pos:start="338:20" pos:end="338:39">(<argument pos:start="338:21" pos:end="338:33"><expr pos:start="338:21" pos:end="338:33"><name pos:start="338:21" pos:end="338:33">test5_outfile</name></expr></argument>, <argument pos:start="338:36" pos:end="338:38"><expr pos:start="338:36" pos:end="338:38"><literal type="string" pos:start="338:36" pos:end="338:38">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="339:5" pos:end="341:49"><expr pos:start="339:5" pos:end="341:48"><name pos:start="339:5" pos:end="339:6">rv</name> <operator pos:start="339:8" pos:end="339:8">=</operator> <call pos:start="339:10" pos:end="341:48"><name pos:start="339:10" pos:end="339:23">curl_http_post</name><argument_list pos:start="339:24" pos:end="341:48">(<argument pos:start="339:25" pos:end="339:43"><expr pos:start="339:25" pos:end="339:43"><name pos:start="339:25" pos:end="339:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="339:46" pos:end="339:60"><expr pos:start="339:46" pos:end="339:60"><name pos:start="339:46" pos:end="339:60">US903_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="340:25" pos:end="340:44"><expr pos:start="340:25" pos:end="340:44"><name pos:start="340:25" pos:end="340:44">US903_PKCS10_RSA2048</name></expr></argument>, <argument pos:start="340:47" pos:end="340:63"><expr pos:start="340:47" pos:end="340:63"><name pos:start="340:47" pos:end="340:63">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="340:66" pos:end="340:78"><expr pos:start="340:66" pos:end="340:78"><name pos:start="340:66" pos:end="340:78">US903_CACERTS</name></expr></argument>, <argument pos:start="340:81" pos:end="340:94"><expr pos:start="340:81" pos:end="340:94"><name pos:start="340:81" pos:end="340:94">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="341:25" pos:end="341:28"><expr pos:start="341:25" pos:end="341:28"><name pos:start="341:25" pos:end="341:28">NULL</name></expr></argument>, <argument pos:start="341:31" pos:end="341:34"><expr pos:start="341:31" pos:end="341:34"><name pos:start="341:31" pos:end="341:34">NULL</name></expr></argument>, <argument pos:start="341:37" pos:end="341:47"><expr pos:start="341:37" pos:end="341:47"><operator pos:start="341:37" pos:end="341:37">&amp;</operator><name pos:start="341:38" pos:end="341:47">write_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="342:5" pos:end="342:20"><expr pos:start="342:5" pos:end="342:19"><call pos:start="342:5" pos:end="342:19"><name pos:start="342:5" pos:end="342:10">fclose</name><argument_list pos:start="342:11" pos:end="342:19">(<argument pos:start="342:12" pos:end="342:18"><expr pos:start="342:12" pos:end="342:18"><name pos:start="342:12" pos:end="342:18">outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="344:5" pos:end="347:7">/*
     * Since the server hasn't seen this CSR in the past,
     * it should respond with a retry-after 202 response.
     */</comment>
    <expr_stmt pos:start="348:5" pos:end="348:25"><expr pos:start="348:5" pos:end="348:24"><call pos:start="348:5" pos:end="348:24"><name pos:start="348:5" pos:end="348:13">CU_ASSERT</name><argument_list pos:start="348:14" pos:end="348:24">(<argument pos:start="348:15" pos:end="348:23"><expr pos:start="348:15" pos:end="348:23"><name pos:start="348:15" pos:end="348:16">rv</name> <operator pos:start="348:18" pos:end="348:19">==</operator> <literal type="number" pos:start="348:21" pos:end="348:23">202</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="350:5" pos:end="352:7">/*
     * Verify the retry-after value
     */</comment>
    <expr_stmt pos:start="353:5" pos:end="353:50"><expr pos:start="353:5" pos:end="353:49"><name pos:start="353:5" pos:end="353:6">rv</name> <operator pos:start="353:8" pos:end="353:8">=</operator> <call pos:start="353:10" pos:end="353:49"><name pos:start="353:10" pos:end="353:13">grep</name><argument_list pos:start="353:14" pos:end="353:49">(<argument pos:start="353:15" pos:end="353:27"><expr pos:start="353:15" pos:end="353:27"><name pos:start="353:15" pos:end="353:27">test5_outfile</name></expr></argument>, <argument pos:start="353:30" pos:end="353:48"><expr pos:start="353:30" pos:end="353:48"><literal type="string" pos:start="353:30" pos:end="353:48">"Retry-After: 3600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="354:5" pos:end="354:23"><expr pos:start="354:5" pos:end="354:22"><call pos:start="354:5" pos:end="354:22"><name pos:start="354:5" pos:end="354:13">CU_ASSERT</name><argument_list pos:start="354:14" pos:end="354:22">(<argument pos:start="354:15" pos:end="354:21"><expr pos:start="354:15" pos:end="354:21"><name pos:start="354:15" pos:end="354:16">rv</name> <operator pos:start="354:18" pos:end="354:19">==</operator> <literal type="number" pos:start="354:21" pos:end="354:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="356:5" pos:end="360:7">/*
     * We will avoid waiting the full retry period since we're
     * only simulating manual enrollment.  Wait a second and then
     * try to enroll the cert again.
     */</comment>
    <expr_stmt pos:start="361:5" pos:end="361:13"><expr pos:start="361:5" pos:end="361:12"><call pos:start="361:5" pos:end="361:12"><name pos:start="361:5" pos:end="361:9">SLEEP</name><argument_list pos:start="361:10" pos:end="361:12">(<argument pos:start="361:11" pos:end="361:11"><expr pos:start="361:11" pos:end="361:11"><literal type="number" pos:start="361:11" pos:end="361:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="362:5" pos:end="364:42"><expr pos:start="362:5" pos:end="364:41"><name pos:start="362:5" pos:end="362:6">rv</name> <operator pos:start="362:8" pos:end="362:8">=</operator> <call pos:start="362:10" pos:end="364:41"><name pos:start="362:10" pos:end="362:23">curl_http_post</name><argument_list pos:start="362:24" pos:end="364:41">(<argument pos:start="362:25" pos:end="362:43"><expr pos:start="362:25" pos:end="362:43"><name pos:start="362:25" pos:end="362:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="362:46" pos:end="362:60"><expr pos:start="362:46" pos:end="362:60"><name pos:start="362:46" pos:end="362:60">US903_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="363:25" pos:end="363:44"><expr pos:start="363:25" pos:end="363:44"><name pos:start="363:25" pos:end="363:44">US903_PKCS10_RSA2048</name></expr></argument>, <argument pos:start="363:47" pos:end="363:63"><expr pos:start="363:47" pos:end="363:63"><name pos:start="363:47" pos:end="363:63">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="363:66" pos:end="363:78"><expr pos:start="363:66" pos:end="363:78"><name pos:start="363:66" pos:end="363:78">US903_CACERTS</name></expr></argument>, <argument pos:start="363:81" pos:end="363:94"><expr pos:start="363:81" pos:end="363:94"><name pos:start="363:81" pos:end="363:94">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="364:25" pos:end="364:28"><expr pos:start="364:25" pos:end="364:28"><name pos:start="364:25" pos:end="364:28">NULL</name></expr></argument>, <argument pos:start="364:31" pos:end="364:34"><expr pos:start="364:31" pos:end="364:34"><name pos:start="364:31" pos:end="364:34">NULL</name></expr></argument>, <argument pos:start="364:37" pos:end="364:40"><expr pos:start="364:37" pos:end="364:40"><name pos:start="364:37" pos:end="364:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="366:5" pos:end="370:7">/*
     * This enrollment request should succeed this time
     * Our simulated manual enrollment will automatically
     * enroll on the second attempt.
     */</comment>
    <expr_stmt pos:start="371:5" pos:end="371:25"><expr pos:start="371:5" pos:end="371:24"><call pos:start="371:5" pos:end="371:24"><name pos:start="371:5" pos:end="371:13">CU_ASSERT</name><argument_list pos:start="371:14" pos:end="371:24">(<argument pos:start="371:15" pos:end="371:23"><expr pos:start="371:15" pos:end="371:23"><name pos:start="371:15" pos:end="371:16">rv</name> <operator pos:start="371:18" pos:end="371:19">==</operator> <literal type="number" pos:start="371:21" pos:end="371:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="373:5" pos:end="373:29">/* Stop the EST server */</comment>
    <expr_stmt pos:start="374:5" pos:end="374:14"><expr pos:start="374:5" pos:end="374:13"><call pos:start="374:5" pos:end="374:13"><name pos:start="374:5" pos:end="374:11">st_stop</name><argument_list pos:start="374:12" pos:end="374:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="376:5" pos:end="376:60">/* Restart the server with manual enrollment disabled */</comment>
    <expr_stmt pos:start="377:5" pos:end="377:29"><expr pos:start="377:5" pos:end="377:28"><call pos:start="377:5" pos:end="377:28"><name pos:start="377:5" pos:end="377:22">us903_start_server</name><argument_list pos:start="377:23" pos:end="377:28">(<argument pos:start="377:24" pos:end="377:24"><expr pos:start="377:24" pos:end="377:24"><literal type="number" pos:start="377:24" pos:end="377:24">0</literal></expr></argument>, <argument pos:start="377:27" pos:end="377:27"><expr pos:start="377:27" pos:end="377:27"><literal type="number" pos:start="377:27" pos:end="377:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="380:1" pos:end="386:3">/*
 * Simple enroll - PoP check fails with curl
 *
 * This test case verifies the server is
 * verifying the PoP from the client CSR.  Since curl does not
 * set the PoP, the EST enrollment should fail.
 */</comment>
<function pos:start="387:1" pos:end="410:1"><type pos:start="387:1" pos:end="387:11"><specifier pos:start="387:1" pos:end="387:6">static</specifier> <name pos:start="387:8" pos:end="387:11">void</name></type> <name pos:start="387:13" pos:end="387:23">us903_test6</name> <parameter_list pos:start="387:25" pos:end="387:30">(<parameter pos:start="387:26" pos:end="387:29"><decl pos:start="387:26" pos:end="387:29"><type pos:start="387:26" pos:end="387:29"><name pos:start="387:26" pos:end="387:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="388:1" pos:end="410:1">{<block_content pos:start="389:5" pos:end="409:21">
    <decl_stmt pos:start="389:5" pos:end="389:12"><decl pos:start="389:5" pos:end="389:11"><type pos:start="389:5" pos:end="389:8"><name pos:start="389:5" pos:end="389:8">long</name></type> <name pos:start="389:10" pos:end="389:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="391:5" pos:end="392:5"><expr pos:start="391:5" pos:end="391:15"><name pos:start="391:5" pos:end="391:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <expr_stmt pos:start="394:5" pos:end="394:20"><expr pos:start="394:5" pos:end="394:19"><call pos:start="394:5" pos:end="394:19"><name pos:start="394:5" pos:end="394:17">st_enable_pop</name><argument_list pos:start="394:18" pos:end="394:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="396:5" pos:end="399:7">/*
     * Send a valid enroll request using curl.  Curl does not
     * include the PoP
     */</comment>
    <expr_stmt pos:start="400:5" pos:end="402:42"><expr pos:start="400:5" pos:end="402:41"><name pos:start="400:5" pos:end="400:6">rv</name> <operator pos:start="400:8" pos:end="400:8">=</operator> <call pos:start="400:10" pos:end="402:41"><name pos:start="400:10" pos:end="400:23">curl_http_post</name><argument_list pos:start="400:24" pos:end="402:41">(<argument pos:start="400:25" pos:end="400:43"><expr pos:start="400:25" pos:end="400:43"><name pos:start="400:25" pos:end="400:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="400:46" pos:end="400:60"><expr pos:start="400:46" pos:end="400:60"><name pos:start="400:46" pos:end="400:60">US903_PKCS10_CT</name></expr></argument>,
                        <argument pos:start="401:25" pos:end="401:44"><expr pos:start="401:25" pos:end="401:44"><name pos:start="401:25" pos:end="401:44">US903_PKCS10_RSA2048</name></expr></argument>, <argument pos:start="401:47" pos:end="401:63"><expr pos:start="401:47" pos:end="401:63"><name pos:start="401:47" pos:end="401:63">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="401:66" pos:end="401:78"><expr pos:start="401:66" pos:end="401:78"><name pos:start="401:66" pos:end="401:78">US903_CACERTS</name></expr></argument>, <argument pos:start="401:81" pos:end="401:94"><expr pos:start="401:81" pos:end="401:94"><name pos:start="401:81" pos:end="401:94">CURLAUTH_BASIC</name></expr></argument>,
                        <argument pos:start="402:25" pos:end="402:28"><expr pos:start="402:25" pos:end="402:28"><name pos:start="402:25" pos:end="402:28">NULL</name></expr></argument>, <argument pos:start="402:31" pos:end="402:34"><expr pos:start="402:31" pos:end="402:34"><name pos:start="402:31" pos:end="402:34">NULL</name></expr></argument>, <argument pos:start="402:37" pos:end="402:40"><expr pos:start="402:37" pos:end="402:40"><name pos:start="402:37" pos:end="402:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="404:5" pos:end="406:7">/*
     * The server should respond with a failure code
     */</comment>
    <expr_stmt pos:start="407:5" pos:end="407:25"><expr pos:start="407:5" pos:end="407:24"><call pos:start="407:5" pos:end="407:24"><name pos:start="407:5" pos:end="407:13">CU_ASSERT</name><argument_list pos:start="407:14" pos:end="407:24">(<argument pos:start="407:15" pos:end="407:23"><expr pos:start="407:15" pos:end="407:23"><name pos:start="407:15" pos:end="407:16">rv</name> <operator pos:start="407:18" pos:end="407:19">==</operator> <literal type="number" pos:start="407:21" pos:end="407:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:21"><expr pos:start="409:5" pos:end="409:20"><call pos:start="409:5" pos:end="409:20"><name pos:start="409:5" pos:end="409:18">st_disable_pop</name><argument_list pos:start="409:19" pos:end="409:20">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="412:1" pos:end="418:3">/*
 * Simple enroll - PoP check succeeds with estclient
 *
 * This test case verifies the server is
 * verifying the PoP from the client CSR.  We use
 * estclient since it supports the PoP.
 */</comment>
<function pos:start="419:1" pos:end="501:1"><type pos:start="419:1" pos:end="419:11"><specifier pos:start="419:1" pos:end="419:6">static</specifier> <name pos:start="419:8" pos:end="419:11">void</name></type> <name pos:start="419:13" pos:end="419:23">us903_test7</name> <parameter_list pos:start="419:25" pos:end="419:30">(<parameter pos:start="419:26" pos:end="419:29"><decl pos:start="419:26" pos:end="419:29"><type pos:start="419:26" pos:end="419:29"><name pos:start="419:26" pos:end="419:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="420:1" pos:end="501:1">{<block_content pos:start="421:5" pos:end="500:21">
    <decl_stmt pos:start="421:5" pos:end="421:12"><decl pos:start="421:5" pos:end="421:11"><type pos:start="421:5" pos:end="421:8"><name pos:start="421:5" pos:end="421:8">long</name></type> <name pos:start="421:10" pos:end="421:11">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="422:5" pos:end="422:19"><decl pos:start="422:5" pos:end="422:18"><type pos:start="422:5" pos:end="422:13"><name pos:start="422:5" pos:end="422:11">EST_CTX</name> <modifier pos:start="422:13" pos:end="422:13">*</modifier></type><name pos:start="422:14" pos:end="422:18">c_ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="423:5" pos:end="423:23"><decl pos:start="423:5" pos:end="423:22"><type pos:start="423:5" pos:end="423:14"><name pos:start="423:5" pos:end="423:12">EVP_PKEY</name> <modifier pos:start="423:14" pos:end="423:14">*</modifier></type><name pos:start="423:15" pos:end="423:22">new_pkey</name></decl>;</decl_stmt>
    <decl_stmt pos:start="424:5" pos:end="424:25"><decl pos:start="424:5" pos:end="424:24"><type pos:start="424:5" pos:end="424:19"><name pos:start="424:5" pos:end="424:12">unsigned</name> <name pos:start="424:14" pos:end="424:17">char</name> <modifier pos:start="424:19" pos:end="424:19">*</modifier></type><name pos:start="424:20" pos:end="424:24">pkcs7</name></decl>;</decl_stmt>
    <decl_stmt pos:start="425:5" pos:end="425:18"><decl pos:start="425:5" pos:end="425:17"><type pos:start="425:5" pos:end="425:7"><name pos:start="425:5" pos:end="425:7">int</name></type> <name pos:start="425:9" pos:end="425:17">pkcs7_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="426:5" pos:end="426:29"><decl pos:start="426:5" pos:end="426:28"><type pos:start="426:5" pos:end="426:19"><name pos:start="426:5" pos:end="426:12">unsigned</name> <name pos:start="426:14" pos:end="426:17">char</name> <modifier pos:start="426:19" pos:end="426:19">*</modifier></type><name pos:start="426:20" pos:end="426:28">attr_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="427:5" pos:end="427:17"><decl pos:start="427:5" pos:end="427:16"><type pos:start="427:5" pos:end="427:7"><name pos:start="427:5" pos:end="427:7">int</name></type> <name pos:start="427:9" pos:end="427:16">attr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="428:5" pos:end="428:20"><decl pos:start="428:5" pos:end="428:19"><type pos:start="428:5" pos:end="428:7"><name pos:start="428:5" pos:end="428:7">int</name></type> <name pos:start="428:9" pos:end="428:19">http_status</name></decl>;</decl_stmt>

    <expr_stmt pos:start="430:5" pos:end="431:5"><expr pos:start="430:5" pos:end="430:15"><name pos:start="430:5" pos:end="430:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="433:5" pos:end="435:7">/*
     * This test case requires PoP to be enabled
     */</comment>
    <expr_stmt pos:start="436:5" pos:end="436:20"><expr pos:start="436:5" pos:end="436:19"><call pos:start="436:5" pos:end="436:19"><name pos:start="436:5" pos:end="436:17">st_enable_pop</name><argument_list pos:start="436:18" pos:end="436:19">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="438:5" pos:end="440:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="441:5" pos:end="445:35"><expr pos:start="441:5" pos:end="445:34"><name pos:start="441:5" pos:end="441:9">c_ctx</name> <operator pos:start="441:11" pos:end="441:11">=</operator> <call pos:start="441:13" pos:end="445:34"><name pos:start="441:13" pos:end="441:27">est_client_init</name><argument_list pos:start="441:28" pos:end="445:34">(
        <argument pos:start="442:9" pos:end="442:15"><expr pos:start="442:9" pos:end="442:15"><name pos:start="442:9" pos:end="442:15">cacerts</name></expr></argument>,
        <argument pos:start="443:9" pos:end="443:19"><expr pos:start="443:9" pos:end="443:19"><name pos:start="443:9" pos:end="443:19">cacerts_len</name></expr></argument>,
        <argument pos:start="444:9" pos:end="444:27"><expr pos:start="444:9" pos:end="444:27"><name pos:start="444:9" pos:end="444:27">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="445:9" pos:end="445:33"><expr pos:start="445:9" pos:end="445:33"><name pos:start="445:9" pos:end="445:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="446:5" pos:end="446:29"><expr pos:start="446:5" pos:end="446:28"><call pos:start="446:5" pos:end="446:28"><name pos:start="446:5" pos:end="446:13">CU_ASSERT</name><argument_list pos:start="446:14" pos:end="446:28">(<argument pos:start="446:15" pos:end="446:27"><expr pos:start="446:15" pos:end="446:27"><name pos:start="446:15" pos:end="446:19">c_ctx</name> <operator pos:start="446:21" pos:end="446:22">!=</operator> <name pos:start="446:24" pos:end="446:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="447:5" pos:end="449:5"><if pos:start="447:5" pos:end="449:5">if <condition pos:start="447:8" pos:end="447:15">(<expr pos:start="447:9" pos:end="447:14"><operator pos:start="447:9" pos:end="447:9">!</operator><name pos:start="447:10" pos:end="447:14">c_ctx</name></expr>)</condition> <block pos:start="447:17" pos:end="449:5">{<block_content pos:start="448:9" pos:end="448:15">
        <return pos:start="448:9" pos:end="448:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="451:5" pos:end="454:7">/*
     * Specify user ID and password since the server is running
     * in Basic Authentication mode.
     */</comment>
    <expr_stmt pos:start="455:5" pos:end="455:69"><expr pos:start="455:5" pos:end="455:68"><name pos:start="455:5" pos:end="455:6">rv</name> <operator pos:start="455:8" pos:end="455:8">=</operator> <call pos:start="455:10" pos:end="455:68"><name pos:start="455:10" pos:end="455:28">est_client_set_auth</name><argument_list pos:start="455:29" pos:end="455:68">(<argument pos:start="455:30" pos:end="455:34"><expr pos:start="455:30" pos:end="455:34"><name pos:start="455:30" pos:end="455:34">c_ctx</name></expr></argument>, <argument pos:start="455:37" pos:end="455:45"><expr pos:start="455:37" pos:end="455:45"><literal type="string" pos:start="455:37" pos:end="455:45">"estuser"</literal></expr></argument>, <argument pos:start="455:48" pos:end="455:55"><expr pos:start="455:48" pos:end="455:55"><literal type="string" pos:start="455:48" pos:end="455:55">"estpwd"</literal></expr></argument>, <argument pos:start="455:58" pos:end="455:61"><expr pos:start="455:58" pos:end="455:61"><name pos:start="455:58" pos:end="455:61">NULL</name></expr></argument>, <argument pos:start="455:64" pos:end="455:67"><expr pos:start="455:64" pos:end="455:67"><name pos:start="455:64" pos:end="455:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="456:5" pos:end="456:34"><expr pos:start="456:5" pos:end="456:33"><call pos:start="456:5" pos:end="456:33"><name pos:start="456:5" pos:end="456:13">CU_ASSERT</name><argument_list pos:start="456:14" pos:end="456:33">(<argument pos:start="456:15" pos:end="456:32"><expr pos:start="456:15" pos:end="456:32"><name pos:start="456:15" pos:end="456:16">rv</name> <operator pos:start="456:18" pos:end="456:19">==</operator> <name pos:start="456:21" pos:end="456:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="457:5" pos:end="457:68"><expr pos:start="457:5" pos:end="457:67"><call pos:start="457:5" pos:end="457:67"><name pos:start="457:5" pos:end="457:25">est_client_set_server</name><argument_list pos:start="457:26" pos:end="457:67">(<argument pos:start="457:27" pos:end="457:31"><expr pos:start="457:27" pos:end="457:31"><name pos:start="457:27" pos:end="457:31">c_ctx</name></expr></argument>, <argument pos:start="457:34" pos:end="457:44"><expr pos:start="457:34" pos:end="457:44"><literal type="string" pos:start="457:34" pos:end="457:44">"127.0.0.1"</literal></expr></argument>, <argument pos:start="457:47" pos:end="457:60"><expr pos:start="457:47" pos:end="457:60"><name pos:start="457:47" pos:end="457:60">US903_TCP_PORT</name></expr></argument>, <argument pos:start="457:63" pos:end="457:66"><expr pos:start="457:63" pos:end="457:66"><name pos:start="457:63" pos:end="457:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="459:5" pos:end="461:7">/*
     * get a keypair to be used in the enroll.
     */</comment>
    <expr_stmt pos:start="462:5" pos:end="462:38"><expr pos:start="462:5" pos:end="462:37"><name pos:start="462:5" pos:end="462:12">new_pkey</name> <operator pos:start="462:14" pos:end="462:14">=</operator> <call pos:start="462:16" pos:end="462:37"><name pos:start="462:16" pos:end="462:35">generate_private_key</name><argument_list pos:start="462:36" pos:end="462:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="464:5" pos:end="464:63"><expr pos:start="464:5" pos:end="464:62"><name pos:start="464:5" pos:end="464:6">rv</name> <operator pos:start="464:8" pos:end="464:8">=</operator> <call pos:start="464:10" pos:end="464:62"><name pos:start="464:10" pos:end="464:32">est_client_get_csrattrs</name><argument_list pos:start="464:33" pos:end="464:62">(<argument pos:start="464:34" pos:end="464:38"><expr pos:start="464:34" pos:end="464:38"><name pos:start="464:34" pos:end="464:38">c_ctx</name></expr></argument>, <argument pos:start="464:41" pos:end="464:50"><expr pos:start="464:41" pos:end="464:50"><operator pos:start="464:41" pos:end="464:41">&amp;</operator><name pos:start="464:42" pos:end="464:50">attr_data</name></expr></argument>, <argument pos:start="464:53" pos:end="464:61"><expr pos:start="464:53" pos:end="464:61"><operator pos:start="464:53" pos:end="464:53">&amp;</operator><name pos:start="464:54" pos:end="464:61">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="465:5" pos:end="465:34"><expr pos:start="465:5" pos:end="465:33"><call pos:start="465:5" pos:end="465:33"><name pos:start="465:5" pos:end="465:13">CU_ASSERT</name><argument_list pos:start="465:14" pos:end="465:33">(<argument pos:start="465:15" pos:end="465:32"><expr pos:start="465:15" pos:end="465:32"><name pos:start="465:15" pos:end="465:16">rv</name> <operator pos:start="465:18" pos:end="465:19">==</operator> <name pos:start="465:21" pos:end="465:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="467:5" pos:end="469:7">/*
     * Attempt to enroll a CSR
     */</comment>
    <expr_stmt pos:start="470:5" pos:end="470:74"><expr pos:start="470:5" pos:end="470:73"><name pos:start="470:5" pos:end="470:6">rv</name> <operator pos:start="470:8" pos:end="470:8">=</operator> <call pos:start="470:10" pos:end="470:73"><name pos:start="470:10" pos:end="470:26">est_client_enroll</name><argument_list pos:start="470:27" pos:end="470:73">(<argument pos:start="470:28" pos:end="470:32"><expr pos:start="470:28" pos:end="470:32"><name pos:start="470:28" pos:end="470:32">c_ctx</name></expr></argument>, <argument pos:start="470:35" pos:end="470:50"><expr pos:start="470:35" pos:end="470:50"><literal type="string" pos:start="470:35" pos:end="470:50">"US903-test7 CN"</literal></expr></argument>, <argument pos:start="470:53" pos:end="470:62"><expr pos:start="470:53" pos:end="470:62"><operator pos:start="470:53" pos:end="470:53">&amp;</operator><name pos:start="470:54" pos:end="470:62">pkcs7_len</name></expr></argument>, <argument pos:start="470:65" pos:end="470:72"><expr pos:start="470:65" pos:end="470:72"><name pos:start="470:65" pos:end="470:72">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="471:5" pos:end="471:34"><expr pos:start="471:5" pos:end="471:33"><call pos:start="471:5" pos:end="471:33"><name pos:start="471:5" pos:end="471:13">CU_ASSERT</name><argument_list pos:start="471:14" pos:end="471:33">(<argument pos:start="471:15" pos:end="471:32"><expr pos:start="471:15" pos:end="471:32"><name pos:start="471:15" pos:end="471:16">rv</name> <operator pos:start="471:18" pos:end="471:19">==</operator> <name pos:start="471:21" pos:end="471:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="473:5" pos:end="475:7">/*
     * Check HTTP status code received from server is 200
     */</comment>
    <expr_stmt pos:start="476:5" pos:end="476:57"><expr pos:start="476:5" pos:end="476:56"><name pos:start="476:5" pos:end="476:15">http_status</name> <operator pos:start="476:17" pos:end="476:17">=</operator> <call pos:start="476:19" pos:end="476:56"><name pos:start="476:19" pos:end="476:49">est_client_get_last_http_status</name><argument_list pos:start="476:50" pos:end="476:56">(<argument pos:start="476:51" pos:end="476:55"><expr pos:start="476:51" pos:end="476:55"><name pos:start="476:51" pos:end="476:55">c_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="477:5" pos:end="477:34"><expr pos:start="477:5" pos:end="477:33"><call pos:start="477:5" pos:end="477:33"><name pos:start="477:5" pos:end="477:13">CU_ASSERT</name><argument_list pos:start="477:14" pos:end="477:33">(<argument pos:start="477:15" pos:end="477:32"><expr pos:start="477:15" pos:end="477:32"><name pos:start="477:15" pos:end="477:25">http_status</name> <operator pos:start="477:27" pos:end="477:28">==</operator> <literal type="number" pos:start="477:30" pos:end="477:32">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="479:5" pos:end="482:7">/*
     * Client library has obtained the new client certificate.
     * Now retrieve it from the library.
     */</comment>
    <expr_stmt pos:start="483:5" pos:end="483:30"><expr pos:start="483:5" pos:end="483:29"><name pos:start="483:5" pos:end="483:9">pkcs7</name> <operator pos:start="483:11" pos:end="483:11">=</operator> <call pos:start="483:13" pos:end="483:29"><name pos:start="483:13" pos:end="483:18">malloc</name><argument_list pos:start="483:19" pos:end="483:29">(<argument pos:start="483:20" pos:end="483:28"><expr pos:start="483:20" pos:end="483:28"><name pos:start="483:20" pos:end="483:28">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="484:5" pos:end="486:5"><if pos:start="484:5" pos:end="486:5">if <condition pos:start="484:8" pos:end="484:15">(<expr pos:start="484:9" pos:end="484:14"><operator pos:start="484:9" pos:end="484:9">!</operator><name pos:start="484:10" pos:end="484:14">pkcs7</name></expr>)</condition> <block pos:start="484:17" pos:end="486:5">{<block_content pos:start="485:9" pos:end="485:15">
        <return pos:start="485:9" pos:end="485:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="487:5" pos:end="487:53"><expr pos:start="487:5" pos:end="487:52"><name pos:start="487:5" pos:end="487:6">rv</name> <operator pos:start="487:8" pos:end="487:8">=</operator> <call pos:start="487:10" pos:end="487:52"><name pos:start="487:10" pos:end="487:38">est_client_copy_enrolled_cert</name><argument_list pos:start="487:39" pos:end="487:52">(<argument pos:start="487:40" pos:end="487:44"><expr pos:start="487:40" pos:end="487:44"><name pos:start="487:40" pos:end="487:44">c_ctx</name></expr></argument>, <argument pos:start="487:47" pos:end="487:51"><expr pos:start="487:47" pos:end="487:51"><name pos:start="487:47" pos:end="487:51">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="488:5" pos:end="488:34"><expr pos:start="488:5" pos:end="488:33"><call pos:start="488:5" pos:end="488:33"><name pos:start="488:5" pos:end="488:13">CU_ASSERT</name><argument_list pos:start="488:14" pos:end="488:33">(<argument pos:start="488:15" pos:end="488:32"><expr pos:start="488:15" pos:end="488:32"><name pos:start="488:15" pos:end="488:16">rv</name> <operator pos:start="488:18" pos:end="488:19">==</operator> <name pos:start="488:21" pos:end="488:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="490:5" pos:end="492:7">/*
     * Clean up
     */</comment>
    <expr_stmt pos:start="493:5" pos:end="493:23"><expr pos:start="493:5" pos:end="493:22"><call pos:start="493:5" pos:end="493:22"><name pos:start="493:5" pos:end="493:15">est_destroy</name><argument_list pos:start="493:16" pos:end="493:22">(<argument pos:start="493:17" pos:end="493:21"><expr pos:start="493:17" pos:end="493:21"><name pos:start="493:17" pos:end="493:21">c_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="494:5" pos:end="494:28"><expr pos:start="494:5" pos:end="494:27"><call pos:start="494:5" pos:end="494:27"><name pos:start="494:5" pos:end="494:17">EVP_PKEY_free</name><argument_list pos:start="494:18" pos:end="494:27">(<argument pos:start="494:19" pos:end="494:26"><expr pos:start="494:19" pos:end="494:26"><name pos:start="494:19" pos:end="494:26">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="495:5" pos:end="495:16"><expr pos:start="495:5" pos:end="495:15"><call pos:start="495:5" pos:end="495:15"><name pos:start="495:5" pos:end="495:8">free</name><argument_list pos:start="495:9" pos:end="495:15">(<argument pos:start="495:10" pos:end="495:14"><expr pos:start="495:10" pos:end="495:14"><name pos:start="495:10" pos:end="495:14">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="497:5" pos:end="499:7">/*
     * Disable PoP for future test cases
     */</comment>
    <expr_stmt pos:start="500:5" pos:end="500:21"><expr pos:start="500:5" pos:end="500:20"><call pos:start="500:5" pos:end="500:20"><name pos:start="500:5" pos:end="500:18">st_disable_pop</name><argument_list pos:start="500:19" pos:end="500:20">()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="503:1" pos:end="508:3">/*
 * Simple enroll - Use a non-default ECDHE curve
 *
 * This test case verifies the est_server_set_ecdhe_curve()
 * function is working.
 */</comment>
<function pos:start="509:1" pos:end="555:0"><type pos:start="509:1" pos:end="509:11"><specifier pos:start="509:1" pos:end="509:6">static</specifier> <name pos:start="509:8" pos:end="509:11">void</name></type> <name pos:start="509:13" pos:end="509:23">us903_test8</name> <parameter_list pos:start="509:25" pos:end="509:30">(<parameter pos:start="509:26" pos:end="509:29"><decl pos:start="509:26" pos:end="509:29"><type pos:start="509:26" pos:end="509:29"><name pos:start="509:26" pos:end="509:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="510:1" pos:end="555:0">{<block_content pos:start="511:5" pos:end="536:25">
    <decl_stmt pos:start="511:5" pos:end="511:12"><decl pos:start="511:5" pos:end="511:11"><type pos:start="511:5" pos:end="511:8"><name pos:start="511:5" pos:end="511:8">long</name></type> <name pos:start="511:10" pos:end="511:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="513:5" pos:end="514:5"><expr pos:start="513:5" pos:end="513:15"><name pos:start="513:5" pos:end="513:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="516:5" pos:end="516:29">/* Stop the EST server */</comment>
    <expr_stmt pos:start="517:5" pos:end="517:14"><expr pos:start="517:5" pos:end="517:13"><call pos:start="517:5" pos:end="517:13"><name pos:start="517:5" pos:end="517:11">st_stop</name><argument_list pos:start="517:12" pos:end="517:13">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="519:5" pos:end="519:55">/* Restart the server using the secp384r1 curve  */</comment>
    <expr_stmt pos:start="520:5" pos:end="520:41"><expr pos:start="520:5" pos:end="520:40"><call pos:start="520:5" pos:end="520:40"><name pos:start="520:5" pos:end="520:22">us903_start_server</name><argument_list pos:start="520:23" pos:end="520:40">(<argument pos:start="520:24" pos:end="520:24"><expr pos:start="520:24" pos:end="520:24"><literal type="number" pos:start="520:24" pos:end="520:24">0</literal></expr></argument>, <argument pos:start="520:27" pos:end="520:39"><expr pos:start="520:27" pos:end="520:39"><name pos:start="520:27" pos:end="520:39">NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="522:5" pos:end="531:14"><expr pos:start="522:5" pos:end="531:13"><name pos:start="522:5" pos:end="522:6">rv</name> <operator pos:start="522:8" pos:end="522:8">=</operator> <call pos:start="522:10" pos:end="531:13"><name pos:start="522:10" pos:end="522:23">curl_http_post</name><argument_list pos:start="522:24" pos:end="531:13">(
        <argument pos:start="523:9" pos:end="523:27"><expr pos:start="523:9" pos:end="523:27"><name pos:start="523:9" pos:end="523:27">US903_ENROLL_URL_BA</name></expr></argument>,
        <argument pos:start="524:9" pos:end="524:23"><expr pos:start="524:9" pos:end="524:23"><name pos:start="524:9" pos:end="524:23">US903_PKCS10_CT</name></expr></argument>,
        <argument pos:start="525:9" pos:end="525:28"><expr pos:start="525:9" pos:end="525:28"><name pos:start="525:9" pos:end="525:28">US903_PKCS10_RSA2048</name></expr></argument>,
        <argument pos:start="526:9" pos:end="526:25"><expr pos:start="526:9" pos:end="526:25"><name pos:start="526:9" pos:end="526:25">US903_UIDPWD_GOOD</name></expr></argument>,
        <argument pos:start="527:9" pos:end="527:21"><expr pos:start="527:9" pos:end="527:21"><name pos:start="527:9" pos:end="527:21">US903_CACERTS</name></expr></argument>,
        <argument pos:start="528:9" pos:end="528:22"><expr pos:start="528:9" pos:end="528:22"><name pos:start="528:9" pos:end="528:22">CURLAUTH_BASIC</name></expr></argument>,
        <argument pos:start="529:9" pos:end="529:39"><expr pos:start="529:9" pos:end="529:39"><literal type="string" pos:start="529:9" pos:end="529:39">"ECDHE-ECDSA-AES256-GCM-SHA384"</literal></expr></argument>,
        <argument pos:start="530:9" pos:end="530:12"><expr pos:start="530:9" pos:end="530:12"><name pos:start="530:9" pos:end="530:12">NULL</name></expr></argument>,
        <argument pos:start="531:9" pos:end="531:12"><expr pos:start="531:9" pos:end="531:12"><name pos:start="531:9" pos:end="531:12">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="532:5" pos:end="535:7">/*
     * Since we passed in a valid userID/password,
     * we expect the server to respond with 200
     */</comment>
    <expr_stmt pos:start="536:5" pos:end="536:25"><expr pos:start="536:5" pos:end="536:24"><call pos:start="536:5" pos:end="536:24"><name pos:start="536:5" pos:end="536:13">CU_ASSERT</name><argument_list pos:start="536:14" pos:end="536:24">(<argument pos:start="536:15" pos:end="536:23"><expr pos:start="536:15" pos:end="536:23"><name pos:start="536:15" pos:end="536:16">rv</name> <operator pos:start="536:18" pos:end="536:19">==</operator> <literal type="number" pos:start="536:21" pos:end="536:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="539:1" pos:end="550:3">/*
 * Simple enroll - PoP is disabled, the CSR contains a
 *                 valid PoP.
 *
 * This test case ensures the server can handle the
 * scenario where the CSR includes a valid PoP even when
 * the server didn't request it.  We have to use
 * CiscoEST as the client to generate a CSR containing
 * a valid PoP.  There's no way to include a valid PoP
 * using Curl since the TLS channel binding information
 * is not known in advance.
 */</comment>
<comment type="line" pos:start="551:1" pos:end="551:62">//The following include should never be used by an application</comment>
<comment type="line" pos:start="552:1" pos:end="552:54">//be we use it here to hack the EST_CTX values mid-way</comment>
<comment type="line" pos:start="553:1" pos:end="553:19">//through this test</comment>
<cpp:include pos:start="554:1" pos:end="554:35">#<cpp:directive pos:start="554:2" pos:end="554:8">include</cpp:directive> <cpp:file pos:start="554:10" pos:end="554:35">"../../src/est/est_locl.h"</cpp:file></cpp:include>
<function pos:start="555:1" pos:end="620:1"><type pos:start="555:1" pos:end="555:11"><specifier pos:start="555:1" pos:end="555:6">static</specifier> <name pos:start="555:8" pos:end="555:11">void</name></type> <name pos:start="555:13" pos:end="555:23">us903_test9</name> <parameter_list pos:start="555:25" pos:end="555:30">(<parameter pos:start="555:26" pos:end="555:29"><decl pos:start="555:26" pos:end="555:29"><type pos:start="555:26" pos:end="555:29"><name pos:start="555:26" pos:end="555:29">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="556:1" pos:end="620:1">{<block_content pos:start="557:5" pos:end="619:21">
    <decl_stmt pos:start="557:5" pos:end="557:17"><decl pos:start="557:5" pos:end="557:16"><type pos:start="557:5" pos:end="557:13"><name pos:start="557:5" pos:end="557:11">EST_CTX</name> <modifier pos:start="557:13" pos:end="557:13">*</modifier></type><name pos:start="557:14" pos:end="557:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="558:5" pos:end="558:11"><decl pos:start="558:5" pos:end="558:10"><type pos:start="558:5" pos:end="558:7"><name pos:start="558:5" pos:end="558:7">int</name></type> <name pos:start="558:9" pos:end="558:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="559:5" pos:end="559:27"><decl pos:start="559:5" pos:end="559:26"><type pos:start="559:5" pos:end="559:19"><name pos:start="559:5" pos:end="559:12">unsigned</name> <name pos:start="559:14" pos:end="559:17">char</name> <modifier pos:start="559:19" pos:end="559:19">*</modifier></type><name pos:start="559:20" pos:end="559:26">cacerts</name></decl>;</decl_stmt>
    <decl_stmt pos:start="560:5" pos:end="560:19"><decl pos:start="560:5" pos:end="560:18"><type pos:start="560:5" pos:end="560:7"><name pos:start="560:5" pos:end="560:7">int</name></type> <name pos:start="560:9" pos:end="560:14">caclen</name> <init pos:start="560:16" pos:end="560:18">= <expr pos:start="560:18" pos:end="560:18"><literal type="number" pos:start="560:18" pos:end="560:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="561:5" pos:end="561:23"><decl pos:start="561:5" pos:end="561:22"><type pos:start="561:5" pos:end="561:14"><name pos:start="561:5" pos:end="561:12">EVP_PKEY</name> <modifier pos:start="561:14" pos:end="561:14">*</modifier></type><name pos:start="561:15" pos:end="561:22">new_pkey</name></decl>;</decl_stmt>
    <decl_stmt pos:start="562:5" pos:end="562:25"><decl pos:start="562:5" pos:end="562:24"><type pos:start="562:5" pos:end="562:19"><name pos:start="562:5" pos:end="562:12">unsigned</name> <name pos:start="562:14" pos:end="562:17">char</name> <modifier pos:start="562:19" pos:end="562:19">*</modifier></type><name pos:start="562:20" pos:end="562:24">pkcs7</name></decl>;</decl_stmt>
    <decl_stmt pos:start="563:5" pos:end="563:22"><decl pos:start="563:5" pos:end="563:21"><type pos:start="563:5" pos:end="563:7"><name pos:start="563:5" pos:end="563:7">int</name></type> <name pos:start="563:9" pos:end="563:17">pkcs7_len</name> <init pos:start="563:19" pos:end="563:21">= <expr pos:start="563:21" pos:end="563:21"><literal type="number" pos:start="563:21" pos:end="563:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="564:5" pos:end="564:29"><decl pos:start="564:5" pos:end="564:28"><type pos:start="564:5" pos:end="564:19"><name pos:start="564:5" pos:end="564:12">unsigned</name> <name pos:start="564:14" pos:end="564:17">char</name> <modifier pos:start="564:19" pos:end="564:19">*</modifier></type><name pos:start="564:20" pos:end="564:28">attr_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="565:5" pos:end="565:17"><decl pos:start="565:5" pos:end="565:16"><type pos:start="565:5" pos:end="565:7"><name pos:start="565:5" pos:end="565:7">int</name></type> <name pos:start="565:9" pos:end="565:16">attr_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="567:5" pos:end="568:5"><expr pos:start="567:5" pos:end="567:15"><name pos:start="567:5" pos:end="567:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="570:5" pos:end="572:7">/*
     * Make sure our EST server has PoP disabled
     */</comment>
    <expr_stmt pos:start="573:5" pos:end="573:21"><expr pos:start="573:5" pos:end="573:20"><call pos:start="573:5" pos:end="573:20"><name pos:start="573:5" pos:end="573:18">st_disable_pop</name><argument_list pos:start="573:19" pos:end="573:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="575:5" pos:end="577:7">/*
     * Read in the CA certs
     */</comment>
    <expr_stmt pos:start="578:5" pos:end="578:55"><expr pos:start="578:5" pos:end="578:54"><name pos:start="578:5" pos:end="578:10">caclen</name> <operator pos:start="578:12" pos:end="578:12">=</operator> <call pos:start="578:14" pos:end="578:54"><name pos:start="578:14" pos:end="578:29">read_binary_file</name><argument_list pos:start="578:30" pos:end="578:54">(<argument pos:start="578:31" pos:end="578:43"><expr pos:start="578:31" pos:end="578:43"><name pos:start="578:31" pos:end="578:43">US903_CACERTS</name></expr></argument>, <argument pos:start="578:46" pos:end="578:53"><expr pos:start="578:46" pos:end="578:53"><operator pos:start="578:46" pos:end="578:46">&amp;</operator><name pos:start="578:47" pos:end="578:53">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="579:5" pos:end="579:31"><expr pos:start="579:5" pos:end="579:30"><call pos:start="579:5" pos:end="579:30"><name pos:start="579:5" pos:end="579:13">CU_ASSERT</name><argument_list pos:start="579:14" pos:end="579:30">(<argument pos:start="579:15" pos:end="579:29"><expr pos:start="579:15" pos:end="579:29"><name pos:start="579:15" pos:end="579:25">cacerts_len</name> <operator pos:start="579:27" pos:end="579:27">&gt;</operator> <literal type="number" pos:start="579:29" pos:end="579:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="581:5" pos:end="583:7">/*
     * Init the client context
     */</comment>
    <expr_stmt pos:start="584:5" pos:end="588:35"><expr pos:start="584:5" pos:end="588:34"><name pos:start="584:5" pos:end="584:7">ctx</name> <operator pos:start="584:9" pos:end="584:9">=</operator> <call pos:start="584:11" pos:end="588:34"><name pos:start="584:11" pos:end="584:25">est_client_init</name><argument_list pos:start="584:26" pos:end="588:34">(
        <argument pos:start="585:9" pos:end="585:15"><expr pos:start="585:9" pos:end="585:15"><name pos:start="585:9" pos:end="585:15">cacerts</name></expr></argument>,
        <argument pos:start="586:9" pos:end="586:14"><expr pos:start="586:9" pos:end="586:14"><name pos:start="586:9" pos:end="586:14">caclen</name></expr></argument>,
        <argument pos:start="587:9" pos:end="587:27"><expr pos:start="587:9" pos:end="587:27"><name pos:start="587:9" pos:end="587:27">EST_CERT_FORMAT_PEM</name></expr></argument>,
        <argument pos:start="588:9" pos:end="588:33"><expr pos:start="588:9" pos:end="588:33"><name pos:start="588:9" pos:end="588:33">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="590:5" pos:end="592:7">/*
     * We'll use simple HTTP auth to identify ourselves
     */</comment>
    <expr_stmt pos:start="593:5" pos:end="593:67"><expr pos:start="593:5" pos:end="593:66"><name pos:start="593:5" pos:end="593:6">rv</name> <operator pos:start="593:8" pos:end="593:8">=</operator> <call pos:start="593:10" pos:end="593:66"><name pos:start="593:10" pos:end="593:28">est_client_set_auth</name><argument_list pos:start="593:29" pos:end="593:66">(<argument pos:start="593:30" pos:end="593:32"><expr pos:start="593:30" pos:end="593:32"><name pos:start="593:30" pos:end="593:32">ctx</name></expr></argument>, <argument pos:start="593:35" pos:end="593:43"><expr pos:start="593:35" pos:end="593:43"><literal type="string" pos:start="593:35" pos:end="593:43">"estuser"</literal></expr></argument>, <argument pos:start="593:46" pos:end="593:53"><expr pos:start="593:46" pos:end="593:53"><literal type="string" pos:start="593:46" pos:end="593:53">"estpwd"</literal></expr></argument>, <argument pos:start="593:56" pos:end="593:59"><expr pos:start="593:56" pos:end="593:59"><name pos:start="593:56" pos:end="593:59">NULL</name></expr></argument>, <argument pos:start="593:62" pos:end="593:65"><expr pos:start="593:62" pos:end="593:65"><name pos:start="593:62" pos:end="593:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="594:5" pos:end="594:34"><expr pos:start="594:5" pos:end="594:33"><call pos:start="594:5" pos:end="594:33"><name pos:start="594:5" pos:end="594:13">CU_ASSERT</name><argument_list pos:start="594:14" pos:end="594:33">(<argument pos:start="594:15" pos:end="594:32"><expr pos:start="594:15" pos:end="594:32"><name pos:start="594:15" pos:end="594:16">rv</name> <operator pos:start="594:18" pos:end="594:19">==</operator> <name pos:start="594:21" pos:end="594:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="596:5" pos:end="596:66"><expr pos:start="596:5" pos:end="596:65"><call pos:start="596:5" pos:end="596:65"><name pos:start="596:5" pos:end="596:25">est_client_set_server</name><argument_list pos:start="596:26" pos:end="596:65">(<argument pos:start="596:27" pos:end="596:29"><expr pos:start="596:27" pos:end="596:29"><name pos:start="596:27" pos:end="596:29">ctx</name></expr></argument>, <argument pos:start="596:32" pos:end="596:42"><expr pos:start="596:32" pos:end="596:42"><literal type="string" pos:start="596:32" pos:end="596:42">"127.0.0.1"</literal></expr></argument>, <argument pos:start="596:45" pos:end="596:58"><expr pos:start="596:45" pos:end="596:58"><name pos:start="596:45" pos:end="596:58">US903_TCP_PORT</name></expr></argument>, <argument pos:start="596:61" pos:end="596:64"><expr pos:start="596:61" pos:end="596:64"><name pos:start="596:61" pos:end="596:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="598:5" pos:end="601:7">/*
     * Create some space to hold the cert and generate
     * a private key
     */</comment>
    <expr_stmt pos:start="602:5" pos:end="602:38"><expr pos:start="602:5" pos:end="602:37"><name pos:start="602:5" pos:end="602:12">new_pkey</name> <operator pos:start="602:14" pos:end="602:14">=</operator> <call pos:start="602:16" pos:end="602:37"><name pos:start="602:16" pos:end="602:35">generate_private_key</name><argument_list pos:start="602:36" pos:end="602:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="604:5" pos:end="604:61"><expr pos:start="604:5" pos:end="604:60"><name pos:start="604:5" pos:end="604:6">rv</name> <operator pos:start="604:8" pos:end="604:8">=</operator> <call pos:start="604:10" pos:end="604:60"><name pos:start="604:10" pos:end="604:32">est_client_get_csrattrs</name><argument_list pos:start="604:33" pos:end="604:60">(<argument pos:start="604:34" pos:end="604:36"><expr pos:start="604:34" pos:end="604:36"><name pos:start="604:34" pos:end="604:36">ctx</name></expr></argument>, <argument pos:start="604:39" pos:end="604:48"><expr pos:start="604:39" pos:end="604:48"><operator pos:start="604:39" pos:end="604:39">&amp;</operator><name pos:start="604:40" pos:end="604:48">attr_data</name></expr></argument>, <argument pos:start="604:51" pos:end="604:59"><expr pos:start="604:51" pos:end="604:59"><operator pos:start="604:51" pos:end="604:51">&amp;</operator><name pos:start="604:52" pos:end="604:59">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="605:5" pos:end="605:34"><expr pos:start="605:5" pos:end="605:33"><call pos:start="605:5" pos:end="605:33"><name pos:start="605:5" pos:end="605:13">CU_ASSERT</name><argument_list pos:start="605:14" pos:end="605:33">(<argument pos:start="605:15" pos:end="605:32"><expr pos:start="605:15" pos:end="605:32"><name pos:start="605:15" pos:end="605:16">rv</name> <operator pos:start="605:18" pos:end="605:19">==</operator> <name pos:start="605:21" pos:end="605:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="607:5" pos:end="609:7">/*
     * Attempt to enroll
     */</comment>
    <expr_stmt pos:start="610:5" pos:end="610:30"><expr pos:start="610:5" pos:end="610:29"><name pos:start="610:5" pos:end="610:25"><name pos:start="610:5" pos:end="610:7">ctx</name><operator pos:start="610:8" pos:end="610:9">-&gt;</operator><name pos:start="610:10" pos:end="610:25">csr_pop_required</name></name> <operator pos:start="610:27" pos:end="610:27">=</operator> <literal type="number" pos:start="610:29" pos:end="610:29">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="610:32" pos:end="610:86">//This is a hack for testing only, do not attempt this </comment>
    <comment type="line" pos:start="611:5" pos:end="611:61">//We need to force the challengePassword into the CSR    </comment>
    <expr_stmt pos:start="612:5" pos:end="612:67"><expr pos:start="612:5" pos:end="612:66"><name pos:start="612:5" pos:end="612:6">rv</name> <operator pos:start="612:8" pos:end="612:8">=</operator> <call pos:start="612:10" pos:end="612:66"><name pos:start="612:10" pos:end="612:26">est_client_enroll</name><argument_list pos:start="612:27" pos:end="612:66">(<argument pos:start="612:28" pos:end="612:30"><expr pos:start="612:28" pos:end="612:30"><name pos:start="612:28" pos:end="612:30">ctx</name></expr></argument>, <argument pos:start="612:33" pos:end="612:43"><expr pos:start="612:33" pos:end="612:43"><literal type="string" pos:start="612:33" pos:end="612:43">"TestCase9"</literal></expr></argument>, <argument pos:start="612:46" pos:end="612:55"><expr pos:start="612:46" pos:end="612:55"><operator pos:start="612:46" pos:end="612:46">&amp;</operator><name pos:start="612:47" pos:end="612:55">pkcs7_len</name></expr></argument>, <argument pos:start="612:58" pos:end="612:65"><expr pos:start="612:58" pos:end="612:65"><name pos:start="612:58" pos:end="612:65">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="613:5" pos:end="613:34"><expr pos:start="613:5" pos:end="613:33"><call pos:start="613:5" pos:end="613:33"><name pos:start="613:5" pos:end="613:13">CU_ASSERT</name><argument_list pos:start="613:14" pos:end="613:33">(<argument pos:start="613:15" pos:end="613:32"><expr pos:start="613:15" pos:end="613:32"><name pos:start="613:15" pos:end="613:16">rv</name> <operator pos:start="613:18" pos:end="613:19">==</operator> <name pos:start="613:21" pos:end="613:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="615:5" pos:end="615:30"><expr pos:start="615:5" pos:end="615:29"><name pos:start="615:5" pos:end="615:9">pkcs7</name> <operator pos:start="615:11" pos:end="615:11">=</operator> <call pos:start="615:13" pos:end="615:29"><name pos:start="615:13" pos:end="615:18">malloc</name><argument_list pos:start="615:19" pos:end="615:29">(<argument pos:start="615:20" pos:end="615:28"><expr pos:start="615:20" pos:end="615:28"><name pos:start="615:20" pos:end="615:28">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="616:5" pos:end="616:51"><expr pos:start="616:5" pos:end="616:50"><name pos:start="616:5" pos:end="616:6">rv</name> <operator pos:start="616:8" pos:end="616:8">=</operator> <call pos:start="616:10" pos:end="616:50"><name pos:start="616:10" pos:end="616:38">est_client_copy_enrolled_cert</name><argument_list pos:start="616:39" pos:end="616:50">(<argument pos:start="616:40" pos:end="616:42"><expr pos:start="616:40" pos:end="616:42"><name pos:start="616:40" pos:end="616:42">ctx</name></expr></argument>, <argument pos:start="616:45" pos:end="616:49"><expr pos:start="616:45" pos:end="616:49"><name pos:start="616:45" pos:end="616:49">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="618:5" pos:end="618:16"><expr pos:start="618:5" pos:end="618:15"><call pos:start="618:5" pos:end="618:15"><name pos:start="618:5" pos:end="618:8">free</name><argument_list pos:start="618:9" pos:end="618:15">(<argument pos:start="618:10" pos:end="618:14"><expr pos:start="618:10" pos:end="618:14"><name pos:start="618:10" pos:end="618:14">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="619:5" pos:end="619:21"><expr pos:start="619:5" pos:end="619:20"><call pos:start="619:5" pos:end="619:20"><name pos:start="619:5" pos:end="619:15">est_destroy</name><argument_list pos:start="619:16" pos:end="619:20">(<argument pos:start="619:17" pos:end="619:19"><expr pos:start="619:17" pos:end="619:19"><name pos:start="619:17" pos:end="619:19">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="622:1" pos:end="629:3">/*
 * Simple enroll - PoP is disabled, the CSR contains a
 *                 invalid PoP.
 *
 * This test case ensures the server can handle the
 * scenario where the CSR includes an invalid PoP even when
 * the server didn't request it.
 */</comment>
<function pos:start="630:1" pos:end="650:1"><type pos:start="630:1" pos:end="630:11"><specifier pos:start="630:1" pos:end="630:6">static</specifier> <name pos:start="630:8" pos:end="630:11">void</name></type> <name pos:start="630:13" pos:end="630:24">us903_test10</name> <parameter_list pos:start="630:26" pos:end="630:31">(<parameter pos:start="630:27" pos:end="630:30"><decl pos:start="630:27" pos:end="630:30"><type pos:start="630:27" pos:end="630:30"><name pos:start="630:27" pos:end="630:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="631:1" pos:end="650:1">{<block_content pos:start="632:5" pos:end="649:25">
    <decl_stmt pos:start="632:5" pos:end="632:12"><decl pos:start="632:5" pos:end="632:11"><type pos:start="632:5" pos:end="632:8"><name pos:start="632:5" pos:end="632:8">long</name></type> <name pos:start="632:10" pos:end="632:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="634:5" pos:end="635:5"><expr pos:start="634:5" pos:end="634:15"><name pos:start="634:5" pos:end="634:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="637:5" pos:end="639:7">/*
     * Make sure our EST server has PoP disabled
     */</comment>
    <expr_stmt pos:start="640:5" pos:end="640:21"><expr pos:start="640:5" pos:end="640:20"><call pos:start="640:5" pos:end="640:20"><name pos:start="640:5" pos:end="640:18">st_disable_pop</name><argument_list pos:start="640:19" pos:end="640:20">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="642:5" pos:end="644:72"><expr pos:start="642:5" pos:end="644:71"><name pos:start="642:5" pos:end="642:6">rv</name> <operator pos:start="642:8" pos:end="642:8">=</operator> <call pos:start="642:10" pos:end="644:71"><name pos:start="642:10" pos:end="642:23">curl_http_post</name><argument_list pos:start="642:24" pos:end="644:71">(<argument pos:start="642:25" pos:end="642:43"><expr pos:start="642:25" pos:end="642:43"><name pos:start="642:25" pos:end="642:43">US903_ENROLL_URL_BA</name></expr></argument>, <argument pos:start="642:46" pos:end="642:60"><expr pos:start="642:46" pos:end="642:60"><name pos:start="642:46" pos:end="642:60">US903_PKCS10_CT</name></expr></argument>,
    <argument pos:start="643:5" pos:end="643:26"><expr pos:start="643:5" pos:end="643:26"><name pos:start="643:5" pos:end="643:26">US903_PKCS10_STALE_POP</name></expr></argument>,
    <argument pos:start="644:5" pos:end="644:21"><expr pos:start="644:5" pos:end="644:21"><name pos:start="644:5" pos:end="644:21">US903_UIDPWD_GOOD</name></expr></argument>, <argument pos:start="644:24" pos:end="644:36"><expr pos:start="644:24" pos:end="644:36"><name pos:start="644:24" pos:end="644:36">US903_CACERTS</name></expr></argument>, <argument pos:start="644:39" pos:end="644:52"><expr pos:start="644:39" pos:end="644:52"><name pos:start="644:39" pos:end="644:52">CURLAUTH_BASIC</name></expr></argument>, <argument pos:start="644:55" pos:end="644:58"><expr pos:start="644:55" pos:end="644:58"><name pos:start="644:55" pos:end="644:58">NULL</name></expr></argument>, <argument pos:start="644:61" pos:end="644:64"><expr pos:start="644:61" pos:end="644:64"><name pos:start="644:61" pos:end="644:64">NULL</name></expr></argument>, <argument pos:start="644:67" pos:end="644:70"><expr pos:start="644:67" pos:end="644:70"><name pos:start="644:67" pos:end="644:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="645:5" pos:end="648:7">/*
     * The enroll request should fail since the PoP was invalid
     * We expect a 400 response.
     */</comment>
    <expr_stmt pos:start="649:5" pos:end="649:25"><expr pos:start="649:5" pos:end="649:24"><call pos:start="649:5" pos:end="649:24"><name pos:start="649:5" pos:end="649:13">CU_ASSERT</name><argument_list pos:start="649:14" pos:end="649:24">(<argument pos:start="649:15" pos:end="649:23"><expr pos:start="649:15" pos:end="649:23"><name pos:start="649:15" pos:end="649:16">rv</name> <operator pos:start="649:18" pos:end="649:19">==</operator> <literal type="number" pos:start="649:21" pos:end="649:23">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="652:1" pos:end="660:3">/*
 * Simple enroll - PoP is enabled, the CSR contains a
 *                 invalid PoP, and the client uses
 *                 a cert that contains id-kp-cmcRA.
 *
 * This test case ensures the server disables the PoP
 * check when the client is using a cert that contains
 * id-kp-cmcRA, which indicates the client is an RA.
 */</comment>
<function pos:start="661:1" pos:end="688:1"><type pos:start="661:1" pos:end="661:11"><specifier pos:start="661:1" pos:end="661:6">static</specifier> <name pos:start="661:8" pos:end="661:11">void</name></type> <name pos:start="661:13" pos:end="661:24">us903_test11</name> <parameter_list pos:start="661:26" pos:end="661:31">(<parameter pos:start="661:27" pos:end="661:30"><decl pos:start="661:27" pos:end="661:30"><type pos:start="661:27" pos:end="661:30"><name pos:start="661:27" pos:end="661:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="662:1" pos:end="688:1">{<block_content pos:start="663:5" pos:end="687:25">
    <decl_stmt pos:start="663:5" pos:end="663:12"><decl pos:start="663:5" pos:end="663:11"><type pos:start="663:5" pos:end="663:8"><name pos:start="663:5" pos:end="663:8">long</name></type> <name pos:start="663:10" pos:end="663:11">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="665:5" pos:end="666:5"><expr pos:start="665:5" pos:end="665:15"><name pos:start="665:5" pos:end="665:15">LOG_FUNC_NM</name></expr>
    ;</expr_stmt>

    <comment type="block" pos:start="668:5" pos:end="670:7">/*
     * Make sure our EST server has PoP disabled
     */</comment>
    <expr_stmt pos:start="671:5" pos:end="671:20"><expr pos:start="671:5" pos:end="671:19"><call pos:start="671:5" pos:end="671:19"><name pos:start="671:5" pos:end="671:17">st_enable_pop</name><argument_list pos:start="671:18" pos:end="671:19">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="673:5" pos:end="680:25"><expr pos:start="673:5" pos:end="680:24"><name pos:start="673:5" pos:end="673:6">rv</name> <operator pos:start="673:8" pos:end="673:8">=</operator> <call pos:start="673:10" pos:end="680:24"><name pos:start="673:10" pos:end="673:31">curl_http_post_certuid</name><argument_list pos:start="673:32" pos:end="680:24">(
    <argument pos:start="674:5" pos:end="674:23"><expr pos:start="674:5" pos:end="674:23"><name pos:start="674:5" pos:end="674:23">US903_ENROLL_URL_BA</name></expr></argument>,
    <argument pos:start="675:5" pos:end="675:19"><expr pos:start="675:5" pos:end="675:19"><name pos:start="675:5" pos:end="675:19">US903_PKCS10_CT</name></expr></argument>,
    <argument pos:start="676:5" pos:end="676:26"><expr pos:start="676:5" pos:end="676:26"><name pos:start="676:5" pos:end="676:26">US903_PKCS10_STALE_POP</name></expr></argument>,
    <argument pos:start="677:5" pos:end="677:21"><expr pos:start="677:5" pos:end="677:21"><name pos:start="677:5" pos:end="677:21">US903_UIDPWD_GOOD</name></expr></argument>,
    <argument pos:start="678:5" pos:end="678:23"><expr pos:start="678:5" pos:end="678:23"><name pos:start="678:5" pos:end="678:23">US903_EXPLICIT_CERT</name></expr></argument>,
    <argument pos:start="679:5" pos:end="679:22"><expr pos:start="679:5" pos:end="679:22"><name pos:start="679:5" pos:end="679:22">US903_EXPLICIT_KEY</name></expr></argument>,
    <argument pos:start="680:5" pos:end="680:17"><expr pos:start="680:5" pos:end="680:17"><name pos:start="680:5" pos:end="680:17">US903_CACERTS</name></expr></argument>, <argument pos:start="680:20" pos:end="680:23"><expr pos:start="680:20" pos:end="680:23"><name pos:start="680:20" pos:end="680:23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="682:5" pos:end="686:7">/*
     * Even though the PoP value doesn't match in this CSR,
     * the enroll will succeed since the client is using
     * an RA certificate. We expect a 200 response.
     */</comment>
    <expr_stmt pos:start="687:5" pos:end="687:25"><expr pos:start="687:5" pos:end="687:24"><call pos:start="687:5" pos:end="687:24"><name pos:start="687:5" pos:end="687:13">CU_ASSERT</name><argument_list pos:start="687:14" pos:end="687:24">(<argument pos:start="687:15" pos:end="687:23"><expr pos:start="687:15" pos:end="687:23"><name pos:start="687:15" pos:end="687:16">rv</name> <operator pos:start="687:18" pos:end="687:19">==</operator> <literal type="number" pos:start="687:21" pos:end="687:23">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="690:1" pos:end="693:3">/* The main() function for setting up and running the tests.
 * Returns a CUE_SUCCESS on successful running, another
 * CUnit error code on failure.
 */</comment>
<function pos:start="694:1" pos:end="727:1"><type pos:start="694:1" pos:end="694:3"><name pos:start="694:1" pos:end="694:3">int</name></type> <name pos:start="694:5" pos:end="694:19">us903_add_suite</name> <parameter_list pos:start="694:21" pos:end="694:26">(<parameter pos:start="694:22" pos:end="694:25"><decl pos:start="694:22" pos:end="694:25"><type pos:start="694:22" pos:end="694:25"><name pos:start="694:22" pos:end="694:25">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="695:1" pos:end="727:1">{<block_content pos:start="697:5" pos:end="727:0">
<cpp:ifdef pos:start="696:1" pos:end="696:17">#<cpp:directive pos:start="696:2" pos:end="696:6">ifdef</cpp:directive> <name pos:start="696:8" pos:end="696:17">HAVE_CUNIT</name></cpp:ifdef>
    <decl_stmt pos:start="697:5" pos:end="697:28"><decl pos:start="697:5" pos:end="697:27"><type pos:start="697:5" pos:end="697:13"><name pos:start="697:5" pos:end="697:13">CU_pSuite</name></type> <name pos:start="697:15" pos:end="697:20">pSuite</name> <init pos:start="697:22" pos:end="697:27">= <expr pos:start="697:24" pos:end="697:27"><name pos:start="697:24" pos:end="697:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="699:5" pos:end="699:37">/* add a suite to the registry */</comment>
    <expr_stmt pos:start="700:5" pos:end="702:33"><expr pos:start="700:5" pos:end="702:32"><name pos:start="700:5" pos:end="700:10">pSuite</name> <operator pos:start="700:12" pos:end="700:12">=</operator> <call pos:start="700:14" pos:end="702:32"><name pos:start="700:14" pos:end="700:25">CU_add_suite</name><argument_list pos:start="700:26" pos:end="702:32">(<argument pos:start="700:27" pos:end="700:48"><expr pos:start="700:27" pos:end="700:48"><literal type="string" pos:start="700:27" pos:end="700:48">"us903_srv_simpenroll"</literal></expr></argument>,
            <argument pos:start="701:13" pos:end="701:28"><expr pos:start="701:13" pos:end="701:28"><name pos:start="701:13" pos:end="701:28">us903_init_suite</name></expr></argument>,
            <argument pos:start="702:13" pos:end="702:31"><expr pos:start="702:13" pos:end="702:31"><name pos:start="702:13" pos:end="702:31">us903_destory_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="703:5" pos:end="706:5"><if pos:start="703:5" pos:end="706:5">if <condition pos:start="703:8" pos:end="703:23">(<expr pos:start="703:9" pos:end="703:22"><name pos:start="703:9" pos:end="703:12">NULL</name> <operator pos:start="703:14" pos:end="703:15">==</operator> <name pos:start="703:17" pos:end="703:22">pSuite</name></expr>)</condition> <block pos:start="703:25" pos:end="706:5">{<block_content pos:start="704:9" pos:end="705:30">
        <expr_stmt pos:start="704:9" pos:end="704:30"><expr pos:start="704:9" pos:end="704:29"><call pos:start="704:9" pos:end="704:29"><name pos:start="704:9" pos:end="704:27">CU_cleanup_registry</name><argument_list pos:start="704:28" pos:end="704:29">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="705:9" pos:end="705:30">return <expr pos:start="705:16" pos:end="705:29"><call pos:start="705:16" pos:end="705:29"><name pos:start="705:16" pos:end="705:27">CU_get_error</name><argument_list pos:start="705:28" pos:end="705:29">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="708:5" pos:end="708:36">/* add the tests to the suite */</comment>
    <if_stmt pos:start="709:5" pos:end="723:5"><if pos:start="709:5" pos:end="723:5">if <condition pos:start="709:8" pos:end="719:116">(<expr pos:start="709:9" pos:end="719:115"><operator pos:start="709:9" pos:end="709:9">(</operator><name pos:start="709:10" pos:end="709:13">NULL</name> <operator pos:start="709:15" pos:end="709:16">==</operator> <call pos:start="709:18" pos:end="709:68"><name pos:start="709:18" pos:end="709:28">CU_add_test</name><argument_list pos:start="709:29" pos:end="709:68">(<argument pos:start="709:30" pos:end="709:35"><expr pos:start="709:30" pos:end="709:35"><name pos:start="709:30" pos:end="709:35">pSuite</name></expr></argument>, <argument pos:start="709:38" pos:end="709:54"><expr pos:start="709:38" pos:end="709:54"><literal type="string" pos:start="709:38" pos:end="709:54">"Enroll RSA cert"</literal></expr></argument>, <argument pos:start="709:57" pos:end="709:67"><expr pos:start="709:57" pos:end="709:67"><name pos:start="709:57" pos:end="709:67">us903_test1</name></expr></argument>)</argument_list></call><operator pos:start="709:69" pos:end="709:69">)</operator> <operator pos:start="709:71" pos:end="709:72">||</operator>
        <operator pos:start="710:9" pos:end="710:9">(</operator><name pos:start="710:10" pos:end="710:13">NULL</name> <operator pos:start="710:15" pos:end="710:16">==</operator> <call pos:start="710:18" pos:end="710:70"><name pos:start="710:18" pos:end="710:28">CU_add_test</name><argument_list pos:start="710:29" pos:end="710:70">(<argument pos:start="710:30" pos:end="710:35"><expr pos:start="710:30" pos:end="710:35"><name pos:start="710:30" pos:end="710:35">pSuite</name></expr></argument>, <argument pos:start="710:38" pos:end="710:56"><expr pos:start="710:38" pos:end="710:56"><literal type="string" pos:start="710:38" pos:end="710:56">"Enroll ECDSA cert"</literal></expr></argument>, <argument pos:start="710:59" pos:end="710:69"><expr pos:start="710:59" pos:end="710:69"><name pos:start="710:59" pos:end="710:69">us903_test2</name></expr></argument>)</argument_list></call><operator pos:start="710:71" pos:end="710:71">)</operator> <operator pos:start="710:73" pos:end="710:74">||</operator>
        <operator pos:start="711:9" pos:end="711:9">(</operator><name pos:start="711:10" pos:end="711:13">NULL</name> <operator pos:start="711:15" pos:end="711:16">==</operator> <call pos:start="711:18" pos:end="711:68"><name pos:start="711:18" pos:end="711:28">CU_add_test</name><argument_list pos:start="711:29" pos:end="711:68">(<argument pos:start="711:30" pos:end="711:35"><expr pos:start="711:30" pos:end="711:35"><name pos:start="711:30" pos:end="711:35">pSuite</name></expr></argument>, <argument pos:start="711:38" pos:end="711:54"><expr pos:start="711:38" pos:end="711:54"><literal type="string" pos:start="711:38" pos:end="711:54">"Enroll DSA cert"</literal></expr></argument>, <argument pos:start="711:57" pos:end="711:67"><expr pos:start="711:57" pos:end="711:67"><name pos:start="711:57" pos:end="711:67">us903_test3</name></expr></argument>)</argument_list></call><operator pos:start="711:69" pos:end="711:69">)</operator> <operator pos:start="711:71" pos:end="711:72">||</operator>
        <operator pos:start="712:9" pos:end="712:9">(</operator><name pos:start="712:10" pos:end="712:13">NULL</name> <operator pos:start="712:15" pos:end="712:16">==</operator> <call pos:start="712:18" pos:end="712:80"><name pos:start="712:18" pos:end="712:28">CU_add_test</name><argument_list pos:start="712:29" pos:end="712:80">(<argument pos:start="712:30" pos:end="712:35"><expr pos:start="712:30" pos:end="712:35"><name pos:start="712:30" pos:end="712:35">pSuite</name></expr></argument>, <argument pos:start="712:38" pos:end="712:66"><expr pos:start="712:38" pos:end="712:66"><literal type="string" pos:start="712:38" pos:end="712:66">"Enroll corrupted ECDSA cert"</literal></expr></argument>, <argument pos:start="712:69" pos:end="712:79"><expr pos:start="712:69" pos:end="712:79"><name pos:start="712:69" pos:end="712:79">us903_test4</name></expr></argument>)</argument_list></call><operator pos:start="712:81" pos:end="712:81">)</operator> <operator pos:start="712:83" pos:end="712:84">||</operator>
        <operator pos:start="713:9" pos:end="713:9">(</operator><name pos:start="713:10" pos:end="713:13">NULL</name> <operator pos:start="713:15" pos:end="713:16">==</operator> <call pos:start="713:18" pos:end="713:88"><name pos:start="713:18" pos:end="713:28">CU_add_test</name><argument_list pos:start="713:29" pos:end="713:88">(<argument pos:start="713:30" pos:end="713:35"><expr pos:start="713:30" pos:end="713:35"><name pos:start="713:30" pos:end="713:35">pSuite</name></expr></argument>, <argument pos:start="713:38" pos:end="713:74"><expr pos:start="713:38" pos:end="713:74"><literal type="string" pos:start="713:38" pos:end="713:74">"Enroll retry-after manual approval "</literal></expr></argument>, <argument pos:start="713:77" pos:end="713:87"><expr pos:start="713:77" pos:end="713:87"><name pos:start="713:77" pos:end="713:87">us903_test5</name></expr></argument>)</argument_list></call><operator pos:start="713:89" pos:end="713:89">)</operator> <operator pos:start="713:91" pos:end="713:92">||</operator>
        <operator pos:start="714:9" pos:end="714:9">(</operator><name pos:start="714:10" pos:end="714:13">NULL</name> <operator pos:start="714:15" pos:end="714:16">==</operator> <call pos:start="714:18" pos:end="714:78"><name pos:start="714:18" pos:end="714:28">CU_add_test</name><argument_list pos:start="714:29" pos:end="714:78">(<argument pos:start="714:30" pos:end="714:35"><expr pos:start="714:30" pos:end="714:35"><name pos:start="714:30" pos:end="714:35">pSuite</name></expr></argument>, <argument pos:start="714:38" pos:end="714:64"><expr pos:start="714:38" pos:end="714:64"><literal type="string" pos:start="714:38" pos:end="714:64">"Enroll PoP fail with Curl"</literal></expr></argument>, <argument pos:start="714:67" pos:end="714:77"><expr pos:start="714:67" pos:end="714:77"><name pos:start="714:67" pos:end="714:77">us903_test6</name></expr></argument>)</argument_list></call><operator pos:start="714:79" pos:end="714:79">)</operator> <operator pos:start="714:81" pos:end="714:82">||</operator>
        <operator pos:start="715:9" pos:end="715:9">(</operator><name pos:start="715:10" pos:end="715:13">NULL</name> <operator pos:start="715:15" pos:end="715:16">==</operator> <call pos:start="715:18" pos:end="715:86"><name pos:start="715:18" pos:end="715:28">CU_add_test</name><argument_list pos:start="715:29" pos:end="715:86">(<argument pos:start="715:30" pos:end="715:35"><expr pos:start="715:30" pos:end="715:35"><name pos:start="715:30" pos:end="715:35">pSuite</name></expr></argument>, <argument pos:start="715:38" pos:end="715:72"><expr pos:start="715:38" pos:end="715:72"><literal type="string" pos:start="715:38" pos:end="715:72">"Enroll PoP succeed with estclient"</literal></expr></argument>, <argument pos:start="715:75" pos:end="715:85"><expr pos:start="715:75" pos:end="715:85"><name pos:start="715:75" pos:end="715:85">us903_test7</name></expr></argument>)</argument_list></call><operator pos:start="715:87" pos:end="715:87">)</operator> <operator pos:start="715:89" pos:end="715:90">||</operator>
        <operator pos:start="716:9" pos:end="716:9">(</operator><name pos:start="716:10" pos:end="716:13">NULL</name> <operator pos:start="716:15" pos:end="716:16">==</operator> <call pos:start="716:18" pos:end="716:76"><name pos:start="716:18" pos:end="716:28">CU_add_test</name><argument_list pos:start="716:29" pos:end="716:76">(<argument pos:start="716:30" pos:end="716:35"><expr pos:start="716:30" pos:end="716:35"><name pos:start="716:30" pos:end="716:35">pSuite</name></expr></argument>, <argument pos:start="716:38" pos:end="716:62"><expr pos:start="716:38" pos:end="716:62"><literal type="string" pos:start="716:38" pos:end="716:62">"Non-default ECDHE curve"</literal></expr></argument>, <argument pos:start="716:65" pos:end="716:75"><expr pos:start="716:65" pos:end="716:75"><name pos:start="716:65" pos:end="716:75">us903_test8</name></expr></argument>)</argument_list></call><operator pos:start="716:77" pos:end="716:77">)</operator> <operator pos:start="716:79" pos:end="716:80">||</operator>
        <operator pos:start="717:9" pos:end="717:9">(</operator><name pos:start="717:10" pos:end="717:13">NULL</name> <operator pos:start="717:15" pos:end="717:16">==</operator> <call pos:start="717:18" pos:end="717:98"><name pos:start="717:18" pos:end="717:28">CU_add_test</name><argument_list pos:start="717:29" pos:end="717:98">(<argument pos:start="717:30" pos:end="717:35"><expr pos:start="717:30" pos:end="717:35"><name pos:start="717:30" pos:end="717:35">pSuite</name></expr></argument>, <argument pos:start="717:38" pos:end="717:84"><expr pos:start="717:38" pos:end="717:84"><literal type="string" pos:start="717:38" pos:end="717:84">"Enroll w/PoP disabled, CSR includes valid PoP"</literal></expr></argument>, <argument pos:start="717:87" pos:end="717:97"><expr pos:start="717:87" pos:end="717:97"><name pos:start="717:87" pos:end="717:97">us903_test9</name></expr></argument>)</argument_list></call><operator pos:start="717:99" pos:end="717:99">)</operator> <operator pos:start="717:101" pos:end="717:102">||</operator>
        <operator pos:start="718:9" pos:end="718:9">(</operator><name pos:start="718:10" pos:end="718:13">NULL</name> <operator pos:start="718:15" pos:end="718:16">==</operator> <call pos:start="718:18" pos:end="718:101"><name pos:start="718:18" pos:end="718:28">CU_add_test</name><argument_list pos:start="718:29" pos:end="718:101">(<argument pos:start="718:30" pos:end="718:35"><expr pos:start="718:30" pos:end="718:35"><name pos:start="718:30" pos:end="718:35">pSuite</name></expr></argument>, <argument pos:start="718:38" pos:end="718:86"><expr pos:start="718:38" pos:end="718:86"><literal type="string" pos:start="718:38" pos:end="718:86">"Enroll w/PoP disabled, CSR includes invalid PoP"</literal></expr></argument>, <argument pos:start="718:89" pos:end="718:100"><expr pos:start="718:89" pos:end="718:100"><name pos:start="718:89" pos:end="718:100">us903_test10</name></expr></argument>)</argument_list></call><operator pos:start="718:102" pos:end="718:102">)</operator> <operator pos:start="718:104" pos:end="718:105">||</operator>
        <operator pos:start="719:9" pos:end="719:9">(</operator><name pos:start="719:10" pos:end="719:13">NULL</name> <operator pos:start="719:15" pos:end="719:16">==</operator> <call pos:start="719:18" pos:end="719:114"><name pos:start="719:18" pos:end="719:28">CU_add_test</name><argument_list pos:start="719:29" pos:end="719:114">(<argument pos:start="719:30" pos:end="719:35"><expr pos:start="719:30" pos:end="719:35"><name pos:start="719:30" pos:end="719:35">pSuite</name></expr></argument>, <argument pos:start="719:38" pos:end="719:99"><expr pos:start="719:38" pos:end="719:99"><literal type="string" pos:start="719:38" pos:end="719:99">"Enroll w/PoP enabled using RA cert, CSR includes invalid PoP"</literal></expr></argument>, <argument pos:start="719:102" pos:end="719:113"><expr pos:start="719:102" pos:end="719:113"><name pos:start="719:102" pos:end="719:113">us903_test11</name></expr></argument>)</argument_list></call><operator pos:start="719:115" pos:end="719:115">)</operator></expr>)</condition>
    <block pos:start="720:5" pos:end="723:5">{<block_content pos:start="721:8" pos:end="722:29">
       <expr_stmt pos:start="721:8" pos:end="721:29"><expr pos:start="721:8" pos:end="721:28"><call pos:start="721:8" pos:end="721:28"><name pos:start="721:8" pos:end="721:26">CU_cleanup_registry</name><argument_list pos:start="721:27" pos:end="721:28">()</argument_list></call></expr>;</expr_stmt>
       <return pos:start="722:8" pos:end="722:29">return <expr pos:start="722:15" pos:end="722:28"><call pos:start="722:15" pos:end="722:28"><name pos:start="722:15" pos:end="722:26">CU_get_error</name><argument_list pos:start="722:27" pos:end="722:28">()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="725:5" pos:end="727:0">return <expr pos:start="725:12" pos:end="725:22"><name pos:start="725:12" pos:end="725:22">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="726:1" pos:end="726:6">#<cpp:directive pos:start="726:2" pos:end="726:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
