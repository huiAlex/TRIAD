<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="test_code/us3612.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="11:2">/*------------------------------------------------------------------
 * us3612.c - Unit Tests for User Story US3612 - Encrypted Private Key Support
 *
 *
 *
 * July, 2016
 *
 * Copyright (c) 2016 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
*/</comment>

<cpp:include pos:start="13:1" pos:end="13:18">#<cpp:directive pos:start="13:2" pos:end="13:8">include</cpp:directive> <cpp:file pos:start="13:10" pos:end="13:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef pos:start="14:1" pos:end="14:13">#<cpp:directive pos:start="14:2" pos:end="14:7">ifndef</cpp:directive> <name pos:start="14:9" pos:end="14:13">WIN32</name></cpp:ifndef>
<cpp:include pos:start="15:1" pos:end="15:19">#<cpp:directive pos:start="15:2" pos:end="15:8">include</cpp:directive> <cpp:file pos:start="15:10" pos:end="15:19">&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif pos:start="16:1" pos:end="16:6">#<cpp:directive pos:start="16:2" pos:end="16:6">endif</cpp:directive></cpp:endif>
<cpp:include pos:start="17:1" pos:end="17:16">#<cpp:directive pos:start="17:2" pos:end="17:8">include</cpp:directive> <cpp:file pos:start="17:10" pos:end="17:16">&lt;est.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="18:1" pos:end="18:23">#<cpp:directive pos:start="18:2" pos:end="18:8">include</cpp:directive> <cpp:file pos:start="18:10" pos:end="18:23">"test_utils.h"</cpp:file></cpp:include>
<cpp:include pos:start="19:1" pos:end="19:22">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:22">"st_server.h"</cpp:file></cpp:include>
<cpp:include pos:start="20:1" pos:end="20:24">#<cpp:directive pos:start="20:2" pos:end="20:8">include</cpp:directive> <cpp:file pos:start="20:10" pos:end="20:24">&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="21:1" pos:end="21:27">#<cpp:directive pos:start="21:2" pos:end="21:8">include</cpp:directive> <cpp:file pos:start="21:10" pos:end="21:27">&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:start="23:1" pos:end="23:17">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:17">HAVE_CUNIT</name></cpp:ifdef>
<cpp:include pos:start="24:1" pos:end="24:24">#<cpp:directive pos:start="24:2" pos:end="24:8">include</cpp:directive> <cpp:file pos:start="24:10" pos:end="24:24">"CUnit/Basic.h"</cpp:file></cpp:include>
<cpp:include pos:start="25:1" pos:end="25:28">#<cpp:directive pos:start="25:2" pos:end="25:8">include</cpp:directive> <cpp:file pos:start="25:10" pos:end="25:28">"CUnit/Automated.h"</cpp:file></cpp:include>
<cpp:endif pos:start="26:1" pos:end="26:6">#<cpp:directive pos:start="26:2" pos:end="26:6">endif</cpp:directive></cpp:endif>

<decl_stmt pos:start="28:1" pos:end="28:37"><decl pos:start="28:1" pos:end="28:36"><type pos:start="28:1" pos:end="28:22"><specifier pos:start="28:1" pos:end="28:6">static</specifier> <name pos:start="28:8" pos:end="28:15">unsigned</name> <name pos:start="28:17" pos:end="28:20">char</name> <modifier pos:start="28:22" pos:end="28:22">*</modifier></type><name pos:start="28:23" pos:end="28:29">cacerts</name> <init pos:start="28:31" pos:end="28:36">= <expr pos:start="28:33" pos:end="28:36"><name pos:start="28:33" pos:end="28:36">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="29:1" pos:end="29:33"><decl pos:start="29:1" pos:end="29:32"><type pos:start="29:1" pos:end="29:13"><specifier pos:start="29:1" pos:end="29:6">static</specifier> <name pos:start="29:8" pos:end="29:11">char</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:25">key_password</name> <init pos:start="29:27" pos:end="29:32">= <expr pos:start="29:29" pos:end="29:32"><name pos:start="29:29" pos:end="29:32">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt pos:start="30:1" pos:end="59:0"><decl pos:start="30:1" pos:end="30:26"><type pos:start="30:1" pos:end="30:10"><specifier pos:start="30:1" pos:end="30:6">static</specifier> <name pos:start="30:8" pos:end="30:10">int</name></type> <name pos:start="30:12" pos:end="30:22">cacerts_len</name> <init pos:start="30:24" pos:end="30:26">= <expr pos:start="30:26" pos:end="30:26"><literal type="number" pos:start="30:26" pos:end="30:26">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="32:1" pos:end="32:34">#<cpp:directive pos:start="32:2" pos:end="32:7">define</cpp:directive> <cpp:macro pos:start="32:9" pos:end="32:26"><name pos:start="32:9" pos:end="32:26">US3612_SERVER_PORT</name></cpp:macro>   <cpp:value pos:start="32:30" pos:end="32:34">29899</cpp:value></cpp:define>
<cpp:define pos:start="33:1" pos:end="33:40">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:24">US3612_SERVER_IP</name></cpp:macro>     <cpp:value pos:start="33:30" pos:end="33:40">"127.0.0.1"</cpp:value></cpp:define>
<cpp:define pos:start="34:1" pos:end="34:38">#<cpp:directive pos:start="34:2" pos:end="34:7">define</cpp:directive> <cpp:macro pos:start="34:9" pos:end="34:18"><name pos:start="34:9" pos:end="34:18">US3612_UID</name></cpp:macro>           <cpp:value pos:start="34:30" pos:end="34:38">"estuser"</cpp:value></cpp:define>
<cpp:define pos:start="35:1" pos:end="35:37">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:18">US3612_PWD</name></cpp:macro>           <cpp:value pos:start="35:30" pos:end="35:37">"estpwd"</cpp:value></cpp:define>
<cpp:define pos:start="36:1" pos:end="36:32">#<cpp:directive pos:start="36:2" pos:end="36:7">define</cpp:directive> <cpp:macro pos:start="36:9" pos:end="36:23"><name pos:start="36:9" pos:end="36:23">US3612_GOOD_PWD</name></cpp:macro> <cpp:value pos:start="36:25" pos:end="36:32">"us3612"</cpp:value></cpp:define>
<cpp:define pos:start="37:1" pos:end="37:46">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:22">US3612_BAD_PWD</name></cpp:macro>  <cpp:value pos:start="37:25" pos:end="37:46">"thiscantpossiblywork"</cpp:value></cpp:define>
<cpp:define pos:start="38:1" pos:end="38:24">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:19"><name pos:start="38:9" pos:end="38:19">RSA_KEYSIZE</name></cpp:macro> <cpp:value pos:start="38:21" pos:end="38:24">4096</cpp:value></cpp:define>

<comment type="block" pos:start="40:1" pos:end="42:3">/*
 * Key wrap algorithm optionally used to protect private keys
 */</comment>
<cpp:define pos:start="43:1" pos:end="43:45">#<cpp:directive pos:start="43:2" pos:end="43:7">define</cpp:directive> <cpp:macro pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:27">EST_PRIVATE_KEY_ENC</name></cpp:macro> <cpp:value pos:start="43:29" pos:end="43:45">EVP_aes_128_cbc()</cpp:value></cpp:define>

<comment type="block" pos:start="45:1" pos:end="47:3">/*
 * The following certs are used for FQDN testing
 */</comment>
<cpp:ifndef pos:start="48:1" pos:end="48:13">#<cpp:directive pos:start="48:2" pos:end="48:7">ifndef</cpp:directive> <name pos:start="48:9" pos:end="48:13">WIN32</name></cpp:ifndef>
<cpp:define pos:start="49:1" pos:end="49:50">#<cpp:directive pos:start="49:2" pos:end="49:7">define</cpp:directive> <cpp:macro pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:22">US3612_CACERTS</name></cpp:macro>       <cpp:value pos:start="49:30" pos:end="49:50">"CA/estCA/cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="50:1" pos:end="50:50">#<cpp:directive pos:start="50:2" pos:end="50:7">define</cpp:directive> <cpp:macro pos:start="50:9" pos:end="50:26"><name pos:start="50:9" pos:end="50:26">US3612_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="50:30" pos:end="50:50">"CA/trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="51:1" pos:end="51:74">#<cpp:directive pos:start="51:2" pos:end="51:7">define</cpp:directive> <cpp:macro pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:29">US3612_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="51:33" pos:end="51:74">"CA/estCA/private/estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="52:55">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:31"><name pos:start="52:9" pos:end="52:31">US3612_PRIVATE_KEY_FILE</name></cpp:macro> <cpp:value pos:start="52:33" pos:end="52:55">"US3612/us3612_key.pem"</cpp:value></cpp:define>

<cpp:else pos:start="54:1" pos:end="54:5">#<cpp:directive pos:start="54:2" pos:end="54:5">else</cpp:directive></cpp:else>
<cpp:define pos:start="55:1" pos:end="55:52">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:22">US3612_CACERTS</name></cpp:macro>       <cpp:value pos:start="55:30" pos:end="55:52">"CA\\estCA\\cacert.crt"</cpp:value></cpp:define>
<cpp:define pos:start="56:1" pos:end="56:51">#<cpp:directive pos:start="56:2" pos:end="56:7">define</cpp:directive> <cpp:macro pos:start="56:9" pos:end="56:26"><name pos:start="56:9" pos:end="56:26">US3612_TRUST_CERTS</name></cpp:macro>   <cpp:value pos:start="56:30" pos:end="56:51">"CA\\trustedcerts.crt"</cpp:value></cpp:define>
<cpp:define pos:start="57:1" pos:end="57:77">#<cpp:directive pos:start="57:2" pos:end="57:7">define</cpp:directive> <cpp:macro pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:29">US3612_SERVER_CERTKEY</name></cpp:macro>   <cpp:value pos:start="57:33" pos:end="57:77">"CA\\estCA\\private\\estservercertandkey.pem"</cpp:value></cpp:define>
<cpp:define pos:start="58:1" pos:end="58:56">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:31"><name pos:start="58:9" pos:end="58:31">US3612_PRIVATE_KEY_FILE</name></cpp:macro> <cpp:value pos:start="58:33" pos:end="58:56">"US3612\\us3612_key.pem"</cpp:value></cpp:define>

<decl_stmt pos:start="60:1" pos:end="60:48"><decl pos:start="60:1" pos:end="60:47"><type pos:start="60:1" pos:end="60:23"><specifier pos:start="60:1" pos:end="60:6">static</specifier> <name pos:start="60:8" pos:end="60:23">CRITICAL_SECTION</name></type> <name pos:start="60:25" pos:end="60:47">logger_critical_section</name></decl>;</decl_stmt>
<function pos:start="61:1" pos:end="69:0"><type pos:start="61:1" pos:end="61:11"><specifier pos:start="61:1" pos:end="61:6">static</specifier> <name pos:start="61:8" pos:end="61:11">void</name></type> <name pos:start="61:13" pos:end="61:32">us3612_logger_stderr</name> <parameter_list pos:start="61:34" pos:end="61:58">(<parameter pos:start="61:35" pos:end="61:46"><decl pos:start="61:35" pos:end="61:46"><type pos:start="61:35" pos:end="61:46"><name pos:start="61:35" pos:end="61:38">char</name> <modifier pos:start="61:40" pos:end="61:40">*</modifier></type><name pos:start="61:41" pos:end="61:46">format</name></decl></parameter>, <parameter pos:start="61:49" pos:end="61:57"><decl pos:start="61:49" pos:end="61:57"><type pos:start="61:49" pos:end="61:57"><name pos:start="61:49" pos:end="61:55">va_list</name></type> <name pos:start="61:57" pos:end="61:57">l</name></decl></parameter>)</parameter_list>
<block pos:start="62:1" pos:end="69:0">{<block_content pos:start="63:5" pos:end="66:51">
    <expr_stmt pos:start="63:5" pos:end="63:51"><expr pos:start="63:5" pos:end="63:50"><call pos:start="63:5" pos:end="63:50"><name pos:start="63:5" pos:end="63:24">EnterCriticalSection</name><argument_list pos:start="63:25" pos:end="63:50">(<argument pos:start="63:26" pos:end="63:49"><expr pos:start="63:26" pos:end="63:49"><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:32"><expr pos:start="64:5" pos:end="64:31"><call pos:start="64:5" pos:end="64:31"><name pos:start="64:5" pos:end="64:12">vfprintf</name><argument_list pos:start="64:13" pos:end="64:31">(<argument pos:start="64:14" pos:end="64:19"><expr pos:start="64:14" pos:end="64:19"><name pos:start="64:14" pos:end="64:19">stderr</name></expr></argument>, <argument pos:start="64:22" pos:end="64:27"><expr pos:start="64:22" pos:end="64:27"><name pos:start="64:22" pos:end="64:27">format</name></expr></argument>, <argument pos:start="64:30" pos:end="64:30"><expr pos:start="64:30" pos:end="64:30"><name pos:start="64:30" pos:end="64:30">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:19"><expr pos:start="65:5" pos:end="65:18"><call pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:10">fflush</name><argument_list pos:start="65:11" pos:end="65:18">(<argument pos:start="65:12" pos:end="65:17"><expr pos:start="65:12" pos:end="65:17"><name pos:start="65:12" pos:end="65:17">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:51"><expr pos:start="66:5" pos:end="66:50"><call pos:start="66:5" pos:end="66:50"><name pos:start="66:5" pos:end="66:24">LeaveCriticalSection</name><argument_list pos:start="66:25" pos:end="66:50">(<argument pos:start="66:26" pos:end="66:49"><expr pos:start="66:26" pos:end="66:49"><operator pos:start="66:26" pos:end="66:26">&amp;</operator><name pos:start="66:27" pos:end="66:49">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif pos:start="68:1" pos:end="68:6">#<cpp:directive pos:start="68:2" pos:end="68:6">endif</cpp:directive></cpp:endif>

<function pos:start="70:1" pos:end="86:1"><type pos:start="70:1" pos:end="70:15"><name pos:start="70:1" pos:end="70:8">unsigned</name> <name pos:start="70:10" pos:end="70:13">char</name> <modifier pos:start="70:15" pos:end="70:15">*</modifier></type><name pos:start="70:16" pos:end="70:28">BIO_copy_data</name><parameter_list pos:start="70:29" pos:end="70:54">(<parameter pos:start="70:30" pos:end="70:37"><decl pos:start="70:30" pos:end="70:37"><type pos:start="70:30" pos:end="70:37"><name pos:start="70:30" pos:end="70:32">BIO</name> <modifier pos:start="70:34" pos:end="70:34">*</modifier></type><name pos:start="70:35" pos:end="70:37">out</name></decl></parameter>, <parameter pos:start="70:40" pos:end="70:53"><decl pos:start="70:40" pos:end="70:53"><type pos:start="70:40" pos:end="70:53"><name pos:start="70:40" pos:end="70:42">int</name> <modifier pos:start="70:44" pos:end="70:44">*</modifier></type><name pos:start="70:45" pos:end="70:53">data_lenp</name></decl></parameter>)</parameter_list> <block pos:start="70:56" pos:end="86:1">{<block_content pos:start="71:5" pos:end="85:16">
    <decl_stmt pos:start="71:5" pos:end="71:32"><decl pos:start="71:5" pos:end="71:23"><type pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:12">unsigned</name> <name pos:start="71:14" pos:end="71:17">char</name> <modifier pos:start="71:19" pos:end="71:19">*</modifier></type><name pos:start="71:20" pos:end="71:23">data</name></decl>, <decl pos:start="71:26" pos:end="71:31"><type ref="prev" pos:start="71:5" pos:end="71:19"><modifier pos:start="71:26" pos:end="71:26">*</modifier></type><name pos:start="71:27" pos:end="71:31">tdata</name></decl>;</decl_stmt>
    <decl_stmt pos:start="72:5" pos:end="72:17"><decl pos:start="72:5" pos:end="72:16"><type pos:start="72:5" pos:end="72:7"><name pos:start="72:5" pos:end="72:7">int</name></type> <name pos:start="72:9" pos:end="72:16">data_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="74:5" pos:end="74:45"><expr pos:start="74:5" pos:end="74:44"><name pos:start="74:5" pos:end="74:12">data_len</name> <operator pos:start="74:14" pos:end="74:14">=</operator> <call pos:start="74:16" pos:end="74:44"><name pos:start="74:16" pos:end="74:31">BIO_get_mem_data</name><argument_list pos:start="74:32" pos:end="74:44">(<argument pos:start="74:33" pos:end="74:35"><expr pos:start="74:33" pos:end="74:35"><name pos:start="74:33" pos:end="74:35">out</name></expr></argument>, <argument pos:start="74:38" pos:end="74:43"><expr pos:start="74:38" pos:end="74:43"><operator pos:start="74:38" pos:end="74:38">&amp;</operator><name pos:start="74:39" pos:end="74:43">tdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="75:5" pos:end="75:30"><expr pos:start="75:5" pos:end="75:29"><name pos:start="75:5" pos:end="75:8">data</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <call pos:start="75:12" pos:end="75:29"><name pos:start="75:12" pos:end="75:17">malloc</name><argument_list pos:start="75:18" pos:end="75:29">(<argument pos:start="75:19" pos:end="75:28"><expr pos:start="75:19" pos:end="75:28"><name pos:start="75:19" pos:end="75:26">data_len</name><operator pos:start="75:27" pos:end="75:27">+</operator><literal type="number" pos:start="75:28" pos:end="75:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="76:5" pos:end="84:5"><if pos:start="76:5" pos:end="82:5">if <condition pos:start="76:8" pos:end="76:13">(<expr pos:start="76:9" pos:end="76:12"><name pos:start="76:9" pos:end="76:12">data</name></expr>)</condition> <block pos:start="76:15" pos:end="82:5">{<block_content pos:start="77:9" pos:end="81:9">
        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><call pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:14">memcpy</name><argument_list pos:start="77:15" pos:end="77:37">(<argument pos:start="77:16" pos:end="77:19"><expr pos:start="77:16" pos:end="77:19"><name pos:start="77:16" pos:end="77:19">data</name></expr></argument>, <argument pos:start="77:22" pos:end="77:26"><expr pos:start="77:22" pos:end="77:26"><name pos:start="77:22" pos:end="77:26">tdata</name></expr></argument>, <argument pos:start="77:29" pos:end="77:36"><expr pos:start="77:29" pos:end="77:36"><name pos:start="77:29" pos:end="77:36">data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="78:9" pos:end="78:28"><expr pos:start="78:9" pos:end="78:27"><name pos:start="78:9" pos:end="78:22"><name pos:start="78:9" pos:end="78:12">data</name><index pos:start="78:13" pos:end="78:22">[<expr pos:start="78:14" pos:end="78:21"><name pos:start="78:14" pos:end="78:21">data_len</name></expr>]</index></name><operator pos:start="78:23" pos:end="78:23">=</operator><literal type="char" pos:start="78:24" pos:end="78:27">'\0'</literal></expr>;</expr_stmt>  <comment type="line" pos:start="78:31" pos:end="78:85">// Make sure it's \0 terminated, in case used as string</comment>
	<if_stmt pos:start="79:9" pos:end="81:9"><if pos:start="79:9" pos:end="81:9">if <condition pos:start="79:12" pos:end="79:22">(<expr pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:21">data_lenp</name></expr>)</condition> <block pos:start="79:24" pos:end="81:9">{<block_content pos:start="80:13" pos:end="80:34">
	    <expr_stmt pos:start="80:13" pos:end="80:34"><expr pos:start="80:13" pos:end="80:33"><operator pos:start="80:13" pos:end="80:13">*</operator><name pos:start="80:14" pos:end="80:22">data_lenp</name> <operator pos:start="80:24" pos:end="80:24">=</operator> <name pos:start="80:26" pos:end="80:33">data_len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="82:7" pos:end="84:5">else <block pos:start="82:12" pos:end="84:5">{<block_content pos:start="83:9" pos:end="83:32">
        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><call pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:14">printf</name><argument_list pos:start="83:15" pos:end="83:31">(<argument pos:start="83:16" pos:end="83:30"><expr pos:start="83:16" pos:end="83:30"><literal type="string" pos:start="83:16" pos:end="83:30">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="85:5" pos:end="85:16">return <expr pos:start="85:12" pos:end="85:15"><name pos:start="85:12" pos:end="85:15">data</name></expr>;</return>
</block_content>}</block></function>

<function pos:start="88:1" pos:end="123:1"><type pos:start="88:1" pos:end="88:6"><name pos:start="88:1" pos:end="88:4">char</name> <modifier pos:start="88:6" pos:end="88:6">*</modifier></type><name pos:start="88:7" pos:end="88:30">generate_private_RSA_key</name> <parameter_list pos:start="88:32" pos:end="88:66">(<parameter pos:start="88:33" pos:end="88:44"><decl pos:start="88:33" pos:end="88:44"><type pos:start="88:33" pos:end="88:44"><name pos:start="88:33" pos:end="88:35">int</name></type> <name pos:start="88:37" pos:end="88:44">key_size</name></decl></parameter>, <parameter pos:start="88:47" pos:end="88:65"><decl pos:start="88:47" pos:end="88:65"><type pos:start="88:47" pos:end="88:65"><name pos:start="88:47" pos:end="88:61">pem_password_cb</name> <modifier pos:start="88:63" pos:end="88:63">*</modifier></type><name pos:start="88:64" pos:end="88:65">cb</name></decl></parameter>)</parameter_list>
<block pos:start="89:1" pos:end="123:1">{<block_content pos:start="90:5" pos:end="122:22">
    <decl_stmt pos:start="90:5" pos:end="90:26"><decl pos:start="90:5" pos:end="90:25"><type pos:start="90:5" pos:end="90:10"><name pos:start="90:5" pos:end="90:8">char</name> <modifier pos:start="90:10" pos:end="90:10">*</modifier></type><name pos:start="90:11" pos:end="90:18">key_data</name> <init pos:start="90:20" pos:end="90:25">= <expr pos:start="90:22" pos:end="90:25"><name pos:start="90:22" pos:end="90:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="92:5" pos:end="92:25"><decl pos:start="92:5" pos:end="92:24"><type pos:start="92:5" pos:end="92:9"><name pos:start="92:5" pos:end="92:7">RSA</name> <modifier pos:start="92:9" pos:end="92:9">*</modifier></type><name pos:start="92:10" pos:end="92:12">rsa</name> <init pos:start="92:14" pos:end="92:24">= <expr pos:start="92:16" pos:end="92:24"><call pos:start="92:16" pos:end="92:24"><name pos:start="92:16" pos:end="92:22">RSA_new</name><argument_list pos:start="92:23" pos:end="92:24">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="93:5" pos:end="95:5"><if pos:start="93:5" pos:end="95:5">if <condition pos:start="93:8" pos:end="93:13">(<expr pos:start="93:9" pos:end="93:12"><operator pos:start="93:9" pos:end="93:9">!</operator><name pos:start="93:10" pos:end="93:12">rsa</name></expr>)</condition> <block pos:start="93:15" pos:end="95:5">{<block_content pos:start="94:9" pos:end="94:20">
        <return pos:start="94:9" pos:end="94:20">return <expr pos:start="94:16" pos:end="94:19"><name pos:start="94:16" pos:end="94:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt pos:start="96:5" pos:end="96:26"><decl pos:start="96:5" pos:end="96:25"><type pos:start="96:5" pos:end="96:12"><name pos:start="96:5" pos:end="96:10">BIGNUM</name> <modifier pos:start="96:12" pos:end="96:12">*</modifier></type><name pos:start="96:13" pos:end="96:14">bn</name> <init pos:start="96:16" pos:end="96:25">= <expr pos:start="96:18" pos:end="96:25"><call pos:start="96:18" pos:end="96:25"><name pos:start="96:18" pos:end="96:23">BN_new</name><argument_list pos:start="96:24" pos:end="96:25">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="97:5" pos:end="100:5"><if pos:start="97:5" pos:end="100:5">if <condition pos:start="97:8" pos:end="97:12">(<expr pos:start="97:9" pos:end="97:11"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:11">bn</name></expr>)</condition> <block pos:start="97:14" pos:end="100:5">{<block_content pos:start="98:9" pos:end="99:20">
        <expr_stmt pos:start="98:9" pos:end="98:22"><expr pos:start="98:9" pos:end="98:21"><call pos:start="98:9" pos:end="98:21"><name pos:start="98:9" pos:end="98:16">RSA_free</name><argument_list pos:start="98:17" pos:end="98:21">(<argument pos:start="98:18" pos:end="98:20"><expr pos:start="98:18" pos:end="98:20"><name pos:start="98:18" pos:end="98:20">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="99:9" pos:end="99:20">return <expr pos:start="99:16" pos:end="99:19"><name pos:start="99:16" pos:end="99:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="102:5" pos:end="102:29"><expr pos:start="102:5" pos:end="102:28"><call pos:start="102:5" pos:end="102:28"><name pos:start="102:5" pos:end="102:15">BN_set_word</name><argument_list pos:start="102:16" pos:end="102:28">(<argument pos:start="102:17" pos:end="102:18"><expr pos:start="102:17" pos:end="102:18"><name pos:start="102:17" pos:end="102:18">bn</name></expr></argument>, <argument pos:start="102:21" pos:end="102:27"><expr pos:start="102:21" pos:end="102:27"><literal type="number" pos:start="102:21" pos:end="102:27">0x10001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:49"><expr pos:start="103:5" pos:end="103:48"><call pos:start="103:5" pos:end="103:48"><name pos:start="103:5" pos:end="103:23">RSA_generate_key_ex</name><argument_list pos:start="103:24" pos:end="103:48">(<argument pos:start="103:25" pos:end="103:27"><expr pos:start="103:25" pos:end="103:27"><name pos:start="103:25" pos:end="103:27">rsa</name></expr></argument>, <argument pos:start="103:30" pos:end="103:37"><expr pos:start="103:30" pos:end="103:37"><name pos:start="103:30" pos:end="103:37">key_size</name></expr></argument>, <argument pos:start="103:40" pos:end="103:41"><expr pos:start="103:40" pos:end="103:41"><name pos:start="103:40" pos:end="103:41">bn</name></expr></argument>, <argument pos:start="103:44" pos:end="103:47"><expr pos:start="103:44" pos:end="103:47"><name pos:start="103:44" pos:end="103:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="105:5" pos:end="118:30">do <block pos:start="105:8" pos:end="118:5">{<block_content pos:start="106:9" pos:end="117:9">
        <decl_stmt pos:start="106:9" pos:end="106:40"><decl pos:start="106:9" pos:end="106:39"><type pos:start="106:9" pos:end="106:13"><name pos:start="106:9" pos:end="106:11">BIO</name> <modifier pos:start="106:13" pos:end="106:13">*</modifier></type><name pos:start="106:14" pos:end="106:16">out</name> <init pos:start="106:18" pos:end="106:39">= <expr pos:start="106:20" pos:end="106:39"><call pos:start="106:20" pos:end="106:39"><name pos:start="106:20" pos:end="106:26">BIO_new</name><argument_list pos:start="106:27" pos:end="106:39">(<argument pos:start="106:28" pos:end="106:38"><expr pos:start="106:28" pos:end="106:38"><call pos:start="106:28" pos:end="106:38"><name pos:start="106:28" pos:end="106:36">BIO_s_mem</name><argument_list pos:start="106:37" pos:end="106:38">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="107:9" pos:end="109:9"><if pos:start="107:9" pos:end="109:9">if <condition pos:start="107:12" pos:end="107:17">(<expr pos:start="107:13" pos:end="107:16"><operator pos:start="107:13" pos:end="107:13">!</operator><name pos:start="107:14" pos:end="107:16">out</name></expr>)</condition> <block pos:start="107:19" pos:end="109:9">{<block_content pos:start="108:13" pos:end="108:18">
            <break pos:start="108:13" pos:end="108:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="110:9" pos:end="110:98"><expr pos:start="110:9" pos:end="110:97"><call pos:start="110:9" pos:end="110:97"><name pos:start="110:9" pos:end="110:35">PEM_write_bio_RSAPrivateKey</name><argument_list pos:start="110:36" pos:end="110:97">(<argument pos:start="110:37" pos:end="110:39"><expr pos:start="110:37" pos:end="110:39"><name pos:start="110:37" pos:end="110:39">out</name></expr></argument>, <argument pos:start="110:42" pos:end="110:44"><expr pos:start="110:42" pos:end="110:44"><name pos:start="110:42" pos:end="110:44">rsa</name></expr></argument>, <argument pos:start="110:47" pos:end="110:77"><expr pos:start="110:47" pos:end="110:77"><ternary pos:start="110:47" pos:end="110:77"><condition pos:start="110:47" pos:end="110:50"><expr pos:start="110:47" pos:end="110:48"><name pos:start="110:47" pos:end="110:48">cb</name></expr> ?</condition><then pos:start="110:52" pos:end="110:70"> <expr pos:start="110:52" pos:end="110:70"><name pos:start="110:52" pos:end="110:70">EST_PRIVATE_KEY_ENC</name></expr> </then><else pos:start="110:72" pos:end="110:77">: <expr pos:start="110:74" pos:end="110:77"><name pos:start="110:74" pos:end="110:77">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="110:80" pos:end="110:83"><expr pos:start="110:80" pos:end="110:83"><name pos:start="110:80" pos:end="110:83">NULL</name></expr></argument>, <argument pos:start="110:86" pos:end="110:86"><expr pos:start="110:86" pos:end="110:86"><literal type="number" pos:start="110:86" pos:end="110:86">0</literal></expr></argument>, <argument pos:start="110:89" pos:end="110:90"><expr pos:start="110:89" pos:end="110:90"><name pos:start="110:89" pos:end="110:90">cb</name></expr></argument>, <argument pos:start="110:93" pos:end="110:96"><expr pos:start="110:93" pos:end="110:96"><name pos:start="110:93" pos:end="110:96">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="111:9" pos:end="111:52"><expr pos:start="111:9" pos:end="111:51"><name pos:start="111:9" pos:end="111:16">key_data</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <operator pos:start="111:20" pos:end="111:20">(</operator><name pos:start="111:21" pos:end="111:24">char</name> <operator pos:start="111:26" pos:end="111:26">*</operator><operator pos:start="111:27" pos:end="111:27">)</operator><call pos:start="111:28" pos:end="111:51"><name pos:start="111:28" pos:end="111:40">BIO_copy_data</name><argument_list pos:start="111:41" pos:end="111:51">(<argument pos:start="111:42" pos:end="111:44"><expr pos:start="111:42" pos:end="111:44"><name pos:start="111:42" pos:end="111:44">out</name></expr></argument>, <argument pos:start="111:47" pos:end="111:50"><expr pos:start="111:47" pos:end="111:50"><name pos:start="111:47" pos:end="111:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="112:9" pos:end="112:22"><expr pos:start="112:9" pos:end="112:21"><call pos:start="112:9" pos:end="112:21"><name pos:start="112:9" pos:end="112:16">BIO_free</name><argument_list pos:start="112:17" pos:end="112:21">(<argument pos:start="112:18" pos:end="112:20"><expr pos:start="112:18" pos:end="112:20"><name pos:start="112:18" pos:end="112:20">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:37">(<expr pos:start="113:13" pos:end="113:36"><name pos:start="113:13" pos:end="113:20">key_data</name> <operator pos:start="113:22" pos:end="113:23">&amp;&amp;</operator> <operator pos:start="113:25" pos:end="113:25">!</operator><name pos:start="113:26" pos:end="113:36"><name pos:start="113:26" pos:end="113:33">key_data</name><index pos:start="113:34" pos:end="113:36">[<expr pos:start="113:35" pos:end="113:35"><literal type="number" pos:start="113:35" pos:end="113:35">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="113:39" pos:end="117:9">{<block_content pos:start="115:13" pos:end="116:28">
            <comment type="line" pos:start="114:13" pos:end="114:100">// happens if passphrase entered via STDIN does not verify or has less than 4 characters</comment>
            <expr_stmt pos:start="115:13" pos:end="115:27"><expr pos:start="115:13" pos:end="115:26"><call pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:16">free</name><argument_list pos:start="115:17" pos:end="115:26">(<argument pos:start="115:18" pos:end="115:25"><expr pos:start="115:18" pos:end="115:25"><name pos:start="115:18" pos:end="115:25">key_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="116:13" pos:end="116:28"><expr pos:start="116:13" pos:end="116:27"><name pos:start="116:13" pos:end="116:20">key_data</name> <operator pos:start="116:22" pos:end="116:22">=</operator> <name pos:start="116:24" pos:end="116:27">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition pos:start="118:13" pos:end="118:29">(<expr pos:start="118:14" pos:end="118:28"><name pos:start="118:14" pos:end="118:15">cb</name> <operator pos:start="118:17" pos:end="118:18">&amp;&amp;</operator> <operator pos:start="118:20" pos:end="118:20">!</operator><name pos:start="118:21" pos:end="118:28">key_data</name></expr>)</condition>;</do>

    <expr_stmt pos:start="120:5" pos:end="120:18"><expr pos:start="120:5" pos:end="120:17"><call pos:start="120:5" pos:end="120:17"><name pos:start="120:5" pos:end="120:12">RSA_free</name><argument_list pos:start="120:13" pos:end="120:17">(<argument pos:start="120:14" pos:end="120:16"><expr pos:start="120:14" pos:end="120:16"><name pos:start="120:14" pos:end="120:16">rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="121:5" pos:end="121:16"><expr pos:start="121:5" pos:end="121:15"><call pos:start="121:5" pos:end="121:15"><name pos:start="121:5" pos:end="121:11">BN_free</name><argument_list pos:start="121:12" pos:end="121:15">(<argument pos:start="121:13" pos:end="121:14"><expr pos:start="121:13" pos:end="121:14"><name pos:start="121:13" pos:end="121:14">bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="122:5" pos:end="122:22">return <expr pos:start="122:12" pos:end="122:21"><operator pos:start="122:12" pos:end="122:12">(</operator><name pos:start="122:13" pos:end="122:20">key_data</name><operator pos:start="122:21" pos:end="122:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="125:1" pos:end="168:1"><type pos:start="125:1" pos:end="125:6"><name pos:start="125:1" pos:end="125:4">char</name> <modifier pos:start="125:6" pos:end="125:6">*</modifier></type><name pos:start="125:7" pos:end="125:29">generate_private_EC_key</name> <parameter_list pos:start="125:31" pos:end="125:66">(<parameter pos:start="125:32" pos:end="125:44"><decl pos:start="125:32" pos:end="125:44"><type pos:start="125:32" pos:end="125:44"><name pos:start="125:32" pos:end="125:34">int</name></type> <name pos:start="125:36" pos:end="125:44">curve_nid</name></decl></parameter>, <parameter pos:start="125:47" pos:end="125:65"><decl pos:start="125:47" pos:end="125:65"><type pos:start="125:47" pos:end="125:65"><name pos:start="125:47" pos:end="125:61">pem_password_cb</name> <modifier pos:start="125:63" pos:end="125:63">*</modifier></type><name pos:start="125:64" pos:end="125:65">cb</name></decl></parameter>)</parameter_list>
<block pos:start="126:1" pos:end="168:1">{<block_content pos:start="127:5" pos:end="167:22">
    <decl_stmt pos:start="127:5" pos:end="127:18"><decl pos:start="127:5" pos:end="127:17"><type pos:start="127:5" pos:end="127:12"><name pos:start="127:5" pos:end="127:10">EC_KEY</name> <modifier pos:start="127:12" pos:end="127:12">*</modifier></type><name pos:start="127:13" pos:end="127:17">eckey</name></decl>;</decl_stmt>
    <decl_stmt pos:start="128:5" pos:end="128:27"><decl pos:start="128:5" pos:end="128:26"><type pos:start="128:5" pos:end="128:14"><name pos:start="128:5" pos:end="128:12">EC_GROUP</name> <modifier pos:start="128:14" pos:end="128:14">*</modifier></type><name pos:start="128:15" pos:end="128:19">group</name> <init pos:start="128:21" pos:end="128:26">= <expr pos:start="128:23" pos:end="128:26"><name pos:start="128:23" pos:end="128:26">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="129:5" pos:end="129:26"><decl pos:start="129:5" pos:end="129:25"><type pos:start="129:5" pos:end="129:10"><name pos:start="129:5" pos:end="129:8">char</name> <modifier pos:start="129:10" pos:end="129:10">*</modifier></type><name pos:start="129:11" pos:end="129:18">key_data</name> <init pos:start="129:20" pos:end="129:25">= <expr pos:start="129:22" pos:end="129:25"><name pos:start="129:22" pos:end="129:25">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="130:5" pos:end="130:43"><decl pos:start="130:5" pos:end="130:42"><type pos:start="130:5" pos:end="130:7"><name pos:start="130:5" pos:end="130:7">int</name></type> <name pos:start="130:9" pos:end="130:17">asn1_flag</name> <init pos:start="130:19" pos:end="130:42">= <expr pos:start="130:21" pos:end="130:42"><name pos:start="130:21" pos:end="130:42">OPENSSL_EC_NAMED_CURVE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="131:5" pos:end="131:65"><decl pos:start="131:5" pos:end="131:64"><type pos:start="131:5" pos:end="131:27"><name pos:start="131:5" pos:end="131:27">point_conversion_form_t</name></type> <name pos:start="131:29" pos:end="131:32">form</name> <init pos:start="131:34" pos:end="131:64">= <expr pos:start="131:36" pos:end="131:64"><name pos:start="131:36" pos:end="131:64">POINT_CONVERSION_UNCOMPRESSED</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="133:5" pos:end="135:7">/*
     * Generate an EC key
     */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:25"><expr pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:9">eckey</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <call pos:start="137:13" pos:end="137:24"><name pos:start="137:13" pos:end="137:22">EC_KEY_new</name><argument_list pos:start="137:23" pos:end="137:24">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="138:5" pos:end="140:5"><if pos:start="138:5" pos:end="140:5">if <condition pos:start="138:8" pos:end="138:15">(<expr pos:start="138:9" pos:end="138:14"><operator pos:start="138:9" pos:end="138:9">!</operator><name pos:start="138:10" pos:end="138:14">eckey</name></expr>)</condition> <block pos:start="138:17" pos:end="140:5">{<block_content pos:start="139:9" pos:end="139:20">
        <return pos:start="139:9" pos:end="139:20">return <expr pos:start="139:16" pos:end="139:19"><name pos:start="139:16" pos:end="139:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="142:5" pos:end="142:50"><expr pos:start="142:5" pos:end="142:49"><name pos:start="142:5" pos:end="142:9">group</name> <operator pos:start="142:11" pos:end="142:11">=</operator> <call pos:start="142:13" pos:end="142:49"><name pos:start="142:13" pos:end="142:38">EC_GROUP_new_by_curve_name</name><argument_list pos:start="142:39" pos:end="142:49">(<argument pos:start="142:40" pos:end="142:48"><expr pos:start="142:40" pos:end="142:48"><name pos:start="142:40" pos:end="142:48">curve_nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="143:5" pos:end="143:45"><expr pos:start="143:5" pos:end="143:44"><call pos:start="143:5" pos:end="143:44"><name pos:start="143:5" pos:end="143:26">EC_GROUP_set_asn1_flag</name><argument_list pos:start="143:27" pos:end="143:44">(<argument pos:start="143:28" pos:end="143:32"><expr pos:start="143:28" pos:end="143:32"><name pos:start="143:28" pos:end="143:32">group</name></expr></argument>, <argument pos:start="143:35" pos:end="143:43"><expr pos:start="143:35" pos:end="143:43"><name pos:start="143:35" pos:end="143:43">asn1_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="144:5" pos:end="144:52"><expr pos:start="144:5" pos:end="144:51"><call pos:start="144:5" pos:end="144:51"><name pos:start="144:5" pos:end="144:38">EC_GROUP_set_point_conversion_form</name><argument_list pos:start="144:39" pos:end="144:51">(<argument pos:start="144:40" pos:end="144:44"><expr pos:start="144:40" pos:end="144:44"><name pos:start="144:40" pos:end="144:44">group</name></expr></argument>, <argument pos:start="144:47" pos:end="144:50"><expr pos:start="144:47" pos:end="144:50"><name pos:start="144:47" pos:end="144:50">form</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="145:5" pos:end="145:35"><expr pos:start="145:5" pos:end="145:34"><call pos:start="145:5" pos:end="145:34"><name pos:start="145:5" pos:end="145:20">EC_KEY_set_group</name><argument_list pos:start="145:21" pos:end="145:34">(<argument pos:start="145:22" pos:end="145:26"><expr pos:start="145:22" pos:end="145:26"><name pos:start="145:22" pos:end="145:26">eckey</name></expr></argument>, <argument pos:start="145:29" pos:end="145:33"><expr pos:start="145:29" pos:end="145:33"><name pos:start="145:29" pos:end="145:33">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="146:5" pos:end="148:5"><if pos:start="146:5" pos:end="148:5">if <condition pos:start="146:8" pos:end="146:36">(<expr pos:start="146:9" pos:end="146:35"><operator pos:start="146:9" pos:end="146:9">!</operator><call pos:start="146:10" pos:end="146:35"><name pos:start="146:10" pos:end="146:28">EC_KEY_generate_key</name><argument_list pos:start="146:29" pos:end="146:35">(<argument pos:start="146:30" pos:end="146:34"><expr pos:start="146:30" pos:end="146:34"><name pos:start="146:30" pos:end="146:34">eckey</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="146:38" pos:end="148:5">{<block_content pos:start="147:9" pos:end="147:22">
        <return pos:start="147:9" pos:end="147:22">return <expr pos:start="147:16" pos:end="147:21"><operator pos:start="147:16" pos:end="147:16">(</operator><name pos:start="147:17" pos:end="147:20">NULL</name><operator pos:start="147:21" pos:end="147:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <do pos:start="150:5" pos:end="164:30">do <block pos:start="150:8" pos:end="164:5">{<block_content pos:start="151:9" pos:end="163:9">
        <decl_stmt pos:start="151:9" pos:end="151:40"><decl pos:start="151:9" pos:end="151:39"><type pos:start="151:9" pos:end="151:13"><name pos:start="151:9" pos:end="151:11">BIO</name> <modifier pos:start="151:13" pos:end="151:13">*</modifier></type><name pos:start="151:14" pos:end="151:16">out</name> <init pos:start="151:18" pos:end="151:39">= <expr pos:start="151:20" pos:end="151:39"><call pos:start="151:20" pos:end="151:39"><name pos:start="151:20" pos:end="151:26">BIO_new</name><argument_list pos:start="151:27" pos:end="151:39">(<argument pos:start="151:28" pos:end="151:38"><expr pos:start="151:28" pos:end="151:38"><call pos:start="151:28" pos:end="151:38"><name pos:start="151:28" pos:end="151:36">BIO_s_mem</name><argument_list pos:start="151:37" pos:end="151:38">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="152:9" pos:end="154:9"><if pos:start="152:9" pos:end="154:9">if <condition pos:start="152:12" pos:end="152:17">(<expr pos:start="152:13" pos:end="152:16"><operator pos:start="152:13" pos:end="152:13">!</operator><name pos:start="152:14" pos:end="152:16">out</name></expr>)</condition> <block pos:start="152:19" pos:end="154:9">{<block_content pos:start="153:13" pos:end="153:18">
            <break pos:start="153:13" pos:end="153:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="155:9" pos:end="155:49"><expr pos:start="155:9" pos:end="155:48"><call pos:start="155:9" pos:end="155:48"><name pos:start="155:9" pos:end="155:36">PEM_write_bio_ECPKParameters</name><argument_list pos:start="155:37" pos:end="155:48">(<argument pos:start="155:38" pos:end="155:40"><expr pos:start="155:38" pos:end="155:40"><name pos:start="155:38" pos:end="155:40">out</name></expr></argument>, <argument pos:start="155:43" pos:end="155:47"><expr pos:start="155:43" pos:end="155:47"><name pos:start="155:43" pos:end="155:47">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="156:9" pos:end="156:99"><expr pos:start="156:9" pos:end="156:98"><call pos:start="156:9" pos:end="156:98"><name pos:start="156:9" pos:end="156:34">PEM_write_bio_ECPrivateKey</name><argument_list pos:start="156:35" pos:end="156:98">(<argument pos:start="156:36" pos:end="156:38"><expr pos:start="156:36" pos:end="156:38"><name pos:start="156:36" pos:end="156:38">out</name></expr></argument>, <argument pos:start="156:41" pos:end="156:45"><expr pos:start="156:41" pos:end="156:45"><name pos:start="156:41" pos:end="156:45">eckey</name></expr></argument>, <argument pos:start="156:48" pos:end="156:78"><expr pos:start="156:48" pos:end="156:78"><ternary pos:start="156:48" pos:end="156:78"><condition pos:start="156:48" pos:end="156:51"><expr pos:start="156:48" pos:end="156:49"><name pos:start="156:48" pos:end="156:49">cb</name></expr> ?</condition><then pos:start="156:53" pos:end="156:71"> <expr pos:start="156:53" pos:end="156:71"><name pos:start="156:53" pos:end="156:71">EST_PRIVATE_KEY_ENC</name></expr> </then><else pos:start="156:73" pos:end="156:78">: <expr pos:start="156:75" pos:end="156:78"><name pos:start="156:75" pos:end="156:78">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="156:81" pos:end="156:84"><expr pos:start="156:81" pos:end="156:84"><name pos:start="156:81" pos:end="156:84">NULL</name></expr></argument>, <argument pos:start="156:87" pos:end="156:87"><expr pos:start="156:87" pos:end="156:87"><literal type="number" pos:start="156:87" pos:end="156:87">0</literal></expr></argument>, <argument pos:start="156:90" pos:end="156:91"><expr pos:start="156:90" pos:end="156:91"><name pos:start="156:90" pos:end="156:91">cb</name></expr></argument>, <argument pos:start="156:94" pos:end="156:97"><expr pos:start="156:94" pos:end="156:97"><name pos:start="156:94" pos:end="156:97">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="157:9" pos:end="157:52"><expr pos:start="157:9" pos:end="157:51"><name pos:start="157:9" pos:end="157:16">key_data</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <operator pos:start="157:20" pos:end="157:20">(</operator><name pos:start="157:21" pos:end="157:24">char</name> <operator pos:start="157:26" pos:end="157:26">*</operator><operator pos:start="157:27" pos:end="157:27">)</operator><call pos:start="157:28" pos:end="157:51"><name pos:start="157:28" pos:end="157:40">BIO_copy_data</name><argument_list pos:start="157:41" pos:end="157:51">(<argument pos:start="157:42" pos:end="157:44"><expr pos:start="157:42" pos:end="157:44"><name pos:start="157:42" pos:end="157:44">out</name></expr></argument>, <argument pos:start="157:47" pos:end="157:50"><expr pos:start="157:47" pos:end="157:50"><name pos:start="157:47" pos:end="157:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="158:9" pos:end="158:22"><expr pos:start="158:9" pos:end="158:21"><call pos:start="158:9" pos:end="158:21"><name pos:start="158:9" pos:end="158:16">BIO_free</name><argument_list pos:start="158:17" pos:end="158:21">(<argument pos:start="158:18" pos:end="158:20"><expr pos:start="158:18" pos:end="158:20"><name pos:start="158:18" pos:end="158:20">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:76">(<expr pos:start="159:13" pos:end="159:75"><name pos:start="159:13" pos:end="159:20">key_data</name> <operator pos:start="159:22" pos:end="159:23">&amp;&amp;</operator> <operator pos:start="159:25" pos:end="159:25">!</operator><call pos:start="159:26" pos:end="159:75"><name pos:start="159:26" pos:end="159:31">strstr</name><argument_list pos:start="159:32" pos:end="159:75">(<argument pos:start="159:33" pos:end="159:40"><expr pos:start="159:33" pos:end="159:40"><name pos:start="159:33" pos:end="159:40">key_data</name></expr></argument>, <argument pos:start="159:43" pos:end="159:74"><expr pos:start="159:43" pos:end="159:74"><literal type="string" pos:start="159:43" pos:end="159:74">"-----BEGIN EC PRIVATE KEY-----"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:78" pos:end="163:9">{<block_content pos:start="161:13" pos:end="162:28">
            <comment type="line" pos:start="160:13" pos:end="160:100">// happens if passphrase entered via STDIN does not verify or has less than 4 characters</comment>
            <expr_stmt pos:start="161:13" pos:end="161:27"><expr pos:start="161:13" pos:end="161:26"><call pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:16">free</name><argument_list pos:start="161:17" pos:end="161:26">(<argument pos:start="161:18" pos:end="161:25"><expr pos:start="161:18" pos:end="161:25"><name pos:start="161:18" pos:end="161:25">key_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="162:13" pos:end="162:28"><expr pos:start="162:13" pos:end="162:27"><name pos:start="162:13" pos:end="162:20">key_data</name> <operator pos:start="162:22" pos:end="162:22">=</operator> <name pos:start="162:24" pos:end="162:27">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition pos:start="164:13" pos:end="164:29">(<expr pos:start="164:14" pos:end="164:28"><name pos:start="164:14" pos:end="164:15">cb</name> <operator pos:start="164:17" pos:end="164:18">&amp;&amp;</operator> <operator pos:start="164:20" pos:end="164:20">!</operator><name pos:start="164:21" pos:end="164:28">key_data</name></expr>)</condition>;</do>

    <expr_stmt pos:start="166:5" pos:end="166:23"><expr pos:start="166:5" pos:end="166:22"><call pos:start="166:5" pos:end="166:22"><name pos:start="166:5" pos:end="166:15">EC_KEY_free</name><argument_list pos:start="166:16" pos:end="166:22">(<argument pos:start="166:17" pos:end="166:21"><expr pos:start="166:17" pos:end="166:21"><name pos:start="166:17" pos:end="166:21">eckey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="167:5" pos:end="167:22">return <expr pos:start="167:12" pos:end="167:21"><operator pos:start="167:12" pos:end="167:12">(</operator><name pos:start="167:13" pos:end="167:20">key_data</name><operator pos:start="167:21" pos:end="167:21">)</operator></expr>;</return>
</block_content>}</block></function>

<function pos:start="170:1" pos:end="177:1"><type pos:start="170:1" pos:end="170:10"><specifier pos:start="170:1" pos:end="170:6">static</specifier> <name pos:start="170:8" pos:end="170:10">int</name></type> <name pos:start="170:12" pos:end="170:29">string_password_cb</name> <parameter_list pos:start="170:31" pos:end="170:74">(<parameter pos:start="170:32" pos:end="170:40"><decl pos:start="170:32" pos:end="170:40"><type pos:start="170:32" pos:end="170:40"><name pos:start="170:32" pos:end="170:35">char</name> <modifier pos:start="170:37" pos:end="170:37">*</modifier></type><name pos:start="170:38" pos:end="170:40">buf</name></decl></parameter>, <parameter pos:start="170:43" pos:end="170:50"><decl pos:start="170:43" pos:end="170:50"><type pos:start="170:43" pos:end="170:50"><name pos:start="170:43" pos:end="170:45">int</name></type> <name pos:start="170:47" pos:end="170:50">size</name></decl></parameter>, <parameter pos:start="170:53" pos:end="170:61"><decl pos:start="170:53" pos:end="170:61"><type pos:start="170:53" pos:end="170:61"><name pos:start="170:53" pos:end="170:55">int</name></type> <name pos:start="170:57" pos:end="170:61">wflag</name></decl></parameter>, <parameter pos:start="170:64" pos:end="170:73"><decl pos:start="170:64" pos:end="170:73"><type pos:start="170:64" pos:end="170:73"><name pos:start="170:64" pos:end="170:67">void</name> <modifier pos:start="170:69" pos:end="170:69">*</modifier></type><name pos:start="170:70" pos:end="170:73">data</name></decl></parameter>)</parameter_list>
<block pos:start="171:1" pos:end="177:1">{<block_content pos:start="175:5" pos:end="176:31">
    <comment type="block" pos:start="172:5" pos:end="174:7">/*
     * Hard code a password for this suite
     */</comment>
    <expr_stmt pos:start="175:5" pos:end="175:37"><expr pos:start="175:5" pos:end="175:36"><call pos:start="175:5" pos:end="175:36"><name pos:start="175:5" pos:end="175:11">strncpy</name><argument_list pos:start="175:12" pos:end="175:36">(<argument pos:start="175:13" pos:end="175:15"><expr pos:start="175:13" pos:end="175:15"><name pos:start="175:13" pos:end="175:15">buf</name></expr></argument>, <argument pos:start="175:18" pos:end="175:29"><expr pos:start="175:18" pos:end="175:29"><name pos:start="175:18" pos:end="175:29">key_password</name></expr></argument>, <argument pos:start="175:32" pos:end="175:35"><expr pos:start="175:32" pos:end="175:35"><name pos:start="175:32" pos:end="175:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="176:5" pos:end="176:31">return<expr pos:start="176:11" pos:end="176:30"><operator pos:start="176:11" pos:end="176:11">(</operator><call pos:start="176:12" pos:end="176:29"><name pos:start="176:12" pos:end="176:18">strnlen</name><argument_list pos:start="176:19" pos:end="176:29">(<argument pos:start="176:20" pos:end="176:22"><expr pos:start="176:20" pos:end="176:22"><name pos:start="176:20" pos:end="176:22">buf</name></expr></argument>, <argument pos:start="176:25" pos:end="176:28"><expr pos:start="176:25" pos:end="176:28"><name pos:start="176:25" pos:end="176:28">size</name></expr></argument>)</argument_list></call><operator pos:start="176:30" pos:end="176:30">)</operator></expr>;</return>
</block_content>}</block></function>


<function pos:start="180:1" pos:end="182:1"><type pos:start="180:1" pos:end="180:11"><specifier pos:start="180:1" pos:end="180:6">static</specifier> <name pos:start="180:8" pos:end="180:11">void</name></type> <name pos:start="180:13" pos:end="180:24">us3612_clean</name> <parameter_list pos:start="180:26" pos:end="180:31">(<parameter pos:start="180:27" pos:end="180:30"><decl pos:start="180:27" pos:end="180:30"><type pos:start="180:27" pos:end="180:30"><name pos:start="180:27" pos:end="180:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="181:1" pos:end="182:1">{<block_content>
</block_content>}</block></function>

<function pos:start="184:1" pos:end="199:1"><type pos:start="184:1" pos:end="184:10"><specifier pos:start="184:1" pos:end="184:6">static</specifier> <name pos:start="184:8" pos:end="184:10">int</name></type> <name pos:start="184:12" pos:end="184:30">us3612_start_server</name> <parameter_list pos:start="184:32" pos:end="184:59">(<parameter pos:start="184:33" pos:end="184:49"><decl pos:start="184:33" pos:end="184:49"><type pos:start="184:33" pos:end="184:49"><name pos:start="184:33" pos:end="184:35">int</name></type> <name pos:start="184:37" pos:end="184:49">manual_enroll</name></decl></parameter>, <parameter pos:start="184:52" pos:end="184:58"><decl pos:start="184:52" pos:end="184:58"><type pos:start="184:52" pos:end="184:58"><name pos:start="184:52" pos:end="184:54">int</name></type> <name pos:start="184:56" pos:end="184:58">nid</name></decl></parameter>)</parameter_list>
<block pos:start="185:1" pos:end="199:1">{<block_content pos:start="186:5" pos:end="198:14">
    <decl_stmt pos:start="186:5" pos:end="186:11"><decl pos:start="186:5" pos:end="186:10"><type pos:start="186:5" pos:end="186:7"><name pos:start="186:5" pos:end="186:7">int</name></type> <name pos:start="186:9" pos:end="186:10">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="188:5" pos:end="197:15"><expr pos:start="188:5" pos:end="197:14"><name pos:start="188:5" pos:end="188:6">rv</name> <operator pos:start="188:8" pos:end="188:8">=</operator> <call pos:start="188:10" pos:end="197:14"><name pos:start="188:10" pos:end="188:17">st_start</name><argument_list pos:start="188:18" pos:end="197:14">(<argument pos:start="188:19" pos:end="188:36"><expr pos:start="188:19" pos:end="188:36"><name pos:start="188:19" pos:end="188:36">US3612_SERVER_PORT</name></expr></argument>,
              <argument pos:start="189:15" pos:end="189:35"><expr pos:start="189:15" pos:end="189:35"><name pos:start="189:15" pos:end="189:35">US3612_SERVER_CERTKEY</name></expr></argument>,
              <argument pos:start="190:15" pos:end="190:35"><expr pos:start="190:15" pos:end="190:35"><name pos:start="190:15" pos:end="190:35">US3612_SERVER_CERTKEY</name></expr></argument>,
              <argument pos:start="191:15" pos:end="191:33"><expr pos:start="191:15" pos:end="191:33"><literal type="string" pos:start="191:15" pos:end="191:33">"US3612 test realm"</literal></expr></argument>,
              <argument pos:start="192:15" pos:end="192:28"><expr pos:start="192:15" pos:end="192:28"><name pos:start="192:15" pos:end="192:28">US3612_CACERTS</name></expr></argument>,
              <argument pos:start="193:15" pos:end="193:32"><expr pos:start="193:15" pos:end="193:32"><name pos:start="193:15" pos:end="193:32">US3612_TRUST_CERTS</name></expr></argument>,
              <argument pos:start="194:15" pos:end="194:35"><expr pos:start="194:15" pos:end="194:35"><literal type="string" pos:start="194:15" pos:end="194:35">"CA/estExampleCA.cnf"</literal></expr></argument>,
          <argument pos:start="195:11" pos:end="195:23"><expr pos:start="195:11" pos:end="195:23"><name pos:start="195:11" pos:end="195:23">manual_enroll</name></expr></argument>,
          <argument pos:start="196:11" pos:end="196:11"><expr pos:start="196:11" pos:end="196:11"><literal type="number" pos:start="196:11" pos:end="196:11">0</literal></expr></argument>,
          <argument pos:start="197:11" pos:end="197:13"><expr pos:start="197:11" pos:end="197:13"><name pos:start="197:11" pos:end="197:13">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="198:5" pos:end="198:14">return <expr pos:start="198:12" pos:end="198:13"><name pos:start="198:12" pos:end="198:13">rv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="201:1" pos:end="205:3">/*
 * This routine is called when CUnit initializes this test
 * suite.  This can be used to allocate data or open any
 * resources required for all the test cases.
 */</comment>
<function pos:start="206:1" pos:end="232:1"><type pos:start="206:1" pos:end="206:10"><specifier pos:start="206:1" pos:end="206:6">static</specifier> <name pos:start="206:8" pos:end="206:10">int</name></type> <name pos:start="206:12" pos:end="206:28">us3612_init_suite</name> <parameter_list pos:start="206:30" pos:end="206:35">(<parameter pos:start="206:31" pos:end="206:34"><decl pos:start="206:31" pos:end="206:34"><type pos:start="206:31" pos:end="206:34"><name pos:start="206:31" pos:end="206:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="207:1" pos:end="232:1">{<block_content pos:start="208:5" pos:end="231:14">
    <decl_stmt pos:start="208:5" pos:end="211:0"><decl pos:start="208:5" pos:end="208:10"><type pos:start="208:5" pos:end="208:7"><name pos:start="208:5" pos:end="208:7">int</name></type> <name pos:start="208:9" pos:end="208:10">rv</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="210:1" pos:end="210:12">#<cpp:directive pos:start="210:2" pos:end="210:6">ifdef</cpp:directive> <name pos:start="210:8" pos:end="210:12">WIN32</name></cpp:ifdef>
    <expr_stmt pos:start="211:5" pos:end="211:57"><expr pos:start="211:5" pos:end="211:56"><call pos:start="211:5" pos:end="211:56"><name pos:start="211:5" pos:end="211:29">InitializeCriticalSection</name> <argument_list pos:start="211:31" pos:end="211:56">(<argument pos:start="211:32" pos:end="211:55"><expr pos:start="211:32" pos:end="211:55"><operator pos:start="211:32" pos:end="211:32">&amp;</operator><name pos:start="211:33" pos:end="211:55">logger_critical_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="212:5" pos:end="214:0"><expr pos:start="212:5" pos:end="212:60"><call pos:start="212:5" pos:end="212:60"><name pos:start="212:5" pos:end="212:19">est_init_logger</name><argument_list pos:start="212:20" pos:end="212:60">(<argument pos:start="212:21" pos:end="212:36"><expr pos:start="212:21" pos:end="212:36"><name pos:start="212:21" pos:end="212:36">EST_LOG_LVL_INFO</name></expr></argument>, <argument pos:start="212:39" pos:end="212:59"><expr pos:start="212:39" pos:end="212:59"><operator pos:start="212:39" pos:end="212:39">&amp;</operator><name pos:start="212:40" pos:end="212:59">us3612_logger_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="215:5" pos:end="217:7">/*
     * Read in the CA certificates
     */</comment>
    <expr_stmt pos:start="218:5" pos:end="218:61"><expr pos:start="218:5" pos:end="218:60"><name pos:start="218:5" pos:end="218:15">cacerts_len</name> <operator pos:start="218:17" pos:end="218:17">=</operator> <call pos:start="218:19" pos:end="218:60"><name pos:start="218:19" pos:end="218:34">read_binary_file</name><argument_list pos:start="218:35" pos:end="218:60">(<argument pos:start="218:36" pos:end="218:49"><expr pos:start="218:36" pos:end="218:49"><name pos:start="218:36" pos:end="218:49">US3612_CACERTS</name></expr></argument>, <argument pos:start="218:52" pos:end="218:59"><expr pos:start="218:52" pos:end="218:59"><operator pos:start="218:52" pos:end="218:52">&amp;</operator><name pos:start="218:53" pos:end="218:59">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="219:5" pos:end="221:5"><if pos:start="219:5" pos:end="221:5">if <condition pos:start="219:8" pos:end="219:25">(<expr pos:start="219:9" pos:end="219:24"><name pos:start="219:9" pos:end="219:19">cacerts_len</name> <operator pos:start="219:21" pos:end="219:22">&lt;=</operator> <literal type="number" pos:start="219:24" pos:end="219:24">0</literal></expr>)</condition> <block pos:start="219:27" pos:end="221:5">{<block_content pos:start="220:5" pos:end="220:13">
    <return pos:start="220:5" pos:end="220:13">return <expr pos:start="220:12" pos:end="220:12"><literal type="number" pos:start="220:12" pos:end="220:12">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:19"><expr pos:start="223:5" pos:end="223:18"><call pos:start="223:5" pos:end="223:18"><name pos:start="223:5" pos:end="223:16">us3612_clean</name><argument_list pos:start="223:17" pos:end="223:18">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="225:5" pos:end="228:7">/*
     * Start an instance of the EST server with
     * automatic enrollment enabled.
     */</comment>
    <expr_stmt pos:start="229:5" pos:end="229:35"><expr pos:start="229:5" pos:end="229:34"><name pos:start="229:5" pos:end="229:6">rv</name> <operator pos:start="229:8" pos:end="229:8">=</operator> <call pos:start="229:10" pos:end="229:34"><name pos:start="229:10" pos:end="229:28">us3612_start_server</name><argument_list pos:start="229:29" pos:end="229:34">(<argument pos:start="229:30" pos:end="229:30"><expr pos:start="229:30" pos:end="229:30"><literal type="number" pos:start="229:30" pos:end="229:30">0</literal></expr></argument>, <argument pos:start="229:33" pos:end="229:33"><expr pos:start="229:33" pos:end="229:33"><literal type="number" pos:start="229:33" pos:end="229:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="231:5" pos:end="231:14">return <expr pos:start="231:12" pos:end="231:13"><name pos:start="231:12" pos:end="231:13">rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="235:1" pos:end="239:3">/*
 * This routine is called when CUnit uninitializes this test
 * suite.  This can be used to deallocate data or close any
 * resources that were used for the test cases.
 */</comment>
<function pos:start="240:1" pos:end="245:1"><type pos:start="240:1" pos:end="240:10"><specifier pos:start="240:1" pos:end="240:6">static</specifier> <name pos:start="240:8" pos:end="240:10">int</name></type> <name pos:start="240:12" pos:end="240:31">us3612_destroy_suite</name> <parameter_list pos:start="240:33" pos:end="240:38">(<parameter pos:start="240:34" pos:end="240:37"><decl pos:start="240:34" pos:end="240:37"><type pos:start="240:34" pos:end="240:37"><name pos:start="240:34" pos:end="240:37">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="241:1" pos:end="245:1">{<block_content pos:start="242:5" pos:end="244:13">
    <expr_stmt pos:start="242:5" pos:end="242:14"><expr pos:start="242:5" pos:end="242:13"><call pos:start="242:5" pos:end="242:13"><name pos:start="242:5" pos:end="242:11">st_stop</name><argument_list pos:start="242:12" pos:end="242:13">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="243:5" pos:end="243:18"><expr pos:start="243:5" pos:end="243:17"><call pos:start="243:5" pos:end="243:17"><name pos:start="243:5" pos:end="243:8">free</name><argument_list pos:start="243:9" pos:end="243:17">(<argument pos:start="243:10" pos:end="243:16"><expr pos:start="243:10" pos:end="243:16"><name pos:start="243:10" pos:end="243:16">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="244:5" pos:end="244:13">return <expr pos:start="244:12" pos:end="244:12"><literal type="number" pos:start="244:12" pos:end="244:12">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" pos:start="248:1" pos:end="250:3">/*
 * Callback function passed to est_client_init()
 */</comment>
<function pos:start="251:1" pos:end="280:1"><type pos:start="251:1" pos:end="251:10"><specifier pos:start="251:1" pos:end="251:6">static</specifier> <name pos:start="251:8" pos:end="251:10">int</name></type> <name pos:start="251:12" pos:end="251:36">client_manual_cert_verify</name><parameter_list pos:start="251:37" pos:end="251:76">(<parameter pos:start="251:38" pos:end="251:51"><decl pos:start="251:38" pos:end="251:51"><type pos:start="251:38" pos:end="251:51"><name pos:start="251:38" pos:end="251:41">X509</name> <modifier pos:start="251:43" pos:end="251:43">*</modifier></type><name pos:start="251:44" pos:end="251:51">cur_cert</name></decl></parameter>, <parameter pos:start="251:54" pos:end="251:75"><decl pos:start="251:54" pos:end="251:75"><type pos:start="251:54" pos:end="251:75"><name pos:start="251:54" pos:end="251:56">int</name></type> <name pos:start="251:58" pos:end="251:75">openssl_cert_error</name></decl></parameter>)</parameter_list>
<block pos:start="252:1" pos:end="280:1">{<block_content pos:start="253:5" pos:end="279:19">
    <decl_stmt pos:start="253:5" pos:end="253:17"><decl pos:start="253:5" pos:end="253:16"><type pos:start="253:5" pos:end="253:9"><name pos:start="253:5" pos:end="253:7">BIO</name> <modifier pos:start="253:9" pos:end="253:9">*</modifier></type><name pos:start="253:10" pos:end="253:16">bio_err</name></decl>;</decl_stmt>
    <expr_stmt pos:start="254:5" pos:end="254:43"><expr pos:start="254:5" pos:end="254:42"><name pos:start="254:5" pos:end="254:11">bio_err</name><operator pos:start="254:12" pos:end="254:12">=</operator><call pos:start="254:13" pos:end="254:42"><name pos:start="254:13" pos:end="254:22">BIO_new_fp</name><argument_list pos:start="254:23" pos:end="254:42">(<argument pos:start="254:24" pos:end="254:29"><expr pos:start="254:24" pos:end="254:29"><name pos:start="254:24" pos:end="254:29">stderr</name></expr></argument>,<argument pos:start="254:31" pos:end="254:41"><expr pos:start="254:31" pos:end="254:41"><name pos:start="254:31" pos:end="254:41">BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="255:5" pos:end="255:20"><decl pos:start="255:5" pos:end="255:19"><type pos:start="255:5" pos:end="255:7"><name pos:start="255:5" pos:end="255:7">int</name></type> <name pos:start="255:9" pos:end="255:15">approve</name> <init pos:start="255:17" pos:end="255:19">= <expr pos:start="255:19" pos:end="255:19"><literal type="number" pos:start="255:19" pos:end="255:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="257:5" pos:end="259:7">/*
     * Print out the specifics of this cert
     */</comment>
    <expr_stmt pos:start="260:5" pos:end="262:62"><expr pos:start="260:5" pos:end="262:61"><call pos:start="260:5" pos:end="262:61"><name pos:start="260:5" pos:end="260:10">printf</name><argument_list pos:start="260:11" pos:end="262:61">(<argument pos:start="260:12" pos:end="260:117"><expr pos:start="260:12" pos:end="260:117"><literal type="string" pos:start="260:12" pos:end="260:117">"%s: OpenSSL/EST server cert verification failed with the following error: openssl_cert_error = %d (%s)\n"</literal></expr></argument>,
           <argument pos:start="261:12" pos:end="261:23"><expr pos:start="261:12" pos:end="261:23"><name pos:start="261:12" pos:end="261:23">__FUNCTION__</name></expr></argument>, <argument pos:start="261:26" pos:end="261:43"><expr pos:start="261:26" pos:end="261:43"><name pos:start="261:26" pos:end="261:43">openssl_cert_error</name></expr></argument>,
           <argument pos:start="262:12" pos:end="262:60"><expr pos:start="262:12" pos:end="262:60"><call pos:start="262:12" pos:end="262:60"><name pos:start="262:12" pos:end="262:40">X509_verify_cert_error_string</name><argument_list pos:start="262:41" pos:end="262:60">(<argument pos:start="262:42" pos:end="262:59"><expr pos:start="262:42" pos:end="262:59"><name pos:start="262:42" pos:end="262:59">openssl_cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="264:5" pos:end="264:30"><expr pos:start="264:5" pos:end="264:29"><call pos:start="264:5" pos:end="264:29"><name pos:start="264:5" pos:end="264:10">printf</name><argument_list pos:start="264:11" pos:end="264:29">(<argument pos:start="264:12" pos:end="264:28"><expr pos:start="264:12" pos:end="264:28"><literal type="string" pos:start="264:12" pos:end="264:28">"Failing Cert:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="265:5" pos:end="265:35"><expr pos:start="265:5" pos:end="265:34"><call pos:start="265:5" pos:end="265:34"><name pos:start="265:5" pos:end="265:17">X509_print_fp</name><argument_list pos:start="265:18" pos:end="265:34">(<argument pos:start="265:19" pos:end="265:24"><expr pos:start="265:19" pos:end="265:24"><name pos:start="265:19" pos:end="265:24">stdout</name></expr></argument>,<argument pos:start="265:26" pos:end="265:33"><expr pos:start="265:26" pos:end="265:33"><name pos:start="265:26" pos:end="265:33">cur_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="266:5" pos:end="270:7">/*
     * Next call prints out the signature which can be used as the fingerprint
     * This fingerprint can be checked against the anticipated value to determine
     * whether or not the server's cert should be approved.
     */</comment>
    <expr_stmt pos:start="271:5" pos:end="271:74"><expr pos:start="271:5" pos:end="271:73"><call pos:start="271:5" pos:end="271:73"><name pos:start="271:5" pos:end="271:24">X509_signature_print</name><argument_list pos:start="271:25" pos:end="271:73">(<argument pos:start="271:26" pos:end="271:32"><expr pos:start="271:26" pos:end="271:32"><name pos:start="271:26" pos:end="271:32">bio_err</name></expr></argument>, <argument pos:start="271:35" pos:end="271:51"><expr pos:start="271:35" pos:end="271:51"><name pos:start="271:35" pos:end="271:51"><name pos:start="271:35" pos:end="271:42">cur_cert</name><operator pos:start="271:43" pos:end="271:44">-&gt;</operator><name pos:start="271:45" pos:end="271:51">sig_alg</name></name></expr></argument>, <argument pos:start="271:54" pos:end="271:72"><expr pos:start="271:54" pos:end="271:72"><name pos:start="271:54" pos:end="271:72"><name pos:start="271:54" pos:end="271:61">cur_cert</name><operator pos:start="271:62" pos:end="271:63">-&gt;</operator><name pos:start="271:64" pos:end="271:72">signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="273:5" pos:end="275:5"><if pos:start="273:5" pos:end="275:5">if <condition pos:start="273:8" pos:end="273:59">(<expr pos:start="273:9" pos:end="273:58"><name pos:start="273:9" pos:end="273:26">openssl_cert_error</name> <operator pos:start="273:28" pos:end="273:29">==</operator> <name pos:start="273:31" pos:end="273:58">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>)</condition> <block pos:start="273:61" pos:end="275:5">{<block_content pos:start="274:9" pos:end="274:20">
        <expr_stmt pos:start="274:9" pos:end="274:20"><expr pos:start="274:9" pos:end="274:19"><name pos:start="274:9" pos:end="274:15">approve</name> <operator pos:start="274:17" pos:end="274:17">=</operator> <literal type="number" pos:start="274:19" pos:end="274:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:22"><expr pos:start="277:5" pos:end="277:21"><call pos:start="277:5" pos:end="277:21"><name pos:start="277:5" pos:end="277:12">BIO_free</name><argument_list pos:start="277:13" pos:end="277:21">(<argument pos:start="277:14" pos:end="277:20"><expr pos:start="277:14" pos:end="277:20"><name pos:start="277:14" pos:end="277:20">bio_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="279:5" pos:end="279:19">return <expr pos:start="279:12" pos:end="279:18"><name pos:start="279:12" pos:end="279:18">approve</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" pos:start="282:1" pos:end="286:3">/*
 * Simple Enroll b- client
 * Load in a password prortected private key with
 * the correct passphrase and attempt to enroll for a certificate
 */</comment>
<function pos:start="287:1" pos:end="357:1"><type pos:start="287:1" pos:end="287:11"><specifier pos:start="287:1" pos:end="287:6">static</specifier> <name pos:start="287:8" pos:end="287:11">void</name></type> <name pos:start="287:13" pos:end="287:24">us3612_test1</name> <parameter_list pos:start="287:26" pos:end="287:31">(<parameter pos:start="287:27" pos:end="287:30"><decl pos:start="287:27" pos:end="287:30"><type pos:start="287:27" pos:end="287:30"><name pos:start="287:27" pos:end="287:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="288:1" pos:end="357:1">{<block_content pos:start="289:5" pos:end="356:22">
    <decl_stmt pos:start="289:5" pos:end="289:18"><decl pos:start="289:5" pos:end="289:17"><type pos:start="289:5" pos:end="289:13"><name pos:start="289:5" pos:end="289:11">EST_CTX</name> <modifier pos:start="289:13" pos:end="289:13">*</modifier></type><name pos:start="289:14" pos:end="289:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="290:5" pos:end="290:18"><decl pos:start="290:5" pos:end="290:17"><type pos:start="290:5" pos:end="290:14"><name pos:start="290:5" pos:end="290:12">EVP_PKEY</name> <modifier pos:start="290:14" pos:end="290:14">*</modifier></type><name pos:start="290:15" pos:end="290:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="291:5" pos:end="291:11"><decl pos:start="291:5" pos:end="291:10"><type pos:start="291:5" pos:end="291:7"><name pos:start="291:5" pos:end="291:7">int</name></type> <name pos:start="291:9" pos:end="291:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="292:5" pos:end="292:22"><decl pos:start="292:5" pos:end="292:21"><type pos:start="292:5" pos:end="292:7"><name pos:start="292:5" pos:end="292:7">int</name></type> <name pos:start="292:9" pos:end="292:17">pkcs7_len</name> <init pos:start="292:19" pos:end="292:21">= <expr pos:start="292:21" pos:end="292:21"><literal type="number" pos:start="292:21" pos:end="292:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="293:5" pos:end="293:35"><decl pos:start="293:5" pos:end="293:34"><type pos:start="293:5" pos:end="293:19"><name pos:start="293:5" pos:end="293:12">unsigned</name> <name pos:start="293:14" pos:end="293:17">char</name> <modifier pos:start="293:19" pos:end="293:19">*</modifier></type><name pos:start="293:20" pos:end="293:27">new_cert</name> <init pos:start="293:29" pos:end="293:34">= <expr pos:start="293:31" pos:end="293:34"><name pos:start="293:31" pos:end="293:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="294:5" pos:end="294:36"><decl pos:start="294:5" pos:end="294:35"><type pos:start="294:5" pos:end="294:19"><name pos:start="294:5" pos:end="294:12">unsigned</name> <name pos:start="294:14" pos:end="294:17">char</name> <modifier pos:start="294:19" pos:end="294:19">*</modifier></type><name pos:start="294:20" pos:end="294:28">attr_data</name> <init pos:start="294:30" pos:end="294:35">= <expr pos:start="294:32" pos:end="294:35"><name pos:start="294:32" pos:end="294:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="295:5" pos:end="295:17"><decl pos:start="295:5" pos:end="295:16"><type pos:start="295:5" pos:end="295:7"><name pos:start="295:5" pos:end="295:7">int</name></type> <name pos:start="295:9" pos:end="295:16">attr_len</name></decl>;</decl_stmt>

    <comment type="block" pos:start="297:5" pos:end="299:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="300:5" pos:end="302:54"><expr pos:start="300:5" pos:end="302:53"><name pos:start="300:5" pos:end="300:8">ectx</name> <operator pos:start="300:10" pos:end="300:10">=</operator> <call pos:start="300:12" pos:end="302:53"><name pos:start="300:12" pos:end="300:26">est_client_init</name><argument_list pos:start="300:27" pos:end="302:53">(<argument pos:start="300:28" pos:end="300:34"><expr pos:start="300:28" pos:end="300:34"><name pos:start="300:28" pos:end="300:34">cacerts</name></expr></argument>, <argument pos:start="300:37" pos:end="300:47"><expr pos:start="300:37" pos:end="300:47"><name pos:start="300:37" pos:end="300:47">cacerts_len</name></expr></argument>,
                           <argument pos:start="301:28" pos:end="301:46"><expr pos:start="301:28" pos:end="301:46"><name pos:start="301:28" pos:end="301:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="302:28" pos:end="302:52"><expr pos:start="302:28" pos:end="302:52"><name pos:start="302:28" pos:end="302:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="303:5" pos:end="303:28"><expr pos:start="303:5" pos:end="303:27"><call pos:start="303:5" pos:end="303:27"><name pos:start="303:5" pos:end="303:13">CU_ASSERT</name><argument_list pos:start="303:14" pos:end="303:27">(<argument pos:start="303:15" pos:end="303:26"><expr pos:start="303:15" pos:end="303:26"><name pos:start="303:15" pos:end="303:18">ectx</name> <operator pos:start="303:20" pos:end="303:21">!=</operator> <name pos:start="303:23" pos:end="303:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="305:5" pos:end="307:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="308:5" pos:end="308:71"><expr pos:start="308:5" pos:end="308:70"><name pos:start="308:5" pos:end="308:6">rv</name> <operator pos:start="308:8" pos:end="308:8">=</operator> <call pos:start="308:10" pos:end="308:70"><name pos:start="308:10" pos:end="308:28">est_client_set_auth</name><argument_list pos:start="308:29" pos:end="308:70">(<argument pos:start="308:30" pos:end="308:33"><expr pos:start="308:30" pos:end="308:33"><name pos:start="308:30" pos:end="308:33">ectx</name></expr></argument>, <argument pos:start="308:36" pos:end="308:45"><expr pos:start="308:36" pos:end="308:45"><name pos:start="308:36" pos:end="308:45">US3612_UID</name></expr></argument>, <argument pos:start="308:48" pos:end="308:57"><expr pos:start="308:48" pos:end="308:57"><name pos:start="308:48" pos:end="308:57">US3612_PWD</name></expr></argument>, <argument pos:start="308:60" pos:end="308:63"><expr pos:start="308:60" pos:end="308:63"><name pos:start="308:60" pos:end="308:63">NULL</name></expr></argument>, <argument pos:start="308:66" pos:end="308:69"><expr pos:start="308:66" pos:end="308:69"><name pos:start="308:66" pos:end="308:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="309:5" pos:end="309:34"><expr pos:start="309:5" pos:end="309:33"><call pos:start="309:5" pos:end="309:33"><name pos:start="309:5" pos:end="309:13">CU_ASSERT</name><argument_list pos:start="309:14" pos:end="309:33">(<argument pos:start="309:15" pos:end="309:32"><expr pos:start="309:15" pos:end="309:32"><name pos:start="309:15" pos:end="309:16">rv</name> <operator pos:start="309:18" pos:end="309:19">==</operator> <name pos:start="309:21" pos:end="309:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="311:5" pos:end="313:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="314:5" pos:end="314:76"><expr pos:start="314:5" pos:end="314:75"><call pos:start="314:5" pos:end="314:75"><name pos:start="314:5" pos:end="314:25">est_client_set_server</name><argument_list pos:start="314:26" pos:end="314:75">(<argument pos:start="314:27" pos:end="314:30"><expr pos:start="314:27" pos:end="314:30"><name pos:start="314:27" pos:end="314:30">ectx</name></expr></argument>, <argument pos:start="314:33" pos:end="314:48"><expr pos:start="314:33" pos:end="314:48"><name pos:start="314:33" pos:end="314:48">US3612_SERVER_IP</name></expr></argument>, <argument pos:start="314:51" pos:end="314:68"><expr pos:start="314:51" pos:end="314:68"><name pos:start="314:51" pos:end="314:68">US3612_SERVER_PORT</name></expr></argument>, <argument pos:start="314:71" pos:end="314:74"><expr pos:start="314:71" pos:end="314:74"><name pos:start="314:71" pos:end="314:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="316:5" pos:end="321:7">/*
     * Read in our test private key
     * generated via the command below:
     *
     * openssl genrsa -aes128 -passout pass:us3612 -out us3612_key.pem 4096
     */</comment>

    <expr_stmt pos:start="323:5" pos:end="323:35"><expr pos:start="323:5" pos:end="323:34"><name pos:start="323:5" pos:end="323:16">key_password</name> <operator pos:start="323:18" pos:end="323:18">=</operator> <name pos:start="323:20" pos:end="323:34">US3612_GOOD_PWD</name></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:82"><expr pos:start="325:5" pos:end="325:81"><name pos:start="325:5" pos:end="325:7">key</name> <operator pos:start="325:9" pos:end="325:9">=</operator> <call pos:start="325:11" pos:end="325:81"><name pos:start="325:11" pos:end="325:36">read_protected_private_key</name><argument_list pos:start="325:37" pos:end="325:81">(<argument pos:start="325:38" pos:end="325:60"><expr pos:start="325:38" pos:end="325:60"><name pos:start="325:38" pos:end="325:60">US3612_PRIVATE_KEY_FILE</name></expr></argument>, <argument pos:start="325:63" pos:end="325:80"><expr pos:start="325:63" pos:end="325:80"><name pos:start="325:63" pos:end="325:80">string_password_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:27"><expr pos:start="327:5" pos:end="327:26"><call pos:start="327:5" pos:end="327:26"><name pos:start="327:5" pos:end="327:13">CU_ASSERT</name><argument_list pos:start="327:14" pos:end="327:26">(<argument pos:start="327:15" pos:end="327:25"><expr pos:start="327:15" pos:end="327:25"><name pos:start="327:15" pos:end="327:17">key</name> <operator pos:start="327:19" pos:end="327:20">!=</operator> <name pos:start="327:22" pos:end="327:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="329:5" pos:end="331:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="332:5" pos:end="332:62"><expr pos:start="332:5" pos:end="332:61"><name pos:start="332:5" pos:end="332:6">rv</name> <operator pos:start="332:8" pos:end="332:8">=</operator> <call pos:start="332:10" pos:end="332:61"><name pos:start="332:10" pos:end="332:32">est_client_get_csrattrs</name><argument_list pos:start="332:33" pos:end="332:61">(<argument pos:start="332:34" pos:end="332:37"><expr pos:start="332:34" pos:end="332:37"><name pos:start="332:34" pos:end="332:37">ectx</name></expr></argument>, <argument pos:start="332:40" pos:end="332:49"><expr pos:start="332:40" pos:end="332:49"><operator pos:start="332:40" pos:end="332:40">&amp;</operator><name pos:start="332:41" pos:end="332:49">attr_data</name></expr></argument>, <argument pos:start="332:52" pos:end="332:60"><expr pos:start="332:52" pos:end="332:60"><operator pos:start="332:52" pos:end="332:52">&amp;</operator><name pos:start="332:53" pos:end="332:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="333:5" pos:end="333:34"><expr pos:start="333:5" pos:end="333:33"><call pos:start="333:5" pos:end="333:33"><name pos:start="333:5" pos:end="333:13">CU_ASSERT</name><argument_list pos:start="333:14" pos:end="333:33">(<argument pos:start="333:15" pos:end="333:32"><expr pos:start="333:15" pos:end="333:32"><name pos:start="333:15" pos:end="333:16">rv</name> <operator pos:start="333:18" pos:end="333:19">==</operator> <name pos:start="333:21" pos:end="333:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="335:5" pos:end="337:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="338:5" pos:end="338:64"><expr pos:start="338:5" pos:end="338:63"><name pos:start="338:5" pos:end="338:6">rv</name> <operator pos:start="338:8" pos:end="338:8">=</operator> <call pos:start="338:10" pos:end="338:63"><name pos:start="338:10" pos:end="338:26">est_client_enroll</name><argument_list pos:start="338:27" pos:end="338:63">(<argument pos:start="338:28" pos:end="338:31"><expr pos:start="338:28" pos:end="338:31"><name pos:start="338:28" pos:end="338:31">ectx</name></expr></argument>, <argument pos:start="338:34" pos:end="338:45"><expr pos:start="338:34" pos:end="338:45"><literal type="string" pos:start="338:34" pos:end="338:45">"TCUS3612-1"</literal></expr></argument>, <argument pos:start="338:48" pos:end="338:57"><expr pos:start="338:48" pos:end="338:57"><operator pos:start="338:48" pos:end="338:48">&amp;</operator><name pos:start="338:49" pos:end="338:57">pkcs7_len</name></expr></argument>, <argument pos:start="338:60" pos:end="338:62"><expr pos:start="338:60" pos:end="338:62"><name pos:start="338:60" pos:end="338:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="339:5" pos:end="339:34"><expr pos:start="339:5" pos:end="339:33"><call pos:start="339:5" pos:end="339:33"><name pos:start="339:5" pos:end="339:13">CU_ASSERT</name><argument_list pos:start="339:14" pos:end="339:33">(<argument pos:start="339:15" pos:end="339:32"><expr pos:start="339:15" pos:end="339:32"><name pos:start="339:15" pos:end="339:16">rv</name> <operator pos:start="339:18" pos:end="339:19">==</operator> <name pos:start="339:21" pos:end="339:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="341:5" pos:end="343:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="344:5" pos:end="349:5"><if pos:start="344:5" pos:end="349:5">if <condition pos:start="344:8" pos:end="344:27">(<expr pos:start="344:9" pos:end="344:26"><name pos:start="344:9" pos:end="344:10">rv</name> <operator pos:start="344:12" pos:end="344:13">==</operator> <name pos:start="344:15" pos:end="344:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="344:29" pos:end="349:5">{<block_content pos:start="345:5" pos:end="348:34">
    <expr_stmt pos:start="345:5" pos:end="345:33"><expr pos:start="345:5" pos:end="345:32"><name pos:start="345:5" pos:end="345:12">new_cert</name> <operator pos:start="345:14" pos:end="345:14">=</operator> <call pos:start="345:16" pos:end="345:32"><name pos:start="345:16" pos:end="345:21">malloc</name><argument_list pos:start="345:22" pos:end="345:32">(<argument pos:start="345:23" pos:end="345:31"><expr pos:start="345:23" pos:end="345:31"><name pos:start="345:23" pos:end="345:31">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="346:5" pos:end="346:32"><expr pos:start="346:5" pos:end="346:31"><call pos:start="346:5" pos:end="346:31"><name pos:start="346:5" pos:end="346:13">CU_ASSERT</name><argument_list pos:start="346:14" pos:end="346:31">(<argument pos:start="346:15" pos:end="346:30"><expr pos:start="346:15" pos:end="346:30"><name pos:start="346:15" pos:end="346:22">new_cert</name> <operator pos:start="346:24" pos:end="346:25">!=</operator> <name pos:start="346:27" pos:end="346:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="347:5" pos:end="347:55"><expr pos:start="347:5" pos:end="347:54"><name pos:start="347:5" pos:end="347:6">rv</name> <operator pos:start="347:8" pos:end="347:8">=</operator> <call pos:start="347:10" pos:end="347:54"><name pos:start="347:10" pos:end="347:38">est_client_copy_enrolled_cert</name><argument_list pos:start="347:39" pos:end="347:54">(<argument pos:start="347:40" pos:end="347:43"><expr pos:start="347:40" pos:end="347:43"><name pos:start="347:40" pos:end="347:43">ectx</name></expr></argument>, <argument pos:start="347:46" pos:end="347:53"><expr pos:start="347:46" pos:end="347:53"><name pos:start="347:46" pos:end="347:53">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="348:5" pos:end="348:34"><expr pos:start="348:5" pos:end="348:33"><call pos:start="348:5" pos:end="348:33"><name pos:start="348:5" pos:end="348:13">CU_ASSERT</name><argument_list pos:start="348:14" pos:end="348:33">(<argument pos:start="348:15" pos:end="348:32"><expr pos:start="348:15" pos:end="348:32"><name pos:start="348:15" pos:end="348:16">rv</name> <operator pos:start="348:18" pos:end="348:19">==</operator> <name pos:start="348:21" pos:end="348:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="351:5" pos:end="353:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="354:5" pos:end="354:23"><expr pos:start="354:5" pos:end="354:22"><call pos:start="354:5" pos:end="354:22"><name pos:start="354:5" pos:end="354:17">EVP_PKEY_free</name><argument_list pos:start="354:18" pos:end="354:22">(<argument pos:start="354:19" pos:end="354:21"><expr pos:start="354:19" pos:end="354:21"><name pos:start="354:19" pos:end="354:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="355:5" pos:end="355:33"><if pos:start="355:5" pos:end="355:33">if <condition pos:start="355:8" pos:end="355:17">(<expr pos:start="355:9" pos:end="355:16"><name pos:start="355:9" pos:end="355:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="355:19" pos:end="355:33"><block_content pos:start="355:19" pos:end="355:33"> <expr_stmt pos:start="355:19" pos:end="355:33"><expr pos:start="355:19" pos:end="355:32"><call pos:start="355:19" pos:end="355:32"><name pos:start="355:19" pos:end="355:22">free</name><argument_list pos:start="355:23" pos:end="355:32">(<argument pos:start="355:24" pos:end="355:31"><expr pos:start="355:24" pos:end="355:31"><name pos:start="355:24" pos:end="355:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="356:5" pos:end="356:22"><expr pos:start="356:5" pos:end="356:21"><call pos:start="356:5" pos:end="356:21"><name pos:start="356:5" pos:end="356:15">est_destroy</name><argument_list pos:start="356:16" pos:end="356:21">(<argument pos:start="356:17" pos:end="356:20"><expr pos:start="356:17" pos:end="356:20"><name pos:start="356:17" pos:end="356:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="360:1" pos:end="365:3">/*
 * Simple enroll CSR
 *
 * Load in a password protected private key with the incorrect password
 * and attempt to enroll for a certificate. This will fail.
 */</comment>
<function pos:start="366:1" pos:end="426:1"><type pos:start="366:1" pos:end="366:11"><specifier pos:start="366:1" pos:end="366:6">static</specifier> <name pos:start="366:8" pos:end="366:11">void</name></type> <name pos:start="366:13" pos:end="366:24">us3612_test2</name> <parameter_list pos:start="366:26" pos:end="366:31">(<parameter pos:start="366:27" pos:end="366:30"><decl pos:start="366:27" pos:end="366:30"><type pos:start="366:27" pos:end="366:30"><name pos:start="366:27" pos:end="366:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="367:1" pos:end="426:1">{<block_content pos:start="368:6" pos:end="425:23">
     <decl_stmt pos:start="368:6" pos:end="368:19"><decl pos:start="368:6" pos:end="368:18"><type pos:start="368:6" pos:end="368:14"><name pos:start="368:6" pos:end="368:12">EST_CTX</name> <modifier pos:start="368:14" pos:end="368:14">*</modifier></type><name pos:start="368:15" pos:end="368:18">ectx</name></decl>;</decl_stmt>
     <decl_stmt pos:start="369:6" pos:end="369:19"><decl pos:start="369:6" pos:end="369:18"><type pos:start="369:6" pos:end="369:15"><name pos:start="369:6" pos:end="369:13">EVP_PKEY</name> <modifier pos:start="369:15" pos:end="369:15">*</modifier></type><name pos:start="369:16" pos:end="369:18">key</name></decl>;</decl_stmt>
     <decl_stmt pos:start="370:6" pos:end="370:12"><decl pos:start="370:6" pos:end="370:11"><type pos:start="370:6" pos:end="370:8"><name pos:start="370:6" pos:end="370:8">int</name></type> <name pos:start="370:10" pos:end="370:11">rv</name></decl>;</decl_stmt>
     <decl_stmt pos:start="371:6" pos:end="371:23"><decl pos:start="371:6" pos:end="371:22"><type pos:start="371:6" pos:end="371:8"><name pos:start="371:6" pos:end="371:8">int</name></type> <name pos:start="371:10" pos:end="371:18">pkcs7_len</name> <init pos:start="371:20" pos:end="371:22">= <expr pos:start="371:22" pos:end="371:22"><literal type="number" pos:start="371:22" pos:end="371:22">0</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt pos:start="372:6" pos:end="372:36"><decl pos:start="372:6" pos:end="372:35"><type pos:start="372:6" pos:end="372:20"><name pos:start="372:6" pos:end="372:13">unsigned</name> <name pos:start="372:15" pos:end="372:18">char</name> <modifier pos:start="372:20" pos:end="372:20">*</modifier></type><name pos:start="372:21" pos:end="372:28">new_cert</name> <init pos:start="372:30" pos:end="372:35">= <expr pos:start="372:32" pos:end="372:35"><name pos:start="372:32" pos:end="372:35">NULL</name></expr></init></decl>;</decl_stmt>
     <decl_stmt pos:start="373:6" pos:end="373:37"><decl pos:start="373:6" pos:end="373:36"><type pos:start="373:6" pos:end="373:20"><name pos:start="373:6" pos:end="373:13">unsigned</name> <name pos:start="373:15" pos:end="373:18">char</name> <modifier pos:start="373:20" pos:end="373:20">*</modifier></type><name pos:start="373:21" pos:end="373:29">attr_data</name> <init pos:start="373:31" pos:end="373:36">= <expr pos:start="373:33" pos:end="373:36"><name pos:start="373:33" pos:end="373:36">NULL</name></expr></init></decl>;</decl_stmt>
     <decl_stmt pos:start="374:6" pos:end="374:18"><decl pos:start="374:6" pos:end="374:17"><type pos:start="374:6" pos:end="374:8"><name pos:start="374:6" pos:end="374:8">int</name></type> <name pos:start="374:10" pos:end="374:17">attr_len</name></decl>;</decl_stmt>

     <comment type="block" pos:start="376:6" pos:end="378:8">/*
      * Create a client context
      */</comment>
     <expr_stmt pos:start="379:6" pos:end="381:55"><expr pos:start="379:6" pos:end="381:54"><name pos:start="379:6" pos:end="379:9">ectx</name> <operator pos:start="379:11" pos:end="379:11">=</operator> <call pos:start="379:13" pos:end="381:54"><name pos:start="379:13" pos:end="379:27">est_client_init</name><argument_list pos:start="379:28" pos:end="381:54">(<argument pos:start="379:29" pos:end="379:35"><expr pos:start="379:29" pos:end="379:35"><name pos:start="379:29" pos:end="379:35">cacerts</name></expr></argument>, <argument pos:start="379:38" pos:end="379:48"><expr pos:start="379:38" pos:end="379:48"><name pos:start="379:38" pos:end="379:48">cacerts_len</name></expr></argument>,
                            <argument pos:start="380:29" pos:end="380:47"><expr pos:start="380:29" pos:end="380:47"><name pos:start="380:29" pos:end="380:47">EST_CERT_FORMAT_PEM</name></expr></argument>,
                            <argument pos:start="381:29" pos:end="381:53"><expr pos:start="381:29" pos:end="381:53"><name pos:start="381:29" pos:end="381:53">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt pos:start="382:6" pos:end="382:29"><expr pos:start="382:6" pos:end="382:28"><call pos:start="382:6" pos:end="382:28"><name pos:start="382:6" pos:end="382:14">CU_ASSERT</name><argument_list pos:start="382:15" pos:end="382:28">(<argument pos:start="382:16" pos:end="382:27"><expr pos:start="382:16" pos:end="382:27"><name pos:start="382:16" pos:end="382:19">ectx</name> <operator pos:start="382:21" pos:end="382:22">!=</operator> <name pos:start="382:24" pos:end="382:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block" pos:start="384:6" pos:end="386:8">/*
      * Set the authentication mode to use a user id/password
      */</comment>
     <expr_stmt pos:start="387:6" pos:end="387:72"><expr pos:start="387:6" pos:end="387:71"><name pos:start="387:6" pos:end="387:7">rv</name> <operator pos:start="387:9" pos:end="387:9">=</operator> <call pos:start="387:11" pos:end="387:71"><name pos:start="387:11" pos:end="387:29">est_client_set_auth</name><argument_list pos:start="387:30" pos:end="387:71">(<argument pos:start="387:31" pos:end="387:34"><expr pos:start="387:31" pos:end="387:34"><name pos:start="387:31" pos:end="387:34">ectx</name></expr></argument>, <argument pos:start="387:37" pos:end="387:46"><expr pos:start="387:37" pos:end="387:46"><name pos:start="387:37" pos:end="387:46">US3612_UID</name></expr></argument>, <argument pos:start="387:49" pos:end="387:58"><expr pos:start="387:49" pos:end="387:58"><name pos:start="387:49" pos:end="387:58">US3612_PWD</name></expr></argument>, <argument pos:start="387:61" pos:end="387:64"><expr pos:start="387:61" pos:end="387:64"><name pos:start="387:61" pos:end="387:64">NULL</name></expr></argument>, <argument pos:start="387:67" pos:end="387:70"><expr pos:start="387:67" pos:end="387:70"><name pos:start="387:67" pos:end="387:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt pos:start="388:6" pos:end="388:35"><expr pos:start="388:6" pos:end="388:34"><call pos:start="388:6" pos:end="388:34"><name pos:start="388:6" pos:end="388:14">CU_ASSERT</name><argument_list pos:start="388:15" pos:end="388:34">(<argument pos:start="388:16" pos:end="388:33"><expr pos:start="388:16" pos:end="388:33"><name pos:start="388:16" pos:end="388:17">rv</name> <operator pos:start="388:19" pos:end="388:20">==</operator> <name pos:start="388:22" pos:end="388:33">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block" pos:start="390:6" pos:end="392:8">/*
      * Set the EST server address/port
      */</comment>
     <expr_stmt pos:start="393:6" pos:end="393:77"><expr pos:start="393:6" pos:end="393:76"><call pos:start="393:6" pos:end="393:76"><name pos:start="393:6" pos:end="393:26">est_client_set_server</name><argument_list pos:start="393:27" pos:end="393:76">(<argument pos:start="393:28" pos:end="393:31"><expr pos:start="393:28" pos:end="393:31"><name pos:start="393:28" pos:end="393:31">ectx</name></expr></argument>, <argument pos:start="393:34" pos:end="393:49"><expr pos:start="393:34" pos:end="393:49"><name pos:start="393:34" pos:end="393:49">US3612_SERVER_IP</name></expr></argument>, <argument pos:start="393:52" pos:end="393:69"><expr pos:start="393:52" pos:end="393:69"><name pos:start="393:52" pos:end="393:69">US3612_SERVER_PORT</name></expr></argument>, <argument pos:start="393:72" pos:end="393:75"><expr pos:start="393:72" pos:end="393:75"><name pos:start="393:72" pos:end="393:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block" pos:start="395:6" pos:end="400:8">/*
      * Read in our test private key
      * generated via the command below:
      *
      * openssl genrsa -aes128 -passout pass:us3612 -out us3612_key.pem 4096
      */</comment>

     <expr_stmt pos:start="402:6" pos:end="402:35"><expr pos:start="402:6" pos:end="402:34"><name pos:start="402:6" pos:end="402:17">key_password</name> <operator pos:start="402:19" pos:end="402:19">=</operator> <name pos:start="402:21" pos:end="402:34">US3612_BAD_PWD</name></expr>;</expr_stmt>

     <expr_stmt pos:start="404:6" pos:end="404:83"><expr pos:start="404:6" pos:end="404:82"><name pos:start="404:6" pos:end="404:8">key</name> <operator pos:start="404:10" pos:end="404:10">=</operator> <call pos:start="404:12" pos:end="404:82"><name pos:start="404:12" pos:end="404:37">read_protected_private_key</name><argument_list pos:start="404:38" pos:end="404:82">(<argument pos:start="404:39" pos:end="404:61"><expr pos:start="404:39" pos:end="404:61"><name pos:start="404:39" pos:end="404:61">US3612_PRIVATE_KEY_FILE</name></expr></argument>, <argument pos:start="404:64" pos:end="404:81"><expr pos:start="404:64" pos:end="404:81"><name pos:start="404:64" pos:end="404:81">string_password_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt pos:start="406:6" pos:end="406:28"><expr pos:start="406:6" pos:end="406:27"><call pos:start="406:6" pos:end="406:27"><name pos:start="406:6" pos:end="406:14">CU_ASSERT</name><argument_list pos:start="406:15" pos:end="406:27">(<argument pos:start="406:16" pos:end="406:26"><expr pos:start="406:16" pos:end="406:26"><name pos:start="406:16" pos:end="406:18">key</name> <operator pos:start="406:20" pos:end="406:21">==</operator> <name pos:start="406:23" pos:end="406:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block" pos:start="408:6" pos:end="410:8">/*
      * Get the latest CSR attributes
      */</comment>
     <expr_stmt pos:start="411:6" pos:end="411:63"><expr pos:start="411:6" pos:end="411:62"><name pos:start="411:6" pos:end="411:7">rv</name> <operator pos:start="411:9" pos:end="411:9">=</operator> <call pos:start="411:11" pos:end="411:62"><name pos:start="411:11" pos:end="411:33">est_client_get_csrattrs</name><argument_list pos:start="411:34" pos:end="411:62">(<argument pos:start="411:35" pos:end="411:38"><expr pos:start="411:35" pos:end="411:38"><name pos:start="411:35" pos:end="411:38">ectx</name></expr></argument>, <argument pos:start="411:41" pos:end="411:50"><expr pos:start="411:41" pos:end="411:50"><operator pos:start="411:41" pos:end="411:41">&amp;</operator><name pos:start="411:42" pos:end="411:50">attr_data</name></expr></argument>, <argument pos:start="411:53" pos:end="411:61"><expr pos:start="411:53" pos:end="411:61"><operator pos:start="411:53" pos:end="411:53">&amp;</operator><name pos:start="411:54" pos:end="411:61">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt pos:start="412:6" pos:end="412:35"><expr pos:start="412:6" pos:end="412:34"><call pos:start="412:6" pos:end="412:34"><name pos:start="412:6" pos:end="412:14">CU_ASSERT</name><argument_list pos:start="412:15" pos:end="412:34">(<argument pos:start="412:16" pos:end="412:33"><expr pos:start="412:16" pos:end="412:33"><name pos:start="412:16" pos:end="412:17">rv</name> <operator pos:start="412:19" pos:end="412:20">==</operator> <name pos:start="412:22" pos:end="412:33">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block" pos:start="414:6" pos:end="416:8">/*
      * Use the simplified API to enroll a CSR
      */</comment>
     <expr_stmt pos:start="417:6" pos:end="417:63"><expr pos:start="417:6" pos:end="417:62"><name pos:start="417:6" pos:end="417:7">rv</name> <operator pos:start="417:9" pos:end="417:9">=</operator> <call pos:start="417:11" pos:end="417:62"><name pos:start="417:11" pos:end="417:27">est_client_enroll</name><argument_list pos:start="417:28" pos:end="417:62">(<argument pos:start="417:29" pos:end="417:32"><expr pos:start="417:29" pos:end="417:32"><name pos:start="417:29" pos:end="417:32">ectx</name></expr></argument>, <argument pos:start="417:35" pos:end="417:44"><expr pos:start="417:35" pos:end="417:44"><literal type="string" pos:start="417:35" pos:end="417:44">"TC3612-2"</literal></expr></argument>, <argument pos:start="417:47" pos:end="417:56"><expr pos:start="417:47" pos:end="417:56"><operator pos:start="417:47" pos:end="417:47">&amp;</operator><name pos:start="417:48" pos:end="417:56">pkcs7_len</name></expr></argument>, <argument pos:start="417:59" pos:end="417:61"><expr pos:start="417:59" pos:end="417:61"><name pos:start="417:59" pos:end="417:61">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt pos:start="418:6" pos:end="418:35"><expr pos:start="418:6" pos:end="418:34"><call pos:start="418:6" pos:end="418:34"><name pos:start="418:6" pos:end="418:14">CU_ASSERT</name><argument_list pos:start="418:15" pos:end="418:34">(<argument pos:start="418:16" pos:end="418:33"><expr pos:start="418:16" pos:end="418:33"><name pos:start="418:16" pos:end="418:17">rv</name> <operator pos:start="418:19" pos:end="418:20">!=</operator> <name pos:start="418:22" pos:end="418:33">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <comment type="block" pos:start="420:6" pos:end="422:8">/*
      * Cleanup
      */</comment>
     <expr_stmt pos:start="423:6" pos:end="423:24"><expr pos:start="423:6" pos:end="423:23"><call pos:start="423:6" pos:end="423:23"><name pos:start="423:6" pos:end="423:18">EVP_PKEY_free</name><argument_list pos:start="423:19" pos:end="423:23">(<argument pos:start="423:20" pos:end="423:22"><expr pos:start="423:20" pos:end="423:22"><name pos:start="423:20" pos:end="423:22">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <if_stmt pos:start="424:6" pos:end="424:34"><if pos:start="424:6" pos:end="424:34">if <condition pos:start="424:9" pos:end="424:18">(<expr pos:start="424:10" pos:end="424:17"><name pos:start="424:10" pos:end="424:17">new_cert</name></expr>)</condition><block type="pseudo" pos:start="424:20" pos:end="424:34"><block_content pos:start="424:20" pos:end="424:34"> <expr_stmt pos:start="424:20" pos:end="424:34"><expr pos:start="424:20" pos:end="424:33"><call pos:start="424:20" pos:end="424:33"><name pos:start="424:20" pos:end="424:23">free</name><argument_list pos:start="424:24" pos:end="424:33">(<argument pos:start="424:25" pos:end="424:32"><expr pos:start="424:25" pos:end="424:32"><name pos:start="424:25" pos:end="424:32">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
     <expr_stmt pos:start="425:6" pos:end="425:23"><expr pos:start="425:6" pos:end="425:22"><call pos:start="425:6" pos:end="425:22"><name pos:start="425:6" pos:end="425:16">est_destroy</name><argument_list pos:start="425:17" pos:end="425:22">(<argument pos:start="425:18" pos:end="425:21"><expr pos:start="425:18" pos:end="425:21"><name pos:start="425:18" pos:end="425:21">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="429:1" pos:end="434:3">/*
 * Simple enroll CSR
 *
 * Change the password used by the callback after reading
 * in the protected private key file.
 */</comment>
<function pos:start="435:1" pos:end="511:1"><type pos:start="435:1" pos:end="435:11"><specifier pos:start="435:1" pos:end="435:6">static</specifier> <name pos:start="435:8" pos:end="435:11">void</name></type> <name pos:start="435:13" pos:end="435:24">us3612_test3</name> <parameter_list pos:start="435:26" pos:end="435:31">(<parameter pos:start="435:27" pos:end="435:30"><decl pos:start="435:27" pos:end="435:30"><type pos:start="435:27" pos:end="435:30"><name pos:start="435:27" pos:end="435:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="436:1" pos:end="511:1">{<block_content pos:start="437:5" pos:end="510:22">
    <decl_stmt pos:start="437:5" pos:end="437:18"><decl pos:start="437:5" pos:end="437:17"><type pos:start="437:5" pos:end="437:13"><name pos:start="437:5" pos:end="437:11">EST_CTX</name> <modifier pos:start="437:13" pos:end="437:13">*</modifier></type><name pos:start="437:14" pos:end="437:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="438:5" pos:end="438:18"><decl pos:start="438:5" pos:end="438:17"><type pos:start="438:5" pos:end="438:14"><name pos:start="438:5" pos:end="438:12">EVP_PKEY</name> <modifier pos:start="438:14" pos:end="438:14">*</modifier></type><name pos:start="438:15" pos:end="438:17">key</name></decl>;</decl_stmt>
    <decl_stmt pos:start="439:5" pos:end="439:11"><decl pos:start="439:5" pos:end="439:10"><type pos:start="439:5" pos:end="439:7"><name pos:start="439:5" pos:end="439:7">int</name></type> <name pos:start="439:9" pos:end="439:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="440:5" pos:end="440:22"><decl pos:start="440:5" pos:end="440:21"><type pos:start="440:5" pos:end="440:7"><name pos:start="440:5" pos:end="440:7">int</name></type> <name pos:start="440:9" pos:end="440:17">pkcs7_len</name> <init pos:start="440:19" pos:end="440:21">= <expr pos:start="440:21" pos:end="440:21"><literal type="number" pos:start="440:21" pos:end="440:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="441:5" pos:end="441:35"><decl pos:start="441:5" pos:end="441:34"><type pos:start="441:5" pos:end="441:19"><name pos:start="441:5" pos:end="441:12">unsigned</name> <name pos:start="441:14" pos:end="441:17">char</name> <modifier pos:start="441:19" pos:end="441:19">*</modifier></type><name pos:start="441:20" pos:end="441:27">new_cert</name> <init pos:start="441:29" pos:end="441:34">= <expr pos:start="441:31" pos:end="441:34"><name pos:start="441:31" pos:end="441:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="442:5" pos:end="442:36"><decl pos:start="442:5" pos:end="442:35"><type pos:start="442:5" pos:end="442:19"><name pos:start="442:5" pos:end="442:12">unsigned</name> <name pos:start="442:14" pos:end="442:17">char</name> <modifier pos:start="442:19" pos:end="442:19">*</modifier></type><name pos:start="442:20" pos:end="442:28">attr_data</name> <init pos:start="442:30" pos:end="442:35">= <expr pos:start="442:32" pos:end="442:35"><name pos:start="442:32" pos:end="442:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="443:5" pos:end="443:17"><decl pos:start="443:5" pos:end="443:16"><type pos:start="443:5" pos:end="443:7"><name pos:start="443:5" pos:end="443:7">int</name></type> <name pos:start="443:9" pos:end="443:16">attr_len</name></decl>;</decl_stmt>

    <comment type="block" pos:start="445:5" pos:end="447:7">/*
     * Create a client context
     */</comment>
    <expr_stmt pos:start="448:5" pos:end="450:54"><expr pos:start="448:5" pos:end="450:53"><name pos:start="448:5" pos:end="448:8">ectx</name> <operator pos:start="448:10" pos:end="448:10">=</operator> <call pos:start="448:12" pos:end="450:53"><name pos:start="448:12" pos:end="448:26">est_client_init</name><argument_list pos:start="448:27" pos:end="450:53">(<argument pos:start="448:28" pos:end="448:34"><expr pos:start="448:28" pos:end="448:34"><name pos:start="448:28" pos:end="448:34">cacerts</name></expr></argument>, <argument pos:start="448:37" pos:end="448:47"><expr pos:start="448:37" pos:end="448:47"><name pos:start="448:37" pos:end="448:47">cacerts_len</name></expr></argument>,
                           <argument pos:start="449:28" pos:end="449:46"><expr pos:start="449:28" pos:end="449:46"><name pos:start="449:28" pos:end="449:46">EST_CERT_FORMAT_PEM</name></expr></argument>,
                           <argument pos:start="450:28" pos:end="450:52"><expr pos:start="450:28" pos:end="450:52"><name pos:start="450:28" pos:end="450:52">client_manual_cert_verify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="451:5" pos:end="451:28"><expr pos:start="451:5" pos:end="451:27"><call pos:start="451:5" pos:end="451:27"><name pos:start="451:5" pos:end="451:13">CU_ASSERT</name><argument_list pos:start="451:14" pos:end="451:27">(<argument pos:start="451:15" pos:end="451:26"><expr pos:start="451:15" pos:end="451:26"><name pos:start="451:15" pos:end="451:18">ectx</name> <operator pos:start="451:20" pos:end="451:21">!=</operator> <name pos:start="451:23" pos:end="451:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="453:5" pos:end="455:7">/*
     * Set the authentication mode to use a user id/password
     */</comment>
    <expr_stmt pos:start="456:5" pos:end="456:71"><expr pos:start="456:5" pos:end="456:70"><name pos:start="456:5" pos:end="456:6">rv</name> <operator pos:start="456:8" pos:end="456:8">=</operator> <call pos:start="456:10" pos:end="456:70"><name pos:start="456:10" pos:end="456:28">est_client_set_auth</name><argument_list pos:start="456:29" pos:end="456:70">(<argument pos:start="456:30" pos:end="456:33"><expr pos:start="456:30" pos:end="456:33"><name pos:start="456:30" pos:end="456:33">ectx</name></expr></argument>, <argument pos:start="456:36" pos:end="456:45"><expr pos:start="456:36" pos:end="456:45"><name pos:start="456:36" pos:end="456:45">US3612_UID</name></expr></argument>, <argument pos:start="456:48" pos:end="456:57"><expr pos:start="456:48" pos:end="456:57"><name pos:start="456:48" pos:end="456:57">US3612_PWD</name></expr></argument>, <argument pos:start="456:60" pos:end="456:63"><expr pos:start="456:60" pos:end="456:63"><name pos:start="456:60" pos:end="456:63">NULL</name></expr></argument>, <argument pos:start="456:66" pos:end="456:69"><expr pos:start="456:66" pos:end="456:69"><name pos:start="456:66" pos:end="456:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="457:5" pos:end="457:34"><expr pos:start="457:5" pos:end="457:33"><call pos:start="457:5" pos:end="457:33"><name pos:start="457:5" pos:end="457:13">CU_ASSERT</name><argument_list pos:start="457:14" pos:end="457:33">(<argument pos:start="457:15" pos:end="457:32"><expr pos:start="457:15" pos:end="457:32"><name pos:start="457:15" pos:end="457:16">rv</name> <operator pos:start="457:18" pos:end="457:19">==</operator> <name pos:start="457:21" pos:end="457:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="459:5" pos:end="461:7">/*
     * Set the EST server address/port
     */</comment>
    <expr_stmt pos:start="462:5" pos:end="462:76"><expr pos:start="462:5" pos:end="462:75"><call pos:start="462:5" pos:end="462:75"><name pos:start="462:5" pos:end="462:25">est_client_set_server</name><argument_list pos:start="462:26" pos:end="462:75">(<argument pos:start="462:27" pos:end="462:30"><expr pos:start="462:27" pos:end="462:30"><name pos:start="462:27" pos:end="462:30">ectx</name></expr></argument>, <argument pos:start="462:33" pos:end="462:48"><expr pos:start="462:33" pos:end="462:48"><name pos:start="462:33" pos:end="462:48">US3612_SERVER_IP</name></expr></argument>, <argument pos:start="462:51" pos:end="462:68"><expr pos:start="462:51" pos:end="462:68"><name pos:start="462:51" pos:end="462:68">US3612_SERVER_PORT</name></expr></argument>, <argument pos:start="462:71" pos:end="462:74"><expr pos:start="462:71" pos:end="462:74"><name pos:start="462:71" pos:end="462:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="464:5" pos:end="469:7">/*
     * Read in our test private key
     * generated via the command below:
     *
     * openssl genrsa -aes128 -passout pass:us3612 -out us3612_key.pem 4096
     */</comment>

    <expr_stmt pos:start="471:5" pos:end="471:35"><expr pos:start="471:5" pos:end="471:34"><name pos:start="471:5" pos:end="471:16">key_password</name> <operator pos:start="471:18" pos:end="471:18">=</operator> <name pos:start="471:20" pos:end="471:34">US3612_GOOD_PWD</name></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:82"><expr pos:start="473:5" pos:end="473:81"><name pos:start="473:5" pos:end="473:7">key</name> <operator pos:start="473:9" pos:end="473:9">=</operator> <call pos:start="473:11" pos:end="473:81"><name pos:start="473:11" pos:end="473:36">read_protected_private_key</name><argument_list pos:start="473:37" pos:end="473:81">(<argument pos:start="473:38" pos:end="473:60"><expr pos:start="473:38" pos:end="473:60"><name pos:start="473:38" pos:end="473:60">US3612_PRIVATE_KEY_FILE</name></expr></argument>, <argument pos:start="473:63" pos:end="473:80"><expr pos:start="473:63" pos:end="473:80"><name pos:start="473:63" pos:end="473:80">string_password_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="475:5" pos:end="475:27"><expr pos:start="475:5" pos:end="475:26"><call pos:start="475:5" pos:end="475:26"><name pos:start="475:5" pos:end="475:13">CU_ASSERT</name><argument_list pos:start="475:14" pos:end="475:26">(<argument pos:start="475:15" pos:end="475:25"><expr pos:start="475:15" pos:end="475:25"><name pos:start="475:15" pos:end="475:17">key</name> <operator pos:start="475:19" pos:end="475:20">!=</operator> <name pos:start="475:22" pos:end="475:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="477:5" pos:end="479:7">/*
     * Change out the password, EVP_PKEY should remain unaffected
     */</comment>

    <expr_stmt pos:start="481:5" pos:end="481:34"><expr pos:start="481:5" pos:end="481:33"><name pos:start="481:5" pos:end="481:16">key_password</name> <operator pos:start="481:18" pos:end="481:18">=</operator> <name pos:start="481:20" pos:end="481:33">US3612_BAD_PWD</name></expr>;</expr_stmt>

    <comment type="block" pos:start="483:5" pos:end="485:7">/*
     * Get the latest CSR attributes
     */</comment>
    <expr_stmt pos:start="486:5" pos:end="486:62"><expr pos:start="486:5" pos:end="486:61"><name pos:start="486:5" pos:end="486:6">rv</name> <operator pos:start="486:8" pos:end="486:8">=</operator> <call pos:start="486:10" pos:end="486:61"><name pos:start="486:10" pos:end="486:32">est_client_get_csrattrs</name><argument_list pos:start="486:33" pos:end="486:61">(<argument pos:start="486:34" pos:end="486:37"><expr pos:start="486:34" pos:end="486:37"><name pos:start="486:34" pos:end="486:37">ectx</name></expr></argument>, <argument pos:start="486:40" pos:end="486:49"><expr pos:start="486:40" pos:end="486:49"><operator pos:start="486:40" pos:end="486:40">&amp;</operator><name pos:start="486:41" pos:end="486:49">attr_data</name></expr></argument>, <argument pos:start="486:52" pos:end="486:60"><expr pos:start="486:52" pos:end="486:60"><operator pos:start="486:52" pos:end="486:52">&amp;</operator><name pos:start="486:53" pos:end="486:60">attr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="487:5" pos:end="487:34"><expr pos:start="487:5" pos:end="487:33"><call pos:start="487:5" pos:end="487:33"><name pos:start="487:5" pos:end="487:13">CU_ASSERT</name><argument_list pos:start="487:14" pos:end="487:33">(<argument pos:start="487:15" pos:end="487:32"><expr pos:start="487:15" pos:end="487:32"><name pos:start="487:15" pos:end="487:16">rv</name> <operator pos:start="487:18" pos:end="487:19">==</operator> <name pos:start="487:21" pos:end="487:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="489:5" pos:end="491:7">/*
     * Use the simplified API to enroll a CSR
     */</comment>
    <expr_stmt pos:start="492:5" pos:end="492:64"><expr pos:start="492:5" pos:end="492:63"><name pos:start="492:5" pos:end="492:6">rv</name> <operator pos:start="492:8" pos:end="492:8">=</operator> <call pos:start="492:10" pos:end="492:63"><name pos:start="492:10" pos:end="492:26">est_client_enroll</name><argument_list pos:start="492:27" pos:end="492:63">(<argument pos:start="492:28" pos:end="492:31"><expr pos:start="492:28" pos:end="492:31"><name pos:start="492:28" pos:end="492:31">ectx</name></expr></argument>, <argument pos:start="492:34" pos:end="492:45"><expr pos:start="492:34" pos:end="492:45"><literal type="string" pos:start="492:34" pos:end="492:45">"TCUS3612-3"</literal></expr></argument>, <argument pos:start="492:48" pos:end="492:57"><expr pos:start="492:48" pos:end="492:57"><operator pos:start="492:48" pos:end="492:48">&amp;</operator><name pos:start="492:49" pos:end="492:57">pkcs7_len</name></expr></argument>, <argument pos:start="492:60" pos:end="492:62"><expr pos:start="492:60" pos:end="492:62"><name pos:start="492:60" pos:end="492:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="493:5" pos:end="493:34"><expr pos:start="493:5" pos:end="493:33"><call pos:start="493:5" pos:end="493:33"><name pos:start="493:5" pos:end="493:13">CU_ASSERT</name><argument_list pos:start="493:14" pos:end="493:33">(<argument pos:start="493:15" pos:end="493:32"><expr pos:start="493:15" pos:end="493:32"><name pos:start="493:15" pos:end="493:16">rv</name> <operator pos:start="493:18" pos:end="493:19">==</operator> <name pos:start="493:21" pos:end="493:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="495:5" pos:end="497:7">/*
     * Retrieve the cert that was given to us by the EST server
     */</comment>
    <if_stmt pos:start="498:5" pos:end="503:5"><if pos:start="498:5" pos:end="503:5">if <condition pos:start="498:8" pos:end="498:27">(<expr pos:start="498:9" pos:end="498:26"><name pos:start="498:9" pos:end="498:10">rv</name> <operator pos:start="498:12" pos:end="498:13">==</operator> <name pos:start="498:15" pos:end="498:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="498:29" pos:end="503:5">{<block_content pos:start="499:5" pos:end="502:34">
    <expr_stmt pos:start="499:5" pos:end="499:33"><expr pos:start="499:5" pos:end="499:32"><name pos:start="499:5" pos:end="499:12">new_cert</name> <operator pos:start="499:14" pos:end="499:14">=</operator> <call pos:start="499:16" pos:end="499:32"><name pos:start="499:16" pos:end="499:21">malloc</name><argument_list pos:start="499:22" pos:end="499:32">(<argument pos:start="499:23" pos:end="499:31"><expr pos:start="499:23" pos:end="499:31"><name pos:start="499:23" pos:end="499:31">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="500:5" pos:end="500:32"><expr pos:start="500:5" pos:end="500:31"><call pos:start="500:5" pos:end="500:31"><name pos:start="500:5" pos:end="500:13">CU_ASSERT</name><argument_list pos:start="500:14" pos:end="500:31">(<argument pos:start="500:15" pos:end="500:30"><expr pos:start="500:15" pos:end="500:30"><name pos:start="500:15" pos:end="500:22">new_cert</name> <operator pos:start="500:24" pos:end="500:25">!=</operator> <name pos:start="500:27" pos:end="500:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="501:5" pos:end="501:55"><expr pos:start="501:5" pos:end="501:54"><name pos:start="501:5" pos:end="501:6">rv</name> <operator pos:start="501:8" pos:end="501:8">=</operator> <call pos:start="501:10" pos:end="501:54"><name pos:start="501:10" pos:end="501:38">est_client_copy_enrolled_cert</name><argument_list pos:start="501:39" pos:end="501:54">(<argument pos:start="501:40" pos:end="501:43"><expr pos:start="501:40" pos:end="501:43"><name pos:start="501:40" pos:end="501:43">ectx</name></expr></argument>, <argument pos:start="501:46" pos:end="501:53"><expr pos:start="501:46" pos:end="501:53"><name pos:start="501:46" pos:end="501:53">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="502:5" pos:end="502:34"><expr pos:start="502:5" pos:end="502:33"><call pos:start="502:5" pos:end="502:33"><name pos:start="502:5" pos:end="502:13">CU_ASSERT</name><argument_list pos:start="502:14" pos:end="502:33">(<argument pos:start="502:15" pos:end="502:32"><expr pos:start="502:15" pos:end="502:32"><name pos:start="502:15" pos:end="502:16">rv</name> <operator pos:start="502:18" pos:end="502:19">==</operator> <name pos:start="502:21" pos:end="502:32">EST_ERR_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="505:5" pos:end="507:7">/*
     * Cleanup
     */</comment>
    <expr_stmt pos:start="508:5" pos:end="508:23"><expr pos:start="508:5" pos:end="508:22"><call pos:start="508:5" pos:end="508:22"><name pos:start="508:5" pos:end="508:17">EVP_PKEY_free</name><argument_list pos:start="508:18" pos:end="508:22">(<argument pos:start="508:19" pos:end="508:21"><expr pos:start="508:19" pos:end="508:21"><name pos:start="508:19" pos:end="508:21">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="509:5" pos:end="509:33"><if pos:start="509:5" pos:end="509:33">if <condition pos:start="509:8" pos:end="509:17">(<expr pos:start="509:9" pos:end="509:16"><name pos:start="509:9" pos:end="509:16">new_cert</name></expr>)</condition><block type="pseudo" pos:start="509:19" pos:end="509:33"><block_content pos:start="509:19" pos:end="509:33"> <expr_stmt pos:start="509:19" pos:end="509:33"><expr pos:start="509:19" pos:end="509:32"><call pos:start="509:19" pos:end="509:32"><name pos:start="509:19" pos:end="509:22">free</name><argument_list pos:start="509:23" pos:end="509:32">(<argument pos:start="509:24" pos:end="509:31"><expr pos:start="509:24" pos:end="509:31"><name pos:start="509:24" pos:end="509:31">new_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="510:5" pos:end="510:22"><expr pos:start="510:5" pos:end="510:21"><call pos:start="510:5" pos:end="510:21"><name pos:start="510:5" pos:end="510:15">est_destroy</name><argument_list pos:start="510:16" pos:end="510:21">(<argument pos:start="510:17" pos:end="510:20"><expr pos:start="510:17" pos:end="510:20"><name pos:start="510:17" pos:end="510:20">ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" pos:start="514:1" pos:end="517:3">/*
 * Test key generation utility functions
 * and associated password callbacks
 */</comment>
<function pos:start="518:1" pos:end="564:1"><type pos:start="518:1" pos:end="518:11"><specifier pos:start="518:1" pos:end="518:6">static</specifier> <name pos:start="518:8" pos:end="518:11">void</name></type> <name pos:start="518:13" pos:end="518:24">us3612_test4</name> <parameter_list pos:start="518:26" pos:end="518:31">(<parameter pos:start="518:27" pos:end="518:30"><decl pos:start="518:27" pos:end="518:30"><type pos:start="518:27" pos:end="518:30"><name pos:start="518:27" pos:end="518:30">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="519:1" pos:end="564:1">{<block_content pos:start="520:5" pos:end="562:20">
    <decl_stmt pos:start="520:5" pos:end="520:27"><decl pos:start="520:5" pos:end="520:26"><type pos:start="520:5" pos:end="520:10"><name pos:start="520:5" pos:end="520:8">char</name> <modifier pos:start="520:10" pos:end="520:10">*</modifier></type> <name pos:start="520:12" pos:end="520:19">new_pkey</name> <init pos:start="520:21" pos:end="520:26">= <expr pos:start="520:23" pos:end="520:26"><name pos:start="520:23" pos:end="520:26">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="522:5" pos:end="524:7">/*
     * Generate an RSA key without a password
     */</comment>

    <expr_stmt pos:start="526:5" pos:end="526:59"><expr pos:start="526:5" pos:end="526:58"><name pos:start="526:5" pos:end="526:12">new_pkey</name> <operator pos:start="526:14" pos:end="526:14">=</operator> <call pos:start="526:16" pos:end="526:58"><name pos:start="526:16" pos:end="526:39">generate_private_RSA_key</name><argument_list pos:start="526:40" pos:end="526:58">(<argument pos:start="526:41" pos:end="526:51"><expr pos:start="526:41" pos:end="526:51"><name pos:start="526:41" pos:end="526:51">RSA_KEYSIZE</name></expr></argument>, <argument pos:start="526:54" pos:end="526:57"><expr pos:start="526:54" pos:end="526:57"><name pos:start="526:54" pos:end="526:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="527:5" pos:end="527:32"><expr pos:start="527:5" pos:end="527:31"><call pos:start="527:5" pos:end="527:31"><name pos:start="527:5" pos:end="527:13">CU_ASSERT</name><argument_list pos:start="527:14" pos:end="527:31">(<argument pos:start="527:15" pos:end="527:30"><expr pos:start="527:15" pos:end="527:30"><name pos:start="527:15" pos:end="527:22">new_pkey</name> <operator pos:start="527:24" pos:end="527:25">!=</operator> <name pos:start="527:27" pos:end="527:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="528:5" pos:end="528:31"><expr pos:start="528:5" pos:end="528:30"><call pos:start="528:5" pos:end="528:30"><name pos:start="528:5" pos:end="528:10">printf</name><argument_list pos:start="528:11" pos:end="528:30">(<argument pos:start="528:12" pos:end="528:19"><expr pos:start="528:12" pos:end="528:19"><literal type="string" pos:start="528:12" pos:end="528:19">"\n%s\n"</literal></expr></argument>, <argument pos:start="528:22" pos:end="528:29"><expr pos:start="528:22" pos:end="528:29"><name pos:start="528:22" pos:end="528:29">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="529:5" pos:end="529:19"><expr pos:start="529:5" pos:end="529:18"><call pos:start="529:5" pos:end="529:18"><name pos:start="529:5" pos:end="529:8">free</name><argument_list pos:start="529:9" pos:end="529:18">(<argument pos:start="529:10" pos:end="529:17"><expr pos:start="529:10" pos:end="529:17"><name pos:start="529:10" pos:end="529:17">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="530:5" pos:end="530:20"><expr pos:start="530:5" pos:end="530:19"><name pos:start="530:5" pos:end="530:12">new_pkey</name> <operator pos:start="530:14" pos:end="530:14">=</operator> <name pos:start="530:16" pos:end="530:19">NULL</name></expr>;</expr_stmt>

    <comment type="block" pos:start="532:5" pos:end="534:7">/*
     * Generate an RSA key with password
     */</comment>

    <expr_stmt pos:start="536:5" pos:end="536:35"><expr pos:start="536:5" pos:end="536:34"><name pos:start="536:5" pos:end="536:16">key_password</name> <operator pos:start="536:18" pos:end="536:18">=</operator> <name pos:start="536:20" pos:end="536:34">US3612_GOOD_PWD</name></expr>;</expr_stmt>

    <expr_stmt pos:start="538:5" pos:end="538:73"><expr pos:start="538:5" pos:end="538:72"><name pos:start="538:5" pos:end="538:12">new_pkey</name> <operator pos:start="538:14" pos:end="538:14">=</operator> <call pos:start="538:16" pos:end="538:72"><name pos:start="538:16" pos:end="538:39">generate_private_RSA_key</name><argument_list pos:start="538:40" pos:end="538:72">(<argument pos:start="538:41" pos:end="538:51"><expr pos:start="538:41" pos:end="538:51"><name pos:start="538:41" pos:end="538:51">RSA_KEYSIZE</name></expr></argument>, <argument pos:start="538:54" pos:end="538:71"><expr pos:start="538:54" pos:end="538:71"><name pos:start="538:54" pos:end="538:71">string_password_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="539:5" pos:end="539:32"><expr pos:start="539:5" pos:end="539:31"><call pos:start="539:5" pos:end="539:31"><name pos:start="539:5" pos:end="539:13">CU_ASSERT</name><argument_list pos:start="539:14" pos:end="539:31">(<argument pos:start="539:15" pos:end="539:30"><expr pos:start="539:15" pos:end="539:30"><name pos:start="539:15" pos:end="539:22">new_pkey</name> <operator pos:start="539:24" pos:end="539:25">!=</operator> <name pos:start="539:27" pos:end="539:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="540:5" pos:end="540:31"><expr pos:start="540:5" pos:end="540:30"><call pos:start="540:5" pos:end="540:30"><name pos:start="540:5" pos:end="540:10">printf</name><argument_list pos:start="540:11" pos:end="540:30">(<argument pos:start="540:12" pos:end="540:19"><expr pos:start="540:12" pos:end="540:19"><literal type="string" pos:start="540:12" pos:end="540:19">"\n%s\n"</literal></expr></argument>, <argument pos:start="540:22" pos:end="540:29"><expr pos:start="540:22" pos:end="540:29"><name pos:start="540:22" pos:end="540:29">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="541:5" pos:end="541:19"><expr pos:start="541:5" pos:end="541:18"><call pos:start="541:5" pos:end="541:18"><name pos:start="541:5" pos:end="541:8">free</name><argument_list pos:start="541:9" pos:end="541:18">(<argument pos:start="541:10" pos:end="541:17"><expr pos:start="541:10" pos:end="541:17"><name pos:start="541:10" pos:end="541:17">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="542:5" pos:end="542:20"><expr pos:start="542:5" pos:end="542:19"><name pos:start="542:5" pos:end="542:12">new_pkey</name> <operator pos:start="542:14" pos:end="542:14">=</operator> <name pos:start="542:16" pos:end="542:19">NULL</name></expr>;</expr_stmt>

    <comment type="block" pos:start="544:5" pos:end="546:7">/*
     * Generate an EC key without a password
     */</comment>

    <expr_stmt pos:start="548:5" pos:end="548:80"><expr pos:start="548:5" pos:end="548:79"><name pos:start="548:5" pos:end="548:12">new_pkey</name> <operator pos:start="548:14" pos:end="548:14">=</operator> <call pos:start="548:16" pos:end="548:79"><name pos:start="548:16" pos:end="548:38">generate_private_EC_key</name><argument_list pos:start="548:39" pos:end="548:79">(<argument pos:start="548:40" pos:end="548:72"><expr pos:start="548:40" pos:end="548:72"><call pos:start="548:40" pos:end="548:72"><name pos:start="548:40" pos:end="548:49">OBJ_sn2nid</name><argument_list pos:start="548:50" pos:end="548:72">(<argument pos:start="548:51" pos:end="548:71"><expr pos:start="548:51" pos:end="548:71"><operator pos:start="548:51" pos:end="548:51">(</operator><name pos:start="548:52" pos:end="548:55">char</name> <operator pos:start="548:57" pos:end="548:57">*</operator><operator pos:start="548:58" pos:end="548:58">)</operator> <literal type="string" pos:start="548:60" pos:end="548:71">"prime256v1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="548:75" pos:end="548:78"><expr pos:start="548:75" pos:end="548:78"><name pos:start="548:75" pos:end="548:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="549:5" pos:end="549:32"><expr pos:start="549:5" pos:end="549:31"><call pos:start="549:5" pos:end="549:31"><name pos:start="549:5" pos:end="549:13">CU_ASSERT</name><argument_list pos:start="549:14" pos:end="549:31">(<argument pos:start="549:15" pos:end="549:30"><expr pos:start="549:15" pos:end="549:30"><name pos:start="549:15" pos:end="549:22">new_pkey</name> <operator pos:start="549:24" pos:end="549:25">!=</operator> <name pos:start="549:27" pos:end="549:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="550:5" pos:end="550:31"><expr pos:start="550:5" pos:end="550:30"><call pos:start="550:5" pos:end="550:30"><name pos:start="550:5" pos:end="550:10">printf</name><argument_list pos:start="550:11" pos:end="550:30">(<argument pos:start="550:12" pos:end="550:19"><expr pos:start="550:12" pos:end="550:19"><literal type="string" pos:start="550:12" pos:end="550:19">"\n%s\n"</literal></expr></argument>, <argument pos:start="550:22" pos:end="550:29"><expr pos:start="550:22" pos:end="550:29"><name pos:start="550:22" pos:end="550:29">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="551:5" pos:end="551:19"><expr pos:start="551:5" pos:end="551:18"><call pos:start="551:5" pos:end="551:18"><name pos:start="551:5" pos:end="551:8">free</name><argument_list pos:start="551:9" pos:end="551:18">(<argument pos:start="551:10" pos:end="551:17"><expr pos:start="551:10" pos:end="551:17"><name pos:start="551:10" pos:end="551:17">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="552:5" pos:end="552:20"><expr pos:start="552:5" pos:end="552:19"><name pos:start="552:5" pos:end="552:12">new_pkey</name> <operator pos:start="552:14" pos:end="552:14">=</operator> <name pos:start="552:16" pos:end="552:19">NULL</name></expr>;</expr_stmt>


    <comment type="block" pos:start="555:5" pos:end="557:7">/*
     * Generate an EC key with a password
     */</comment>
    <expr_stmt pos:start="558:5" pos:end="558:94"><expr pos:start="558:5" pos:end="558:93"><name pos:start="558:5" pos:end="558:12">new_pkey</name> <operator pos:start="558:14" pos:end="558:14">=</operator> <call pos:start="558:16" pos:end="558:93"><name pos:start="558:16" pos:end="558:38">generate_private_EC_key</name><argument_list pos:start="558:39" pos:end="558:93">(<argument pos:start="558:40" pos:end="558:72"><expr pos:start="558:40" pos:end="558:72"><call pos:start="558:40" pos:end="558:72"><name pos:start="558:40" pos:end="558:49">OBJ_sn2nid</name><argument_list pos:start="558:50" pos:end="558:72">(<argument pos:start="558:51" pos:end="558:71"><expr pos:start="558:51" pos:end="558:71"><operator pos:start="558:51" pos:end="558:51">(</operator><name pos:start="558:52" pos:end="558:55">char</name> <operator pos:start="558:57" pos:end="558:57">*</operator><operator pos:start="558:58" pos:end="558:58">)</operator> <literal type="string" pos:start="558:60" pos:end="558:71">"prime256v1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="558:75" pos:end="558:92"><expr pos:start="558:75" pos:end="558:92"><name pos:start="558:75" pos:end="558:92">string_password_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="559:5" pos:end="559:32"><expr pos:start="559:5" pos:end="559:31"><call pos:start="559:5" pos:end="559:31"><name pos:start="559:5" pos:end="559:13">CU_ASSERT</name><argument_list pos:start="559:14" pos:end="559:31">(<argument pos:start="559:15" pos:end="559:30"><expr pos:start="559:15" pos:end="559:30"><name pos:start="559:15" pos:end="559:22">new_pkey</name> <operator pos:start="559:24" pos:end="559:25">!=</operator> <name pos:start="559:27" pos:end="559:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="560:5" pos:end="560:31"><expr pos:start="560:5" pos:end="560:30"><call pos:start="560:5" pos:end="560:30"><name pos:start="560:5" pos:end="560:10">printf</name><argument_list pos:start="560:11" pos:end="560:30">(<argument pos:start="560:12" pos:end="560:19"><expr pos:start="560:12" pos:end="560:19"><literal type="string" pos:start="560:12" pos:end="560:19">"\n%s\n"</literal></expr></argument>, <argument pos:start="560:22" pos:end="560:29"><expr pos:start="560:22" pos:end="560:29"><name pos:start="560:22" pos:end="560:29">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="561:5" pos:end="561:19"><expr pos:start="561:5" pos:end="561:18"><call pos:start="561:5" pos:end="561:18"><name pos:start="561:5" pos:end="561:8">free</name><argument_list pos:start="561:9" pos:end="561:18">(<argument pos:start="561:10" pos:end="561:17"><expr pos:start="561:10" pos:end="561:17"><name pos:start="561:10" pos:end="561:17">new_pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="562:5" pos:end="562:20"><expr pos:start="562:5" pos:end="562:19"><name pos:start="562:5" pos:end="562:12">new_pkey</name> <operator pos:start="562:14" pos:end="562:14">=</operator> <name pos:start="562:16" pos:end="562:19">NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function pos:start="566:1" pos:end="594:1"><type pos:start="566:1" pos:end="566:3"><name pos:start="566:1" pos:end="566:3">int</name></type> <name pos:start="566:5" pos:end="566:20">us3612_add_suite</name> <parameter_list pos:start="566:22" pos:end="566:27">(<parameter pos:start="566:23" pos:end="566:26"><decl pos:start="566:23" pos:end="566:26"><type pos:start="566:23" pos:end="566:26"><name pos:start="566:23" pos:end="566:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="567:1" pos:end="594:1">{<block_content pos:start="569:4" pos:end="594:0">
<cpp:ifdef pos:start="568:1" pos:end="568:17">#<cpp:directive pos:start="568:2" pos:end="568:6">ifdef</cpp:directive> <name pos:start="568:8" pos:end="568:17">HAVE_CUNIT</name></cpp:ifdef>
   <decl_stmt pos:start="569:4" pos:end="569:27"><decl pos:start="569:4" pos:end="569:26"><type pos:start="569:4" pos:end="569:12"><name pos:start="569:4" pos:end="569:12">CU_pSuite</name></type> <name pos:start="569:14" pos:end="569:19">pSuite</name> <init pos:start="569:21" pos:end="569:26">= <expr pos:start="569:23" pos:end="569:26"><name pos:start="569:23" pos:end="569:26">NULL</name></expr></init></decl>;</decl_stmt>

   <comment type="block" pos:start="571:4" pos:end="571:36">/* add a suite to the registry */</comment>
   <expr_stmt pos:start="572:4" pos:end="574:36"><expr pos:start="572:4" pos:end="574:35"><name pos:start="572:4" pos:end="572:9">pSuite</name> <operator pos:start="572:11" pos:end="572:11">=</operator> <call pos:start="572:13" pos:end="574:35"><name pos:start="572:13" pos:end="572:24">CU_add_suite</name><argument_list pos:start="572:25" pos:end="574:35">(<argument pos:start="572:26" pos:end="572:56"><expr pos:start="572:26" pos:end="572:56"><literal type="string" pos:start="572:26" pos:end="572:56">"us3612_encrypted_private_keys"</literal></expr></argument>,
                      <argument pos:start="573:23" pos:end="573:39"><expr pos:start="573:23" pos:end="573:39"><name pos:start="573:23" pos:end="573:39">us3612_init_suite</name></expr></argument>,
              <argument pos:start="574:15" pos:end="574:34"><expr pos:start="574:15" pos:end="574:34"><name pos:start="574:15" pos:end="574:34">us3612_destroy_suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt pos:start="575:4" pos:end="578:4"><if pos:start="575:4" pos:end="578:4">if <condition pos:start="575:7" pos:end="575:22">(<expr pos:start="575:8" pos:end="575:21"><name pos:start="575:8" pos:end="575:11">NULL</name> <operator pos:start="575:13" pos:end="575:14">==</operator> <name pos:start="575:16" pos:end="575:21">pSuite</name></expr>)</condition> <block pos:start="575:24" pos:end="578:4">{<block_content pos:start="576:7" pos:end="577:28">
      <expr_stmt pos:start="576:7" pos:end="576:28"><expr pos:start="576:7" pos:end="576:27"><call pos:start="576:7" pos:end="576:27"><name pos:start="576:7" pos:end="576:25">CU_cleanup_registry</name><argument_list pos:start="576:26" pos:end="576:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="577:7" pos:end="577:28">return <expr pos:start="577:14" pos:end="577:27"><call pos:start="577:14" pos:end="577:27"><name pos:start="577:14" pos:end="577:25">CU_get_error</name><argument_list pos:start="577:26" pos:end="577:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <comment type="block" pos:start="580:4" pos:end="582:6">/*
    * Add the tests to the suite
    */</comment>
   <if_stmt pos:start="583:4" pos:end="590:4"><if pos:start="583:4" pos:end="590:4">if <condition pos:start="583:7" pos:end="586:66">(<expr pos:start="583:8" pos:end="586:65"><operator pos:start="583:8" pos:end="583:8">(</operator><name pos:start="583:9" pos:end="583:12">NULL</name> <operator pos:start="583:14" pos:end="583:15">==</operator> <call pos:start="583:17" pos:end="583:88"><name pos:start="583:17" pos:end="583:27">CU_add_test</name><argument_list pos:start="583:28" pos:end="583:88">(<argument pos:start="583:29" pos:end="583:34"><expr pos:start="583:29" pos:end="583:34"><name pos:start="583:29" pos:end="583:34">pSuite</name></expr></argument>, <argument pos:start="583:37" pos:end="583:73"><expr pos:start="583:37" pos:end="583:73"><literal type="string" pos:start="583:37" pos:end="583:73">"Client simple enroll w/ correct pwd"</literal></expr></argument>, <argument pos:start="583:76" pos:end="583:87"><expr pos:start="583:76" pos:end="583:87"><name pos:start="583:76" pos:end="583:87">us3612_test1</name></expr></argument>)</argument_list></call><operator pos:start="583:89" pos:end="583:89">)</operator> <operator pos:start="583:91" pos:end="583:92">||</operator>
       <operator pos:start="584:8" pos:end="584:8">(</operator><name pos:start="584:9" pos:end="584:12">NULL</name> <operator pos:start="584:14" pos:end="584:15">==</operator> <call pos:start="584:17" pos:end="584:90"><name pos:start="584:17" pos:end="584:27">CU_add_test</name><argument_list pos:start="584:28" pos:end="584:90">(<argument pos:start="584:29" pos:end="584:34"><expr pos:start="584:29" pos:end="584:34"><name pos:start="584:29" pos:end="584:34">pSuite</name></expr></argument>, <argument pos:start="584:37" pos:end="584:75"><expr pos:start="584:37" pos:end="584:75"><literal type="string" pos:start="584:37" pos:end="584:75">"Client simple enroll w/ incorrect pwd"</literal></expr></argument>, <argument pos:start="584:78" pos:end="584:89"><expr pos:start="584:78" pos:end="584:89"><name pos:start="584:78" pos:end="584:89">us3612_test2</name></expr></argument>)</argument_list></call><operator pos:start="584:91" pos:end="584:91">)</operator> <operator pos:start="584:93" pos:end="584:94">||</operator>
       <operator pos:start="585:8" pos:end="585:8">(</operator><name pos:start="585:9" pos:end="585:12">NULL</name> <operator pos:start="585:14" pos:end="585:15">==</operator> <call pos:start="585:17" pos:end="585:90"><name pos:start="585:17" pos:end="585:27">CU_add_test</name><argument_list pos:start="585:28" pos:end="585:90">(<argument pos:start="585:29" pos:end="585:34"><expr pos:start="585:29" pos:end="585:34"><name pos:start="585:29" pos:end="585:34">pSuite</name></expr></argument>, <argument pos:start="585:37" pos:end="585:75"><expr pos:start="585:37" pos:end="585:75"><literal type="string" pos:start="585:37" pos:end="585:75">"Client simple enroll w/ incorrect pwd"</literal></expr></argument>, <argument pos:start="585:78" pos:end="585:89"><expr pos:start="585:78" pos:end="585:89"><name pos:start="585:78" pos:end="585:89">us3612_test3</name></expr></argument>)</argument_list></call><operator pos:start="585:91" pos:end="585:91">)</operator> <operator pos:start="585:93" pos:end="585:94">||</operator>
       <operator pos:start="586:8" pos:end="586:8">(</operator><name pos:start="586:9" pos:end="586:12">NULL</name> <operator pos:start="586:14" pos:end="586:15">==</operator> <call pos:start="586:17" pos:end="586:64"><name pos:start="586:17" pos:end="586:27">CU_add_test</name><argument_list pos:start="586:28" pos:end="586:64">(<argument pos:start="586:29" pos:end="586:34"><expr pos:start="586:29" pos:end="586:34"><name pos:start="586:29" pos:end="586:34">pSuite</name></expr></argument>, <argument pos:start="586:37" pos:end="586:49"><expr pos:start="586:37" pos:end="586:49"><literal type="string" pos:start="586:37" pos:end="586:49">"Keygen Test"</literal></expr></argument>, <argument pos:start="586:52" pos:end="586:63"><expr pos:start="586:52" pos:end="586:63"><name pos:start="586:52" pos:end="586:63">us3612_test4</name></expr></argument>)</argument_list></call><operator pos:start="586:65" pos:end="586:65">)</operator></expr>)</condition>
   <block pos:start="587:4" pos:end="590:4">{<block_content pos:start="588:7" pos:end="589:28">
      <expr_stmt pos:start="588:7" pos:end="588:28"><expr pos:start="588:7" pos:end="588:27"><call pos:start="588:7" pos:end="588:27"><name pos:start="588:7" pos:end="588:25">CU_cleanup_registry</name><argument_list pos:start="588:26" pos:end="588:27">()</argument_list></call></expr>;</expr_stmt>
      <return pos:start="589:7" pos:end="589:28">return <expr pos:start="589:14" pos:end="589:27"><call pos:start="589:14" pos:end="589:27"><name pos:start="589:14" pos:end="589:25">CU_get_error</name><argument_list pos:start="589:26" pos:end="589:27">()</argument_list></call></expr>;</return>
   </block_content>}</block></if></if_stmt>

   <return pos:start="592:4" pos:end="594:0">return <expr pos:start="592:11" pos:end="592:21"><name pos:start="592:11" pos:end="592:21">CUE_SUCCESS</name></expr>;</return>
<cpp:endif pos:start="593:1" pos:end="593:6">#<cpp:directive pos:start="593:2" pos:end="593:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
