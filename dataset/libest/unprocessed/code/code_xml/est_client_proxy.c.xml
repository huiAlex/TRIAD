<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="source_code/est_client_proxy.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="5:3">/* Use WSAAddressToStringA instead of inet_ntop on Windows as inet_ntop does not
 * exist on Windows XP.
 * Can't use `const struct sockaddr *` here because WSAAddressToStringA takes
 * a LPSOCKADDR.
 */</comment>
<function pos:start="6:1" pos:end="57:1"><type pos:start="6:1" pos:end="6:10"><specifier pos:start="6:1" pos:end="6:6">static</specifier> <name pos:start="6:8" pos:end="6:10">int</name></type> <name pos:start="6:12" pos:end="6:22">addr_to_str</name> <parameter_list pos:start="6:24" pos:end="7:49">(<parameter pos:start="6:25" pos:end="6:45"><decl pos:start="6:25" pos:end="6:45"><type pos:start="6:25" pos:end="6:45"><name pos:start="6:25" pos:end="6:39"><name pos:start="6:25" pos:end="6:30">struct</name> <name pos:start="6:32" pos:end="6:39">sockaddr</name></name> <modifier pos:start="6:41" pos:end="6:41">*</modifier></type><name pos:start="6:42" pos:end="6:45">addr</name></decl></parameter>, <parameter pos:start="6:48" pos:end="6:56"><decl pos:start="6:48" pos:end="6:56"><type pos:start="6:48" pos:end="6:56"><name pos:start="6:48" pos:end="6:51">char</name> <modifier pos:start="6:53" pos:end="6:53">*</modifier></type><name pos:start="6:54" pos:end="6:56">str</name></decl></parameter>, <parameter pos:start="6:59" pos:end="6:73"><decl pos:start="6:59" pos:end="6:73"><type pos:start="6:59" pos:end="6:73"><name pos:start="6:59" pos:end="6:64">size_t</name></type> <name pos:start="6:66" pos:end="6:73">str_size</name></decl></parameter>,
                        <parameter pos:start="7:25" pos:end="7:48"><decl pos:start="7:25" pos:end="7:48"><type pos:start="7:25" pos:end="7:48"><name pos:start="7:25" pos:end="7:32">unsigned</name> <name pos:start="7:34" pos:end="7:38">short</name> <name pos:start="7:40" pos:end="7:42">int</name> <modifier pos:start="7:44" pos:end="7:44">*</modifier></type><name pos:start="7:45" pos:end="7:48">port</name></decl></parameter>)</parameter_list>
<block pos:start="8:1" pos:end="57:1">{<block_content pos:start="9:5" pos:end="56:15">
    <decl_stmt pos:start="9:5" pos:end="11:0"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:16">= <expr pos:start="9:15" pos:end="9:16"><operator pos:start="9:15" pos:end="9:15">-</operator><literal type="number" pos:start="9:16" pos:end="9:16">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:start="10:1" pos:end="10:12">#<cpp:directive pos:start="10:2" pos:end="10:6">ifdef</cpp:directive> <name pos:start="10:8" pos:end="10:12">WIN32</name></cpp:ifdef>
    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:9">DWORD</name></type> <name pos:start="11:11" pos:end="11:21">dw_str_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:24"><decl pos:start="12:5" pos:end="12:23"><type pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:10">size_t</name></type> <name pos:start="12:12" pos:end="12:19">addr_len</name> <init pos:start="12:21" pos:end="12:23">= <expr pos:start="12:23" pos:end="12:23"><literal type="number" pos:start="12:23" pos:end="12:23">0</literal></expr></init></decl>;</decl_stmt>

    <switch pos:start="14:5" pos:end="25:5">switch <condition pos:start="14:12" pos:end="14:28">(<expr pos:start="14:13" pos:end="14:27"><name pos:start="14:13" pos:end="14:27"><name pos:start="14:13" pos:end="14:16">addr</name><operator pos:start="14:17" pos:end="14:18">-&gt;</operator><name pos:start="14:19" pos:end="14:27">sa_family</name></name></expr>)</condition> <block pos:start="14:30" pos:end="25:5">{<block_content pos:start="15:9" pos:end="24:18">
        <case pos:start="15:9" pos:end="15:21">case <expr pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:20">AF_INET</name></expr>:</case>
            <expr_stmt pos:start="16:13" pos:end="16:50"><expr pos:start="16:13" pos:end="16:49"><name pos:start="16:13" pos:end="16:20">addr_len</name> <operator pos:start="16:22" pos:end="16:22">=</operator> <sizeof pos:start="16:24" pos:end="16:49">sizeof<argument_list pos:start="16:30" pos:end="16:49">(<argument pos:start="16:31" pos:end="16:48"><expr pos:start="16:31" pos:end="16:48">struct <name pos:start="16:38" pos:end="16:48">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt pos:start="17:13" pos:end="17:66"><expr pos:start="17:13" pos:end="17:65"><operator pos:start="17:13" pos:end="17:13">*</operator><name pos:start="17:14" pos:end="17:17">port</name> <operator pos:start="17:19" pos:end="17:19">=</operator> <call pos:start="17:21" pos:end="17:65"><name pos:start="17:21" pos:end="17:25">ntohs</name><argument_list pos:start="17:26" pos:end="17:65">(<argument pos:start="17:27" pos:end="17:64"><expr pos:start="17:27" pos:end="17:64"><operator pos:start="17:27" pos:end="17:27">(</operator><operator pos:start="17:28" pos:end="17:28">(</operator>struct <name pos:start="17:36" pos:end="17:46">sockaddr_in</name> <operator pos:start="17:48" pos:end="17:48">*</operator><operator pos:start="17:49" pos:end="17:49">)</operator><name pos:start="17:50" pos:end="17:53">addr</name><operator pos:start="17:54" pos:end="17:54">)</operator><operator pos:start="17:55" pos:end="17:56">-&gt;</operator><name pos:start="17:57" pos:end="17:64">sin_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="18:13" pos:end="18:18">break;</break>
        <case pos:start="19:9" pos:end="19:22">case <expr pos:start="19:14" pos:end="19:21"><name pos:start="19:14" pos:end="19:21">AF_INET6</name></expr>:</case>
            <expr_stmt pos:start="20:13" pos:end="20:51"><expr pos:start="20:13" pos:end="20:50"><name pos:start="20:13" pos:end="20:20">addr_len</name> <operator pos:start="20:22" pos:end="20:22">=</operator> <sizeof pos:start="20:24" pos:end="20:50">sizeof<argument_list pos:start="20:30" pos:end="20:50">(<argument pos:start="20:31" pos:end="20:49"><expr pos:start="20:31" pos:end="20:49">struct <name pos:start="20:38" pos:end="20:49">sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt pos:start="21:13" pos:end="21:68"><expr pos:start="21:13" pos:end="21:67"><operator pos:start="21:13" pos:end="21:13">*</operator><name pos:start="21:14" pos:end="21:17">port</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:67"><name pos:start="21:21" pos:end="21:25">ntohs</name><argument_list pos:start="21:26" pos:end="21:67">(<argument pos:start="21:27" pos:end="21:66"><expr pos:start="21:27" pos:end="21:66"><operator pos:start="21:27" pos:end="21:27">(</operator><operator pos:start="21:28" pos:end="21:28">(</operator>struct <name pos:start="21:36" pos:end="21:47">sockaddr_in6</name> <operator pos:start="21:49" pos:end="21:49">*</operator><operator pos:start="21:50" pos:end="21:50">)</operator><name pos:start="21:51" pos:end="21:54">addr</name><operator pos:start="21:55" pos:end="21:55">)</operator><operator pos:start="21:56" pos:end="21:57">-&gt;</operator><name pos:start="21:58" pos:end="21:66">sin6_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="22:13" pos:end="22:18">break;</break>
        <default pos:start="23:9" pos:end="23:16">default:</default>
            <break pos:start="24:13" pos:end="24:18">break;</break>
    </block_content>}</block></switch>
    <expr_stmt pos:start="26:5" pos:end="26:27"><expr pos:start="26:5" pos:end="26:26"><name pos:start="26:5" pos:end="26:15">dw_str_size</name> <operator pos:start="26:17" pos:end="26:17">=</operator> <name pos:start="26:19" pos:end="26:26">str_size</name></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="32:0"><if pos:start="27:5" pos:end="32:0">if <condition pos:start="27:8" pos:end="28:86">(<expr pos:start="27:9" pos:end="28:85"><name pos:start="27:9" pos:end="27:16">addr_len</name> <operator pos:start="27:18" pos:end="27:19">!=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal> <operator pos:start="27:23" pos:end="27:24">&amp;&amp;</operator>
            <call pos:start="28:13" pos:end="28:80"><name pos:start="28:13" pos:end="28:31">WSAAddressToStringW</name><argument_list pos:start="28:32" pos:end="28:80">(<argument pos:start="28:33" pos:end="28:36"><expr pos:start="28:33" pos:end="28:36"><name pos:start="28:33" pos:end="28:36">addr</name></expr></argument>, <argument pos:start="28:39" pos:end="28:46"><expr pos:start="28:39" pos:end="28:46"><name pos:start="28:39" pos:end="28:46">addr_len</name></expr></argument>, <argument pos:start="28:49" pos:end="28:52"><expr pos:start="28:49" pos:end="28:52"><name pos:start="28:49" pos:end="28:52">NULL</name></expr></argument>, <argument pos:start="28:55" pos:end="28:65"><expr pos:start="28:55" pos:end="28:65"><operator pos:start="28:55" pos:end="28:55">(</operator><name pos:start="28:56" pos:end="28:61">LPWSTR</name><operator pos:start="28:62" pos:end="28:62">)</operator><name pos:start="28:63" pos:end="28:65">str</name></expr></argument>, <argument pos:start="28:68" pos:end="28:79"><expr pos:start="28:68" pos:end="28:79"><operator pos:start="28:68" pos:end="28:68">&amp;</operator><name pos:start="28:69" pos:end="28:79">dw_str_size</name></expr></argument>)</argument_list></call> <operator pos:start="28:82" pos:end="28:83">==</operator> <literal type="number" pos:start="28:85" pos:end="28:85">0</literal></expr>)</condition> <block pos:start="28:88" pos:end="32:0">{<block_content pos:start="29:9" pos:end="29:16">
        <expr_stmt pos:start="29:9" pos:end="29:16"><expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else pos:start="31:1" pos:end="31:5">#<cpp:directive pos:start="31:2" pos:end="31:5">else</cpp:directive></cpp:else>
    <switch pos:start="32:5" pos:end="55:0">switch <condition pos:start="32:12" pos:end="32:28">(<expr pos:start="32:13" pos:end="32:27"><name pos:start="32:13" pos:end="32:27"><name pos:start="32:13" pos:end="32:16">addr</name><operator pos:start="32:17" pos:end="32:18">-&gt;</operator><name pos:start="32:19" pos:end="32:27">sa_family</name></name></expr>)</condition> <block pos:start="32:30" pos:end="55:0">{<block_content pos:start="33:9" pos:end="52:18">
        <case pos:start="33:9" pos:end="33:21">case <expr pos:start="33:14" pos:end="33:20"><name pos:start="33:14" pos:end="33:20">AF_INET</name></expr>:</case>
            <expr_stmt pos:start="34:13" pos:end="34:66"><expr pos:start="34:13" pos:end="34:65"><operator pos:start="34:13" pos:end="34:13">*</operator><name pos:start="34:14" pos:end="34:17">port</name> <operator pos:start="34:19" pos:end="34:19">=</operator> <call pos:start="34:21" pos:end="34:65"><name pos:start="34:21" pos:end="34:25">ntohs</name><argument_list pos:start="34:26" pos:end="34:65">(<argument pos:start="34:27" pos:end="34:64"><expr pos:start="34:27" pos:end="34:64"><operator pos:start="34:27" pos:end="34:27">(</operator><operator pos:start="34:28" pos:end="34:28">(</operator>struct <name pos:start="34:36" pos:end="34:46">sockaddr_in</name> <operator pos:start="34:48" pos:end="34:48">*</operator><operator pos:start="34:49" pos:end="34:49">)</operator><name pos:start="34:50" pos:end="34:53">addr</name><operator pos:start="34:54" pos:end="34:54">)</operator><operator pos:start="34:55" pos:end="34:56">-&gt;</operator><name pos:start="34:57" pos:end="34:64">sin_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="35:13" pos:end="40:13"><if pos:start="35:13" pos:end="40:13">if <condition pos:start="35:16" pos:end="38:30">(<expr pos:start="35:17" pos:end="38:29"><call pos:start="35:17" pos:end="38:29"><name pos:start="35:17" pos:end="35:25">inet_ntop</name><argument_list pos:start="35:26" pos:end="38:29">(<argument pos:start="35:27" pos:end="35:41"><expr pos:start="35:27" pos:end="35:41"><name pos:start="35:27" pos:end="35:41"><name pos:start="35:27" pos:end="35:30">addr</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:41">sa_family</name></name></expr></argument>,
                    <argument pos:start="36:21" pos:end="36:59"><expr pos:start="36:21" pos:end="36:59"><operator pos:start="36:21" pos:end="36:21">&amp;</operator><operator pos:start="36:22" pos:end="36:22">(</operator><operator pos:start="36:23" pos:end="36:23">(</operator>struct <name pos:start="36:31" pos:end="36:41">sockaddr_in</name> <operator pos:start="36:43" pos:end="36:43">*</operator><operator pos:start="36:44" pos:end="36:44">)</operator><name pos:start="36:45" pos:end="36:48">addr</name><operator pos:start="36:49" pos:end="36:49">)</operator><operator pos:start="36:50" pos:end="36:51">-&gt;</operator><name pos:start="36:52" pos:end="36:59">sin_addr</name></expr></argument>,
                    <argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">str</name></expr></argument>,
                    <argument pos:start="38:21" pos:end="38:28"><expr pos:start="38:21" pos:end="38:28"><name pos:start="38:21" pos:end="38:28">str_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="38:32" pos:end="40:13">{<block_content pos:start="39:17" pos:end="39:24">
                <expr_stmt pos:start="39:17" pos:end="39:24"><expr pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:19">ret</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break pos:start="41:13" pos:end="41:18">break;</break>
        <case pos:start="42:9" pos:end="42:22">case <expr pos:start="42:14" pos:end="42:21"><name pos:start="42:14" pos:end="42:21">AF_INET6</name></expr>:</case>
            <expr_stmt pos:start="43:13" pos:end="43:68"><expr pos:start="43:13" pos:end="43:67"><operator pos:start="43:13" pos:end="43:13">*</operator><name pos:start="43:14" pos:end="43:17">port</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <call pos:start="43:21" pos:end="43:67"><name pos:start="43:21" pos:end="43:25">ntohs</name><argument_list pos:start="43:26" pos:end="43:67">(<argument pos:start="43:27" pos:end="43:66"><expr pos:start="43:27" pos:end="43:66"><operator pos:start="43:27" pos:end="43:27">(</operator><operator pos:start="43:28" pos:end="43:28">(</operator>struct <name pos:start="43:36" pos:end="43:47">sockaddr_in6</name> <operator pos:start="43:49" pos:end="43:49">*</operator><operator pos:start="43:50" pos:end="43:50">)</operator><name pos:start="43:51" pos:end="43:54">addr</name><operator pos:start="43:55" pos:end="43:55">)</operator><operator pos:start="43:56" pos:end="43:57">-&gt;</operator><name pos:start="43:58" pos:end="43:66">sin6_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="44:13" pos:end="49:13"><if pos:start="44:13" pos:end="49:13">if <condition pos:start="44:16" pos:end="47:30">(<expr pos:start="44:17" pos:end="47:29"><call pos:start="44:17" pos:end="47:29"><name pos:start="44:17" pos:end="44:25">inet_ntop</name><argument_list pos:start="44:26" pos:end="47:29">(<argument pos:start="44:27" pos:end="44:41"><expr pos:start="44:27" pos:end="44:41"><name pos:start="44:27" pos:end="44:41"><name pos:start="44:27" pos:end="44:30">addr</name><operator pos:start="44:31" pos:end="44:32">-&gt;</operator><name pos:start="44:33" pos:end="44:41">sa_family</name></name></expr></argument>,
                    <argument pos:start="45:21" pos:end="45:61"><expr pos:start="45:21" pos:end="45:61"><operator pos:start="45:21" pos:end="45:21">&amp;</operator><operator pos:start="45:22" pos:end="45:22">(</operator><operator pos:start="45:23" pos:end="45:23">(</operator>struct <name pos:start="45:31" pos:end="45:42">sockaddr_in6</name> <operator pos:start="45:44" pos:end="45:44">*</operator><operator pos:start="45:45" pos:end="45:45">)</operator><name pos:start="45:46" pos:end="45:49">addr</name><operator pos:start="45:50" pos:end="45:50">)</operator><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:61">sin6_addr</name></expr></argument>,
                    <argument pos:start="46:21" pos:end="46:23"><expr pos:start="46:21" pos:end="46:23"><name pos:start="46:21" pos:end="46:23">str</name></expr></argument>,
                    <argument pos:start="47:21" pos:end="47:28"><expr pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:28">str_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:32" pos:end="49:13">{<block_content pos:start="48:17" pos:end="48:24">
                <expr_stmt pos:start="48:17" pos:end="48:24"><expr pos:start="48:17" pos:end="48:23"><name pos:start="48:17" pos:end="48:19">ret</name> <operator pos:start="48:21" pos:end="48:21">=</operator> <literal type="number" pos:start="48:23" pos:end="48:23">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break pos:start="50:13" pos:end="50:18">break;</break>
        <default pos:start="51:9" pos:end="51:16">default:</default>
            <break pos:start="52:13" pos:end="52:18">break;</break>
    </block_content>}</block></switch>
<cpp:endif pos:start="54:1" pos:end="54:6">#<cpp:directive pos:start="54:2" pos:end="54:6">endif</cpp:directive></cpp:endif>

    <return pos:start="56:5" pos:end="56:15">return <expr pos:start="56:12" pos:end="56:14"><name pos:start="56:12" pos:end="56:14">ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="58:1" pos:end="62:3">/* Use WSAAddressToStringA instead of inet_ntop on Windows as inet_ntop does not
 * exist on Windows XP.
 * Can't use `const struct sockaddr *` here because WSAAddressToStringA takes
 * a LPSOCKADDR.
 */</comment>
<function pos:start="63:1" pos:end="77:1"><type pos:start="63:1" pos:end="63:16"><specifier pos:start="63:1" pos:end="63:6">static</specifier> <name pos:start="63:8" pos:end="63:16">tcw_err_t</name></type> <name pos:start="63:18" pos:end="63:33">tcw_direct_close</name> <parameter_list pos:start="63:35" pos:end="63:52">(<parameter pos:start="63:36" pos:end="63:51"><decl pos:start="63:36" pos:end="63:51"><type pos:start="63:36" pos:end="63:47"><name pos:start="63:36" pos:end="63:45">tcw_sock_t</name> <modifier pos:start="63:47" pos:end="63:47">*</modifier></type><name pos:start="63:48" pos:end="63:51">sock</name></decl></parameter>)</parameter_list>
<block pos:start="64:1" pos:end="77:1">{<block_content pos:start="65:5" pos:end="76:15">
    <decl_stmt pos:start="65:5" pos:end="65:27"><decl pos:start="65:5" pos:end="65:26"><type pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:13">tcw_err_t</name></type> <name pos:start="65:15" pos:end="65:17">ret</name> <init pos:start="65:19" pos:end="65:26">= <expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:26">TCW_OK</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="67:5" pos:end="72:5"><if pos:start="67:5" pos:end="72:5">if <condition pos:start="67:8" pos:end="67:41">(<expr pos:start="67:9" pos:end="67:40"><call pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:20">CLOSE_SOCKET</name><argument_list pos:start="67:21" pos:end="67:35">(<argument pos:start="67:22" pos:end="67:34"><expr pos:start="67:22" pos:end="67:34"><name pos:start="67:22" pos:end="67:34"><name pos:start="67:22" pos:end="67:25">sock</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:34">sock_fd</name></name></expr></argument>)</argument_list></call> <operator pos:start="67:37" pos:end="67:38">!=</operator> <literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr>)</condition> <block pos:start="67:43" pos:end="72:5">{<block_content pos:start="68:9" pos:end="71:18">
        <expr_stmt pos:start="68:9" pos:end="68:56"><expr pos:start="68:9" pos:end="68:55"><call pos:start="68:9" pos:end="68:55"><name pos:start="68:9" pos:end="68:19">EST_LOG_ERR</name><argument_list pos:start="68:20" pos:end="68:55">(<argument pos:start="68:21" pos:end="68:38"><expr pos:start="68:21" pos:end="68:38"><literal type="string" pos:start="68:21" pos:end="68:38">"close failed: %d"</literal></expr></argument>, <argument pos:start="68:41" pos:end="68:54"><expr pos:start="68:41" pos:end="68:54"><call pos:start="68:41" pos:end="68:54"><name pos:start="68:41" pos:end="68:52">GET_SOCK_ERR</name><argument_list pos:start="68:53" pos:end="68:54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:27">TCW_ERR_CLOSE</name></expr>;</expr_stmt>
        <comment type="block" pos:start="70:9" pos:end="70:34">/* SOCK_ERR already set */</comment>
        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:17"><name pos:start="73:5" pos:end="73:8">sock</name><operator pos:start="73:9" pos:end="73:10">-&gt;</operator><name pos:start="73:11" pos:end="73:17">sock_fd</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:32">SOCK_INVALID</name></expr>;</expr_stmt>

<label pos:start="75:1" pos:end="75:5"><name pos:start="75:1" pos:end="75:4">done</name>:</label>
    <return pos:start="76:5" pos:end="76:15">return <expr pos:start="76:12" pos:end="76:14"><name pos:start="76:12" pos:end="76:14">ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="78:1" pos:end="81:3">/*
 * Establish a direct socket connection with the EST server using
 * normal system calls
 */</comment>
<function pos:start="82:1" pos:end="165:1"><type pos:start="82:1" pos:end="82:16"><specifier pos:start="82:1" pos:end="82:6">static</specifier> <name pos:start="82:8" pos:end="82:16">tcw_err_t</name></type> <name pos:start="82:18" pos:end="82:35">tcw_direct_connect</name> <parameter_list pos:start="82:37" pos:end="83:80">(<parameter pos:start="82:38" pos:end="82:53"><decl pos:start="82:38" pos:end="82:53"><type pos:start="82:38" pos:end="82:53"><name pos:start="82:38" pos:end="82:47">tcw_sock_t</name> <modifier pos:start="82:49" pos:end="82:49">*</modifier></type><name pos:start="82:50" pos:end="82:53">sock</name></decl></parameter>, <parameter pos:start="82:56" pos:end="82:71"><decl pos:start="82:56" pos:end="82:71"><type pos:start="82:56" pos:end="82:71"><name pos:start="82:56" pos:end="82:65">tcw_opts_t</name> <modifier pos:start="82:67" pos:end="82:67">*</modifier></type><name pos:start="82:68" pos:end="82:71">opts</name></decl></parameter>,
                                      <parameter pos:start="83:39" pos:end="83:54"><decl pos:start="83:39" pos:end="83:54"><type pos:start="83:39" pos:end="83:54"><specifier pos:start="83:39" pos:end="83:43">const</specifier> <name pos:start="83:45" pos:end="83:48">char</name> <modifier pos:start="83:50" pos:end="83:50">*</modifier></type><name pos:start="83:51" pos:end="83:54">host</name></decl></parameter>, <parameter pos:start="83:57" pos:end="83:79"><decl pos:start="83:57" pos:end="83:79"><type pos:start="83:57" pos:end="83:79"><name pos:start="83:57" pos:end="83:64">unsigned</name> <name pos:start="83:66" pos:end="83:70">short</name> <name pos:start="83:72" pos:end="83:74">int</name></type> <name pos:start="83:76" pos:end="83:79">port</name></decl></parameter>)</parameter_list>
<block pos:start="84:1" pos:end="165:1">{<block_content pos:start="85:5" pos:end="164:15">
    <decl_stmt pos:start="85:5" pos:end="85:27"><decl pos:start="85:5" pos:end="85:26"><type pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:13">tcw_err_t</name></type> <name pos:start="85:15" pos:end="85:17">ret</name> <init pos:start="85:19" pos:end="85:26">= <expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">TCW_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="86:5" pos:end="86:34"><decl pos:start="86:5" pos:end="86:33"><type pos:start="86:5" pos:end="86:21"><name pos:start="86:5" pos:end="86:19"><name pos:start="86:5" pos:end="86:10">struct</name> <name pos:start="86:12" pos:end="86:19">addrinfo</name></name> <modifier pos:start="86:21" pos:end="86:21">*</modifier></type><name pos:start="86:22" pos:end="86:26">addrs</name> <init pos:start="86:28" pos:end="86:33">= <expr pos:start="86:30" pos:end="86:33"><name pos:start="86:30" pos:end="86:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="87:5" pos:end="87:30"><decl pos:start="87:5" pos:end="87:29"><type pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:10">struct</name> <name pos:start="87:12" pos:end="87:19">addrinfo</name></name> <modifier pos:start="87:21" pos:end="87:21">*</modifier></type><name pos:start="87:22" pos:end="87:29">cur_addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="88:5" pos:end="88:17"><decl pos:start="88:5" pos:end="88:16"><type pos:start="88:5" pos:end="88:13"><name pos:start="88:5" pos:end="88:13">SOCK_TYPE</name></type> <name pos:start="88:15" pos:end="88:16">fd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="89:5" pos:end="89:12"><decl pos:start="89:5" pos:end="89:11"><type pos:start="89:5" pos:end="89:7"><name pos:start="89:5" pos:end="89:7">int</name></type> <name pos:start="89:9" pos:end="89:11">err</name></decl>;</decl_stmt>
    <decl_stmt pos:start="90:5" pos:end="90:18"><decl pos:start="90:5" pos:end="90:17"><type pos:start="90:5" pos:end="90:7"><name pos:start="90:5" pos:end="90:7">int</name></type> <name pos:start="90:9" pos:end="90:17">saved_err</name></decl>;</decl_stmt>
    <decl_stmt pos:start="91:5" pos:end="91:22"><decl pos:start="91:5" pos:end="91:21"><type pos:start="91:5" pos:end="91:8"><name pos:start="91:5" pos:end="91:8">char</name></type> <name pos:start="91:10" pos:end="91:21"><name pos:start="91:10" pos:end="91:17">port_str</name><index pos:start="91:18" pos:end="91:21">[<expr pos:start="91:19" pos:end="91:20"><literal type="number" pos:start="91:19" pos:end="91:20">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="92:5" pos:end="92:41"><decl pos:start="92:5" pos:end="92:40"><type pos:start="92:5" pos:end="92:8"><name pos:start="92:5" pos:end="92:8">char</name></type> <name pos:start="92:10" pos:end="92:40"><name pos:start="92:10" pos:end="92:22">sock_addr_str</name><index pos:start="92:23" pos:end="92:40">[<expr pos:start="92:24" pos:end="92:39"><name pos:start="92:24" pos:end="92:39">INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="93:5" pos:end="93:33"><decl pos:start="93:5" pos:end="93:32"><type pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:12">unsigned</name> <name pos:start="93:14" pos:end="93:18">short</name> <name pos:start="93:20" pos:end="93:22">int</name></type> <name pos:start="93:24" pos:end="93:32">sock_port</name></decl>;</decl_stmt>
    <decl_stmt pos:start="94:5" pos:end="94:34"><decl pos:start="94:5" pos:end="94:33"><type pos:start="94:5" pos:end="94:19"><name pos:start="94:5" pos:end="94:19"><name pos:start="94:5" pos:end="94:10">struct</name> <name pos:start="94:12" pos:end="94:19">addrinfo</name></name></type> <name pos:start="94:21" pos:end="94:25">hints</name> <init pos:start="94:27" pos:end="94:33">= <expr pos:start="94:29" pos:end="94:33"><block pos:start="94:29" pos:end="94:33">{ <expr pos:start="94:31" pos:end="94:31"><literal type="number" pos:start="94:31" pos:end="94:31">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="95:5" pos:end="95:10"><decl pos:start="95:5" pos:end="95:9"><type pos:start="95:5" pos:end="95:7"><name pos:start="95:5" pos:end="95:7">int</name></type> <name pos:start="95:9" pos:end="95:9">n</name></decl>;</decl_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:36"><expr pos:start="97:5" pos:end="97:35"><name pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:9">hints</name><operator pos:start="97:10" pos:end="97:10">.</operator><name pos:start="97:11" pos:end="97:21">ai_socktype</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:35">SOCK_STREAM</name></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:38"><expr pos:start="98:5" pos:end="98:37"><name pos:start="98:5" pos:end="98:18"><name pos:start="98:5" pos:end="98:9">hints</name><operator pos:start="98:10" pos:end="98:10">.</operator><name pos:start="98:11" pos:end="98:18">ai_flags</name></name>    <operator pos:start="98:23" pos:end="98:23">=</operator> <name pos:start="98:25" pos:end="98:37">AI_ADDRCONFIG</name></expr>;</expr_stmt>

    <expr_stmt pos:start="100:5" pos:end="100:58"><expr pos:start="100:5" pos:end="100:57"><name pos:start="100:5" pos:end="100:5">n</name> <operator pos:start="100:7" pos:end="100:7">=</operator> <call pos:start="100:9" pos:end="100:57"><name pos:start="100:9" pos:end="100:16">snprintf</name><argument_list pos:start="100:17" pos:end="100:57">(<argument pos:start="100:18" pos:end="100:25"><expr pos:start="100:18" pos:end="100:25"><name pos:start="100:18" pos:end="100:25">port_str</name></expr></argument>, <argument pos:start="100:28" pos:end="100:43"><expr pos:start="100:28" pos:end="100:43"><sizeof pos:start="100:28" pos:end="100:43">sizeof<argument_list pos:start="100:34" pos:end="100:43">(<argument pos:start="100:35" pos:end="100:42"><expr pos:start="100:35" pos:end="100:42"><name pos:start="100:35" pos:end="100:42">port_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="100:46" pos:end="100:50"><expr pos:start="100:46" pos:end="100:50"><literal type="string" pos:start="100:46" pos:end="100:50">"%hu"</literal></expr></argument>, <argument pos:start="100:53" pos:end="100:56"><expr pos:start="100:53" pos:end="100:56"><name pos:start="100:53" pos:end="100:56">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:44">(<expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:9">n</name> <operator pos:start="101:11" pos:end="101:11">&lt;</operator> <literal type="number" pos:start="101:13" pos:end="101:13">0</literal> <operator pos:start="101:15" pos:end="101:16">||</operator> <name pos:start="101:18" pos:end="101:18">n</name> <operator pos:start="101:20" pos:end="101:21">&gt;=</operator> <operator pos:start="101:23" pos:end="101:23">(</operator><name pos:start="101:24" pos:end="101:26">int</name><operator pos:start="101:27" pos:end="101:27">)</operator><sizeof pos:start="101:28" pos:end="101:43">sizeof<argument_list pos:start="101:34" pos:end="101:43">(<argument pos:start="101:35" pos:end="101:42"><expr pos:start="101:35" pos:end="101:42"><name pos:start="101:35" pos:end="101:42">port_str</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="101:46" pos:end="105:5">{<block_content pos:start="102:9" pos:end="104:18">
        <expr_stmt pos:start="102:9" pos:end="102:23"><expr pos:start="102:9" pos:end="102:22"><name pos:start="102:9" pos:end="102:13">errno</name> <operator pos:start="102:15" pos:end="102:15">=</operator> <name pos:start="102:17" pos:end="102:22">ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt pos:start="103:9" pos:end="103:28"><expr pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <name pos:start="103:15" pos:end="103:27">TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto pos:start="104:9" pos:end="104:18">goto <name pos:start="104:14" pos:end="104:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="106:5" pos:end="106:56"><expr pos:start="106:5" pos:end="106:55"><call pos:start="106:5" pos:end="106:55"><name pos:start="106:5" pos:end="106:16">EST_LOG_INFO</name><argument_list pos:start="106:17" pos:end="106:55">(<argument pos:start="106:18" pos:end="106:38"><expr pos:start="106:18" pos:end="106:38"><literal type="string" pos:start="106:18" pos:end="106:38">"getaddrinfo(%s, %s)"</literal></expr></argument>, <argument pos:start="106:41" pos:end="106:44"><expr pos:start="106:41" pos:end="106:44"><name pos:start="106:41" pos:end="106:44">host</name></expr></argument>, <argument pos:start="106:47" pos:end="106:54"><expr pos:start="106:47" pos:end="106:54"><name pos:start="106:47" pos:end="106:54">port_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="107:5" pos:end="127:5"><if pos:start="107:5" pos:end="127:5">if <condition pos:start="107:8" pos:end="107:65">(<expr pos:start="107:9" pos:end="107:64"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:12">err</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:58"><name pos:start="107:16" pos:end="107:26">getaddrinfo</name><argument_list pos:start="107:27" pos:end="107:58">(<argument pos:start="107:28" pos:end="107:31"><expr pos:start="107:28" pos:end="107:31"><name pos:start="107:28" pos:end="107:31">host</name></expr></argument>, <argument pos:start="107:34" pos:end="107:41"><expr pos:start="107:34" pos:end="107:41"><name pos:start="107:34" pos:end="107:41">port_str</name></expr></argument>, <argument pos:start="107:44" pos:end="107:49"><expr pos:start="107:44" pos:end="107:49"><operator pos:start="107:44" pos:end="107:44">&amp;</operator><name pos:start="107:45" pos:end="107:49">hints</name></expr></argument>, <argument pos:start="107:52" pos:end="107:57"><expr pos:start="107:52" pos:end="107:57"><operator pos:start="107:52" pos:end="107:52">&amp;</operator><name pos:start="107:53" pos:end="107:57">addrs</name></expr></argument>)</argument_list></call><operator pos:start="107:59" pos:end="107:59">)</operator> <operator pos:start="107:61" pos:end="107:62">!=</operator> <literal type="number" pos:start="107:64" pos:end="107:64">0</literal></expr>)</condition> <block pos:start="107:67" pos:end="127:5">{<block_content pos:start="108:9" pos:end="126:18">
        <expr_stmt pos:start="108:9" pos:end="108:75"><expr pos:start="108:9" pos:end="108:74"><call pos:start="108:9" pos:end="108:74"><name pos:start="108:9" pos:end="108:19">EST_LOG_ERR</name><argument_list pos:start="108:20" pos:end="108:74">(<argument pos:start="108:21" pos:end="108:49"><expr pos:start="108:21" pos:end="108:49"><literal type="string" pos:start="108:21" pos:end="108:49">"getaddrinfo returned %d: %s"</literal></expr></argument>, <argument pos:start="108:52" pos:end="108:54"><expr pos:start="108:52" pos:end="108:54"><name pos:start="108:52" pos:end="108:54">err</name></expr></argument>, <argument pos:start="108:57" pos:end="108:73"><expr pos:start="108:57" pos:end="108:73"><call pos:start="108:57" pos:end="108:73"><name pos:start="108:57" pos:end="108:68">gai_strerror</name><argument_list pos:start="108:69" pos:end="108:73">(<argument pos:start="108:70" pos:end="108:72"><expr pos:start="108:70" pos:end="108:72"><name pos:start="108:70" pos:end="108:72">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="109:9" pos:end="113:0"><expr pos:start="109:9" pos:end="109:28"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <name pos:start="109:15" pos:end="109:28">TCW_ERR_RESOLV</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="110:1" pos:end="110:12">#<cpp:directive pos:start="110:2" pos:end="110:6">ifdef</cpp:directive> <name pos:start="110:8" pos:end="110:12">WIN32</name></cpp:ifdef>
        <comment type="block" pos:start="111:9" pos:end="111:34">/* SOCK_ERR already set */</comment>
<cpp:else pos:start="112:1" pos:end="112:5">#<cpp:directive pos:start="112:2" pos:end="112:5">else</cpp:directive></cpp:else>
        <switch pos:start="113:9" pos:end="126:0">switch <condition pos:start="113:16" pos:end="113:20">(<expr pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">err</name></expr>)</condition> <block pos:start="113:22" pos:end="126:0">{<block_content pos:start="114:13" pos:end="123:22">
            <case pos:start="114:13" pos:end="114:28">case <expr pos:start="114:18" pos:end="114:27"><name pos:start="114:18" pos:end="114:27">EAI_SYSTEM</name></expr>:</case>
                <comment type="block" pos:start="115:17" pos:end="115:42">/* SOCK_ERR already set */</comment>
                <break pos:start="116:17" pos:end="116:22">break;</break>
            <case pos:start="117:13" pos:end="117:28">case <expr pos:start="117:18" pos:end="117:27"><name pos:start="117:18" pos:end="117:27">EAI_MEMORY</name></expr>:</case>
                <expr_stmt pos:start="118:17" pos:end="118:37"><expr pos:start="118:17" pos:end="118:36"><call pos:start="118:17" pos:end="118:36"><name pos:start="118:17" pos:end="118:34">SET_SOCK_ERR_NOMEM</name><argument_list pos:start="118:35" pos:end="118:36">()</argument_list></call></expr>;</expr_stmt>
                <break pos:start="119:17" pos:end="119:22">break;</break>
            <default pos:start="120:13" pos:end="120:20">default:</default>
                <comment type="block" pos:start="121:17" pos:end="121:44">/* Could not resolve host */</comment>
                <expr_stmt pos:start="122:17" pos:end="122:38"><expr pos:start="122:17" pos:end="122:37"><call pos:start="122:17" pos:end="122:37"><name pos:start="122:17" pos:end="122:35">SET_SOCK_ERR_NONAME</name><argument_list pos:start="122:36" pos:end="122:37">()</argument_list></call></expr>;</expr_stmt>
                <break pos:start="123:17" pos:end="123:22">break;</break>
        </block_content>}</block></switch>
<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>
        <goto pos:start="126:9" pos:end="126:18">goto <name pos:start="126:14" pos:end="126:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="128:5" pos:end="128:21"><expr pos:start="128:5" pos:end="128:20"><name pos:start="128:5" pos:end="128:12">cur_addr</name> <operator pos:start="128:14" pos:end="128:14">=</operator> <name pos:start="128:16" pos:end="128:20">addrs</name></expr>;</expr_stmt>
    <while pos:start="129:5" pos:end="156:5">while <condition pos:start="129:11" pos:end="129:20">(<expr pos:start="129:12" pos:end="129:19"><name pos:start="129:12" pos:end="129:19">cur_addr</name></expr>)</condition> <block pos:start="129:22" pos:end="156:5">{<block_content pos:start="130:9" pos:end="155:14">
        <expr_stmt pos:start="130:9" pos:end="130:21"><expr pos:start="130:9" pos:end="130:20"><name pos:start="130:9" pos:end="130:11">ret</name> <operator pos:start="130:13" pos:end="130:13">=</operator> <name pos:start="130:15" pos:end="130:20">TCW_OK</name></expr>;</expr_stmt>
        <expr_stmt pos:start="131:9" pos:end="131:67"><expr pos:start="131:9" pos:end="131:66"><name pos:start="131:9" pos:end="131:10">fd</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <call pos:start="131:14" pos:end="131:66"><name pos:start="131:14" pos:end="131:19">socket</name><argument_list pos:start="131:20" pos:end="131:66">(<argument pos:start="131:21" pos:end="131:39"><expr pos:start="131:21" pos:end="131:39"><name pos:start="131:21" pos:end="131:39"><name pos:start="131:21" pos:end="131:28">cur_addr</name><operator pos:start="131:29" pos:end="131:30">-&gt;</operator><name pos:start="131:31" pos:end="131:39">ai_family</name></name></expr></argument>, <argument pos:start="131:42" pos:end="131:52"><expr pos:start="131:42" pos:end="131:52"><name pos:start="131:42" pos:end="131:52">SOCK_STREAM</name></expr></argument>, <argument pos:start="131:55" pos:end="131:65"><expr pos:start="131:55" pos:end="131:65"><name pos:start="131:55" pos:end="131:65">IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="132:9" pos:end="137:9"><if pos:start="132:9" pos:end="137:9">if <condition pos:start="132:12" pos:end="132:19">(<expr pos:start="132:13" pos:end="132:18"><name pos:start="132:13" pos:end="132:14">fd</name> <operator pos:start="132:16" pos:end="132:16">&lt;</operator> <literal type="number" pos:start="132:18" pos:end="132:18">0</literal></expr>)</condition> <block pos:start="132:21" pos:end="137:9">{<block_content pos:start="133:13" pos:end="136:21">
            <expr_stmt pos:start="133:13" pos:end="133:62"><expr pos:start="133:13" pos:end="133:61"><call pos:start="133:13" pos:end="133:61"><name pos:start="133:13" pos:end="133:24">EST_LOG_WARN</name><argument_list pos:start="133:25" pos:end="133:61">(<argument pos:start="133:26" pos:end="133:44"><expr pos:start="133:26" pos:end="133:44"><literal type="string" pos:start="133:26" pos:end="133:44">"socket failed: %d"</literal></expr></argument>, <argument pos:start="133:47" pos:end="133:60"><expr pos:start="133:47" pos:end="133:60"><call pos:start="133:47" pos:end="133:60"><name pos:start="133:47" pos:end="133:58">GET_SOCK_ERR</name><argument_list pos:start="133:59" pos:end="133:60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="134:13" pos:end="134:33"><expr pos:start="134:13" pos:end="134:32"><name pos:start="134:13" pos:end="134:15">ret</name> <operator pos:start="134:17" pos:end="134:17">=</operator> <name pos:start="134:19" pos:end="134:32">TCW_ERR_SOCKET</name></expr>;</expr_stmt>
            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:20">cur_addr</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:40"><name pos:start="135:24" pos:end="135:31">cur_addr</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:40">ai_next</name></name></expr>;</expr_stmt>
            <continue pos:start="136:13" pos:end="136:21">continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="140:38"><expr pos:start="139:9" pos:end="140:37"><name pos:start="139:9" pos:end="139:11">err</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="140:37"><name pos:start="139:15" pos:end="139:25">addr_to_str</name><argument_list pos:start="139:26" pos:end="140:37">(<argument pos:start="139:27" pos:end="139:43"><expr pos:start="139:27" pos:end="139:43"><name pos:start="139:27" pos:end="139:43"><name pos:start="139:27" pos:end="139:34">cur_addr</name><operator pos:start="139:35" pos:end="139:36">-&gt;</operator><name pos:start="139:37" pos:end="139:43">ai_addr</name></name></expr></argument>, <argument pos:start="139:46" pos:end="139:58"><expr pos:start="139:46" pos:end="139:58"><name pos:start="139:46" pos:end="139:58">sock_addr_str</name></expr></argument>, <argument pos:start="139:61" pos:end="139:81"><expr pos:start="139:61" pos:end="139:81"><sizeof pos:start="139:61" pos:end="139:81">sizeof<argument_list pos:start="139:67" pos:end="139:81">(<argument pos:start="139:68" pos:end="139:80"><expr pos:start="139:68" pos:end="139:80"><name pos:start="139:68" pos:end="139:80">sock_addr_str</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                          <argument pos:start="140:27" pos:end="140:36"><expr pos:start="140:27" pos:end="140:36"><operator pos:start="140:27" pos:end="140:27">&amp;</operator><name pos:start="140:28" pos:end="140:36">sock_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="141:9" pos:end="143:9"><if pos:start="141:9" pos:end="143:9">if <condition pos:start="141:12" pos:end="141:17">(<expr pos:start="141:13" pos:end="141:16"><operator pos:start="141:13" pos:end="141:13">!</operator><name pos:start="141:14" pos:end="141:16">err</name></expr>)</condition> <block pos:start="141:19" pos:end="143:9">{<block_content pos:start="142:13" pos:end="142:75">
            <expr_stmt pos:start="142:13" pos:end="142:75"><expr pos:start="142:13" pos:end="142:74"><call pos:start="142:13" pos:end="142:74"><name pos:start="142:13" pos:end="142:24">EST_LOG_INFO</name><argument_list pos:start="142:25" pos:end="142:74">(<argument pos:start="142:26" pos:end="142:47"><expr pos:start="142:26" pos:end="142:47"><literal type="string" pos:start="142:26" pos:end="142:47">"connect(%s port %hu)"</literal></expr></argument>, <argument pos:start="142:50" pos:end="142:62"><expr pos:start="142:50" pos:end="142:62"><name pos:start="142:50" pos:end="142:62">sock_addr_str</name></expr></argument>, <argument pos:start="142:65" pos:end="142:73"><expr pos:start="142:65" pos:end="142:73"><name pos:start="142:65" pos:end="142:73">sock_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="144:9" pos:end="154:9"><if pos:start="144:9" pos:end="154:9">if <condition pos:start="144:12" pos:end="144:69">(<expr pos:start="144:13" pos:end="144:68"><call pos:start="144:13" pos:end="144:64"><name pos:start="144:13" pos:end="144:19">connect</name><argument_list pos:start="144:20" pos:end="144:64">(<argument pos:start="144:21" pos:end="144:22"><expr pos:start="144:21" pos:end="144:22"><name pos:start="144:21" pos:end="144:22">fd</name></expr></argument>, <argument pos:start="144:25" pos:end="144:41"><expr pos:start="144:25" pos:end="144:41"><name pos:start="144:25" pos:end="144:41"><name pos:start="144:25" pos:end="144:32">cur_addr</name><operator pos:start="144:33" pos:end="144:34">-&gt;</operator><name pos:start="144:35" pos:end="144:41">ai_addr</name></name></expr></argument>, <argument pos:start="144:44" pos:end="144:63"><expr pos:start="144:44" pos:end="144:63"><name pos:start="144:44" pos:end="144:63"><name pos:start="144:44" pos:end="144:51">cur_addr</name><operator pos:start="144:52" pos:end="144:53">-&gt;</operator><name pos:start="144:54" pos:end="144:63">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="144:66" pos:end="144:66">&lt;</operator> <literal type="number" pos:start="144:68" pos:end="144:68">0</literal></expr>)</condition> <block pos:start="144:71" pos:end="154:9">{<block_content pos:start="145:13" pos:end="153:21">
            <expr_stmt pos:start="145:13" pos:end="145:63"><expr pos:start="145:13" pos:end="145:62"><call pos:start="145:13" pos:end="145:62"><name pos:start="145:13" pos:end="145:24">EST_LOG_WARN</name><argument_list pos:start="145:25" pos:end="145:62">(<argument pos:start="145:26" pos:end="145:45"><expr pos:start="145:26" pos:end="145:45"><literal type="string" pos:start="145:26" pos:end="145:45">"connect failed: %d"</literal></expr></argument>, <argument pos:start="145:48" pos:end="145:61"><expr pos:start="145:48" pos:end="145:61"><call pos:start="145:48" pos:end="145:61"><name pos:start="145:48" pos:end="145:59">GET_SOCK_ERR</name><argument_list pos:start="145:60" pos:end="145:61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="146:13" pos:end="146:34"><expr pos:start="146:13" pos:end="146:33"><name pos:start="146:13" pos:end="146:15">ret</name> <operator pos:start="146:17" pos:end="146:17">=</operator> <name pos:start="146:19" pos:end="146:33">TCW_ERR_CONNECT</name></expr>;</expr_stmt>
            <comment type="block" pos:start="147:13" pos:end="147:53">/* CLOSE_SOCKET() may clobber SOCK_ERR */</comment>
            <expr_stmt pos:start="148:13" pos:end="148:39"><expr pos:start="148:13" pos:end="148:38"><name pos:start="148:13" pos:end="148:21">saved_err</name> <operator pos:start="148:23" pos:end="148:23">=</operator> <call pos:start="148:25" pos:end="148:38"><name pos:start="148:25" pos:end="148:36">GET_SOCK_ERR</name><argument_list pos:start="148:37" pos:end="148:38">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="149:13" pos:end="149:29"><expr pos:start="149:13" pos:end="149:28"><call pos:start="149:13" pos:end="149:28"><name pos:start="149:13" pos:end="149:24">CLOSE_SOCKET</name><argument_list pos:start="149:25" pos:end="149:28">(<argument pos:start="149:26" pos:end="149:27"><expr pos:start="149:26" pos:end="149:27"><name pos:start="149:26" pos:end="149:27">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="150:13" pos:end="150:30"><expr pos:start="150:13" pos:end="150:29"><name pos:start="150:13" pos:end="150:14">fd</name> <operator pos:start="150:16" pos:end="150:16">=</operator> <name pos:start="150:18" pos:end="150:29">SOCK_INVALID</name></expr>;</expr_stmt>
            <expr_stmt pos:start="151:13" pos:end="151:36"><expr pos:start="151:13" pos:end="151:35"><call pos:start="151:13" pos:end="151:35"><name pos:start="151:13" pos:end="151:24">SET_SOCK_ERR</name><argument_list pos:start="151:25" pos:end="151:35">(<argument pos:start="151:26" pos:end="151:34"><expr pos:start="151:26" pos:end="151:34"><name pos:start="151:26" pos:end="151:34">saved_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="152:13" pos:end="152:41"><expr pos:start="152:13" pos:end="152:40"><name pos:start="152:13" pos:end="152:20">cur_addr</name> <operator pos:start="152:22" pos:end="152:22">=</operator> <name pos:start="152:24" pos:end="152:40"><name pos:start="152:24" pos:end="152:31">cur_addr</name><operator pos:start="152:32" pos:end="152:33">-&gt;</operator><name pos:start="152:34" pos:end="152:40">ai_next</name></name></expr>;</expr_stmt>
            <continue pos:start="153:13" pos:end="153:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <break pos:start="155:9" pos:end="155:14">break;</break>
    </block_content>}</block></while>
    <if_stmt pos:start="157:5" pos:end="162:5"><if pos:start="157:5" pos:end="159:5">if <condition pos:start="157:8" pos:end="157:16">(<expr pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:10">fd</name> <operator pos:start="157:12" pos:end="157:13">&gt;=</operator> <literal type="number" pos:start="157:15" pos:end="157:15">0</literal></expr>)</condition> <block pos:start="157:18" pos:end="159:5">{<block_content pos:start="158:9" pos:end="158:27">
        <expr_stmt pos:start="158:9" pos:end="158:27"><expr pos:start="158:9" pos:end="158:26"><name pos:start="158:9" pos:end="158:21"><name pos:start="158:9" pos:end="158:12">sock</name><operator pos:start="158:13" pos:end="158:14">-&gt;</operator><name pos:start="158:15" pos:end="158:21">sock_fd</name></name> <operator pos:start="158:23" pos:end="158:23">=</operator> <name pos:start="158:25" pos:end="158:26">fd</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="159:7" pos:end="162:5">else <block pos:start="159:12" pos:end="162:5">{<block_content pos:start="160:9" pos:end="160:63">
        <expr_stmt pos:start="160:9" pos:end="160:63"><expr pos:start="160:9" pos:end="160:62"><call pos:start="160:9" pos:end="160:62"><name pos:start="160:9" pos:end="160:19">EST_LOG_ERR</name><argument_list pos:start="160:20" pos:end="160:62">(<argument pos:start="160:21" pos:end="160:49"><expr pos:start="160:21" pos:end="160:49"><literal type="string" pos:start="160:21" pos:end="160:49">"Could not connect to %s:%hu"</literal></expr></argument>, <argument pos:start="160:52" pos:end="160:55"><expr pos:start="160:52" pos:end="160:55"><name pos:start="160:52" pos:end="160:55">host</name></expr></argument>, <argument pos:start="160:58" pos:end="160:61"><expr pos:start="160:58" pos:end="160:61"><name pos:start="160:58" pos:end="160:61">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="161:9" pos:end="161:42">/* ret and SOCK_ERR already set */</comment>
    </block_content>}</block></else></if_stmt>
<label pos:start="163:1" pos:end="163:5"><name pos:start="163:1" pos:end="163:4">done</name>:</label>
    <return pos:start="164:5" pos:end="164:15">return <expr pos:start="164:12" pos:end="164:14"><name pos:start="164:12" pos:end="164:14">ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="166:1" pos:end="169:3">/*
 * Establish a direct socket connection with the EST server using
 * normal system calls
 */</comment>
<function pos:start="170:1" pos:end="181:1"><type pos:start="170:1" pos:end="170:16"><specifier pos:start="170:1" pos:end="170:6">static</specifier> <name pos:start="170:8" pos:end="170:16">tcw_err_t</name></type> <name pos:start="170:18" pos:end="170:31">tcw_curl_close</name> <parameter_list pos:start="170:33" pos:end="170:50">(<parameter pos:start="170:34" pos:end="170:49"><decl pos:start="170:34" pos:end="170:49"><type pos:start="170:34" pos:end="170:45"><name pos:start="170:34" pos:end="170:43">tcw_sock_t</name> <modifier pos:start="170:45" pos:end="170:45">*</modifier></type><name pos:start="170:46" pos:end="170:49">sock</name></decl></parameter>)</parameter_list>
<block pos:start="171:1" pos:end="181:1">{<block_content pos:start="172:5" pos:end="180:15">
    <decl_stmt pos:start="172:5" pos:end="172:27"><decl pos:start="172:5" pos:end="172:26"><type pos:start="172:5" pos:end="172:13"><name pos:start="172:5" pos:end="172:13">tcw_err_t</name></type> <name pos:start="172:15" pos:end="172:17">ret</name> <init pos:start="172:19" pos:end="172:26">= <expr pos:start="172:21" pos:end="172:26"><name pos:start="172:21" pos:end="172:26">TCW_OK</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="174:5" pos:end="176:5"><if pos:start="174:5" pos:end="176:5">if <condition pos:start="174:8" pos:end="174:26">(<expr pos:start="174:9" pos:end="174:25"><name pos:start="174:9" pos:end="174:25"><name pos:start="174:9" pos:end="174:12">sock</name><operator pos:start="174:13" pos:end="174:14">-&gt;</operator><name pos:start="174:15" pos:end="174:25">curl_handle</name></name></expr>)</condition> <block pos:start="174:28" pos:end="176:5">{<block_content pos:start="175:9" pos:end="175:45">
        <expr_stmt pos:start="175:9" pos:end="175:45"><expr pos:start="175:9" pos:end="175:44"><call pos:start="175:9" pos:end="175:44"><name pos:start="175:9" pos:end="175:25">curl_easy_cleanup</name><argument_list pos:start="175:26" pos:end="175:44">(<argument pos:start="175:27" pos:end="175:43"><expr pos:start="175:27" pos:end="175:43"><name pos:start="175:27" pos:end="175:43"><name pos:start="175:27" pos:end="175:30">sock</name><operator pos:start="175:31" pos:end="175:32">-&gt;</operator><name pos:start="175:33" pos:end="175:43">curl_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="177:5" pos:end="177:29"><expr pos:start="177:5" pos:end="177:28"><name pos:start="177:5" pos:end="177:21"><name pos:start="177:5" pos:end="177:8">sock</name><operator pos:start="177:9" pos:end="177:10">-&gt;</operator><name pos:start="177:11" pos:end="177:21">curl_handle</name></name> <operator pos:start="177:23" pos:end="177:23">=</operator> <name pos:start="177:25" pos:end="177:28">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="178:5" pos:end="178:33"><expr pos:start="178:5" pos:end="178:32"><name pos:start="178:5" pos:end="178:17"><name pos:start="178:5" pos:end="178:8">sock</name><operator pos:start="178:9" pos:end="178:10">-&gt;</operator><name pos:start="178:11" pos:end="178:17">sock_fd</name></name> <operator pos:start="178:19" pos:end="178:19">=</operator> <name pos:start="178:21" pos:end="178:32">SOCK_INVALID</name></expr>;</expr_stmt>

    <return pos:start="180:5" pos:end="180:15">return <expr pos:start="180:12" pos:end="180:14"><name pos:start="180:12" pos:end="180:14">ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="182:1" pos:end="185:3">/*
 * Establish a direct socket connection with the EST server using
 * normal system calls
 */</comment>
<function pos:start="186:1" pos:end="233:1"><type pos:start="186:1" pos:end="186:16"><specifier pos:start="186:1" pos:end="186:6">static</specifier> <name pos:start="186:8" pos:end="186:16">tcw_err_t</name></type> <name pos:start="186:18" pos:end="186:34">set_blocking_mode</name> <parameter_list pos:start="186:36" pos:end="186:67">(<parameter pos:start="186:37" pos:end="186:52"><decl pos:start="186:37" pos:end="186:52"><type pos:start="186:37" pos:end="186:52"><name pos:start="186:37" pos:end="186:46">tcw_sock_t</name> <modifier pos:start="186:48" pos:end="186:48">*</modifier></type><name pos:start="186:49" pos:end="186:52">sock</name></decl></parameter>, <parameter pos:start="186:55" pos:end="186:66"><decl pos:start="186:55" pos:end="186:66"><type pos:start="186:55" pos:end="186:66"><name pos:start="186:55" pos:end="186:57">int</name></type> <name pos:start="186:59" pos:end="186:66">blocking</name></decl></parameter>)</parameter_list>
<block pos:start="187:1" pos:end="233:1">{<block_content pos:start="188:5" pos:end="232:15">
    <decl_stmt pos:start="188:5" pos:end="191:0"><decl pos:start="188:5" pos:end="188:26"><type pos:start="188:5" pos:end="188:13"><name pos:start="188:5" pos:end="188:13">tcw_err_t</name></type> <name pos:start="188:15" pos:end="188:17">ret</name> <init pos:start="188:19" pos:end="188:26">= <expr pos:start="188:21" pos:end="188:26"><name pos:start="188:21" pos:end="188:26">TCW_OK</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="190:1" pos:end="190:12">#<cpp:directive pos:start="190:2" pos:end="190:6">ifdef</cpp:directive> <name pos:start="190:8" pos:end="190:12">WIN32</name></cpp:ifdef>
    <decl_stmt pos:start="191:5" pos:end="191:15"><decl pos:start="191:5" pos:end="191:14"><type pos:start="191:5" pos:end="191:7"><name pos:start="191:5" pos:end="191:7">int</name></type> <name pos:start="191:9" pos:end="191:14">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="192:5" pos:end="192:42"><decl pos:start="192:5" pos:end="192:41"><type pos:start="192:5" pos:end="192:17"><name pos:start="192:5" pos:end="192:12">unsigned</name> <name pos:start="192:14" pos:end="192:17">long</name></type> <name pos:start="192:19" pos:end="192:22">mode</name> <init pos:start="192:24" pos:end="192:41">= <expr pos:start="192:26" pos:end="192:41"><ternary pos:start="192:26" pos:end="192:41"><condition pos:start="192:26" pos:end="192:35"><expr pos:start="192:26" pos:end="192:33"><name pos:start="192:26" pos:end="192:33">blocking</name></expr> ?</condition><then pos:start="192:37" pos:end="192:37"> <expr pos:start="192:37" pos:end="192:37"><literal type="number" pos:start="192:37" pos:end="192:37">0</literal></expr> </then><else pos:start="192:39" pos:end="192:41">: <expr pos:start="192:41" pos:end="192:41"><literal type="number" pos:start="192:41" pos:end="192:41">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="194:5" pos:end="194:56"><expr pos:start="194:5" pos:end="194:55"><name pos:start="194:5" pos:end="194:10">result</name> <operator pos:start="194:12" pos:end="194:12">=</operator> <call pos:start="194:14" pos:end="194:55"><name pos:start="194:14" pos:end="194:24">ioctlsocket</name><argument_list pos:start="194:25" pos:end="194:55">(<argument pos:start="194:26" pos:end="194:38"><expr pos:start="194:26" pos:end="194:38"><name pos:start="194:26" pos:end="194:38"><name pos:start="194:26" pos:end="194:29">sock</name><operator pos:start="194:30" pos:end="194:31">-&gt;</operator><name pos:start="194:32" pos:end="194:38">sock_fd</name></name></expr></argument>, <argument pos:start="194:41" pos:end="194:47"><expr pos:start="194:41" pos:end="194:47"><name pos:start="194:41" pos:end="194:47">FIONBIO</name></expr></argument>, <argument pos:start="194:50" pos:end="194:54"><expr pos:start="194:50" pos:end="194:54"><operator pos:start="194:50" pos:end="194:50">&amp;</operator><name pos:start="194:51" pos:end="194:54">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="195:5" pos:end="215:0"><if pos:start="195:5" pos:end="215:0">if <condition pos:start="195:8" pos:end="195:27">(<expr pos:start="195:9" pos:end="195:26"><name pos:start="195:9" pos:end="195:14">result</name> <operator pos:start="195:16" pos:end="195:17">!=</operator> <name pos:start="195:19" pos:end="195:26">NO_ERROR</name></expr>)</condition> <block pos:start="195:29" pos:end="215:0">{<block_content pos:start="211:9" pos:end="212:18">
        <comment type="block" pos:start="196:9" pos:end="210:11">/*
         * As per:
         * https://msdn.microsoft.com/en-us/library/windows/desktop/ms740126(v=vs.85).aspx
         *
         * Ioctl and Ioctlsocket/WSAIoctl
         *
         * Various C language run-time systems use the IOCTLs for purposes
         * unrelated to Windows Sockets. As a consequence, the ioctlsocket
         * function and the WSAIoctl function were defined to handle socket
         * functions that were performed by IOCTL and fcntl in the Berkeley
         * Software Distribution.
         *
         * Since ioctlsocket is the Windows equivalent of ioctl/fcntl, just
         * set return type accordingly.
         */</comment>
        <expr_stmt pos:start="211:9" pos:end="211:28"><expr pos:start="211:9" pos:end="211:27"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <name pos:start="211:15" pos:end="211:27">TCW_ERR_FCNTL</name></expr>;</expr_stmt>
        <goto pos:start="212:9" pos:end="212:18">goto <name pos:start="212:14" pos:end="212:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
<cpp:else pos:start="214:1" pos:end="214:5">#<cpp:directive pos:start="214:2" pos:end="214:5">else</cpp:directive></cpp:else>
    <decl_stmt pos:start="215:5" pos:end="215:46"><decl pos:start="215:5" pos:end="215:45"><type pos:start="215:5" pos:end="215:7"><name pos:start="215:5" pos:end="215:7">int</name></type> <name pos:start="215:9" pos:end="215:13">flags</name> <init pos:start="215:15" pos:end="215:45">= <expr pos:start="215:17" pos:end="215:45"><call pos:start="215:17" pos:end="215:45"><name pos:start="215:17" pos:end="215:21">fcntl</name><argument_list pos:start="215:22" pos:end="215:45">(<argument pos:start="215:23" pos:end="215:35"><expr pos:start="215:23" pos:end="215:35"><name pos:start="215:23" pos:end="215:35"><name pos:start="215:23" pos:end="215:26">sock</name><operator pos:start="215:27" pos:end="215:28">-&gt;</operator><name pos:start="215:29" pos:end="215:35">sock_fd</name></name></expr></argument>, <argument pos:start="215:38" pos:end="215:44"><expr pos:start="215:38" pos:end="215:44"><name pos:start="215:38" pos:end="215:44">F_GETFL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="216:5" pos:end="221:5"><if pos:start="216:5" pos:end="221:5">if <condition pos:start="216:8" pos:end="216:18">(<expr pos:start="216:9" pos:end="216:17"><name pos:start="216:9" pos:end="216:13">flags</name> <operator pos:start="216:15" pos:end="216:15">&lt;</operator> <literal type="number" pos:start="216:17" pos:end="216:17">0</literal></expr>)</condition> <block pos:start="216:20" pos:end="221:5">{<block_content pos:start="217:9" pos:end="220:18">
        <expr_stmt pos:start="217:9" pos:end="217:65"><expr pos:start="217:9" pos:end="217:64"><call pos:start="217:9" pos:end="217:64"><name pos:start="217:9" pos:end="217:19">EST_LOG_ERR</name><argument_list pos:start="217:20" pos:end="217:64">(<argument pos:start="217:21" pos:end="217:47"><expr pos:start="217:21" pos:end="217:47"><literal type="string" pos:start="217:21" pos:end="217:47">"fcntl(F_GETFL) failed: %d"</literal></expr></argument>, <argument pos:start="217:50" pos:end="217:63"><expr pos:start="217:50" pos:end="217:63"><call pos:start="217:50" pos:end="217:63"><name pos:start="217:50" pos:end="217:61">GET_SOCK_ERR</name><argument_list pos:start="217:62" pos:end="217:63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="218:9" pos:end="218:37">/* SOCK_ERR is already set */</comment>
        <expr_stmt pos:start="219:9" pos:end="219:28"><expr pos:start="219:9" pos:end="219:27"><name pos:start="219:9" pos:end="219:11">ret</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <name pos:start="219:15" pos:end="219:27">TCW_ERR_FCNTL</name></expr>;</expr_stmt>
        <goto pos:start="220:9" pos:end="220:18">goto <name pos:start="220:14" pos:end="220:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="222:5" pos:end="222:68"><expr pos:start="222:5" pos:end="222:67"><name pos:start="222:5" pos:end="222:9">flags</name> <operator pos:start="222:11" pos:end="222:11">=</operator> <ternary pos:start="222:13" pos:end="222:67"><condition pos:start="222:13" pos:end="222:22"><expr pos:start="222:13" pos:end="222:20"><name pos:start="222:13" pos:end="222:20">blocking</name></expr> ?</condition><then pos:start="222:24" pos:end="222:44"> <expr pos:start="222:24" pos:end="222:44"><operator pos:start="222:24" pos:end="222:24">(</operator><name pos:start="222:25" pos:end="222:29">flags</name> <operator pos:start="222:31" pos:end="222:31">&amp;</operator> <operator pos:start="222:33" pos:end="222:33">~</operator><name pos:start="222:34" pos:end="222:43">O_NONBLOCK</name><operator pos:start="222:44" pos:end="222:44">)</operator></expr> </then><else pos:start="222:46" pos:end="222:67">: <expr pos:start="222:48" pos:end="222:67"><operator pos:start="222:48" pos:end="222:48">(</operator><name pos:start="222:49" pos:end="222:53">flags</name> <operator pos:start="222:55" pos:end="222:55">|</operator> <name pos:start="222:57" pos:end="222:66">O_NONBLOCK</name><operator pos:start="222:67" pos:end="222:67">)</operator></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt pos:start="223:5" pos:end="230:0"><if pos:start="223:5" pos:end="230:0">if <condition pos:start="223:8" pos:end="223:49">(<expr pos:start="223:9" pos:end="223:48"><call pos:start="223:9" pos:end="223:44"><name pos:start="223:9" pos:end="223:13">fcntl</name><argument_list pos:start="223:14" pos:end="223:44">(<argument pos:start="223:15" pos:end="223:27"><expr pos:start="223:15" pos:end="223:27"><name pos:start="223:15" pos:end="223:27"><name pos:start="223:15" pos:end="223:18">sock</name><operator pos:start="223:19" pos:end="223:20">-&gt;</operator><name pos:start="223:21" pos:end="223:27">sock_fd</name></name></expr></argument>, <argument pos:start="223:30" pos:end="223:36"><expr pos:start="223:30" pos:end="223:36"><name pos:start="223:30" pos:end="223:36">F_SETFL</name></expr></argument>, <argument pos:start="223:39" pos:end="223:43"><expr pos:start="223:39" pos:end="223:43"><name pos:start="223:39" pos:end="223:43">flags</name></expr></argument>)</argument_list></call> <operator pos:start="223:46" pos:end="223:46">&lt;</operator> <literal type="number" pos:start="223:48" pos:end="223:48">0</literal></expr>)</condition> <block pos:start="223:51" pos:end="230:0">{<block_content pos:start="224:9" pos:end="227:18">
        <expr_stmt pos:start="224:9" pos:end="224:65"><expr pos:start="224:9" pos:end="224:64"><call pos:start="224:9" pos:end="224:64"><name pos:start="224:9" pos:end="224:19">EST_LOG_ERR</name><argument_list pos:start="224:20" pos:end="224:64">(<argument pos:start="224:21" pos:end="224:47"><expr pos:start="224:21" pos:end="224:47"><literal type="string" pos:start="224:21" pos:end="224:47">"fcntl(F_SETFL) failed: %d"</literal></expr></argument>, <argument pos:start="224:50" pos:end="224:63"><expr pos:start="224:50" pos:end="224:63"><call pos:start="224:50" pos:end="224:63"><name pos:start="224:50" pos:end="224:61">GET_SOCK_ERR</name><argument_list pos:start="224:62" pos:end="224:63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="225:9" pos:end="225:37">/* SOCK_ERR is already set */</comment>
        <expr_stmt pos:start="226:9" pos:end="226:28"><expr pos:start="226:9" pos:end="226:27"><name pos:start="226:9" pos:end="226:11">ret</name> <operator pos:start="226:13" pos:end="226:13">=</operator> <name pos:start="226:15" pos:end="226:27">TCW_ERR_FCNTL</name></expr>;</expr_stmt>
        <goto pos:start="227:9" pos:end="227:18">goto <name pos:start="227:14" pos:end="227:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="229:1" pos:end="229:6">#<cpp:directive pos:start="229:2" pos:end="229:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="229:8" pos:end="229:18">/* WIN32 */</comment>

<label pos:start="231:1" pos:end="231:5"><name pos:start="231:1" pos:end="231:4">done</name>:</label>
    <return pos:start="232:5" pos:end="232:15">return <expr pos:start="232:12" pos:end="232:14"><name pos:start="232:12" pos:end="232:14">ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="234:1" pos:end="238:3">/*
 * Establish a socket with the remote server using libcurl. Do not have it
 * actually send a URL. Leverage libcurl's proxy support to just establish
 * the connection.
 */</comment>
<function pos:start="239:1" pos:end="481:1"><type pos:start="239:1" pos:end="239:16"><specifier pos:start="239:1" pos:end="239:6">static</specifier> <name pos:start="239:8" pos:end="239:16">tcw_err_t</name></type> <name pos:start="239:18" pos:end="239:33">tcw_curl_connect</name> <parameter_list pos:start="239:35" pos:end="240:77">(<parameter pos:start="239:36" pos:end="239:51"><decl pos:start="239:36" pos:end="239:51"><type pos:start="239:36" pos:end="239:51"><name pos:start="239:36" pos:end="239:45">tcw_sock_t</name> <modifier pos:start="239:47" pos:end="239:47">*</modifier></type><name pos:start="239:48" pos:end="239:51">sock</name></decl></parameter>, <parameter pos:start="239:54" pos:end="239:69"><decl pos:start="239:54" pos:end="239:69"><type pos:start="239:54" pos:end="239:69"><name pos:start="239:54" pos:end="239:63">tcw_opts_t</name> <modifier pos:start="239:65" pos:end="239:65">*</modifier></type><name pos:start="239:66" pos:end="239:69">opts</name></decl></parameter>,
                                   <parameter pos:start="240:36" pos:end="240:51"><decl pos:start="240:36" pos:end="240:51"><type pos:start="240:36" pos:end="240:51"><specifier pos:start="240:36" pos:end="240:40">const</specifier> <name pos:start="240:42" pos:end="240:45">char</name> <modifier pos:start="240:47" pos:end="240:47">*</modifier></type><name pos:start="240:48" pos:end="240:51">host</name></decl></parameter>, <parameter pos:start="240:54" pos:end="240:76"><decl pos:start="240:54" pos:end="240:76"><type pos:start="240:54" pos:end="240:76"><name pos:start="240:54" pos:end="240:61">unsigned</name> <name pos:start="240:63" pos:end="240:67">short</name> <name pos:start="240:69" pos:end="240:71">int</name></type> <name pos:start="240:73" pos:end="240:76">port</name></decl></parameter>)</parameter_list>
<block pos:start="241:1" pos:end="481:1">{<block_content pos:start="242:5" pos:end="480:15">
    <decl_stmt pos:start="242:5" pos:end="242:27"><decl pos:start="242:5" pos:end="242:26"><type pos:start="242:5" pos:end="242:13"><name pos:start="242:5" pos:end="242:13">tcw_err_t</name></type> <name pos:start="242:15" pos:end="242:17">ret</name> <init pos:start="242:19" pos:end="242:26">= <expr pos:start="242:21" pos:end="242:26"><name pos:start="242:21" pos:end="242:26">TCW_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="243:5" pos:end="243:20"><decl pos:start="243:5" pos:end="243:19"><type pos:start="243:5" pos:end="243:10"><name pos:start="243:5" pos:end="243:10">size_t</name></type> <name pos:start="243:12" pos:end="243:19">url_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="244:5" pos:end="244:21"><decl pos:start="244:5" pos:end="244:20"><type pos:start="244:5" pos:end="244:10"><name pos:start="244:5" pos:end="244:8">char</name> <modifier pos:start="244:10" pos:end="244:10">*</modifier></type><name pos:start="244:11" pos:end="244:13">url</name> <init pos:start="244:15" pos:end="244:20">= <expr pos:start="244:17" pos:end="244:20"><name pos:start="244:17" pos:end="244:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="245:5" pos:end="245:22"><decl pos:start="245:5" pos:end="245:21"><type pos:start="245:5" pos:end="245:12"><name pos:start="245:5" pos:end="245:12">CURLcode</name></type> <name pos:start="245:14" pos:end="245:21">curlcode</name></decl>;</decl_stmt>
    <decl_stmt pos:start="246:5" pos:end="246:21"><decl pos:start="246:5" pos:end="246:20"><type pos:start="246:5" pos:end="246:8"><name pos:start="246:5" pos:end="246:8">long</name></type> <name pos:start="246:10" pos:end="246:20">curl_socket</name></decl>;</decl_stmt>
    <decl_stmt pos:start="247:5" pos:end="247:19"><decl pos:start="247:5" pos:end="247:18"><type pos:start="247:5" pos:end="247:8"><name pos:start="247:5" pos:end="247:8">long</name></type> <name pos:start="247:10" pos:end="247:18">auth_bits</name></decl>;</decl_stmt>
    <decl_stmt pos:start="248:5" pos:end="248:25"><decl pos:start="248:5" pos:end="248:24"><type pos:start="248:5" pos:end="248:8"><name pos:start="248:5" pos:end="248:8">long</name></type> <name pos:start="248:10" pos:end="248:19">proxy_type</name> <init pos:start="248:21" pos:end="248:24">= <expr pos:start="248:23" pos:end="248:24"><operator pos:start="248:23" pos:end="248:23">-</operator><literal type="number" pos:start="248:24" pos:end="248:24">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="249:5" pos:end="249:18"><decl pos:start="249:5" pos:end="249:17"><type pos:start="249:5" pos:end="249:7"><name pos:start="249:5" pos:end="249:7">int</name></type> <name pos:start="249:9" pos:end="249:17">saved_err</name></decl>;</decl_stmt>
    <decl_stmt pos:start="250:5" pos:end="250:40"><decl pos:start="250:5" pos:end="250:39"><type pos:start="250:5" pos:end="250:16"><specifier pos:start="250:5" pos:end="250:9">const</specifier> <name pos:start="250:11" pos:end="250:14">char</name> <modifier pos:start="250:16" pos:end="250:16">*</modifier></type><name pos:start="250:17" pos:end="250:30">proxy_type_str</name> <init pos:start="250:32" pos:end="250:39">= <expr pos:start="250:34" pos:end="250:39"><literal type="string" pos:start="250:34" pos:end="250:39">"NONE"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="251:5" pos:end="251:10"><decl pos:start="251:5" pos:end="251:9"><type pos:start="251:5" pos:end="251:7"><name pos:start="251:5" pos:end="251:7">int</name></type> <name pos:start="251:9" pos:end="251:9">n</name></decl>;</decl_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:41"><expr pos:start="253:5" pos:end="253:40"><name pos:start="253:5" pos:end="253:21"><name pos:start="253:5" pos:end="253:8">sock</name><operator pos:start="253:9" pos:end="253:10">-&gt;</operator><name pos:start="253:11" pos:end="253:21">curl_handle</name></name> <operator pos:start="253:23" pos:end="253:23">=</operator> <call pos:start="253:25" pos:end="253:40"><name pos:start="253:25" pos:end="253:38">curl_easy_init</name><argument_list pos:start="253:39" pos:end="253:40">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="254:5" pos:end="259:5"><if pos:start="254:5" pos:end="259:5">if <condition pos:start="254:8" pos:end="254:27">(<expr pos:start="254:9" pos:end="254:26"><operator pos:start="254:9" pos:end="254:9">!</operator><name pos:start="254:10" pos:end="254:26"><name pos:start="254:10" pos:end="254:13">sock</name><operator pos:start="254:14" pos:end="254:15">-&gt;</operator><name pos:start="254:16" pos:end="254:26">curl_handle</name></name></expr>)</condition> <block pos:start="254:29" pos:end="259:5">{<block_content pos:start="255:9" pos:end="258:18">
        <expr_stmt pos:start="255:9" pos:end="255:45"><expr pos:start="255:9" pos:end="255:44"><call pos:start="255:9" pos:end="255:44"><name pos:start="255:9" pos:end="255:19">EST_LOG_ERR</name><argument_list pos:start="255:20" pos:end="255:44">(<argument pos:start="255:21" pos:end="255:43"><expr pos:start="255:21" pos:end="255:43"><literal type="string" pos:start="255:21" pos:end="255:43">"curl_easy_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="256:9" pos:end="256:23"><expr pos:start="256:9" pos:end="256:22"><name pos:start="256:9" pos:end="256:13">errno</name> <operator pos:start="256:15" pos:end="256:15">=</operator> <name pos:start="256:17" pos:end="256:22">ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt pos:start="257:9" pos:end="257:28"><expr pos:start="257:9" pos:end="257:27"><name pos:start="257:9" pos:end="257:11">ret</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <name pos:start="257:15" pos:end="257:27">TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto pos:start="258:9" pos:end="258:18">goto <name pos:start="258:14" pos:end="258:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="260:5" pos:end="264:7">/*
     * All we want libcurl to do here is establish the connection to
     * the proxy server.  Once that's done we'll use the socket
     * as we normally do on a direct connect to the EST server
     */</comment>
    <expr_stmt pos:start="265:5" pos:end="265:76"><expr pos:start="265:5" pos:end="265:75"><name pos:start="265:5" pos:end="265:12">curlcode</name> <operator pos:start="265:14" pos:end="265:14">=</operator> <call pos:start="265:16" pos:end="265:75"><name pos:start="265:16" pos:end="265:31">curl_easy_setopt</name><argument_list pos:start="265:32" pos:end="265:75">(<argument pos:start="265:33" pos:end="265:49"><expr pos:start="265:33" pos:end="265:49"><name pos:start="265:33" pos:end="265:49"><name pos:start="265:33" pos:end="265:36">sock</name><operator pos:start="265:37" pos:end="265:38">-&gt;</operator><name pos:start="265:39" pos:end="265:49">curl_handle</name></name></expr></argument>, <argument pos:start="265:52" pos:end="265:71"><expr pos:start="265:52" pos:end="265:71"><name pos:start="265:52" pos:end="265:71">CURLOPT_CONNECT_ONLY</name></expr></argument>, <argument pos:start="265:74" pos:end="265:74"><expr pos:start="265:74" pos:end="265:74"><literal type="number" pos:start="265:74" pos:end="265:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="266:5" pos:end="272:5"><if pos:start="266:5" pos:end="272:5">if <condition pos:start="266:8" pos:end="266:29">(<expr pos:start="266:9" pos:end="266:28"><name pos:start="266:9" pos:end="266:16">curlcode</name> <operator pos:start="266:18" pos:end="266:19">!=</operator> <name pos:start="266:21" pos:end="266:28">CURLE_OK</name></expr>)</condition> <block pos:start="266:31" pos:end="272:5">{<block_content pos:start="267:9" pos:end="271:18">
        <expr_stmt pos:start="267:9" pos:end="268:60"><expr pos:start="267:9" pos:end="268:59"><call pos:start="267:9" pos:end="268:59"><name pos:start="267:9" pos:end="267:19">EST_LOG_ERR</name><argument_list pos:start="267:20" pos:end="268:59">(<argument pos:start="267:21" pos:end="267:76"><expr pos:start="267:21" pos:end="267:76"><literal type="string" pos:start="267:21" pos:end="267:76">"curl_easy_setopt(CURLOPT_CONNECT_ONLY) returned %d: %s"</literal></expr></argument>,
                    <argument pos:start="268:21" pos:end="268:28"><expr pos:start="268:21" pos:end="268:28"><name pos:start="268:21" pos:end="268:28">curlcode</name></expr></argument>, <argument pos:start="268:31" pos:end="268:58"><expr pos:start="268:31" pos:end="268:58"><call pos:start="268:31" pos:end="268:58"><name pos:start="268:31" pos:end="268:48">curl_easy_strerror</name><argument_list pos:start="268:49" pos:end="268:58">(<argument pos:start="268:50" pos:end="268:57"><expr pos:start="268:50" pos:end="268:57"><name pos:start="268:50" pos:end="268:57">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="269:9" pos:end="269:23"><expr pos:start="269:9" pos:end="269:22"><name pos:start="269:9" pos:end="269:13">errno</name> <operator pos:start="269:15" pos:end="269:15">=</operator> <name pos:start="269:17" pos:end="269:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="270:9" pos:end="270:28"><expr pos:start="270:9" pos:end="270:27"><name pos:start="270:9" pos:end="270:11">ret</name> <operator pos:start="270:13" pos:end="270:13">=</operator> <name pos:start="270:15" pos:end="270:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="271:9" pos:end="271:18">goto <name pos:start="271:14" pos:end="271:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="273:5" pos:end="273:55"><expr pos:start="273:5" pos:end="273:54"><name pos:start="273:5" pos:end="273:12">url_size</name> <operator pos:start="273:14" pos:end="273:14">=</operator> <call pos:start="273:16" pos:end="273:27"><name pos:start="273:16" pos:end="273:21">strlen</name><argument_list pos:start="273:22" pos:end="273:27">(<argument pos:start="273:23" pos:end="273:26"><expr pos:start="273:23" pos:end="273:26"><name pos:start="273:23" pos:end="273:26">host</name></expr></argument>)</argument_list></call> <operator pos:start="273:29" pos:end="273:29">+</operator> <name pos:start="273:31" pos:end="273:54">TCW_URL_SCHEMA_PORT_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="274:5" pos:end="274:38"><expr pos:start="274:5" pos:end="274:37"><name pos:start="274:5" pos:end="274:7">url</name> <operator pos:start="274:9" pos:end="274:9">=</operator> <operator pos:start="274:11" pos:end="274:11">(</operator><name pos:start="274:12" pos:end="274:15">char</name> <operator pos:start="274:17" pos:end="274:17">*</operator><operator pos:start="274:18" pos:end="274:18">)</operator><call pos:start="274:19" pos:end="274:37"><name pos:start="274:19" pos:end="274:24">calloc</name><argument_list pos:start="274:25" pos:end="274:37">(<argument pos:start="274:26" pos:end="274:26"><expr pos:start="274:26" pos:end="274:26"><literal type="number" pos:start="274:26" pos:end="274:26">1</literal></expr></argument>, <argument pos:start="274:29" pos:end="274:36"><expr pos:start="274:29" pos:end="274:36"><name pos:start="274:29" pos:end="274:36">url_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="275:5" pos:end="280:5"><if pos:start="275:5" pos:end="280:5">if <condition pos:start="275:8" pos:end="275:13">(<expr pos:start="275:9" pos:end="275:12"><operator pos:start="275:9" pos:end="275:9">!</operator><name pos:start="275:10" pos:end="275:12">url</name></expr>)</condition> <block pos:start="275:15" pos:end="280:5">{<block_content pos:start="276:9" pos:end="279:18">
        <expr_stmt pos:start="276:9" pos:end="276:37"><expr pos:start="276:9" pos:end="276:36"><call pos:start="276:9" pos:end="276:36"><name pos:start="276:9" pos:end="276:19">EST_LOG_ERR</name><argument_list pos:start="276:20" pos:end="276:36">(<argument pos:start="276:21" pos:end="276:35"><expr pos:start="276:21" pos:end="276:35"><literal type="string" pos:start="276:21" pos:end="276:35">"calloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="277:9" pos:end="277:23"><expr pos:start="277:9" pos:end="277:22"><name pos:start="277:9" pos:end="277:13">errno</name> <operator pos:start="277:15" pos:end="277:15">=</operator> <name pos:start="277:17" pos:end="277:22">ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt pos:start="278:9" pos:end="278:28"><expr pos:start="278:9" pos:end="278:27"><name pos:start="278:9" pos:end="278:11">ret</name> <operator pos:start="278:13" pos:end="278:13">=</operator> <name pos:start="278:15" pos:end="278:27">TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto pos:start="279:9" pos:end="279:18">goto <name pos:start="279:14" pos:end="279:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="281:5" pos:end="284:7">/*
     * "http" here is telling libcurl not to wrap whatever data we send in
     *  SSL. 
     */</comment>
    <expr_stmt pos:start="285:5" pos:end="285:63"><expr pos:start="285:5" pos:end="285:62"><name pos:start="285:5" pos:end="285:5">n</name> <operator pos:start="285:7" pos:end="285:7">=</operator> <call pos:start="285:9" pos:end="285:62"><name pos:start="285:9" pos:end="285:16">snprintf</name><argument_list pos:start="285:17" pos:end="285:62">(<argument pos:start="285:18" pos:end="285:20"><expr pos:start="285:18" pos:end="285:20"><name pos:start="285:18" pos:end="285:20">url</name></expr></argument>, <argument pos:start="285:23" pos:end="285:32"><expr pos:start="285:23" pos:end="285:32"><name pos:start="285:23" pos:end="285:30">url_size</name><operator pos:start="285:31" pos:end="285:31">-</operator><literal type="number" pos:start="285:32" pos:end="285:32">1</literal></expr></argument>, <argument pos:start="285:35" pos:end="285:49"><expr pos:start="285:35" pos:end="285:49"><literal type="string" pos:start="285:35" pos:end="285:49">"http://%s:%hu"</literal></expr></argument>, <argument pos:start="285:52" pos:end="285:55"><expr pos:start="285:52" pos:end="285:55"><name pos:start="285:52" pos:end="285:55">host</name></expr></argument>, <argument pos:start="285:58" pos:end="285:61"><expr pos:start="285:58" pos:end="285:61"><name pos:start="285:58" pos:end="285:61">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="286:5" pos:end="290:5"><if pos:start="286:5" pos:end="290:5">if <condition pos:start="286:8" pos:end="286:36">(<expr pos:start="286:9" pos:end="286:35"><name pos:start="286:9" pos:end="286:9">n</name> <operator pos:start="286:11" pos:end="286:11">&lt;</operator> <literal type="number" pos:start="286:13" pos:end="286:13">0</literal> <operator pos:start="286:15" pos:end="286:16">||</operator> <name pos:start="286:18" pos:end="286:18">n</name> <operator pos:start="286:20" pos:end="286:21">&gt;=</operator> <operator pos:start="286:23" pos:end="286:23">(</operator><name pos:start="286:24" pos:end="286:26">int</name><operator pos:start="286:27" pos:end="286:27">)</operator><name pos:start="286:28" pos:end="286:35">url_size</name></expr>)</condition> <block pos:start="286:38" pos:end="290:5">{<block_content pos:start="287:9" pos:end="289:18">
        <expr_stmt pos:start="287:9" pos:end="287:23"><expr pos:start="287:9" pos:end="287:22"><name pos:start="287:9" pos:end="287:13">errno</name> <operator pos:start="287:15" pos:end="287:15">=</operator> <name pos:start="287:17" pos:end="287:22">ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt pos:start="288:9" pos:end="288:28"><expr pos:start="288:9" pos:end="288:27"><name pos:start="288:9" pos:end="288:11">ret</name> <operator pos:start="288:13" pos:end="288:13">=</operator> <name pos:start="288:15" pos:end="288:27">TCW_ERR_ALLOC</name></expr>;</expr_stmt>
        <goto pos:start="289:9" pos:end="289:18">goto <name pos:start="289:14" pos:end="289:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="291:5" pos:end="291:69"><expr pos:start="291:5" pos:end="291:68"><name pos:start="291:5" pos:end="291:12">curlcode</name> <operator pos:start="291:14" pos:end="291:14">=</operator> <call pos:start="291:16" pos:end="291:68"><name pos:start="291:16" pos:end="291:31">curl_easy_setopt</name><argument_list pos:start="291:32" pos:end="291:68">(<argument pos:start="291:33" pos:end="291:49"><expr pos:start="291:33" pos:end="291:49"><name pos:start="291:33" pos:end="291:49"><name pos:start="291:33" pos:end="291:36">sock</name><operator pos:start="291:37" pos:end="291:38">-&gt;</operator><name pos:start="291:39" pos:end="291:49">curl_handle</name></name></expr></argument>, <argument pos:start="291:52" pos:end="291:62"><expr pos:start="291:52" pos:end="291:62"><name pos:start="291:52" pos:end="291:62">CURLOPT_URL</name></expr></argument>, <argument pos:start="291:65" pos:end="291:67"><expr pos:start="291:65" pos:end="291:67"><name pos:start="291:65" pos:end="291:67">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="292:5" pos:end="298:5"><if pos:start="292:5" pos:end="298:5">if <condition pos:start="292:8" pos:end="292:29">(<expr pos:start="292:9" pos:end="292:28"><name pos:start="292:9" pos:end="292:16">curlcode</name> <operator pos:start="292:18" pos:end="292:19">!=</operator> <name pos:start="292:21" pos:end="292:28">CURLE_OK</name></expr>)</condition> <block pos:start="292:31" pos:end="298:5">{<block_content pos:start="293:9" pos:end="297:18">
        <expr_stmt pos:start="293:9" pos:end="294:50"><expr pos:start="293:9" pos:end="294:49"><call pos:start="293:9" pos:end="294:49"><name pos:start="293:9" pos:end="293:19">EST_LOG_ERR</name><argument_list pos:start="293:20" pos:end="294:49">(<argument pos:start="293:21" pos:end="293:67"><expr pos:start="293:21" pos:end="293:67"><literal type="string" pos:start="293:21" pos:end="293:67">"curl_easy_setopt(CURLOPT_URL) returned %d: %s"</literal></expr></argument>, <argument pos:start="293:70" pos:end="293:77"><expr pos:start="293:70" pos:end="293:77"><name pos:start="293:70" pos:end="293:77">curlcode</name></expr></argument>,
                    <argument pos:start="294:21" pos:end="294:48"><expr pos:start="294:21" pos:end="294:48"><call pos:start="294:21" pos:end="294:48"><name pos:start="294:21" pos:end="294:38">curl_easy_strerror</name><argument_list pos:start="294:39" pos:end="294:48">(<argument pos:start="294:40" pos:end="294:47"><expr pos:start="294:40" pos:end="294:47"><name pos:start="294:40" pos:end="294:47">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="295:9" pos:end="295:23"><expr pos:start="295:9" pos:end="295:22"><name pos:start="295:9" pos:end="295:13">errno</name> <operator pos:start="295:15" pos:end="295:15">=</operator> <name pos:start="295:17" pos:end="295:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="296:9" pos:end="296:28"><expr pos:start="296:9" pos:end="296:27"><name pos:start="296:9" pos:end="296:11">ret</name> <operator pos:start="296:13" pos:end="296:13">=</operator> <name pos:start="296:15" pos:end="296:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="297:9" pos:end="297:18">goto <name pos:start="297:14" pos:end="297:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="300:5" pos:end="302:7">/*
     * proxy host and port
     */</comment>
    <expr_stmt pos:start="303:5" pos:end="303:84"><expr pos:start="303:5" pos:end="303:83"><name pos:start="303:5" pos:end="303:12">curlcode</name> <operator pos:start="303:14" pos:end="303:14">=</operator> <call pos:start="303:16" pos:end="303:83"><name pos:start="303:16" pos:end="303:31">curl_easy_setopt</name><argument_list pos:start="303:32" pos:end="303:83">(<argument pos:start="303:33" pos:end="303:49"><expr pos:start="303:33" pos:end="303:49"><name pos:start="303:33" pos:end="303:49"><name pos:start="303:33" pos:end="303:36">sock</name><operator pos:start="303:37" pos:end="303:38">-&gt;</operator><name pos:start="303:39" pos:end="303:49">curl_handle</name></name></expr></argument>, <argument pos:start="303:52" pos:end="303:64"><expr pos:start="303:52" pos:end="303:64"><name pos:start="303:52" pos:end="303:64">CURLOPT_PROXY</name></expr></argument>, <argument pos:start="303:67" pos:end="303:82"><expr pos:start="303:67" pos:end="303:82"><name pos:start="303:67" pos:end="303:82"><name pos:start="303:67" pos:end="303:70">opts</name><operator pos:start="303:71" pos:end="303:72">-&gt;</operator><name pos:start="303:73" pos:end="303:82">proxy_host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="304:5" pos:end="310:5"><if pos:start="304:5" pos:end="310:5">if <condition pos:start="304:8" pos:end="304:29">(<expr pos:start="304:9" pos:end="304:28"><name pos:start="304:9" pos:end="304:16">curlcode</name> <operator pos:start="304:18" pos:end="304:19">!=</operator> <name pos:start="304:21" pos:end="304:28">CURLE_OK</name></expr>)</condition> <block pos:start="304:31" pos:end="310:5">{<block_content pos:start="305:9" pos:end="309:18">
        <expr_stmt pos:start="305:9" pos:end="306:50"><expr pos:start="305:9" pos:end="306:49"><call pos:start="305:9" pos:end="306:49"><name pos:start="305:9" pos:end="305:19">EST_LOG_ERR</name><argument_list pos:start="305:20" pos:end="306:49">(<argument pos:start="305:21" pos:end="305:69"><expr pos:start="305:21" pos:end="305:69"><literal type="string" pos:start="305:21" pos:end="305:69">"curl_easy_setopt(CURLOPT_PROXY) returned %d: %s"</literal></expr></argument>, <argument pos:start="305:72" pos:end="305:79"><expr pos:start="305:72" pos:end="305:79"><name pos:start="305:72" pos:end="305:79">curlcode</name></expr></argument>,
                    <argument pos:start="306:21" pos:end="306:48"><expr pos:start="306:21" pos:end="306:48"><call pos:start="306:21" pos:end="306:48"><name pos:start="306:21" pos:end="306:38">curl_easy_strerror</name><argument_list pos:start="306:39" pos:end="306:48">(<argument pos:start="306:40" pos:end="306:47"><expr pos:start="306:40" pos:end="306:47"><name pos:start="306:40" pos:end="306:47">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="307:9" pos:end="307:23"><expr pos:start="307:9" pos:end="307:22"><name pos:start="307:9" pos:end="307:13">errno</name> <operator pos:start="307:15" pos:end="307:15">=</operator> <name pos:start="307:17" pos:end="307:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="308:9" pos:end="308:28"><expr pos:start="308:9" pos:end="308:27"><name pos:start="308:9" pos:end="308:11">ret</name> <operator pos:start="308:13" pos:end="308:13">=</operator> <name pos:start="308:15" pos:end="308:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="309:9" pos:end="309:18">goto <name pos:start="309:14" pos:end="309:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="311:5" pos:end="311:88"><expr pos:start="311:5" pos:end="311:87"><name pos:start="311:5" pos:end="311:12">curlcode</name> <operator pos:start="311:14" pos:end="311:14">=</operator> <call pos:start="311:16" pos:end="311:87"><name pos:start="311:16" pos:end="311:31">curl_easy_setopt</name><argument_list pos:start="311:32" pos:end="311:87">(<argument pos:start="311:33" pos:end="311:49"><expr pos:start="311:33" pos:end="311:49"><name pos:start="311:33" pos:end="311:49"><name pos:start="311:33" pos:end="311:36">sock</name><operator pos:start="311:37" pos:end="311:38">-&gt;</operator><name pos:start="311:39" pos:end="311:49">curl_handle</name></name></expr></argument>, <argument pos:start="311:52" pos:end="311:68"><expr pos:start="311:52" pos:end="311:68"><name pos:start="311:52" pos:end="311:68">CURLOPT_PROXYPORT</name></expr></argument>, <argument pos:start="311:71" pos:end="311:86"><expr pos:start="311:71" pos:end="311:86"><name pos:start="311:71" pos:end="311:86"><name pos:start="311:71" pos:end="311:74">opts</name><operator pos:start="311:75" pos:end="311:76">-&gt;</operator><name pos:start="311:77" pos:end="311:86">proxy_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="312:5" pos:end="318:5"><if pos:start="312:5" pos:end="318:5">if <condition pos:start="312:8" pos:end="312:29">(<expr pos:start="312:9" pos:end="312:28"><name pos:start="312:9" pos:end="312:16">curlcode</name> <operator pos:start="312:18" pos:end="312:19">!=</operator> <name pos:start="312:21" pos:end="312:28">CURLE_OK</name></expr>)</condition> <block pos:start="312:31" pos:end="318:5">{<block_content pos:start="313:9" pos:end="317:18">
        <expr_stmt pos:start="313:9" pos:end="314:50"><expr pos:start="313:9" pos:end="314:49"><call pos:start="313:9" pos:end="314:49"><name pos:start="313:9" pos:end="313:19">EST_LOG_ERR</name><argument_list pos:start="313:20" pos:end="314:49">(<argument pos:start="313:21" pos:end="313:73"><expr pos:start="313:21" pos:end="313:73"><literal type="string" pos:start="313:21" pos:end="313:73">"curl_easy_setopt(CURLOPT_PROXYPORT) returned %d: %s"</literal></expr></argument>, <argument pos:start="313:76" pos:end="313:83"><expr pos:start="313:76" pos:end="313:83"><name pos:start="313:76" pos:end="313:83">curlcode</name></expr></argument>,
                    <argument pos:start="314:21" pos:end="314:48"><expr pos:start="314:21" pos:end="314:48"><call pos:start="314:21" pos:end="314:48"><name pos:start="314:21" pos:end="314:38">curl_easy_strerror</name><argument_list pos:start="314:39" pos:end="314:48">(<argument pos:start="314:40" pos:end="314:47"><expr pos:start="314:40" pos:end="314:47"><name pos:start="314:40" pos:end="314:47">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="315:9" pos:end="315:23"><expr pos:start="315:9" pos:end="315:22"><name pos:start="315:9" pos:end="315:13">errno</name> <operator pos:start="315:15" pos:end="315:15">=</operator> <name pos:start="315:17" pos:end="315:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="316:9" pos:end="316:28"><expr pos:start="316:9" pos:end="316:27"><name pos:start="316:9" pos:end="316:11">ret</name> <operator pos:start="316:13" pos:end="316:13">=</operator> <name pos:start="316:15" pos:end="316:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="317:9" pos:end="317:18">goto <name pos:start="317:14" pos:end="317:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="320:5" pos:end="322:7">/*
     * proxy protocol including HTTP tunnel mode
     */</comment>
    <if_stmt pos:start="323:5" pos:end="341:5"><if pos:start="323:5" pos:end="326:5">if <condition pos:start="323:8" pos:end="323:60">(<expr pos:start="323:9" pos:end="323:59"><name pos:start="323:9" pos:end="323:25"><name pos:start="323:9" pos:end="323:12">opts</name><operator pos:start="323:13" pos:end="323:14">-&gt;</operator><name pos:start="323:15" pos:end="323:25">proxy_proto</name></name> <operator pos:start="323:27" pos:end="323:28">==</operator> <name pos:start="323:30" pos:end="323:59">EST_CLIENT_PROXY_HTTP_NOTUNNEL</name></expr>)</condition> <block pos:start="323:62" pos:end="326:5">{<block_content pos:start="324:9" pos:end="325:47">
        <expr_stmt pos:start="324:9" pos:end="324:36"><expr pos:start="324:9" pos:end="324:35"><name pos:start="324:9" pos:end="324:18">proxy_type</name> <operator pos:start="324:20" pos:end="324:20">=</operator> <name pos:start="324:22" pos:end="324:35">CURLPROXY_HTTP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="325:9" pos:end="325:47"><expr pos:start="325:9" pos:end="325:46"><name pos:start="325:9" pos:end="325:22">proxy_type_str</name> <operator pos:start="325:24" pos:end="325:24">=</operator> <literal type="string" pos:start="325:26" pos:end="325:46">"HTTP (no tunneling)"</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="326:7" pos:end="329:5">else if <condition pos:start="326:15" pos:end="326:65">(<expr pos:start="326:16" pos:end="326:64"><name pos:start="326:16" pos:end="326:32"><name pos:start="326:16" pos:end="326:19">opts</name><operator pos:start="326:20" pos:end="326:21">-&gt;</operator><name pos:start="326:22" pos:end="326:32">proxy_proto</name></name> <operator pos:start="326:34" pos:end="326:35">==</operator> <name pos:start="326:37" pos:end="326:64">EST_CLIENT_PROXY_HTTP_TUNNEL</name></expr>)</condition> <block pos:start="326:67" pos:end="329:5">{<block_content pos:start="327:9" pos:end="328:44">
        <expr_stmt pos:start="327:9" pos:end="327:36"><expr pos:start="327:9" pos:end="327:35"><name pos:start="327:9" pos:end="327:18">proxy_type</name> <operator pos:start="327:20" pos:end="327:20">=</operator> <name pos:start="327:22" pos:end="327:35">CURLPROXY_HTTP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="328:9" pos:end="328:44"><expr pos:start="328:9" pos:end="328:43"><name pos:start="328:9" pos:end="328:22">proxy_type_str</name> <operator pos:start="328:24" pos:end="328:24">=</operator> <literal type="string" pos:start="328:26" pos:end="328:43">"HTTP (tunneling)"</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="329:7" pos:end="332:5">else if <condition pos:start="329:15" pos:end="329:60">(<expr pos:start="329:16" pos:end="329:59"><name pos:start="329:16" pos:end="329:32"><name pos:start="329:16" pos:end="329:19">opts</name><operator pos:start="329:20" pos:end="329:21">-&gt;</operator><name pos:start="329:22" pos:end="329:32">proxy_proto</name></name> <operator pos:start="329:34" pos:end="329:35">==</operator> <name pos:start="329:37" pos:end="329:59">EST_CLIENT_PROXY_SOCKS4</name></expr>)</condition> <block pos:start="329:62" pos:end="332:5">{<block_content pos:start="330:9" pos:end="331:34">
        <expr_stmt pos:start="330:9" pos:end="330:38"><expr pos:start="330:9" pos:end="330:37"><name pos:start="330:9" pos:end="330:18">proxy_type</name> <operator pos:start="330:20" pos:end="330:20">=</operator> <name pos:start="330:22" pos:end="330:37">CURLPROXY_SOCKS4</name></expr>;</expr_stmt>
        <expr_stmt pos:start="331:9" pos:end="331:34"><expr pos:start="331:9" pos:end="331:33"><name pos:start="331:9" pos:end="331:22">proxy_type_str</name> <operator pos:start="331:24" pos:end="331:24">=</operator> <literal type="string" pos:start="331:26" pos:end="331:33">"SOCKS4"</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="332:7" pos:end="335:5">else if <condition pos:start="332:15" pos:end="332:60">(<expr pos:start="332:16" pos:end="332:59"><name pos:start="332:16" pos:end="332:32"><name pos:start="332:16" pos:end="332:19">opts</name><operator pos:start="332:20" pos:end="332:21">-&gt;</operator><name pos:start="332:22" pos:end="332:32">proxy_proto</name></name> <operator pos:start="332:34" pos:end="332:35">==</operator> <name pos:start="332:37" pos:end="332:59">EST_CLIENT_PROXY_SOCKS5</name></expr>)</condition> <block pos:start="332:62" pos:end="335:5">{<block_content pos:start="333:9" pos:end="334:34">
        <expr_stmt pos:start="333:9" pos:end="333:38"><expr pos:start="333:9" pos:end="333:37"><name pos:start="333:9" pos:end="333:18">proxy_type</name> <operator pos:start="333:20" pos:end="333:20">=</operator> <name pos:start="333:22" pos:end="333:37">CURLPROXY_SOCKS5</name></expr>;</expr_stmt>
        <expr_stmt pos:start="334:9" pos:end="334:34"><expr pos:start="334:9" pos:end="334:33"><name pos:start="334:9" pos:end="334:22">proxy_type_str</name> <operator pos:start="334:24" pos:end="334:24">=</operator> <literal type="string" pos:start="334:26" pos:end="334:33">"SOCKS5"</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="335:7" pos:end="338:5">else if <condition pos:start="335:15" pos:end="335:61">(<expr pos:start="335:16" pos:end="335:60"><name pos:start="335:16" pos:end="335:32"><name pos:start="335:16" pos:end="335:19">opts</name><operator pos:start="335:20" pos:end="335:21">-&gt;</operator><name pos:start="335:22" pos:end="335:32">proxy_proto</name></name> <operator pos:start="335:34" pos:end="335:35">==</operator> <name pos:start="335:37" pos:end="335:60">EST_CLIENT_PROXY_SOCKS4A</name></expr>)</condition> <block pos:start="335:63" pos:end="338:5">{<block_content pos:start="336:9" pos:end="337:35">
        <expr_stmt pos:start="336:9" pos:end="336:39"><expr pos:start="336:9" pos:end="336:38"><name pos:start="336:9" pos:end="336:18">proxy_type</name> <operator pos:start="336:20" pos:end="336:20">=</operator> <name pos:start="336:22" pos:end="336:38">CURLPROXY_SOCKS4A</name></expr>;</expr_stmt>
        <expr_stmt pos:start="337:9" pos:end="337:35"><expr pos:start="337:9" pos:end="337:34"><name pos:start="337:9" pos:end="337:22">proxy_type_str</name> <operator pos:start="337:24" pos:end="337:24">=</operator> <literal type="string" pos:start="337:26" pos:end="337:34">"SOCKS4A"</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="338:7" pos:end="341:5">else if <condition pos:start="338:15" pos:end="338:69">(<expr pos:start="338:16" pos:end="338:68"><name pos:start="338:16" pos:end="338:32"><name pos:start="338:16" pos:end="338:19">opts</name><operator pos:start="338:20" pos:end="338:21">-&gt;</operator><name pos:start="338:22" pos:end="338:32">proxy_proto</name></name> <operator pos:start="338:34" pos:end="338:35">==</operator> <name pos:start="338:37" pos:end="338:68">EST_CLIENT_PROXY_SOCKS5_HOSTNAME</name></expr>)</condition> <block pos:start="338:71" pos:end="341:5">{<block_content pos:start="339:9" pos:end="340:43">
        <expr_stmt pos:start="339:9" pos:end="339:47"><expr pos:start="339:9" pos:end="339:46"><name pos:start="339:9" pos:end="339:18">proxy_type</name> <operator pos:start="339:20" pos:end="339:20">=</operator> <name pos:start="339:22" pos:end="339:46">CURLPROXY_SOCKS5_HOSTNAME</name></expr>;</expr_stmt>
        <expr_stmt pos:start="340:9" pos:end="340:43"><expr pos:start="340:9" pos:end="340:42"><name pos:start="340:9" pos:end="340:22">proxy_type_str</name> <operator pos:start="340:24" pos:end="340:24">=</operator> <literal type="string" pos:start="340:26" pos:end="340:42">"SOCKS5_HOSTNAME"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="342:5" pos:end="342:82"><expr pos:start="342:5" pos:end="342:81"><name pos:start="342:5" pos:end="342:12">curlcode</name> <operator pos:start="342:14" pos:end="342:14">=</operator> <call pos:start="342:16" pos:end="342:81"><name pos:start="342:16" pos:end="342:31">curl_easy_setopt</name><argument_list pos:start="342:32" pos:end="342:81">(<argument pos:start="342:33" pos:end="342:49"><expr pos:start="342:33" pos:end="342:49"><name pos:start="342:33" pos:end="342:49"><name pos:start="342:33" pos:end="342:36">sock</name><operator pos:start="342:37" pos:end="342:38">-&gt;</operator><name pos:start="342:39" pos:end="342:49">curl_handle</name></name></expr></argument>, <argument pos:start="342:52" pos:end="342:68"><expr pos:start="342:52" pos:end="342:68"><name pos:start="342:52" pos:end="342:68">CURLOPT_PROXYTYPE</name></expr></argument>, <argument pos:start="342:71" pos:end="342:80"><expr pos:start="342:71" pos:end="342:80"><name pos:start="342:71" pos:end="342:80">proxy_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="343:5" pos:end="349:5"><if pos:start="343:5" pos:end="349:5">if <condition pos:start="343:8" pos:end="343:29">(<expr pos:start="343:9" pos:end="343:28"><name pos:start="343:9" pos:end="343:16">curlcode</name> <operator pos:start="343:18" pos:end="343:19">!=</operator> <name pos:start="343:21" pos:end="343:28">CURLE_OK</name></expr>)</condition> <block pos:start="343:31" pos:end="349:5">{<block_content pos:start="344:9" pos:end="348:18">
        <expr_stmt pos:start="344:9" pos:end="345:60"><expr pos:start="344:9" pos:end="345:59"><call pos:start="344:9" pos:end="345:59"><name pos:start="344:9" pos:end="344:19">EST_LOG_ERR</name><argument_list pos:start="344:20" pos:end="345:59">(<argument pos:start="344:21" pos:end="344:73"><expr pos:start="344:21" pos:end="344:73"><literal type="string" pos:start="344:21" pos:end="344:73">"curl_easy_setopt(CURLOPT_PROXYTYPE) returned %d: %s"</literal></expr></argument>,
                    <argument pos:start="345:21" pos:end="345:28"><expr pos:start="345:21" pos:end="345:28"><name pos:start="345:21" pos:end="345:28">curlcode</name></expr></argument>, <argument pos:start="345:31" pos:end="345:58"><expr pos:start="345:31" pos:end="345:58"><call pos:start="345:31" pos:end="345:58"><name pos:start="345:31" pos:end="345:48">curl_easy_strerror</name><argument_list pos:start="345:49" pos:end="345:58">(<argument pos:start="345:50" pos:end="345:57"><expr pos:start="345:50" pos:end="345:57"><name pos:start="345:50" pos:end="345:57">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="346:9" pos:end="346:23"><expr pos:start="346:9" pos:end="346:22"><name pos:start="346:9" pos:end="346:13">errno</name> <operator pos:start="346:15" pos:end="346:15">=</operator> <name pos:start="346:17" pos:end="346:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="347:9" pos:end="347:28"><expr pos:start="347:9" pos:end="347:27"><name pos:start="347:9" pos:end="347:11">ret</name> <operator pos:start="347:13" pos:end="347:13">=</operator> <name pos:start="347:15" pos:end="347:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="348:9" pos:end="348:18">goto <name pos:start="348:14" pos:end="348:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="350:5" pos:end="359:5"><if pos:start="350:5" pos:end="359:5">if <condition pos:start="350:8" pos:end="350:58">(<expr pos:start="350:9" pos:end="350:57"><name pos:start="350:9" pos:end="350:25"><name pos:start="350:9" pos:end="350:12">opts</name><operator pos:start="350:13" pos:end="350:14">-&gt;</operator><name pos:start="350:15" pos:end="350:25">proxy_proto</name></name> <operator pos:start="350:27" pos:end="350:28">==</operator> <name pos:start="350:30" pos:end="350:57">EST_CLIENT_PROXY_HTTP_TUNNEL</name></expr>)</condition> <block pos:start="350:60" pos:end="359:5">{<block_content pos:start="351:9" pos:end="358:9">
        <expr_stmt pos:start="351:9" pos:end="351:83"><expr pos:start="351:9" pos:end="351:82"><name pos:start="351:9" pos:end="351:16">curlcode</name> <operator pos:start="351:18" pos:end="351:18">=</operator> <call pos:start="351:20" pos:end="351:82"><name pos:start="351:20" pos:end="351:35">curl_easy_setopt</name><argument_list pos:start="351:36" pos:end="351:82">(<argument pos:start="351:37" pos:end="351:53"><expr pos:start="351:37" pos:end="351:53"><name pos:start="351:37" pos:end="351:53"><name pos:start="351:37" pos:end="351:40">sock</name><operator pos:start="351:41" pos:end="351:42">-&gt;</operator><name pos:start="351:43" pos:end="351:53">curl_handle</name></name></expr></argument>, <argument pos:start="351:56" pos:end="351:78"><expr pos:start="351:56" pos:end="351:78"><name pos:start="351:56" pos:end="351:78">CURLOPT_HTTPPROXYTUNNEL</name></expr></argument>, <argument pos:start="351:81" pos:end="351:81"><expr pos:start="351:81" pos:end="351:81"><literal type="number" pos:start="351:81" pos:end="351:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="352:9" pos:end="358:9"><if pos:start="352:9" pos:end="358:9">if <condition pos:start="352:12" pos:end="352:33">(<expr pos:start="352:13" pos:end="352:32"><name pos:start="352:13" pos:end="352:20">curlcode</name> <operator pos:start="352:22" pos:end="352:23">!=</operator> <name pos:start="352:25" pos:end="352:32">CURLE_OK</name></expr>)</condition> <block pos:start="352:35" pos:end="358:9">{<block_content pos:start="353:13" pos:end="357:22">
            <expr_stmt pos:start="353:13" pos:end="354:64"><expr pos:start="353:13" pos:end="354:63"><call pos:start="353:13" pos:end="354:63"><name pos:start="353:13" pos:end="353:23">EST_LOG_ERR</name><argument_list pos:start="353:24" pos:end="354:63">(<argument pos:start="353:25" pos:end="353:83"><expr pos:start="353:25" pos:end="353:83"><literal type="string" pos:start="353:25" pos:end="353:83">"curl_easy_setopt(CURLOPT_HTTPPROXYTUNNEL) returned %d: %s"</literal></expr></argument>,
                        <argument pos:start="354:25" pos:end="354:32"><expr pos:start="354:25" pos:end="354:32"><name pos:start="354:25" pos:end="354:32">curlcode</name></expr></argument>, <argument pos:start="354:35" pos:end="354:62"><expr pos:start="354:35" pos:end="354:62"><call pos:start="354:35" pos:end="354:62"><name pos:start="354:35" pos:end="354:52">curl_easy_strerror</name><argument_list pos:start="354:53" pos:end="354:62">(<argument pos:start="354:54" pos:end="354:61"><expr pos:start="354:54" pos:end="354:61"><name pos:start="354:54" pos:end="354:61">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="355:13" pos:end="355:27"><expr pos:start="355:13" pos:end="355:26"><name pos:start="355:13" pos:end="355:17">errno</name> <operator pos:start="355:19" pos:end="355:19">=</operator> <name pos:start="355:21" pos:end="355:26">EINVAL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="356:13" pos:end="356:32"><expr pos:start="356:13" pos:end="356:31"><name pos:start="356:13" pos:end="356:15">ret</name> <operator pos:start="356:17" pos:end="356:17">=</operator> <name pos:start="356:19" pos:end="356:31">TCW_ERR_OTHER</name></expr>;</expr_stmt>
            <goto pos:start="357:13" pos:end="357:22">goto <name pos:start="357:18" pos:end="357:21">done</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:100"><expr pos:start="361:5" pos:end="361:99"><name pos:start="361:5" pos:end="361:12">curlcode</name> <operator pos:start="361:14" pos:end="361:14">=</operator> <call pos:start="361:16" pos:end="361:99"><name pos:start="361:16" pos:end="361:31">curl_easy_setopt</name><argument_list pos:start="361:32" pos:end="361:99">(<argument pos:start="361:33" pos:end="361:49"><expr pos:start="361:33" pos:end="361:49"><name pos:start="361:33" pos:end="361:49"><name pos:start="361:33" pos:end="361:36">sock</name><operator pos:start="361:37" pos:end="361:38">-&gt;</operator><name pos:start="361:39" pos:end="361:49">curl_handle</name></name></expr></argument>, <argument pos:start="361:52" pos:end="361:68"><expr pos:start="361:52" pos:end="361:68"><name pos:start="361:52" pos:end="361:68">CURLOPT_PROXYAUTH</name></expr></argument>, <argument pos:start="361:71" pos:end="361:98"><expr pos:start="361:71" pos:end="361:98"><name pos:start="361:71" pos:end="361:84">CURLAUTH_BASIC</name><operator pos:start="361:85" pos:end="361:85">|</operator><name pos:start="361:86" pos:end="361:98">CURLAUTH_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="362:5" pos:end="368:5"><if pos:start="362:5" pos:end="368:5">if <condition pos:start="362:8" pos:end="362:29">(<expr pos:start="362:9" pos:end="362:28"><name pos:start="362:9" pos:end="362:16">curlcode</name> <operator pos:start="362:18" pos:end="362:19">!=</operator> <name pos:start="362:21" pos:end="362:28">CURLE_OK</name></expr>)</condition> <block pos:start="362:31" pos:end="368:5">{<block_content pos:start="363:9" pos:end="367:18">
        <expr_stmt pos:start="363:9" pos:end="364:60"><expr pos:start="363:9" pos:end="364:59"><call pos:start="363:9" pos:end="364:59"><name pos:start="363:9" pos:end="363:19">EST_LOG_ERR</name><argument_list pos:start="363:20" pos:end="364:59">(<argument pos:start="363:21" pos:end="363:73"><expr pos:start="363:21" pos:end="363:73"><literal type="string" pos:start="363:21" pos:end="363:73">"curl_easy_setopt(CURLOPT_PROXYAUTH) returned %d: %s"</literal></expr></argument>,
                    <argument pos:start="364:21" pos:end="364:28"><expr pos:start="364:21" pos:end="364:28"><name pos:start="364:21" pos:end="364:28">curlcode</name></expr></argument>, <argument pos:start="364:31" pos:end="364:58"><expr pos:start="364:31" pos:end="364:58"><call pos:start="364:31" pos:end="364:58"><name pos:start="364:31" pos:end="364:48">curl_easy_strerror</name><argument_list pos:start="364:49" pos:end="364:58">(<argument pos:start="364:50" pos:end="364:57"><expr pos:start="364:50" pos:end="364:57"><name pos:start="364:50" pos:end="364:57">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="365:9" pos:end="365:23"><expr pos:start="365:9" pos:end="365:22"><name pos:start="365:9" pos:end="365:13">errno</name> <operator pos:start="365:15" pos:end="365:15">=</operator> <name pos:start="365:17" pos:end="365:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="366:9" pos:end="366:28"><expr pos:start="366:9" pos:end="366:27"><name pos:start="366:9" pos:end="366:11">ret</name> <operator pos:start="366:13" pos:end="366:13">=</operator> <name pos:start="366:15" pos:end="366:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="367:9" pos:end="367:18">goto <name pos:start="367:14" pos:end="367:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="370:5" pos:end="372:7">/*
     * username and password
     */</comment>
    <if_stmt pos:start="373:5" pos:end="409:5"><if pos:start="373:5" pos:end="409:5">if <condition pos:start="373:8" pos:end="373:53">(<expr pos:start="373:9" pos:end="373:52"><name pos:start="373:9" pos:end="373:28"><name pos:start="373:9" pos:end="373:12">opts</name><operator pos:start="373:13" pos:end="373:14">-&gt;</operator><name pos:start="373:15" pos:end="373:28">proxy_username</name></name> <operator pos:start="373:30" pos:end="373:31">&amp;&amp;</operator> <name pos:start="373:33" pos:end="373:52"><name pos:start="373:33" pos:end="373:36">opts</name><operator pos:start="373:37" pos:end="373:38">-&gt;</operator><name pos:start="373:39" pos:end="373:52">proxy_password</name></name></expr>)</condition> <block pos:start="373:55" pos:end="409:5">{<block_content pos:start="374:9" pos:end="408:9">
        <expr_stmt pos:start="374:9" pos:end="375:58"><expr pos:start="374:9" pos:end="375:57"><name pos:start="374:9" pos:end="374:16">curlcode</name> <operator pos:start="374:18" pos:end="374:18">=</operator> <call pos:start="374:20" pos:end="375:57"><name pos:start="374:20" pos:end="374:35">curl_easy_setopt</name><argument_list pos:start="374:36" pos:end="375:57">(<argument pos:start="374:37" pos:end="374:53"><expr pos:start="374:37" pos:end="374:53"><name pos:start="374:37" pos:end="374:53"><name pos:start="374:37" pos:end="374:40">sock</name><operator pos:start="374:41" pos:end="374:42">-&gt;</operator><name pos:start="374:43" pos:end="374:53">curl_handle</name></name></expr></argument>, <argument pos:start="374:56" pos:end="374:76"><expr pos:start="374:56" pos:end="374:76"><name pos:start="374:56" pos:end="374:76">CURLOPT_PROXYUSERNAME</name></expr></argument>,
                                    <argument pos:start="375:37" pos:end="375:56"><expr pos:start="375:37" pos:end="375:56"><name pos:start="375:37" pos:end="375:56"><name pos:start="375:37" pos:end="375:40">opts</name><operator pos:start="375:41" pos:end="375:42">-&gt;</operator><name pos:start="375:43" pos:end="375:56">proxy_username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="376:9" pos:end="382:9"><if pos:start="376:9" pos:end="382:9">if <condition pos:start="376:12" pos:end="376:33">(<expr pos:start="376:13" pos:end="376:32"><name pos:start="376:13" pos:end="376:20">curlcode</name> <operator pos:start="376:22" pos:end="376:23">!=</operator> <name pos:start="376:25" pos:end="376:32">CURLE_OK</name></expr>)</condition> <block pos:start="376:35" pos:end="382:9">{<block_content pos:start="377:13" pos:end="381:22">
            <expr_stmt pos:start="377:13" pos:end="378:64"><expr pos:start="377:13" pos:end="378:63"><call pos:start="377:13" pos:end="378:63"><name pos:start="377:13" pos:end="377:23">EST_LOG_ERR</name><argument_list pos:start="377:24" pos:end="378:63">(<argument pos:start="377:25" pos:end="377:81"><expr pos:start="377:25" pos:end="377:81"><literal type="string" pos:start="377:25" pos:end="377:81">"curl_easy_setopt(CURLOPT_PROXYUSERNAME) returned %d: %s"</literal></expr></argument>,
                        <argument pos:start="378:25" pos:end="378:32"><expr pos:start="378:25" pos:end="378:32"><name pos:start="378:25" pos:end="378:32">curlcode</name></expr></argument>, <argument pos:start="378:35" pos:end="378:62"><expr pos:start="378:35" pos:end="378:62"><call pos:start="378:35" pos:end="378:62"><name pos:start="378:35" pos:end="378:52">curl_easy_strerror</name><argument_list pos:start="378:53" pos:end="378:62">(<argument pos:start="378:54" pos:end="378:61"><expr pos:start="378:54" pos:end="378:61"><name pos:start="378:54" pos:end="378:61">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="379:13" pos:end="379:27"><expr pos:start="379:13" pos:end="379:26"><name pos:start="379:13" pos:end="379:17">errno</name> <operator pos:start="379:19" pos:end="379:19">=</operator> <name pos:start="379:21" pos:end="379:26">EINVAL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="380:13" pos:end="380:32"><expr pos:start="380:13" pos:end="380:31"><name pos:start="380:13" pos:end="380:15">ret</name> <operator pos:start="380:17" pos:end="380:17">=</operator> <name pos:start="380:19" pos:end="380:31">TCW_ERR_OTHER</name></expr>;</expr_stmt>
            <goto pos:start="381:13" pos:end="381:22">goto <name pos:start="381:18" pos:end="381:21">done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="383:9" pos:end="384:58"><expr pos:start="383:9" pos:end="384:57"><name pos:start="383:9" pos:end="383:16">curlcode</name> <operator pos:start="383:18" pos:end="383:18">=</operator> <call pos:start="383:20" pos:end="384:57"><name pos:start="383:20" pos:end="383:35">curl_easy_setopt</name><argument_list pos:start="383:36" pos:end="384:57">(<argument pos:start="383:37" pos:end="383:53"><expr pos:start="383:37" pos:end="383:53"><name pos:start="383:37" pos:end="383:53"><name pos:start="383:37" pos:end="383:40">sock</name><operator pos:start="383:41" pos:end="383:42">-&gt;</operator><name pos:start="383:43" pos:end="383:53">curl_handle</name></name></expr></argument>, <argument pos:start="383:56" pos:end="383:76"><expr pos:start="383:56" pos:end="383:76"><name pos:start="383:56" pos:end="383:76">CURLOPT_PROXYPASSWORD</name></expr></argument>,
                                    <argument pos:start="384:37" pos:end="384:56"><expr pos:start="384:37" pos:end="384:56"><name pos:start="384:37" pos:end="384:56"><name pos:start="384:37" pos:end="384:40">opts</name><operator pos:start="384:41" pos:end="384:42">-&gt;</operator><name pos:start="384:43" pos:end="384:56">proxy_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="385:9" pos:end="391:9"><if pos:start="385:9" pos:end="391:9">if <condition pos:start="385:12" pos:end="385:33">(<expr pos:start="385:13" pos:end="385:32"><name pos:start="385:13" pos:end="385:20">curlcode</name> <operator pos:start="385:22" pos:end="385:23">!=</operator> <name pos:start="385:25" pos:end="385:32">CURLE_OK</name></expr>)</condition> <block pos:start="385:35" pos:end="391:9">{<block_content pos:start="386:13" pos:end="390:22">
            <expr_stmt pos:start="386:13" pos:end="387:64"><expr pos:start="386:13" pos:end="387:63"><call pos:start="386:13" pos:end="387:63"><name pos:start="386:13" pos:end="386:23">EST_LOG_ERR</name><argument_list pos:start="386:24" pos:end="387:63">(<argument pos:start="386:25" pos:end="386:81"><expr pos:start="386:25" pos:end="386:81"><literal type="string" pos:start="386:25" pos:end="386:81">"curl_easy_setopt(CURLOPT_PROXYPASSWORD) returned %d: %s"</literal></expr></argument>,
                        <argument pos:start="387:25" pos:end="387:32"><expr pos:start="387:25" pos:end="387:32"><name pos:start="387:25" pos:end="387:32">curlcode</name></expr></argument>, <argument pos:start="387:35" pos:end="387:62"><expr pos:start="387:35" pos:end="387:62"><call pos:start="387:35" pos:end="387:62"><name pos:start="387:35" pos:end="387:52">curl_easy_strerror</name><argument_list pos:start="387:53" pos:end="387:62">(<argument pos:start="387:54" pos:end="387:61"><expr pos:start="387:54" pos:end="387:61"><name pos:start="387:54" pos:end="387:61">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="388:13" pos:end="388:27"><expr pos:start="388:13" pos:end="388:26"><name pos:start="388:13" pos:end="388:17">errno</name> <operator pos:start="388:19" pos:end="388:19">=</operator> <name pos:start="388:21" pos:end="388:26">EINVAL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="389:13" pos:end="389:32"><expr pos:start="389:13" pos:end="389:31"><name pos:start="389:13" pos:end="389:15">ret</name> <operator pos:start="389:17" pos:end="389:17">=</operator> <name pos:start="389:19" pos:end="389:31">TCW_ERR_OTHER</name></expr>;</expr_stmt>
            <goto pos:start="390:13" pos:end="390:22">goto <name pos:start="390:18" pos:end="390:21">done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="392:9" pos:end="392:22"><expr pos:start="392:9" pos:end="392:21"><name pos:start="392:9" pos:end="392:17">auth_bits</name> <operator pos:start="392:19" pos:end="392:19">=</operator> <literal type="number" pos:start="392:21" pos:end="392:21">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="393:9" pos:end="395:9"><if pos:start="393:9" pos:end="395:9">if <condition pos:start="393:12" pos:end="393:59">(<expr pos:start="393:13" pos:end="393:58"><name pos:start="393:13" pos:end="393:28"><name pos:start="393:13" pos:end="393:16">opts</name><operator pos:start="393:17" pos:end="393:18">-&gt;</operator><name pos:start="393:19" pos:end="393:28">proxy_auth</name></name> <operator pos:start="393:30" pos:end="393:30">&amp;</operator> <name pos:start="393:32" pos:end="393:58">EST_CLIENT_PROXY_AUTH_BASIC</name></expr>)</condition> <block pos:start="393:61" pos:end="395:9">{<block_content pos:start="394:13" pos:end="394:40">
            <expr_stmt pos:start="394:13" pos:end="394:40"><expr pos:start="394:13" pos:end="394:39"><name pos:start="394:13" pos:end="394:21">auth_bits</name> <operator pos:start="394:23" pos:end="394:24">|=</operator> <name pos:start="394:26" pos:end="394:39">CURLAUTH_BASIC</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="396:9" pos:end="398:9"><if pos:start="396:9" pos:end="398:9">if <condition pos:start="396:12" pos:end="396:58">(<expr pos:start="396:13" pos:end="396:57"><name pos:start="396:13" pos:end="396:28"><name pos:start="396:13" pos:end="396:16">opts</name><operator pos:start="396:17" pos:end="396:18">-&gt;</operator><name pos:start="396:19" pos:end="396:28">proxy_auth</name></name> <operator pos:start="396:30" pos:end="396:30">&amp;</operator> <name pos:start="396:32" pos:end="396:57">EST_CLIENT_PROXY_AUTH_NTLM</name></expr>)</condition> <block pos:start="396:60" pos:end="398:9">{<block_content pos:start="397:13" pos:end="397:39">
            <expr_stmt pos:start="397:13" pos:end="397:39"><expr pos:start="397:13" pos:end="397:38"><name pos:start="397:13" pos:end="397:21">auth_bits</name> <operator pos:start="397:23" pos:end="397:24">|=</operator> <name pos:start="397:26" pos:end="397:38">CURLAUTH_NTLM</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="399:9" pos:end="408:9"><if pos:start="399:9" pos:end="408:9">if <condition pos:start="399:12" pos:end="399:22">(<expr pos:start="399:13" pos:end="399:21"><name pos:start="399:13" pos:end="399:21">auth_bits</name></expr>)</condition> <block pos:start="399:24" pos:end="408:9">{<block_content pos:start="400:13" pos:end="407:13">
            <expr_stmt pos:start="400:13" pos:end="400:89"><expr pos:start="400:13" pos:end="400:88"><name pos:start="400:13" pos:end="400:20">curlcode</name> <operator pos:start="400:22" pos:end="400:22">=</operator> <call pos:start="400:24" pos:end="400:88"><name pos:start="400:24" pos:end="400:39">curl_easy_setopt</name><argument_list pos:start="400:40" pos:end="400:88">(<argument pos:start="400:41" pos:end="400:57"><expr pos:start="400:41" pos:end="400:57"><name pos:start="400:41" pos:end="400:57"><name pos:start="400:41" pos:end="400:44">sock</name><operator pos:start="400:45" pos:end="400:46">-&gt;</operator><name pos:start="400:47" pos:end="400:57">curl_handle</name></name></expr></argument>, <argument pos:start="400:60" pos:end="400:76"><expr pos:start="400:60" pos:end="400:76"><name pos:start="400:60" pos:end="400:76">CURLOPT_PROXYAUTH</name></expr></argument>, <argument pos:start="400:79" pos:end="400:87"><expr pos:start="400:79" pos:end="400:87"><name pos:start="400:79" pos:end="400:87">auth_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="401:13" pos:end="407:13"><if pos:start="401:13" pos:end="407:13">if <condition pos:start="401:16" pos:end="401:37">(<expr pos:start="401:17" pos:end="401:36"><name pos:start="401:17" pos:end="401:24">curlcode</name> <operator pos:start="401:26" pos:end="401:27">!=</operator> <name pos:start="401:29" pos:end="401:36">CURLE_OK</name></expr>)</condition> <block pos:start="401:39" pos:end="407:13">{<block_content pos:start="402:17" pos:end="406:26">
                <expr_stmt pos:start="402:17" pos:end="403:68"><expr pos:start="402:17" pos:end="403:67"><call pos:start="402:17" pos:end="403:67"><name pos:start="402:17" pos:end="402:27">EST_LOG_ERR</name><argument_list pos:start="402:28" pos:end="403:67">(<argument pos:start="402:29" pos:end="402:81"><expr pos:start="402:29" pos:end="402:81"><literal type="string" pos:start="402:29" pos:end="402:81">"curl_easy_setopt(CURLOPT_PROXYAUTH) returned %d: %s"</literal></expr></argument>,
                            <argument pos:start="403:29" pos:end="403:36"><expr pos:start="403:29" pos:end="403:36"><name pos:start="403:29" pos:end="403:36">curlcode</name></expr></argument>, <argument pos:start="403:39" pos:end="403:66"><expr pos:start="403:39" pos:end="403:66"><call pos:start="403:39" pos:end="403:66"><name pos:start="403:39" pos:end="403:56">curl_easy_strerror</name><argument_list pos:start="403:57" pos:end="403:66">(<argument pos:start="403:58" pos:end="403:65"><expr pos:start="403:58" pos:end="403:65"><name pos:start="403:58" pos:end="403:65">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="404:17" pos:end="404:31"><expr pos:start="404:17" pos:end="404:30"><name pos:start="404:17" pos:end="404:21">errno</name> <operator pos:start="404:23" pos:end="404:23">=</operator> <name pos:start="404:25" pos:end="404:30">EINVAL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="405:17" pos:end="405:36"><expr pos:start="405:17" pos:end="405:35"><name pos:start="405:17" pos:end="405:19">ret</name> <operator pos:start="405:21" pos:end="405:21">=</operator> <name pos:start="405:23" pos:end="405:35">TCW_ERR_OTHER</name></expr>;</expr_stmt>
                <goto pos:start="406:17" pos:end="406:26">goto <name pos:start="406:22" pos:end="406:25">done</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="411:5" pos:end="413:7">/*
     * no signals generated from libcurl
     */</comment>
    <expr_stmt pos:start="414:5" pos:end="414:72"><expr pos:start="414:5" pos:end="414:71"><name pos:start="414:5" pos:end="414:12">curlcode</name> <operator pos:start="414:14" pos:end="414:14">=</operator> <call pos:start="414:16" pos:end="414:71"><name pos:start="414:16" pos:end="414:31">curl_easy_setopt</name><argument_list pos:start="414:32" pos:end="414:71">(<argument pos:start="414:33" pos:end="414:49"><expr pos:start="414:33" pos:end="414:49"><name pos:start="414:33" pos:end="414:49"><name pos:start="414:33" pos:end="414:36">sock</name><operator pos:start="414:37" pos:end="414:38">-&gt;</operator><name pos:start="414:39" pos:end="414:49">curl_handle</name></name></expr></argument>, <argument pos:start="414:52" pos:end="414:67"><expr pos:start="414:52" pos:end="414:67"><name pos:start="414:52" pos:end="414:67">CURLOPT_NOSIGNAL</name></expr></argument>, <argument pos:start="414:70" pos:end="414:70"><expr pos:start="414:70" pos:end="414:70"><literal type="number" pos:start="414:70" pos:end="414:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="415:5" pos:end="421:5"><if pos:start="415:5" pos:end="421:5">if <condition pos:start="415:8" pos:end="415:29">(<expr pos:start="415:9" pos:end="415:28"><name pos:start="415:9" pos:end="415:16">curlcode</name> <operator pos:start="415:18" pos:end="415:19">!=</operator> <name pos:start="415:21" pos:end="415:28">CURLE_OK</name></expr>)</condition> <block pos:start="415:31" pos:end="421:5">{<block_content pos:start="416:9" pos:end="420:18">
        <expr_stmt pos:start="416:9" pos:end="417:60"><expr pos:start="416:9" pos:end="417:59"><call pos:start="416:9" pos:end="417:59"><name pos:start="416:9" pos:end="416:19">EST_LOG_ERR</name><argument_list pos:start="416:20" pos:end="417:59">(<argument pos:start="416:21" pos:end="416:72"><expr pos:start="416:21" pos:end="416:72"><literal type="string" pos:start="416:21" pos:end="416:72">"curl_easy_setopt(CURLOPT_NOSIGNAL) returned %d: %s"</literal></expr></argument>,
                    <argument pos:start="417:21" pos:end="417:28"><expr pos:start="417:21" pos:end="417:28"><name pos:start="417:21" pos:end="417:28">curlcode</name></expr></argument>, <argument pos:start="417:31" pos:end="417:58"><expr pos:start="417:31" pos:end="417:58"><call pos:start="417:31" pos:end="417:58"><name pos:start="417:31" pos:end="417:48">curl_easy_strerror</name><argument_list pos:start="417:49" pos:end="417:58">(<argument pos:start="417:50" pos:end="417:57"><expr pos:start="417:50" pos:end="417:57"><name pos:start="417:50" pos:end="417:57">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="418:9" pos:end="418:23"><expr pos:start="418:9" pos:end="418:22"><name pos:start="418:9" pos:end="418:13">errno</name> <operator pos:start="418:15" pos:end="418:15">=</operator> <name pos:start="418:17" pos:end="418:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="419:9" pos:end="419:28"><expr pos:start="419:9" pos:end="419:27"><name pos:start="419:9" pos:end="419:11">ret</name> <operator pos:start="419:13" pos:end="419:13">=</operator> <name pos:start="419:15" pos:end="419:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="420:9" pos:end="420:18">goto <name pos:start="420:14" pos:end="420:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="423:5" pos:end="425:7">/*
     * perform the curl request
     */</comment>
    <expr_stmt pos:start="426:5" pos:end="426:78"><expr pos:start="426:5" pos:end="426:77"><call pos:start="426:5" pos:end="426:77"><name pos:start="426:5" pos:end="426:16">EST_LOG_INFO</name><argument_list pos:start="426:17" pos:end="426:77">(<argument pos:start="426:18" pos:end="426:55"><expr pos:start="426:18" pos:end="426:55"><literal type="string" pos:start="426:18" pos:end="426:55">"curl_easy_perform(%s), proxy type %s"</literal></expr></argument>, <argument pos:start="426:58" pos:end="426:60"><expr pos:start="426:58" pos:end="426:60"><name pos:start="426:58" pos:end="426:60">url</name></expr></argument>, <argument pos:start="426:63" pos:end="426:76"><expr pos:start="426:63" pos:end="426:76"><name pos:start="426:63" pos:end="426:76">proxy_type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="427:5" pos:end="427:52"><expr pos:start="427:5" pos:end="427:51"><name pos:start="427:5" pos:end="427:12">curlcode</name> <operator pos:start="427:14" pos:end="427:14">=</operator> <call pos:start="427:16" pos:end="427:51"><name pos:start="427:16" pos:end="427:32">curl_easy_perform</name><argument_list pos:start="427:33" pos:end="427:51">(<argument pos:start="427:34" pos:end="427:50"><expr pos:start="427:34" pos:end="427:50"><name pos:start="427:34" pos:end="427:50"><name pos:start="427:34" pos:end="427:37">sock</name><operator pos:start="427:38" pos:end="427:39">-&gt;</operator><name pos:start="427:40" pos:end="427:50">curl_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="428:5" pos:end="441:5"><if pos:start="428:5" pos:end="441:5">if <condition pos:start="428:8" pos:end="428:29">(<expr pos:start="428:9" pos:end="428:28"><name pos:start="428:9" pos:end="428:16">curlcode</name> <operator pos:start="428:18" pos:end="428:19">!=</operator> <name pos:start="428:21" pos:end="428:28">CURLE_OK</name></expr>)</condition> <block pos:start="428:31" pos:end="441:5">{<block_content pos:start="429:9" pos:end="440:9">
        <expr_stmt pos:start="429:9" pos:end="430:50"><expr pos:start="429:9" pos:end="430:49"><call pos:start="429:9" pos:end="430:49"><name pos:start="429:9" pos:end="429:19">EST_LOG_ERR</name><argument_list pos:start="429:20" pos:end="430:49">(<argument pos:start="429:21" pos:end="429:59"><expr pos:start="429:21" pos:end="429:59"><literal type="string" pos:start="429:21" pos:end="429:59">"curl_easy_perform(%s) returned %d: %s"</literal></expr></argument>, <argument pos:start="429:62" pos:end="429:64"><expr pos:start="429:62" pos:end="429:64"><name pos:start="429:62" pos:end="429:64">url</name></expr></argument>, <argument pos:start="429:67" pos:end="429:74"><expr pos:start="429:67" pos:end="429:74"><name pos:start="429:67" pos:end="429:74">curlcode</name></expr></argument>,
                    <argument pos:start="430:21" pos:end="430:48"><expr pos:start="430:21" pos:end="430:48"><call pos:start="430:21" pos:end="430:48"><name pos:start="430:21" pos:end="430:38">curl_easy_strerror</name><argument_list pos:start="430:39" pos:end="430:48">(<argument pos:start="430:40" pos:end="430:47"><expr pos:start="430:40" pos:end="430:47"><name pos:start="430:40" pos:end="430:47">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="431:9" pos:end="440:9"><if pos:start="431:9" pos:end="436:9">if <condition pos:start="431:12" pos:end="432:51">(<expr pos:start="431:13" pos:end="432:50"><name pos:start="431:13" pos:end="431:20">curlcode</name> <operator pos:start="431:22" pos:end="431:23">==</operator> <name pos:start="431:25" pos:end="431:51">CURLE_COULDNT_RESOLVE_PROXY</name> <operator pos:start="431:53" pos:end="431:54">||</operator>
            <name pos:start="432:13" pos:end="432:20">curlcode</name> <operator pos:start="432:22" pos:end="432:23">==</operator> <name pos:start="432:25" pos:end="432:50">CURLE_COULDNT_RESOLVE_HOST</name></expr>)</condition> <block pos:start="432:53" pos:end="436:9">{<block_content pos:start="433:13" pos:end="435:22">
            <expr_stmt pos:start="433:13" pos:end="433:34"><expr pos:start="433:13" pos:end="433:33"><call pos:start="433:13" pos:end="433:33"><name pos:start="433:13" pos:end="433:31">SET_SOCK_ERR_NONAME</name><argument_list pos:start="433:32" pos:end="433:33">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="434:13" pos:end="434:33"><expr pos:start="434:13" pos:end="434:32"><name pos:start="434:13" pos:end="434:15">ret</name> <operator pos:start="434:17" pos:end="434:17">=</operator> <name pos:start="434:19" pos:end="434:32">TCW_ERR_RESOLV</name></expr>;</expr_stmt>
            <goto pos:start="435:13" pos:end="435:22">goto <name pos:start="435:18" pos:end="435:21">done</name>;</goto>
        </block_content>}</block></if> <else pos:start="436:11" pos:end="440:9">else <block pos:start="436:16" pos:end="440:9">{<block_content pos:start="437:13" pos:end="439:22">
            <expr_stmt pos:start="437:13" pos:end="437:32"><expr pos:start="437:13" pos:end="437:31"><call pos:start="437:13" pos:end="437:31"><name pos:start="437:13" pos:end="437:29">SET_SOCK_ERR_CONN</name><argument_list pos:start="437:30" pos:end="437:31">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="438:13" pos:end="438:34"><expr pos:start="438:13" pos:end="438:33"><name pos:start="438:13" pos:end="438:15">ret</name> <operator pos:start="438:17" pos:end="438:17">=</operator> <name pos:start="438:19" pos:end="438:33">TCW_ERR_CONNECT</name></expr>;</expr_stmt>
            <goto pos:start="439:13" pos:end="439:22">goto <name pos:start="439:18" pos:end="439:21">done</name>;</goto>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="443:5" pos:end="445:7">/*
     * retrieve the socket from libcurl
     */</comment>
    <expr_stmt pos:start="446:5" pos:end="447:47"><expr pos:start="446:5" pos:end="447:46"><name pos:start="446:5" pos:end="446:12">curlcode</name> <operator pos:start="446:14" pos:end="446:14">=</operator> <call pos:start="446:16" pos:end="447:46"><name pos:start="446:16" pos:end="446:32">curl_easy_getinfo</name><argument_list pos:start="446:33" pos:end="447:46">(<argument pos:start="446:34" pos:end="446:50"><expr pos:start="446:34" pos:end="446:50"><name pos:start="446:34" pos:end="446:50"><name pos:start="446:34" pos:end="446:37">sock</name><operator pos:start="446:38" pos:end="446:39">-&gt;</operator><name pos:start="446:40" pos:end="446:50">curl_handle</name></name></expr></argument>, <argument pos:start="446:53" pos:end="446:71"><expr pos:start="446:53" pos:end="446:71"><name pos:start="446:53" pos:end="446:71">CURLINFO_LASTSOCKET</name></expr></argument>,
                                 <argument pos:start="447:34" pos:end="447:45"><expr pos:start="447:34" pos:end="447:45"><operator pos:start="447:34" pos:end="447:34">&amp;</operator><name pos:start="447:35" pos:end="447:45">curl_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="448:5" pos:end="454:5"><if pos:start="448:5" pos:end="454:5">if <condition pos:start="448:8" pos:end="448:29">(<expr pos:start="448:9" pos:end="448:28"><name pos:start="448:9" pos:end="448:16">curlcode</name> <operator pos:start="448:18" pos:end="448:19">!=</operator> <name pos:start="448:21" pos:end="448:28">CURLE_OK</name></expr>)</condition> <block pos:start="448:31" pos:end="454:5">{<block_content pos:start="449:9" pos:end="453:18">
        <expr_stmt pos:start="449:9" pos:end="450:60"><expr pos:start="449:9" pos:end="450:59"><call pos:start="449:9" pos:end="450:59"><name pos:start="449:9" pos:end="449:19">EST_LOG_ERR</name><argument_list pos:start="449:20" pos:end="450:59">(<argument pos:start="449:21" pos:end="449:76"><expr pos:start="449:21" pos:end="449:76"><literal type="string" pos:start="449:21" pos:end="449:76">"curl_easy_getinfo(CURLINFO_LASTSOCKET) returned %d: %s"</literal></expr></argument>,
                    <argument pos:start="450:21" pos:end="450:28"><expr pos:start="450:21" pos:end="450:28"><name pos:start="450:21" pos:end="450:28">curlcode</name></expr></argument>, <argument pos:start="450:31" pos:end="450:58"><expr pos:start="450:31" pos:end="450:58"><call pos:start="450:31" pos:end="450:58"><name pos:start="450:31" pos:end="450:48">curl_easy_strerror</name><argument_list pos:start="450:49" pos:end="450:58">(<argument pos:start="450:50" pos:end="450:57"><expr pos:start="450:50" pos:end="450:57"><name pos:start="450:50" pos:end="450:57">curlcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="451:9" pos:end="451:23"><expr pos:start="451:9" pos:end="451:22"><name pos:start="451:9" pos:end="451:13">errno</name> <operator pos:start="451:15" pos:end="451:15">=</operator> <name pos:start="451:17" pos:end="451:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="452:9" pos:end="452:28"><expr pos:start="452:9" pos:end="452:27"><name pos:start="452:9" pos:end="452:11">ret</name> <operator pos:start="452:13" pos:end="452:13">=</operator> <name pos:start="452:15" pos:end="452:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="453:9" pos:end="453:18">goto <name pos:start="453:14" pos:end="453:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="455:5" pos:end="460:5"><if pos:start="455:5" pos:end="460:5">if <condition pos:start="455:8" pos:end="455:26">(<expr pos:start="455:9" pos:end="455:25"><name pos:start="455:9" pos:end="455:19">curl_socket</name> <operator pos:start="455:21" pos:end="455:22">==</operator> <operator pos:start="455:24" pos:end="455:24">-</operator><literal type="number" pos:start="455:25" pos:end="455:25">1</literal></expr>)</condition> <block pos:start="455:28" pos:end="460:5">{<block_content pos:start="456:9" pos:end="459:18">
        <expr_stmt pos:start="456:9" pos:end="456:59"><expr pos:start="456:9" pos:end="456:58"><call pos:start="456:9" pos:end="456:58"><name pos:start="456:9" pos:end="456:19">EST_LOG_ERR</name><argument_list pos:start="456:20" pos:end="456:58">(<argument pos:start="456:21" pos:end="456:57"><expr pos:start="456:21" pos:end="456:57"><literal type="string" pos:start="456:21" pos:end="456:57">"CURLINFO_LASTSOCKET: invalid socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="457:9" pos:end="457:23"><expr pos:start="457:9" pos:end="457:22"><name pos:start="457:9" pos:end="457:13">errno</name> <operator pos:start="457:15" pos:end="457:15">=</operator> <name pos:start="457:17" pos:end="457:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="458:9" pos:end="458:28"><expr pos:start="458:9" pos:end="458:27"><name pos:start="458:9" pos:end="458:11">ret</name> <operator pos:start="458:13" pos:end="458:13">=</operator> <name pos:start="458:15" pos:end="458:27">TCW_ERR_OTHER</name></expr>;</expr_stmt>
        <goto pos:start="459:9" pos:end="459:18">goto <name pos:start="459:14" pos:end="459:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="461:5" pos:end="461:32"><expr pos:start="461:5" pos:end="461:31"><name pos:start="461:5" pos:end="461:17"><name pos:start="461:5" pos:end="461:8">sock</name><operator pos:start="461:9" pos:end="461:10">-&gt;</operator><name pos:start="461:11" pos:end="461:17">sock_fd</name></name> <operator pos:start="461:19" pos:end="461:19">=</operator> <name pos:start="461:21" pos:end="461:31">curl_socket</name></expr>;</expr_stmt>

    <comment type="block" pos:start="463:5" pos:end="463:58">/* after connection is made, set socket to blocking */</comment>
    <expr_stmt pos:start="464:5" pos:end="464:37"><expr pos:start="464:5" pos:end="464:36"><name pos:start="464:5" pos:end="464:7">ret</name> <operator pos:start="464:9" pos:end="464:9">=</operator> <call pos:start="464:11" pos:end="464:36"><name pos:start="464:11" pos:end="464:27">set_blocking_mode</name><argument_list pos:start="464:28" pos:end="464:36">(<argument pos:start="464:29" pos:end="464:32"><expr pos:start="464:29" pos:end="464:32"><name pos:start="464:29" pos:end="464:32">sock</name></expr></argument>, <argument pos:start="464:35" pos:end="464:35"><expr pos:start="464:35" pos:end="464:35"><literal type="number" pos:start="464:35" pos:end="464:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="465:5" pos:end="469:5"><if pos:start="465:5" pos:end="469:5">if <condition pos:start="465:8" pos:end="465:22">(<expr pos:start="465:9" pos:end="465:21"><name pos:start="465:9" pos:end="465:11">ret</name> <operator pos:start="465:13" pos:end="465:14">!=</operator> <name pos:start="465:16" pos:end="465:21">TCW_OK</name></expr>)</condition> <block pos:start="465:24" pos:end="469:5">{<block_content pos:start="467:9" pos:end="468:18">
        <comment type="block" pos:start="466:9" pos:end="466:37">/* SOCK_ERR is already set */</comment>
        <expr_stmt pos:start="467:9" pos:end="467:56"><expr pos:start="467:9" pos:end="467:55"><call pos:start="467:9" pos:end="467:55"><name pos:start="467:9" pos:end="467:19">EST_LOG_ERR</name><argument_list pos:start="467:20" pos:end="467:55">(<argument pos:start="467:21" pos:end="467:54"><expr pos:start="467:21" pos:end="467:54"><literal type="string" pos:start="467:21" pos:end="467:54">"Failed to set socket to blocking"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="468:9" pos:end="468:18">goto <name pos:start="468:14" pos:end="468:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>

  <label pos:start="471:3" pos:end="471:7"><name pos:start="471:3" pos:end="471:6">done</name>:</label>
    <expr_stmt pos:start="472:5" pos:end="472:14"><expr pos:start="472:5" pos:end="472:13"><call pos:start="472:5" pos:end="472:13"><name pos:start="472:5" pos:end="472:8">free</name><argument_list pos:start="472:9" pos:end="472:13">(<argument pos:start="472:10" pos:end="472:12"><expr pos:start="472:10" pos:end="472:12"><name pos:start="472:10" pos:end="472:12">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="473:5" pos:end="473:15"><expr pos:start="473:5" pos:end="473:14"><name pos:start="473:5" pos:end="473:7">url</name> <operator pos:start="473:9" pos:end="473:9">=</operator> <name pos:start="473:11" pos:end="473:14">NULL</name></expr>;</expr_stmt>
    <if_stmt pos:start="474:5" pos:end="478:5"><if pos:start="474:5" pos:end="478:5">if <condition pos:start="474:8" pos:end="474:22">(<expr pos:start="474:9" pos:end="474:21"><name pos:start="474:9" pos:end="474:11">ret</name> <operator pos:start="474:13" pos:end="474:14">!=</operator> <name pos:start="474:16" pos:end="474:21">TCW_OK</name></expr>)</condition> <block pos:start="474:24" pos:end="478:5">{<block_content pos:start="475:9" pos:end="477:32">
        <expr_stmt pos:start="475:9" pos:end="475:35"><expr pos:start="475:9" pos:end="475:34"><name pos:start="475:9" pos:end="475:17">saved_err</name> <operator pos:start="475:19" pos:end="475:19">=</operator> <call pos:start="475:21" pos:end="475:34"><name pos:start="475:21" pos:end="475:32">GET_SOCK_ERR</name><argument_list pos:start="475:33" pos:end="475:34">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="476:9" pos:end="476:29"><expr pos:start="476:9" pos:end="476:28"><call pos:start="476:9" pos:end="476:28"><name pos:start="476:9" pos:end="476:22">tcw_curl_close</name><argument_list pos:start="476:23" pos:end="476:28">(<argument pos:start="476:24" pos:end="476:27"><expr pos:start="476:24" pos:end="476:27"><name pos:start="476:24" pos:end="476:27">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="477:9" pos:end="477:32"><expr pos:start="477:9" pos:end="477:31"><call pos:start="477:9" pos:end="477:31"><name pos:start="477:9" pos:end="477:20">SET_SOCK_ERR</name><argument_list pos:start="477:21" pos:end="477:31">(<argument pos:start="477:22" pos:end="477:30"><expr pos:start="477:22" pos:end="477:30"><name pos:start="477:22" pos:end="477:30">saved_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="480:5" pos:end="480:15">return <expr pos:start="480:12" pos:end="480:14"><name pos:start="480:12" pos:end="480:14">ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="482:1" pos:end="484:3">/*
 * entry point to establish a connection with the remote EST server
 */</comment>
<function pos:start="485:1" pos:end="518:1"><type pos:start="485:1" pos:end="485:9"><name pos:start="485:1" pos:end="485:9">tcw_err_t</name></type> <name pos:start="485:11" pos:end="485:21">tcw_connect</name> <parameter_list pos:start="485:23" pos:end="486:67">(<parameter pos:start="485:24" pos:end="485:39"><decl pos:start="485:24" pos:end="485:39"><type pos:start="485:24" pos:end="485:39"><name pos:start="485:24" pos:end="485:33">tcw_sock_t</name> <modifier pos:start="485:35" pos:end="485:35">*</modifier></type><name pos:start="485:36" pos:end="485:39">sock</name></decl></parameter>, <parameter pos:start="485:42" pos:end="485:57"><decl pos:start="485:42" pos:end="485:57"><type pos:start="485:42" pos:end="485:57"><name pos:start="485:42" pos:end="485:51">tcw_opts_t</name> <modifier pos:start="485:53" pos:end="485:53">*</modifier></type><name pos:start="485:54" pos:end="485:57">opts</name></decl></parameter>, <parameter pos:start="485:60" pos:end="485:75"><decl pos:start="485:60" pos:end="485:75"><type pos:start="485:60" pos:end="485:75"><specifier pos:start="485:60" pos:end="485:64">const</specifier> <name pos:start="485:66" pos:end="485:69">char</name> <modifier pos:start="485:71" pos:end="485:71">*</modifier></type><name pos:start="485:72" pos:end="485:75">host</name></decl></parameter>,
                       <parameter pos:start="486:24" pos:end="486:46"><decl pos:start="486:24" pos:end="486:46"><type pos:start="486:24" pos:end="486:46"><name pos:start="486:24" pos:end="486:31">unsigned</name> <name pos:start="486:33" pos:end="486:37">short</name> <name pos:start="486:39" pos:end="486:41">int</name></type> <name pos:start="486:43" pos:end="486:46">port</name></decl></parameter>, <parameter pos:start="486:49" pos:end="486:66"><decl pos:start="486:49" pos:end="486:66"><type pos:start="486:49" pos:end="486:66"><name pos:start="486:49" pos:end="486:57">SOCK_TYPE</name> <modifier pos:start="486:59" pos:end="486:59">*</modifier></type><name pos:start="486:60" pos:end="486:66">sock_fd</name></decl></parameter>)</parameter_list>
<block pos:start="487:1" pos:end="518:1">{<block_content pos:start="488:5" pos:end="517:15">
    <decl_stmt pos:start="488:5" pos:end="488:27"><decl pos:start="488:5" pos:end="488:26"><type pos:start="488:5" pos:end="488:13"><name pos:start="488:5" pos:end="488:13">tcw_err_t</name></type> <name pos:start="488:15" pos:end="488:17">ret</name> <init pos:start="488:19" pos:end="488:26">= <expr pos:start="488:21" pos:end="488:26"><name pos:start="488:21" pos:end="488:26">TCW_OK</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="490:5" pos:end="490:40"><expr pos:start="490:5" pos:end="490:39"><call pos:start="490:5" pos:end="490:39"><name pos:start="490:5" pos:end="490:10">memset</name><argument_list pos:start="490:11" pos:end="490:39">(<argument pos:start="490:12" pos:end="490:15"><expr pos:start="490:12" pos:end="490:15"><name pos:start="490:12" pos:end="490:15">sock</name></expr></argument>, <argument pos:start="490:18" pos:end="490:18"><expr pos:start="490:18" pos:end="490:18"><literal type="number" pos:start="490:18" pos:end="490:18">0</literal></expr></argument>, <argument pos:start="490:21" pos:end="490:38"><expr pos:start="490:21" pos:end="490:38"><sizeof pos:start="490:21" pos:end="490:38">sizeof<argument_list pos:start="490:27" pos:end="490:38">(<argument pos:start="490:28" pos:end="490:37"><expr pos:start="490:28" pos:end="490:37"><name pos:start="490:28" pos:end="490:37">tcw_sock_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="491:5" pos:end="491:33"><expr pos:start="491:5" pos:end="491:32"><name pos:start="491:5" pos:end="491:17"><name pos:start="491:5" pos:end="491:8">sock</name><operator pos:start="491:9" pos:end="491:10">-&gt;</operator><name pos:start="491:11" pos:end="491:17">sock_fd</name></name> <operator pos:start="491:19" pos:end="491:19">=</operator> <name pos:start="491:21" pos:end="491:32">SOCK_INVALID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:42"><expr pos:start="493:5" pos:end="493:41"><name pos:start="493:5" pos:end="493:21"><name pos:start="493:5" pos:end="493:8">sock</name><operator pos:start="493:9" pos:end="493:10">-&gt;</operator><name pos:start="493:11" pos:end="493:21">proxy_proto</name></name> <operator pos:start="493:23" pos:end="493:23">=</operator> <name pos:start="493:25" pos:end="493:41"><name pos:start="493:25" pos:end="493:28">opts</name><operator pos:start="493:29" pos:end="493:30">-&gt;</operator><name pos:start="493:31" pos:end="493:41">proxy_proto</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="494:5" pos:end="509:5"><if pos:start="494:5" pos:end="507:5">if <condition pos:start="494:8" pos:end="494:51">(<expr pos:start="494:9" pos:end="494:50"><name pos:start="494:9" pos:end="494:25"><name pos:start="494:9" pos:end="494:12">sock</name><operator pos:start="494:13" pos:end="494:14">-&gt;</operator><name pos:start="494:15" pos:end="494:25">proxy_proto</name></name> <operator pos:start="494:27" pos:end="494:28">!=</operator> <name pos:start="494:30" pos:end="494:50">EST_CLIENT_PROXY_NONE</name></expr>)</condition> <block pos:start="494:53" pos:end="507:5">{<block_content pos:start="496:9" pos:end="507:0">
<cpp:ifdef pos:start="495:1" pos:end="495:19">#<cpp:directive pos:start="495:2" pos:end="495:6">ifdef</cpp:directive> <name pos:start="495:8" pos:end="495:19">HAVE_LIBCURL</name></cpp:ifdef>
        <expr_stmt pos:start="496:9" pos:end="498:0"><expr pos:start="496:9" pos:end="496:54"><name pos:start="496:9" pos:end="496:11">ret</name> <operator pos:start="496:13" pos:end="496:13">=</operator> <call pos:start="496:15" pos:end="496:54"><name pos:start="496:15" pos:end="496:30">tcw_curl_connect</name><argument_list pos:start="496:31" pos:end="496:54">(<argument pos:start="496:32" pos:end="496:35"><expr pos:start="496:32" pos:end="496:35"><name pos:start="496:32" pos:end="496:35">sock</name></expr></argument>, <argument pos:start="496:38" pos:end="496:41"><expr pos:start="496:38" pos:end="496:41"><name pos:start="496:38" pos:end="496:41">opts</name></expr></argument>, <argument pos:start="496:44" pos:end="496:47"><expr pos:start="496:44" pos:end="496:47"><name pos:start="496:44" pos:end="496:47">host</name></expr></argument>, <argument pos:start="496:50" pos:end="496:53"><expr pos:start="496:50" pos:end="496:53"><name pos:start="496:50" pos:end="496:53">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="497:1" pos:end="497:5">#<cpp:directive pos:start="497:2" pos:end="497:5">else</cpp:directive></cpp:else>
        <comment type="block" pos:start="498:9" pos:end="501:11">/*
         * We should not make it this far, but if we do,
         * log a message as to why this is wrong and return
         */</comment>
        <expr_stmt pos:start="502:9" pos:end="502:64"><expr pos:start="502:9" pos:end="502:63"><call pos:start="502:9" pos:end="502:63"><name pos:start="502:9" pos:end="502:19">EST_LOG_ERR</name><argument_list pos:start="502:20" pos:end="502:63">(<argument pos:start="502:21" pos:end="502:62"><expr pos:start="502:21" pos:end="502:62"><literal type="string" pos:start="502:21" pos:end="502:62">"Proxy settings currently require libcurl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="503:9" pos:end="503:23"><expr pos:start="503:9" pos:end="503:22"><name pos:start="503:9" pos:end="503:13">errno</name> <operator pos:start="503:15" pos:end="503:15">=</operator> <name pos:start="503:17" pos:end="503:22">EINVAL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="504:9" pos:end="504:26"><expr pos:start="504:9" pos:end="504:25"><name pos:start="504:9" pos:end="504:11">ret</name> <operator pos:start="504:13" pos:end="504:13">=</operator> <name pos:start="504:15" pos:end="504:25">TCW_ERR_ARG</name></expr>;</expr_stmt>
        <goto pos:start="505:9" pos:end="507:0">goto <name pos:start="505:14" pos:end="505:17">done</name>;</goto>
<cpp:endif pos:start="506:1" pos:end="506:6">#<cpp:directive pos:start="506:2" pos:end="506:6">endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else pos:start="507:7" pos:end="509:5">else <block pos:start="507:12" pos:end="509:5">{<block_content pos:start="508:9" pos:end="508:57">
        <expr_stmt pos:start="508:9" pos:end="508:57"><expr pos:start="508:9" pos:end="508:56"><name pos:start="508:9" pos:end="508:11">ret</name> <operator pos:start="508:13" pos:end="508:13">=</operator> <call pos:start="508:15" pos:end="508:56"><name pos:start="508:15" pos:end="508:32">tcw_direct_connect</name><argument_list pos:start="508:33" pos:end="508:56">(<argument pos:start="508:34" pos:end="508:37"><expr pos:start="508:34" pos:end="508:37"><name pos:start="508:34" pos:end="508:37">sock</name></expr></argument>, <argument pos:start="508:40" pos:end="508:43"><expr pos:start="508:40" pos:end="508:43"><name pos:start="508:40" pos:end="508:43">opts</name></expr></argument>, <argument pos:start="508:46" pos:end="508:49"><expr pos:start="508:46" pos:end="508:49"><name pos:start="508:46" pos:end="508:49">host</name></expr></argument>, <argument pos:start="508:52" pos:end="508:55"><expr pos:start="508:52" pos:end="508:55"><name pos:start="508:52" pos:end="508:55">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="510:5" pos:end="512:5"><if pos:start="510:5" pos:end="512:5">if <condition pos:start="510:8" pos:end="510:22">(<expr pos:start="510:9" pos:end="510:21"><name pos:start="510:9" pos:end="510:11">ret</name> <operator pos:start="510:13" pos:end="510:14">!=</operator> <name pos:start="510:16" pos:end="510:21">TCW_OK</name></expr>)</condition> <block pos:start="510:24" pos:end="512:5">{<block_content pos:start="511:9" pos:end="511:18">
        <goto pos:start="511:9" pos:end="511:18">goto <name pos:start="511:14" pos:end="511:17">done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="513:5" pos:end="513:65"><expr pos:start="513:5" pos:end="513:64"><call pos:start="513:5" pos:end="513:64"><name pos:start="513:5" pos:end="513:16">EST_LOG_INFO</name><argument_list pos:start="513:17" pos:end="513:64">(<argument pos:start="513:18" pos:end="513:51"><expr pos:start="513:18" pos:end="513:51"><literal type="string" pos:start="513:18" pos:end="513:51">"Successfully connected to %s:%hu"</literal></expr></argument>, <argument pos:start="513:54" pos:end="513:57"><expr pos:start="513:54" pos:end="513:57"><name pos:start="513:54" pos:end="513:57">host</name></expr></argument>, <argument pos:start="513:60" pos:end="513:63"><expr pos:start="513:60" pos:end="513:63"><name pos:start="513:60" pos:end="513:63">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="514:5" pos:end="514:29"><expr pos:start="514:5" pos:end="514:28"><operator pos:start="514:5" pos:end="514:5">*</operator><name pos:start="514:6" pos:end="514:12">sock_fd</name> <operator pos:start="514:14" pos:end="514:14">=</operator> <name pos:start="514:16" pos:end="514:28"><name pos:start="514:16" pos:end="514:19">sock</name><operator pos:start="514:20" pos:end="514:21">-&gt;</operator><name pos:start="514:22" pos:end="514:28">sock_fd</name></name></expr>;</expr_stmt>

<label pos:start="516:1" pos:end="516:5"><name pos:start="516:1" pos:end="516:4">done</name>:</label>
    <return pos:start="517:5" pos:end="517:15">return <expr pos:start="517:12" pos:end="517:14"><name pos:start="517:12" pos:end="517:14">ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="519:1" pos:end="521:3">/*
 * entry point to establish a connection with the remote EST server
 */</comment>
<function pos:start="522:1" pos:end="535:1"><type pos:start="522:1" pos:end="522:9"><name pos:start="522:1" pos:end="522:9">tcw_err_t</name></type> <name pos:start="522:11" pos:end="522:19">tcw_close</name> <parameter_list pos:start="522:21" pos:end="522:38">(<parameter pos:start="522:22" pos:end="522:37"><decl pos:start="522:22" pos:end="522:37"><type pos:start="522:22" pos:end="522:33"><name pos:start="522:22" pos:end="522:31">tcw_sock_t</name> <modifier pos:start="522:33" pos:end="522:33">*</modifier></type><name pos:start="522:34" pos:end="522:37">sock</name></decl></parameter>)</parameter_list>
<block pos:start="523:1" pos:end="535:1">{<block_content pos:start="524:5" pos:end="534:15">
    <decl_stmt pos:start="524:5" pos:end="524:27"><decl pos:start="524:5" pos:end="524:26"><type pos:start="524:5" pos:end="524:13"><name pos:start="524:5" pos:end="524:13">tcw_err_t</name></type> <name pos:start="524:15" pos:end="524:17">ret</name> <init pos:start="524:19" pos:end="524:26">= <expr pos:start="524:21" pos:end="524:26"><name pos:start="524:21" pos:end="524:26">TCW_OK</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="526:5" pos:end="532:5"><if pos:start="526:5" pos:end="528:5">if <condition pos:start="526:8" pos:end="526:51">(<expr pos:start="526:9" pos:end="526:50"><name pos:start="526:9" pos:end="526:25"><name pos:start="526:9" pos:end="526:12">sock</name><operator pos:start="526:13" pos:end="526:14">-&gt;</operator><name pos:start="526:15" pos:end="526:25">proxy_proto</name></name> <operator pos:start="526:27" pos:end="526:28">==</operator> <name pos:start="526:30" pos:end="526:50">EST_CLIENT_PROXY_NONE</name></expr>)</condition> <block pos:start="526:53" pos:end="528:5">{<block_content pos:start="527:9" pos:end="527:37">
        <expr_stmt pos:start="527:9" pos:end="527:37"><expr pos:start="527:9" pos:end="527:36"><name pos:start="527:9" pos:end="527:11">ret</name> <operator pos:start="527:13" pos:end="527:13">=</operator> <call pos:start="527:15" pos:end="527:36"><name pos:start="527:15" pos:end="527:30">tcw_direct_close</name><argument_list pos:start="527:31" pos:end="527:36">(<argument pos:start="527:32" pos:end="527:35"><expr pos:start="527:32" pos:end="527:35"><name pos:start="527:32" pos:end="527:35">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="528:7" pos:end="532:5">else <block pos:start="528:12" pos:end="532:5">{<block_content pos:start="530:9" pos:end="532:0">
<cpp:ifdef pos:start="529:1" pos:end="529:19">#<cpp:directive pos:start="529:2" pos:end="529:6">ifdef</cpp:directive> <name pos:start="529:8" pos:end="529:19">HAVE_LIBCURL</name></cpp:ifdef>
        <expr_stmt pos:start="530:9" pos:end="532:0"><expr pos:start="530:9" pos:end="530:34"><name pos:start="530:9" pos:end="530:11">ret</name> <operator pos:start="530:13" pos:end="530:13">=</operator> <call pos:start="530:15" pos:end="530:34"><name pos:start="530:15" pos:end="530:28">tcw_curl_close</name><argument_list pos:start="530:29" pos:end="530:34">(<argument pos:start="530:30" pos:end="530:33"><expr pos:start="530:30" pos:end="530:33"><name pos:start="530:30" pos:end="530:33">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="531:1" pos:end="531:6">#<cpp:directive pos:start="531:2" pos:end="531:6">endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <return pos:start="534:5" pos:end="534:15">return <expr pos:start="534:12" pos:end="534:14"><name pos:start="534:12" pos:end="534:14">ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
