<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="source_code/est_server_http.c" pos:tabs="8"><function pos:start="1:1" pos:end="4:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">pthread_t</name></type> <name pos:start="1:18" pos:end="1:29">pthread_self</name> <parameter_list pos:start="1:31" pos:end="1:36">(<parameter pos:start="1:32" pos:end="1:35"><decl pos:start="1:32" pos:end="1:35"><type pos:start="1:32" pos:end="1:35"><name pos:start="1:32" pos:end="1:35">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="4:1">{<block_content pos:start="3:5" pos:end="3:32">
    <return pos:start="3:5" pos:end="3:32">return <expr pos:start="3:12" pos:end="3:31"><call pos:start="3:12" pos:end="3:31"><name pos:start="3:12" pos:end="3:29">GetCurrentThreadId</name><argument_list pos:start="3:30" pos:end="3:31">()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function pos:start="5:1" pos:end="8:1"><type pos:start="5:1" pos:end="5:11"><specifier pos:start="5:1" pos:end="5:5">const</specifier> <name pos:start="5:7" pos:end="5:10">void</name><modifier pos:start="5:11" pos:end="5:11">*</modifier></type> <name pos:start="5:13" pos:end="5:27">mg_get_conn_ssl</name> <parameter_list pos:start="5:29" pos:end="5:56">(<parameter pos:start="5:30" pos:end="5:55"><decl pos:start="5:30" pos:end="5:55"><type pos:start="5:30" pos:end="5:55"><name pos:start="5:30" pos:end="5:49"><name pos:start="5:30" pos:end="5:35">struct</name> <name pos:start="5:37" pos:end="5:49">mg_connection</name></name> <modifier pos:start="5:51" pos:end="5:51">*</modifier></type><name pos:start="5:52" pos:end="5:55">conn</name></decl></parameter>)</parameter_list>
<block pos:start="6:1" pos:end="8:1">{<block_content pos:start="7:5" pos:end="7:35">
    <return pos:start="7:5" pos:end="7:35">return <expr pos:start="7:12" pos:end="7:34"><ternary pos:start="7:12" pos:end="7:34"><condition pos:start="7:12" pos:end="7:17"><expr pos:start="7:12" pos:end="7:15"><name pos:start="7:12" pos:end="7:15">conn</name></expr> ?</condition><then pos:start="7:19" pos:end="7:27"> <expr pos:start="7:19" pos:end="7:27"><name pos:start="7:19" pos:end="7:27"><name pos:start="7:19" pos:end="7:22">conn</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:27">ssl</name></name></expr> </then><else pos:start="7:29" pos:end="7:34">: <expr pos:start="7:31" pos:end="7:34"><name pos:start="7:31" pos:end="7:34">NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function pos:start="9:1" pos:end="23:1"><type pos:start="9:1" pos:end="9:11"><specifier pos:start="9:1" pos:end="9:6">static</specifier> <name pos:start="9:8" pos:end="9:11">void</name></type> <name pos:start="9:13" pos:end="9:30">sockaddr_to_string</name> <parameter_list pos:start="9:32" pos:end="10:53">(<parameter pos:start="9:33" pos:end="9:41"><decl pos:start="9:33" pos:end="9:41"><type pos:start="9:33" pos:end="9:41"><name pos:start="9:33" pos:end="9:36">char</name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:41">buf</name></decl></parameter>, <parameter pos:start="9:44" pos:end="9:53"><decl pos:start="9:44" pos:end="9:53"><type pos:start="9:44" pos:end="9:53"><name pos:start="9:44" pos:end="9:49">size_t</name></type> <name pos:start="9:51" pos:end="9:53">len</name></decl></parameter>,
                                <parameter pos:start="10:33" pos:end="10:52"><decl pos:start="10:33" pos:end="10:52"><type pos:start="10:33" pos:end="10:52"><specifier pos:start="10:33" pos:end="10:37">const</specifier> <name pos:start="10:39" pos:end="10:47"><name pos:start="10:39" pos:end="10:43">union</name> <name pos:start="10:45" pos:end="10:47">usa</name></name> <modifier pos:start="10:49" pos:end="10:49">*</modifier></type><name pos:start="10:50" pos:end="10:52">usa</name></decl></parameter>)</parameter_list>
<block pos:start="11:1" pos:end="23:1">{<block_content pos:start="12:5" pos:end="23:0">
    <expr_stmt pos:start="12:5" pos:end="14:0"><expr pos:start="12:5" pos:end="12:17"><name pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:7">buf</name><index pos:start="12:8" pos:end="12:10">[<expr pos:start="12:9" pos:end="12:9"><literal type="number" pos:start="12:9" pos:end="12:9">0</literal></expr>]</index></name> <operator pos:start="12:12" pos:end="12:12">=</operator> <literal type="char" pos:start="12:14" pos:end="12:17">'\0'</literal></expr>;</expr_stmt>
<cpp:if pos:start="13:1" pos:end="13:21">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:21"><call pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:21">(<argument pos:start="13:13" pos:end="13:20"><expr pos:start="13:13" pos:end="13:20"><name pos:start="13:13" pos:end="13:20">USE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt pos:start="14:5" pos:end="18:0"><expr pos:start="14:5" pos:end="16:64"><call pos:start="14:5" pos:end="16:64"><name pos:start="14:5" pos:end="14:13">inet_ntop</name><argument_list pos:start="14:14" pos:end="16:64">(<argument pos:start="14:15" pos:end="14:31"><expr pos:start="14:15" pos:end="14:31"><name pos:start="14:15" pos:end="14:31"><name pos:start="14:15" pos:end="14:17">usa</name><operator pos:start="14:18" pos:end="14:19">-&gt;</operator><name pos:start="14:20" pos:end="14:21">sa</name><operator pos:start="14:22" pos:end="14:22">.</operator><name pos:start="14:23" pos:end="14:31">sa_family</name></name></expr></argument>, <argument pos:start="14:34" pos:end="16:41"><expr pos:start="14:34" pos:end="16:41"><ternary pos:start="14:34" pos:end="16:41"><condition pos:start="14:34" pos:end="14:63"><expr pos:start="14:34" pos:end="14:61"><name pos:start="14:34" pos:end="14:50"><name pos:start="14:34" pos:end="14:36">usa</name><operator pos:start="14:37" pos:end="14:38">-&gt;</operator><name pos:start="14:39" pos:end="14:40">sa</name><operator pos:start="14:41" pos:end="14:41">.</operator><name pos:start="14:42" pos:end="14:50">sa_family</name></name> <operator pos:start="14:52" pos:end="14:53">==</operator> <name pos:start="14:55" pos:end="14:61">AF_INET</name></expr> ?</condition><then pos:start="15:15" pos:end="15:39">
              <expr pos:start="15:15" pos:end="15:39"><operator pos:start="15:15" pos:end="15:15">(</operator><name pos:start="15:16" pos:end="15:19">void</name><operator pos:start="15:20" pos:end="15:20">*</operator><operator pos:start="15:21" pos:end="15:21">)</operator><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:39"><name pos:start="15:23" pos:end="15:25">usa</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:30">sin</name><operator pos:start="15:31" pos:end="15:31">.</operator><name pos:start="15:32" pos:end="15:39">sin_addr</name></name></expr> </then><else pos:start="15:41" pos:end="16:41">:
              <expr pos:start="16:15" pos:end="16:41"><operator pos:start="16:15" pos:end="16:15">(</operator><name pos:start="16:16" pos:end="16:19">void</name><operator pos:start="16:20" pos:end="16:20">*</operator><operator pos:start="16:21" pos:end="16:21">)</operator><operator pos:start="16:22" pos:end="16:22">&amp;</operator><name pos:start="16:23" pos:end="16:41"><name pos:start="16:23" pos:end="16:25">usa</name><operator pos:start="16:26" pos:end="16:27">-&gt;</operator><name pos:start="16:28" pos:end="16:31">sin6</name><operator pos:start="16:32" pos:end="16:32">.</operator><name pos:start="16:33" pos:end="16:41">sin6_addr</name></name></expr></else></ternary></expr></argument>, <argument pos:start="16:44" pos:end="16:46"><expr pos:start="16:44" pos:end="16:46"><name pos:start="16:44" pos:end="16:46">buf</name></expr></argument>, <argument pos:start="16:49" pos:end="16:63"><expr pos:start="16:49" pos:end="16:63"><operator pos:start="16:49" pos:end="16:49">(</operator><name pos:start="16:50" pos:end="16:58">socklen_t</name><operator pos:start="16:59" pos:end="16:59">)</operator> <name pos:start="16:61" pos:end="16:63">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif pos:start="17:1" pos:end="17:21">#<cpp:directive pos:start="17:2" pos:end="17:5">elif</cpp:directive> <expr pos:start="17:7" pos:end="17:21"><call pos:start="17:7" pos:end="17:21"><name pos:start="17:7" pos:end="17:13">defined</name><argument_list pos:start="17:14" pos:end="17:21">(<argument pos:start="17:15" pos:end="17:20"><expr pos:start="17:15" pos:end="17:20"><name pos:start="17:15" pos:end="17:20">_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="line" pos:start="18:5" pos:end="18:54">// Only Windoze Vista (and newer) have inet_ntop()</comment>
    <expr_stmt pos:start="19:5" pos:end="21:0"><expr pos:start="19:5" pos:end="19:67"><call pos:start="19:5" pos:end="19:67"><name pos:start="19:5" pos:end="19:13">strncpy_s</name><argument_list pos:start="19:14" pos:end="19:67">(<argument pos:start="19:15" pos:end="19:17"><expr pos:start="19:15" pos:end="19:17"><name pos:start="19:15" pos:end="19:17">buf</name></expr></argument>, <argument pos:start="19:20" pos:end="19:31"><expr pos:start="19:20" pos:end="19:31"><name pos:start="19:20" pos:end="19:31">MAX_SRC_ADDR</name></expr></argument>, <argument pos:start="19:34" pos:end="19:61"><expr pos:start="19:34" pos:end="19:61"><call pos:start="19:34" pos:end="19:61"><name pos:start="19:34" pos:end="19:42">inet_ntoa</name><argument_list pos:start="19:43" pos:end="19:61">(<argument pos:start="19:44" pos:end="19:60"><expr pos:start="19:44" pos:end="19:60"><name pos:start="19:44" pos:end="19:60"><name pos:start="19:44" pos:end="19:46">usa</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:51">sin</name><operator pos:start="19:52" pos:end="19:52">.</operator><name pos:start="19:53" pos:end="19:60">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:64" pos:end="19:66"><expr pos:start="19:64" pos:end="19:66"><name pos:start="19:64" pos:end="19:66">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="20:1" pos:end="20:5">#<cpp:directive pos:start="20:2" pos:end="20:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="21:5" pos:end="23:0"><expr pos:start="21:5" pos:end="21:69"><call pos:start="21:5" pos:end="21:69"><name pos:start="21:5" pos:end="21:13">inet_ntop</name><argument_list pos:start="21:14" pos:end="21:69">(<argument pos:start="21:15" pos:end="21:31"><expr pos:start="21:15" pos:end="21:31"><name pos:start="21:15" pos:end="21:31"><name pos:start="21:15" pos:end="21:17">usa</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">sa</name><operator pos:start="21:22" pos:end="21:22">.</operator><name pos:start="21:23" pos:end="21:31">sa_family</name></name></expr></argument>, <argument pos:start="21:34" pos:end="21:58"><expr pos:start="21:34" pos:end="21:58"><operator pos:start="21:34" pos:end="21:34">(</operator><name pos:start="21:35" pos:end="21:38">void</name><operator pos:start="21:39" pos:end="21:39">*</operator><operator pos:start="21:40" pos:end="21:40">)</operator><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:58"><name pos:start="21:42" pos:end="21:44">usa</name><operator pos:start="21:45" pos:end="21:46">-&gt;</operator><name pos:start="21:47" pos:end="21:49">sin</name><operator pos:start="21:50" pos:end="21:50">.</operator><name pos:start="21:51" pos:end="21:58">sin_addr</name></name></expr></argument>, <argument pos:start="21:61" pos:end="21:63"><expr pos:start="21:61" pos:end="21:63"><name pos:start="21:61" pos:end="21:63">buf</name></expr></argument>, <argument pos:start="21:66" pos:end="21:68"><expr pos:start="21:66" pos:end="21:68"><name pos:start="21:66" pos:end="21:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="22:1" pos:end="22:6">#<cpp:directive pos:start="22:2" pos:end="22:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="line" pos:start="24:1" pos:end="24:54">// Print error message to the opened error log stream.</comment>
<function pos:start="25:1" pos:end="49:1"><type pos:start="25:1" pos:end="25:11"><specifier pos:start="25:1" pos:end="25:6">static</specifier> <name pos:start="25:8" pos:end="25:11">void</name></type> <name pos:start="25:13" pos:end="25:15">cry</name> <parameter_list pos:start="25:17" pos:end="25:66">(<parameter pos:start="25:18" pos:end="25:43"><decl pos:start="25:18" pos:end="25:43"><type pos:start="25:18" pos:end="25:43"><name pos:start="25:18" pos:end="25:37"><name pos:start="25:18" pos:end="25:23">struct</name> <name pos:start="25:25" pos:end="25:37">mg_connection</name></name> <modifier pos:start="25:39" pos:end="25:39">*</modifier></type><name pos:start="25:40" pos:end="25:43">conn</name></decl></parameter>, <parameter pos:start="25:46" pos:end="25:60"><decl pos:start="25:46" pos:end="25:60"><type pos:start="25:46" pos:end="25:60"><specifier pos:start="25:46" pos:end="25:50">const</specifier> <name pos:start="25:52" pos:end="25:55">char</name> <modifier pos:start="25:57" pos:end="25:57">*</modifier></type><name pos:start="25:58" pos:end="25:60">fmt</name></decl></parameter>, <parameter pos:start="25:63" pos:end="25:65"><decl pos:start="25:63" pos:end="25:65"><type pos:start="25:63" pos:end="25:65"><modifier pos:start="25:63" pos:end="25:65">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="26:1" pos:end="49:1">{<block_content pos:start="27:5" pos:end="48:38">
    <decl_stmt pos:start="27:5" pos:end="27:49"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">char</name></type> <name pos:start="27:10" pos:end="27:24"><name pos:start="27:10" pos:end="27:12">buf</name><index pos:start="27:13" pos:end="27:24">[<expr pos:start="27:14" pos:end="27:23"><name pos:start="27:14" pos:end="27:23">MG_BUF_LEN</name></expr>]</index></name></decl>, <decl pos:start="27:27" pos:end="27:48"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:27" pos:end="27:48"><name pos:start="27:27" pos:end="27:34">src_addr</name><index pos:start="27:35" pos:end="27:48">[<expr pos:start="27:36" pos:end="27:47"><name pos:start="27:36" pos:end="27:47">MAX_SRC_ADDR</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="28:5" pos:end="28:15"><decl pos:start="28:5" pos:end="28:14"><type pos:start="28:5" pos:end="28:11"><name pos:start="28:5" pos:end="28:11">va_list</name></type> <name pos:start="28:13" pos:end="28:14">ap</name></decl>;</decl_stmt>
    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">time_t</name></type> <name pos:start="29:12" pos:end="29:20">timestamp</name></decl>;</decl_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><call pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:12">va_start</name><argument_list pos:start="31:13" pos:end="31:21">(<argument pos:start="31:14" pos:end="31:15"><expr pos:start="31:14" pos:end="31:15"><name pos:start="31:14" pos:end="31:15">ap</name></expr></argument>, <argument pos:start="31:18" pos:end="31:20"><expr pos:start="31:18" pos:end="31:20"><name pos:start="31:18" pos:end="31:20">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:47"><expr pos:start="32:5" pos:end="32:46"><operator pos:start="32:5" pos:end="32:5">(</operator><name pos:start="32:6" pos:end="32:9">void</name><operator pos:start="32:10" pos:end="32:10">)</operator><call pos:start="32:11" pos:end="32:46"><name pos:start="32:11" pos:end="32:19">vsnprintf</name><argument_list pos:start="32:20" pos:end="32:46">(<argument pos:start="32:21" pos:end="32:23"><expr pos:start="32:21" pos:end="32:23"><name pos:start="32:21" pos:end="32:23">buf</name></expr></argument>, <argument pos:start="32:26" pos:end="32:36"><expr pos:start="32:26" pos:end="32:36"><sizeof pos:start="32:26" pos:end="32:36">sizeof<argument_list pos:start="32:32" pos:end="32:36">(<argument pos:start="32:33" pos:end="32:35"><expr pos:start="32:33" pos:end="32:35"><name pos:start="32:33" pos:end="32:35">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="32:39" pos:end="32:41"><expr pos:start="32:39" pos:end="32:41"><name pos:start="32:39" pos:end="32:41">fmt</name></expr></argument>, <argument pos:start="32:44" pos:end="32:45"><expr pos:start="32:44" pos:end="32:45"><name pos:start="32:44" pos:end="32:45">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:15"><expr pos:start="33:5" pos:end="33:14"><call pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:10">va_end</name><argument_list pos:start="33:11" pos:end="33:14">(<argument pos:start="33:12" pos:end="33:13"><expr pos:start="33:12" pos:end="33:13"><name pos:start="33:12" pos:end="33:13">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="35:5" pos:end="35:67">// Do not lock when getting the callback value, here and below.</comment>
    <comment type="line" pos:start="36:5" pos:end="36:69">// I suppose this is fine, since function cannot disappear in the</comment>
    <comment type="line" pos:start="37:5" pos:end="37:34">// same way string option can.</comment>
    <expr_stmt pos:start="38:5" pos:end="38:37"><expr pos:start="38:5" pos:end="38:36"><name pos:start="38:5" pos:end="38:30"><name pos:start="38:5" pos:end="38:8">conn</name><operator pos:start="38:9" pos:end="38:10">-&gt;</operator><name pos:start="38:11" pos:end="38:22">request_info</name><operator pos:start="38:23" pos:end="38:23">.</operator><name pos:start="38:24" pos:end="38:30">ev_data</name></name> <operator pos:start="38:32" pos:end="38:32">=</operator> <name pos:start="38:34" pos:end="38:36">buf</name></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:27"><expr pos:start="39:5" pos:end="39:26"><name pos:start="39:5" pos:end="39:13">timestamp</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:26"><name pos:start="39:17" pos:end="39:20">time</name><argument_list pos:start="39:21" pos:end="39:26">(<argument pos:start="39:22" pos:end="39:25"><expr pos:start="39:22" pos:end="39:25"><name pos:start="39:22" pos:end="39:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:70"><expr pos:start="41:5" pos:end="41:69"><call pos:start="41:5" pos:end="41:69"><name pos:start="41:5" pos:end="41:22">sockaddr_to_string</name><argument_list pos:start="41:23" pos:end="41:69">(<argument pos:start="41:24" pos:end="41:31"><expr pos:start="41:24" pos:end="41:31"><name pos:start="41:24" pos:end="41:31">src_addr</name></expr></argument>, <argument pos:start="41:34" pos:end="41:49"><expr pos:start="41:34" pos:end="41:49"><sizeof pos:start="41:34" pos:end="41:49">sizeof<argument_list pos:start="41:40" pos:end="41:49">(<argument pos:start="41:41" pos:end="41:48"><expr pos:start="41:41" pos:end="41:48"><name pos:start="41:41" pos:end="41:48">src_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="41:52" pos:end="41:68"><expr pos:start="41:52" pos:end="41:68"><operator pos:start="41:52" pos:end="41:52">&amp;</operator><name pos:start="41:53" pos:end="41:68"><name pos:start="41:53" pos:end="41:56">conn</name><operator pos:start="41:57" pos:end="41:58">-&gt;</operator><name pos:start="41:59" pos:end="41:64">client</name><operator pos:start="41:65" pos:end="41:65">.</operator><name pos:start="41:66" pos:end="41:68">rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="42:5" pos:end="42:85"><expr pos:start="42:5" pos:end="42:84"><call pos:start="42:5" pos:end="42:84"><name pos:start="42:5" pos:end="42:15">EST_LOG_ERR</name><argument_list pos:start="42:16" pos:end="42:84">(<argument pos:start="42:17" pos:end="42:47"><expr pos:start="42:17" pos:end="42:47"><literal type="string" pos:start="42:17" pos:end="42:47">"[%010lu] [error] [client %s] "</literal></expr></argument>, <argument pos:start="42:50" pos:end="42:73"><expr pos:start="42:50" pos:end="42:73"><operator pos:start="42:50" pos:end="42:50">(</operator><name pos:start="42:51" pos:end="42:58">unsigned</name> <name pos:start="42:60" pos:end="42:63">long</name><operator pos:start="42:64" pos:end="42:64">)</operator><name pos:start="42:65" pos:end="42:73">timestamp</name></expr></argument>, <argument pos:start="42:76" pos:end="42:83"><expr pos:start="42:76" pos:end="42:83"><name pos:start="42:76" pos:end="42:83">src_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="44:5" pos:end="46:5"><if pos:start="44:5" pos:end="46:5">if <condition pos:start="44:8" pos:end="44:50">(<expr pos:start="44:9" pos:end="44:49"><name pos:start="44:9" pos:end="44:41"><name pos:start="44:9" pos:end="44:12">conn</name><operator pos:start="44:13" pos:end="44:14">-&gt;</operator><name pos:start="44:15" pos:end="44:26">request_info</name><operator pos:start="44:27" pos:end="44:27">.</operator><name pos:start="44:28" pos:end="44:41">request_method</name></name> <operator pos:start="44:43" pos:end="44:44">!=</operator> <name pos:start="44:46" pos:end="44:49">NULL</name></expr>)</condition> <block pos:start="44:52" pos:end="46:5">{<block_content pos:start="45:9" pos:end="45:90">
        <expr_stmt pos:start="45:9" pos:end="45:90"><expr pos:start="45:9" pos:end="45:89"><call pos:start="45:9" pos:end="45:89"><name pos:start="45:9" pos:end="45:19">EST_LOG_ERR</name><argument_list pos:start="45:20" pos:end="45:89">(<argument pos:start="45:21" pos:end="45:29"><expr pos:start="45:21" pos:end="45:29"><literal type="string" pos:start="45:21" pos:end="45:29">"%s %s: "</literal></expr></argument>, <argument pos:start="45:32" pos:end="45:64"><expr pos:start="45:32" pos:end="45:64"><name pos:start="45:32" pos:end="45:64"><name pos:start="45:32" pos:end="45:35">conn</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:49">request_info</name><operator pos:start="45:50" pos:end="45:50">.</operator><name pos:start="45:51" pos:end="45:64">request_method</name></name></expr></argument>, <argument pos:start="45:67" pos:end="45:88"><expr pos:start="45:67" pos:end="45:88"><name pos:start="45:67" pos:end="45:88"><name pos:start="45:67" pos:end="45:70">conn</name><operator pos:start="45:71" pos:end="45:72">-&gt;</operator><name pos:start="45:73" pos:end="45:84">request_info</name><operator pos:start="45:85" pos:end="45:85">.</operator><name pos:start="45:86" pos:end="45:88">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><call pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:15">EST_LOG_ERR</name><argument_list pos:start="47:16" pos:end="47:26">(<argument pos:start="47:17" pos:end="47:20"><expr pos:start="47:17" pos:end="47:20"><literal type="string" pos:start="47:17" pos:end="47:20">"%s"</literal></expr></argument>, <argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:38"><expr pos:start="48:5" pos:end="48:37"><name pos:start="48:5" pos:end="48:30"><name pos:start="48:5" pos:end="48:8">conn</name><operator pos:start="48:9" pos:end="48:10">-&gt;</operator><name pos:start="48:11" pos:end="48:22">request_info</name><operator pos:start="48:23" pos:end="48:23">.</operator><name pos:start="48:24" pos:end="48:30">ev_data</name></name> <operator pos:start="48:32" pos:end="48:32">=</operator> <name pos:start="48:34" pos:end="48:37">NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="50:1" pos:end="50:46">// is not applicable at the moment of logging.</comment>
<function pos:start="51:1" pos:end="57:1"><type pos:start="51:1" pos:end="51:29"><specifier pos:start="51:1" pos:end="51:6">static</specifier> <name pos:start="51:8" pos:end="51:27"><name pos:start="51:8" pos:end="51:13">struct</name> <name pos:start="51:15" pos:end="51:27">mg_connection</name></name> <modifier pos:start="51:29" pos:end="51:29">*</modifier></type><name pos:start="51:30" pos:end="51:31">fc</name> <parameter_list pos:start="51:33" pos:end="51:56">(<parameter pos:start="51:34" pos:end="51:55"><decl pos:start="51:34" pos:end="51:55"><type pos:start="51:34" pos:end="51:55"><name pos:start="51:34" pos:end="51:50"><name pos:start="51:34" pos:end="51:39">struct</name> <name pos:start="51:41" pos:end="51:50">mg_context</name></name> <modifier pos:start="51:52" pos:end="51:52">*</modifier></type><name pos:start="51:53" pos:end="51:55">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="52:1" pos:end="57:1">{<block_content pos:start="53:5" pos:end="56:28">
    <decl_stmt pos:start="53:5" pos:end="53:48"><decl pos:start="53:5" pos:end="53:47"><type pos:start="53:5" pos:end="53:31"><specifier pos:start="53:5" pos:end="53:10">static</specifier> <name pos:start="53:12" pos:end="53:31"><name pos:start="53:12" pos:end="53:17">struct</name> <name pos:start="53:19" pos:end="53:31">mg_connection</name></name></type> <name pos:start="53:33" pos:end="53:47">fake_connection</name></decl>;</decl_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:30"><expr pos:start="55:5" pos:end="55:29"><name pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:19">fake_connection</name><operator pos:start="55:20" pos:end="55:20">.</operator><name pos:start="55:21" pos:end="55:23">ctx</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:29">ctx</name></expr>;</expr_stmt>
    <return pos:start="56:5" pos:end="56:28">return <expr pos:start="56:12" pos:end="56:27"><operator pos:start="56:12" pos:end="56:12">&amp;</operator><name pos:start="56:13" pos:end="56:27">fake_connection</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="58:1" pos:end="58:46">// is not applicable at the moment of logging.</comment>
<function pos:start="59:1" pos:end="62:1"><type pos:start="59:1" pos:end="59:12"><specifier pos:start="59:1" pos:end="59:5">const</specifier> <name pos:start="59:7" pos:end="59:10">char</name> <modifier pos:start="59:12" pos:end="59:12">*</modifier></type><name pos:start="59:13" pos:end="59:22">mg_version</name> <parameter_list pos:start="59:24" pos:end="59:29">(<parameter pos:start="59:25" pos:end="59:28"><decl pos:start="59:25" pos:end="59:28"><type pos:start="59:25" pos:end="59:28"><name pos:start="59:25" pos:end="59:28">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="60:1" pos:end="62:1">{<block_content pos:start="61:5" pos:end="61:28">
    <return pos:start="61:5" pos:end="61:28">return <expr pos:start="61:12" pos:end="61:27"><name pos:start="61:12" pos:end="61:27">MONGOOSE_VERSION</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="63:1" pos:end="63:46">// is not applicable at the moment of logging.</comment>
<function pos:start="64:1" pos:end="67:1"><type pos:start="64:1" pos:end="64:24"><name pos:start="64:1" pos:end="64:22"><name pos:start="64:1" pos:end="64:6">struct</name> <name pos:start="64:8" pos:end="64:22">mg_request_info</name></name> <modifier pos:start="64:24" pos:end="64:24">*</modifier></type><name pos:start="64:25" pos:end="64:43">mg_get_request_info</name> <parameter_list pos:start="64:45" pos:end="64:72">(<parameter pos:start="64:46" pos:end="64:71"><decl pos:start="64:46" pos:end="64:71"><type pos:start="64:46" pos:end="64:71"><name pos:start="64:46" pos:end="64:65"><name pos:start="64:46" pos:end="64:51">struct</name> <name pos:start="64:53" pos:end="64:65">mg_connection</name></name> <modifier pos:start="64:67" pos:end="64:67">*</modifier></type><name pos:start="64:68" pos:end="64:71">conn</name></decl></parameter>)</parameter_list>
<block pos:start="65:1" pos:end="67:1">{<block_content pos:start="66:5" pos:end="66:31">
    <return pos:start="66:5" pos:end="66:31">return <expr pos:start="66:12" pos:end="66:30"><operator pos:start="66:12" pos:end="66:12">&amp;</operator><name pos:start="66:13" pos:end="66:30"><name pos:start="66:13" pos:end="66:16">conn</name><operator pos:start="66:17" pos:end="66:18">-&gt;</operator><name pos:start="66:19" pos:end="66:30">request_info</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="68:1" pos:end="68:46">// is not applicable at the moment of logging.</comment>
<function pos:start="69:1" pos:end="75:1"><type pos:start="69:1" pos:end="69:4"><name pos:start="69:1" pos:end="69:4">void</name></type> <name pos:start="69:6" pos:end="69:15">mg_strlcpy</name> <parameter_list pos:start="69:17" pos:end="69:72">(<parameter pos:start="69:18" pos:end="69:35"><decl pos:start="69:18" pos:end="69:35"><type pos:start="69:18" pos:end="69:35"><specifier pos:start="69:18" pos:end="69:25">register</specifier> <name pos:start="69:27" pos:end="69:30">char</name> <modifier pos:start="69:32" pos:end="69:32">*</modifier></type><name pos:start="69:33" pos:end="69:35">dst</name></decl></parameter>, <parameter pos:start="69:38" pos:end="69:61"><decl pos:start="69:38" pos:end="69:61"><type pos:start="69:38" pos:end="69:61"><specifier pos:start="69:38" pos:end="69:45">register</specifier> <specifier pos:start="69:47" pos:end="69:51">const</specifier> <name pos:start="69:53" pos:end="69:56">char</name> <modifier pos:start="69:58" pos:end="69:58">*</modifier></type><name pos:start="69:59" pos:end="69:61">src</name></decl></parameter>, <parameter pos:start="69:64" pos:end="69:71"><decl pos:start="69:64" pos:end="69:71"><type pos:start="69:64" pos:end="69:71"><name pos:start="69:64" pos:end="69:69">size_t</name></type> <name pos:start="69:71" pos:end="69:71">n</name></decl></parameter>)</parameter_list>
<block pos:start="70:1" pos:end="75:1">{<block_content pos:start="71:5" pos:end="74:16">
    <for pos:start="71:5" pos:end="73:5">for <control pos:start="71:9" pos:end="71:38">(<init pos:start="71:10" pos:end="71:10">;</init> <condition pos:start="71:12" pos:end="71:33"><expr pos:start="71:12" pos:end="71:32"><operator pos:start="71:12" pos:end="71:12">*</operator><name pos:start="71:13" pos:end="71:15">src</name> <operator pos:start="71:17" pos:end="71:18">!=</operator> <literal type="char" pos:start="71:20" pos:end="71:23">'\0'</literal> <operator pos:start="71:25" pos:end="71:26">&amp;&amp;</operator> <name pos:start="71:28" pos:end="71:28">n</name> <operator pos:start="71:30" pos:end="71:30">&gt;</operator> <literal type="number" pos:start="71:32" pos:end="71:32">1</literal></expr>;</condition> <incr pos:start="71:35" pos:end="71:37"><expr pos:start="71:35" pos:end="71:37"><name pos:start="71:35" pos:end="71:35">n</name><operator pos:start="71:36" pos:end="71:37">--</operator></expr></incr>)</control> <block pos:start="71:40" pos:end="73:5">{<block_content pos:start="72:9" pos:end="72:24">
        <expr_stmt pos:start="72:9" pos:end="72:24"><expr pos:start="72:9" pos:end="72:23"><operator pos:start="72:9" pos:end="72:9">*</operator><name pos:start="72:10" pos:end="72:12">dst</name><operator pos:start="72:13" pos:end="72:14">++</operator> <operator pos:start="72:16" pos:end="72:16">=</operator> <operator pos:start="72:18" pos:end="72:18">*</operator><name pos:start="72:19" pos:end="72:21">src</name><operator pos:start="72:22" pos:end="72:23">++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="74:5" pos:end="74:16"><expr pos:start="74:5" pos:end="74:15"><operator pos:start="74:5" pos:end="74:5">*</operator><name pos:start="74:6" pos:end="74:8">dst</name> <operator pos:start="74:10" pos:end="74:10">=</operator> <literal type="char" pos:start="74:12" pos:end="74:15">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="76:1" pos:end="76:46">// is not applicable at the moment of logging.</comment>
<function pos:start="77:1" pos:end="86:1"><type pos:start="77:1" pos:end="77:6"><name pos:start="77:1" pos:end="77:4">char</name> <modifier pos:start="77:6" pos:end="77:6">*</modifier></type> <name pos:start="77:8" pos:end="77:17">mg_strndup</name><parameter_list pos:start="77:18" pos:end="77:46">(<parameter pos:start="77:19" pos:end="77:33"><decl pos:start="77:19" pos:end="77:33"><type pos:start="77:19" pos:end="77:33"><specifier pos:start="77:19" pos:end="77:23">const</specifier> <name pos:start="77:25" pos:end="77:28">char</name> <modifier pos:start="77:30" pos:end="77:30">*</modifier></type><name pos:start="77:31" pos:end="77:33">ptr</name></decl></parameter>, <parameter pos:start="77:36" pos:end="77:45"><decl pos:start="77:36" pos:end="77:45"><type pos:start="77:36" pos:end="77:45"><name pos:start="77:36" pos:end="77:41">size_t</name></type> <name pos:start="77:43" pos:end="77:45">len</name></decl></parameter>)</parameter_list> <block pos:start="77:48" pos:end="86:1">{<block_content pos:start="79:9" pos:end="85:17">

	<decl_stmt pos:start="79:9" pos:end="79:16"><decl pos:start="79:9" pos:end="79:15"><type pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:12">char</name> <modifier pos:start="79:14" pos:end="79:14">*</modifier></type><name pos:start="79:15" pos:end="79:15">p</name></decl>;</decl_stmt>

	<if_stmt pos:start="81:9" pos:end="83:9"><if pos:start="81:9" pos:end="83:9">if <condition pos:start="81:12" pos:end="81:50">(<expr pos:start="81:13" pos:end="81:49"><operator pos:start="81:13" pos:end="81:13">(</operator><name pos:start="81:14" pos:end="81:14">p</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <operator pos:start="81:18" pos:end="81:18">(</operator><name pos:start="81:19" pos:end="81:22">char</name> <operator pos:start="81:24" pos:end="81:24">*</operator><operator pos:start="81:25" pos:end="81:25">)</operator><call pos:start="81:26" pos:end="81:40"><name pos:start="81:26" pos:end="81:31">malloc</name><argument_list pos:start="81:32" pos:end="81:40">(<argument pos:start="81:33" pos:end="81:39"><expr pos:start="81:33" pos:end="81:39"><name pos:start="81:33" pos:end="81:35">len</name> <operator pos:start="81:37" pos:end="81:37">+</operator> <literal type="number" pos:start="81:39" pos:end="81:39">1</literal></expr></argument>)</argument_list></call><operator pos:start="81:41" pos:end="81:41">)</operator> <operator pos:start="81:43" pos:end="81:44">!=</operator> <name pos:start="81:46" pos:end="81:49">NULL</name></expr>)</condition> <block pos:start="81:52" pos:end="83:9">{<block_content pos:start="82:17" pos:end="82:44">
		<expr_stmt pos:start="82:17" pos:end="82:44"><expr pos:start="82:17" pos:end="82:43"><call pos:start="82:17" pos:end="82:43"><name pos:start="82:17" pos:end="82:26">mg_strlcpy</name><argument_list pos:start="82:27" pos:end="82:43">(<argument pos:start="82:28" pos:end="82:28"><expr pos:start="82:28" pos:end="82:28"><name pos:start="82:28" pos:end="82:28">p</name></expr></argument>, <argument pos:start="82:31" pos:end="82:33"><expr pos:start="82:31" pos:end="82:33"><name pos:start="82:31" pos:end="82:33">ptr</name></expr></argument>, <argument pos:start="82:36" pos:end="82:42"><expr pos:start="82:36" pos:end="82:42"><name pos:start="82:36" pos:end="82:38">len</name> <operator pos:start="82:40" pos:end="82:40">+</operator> <literal type="number" pos:start="82:42" pos:end="82:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return pos:start="85:9" pos:end="85:17">return <expr pos:start="85:16" pos:end="85:16"><name pos:start="85:16" pos:end="85:16">p</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="87:1" pos:end="87:46">// is not applicable at the moment of logging.</comment>
<function pos:start="88:1" pos:end="91:1"><type pos:start="88:1" pos:end="88:10"><specifier pos:start="88:1" pos:end="88:6">static</specifier> <name pos:start="88:8" pos:end="88:10">int</name></type> <name pos:start="88:12" pos:end="88:20">lowercase</name> <parameter_list pos:start="88:22" pos:end="88:36">(<parameter pos:start="88:23" pos:end="88:35"><decl pos:start="88:23" pos:end="88:35"><type pos:start="88:23" pos:end="88:34"><specifier pos:start="88:23" pos:end="88:27">const</specifier> <name pos:start="88:29" pos:end="88:32">char</name> <modifier pos:start="88:34" pos:end="88:34">*</modifier></type><name pos:start="88:35" pos:end="88:35">s</name></decl></parameter>)</parameter_list>
<block pos:start="89:1" pos:end="91:1">{<block_content pos:start="90:5" pos:end="90:45">
    <return pos:start="90:5" pos:end="90:45">return <expr pos:start="90:12" pos:end="90:44"><call pos:start="90:12" pos:end="90:44"><name pos:start="90:12" pos:end="90:18">tolower</name><argument_list pos:start="90:19" pos:end="90:44">(<argument pos:start="90:20" pos:end="90:43"><expr pos:start="90:20" pos:end="90:43"><operator pos:start="90:20" pos:end="90:20">*</operator><operator pos:start="90:21" pos:end="90:21">(</operator><specifier pos:start="90:22" pos:end="90:26">const</specifier> <name pos:start="90:28" pos:end="90:35">unsigned</name> <name pos:start="90:37" pos:end="90:40">char</name><operator pos:start="90:41" pos:end="90:41">*</operator><operator pos:start="90:42" pos:end="90:42">)</operator><name pos:start="90:43" pos:end="90:43">s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="92:1" pos:end="92:46">// is not applicable at the moment of logging.</comment>
<function pos:start="93:1" pos:end="104:1"><type pos:start="93:1" pos:end="93:10"><specifier pos:start="93:1" pos:end="93:6">static</specifier> <name pos:start="93:8" pos:end="93:10">int</name></type> <name pos:start="93:12" pos:end="93:25">mg_strncasecmp</name> <parameter_list pos:start="93:27" pos:end="93:70">(<parameter pos:start="93:28" pos:end="93:41"><decl pos:start="93:28" pos:end="93:41"><type pos:start="93:28" pos:end="93:41"><specifier pos:start="93:28" pos:end="93:32">const</specifier> <name pos:start="93:34" pos:end="93:37">char</name> <modifier pos:start="93:39" pos:end="93:39">*</modifier></type><name pos:start="93:40" pos:end="93:41">s1</name></decl></parameter>, <parameter pos:start="93:44" pos:end="93:57"><decl pos:start="93:44" pos:end="93:57"><type pos:start="93:44" pos:end="93:57"><specifier pos:start="93:44" pos:end="93:48">const</specifier> <name pos:start="93:50" pos:end="93:53">char</name> <modifier pos:start="93:55" pos:end="93:55">*</modifier></type><name pos:start="93:56" pos:end="93:57">s2</name></decl></parameter>, <parameter pos:start="93:60" pos:end="93:69"><decl pos:start="93:60" pos:end="93:69"><type pos:start="93:60" pos:end="93:69"><name pos:start="93:60" pos:end="93:65">size_t</name></type> <name pos:start="93:67" pos:end="93:69">len</name></decl></parameter>)</parameter_list>
<block pos:start="94:1" pos:end="104:1">{<block_content pos:start="95:5" pos:end="103:16">
    <decl_stmt pos:start="95:5" pos:end="95:17"><decl pos:start="95:5" pos:end="95:16"><type pos:start="95:5" pos:end="95:7"><name pos:start="95:5" pos:end="95:7">int</name></type> <name pos:start="95:9" pos:end="95:12">diff</name> <init pos:start="95:14" pos:end="95:16">= <expr pos:start="95:16" pos:end="95:16"><literal type="number" pos:start="95:16" pos:end="95:16">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">len</name> <operator pos:start="97:13" pos:end="97:13">&gt;</operator> <literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>)</condition> <block pos:start="97:18" pos:end="101:5">{<block_content pos:start="98:9" pos:end="100:59">
        <do pos:start="98:9" pos:end="100:59">do <block pos:start="98:12" pos:end="100:9">{<block_content pos:start="99:13" pos:end="99:53">
            <expr_stmt pos:start="99:13" pos:end="99:53"><expr pos:start="99:13" pos:end="99:52"><name pos:start="99:13" pos:end="99:16">diff</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="99:34"><name pos:start="99:20" pos:end="99:28">lowercase</name><argument_list pos:start="99:29" pos:end="99:34">(<argument pos:start="99:30" pos:end="99:33"><expr pos:start="99:30" pos:end="99:33"><name pos:start="99:30" pos:end="99:31">s1</name><operator pos:start="99:32" pos:end="99:33">++</operator></expr></argument>)</argument_list></call> <operator pos:start="99:36" pos:end="99:36">-</operator> <call pos:start="99:38" pos:end="99:52"><name pos:start="99:38" pos:end="99:46">lowercase</name><argument_list pos:start="99:47" pos:end="99:52">(<argument pos:start="99:48" pos:end="99:51"><expr pos:start="99:48" pos:end="99:51"><name pos:start="99:48" pos:end="99:49">s2</name><operator pos:start="99:50" pos:end="99:51">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition pos:start="100:17" pos:end="100:58">(<expr pos:start="100:18" pos:end="100:57"><name pos:start="100:18" pos:end="100:21">diff</name> <operator pos:start="100:23" pos:end="100:24">==</operator> <literal type="number" pos:start="100:26" pos:end="100:26">0</literal> <operator pos:start="100:28" pos:end="100:29">&amp;&amp;</operator> <name pos:start="100:31" pos:end="100:36"><name pos:start="100:31" pos:end="100:32">s1</name><index pos:start="100:33" pos:end="100:36">[<expr pos:start="100:34" pos:end="100:35"><operator pos:start="100:34" pos:end="100:34">-</operator><literal type="number" pos:start="100:35" pos:end="100:35">1</literal></expr>]</index></name> <operator pos:start="100:38" pos:end="100:39">!=</operator> <literal type="char" pos:start="100:41" pos:end="100:44">'\0'</literal> <operator pos:start="100:46" pos:end="100:47">&amp;&amp;</operator> <operator pos:start="100:49" pos:end="100:50">--</operator><name pos:start="100:51" pos:end="100:53">len</name> <operator pos:start="100:55" pos:end="100:55">&gt;</operator> <literal type="number" pos:start="100:57" pos:end="100:57">0</literal></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>

    <return pos:start="103:5" pos:end="103:16">return <expr pos:start="103:12" pos:end="103:15"><name pos:start="103:12" pos:end="103:15">diff</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="105:1" pos:end="105:46">// is not applicable at the moment of logging.</comment>
<function pos:start="106:1" pos:end="115:1"><type pos:start="106:1" pos:end="106:10"><specifier pos:start="106:1" pos:end="106:6">static</specifier> <name pos:start="106:8" pos:end="106:10">int</name></type> <name pos:start="106:12" pos:end="106:24">mg_strcasecmp</name> <parameter_list pos:start="106:26" pos:end="106:57">(<parameter pos:start="106:27" pos:end="106:40"><decl pos:start="106:27" pos:end="106:40"><type pos:start="106:27" pos:end="106:40"><specifier pos:start="106:27" pos:end="106:31">const</specifier> <name pos:start="106:33" pos:end="106:36">char</name> <modifier pos:start="106:38" pos:end="106:38">*</modifier></type><name pos:start="106:39" pos:end="106:40">s1</name></decl></parameter>, <parameter pos:start="106:43" pos:end="106:56"><decl pos:start="106:43" pos:end="106:56"><type pos:start="106:43" pos:end="106:56"><specifier pos:start="106:43" pos:end="106:47">const</specifier> <name pos:start="106:49" pos:end="106:52">char</name> <modifier pos:start="106:54" pos:end="106:54">*</modifier></type><name pos:start="106:55" pos:end="106:56">s2</name></decl></parameter>)</parameter_list>
<block pos:start="107:1" pos:end="115:1">{<block_content pos:start="108:5" pos:end="114:16">
    <decl_stmt pos:start="108:5" pos:end="108:13"><decl pos:start="108:5" pos:end="108:12"><type pos:start="108:5" pos:end="108:7"><name pos:start="108:5" pos:end="108:7">int</name></type> <name pos:start="108:9" pos:end="108:12">diff</name></decl>;</decl_stmt>

    <do pos:start="110:5" pos:end="112:42">do <block pos:start="110:8" pos:end="112:5">{<block_content pos:start="111:9" pos:end="111:49">
        <expr_stmt pos:start="111:9" pos:end="111:49"><expr pos:start="111:9" pos:end="111:48"><name pos:start="111:9" pos:end="111:12">diff</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <call pos:start="111:16" pos:end="111:30"><name pos:start="111:16" pos:end="111:24">lowercase</name><argument_list pos:start="111:25" pos:end="111:30">(<argument pos:start="111:26" pos:end="111:29"><expr pos:start="111:26" pos:end="111:29"><name pos:start="111:26" pos:end="111:27">s1</name><operator pos:start="111:28" pos:end="111:29">++</operator></expr></argument>)</argument_list></call> <operator pos:start="111:32" pos:end="111:32">-</operator> <call pos:start="111:34" pos:end="111:48"><name pos:start="111:34" pos:end="111:42">lowercase</name><argument_list pos:start="111:43" pos:end="111:48">(<argument pos:start="111:44" pos:end="111:47"><expr pos:start="111:44" pos:end="111:47"><name pos:start="111:44" pos:end="111:45">s2</name><operator pos:start="111:46" pos:end="111:47">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition pos:start="112:13" pos:end="112:41">(<expr pos:start="112:14" pos:end="112:40"><name pos:start="112:14" pos:end="112:17">diff</name> <operator pos:start="112:19" pos:end="112:20">==</operator> <literal type="number" pos:start="112:22" pos:end="112:22">0</literal> <operator pos:start="112:24" pos:end="112:25">&amp;&amp;</operator> <name pos:start="112:27" pos:end="112:32"><name pos:start="112:27" pos:end="112:28">s1</name><index pos:start="112:29" pos:end="112:32">[<expr pos:start="112:30" pos:end="112:31"><operator pos:start="112:30" pos:end="112:30">-</operator><literal type="number" pos:start="112:31" pos:end="112:31">1</literal></expr>]</index></name> <operator pos:start="112:34" pos:end="112:35">!=</operator> <literal type="char" pos:start="112:37" pos:end="112:40">'\0'</literal></expr>)</condition>;</do>

    <return pos:start="114:5" pos:end="114:16">return <expr pos:start="114:12" pos:end="114:15"><name pos:start="114:12" pos:end="114:15">diff</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="116:1" pos:end="116:23">// in his audit report.</comment>
<function pos:start="117:1" pos:end="139:1"><type pos:start="117:1" pos:end="117:10"><specifier pos:start="117:1" pos:end="117:6">static</specifier> <name pos:start="117:8" pos:end="117:10">int</name></type> <name pos:start="117:12" pos:end="117:23">mg_vsnprintf</name> <parameter_list pos:start="117:25" pos:end="118:53">(<parameter pos:start="117:26" pos:end="117:51"><decl pos:start="117:26" pos:end="117:51"><type pos:start="117:26" pos:end="117:51"><name pos:start="117:26" pos:end="117:45"><name pos:start="117:26" pos:end="117:31">struct</name> <name pos:start="117:33" pos:end="117:45">mg_connection</name></name> <modifier pos:start="117:47" pos:end="117:47">*</modifier></type><name pos:start="117:48" pos:end="117:51">conn</name></decl></parameter>, <parameter pos:start="117:54" pos:end="117:62"><decl pos:start="117:54" pos:end="117:62"><type pos:start="117:54" pos:end="117:62"><name pos:start="117:54" pos:end="117:57">char</name> <modifier pos:start="117:59" pos:end="117:59">*</modifier></type><name pos:start="117:60" pos:end="117:62">buf</name></decl></parameter>, <parameter pos:start="117:65" pos:end="117:77"><decl pos:start="117:65" pos:end="117:77"><type pos:start="117:65" pos:end="117:77"><name pos:start="117:65" pos:end="117:70">size_t</name></type> <name pos:start="117:72" pos:end="117:77">buflen</name></decl></parameter>,
                         <parameter pos:start="118:26" pos:end="118:40"><decl pos:start="118:26" pos:end="118:40"><type pos:start="118:26" pos:end="118:40"><specifier pos:start="118:26" pos:end="118:30">const</specifier> <name pos:start="118:32" pos:end="118:35">char</name> <modifier pos:start="118:37" pos:end="118:37">*</modifier></type><name pos:start="118:38" pos:end="118:40">fmt</name></decl></parameter>, <parameter pos:start="118:43" pos:end="118:52"><decl pos:start="118:43" pos:end="118:52"><type pos:start="118:43" pos:end="118:52"><name pos:start="118:43" pos:end="118:49">va_list</name></type> <name pos:start="118:51" pos:end="118:52">ap</name></decl></parameter>)</parameter_list>
<block pos:start="119:1" pos:end="139:1">{<block_content pos:start="120:5" pos:end="138:13">
    <decl_stmt pos:start="120:5" pos:end="120:10"><decl pos:start="120:5" pos:end="120:9"><type pos:start="120:5" pos:end="120:7"><name pos:start="120:5" pos:end="120:7">int</name></type> <name pos:start="120:9" pos:end="120:9">n</name></decl>;</decl_stmt>

    <if_stmt pos:start="122:5" pos:end="124:5"><if pos:start="122:5" pos:end="124:5">if <condition pos:start="122:8" pos:end="122:20">(<expr pos:start="122:9" pos:end="122:19"><name pos:start="122:9" pos:end="122:14">buflen</name> <operator pos:start="122:16" pos:end="122:17">==</operator> <literal type="number" pos:start="122:19" pos:end="122:19">0</literal></expr>)</condition> <block pos:start="122:22" pos:end="124:5">{<block_content pos:start="123:9" pos:end="123:17">
        <return pos:start="123:9" pos:end="123:17">return <expr pos:start="123:16" pos:end="123:16"><literal type="number" pos:start="123:16" pos:end="123:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="126:5" pos:end="126:40"><expr pos:start="126:5" pos:end="126:39"><name pos:start="126:5" pos:end="126:5">n</name> <operator pos:start="126:7" pos:end="126:7">=</operator> <call pos:start="126:9" pos:end="126:39"><name pos:start="126:9" pos:end="126:17">vsnprintf</name><argument_list pos:start="126:18" pos:end="126:39">(<argument pos:start="126:19" pos:end="126:21"><expr pos:start="126:19" pos:end="126:21"><name pos:start="126:19" pos:end="126:21">buf</name></expr></argument>, <argument pos:start="126:24" pos:end="126:29"><expr pos:start="126:24" pos:end="126:29"><name pos:start="126:24" pos:end="126:29">buflen</name></expr></argument>, <argument pos:start="126:32" pos:end="126:34"><expr pos:start="126:32" pos:end="126:34"><name pos:start="126:32" pos:end="126:34">fmt</name></expr></argument>, <argument pos:start="126:37" pos:end="126:38"><expr pos:start="126:37" pos:end="126:38"><name pos:start="126:37" pos:end="126:38">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="128:5" pos:end="135:5"><if pos:start="128:5" pos:end="131:5">if <condition pos:start="128:8" pos:end="128:14">(<expr pos:start="128:9" pos:end="128:13"><name pos:start="128:9" pos:end="128:9">n</name> <operator pos:start="128:11" pos:end="128:11">&lt;</operator> <literal type="number" pos:start="128:13" pos:end="128:13">0</literal></expr>)</condition> <block pos:start="128:16" pos:end="131:5">{<block_content pos:start="129:9" pos:end="130:14">
        <expr_stmt pos:start="129:9" pos:end="129:37"><expr pos:start="129:9" pos:end="129:36"><call pos:start="129:9" pos:end="129:36"><name pos:start="129:9" pos:end="129:11">cry</name><argument_list pos:start="129:12" pos:end="129:36">(<argument pos:start="129:13" pos:end="129:16"><expr pos:start="129:13" pos:end="129:16"><name pos:start="129:13" pos:end="129:16">conn</name></expr></argument>, <argument pos:start="129:19" pos:end="129:35"><expr pos:start="129:19" pos:end="129:35"><literal type="string" pos:start="129:19" pos:end="129:35">"vsnprintf error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="130:9" pos:end="130:14"><expr pos:start="130:9" pos:end="130:13"><name pos:start="130:9" pos:end="130:9">n</name> <operator pos:start="130:11" pos:end="130:11">=</operator> <literal type="number" pos:start="130:13" pos:end="130:13">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="131:7" pos:end="135:5">else if <condition pos:start="131:15" pos:end="131:32">(<expr pos:start="131:16" pos:end="131:31"><name pos:start="131:16" pos:end="131:16">n</name> <operator pos:start="131:18" pos:end="131:19">&gt;=</operator> <operator pos:start="131:21" pos:end="131:21">(</operator><name pos:start="131:22" pos:end="131:24">int</name><operator pos:start="131:25" pos:end="131:25">)</operator><name pos:start="131:26" pos:end="131:31">buflen</name></expr>)</condition> <block pos:start="131:34" pos:end="135:5">{<block_content pos:start="132:9" pos:end="134:28">
        <expr_stmt pos:start="132:9" pos:end="133:36"><expr pos:start="132:9" pos:end="133:35"><call pos:start="132:9" pos:end="133:35"><name pos:start="132:9" pos:end="132:11">cry</name><argument_list pos:start="132:12" pos:end="133:35">(<argument pos:start="132:13" pos:end="132:16"><expr pos:start="132:13" pos:end="132:16"><name pos:start="132:13" pos:end="132:16">conn</name></expr></argument>, <argument pos:start="132:19" pos:end="132:55"><expr pos:start="132:19" pos:end="132:55"><literal type="string" pos:start="132:19" pos:end="132:55">"truncating vsnprintf buffer: [%.*s]"</literal></expr></argument>,
            <argument pos:start="133:13" pos:end="133:29"><expr pos:start="133:13" pos:end="133:29"><ternary pos:start="133:13" pos:end="133:29"><condition pos:start="133:13" pos:end="133:21"><expr pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:13">n</name> <operator pos:start="133:15" pos:end="133:15">&gt;</operator> <literal type="number" pos:start="133:17" pos:end="133:19">200</literal></expr> ?</condition><then pos:start="133:23" pos:end="133:25"> <expr pos:start="133:23" pos:end="133:25"><literal type="number" pos:start="133:23" pos:end="133:25">200</literal></expr> </then><else pos:start="133:27" pos:end="133:29">: <expr pos:start="133:29" pos:end="133:29"><name pos:start="133:29" pos:end="133:29">n</name></expr></else></ternary></expr></argument>, <argument pos:start="133:32" pos:end="133:34"><expr pos:start="133:32" pos:end="133:34"><name pos:start="133:32" pos:end="133:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="134:9" pos:end="134:28"><expr pos:start="134:9" pos:end="134:27"><name pos:start="134:9" pos:end="134:9">n</name> <operator pos:start="134:11" pos:end="134:11">=</operator> <operator pos:start="134:13" pos:end="134:13">(</operator><name pos:start="134:14" pos:end="134:16">int</name><operator pos:start="134:17" pos:end="134:17">)</operator><name pos:start="134:18" pos:end="134:23">buflen</name> <operator pos:start="134:25" pos:end="134:25">-</operator> <literal type="number" pos:start="134:27" pos:end="134:27">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="136:5" pos:end="136:18"><expr pos:start="136:5" pos:end="136:17"><name pos:start="136:5" pos:end="136:10"><name pos:start="136:5" pos:end="136:7">buf</name><index pos:start="136:8" pos:end="136:10">[<expr pos:start="136:9" pos:end="136:9"><name pos:start="136:9" pos:end="136:9">n</name></expr>]</index></name> <operator pos:start="136:12" pos:end="136:12">=</operator> <literal type="char" pos:start="136:14" pos:end="136:17">'\0'</literal></expr>;</expr_stmt>

    <return pos:start="138:5" pos:end="138:13">return <expr pos:start="138:12" pos:end="138:12"><name pos:start="138:12" pos:end="138:12">n</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="140:1" pos:end="140:20">//PRINTF_ARGS(4, 5);</comment>
<function pos:start="141:1" pos:end="152:1"><type pos:start="141:1" pos:end="141:10"><specifier pos:start="141:1" pos:end="141:6">static</specifier> <name pos:start="141:8" pos:end="141:10">int</name></type> <name pos:start="141:12" pos:end="141:22">mg_snprintf</name> <parameter_list pos:start="141:24" pos:end="142:45">(<parameter pos:start="141:25" pos:end="141:50"><decl pos:start="141:25" pos:end="141:50"><type pos:start="141:25" pos:end="141:50"><name pos:start="141:25" pos:end="141:44"><name pos:start="141:25" pos:end="141:30">struct</name> <name pos:start="141:32" pos:end="141:44">mg_connection</name></name> <modifier pos:start="141:46" pos:end="141:46">*</modifier></type><name pos:start="141:47" pos:end="141:50">conn</name></decl></parameter>, <parameter pos:start="141:53" pos:end="141:61"><decl pos:start="141:53" pos:end="141:61"><type pos:start="141:53" pos:end="141:61"><name pos:start="141:53" pos:end="141:56">char</name> <modifier pos:start="141:58" pos:end="141:58">*</modifier></type><name pos:start="141:59" pos:end="141:61">buf</name></decl></parameter>, <parameter pos:start="141:64" pos:end="141:76"><decl pos:start="141:64" pos:end="141:76"><type pos:start="141:64" pos:end="141:76"><name pos:start="141:64" pos:end="141:69">size_t</name></type> <name pos:start="141:71" pos:end="141:76">buflen</name></decl></parameter>,
                        <parameter pos:start="142:25" pos:end="142:39"><decl pos:start="142:25" pos:end="142:39"><type pos:start="142:25" pos:end="142:39"><specifier pos:start="142:25" pos:end="142:29">const</specifier> <name pos:start="142:31" pos:end="142:34">char</name> <modifier pos:start="142:36" pos:end="142:36">*</modifier></type><name pos:start="142:37" pos:end="142:39">fmt</name></decl></parameter>, <parameter pos:start="142:42" pos:end="142:44"><decl pos:start="142:42" pos:end="142:44"><type pos:start="142:42" pos:end="142:44"><modifier pos:start="142:42" pos:end="142:44">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="143:1" pos:end="152:1">{<block_content pos:start="144:5" pos:end="151:13">
    <decl_stmt pos:start="144:5" pos:end="144:15"><decl pos:start="144:5" pos:end="144:14"><type pos:start="144:5" pos:end="144:11"><name pos:start="144:5" pos:end="144:11">va_list</name></type> <name pos:start="144:13" pos:end="144:14">ap</name></decl>;</decl_stmt>
    <decl_stmt pos:start="145:5" pos:end="145:10"><decl pos:start="145:5" pos:end="145:9"><type pos:start="145:5" pos:end="145:7"><name pos:start="145:5" pos:end="145:7">int</name></type> <name pos:start="145:9" pos:end="145:9">n</name></decl>;</decl_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:22"><expr pos:start="147:5" pos:end="147:21"><call pos:start="147:5" pos:end="147:21"><name pos:start="147:5" pos:end="147:12">va_start</name><argument_list pos:start="147:13" pos:end="147:21">(<argument pos:start="147:14" pos:end="147:15"><expr pos:start="147:14" pos:end="147:15"><name pos:start="147:14" pos:end="147:15">ap</name></expr></argument>, <argument pos:start="147:18" pos:end="147:20"><expr pos:start="147:18" pos:end="147:20"><name pos:start="147:18" pos:end="147:20">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="148:5" pos:end="148:49"><expr pos:start="148:5" pos:end="148:48"><name pos:start="148:5" pos:end="148:5">n</name> <operator pos:start="148:7" pos:end="148:7">=</operator> <call pos:start="148:9" pos:end="148:48"><name pos:start="148:9" pos:end="148:20">mg_vsnprintf</name><argument_list pos:start="148:21" pos:end="148:48">(<argument pos:start="148:22" pos:end="148:25"><expr pos:start="148:22" pos:end="148:25"><name pos:start="148:22" pos:end="148:25">conn</name></expr></argument>, <argument pos:start="148:28" pos:end="148:30"><expr pos:start="148:28" pos:end="148:30"><name pos:start="148:28" pos:end="148:30">buf</name></expr></argument>, <argument pos:start="148:33" pos:end="148:38"><expr pos:start="148:33" pos:end="148:38"><name pos:start="148:33" pos:end="148:38">buflen</name></expr></argument>, <argument pos:start="148:41" pos:end="148:43"><expr pos:start="148:41" pos:end="148:43"><name pos:start="148:41" pos:end="148:43">fmt</name></expr></argument>, <argument pos:start="148:46" pos:end="148:47"><expr pos:start="148:46" pos:end="148:47"><name pos:start="148:46" pos:end="148:47">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="149:5" pos:end="149:15"><expr pos:start="149:5" pos:end="149:14"><call pos:start="149:5" pos:end="149:14"><name pos:start="149:5" pos:end="149:10">va_end</name><argument_list pos:start="149:11" pos:end="149:14">(<argument pos:start="149:12" pos:end="149:13"><expr pos:start="149:12" pos:end="149:13"><name pos:start="149:12" pos:end="149:13">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="151:5" pos:end="151:13">return <expr pos:start="151:12" pos:end="151:12"><name pos:start="151:12" pos:end="151:12">n</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="153:1" pos:end="153:20">//PRINTF_ARGS(4, 5);</comment>
<function pos:start="154:1" pos:end="173:1"><type pos:start="154:1" pos:end="154:13"><specifier pos:start="154:1" pos:end="154:6">static</specifier> <name pos:start="154:8" pos:end="154:13">size_t</name></type> <name pos:start="154:15" pos:end="154:25">est_strcspn</name><parameter_list pos:start="154:26" pos:end="154:62">(<parameter pos:start="154:27" pos:end="154:43"><decl pos:start="154:27" pos:end="154:43"><type pos:start="154:27" pos:end="154:43"><specifier pos:start="154:27" pos:end="154:31">const</specifier> <name pos:start="154:33" pos:end="154:36">char</name> <modifier pos:start="154:38" pos:end="154:38">*</modifier></type> <name pos:start="154:40" pos:end="154:43">str1</name></decl></parameter>,<parameter pos:start="154:45" pos:end="154:61"><decl pos:start="154:45" pos:end="154:61"><type pos:start="154:45" pos:end="154:61"><specifier pos:start="154:45" pos:end="154:49">const</specifier> <name pos:start="154:51" pos:end="154:54">char</name> <modifier pos:start="154:56" pos:end="154:56">*</modifier></type> <name pos:start="154:58" pos:end="154:61">str2</name></decl></parameter>)</parameter_list><block pos:start="154:63" pos:end="173:1">{<block_content pos:start="156:5" pos:end="170:17">

    <decl_stmt pos:start="156:5" pos:end="156:18"><decl pos:start="156:5" pos:end="156:17"><type pos:start="156:5" pos:end="156:11"><name pos:start="156:5" pos:end="156:11">rsize_t</name></type> <name pos:start="156:13" pos:end="156:17">count</name></decl>;</decl_stmt>
    <decl_stmt pos:start="157:5" pos:end="157:21"><decl pos:start="157:5" pos:end="157:20"><type pos:start="157:5" pos:end="157:11"><name pos:start="157:5" pos:end="157:11">errno_t</name></type> <name pos:start="157:13" pos:end="157:20">safec_rc</name></decl>;</decl_stmt> 

    <if_stmt pos:start="159:5" pos:end="161:5"><if pos:start="159:5" pos:end="161:5">if <condition pos:start="159:8" pos:end="159:44">(<expr pos:start="159:9" pos:end="159:43"><operator pos:start="159:9" pos:end="159:9">(</operator><name pos:start="159:10" pos:end="159:13">str1</name> <operator pos:start="159:15" pos:end="159:16">!=</operator> <name pos:start="159:18" pos:end="159:21">NULL</name><operator pos:start="159:22" pos:end="159:22">)</operator> <operator pos:start="159:24" pos:end="159:25">&amp;&amp;</operator> <operator pos:start="159:27" pos:end="159:27">(</operator><name pos:start="159:28" pos:end="159:34"><name pos:start="159:28" pos:end="159:31">str1</name><index pos:start="159:32" pos:end="159:34">[<expr pos:start="159:33" pos:end="159:33"><literal type="number" pos:start="159:33" pos:end="159:33">0</literal></expr>]</index></name> <operator pos:start="159:36" pos:end="159:37">==</operator> <literal type="char" pos:start="159:39" pos:end="159:42">'\0'</literal><operator pos:start="159:43" pos:end="159:43">)</operator></expr>)</condition> <block pos:start="159:46" pos:end="161:5">{<block_content pos:start="160:9" pos:end="160:17">
        <return pos:start="160:9" pos:end="160:17">return <expr pos:start="160:16" pos:end="160:16"><literal type="number" pos:start="160:16" pos:end="160:16">0</literal></expr>;</return> 
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="164:41"><expr pos:start="163:5" pos:end="164:40"><name pos:start="163:5" pos:end="163:12">safec_rc</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <call pos:start="163:16" pos:end="164:40"><name pos:start="163:16" pos:end="163:24">strcspn_s</name><argument_list pos:start="163:25" pos:end="164:40">(<argument pos:start="163:26" pos:end="163:29"><expr pos:start="163:26" pos:end="163:29"><name pos:start="163:26" pos:end="163:29">str1</name></expr></argument>, <argument pos:start="163:32" pos:end="163:61"><expr pos:start="163:32" pos:end="163:61"><call pos:start="163:32" pos:end="163:61"><name pos:start="163:32" pos:end="163:40">strnlen_s</name><argument_list pos:start="163:41" pos:end="163:61">(<argument pos:start="163:42" pos:end="163:45"><expr pos:start="163:42" pos:end="163:45"><name pos:start="163:42" pos:end="163:45">str1</name></expr></argument>, <argument pos:start="163:48" pos:end="163:60"><expr pos:start="163:48" pos:end="163:60"><name pos:start="163:48" pos:end="163:60">RSIZE_MAX_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument pos:start="164:13" pos:end="164:16"><expr pos:start="164:13" pos:end="164:16"><name pos:start="164:13" pos:end="164:16">str2</name></expr></argument>, <argument pos:start="164:19" pos:end="164:31"><expr pos:start="164:19" pos:end="164:31"><name pos:start="164:19" pos:end="164:31">RSIZE_MAX_STR</name></expr></argument>, <argument pos:start="164:34" pos:end="164:39"><expr pos:start="164:34" pos:end="164:39"><operator pos:start="164:34" pos:end="164:34">&amp;</operator><name pos:start="164:35" pos:end="164:39">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="165:5" pos:end="168:5"><if pos:start="165:5" pos:end="168:5">if <condition pos:start="165:8" pos:end="165:24">(<expr pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:16">safec_rc</name> <operator pos:start="165:18" pos:end="165:19">!=</operator> <name pos:start="165:21" pos:end="165:23">EOK</name></expr>)</condition> <block pos:start="165:26" pos:end="168:5">{<block_content pos:start="166:9" pos:end="167:17">
        <expr_stmt pos:start="166:9" pos:end="166:58"><expr pos:start="166:9" pos:end="166:57"><call pos:start="166:9" pos:end="166:57"><name pos:start="166:9" pos:end="166:20">EST_LOG_INFO</name><argument_list pos:start="166:21" pos:end="166:57">(<argument pos:start="166:22" pos:end="166:46"><expr pos:start="166:22" pos:end="166:46"><literal type="string" pos:start="166:22" pos:end="166:46">"strcspn_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="166:49" pos:end="166:56"><expr pos:start="166:49" pos:end="166:56"><name pos:start="166:49" pos:end="166:56">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="167:9" pos:end="167:17">return <expr pos:start="167:16" pos:end="167:16"><literal type="number" pos:start="167:16" pos:end="167:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="170:5" pos:end="170:17">return <expr pos:start="170:12" pos:end="170:16"><name pos:start="170:12" pos:end="170:16">count</name></expr>;</return> 


</block_content>}</block></function>
<comment type="line" pos:start="174:1" pos:end="174:20">//PRINTF_ARGS(4, 5);</comment>
<function pos:start="175:1" pos:end="193:1"><type pos:start="175:1" pos:end="175:13"><specifier pos:start="175:1" pos:end="175:6">static</specifier> <name pos:start="175:8" pos:end="175:13">size_t</name></type> <name pos:start="175:15" pos:end="175:24">est_strspn</name><parameter_list pos:start="175:25" pos:end="175:62">(<parameter pos:start="175:26" pos:end="175:42"><decl pos:start="175:26" pos:end="175:42"><type pos:start="175:26" pos:end="175:42"><specifier pos:start="175:26" pos:end="175:30">const</specifier> <name pos:start="175:32" pos:end="175:35">char</name> <modifier pos:start="175:37" pos:end="175:37">*</modifier></type> <name pos:start="175:39" pos:end="175:42">str1</name></decl></parameter>,<parameter pos:start="175:44" pos:end="175:61"><decl pos:start="175:44" pos:end="175:61"><type pos:start="175:44" pos:end="175:61"><specifier pos:start="175:44" pos:end="175:48">const</specifier> <name pos:start="175:50" pos:end="175:53">char</name>  <modifier pos:start="175:56" pos:end="175:56">*</modifier></type> <name pos:start="175:58" pos:end="175:61">str2</name></decl></parameter>)</parameter_list> <block pos:start="175:64" pos:end="193:1">{<block_content pos:start="177:5" pos:end="191:17">

    <decl_stmt pos:start="177:5" pos:end="177:18"><decl pos:start="177:5" pos:end="177:17"><type pos:start="177:5" pos:end="177:11"><name pos:start="177:5" pos:end="177:11">rsize_t</name></type> <name pos:start="177:13" pos:end="177:17">count</name></decl>;</decl_stmt>
    <decl_stmt pos:start="178:5" pos:end="178:21"><decl pos:start="178:5" pos:end="178:20"><type pos:start="178:5" pos:end="178:11"><name pos:start="178:5" pos:end="178:11">errno_t</name></type> <name pos:start="178:13" pos:end="178:20">safec_rc</name></decl>;</decl_stmt> 

    <if_stmt pos:start="180:5" pos:end="182:5"><if pos:start="180:5" pos:end="182:5">if <condition pos:start="180:8" pos:end="180:44">(<expr pos:start="180:9" pos:end="180:43"><operator pos:start="180:9" pos:end="180:9">(</operator><name pos:start="180:10" pos:end="180:13">str1</name> <operator pos:start="180:15" pos:end="180:16">!=</operator> <name pos:start="180:18" pos:end="180:21">NULL</name><operator pos:start="180:22" pos:end="180:22">)</operator> <operator pos:start="180:24" pos:end="180:25">&amp;&amp;</operator> <operator pos:start="180:27" pos:end="180:27">(</operator><name pos:start="180:28" pos:end="180:34"><name pos:start="180:28" pos:end="180:31">str1</name><index pos:start="180:32" pos:end="180:34">[<expr pos:start="180:33" pos:end="180:33"><literal type="number" pos:start="180:33" pos:end="180:33">0</literal></expr>]</index></name> <operator pos:start="180:36" pos:end="180:37">==</operator> <literal type="char" pos:start="180:39" pos:end="180:42">'\0'</literal><operator pos:start="180:43" pos:end="180:43">)</operator></expr>)</condition> <block pos:start="180:46" pos:end="182:5">{<block_content pos:start="181:9" pos:end="181:17">
        <return pos:start="181:9" pos:end="181:17">return <expr pos:start="181:16" pos:end="181:16"><literal type="number" pos:start="181:16" pos:end="181:16">0</literal></expr>;</return> 
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="184:5" pos:end="185:41"><expr pos:start="184:5" pos:end="185:40"><name pos:start="184:5" pos:end="184:12">safec_rc</name> <operator pos:start="184:14" pos:end="184:14">=</operator> <call pos:start="184:16" pos:end="185:40"><name pos:start="184:16" pos:end="184:23">strspn_s</name><argument_list pos:start="184:24" pos:end="185:40">(<argument pos:start="184:25" pos:end="184:28"><expr pos:start="184:25" pos:end="184:28"><name pos:start="184:25" pos:end="184:28">str1</name></expr></argument>, <argument pos:start="184:31" pos:end="184:60"><expr pos:start="184:31" pos:end="184:60"><call pos:start="184:31" pos:end="184:60"><name pos:start="184:31" pos:end="184:39">strnlen_s</name><argument_list pos:start="184:40" pos:end="184:60">(<argument pos:start="184:41" pos:end="184:44"><expr pos:start="184:41" pos:end="184:44"><name pos:start="184:41" pos:end="184:44">str1</name></expr></argument>, <argument pos:start="184:47" pos:end="184:59"><expr pos:start="184:47" pos:end="184:59"><name pos:start="184:47" pos:end="184:59">RSIZE_MAX_STR</name></expr></argument>)</argument_list></call></expr></argument>, 
            <argument pos:start="185:13" pos:end="185:16"><expr pos:start="185:13" pos:end="185:16"><name pos:start="185:13" pos:end="185:16">str2</name></expr></argument>, <argument pos:start="185:19" pos:end="185:31"><expr pos:start="185:19" pos:end="185:31"><name pos:start="185:19" pos:end="185:31">RSIZE_MAX_STR</name></expr></argument>, <argument pos:start="185:34" pos:end="185:39"><expr pos:start="185:34" pos:end="185:39"><operator pos:start="185:34" pos:end="185:34">&amp;</operator><name pos:start="185:35" pos:end="185:39">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="186:5" pos:end="189:5"><if pos:start="186:5" pos:end="189:5">if <condition pos:start="186:8" pos:end="186:24">(<expr pos:start="186:9" pos:end="186:23"><name pos:start="186:9" pos:end="186:16">safec_rc</name> <operator pos:start="186:18" pos:end="186:19">!=</operator> <name pos:start="186:21" pos:end="186:23">EOK</name></expr>)</condition> <block pos:start="186:26" pos:end="189:5">{<block_content pos:start="187:9" pos:end="188:17">
        <expr_stmt pos:start="187:9" pos:end="187:57"><expr pos:start="187:9" pos:end="187:56"><call pos:start="187:9" pos:end="187:56"><name pos:start="187:9" pos:end="187:20">EST_LOG_INFO</name><argument_list pos:start="187:21" pos:end="187:56">(<argument pos:start="187:22" pos:end="187:45"><expr pos:start="187:22" pos:end="187:45"><literal type="string" pos:start="187:22" pos:end="187:45">"strspn_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="187:48" pos:end="187:55"><expr pos:start="187:48" pos:end="187:55"><name pos:start="187:48" pos:end="187:55">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="188:9" pos:end="188:17">return <expr pos:start="188:16" pos:end="188:16"><literal type="number" pos:start="188:16" pos:end="188:16">0</literal></expr>;</return> 
    </block_content>}</block></if></if_stmt>

    <return pos:start="191:5" pos:end="191:17">return <expr pos:start="191:12" pos:end="191:16"><name pos:start="191:12" pos:end="191:16">count</name></expr>;</return> 

</block_content>}</block></function>
<comment type="line" pos:start="194:1" pos:end="194:43">// Delimiters can be quoted with quotechar.</comment>
<function pos:start="195:1" pos:end="239:1"><type pos:start="195:1" pos:end="195:6"><name pos:start="195:1" pos:end="195:4">char</name> <modifier pos:start="195:6" pos:end="195:6">*</modifier></type><name pos:start="195:7" pos:end="195:17">skip_quoted</name> <parameter_list pos:start="195:19" pos:end="196:58">(<parameter pos:start="195:20" pos:end="195:29"><decl pos:start="195:20" pos:end="195:29"><type pos:start="195:20" pos:end="195:29"><name pos:start="195:20" pos:end="195:23">char</name> <modifier pos:start="195:25" pos:end="195:25">*</modifier><modifier pos:start="195:26" pos:end="195:26">*</modifier></type><name pos:start="195:27" pos:end="195:29">buf</name></decl></parameter>, <parameter pos:start="195:32" pos:end="195:53"><decl pos:start="195:32" pos:end="195:53"><type pos:start="195:32" pos:end="195:53"><specifier pos:start="195:32" pos:end="195:36">const</specifier> <name pos:start="195:38" pos:end="195:41">char</name> <modifier pos:start="195:43" pos:end="195:43">*</modifier></type><name pos:start="195:44" pos:end="195:53">delimiters</name></decl></parameter>,
                   <parameter pos:start="196:20" pos:end="196:41"><decl pos:start="196:20" pos:end="196:41"><type pos:start="196:20" pos:end="196:41"><specifier pos:start="196:20" pos:end="196:24">const</specifier> <name pos:start="196:26" pos:end="196:29">char</name> <modifier pos:start="196:31" pos:end="196:31">*</modifier></type><name pos:start="196:32" pos:end="196:41">whitespace</name></decl></parameter>, <parameter pos:start="196:44" pos:end="196:57"><decl pos:start="196:44" pos:end="196:57"><type pos:start="196:44" pos:end="196:57"><name pos:start="196:44" pos:end="196:47">char</name></type> <name pos:start="196:49" pos:end="196:57">quotechar</name></decl></parameter>)</parameter_list>
<block pos:start="197:1" pos:end="239:1">{<block_content pos:start="198:5" pos:end="238:22">
    <decl_stmt pos:start="198:5" pos:end="198:53"><decl pos:start="198:5" pos:end="198:11"><type pos:start="198:5" pos:end="198:10"><name pos:start="198:5" pos:end="198:8">char</name> <modifier pos:start="198:10" pos:end="198:10">*</modifier></type><name pos:start="198:11" pos:end="198:11">p</name></decl>, <decl pos:start="198:14" pos:end="198:24"><type ref="prev" pos:start="198:5" pos:end="198:10"><modifier pos:start="198:14" pos:end="198:14">*</modifier></type><name pos:start="198:15" pos:end="198:24">begin_word</name></decl>, <decl pos:start="198:27" pos:end="198:35"><type ref="prev" pos:start="198:5" pos:end="198:10"><modifier pos:start="198:27" pos:end="198:27">*</modifier></type><name pos:start="198:28" pos:end="198:35">end_word</name></decl>, <decl pos:start="198:38" pos:end="198:52"><type ref="prev" pos:start="198:5" pos:end="198:10"><modifier pos:start="198:38" pos:end="198:38">*</modifier></type><name pos:start="198:39" pos:end="198:52">end_whitespace</name></decl>;</decl_stmt>

    <expr_stmt pos:start="200:5" pos:end="200:22"><expr pos:start="200:5" pos:end="200:21"><name pos:start="200:5" pos:end="200:14">begin_word</name> <operator pos:start="200:16" pos:end="200:16">=</operator> <operator pos:start="200:18" pos:end="200:18">*</operator><name pos:start="200:19" pos:end="200:21">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="202:5" pos:end="202:63"><expr pos:start="202:5" pos:end="202:62"><name pos:start="202:5" pos:end="202:12">end_word</name> <operator pos:start="202:14" pos:end="202:14">=</operator> <name pos:start="202:16" pos:end="202:25">begin_word</name> <operator pos:start="202:27" pos:end="202:27">+</operator> <call pos:start="202:29" pos:end="202:62"><name pos:start="202:29" pos:end="202:39">est_strcspn</name><argument_list pos:start="202:40" pos:end="202:62">(<argument pos:start="202:41" pos:end="202:50"><expr pos:start="202:41" pos:end="202:50"><name pos:start="202:41" pos:end="202:50">begin_word</name></expr></argument>,<argument pos:start="202:52" pos:end="202:61"><expr pos:start="202:52" pos:end="202:61"><name pos:start="202:52" pos:end="202:61">delimiters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="204:5" pos:end="204:26">// Check for quotechar</comment>
    <if_stmt pos:start="205:5" pos:end="223:5"><if pos:start="205:5" pos:end="223:5">if <condition pos:start="205:8" pos:end="205:30">(<expr pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:16">end_word</name> <operator pos:start="205:18" pos:end="205:18">&gt;</operator> <name pos:start="205:20" pos:end="205:29">begin_word</name></expr>)</condition> <block pos:start="205:32" pos:end="223:5">{<block_content pos:start="206:9" pos:end="222:9">
        <expr_stmt pos:start="206:9" pos:end="206:25"><expr pos:start="206:9" pos:end="206:24"><name pos:start="206:9" pos:end="206:9">p</name> <operator pos:start="206:11" pos:end="206:11">=</operator> <name pos:start="206:13" pos:end="206:20">end_word</name> <operator pos:start="206:22" pos:end="206:22">-</operator> <literal type="number" pos:start="206:24" pos:end="206:24">1</literal></expr>;</expr_stmt>
        <while pos:start="207:9" pos:end="219:9">while <condition pos:start="207:15" pos:end="207:31">(<expr pos:start="207:16" pos:end="207:30"><operator pos:start="207:16" pos:end="207:16">*</operator><name pos:start="207:17" pos:end="207:17">p</name> <operator pos:start="207:19" pos:end="207:20">==</operator> <name pos:start="207:22" pos:end="207:30">quotechar</name></expr>)</condition> <block pos:start="207:33" pos:end="219:9">{<block_content pos:start="209:13" pos:end="218:13">
            <comment type="line" pos:start="208:13" pos:end="208:60">// If there is anything beyond end_word, copy it</comment>
            <if_stmt pos:start="209:13" pos:end="218:13"><if pos:start="209:13" pos:end="212:13">if <condition pos:start="209:16" pos:end="209:34">(<expr pos:start="209:17" pos:end="209:33"><operator pos:start="209:17" pos:end="209:17">*</operator><name pos:start="209:18" pos:end="209:25">end_word</name> <operator pos:start="209:27" pos:end="209:28">==</operator> <literal type="char" pos:start="209:30" pos:end="209:33">'\0'</literal></expr>)</condition> <block pos:start="209:36" pos:end="212:13">{<block_content pos:start="210:17" pos:end="211:22">
                <expr_stmt pos:start="210:17" pos:end="210:26"><expr pos:start="210:17" pos:end="210:25"><operator pos:start="210:17" pos:end="210:17">*</operator><name pos:start="210:18" pos:end="210:18">p</name> <operator pos:start="210:20" pos:end="210:20">=</operator> <literal type="char" pos:start="210:22" pos:end="210:25">'\0'</literal></expr>;</expr_stmt>
                <break pos:start="211:17" pos:end="211:22">break;</break>
            </block_content>}</block></if> <else pos:start="212:15" pos:end="218:13">else <block pos:start="212:20" pos:end="218:13">{<block_content pos:start="214:17" pos:end="217:40">

                <decl_stmt pos:start="214:17" pos:end="214:82"><decl pos:start="214:17" pos:end="214:81"><type pos:start="214:17" pos:end="214:23"><name pos:start="214:17" pos:end="214:23">rsize_t</name></type> <name pos:start="214:25" pos:end="214:31">end_off</name> <init pos:start="214:33" pos:end="214:81">= <expr pos:start="214:35" pos:end="214:81"><operator pos:start="214:35" pos:end="214:35">(</operator><name pos:start="214:36" pos:end="214:42">rsize_t</name><operator pos:start="214:43" pos:end="214:43">)</operator> <call pos:start="214:45" pos:end="214:81"><name pos:start="214:45" pos:end="214:55">est_strcspn</name><argument_list pos:start="214:56" pos:end="214:81">(<argument pos:start="214:57" pos:end="214:68"><expr pos:start="214:57" pos:end="214:68"><name pos:start="214:57" pos:end="214:64">end_word</name> <operator pos:start="214:66" pos:end="214:66">+</operator> <literal type="number" pos:start="214:68" pos:end="214:68">1</literal></expr></argument>, <argument pos:start="214:71" pos:end="214:80"><expr pos:start="214:71" pos:end="214:80"><name pos:start="214:71" pos:end="214:80">delimiters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="215:17" pos:end="215:65"><expr pos:start="215:17" pos:end="215:64"><call pos:start="215:17" pos:end="215:64"><name pos:start="215:17" pos:end="215:25">memmove_s</name><argument_list pos:start="215:26" pos:end="215:64">(<argument pos:start="215:27" pos:end="215:27"><expr pos:start="215:27" pos:end="215:27"><name pos:start="215:27" pos:end="215:27">p</name></expr></argument>, <argument pos:start="215:30" pos:end="215:40"><expr pos:start="215:30" pos:end="215:40"><name pos:start="215:30" pos:end="215:36">end_off</name> <operator pos:start="215:38" pos:end="215:38">+</operator> <literal type="number" pos:start="215:40" pos:end="215:40">1</literal></expr></argument>, <argument pos:start="215:43" pos:end="215:50"><expr pos:start="215:43" pos:end="215:50"><name pos:start="215:43" pos:end="215:50">end_word</name></expr></argument>, <argument pos:start="215:53" pos:end="215:63"><expr pos:start="215:53" pos:end="215:63"><name pos:start="215:53" pos:end="215:59">end_off</name> <operator pos:start="215:61" pos:end="215:61">+</operator> <literal type="number" pos:start="215:63" pos:end="215:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="216:17" pos:end="216:29"><expr pos:start="216:17" pos:end="216:28"><name pos:start="216:17" pos:end="216:17">p</name> <operator pos:start="216:19" pos:end="216:20">+=</operator> <name pos:start="216:22" pos:end="216:28">end_off</name></expr>;</expr_stmt> <comment type="line" pos:start="216:31" pos:end="216:66">// p must correspond to end_word - 1</comment>
                <expr_stmt pos:start="217:17" pos:end="217:40"><expr pos:start="217:17" pos:end="217:39"><name pos:start="217:17" pos:end="217:24">end_word</name> <operator pos:start="217:26" pos:end="217:27">+=</operator> <name pos:start="217:29" pos:end="217:35">end_off</name> <operator pos:start="217:37" pos:end="217:37">+</operator> <literal type="number" pos:start="217:39" pos:end="217:39">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <for pos:start="220:9" pos:end="222:9">for <control pos:start="220:13" pos:end="220:36">(<init pos:start="220:14" pos:end="220:17"><expr pos:start="220:14" pos:end="220:16"><name pos:start="220:14" pos:end="220:14">p</name><operator pos:start="220:15" pos:end="220:16">++</operator></expr>;</init> <condition pos:start="220:19" pos:end="220:31"><expr pos:start="220:19" pos:end="220:30"><name pos:start="220:19" pos:end="220:19">p</name> <operator pos:start="220:21" pos:end="220:21">&lt;</operator> <name pos:start="220:23" pos:end="220:30">end_word</name></expr>;</condition> <incr pos:start="220:33" pos:end="220:35"><expr pos:start="220:33" pos:end="220:35"><name pos:start="220:33" pos:end="220:33">p</name><operator pos:start="220:34" pos:end="220:35">++</operator></expr></incr>)</control> <block pos:start="220:38" pos:end="222:9">{<block_content pos:start="221:13" pos:end="221:22">
            <expr_stmt pos:start="221:13" pos:end="221:22"><expr pos:start="221:13" pos:end="221:21"><operator pos:start="221:13" pos:end="221:13">*</operator><name pos:start="221:14" pos:end="221:14">p</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <literal type="char" pos:start="221:18" pos:end="221:21">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="225:5" pos:end="236:5"><if pos:start="225:5" pos:end="227:5">if <condition pos:start="225:8" pos:end="225:26">(<expr pos:start="225:9" pos:end="225:25"><operator pos:start="225:9" pos:end="225:9">*</operator><name pos:start="225:10" pos:end="225:17">end_word</name> <operator pos:start="225:19" pos:end="225:20">==</operator> <literal type="char" pos:start="225:22" pos:end="225:25">'\0'</literal></expr>)</condition> <block pos:start="225:28" pos:end="227:5">{<block_content pos:start="226:9" pos:end="226:24">
        <expr_stmt pos:start="226:9" pos:end="226:24"><expr pos:start="226:9" pos:end="226:23"><operator pos:start="226:9" pos:end="226:9">*</operator><name pos:start="226:10" pos:end="226:12">buf</name> <operator pos:start="226:14" pos:end="226:14">=</operator> <name pos:start="226:16" pos:end="226:23">end_word</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="227:7" pos:end="236:5">else <block pos:start="227:12" pos:end="236:5">{<block_content pos:start="229:9" pos:end="235:30">

        <expr_stmt pos:start="229:9" pos:end="229:77"><expr pos:start="229:9" pos:end="229:76"><name pos:start="229:9" pos:end="229:22">end_whitespace</name> <operator pos:start="229:24" pos:end="229:24">=</operator> <name pos:start="229:26" pos:end="229:33">end_word</name> <operator pos:start="229:35" pos:end="229:35">+</operator> <literal type="number" pos:start="229:37" pos:end="229:39">1</literal> <operator pos:start="229:39" pos:end="229:39">+</operator> <call pos:start="229:41" pos:end="229:76"><name pos:start="229:41" pos:end="229:50">est_strspn</name><argument_list pos:start="229:51" pos:end="229:76">(<argument pos:start="229:52" pos:end="229:63"><expr pos:start="229:52" pos:end="229:63"><name pos:start="229:52" pos:end="229:59">end_word</name> <operator pos:start="229:61" pos:end="229:61">+</operator> <literal type="number" pos:start="229:63" pos:end="229:63">1</literal></expr></argument>, <argument pos:start="229:66" pos:end="229:75"><expr pos:start="229:66" pos:end="229:75"><name pos:start="229:66" pos:end="229:75">whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="231:9" pos:end="233:9">for <control pos:start="231:13" pos:end="231:51">(<init pos:start="231:14" pos:end="231:26"><expr pos:start="231:14" pos:end="231:25"><name pos:start="231:14" pos:end="231:14">p</name> <operator pos:start="231:16" pos:end="231:16">=</operator> <name pos:start="231:18" pos:end="231:25">end_word</name></expr>;</init> <condition pos:start="231:28" pos:end="231:46"><expr pos:start="231:28" pos:end="231:45"><name pos:start="231:28" pos:end="231:28">p</name> <operator pos:start="231:30" pos:end="231:30">&lt;</operator> <name pos:start="231:32" pos:end="231:45">end_whitespace</name></expr>;</condition> <incr pos:start="231:48" pos:end="231:50"><expr pos:start="231:48" pos:end="231:50"><name pos:start="231:48" pos:end="231:48">p</name><operator pos:start="231:49" pos:end="231:50">++</operator></expr></incr>)</control> <block pos:start="231:53" pos:end="233:9">{<block_content pos:start="232:13" pos:end="232:22">
            <expr_stmt pos:start="232:13" pos:end="232:22"><expr pos:start="232:13" pos:end="232:21"><operator pos:start="232:13" pos:end="232:13">*</operator><name pos:start="232:14" pos:end="232:14">p</name> <operator pos:start="232:16" pos:end="232:16">=</operator> <literal type="char" pos:start="232:18" pos:end="232:21">'\0'</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt pos:start="235:9" pos:end="235:30"><expr pos:start="235:9" pos:end="235:29"><operator pos:start="235:9" pos:end="235:9">*</operator><name pos:start="235:10" pos:end="235:12">buf</name> <operator pos:start="235:14" pos:end="235:14">=</operator> <name pos:start="235:16" pos:end="235:29">end_whitespace</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return pos:start="238:5" pos:end="238:22">return <expr pos:start="238:12" pos:end="238:21"><name pos:start="238:12" pos:end="238:21">begin_word</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="240:1" pos:end="240:31">// and whitespace == delimiters</comment>
<function pos:start="241:1" pos:end="244:1"><type pos:start="241:1" pos:end="241:6"><name pos:start="241:1" pos:end="241:4">char</name> <modifier pos:start="241:6" pos:end="241:6">*</modifier></type><name pos:start="241:7" pos:end="241:10">skip</name> <parameter_list pos:start="241:12" pos:end="241:47">(<parameter pos:start="241:13" pos:end="241:22"><decl pos:start="241:13" pos:end="241:22"><type pos:start="241:13" pos:end="241:22"><name pos:start="241:13" pos:end="241:16">char</name> <modifier pos:start="241:18" pos:end="241:18">*</modifier><modifier pos:start="241:19" pos:end="241:19">*</modifier></type><name pos:start="241:20" pos:end="241:22">buf</name></decl></parameter>, <parameter pos:start="241:25" pos:end="241:46"><decl pos:start="241:25" pos:end="241:46"><type pos:start="241:25" pos:end="241:46"><specifier pos:start="241:25" pos:end="241:29">const</specifier> <name pos:start="241:31" pos:end="241:34">char</name> <modifier pos:start="241:36" pos:end="241:36">*</modifier></type><name pos:start="241:37" pos:end="241:46">delimiters</name></decl></parameter>)</parameter_list>
<block pos:start="242:1" pos:end="244:1">{<block_content pos:start="243:5" pos:end="243:55">
    <return pos:start="243:5" pos:end="243:55">return <expr pos:start="243:12" pos:end="243:54"><call pos:start="243:12" pos:end="243:54"><name pos:start="243:12" pos:end="243:22">skip_quoted</name><argument_list pos:start="243:23" pos:end="243:54">(<argument pos:start="243:24" pos:end="243:26"><expr pos:start="243:24" pos:end="243:26"><name pos:start="243:24" pos:end="243:26">buf</name></expr></argument>, <argument pos:start="243:29" pos:end="243:38"><expr pos:start="243:29" pos:end="243:38"><name pos:start="243:29" pos:end="243:38">delimiters</name></expr></argument>, <argument pos:start="243:41" pos:end="243:50"><expr pos:start="243:41" pos:end="243:50"><name pos:start="243:41" pos:end="243:50">delimiters</name></expr></argument>, <argument pos:start="243:53" pos:end="243:53"><expr pos:start="243:53" pos:end="243:53"><literal type="number" pos:start="243:53" pos:end="243:53">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="245:1" pos:end="245:50">// Return HTTP header value, or NULL if not found.</comment>
<function pos:start="246:1" pos:end="258:1"><type pos:start="246:1" pos:end="246:19"><specifier pos:start="246:1" pos:end="246:6">static</specifier> <specifier pos:start="246:8" pos:end="246:12">const</specifier> <name pos:start="246:14" pos:end="246:17">char</name> <modifier pos:start="246:19" pos:end="246:19">*</modifier></type><name pos:start="246:20" pos:end="246:29">get_header</name> <parameter_list pos:start="246:31" pos:end="247:48">(<parameter pos:start="246:32" pos:end="246:63"><decl pos:start="246:32" pos:end="246:63"><type pos:start="246:32" pos:end="246:63"><specifier pos:start="246:32" pos:end="246:36">const</specifier> <name pos:start="246:38" pos:end="246:59"><name pos:start="246:38" pos:end="246:43">struct</name> <name pos:start="246:45" pos:end="246:59">mg_request_info</name></name> <modifier pos:start="246:61" pos:end="246:61">*</modifier></type><name pos:start="246:62" pos:end="246:63">ri</name></decl></parameter>,
                               <parameter pos:start="247:32" pos:end="247:47"><decl pos:start="247:32" pos:end="247:47"><type pos:start="247:32" pos:end="247:47"><specifier pos:start="247:32" pos:end="247:36">const</specifier> <name pos:start="247:38" pos:end="247:41">char</name> <modifier pos:start="247:43" pos:end="247:43">*</modifier></type><name pos:start="247:44" pos:end="247:47">name</name></decl></parameter>)</parameter_list>
<block pos:start="248:1" pos:end="258:1">{<block_content pos:start="249:5" pos:end="257:16">
    <decl_stmt pos:start="249:5" pos:end="249:10"><decl pos:start="249:5" pos:end="249:9"><type pos:start="249:5" pos:end="249:7"><name pos:start="249:5" pos:end="249:7">int</name></type> <name pos:start="249:9" pos:end="249:9">i</name></decl>;</decl_stmt>

    <for pos:start="251:5" pos:end="255:5">for <control pos:start="251:9" pos:end="251:41">(<init pos:start="251:10" pos:end="251:15"><expr pos:start="251:10" pos:end="251:14"><name pos:start="251:10" pos:end="251:10">i</name> <operator pos:start="251:12" pos:end="251:12">=</operator> <literal type="number" pos:start="251:14" pos:end="251:14">0</literal></expr>;</init> <condition pos:start="251:17" pos:end="251:36"><expr pos:start="251:17" pos:end="251:35"><name pos:start="251:17" pos:end="251:17">i</name> <operator pos:start="251:19" pos:end="251:19">&lt;</operator> <name pos:start="251:21" pos:end="251:35"><name pos:start="251:21" pos:end="251:22">ri</name><operator pos:start="251:23" pos:end="251:24">-&gt;</operator><name pos:start="251:25" pos:end="251:35">num_headers</name></name></expr>;</condition> <incr pos:start="251:38" pos:end="251:40"><expr pos:start="251:38" pos:end="251:40"><name pos:start="251:38" pos:end="251:38">i</name><operator pos:start="251:39" pos:end="251:40">++</operator></expr></incr>)</control> <block pos:start="251:43" pos:end="255:5">{<block_content pos:start="252:9" pos:end="254:9">
        <if_stmt pos:start="252:9" pos:end="254:9"><if pos:start="252:9" pos:end="254:9">if <condition pos:start="252:12" pos:end="252:59">(<expr pos:start="252:13" pos:end="252:58"><operator pos:start="252:13" pos:end="252:13">!</operator><call pos:start="252:14" pos:end="252:58"><name pos:start="252:14" pos:end="252:26">mg_strcasecmp</name><argument_list pos:start="252:27" pos:end="252:58">(<argument pos:start="252:28" pos:end="252:31"><expr pos:start="252:28" pos:end="252:31"><name pos:start="252:28" pos:end="252:31">name</name></expr></argument>, <argument pos:start="252:34" pos:end="252:57"><expr pos:start="252:34" pos:end="252:57"><name pos:start="252:34" pos:end="252:52"><name pos:start="252:34" pos:end="252:35">ri</name><operator pos:start="252:36" pos:end="252:37">-&gt;</operator><name pos:start="252:38" pos:end="252:49">http_headers</name><index pos:start="252:50" pos:end="252:52">[<expr pos:start="252:51" pos:end="252:51"><name pos:start="252:51" pos:end="252:51">i</name></expr>]</index></name><operator pos:start="252:53" pos:end="252:53">.</operator><name pos:start="252:54" pos:end="252:57">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="252:61" pos:end="254:9">{<block_content pos:start="253:13" pos:end="253:45">
            <return pos:start="253:13" pos:end="253:45">return <expr pos:start="253:20" pos:end="253:44"><name pos:start="253:20" pos:end="253:38"><name pos:start="253:20" pos:end="253:21">ri</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:35">http_headers</name><index pos:start="253:36" pos:end="253:38">[<expr pos:start="253:37" pos:end="253:37"><name pos:start="253:37" pos:end="253:37">i</name></expr>]</index></name><operator pos:start="253:39" pos:end="253:39">.</operator><name pos:start="253:40" pos:end="253:44">value</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return pos:start="257:5" pos:end="257:16">return <expr pos:start="257:12" pos:end="257:15"><name pos:start="257:12" pos:end="257:15">NULL</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="259:1" pos:end="259:50">// Return HTTP header value, or NULL if not found.</comment>
<function pos:start="260:1" pos:end="263:1"><type pos:start="260:1" pos:end="260:12"><specifier pos:start="260:1" pos:end="260:5">const</specifier> <name pos:start="260:7" pos:end="260:10">char</name> <modifier pos:start="260:12" pos:end="260:12">*</modifier></type><name pos:start="260:13" pos:end="260:25">mg_get_header</name> <parameter_list pos:start="260:27" pos:end="260:78">(<parameter pos:start="260:28" pos:end="260:59"><decl pos:start="260:28" pos:end="260:59"><type pos:start="260:28" pos:end="260:59"><specifier pos:start="260:28" pos:end="260:32">const</specifier> <name pos:start="260:34" pos:end="260:53"><name pos:start="260:34" pos:end="260:39">struct</name> <name pos:start="260:41" pos:end="260:53">mg_connection</name></name> <modifier pos:start="260:55" pos:end="260:55">*</modifier></type><name pos:start="260:56" pos:end="260:59">conn</name></decl></parameter>, <parameter pos:start="260:62" pos:end="260:77"><decl pos:start="260:62" pos:end="260:77"><type pos:start="260:62" pos:end="260:77"><specifier pos:start="260:62" pos:end="260:66">const</specifier> <name pos:start="260:68" pos:end="260:71">char</name> <modifier pos:start="260:73" pos:end="260:73">*</modifier></type><name pos:start="260:74" pos:end="260:77">name</name></decl></parameter>)</parameter_list>
<block pos:start="261:1" pos:end="263:1">{<block_content pos:start="262:5" pos:end="262:49">
    <return pos:start="262:5" pos:end="262:49">return <expr pos:start="262:12" pos:end="262:48"><call pos:start="262:12" pos:end="262:48"><name pos:start="262:12" pos:end="262:21">get_header</name><argument_list pos:start="262:22" pos:end="262:48">(<argument pos:start="262:23" pos:end="262:41"><expr pos:start="262:23" pos:end="262:41"><operator pos:start="262:23" pos:end="262:23">&amp;</operator><name pos:start="262:24" pos:end="262:41"><name pos:start="262:24" pos:end="262:27">conn</name><operator pos:start="262:28" pos:end="262:29">-&gt;</operator><name pos:start="262:30" pos:end="262:41">request_info</name></name></expr></argument>, <argument pos:start="262:44" pos:end="262:47"><expr pos:start="262:44" pos:end="262:47"><name pos:start="262:44" pos:end="262:47">name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="264:1" pos:end="264:49">// set up, for example if request parsing failed.</comment>
<function pos:start="265:1" pos:end="285:1"><type pos:start="265:1" pos:end="265:10"><specifier pos:start="265:1" pos:end="265:6">static</specifier> <name pos:start="265:8" pos:end="265:10">int</name></type> <name pos:start="265:12" pos:end="265:28">should_keep_alive</name> <parameter_list pos:start="265:30" pos:end="265:63">(<parameter pos:start="265:31" pos:end="265:62"><decl pos:start="265:31" pos:end="265:62"><type pos:start="265:31" pos:end="265:62"><specifier pos:start="265:31" pos:end="265:35">const</specifier> <name pos:start="265:37" pos:end="265:56"><name pos:start="265:37" pos:end="265:42">struct</name> <name pos:start="265:44" pos:end="265:56">mg_connection</name></name> <modifier pos:start="265:58" pos:end="265:58">*</modifier></type><name pos:start="265:59" pos:end="265:62">conn</name></decl></parameter>)</parameter_list>
<block pos:start="266:1" pos:end="285:1">{<block_content pos:start="267:5" pos:end="284:13">
    <decl_stmt pos:start="267:5" pos:end="267:63"><decl pos:start="267:5" pos:end="267:62"><type pos:start="267:5" pos:end="267:16"><specifier pos:start="267:5" pos:end="267:9">const</specifier> <name pos:start="267:11" pos:end="267:14">char</name> <modifier pos:start="267:16" pos:end="267:16">*</modifier></type><name pos:start="267:17" pos:end="267:28">http_version</name> <init pos:start="267:30" pos:end="267:62">= <expr pos:start="267:32" pos:end="267:62"><name pos:start="267:32" pos:end="267:62"><name pos:start="267:32" pos:end="267:35">conn</name><operator pos:start="267:36" pos:end="267:37">-&gt;</operator><name pos:start="267:38" pos:end="267:49">request_info</name><operator pos:start="267:50" pos:end="267:50">.</operator><name pos:start="267:51" pos:end="267:62">http_version</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="268:5" pos:end="268:59"><decl pos:start="268:5" pos:end="268:58"><type pos:start="268:5" pos:end="268:16"><specifier pos:start="268:5" pos:end="268:9">const</specifier> <name pos:start="268:11" pos:end="268:14">char</name> <modifier pos:start="268:16" pos:end="268:16">*</modifier></type><name pos:start="268:17" pos:end="268:22">header</name> <init pos:start="268:24" pos:end="268:58">= <expr pos:start="268:26" pos:end="268:58"><call pos:start="268:26" pos:end="268:58"><name pos:start="268:26" pos:end="268:38">mg_get_header</name><argument_list pos:start="268:39" pos:end="268:58">(<argument pos:start="268:40" pos:end="268:43"><expr pos:start="268:40" pos:end="268:43"><name pos:start="268:40" pos:end="268:43">conn</name></expr></argument>, <argument pos:start="268:46" pos:end="268:57"><expr pos:start="268:46" pos:end="268:57"><literal type="string" pos:start="268:46" pos:end="268:57">"Connection"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="270:5" pos:end="275:7">/*
     * Slight deviation from Mongoose behavior here.  We will close the
     * connection when sending a 202 Accepted response.  We will also
     * close the connection for any 4xx response, where Mongoose was only
     * closing for the 401 Unauthorized
     */</comment>
    <if_stmt pos:start="276:5" pos:end="283:5"><if pos:start="276:5" pos:end="283:5">if <condition pos:start="276:8" pos:end="281:76">(<expr pos:start="276:9" pos:end="281:75"><name pos:start="276:9" pos:end="276:24"><name pos:start="276:9" pos:end="276:12">conn</name><operator pos:start="276:13" pos:end="276:14">-&gt;</operator><name pos:start="276:15" pos:end="276:24">must_close</name></name> <operator pos:start="276:26" pos:end="276:27">||</operator>
	<name pos:start="277:9" pos:end="277:25"><name pos:start="277:9" pos:end="277:12">conn</name><operator pos:start="277:13" pos:end="277:14">-&gt;</operator><name pos:start="277:15" pos:end="277:25">status_code</name></name> <operator pos:start="277:27" pos:end="277:28">==</operator> <name pos:start="277:30" pos:end="277:46">EST_HTTP_STAT_202</name> <operator pos:start="277:48" pos:end="277:49">||</operator>
        <name pos:start="278:9" pos:end="278:25"><name pos:start="278:9" pos:end="278:12">conn</name><operator pos:start="278:13" pos:end="278:14">-&gt;</operator><name pos:start="278:15" pos:end="278:25">status_code</name></name> <operator pos:start="278:27" pos:end="278:28">&gt;=</operator> <literal type="number" pos:start="278:30" pos:end="278:32">400</literal> <operator pos:start="278:34" pos:end="278:35">||</operator>
        <operator pos:start="279:9" pos:end="279:9">!</operator><name pos:start="279:10" pos:end="279:37"><name pos:start="279:10" pos:end="279:13">conn</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:18">ctx</name><operator pos:start="279:19" pos:end="279:20">-&gt;</operator><name pos:start="279:21" pos:end="279:37">enable_keepalives</name></name> <operator pos:start="279:39" pos:end="279:40">||</operator>
        <operator pos:start="280:9" pos:end="280:9">(</operator><name pos:start="280:10" pos:end="280:15">header</name> <operator pos:start="280:17" pos:end="280:18">!=</operator> <name pos:start="280:20" pos:end="280:23">NULL</name> <operator pos:start="280:25" pos:end="280:26">&amp;&amp;</operator> <call pos:start="280:28" pos:end="280:62"><name pos:start="280:28" pos:end="280:40">mg_strcasecmp</name><argument_list pos:start="280:41" pos:end="280:62">(<argument pos:start="280:42" pos:end="280:47"><expr pos:start="280:42" pos:end="280:47"><name pos:start="280:42" pos:end="280:47">header</name></expr></argument>, <argument pos:start="280:50" pos:end="280:61"><expr pos:start="280:50" pos:end="280:61"><literal type="string" pos:start="280:50" pos:end="280:61">"keep-alive"</literal></expr></argument>)</argument_list></call> <operator pos:start="280:64" pos:end="280:65">!=</operator> <literal type="number" pos:start="280:67" pos:end="280:67">0</literal><operator pos:start="280:68" pos:end="280:68">)</operator> <operator pos:start="280:70" pos:end="280:71">||</operator>
        <operator pos:start="281:9" pos:end="281:9">(</operator><name pos:start="281:10" pos:end="281:15">header</name> <operator pos:start="281:17" pos:end="281:18">==</operator> <name pos:start="281:20" pos:end="281:23">NULL</name> <operator pos:start="281:25" pos:end="281:26">&amp;&amp;</operator> <name pos:start="281:28" pos:end="281:39">http_version</name> <operator pos:start="281:41" pos:end="281:42">&amp;&amp;</operator> <call pos:start="281:44" pos:end="281:74"><name pos:start="281:44" pos:end="281:50">strncmp</name><argument_list pos:start="281:51" pos:end="281:74">(<argument pos:start="281:52" pos:end="281:63"><expr pos:start="281:52" pos:end="281:63"><name pos:start="281:52" pos:end="281:63">http_version</name></expr></argument>, <argument pos:start="281:66" pos:end="281:70"><expr pos:start="281:66" pos:end="281:70"><literal type="string" pos:start="281:66" pos:end="281:70">"1.1"</literal></expr></argument>, <argument pos:start="281:73" pos:end="281:73"><expr pos:start="281:73" pos:end="281:73"><literal type="number" pos:start="281:73" pos:end="281:73">3</literal></expr></argument>)</argument_list></call><operator pos:start="281:75" pos:end="281:75">)</operator></expr>)</condition> <block pos:start="281:78" pos:end="283:5">{<block_content pos:start="282:9" pos:end="282:17">
        <return pos:start="282:9" pos:end="282:17">return <expr pos:start="282:16" pos:end="282:16"><literal type="number" pos:start="282:16" pos:end="282:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="284:5" pos:end="284:13">return <expr pos:start="284:12" pos:end="284:12"><literal type="number" pos:start="284:12" pos:end="284:12">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="286:1" pos:end="286:49">// set up, for example if request parsing failed.</comment>
<function pos:start="287:1" pos:end="290:1"><type pos:start="287:1" pos:end="287:19"><specifier pos:start="287:1" pos:end="287:6">static</specifier> <specifier pos:start="287:8" pos:end="287:12">const</specifier> <name pos:start="287:14" pos:end="287:17">char</name> <modifier pos:start="287:19" pos:end="287:19">*</modifier></type><name pos:start="287:20" pos:end="287:44">suggest_connection_header</name> <parameter_list pos:start="287:46" pos:end="287:79">(<parameter pos:start="287:47" pos:end="287:78"><decl pos:start="287:47" pos:end="287:78"><type pos:start="287:47" pos:end="287:78"><specifier pos:start="287:47" pos:end="287:51">const</specifier> <name pos:start="287:53" pos:end="287:72"><name pos:start="287:53" pos:end="287:58">struct</name> <name pos:start="287:60" pos:end="287:72">mg_connection</name></name> <modifier pos:start="287:74" pos:end="287:74">*</modifier></type><name pos:start="287:75" pos:end="287:78">conn</name></decl></parameter>)</parameter_list>
<block pos:start="288:1" pos:end="290:1">{<block_content pos:start="289:5" pos:end="289:60">
    <return pos:start="289:5" pos:end="289:60">return <expr pos:start="289:12" pos:end="289:59"><ternary pos:start="289:12" pos:end="289:59"><condition pos:start="289:12" pos:end="289:36"><expr pos:start="289:12" pos:end="289:34"><call pos:start="289:12" pos:end="289:34"><name pos:start="289:12" pos:end="289:28">should_keep_alive</name><argument_list pos:start="289:29" pos:end="289:34">(<argument pos:start="289:30" pos:end="289:33"><expr pos:start="289:30" pos:end="289:33"><name pos:start="289:30" pos:end="289:33">conn</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="289:38" pos:end="289:49"> <expr pos:start="289:38" pos:end="289:49"><literal type="string" pos:start="289:38" pos:end="289:49">"keep-alive"</literal></expr> </then><else pos:start="289:51" pos:end="289:59">: <expr pos:start="289:53" pos:end="289:59"><literal type="string" pos:start="289:53" pos:end="289:59">"close"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="291:1" pos:end="291:49">// set up, for example if request parsing failed.</comment>
<function pos:start="292:1" pos:end="320:1"><type pos:start="292:1" pos:end="292:4"><name pos:start="292:1" pos:end="292:4">void</name></type> <name pos:start="292:6" pos:end="292:23">mg_send_http_error</name> <parameter_list pos:start="292:25" pos:end="293:66">(<parameter pos:start="292:26" pos:end="292:51"><decl pos:start="292:26" pos:end="292:51"><type pos:start="292:26" pos:end="292:51"><name pos:start="292:26" pos:end="292:45"><name pos:start="292:26" pos:end="292:31">struct</name> <name pos:start="292:33" pos:end="292:45">mg_connection</name></name> <modifier pos:start="292:47" pos:end="292:47">*</modifier></type><name pos:start="292:48" pos:end="292:51">conn</name></decl></parameter>, <parameter pos:start="292:54" pos:end="292:63"><decl pos:start="292:54" pos:end="292:63"><type pos:start="292:54" pos:end="292:63"><name pos:start="292:54" pos:end="292:56">int</name></type> <name pos:start="292:58" pos:end="292:63">status</name></decl></parameter>,
                         <parameter pos:start="293:26" pos:end="293:43"><decl pos:start="293:26" pos:end="293:43"><type pos:start="293:26" pos:end="293:43"><specifier pos:start="293:26" pos:end="293:30">const</specifier> <name pos:start="293:32" pos:end="293:35">char</name> <modifier pos:start="293:37" pos:end="293:37">*</modifier></type><name pos:start="293:38" pos:end="293:43">reason</name></decl></parameter>, <parameter pos:start="293:46" pos:end="293:60"><decl pos:start="293:46" pos:end="293:60"><type pos:start="293:46" pos:end="293:60"><specifier pos:start="293:46" pos:end="293:50">const</specifier> <name pos:start="293:52" pos:end="293:55">char</name> <modifier pos:start="293:57" pos:end="293:57">*</modifier></type><name pos:start="293:58" pos:end="293:60">fmt</name></decl></parameter>, <parameter pos:start="293:63" pos:end="293:65"><decl pos:start="293:63" pos:end="293:65"><type pos:start="293:63" pos:end="293:65"><modifier pos:start="293:63" pos:end="293:65">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="294:1" pos:end="320:1">{<block_content pos:start="295:5" pos:end="319:55">
    <decl_stmt pos:start="295:5" pos:end="295:25"><decl pos:start="295:5" pos:end="295:24"><type pos:start="295:5" pos:end="295:8"><name pos:start="295:5" pos:end="295:8">char</name></type> <name pos:start="295:10" pos:end="295:24"><name pos:start="295:10" pos:end="295:12">buf</name><index pos:start="295:13" pos:end="295:24">[<expr pos:start="295:14" pos:end="295:23"><name pos:start="295:14" pos:end="295:23">MG_BUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="296:5" pos:end="296:15"><decl pos:start="296:5" pos:end="296:14"><type pos:start="296:5" pos:end="296:11"><name pos:start="296:5" pos:end="296:11">va_list</name></type> <name pos:start="296:13" pos:end="296:14">ap</name></decl>;</decl_stmt>
    <decl_stmt pos:start="297:5" pos:end="297:12"><decl pos:start="297:5" pos:end="297:11"><type pos:start="297:5" pos:end="297:7"><name pos:start="297:5" pos:end="297:7">int</name></type> <name pos:start="297:9" pos:end="297:11">len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:31"><expr pos:start="299:5" pos:end="299:30"><name pos:start="299:5" pos:end="299:21"><name pos:start="299:5" pos:end="299:8">conn</name><operator pos:start="299:9" pos:end="299:10">-&gt;</operator><name pos:start="299:11" pos:end="299:21">status_code</name></name> <operator pos:start="299:23" pos:end="299:23">=</operator> <name pos:start="299:25" pos:end="299:30">status</name></expr>;</expr_stmt>
    <expr_stmt pos:start="300:5" pos:end="300:53"><expr pos:start="300:5" pos:end="300:52"><name pos:start="300:5" pos:end="300:30"><name pos:start="300:5" pos:end="300:8">conn</name><operator pos:start="300:9" pos:end="300:10">-&gt;</operator><name pos:start="300:11" pos:end="300:22">request_info</name><operator pos:start="300:23" pos:end="300:23">.</operator><name pos:start="300:24" pos:end="300:30">ev_data</name></name> <operator pos:start="300:32" pos:end="300:32">=</operator> <operator pos:start="300:34" pos:end="300:34">(</operator><name pos:start="300:35" pos:end="300:38">void</name><operator pos:start="300:39" pos:end="300:39">*</operator><operator pos:start="300:40" pos:end="300:40">)</operator><operator pos:start="300:41" pos:end="300:41">(</operator><name pos:start="300:42" pos:end="300:45">long</name><operator pos:start="300:46" pos:end="300:46">)</operator><name pos:start="300:47" pos:end="300:52">status</name></expr>;</expr_stmt>
    <expr_stmt pos:start="301:5" pos:end="301:18"><expr pos:start="301:5" pos:end="301:17"><name pos:start="301:5" pos:end="301:10"><name pos:start="301:5" pos:end="301:7">buf</name><index pos:start="301:8" pos:end="301:10">[<expr pos:start="301:9" pos:end="301:9"><literal type="number" pos:start="301:9" pos:end="301:9">0</literal></expr>]</index></name> <operator pos:start="301:12" pos:end="301:12">=</operator> <literal type="char" pos:start="301:14" pos:end="301:17">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="302:5" pos:end="302:12"><expr pos:start="302:5" pos:end="302:11"><name pos:start="302:5" pos:end="302:7">len</name> <operator pos:start="302:9" pos:end="302:9">=</operator> <literal type="number" pos:start="302:11" pos:end="302:11">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="304:5" pos:end="304:51">// Errors 1xx, 204 and 304 MUST NOT send a body</comment>
    <if_stmt pos:start="305:5" pos:end="312:5"><if pos:start="305:5" pos:end="312:5">if <condition pos:start="305:8" pos:end="305:55">(<expr pos:start="305:9" pos:end="305:54"><name pos:start="305:9" pos:end="305:14">status</name> <operator pos:start="305:16" pos:end="305:16">&gt;</operator> <literal type="number" pos:start="305:18" pos:end="305:20">199</literal> <operator pos:start="305:22" pos:end="305:23">&amp;&amp;</operator> <name pos:start="305:25" pos:end="305:30">status</name> <operator pos:start="305:32" pos:end="305:33">!=</operator> <literal type="number" pos:start="305:35" pos:end="305:37">204</literal> <operator pos:start="305:39" pos:end="305:40">&amp;&amp;</operator> <name pos:start="305:42" pos:end="305:47">status</name> <operator pos:start="305:49" pos:end="305:50">!=</operator> <literal type="number" pos:start="305:52" pos:end="305:54">304</literal></expr>)</condition> <block pos:start="305:57" pos:end="312:5">{<block_content pos:start="306:9" pos:end="311:19">
        <expr_stmt pos:start="306:9" pos:end="306:82"><expr pos:start="306:9" pos:end="306:81"><name pos:start="306:9" pos:end="306:11">len</name> <operator pos:start="306:13" pos:end="306:13">=</operator> <call pos:start="306:15" pos:end="306:81"><name pos:start="306:15" pos:end="306:25">mg_snprintf</name><argument_list pos:start="306:26" pos:end="306:81">(<argument pos:start="306:27" pos:end="306:30"><expr pos:start="306:27" pos:end="306:30"><name pos:start="306:27" pos:end="306:30">conn</name></expr></argument>, <argument pos:start="306:33" pos:end="306:35"><expr pos:start="306:33" pos:end="306:35"><name pos:start="306:33" pos:end="306:35">buf</name></expr></argument>, <argument pos:start="306:38" pos:end="306:48"><expr pos:start="306:38" pos:end="306:48"><sizeof pos:start="306:38" pos:end="306:48">sizeof<argument_list pos:start="306:44" pos:end="306:48">(<argument pos:start="306:45" pos:end="306:47"><expr pos:start="306:45" pos:end="306:47"><name pos:start="306:45" pos:end="306:47">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="306:51" pos:end="306:64"><expr pos:start="306:51" pos:end="306:64"><literal type="string" pos:start="306:51" pos:end="306:64">"Error %d: %s"</literal></expr></argument>, <argument pos:start="306:67" pos:end="306:72"><expr pos:start="306:67" pos:end="306:72"><name pos:start="306:67" pos:end="306:72">status</name></expr></argument>, <argument pos:start="306:75" pos:end="306:80"><expr pos:start="306:75" pos:end="306:80"><name pos:start="306:75" pos:end="306:80">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="307:9" pos:end="307:26"><expr pos:start="307:9" pos:end="307:25"><name pos:start="307:9" pos:end="307:18"><name pos:start="307:9" pos:end="307:11">buf</name><index pos:start="307:12" pos:end="307:18">[<expr pos:start="307:13" pos:end="307:17"><name pos:start="307:13" pos:end="307:15">len</name><operator pos:start="307:16" pos:end="307:17">++</operator></expr>]</index></name> <operator pos:start="307:20" pos:end="307:20">=</operator> <literal type="char" pos:start="307:22" pos:end="307:25">'\n'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:26"><expr pos:start="309:9" pos:end="309:25"><call pos:start="309:9" pos:end="309:25"><name pos:start="309:9" pos:end="309:16">va_start</name><argument_list pos:start="309:17" pos:end="309:25">(<argument pos:start="309:18" pos:end="309:19"><expr pos:start="309:18" pos:end="309:19"><name pos:start="309:18" pos:end="309:19">ap</name></expr></argument>, <argument pos:start="309:22" pos:end="309:24"><expr pos:start="309:22" pos:end="309:24"><name pos:start="309:22" pos:end="309:24">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="310:9" pos:end="310:73"><expr pos:start="310:9" pos:end="310:72"><name pos:start="310:9" pos:end="310:11">len</name> <operator pos:start="310:13" pos:end="310:14">+=</operator> <call pos:start="310:16" pos:end="310:72"><name pos:start="310:16" pos:end="310:27">mg_vsnprintf</name><argument_list pos:start="310:28" pos:end="310:72">(<argument pos:start="310:29" pos:end="310:32"><expr pos:start="310:29" pos:end="310:32"><name pos:start="310:29" pos:end="310:32">conn</name></expr></argument>, <argument pos:start="310:35" pos:end="310:43"><expr pos:start="310:35" pos:end="310:43"><name pos:start="310:35" pos:end="310:37">buf</name> <operator pos:start="310:39" pos:end="310:39">+</operator> <name pos:start="310:41" pos:end="310:43">len</name></expr></argument>, <argument pos:start="310:46" pos:end="310:62"><expr pos:start="310:46" pos:end="310:62"><sizeof pos:start="310:46" pos:end="310:56">sizeof<argument_list pos:start="310:52" pos:end="310:56">(<argument pos:start="310:53" pos:end="310:55"><expr pos:start="310:53" pos:end="310:55"><name pos:start="310:53" pos:end="310:55">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="310:58" pos:end="310:58">-</operator> <name pos:start="310:60" pos:end="310:62">len</name></expr></argument>, <argument pos:start="310:65" pos:end="310:67"><expr pos:start="310:65" pos:end="310:67"><name pos:start="310:65" pos:end="310:67">fmt</name></expr></argument>, <argument pos:start="310:70" pos:end="310:71"><expr pos:start="310:70" pos:end="310:71"><name pos:start="310:70" pos:end="310:71">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="311:9" pos:end="311:19"><expr pos:start="311:9" pos:end="311:18"><call pos:start="311:9" pos:end="311:18"><name pos:start="311:9" pos:end="311:14">va_end</name><argument_list pos:start="311:15" pos:end="311:18">(<argument pos:start="311:16" pos:end="311:17"><expr pos:start="311:16" pos:end="311:17"><name pos:start="311:16" pos:end="311:17">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="313:5" pos:end="313:30"><expr pos:start="313:5" pos:end="313:29"><call pos:start="313:5" pos:end="313:29"><name pos:start="313:5" pos:end="313:16">EST_LOG_INFO</name><argument_list pos:start="313:17" pos:end="313:29">(<argument pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:23"><literal type="string" pos:start="313:18" pos:end="313:23">"[%s]"</literal></expr></argument>, <argument pos:start="313:26" pos:end="313:28"><expr pos:start="313:26" pos:end="313:28"><name pos:start="313:26" pos:end="313:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="318:47"><expr pos:start="315:5" pos:end="318:46"><call pos:start="315:5" pos:end="318:46"><name pos:start="315:5" pos:end="315:13">mg_printf</name><argument_list pos:start="315:14" pos:end="318:46">(<argument pos:start="315:15" pos:end="315:18"><expr pos:start="315:15" pos:end="315:18"><name pos:start="315:15" pos:end="315:18">conn</name></expr></argument>, <argument pos:start="315:21" pos:end="317:38"><expr pos:start="315:21" pos:end="317:38"><literal type="string" pos:start="315:21" pos:end="315:40">"HTTP/1.1 %d %s\r\n"</literal>
              <literal type="string" pos:start="316:15" pos:end="316:38">"Content-Length: %d\r\n"</literal>
              <literal type="string" pos:start="317:15" pos:end="317:38">"Connection: %s\r\n\r\n"</literal></expr></argument>, <argument pos:start="317:41" pos:end="317:46"><expr pos:start="317:41" pos:end="317:46"><name pos:start="317:41" pos:end="317:46">status</name></expr></argument>, <argument pos:start="317:49" pos:end="317:54"><expr pos:start="317:49" pos:end="317:54"><name pos:start="317:49" pos:end="317:54">reason</name></expr></argument>, <argument pos:start="317:57" pos:end="317:59"><expr pos:start="317:57" pos:end="317:59"><name pos:start="317:57" pos:end="317:59">len</name></expr></argument>,
              <argument pos:start="318:15" pos:end="318:45"><expr pos:start="318:15" pos:end="318:45"><call pos:start="318:15" pos:end="318:45"><name pos:start="318:15" pos:end="318:39">suggest_connection_header</name><argument_list pos:start="318:40" pos:end="318:45">(<argument pos:start="318:41" pos:end="318:44"><expr pos:start="318:41" pos:end="318:44"><name pos:start="318:41" pos:end="318:44">conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="319:5" pos:end="319:55"><expr pos:start="319:5" pos:end="319:54"><name pos:start="319:5" pos:end="319:24"><name pos:start="319:5" pos:end="319:8">conn</name><operator pos:start="319:9" pos:end="319:10">-&gt;</operator><name pos:start="319:11" pos:end="319:24">num_bytes_sent</name></name> <operator pos:start="319:26" pos:end="319:27">+=</operator> <call pos:start="319:29" pos:end="319:54"><name pos:start="319:29" pos:end="319:37">mg_printf</name><argument_list pos:start="319:38" pos:end="319:54">(<argument pos:start="319:39" pos:end="319:42"><expr pos:start="319:39" pos:end="319:42"><name pos:start="319:39" pos:end="319:42">conn</name></expr></argument>, <argument pos:start="319:45" pos:end="319:48"><expr pos:start="319:45" pos:end="319:48"><literal type="string" pos:start="319:45" pos:end="319:48">"%s"</literal></expr></argument>, <argument pos:start="319:51" pos:end="319:53"><expr pos:start="319:51" pos:end="319:53"><name pos:start="319:51" pos:end="319:53">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="321:1" pos:end="321:64">// For Windows, change all slashes to backslashes in path names.</comment>
<function pos:start="322:1" pos:end="339:1"><type pos:start="322:1" pos:end="322:11"><specifier pos:start="322:1" pos:end="322:6">static</specifier> <name pos:start="322:8" pos:end="322:11">void</name></type> <name pos:start="322:13" pos:end="322:41">change_slashes_to_backslashes</name> <parameter_list pos:start="322:43" pos:end="322:54">(<parameter pos:start="322:44" pos:end="322:53"><decl pos:start="322:44" pos:end="322:53"><type pos:start="322:44" pos:end="322:49"><name pos:start="322:44" pos:end="322:47">char</name> <modifier pos:start="322:49" pos:end="322:49">*</modifier></type><name pos:start="322:50" pos:end="322:53">path</name></decl></parameter>)</parameter_list>
<block pos:start="323:1" pos:end="339:1">{<block_content pos:start="324:5" pos:end="338:5">
    <decl_stmt pos:start="324:5" pos:end="324:10"><decl pos:start="324:5" pos:end="324:9"><type pos:start="324:5" pos:end="324:7"><name pos:start="324:5" pos:end="324:7">int</name></type> <name pos:start="324:9" pos:end="324:9">i</name></decl>;</decl_stmt>

    <for pos:start="326:5" pos:end="338:5">for <control pos:start="326:9" pos:end="326:37">(<init pos:start="326:10" pos:end="326:15"><expr pos:start="326:10" pos:end="326:14"><name pos:start="326:10" pos:end="326:10">i</name> <operator pos:start="326:12" pos:end="326:12">=</operator> <literal type="number" pos:start="326:14" pos:end="326:14">0</literal></expr>;</init> <condition pos:start="326:17" pos:end="326:32"><expr pos:start="326:17" pos:end="326:31"><name pos:start="326:17" pos:end="326:23"><name pos:start="326:17" pos:end="326:20">path</name><index pos:start="326:21" pos:end="326:23">[<expr pos:start="326:22" pos:end="326:22"><name pos:start="326:22" pos:end="326:22">i</name></expr>]</index></name> <operator pos:start="326:25" pos:end="326:26">!=</operator> <literal type="char" pos:start="326:28" pos:end="326:31">'\0'</literal></expr>;</condition> <incr pos:start="326:34" pos:end="326:36"><expr pos:start="326:34" pos:end="326:36"><name pos:start="326:34" pos:end="326:34">i</name><operator pos:start="326:35" pos:end="326:36">++</operator></expr></incr>)</control> <block pos:start="326:39" pos:end="338:5">{<block_content pos:start="327:9" pos:end="337:9">
        <if_stmt pos:start="327:9" pos:end="329:9"><if pos:start="327:9" pos:end="329:9">if <condition pos:start="327:12" pos:end="327:27">(<expr pos:start="327:13" pos:end="327:26"><name pos:start="327:13" pos:end="327:19"><name pos:start="327:13" pos:end="327:16">path</name><index pos:start="327:17" pos:end="327:19">[<expr pos:start="327:18" pos:end="327:18"><name pos:start="327:18" pos:end="327:18">i</name></expr>]</index></name> <operator pos:start="327:21" pos:end="327:22">==</operator> <literal type="char" pos:start="327:24" pos:end="327:26">'/'</literal></expr>)</condition> <block pos:start="327:29" pos:end="329:9">{<block_content pos:start="328:13" pos:end="328:27">
            <expr_stmt pos:start="328:13" pos:end="328:27"><expr pos:start="328:13" pos:end="328:26"><name pos:start="328:13" pos:end="328:19"><name pos:start="328:13" pos:end="328:16">path</name><index pos:start="328:17" pos:end="328:19">[<expr pos:start="328:18" pos:end="328:18"><name pos:start="328:18" pos:end="328:18">i</name></expr>]</index></name> <operator pos:start="328:21" pos:end="328:21">=</operator> <literal type="char" pos:start="328:23" pos:end="328:26">'\\'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line" pos:start="330:9" pos:end="330:71">// i &gt; 0 check is to preserve UNC paths, like \\server\file.txt</comment>
        <if_stmt pos:start="331:9" pos:end="337:9"><if pos:start="331:9" pos:end="337:9">if <condition pos:start="331:12" pos:end="331:37">(<expr pos:start="331:13" pos:end="331:36"><name pos:start="331:13" pos:end="331:19"><name pos:start="331:13" pos:end="331:16">path</name><index pos:start="331:17" pos:end="331:19">[<expr pos:start="331:18" pos:end="331:18"><name pos:start="331:18" pos:end="331:18">i</name></expr>]</index></name> <operator pos:start="331:21" pos:end="331:22">==</operator> <literal type="char" pos:start="331:24" pos:end="331:27">'\\'</literal> <operator pos:start="331:29" pos:end="331:30">&amp;&amp;</operator> <name pos:start="331:32" pos:end="331:32">i</name> <operator pos:start="331:34" pos:end="331:34">&gt;</operator> <literal type="number" pos:start="331:36" pos:end="331:36">0</literal></expr>)</condition> <block pos:start="331:39" pos:end="337:9">{<block_content pos:start="332:13" pos:end="336:13">
            <while pos:start="332:13" pos:end="336:13">while <condition pos:start="332:19" pos:end="332:61">(<expr pos:start="332:20" pos:end="332:60"><name pos:start="332:20" pos:end="332:30"><name pos:start="332:20" pos:end="332:23">path</name><index pos:start="332:24" pos:end="332:30">[<expr pos:start="332:25" pos:end="332:29"><name pos:start="332:25" pos:end="332:25">i</name> <operator pos:start="332:27" pos:end="332:27">+</operator> <literal type="number" pos:start="332:29" pos:end="332:29">1</literal></expr>]</index></name> <operator pos:start="332:32" pos:end="332:33">==</operator> <literal type="char" pos:start="332:35" pos:end="332:38">'\\'</literal> <operator pos:start="332:40" pos:end="332:41">||</operator> <name pos:start="332:43" pos:end="332:53"><name pos:start="332:43" pos:end="332:46">path</name><index pos:start="332:47" pos:end="332:53">[<expr pos:start="332:48" pos:end="332:52"><name pos:start="332:48" pos:end="332:48">i</name> <operator pos:start="332:50" pos:end="332:50">+</operator> <literal type="number" pos:start="332:52" pos:end="332:52">1</literal></expr>]</index></name> <operator pos:start="332:55" pos:end="332:56">==</operator> <literal type="char" pos:start="332:58" pos:end="332:60">'/'</literal></expr>)</condition> <block pos:start="332:63" pos:end="336:13">{<block_content pos:start="333:17" pos:end="335:72">
                <expr_stmt pos:start="333:17" pos:end="335:72"><expr pos:start="333:17" pos:end="335:71"><operator pos:start="333:17" pos:end="333:17">(</operator><name pos:start="333:18" pos:end="333:21">void</name><operator pos:start="333:22" pos:end="333:22">)</operator><call pos:start="333:23" pos:end="335:71"><name pos:start="333:23" pos:end="333:31">memmove_s</name><argument_list pos:start="333:32" pos:end="335:71">(<argument pos:start="333:33" pos:end="333:44"><expr pos:start="333:33" pos:end="333:44"><name pos:start="333:33" pos:end="333:36">path</name> <operator pos:start="333:38" pos:end="333:38">+</operator> <name pos:start="333:40" pos:end="333:40">i</name> <operator pos:start="333:42" pos:end="333:42">+</operator> <literal type="number" pos:start="333:44" pos:end="333:44">1</literal></expr></argument>, <argument pos:start="333:47" pos:end="333:61"><expr pos:start="333:47" pos:end="333:61"><name pos:start="333:47" pos:end="333:61">EST_URI_MAX_LEN</name></expr></argument>,
                                <argument pos:start="334:33" pos:end="334:44"><expr pos:start="334:33" pos:end="334:44"><name pos:start="334:33" pos:end="334:36">path</name> <operator pos:start="334:38" pos:end="334:38">+</operator> <name pos:start="334:40" pos:end="334:40">i</name> <operator pos:start="334:42" pos:end="334:42">+</operator> <literal type="number" pos:start="334:44" pos:end="334:44">2</literal></expr></argument>, <argument pos:start="334:47" pos:end="335:70"><expr pos:start="334:47" pos:end="335:70"><call pos:start="334:47" pos:end="335:70"><name pos:start="334:47" pos:end="334:55">strnlen_s</name><argument_list pos:start="334:56" pos:end="335:70">(<argument pos:start="334:57" pos:end="334:68"><expr pos:start="334:57" pos:end="334:68"><name pos:start="334:57" pos:end="334:60">path</name> <operator pos:start="334:62" pos:end="334:62">+</operator> <name pos:start="334:64" pos:end="334:64">i</name> <operator pos:start="334:66" pos:end="334:66">+</operator> <literal type="number" pos:start="334:68" pos:end="334:68">1</literal></expr></argument>, 
				                      <argument pos:start="335:55" pos:end="335:69"><expr pos:start="335:55" pos:end="335:69"><name pos:start="335:55" pos:end="335:69">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
<comment type="line" pos:start="340:1" pos:end="340:55">// wbuf and wbuf_len is a target buffer and its length.</comment>
<function pos:start="341:1" pos:end="360:1"><type pos:start="341:1" pos:end="341:11"><specifier pos:start="341:1" pos:end="341:6">static</specifier> <name pos:start="341:8" pos:end="341:11">void</name></type> <name pos:start="341:13" pos:end="341:22">to_unicode</name> <parameter_list pos:start="341:24" pos:end="341:73">(<parameter pos:start="341:25" pos:end="341:40"><decl pos:start="341:25" pos:end="341:40"><type pos:start="341:25" pos:end="341:40"><specifier pos:start="341:25" pos:end="341:29">const</specifier> <name pos:start="341:31" pos:end="341:34">char</name> <modifier pos:start="341:36" pos:end="341:36">*</modifier></type><name pos:start="341:37" pos:end="341:40">path</name></decl></parameter>, <parameter pos:start="341:43" pos:end="341:55"><decl pos:start="341:43" pos:end="341:55"><type pos:start="341:43" pos:end="341:55"><name pos:start="341:43" pos:end="341:49">wchar_t</name> <modifier pos:start="341:51" pos:end="341:51">*</modifier></type><name pos:start="341:52" pos:end="341:55">wbuf</name></decl></parameter>, <parameter pos:start="341:58" pos:end="341:72"><decl pos:start="341:58" pos:end="341:72"><type pos:start="341:58" pos:end="341:72"><name pos:start="341:58" pos:end="341:63">size_t</name></type> <name pos:start="341:65" pos:end="341:72">wbuf_len</name></decl></parameter>)</parameter_list>
<block pos:start="342:1" pos:end="360:1">{<block_content pos:start="343:5" pos:end="359:5">
    <decl_stmt pos:start="343:5" pos:end="343:43"><decl pos:start="343:5" pos:end="343:22"><type pos:start="343:5" pos:end="343:8"><name pos:start="343:5" pos:end="343:8">char</name></type> <name pos:start="343:10" pos:end="343:22"><name pos:start="343:10" pos:end="343:12">buf</name><index pos:start="343:13" pos:end="343:22">[<expr pos:start="343:14" pos:end="343:21"><name pos:start="343:14" pos:end="343:21">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="343:25" pos:end="343:38"><type ref="prev" pos:start="343:5" pos:end="343:8"/><name pos:start="343:25" pos:end="343:38"><name pos:start="343:25" pos:end="343:28">buf2</name><index pos:start="343:29" pos:end="343:38">[<expr pos:start="343:30" pos:end="343:37"><name pos:start="343:30" pos:end="343:37">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="343:41" pos:end="343:42"><type ref="prev" pos:start="343:5" pos:end="343:8"><modifier pos:start="343:41" pos:end="343:41">*</modifier></type><name pos:start="343:42" pos:end="343:42">p</name></decl>;</decl_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:39"><expr pos:start="345:5" pos:end="345:38"><call pos:start="345:5" pos:end="345:38"><name pos:start="345:5" pos:end="345:14">mg_strlcpy</name><argument_list pos:start="345:15" pos:end="345:38">(<argument pos:start="345:16" pos:end="345:18"><expr pos:start="345:16" pos:end="345:18"><name pos:start="345:16" pos:end="345:18">buf</name></expr></argument>, <argument pos:start="345:21" pos:end="345:24"><expr pos:start="345:21" pos:end="345:24"><name pos:start="345:21" pos:end="345:24">path</name></expr></argument>, <argument pos:start="345:27" pos:end="345:37"><expr pos:start="345:27" pos:end="345:37"><sizeof pos:start="345:27" pos:end="345:37">sizeof<argument_list pos:start="345:33" pos:end="345:37">(<argument pos:start="345:34" pos:end="345:36"><expr pos:start="345:34" pos:end="345:36"><name pos:start="345:34" pos:end="345:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="346:5" pos:end="346:39"><expr pos:start="346:5" pos:end="346:38"><call pos:start="346:5" pos:end="346:38"><name pos:start="346:5" pos:end="346:33">change_slashes_to_backslashes</name><argument_list pos:start="346:34" pos:end="346:38">(<argument pos:start="346:35" pos:end="346:37"><expr pos:start="346:35" pos:end="346:37"><name pos:start="346:35" pos:end="346:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="348:5" pos:end="348:42">// Point p to the end of the file name</comment>
    <expr_stmt pos:start="349:5" pos:end="349:50"><expr pos:start="349:5" pos:end="349:49"><name pos:start="349:5" pos:end="349:5">p</name> <operator pos:start="349:7" pos:end="349:7">=</operator> <name pos:start="349:9" pos:end="349:11">buf</name> <operator pos:start="349:13" pos:end="349:13">+</operator> <call pos:start="349:15" pos:end="349:45"><name pos:start="349:15" pos:end="349:23">strnlen_s</name><argument_list pos:start="349:24" pos:end="349:45">(<argument pos:start="349:25" pos:end="349:27"><expr pos:start="349:25" pos:end="349:27"><name pos:start="349:25" pos:end="349:27">buf</name></expr></argument>, <argument pos:start="349:30" pos:end="349:44"><expr pos:start="349:30" pos:end="349:44"><name pos:start="349:30" pos:end="349:44">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="349:47" pos:end="349:47">-</operator> <literal type="number" pos:start="349:49" pos:end="349:49">1</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="351:5" pos:end="351:71">// Convert to Unicode and back. If doubly-converted string does not</comment>
    <comment type="line" pos:start="352:5" pos:end="352:54">// match the original, something is fishy, reject.</comment>
    <expr_stmt pos:start="353:5" pos:end="353:48"><expr pos:start="353:5" pos:end="353:47"><call pos:start="353:5" pos:end="353:47"><name pos:start="353:5" pos:end="353:13">memzero_s</name><argument_list pos:start="353:14" pos:end="353:47">(<argument pos:start="353:15" pos:end="353:18"><expr pos:start="353:15" pos:end="353:18"><name pos:start="353:15" pos:end="353:18">wbuf</name></expr></argument>, <argument pos:start="353:21" pos:end="353:46"><expr pos:start="353:21" pos:end="353:46"><name pos:start="353:21" pos:end="353:28">wbuf_len</name> <operator pos:start="353:30" pos:end="353:30">*</operator> <sizeof pos:start="353:32" pos:end="353:46">sizeof<argument_list pos:start="353:38" pos:end="353:46">(<argument pos:start="353:39" pos:end="353:45"><expr pos:start="353:39" pos:end="353:45"><name pos:start="353:39" pos:end="353:45">wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="354:5" pos:end="354:66"><expr pos:start="354:5" pos:end="354:65"><call pos:start="354:5" pos:end="354:65"><name pos:start="354:5" pos:end="354:23">MultiByteToWideChar</name><argument_list pos:start="354:24" pos:end="354:65">(<argument pos:start="354:25" pos:end="354:31"><expr pos:start="354:25" pos:end="354:31"><name pos:start="354:25" pos:end="354:31">CP_UTF8</name></expr></argument>, <argument pos:start="354:34" pos:end="354:34"><expr pos:start="354:34" pos:end="354:34"><literal type="number" pos:start="354:34" pos:end="354:34">0</literal></expr></argument>, <argument pos:start="354:37" pos:end="354:39"><expr pos:start="354:37" pos:end="354:39"><name pos:start="354:37" pos:end="354:39">buf</name></expr></argument>, <argument pos:start="354:42" pos:end="354:43"><expr pos:start="354:42" pos:end="354:43"><operator pos:start="354:42" pos:end="354:42">-</operator><literal type="number" pos:start="354:43" pos:end="354:43">1</literal></expr></argument>, <argument pos:start="354:46" pos:end="354:49"><expr pos:start="354:46" pos:end="354:49"><name pos:start="354:46" pos:end="354:49">wbuf</name></expr></argument>, <argument pos:start="354:52" pos:end="354:64"><expr pos:start="354:52" pos:end="354:64"><operator pos:start="354:52" pos:end="354:52">(</operator><name pos:start="354:53" pos:end="354:55">int</name><operator pos:start="354:56" pos:end="354:56">)</operator><name pos:start="354:57" pos:end="354:64">wbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="355:5" pos:end="356:36"><expr pos:start="355:5" pos:end="356:35"><call pos:start="355:5" pos:end="356:35"><name pos:start="355:5" pos:end="355:23">WideCharToMultiByte</name><argument_list pos:start="355:24" pos:end="356:35">(<argument pos:start="355:25" pos:end="355:31"><expr pos:start="355:25" pos:end="355:31"><name pos:start="355:25" pos:end="355:31">CP_UTF8</name></expr></argument>, <argument pos:start="355:34" pos:end="355:34"><expr pos:start="355:34" pos:end="355:34"><literal type="number" pos:start="355:34" pos:end="355:34">0</literal></expr></argument>, <argument pos:start="355:37" pos:end="355:40"><expr pos:start="355:37" pos:end="355:40"><name pos:start="355:37" pos:end="355:40">wbuf</name></expr></argument>, <argument pos:start="355:43" pos:end="355:55"><expr pos:start="355:43" pos:end="355:55"><operator pos:start="355:43" pos:end="355:43">(</operator><name pos:start="355:44" pos:end="355:46">int</name><operator pos:start="355:47" pos:end="355:47">)</operator><name pos:start="355:48" pos:end="355:55">wbuf_len</name></expr></argument>, <argument pos:start="355:58" pos:end="355:61"><expr pos:start="355:58" pos:end="355:61"><name pos:start="355:58" pos:end="355:61">buf2</name></expr></argument>, <argument pos:start="355:64" pos:end="355:75"><expr pos:start="355:64" pos:end="355:75"><sizeof pos:start="355:64" pos:end="355:75">sizeof<argument_list pos:start="355:70" pos:end="355:75">(<argument pos:start="355:71" pos:end="355:74"><expr pos:start="355:71" pos:end="355:74"><name pos:start="355:71" pos:end="355:74">buf2</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                        <argument pos:start="356:25" pos:end="356:28"><expr pos:start="356:25" pos:end="356:28"><name pos:start="356:25" pos:end="356:28">NULL</name></expr></argument>, <argument pos:start="356:31" pos:end="356:34"><expr pos:start="356:31" pos:end="356:34"><name pos:start="356:31" pos:end="356:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="357:5" pos:end="359:5"><if pos:start="357:5" pos:end="359:5">if <condition pos:start="357:8" pos:end="357:31">(<expr pos:start="357:9" pos:end="357:30"><call pos:start="357:9" pos:end="357:25"><name pos:start="357:9" pos:end="357:14">strcmp</name><argument_list pos:start="357:15" pos:end="357:25">(<argument pos:start="357:16" pos:end="357:18"><expr pos:start="357:16" pos:end="357:18"><name pos:start="357:16" pos:end="357:18">buf</name></expr></argument>, <argument pos:start="357:21" pos:end="357:24"><expr pos:start="357:21" pos:end="357:24"><name pos:start="357:21" pos:end="357:24">buf2</name></expr></argument>)</argument_list></call> <operator pos:start="357:27" pos:end="357:28">!=</operator> <literal type="number" pos:start="357:30" pos:end="357:30">0</literal></expr>)</condition> <block pos:start="357:33" pos:end="359:5">{<block_content pos:start="358:9" pos:end="358:24">
        <expr_stmt pos:start="358:9" pos:end="358:24"><expr pos:start="358:9" pos:end="358:23"><name pos:start="358:9" pos:end="358:15"><name pos:start="358:9" pos:end="358:12">wbuf</name><index pos:start="358:13" pos:end="358:15">[<expr pos:start="358:14" pos:end="358:14"><literal type="number" pos:start="358:14" pos:end="358:14">0</literal></expr>]</index></name> <operator pos:start="358:17" pos:end="358:17">=</operator> <name pos:start="358:19" pos:end="358:19">L</name><literal type="char" pos:start="358:20" pos:end="358:23">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="361:1" pos:end="361:62">// This function returns non-0 if path ends with some garbage.</comment>
<function pos:start="362:1" pos:end="368:1"><type pos:start="362:1" pos:end="362:10"><specifier pos:start="362:1" pos:end="362:6">static</specifier> <name pos:start="362:8" pos:end="362:10">int</name></type> <name pos:start="362:12" pos:end="362:35">path_cannot_disclose_cgi</name> <parameter_list pos:start="362:37" pos:end="362:54">(<parameter pos:start="362:38" pos:end="362:53"><decl pos:start="362:38" pos:end="362:53"><type pos:start="362:38" pos:end="362:49"><specifier pos:start="362:38" pos:end="362:42">const</specifier> <name pos:start="362:44" pos:end="362:47">char</name> <modifier pos:start="362:49" pos:end="362:49">*</modifier></type><name pos:start="362:50" pos:end="362:53">path</name></decl></parameter>)</parameter_list>
<block pos:start="363:1" pos:end="368:1">{<block_content pos:start="364:5" pos:end="367:74">
    <decl_stmt pos:start="364:5" pos:end="364:54"><decl pos:start="364:5" pos:end="364:53"><type pos:start="364:5" pos:end="364:23"><specifier pos:start="364:5" pos:end="364:10">static</specifier> <specifier pos:start="364:12" pos:end="364:16">const</specifier> <name pos:start="364:18" pos:end="364:21">char</name> <modifier pos:start="364:23" pos:end="364:23">*</modifier></type><name pos:start="364:24" pos:end="364:46">allowed_last_characters</name> <init pos:start="364:48" pos:end="364:53">= <expr pos:start="364:50" pos:end="364:53"><literal type="string" pos:start="364:50" pos:end="364:53">"_-"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="365:5" pos:end="365:58"><decl pos:start="365:5" pos:end="365:57"><type pos:start="365:5" pos:end="365:7"><name pos:start="365:5" pos:end="365:7">int</name></type> <name pos:start="365:9" pos:end="365:12">last</name> <init pos:start="365:14" pos:end="365:57">= <expr pos:start="365:16" pos:end="365:57"><name pos:start="365:16" pos:end="365:57"><name pos:start="365:16" pos:end="365:19">path</name><index pos:start="365:20" pos:end="365:57">[<expr pos:start="365:21" pos:end="365:56"><call pos:start="365:21" pos:end="365:52"><name pos:start="365:21" pos:end="365:29">strnlen_s</name><argument_list pos:start="365:30" pos:end="365:52">(<argument pos:start="365:31" pos:end="365:34"><expr pos:start="365:31" pos:end="365:34"><name pos:start="365:31" pos:end="365:34">path</name></expr></argument>, <argument pos:start="365:37" pos:end="365:51"><expr pos:start="365:37" pos:end="365:51"><name pos:start="365:37" pos:end="365:51">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="365:54" pos:end="365:54">-</operator> <literal type="number" pos:start="365:56" pos:end="365:56">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <return pos:start="367:5" pos:end="367:74">return <expr pos:start="367:12" pos:end="367:73"><call pos:start="367:12" pos:end="367:24"><name pos:start="367:12" pos:end="367:18">isalnum</name><argument_list pos:start="367:19" pos:end="367:24">(<argument pos:start="367:20" pos:end="367:23"><expr pos:start="367:20" pos:end="367:23"><name pos:start="367:20" pos:end="367:23">last</name></expr></argument>)</argument_list></call> <operator pos:start="367:26" pos:end="367:27">||</operator> <call pos:start="367:29" pos:end="367:65"><name pos:start="367:29" pos:end="367:34">strchr</name><argument_list pos:start="367:35" pos:end="367:65">(<argument pos:start="367:36" pos:end="367:58"><expr pos:start="367:36" pos:end="367:58"><name pos:start="367:36" pos:end="367:58">allowed_last_characters</name></expr></argument>, <argument pos:start="367:61" pos:end="367:64"><expr pos:start="367:61" pos:end="367:64"><name pos:start="367:61" pos:end="367:64">last</name></expr></argument>)</argument_list></call> <operator pos:start="367:67" pos:end="367:68">!=</operator> <name pos:start="367:70" pos:end="367:73">NULL</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="369:1" pos:end="369:62">// This function returns non-0 if path ends with some garbage.</comment>
<function pos:start="370:1" pos:end="377:1"><type pos:start="370:1" pos:end="370:13"><specifier pos:start="370:1" pos:end="370:6">static</specifier> <name pos:start="370:8" pos:end="370:13">HANDLE</name></type> <name pos:start="370:15" pos:end="370:20">dlopen</name> <parameter_list pos:start="370:22" pos:end="370:54">(<parameter pos:start="370:23" pos:end="370:42"><decl pos:start="370:23" pos:end="370:42"><type pos:start="370:23" pos:end="370:42"><specifier pos:start="370:23" pos:end="370:27">const</specifier> <name pos:start="370:29" pos:end="370:32">char</name> <modifier pos:start="370:34" pos:end="370:34">*</modifier></type><name pos:start="370:35" pos:end="370:42">dll_name</name></decl></parameter>, <parameter pos:start="370:45" pos:end="370:53"><decl pos:start="370:45" pos:end="370:53"><type pos:start="370:45" pos:end="370:53"><name pos:start="370:45" pos:end="370:47">int</name></type> <name pos:start="370:49" pos:end="370:53">flags</name></decl></parameter>)</parameter_list>
<block pos:start="371:1" pos:end="377:1">{<block_content pos:start="372:5" pos:end="376:30">
    <decl_stmt pos:start="372:5" pos:end="372:27"><decl pos:start="372:5" pos:end="372:26"><type pos:start="372:5" pos:end="372:11"><name pos:start="372:5" pos:end="372:11">wchar_t</name></type> <name pos:start="372:13" pos:end="372:26"><name pos:start="372:13" pos:end="372:16">wbuf</name><index pos:start="372:17" pos:end="372:26">[<expr pos:start="372:18" pos:end="372:25"><name pos:start="372:18" pos:end="372:25">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="374:5" pos:end="374:14"><expr pos:start="374:5" pos:end="374:13"><name pos:start="374:5" pos:end="374:9">flags</name> <operator pos:start="374:11" pos:end="374:11">=</operator> <literal type="number" pos:start="374:13" pos:end="374:13">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="374:16" pos:end="374:24">// Unused</comment>
    <expr_stmt pos:start="375:5" pos:end="375:49"><expr pos:start="375:5" pos:end="375:48"><call pos:start="375:5" pos:end="375:48"><name pos:start="375:5" pos:end="375:14">to_unicode</name><argument_list pos:start="375:15" pos:end="375:48">(<argument pos:start="375:16" pos:end="375:23"><expr pos:start="375:16" pos:end="375:23"><name pos:start="375:16" pos:end="375:23">dll_name</name></expr></argument>, <argument pos:start="375:26" pos:end="375:29"><expr pos:start="375:26" pos:end="375:29"><name pos:start="375:26" pos:end="375:29">wbuf</name></expr></argument>, <argument pos:start="375:32" pos:end="375:47"><expr pos:start="375:32" pos:end="375:47"><call pos:start="375:32" pos:end="375:47"><name pos:start="375:32" pos:end="375:41">ARRAY_SIZE</name><argument_list pos:start="375:42" pos:end="375:47">(<argument pos:start="375:43" pos:end="375:46"><expr pos:start="375:43" pos:end="375:46"><name pos:start="375:43" pos:end="375:46">wbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="376:5" pos:end="376:30">return <expr pos:start="376:12" pos:end="376:29"><call pos:start="376:12" pos:end="376:29"><name pos:start="376:12" pos:end="376:23">LoadLibraryW</name><argument_list pos:start="376:24" pos:end="376:29">(<argument pos:start="376:25" pos:end="376:28"><expr pos:start="376:25" pos:end="376:28"><name pos:start="376:25" pos:end="376:28">wbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="378:1" pos:end="378:46">// descriptor. Return number of bytes written.</comment>
<function pos:start="379:1" pos:end="410:1"><type pos:start="379:1" pos:end="379:14"><specifier pos:start="379:1" pos:end="379:6">static</specifier> <name pos:start="379:8" pos:end="379:14">int64_t</name></type> <name pos:start="379:16" pos:end="379:19">push</name> <parameter_list pos:start="379:21" pos:end="380:33">(<parameter pos:start="379:22" pos:end="379:29"><decl pos:start="379:22" pos:end="379:29"><type pos:start="379:22" pos:end="379:29"><name pos:start="379:22" pos:end="379:25">FILE</name> <modifier pos:start="379:27" pos:end="379:27">*</modifier></type><name pos:start="379:28" pos:end="379:29">fp</name></decl></parameter>, <parameter pos:start="379:32" pos:end="379:42"><decl pos:start="379:32" pos:end="379:42"><type pos:start="379:32" pos:end="379:42"><name pos:start="379:32" pos:end="379:37">SOCKET</name></type> <name pos:start="379:39" pos:end="379:42">sock</name></decl></parameter>, <parameter pos:start="379:45" pos:end="379:52"><decl pos:start="379:45" pos:end="379:52"><type pos:start="379:45" pos:end="379:52"><name pos:start="379:45" pos:end="379:47">SSL</name> <modifier pos:start="379:49" pos:end="379:49">*</modifier></type><name pos:start="379:50" pos:end="379:52">ssl</name></decl></parameter>, <parameter pos:start="379:55" pos:end="379:69"><decl pos:start="379:55" pos:end="379:69"><type pos:start="379:55" pos:end="379:69"><specifier pos:start="379:55" pos:end="379:59">const</specifier> <name pos:start="379:61" pos:end="379:64">char</name> <modifier pos:start="379:66" pos:end="379:66">*</modifier></type><name pos:start="379:67" pos:end="379:69">buf</name></decl></parameter>,
                     <parameter pos:start="380:22" pos:end="380:32"><decl pos:start="380:22" pos:end="380:32"><type pos:start="380:22" pos:end="380:32"><name pos:start="380:22" pos:end="380:28">int64_t</name></type> <name pos:start="380:30" pos:end="380:32">len</name></decl></parameter>)</parameter_list>
<block pos:start="381:1" pos:end="410:1">{<block_content pos:start="382:5" pos:end="409:16">
    <decl_stmt pos:start="382:5" pos:end="382:17"><decl pos:start="382:5" pos:end="382:16"><type pos:start="382:5" pos:end="382:11"><name pos:start="382:5" pos:end="382:11">int64_t</name></type> <name pos:start="382:13" pos:end="382:16">sent</name></decl>;</decl_stmt>
    <decl_stmt pos:start="383:5" pos:end="383:13"><decl pos:start="383:5" pos:end="383:9"><type pos:start="383:5" pos:end="383:7"><name pos:start="383:5" pos:end="383:7">int</name></type> <name pos:start="383:9" pos:end="383:9">n</name></decl>, <decl pos:start="383:12" pos:end="383:12"><type ref="prev" pos:start="383:5" pos:end="383:7"/><name pos:start="383:12" pos:end="383:12">k</name></decl>;</decl_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:13"><expr pos:start="385:5" pos:end="385:12"><name pos:start="385:5" pos:end="385:8">sent</name> <operator pos:start="385:10" pos:end="385:10">=</operator> <literal type="number" pos:start="385:12" pos:end="385:12">0</literal></expr>;</expr_stmt>
    <while pos:start="386:5" pos:end="407:5">while <condition pos:start="386:11" pos:end="386:22">(<expr pos:start="386:12" pos:end="386:21"><name pos:start="386:12" pos:end="386:15">sent</name> <operator pos:start="386:17" pos:end="386:17">&lt;</operator> <name pos:start="386:19" pos:end="386:21">len</name></expr>)</condition> <block pos:start="386:24" pos:end="407:5">{<block_content pos:start="389:9" pos:end="406:18">

        <comment type="line" pos:start="388:9" pos:end="388:51">// How many bytes we send in this iteration</comment>
        <expr_stmt pos:start="389:9" pos:end="389:63"><expr pos:start="389:9" pos:end="389:62"><name pos:start="389:9" pos:end="389:9">k</name> <operator pos:start="389:11" pos:end="389:11">=</operator> <ternary pos:start="389:13" pos:end="389:62"><condition pos:start="389:13" pos:end="389:34"><expr pos:start="389:13" pos:end="389:32"><name pos:start="389:13" pos:end="389:15">len</name> <operator pos:start="389:17" pos:end="389:17">-</operator> <name pos:start="389:19" pos:end="389:22">sent</name> <operator pos:start="389:24" pos:end="389:24">&gt;</operator> <name pos:start="389:26" pos:end="389:32">INT_MAX</name></expr> ?</condition><then pos:start="389:36" pos:end="389:42"> <expr pos:start="389:36" pos:end="389:42"><name pos:start="389:36" pos:end="389:42">INT_MAX</name></expr> </then><else pos:start="389:44" pos:end="389:62">: <expr pos:start="389:46" pos:end="389:62"><operator pos:start="389:46" pos:end="389:46">(</operator><name pos:start="389:47" pos:end="389:49">int</name><operator pos:start="389:50" pos:end="389:50">)</operator><operator pos:start="389:51" pos:end="389:51">(</operator><name pos:start="389:52" pos:end="389:54">len</name> <operator pos:start="389:56" pos:end="389:56">-</operator> <name pos:start="389:58" pos:end="389:61">sent</name><operator pos:start="389:62" pos:end="389:62">)</operator></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="391:9" pos:end="400:9"><if pos:start="391:9" pos:end="393:9">if <condition pos:start="391:12" pos:end="391:24">(<expr pos:start="391:13" pos:end="391:23"><name pos:start="391:13" pos:end="391:15">ssl</name> <operator pos:start="391:17" pos:end="391:18">!=</operator> <name pos:start="391:20" pos:end="391:23">NULL</name></expr>)</condition> <block pos:start="391:26" pos:end="393:9">{<block_content pos:start="392:13" pos:end="392:46">
            <expr_stmt pos:start="392:13" pos:end="392:46"><expr pos:start="392:13" pos:end="392:45"><name pos:start="392:13" pos:end="392:13">n</name> <operator pos:start="392:15" pos:end="392:15">=</operator> <call pos:start="392:17" pos:end="392:45"><name pos:start="392:17" pos:end="392:25">SSL_write</name><argument_list pos:start="392:26" pos:end="392:45">(<argument pos:start="392:27" pos:end="392:29"><expr pos:start="392:27" pos:end="392:29"><name pos:start="392:27" pos:end="392:29">ssl</name></expr></argument>, <argument pos:start="392:32" pos:end="392:41"><expr pos:start="392:32" pos:end="392:41"><name pos:start="392:32" pos:end="392:34">buf</name> <operator pos:start="392:36" pos:end="392:36">+</operator> <name pos:start="392:38" pos:end="392:41">sent</name></expr></argument>, <argument pos:start="392:44" pos:end="392:44"><expr pos:start="392:44" pos:end="392:44"><name pos:start="392:44" pos:end="392:44">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="393:11" pos:end="398:9">else if <condition pos:start="393:19" pos:end="393:30">(<expr pos:start="393:20" pos:end="393:29"><name pos:start="393:20" pos:end="393:21">fp</name> <operator pos:start="393:23" pos:end="393:24">!=</operator> <name pos:start="393:26" pos:end="393:29">NULL</name></expr>)</condition> <block pos:start="393:32" pos:end="398:9">{<block_content pos:start="394:13" pos:end="397:13">
            <expr_stmt pos:start="394:13" pos:end="394:58"><expr pos:start="394:13" pos:end="394:57"><name pos:start="394:13" pos:end="394:13">n</name> <operator pos:start="394:15" pos:end="394:15">=</operator> <operator pos:start="394:17" pos:end="394:17">(</operator><name pos:start="394:18" pos:end="394:20">int</name><operator pos:start="394:21" pos:end="394:21">)</operator><call pos:start="394:22" pos:end="394:57"><name pos:start="394:22" pos:end="394:27">fwrite</name><argument_list pos:start="394:28" pos:end="394:57">(<argument pos:start="394:29" pos:end="394:38"><expr pos:start="394:29" pos:end="394:38"><name pos:start="394:29" pos:end="394:31">buf</name> <operator pos:start="394:33" pos:end="394:33">+</operator> <name pos:start="394:35" pos:end="394:38">sent</name></expr></argument>, <argument pos:start="394:41" pos:end="394:41"><expr pos:start="394:41" pos:end="394:41"><literal type="number" pos:start="394:41" pos:end="394:41">1</literal></expr></argument>, <argument pos:start="394:44" pos:end="394:52"><expr pos:start="394:44" pos:end="394:52"><operator pos:start="394:44" pos:end="394:44">(</operator><name pos:start="394:45" pos:end="394:50">size_t</name><operator pos:start="394:51" pos:end="394:51">)</operator><name pos:start="394:52" pos:end="394:52">k</name></expr></argument>, <argument pos:start="394:55" pos:end="394:56"><expr pos:start="394:55" pos:end="394:56"><name pos:start="394:55" pos:end="394:56">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="395:13" pos:end="397:13"><if pos:start="395:13" pos:end="397:13">if <condition pos:start="395:16" pos:end="395:27">(<expr pos:start="395:17" pos:end="395:26"><call pos:start="395:17" pos:end="395:26"><name pos:start="395:17" pos:end="395:22">ferror</name><argument_list pos:start="395:23" pos:end="395:26">(<argument pos:start="395:24" pos:end="395:25"><expr pos:start="395:24" pos:end="395:25"><name pos:start="395:24" pos:end="395:25">fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="395:29" pos:end="397:13">{<block_content pos:start="396:17" pos:end="396:23">
                <expr_stmt pos:start="396:17" pos:end="396:23"><expr pos:start="396:17" pos:end="396:22"><name pos:start="396:17" pos:end="396:17">n</name> <operator pos:start="396:19" pos:end="396:19">=</operator> <operator pos:start="396:21" pos:end="396:21">-</operator><literal type="number" pos:start="396:22" pos:end="396:22">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="398:11" pos:end="400:9">else <block pos:start="398:16" pos:end="400:9">{<block_content pos:start="399:13" pos:end="399:70">
            <expr_stmt pos:start="399:13" pos:end="399:70"><expr pos:start="399:13" pos:end="399:69"><name pos:start="399:13" pos:end="399:13">n</name> <operator pos:start="399:15" pos:end="399:15">=</operator> <operator pos:start="399:17" pos:end="399:17">(</operator><name pos:start="399:18" pos:end="399:20">int</name><operator pos:start="399:21" pos:end="399:21">)</operator> <call pos:start="399:23" pos:end="399:69"><name pos:start="399:23" pos:end="399:26">send</name><argument_list pos:start="399:27" pos:end="399:69">(<argument pos:start="399:28" pos:end="399:31"><expr pos:start="399:28" pos:end="399:31"><name pos:start="399:28" pos:end="399:31">sock</name></expr></argument>, <argument pos:start="399:34" pos:end="399:43"><expr pos:start="399:34" pos:end="399:43"><name pos:start="399:34" pos:end="399:36">buf</name> <operator pos:start="399:38" pos:end="399:38">+</operator> <name pos:start="399:40" pos:end="399:43">sent</name></expr></argument>, <argument pos:start="399:46" pos:end="399:54"><expr pos:start="399:46" pos:end="399:54"><operator pos:start="399:46" pos:end="399:46">(</operator><name pos:start="399:47" pos:end="399:52">size_t</name><operator pos:start="399:53" pos:end="399:53">)</operator><name pos:start="399:54" pos:end="399:54">k</name></expr></argument>, <argument pos:start="399:57" pos:end="399:68"><expr pos:start="399:57" pos:end="399:68"><name pos:start="399:57" pos:end="399:68">MSG_NOSIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="402:9" pos:end="404:9"><if pos:start="402:9" pos:end="404:9">if <condition pos:start="402:12" pos:end="402:18">(<expr pos:start="402:13" pos:end="402:17"><name pos:start="402:13" pos:end="402:13">n</name> <operator pos:start="402:15" pos:end="402:15">&lt;</operator> <literal type="number" pos:start="402:17" pos:end="402:17">0</literal></expr>)</condition> <block pos:start="402:20" pos:end="404:9">{<block_content pos:start="403:13" pos:end="403:18">
            <break pos:start="403:13" pos:end="403:18">break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="406:9" pos:end="406:18"><expr pos:start="406:9" pos:end="406:17"><name pos:start="406:9" pos:end="406:12">sent</name> <operator pos:start="406:14" pos:end="406:15">+=</operator> <name pos:start="406:17" pos:end="406:17">n</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return pos:start="409:5" pos:end="409:16">return <expr pos:start="409:12" pos:end="409:15"><name pos:start="409:12" pos:end="409:15">sent</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="411:1" pos:end="411:74">// reading, must give up and close the connection and exit serving thread.</comment>
<function pos:start="412:1" pos:end="455:1"><type pos:start="412:1" pos:end="412:10"><specifier pos:start="412:1" pos:end="412:6">static</specifier> <name pos:start="412:8" pos:end="412:10">int</name></type> <name pos:start="412:12" pos:end="412:40">wait_until_socket_is_readable</name> <parameter_list pos:start="412:42" pos:end="412:69">(<parameter pos:start="412:43" pos:end="412:68"><decl pos:start="412:43" pos:end="412:68"><type pos:start="412:43" pos:end="412:68"><name pos:start="412:43" pos:end="412:62"><name pos:start="412:43" pos:end="412:48">struct</name> <name pos:start="412:50" pos:end="412:62">mg_connection</name></name> <modifier pos:start="412:64" pos:end="412:64">*</modifier></type><name pos:start="412:65" pos:end="412:68">conn</name></decl></parameter>)</parameter_list>
<block pos:start="413:1" pos:end="455:1">{<block_content pos:start="414:5" pos:end="454:54">
    <decl_stmt pos:start="414:5" pos:end="414:22"><decl pos:start="414:5" pos:end="414:21"><type pos:start="414:5" pos:end="414:17"><name pos:start="414:5" pos:end="414:17"><name pos:start="414:5" pos:end="414:10">struct</name> <name pos:start="414:12" pos:end="414:17">pollfd</name></name></type> <name pos:start="414:19" pos:end="414:21">pfd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="415:5" pos:end="415:15"><decl pos:start="415:5" pos:end="415:14"><type pos:start="415:5" pos:end="415:7"><name pos:start="415:5" pos:end="415:7">int</name></type> <name pos:start="415:9" pos:end="415:14">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="416:5" pos:end="416:21"><decl pos:start="416:5" pos:end="416:20"><type pos:start="416:5" pos:end="416:7"><name pos:start="416:5" pos:end="416:7">int</name></type> <name pos:start="416:9" pos:end="416:16">times_up</name> <init pos:start="416:18" pos:end="416:20">= <expr pos:start="416:20" pos:end="416:20"><literal type="number" pos:start="416:20" pos:end="416:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="417:5" pos:end="417:33"><decl pos:start="417:5" pos:end="417:32"><type pos:start="417:5" pos:end="417:12"><name pos:start="417:5" pos:end="417:12">EST_UINT</name></type> <name pos:start="417:14" pos:end="417:28">total_wait_time</name> <init pos:start="417:30" pos:end="417:32">= <expr pos:start="417:32" pos:end="417:32"><literal type="number" pos:start="417:32" pos:end="417:32">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="418:5" pos:end="418:54"><decl pos:start="418:5" pos:end="418:53"><type pos:start="418:5" pos:end="418:12"><name pos:start="418:5" pos:end="418:12">EST_UINT</name></type> <name pos:start="418:14" pos:end="418:25">read_timeout</name> <init pos:start="418:27" pos:end="418:53">= <expr pos:start="418:29" pos:end="418:53"><name pos:start="418:29" pos:end="418:46"><name pos:start="418:29" pos:end="418:32">conn</name><operator pos:start="418:33" pos:end="418:34">-&gt;</operator><name pos:start="418:35" pos:end="418:46">read_timeout</name></name> <operator pos:start="418:48" pos:end="418:48">*</operator> <literal type="number" pos:start="418:50" pos:end="418:53">1000</literal></expr></init></decl>;</decl_stmt>

    <do pos:start="420:5" pos:end="452:24">do <block pos:start="420:8" pos:end="450:5">{<block_content pos:start="422:9" pos:end="442:9">
        <comment type="block" pos:start="421:9" pos:end="421:55">/* accumlate the total amount of time waited */</comment>
        <expr_stmt pos:start="422:9" pos:end="422:47"><expr pos:start="422:9" pos:end="422:46"><name pos:start="422:9" pos:end="422:23">total_wait_time</name> <operator pos:start="422:25" pos:end="422:26">+=</operator> <name pos:start="422:28" pos:end="422:46">MSEC_POLL_WAIT_TIME</name></expr>;</expr_stmt>

        <expr_stmt pos:start="424:9" pos:end="424:35"><expr pos:start="424:9" pos:end="424:34"><name pos:start="424:9" pos:end="424:14"><name pos:start="424:9" pos:end="424:11">pfd</name><operator pos:start="424:12" pos:end="424:12">.</operator><name pos:start="424:13" pos:end="424:14">fd</name></name> <operator pos:start="424:16" pos:end="424:16">=</operator> <name pos:start="424:18" pos:end="424:34"><name pos:start="424:18" pos:end="424:21">conn</name><operator pos:start="424:22" pos:end="424:23">-&gt;</operator><name pos:start="424:24" pos:end="424:29">client</name><operator pos:start="424:30" pos:end="424:30">.</operator><name pos:start="424:31" pos:end="424:34">sock</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="425:9" pos:end="425:28"><expr pos:start="425:9" pos:end="425:27"><name pos:start="425:9" pos:end="425:18"><name pos:start="425:9" pos:end="425:11">pfd</name><operator pos:start="425:12" pos:end="425:12">.</operator><name pos:start="425:13" pos:end="425:18">events</name></name> <operator pos:start="425:20" pos:end="425:20">=</operator> <name pos:start="425:22" pos:end="425:27">POLLIN</name></expr>;</expr_stmt>
        <expr_stmt pos:start="426:9" pos:end="426:24"><expr pos:start="426:9" pos:end="426:23"><name pos:start="426:9" pos:end="426:19"><name pos:start="426:9" pos:end="426:11">pfd</name><operator pos:start="426:12" pos:end="426:12">.</operator><name pos:start="426:13" pos:end="426:19">revents</name></name> <operator pos:start="426:21" pos:end="426:21">=</operator> <literal type="number" pos:start="426:23" pos:end="426:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="428:9" pos:end="428:18"><expr pos:start="428:9" pos:end="428:17"><name pos:start="428:9" pos:end="428:13">errno</name> <operator pos:start="428:15" pos:end="428:15">=</operator> <literal type="number" pos:start="428:17" pos:end="428:17">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="429:9" pos:end="429:52"><expr pos:start="429:9" pos:end="429:51"><name pos:start="429:9" pos:end="429:14">result</name> <operator pos:start="429:16" pos:end="429:16">=</operator> <call pos:start="429:18" pos:end="429:51"><name pos:start="429:18" pos:end="429:21">POLL</name><argument_list pos:start="429:22" pos:end="429:51">(<argument pos:start="429:23" pos:end="429:26"><expr pos:start="429:23" pos:end="429:26"><operator pos:start="429:23" pos:end="429:23">&amp;</operator><name pos:start="429:24" pos:end="429:26">pfd</name></expr></argument>, <argument pos:start="429:29" pos:end="429:29"><expr pos:start="429:29" pos:end="429:29"><literal type="number" pos:start="429:29" pos:end="429:29">1</literal></expr></argument>, <argument pos:start="429:32" pos:end="429:50"><expr pos:start="429:32" pos:end="429:50"><name pos:start="429:32" pos:end="429:50">MSEC_POLL_WAIT_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="430:9" pos:end="432:9"><if pos:start="430:9" pos:end="432:9">if <condition pos:start="430:12" pos:end="430:45">(<expr pos:start="430:13" pos:end="430:44"><name pos:start="430:13" pos:end="430:18">result</name> <operator pos:start="430:20" pos:end="430:21">==</operator> <literal type="number" pos:start="430:23" pos:end="430:23">0</literal> <operator pos:start="430:25" pos:end="430:26">&amp;&amp;</operator> <name pos:start="430:28" pos:end="430:36"><name pos:start="430:28" pos:end="430:31">conn</name><operator pos:start="430:32" pos:end="430:33">-&gt;</operator><name pos:start="430:34" pos:end="430:36">ssl</name></name> <operator pos:start="430:38" pos:end="430:39">!=</operator> <name pos:start="430:41" pos:end="430:44">NULL</name></expr>)</condition> <block pos:start="430:47" pos:end="432:9">{<block_content pos:start="431:13" pos:end="431:44">
            <expr_stmt pos:start="431:13" pos:end="431:44"><expr pos:start="431:13" pos:end="431:43"><name pos:start="431:13" pos:end="431:18">result</name> <operator pos:start="431:20" pos:end="431:20">=</operator> <call pos:start="431:22" pos:end="431:43"><name pos:start="431:22" pos:end="431:32">SSL_pending</name><argument_list pos:start="431:33" pos:end="431:43">(<argument pos:start="431:34" pos:end="431:42"><expr pos:start="431:34" pos:end="431:42"><name pos:start="431:34" pos:end="431:42"><name pos:start="431:34" pos:end="431:37">conn</name><operator pos:start="431:38" pos:end="431:39">-&gt;</operator><name pos:start="431:40" pos:end="431:42">ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block" pos:start="434:9" pos:end="437:11">/*
         * check to see if it's time to give up.  If it is, set
         * things accordingly to close the session down
         */</comment>
        <if_stmt pos:start="438:9" pos:end="442:9"><if pos:start="438:9" pos:end="442:9">if <condition pos:start="438:12" pos:end="438:60">(<expr pos:start="438:13" pos:end="438:59"><operator pos:start="438:13" pos:end="438:13">(</operator><name pos:start="438:14" pos:end="438:28">total_wait_time</name> <operator pos:start="438:30" pos:end="438:30">&gt;</operator> <name pos:start="438:32" pos:end="438:43">read_timeout</name><operator pos:start="438:44" pos:end="438:44">)</operator> <operator pos:start="438:46" pos:end="438:47">&amp;&amp;</operator> <name pos:start="438:49" pos:end="438:54">result</name> <operator pos:start="438:56" pos:end="438:57">==</operator> <literal type="number" pos:start="438:59" pos:end="438:59">0</literal></expr>)</condition> <block pos:start="438:62" pos:end="442:9">{<block_content pos:start="439:13" pos:end="441:24">
            <expr_stmt pos:start="439:13" pos:end="439:25"><expr pos:start="439:13" pos:end="439:24"><name pos:start="439:13" pos:end="439:20">times_up</name> <operator pos:start="439:22" pos:end="439:22">=</operator> <literal type="number" pos:start="439:24" pos:end="439:24">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="440:13" pos:end="440:33"><expr pos:start="440:13" pos:end="440:32"><name pos:start="440:13" pos:end="440:28"><name pos:start="440:13" pos:end="440:16">conn</name><operator pos:start="440:17" pos:end="440:18">-&gt;</operator><name pos:start="440:19" pos:end="440:28">must_close</name></name> <operator pos:start="440:30" pos:end="440:30">=</operator> <literal type="number" pos:start="440:32" pos:end="440:32">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="441:13" pos:end="441:24"><expr pos:start="441:13" pos:end="441:23"><name pos:start="441:13" pos:end="441:18">result</name> <operator pos:start="441:20" pos:end="441:20">=</operator> <operator pos:start="441:22" pos:end="441:22">-</operator><literal type="number" pos:start="441:23" pos:end="441:23">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="443:9" pos:end="449:11">/*
         * Continue waiting,
         * - while there's nothing to read from the socket or
         *   the poll was interrupted by a signal AND
         * - the master process has not indicated to stop AND
         * - the waiting for read timeout has not occurred
         */</comment>                
    </block_content>}</block> while <condition pos:start="450:13" pos:end="452:23">(<expr pos:start="450:14" pos:end="452:22"><operator pos:start="450:14" pos:end="450:14">(</operator><name pos:start="450:15" pos:end="450:20">result</name> <operator pos:start="450:22" pos:end="450:23">==</operator> <literal type="number" pos:start="450:25" pos:end="450:25">0</literal> <operator pos:start="450:27" pos:end="450:28">||</operator> <operator pos:start="450:30" pos:end="450:30">(</operator><name pos:start="450:31" pos:end="450:36">result</name> <operator pos:start="450:38" pos:end="450:38">&lt;</operator> <literal type="number" pos:start="450:40" pos:end="450:40">0</literal> <operator pos:start="450:42" pos:end="450:43">&amp;&amp;</operator> <name pos:start="450:45" pos:end="450:49">ERRNO</name> <operator pos:start="450:51" pos:end="450:52">==</operator> <name pos:start="450:54" pos:end="450:58">EINTR</name><operator pos:start="450:59" pos:end="450:59">)</operator><operator pos:start="450:60" pos:end="450:60">)</operator> <operator pos:start="450:62" pos:end="450:63">&amp;&amp;</operator>
             <name pos:start="451:14" pos:end="451:33"><name pos:start="451:14" pos:end="451:17">conn</name><operator pos:start="451:18" pos:end="451:19">-&gt;</operator><name pos:start="451:20" pos:end="451:22">ctx</name><operator pos:start="451:23" pos:end="451:24">-&gt;</operator><name pos:start="451:25" pos:end="451:33">stop_flag</name></name> <operator pos:start="451:35" pos:end="451:36">==</operator> <literal type="number" pos:start="451:38" pos:end="451:38">0</literal> <operator pos:start="451:40" pos:end="451:41">&amp;&amp;</operator>
             <operator pos:start="452:14" pos:end="452:14">!</operator><name pos:start="452:15" pos:end="452:22">times_up</name></expr>)</condition>;</do>

    <return pos:start="454:5" pos:end="454:54">return <expr pos:start="454:12" pos:end="454:53"><ternary pos:start="454:12" pos:end="454:53"><condition pos:start="454:12" pos:end="454:47"><expr pos:start="454:12" pos:end="454:45"><name pos:start="454:12" pos:end="454:31"><name pos:start="454:12" pos:end="454:15">conn</name><operator pos:start="454:16" pos:end="454:17">-&gt;</operator><name pos:start="454:18" pos:end="454:20">ctx</name><operator pos:start="454:21" pos:end="454:22">-&gt;</operator><name pos:start="454:23" pos:end="454:31">stop_flag</name></name> <operator pos:start="454:33" pos:end="454:34">||</operator> <name pos:start="454:36" pos:end="454:41">result</name> <operator pos:start="454:43" pos:end="454:43">&lt;</operator> <literal type="number" pos:start="454:45" pos:end="454:45">0</literal></expr> ?</condition><then pos:start="454:49" pos:end="454:49"> <expr pos:start="454:49" pos:end="454:49"><literal type="number" pos:start="454:49" pos:end="454:49">0</literal></expr> </then><else pos:start="454:51" pos:end="454:53">: <expr pos:start="454:53" pos:end="454:53"><literal type="number" pos:start="454:53" pos:end="454:53">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="456:1" pos:end="456:70">// Return negative value on error, or number of bytes read on success.</comment>
<function pos:start="457:1" pos:end="503:1"><type pos:start="457:1" pos:end="457:10"><specifier pos:start="457:1" pos:end="457:6">static</specifier> <name pos:start="457:8" pos:end="457:10">int</name></type> <name pos:start="457:12" pos:end="457:15">pull</name> <parameter_list pos:start="457:17" pos:end="457:74">(<parameter pos:start="457:18" pos:end="457:25"><decl pos:start="457:18" pos:end="457:25"><type pos:start="457:18" pos:end="457:25"><name pos:start="457:18" pos:end="457:21">FILE</name> <modifier pos:start="457:23" pos:end="457:23">*</modifier></type><name pos:start="457:24" pos:end="457:25">fp</name></decl></parameter>, <parameter pos:start="457:28" pos:end="457:53"><decl pos:start="457:28" pos:end="457:53"><type pos:start="457:28" pos:end="457:53"><name pos:start="457:28" pos:end="457:47"><name pos:start="457:28" pos:end="457:33">struct</name> <name pos:start="457:35" pos:end="457:47">mg_connection</name></name> <modifier pos:start="457:49" pos:end="457:49">*</modifier></type><name pos:start="457:50" pos:end="457:53">conn</name></decl></parameter>, <parameter pos:start="457:56" pos:end="457:64"><decl pos:start="457:56" pos:end="457:64"><type pos:start="457:56" pos:end="457:64"><name pos:start="457:56" pos:end="457:59">char</name> <modifier pos:start="457:61" pos:end="457:61">*</modifier></type><name pos:start="457:62" pos:end="457:64">buf</name></decl></parameter>, <parameter pos:start="457:67" pos:end="457:73"><decl pos:start="457:67" pos:end="457:73"><type pos:start="457:67" pos:end="457:73"><name pos:start="457:67" pos:end="457:69">int</name></type> <name pos:start="457:71" pos:end="457:73">len</name></decl></parameter>)</parameter_list>
<block pos:start="458:1" pos:end="503:1">{<block_content pos:start="459:5" pos:end="502:45">
    <decl_stmt pos:start="459:5" pos:end="459:14"><decl pos:start="459:5" pos:end="459:13"><type pos:start="459:5" pos:end="459:7"><name pos:start="459:5" pos:end="459:7">int</name></type> <name pos:start="459:9" pos:end="459:13">nread</name></decl>;</decl_stmt>
    <decl_stmt pos:start="460:5" pos:end="460:15"><decl pos:start="460:5" pos:end="460:14"><type pos:start="460:5" pos:end="460:7"><name pos:start="460:5" pos:end="460:7">int</name></type> <name pos:start="460:9" pos:end="460:14">err_cd</name></decl>;</decl_stmt>

    <if_stmt pos:start="462:5" pos:end="500:5"><if pos:start="462:5" pos:end="467:5">if <condition pos:start="462:8" pos:end="462:19">(<expr pos:start="462:9" pos:end="462:18"><name pos:start="462:9" pos:end="462:10">fp</name> <operator pos:start="462:12" pos:end="462:13">!=</operator> <name pos:start="462:15" pos:end="462:18">NULL</name></expr>)</condition> <block pos:start="462:21" pos:end="467:5">{<block_content pos:start="466:9" pos:end="466:57">
        <comment type="line" pos:start="463:9" pos:end="463:79">// Use read() instead of fread(), because if we're reading from the CGI</comment>
        <comment type="line" pos:start="464:9" pos:end="464:81">// pipe, fread() may block until IO buffer is filled up. We cannot afford</comment>
        <comment type="line" pos:start="465:9" pos:end="465:75">// to block and must pass all read bytes immediately to the client.</comment>
        <expr_stmt pos:start="466:9" pos:end="466:57"><expr pos:start="466:9" pos:end="466:56"><name pos:start="466:9" pos:end="466:13">nread</name> <operator pos:start="466:15" pos:end="466:15">=</operator> <operator pos:start="466:17" pos:end="466:17">(</operator><name pos:start="466:18" pos:end="466:20">int</name><operator pos:start="466:21" pos:end="466:21">)</operator> <call pos:start="466:23" pos:end="466:56"><name pos:start="466:23" pos:end="466:26">read</name><argument_list pos:start="466:27" pos:end="466:56">(<argument pos:start="466:28" pos:end="466:37"><expr pos:start="466:28" pos:end="466:37"><call pos:start="466:28" pos:end="466:37"><name pos:start="466:28" pos:end="466:33">fileno</name><argument_list pos:start="466:34" pos:end="466:37">(<argument pos:start="466:35" pos:end="466:36"><expr pos:start="466:35" pos:end="466:36"><name pos:start="466:35" pos:end="466:36">fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="466:40" pos:end="466:42"><expr pos:start="466:40" pos:end="466:42"><name pos:start="466:40" pos:end="466:42">buf</name></expr></argument>, <argument pos:start="466:45" pos:end="466:55"><expr pos:start="466:45" pos:end="466:55"><operator pos:start="466:45" pos:end="466:45">(</operator><name pos:start="466:46" pos:end="466:51">size_t</name><operator pos:start="466:52" pos:end="466:52">)</operator><name pos:start="466:53" pos:end="466:55">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="467:7" pos:end="469:5">else if <condition pos:start="467:15" pos:end="467:73">(<expr pos:start="467:16" pos:end="467:72"><operator pos:start="467:16" pos:end="467:16">!</operator><name pos:start="467:17" pos:end="467:32"><name pos:start="467:17" pos:end="467:20">conn</name><operator pos:start="467:21" pos:end="467:22">-&gt;</operator><name pos:start="467:23" pos:end="467:32">must_close</name></name> <operator pos:start="467:34" pos:end="467:35">&amp;&amp;</operator> <operator pos:start="467:37" pos:end="467:37">!</operator><call pos:start="467:38" pos:end="467:72"><name pos:start="467:38" pos:end="467:66">wait_until_socket_is_readable</name><argument_list pos:start="467:67" pos:end="467:72">(<argument pos:start="467:68" pos:end="467:71"><expr pos:start="467:68" pos:end="467:71"><name pos:start="467:68" pos:end="467:71">conn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="467:75" pos:end="469:5">{<block_content pos:start="468:9" pos:end="468:19">
        <expr_stmt pos:start="468:9" pos:end="468:19"><expr pos:start="468:9" pos:end="468:18"><name pos:start="468:9" pos:end="468:13">nread</name> <operator pos:start="468:15" pos:end="468:15">=</operator> <operator pos:start="468:17" pos:end="468:17">-</operator><literal type="number" pos:start="468:18" pos:end="468:18">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="469:7" pos:end="498:5">else if <condition pos:start="469:15" pos:end="469:33">(<expr pos:start="469:16" pos:end="469:32"><name pos:start="469:16" pos:end="469:24"><name pos:start="469:16" pos:end="469:19">conn</name><operator pos:start="469:20" pos:end="469:21">-&gt;</operator><name pos:start="469:22" pos:end="469:24">ssl</name></name> <operator pos:start="469:26" pos:end="469:27">!=</operator> <name pos:start="469:29" pos:end="469:32">NULL</name></expr>)</condition> <block pos:start="469:35" pos:end="498:5">{<block_content pos:start="470:9" pos:end="497:9">
        <expr_stmt pos:start="470:9" pos:end="470:46"><expr pos:start="470:9" pos:end="470:45"><name pos:start="470:9" pos:end="470:13">nread</name> <operator pos:start="470:15" pos:end="470:15">=</operator> <call pos:start="470:17" pos:end="470:45"><name pos:start="470:17" pos:end="470:24">SSL_read</name><argument_list pos:start="470:25" pos:end="470:45">(<argument pos:start="470:26" pos:end="470:34"><expr pos:start="470:26" pos:end="470:34"><name pos:start="470:26" pos:end="470:34"><name pos:start="470:26" pos:end="470:29">conn</name><operator pos:start="470:30" pos:end="470:31">-&gt;</operator><name pos:start="470:32" pos:end="470:34">ssl</name></name></expr></argument>, <argument pos:start="470:37" pos:end="470:39"><expr pos:start="470:37" pos:end="470:39"><name pos:start="470:37" pos:end="470:39">buf</name></expr></argument>, <argument pos:start="470:42" pos:end="470:44"><expr pos:start="470:42" pos:end="470:44"><name pos:start="470:42" pos:end="470:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="471:9" pos:end="471:49"><expr pos:start="471:9" pos:end="471:48"><name pos:start="471:9" pos:end="471:14">err_cd</name> <operator pos:start="471:16" pos:end="471:16">=</operator> <call pos:start="471:18" pos:end="471:48"><name pos:start="471:18" pos:end="471:30">SSL_get_error</name><argument_list pos:start="471:31" pos:end="471:48">(<argument pos:start="471:32" pos:end="471:40"><expr pos:start="471:32" pos:end="471:40"><name pos:start="471:32" pos:end="471:40"><name pos:start="471:32" pos:end="471:35">conn</name><operator pos:start="471:36" pos:end="471:37">-&gt;</operator><name pos:start="471:38" pos:end="471:40">ssl</name></name></expr></argument> ,<argument pos:start="471:43" pos:end="471:47"><expr pos:start="471:43" pos:end="471:47"><name pos:start="471:43" pos:end="471:47">nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch pos:start="472:9" pos:end="497:9">switch<condition pos:start="472:15" pos:end="472:22">(<expr pos:start="472:16" pos:end="472:21"><name pos:start="472:16" pos:end="472:21">err_cd</name></expr>)</condition> <block pos:start="472:24" pos:end="497:9">{<block_content pos:start="473:9" pos:end="496:18">
	<case pos:start="473:9" pos:end="473:28">case <expr pos:start="473:14" pos:end="473:27"><name pos:start="473:14" pos:end="473:27">SSL_ERROR_NONE</name></expr>:</case>
	    <comment type="block" pos:start="474:13" pos:end="474:57">/* Nothing to do, it's a graceful shutdown */</comment>
	    <break pos:start="475:13" pos:end="475:18">break;</break>
	<case pos:start="476:9" pos:end="476:33">case <expr pos:start="476:14" pos:end="476:32"><name pos:start="476:14" pos:end="476:32">SSL_ERROR_WANT_READ</name></expr>:</case>
	    <comment type="block" pos:start="477:13" pos:end="482:15">/*
	     * More data may be coming, change nread to zero
	     * so Mongoose will attempt to read more data
	     * from the peer.  This would occur if the peer
	     * initiated an SSL renegotation.
	     */</comment>
	    <expr_stmt pos:start="483:13" pos:end="483:22"><expr pos:start="483:13" pos:end="483:21"><name pos:start="483:13" pos:end="483:17">nread</name> <operator pos:start="483:19" pos:end="483:19">=</operator> <literal type="number" pos:start="483:21" pos:end="483:21">0</literal></expr>;</expr_stmt>
	    <break pos:start="484:13" pos:end="484:18">break;</break>
	<case pos:start="485:9" pos:end="485:40">case <expr pos:start="485:14" pos:end="485:39"><name pos:start="485:14" pos:end="485:39">SSL_ERROR_WANT_X509_LOOKUP</name></expr>:</case>
	    <expr_stmt pos:start="486:13" pos:end="486:58"><expr pos:start="486:13" pos:end="486:57"><call pos:start="486:13" pos:end="486:57"><name pos:start="486:13" pos:end="486:23">EST_LOG_ERR</name><argument_list pos:start="486:24" pos:end="486:57">(<argument pos:start="486:25" pos:end="486:56"><expr pos:start="486:25" pos:end="486:56"><literal type="string" pos:start="486:25" pos:end="486:56">"SSL_read error, wants lookup\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break pos:start="487:13" pos:end="487:18">break;</break>
	<default pos:start="488:9" pos:end="488:16">default:</default>
	    <comment type="block" pos:start="489:13" pos:end="493:15">/*
	     * For all other errors, simply log the error
	     * and make sure nread is -1 to indicate an
	     * error to the function above us.
	     */</comment>
	    <expr_stmt pos:start="494:13" pos:end="494:62"><expr pos:start="494:13" pos:end="494:61"><call pos:start="494:13" pos:end="494:61"><name pos:start="494:13" pos:end="494:23">EST_LOG_ERR</name><argument_list pos:start="494:24" pos:end="494:61">(<argument pos:start="494:25" pos:end="494:52"><expr pos:start="494:25" pos:end="494:52"><literal type="string" pos:start="494:25" pos:end="494:52">"SSL_read error, code: %d\n"</literal></expr></argument>, <argument pos:start="494:55" pos:end="494:60"><expr pos:start="494:55" pos:end="494:60"><name pos:start="494:55" pos:end="494:60">err_cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="495:13" pos:end="495:23"><expr pos:start="495:13" pos:end="495:22"><name pos:start="495:13" pos:end="495:17">nread</name> <operator pos:start="495:19" pos:end="495:19">=</operator> <operator pos:start="495:21" pos:end="495:21">-</operator><literal type="number" pos:start="495:22" pos:end="495:22">1</literal></expr>;</expr_stmt>
	    <break pos:start="496:13" pos:end="496:18">break;</break>
	</block_content>}</block></switch>
    </block_content>}</block></if> <else pos:start="498:7" pos:end="500:5">else <block pos:start="498:12" pos:end="500:5">{<block_content pos:start="499:9" pos:end="499:67">
        <expr_stmt pos:start="499:9" pos:end="499:67"><expr pos:start="499:9" pos:end="499:66"><name pos:start="499:9" pos:end="499:13">nread</name> <operator pos:start="499:15" pos:end="499:15">=</operator> <operator pos:start="499:17" pos:end="499:17">(</operator><name pos:start="499:18" pos:end="499:20">int</name><operator pos:start="499:21" pos:end="499:21">)</operator> <call pos:start="499:23" pos:end="499:66"><name pos:start="499:23" pos:end="499:26">recv</name><argument_list pos:start="499:27" pos:end="499:66">(<argument pos:start="499:28" pos:end="499:44"><expr pos:start="499:28" pos:end="499:44"><name pos:start="499:28" pos:end="499:44"><name pos:start="499:28" pos:end="499:31">conn</name><operator pos:start="499:32" pos:end="499:33">-&gt;</operator><name pos:start="499:34" pos:end="499:39">client</name><operator pos:start="499:40" pos:end="499:40">.</operator><name pos:start="499:41" pos:end="499:44">sock</name></name></expr></argument>, <argument pos:start="499:47" pos:end="499:49"><expr pos:start="499:47" pos:end="499:49"><name pos:start="499:47" pos:end="499:49">buf</name></expr></argument>, <argument pos:start="499:52" pos:end="499:62"><expr pos:start="499:52" pos:end="499:62"><operator pos:start="499:52" pos:end="499:52">(</operator><name pos:start="499:53" pos:end="499:58">size_t</name><operator pos:start="499:59" pos:end="499:59">)</operator><name pos:start="499:60" pos:end="499:62">len</name></expr></argument>, <argument pos:start="499:65" pos:end="499:65"><expr pos:start="499:65" pos:end="499:65"><literal type="number" pos:start="499:65" pos:end="499:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return pos:start="502:5" pos:end="502:45">return <expr pos:start="502:12" pos:end="502:44"><ternary pos:start="502:12" pos:end="502:44"><condition pos:start="502:12" pos:end="502:33"><expr pos:start="502:12" pos:end="502:31"><name pos:start="502:12" pos:end="502:31"><name pos:start="502:12" pos:end="502:15">conn</name><operator pos:start="502:16" pos:end="502:17">-&gt;</operator><name pos:start="502:18" pos:end="502:20">ctx</name><operator pos:start="502:21" pos:end="502:22">-&gt;</operator><name pos:start="502:23" pos:end="502:31">stop_flag</name></name></expr> ?</condition><then pos:start="502:35" pos:end="502:36"> <expr pos:start="502:35" pos:end="502:36"><operator pos:start="502:35" pos:end="502:35">-</operator><literal type="number" pos:start="502:36" pos:end="502:36">1</literal></expr> </then><else pos:start="502:38" pos:end="502:44">: <expr pos:start="502:40" pos:end="502:44"><name pos:start="502:40" pos:end="502:44">nread</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="504:1" pos:end="504:70">// Return negative value on error, or number of bytes read on success.</comment>
<function pos:start="505:1" pos:end="551:1"><type pos:start="505:1" pos:end="505:3"><name pos:start="505:1" pos:end="505:3">int</name></type> <name pos:start="505:5" pos:end="505:11">mg_read</name> <parameter_list pos:start="505:13" pos:end="505:63">(<parameter pos:start="505:14" pos:end="505:39"><decl pos:start="505:14" pos:end="505:39"><type pos:start="505:14" pos:end="505:39"><name pos:start="505:14" pos:end="505:33"><name pos:start="505:14" pos:end="505:19">struct</name> <name pos:start="505:21" pos:end="505:33">mg_connection</name></name> <modifier pos:start="505:35" pos:end="505:35">*</modifier></type><name pos:start="505:36" pos:end="505:39">conn</name></decl></parameter>, <parameter pos:start="505:42" pos:end="505:50"><decl pos:start="505:42" pos:end="505:50"><type pos:start="505:42" pos:end="505:50"><name pos:start="505:42" pos:end="505:45">void</name> <modifier pos:start="505:47" pos:end="505:47">*</modifier></type><name pos:start="505:48" pos:end="505:50">buf</name></decl></parameter>, <parameter pos:start="505:53" pos:end="505:62"><decl pos:start="505:53" pos:end="505:62"><type pos:start="505:53" pos:end="505:62"><name pos:start="505:53" pos:end="505:58">size_t</name></type> <name pos:start="505:60" pos:end="505:62">len</name></decl></parameter>)</parameter_list>
<block pos:start="506:1" pos:end="551:1">{<block_content pos:start="507:5" pos:end="550:17">
    <decl_stmt pos:start="507:5" pos:end="507:31"><decl pos:start="507:5" pos:end="507:9"><type pos:start="507:5" pos:end="507:7"><name pos:start="507:5" pos:end="507:7">int</name></type> <name pos:start="507:9" pos:end="507:9">n</name></decl>, <decl pos:start="507:12" pos:end="507:23"><type ref="prev" pos:start="507:5" pos:end="507:7"/><name pos:start="507:12" pos:end="507:23">buffered_len</name></decl>, <decl pos:start="507:26" pos:end="507:30"><type ref="prev" pos:start="507:5" pos:end="507:7"/><name pos:start="507:26" pos:end="507:30">nread</name></decl>;</decl_stmt>
    <decl_stmt pos:start="508:5" pos:end="508:21"><decl pos:start="508:5" pos:end="508:20"><type pos:start="508:5" pos:end="508:16"><specifier pos:start="508:5" pos:end="508:9">const</specifier> <name pos:start="508:11" pos:end="508:14">char</name> <modifier pos:start="508:16" pos:end="508:16">*</modifier></type><name pos:start="508:17" pos:end="508:20">body</name></decl>;</decl_stmt>
    <decl_stmt pos:start="509:5" pos:end="509:20"><decl pos:start="509:5" pos:end="509:19"><type pos:start="509:5" pos:end="509:11"><name pos:start="509:5" pos:end="509:11">rsize_t</name></type> <name pos:start="509:13" pos:end="509:19">max_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="511:5" pos:end="511:14"><expr pos:start="511:5" pos:end="511:13"><name pos:start="511:5" pos:end="511:9">nread</name> <operator pos:start="511:11" pos:end="511:11">=</operator> <literal type="number" pos:start="511:13" pos:end="511:13">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="512:5" pos:end="512:28"><expr pos:start="512:5" pos:end="512:27"><name pos:start="512:5" pos:end="512:11">max_len</name> <operator pos:start="512:13" pos:end="512:13">=</operator> <operator pos:start="512:15" pos:end="512:15">(</operator><name pos:start="512:16" pos:end="512:22">rsize_t</name><operator pos:start="512:23" pos:end="512:23">)</operator> <name pos:start="512:25" pos:end="512:27">len</name></expr>;</expr_stmt>
    <if_stmt pos:start="513:5" pos:end="549:5"><if pos:start="513:5" pos:end="549:5">if <condition pos:start="513:8" pos:end="513:51">(<expr pos:start="513:9" pos:end="513:50"><name pos:start="513:9" pos:end="513:30"><name pos:start="513:9" pos:end="513:12">conn</name><operator pos:start="513:13" pos:end="513:14">-&gt;</operator><name pos:start="513:15" pos:end="513:30">consumed_content</name></name> <operator pos:start="513:32" pos:end="513:32">&lt;</operator> <name pos:start="513:34" pos:end="513:50"><name pos:start="513:34" pos:end="513:37">conn</name><operator pos:start="513:38" pos:end="513:39">-&gt;</operator><name pos:start="513:40" pos:end="513:50">content_len</name></name></expr>)</condition> <block pos:start="513:53" pos:end="549:5">{<block_content pos:start="515:9" pos:end="548:9">
        <comment type="line" pos:start="514:9" pos:end="514:42">// Adjust number of bytes to read.</comment>
        <decl_stmt pos:start="515:9" pos:end="515:69"><decl pos:start="515:9" pos:end="515:68"><type pos:start="515:9" pos:end="515:15"><name pos:start="515:9" pos:end="515:15">int64_t</name></type> <name pos:start="515:17" pos:end="515:23">to_read</name> <init pos:start="515:25" pos:end="515:68">= <expr pos:start="515:27" pos:end="515:68"><name pos:start="515:27" pos:end="515:43"><name pos:start="515:27" pos:end="515:30">conn</name><operator pos:start="515:31" pos:end="515:32">-&gt;</operator><name pos:start="515:33" pos:end="515:43">content_len</name></name> <operator pos:start="515:45" pos:end="515:45">-</operator> <name pos:start="515:47" pos:end="515:68"><name pos:start="515:47" pos:end="515:50">conn</name><operator pos:start="515:51" pos:end="515:52">-&gt;</operator><name pos:start="515:53" pos:end="515:68">consumed_content</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="516:9" pos:end="518:9"><if pos:start="516:9" pos:end="518:9">if <condition pos:start="516:12" pos:end="516:35">(<expr pos:start="516:13" pos:end="516:34"><name pos:start="516:13" pos:end="516:19">to_read</name> <operator pos:start="516:21" pos:end="516:21">&lt;</operator> <operator pos:start="516:23" pos:end="516:23">(</operator><name pos:start="516:24" pos:end="516:30">int64_t</name><operator pos:start="516:31" pos:end="516:31">)</operator><name pos:start="516:32" pos:end="516:34">len</name></expr>)</condition> <block pos:start="516:37" pos:end="518:9">{<block_content pos:start="517:13" pos:end="517:34">
            <expr_stmt pos:start="517:13" pos:end="517:34"><expr pos:start="517:13" pos:end="517:33"><name pos:start="517:13" pos:end="517:15">len</name> <operator pos:start="517:17" pos:end="517:17">=</operator> <operator pos:start="517:19" pos:end="517:19">(</operator><name pos:start="517:20" pos:end="517:25">size_t</name><operator pos:start="517:26" pos:end="517:26">)</operator><name pos:start="517:27" pos:end="517:33">to_read</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="520:9" pos:end="520:31">// Return buffered data</comment>
        <expr_stmt pos:start="521:9" pos:end="521:70"><expr pos:start="521:9" pos:end="521:69"><name pos:start="521:9" pos:end="521:12">body</name> <operator pos:start="521:14" pos:end="521:14">=</operator> <name pos:start="521:16" pos:end="521:24"><name pos:start="521:16" pos:end="521:19">conn</name><operator pos:start="521:20" pos:end="521:21">-&gt;</operator><name pos:start="521:22" pos:end="521:24">buf</name></name> <operator pos:start="521:26" pos:end="521:26">+</operator> <name pos:start="521:28" pos:end="521:44"><name pos:start="521:28" pos:end="521:31">conn</name><operator pos:start="521:32" pos:end="521:33">-&gt;</operator><name pos:start="521:34" pos:end="521:44">request_len</name></name> <operator pos:start="521:46" pos:end="521:46">+</operator> <name pos:start="521:48" pos:end="521:69"><name pos:start="521:48" pos:end="521:51">conn</name><operator pos:start="521:52" pos:end="521:53">-&gt;</operator><name pos:start="521:54" pos:end="521:69">consumed_content</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="522:9" pos:end="522:65"><expr pos:start="522:9" pos:end="522:64"><name pos:start="522:9" pos:end="522:20">buffered_len</name> <operator pos:start="522:22" pos:end="522:22">=</operator> <operator pos:start="522:24" pos:end="522:24">(</operator><name pos:start="522:25" pos:end="522:27">int</name><operator pos:start="522:28" pos:end="522:28">)</operator> <operator pos:start="522:30" pos:end="522:30">(</operator><operator pos:start="522:31" pos:end="522:31">&amp;</operator><name pos:start="522:32" pos:end="522:56"><name pos:start="522:32" pos:end="522:35">conn</name><operator pos:start="522:36" pos:end="522:37">-&gt;</operator><name pos:start="522:38" pos:end="522:40">buf</name><index pos:start="522:41" pos:end="522:56">[<expr pos:start="522:42" pos:end="522:55"><name pos:start="522:42" pos:end="522:55"><name pos:start="522:42" pos:end="522:45">conn</name><operator pos:start="522:46" pos:end="522:47">-&gt;</operator><name pos:start="522:48" pos:end="522:55">data_len</name></name></expr>]</index></name> <operator pos:start="522:58" pos:end="522:58">-</operator> <name pos:start="522:60" pos:end="522:63">body</name><operator pos:start="522:64" pos:end="522:64">)</operator></expr>;</expr_stmt>
        <if_stmt pos:start="523:9" pos:end="532:9"><if pos:start="523:9" pos:end="532:9">if <condition pos:start="523:12" pos:end="523:29">(<expr pos:start="523:13" pos:end="523:28"><name pos:start="523:13" pos:end="523:24">buffered_len</name> <operator pos:start="523:26" pos:end="523:26">&gt;</operator> <literal type="number" pos:start="523:28" pos:end="523:28">0</literal></expr>)</condition> <block pos:start="523:31" pos:end="532:9">{<block_content pos:start="524:13" pos:end="531:44">
            <if_stmt pos:start="524:13" pos:end="526:13"><if pos:start="524:13" pos:end="526:13">if <condition pos:start="524:16" pos:end="524:43">(<expr pos:start="524:17" pos:end="524:42"><name pos:start="524:17" pos:end="524:19">len</name> <operator pos:start="524:21" pos:end="524:21">&lt;</operator> <operator pos:start="524:23" pos:end="524:23">(</operator><name pos:start="524:24" pos:end="524:29">size_t</name><operator pos:start="524:30" pos:end="524:30">)</operator><name pos:start="524:31" pos:end="524:42">buffered_len</name></expr>)</condition> <block pos:start="524:45" pos:end="526:13">{<block_content pos:start="525:17" pos:end="525:40">
                <expr_stmt pos:start="525:17" pos:end="525:40"><expr pos:start="525:17" pos:end="525:39"><name pos:start="525:17" pos:end="525:28">buffered_len</name> <operator pos:start="525:30" pos:end="525:30">=</operator> <operator pos:start="525:32" pos:end="525:32">(</operator><name pos:start="525:33" pos:end="525:35">int</name><operator pos:start="525:36" pos:end="525:36">)</operator><name pos:start="525:37" pos:end="525:39">len</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="527:13" pos:end="527:64"><expr pos:start="527:13" pos:end="527:63"><call pos:start="527:13" pos:end="527:63"><name pos:start="527:13" pos:end="527:20">memcpy_s</name><argument_list pos:start="527:21" pos:end="527:63">(<argument pos:start="527:22" pos:end="527:24"><expr pos:start="527:22" pos:end="527:24"><name pos:start="527:22" pos:end="527:24">buf</name></expr></argument>, <argument pos:start="527:27" pos:end="527:33"><expr pos:start="527:27" pos:end="527:33"><name pos:start="527:27" pos:end="527:33">max_len</name></expr></argument>, <argument pos:start="527:36" pos:end="527:39"><expr pos:start="527:36" pos:end="527:39"><name pos:start="527:36" pos:end="527:39">body</name></expr></argument>, <argument pos:start="527:42" pos:end="527:62"><expr pos:start="527:42" pos:end="527:62"><operator pos:start="527:42" pos:end="527:42">(</operator><name pos:start="527:43" pos:end="527:49">rsize_t</name><operator pos:start="527:50" pos:end="527:50">)</operator><name pos:start="527:51" pos:end="527:62">buffered_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="528:13" pos:end="528:32"><expr pos:start="528:13" pos:end="528:31"><name pos:start="528:13" pos:end="528:15">len</name> <operator pos:start="528:17" pos:end="528:18">-=</operator> <name pos:start="528:20" pos:end="528:31">buffered_len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="529:13" pos:end="529:51"><expr pos:start="529:13" pos:end="529:50"><name pos:start="529:13" pos:end="529:34"><name pos:start="529:13" pos:end="529:16">conn</name><operator pos:start="529:17" pos:end="529:18">-&gt;</operator><name pos:start="529:19" pos:end="529:34">consumed_content</name></name> <operator pos:start="529:36" pos:end="529:37">+=</operator> <name pos:start="529:39" pos:end="529:50">buffered_len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="530:13" pos:end="530:34"><expr pos:start="530:13" pos:end="530:33"><name pos:start="530:13" pos:end="530:17">nread</name> <operator pos:start="530:19" pos:end="530:20">+=</operator> <name pos:start="530:22" pos:end="530:33">buffered_len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="531:13" pos:end="531:44"><expr pos:start="531:13" pos:end="531:43"><name pos:start="531:13" pos:end="531:15">buf</name> <operator pos:start="531:17" pos:end="531:17">=</operator> <operator pos:start="531:19" pos:end="531:19">(</operator><name pos:start="531:20" pos:end="531:23">char</name><operator pos:start="531:24" pos:end="531:24">*</operator><operator pos:start="531:25" pos:end="531:25">)</operator><name pos:start="531:26" pos:end="531:28">buf</name> <operator pos:start="531:30" pos:end="531:30">+</operator> <name pos:start="531:32" pos:end="531:43">buffered_len</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="534:9" pos:end="534:84">// We have returned all buffered data. Read new data from the remote socket.</comment>
        <while pos:start="535:9" pos:end="548:9">while <condition pos:start="535:15" pos:end="535:23">(<expr pos:start="535:16" pos:end="535:22"><name pos:start="535:16" pos:end="535:18">len</name> <operator pos:start="535:20" pos:end="535:20">&gt;</operator> <literal type="number" pos:start="535:22" pos:end="535:22">0</literal></expr>)</condition> <block pos:start="535:25" pos:end="548:9">{<block_content pos:start="536:13" pos:end="547:13">
            <expr_stmt pos:start="536:13" pos:end="536:55"><expr pos:start="536:13" pos:end="536:54"><name pos:start="536:13" pos:end="536:13">n</name> <operator pos:start="536:15" pos:end="536:15">=</operator> <call pos:start="536:17" pos:end="536:54"><name pos:start="536:17" pos:end="536:20">pull</name><argument_list pos:start="536:21" pos:end="536:54">(<argument pos:start="536:22" pos:end="536:25"><expr pos:start="536:22" pos:end="536:25"><name pos:start="536:22" pos:end="536:25">NULL</name></expr></argument>, <argument pos:start="536:28" pos:end="536:31"><expr pos:start="536:28" pos:end="536:31"><name pos:start="536:28" pos:end="536:31">conn</name></expr></argument>, <argument pos:start="536:34" pos:end="536:43"><expr pos:start="536:34" pos:end="536:43"><operator pos:start="536:34" pos:end="536:34">(</operator><name pos:start="536:35" pos:end="536:38">char</name><operator pos:start="536:39" pos:end="536:39">*</operator><operator pos:start="536:40" pos:end="536:40">)</operator><name pos:start="536:41" pos:end="536:43">buf</name></expr></argument>, <argument pos:start="536:46" pos:end="536:53"><expr pos:start="536:46" pos:end="536:53"><operator pos:start="536:46" pos:end="536:46">(</operator><name pos:start="536:47" pos:end="536:49">int</name><operator pos:start="536:50" pos:end="536:50">)</operator><name pos:start="536:51" pos:end="536:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="537:13" pos:end="547:13"><if pos:start="537:13" pos:end="540:13">if <condition pos:start="537:16" pos:end="537:22">(<expr pos:start="537:17" pos:end="537:21"><name pos:start="537:17" pos:end="537:17">n</name> <operator pos:start="537:19" pos:end="537:19">&lt;</operator> <literal type="number" pos:start="537:21" pos:end="537:21">0</literal></expr>)</condition> <block pos:start="537:24" pos:end="540:13">{<block_content pos:start="538:17" pos:end="539:22">
                <expr_stmt pos:start="538:17" pos:end="538:26"><expr pos:start="538:17" pos:end="538:25"><name pos:start="538:17" pos:end="538:21">nread</name> <operator pos:start="538:23" pos:end="538:23">=</operator> <name pos:start="538:25" pos:end="538:25">n</name></expr>;</expr_stmt> <comment type="line" pos:start="538:28" pos:end="538:49">// Propagate the error</comment>
                <break pos:start="539:17" pos:end="539:22">break;</break>
            </block_content>}</block></if> <if type="elseif" pos:start="540:15" pos:end="545:13">else if <condition pos:start="540:23" pos:end="540:29">(<expr pos:start="540:24" pos:end="540:28"><name pos:start="540:24" pos:end="540:24">n</name> <operator pos:start="540:26" pos:end="540:26">&gt;</operator> <literal type="number" pos:start="540:28" pos:end="540:28">0</literal></expr>)</condition> <block pos:start="540:31" pos:end="545:13">{<block_content pos:start="541:17" pos:end="544:25">
                <expr_stmt pos:start="541:17" pos:end="541:37"><expr pos:start="541:17" pos:end="541:36"><name pos:start="541:17" pos:end="541:19">buf</name> <operator pos:start="541:21" pos:end="541:21">=</operator> <operator pos:start="541:23" pos:end="541:23">(</operator><name pos:start="541:24" pos:end="541:27">char</name><operator pos:start="541:28" pos:end="541:28">*</operator><operator pos:start="541:29" pos:end="541:29">)</operator><name pos:start="541:30" pos:end="541:32">buf</name> <operator pos:start="541:34" pos:end="541:34">+</operator> <name pos:start="541:36" pos:end="541:36">n</name></expr>;</expr_stmt>
                <expr_stmt pos:start="542:17" pos:end="542:44"><expr pos:start="542:17" pos:end="542:43"><name pos:start="542:17" pos:end="542:38"><name pos:start="542:17" pos:end="542:20">conn</name><operator pos:start="542:21" pos:end="542:22">-&gt;</operator><name pos:start="542:23" pos:end="542:38">consumed_content</name></name> <operator pos:start="542:40" pos:end="542:41">+=</operator> <name pos:start="542:43" pos:end="542:43">n</name></expr>;</expr_stmt>
                <expr_stmt pos:start="543:17" pos:end="543:27"><expr pos:start="543:17" pos:end="543:26"><name pos:start="543:17" pos:end="543:21">nread</name> <operator pos:start="543:23" pos:end="543:24">+=</operator> <name pos:start="543:26" pos:end="543:26">n</name></expr>;</expr_stmt>
                <expr_stmt pos:start="544:17" pos:end="544:25"><expr pos:start="544:17" pos:end="544:24"><name pos:start="544:17" pos:end="544:19">len</name> <operator pos:start="544:21" pos:end="544:22">-=</operator> <name pos:start="544:24" pos:end="544:24">n</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="545:15" pos:end="547:13">else <block pos:start="545:20" pos:end="547:13">{<block_content>
                <comment type="block" pos:start="546:17" pos:end="546:35">/* n == 0. retry */</comment>
            </block_content>}</block></else></if_stmt>   
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <return pos:start="550:5" pos:end="550:17">return <expr pos:start="550:12" pos:end="550:16"><name pos:start="550:12" pos:end="550:16">nread</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="552:1" pos:end="552:70">// Return negative value on error, or number of bytes read on success.</comment>
<function pos:start="553:1" pos:end="560:1"><type pos:start="553:1" pos:end="553:3"><name pos:start="553:1" pos:end="553:3">int</name></type> <name pos:start="553:5" pos:end="553:12">mg_write</name> <parameter_list pos:start="553:14" pos:end="553:70">(<parameter pos:start="553:15" pos:end="553:40"><decl pos:start="553:15" pos:end="553:40"><type pos:start="553:15" pos:end="553:40"><name pos:start="553:15" pos:end="553:34"><name pos:start="553:15" pos:end="553:20">struct</name> <name pos:start="553:22" pos:end="553:34">mg_connection</name></name> <modifier pos:start="553:36" pos:end="553:36">*</modifier></type><name pos:start="553:37" pos:end="553:40">conn</name></decl></parameter>, <parameter pos:start="553:43" pos:end="553:57"><decl pos:start="553:43" pos:end="553:57"><type pos:start="553:43" pos:end="553:57"><specifier pos:start="553:43" pos:end="553:47">const</specifier> <name pos:start="553:49" pos:end="553:52">void</name> <modifier pos:start="553:54" pos:end="553:54">*</modifier></type><name pos:start="553:55" pos:end="553:57">buf</name></decl></parameter>, <parameter pos:start="553:60" pos:end="553:69"><decl pos:start="553:60" pos:end="553:69"><type pos:start="553:60" pos:end="553:69"><name pos:start="553:60" pos:end="553:65">size_t</name></type> <name pos:start="553:67" pos:end="553:69">len</name></decl></parameter>)</parameter_list>
<block pos:start="554:1" pos:end="560:1">{<block_content pos:start="555:5" pos:end="559:22">
    <decl_stmt pos:start="555:5" pos:end="555:18"><decl pos:start="555:5" pos:end="555:17"><type pos:start="555:5" pos:end="555:11"><name pos:start="555:5" pos:end="555:11">int64_t</name></type> <name pos:start="555:13" pos:end="555:17">total</name></decl>;</decl_stmt>

    <expr_stmt pos:start="557:5" pos:end="558:31"><expr pos:start="557:5" pos:end="558:30"><name pos:start="557:5" pos:end="557:9">total</name> <operator pos:start="557:11" pos:end="557:11">=</operator> <call pos:start="557:13" pos:end="558:30"><name pos:start="557:13" pos:end="557:16">push</name><argument_list pos:start="557:17" pos:end="558:30">(<argument pos:start="557:18" pos:end="557:21"><expr pos:start="557:18" pos:end="557:21"><name pos:start="557:18" pos:end="557:21">NULL</name></expr></argument>, <argument pos:start="557:24" pos:end="557:40"><expr pos:start="557:24" pos:end="557:40"><name pos:start="557:24" pos:end="557:40"><name pos:start="557:24" pos:end="557:27">conn</name><operator pos:start="557:28" pos:end="557:29">-&gt;</operator><name pos:start="557:30" pos:end="557:35">client</name><operator pos:start="557:36" pos:end="557:36">.</operator><name pos:start="557:37" pos:end="557:40">sock</name></name></expr></argument>, <argument pos:start="557:43" pos:end="557:51"><expr pos:start="557:43" pos:end="557:51"><name pos:start="557:43" pos:end="557:51"><name pos:start="557:43" pos:end="557:46">conn</name><operator pos:start="557:47" pos:end="557:48">-&gt;</operator><name pos:start="557:49" pos:end="557:51">ssl</name></name></expr></argument>, <argument pos:start="557:54" pos:end="557:69"><expr pos:start="557:54" pos:end="557:69"><operator pos:start="557:54" pos:end="557:54">(</operator><specifier pos:start="557:55" pos:end="557:59">const</specifier> <name pos:start="557:61" pos:end="557:64">char</name><operator pos:start="557:65" pos:end="557:65">*</operator><operator pos:start="557:66" pos:end="557:66">)</operator><name pos:start="557:67" pos:end="557:69">buf</name></expr></argument>,
                 <argument pos:start="558:18" pos:end="558:29"><expr pos:start="558:18" pos:end="558:29"><operator pos:start="558:18" pos:end="558:18">(</operator><name pos:start="558:19" pos:end="558:25">int64_t</name><operator pos:start="558:26" pos:end="558:26">)</operator><name pos:start="558:27" pos:end="558:29">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="559:5" pos:end="559:22">return <expr pos:start="559:12" pos:end="559:21"><operator pos:start="559:12" pos:end="559:12">(</operator><name pos:start="559:13" pos:end="559:15">int</name><operator pos:start="559:16" pos:end="559:16">)</operator><name pos:start="559:17" pos:end="559:21">total</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="561:1" pos:end="561:70">// Return negative value on error, or number of bytes read on success.</comment>
<function pos:start="562:1" pos:end="598:1"><type pos:start="562:1" pos:end="562:3"><name pos:start="562:1" pos:end="562:3">int</name></type> <name pos:start="562:5" pos:end="562:13">mg_printf</name> <parameter_list pos:start="562:15" pos:end="562:64">(<parameter pos:start="562:16" pos:end="562:41"><decl pos:start="562:16" pos:end="562:41"><type pos:start="562:16" pos:end="562:41"><name pos:start="562:16" pos:end="562:35"><name pos:start="562:16" pos:end="562:21">struct</name> <name pos:start="562:23" pos:end="562:35">mg_connection</name></name> <modifier pos:start="562:37" pos:end="562:37">*</modifier></type><name pos:start="562:38" pos:end="562:41">conn</name></decl></parameter>, <parameter pos:start="562:44" pos:end="562:58"><decl pos:start="562:44" pos:end="562:58"><type pos:start="562:44" pos:end="562:58"><specifier pos:start="562:44" pos:end="562:48">const</specifier> <name pos:start="562:50" pos:end="562:53">char</name> <modifier pos:start="562:55" pos:end="562:55">*</modifier></type><name pos:start="562:56" pos:end="562:58">fmt</name></decl></parameter>, <parameter pos:start="562:61" pos:end="562:63"><decl pos:start="562:61" pos:end="562:63"><type pos:start="562:61" pos:end="562:63"><modifier pos:start="562:61" pos:end="562:63">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="563:1" pos:end="598:1">{<block_content pos:start="564:5" pos:end="597:15">
    <decl_stmt pos:start="564:5" pos:end="564:37"><decl pos:start="564:5" pos:end="564:24"><type pos:start="564:5" pos:end="564:8"><name pos:start="564:5" pos:end="564:8">char</name></type> <name pos:start="564:10" pos:end="564:24"><name pos:start="564:10" pos:end="564:12">mem</name><index pos:start="564:13" pos:end="564:24">[<expr pos:start="564:14" pos:end="564:23"><name pos:start="564:14" pos:end="564:23">MG_BUF_LEN</name></expr>]</index></name></decl>, <decl pos:start="564:27" pos:end="564:36"><type ref="prev" pos:start="564:5" pos:end="564:8"><modifier pos:start="564:27" pos:end="564:27">*</modifier></type><name pos:start="564:28" pos:end="564:30">buf</name> <init pos:start="564:32" pos:end="564:36">= <expr pos:start="564:34" pos:end="564:36"><name pos:start="564:34" pos:end="564:36">mem</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="565:5" pos:end="565:12"><decl pos:start="565:5" pos:end="565:11"><type pos:start="565:5" pos:end="565:7"><name pos:start="565:5" pos:end="565:7">int</name></type> <name pos:start="565:9" pos:end="565:11">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="566:5" pos:end="566:15"><decl pos:start="566:5" pos:end="566:14"><type pos:start="566:5" pos:end="566:11"><name pos:start="566:5" pos:end="566:11">va_list</name></type> <name pos:start="566:13" pos:end="566:14">ap</name></decl>;</decl_stmt>

    <comment type="line" pos:start="568:5" pos:end="568:71">// Print in a local buffer first, hoping that it is large enough to</comment>
    <comment type="line" pos:start="569:5" pos:end="569:29">// hold the whole message</comment>
    <expr_stmt pos:start="570:5" pos:end="570:22"><expr pos:start="570:5" pos:end="570:21"><call pos:start="570:5" pos:end="570:21"><name pos:start="570:5" pos:end="570:12">va_start</name><argument_list pos:start="570:13" pos:end="570:21">(<argument pos:start="570:14" pos:end="570:15"><expr pos:start="570:14" pos:end="570:15"><name pos:start="570:14" pos:end="570:15">ap</name></expr></argument>, <argument pos:start="570:18" pos:end="570:20"><expr pos:start="570:18" pos:end="570:20"><name pos:start="570:18" pos:end="570:20">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="571:5" pos:end="571:47"><expr pos:start="571:5" pos:end="571:46"><name pos:start="571:5" pos:end="571:7">len</name> <operator pos:start="571:9" pos:end="571:9">=</operator> <call pos:start="571:11" pos:end="571:46"><name pos:start="571:11" pos:end="571:19">vsnprintf</name><argument_list pos:start="571:20" pos:end="571:46">(<argument pos:start="571:21" pos:end="571:23"><expr pos:start="571:21" pos:end="571:23"><name pos:start="571:21" pos:end="571:23">mem</name></expr></argument>, <argument pos:start="571:26" pos:end="571:36"><expr pos:start="571:26" pos:end="571:36"><sizeof pos:start="571:26" pos:end="571:36">sizeof<argument_list pos:start="571:32" pos:end="571:36">(<argument pos:start="571:33" pos:end="571:35"><expr pos:start="571:33" pos:end="571:35"><name pos:start="571:33" pos:end="571:35">mem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="571:39" pos:end="571:41"><expr pos:start="571:39" pos:end="571:41"><name pos:start="571:39" pos:end="571:41">fmt</name></expr></argument>, <argument pos:start="571:44" pos:end="571:45"><expr pos:start="571:44" pos:end="571:45"><name pos:start="571:44" pos:end="571:45">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="572:5" pos:end="572:15"><expr pos:start="572:5" pos:end="572:14"><call pos:start="572:5" pos:end="572:14"><name pos:start="572:5" pos:end="572:10">va_end</name><argument_list pos:start="572:11" pos:end="572:14">(<argument pos:start="572:12" pos:end="572:13"><expr pos:start="572:12" pos:end="572:13"><name pos:start="572:12" pos:end="572:13">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="574:5" pos:end="595:5"><if pos:start="574:5" pos:end="576:5">if <condition pos:start="574:8" pos:end="574:17">(<expr pos:start="574:9" pos:end="574:16"><name pos:start="574:9" pos:end="574:11">len</name> <operator pos:start="574:13" pos:end="574:14">==</operator> <literal type="number" pos:start="574:16" pos:end="574:16">0</literal></expr>)</condition> <block pos:start="574:19" pos:end="576:5">{<block_content>
        <comment type="line" pos:start="575:9" pos:end="575:60">// Do nothing. mg_printf(conn, "%s", "") was called.</comment>
    </block_content>}</block></if> <if type="elseif" pos:start="576:7" pos:end="580:5">else if <condition pos:start="576:15" pos:end="576:23">(<expr pos:start="576:16" pos:end="576:22"><name pos:start="576:16" pos:end="576:18">len</name> <operator pos:start="576:20" pos:end="576:20">&lt;</operator> <literal type="number" pos:start="576:22" pos:end="576:22">0</literal></expr>)</condition> <block pos:start="576:25" pos:end="580:5">{<block_content pos:start="578:9" pos:end="579:67">
        <comment type="line" pos:start="577:9" pos:end="577:37">// vsnprintf() error, give up</comment>
        <expr_stmt pos:start="578:9" pos:end="578:17"><expr pos:start="578:9" pos:end="578:16"><name pos:start="578:9" pos:end="578:11">len</name> <operator pos:start="578:13" pos:end="578:13">=</operator> <operator pos:start="578:15" pos:end="578:15">-</operator><literal type="number" pos:start="578:16" pos:end="578:16">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="579:9" pos:end="579:67"><expr pos:start="579:9" pos:end="579:66"><call pos:start="579:9" pos:end="579:66"><name pos:start="579:9" pos:end="579:11">cry</name><argument_list pos:start="579:12" pos:end="579:66">(<argument pos:start="579:13" pos:end="579:16"><expr pos:start="579:13" pos:end="579:16"><name pos:start="579:13" pos:end="579:16">conn</name></expr></argument>, <argument pos:start="579:19" pos:end="579:50"><expr pos:start="579:19" pos:end="579:50"><literal type="string" pos:start="579:19" pos:end="579:50">"%s(%s, ...): vsnprintf() error"</literal></expr></argument>, <argument pos:start="579:53" pos:end="579:60"><expr pos:start="579:53" pos:end="579:60"><name pos:start="579:53" pos:end="579:60">__func__</name></expr></argument>, <argument pos:start="579:63" pos:end="579:65"><expr pos:start="579:63" pos:end="579:65"><name pos:start="579:63" pos:end="579:65">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="580:7" pos:end="587:5">else if <condition pos:start="580:15" pos:end="580:80">(<expr pos:start="580:16" pos:end="580:79"><name pos:start="580:16" pos:end="580:18">len</name> <operator pos:start="580:20" pos:end="580:20">&gt;</operator> <operator pos:start="580:22" pos:end="580:22">(</operator><name pos:start="580:23" pos:end="580:25">int</name><operator pos:start="580:26" pos:end="580:26">)</operator><sizeof pos:start="580:27" pos:end="580:37">sizeof<argument_list pos:start="580:33" pos:end="580:37">(<argument pos:start="580:34" pos:end="580:36"><expr pos:start="580:34" pos:end="580:36"><name pos:start="580:34" pos:end="580:36">mem</name></expr></argument>)</argument_list></sizeof> <operator pos:start="580:39" pos:end="580:40">&amp;&amp;</operator> <operator pos:start="580:42" pos:end="580:42">(</operator><name pos:start="580:43" pos:end="580:45">buf</name> <operator pos:start="580:47" pos:end="580:47">=</operator> <operator pos:start="580:49" pos:end="580:49">(</operator><name pos:start="580:50" pos:end="580:53">char</name><operator pos:start="580:54" pos:end="580:54">*</operator><operator pos:start="580:55" pos:end="580:55">)</operator><call pos:start="580:56" pos:end="580:70"><name pos:start="580:56" pos:end="580:61">malloc</name><argument_list pos:start="580:62" pos:end="580:70">(<argument pos:start="580:63" pos:end="580:69"><expr pos:start="580:63" pos:end="580:69"><name pos:start="580:63" pos:end="580:65">len</name> <operator pos:start="580:67" pos:end="580:67">+</operator> <literal type="number" pos:start="580:69" pos:end="580:69">1</literal></expr></argument>)</argument_list></call><operator pos:start="580:71" pos:end="580:71">)</operator> <operator pos:start="580:73" pos:end="580:74">!=</operator> <name pos:start="580:76" pos:end="580:79">NULL</name></expr>)</condition> <block pos:start="580:82" pos:end="587:5">{<block_content pos:start="582:9" pos:end="586:18">
        <comment type="line" pos:start="581:9" pos:end="581:72">// Local buffer is not large enough, allocate big buffer on heap</comment>
        <expr_stmt pos:start="582:9" pos:end="582:26"><expr pos:start="582:9" pos:end="582:25"><call pos:start="582:9" pos:end="582:25"><name pos:start="582:9" pos:end="582:16">va_start</name><argument_list pos:start="582:17" pos:end="582:25">(<argument pos:start="582:18" pos:end="582:19"><expr pos:start="582:18" pos:end="582:19"><name pos:start="582:18" pos:end="582:19">ap</name></expr></argument>, <argument pos:start="582:22" pos:end="582:24"><expr pos:start="582:22" pos:end="582:24"><name pos:start="582:22" pos:end="582:24">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="583:9" pos:end="583:41"><expr pos:start="583:9" pos:end="583:40"><call pos:start="583:9" pos:end="583:40"><name pos:start="583:9" pos:end="583:17">vsnprintf</name><argument_list pos:start="583:18" pos:end="583:40">(<argument pos:start="583:19" pos:end="583:21"><expr pos:start="583:19" pos:end="583:21"><name pos:start="583:19" pos:end="583:21">buf</name></expr></argument>, <argument pos:start="583:24" pos:end="583:30"><expr pos:start="583:24" pos:end="583:30"><name pos:start="583:24" pos:end="583:26">len</name> <operator pos:start="583:28" pos:end="583:28">+</operator> <literal type="number" pos:start="583:30" pos:end="583:30">1</literal></expr></argument>, <argument pos:start="583:33" pos:end="583:35"><expr pos:start="583:33" pos:end="583:35"><name pos:start="583:33" pos:end="583:35">fmt</name></expr></argument>, <argument pos:start="583:38" pos:end="583:39"><expr pos:start="583:38" pos:end="583:39"><name pos:start="583:38" pos:end="583:39">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="584:9" pos:end="584:19"><expr pos:start="584:9" pos:end="584:18"><call pos:start="584:9" pos:end="584:18"><name pos:start="584:9" pos:end="584:14">va_end</name><argument_list pos:start="584:15" pos:end="584:18">(<argument pos:start="584:16" pos:end="584:17"><expr pos:start="584:16" pos:end="584:17"><name pos:start="584:16" pos:end="584:17">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="585:9" pos:end="585:47"><expr pos:start="585:9" pos:end="585:46"><name pos:start="585:9" pos:end="585:11">len</name> <operator pos:start="585:13" pos:end="585:13">=</operator> <call pos:start="585:15" pos:end="585:46"><name pos:start="585:15" pos:end="585:22">mg_write</name><argument_list pos:start="585:23" pos:end="585:46">(<argument pos:start="585:24" pos:end="585:27"><expr pos:start="585:24" pos:end="585:27"><name pos:start="585:24" pos:end="585:27">conn</name></expr></argument>, <argument pos:start="585:30" pos:end="585:32"><expr pos:start="585:30" pos:end="585:32"><name pos:start="585:30" pos:end="585:32">buf</name></expr></argument>, <argument pos:start="585:35" pos:end="585:45"><expr pos:start="585:35" pos:end="585:45"><operator pos:start="585:35" pos:end="585:35">(</operator><name pos:start="585:36" pos:end="585:41">size_t</name><operator pos:start="585:42" pos:end="585:42">)</operator><name pos:start="585:43" pos:end="585:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="586:9" pos:end="586:18"><expr pos:start="586:9" pos:end="586:17"><call pos:start="586:9" pos:end="586:17"><name pos:start="586:9" pos:end="586:12">free</name><argument_list pos:start="586:13" pos:end="586:17">(<argument pos:start="586:14" pos:end="586:16"><expr pos:start="586:14" pos:end="586:16"><name pos:start="586:14" pos:end="586:16">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="587:7" pos:end="592:5">else if <condition pos:start="587:15" pos:end="587:38">(<expr pos:start="587:16" pos:end="587:37"><name pos:start="587:16" pos:end="587:18">len</name> <operator pos:start="587:20" pos:end="587:20">&gt;</operator> <operator pos:start="587:22" pos:end="587:22">(</operator><name pos:start="587:23" pos:end="587:25">int</name><operator pos:start="587:26" pos:end="587:26">)</operator><sizeof pos:start="587:27" pos:end="587:37">sizeof<argument_list pos:start="587:33" pos:end="587:37">(<argument pos:start="587:34" pos:end="587:36"><expr pos:start="587:34" pos:end="587:36"><name pos:start="587:34" pos:end="587:36">mem</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="587:40" pos:end="592:5">{<block_content pos:start="589:9" pos:end="591:17">
        <comment type="line" pos:start="588:9" pos:end="588:58">// Failed to allocate large enough buffer, give up</comment>
        <expr_stmt pos:start="589:9" pos:end="590:32"><expr pos:start="589:9" pos:end="590:31"><call pos:start="589:9" pos:end="590:31"><name pos:start="589:9" pos:end="589:11">cry</name><argument_list pos:start="589:12" pos:end="590:31">(<argument pos:start="589:13" pos:end="589:16"><expr pos:start="589:13" pos:end="589:16"><name pos:start="589:13" pos:end="589:16">conn</name></expr></argument>, <argument pos:start="589:19" pos:end="589:79"><expr pos:start="589:19" pos:end="589:79"><literal type="string" pos:start="589:19" pos:end="589:79">"%s(%s, ...): Can't allocate %d bytes, not printing anything"</literal></expr></argument>,
            <argument pos:start="590:13" pos:end="590:20"><expr pos:start="590:13" pos:end="590:20"><name pos:start="590:13" pos:end="590:20">__func__</name></expr></argument>, <argument pos:start="590:23" pos:end="590:25"><expr pos:start="590:23" pos:end="590:25"><name pos:start="590:23" pos:end="590:25">fmt</name></expr></argument>, <argument pos:start="590:28" pos:end="590:30"><expr pos:start="590:28" pos:end="590:30"><name pos:start="590:28" pos:end="590:30">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="591:9" pos:end="591:17"><expr pos:start="591:9" pos:end="591:16"><name pos:start="591:9" pos:end="591:11">len</name> <operator pos:start="591:13" pos:end="591:13">=</operator> <operator pos:start="591:15" pos:end="591:15">-</operator><literal type="number" pos:start="591:16" pos:end="591:16">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="592:7" pos:end="595:5">else <block pos:start="592:12" pos:end="595:5">{<block_content pos:start="594:9" pos:end="594:47">
        <comment type="line" pos:start="593:9" pos:end="593:45">// Copy to the local buffer succeeded</comment>
        <expr_stmt pos:start="594:9" pos:end="594:47"><expr pos:start="594:9" pos:end="594:46"><name pos:start="594:9" pos:end="594:11">len</name> <operator pos:start="594:13" pos:end="594:13">=</operator> <call pos:start="594:15" pos:end="594:46"><name pos:start="594:15" pos:end="594:22">mg_write</name><argument_list pos:start="594:23" pos:end="594:46">(<argument pos:start="594:24" pos:end="594:27"><expr pos:start="594:24" pos:end="594:27"><name pos:start="594:24" pos:end="594:27">conn</name></expr></argument>, <argument pos:start="594:30" pos:end="594:32"><expr pos:start="594:30" pos:end="594:32"><name pos:start="594:30" pos:end="594:32">buf</name></expr></argument>, <argument pos:start="594:35" pos:end="594:45"><expr pos:start="594:35" pos:end="594:45"><operator pos:start="594:35" pos:end="594:35">(</operator><name pos:start="594:36" pos:end="594:41">size_t</name><operator pos:start="594:42" pos:end="594:42">)</operator><name pos:start="594:43" pos:end="594:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return pos:start="597:5" pos:end="597:15">return <expr pos:start="597:12" pos:end="597:14"><name pos:start="597:12" pos:end="597:14">len</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="599:1" pos:end="599:51">// http://ftp.ics.uci.edu/pub/ietf/html/rfc1866.txt</comment>
<function pos:start="600:1" pos:end="625:1"><type pos:start="600:1" pos:end="600:10"><specifier pos:start="600:1" pos:end="600:6">static</specifier> <name pos:start="600:8" pos:end="600:10">int</name></type> <name pos:start="600:12" pos:end="600:21">url_decode</name> <parameter_list pos:start="600:23" pos:end="601:60">(<parameter pos:start="600:24" pos:end="600:38"><decl pos:start="600:24" pos:end="600:38"><type pos:start="600:24" pos:end="600:38"><specifier pos:start="600:24" pos:end="600:28">const</specifier> <name pos:start="600:30" pos:end="600:33">char</name> <modifier pos:start="600:35" pos:end="600:35">*</modifier></type><name pos:start="600:36" pos:end="600:38">src</name></decl></parameter>, <parameter pos:start="600:41" pos:end="600:51"><decl pos:start="600:41" pos:end="600:51"><type pos:start="600:41" pos:end="600:51"><name pos:start="600:41" pos:end="600:43">int</name></type> <name pos:start="600:45" pos:end="600:51">src_len</name></decl></parameter>, <parameter pos:start="600:54" pos:end="600:62"><decl pos:start="600:54" pos:end="600:62"><type pos:start="600:54" pos:end="600:62"><name pos:start="600:54" pos:end="600:57">char</name> <modifier pos:start="600:59" pos:end="600:59">*</modifier></type><name pos:start="600:60" pos:end="600:62">dst</name></decl></parameter>,
                       <parameter pos:start="601:24" pos:end="601:34"><decl pos:start="601:24" pos:end="601:34"><type pos:start="601:24" pos:end="601:34"><name pos:start="601:24" pos:end="601:26">int</name></type> <name pos:start="601:28" pos:end="601:34">dst_len</name></decl></parameter>, <parameter pos:start="601:37" pos:end="601:59"><decl pos:start="601:37" pos:end="601:59"><type pos:start="601:37" pos:end="601:59"><name pos:start="601:37" pos:end="601:39">int</name></type> <name pos:start="601:41" pos:end="601:59">is_form_url_encoded</name></decl></parameter>)</parameter_list>
<block pos:start="602:1" pos:end="625:1">{<block_content pos:start="603:5" pos:end="624:33">
    <decl_stmt pos:start="603:5" pos:end="606:0"><decl pos:start="603:5" pos:end="603:9"><type pos:start="603:5" pos:end="603:7"><name pos:start="603:5" pos:end="603:7">int</name></type> <name pos:start="603:9" pos:end="603:9">i</name></decl>, <decl pos:start="603:12" pos:end="603:12"><type ref="prev" pos:start="603:5" pos:end="603:7"/><name pos:start="603:12" pos:end="603:12">j</name></decl>, <decl pos:start="603:15" pos:end="603:15"><type ref="prev" pos:start="603:5" pos:end="603:7"/><name pos:start="603:15" pos:end="603:15">a</name></decl>, <decl pos:start="603:18" pos:end="603:18"><type ref="prev" pos:start="603:5" pos:end="603:7"/><name pos:start="603:18" pos:end="603:18">b</name></decl>;</decl_stmt>

<cpp:define pos:start="605:1" pos:end="605:50">#<cpp:directive pos:start="605:2" pos:end="605:7">define</cpp:directive> <cpp:macro pos:start="605:9" pos:end="605:17"><name pos:start="605:9" pos:end="605:14">HEXTOI</name><parameter_list pos:start="605:15" pos:end="605:17">(<parameter pos:start="605:16" pos:end="605:16"><type pos:start="605:16" pos:end="605:16"><name pos:start="605:16" pos:end="605:16">x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="605:19" pos:end="605:50">(isdigit(x) ? x - '0' : x - 'W')</cpp:value></cpp:define>

    <for pos:start="607:5" pos:end="620:5">for <control pos:start="607:9" pos:end="607:61">(<init pos:start="607:10" pos:end="607:19"><expr pos:start="607:10" pos:end="607:18"><name pos:start="607:10" pos:end="607:10">i</name> <operator pos:start="607:12" pos:end="607:12">=</operator> <name pos:start="607:14" pos:end="607:14">j</name> <operator pos:start="607:16" pos:end="607:16">=</operator> <literal type="number" pos:start="607:18" pos:end="607:18">0</literal></expr>;</init> <condition pos:start="607:21" pos:end="607:51"><expr pos:start="607:21" pos:end="607:50"><name pos:start="607:21" pos:end="607:21">i</name> <operator pos:start="607:23" pos:end="607:23">&lt;</operator> <name pos:start="607:25" pos:end="607:31">src_len</name> <operator pos:start="607:33" pos:end="607:34">&amp;&amp;</operator> <name pos:start="607:36" pos:end="607:36">j</name> <operator pos:start="607:38" pos:end="607:38">&lt;</operator> <name pos:start="607:40" pos:end="607:46">dst_len</name> <operator pos:start="607:48" pos:end="607:48">-</operator> <literal type="number" pos:start="607:50" pos:end="607:50">1</literal></expr>;</condition> <incr pos:start="607:53" pos:end="607:60"><expr pos:start="607:53" pos:end="607:55"><name pos:start="607:53" pos:end="607:53">i</name><operator pos:start="607:54" pos:end="607:55">++</operator></expr><operator pos:start="607:56" pos:end="607:56">,</operator> <expr pos:start="607:58" pos:end="607:60"><name pos:start="607:58" pos:end="607:58">j</name><operator pos:start="607:59" pos:end="607:60">++</operator></expr></incr>)</control> <block pos:start="607:63" pos:end="620:5">{<block_content pos:start="608:9" pos:end="619:9">
        <if_stmt pos:start="608:9" pos:end="619:9"><if pos:start="608:9" pos:end="615:9">if <condition pos:start="608:12" pos:end="610:59">(<expr pos:start="608:13" pos:end="610:58"><name pos:start="608:13" pos:end="608:18"><name pos:start="608:13" pos:end="608:15">src</name><index pos:start="608:16" pos:end="608:18">[<expr pos:start="608:17" pos:end="608:17"><name pos:start="608:17" pos:end="608:17">i</name></expr>]</index></name> <operator pos:start="608:20" pos:end="608:21">==</operator> <literal type="char" pos:start="608:23" pos:end="608:25">'%'</literal> <operator pos:start="608:27" pos:end="608:28">&amp;&amp;</operator>
            <call pos:start="609:13" pos:end="609:58"><name pos:start="609:13" pos:end="609:20">isxdigit</name><argument_list pos:start="609:21" pos:end="609:58">(<argument pos:start="609:22" pos:end="609:57"><expr pos:start="609:22" pos:end="609:57"><operator pos:start="609:22" pos:end="609:22">*</operator><operator pos:start="609:23" pos:end="609:23">(</operator><specifier pos:start="609:24" pos:end="609:28">const</specifier> <name pos:start="609:30" pos:end="609:37">unsigned</name> <name pos:start="609:39" pos:end="609:42">char</name><operator pos:start="609:43" pos:end="609:43">*</operator><operator pos:start="609:44" pos:end="609:44">)</operator><operator pos:start="609:45" pos:end="609:45">(</operator><name pos:start="609:46" pos:end="609:48">src</name> <operator pos:start="609:50" pos:end="609:50">+</operator> <name pos:start="609:52" pos:end="609:52">i</name> <operator pos:start="609:54" pos:end="609:54">+</operator> <literal type="number" pos:start="609:56" pos:end="609:56">1</literal><operator pos:start="609:57" pos:end="609:57">)</operator></expr></argument>)</argument_list></call> <operator pos:start="609:60" pos:end="609:61">&amp;&amp;</operator>
            <call pos:start="610:13" pos:end="610:58"><name pos:start="610:13" pos:end="610:20">isxdigit</name><argument_list pos:start="610:21" pos:end="610:58">(<argument pos:start="610:22" pos:end="610:57"><expr pos:start="610:22" pos:end="610:57"><operator pos:start="610:22" pos:end="610:22">*</operator><operator pos:start="610:23" pos:end="610:23">(</operator><specifier pos:start="610:24" pos:end="610:28">const</specifier> <name pos:start="610:30" pos:end="610:37">unsigned</name> <name pos:start="610:39" pos:end="610:42">char</name><operator pos:start="610:43" pos:end="610:43">*</operator><operator pos:start="610:44" pos:end="610:44">)</operator><operator pos:start="610:45" pos:end="610:45">(</operator><name pos:start="610:46" pos:end="610:48">src</name> <operator pos:start="610:50" pos:end="610:50">+</operator> <name pos:start="610:52" pos:end="610:52">i</name> <operator pos:start="610:54" pos:end="610:54">+</operator> <literal type="number" pos:start="610:56" pos:end="610:56">2</literal><operator pos:start="610:57" pos:end="610:57">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="610:61" pos:end="615:9">{<block_content pos:start="611:13" pos:end="614:19">
            <expr_stmt pos:start="611:13" pos:end="611:62"><expr pos:start="611:13" pos:end="611:61"><name pos:start="611:13" pos:end="611:13">a</name> <operator pos:start="611:15" pos:end="611:15">=</operator> <call pos:start="611:17" pos:end="611:61"><name pos:start="611:17" pos:end="611:23">tolower</name><argument_list pos:start="611:24" pos:end="611:61">(<argument pos:start="611:25" pos:end="611:60"><expr pos:start="611:25" pos:end="611:60"><operator pos:start="611:25" pos:end="611:25">*</operator><operator pos:start="611:26" pos:end="611:26">(</operator><specifier pos:start="611:27" pos:end="611:31">const</specifier> <name pos:start="611:33" pos:end="611:40">unsigned</name> <name pos:start="611:42" pos:end="611:45">char</name><operator pos:start="611:46" pos:end="611:46">*</operator><operator pos:start="611:47" pos:end="611:47">)</operator><operator pos:start="611:48" pos:end="611:48">(</operator><name pos:start="611:49" pos:end="611:51">src</name> <operator pos:start="611:53" pos:end="611:53">+</operator> <name pos:start="611:55" pos:end="611:55">i</name> <operator pos:start="611:57" pos:end="611:57">+</operator> <literal type="number" pos:start="611:59" pos:end="611:59">1</literal><operator pos:start="611:60" pos:end="611:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="612:13" pos:end="612:62"><expr pos:start="612:13" pos:end="612:61"><name pos:start="612:13" pos:end="612:13">b</name> <operator pos:start="612:15" pos:end="612:15">=</operator> <call pos:start="612:17" pos:end="612:61"><name pos:start="612:17" pos:end="612:23">tolower</name><argument_list pos:start="612:24" pos:end="612:61">(<argument pos:start="612:25" pos:end="612:60"><expr pos:start="612:25" pos:end="612:60"><operator pos:start="612:25" pos:end="612:25">*</operator><operator pos:start="612:26" pos:end="612:26">(</operator><specifier pos:start="612:27" pos:end="612:31">const</specifier> <name pos:start="612:33" pos:end="612:40">unsigned</name> <name pos:start="612:42" pos:end="612:45">char</name><operator pos:start="612:46" pos:end="612:46">*</operator><operator pos:start="612:47" pos:end="612:47">)</operator><operator pos:start="612:48" pos:end="612:48">(</operator><name pos:start="612:49" pos:end="612:51">src</name> <operator pos:start="612:53" pos:end="612:53">+</operator> <name pos:start="612:55" pos:end="612:55">i</name> <operator pos:start="612:57" pos:end="612:57">+</operator> <literal type="number" pos:start="612:59" pos:end="612:59">2</literal><operator pos:start="612:60" pos:end="612:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="613:13" pos:end="613:58"><expr pos:start="613:13" pos:end="613:57"><name pos:start="613:13" pos:end="613:18"><name pos:start="613:13" pos:end="613:15">dst</name><index pos:start="613:16" pos:end="613:18">[<expr pos:start="613:17" pos:end="613:17"><name pos:start="613:17" pos:end="613:17">j</name></expr>]</index></name> <operator pos:start="613:20" pos:end="613:20">=</operator> <operator pos:start="613:22" pos:end="613:22">(</operator><name pos:start="613:23" pos:end="613:26">char</name><operator pos:start="613:27" pos:end="613:27">)</operator><operator pos:start="613:28" pos:end="613:28">(</operator><operator pos:start="613:29" pos:end="613:29">(</operator><call pos:start="613:30" pos:end="613:38"><name pos:start="613:30" pos:end="613:35">HEXTOI</name><argument_list pos:start="613:36" pos:end="613:38">(<argument pos:start="613:37" pos:end="613:37"><expr pos:start="613:37" pos:end="613:37"><name pos:start="613:37" pos:end="613:37">a</name></expr></argument>)</argument_list></call> <operator pos:start="613:40" pos:end="613:41">&lt;&lt;</operator> <literal type="number" pos:start="613:43" pos:end="613:43">4</literal><operator pos:start="613:44" pos:end="613:44">)</operator> <operator pos:start="613:46" pos:end="613:46">|</operator> <call pos:start="613:48" pos:end="613:56"><name pos:start="613:48" pos:end="613:53">HEXTOI</name><argument_list pos:start="613:54" pos:end="613:56">(<argument pos:start="613:55" pos:end="613:55"><expr pos:start="613:55" pos:end="613:55"><name pos:start="613:55" pos:end="613:55">b</name></expr></argument>)</argument_list></call><operator pos:start="613:57" pos:end="613:57">)</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="614:13" pos:end="614:19"><expr pos:start="614:13" pos:end="614:18"><name pos:start="614:13" pos:end="614:13">i</name> <operator pos:start="614:15" pos:end="614:16">+=</operator> <literal type="number" pos:start="614:18" pos:end="614:18">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="615:11" pos:end="617:9">else if <condition pos:start="615:19" pos:end="615:56">(<expr pos:start="615:20" pos:end="615:55"><name pos:start="615:20" pos:end="615:38">is_form_url_encoded</name> <operator pos:start="615:40" pos:end="615:41">&amp;&amp;</operator> <name pos:start="615:43" pos:end="615:48"><name pos:start="615:43" pos:end="615:45">src</name><index pos:start="615:46" pos:end="615:48">[<expr pos:start="615:47" pos:end="615:47"><name pos:start="615:47" pos:end="615:47">i</name></expr>]</index></name> <operator pos:start="615:50" pos:end="615:51">==</operator> <literal type="char" pos:start="615:53" pos:end="615:55">'+'</literal></expr>)</condition> <block pos:start="615:58" pos:end="617:9">{<block_content pos:start="616:13" pos:end="616:25">
            <expr_stmt pos:start="616:13" pos:end="616:25"><expr pos:start="616:13" pos:end="616:24"><name pos:start="616:13" pos:end="616:18"><name pos:start="616:13" pos:end="616:15">dst</name><index pos:start="616:16" pos:end="616:18">[<expr pos:start="616:17" pos:end="616:17"><name pos:start="616:17" pos:end="616:17">j</name></expr>]</index></name> <operator pos:start="616:20" pos:end="616:20">=</operator> <literal type="char" pos:start="616:22" pos:end="616:24">' '</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="617:11" pos:end="619:9">else <block pos:start="617:16" pos:end="619:9">{<block_content pos:start="618:13" pos:end="618:28">
            <expr_stmt pos:start="618:13" pos:end="618:28"><expr pos:start="618:13" pos:end="618:27"><name pos:start="618:13" pos:end="618:18"><name pos:start="618:13" pos:end="618:15">dst</name><index pos:start="618:16" pos:end="618:18">[<expr pos:start="618:17" pos:end="618:17"><name pos:start="618:17" pos:end="618:17">j</name></expr>]</index></name> <operator pos:start="618:20" pos:end="618:20">=</operator> <name pos:start="618:22" pos:end="618:27"><name pos:start="618:22" pos:end="618:24">src</name><index pos:start="618:25" pos:end="618:27">[<expr pos:start="618:26" pos:end="618:26"><name pos:start="618:26" pos:end="618:26">i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt pos:start="622:5" pos:end="622:18"><expr pos:start="622:5" pos:end="622:17"><name pos:start="622:5" pos:end="622:10"><name pos:start="622:5" pos:end="622:7">dst</name><index pos:start="622:8" pos:end="622:10">[<expr pos:start="622:9" pos:end="622:9"><name pos:start="622:9" pos:end="622:9">j</name></expr>]</index></name> <operator pos:start="622:12" pos:end="622:12">=</operator> <literal type="char" pos:start="622:14" pos:end="622:17">'\0'</literal></expr>;</expr_stmt> <comment type="line" pos:start="622:20" pos:end="622:52">// Null-terminate the destination</comment>

    <return pos:start="624:5" pos:end="624:33">return <expr pos:start="624:12" pos:end="624:32"><ternary pos:start="624:12" pos:end="624:32"><condition pos:start="624:12" pos:end="624:25"><expr pos:start="624:12" pos:end="624:23"><name pos:start="624:12" pos:end="624:12">i</name> <operator pos:start="624:14" pos:end="624:15">&gt;=</operator> <name pos:start="624:17" pos:end="624:23">src_len</name></expr> ?</condition><then pos:start="624:27" pos:end="624:27"> <expr pos:start="624:27" pos:end="624:27"><name pos:start="624:27" pos:end="624:27">j</name></expr> </then><else pos:start="624:29" pos:end="624:32">: <expr pos:start="624:31" pos:end="624:32"><operator pos:start="624:31" pos:end="624:31">-</operator><literal type="number" pos:start="624:32" pos:end="624:32">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="626:1" pos:end="626:55">//   &gt;0  actual request length, including last \r\n\r\n</comment>
<function pos:start="627:1" pos:end="647:1"><type pos:start="627:1" pos:end="627:10"><specifier pos:start="627:1" pos:end="627:6">static</specifier> <name pos:start="627:8" pos:end="627:10">int</name></type> <name pos:start="627:12" pos:end="627:26">get_request_len</name> <parameter_list pos:start="627:28" pos:end="627:56">(<parameter pos:start="627:29" pos:end="627:43"><decl pos:start="627:29" pos:end="627:43"><type pos:start="627:29" pos:end="627:43"><specifier pos:start="627:29" pos:end="627:33">const</specifier> <name pos:start="627:35" pos:end="627:38">char</name> <modifier pos:start="627:40" pos:end="627:40">*</modifier></type><name pos:start="627:41" pos:end="627:43">buf</name></decl></parameter>, <parameter pos:start="627:46" pos:end="627:55"><decl pos:start="627:46" pos:end="627:55"><type pos:start="627:46" pos:end="627:55"><name pos:start="627:46" pos:end="627:48">int</name></type> <name pos:start="627:50" pos:end="627:55">buflen</name></decl></parameter>)</parameter_list>
<block pos:start="628:1" pos:end="647:1">{<block_content pos:start="629:5" pos:end="646:15">
    <decl_stmt pos:start="629:5" pos:end="629:22"><decl pos:start="629:5" pos:end="629:17"><type pos:start="629:5" pos:end="629:16"><specifier pos:start="629:5" pos:end="629:9">const</specifier> <name pos:start="629:11" pos:end="629:14">char</name> <modifier pos:start="629:16" pos:end="629:16">*</modifier></type><name pos:start="629:17" pos:end="629:17">s</name></decl>, <decl pos:start="629:20" pos:end="629:21"><type ref="prev" pos:start="629:5" pos:end="629:16"><modifier pos:start="629:20" pos:end="629:20">*</modifier></type><name pos:start="629:21" pos:end="629:21">e</name></decl>;</decl_stmt>
    <decl_stmt pos:start="630:5" pos:end="630:16"><decl pos:start="630:5" pos:end="630:15"><type pos:start="630:5" pos:end="630:7"><name pos:start="630:5" pos:end="630:7">int</name></type> <name pos:start="630:9" pos:end="630:11">len</name> <init pos:start="630:13" pos:end="630:15">= <expr pos:start="630:15" pos:end="630:15"><literal type="number" pos:start="630:15" pos:end="630:15">0</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="632:5" pos:end="644:5">for <control pos:start="632:9" pos:end="632:61">(<init pos:start="632:10" pos:end="632:37"><expr pos:start="632:10" pos:end="632:16"><name pos:start="632:10" pos:end="632:10">s</name> <operator pos:start="632:12" pos:end="632:12">=</operator> <name pos:start="632:14" pos:end="632:16">buf</name></expr><operator pos:start="632:17" pos:end="632:17">,</operator> <expr pos:start="632:19" pos:end="632:36"><name pos:start="632:19" pos:end="632:19">e</name> <operator pos:start="632:21" pos:end="632:21">=</operator> <name pos:start="632:23" pos:end="632:23">s</name> <operator pos:start="632:25" pos:end="632:25">+</operator> <name pos:start="632:27" pos:end="632:32">buflen</name> <operator pos:start="632:34" pos:end="632:34">-</operator> <literal type="number" pos:start="632:36" pos:end="632:36">1</literal></expr>;</init> <condition pos:start="632:39" pos:end="632:56"><expr pos:start="632:39" pos:end="632:55"><name pos:start="632:39" pos:end="632:41">len</name> <operator pos:start="632:43" pos:end="632:44">&lt;=</operator> <literal type="number" pos:start="632:46" pos:end="632:46">0</literal> <operator pos:start="632:48" pos:end="632:49">&amp;&amp;</operator> <name pos:start="632:51" pos:end="632:51">s</name> <operator pos:start="632:53" pos:end="632:53">&lt;</operator> <name pos:start="632:55" pos:end="632:55">e</name></expr>;</condition> <incr pos:start="632:58" pos:end="632:60"><expr pos:start="632:58" pos:end="632:60"><name pos:start="632:58" pos:end="632:58">s</name><operator pos:start="632:59" pos:end="632:60">++</operator></expr></incr>)</control> <block pos:start="632:63" pos:end="644:5">{<block_content pos:start="634:9" pos:end="643:9">
        <comment type="line" pos:start="633:9" pos:end="633:59">// Control characters are not allowed but &gt;=128 is.</comment>
        <if_stmt pos:start="634:9" pos:end="643:9"><if pos:start="634:9" pos:end="638:9">if <condition pos:start="634:12" pos:end="635:57">(<expr pos:start="634:13" pos:end="635:56"><operator pos:start="634:13" pos:end="634:13">!</operator><call pos:start="634:14" pos:end="634:46"><name pos:start="634:14" pos:end="634:20">isprint</name><argument_list pos:start="634:21" pos:end="634:46">(<argument pos:start="634:22" pos:end="634:45"><expr pos:start="634:22" pos:end="634:45"><operator pos:start="634:22" pos:end="634:22">*</operator><operator pos:start="634:23" pos:end="634:23">(</operator><specifier pos:start="634:24" pos:end="634:28">const</specifier> <name pos:start="634:30" pos:end="634:37">unsigned</name> <name pos:start="634:39" pos:end="634:42">char</name><operator pos:start="634:43" pos:end="634:43">*</operator><operator pos:start="634:44" pos:end="634:44">)</operator><name pos:start="634:45" pos:end="634:45">s</name></expr></argument>)</argument_list></call> <operator pos:start="634:48" pos:end="634:49">&amp;&amp;</operator> <operator pos:start="634:51" pos:end="634:51">*</operator><name pos:start="634:52" pos:end="634:52">s</name> <operator pos:start="634:54" pos:end="634:55">!=</operator> <literal type="char" pos:start="634:57" pos:end="634:60">'\r'</literal> <operator pos:start="634:62" pos:end="634:63">&amp;&amp;</operator>
            <operator pos:start="635:13" pos:end="635:13">*</operator><name pos:start="635:14" pos:end="635:14">s</name> <operator pos:start="635:16" pos:end="635:17">!=</operator> <literal type="char" pos:start="635:19" pos:end="635:22">'\n'</literal> <operator pos:start="635:24" pos:end="635:25">&amp;&amp;</operator> <operator pos:start="635:27" pos:end="635:27">*</operator><operator pos:start="635:28" pos:end="635:28">(</operator><specifier pos:start="635:29" pos:end="635:33">const</specifier> <name pos:start="635:35" pos:end="635:42">unsigned</name> <name pos:start="635:44" pos:end="635:47">char</name><operator pos:start="635:48" pos:end="635:48">*</operator><operator pos:start="635:49" pos:end="635:49">)</operator><name pos:start="635:50" pos:end="635:50">s</name> <operator pos:start="635:52" pos:end="635:52">&lt;</operator> <literal type="number" pos:start="635:54" pos:end="635:56">128</literal></expr>)</condition> <block pos:start="635:59" pos:end="638:9">{<block_content pos:start="636:13" pos:end="637:18">
            <expr_stmt pos:start="636:13" pos:end="636:21"><expr pos:start="636:13" pos:end="636:20"><name pos:start="636:13" pos:end="636:15">len</name> <operator pos:start="636:17" pos:end="636:17">=</operator> <operator pos:start="636:19" pos:end="636:19">-</operator><literal type="number" pos:start="636:20" pos:end="636:20">1</literal></expr>;</expr_stmt>
            <break pos:start="637:13" pos:end="637:18">break;</break> <comment type="line" pos:start="637:20" pos:end="637:132">// [i_a] abort scan as soon as one malformed character is found; don't let subsequent \r\n\r\n win us over anyhow</comment>
        </block_content>}</block></if> <if type="elseif" pos:start="638:11" pos:end="640:9">else if <condition pos:start="638:19" pos:end="638:48">(<expr pos:start="638:20" pos:end="638:47"><name pos:start="638:20" pos:end="638:23"><name pos:start="638:20" pos:end="638:20">s</name><index pos:start="638:21" pos:end="638:23">[<expr pos:start="638:22" pos:end="638:22"><literal type="number" pos:start="638:22" pos:end="638:22">0</literal></expr>]</index></name> <operator pos:start="638:25" pos:end="638:26">==</operator> <literal type="char" pos:start="638:28" pos:end="638:31">'\n'</literal> <operator pos:start="638:33" pos:end="638:34">&amp;&amp;</operator> <name pos:start="638:36" pos:end="638:39"><name pos:start="638:36" pos:end="638:36">s</name><index pos:start="638:37" pos:end="638:39">[<expr pos:start="638:38" pos:end="638:38"><literal type="number" pos:start="638:38" pos:end="638:38">1</literal></expr>]</index></name> <operator pos:start="638:41" pos:end="638:42">==</operator> <literal type="char" pos:start="638:44" pos:end="638:47">'\n'</literal></expr>)</condition> <block pos:start="638:50" pos:end="640:9">{<block_content pos:start="639:13" pos:end="639:37">
            <expr_stmt pos:start="639:13" pos:end="639:37"><expr pos:start="639:13" pos:end="639:36"><name pos:start="639:13" pos:end="639:15">len</name> <operator pos:start="639:17" pos:end="639:17">=</operator> <operator pos:start="639:19" pos:end="639:19">(</operator><name pos:start="639:20" pos:end="639:22">int</name><operator pos:start="639:23" pos:end="639:23">)</operator><operator pos:start="639:24" pos:end="639:24">(</operator><name pos:start="639:25" pos:end="639:25">s</name> <operator pos:start="639:27" pos:end="639:27">-</operator> <name pos:start="639:29" pos:end="639:31">buf</name><operator pos:start="639:32" pos:end="639:32">)</operator> <operator pos:start="639:34" pos:end="639:34">+</operator> <literal type="number" pos:start="639:36" pos:end="639:36">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="640:11" pos:end="643:9">else if <condition pos:start="640:19" pos:end="641:48">(<expr pos:start="640:20" pos:end="641:47"><name pos:start="640:20" pos:end="640:23"><name pos:start="640:20" pos:end="640:20">s</name><index pos:start="640:21" pos:end="640:23">[<expr pos:start="640:22" pos:end="640:22"><literal type="number" pos:start="640:22" pos:end="640:22">0</literal></expr>]</index></name> <operator pos:start="640:25" pos:end="640:26">==</operator> <literal type="char" pos:start="640:28" pos:end="640:31">'\n'</literal> <operator pos:start="640:33" pos:end="640:34">&amp;&amp;</operator> <operator pos:start="640:36" pos:end="640:36">&amp;</operator><name pos:start="640:37" pos:end="640:40"><name pos:start="640:37" pos:end="640:37">s</name><index pos:start="640:38" pos:end="640:40">[<expr pos:start="640:39" pos:end="640:39"><literal type="number" pos:start="640:39" pos:end="640:39">1</literal></expr>]</index></name> <operator pos:start="640:42" pos:end="640:42">&lt;</operator> <name pos:start="640:44" pos:end="640:44">e</name> <operator pos:start="640:46" pos:end="640:47">&amp;&amp;</operator>
                   <name pos:start="641:20" pos:end="641:23"><name pos:start="641:20" pos:end="641:20">s</name><index pos:start="641:21" pos:end="641:23">[<expr pos:start="641:22" pos:end="641:22"><literal type="number" pos:start="641:22" pos:end="641:22">1</literal></expr>]</index></name> <operator pos:start="641:25" pos:end="641:26">==</operator> <literal type="char" pos:start="641:28" pos:end="641:31">'\r'</literal> <operator pos:start="641:33" pos:end="641:34">&amp;&amp;</operator> <name pos:start="641:36" pos:end="641:39"><name pos:start="641:36" pos:end="641:36">s</name><index pos:start="641:37" pos:end="641:39">[<expr pos:start="641:38" pos:end="641:38"><literal type="number" pos:start="641:38" pos:end="641:38">2</literal></expr>]</index></name> <operator pos:start="641:41" pos:end="641:42">==</operator> <literal type="char" pos:start="641:44" pos:end="641:47">'\n'</literal></expr>)</condition> <block pos:start="641:50" pos:end="643:9">{<block_content pos:start="642:13" pos:end="642:37">
            <expr_stmt pos:start="642:13" pos:end="642:37"><expr pos:start="642:13" pos:end="642:36"><name pos:start="642:13" pos:end="642:15">len</name> <operator pos:start="642:17" pos:end="642:17">=</operator> <operator pos:start="642:19" pos:end="642:19">(</operator><name pos:start="642:20" pos:end="642:22">int</name><operator pos:start="642:23" pos:end="642:23">)</operator><operator pos:start="642:24" pos:end="642:24">(</operator><name pos:start="642:25" pos:end="642:25">s</name> <operator pos:start="642:27" pos:end="642:27">-</operator> <name pos:start="642:29" pos:end="642:31">buf</name><operator pos:start="642:32" pos:end="642:32">)</operator> <operator pos:start="642:34" pos:end="642:34">+</operator> <literal type="number" pos:start="642:36" pos:end="642:36">3</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return pos:start="646:5" pos:end="646:15">return <expr pos:start="646:12" pos:end="646:14"><name pos:start="646:12" pos:end="646:14">len</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="648:1" pos:end="648:35">// excessive '/' and '\' characters</comment>
<function pos:start="649:1" pos:end="669:1"><type pos:start="649:1" pos:end="649:11"><specifier pos:start="649:1" pos:end="649:6">static</specifier> <name pos:start="649:8" pos:end="649:11">void</name></type> <name pos:start="649:13" pos:end="649:49">remove_double_dots_and_double_slashes</name> <parameter_list pos:start="649:51" pos:end="649:59">(<parameter pos:start="649:52" pos:end="649:58"><decl pos:start="649:52" pos:end="649:58"><type pos:start="649:52" pos:end="649:57"><name pos:start="649:52" pos:end="649:55">char</name> <modifier pos:start="649:57" pos:end="649:57">*</modifier></type><name pos:start="649:58" pos:end="649:58">s</name></decl></parameter>)</parameter_list>
<block pos:start="650:1" pos:end="669:1">{<block_content pos:start="651:5" pos:end="668:14">
    <decl_stmt pos:start="651:5" pos:end="651:16"><decl pos:start="651:5" pos:end="651:15"><type pos:start="651:5" pos:end="651:10"><name pos:start="651:5" pos:end="651:8">char</name> <modifier pos:start="651:10" pos:end="651:10">*</modifier></type><name pos:start="651:11" pos:end="651:11">p</name> <init pos:start="651:13" pos:end="651:15">= <expr pos:start="651:15" pos:end="651:15"><name pos:start="651:15" pos:end="651:15">s</name></expr></init></decl>;</decl_stmt>

    <while pos:start="653:5" pos:end="667:5">while <condition pos:start="653:11" pos:end="653:22">(<expr pos:start="653:12" pos:end="653:21"><operator pos:start="653:12" pos:end="653:12">*</operator><name pos:start="653:13" pos:end="653:13">s</name> <operator pos:start="653:15" pos:end="653:16">!=</operator> <literal type="char" pos:start="653:18" pos:end="653:21">'\0'</literal></expr>)</condition> <block pos:start="653:24" pos:end="667:5">{<block_content pos:start="654:9" pos:end="666:9">
        <expr_stmt pos:start="654:9" pos:end="654:20"><expr pos:start="654:9" pos:end="654:19"><operator pos:start="654:9" pos:end="654:9">*</operator><name pos:start="654:10" pos:end="654:10">p</name><operator pos:start="654:11" pos:end="654:12">++</operator> <operator pos:start="654:14" pos:end="654:14">=</operator> <operator pos:start="654:16" pos:end="654:16">*</operator><name pos:start="654:17" pos:end="654:17">s</name><operator pos:start="654:18" pos:end="654:19">++</operator></expr>;</expr_stmt>
        <if_stmt pos:start="655:9" pos:end="666:9"><if pos:start="655:9" pos:end="666:9">if <condition pos:start="655:12" pos:end="655:42">(<expr pos:start="655:13" pos:end="655:41"><name pos:start="655:13" pos:end="655:17"><name pos:start="655:13" pos:end="655:13">s</name><index pos:start="655:14" pos:end="655:17">[<expr pos:start="655:15" pos:end="655:16"><operator pos:start="655:15" pos:end="655:15">-</operator><literal type="number" pos:start="655:16" pos:end="655:16">1</literal></expr>]</index></name> <operator pos:start="655:19" pos:end="655:20">==</operator> <literal type="char" pos:start="655:22" pos:end="655:24">'/'</literal> <operator pos:start="655:26" pos:end="655:27">||</operator> <name pos:start="655:29" pos:end="655:33"><name pos:start="655:29" pos:end="655:29">s</name><index pos:start="655:30" pos:end="655:33">[<expr pos:start="655:31" pos:end="655:32"><operator pos:start="655:31" pos:end="655:31">-</operator><literal type="number" pos:start="655:32" pos:end="655:32">1</literal></expr>]</index></name> <operator pos:start="655:35" pos:end="655:36">==</operator> <literal type="char" pos:start="655:38" pos:end="655:41">'\\'</literal></expr>)</condition> <block pos:start="655:44" pos:end="666:9">{<block_content pos:start="657:13" pos:end="665:13">
            <comment type="line" pos:start="656:13" pos:end="656:70">// Skip all following slashes, backslashes and double-dots</comment>
            <while pos:start="657:13" pos:end="665:13">while <condition pos:start="657:19" pos:end="657:32">(<expr pos:start="657:20" pos:end="657:31"><name pos:start="657:20" pos:end="657:23"><name pos:start="657:20" pos:end="657:20">s</name><index pos:start="657:21" pos:end="657:23">[<expr pos:start="657:22" pos:end="657:22"><literal type="number" pos:start="657:22" pos:end="657:22">0</literal></expr>]</index></name> <operator pos:start="657:25" pos:end="657:26">!=</operator> <literal type="char" pos:start="657:28" pos:end="657:31">'\0'</literal></expr>)</condition> <block pos:start="657:34" pos:end="665:13">{<block_content pos:start="658:17" pos:end="664:17">
                <if_stmt pos:start="658:17" pos:end="664:17"><if pos:start="658:17" pos:end="660:17">if <condition pos:start="658:20" pos:end="658:48">(<expr pos:start="658:21" pos:end="658:47"><name pos:start="658:21" pos:end="658:24"><name pos:start="658:21" pos:end="658:21">s</name><index pos:start="658:22" pos:end="658:24">[<expr pos:start="658:23" pos:end="658:23"><literal type="number" pos:start="658:23" pos:end="658:23">0</literal></expr>]</index></name> <operator pos:start="658:26" pos:end="658:27">==</operator> <literal type="char" pos:start="658:29" pos:end="658:31">'/'</literal> <operator pos:start="658:33" pos:end="658:34">||</operator> <name pos:start="658:36" pos:end="658:39"><name pos:start="658:36" pos:end="658:36">s</name><index pos:start="658:37" pos:end="658:39">[<expr pos:start="658:38" pos:end="658:38"><literal type="number" pos:start="658:38" pos:end="658:38">0</literal></expr>]</index></name> <operator pos:start="658:41" pos:end="658:42">==</operator> <literal type="char" pos:start="658:44" pos:end="658:47">'\\'</literal></expr>)</condition> <block pos:start="658:50" pos:end="660:17">{<block_content pos:start="659:21" pos:end="659:24">
                    <expr_stmt pos:start="659:21" pos:end="659:24"><expr pos:start="659:21" pos:end="659:23"><name pos:start="659:21" pos:end="659:21">s</name><operator pos:start="659:22" pos:end="659:23">++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="660:19" pos:end="662:17">else if <condition pos:start="660:27" pos:end="660:54">(<expr pos:start="660:28" pos:end="660:53"><name pos:start="660:28" pos:end="660:31"><name pos:start="660:28" pos:end="660:28">s</name><index pos:start="660:29" pos:end="660:31">[<expr pos:start="660:30" pos:end="660:30"><literal type="number" pos:start="660:30" pos:end="660:30">0</literal></expr>]</index></name> <operator pos:start="660:33" pos:end="660:34">==</operator> <literal type="char" pos:start="660:36" pos:end="660:38">'.'</literal> <operator pos:start="660:40" pos:end="660:41">&amp;&amp;</operator> <name pos:start="660:43" pos:end="660:46"><name pos:start="660:43" pos:end="660:43">s</name><index pos:start="660:44" pos:end="660:46">[<expr pos:start="660:45" pos:end="660:45"><literal type="number" pos:start="660:45" pos:end="660:45">1</literal></expr>]</index></name> <operator pos:start="660:48" pos:end="660:49">==</operator> <literal type="char" pos:start="660:51" pos:end="660:53">'.'</literal></expr>)</condition> <block pos:start="660:56" pos:end="662:17">{<block_content pos:start="661:21" pos:end="661:27">
                    <expr_stmt pos:start="661:21" pos:end="661:27"><expr pos:start="661:21" pos:end="661:26"><name pos:start="661:21" pos:end="661:21">s</name> <operator pos:start="661:23" pos:end="661:24">+=</operator> <literal type="number" pos:start="661:26" pos:end="661:26">2</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="662:19" pos:end="664:17">else <block pos:start="662:24" pos:end="664:17">{<block_content pos:start="663:21" pos:end="663:26">
                    <break pos:start="663:21" pos:end="663:26">break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="668:5" pos:end="668:14"><expr pos:start="668:5" pos:end="668:13"><operator pos:start="668:5" pos:end="668:5">*</operator><name pos:start="668:6" pos:end="668:6">p</name> <operator pos:start="668:8" pos:end="668:8">=</operator> <literal type="char" pos:start="668:10" pos:end="668:13">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="670:1" pos:end="673:3">/*
 * Performs parsing of HTTP Authentication header from
 * the client when Basic authentication is used.
 */</comment>
<function pos:start="674:1" pos:end="738:1"><type pos:start="674:1" pos:end="674:11"><specifier pos:start="674:1" pos:end="674:6">static</specifier> <name pos:start="674:8" pos:end="674:11">void</name></type> <name pos:start="674:13" pos:end="674:35">mg_parse_auth_hdr_basic</name> <parameter_list pos:start="674:37" pos:end="676:59">(<parameter pos:start="674:38" pos:end="674:63"><decl pos:start="674:38" pos:end="674:63"><type pos:start="674:38" pos:end="674:63"><name pos:start="674:38" pos:end="674:57"><name pos:start="674:38" pos:end="674:43">struct</name> <name pos:start="674:45" pos:end="674:57">mg_connection</name></name> <modifier pos:start="674:59" pos:end="674:59">*</modifier></type><name pos:start="674:60" pos:end="674:63">conn</name></decl></parameter>, 
				     <parameter pos:start="675:38" pos:end="675:60"><decl pos:start="675:38" pos:end="675:60"><type pos:start="675:38" pos:end="675:60"><specifier pos:start="675:38" pos:end="675:42">const</specifier> <name pos:start="675:44" pos:end="675:47">char</name> <modifier pos:start="675:49" pos:end="675:49">*</modifier></type><name pos:start="675:50" pos:end="675:60">auth_header</name></decl></parameter>,
	                             <parameter pos:start="676:38" pos:end="676:58"><decl pos:start="676:38" pos:end="676:58"><type pos:start="676:38" pos:end="676:58"><name pos:start="676:38" pos:end="676:54">EST_HTTP_AUTH_HDR</name> <modifier pos:start="676:56" pos:end="676:56">*</modifier></type><name pos:start="676:57" pos:end="676:58">ah</name></decl></parameter>)</parameter_list>
<block pos:start="677:1" pos:end="738:1">{<block_content pos:start="678:5" pos:end="737:38">
    <decl_stmt pos:start="678:5" pos:end="678:20"><decl pos:start="678:5" pos:end="678:15"><type pos:start="678:5" pos:end="678:10"><name pos:start="678:5" pos:end="678:8">char</name> <modifier pos:start="678:10" pos:end="678:10">*</modifier></type><name pos:start="678:11" pos:end="678:15">value</name></decl>, <decl pos:start="678:18" pos:end="678:19"><type ref="prev" pos:start="678:5" pos:end="678:10"><modifier pos:start="678:18" pos:end="678:18">*</modifier></type><name pos:start="678:19" pos:end="678:19">s</name></decl>;</decl_stmt>
    <decl_stmt pos:start="679:5" pos:end="679:19"><decl pos:start="679:5" pos:end="679:18"><type pos:start="679:5" pos:end="679:10"><name pos:start="679:5" pos:end="679:8">char</name> <modifier pos:start="679:10" pos:end="679:10">*</modifier></type><name pos:start="679:11" pos:end="679:18">save_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="680:5" pos:end="680:30"><decl pos:start="680:5" pos:end="680:29"><type pos:start="680:5" pos:end="680:8"><name pos:start="680:5" pos:end="680:8">char</name></type> <name pos:start="680:10" pos:end="680:29"><name pos:start="680:10" pos:end="680:13">both</name><index pos:start="680:14" pos:end="680:29">[<expr pos:start="680:15" pos:end="680:28"><name pos:start="680:15" pos:end="680:24">MAX_UIDPWD</name><operator pos:start="680:25" pos:end="680:25">*</operator><literal type="number" pos:start="680:26" pos:end="680:26">2</literal><operator pos:start="680:27" pos:end="680:27">+</operator><literal type="number" pos:start="680:28" pos:end="680:28">2</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="680:32" pos:end="680:66">/* will contain both UID and PWD */</comment>
    <decl_stmt pos:start="681:5" pos:end="681:16"><decl pos:start="681:5" pos:end="681:15"><type pos:start="681:5" pos:end="681:11"><name pos:start="681:5" pos:end="681:11">rsize_t</name></type> <name pos:start="681:13" pos:end="681:15">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="682:5" pos:end="682:20"><decl pos:start="682:5" pos:end="682:19"><type pos:start="682:5" pos:end="682:10"><name pos:start="682:5" pos:end="682:8">char</name> <modifier pos:start="682:10" pos:end="682:10">*</modifier></type><name pos:start="682:11" pos:end="682:13">sep</name> <init pos:start="682:15" pos:end="682:19">= <expr pos:start="682:17" pos:end="682:19"><literal type="string" pos:start="682:17" pos:end="682:19">":"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="683:5" pos:end="683:20"><decl pos:start="683:5" pos:end="683:19"><type pos:start="683:5" pos:end="683:7"><name pos:start="683:5" pos:end="683:7">int</name></type> <name pos:start="683:9" pos:end="683:19">colon_found</name></decl>;</decl_stmt>
    <decl_stmt pos:start="684:5" pos:end="684:22"><decl pos:start="684:5" pos:end="684:21"><type pos:start="684:5" pos:end="684:10"><name pos:start="684:5" pos:end="684:8">char</name> <modifier pos:start="684:10" pos:end="684:10">*</modifier></type><name pos:start="684:11" pos:end="684:21">possible_pw</name></decl>;</decl_stmt>
    
    <expr_stmt pos:start="686:5" pos:end="686:33"><expr pos:start="686:5" pos:end="686:32"><name pos:start="686:5" pos:end="686:5">s</name> <operator pos:start="686:7" pos:end="686:7">=</operator> <operator pos:start="686:9" pos:end="686:9">(</operator><name pos:start="686:10" pos:end="686:13">char</name> <operator pos:start="686:15" pos:end="686:15">*</operator><operator pos:start="686:16" pos:end="686:16">)</operator> <name pos:start="686:18" pos:end="686:28">auth_header</name> <operator pos:start="686:30" pos:end="686:30">+</operator> <literal type="number" pos:start="686:32" pos:end="686:32">6</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="688:5" pos:end="688:28">// Gobble initial spaces</comment>
    <while pos:start="689:5" pos:end="691:5">while <condition pos:start="689:11" pos:end="689:39">(<expr pos:start="689:12" pos:end="689:38"><call pos:start="689:12" pos:end="689:38"><name pos:start="689:12" pos:end="689:18">isspace</name><argument_list pos:start="689:19" pos:end="689:38">(<argument pos:start="689:20" pos:end="689:37"><expr pos:start="689:20" pos:end="689:37"><operator pos:start="689:20" pos:end="689:20">*</operator><operator pos:start="689:21" pos:end="689:21">(</operator><name pos:start="689:22" pos:end="689:29">unsigned</name> <name pos:start="689:31" pos:end="689:34">char</name><operator pos:start="689:35" pos:end="689:35">*</operator><operator pos:start="689:36" pos:end="689:36">)</operator><name pos:start="689:37" pos:end="689:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="689:41" pos:end="691:5">{<block_content pos:start="690:9" pos:end="690:12">
	<expr_stmt pos:start="690:9" pos:end="690:12"><expr pos:start="690:9" pos:end="690:11"><name pos:start="690:9" pos:end="690:9">s</name><operator pos:start="690:10" pos:end="690:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="692:5" pos:end="692:14"><expr pos:start="692:5" pos:end="692:13"><name pos:start="692:5" pos:end="692:9">value</name> <operator pos:start="692:11" pos:end="692:11">=</operator> <name pos:start="692:13" pos:end="692:13">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="694:5" pos:end="694:63"><expr pos:start="694:5" pos:end="694:62"><name pos:start="694:5" pos:end="694:7">len</name> <operator pos:start="694:9" pos:end="694:9">=</operator> <call pos:start="694:11" pos:end="694:62"><name pos:start="694:11" pos:end="694:27">est_base64_decode</name><argument_list pos:start="694:28" pos:end="694:62">(<argument pos:start="694:29" pos:end="694:33"><expr pos:start="694:29" pos:end="694:33"><name pos:start="694:29" pos:end="694:33">value</name></expr></argument>, <argument pos:start="694:36" pos:end="694:39"><expr pos:start="694:36" pos:end="694:39"><name pos:start="694:36" pos:end="694:39">both</name></expr></argument>, <argument pos:start="694:42" pos:end="694:61"><expr pos:start="694:42" pos:end="694:61"><operator pos:start="694:42" pos:end="694:42">(</operator><name pos:start="694:43" pos:end="694:52">MAX_UIDPWD</name> <operator pos:start="694:54" pos:end="694:54">*</operator> <literal type="number" pos:start="694:56" pos:end="694:58">2</literal> <operator pos:start="694:58" pos:end="694:58">+</operator> <literal type="number" pos:start="694:60" pos:end="694:60">2</literal><operator pos:start="694:61" pos:end="694:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="695:5" pos:end="698:5"><if pos:start="695:5" pos:end="698:5">if <condition pos:start="695:8" pos:end="695:17">(<expr pos:start="695:9" pos:end="695:16"><name pos:start="695:9" pos:end="695:11">len</name> <operator pos:start="695:13" pos:end="695:14">&lt;=</operator> <literal type="number" pos:start="695:16" pos:end="695:16">0</literal></expr>)</condition> <block pos:start="695:19" pos:end="698:5">{<block_content pos:start="696:9" pos:end="697:15">
	<expr_stmt pos:start="696:9" pos:end="696:86"><expr pos:start="696:9" pos:end="696:85"><call pos:start="696:9" pos:end="696:85"><name pos:start="696:9" pos:end="696:20">EST_LOG_WARN</name><argument_list pos:start="696:21" pos:end="696:85">(<argument pos:start="696:22" pos:end="696:84"><expr pos:start="696:22" pos:end="696:84"><literal type="string" pos:start="696:22" pos:end="696:84">"Base64 decode of HTTP auth header failed, HTTP auth will fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="697:9" pos:end="697:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="700:5" pos:end="702:7">/*
     * Make sure there's a ':' in the string
     */</comment>
    <expr_stmt pos:start="703:5" pos:end="703:60"><expr pos:start="703:5" pos:end="703:59"><name pos:start="703:5" pos:end="703:15">colon_found</name> <operator pos:start="703:17" pos:end="703:17">=</operator> <call pos:start="703:19" pos:end="703:59"><name pos:start="703:19" pos:end="703:26">strstr_s</name><argument_list pos:start="703:27" pos:end="703:59">(<argument pos:start="703:28" pos:end="703:31"><expr pos:start="703:28" pos:end="703:31"><name pos:start="703:28" pos:end="703:31">both</name></expr></argument>, <argument pos:start="703:34" pos:end="703:36"><expr pos:start="703:34" pos:end="703:36"><name pos:start="703:34" pos:end="703:36">len</name></expr></argument>, <argument pos:start="703:39" pos:end="703:41"><expr pos:start="703:39" pos:end="703:41"><literal type="string" pos:start="703:39" pos:end="703:41">":"</literal></expr></argument>, <argument pos:start="703:44" pos:end="703:44"><expr pos:start="703:44" pos:end="703:44"><literal type="number" pos:start="703:44" pos:end="703:44">1</literal></expr></argument>, <argument pos:start="703:47" pos:end="703:58"><expr pos:start="703:47" pos:end="703:58"><operator pos:start="703:47" pos:end="703:47">&amp;</operator><name pos:start="703:48" pos:end="703:58">possible_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="704:5" pos:end="708:5"><if pos:start="704:5" pos:end="708:5">if <condition pos:start="704:8" pos:end="704:27">(<expr pos:start="704:9" pos:end="704:26"><name pos:start="704:9" pos:end="704:19">colon_found</name> <operator pos:start="704:21" pos:end="704:22">!=</operator> <name pos:start="704:24" pos:end="704:26">EOK</name></expr>)</condition> <block pos:start="704:29" pos:end="708:5">{<block_content pos:start="705:9" pos:end="707:15">
	<expr_stmt pos:start="705:9" pos:end="705:76"><expr pos:start="705:9" pos:end="705:75"><call pos:start="705:9" pos:end="705:75"><name pos:start="705:9" pos:end="705:20">EST_LOG_WARN</name><argument_list pos:start="705:21" pos:end="705:75">(<argument pos:start="705:22" pos:end="705:74"><expr pos:start="705:22" pos:end="705:74"><literal type="string" pos:start="705:22" pos:end="705:74">"Invalid format of Basic HTTP credentials, missing :"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="706:9" pos:end="706:42"><expr pos:start="706:9" pos:end="706:41"><call pos:start="706:9" pos:end="706:41"><name pos:start="706:9" pos:end="706:17">memzero_s</name><argument_list pos:start="706:18" pos:end="706:41">(<argument pos:start="706:19" pos:end="706:22"><expr pos:start="706:19" pos:end="706:22"><name pos:start="706:19" pos:end="706:22">both</name></expr></argument>, <argument pos:start="706:25" pos:end="706:40"><expr pos:start="706:25" pos:end="706:40"><operator pos:start="706:25" pos:end="706:25">(</operator><name pos:start="706:26" pos:end="706:35">MAX_UIDPWD</name><operator pos:start="706:36" pos:end="706:36">*</operator><literal type="number" pos:start="706:37" pos:end="706:38">2</literal><operator pos:start="706:38" pos:end="706:38">+</operator><literal type="number" pos:start="706:39" pos:end="706:39">2</literal><operator pos:start="706:40" pos:end="706:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="707:9" pos:end="707:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="710:5" pos:end="712:7">/*
     * did it start with a colon, meaning no userid?
     */</comment>
    <if_stmt pos:start="713:5" pos:end="734:5"><if pos:start="713:5" pos:end="725:5">if <condition pos:start="713:8" pos:end="713:23">(<expr pos:start="713:9" pos:end="713:22"><name pos:start="713:9" pos:end="713:15"><name pos:start="713:9" pos:end="713:12">both</name><index pos:start="713:13" pos:end="713:15">[<expr pos:start="713:14" pos:end="713:14"><literal type="number" pos:start="713:14" pos:end="713:14">0</literal></expr>]</index></name> <operator pos:start="713:17" pos:end="713:18">==</operator> <literal type="char" pos:start="713:20" pos:end="713:22">':'</literal></expr>)</condition> <block pos:start="713:25" pos:end="725:5">{<block_content pos:start="714:9" pos:end="724:9">
        <if_stmt pos:start="714:9" pos:end="724:9"><if pos:start="714:9" pos:end="719:9">if <condition pos:start="714:12" pos:end="714:20">(<expr pos:start="714:13" pos:end="714:19"><name pos:start="714:13" pos:end="714:15">len</name> <operator pos:start="714:17" pos:end="714:17">&gt;</operator> <literal type="number" pos:start="714:19" pos:end="714:19">1</literal></expr>)</condition> <block pos:start="714:22" pos:end="719:9">{<block_content pos:start="716:13" pos:end="718:78">
            <comment type="block" pos:start="715:13" pos:end="715:33">/* just a password */</comment>
            <expr_stmt pos:start="716:13" pos:end="716:26"><expr pos:start="716:13" pos:end="716:25"><name pos:start="716:13" pos:end="716:23">possible_pw</name><operator pos:start="716:24" pos:end="716:25">++</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="717:13" pos:end="717:55"><expr pos:start="717:13" pos:end="717:54"><name pos:start="717:13" pos:end="717:19"><name pos:start="717:13" pos:end="717:14">ah</name><operator pos:start="717:15" pos:end="717:16">-&gt;</operator><name pos:start="717:17" pos:end="717:19">pwd</name></name> <operator pos:start="717:21" pos:end="717:21">=</operator> <call pos:start="717:23" pos:end="717:54"><name pos:start="717:23" pos:end="717:29">STRNDUP</name><argument_list pos:start="717:30" pos:end="717:54">(<argument pos:start="717:31" pos:end="717:41"><expr pos:start="717:31" pos:end="717:41"><name pos:start="717:31" pos:end="717:41">possible_pw</name></expr></argument>, <argument pos:start="717:44" pos:end="717:53"><expr pos:start="717:44" pos:end="717:53"><name pos:start="717:44" pos:end="717:53">MAX_UIDPWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="718:13" pos:end="718:78"><expr pos:start="718:13" pos:end="718:77"><call pos:start="718:13" pos:end="718:77"><name pos:start="718:13" pos:end="718:24">EST_LOG_INFO</name><argument_list pos:start="718:25" pos:end="718:77">(<argument pos:start="718:26" pos:end="718:76"><expr pos:start="718:26" pos:end="718:76"><literal type="string" pos:start="718:26" pos:end="718:76">"HTTP Authentication header contains only password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="719:11" pos:end="724:9">else <block pos:start="719:16" pos:end="724:9">{<block_content pos:start="721:13" pos:end="723:19">
            <comment type="block" pos:start="720:13" pos:end="720:52">/* We got neither userid nor password */</comment>
            <expr_stmt pos:start="721:13" pos:end="721:86"><expr pos:start="721:13" pos:end="721:85"><call pos:start="721:13" pos:end="721:85"><name pos:start="721:13" pos:end="721:24">EST_LOG_INFO</name><argument_list pos:start="721:25" pos:end="721:85">(<argument pos:start="721:26" pos:end="721:84"><expr pos:start="721:26" pos:end="721:84"><literal type="string" pos:start="721:26" pos:end="721:84">"HTTP Authentication header contains no userid or password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <expr_stmt pos:start="722:13" pos:end="722:46"><expr pos:start="722:13" pos:end="722:45"><call pos:start="722:13" pos:end="722:45"><name pos:start="722:13" pos:end="722:21">memzero_s</name><argument_list pos:start="722:22" pos:end="722:45">(<argument pos:start="722:23" pos:end="722:26"><expr pos:start="722:23" pos:end="722:26"><name pos:start="722:23" pos:end="722:26">both</name></expr></argument>, <argument pos:start="722:29" pos:end="722:44"><expr pos:start="722:29" pos:end="722:44"><operator pos:start="722:29" pos:end="722:29">(</operator><name pos:start="722:30" pos:end="722:39">MAX_UIDPWD</name><operator pos:start="722:40" pos:end="722:40">*</operator><literal type="number" pos:start="722:41" pos:end="722:42">2</literal><operator pos:start="722:42" pos:end="722:42">+</operator><literal type="number" pos:start="722:43" pos:end="722:43">2</literal><operator pos:start="722:44" pos:end="722:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="723:13" pos:end="723:19">return;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else pos:start="725:7" pos:end="734:5">else <block pos:start="725:12" pos:end="734:5">{<block_content pos:start="729:9" pos:end="733:9">
        <comment type="block" pos:start="726:9" pos:end="728:11">/* Started with a userid, 
         * Parse the username and password, which are separated by a ":"
         */</comment>
        <expr_stmt pos:start="729:9" pos:end="729:53"><expr pos:start="729:9" pos:end="729:52"><name pos:start="729:9" pos:end="729:13">value</name> <operator pos:start="729:15" pos:end="729:15">=</operator> <call pos:start="729:17" pos:end="729:52"><name pos:start="729:17" pos:end="729:24">strtok_s</name><argument_list pos:start="729:25" pos:end="729:52">(<argument pos:start="729:26" pos:end="729:29"><expr pos:start="729:26" pos:end="729:29"><name pos:start="729:26" pos:end="729:29">both</name></expr></argument>, <argument pos:start="729:32" pos:end="729:35"><expr pos:start="729:32" pos:end="729:35"><operator pos:start="729:32" pos:end="729:32">&amp;</operator><name pos:start="729:33" pos:end="729:35">len</name></expr></argument>, <argument pos:start="729:38" pos:end="729:40"><expr pos:start="729:38" pos:end="729:40"><name pos:start="729:38" pos:end="729:40">sep</name></expr></argument>, <argument pos:start="729:43" pos:end="729:51"><expr pos:start="729:43" pos:end="729:51"><operator pos:start="729:43" pos:end="729:43">&amp;</operator><name pos:start="729:44" pos:end="729:51">save_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="730:9" pos:end="733:9"><if pos:start="730:9" pos:end="733:9">if <condition pos:start="730:12" pos:end="730:18">(<expr pos:start="730:13" pos:end="730:17"><name pos:start="730:13" pos:end="730:17">value</name></expr>)</condition> <block pos:start="730:20" pos:end="733:9">{<block_content pos:start="731:13" pos:end="732:52">
            <expr_stmt pos:start="731:13" pos:end="731:50"><expr pos:start="731:13" pos:end="731:49"><name pos:start="731:13" pos:end="731:20"><name pos:start="731:13" pos:end="731:14">ah</name><operator pos:start="731:15" pos:end="731:16">-&gt;</operator><name pos:start="731:17" pos:end="731:20">user</name></name> <operator pos:start="731:22" pos:end="731:22">=</operator> <call pos:start="731:24" pos:end="731:49"><name pos:start="731:24" pos:end="731:30">STRNDUP</name><argument_list pos:start="731:31" pos:end="731:49">(<argument pos:start="731:32" pos:end="731:36"><expr pos:start="731:32" pos:end="731:36"><name pos:start="731:32" pos:end="731:36">value</name></expr></argument>, <argument pos:start="731:39" pos:end="731:48"><expr pos:start="731:39" pos:end="731:48"><name pos:start="731:39" pos:end="731:48">MAX_UIDPWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="732:13" pos:end="732:52"><expr pos:start="732:13" pos:end="732:51"><name pos:start="732:13" pos:end="732:19"><name pos:start="732:13" pos:end="732:14">ah</name><operator pos:start="732:15" pos:end="732:16">-&gt;</operator><name pos:start="732:17" pos:end="732:19">pwd</name></name> <operator pos:start="732:21" pos:end="732:21">=</operator> <call pos:start="732:23" pos:end="732:51"><name pos:start="732:23" pos:end="732:29">STRNDUP</name><argument_list pos:start="732:30" pos:end="732:51">(<argument pos:start="732:31" pos:end="732:38"><expr pos:start="732:31" pos:end="732:38"><name pos:start="732:31" pos:end="732:38">save_ptr</name></expr></argument>, <argument pos:start="732:41" pos:end="732:50"><expr pos:start="732:41" pos:end="732:50"><name pos:start="732:41" pos:end="732:50">MAX_UIDPWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="735:5" pos:end="735:26"><expr pos:start="735:5" pos:end="735:25"><name pos:start="735:5" pos:end="735:12"><name pos:start="735:5" pos:end="735:6">ah</name><operator pos:start="735:7" pos:end="735:8">-&gt;</operator><name pos:start="735:9" pos:end="735:12">mode</name></name> <operator pos:start="735:14" pos:end="735:14">=</operator> <name pos:start="735:16" pos:end="735:25">AUTH_BASIC</name></expr>;</expr_stmt>
    
    <expr_stmt pos:start="737:5" pos:end="737:38"><expr pos:start="737:5" pos:end="737:37"><call pos:start="737:5" pos:end="737:37"><name pos:start="737:5" pos:end="737:13">memzero_s</name><argument_list pos:start="737:14" pos:end="737:37">(<argument pos:start="737:15" pos:end="737:18"><expr pos:start="737:15" pos:end="737:18"><name pos:start="737:15" pos:end="737:18">both</name></expr></argument>, <argument pos:start="737:21" pos:end="737:36"><expr pos:start="737:21" pos:end="737:36"><operator pos:start="737:21" pos:end="737:21">(</operator><name pos:start="737:22" pos:end="737:31">MAX_UIDPWD</name><operator pos:start="737:32" pos:end="737:32">*</operator><literal type="number" pos:start="737:33" pos:end="737:34">2</literal><operator pos:start="737:34" pos:end="737:34">+</operator><literal type="number" pos:start="737:35" pos:end="737:35">2</literal><operator pos:start="737:36" pos:end="737:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="739:1" pos:end="742:3">/*
 * Performs parsing of HTTP Authentication header from
 * the client when Digest authentication is used.
 */</comment>
<function pos:start="743:1" pos:end="819:1"><type pos:start="743:1" pos:end="743:11"><specifier pos:start="743:1" pos:end="743:6">static</specifier> <name pos:start="743:8" pos:end="743:11">void</name></type> <name pos:start="743:13" pos:end="743:36">mg_parse_auth_hdr_digest</name> <parameter_list pos:start="743:38" pos:end="745:60">(<parameter pos:start="743:39" pos:end="743:64"><decl pos:start="743:39" pos:end="743:64"><type pos:start="743:39" pos:end="743:64"><name pos:start="743:39" pos:end="743:58"><name pos:start="743:39" pos:end="743:44">struct</name> <name pos:start="743:46" pos:end="743:58">mg_connection</name></name> <modifier pos:start="743:60" pos:end="743:60">*</modifier></type><name pos:start="743:61" pos:end="743:64">conn</name></decl></parameter>, 
				      <parameter pos:start="744:39" pos:end="744:61"><decl pos:start="744:39" pos:end="744:61"><type pos:start="744:39" pos:end="744:61"><specifier pos:start="744:39" pos:end="744:43">const</specifier> <name pos:start="744:45" pos:end="744:48">char</name> <modifier pos:start="744:50" pos:end="744:50">*</modifier></type><name pos:start="744:51" pos:end="744:61">auth_header</name></decl></parameter>,
	                              <parameter pos:start="745:39" pos:end="745:59"><decl pos:start="745:39" pos:end="745:59"><type pos:start="745:39" pos:end="745:59"><name pos:start="745:39" pos:end="745:55">EST_HTTP_AUTH_HDR</name> <modifier pos:start="745:57" pos:end="745:57">*</modifier></type><name pos:start="745:58" pos:end="745:59">ah</name></decl></parameter>)</parameter_list>
<block pos:start="746:1" pos:end="819:1">{<block_content pos:start="747:5" pos:end="818:5">
    <decl_stmt pos:start="747:5" pos:end="747:27"><decl pos:start="747:5" pos:end="747:14"><type pos:start="747:5" pos:end="747:10"><name pos:start="747:5" pos:end="747:8">char</name> <modifier pos:start="747:10" pos:end="747:10">*</modifier></type><name pos:start="747:11" pos:end="747:14">name</name></decl>, <decl pos:start="747:17" pos:end="747:22"><type ref="prev" pos:start="747:5" pos:end="747:10"><modifier pos:start="747:17" pos:end="747:17">*</modifier></type><name pos:start="747:18" pos:end="747:22">value</name></decl>, <decl pos:start="747:25" pos:end="747:26"><type ref="prev" pos:start="747:5" pos:end="747:10"><modifier pos:start="747:25" pos:end="747:25">*</modifier></type><name pos:start="747:26" pos:end="747:26">s</name></decl>;</decl_stmt>
    <decl_stmt pos:start="748:5" pos:end="748:31"><decl pos:start="748:5" pos:end="748:30"><type pos:start="748:5" pos:end="748:8"><name pos:start="748:5" pos:end="748:8">char</name></type> <name pos:start="748:10" pos:end="748:30"><name pos:start="748:10" pos:end="748:12">buf</name><index pos:start="748:13" pos:end="748:30">[<expr pos:start="748:14" pos:end="748:29"><name pos:start="748:14" pos:end="748:29">MAX_AUTH_HDR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="749:5" pos:end="749:10"><decl pos:start="749:5" pos:end="749:9"><type pos:start="749:5" pos:end="749:7"><name pos:start="749:5" pos:end="749:7">int</name></type> <name pos:start="749:9" pos:end="749:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="751:5" pos:end="751:27"><expr pos:start="751:5" pos:end="751:26"><name pos:start="751:5" pos:end="751:12"><name pos:start="751:5" pos:end="751:6">ah</name><operator pos:start="751:7" pos:end="751:8">-&gt;</operator><name pos:start="751:9" pos:end="751:12">mode</name></name> <operator pos:start="751:14" pos:end="751:14">=</operator> <name pos:start="751:16" pos:end="751:26">AUTH_DIGEST</name></expr>;</expr_stmt>

    <comment type="line" pos:start="753:5" pos:end="753:46">// Make modifiable copy of the auth header</comment>
    <expr_stmt pos:start="754:5" pos:end="754:72"><expr pos:start="754:5" pos:end="754:71"><call pos:start="754:5" pos:end="754:71"><name pos:start="754:5" pos:end="754:13">strncpy_s</name><argument_list pos:start="754:14" pos:end="754:71">(<argument pos:start="754:15" pos:end="754:17"><expr pos:start="754:15" pos:end="754:17"><name pos:start="754:15" pos:end="754:17">buf</name></expr></argument>, <argument pos:start="754:20" pos:end="754:35"><expr pos:start="754:20" pos:end="754:35"><name pos:start="754:20" pos:end="754:35">MAX_AUTH_HDR_LEN</name></expr></argument>, <argument pos:start="754:38" pos:end="754:52"><expr pos:start="754:38" pos:end="754:52"><name pos:start="754:38" pos:end="754:48">auth_header</name> <operator pos:start="754:50" pos:end="754:50">+</operator> <literal type="number" pos:start="754:52" pos:end="754:52">7</literal></expr></argument>, <argument pos:start="754:55" pos:end="754:70"><expr pos:start="754:55" pos:end="754:70"><name pos:start="754:55" pos:end="754:70">MAX_AUTH_HDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="755:5" pos:end="755:12"><expr pos:start="755:5" pos:end="755:11"><name pos:start="755:5" pos:end="755:5">s</name> <operator pos:start="755:7" pos:end="755:7">=</operator> <name pos:start="755:9" pos:end="755:11">buf</name></expr>;</expr_stmt>

    <comment type="line" pos:start="757:5" pos:end="757:33">// Parse authorization header</comment>
    <while pos:start="758:5" pos:end="818:5">while <condition pos:start="758:11" pos:end="758:13">(<expr pos:start="758:12" pos:end="758:12"><literal type="number" pos:start="758:12" pos:end="758:12">1</literal></expr>)</condition> <block pos:start="758:15" pos:end="818:5">{<block_content pos:start="760:9" pos:end="817:9">
        <comment type="line" pos:start="759:9" pos:end="759:32">// Gobble initial spaces</comment>
        <while pos:start="760:9" pos:end="762:9">while <condition pos:start="760:15" pos:end="760:43">(<expr pos:start="760:16" pos:end="760:42"><call pos:start="760:16" pos:end="760:42"><name pos:start="760:16" pos:end="760:22">isspace</name><argument_list pos:start="760:23" pos:end="760:42">(<argument pos:start="760:24" pos:end="760:41"><expr pos:start="760:24" pos:end="760:41"><operator pos:start="760:24" pos:end="760:24">*</operator><operator pos:start="760:25" pos:end="760:25">(</operator><name pos:start="760:26" pos:end="760:33">unsigned</name> <name pos:start="760:35" pos:end="760:38">char</name><operator pos:start="760:39" pos:end="760:39">*</operator><operator pos:start="760:40" pos:end="760:40">)</operator><name pos:start="760:41" pos:end="760:41">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="760:45" pos:end="762:9">{<block_content pos:start="761:13" pos:end="761:16">
	    <expr_stmt pos:start="761:13" pos:end="761:16"><expr pos:start="761:13" pos:end="761:15"><name pos:start="761:13" pos:end="761:13">s</name><operator pos:start="761:14" pos:end="761:15">++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt pos:start="763:9" pos:end="763:44"><expr pos:start="763:9" pos:end="763:43"><name pos:start="763:9" pos:end="763:12">name</name> <operator pos:start="763:14" pos:end="763:14">=</operator> <call pos:start="763:16" pos:end="763:43"><name pos:start="763:16" pos:end="763:26">skip_quoted</name><argument_list pos:start="763:27" pos:end="763:43">(<argument pos:start="763:28" pos:end="763:29"><expr pos:start="763:28" pos:end="763:29"><operator pos:start="763:28" pos:end="763:28">&amp;</operator><name pos:start="763:29" pos:end="763:29">s</name></expr></argument>, <argument pos:start="763:32" pos:end="763:34"><expr pos:start="763:32" pos:end="763:34"><literal type="string" pos:start="763:32" pos:end="763:34">"="</literal></expr></argument>, <argument pos:start="763:37" pos:end="763:39"><expr pos:start="763:37" pos:end="763:39"><literal type="string" pos:start="763:37" pos:end="763:39">" "</literal></expr></argument>, <argument pos:start="763:42" pos:end="763:42"><expr pos:start="763:42" pos:end="763:42"><literal type="number" pos:start="763:42" pos:end="763:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:start="764:9" pos:end="764:76">// Value is either quote-delimited, or ends at first comma or space.</comment>
	<if_stmt pos:start="765:9" pos:end="773:9"><if pos:start="765:9" pos:end="771:9">if <condition pos:start="765:12" pos:end="765:25">(<expr pos:start="765:13" pos:end="765:24"><name pos:start="765:13" pos:end="765:16"><name pos:start="765:13" pos:end="765:13">s</name><index pos:start="765:14" pos:end="765:16">[<expr pos:start="765:15" pos:end="765:15"><literal type="number" pos:start="765:15" pos:end="765:15">0</literal></expr>]</index></name> <operator pos:start="765:18" pos:end="765:19">==</operator> <literal type="char" pos:start="765:21" pos:end="765:24">'\"'</literal></expr>)</condition> <block pos:start="765:27" pos:end="771:9">{<block_content pos:start="766:13" pos:end="770:13">
	    <expr_stmt pos:start="766:13" pos:end="766:16"><expr pos:start="766:13" pos:end="766:15"><name pos:start="766:13" pos:end="766:13">s</name><operator pos:start="766:14" pos:end="766:15">++</operator></expr>;</expr_stmt>
	    <expr_stmt pos:start="767:13" pos:end="767:53"><expr pos:start="767:13" pos:end="767:52"><name pos:start="767:13" pos:end="767:17">value</name> <operator pos:start="767:19" pos:end="767:19">=</operator> <call pos:start="767:21" pos:end="767:52"><name pos:start="767:21" pos:end="767:31">skip_quoted</name><argument_list pos:start="767:32" pos:end="767:52">(<argument pos:start="767:33" pos:end="767:34"><expr pos:start="767:33" pos:end="767:34"><operator pos:start="767:33" pos:end="767:33">&amp;</operator><name pos:start="767:34" pos:end="767:34">s</name></expr></argument>, <argument pos:start="767:37" pos:end="767:40"><expr pos:start="767:37" pos:end="767:40"><literal type="string" pos:start="767:37" pos:end="767:40">"\""</literal></expr></argument>, <argument pos:start="767:43" pos:end="767:45"><expr pos:start="767:43" pos:end="767:45"><literal type="string" pos:start="767:43" pos:end="767:45">" "</literal></expr></argument>, <argument pos:start="767:48" pos:end="767:51"><expr pos:start="767:48" pos:end="767:51"><literal type="char" pos:start="767:48" pos:end="767:51">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="768:13" pos:end="770:13"><if pos:start="768:13" pos:end="770:13">if <condition pos:start="768:16" pos:end="768:28">(<expr pos:start="768:17" pos:end="768:27"><name pos:start="768:17" pos:end="768:20"><name pos:start="768:17" pos:end="768:17">s</name><index pos:start="768:18" pos:end="768:20">[<expr pos:start="768:19" pos:end="768:19"><literal type="number" pos:start="768:19" pos:end="768:19">0</literal></expr>]</index></name> <operator pos:start="768:22" pos:end="768:23">==</operator> <literal type="char" pos:start="768:25" pos:end="768:27">','</literal></expr>)</condition> <block pos:start="768:30" pos:end="770:13">{<block_content pos:start="769:17" pos:end="769:20">
		<expr_stmt pos:start="769:17" pos:end="769:20"><expr pos:start="769:17" pos:end="769:19"><name pos:start="769:17" pos:end="769:17">s</name><operator pos:start="769:18" pos:end="769:19">++</operator></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else pos:start="771:11" pos:end="773:9">else <block pos:start="771:16" pos:end="773:9">{<block_content pos:start="772:13" pos:end="772:50">
	    <expr_stmt pos:start="772:13" pos:end="772:50"><expr pos:start="772:13" pos:end="772:49"><name pos:start="772:13" pos:end="772:17">value</name> <operator pos:start="772:19" pos:end="772:19">=</operator> <call pos:start="772:21" pos:end="772:49"><name pos:start="772:21" pos:end="772:31">skip_quoted</name><argument_list pos:start="772:32" pos:end="772:49">(<argument pos:start="772:33" pos:end="772:34"><expr pos:start="772:33" pos:end="772:34"><operator pos:start="772:33" pos:end="772:33">&amp;</operator><name pos:start="772:34" pos:end="772:34">s</name></expr></argument>, <argument pos:start="772:37" pos:end="772:40"><expr pos:start="772:37" pos:end="772:40"><literal type="string" pos:start="772:37" pos:end="772:40">", "</literal></expr></argument>, <argument pos:start="772:43" pos:end="772:45"><expr pos:start="772:43" pos:end="772:45"><literal type="string" pos:start="772:43" pos:end="772:45">" "</literal></expr></argument>, <argument pos:start="772:48" pos:end="772:48"><expr pos:start="772:48" pos:end="772:48"><literal type="number" pos:start="772:48" pos:end="772:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="772:52" pos:end="772:84">// IE uses commas, FF uses spaces</comment>
	</block_content>}</block></else></if_stmt>
	<if_stmt pos:start="774:9" pos:end="776:9"><if pos:start="774:9" pos:end="776:9">if <condition pos:start="774:12" pos:end="774:26">(<expr pos:start="774:13" pos:end="774:25"><operator pos:start="774:13" pos:end="774:13">*</operator><name pos:start="774:14" pos:end="774:17">name</name> <operator pos:start="774:19" pos:end="774:20">==</operator> <literal type="char" pos:start="774:22" pos:end="774:25">'\0'</literal></expr>)</condition> <block pos:start="774:28" pos:end="776:9">{<block_content pos:start="775:13" pos:end="775:18">
	    <break pos:start="775:13" pos:end="775:18">break;</break>
	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="778:9" pos:end="778:45"><expr pos:start="778:9" pos:end="778:44"><call pos:start="778:9" pos:end="778:44"><name pos:start="778:9" pos:end="778:16">memcmp_s</name><argument_list pos:start="778:17" pos:end="778:44">(<argument pos:start="778:18" pos:end="778:21"><expr pos:start="778:18" pos:end="778:21"><name pos:start="778:18" pos:end="778:21">name</name></expr></argument>, <argument pos:start="778:24" pos:end="778:24"><expr pos:start="778:24" pos:end="778:24"><literal type="number" pos:start="778:24" pos:end="778:24">8</literal></expr></argument>, <argument pos:start="778:27" pos:end="778:36"><expr pos:start="778:27" pos:end="778:36"><literal type="string" pos:start="778:27" pos:end="778:36">"username"</literal></expr></argument>, <argument pos:start="778:39" pos:end="778:39"><expr pos:start="778:39" pos:end="778:39"><literal type="number" pos:start="778:39" pos:end="778:39">8</literal></expr></argument>, <argument pos:start="778:42" pos:end="778:43"><expr pos:start="778:42" pos:end="778:43"><operator pos:start="778:42" pos:end="778:42">&amp;</operator><name pos:start="778:43" pos:end="778:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="779:9" pos:end="782:9"><if pos:start="779:9" pos:end="782:9">if <condition pos:start="779:12" pos:end="779:15">(<expr pos:start="779:13" pos:end="779:14"><operator pos:start="779:13" pos:end="779:13">!</operator><name pos:start="779:14" pos:end="779:14">i</name></expr>)</condition> <block pos:start="779:17" pos:end="782:9">{<block_content pos:start="780:13" pos:end="781:21">
	    <expr_stmt pos:start="780:13" pos:end="780:50"><expr pos:start="780:13" pos:end="780:49"><name pos:start="780:13" pos:end="780:20"><name pos:start="780:13" pos:end="780:14">ah</name><operator pos:start="780:15" pos:end="780:16">-&gt;</operator><name pos:start="780:17" pos:end="780:20">user</name></name> <operator pos:start="780:22" pos:end="780:22">=</operator> <call pos:start="780:24" pos:end="780:49"><name pos:start="780:24" pos:end="780:30">STRNDUP</name><argument_list pos:start="780:31" pos:end="780:49">(<argument pos:start="780:32" pos:end="780:36"><expr pos:start="780:32" pos:end="780:36"><name pos:start="780:32" pos:end="780:36">value</name></expr></argument>, <argument pos:start="780:39" pos:end="780:48"><expr pos:start="780:39" pos:end="780:48"><name pos:start="780:39" pos:end="780:48">MAX_UIDPWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue pos:start="781:13" pos:end="781:21">continue;</continue>
	</block_content>}</block></if></if_stmt> 

        <expr_stmt pos:start="784:9" pos:end="784:43"><expr pos:start="784:9" pos:end="784:42"><call pos:start="784:9" pos:end="784:42"><name pos:start="784:9" pos:end="784:16">memcmp_s</name><argument_list pos:start="784:17" pos:end="784:42">(<argument pos:start="784:18" pos:end="784:21"><expr pos:start="784:18" pos:end="784:21"><name pos:start="784:18" pos:end="784:21">name</name></expr></argument>, <argument pos:start="784:24" pos:end="784:24"><expr pos:start="784:24" pos:end="784:24"><literal type="number" pos:start="784:24" pos:end="784:24">6</literal></expr></argument>, <argument pos:start="784:27" pos:end="784:34"><expr pos:start="784:27" pos:end="784:34"><literal type="string" pos:start="784:27" pos:end="784:34">"cnonce"</literal></expr></argument>, <argument pos:start="784:37" pos:end="784:37"><expr pos:start="784:37" pos:end="784:37"><literal type="number" pos:start="784:37" pos:end="784:37">6</literal></expr></argument>, <argument pos:start="784:40" pos:end="784:41"><expr pos:start="784:40" pos:end="784:41"><operator pos:start="784:40" pos:end="784:40">&amp;</operator><name pos:start="784:41" pos:end="784:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="785:9" pos:end="788:9"><if pos:start="785:9" pos:end="788:9">if <condition pos:start="785:12" pos:end="785:15">(<expr pos:start="785:13" pos:end="785:14"><operator pos:start="785:13" pos:end="785:13">!</operator><name pos:start="785:14" pos:end="785:14">i</name></expr>)</condition> <block pos:start="785:17" pos:end="788:9">{<block_content pos:start="786:13" pos:end="787:21">
            <expr_stmt pos:start="786:13" pos:end="786:51"><expr pos:start="786:13" pos:end="786:50"><name pos:start="786:13" pos:end="786:22"><name pos:start="786:13" pos:end="786:14">ah</name><operator pos:start="786:15" pos:end="786:16">-&gt;</operator><name pos:start="786:17" pos:end="786:22">cnonce</name></name> <operator pos:start="786:24" pos:end="786:24">=</operator> <call pos:start="786:26" pos:end="786:50"><name pos:start="786:26" pos:end="786:32">STRNDUP</name><argument_list pos:start="786:33" pos:end="786:50">(<argument pos:start="786:34" pos:end="786:38"><expr pos:start="786:34" pos:end="786:38"><name pos:start="786:34" pos:end="786:38">value</name></expr></argument>, <argument pos:start="786:41" pos:end="786:49"><expr pos:start="786:41" pos:end="786:49"><name pos:start="786:41" pos:end="786:49">MAX_NONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue pos:start="787:13" pos:end="787:21">continue;</continue>
	</block_content>}</block></if></if_stmt> 

	<expr_stmt pos:start="790:9" pos:end="790:45"><expr pos:start="790:9" pos:end="790:44"><call pos:start="790:9" pos:end="790:44"><name pos:start="790:9" pos:end="790:16">memcmp_s</name><argument_list pos:start="790:17" pos:end="790:44">(<argument pos:start="790:18" pos:end="790:21"><expr pos:start="790:18" pos:end="790:21"><name pos:start="790:18" pos:end="790:21">name</name></expr></argument>, <argument pos:start="790:24" pos:end="790:24"><expr pos:start="790:24" pos:end="790:24"><literal type="number" pos:start="790:24" pos:end="790:24">8</literal></expr></argument>, <argument pos:start="790:27" pos:end="790:36"><expr pos:start="790:27" pos:end="790:36"><literal type="string" pos:start="790:27" pos:end="790:36">"response"</literal></expr></argument>, <argument pos:start="790:39" pos:end="790:39"><expr pos:start="790:39" pos:end="790:39"><literal type="number" pos:start="790:39" pos:end="790:39">8</literal></expr></argument>, <argument pos:start="790:42" pos:end="790:43"><expr pos:start="790:42" pos:end="790:43"><operator pos:start="790:42" pos:end="790:42">&amp;</operator><name pos:start="790:43" pos:end="790:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="791:9" pos:end="794:9"><if pos:start="791:9" pos:end="794:9">if <condition pos:start="791:12" pos:end="791:15">(<expr pos:start="791:13" pos:end="791:14"><operator pos:start="791:13" pos:end="791:13">!</operator><name pos:start="791:14" pos:end="791:14">i</name></expr>)</condition> <block pos:start="791:17" pos:end="794:9">{<block_content pos:start="792:13" pos:end="793:21">
            <expr_stmt pos:start="792:13" pos:end="792:56"><expr pos:start="792:13" pos:end="792:55"><name pos:start="792:13" pos:end="792:24"><name pos:start="792:13" pos:end="792:14">ah</name><operator pos:start="792:15" pos:end="792:16">-&gt;</operator><name pos:start="792:17" pos:end="792:24">response</name></name> <operator pos:start="792:26" pos:end="792:26">=</operator> <call pos:start="792:28" pos:end="792:55"><name pos:start="792:28" pos:end="792:34">STRNDUP</name><argument_list pos:start="792:35" pos:end="792:55">(<argument pos:start="792:36" pos:end="792:40"><expr pos:start="792:36" pos:end="792:40"><name pos:start="792:36" pos:end="792:40">value</name></expr></argument>, <argument pos:start="792:43" pos:end="792:54"><expr pos:start="792:43" pos:end="792:54"><name pos:start="792:43" pos:end="792:54">MAX_RESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue pos:start="793:13" pos:end="793:21">continue;</continue>
        </block_content>}</block></if></if_stmt> 

	<expr_stmt pos:start="796:9" pos:end="796:40"><expr pos:start="796:9" pos:end="796:39"><call pos:start="796:9" pos:end="796:39"><name pos:start="796:9" pos:end="796:16">memcmp_s</name><argument_list pos:start="796:17" pos:end="796:39">(<argument pos:start="796:18" pos:end="796:21"><expr pos:start="796:18" pos:end="796:21"><name pos:start="796:18" pos:end="796:21">name</name></expr></argument>, <argument pos:start="796:24" pos:end="796:24"><expr pos:start="796:24" pos:end="796:24"><literal type="number" pos:start="796:24" pos:end="796:24">3</literal></expr></argument>, <argument pos:start="796:27" pos:end="796:31"><expr pos:start="796:27" pos:end="796:31"><literal type="string" pos:start="796:27" pos:end="796:31">"uri"</literal></expr></argument>, <argument pos:start="796:34" pos:end="796:34"><expr pos:start="796:34" pos:end="796:34"><literal type="number" pos:start="796:34" pos:end="796:34">3</literal></expr></argument>, <argument pos:start="796:37" pos:end="796:38"><expr pos:start="796:37" pos:end="796:38"><operator pos:start="796:37" pos:end="796:37">&amp;</operator><name pos:start="796:38" pos:end="796:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="797:9" pos:end="800:9"><if pos:start="797:9" pos:end="800:9">if <condition pos:start="797:12" pos:end="797:15">(<expr pos:start="797:13" pos:end="797:14"><operator pos:start="797:13" pos:end="797:13">!</operator><name pos:start="797:14" pos:end="797:14">i</name></expr>)</condition> <block pos:start="797:17" pos:end="800:9">{<block_content pos:start="798:13" pos:end="799:21">
	    <expr_stmt pos:start="798:13" pos:end="798:48"><expr pos:start="798:13" pos:end="798:47"><name pos:start="798:13" pos:end="798:19"><name pos:start="798:13" pos:end="798:14">ah</name><operator pos:start="798:15" pos:end="798:16">-&gt;</operator><name pos:start="798:17" pos:end="798:19">uri</name></name> <operator pos:start="798:21" pos:end="798:21">=</operator> <call pos:start="798:23" pos:end="798:47"><name pos:start="798:23" pos:end="798:29">STRNDUP</name><argument_list pos:start="798:30" pos:end="798:47">(<argument pos:start="798:31" pos:end="798:35"><expr pos:start="798:31" pos:end="798:35"><name pos:start="798:31" pos:end="798:35">value</name></expr></argument>, <argument pos:start="798:38" pos:end="798:46"><expr pos:start="798:38" pos:end="798:46"><name pos:start="798:38" pos:end="798:46">MAX_REALM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue pos:start="799:13" pos:end="799:21">continue;</continue>
	</block_content>}</block></if></if_stmt> 

	<expr_stmt pos:start="802:9" pos:end="802:40"><expr pos:start="802:9" pos:end="802:39"><call pos:start="802:9" pos:end="802:39"><name pos:start="802:9" pos:end="802:16">memcmp_s</name><argument_list pos:start="802:17" pos:end="802:39">(<argument pos:start="802:18" pos:end="802:21"><expr pos:start="802:18" pos:end="802:21"><name pos:start="802:18" pos:end="802:21">name</name></expr></argument>, <argument pos:start="802:24" pos:end="802:24"><expr pos:start="802:24" pos:end="802:24"><literal type="number" pos:start="802:24" pos:end="802:24">3</literal></expr></argument>, <argument pos:start="802:27" pos:end="802:31"><expr pos:start="802:27" pos:end="802:31"><literal type="string" pos:start="802:27" pos:end="802:31">"qop"</literal></expr></argument>, <argument pos:start="802:34" pos:end="802:34"><expr pos:start="802:34" pos:end="802:34"><literal type="number" pos:start="802:34" pos:end="802:34">3</literal></expr></argument>, <argument pos:start="802:37" pos:end="802:38"><expr pos:start="802:37" pos:end="802:38"><operator pos:start="802:37" pos:end="802:37">&amp;</operator><name pos:start="802:38" pos:end="802:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="803:9" pos:end="806:9"><if pos:start="803:9" pos:end="806:9">if <condition pos:start="803:12" pos:end="803:15">(<expr pos:start="803:13" pos:end="803:14"><operator pos:start="803:13" pos:end="803:13">!</operator><name pos:start="803:14" pos:end="803:14">i</name></expr>)</condition> <block pos:start="803:17" pos:end="806:9">{<block_content pos:start="804:13" pos:end="805:21">
            <expr_stmt pos:start="804:13" pos:end="804:46"><expr pos:start="804:13" pos:end="804:45"><name pos:start="804:13" pos:end="804:19"><name pos:start="804:13" pos:end="804:14">ah</name><operator pos:start="804:15" pos:end="804:16">-&gt;</operator><name pos:start="804:17" pos:end="804:19">qop</name></name> <operator pos:start="804:21" pos:end="804:21">=</operator> <call pos:start="804:23" pos:end="804:45"><name pos:start="804:23" pos:end="804:29">STRNDUP</name><argument_list pos:start="804:30" pos:end="804:45">(<argument pos:start="804:31" pos:end="804:35"><expr pos:start="804:31" pos:end="804:35"><name pos:start="804:31" pos:end="804:35">value</name></expr></argument>, <argument pos:start="804:38" pos:end="804:44"><expr pos:start="804:38" pos:end="804:44"><name pos:start="804:38" pos:end="804:44">MAX_QOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue pos:start="805:13" pos:end="805:21">continue;</continue>
	</block_content>}</block></if></if_stmt> 

	<expr_stmt pos:start="808:9" pos:end="808:39"><expr pos:start="808:9" pos:end="808:38"><call pos:start="808:9" pos:end="808:38"><name pos:start="808:9" pos:end="808:16">memcmp_s</name><argument_list pos:start="808:17" pos:end="808:38">(<argument pos:start="808:18" pos:end="808:21"><expr pos:start="808:18" pos:end="808:21"><name pos:start="808:18" pos:end="808:21">name</name></expr></argument>, <argument pos:start="808:24" pos:end="808:24"><expr pos:start="808:24" pos:end="808:24"><literal type="number" pos:start="808:24" pos:end="808:24">2</literal></expr></argument>, <argument pos:start="808:27" pos:end="808:30"><expr pos:start="808:27" pos:end="808:30"><literal type="string" pos:start="808:27" pos:end="808:30">"nc"</literal></expr></argument>, <argument pos:start="808:33" pos:end="808:33"><expr pos:start="808:33" pos:end="808:33"><literal type="number" pos:start="808:33" pos:end="808:33">2</literal></expr></argument>, <argument pos:start="808:36" pos:end="808:37"><expr pos:start="808:36" pos:end="808:37"><operator pos:start="808:36" pos:end="808:36">&amp;</operator><name pos:start="808:37" pos:end="808:37">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="809:9" pos:end="812:9"><if pos:start="809:9" pos:end="812:9">if <condition pos:start="809:12" pos:end="809:15">(<expr pos:start="809:13" pos:end="809:14"><operator pos:start="809:13" pos:end="809:13">!</operator><name pos:start="809:14" pos:end="809:14">i</name></expr>)</condition> <block pos:start="809:17" pos:end="812:9">{<block_content pos:start="810:13" pos:end="811:21">
	    <expr_stmt pos:start="810:13" pos:end="810:44"><expr pos:start="810:13" pos:end="810:43"><name pos:start="810:13" pos:end="810:18"><name pos:start="810:13" pos:end="810:14">ah</name><operator pos:start="810:15" pos:end="810:16">-&gt;</operator><name pos:start="810:17" pos:end="810:18">nc</name></name> <operator pos:start="810:20" pos:end="810:20">=</operator> <call pos:start="810:22" pos:end="810:43"><name pos:start="810:22" pos:end="810:28">STRNDUP</name><argument_list pos:start="810:29" pos:end="810:43">(<argument pos:start="810:30" pos:end="810:34"><expr pos:start="810:30" pos:end="810:34"><name pos:start="810:30" pos:end="810:34">value</name></expr></argument>, <argument pos:start="810:37" pos:end="810:42"><expr pos:start="810:37" pos:end="810:42"><name pos:start="810:37" pos:end="810:42">MAX_NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue pos:start="811:13" pos:end="811:21">continue;</continue>
        </block_content>}</block></if></if_stmt> 

	<expr_stmt pos:start="814:9" pos:end="814:42"><expr pos:start="814:9" pos:end="814:41"><call pos:start="814:9" pos:end="814:41"><name pos:start="814:9" pos:end="814:16">memcmp_s</name><argument_list pos:start="814:17" pos:end="814:41">(<argument pos:start="814:18" pos:end="814:21"><expr pos:start="814:18" pos:end="814:21"><name pos:start="814:18" pos:end="814:21">name</name></expr></argument>, <argument pos:start="814:24" pos:end="814:24"><expr pos:start="814:24" pos:end="814:24"><literal type="number" pos:start="814:24" pos:end="814:24">5</literal></expr></argument>, <argument pos:start="814:27" pos:end="814:33"><expr pos:start="814:27" pos:end="814:33"><literal type="string" pos:start="814:27" pos:end="814:33">"nonce"</literal></expr></argument>, <argument pos:start="814:36" pos:end="814:36"><expr pos:start="814:36" pos:end="814:36"><literal type="number" pos:start="814:36" pos:end="814:36">5</literal></expr></argument>, <argument pos:start="814:39" pos:end="814:40"><expr pos:start="814:39" pos:end="814:40"><operator pos:start="814:39" pos:end="814:39">&amp;</operator><name pos:start="814:40" pos:end="814:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="815:9" pos:end="817:9"><if pos:start="815:9" pos:end="817:9">if <condition pos:start="815:12" pos:end="815:15">(<expr pos:start="815:13" pos:end="815:14"><operator pos:start="815:13" pos:end="815:13">!</operator><name pos:start="815:14" pos:end="815:14">i</name></expr>)</condition> <block pos:start="815:17" pos:end="817:9">{<block_content pos:start="816:13" pos:end="816:50">
	    <expr_stmt pos:start="816:13" pos:end="816:50"><expr pos:start="816:13" pos:end="816:49"><name pos:start="816:13" pos:end="816:21"><name pos:start="816:13" pos:end="816:14">ah</name><operator pos:start="816:15" pos:end="816:16">-&gt;</operator><name pos:start="816:17" pos:end="816:21">nonce</name></name> <operator pos:start="816:23" pos:end="816:23">=</operator> <call pos:start="816:25" pos:end="816:49"><name pos:start="816:25" pos:end="816:31">STRNDUP</name><argument_list pos:start="816:32" pos:end="816:49">(<argument pos:start="816:33" pos:end="816:37"><expr pos:start="816:33" pos:end="816:37"><name pos:start="816:33" pos:end="816:37">value</name></expr></argument>, <argument pos:start="816:40" pos:end="816:48"><expr pos:start="816:40" pos:end="816:48"><name pos:start="816:40" pos:end="816:48">MAX_NONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>
<comment type="block" pos:start="820:1" pos:end="823:3">/*
 * Performs parsing of HTTP Authentication header from
 * the client when Token(bearer) authentication is used.
 */</comment>
<function pos:start="824:1" pos:end="857:1"><type pos:start="824:1" pos:end="824:11"><specifier pos:start="824:1" pos:end="824:6">static</specifier> <name pos:start="824:8" pos:end="824:11">void</name></type> <name pos:start="824:13" pos:end="824:35">mg_parse_auth_hdr_token</name> <parameter_list pos:start="824:37" pos:end="826:59">(<parameter pos:start="824:38" pos:end="824:63"><decl pos:start="824:38" pos:end="824:63"><type pos:start="824:38" pos:end="824:63"><name pos:start="824:38" pos:end="824:57"><name pos:start="824:38" pos:end="824:43">struct</name> <name pos:start="824:45" pos:end="824:57">mg_connection</name></name> <modifier pos:start="824:59" pos:end="824:59">*</modifier></type><name pos:start="824:60" pos:end="824:63">conn</name></decl></parameter>, 
				     <parameter pos:start="825:38" pos:end="825:60"><decl pos:start="825:38" pos:end="825:60"><type pos:start="825:38" pos:end="825:60"><specifier pos:start="825:38" pos:end="825:42">const</specifier> <name pos:start="825:44" pos:end="825:47">char</name> <modifier pos:start="825:49" pos:end="825:49">*</modifier></type><name pos:start="825:50" pos:end="825:60">auth_header</name></decl></parameter>,
	                             <parameter pos:start="826:38" pos:end="826:58"><decl pos:start="826:38" pos:end="826:58"><type pos:start="826:38" pos:end="826:58"><name pos:start="826:38" pos:end="826:54">EST_HTTP_AUTH_HDR</name> <modifier pos:start="826:56" pos:end="826:56">*</modifier></type><name pos:start="826:57" pos:end="826:58">ah</name></decl></parameter>)</parameter_list>
<block pos:start="827:1" pos:end="857:1">{<block_content pos:start="828:5" pos:end="856:5">
    <decl_stmt pos:start="828:5" pos:end="828:20"><decl pos:start="828:5" pos:end="828:15"><type pos:start="828:5" pos:end="828:10"><name pos:start="828:5" pos:end="828:8">char</name> <modifier pos:start="828:10" pos:end="828:10">*</modifier></type><name pos:start="828:11" pos:end="828:15">value</name></decl>, <decl pos:start="828:18" pos:end="828:19"><type ref="prev" pos:start="828:5" pos:end="828:10"><modifier pos:start="828:18" pos:end="828:18">*</modifier></type><name pos:start="828:19" pos:end="828:19">s</name></decl>;</decl_stmt>
    <decl_stmt pos:start="829:5" pos:end="829:45"><decl pos:start="829:5" pos:end="829:44"><type pos:start="829:5" pos:end="829:8"><name pos:start="829:5" pos:end="829:8">char</name></type> <name pos:start="829:10" pos:end="829:44"><name pos:start="829:10" pos:end="829:22">value_decoded</name><index pos:start="829:23" pos:end="829:44">[<expr pos:start="829:24" pos:end="829:43"><name pos:start="829:24" pos:end="829:41">MAX_AUTH_TOKEN_LEN</name><operator pos:start="829:42" pos:end="829:42">*</operator><literal type="number" pos:start="829:43" pos:end="829:43">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="830:5" pos:end="830:12"><decl pos:start="830:5" pos:end="830:11"><type pos:start="830:5" pos:end="830:7"><name pos:start="830:5" pos:end="830:7">int</name></type> <name pos:start="830:9" pos:end="830:11">len</name></decl>;</decl_stmt>
    
    <expr_stmt pos:start="832:5" pos:end="832:64"><expr pos:start="832:5" pos:end="832:63"><name pos:start="832:5" pos:end="832:5">s</name> <operator pos:start="832:7" pos:end="832:7">=</operator> <operator pos:start="832:9" pos:end="832:9">(</operator><name pos:start="832:10" pos:end="832:13">char</name> <operator pos:start="832:15" pos:end="832:15">*</operator><operator pos:start="832:16" pos:end="832:16">)</operator> <name pos:start="832:18" pos:end="832:28">auth_header</name> <operator pos:start="832:30" pos:end="832:30">+</operator> <operator pos:start="832:32" pos:end="832:32">(</operator><call pos:start="832:33" pos:end="832:60"><name pos:start="832:33" pos:end="832:38">strlen</name><argument_list pos:start="832:39" pos:end="832:60">(<argument pos:start="832:40" pos:end="832:59"><expr pos:start="832:40" pos:end="832:59"><name pos:start="832:40" pos:end="832:59">EST_BEARER_TOKEN_STR</name></expr></argument>)</argument_list></call><operator pos:start="832:61" pos:end="832:61">-</operator><literal type="number" pos:start="832:62" pos:end="832:62">1</literal><operator pos:start="832:63" pos:end="832:63">)</operator></expr>;</expr_stmt>

    <comment type="line" pos:start="834:5" pos:end="834:28">// Gobble initial spaces</comment>
    <while pos:start="835:5" pos:end="837:5">while <condition pos:start="835:11" pos:end="835:39">(<expr pos:start="835:12" pos:end="835:38"><call pos:start="835:12" pos:end="835:38"><name pos:start="835:12" pos:end="835:18">isspace</name><argument_list pos:start="835:19" pos:end="835:38">(<argument pos:start="835:20" pos:end="835:37"><expr pos:start="835:20" pos:end="835:37"><operator pos:start="835:20" pos:end="835:20">*</operator><operator pos:start="835:21" pos:end="835:21">(</operator><name pos:start="835:22" pos:end="835:29">unsigned</name> <name pos:start="835:31" pos:end="835:34">char</name><operator pos:start="835:35" pos:end="835:35">*</operator><operator pos:start="835:36" pos:end="835:36">)</operator><name pos:start="835:37" pos:end="835:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="835:41" pos:end="837:5">{<block_content pos:start="836:9" pos:end="836:12">
	<expr_stmt pos:start="836:9" pos:end="836:12"><expr pos:start="836:9" pos:end="836:11"><name pos:start="836:9" pos:end="836:9">s</name><operator pos:start="836:10" pos:end="836:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt pos:start="839:5" pos:end="839:14"><expr pos:start="839:5" pos:end="839:13"><name pos:start="839:5" pos:end="839:9">value</name> <operator pos:start="839:11" pos:end="839:11">=</operator> <name pos:start="839:13" pos:end="839:13">s</name></expr>;</expr_stmt>
    <expr_stmt pos:start="840:5" pos:end="840:51"><expr pos:start="840:5" pos:end="840:50"><call pos:start="840:5" pos:end="840:50"><name pos:start="840:5" pos:end="840:13">memzero_s</name><argument_list pos:start="840:14" pos:end="840:50">(<argument pos:start="840:15" pos:end="840:27"><expr pos:start="840:15" pos:end="840:27"><name pos:start="840:15" pos:end="840:27">value_decoded</name></expr></argument>, <argument pos:start="840:30" pos:end="840:49"><expr pos:start="840:30" pos:end="840:49"><name pos:start="840:30" pos:end="840:47">MAX_AUTH_TOKEN_LEN</name><operator pos:start="840:48" pos:end="840:48">*</operator><literal type="number" pos:start="840:49" pos:end="840:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="841:5" pos:end="841:74"><expr pos:start="841:5" pos:end="841:73"><name pos:start="841:5" pos:end="841:7">len</name> <operator pos:start="841:9" pos:end="841:9">=</operator> <call pos:start="841:11" pos:end="841:73"><name pos:start="841:11" pos:end="841:27">est_base64_decode</name><argument_list pos:start="841:28" pos:end="841:73">(<argument pos:start="841:29" pos:end="841:33"><expr pos:start="841:29" pos:end="841:33"><name pos:start="841:29" pos:end="841:33">value</name></expr></argument>, <argument pos:start="841:36" pos:end="841:48"><expr pos:start="841:36" pos:end="841:48"><name pos:start="841:36" pos:end="841:48">value_decoded</name></expr></argument>, <argument pos:start="841:51" pos:end="841:72"><expr pos:start="841:51" pos:end="841:72"><operator pos:start="841:51" pos:end="841:51">(</operator><name pos:start="841:52" pos:end="841:69">MAX_AUTH_TOKEN_LEN</name><operator pos:start="841:70" pos:end="841:70">*</operator><literal type="number" pos:start="841:71" pos:end="841:71">2</literal><operator pos:start="841:72" pos:end="841:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="842:5" pos:end="845:5"><if pos:start="842:5" pos:end="845:5">if <condition pos:start="842:8" pos:end="842:17">(<expr pos:start="842:9" pos:end="842:16"><name pos:start="842:9" pos:end="842:11">len</name> <operator pos:start="842:13" pos:end="842:14">&lt;=</operator> <literal type="number" pos:start="842:16" pos:end="842:16">0</literal></expr>)</condition> <block pos:start="842:19" pos:end="845:5">{<block_content pos:start="843:9" pos:end="844:15">
	<expr_stmt pos:start="843:9" pos:end="843:91"><expr pos:start="843:9" pos:end="843:90"><call pos:start="843:9" pos:end="843:90"><name pos:start="843:9" pos:end="843:20">EST_LOG_WARN</name><argument_list pos:start="843:21" pos:end="843:90">(<argument pos:start="843:22" pos:end="843:89"><expr pos:start="843:22" pos:end="843:89"><literal type="string" pos:start="843:22" pos:end="843:89">"Base64 decode of HTTP auth credentials failed, HTTP auth will fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="844:9" pos:end="844:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="847:5" pos:end="856:5"><if pos:start="847:5" pos:end="854:5">if <condition pos:start="847:8" pos:end="847:19">(<expr pos:start="847:9" pos:end="847:18"><operator pos:start="847:9" pos:end="847:9">*</operator><name pos:start="847:10" pos:end="847:10">s</name> <operator pos:start="847:12" pos:end="847:13">!=</operator> <literal type="char" pos:start="847:15" pos:end="847:18">'\0'</literal></expr>)</condition> <block pos:start="847:21" pos:end="854:5">{<block_content pos:start="849:9" pos:end="853:9">
        <comment type="block" pos:start="848:9" pos:end="848:59">/*Copy the token into the auth header structure. */</comment>
        <expr_stmt pos:start="849:9" pos:end="849:68"><expr pos:start="849:9" pos:end="849:67"><name pos:start="849:9" pos:end="849:22"><name pos:start="849:9" pos:end="849:10">ah</name><operator pos:start="849:11" pos:end="849:12">-&gt;</operator><name pos:start="849:13" pos:end="849:22">auth_token</name></name> <operator pos:start="849:24" pos:end="849:24">=</operator> <call pos:start="849:26" pos:end="849:67"><name pos:start="849:26" pos:end="849:32">STRNDUP</name><argument_list pos:start="849:33" pos:end="849:67">(<argument pos:start="849:34" pos:end="849:46"><expr pos:start="849:34" pos:end="849:46"><name pos:start="849:34" pos:end="849:46">value_decoded</name></expr></argument>, <argument pos:start="849:49" pos:end="849:66"><expr pos:start="849:49" pos:end="849:66"><name pos:start="849:49" pos:end="849:66">MAX_AUTH_TOKEN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="850:9" pos:end="850:30"><expr pos:start="850:9" pos:end="850:29"><name pos:start="850:9" pos:end="850:16"><name pos:start="850:9" pos:end="850:10">ah</name><operator pos:start="850:11" pos:end="850:12">-&gt;</operator><name pos:start="850:13" pos:end="850:16">mode</name></name> <operator pos:start="850:18" pos:end="850:18">=</operator> <name pos:start="850:20" pos:end="850:29">AUTH_TOKEN</name></expr>;</expr_stmt>
        <if_stmt pos:start="851:9" pos:end="853:9"><if pos:start="851:9" pos:end="853:9">if <condition pos:start="851:12" pos:end="851:35">(<expr pos:start="851:13" pos:end="851:34"><name pos:start="851:13" pos:end="851:26"><name pos:start="851:13" pos:end="851:14">ah</name><operator pos:start="851:15" pos:end="851:16">-&gt;</operator><name pos:start="851:17" pos:end="851:26">auth_token</name></name> <operator pos:start="851:28" pos:end="851:29">==</operator> <name pos:start="851:31" pos:end="851:34">NULL</name></expr>)</condition> <block pos:start="851:37" pos:end="853:9">{<block_content pos:start="852:13" pos:end="852:83">
            <expr_stmt pos:start="852:13" pos:end="852:83"><expr pos:start="852:13" pos:end="852:82"><call pos:start="852:13" pos:end="852:82"><name pos:start="852:13" pos:end="852:23">EST_LOG_ERR</name><argument_list pos:start="852:24" pos:end="852:82">(<argument pos:start="852:25" pos:end="852:81"><expr pos:start="852:25" pos:end="852:81"><literal type="string" pos:start="852:25" pos:end="852:81">"Failed to obtain memory for authentication token buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="854:7" pos:end="856:5">else <block pos:start="854:12" pos:end="856:5">{<block_content pos:start="855:9" pos:end="855:76">
	<expr_stmt pos:start="855:9" pos:end="855:76"><expr pos:start="855:9" pos:end="855:75"><call pos:start="855:9" pos:end="855:75"><name pos:start="855:9" pos:end="855:19">EST_LOG_ERR</name><argument_list pos:start="855:20" pos:end="855:75">(<argument pos:start="855:21" pos:end="855:74"><expr pos:start="855:21" pos:end="855:74"><literal type="string" pos:start="855:21" pos:end="855:74">"Authentication header from client contained no Token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>   
</block_content>}</block></function>
<comment type="block" pos:start="858:1" pos:end="867:3">/*
 * This function parses the HTTP Authentication header
 * from the client.  It will fill in the fields on the
 * EST_HTTP_AUTH_HDR struct, which are used later for
 * verifying the user's credentials using either HTTP
 * Basic or HTTP Digest authentication. The ah parameter
 * should already be allocated when calling this function.
 *
 * Return either good, bad, or missing 
 */</comment>
<function pos:start="868:1" pos:end="933:1"><type pos:start="868:1" pos:end="868:24"><name pos:start="868:1" pos:end="868:24">EST_HTTP_AUTH_HDR_RESULT</name></type> <name pos:start="868:26" pos:end="868:45">mg_parse_auth_header</name> <parameter_list pos:start="868:47" pos:end="869:69">(<parameter pos:start="868:48" pos:end="868:73"><decl pos:start="868:48" pos:end="868:73"><type pos:start="868:48" pos:end="868:73"><name pos:start="868:48" pos:end="868:67"><name pos:start="868:48" pos:end="868:53">struct</name> <name pos:start="868:55" pos:end="868:67">mg_connection</name></name> <modifier pos:start="868:69" pos:end="868:69">*</modifier></type><name pos:start="868:70" pos:end="868:73">conn</name></decl></parameter>, 
                                               <parameter pos:start="869:48" pos:end="869:68"><decl pos:start="869:48" pos:end="869:68"><type pos:start="869:48" pos:end="869:68"><name pos:start="869:48" pos:end="869:64">EST_HTTP_AUTH_HDR</name> <modifier pos:start="869:66" pos:end="869:66">*</modifier></type><name pos:start="869:67" pos:end="869:68">ah</name></decl></parameter>)</parameter_list>
<block pos:start="870:1" pos:end="933:1">{<block_content pos:start="871:5" pos:end="932:29">
    <decl_stmt pos:start="871:5" pos:end="871:28"><decl pos:start="871:5" pos:end="871:27"><type pos:start="871:5" pos:end="871:16"><specifier pos:start="871:5" pos:end="871:9">const</specifier> <name pos:start="871:11" pos:end="871:14">char</name> <modifier pos:start="871:16" pos:end="871:16">*</modifier></type><name pos:start="871:17" pos:end="871:27">auth_header</name></decl>;</decl_stmt>

    <comment type="block" pos:start="873:5" pos:end="875:7">/*
     * Get the Auth header from the HTTP client 
     */</comment>
    <if_stmt pos:start="876:5" pos:end="878:5"><if pos:start="876:5" pos:end="878:5">if <condition pos:start="876:8" pos:end="876:69">(<expr pos:start="876:9" pos:end="876:68"><operator pos:start="876:9" pos:end="876:9">(</operator><name pos:start="876:10" pos:end="876:20">auth_header</name> <operator pos:start="876:22" pos:end="876:22">=</operator> <call pos:start="876:24" pos:end="876:59"><name pos:start="876:24" pos:end="876:36">mg_get_header</name><argument_list pos:start="876:37" pos:end="876:59">(<argument pos:start="876:38" pos:end="876:41"><expr pos:start="876:38" pos:end="876:41"><name pos:start="876:38" pos:end="876:41">conn</name></expr></argument>, <argument pos:start="876:44" pos:end="876:58"><expr pos:start="876:44" pos:end="876:58"><literal type="string" pos:start="876:44" pos:end="876:58">"Authorization"</literal></expr></argument>)</argument_list></call><operator pos:start="876:60" pos:end="876:60">)</operator> <operator pos:start="876:62" pos:end="876:63">==</operator> <name pos:start="876:65" pos:end="876:68">NULL</name></expr>)</condition> <block pos:start="876:71" pos:end="878:5">{<block_content pos:start="877:9" pos:end="877:36">
	<return pos:start="877:9" pos:end="877:36">return <expr pos:start="877:16" pos:end="877:35"><name pos:start="877:16" pos:end="877:35">EST_AUTH_HDR_MISSING</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="880:5" pos:end="903:5"><if pos:start="880:5" pos:end="886:5">if <condition pos:start="880:8" pos:end="880:55">(<expr pos:start="880:9" pos:end="880:54"><call pos:start="880:9" pos:end="880:49"><name pos:start="880:9" pos:end="880:22">mg_strncasecmp</name><argument_list pos:start="880:23" pos:end="880:49">(<argument pos:start="880:24" pos:end="880:34"><expr pos:start="880:24" pos:end="880:34"><name pos:start="880:24" pos:end="880:34">auth_header</name></expr></argument>, <argument pos:start="880:37" pos:end="880:45"><expr pos:start="880:37" pos:end="880:45"><literal type="string" pos:start="880:37" pos:end="880:45">"Digest "</literal></expr></argument>, <argument pos:start="880:48" pos:end="880:48"><expr pos:start="880:48" pos:end="880:48"><literal type="number" pos:start="880:48" pos:end="880:48">7</literal></expr></argument>)</argument_list></call> <operator pos:start="880:51" pos:end="880:52">==</operator> <literal type="number" pos:start="880:54" pos:end="880:54">0</literal></expr>)</condition> <block pos:start="880:57" pos:end="886:5">{<block_content pos:start="882:9" pos:end="885:56">
	<comment type="block" pos:start="881:9" pos:end="881:60">/* Make sure server is configured for digest auth */</comment>
	<if_stmt pos:start="882:9" pos:end="884:9"><if pos:start="882:9" pos:end="884:9">if <condition pos:start="882:12" pos:end="882:57">(<expr pos:start="882:13" pos:end="882:56"><name pos:start="882:13" pos:end="882:41"><name pos:start="882:13" pos:end="882:16">conn</name><operator pos:start="882:17" pos:end="882:18">-&gt;</operator><name pos:start="882:19" pos:end="882:21">ctx</name><operator pos:start="882:22" pos:end="882:23">-&gt;</operator><name pos:start="882:24" pos:end="882:30">est_ctx</name><operator pos:start="882:31" pos:end="882:32">-&gt;</operator><name pos:start="882:33" pos:end="882:41">auth_mode</name></name> <operator pos:start="882:43" pos:end="882:44">!=</operator> <name pos:start="882:46" pos:end="882:56">AUTH_DIGEST</name></expr>)</condition> <block pos:start="882:59" pos:end="884:9">{<block_content pos:start="883:13" pos:end="883:36">
	    <return pos:start="883:13" pos:end="883:36">return <expr pos:start="883:20" pos:end="883:35"><name pos:start="883:20" pos:end="883:35">EST_AUTH_HDR_BAD</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt pos:start="885:9" pos:end="885:56"><expr pos:start="885:9" pos:end="885:55"><call pos:start="885:9" pos:end="885:55"><name pos:start="885:9" pos:end="885:32">mg_parse_auth_hdr_digest</name><argument_list pos:start="885:33" pos:end="885:55">(<argument pos:start="885:34" pos:end="885:37"><expr pos:start="885:34" pos:end="885:37"><name pos:start="885:34" pos:end="885:37">conn</name></expr></argument>, <argument pos:start="885:40" pos:end="885:50"><expr pos:start="885:40" pos:end="885:50"><name pos:start="885:40" pos:end="885:50">auth_header</name></expr></argument>, <argument pos:start="885:53" pos:end="885:54"><expr pos:start="885:53" pos:end="885:54"><name pos:start="885:53" pos:end="885:54">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if> <if type="elseif" pos:start="886:7" pos:end="892:5">else if <condition pos:start="886:15" pos:end="886:61">(<expr pos:start="886:16" pos:end="886:60"><call pos:start="886:16" pos:end="886:55"><name pos:start="886:16" pos:end="886:29">mg_strncasecmp</name><argument_list pos:start="886:30" pos:end="886:55">(<argument pos:start="886:31" pos:end="886:41"><expr pos:start="886:31" pos:end="886:41"><name pos:start="886:31" pos:end="886:41">auth_header</name></expr></argument>, <argument pos:start="886:44" pos:end="886:51"><expr pos:start="886:44" pos:end="886:51"><literal type="string" pos:start="886:44" pos:end="886:51">"Basic "</literal></expr></argument>, <argument pos:start="886:54" pos:end="886:54"><expr pos:start="886:54" pos:end="886:54"><literal type="number" pos:start="886:54" pos:end="886:54">6</literal></expr></argument>)</argument_list></call> <operator pos:start="886:57" pos:end="886:58">==</operator> <literal type="number" pos:start="886:60" pos:end="886:60">0</literal></expr>)</condition> <block pos:start="886:63" pos:end="892:5">{<block_content pos:start="888:9" pos:end="891:55">
	<comment type="block" pos:start="887:9" pos:end="887:59">/* Make sure server is configured for basic auth */</comment>
	<if_stmt pos:start="888:9" pos:end="890:9"><if pos:start="888:9" pos:end="890:9">if <condition pos:start="888:12" pos:end="888:56">(<expr pos:start="888:13" pos:end="888:55"><name pos:start="888:13" pos:end="888:41"><name pos:start="888:13" pos:end="888:16">conn</name><operator pos:start="888:17" pos:end="888:18">-&gt;</operator><name pos:start="888:19" pos:end="888:21">ctx</name><operator pos:start="888:22" pos:end="888:23">-&gt;</operator><name pos:start="888:24" pos:end="888:30">est_ctx</name><operator pos:start="888:31" pos:end="888:32">-&gt;</operator><name pos:start="888:33" pos:end="888:41">auth_mode</name></name> <operator pos:start="888:43" pos:end="888:44">!=</operator> <name pos:start="888:46" pos:end="888:55">AUTH_BASIC</name></expr>)</condition> <block pos:start="888:58" pos:end="890:9">{<block_content pos:start="889:13" pos:end="889:36">
	    <return pos:start="889:13" pos:end="889:36">return <expr pos:start="889:20" pos:end="889:35"><name pos:start="889:20" pos:end="889:35">EST_AUTH_HDR_BAD</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt pos:start="891:9" pos:end="891:55"><expr pos:start="891:9" pos:end="891:54"><call pos:start="891:9" pos:end="891:54"><name pos:start="891:9" pos:end="891:31">mg_parse_auth_hdr_basic</name><argument_list pos:start="891:32" pos:end="891:54">(<argument pos:start="891:33" pos:end="891:36"><expr pos:start="891:33" pos:end="891:36"><name pos:start="891:33" pos:end="891:36">conn</name></expr></argument>, <argument pos:start="891:39" pos:end="891:49"><expr pos:start="891:39" pos:end="891:49"><name pos:start="891:39" pos:end="891:49">auth_header</name></expr></argument>, <argument pos:start="891:52" pos:end="891:53"><expr pos:start="891:52" pos:end="891:53"><name pos:start="891:52" pos:end="891:53">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="892:7" pos:end="899:5">else if <condition pos:start="892:15" pos:end="893:65">(<expr pos:start="892:16" pos:end="893:64"><call pos:start="892:16" pos:end="893:59"><name pos:start="892:16" pos:end="892:29">mg_strncasecmp</name><argument_list pos:start="892:30" pos:end="893:59">(<argument pos:start="892:31" pos:end="892:41"><expr pos:start="892:31" pos:end="892:41"><name pos:start="892:31" pos:end="892:41">auth_header</name></expr></argument>, <argument pos:start="892:44" pos:end="892:63"><expr pos:start="892:44" pos:end="892:63"><name pos:start="892:44" pos:end="892:63">EST_BEARER_TOKEN_STR</name></expr></argument>,
                              <argument pos:start="893:31" pos:end="893:58"><expr pos:start="893:31" pos:end="893:58"><call pos:start="893:31" pos:end="893:58"><name pos:start="893:31" pos:end="893:36">strlen</name><argument_list pos:start="893:37" pos:end="893:58">(<argument pos:start="893:38" pos:end="893:57"><expr pos:start="893:38" pos:end="893:57"><name pos:start="893:38" pos:end="893:57">EST_BEARER_TOKEN_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="893:61" pos:end="893:62">==</operator> <literal type="number" pos:start="893:64" pos:end="893:64">0</literal></expr>)</condition> <block pos:start="893:67" pos:end="899:5">{<block_content pos:start="895:9" pos:end="898:55">
	<comment type="block" pos:start="894:9" pos:end="894:67">/* Make sure server is configured for bearer(token) auth */</comment>
	<if_stmt pos:start="895:9" pos:end="897:9"><if pos:start="895:9" pos:end="897:9">if <condition pos:start="895:12" pos:end="895:56">(<expr pos:start="895:13" pos:end="895:55"><name pos:start="895:13" pos:end="895:41"><name pos:start="895:13" pos:end="895:16">conn</name><operator pos:start="895:17" pos:end="895:18">-&gt;</operator><name pos:start="895:19" pos:end="895:21">ctx</name><operator pos:start="895:22" pos:end="895:23">-&gt;</operator><name pos:start="895:24" pos:end="895:30">est_ctx</name><operator pos:start="895:31" pos:end="895:32">-&gt;</operator><name pos:start="895:33" pos:end="895:41">auth_mode</name></name> <operator pos:start="895:43" pos:end="895:44">!=</operator> <name pos:start="895:46" pos:end="895:55">AUTH_TOKEN</name></expr>)</condition> <block pos:start="895:58" pos:end="897:9">{<block_content pos:start="896:13" pos:end="896:36">
	    <return pos:start="896:13" pos:end="896:36">return <expr pos:start="896:20" pos:end="896:35"><name pos:start="896:20" pos:end="896:35">EST_AUTH_HDR_BAD</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt pos:start="898:9" pos:end="898:55"><expr pos:start="898:9" pos:end="898:54"><call pos:start="898:9" pos:end="898:54"><name pos:start="898:9" pos:end="898:31">mg_parse_auth_hdr_token</name><argument_list pos:start="898:32" pos:end="898:54">(<argument pos:start="898:33" pos:end="898:36"><expr pos:start="898:33" pos:end="898:36"><name pos:start="898:33" pos:end="898:36">conn</name></expr></argument>, <argument pos:start="898:39" pos:end="898:49"><expr pos:start="898:39" pos:end="898:49"><name pos:start="898:39" pos:end="898:49">auth_header</name></expr></argument>, <argument pos:start="898:52" pos:end="898:53"><expr pos:start="898:52" pos:end="898:53"><name pos:start="898:52" pos:end="898:53">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="899:7" pos:end="903:5">else <block pos:start="899:12" pos:end="903:5">{<block_content pos:start="901:9" pos:end="902:32">
	<comment type="block" pos:start="900:9" pos:end="900:78">/* Only Basic, Digest and Bearer Token authentication are supported */</comment>
	<expr_stmt pos:start="901:9" pos:end="901:29"><expr pos:start="901:9" pos:end="901:28"><name pos:start="901:9" pos:end="901:16"><name pos:start="901:9" pos:end="901:10">ah</name><operator pos:start="901:11" pos:end="901:12">-&gt;</operator><name pos:start="901:13" pos:end="901:16">mode</name></name> <operator pos:start="901:18" pos:end="901:18">=</operator> <name pos:start="901:20" pos:end="901:28">AUTH_FAIL</name></expr>;</expr_stmt>
        <return pos:start="902:9" pos:end="902:32">return <expr pos:start="902:16" pos:end="902:31"><name pos:start="902:16" pos:end="902:31">EST_AUTH_HDR_BAD</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="905:5" pos:end="908:7">/* 
     * If we're doing digest auth, make sure all the values
     * were parsed
     */</comment>
    <if_stmt pos:start="909:5" pos:end="915:5"><if pos:start="909:5" pos:end="915:5">if <condition pos:start="909:8" pos:end="912:49">(<expr pos:start="909:9" pos:end="912:48"><name pos:start="909:9" pos:end="909:16"><name pos:start="909:9" pos:end="909:10">ah</name><operator pos:start="909:11" pos:end="909:12">-&gt;</operator><name pos:start="909:13" pos:end="909:16">mode</name></name> <operator pos:start="909:18" pos:end="909:19">==</operator> <name pos:start="909:21" pos:end="909:31">AUTH_DIGEST</name> <operator pos:start="909:33" pos:end="909:34">&amp;&amp;</operator> <operator pos:start="909:36" pos:end="909:36">(</operator><operator pos:start="909:37" pos:end="909:37">!</operator><name pos:start="909:38" pos:end="909:44"><name pos:start="909:38" pos:end="909:39">ah</name><operator pos:start="909:40" pos:end="909:41">-&gt;</operator><name pos:start="909:42" pos:end="909:44">uri</name></name> <operator pos:start="909:46" pos:end="909:47">||</operator>
		                    <operator pos:start="910:37" pos:end="910:37">!</operator><name pos:start="910:38" pos:end="910:46"><name pos:start="910:38" pos:end="910:39">ah</name><operator pos:start="910:40" pos:end="910:41">-&gt;</operator><name pos:start="910:42" pos:end="910:46">nonce</name></name> <operator pos:start="910:48" pos:end="910:49">||</operator>
				    <operator pos:start="911:37" pos:end="911:37">!</operator><name pos:start="911:38" pos:end="911:43"><name pos:start="911:38" pos:end="911:39">ah</name><operator pos:start="911:40" pos:end="911:41">-&gt;</operator><name pos:start="911:42" pos:end="911:43">nc</name></name> <operator pos:start="911:45" pos:end="911:46">||</operator>
				    <operator pos:start="912:37" pos:end="912:37">!</operator><name pos:start="912:38" pos:end="912:47"><name pos:start="912:38" pos:end="912:39">ah</name><operator pos:start="912:40" pos:end="912:41">-&gt;</operator><name pos:start="912:42" pos:end="912:47">cnonce</name></name><operator pos:start="912:48" pos:end="912:48">)</operator></expr>)</condition> <block pos:start="912:51" pos:end="915:5">{<block_content pos:start="913:9" pos:end="914:32">
	<expr_stmt pos:start="913:9" pos:end="913:58"><expr pos:start="913:9" pos:end="913:57"><call pos:start="913:9" pos:end="913:57"><name pos:start="913:9" pos:end="913:19">EST_LOG_ERR</name><argument_list pos:start="913:20" pos:end="913:57">(<argument pos:start="913:21" pos:end="913:56"><expr pos:start="913:21" pos:end="913:56"><literal type="string" pos:start="913:21" pos:end="913:56">"Parsing of HTTP auth header failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="914:9" pos:end="914:32">return <expr pos:start="914:16" pos:end="914:31"><name pos:start="914:16" pos:end="914:31">EST_AUTH_HDR_BAD</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="917:5" pos:end="919:7">/* If we were not able to parse a user ID and we're not
     * in token auth mode, then make sure we fail the authentication.
     */</comment>
    <if_stmt pos:start="920:5" pos:end="922:5"><if pos:start="920:5" pos:end="922:5">if <condition pos:start="920:8" pos:end="920:51">(<expr pos:start="920:9" pos:end="920:50"><name pos:start="920:9" pos:end="920:16"><name pos:start="920:9" pos:end="920:10">ah</name><operator pos:start="920:11" pos:end="920:12">-&gt;</operator><name pos:start="920:13" pos:end="920:16">user</name></name> <operator pos:start="920:18" pos:end="920:19">==</operator> <name pos:start="920:21" pos:end="920:24">NULL</name> <operator pos:start="920:26" pos:end="920:27">&amp;&amp;</operator> <name pos:start="920:29" pos:end="920:36"><name pos:start="920:29" pos:end="920:30">ah</name><operator pos:start="920:31" pos:end="920:32">-&gt;</operator><name pos:start="920:33" pos:end="920:36">mode</name></name> <operator pos:start="920:38" pos:end="920:39">!=</operator> <name pos:start="920:41" pos:end="920:50">AUTH_TOKEN</name></expr>)</condition> <block pos:start="920:53" pos:end="922:5">{<block_content pos:start="921:9" pos:end="921:32">
        <return pos:start="921:9" pos:end="921:32">return <expr pos:start="921:16" pos:end="921:31"><name pos:start="921:16" pos:end="921:31">EST_AUTH_HDR_BAD</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="924:5" pos:end="930:5"><if pos:start="924:5" pos:end="930:5">if <condition pos:start="924:8" pos:end="924:31">(<expr pos:start="924:9" pos:end="924:30"><name pos:start="924:9" pos:end="924:16"><name pos:start="924:9" pos:end="924:10">ah</name><operator pos:start="924:11" pos:end="924:12">-&gt;</operator><name pos:start="924:13" pos:end="924:16">mode</name></name> <operator pos:start="924:18" pos:end="924:19">!=</operator> <name pos:start="924:21" pos:end="924:30">AUTH_TOKEN</name></expr>)</condition> <block pos:start="924:33" pos:end="930:5">{<block_content pos:start="929:9" pos:end="929:67">   
        <comment type="block" pos:start="925:9" pos:end="928:11">/*
         * Save the user ID on the connection context.
         * We will want to pass this to the CA later.
         */</comment>
        <expr_stmt pos:start="929:9" pos:end="929:67"><expr pos:start="929:9" pos:end="929:66"><call pos:start="929:9" pos:end="929:66"><name pos:start="929:9" pos:end="929:17">strncpy_s</name><argument_list pos:start="929:18" pos:end="929:66">(<argument pos:start="929:19" pos:end="929:31"><expr pos:start="929:19" pos:end="929:31"><name pos:start="929:19" pos:end="929:31"><name pos:start="929:19" pos:end="929:22">conn</name><operator pos:start="929:23" pos:end="929:24">-&gt;</operator><name pos:start="929:25" pos:end="929:31">user_id</name></name></expr></argument>, <argument pos:start="929:34" pos:end="929:43"><expr pos:start="929:34" pos:end="929:43"><name pos:start="929:34" pos:end="929:43">MG_UID_MAX</name></expr></argument>, <argument pos:start="929:46" pos:end="929:53"><expr pos:start="929:46" pos:end="929:53"><name pos:start="929:46" pos:end="929:53"><name pos:start="929:46" pos:end="929:47">ah</name><operator pos:start="929:48" pos:end="929:49">-&gt;</operator><name pos:start="929:50" pos:end="929:53">user</name></name></expr></argument>, <argument pos:start="929:56" pos:end="929:65"><expr pos:start="929:56" pos:end="929:65"><name pos:start="929:56" pos:end="929:65">MG_UID_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <return pos:start="932:5" pos:end="932:29">return <expr pos:start="932:12" pos:end="932:28"><name pos:start="932:12" pos:end="932:28">EST_AUTH_HDR_GOOD</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="934:1" pos:end="943:3">/*
 * This function parses the HTTP Authentication header
 * from the client.  It will fill in the fields on the
 * EST_HTTP_AUTH_HDR struct, which are used later for
 * verifying the user's credentials using either HTTP
 * Basic or HTTP Digest authentication. The ah parameter
 * should already be allocated when calling this function.
 *
 * Return either good, bad, or missing 
 */</comment>
<function pos:start="944:1" pos:end="987:1"><type pos:start="944:1" pos:end="944:4"><name pos:start="944:1" pos:end="944:4">void</name></type> <name pos:start="944:6" pos:end="944:34">mg_send_authorization_request</name> <parameter_list pos:start="944:36" pos:end="944:63">(<parameter pos:start="944:37" pos:end="944:62"><decl pos:start="944:37" pos:end="944:62"><type pos:start="944:37" pos:end="944:62"><name pos:start="944:37" pos:end="944:56"><name pos:start="944:37" pos:end="944:42">struct</name> <name pos:start="944:44" pos:end="944:56">mg_connection</name></name> <modifier pos:start="944:58" pos:end="944:58">*</modifier></type><name pos:start="944:59" pos:end="944:62">conn</name></decl></parameter>)</parameter_list>
<block pos:start="945:1" pos:end="987:1">{<block_content pos:start="946:5" pos:end="986:5">
    <expr_stmt pos:start="946:5" pos:end="946:28"><expr pos:start="946:5" pos:end="946:27"><name pos:start="946:5" pos:end="946:21"><name pos:start="946:5" pos:end="946:8">conn</name><operator pos:start="946:9" pos:end="946:10">-&gt;</operator><name pos:start="946:11" pos:end="946:21">status_code</name></name> <operator pos:start="946:23" pos:end="946:23">=</operator> <literal type="number" pos:start="946:25" pos:end="946:27">401</literal></expr>;</expr_stmt>
    <switch pos:start="947:5" pos:end="986:5">switch <condition pos:start="947:12" pos:end="947:42">(<expr pos:start="947:13" pos:end="947:41"><name pos:start="947:13" pos:end="947:41"><name pos:start="947:13" pos:end="947:16">conn</name><operator pos:start="947:17" pos:end="947:18">-&gt;</operator><name pos:start="947:19" pos:end="947:21">ctx</name><operator pos:start="947:22" pos:end="947:23">-&gt;</operator><name pos:start="947:24" pos:end="947:30">est_ctx</name><operator pos:start="947:31" pos:end="947:32">-&gt;</operator><name pos:start="947:33" pos:end="947:41">auth_mode</name></name></expr>)</condition> <block pos:start="947:44" pos:end="986:5">{<block_content pos:start="948:5" pos:end="985:14">
    <case pos:start="948:5" pos:end="948:20">case <expr pos:start="948:10" pos:end="948:19"><name pos:start="948:10" pos:end="948:19">AUTH_BASIC</name></expr>:</case>
	<expr_stmt pos:start="949:9" pos:end="956:41"><expr pos:start="949:9" pos:end="956:40"><call pos:start="949:9" pos:end="956:40"><name pos:start="949:9" pos:end="949:17">mg_printf</name><argument_list pos:start="949:18" pos:end="956:40">(<argument pos:start="949:19" pos:end="949:22"><expr pos:start="949:19" pos:end="949:22"><name pos:start="949:19" pos:end="949:22">conn</name></expr></argument>,
              <argument pos:start="950:15" pos:end="952:46"><expr pos:start="950:15" pos:end="952:46"><literal type="string" pos:start="950:15" pos:end="950:22">"%s\r\n"</literal>
              <literal type="string" pos:start="951:15" pos:end="951:25">"%s: 0\r\n"</literal>
              <literal type="string" pos:start="952:15" pos:end="952:46">"%s: Basic realm=\"%s\"\r\n\r\n"</literal></expr></argument>,
	      <argument pos:start="953:15" pos:end="953:30"><expr pos:start="953:15" pos:end="953:30"><name pos:start="953:15" pos:end="953:30">EST_HTTP_HDR_401</name></expr></argument>,
	      <argument pos:start="954:15" pos:end="954:29"><expr pos:start="954:15" pos:end="954:29"><name pos:start="954:15" pos:end="954:29">EST_HTTP_HDR_CL</name></expr></argument>,
	      <argument pos:start="955:15" pos:end="955:31"><expr pos:start="955:15" pos:end="955:31"><name pos:start="955:15" pos:end="955:31">EST_HTTP_HDR_AUTH</name></expr></argument>,
              <argument pos:start="956:15" pos:end="956:39"><expr pos:start="956:15" pos:end="956:39"><name pos:start="956:15" pos:end="956:39"><name pos:start="956:15" pos:end="956:18">conn</name><operator pos:start="956:19" pos:end="956:20">-&gt;</operator><name pos:start="956:21" pos:end="956:23">ctx</name><operator pos:start="956:24" pos:end="956:25">-&gt;</operator><name pos:start="956:26" pos:end="956:32">est_ctx</name><operator pos:start="956:33" pos:end="956:34">-&gt;</operator><name pos:start="956:35" pos:end="956:39">realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break pos:start="957:9" pos:end="957:14">break;</break>
    <case pos:start="958:5" pos:end="958:21">case <expr pos:start="958:10" pos:end="958:20"><name pos:start="958:10" pos:end="958:20">AUTH_DIGEST</name></expr>:</case>
	<expr_stmt pos:start="959:9" pos:end="968:41"><expr pos:start="959:9" pos:end="968:40"><call pos:start="959:9" pos:end="968:40"><name pos:start="959:9" pos:end="959:17">mg_printf</name><argument_list pos:start="959:18" pos:end="968:40">(<argument pos:start="959:19" pos:end="959:22"><expr pos:start="959:19" pos:end="959:22"><name pos:start="959:19" pos:end="959:22">conn</name></expr></argument>,
              <argument pos:start="960:15" pos:end="963:51"><expr pos:start="960:15" pos:end="963:51"><literal type="string" pos:start="960:15" pos:end="960:22">"%s\r\n"</literal>
              <literal type="string" pos:start="961:15" pos:end="961:25">"%s: 0\r\n"</literal>
              <literal type="string" pos:start="962:15" pos:end="962:41">"%s: Digest qop=\"auth\", "</literal>
              <literal type="string" pos:start="963:15" pos:end="963:51">"realm=\"%s\", nonce=\"%lu\"\r\n\r\n"</literal></expr></argument>,
	      <argument pos:start="964:15" pos:end="964:30"><expr pos:start="964:15" pos:end="964:30"><name pos:start="964:15" pos:end="964:30">EST_HTTP_HDR_401</name></expr></argument>,
	      <argument pos:start="965:15" pos:end="965:29"><expr pos:start="965:15" pos:end="965:29"><name pos:start="965:15" pos:end="965:29">EST_HTTP_HDR_CL</name></expr></argument>,
	      <argument pos:start="966:15" pos:end="966:31"><expr pos:start="966:15" pos:end="966:31"><name pos:start="966:15" pos:end="966:31">EST_HTTP_HDR_AUTH</name></expr></argument>,
              <argument pos:start="967:15" pos:end="967:39"><expr pos:start="967:15" pos:end="967:39"><name pos:start="967:15" pos:end="967:39"><name pos:start="967:15" pos:end="967:18">conn</name><operator pos:start="967:19" pos:end="967:20">-&gt;</operator><name pos:start="967:21" pos:end="967:23">ctx</name><operator pos:start="967:24" pos:end="967:25">-&gt;</operator><name pos:start="967:26" pos:end="967:32">est_ctx</name><operator pos:start="967:33" pos:end="967:34">-&gt;</operator><name pos:start="967:35" pos:end="967:39">realm</name></name></expr></argument>,
              <argument pos:start="968:15" pos:end="968:39"><expr pos:start="968:15" pos:end="968:39"><operator pos:start="968:15" pos:end="968:15">(</operator><name pos:start="968:16" pos:end="968:23">unsigned</name> <name pos:start="968:25" pos:end="968:28">long</name><operator pos:start="968:29" pos:end="968:29">)</operator><call pos:start="968:30" pos:end="968:39"><name pos:start="968:30" pos:end="968:33">time</name><argument_list pos:start="968:34" pos:end="968:39">(<argument pos:start="968:35" pos:end="968:38"><expr pos:start="968:35" pos:end="968:38"><name pos:start="968:35" pos:end="968:38">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break pos:start="969:9" pos:end="969:14">break;</break>
    <case pos:start="970:5" pos:end="970:20">case <expr pos:start="970:10" pos:end="970:19"><name pos:start="970:10" pos:end="970:19">AUTH_TOKEN</name></expr>:</case>
	<expr_stmt pos:start="971:9" pos:end="978:41"><expr pos:start="971:9" pos:end="978:40"><call pos:start="971:9" pos:end="978:40"><name pos:start="971:9" pos:end="971:17">mg_printf</name><argument_list pos:start="971:18" pos:end="978:40">(<argument pos:start="971:19" pos:end="971:22"><expr pos:start="971:19" pos:end="971:22"><name pos:start="971:19" pos:end="971:22">conn</name></expr></argument>,
              <argument pos:start="972:15" pos:end="974:47"><expr pos:start="972:15" pos:end="974:47"><literal type="string" pos:start="972:15" pos:end="972:22">"%s\r\n"</literal>
              <literal type="string" pos:start="973:15" pos:end="973:25">"%s: 0\r\n"</literal>
              <literal type="string" pos:start="974:15" pos:end="974:47">"%s: Bearer realm=\"%s\"\r\n\r\n"</literal></expr></argument>,
	      <argument pos:start="975:15" pos:end="975:30"><expr pos:start="975:15" pos:end="975:30"><name pos:start="975:15" pos:end="975:30">EST_HTTP_HDR_401</name></expr></argument>,
	      <argument pos:start="976:15" pos:end="976:29"><expr pos:start="976:15" pos:end="976:29"><name pos:start="976:15" pos:end="976:29">EST_HTTP_HDR_CL</name></expr></argument>,
	      <argument pos:start="977:15" pos:end="977:31"><expr pos:start="977:15" pos:end="977:31"><name pos:start="977:15" pos:end="977:31">EST_HTTP_HDR_AUTH</name></expr></argument>,
              <argument pos:start="978:15" pos:end="978:39"><expr pos:start="978:15" pos:end="978:39"><name pos:start="978:15" pos:end="978:39"><name pos:start="978:15" pos:end="978:18">conn</name><operator pos:start="978:19" pos:end="978:20">-&gt;</operator><name pos:start="978:21" pos:end="978:23">ctx</name><operator pos:start="978:24" pos:end="978:25">-&gt;</operator><name pos:start="978:26" pos:end="978:32">est_ctx</name><operator pos:start="978:33" pos:end="978:34">-&gt;</operator><name pos:start="978:35" pos:end="978:39">realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break pos:start="979:9" pos:end="979:14">break;</break>
    <case pos:start="980:5" pos:end="980:19">case <expr pos:start="980:10" pos:end="980:18"><name pos:start="980:10" pos:end="980:18">AUTH_FAIL</name></expr>:</case>
    <case pos:start="981:5" pos:end="981:19">case <expr pos:start="981:10" pos:end="981:18"><name pos:start="981:10" pos:end="981:18">AUTH_NONE</name></expr>:</case>
    <default pos:start="982:5" pos:end="982:12">default:</default>
	<comment type="block" pos:start="983:9" pos:end="984:33">/* These modes are not valid at this point
	 * nothing to do here. */</comment>
	<break pos:start="985:9" pos:end="985:14">break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>
<comment type="line" pos:start="988:1" pos:end="988:25">// where parsing stopped.</comment>
<function pos:start="989:1" pos:end="1001:1"><type pos:start="989:1" pos:end="989:11"><specifier pos:start="989:1" pos:end="989:6">static</specifier> <name pos:start="989:8" pos:end="989:11">void</name></type> <name pos:start="989:13" pos:end="989:30">parse_http_headers</name> <parameter_list pos:start="989:32" pos:end="989:71">(<parameter pos:start="989:33" pos:end="989:42"><decl pos:start="989:33" pos:end="989:42"><type pos:start="989:33" pos:end="989:42"><name pos:start="989:33" pos:end="989:36">char</name> <modifier pos:start="989:38" pos:end="989:38">*</modifier><modifier pos:start="989:39" pos:end="989:39">*</modifier></type><name pos:start="989:40" pos:end="989:42">buf</name></decl></parameter>, <parameter pos:start="989:45" pos:end="989:70"><decl pos:start="989:45" pos:end="989:70"><type pos:start="989:45" pos:end="989:70"><name pos:start="989:45" pos:end="989:66"><name pos:start="989:45" pos:end="989:50">struct</name> <name pos:start="989:52" pos:end="989:66">mg_request_info</name></name> <modifier pos:start="989:68" pos:end="989:68">*</modifier></type><name pos:start="989:69" pos:end="989:70">ri</name></decl></parameter>)</parameter_list>
<block pos:start="990:1" pos:end="1001:1">{<block_content pos:start="991:5" pos:end="1000:5">
    <decl_stmt pos:start="991:5" pos:end="991:10"><decl pos:start="991:5" pos:end="991:9"><type pos:start="991:5" pos:end="991:7"><name pos:start="991:5" pos:end="991:7">int</name></type> <name pos:start="991:9" pos:end="991:9">i</name></decl>;</decl_stmt>

    <for pos:start="993:5" pos:end="1000:5">for <control pos:start="993:9" pos:end="993:59">(<init pos:start="993:10" pos:end="993:15"><expr pos:start="993:10" pos:end="993:14"><name pos:start="993:10" pos:end="993:10">i</name> <operator pos:start="993:12" pos:end="993:12">=</operator> <literal type="number" pos:start="993:14" pos:end="993:14">0</literal></expr>;</init> <condition pos:start="993:17" pos:end="993:54"><expr pos:start="993:17" pos:end="993:53"><name pos:start="993:17" pos:end="993:17">i</name> <operator pos:start="993:19" pos:end="993:19">&lt;</operator> <operator pos:start="993:21" pos:end="993:21">(</operator><name pos:start="993:22" pos:end="993:24">int</name><operator pos:start="993:25" pos:end="993:25">)</operator><call pos:start="993:26" pos:end="993:53"><name pos:start="993:26" pos:end="993:35">ARRAY_SIZE</name><argument_list pos:start="993:36" pos:end="993:53">(<argument pos:start="993:37" pos:end="993:52"><expr pos:start="993:37" pos:end="993:52"><name pos:start="993:37" pos:end="993:52"><name pos:start="993:37" pos:end="993:38">ri</name><operator pos:start="993:39" pos:end="993:40">-&gt;</operator><name pos:start="993:41" pos:end="993:52">http_headers</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="993:56" pos:end="993:58"><expr pos:start="993:56" pos:end="993:58"><name pos:start="993:56" pos:end="993:56">i</name><operator pos:start="993:57" pos:end="993:58">++</operator></expr></incr>)</control> <block pos:start="993:61" pos:end="1000:5">{<block_content pos:start="994:9" pos:end="999:32">
        <expr_stmt pos:start="994:9" pos:end="994:65"><expr pos:start="994:9" pos:end="994:64"><name pos:start="994:9" pos:end="994:27"><name pos:start="994:9" pos:end="994:10">ri</name><operator pos:start="994:11" pos:end="994:12">-&gt;</operator><name pos:start="994:13" pos:end="994:24">http_headers</name><index pos:start="994:25" pos:end="994:27">[<expr pos:start="994:26" pos:end="994:26"><name pos:start="994:26" pos:end="994:26">i</name></expr>]</index></name><operator pos:start="994:28" pos:end="994:28">.</operator><name pos:start="994:29" pos:end="994:32">name</name> <operator pos:start="994:34" pos:end="994:34">=</operator> <call pos:start="994:36" pos:end="994:64"><name pos:start="994:36" pos:end="994:46">skip_quoted</name><argument_list pos:start="994:47" pos:end="994:64">(<argument pos:start="994:48" pos:end="994:50"><expr pos:start="994:48" pos:end="994:50"><name pos:start="994:48" pos:end="994:50">buf</name></expr></argument>, <argument pos:start="994:53" pos:end="994:55"><expr pos:start="994:53" pos:end="994:55"><literal type="string" pos:start="994:53" pos:end="994:55">":"</literal></expr></argument>, <argument pos:start="994:58" pos:end="994:60"><expr pos:start="994:58" pos:end="994:60"><literal type="string" pos:start="994:58" pos:end="994:60">" "</literal></expr></argument>, <argument pos:start="994:63" pos:end="994:63"><expr pos:start="994:63" pos:end="994:63"><literal type="number" pos:start="994:63" pos:end="994:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="995:9" pos:end="995:54"><expr pos:start="995:9" pos:end="995:53"><name pos:start="995:9" pos:end="995:27"><name pos:start="995:9" pos:end="995:10">ri</name><operator pos:start="995:11" pos:end="995:12">-&gt;</operator><name pos:start="995:13" pos:end="995:24">http_headers</name><index pos:start="995:25" pos:end="995:27">[<expr pos:start="995:26" pos:end="995:26"><name pos:start="995:26" pos:end="995:26">i</name></expr>]</index></name><operator pos:start="995:28" pos:end="995:28">.</operator><name pos:start="995:29" pos:end="995:33">value</name> <operator pos:start="995:35" pos:end="995:35">=</operator> <call pos:start="995:37" pos:end="995:53"><name pos:start="995:37" pos:end="995:40">skip</name><argument_list pos:start="995:41" pos:end="995:53">(<argument pos:start="995:42" pos:end="995:44"><expr pos:start="995:42" pos:end="995:44"><name pos:start="995:42" pos:end="995:44">buf</name></expr></argument>, <argument pos:start="995:47" pos:end="995:52"><expr pos:start="995:47" pos:end="995:52"><literal type="string" pos:start="995:47" pos:end="995:52">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="996:9" pos:end="998:9"><if pos:start="996:9" pos:end="998:9">if <condition pos:start="996:12" pos:end="996:48">(<expr pos:start="996:13" pos:end="996:47"><name pos:start="996:13" pos:end="996:31"><name pos:start="996:13" pos:end="996:14">ri</name><operator pos:start="996:15" pos:end="996:16">-&gt;</operator><name pos:start="996:17" pos:end="996:28">http_headers</name><index pos:start="996:29" pos:end="996:31">[<expr pos:start="996:30" pos:end="996:30"><name pos:start="996:30" pos:end="996:30">i</name></expr>]</index></name><operator pos:start="996:32" pos:end="996:32">.</operator><name pos:start="996:33" pos:end="996:39"><name pos:start="996:33" pos:end="996:36">name</name><index pos:start="996:37" pos:end="996:39">[<expr pos:start="996:38" pos:end="996:38"><literal type="number" pos:start="996:38" pos:end="996:38">0</literal></expr>]</index></name> <operator pos:start="996:41" pos:end="996:42">==</operator> <literal type="char" pos:start="996:44" pos:end="996:47">'\0'</literal></expr>)</condition> <block pos:start="996:50" pos:end="998:9">{<block_content pos:start="997:13" pos:end="997:18">
            <break pos:start="997:13" pos:end="997:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="999:9" pos:end="999:32"><expr pos:start="999:9" pos:end="999:31"><name pos:start="999:9" pos:end="999:23"><name pos:start="999:9" pos:end="999:10">ri</name><operator pos:start="999:11" pos:end="999:12">-&gt;</operator><name pos:start="999:13" pos:end="999:23">num_headers</name></name> <operator pos:start="999:25" pos:end="999:25">=</operator> <name pos:start="999:27" pos:end="999:27">i</name> <operator pos:start="999:29" pos:end="999:29">+</operator> <literal type="number" pos:start="999:31" pos:end="999:31">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
<comment type="line" pos:start="1002:1" pos:end="1002:25">// where parsing stopped.</comment>
<function pos:start="1003:1" pos:end="1007:1"><type pos:start="1003:1" pos:end="1003:10"><specifier pos:start="1003:1" pos:end="1003:6">static</specifier> <name pos:start="1003:8" pos:end="1003:10">int</name></type> <name pos:start="1003:12" pos:end="1003:31">is_valid_http_method</name> <parameter_list pos:start="1003:33" pos:end="1003:52">(<parameter pos:start="1003:34" pos:end="1003:51"><decl pos:start="1003:34" pos:end="1003:51"><type pos:start="1003:34" pos:end="1003:45"><specifier pos:start="1003:34" pos:end="1003:38">const</specifier> <name pos:start="1003:40" pos:end="1003:43">char</name> <modifier pos:start="1003:45" pos:end="1003:45">*</modifier></type><name pos:start="1003:46" pos:end="1003:51">method</name></decl></parameter>)</parameter_list>
<block pos:start="1004:1" pos:end="1007:1">{<block_content pos:start="1006:5" pos:end="1006:69">
    <comment type="block" pos:start="1005:5" pos:end="1005:36">/* EST only allows GET &amp; POST */</comment>
    <return pos:start="1006:5" pos:end="1006:69">return <expr pos:start="1006:12" pos:end="1006:68"><operator pos:start="1006:12" pos:end="1006:12">!</operator><call pos:start="1006:13" pos:end="1006:37"><name pos:start="1006:13" pos:end="1006:19">strncmp</name><argument_list pos:start="1006:20" pos:end="1006:37">(<argument pos:start="1006:21" pos:end="1006:26"><expr pos:start="1006:21" pos:end="1006:26"><name pos:start="1006:21" pos:end="1006:26">method</name></expr></argument>, <argument pos:start="1006:29" pos:end="1006:33"><expr pos:start="1006:29" pos:end="1006:33"><literal type="string" pos:start="1006:29" pos:end="1006:33">"GET"</literal></expr></argument>, <argument pos:start="1006:36" pos:end="1006:36"><expr pos:start="1006:36" pos:end="1006:36"><literal type="number" pos:start="1006:36" pos:end="1006:36">3</literal></expr></argument>)</argument_list></call> <operator pos:start="1006:39" pos:end="1006:40">||</operator> <operator pos:start="1006:42" pos:end="1006:42">!</operator><call pos:start="1006:43" pos:end="1006:68"><name pos:start="1006:43" pos:end="1006:49">strncmp</name><argument_list pos:start="1006:50" pos:end="1006:68">(<argument pos:start="1006:51" pos:end="1006:56"><expr pos:start="1006:51" pos:end="1006:56"><name pos:start="1006:51" pos:end="1006:56">method</name></expr></argument>, <argument pos:start="1006:59" pos:end="1006:64"><expr pos:start="1006:59" pos:end="1006:64"><literal type="string" pos:start="1006:59" pos:end="1006:64">"POST"</literal></expr></argument>, <argument pos:start="1006:67" pos:end="1006:67"><expr pos:start="1006:67" pos:end="1006:67"><literal type="number" pos:start="1006:67" pos:end="1006:67">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="1008:1" pos:end="1008:59">// HTTP request components, header names and header values.</comment>
<function pos:start="1009:1" pos:end="1032:1"><type pos:start="1009:1" pos:end="1009:10"><specifier pos:start="1009:1" pos:end="1009:6">static</specifier> <name pos:start="1009:8" pos:end="1009:10">int</name></type> <name pos:start="1009:12" pos:end="1009:29">parse_http_message</name> <parameter_list pos:start="1009:31" pos:end="1009:78">(<parameter pos:start="1009:32" pos:end="1009:40"><decl pos:start="1009:32" pos:end="1009:40"><type pos:start="1009:32" pos:end="1009:40"><name pos:start="1009:32" pos:end="1009:35">char</name> <modifier pos:start="1009:37" pos:end="1009:37">*</modifier></type><name pos:start="1009:38" pos:end="1009:40">buf</name></decl></parameter>, <parameter pos:start="1009:43" pos:end="1009:49"><decl pos:start="1009:43" pos:end="1009:49"><type pos:start="1009:43" pos:end="1009:49"><name pos:start="1009:43" pos:end="1009:45">int</name></type> <name pos:start="1009:47" pos:end="1009:49">len</name></decl></parameter>, <parameter pos:start="1009:52" pos:end="1009:77"><decl pos:start="1009:52" pos:end="1009:77"><type pos:start="1009:52" pos:end="1009:77"><name pos:start="1009:52" pos:end="1009:73"><name pos:start="1009:52" pos:end="1009:57">struct</name> <name pos:start="1009:59" pos:end="1009:73">mg_request_info</name></name> <modifier pos:start="1009:75" pos:end="1009:75">*</modifier></type><name pos:start="1009:76" pos:end="1009:77">ri</name></decl></parameter>)</parameter_list>
<block pos:start="1010:1" pos:end="1032:1">{<block_content pos:start="1011:5" pos:end="1031:26">
    <decl_stmt pos:start="1011:5" pos:end="1011:51"><decl pos:start="1011:5" pos:end="1011:50"><type pos:start="1011:5" pos:end="1011:7"><name pos:start="1011:5" pos:end="1011:7">int</name></type> <name pos:start="1011:9" pos:end="1011:22">request_length</name> <init pos:start="1011:24" pos:end="1011:50">= <expr pos:start="1011:26" pos:end="1011:50"><call pos:start="1011:26" pos:end="1011:50"><name pos:start="1011:26" pos:end="1011:40">get_request_len</name><argument_list pos:start="1011:41" pos:end="1011:50">(<argument pos:start="1011:42" pos:end="1011:44"><expr pos:start="1011:42" pos:end="1011:44"><name pos:start="1011:42" pos:end="1011:44">buf</name></expr></argument>, <argument pos:start="1011:47" pos:end="1011:49"><expr pos:start="1011:47" pos:end="1011:49"><name pos:start="1011:47" pos:end="1011:49">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1013:5" pos:end="1028:5"><if pos:start="1013:5" pos:end="1028:5">if <condition pos:start="1013:8" pos:end="1013:27">(<expr pos:start="1013:9" pos:end="1013:26"><name pos:start="1013:9" pos:end="1013:22">request_length</name> <operator pos:start="1013:24" pos:end="1013:24">&gt;</operator> <literal type="number" pos:start="1013:26" pos:end="1013:26">0</literal></expr>)</condition> <block pos:start="1013:29" pos:end="1028:5">{<block_content pos:start="1015:9" pos:end="1027:37">
        <comment type="line" pos:start="1014:9" pos:end="1014:72">// Reset attributes. DO NOT TOUCH is_ssl, remote_ip, remote_port</comment>
        <expr_stmt pos:start="1015:9" pos:end="1015:63"><expr pos:start="1015:9" pos:end="1015:62"><name pos:start="1015:9" pos:end="1015:26"><name pos:start="1015:9" pos:end="1015:10">ri</name><operator pos:start="1015:11" pos:end="1015:12">-&gt;</operator><name pos:start="1015:13" pos:end="1015:26">request_method</name></name> <operator pos:start="1015:28" pos:end="1015:28">=</operator> <name pos:start="1015:30" pos:end="1015:36"><name pos:start="1015:30" pos:end="1015:31">ri</name><operator pos:start="1015:32" pos:end="1015:33">-&gt;</operator><name pos:start="1015:34" pos:end="1015:36">uri</name></name> <operator pos:start="1015:38" pos:end="1015:38">=</operator> <name pos:start="1015:40" pos:end="1015:55"><name pos:start="1015:40" pos:end="1015:41">ri</name><operator pos:start="1015:42" pos:end="1015:43">-&gt;</operator><name pos:start="1015:44" pos:end="1015:55">http_version</name></name> <operator pos:start="1015:57" pos:end="1015:57">=</operator> <name pos:start="1015:59" pos:end="1015:62">NULL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1016:9" pos:end="1016:28"><expr pos:start="1016:9" pos:end="1016:27"><name pos:start="1016:9" pos:end="1016:23"><name pos:start="1016:9" pos:end="1016:10">ri</name><operator pos:start="1016:11" pos:end="1016:12">-&gt;</operator><name pos:start="1016:13" pos:end="1016:23">num_headers</name></name> <operator pos:start="1016:25" pos:end="1016:25">=</operator> <literal type="number" pos:start="1016:27" pos:end="1016:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1018:9" pos:end="1018:39"><expr pos:start="1018:9" pos:end="1018:38"><name pos:start="1018:9" pos:end="1018:31"><name pos:start="1018:9" pos:end="1018:11">buf</name><index pos:start="1018:12" pos:end="1018:31">[<expr pos:start="1018:13" pos:end="1018:30"><name pos:start="1018:13" pos:end="1018:26">request_length</name> <operator pos:start="1018:28" pos:end="1018:28">-</operator> <literal type="number" pos:start="1018:30" pos:end="1018:30">1</literal></expr>]</index></name> <operator pos:start="1018:33" pos:end="1018:33">=</operator> <literal type="char" pos:start="1018:35" pos:end="1018:38">'\0'</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="1020:9" pos:end="1020:66">// RFC says that all initial whitespaces should be ingored</comment>
        <while pos:start="1021:9" pos:end="1023:9">while <condition pos:start="1021:15" pos:end="1021:61">(<expr pos:start="1021:16" pos:end="1021:60"><operator pos:start="1021:16" pos:end="1021:16">*</operator><name pos:start="1021:17" pos:end="1021:19">buf</name> <operator pos:start="1021:21" pos:end="1021:22">!=</operator> <literal type="char" pos:start="1021:24" pos:end="1021:27">'\0'</literal> <operator pos:start="1021:29" pos:end="1021:30">&amp;&amp;</operator> <call pos:start="1021:32" pos:end="1021:60"><name pos:start="1021:32" pos:end="1021:38">isspace</name><argument_list pos:start="1021:39" pos:end="1021:60">(<argument pos:start="1021:40" pos:end="1021:59"><expr pos:start="1021:40" pos:end="1021:59"><operator pos:start="1021:40" pos:end="1021:40">*</operator><operator pos:start="1021:41" pos:end="1021:41">(</operator><name pos:start="1021:42" pos:end="1021:49">unsigned</name> <name pos:start="1021:51" pos:end="1021:54">char</name><operator pos:start="1021:55" pos:end="1021:55">*</operator><operator pos:start="1021:56" pos:end="1021:56">)</operator><name pos:start="1021:57" pos:end="1021:59">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1021:63" pos:end="1023:9">{<block_content pos:start="1022:13" pos:end="1022:18">
            <expr_stmt pos:start="1022:13" pos:end="1022:18"><expr pos:start="1022:13" pos:end="1022:17"><name pos:start="1022:13" pos:end="1022:15">buf</name><operator pos:start="1022:16" pos:end="1022:17">++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt pos:start="1024:9" pos:end="1024:45"><expr pos:start="1024:9" pos:end="1024:44"><name pos:start="1024:9" pos:end="1024:26"><name pos:start="1024:9" pos:end="1024:10">ri</name><operator pos:start="1024:11" pos:end="1024:12">-&gt;</operator><name pos:start="1024:13" pos:end="1024:26">request_method</name></name> <operator pos:start="1024:28" pos:end="1024:28">=</operator> <call pos:start="1024:30" pos:end="1024:44"><name pos:start="1024:30" pos:end="1024:33">skip</name><argument_list pos:start="1024:34" pos:end="1024:44">(<argument pos:start="1024:35" pos:end="1024:38"><expr pos:start="1024:35" pos:end="1024:38"><operator pos:start="1024:35" pos:end="1024:35">&amp;</operator><name pos:start="1024:36" pos:end="1024:38">buf</name></expr></argument>, <argument pos:start="1024:41" pos:end="1024:43"><expr pos:start="1024:41" pos:end="1024:43"><literal type="string" pos:start="1024:41" pos:end="1024:43">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1025:9" pos:end="1025:34"><expr pos:start="1025:9" pos:end="1025:33"><name pos:start="1025:9" pos:end="1025:15"><name pos:start="1025:9" pos:end="1025:10">ri</name><operator pos:start="1025:11" pos:end="1025:12">-&gt;</operator><name pos:start="1025:13" pos:end="1025:15">uri</name></name> <operator pos:start="1025:17" pos:end="1025:17">=</operator> <call pos:start="1025:19" pos:end="1025:33"><name pos:start="1025:19" pos:end="1025:22">skip</name><argument_list pos:start="1025:23" pos:end="1025:33">(<argument pos:start="1025:24" pos:end="1025:27"><expr pos:start="1025:24" pos:end="1025:27"><operator pos:start="1025:24" pos:end="1025:24">&amp;</operator><name pos:start="1025:25" pos:end="1025:27">buf</name></expr></argument>, <argument pos:start="1025:30" pos:end="1025:32"><expr pos:start="1025:30" pos:end="1025:32"><literal type="string" pos:start="1025:30" pos:end="1025:32">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1026:9" pos:end="1026:46"><expr pos:start="1026:9" pos:end="1026:45"><name pos:start="1026:9" pos:end="1026:24"><name pos:start="1026:9" pos:end="1026:10">ri</name><operator pos:start="1026:11" pos:end="1026:12">-&gt;</operator><name pos:start="1026:13" pos:end="1026:24">http_version</name></name> <operator pos:start="1026:26" pos:end="1026:26">=</operator> <call pos:start="1026:28" pos:end="1026:45"><name pos:start="1026:28" pos:end="1026:31">skip</name><argument_list pos:start="1026:32" pos:end="1026:45">(<argument pos:start="1026:33" pos:end="1026:36"><expr pos:start="1026:33" pos:end="1026:36"><operator pos:start="1026:33" pos:end="1026:33">&amp;</operator><name pos:start="1026:34" pos:end="1026:36">buf</name></expr></argument>, <argument pos:start="1026:39" pos:end="1026:44"><expr pos:start="1026:39" pos:end="1026:44"><literal type="string" pos:start="1026:39" pos:end="1026:44">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1027:9" pos:end="1027:37"><expr pos:start="1027:9" pos:end="1027:36"><call pos:start="1027:9" pos:end="1027:36"><name pos:start="1027:9" pos:end="1027:26">parse_http_headers</name><argument_list pos:start="1027:27" pos:end="1027:36">(<argument pos:start="1027:28" pos:end="1027:31"><expr pos:start="1027:28" pos:end="1027:31"><operator pos:start="1027:28" pos:end="1027:28">&amp;</operator><name pos:start="1027:29" pos:end="1027:31">buf</name></expr></argument>, <argument pos:start="1027:34" pos:end="1027:35"><expr pos:start="1027:34" pos:end="1027:35"><name pos:start="1027:34" pos:end="1027:35">ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1029:5" pos:end="1029:51"><expr pos:start="1029:5" pos:end="1029:50"><call pos:start="1029:5" pos:end="1029:50"><name pos:start="1029:5" pos:end="1029:16">EST_LOG_INFO</name><argument_list pos:start="1029:17" pos:end="1029:50">(<argument pos:start="1029:18" pos:end="1029:33"><expr pos:start="1029:18" pos:end="1029:33"><literal type="string" pos:start="1029:18" pos:end="1029:33">"request_len=%d"</literal></expr></argument>, <argument pos:start="1029:36" pos:end="1029:49"><expr pos:start="1029:36" pos:end="1029:49"><name pos:start="1029:36" pos:end="1029:49">request_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1030:5" pos:end="1030:44"><expr pos:start="1030:5" pos:end="1030:43"><call pos:start="1030:5" pos:end="1030:43"><name pos:start="1030:5" pos:end="1030:16">EST_LOG_INFO</name><argument_list pos:start="1030:17" pos:end="1030:43">(<argument pos:start="1030:18" pos:end="1030:33"><expr pos:start="1030:18" pos:end="1030:33"><literal type="string" pos:start="1030:18" pos:end="1030:33">"request uri=%s"</literal></expr></argument>, <argument pos:start="1030:36" pos:end="1030:42"><expr pos:start="1030:36" pos:end="1030:42"><name pos:start="1030:36" pos:end="1030:42"><name pos:start="1030:36" pos:end="1030:37">ri</name><operator pos:start="1030:38" pos:end="1030:39">-&gt;</operator><name pos:start="1030:40" pos:end="1030:42">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1031:5" pos:end="1031:26">return <expr pos:start="1031:12" pos:end="1031:25"><name pos:start="1031:12" pos:end="1031:25">request_length</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="1033:1" pos:end="1033:59">// HTTP request components, header names and header values.</comment>
<function pos:start="1034:1" pos:end="1046:1"><type pos:start="1034:1" pos:end="1034:10"><specifier pos:start="1034:1" pos:end="1034:6">static</specifier> <name pos:start="1034:8" pos:end="1034:10">int</name></type> <name pos:start="1034:12" pos:end="1034:29">parse_http_request</name> <parameter_list pos:start="1034:31" pos:end="1034:78">(<parameter pos:start="1034:32" pos:end="1034:40"><decl pos:start="1034:32" pos:end="1034:40"><type pos:start="1034:32" pos:end="1034:40"><name pos:start="1034:32" pos:end="1034:35">char</name> <modifier pos:start="1034:37" pos:end="1034:37">*</modifier></type><name pos:start="1034:38" pos:end="1034:40">buf</name></decl></parameter>, <parameter pos:start="1034:43" pos:end="1034:49"><decl pos:start="1034:43" pos:end="1034:49"><type pos:start="1034:43" pos:end="1034:49"><name pos:start="1034:43" pos:end="1034:45">int</name></type> <name pos:start="1034:47" pos:end="1034:49">len</name></decl></parameter>, <parameter pos:start="1034:52" pos:end="1034:77"><decl pos:start="1034:52" pos:end="1034:77"><type pos:start="1034:52" pos:end="1034:77"><name pos:start="1034:52" pos:end="1034:73"><name pos:start="1034:52" pos:end="1034:57">struct</name> <name pos:start="1034:59" pos:end="1034:73">mg_request_info</name></name> <modifier pos:start="1034:75" pos:end="1034:75">*</modifier></type><name pos:start="1034:76" pos:end="1034:77">ri</name></decl></parameter>)</parameter_list>
<block pos:start="1035:1" pos:end="1046:1">{<block_content pos:start="1036:5" pos:end="1045:18">
    <decl_stmt pos:start="1036:5" pos:end="1036:50"><decl pos:start="1036:5" pos:end="1036:49"><type pos:start="1036:5" pos:end="1036:7"><name pos:start="1036:5" pos:end="1036:7">int</name></type> <name pos:start="1036:9" pos:end="1036:14">result</name> <init pos:start="1036:16" pos:end="1036:49">= <expr pos:start="1036:18" pos:end="1036:49"><call pos:start="1036:18" pos:end="1036:49"><name pos:start="1036:18" pos:end="1036:35">parse_http_message</name><argument_list pos:start="1036:36" pos:end="1036:49">(<argument pos:start="1036:37" pos:end="1036:39"><expr pos:start="1036:37" pos:end="1036:39"><name pos:start="1036:37" pos:end="1036:39">buf</name></expr></argument>, <argument pos:start="1036:42" pos:end="1036:44"><expr pos:start="1036:42" pos:end="1036:44"><name pos:start="1036:42" pos:end="1036:44">len</name></expr></argument>, <argument pos:start="1036:47" pos:end="1036:48"><expr pos:start="1036:47" pos:end="1036:48"><name pos:start="1036:47" pos:end="1036:48">ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1038:5" pos:end="1044:5"><if pos:start="1038:5" pos:end="1042:5">if <condition pos:start="1038:8" pos:end="1040:47">(<expr pos:start="1038:9" pos:end="1040:46"><name pos:start="1038:9" pos:end="1038:14">result</name> <operator pos:start="1038:16" pos:end="1038:16">&gt;</operator> <literal type="number" pos:start="1038:18" pos:end="1038:18">0</literal> <operator pos:start="1038:20" pos:end="1038:21">&amp;&amp;</operator>
        <call pos:start="1039:9" pos:end="1039:48"><name pos:start="1039:9" pos:end="1039:28">is_valid_http_method</name><argument_list pos:start="1039:29" pos:end="1039:48">(<argument pos:start="1039:30" pos:end="1039:47"><expr pos:start="1039:30" pos:end="1039:47"><name pos:start="1039:30" pos:end="1039:47"><name pos:start="1039:30" pos:end="1039:31">ri</name><operator pos:start="1039:32" pos:end="1039:33">-&gt;</operator><name pos:start="1039:34" pos:end="1039:47">request_method</name></name></expr></argument>)</argument_list></call> <operator pos:start="1039:50" pos:end="1039:51">&amp;&amp;</operator>
        <operator pos:start="1040:9" pos:end="1040:9">!</operator><call pos:start="1040:10" pos:end="1040:46"><name pos:start="1040:10" pos:end="1040:16">strncmp</name><argument_list pos:start="1040:17" pos:end="1040:46">(<argument pos:start="1040:18" pos:end="1040:33"><expr pos:start="1040:18" pos:end="1040:33"><name pos:start="1040:18" pos:end="1040:33"><name pos:start="1040:18" pos:end="1040:19">ri</name><operator pos:start="1040:20" pos:end="1040:21">-&gt;</operator><name pos:start="1040:22" pos:end="1040:33">http_version</name></name></expr></argument>, <argument pos:start="1040:36" pos:end="1040:42"><expr pos:start="1040:36" pos:end="1040:42"><literal type="string" pos:start="1040:36" pos:end="1040:42">"HTTP/"</literal></expr></argument>, <argument pos:start="1040:45" pos:end="1040:45"><expr pos:start="1040:45" pos:end="1040:45"><literal type="number" pos:start="1040:45" pos:end="1040:45">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1040:49" pos:end="1042:5">{<block_content pos:start="1041:9" pos:end="1041:30">
        <expr_stmt pos:start="1041:9" pos:end="1041:30"><expr pos:start="1041:9" pos:end="1041:29"><name pos:start="1041:9" pos:end="1041:24"><name pos:start="1041:9" pos:end="1041:10">ri</name><operator pos:start="1041:11" pos:end="1041:12">-&gt;</operator><name pos:start="1041:13" pos:end="1041:24">http_version</name></name> <operator pos:start="1041:26" pos:end="1041:27">+=</operator> <literal type="number" pos:start="1041:29" pos:end="1041:29">5</literal></expr>;</expr_stmt> <comment type="line" pos:start="1041:32" pos:end="1041:46">// Skip "HTTP/"</comment>
    </block_content>}</block></if> <else pos:start="1042:7" pos:end="1044:5">else <block pos:start="1042:12" pos:end="1044:5">{<block_content pos:start="1043:9" pos:end="1043:20">
        <expr_stmt pos:start="1043:9" pos:end="1043:20"><expr pos:start="1043:9" pos:end="1043:19"><name pos:start="1043:9" pos:end="1043:14">result</name> <operator pos:start="1043:16" pos:end="1043:16">=</operator> <operator pos:start="1043:18" pos:end="1043:18">-</operator><literal type="number" pos:start="1043:19" pos:end="1043:19">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="1045:5" pos:end="1045:18">return <expr pos:start="1045:12" pos:end="1045:17"><name pos:start="1045:12" pos:end="1045:17">result</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="1047:1" pos:end="1047:73">// Upon every read operation, increase nread by the number of bytes read.</comment>
<function pos:start="1048:1" pos:end="1067:1"><type pos:start="1048:1" pos:end="1048:10"><specifier pos:start="1048:1" pos:end="1048:6">static</specifier> <name pos:start="1048:8" pos:end="1048:10">int</name></type> <name pos:start="1048:12" pos:end="1048:23">read_request</name> <parameter_list pos:start="1048:25" pos:end="1049:59">(<parameter pos:start="1048:26" pos:end="1048:33"><decl pos:start="1048:26" pos:end="1048:33"><type pos:start="1048:26" pos:end="1048:33"><name pos:start="1048:26" pos:end="1048:29">FILE</name> <modifier pos:start="1048:31" pos:end="1048:31">*</modifier></type><name pos:start="1048:32" pos:end="1048:33">fp</name></decl></parameter>, <parameter pos:start="1048:36" pos:end="1048:61"><decl pos:start="1048:36" pos:end="1048:61"><type pos:start="1048:36" pos:end="1048:61"><name pos:start="1048:36" pos:end="1048:55"><name pos:start="1048:36" pos:end="1048:41">struct</name> <name pos:start="1048:43" pos:end="1048:55">mg_connection</name></name> <modifier pos:start="1048:57" pos:end="1048:57">*</modifier></type><name pos:start="1048:58" pos:end="1048:61">conn</name></decl></parameter>,
                         <parameter pos:start="1049:26" pos:end="1049:34"><decl pos:start="1049:26" pos:end="1049:34"><type pos:start="1049:26" pos:end="1049:34"><name pos:start="1049:26" pos:end="1049:29">char</name> <modifier pos:start="1049:31" pos:end="1049:31">*</modifier></type><name pos:start="1049:32" pos:end="1049:34">buf</name></decl></parameter>, <parameter pos:start="1049:37" pos:end="1049:46"><decl pos:start="1049:37" pos:end="1049:46"><type pos:start="1049:37" pos:end="1049:46"><name pos:start="1049:37" pos:end="1049:39">int</name></type> <name pos:start="1049:41" pos:end="1049:46">bufsiz</name></decl></parameter>, <parameter pos:start="1049:49" pos:end="1049:58"><decl pos:start="1049:49" pos:end="1049:58"><type pos:start="1049:49" pos:end="1049:58"><name pos:start="1049:49" pos:end="1049:51">int</name> <modifier pos:start="1049:53" pos:end="1049:53">*</modifier></type><name pos:start="1049:54" pos:end="1049:58">nread</name></decl></parameter>)</parameter_list>
<block pos:start="1050:1" pos:end="1067:1">{<block_content pos:start="1051:5" pos:end="1066:23">
    <decl_stmt pos:start="1051:5" pos:end="1051:27"><decl pos:start="1051:5" pos:end="1051:19"><type pos:start="1051:5" pos:end="1051:7"><name pos:start="1051:5" pos:end="1051:7">int</name></type> <name pos:start="1051:9" pos:end="1051:19">request_len</name></decl>, <decl pos:start="1051:22" pos:end="1051:26"><type ref="prev" pos:start="1051:5" pos:end="1051:7"/><name pos:start="1051:22" pos:end="1051:22">n</name> <init pos:start="1051:24" pos:end="1051:26">= <expr pos:start="1051:26" pos:end="1051:26"><literal type="number" pos:start="1051:26" pos:end="1051:26">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="1053:5" pos:end="1053:47"><expr pos:start="1053:5" pos:end="1053:46"><name pos:start="1053:5" pos:end="1053:15">request_len</name> <operator pos:start="1053:17" pos:end="1053:17">=</operator> <call pos:start="1053:19" pos:end="1053:46"><name pos:start="1053:19" pos:end="1053:33">get_request_len</name><argument_list pos:start="1053:34" pos:end="1053:46">(<argument pos:start="1053:35" pos:end="1053:37"><expr pos:start="1053:35" pos:end="1053:37"><name pos:start="1053:35" pos:end="1053:37">buf</name></expr></argument>, <argument pos:start="1053:40" pos:end="1053:45"><expr pos:start="1053:40" pos:end="1053:45"><operator pos:start="1053:40" pos:end="1053:40">*</operator><name pos:start="1053:41" pos:end="1053:45">nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="1054:5" pos:end="1060:5">while <condition pos:start="1054:11" pos:end="1054:57">(<expr pos:start="1054:12" pos:end="1054:56"><operator pos:start="1054:12" pos:end="1054:12">*</operator><name pos:start="1054:13" pos:end="1054:17">nread</name> <operator pos:start="1054:19" pos:end="1054:19">&lt;</operator> <name pos:start="1054:21" pos:end="1054:26">bufsiz</name> <operator pos:start="1054:28" pos:end="1054:29">&amp;&amp;</operator> <name pos:start="1054:31" pos:end="1054:41">request_len</name> <operator pos:start="1054:43" pos:end="1054:44">==</operator> <literal type="number" pos:start="1054:46" pos:end="1054:46">0</literal> <operator pos:start="1054:48" pos:end="1054:49">&amp;&amp;</operator> <name pos:start="1054:51" pos:end="1054:51">n</name> <operator pos:start="1054:53" pos:end="1054:54">&gt;=</operator> <literal type="number" pos:start="1054:56" pos:end="1054:56">0</literal></expr>)</condition> <block pos:start="1054:59" pos:end="1060:5">{<block_content pos:start="1055:9" pos:end="1059:9">
        <expr_stmt pos:start="1055:9" pos:end="1055:58"><expr pos:start="1055:9" pos:end="1055:57"><name pos:start="1055:9" pos:end="1055:9">n</name> <operator pos:start="1055:11" pos:end="1055:11">=</operator> <call pos:start="1055:13" pos:end="1055:57"><name pos:start="1055:13" pos:end="1055:16">pull</name><argument_list pos:start="1055:17" pos:end="1055:57">(<argument pos:start="1055:18" pos:end="1055:19"><expr pos:start="1055:18" pos:end="1055:19"><name pos:start="1055:18" pos:end="1055:19">fp</name></expr></argument>, <argument pos:start="1055:22" pos:end="1055:25"><expr pos:start="1055:22" pos:end="1055:25"><name pos:start="1055:22" pos:end="1055:25">conn</name></expr></argument>, <argument pos:start="1055:28" pos:end="1055:39"><expr pos:start="1055:28" pos:end="1055:39"><name pos:start="1055:28" pos:end="1055:30">buf</name> <operator pos:start="1055:32" pos:end="1055:32">+</operator> <operator pos:start="1055:34" pos:end="1055:34">*</operator><name pos:start="1055:35" pos:end="1055:39">nread</name></expr></argument>, <argument pos:start="1055:42" pos:end="1055:56"><expr pos:start="1055:42" pos:end="1055:56"><name pos:start="1055:42" pos:end="1055:47">bufsiz</name> <operator pos:start="1055:49" pos:end="1055:49">-</operator> <operator pos:start="1055:51" pos:end="1055:51">*</operator><name pos:start="1055:52" pos:end="1055:56">nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1056:9" pos:end="1059:9"><if pos:start="1056:9" pos:end="1059:9">if <condition pos:start="1056:12" pos:end="1056:18">(<expr pos:start="1056:13" pos:end="1056:17"><name pos:start="1056:13" pos:end="1056:13">n</name> <operator pos:start="1056:15" pos:end="1056:15">&gt;</operator> <literal type="number" pos:start="1056:17" pos:end="1056:17">0</literal></expr>)</condition> <block pos:start="1056:20" pos:end="1059:9">{<block_content pos:start="1057:13" pos:end="1058:55">
            <expr_stmt pos:start="1057:13" pos:end="1057:24"><expr pos:start="1057:13" pos:end="1057:23"><operator pos:start="1057:13" pos:end="1057:13">*</operator><name pos:start="1057:14" pos:end="1057:18">nread</name> <operator pos:start="1057:20" pos:end="1057:21">+=</operator> <name pos:start="1057:23" pos:end="1057:23">n</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1058:13" pos:end="1058:55"><expr pos:start="1058:13" pos:end="1058:54"><name pos:start="1058:13" pos:end="1058:23">request_len</name> <operator pos:start="1058:25" pos:end="1058:25">=</operator> <call pos:start="1058:27" pos:end="1058:54"><name pos:start="1058:27" pos:end="1058:41">get_request_len</name><argument_list pos:start="1058:42" pos:end="1058:54">(<argument pos:start="1058:43" pos:end="1058:45"><expr pos:start="1058:43" pos:end="1058:45"><name pos:start="1058:43" pos:end="1058:45">buf</name></expr></argument>, <argument pos:start="1058:48" pos:end="1058:53"><expr pos:start="1058:48" pos:end="1058:53"><operator pos:start="1058:48" pos:end="1058:48">*</operator><name pos:start="1058:49" pos:end="1058:53">nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt pos:start="1062:5" pos:end="1065:5"><if pos:start="1062:5" pos:end="1065:5">if <condition pos:start="1062:8" pos:end="1062:14">(<expr pos:start="1062:9" pos:end="1062:13"><name pos:start="1062:9" pos:end="1062:9">n</name> <operator pos:start="1062:11" pos:end="1062:11">&lt;</operator> <literal type="number" pos:start="1062:13" pos:end="1062:13">0</literal></expr>)</condition> <block pos:start="1062:16" pos:end="1065:5">{<block_content pos:start="1064:9" pos:end="1064:18">
        <comment type="line" pos:start="1063:9" pos:end="1063:102">// recv() error -&gt; propagate error; do not process a b0rked-with-very-high-probability request</comment>
        <return pos:start="1064:9" pos:end="1064:18">return <expr pos:start="1064:16" pos:end="1064:17"><operator pos:start="1064:16" pos:end="1064:16">-</operator><literal type="number" pos:start="1064:17" pos:end="1064:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1066:5" pos:end="1066:23">return <expr pos:start="1066:12" pos:end="1066:22"><name pos:start="1066:12" pos:end="1066:22">request_len</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1068:1" pos:end="1073:3">/*
 * This function is called by the Mongoose code when an
 * incoming HTTP request is processed.
 * Returns 0 on success, non-zero if the request wasn't
 * handled.
 */</comment>
<function pos:start="1074:1" pos:end="1119:1"><type pos:start="1074:1" pos:end="1074:10"><specifier pos:start="1074:1" pos:end="1074:6">static</specifier> <name pos:start="1074:8" pos:end="1074:10">int</name></type> <name pos:start="1074:12" pos:end="1074:25">est_mg_handler</name> <parameter_list pos:start="1074:27" pos:end="1074:54">(<parameter pos:start="1074:28" pos:end="1074:53"><decl pos:start="1074:28" pos:end="1074:53"><type pos:start="1074:28" pos:end="1074:53"><name pos:start="1074:28" pos:end="1074:47"><name pos:start="1074:28" pos:end="1074:33">struct</name> <name pos:start="1074:35" pos:end="1074:47">mg_connection</name></name> <modifier pos:start="1074:49" pos:end="1074:49">*</modifier></type><name pos:start="1074:50" pos:end="1074:53">conn</name></decl></parameter>)</parameter_list>
<block pos:start="1075:1" pos:end="1119:1">{<block_content pos:start="1076:5" pos:end="1118:18">
    <decl_stmt pos:start="1076:5" pos:end="1076:75"><decl pos:start="1076:5" pos:end="1076:74"><type pos:start="1076:5" pos:end="1076:34"><specifier pos:start="1076:5" pos:end="1076:9">const</specifier> <name pos:start="1076:11" pos:end="1076:32"><name pos:start="1076:11" pos:end="1076:16">struct</name> <name pos:start="1076:18" pos:end="1076:32">mg_request_info</name></name> <modifier pos:start="1076:34" pos:end="1076:34">*</modifier></type><name pos:start="1076:35" pos:end="1076:46">request_info</name> <init pos:start="1076:48" pos:end="1076:74">= <expr pos:start="1076:50" pos:end="1076:74"><call pos:start="1076:50" pos:end="1076:74"><name pos:start="1076:50" pos:end="1076:68">mg_get_request_info</name><argument_list pos:start="1076:69" pos:end="1076:74">(<argument pos:start="1076:70" pos:end="1076:73"><expr pos:start="1076:70" pos:end="1076:73"><name pos:start="1076:70" pos:end="1076:73">conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1077:5" pos:end="1077:39"><decl pos:start="1077:5" pos:end="1077:38"><type pos:start="1077:5" pos:end="1077:13"><name pos:start="1077:5" pos:end="1077:11">EST_CTX</name> <modifier pos:start="1077:13" pos:end="1077:13">*</modifier></type><name pos:start="1077:14" pos:end="1077:17">ectx</name> <init pos:start="1077:19" pos:end="1077:38">= <expr pos:start="1077:21" pos:end="1077:38"><name pos:start="1077:21" pos:end="1077:38"><name pos:start="1077:21" pos:end="1077:24">conn</name><operator pos:start="1077:25" pos:end="1077:26">-&gt;</operator><name pos:start="1077:27" pos:end="1077:29">ctx</name><operator pos:start="1077:30" pos:end="1077:31">-&gt;</operator><name pos:start="1077:32" pos:end="1077:38">est_ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1078:5" pos:end="1078:15"><decl pos:start="1078:5" pos:end="1078:14"><type pos:start="1078:5" pos:end="1078:10"><name pos:start="1078:5" pos:end="1078:8">char</name> <modifier pos:start="1078:10" pos:end="1078:10">*</modifier></type><name pos:start="1078:11" pos:end="1078:14">body</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1079:5" pos:end="1079:11"><decl pos:start="1079:5" pos:end="1079:10"><type pos:start="1079:5" pos:end="1079:7"><name pos:start="1079:5" pos:end="1079:7">int</name></type> <name pos:start="1079:9" pos:end="1079:10">cl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1080:5" pos:end="1080:30"><decl pos:start="1080:5" pos:end="1080:29"><type pos:start="1080:5" pos:end="1080:7"><name pos:start="1080:5" pos:end="1080:7">int</name></type> <name pos:start="1080:9" pos:end="1080:14">est_rv</name> <init pos:start="1080:16" pos:end="1080:29">= <expr pos:start="1080:18" pos:end="1080:29"><name pos:start="1080:18" pos:end="1080:29">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1081:5" pos:end="1081:23"><decl pos:start="1081:5" pos:end="1081:22"><type pos:start="1081:5" pos:end="1081:16"><specifier pos:start="1081:5" pos:end="1081:9">const</specifier> <name pos:start="1081:11" pos:end="1081:14">char</name> <modifier pos:start="1081:16" pos:end="1081:16">*</modifier></type><name pos:start="1081:17" pos:end="1081:22">cl_hdr</name></decl>;</decl_stmt> <comment type="block" pos:start="1081:25" pos:end="1081:56">/* content length html header */</comment>
    <decl_stmt pos:start="1082:5" pos:end="1082:23"><decl pos:start="1082:5" pos:end="1082:22"><type pos:start="1082:5" pos:end="1082:16"><specifier pos:start="1082:5" pos:end="1082:9">const</specifier> <name pos:start="1082:11" pos:end="1082:14">char</name> <modifier pos:start="1082:16" pos:end="1082:16">*</modifier></type><name pos:start="1082:17" pos:end="1082:22">ct_hdr</name></decl>;</decl_stmt> <comment type="block" pos:start="1082:25" pos:end="1082:54">/* content type html header */</comment>

    <expr_stmt pos:start="1084:5" pos:end="1084:51"><expr pos:start="1084:5" pos:end="1084:50"><name pos:start="1084:5" pos:end="1084:10">cl_hdr</name> <operator pos:start="1084:12" pos:end="1084:12">=</operator> <call pos:start="1084:14" pos:end="1084:50"><name pos:start="1084:14" pos:end="1084:26">mg_get_header</name><argument_list pos:start="1084:27" pos:end="1084:50">(<argument pos:start="1084:28" pos:end="1084:31"><expr pos:start="1084:28" pos:end="1084:31"><name pos:start="1084:28" pos:end="1084:31">conn</name></expr></argument>, <argument pos:start="1084:34" pos:end="1084:49"><expr pos:start="1084:34" pos:end="1084:49"><literal type="string" pos:start="1084:34" pos:end="1084:49">"Content-Length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1085:5" pos:end="1100:5"><if pos:start="1085:5" pos:end="1097:5">if <condition pos:start="1085:8" pos:end="1085:15">(<expr pos:start="1085:9" pos:end="1085:14"><name pos:start="1085:9" pos:end="1085:14">cl_hdr</name></expr>)</condition> <block pos:start="1085:17" pos:end="1097:5">{<block_content pos:start="1092:9" pos:end="1096:23">
        <comment type="block" pos:start="1086:9" pos:end="1091:11">/*
         * At this point, Content-Length value has already been
         * error checked and is guaranteed to be within the correct
         * range.  Obtain the length, allocate the buffer for the
         * body, and read it in.
         */</comment>
        <expr_stmt pos:start="1092:9" pos:end="1092:26"><expr pos:start="1092:9" pos:end="1092:25"><name pos:start="1092:9" pos:end="1092:10">cl</name> <operator pos:start="1092:12" pos:end="1092:12">=</operator> <call pos:start="1092:14" pos:end="1092:25"><name pos:start="1092:14" pos:end="1092:17">atoi</name><argument_list pos:start="1092:18" pos:end="1092:25">(<argument pos:start="1092:19" pos:end="1092:24"><expr pos:start="1092:19" pos:end="1092:24"><name pos:start="1092:19" pos:end="1092:24">cl_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1093:9" pos:end="1093:28"><expr pos:start="1093:9" pos:end="1093:27"><name pos:start="1093:9" pos:end="1093:12">body</name> <operator pos:start="1093:14" pos:end="1093:14">=</operator> <call pos:start="1093:16" pos:end="1093:27"><name pos:start="1093:16" pos:end="1093:21">malloc</name><argument_list pos:start="1093:22" pos:end="1093:27">(<argument pos:start="1093:23" pos:end="1093:26"><expr pos:start="1093:23" pos:end="1093:26"><name pos:start="1093:23" pos:end="1093:24">cl</name><operator pos:start="1093:25" pos:end="1093:25">+</operator><literal type="number" pos:start="1093:26" pos:end="1093:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1094:9" pos:end="1094:32"><expr pos:start="1094:9" pos:end="1094:31"><call pos:start="1094:9" pos:end="1094:31"><name pos:start="1094:9" pos:end="1094:15">mg_read</name><argument_list pos:start="1094:16" pos:end="1094:31">(<argument pos:start="1094:17" pos:end="1094:20"><expr pos:start="1094:17" pos:end="1094:20"><name pos:start="1094:17" pos:end="1094:20">conn</name></expr></argument>, <argument pos:start="1094:23" pos:end="1094:26"><expr pos:start="1094:23" pos:end="1094:26"><name pos:start="1094:23" pos:end="1094:26">body</name></expr></argument>, <argument pos:start="1094:29" pos:end="1094:30"><expr pos:start="1094:29" pos:end="1094:30"><name pos:start="1094:29" pos:end="1094:30">cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" pos:start="1095:9" pos:end="1095:53">/* Make sure the buffer is null terminated */</comment>
	<expr_stmt pos:start="1096:9" pos:end="1096:23"><expr pos:start="1096:9" pos:end="1096:22"><name pos:start="1096:9" pos:end="1096:16"><name pos:start="1096:9" pos:end="1096:12">body</name><index pos:start="1096:13" pos:end="1096:16">[<expr pos:start="1096:14" pos:end="1096:15"><name pos:start="1096:14" pos:end="1096:15">cl</name></expr>]</index></name> <operator pos:start="1096:18" pos:end="1096:18">=</operator> <literal type="number" pos:start="1096:20" pos:end="1096:22">0x0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1097:7" pos:end="1100:5">else <block pos:start="1097:12" pos:end="1100:5">{<block_content pos:start="1098:9" pos:end="1099:20">
        <expr_stmt pos:start="1098:9" pos:end="1098:15"><expr pos:start="1098:9" pos:end="1098:14"><name pos:start="1098:9" pos:end="1098:10">cl</name> <operator pos:start="1098:12" pos:end="1098:12">=</operator> <literal type="number" pos:start="1098:14" pos:end="1098:14">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1099:9" pos:end="1099:20"><expr pos:start="1099:9" pos:end="1099:19"><name pos:start="1099:9" pos:end="1099:12">body</name> <operator pos:start="1099:14" pos:end="1099:14">=</operator> <name pos:start="1099:16" pos:end="1099:19">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="1101:5" pos:end="1101:49"><expr pos:start="1101:5" pos:end="1101:48"><name pos:start="1101:5" pos:end="1101:10">ct_hdr</name> <operator pos:start="1101:12" pos:end="1101:12">=</operator> <call pos:start="1101:14" pos:end="1101:48"><name pos:start="1101:14" pos:end="1101:26">mg_get_header</name><argument_list pos:start="1101:27" pos:end="1101:48">(<argument pos:start="1101:28" pos:end="1101:31"><expr pos:start="1101:28" pos:end="1101:31"><name pos:start="1101:28" pos:end="1101:31">conn</name></expr></argument>, <argument pos:start="1101:34" pos:end="1101:47"><expr pos:start="1101:34" pos:end="1101:47"><literal type="string" pos:start="1101:34" pos:end="1101:47">"Content-Type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1102:5" pos:end="1110:5"><if pos:start="1102:5" pos:end="1106:5">if <condition pos:start="1102:8" pos:end="1102:37">(<expr pos:start="1102:9" pos:end="1102:36"><name pos:start="1102:9" pos:end="1102:22"><name pos:start="1102:9" pos:end="1102:12">ectx</name><operator pos:start="1102:13" pos:end="1102:14">-&gt;</operator><name pos:start="1102:15" pos:end="1102:22">est_mode</name></name> <operator pos:start="1102:24" pos:end="1102:25">==</operator> <name pos:start="1102:27" pos:end="1102:36">EST_SERVER</name></expr>)</condition> <block pos:start="1102:39" pos:end="1106:5">{<block_content pos:start="1103:9" pos:end="1105:78">
        <expr_stmt pos:start="1103:9" pos:end="1105:78"><expr pos:start="1103:9" pos:end="1105:77"><name pos:start="1103:9" pos:end="1103:14">est_rv</name> <operator pos:start="1103:16" pos:end="1103:16">=</operator> <call pos:start="1103:18" pos:end="1105:77"><name pos:start="1103:18" pos:end="1103:33">est_http_request</name><argument_list pos:start="1103:34" pos:end="1105:77">(<argument pos:start="1103:35" pos:end="1103:38"><expr pos:start="1103:35" pos:end="1103:38"><name pos:start="1103:35" pos:end="1103:38">ectx</name></expr></argument>, <argument pos:start="1103:41" pos:end="1103:44"><expr pos:start="1103:41" pos:end="1103:44"><name pos:start="1103:41" pos:end="1103:44">conn</name></expr></argument>,
                                  <argument pos:start="1104:35" pos:end="1104:69"><expr pos:start="1104:35" pos:end="1104:69"><operator pos:start="1104:35" pos:end="1104:35">(</operator><name pos:start="1104:36" pos:end="1104:39">char</name><operator pos:start="1104:40" pos:end="1104:40">*</operator><operator pos:start="1104:41" pos:end="1104:41">)</operator><name pos:start="1104:42" pos:end="1104:69"><name pos:start="1104:42" pos:end="1104:53">request_info</name><operator pos:start="1104:54" pos:end="1104:55">-&gt;</operator><name pos:start="1104:56" pos:end="1104:69">request_method</name></name></expr></argument>,
                                  <argument pos:start="1105:35" pos:end="1105:58"><expr pos:start="1105:35" pos:end="1105:58"><operator pos:start="1105:35" pos:end="1105:35">(</operator><name pos:start="1105:36" pos:end="1105:39">char</name><operator pos:start="1105:40" pos:end="1105:40">*</operator><operator pos:start="1105:41" pos:end="1105:41">)</operator><name pos:start="1105:42" pos:end="1105:58"><name pos:start="1105:42" pos:end="1105:53">request_info</name><operator pos:start="1105:54" pos:end="1105:55">-&gt;</operator><name pos:start="1105:56" pos:end="1105:58">uri</name></name></expr></argument>, <argument pos:start="1105:61" pos:end="1105:64"><expr pos:start="1105:61" pos:end="1105:64"><name pos:start="1105:61" pos:end="1105:64">body</name></expr></argument>, <argument pos:start="1105:67" pos:end="1105:68"><expr pos:start="1105:67" pos:end="1105:68"><name pos:start="1105:67" pos:end="1105:68">cl</name></expr></argument>, <argument pos:start="1105:71" pos:end="1105:76"><expr pos:start="1105:71" pos:end="1105:76"><name pos:start="1105:71" pos:end="1105:76">ct_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1106:7" pos:end="1110:5">else if <condition pos:start="1106:15" pos:end="1106:43">(<expr pos:start="1106:16" pos:end="1106:42"><name pos:start="1106:16" pos:end="1106:29"><name pos:start="1106:16" pos:end="1106:19">ectx</name><operator pos:start="1106:20" pos:end="1106:21">-&gt;</operator><name pos:start="1106:22" pos:end="1106:29">est_mode</name></name> <operator pos:start="1106:31" pos:end="1106:32">==</operator> <name pos:start="1106:34" pos:end="1106:42">EST_PROXY</name></expr>)</condition> <block pos:start="1106:45" pos:end="1110:5">{<block_content pos:start="1107:9" pos:end="1109:84">
        <expr_stmt pos:start="1107:9" pos:end="1109:84"><expr pos:start="1107:9" pos:end="1109:83"><name pos:start="1107:9" pos:end="1107:14">est_rv</name> <operator pos:start="1107:16" pos:end="1107:16">=</operator> <call pos:start="1107:18" pos:end="1109:83"><name pos:start="1107:18" pos:end="1107:39">est_proxy_http_request</name><argument_list pos:start="1107:40" pos:end="1109:83">(<argument pos:start="1107:41" pos:end="1107:44"><expr pos:start="1107:41" pos:end="1107:44"><name pos:start="1107:41" pos:end="1107:44">ectx</name></expr></argument>, <argument pos:start="1107:47" pos:end="1107:50"><expr pos:start="1107:47" pos:end="1107:50"><name pos:start="1107:47" pos:end="1107:50">conn</name></expr></argument>,
                                        <argument pos:start="1108:41" pos:end="1108:75"><expr pos:start="1108:41" pos:end="1108:75"><operator pos:start="1108:41" pos:end="1108:41">(</operator><name pos:start="1108:42" pos:end="1108:45">char</name><operator pos:start="1108:46" pos:end="1108:46">*</operator><operator pos:start="1108:47" pos:end="1108:47">)</operator><name pos:start="1108:48" pos:end="1108:75"><name pos:start="1108:48" pos:end="1108:59">request_info</name><operator pos:start="1108:60" pos:end="1108:61">-&gt;</operator><name pos:start="1108:62" pos:end="1108:75">request_method</name></name></expr></argument>,
                                        <argument pos:start="1109:41" pos:end="1109:64"><expr pos:start="1109:41" pos:end="1109:64"><operator pos:start="1109:41" pos:end="1109:41">(</operator><name pos:start="1109:42" pos:end="1109:45">char</name><operator pos:start="1109:46" pos:end="1109:46">*</operator><operator pos:start="1109:47" pos:end="1109:47">)</operator><name pos:start="1109:48" pos:end="1109:64"><name pos:start="1109:48" pos:end="1109:59">request_info</name><operator pos:start="1109:60" pos:end="1109:61">-&gt;</operator><name pos:start="1109:62" pos:end="1109:64">uri</name></name></expr></argument>, <argument pos:start="1109:67" pos:end="1109:70"><expr pos:start="1109:67" pos:end="1109:70"><name pos:start="1109:67" pos:end="1109:70">body</name></expr></argument>, <argument pos:start="1109:73" pos:end="1109:74"><expr pos:start="1109:73" pos:end="1109:74"><name pos:start="1109:73" pos:end="1109:74">cl</name></expr></argument>, <argument pos:start="1109:77" pos:end="1109:82"><expr pos:start="1109:77" pos:end="1109:82"><name pos:start="1109:77" pos:end="1109:82">ct_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1111:5" pos:end="1114:5"><if pos:start="1111:5" pos:end="1114:5">if <condition pos:start="1111:8" pos:end="1111:31">(<expr pos:start="1111:9" pos:end="1111:30"><name pos:start="1111:9" pos:end="1111:14">est_rv</name> <operator pos:start="1111:16" pos:end="1111:17">!=</operator> <name pos:start="1111:19" pos:end="1111:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1111:33" pos:end="1114:5">{<block_content pos:start="1112:9" pos:end="1113:56">
        <expr_stmt pos:start="1112:9" pos:end="1113:56"><expr pos:start="1112:9" pos:end="1113:55"><call pos:start="1112:9" pos:end="1113:55"><name pos:start="1112:9" pos:end="1112:19">EST_LOG_ERR</name><argument_list pos:start="1112:20" pos:end="1113:55">(<argument pos:start="1112:21" pos:end="1112:56"><expr pos:start="1112:21" pos:end="1112:56"><literal type="string" pos:start="1112:21" pos:end="1112:56">"EST error response code: %d (%s)\n"</literal></expr></argument>, 
		    <argument pos:start="1113:21" pos:end="1113:26"><expr pos:start="1113:21" pos:end="1113:26"><name pos:start="1113:21" pos:end="1113:26">est_rv</name></expr></argument>, <argument pos:start="1113:29" pos:end="1113:54"><expr pos:start="1113:29" pos:end="1113:54"><call pos:start="1113:29" pos:end="1113:54"><name pos:start="1113:29" pos:end="1113:46">EST_ERR_NUM_TO_STR</name><argument_list pos:start="1113:47" pos:end="1113:54">(<argument pos:start="1113:48" pos:end="1113:53"><expr pos:start="1113:48" pos:end="1113:53"><name pos:start="1113:48" pos:end="1113:53">est_rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1115:5" pos:end="1117:5"><if pos:start="1115:5" pos:end="1117:5">if <condition pos:start="1115:8" pos:end="1115:15">(<expr pos:start="1115:9" pos:end="1115:14"><name pos:start="1115:9" pos:end="1115:14">cl_hdr</name></expr>)</condition> <block pos:start="1115:17" pos:end="1117:5">{<block_content pos:start="1116:9" pos:end="1116:19">
        <expr_stmt pos:start="1116:9" pos:end="1116:19"><expr pos:start="1116:9" pos:end="1116:18"><call pos:start="1116:9" pos:end="1116:18"><name pos:start="1116:9" pos:end="1116:12">free</name><argument_list pos:start="1116:13" pos:end="1116:18">(<argument pos:start="1116:14" pos:end="1116:17"><expr pos:start="1116:14" pos:end="1116:17"><name pos:start="1116:14" pos:end="1116:17">body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1118:5" pos:end="1118:18">return <expr pos:start="1118:12" pos:end="1118:17"><name pos:start="1118:12" pos:end="1118:17">est_rv</name></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="1120:1" pos:end="1120:52">// a directory, or call embedded function, etcetera.</comment>
<function pos:start="1121:1" pos:end="1143:1"><type pos:start="1121:1" pos:end="1121:11"><specifier pos:start="1121:1" pos:end="1121:6">static</specifier> <name pos:start="1121:8" pos:end="1121:11">void</name></type> <name pos:start="1121:13" pos:end="1121:26">handle_request</name> <parameter_list pos:start="1121:28" pos:end="1121:55">(<parameter pos:start="1121:29" pos:end="1121:54"><decl pos:start="1121:29" pos:end="1121:54"><type pos:start="1121:29" pos:end="1121:54"><name pos:start="1121:29" pos:end="1121:48"><name pos:start="1121:29" pos:end="1121:34">struct</name> <name pos:start="1121:36" pos:end="1121:48">mg_connection</name></name> <modifier pos:start="1121:50" pos:end="1121:50">*</modifier></type><name pos:start="1121:51" pos:end="1121:54">conn</name></decl></parameter>)</parameter_list>
<block pos:start="1122:1" pos:end="1143:1">{<block_content pos:start="1123:5" pos:end="1142:5">
    <decl_stmt pos:start="1123:5" pos:end="1123:53"><decl pos:start="1123:5" pos:end="1123:52"><type pos:start="1123:5" pos:end="1123:28"><name pos:start="1123:5" pos:end="1123:26"><name pos:start="1123:5" pos:end="1123:10">struct</name> <name pos:start="1123:12" pos:end="1123:26">mg_request_info</name></name> <modifier pos:start="1123:28" pos:end="1123:28">*</modifier></type><name pos:start="1123:29" pos:end="1123:30">ri</name> <init pos:start="1123:32" pos:end="1123:52">= <expr pos:start="1123:34" pos:end="1123:52"><operator pos:start="1123:34" pos:end="1123:34">&amp;</operator><name pos:start="1123:35" pos:end="1123:52"><name pos:start="1123:35" pos:end="1123:38">conn</name><operator pos:start="1123:39" pos:end="1123:40">-&gt;</operator><name pos:start="1123:41" pos:end="1123:52">request_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1124:5" pos:end="1124:16"><decl pos:start="1124:5" pos:end="1124:15"><type pos:start="1124:5" pos:end="1124:7"><name pos:start="1124:5" pos:end="1124:7">int</name></type> <name pos:start="1124:9" pos:end="1124:15">uri_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1125:5" pos:end="1125:11"><decl pos:start="1125:5" pos:end="1125:10"><type pos:start="1125:5" pos:end="1125:7"><name pos:start="1125:5" pos:end="1125:7">int</name></type> <name pos:start="1125:9" pos:end="1125:10">rv</name></decl>;</decl_stmt>

    <if_stmt pos:start="1127:5" pos:end="1129:5"><if pos:start="1127:5" pos:end="1129:5">if <condition pos:start="1127:8" pos:end="1127:73">(<expr pos:start="1127:9" pos:end="1127:72"><operator pos:start="1127:9" pos:end="1127:9">(</operator><name pos:start="1127:10" pos:end="1127:40"><name pos:start="1127:10" pos:end="1127:13">conn</name><operator pos:start="1127:14" pos:end="1127:15">-&gt;</operator><name pos:start="1127:16" pos:end="1127:27">request_info</name><operator pos:start="1127:28" pos:end="1127:28">.</operator><name pos:start="1127:29" pos:end="1127:40">query_string</name></name> <operator pos:start="1127:42" pos:end="1127:42">=</operator> <call pos:start="1127:44" pos:end="1127:63"><name pos:start="1127:44" pos:end="1127:49">strchr</name><argument_list pos:start="1127:50" pos:end="1127:63">(<argument pos:start="1127:51" pos:end="1127:57"><expr pos:start="1127:51" pos:end="1127:57"><name pos:start="1127:51" pos:end="1127:57"><name pos:start="1127:51" pos:end="1127:52">ri</name><operator pos:start="1127:53" pos:end="1127:54">-&gt;</operator><name pos:start="1127:55" pos:end="1127:57">uri</name></name></expr></argument>, <argument pos:start="1127:60" pos:end="1127:62"><expr pos:start="1127:60" pos:end="1127:62"><literal type="char" pos:start="1127:60" pos:end="1127:62">'?'</literal></expr></argument>)</argument_list></call><operator pos:start="1127:64" pos:end="1127:64">)</operator> <operator pos:start="1127:66" pos:end="1127:67">!=</operator> <name pos:start="1127:69" pos:end="1127:72">NULL</name></expr>)</condition> <block pos:start="1127:75" pos:end="1129:5">{<block_content pos:start="1128:9" pos:end="1128:59">
        <expr_stmt pos:start="1128:9" pos:end="1128:59"><expr pos:start="1128:9" pos:end="1128:58"><operator pos:start="1128:9" pos:end="1128:9">*</operator><operator pos:start="1128:10" pos:end="1128:10">(</operator><operator pos:start="1128:11" pos:end="1128:11">(</operator><name pos:start="1128:12" pos:end="1128:15">char</name><operator pos:start="1128:16" pos:end="1128:16">*</operator><operator pos:start="1128:17" pos:end="1128:17">)</operator><name pos:start="1128:18" pos:end="1128:48"><name pos:start="1128:18" pos:end="1128:21">conn</name><operator pos:start="1128:22" pos:end="1128:23">-&gt;</operator><name pos:start="1128:24" pos:end="1128:35">request_info</name><operator pos:start="1128:36" pos:end="1128:36">.</operator><name pos:start="1128:37" pos:end="1128:48">query_string</name></name><operator pos:start="1128:49" pos:end="1128:50">++</operator><operator pos:start="1128:51" pos:end="1128:51">)</operator> <operator pos:start="1128:53" pos:end="1128:53">=</operator> <literal type="char" pos:start="1128:55" pos:end="1128:58">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1130:5" pos:end="1130:55"><expr pos:start="1130:5" pos:end="1130:54"><name pos:start="1130:5" pos:end="1130:11">uri_len</name> <operator pos:start="1130:13" pos:end="1130:13">=</operator> <operator pos:start="1130:15" pos:end="1130:15">(</operator><name pos:start="1130:16" pos:end="1130:18">int</name><operator pos:start="1130:19" pos:end="1130:19">)</operator><call pos:start="1130:20" pos:end="1130:54"><name pos:start="1130:20" pos:end="1130:28">strnlen_s</name><argument_list pos:start="1130:29" pos:end="1130:54">(<argument pos:start="1130:30" pos:end="1130:36"><expr pos:start="1130:30" pos:end="1130:36"><name pos:start="1130:30" pos:end="1130:36"><name pos:start="1130:30" pos:end="1130:31">ri</name><operator pos:start="1130:32" pos:end="1130:33">-&gt;</operator><name pos:start="1130:34" pos:end="1130:36">uri</name></name></expr></argument>, <argument pos:start="1130:39" pos:end="1130:53"><expr pos:start="1130:39" pos:end="1130:53"><name pos:start="1130:39" pos:end="1130:53">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1131:5" pos:end="1131:65"><expr pos:start="1131:5" pos:end="1131:64"><call pos:start="1131:5" pos:end="1131:64"><name pos:start="1131:5" pos:end="1131:14">url_decode</name><argument_list pos:start="1131:15" pos:end="1131:64">(<argument pos:start="1131:16" pos:end="1131:22"><expr pos:start="1131:16" pos:end="1131:22"><name pos:start="1131:16" pos:end="1131:22"><name pos:start="1131:16" pos:end="1131:17">ri</name><operator pos:start="1131:18" pos:end="1131:19">-&gt;</operator><name pos:start="1131:20" pos:end="1131:22">uri</name></name></expr></argument>, <argument pos:start="1131:25" pos:end="1131:31"><expr pos:start="1131:25" pos:end="1131:31"><name pos:start="1131:25" pos:end="1131:31">uri_len</name></expr></argument>, <argument pos:start="1131:34" pos:end="1131:47"><expr pos:start="1131:34" pos:end="1131:47"><operator pos:start="1131:34" pos:end="1131:34">(</operator><name pos:start="1131:35" pos:end="1131:38">char</name><operator pos:start="1131:39" pos:end="1131:39">*</operator><operator pos:start="1131:40" pos:end="1131:40">)</operator><name pos:start="1131:41" pos:end="1131:47"><name pos:start="1131:41" pos:end="1131:42">ri</name><operator pos:start="1131:43" pos:end="1131:44">-&gt;</operator><name pos:start="1131:45" pos:end="1131:47">uri</name></name></expr></argument>, <argument pos:start="1131:50" pos:end="1131:60"><expr pos:start="1131:50" pos:end="1131:60"><name pos:start="1131:50" pos:end="1131:56">uri_len</name> <operator pos:start="1131:58" pos:end="1131:58">+</operator> <literal type="number" pos:start="1131:60" pos:end="1131:60">1</literal></expr></argument>, <argument pos:start="1131:63" pos:end="1131:63"><expr pos:start="1131:63" pos:end="1131:63"><literal type="number" pos:start="1131:63" pos:end="1131:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1132:5" pos:end="1132:58"><expr pos:start="1132:5" pos:end="1132:57"><call pos:start="1132:5" pos:end="1132:57"><name pos:start="1132:5" pos:end="1132:41">remove_double_dots_and_double_slashes</name><argument_list pos:start="1132:42" pos:end="1132:57">(<argument pos:start="1132:43" pos:end="1132:56"><expr pos:start="1132:43" pos:end="1132:56"><operator pos:start="1132:43" pos:end="1132:43">(</operator><name pos:start="1132:44" pos:end="1132:47">char</name><operator pos:start="1132:48" pos:end="1132:48">*</operator><operator pos:start="1132:49" pos:end="1132:49">)</operator><name pos:start="1132:50" pos:end="1132:56"><name pos:start="1132:50" pos:end="1132:51">ri</name><operator pos:start="1132:52" pos:end="1132:53">-&gt;</operator><name pos:start="1132:54" pos:end="1132:56">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1134:5" pos:end="1134:32"><expr pos:start="1134:5" pos:end="1134:31"><call pos:start="1134:5" pos:end="1134:31"><name pos:start="1134:5" pos:end="1134:16">EST_LOG_INFO</name><argument_list pos:start="1134:17" pos:end="1134:31">(<argument pos:start="1134:18" pos:end="1134:21"><expr pos:start="1134:18" pos:end="1134:21"><literal type="string" pos:start="1134:18" pos:end="1134:21">"%s"</literal></expr></argument>, <argument pos:start="1134:24" pos:end="1134:30"><expr pos:start="1134:24" pos:end="1134:30"><name pos:start="1134:24" pos:end="1134:30"><name pos:start="1134:24" pos:end="1134:25">ri</name><operator pos:start="1134:26" pos:end="1134:27">-&gt;</operator><name pos:start="1134:28" pos:end="1134:30">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1135:5" pos:end="1137:7">/*
     * Process the request
     */</comment>
    <expr_stmt pos:start="1138:5" pos:end="1138:30"><expr pos:start="1138:5" pos:end="1138:29"><name pos:start="1138:5" pos:end="1138:6">rv</name> <operator pos:start="1138:8" pos:end="1138:8">=</operator> <call pos:start="1138:10" pos:end="1138:29"><name pos:start="1138:10" pos:end="1138:23">est_mg_handler</name><argument_list pos:start="1138:24" pos:end="1138:29">(<argument pos:start="1138:25" pos:end="1138:28"><expr pos:start="1138:25" pos:end="1138:28"><name pos:start="1138:25" pos:end="1138:28">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1139:5" pos:end="1142:5"><if pos:start="1139:5" pos:end="1142:5">if <condition pos:start="1139:8" pos:end="1139:27">(<expr pos:start="1139:9" pos:end="1139:26"><name pos:start="1139:9" pos:end="1139:20">EST_ERR_NONE</name> <operator pos:start="1139:22" pos:end="1139:23">!=</operator> <name pos:start="1139:25" pos:end="1139:26">rv</name></expr>)</condition> <block pos:start="1139:29" pos:end="1142:5">{<block_content pos:start="1140:9" pos:end="1141:49">
	<expr_stmt pos:start="1140:9" pos:end="1141:49"><expr pos:start="1140:9" pos:end="1141:48"><call pos:start="1140:9" pos:end="1141:48"><name pos:start="1140:9" pos:end="1140:20">EST_LOG_WARN</name><argument_list pos:start="1140:21" pos:end="1141:48">(<argument pos:start="1140:22" pos:end="1140:57"><expr pos:start="1140:22" pos:end="1140:57"><literal type="string" pos:start="1140:22" pos:end="1140:57">"Incoming request failed rv=%d (%s)"</literal></expr></argument>, 
		     <argument pos:start="1141:22" pos:end="1141:23"><expr pos:start="1141:22" pos:end="1141:23"><name pos:start="1141:22" pos:end="1141:23">rv</name></expr></argument>, <argument pos:start="1141:26" pos:end="1141:47"><expr pos:start="1141:26" pos:end="1141:47"><call pos:start="1141:26" pos:end="1141:47"><name pos:start="1141:26" pos:end="1141:43">EST_ERR_NUM_TO_STR</name><argument_list pos:start="1141:44" pos:end="1141:47">(<argument pos:start="1141:45" pos:end="1141:46"><expr pos:start="1141:45" pos:end="1141:46"><name pos:start="1141:45" pos:end="1141:46">rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="1144:1" pos:end="1144:52">// a directory, or call embedded function, etcetera.</comment>
<function pos:start="1145:1" pos:end="1154:1"><type pos:start="1145:1" pos:end="1145:11"><specifier pos:start="1145:1" pos:end="1145:6">static</specifier> <name pos:start="1145:8" pos:end="1145:11">void</name></type> <name pos:start="1145:13" pos:end="1145:22">log_header</name> <parameter_list pos:start="1145:24" pos:end="1145:77">(<parameter pos:start="1145:25" pos:end="1145:56"><decl pos:start="1145:25" pos:end="1145:56"><type pos:start="1145:25" pos:end="1145:56"><specifier pos:start="1145:25" pos:end="1145:29">const</specifier> <name pos:start="1145:31" pos:end="1145:50"><name pos:start="1145:31" pos:end="1145:36">struct</name> <name pos:start="1145:38" pos:end="1145:50">mg_connection</name></name> <modifier pos:start="1145:52" pos:end="1145:52">*</modifier></type><name pos:start="1145:53" pos:end="1145:56">conn</name></decl></parameter>, <parameter pos:start="1145:59" pos:end="1145:76"><decl pos:start="1145:59" pos:end="1145:76"><type pos:start="1145:59" pos:end="1145:76"><specifier pos:start="1145:59" pos:end="1145:63">const</specifier> <name pos:start="1145:65" pos:end="1145:68">char</name> <modifier pos:start="1145:70" pos:end="1145:70">*</modifier></type><name pos:start="1145:71" pos:end="1145:76">header</name></decl></parameter>)</parameter_list>
<block pos:start="1146:1" pos:end="1154:1">{<block_content pos:start="1147:5" pos:end="1153:5">
    <decl_stmt pos:start="1147:5" pos:end="1147:29"><decl pos:start="1147:5" pos:end="1147:28"><type pos:start="1147:5" pos:end="1147:16"><specifier pos:start="1147:5" pos:end="1147:9">const</specifier> <name pos:start="1147:11" pos:end="1147:14">char</name> <modifier pos:start="1147:16" pos:end="1147:16">*</modifier></type><name pos:start="1147:17" pos:end="1147:28">header_value</name></decl>;</decl_stmt>

    <if_stmt pos:start="1149:5" pos:end="1153:5"><if pos:start="1149:5" pos:end="1151:5">if <condition pos:start="1149:8" pos:end="1149:61">(<expr pos:start="1149:9" pos:end="1149:60"><operator pos:start="1149:9" pos:end="1149:9">(</operator><name pos:start="1149:10" pos:end="1149:21">header_value</name> <operator pos:start="1149:23" pos:end="1149:23">=</operator> <call pos:start="1149:25" pos:end="1149:51"><name pos:start="1149:25" pos:end="1149:37">mg_get_header</name><argument_list pos:start="1149:38" pos:end="1149:51">(<argument pos:start="1149:39" pos:end="1149:42"><expr pos:start="1149:39" pos:end="1149:42"><name pos:start="1149:39" pos:end="1149:42">conn</name></expr></argument>, <argument pos:start="1149:45" pos:end="1149:50"><expr pos:start="1149:45" pos:end="1149:50"><name pos:start="1149:45" pos:end="1149:50">header</name></expr></argument>)</argument_list></call><operator pos:start="1149:52" pos:end="1149:52">)</operator> <operator pos:start="1149:54" pos:end="1149:55">==</operator> <name pos:start="1149:57" pos:end="1149:60">NULL</name></expr>)</condition> <block pos:start="1149:63" pos:end="1151:5">{<block_content pos:start="1150:9" pos:end="1150:33">
        <expr_stmt pos:start="1150:9" pos:end="1150:33"><expr pos:start="1150:9" pos:end="1150:32"><call pos:start="1150:9" pos:end="1150:32"><name pos:start="1150:9" pos:end="1150:20">EST_LOG_INFO</name><argument_list pos:start="1150:21" pos:end="1150:32">(<argument pos:start="1150:22" pos:end="1150:25"><expr pos:start="1150:22" pos:end="1150:25"><literal type="string" pos:start="1150:22" pos:end="1150:25">"%s"</literal></expr></argument>, <argument pos:start="1150:28" pos:end="1150:31"><expr pos:start="1150:28" pos:end="1150:31"><literal type="string" pos:start="1150:28" pos:end="1150:31">" -"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1151:7" pos:end="1153:5">else <block pos:start="1151:12" pos:end="1153:5">{<block_content pos:start="1152:9" pos:end="1152:46">
        <expr_stmt pos:start="1152:9" pos:end="1152:46"><expr pos:start="1152:9" pos:end="1152:45"><call pos:start="1152:9" pos:end="1152:45"><name pos:start="1152:9" pos:end="1152:20">EST_LOG_INFO</name><argument_list pos:start="1152:21" pos:end="1152:45">(<argument pos:start="1152:22" pos:end="1152:30"><expr pos:start="1152:22" pos:end="1152:30"><literal type="string" pos:start="1152:22" pos:end="1152:30">" \"%s\""</literal></expr></argument>, <argument pos:start="1152:33" pos:end="1152:44"><expr pos:start="1152:33" pos:end="1152:44"><name pos:start="1152:33" pos:end="1152:44">header_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="1155:1" pos:end="1155:52">// a directory, or call embedded function, etcetera.</comment>
<function pos:start="1156:1" pos:end="1175:1"><type pos:start="1156:1" pos:end="1156:11"><specifier pos:start="1156:1" pos:end="1156:6">static</specifier> <name pos:start="1156:8" pos:end="1156:11">void</name></type> <name pos:start="1156:13" pos:end="1156:22">log_access</name> <parameter_list pos:start="1156:24" pos:end="1156:57">(<parameter pos:start="1156:25" pos:end="1156:56"><decl pos:start="1156:25" pos:end="1156:56"><type pos:start="1156:25" pos:end="1156:56"><specifier pos:start="1156:25" pos:end="1156:29">const</specifier> <name pos:start="1156:31" pos:end="1156:50"><name pos:start="1156:31" pos:end="1156:36">struct</name> <name pos:start="1156:38" pos:end="1156:50">mg_connection</name></name> <modifier pos:start="1156:52" pos:end="1156:52">*</modifier></type><name pos:start="1156:53" pos:end="1156:56">conn</name></decl></parameter>)</parameter_list>
<block pos:start="1157:1" pos:end="1175:1">{<block_content pos:start="1158:5" pos:end="1174:35">
    <decl_stmt pos:start="1158:5" pos:end="1158:37"><decl pos:start="1158:5" pos:end="1158:36"><type pos:start="1158:5" pos:end="1158:34"><specifier pos:start="1158:5" pos:end="1158:9">const</specifier> <name pos:start="1158:11" pos:end="1158:32"><name pos:start="1158:11" pos:end="1158:16">struct</name> <name pos:start="1158:18" pos:end="1158:32">mg_request_info</name></name> <modifier pos:start="1158:34" pos:end="1158:34">*</modifier></type><name pos:start="1158:35" pos:end="1158:36">ri</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1159:5" pos:end="1159:32"><decl pos:start="1159:5" pos:end="1159:17"><type pos:start="1159:5" pos:end="1159:8"><name pos:start="1159:5" pos:end="1159:8">char</name></type> <name pos:start="1159:10" pos:end="1159:17"><name pos:start="1159:10" pos:end="1159:13">date</name><index pos:start="1159:14" pos:end="1159:17">[<expr pos:start="1159:15" pos:end="1159:16"><literal type="number" pos:start="1159:15" pos:end="1159:16">64</literal></expr>]</index></name></decl>, <decl pos:start="1159:20" pos:end="1159:31"><type ref="prev" pos:start="1159:5" pos:end="1159:8"/><name pos:start="1159:20" pos:end="1159:31"><name pos:start="1159:20" pos:end="1159:27">src_addr</name><index pos:start="1159:28" pos:end="1159:31">[<expr pos:start="1159:29" pos:end="1159:30"><literal type="number" pos:start="1159:29" pos:end="1159:30">20</literal></expr>]</index></name></decl>;</decl_stmt>


    <expr_stmt pos:start="1162:5" pos:end="1163:43"><expr pos:start="1162:5" pos:end="1163:42"><call pos:start="1162:5" pos:end="1163:42"><name pos:start="1162:5" pos:end="1162:12">strftime</name><argument_list pos:start="1162:13" pos:end="1163:42">(<argument pos:start="1162:14" pos:end="1162:17"><expr pos:start="1162:14" pos:end="1162:17"><name pos:start="1162:14" pos:end="1162:17">date</name></expr></argument>, <argument pos:start="1162:20" pos:end="1162:31"><expr pos:start="1162:20" pos:end="1162:31"><sizeof pos:start="1162:20" pos:end="1162:31">sizeof<argument_list pos:start="1162:26" pos:end="1162:31">(<argument pos:start="1162:27" pos:end="1162:30"><expr pos:start="1162:27" pos:end="1162:30"><name pos:start="1162:27" pos:end="1162:30">date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1162:34" pos:end="1162:55"><expr pos:start="1162:34" pos:end="1162:55"><literal type="string" pos:start="1162:34" pos:end="1162:55">"%d/%b/%Y:%H:%M:%S %z"</literal></expr></argument>,
             <argument pos:start="1163:14" pos:end="1163:41"><expr pos:start="1163:14" pos:end="1163:41"><call pos:start="1163:14" pos:end="1163:41"><name pos:start="1163:14" pos:end="1163:22">localtime</name><argument_list pos:start="1163:23" pos:end="1163:41">(<argument pos:start="1163:24" pos:end="1163:40"><expr pos:start="1163:24" pos:end="1163:40"><operator pos:start="1163:24" pos:end="1163:24">&amp;</operator><name pos:start="1163:25" pos:end="1163:40"><name pos:start="1163:25" pos:end="1163:28">conn</name><operator pos:start="1163:29" pos:end="1163:30">-&gt;</operator><name pos:start="1163:31" pos:end="1163:40">birth_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1165:5" pos:end="1165:29"><expr pos:start="1165:5" pos:end="1165:28"><name pos:start="1165:5" pos:end="1165:6">ri</name> <operator pos:start="1165:8" pos:end="1165:8">=</operator> <operator pos:start="1165:10" pos:end="1165:10">&amp;</operator><name pos:start="1165:11" pos:end="1165:28"><name pos:start="1165:11" pos:end="1165:14">conn</name><operator pos:start="1165:15" pos:end="1165:16">-&gt;</operator><name pos:start="1165:17" pos:end="1165:28">request_info</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="1167:5" pos:end="1167:70"><expr pos:start="1167:5" pos:end="1167:69"><call pos:start="1167:5" pos:end="1167:69"><name pos:start="1167:5" pos:end="1167:22">sockaddr_to_string</name><argument_list pos:start="1167:23" pos:end="1167:69">(<argument pos:start="1167:24" pos:end="1167:31"><expr pos:start="1167:24" pos:end="1167:31"><name pos:start="1167:24" pos:end="1167:31">src_addr</name></expr></argument>, <argument pos:start="1167:34" pos:end="1167:49"><expr pos:start="1167:34" pos:end="1167:49"><sizeof pos:start="1167:34" pos:end="1167:49">sizeof<argument_list pos:start="1167:40" pos:end="1167:49">(<argument pos:start="1167:41" pos:end="1167:48"><expr pos:start="1167:41" pos:end="1167:48"><name pos:start="1167:41" pos:end="1167:48">src_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1167:52" pos:end="1167:68"><expr pos:start="1167:52" pos:end="1167:68"><operator pos:start="1167:52" pos:end="1167:52">&amp;</operator><name pos:start="1167:53" pos:end="1167:68"><name pos:start="1167:53" pos:end="1167:56">conn</name><operator pos:start="1167:57" pos:end="1167:58">-&gt;</operator><name pos:start="1167:59" pos:end="1167:64">client</name><operator pos:start="1167:65" pos:end="1167:65">.</operator><name pos:start="1167:66" pos:end="1167:68">rsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1168:5" pos:end="1172:58"><expr pos:start="1168:5" pos:end="1172:57"><call pos:start="1168:5" pos:end="1172:57"><name pos:start="1168:5" pos:end="1168:16">EST_LOG_INFO</name><argument_list pos:start="1168:17" pos:end="1172:57">(<argument pos:start="1168:18" pos:end="1168:59"><expr pos:start="1168:18" pos:end="1168:59"><literal type="string" pos:start="1168:18" pos:end="1168:49">"%s [%s] \"%s %s HTTP/%s\" %d %"</literal> <name pos:start="1168:51" pos:end="1168:59">INT64_FMT</name></expr></argument>,
                 <argument pos:start="1169:18" pos:end="1169:25"><expr pos:start="1169:18" pos:end="1169:25"><name pos:start="1169:18" pos:end="1169:25">src_addr</name></expr></argument>, <argument pos:start="1169:28" pos:end="1169:31"><expr pos:start="1169:28" pos:end="1169:31"><name pos:start="1169:28" pos:end="1169:31">date</name></expr></argument>,
                 <argument pos:start="1170:18" pos:end="1170:62"><expr pos:start="1170:18" pos:end="1170:62"><ternary pos:start="1170:18" pos:end="1170:62"><condition pos:start="1170:18" pos:end="1170:37"><expr pos:start="1170:18" pos:end="1170:35"><name pos:start="1170:18" pos:end="1170:35"><name pos:start="1170:18" pos:end="1170:19">ri</name><operator pos:start="1170:20" pos:end="1170:21">-&gt;</operator><name pos:start="1170:22" pos:end="1170:35">request_method</name></name></expr> ?</condition><then pos:start="1170:39" pos:end="1170:56"> <expr pos:start="1170:39" pos:end="1170:56"><name pos:start="1170:39" pos:end="1170:56"><name pos:start="1170:39" pos:end="1170:40">ri</name><operator pos:start="1170:41" pos:end="1170:42">-&gt;</operator><name pos:start="1170:43" pos:end="1170:56">request_method</name></name></expr> </then><else pos:start="1170:58" pos:end="1170:62">: <expr pos:start="1170:60" pos:end="1170:62"><literal type="string" pos:start="1170:60" pos:end="1170:62">"-"</literal></expr></else></ternary></expr></argument>,
                 <argument pos:start="1171:18" pos:end="1171:40"><expr pos:start="1171:18" pos:end="1171:40"><ternary pos:start="1171:18" pos:end="1171:40"><condition pos:start="1171:18" pos:end="1171:26"><expr pos:start="1171:18" pos:end="1171:24"><name pos:start="1171:18" pos:end="1171:24"><name pos:start="1171:18" pos:end="1171:19">ri</name><operator pos:start="1171:20" pos:end="1171:21">-&gt;</operator><name pos:start="1171:22" pos:end="1171:24">uri</name></name></expr> ?</condition><then pos:start="1171:28" pos:end="1171:34"> <expr pos:start="1171:28" pos:end="1171:34"><name pos:start="1171:28" pos:end="1171:34"><name pos:start="1171:28" pos:end="1171:29">ri</name><operator pos:start="1171:30" pos:end="1171:31">-&gt;</operator><name pos:start="1171:32" pos:end="1171:34">uri</name></name></expr> </then><else pos:start="1171:36" pos:end="1171:40">: <expr pos:start="1171:38" pos:end="1171:40"><literal type="string" pos:start="1171:38" pos:end="1171:40">"-"</literal></expr></else></ternary></expr></argument>, <argument pos:start="1171:43" pos:end="1171:58"><expr pos:start="1171:43" pos:end="1171:58"><name pos:start="1171:43" pos:end="1171:58"><name pos:start="1171:43" pos:end="1171:44">ri</name><operator pos:start="1171:45" pos:end="1171:46">-&gt;</operator><name pos:start="1171:47" pos:end="1171:58">http_version</name></name></expr></argument>,
                 <argument pos:start="1172:18" pos:end="1172:34"><expr pos:start="1172:18" pos:end="1172:34"><name pos:start="1172:18" pos:end="1172:34"><name pos:start="1172:18" pos:end="1172:21">conn</name><operator pos:start="1172:22" pos:end="1172:23">-&gt;</operator><name pos:start="1172:24" pos:end="1172:34">status_code</name></name></expr></argument>, <argument pos:start="1172:37" pos:end="1172:56"><expr pos:start="1172:37" pos:end="1172:56"><name pos:start="1172:37" pos:end="1172:56"><name pos:start="1172:37" pos:end="1172:40">conn</name><operator pos:start="1172:41" pos:end="1172:42">-&gt;</operator><name pos:start="1172:43" pos:end="1172:56">num_bytes_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1173:5" pos:end="1173:32"><expr pos:start="1173:5" pos:end="1173:31"><call pos:start="1173:5" pos:end="1173:31"><name pos:start="1173:5" pos:end="1173:14">log_header</name><argument_list pos:start="1173:15" pos:end="1173:31">(<argument pos:start="1173:16" pos:end="1173:19"><expr pos:start="1173:16" pos:end="1173:19"><name pos:start="1173:16" pos:end="1173:19">conn</name></expr></argument>, <argument pos:start="1173:22" pos:end="1173:30"><expr pos:start="1173:22" pos:end="1173:30"><literal type="string" pos:start="1173:22" pos:end="1173:30">"Referer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1174:5" pos:end="1174:35"><expr pos:start="1174:5" pos:end="1174:34"><call pos:start="1174:5" pos:end="1174:34"><name pos:start="1174:5" pos:end="1174:14">log_header</name><argument_list pos:start="1174:15" pos:end="1174:34">(<argument pos:start="1174:16" pos:end="1174:19"><expr pos:start="1174:16" pos:end="1174:19"><name pos:start="1174:16" pos:end="1174:19">conn</name></expr></argument>, <argument pos:start="1174:22" pos:end="1174:33"><expr pos:start="1174:22" pos:end="1174:33"><literal type="string" pos:start="1174:22" pos:end="1174:33">"User-Agent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="1176:1" pos:end="1176:31">// Return OpenSSL error message</comment>
<function pos:start="1177:1" pos:end="1183:1"><type pos:start="1177:1" pos:end="1177:19"><specifier pos:start="1177:1" pos:end="1177:6">static</specifier> <specifier pos:start="1177:8" pos:end="1177:12">const</specifier> <name pos:start="1177:14" pos:end="1177:17">char</name> <modifier pos:start="1177:19" pos:end="1177:19">*</modifier></type><name pos:start="1177:20" pos:end="1177:28">ssl_error</name> <parameter_list pos:start="1177:30" pos:end="1177:35">(<parameter pos:start="1177:31" pos:end="1177:34"><decl pos:start="1177:31" pos:end="1177:34"><type pos:start="1177:31" pos:end="1177:34"><name pos:start="1177:31" pos:end="1177:34">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="1178:1" pos:end="1183:1">{<block_content pos:start="1179:5" pos:end="1182:55">
    <decl_stmt pos:start="1179:5" pos:end="1179:22"><decl pos:start="1179:5" pos:end="1179:21"><type pos:start="1179:5" pos:end="1179:17"><name pos:start="1179:5" pos:end="1179:12">unsigned</name> <name pos:start="1179:14" pos:end="1179:17">long</name></type> <name pos:start="1179:19" pos:end="1179:21">err</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1181:5" pos:end="1181:26"><expr pos:start="1181:5" pos:end="1181:25"><name pos:start="1181:5" pos:end="1181:7">err</name> <operator pos:start="1181:9" pos:end="1181:9">=</operator> <call pos:start="1181:11" pos:end="1181:25"><name pos:start="1181:11" pos:end="1181:23">ERR_get_error</name><argument_list pos:start="1181:24" pos:end="1181:25">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1182:5" pos:end="1182:55">return <expr pos:start="1182:12" pos:end="1182:54"><ternary pos:start="1182:12" pos:end="1182:54"><condition pos:start="1182:12" pos:end="1182:21"><expr pos:start="1182:12" pos:end="1182:19"><name pos:start="1182:12" pos:end="1182:14">err</name> <operator pos:start="1182:16" pos:end="1182:17">==</operator> <literal type="number" pos:start="1182:19" pos:end="1182:19">0</literal></expr> ?</condition><then pos:start="1182:23" pos:end="1182:24"> <expr pos:start="1182:23" pos:end="1182:24"><literal type="string" pos:start="1182:23" pos:end="1182:24">""</literal></expr> </then><else pos:start="1182:26" pos:end="1182:54">: <expr pos:start="1182:28" pos:end="1182:54"><call pos:start="1182:28" pos:end="1182:54"><name pos:start="1182:28" pos:end="1182:43">ERR_error_string</name><argument_list pos:start="1182:44" pos:end="1182:54">(<argument pos:start="1182:45" pos:end="1182:47"><expr pos:start="1182:45" pos:end="1182:47"><name pos:start="1182:45" pos:end="1182:47">err</name></expr></argument>, <argument pos:start="1182:50" pos:end="1182:53"><expr pos:start="1182:50" pos:end="1182:53"><name pos:start="1182:50" pos:end="1182:53">NULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="1184:1" pos:end="1184:61">// Dynamically load SSL library. Set up ctx-&gt;ssl_ctx pointer.</comment>
<function pos:start="1185:1" pos:end="1338:1"><type pos:start="1185:1" pos:end="1185:10"><specifier pos:start="1185:1" pos:end="1185:6">static</specifier> <name pos:start="1185:8" pos:end="1185:10">int</name></type> <name pos:start="1185:12" pos:end="1185:25">set_ssl_option</name> <parameter_list pos:start="1185:27" pos:end="1185:50">(<parameter pos:start="1185:28" pos:end="1185:49"><decl pos:start="1185:28" pos:end="1185:49"><type pos:start="1185:28" pos:end="1185:49"><name pos:start="1185:28" pos:end="1185:44"><name pos:start="1185:28" pos:end="1185:33">struct</name> <name pos:start="1185:35" pos:end="1185:44">mg_context</name></name> <modifier pos:start="1185:46" pos:end="1185:46">*</modifier></type><name pos:start="1185:47" pos:end="1185:49">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1186:1" pos:end="1338:1">{<block_content pos:start="1187:5" pos:end="1337:13">
    <decl_stmt pos:start="1187:5" pos:end="1187:31"><decl pos:start="1187:5" pos:end="1187:30"><type pos:start="1187:5" pos:end="1187:26"><name pos:start="1187:5" pos:end="1187:24"><name pos:start="1187:5" pos:end="1187:10">struct</name> <name pos:start="1187:12" pos:end="1187:24">mg_connection</name></name> <modifier pos:start="1187:26" pos:end="1187:26">*</modifier></type><name pos:start="1187:27" pos:end="1187:30">conn</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1188:5" pos:end="1188:18"><decl pos:start="1188:5" pos:end="1188:17"><type pos:start="1188:5" pos:end="1188:13"><name pos:start="1188:5" pos:end="1188:11">EST_CTX</name> <modifier pos:start="1188:13" pos:end="1188:13">*</modifier></type><name pos:start="1188:14" pos:end="1188:17">ectx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1189:5" pos:end="1189:21"><decl pos:start="1189:5" pos:end="1189:20"><type pos:start="1189:5" pos:end="1189:13"><name pos:start="1189:5" pos:end="1189:11">SSL_CTX</name> <modifier pos:start="1189:13" pos:end="1189:13">*</modifier></type><name pos:start="1189:14" pos:end="1189:20">ssl_ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1190:5" pos:end="1190:24"><decl pos:start="1190:5" pos:end="1190:23"><type pos:start="1190:5" pos:end="1190:12"><name pos:start="1190:5" pos:end="1190:10">EC_KEY</name> <modifier pos:start="1190:12" pos:end="1190:12">*</modifier></type><name pos:start="1190:13" pos:end="1190:16">ecdh</name> <init pos:start="1190:18" pos:end="1190:23">= <expr pos:start="1190:20" pos:end="1190:23"><name pos:start="1190:20" pos:end="1190:23">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1191:5" pos:end="1191:34"><decl pos:start="1191:5" pos:end="1191:33"><type pos:start="1191:5" pos:end="1191:23"><name pos:start="1191:5" pos:end="1191:21">X509_VERIFY_PARAM</name> <modifier pos:start="1191:23" pos:end="1191:23">*</modifier></type><name pos:start="1191:24" pos:end="1191:26">vpm</name> <init pos:start="1191:28" pos:end="1191:33">= <expr pos:start="1191:30" pos:end="1191:33"><name pos:start="1191:30" pos:end="1191:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1192:5" pos:end="1192:25"><decl pos:start="1192:5" pos:end="1192:24"><type pos:start="1192:5" pos:end="1192:8"><name pos:start="1192:5" pos:end="1192:8">char</name></type> <name pos:start="1192:10" pos:end="1192:16"><name pos:start="1192:10" pos:end="1192:12">sic</name><index pos:start="1192:13" pos:end="1192:16">[<expr pos:start="1192:14" pos:end="1192:15"><literal type="number" pos:start="1192:14" pos:end="1192:15">12</literal></expr>]</index></name> <init pos:start="1192:18" pos:end="1192:24">= <expr pos:start="1192:20" pos:end="1192:24"><literal type="string" pos:start="1192:20" pos:end="1192:24">"EST"</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1194:5" pos:end="1197:5"><if pos:start="1194:5" pos:end="1197:5">if <condition pos:start="1194:8" pos:end="1194:64">(<expr pos:start="1194:9" pos:end="1194:63"><operator pos:start="1194:9" pos:end="1194:9">(</operator><name pos:start="1194:10" pos:end="1194:16">ssl_ctx</name> <operator pos:start="1194:18" pos:end="1194:18">=</operator> <call pos:start="1194:20" pos:end="1194:54"><name pos:start="1194:20" pos:end="1194:30">SSL_CTX_new</name><argument_list pos:start="1194:31" pos:end="1194:54">(<argument pos:start="1194:32" pos:end="1194:53"><expr pos:start="1194:32" pos:end="1194:53"><call pos:start="1194:32" pos:end="1194:53"><name pos:start="1194:32" pos:end="1194:51">SSLv23_server_method</name><argument_list pos:start="1194:52" pos:end="1194:53">()</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="1194:55" pos:end="1194:55">)</operator> <operator pos:start="1194:57" pos:end="1194:58">==</operator> <name pos:start="1194:60" pos:end="1194:63">NULL</name></expr>)</condition> <block pos:start="1194:66" pos:end="1197:5">{<block_content pos:start="1195:9" pos:end="1196:17">
        <expr_stmt pos:start="1195:9" pos:end="1195:68"><expr pos:start="1195:9" pos:end="1195:67"><call pos:start="1195:9" pos:end="1195:67"><name pos:start="1195:9" pos:end="1195:11">cry</name><argument_list pos:start="1195:12" pos:end="1195:67">(<argument pos:start="1195:13" pos:end="1195:19"><expr pos:start="1195:13" pos:end="1195:19"><call pos:start="1195:13" pos:end="1195:19"><name pos:start="1195:13" pos:end="1195:14">fc</name><argument_list pos:start="1195:15" pos:end="1195:19">(<argument pos:start="1195:16" pos:end="1195:18"><expr pos:start="1195:16" pos:end="1195:18"><name pos:start="1195:16" pos:end="1195:18">ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1195:22" pos:end="1195:53"><expr pos:start="1195:22" pos:end="1195:53"><literal type="string" pos:start="1195:22" pos:end="1195:53">"SSL_CTX_new (server) error: %s"</literal></expr></argument>, <argument pos:start="1195:56" pos:end="1195:66"><expr pos:start="1195:56" pos:end="1195:66"><call pos:start="1195:56" pos:end="1195:66"><name pos:start="1195:56" pos:end="1195:64">ssl_error</name><argument_list pos:start="1195:65" pos:end="1195:66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1196:9" pos:end="1196:17">return <expr pos:start="1196:16" pos:end="1196:16"><literal type="number" pos:start="1196:16" pos:end="1196:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1198:5" pos:end="1198:27"><expr pos:start="1198:5" pos:end="1198:26"><name pos:start="1198:5" pos:end="1198:16"><name pos:start="1198:5" pos:end="1198:7">ctx</name><operator pos:start="1198:8" pos:end="1198:9">-&gt;</operator><name pos:start="1198:10" pos:end="1198:16">ssl_ctx</name></name> <operator pos:start="1198:18" pos:end="1198:18">=</operator> <name pos:start="1198:20" pos:end="1198:26">ssl_ctx</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1199:5" pos:end="1199:24"><expr pos:start="1199:5" pos:end="1199:23"><name pos:start="1199:5" pos:end="1199:8">ectx</name> <operator pos:start="1199:10" pos:end="1199:10">=</operator> <name pos:start="1199:12" pos:end="1199:23"><name pos:start="1199:12" pos:end="1199:14">ctx</name><operator pos:start="1199:15" pos:end="1199:16">-&gt;</operator><name pos:start="1199:17" pos:end="1199:23">est_ctx</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="1201:5" pos:end="1201:19"><expr pos:start="1201:5" pos:end="1201:18"><name pos:start="1201:5" pos:end="1201:8">conn</name> <operator pos:start="1201:10" pos:end="1201:10">=</operator> <call pos:start="1201:12" pos:end="1201:18"><name pos:start="1201:12" pos:end="1201:13">fc</name><argument_list pos:start="1201:14" pos:end="1201:18">(<argument pos:start="1201:15" pos:end="1201:17"><expr pos:start="1201:15" pos:end="1201:17"><name pos:start="1201:15" pos:end="1201:17">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1202:5" pos:end="1202:46"><expr pos:start="1202:5" pos:end="1202:45"><name pos:start="1202:5" pos:end="1202:30"><name pos:start="1202:5" pos:end="1202:8">conn</name><operator pos:start="1202:9" pos:end="1202:10">-&gt;</operator><name pos:start="1202:11" pos:end="1202:22">request_info</name><operator pos:start="1202:23" pos:end="1202:23">.</operator><name pos:start="1202:24" pos:end="1202:30">ev_data</name></name> <operator pos:start="1202:32" pos:end="1202:32">=</operator> <name pos:start="1202:34" pos:end="1202:45"><name pos:start="1202:34" pos:end="1202:36">ctx</name><operator pos:start="1202:37" pos:end="1202:38">-&gt;</operator><name pos:start="1202:39" pos:end="1202:45">ssl_ctx</name></name></expr>;</expr_stmt>


    <expr_stmt pos:start="1205:5" pos:end="1205:55"><expr pos:start="1205:5" pos:end="1205:54"><call pos:start="1205:5" pos:end="1205:54"><name pos:start="1205:5" pos:end="1205:22">SSL_CTX_set_verify</name><argument_list pos:start="1205:23" pos:end="1205:54">(<argument pos:start="1205:24" pos:end="1205:30"><expr pos:start="1205:24" pos:end="1205:30"><name pos:start="1205:24" pos:end="1205:30">ssl_ctx</name></expr></argument>, <argument pos:start="1205:33" pos:end="1205:47"><expr pos:start="1205:33" pos:end="1205:47"><name pos:start="1205:33" pos:end="1205:47">SSL_VERIFY_PEER</name></expr></argument>, <argument pos:start="1205:50" pos:end="1205:53"><expr pos:start="1205:50" pos:end="1205:53"><name pos:start="1205:50" pos:end="1205:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1207:5" pos:end="1211:7">/*
     * Set the Session ID context to enable OpenSSL session
     * reuse, which improves performance.  We set the ID to
     * ESTxxxxxxxx, where the x values are random numbers
     */</comment>
    <if_stmt pos:start="1212:5" pos:end="1214:5"><if pos:start="1212:5" pos:end="1214:5">if <condition pos:start="1212:8" pos:end="1212:48">(<expr pos:start="1212:9" pos:end="1212:47"><operator pos:start="1212:9" pos:end="1212:9">!</operator><call pos:start="1212:10" pos:end="1212:47"><name pos:start="1212:10" pos:end="1212:19">RAND_bytes</name><argument_list pos:start="1212:20" pos:end="1212:47">(<argument pos:start="1212:21" pos:end="1212:43"><expr pos:start="1212:21" pos:end="1212:43"><operator pos:start="1212:21" pos:end="1212:21">(</operator><name pos:start="1212:22" pos:end="1212:29">unsigned</name> <name pos:start="1212:31" pos:end="1212:34">char</name><operator pos:start="1212:35" pos:end="1212:35">*</operator><operator pos:start="1212:36" pos:end="1212:36">)</operator><operator pos:start="1212:37" pos:end="1212:37">&amp;</operator><name pos:start="1212:38" pos:end="1212:43"><name pos:start="1212:38" pos:end="1212:40">sic</name><index pos:start="1212:41" pos:end="1212:43">[<expr pos:start="1212:42" pos:end="1212:42"><literal type="number" pos:start="1212:42" pos:end="1212:42">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="1212:46" pos:end="1212:46"><expr pos:start="1212:46" pos:end="1212:46"><literal type="number" pos:start="1212:46" pos:end="1212:46">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1212:50" pos:end="1214:5">{<block_content pos:start="1213:9" pos:end="1213:71">
	<expr_stmt pos:start="1213:9" pos:end="1213:71"><expr pos:start="1213:9" pos:end="1213:70"><call pos:start="1213:9" pos:end="1213:70"><name pos:start="1213:9" pos:end="1213:20">EST_LOG_WARN</name><argument_list pos:start="1213:21" pos:end="1213:70">(<argument pos:start="1213:22" pos:end="1213:56"><expr pos:start="1213:22" pos:end="1213:56"><literal type="string" pos:start="1213:22" pos:end="1213:56">"RNG failure while setting SIC: %s"</literal></expr></argument>, <argument pos:start="1213:59" pos:end="1213:69"><expr pos:start="1213:59" pos:end="1213:69"><call pos:start="1213:59" pos:end="1213:69"><name pos:start="1213:59" pos:end="1213:67">ssl_error</name><argument_list pos:start="1213:68" pos:end="1213:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1215:5" pos:end="1215:61"><expr pos:start="1215:5" pos:end="1215:60"><call pos:start="1215:5" pos:end="1215:60"><name pos:start="1215:5" pos:end="1215:34">SSL_CTX_set_session_id_context</name><argument_list pos:start="1215:35" pos:end="1215:60">(<argument pos:start="1215:36" pos:end="1215:42"><expr pos:start="1215:36" pos:end="1215:42"><name pos:start="1215:36" pos:end="1215:42">ssl_ctx</name></expr></argument>, <argument pos:start="1215:45" pos:end="1215:55"><expr pos:start="1215:45" pos:end="1215:55"><operator pos:start="1215:45" pos:end="1215:45">(</operator><name pos:start="1215:46" pos:end="1215:49">void</name><operator pos:start="1215:50" pos:end="1215:50">*</operator><operator pos:start="1215:51" pos:end="1215:51">)</operator><operator pos:start="1215:52" pos:end="1215:52">&amp;</operator><name pos:start="1215:53" pos:end="1215:55">sic</name></expr></argument>, <argument pos:start="1215:58" pos:end="1215:59"><expr pos:start="1215:58" pos:end="1215:59"><literal type="number" pos:start="1215:58" pos:end="1215:59">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="1217:5" pos:end="1217:64">// load in the CA cert(s) used to verify client certificates</comment>
    <expr_stmt pos:start="1218:5" pos:end="1218:63"><expr pos:start="1218:5" pos:end="1218:62"><call pos:start="1218:5" pos:end="1218:62"><name pos:start="1218:5" pos:end="1218:26">SSL_CTX_set_cert_store</name><argument_list pos:start="1218:27" pos:end="1218:62">(<argument pos:start="1218:28" pos:end="1218:34"><expr pos:start="1218:28" pos:end="1218:34"><name pos:start="1218:28" pos:end="1218:34">ssl_ctx</name></expr></argument>, <argument pos:start="1218:37" pos:end="1218:61"><expr pos:start="1218:37" pos:end="1218:61"><name pos:start="1218:37" pos:end="1218:61"><name pos:start="1218:37" pos:end="1218:40">ectx</name><operator pos:start="1218:41" pos:end="1218:42">-&gt;</operator><name pos:start="1218:43" pos:end="1218:61">trusted_certs_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="1219:5" pos:end="1219:58">//The ssl code will free this store from ssl_ctx later</comment>
    <expr_stmt pos:start="1220:5" pos:end="1220:37"><expr pos:start="1220:5" pos:end="1220:36"><name pos:start="1220:5" pos:end="1220:29"><name pos:start="1220:5" pos:end="1220:8">ectx</name><operator pos:start="1220:9" pos:end="1220:10">-&gt;</operator><name pos:start="1220:11" pos:end="1220:29">trusted_certs_store</name></name> <operator pos:start="1220:31" pos:end="1220:31">=</operator> <name pos:start="1220:33" pos:end="1220:36">NULL</name></expr>;</expr_stmt>  

    <comment type="block" pos:start="1222:5" pos:end="1234:7">/*
     * Note that we disable TLS tickets, which is another
     * way to reuse TLS sessions to avoid all the key exchange
     * overhead of the TLS handshake.  We've enabled session
     * reuse above.  But session reuse will not 
     * work when ticket support is enabled on the server.
     * We may want to look into enabling tickets
     * in the future, but for now the session reuse
     * above gives us a performance boost.
     *
     * The other options set here are to improve forward
     * secrecty and comply with the EST draft.
     */</comment>

    <expr_stmt pos:start="1236:5" pos:end="1240:42"><expr pos:start="1236:5" pos:end="1240:41"><call pos:start="1236:5" pos:end="1240:41"><name pos:start="1236:5" pos:end="1236:23">SSL_CTX_set_options</name><argument_list pos:start="1236:24" pos:end="1240:41">(<argument pos:start="1236:25" pos:end="1236:31"><expr pos:start="1236:25" pos:end="1236:31"><name pos:start="1236:25" pos:end="1236:31">ssl_ctx</name></expr></argument>, <argument pos:start="1236:34" pos:end="1240:40"><expr pos:start="1236:34" pos:end="1240:40"><name pos:start="1236:34" pos:end="1236:48">SSL_OP_NO_SSLv2</name> <operator pos:start="1236:50" pos:end="1236:50">|</operator>
                        <name pos:start="1237:25" pos:end="1237:39">SSL_OP_NO_SSLv3</name> <operator pos:start="1237:41" pos:end="1237:41">|</operator>
                        <name pos:start="1238:25" pos:end="1238:39">SSL_OP_NO_TLSv1</name> <operator pos:start="1238:41" pos:end="1238:41">|</operator>
                        <name pos:start="1239:25" pos:end="1239:46">SSL_OP_SINGLE_ECDH_USE</name> <operator pos:start="1239:48" pos:end="1239:48">|</operator>
                        <name pos:start="1240:25" pos:end="1240:40">SSL_OP_NO_TICKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block" pos:start="1243:5" pos:end="1246:7">/* 
     * Set the ECDH single use parms.  Use the configured
     * curve, or use prime256v1 as the default.
     */</comment>
    <if_stmt pos:start="1247:5" pos:end="1255:5"><if pos:start="1247:5" pos:end="1251:5">if <condition pos:start="1247:8" pos:end="1247:24">(<expr pos:start="1247:9" pos:end="1247:23"><name pos:start="1247:9" pos:end="1247:23"><name pos:start="1247:9" pos:end="1247:12">ectx</name><operator pos:start="1247:13" pos:end="1247:14">-&gt;</operator><name pos:start="1247:15" pos:end="1247:23">ecdhe_nid</name></name></expr>)</condition> <block pos:start="1247:26" pos:end="1251:5">{<block_content pos:start="1249:9" pos:end="1250:80">
	<comment type="block" pos:start="1248:9" pos:end="1248:43">/* Setup the user selected curve */</comment>
	<expr_stmt pos:start="1249:9" pos:end="1249:57"><expr pos:start="1249:9" pos:end="1249:56"><name pos:start="1249:9" pos:end="1249:12">ecdh</name> <operator pos:start="1249:14" pos:end="1249:14">=</operator> <call pos:start="1249:16" pos:end="1249:56"><name pos:start="1249:16" pos:end="1249:39">EC_KEY_new_by_curve_name</name><argument_list pos:start="1249:40" pos:end="1249:56">(<argument pos:start="1249:41" pos:end="1249:55"><expr pos:start="1249:41" pos:end="1249:55"><name pos:start="1249:41" pos:end="1249:55"><name pos:start="1249:41" pos:end="1249:44">ectx</name><operator pos:start="1249:45" pos:end="1249:46">-&gt;</operator><name pos:start="1249:47" pos:end="1249:55">ecdhe_nid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1250:9" pos:end="1250:80"><expr pos:start="1250:9" pos:end="1250:79"><call pos:start="1250:9" pos:end="1250:79"><name pos:start="1250:9" pos:end="1250:20">EST_LOG_INFO</name><argument_list pos:start="1250:21" pos:end="1250:79">(<argument pos:start="1250:22" pos:end="1250:61"><expr pos:start="1250:22" pos:end="1250:61"><literal type="string" pos:start="1250:22" pos:end="1250:61">"Using non-default ECDHE curve (nid=%d)"</literal></expr></argument>, <argument pos:start="1250:64" pos:end="1250:78"><expr pos:start="1250:64" pos:end="1250:78"><name pos:start="1250:64" pos:end="1250:78"><name pos:start="1250:64" pos:end="1250:67">ectx</name><operator pos:start="1250:68" pos:end="1250:69">-&gt;</operator><name pos:start="1250:70" pos:end="1250:78">ecdhe_nid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1251:7" pos:end="1255:5">else <block pos:start="1251:12" pos:end="1255:5">{<block_content pos:start="1253:9" pos:end="1254:63">
	<comment type="block" pos:start="1252:9" pos:end="1252:39">/* Default to prime256 curve */</comment>
	<expr_stmt pos:start="1253:9" pos:end="1253:62"><expr pos:start="1253:9" pos:end="1253:61"><name pos:start="1253:9" pos:end="1253:12">ecdh</name> <operator pos:start="1253:14" pos:end="1253:14">=</operator> <call pos:start="1253:16" pos:end="1253:61"><name pos:start="1253:16" pos:end="1253:39">EC_KEY_new_by_curve_name</name><argument_list pos:start="1253:40" pos:end="1253:61">(<argument pos:start="1253:41" pos:end="1253:60"><expr pos:start="1253:41" pos:end="1253:60"><name pos:start="1253:41" pos:end="1253:60">NID_X9_62_prime256v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1254:9" pos:end="1254:63"><expr pos:start="1254:9" pos:end="1254:62"><call pos:start="1254:9" pos:end="1254:62"><name pos:start="1254:9" pos:end="1254:20">EST_LOG_INFO</name><argument_list pos:start="1254:21" pos:end="1254:62">(<argument pos:start="1254:22" pos:end="1254:61"><expr pos:start="1254:22" pos:end="1254:61"><literal type="string" pos:start="1254:22" pos:end="1254:61">"Using default ECDHE curve (prime256v1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="1256:5" pos:end="1259:5"><if pos:start="1256:5" pos:end="1259:5">if <condition pos:start="1256:8" pos:end="1256:21">(<expr pos:start="1256:9" pos:end="1256:20"><name pos:start="1256:9" pos:end="1256:12">ecdh</name> <operator pos:start="1256:14" pos:end="1256:15">==</operator> <name pos:start="1256:17" pos:end="1256:20">NULL</name></expr>)</condition> <block pos:start="1256:23" pos:end="1259:5">{<block_content pos:start="1257:9" pos:end="1258:17">
        <expr_stmt pos:start="1257:9" pos:end="1257:65"><expr pos:start="1257:9" pos:end="1257:64"><call pos:start="1257:9" pos:end="1257:64"><name pos:start="1257:9" pos:end="1257:19">EST_LOG_ERR</name><argument_list pos:start="1257:20" pos:end="1257:64">(<argument pos:start="1257:21" pos:end="1257:63"><expr pos:start="1257:21" pos:end="1257:63"><literal type="string" pos:start="1257:21" pos:end="1257:63">"Failed to generate temp ecdh parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1258:9" pos:end="1258:17">return <expr pos:start="1258:16" pos:end="1258:16"><literal type="number" pos:start="1258:16" pos:end="1258:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1260:5" pos:end="1260:40"><expr pos:start="1260:5" pos:end="1260:39"><call pos:start="1260:5" pos:end="1260:39"><name pos:start="1260:5" pos:end="1260:24">SSL_CTX_set_tmp_ecdh</name><argument_list pos:start="1260:25" pos:end="1260:39">(<argument pos:start="1260:26" pos:end="1260:32"><expr pos:start="1260:26" pos:end="1260:32"><name pos:start="1260:26" pos:end="1260:32">ssl_ctx</name></expr></argument>, <argument pos:start="1260:35" pos:end="1260:38"><expr pos:start="1260:35" pos:end="1260:38"><name pos:start="1260:35" pos:end="1260:38">ecdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1261:5" pos:end="1261:22"><expr pos:start="1261:5" pos:end="1261:21"><call pos:start="1261:5" pos:end="1261:21"><name pos:start="1261:5" pos:end="1261:15">EC_KEY_free</name><argument_list pos:start="1261:16" pos:end="1261:21">(<argument pos:start="1261:17" pos:end="1261:20"><expr pos:start="1261:17" pos:end="1261:20"><name pos:start="1261:17" pos:end="1261:20">ecdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1263:5" pos:end="1266:7">/*
     * Setup additional cert checks including CRL, depth
     * and purpose.
     */</comment>
    <expr_stmt pos:start="1267:5" pos:end="1267:34"><expr pos:start="1267:5" pos:end="1267:33"><name pos:start="1267:5" pos:end="1267:7">vpm</name> <operator pos:start="1267:9" pos:end="1267:9">=</operator> <call pos:start="1267:11" pos:end="1267:33"><name pos:start="1267:11" pos:end="1267:31">X509_VERIFY_PARAM_new</name><argument_list pos:start="1267:32" pos:end="1267:33">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1268:5" pos:end="1268:27">/* Enable CRL checks */</comment>
    <if_stmt pos:start="1269:5" pos:end="1272:5"><if pos:start="1269:5" pos:end="1272:5">if <condition pos:start="1269:8" pos:end="1269:25">(<expr pos:start="1269:9" pos:end="1269:24"><name pos:start="1269:9" pos:end="1269:24"><name pos:start="1269:9" pos:end="1269:12">ectx</name><operator pos:start="1269:13" pos:end="1269:14">-&gt;</operator><name pos:start="1269:15" pos:end="1269:24">enable_crl</name></name></expr>)</condition> <block pos:start="1269:27" pos:end="1272:5">{<block_content pos:start="1270:9" pos:end="1271:63">
	<expr_stmt pos:start="1270:9" pos:end="1271:63"><expr pos:start="1270:9" pos:end="1271:62"><call pos:start="1270:9" pos:end="1271:62"><name pos:start="1270:9" pos:end="1270:35">X509_VERIFY_PARAM_set_flags</name><argument_list pos:start="1270:36" pos:end="1271:62">(<argument pos:start="1270:37" pos:end="1270:39"><expr pos:start="1270:37" pos:end="1270:39"><name pos:start="1270:37" pos:end="1270:39">vpm</name></expr></argument>, <argument pos:start="1270:42" pos:end="1271:61"><expr pos:start="1270:42" pos:end="1271:61"><name pos:start="1270:42" pos:end="1270:62">X509_V_FLAG_CRL_CHECK</name> <operator pos:start="1270:64" pos:end="1270:64">|</operator>
                                    <name pos:start="1271:37" pos:end="1271:61">X509_V_FLAG_CRL_CHECK_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1273:5" pos:end="1273:59"><expr pos:start="1273:5" pos:end="1273:58"><call pos:start="1273:5" pos:end="1273:58"><name pos:start="1273:5" pos:end="1273:31">X509_VERIFY_PARAM_set_depth</name><argument_list pos:start="1273:32" pos:end="1273:58">(<argument pos:start="1273:33" pos:end="1273:35"><expr pos:start="1273:33" pos:end="1273:35"><name pos:start="1273:33" pos:end="1273:35">vpm</name></expr></argument>, <argument pos:start="1273:38" pos:end="1273:57"><expr pos:start="1273:38" pos:end="1273:57"><name pos:start="1273:38" pos:end="1273:57">EST_TLS_VERIFY_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1274:5" pos:end="1275:47">/* Note: the purpose is only checked when the keyusage
     * value is present in the client's cert */</comment>
    <expr_stmt pos:start="1276:5" pos:end="1276:64"><expr pos:start="1276:5" pos:end="1276:63"><call pos:start="1276:5" pos:end="1276:63"><name pos:start="1276:5" pos:end="1276:33">X509_VERIFY_PARAM_set_purpose</name><argument_list pos:start="1276:34" pos:end="1276:63">(<argument pos:start="1276:35" pos:end="1276:37"><expr pos:start="1276:35" pos:end="1276:37"><name pos:start="1276:35" pos:end="1276:37">vpm</name></expr></argument>, <argument pos:start="1276:40" pos:end="1276:62"><expr pos:start="1276:40" pos:end="1276:62"><name pos:start="1276:40" pos:end="1276:62">X509_PURPOSE_SSL_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1277:5" pos:end="1277:37"><expr pos:start="1277:5" pos:end="1277:36"><call pos:start="1277:5" pos:end="1277:36"><name pos:start="1277:5" pos:end="1277:22">SSL_CTX_set1_param</name><argument_list pos:start="1277:23" pos:end="1277:36">(<argument pos:start="1277:24" pos:end="1277:30"><expr pos:start="1277:24" pos:end="1277:30"><name pos:start="1277:24" pos:end="1277:30">ssl_ctx</name></expr></argument>, <argument pos:start="1277:33" pos:end="1277:35"><expr pos:start="1277:33" pos:end="1277:35"><name pos:start="1277:33" pos:end="1277:35">vpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1278:5" pos:end="1278:32"><expr pos:start="1278:5" pos:end="1278:31"><call pos:start="1278:5" pos:end="1278:31"><name pos:start="1278:5" pos:end="1278:26">X509_VERIFY_PARAM_free</name><argument_list pos:start="1278:27" pos:end="1278:31">(<argument pos:start="1278:28" pos:end="1278:30"><expr pos:start="1278:28" pos:end="1278:30"><name pos:start="1278:28" pos:end="1278:30">vpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1280:5" pos:end="1283:7">/*
     * Set the single-use DH parameters if the application
     * has requested this capability.
     */</comment>
    <if_stmt pos:start="1284:5" pos:end="1289:5"><if pos:start="1284:5" pos:end="1289:5">if <condition pos:start="1284:8" pos:end="1284:21">(<expr pos:start="1284:9" pos:end="1284:20"><name pos:start="1284:9" pos:end="1284:20"><name pos:start="1284:9" pos:end="1284:12">ectx</name><operator pos:start="1284:13" pos:end="1284:14">-&gt;</operator><name pos:start="1284:15" pos:end="1284:20">dh_tmp</name></name></expr>)</condition> <block pos:start="1284:23" pos:end="1289:5">{<block_content pos:start="1285:9" pos:end="1288:28">
	<expr_stmt pos:start="1285:9" pos:end="1285:59"><expr pos:start="1285:9" pos:end="1285:58"><call pos:start="1285:9" pos:end="1285:58"><name pos:start="1285:9" pos:end="1285:27">SSL_CTX_set_options</name><argument_list pos:start="1285:28" pos:end="1285:58">(<argument pos:start="1285:29" pos:end="1285:35"><expr pos:start="1285:29" pos:end="1285:35"><name pos:start="1285:29" pos:end="1285:35">ssl_ctx</name></expr></argument>, <argument pos:start="1285:38" pos:end="1285:57"><expr pos:start="1285:38" pos:end="1285:57"><name pos:start="1285:38" pos:end="1285:57">SSL_OP_SINGLE_DH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1286:9" pos:end="1286:50"><expr pos:start="1286:9" pos:end="1286:49"><call pos:start="1286:9" pos:end="1286:49"><name pos:start="1286:9" pos:end="1286:26">SSL_CTX_set_tmp_dh</name><argument_list pos:start="1286:27" pos:end="1286:49">(<argument pos:start="1286:28" pos:end="1286:34"><expr pos:start="1286:28" pos:end="1286:34"><name pos:start="1286:28" pos:end="1286:34">ssl_ctx</name></expr></argument>, <argument pos:start="1286:37" pos:end="1286:48"><expr pos:start="1286:37" pos:end="1286:48"><name pos:start="1286:37" pos:end="1286:48"><name pos:start="1286:37" pos:end="1286:40">ectx</name><operator pos:start="1286:41" pos:end="1286:42">-&gt;</operator><name pos:start="1286:43" pos:end="1286:48">dh_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1287:9" pos:end="1287:30"><expr pos:start="1287:9" pos:end="1287:29"><call pos:start="1287:9" pos:end="1287:29"><name pos:start="1287:9" pos:end="1287:15">DH_free</name><argument_list pos:start="1287:16" pos:end="1287:29">(<argument pos:start="1287:17" pos:end="1287:28"><expr pos:start="1287:17" pos:end="1287:28"><name pos:start="1287:17" pos:end="1287:28"><name pos:start="1287:17" pos:end="1287:20">ectx</name><operator pos:start="1287:21" pos:end="1287:22">-&gt;</operator><name pos:start="1287:23" pos:end="1287:28">dh_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1288:9" pos:end="1288:28"><expr pos:start="1288:9" pos:end="1288:27"><name pos:start="1288:9" pos:end="1288:20"><name pos:start="1288:9" pos:end="1288:12">ectx</name><operator pos:start="1288:13" pos:end="1288:14">-&gt;</operator><name pos:start="1288:15" pos:end="1288:20">dh_tmp</name></name> <operator pos:start="1288:22" pos:end="1288:22">=</operator> <name pos:start="1288:24" pos:end="1288:27">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1291:5" pos:end="1313:5"><if pos:start="1291:5" pos:end="1303:5">if <condition pos:start="1291:8" pos:end="1291:25">(<expr pos:start="1291:9" pos:end="1291:24"><name pos:start="1291:9" pos:end="1291:24"><name pos:start="1291:9" pos:end="1291:12">ectx</name><operator pos:start="1291:13" pos:end="1291:14">-&gt;</operator><name pos:start="1291:15" pos:end="1291:24">enable_srp</name></name></expr>)</condition> <block pos:start="1291:27" pos:end="1303:5">{<block_content pos:start="1292:9" pos:end="1302:78">
	<expr_stmt pos:start="1292:9" pos:end="1292:48"><expr pos:start="1292:9" pos:end="1292:47"><call pos:start="1292:9" pos:end="1292:47"><name pos:start="1292:9" pos:end="1292:20">EST_LOG_INFO</name><argument_list pos:start="1292:21" pos:end="1292:47">(<argument pos:start="1292:22" pos:end="1292:46"><expr pos:start="1292:22" pos:end="1292:46"><literal type="string" pos:start="1292:22" pos:end="1292:46">"Enabling TLS SRP mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1293:9" pos:end="1296:9"><if pos:start="1293:9" pos:end="1296:9">if <condition pos:start="1293:12" pos:end="1293:74">(<expr pos:start="1293:13" pos:end="1293:73"><operator pos:start="1293:13" pos:end="1293:13">!</operator><call pos:start="1293:14" pos:end="1293:73"><name pos:start="1293:14" pos:end="1293:36">SSL_CTX_set_cipher_list</name><argument_list pos:start="1293:37" pos:end="1293:73">(<argument pos:start="1293:38" pos:end="1293:44"><expr pos:start="1293:38" pos:end="1293:44"><name pos:start="1293:38" pos:end="1293:44">ssl_ctx</name></expr></argument>, <argument pos:start="1293:47" pos:end="1293:72"><expr pos:start="1293:47" pos:end="1293:72"><name pos:start="1293:47" pos:end="1293:72">EST_CIPHER_LIST_SRP_SERVER</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1293:76" pos:end="1296:9">{<block_content pos:start="1294:13" pos:end="1295:21"> 
	    <expr_stmt pos:start="1294:13" pos:end="1294:61"><expr pos:start="1294:13" pos:end="1294:60"><call pos:start="1294:13" pos:end="1294:60"><name pos:start="1294:13" pos:end="1294:23">EST_LOG_ERR</name><argument_list pos:start="1294:24" pos:end="1294:60">(<argument pos:start="1294:25" pos:end="1294:59"><expr pos:start="1294:25" pos:end="1294:59"><literal type="string" pos:start="1294:25" pos:end="1294:59">"Failed to set SSL cipher suites\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1295:13" pos:end="1295:21">return <expr pos:start="1295:20" pos:end="1295:20"><literal type="number" pos:start="1295:20" pos:end="1295:20">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block" pos:start="1297:9" pos:end="1301:11">/*
	 * Set the application specific handler for
	 * providing the SRP parameters during user 
	 * authentication.
	 */</comment>
	<expr_stmt pos:start="1302:9" pos:end="1302:78"><expr pos:start="1302:9" pos:end="1302:77"><call pos:start="1302:9" pos:end="1302:77"><name pos:start="1302:9" pos:end="1302:41">SSL_CTX_set_srp_username_callback</name><argument_list pos:start="1302:42" pos:end="1302:77">(<argument pos:start="1302:43" pos:end="1302:49"><expr pos:start="1302:43" pos:end="1302:49"><name pos:start="1302:43" pos:end="1302:49">ssl_ctx</name></expr></argument>, <argument pos:start="1302:52" pos:end="1302:76"><expr pos:start="1302:52" pos:end="1302:76"><name pos:start="1302:52" pos:end="1302:76"><name pos:start="1302:52" pos:end="1302:55">ectx</name><operator pos:start="1302:56" pos:end="1302:57">-&gt;</operator><name pos:start="1302:58" pos:end="1302:76">est_srp_username_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1303:7" pos:end="1313:5">else <block pos:start="1303:12" pos:end="1313:5">{<block_content pos:start="1304:9" pos:end="1312:9">
	<expr_stmt pos:start="1304:9" pos:end="1304:44"><expr pos:start="1304:9" pos:end="1304:43"><call pos:start="1304:9" pos:end="1304:43"><name pos:start="1304:9" pos:end="1304:20">EST_LOG_INFO</name><argument_list pos:start="1304:21" pos:end="1304:43">(<argument pos:start="1304:22" pos:end="1304:42"><expr pos:start="1304:22" pos:end="1304:42"><literal type="string" pos:start="1304:22" pos:end="1304:42">"TLS SRP not enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" pos:start="1305:9" pos:end="1308:11">/*
	 * Set the TLS cipher suites that should be allowed.
	 * This disables anonymous and null ciphers
	 */</comment>
	<if_stmt pos:start="1309:9" pos:end="1312:9"><if pos:start="1309:9" pos:end="1312:9">if <condition pos:start="1309:12" pos:end="1309:63">(<expr pos:start="1309:13" pos:end="1309:62"><operator pos:start="1309:13" pos:end="1309:13">!</operator><call pos:start="1309:14" pos:end="1309:62"><name pos:start="1309:14" pos:end="1309:36">SSL_CTX_set_cipher_list</name><argument_list pos:start="1309:37" pos:end="1309:62">(<argument pos:start="1309:38" pos:end="1309:44"><expr pos:start="1309:38" pos:end="1309:44"><name pos:start="1309:38" pos:end="1309:44">ssl_ctx</name></expr></argument>, <argument pos:start="1309:47" pos:end="1309:61"><expr pos:start="1309:47" pos:end="1309:61"><name pos:start="1309:47" pos:end="1309:61">EST_CIPHER_LIST</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1309:65" pos:end="1312:9">{<block_content pos:start="1310:13" pos:end="1311:21"> 
	    <expr_stmt pos:start="1310:13" pos:end="1310:61"><expr pos:start="1310:13" pos:end="1310:60"><call pos:start="1310:13" pos:end="1310:60"><name pos:start="1310:13" pos:end="1310:23">EST_LOG_ERR</name><argument_list pos:start="1310:24" pos:end="1310:60">(<argument pos:start="1310:25" pos:end="1310:59"><expr pos:start="1310:25" pos:end="1310:59"><literal type="string" pos:start="1310:25" pos:end="1310:59">"Failed to set SSL cipher suites\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1311:13" pos:end="1311:21">return <expr pos:start="1311:20" pos:end="1311:20"><literal type="number" pos:start="1311:20" pos:end="1311:20">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="1315:5" pos:end="1318:5"><if pos:start="1315:5" pos:end="1318:5">if <condition pos:start="1315:8" pos:end="1315:65">(<expr pos:start="1315:9" pos:end="1315:64"><call pos:start="1315:9" pos:end="1315:59"><name pos:start="1315:9" pos:end="1315:31">SSL_CTX_use_certificate</name><argument_list pos:start="1315:32" pos:end="1315:59">(<argument pos:start="1315:33" pos:end="1315:39"><expr pos:start="1315:33" pos:end="1315:39"><name pos:start="1315:33" pos:end="1315:39">ssl_ctx</name></expr></argument>, <argument pos:start="1315:42" pos:end="1315:58"><expr pos:start="1315:42" pos:end="1315:58"><name pos:start="1315:42" pos:end="1315:58"><name pos:start="1315:42" pos:end="1315:45">ectx</name><operator pos:start="1315:46" pos:end="1315:47">-&gt;</operator><name pos:start="1315:48" pos:end="1315:58">server_cert</name></name></expr></argument>)</argument_list></call> <operator pos:start="1315:61" pos:end="1315:62">==</operator> <literal type="number" pos:start="1315:64" pos:end="1315:64">0</literal></expr>)</condition> <block pos:start="1315:67" pos:end="1318:5">{<block_content pos:start="1316:9" pos:end="1317:17">
	<expr_stmt pos:start="1316:9" pos:end="1316:56"><expr pos:start="1316:9" pos:end="1316:55"><call pos:start="1316:9" pos:end="1316:55"><name pos:start="1316:9" pos:end="1316:19">EST_LOG_ERR</name><argument_list pos:start="1316:20" pos:end="1316:55">(<argument pos:start="1316:21" pos:end="1316:54"><expr pos:start="1316:21" pos:end="1316:54"><literal type="string" pos:start="1316:21" pos:end="1316:54">"Unable to set server certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1317:9" pos:end="1317:17">return <expr pos:start="1317:16" pos:end="1317:16"><literal type="number" pos:start="1317:16" pos:end="1317:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1319:5" pos:end="1322:5"><if pos:start="1319:5" pos:end="1322:5">if <condition pos:start="1319:8" pos:end="1319:68">(<expr pos:start="1319:9" pos:end="1319:67"><call pos:start="1319:9" pos:end="1319:62"><name pos:start="1319:9" pos:end="1319:30">SSL_CTX_use_PrivateKey</name><argument_list pos:start="1319:31" pos:end="1319:62">(<argument pos:start="1319:32" pos:end="1319:38"><expr pos:start="1319:32" pos:end="1319:38"><name pos:start="1319:32" pos:end="1319:38">ssl_ctx</name></expr></argument>, <argument pos:start="1319:41" pos:end="1319:61"><expr pos:start="1319:41" pos:end="1319:61"><name pos:start="1319:41" pos:end="1319:61"><name pos:start="1319:41" pos:end="1319:44">ectx</name><operator pos:start="1319:45" pos:end="1319:46">-&gt;</operator><name pos:start="1319:47" pos:end="1319:61">server_priv_key</name></name></expr></argument>)</argument_list></call> <operator pos:start="1319:64" pos:end="1319:65">==</operator> <literal type="number" pos:start="1319:67" pos:end="1319:67">0</literal></expr>)</condition> <block pos:start="1319:70" pos:end="1322:5">{<block_content pos:start="1320:9" pos:end="1321:17">
	<expr_stmt pos:start="1320:9" pos:end="1320:56"><expr pos:start="1320:9" pos:end="1320:55"><call pos:start="1320:9" pos:end="1320:55"><name pos:start="1320:9" pos:end="1320:19">EST_LOG_ERR</name><argument_list pos:start="1320:20" pos:end="1320:55">(<argument pos:start="1320:21" pos:end="1320:54"><expr pos:start="1320:21" pos:end="1320:54"><literal type="string" pos:start="1320:21" pos:end="1320:54">"Unable to set server private key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1321:9" pos:end="1321:17">return <expr pos:start="1321:16" pos:end="1321:16"><literal type="number" pos:start="1321:16" pos:end="1321:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1324:5" pos:end="1335:7">/*
     * There should be no need to include the cert chain for the
     * server's certificate in the TLS Certificate message from
     * the server.  The reason is the EST draft specifies that
     * all the subordinate CA certs should be included in the
     * cacerts message flow.  Hence, the client will already have
     * the full cert chain.  Therfore, the TLS handshake will only
     * contain the server's cert, not the full chain. 
     *
      SSL_CTX_use_certificate_chain_file(ctx-&gt;ssl_ctx,
                                         ctx-&gt;est_ctx-&gt;http_cert_file);
     */</comment>

    <return pos:start="1337:5" pos:end="1337:13">return <expr pos:start="1337:12" pos:end="1337:12"><literal type="number" pos:start="1337:12" pos:end="1337:12">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="1339:1" pos:end="1339:61">// Dynamically load SSL library. Set up ctx-&gt;ssl_ctx pointer.</comment>
<function pos:start="1340:1" pos:end="1346:1"><type pos:start="1340:1" pos:end="1340:11"><specifier pos:start="1340:1" pos:end="1340:6">static</specifier> <name pos:start="1340:8" pos:end="1340:11">void</name></type> <name pos:start="1340:13" pos:end="1340:40">reset_per_request_attributes</name> <parameter_list pos:start="1340:42" pos:end="1340:69">(<parameter pos:start="1340:43" pos:end="1340:68"><decl pos:start="1340:43" pos:end="1340:68"><type pos:start="1340:43" pos:end="1340:68"><name pos:start="1340:43" pos:end="1340:62"><name pos:start="1340:43" pos:end="1340:48">struct</name> <name pos:start="1340:50" pos:end="1340:62">mg_connection</name></name> <modifier pos:start="1340:64" pos:end="1340:64">*</modifier></type><name pos:start="1340:65" pos:end="1340:68">conn</name></decl></parameter>)</parameter_list>
<block pos:start="1341:1" pos:end="1346:1">{<block_content pos:start="1342:5" pos:end="1345:45">
    <expr_stmt pos:start="1342:5" pos:end="1342:56"><expr pos:start="1342:5" pos:end="1342:55"><name pos:start="1342:5" pos:end="1342:19"><name pos:start="1342:5" pos:end="1342:8">conn</name><operator pos:start="1342:9" pos:end="1342:10">-&gt;</operator><name pos:start="1342:11" pos:end="1342:19">path_info</name></name> <operator pos:start="1342:21" pos:end="1342:21">=</operator> <name pos:start="1342:23" pos:end="1342:48"><name pos:start="1342:23" pos:end="1342:26">conn</name><operator pos:start="1342:27" pos:end="1342:28">-&gt;</operator><name pos:start="1342:29" pos:end="1342:40">request_info</name><operator pos:start="1342:41" pos:end="1342:41">.</operator><name pos:start="1342:42" pos:end="1342:48">ev_data</name></name> <operator pos:start="1342:50" pos:end="1342:50">=</operator> <name pos:start="1342:52" pos:end="1342:55">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1343:5" pos:end="1343:54"><expr pos:start="1343:5" pos:end="1343:53"><name pos:start="1343:5" pos:end="1343:24"><name pos:start="1343:5" pos:end="1343:8">conn</name><operator pos:start="1343:9" pos:end="1343:10">-&gt;</operator><name pos:start="1343:11" pos:end="1343:24">num_bytes_sent</name></name> <operator pos:start="1343:26" pos:end="1343:26">=</operator> <name pos:start="1343:28" pos:end="1343:49"><name pos:start="1343:28" pos:end="1343:31">conn</name><operator pos:start="1343:32" pos:end="1343:33">-&gt;</operator><name pos:start="1343:34" pos:end="1343:49">consumed_content</name></name> <operator pos:start="1343:51" pos:end="1343:51">=</operator> <literal type="number" pos:start="1343:53" pos:end="1343:53">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1344:5" pos:end="1344:27"><expr pos:start="1344:5" pos:end="1344:26"><name pos:start="1344:5" pos:end="1344:21"><name pos:start="1344:5" pos:end="1344:8">conn</name><operator pos:start="1344:9" pos:end="1344:10">-&gt;</operator><name pos:start="1344:11" pos:end="1344:21">status_code</name></name> <operator pos:start="1344:23" pos:end="1344:23">=</operator> <operator pos:start="1344:25" pos:end="1344:25">-</operator><literal type="number" pos:start="1344:26" pos:end="1344:26">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1345:5" pos:end="1345:45"><expr pos:start="1345:5" pos:end="1345:44"><name pos:start="1345:5" pos:end="1345:20"><name pos:start="1345:5" pos:end="1345:8">conn</name><operator pos:start="1345:9" pos:end="1345:10">-&gt;</operator><name pos:start="1345:11" pos:end="1345:20">must_close</name></name> <operator pos:start="1345:22" pos:end="1345:22">=</operator> <name pos:start="1345:24" pos:end="1345:40"><name pos:start="1345:24" pos:end="1345:27">conn</name><operator pos:start="1345:28" pos:end="1345:29">-&gt;</operator><name pos:start="1345:30" pos:end="1345:40">request_len</name></name> <operator pos:start="1345:42" pos:end="1345:42">=</operator> <literal type="number" pos:start="1345:44" pos:end="1345:44">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line" pos:start="1347:1" pos:end="1347:61">// Dynamically load SSL library. Set up ctx-&gt;ssl_ctx pointer.</comment>
<function pos:start="1348:1" pos:end="1353:1"><type pos:start="1348:1" pos:end="1348:10"><specifier pos:start="1348:1" pos:end="1348:6">static</specifier> <name pos:start="1348:8" pos:end="1348:10">int</name></type> <name pos:start="1348:12" pos:end="1348:23">is_valid_uri</name> <parameter_list pos:start="1348:25" pos:end="1348:41">(<parameter pos:start="1348:26" pos:end="1348:40"><decl pos:start="1348:26" pos:end="1348:40"><type pos:start="1348:26" pos:end="1348:37"><specifier pos:start="1348:26" pos:end="1348:30">const</specifier> <name pos:start="1348:32" pos:end="1348:35">char</name> <modifier pos:start="1348:37" pos:end="1348:37">*</modifier></type><name pos:start="1348:38" pos:end="1348:40">uri</name></decl></parameter>)</parameter_list>
<block pos:start="1349:1" pos:end="1353:1">{<block_content pos:start="1352:5" pos:end="1352:62">
    <comment type="line" pos:start="1350:5" pos:end="1350:80">// Conform to http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2</comment>
    <comment type="line" pos:start="1351:5" pos:end="1351:61">// URI can be an asterisk (*) or should start with slash.</comment>
    <return pos:start="1352:5" pos:end="1352:62">return <expr pos:start="1352:12" pos:end="1352:61"><name pos:start="1352:12" pos:end="1352:17"><name pos:start="1352:12" pos:end="1352:14">uri</name><index pos:start="1352:15" pos:end="1352:17">[<expr pos:start="1352:16" pos:end="1352:16"><literal type="number" pos:start="1352:16" pos:end="1352:16">0</literal></expr>]</index></name> <operator pos:start="1352:19" pos:end="1352:20">==</operator> <literal type="char" pos:start="1352:22" pos:end="1352:24">'/'</literal> <operator pos:start="1352:26" pos:end="1352:27">||</operator> <operator pos:start="1352:29" pos:end="1352:29">(</operator><name pos:start="1352:30" pos:end="1352:35"><name pos:start="1352:30" pos:end="1352:32">uri</name><index pos:start="1352:33" pos:end="1352:35">[<expr pos:start="1352:34" pos:end="1352:34"><literal type="number" pos:start="1352:34" pos:end="1352:34">0</literal></expr>]</index></name> <operator pos:start="1352:37" pos:end="1352:38">==</operator> <literal type="char" pos:start="1352:40" pos:end="1352:42">'*'</literal> <operator pos:start="1352:44" pos:end="1352:45">&amp;&amp;</operator> <name pos:start="1352:47" pos:end="1352:52"><name pos:start="1352:47" pos:end="1352:49">uri</name><index pos:start="1352:50" pos:end="1352:52">[<expr pos:start="1352:51" pos:end="1352:51"><literal type="number" pos:start="1352:51" pos:end="1352:51">1</literal></expr>]</index></name> <operator pos:start="1352:54" pos:end="1352:55">==</operator> <literal type="char" pos:start="1352:57" pos:end="1352:60">'\0'</literal><operator pos:start="1352:61" pos:end="1352:61">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="line" pos:start="1354:1" pos:end="1354:61">// Dynamically load SSL library. Set up ctx-&gt;ssl_ctx pointer.</comment>
<function pos:start="1355:1" pos:end="1445:1"><type pos:start="1355:1" pos:end="1355:11"><specifier pos:start="1355:1" pos:end="1355:6">static</specifier> <name pos:start="1355:8" pos:end="1355:11">void</name></type> <name pos:start="1355:13" pos:end="1355:34">process_new_connection</name> <parameter_list pos:start="1355:36" pos:end="1355:63">(<parameter pos:start="1355:37" pos:end="1355:62"><decl pos:start="1355:37" pos:end="1355:62"><type pos:start="1355:37" pos:end="1355:62"><name pos:start="1355:37" pos:end="1355:56"><name pos:start="1355:37" pos:end="1355:42">struct</name> <name pos:start="1355:44" pos:end="1355:56">mg_connection</name></name> <modifier pos:start="1355:58" pos:end="1355:58">*</modifier></type><name pos:start="1355:59" pos:end="1355:62">conn</name></decl></parameter>)</parameter_list>
<block pos:start="1356:1" pos:end="1445:1">{<block_content pos:start="1357:5" pos:end="1444:25">
    <decl_stmt pos:start="1357:5" pos:end="1357:53"><decl pos:start="1357:5" pos:end="1357:52"><type pos:start="1357:5" pos:end="1357:28"><name pos:start="1357:5" pos:end="1357:26"><name pos:start="1357:5" pos:end="1357:10">struct</name> <name pos:start="1357:12" pos:end="1357:26">mg_request_info</name></name> <modifier pos:start="1357:28" pos:end="1357:28">*</modifier></type><name pos:start="1357:29" pos:end="1357:30">ri</name> <init pos:start="1357:32" pos:end="1357:52">= <expr pos:start="1357:34" pos:end="1357:52"><operator pos:start="1357:34" pos:end="1357:34">&amp;</operator><name pos:start="1357:35" pos:end="1357:52"><name pos:start="1357:35" pos:end="1357:38">conn</name><operator pos:start="1357:39" pos:end="1357:40">-&gt;</operator><name pos:start="1357:41" pos:end="1357:52">request_info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1358:5" pos:end="1358:52"><decl pos:start="1358:5" pos:end="1358:26"><type pos:start="1358:5" pos:end="1358:7"><name pos:start="1358:5" pos:end="1358:7">int</name></type> <name pos:start="1358:9" pos:end="1358:26">keep_alive_enabled</name></decl>, <decl pos:start="1358:29" pos:end="1358:38"><type ref="prev" pos:start="1358:5" pos:end="1358:7"/><name pos:start="1358:29" pos:end="1358:38">keep_alive</name></decl>, <decl pos:start="1358:41" pos:end="1358:51"><type ref="prev" pos:start="1358:5" pos:end="1358:7"/><name pos:start="1358:41" pos:end="1358:51">discard_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1359:5" pos:end="1359:19"><decl pos:start="1359:5" pos:end="1359:18"><type pos:start="1359:5" pos:end="1359:16"><specifier pos:start="1359:5" pos:end="1359:9">const</specifier> <name pos:start="1359:11" pos:end="1359:14">char</name> <modifier pos:start="1359:16" pos:end="1359:16">*</modifier></type><name pos:start="1359:17" pos:end="1359:18">cl</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1361:5" pos:end="1361:54"><expr pos:start="1361:5" pos:end="1361:53"><name pos:start="1361:5" pos:end="1361:22">keep_alive_enabled</name> <operator pos:start="1361:24" pos:end="1361:24">=</operator> <name pos:start="1361:26" pos:end="1361:53"><name pos:start="1361:26" pos:end="1361:29">conn</name><operator pos:start="1361:30" pos:end="1361:31">-&gt;</operator><name pos:start="1361:32" pos:end="1361:34">ctx</name><operator pos:start="1361:35" pos:end="1361:36">-&gt;</operator><name pos:start="1361:37" pos:end="1361:53">enable_keepalives</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="1362:5" pos:end="1362:19"><expr pos:start="1362:5" pos:end="1362:18"><name pos:start="1362:5" pos:end="1362:14">keep_alive</name> <operator pos:start="1362:16" pos:end="1362:16">=</operator> <literal type="number" pos:start="1362:18" pos:end="1362:18">0</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="1364:5" pos:end="1364:76">// Important: on new connection, reset the receiving buffer. Credit goes</comment>
    <comment type="line" pos:start="1365:5" pos:end="1365:18">// to crule42.</comment>
    <expr_stmt pos:start="1366:5" pos:end="1366:23"><expr pos:start="1366:5" pos:end="1366:22"><name pos:start="1366:5" pos:end="1366:18"><name pos:start="1366:5" pos:end="1366:8">conn</name><operator pos:start="1366:9" pos:end="1366:10">-&gt;</operator><name pos:start="1366:11" pos:end="1366:18">data_len</name></name> <operator pos:start="1366:20" pos:end="1366:20">=</operator> <literal type="number" pos:start="1366:22" pos:end="1366:22">0</literal></expr>;</expr_stmt>
    <do pos:start="1367:5" pos:end="1444:25">do <block pos:start="1367:8" pos:end="1441:5">{<block_content pos:start="1368:9" pos:end="1439:49">
        <expr_stmt pos:start="1368:9" pos:end="1368:43"><expr pos:start="1368:9" pos:end="1368:42"><call pos:start="1368:9" pos:end="1368:42"><name pos:start="1368:9" pos:end="1368:36">reset_per_request_attributes</name><argument_list pos:start="1368:37" pos:end="1368:42">(<argument pos:start="1368:38" pos:end="1368:41"><expr pos:start="1368:38" pos:end="1368:41"><name pos:start="1368:38" pos:end="1368:41">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1369:9" pos:end="1370:58"><expr pos:start="1369:9" pos:end="1370:57"><name pos:start="1369:9" pos:end="1369:25"><name pos:start="1369:9" pos:end="1369:12">conn</name><operator pos:start="1369:13" pos:end="1369:14">-&gt;</operator><name pos:start="1369:15" pos:end="1369:25">request_len</name></name> <operator pos:start="1369:27" pos:end="1369:27">=</operator> <call pos:start="1369:29" pos:end="1370:57"><name pos:start="1369:29" pos:end="1369:40">read_request</name><argument_list pos:start="1369:41" pos:end="1370:57">(<argument pos:start="1369:42" pos:end="1369:45"><expr pos:start="1369:42" pos:end="1369:45"><name pos:start="1369:42" pos:end="1369:45">NULL</name></expr></argument>, <argument pos:start="1369:48" pos:end="1369:51"><expr pos:start="1369:48" pos:end="1369:51"><name pos:start="1369:48" pos:end="1369:51">conn</name></expr></argument>, <argument pos:start="1369:54" pos:end="1369:62"><expr pos:start="1369:54" pos:end="1369:62"><name pos:start="1369:54" pos:end="1369:62"><name pos:start="1369:54" pos:end="1369:57">conn</name><operator pos:start="1369:58" pos:end="1369:59">-&gt;</operator><name pos:start="1369:60" pos:end="1369:62">buf</name></name></expr></argument>, <argument pos:start="1369:65" pos:end="1369:78"><expr pos:start="1369:65" pos:end="1369:78"><name pos:start="1369:65" pos:end="1369:78"><name pos:start="1369:65" pos:end="1369:68">conn</name><operator pos:start="1369:69" pos:end="1369:70">-&gt;</operator><name pos:start="1369:71" pos:end="1369:78">buf_size</name></name></expr></argument>,
                                         <argument pos:start="1370:42" pos:end="1370:56"><expr pos:start="1370:42" pos:end="1370:56"><operator pos:start="1370:42" pos:end="1370:42">&amp;</operator><name pos:start="1370:43" pos:end="1370:56"><name pos:start="1370:43" pos:end="1370:46">conn</name><operator pos:start="1370:47" pos:end="1370:48">-&gt;</operator><name pos:start="1370:49" pos:end="1370:56">data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1371:9" pos:end="1371:77"><expr pos:start="1371:9" pos:end="1371:76"><call pos:start="1371:9" pos:end="1371:76"><name pos:start="1371:9" pos:end="1371:14">assert</name><argument_list pos:start="1371:15" pos:end="1371:76">(<argument pos:start="1371:16" pos:end="1371:75"><expr pos:start="1371:16" pos:end="1371:75"><name pos:start="1371:16" pos:end="1371:32"><name pos:start="1371:16" pos:end="1371:19">conn</name><operator pos:start="1371:20" pos:end="1371:21">-&gt;</operator><name pos:start="1371:22" pos:end="1371:32">request_len</name></name> <operator pos:start="1371:34" pos:end="1371:34">&lt;</operator> <literal type="number" pos:start="1371:36" pos:end="1371:36">0</literal> <operator pos:start="1371:38" pos:end="1371:39">||</operator> <name pos:start="1371:41" pos:end="1371:54"><name pos:start="1371:41" pos:end="1371:44">conn</name><operator pos:start="1371:45" pos:end="1371:46">-&gt;</operator><name pos:start="1371:47" pos:end="1371:54">data_len</name></name> <operator pos:start="1371:56" pos:end="1371:57">&gt;=</operator> <name pos:start="1371:59" pos:end="1371:75"><name pos:start="1371:59" pos:end="1371:62">conn</name><operator pos:start="1371:63" pos:end="1371:64">-&gt;</operator><name pos:start="1371:65" pos:end="1371:75">request_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1372:9" pos:end="1375:9"><if pos:start="1372:9" pos:end="1375:9">if <condition pos:start="1372:12" pos:end="1372:71">(<expr pos:start="1372:13" pos:end="1372:70"><name pos:start="1372:13" pos:end="1372:29"><name pos:start="1372:13" pos:end="1372:16">conn</name><operator pos:start="1372:17" pos:end="1372:18">-&gt;</operator><name pos:start="1372:19" pos:end="1372:29">request_len</name></name> <operator pos:start="1372:31" pos:end="1372:32">==</operator> <literal type="number" pos:start="1372:34" pos:end="1372:34">0</literal> <operator pos:start="1372:36" pos:end="1372:37">&amp;&amp;</operator> <name pos:start="1372:39" pos:end="1372:52"><name pos:start="1372:39" pos:end="1372:42">conn</name><operator pos:start="1372:43" pos:end="1372:44">-&gt;</operator><name pos:start="1372:45" pos:end="1372:52">data_len</name></name> <operator pos:start="1372:54" pos:end="1372:55">==</operator> <name pos:start="1372:57" pos:end="1372:70"><name pos:start="1372:57" pos:end="1372:60">conn</name><operator pos:start="1372:61" pos:end="1372:62">-&gt;</operator><name pos:start="1372:63" pos:end="1372:70">buf_size</name></name></expr>)</condition> <block pos:start="1372:73" pos:end="1375:9">{<block_content pos:start="1373:13" pos:end="1374:19">
            <expr_stmt pos:start="1373:13" pos:end="1373:70"><expr pos:start="1373:13" pos:end="1373:69"><call pos:start="1373:13" pos:end="1373:69"><name pos:start="1373:13" pos:end="1373:27">send_http_error</name><argument_list pos:start="1373:28" pos:end="1373:69">(<argument pos:start="1373:29" pos:end="1373:32"><expr pos:start="1373:29" pos:end="1373:32"><name pos:start="1373:29" pos:end="1373:32">conn</name></expr></argument>, <argument pos:start="1373:35" pos:end="1373:37"><expr pos:start="1373:35" pos:end="1373:37"><literal type="number" pos:start="1373:35" pos:end="1373:37">413</literal></expr></argument>, <argument pos:start="1373:40" pos:end="1373:58"><expr pos:start="1373:40" pos:end="1373:58"><literal type="string" pos:start="1373:40" pos:end="1373:58">"Request Too Large"</literal></expr></argument>, <argument pos:start="1373:61" pos:end="1373:64"><expr pos:start="1373:61" pos:end="1373:64"><literal type="string" pos:start="1373:61" pos:end="1373:64">"%s"</literal></expr></argument>, <argument pos:start="1373:67" pos:end="1373:68"><expr pos:start="1373:67" pos:end="1373:68"><literal type="string" pos:start="1373:67" pos:end="1373:68">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1374:13" pos:end="1374:19">return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1376:9" pos:end="1378:9"><if pos:start="1376:9" pos:end="1378:9">if <condition pos:start="1376:12" pos:end="1376:35">(<expr pos:start="1376:13" pos:end="1376:34"><name pos:start="1376:13" pos:end="1376:29"><name pos:start="1376:13" pos:end="1376:16">conn</name><operator pos:start="1376:17" pos:end="1376:18">-&gt;</operator><name pos:start="1376:19" pos:end="1376:29">request_len</name></name> <operator pos:start="1376:31" pos:end="1376:32">&lt;=</operator> <literal type="number" pos:start="1376:34" pos:end="1376:34">0</literal></expr>)</condition> <block pos:start="1376:37" pos:end="1378:9">{<block_content pos:start="1377:13" pos:end="1377:19">
            <return pos:start="1377:13" pos:end="1377:19">return;</return> <comment type="line" pos:start="1377:21" pos:end="1377:55">// Remote end closed the connection</comment>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="1379:9" pos:end="1421:9"><if pos:start="1379:9" pos:end="1385:9">if <condition pos:start="1379:12" pos:end="1380:35">(<expr pos:start="1379:13" pos:end="1380:34"><call pos:start="1379:13" pos:end="1379:61"><name pos:start="1379:13" pos:end="1379:30">parse_http_request</name><argument_list pos:start="1379:31" pos:end="1379:61">(<argument pos:start="1379:32" pos:end="1379:40"><expr pos:start="1379:32" pos:end="1379:40"><name pos:start="1379:32" pos:end="1379:40"><name pos:start="1379:32" pos:end="1379:35">conn</name><operator pos:start="1379:36" pos:end="1379:37">-&gt;</operator><name pos:start="1379:38" pos:end="1379:40">buf</name></name></expr></argument>, <argument pos:start="1379:43" pos:end="1379:56"><expr pos:start="1379:43" pos:end="1379:56"><name pos:start="1379:43" pos:end="1379:56"><name pos:start="1379:43" pos:end="1379:46">conn</name><operator pos:start="1379:47" pos:end="1379:48">-&gt;</operator><name pos:start="1379:49" pos:end="1379:56">buf_size</name></name></expr></argument>, <argument pos:start="1379:59" pos:end="1379:60"><expr pos:start="1379:59" pos:end="1379:60"><name pos:start="1379:59" pos:end="1379:60">ri</name></expr></argument>)</argument_list></call> <operator pos:start="1379:63" pos:end="1379:64">&lt;=</operator> <literal type="number" pos:start="1379:66" pos:end="1379:66">0</literal> <operator pos:start="1379:68" pos:end="1379:69">||</operator>
            <operator pos:start="1380:13" pos:end="1380:13">!</operator><call pos:start="1380:14" pos:end="1380:34"><name pos:start="1380:14" pos:end="1380:25">is_valid_uri</name><argument_list pos:start="1380:26" pos:end="1380:34">(<argument pos:start="1380:27" pos:end="1380:33"><expr pos:start="1380:27" pos:end="1380:33"><name pos:start="1380:27" pos:end="1380:33"><name pos:start="1380:27" pos:end="1380:28">ri</name><operator pos:start="1380:29" pos:end="1380:30">-&gt;</operator><name pos:start="1380:31" pos:end="1380:33">uri</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1380:37" pos:end="1385:9">{<block_content pos:start="1382:13" pos:end="1384:33">
            <comment type="line" pos:start="1381:13" pos:end="1381:84">// Do not put garbage in the access log, just send it back to the client</comment>
            <expr_stmt pos:start="1382:13" pos:end="1383:92"><expr pos:start="1382:13" pos:end="1383:91"><call pos:start="1382:13" pos:end="1383:91"><name pos:start="1382:13" pos:end="1382:27">send_http_error</name><argument_list pos:start="1382:28" pos:end="1383:91">(<argument pos:start="1382:29" pos:end="1382:32"><expr pos:start="1382:29" pos:end="1382:32"><name pos:start="1382:29" pos:end="1382:32">conn</name></expr></argument>, <argument pos:start="1382:35" pos:end="1382:37"><expr pos:start="1382:35" pos:end="1382:37"><literal type="number" pos:start="1382:35" pos:end="1382:37">400</literal></expr></argument>, <argument pos:start="1382:40" pos:end="1382:52"><expr pos:start="1382:40" pos:end="1382:52"><literal type="string" pos:start="1382:40" pos:end="1382:52">"Bad Request"</literal></expr></argument>,
                            <argument pos:start="1383:29" pos:end="1383:63"><expr pos:start="1383:29" pos:end="1383:63"><literal type="string" pos:start="1383:29" pos:end="1383:63">"Cannot parse HTTP request: [%.*s]"</literal></expr></argument>, <argument pos:start="1383:66" pos:end="1383:79"><expr pos:start="1383:66" pos:end="1383:79"><name pos:start="1383:66" pos:end="1383:79"><name pos:start="1383:66" pos:end="1383:69">conn</name><operator pos:start="1383:70" pos:end="1383:71">-&gt;</operator><name pos:start="1383:72" pos:end="1383:79">data_len</name></name></expr></argument>, <argument pos:start="1383:82" pos:end="1383:90"><expr pos:start="1383:82" pos:end="1383:90"><name pos:start="1383:82" pos:end="1383:90"><name pos:start="1383:82" pos:end="1383:85">conn</name><operator pos:start="1383:86" pos:end="1383:87">-&gt;</operator><name pos:start="1383:88" pos:end="1383:90">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1384:13" pos:end="1384:33"><expr pos:start="1384:13" pos:end="1384:32"><name pos:start="1384:13" pos:end="1384:28"><name pos:start="1384:13" pos:end="1384:16">conn</name><operator pos:start="1384:17" pos:end="1384:18">-&gt;</operator><name pos:start="1384:19" pos:end="1384:28">must_close</name></name> <operator pos:start="1384:30" pos:end="1384:30">=</operator> <literal type="number" pos:start="1384:32" pos:end="1384:32">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1385:11" pos:end="1390:9">else if <condition pos:start="1385:19" pos:end="1386:55">(<expr pos:start="1385:20" pos:end="1386:54"><call pos:start="1385:20" pos:end="1385:54"><name pos:start="1385:20" pos:end="1385:26">strncmp</name><argument_list pos:start="1385:27" pos:end="1385:54">(<argument pos:start="1385:28" pos:end="1385:43"><expr pos:start="1385:28" pos:end="1385:43"><name pos:start="1385:28" pos:end="1385:43"><name pos:start="1385:28" pos:end="1385:29">ri</name><operator pos:start="1385:30" pos:end="1385:31">-&gt;</operator><name pos:start="1385:32" pos:end="1385:43">http_version</name></name></expr></argument>, <argument pos:start="1385:46" pos:end="1385:50"><expr pos:start="1385:46" pos:end="1385:50"><literal type="string" pos:start="1385:46" pos:end="1385:50">"1.0"</literal></expr></argument>, <argument pos:start="1385:53" pos:end="1385:53"><expr pos:start="1385:53" pos:end="1385:53"><literal type="number" pos:start="1385:53" pos:end="1385:53">3</literal></expr></argument>)</argument_list></call> <operator pos:start="1385:56" pos:end="1385:57">&amp;&amp;</operator>
                   <call pos:start="1386:20" pos:end="1386:54"><name pos:start="1386:20" pos:end="1386:26">strncmp</name><argument_list pos:start="1386:27" pos:end="1386:54">(<argument pos:start="1386:28" pos:end="1386:43"><expr pos:start="1386:28" pos:end="1386:43"><name pos:start="1386:28" pos:end="1386:43"><name pos:start="1386:28" pos:end="1386:29">ri</name><operator pos:start="1386:30" pos:end="1386:31">-&gt;</operator><name pos:start="1386:32" pos:end="1386:43">http_version</name></name></expr></argument>, <argument pos:start="1386:46" pos:end="1386:50"><expr pos:start="1386:46" pos:end="1386:50"><literal type="string" pos:start="1386:46" pos:end="1386:50">"1.1"</literal></expr></argument>, <argument pos:start="1386:53" pos:end="1386:53"><expr pos:start="1386:53" pos:end="1386:53"><literal type="number" pos:start="1386:53" pos:end="1386:53">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1386:57" pos:end="1390:9">{<block_content pos:start="1388:13" pos:end="1389:29">
            <comment type="line" pos:start="1387:13" pos:end="1387:63">// Request seems valid, but HTTP version is strange</comment>
            <expr_stmt pos:start="1388:13" pos:end="1388:79"><expr pos:start="1388:13" pos:end="1388:78"><call pos:start="1388:13" pos:end="1388:78"><name pos:start="1388:13" pos:end="1388:27">send_http_error</name><argument_list pos:start="1388:28" pos:end="1388:78">(<argument pos:start="1388:29" pos:end="1388:32"><expr pos:start="1388:29" pos:end="1388:32"><name pos:start="1388:29" pos:end="1388:32">conn</name></expr></argument>, <argument pos:start="1388:35" pos:end="1388:37"><expr pos:start="1388:35" pos:end="1388:37"><literal type="number" pos:start="1388:35" pos:end="1388:37">505</literal></expr></argument>, <argument pos:start="1388:40" pos:end="1388:67"><expr pos:start="1388:40" pos:end="1388:67"><literal type="string" pos:start="1388:40" pos:end="1388:67">"HTTP version not supported"</literal></expr></argument>, <argument pos:start="1388:70" pos:end="1388:73"><expr pos:start="1388:70" pos:end="1388:73"><literal type="string" pos:start="1388:70" pos:end="1388:73">"%s"</literal></expr></argument>, <argument pos:start="1388:76" pos:end="1388:77"><expr pos:start="1388:76" pos:end="1388:77"><literal type="string" pos:start="1388:76" pos:end="1388:77">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1389:13" pos:end="1389:29"><expr pos:start="1389:13" pos:end="1389:28"><call pos:start="1389:13" pos:end="1389:28"><name pos:start="1389:13" pos:end="1389:22">log_access</name><argument_list pos:start="1389:23" pos:end="1389:28">(<argument pos:start="1389:24" pos:end="1389:27"><expr pos:start="1389:24" pos:end="1389:27"><name pos:start="1389:24" pos:end="1389:27">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1390:11" pos:end="1421:9">else <block pos:start="1390:16" pos:end="1421:9">{<block_content pos:start="1392:13" pos:end="1420:13">
            <comment type="line" pos:start="1391:13" pos:end="1391:42">// Request is valid, handle it</comment>
            <if_stmt pos:start="1392:13" pos:end="1399:13"><if pos:start="1392:13" pos:end="1394:13">if <condition pos:start="1392:16" pos:end="1392:64">(<expr pos:start="1392:17" pos:end="1392:63"><operator pos:start="1392:17" pos:end="1392:17">(</operator><name pos:start="1392:18" pos:end="1392:19">cl</name> <operator pos:start="1392:21" pos:end="1392:21">=</operator> <call pos:start="1392:23" pos:end="1392:54"><name pos:start="1392:23" pos:end="1392:32">get_header</name><argument_list pos:start="1392:33" pos:end="1392:54">(<argument pos:start="1392:34" pos:end="1392:35"><expr pos:start="1392:34" pos:end="1392:35"><name pos:start="1392:34" pos:end="1392:35">ri</name></expr></argument>, <argument pos:start="1392:38" pos:end="1392:53"><expr pos:start="1392:38" pos:end="1392:53"><literal type="string" pos:start="1392:38" pos:end="1392:53">"Content-Length"</literal></expr></argument>)</argument_list></call><operator pos:start="1392:55" pos:end="1392:55">)</operator> <operator pos:start="1392:57" pos:end="1392:58">!=</operator> <name pos:start="1392:60" pos:end="1392:63">NULL</name></expr>)</condition> <block pos:start="1392:66" pos:end="1394:13">{<block_content pos:start="1393:17" pos:end="1393:58">
                <expr_stmt pos:start="1393:17" pos:end="1393:58"><expr pos:start="1393:17" pos:end="1393:57"><name pos:start="1393:17" pos:end="1393:33"><name pos:start="1393:17" pos:end="1393:20">conn</name><operator pos:start="1393:21" pos:end="1393:22">-&gt;</operator><name pos:start="1393:23" pos:end="1393:33">content_len</name></name> <operator pos:start="1393:35" pos:end="1393:35">=</operator> <call pos:start="1393:37" pos:end="1393:57"><name pos:start="1393:37" pos:end="1393:43">strtoll</name><argument_list pos:start="1393:44" pos:end="1393:57">(<argument pos:start="1393:45" pos:end="1393:46"><expr pos:start="1393:45" pos:end="1393:46"><name pos:start="1393:45" pos:end="1393:46">cl</name></expr></argument>, <argument pos:start="1393:49" pos:end="1393:52"><expr pos:start="1393:49" pos:end="1393:52"><name pos:start="1393:49" pos:end="1393:52">NULL</name></expr></argument>, <argument pos:start="1393:55" pos:end="1393:56"><expr pos:start="1393:55" pos:end="1393:56"><literal type="number" pos:start="1393:55" pos:end="1393:56">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="1394:15" pos:end="1397:13">else if <condition pos:start="1394:23" pos:end="1395:65">(<expr pos:start="1394:24" pos:end="1395:64"><operator pos:start="1394:24" pos:end="1394:24">!</operator><call pos:start="1394:25" pos:end="1394:65"><name pos:start="1394:25" pos:end="1394:37">mg_strcasecmp</name><argument_list pos:start="1394:38" pos:end="1394:65">(<argument pos:start="1394:39" pos:end="1394:56"><expr pos:start="1394:39" pos:end="1394:56"><name pos:start="1394:39" pos:end="1394:56"><name pos:start="1394:39" pos:end="1394:40">ri</name><operator pos:start="1394:41" pos:end="1394:42">-&gt;</operator><name pos:start="1394:43" pos:end="1394:56">request_method</name></name></expr></argument>, <argument pos:start="1394:59" pos:end="1394:64"><expr pos:start="1394:59" pos:end="1394:64"><literal type="string" pos:start="1394:59" pos:end="1394:64">"POST"</literal></expr></argument>)</argument_list></call> <operator pos:start="1394:67" pos:end="1394:68">||</operator>
                       <operator pos:start="1395:24" pos:end="1395:24">!</operator><call pos:start="1395:25" pos:end="1395:64"><name pos:start="1395:25" pos:end="1395:37">mg_strcasecmp</name><argument_list pos:start="1395:38" pos:end="1395:64">(<argument pos:start="1395:39" pos:end="1395:56"><expr pos:start="1395:39" pos:end="1395:56"><name pos:start="1395:39" pos:end="1395:56"><name pos:start="1395:39" pos:end="1395:40">ri</name><operator pos:start="1395:41" pos:end="1395:42">-&gt;</operator><name pos:start="1395:43" pos:end="1395:56">request_method</name></name></expr></argument>, <argument pos:start="1395:59" pos:end="1395:63"><expr pos:start="1395:59" pos:end="1395:63"><literal type="string" pos:start="1395:59" pos:end="1395:63">"PUT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1395:67" pos:end="1397:13">{<block_content pos:start="1396:17" pos:end="1396:39">
                <expr_stmt pos:start="1396:17" pos:end="1396:39"><expr pos:start="1396:17" pos:end="1396:38"><name pos:start="1396:17" pos:end="1396:33"><name pos:start="1396:17" pos:end="1396:20">conn</name><operator pos:start="1396:21" pos:end="1396:22">-&gt;</operator><name pos:start="1396:23" pos:end="1396:33">content_len</name></name> <operator pos:start="1396:35" pos:end="1396:35">=</operator> <operator pos:start="1396:37" pos:end="1396:37">-</operator><literal type="number" pos:start="1396:38" pos:end="1396:38">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1397:15" pos:end="1399:13">else <block pos:start="1397:20" pos:end="1399:13">{<block_content pos:start="1398:17" pos:end="1398:38">
                <expr_stmt pos:start="1398:17" pos:end="1398:38"><expr pos:start="1398:17" pos:end="1398:37"><name pos:start="1398:17" pos:end="1398:33"><name pos:start="1398:17" pos:end="1398:20">conn</name><operator pos:start="1398:21" pos:end="1398:22">-&gt;</operator><name pos:start="1398:23" pos:end="1398:33">content_len</name></name> <operator pos:start="1398:35" pos:end="1398:35">=</operator> <literal type="number" pos:start="1398:37" pos:end="1398:37">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="block" pos:start="1400:13" pos:end="1403:15">/*
             * Ensure that the content-length value is a size that
             * the EST code is willing to accept
             */</comment>
            <if_stmt pos:start="1404:13" pos:end="1420:13"><if pos:start="1404:13" pos:end="1410:13">if <condition pos:start="1404:16" pos:end="1404:56">(<expr pos:start="1404:17" pos:end="1404:55"><name pos:start="1404:17" pos:end="1404:33"><name pos:start="1404:17" pos:end="1404:20">conn</name><operator pos:start="1404:21" pos:end="1404:22">-&gt;</operator><name pos:start="1404:23" pos:end="1404:33">content_len</name></name> <operator pos:start="1404:35" pos:end="1404:35">&gt;</operator> <name pos:start="1404:37" pos:end="1404:55">EST_MAX_CONTENT_LEN</name></expr>)</condition> <block pos:start="1404:58" pos:end="1410:13">{<block_content pos:start="1405:17" pos:end="1409:33">
                <expr_stmt pos:start="1405:17" pos:end="1407:50"><expr pos:start="1405:17" pos:end="1407:49"><call pos:start="1405:17" pos:end="1407:49"><name pos:start="1405:17" pos:end="1405:28">EST_LOG_WARN</name><argument_list pos:start="1405:29" pos:end="1407:49">(<argument pos:start="1405:30" pos:end="1406:69"><expr pos:start="1405:30" pos:end="1406:69"><literal type="string" pos:start="1405:30" pos:end="1405:75">"HTTP request content length greater than EST"</literal>
                             <literal type="string" pos:start="1406:30" pos:end="1406:69">" maximum supported content length (%d)"</literal></expr></argument>, 
                             <argument pos:start="1407:30" pos:end="1407:48"><expr pos:start="1407:30" pos:end="1407:48"><name pos:start="1407:30" pos:end="1407:48">EST_MAX_CONTENT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                <expr_stmt pos:start="1408:17" pos:end="1408:81"><expr pos:start="1408:17" pos:end="1408:80"><call pos:start="1408:17" pos:end="1408:80"><name pos:start="1408:17" pos:end="1408:31">send_http_error</name><argument_list pos:start="1408:32" pos:end="1408:80">(<argument pos:start="1408:33" pos:end="1408:36"><expr pos:start="1408:33" pos:end="1408:36"><name pos:start="1408:33" pos:end="1408:36">conn</name></expr></argument>, <argument pos:start="1408:39" pos:end="1408:41"><expr pos:start="1408:39" pos:end="1408:41"><literal type="number" pos:start="1408:39" pos:end="1408:41">413</literal></expr></argument>, <argument pos:start="1408:44" pos:end="1408:69"><expr pos:start="1408:44" pos:end="1408:69"><literal type="string" pos:start="1408:44" pos:end="1408:69">"Content-Length too large"</literal></expr></argument>, <argument pos:start="1408:72" pos:end="1408:75"><expr pos:start="1408:72" pos:end="1408:75"><literal type="string" pos:start="1408:72" pos:end="1408:75">"%s"</literal></expr></argument>, <argument pos:start="1408:78" pos:end="1408:79"><expr pos:start="1408:78" pos:end="1408:79"><literal type="string" pos:start="1408:78" pos:end="1408:79">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1409:17" pos:end="1409:33"><expr pos:start="1409:17" pos:end="1409:32"><call pos:start="1409:17" pos:end="1409:32"><name pos:start="1409:17" pos:end="1409:26">log_access</name><argument_list pos:start="1409:27" pos:end="1409:32">(<argument pos:start="1409:28" pos:end="1409:31"><expr pos:start="1409:28" pos:end="1409:31"><name pos:start="1409:28" pos:end="1409:31">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="1410:15" pos:end="1416:13">else if <condition pos:start="1410:23" pos:end="1410:45">(<expr pos:start="1410:24" pos:end="1410:44"><name pos:start="1410:24" pos:end="1410:40"><name pos:start="1410:24" pos:end="1410:27">conn</name><operator pos:start="1410:28" pos:end="1410:29">-&gt;</operator><name pos:start="1410:30" pos:end="1410:40">content_len</name></name> <operator pos:start="1410:42" pos:end="1410:42">&lt;</operator> <literal type="number" pos:start="1410:44" pos:end="1410:44">0</literal></expr>)</condition> <block pos:start="1410:47" pos:end="1416:13">{<block_content pos:start="1411:17" pos:end="1415:33">
                <expr_stmt pos:start="1411:17" pos:end="1411:80"><expr pos:start="1411:17" pos:end="1411:79"><call pos:start="1411:17" pos:end="1411:79"><name pos:start="1411:17" pos:end="1411:28">EST_LOG_WARN</name><argument_list pos:start="1411:29" pos:end="1411:79">(<argument pos:start="1411:30" pos:end="1411:78"><expr pos:start="1411:30" pos:end="1411:78"><literal type="string" pos:start="1411:30" pos:end="1411:78">"HTTP request content length is a negative value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1412:17" pos:end="1414:59"><expr pos:start="1412:17" pos:end="1414:58"><call pos:start="1412:17" pos:end="1414:58"><name pos:start="1412:17" pos:end="1412:31">send_http_error</name><argument_list pos:start="1412:32" pos:end="1414:58">(<argument pos:start="1412:33" pos:end="1412:36"><expr pos:start="1412:33" pos:end="1412:36"><name pos:start="1412:33" pos:end="1412:36">conn</name></expr></argument>, <argument pos:start="1412:39" pos:end="1412:41"><expr pos:start="1412:39" pos:end="1412:41"><literal type="number" pos:start="1412:39" pos:end="1412:41">400</literal></expr></argument>, <argument pos:start="1412:44" pos:end="1412:56"><expr pos:start="1412:44" pos:end="1412:56"><literal type="string" pos:start="1412:44" pos:end="1412:56">"Bad Request"</literal></expr></argument>,
                                <argument pos:start="1413:33" pos:end="1413:60"><expr pos:start="1413:33" pos:end="1413:60"><literal type="string" pos:start="1413:33" pos:end="1413:60">"Content-Length is negative"</literal></expr></argument>,
                                <argument pos:start="1414:33" pos:end="1414:46"><expr pos:start="1414:33" pos:end="1414:46"><name pos:start="1414:33" pos:end="1414:46"><name pos:start="1414:33" pos:end="1414:36">conn</name><operator pos:start="1414:37" pos:end="1414:38">-&gt;</operator><name pos:start="1414:39" pos:end="1414:46">data_len</name></name></expr></argument>, <argument pos:start="1414:49" pos:end="1414:57"><expr pos:start="1414:49" pos:end="1414:57"><name pos:start="1414:49" pos:end="1414:57"><name pos:start="1414:49" pos:end="1414:52">conn</name><operator pos:start="1414:53" pos:end="1414:54">-&gt;</operator><name pos:start="1414:55" pos:end="1414:57">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1415:17" pos:end="1415:33"><expr pos:start="1415:17" pos:end="1415:32"><call pos:start="1415:17" pos:end="1415:32"><name pos:start="1415:17" pos:end="1415:26">log_access</name><argument_list pos:start="1415:27" pos:end="1415:32">(<argument pos:start="1415:28" pos:end="1415:31"><expr pos:start="1415:28" pos:end="1415:31"><name pos:start="1415:28" pos:end="1415:31">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="1416:15" pos:end="1420:13">else <block pos:start="1416:20" pos:end="1420:13">{<block_content pos:start="1417:17" pos:end="1419:33">
                <expr_stmt pos:start="1417:17" pos:end="1417:46"><expr pos:start="1417:17" pos:end="1417:45"><name pos:start="1417:17" pos:end="1417:32"><name pos:start="1417:17" pos:end="1417:20">conn</name><operator pos:start="1417:21" pos:end="1417:22">-&gt;</operator><name pos:start="1417:23" pos:end="1417:32">birth_time</name></name> <operator pos:start="1417:34" pos:end="1417:34">=</operator> <call pos:start="1417:36" pos:end="1417:45"><name pos:start="1417:36" pos:end="1417:39">time</name><argument_list pos:start="1417:40" pos:end="1417:45">(<argument pos:start="1417:41" pos:end="1417:44"><expr pos:start="1417:41" pos:end="1417:44"><name pos:start="1417:41" pos:end="1417:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1418:17" pos:end="1418:37"><expr pos:start="1418:17" pos:end="1418:36"><call pos:start="1418:17" pos:end="1418:36"><name pos:start="1418:17" pos:end="1418:30">handle_request</name><argument_list pos:start="1418:31" pos:end="1418:36">(<argument pos:start="1418:32" pos:end="1418:35"><expr pos:start="1418:32" pos:end="1418:35"><name pos:start="1418:32" pos:end="1418:35">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1419:17" pos:end="1419:33"><expr pos:start="1419:17" pos:end="1419:32"><call pos:start="1419:17" pos:end="1419:32"><name pos:start="1419:17" pos:end="1419:26">log_access</name><argument_list pos:start="1419:27" pos:end="1419:32">(<argument pos:start="1419:28" pos:end="1419:31"><expr pos:start="1419:28" pos:end="1419:31"><name pos:start="1419:28" pos:end="1419:31">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> 
        </block_content>}</block></else></if_stmt>

        <comment type="line" pos:start="1423:9" pos:end="1423:71">// NOTE(lsm): order is important here. should_keep_alive() call</comment>
        <comment type="line" pos:start="1424:9" pos:end="1424:80">// is using parsed request, which will be invalid after memmove's below.</comment>
        <comment type="line" pos:start="1425:9" pos:end="1425:75">// Therefore, memorize should_keep_alive() result now for later use</comment>
        <comment type="line" pos:start="1426:9" pos:end="1426:34">// in loop exit condition.</comment>
        <expr_stmt pos:start="1427:9" pos:end="1427:45"><expr pos:start="1427:9" pos:end="1427:44"><name pos:start="1427:9" pos:end="1427:18">keep_alive</name> <operator pos:start="1427:20" pos:end="1427:20">=</operator> <call pos:start="1427:22" pos:end="1427:44"><name pos:start="1427:22" pos:end="1427:38">should_keep_alive</name><argument_list pos:start="1427:39" pos:end="1427:44">(<argument pos:start="1427:40" pos:end="1427:43"><expr pos:start="1427:40" pos:end="1427:43"><name pos:start="1427:40" pos:end="1427:43">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="1429:9" pos:end="1429:53">// Discard all buffered data for this request</comment>
        <expr_stmt pos:start="1430:9" pos:end="1432:84"><expr pos:start="1430:9" pos:end="1432:83"><name pos:start="1430:9" pos:end="1430:19">discard_len</name> <operator pos:start="1430:21" pos:end="1430:21">=</operator> <ternary pos:start="1430:23" pos:end="1432:83"><condition pos:start="1430:23" pos:end="1431:87"><expr pos:start="1430:23" pos:end="1431:85"><name pos:start="1430:23" pos:end="1430:39"><name pos:start="1430:23" pos:end="1430:26">conn</name><operator pos:start="1430:27" pos:end="1430:28">-&gt;</operator><name pos:start="1430:29" pos:end="1430:39">content_len</name></name> <operator pos:start="1430:41" pos:end="1430:42">&gt;=</operator> <literal type="number" pos:start="1430:44" pos:end="1430:44">0</literal> <operator pos:start="1430:46" pos:end="1430:47">&amp;&amp;</operator>
                      <name pos:start="1431:23" pos:end="1431:39"><name pos:start="1431:23" pos:end="1431:26">conn</name><operator pos:start="1431:27" pos:end="1431:28">-&gt;</operator><name pos:start="1431:29" pos:end="1431:39">request_len</name></name> <operator pos:start="1431:41" pos:end="1431:41">+</operator> <name pos:start="1431:43" pos:end="1431:59"><name pos:start="1431:43" pos:end="1431:46">conn</name><operator pos:start="1431:47" pos:end="1431:48">-&gt;</operator><name pos:start="1431:49" pos:end="1431:59">content_len</name></name> <operator pos:start="1431:61" pos:end="1431:61">&lt;</operator> <operator pos:start="1431:63" pos:end="1431:63">(</operator><name pos:start="1431:64" pos:end="1431:70">int64_t</name><operator pos:start="1431:71" pos:end="1431:71">)</operator><name pos:start="1431:72" pos:end="1431:85"><name pos:start="1431:72" pos:end="1431:75">conn</name><operator pos:start="1431:76" pos:end="1431:77">-&gt;</operator><name pos:start="1431:78" pos:end="1431:85">data_len</name></name></expr> ?</condition><then pos:start="1432:23" pos:end="1432:66">
                      <expr pos:start="1432:23" pos:end="1432:66"><operator pos:start="1432:23" pos:end="1432:23">(</operator><name pos:start="1432:24" pos:end="1432:26">int</name><operator pos:start="1432:27" pos:end="1432:27">)</operator><operator pos:start="1432:28" pos:end="1432:28">(</operator><name pos:start="1432:29" pos:end="1432:45"><name pos:start="1432:29" pos:end="1432:32">conn</name><operator pos:start="1432:33" pos:end="1432:34">-&gt;</operator><name pos:start="1432:35" pos:end="1432:45">request_len</name></name> <operator pos:start="1432:47" pos:end="1432:47">+</operator> <name pos:start="1432:49" pos:end="1432:65"><name pos:start="1432:49" pos:end="1432:52">conn</name><operator pos:start="1432:53" pos:end="1432:54">-&gt;</operator><name pos:start="1432:55" pos:end="1432:65">content_len</name></name><operator pos:start="1432:66" pos:end="1432:66">)</operator></expr> </then><else pos:start="1432:68" pos:end="1432:83">: <expr pos:start="1432:70" pos:end="1432:83"><name pos:start="1432:70" pos:end="1432:83"><name pos:start="1432:70" pos:end="1432:73">conn</name><operator pos:start="1432:74" pos:end="1432:75">-&gt;</operator><name pos:start="1432:76" pos:end="1432:83">data_len</name></name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt pos:start="1433:9" pos:end="1436:9"><if pos:start="1433:9" pos:end="1436:9">if <condition pos:start="1433:12" pos:end="1433:47">(<expr pos:start="1433:13" pos:end="1433:46"><operator pos:start="1433:13" pos:end="1433:13">(</operator><name pos:start="1433:14" pos:end="1433:27"><name pos:start="1433:14" pos:end="1433:17">conn</name><operator pos:start="1433:18" pos:end="1433:19">-&gt;</operator><name pos:start="1433:20" pos:end="1433:27">data_len</name></name> <operator pos:start="1433:29" pos:end="1433:29">-</operator> <name pos:start="1433:31" pos:end="1433:41">discard_len</name><operator pos:start="1433:42" pos:end="1433:42">)</operator> <operator pos:start="1433:44" pos:end="1433:44">&gt;</operator> <literal type="number" pos:start="1433:46" pos:end="1433:46">0</literal></expr>)</condition> <block pos:start="1433:49" pos:end="1436:9">{<block_content pos:start="1434:13" pos:end="1435:77">
	    <expr_stmt pos:start="1434:13" pos:end="1435:77"><expr pos:start="1434:13" pos:end="1435:76"><call pos:start="1434:13" pos:end="1435:76"><name pos:start="1434:13" pos:end="1434:21">memmove_s</name><argument_list pos:start="1434:22" pos:end="1435:76">(<argument pos:start="1434:23" pos:end="1434:31"><expr pos:start="1434:23" pos:end="1434:31"><name pos:start="1434:23" pos:end="1434:31"><name pos:start="1434:23" pos:end="1434:26">conn</name><operator pos:start="1434:27" pos:end="1434:28">-&gt;</operator><name pos:start="1434:29" pos:end="1434:31">buf</name></name></expr></argument>, <argument pos:start="1434:34" pos:end="1434:49"><expr pos:start="1434:34" pos:end="1434:49"><name pos:start="1434:34" pos:end="1434:49">MAX_REQUEST_SIZE</name></expr></argument>,
		      <argument pos:start="1435:23" pos:end="1435:45"><expr pos:start="1435:23" pos:end="1435:45"><name pos:start="1435:23" pos:end="1435:31"><name pos:start="1435:23" pos:end="1435:26">conn</name><operator pos:start="1435:27" pos:end="1435:28">-&gt;</operator><name pos:start="1435:29" pos:end="1435:31">buf</name></name> <operator pos:start="1435:33" pos:end="1435:33">+</operator> <name pos:start="1435:35" pos:end="1435:45">discard_len</name></expr></argument>, <argument pos:start="1435:48" pos:end="1435:75"><expr pos:start="1435:48" pos:end="1435:75"><name pos:start="1435:48" pos:end="1435:61"><name pos:start="1435:48" pos:end="1435:51">conn</name><operator pos:start="1435:52" pos:end="1435:53">-&gt;</operator><name pos:start="1435:54" pos:end="1435:61">data_len</name></name> <operator pos:start="1435:63" pos:end="1435:63">-</operator> <name pos:start="1435:65" pos:end="1435:75">discard_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1437:9" pos:end="1437:38"><expr pos:start="1437:9" pos:end="1437:37"><name pos:start="1437:9" pos:end="1437:22"><name pos:start="1437:9" pos:end="1437:12">conn</name><operator pos:start="1437:13" pos:end="1437:14">-&gt;</operator><name pos:start="1437:15" pos:end="1437:22">data_len</name></name> <operator pos:start="1437:24" pos:end="1437:25">-=</operator> <name pos:start="1437:27" pos:end="1437:37">discard_len</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1438:9" pos:end="1438:36"><expr pos:start="1438:9" pos:end="1438:35"><call pos:start="1438:9" pos:end="1438:35"><name pos:start="1438:9" pos:end="1438:14">assert</name><argument_list pos:start="1438:15" pos:end="1438:35">(<argument pos:start="1438:16" pos:end="1438:34"><expr pos:start="1438:16" pos:end="1438:34"><name pos:start="1438:16" pos:end="1438:29"><name pos:start="1438:16" pos:end="1438:19">conn</name><operator pos:start="1438:20" pos:end="1438:21">-&gt;</operator><name pos:start="1438:22" pos:end="1438:29">data_len</name></name> <operator pos:start="1438:31" pos:end="1438:32">&gt;=</operator> <literal type="number" pos:start="1438:34" pos:end="1438:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1439:9" pos:end="1439:49"><expr pos:start="1439:9" pos:end="1439:48"><call pos:start="1439:9" pos:end="1439:48"><name pos:start="1439:9" pos:end="1439:14">assert</name><argument_list pos:start="1439:15" pos:end="1439:48">(<argument pos:start="1439:16" pos:end="1439:47"><expr pos:start="1439:16" pos:end="1439:47"><name pos:start="1439:16" pos:end="1439:29"><name pos:start="1439:16" pos:end="1439:19">conn</name><operator pos:start="1439:20" pos:end="1439:21">-&gt;</operator><name pos:start="1439:22" pos:end="1439:29">data_len</name></name> <operator pos:start="1439:31" pos:end="1439:32">&lt;=</operator> <name pos:start="1439:34" pos:end="1439:47"><name pos:start="1439:34" pos:end="1439:37">conn</name><operator pos:start="1439:38" pos:end="1439:39">-&gt;</operator><name pos:start="1439:40" pos:end="1439:47">buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="1441:13" pos:end="1444:24">(<expr pos:start="1441:14" pos:end="1444:23"><name pos:start="1441:14" pos:end="1441:33"><name pos:start="1441:14" pos:end="1441:17">conn</name><operator pos:start="1441:18" pos:end="1441:19">-&gt;</operator><name pos:start="1441:20" pos:end="1441:22">ctx</name><operator pos:start="1441:23" pos:end="1441:24">-&gt;</operator><name pos:start="1441:25" pos:end="1441:33">stop_flag</name></name> <operator pos:start="1441:35" pos:end="1441:36">==</operator> <literal type="number" pos:start="1441:38" pos:end="1441:38">0</literal> <operator pos:start="1441:40" pos:end="1441:41">&amp;&amp;</operator>
             <name pos:start="1442:14" pos:end="1442:31">keep_alive_enabled</name> <operator pos:start="1442:33" pos:end="1442:34">&amp;&amp;</operator>
             <name pos:start="1443:14" pos:end="1443:30"><name pos:start="1443:14" pos:end="1443:17">conn</name><operator pos:start="1443:18" pos:end="1443:19">-&gt;</operator><name pos:start="1443:20" pos:end="1443:30">content_len</name></name> <operator pos:start="1443:32" pos:end="1443:33">&gt;=</operator> <literal type="number" pos:start="1443:35" pos:end="1443:35">0</literal> <operator pos:start="1443:37" pos:end="1443:38">&amp;&amp;</operator>
             <name pos:start="1444:14" pos:end="1444:23">keep_alive</name></expr>)</condition>;</do>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1446:1" pos:end="1469:2">/*! @brief est_server_handle_request() is used by an application 
    to process an EST request.  The application is responsible
    for opening a listener socket.  When an EST request comes in
    on the socket, the application uses this function to hand-off
    the request to libEST.

    @param ctx Pointer to the EST_CTX, which was provided
               when est_server_init()  or est_proxy_init() was invoked.
    @param fd File descriptor that will be read to retrieve the
              HTTP request from the client.  This is typically
	      a TCP socket file descriptor.

    est_server_handle_request() is used by an application 
    when an incoming EST request needs to be processed.  This request
    would be a cacerts, simpleenroll, reenroll, or csrattrs request. 
    This is used when implementing an EST server.  The application 
    is responsible for opening and listening to a TCP socket for
    incoming EST requests.  When data is ready to be read from
    the socket, this API entry point should be used to allow libEST
    to read the request from the socket and respond to the request.
 

    @return EST_ERROR.
*/</comment>
<function pos:start="1470:1" pos:end="1596:1"><type pos:start="1470:1" pos:end="1470:9"><name pos:start="1470:1" pos:end="1470:9">EST_ERROR</name></type> <name pos:start="1470:11" pos:end="1470:35">est_server_handle_request</name> <parameter_list pos:start="1470:37" pos:end="1470:58">(<parameter pos:start="1470:38" pos:end="1470:49"><decl pos:start="1470:38" pos:end="1470:49"><type pos:start="1470:38" pos:end="1470:49"><name pos:start="1470:38" pos:end="1470:44">EST_CTX</name> <modifier pos:start="1470:46" pos:end="1470:46">*</modifier></type><name pos:start="1470:47" pos:end="1470:49">ctx</name></decl></parameter>, <parameter pos:start="1470:52" pos:end="1470:57"><decl pos:start="1470:52" pos:end="1470:57"><type pos:start="1470:52" pos:end="1470:57"><name pos:start="1470:52" pos:end="1470:54">int</name></type> <name pos:start="1470:56" pos:end="1470:57">fd</name></decl></parameter>)</parameter_list>
<block pos:start="1471:1" pos:end="1596:1">{<block_content pos:start="1472:5" pos:end="1595:16">
    <decl_stmt pos:start="1472:5" pos:end="1472:31"><decl pos:start="1472:5" pos:end="1472:30"><type pos:start="1472:5" pos:end="1472:26"><name pos:start="1472:5" pos:end="1472:24"><name pos:start="1472:5" pos:end="1472:10">struct</name> <name pos:start="1472:12" pos:end="1472:24">mg_connection</name></name> <modifier pos:start="1472:26" pos:end="1472:26">*</modifier></type><name pos:start="1472:27" pos:end="1472:30">conn</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1473:5" pos:end="1473:27"><decl pos:start="1473:5" pos:end="1473:26"><type pos:start="1473:5" pos:end="1473:17"><name pos:start="1473:5" pos:end="1473:17"><name pos:start="1473:5" pos:end="1473:10">struct</name> <name pos:start="1473:12" pos:end="1473:17">socket</name></name></type> <name pos:start="1473:19" pos:end="1473:26">accepted</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1474:5" pos:end="1474:18"><decl pos:start="1474:5" pos:end="1474:17"><type pos:start="1474:5" pos:end="1474:13"><name pos:start="1474:5" pos:end="1474:13">socklen_t</name></type> <name pos:start="1474:15" pos:end="1474:17">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1475:5" pos:end="1475:33"><decl pos:start="1475:5" pos:end="1475:32"><type pos:start="1475:5" pos:end="1475:8"><name pos:start="1475:5" pos:end="1475:8">char</name></type> <name pos:start="1475:10" pos:end="1475:32"><name pos:start="1475:10" pos:end="1475:14">ipstr</name><index pos:start="1475:15" pos:end="1475:32">[<expr pos:start="1475:16" pos:end="1475:31"><name pos:start="1475:16" pos:end="1475:31">INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1476:5" pos:end="1476:13"><decl pos:start="1476:5" pos:end="1476:12"><type pos:start="1476:5" pos:end="1476:7"><name pos:start="1476:5" pos:end="1476:7">int</name></type> <name pos:start="1476:9" pos:end="1476:12">port</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1477:5" pos:end="1477:33"><decl pos:start="1477:5" pos:end="1477:32"><type pos:start="1477:5" pos:end="1477:27"><name pos:start="1477:5" pos:end="1477:27"><name pos:start="1477:5" pos:end="1477:10">struct</name> <name pos:start="1477:12" pos:end="1477:27">sockaddr_storage</name></name></type> <name pos:start="1477:29" pos:end="1477:32">addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1478:5" pos:end="1478:26"><decl pos:start="1478:5" pos:end="1478:15"><type pos:start="1478:5" pos:end="1478:7"><name pos:start="1478:5" pos:end="1478:7">int</name></type> <name pos:start="1478:9" pos:end="1478:15">ssl_err</name></decl>, <decl pos:start="1478:18" pos:end="1478:25"><type ref="prev" pos:start="1478:5" pos:end="1478:7"/><name pos:start="1478:18" pos:end="1478:25">err_code</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1479:5" pos:end="1479:32"><decl pos:start="1479:5" pos:end="1479:31"><type pos:start="1479:5" pos:end="1479:13"><name pos:start="1479:5" pos:end="1479:13">EST_ERROR</name></type> <name pos:start="1479:15" pos:end="1479:16">rv</name> <init pos:start="1479:18" pos:end="1479:31">= <expr pos:start="1479:20" pos:end="1479:31"><name pos:start="1479:20" pos:end="1479:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1480:5" pos:end="1480:11"><decl pos:start="1480:5" pos:end="1480:10"><type pos:start="1480:5" pos:end="1480:7"><name pos:start="1480:5" pos:end="1480:7">int</name></type> <name pos:start="1480:9" pos:end="1480:10">rc</name></decl>;</decl_stmt>

    <if_stmt pos:start="1482:5" pos:end="1485:5"><if pos:start="1482:5" pos:end="1485:5">if <condition pos:start="1482:8" pos:end="1482:13">(<expr pos:start="1482:9" pos:end="1482:12"><operator pos:start="1482:9" pos:end="1482:9">!</operator><name pos:start="1482:10" pos:end="1482:12">ctx</name></expr>)</condition> <block pos:start="1482:15" pos:end="1485:5">{<block_content pos:start="1483:9" pos:end="1484:32">
        <expr_stmt pos:start="1483:9" pos:end="1483:40"><expr pos:start="1483:9" pos:end="1483:39"><call pos:start="1483:9" pos:end="1483:39"><name pos:start="1483:9" pos:end="1483:19">EST_LOG_ERR</name><argument_list pos:start="1483:20" pos:end="1483:39">(<argument pos:start="1483:21" pos:end="1483:38"><expr pos:start="1483:21" pos:end="1483:38"><literal type="string" pos:start="1483:21" pos:end="1483:38">"Null EST context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1484:9" pos:end="1484:32">return <expr pos:start="1484:16" pos:end="1484:31"><operator pos:start="1484:16" pos:end="1484:16">(</operator><name pos:start="1484:17" pos:end="1484:30">EST_ERR_NO_CTX</name><operator pos:start="1484:31" pos:end="1484:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1486:5" pos:end="1489:5"><if pos:start="1486:5" pos:end="1489:5">if <condition pos:start="1486:8" pos:end="1486:21">(<expr pos:start="1486:9" pos:end="1486:20"><operator pos:start="1486:9" pos:end="1486:9">!</operator><name pos:start="1486:10" pos:end="1486:20"><name pos:start="1486:10" pos:end="1486:12">ctx</name><operator pos:start="1486:13" pos:end="1486:14">-&gt;</operator><name pos:start="1486:15" pos:end="1486:20">mg_ctx</name></name></expr>)</condition> <block pos:start="1486:23" pos:end="1489:5">{<block_content pos:start="1487:9" pos:end="1488:32">
        <expr_stmt pos:start="1487:9" pos:end="1487:43"><expr pos:start="1487:9" pos:end="1487:42"><call pos:start="1487:9" pos:end="1487:42"><name pos:start="1487:9" pos:end="1487:19">EST_LOG_ERR</name><argument_list pos:start="1487:20" pos:end="1487:42">(<argument pos:start="1487:21" pos:end="1487:41"><expr pos:start="1487:21" pos:end="1487:41"><literal type="string" pos:start="1487:21" pos:end="1487:41">"Null EST MG context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1488:9" pos:end="1488:32">return <expr pos:start="1488:16" pos:end="1488:31"><operator pos:start="1488:16" pos:end="1488:16">(</operator><name pos:start="1488:17" pos:end="1488:30">EST_ERR_NO_CTX</name><operator pos:start="1488:31" pos:end="1488:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1491:5" pos:end="1491:23"><expr pos:start="1491:5" pos:end="1491:22"><name pos:start="1491:5" pos:end="1491:17"><name pos:start="1491:5" pos:end="1491:12">accepted</name><operator pos:start="1491:13" pos:end="1491:13">.</operator><name pos:start="1491:14" pos:end="1491:17">sock</name></name> <operator pos:start="1491:19" pos:end="1491:19">=</operator> <name pos:start="1491:21" pos:end="1491:22">fd</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1492:5" pos:end="1492:25"><expr pos:start="1492:5" pos:end="1492:24"><name pos:start="1492:5" pos:end="1492:17"><name pos:start="1492:5" pos:end="1492:12">accepted</name><operator pos:start="1492:13" pos:end="1492:13">.</operator><name pos:start="1492:14" pos:end="1492:17">next</name></name> <operator pos:start="1492:19" pos:end="1492:19">=</operator> <name pos:start="1492:21" pos:end="1492:24">NULL</name></expr>;</expr_stmt>
    
    <expr_stmt pos:start="1494:5" pos:end="1494:42"><expr pos:start="1494:5" pos:end="1494:41"><name pos:start="1494:5" pos:end="1494:7">len</name> <operator pos:start="1494:9" pos:end="1494:9">=</operator> <sizeof pos:start="1494:11" pos:end="1494:41">sizeof<argument_list pos:start="1494:17" pos:end="1494:41">(<argument pos:start="1494:18" pos:end="1494:40"><expr pos:start="1494:18" pos:end="1494:40">struct <name pos:start="1494:25" pos:end="1494:40">sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="1495:5" pos:end="1495:56"><expr pos:start="1495:5" pos:end="1495:55"><name pos:start="1495:5" pos:end="1495:6">rc</name> <operator pos:start="1495:8" pos:end="1495:8">=</operator> <call pos:start="1495:10" pos:end="1495:55"><name pos:start="1495:10" pos:end="1495:20">getpeername</name><argument_list pos:start="1495:21" pos:end="1495:55">(<argument pos:start="1495:22" pos:end="1495:23"><expr pos:start="1495:22" pos:end="1495:23"><name pos:start="1495:22" pos:end="1495:23">fd</name></expr></argument>, <argument pos:start="1495:26" pos:end="1495:48"><expr pos:start="1495:26" pos:end="1495:48"><operator pos:start="1495:26" pos:end="1495:26">(</operator>struct <name pos:start="1495:34" pos:end="1495:41">sockaddr</name><operator pos:start="1495:42" pos:end="1495:42">*</operator><operator pos:start="1495:43" pos:end="1495:43">)</operator><operator pos:start="1495:44" pos:end="1495:44">&amp;</operator><name pos:start="1495:45" pos:end="1495:48">addr</name></expr></argument>, <argument pos:start="1495:51" pos:end="1495:54"><expr pos:start="1495:51" pos:end="1495:54"><operator pos:start="1495:51" pos:end="1495:51">&amp;</operator><name pos:start="1495:52" pos:end="1495:54">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1496:5" pos:end="1500:5"><if pos:start="1496:5" pos:end="1500:5">if <condition pos:start="1496:8" pos:end="1496:15">(<expr pos:start="1496:9" pos:end="1496:14"><name pos:start="1496:9" pos:end="1496:10">rc</name> <operator pos:start="1496:12" pos:end="1496:12">&lt;</operator> <literal type="number" pos:start="1496:14" pos:end="1496:14">0</literal></expr>)</condition> <block pos:start="1496:17" pos:end="1500:5">{<block_content pos:start="1497:9" pos:end="1499:33">
	<expr_stmt pos:start="1497:9" pos:end="1497:44"><expr pos:start="1497:9" pos:end="1497:43"><call pos:start="1497:9" pos:end="1497:43"><name pos:start="1497:9" pos:end="1497:19">EST_LOG_ERR</name><argument_list pos:start="1497:20" pos:end="1497:43">(<argument pos:start="1497:21" pos:end="1497:42"><expr pos:start="1497:21" pos:end="1497:42"><literal type="string" pos:start="1497:21" pos:end="1497:42">"getpeername() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" pos:start="1498:9" pos:end="1498:70">/* This should never happen, not sure what would cause this */</comment>
	<return pos:start="1499:9" pos:end="1499:33">return <expr pos:start="1499:16" pos:end="1499:32"><operator pos:start="1499:16" pos:end="1499:16">(</operator><name pos:start="1499:17" pos:end="1499:31">EST_ERR_UNKNOWN</name><operator pos:start="1499:32" pos:end="1499:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line" pos:start="1501:5" pos:end="1501:36">// deal with both IPv4 and IPv6:</comment>
    <if_stmt pos:start="1502:5" pos:end="1512:5"><if pos:start="1502:5" pos:end="1507:5">if <condition pos:start="1502:8" pos:end="1502:34">(<expr pos:start="1502:9" pos:end="1502:33"><name pos:start="1502:9" pos:end="1502:22"><name pos:start="1502:9" pos:end="1502:12">addr</name><operator pos:start="1502:13" pos:end="1502:13">.</operator><name pos:start="1502:14" pos:end="1502:22">ss_family</name></name> <operator pos:start="1502:24" pos:end="1502:25">==</operator> <name pos:start="1502:27" pos:end="1502:33">AF_INET</name></expr>)</condition> <block pos:start="1502:36" pos:end="1507:5">{<block_content pos:start="1503:9" pos:end="1506:76">
        <expr_stmt pos:start="1503:9" pos:end="1504:52"><expr pos:start="1503:9" pos:end="1504:51"><call pos:start="1503:9" pos:end="1504:51"><name pos:start="1503:9" pos:end="1503:16">memcpy_s</name><argument_list pos:start="1503:17" pos:end="1504:51">(<argument pos:start="1503:18" pos:end="1503:34"><expr pos:start="1503:18" pos:end="1503:34"><operator pos:start="1503:18" pos:end="1503:18">&amp;</operator><name pos:start="1503:19" pos:end="1503:34"><name pos:start="1503:19" pos:end="1503:26">accepted</name><operator pos:start="1503:27" pos:end="1503:27">.</operator><name pos:start="1503:28" pos:end="1503:30">rsa</name><operator pos:start="1503:31" pos:end="1503:31">.</operator><name pos:start="1503:32" pos:end="1503:34">sin</name></name></expr></argument>, <argument pos:start="1503:37" pos:end="1503:62"><expr pos:start="1503:37" pos:end="1503:62"><sizeof pos:start="1503:37" pos:end="1503:62">sizeof<argument_list pos:start="1503:43" pos:end="1503:62">(<argument pos:start="1503:44" pos:end="1503:61"><expr pos:start="1503:44" pos:end="1503:61">struct <name pos:start="1503:51" pos:end="1503:61">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		 <argument pos:start="1504:18" pos:end="1504:22"><expr pos:start="1504:18" pos:end="1504:22"><operator pos:start="1504:18" pos:end="1504:18">&amp;</operator><name pos:start="1504:19" pos:end="1504:22">addr</name></expr></argument>, <argument pos:start="1504:25" pos:end="1504:50"><expr pos:start="1504:25" pos:end="1504:50"><sizeof pos:start="1504:25" pos:end="1504:50">sizeof<argument_list pos:start="1504:31" pos:end="1504:50">(<argument pos:start="1504:32" pos:end="1504:49"><expr pos:start="1504:32" pos:end="1504:49">struct <name pos:start="1504:39" pos:end="1504:49">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1505:9" pos:end="1505:48"><expr pos:start="1505:9" pos:end="1505:47"><name pos:start="1505:9" pos:end="1505:12">port</name> <operator pos:start="1505:14" pos:end="1505:14">=</operator> <call pos:start="1505:16" pos:end="1505:47"><name pos:start="1505:16" pos:end="1505:20">ntohs</name><argument_list pos:start="1505:21" pos:end="1505:47">(<argument pos:start="1505:22" pos:end="1505:46"><expr pos:start="1505:22" pos:end="1505:46"><name pos:start="1505:22" pos:end="1505:46"><name pos:start="1505:22" pos:end="1505:29">accepted</name><operator pos:start="1505:30" pos:end="1505:30">.</operator><name pos:start="1505:31" pos:end="1505:33">rsa</name><operator pos:start="1505:34" pos:end="1505:34">.</operator><name pos:start="1505:35" pos:end="1505:37">sin</name><operator pos:start="1505:38" pos:end="1505:38">.</operator><name pos:start="1505:39" pos:end="1505:46">sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1506:9" pos:end="1506:76"><expr pos:start="1506:9" pos:end="1506:75"><call pos:start="1506:9" pos:end="1506:75"><name pos:start="1506:9" pos:end="1506:17">inet_ntop</name><argument_list pos:start="1506:18" pos:end="1506:75">(<argument pos:start="1506:19" pos:end="1506:25"><expr pos:start="1506:19" pos:end="1506:25"><name pos:start="1506:19" pos:end="1506:25">AF_INET</name></expr></argument>, <argument pos:start="1506:28" pos:end="1506:53"><expr pos:start="1506:28" pos:end="1506:53"><operator pos:start="1506:28" pos:end="1506:28">&amp;</operator><name pos:start="1506:29" pos:end="1506:53"><name pos:start="1506:29" pos:end="1506:36">accepted</name><operator pos:start="1506:37" pos:end="1506:37">.</operator><name pos:start="1506:38" pos:end="1506:40">rsa</name><operator pos:start="1506:41" pos:end="1506:41">.</operator><name pos:start="1506:42" pos:end="1506:44">sin</name><operator pos:start="1506:45" pos:end="1506:45">.</operator><name pos:start="1506:46" pos:end="1506:53">sin_addr</name></name></expr></argument>, <argument pos:start="1506:56" pos:end="1506:60"><expr pos:start="1506:56" pos:end="1506:60"><name pos:start="1506:56" pos:end="1506:60">ipstr</name></expr></argument>, <argument pos:start="1506:63" pos:end="1506:74"><expr pos:start="1506:63" pos:end="1506:74"><sizeof pos:start="1506:63" pos:end="1506:74">sizeof <name pos:start="1506:70" pos:end="1506:74">ipstr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1507:7" pos:end="1512:5">else <block pos:start="1507:12" pos:end="1512:5">{<block_content pos:start="1508:9" pos:end="1511:79"> <comment type="line" pos:start="1507:14" pos:end="1507:24">// AF_INET6</comment>
        <expr_stmt pos:start="1508:9" pos:end="1509:53"><expr pos:start="1508:9" pos:end="1509:52"><call pos:start="1508:9" pos:end="1509:52"><name pos:start="1508:9" pos:end="1508:16">memcpy_s</name><argument_list pos:start="1508:17" pos:end="1509:52">(<argument pos:start="1508:18" pos:end="1508:35"><expr pos:start="1508:18" pos:end="1508:35"><operator pos:start="1508:18" pos:end="1508:18">&amp;</operator><name pos:start="1508:19" pos:end="1508:35"><name pos:start="1508:19" pos:end="1508:26">accepted</name><operator pos:start="1508:27" pos:end="1508:27">.</operator><name pos:start="1508:28" pos:end="1508:30">rsa</name><operator pos:start="1508:31" pos:end="1508:31">.</operator><name pos:start="1508:32" pos:end="1508:35">sin6</name></name></expr></argument>, <argument pos:start="1508:38" pos:end="1508:64"><expr pos:start="1508:38" pos:end="1508:64"><sizeof pos:start="1508:38" pos:end="1508:64">sizeof<argument_list pos:start="1508:44" pos:end="1508:64">(<argument pos:start="1508:45" pos:end="1508:63"><expr pos:start="1508:45" pos:end="1508:63">struct <name pos:start="1508:52" pos:end="1508:63">sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		 <argument pos:start="1509:18" pos:end="1509:22"><expr pos:start="1509:18" pos:end="1509:22"><operator pos:start="1509:18" pos:end="1509:18">&amp;</operator><name pos:start="1509:19" pos:end="1509:22">addr</name></expr></argument>, <argument pos:start="1509:25" pos:end="1509:51"><expr pos:start="1509:25" pos:end="1509:51"><sizeof pos:start="1509:25" pos:end="1509:51">sizeof<argument_list pos:start="1509:31" pos:end="1509:51">(<argument pos:start="1509:32" pos:end="1509:50"><expr pos:start="1509:32" pos:end="1509:50">struct <name pos:start="1509:39" pos:end="1509:50">sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1510:9" pos:end="1510:50"><expr pos:start="1510:9" pos:end="1510:49"><name pos:start="1510:9" pos:end="1510:12">port</name> <operator pos:start="1510:14" pos:end="1510:14">=</operator> <call pos:start="1510:16" pos:end="1510:49"><name pos:start="1510:16" pos:end="1510:20">ntohs</name><argument_list pos:start="1510:21" pos:end="1510:49">(<argument pos:start="1510:22" pos:end="1510:48"><expr pos:start="1510:22" pos:end="1510:48"><name pos:start="1510:22" pos:end="1510:48"><name pos:start="1510:22" pos:end="1510:29">accepted</name><operator pos:start="1510:30" pos:end="1510:30">.</operator><name pos:start="1510:31" pos:end="1510:33">rsa</name><operator pos:start="1510:34" pos:end="1510:34">.</operator><name pos:start="1510:35" pos:end="1510:38">sin6</name><operator pos:start="1510:39" pos:end="1510:39">.</operator><name pos:start="1510:40" pos:end="1510:48">sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1511:9" pos:end="1511:79"><expr pos:start="1511:9" pos:end="1511:78"><call pos:start="1511:9" pos:end="1511:78"><name pos:start="1511:9" pos:end="1511:17">inet_ntop</name><argument_list pos:start="1511:18" pos:end="1511:78">(<argument pos:start="1511:19" pos:end="1511:26"><expr pos:start="1511:19" pos:end="1511:26"><name pos:start="1511:19" pos:end="1511:26">AF_INET6</name></expr></argument>, <argument pos:start="1511:29" pos:end="1511:56"><expr pos:start="1511:29" pos:end="1511:56"><operator pos:start="1511:29" pos:end="1511:29">&amp;</operator><name pos:start="1511:30" pos:end="1511:56"><name pos:start="1511:30" pos:end="1511:37">accepted</name><operator pos:start="1511:38" pos:end="1511:38">.</operator><name pos:start="1511:39" pos:end="1511:41">rsa</name><operator pos:start="1511:42" pos:end="1511:42">.</operator><name pos:start="1511:43" pos:end="1511:46">sin6</name><operator pos:start="1511:47" pos:end="1511:47">.</operator><name pos:start="1511:48" pos:end="1511:56">sin6_addr</name></name></expr></argument>, <argument pos:start="1511:59" pos:end="1511:63"><expr pos:start="1511:59" pos:end="1511:63"><name pos:start="1511:59" pos:end="1511:63">ipstr</name></expr></argument>, <argument pos:start="1511:66" pos:end="1511:77"><expr pos:start="1511:66" pos:end="1511:77"><sizeof pos:start="1511:66" pos:end="1511:77">sizeof <name pos:start="1511:73" pos:end="1511:77">ipstr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="1513:5" pos:end="1513:47"><expr pos:start="1513:5" pos:end="1513:46"><call pos:start="1513:5" pos:end="1513:46"><name pos:start="1513:5" pos:end="1513:16">EST_LOG_INFO</name><argument_list pos:start="1513:17" pos:end="1513:46">(<argument pos:start="1513:18" pos:end="1513:38"><expr pos:start="1513:18" pos:end="1513:38"><literal type="string" pos:start="1513:18" pos:end="1513:38">"Peer IP address: %s"</literal></expr></argument>, <argument pos:start="1513:41" pos:end="1513:45"><expr pos:start="1513:41" pos:end="1513:45"><name pos:start="1513:41" pos:end="1513:45">ipstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1514:5" pos:end="1514:46"><expr pos:start="1514:5" pos:end="1514:45"><call pos:start="1514:5" pos:end="1514:45"><name pos:start="1514:5" pos:end="1514:16">EST_LOG_INFO</name><argument_list pos:start="1514:17" pos:end="1514:45">(<argument pos:start="1514:18" pos:end="1514:38"><expr pos:start="1514:18" pos:end="1514:38"><literal type="string" pos:start="1514:18" pos:end="1514:38">"Peer port      : %d"</literal></expr></argument>, <argument pos:start="1514:41" pos:end="1514:44"><expr pos:start="1514:41" pos:end="1514:44"><name pos:start="1514:41" pos:end="1514:44">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1516:5" pos:end="1516:78"><expr pos:start="1516:5" pos:end="1516:77"><name pos:start="1516:5" pos:end="1516:8">conn</name> <operator pos:start="1516:10" pos:end="1516:10">=</operator> <operator pos:start="1516:12" pos:end="1516:12">(</operator>struct <name pos:start="1516:20" pos:end="1516:32">mg_connection</name><operator pos:start="1516:33" pos:end="1516:33">*</operator><operator pos:start="1516:34" pos:end="1516:34">)</operator><call pos:start="1516:35" pos:end="1516:77"><name pos:start="1516:35" pos:end="1516:40">calloc</name><argument_list pos:start="1516:41" pos:end="1516:77">(<argument pos:start="1516:42" pos:end="1516:42"><expr pos:start="1516:42" pos:end="1516:42"><literal type="number" pos:start="1516:42" pos:end="1516:42">1</literal></expr></argument>, <argument pos:start="1516:45" pos:end="1516:76"><expr pos:start="1516:45" pos:end="1516:76"><sizeof pos:start="1516:45" pos:end="1516:57">sizeof<argument_list pos:start="1516:51" pos:end="1516:57">(<argument pos:start="1516:52" pos:end="1516:56"><expr pos:start="1516:52" pos:end="1516:56"><operator pos:start="1516:52" pos:end="1516:52">*</operator><name pos:start="1516:53" pos:end="1516:56">conn</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1516:59" pos:end="1516:59">+</operator> <name pos:start="1516:61" pos:end="1516:76">MAX_REQUEST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1517:5" pos:end="1594:5"><if pos:start="1517:5" pos:end="1520:5">if <condition pos:start="1517:8" pos:end="1517:21">(<expr pos:start="1517:9" pos:end="1517:20"><name pos:start="1517:9" pos:end="1517:12">conn</name> <operator pos:start="1517:14" pos:end="1517:15">==</operator> <name pos:start="1517:17" pos:end="1517:20">NULL</name></expr>)</condition> <block pos:start="1517:23" pos:end="1520:5">{<block_content pos:start="1518:9" pos:end="1519:32">
        <expr_stmt pos:start="1518:9" pos:end="1518:79"><expr pos:start="1518:9" pos:end="1518:78"><call pos:start="1518:9" pos:end="1518:78"><name pos:start="1518:9" pos:end="1518:11">cry</name><argument_list pos:start="1518:12" pos:end="1518:78">(<argument pos:start="1518:13" pos:end="1518:27"><expr pos:start="1518:13" pos:end="1518:27"><call pos:start="1518:13" pos:end="1518:27"><name pos:start="1518:13" pos:end="1518:14">fc</name><argument_list pos:start="1518:15" pos:end="1518:27">(<argument pos:start="1518:16" pos:end="1518:26"><expr pos:start="1518:16" pos:end="1518:26"><name pos:start="1518:16" pos:end="1518:26"><name pos:start="1518:16" pos:end="1518:18">ctx</name><operator pos:start="1518:19" pos:end="1518:20">-&gt;</operator><name pos:start="1518:21" pos:end="1518:26">mg_ctx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1518:30" pos:end="1518:33"><expr pos:start="1518:30" pos:end="1518:33"><literal type="string" pos:start="1518:30" pos:end="1518:33">"%s"</literal></expr></argument>, <argument pos:start="1518:36" pos:end="1518:77"><expr pos:start="1518:36" pos:end="1518:77"><literal type="string" pos:start="1518:36" pos:end="1518:77">"Cannot create new connection struct, OOM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1519:9" pos:end="1519:32">return <expr pos:start="1519:16" pos:end="1519:31"><operator pos:start="1519:16" pos:end="1519:16">(</operator><name pos:start="1519:17" pos:end="1519:30">EST_ERR_MALLOC</name><operator pos:start="1519:31" pos:end="1519:31">)</operator></expr>;</return>
    </block_content>}</block></if> <else pos:start="1520:7" pos:end="1594:5">else <block pos:start="1520:12" pos:end="1594:5">{<block_content pos:start="1521:9" pos:end="1593:19">
        <expr_stmt pos:start="1521:9" pos:end="1521:42"><expr pos:start="1521:9" pos:end="1521:41"><name pos:start="1521:9" pos:end="1521:22"><name pos:start="1521:9" pos:end="1521:12">conn</name><operator pos:start="1521:13" pos:end="1521:14">-&gt;</operator><name pos:start="1521:15" pos:end="1521:22">buf_size</name></name> <operator pos:start="1521:24" pos:end="1521:24">=</operator> <name pos:start="1521:26" pos:end="1521:41">MAX_REQUEST_SIZE</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1522:9" pos:end="1522:38"><expr pos:start="1522:9" pos:end="1522:37"><name pos:start="1522:9" pos:end="1522:17"><name pos:start="1522:9" pos:end="1522:12">conn</name><operator pos:start="1522:13" pos:end="1522:14">-&gt;</operator><name pos:start="1522:15" pos:end="1522:17">buf</name></name> <operator pos:start="1522:19" pos:end="1522:19">=</operator> <operator pos:start="1522:21" pos:end="1522:21">(</operator><name pos:start="1522:22" pos:end="1522:25">char</name><operator pos:start="1522:26" pos:end="1522:26">*</operator><operator pos:start="1522:27" pos:end="1522:27">)</operator><operator pos:start="1522:28" pos:end="1522:28">(</operator><name pos:start="1522:29" pos:end="1522:32">conn</name> <operator pos:start="1522:34" pos:end="1522:34">+</operator> <literal type="number" pos:start="1522:36" pos:end="1522:36">1</literal><operator pos:start="1522:37" pos:end="1522:37">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1524:9" pos:end="1524:32"><expr pos:start="1524:9" pos:end="1524:31"><name pos:start="1524:9" pos:end="1524:20"><name pos:start="1524:9" pos:end="1524:12">conn</name><operator pos:start="1524:13" pos:end="1524:14">-&gt;</operator><name pos:start="1524:15" pos:end="1524:20">client</name></name> <operator pos:start="1524:22" pos:end="1524:22">=</operator> <name pos:start="1524:24" pos:end="1524:31">accepted</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1525:9" pos:end="1525:38"><expr pos:start="1525:9" pos:end="1525:37"><name pos:start="1525:9" pos:end="1525:24"><name pos:start="1525:9" pos:end="1525:12">conn</name><operator pos:start="1525:13" pos:end="1525:14">-&gt;</operator><name pos:start="1525:15" pos:end="1525:24">birth_time</name></name> <operator pos:start="1525:26" pos:end="1525:26">=</operator> <call pos:start="1525:28" pos:end="1525:37"><name pos:start="1525:28" pos:end="1525:31">time</name><argument_list pos:start="1525:32" pos:end="1525:37">(<argument pos:start="1525:33" pos:end="1525:36"><expr pos:start="1525:33" pos:end="1525:36"><name pos:start="1525:33" pos:end="1525:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1526:9" pos:end="1526:32"><expr pos:start="1526:9" pos:end="1526:31"><name pos:start="1526:9" pos:end="1526:17"><name pos:start="1526:9" pos:end="1526:12">conn</name><operator pos:start="1526:13" pos:end="1526:14">-&gt;</operator><name pos:start="1526:15" pos:end="1526:17">ctx</name></name> <operator pos:start="1526:19" pos:end="1526:19">=</operator> <name pos:start="1526:21" pos:end="1526:31"><name pos:start="1526:21" pos:end="1526:23">ctx</name><operator pos:start="1526:24" pos:end="1526:25">-&gt;</operator><name pos:start="1526:26" pos:end="1526:31">mg_ctx</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1527:9" pos:end="1527:54"><expr pos:start="1527:9" pos:end="1527:53"><name pos:start="1527:9" pos:end="1527:26"><name pos:start="1527:9" pos:end="1527:12">conn</name><operator pos:start="1527:13" pos:end="1527:14">-&gt;</operator><name pos:start="1527:15" pos:end="1527:26">read_timeout</name></name> <operator pos:start="1527:28" pos:end="1527:28">=</operator> <name pos:start="1527:30" pos:end="1527:53"><name pos:start="1527:30" pos:end="1527:32">ctx</name><operator pos:start="1527:33" pos:end="1527:34">-&gt;</operator><name pos:start="1527:35" pos:end="1527:53">server_read_timeout</name></name></expr>;</expr_stmt>

        <comment type="line" pos:start="1529:9" pos:end="1529:72">// Fill in IP, port info early so even if SSL setup below fails,</comment>
        <comment type="line" pos:start="1530:9" pos:end="1530:59">// error handler would have the corresponding info.</comment>
        <expr_stmt pos:start="1531:9" pos:end="1531:78"><expr pos:start="1531:9" pos:end="1531:77"><name pos:start="1531:9" pos:end="1531:38"><name pos:start="1531:9" pos:end="1531:12">conn</name><operator pos:start="1531:13" pos:end="1531:14">-&gt;</operator><name pos:start="1531:15" pos:end="1531:26">request_info</name><operator pos:start="1531:27" pos:end="1531:27">.</operator><name pos:start="1531:28" pos:end="1531:38">remote_port</name></name> <operator pos:start="1531:40" pos:end="1531:40">=</operator> <call pos:start="1531:42" pos:end="1531:77"><name pos:start="1531:42" pos:end="1531:46">ntohs</name><argument_list pos:start="1531:47" pos:end="1531:77">(<argument pos:start="1531:48" pos:end="1531:76"><expr pos:start="1531:48" pos:end="1531:76"><name pos:start="1531:48" pos:end="1531:76"><name pos:start="1531:48" pos:end="1531:51">conn</name><operator pos:start="1531:52" pos:end="1531:53">-&gt;</operator><name pos:start="1531:54" pos:end="1531:59">client</name><operator pos:start="1531:60" pos:end="1531:60">.</operator><name pos:start="1531:61" pos:end="1531:63">rsa</name><operator pos:start="1531:64" pos:end="1531:64">.</operator><name pos:start="1531:65" pos:end="1531:67">sin</name><operator pos:start="1531:68" pos:end="1531:68">.</operator><name pos:start="1531:69" pos:end="1531:76">sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1532:9" pos:end="1533:59"><expr pos:start="1532:9" pos:end="1533:58"><call pos:start="1532:9" pos:end="1533:58"><name pos:start="1532:9" pos:end="1532:16">memcpy_s</name><argument_list pos:start="1532:17" pos:end="1533:58">(<argument pos:start="1532:18" pos:end="1532:46"><expr pos:start="1532:18" pos:end="1532:46"><operator pos:start="1532:18" pos:end="1532:18">&amp;</operator><name pos:start="1532:19" pos:end="1532:46"><name pos:start="1532:19" pos:end="1532:22">conn</name><operator pos:start="1532:23" pos:end="1532:24">-&gt;</operator><name pos:start="1532:25" pos:end="1532:36">request_info</name><operator pos:start="1532:37" pos:end="1532:37">.</operator><name pos:start="1532:38" pos:end="1532:46">remote_ip</name></name></expr></argument>, <argument pos:start="1532:49" pos:end="1532:49"><expr pos:start="1532:49" pos:end="1532:49"><literal type="number" pos:start="1532:49" pos:end="1532:49">4</literal></expr></argument>,
                 <argument pos:start="1533:18" pos:end="1533:54"><expr pos:start="1533:18" pos:end="1533:54"><operator pos:start="1533:18" pos:end="1533:18">&amp;</operator><name pos:start="1533:19" pos:end="1533:54"><name pos:start="1533:19" pos:end="1533:22">conn</name><operator pos:start="1533:23" pos:end="1533:24">-&gt;</operator><name pos:start="1533:25" pos:end="1533:30">client</name><operator pos:start="1533:31" pos:end="1533:31">.</operator><name pos:start="1533:32" pos:end="1533:34">rsa</name><operator pos:start="1533:35" pos:end="1533:35">.</operator><name pos:start="1533:36" pos:end="1533:38">sin</name><operator pos:start="1533:39" pos:end="1533:39">.</operator><name pos:start="1533:40" pos:end="1533:47">sin_addr</name><operator pos:start="1533:48" pos:end="1533:48">.</operator><name pos:start="1533:49" pos:end="1533:54">s_addr</name></name></expr></argument>, <argument pos:start="1533:57" pos:end="1533:57"><expr pos:start="1533:57" pos:end="1533:57"><literal type="number" pos:start="1533:57" pos:end="1533:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1534:9" pos:end="1534:75"><expr pos:start="1534:9" pos:end="1534:74"><name pos:start="1534:9" pos:end="1534:36"><name pos:start="1534:9" pos:end="1534:12">conn</name><operator pos:start="1534:13" pos:end="1534:14">-&gt;</operator><name pos:start="1534:15" pos:end="1534:26">request_info</name><operator pos:start="1534:27" pos:end="1534:27">.</operator><name pos:start="1534:28" pos:end="1534:36">remote_ip</name></name> <operator pos:start="1534:38" pos:end="1534:38">=</operator> <call pos:start="1534:40" pos:end="1534:74"><name pos:start="1534:40" pos:end="1534:44">ntohl</name><argument_list pos:start="1534:45" pos:end="1534:74">(<argument pos:start="1534:46" pos:end="1534:73"><expr pos:start="1534:46" pos:end="1534:73"><name pos:start="1534:46" pos:end="1534:73"><name pos:start="1534:46" pos:end="1534:49">conn</name><operator pos:start="1534:50" pos:end="1534:51">-&gt;</operator><name pos:start="1534:52" pos:end="1534:63">request_info</name><operator pos:start="1534:64" pos:end="1534:64">.</operator><name pos:start="1534:65" pos:end="1534:73">remote_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1535:9" pos:end="1535:38"><expr pos:start="1535:9" pos:end="1535:37"><name pos:start="1535:9" pos:end="1535:33"><name pos:start="1535:9" pos:end="1535:12">conn</name><operator pos:start="1535:13" pos:end="1535:14">-&gt;</operator><name pos:start="1535:15" pos:end="1535:26">request_info</name><operator pos:start="1535:27" pos:end="1535:27">.</operator><name pos:start="1535:28" pos:end="1535:33">is_ssl</name></name> <operator pos:start="1535:35" pos:end="1535:35">=</operator> <literal type="number" pos:start="1535:37" pos:end="1535:37">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1537:9" pos:end="1539:11">/*
         * EST require TLS,  Setup the TLS tunnel
         */</comment>
        <expr_stmt pos:start="1540:9" pos:end="1540:48"><expr pos:start="1540:9" pos:end="1540:47"><name pos:start="1540:9" pos:end="1540:17"><name pos:start="1540:9" pos:end="1540:12">conn</name><operator pos:start="1540:13" pos:end="1540:14">-&gt;</operator><name pos:start="1540:15" pos:end="1540:17">ssl</name></name> <operator pos:start="1540:19" pos:end="1540:19">=</operator> <call pos:start="1540:21" pos:end="1540:47"><name pos:start="1540:21" pos:end="1540:27">SSL_new</name><argument_list pos:start="1540:28" pos:end="1540:47">(<argument pos:start="1540:29" pos:end="1540:46"><expr pos:start="1540:29" pos:end="1540:46"><name pos:start="1540:29" pos:end="1540:46"><name pos:start="1540:29" pos:end="1540:32">conn</name><operator pos:start="1540:33" pos:end="1540:34">-&gt;</operator><name pos:start="1540:35" pos:end="1540:37">ctx</name><operator pos:start="1540:38" pos:end="1540:39">-&gt;</operator><name pos:start="1540:40" pos:end="1540:46">ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1541:9" pos:end="1591:9"><if pos:start="1541:9" pos:end="1591:9">if <condition pos:start="1541:12" pos:end="1541:30">(<expr pos:start="1541:13" pos:end="1541:29"><name pos:start="1541:13" pos:end="1541:21"><name pos:start="1541:13" pos:end="1541:16">conn</name><operator pos:start="1541:17" pos:end="1541:18">-&gt;</operator><name pos:start="1541:19" pos:end="1541:21">ssl</name></name> <operator pos:start="1541:23" pos:end="1541:24">!=</operator> <name pos:start="1541:26" pos:end="1541:29">NULL</name></expr>)</condition> <block pos:start="1541:32" pos:end="1591:9">{<block_content pos:start="1542:13" pos:end="1590:29">
            <expr_stmt pos:start="1542:13" pos:end="1542:53"><expr pos:start="1542:13" pos:end="1542:52"><call pos:start="1542:13" pos:end="1542:52"><name pos:start="1542:13" pos:end="1542:22">SSL_set_fd</name><argument_list pos:start="1542:23" pos:end="1542:52">(<argument pos:start="1542:24" pos:end="1542:32"><expr pos:start="1542:24" pos:end="1542:32"><name pos:start="1542:24" pos:end="1542:32"><name pos:start="1542:24" pos:end="1542:27">conn</name><operator pos:start="1542:28" pos:end="1542:29">-&gt;</operator><name pos:start="1542:30" pos:end="1542:32">ssl</name></name></expr></argument>, <argument pos:start="1542:35" pos:end="1542:51"><expr pos:start="1542:35" pos:end="1542:51"><name pos:start="1542:35" pos:end="1542:51"><name pos:start="1542:35" pos:end="1542:38">conn</name><operator pos:start="1542:39" pos:end="1542:40">-&gt;</operator><name pos:start="1542:41" pos:end="1542:46">client</name><operator pos:start="1542:47" pos:end="1542:47">.</operator><name pos:start="1542:48" pos:end="1542:51">sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1543:13" pos:end="1543:44"><expr pos:start="1543:13" pos:end="1543:43"><name pos:start="1543:13" pos:end="1543:19">ssl_err</name> <operator pos:start="1543:21" pos:end="1543:21">=</operator> <call pos:start="1543:23" pos:end="1543:43"><name pos:start="1543:23" pos:end="1543:32">SSL_accept</name><argument_list pos:start="1543:33" pos:end="1543:43">(<argument pos:start="1543:34" pos:end="1543:42"><expr pos:start="1543:34" pos:end="1543:42"><name pos:start="1543:34" pos:end="1543:42"><name pos:start="1543:34" pos:end="1543:37">conn</name><operator pos:start="1543:38" pos:end="1543:39">-&gt;</operator><name pos:start="1543:40" pos:end="1543:42">ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <if_stmt pos:start="1544:13" pos:end="1572:13"><if pos:start="1544:13" pos:end="1570:13">if <condition pos:start="1544:16" pos:end="1544:29">(<expr pos:start="1544:17" pos:end="1544:28"><name pos:start="1544:17" pos:end="1544:23">ssl_err</name> <operator pos:start="1544:25" pos:end="1544:26">&lt;=</operator> <literal type="number" pos:start="1544:28" pos:end="1544:28">0</literal></expr>)</condition> <block pos:start="1544:31" pos:end="1570:13">{<block_content pos:start="1545:17" pos:end="1569:17">
		<expr_stmt pos:start="1545:17" pos:end="1545:61"><expr pos:start="1545:17" pos:end="1545:60"><name pos:start="1545:17" pos:end="1545:24">err_code</name> <operator pos:start="1545:26" pos:end="1545:26">=</operator> <call pos:start="1545:28" pos:end="1545:60"><name pos:start="1545:28" pos:end="1545:40">SSL_get_error</name><argument_list pos:start="1545:41" pos:end="1545:60">(<argument pos:start="1545:42" pos:end="1545:50"><expr pos:start="1545:42" pos:end="1545:50"><name pos:start="1545:42" pos:end="1545:50"><name pos:start="1545:42" pos:end="1545:45">conn</name><operator pos:start="1545:46" pos:end="1545:47">-&gt;</operator><name pos:start="1545:48" pos:end="1545:50">ssl</name></name></expr></argument>, <argument pos:start="1545:53" pos:end="1545:59"><expr pos:start="1545:53" pos:end="1545:59"><name pos:start="1545:53" pos:end="1545:59">ssl_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch pos:start="1546:17" pos:end="1569:17">switch <condition pos:start="1546:24" pos:end="1546:33">(<expr pos:start="1546:25" pos:end="1546:32"><name pos:start="1546:25" pos:end="1546:32">err_code</name></expr>)</condition> <block pos:start="1546:35" pos:end="1569:17">{<block_content pos:start="1547:17" pos:end="1568:26">
		<case pos:start="1547:17" pos:end="1547:39">case <expr pos:start="1547:22" pos:end="1547:38"><name pos:start="1547:22" pos:end="1547:38">SSL_ERROR_SYSCALL</name></expr>:</case>
		    <expr_stmt pos:start="1548:21" pos:end="1548:61"><expr pos:start="1548:21" pos:end="1548:60"><call pos:start="1548:21" pos:end="1548:60"><name pos:start="1548:21" pos:end="1548:31">EST_LOG_ERR</name><argument_list pos:start="1548:32" pos:end="1548:60">(<argument pos:start="1548:33" pos:end="1548:59"><expr pos:start="1548:33" pos:end="1548:59"><literal type="string" pos:start="1548:33" pos:end="1548:59">"OpenSSL system call error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="1549:21" pos:end="1549:41"><expr pos:start="1549:21" pos:end="1549:40"><name pos:start="1549:21" pos:end="1549:22">rv</name> <operator pos:start="1549:24" pos:end="1549:24">=</operator> <name pos:start="1549:26" pos:end="1549:40">EST_ERR_SYSCALL</name></expr>;</expr_stmt>
		    <break pos:start="1550:21" pos:end="1550:26">break;</break>
		<case pos:start="1551:17" pos:end="1551:35">case <expr pos:start="1551:22" pos:end="1551:34"><name pos:start="1551:22" pos:end="1551:34">SSL_ERROR_SSL</name></expr>:</case>
		    <comment type="block" pos:start="1552:21" pos:end="1553:68">/* Some unknown OpenSSL error, dump the 
		     * OpenSSL error log to learn more about this */</comment>
		    <expr_stmt pos:start="1554:21" pos:end="1554:43"><expr pos:start="1554:21" pos:end="1554:42"><call pos:start="1554:21" pos:end="1554:42"><name pos:start="1554:21" pos:end="1554:40">ossl_dump_ssl_errors</name><argument_list pos:start="1554:41" pos:end="1554:42">()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="1555:21" pos:end="1555:41"><expr pos:start="1555:21" pos:end="1555:40"><name pos:start="1555:21" pos:end="1555:22">rv</name> <operator pos:start="1555:24" pos:end="1555:24">=</operator> <name pos:start="1555:26" pos:end="1555:40">EST_ERR_UNKNOWN</name></expr>;</expr_stmt>
		    <break pos:start="1556:21" pos:end="1556:26">break;</break>
		<case pos:start="1557:17" pos:end="1557:41">case <expr pos:start="1557:22" pos:end="1557:40"><name pos:start="1557:22" pos:end="1557:40">SSL_ERROR_WANT_READ</name></expr>:</case>
		<case pos:start="1558:17" pos:end="1558:42">case <expr pos:start="1558:22" pos:end="1558:41"><name pos:start="1558:22" pos:end="1558:41">SSL_ERROR_WANT_WRITE</name></expr>:</case>
		    <expr_stmt pos:start="1559:21" pos:end="1559:66"><expr pos:start="1559:21" pos:end="1559:65"><call pos:start="1559:21" pos:end="1559:65"><name pos:start="1559:21" pos:end="1559:32">EST_LOG_INFO</name><argument_list pos:start="1559:33" pos:end="1559:65">(<argument pos:start="1559:34" pos:end="1559:64"><expr pos:start="1559:34" pos:end="1559:64"><literal type="string" pos:start="1559:34" pos:end="1559:64">"App using non-blocking socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="1560:21" pos:end="1560:49"><expr pos:start="1560:21" pos:end="1560:48"><call pos:start="1560:21" pos:end="1560:48"><name pos:start="1560:21" pos:end="1560:42">process_new_connection</name><argument_list pos:start="1560:43" pos:end="1560:48">(<argument pos:start="1560:44" pos:end="1560:47"><expr pos:start="1560:44" pos:end="1560:47"><name pos:start="1560:44" pos:end="1560:47">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <break pos:start="1561:21" pos:end="1561:26">break;</break>
		<case pos:start="1562:17" pos:end="1562:48">case <expr pos:start="1562:22" pos:end="1562:47"><name pos:start="1562:22" pos:end="1562:47">SSL_ERROR_WANT_X509_LOOKUP</name></expr>:</case>
		    <expr_stmt pos:start="1563:21" pos:end="1563:66"><expr pos:start="1563:21" pos:end="1563:65"><call pos:start="1563:21" pos:end="1563:65"><name pos:start="1563:21" pos:end="1563:31">EST_LOG_ERR</name><argument_list pos:start="1563:32" pos:end="1563:65">(<argument pos:start="1563:33" pos:end="1563:64"><expr pos:start="1563:33" pos:end="1563:64"><literal type="string" pos:start="1563:33" pos:end="1563:64">"SSL_accept error, wants lookup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="1564:21" pos:end="1564:41"><expr pos:start="1564:21" pos:end="1564:40"><name pos:start="1564:21" pos:end="1564:22">rv</name> <operator pos:start="1564:24" pos:end="1564:24">=</operator> <name pos:start="1564:26" pos:end="1564:40">EST_ERR_UNKNOWN</name></expr>;</expr_stmt>
		    <break pos:start="1565:21" pos:end="1565:26">break;</break>
		<case pos:start="1566:17" pos:end="1566:36">case <expr pos:start="1566:22" pos:end="1566:35"><name pos:start="1566:22" pos:end="1566:35">SSL_ERROR_NONE</name></expr>:</case>
		<default pos:start="1567:17" pos:end="1567:24">default:</default>
		    <break pos:start="1568:21" pos:end="1568:26">break;</break>
		</block_content>}</block></switch>
	    </block_content>}</block></if> <else pos:start="1570:15" pos:end="1572:13">else <block pos:start="1570:20" pos:end="1572:13">{<block_content pos:start="1571:17" pos:end="1571:45">
		<expr_stmt pos:start="1571:17" pos:end="1571:45"><expr pos:start="1571:17" pos:end="1571:44"><call pos:start="1571:17" pos:end="1571:44"><name pos:start="1571:17" pos:end="1571:38">process_new_connection</name><argument_list pos:start="1571:39" pos:end="1571:44">(<argument pos:start="1571:40" pos:end="1571:43"><expr pos:start="1571:40" pos:end="1571:43"><name pos:start="1571:40" pos:end="1571:43">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="1573:13" pos:end="1573:46"><expr pos:start="1573:13" pos:end="1573:45"><name pos:start="1573:13" pos:end="1573:19">ssl_err</name> <operator pos:start="1573:21" pos:end="1573:21">=</operator> <call pos:start="1573:23" pos:end="1573:45"><name pos:start="1573:23" pos:end="1573:34">SSL_shutdown</name><argument_list pos:start="1573:35" pos:end="1573:45">(<argument pos:start="1573:36" pos:end="1573:44"><expr pos:start="1573:36" pos:end="1573:44"><name pos:start="1573:36" pos:end="1573:44"><name pos:start="1573:36" pos:end="1573:39">conn</name><operator pos:start="1573:40" pos:end="1573:41">-&gt;</operator><name pos:start="1573:42" pos:end="1573:44">ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <switch pos:start="1574:13" pos:end="1588:13">switch <condition pos:start="1574:20" pos:end="1574:28">(<expr pos:start="1574:21" pos:end="1574:27"><name pos:start="1574:21" pos:end="1574:27">ssl_err</name></expr>)</condition> <block pos:start="1574:30" pos:end="1588:13">{<block_content pos:start="1575:13" pos:end="1587:22">
	    <case pos:start="1575:13" pos:end="1575:19">case <expr pos:start="1575:18" pos:end="1575:18"><literal type="number" pos:start="1575:18" pos:end="1575:18">0</literal></expr>:</case>
		<comment type="block" pos:start="1576:17" pos:end="1576:75">/* OpenSSL docs say to call shutdown again for this case */</comment>
		<expr_stmt pos:start="1577:17" pos:end="1577:40"><expr pos:start="1577:17" pos:end="1577:39"><call pos:start="1577:17" pos:end="1577:39"><name pos:start="1577:17" pos:end="1577:28">SSL_shutdown</name><argument_list pos:start="1577:29" pos:end="1577:39">(<argument pos:start="1577:30" pos:end="1577:38"><expr pos:start="1577:30" pos:end="1577:38"><name pos:start="1577:30" pos:end="1577:38"><name pos:start="1577:30" pos:end="1577:33">conn</name><operator pos:start="1577:34" pos:end="1577:35">-&gt;</operator><name pos:start="1577:36" pos:end="1577:38">ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="1578:17" pos:end="1578:65"><expr pos:start="1578:17" pos:end="1578:64"><call pos:start="1578:17" pos:end="1578:64"><name pos:start="1578:17" pos:end="1578:28">EST_LOG_INFO</name><argument_list pos:start="1578:29" pos:end="1578:64">(<argument pos:start="1578:30" pos:end="1578:63"><expr pos:start="1578:30" pos:end="1578:63"><literal type="string" pos:start="1578:30" pos:end="1578:63">"Two-phase SSL_shutdown initiated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:start="1579:17" pos:end="1579:22">break;</break>
	    <case pos:start="1580:13" pos:end="1580:19">case <expr pos:start="1580:18" pos:end="1580:18"><literal type="number" pos:start="1580:18" pos:end="1580:18">1</literal></expr>:</case>
		<comment type="block" pos:start="1581:17" pos:end="1581:52">/* Nothing to do, shutdown worked */</comment>
		<expr_stmt pos:start="1582:17" pos:end="1582:55"><expr pos:start="1582:17" pos:end="1582:54"><call pos:start="1582:17" pos:end="1582:54"><name pos:start="1582:17" pos:end="1582:28">EST_LOG_INFO</name><argument_list pos:start="1582:29" pos:end="1582:54">(<argument pos:start="1582:30" pos:end="1582:53"><expr pos:start="1582:30" pos:end="1582:53"><literal type="string" pos:start="1582:30" pos:end="1582:53">"SSL_shutdown succeeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:start="1583:17" pos:end="1583:22">break;</break>
	    <default pos:start="1584:13" pos:end="1584:20">default:</default>
		<comment type="block" pos:start="1585:17" pos:end="1585:34">/* Log an error */</comment>
		<expr_stmt pos:start="1586:17" pos:end="1586:52"><expr pos:start="1586:17" pos:end="1586:51"><call pos:start="1586:17" pos:end="1586:51"><name pos:start="1586:17" pos:end="1586:28">EST_LOG_WARN</name><argument_list pos:start="1586:29" pos:end="1586:51">(<argument pos:start="1586:30" pos:end="1586:50"><expr pos:start="1586:30" pos:end="1586:50"><literal type="string" pos:start="1586:30" pos:end="1586:50">"SSL_shutdown failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:start="1587:17" pos:end="1587:22">break;</break>
	    </block_content>}</block></switch>
            <expr_stmt pos:start="1589:13" pos:end="1589:32"><expr pos:start="1589:13" pos:end="1589:31"><call pos:start="1589:13" pos:end="1589:31"><name pos:start="1589:13" pos:end="1589:20">SSL_free</name><argument_list pos:start="1589:21" pos:end="1589:31">(<argument pos:start="1589:22" pos:end="1589:30"><expr pos:start="1589:22" pos:end="1589:30"><name pos:start="1589:22" pos:end="1589:30"><name pos:start="1589:22" pos:end="1589:25">conn</name><operator pos:start="1589:26" pos:end="1589:27">-&gt;</operator><name pos:start="1589:28" pos:end="1589:30">ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1590:13" pos:end="1590:29"><expr pos:start="1590:13" pos:end="1590:28"><name pos:start="1590:13" pos:end="1590:21"><name pos:start="1590:13" pos:end="1590:16">conn</name><operator pos:start="1590:17" pos:end="1590:18">-&gt;</operator><name pos:start="1590:19" pos:end="1590:21">ssl</name></name> <operator pos:start="1590:23" pos:end="1590:23">=</operator> <name pos:start="1590:25" pos:end="1590:28">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1592:9" pos:end="1592:58"><expr pos:start="1592:9" pos:end="1592:57"><call pos:start="1592:9" pos:end="1592:57"><name pos:start="1592:9" pos:end="1592:17">memzero_s</name><argument_list pos:start="1592:18" pos:end="1592:57">(<argument pos:start="1592:19" pos:end="1592:22"><expr pos:start="1592:19" pos:end="1592:22"><name pos:start="1592:19" pos:end="1592:22">conn</name></expr></argument>, <argument pos:start="1592:25" pos:end="1592:56"><expr pos:start="1592:25" pos:end="1592:56"><sizeof pos:start="1592:25" pos:end="1592:37">sizeof<argument_list pos:start="1592:31" pos:end="1592:37">(<argument pos:start="1592:32" pos:end="1592:36"><expr pos:start="1592:32" pos:end="1592:36"><operator pos:start="1592:32" pos:end="1592:32">*</operator><name pos:start="1592:33" pos:end="1592:36">conn</name></expr></argument>)</argument_list></sizeof> <operator pos:start="1592:39" pos:end="1592:39">+</operator> <name pos:start="1592:41" pos:end="1592:56">MAX_REQUEST_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1593:9" pos:end="1593:19"><expr pos:start="1593:9" pos:end="1593:18"><call pos:start="1593:9" pos:end="1593:18"><name pos:start="1593:9" pos:end="1593:12">free</name><argument_list pos:start="1593:13" pos:end="1593:18">(<argument pos:start="1593:14" pos:end="1593:17"><expr pos:start="1593:14" pos:end="1593:17"><name pos:start="1593:14" pos:end="1593:17">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="1595:5" pos:end="1595:16">return <expr pos:start="1595:12" pos:end="1595:15"><operator pos:start="1595:12" pos:end="1595:12">(</operator><name pos:start="1595:13" pos:end="1595:14">rv</name><operator pos:start="1595:15" pos:end="1595:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1597:1" pos:end="1620:2">/*! @brief est_server_handle_request() is used by an application 
    to process an EST request.  The application is responsible
    for opening a listener socket.  When an EST request comes in
    on the socket, the application uses this function to hand-off
    the request to libEST.

    @param ctx Pointer to the EST_CTX, which was provided
               when est_server_init()  or est_proxy_init() was invoked.
    @param fd File descriptor that will be read to retrieve the
              HTTP request from the client.  This is typically
	      a TCP socket file descriptor.

    est_server_handle_request() is used by an application 
    when an incoming EST request needs to be processed.  This request
    would be a cacerts, simpleenroll, reenroll, or csrattrs request. 
    This is used when implementing an EST server.  The application 
    is responsible for opening and listening to a TCP socket for
    incoming EST requests.  When data is ready to be read from
    the socket, this API entry point should be used to allow libEST
    to read the request from the socket and respond to the request.
 

    @return EST_ERROR.
*/</comment>
<function pos:start="1621:1" pos:end="1630:1"><type pos:start="1621:1" pos:end="1621:11"><specifier pos:start="1621:1" pos:end="1621:6">static</specifier> <name pos:start="1621:8" pos:end="1621:11">void</name></type> <name pos:start="1621:13" pos:end="1621:24">free_context</name> <parameter_list pos:start="1621:26" pos:end="1621:49">(<parameter pos:start="1621:27" pos:end="1621:48"><decl pos:start="1621:27" pos:end="1621:48"><type pos:start="1621:27" pos:end="1621:48"><name pos:start="1621:27" pos:end="1621:43"><name pos:start="1621:27" pos:end="1621:32">struct</name> <name pos:start="1621:34" pos:end="1621:43">mg_context</name></name> <modifier pos:start="1621:45" pos:end="1621:45">*</modifier></type><name pos:start="1621:46" pos:end="1621:48">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1622:1" pos:end="1630:1">{<block_content pos:start="1624:5" pos:end="1629:14">
    <comment type="line" pos:start="1623:5" pos:end="1623:29">// Deallocate SSL context</comment>
    <if_stmt pos:start="1624:5" pos:end="1626:5"><if pos:start="1624:5" pos:end="1626:5">if <condition pos:start="1624:8" pos:end="1624:29">(<expr pos:start="1624:9" pos:end="1624:28"><name pos:start="1624:9" pos:end="1624:20"><name pos:start="1624:9" pos:end="1624:11">ctx</name><operator pos:start="1624:12" pos:end="1624:13">-&gt;</operator><name pos:start="1624:14" pos:end="1624:20">ssl_ctx</name></name> <operator pos:start="1624:22" pos:end="1624:23">!=</operator> <name pos:start="1624:25" pos:end="1624:28">NULL</name></expr>)</condition> <block pos:start="1624:31" pos:end="1626:5">{<block_content pos:start="1625:9" pos:end="1625:35">
        <expr_stmt pos:start="1625:9" pos:end="1625:35"><expr pos:start="1625:9" pos:end="1625:34"><call pos:start="1625:9" pos:end="1625:34"><name pos:start="1625:9" pos:end="1625:20">SSL_CTX_free</name><argument_list pos:start="1625:21" pos:end="1625:34">(<argument pos:start="1625:22" pos:end="1625:33"><expr pos:start="1625:22" pos:end="1625:33"><name pos:start="1625:22" pos:end="1625:33"><name pos:start="1625:22" pos:end="1625:24">ctx</name><operator pos:start="1625:25" pos:end="1625:26">-&gt;</operator><name pos:start="1625:27" pos:end="1625:33">ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="1628:5" pos:end="1628:32">// Deallocate context itself</comment>
    <expr_stmt pos:start="1629:5" pos:end="1629:14"><expr pos:start="1629:5" pos:end="1629:13"><call pos:start="1629:5" pos:end="1629:13"><name pos:start="1629:5" pos:end="1629:8">free</name><argument_list pos:start="1629:9" pos:end="1629:13">(<argument pos:start="1629:10" pos:end="1629:12"><expr pos:start="1629:10" pos:end="1629:12"><name pos:start="1629:10" pos:end="1629:12">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1631:1" pos:end="1654:2">/*! @brief est_server_handle_request() is used by an application 
    to process an EST request.  The application is responsible
    for opening a listener socket.  When an EST request comes in
    on the socket, the application uses this function to hand-off
    the request to libEST.

    @param ctx Pointer to the EST_CTX, which was provided
               when est_server_init()  or est_proxy_init() was invoked.
    @param fd File descriptor that will be read to retrieve the
              HTTP request from the client.  This is typically
	      a TCP socket file descriptor.

    est_server_handle_request() is used by an application 
    when an incoming EST request needs to be processed.  This request
    would be a cacerts, simpleenroll, reenroll, or csrattrs request. 
    This is used when implementing an EST server.  The application 
    is responsible for opening and listening to a TCP socket for
    incoming EST requests.  When data is ready to be read from
    the socket, this API entry point should be used to allow libEST
    to read the request from the socket and respond to the request.
 

    @return EST_ERROR.
*/</comment>
<function pos:start="1655:1" pos:end="1664:1"><type pos:start="1655:1" pos:end="1655:4"><name pos:start="1655:1" pos:end="1655:4">void</name></type> <name pos:start="1655:6" pos:end="1655:12">mg_stop</name> <parameter_list pos:start="1655:14" pos:end="1655:37">(<parameter pos:start="1655:15" pos:end="1655:36"><decl pos:start="1655:15" pos:end="1655:36"><type pos:start="1655:15" pos:end="1655:36"><name pos:start="1655:15" pos:end="1655:31"><name pos:start="1655:15" pos:end="1655:20">struct</name> <name pos:start="1655:22" pos:end="1655:31">mg_context</name></name> <modifier pos:start="1655:33" pos:end="1655:33">*</modifier></type><name pos:start="1655:34" pos:end="1655:36">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1656:1" pos:end="1664:1">{<block_content pos:start="1657:5" pos:end="1664:0">
    <expr_stmt pos:start="1657:5" pos:end="1657:23"><expr pos:start="1657:5" pos:end="1657:22"><name pos:start="1657:5" pos:end="1657:18"><name pos:start="1657:5" pos:end="1657:7">ctx</name><operator pos:start="1657:8" pos:end="1657:9">-&gt;</operator><name pos:start="1657:10" pos:end="1657:18">stop_flag</name></name> <operator pos:start="1657:20" pos:end="1657:20">=</operator> <literal type="number" pos:start="1657:22" pos:end="1657:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1659:5" pos:end="1662:0"><expr pos:start="1659:5" pos:end="1659:21"><call pos:start="1659:5" pos:end="1659:21"><name pos:start="1659:5" pos:end="1659:16">free_context</name><argument_list pos:start="1659:17" pos:end="1659:21">(<argument pos:start="1659:18" pos:end="1659:20"><expr pos:start="1659:18" pos:end="1659:20"><name pos:start="1659:18" pos:end="1659:20">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="1661:1" pos:end="1661:46">#<cpp:directive pos:start="1661:2" pos:end="1661:3">if</cpp:directive> <expr pos:start="1661:5" pos:end="1661:46"><call pos:start="1661:5" pos:end="1661:19"><name pos:start="1661:5" pos:end="1661:11">defined</name><argument_list pos:start="1661:12" pos:end="1661:19">(<argument pos:start="1661:13" pos:end="1661:18"><expr pos:start="1661:13" pos:end="1661:18"><name pos:start="1661:13" pos:end="1661:18">_WIN32</name></expr></argument>)</argument_list></call> <operator pos:start="1661:21" pos:end="1661:22">&amp;&amp;</operator> <operator pos:start="1661:24" pos:end="1661:24">!</operator><call pos:start="1661:25" pos:end="1661:46"><name pos:start="1661:25" pos:end="1661:31">defined</name><argument_list pos:start="1661:32" pos:end="1661:46">(<argument pos:start="1661:33" pos:end="1661:45"><expr pos:start="1661:33" pos:end="1661:45"><name pos:start="1661:33" pos:end="1661:45">__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt pos:start="1662:5" pos:end="1664:0"><expr pos:start="1662:5" pos:end="1662:22"><operator pos:start="1662:5" pos:end="1662:5">(</operator><name pos:start="1662:6" pos:end="1662:9">void</name><operator pos:start="1662:10" pos:end="1662:10">)</operator><call pos:start="1662:11" pos:end="1662:22"><name pos:start="1662:11" pos:end="1662:20">WSACleanup</name><argument_list pos:start="1662:21" pos:end="1662:22">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1663:1" pos:end="1663:6">#<cpp:directive pos:start="1663:2" pos:end="1663:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="1663:8" pos:end="1663:16">// _WIN32</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1665:1" pos:end="1688:2">/*! @brief est_server_handle_request() is used by an application 
    to process an EST request.  The application is responsible
    for opening a listener socket.  When an EST request comes in
    on the socket, the application uses this function to hand-off
    the request to libEST.

    @param ctx Pointer to the EST_CTX, which was provided
               when est_server_init()  or est_proxy_init() was invoked.
    @param fd File descriptor that will be read to retrieve the
              HTTP request from the client.  This is typically
	      a TCP socket file descriptor.

    est_server_handle_request() is used by an application 
    when an incoming EST request needs to be processed.  This request
    would be a cacerts, simpleenroll, reenroll, or csrattrs request. 
    This is used when implementing an EST server.  The application 
    is responsible for opening and listening to a TCP socket for
    incoming EST requests.  When data is ready to be read from
    the socket, this API entry point should be used to allow libEST
    to read the request from the socket and respond to the request.
 

    @return EST_ERROR.
*/</comment>
<function pos:start="1689:1" pos:end="1713:1"><type pos:start="1689:1" pos:end="1689:19"><name pos:start="1689:1" pos:end="1689:17"><name pos:start="1689:1" pos:end="1689:6">struct</name> <name pos:start="1689:8" pos:end="1689:17">mg_context</name></name> <modifier pos:start="1689:19" pos:end="1689:19">*</modifier></type><name pos:start="1689:20" pos:end="1689:27">mg_start</name> <parameter_list pos:start="1689:29" pos:end="1689:45">(<parameter pos:start="1689:30" pos:end="1689:44"><decl pos:start="1689:30" pos:end="1689:44"><type pos:start="1689:30" pos:end="1689:35"><name pos:start="1689:30" pos:end="1689:33">void</name> <modifier pos:start="1689:35" pos:end="1689:35">*</modifier></type><name pos:start="1689:36" pos:end="1689:44">user_data</name></decl></parameter>)</parameter_list>
<block pos:start="1690:1" pos:end="1713:1">{<block_content pos:start="1691:5" pos:end="1712:15">
    <decl_stmt pos:start="1691:5" pos:end="1694:0"><decl pos:start="1691:5" pos:end="1691:26"><type pos:start="1691:5" pos:end="1691:23"><name pos:start="1691:5" pos:end="1691:21"><name pos:start="1691:5" pos:end="1691:10">struct</name> <name pos:start="1691:12" pos:end="1691:21">mg_context</name></name> <modifier pos:start="1691:23" pos:end="1691:23">*</modifier></type><name pos:start="1691:24" pos:end="1691:26">ctx</name></decl>;</decl_stmt>

<cpp:if pos:start="1693:1" pos:end="1693:46">#<cpp:directive pos:start="1693:2" pos:end="1693:3">if</cpp:directive> <expr pos:start="1693:5" pos:end="1693:46"><call pos:start="1693:5" pos:end="1693:19"><name pos:start="1693:5" pos:end="1693:11">defined</name><argument_list pos:start="1693:12" pos:end="1693:19">(<argument pos:start="1693:13" pos:end="1693:18"><expr pos:start="1693:13" pos:end="1693:18"><name pos:start="1693:13" pos:end="1693:18">_WIN32</name></expr></argument>)</argument_list></call> <operator pos:start="1693:21" pos:end="1693:22">&amp;&amp;</operator> <operator pos:start="1693:24" pos:end="1693:24">!</operator><call pos:start="1693:25" pos:end="1693:46"><name pos:start="1693:25" pos:end="1693:31">defined</name><argument_list pos:start="1693:32" pos:end="1693:46">(<argument pos:start="1693:33" pos:end="1693:45"><expr pos:start="1693:33" pos:end="1693:45"><name pos:start="1693:33" pos:end="1693:45">__SYMBIAN32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt pos:start="1694:5" pos:end="1694:17"><decl pos:start="1694:5" pos:end="1694:16"><type pos:start="1694:5" pos:end="1694:11"><name pos:start="1694:5" pos:end="1694:11">WSADATA</name></type> <name pos:start="1694:13" pos:end="1694:16">data</name></decl>;</decl_stmt>
    <expr_stmt pos:start="1695:5" pos:end="1695:38"><expr pos:start="1695:5" pos:end="1695:37"><call pos:start="1695:5" pos:end="1695:37"><name pos:start="1695:5" pos:end="1695:14">WSAStartup</name><argument_list pos:start="1695:15" pos:end="1695:37">(<argument pos:start="1695:16" pos:end="1695:29"><expr pos:start="1695:16" pos:end="1695:29"><call pos:start="1695:16" pos:end="1695:29"><name pos:start="1695:16" pos:end="1695:23">MAKEWORD</name><argument_list pos:start="1695:24" pos:end="1695:29">(<argument pos:start="1695:25" pos:end="1695:25"><expr pos:start="1695:25" pos:end="1695:25"><literal type="number" pos:start="1695:25" pos:end="1695:25">2</literal></expr></argument>, <argument pos:start="1695:28" pos:end="1695:28"><expr pos:start="1695:28" pos:end="1695:28"><literal type="number" pos:start="1695:28" pos:end="1695:28">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1695:32" pos:end="1695:36"><expr pos:start="1695:32" pos:end="1695:36"><operator pos:start="1695:32" pos:end="1695:32">&amp;</operator><name pos:start="1695:33" pos:end="1695:36">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1696:5" pos:end="1698:0"><expr pos:start="1696:5" pos:end="1696:52"><call pos:start="1696:5" pos:end="1696:52"><name pos:start="1696:5" pos:end="1696:29">InitializeCriticalSection</name><argument_list pos:start="1696:30" pos:end="1696:52">(<argument pos:start="1696:31" pos:end="1696:51"><expr pos:start="1696:31" pos:end="1696:51"><operator pos:start="1696:31" pos:end="1696:31">&amp;</operator><name pos:start="1696:32" pos:end="1696:51">global_log_file_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1697:1" pos:end="1697:6">#<cpp:directive pos:start="1697:2" pos:end="1697:6">endif</cpp:directive></cpp:endif> <comment type="line" pos:start="1697:8" pos:end="1697:16">// _WIN32</comment>

    <comment type="line" pos:start="1699:5" pos:end="1699:72">// Allocate context and initialize reasonable general case defaults.</comment>
    <comment type="line" pos:start="1700:5" pos:end="1700:48">// TODO(lsm): do proper error handling here.</comment>
    <if_stmt pos:start="1701:5" pos:end="1703:5"><if pos:start="1701:5" pos:end="1703:5">if <condition pos:start="1701:8" pos:end="1701:68">(<expr pos:start="1701:9" pos:end="1701:67"><operator pos:start="1701:9" pos:end="1701:9">(</operator><name pos:start="1701:10" pos:end="1701:12">ctx</name> <operator pos:start="1701:14" pos:end="1701:14">=</operator> <operator pos:start="1701:16" pos:end="1701:16">(</operator>struct <name pos:start="1701:24" pos:end="1701:33">mg_context</name><operator pos:start="1701:34" pos:end="1701:34">*</operator><operator pos:start="1701:35" pos:end="1701:35">)</operator><call pos:start="1701:36" pos:end="1701:58"><name pos:start="1701:36" pos:end="1701:41">calloc</name><argument_list pos:start="1701:42" pos:end="1701:58">(<argument pos:start="1701:43" pos:end="1701:43"><expr pos:start="1701:43" pos:end="1701:43"><literal type="number" pos:start="1701:43" pos:end="1701:43">1</literal></expr></argument>, <argument pos:start="1701:46" pos:end="1701:57"><expr pos:start="1701:46" pos:end="1701:57"><sizeof pos:start="1701:46" pos:end="1701:57">sizeof<argument_list pos:start="1701:52" pos:end="1701:57">(<argument pos:start="1701:53" pos:end="1701:56"><expr pos:start="1701:53" pos:end="1701:56"><operator pos:start="1701:53" pos:end="1701:53">*</operator><name pos:start="1701:54" pos:end="1701:56">ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="1701:59" pos:end="1701:59">)</operator> <operator pos:start="1701:61" pos:end="1701:62">==</operator> <name pos:start="1701:64" pos:end="1701:67">NULL</name></expr>)</condition> <block pos:start="1701:70" pos:end="1703:5">{<block_content pos:start="1702:9" pos:end="1702:20">
        <return pos:start="1702:9" pos:end="1702:20">return <expr pos:start="1702:16" pos:end="1702:19"><name pos:start="1702:16" pos:end="1702:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1704:5" pos:end="1704:31"><expr pos:start="1704:5" pos:end="1704:30"><name pos:start="1704:5" pos:end="1704:18"><name pos:start="1704:5" pos:end="1704:7">ctx</name><operator pos:start="1704:8" pos:end="1704:9">-&gt;</operator><name pos:start="1704:10" pos:end="1704:18">user_data</name></name> <operator pos:start="1704:20" pos:end="1704:20">=</operator> <name pos:start="1704:22" pos:end="1704:30">user_data</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1705:5" pos:end="1705:39"><expr pos:start="1705:5" pos:end="1705:38"><name pos:start="1705:5" pos:end="1705:16"><name pos:start="1705:5" pos:end="1705:7">ctx</name><operator pos:start="1705:8" pos:end="1705:9">-&gt;</operator><name pos:start="1705:10" pos:end="1705:16">est_ctx</name></name> <operator pos:start="1705:18" pos:end="1705:18">=</operator> <operator pos:start="1705:20" pos:end="1705:20">(</operator><name pos:start="1705:21" pos:end="1705:27">EST_CTX</name><operator pos:start="1705:28" pos:end="1705:28">*</operator><operator pos:start="1705:29" pos:end="1705:29">)</operator><name pos:start="1705:30" pos:end="1705:38">user_data</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1706:5" pos:end="1706:31"><expr pos:start="1706:5" pos:end="1706:30"><name pos:start="1706:5" pos:end="1706:26"><name pos:start="1706:5" pos:end="1706:7">ctx</name><operator pos:start="1706:8" pos:end="1706:9">-&gt;</operator><name pos:start="1706:10" pos:end="1706:26">enable_keepalives</name></name> <operator pos:start="1706:28" pos:end="1706:28">=</operator> <literal type="number" pos:start="1706:30" pos:end="1706:30">1</literal></expr>;</expr_stmt> 
    <if_stmt pos:start="1707:5" pos:end="1710:5"><if pos:start="1707:5" pos:end="1710:5">if <condition pos:start="1707:8" pos:end="1707:29">(<expr pos:start="1707:9" pos:end="1707:28"><operator pos:start="1707:9" pos:end="1707:9">!</operator><call pos:start="1707:10" pos:end="1707:28"><name pos:start="1707:10" pos:end="1707:23">set_ssl_option</name><argument_list pos:start="1707:24" pos:end="1707:28">(<argument pos:start="1707:25" pos:end="1707:27"><expr pos:start="1707:25" pos:end="1707:27"><name pos:start="1707:25" pos:end="1707:27">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1707:31" pos:end="1710:5">{<block_content pos:start="1708:9" pos:end="1709:20">
        <expr_stmt pos:start="1708:9" pos:end="1708:26"><expr pos:start="1708:9" pos:end="1708:25"><call pos:start="1708:9" pos:end="1708:25"><name pos:start="1708:9" pos:end="1708:20">free_context</name><argument_list pos:start="1708:21" pos:end="1708:25">(<argument pos:start="1708:22" pos:end="1708:24"><expr pos:start="1708:22" pos:end="1708:24"><name pos:start="1708:22" pos:end="1708:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1709:9" pos:end="1709:20">return <expr pos:start="1709:16" pos:end="1709:19"><name pos:start="1709:16" pos:end="1709:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1712:5" pos:end="1712:15">return <expr pos:start="1712:12" pos:end="1712:14"><name pos:start="1712:12" pos:end="1712:14">ctx</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1714:1" pos:end="1737:2">/*! @brief est_server_handle_request() is used by an application 
    to process an EST request.  The application is responsible
    for opening a listener socket.  When an EST request comes in
    on the socket, the application uses this function to hand-off
    the request to libEST.

    @param ctx Pointer to the EST_CTX, which was provided
               when est_server_init()  or est_proxy_init() was invoked.
    @param fd File descriptor that will be read to retrieve the
              HTTP request from the client.  This is typically
	      a TCP socket file descriptor.

    est_server_handle_request() is used by an application 
    when an incoming EST request needs to be processed.  This request
    would be a cacerts, simpleenroll, reenroll, or csrattrs request. 
    This is used when implementing an EST server.  The application 
    is responsible for opening and listening to a TCP socket for
    incoming EST requests.  When data is ready to be read from
    the socket, this API entry point should be used to allow libEST
    to read the request from the socket and respond to the request.
 

    @return EST_ERROR.
*/</comment>
<function pos:start="1738:1" pos:end="1779:1"><type pos:start="1738:1" pos:end="1738:9"><name pos:start="1738:1" pos:end="1738:9">EST_ERROR</name></type> <name pos:start="1738:11" pos:end="1738:31">est_send_csrattr_data</name> <parameter_list pos:start="1738:33" pos:end="1738:91">(<parameter pos:start="1738:34" pos:end="1738:45"><decl pos:start="1738:34" pos:end="1738:45"><type pos:start="1738:34" pos:end="1738:45"><name pos:start="1738:34" pos:end="1738:40">EST_CTX</name> <modifier pos:start="1738:42" pos:end="1738:42">*</modifier></type><name pos:start="1738:43" pos:end="1738:45">ctx</name></decl></parameter>, <parameter pos:start="1738:48" pos:end="1738:61"><decl pos:start="1738:48" pos:end="1738:61"><type pos:start="1738:48" pos:end="1738:61"><name pos:start="1738:48" pos:end="1738:51">char</name> <modifier pos:start="1738:53" pos:end="1738:53">*</modifier></type><name pos:start="1738:54" pos:end="1738:61">csr_data</name></decl></parameter>, <parameter pos:start="1738:64" pos:end="1738:74"><decl pos:start="1738:64" pos:end="1738:74"><type pos:start="1738:64" pos:end="1738:74"><name pos:start="1738:64" pos:end="1738:66">int</name></type> <name pos:start="1738:68" pos:end="1738:74">csr_len</name></decl></parameter>, <parameter pos:start="1738:77" pos:end="1738:90"><decl pos:start="1738:77" pos:end="1738:90"><type pos:start="1738:77" pos:end="1738:90"><name pos:start="1738:77" pos:end="1738:80">void</name> <modifier pos:start="1738:82" pos:end="1738:82">*</modifier></type><name pos:start="1738:83" pos:end="1738:90">http_ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1739:1" pos:end="1779:1">{<block_content pos:start="1740:4" pos:end="1778:26">
   <decl_stmt pos:start="1740:4" pos:end="1740:35"><decl pos:start="1740:4" pos:end="1740:34"><type pos:start="1740:4" pos:end="1740:7"><name pos:start="1740:4" pos:end="1740:7">char</name></type> <name pos:start="1740:9" pos:end="1740:34"><name pos:start="1740:9" pos:end="1740:16">http_hdr</name><index pos:start="1740:17" pos:end="1740:34">[<expr pos:start="1740:18" pos:end="1740:33"><name pos:start="1740:18" pos:end="1740:33">EST_HTTP_HDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
   <decl_stmt pos:start="1741:4" pos:end="1741:14"><decl pos:start="1741:4" pos:end="1741:13"><type pos:start="1741:4" pos:end="1741:6"><name pos:start="1741:4" pos:end="1741:6">int</name></type> <name pos:start="1741:8" pos:end="1741:13">hdrlen</name></decl>;</decl_stmt>

   <if_stmt pos:start="1743:4" pos:end="1777:5"><if pos:start="1743:4" pos:end="1771:5">if <condition pos:start="1743:7" pos:end="1743:33">(<expr pos:start="1743:8" pos:end="1743:32"><operator pos:start="1743:8" pos:end="1743:8">(</operator><name pos:start="1743:9" pos:end="1743:15">csr_len</name> <operator pos:start="1743:17" pos:end="1743:17">&gt;</operator> <literal type="number" pos:start="1743:19" pos:end="1743:19">0</literal><operator pos:start="1743:20" pos:end="1743:20">)</operator> <operator pos:start="1743:22" pos:end="1743:23">&amp;&amp;</operator> <name pos:start="1743:25" pos:end="1743:32">csr_data</name></expr>)</condition> <block pos:start="1743:35" pos:end="1771:5">{<block_content pos:start="1747:9" pos:end="1770:23">
        <comment type="block" pos:start="1744:9" pos:end="1746:11">/*
         * Send HTTP 200 header
         */</comment>
        <expr_stmt pos:start="1747:9" pos:end="1748:58"><expr pos:start="1747:9" pos:end="1748:57"><call pos:start="1747:9" pos:end="1748:57"><name pos:start="1747:9" pos:end="1747:16">snprintf</name><argument_list pos:start="1747:17" pos:end="1748:57">(<argument pos:start="1747:18" pos:end="1747:25"><expr pos:start="1747:18" pos:end="1747:25"><name pos:start="1747:18" pos:end="1747:25">http_hdr</name></expr></argument>, <argument pos:start="1747:28" pos:end="1747:43"><expr pos:start="1747:28" pos:end="1747:43"><name pos:start="1747:28" pos:end="1747:43">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1747:46" pos:end="1747:55"><expr pos:start="1747:46" pos:end="1747:55"><literal type="string" pos:start="1747:46" pos:end="1747:55">"%s%s%s%s"</literal></expr></argument>, <argument pos:start="1747:58" pos:end="1747:73"><expr pos:start="1747:58" pos:end="1747:73"><name pos:start="1747:58" pos:end="1747:73">EST_HTTP_HDR_200</name></expr></argument>, <argument pos:start="1747:76" pos:end="1747:91"><expr pos:start="1747:76" pos:end="1747:91"><name pos:start="1747:76" pos:end="1747:91">EST_HTTP_HDR_EOL</name></expr></argument>,
                 <argument pos:start="1748:18" pos:end="1748:38"><expr pos:start="1748:18" pos:end="1748:38"><name pos:start="1748:18" pos:end="1748:38">EST_HTTP_HDR_STAT_200</name></expr></argument>, <argument pos:start="1748:41" pos:end="1748:56"><expr pos:start="1748:41" pos:end="1748:56"><name pos:start="1748:41" pos:end="1748:56">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1749:9" pos:end="1749:55"><expr pos:start="1749:9" pos:end="1749:54"><name pos:start="1749:9" pos:end="1749:14">hdrlen</name> <operator pos:start="1749:16" pos:end="1749:16">=</operator> <call pos:start="1749:18" pos:end="1749:54"><name pos:start="1749:18" pos:end="1749:26">strnlen_s</name><argument_list pos:start="1749:27" pos:end="1749:54">(<argument pos:start="1749:28" pos:end="1749:35"><expr pos:start="1749:28" pos:end="1749:35"><name pos:start="1749:28" pos:end="1749:35">http_hdr</name></expr></argument>, <argument pos:start="1749:38" pos:end="1749:53"><expr pos:start="1749:38" pos:end="1749:53"><name pos:start="1749:38" pos:end="1749:53">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1750:9" pos:end="1751:57"><expr pos:start="1750:9" pos:end="1751:56"><call pos:start="1750:9" pos:end="1751:56"><name pos:start="1750:9" pos:end="1750:16">snprintf</name><argument_list pos:start="1750:17" pos:end="1751:56">(<argument pos:start="1750:18" pos:end="1750:34"><expr pos:start="1750:18" pos:end="1750:34"><name pos:start="1750:18" pos:end="1750:25">http_hdr</name> <operator pos:start="1750:27" pos:end="1750:27">+</operator> <name pos:start="1750:29" pos:end="1750:34">hdrlen</name></expr></argument>, <argument pos:start="1750:37" pos:end="1750:52"><expr pos:start="1750:37" pos:end="1750:52"><name pos:start="1750:37" pos:end="1750:52">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1750:55" pos:end="1750:64"><expr pos:start="1750:55" pos:end="1750:64"><literal type="string" pos:start="1750:55" pos:end="1750:64">"%s: %s%s"</literal></expr></argument>, <argument pos:start="1750:67" pos:end="1750:81"><expr pos:start="1750:67" pos:end="1750:81"><name pos:start="1750:67" pos:end="1750:81">EST_HTTP_HDR_CT</name></expr></argument>,
                 <argument pos:start="1751:18" pos:end="1751:37"><expr pos:start="1751:18" pos:end="1751:37"><name pos:start="1751:18" pos:end="1751:37">EST_HTTP_CT_CSRATTRS</name></expr></argument>, <argument pos:start="1751:40" pos:end="1751:55"><expr pos:start="1751:40" pos:end="1751:55"><name pos:start="1751:40" pos:end="1751:55">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1752:9" pos:end="1752:55"><expr pos:start="1752:9" pos:end="1752:54"><name pos:start="1752:9" pos:end="1752:14">hdrlen</name> <operator pos:start="1752:16" pos:end="1752:16">=</operator> <call pos:start="1752:18" pos:end="1752:54"><name pos:start="1752:18" pos:end="1752:26">strnlen_s</name><argument_list pos:start="1752:27" pos:end="1752:54">(<argument pos:start="1752:28" pos:end="1752:35"><expr pos:start="1752:28" pos:end="1752:35"><name pos:start="1752:28" pos:end="1752:35">http_hdr</name></expr></argument>, <argument pos:start="1752:38" pos:end="1752:53"><expr pos:start="1752:38" pos:end="1752:53"><name pos:start="1752:38" pos:end="1752:53">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1753:9" pos:end="1754:55"><expr pos:start="1753:9" pos:end="1754:54"><call pos:start="1753:9" pos:end="1754:54"><name pos:start="1753:9" pos:end="1753:16">snprintf</name><argument_list pos:start="1753:17" pos:end="1754:54">(<argument pos:start="1753:18" pos:end="1753:34"><expr pos:start="1753:18" pos:end="1753:34"><name pos:start="1753:18" pos:end="1753:25">http_hdr</name> <operator pos:start="1753:27" pos:end="1753:27">+</operator> <name pos:start="1753:29" pos:end="1753:34">hdrlen</name></expr></argument>, <argument pos:start="1753:37" pos:end="1753:52"><expr pos:start="1753:37" pos:end="1753:52"><name pos:start="1753:37" pos:end="1753:52">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1753:55" pos:end="1753:64"><expr pos:start="1753:55" pos:end="1753:64"><literal type="string" pos:start="1753:55" pos:end="1753:64">"%s: %s%s"</literal></expr></argument>, <argument pos:start="1753:67" pos:end="1753:81"><expr pos:start="1753:67" pos:end="1753:81"><name pos:start="1753:67" pos:end="1753:81">EST_HTTP_HDR_CE</name></expr></argument>,
                 <argument pos:start="1754:18" pos:end="1754:35"><expr pos:start="1754:18" pos:end="1754:35"><name pos:start="1754:18" pos:end="1754:35">EST_HTTP_CE_BASE64</name></expr></argument>, <argument pos:start="1754:38" pos:end="1754:53"><expr pos:start="1754:38" pos:end="1754:53"><name pos:start="1754:38" pos:end="1754:53">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1755:9" pos:end="1755:55"><expr pos:start="1755:9" pos:end="1755:54"><name pos:start="1755:9" pos:end="1755:14">hdrlen</name> <operator pos:start="1755:16" pos:end="1755:16">=</operator> <call pos:start="1755:18" pos:end="1755:54"><name pos:start="1755:18" pos:end="1755:26">strnlen_s</name><argument_list pos:start="1755:27" pos:end="1755:54">(<argument pos:start="1755:28" pos:end="1755:35"><expr pos:start="1755:28" pos:end="1755:35"><name pos:start="1755:28" pos:end="1755:35">http_hdr</name></expr></argument>, <argument pos:start="1755:38" pos:end="1755:53"><expr pos:start="1755:38" pos:end="1755:53"><name pos:start="1755:38" pos:end="1755:53">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1756:9" pos:end="1757:62"><expr pos:start="1756:9" pos:end="1757:61"><call pos:start="1756:9" pos:end="1757:61"><name pos:start="1756:9" pos:end="1756:16">snprintf</name><argument_list pos:start="1756:17" pos:end="1757:61">(<argument pos:start="1756:18" pos:end="1756:34"><expr pos:start="1756:18" pos:end="1756:34"><name pos:start="1756:18" pos:end="1756:25">http_hdr</name> <operator pos:start="1756:27" pos:end="1756:27">+</operator> <name pos:start="1756:29" pos:end="1756:34">hdrlen</name></expr></argument>, <argument pos:start="1756:37" pos:end="1756:52"><expr pos:start="1756:37" pos:end="1756:52"><name pos:start="1756:37" pos:end="1756:52">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1756:55" pos:end="1756:66"><expr pos:start="1756:55" pos:end="1756:66"><literal type="string" pos:start="1756:55" pos:end="1756:66">"%s: %d%s%s"</literal></expr></argument>, <argument pos:start="1756:69" pos:end="1756:83"><expr pos:start="1756:69" pos:end="1756:83"><name pos:start="1756:69" pos:end="1756:83">EST_HTTP_HDR_CL</name></expr></argument>,
                 <argument pos:start="1757:18" pos:end="1757:24"><expr pos:start="1757:18" pos:end="1757:24"><name pos:start="1757:18" pos:end="1757:24">csr_len</name></expr></argument>, <argument pos:start="1757:27" pos:end="1757:42"><expr pos:start="1757:27" pos:end="1757:42"><name pos:start="1757:27" pos:end="1757:42">EST_HTTP_HDR_EOL</name></expr></argument>, <argument pos:start="1757:45" pos:end="1757:60"><expr pos:start="1757:45" pos:end="1757:60"><name pos:start="1757:45" pos:end="1757:60">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1758:9" pos:end="1761:9"><if pos:start="1758:9" pos:end="1761:9">if <condition pos:start="1758:12" pos:end="1758:81">(<expr pos:start="1758:13" pos:end="1758:80"><operator pos:start="1758:13" pos:end="1758:13">!</operator><call pos:start="1758:14" pos:end="1758:80"><name pos:start="1758:14" pos:end="1758:21">mg_write</name><argument_list pos:start="1758:22" pos:end="1758:80">(<argument pos:start="1758:23" pos:end="1758:30"><expr pos:start="1758:23" pos:end="1758:30"><name pos:start="1758:23" pos:end="1758:30">http_ctx</name></expr></argument>, <argument pos:start="1758:33" pos:end="1758:40"><expr pos:start="1758:33" pos:end="1758:40"><name pos:start="1758:33" pos:end="1758:40">http_hdr</name></expr></argument>, <argument pos:start="1758:43" pos:end="1758:79"><expr pos:start="1758:43" pos:end="1758:79"><call pos:start="1758:43" pos:end="1758:79"><name pos:start="1758:43" pos:end="1758:51">strnlen_s</name><argument_list pos:start="1758:52" pos:end="1758:79">(<argument pos:start="1758:53" pos:end="1758:60"><expr pos:start="1758:53" pos:end="1758:60"><name pos:start="1758:53" pos:end="1758:60">http_hdr</name></expr></argument>, <argument pos:start="1758:63" pos:end="1758:78"><expr pos:start="1758:63" pos:end="1758:78"><name pos:start="1758:63" pos:end="1758:78">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1758:83" pos:end="1761:9">{<block_content pos:start="1759:13" pos:end="1760:40">
            <expr_stmt pos:start="1759:13" pos:end="1759:27"><expr pos:start="1759:13" pos:end="1759:26"><call pos:start="1759:13" pos:end="1759:26"><name pos:start="1759:13" pos:end="1759:16">free</name><argument_list pos:start="1759:17" pos:end="1759:26">(<argument pos:start="1759:18" pos:end="1759:25"><expr pos:start="1759:18" pos:end="1759:25"><name pos:start="1759:18" pos:end="1759:25">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1760:13" pos:end="1760:40">return <expr pos:start="1760:20" pos:end="1760:39"><operator pos:start="1760:20" pos:end="1760:20">(</operator><name pos:start="1760:21" pos:end="1760:38">EST_ERR_HTTP_WRITE</name><operator pos:start="1760:39" pos:end="1760:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1763:9" pos:end="1765:11">/*
         * Send the CSR in the body
         */</comment>
        <if_stmt pos:start="1766:9" pos:end="1769:9"><if pos:start="1766:9" pos:end="1769:9">if <condition pos:start="1766:12" pos:end="1766:51">(<expr pos:start="1766:13" pos:end="1766:50"><operator pos:start="1766:13" pos:end="1766:13">!</operator><call pos:start="1766:14" pos:end="1766:50"><name pos:start="1766:14" pos:end="1766:21">mg_write</name><argument_list pos:start="1766:22" pos:end="1766:50">(<argument pos:start="1766:23" pos:end="1766:30"><expr pos:start="1766:23" pos:end="1766:30"><name pos:start="1766:23" pos:end="1766:30">http_ctx</name></expr></argument>, <argument pos:start="1766:33" pos:end="1766:40"><expr pos:start="1766:33" pos:end="1766:40"><name pos:start="1766:33" pos:end="1766:40">csr_data</name></expr></argument>, <argument pos:start="1766:43" pos:end="1766:49"><expr pos:start="1766:43" pos:end="1766:49"><name pos:start="1766:43" pos:end="1766:49">csr_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1766:53" pos:end="1769:9">{<block_content pos:start="1767:13" pos:end="1768:40">
            <expr_stmt pos:start="1767:13" pos:end="1767:27"><expr pos:start="1767:13" pos:end="1767:26"><call pos:start="1767:13" pos:end="1767:26"><name pos:start="1767:13" pos:end="1767:16">free</name><argument_list pos:start="1767:17" pos:end="1767:26">(<argument pos:start="1767:18" pos:end="1767:25"><expr pos:start="1767:18" pos:end="1767:25"><name pos:start="1767:18" pos:end="1767:25">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1768:13" pos:end="1768:40">return <expr pos:start="1768:20" pos:end="1768:39"><operator pos:start="1768:20" pos:end="1768:20">(</operator><name pos:start="1768:21" pos:end="1768:38">EST_ERR_HTTP_WRITE</name><operator pos:start="1768:39" pos:end="1768:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1770:9" pos:end="1770:23"><expr pos:start="1770:9" pos:end="1770:22"><call pos:start="1770:9" pos:end="1770:22"><name pos:start="1770:9" pos:end="1770:12">free</name><argument_list pos:start="1770:13" pos:end="1770:22">(<argument pos:start="1770:14" pos:end="1770:21"><expr pos:start="1770:14" pos:end="1770:21"><name pos:start="1770:14" pos:end="1770:21">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1771:7" pos:end="1777:5">else <block pos:start="1771:12" pos:end="1777:5">{<block_content pos:start="1772:9" pos:end="1776:68">
	<if_stmt pos:start="1772:9" pos:end="1774:9"><if pos:start="1772:9" pos:end="1774:9">if <condition pos:start="1772:12" pos:end="1772:21">(<expr pos:start="1772:13" pos:end="1772:20"><name pos:start="1772:13" pos:end="1772:20">csr_data</name></expr>)</condition> <block pos:start="1772:23" pos:end="1774:9">{<block_content pos:start="1773:13" pos:end="1773:27">
            <expr_stmt pos:start="1773:13" pos:end="1773:27"><expr pos:start="1773:13" pos:end="1773:26"><call pos:start="1773:13" pos:end="1773:26"><name pos:start="1773:13" pos:end="1773:16">free</name><argument_list pos:start="1773:17" pos:end="1773:26">(<argument pos:start="1773:18" pos:end="1773:25"><expr pos:start="1773:18" pos:end="1773:25"><name pos:start="1773:18" pos:end="1773:25">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1775:9" pos:end="1775:74">/* Send a 204 response indicating the server doesn't have a CSR */</comment>
	<expr_stmt pos:start="1776:9" pos:end="1776:68"><expr pos:start="1776:9" pos:end="1776:67"><call pos:start="1776:9" pos:end="1776:67"><name pos:start="1776:9" pos:end="1776:27">est_send_http_error</name><argument_list pos:start="1776:28" pos:end="1776:67">(<argument pos:start="1776:29" pos:end="1776:31"><expr pos:start="1776:29" pos:end="1776:31"><name pos:start="1776:29" pos:end="1776:31">ctx</name></expr></argument>, <argument pos:start="1776:34" pos:end="1776:41"><expr pos:start="1776:34" pos:end="1776:41"><name pos:start="1776:34" pos:end="1776:41">http_ctx</name></expr></argument>, <argument pos:start="1776:44" pos:end="1776:66"><expr pos:start="1776:44" pos:end="1776:66"><name pos:start="1776:44" pos:end="1776:66">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="1778:5" pos:end="1778:26">return <expr pos:start="1778:12" pos:end="1778:25"><operator pos:start="1778:12" pos:end="1778:12">(</operator><name pos:start="1778:13" pos:end="1778:24">EST_ERR_NONE</name><operator pos:start="1778:25" pos:end="1778:25">)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
