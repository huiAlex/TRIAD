<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="source_code/est_ossl_util.c" pos:tabs="8"><comment type="block" format="doxygen" pos:start="1:1" pos:end="3:90">/*****************************************************************************************
* Authorization routines
*****************************************************************************************/</comment>
<function pos:start="4:1" pos:end="61:1"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:18">ossl_verify_cb</name> <parameter_list pos:start="4:20" pos:end="4:48">(<parameter pos:start="4:21" pos:end="4:26"><decl pos:start="4:21" pos:end="4:26"><type pos:start="4:21" pos:end="4:26"><name pos:start="4:21" pos:end="4:23">int</name></type> <name pos:start="4:25" pos:end="4:26">ok</name></decl></parameter>, <parameter pos:start="4:29" pos:end="4:47"><decl pos:start="4:29" pos:end="4:47"><type pos:start="4:29" pos:end="4:47"><name pos:start="4:29" pos:end="4:42">X509_STORE_CTX</name> <modifier pos:start="4:44" pos:end="4:44">*</modifier></type><name pos:start="4:45" pos:end="4:47">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="6:5" pos:end="60:16">
    <decl_stmt pos:start="6:5" pos:end="6:51"><decl pos:start="6:5" pos:end="6:50"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:18">cert_error</name> <init pos:start="6:20" pos:end="6:50">= <expr pos:start="6:22" pos:end="6:50"><call pos:start="6:22" pos:end="6:50"><name pos:start="6:22" pos:end="6:45">X509_STORE_CTX_get_error</name><argument_list pos:start="6:46" pos:end="6:50">(<argument pos:start="6:47" pos:end="6:49"><expr pos:start="6:47" pos:end="6:49"><name pos:start="6:47" pos:end="6:49">ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">X509</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:22">current_cert</name> <init pos:start="7:24" pos:end="7:61">= <expr pos:start="7:26" pos:end="7:61"><call pos:start="7:26" pos:end="7:61"><name pos:start="7:26" pos:end="7:56">X509_STORE_CTX_get_current_cert</name><argument_list pos:start="7:57" pos:end="7:61">(<argument pos:start="7:58" pos:end="7:60"><expr pos:start="7:58" pos:end="7:60"><name pos:start="7:58" pos:end="7:60">ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:72"><expr pos:start="9:5" pos:end="9:71"><call pos:start="9:5" pos:end="9:71"><name pos:start="9:5" pos:end="9:16">EST_LOG_INFO</name><argument_list pos:start="9:17" pos:end="9:71">(<argument pos:start="9:18" pos:end="9:54"><expr pos:start="9:18" pos:end="9:54"><literal type="string" pos:start="9:18" pos:end="9:54">"enter function: ok=%d cert_error=%d"</literal></expr></argument>, <argument pos:start="9:57" pos:end="9:58"><expr pos:start="9:57" pos:end="9:58"><name pos:start="9:57" pos:end="9:58">ok</name></expr></argument>, <argument pos:start="9:61" pos:end="9:70"><expr pos:start="9:61" pos:end="9:70"><name pos:start="9:61" pos:end="9:70">cert_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="59:5"><if pos:start="11:5" pos:end="59:5">if <condition pos:start="11:8" pos:end="11:12">(<expr pos:start="11:9" pos:end="11:11"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:11">ok</name></expr>)</condition> <block pos:start="11:14" pos:end="59:5">{<block_content pos:start="12:9" pos:end="58:18">
        <if_stmt pos:start="12:9" pos:end="17:9"><if pos:start="12:9" pos:end="17:9">if <condition pos:start="12:12" pos:end="12:25">(<expr pos:start="12:13" pos:end="12:24"><name pos:start="12:13" pos:end="12:24">current_cert</name></expr>)</condition> <block pos:start="12:27" pos:end="17:9">{<block_content pos:start="13:13" pos:end="16:25">
            <expr_stmt pos:start="13:13" pos:end="15:54"><expr pos:start="13:13" pos:end="15:53"><call pos:start="13:13" pos:end="15:53"><name pos:start="13:13" pos:end="13:33">X509_NAME_print_ex_fp</name><argument_list pos:start="13:34" pos:end="15:53">(<argument pos:start="13:35" pos:end="13:40"><expr pos:start="13:35" pos:end="13:40"><name pos:start="13:35" pos:end="13:40">stdout</name></expr></argument>,
                                  <argument pos:start="14:35" pos:end="14:69"><expr pos:start="14:35" pos:end="14:69"><call pos:start="14:35" pos:end="14:69"><name pos:start="14:35" pos:end="14:55">X509_get_subject_name</name><argument_list pos:start="14:56" pos:end="14:69">(<argument pos:start="14:57" pos:end="14:68"><expr pos:start="14:57" pos:end="14:68"><name pos:start="14:57" pos:end="14:68">current_cert</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr></argument>, <argument pos:start="15:38" pos:end="15:52"><expr pos:start="15:38" pos:end="15:52"><name pos:start="15:38" pos:end="15:52">XN_FLAG_ONELINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="16:13" pos:end="16:25"><expr pos:start="16:13" pos:end="16:24"><call pos:start="16:13" pos:end="16:24"><name pos:start="16:13" pos:end="16:18">printf</name><argument_list pos:start="16:19" pos:end="16:24">(<argument pos:start="16:20" pos:end="16:23"><expr pos:start="16:20" pos:end="16:23"><literal type="string" pos:start="16:20" pos:end="16:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="18:9" pos:end="22:64"><expr pos:start="18:9" pos:end="22:63"><call pos:start="18:9" pos:end="22:63"><name pos:start="18:9" pos:end="18:20">EST_LOG_INFO</name><argument_list pos:start="18:21" pos:end="22:63">(<argument pos:start="18:22" pos:end="18:57"><expr pos:start="18:22" pos:end="18:57"><literal type="string" pos:start="18:22" pos:end="18:57">"%serror %d at %d depth lookup:%s\n"</literal></expr></argument>,
                     <argument pos:start="19:22" pos:end="19:76"><expr pos:start="19:22" pos:end="19:76"><ternary pos:start="19:22" pos:end="19:76"><condition pos:start="19:22" pos:end="19:58"><expr pos:start="19:22" pos:end="19:56"><call pos:start="19:22" pos:end="19:56"><name pos:start="19:22" pos:end="19:51">X509_STORE_CTX_get0_parent_ctx</name><argument_list pos:start="19:52" pos:end="19:56">(<argument pos:start="19:53" pos:end="19:55"><expr pos:start="19:53" pos:end="19:55"><name pos:start="19:53" pos:end="19:55">ctx</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="19:60" pos:end="19:71"> <expr pos:start="19:60" pos:end="19:71"><literal type="string" pos:start="19:60" pos:end="19:71">"[CRL path]"</literal></expr> </then><else pos:start="19:73" pos:end="19:76">: <expr pos:start="19:75" pos:end="19:76"><literal type="string" pos:start="19:75" pos:end="19:76">""</literal></expr></else></ternary></expr></argument>,
                     <argument pos:start="20:22" pos:end="20:31"><expr pos:start="20:22" pos:end="20:31"><name pos:start="20:22" pos:end="20:31">cert_error</name></expr></argument>,
                     <argument pos:start="21:22" pos:end="21:56"><expr pos:start="21:22" pos:end="21:56"><call pos:start="21:22" pos:end="21:56"><name pos:start="21:22" pos:end="21:51">X509_STORE_CTX_get_error_depth</name><argument_list pos:start="21:52" pos:end="21:56">(<argument pos:start="21:53" pos:end="21:55"><expr pos:start="21:53" pos:end="21:55"><name pos:start="21:53" pos:end="21:55">ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument pos:start="22:22" pos:end="22:62"><expr pos:start="22:22" pos:end="22:62"><call pos:start="22:22" pos:end="22:62"><name pos:start="22:22" pos:end="22:50">X509_verify_cert_error_string</name><argument_list pos:start="22:51" pos:end="22:62">(<argument pos:start="22:52" pos:end="22:61"><expr pos:start="22:52" pos:end="22:61"><name pos:start="22:52" pos:end="22:61">cert_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="23:9" pos:end="57:9">switch <condition pos:start="23:16" pos:end="23:27">(<expr pos:start="23:17" pos:end="23:26"><name pos:start="23:17" pos:end="23:26">cert_error</name></expr>)</condition> <block pos:start="23:29" pos:end="57:9">{<block_content pos:start="24:9" pos:end="56:18">
        <case pos:start="24:9" pos:end="24:42">case <expr pos:start="24:14" pos:end="24:41"><name pos:start="24:14" pos:end="24:41">X509_V_ERR_UNABLE_TO_GET_CRL</name></expr>:</case>
            <comment type="block" pos:start="25:13" pos:end="31:15">/*
             * We've enabled CRL checking in the TLS stack.  If
             * the application hasn't loaded a CRL, then this
             * verify error can occur.  The peer's cert is valid,
             * but we can't confirm if it was revoked.  We'll
             * warn the application.
             */</comment>
            <expr_stmt pos:start="32:13" pos:end="32:69"><expr pos:start="32:13" pos:end="32:68"><call pos:start="32:13" pos:end="32:68"><name pos:start="32:13" pos:end="32:24">EST_LOG_WARN</name><argument_list pos:start="32:25" pos:end="32:68">(<argument pos:start="32:26" pos:end="32:67"><expr pos:start="32:26" pos:end="32:67"><literal type="string" pos:start="32:26" pos:end="32:67">"No CRL loaded, TLS peer will be allowed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="33:13" pos:end="33:19"><expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:14">ok</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">1</literal></expr>;</expr_stmt>
            <break pos:start="34:13" pos:end="34:18">break;</break>
        <case pos:start="35:9" pos:end="35:43">case <expr pos:start="35:14" pos:end="35:42"><name pos:start="35:14" pos:end="35:42">X509_V_ERR_NO_EXPLICIT_POLICY</name></expr>:</case>
        <case pos:start="36:9" pos:end="36:41">case <expr pos:start="36:14" pos:end="36:40"><name pos:start="36:14" pos:end="36:40">X509_V_ERR_CERT_HAS_EXPIRED</name></expr>:</case>

        <comment type="block" pos:start="38:9" pos:end="41:11">/* since we are just checking the certificates, it is
         * ok if they are self signed. But we should still warn
         * the user.
         */</comment>

        <case pos:start="43:9" pos:end="43:52">case <expr pos:start="43:14" pos:end="43:51"><name pos:start="43:14" pos:end="43:51">X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</name></expr>:</case>
        <comment type="block" pos:start="44:9" pos:end="44:49">/* Continue after extension errors too */</comment>
        <case pos:start="45:9" pos:end="45:35">case <expr pos:start="45:14" pos:end="45:34"><name pos:start="45:14" pos:end="45:34">X509_V_ERR_INVALID_CA</name></expr>:</case>
        <case pos:start="46:9" pos:end="46:39">case <expr pos:start="46:14" pos:end="46:38"><name pos:start="46:14" pos:end="46:38">X509_V_ERR_INVALID_NON_CA</name></expr>:</case>
        <case pos:start="47:9" pos:end="47:45">case <expr pos:start="47:14" pos:end="47:44"><name pos:start="47:14" pos:end="47:44">X509_V_ERR_PATH_LENGTH_EXCEEDED</name></expr>:</case>
        <case pos:start="48:9" pos:end="48:40">case <expr pos:start="48:14" pos:end="48:39"><name pos:start="48:14" pos:end="48:39">X509_V_ERR_INVALID_PURPOSE</name></expr>:</case>
        <case pos:start="49:9" pos:end="49:40">case <expr pos:start="49:14" pos:end="49:39"><name pos:start="49:14" pos:end="49:39">X509_V_ERR_CRL_HAS_EXPIRED</name></expr>:</case>
        <case pos:start="50:9" pos:end="50:42">case <expr pos:start="50:14" pos:end="50:41"><name pos:start="50:14" pos:end="50:41">X509_V_ERR_CRL_NOT_YET_VALID</name></expr>:</case>
        <case pos:start="51:9" pos:end="51:53">case <expr pos:start="51:14" pos:end="51:52"><name pos:start="51:14" pos:end="51:52">X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION</name></expr>:</case>
        <case pos:start="52:9" pos:end="52:37">case <expr pos:start="52:14" pos:end="52:36"><name pos:start="52:14" pos:end="52:36">X509_V_ERR_CERT_REVOKED</name></expr>:</case>
        <default pos:start="53:9" pos:end="53:16">default:</default>
            <expr_stmt pos:start="54:13" pos:end="55:37"><expr pos:start="54:13" pos:end="55:36"><call pos:start="54:13" pos:end="55:36"><name pos:start="54:13" pos:end="54:24">EST_LOG_WARN</name><argument_list pos:start="54:25" pos:end="55:36">(<argument pos:start="54:26" pos:end="54:64"><expr pos:start="54:26" pos:end="54:64"><literal type="string" pos:start="54:26" pos:end="54:64">"Certificate verify failed (reason=%d)"</literal></expr></argument>,
                         <argument pos:start="55:26" pos:end="55:35"><expr pos:start="55:26" pos:end="55:35"><name pos:start="55:26" pos:end="55:35">cert_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="56:13" pos:end="56:18">break;</break>
        </block_content>}</block></switch>
        <return pos:start="58:9" pos:end="58:18">return <expr pos:start="58:16" pos:end="58:17"><name pos:start="58:16" pos:end="58:17">ok</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="60:5" pos:end="60:16">return <expr pos:start="60:12" pos:end="60:15"><operator pos:start="60:12" pos:end="60:12">(</operator><name pos:start="60:13" pos:end="60:14">ok</name><operator pos:start="60:15" pos:end="60:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="62:1" pos:end="68:3">/*
 * This function is used to load an X509_STORE using raw
 * data from a buffer.  The data is expected to be PEM
 * encoded.
 *
 * Returns the number of certs added to the store
 */</comment>
<function pos:start="69:1" pos:end="111:1"><type pos:start="69:1" pos:end="69:10"><specifier pos:start="69:1" pos:end="69:6">static</specifier> <name pos:start="69:8" pos:end="69:10">int</name></type> <name pos:start="69:12" pos:end="69:40">ossl_init_cert_store_from_raw</name> <parameter_list pos:start="69:42" pos:end="70:72">(<parameter pos:start="69:43" pos:end="69:59"><decl pos:start="69:43" pos:end="69:59"><type pos:start="69:43" pos:end="69:59"><name pos:start="69:43" pos:end="69:52">X509_STORE</name> <modifier pos:start="69:54" pos:end="69:54">*</modifier></type><name pos:start="69:55" pos:end="69:59">store</name></decl></parameter>,
                                           <parameter pos:start="70:44" pos:end="70:61"><decl pos:start="70:44" pos:end="70:61"><type pos:start="70:44" pos:end="70:61"><name pos:start="70:44" pos:end="70:51">unsigned</name> <name pos:start="70:53" pos:end="70:56">char</name> <modifier pos:start="70:58" pos:end="70:58">*</modifier></type><name pos:start="70:59" pos:end="70:61">raw</name></decl></parameter>, <parameter pos:start="70:64" pos:end="70:71"><decl pos:start="70:64" pos:end="70:71"><type pos:start="70:64" pos:end="70:71"><name pos:start="70:64" pos:end="70:66">int</name></type> <name pos:start="70:68" pos:end="70:71">size</name></decl></parameter>)</parameter_list>
<block pos:start="71:1" pos:end="111:1">{<block_content pos:start="72:5" pos:end="110:22">
    <expr_stmt pos:start="72:5" pos:end="72:36"><expr pos:start="72:5" pos:end="72:35"><call pos:start="72:5" pos:end="72:23"><name pos:start="72:5" pos:end="72:12">STACK_OF</name><argument_list pos:start="72:13" pos:end="72:23">(<argument pos:start="72:14" pos:end="72:22"><expr pos:start="72:14" pos:end="72:22"><name pos:start="72:14" pos:end="72:22">X509_INFO</name></expr></argument>)</argument_list></call> <operator pos:start="72:25" pos:end="72:25">*</operator> <name pos:start="72:27" pos:end="72:28">sk</name> <operator pos:start="72:30" pos:end="72:30">=</operator> <name pos:start="72:32" pos:end="72:35">NULL</name></expr>;</expr_stmt>
    <decl_stmt pos:start="73:5" pos:end="73:18"><decl pos:start="73:5" pos:end="73:17"><type pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:13">X509_INFO</name> <modifier pos:start="73:15" pos:end="73:15">*</modifier></type><name pos:start="73:16" pos:end="73:17">xi</name></decl>;</decl_stmt>
    <decl_stmt pos:start="74:5" pos:end="74:12"><decl pos:start="74:5" pos:end="74:11"><type pos:start="74:5" pos:end="74:9"><name pos:start="74:5" pos:end="74:7">BIO</name> <modifier pos:start="74:9" pos:end="74:9">*</modifier></type><name pos:start="74:10" pos:end="74:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="75:5" pos:end="75:21"><decl pos:start="75:5" pos:end="75:20"><type pos:start="75:5" pos:end="75:7"><name pos:start="75:5" pos:end="75:7">int</name></type> <name pos:start="75:9" pos:end="75:16">cert_cnt</name> <init pos:start="75:18" pos:end="75:20">= <expr pos:start="75:20" pos:end="75:20"><literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:36"><expr pos:start="77:5" pos:end="77:35"><name pos:start="77:5" pos:end="77:6">in</name> <operator pos:start="77:8" pos:end="77:8">=</operator> <call pos:start="77:10" pos:end="77:35"><name pos:start="77:10" pos:end="77:24">BIO_new_mem_buf</name><argument_list pos:start="77:25" pos:end="77:35">(<argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">raw</name></expr></argument>, <argument pos:start="77:31" pos:end="77:34"><expr pos:start="77:31" pos:end="77:34"><name pos:start="77:31" pos:end="77:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="78:5" pos:end="81:5"><if pos:start="78:5" pos:end="81:5">if <condition pos:start="78:8" pos:end="78:19">(<expr pos:start="78:9" pos:end="78:18"><name pos:start="78:9" pos:end="78:10">in</name> <operator pos:start="78:12" pos:end="78:13">==</operator> <name pos:start="78:15" pos:end="78:18">NULL</name></expr>)</condition> <block pos:start="78:21" pos:end="81:5">{<block_content pos:start="79:9" pos:end="80:17">
        <expr_stmt pos:start="79:9" pos:end="79:63"><expr pos:start="79:9" pos:end="79:62"><call pos:start="79:9" pos:end="79:62"><name pos:start="79:9" pos:end="79:19">EST_LOG_ERR</name><argument_list pos:start="79:20" pos:end="79:62">(<argument pos:start="79:21" pos:end="79:61"><expr pos:start="79:21" pos:end="79:61"><literal type="string" pos:start="79:21" pos:end="79:61">"Unable to open the raw CA cert buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="80:9" pos:end="80:17">return <expr pos:start="80:16" pos:end="80:16"><literal type="number" pos:start="80:16" pos:end="80:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="83:5" pos:end="83:63">/* This loads from a file, a stack of x509/crl/pkey sets */</comment>
    <expr_stmt pos:start="84:5" pos:end="84:54"><expr pos:start="84:5" pos:end="84:53"><name pos:start="84:5" pos:end="84:6">sk</name> <operator pos:start="84:8" pos:end="84:8">=</operator> <call pos:start="84:10" pos:end="84:53"><name pos:start="84:10" pos:end="84:31">PEM_X509_INFO_read_bio</name><argument_list pos:start="84:32" pos:end="84:53">(<argument pos:start="84:33" pos:end="84:34"><expr pos:start="84:33" pos:end="84:34"><name pos:start="84:33" pos:end="84:34">in</name></expr></argument>, <argument pos:start="84:37" pos:end="84:40"><expr pos:start="84:37" pos:end="84:40"><name pos:start="84:37" pos:end="84:40">NULL</name></expr></argument>, <argument pos:start="84:43" pos:end="84:46"><expr pos:start="84:43" pos:end="84:46"><name pos:start="84:43" pos:end="84:46">NULL</name></expr></argument>, <argument pos:start="84:49" pos:end="84:52"><expr pos:start="84:49" pos:end="84:52"><name pos:start="84:49" pos:end="84:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:19">(<expr pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:10">sk</name> <operator pos:start="85:12" pos:end="85:13">==</operator> <name pos:start="85:15" pos:end="85:18">NULL</name></expr>)</condition> <block pos:start="85:21" pos:end="89:5">{<block_content pos:start="86:9" pos:end="88:17">
        <expr_stmt pos:start="86:9" pos:end="86:65"><expr pos:start="86:9" pos:end="86:64"><call pos:start="86:9" pos:end="86:64"><name pos:start="86:9" pos:end="86:19">EST_LOG_ERR</name><argument_list pos:start="86:20" pos:end="86:64">(<argument pos:start="86:21" pos:end="86:63"><expr pos:start="86:21" pos:end="86:63"><literal type="string" pos:start="86:21" pos:end="86:63">"Unable to read PEM encoded certs from BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="87:9" pos:end="87:21"><expr pos:start="87:9" pos:end="87:20"><call pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:16">BIO_free</name><argument_list pos:start="87:17" pos:end="87:20">(<argument pos:start="87:18" pos:end="87:19"><expr pos:start="87:18" pos:end="87:19"><name pos:start="87:18" pos:end="87:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="88:9" pos:end="88:17">return <expr pos:start="88:16" pos:end="88:16"><literal type="number" pos:start="88:16" pos:end="88:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="90:5" pos:end="90:17"><expr pos:start="90:5" pos:end="90:16"><call pos:start="90:5" pos:end="90:16"><name pos:start="90:5" pos:end="90:12">BIO_free</name><argument_list pos:start="90:13" pos:end="90:16">(<argument pos:start="90:14" pos:end="90:15"><expr pos:start="90:14" pos:end="90:15"><name pos:start="90:14" pos:end="90:15">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="92:5" pos:end="92:45">/* scan over it and pull out the CRL's */</comment>
    <while pos:start="93:5" pos:end="105:5">while <condition pos:start="93:11" pos:end="93:32">(<expr pos:start="93:12" pos:end="93:31"><call pos:start="93:12" pos:end="93:31"><name pos:start="93:12" pos:end="93:27">sk_X509_INFO_num</name><argument_list pos:start="93:28" pos:end="93:31">(<argument pos:start="93:29" pos:end="93:30"><expr pos:start="93:29" pos:end="93:30"><name pos:start="93:29" pos:end="93:30">sk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:34" pos:end="105:5">{<block_content pos:start="94:9" pos:end="104:27">
        <expr_stmt pos:start="94:9" pos:end="94:36"><expr pos:start="94:9" pos:end="94:35"><name pos:start="94:9" pos:end="94:10">xi</name> <operator pos:start="94:12" pos:end="94:12">=</operator> <call pos:start="94:14" pos:end="94:35"><name pos:start="94:14" pos:end="94:31">sk_X509_INFO_shift</name><argument_list pos:start="94:32" pos:end="94:35">(<argument pos:start="94:33" pos:end="94:34"><expr pos:start="94:33" pos:end="94:34"><name pos:start="94:33" pos:end="94:34">sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:29">(<expr pos:start="95:13" pos:end="95:28"><name pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:14">xi</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:20">x509</name></name> <operator pos:start="95:22" pos:end="95:23">!=</operator> <name pos:start="95:25" pos:end="95:28">NULL</name></expr>)</condition> <block pos:start="95:31" pos:end="99:9">{<block_content pos:start="96:13" pos:end="98:23">
            <expr_stmt pos:start="96:13" pos:end="96:70"><expr pos:start="96:13" pos:end="96:69"><call pos:start="96:13" pos:end="96:69"><name pos:start="96:13" pos:end="96:24">EST_LOG_INFO</name><argument_list pos:start="96:25" pos:end="96:69">(<argument pos:start="96:26" pos:end="96:52"><expr pos:start="96:26" pos:end="96:52"><literal type="string" pos:start="96:26" pos:end="96:52">"Adding cert to store (%s)"</literal></expr></argument>, <argument pos:start="96:55" pos:end="96:68"><expr pos:start="96:55" pos:end="96:68"><name pos:start="96:55" pos:end="96:68"><name pos:start="96:55" pos:end="96:56">xi</name><operator pos:start="96:57" pos:end="96:58">-&gt;</operator><name pos:start="96:59" pos:end="96:62">x509</name><operator pos:start="96:63" pos:end="96:64">-&gt;</operator><name pos:start="96:65" pos:end="96:68">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="97:13" pos:end="97:49"><expr pos:start="97:13" pos:end="97:48"><call pos:start="97:13" pos:end="97:48"><name pos:start="97:13" pos:end="97:31">X509_STORE_add_cert</name><argument_list pos:start="97:32" pos:end="97:48">(<argument pos:start="97:33" pos:end="97:37"><expr pos:start="97:33" pos:end="97:37"><name pos:start="97:33" pos:end="97:37">store</name></expr></argument>, <argument pos:start="97:40" pos:end="97:47"><expr pos:start="97:40" pos:end="97:47"><name pos:start="97:40" pos:end="97:47"><name pos:start="97:40" pos:end="97:41">xi</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:47">x509</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="98:13" pos:end="98:23"><expr pos:start="98:13" pos:end="98:22"><name pos:start="98:13" pos:end="98:20">cert_cnt</name><operator pos:start="98:21" pos:end="98:22">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="100:9" pos:end="103:9"><if pos:start="100:9" pos:end="103:9">if <condition pos:start="100:12" pos:end="100:28">(<expr pos:start="100:13" pos:end="100:27"><name pos:start="100:13" pos:end="100:19"><name pos:start="100:13" pos:end="100:14">xi</name><operator pos:start="100:15" pos:end="100:16">-&gt;</operator><name pos:start="100:17" pos:end="100:19">crl</name></name> <operator pos:start="100:21" pos:end="100:22">!=</operator> <name pos:start="100:24" pos:end="100:27">NULL</name></expr>)</condition> <block pos:start="100:30" pos:end="103:9">{<block_content pos:start="101:13" pos:end="102:47">
            <expr_stmt pos:start="101:13" pos:end="101:48"><expr pos:start="101:13" pos:end="101:47"><call pos:start="101:13" pos:end="101:47"><name pos:start="101:13" pos:end="101:24">EST_LOG_INFO</name><argument_list pos:start="101:25" pos:end="101:47">(<argument pos:start="101:26" pos:end="101:46"><expr pos:start="101:26" pos:end="101:46"><literal type="string" pos:start="101:26" pos:end="101:46">"Adding CRL to store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="102:13" pos:end="102:47"><expr pos:start="102:13" pos:end="102:46"><call pos:start="102:13" pos:end="102:46"><name pos:start="102:13" pos:end="102:30">X509_STORE_add_crl</name><argument_list pos:start="102:31" pos:end="102:46">(<argument pos:start="102:32" pos:end="102:36"><expr pos:start="102:32" pos:end="102:36"><name pos:start="102:32" pos:end="102:36">store</name></expr></argument>, <argument pos:start="102:39" pos:end="102:45"><expr pos:start="102:39" pos:end="102:45"><name pos:start="102:39" pos:end="102:45"><name pos:start="102:39" pos:end="102:40">xi</name><operator pos:start="102:41" pos:end="102:42">-&gt;</operator><name pos:start="102:43" pos:end="102:45">crl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="104:9" pos:end="104:27"><expr pos:start="104:9" pos:end="104:26"><call pos:start="104:9" pos:end="104:26"><name pos:start="104:9" pos:end="104:22">X509_INFO_free</name><argument_list pos:start="104:23" pos:end="104:26">(<argument pos:start="104:24" pos:end="104:25"><expr pos:start="104:24" pos:end="104:25"><name pos:start="104:24" pos:end="104:25">xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt pos:start="107:5" pos:end="109:5"><if pos:start="107:5" pos:end="109:5">if <condition pos:start="107:8" pos:end="107:19">(<expr pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:10">sk</name> <operator pos:start="107:12" pos:end="107:13">!=</operator> <name pos:start="107:15" pos:end="107:18">NULL</name></expr>)</condition> <block pos:start="107:21" pos:end="109:5">{<block_content pos:start="108:9" pos:end="108:50">
        <expr_stmt pos:start="108:9" pos:end="108:50"><expr pos:start="108:9" pos:end="108:49"><call pos:start="108:9" pos:end="108:49"><name pos:start="108:9" pos:end="108:29">sk_X509_INFO_pop_free</name><argument_list pos:start="108:30" pos:end="108:49">(<argument pos:start="108:31" pos:end="108:32"><expr pos:start="108:31" pos:end="108:32"><name pos:start="108:31" pos:end="108:32">sk</name></expr></argument>, <argument pos:start="108:35" pos:end="108:48"><expr pos:start="108:35" pos:end="108:48"><name pos:start="108:35" pos:end="108:48">X509_INFO_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="110:5" pos:end="110:22">return <expr pos:start="110:12" pos:end="110:21"><operator pos:start="110:12" pos:end="110:12">(</operator><name pos:start="110:13" pos:end="110:20">cert_cnt</name><operator pos:start="110:21" pos:end="110:21">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="112:1" pos:end="122:3">/*
 * This function is used to populate an X509_STORE structure,
 * which can be used by the OpenSSL TLS stack to verifying
 * a TLS peer.  The X509_STORE should already have been allocated.
 *
 * Parameters:
 *  store   - Pointer to X509_STORE structure to hold the certs
 *  raw1    - char array containing PEM encoded certs to put
 *            into the store.
 *  size1   - Length of the raw1 char array
 */</comment>
<function pos:start="123:1" pos:end="137:1"><type pos:start="123:1" pos:end="123:9"><name pos:start="123:1" pos:end="123:9">EST_ERROR</name></type> <name pos:start="123:11" pos:end="123:30">ossl_init_cert_store</name> <parameter_list pos:start="123:32" pos:end="124:63">(<parameter pos:start="123:33" pos:end="123:49"><decl pos:start="123:33" pos:end="123:49"><type pos:start="123:33" pos:end="123:49"><name pos:start="123:33" pos:end="123:42">X509_STORE</name> <modifier pos:start="123:44" pos:end="123:44">*</modifier></type><name pos:start="123:45" pos:end="123:49">store</name></decl></parameter>,
                                <parameter pos:start="124:33" pos:end="124:51"><decl pos:start="124:33" pos:end="124:51"><type pos:start="124:33" pos:end="124:51"><name pos:start="124:33" pos:end="124:40">unsigned</name> <name pos:start="124:42" pos:end="124:45">char</name> <modifier pos:start="124:47" pos:end="124:47">*</modifier></type><name pos:start="124:48" pos:end="124:51">raw1</name></decl></parameter>, <parameter pos:start="124:54" pos:end="124:62"><decl pos:start="124:54" pos:end="124:62"><type pos:start="124:54" pos:end="124:62"><name pos:start="124:54" pos:end="124:56">int</name></type> <name pos:start="124:58" pos:end="124:62">size1</name></decl></parameter>)</parameter_list>
<block pos:start="125:1" pos:end="137:1">{<block_content pos:start="126:5" pos:end="136:26">
    <expr_stmt pos:start="126:5" pos:end="126:35"><expr pos:start="126:5" pos:end="126:34"><call pos:start="126:5" pos:end="126:34"><name pos:start="126:5" pos:end="126:24">X509_STORE_set_flags</name><argument_list pos:start="126:25" pos:end="126:34">(<argument pos:start="126:26" pos:end="126:30"><expr pos:start="126:26" pos:end="126:30"><name pos:start="126:26" pos:end="126:30">store</name></expr></argument>, <argument pos:start="126:33" pos:end="126:33"><expr pos:start="126:33" pos:end="126:33"><literal type="number" pos:start="126:33" pos:end="126:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="127:5" pos:end="127:12"><decl pos:start="127:5" pos:end="127:11"><type pos:start="127:5" pos:end="127:7"><name pos:start="127:5" pos:end="127:7">int</name></type> <name pos:start="127:9" pos:end="127:11">cnt</name></decl>;</decl_stmt>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:13">(<expr pos:start="129:9" pos:end="129:12"><name pos:start="129:9" pos:end="129:12">raw1</name></expr>)</condition> <block pos:start="129:15" pos:end="135:5">{<block_content pos:start="130:9" pos:end="134:9">
        <expr_stmt pos:start="130:9" pos:end="130:64"><expr pos:start="130:9" pos:end="130:63"><name pos:start="130:9" pos:end="130:11">cnt</name> <operator pos:start="130:13" pos:end="130:13">=</operator> <call pos:start="130:15" pos:end="130:63"><name pos:start="130:15" pos:end="130:43">ossl_init_cert_store_from_raw</name><argument_list pos:start="130:44" pos:end="130:63">(<argument pos:start="130:45" pos:end="130:49"><expr pos:start="130:45" pos:end="130:49"><name pos:start="130:45" pos:end="130:49">store</name></expr></argument>, <argument pos:start="130:52" pos:end="130:55"><expr pos:start="130:52" pos:end="130:55"><name pos:start="130:52" pos:end="130:55">raw1</name></expr></argument>, <argument pos:start="130:58" pos:end="130:62"><expr pos:start="130:58" pos:end="130:62"><name pos:start="130:58" pos:end="130:62">size1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="131:9" pos:end="134:9"><if pos:start="131:9" pos:end="134:9">if <condition pos:start="131:12" pos:end="131:17">(<expr pos:start="131:13" pos:end="131:16"><operator pos:start="131:13" pos:end="131:13">!</operator><name pos:start="131:14" pos:end="131:16">cnt</name></expr>)</condition> <block pos:start="131:19" pos:end="134:9">{<block_content pos:start="132:13" pos:end="133:44">
	    <expr_stmt pos:start="132:13" pos:end="132:56"><expr pos:start="132:13" pos:end="132:55"><call pos:start="132:13" pos:end="132:55"><name pos:start="132:13" pos:end="132:23">EST_LOG_ERR</name><argument_list pos:start="132:24" pos:end="132:55">(<argument pos:start="132:25" pos:end="132:54"><expr pos:start="132:25" pos:end="132:54"><literal type="string" pos:start="132:25" pos:end="132:54">"Cert count is zero for store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="133:13" pos:end="133:44">return <expr pos:start="133:20" pos:end="133:43"><operator pos:start="133:20" pos:end="133:20">(</operator><name pos:start="133:21" pos:end="133:42">EST_ERR_NO_CERTS_FOUND</name><operator pos:start="133:43" pos:end="133:43">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="136:5" pos:end="136:26">return <expr pos:start="136:12" pos:end="136:25"><operator pos:start="136:12" pos:end="136:12">(</operator><name pos:start="136:13" pos:end="136:24">EST_ERR_NONE</name><operator pos:start="136:25" pos:end="136:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="138:1" pos:end="144:3">/*
 * This function can be used to output the OpenSSL
 * error buffer.  This is useful when an OpenSSL
 * API call fails and you'd like to provide some
 * detail to the user regarding the cause of the
 * failure.
 */</comment>
<function pos:start="145:1" pos:end="160:1"><type pos:start="145:1" pos:end="145:4"><name pos:start="145:1" pos:end="145:4">void</name></type> <name pos:start="145:6" pos:end="145:25">ossl_dump_ssl_errors</name> <parameter_list pos:start="145:27" pos:end="145:28">()</parameter_list>
<block pos:start="146:1" pos:end="160:1">{<block_content pos:start="147:5" pos:end="159:20">
    <decl_stmt pos:start="147:5" pos:end="147:26"><decl pos:start="147:5" pos:end="147:25"><type pos:start="147:5" pos:end="147:17"><name pos:start="147:5" pos:end="147:7">BIO</name>		<modifier pos:start="147:17" pos:end="147:17">*</modifier></type><name pos:start="147:18" pos:end="147:18">e</name> <init pos:start="147:20" pos:end="147:25">= <expr pos:start="147:22" pos:end="147:25"><name pos:start="147:22" pos:end="147:25">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="148:5" pos:end="148:29"><decl pos:start="148:5" pos:end="148:28"><type pos:start="148:5" pos:end="148:17"><name pos:start="148:5" pos:end="148:11">BUF_MEM</name>	<modifier pos:start="148:17" pos:end="148:17">*</modifier></type><name pos:start="148:18" pos:end="148:21">bptr</name> <init pos:start="148:23" pos:end="148:28">= <expr pos:start="148:25" pos:end="148:28"><name pos:start="148:25" pos:end="148:28">NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:29"><expr pos:start="150:5" pos:end="150:28"><name pos:start="150:5" pos:end="150:5">e</name> <operator pos:start="150:7" pos:end="150:7">=</operator> <call pos:start="150:9" pos:end="150:28"><name pos:start="150:9" pos:end="150:15">BIO_new</name><argument_list pos:start="150:16" pos:end="150:28">(<argument pos:start="150:17" pos:end="150:27"><expr pos:start="150:17" pos:end="150:27"><call pos:start="150:17" pos:end="150:27"><name pos:start="150:17" pos:end="150:25">BIO_s_mem</name><argument_list pos:start="150:26" pos:end="150:27">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="151:5" pos:end="154:5"><if pos:start="151:5" pos:end="154:5">if <condition pos:start="151:8" pos:end="151:11">(<expr pos:start="151:9" pos:end="151:10"><operator pos:start="151:9" pos:end="151:9">!</operator><name pos:start="151:10" pos:end="151:10">e</name></expr>)</condition> <block pos:start="151:13" pos:end="154:5">{<block_content pos:start="152:9" pos:end="153:15">
	<expr_stmt pos:start="152:9" pos:end="152:38"><expr pos:start="152:9" pos:end="152:37"><call pos:start="152:9" pos:end="152:37"><name pos:start="152:9" pos:end="152:19">EST_LOG_ERR</name><argument_list pos:start="152:20" pos:end="152:37">(<argument pos:start="152:21" pos:end="152:36"><expr pos:start="152:21" pos:end="152:36"><literal type="string" pos:start="152:21" pos:end="152:36">"BIO_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="153:9" pos:end="153:15">return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="155:5" pos:end="155:24"><expr pos:start="155:5" pos:end="155:23"><call pos:start="155:5" pos:end="155:23"><name pos:start="155:5" pos:end="155:20">ERR_print_errors</name><argument_list pos:start="155:21" pos:end="155:23">(<argument pos:start="155:22" pos:end="155:22"><expr pos:start="155:22" pos:end="155:22"><name pos:start="155:22" pos:end="155:22">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="156:5" pos:end="156:23"><expr pos:start="156:5" pos:end="156:22"><operator pos:start="156:5" pos:end="156:5">(</operator><name pos:start="156:6" pos:end="156:9">void</name><operator pos:start="156:10" pos:end="156:10">)</operator><call pos:start="156:11" pos:end="156:22"><name pos:start="156:11" pos:end="156:19">BIO_flush</name><argument_list pos:start="156:20" pos:end="156:22">(<argument pos:start="156:21" pos:end="156:21"><expr pos:start="156:21" pos:end="156:21"><name pos:start="156:21" pos:end="156:21">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="157:5" pos:end="157:30"><expr pos:start="157:5" pos:end="157:29"><call pos:start="157:5" pos:end="157:29"><name pos:start="157:5" pos:end="157:19">BIO_get_mem_ptr</name><argument_list pos:start="157:20" pos:end="157:29">(<argument pos:start="157:21" pos:end="157:21"><expr pos:start="157:21" pos:end="157:21"><name pos:start="157:21" pos:end="157:21">e</name></expr></argument>, <argument pos:start="157:24" pos:end="157:28"><expr pos:start="157:24" pos:end="157:28"><operator pos:start="157:24" pos:end="157:24">&amp;</operator><name pos:start="157:25" pos:end="157:28">bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="158:5" pos:end="158:47"><expr pos:start="158:5" pos:end="158:46"><call pos:start="158:5" pos:end="158:46"><name pos:start="158:5" pos:end="158:16">EST_LOG_WARN</name><argument_list pos:start="158:17" pos:end="158:46">(<argument pos:start="158:18" pos:end="158:33"><expr pos:start="158:18" pos:end="158:33"><literal type="string" pos:start="158:18" pos:end="158:33">"OSSL error: %s"</literal></expr></argument>, <argument pos:start="158:36" pos:end="158:45"><expr pos:start="158:36" pos:end="158:45"><name pos:start="158:36" pos:end="158:45"><name pos:start="158:36" pos:end="158:39">bptr</name><operator pos:start="158:40" pos:end="158:41">-&gt;</operator><name pos:start="158:42" pos:end="158:45">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt pos:start="159:5" pos:end="159:20"><expr pos:start="159:5" pos:end="159:19"><call pos:start="159:5" pos:end="159:19"><name pos:start="159:5" pos:end="159:16">BIO_free_all</name><argument_list pos:start="159:17" pos:end="159:19">(<argument pos:start="159:18" pos:end="159:18"><expr pos:start="159:18" pos:end="159:18"><name pos:start="159:18" pos:end="159:18">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="161:1" pos:end="175:3">/*! @brief est_convert_p7b64_to_pem() converts the base64 encoded
    PKCS7 response from the EST server into PEM format.   
 
    @param certs_p7 Points to a buffer containing the base64 encoded pkcs7 data.
    @param certs_len Indicates the size of the *certs_p7 buffer.
    @param pem Double pointer that will receive the PEM encoded data. 
 
    Several of the EST message return data that contains base64 encoded PKCS7
    certificates.  This function is used to convert the data to PEM format.
    This function will allocate memory pointed to by the **pem argument.
    The caller is responsible for releasing this memory.  The return value
    is the length of the PEM buffer, or -1 on error.
 
    @return int.
 */</comment>
<function pos:start="176:1" pos:end="295:1"><type pos:start="176:1" pos:end="176:3"><name pos:start="176:1" pos:end="176:3">int</name></type> <name pos:start="176:5" pos:end="176:28">est_convert_p7b64_to_pem</name> <parameter_list pos:start="176:30" pos:end="176:90">(<parameter pos:start="176:31" pos:end="176:53"><decl pos:start="176:31" pos:end="176:53"><type pos:start="176:31" pos:end="176:53"><name pos:start="176:31" pos:end="176:38">unsigned</name> <name pos:start="176:40" pos:end="176:43">char</name> <modifier pos:start="176:45" pos:end="176:45">*</modifier></type><name pos:start="176:46" pos:end="176:53">certs_p7</name></decl></parameter>, <parameter pos:start="176:56" pos:end="176:68"><decl pos:start="176:56" pos:end="176:68"><type pos:start="176:56" pos:end="176:68"><name pos:start="176:56" pos:end="176:58">int</name></type> <name pos:start="176:60" pos:end="176:68">certs_len</name></decl></parameter>, <parameter pos:start="176:71" pos:end="176:89"><decl pos:start="176:71" pos:end="176:89"><type pos:start="176:71" pos:end="176:89"><name pos:start="176:71" pos:end="176:78">unsigned</name> <name pos:start="176:80" pos:end="176:83">char</name> <modifier pos:start="176:85" pos:end="176:85">*</modifier><modifier pos:start="176:86" pos:end="176:86">*</modifier></type><name pos:start="176:87" pos:end="176:89">pem</name></decl></parameter>)</parameter_list>
<block pos:start="177:1" pos:end="295:1">{<block_content pos:start="178:5" pos:end="294:21">
    <decl_stmt pos:start="178:5" pos:end="178:12"><decl pos:start="178:5" pos:end="178:11"><type pos:start="178:5" pos:end="178:10"><name pos:start="178:5" pos:end="178:8">X509</name> <modifier pos:start="178:10" pos:end="178:10">*</modifier></type><name pos:start="178:11" pos:end="178:11">x</name></decl>;</decl_stmt>
    <expr_stmt pos:start="179:5" pos:end="179:33"><expr pos:start="179:5" pos:end="179:32"><call pos:start="179:5" pos:end="179:18"><name pos:start="179:5" pos:end="179:12">STACK_OF</name><argument_list pos:start="179:13" pos:end="179:18">(<argument pos:start="179:14" pos:end="179:17"><expr pos:start="179:14" pos:end="179:17"><name pos:start="179:14" pos:end="179:17">X509</name></expr></argument>)</argument_list></call> <operator pos:start="179:20" pos:end="179:20">*</operator><name pos:start="179:21" pos:end="179:25">certs</name> <operator pos:start="179:27" pos:end="179:27">=</operator> <name pos:start="179:29" pos:end="179:32">NULL</name></expr>;</expr_stmt>
    <decl_stmt pos:start="180:5" pos:end="180:24"><decl pos:start="180:5" pos:end="180:12"><type pos:start="180:5" pos:end="180:9"><name pos:start="180:5" pos:end="180:7">BIO</name> <modifier pos:start="180:9" pos:end="180:9">*</modifier></type><name pos:start="180:10" pos:end="180:12">b64</name></decl>, <decl pos:start="180:15" pos:end="180:17"><type ref="prev" pos:start="180:5" pos:end="180:9"><modifier pos:start="180:15" pos:end="180:15">*</modifier></type><name pos:start="180:16" pos:end="180:17">in</name></decl>, <decl pos:start="180:20" pos:end="180:23"><type ref="prev" pos:start="180:5" pos:end="180:9"><modifier pos:start="180:20" pos:end="180:20">*</modifier></type><name pos:start="180:21" pos:end="180:23">out</name></decl>;</decl_stmt>
    <decl_stmt pos:start="181:5" pos:end="181:42"><decl pos:start="181:5" pos:end="181:41"><type pos:start="181:5" pos:end="181:19"><name pos:start="181:5" pos:end="181:12">unsigned</name> <name pos:start="181:14" pos:end="181:17">char</name> <modifier pos:start="181:19" pos:end="181:19">*</modifier></type><name pos:start="181:20" pos:end="181:34">cacerts_decoded</name> <init pos:start="181:36" pos:end="181:41">= <expr pos:start="181:38" pos:end="181:41"><name pos:start="181:38" pos:end="181:41">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="182:5" pos:end="182:33"><decl pos:start="182:5" pos:end="182:32"><type pos:start="182:5" pos:end="182:7"><name pos:start="182:5" pos:end="182:7">int</name></type>  <name pos:start="182:10" pos:end="182:28">cacerts_decoded_len</name> <init pos:start="182:30" pos:end="182:32">= <expr pos:start="182:32" pos:end="182:32"><literal type="number" pos:start="182:32" pos:end="182:32">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="183:5" pos:end="183:25"><decl pos:start="183:5" pos:end="183:24"><type pos:start="183:5" pos:end="183:9"><name pos:start="183:5" pos:end="183:7">BIO</name> <modifier pos:start="183:9" pos:end="183:9">*</modifier></type><name pos:start="183:10" pos:end="183:17">p7bio_in</name> <init pos:start="183:19" pos:end="183:24">= <expr pos:start="183:21" pos:end="183:24"><name pos:start="183:21" pos:end="183:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="184:5" pos:end="184:19"><decl pos:start="184:5" pos:end="184:18"><type pos:start="184:5" pos:end="184:11"><name pos:start="184:5" pos:end="184:9">PKCS7</name> <modifier pos:start="184:11" pos:end="184:11">*</modifier></type><name pos:start="184:12" pos:end="184:13">p7</name><init pos:start="184:14" pos:end="184:18">=<expr pos:start="184:15" pos:end="184:18"><name pos:start="184:15" pos:end="184:18">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="185:5" pos:end="185:15"><decl pos:start="185:5" pos:end="185:9"><type pos:start="185:5" pos:end="185:7"><name pos:start="185:5" pos:end="185:7">int</name></type> <name pos:start="185:9" pos:end="185:9">i</name></decl>, <decl pos:start="185:12" pos:end="185:14"><type ref="prev" pos:start="185:5" pos:end="185:7"/><name pos:start="185:12" pos:end="185:14">nid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="186:5" pos:end="186:28"><decl pos:start="186:5" pos:end="186:27"><type pos:start="186:5" pos:end="186:19"><name pos:start="186:5" pos:end="186:12">unsigned</name> <name pos:start="186:14" pos:end="186:17">char</name> <modifier pos:start="186:19" pos:end="186:19">*</modifier></type><name pos:start="186:20" pos:end="186:27">pem_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="187:5" pos:end="187:16"><decl pos:start="187:5" pos:end="187:15"><type pos:start="187:5" pos:end="187:7"><name pos:start="187:5" pos:end="187:7">int</name></type> <name pos:start="187:9" pos:end="187:15">pem_len</name></decl>;</decl_stmt>

    <comment type="block" pos:start="189:5" pos:end="192:7">/*
     * Base64 decode the incoming ca certs buffer.  Decoding will
     * always take up no more than the original buffer.
     */</comment>
    <expr_stmt pos:start="193:5" pos:end="193:34"><expr pos:start="193:5" pos:end="193:33"><name pos:start="193:5" pos:end="193:7">b64</name> <operator pos:start="193:9" pos:end="193:9">=</operator> <call pos:start="193:11" pos:end="193:33"><name pos:start="193:11" pos:end="193:17">BIO_new</name><argument_list pos:start="193:18" pos:end="193:33">(<argument pos:start="193:19" pos:end="193:32"><expr pos:start="193:19" pos:end="193:32"><call pos:start="193:19" pos:end="193:32"><name pos:start="193:19" pos:end="193:30">BIO_f_base64</name><argument_list pos:start="193:31" pos:end="193:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="194:5" pos:end="197:5"><if pos:start="194:5" pos:end="197:5">if <condition pos:start="194:8" pos:end="194:13">(<expr pos:start="194:9" pos:end="194:12"><operator pos:start="194:9" pos:end="194:9">!</operator><name pos:start="194:10" pos:end="194:12">b64</name></expr>)</condition> <block pos:start="194:15" pos:end="197:5">{<block_content pos:start="195:9" pos:end="196:20">
	<expr_stmt pos:start="195:9" pos:end="195:38"><expr pos:start="195:9" pos:end="195:37"><call pos:start="195:9" pos:end="195:37"><name pos:start="195:9" pos:end="195:19">EST_LOG_ERR</name><argument_list pos:start="195:20" pos:end="195:37">(<argument pos:start="195:21" pos:end="195:36"><expr pos:start="195:21" pos:end="195:36"><literal type="string" pos:start="195:21" pos:end="195:36">"BIO_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="196:9" pos:end="196:20">return <expr pos:start="196:16" pos:end="196:19"><operator pos:start="196:16" pos:end="196:16">(</operator><operator pos:start="196:17" pos:end="196:17">-</operator><literal type="number" pos:start="196:18" pos:end="196:18">1</literal><operator pos:start="196:19" pos:end="196:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>    
    <expr_stmt pos:start="198:5" pos:end="198:46"><expr pos:start="198:5" pos:end="198:45"><name pos:start="198:5" pos:end="198:6">in</name> <operator pos:start="198:8" pos:end="198:8">=</operator> <call pos:start="198:10" pos:end="198:45"><name pos:start="198:10" pos:end="198:24">BIO_new_mem_buf</name><argument_list pos:start="198:25" pos:end="198:45">(<argument pos:start="198:26" pos:end="198:33"><expr pos:start="198:26" pos:end="198:33"><name pos:start="198:26" pos:end="198:33">certs_p7</name></expr></argument>, <argument pos:start="198:36" pos:end="198:44"><expr pos:start="198:36" pos:end="198:44"><name pos:start="198:36" pos:end="198:44">certs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <if_stmt pos:start="199:5" pos:end="202:5"><if pos:start="199:5" pos:end="202:5">if <condition pos:start="199:8" pos:end="199:12">(<expr pos:start="199:9" pos:end="199:11"><operator pos:start="199:9" pos:end="199:9">!</operator><name pos:start="199:10" pos:end="199:11">in</name></expr>)</condition> <block pos:start="199:14" pos:end="202:5">{<block_content pos:start="200:9" pos:end="201:20">
	<expr_stmt pos:start="200:9" pos:end="200:38"><expr pos:start="200:9" pos:end="200:37"><call pos:start="200:9" pos:end="200:37"><name pos:start="200:9" pos:end="200:19">EST_LOG_ERR</name><argument_list pos:start="200:20" pos:end="200:37">(<argument pos:start="200:21" pos:end="200:36"><expr pos:start="200:21" pos:end="200:36"><literal type="string" pos:start="200:21" pos:end="200:36">"BIO_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="201:9" pos:end="201:20">return <expr pos:start="201:16" pos:end="201:19"><operator pos:start="201:16" pos:end="201:16">(</operator><operator pos:start="201:17" pos:end="201:17">-</operator><literal type="number" pos:start="201:18" pos:end="201:18">1</literal><operator pos:start="201:19" pos:end="201:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="203:5" pos:end="203:27"><expr pos:start="203:5" pos:end="203:26"><name pos:start="203:5" pos:end="203:6">in</name> <operator pos:start="203:8" pos:end="203:8">=</operator> <call pos:start="203:10" pos:end="203:26"><name pos:start="203:10" pos:end="203:17">BIO_push</name><argument_list pos:start="203:18" pos:end="203:26">(<argument pos:start="203:19" pos:end="203:21"><expr pos:start="203:19" pos:end="203:21"><name pos:start="203:19" pos:end="203:21">b64</name></expr></argument>, <argument pos:start="203:24" pos:end="203:25"><expr pos:start="203:24" pos:end="203:25"><name pos:start="203:24" pos:end="203:25">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="204:5" pos:end="204:40"><expr pos:start="204:5" pos:end="204:39"><name pos:start="204:5" pos:end="204:19">cacerts_decoded</name> <operator pos:start="204:21" pos:end="204:21">=</operator> <call pos:start="204:23" pos:end="204:39"><name pos:start="204:23" pos:end="204:28">malloc</name><argument_list pos:start="204:29" pos:end="204:39">(<argument pos:start="204:30" pos:end="204:38"><expr pos:start="204:30" pos:end="204:38"><name pos:start="204:30" pos:end="204:38">certs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="205:5" pos:end="208:5"><if pos:start="205:5" pos:end="208:5">if <condition pos:start="205:8" pos:end="205:25">(<expr pos:start="205:9" pos:end="205:24"><operator pos:start="205:9" pos:end="205:9">!</operator><name pos:start="205:10" pos:end="205:24">cacerts_decoded</name></expr>)</condition> <block pos:start="205:27" pos:end="208:5">{<block_content pos:start="206:9" pos:end="207:20">
	<expr_stmt pos:start="206:9" pos:end="206:37"><expr pos:start="206:9" pos:end="206:36"><call pos:start="206:9" pos:end="206:36"><name pos:start="206:9" pos:end="206:19">EST_LOG_ERR</name><argument_list pos:start="206:20" pos:end="206:36">(<argument pos:start="206:21" pos:end="206:35"><expr pos:start="206:21" pos:end="206:35"><literal type="string" pos:start="206:21" pos:end="206:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="207:9" pos:end="207:20">return <expr pos:start="207:16" pos:end="207:19"><operator pos:start="207:16" pos:end="207:16">(</operator><operator pos:start="207:17" pos:end="207:17">-</operator><literal type="number" pos:start="207:18" pos:end="207:18">1</literal><operator pos:start="207:19" pos:end="207:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="209:5" pos:end="209:67"><expr pos:start="209:5" pos:end="209:66"><name pos:start="209:5" pos:end="209:23">cacerts_decoded_len</name> <operator pos:start="209:25" pos:end="209:25">=</operator> <call pos:start="209:27" pos:end="209:66"><name pos:start="209:27" pos:end="209:34">BIO_read</name><argument_list pos:start="209:35" pos:end="209:66">(<argument pos:start="209:36" pos:end="209:37"><expr pos:start="209:36" pos:end="209:37"><name pos:start="209:36" pos:end="209:37">in</name></expr></argument>, <argument pos:start="209:40" pos:end="209:54"><expr pos:start="209:40" pos:end="209:54"><name pos:start="209:40" pos:end="209:54">cacerts_decoded</name></expr></argument>, <argument pos:start="209:57" pos:end="209:65"><expr pos:start="209:57" pos:end="209:65"><name pos:start="209:57" pos:end="209:65">certs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <expr_stmt pos:start="210:5" pos:end="210:21"><expr pos:start="210:5" pos:end="210:20"><call pos:start="210:5" pos:end="210:20"><name pos:start="210:5" pos:end="210:16">BIO_free_all</name><argument_list pos:start="210:17" pos:end="210:20">(<argument pos:start="210:18" pos:end="210:19"><expr pos:start="210:18" pos:end="210:19"><name pos:start="210:18" pos:end="210:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="211:5" pos:end="214:7">/*
     * Now get the PKCS7 formatted buffer of certificates read into a stack of
     * X509 certs
     */</comment>
    <expr_stmt pos:start="215:5" pos:end="215:69"><expr pos:start="215:5" pos:end="215:68"><name pos:start="215:5" pos:end="215:12">p7bio_in</name> <operator pos:start="215:14" pos:end="215:14">=</operator> <call pos:start="215:16" pos:end="215:68"><name pos:start="215:16" pos:end="215:30">BIO_new_mem_buf</name><argument_list pos:start="215:31" pos:end="215:68">(<argument pos:start="215:32" pos:end="215:46"><expr pos:start="215:32" pos:end="215:46"><name pos:start="215:32" pos:end="215:46">cacerts_decoded</name></expr></argument>, <argument pos:start="215:49" pos:end="215:67"><expr pos:start="215:49" pos:end="215:67"><name pos:start="215:49" pos:end="215:67">cacerts_decoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="216:5" pos:end="221:5"><if pos:start="216:5" pos:end="221:5">if <condition pos:start="216:8" pos:end="216:18">(<expr pos:start="216:9" pos:end="216:17"><operator pos:start="216:9" pos:end="216:9">!</operator><name pos:start="216:10" pos:end="216:17">p7bio_in</name></expr>)</condition> <block pos:start="216:20" pos:end="221:5">{<block_content pos:start="217:9" pos:end="220:20">
        <expr_stmt pos:start="217:9" pos:end="217:73"><expr pos:start="217:9" pos:end="217:72"><call pos:start="217:9" pos:end="217:72"><name pos:start="217:9" pos:end="217:19">EST_LOG_ERR</name><argument_list pos:start="217:20" pos:end="217:72">(<argument pos:start="217:21" pos:end="217:71"><expr pos:start="217:21" pos:end="217:71"><literal type="string" pos:start="217:21" pos:end="217:71">"BIO_new failed while attempting to create mem BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="218:9" pos:end="218:31"><expr pos:start="218:9" pos:end="218:30"><call pos:start="218:9" pos:end="218:30"><name pos:start="218:9" pos:end="218:28">ossl_dump_ssl_errors</name><argument_list pos:start="218:29" pos:end="218:30">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="219:9" pos:end="219:30"><expr pos:start="219:9" pos:end="219:29"><call pos:start="219:9" pos:end="219:29"><name pos:start="219:9" pos:end="219:12">free</name><argument_list pos:start="219:13" pos:end="219:29">(<argument pos:start="219:14" pos:end="219:28"><expr pos:start="219:14" pos:end="219:28"><name pos:start="219:14" pos:end="219:28">cacerts_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="220:9" pos:end="220:20">return <expr pos:start="220:16" pos:end="220:19"><operator pos:start="220:16" pos:end="220:16">(</operator><operator pos:start="220:17" pos:end="220:17">-</operator><literal type="number" pos:start="220:18" pos:end="220:18">1</literal><operator pos:start="220:19" pos:end="220:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="222:5" pos:end="222:39"><expr pos:start="222:5" pos:end="222:38"><name pos:start="222:5" pos:end="222:6">p7</name> <operator pos:start="222:8" pos:end="222:8">=</operator> <call pos:start="222:10" pos:end="222:38"><name pos:start="222:10" pos:end="222:22">d2i_PKCS7_bio</name><argument_list pos:start="222:23" pos:end="222:38">(<argument pos:start="222:24" pos:end="222:31"><expr pos:start="222:24" pos:end="222:31"><name pos:start="222:24" pos:end="222:31">p7bio_in</name></expr></argument>, <argument pos:start="222:34" pos:end="222:37"><expr pos:start="222:34" pos:end="222:37"><name pos:start="222:34" pos:end="222:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="223:5" pos:end="228:5"><if pos:start="223:5" pos:end="228:5">if <condition pos:start="223:8" pos:end="223:12">(<expr pos:start="223:9" pos:end="223:11"><operator pos:start="223:9" pos:end="223:9">!</operator><name pos:start="223:10" pos:end="223:11">p7</name></expr>)</condition> <block pos:start="223:14" pos:end="228:5">{<block_content pos:start="224:9" pos:end="227:20">
	<expr_stmt pos:start="224:9" pos:end="224:49"><expr pos:start="224:9" pos:end="224:48"><call pos:start="224:9" pos:end="224:48"><name pos:start="224:9" pos:end="224:19">EST_LOG_ERR</name><argument_list pos:start="224:20" pos:end="224:48">(<argument pos:start="224:21" pos:end="224:47"><expr pos:start="224:21" pos:end="224:47"><literal type="string" pos:start="224:21" pos:end="224:47">"PEM_read_bio_PKCS7 failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="225:9" pos:end="225:31"><expr pos:start="225:9" pos:end="225:30"><call pos:start="225:9" pos:end="225:30"><name pos:start="225:9" pos:end="225:28">ossl_dump_ssl_errors</name><argument_list pos:start="225:29" pos:end="225:30">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="226:9" pos:end="226:30"><expr pos:start="226:9" pos:end="226:29"><call pos:start="226:9" pos:end="226:29"><name pos:start="226:9" pos:end="226:12">free</name><argument_list pos:start="226:13" pos:end="226:29">(<argument pos:start="226:14" pos:end="226:28"><expr pos:start="226:14" pos:end="226:28"><name pos:start="226:14" pos:end="226:28">cacerts_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="227:9" pos:end="227:20">return <expr pos:start="227:16" pos:end="227:19"><operator pos:start="227:16" pos:end="227:16">(</operator><operator pos:start="227:17" pos:end="227:17">-</operator><literal type="number" pos:start="227:18" pos:end="227:18">1</literal><operator pos:start="227:19" pos:end="227:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="229:5" pos:end="229:27"><expr pos:start="229:5" pos:end="229:26"><call pos:start="229:5" pos:end="229:26"><name pos:start="229:5" pos:end="229:16">BIO_free_all</name><argument_list pos:start="229:17" pos:end="229:26">(<argument pos:start="229:18" pos:end="229:25"><expr pos:start="229:18" pos:end="229:25"><name pos:start="229:18" pos:end="229:25">p7bio_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="230:5" pos:end="230:26"><expr pos:start="230:5" pos:end="230:25"><call pos:start="230:5" pos:end="230:25"><name pos:start="230:5" pos:end="230:8">free</name><argument_list pos:start="230:9" pos:end="230:25">(<argument pos:start="230:10" pos:end="230:24"><expr pos:start="230:10" pos:end="230:24"><name pos:start="230:10" pos:end="230:24">cacerts_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="232:5" pos:end="235:7">/*
     * Now that we've decoded the certs, get a reference
     * the the stack of certs
     */</comment>
    <expr_stmt pos:start="236:5" pos:end="236:30"><expr pos:start="236:5" pos:end="236:29"><name pos:start="236:5" pos:end="236:7">nid</name><operator pos:start="236:8" pos:end="236:8">=</operator><call pos:start="236:9" pos:end="236:29"><name pos:start="236:9" pos:end="236:19">OBJ_obj2nid</name><argument_list pos:start="236:20" pos:end="236:29">(<argument pos:start="236:21" pos:end="236:28"><expr pos:start="236:21" pos:end="236:28"><name pos:start="236:21" pos:end="236:28"><name pos:start="236:21" pos:end="236:22">p7</name><operator pos:start="236:23" pos:end="236:24">-&gt;</operator><name pos:start="236:25" pos:end="236:28">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="237:5" pos:end="250:9">switch <condition pos:start="237:12" pos:end="237:16">(<expr pos:start="237:13" pos:end="237:15"><name pos:start="237:13" pos:end="237:15">nid</name></expr>)</condition>
        <block pos:start="238:9" pos:end="250:9">{<block_content pos:start="239:9" pos:end="249:18">
        <case pos:start="239:9" pos:end="239:30">case <expr pos:start="239:14" pos:end="239:29"><name pos:start="239:14" pos:end="239:29">NID_pkcs7_signed</name></expr>:</case>
            <expr_stmt pos:start="240:13" pos:end="240:37"><expr pos:start="240:13" pos:end="240:36"><name pos:start="240:13" pos:end="240:17">certs</name> <operator pos:start="240:19" pos:end="240:19">=</operator> <name pos:start="240:21" pos:end="240:36"><name pos:start="240:21" pos:end="240:22">p7</name><operator pos:start="240:23" pos:end="240:24">-&gt;</operator><name pos:start="240:25" pos:end="240:25">d</name><operator pos:start="240:26" pos:end="240:26">.</operator><name pos:start="240:27" pos:end="240:30">sign</name><operator pos:start="240:31" pos:end="240:32">-&gt;</operator><name pos:start="240:33" pos:end="240:36">cert</name></name></expr>;</expr_stmt>
            <break pos:start="241:13" pos:end="241:18">break;</break>
        <case pos:start="242:9" pos:end="242:42">case <expr pos:start="242:14" pos:end="242:41"><name pos:start="242:14" pos:end="242:41">NID_pkcs7_signedAndEnveloped</name></expr>:</case>
            <expr_stmt pos:start="243:13" pos:end="243:53"><expr pos:start="243:13" pos:end="243:52"><name pos:start="243:13" pos:end="243:17">certs</name> <operator pos:start="243:19" pos:end="243:19">=</operator> <name pos:start="243:21" pos:end="243:52"><name pos:start="243:21" pos:end="243:22">p7</name><operator pos:start="243:23" pos:end="243:24">-&gt;</operator><name pos:start="243:25" pos:end="243:25">d</name><operator pos:start="243:26" pos:end="243:26">.</operator><name pos:start="243:27" pos:end="243:46">signed_and_enveloped</name><operator pos:start="243:47" pos:end="243:48">-&gt;</operator><name pos:start="243:49" pos:end="243:52">cert</name></name></expr>;</expr_stmt>
            <break pos:start="244:13" pos:end="244:18">break;</break>
        <default pos:start="245:9" pos:end="245:16">default:</default>
            <expr_stmt pos:start="246:13" pos:end="246:64"><expr pos:start="246:13" pos:end="246:63"><call pos:start="246:13" pos:end="246:63"><name pos:start="246:13" pos:end="246:23">EST_LOG_ERR</name><argument_list pos:start="246:24" pos:end="246:63">(<argument pos:start="246:25" pos:end="246:62"><expr pos:start="246:25" pos:end="246:62"><literal type="string" pos:start="246:25" pos:end="246:62">"Invalid NID value on PKCS7 structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="247:13" pos:end="247:27"><expr pos:start="247:13" pos:end="247:26"><call pos:start="247:13" pos:end="247:26"><name pos:start="247:13" pos:end="247:22">PKCS7_free</name><argument_list pos:start="247:23" pos:end="247:26">(<argument pos:start="247:24" pos:end="247:25"><expr pos:start="247:24" pos:end="247:25"><name pos:start="247:24" pos:end="247:25">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="248:13" pos:end="248:24">return <expr pos:start="248:20" pos:end="248:23"><operator pos:start="248:20" pos:end="248:20">(</operator><operator pos:start="248:21" pos:end="248:21">-</operator><literal type="number" pos:start="248:22" pos:end="248:22">1</literal><operator pos:start="248:23" pos:end="248:23">)</operator></expr>;</return>
            <break pos:start="249:13" pos:end="249:18">break;</break>
        </block_content>}</block></switch>

    <if_stmt pos:start="252:5" pos:end="256:5"><if pos:start="252:5" pos:end="256:5">if <condition pos:start="252:8" pos:end="252:15">(<expr pos:start="252:9" pos:end="252:14"><operator pos:start="252:9" pos:end="252:9">!</operator><name pos:start="252:10" pos:end="252:14">certs</name></expr>)</condition> <block pos:start="252:17" pos:end="256:5">{<block_content pos:start="253:9" pos:end="255:20">
        <expr_stmt pos:start="253:9" pos:end="253:72"><expr pos:start="253:9" pos:end="253:71"><call pos:start="253:9" pos:end="253:71"><name pos:start="253:9" pos:end="253:19">EST_LOG_ERR</name><argument_list pos:start="253:20" pos:end="253:71">(<argument pos:start="253:21" pos:end="253:70"><expr pos:start="253:21" pos:end="253:70"><literal type="string" pos:start="253:21" pos:end="253:70">"Failed to attain X509 cert stack from PKCS7 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="254:9" pos:end="254:23"><expr pos:start="254:9" pos:end="254:22"><call pos:start="254:9" pos:end="254:22"><name pos:start="254:9" pos:end="254:18">PKCS7_free</name><argument_list pos:start="254:19" pos:end="254:22">(<argument pos:start="254:20" pos:end="254:21"><expr pos:start="254:20" pos:end="254:21"><name pos:start="254:20" pos:end="254:21">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="255:9" pos:end="255:20">return <expr pos:start="255:16" pos:end="255:19"><operator pos:start="255:16" pos:end="255:16">(</operator><operator pos:start="255:17" pos:end="255:17">-</operator><literal type="number" pos:start="255:18" pos:end="255:18">1</literal><operator pos:start="255:19" pos:end="255:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="258:5" pos:end="260:7">/*
     * Output the certs to a new BIO using the PEM format 
     */</comment>
    <expr_stmt pos:start="261:5" pos:end="261:31"><expr pos:start="261:5" pos:end="261:30"><name pos:start="261:5" pos:end="261:7">out</name> <operator pos:start="261:9" pos:end="261:9">=</operator> <call pos:start="261:11" pos:end="261:30"><name pos:start="261:11" pos:end="261:17">BIO_new</name><argument_list pos:start="261:18" pos:end="261:30">(<argument pos:start="261:19" pos:end="261:29"><expr pos:start="261:19" pos:end="261:29"><call pos:start="261:19" pos:end="261:29"><name pos:start="261:19" pos:end="261:27">BIO_s_mem</name><argument_list pos:start="261:28" pos:end="261:29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="262:5" pos:end="266:5"><if pos:start="262:5" pos:end="266:5">if <condition pos:start="262:8" pos:end="262:13">(<expr pos:start="262:9" pos:end="262:12"><operator pos:start="262:9" pos:end="262:9">!</operator><name pos:start="262:10" pos:end="262:12">out</name></expr>)</condition> <block pos:start="262:15" pos:end="266:5">{<block_content pos:start="263:9" pos:end="265:20">
        <expr_stmt pos:start="263:9" pos:end="263:38"><expr pos:start="263:9" pos:end="263:37"><call pos:start="263:9" pos:end="263:37"><name pos:start="263:9" pos:end="263:19">EST_LOG_ERR</name><argument_list pos:start="263:20" pos:end="263:37">(<argument pos:start="263:21" pos:end="263:36"><expr pos:start="263:21" pos:end="263:36"><literal type="string" pos:start="263:21" pos:end="263:36">"BIO_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="264:9" pos:end="264:23"><expr pos:start="264:9" pos:end="264:22"><call pos:start="264:9" pos:end="264:22"><name pos:start="264:9" pos:end="264:18">PKCS7_free</name><argument_list pos:start="264:19" pos:end="264:22">(<argument pos:start="264:20" pos:end="264:21"><expr pos:start="264:20" pos:end="264:21"><name pos:start="264:20" pos:end="264:21">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="265:9" pos:end="265:20">return <expr pos:start="265:16" pos:end="265:19"><operator pos:start="265:16" pos:end="265:16">(</operator><operator pos:start="265:17" pos:end="265:17">-</operator><literal type="number" pos:start="265:18" pos:end="265:18">1</literal><operator pos:start="265:19" pos:end="265:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for pos:start="267:5" pos:end="271:5">for <control pos:start="267:9" pos:end="267:40">(<init pos:start="267:10" pos:end="267:13"><expr pos:start="267:10" pos:end="267:12"><name pos:start="267:10" pos:end="267:10">i</name><operator pos:start="267:11" pos:end="267:11">=</operator><literal type="number" pos:start="267:12" pos:end="267:12">0</literal></expr>;</init> <condition pos:start="267:15" pos:end="267:35"><expr pos:start="267:15" pos:end="267:34"><name pos:start="267:15" pos:end="267:15">i</name><operator pos:start="267:16" pos:end="267:16">&lt;</operator><call pos:start="267:17" pos:end="267:34"><name pos:start="267:17" pos:end="267:27">sk_X509_num</name><argument_list pos:start="267:28" pos:end="267:34">(<argument pos:start="267:29" pos:end="267:33"><expr pos:start="267:29" pos:end="267:33"><name pos:start="267:29" pos:end="267:33">certs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="267:37" pos:end="267:39"><expr pos:start="267:37" pos:end="267:39"><name pos:start="267:37" pos:end="267:37">i</name><operator pos:start="267:38" pos:end="267:39">++</operator></expr></incr>)</control> <block pos:start="267:42" pos:end="271:5">{<block_content pos:start="268:9" pos:end="270:28">
        <expr_stmt pos:start="268:9" pos:end="268:34"><expr pos:start="268:9" pos:end="268:33"><name pos:start="268:9" pos:end="268:9">x</name><operator pos:start="268:10" pos:end="268:10">=</operator><call pos:start="268:11" pos:end="268:33"><name pos:start="268:11" pos:end="268:23">sk_X509_value</name><argument_list pos:start="268:24" pos:end="268:33">(<argument pos:start="268:25" pos:end="268:29"><expr pos:start="268:25" pos:end="268:29"><name pos:start="268:25" pos:end="268:29">certs</name></expr></argument>, <argument pos:start="268:32" pos:end="268:32"><expr pos:start="268:32" pos:end="268:32"><name pos:start="268:32" pos:end="268:32">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="269:9" pos:end="269:35"><expr pos:start="269:9" pos:end="269:34"><call pos:start="269:9" pos:end="269:34"><name pos:start="269:9" pos:end="269:26">PEM_write_bio_X509</name><argument_list pos:start="269:27" pos:end="269:34">(<argument pos:start="269:28" pos:end="269:30"><expr pos:start="269:28" pos:end="269:30"><name pos:start="269:28" pos:end="269:30">out</name></expr></argument>, <argument pos:start="269:33" pos:end="269:33"><expr pos:start="269:33" pos:end="269:33"><name pos:start="269:33" pos:end="269:33">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="270:9" pos:end="270:28"><expr pos:start="270:9" pos:end="270:27"><call pos:start="270:9" pos:end="270:27"><name pos:start="270:9" pos:end="270:16">BIO_puts</name><argument_list pos:start="270:17" pos:end="270:27">(<argument pos:start="270:18" pos:end="270:20"><expr pos:start="270:18" pos:end="270:20"><name pos:start="270:18" pos:end="270:20">out</name></expr></argument>, <argument pos:start="270:23" pos:end="270:26"><expr pos:start="270:23" pos:end="270:26"><literal type="string" pos:start="270:23" pos:end="270:26">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="272:5" pos:end="272:25"><expr pos:start="272:5" pos:end="272:24"><operator pos:start="272:5" pos:end="272:5">(</operator><name pos:start="272:6" pos:end="272:9">void</name><operator pos:start="272:10" pos:end="272:10">)</operator><call pos:start="272:11" pos:end="272:24"><name pos:start="272:11" pos:end="272:19">BIO_flush</name><argument_list pos:start="272:20" pos:end="272:24">(<argument pos:start="272:21" pos:end="272:23"><expr pos:start="272:21" pos:end="272:23"><name pos:start="272:21" pos:end="272:23">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="274:5" pos:end="276:7">/*
     * Now convert the BIO to char*
     */</comment>
    <expr_stmt pos:start="277:5" pos:end="277:61"><expr pos:start="277:5" pos:end="277:60"><name pos:start="277:5" pos:end="277:11">pem_len</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <operator pos:start="277:15" pos:end="277:15">(</operator><name pos:start="277:16" pos:end="277:18">int</name><operator pos:start="277:19" pos:end="277:19">)</operator> <call pos:start="277:21" pos:end="277:60"><name pos:start="277:21" pos:end="277:36">BIO_get_mem_data</name><argument_list pos:start="277:37" pos:end="277:60">(<argument pos:start="277:38" pos:end="277:40"><expr pos:start="277:38" pos:end="277:40"><name pos:start="277:38" pos:end="277:40">out</name></expr></argument>, <argument pos:start="277:43" pos:end="277:59"><expr pos:start="277:43" pos:end="277:59"><operator pos:start="277:43" pos:end="277:43">(</operator><name pos:start="277:44" pos:end="277:47">char</name><operator pos:start="277:48" pos:end="277:48">*</operator><operator pos:start="277:49" pos:end="277:49">*</operator><operator pos:start="277:50" pos:end="277:50">)</operator><operator pos:start="277:51" pos:end="277:51">&amp;</operator><name pos:start="277:52" pos:end="277:59">pem_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="278:5" pos:end="282:5"><if pos:start="278:5" pos:end="282:5">if <condition pos:start="278:8" pos:end="278:21">(<expr pos:start="278:9" pos:end="278:20"><name pos:start="278:9" pos:end="278:15">pem_len</name> <operator pos:start="278:17" pos:end="278:18">&lt;=</operator> <literal type="number" pos:start="278:20" pos:end="278:20">0</literal></expr>)</condition> <block pos:start="278:23" pos:end="282:5">{<block_content pos:start="279:9" pos:end="281:20">
        <expr_stmt pos:start="279:9" pos:end="279:47"><expr pos:start="279:9" pos:end="279:46"><call pos:start="279:9" pos:end="279:46"><name pos:start="279:9" pos:end="279:19">EST_LOG_ERR</name><argument_list pos:start="279:20" pos:end="279:46">(<argument pos:start="279:21" pos:end="279:45"><expr pos:start="279:21" pos:end="279:45"><literal type="string" pos:start="279:21" pos:end="279:45">"BIO_get_mem_data failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="280:9" pos:end="280:23"><expr pos:start="280:9" pos:end="280:22"><call pos:start="280:9" pos:end="280:22"><name pos:start="280:9" pos:end="280:18">PKCS7_free</name><argument_list pos:start="280:19" pos:end="280:22">(<argument pos:start="280:20" pos:end="280:21"><expr pos:start="280:20" pos:end="280:21"><name pos:start="280:20" pos:end="280:21">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="281:9" pos:end="281:20">return <expr pos:start="281:16" pos:end="281:19"><operator pos:start="281:16" pos:end="281:16">(</operator><operator pos:start="281:17" pos:end="281:17">-</operator><literal type="number" pos:start="281:18" pos:end="281:18">1</literal><operator pos:start="281:19" pos:end="281:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="284:5" pos:end="284:31"><expr pos:start="284:5" pos:end="284:30"><operator pos:start="284:5" pos:end="284:5">*</operator><name pos:start="284:6" pos:end="284:8">pem</name> <operator pos:start="284:10" pos:end="284:10">=</operator> <call pos:start="284:12" pos:end="284:30"><name pos:start="284:12" pos:end="284:17">malloc</name><argument_list pos:start="284:18" pos:end="284:30">(<argument pos:start="284:19" pos:end="284:29"><expr pos:start="284:19" pos:end="284:29"><name pos:start="284:19" pos:end="284:25">pem_len</name> <operator pos:start="284:27" pos:end="284:27">+</operator> <literal type="number" pos:start="284:29" pos:end="284:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="285:5" pos:end="289:5"><if pos:start="285:5" pos:end="289:5">if <condition pos:start="285:8" pos:end="285:14">(<expr pos:start="285:9" pos:end="285:13"><operator pos:start="285:9" pos:end="285:9">!</operator><operator pos:start="285:10" pos:end="285:10">*</operator><name pos:start="285:11" pos:end="285:13">pem</name></expr>)</condition> <block pos:start="285:16" pos:end="289:5">{<block_content pos:start="286:9" pos:end="288:20">
        <expr_stmt pos:start="286:9" pos:end="286:37"><expr pos:start="286:9" pos:end="286:36"><call pos:start="286:9" pos:end="286:36"><name pos:start="286:9" pos:end="286:19">EST_LOG_ERR</name><argument_list pos:start="286:20" pos:end="286:36">(<argument pos:start="286:21" pos:end="286:35"><expr pos:start="286:21" pos:end="286:35"><literal type="string" pos:start="286:21" pos:end="286:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="287:9" pos:end="287:23"><expr pos:start="287:9" pos:end="287:22"><call pos:start="287:9" pos:end="287:22"><name pos:start="287:9" pos:end="287:18">PKCS7_free</name><argument_list pos:start="287:19" pos:end="287:22">(<argument pos:start="287:20" pos:end="287:21"><expr pos:start="287:20" pos:end="287:21"><name pos:start="287:20" pos:end="287:21">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="288:9" pos:end="288:20">return <expr pos:start="288:16" pos:end="288:19"><operator pos:start="288:16" pos:end="288:16">(</operator><operator pos:start="288:17" pos:end="288:17">-</operator><literal type="number" pos:start="288:18" pos:end="288:18">1</literal><operator pos:start="288:19" pos:end="288:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="290:5" pos:end="290:47"><expr pos:start="290:5" pos:end="290:46"><call pos:start="290:5" pos:end="290:46"><name pos:start="290:5" pos:end="290:12">memcpy_s</name><argument_list pos:start="290:13" pos:end="290:46">(<argument pos:start="290:14" pos:end="290:17"><expr pos:start="290:14" pos:end="290:17"><operator pos:start="290:14" pos:end="290:14">*</operator><name pos:start="290:15" pos:end="290:17">pem</name></expr></argument>, <argument pos:start="290:20" pos:end="290:26"><expr pos:start="290:20" pos:end="290:26"><name pos:start="290:20" pos:end="290:26">pem_len</name></expr></argument>, <argument pos:start="290:29" pos:end="290:36"><expr pos:start="290:29" pos:end="290:36"><name pos:start="290:29" pos:end="290:36">pem_data</name></expr></argument>, <argument pos:start="290:39" pos:end="290:45"><expr pos:start="290:39" pos:end="290:45"><name pos:start="290:39" pos:end="290:45">pem_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    <expr_stmt pos:start="291:5" pos:end="291:24"><expr pos:start="291:5" pos:end="291:23"><operator pos:start="291:5" pos:end="291:5">(</operator><operator pos:start="291:6" pos:end="291:6">*</operator><name pos:start="291:7" pos:end="291:9">pem</name><operator pos:start="291:10" pos:end="291:10">)</operator><index pos:start="291:11" pos:end="291:19">[<expr pos:start="291:12" pos:end="291:18"><name pos:start="291:12" pos:end="291:18">pem_len</name></expr>]</index> <operator pos:start="291:21" pos:end="291:21">=</operator> <literal type="number" pos:start="291:23" pos:end="291:23">0</literal></expr>;</expr_stmt>  <comment type="line" pos:start="291:27" pos:end="291:58">//Make sure it's null termianted</comment>
    <expr_stmt pos:start="292:5" pos:end="292:22"><expr pos:start="292:5" pos:end="292:21"><call pos:start="292:5" pos:end="292:21"><name pos:start="292:5" pos:end="292:16">BIO_free_all</name><argument_list pos:start="292:17" pos:end="292:21">(<argument pos:start="292:18" pos:end="292:20"><expr pos:start="292:18" pos:end="292:20"><name pos:start="292:18" pos:end="292:20">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="293:5" pos:end="293:19"><expr pos:start="293:5" pos:end="293:18"><call pos:start="293:5" pos:end="293:18"><name pos:start="293:5" pos:end="293:14">PKCS7_free</name><argument_list pos:start="293:15" pos:end="293:18">(<argument pos:start="293:16" pos:end="293:17"><expr pos:start="293:16" pos:end="293:17"><name pos:start="293:16" pos:end="293:17">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="294:5" pos:end="294:21">return <expr pos:start="294:12" pos:end="294:20"><operator pos:start="294:12" pos:end="294:12">(</operator><name pos:start="294:13" pos:end="294:19">pem_len</name><operator pos:start="294:20" pos:end="294:20">)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
