<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="source_code/est_client_http.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="3:2">/*
** signed long to signed int
*/</comment>
<function pos:start="4:1" pos:end="20:1"><type pos:start="4:1" pos:end="4:3"><name pos:start="4:1" pos:end="4:3">int</name></type> <name pos:start="4:5" pos:end="4:16">curlx_sltosi</name><parameter_list pos:start="4:17" pos:end="4:28">(<parameter pos:start="4:18" pos:end="4:27"><decl pos:start="4:18" pos:end="4:27"><type pos:start="4:18" pos:end="4:21"><name pos:start="4:18" pos:end="4:21">long</name></type> <name pos:start="4:23" pos:end="4:27">slnum</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="20:1">{<block_content pos:start="11:3" pos:end="20:0">
<cpp:ifdef pos:start="6:1" pos:end="6:23">#<cpp:directive pos:start="6:2" pos:end="6:6">ifdef</cpp:directive> <name pos:start="6:8" pos:end="6:23">__INTEL_COMPILER</name></cpp:ifdef>
<cpp:pragma pos:start="7:1" pos:end="7:23">#  <cpp:directive pos:start="7:4" pos:end="7:9">pragma</cpp:directive> <name pos:start="7:11" pos:end="7:17">warning</name><name pos:start="7:18" pos:end="7:18">(</name><name pos:start="7:19" pos:end="7:22">push</name><name pos:start="7:23" pos:end="7:23">)</name></cpp:pragma>
<cpp:pragma pos:start="8:1" pos:end="8:30">#  <cpp:directive pos:start="8:4" pos:end="8:9">pragma</cpp:directive> <name pos:start="8:11" pos:end="8:17">warning</name><name pos:start="8:18" pos:end="8:18">(</name><name pos:start="8:19" pos:end="8:25">disable</name><name pos:start="8:26" pos:end="8:26">:</name><name pos:start="8:27" pos:end="8:29">810</name><name pos:start="8:30" pos:end="8:30">)</name></cpp:pragma> <comment type="block" pos:start="8:32" pos:end="8:73">/* conversion may lose significant bits */</comment>
<cpp:endif pos:start="9:1" pos:end="9:6">#<cpp:directive pos:start="9:2" pos:end="9:6">endif</cpp:directive></cpp:endif>

  <expr_stmt pos:start="11:3" pos:end="13:0"><expr pos:start="11:3" pos:end="11:20"><call pos:start="11:3" pos:end="11:20"><name pos:start="11:3" pos:end="11:8">assert</name><argument_list pos:start="11:9" pos:end="11:20">(<argument pos:start="11:10" pos:end="11:19"><expr pos:start="11:10" pos:end="11:19"><name pos:start="11:10" pos:end="11:14">slnum</name> <operator pos:start="11:16" pos:end="11:17">&gt;=</operator> <literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="12:1" pos:end="12:35">#<cpp:directive pos:start="12:2" pos:end="12:3">if</cpp:directive> <expr pos:start="12:5" pos:end="12:35"><operator pos:start="12:5" pos:end="12:5">(</operator><name pos:start="12:6" pos:end="12:15">SIZEOF_INT</name> <operator pos:start="12:17" pos:end="12:17">&lt;</operator> <name pos:start="12:19" pos:end="12:34">CURL_SIZEOF_LONG</name><operator pos:start="12:35" pos:end="12:35">)</operator></expr></cpp:if>
  <expr_stmt pos:start="13:3" pos:end="15:0"><expr pos:start="13:3" pos:end="13:65"><call pos:start="13:3" pos:end="13:65"><name pos:start="13:3" pos:end="13:8">assert</name><argument_list pos:start="13:9" pos:end="13:65">(<argument pos:start="13:10" pos:end="13:64"><expr pos:start="13:10" pos:end="13:64"><operator pos:start="13:10" pos:end="13:10">(</operator><name pos:start="13:11" pos:end="13:18">unsigned</name> <name pos:start="13:20" pos:end="13:23">long</name><operator pos:start="13:24" pos:end="13:24">)</operator> <name pos:start="13:26" pos:end="13:30">slnum</name> <operator pos:start="13:32" pos:end="13:33">&lt;=</operator> <operator pos:start="13:35" pos:end="13:35">(</operator><name pos:start="13:36" pos:end="13:43">unsigned</name> <name pos:start="13:45" pos:end="13:48">long</name><operator pos:start="13:49" pos:end="13:49">)</operator> <name pos:start="13:51" pos:end="13:64">CURL_MASK_SINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="14:1" pos:end="14:6">#<cpp:directive pos:start="14:2" pos:end="14:6">endif</cpp:directive></cpp:endif>
  <return pos:start="15:3" pos:end="20:0">return <expr pos:start="15:10" pos:end="15:45"><operator pos:start="15:10" pos:end="15:10">(</operator><name pos:start="15:11" pos:end="15:13">int</name><operator pos:start="15:14" pos:end="15:14">)</operator><operator pos:start="15:15" pos:end="15:15">(</operator><name pos:start="15:16" pos:end="15:20">slnum</name> <operator pos:start="15:22" pos:end="15:22">&amp;</operator> <operator pos:start="15:24" pos:end="15:24">(</operator><name pos:start="15:25" pos:end="15:28">long</name><operator pos:start="15:29" pos:end="15:29">)</operator> <name pos:start="15:31" pos:end="15:44">CURL_MASK_SINT</name><operator pos:start="15:45" pos:end="15:45">)</operator></expr>;</return>

<cpp:ifdef pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:23">__INTEL_COMPILER</name></cpp:ifdef>
<cpp:pragma pos:start="18:1" pos:end="18:22">#  <cpp:directive pos:start="18:4" pos:end="18:9">pragma</cpp:directive> <name pos:start="18:11" pos:end="18:17">warning</name><name pos:start="18:18" pos:end="18:18">(</name><name pos:start="18:19" pos:end="18:21">pop</name><name pos:start="18:22" pos:end="18:22">)</name></cpp:pragma>
<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block" pos:start="21:1" pos:end="30:3">/*
 * parsedate()
 *
 * Returns:
 *
 * PARSEDATE_OK     - a fine conversion
 * PARSEDATE_FAIL   - failed to convert
 * PARSEDATE_LATER  - time overflow at the far end of time_t
 * PARSEDATE_SOONER - time underflow at the low end of time_t
 */</comment>
<function_decl pos:start="31:1" pos:end="31:55"><type pos:start="31:1" pos:end="31:10"><specifier pos:start="31:1" pos:end="31:6">static</specifier> <name pos:start="31:8" pos:end="31:10">int</name></type> <name pos:start="31:12" pos:end="31:20">parsedate</name><parameter_list pos:start="31:21" pos:end="31:54">(<parameter pos:start="31:22" pos:end="31:37"><decl pos:start="31:22" pos:end="31:37"><type pos:start="31:22" pos:end="31:37"><specifier pos:start="31:22" pos:end="31:26">const</specifier> <name pos:start="31:28" pos:end="31:31">char</name> <modifier pos:start="31:33" pos:end="31:33">*</modifier></type><name pos:start="31:34" pos:end="31:37">date</name></decl></parameter>, <parameter pos:start="31:40" pos:end="31:53"><decl pos:start="31:40" pos:end="31:53"><type pos:start="31:40" pos:end="31:53"><name pos:start="31:40" pos:end="31:45">time_t</name> <modifier pos:start="31:47" pos:end="31:47">*</modifier></type><name pos:start="31:48" pos:end="31:53">output</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" pos:start="32:1" pos:end="35:2">/* returns:
   -1 no day
   0 monday - 6 sunday
*/</comment>
<function pos:start="36:1" pos:end="53:1"><type pos:start="36:1" pos:end="36:10"><specifier pos:start="36:1" pos:end="36:6">static</specifier> <name pos:start="36:8" pos:end="36:10">int</name></type> <name pos:start="36:12" pos:end="36:19">checkday</name><parameter_list pos:start="36:20" pos:end="36:50">(<parameter pos:start="36:21" pos:end="36:37"><decl pos:start="36:21" pos:end="36:37"><type pos:start="36:21" pos:end="36:37"><specifier pos:start="36:21" pos:end="36:25">const</specifier> <name pos:start="36:27" pos:end="36:30">char</name> <modifier pos:start="36:32" pos:end="36:32">*</modifier></type><name pos:start="36:33" pos:end="36:37">check</name></decl></parameter>, <parameter pos:start="36:40" pos:end="36:49"><decl pos:start="36:40" pos:end="36:49"><type pos:start="36:40" pos:end="36:49"><name pos:start="36:40" pos:end="36:45">size_t</name></type> <name pos:start="36:47" pos:end="36:49">len</name></decl></parameter>)</parameter_list>
<block pos:start="37:1" pos:end="53:1">{<block_content pos:start="38:3" pos:end="52:20">
  <decl_stmt pos:start="38:3" pos:end="38:8"><decl pos:start="38:3" pos:end="38:7"><type pos:start="38:3" pos:end="38:5"><name pos:start="38:3" pos:end="38:5">int</name></type> <name pos:start="38:7" pos:end="38:7">i</name></decl>;</decl_stmt>
  <decl_stmt pos:start="39:3" pos:end="39:27"><decl pos:start="39:3" pos:end="39:26"><type pos:start="39:3" pos:end="39:22"><specifier pos:start="39:3" pos:end="39:7">const</specifier> <name pos:start="39:9" pos:end="39:12">char</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier> <specifier pos:start="39:16" pos:end="39:20">const</specifier> <modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:26">what</name></decl>;</decl_stmt>
  <decl_stmt pos:start="40:3" pos:end="40:15"><decl pos:start="40:3" pos:end="40:14"><type pos:start="40:3" pos:end="40:5"><name pos:start="40:3" pos:end="40:5">int</name></type> <name pos:start="40:7" pos:end="40:11">found</name><init pos:start="40:12" pos:end="40:14">= <expr pos:start="40:14" pos:end="40:14"><literal type="number" pos:start="40:14" pos:end="40:14">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt pos:start="41:3" pos:end="44:26"><if pos:start="41:3" pos:end="42:23">if<condition pos:start="41:5" pos:end="41:13">(<expr pos:start="41:6" pos:end="41:12"><name pos:start="41:6" pos:end="41:8">len</name> <operator pos:start="41:10" pos:end="41:10">&gt;</operator> <literal type="number" pos:start="41:12" pos:end="41:12">3</literal></expr>)</condition><block type="pseudo" pos:start="42:5" pos:end="42:23"><block_content pos:start="42:5" pos:end="42:23">
    <expr_stmt pos:start="42:5" pos:end="42:23"><expr pos:start="42:5" pos:end="42:22"><name pos:start="42:5" pos:end="42:8">what</name> <operator pos:start="42:10" pos:end="42:10">=</operator> <operator pos:start="42:12" pos:end="42:12">&amp;</operator><name pos:start="42:13" pos:end="42:22"><name pos:start="42:13" pos:end="42:19">weekday</name><index pos:start="42:20" pos:end="42:22">[<expr pos:start="42:21" pos:end="42:21"><literal type="number" pos:start="42:21" pos:end="42:21">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
  <else pos:start="43:3" pos:end="44:26">else<block type="pseudo" pos:start="44:5" pos:end="44:26"><block_content pos:start="44:5" pos:end="44:26">
    <expr_stmt pos:start="44:5" pos:end="44:26"><expr pos:start="44:5" pos:end="44:25"><name pos:start="44:5" pos:end="44:8">what</name> <operator pos:start="44:10" pos:end="44:10">=</operator> <operator pos:start="44:12" pos:end="44:12">&amp;</operator><name pos:start="44:13" pos:end="44:25"><name pos:start="44:13" pos:end="44:22">Curl_wkday</name><index pos:start="44:23" pos:end="44:25">[<expr pos:start="44:24" pos:end="44:24"><literal type="number" pos:start="44:24" pos:end="44:24">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <for pos:start="45:3" pos:end="51:3">for<control pos:start="45:6" pos:end="45:20">(<init pos:start="45:7" pos:end="45:10"><expr pos:start="45:7" pos:end="45:9"><name pos:start="45:7" pos:end="45:7">i</name><operator pos:start="45:8" pos:end="45:8">=</operator><literal type="number" pos:start="45:9" pos:end="45:9">0</literal></expr>;</init> <condition pos:start="45:12" pos:end="45:15"><expr pos:start="45:12" pos:end="45:14"><name pos:start="45:12" pos:end="45:12">i</name><operator pos:start="45:13" pos:end="45:13">&lt;</operator><literal type="number" pos:start="45:14" pos:end="45:14">7</literal></expr>;</condition> <incr pos:start="45:17" pos:end="45:19"><expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:17">i</name><operator pos:start="45:18" pos:end="45:19">++</operator></expr></incr>)</control> <block pos:start="45:22" pos:end="51:3">{<block_content pos:start="46:5" pos:end="50:11">
    <if_stmt pos:start="46:5" pos:end="49:5"><if pos:start="46:5" pos:end="49:5">if<condition pos:start="46:7" pos:end="46:49">(<expr pos:start="46:8" pos:end="46:48"><call pos:start="46:8" pos:end="46:48"><name pos:start="46:8" pos:end="46:32">est_client_Curl_raw_equal</name><argument_list pos:start="46:33" pos:end="46:48">(<argument pos:start="46:34" pos:end="46:38"><expr pos:start="46:34" pos:end="46:38"><name pos:start="46:34" pos:end="46:38">check</name></expr></argument>, <argument pos:start="46:41" pos:end="46:47"><expr pos:start="46:41" pos:end="46:47"><name pos:start="46:41" pos:end="46:47"><name pos:start="46:41" pos:end="46:44">what</name><index pos:start="46:45" pos:end="46:47">[<expr pos:start="46:46" pos:end="46:46"><literal type="number" pos:start="46:46" pos:end="46:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="46:51" pos:end="49:5">{<block_content pos:start="47:7" pos:end="48:12">
      <expr_stmt pos:start="47:7" pos:end="47:14"><expr pos:start="47:7" pos:end="47:13"><name pos:start="47:7" pos:end="47:11">found</name><operator pos:start="47:12" pos:end="47:12">=</operator><literal type="number" pos:start="47:13" pos:end="47:13">1</literal></expr>;</expr_stmt>
      <break pos:start="48:7" pos:end="48:12">break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:11"><expr pos:start="50:5" pos:end="50:10"><name pos:start="50:5" pos:end="50:8">what</name><operator pos:start="50:9" pos:end="50:10">++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return pos:start="52:3" pos:end="52:20">return <expr pos:start="52:10" pos:end="52:19"><ternary pos:start="52:10" pos:end="52:19"><condition pos:start="52:10" pos:end="52:15"><expr pos:start="52:10" pos:end="52:14"><name pos:start="52:10" pos:end="52:14">found</name></expr>?</condition><then pos:start="52:16" pos:end="52:16"><expr pos:start="52:16" pos:end="52:16"><name pos:start="52:16" pos:end="52:16">i</name></expr></then><else pos:start="52:17" pos:end="52:19">:<expr pos:start="52:18" pos:end="52:19"><operator pos:start="52:18" pos:end="52:18">-</operator><literal type="number" pos:start="52:19" pos:end="52:19">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="54:1" pos:end="57:2">/* returns:
   -1 no day
   0 monday - 6 sunday
*/</comment>
<function pos:start="58:1" pos:end="73:1"><type pos:start="58:1" pos:end="58:10"><specifier pos:start="58:1" pos:end="58:6">static</specifier> <name pos:start="58:8" pos:end="58:10">int</name></type> <name pos:start="58:12" pos:end="58:21">checkmonth</name><parameter_list pos:start="58:22" pos:end="58:40">(<parameter pos:start="58:23" pos:end="58:39"><decl pos:start="58:23" pos:end="58:39"><type pos:start="58:23" pos:end="58:34"><specifier pos:start="58:23" pos:end="58:27">const</specifier> <name pos:start="58:29" pos:end="58:32">char</name> <modifier pos:start="58:34" pos:end="58:34">*</modifier></type><name pos:start="58:35" pos:end="58:39">check</name></decl></parameter>)</parameter_list>
<block pos:start="59:1" pos:end="73:1">{<block_content pos:start="60:3" pos:end="72:20">
  <decl_stmt pos:start="60:3" pos:end="60:8"><decl pos:start="60:3" pos:end="60:7"><type pos:start="60:3" pos:end="60:5"><name pos:start="60:3" pos:end="60:5">int</name></type> <name pos:start="60:7" pos:end="60:7">i</name></decl>;</decl_stmt>
  <decl_stmt pos:start="61:3" pos:end="61:27"><decl pos:start="61:3" pos:end="61:26"><type pos:start="61:3" pos:end="61:22"><specifier pos:start="61:3" pos:end="61:7">const</specifier> <name pos:start="61:9" pos:end="61:12">char</name> <modifier pos:start="61:14" pos:end="61:14">*</modifier> <specifier pos:start="61:16" pos:end="61:20">const</specifier> <modifier pos:start="61:22" pos:end="61:22">*</modifier></type><name pos:start="61:23" pos:end="61:26">what</name></decl>;</decl_stmt>
  <decl_stmt pos:start="62:3" pos:end="62:15"><decl pos:start="62:3" pos:end="62:14"><type pos:start="62:3" pos:end="62:5"><name pos:start="62:3" pos:end="62:5">int</name></type> <name pos:start="62:7" pos:end="62:11">found</name><init pos:start="62:12" pos:end="62:14">= <expr pos:start="62:14" pos:end="62:14"><literal type="number" pos:start="62:14" pos:end="62:14">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt pos:start="64:3" pos:end="64:24"><expr pos:start="64:3" pos:end="64:23"><name pos:start="64:3" pos:end="64:6">what</name> <operator pos:start="64:8" pos:end="64:8">=</operator> <operator pos:start="64:10" pos:end="64:10">&amp;</operator><name pos:start="64:11" pos:end="64:23"><name pos:start="64:11" pos:end="64:20">Curl_month</name><index pos:start="64:21" pos:end="64:23">[<expr pos:start="64:22" pos:end="64:22"><literal type="number" pos:start="64:22" pos:end="64:22">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <for pos:start="65:3" pos:end="71:3">for<control pos:start="65:6" pos:end="65:21">(<init pos:start="65:7" pos:end="65:10"><expr pos:start="65:7" pos:end="65:9"><name pos:start="65:7" pos:end="65:7">i</name><operator pos:start="65:8" pos:end="65:8">=</operator><literal type="number" pos:start="65:9" pos:end="65:9">0</literal></expr>;</init> <condition pos:start="65:12" pos:end="65:16"><expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:12">i</name><operator pos:start="65:13" pos:end="65:13">&lt;</operator><literal type="number" pos:start="65:14" pos:end="65:15">12</literal></expr>;</condition> <incr pos:start="65:18" pos:end="65:20"><expr pos:start="65:18" pos:end="65:20"><name pos:start="65:18" pos:end="65:18">i</name><operator pos:start="65:19" pos:end="65:20">++</operator></expr></incr>)</control> <block pos:start="65:23" pos:end="71:3">{<block_content pos:start="66:5" pos:end="70:11">
    <if_stmt pos:start="66:5" pos:end="69:5"><if pos:start="66:5" pos:end="69:5">if<condition pos:start="66:7" pos:end="66:49">(<expr pos:start="66:8" pos:end="66:48"><call pos:start="66:8" pos:end="66:48"><name pos:start="66:8" pos:end="66:32">est_client_Curl_raw_equal</name><argument_list pos:start="66:33" pos:end="66:48">(<argument pos:start="66:34" pos:end="66:38"><expr pos:start="66:34" pos:end="66:38"><name pos:start="66:34" pos:end="66:38">check</name></expr></argument>, <argument pos:start="66:41" pos:end="66:47"><expr pos:start="66:41" pos:end="66:47"><name pos:start="66:41" pos:end="66:47"><name pos:start="66:41" pos:end="66:44">what</name><index pos:start="66:45" pos:end="66:47">[<expr pos:start="66:46" pos:end="66:46"><literal type="number" pos:start="66:46" pos:end="66:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="66:51" pos:end="69:5">{<block_content pos:start="67:9" pos:end="68:12">
        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:13">found</name><operator pos:start="67:14" pos:end="67:14">=</operator><literal type="number" pos:start="67:15" pos:end="67:15">1</literal></expr>;</expr_stmt>
      <break pos:start="68:7" pos:end="68:12">break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="70:5" pos:end="70:11"><expr pos:start="70:5" pos:end="70:10"><name pos:start="70:5" pos:end="70:8">what</name><operator pos:start="70:9" pos:end="70:10">++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return pos:start="72:3" pos:end="72:20">return <expr pos:start="72:10" pos:end="72:19"><ternary pos:start="72:10" pos:end="72:19"><condition pos:start="72:10" pos:end="72:15"><expr pos:start="72:10" pos:end="72:14"><name pos:start="72:10" pos:end="72:14">found</name></expr>?</condition><then pos:start="72:16" pos:end="72:16"><expr pos:start="72:16" pos:end="72:16"><name pos:start="72:16" pos:end="72:16">i</name></expr></then><else pos:start="72:17" pos:end="72:19">:<expr pos:start="72:18" pos:end="72:19"><operator pos:start="72:18" pos:end="72:18">-</operator><literal type="number" pos:start="72:19" pos:end="72:19">1</literal></expr></else></ternary></expr>;</return> <comment type="block" pos:start="72:22" pos:end="72:72">/* return the offset or -1, no real offset is -1 */</comment>
</block_content>}</block></function>
<comment type="block" pos:start="74:1" pos:end="75:57">/* return the time zone offset between GMT and the input one, in number
   of seconds or -1 if the timezone wasn't found/legal */</comment>
<function pos:start="76:1" pos:end="91:1"><type pos:start="76:1" pos:end="76:10"><specifier pos:start="76:1" pos:end="76:6">static</specifier> <name pos:start="76:8" pos:end="76:10">int</name></type> <name pos:start="76:12" pos:end="76:18">checktz</name><parameter_list pos:start="76:19" pos:end="76:37">(<parameter pos:start="76:20" pos:end="76:36"><decl pos:start="76:20" pos:end="76:36"><type pos:start="76:20" pos:end="76:31"><specifier pos:start="76:20" pos:end="76:24">const</specifier> <name pos:start="76:26" pos:end="76:29">char</name> <modifier pos:start="76:31" pos:end="76:31">*</modifier></type><name pos:start="76:32" pos:end="76:36">check</name></decl></parameter>)</parameter_list>
<block pos:start="77:1" pos:end="91:1">{<block_content pos:start="78:3" pos:end="90:34">
  <decl_stmt pos:start="78:3" pos:end="78:17"><decl pos:start="78:3" pos:end="78:16"><type pos:start="78:3" pos:end="78:14"><name pos:start="78:3" pos:end="78:10">unsigned</name> <name pos:start="78:12" pos:end="78:14">int</name></type> <name pos:start="78:16" pos:end="78:16">i</name></decl>;</decl_stmt>
  <decl_stmt pos:start="79:3" pos:end="79:28"><decl pos:start="79:3" pos:end="79:27"><type pos:start="79:3" pos:end="79:23"><specifier pos:start="79:3" pos:end="79:7">const</specifier> <name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:14">struct</name> <name pos:start="79:16" pos:end="79:21">tzinfo</name></name> <modifier pos:start="79:23" pos:end="79:23">*</modifier></type><name pos:start="79:24" pos:end="79:27">what</name></decl>;</decl_stmt>
  <decl_stmt pos:start="80:3" pos:end="80:15"><decl pos:start="80:3" pos:end="80:14"><type pos:start="80:3" pos:end="80:5"><name pos:start="80:3" pos:end="80:5">int</name></type> <name pos:start="80:7" pos:end="80:11">found</name><init pos:start="80:12" pos:end="80:14">= <expr pos:start="80:14" pos:end="80:14"><literal type="number" pos:start="80:14" pos:end="80:14">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt pos:start="82:3" pos:end="82:12"><expr pos:start="82:3" pos:end="82:11"><name pos:start="82:3" pos:end="82:6">what</name> <operator pos:start="82:8" pos:end="82:8">=</operator> <name pos:start="82:10" pos:end="82:11">tz</name></expr>;</expr_stmt>
  <for pos:start="83:3" pos:end="89:3">for<control pos:start="83:6" pos:end="83:44">(<init pos:start="83:7" pos:end="83:10"><expr pos:start="83:7" pos:end="83:9"><name pos:start="83:7" pos:end="83:7">i</name><operator pos:start="83:8" pos:end="83:8">=</operator><literal type="number" pos:start="83:9" pos:end="83:9">0</literal></expr>;</init> <condition pos:start="83:12" pos:end="83:39"><expr pos:start="83:12" pos:end="83:38"><name pos:start="83:12" pos:end="83:12">i</name><operator pos:start="83:13" pos:end="83:13">&lt;</operator> <sizeof pos:start="83:15" pos:end="83:24">sizeof<argument_list pos:start="83:21" pos:end="83:24">(<argument pos:start="83:22" pos:end="83:23"><expr pos:start="83:22" pos:end="83:23"><name pos:start="83:22" pos:end="83:23">tz</name></expr></argument>)</argument_list></sizeof><operator pos:start="83:25" pos:end="83:25">/</operator><sizeof pos:start="83:26" pos:end="83:38">sizeof<argument_list pos:start="83:32" pos:end="83:38">(<argument pos:start="83:33" pos:end="83:37"><expr pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:34">tz</name><index pos:start="83:35" pos:end="83:37">[<expr pos:start="83:36" pos:end="83:36"><literal type="number" pos:start="83:36" pos:end="83:36">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr pos:start="83:41" pos:end="83:43"><expr pos:start="83:41" pos:end="83:43"><name pos:start="83:41" pos:end="83:41">i</name><operator pos:start="83:42" pos:end="83:43">++</operator></expr></incr>)</control> <block pos:start="83:46" pos:end="89:3">{<block_content pos:start="84:5" pos:end="88:11">
    <if_stmt pos:start="84:5" pos:end="87:5"><if pos:start="84:5" pos:end="87:5">if<condition pos:start="84:7" pos:end="84:52">(<expr pos:start="84:8" pos:end="84:51"><call pos:start="84:8" pos:end="84:51"><name pos:start="84:8" pos:end="84:32">est_client_Curl_raw_equal</name><argument_list pos:start="84:33" pos:end="84:51">(<argument pos:start="84:34" pos:end="84:38"><expr pos:start="84:34" pos:end="84:38"><name pos:start="84:34" pos:end="84:38">check</name></expr></argument>, <argument pos:start="84:41" pos:end="84:50"><expr pos:start="84:41" pos:end="84:50"><name pos:start="84:41" pos:end="84:50"><name pos:start="84:41" pos:end="84:44">what</name><operator pos:start="84:45" pos:end="84:46">-&gt;</operator><name pos:start="84:47" pos:end="84:50">name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="84:54" pos:end="87:5">{<block_content pos:start="85:7" pos:end="86:12">
      <expr_stmt pos:start="85:7" pos:end="85:14"><expr pos:start="85:7" pos:end="85:13"><name pos:start="85:7" pos:end="85:11">found</name><operator pos:start="85:12" pos:end="85:12">=</operator><literal type="number" pos:start="85:13" pos:end="85:13">1</literal></expr>;</expr_stmt>
      <break pos:start="86:7" pos:end="86:12">break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:11"><expr pos:start="88:5" pos:end="88:10"><name pos:start="88:5" pos:end="88:8">what</name><operator pos:start="88:9" pos:end="88:10">++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return pos:start="90:3" pos:end="90:34">return <expr pos:start="90:10" pos:end="90:33"><ternary pos:start="90:10" pos:end="90:33"><condition pos:start="90:10" pos:end="90:15"><expr pos:start="90:10" pos:end="90:14"><name pos:start="90:10" pos:end="90:14">found</name></expr>?</condition><then pos:start="90:16" pos:end="90:30"><expr pos:start="90:16" pos:end="90:30"><name pos:start="90:16" pos:end="90:27"><name pos:start="90:16" pos:end="90:19">what</name><operator pos:start="90:20" pos:end="90:21">-&gt;</operator><name pos:start="90:22" pos:end="90:27">offset</name></name><operator pos:start="90:28" pos:end="90:28">*</operator><literal type="number" pos:start="90:29" pos:end="90:30">60</literal></expr></then><else pos:start="90:31" pos:end="90:33">:<expr pos:start="90:32" pos:end="90:33"><operator pos:start="90:32" pos:end="90:32">-</operator><literal type="number" pos:start="90:33" pos:end="90:33">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="92:1" pos:end="93:57">/* return the time zone offset between GMT and the input one, in number
   of seconds or -1 if the timezone wasn't found/legal */</comment>
<function pos:start="94:1" pos:end="99:1"><type pos:start="94:1" pos:end="94:11"><specifier pos:start="94:1" pos:end="94:6">static</specifier> <name pos:start="94:8" pos:end="94:11">void</name></type> <name pos:start="94:13" pos:end="94:27">skip_over_white</name><parameter_list pos:start="94:28" pos:end="94:46">(<parameter pos:start="94:29" pos:end="94:45"><decl pos:start="94:29" pos:end="94:45"><type pos:start="94:29" pos:end="94:41"><specifier pos:start="94:29" pos:end="94:33">const</specifier> <name pos:start="94:35" pos:end="94:38">char</name> <modifier pos:start="94:40" pos:end="94:40">*</modifier><modifier pos:start="94:41" pos:end="94:41">*</modifier></type><name pos:start="94:42" pos:end="94:45">date</name></decl></parameter>)</parameter_list>
<block pos:start="95:1" pos:end="99:1">{<block_content pos:start="97:3" pos:end="98:14">
  <comment type="block" pos:start="96:3" pos:end="96:53">/* skip everything that aren't letters or digits */</comment>
  <while pos:start="97:3" pos:end="98:14">while<condition pos:start="97:8" pos:end="97:35">(<expr pos:start="97:9" pos:end="97:34"><operator pos:start="97:9" pos:end="97:9">*</operator><operator pos:start="97:10" pos:end="97:10">*</operator><name pos:start="97:11" pos:end="97:14">date</name> <operator pos:start="97:16" pos:end="97:17">&amp;&amp;</operator> <operator pos:start="97:19" pos:end="97:19">!</operator><call pos:start="97:20" pos:end="97:34"><name pos:start="97:20" pos:end="97:26">ISALNUM</name><argument_list pos:start="97:27" pos:end="97:34">(<argument pos:start="97:28" pos:end="97:33"><expr pos:start="97:28" pos:end="97:33"><operator pos:start="97:28" pos:end="97:28">*</operator><operator pos:start="97:29" pos:end="97:29">*</operator><name pos:start="97:30" pos:end="97:33">date</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="98:5" pos:end="98:14"><block_content pos:start="98:5" pos:end="98:14">
    <expr_stmt pos:start="98:5" pos:end="98:14"><expr pos:start="98:5" pos:end="98:13"><operator pos:start="98:5" pos:end="98:5">(</operator><operator pos:start="98:6" pos:end="98:6">*</operator><name pos:start="98:7" pos:end="98:10">date</name><operator pos:start="98:11" pos:end="98:11">)</operator><operator pos:start="98:12" pos:end="98:13">++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
<comment type="block" pos:start="100:1" pos:end="104:3">/* struct tm to time since epoch in GMT time zone.
 * This is similar to the standard mktime function but for GMT only, and
 * doesn't suffer from the various bugs and portability problems that
 * some systems' implementations have.
 */</comment>
<function pos:start="105:1" pos:end="134:1"><type pos:start="105:1" pos:end="105:13"><specifier pos:start="105:1" pos:end="105:6">static</specifier> <name pos:start="105:8" pos:end="105:13">time_t</name></type> <name pos:start="105:15" pos:end="105:23">my_timegm</name><parameter_list pos:start="105:24" pos:end="105:41">(<parameter pos:start="105:25" pos:end="105:40"><decl pos:start="105:25" pos:end="105:40"><type pos:start="105:25" pos:end="105:40"><name pos:start="105:25" pos:end="105:36"><name pos:start="105:25" pos:end="105:30">struct</name> <name pos:start="105:32" pos:end="105:36">my_tm</name></name> <modifier pos:start="105:38" pos:end="105:38">*</modifier></type><name pos:start="105:39" pos:end="105:40">tm</name></decl></parameter>)</parameter_list>
<block pos:start="106:1" pos:end="134:1">{<block_content pos:start="107:3" pos:end="133:63">
  <decl_stmt pos:start="107:3" pos:end="108:62"><decl pos:start="107:3" pos:end="108:61"><type pos:start="107:3" pos:end="107:18"><specifier pos:start="107:3" pos:end="107:8">static</specifier> <specifier pos:start="107:10" pos:end="107:14">const</specifier> <name pos:start="107:16" pos:end="107:18">int</name></type> <name pos:start="107:20" pos:end="107:45"><name pos:start="107:20" pos:end="107:40">month_days_cumulative</name> <index pos:start="107:42" pos:end="107:45">[<expr pos:start="107:43" pos:end="107:44"><literal type="number" pos:start="107:43" pos:end="107:44">12</literal></expr>]</index></name> <init pos:start="107:47" pos:end="108:61">=
    <expr pos:start="108:5" pos:end="108:61"><block pos:start="108:5" pos:end="108:61">{ <expr pos:start="108:7" pos:end="108:7"><literal type="number" pos:start="108:7" pos:end="108:7">0</literal></expr>, <expr pos:start="108:10" pos:end="108:11"><literal type="number" pos:start="108:10" pos:end="108:11">31</literal></expr>, <expr pos:start="108:14" pos:end="108:15"><literal type="number" pos:start="108:14" pos:end="108:15">59</literal></expr>, <expr pos:start="108:18" pos:end="108:19"><literal type="number" pos:start="108:18" pos:end="108:19">90</literal></expr>, <expr pos:start="108:22" pos:end="108:24"><literal type="number" pos:start="108:22" pos:end="108:24">120</literal></expr>, <expr pos:start="108:27" pos:end="108:29"><literal type="number" pos:start="108:27" pos:end="108:29">151</literal></expr>, <expr pos:start="108:32" pos:end="108:34"><literal type="number" pos:start="108:32" pos:end="108:34">181</literal></expr>, <expr pos:start="108:37" pos:end="108:39"><literal type="number" pos:start="108:37" pos:end="108:39">212</literal></expr>, <expr pos:start="108:42" pos:end="108:44"><literal type="number" pos:start="108:42" pos:end="108:44">243</literal></expr>, <expr pos:start="108:47" pos:end="108:49"><literal type="number" pos:start="108:47" pos:end="108:49">273</literal></expr>, <expr pos:start="108:52" pos:end="108:54"><literal type="number" pos:start="108:52" pos:end="108:54">304</literal></expr>, <expr pos:start="108:57" pos:end="108:59"><literal type="number" pos:start="108:57" pos:end="108:59">334</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="109:3" pos:end="109:29"><decl pos:start="109:3" pos:end="109:11"><type pos:start="109:3" pos:end="109:5"><name pos:start="109:3" pos:end="109:5">int</name></type> <name pos:start="109:7" pos:end="109:11">month</name></decl>, <decl pos:start="109:14" pos:end="109:17"><type ref="prev" pos:start="109:3" pos:end="109:5"/><name pos:start="109:14" pos:end="109:17">year</name></decl>, <decl pos:start="109:20" pos:end="109:28"><type ref="prev" pos:start="109:3" pos:end="109:5"/><name pos:start="109:20" pos:end="109:28">leap_days</name></decl>;</decl_stmt>

  <if_stmt pos:start="111:3" pos:end="114:14"><if pos:start="111:3" pos:end="114:14">if<condition pos:start="111:5" pos:end="111:22">(<expr pos:start="111:6" pos:end="111:21"><name pos:start="111:6" pos:end="111:16"><name pos:start="111:6" pos:end="111:7">tm</name><operator pos:start="111:8" pos:end="111:9">-&gt;</operator><name pos:start="111:10" pos:end="111:16">tm_year</name></name> <operator pos:start="111:18" pos:end="111:18">&lt;</operator> <literal type="number" pos:start="111:20" pos:end="111:21">70</literal></expr>)</condition><block type="pseudo" pos:start="114:5" pos:end="114:14"><block_content pos:start="114:5" pos:end="114:14">
    <comment type="block" pos:start="112:5" pos:end="113:36">/* we don't support years before 1970 as they will cause this function
       to return a negative value */</comment>
    <return pos:start="114:5" pos:end="114:14">return <expr pos:start="114:12" pos:end="114:13"><operator pos:start="114:12" pos:end="114:12">-</operator><literal type="number" pos:start="114:13" pos:end="114:13">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt pos:start="116:3" pos:end="116:28"><expr pos:start="116:3" pos:end="116:27"><name pos:start="116:3" pos:end="116:6">year</name> <operator pos:start="116:8" pos:end="116:8">=</operator> <name pos:start="116:10" pos:end="116:20"><name pos:start="116:10" pos:end="116:11">tm</name><operator pos:start="116:12" pos:end="116:13">-&gt;</operator><name pos:start="116:14" pos:end="116:20">tm_year</name></name> <operator pos:start="116:22" pos:end="116:22">+</operator> <literal type="number" pos:start="116:24" pos:end="116:27">1900</literal></expr>;</expr_stmt>
  <expr_stmt pos:start="117:3" pos:end="117:21"><expr pos:start="117:3" pos:end="117:20"><name pos:start="117:3" pos:end="117:7">month</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <name pos:start="117:11" pos:end="117:20"><name pos:start="117:11" pos:end="117:12">tm</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:20">tm_mon</name></name></expr>;</expr_stmt>
  <if_stmt pos:start="118:3" pos:end="125:3"><if pos:start="118:3" pos:end="121:3">if<condition pos:start="118:5" pos:end="118:15">(<expr pos:start="118:6" pos:end="118:14"><name pos:start="118:6" pos:end="118:10">month</name> <operator pos:start="118:12" pos:end="118:12">&lt;</operator> <literal type="number" pos:start="118:14" pos:end="118:14">0</literal></expr>)</condition> <block pos:start="118:17" pos:end="121:3">{<block_content pos:start="119:5" pos:end="120:35">
    <expr_stmt pos:start="119:5" pos:end="119:30"><expr pos:start="119:5" pos:end="119:29"><name pos:start="119:5" pos:end="119:8">year</name> <operator pos:start="119:10" pos:end="119:11">+=</operator> <operator pos:start="119:13" pos:end="119:13">(</operator><literal type="number" pos:start="119:14" pos:end="119:17">11</literal> <operator pos:start="119:17" pos:end="119:17">-</operator> <name pos:start="119:19" pos:end="119:23">month</name><operator pos:start="119:24" pos:end="119:24">)</operator> <operator pos:start="119:26" pos:end="119:26">/</operator> <literal type="number" pos:start="119:28" pos:end="119:29">12</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="120:5" pos:end="120:35"><expr pos:start="120:5" pos:end="120:34"><name pos:start="120:5" pos:end="120:9">month</name> <operator pos:start="120:11" pos:end="120:11">=</operator> <literal type="number" pos:start="120:13" pos:end="120:16">11</literal> <operator pos:start="120:16" pos:end="120:16">-</operator> <operator pos:start="120:18" pos:end="120:18">(</operator><literal type="number" pos:start="120:19" pos:end="120:22">11</literal> <operator pos:start="120:22" pos:end="120:22">-</operator> <name pos:start="120:24" pos:end="120:28">month</name><operator pos:start="120:29" pos:end="120:29">)</operator> <operator pos:start="120:31" pos:end="120:31">%</operator> <literal type="number" pos:start="120:33" pos:end="120:34">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif" pos:start="122:3" pos:end="125:3">else if<condition pos:start="122:10" pos:end="122:22">(<expr pos:start="122:11" pos:end="122:21"><name pos:start="122:11" pos:end="122:15">month</name> <operator pos:start="122:17" pos:end="122:18">&gt;=</operator> <literal type="number" pos:start="122:20" pos:end="122:21">12</literal></expr>)</condition> <block pos:start="122:24" pos:end="125:3">{<block_content pos:start="123:5" pos:end="124:23">
    <expr_stmt pos:start="123:5" pos:end="123:23"><expr pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:8">year</name> <operator pos:start="123:10" pos:end="123:11">-=</operator> <name pos:start="123:13" pos:end="123:17">month</name> <operator pos:start="123:19" pos:end="123:19">/</operator> <literal type="number" pos:start="123:21" pos:end="123:22">12</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="124:5" pos:end="124:23"><expr pos:start="124:5" pos:end="124:22"><name pos:start="124:5" pos:end="124:9">month</name> <operator pos:start="124:11" pos:end="124:11">=</operator> <name pos:start="124:13" pos:end="124:17">month</name> <operator pos:start="124:19" pos:end="124:19">%</operator> <literal type="number" pos:start="124:21" pos:end="124:22">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt pos:start="127:3" pos:end="127:39"><expr pos:start="127:3" pos:end="127:38"><name pos:start="127:3" pos:end="127:11">leap_days</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <name pos:start="127:15" pos:end="127:18">year</name> <operator pos:start="127:20" pos:end="127:20">-</operator> <operator pos:start="127:22" pos:end="127:22">(</operator><name pos:start="127:23" pos:end="127:32"><name pos:start="127:23" pos:end="127:24">tm</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:32">tm_mon</name></name> <operator pos:start="127:34" pos:end="127:35">&lt;=</operator> <literal type="number" pos:start="127:37" pos:end="127:37">1</literal><operator pos:start="127:38" pos:end="127:38">)</operator></expr>;</expr_stmt>
  <expr_stmt pos:start="128:3" pos:end="129:59"><expr pos:start="128:3" pos:end="129:58"><name pos:start="128:3" pos:end="128:11">leap_days</name> <operator pos:start="128:13" pos:end="128:13">=</operator> <operator pos:start="128:15" pos:end="128:15">(</operator><operator pos:start="128:16" pos:end="128:16">(</operator><name pos:start="128:17" pos:end="128:25">leap_days</name> <operator pos:start="128:27" pos:end="128:27">/</operator> <literal type="number" pos:start="128:29" pos:end="128:29">4</literal><operator pos:start="128:30" pos:end="128:30">)</operator> <operator pos:start="128:32" pos:end="128:32">-</operator> <operator pos:start="128:34" pos:end="128:34">(</operator><name pos:start="128:35" pos:end="128:43">leap_days</name> <operator pos:start="128:45" pos:end="128:45">/</operator> <literal type="number" pos:start="128:47" pos:end="128:49">100</literal><operator pos:start="128:50" pos:end="128:50">)</operator> <operator pos:start="128:52" pos:end="128:52">+</operator> <operator pos:start="128:54" pos:end="128:54">(</operator><name pos:start="128:55" pos:end="128:63">leap_days</name> <operator pos:start="128:65" pos:end="128:65">/</operator> <literal type="number" pos:start="128:67" pos:end="128:69">400</literal><operator pos:start="128:70" pos:end="128:70">)</operator>
               <operator pos:start="129:16" pos:end="129:16">-</operator> <operator pos:start="129:18" pos:end="129:18">(</operator><literal type="number" pos:start="129:19" pos:end="129:22">1969</literal> <operator pos:start="129:24" pos:end="129:24">/</operator> <literal type="number" pos:start="129:26" pos:end="129:26">4</literal><operator pos:start="129:27" pos:end="129:27">)</operator> <operator pos:start="129:29" pos:end="129:29">+</operator> <operator pos:start="129:31" pos:end="129:31">(</operator><literal type="number" pos:start="129:32" pos:end="129:35">1969</literal> <operator pos:start="129:37" pos:end="129:37">/</operator> <literal type="number" pos:start="129:39" pos:end="129:41">100</literal><operator pos:start="129:42" pos:end="129:42">)</operator> <operator pos:start="129:44" pos:end="129:44">-</operator> <operator pos:start="129:46" pos:end="129:46">(</operator><literal type="number" pos:start="129:47" pos:end="129:50">1969</literal> <operator pos:start="129:52" pos:end="129:52">/</operator> <literal type="number" pos:start="129:54" pos:end="129:56">400</literal><operator pos:start="129:57" pos:end="129:57">)</operator><operator pos:start="129:58" pos:end="129:58">)</operator></expr>;</expr_stmt>

  <return pos:start="131:3" pos:end="133:63">return <expr pos:start="131:10" pos:end="133:62"><operator pos:start="131:10" pos:end="131:10">(</operator><operator pos:start="131:11" pos:end="131:11">(</operator><operator pos:start="131:12" pos:end="131:12">(</operator><operator pos:start="131:13" pos:end="131:13">(</operator><name pos:start="131:14" pos:end="131:19">time_t</name><operator pos:start="131:20" pos:end="131:20">)</operator> <operator pos:start="131:22" pos:end="131:22">(</operator><name pos:start="131:23" pos:end="131:26">year</name> <operator pos:start="131:28" pos:end="131:28">-</operator> <literal type="number" pos:start="131:30" pos:end="131:33">1970</literal><operator pos:start="131:34" pos:end="131:34">)</operator> <operator pos:start="131:36" pos:end="131:36">*</operator> <literal type="number" pos:start="131:38" pos:end="132:13">365</literal>
            <operator pos:start="132:13" pos:end="132:13">+</operator> <name pos:start="132:15" pos:end="132:23">leap_days</name> <operator pos:start="132:25" pos:end="132:25">+</operator> <name pos:start="132:27" pos:end="132:55"><name pos:start="132:27" pos:end="132:47">month_days_cumulative</name> <index pos:start="132:49" pos:end="132:55">[<expr pos:start="132:50" pos:end="132:54"><name pos:start="132:50" pos:end="132:54">month</name></expr>]</index></name> <operator pos:start="132:57" pos:end="132:57">+</operator> <name pos:start="132:59" pos:end="132:69"><name pos:start="132:59" pos:end="132:60">tm</name><operator pos:start="132:61" pos:end="132:62">-&gt;</operator><name pos:start="132:63" pos:end="132:69">tm_mday</name></name> <operator pos:start="132:71" pos:end="132:71">-</operator> <literal type="number" pos:start="132:73" pos:end="132:73">1</literal><operator pos:start="132:74" pos:end="132:74">)</operator> <operator pos:start="132:76" pos:end="132:76">*</operator> <literal type="number" pos:start="132:78" pos:end="133:12">24</literal>
           <operator pos:start="133:12" pos:end="133:12">+</operator> <name pos:start="133:14" pos:end="133:24"><name pos:start="133:14" pos:end="133:15">tm</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:24">tm_hour</name></name><operator pos:start="133:25" pos:end="133:25">)</operator> <operator pos:start="133:27" pos:end="133:27">*</operator> <literal type="number" pos:start="133:29" pos:end="133:32">60</literal> <operator pos:start="133:32" pos:end="133:32">+</operator> <name pos:start="133:34" pos:end="133:43"><name pos:start="133:34" pos:end="133:35">tm</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:43">tm_min</name></name><operator pos:start="133:44" pos:end="133:44">)</operator> <operator pos:start="133:46" pos:end="133:46">*</operator> <literal type="number" pos:start="133:48" pos:end="133:51">60</literal> <operator pos:start="133:51" pos:end="133:51">+</operator> <name pos:start="133:53" pos:end="133:62"><name pos:start="133:53" pos:end="133:54">tm</name><operator pos:start="133:55" pos:end="133:56">-&gt;</operator><name pos:start="133:57" pos:end="133:62">tm_sec</name></name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="135:1" pos:end="144:3">/*
 * parsedate()
 *
 * Returns:
 *
 * PARSEDATE_OK     - a fine conversion
 * PARSEDATE_FAIL   - failed to convert
 * PARSEDATE_LATER  - time overflow at the far end of time_t
 * PARSEDATE_SOONER - time underflow at the low end of time_t
 */</comment>
<function pos:start="145:1" pos:end="352:1"><type pos:start="145:1" pos:end="145:10"><specifier pos:start="145:1" pos:end="145:6">static</specifier> <name pos:start="145:8" pos:end="145:10">int</name></type> <name pos:start="145:12" pos:end="145:20">parsedate</name><parameter_list pos:start="145:21" pos:end="145:54">(<parameter pos:start="145:22" pos:end="145:37"><decl pos:start="145:22" pos:end="145:37"><type pos:start="145:22" pos:end="145:37"><specifier pos:start="145:22" pos:end="145:26">const</specifier> <name pos:start="145:28" pos:end="145:31">char</name> <modifier pos:start="145:33" pos:end="145:33">*</modifier></type><name pos:start="145:34" pos:end="145:37">date</name></decl></parameter>, <parameter pos:start="145:40" pos:end="145:53"><decl pos:start="145:40" pos:end="145:53"><type pos:start="145:40" pos:end="145:53"><name pos:start="145:40" pos:end="145:45">time_t</name> <modifier pos:start="145:47" pos:end="145:47">*</modifier></type><name pos:start="145:48" pos:end="145:53">output</name></decl></parameter>)</parameter_list>
<block pos:start="146:1" pos:end="352:1">{<block_content pos:start="147:3" pos:end="351:22">
  <decl_stmt pos:start="147:3" pos:end="147:15"><decl pos:start="147:3" pos:end="147:14"><type pos:start="147:3" pos:end="147:8"><name pos:start="147:3" pos:end="147:8">time_t</name></type> <name pos:start="147:10" pos:end="147:10">t</name> <init pos:start="147:12" pos:end="147:14">= <expr pos:start="147:14" pos:end="147:14"><literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="148:3" pos:end="148:17"><decl pos:start="148:3" pos:end="148:16"><type pos:start="148:3" pos:end="148:5"><name pos:start="148:3" pos:end="148:5">int</name></type> <name pos:start="148:7" pos:end="148:13">wdaynum</name><init pos:start="148:14" pos:end="148:16">=<expr pos:start="148:15" pos:end="148:16"><operator pos:start="148:15" pos:end="148:15">-</operator><literal type="number" pos:start="148:16" pos:end="148:16">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="148:20" pos:end="148:62">/* day of the week number, 0-6 (mon-sun) */</comment>
  <decl_stmt pos:start="149:3" pos:end="149:16"><decl pos:start="149:3" pos:end="149:15"><type pos:start="149:3" pos:end="149:5"><name pos:start="149:3" pos:end="149:5">int</name></type> <name pos:start="149:7" pos:end="149:12">monnum</name><init pos:start="149:13" pos:end="149:15">=<expr pos:start="149:14" pos:end="149:15"><operator pos:start="149:14" pos:end="149:14">-</operator><literal type="number" pos:start="149:15" pos:end="149:15">1</literal></expr></init></decl>;</decl_stmt>   <comment type="block" pos:start="149:20" pos:end="149:55">/* month of the year number, 0-11 */</comment>
  <decl_stmt pos:start="150:3" pos:end="150:17"><decl pos:start="150:3" pos:end="150:16"><type pos:start="150:3" pos:end="150:5"><name pos:start="150:3" pos:end="150:5">int</name></type> <name pos:start="150:7" pos:end="150:13">mdaynum</name><init pos:start="150:14" pos:end="150:16">=<expr pos:start="150:15" pos:end="150:16"><operator pos:start="150:15" pos:end="150:15">-</operator><literal type="number" pos:start="150:16" pos:end="150:16">1</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="150:19" pos:end="150:44">/* day of month, 1 - 31 */</comment>
  <decl_stmt pos:start="151:3" pos:end="151:17"><decl pos:start="151:3" pos:end="151:16"><type pos:start="151:3" pos:end="151:5"><name pos:start="151:3" pos:end="151:5">int</name></type> <name pos:start="151:7" pos:end="151:13">hournum</name><init pos:start="151:14" pos:end="151:16">=<expr pos:start="151:15" pos:end="151:16"><operator pos:start="151:15" pos:end="151:15">-</operator><literal type="number" pos:start="151:16" pos:end="151:16">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="152:3" pos:end="152:16"><decl pos:start="152:3" pos:end="152:15"><type pos:start="152:3" pos:end="152:5"><name pos:start="152:3" pos:end="152:5">int</name></type> <name pos:start="152:7" pos:end="152:12">minnum</name><init pos:start="152:13" pos:end="152:15">=<expr pos:start="152:14" pos:end="152:15"><operator pos:start="152:14" pos:end="152:14">-</operator><literal type="number" pos:start="152:15" pos:end="152:15">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="153:3" pos:end="153:16"><decl pos:start="153:3" pos:end="153:15"><type pos:start="153:3" pos:end="153:5"><name pos:start="153:3" pos:end="153:5">int</name></type> <name pos:start="153:7" pos:end="153:12">secnum</name><init pos:start="153:13" pos:end="153:15">=<expr pos:start="153:14" pos:end="153:15"><operator pos:start="153:14" pos:end="153:14">-</operator><literal type="number" pos:start="153:15" pos:end="153:15">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="154:3" pos:end="154:17"><decl pos:start="154:3" pos:end="154:16"><type pos:start="154:3" pos:end="154:5"><name pos:start="154:3" pos:end="154:5">int</name></type> <name pos:start="154:7" pos:end="154:13">yearnum</name><init pos:start="154:14" pos:end="154:16">=<expr pos:start="154:15" pos:end="154:16"><operator pos:start="154:15" pos:end="154:15">-</operator><literal type="number" pos:start="154:16" pos:end="154:16">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="155:3" pos:end="155:15"><decl pos:start="155:3" pos:end="155:14"><type pos:start="155:3" pos:end="155:5"><name pos:start="155:3" pos:end="155:5">int</name></type> <name pos:start="155:7" pos:end="155:11">tzoff</name><init pos:start="155:12" pos:end="155:14">=<expr pos:start="155:13" pos:end="155:14"><operator pos:start="155:13" pos:end="155:13">-</operator><literal type="number" pos:start="155:14" pos:end="155:14">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="156:3" pos:end="156:18"><decl pos:start="156:3" pos:end="156:17"><type pos:start="156:3" pos:end="156:14"><name pos:start="156:3" pos:end="156:14"><name pos:start="156:3" pos:end="156:8">struct</name> <name pos:start="156:10" pos:end="156:14">my_tm</name></name></type> <name pos:start="156:16" pos:end="156:17">tm</name></decl>;</decl_stmt>
  <decl_stmt pos:start="157:3" pos:end="157:34"><decl pos:start="157:3" pos:end="157:33"><type pos:start="157:3" pos:end="157:13"><name pos:start="157:3" pos:end="157:13"><name pos:start="157:3" pos:end="157:6">enum</name> <name pos:start="157:8" pos:end="157:13">assume</name></name></type> <name pos:start="157:15" pos:end="157:21">dignext</name> <init pos:start="157:23" pos:end="157:33">= <expr pos:start="157:25" pos:end="157:33"><name pos:start="157:25" pos:end="157:33">DATE_MDAY</name></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="158:3" pos:end="158:28"><decl pos:start="158:3" pos:end="158:27"><type pos:start="158:3" pos:end="158:14"><specifier pos:start="158:3" pos:end="158:7">const</specifier> <name pos:start="158:9" pos:end="158:12">char</name> <modifier pos:start="158:14" pos:end="158:14">*</modifier></type><name pos:start="158:15" pos:end="158:20">indate</name> <init pos:start="158:22" pos:end="158:27">= <expr pos:start="158:24" pos:end="158:27"><name pos:start="158:24" pos:end="158:27">date</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="158:30" pos:end="158:60">/* save the original pointer */</comment>
  <decl_stmt pos:start="159:3" pos:end="159:15"><decl pos:start="159:3" pos:end="159:14"><type pos:start="159:3" pos:end="159:5"><name pos:start="159:3" pos:end="159:5">int</name></type> <name pos:start="159:7" pos:end="159:10">part</name> <init pos:start="159:12" pos:end="159:14">= <expr pos:start="159:14" pos:end="159:14"><literal type="number" pos:start="159:14" pos:end="159:14">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="159:17" pos:end="159:33">/* max 6 parts */</comment>

  <while pos:start="161:3" pos:end="293:3">while<condition pos:start="161:8" pos:end="161:28">(<expr pos:start="161:9" pos:end="161:27"><operator pos:start="161:9" pos:end="161:9">*</operator><name pos:start="161:10" pos:end="161:13">date</name> <operator pos:start="161:15" pos:end="161:16">&amp;&amp;</operator> <operator pos:start="161:18" pos:end="161:18">(</operator><name pos:start="161:19" pos:end="161:22">part</name> <operator pos:start="161:24" pos:end="161:24">&lt;</operator> <literal type="number" pos:start="161:26" pos:end="161:26">6</literal><operator pos:start="161:27" pos:end="161:27">)</operator></expr>)</condition> <block pos:start="161:30" pos:end="293:3">{<block_content pos:start="162:5" pos:end="292:11">
    <decl_stmt pos:start="162:5" pos:end="162:16"><decl pos:start="162:5" pos:end="162:15"><type pos:start="162:5" pos:end="162:7"><name pos:start="162:5" pos:end="162:7">int</name></type> <name pos:start="162:9" pos:end="162:13">found</name><init pos:start="162:14" pos:end="162:15">=<expr pos:start="162:15" pos:end="162:15"><literal type="number" pos:start="162:15" pos:end="162:15">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="164:5" pos:end="164:27"><expr pos:start="164:5" pos:end="164:26"><call pos:start="164:5" pos:end="164:26"><name pos:start="164:5" pos:end="164:19">skip_over_white</name><argument_list pos:start="164:20" pos:end="164:26">(<argument pos:start="164:21" pos:end="164:25"><expr pos:start="164:21" pos:end="164:25"><operator pos:start="164:21" pos:end="164:21">&amp;</operator><name pos:start="164:22" pos:end="164:25">date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="166:5" pos:end="290:5"><if pos:start="166:5" pos:end="196:5">if<condition pos:start="166:7" pos:end="166:22">(<expr pos:start="166:8" pos:end="166:21"><call pos:start="166:8" pos:end="166:21"><name pos:start="166:8" pos:end="166:14">ISALPHA</name><argument_list pos:start="166:15" pos:end="166:21">(<argument pos:start="166:16" pos:end="166:20"><expr pos:start="166:16" pos:end="166:20"><operator pos:start="166:16" pos:end="166:16">*</operator><name pos:start="166:17" pos:end="166:20">date</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="166:24" pos:end="196:5">{<block_content pos:start="168:7" pos:end="195:18">
      <comment type="block" pos:start="167:7" pos:end="167:28">/* a name coming up */</comment>
      <decl_stmt pos:start="168:7" pos:end="168:41"><decl pos:start="168:7" pos:end="168:40"><type pos:start="168:7" pos:end="168:10"><name pos:start="168:7" pos:end="168:10">char</name></type> <name pos:start="168:12" pos:end="168:37"><name pos:start="168:12" pos:end="168:14">buf</name><index pos:start="168:15" pos:end="168:37">[<expr pos:start="168:16" pos:end="168:36"><name pos:start="168:16" pos:end="168:36">EST_CURL_MAX_NAME_STR</name></expr>]</index></name><init pos:start="168:38" pos:end="168:40">=<expr pos:start="168:39" pos:end="168:40"><literal type="string" pos:start="168:39" pos:end="168:40">""</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt pos:start="169:7" pos:end="169:17"><decl pos:start="169:7" pos:end="169:16"><type pos:start="169:7" pos:end="169:12"><name pos:start="169:7" pos:end="169:12">size_t</name></type> <name pos:start="169:14" pos:end="169:16">len</name></decl>;</decl_stmt>
      <expr_stmt pos:start="170:7" pos:end="171:18"><expr pos:start="170:7" pos:end="171:17"><call pos:start="170:7" pos:end="171:17"><name pos:start="170:7" pos:end="170:12">sscanf</name><argument_list pos:start="170:13" pos:end="171:17">(<argument pos:start="170:14" pos:end="170:17"><expr pos:start="170:14" pos:end="170:17"><name pos:start="170:14" pos:end="170:17">date</name></expr></argument>, <argument pos:start="170:20" pos:end="170:78"><expr pos:start="170:20" pos:end="170:78"><literal type="string" pos:start="170:20" pos:end="170:78">"%31[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]"</literal></expr></argument>,
             <argument pos:start="171:14" pos:end="171:16"><expr pos:start="171:14" pos:end="171:16"><name pos:start="171:14" pos:end="171:16">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="172:7" pos:end="172:50"><expr pos:start="172:7" pos:end="172:49"><name pos:start="172:7" pos:end="172:9">len</name> <operator pos:start="172:11" pos:end="172:11">=</operator> <call pos:start="172:13" pos:end="172:49"><name pos:start="172:13" pos:end="172:21">strnlen_s</name><argument_list pos:start="172:22" pos:end="172:49">(<argument pos:start="172:23" pos:end="172:25"><expr pos:start="172:23" pos:end="172:25"><name pos:start="172:23" pos:end="172:25">buf</name></expr></argument>, <argument pos:start="172:28" pos:end="172:48"><expr pos:start="172:28" pos:end="172:48"><name pos:start="172:28" pos:end="172:48">EST_CURL_MAX_NAME_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="174:7" pos:end="178:7"><if pos:start="174:7" pos:end="178:7">if<condition pos:start="174:9" pos:end="174:23">(<expr pos:start="174:10" pos:end="174:22"><name pos:start="174:10" pos:end="174:16">wdaynum</name> <operator pos:start="174:18" pos:end="174:19">==</operator> <operator pos:start="174:21" pos:end="174:21">-</operator><literal type="number" pos:start="174:22" pos:end="174:22">1</literal></expr>)</condition> <block pos:start="174:25" pos:end="178:7">{<block_content pos:start="175:9" pos:end="177:20">
        <expr_stmt pos:start="175:9" pos:end="175:37"><expr pos:start="175:9" pos:end="175:36"><name pos:start="175:9" pos:end="175:15">wdaynum</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <call pos:start="175:19" pos:end="175:36"><name pos:start="175:19" pos:end="175:26">checkday</name><argument_list pos:start="175:27" pos:end="175:36">(<argument pos:start="175:28" pos:end="175:30"><expr pos:start="175:28" pos:end="175:30"><name pos:start="175:28" pos:end="175:30">buf</name></expr></argument>, <argument pos:start="175:33" pos:end="175:35"><expr pos:start="175:33" pos:end="175:35"><name pos:start="175:33" pos:end="175:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="176:9" pos:end="177:20"><if pos:start="176:9" pos:end="177:20">if<condition pos:start="176:11" pos:end="176:25">(<expr pos:start="176:12" pos:end="176:24"><name pos:start="176:12" pos:end="176:18">wdaynum</name> <operator pos:start="176:20" pos:end="176:21">!=</operator> <operator pos:start="176:23" pos:end="176:23">-</operator><literal type="number" pos:start="176:24" pos:end="176:24">1</literal></expr>)</condition><block type="pseudo" pos:start="177:11" pos:end="177:20"><block_content pos:start="177:11" pos:end="177:20">
          <expr_stmt pos:start="177:11" pos:end="177:20"><expr pos:start="177:11" pos:end="177:19"><name pos:start="177:11" pos:end="177:15">found</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <literal type="number" pos:start="177:19" pos:end="177:19">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt pos:start="179:7" pos:end="183:7"><if pos:start="179:7" pos:end="183:7">if<condition pos:start="179:9" pos:end="179:34">(<expr pos:start="179:10" pos:end="179:33"><operator pos:start="179:10" pos:end="179:10">!</operator><name pos:start="179:11" pos:end="179:15">found</name> <operator pos:start="179:17" pos:end="179:18">&amp;&amp;</operator> <operator pos:start="179:20" pos:end="179:20">(</operator><name pos:start="179:21" pos:end="179:26">monnum</name> <operator pos:start="179:28" pos:end="179:29">==</operator> <operator pos:start="179:31" pos:end="179:31">-</operator><literal type="number" pos:start="179:32" pos:end="179:32">1</literal><operator pos:start="179:33" pos:end="179:33">)</operator></expr>)</condition> <block pos:start="179:36" pos:end="183:7">{<block_content pos:start="180:9" pos:end="182:20">
        <expr_stmt pos:start="180:9" pos:end="180:33"><expr pos:start="180:9" pos:end="180:32"><name pos:start="180:9" pos:end="180:14">monnum</name> <operator pos:start="180:16" pos:end="180:16">=</operator> <call pos:start="180:18" pos:end="180:32"><name pos:start="180:18" pos:end="180:27">checkmonth</name><argument_list pos:start="180:28" pos:end="180:32">(<argument pos:start="180:29" pos:end="180:31"><expr pos:start="180:29" pos:end="180:31"><name pos:start="180:29" pos:end="180:31">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="181:9" pos:end="182:20"><if pos:start="181:9" pos:end="182:20">if<condition pos:start="181:11" pos:end="181:24">(<expr pos:start="181:12" pos:end="181:23"><name pos:start="181:12" pos:end="181:17">monnum</name> <operator pos:start="181:19" pos:end="181:20">!=</operator> <operator pos:start="181:22" pos:end="181:22">-</operator><literal type="number" pos:start="181:23" pos:end="181:23">1</literal></expr>)</condition><block type="pseudo" pos:start="182:11" pos:end="182:20"><block_content pos:start="182:11" pos:end="182:20">
          <expr_stmt pos:start="182:11" pos:end="182:20"><expr pos:start="182:11" pos:end="182:19"><name pos:start="182:11" pos:end="182:15">found</name> <operator pos:start="182:17" pos:end="182:17">=</operator> <literal type="number" pos:start="182:19" pos:end="182:19">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt pos:start="185:7" pos:end="190:7"><if pos:start="185:7" pos:end="190:7">if<condition pos:start="185:9" pos:end="185:33">(<expr pos:start="185:10" pos:end="185:32"><operator pos:start="185:10" pos:end="185:10">!</operator><name pos:start="185:11" pos:end="185:15">found</name> <operator pos:start="185:17" pos:end="185:18">&amp;&amp;</operator> <operator pos:start="185:20" pos:end="185:20">(</operator><name pos:start="185:21" pos:end="185:25">tzoff</name> <operator pos:start="185:27" pos:end="185:28">==</operator> <operator pos:start="185:30" pos:end="185:30">-</operator><literal type="number" pos:start="185:31" pos:end="185:31">1</literal><operator pos:start="185:32" pos:end="185:32">)</operator></expr>)</condition> <block pos:start="185:35" pos:end="190:7">{<block_content pos:start="187:9" pos:end="189:20">
        <comment type="block" pos:start="186:9" pos:end="186:50">/* this just must be a time zone string */</comment>
        <expr_stmt pos:start="187:9" pos:end="187:29"><expr pos:start="187:9" pos:end="187:28"><name pos:start="187:9" pos:end="187:13">tzoff</name> <operator pos:start="187:15" pos:end="187:15">=</operator> <call pos:start="187:17" pos:end="187:28"><name pos:start="187:17" pos:end="187:23">checktz</name><argument_list pos:start="187:24" pos:end="187:28">(<argument pos:start="187:25" pos:end="187:27"><expr pos:start="187:25" pos:end="187:27"><name pos:start="187:25" pos:end="187:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="188:9" pos:end="189:20"><if pos:start="188:9" pos:end="189:20">if<condition pos:start="188:11" pos:end="188:23">(<expr pos:start="188:12" pos:end="188:22"><name pos:start="188:12" pos:end="188:16">tzoff</name> <operator pos:start="188:18" pos:end="188:19">!=</operator> <operator pos:start="188:21" pos:end="188:21">-</operator><literal type="number" pos:start="188:22" pos:end="188:22">1</literal></expr>)</condition><block type="pseudo" pos:start="189:11" pos:end="189:20"><block_content pos:start="189:11" pos:end="189:20">
          <expr_stmt pos:start="189:11" pos:end="189:20"><expr pos:start="189:11" pos:end="189:19"><name pos:start="189:11" pos:end="189:15">found</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <literal type="number" pos:start="189:19" pos:end="189:19">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt pos:start="192:7" pos:end="193:30"><if pos:start="192:7" pos:end="193:30">if<condition pos:start="192:9" pos:end="192:16">(<expr pos:start="192:10" pos:end="192:15"><operator pos:start="192:10" pos:end="192:10">!</operator><name pos:start="192:11" pos:end="192:15">found</name></expr>)</condition><block type="pseudo" pos:start="193:9" pos:end="193:30"><block_content pos:start="193:9" pos:end="193:30">
        <return pos:start="193:9" pos:end="193:30">return <expr pos:start="193:16" pos:end="193:29"><name pos:start="193:16" pos:end="193:29">PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="193:32" pos:end="193:47">/* bad string */</comment>

      <expr_stmt pos:start="195:7" pos:end="195:18"><expr pos:start="195:7" pos:end="195:17"><name pos:start="195:7" pos:end="195:10">date</name> <operator pos:start="195:12" pos:end="195:13">+=</operator> <name pos:start="195:15" pos:end="195:17">len</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif" pos:start="197:5" pos:end="290:5">else if<condition pos:start="197:12" pos:end="197:27">(<expr pos:start="197:13" pos:end="197:26"><call pos:start="197:13" pos:end="197:26"><name pos:start="197:13" pos:end="197:19">ISDIGIT</name><argument_list pos:start="197:20" pos:end="197:26">(<argument pos:start="197:21" pos:end="197:25"><expr pos:start="197:21" pos:end="197:25"><operator pos:start="197:21" pos:end="197:21">*</operator><name pos:start="197:22" pos:end="197:25">date</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:29" pos:end="290:5">{<block_content pos:start="199:7" pos:end="289:7">
      <comment type="block" pos:start="198:7" pos:end="198:19">/* a digit */</comment>
      <decl_stmt pos:start="199:7" pos:end="199:14"><decl pos:start="199:7" pos:end="199:13"><type pos:start="199:7" pos:end="199:9"><name pos:start="199:7" pos:end="199:9">int</name></type> <name pos:start="199:11" pos:end="199:13">val</name></decl>;</decl_stmt>
      <decl_stmt pos:start="200:7" pos:end="200:16"><decl pos:start="200:7" pos:end="200:15"><type pos:start="200:7" pos:end="200:12"><name pos:start="200:7" pos:end="200:10">char</name> <modifier pos:start="200:12" pos:end="200:12">*</modifier></type><name pos:start="200:13" pos:end="200:15">end</name></decl>;</decl_stmt>
      <if_stmt pos:start="201:7" pos:end="289:7"><if pos:start="201:7" pos:end="205:7">if<condition pos:start="201:9" pos:end="202:75">(<expr pos:start="201:10" pos:end="202:74"><operator pos:start="201:10" pos:end="201:10">(</operator><name pos:start="201:11" pos:end="201:16">secnum</name> <operator pos:start="201:18" pos:end="201:19">==</operator> <operator pos:start="201:21" pos:end="201:21">-</operator><literal type="number" pos:start="201:22" pos:end="201:22">1</literal><operator pos:start="201:23" pos:end="201:23">)</operator> <operator pos:start="201:25" pos:end="201:26">&amp;&amp;</operator>
         <operator pos:start="202:10" pos:end="202:10">(</operator><literal type="number" pos:start="202:11" pos:end="202:11">3</literal> <operator pos:start="202:13" pos:end="202:14">==</operator> <call pos:start="202:16" pos:end="202:73"><name pos:start="202:16" pos:end="202:21">sscanf</name><argument_list pos:start="202:22" pos:end="202:73">(<argument pos:start="202:23" pos:end="202:26"><expr pos:start="202:23" pos:end="202:26"><name pos:start="202:23" pos:end="202:26">date</name></expr></argument>, <argument pos:start="202:29" pos:end="202:44"><expr pos:start="202:29" pos:end="202:44"><literal type="string" pos:start="202:29" pos:end="202:44">"%02d:%02d:%02d"</literal></expr></argument>, <argument pos:start="202:47" pos:end="202:54"><expr pos:start="202:47" pos:end="202:54"><operator pos:start="202:47" pos:end="202:47">&amp;</operator><name pos:start="202:48" pos:end="202:54">hournum</name></expr></argument>, <argument pos:start="202:57" pos:end="202:63"><expr pos:start="202:57" pos:end="202:63"><operator pos:start="202:57" pos:end="202:57">&amp;</operator><name pos:start="202:58" pos:end="202:63">minnum</name></expr></argument>, <argument pos:start="202:66" pos:end="202:72"><expr pos:start="202:66" pos:end="202:72"><operator pos:start="202:66" pos:end="202:66">&amp;</operator><name pos:start="202:67" pos:end="202:72">secnum</name></expr></argument>)</argument_list></call><operator pos:start="202:74" pos:end="202:74">)</operator></expr>)</condition> <block pos:start="202:77" pos:end="205:7">{<block_content pos:start="204:9" pos:end="204:18">
        <comment type="block" pos:start="203:9" pos:end="203:25">/* time stamp! */</comment>
        <expr_stmt pos:start="204:9" pos:end="204:18"><expr pos:start="204:9" pos:end="204:17"><name pos:start="204:9" pos:end="204:12">date</name> <operator pos:start="204:14" pos:end="204:15">+=</operator> <literal type="number" pos:start="204:17" pos:end="204:17">8</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif" pos:start="206:7" pos:end="211:7">else if<condition pos:start="206:14" pos:end="207:66">(<expr pos:start="206:15" pos:end="207:65"><operator pos:start="206:15" pos:end="206:15">(</operator><name pos:start="206:16" pos:end="206:21">secnum</name> <operator pos:start="206:23" pos:end="206:24">==</operator> <operator pos:start="206:26" pos:end="206:26">-</operator><literal type="number" pos:start="206:27" pos:end="206:27">1</literal><operator pos:start="206:28" pos:end="206:28">)</operator> <operator pos:start="206:30" pos:end="206:31">&amp;&amp;</operator>
              <operator pos:start="207:15" pos:end="207:15">(</operator><literal type="number" pos:start="207:16" pos:end="207:16">2</literal> <operator pos:start="207:18" pos:end="207:19">==</operator> <call pos:start="207:21" pos:end="207:64"><name pos:start="207:21" pos:end="207:26">sscanf</name><argument_list pos:start="207:27" pos:end="207:64">(<argument pos:start="207:28" pos:end="207:31"><expr pos:start="207:28" pos:end="207:31"><name pos:start="207:28" pos:end="207:31">date</name></expr></argument>, <argument pos:start="207:34" pos:end="207:44"><expr pos:start="207:34" pos:end="207:44"><literal type="string" pos:start="207:34" pos:end="207:44">"%02d:%02d"</literal></expr></argument>, <argument pos:start="207:47" pos:end="207:54"><expr pos:start="207:47" pos:end="207:54"><operator pos:start="207:47" pos:end="207:47">&amp;</operator><name pos:start="207:48" pos:end="207:54">hournum</name></expr></argument>, <argument pos:start="207:57" pos:end="207:63"><expr pos:start="207:57" pos:end="207:63"><operator pos:start="207:57" pos:end="207:57">&amp;</operator><name pos:start="207:58" pos:end="207:63">minnum</name></expr></argument>)</argument_list></call><operator pos:start="207:65" pos:end="207:65">)</operator></expr>)</condition> <block pos:start="207:68" pos:end="211:7">{<block_content pos:start="209:9" pos:end="210:19">
        <comment type="block" pos:start="208:9" pos:end="208:40">/* time stamp without seconds */</comment>
        <expr_stmt pos:start="209:9" pos:end="209:18"><expr pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:12">date</name> <operator pos:start="209:14" pos:end="209:15">+=</operator> <literal type="number" pos:start="209:17" pos:end="209:17">5</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="210:9" pos:end="210:19"><expr pos:start="210:9" pos:end="210:18"><name pos:start="210:9" pos:end="210:14">secnum</name> <operator pos:start="210:16" pos:end="210:16">=</operator> <literal type="number" pos:start="210:18" pos:end="210:18">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else pos:start="212:7" pos:end="289:7">else <block pos:start="212:12" pos:end="289:7">{<block_content pos:start="213:9" pos:end="288:19">
        <decl_stmt pos:start="213:9" pos:end="213:18"><decl pos:start="213:9" pos:end="213:17"><type pos:start="213:9" pos:end="213:12"><name pos:start="213:9" pos:end="213:12">long</name></type> <name pos:start="213:14" pos:end="213:17">lval</name></decl>;</decl_stmt>
        <decl_stmt pos:start="214:9" pos:end="214:18"><decl pos:start="214:9" pos:end="214:17"><type pos:start="214:9" pos:end="214:11"><name pos:start="214:9" pos:end="214:11">int</name></type> <name pos:start="214:13" pos:end="214:17">error</name></decl>;</decl_stmt>
        <decl_stmt pos:start="215:9" pos:end="215:22"><decl pos:start="215:9" pos:end="215:21"><type pos:start="215:9" pos:end="215:11"><name pos:start="215:9" pos:end="215:11">int</name></type> <name pos:start="215:13" pos:end="215:21">old_errno</name></decl>;</decl_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:26"><expr pos:start="217:9" pos:end="217:25"><name pos:start="217:9" pos:end="217:17">old_errno</name> <operator pos:start="217:19" pos:end="217:19">=</operator> <name pos:start="217:21" pos:end="217:25">ERRNO</name></expr>;</expr_stmt>
        <expr_stmt pos:start="218:9" pos:end="218:21"><expr pos:start="218:9" pos:end="218:20"><call pos:start="218:9" pos:end="218:20"><name pos:start="218:9" pos:end="218:17">SET_ERRNO</name><argument_list pos:start="218:18" pos:end="218:20">(<argument pos:start="218:19" pos:end="218:19"><expr pos:start="218:19" pos:end="218:19"><literal type="number" pos:start="218:19" pos:end="218:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="219:9" pos:end="219:38"><expr pos:start="219:9" pos:end="219:37"><name pos:start="219:9" pos:end="219:12">lval</name> <operator pos:start="219:14" pos:end="219:14">=</operator> <call pos:start="219:16" pos:end="219:37"><name pos:start="219:16" pos:end="219:21">strtol</name><argument_list pos:start="219:22" pos:end="219:37">(<argument pos:start="219:23" pos:end="219:26"><expr pos:start="219:23" pos:end="219:26"><name pos:start="219:23" pos:end="219:26">date</name></expr></argument>, <argument pos:start="219:29" pos:end="219:32"><expr pos:start="219:29" pos:end="219:32"><operator pos:start="219:29" pos:end="219:29">&amp;</operator><name pos:start="219:30" pos:end="219:32">end</name></expr></argument>, <argument pos:start="219:35" pos:end="219:36"><expr pos:start="219:35" pos:end="219:36"><literal type="number" pos:start="219:35" pos:end="219:36">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="220:9" pos:end="220:22"><expr pos:start="220:9" pos:end="220:21"><name pos:start="220:9" pos:end="220:13">error</name> <operator pos:start="220:15" pos:end="220:15">=</operator> <name pos:start="220:17" pos:end="220:21">ERRNO</name></expr>;</expr_stmt>
        <if_stmt pos:start="221:9" pos:end="222:31"><if pos:start="221:9" pos:end="222:31">if<condition pos:start="221:11" pos:end="221:30">(<expr pos:start="221:12" pos:end="221:29"><name pos:start="221:12" pos:end="221:16">error</name> <operator pos:start="221:18" pos:end="221:19">!=</operator> <name pos:start="221:21" pos:end="221:29">old_errno</name></expr>)</condition><block type="pseudo" pos:start="222:11" pos:end="222:31"><block_content pos:start="222:11" pos:end="222:31">
          <expr_stmt pos:start="222:11" pos:end="222:31"><expr pos:start="222:11" pos:end="222:30"><call pos:start="222:11" pos:end="222:30"><name pos:start="222:11" pos:end="222:19">SET_ERRNO</name><argument_list pos:start="222:20" pos:end="222:30">(<argument pos:start="222:21" pos:end="222:29"><expr pos:start="222:21" pos:end="222:29"><name pos:start="222:21" pos:end="222:29">old_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="224:9" pos:end="225:32"><if pos:start="224:9" pos:end="225:32">if<condition pos:start="224:11" pos:end="224:17">(<expr pos:start="224:12" pos:end="224:16"><name pos:start="224:12" pos:end="224:16">error</name></expr>)</condition><block type="pseudo" pos:start="225:11" pos:end="225:32"><block_content pos:start="225:11" pos:end="225:32">
          <return pos:start="225:11" pos:end="225:32">return <expr pos:start="225:18" pos:end="225:31"><name pos:start="225:18" pos:end="225:31">PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="227:9" pos:end="228:32"><if pos:start="227:9" pos:end="228:32">if<condition pos:start="227:11" pos:end="227:60">(<expr pos:start="227:12" pos:end="227:59"><operator pos:start="227:12" pos:end="227:12">(</operator><name pos:start="227:13" pos:end="227:16">lval</name> <operator pos:start="227:18" pos:end="227:18">&gt;</operator> <operator pos:start="227:20" pos:end="227:20">(</operator><name pos:start="227:21" pos:end="227:24">long</name><operator pos:start="227:25" pos:end="227:25">)</operator><name pos:start="227:26" pos:end="227:32">INT_MAX</name><operator pos:start="227:33" pos:end="227:33">)</operator> <operator pos:start="227:35" pos:end="227:36">||</operator> <operator pos:start="227:38" pos:end="227:38">(</operator><name pos:start="227:39" pos:end="227:42">lval</name> <operator pos:start="227:44" pos:end="227:44">&lt;</operator> <operator pos:start="227:46" pos:end="227:46">(</operator><name pos:start="227:47" pos:end="227:50">long</name><operator pos:start="227:51" pos:end="227:51">)</operator><name pos:start="227:52" pos:end="227:58">INT_MIN</name><operator pos:start="227:59" pos:end="227:59">)</operator></expr>)</condition><block type="pseudo" pos:start="228:11" pos:end="228:32"><block_content pos:start="228:11" pos:end="228:32">
          <return pos:start="228:11" pos:end="228:32">return <expr pos:start="228:18" pos:end="228:31"><name pos:start="228:18" pos:end="228:31">PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="230:9" pos:end="230:33"><expr pos:start="230:9" pos:end="230:32"><name pos:start="230:9" pos:end="230:11">val</name> <operator pos:start="230:13" pos:end="230:13">=</operator> <call pos:start="230:15" pos:end="230:32"><name pos:start="230:15" pos:end="230:26">curlx_sltosi</name><argument_list pos:start="230:27" pos:end="230:32">(<argument pos:start="230:28" pos:end="230:31"><expr pos:start="230:28" pos:end="230:31"><name pos:start="230:28" pos:end="230:31">lval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="232:9" pos:end="251:9"><if pos:start="232:9" pos:end="251:9">if<condition pos:start="232:11" pos:end="236:50">(<expr pos:start="232:12" pos:end="236:49"><operator pos:start="232:12" pos:end="232:12">(</operator><name pos:start="232:13" pos:end="232:17">tzoff</name> <operator pos:start="232:19" pos:end="232:20">==</operator> <operator pos:start="232:22" pos:end="232:22">-</operator><literal type="number" pos:start="232:23" pos:end="232:23">1</literal><operator pos:start="232:24" pos:end="232:24">)</operator> <operator pos:start="232:26" pos:end="232:27">&amp;&amp;</operator>
           <operator pos:start="233:12" pos:end="233:12">(</operator><operator pos:start="233:13" pos:end="233:13">(</operator><name pos:start="233:14" pos:end="233:16">end</name> <operator pos:start="233:18" pos:end="233:18">-</operator> <name pos:start="233:20" pos:end="233:23">date</name><operator pos:start="233:24" pos:end="233:24">)</operator> <operator pos:start="233:26" pos:end="233:27">==</operator> <literal type="number" pos:start="233:29" pos:end="233:29">4</literal><operator pos:start="233:30" pos:end="233:30">)</operator> <operator pos:start="233:32" pos:end="233:33">&amp;&amp;</operator>
           <operator pos:start="234:12" pos:end="234:12">(</operator><name pos:start="234:13" pos:end="234:15">val</name> <operator pos:start="234:17" pos:end="234:18">&lt;=</operator> <literal type="number" pos:start="234:20" pos:end="234:23">1400</literal><operator pos:start="234:24" pos:end="234:24">)</operator> <operator pos:start="234:26" pos:end="234:27">&amp;&amp;</operator>
           <operator pos:start="235:12" pos:end="235:12">(</operator><name pos:start="235:13" pos:end="235:18">indate</name><operator pos:start="235:19" pos:end="235:19">&lt;</operator> <name pos:start="235:21" pos:end="235:24">date</name><operator pos:start="235:25" pos:end="235:25">)</operator> <operator pos:start="235:27" pos:end="235:28">&amp;&amp;</operator>
           <operator pos:start="236:12" pos:end="236:12">(</operator><operator pos:start="236:13" pos:end="236:13">(</operator><name pos:start="236:14" pos:end="236:21"><name pos:start="236:14" pos:end="236:17">date</name><index pos:start="236:18" pos:end="236:21">[<expr pos:start="236:19" pos:end="236:20"><operator pos:start="236:19" pos:end="236:19">-</operator><literal type="number" pos:start="236:20" pos:end="236:20">1</literal></expr>]</index></name> <operator pos:start="236:23" pos:end="236:24">==</operator> <literal type="char" pos:start="236:26" pos:end="236:28">'+'</literal> <operator pos:start="236:30" pos:end="236:31">||</operator> <name pos:start="236:33" pos:end="236:40"><name pos:start="236:33" pos:end="236:36">date</name><index pos:start="236:37" pos:end="236:40">[<expr pos:start="236:38" pos:end="236:39"><operator pos:start="236:38" pos:end="236:38">-</operator><literal type="number" pos:start="236:39" pos:end="236:39">1</literal></expr>]</index></name> <operator pos:start="236:42" pos:end="236:43">==</operator> <literal type="char" pos:start="236:45" pos:end="236:47">'-'</literal><operator pos:start="236:48" pos:end="236:48">)</operator><operator pos:start="236:49" pos:end="236:49">)</operator></expr>)</condition> <block pos:start="236:52" pos:end="251:9">{<block_content pos:start="245:11" pos:end="250:45">
          <comment type="block" pos:start="237:11" pos:end="244:46">/* four digits and a value less than or equal to 1400 (to take into
             account all sorts of funny time zone diffs) and it is preceded
             with a plus or minus. This is a time zone indication.  1400 is
             picked since +1300 is frequently used and +1400 is mentioned as
             an edge number in the document "ISO C 200X Proposal: Timezone
             Functions" at http://david.tribble.com/text/c0xtimezone.html If
             anyone has a more authoritative source for the exact maximum time
             zone offsets, please speak up! */</comment>
          <expr_stmt pos:start="245:11" pos:end="245:20"><expr pos:start="245:11" pos:end="245:19"><name pos:start="245:11" pos:end="245:15">found</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <literal type="number" pos:start="245:19" pos:end="245:19">1</literal></expr>;</expr_stmt>
          <expr_stmt pos:start="246:11" pos:end="246:46"><expr pos:start="246:11" pos:end="246:45"><name pos:start="246:11" pos:end="246:15">tzoff</name> <operator pos:start="246:17" pos:end="246:17">=</operator> <operator pos:start="246:19" pos:end="246:19">(</operator><name pos:start="246:20" pos:end="246:22">val</name><operator pos:start="246:23" pos:end="246:23">/</operator><literal type="number" pos:start="246:24" pos:end="246:26">100</literal> <operator pos:start="246:28" pos:end="246:28">*</operator> <literal type="number" pos:start="246:30" pos:end="246:33">60</literal> <operator pos:start="246:33" pos:end="246:33">+</operator> <name pos:start="246:35" pos:end="246:37">val</name><operator pos:start="246:38" pos:end="246:38">%</operator><literal type="number" pos:start="246:39" pos:end="246:41">100</literal><operator pos:start="246:42" pos:end="246:42">)</operator><operator pos:start="246:43" pos:end="246:43">*</operator><literal type="number" pos:start="246:44" pos:end="246:45">60</literal></expr>;</expr_stmt>

          <comment type="block" pos:start="248:11" pos:end="249:67">/* the + and - prefix indicates the local time compared to GMT,
             this we need ther reversed math to get what we want */</comment>
          <expr_stmt pos:start="250:11" pos:end="250:45"><expr pos:start="250:11" pos:end="250:44"><name pos:start="250:11" pos:end="250:15">tzoff</name> <operator pos:start="250:17" pos:end="250:17">=</operator> <ternary pos:start="250:19" pos:end="250:44"><condition pos:start="250:19" pos:end="250:32"><expr pos:start="250:19" pos:end="250:31"><name pos:start="250:19" pos:end="250:26"><name pos:start="250:19" pos:end="250:22">date</name><index pos:start="250:23" pos:end="250:26">[<expr pos:start="250:24" pos:end="250:25"><operator pos:start="250:24" pos:end="250:24">-</operator><literal type="number" pos:start="250:25" pos:end="250:25">1</literal></expr>]</index></name><operator pos:start="250:27" pos:end="250:28">==</operator><literal type="char" pos:start="250:29" pos:end="250:31">'+'</literal></expr>?</condition><then pos:start="250:33" pos:end="250:38"><expr pos:start="250:33" pos:end="250:38"><operator pos:start="250:33" pos:end="250:33">-</operator><name pos:start="250:34" pos:end="250:38">tzoff</name></expr></then><else pos:start="250:39" pos:end="250:44">:<expr pos:start="250:40" pos:end="250:44"><name pos:start="250:40" pos:end="250:44">tzoff</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="253:9" pos:end="262:9"><if pos:start="253:9" pos:end="262:9">if<condition pos:start="253:11" pos:end="256:27">(<expr pos:start="253:12" pos:end="256:26"><operator pos:start="253:12" pos:end="253:12">(</operator><operator pos:start="253:13" pos:end="253:13">(</operator><name pos:start="253:14" pos:end="253:16">end</name> <operator pos:start="253:18" pos:end="253:18">-</operator> <name pos:start="253:20" pos:end="253:23">date</name><operator pos:start="253:24" pos:end="253:24">)</operator> <operator pos:start="253:26" pos:end="253:27">==</operator> <literal type="number" pos:start="253:29" pos:end="253:29">8</literal><operator pos:start="253:30" pos:end="253:30">)</operator> <operator pos:start="253:32" pos:end="253:33">&amp;&amp;</operator>
           <operator pos:start="254:12" pos:end="254:12">(</operator><name pos:start="254:13" pos:end="254:19">yearnum</name> <operator pos:start="254:21" pos:end="254:22">==</operator> <operator pos:start="254:24" pos:end="254:24">-</operator><literal type="number" pos:start="254:25" pos:end="254:25">1</literal><operator pos:start="254:26" pos:end="254:26">)</operator> <operator pos:start="254:28" pos:end="254:29">&amp;&amp;</operator>
           <operator pos:start="255:12" pos:end="255:12">(</operator><name pos:start="255:13" pos:end="255:18">monnum</name> <operator pos:start="255:20" pos:end="255:21">==</operator> <operator pos:start="255:23" pos:end="255:23">-</operator><literal type="number" pos:start="255:24" pos:end="255:24">1</literal><operator pos:start="255:25" pos:end="255:25">)</operator> <operator pos:start="255:27" pos:end="255:28">&amp;&amp;</operator>
           <operator pos:start="256:12" pos:end="256:12">(</operator><name pos:start="256:13" pos:end="256:19">mdaynum</name> <operator pos:start="256:21" pos:end="256:22">==</operator> <operator pos:start="256:24" pos:end="256:24">-</operator><literal type="number" pos:start="256:25" pos:end="256:25">1</literal><operator pos:start="256:26" pos:end="256:26">)</operator></expr>)</condition> <block pos:start="256:29" pos:end="262:9">{<block_content pos:start="258:11" pos:end="261:28">
          <comment type="block" pos:start="257:11" pos:end="257:69">/* 8 digits, no year, month or day yet. This is YYYYMMDD */</comment>
          <expr_stmt pos:start="258:11" pos:end="258:20"><expr pos:start="258:11" pos:end="258:19"><name pos:start="258:11" pos:end="258:15">found</name> <operator pos:start="258:17" pos:end="258:17">=</operator> <literal type="number" pos:start="258:19" pos:end="258:19">1</literal></expr>;</expr_stmt>
          <expr_stmt pos:start="259:11" pos:end="259:30"><expr pos:start="259:11" pos:end="259:29"><name pos:start="259:11" pos:end="259:17">yearnum</name> <operator pos:start="259:19" pos:end="259:19">=</operator> <name pos:start="259:21" pos:end="259:23">val</name><operator pos:start="259:24" pos:end="259:24">/</operator><literal type="number" pos:start="259:25" pos:end="259:29">10000</literal></expr>;</expr_stmt>
          <expr_stmt pos:start="260:11" pos:end="260:37"><expr pos:start="260:11" pos:end="260:36"><name pos:start="260:11" pos:end="260:16">monnum</name> <operator pos:start="260:18" pos:end="260:18">=</operator> <operator pos:start="260:20" pos:end="260:20">(</operator><name pos:start="260:21" pos:end="260:23">val</name><operator pos:start="260:24" pos:end="260:24">%</operator><literal type="number" pos:start="260:25" pos:end="260:29">10000</literal><operator pos:start="260:30" pos:end="260:30">)</operator><operator pos:start="260:31" pos:end="260:31">/</operator><literal type="number" pos:start="260:32" pos:end="260:35">100</literal><operator pos:start="260:35" pos:end="260:35">-</operator><literal type="number" pos:start="260:36" pos:end="260:36">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="260:39" pos:end="260:59">/* month is 0 - 11 */</comment>
          <expr_stmt pos:start="261:11" pos:end="261:28"><expr pos:start="261:11" pos:end="261:27"><name pos:start="261:11" pos:end="261:17">mdaynum</name> <operator pos:start="261:19" pos:end="261:19">=</operator> <name pos:start="261:21" pos:end="261:23">val</name><operator pos:start="261:24" pos:end="261:24">%</operator><literal type="number" pos:start="261:25" pos:end="261:27">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="264:9" pos:end="270:9"><if pos:start="264:9" pos:end="270:9">if<condition pos:start="264:11" pos:end="264:63">(<expr pos:start="264:12" pos:end="264:62"><operator pos:start="264:12" pos:end="264:12">!</operator><name pos:start="264:13" pos:end="264:17">found</name> <operator pos:start="264:19" pos:end="264:20">&amp;&amp;</operator> <operator pos:start="264:22" pos:end="264:22">(</operator><name pos:start="264:23" pos:end="264:29">dignext</name> <operator pos:start="264:31" pos:end="264:32">==</operator> <name pos:start="264:34" pos:end="264:42">DATE_MDAY</name><operator pos:start="264:43" pos:end="264:43">)</operator> <operator pos:start="264:45" pos:end="264:46">&amp;&amp;</operator> <operator pos:start="264:48" pos:end="264:48">(</operator><name pos:start="264:49" pos:end="264:55">mdaynum</name> <operator pos:start="264:57" pos:end="264:58">==</operator> <operator pos:start="264:60" pos:end="264:60">-</operator><literal type="number" pos:start="264:61" pos:end="264:61">1</literal><operator pos:start="264:62" pos:end="264:62">)</operator></expr>)</condition> <block pos:start="264:65" pos:end="270:9">{<block_content pos:start="265:11" pos:end="269:30">
          <if_stmt pos:start="265:11" pos:end="268:11"><if pos:start="265:11" pos:end="268:11">if<condition pos:start="265:13" pos:end="265:35">(<expr pos:start="265:14" pos:end="265:34"><operator pos:start="265:14" pos:end="265:14">(</operator><name pos:start="265:15" pos:end="265:17">val</name> <operator pos:start="265:19" pos:end="265:19">&gt;</operator> <literal type="number" pos:start="265:21" pos:end="265:21">0</literal><operator pos:start="265:22" pos:end="265:22">)</operator> <operator pos:start="265:24" pos:end="265:25">&amp;&amp;</operator> <operator pos:start="265:27" pos:end="265:27">(</operator><name pos:start="265:28" pos:end="265:30">val</name><operator pos:start="265:31" pos:end="265:31">&lt;</operator><literal type="number" pos:start="265:32" pos:end="265:33">32</literal><operator pos:start="265:34" pos:end="265:34">)</operator></expr>)</condition> <block pos:start="265:37" pos:end="268:11">{<block_content pos:start="266:13" pos:end="267:22">
            <expr_stmt pos:start="266:13" pos:end="266:26"><expr pos:start="266:13" pos:end="266:25"><name pos:start="266:13" pos:end="266:19">mdaynum</name> <operator pos:start="266:21" pos:end="266:21">=</operator> <name pos:start="266:23" pos:end="266:25">val</name></expr>;</expr_stmt>
            <expr_stmt pos:start="267:13" pos:end="267:22"><expr pos:start="267:13" pos:end="267:21"><name pos:start="267:13" pos:end="267:17">found</name> <operator pos:start="267:19" pos:end="267:19">=</operator> <literal type="number" pos:start="267:21" pos:end="267:21">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt pos:start="269:11" pos:end="269:30"><expr pos:start="269:11" pos:end="269:29"><name pos:start="269:11" pos:end="269:17">dignext</name> <operator pos:start="269:19" pos:end="269:19">=</operator> <name pos:start="269:21" pos:end="269:29">DATE_YEAR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="272:9" pos:end="283:9"><if pos:start="272:9" pos:end="283:9">if<condition pos:start="272:11" pos:end="272:63">(<expr pos:start="272:12" pos:end="272:62"><operator pos:start="272:12" pos:end="272:12">!</operator><name pos:start="272:13" pos:end="272:17">found</name> <operator pos:start="272:19" pos:end="272:20">&amp;&amp;</operator> <operator pos:start="272:22" pos:end="272:22">(</operator><name pos:start="272:23" pos:end="272:29">dignext</name> <operator pos:start="272:31" pos:end="272:32">==</operator> <name pos:start="272:34" pos:end="272:42">DATE_YEAR</name><operator pos:start="272:43" pos:end="272:43">)</operator> <operator pos:start="272:45" pos:end="272:46">&amp;&amp;</operator> <operator pos:start="272:48" pos:end="272:48">(</operator><name pos:start="272:49" pos:end="272:55">yearnum</name> <operator pos:start="272:57" pos:end="272:58">==</operator> <operator pos:start="272:60" pos:end="272:60">-</operator><literal type="number" pos:start="272:61" pos:end="272:61">1</literal><operator pos:start="272:62" pos:end="272:62">)</operator></expr>)</condition> <block pos:start="272:65" pos:end="283:9">{<block_content pos:start="273:11" pos:end="282:32">
          <expr_stmt pos:start="273:11" pos:end="273:24"><expr pos:start="273:11" pos:end="273:23"><name pos:start="273:11" pos:end="273:17">yearnum</name> <operator pos:start="273:19" pos:end="273:19">=</operator> <name pos:start="273:21" pos:end="273:23">val</name></expr>;</expr_stmt>
          <expr_stmt pos:start="274:11" pos:end="274:20"><expr pos:start="274:11" pos:end="274:19"><name pos:start="274:11" pos:end="274:15">found</name> <operator pos:start="274:17" pos:end="274:17">=</operator> <literal type="number" pos:start="274:19" pos:end="274:19">1</literal></expr>;</expr_stmt>
          <if_stmt pos:start="275:11" pos:end="280:11"><if pos:start="275:11" pos:end="280:11">if<condition pos:start="275:13" pos:end="275:28">(<expr pos:start="275:14" pos:end="275:27"><name pos:start="275:14" pos:end="275:20">yearnum</name> <operator pos:start="275:22" pos:end="275:22">&lt;</operator> <literal type="number" pos:start="275:24" pos:end="275:27">1900</literal></expr>)</condition> <block pos:start="275:30" pos:end="280:11">{<block_content pos:start="276:13" pos:end="279:30">
            <if_stmt pos:start="276:13" pos:end="279:30"><if pos:start="276:13" pos:end="277:30">if<condition pos:start="276:15" pos:end="276:28">(<expr pos:start="276:16" pos:end="276:27"><name pos:start="276:16" pos:end="276:22">yearnum</name> <operator pos:start="276:24" pos:end="276:24">&gt;</operator> <literal type="number" pos:start="276:26" pos:end="276:27">70</literal></expr>)</condition><block type="pseudo" pos:start="277:15" pos:end="277:30"><block_content pos:start="277:15" pos:end="277:30">
              <expr_stmt pos:start="277:15" pos:end="277:30"><expr pos:start="277:15" pos:end="277:29"><name pos:start="277:15" pos:end="277:21">yearnum</name> <operator pos:start="277:23" pos:end="277:24">+=</operator> <literal type="number" pos:start="277:26" pos:end="277:29">1900</literal></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="278:13" pos:end="279:30">else<block type="pseudo" pos:start="279:15" pos:end="279:30"><block_content pos:start="279:15" pos:end="279:30">
              <expr_stmt pos:start="279:15" pos:end="279:30"><expr pos:start="279:15" pos:end="279:29"><name pos:start="279:15" pos:end="279:21">yearnum</name> <operator pos:start="279:23" pos:end="279:24">+=</operator> <literal type="number" pos:start="279:26" pos:end="279:29">2000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt pos:start="281:11" pos:end="282:32"><if pos:start="281:11" pos:end="282:32">if<condition pos:start="281:13" pos:end="281:27">(<expr pos:start="281:14" pos:end="281:26"><name pos:start="281:14" pos:end="281:20">mdaynum</name> <operator pos:start="281:22" pos:end="281:23">==</operator> <operator pos:start="281:25" pos:end="281:25">-</operator><literal type="number" pos:start="281:26" pos:end="281:26">1</literal></expr>)</condition><block type="pseudo" pos:start="282:13" pos:end="282:32"><block_content pos:start="282:13" pos:end="282:32">
            <expr_stmt pos:start="282:13" pos:end="282:32"><expr pos:start="282:13" pos:end="282:31"><name pos:start="282:13" pos:end="282:19">dignext</name> <operator pos:start="282:21" pos:end="282:21">=</operator> <name pos:start="282:23" pos:end="282:31">DATE_MDAY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="285:9" pos:end="286:32"><if pos:start="285:9" pos:end="286:32">if<condition pos:start="285:11" pos:end="285:18">(<expr pos:start="285:12" pos:end="285:17"><operator pos:start="285:12" pos:end="285:12">!</operator><name pos:start="285:13" pos:end="285:17">found</name></expr>)</condition><block type="pseudo" pos:start="286:11" pos:end="286:32"><block_content pos:start="286:11" pos:end="286:32">
          <return pos:start="286:11" pos:end="286:32">return <expr pos:start="286:18" pos:end="286:31"><name pos:start="286:18" pos:end="286:31">PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="288:9" pos:end="288:19"><expr pos:start="288:9" pos:end="288:18"><name pos:start="288:9" pos:end="288:12">date</name> <operator pos:start="288:14" pos:end="288:14">=</operator> <name pos:start="288:16" pos:end="288:18">end</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="292:5" pos:end="292:11"><expr pos:start="292:5" pos:end="292:10"><name pos:start="292:5" pos:end="292:8">part</name><operator pos:start="292:9" pos:end="292:10">++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt pos:start="295:3" pos:end="296:34"><if pos:start="295:3" pos:end="296:34">if<condition pos:start="295:5" pos:end="295:18">(<expr pos:start="295:6" pos:end="295:17"><operator pos:start="295:6" pos:end="295:6">-</operator><literal type="number" pos:start="295:7" pos:end="295:7">1</literal> <operator pos:start="295:9" pos:end="295:10">==</operator> <name pos:start="295:12" pos:end="295:17">secnum</name></expr>)</condition><block type="pseudo" pos:start="296:5" pos:end="296:34"><block_content pos:start="296:5" pos:end="296:34">
    <expr_stmt pos:start="296:5" pos:end="296:34"><expr pos:start="296:5" pos:end="296:33"><name pos:start="296:5" pos:end="296:10">secnum</name> <operator pos:start="296:12" pos:end="296:12">=</operator> <name pos:start="296:14" pos:end="296:19">minnum</name> <operator pos:start="296:21" pos:end="296:21">=</operator> <name pos:start="296:23" pos:end="296:29">hournum</name> <operator pos:start="296:31" pos:end="296:31">=</operator> <literal type="number" pos:start="296:33" pos:end="296:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="296:36" pos:end="296:62">/* no time, make it zero */</comment>

  <if_stmt pos:start="298:3" pos:end="305:0"><if pos:start="298:3" pos:end="305:0">if<condition pos:start="298:5" pos:end="300:21">(<expr pos:start="298:6" pos:end="300:20"><operator pos:start="298:6" pos:end="298:6">(</operator><operator pos:start="298:7" pos:end="298:7">-</operator><literal type="number" pos:start="298:8" pos:end="298:8">1</literal> <operator pos:start="298:10" pos:end="298:11">==</operator> <name pos:start="298:13" pos:end="298:19">mdaynum</name><operator pos:start="298:20" pos:end="298:20">)</operator> <operator pos:start="298:22" pos:end="298:23">||</operator>
     <operator pos:start="299:6" pos:end="299:6">(</operator><operator pos:start="299:7" pos:end="299:7">-</operator><literal type="number" pos:start="299:8" pos:end="299:8">1</literal> <operator pos:start="299:10" pos:end="299:11">==</operator> <name pos:start="299:13" pos:end="299:18">monnum</name><operator pos:start="299:19" pos:end="299:19">)</operator> <operator pos:start="299:21" pos:end="299:22">||</operator>
     <operator pos:start="300:6" pos:end="300:6">(</operator><operator pos:start="300:7" pos:end="300:7">-</operator><literal type="number" pos:start="300:8" pos:end="300:8">1</literal> <operator pos:start="300:10" pos:end="300:11">==</operator> <name pos:start="300:13" pos:end="300:19">yearnum</name><operator pos:start="300:20" pos:end="300:20">)</operator></expr>)</condition><block type="pseudo" pos:start="302:5" pos:end="305:0"><block_content pos:start="302:5" pos:end="305:0">
    <comment type="block" pos:start="301:5" pos:end="301:32">/* lacks vital info, fail */</comment>
    <return pos:start="302:5" pos:end="305:0">return <expr pos:start="302:12" pos:end="302:25"><name pos:start="302:12" pos:end="302:25">PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if pos:start="304:1" pos:end="304:21">#<cpp:directive pos:start="304:2" pos:end="304:3">if</cpp:directive> <expr pos:start="304:5" pos:end="304:21"><name pos:start="304:5" pos:end="304:17">SIZEOF_TIME_T</name> <operator pos:start="304:19" pos:end="304:19">&lt;</operator> <literal type="number" pos:start="304:21" pos:end="304:21">5</literal></expr></cpp:if>
  <comment type="block" pos:start="305:3" pos:end="305:66">/* 32 bit time_t can only hold dates to the beginning of 2038 */</comment>
  <if_stmt pos:start="306:3" pos:end="311:0"><if pos:start="306:3" pos:end="311:0">if<condition pos:start="306:5" pos:end="306:20">(<expr pos:start="306:6" pos:end="306:19"><name pos:start="306:6" pos:end="306:12">yearnum</name> <operator pos:start="306:14" pos:end="306:14">&gt;</operator> <literal type="number" pos:start="306:16" pos:end="306:19">2037</literal></expr>)</condition> <block pos:start="306:22" pos:end="311:0">{<block_content pos:start="307:5" pos:end="308:27">
    <expr_stmt pos:start="307:5" pos:end="307:25"><expr pos:start="307:5" pos:end="307:24"><operator pos:start="307:5" pos:end="307:5">*</operator><name pos:start="307:6" pos:end="307:11">output</name> <operator pos:start="307:13" pos:end="307:13">=</operator> <literal type="number" pos:start="307:15" pos:end="307:24">0x7fffffff</literal></expr>;</expr_stmt>
    <return pos:start="308:5" pos:end="308:27">return <expr pos:start="308:12" pos:end="308:26"><name pos:start="308:12" pos:end="308:26">PARSEDATE_LATER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="310:1" pos:end="310:6">#<cpp:directive pos:start="310:2" pos:end="310:6">endif</cpp:directive></cpp:endif>

  <if_stmt pos:start="312:3" pos:end="315:3"><if pos:start="312:3" pos:end="315:3">if<condition pos:start="312:5" pos:end="312:20">(<expr pos:start="312:6" pos:end="312:19"><name pos:start="312:6" pos:end="312:12">yearnum</name> <operator pos:start="312:14" pos:end="312:14">&lt;</operator> <literal type="number" pos:start="312:16" pos:end="312:19">1970</literal></expr>)</condition> <block pos:start="312:22" pos:end="315:3">{<block_content pos:start="313:5" pos:end="314:28">
    <expr_stmt pos:start="313:5" pos:end="313:16"><expr pos:start="313:5" pos:end="313:15"><operator pos:start="313:5" pos:end="313:5">*</operator><name pos:start="313:6" pos:end="313:11">output</name> <operator pos:start="313:13" pos:end="313:13">=</operator> <literal type="number" pos:start="313:15" pos:end="313:15">0</literal></expr>;</expr_stmt>
    <return pos:start="314:5" pos:end="314:28">return <expr pos:start="314:12" pos:end="314:27"><name pos:start="314:12" pos:end="314:27">PARSEDATE_SOONER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt pos:start="317:3" pos:end="319:26"><if pos:start="317:3" pos:end="319:26">if<condition pos:start="317:5" pos:end="318:54">(<expr pos:start="317:6" pos:end="318:53"><operator pos:start="317:6" pos:end="317:6">(</operator><name pos:start="317:7" pos:end="317:13">mdaynum</name> <operator pos:start="317:15" pos:end="317:15">&gt;</operator> <literal type="number" pos:start="317:17" pos:end="317:18">31</literal><operator pos:start="317:19" pos:end="317:19">)</operator> <operator pos:start="317:21" pos:end="317:22">||</operator> <operator pos:start="317:24" pos:end="317:24">(</operator><name pos:start="317:25" pos:end="317:30">monnum</name> <operator pos:start="317:32" pos:end="317:32">&gt;</operator> <literal type="number" pos:start="317:34" pos:end="317:35">11</literal><operator pos:start="317:36" pos:end="317:36">)</operator> <operator pos:start="317:38" pos:end="317:39">||</operator>
     <operator pos:start="318:6" pos:end="318:6">(</operator><name pos:start="318:7" pos:end="318:13">hournum</name> <operator pos:start="318:15" pos:end="318:15">&gt;</operator> <literal type="number" pos:start="318:17" pos:end="318:18">23</literal><operator pos:start="318:19" pos:end="318:19">)</operator> <operator pos:start="318:21" pos:end="318:22">||</operator> <operator pos:start="318:24" pos:end="318:24">(</operator><name pos:start="318:25" pos:end="318:30">minnum</name> <operator pos:start="318:32" pos:end="318:32">&gt;</operator> <literal type="number" pos:start="318:34" pos:end="318:35">59</literal><operator pos:start="318:36" pos:end="318:36">)</operator> <operator pos:start="318:38" pos:end="318:39">||</operator> <operator pos:start="318:41" pos:end="318:41">(</operator><name pos:start="318:42" pos:end="318:47">secnum</name> <operator pos:start="318:49" pos:end="318:49">&gt;</operator> <literal type="number" pos:start="318:51" pos:end="318:52">60</literal><operator pos:start="318:53" pos:end="318:53">)</operator></expr>)</condition><block type="pseudo" pos:start="319:5" pos:end="319:26"><block_content pos:start="319:5" pos:end="319:26">
    <return pos:start="319:5" pos:end="319:26">return <expr pos:start="319:12" pos:end="319:25"><name pos:start="319:12" pos:end="319:25">PARSEDATE_FAIL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="319:28" pos:end="319:56">/* clearly an illegal date */</comment>

  <expr_stmt pos:start="321:3" pos:end="321:21"><expr pos:start="321:3" pos:end="321:20"><name pos:start="321:3" pos:end="321:11"><name pos:start="321:3" pos:end="321:4">tm</name><operator pos:start="321:5" pos:end="321:5">.</operator><name pos:start="321:6" pos:end="321:11">tm_sec</name></name> <operator pos:start="321:13" pos:end="321:13">=</operator> <name pos:start="321:15" pos:end="321:20">secnum</name></expr>;</expr_stmt>
  <expr_stmt pos:start="322:3" pos:end="322:21"><expr pos:start="322:3" pos:end="322:20"><name pos:start="322:3" pos:end="322:11"><name pos:start="322:3" pos:end="322:4">tm</name><operator pos:start="322:5" pos:end="322:5">.</operator><name pos:start="322:6" pos:end="322:11">tm_min</name></name> <operator pos:start="322:13" pos:end="322:13">=</operator> <name pos:start="322:15" pos:end="322:20">minnum</name></expr>;</expr_stmt>
  <expr_stmt pos:start="323:3" pos:end="323:23"><expr pos:start="323:3" pos:end="323:22"><name pos:start="323:3" pos:end="323:12"><name pos:start="323:3" pos:end="323:4">tm</name><operator pos:start="323:5" pos:end="323:5">.</operator><name pos:start="323:6" pos:end="323:12">tm_hour</name></name> <operator pos:start="323:14" pos:end="323:14">=</operator> <name pos:start="323:16" pos:end="323:22">hournum</name></expr>;</expr_stmt>
  <expr_stmt pos:start="324:3" pos:end="324:23"><expr pos:start="324:3" pos:end="324:22"><name pos:start="324:3" pos:end="324:12"><name pos:start="324:3" pos:end="324:4">tm</name><operator pos:start="324:5" pos:end="324:5">.</operator><name pos:start="324:6" pos:end="324:12">tm_mday</name></name> <operator pos:start="324:14" pos:end="324:14">=</operator> <name pos:start="324:16" pos:end="324:22">mdaynum</name></expr>;</expr_stmt>
  <expr_stmt pos:start="325:3" pos:end="325:21"><expr pos:start="325:3" pos:end="325:20"><name pos:start="325:3" pos:end="325:11"><name pos:start="325:3" pos:end="325:4">tm</name><operator pos:start="325:5" pos:end="325:5">.</operator><name pos:start="325:6" pos:end="325:11">tm_mon</name></name> <operator pos:start="325:13" pos:end="325:13">=</operator> <name pos:start="325:15" pos:end="325:20">monnum</name></expr>;</expr_stmt>
  <expr_stmt pos:start="326:3" pos:end="326:30"><expr pos:start="326:3" pos:end="326:29"><name pos:start="326:3" pos:end="326:12"><name pos:start="326:3" pos:end="326:4">tm</name><operator pos:start="326:5" pos:end="326:5">.</operator><name pos:start="326:6" pos:end="326:12">tm_year</name></name> <operator pos:start="326:14" pos:end="326:14">=</operator> <name pos:start="326:16" pos:end="326:22">yearnum</name> <operator pos:start="326:24" pos:end="326:24">-</operator> <literal type="number" pos:start="326:26" pos:end="326:29">1900</literal></expr>;</expr_stmt>

  <comment type="block" pos:start="328:3" pos:end="334:4">/* my_timegm() returns a time_t. time_t is often 32 bits, even on many
     architectures that feature 64 bit 'long'.

     Some systems have 64 bit time_t and deal with years beyond 2038. However,
     even on some of the systems with 64 bit time_t mktime() returns -1 for
     dates beyond 03:14:07 UTC, January 19, 2038. (Such as AIX 5100-06)
  */</comment>
  <expr_stmt pos:start="335:3" pos:end="335:21"><expr pos:start="335:3" pos:end="335:20"><name pos:start="335:3" pos:end="335:3">t</name> <operator pos:start="335:5" pos:end="335:5">=</operator> <call pos:start="335:7" pos:end="335:20"><name pos:start="335:7" pos:end="335:15">my_timegm</name><argument_list pos:start="335:16" pos:end="335:20">(<argument pos:start="335:17" pos:end="335:19"><expr pos:start="335:17" pos:end="335:19"><operator pos:start="335:17" pos:end="335:17">&amp;</operator><name pos:start="335:18" pos:end="335:19">tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block" pos:start="337:3" pos:end="337:67">/* time zone adjust (cast t to int to compare to negative one) */</comment>
  <if_stmt pos:start="338:3" pos:end="347:3"><if pos:start="338:3" pos:end="347:3">if<condition pos:start="338:5" pos:end="338:18">(<expr pos:start="338:6" pos:end="338:17"><operator pos:start="338:6" pos:end="338:6">-</operator><literal type="number" pos:start="338:7" pos:end="338:7">1</literal> <operator pos:start="338:9" pos:end="338:10">!=</operator> <operator pos:start="338:12" pos:end="338:12">(</operator><name pos:start="338:13" pos:end="338:15">int</name><operator pos:start="338:16" pos:end="338:16">)</operator><name pos:start="338:17" pos:end="338:17">t</name></expr>)</condition> <block pos:start="338:20" pos:end="347:3">{<block_content pos:start="341:5" pos:end="346:15">

    <comment type="block" pos:start="340:5" pos:end="340:65">/* Add the time zone diff between local time zone and GMT. */</comment>
    <decl_stmt pos:start="341:5" pos:end="341:43"><decl pos:start="341:5" pos:end="341:42"><type pos:start="341:5" pos:end="341:8"><name pos:start="341:5" pos:end="341:8">long</name></type> <name pos:start="341:10" pos:end="341:14">delta</name> <init pos:start="341:16" pos:end="341:42">= <expr pos:start="341:18" pos:end="341:42"><operator pos:start="341:18" pos:end="341:18">(</operator><name pos:start="341:19" pos:end="341:22">long</name><operator pos:start="341:23" pos:end="341:23">)</operator><operator pos:start="341:24" pos:end="341:24">(</operator><ternary pos:start="341:25" pos:end="341:41"><condition pos:start="341:25" pos:end="341:34"><expr pos:start="341:25" pos:end="341:33"><name pos:start="341:25" pos:end="341:29">tzoff</name><operator pos:start="341:30" pos:end="341:31">!=</operator><operator pos:start="341:32" pos:end="341:32">-</operator><literal type="number" pos:start="341:33" pos:end="341:33">1</literal></expr>?</condition><then pos:start="341:35" pos:end="341:39"><expr pos:start="341:35" pos:end="341:39"><name pos:start="341:35" pos:end="341:39">tzoff</name></expr></then><else pos:start="341:40" pos:end="341:41">:<expr pos:start="341:41" pos:end="341:41"><literal type="number" pos:start="341:41" pos:end="341:41">0</literal></expr></else></ternary><operator pos:start="341:42" pos:end="341:42">)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="343:5" pos:end="344:16"><if pos:start="343:5" pos:end="344:16">if<condition pos:start="343:7" pos:end="343:36">(<expr pos:start="343:8" pos:end="343:35"><operator pos:start="343:8" pos:end="343:8">(</operator><name pos:start="343:9" pos:end="343:13">delta</name><operator pos:start="343:14" pos:end="343:14">&gt;</operator><literal type="number" pos:start="343:15" pos:end="343:15">0</literal><operator pos:start="343:16" pos:end="343:16">)</operator> <operator pos:start="343:18" pos:end="343:19">&amp;&amp;</operator> <operator pos:start="343:21" pos:end="343:21">(</operator><name pos:start="343:22" pos:end="343:22">t</name> <operator pos:start="343:24" pos:end="343:24">+</operator> <name pos:start="343:26" pos:end="343:30">delta</name> <operator pos:start="343:32" pos:end="343:32">&lt;</operator> <name pos:start="343:34" pos:end="343:34">t</name><operator pos:start="343:35" pos:end="343:35">)</operator></expr>)</condition><block type="pseudo" pos:start="344:7" pos:end="344:16"><block_content pos:start="344:7" pos:end="344:16">
      <return pos:start="344:7" pos:end="344:16">return <expr pos:start="344:14" pos:end="344:15"><operator pos:start="344:14" pos:end="344:14">-</operator><literal type="number" pos:start="344:15" pos:end="344:15">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="344:18" pos:end="344:38">/* time_t overflow */</comment>

    <expr_stmt pos:start="346:5" pos:end="346:15"><expr pos:start="346:5" pos:end="346:14"><name pos:start="346:5" pos:end="346:5">t</name> <operator pos:start="346:7" pos:end="346:8">+=</operator> <name pos:start="346:10" pos:end="346:14">delta</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt pos:start="349:3" pos:end="349:14"><expr pos:start="349:3" pos:end="349:13"><operator pos:start="349:3" pos:end="349:3">*</operator><name pos:start="349:4" pos:end="349:9">output</name> <operator pos:start="349:11" pos:end="349:11">=</operator> <name pos:start="349:13" pos:end="349:13">t</name></expr>;</expr_stmt>

  <return pos:start="351:3" pos:end="351:22">return <expr pos:start="351:10" pos:end="351:21"><name pos:start="351:10" pos:end="351:21">PARSEDATE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="353:1" pos:end="368:2">/*	Find next Field
**	---------------
**	Finds the next RFC822 token in a string
**	On entry,
**	*pstr	points to a string containing a word separated
**		by white white space "," ";" or "=". The word
**		can optionally be quoted using &lt;"&gt; or "&lt;" "&gt;"
**		Comments surrrounded by '(' ')' are filtered out
**
**  On exit,
**	*pstr	has been moved to the first delimiter past the
**		field
**		THE STRING HAS BEEN MUTILATED by a 0 terminator
**
**	Returns	a pointer to the first word or NULL on error
*/</comment>
<function pos:start="369:1" pos:end="425:1"><type pos:start="369:1" pos:end="369:13"><specifier pos:start="369:1" pos:end="369:6">static</specifier> <name pos:start="369:8" pos:end="369:11">char</name> <modifier pos:start="369:13" pos:end="369:13">*</modifier></type> <name pos:start="369:15" pos:end="369:25">HTNextField</name> <parameter_list pos:start="369:27" pos:end="369:40">(<parameter pos:start="369:28" pos:end="369:39"><decl pos:start="369:28" pos:end="369:39"><type pos:start="369:28" pos:end="369:34"><name pos:start="369:28" pos:end="369:31">char</name> <modifier pos:start="369:33" pos:end="369:33">*</modifier><modifier pos:start="369:34" pos:end="369:34">*</modifier></type> <name pos:start="369:36" pos:end="369:39">pstr</name></decl></parameter>)</parameter_list>
<block pos:start="370:1" pos:end="425:1">{<block_content pos:start="371:5" pos:end="424:17">
    <decl_stmt pos:start="371:5" pos:end="371:13"><decl pos:start="371:5" pos:end="371:12"><type pos:start="371:5" pos:end="371:10"><name pos:start="371:5" pos:end="371:8">char</name> <modifier pos:start="371:10" pos:end="371:10">*</modifier></type> <name pos:start="371:12" pos:end="371:12">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="372:5" pos:end="372:24"><decl pos:start="372:5" pos:end="372:23"><type pos:start="372:5" pos:end="372:10"><name pos:start="372:5" pos:end="372:8">char</name> <modifier pos:start="372:10" pos:end="372:10">*</modifier></type> <name pos:start="372:12" pos:end="372:16">start</name> <init pos:start="372:18" pos:end="372:23">= <expr pos:start="372:20" pos:end="372:23"><name pos:start="372:20" pos:end="372:23">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="374:5" pos:end="376:5"><if pos:start="374:5" pos:end="376:5">if <condition pos:start="374:8" pos:end="374:24">(<expr pos:start="374:9" pos:end="374:23"><operator pos:start="374:9" pos:end="374:9">!</operator><name pos:start="374:10" pos:end="374:13">pstr</name> <operator pos:start="374:15" pos:end="374:16">||</operator> <operator pos:start="374:18" pos:end="374:18">!</operator><operator pos:start="374:19" pos:end="374:19">*</operator><name pos:start="374:20" pos:end="374:23">pstr</name></expr>)</condition> <block pos:start="374:26" pos:end="376:5">{<block_content pos:start="375:9" pos:end="375:20">
        <return pos:start="375:9" pos:end="375:20">return <expr pos:start="375:16" pos:end="375:19"><name pos:start="375:16" pos:end="375:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="377:5" pos:end="377:14"><expr pos:start="377:5" pos:end="377:13"><name pos:start="377:5" pos:end="377:5">p</name> <operator pos:start="377:7" pos:end="377:7">=</operator> <operator pos:start="377:9" pos:end="377:9">*</operator><name pos:start="377:10" pos:end="377:13">pstr</name></expr>;</expr_stmt>
    
    <while pos:start="379:5" pos:end="419:5">while <condition pos:start="379:11" pos:end="379:13">(<expr pos:start="379:12" pos:end="379:12"><literal type="number" pos:start="379:12" pos:end="379:12">1</literal></expr>)</condition> <block pos:start="379:15" pos:end="419:5">{<block_content pos:start="381:9" pos:end="418:9">
        <comment type="block" pos:start="380:9" pos:end="380:52">/* Strip white space and other delimiters */</comment>
        <while pos:start="381:9" pos:end="383:9">while <condition pos:start="381:15" pos:end="381:79">(<expr pos:start="381:16" pos:end="381:78"><operator pos:start="381:16" pos:end="381:16">*</operator><name pos:start="381:17" pos:end="381:17">p</name> <operator pos:start="381:19" pos:end="381:20">&amp;&amp;</operator> <operator pos:start="381:22" pos:end="381:22">(</operator><call pos:start="381:23" pos:end="381:38"><name pos:start="381:23" pos:end="381:29">isspace</name><argument_list pos:start="381:30" pos:end="381:38">(<argument pos:start="381:31" pos:end="381:37"><expr pos:start="381:31" pos:end="381:37"><operator pos:start="381:31" pos:end="381:31">(</operator><name pos:start="381:32" pos:end="381:34">int</name><operator pos:start="381:35" pos:end="381:35">)</operator><operator pos:start="381:36" pos:end="381:36">*</operator><name pos:start="381:37" pos:end="381:37">p</name></expr></argument>)</argument_list></call> <operator pos:start="381:40" pos:end="381:41">||</operator> <operator pos:start="381:43" pos:end="381:43">*</operator><name pos:start="381:44" pos:end="381:44">p</name> <operator pos:start="381:46" pos:end="381:47">==</operator> <literal type="char" pos:start="381:49" pos:end="381:51">','</literal> <operator pos:start="381:53" pos:end="381:54">||</operator> <operator pos:start="381:56" pos:end="381:56">*</operator><name pos:start="381:57" pos:end="381:57">p</name> <operator pos:start="381:59" pos:end="381:60">==</operator> <literal type="char" pos:start="381:62" pos:end="381:64">';'</literal> <operator pos:start="381:66" pos:end="381:67">||</operator> <operator pos:start="381:69" pos:end="381:69">*</operator><name pos:start="381:70" pos:end="381:70">p</name> <operator pos:start="381:72" pos:end="381:73">==</operator> <literal type="char" pos:start="381:75" pos:end="381:77">'='</literal><operator pos:start="381:78" pos:end="381:78">)</operator></expr>)</condition> <block pos:start="381:81" pos:end="383:9">{<block_content pos:start="382:13" pos:end="382:16">
            <expr_stmt pos:start="382:13" pos:end="382:16"><expr pos:start="382:13" pos:end="382:15"><name pos:start="382:13" pos:end="382:13">p</name><operator pos:start="382:14" pos:end="382:15">++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt pos:start="384:9" pos:end="387:9"><if pos:start="384:9" pos:end="387:9">if <condition pos:start="384:12" pos:end="384:16">(<expr pos:start="384:13" pos:end="384:15"><operator pos:start="384:13" pos:end="384:13">!</operator><operator pos:start="384:14" pos:end="384:14">*</operator><name pos:start="384:15" pos:end="384:15">p</name></expr>)</condition> <block pos:start="384:18" pos:end="387:9">{<block_content pos:start="385:13" pos:end="386:24">
            <expr_stmt pos:start="385:13" pos:end="385:22"><expr pos:start="385:13" pos:end="385:21"><operator pos:start="385:13" pos:end="385:13">*</operator><name pos:start="385:14" pos:end="385:17">pstr</name> <operator pos:start="385:19" pos:end="385:19">=</operator> <name pos:start="385:21" pos:end="385:21">p</name></expr>;</expr_stmt>
            <return pos:start="386:13" pos:end="386:24">return <expr pos:start="386:20" pos:end="386:23"><name pos:start="386:20" pos:end="386:23">NULL</name></expr>;</return>                                         <comment type="block" pos:start="386:66" pos:end="386:79">/* No field */</comment>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="389:9" pos:end="418:9"><if pos:start="389:9" pos:end="397:9">if <condition pos:start="389:12" pos:end="389:22">(<expr pos:start="389:13" pos:end="389:21"><operator pos:start="389:13" pos:end="389:13">*</operator><name pos:start="389:14" pos:end="389:14">p</name> <operator pos:start="389:16" pos:end="389:17">==</operator> <literal type="char" pos:start="389:19" pos:end="389:21">'"'</literal></expr>)</condition> <block pos:start="389:24" pos:end="397:9">{<block_content pos:start="390:13" pos:end="396:18">                                     <comment type="block" pos:start="389:62" pos:end="389:79">/* quoted field */</comment>
            <expr_stmt pos:start="390:13" pos:end="390:24"><expr pos:start="390:13" pos:end="390:23"><name pos:start="390:13" pos:end="390:17">start</name> <operator pos:start="390:19" pos:end="390:19">=</operator> <operator pos:start="390:21" pos:end="390:22">++</operator><name pos:start="390:23" pos:end="390:23">p</name></expr>;</expr_stmt>
            <for pos:start="391:13" pos:end="395:13">for <control pos:start="391:17" pos:end="391:40">(<init pos:start="391:18" pos:end="391:18">;</init> <condition pos:start="391:20" pos:end="391:35"><expr pos:start="391:20" pos:end="391:34"><operator pos:start="391:20" pos:end="391:20">*</operator><name pos:start="391:21" pos:end="391:21">p</name> <operator pos:start="391:23" pos:end="391:24">&amp;&amp;</operator> <operator pos:start="391:26" pos:end="391:26">*</operator><name pos:start="391:27" pos:end="391:27">p</name> <operator pos:start="391:29" pos:end="391:30">!=</operator> <literal type="char" pos:start="391:32" pos:end="391:34">'"'</literal></expr>;</condition> <incr pos:start="391:37" pos:end="391:39"><expr pos:start="391:37" pos:end="391:39"><name pos:start="391:37" pos:end="391:37">p</name><operator pos:start="391:38" pos:end="391:39">++</operator></expr></incr>)</control> <block pos:start="391:42" pos:end="395:13">{<block_content pos:start="392:17" pos:end="394:17">
                <if_stmt pos:start="392:17" pos:end="394:17"><if pos:start="392:17" pos:end="394:17">if <condition pos:start="392:20" pos:end="392:43">(<expr pos:start="392:21" pos:end="392:42"><operator pos:start="392:21" pos:end="392:21">*</operator><name pos:start="392:22" pos:end="392:22">p</name> <operator pos:start="392:24" pos:end="392:25">==</operator> <literal type="char" pos:start="392:27" pos:end="392:30">'\\'</literal> <operator pos:start="392:32" pos:end="392:33">&amp;&amp;</operator> <operator pos:start="392:35" pos:end="392:35">*</operator><operator pos:start="392:36" pos:end="392:36">(</operator><name pos:start="392:37" pos:end="392:37">p</name> <operator pos:start="392:39" pos:end="392:39">+</operator> <literal type="number" pos:start="392:41" pos:end="392:41">1</literal><operator pos:start="392:42" pos:end="392:42">)</operator></expr>)</condition> <block pos:start="392:45" pos:end="394:17">{<block_content pos:start="393:21" pos:end="393:24">
                    <expr_stmt pos:start="393:21" pos:end="393:24"><expr pos:start="393:21" pos:end="393:23"><name pos:start="393:21" pos:end="393:21">p</name><operator pos:start="393:22" pos:end="393:23">++</operator></expr>;</expr_stmt>                               <comment type="block" pos:start="393:56" pos:end="393:79">/* Skip escaped chars */</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break pos:start="396:13" pos:end="396:18">break;</break>                          <comment type="block" pos:start="396:45" pos:end="396:79">/* kr95-10-9: needs to stop here */</comment>
        </block_content>}</block></if> <if type="elseif" pos:start="397:11" pos:end="405:9">else if <condition pos:start="397:19" pos:end="397:29">(<expr pos:start="397:20" pos:end="397:28"><operator pos:start="397:20" pos:end="397:20">*</operator><name pos:start="397:21" pos:end="397:21">p</name> <operator pos:start="397:23" pos:end="397:24">==</operator> <literal type="char" pos:start="397:26" pos:end="397:28">'&lt;'</literal></expr>)</condition> <block pos:start="397:31" pos:end="405:9">{<block_content pos:start="398:13" pos:end="404:18">             <comment type="block" pos:start="397:45" pos:end="397:62">/* quoted field */</comment>
            <expr_stmt pos:start="398:13" pos:end="398:24"><expr pos:start="398:13" pos:end="398:23"><name pos:start="398:13" pos:end="398:17">start</name> <operator pos:start="398:19" pos:end="398:19">=</operator> <operator pos:start="398:21" pos:end="398:22">++</operator><name pos:start="398:23" pos:end="398:23">p</name></expr>;</expr_stmt>
            <for pos:start="399:13" pos:end="403:13">for <control pos:start="399:17" pos:end="399:40">(<init pos:start="399:18" pos:end="399:18">;</init> <condition pos:start="399:20" pos:end="399:35"><expr pos:start="399:20" pos:end="399:34"><operator pos:start="399:20" pos:end="399:20">*</operator><name pos:start="399:21" pos:end="399:21">p</name> <operator pos:start="399:23" pos:end="399:24">&amp;&amp;</operator> <operator pos:start="399:26" pos:end="399:26">*</operator><name pos:start="399:27" pos:end="399:27">p</name> <operator pos:start="399:29" pos:end="399:30">!=</operator> <literal type="char" pos:start="399:32" pos:end="399:34">'&gt;'</literal></expr>;</condition> <incr pos:start="399:37" pos:end="399:39"><expr pos:start="399:37" pos:end="399:39"><name pos:start="399:37" pos:end="399:37">p</name><operator pos:start="399:38" pos:end="399:39">++</operator></expr></incr>)</control> <block pos:start="399:42" pos:end="403:13">{<block_content pos:start="400:17" pos:end="402:17">
                <if_stmt pos:start="400:17" pos:end="402:17"><if pos:start="400:17" pos:end="402:17">if <condition pos:start="400:20" pos:end="400:43">(<expr pos:start="400:21" pos:end="400:42"><operator pos:start="400:21" pos:end="400:21">*</operator><name pos:start="400:22" pos:end="400:22">p</name> <operator pos:start="400:24" pos:end="400:25">==</operator> <literal type="char" pos:start="400:27" pos:end="400:30">'\\'</literal> <operator pos:start="400:32" pos:end="400:33">&amp;&amp;</operator> <operator pos:start="400:35" pos:end="400:35">*</operator><operator pos:start="400:36" pos:end="400:36">(</operator><name pos:start="400:37" pos:end="400:37">p</name> <operator pos:start="400:39" pos:end="400:39">+</operator> <literal type="number" pos:start="400:41" pos:end="400:41">1</literal><operator pos:start="400:42" pos:end="400:42">)</operator></expr>)</condition> <block pos:start="400:45" pos:end="402:17">{<block_content pos:start="401:21" pos:end="401:24">
                    <expr_stmt pos:start="401:21" pos:end="401:24"><expr pos:start="401:21" pos:end="401:23"><name pos:start="401:21" pos:end="401:21">p</name><operator pos:start="401:22" pos:end="401:23">++</operator></expr>;</expr_stmt>                               <comment type="block" pos:start="401:56" pos:end="401:79">/* Skip escaped chars */</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <break pos:start="404:13" pos:end="404:18">break;</break>                          <comment type="block" pos:start="404:45" pos:end="404:79">/* kr95-10-9: needs to stop here */</comment>
        </block_content>}</block></if> <if type="elseif" pos:start="405:11" pos:end="412:9">else if <condition pos:start="405:19" pos:end="405:29">(<expr pos:start="405:20" pos:end="405:28"><operator pos:start="405:20" pos:end="405:20">*</operator><name pos:start="405:21" pos:end="405:21">p</name> <operator pos:start="405:23" pos:end="405:24">==</operator> <literal type="char" pos:start="405:26" pos:end="405:28">'('</literal></expr>)</condition> <block pos:start="405:31" pos:end="412:9">{<block_content pos:start="406:13" pos:end="411:16">             <comment type="block" pos:start="405:45" pos:end="405:57">/* Comment */</comment>
            <for pos:start="406:13" pos:end="410:13">for <control pos:start="406:17" pos:end="406:40">(<init pos:start="406:18" pos:end="406:18">;</init> <condition pos:start="406:20" pos:end="406:35"><expr pos:start="406:20" pos:end="406:34"><operator pos:start="406:20" pos:end="406:20">*</operator><name pos:start="406:21" pos:end="406:21">p</name> <operator pos:start="406:23" pos:end="406:24">&amp;&amp;</operator> <operator pos:start="406:26" pos:end="406:26">*</operator><name pos:start="406:27" pos:end="406:27">p</name> <operator pos:start="406:29" pos:end="406:30">!=</operator> <literal type="char" pos:start="406:32" pos:end="406:34">')'</literal></expr>;</condition> <incr pos:start="406:37" pos:end="406:39"><expr pos:start="406:37" pos:end="406:39"><name pos:start="406:37" pos:end="406:37">p</name><operator pos:start="406:38" pos:end="406:39">++</operator></expr></incr>)</control> <block pos:start="406:42" pos:end="410:13">{<block_content pos:start="407:17" pos:end="409:17">
                <if_stmt pos:start="407:17" pos:end="409:17"><if pos:start="407:17" pos:end="409:17">if <condition pos:start="407:20" pos:end="407:43">(<expr pos:start="407:21" pos:end="407:42"><operator pos:start="407:21" pos:end="407:21">*</operator><name pos:start="407:22" pos:end="407:22">p</name> <operator pos:start="407:24" pos:end="407:25">==</operator> <literal type="char" pos:start="407:27" pos:end="407:30">'\\'</literal> <operator pos:start="407:32" pos:end="407:33">&amp;&amp;</operator> <operator pos:start="407:35" pos:end="407:35">*</operator><operator pos:start="407:36" pos:end="407:36">(</operator><name pos:start="407:37" pos:end="407:37">p</name> <operator pos:start="407:39" pos:end="407:39">+</operator> <literal type="number" pos:start="407:41" pos:end="407:41">1</literal><operator pos:start="407:42" pos:end="407:42">)</operator></expr>)</condition> <block pos:start="407:45" pos:end="409:17">{<block_content pos:start="408:21" pos:end="408:24">
                    <expr_stmt pos:start="408:21" pos:end="408:24"><expr pos:start="408:21" pos:end="408:23"><name pos:start="408:21" pos:end="408:21">p</name><operator pos:start="408:22" pos:end="408:23">++</operator></expr>;</expr_stmt>                               <comment type="block" pos:start="408:56" pos:end="408:79">/* Skip escaped chars */</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt pos:start="411:13" pos:end="411:16"><expr pos:start="411:13" pos:end="411:15"><name pos:start="411:13" pos:end="411:13">p</name><operator pos:start="411:14" pos:end="411:15">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="412:11" pos:end="418:9">else <block pos:start="412:16" pos:end="418:9">{<block_content pos:start="413:13" pos:end="417:18">                                              <comment type="block" pos:start="412:63" pos:end="412:79">/* Spool field */</comment>
            <expr_stmt pos:start="413:13" pos:end="413:22"><expr pos:start="413:13" pos:end="413:21"><name pos:start="413:13" pos:end="413:17">start</name> <operator pos:start="413:19" pos:end="413:19">=</operator> <name pos:start="413:21" pos:end="413:21">p</name></expr>;</expr_stmt>
            <while pos:start="414:13" pos:end="416:13">while <condition pos:start="414:19" pos:end="414:82">(<expr pos:start="414:20" pos:end="414:81"><operator pos:start="414:20" pos:end="414:20">*</operator><name pos:start="414:21" pos:end="414:21">p</name> <operator pos:start="414:23" pos:end="414:24">&amp;&amp;</operator> <operator pos:start="414:26" pos:end="414:26">!</operator><call pos:start="414:27" pos:end="414:42"><name pos:start="414:27" pos:end="414:33">isspace</name><argument_list pos:start="414:34" pos:end="414:42">(<argument pos:start="414:35" pos:end="414:41"><expr pos:start="414:35" pos:end="414:41"><operator pos:start="414:35" pos:end="414:35">(</operator><name pos:start="414:36" pos:end="414:38">int</name><operator pos:start="414:39" pos:end="414:39">)</operator><operator pos:start="414:40" pos:end="414:40">*</operator><name pos:start="414:41" pos:end="414:41">p</name></expr></argument>)</argument_list></call> <operator pos:start="414:44" pos:end="414:45">&amp;&amp;</operator> <operator pos:start="414:47" pos:end="414:47">*</operator><name pos:start="414:48" pos:end="414:48">p</name> <operator pos:start="414:50" pos:end="414:51">!=</operator> <literal type="char" pos:start="414:53" pos:end="414:55">','</literal> <operator pos:start="414:57" pos:end="414:58">&amp;&amp;</operator> <operator pos:start="414:60" pos:end="414:60">*</operator><name pos:start="414:61" pos:end="414:61">p</name> <operator pos:start="414:63" pos:end="414:64">!=</operator> <literal type="char" pos:start="414:66" pos:end="414:68">';'</literal> <operator pos:start="414:70" pos:end="414:71">&amp;&amp;</operator> <operator pos:start="414:73" pos:end="414:73">*</operator><name pos:start="414:74" pos:end="414:74">p</name> <operator pos:start="414:76" pos:end="414:77">!=</operator> <literal type="char" pos:start="414:79" pos:end="414:81">'='</literal></expr>)</condition> <block pos:start="414:84" pos:end="416:13">{<block_content pos:start="415:17" pos:end="415:20">
                <expr_stmt pos:start="415:17" pos:end="415:20"><expr pos:start="415:17" pos:end="415:19"><name pos:start="415:17" pos:end="415:17">p</name><operator pos:start="415:18" pos:end="415:19">++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <break pos:start="417:13" pos:end="417:18">break;</break>                                                 <comment type="block" pos:start="417:68" pos:end="417:79">/* Got it */</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <if_stmt pos:start="420:5" pos:end="422:5"><if pos:start="420:5" pos:end="422:5">if <condition pos:start="420:8" pos:end="420:11">(<expr pos:start="420:9" pos:end="420:10"><operator pos:start="420:9" pos:end="420:9">*</operator><name pos:start="420:10" pos:end="420:10">p</name></expr>)</condition> <block pos:start="420:13" pos:end="422:5">{<block_content pos:start="421:9" pos:end="421:20">
        <expr_stmt pos:start="421:9" pos:end="421:20"><expr pos:start="421:9" pos:end="421:19"><operator pos:start="421:9" pos:end="421:9">*</operator><name pos:start="421:10" pos:end="421:10">p</name><operator pos:start="421:11" pos:end="421:12">++</operator> <operator pos:start="421:14" pos:end="421:14">=</operator> <literal type="char" pos:start="421:16" pos:end="421:19">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="423:5" pos:end="423:14"><expr pos:start="423:5" pos:end="423:13"><operator pos:start="423:5" pos:end="423:5">*</operator><name pos:start="423:6" pos:end="423:9">pstr</name> <operator pos:start="423:11" pos:end="423:11">=</operator> <name pos:start="423:13" pos:end="423:13">p</name></expr>;</expr_stmt>
    <return pos:start="424:5" pos:end="424:17">return <expr pos:start="424:12" pos:end="424:16"><name pos:start="424:12" pos:end="424:16">start</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="426:1" pos:end="432:3">/*
 * This function parses the authentication tokens from
 * the server when the server is requesting HTTP digest
 * authentication.  The tokens are required to generate
 * a valid authentication response in future HTTP
 * requests.
 */</comment>
<function pos:start="433:1" pos:end="517:1"><type pos:start="433:1" pos:end="433:16"><specifier pos:start="433:1" pos:end="433:6">static</specifier> <name pos:start="433:8" pos:end="433:16">EST_ERROR</name></type> <name pos:start="433:18" pos:end="433:41">est_io_parse_auth_tokens</name> <parameter_list pos:start="433:43" pos:end="433:67">(<parameter pos:start="433:44" pos:end="433:55"><decl pos:start="433:44" pos:end="433:55"><type pos:start="433:44" pos:end="433:55"><name pos:start="433:44" pos:end="433:50">EST_CTX</name> <modifier pos:start="433:52" pos:end="433:52">*</modifier></type><name pos:start="433:53" pos:end="433:55">ctx</name></decl></parameter>, <parameter pos:start="433:58" pos:end="433:66"><decl pos:start="433:58" pos:end="433:66"><type pos:start="433:58" pos:end="433:66"><name pos:start="433:58" pos:end="433:61">char</name> <modifier pos:start="433:63" pos:end="433:63">*</modifier></type><name pos:start="433:64" pos:end="433:66">hdr</name></decl></parameter>)</parameter_list>
<block pos:start="434:1" pos:end="517:1">{<block_content pos:start="435:5" pos:end="516:16">
    <decl_stmt pos:start="435:5" pos:end="435:26"><decl pos:start="435:5" pos:end="435:25"><type pos:start="435:5" pos:end="435:7"><name pos:start="435:5" pos:end="435:7">int</name></type> <name pos:start="435:9" pos:end="435:10">rv</name> <init pos:start="435:12" pos:end="435:25">= <expr pos:start="435:14" pos:end="435:25"><name pos:start="435:14" pos:end="435:25">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="436:5" pos:end="436:18"><decl pos:start="436:5" pos:end="436:17"><type pos:start="436:5" pos:end="436:10"><name pos:start="436:5" pos:end="436:8">char</name> <modifier pos:start="436:10" pos:end="436:10">*</modifier></type><name pos:start="436:11" pos:end="436:11">p</name> <init pos:start="436:13" pos:end="436:17">= <expr pos:start="436:15" pos:end="436:17"><name pos:start="436:15" pos:end="436:17">hdr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="437:5" pos:end="437:23"><decl pos:start="437:5" pos:end="437:22"><type pos:start="437:5" pos:end="437:10"><name pos:start="437:5" pos:end="437:8">char</name> <modifier pos:start="437:10" pos:end="437:10">*</modifier></type><name pos:start="437:11" pos:end="437:15">token</name> <init pos:start="437:17" pos:end="437:22">= <expr pos:start="437:19" pos:end="437:22"><name pos:start="437:19" pos:end="437:22">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="438:5" pos:end="438:23"><decl pos:start="438:5" pos:end="438:22"><type pos:start="438:5" pos:end="438:10"><name pos:start="438:5" pos:end="438:8">char</name> <modifier pos:start="438:10" pos:end="438:10">*</modifier></type><name pos:start="438:11" pos:end="438:15">value</name> <init pos:start="438:17" pos:end="438:22">= <expr pos:start="438:19" pos:end="438:22"><name pos:start="438:19" pos:end="438:22">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="439:5" pos:end="439:13"><decl pos:start="439:5" pos:end="439:12"><type pos:start="439:5" pos:end="439:7"><name pos:start="439:5" pos:end="439:7">int</name></type> <name pos:start="439:9" pos:end="439:12">diff</name></decl>;</decl_stmt>
    <decl_stmt pos:start="440:5" pos:end="440:21"><decl pos:start="440:5" pos:end="440:20"><type pos:start="440:5" pos:end="440:11"><name pos:start="440:5" pos:end="440:11">errno_t</name></type> <name pos:start="440:13" pos:end="440:20">safec_rc</name></decl>;</decl_stmt>

    <comment type="block" pos:start="442:5" pos:end="445:7">/*
     * header will come in with the basic or digest field still on the front.
     * skip over it.
     */</comment>

    <expr_stmt pos:start="447:5" pos:end="447:28"><expr pos:start="447:5" pos:end="447:27"><name pos:start="447:5" pos:end="447:9">token</name> <operator pos:start="447:11" pos:end="447:11">=</operator> <call pos:start="447:13" pos:end="447:27"><name pos:start="447:13" pos:end="447:23">HTNextField</name><argument_list pos:start="447:24" pos:end="447:27">(<argument pos:start="447:25" pos:end="447:26"><expr pos:start="447:25" pos:end="447:26"><operator pos:start="447:25" pos:end="447:25">&amp;</operator><name pos:start="447:26" pos:end="447:26">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="449:5" pos:end="515:5">while <condition pos:start="449:11" pos:end="449:37">(<expr pos:start="449:12" pos:end="449:36"><operator pos:start="449:12" pos:end="449:12">(</operator><name pos:start="449:13" pos:end="449:17">token</name> <operator pos:start="449:19" pos:end="449:19">=</operator> <call pos:start="449:21" pos:end="449:35"><name pos:start="449:21" pos:end="449:31">HTNextField</name><argument_list pos:start="449:32" pos:end="449:35">(<argument pos:start="449:33" pos:end="449:34"><expr pos:start="449:33" pos:end="449:34"><operator pos:start="449:33" pos:end="449:33">&amp;</operator><name pos:start="449:34" pos:end="449:34">p</name></expr></argument>)</argument_list></call><operator pos:start="449:36" pos:end="449:36">)</operator></expr>)</condition> <block pos:start="449:39" pos:end="515:5">{<block_content pos:start="450:9" pos:end="514:9">
        <if_stmt pos:start="450:9" pos:end="509:9"><if pos:start="450:9" pos:end="458:9">if <condition pos:start="450:12" pos:end="450:46">(<expr pos:start="450:13" pos:end="450:45"><operator pos:start="450:13" pos:end="450:13">!</operator><call pos:start="450:14" pos:end="450:45"><name pos:start="450:14" pos:end="450:29">est_strcasecmp_s</name><argument_list pos:start="450:30" pos:end="450:45">(<argument pos:start="450:31" pos:end="450:35"><expr pos:start="450:31" pos:end="450:35"><name pos:start="450:31" pos:end="450:35">token</name></expr></argument>, <argument pos:start="450:38" pos:end="450:44"><expr pos:start="450:38" pos:end="450:44"><literal type="string" pos:start="450:38" pos:end="450:44">"realm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="450:48" pos:end="458:9">{<block_content pos:start="451:13" pos:end="457:13">
            <if_stmt pos:start="451:13" pos:end="457:13"><if pos:start="451:13" pos:end="455:13">if <condition pos:start="451:16" pos:end="451:42">(<expr pos:start="451:17" pos:end="451:41"><operator pos:start="451:17" pos:end="451:17">(</operator><name pos:start="451:18" pos:end="451:22">value</name> <operator pos:start="451:24" pos:end="451:24">=</operator> <call pos:start="451:26" pos:end="451:40"><name pos:start="451:26" pos:end="451:36">HTNextField</name><argument_list pos:start="451:37" pos:end="451:40">(<argument pos:start="451:38" pos:end="451:39"><expr pos:start="451:38" pos:end="451:39"><operator pos:start="451:38" pos:end="451:38">&amp;</operator><name pos:start="451:39" pos:end="451:39">p</name></expr></argument>)</argument_list></call><operator pos:start="451:41" pos:end="451:41">)</operator></expr>)</condition> <block pos:start="451:44" pos:end="455:13">{<block_content pos:start="452:17" pos:end="454:17">
                <if_stmt pos:start="452:17" pos:end="454:17"><if pos:start="452:17" pos:end="454:17">if <condition pos:start="452:20" pos:end="452:78">(<expr pos:start="452:21" pos:end="452:77"><name pos:start="452:21" pos:end="452:23">EOK</name> <operator pos:start="452:25" pos:end="452:26">!=</operator> <call pos:start="452:28" pos:end="452:77"><name pos:start="452:28" pos:end="452:36">strncpy_s</name><argument_list pos:start="452:37" pos:end="452:77">(<argument pos:start="452:38" pos:end="452:47"><expr pos:start="452:38" pos:end="452:47"><name pos:start="452:38" pos:end="452:47"><name pos:start="452:38" pos:end="452:40">ctx</name><operator pos:start="452:41" pos:end="452:42">-&gt;</operator><name pos:start="452:43" pos:end="452:47">realm</name></name></expr></argument>, <argument pos:start="452:50" pos:end="452:58"><expr pos:start="452:50" pos:end="452:58"><name pos:start="452:50" pos:end="452:58">MAX_REALM</name></expr></argument>, <argument pos:start="452:61" pos:end="452:65"><expr pos:start="452:61" pos:end="452:65"><name pos:start="452:61" pos:end="452:65">value</name></expr></argument>, <argument pos:start="452:68" pos:end="452:76"><expr pos:start="452:68" pos:end="452:76"><name pos:start="452:68" pos:end="452:76">MAX_REALM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="452:80" pos:end="454:17">{<block_content pos:start="453:21" pos:end="453:47">
                    <expr_stmt pos:start="453:21" pos:end="453:47"><expr pos:start="453:21" pos:end="453:46"><name pos:start="453:21" pos:end="453:22">rv</name> <operator pos:start="453:24" pos:end="453:24">=</operator> <name pos:start="453:26" pos:end="453:46">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="455:15" pos:end="457:13">else <block pos:start="455:20" pos:end="457:13">{<block_content pos:start="456:17" pos:end="456:43">
                <expr_stmt pos:start="456:17" pos:end="456:43"><expr pos:start="456:17" pos:end="456:42"><name pos:start="456:17" pos:end="456:18">rv</name> <operator pos:start="456:20" pos:end="456:20">=</operator> <name pos:start="456:22" pos:end="456:42">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="458:11" pos:end="466:9">else if <condition pos:start="458:19" pos:end="458:53">(<expr pos:start="458:20" pos:end="458:52"><operator pos:start="458:20" pos:end="458:20">!</operator><call pos:start="458:21" pos:end="458:52"><name pos:start="458:21" pos:end="458:36">est_strcasecmp_s</name><argument_list pos:start="458:37" pos:end="458:52">(<argument pos:start="458:38" pos:end="458:42"><expr pos:start="458:38" pos:end="458:42"><name pos:start="458:38" pos:end="458:42">token</name></expr></argument>, <argument pos:start="458:45" pos:end="458:51"><expr pos:start="458:45" pos:end="458:51"><literal type="string" pos:start="458:45" pos:end="458:51">"nonce"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="458:55" pos:end="466:9">{<block_content pos:start="459:13" pos:end="465:13">
            <if_stmt pos:start="459:13" pos:end="465:13"><if pos:start="459:13" pos:end="463:13">if <condition pos:start="459:16" pos:end="459:42">(<expr pos:start="459:17" pos:end="459:41"><operator pos:start="459:17" pos:end="459:17">(</operator><name pos:start="459:18" pos:end="459:22">value</name> <operator pos:start="459:24" pos:end="459:24">=</operator> <call pos:start="459:26" pos:end="459:40"><name pos:start="459:26" pos:end="459:36">HTNextField</name><argument_list pos:start="459:37" pos:end="459:40">(<argument pos:start="459:38" pos:end="459:39"><expr pos:start="459:38" pos:end="459:39"><operator pos:start="459:38" pos:end="459:38">&amp;</operator><name pos:start="459:39" pos:end="459:39">p</name></expr></argument>)</argument_list></call><operator pos:start="459:41" pos:end="459:41">)</operator></expr>)</condition> <block pos:start="459:44" pos:end="463:13">{<block_content pos:start="460:17" pos:end="462:17">
                <if_stmt pos:start="460:17" pos:end="462:17"><if pos:start="460:17" pos:end="462:17">if <condition pos:start="460:20" pos:end="460:80">(<expr pos:start="460:21" pos:end="460:79"><name pos:start="460:21" pos:end="460:23">EOK</name> <operator pos:start="460:25" pos:end="460:26">!=</operator> <call pos:start="460:28" pos:end="460:79"><name pos:start="460:28" pos:end="460:36">strncpy_s</name><argument_list pos:start="460:37" pos:end="460:79">(<argument pos:start="460:38" pos:end="460:49"><expr pos:start="460:38" pos:end="460:49"><name pos:start="460:38" pos:end="460:49"><name pos:start="460:38" pos:end="460:40">ctx</name><operator pos:start="460:41" pos:end="460:42">-&gt;</operator><name pos:start="460:43" pos:end="460:49">s_nonce</name></name></expr></argument>, <argument pos:start="460:52" pos:end="460:60"><expr pos:start="460:52" pos:end="460:60"><name pos:start="460:52" pos:end="460:60">MAX_NONCE</name></expr></argument>, <argument pos:start="460:63" pos:end="460:67"><expr pos:start="460:63" pos:end="460:67"><name pos:start="460:63" pos:end="460:67">value</name></expr></argument>, <argument pos:start="460:70" pos:end="460:78"><expr pos:start="460:70" pos:end="460:78"><name pos:start="460:70" pos:end="460:78">MAX_NONCE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="460:82" pos:end="462:17">{<block_content pos:start="461:21" pos:end="461:47">
                    <expr_stmt pos:start="461:21" pos:end="461:47"><expr pos:start="461:21" pos:end="461:46"><name pos:start="461:21" pos:end="461:22">rv</name> <operator pos:start="461:24" pos:end="461:24">=</operator> <name pos:start="461:26" pos:end="461:46">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>                
            </block_content>}</block></if> <else pos:start="463:15" pos:end="465:13">else <block pos:start="463:20" pos:end="465:13">{<block_content pos:start="464:17" pos:end="464:43">
                <expr_stmt pos:start="464:17" pos:end="464:43"><expr pos:start="464:17" pos:end="464:42"><name pos:start="464:17" pos:end="464:18">rv</name> <operator pos:start="464:20" pos:end="464:20">=</operator> <name pos:start="464:22" pos:end="464:42">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="466:11" pos:end="483:9">else if <condition pos:start="466:19" pos:end="466:51">(<expr pos:start="466:20" pos:end="466:50"><operator pos:start="466:20" pos:end="466:20">!</operator><call pos:start="466:21" pos:end="466:50"><name pos:start="466:21" pos:end="466:36">est_strcasecmp_s</name><argument_list pos:start="466:37" pos:end="466:50">(<argument pos:start="466:38" pos:end="466:42"><expr pos:start="466:38" pos:end="466:42"><name pos:start="466:38" pos:end="466:42">token</name></expr></argument>, <argument pos:start="466:45" pos:end="466:49"><expr pos:start="466:45" pos:end="466:49"><literal type="string" pos:start="466:45" pos:end="466:49">"qop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="466:53" pos:end="483:9">{<block_content pos:start="467:13" pos:end="482:13">
            <if_stmt pos:start="467:13" pos:end="482:13"><if pos:start="467:13" pos:end="480:13">if <condition pos:start="467:16" pos:end="467:42">(<expr pos:start="467:17" pos:end="467:41"><operator pos:start="467:17" pos:end="467:17">(</operator><name pos:start="467:18" pos:end="467:22">value</name> <operator pos:start="467:24" pos:end="467:24">=</operator> <call pos:start="467:26" pos:end="467:40"><name pos:start="467:26" pos:end="467:36">HTNextField</name><argument_list pos:start="467:37" pos:end="467:40">(<argument pos:start="467:38" pos:end="467:39"><expr pos:start="467:38" pos:end="467:39"><operator pos:start="467:38" pos:end="467:38">&amp;</operator><name pos:start="467:39" pos:end="467:39">p</name></expr></argument>)</argument_list></call><operator pos:start="467:41" pos:end="467:41">)</operator></expr>)</condition> <block pos:start="467:44" pos:end="480:13">{<block_content pos:start="469:17" pos:end="479:17">

                <if_stmt pos:start="469:17" pos:end="479:17"><if pos:start="469:17" pos:end="471:17">if <condition pos:start="469:20" pos:end="469:37">(<expr pos:start="469:21" pos:end="469:36"><name pos:start="469:21" pos:end="469:28"><name pos:start="469:21" pos:end="469:25">value</name><index pos:start="469:26" pos:end="469:28">[<expr pos:start="469:27" pos:end="469:27"><literal type="number" pos:start="469:27" pos:end="469:27">0</literal></expr>]</index></name> <operator pos:start="469:30" pos:end="469:31">==</operator> <literal type="char" pos:start="469:33" pos:end="469:36">'\0'</literal></expr>)</condition> <block pos:start="469:39" pos:end="471:17">{<block_content pos:start="470:21" pos:end="470:69">
                    <expr_stmt pos:start="470:21" pos:end="470:69"><expr pos:start="470:21" pos:end="470:68"><call pos:start="470:21" pos:end="470:68"><name pos:start="470:21" pos:end="470:32">EST_LOG_WARN</name><argument_list pos:start="470:33" pos:end="470:68">(<argument pos:start="470:34" pos:end="470:60"><expr pos:start="470:34" pos:end="470:60"><literal type="string" pos:start="470:34" pos:end="470:60">"Unsupported qop value: %s"</literal></expr></argument>, <argument pos:start="470:63" pos:end="470:67"><expr pos:start="470:63" pos:end="470:67"><name pos:start="470:63" pos:end="470:67">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="471:19" pos:end="479:17">else <block pos:start="471:24" pos:end="479:17">{<block_content pos:start="472:21" pos:end="478:21">
                    <expr_stmt pos:start="472:21" pos:end="472:94"><expr pos:start="472:21" pos:end="472:93"><name pos:start="472:21" pos:end="472:28">safec_rc</name> <operator pos:start="472:30" pos:end="472:30">=</operator> <call pos:start="472:32" pos:end="472:93"><name pos:start="472:32" pos:end="472:39">memcmp_s</name><argument_list pos:start="472:40" pos:end="472:93">(<argument pos:start="472:41" pos:end="472:45"><expr pos:start="472:41" pos:end="472:45"><name pos:start="472:41" pos:end="472:45">value</name></expr></argument>, <argument pos:start="472:48" pos:end="472:61"><expr pos:start="472:48" pos:end="472:61"><sizeof pos:start="472:48" pos:end="472:61">sizeof<argument_list pos:start="472:54" pos:end="472:61">(<argument pos:start="472:55" pos:end="472:60"><expr pos:start="472:55" pos:end="472:60"><literal type="string" pos:start="472:55" pos:end="472:60">"auth"</literal></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="472:64" pos:end="472:69"><expr pos:start="472:64" pos:end="472:69"><literal type="string" pos:start="472:64" pos:end="472:69">"auth"</literal></expr></argument>, <argument pos:start="472:72" pos:end="472:85"><expr pos:start="472:72" pos:end="472:85"><sizeof pos:start="472:72" pos:end="472:85">sizeof<argument_list pos:start="472:78" pos:end="472:85">(<argument pos:start="472:79" pos:end="472:84"><expr pos:start="472:79" pos:end="472:84"><literal type="string" pos:start="472:79" pos:end="472:84">"auth"</literal></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="472:88" pos:end="472:92"><expr pos:start="472:88" pos:end="472:92"><operator pos:start="472:88" pos:end="472:88">&amp;</operator><name pos:start="472:89" pos:end="472:92">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="473:21" pos:end="475:21"><if pos:start="473:21" pos:end="475:21">if <condition pos:start="473:24" pos:end="473:40">(<expr pos:start="473:25" pos:end="473:39"><name pos:start="473:25" pos:end="473:32">safec_rc</name> <operator pos:start="473:34" pos:end="473:35">!=</operator> <name pos:start="473:37" pos:end="473:39">EOK</name></expr>)</condition> <block pos:start="473:42" pos:end="475:21">{<block_content pos:start="474:25" pos:end="474:73">
                        <expr_stmt pos:start="474:25" pos:end="474:73"><expr pos:start="474:25" pos:end="474:72"><call pos:start="474:25" pos:end="474:72"><name pos:start="474:25" pos:end="474:36">EST_LOG_INFO</name><argument_list pos:start="474:37" pos:end="474:72">(<argument pos:start="474:38" pos:end="474:61"><expr pos:start="474:38" pos:end="474:61"><literal type="string" pos:start="474:38" pos:end="474:61">"memcmp_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="474:64" pos:end="474:71"><expr pos:start="474:64" pos:end="474:71"><name pos:start="474:64" pos:end="474:71">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt pos:start="476:21" pos:end="478:21"><if pos:start="476:21" pos:end="478:21">if <condition pos:start="476:24" pos:end="476:50">(<expr pos:start="476:25" pos:end="476:49"><name pos:start="476:25" pos:end="476:28">diff</name> <operator pos:start="476:30" pos:end="476:31">&amp;&amp;</operator> <operator pos:start="476:33" pos:end="476:33">(</operator><name pos:start="476:34" pos:end="476:41">safec_rc</name> <operator pos:start="476:43" pos:end="476:44">==</operator> <name pos:start="476:46" pos:end="476:48">EOK</name><operator pos:start="476:49" pos:end="476:49">)</operator></expr>)</condition> <block pos:start="476:52" pos:end="478:21">{<block_content pos:start="477:25" pos:end="477:73">
                        <expr_stmt pos:start="477:25" pos:end="477:73"><expr pos:start="477:25" pos:end="477:72"><call pos:start="477:25" pos:end="477:72"><name pos:start="477:25" pos:end="477:36">EST_LOG_WARN</name><argument_list pos:start="477:37" pos:end="477:72">(<argument pos:start="477:38" pos:end="477:64"><expr pos:start="477:38" pos:end="477:64"><literal type="string" pos:start="477:38" pos:end="477:64">"Unsupported qop value: %s"</literal></expr></argument>, <argument pos:start="477:67" pos:end="477:71"><expr pos:start="477:67" pos:end="477:71"><name pos:start="477:67" pos:end="477:71">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else pos:start="480:15" pos:end="482:13">else <block pos:start="480:20" pos:end="482:13">{<block_content pos:start="481:17" pos:end="481:43">
                <expr_stmt pos:start="481:17" pos:end="481:43"><expr pos:start="481:17" pos:end="481:42"><name pos:start="481:17" pos:end="481:18">rv</name> <operator pos:start="481:20" pos:end="481:20">=</operator> <name pos:start="481:22" pos:end="481:42">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="483:11" pos:end="491:9">else if <condition pos:start="483:19" pos:end="483:57">(<expr pos:start="483:20" pos:end="483:56"><operator pos:start="483:20" pos:end="483:20">!</operator><call pos:start="483:21" pos:end="483:56"><name pos:start="483:21" pos:end="483:36">est_strcasecmp_s</name><argument_list pos:start="483:37" pos:end="483:56">(<argument pos:start="483:38" pos:end="483:42"><expr pos:start="483:38" pos:end="483:42"><name pos:start="483:38" pos:end="483:42">token</name></expr></argument>, <argument pos:start="483:45" pos:end="483:55"><expr pos:start="483:45" pos:end="483:55"><literal type="string" pos:start="483:45" pos:end="483:55">"algorithm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="483:59" pos:end="491:9">{<block_content pos:start="484:13" pos:end="490:13">
            <if_stmt pos:start="484:13" pos:end="490:13"><if pos:start="484:13" pos:end="490:13">if <condition pos:start="484:16" pos:end="484:76">(<expr pos:start="484:17" pos:end="484:75"><operator pos:start="484:17" pos:end="484:17">(</operator><name pos:start="484:18" pos:end="484:22">value</name> <operator pos:start="484:24" pos:end="484:24">=</operator> <call pos:start="484:26" pos:end="484:40"><name pos:start="484:26" pos:end="484:36">HTNextField</name><argument_list pos:start="484:37" pos:end="484:40">(<argument pos:start="484:38" pos:end="484:39"><expr pos:start="484:38" pos:end="484:39"><operator pos:start="484:38" pos:end="484:38">&amp;</operator><name pos:start="484:39" pos:end="484:39">p</name></expr></argument>)</argument_list></call><operator pos:start="484:41" pos:end="484:41">)</operator> <operator pos:start="484:43" pos:end="484:44">&amp;&amp;</operator> <call pos:start="484:46" pos:end="484:75"><name pos:start="484:46" pos:end="484:61">est_strcasecmp_s</name><argument_list pos:start="484:62" pos:end="484:75">(<argument pos:start="484:63" pos:end="484:67"><expr pos:start="484:63" pos:end="484:67"><name pos:start="484:63" pos:end="484:67">value</name></expr></argument>, <argument pos:start="484:70" pos:end="484:74"><expr pos:start="484:70" pos:end="484:74"><literal type="string" pos:start="484:70" pos:end="484:74">"md5"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="484:78" pos:end="490:13">{<block_content pos:start="485:17" pos:end="489:43">
                <expr_stmt pos:start="485:17" pos:end="485:71"><expr pos:start="485:17" pos:end="485:70"><call pos:start="485:17" pos:end="485:70"><name pos:start="485:17" pos:end="485:27">EST_LOG_ERR</name><argument_list pos:start="485:28" pos:end="485:70">(<argument pos:start="485:29" pos:end="485:62"><expr pos:start="485:29" pos:end="485:62"><literal type="string" pos:start="485:29" pos:end="485:62">"Unsupported digest algorithm: %s"</literal></expr></argument>, <argument pos:start="485:65" pos:end="485:69"><expr pos:start="485:65" pos:end="485:69"><name pos:start="485:65" pos:end="485:69">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="486:17" pos:end="488:19">/*
                 **  We only support MD5 for the moment
                 */</comment>
                <expr_stmt pos:start="489:17" pos:end="489:43"><expr pos:start="489:17" pos:end="489:42"><name pos:start="489:17" pos:end="489:18">rv</name> <operator pos:start="489:20" pos:end="489:20">=</operator> <name pos:start="489:22" pos:end="489:42">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="491:11" pos:end="499:9">else if <condition pos:start="491:19" pos:end="491:53">(<expr pos:start="491:20" pos:end="491:52"><operator pos:start="491:20" pos:end="491:20">!</operator><call pos:start="491:21" pos:end="491:52"><name pos:start="491:21" pos:end="491:36">est_strcasecmp_s</name><argument_list pos:start="491:37" pos:end="491:52">(<argument pos:start="491:38" pos:end="491:42"><expr pos:start="491:38" pos:end="491:42"><name pos:start="491:38" pos:end="491:42">token</name></expr></argument>, <argument pos:start="491:45" pos:end="491:51"><expr pos:start="491:45" pos:end="491:51"><literal type="string" pos:start="491:45" pos:end="491:51">"error"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="491:55" pos:end="499:9">{<block_content pos:start="492:13" pos:end="498:13">
            <if_stmt pos:start="492:13" pos:end="498:13"><if pos:start="492:13" pos:end="496:13">if <condition pos:start="492:16" pos:end="492:42">(<expr pos:start="492:17" pos:end="492:41"><operator pos:start="492:17" pos:end="492:17">(</operator><name pos:start="492:18" pos:end="492:22">value</name> <operator pos:start="492:24" pos:end="492:24">=</operator> <call pos:start="492:26" pos:end="492:40"><name pos:start="492:26" pos:end="492:36">HTNextField</name><argument_list pos:start="492:37" pos:end="492:40">(<argument pos:start="492:38" pos:end="492:39"><expr pos:start="492:38" pos:end="492:39"><operator pos:start="492:38" pos:end="492:38">&amp;</operator><name pos:start="492:39" pos:end="492:39">p</name></expr></argument>)</argument_list></call><operator pos:start="492:41" pos:end="492:41">)</operator></expr>)</condition> <block pos:start="492:44" pos:end="496:13">{<block_content pos:start="493:17" pos:end="495:17">
                <if_stmt pos:start="493:17" pos:end="495:17"><if pos:start="493:17" pos:end="495:17">if <condition pos:start="493:20" pos:end="493:96">(<expr pos:start="493:21" pos:end="493:95"><name pos:start="493:21" pos:end="493:23">EOK</name> <operator pos:start="493:25" pos:end="493:26">!=</operator> <call pos:start="493:28" pos:end="493:95"><name pos:start="493:28" pos:end="493:36">strncpy_s</name><argument_list pos:start="493:37" pos:end="493:95">(<argument pos:start="493:38" pos:end="493:53"><expr pos:start="493:38" pos:end="493:53"><name pos:start="493:38" pos:end="493:53"><name pos:start="493:38" pos:end="493:40">ctx</name><operator pos:start="493:41" pos:end="493:42">-&gt;</operator><name pos:start="493:43" pos:end="493:53">token_error</name></name></expr></argument>, <argument pos:start="493:56" pos:end="493:70"><expr pos:start="493:56" pos:end="493:70"><name pos:start="493:56" pos:end="493:70">MAX_TOKEN_ERROR</name></expr></argument>, <argument pos:start="493:73" pos:end="493:77"><expr pos:start="493:73" pos:end="493:77"><name pos:start="493:73" pos:end="493:77">value</name></expr></argument>, <argument pos:start="493:80" pos:end="493:94"><expr pos:start="493:80" pos:end="493:94"><name pos:start="493:80" pos:end="493:94">MAX_TOKEN_ERROR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="493:98" pos:end="495:17">{<block_content pos:start="494:21" pos:end="494:47">
                    <expr_stmt pos:start="494:21" pos:end="494:47"><expr pos:start="494:21" pos:end="494:46"><name pos:start="494:21" pos:end="494:22">rv</name> <operator pos:start="494:24" pos:end="494:24">=</operator> <name pos:start="494:26" pos:end="494:46">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="496:15" pos:end="498:13">else <block pos:start="496:20" pos:end="498:13">{<block_content pos:start="497:17" pos:end="497:43">
                <expr_stmt pos:start="497:17" pos:end="497:43"><expr pos:start="497:17" pos:end="497:42"><name pos:start="497:17" pos:end="497:18">rv</name> <operator pos:start="497:20" pos:end="497:20">=</operator> <name pos:start="497:22" pos:end="497:42">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="499:11" pos:end="507:9">else if <condition pos:start="499:19" pos:end="499:65">(<expr pos:start="499:20" pos:end="499:64"><operator pos:start="499:20" pos:end="499:20">!</operator><call pos:start="499:21" pos:end="499:64"><name pos:start="499:21" pos:end="499:36">est_strcasecmp_s</name><argument_list pos:start="499:37" pos:end="499:64">(<argument pos:start="499:38" pos:end="499:42"><expr pos:start="499:38" pos:end="499:42"><name pos:start="499:38" pos:end="499:42">token</name></expr></argument>, <argument pos:start="499:45" pos:end="499:63"><expr pos:start="499:45" pos:end="499:63"><literal type="string" pos:start="499:45" pos:end="499:63">"error_description"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="499:67" pos:end="507:9">{<block_content pos:start="500:13" pos:end="506:13">
            <if_stmt pos:start="500:13" pos:end="506:13"><if pos:start="500:13" pos:end="504:13">if <condition pos:start="500:16" pos:end="500:42">(<expr pos:start="500:17" pos:end="500:41"><operator pos:start="500:17" pos:end="500:17">(</operator><name pos:start="500:18" pos:end="500:22">value</name> <operator pos:start="500:24" pos:end="500:24">=</operator> <call pos:start="500:26" pos:end="500:40"><name pos:start="500:26" pos:end="500:36">HTNextField</name><argument_list pos:start="500:37" pos:end="500:40">(<argument pos:start="500:38" pos:end="500:39"><expr pos:start="500:38" pos:end="500:39"><operator pos:start="500:38" pos:end="500:38">&amp;</operator><name pos:start="500:39" pos:end="500:39">p</name></expr></argument>)</argument_list></call><operator pos:start="500:41" pos:end="500:41">)</operator></expr>)</condition> <block pos:start="500:44" pos:end="504:13">{<block_content pos:start="501:17" pos:end="503:17">
                <if_stmt pos:start="501:17" pos:end="503:17"><if pos:start="501:17" pos:end="503:17">if <condition pos:start="501:20" pos:end="501:111">(<expr pos:start="501:21" pos:end="501:110"><name pos:start="501:21" pos:end="501:23">EOK</name> <operator pos:start="501:25" pos:end="501:26">!=</operator> <call pos:start="501:28" pos:end="501:110"><name pos:start="501:28" pos:end="501:36">strncpy_s</name><argument_list pos:start="501:37" pos:end="501:110">(<argument pos:start="501:38" pos:end="501:58"><expr pos:start="501:38" pos:end="501:58"><name pos:start="501:38" pos:end="501:58"><name pos:start="501:38" pos:end="501:40">ctx</name><operator pos:start="501:41" pos:end="501:42">-&gt;</operator><name pos:start="501:43" pos:end="501:58">token_error_desc</name></name></expr></argument>, <argument pos:start="501:61" pos:end="501:80"><expr pos:start="501:61" pos:end="501:80"><name pos:start="501:61" pos:end="501:80">MAX_TOKEN_ERROR_DESC</name></expr></argument>, <argument pos:start="501:83" pos:end="501:87"><expr pos:start="501:83" pos:end="501:87"><name pos:start="501:83" pos:end="501:87">value</name></expr></argument>, <argument pos:start="501:90" pos:end="501:109"><expr pos:start="501:90" pos:end="501:109"><name pos:start="501:90" pos:end="501:109">MAX_TOKEN_ERROR_DESC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="501:113" pos:end="503:17">{<block_content pos:start="502:21" pos:end="502:47">
                    <expr_stmt pos:start="502:21" pos:end="502:47"><expr pos:start="502:21" pos:end="502:46"><name pos:start="502:21" pos:end="502:22">rv</name> <operator pos:start="502:24" pos:end="502:24">=</operator> <name pos:start="502:26" pos:end="502:46">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="504:15" pos:end="506:13">else <block pos:start="504:20" pos:end="506:13">{<block_content pos:start="505:17" pos:end="505:43">
                <expr_stmt pos:start="505:17" pos:end="505:43"><expr pos:start="505:17" pos:end="505:42"><name pos:start="505:17" pos:end="505:18">rv</name> <operator pos:start="505:20" pos:end="505:20">=</operator> <name pos:start="505:22" pos:end="505:42">EST_ERR_INVALID_TOKEN</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="507:11" pos:end="509:9">else <block pos:start="507:16" pos:end="509:9">{<block_content pos:start="508:13" pos:end="508:70">
            <expr_stmt pos:start="508:13" pos:end="508:70"><expr pos:start="508:13" pos:end="508:69"><call pos:start="508:13" pos:end="508:69"><name pos:start="508:13" pos:end="508:24">EST_LOG_WARN</name><argument_list pos:start="508:25" pos:end="508:69">(<argument pos:start="508:26" pos:end="508:61"><expr pos:start="508:26" pos:end="508:61"><literal type="string" pos:start="508:26" pos:end="508:61">"Unsupported auth token ignored: %s"</literal></expr></argument>, <argument pos:start="508:64" pos:end="508:68"><expr pos:start="508:64" pos:end="508:68"><name pos:start="508:64" pos:end="508:68">token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="511:9" pos:end="514:9"><if pos:start="511:9" pos:end="514:9">if <condition pos:start="511:12" pos:end="511:40">(<expr pos:start="511:13" pos:end="511:39"><name pos:start="511:13" pos:end="511:14">rv</name> <operator pos:start="511:16" pos:end="511:17">==</operator> <name pos:start="511:19" pos:end="511:39">EST_ERR_INVALID_TOKEN</name></expr>)</condition> <block pos:start="511:42" pos:end="514:9">{<block_content pos:start="512:13" pos:end="513:18">
            <expr_stmt pos:start="512:13" pos:end="512:49"><expr pos:start="512:13" pos:end="512:48"><call pos:start="512:13" pos:end="512:48"><name pos:start="512:13" pos:end="512:21">memzero_s</name><argument_list pos:start="512:22" pos:end="512:48">(<argument pos:start="512:23" pos:end="512:34"><expr pos:start="512:23" pos:end="512:34"><name pos:start="512:23" pos:end="512:34"><name pos:start="512:23" pos:end="512:25">ctx</name><operator pos:start="512:26" pos:end="512:27">-&gt;</operator><name pos:start="512:28" pos:end="512:34">s_nonce</name></name></expr></argument>, <argument pos:start="512:37" pos:end="512:47"><expr pos:start="512:37" pos:end="512:47"><name pos:start="512:37" pos:end="512:45">MAX_NONCE</name><operator pos:start="512:46" pos:end="512:46">+</operator><literal type="number" pos:start="512:47" pos:end="512:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="513:13" pos:end="513:18">break;</break>
        </block_content>}</block></if></if_stmt>   
    </block_content>}</block></while>
    <return pos:start="516:5" pos:end="516:16">return <expr pos:start="516:12" pos:end="516:15"><operator pos:start="516:12" pos:end="516:12">(</operator><name pos:start="516:13" pos:end="516:14">rv</name><operator pos:start="516:15" pos:end="516:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="518:1" pos:end="524:3">/*
 * This function parses the authentication tokens from
 * the server when the server is requesting HTTP digest
 * authentication.  The tokens are required to generate
 * a valid authentication response in future HTTP
 * requests.
 */</comment>
<function pos:start="525:1" pos:end="570:1"><type pos:start="525:1" pos:end="525:20"><specifier pos:start="525:1" pos:end="525:6">static</specifier> <name pos:start="525:8" pos:end="525:18">HTTP_HEADER</name> <modifier pos:start="525:20" pos:end="525:20">*</modifier></type> <name pos:start="525:22" pos:end="525:39">parse_http_headers</name> <parameter_list pos:start="525:41" pos:end="525:79">(<parameter pos:start="525:42" pos:end="525:60"><decl pos:start="525:42" pos:end="525:60"><type pos:start="525:42" pos:end="525:60"><name pos:start="525:42" pos:end="525:49">unsigned</name> <name pos:start="525:51" pos:end="525:54">char</name> <modifier pos:start="525:56" pos:end="525:56">*</modifier><modifier pos:start="525:57" pos:end="525:57">*</modifier></type><name pos:start="525:58" pos:end="525:60">buf</name></decl></parameter>, <parameter pos:start="525:63" pos:end="525:78"><decl pos:start="525:63" pos:end="525:78"><type pos:start="525:63" pos:end="525:78"><name pos:start="525:63" pos:end="525:65">int</name> <modifier pos:start="525:67" pos:end="525:67">*</modifier></type><name pos:start="525:68" pos:end="525:78">num_headers</name></decl></parameter>)</parameter_list>
<block pos:start="526:1" pos:end="570:1">{<block_content pos:start="527:5" pos:end="569:18">
    <decl_stmt pos:start="527:5" pos:end="527:10"><decl pos:start="527:5" pos:end="527:9"><type pos:start="527:5" pos:end="527:7"><name pos:start="527:5" pos:end="527:7">int</name></type> <name pos:start="527:9" pos:end="527:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="528:5" pos:end="528:22"><decl pos:start="528:5" pos:end="528:21"><type pos:start="528:5" pos:end="528:17"><name pos:start="528:5" pos:end="528:15">HTTP_HEADER</name> <modifier pos:start="528:17" pos:end="528:17">*</modifier></type><name pos:start="528:18" pos:end="528:21">hdrs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="529:5" pos:end="529:18"><decl pos:start="529:5" pos:end="529:17"><type pos:start="529:5" pos:end="529:10"><name pos:start="529:5" pos:end="529:8">char</name> <modifier pos:start="529:10" pos:end="529:10">*</modifier></type><name pos:start="529:11" pos:end="529:17">hdr_end</name></decl>;</decl_stmt>
    <decl_stmt pos:start="530:5" pos:end="530:21"><decl pos:start="530:5" pos:end="530:20"><type pos:start="530:5" pos:end="530:11"><name pos:start="530:5" pos:end="530:11">errno_t</name></type> <name pos:start="530:13" pos:end="530:20">safec_rc</name></decl>;</decl_stmt>

    <expr_stmt pos:start="532:5" pos:end="532:21"><expr pos:start="532:5" pos:end="532:20"><operator pos:start="532:5" pos:end="532:5">*</operator><name pos:start="532:6" pos:end="532:16">num_headers</name> <operator pos:start="532:18" pos:end="532:18">=</operator> <literal type="number" pos:start="532:20" pos:end="532:20">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="533:5" pos:end="533:53"><expr pos:start="533:5" pos:end="533:52"><name pos:start="533:5" pos:end="533:8">hdrs</name> <operator pos:start="533:10" pos:end="533:10">=</operator> <call pos:start="533:12" pos:end="533:52"><name pos:start="533:12" pos:end="533:17">malloc</name><argument_list pos:start="533:18" pos:end="533:52">(<argument pos:start="533:19" pos:end="533:51"><expr pos:start="533:19" pos:end="533:51"><sizeof pos:start="533:19" pos:end="533:37">sizeof<argument_list pos:start="533:25" pos:end="533:37">(<argument pos:start="533:26" pos:end="533:36"><expr pos:start="533:26" pos:end="533:36"><name pos:start="533:26" pos:end="533:36">HTTP_HEADER</name></expr></argument>)</argument_list></sizeof> <operator pos:start="533:39" pos:end="533:39">*</operator> <name pos:start="533:41" pos:end="533:51">MAX_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="534:5" pos:end="537:5"><if pos:start="534:5" pos:end="537:5">if <condition pos:start="534:8" pos:end="534:14">(<expr pos:start="534:9" pos:end="534:13"><operator pos:start="534:9" pos:end="534:9">!</operator><name pos:start="534:10" pos:end="534:13">hdrs</name></expr>)</condition> <block pos:start="534:16" pos:end="537:5">{<block_content pos:start="535:9" pos:end="536:22">
        <expr_stmt pos:start="535:9" pos:end="535:38"><expr pos:start="535:9" pos:end="535:37"><call pos:start="535:9" pos:end="535:37"><name pos:start="535:9" pos:end="535:19">EST_LOG_ERR</name><argument_list pos:start="535:20" pos:end="535:37">(<argument pos:start="535:21" pos:end="535:36"><expr pos:start="535:21" pos:end="535:36"><literal type="string" pos:start="535:21" pos:end="535:36">"malloc failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="536:9" pos:end="536:22">return <expr pos:start="536:16" pos:end="536:21"><operator pos:start="536:16" pos:end="536:16">(</operator><name pos:start="536:17" pos:end="536:20">NULL</name><operator pos:start="536:21" pos:end="536:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="539:5" pos:end="541:7">/*
     * Find offset of header deliminter
     */</comment>
    <expr_stmt pos:start="542:5" pos:end="543:60"><expr pos:start="542:5" pos:end="543:59"><name pos:start="542:5" pos:end="542:12">safec_rc</name> <operator pos:start="542:14" pos:end="542:14">=</operator> <call pos:start="542:16" pos:end="543:59"><name pos:start="542:16" pos:end="542:23">strstr_s</name><argument_list pos:start="542:24" pos:end="543:59">(<argument pos:start="542:25" pos:end="542:37"><expr pos:start="542:25" pos:end="542:37"><operator pos:start="542:25" pos:end="542:25">(</operator><name pos:start="542:26" pos:end="542:29">char</name> <operator pos:start="542:31" pos:end="542:31">*</operator><operator pos:start="542:32" pos:end="542:32">)</operator> <operator pos:start="542:34" pos:end="542:34">*</operator><name pos:start="542:35" pos:end="542:37">buf</name></expr></argument>, <argument pos:start="542:40" pos:end="542:78"><expr pos:start="542:40" pos:end="542:78"><call pos:start="542:40" pos:end="542:78"><name pos:start="542:40" pos:end="542:48">strnlen_s</name><argument_list pos:start="542:49" pos:end="542:78">(<argument pos:start="542:50" pos:end="542:62"><expr pos:start="542:50" pos:end="542:62"><operator pos:start="542:50" pos:end="542:50">(</operator><name pos:start="542:51" pos:end="542:54">char</name> <operator pos:start="542:56" pos:end="542:56">*</operator><operator pos:start="542:57" pos:end="542:57">)</operator> <operator pos:start="542:59" pos:end="542:59">*</operator><name pos:start="542:60" pos:end="542:62">buf</name></expr></argument>, <argument pos:start="542:65" pos:end="542:77"><expr pos:start="542:65" pos:end="542:77"><name pos:start="542:65" pos:end="542:77">RSIZE_MAX_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument pos:start="543:13" pos:end="543:22"><expr pos:start="543:13" pos:end="543:22"><literal type="string" pos:start="543:13" pos:end="543:22">"\r\n\r\n"</literal></expr></argument>, <argument pos:start="543:25" pos:end="543:48"><expr pos:start="543:25" pos:end="543:48"><name pos:start="543:25" pos:end="543:48">MAX_HEADER_DELIMITER_LEN</name></expr></argument>, <argument pos:start="543:51" pos:end="543:58"><expr pos:start="543:51" pos:end="543:58"><operator pos:start="543:51" pos:end="543:51">&amp;</operator><name pos:start="543:52" pos:end="543:58">hdr_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="545:5" pos:end="547:5"><if pos:start="545:5" pos:end="547:5">if <condition pos:start="545:8" pos:end="545:24">(<expr pos:start="545:9" pos:end="545:23"><name pos:start="545:9" pos:end="545:16">safec_rc</name> <operator pos:start="545:18" pos:end="545:19">!=</operator> <name pos:start="545:21" pos:end="545:23">EOK</name></expr>)</condition> <block pos:start="545:26" pos:end="547:5">{<block_content pos:start="546:9" pos:end="546:57">
        <expr_stmt pos:start="546:9" pos:end="546:57"><expr pos:start="546:9" pos:end="546:56"><call pos:start="546:9" pos:end="546:56"><name pos:start="546:9" pos:end="546:20">EST_LOG_INFO</name><argument_list pos:start="546:21" pos:end="546:56">(<argument pos:start="546:22" pos:end="546:45"><expr pos:start="546:22" pos:end="546:45"><literal type="string" pos:start="546:22" pos:end="546:45">"strstr_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="546:48" pos:end="546:55"><expr pos:start="546:48" pos:end="546:55"><name pos:start="546:48" pos:end="546:55">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="549:5" pos:end="551:7">/*
     * Skip the first line
     */</comment>
    <expr_stmt pos:start="552:5" pos:end="552:31"><expr pos:start="552:5" pos:end="552:30"><call pos:start="552:5" pos:end="552:30"><name pos:start="552:5" pos:end="552:8">skip</name><argument_list pos:start="552:9" pos:end="552:30">(<argument pos:start="552:10" pos:end="552:21"><expr pos:start="552:10" pos:end="552:21"><operator pos:start="552:10" pos:end="552:10">(</operator><name pos:start="552:11" pos:end="552:14">char</name> <operator pos:start="552:16" pos:end="552:16">*</operator><operator pos:start="552:17" pos:end="552:17">*</operator><operator pos:start="552:18" pos:end="552:18">)</operator><name pos:start="552:19" pos:end="552:21">buf</name></expr></argument>, <argument pos:start="552:24" pos:end="552:29"><expr pos:start="552:24" pos:end="552:29"><literal type="string" pos:start="552:24" pos:end="552:29">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="554:5" pos:end="567:5">for <control pos:start="554:9" pos:end="554:37">(<init pos:start="554:10" pos:end="554:15"><expr pos:start="554:10" pos:end="554:14"><name pos:start="554:10" pos:end="554:10">i</name> <operator pos:start="554:12" pos:end="554:12">=</operator> <literal type="number" pos:start="554:14" pos:end="554:14">0</literal></expr>;</init> <condition pos:start="554:17" pos:end="554:32"><expr pos:start="554:17" pos:end="554:31"><name pos:start="554:17" pos:end="554:17">i</name> <operator pos:start="554:19" pos:end="554:19">&lt;</operator> <name pos:start="554:21" pos:end="554:31">MAX_HEADERS</name></expr>;</condition> <incr pos:start="554:34" pos:end="554:36"><expr pos:start="554:34" pos:end="554:36"><name pos:start="554:34" pos:end="554:34">i</name><operator pos:start="554:35" pos:end="554:36">++</operator></expr></incr>)</control> <block pos:start="554:39" pos:end="567:5">{<block_content pos:start="555:9" pos:end="566:9">
        <expr_stmt pos:start="555:9" pos:end="555:62"><expr pos:start="555:9" pos:end="555:61"><name pos:start="555:9" pos:end="555:15"><name pos:start="555:9" pos:end="555:12">hdrs</name><index pos:start="555:13" pos:end="555:15">[<expr pos:start="555:14" pos:end="555:14"><name pos:start="555:14" pos:end="555:14">i</name></expr>]</index></name><operator pos:start="555:16" pos:end="555:16">.</operator><name pos:start="555:17" pos:end="555:20">name</name> <operator pos:start="555:22" pos:end="555:22">=</operator> <call pos:start="555:24" pos:end="555:61"><name pos:start="555:24" pos:end="555:34">skip_quoted</name><argument_list pos:start="555:35" pos:end="555:61">(<argument pos:start="555:36" pos:end="555:47"><expr pos:start="555:36" pos:end="555:47"><operator pos:start="555:36" pos:end="555:36">(</operator><name pos:start="555:37" pos:end="555:40">char</name> <operator pos:start="555:42" pos:end="555:42">*</operator><operator pos:start="555:43" pos:end="555:43">*</operator><operator pos:start="555:44" pos:end="555:44">)</operator><name pos:start="555:45" pos:end="555:47">buf</name></expr></argument>, <argument pos:start="555:50" pos:end="555:52"><expr pos:start="555:50" pos:end="555:52"><literal type="string" pos:start="555:50" pos:end="555:52">":"</literal></expr></argument>, <argument pos:start="555:55" pos:end="555:57"><expr pos:start="555:55" pos:end="555:57"><literal type="string" pos:start="555:55" pos:end="555:57">" "</literal></expr></argument>, <argument pos:start="555:60" pos:end="555:60"><expr pos:start="555:60" pos:end="555:60"><literal type="number" pos:start="555:60" pos:end="555:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="556:9" pos:end="556:51"><expr pos:start="556:9" pos:end="556:50"><name pos:start="556:9" pos:end="556:15"><name pos:start="556:9" pos:end="556:12">hdrs</name><index pos:start="556:13" pos:end="556:15">[<expr pos:start="556:14" pos:end="556:14"><name pos:start="556:14" pos:end="556:14">i</name></expr>]</index></name><operator pos:start="556:16" pos:end="556:16">.</operator><name pos:start="556:17" pos:end="556:21">value</name> <operator pos:start="556:23" pos:end="556:23">=</operator> <call pos:start="556:25" pos:end="556:50"><name pos:start="556:25" pos:end="556:28">skip</name><argument_list pos:start="556:29" pos:end="556:50">(<argument pos:start="556:30" pos:end="556:41"><expr pos:start="556:30" pos:end="556:41"><operator pos:start="556:30" pos:end="556:30">(</operator><name pos:start="556:31" pos:end="556:34">char</name> <operator pos:start="556:36" pos:end="556:36">*</operator><operator pos:start="556:37" pos:end="556:37">*</operator><operator pos:start="556:38" pos:end="556:38">)</operator><name pos:start="556:39" pos:end="556:41">buf</name></expr></argument>, <argument pos:start="556:44" pos:end="556:49"><expr pos:start="556:44" pos:end="556:49"><literal type="string" pos:start="556:44" pos:end="556:49">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="557:9" pos:end="557:23"><expr pos:start="557:9" pos:end="557:22"><call pos:start="557:9" pos:end="557:22"><name pos:start="557:9" pos:end="557:14">fflush</name><argument_list pos:start="557:15" pos:end="557:22">(<argument pos:start="557:16" pos:end="557:21"><expr pos:start="557:16" pos:end="557:21"><name pos:start="557:16" pos:end="557:21">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="558:9" pos:end="558:80"><expr pos:start="558:9" pos:end="558:79"><call pos:start="558:9" pos:end="558:79"><name pos:start="558:9" pos:end="558:20">EST_LOG_INFO</name><argument_list pos:start="558:21" pos:end="558:79">(<argument pos:start="558:22" pos:end="558:49"><expr pos:start="558:22" pos:end="558:49"><literal type="string" pos:start="558:22" pos:end="558:49">"Found HTTP header -&gt; %s:%s"</literal></expr></argument>, <argument pos:start="558:52" pos:end="558:63"><expr pos:start="558:52" pos:end="558:63"><name pos:start="558:52" pos:end="558:58"><name pos:start="558:52" pos:end="558:55">hdrs</name><index pos:start="558:56" pos:end="558:58">[<expr pos:start="558:57" pos:end="558:57"><name pos:start="558:57" pos:end="558:57">i</name></expr>]</index></name><operator pos:start="558:59" pos:end="558:59">.</operator><name pos:start="558:60" pos:end="558:63">name</name></expr></argument>, <argument pos:start="558:66" pos:end="558:78"><expr pos:start="558:66" pos:end="558:78"><name pos:start="558:66" pos:end="558:72"><name pos:start="558:66" pos:end="558:69">hdrs</name><index pos:start="558:70" pos:end="558:72">[<expr pos:start="558:71" pos:end="558:71"><name pos:start="558:71" pos:end="558:71">i</name></expr>]</index></name><operator pos:start="558:73" pos:end="558:73">.</operator><name pos:start="558:74" pos:end="558:78">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="559:9" pos:end="559:23"><expr pos:start="559:9" pos:end="559:22"><call pos:start="559:9" pos:end="559:22"><name pos:start="559:9" pos:end="559:14">fflush</name><argument_list pos:start="559:15" pos:end="559:22">(<argument pos:start="559:16" pos:end="559:21"><expr pos:start="559:16" pos:end="559:21"><name pos:start="559:16" pos:end="559:21">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="560:9" pos:end="562:9"><if pos:start="560:9" pos:end="562:9">if <condition pos:start="560:12" pos:end="560:36">(<expr pos:start="560:13" pos:end="560:35"><name pos:start="560:13" pos:end="560:19"><name pos:start="560:13" pos:end="560:16">hdrs</name><index pos:start="560:17" pos:end="560:19">[<expr pos:start="560:18" pos:end="560:18"><name pos:start="560:18" pos:end="560:18">i</name></expr>]</index></name><operator pos:start="560:20" pos:end="560:20">.</operator><name pos:start="560:21" pos:end="560:27"><name pos:start="560:21" pos:end="560:24">name</name><index pos:start="560:25" pos:end="560:27">[<expr pos:start="560:26" pos:end="560:26"><literal type="number" pos:start="560:26" pos:end="560:26">0</literal></expr>]</index></name> <operator pos:start="560:29" pos:end="560:30">==</operator> <literal type="char" pos:start="560:32" pos:end="560:35">'\0'</literal></expr>)</condition> <block pos:start="560:38" pos:end="562:9">{<block_content pos:start="561:13" pos:end="561:18">
            <break pos:start="561:13" pos:end="561:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="563:9" pos:end="563:29"><expr pos:start="563:9" pos:end="563:28"><operator pos:start="563:9" pos:end="563:9">*</operator><name pos:start="563:10" pos:end="563:20">num_headers</name> <operator pos:start="563:22" pos:end="563:22">=</operator> <name pos:start="563:24" pos:end="563:24">i</name> <operator pos:start="563:26" pos:end="563:26">+</operator> <literal type="number" pos:start="563:28" pos:end="563:28">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="564:9" pos:end="566:9"><if pos:start="564:9" pos:end="566:9">if <condition pos:start="564:12" pos:end="564:46">(<expr pos:start="564:13" pos:end="564:45"><operator pos:start="564:13" pos:end="564:13">(</operator><operator pos:start="564:14" pos:end="564:14">*</operator><name pos:start="564:15" pos:end="564:17">buf</name><operator pos:start="564:18" pos:end="564:18">)</operator> <operator pos:start="564:20" pos:end="564:20">&gt;</operator> <operator pos:start="564:22" pos:end="564:22">(</operator><name pos:start="564:23" pos:end="564:30">unsigned</name> <name pos:start="564:32" pos:end="564:35">char</name> <operator pos:start="564:37" pos:end="564:37">*</operator><operator pos:start="564:38" pos:end="564:38">)</operator><name pos:start="564:39" pos:end="564:45">hdr_end</name></expr>)</condition> <block pos:start="564:48" pos:end="566:9">{<block_content pos:start="565:13" pos:end="565:18">
            <break pos:start="565:13" pos:end="565:18">break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="568:5" pos:end="568:58"><expr pos:start="568:5" pos:end="568:57"><call pos:start="568:5" pos:end="568:57"><name pos:start="568:5" pos:end="568:16">EST_LOG_INFO</name><argument_list pos:start="568:17" pos:end="568:57">(<argument pos:start="568:18" pos:end="568:42"><expr pos:start="568:18" pos:end="568:42"><literal type="string" pos:start="568:18" pos:end="568:42">"Found %d HTTP headers\n"</literal></expr></argument>, <argument pos:start="568:45" pos:end="568:56"><expr pos:start="568:45" pos:end="568:56"><operator pos:start="568:45" pos:end="568:45">*</operator><name pos:start="568:46" pos:end="568:56">num_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="569:5" pos:end="569:18">return <expr pos:start="569:12" pos:end="569:17"><operator pos:start="569:12" pos:end="569:12">(</operator><name pos:start="569:13" pos:end="569:16">hdrs</name><operator pos:start="569:17" pos:end="569:17">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="571:1" pos:end="577:3">/*
 * This function parses the HTTP status code
 * in the first header.  Only a handful of codes are
 * handled by EST.  We are not a full HTTP stack.  Any
 * unrecognized codes will result in an error.
 * Note that HTTP 1.1 is expected.
 */</comment>
<function pos:start="578:1" pos:end="605:1"><type pos:start="578:1" pos:end="578:10"><specifier pos:start="578:1" pos:end="578:6">static</specifier> <name pos:start="578:8" pos:end="578:10">int</name></type> <name pos:start="578:12" pos:end="578:44">est_io_parse_response_status_code</name> <parameter_list pos:start="578:46" pos:end="578:65">(<parameter pos:start="578:47" pos:end="578:64"><decl pos:start="578:47" pos:end="578:64"><type pos:start="578:47" pos:end="578:61"><name pos:start="578:47" pos:end="578:54">unsigned</name> <name pos:start="578:56" pos:end="578:59">char</name> <modifier pos:start="578:61" pos:end="578:61">*</modifier></type><name pos:start="578:62" pos:end="578:64">buf</name></decl></parameter>)</parameter_list>
<block pos:start="579:1" pos:end="605:1">{<block_content pos:start="580:5" pos:end="604:5">
    <if_stmt pos:start="580:5" pos:end="604:5"><if pos:start="580:5" pos:end="583:5">if <condition pos:start="580:8" pos:end="581:71">(<expr pos:start="580:9" pos:end="581:70"><operator pos:start="580:9" pos:end="580:9">!</operator><call pos:start="580:10" pos:end="581:70"><name pos:start="580:10" pos:end="580:16">strncmp</name><argument_list pos:start="580:17" pos:end="581:70">(<argument pos:start="580:18" pos:end="580:34"><expr pos:start="580:18" pos:end="580:34"><operator pos:start="580:18" pos:end="580:18">(</operator><specifier pos:start="580:19" pos:end="580:23">const</specifier> <name pos:start="580:25" pos:end="580:28">char</name> <operator pos:start="580:30" pos:end="580:30">*</operator><operator pos:start="580:31" pos:end="580:31">)</operator><name pos:start="580:32" pos:end="580:34">buf</name></expr></argument>, <argument pos:start="580:37" pos:end="580:52"><expr pos:start="580:37" pos:end="580:52"><name pos:start="580:37" pos:end="580:52">EST_HTTP_HDR_200</name></expr></argument>,
                        <argument pos:start="581:25" pos:end="581:69"><expr pos:start="581:25" pos:end="581:69"><call pos:start="581:25" pos:end="581:69"><name pos:start="581:25" pos:end="581:33">strnlen_s</name><argument_list pos:start="581:34" pos:end="581:69">(<argument pos:start="581:35" pos:end="581:50"><expr pos:start="581:35" pos:end="581:50"><name pos:start="581:35" pos:end="581:50">EST_HTTP_HDR_200</name></expr></argument>, <argument pos:start="581:53" pos:end="581:68"><expr pos:start="581:53" pos:end="581:68"><name pos:start="581:53" pos:end="581:68">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="581:73" pos:end="583:5">{<block_content pos:start="582:9" pos:end="582:19">
        <return pos:start="582:9" pos:end="582:19">return <expr pos:start="582:16" pos:end="582:18"><literal type="number" pos:start="582:16" pos:end="582:18">200</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="583:7" pos:end="586:5">else if <condition pos:start="583:15" pos:end="584:71">(<expr pos:start="583:16" pos:end="584:70"><operator pos:start="583:16" pos:end="583:16">!</operator><call pos:start="583:17" pos:end="584:70"><name pos:start="583:17" pos:end="583:23">strncmp</name><argument_list pos:start="583:24" pos:end="584:70">(<argument pos:start="583:25" pos:end="583:41"><expr pos:start="583:25" pos:end="583:41"><operator pos:start="583:25" pos:end="583:25">(</operator><specifier pos:start="583:26" pos:end="583:30">const</specifier> <name pos:start="583:32" pos:end="583:35">char</name> <operator pos:start="583:37" pos:end="583:37">*</operator><operator pos:start="583:38" pos:end="583:38">)</operator><name pos:start="583:39" pos:end="583:41">buf</name></expr></argument>, <argument pos:start="583:44" pos:end="583:59"><expr pos:start="583:44" pos:end="583:59"><name pos:start="583:44" pos:end="583:59">EST_HTTP_HDR_202</name></expr></argument>,
                        <argument pos:start="584:25" pos:end="584:69"><expr pos:start="584:25" pos:end="584:69"><call pos:start="584:25" pos:end="584:69"><name pos:start="584:25" pos:end="584:33">strnlen_s</name><argument_list pos:start="584:34" pos:end="584:69">(<argument pos:start="584:35" pos:end="584:50"><expr pos:start="584:35" pos:end="584:50"><name pos:start="584:35" pos:end="584:50">EST_HTTP_HDR_202</name></expr></argument>, <argument pos:start="584:53" pos:end="584:68"><expr pos:start="584:53" pos:end="584:68"><name pos:start="584:53" pos:end="584:68">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="584:73" pos:end="586:5">{<block_content pos:start="585:9" pos:end="585:19">
        <return pos:start="585:9" pos:end="585:19">return <expr pos:start="585:16" pos:end="585:18"><literal type="number" pos:start="585:16" pos:end="585:18">202</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="586:7" pos:end="589:5">else if <condition pos:start="586:15" pos:end="587:71">(<expr pos:start="586:16" pos:end="587:70"><operator pos:start="586:16" pos:end="586:16">!</operator><call pos:start="586:17" pos:end="587:70"><name pos:start="586:17" pos:end="586:23">strncmp</name><argument_list pos:start="586:24" pos:end="587:70">(<argument pos:start="586:25" pos:end="586:41"><expr pos:start="586:25" pos:end="586:41"><operator pos:start="586:25" pos:end="586:25">(</operator><specifier pos:start="586:26" pos:end="586:30">const</specifier> <name pos:start="586:32" pos:end="586:35">char</name> <operator pos:start="586:37" pos:end="586:37">*</operator><operator pos:start="586:38" pos:end="586:38">)</operator><name pos:start="586:39" pos:end="586:41">buf</name></expr></argument>, <argument pos:start="586:44" pos:end="586:59"><expr pos:start="586:44" pos:end="586:59"><name pos:start="586:44" pos:end="586:59">EST_HTTP_HDR_204</name></expr></argument>,
                        <argument pos:start="587:25" pos:end="587:69"><expr pos:start="587:25" pos:end="587:69"><call pos:start="587:25" pos:end="587:69"><name pos:start="587:25" pos:end="587:33">strnlen_s</name><argument_list pos:start="587:34" pos:end="587:69">(<argument pos:start="587:35" pos:end="587:50"><expr pos:start="587:35" pos:end="587:50"><name pos:start="587:35" pos:end="587:50">EST_HTTP_HDR_204</name></expr></argument>, <argument pos:start="587:53" pos:end="587:68"><expr pos:start="587:53" pos:end="587:68"><name pos:start="587:53" pos:end="587:68">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="587:73" pos:end="589:5">{<block_content pos:start="588:9" pos:end="588:19">
        <return pos:start="588:9" pos:end="588:19">return <expr pos:start="588:16" pos:end="588:18"><literal type="number" pos:start="588:16" pos:end="588:18">204</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="589:7" pos:end="592:5">else if <condition pos:start="589:15" pos:end="590:71">(<expr pos:start="589:16" pos:end="590:70"><operator pos:start="589:16" pos:end="589:16">!</operator><call pos:start="589:17" pos:end="590:70"><name pos:start="589:17" pos:end="589:23">strncmp</name><argument_list pos:start="589:24" pos:end="590:70">(<argument pos:start="589:25" pos:end="589:41"><expr pos:start="589:25" pos:end="589:41"><operator pos:start="589:25" pos:end="589:25">(</operator><specifier pos:start="589:26" pos:end="589:30">const</specifier> <name pos:start="589:32" pos:end="589:35">char</name> <operator pos:start="589:37" pos:end="589:37">*</operator><operator pos:start="589:38" pos:end="589:38">)</operator><name pos:start="589:39" pos:end="589:41">buf</name></expr></argument>, <argument pos:start="589:44" pos:end="589:59"><expr pos:start="589:44" pos:end="589:59"><name pos:start="589:44" pos:end="589:59">EST_HTTP_HDR_400</name></expr></argument>,
                        <argument pos:start="590:25" pos:end="590:69"><expr pos:start="590:25" pos:end="590:69"><call pos:start="590:25" pos:end="590:69"><name pos:start="590:25" pos:end="590:33">strnlen_s</name><argument_list pos:start="590:34" pos:end="590:69">(<argument pos:start="590:35" pos:end="590:50"><expr pos:start="590:35" pos:end="590:50"><name pos:start="590:35" pos:end="590:50">EST_HTTP_HDR_400</name></expr></argument>, <argument pos:start="590:53" pos:end="590:68"><expr pos:start="590:53" pos:end="590:68"><name pos:start="590:53" pos:end="590:68">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="590:73" pos:end="592:5">{<block_content pos:start="591:9" pos:end="591:19">
        <return pos:start="591:9" pos:end="591:19">return <expr pos:start="591:16" pos:end="591:18"><literal type="number" pos:start="591:16" pos:end="591:18">400</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="592:7" pos:end="595:5">else if <condition pos:start="592:15" pos:end="593:71">(<expr pos:start="592:16" pos:end="593:70"><operator pos:start="592:16" pos:end="592:16">!</operator><call pos:start="592:17" pos:end="593:70"><name pos:start="592:17" pos:end="592:23">strncmp</name><argument_list pos:start="592:24" pos:end="593:70">(<argument pos:start="592:25" pos:end="592:41"><expr pos:start="592:25" pos:end="592:41"><operator pos:start="592:25" pos:end="592:25">(</operator><specifier pos:start="592:26" pos:end="592:30">const</specifier> <name pos:start="592:32" pos:end="592:35">char</name> <operator pos:start="592:37" pos:end="592:37">*</operator><operator pos:start="592:38" pos:end="592:38">)</operator><name pos:start="592:39" pos:end="592:41">buf</name></expr></argument>, <argument pos:start="592:44" pos:end="592:59"><expr pos:start="592:44" pos:end="592:59"><name pos:start="592:44" pos:end="592:59">EST_HTTP_HDR_401</name></expr></argument>,
                        <argument pos:start="593:25" pos:end="593:69"><expr pos:start="593:25" pos:end="593:69"><call pos:start="593:25" pos:end="593:69"><name pos:start="593:25" pos:end="593:33">strnlen_s</name><argument_list pos:start="593:34" pos:end="593:69">(<argument pos:start="593:35" pos:end="593:50"><expr pos:start="593:35" pos:end="593:50"><name pos:start="593:35" pos:end="593:50">EST_HTTP_HDR_401</name></expr></argument>, <argument pos:start="593:53" pos:end="593:68"><expr pos:start="593:53" pos:end="593:68"><name pos:start="593:53" pos:end="593:68">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="593:73" pos:end="595:5">{<block_content pos:start="594:9" pos:end="594:19">
        <return pos:start="594:9" pos:end="594:19">return <expr pos:start="594:16" pos:end="594:18"><literal type="number" pos:start="594:16" pos:end="594:18">401</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="595:7" pos:end="598:5">else if <condition pos:start="595:15" pos:end="596:71">(<expr pos:start="595:16" pos:end="596:70"><operator pos:start="595:16" pos:end="595:16">!</operator><call pos:start="595:17" pos:end="596:70"><name pos:start="595:17" pos:end="595:23">strncmp</name><argument_list pos:start="595:24" pos:end="596:70">(<argument pos:start="595:25" pos:end="595:41"><expr pos:start="595:25" pos:end="595:41"><operator pos:start="595:25" pos:end="595:25">(</operator><specifier pos:start="595:26" pos:end="595:30">const</specifier> <name pos:start="595:32" pos:end="595:35">char</name> <operator pos:start="595:37" pos:end="595:37">*</operator><operator pos:start="595:38" pos:end="595:38">)</operator><name pos:start="595:39" pos:end="595:41">buf</name></expr></argument>, <argument pos:start="595:44" pos:end="595:59"><expr pos:start="595:44" pos:end="595:59"><name pos:start="595:44" pos:end="595:59">EST_HTTP_HDR_404</name></expr></argument>,
                        <argument pos:start="596:25" pos:end="596:69"><expr pos:start="596:25" pos:end="596:69"><call pos:start="596:25" pos:end="596:69"><name pos:start="596:25" pos:end="596:33">strnlen_s</name><argument_list pos:start="596:34" pos:end="596:69">(<argument pos:start="596:35" pos:end="596:50"><expr pos:start="596:35" pos:end="596:50"><name pos:start="596:35" pos:end="596:50">EST_HTTP_HDR_404</name></expr></argument>, <argument pos:start="596:53" pos:end="596:68"><expr pos:start="596:53" pos:end="596:68"><name pos:start="596:53" pos:end="596:68">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="596:73" pos:end="598:5">{<block_content pos:start="597:9" pos:end="597:19">
        <return pos:start="597:9" pos:end="597:19">return <expr pos:start="597:16" pos:end="597:18"><literal type="number" pos:start="597:16" pos:end="597:18">404</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="598:7" pos:end="601:5">else if <condition pos:start="598:15" pos:end="599:71">(<expr pos:start="598:16" pos:end="599:70"><operator pos:start="598:16" pos:end="598:16">!</operator><call pos:start="598:17" pos:end="599:70"><name pos:start="598:17" pos:end="598:23">strncmp</name><argument_list pos:start="598:24" pos:end="599:70">(<argument pos:start="598:25" pos:end="598:41"><expr pos:start="598:25" pos:end="598:41"><operator pos:start="598:25" pos:end="598:25">(</operator><specifier pos:start="598:26" pos:end="598:30">const</specifier> <name pos:start="598:32" pos:end="598:35">char</name> <operator pos:start="598:37" pos:end="598:37">*</operator><operator pos:start="598:38" pos:end="598:38">)</operator><name pos:start="598:39" pos:end="598:41">buf</name></expr></argument>, <argument pos:start="598:44" pos:end="598:59"><expr pos:start="598:44" pos:end="598:59"><name pos:start="598:44" pos:end="598:59">EST_HTTP_HDR_423</name></expr></argument>,
                        <argument pos:start="599:25" pos:end="599:69"><expr pos:start="599:25" pos:end="599:69"><call pos:start="599:25" pos:end="599:69"><name pos:start="599:25" pos:end="599:33">strnlen_s</name><argument_list pos:start="599:34" pos:end="599:69">(<argument pos:start="599:35" pos:end="599:50"><expr pos:start="599:35" pos:end="599:50"><name pos:start="599:35" pos:end="599:50">EST_HTTP_HDR_423</name></expr></argument>, <argument pos:start="599:53" pos:end="599:68"><expr pos:start="599:53" pos:end="599:68"><name pos:start="599:53" pos:end="599:68">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="599:73" pos:end="601:5">{<block_content pos:start="600:9" pos:end="600:19">
        <return pos:start="600:9" pos:end="600:19">return <expr pos:start="600:16" pos:end="600:18"><literal type="number" pos:start="600:16" pos:end="600:18">423</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="601:7" pos:end="604:5">else <block pos:start="601:12" pos:end="604:5">{<block_content pos:start="602:9" pos:end="603:18">
        <expr_stmt pos:start="602:9" pos:end="602:55"><expr pos:start="602:9" pos:end="602:54"><call pos:start="602:9" pos:end="602:54"><name pos:start="602:9" pos:end="602:19">EST_LOG_ERR</name><argument_list pos:start="602:20" pos:end="602:54">(<argument pos:start="602:21" pos:end="602:48"><expr pos:start="602:21" pos:end="602:48"><literal type="string" pos:start="602:21" pos:end="602:48">"Unhandled HTTP response %s"</literal></expr></argument>, <argument pos:start="602:51" pos:end="602:53"><expr pos:start="602:51" pos:end="602:53"><name pos:start="602:51" pos:end="602:53">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="603:9" pos:end="603:18">return <expr pos:start="603:16" pos:end="603:17"><operator pos:start="603:16" pos:end="603:16">-</operator><literal type="number" pos:start="603:17" pos:end="603:17">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="606:1" pos:end="613:3">/*
 * This function searches for and processes the WWW-Authenticate header from
 * the server.  The result is the setting of the auth_mode value in the
 * context.  If there is no WWW-Authenticate header, or the values in the
 * header are invalid, it will set the auth_mode to a failure setting.  If
 * there are multiple Authenticate headers, only the first one will be
 * processed.
 */</comment>
<function pos:start="614:1" pos:end="668:1"><type pos:start="614:1" pos:end="614:11"><specifier pos:start="614:1" pos:end="614:6">static</specifier> <name pos:start="614:8" pos:end="614:11">void</name></type> <name pos:start="614:13" pos:end="614:42">est_io_parse_http_auth_request</name> <parameter_list pos:start="614:44" pos:end="616:56">(<parameter pos:start="614:45" pos:end="614:56"><decl pos:start="614:45" pos:end="614:56"><type pos:start="614:45" pos:end="614:56"><name pos:start="614:45" pos:end="614:51">EST_CTX</name> <modifier pos:start="614:53" pos:end="614:53">*</modifier></type><name pos:start="614:54" pos:end="614:56">ctx</name></decl></parameter>,
                                            <parameter pos:start="615:45" pos:end="615:61"><decl pos:start="615:45" pos:end="615:61"><type pos:start="615:45" pos:end="615:61"><name pos:start="615:45" pos:end="615:55">HTTP_HEADER</name> <modifier pos:start="615:57" pos:end="615:57">*</modifier></type><name pos:start="615:58" pos:end="615:61">hdrs</name></decl></parameter>,
                                            <parameter pos:start="616:45" pos:end="616:55"><decl pos:start="616:45" pos:end="616:55"><type pos:start="616:45" pos:end="616:55"><name pos:start="616:45" pos:end="616:47">int</name></type> <name pos:start="616:49" pos:end="616:55">hdr_cnt</name></decl></parameter>)</parameter_list>
<block pos:start="617:1" pos:end="668:1">{<block_content pos:start="618:5" pos:end="667:11">
    <decl_stmt pos:start="618:5" pos:end="618:10"><decl pos:start="618:5" pos:end="618:9"><type pos:start="618:5" pos:end="618:7"><name pos:start="618:5" pos:end="618:7">int</name></type> <name pos:start="618:9" pos:end="618:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="619:5" pos:end="619:17"><decl pos:start="619:5" pos:end="619:16"><type pos:start="619:5" pos:end="619:13"><name pos:start="619:5" pos:end="619:13">EST_ERROR</name></type> <name pos:start="619:15" pos:end="619:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="620:5" pos:end="620:23"><decl pos:start="620:5" pos:end="620:22"><type pos:start="620:5" pos:end="620:7"><name pos:start="620:5" pos:end="620:7">int</name></type> <name pos:start="620:9" pos:end="620:18">auth_found</name> <init pos:start="620:20" pos:end="620:22">= <expr pos:start="620:22" pos:end="620:22"><literal type="number" pos:start="620:22" pos:end="620:22">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="622:5" pos:end="626:7">/*
     * Walk the headers looking for the WWW-Authenticate.  We'll
     * only process the first one.  If an erroneous second one
     * is included, it will be ignored.
     */</comment>
    <for pos:start="627:5" pos:end="661:5">for <control pos:start="627:9" pos:end="627:33">(<init pos:start="627:10" pos:end="627:15"><expr pos:start="627:10" pos:end="627:14"><name pos:start="627:10" pos:end="627:10">i</name> <operator pos:start="627:12" pos:end="627:12">=</operator> <literal type="number" pos:start="627:14" pos:end="627:14">0</literal></expr>;</init> <condition pos:start="627:17" pos:end="627:28"><expr pos:start="627:17" pos:end="627:27"><name pos:start="627:17" pos:end="627:17">i</name> <operator pos:start="627:19" pos:end="627:19">&lt;</operator> <name pos:start="627:21" pos:end="627:27">hdr_cnt</name></expr>;</condition> <incr pos:start="627:30" pos:end="627:32"><expr pos:start="627:30" pos:end="627:32"><name pos:start="627:30" pos:end="627:30">i</name><operator pos:start="627:31" pos:end="627:32">++</operator></expr></incr>)</control> <block pos:start="627:35" pos:end="661:5">{<block_content pos:start="628:9" pos:end="660:9">
        <if_stmt pos:start="628:9" pos:end="660:9"><if pos:start="628:9" pos:end="660:9">if <condition pos:start="628:12" pos:end="628:58">(<expr pos:start="628:13" pos:end="628:57"><operator pos:start="628:13" pos:end="628:13">!</operator><call pos:start="628:14" pos:end="628:57"><name pos:start="628:14" pos:end="628:20">strncmp</name><argument_list pos:start="628:21" pos:end="628:57">(<argument pos:start="628:22" pos:end="628:33"><expr pos:start="628:22" pos:end="628:33"><name pos:start="628:22" pos:end="628:28"><name pos:start="628:22" pos:end="628:25">hdrs</name><index pos:start="628:26" pos:end="628:28">[<expr pos:start="628:27" pos:end="628:27"><name pos:start="628:27" pos:end="628:27">i</name></expr>]</index></name><operator pos:start="628:29" pos:end="628:29">.</operator><name pos:start="628:30" pos:end="628:33">name</name></expr></argument>, <argument pos:start="628:36" pos:end="628:52"><expr pos:start="628:36" pos:end="628:52"><name pos:start="628:36" pos:end="628:52">EST_HTTP_HDR_AUTH</name></expr></argument>, <argument pos:start="628:55" pos:end="628:56"><expr pos:start="628:55" pos:end="628:56"><literal type="number" pos:start="628:55" pos:end="628:56">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="628:60" pos:end="660:9">{<block_content pos:start="630:13" pos:end="659:18">

            <expr_stmt pos:start="630:13" pos:end="630:27"><expr pos:start="630:13" pos:end="630:26"><name pos:start="630:13" pos:end="630:22">auth_found</name> <operator pos:start="630:24" pos:end="630:24">=</operator> <literal type="number" pos:start="630:26" pos:end="630:26">1</literal></expr>;</expr_stmt>
            
            <if_stmt pos:start="632:13" pos:end="657:13"><if pos:start="632:13" pos:end="639:13">if <condition pos:start="632:16" pos:end="632:52">(<expr pos:start="632:17" pos:end="632:51"><operator pos:start="632:17" pos:end="632:17">!</operator><call pos:start="632:18" pos:end="632:51"><name pos:start="632:18" pos:end="632:24">strncmp</name><argument_list pos:start="632:25" pos:end="632:51">(<argument pos:start="632:26" pos:end="632:38"><expr pos:start="632:26" pos:end="632:38"><name pos:start="632:26" pos:end="632:32"><name pos:start="632:26" pos:end="632:29">hdrs</name><index pos:start="632:30" pos:end="632:32">[<expr pos:start="632:31" pos:end="632:31"><name pos:start="632:31" pos:end="632:31">i</name></expr>]</index></name><operator pos:start="632:33" pos:end="632:33">.</operator><name pos:start="632:34" pos:end="632:38">value</name></expr></argument>, <argument pos:start="632:41" pos:end="632:47"><expr pos:start="632:41" pos:end="632:47"><literal type="string" pos:start="632:41" pos:end="632:47">"Basic"</literal></expr></argument>, <argument pos:start="632:50" pos:end="632:50"><expr pos:start="632:50" pos:end="632:50"><literal type="number" pos:start="632:50" pos:end="632:50">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="632:54" pos:end="639:13">{<block_content pos:start="633:17" pos:end="638:17">
                <expr_stmt pos:start="633:17" pos:end="633:44"><expr pos:start="633:17" pos:end="633:43"><name pos:start="633:17" pos:end="633:30"><name pos:start="633:17" pos:end="633:19">ctx</name><operator pos:start="633:20" pos:end="633:21">-&gt;</operator><name pos:start="633:22" pos:end="633:30">auth_mode</name></name> <operator pos:start="633:32" pos:end="633:32">=</operator> <name pos:start="633:34" pos:end="633:43">AUTH_BASIC</name></expr>;</expr_stmt>
                <comment type="block" pos:start="634:17" pos:end="634:37">/* Parse the realm */</comment>
                <expr_stmt pos:start="635:17" pos:end="635:66"><expr pos:start="635:17" pos:end="635:65"><name pos:start="635:17" pos:end="635:18">rv</name> <operator pos:start="635:20" pos:end="635:20">=</operator> <call pos:start="635:22" pos:end="635:65"><name pos:start="635:22" pos:end="635:45">est_io_parse_auth_tokens</name><argument_list pos:start="635:46" pos:end="635:65">(<argument pos:start="635:47" pos:end="635:49"><expr pos:start="635:47" pos:end="635:49"><name pos:start="635:47" pos:end="635:49">ctx</name></expr></argument>, <argument pos:start="635:52" pos:end="635:64"><expr pos:start="635:52" pos:end="635:64"><name pos:start="635:52" pos:end="635:58"><name pos:start="635:52" pos:end="635:55">hdrs</name><index pos:start="635:56" pos:end="635:58">[<expr pos:start="635:57" pos:end="635:57"><name pos:start="635:57" pos:end="635:57">i</name></expr>]</index></name><operator pos:start="635:59" pos:end="635:59">.</operator><name pos:start="635:60" pos:end="635:64">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="636:17" pos:end="638:17"><if pos:start="636:17" pos:end="638:17">if <condition pos:start="636:20" pos:end="636:39">(<expr pos:start="636:21" pos:end="636:38"><name pos:start="636:21" pos:end="636:22">rv</name> <operator pos:start="636:24" pos:end="636:25">!=</operator> <name pos:start="636:27" pos:end="636:38">EST_ERR_NONE</name></expr>)</condition> <block pos:start="636:41" pos:end="638:17">{<block_content pos:start="637:21" pos:end="637:47">
                    <expr_stmt pos:start="637:21" pos:end="637:47"><expr pos:start="637:21" pos:end="637:46"><name pos:start="637:21" pos:end="637:34"><name pos:start="637:21" pos:end="637:23">ctx</name><operator pos:start="637:24" pos:end="637:25">-&gt;</operator><name pos:start="637:26" pos:end="637:34">auth_mode</name></name> <operator pos:start="637:36" pos:end="637:36">=</operator> <name pos:start="637:38" pos:end="637:46">AUTH_FAIL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>    
            </block_content>}</block></if> <if type="elseif" pos:start="639:15" pos:end="647:13">else
            if <condition pos:start="640:16" pos:end="640:53">(<expr pos:start="640:17" pos:end="640:52"><operator pos:start="640:17" pos:end="640:17">!</operator><call pos:start="640:18" pos:end="640:52"><name pos:start="640:18" pos:end="640:24">strncmp</name><argument_list pos:start="640:25" pos:end="640:52">(<argument pos:start="640:26" pos:end="640:38"><expr pos:start="640:26" pos:end="640:38"><name pos:start="640:26" pos:end="640:32"><name pos:start="640:26" pos:end="640:29">hdrs</name><index pos:start="640:30" pos:end="640:32">[<expr pos:start="640:31" pos:end="640:31"><name pos:start="640:31" pos:end="640:31">i</name></expr>]</index></name><operator pos:start="640:33" pos:end="640:33">.</operator><name pos:start="640:34" pos:end="640:38">value</name></expr></argument>, <argument pos:start="640:41" pos:end="640:48"><expr pos:start="640:41" pos:end="640:48"><literal type="string" pos:start="640:41" pos:end="640:48">"Digest"</literal></expr></argument>, <argument pos:start="640:51" pos:end="640:51"><expr pos:start="640:51" pos:end="640:51"><literal type="number" pos:start="640:51" pos:end="640:51">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="640:55" pos:end="647:13">{<block_content pos:start="641:17" pos:end="646:17">
                <expr_stmt pos:start="641:17" pos:end="641:45"><expr pos:start="641:17" pos:end="641:44"><name pos:start="641:17" pos:end="641:30"><name pos:start="641:17" pos:end="641:19">ctx</name><operator pos:start="641:20" pos:end="641:21">-&gt;</operator><name pos:start="641:22" pos:end="641:30">auth_mode</name></name> <operator pos:start="641:32" pos:end="641:32">=</operator> <name pos:start="641:34" pos:end="641:44">AUTH_DIGEST</name></expr>;</expr_stmt>
                <comment type="block" pos:start="642:17" pos:end="642:47">/* Parse the realm and nonce */</comment>
                <expr_stmt pos:start="643:17" pos:end="643:66"><expr pos:start="643:17" pos:end="643:65"><name pos:start="643:17" pos:end="643:18">rv</name> <operator pos:start="643:20" pos:end="643:20">=</operator> <call pos:start="643:22" pos:end="643:65"><name pos:start="643:22" pos:end="643:45">est_io_parse_auth_tokens</name><argument_list pos:start="643:46" pos:end="643:65">(<argument pos:start="643:47" pos:end="643:49"><expr pos:start="643:47" pos:end="643:49"><name pos:start="643:47" pos:end="643:49">ctx</name></expr></argument>, <argument pos:start="643:52" pos:end="643:64"><expr pos:start="643:52" pos:end="643:64"><name pos:start="643:52" pos:end="643:58"><name pos:start="643:52" pos:end="643:55">hdrs</name><index pos:start="643:56" pos:end="643:58">[<expr pos:start="643:57" pos:end="643:57"><name pos:start="643:57" pos:end="643:57">i</name></expr>]</index></name><operator pos:start="643:59" pos:end="643:59">.</operator><name pos:start="643:60" pos:end="643:64">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="644:17" pos:end="646:17"><if pos:start="644:17" pos:end="646:17">if <condition pos:start="644:20" pos:end="644:39">(<expr pos:start="644:21" pos:end="644:38"><name pos:start="644:21" pos:end="644:22">rv</name> <operator pos:start="644:24" pos:end="644:25">!=</operator> <name pos:start="644:27" pos:end="644:38">EST_ERR_NONE</name></expr>)</condition> <block pos:start="644:41" pos:end="646:17">{<block_content pos:start="645:21" pos:end="645:47">
                    <expr_stmt pos:start="645:21" pos:end="645:47"><expr pos:start="645:21" pos:end="645:46"><name pos:start="645:21" pos:end="645:34"><name pos:start="645:21" pos:end="645:23">ctx</name><operator pos:start="645:24" pos:end="645:25">-&gt;</operator><name pos:start="645:26" pos:end="645:34">auth_mode</name></name> <operator pos:start="645:36" pos:end="645:36">=</operator> <name pos:start="645:38" pos:end="645:46">AUTH_FAIL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>    
            </block_content>}</block></if> <if type="elseif" pos:start="647:15" pos:end="654:13">else if <condition pos:start="647:23" pos:end="647:60">(<expr pos:start="647:24" pos:end="647:59"><operator pos:start="647:24" pos:end="647:24">!</operator><call pos:start="647:25" pos:end="647:59"><name pos:start="647:25" pos:end="647:31">strncmp</name><argument_list pos:start="647:32" pos:end="647:59">(<argument pos:start="647:33" pos:end="647:45"><expr pos:start="647:33" pos:end="647:45"><name pos:start="647:33" pos:end="647:39"><name pos:start="647:33" pos:end="647:36">hdrs</name><index pos:start="647:37" pos:end="647:39">[<expr pos:start="647:38" pos:end="647:38"><name pos:start="647:38" pos:end="647:38">i</name></expr>]</index></name><operator pos:start="647:40" pos:end="647:40">.</operator><name pos:start="647:41" pos:end="647:45">value</name></expr></argument>, <argument pos:start="647:48" pos:end="647:55"><expr pos:start="647:48" pos:end="647:55"><literal type="string" pos:start="647:48" pos:end="647:55">"Bearer"</literal></expr></argument>, <argument pos:start="647:58" pos:end="647:58"><expr pos:start="647:58" pos:end="647:58"><literal type="number" pos:start="647:58" pos:end="647:58">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="647:62" pos:end="654:13">{<block_content pos:start="648:17" pos:end="653:17">
                <expr_stmt pos:start="648:17" pos:end="648:44"><expr pos:start="648:17" pos:end="648:43"><name pos:start="648:17" pos:end="648:30"><name pos:start="648:17" pos:end="648:19">ctx</name><operator pos:start="648:20" pos:end="648:21">-&gt;</operator><name pos:start="648:22" pos:end="648:30">auth_mode</name></name> <operator pos:start="648:32" pos:end="648:32">=</operator> <name pos:start="648:34" pos:end="648:43">AUTH_TOKEN</name></expr>;</expr_stmt>
                <comment type="block" pos:start="649:17" pos:end="649:69">/* Parse the realm and possible token error fields */</comment>
                <expr_stmt pos:start="650:17" pos:end="650:66"><expr pos:start="650:17" pos:end="650:65"><name pos:start="650:17" pos:end="650:18">rv</name> <operator pos:start="650:20" pos:end="650:20">=</operator> <call pos:start="650:22" pos:end="650:65"><name pos:start="650:22" pos:end="650:45">est_io_parse_auth_tokens</name><argument_list pos:start="650:46" pos:end="650:65">(<argument pos:start="650:47" pos:end="650:49"><expr pos:start="650:47" pos:end="650:49"><name pos:start="650:47" pos:end="650:49">ctx</name></expr></argument>, <argument pos:start="650:52" pos:end="650:64"><expr pos:start="650:52" pos:end="650:64"><name pos:start="650:52" pos:end="650:58"><name pos:start="650:52" pos:end="650:55">hdrs</name><index pos:start="650:56" pos:end="650:58">[<expr pos:start="650:57" pos:end="650:57"><name pos:start="650:57" pos:end="650:57">i</name></expr>]</index></name><operator pos:start="650:59" pos:end="650:59">.</operator><name pos:start="650:60" pos:end="650:64">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="651:17" pos:end="653:17"><if pos:start="651:17" pos:end="653:17">if <condition pos:start="651:20" pos:end="651:39">(<expr pos:start="651:21" pos:end="651:38"><name pos:start="651:21" pos:end="651:22">rv</name> <operator pos:start="651:24" pos:end="651:25">!=</operator> <name pos:start="651:27" pos:end="651:38">EST_ERR_NONE</name></expr>)</condition> <block pos:start="651:41" pos:end="653:17">{<block_content pos:start="652:21" pos:end="652:47">
                    <expr_stmt pos:start="652:21" pos:end="652:47"><expr pos:start="652:21" pos:end="652:46"><name pos:start="652:21" pos:end="652:34"><name pos:start="652:21" pos:end="652:23">ctx</name><operator pos:start="652:24" pos:end="652:25">-&gt;</operator><name pos:start="652:26" pos:end="652:34">auth_mode</name></name> <operator pos:start="652:36" pos:end="652:36">=</operator> <name pos:start="652:38" pos:end="652:46">AUTH_FAIL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>    
            </block_content>}</block></if> <else pos:start="654:15" pos:end="657:13">else <block pos:start="654:20" pos:end="657:13">{<block_content pos:start="655:17" pos:end="656:43">
                <expr_stmt pos:start="655:17" pos:end="655:67"><expr pos:start="655:17" pos:end="655:66"><call pos:start="655:17" pos:end="655:66"><name pos:start="655:17" pos:end="655:27">EST_LOG_ERR</name><argument_list pos:start="655:28" pos:end="655:66">(<argument pos:start="655:29" pos:end="655:65"><expr pos:start="655:29" pos:end="655:65"><literal type="string" pos:start="655:29" pos:end="655:65">"Unsupported WWW-Authenticate method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="656:17" pos:end="656:43"><expr pos:start="656:17" pos:end="656:42"><name pos:start="656:17" pos:end="656:30"><name pos:start="656:17" pos:end="656:19">ctx</name><operator pos:start="656:20" pos:end="656:21">-&gt;</operator><name pos:start="656:22" pos:end="656:30">auth_mode</name></name> <operator pos:start="656:32" pos:end="656:32">=</operator> <name pos:start="656:34" pos:end="656:42">AUTH_FAIL</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <break pos:start="659:13" pos:end="659:18">break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt pos:start="663:5" pos:end="666:5"><if pos:start="663:5" pos:end="666:5">if <condition pos:start="663:8" pos:end="663:20">(<expr pos:start="663:9" pos:end="663:19"><operator pos:start="663:9" pos:end="663:9">!</operator><name pos:start="663:10" pos:end="663:19">auth_found</name></expr>)</condition> <block pos:start="663:22" pos:end="666:5">{<block_content pos:start="664:9" pos:end="665:35">
        <expr_stmt pos:start="664:9" pos:end="664:56"><expr pos:start="664:9" pos:end="664:55"><call pos:start="664:9" pos:end="664:55"><name pos:start="664:9" pos:end="664:19">EST_LOG_ERR</name><argument_list pos:start="664:20" pos:end="664:55">(<argument pos:start="664:21" pos:end="664:54"><expr pos:start="664:21" pos:end="664:54"><literal type="string" pos:start="664:21" pos:end="664:54">"No WWW-Authenticate header found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="665:9" pos:end="665:35"><expr pos:start="665:9" pos:end="665:34"><name pos:start="665:9" pos:end="665:22"><name pos:start="665:9" pos:end="665:11">ctx</name><operator pos:start="665:12" pos:end="665:13">-&gt;</operator><name pos:start="665:14" pos:end="665:22">auth_mode</name></name> <operator pos:start="665:24" pos:end="665:24">=</operator> <name pos:start="665:26" pos:end="665:34">AUTH_FAIL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <return pos:start="667:5" pos:end="667:11">return;</return>
</block_content>}</block></function>
<comment type="block" pos:start="669:1" pos:end="684:3">/*
 * This function takes in the list of headers that were in the server's
 * response, it walks through the headers looking for a Retry-After response
 * header.  If one is found, the value is parsed and saved away in the EST
 * context.  This value can be in one of two formats, both are represented as
 * an ASCII string.  The first format can be a count of the number of seconds
 * the client should wait before retrying the request.  The second format is a
 * time/date stamp of the point in time at which the client should retry the
 * request.  The result of this function is the setting of the retry_after
 * values in the context.  If no retry-after header was received, or was
 * received and could not be parsed, the values will be zero, otherwise, they
 * are set to the value received.
 *
 * NOTE: The EST client currently does not support the time/date format
 * response and will not process a response in this format.
 */</comment>
<function pos:start="685:1" pos:end="757:1"><type pos:start="685:1" pos:end="685:16"><specifier pos:start="685:1" pos:end="685:6">static</specifier> <name pos:start="685:8" pos:end="685:16">EST_ERROR</name></type> <name pos:start="685:18" pos:end="685:51">est_io_parse_http_retry_after_resp</name> <parameter_list pos:start="685:53" pos:end="687:65">(<parameter pos:start="685:54" pos:end="685:65"><decl pos:start="685:54" pos:end="685:65"><type pos:start="685:54" pos:end="685:65"><name pos:start="685:54" pos:end="685:60">EST_CTX</name> <modifier pos:start="685:62" pos:end="685:62">*</modifier></type><name pos:start="685:63" pos:end="685:65">ctx</name></decl></parameter>,
                                                     <parameter pos:start="686:54" pos:end="686:70"><decl pos:start="686:54" pos:end="686:70"><type pos:start="686:54" pos:end="686:70"><name pos:start="686:54" pos:end="686:64">HTTP_HEADER</name> <modifier pos:start="686:66" pos:end="686:66">*</modifier></type><name pos:start="686:67" pos:end="686:70">hdrs</name></decl></parameter>,
                                                     <parameter pos:start="687:54" pos:end="687:64"><decl pos:start="687:54" pos:end="687:64"><type pos:start="687:54" pos:end="687:64"><name pos:start="687:54" pos:end="687:56">int</name></type> <name pos:start="687:58" pos:end="687:64">hdr_cnt</name></decl></parameter>)</parameter_list>
<block pos:start="688:1" pos:end="757:1">{<block_content pos:start="689:5" pos:end="756:14">
    <decl_stmt pos:start="689:5" pos:end="689:47"><decl pos:start="689:5" pos:end="689:46"><type pos:start="689:5" pos:end="689:13"><name pos:start="689:5" pos:end="689:13">EST_ERROR</name></type> <name pos:start="689:15" pos:end="689:16">rv</name> <init pos:start="689:18" pos:end="689:46">= <expr pos:start="689:20" pos:end="689:46"><name pos:start="689:20" pos:end="689:46">EST_ERR_INVALID_RETRY_VALUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="690:5" pos:end="690:10"><decl pos:start="690:5" pos:end="690:9"><type pos:start="690:5" pos:end="690:7"><name pos:start="690:5" pos:end="690:7">int</name></type> <name pos:start="690:9" pos:end="690:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="691:5" pos:end="691:25"><decl pos:start="691:5" pos:end="691:18"><type pos:start="691:5" pos:end="691:7"><name pos:start="691:5" pos:end="691:7">int</name></type> <name pos:start="691:9" pos:end="691:18">cmp_result</name></decl>, <decl pos:start="691:21" pos:end="691:24"><type ref="prev" pos:start="691:5" pos:end="691:7"/><name pos:start="691:21" pos:end="691:24">diff</name></decl>;</decl_stmt>
    <decl_stmt pos:start="692:5" pos:end="692:11"><decl pos:start="692:5" pos:end="692:10"><type pos:start="692:5" pos:end="692:7"><name pos:start="692:5" pos:end="692:7">int</name></type> <name pos:start="692:9" pos:end="692:10">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="693:5" pos:end="693:26"><decl pos:start="693:5" pos:end="693:25"><type pos:start="693:5" pos:end="693:17"><name pos:start="693:5" pos:end="693:8">long</name> <name pos:start="693:10" pos:end="693:13">long</name> <name pos:start="693:15" pos:end="693:17">int</name></type> <name pos:start="693:19" pos:end="693:25">temp_ll</name></decl>;</decl_stmt>
    <decl_stmt pos:start="694:5" pos:end="694:18"><decl pos:start="694:5" pos:end="694:17"><type pos:start="694:5" pos:end="694:7"><name pos:start="694:5" pos:end="694:7">int</name></type> <name pos:start="694:9" pos:end="694:13">found</name> <init pos:start="694:15" pos:end="694:17">= <expr pos:start="694:17" pos:end="694:17"><literal type="number" pos:start="694:17" pos:end="694:17">0</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block" pos:start="696:5" pos:end="698:7">/*
     * Initialize assuming there was no retry-after header.
     */</comment>
    <expr_stmt pos:start="699:5" pos:end="699:31"><expr pos:start="699:5" pos:end="699:30"><name pos:start="699:5" pos:end="699:26"><name pos:start="699:5" pos:end="699:7">ctx</name><operator pos:start="699:8" pos:end="699:9">-&gt;</operator><name pos:start="699:10" pos:end="699:26">retry_after_delay</name></name> <operator pos:start="699:28" pos:end="699:28">=</operator> <literal type="number" pos:start="699:30" pos:end="699:30">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="700:5" pos:end="700:30"><expr pos:start="700:5" pos:end="700:29"><name pos:start="700:5" pos:end="700:25"><name pos:start="700:5" pos:end="700:7">ctx</name><operator pos:start="700:8" pos:end="700:9">-&gt;</operator><name pos:start="700:10" pos:end="700:25">retry_after_date</name></name> <operator pos:start="700:27" pos:end="700:27">=</operator> <literal type="number" pos:start="700:29" pos:end="700:29">0</literal></expr>;</expr_stmt>
    
    <for pos:start="702:5" pos:end="752:5">for <control pos:start="702:9" pos:end="702:33">(<init pos:start="702:10" pos:end="702:15"><expr pos:start="702:10" pos:end="702:14"><name pos:start="702:10" pos:end="702:10">i</name> <operator pos:start="702:12" pos:end="702:12">=</operator> <literal type="number" pos:start="702:14" pos:end="702:14">0</literal></expr>;</init> <condition pos:start="702:17" pos:end="702:28"><expr pos:start="702:17" pos:end="702:27"><name pos:start="702:17" pos:end="702:17">i</name> <operator pos:start="702:19" pos:end="702:19">&lt;</operator> <name pos:start="702:21" pos:end="702:27">hdr_cnt</name></expr>;</condition> <incr pos:start="702:30" pos:end="702:32"><expr pos:start="702:30" pos:end="702:32"><name pos:start="702:30" pos:end="702:30">i</name><operator pos:start="702:31" pos:end="702:32">++</operator></expr></incr>)</control> <block pos:start="702:35" pos:end="752:5">{<block_content pos:start="704:9" pos:end="751:9">
        
        <expr_stmt pos:start="704:9" pos:end="705:67"><expr pos:start="704:9" pos:end="705:66"><name pos:start="704:9" pos:end="704:18">cmp_result</name> <operator pos:start="704:20" pos:end="704:20">=</operator> <call pos:start="704:22" pos:end="705:66"><name pos:start="704:22" pos:end="704:33">strcasecmp_s</name><argument_list pos:start="704:34" pos:end="705:66">(<argument pos:start="704:35" pos:end="704:46"><expr pos:start="704:35" pos:end="704:46"><name pos:start="704:35" pos:end="704:41"><name pos:start="704:35" pos:end="704:38">hdrs</name><index pos:start="704:39" pos:end="704:41">[<expr pos:start="704:40" pos:end="704:40"><name pos:start="704:40" pos:end="704:40">i</name></expr>]</index></name><operator pos:start="704:42" pos:end="704:42">.</operator><name pos:start="704:43" pos:end="704:46">name</name></expr></argument>, <argument pos:start="704:49" pos:end="704:80"><expr pos:start="704:49" pos:end="704:80"><sizeof pos:start="704:49" pos:end="704:80">sizeof<argument_list pos:start="704:55" pos:end="704:80">(<argument pos:start="704:56" pos:end="704:79"><expr pos:start="704:56" pos:end="704:79"><name pos:start="704:56" pos:end="704:79">EST_HTTP_HDR_RETRY_AFTER</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                  <argument pos:start="705:35" pos:end="705:58"><expr pos:start="705:35" pos:end="705:58"><name pos:start="705:35" pos:end="705:58">EST_HTTP_HDR_RETRY_AFTER</name></expr></argument>, <argument pos:start="705:61" pos:end="705:65"><expr pos:start="705:61" pos:end="705:65"><operator pos:start="705:61" pos:end="705:61">&amp;</operator><name pos:start="705:62" pos:end="705:65">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="706:9" pos:end="751:9"><if pos:start="706:9" pos:end="751:9">if <condition pos:start="706:12" pos:end="706:39">(<expr pos:start="706:13" pos:end="706:38"><name pos:start="706:13" pos:end="706:22">cmp_result</name> <operator pos:start="706:24" pos:end="706:25">==</operator> <name pos:start="706:27" pos:end="706:29">EOK</name> <operator pos:start="706:31" pos:end="706:32">&amp;&amp;</operator> <operator pos:start="706:34" pos:end="706:34">!</operator><name pos:start="706:35" pos:end="706:38">diff</name></expr>)</condition> <block pos:start="706:41" pos:end="751:9">{<block_content pos:start="708:13" pos:end="750:13">
            
            <expr_stmt pos:start="708:13" pos:end="708:66"><expr pos:start="708:13" pos:end="708:65"><call pos:start="708:13" pos:end="708:65"><name pos:start="708:13" pos:end="708:24">EST_LOG_INFO</name><argument_list pos:start="708:25" pos:end="708:65">(<argument pos:start="708:26" pos:end="708:49"><expr pos:start="708:26" pos:end="708:49"><literal type="string" pos:start="708:26" pos:end="708:49">"Retry-After value = %s"</literal></expr></argument>, <argument pos:start="708:52" pos:end="708:64"><expr pos:start="708:52" pos:end="708:64"><name pos:start="708:52" pos:end="708:58"><name pos:start="708:52" pos:end="708:55">hdrs</name><index pos:start="708:56" pos:end="708:58">[<expr pos:start="708:57" pos:end="708:57"><name pos:start="708:57" pos:end="708:57">i</name></expr>]</index></name><operator pos:start="708:59" pos:end="708:59">.</operator><name pos:start="708:60" pos:end="708:64">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="709:13" pos:end="709:22"><expr pos:start="709:13" pos:end="709:21"><name pos:start="709:13" pos:end="709:17">found</name> <operator pos:start="709:19" pos:end="709:19">=</operator> <literal type="number" pos:start="709:21" pos:end="709:21">1</literal></expr>;</expr_stmt>
            <comment type="block" pos:start="710:13" pos:end="714:15">/*
             * Determine whether or not the value is a date/time string
             * or is an integer representing the number of seconds
             * that the client must wait.
             */</comment>
            <if_stmt pos:start="715:13" pos:end="750:13"><if pos:start="715:13" pos:end="731:13">if <condition pos:start="715:16" pos:end="715:48">(<expr pos:start="715:17" pos:end="715:47"><call pos:start="715:17" pos:end="715:47"><name pos:start="715:17" pos:end="715:23">isalpha</name><argument_list pos:start="715:24" pos:end="715:47">(<argument pos:start="715:25" pos:end="715:46"><expr pos:start="715:25" pos:end="715:46"><operator pos:start="715:25" pos:end="715:25">*</operator><operator pos:start="715:26" pos:end="715:26">(</operator><name pos:start="715:27" pos:end="715:30">char</name> <operator pos:start="715:32" pos:end="715:32">*</operator><operator pos:start="715:33" pos:end="715:33">)</operator><name pos:start="715:34" pos:end="715:40"><name pos:start="715:34" pos:end="715:37">hdrs</name><index pos:start="715:38" pos:end="715:40">[<expr pos:start="715:39" pos:end="715:39"><name pos:start="715:39" pos:end="715:39">i</name></expr>]</index></name><operator pos:start="715:41" pos:end="715:41">.</operator><name pos:start="715:42" pos:end="715:46">value</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="715:50" pos:end="731:13">{<block_content pos:start="717:17" pos:end="731:0">
<cpp:ifdef pos:start="716:1" pos:end="716:37">#<cpp:directive pos:start="716:2" pos:end="716:6">ifdef</cpp:directive> <name pos:start="716:8" pos:end="716:37">RETRY_AFTER_DELAY_TIME_SUPPORT</name></cpp:ifdef>
                <decl_stmt pos:start="717:17" pos:end="717:23"><decl pos:start="717:17" pos:end="717:22"><type pos:start="717:17" pos:end="717:19"><name pos:start="717:17" pos:end="717:19">int</name></type> <name pos:start="717:21" pos:end="717:22">rc</name></decl>;</decl_stmt>
                <comment type="block" pos:start="718:17" pos:end="720:19">/*
                 * Convert the date/time string into a time_t
                 */</comment>
                <expr_stmt pos:start="721:17" pos:end="721:70"><expr pos:start="721:17" pos:end="721:69"><name pos:start="721:17" pos:end="721:18">rc</name> <operator pos:start="721:20" pos:end="721:20">=</operator> <call pos:start="721:22" pos:end="721:69"><name pos:start="721:22" pos:end="721:30">parsedate</name><argument_list pos:start="721:31" pos:end="721:69">(<argument pos:start="721:32" pos:end="721:44"><expr pos:start="721:32" pos:end="721:44"><name pos:start="721:32" pos:end="721:38"><name pos:start="721:32" pos:end="721:35">hdrs</name><index pos:start="721:36" pos:end="721:38">[<expr pos:start="721:37" pos:end="721:37"><name pos:start="721:37" pos:end="721:37">i</name></expr>]</index></name><operator pos:start="721:39" pos:end="721:39">.</operator><name pos:start="721:40" pos:end="721:44">value</name></expr></argument>, <argument pos:start="721:47" pos:end="721:68"><expr pos:start="721:47" pos:end="721:68"><operator pos:start="721:47" pos:end="721:47">&amp;</operator><name pos:start="721:48" pos:end="721:68"><name pos:start="721:48" pos:end="721:50">ctx</name><operator pos:start="721:51" pos:end="721:52">-&gt;</operator><name pos:start="721:53" pos:end="721:68">retry_after_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="722:17" pos:end="726:0"><if pos:start="722:17" pos:end="726:0">if <condition pos:start="722:20" pos:end="722:39">(<expr pos:start="722:21" pos:end="722:38"><name pos:start="722:21" pos:end="722:22">rc</name> <operator pos:start="722:24" pos:end="722:25">!=</operator> <name pos:start="722:27" pos:end="722:38">PARSEDATE_OK</name></expr>)</condition> <block pos:start="722:41" pos:end="726:0">{<block_content pos:start="723:21" pos:end="723:73">
                    <expr_stmt pos:start="723:21" pos:end="723:73"><expr pos:start="723:21" pos:end="723:72"><call pos:start="723:21" pos:end="723:72"><name pos:start="723:21" pos:end="723:31">EST_LOG_ERR</name><argument_list pos:start="723:32" pos:end="723:72">(<argument pos:start="723:33" pos:end="723:71"><expr pos:start="723:33" pos:end="723:71"><literal type="string" pos:start="723:33" pos:end="723:71">"Retry-After value could not be parsed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
<cpp:else pos:start="725:1" pos:end="725:5">#<cpp:directive pos:start="725:2" pos:end="725:5">else</cpp:directive></cpp:else>
                <comment type="block" pos:start="726:17" pos:end="728:19">/*
                 * This format is not currently supported.
                 */</comment>
                <expr_stmt pos:start="729:17" pos:end="731:0"><expr pos:start="729:17" pos:end="729:74"><call pos:start="729:17" pos:end="729:74"><name pos:start="729:17" pos:end="729:27">EST_LOG_ERR</name><argument_list pos:start="729:28" pos:end="729:74">(<argument pos:start="729:29" pos:end="729:73"><expr pos:start="729:29" pos:end="729:73"><literal type="string" pos:start="729:29" pos:end="729:73">"Retry-After value not in the correct format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="730:1" pos:end="730:6">#<cpp:directive pos:start="730:2" pos:end="730:6">endif</cpp:directive></cpp:endif>                
            </block_content>}</block></if> <else pos:start="731:15" pos:end="750:13">else <block pos:start="731:20" pos:end="750:13">{<block_content pos:start="737:17" pos:end="749:17">
                <comment type="block" pos:start="732:17" pos:end="736:19">/*
                 * make sure it's all digits, make sure it's no larger than a
                 * four byte integer, and cache away the value returned for
                 * the retry delay.
                 */</comment>
                <expr_stmt pos:start="737:17" pos:end="737:53"><expr pos:start="737:17" pos:end="737:52"><name pos:start="737:17" pos:end="737:18">rc</name> <operator pos:start="737:20" pos:end="737:20">=</operator> <call pos:start="737:22" pos:end="737:52"><name pos:start="737:22" pos:end="737:33">strisdigit_s</name><argument_list pos:start="737:34" pos:end="737:52">(<argument pos:start="737:35" pos:end="737:47"><expr pos:start="737:35" pos:end="737:47"><name pos:start="737:35" pos:end="737:41"><name pos:start="737:35" pos:end="737:38">hdrs</name><index pos:start="737:39" pos:end="737:41">[<expr pos:start="737:40" pos:end="737:40"><name pos:start="737:40" pos:end="737:40">i</name></expr>]</index></name><operator pos:start="737:42" pos:end="737:42">.</operator><name pos:start="737:43" pos:end="737:47">value</name></expr></argument>, <argument pos:start="737:50" pos:end="737:51"><expr pos:start="737:50" pos:end="737:51"><literal type="number" pos:start="737:50" pos:end="737:51">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="737:55" pos:end="737:81">// max of 10 decimal places</comment>
                <if_stmt pos:start="738:17" pos:end="749:17"><if pos:start="738:17" pos:end="747:17">if <condition pos:start="738:20" pos:end="738:23">(<expr pos:start="738:21" pos:end="738:22"><name pos:start="738:21" pos:end="738:22">rc</name></expr>)</condition> <block pos:start="738:25" pos:end="747:17">{<block_content pos:start="739:21" pos:end="745:21">
                    <expr_stmt pos:start="739:21" pos:end="739:51"><expr pos:start="739:21" pos:end="739:50"><name pos:start="739:21" pos:end="739:27">temp_ll</name> <operator pos:start="739:29" pos:end="739:29">=</operator> <call pos:start="739:31" pos:end="739:50"><name pos:start="739:31" pos:end="739:35">atoll</name><argument_list pos:start="739:36" pos:end="739:50">(<argument pos:start="739:37" pos:end="739:49"><expr pos:start="739:37" pos:end="739:49"><name pos:start="739:37" pos:end="739:43"><name pos:start="739:37" pos:end="739:40">hdrs</name><index pos:start="739:41" pos:end="739:43">[<expr pos:start="739:42" pos:end="739:42"><name pos:start="739:42" pos:end="739:42">i</name></expr>]</index></name><operator pos:start="739:44" pos:end="739:44">.</operator><name pos:start="739:45" pos:end="739:49">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="740:21" pos:end="745:21"><if pos:start="740:21" pos:end="743:21">if <condition pos:start="740:24" pos:end="740:43">(<expr pos:start="740:25" pos:end="740:42"><name pos:start="740:25" pos:end="740:31">temp_ll</name> <operator pos:start="740:33" pos:end="740:34">&lt;=</operator> <name pos:start="740:36" pos:end="740:42">INT_MAX</name></expr>)</condition> <block pos:start="740:45" pos:end="743:21">{<block_content pos:start="741:25" pos:end="742:53">
                        <expr_stmt pos:start="741:25" pos:end="741:63"><expr pos:start="741:25" pos:end="741:62"><name pos:start="741:25" pos:end="741:46"><name pos:start="741:25" pos:end="741:27">ctx</name><operator pos:start="741:28" pos:end="741:29">-&gt;</operator><name pos:start="741:30" pos:end="741:46">retry_after_delay</name></name> <operator pos:start="741:48" pos:end="741:48">=</operator> <operator pos:start="741:50" pos:end="741:50">(</operator><name pos:start="741:51" pos:end="741:53">int</name><operator pos:start="741:54" pos:end="741:54">)</operator> <name pos:start="741:56" pos:end="741:62">temp_ll</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="742:25" pos:end="742:53"><expr pos:start="742:25" pos:end="742:52"><name pos:start="742:25" pos:end="742:26">rv</name> <operator pos:start="742:28" pos:end="742:28">=</operator> <name pos:start="742:30" pos:end="742:52">EST_ERR_CA_ENROLL_RETRY</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="743:23" pos:end="745:21">else <block pos:start="743:28" pos:end="745:21">{<block_content pos:start="744:25" pos:end="744:67">
                        <expr_stmt pos:start="744:25" pos:end="744:67"><expr pos:start="744:25" pos:end="744:66"><call pos:start="744:25" pos:end="744:66"><name pos:start="744:25" pos:end="744:35">EST_LOG_ERR</name><argument_list pos:start="744:36" pos:end="744:66">(<argument pos:start="744:37" pos:end="744:65"><expr pos:start="744:37" pos:end="744:65"><literal type="string" pos:start="744:37" pos:end="744:65">"Retry-After value too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    
                </block_content>}</block></if> <else pos:start="747:19" pos:end="749:17">else <block pos:start="747:24" pos:end="749:17">{<block_content pos:start="748:21" pos:end="748:73">
                    <expr_stmt pos:start="748:21" pos:end="748:73"><expr pos:start="748:21" pos:end="748:72"><call pos:start="748:21" pos:end="748:72"><name pos:start="748:21" pos:end="748:31">EST_LOG_ERR</name><argument_list pos:start="748:32" pos:end="748:72">(<argument pos:start="748:33" pos:end="748:71"><expr pos:start="748:33" pos:end="748:71"><literal type="string" pos:start="748:33" pos:end="748:71">"Retry-After value could not be parsed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt pos:start="753:5" pos:end="755:5"><if pos:start="753:5" pos:end="755:5">if <condition pos:start="753:8" pos:end="753:19">(<expr pos:start="753:9" pos:end="753:18"><name pos:start="753:9" pos:end="753:13">found</name> <operator pos:start="753:15" pos:end="753:16">==</operator> <literal type="number" pos:start="753:18" pos:end="753:18">0</literal></expr>)</condition> <block pos:start="753:21" pos:end="755:5">{<block_content pos:start="754:9" pos:end="754:50">
        <expr_stmt pos:start="754:9" pos:end="754:50"><expr pos:start="754:9" pos:end="754:49"><call pos:start="754:9" pos:end="754:49"><name pos:start="754:9" pos:end="754:19">EST_LOG_ERR</name><argument_list pos:start="754:20" pos:end="754:49">(<argument pos:start="754:21" pos:end="754:48"><expr pos:start="754:21" pos:end="754:48"><literal type="string" pos:start="754:21" pos:end="754:48">"Retry-After header missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>    
    <return pos:start="756:5" pos:end="756:14">return <expr pos:start="756:12" pos:end="756:13"><name pos:start="756:12" pos:end="756:13">rv</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="758:1" pos:end="763:3">/*
 * This function verifies the content type header and also
 * returns the length of the content header.  The
 * content type is important.  For example, the content
 * type is expected to be pkcs7 on a simple enrollment.
 */</comment>
<function pos:start="764:1" pos:end="820:1"><type pos:start="764:1" pos:end="764:10"><specifier pos:start="764:1" pos:end="764:6">static</specifier> <name pos:start="764:8" pos:end="764:10">int</name></type> <name pos:start="764:12" pos:end="764:33">est_io_check_http_hdrs</name> <parameter_list pos:start="764:35" pos:end="765:52">(<parameter pos:start="764:36" pos:end="764:52"><decl pos:start="764:36" pos:end="764:52"><type pos:start="764:36" pos:end="764:52"><name pos:start="764:36" pos:end="764:46">HTTP_HEADER</name> <modifier pos:start="764:48" pos:end="764:48">*</modifier></type><name pos:start="764:49" pos:end="764:52">hdrs</name></decl></parameter>, <parameter pos:start="764:55" pos:end="764:65"><decl pos:start="764:55" pos:end="764:65"><type pos:start="764:55" pos:end="764:65"><name pos:start="764:55" pos:end="764:57">int</name></type> <name pos:start="764:59" pos:end="764:65">hdr_cnt</name></decl></parameter>,
                                   <parameter pos:start="765:36" pos:end="765:51"><decl pos:start="765:36" pos:end="765:51"><type pos:start="765:36" pos:end="765:51"><name pos:start="765:36" pos:end="765:48">EST_OPERATION</name></type> <name pos:start="765:50" pos:end="765:51">op</name></decl></parameter>)</parameter_list>
<block pos:start="766:1" pos:end="820:1">{<block_content pos:start="767:5" pos:end="819:14">
    <decl_stmt pos:start="767:5" pos:end="767:10"><decl pos:start="767:5" pos:end="767:9"><type pos:start="767:5" pos:end="767:7"><name pos:start="767:5" pos:end="767:7">int</name></type> <name pos:start="767:9" pos:end="767:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="768:5" pos:end="768:15"><decl pos:start="768:5" pos:end="768:14"><type pos:start="768:5" pos:end="768:7"><name pos:start="768:5" pos:end="768:7">int</name></type> <name pos:start="768:9" pos:end="768:10">cl</name> <init pos:start="768:12" pos:end="768:14">= <expr pos:start="768:14" pos:end="768:14"><literal type="number" pos:start="768:14" pos:end="768:14">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="769:5" pos:end="769:61"><decl pos:start="769:5" pos:end="769:32"><type pos:start="769:5" pos:end="769:7"><name pos:start="769:5" pos:end="769:7">int</name></type> <name pos:start="769:9" pos:end="769:28">content_type_present</name> <init pos:start="769:30" pos:end="769:32">= <expr pos:start="769:32" pos:end="769:32"><literal type="number" pos:start="769:32" pos:end="769:32">0</literal></expr></init></decl>, <decl pos:start="769:35" pos:end="769:60"><type ref="prev" pos:start="769:5" pos:end="769:7"/><name pos:start="769:35" pos:end="769:56">content_length_present</name> <init pos:start="769:58" pos:end="769:60">= <expr pos:start="769:60" pos:end="769:60"><literal type="number" pos:start="769:60" pos:end="769:60">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="770:5" pos:end="770:19"><decl pos:start="770:5" pos:end="770:18"><type pos:start="770:5" pos:end="770:7"><name pos:start="770:5" pos:end="770:7">int</name></type> <name pos:start="770:9" pos:end="770:18">cmp_result</name></decl>;</decl_stmt>

    <comment type="block" pos:start="772:5" pos:end="775:7">/*
     * Traverse all the http headers and process the ones that need to be
     * checked
     */</comment>
    <for pos:start="776:5" pos:end="806:5">for <control pos:start="776:9" pos:end="776:33">(<init pos:start="776:10" pos:end="776:15"><expr pos:start="776:10" pos:end="776:14"><name pos:start="776:10" pos:end="776:10">i</name> <operator pos:start="776:12" pos:end="776:12">=</operator> <literal type="number" pos:start="776:14" pos:end="776:14">0</literal></expr>;</init> <condition pos:start="776:17" pos:end="776:28"><expr pos:start="776:17" pos:end="776:27"><name pos:start="776:17" pos:end="776:17">i</name> <operator pos:start="776:19" pos:end="776:19">&lt;</operator> <name pos:start="776:21" pos:end="776:27">hdr_cnt</name></expr>;</condition> <incr pos:start="776:30" pos:end="776:32"><expr pos:start="776:30" pos:end="776:32"><name pos:start="776:30" pos:end="776:30">i</name><operator pos:start="776:31" pos:end="776:32">++</operator></expr></incr>)</control> <block pos:start="776:35" pos:end="806:5">{<block_content pos:start="780:9" pos:end="805:9">
        <comment type="block" pos:start="777:9" pos:end="779:11">/*
         * Content type
         */</comment>
        <expr_stmt pos:start="780:9" pos:end="781:50"><expr pos:start="780:9" pos:end="781:49"><call pos:start="780:9" pos:end="781:49"><name pos:start="780:9" pos:end="780:16">memcmp_s</name><argument_list pos:start="780:17" pos:end="781:49">(<argument pos:start="780:18" pos:end="780:29"><expr pos:start="780:18" pos:end="780:29"><name pos:start="780:18" pos:end="780:24"><name pos:start="780:18" pos:end="780:21">hdrs</name><index pos:start="780:22" pos:end="780:24">[<expr pos:start="780:23" pos:end="780:23"><name pos:start="780:23" pos:end="780:23">i</name></expr>]</index></name><operator pos:start="780:25" pos:end="780:25">.</operator><name pos:start="780:26" pos:end="780:29">name</name></expr></argument>, <argument pos:start="780:32" pos:end="780:54"><expr pos:start="780:32" pos:end="780:54"><sizeof pos:start="780:32" pos:end="780:54">sizeof<argument_list pos:start="780:38" pos:end="780:54">(<argument pos:start="780:39" pos:end="780:53"><expr pos:start="780:39" pos:end="780:53"><name pos:start="780:39" pos:end="780:53">EST_HTTP_HDR_CT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="780:57" pos:end="780:71"><expr pos:start="780:57" pos:end="780:71"><name pos:start="780:57" pos:end="780:71">EST_HTTP_HDR_CT</name></expr></argument>,
            <argument pos:start="781:13" pos:end="781:35"><expr pos:start="781:13" pos:end="781:35"><sizeof pos:start="781:13" pos:end="781:35">sizeof<argument_list pos:start="781:19" pos:end="781:35">(<argument pos:start="781:20" pos:end="781:34"><expr pos:start="781:20" pos:end="781:34"><name pos:start="781:20" pos:end="781:34">EST_HTTP_HDR_CT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="781:38" pos:end="781:48"><expr pos:start="781:38" pos:end="781:48"><operator pos:start="781:38" pos:end="781:38">&amp;</operator><name pos:start="781:39" pos:end="781:48">cmp_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="782:9" pos:end="805:9"><if pos:start="782:9" pos:end="795:9">if <condition pos:start="782:12" pos:end="782:24">(<expr pos:start="782:13" pos:end="782:23"><operator pos:start="782:13" pos:end="782:13">!</operator><name pos:start="782:14" pos:end="782:23">cmp_result</name></expr>)</condition> <block pos:start="782:26" pos:end="795:9">{<block_content pos:start="783:13" pos:end="794:17">
            <expr_stmt pos:start="783:13" pos:end="783:37"><expr pos:start="783:13" pos:end="783:36"><name pos:start="783:13" pos:end="783:32">content_type_present</name> <operator pos:start="783:34" pos:end="783:34">=</operator> <literal type="number" pos:start="783:36" pos:end="783:36">1</literal></expr>;</expr_stmt>
            <comment type="block" pos:start="784:13" pos:end="786:15">/*
             * Verify content is pkcs7 data
             */</comment>
            <expr_stmt pos:start="787:13" pos:end="790:35"><expr pos:start="787:13" pos:end="790:34"><call pos:start="787:13" pos:end="790:34"><name pos:start="787:13" pos:end="787:20">memcmp_s</name><argument_list pos:start="787:21" pos:end="790:34">(<argument pos:start="787:22" pos:end="787:34"><expr pos:start="787:22" pos:end="787:34"><name pos:start="787:22" pos:end="787:28"><name pos:start="787:22" pos:end="787:25">hdrs</name><index pos:start="787:26" pos:end="787:28">[<expr pos:start="787:27" pos:end="787:27"><name pos:start="787:27" pos:end="787:27">i</name></expr>]</index></name><operator pos:start="787:29" pos:end="787:29">.</operator><name pos:start="787:30" pos:end="787:34">value</name></expr></argument>,
                     <argument pos:start="788:22" pos:end="788:82"><expr pos:start="788:22" pos:end="788:82"><call pos:start="788:22" pos:end="788:82"><name pos:start="788:22" pos:end="788:30">strnlen_s</name><argument_list pos:start="788:31" pos:end="788:82">(<argument pos:start="788:32" pos:end="788:58"><expr pos:start="788:32" pos:end="788:58"><name pos:start="788:32" pos:end="788:45"><name pos:start="788:32" pos:end="788:41">est_op_map</name><index pos:start="788:42" pos:end="788:45">[<expr pos:start="788:43" pos:end="788:44"><name pos:start="788:43" pos:end="788:44">op</name></expr>]</index></name><operator pos:start="788:46" pos:end="788:46">.</operator><name pos:start="788:47" pos:end="788:58">content_type</name></expr></argument>, <argument pos:start="788:61" pos:end="788:81"><expr pos:start="788:61" pos:end="788:81"><name pos:start="788:61" pos:end="788:74"><name pos:start="788:61" pos:end="788:70">est_op_map</name><index pos:start="788:71" pos:end="788:74">[<expr pos:start="788:72" pos:end="788:73"><name pos:start="788:72" pos:end="788:73">op</name></expr>]</index></name><operator pos:start="788:75" pos:end="788:75">.</operator><name pos:start="788:76" pos:end="788:81">length</name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument pos:start="789:22" pos:end="789:48"><expr pos:start="789:22" pos:end="789:48"><name pos:start="789:22" pos:end="789:35"><name pos:start="789:22" pos:end="789:31">est_op_map</name><index pos:start="789:32" pos:end="789:35">[<expr pos:start="789:33" pos:end="789:34"><name pos:start="789:33" pos:end="789:34">op</name></expr>]</index></name><operator pos:start="789:36" pos:end="789:36">.</operator><name pos:start="789:37" pos:end="789:48">content_type</name></expr></argument>, <argument pos:start="789:51" pos:end="789:111"><expr pos:start="789:51" pos:end="789:111"><call pos:start="789:51" pos:end="789:111"><name pos:start="789:51" pos:end="789:59">strnlen_s</name><argument_list pos:start="789:60" pos:end="789:111">(<argument pos:start="789:61" pos:end="789:87"><expr pos:start="789:61" pos:end="789:87"><name pos:start="789:61" pos:end="789:74"><name pos:start="789:61" pos:end="789:70">est_op_map</name><index pos:start="789:71" pos:end="789:74">[<expr pos:start="789:72" pos:end="789:73"><name pos:start="789:72" pos:end="789:73">op</name></expr>]</index></name><operator pos:start="789:75" pos:end="789:75">.</operator><name pos:start="789:76" pos:end="789:87">content_type</name></expr></argument>, <argument pos:start="789:90" pos:end="789:110"><expr pos:start="789:90" pos:end="789:110"><name pos:start="789:90" pos:end="789:103"><name pos:start="789:90" pos:end="789:99">est_op_map</name><index pos:start="789:100" pos:end="789:103">[<expr pos:start="789:101" pos:end="789:102"><name pos:start="789:101" pos:end="789:102">op</name></expr>]</index></name><operator pos:start="789:104" pos:end="789:104">.</operator><name pos:start="789:105" pos:end="789:110">length</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument pos:start="790:23" pos:end="790:33"><expr pos:start="790:23" pos:end="790:33"><operator pos:start="790:23" pos:end="790:23">&amp;</operator><name pos:start="790:24" pos:end="790:33">cmp_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="791:13" pos:end="794:17"><if pos:start="791:13" pos:end="794:17">if <condition pos:start="791:16" pos:end="791:27">(<expr pos:start="791:17" pos:end="791:26"><name pos:start="791:17" pos:end="791:26">cmp_result</name></expr>)</condition> <block pos:start="791:29" pos:end="794:17">{<block_content pos:start="792:17" pos:end="793:25">
                <expr_stmt pos:start="792:17" pos:end="792:70"><expr pos:start="792:17" pos:end="792:69"><call pos:start="792:17" pos:end="792:69"><name pos:start="792:17" pos:end="792:27">EST_LOG_ERR</name><argument_list pos:start="792:28" pos:end="792:69">(<argument pos:start="792:29" pos:end="792:53"><expr pos:start="792:29" pos:end="792:53"><literal type="string" pos:start="792:29" pos:end="792:53">"HTTP content type is %s"</literal></expr></argument>, <argument pos:start="792:56" pos:end="792:68"><expr pos:start="792:56" pos:end="792:68"><name pos:start="792:56" pos:end="792:62"><name pos:start="792:56" pos:end="792:59">hdrs</name><index pos:start="792:60" pos:end="792:62">[<expr pos:start="792:61" pos:end="792:61"><name pos:start="792:61" pos:end="792:61">i</name></expr>]</index></name><operator pos:start="792:63" pos:end="792:63">.</operator><name pos:start="792:64" pos:end="792:68">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="793:17" pos:end="793:25">return <expr pos:start="793:24" pos:end="793:24"><literal type="number" pos:start="793:24" pos:end="793:24">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="795:11" pos:end="805:9">else <block pos:start="795:16" pos:end="805:9">{<block_content pos:start="799:13" pos:end="804:13">
            <comment type="block" pos:start="796:13" pos:end="798:15">/*
             * Content Length
             */</comment>
            <expr_stmt pos:start="799:13" pos:end="800:54"><expr pos:start="799:13" pos:end="800:53"><call pos:start="799:13" pos:end="800:53"><name pos:start="799:13" pos:end="799:20">memcmp_s</name><argument_list pos:start="799:21" pos:end="800:53">(<argument pos:start="799:22" pos:end="799:33"><expr pos:start="799:22" pos:end="799:33"><name pos:start="799:22" pos:end="799:28"><name pos:start="799:22" pos:end="799:25">hdrs</name><index pos:start="799:26" pos:end="799:28">[<expr pos:start="799:27" pos:end="799:27"><name pos:start="799:27" pos:end="799:27">i</name></expr>]</index></name><operator pos:start="799:29" pos:end="799:29">.</operator><name pos:start="799:30" pos:end="799:33">name</name></expr></argument>, <argument pos:start="799:36" pos:end="799:58"><expr pos:start="799:36" pos:end="799:58"><sizeof pos:start="799:36" pos:end="799:58">sizeof<argument_list pos:start="799:42" pos:end="799:58">(<argument pos:start="799:43" pos:end="799:57"><expr pos:start="799:43" pos:end="799:57"><name pos:start="799:43" pos:end="799:57">EST_HTTP_HDR_CL</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="799:61" pos:end="799:75"><expr pos:start="799:61" pos:end="799:75"><name pos:start="799:61" pos:end="799:75">EST_HTTP_HDR_CL</name></expr></argument>,
                <argument pos:start="800:17" pos:end="800:39"><expr pos:start="800:17" pos:end="800:39"><sizeof pos:start="800:17" pos:end="800:39">sizeof<argument_list pos:start="800:23" pos:end="800:39">(<argument pos:start="800:24" pos:end="800:38"><expr pos:start="800:24" pos:end="800:38"><name pos:start="800:24" pos:end="800:38">EST_HTTP_HDR_CL</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="800:42" pos:end="800:52"><expr pos:start="800:42" pos:end="800:52"><operator pos:start="800:42" pos:end="800:42">&amp;</operator><name pos:start="800:43" pos:end="800:52">cmp_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="801:13" pos:end="804:13"><if pos:start="801:13" pos:end="804:13">if <condition pos:start="801:16" pos:end="801:28">(<expr pos:start="801:17" pos:end="801:27"><operator pos:start="801:17" pos:end="801:17">!</operator><name pos:start="801:18" pos:end="801:27">cmp_result</name></expr>)</condition> <block pos:start="801:30" pos:end="804:13">{<block_content pos:start="802:17" pos:end="803:41">
                <expr_stmt pos:start="802:17" pos:end="802:43"><expr pos:start="802:17" pos:end="802:42"><name pos:start="802:17" pos:end="802:38">content_length_present</name> <operator pos:start="802:40" pos:end="802:40">=</operator> <literal type="number" pos:start="802:42" pos:end="802:42">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="803:17" pos:end="803:41"><expr pos:start="803:17" pos:end="803:40"><name pos:start="803:17" pos:end="803:18">cl</name> <operator pos:start="803:20" pos:end="803:20">=</operator> <call pos:start="803:22" pos:end="803:40"><name pos:start="803:22" pos:end="803:25">atoi</name><argument_list pos:start="803:26" pos:end="803:40">(<argument pos:start="803:27" pos:end="803:39"><expr pos:start="803:27" pos:end="803:39"><name pos:start="803:27" pos:end="803:33"><name pos:start="803:27" pos:end="803:30">hdrs</name><index pos:start="803:31" pos:end="803:33">[<expr pos:start="803:32" pos:end="803:32"><name pos:start="803:32" pos:end="803:32">i</name></expr>]</index></name><operator pos:start="803:34" pos:end="803:34">.</operator><name pos:start="803:35" pos:end="803:39">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    
    <comment type="block" pos:start="808:5" pos:end="810:7">/*
     * Make sure all the necessary headers were present.
     */</comment>
    <if_stmt pos:start="811:5" pos:end="817:5"><if pos:start="811:5" pos:end="814:5">if <condition pos:start="811:8" pos:end="811:35">(<expr pos:start="811:9" pos:end="811:33"><name pos:start="811:9" pos:end="811:28">content_type_present</name> <operator pos:start="811:30" pos:end="811:31">==</operator> <literal type="number" pos:start="811:33" pos:end="811:33">0</literal></expr> )</condition> <block pos:start="811:37" pos:end="814:5">{<block_content pos:start="812:9" pos:end="813:17">
        <expr_stmt pos:start="812:9" pos:end="812:57"><expr pos:start="812:9" pos:end="812:56"><call pos:start="812:9" pos:end="812:56"><name pos:start="812:9" pos:end="812:19">EST_LOG_ERR</name><argument_list pos:start="812:20" pos:end="812:56">(<argument pos:start="812:21" pos:end="812:55"><expr pos:start="812:21" pos:end="812:55"><literal type="string" pos:start="812:21" pos:end="812:55">"Missing HTTP content type  header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="813:9" pos:end="813:17">return <expr pos:start="813:16" pos:end="813:16"><literal type="number" pos:start="813:16" pos:end="813:16">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="814:7" pos:end="817:5">else if <condition pos:start="814:15" pos:end="814:44">(<expr pos:start="814:16" pos:end="814:42"><name pos:start="814:16" pos:end="814:37">content_length_present</name> <operator pos:start="814:39" pos:end="814:40">==</operator> <literal type="number" pos:start="814:42" pos:end="814:42">0</literal></expr> )</condition> <block pos:start="814:46" pos:end="817:5">{<block_content pos:start="815:9" pos:end="816:17">
        <expr_stmt pos:start="815:9" pos:end="815:58"><expr pos:start="815:9" pos:end="815:57"><call pos:start="815:9" pos:end="815:57"><name pos:start="815:9" pos:end="815:19">EST_LOG_ERR</name><argument_list pos:start="815:20" pos:end="815:57">(<argument pos:start="815:21" pos:end="815:56"><expr pos:start="815:21" pos:end="815:56"><literal type="string" pos:start="815:21" pos:end="815:56">"Missing HTTP content length header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="816:9" pos:end="816:17">return <expr pos:start="816:16" pos:end="816:16"><literal type="number" pos:start="816:16" pos:end="816:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt> 
    
    <return pos:start="819:5" pos:end="819:14">return <expr pos:start="819:12" pos:end="819:13"><name pos:start="819:12" pos:end="819:13">cl</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="821:1" pos:end="826:3">/*
 * This function verifies the content type header and also
 * returns the length of the content header.  The
 * content type is important.  For example, the content
 * type is expected to be pkcs7 on a simple enrollment.
 */</comment>
<function pos:start="827:1" pos:end="856:1"><type pos:start="827:1" pos:end="827:10"><specifier pos:start="827:1" pos:end="827:6">static</specifier> <name pos:start="827:8" pos:end="827:10">int</name></type> <name pos:start="827:12" pos:end="827:23">est_ssl_read</name> <parameter_list pos:start="827:25" pos:end="828:45">(<parameter pos:start="827:26" pos:end="827:33"><decl pos:start="827:26" pos:end="827:33"><type pos:start="827:26" pos:end="827:33"><name pos:start="827:26" pos:end="827:28">SSL</name> <modifier pos:start="827:30" pos:end="827:30">*</modifier></type><name pos:start="827:31" pos:end="827:33">ssl</name></decl></parameter>, <parameter pos:start="827:36" pos:end="827:53"><decl pos:start="827:36" pos:end="827:53"><type pos:start="827:36" pos:end="827:53"><name pos:start="827:36" pos:end="827:43">unsigned</name> <name pos:start="827:45" pos:end="827:48">char</name> <modifier pos:start="827:50" pos:end="827:50">*</modifier></type><name pos:start="827:51" pos:end="827:53">buf</name></decl></parameter>, <parameter pos:start="827:56" pos:end="827:66"><decl pos:start="827:56" pos:end="827:66"><type pos:start="827:56" pos:end="827:66"><name pos:start="827:56" pos:end="827:58">int</name></type> <name pos:start="827:60" pos:end="827:66">buf_max</name></decl></parameter>,
                       <parameter pos:start="828:24" pos:end="828:44"><decl pos:start="828:24" pos:end="828:44"><type pos:start="828:24" pos:end="828:44"><name pos:start="828:24" pos:end="828:26">int</name></type> <name pos:start="828:28" pos:end="828:44">sock_read_timeout</name></decl></parameter>)</parameter_list> 
<block pos:start="829:1" pos:end="856:1">{<block_content pos:start="830:5" pos:end="855:5">
    <decl_stmt pos:start="830:5" pos:end="830:16"><decl pos:start="830:5" pos:end="830:15"><type pos:start="830:5" pos:end="830:7"><name pos:start="830:5" pos:end="830:7">int</name></type> <name pos:start="830:9" pos:end="830:15">timeout</name></decl>;</decl_stmt>
    <decl_stmt pos:start="831:5" pos:end="831:16"><decl pos:start="831:5" pos:end="831:15"><type pos:start="831:5" pos:end="831:7"><name pos:start="831:5" pos:end="831:7">int</name></type> <name pos:start="831:9" pos:end="831:15">read_fd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="832:5" pos:end="832:11"><decl pos:start="832:5" pos:end="832:10"><type pos:start="832:5" pos:end="832:7"><name pos:start="832:5" pos:end="832:7">int</name></type> <name pos:start="832:9" pos:end="832:10">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="833:5" pos:end="833:22"><decl pos:start="833:5" pos:end="833:21"><type pos:start="833:5" pos:end="833:17"><name pos:start="833:5" pos:end="833:17"><name pos:start="833:5" pos:end="833:10">struct</name> <name pos:start="833:12" pos:end="833:17">pollfd</name></name></type> <name pos:start="833:19" pos:end="833:21">pfd</name></decl>;</decl_stmt>
    
    <comment type="block" pos:start="835:5" pos:end="837:7">/*
     * load up the timeval struct to be passed to the select
     */</comment>
    <expr_stmt pos:start="838:5" pos:end="838:39"><expr pos:start="838:5" pos:end="838:38"><name pos:start="838:5" pos:end="838:11">timeout</name> <operator pos:start="838:13" pos:end="838:13">=</operator> <name pos:start="838:15" pos:end="838:31">sock_read_timeout</name> <operator pos:start="838:33" pos:end="838:33">*</operator> <literal type="number" pos:start="838:35" pos:end="838:38">1000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="840:5" pos:end="840:30"><expr pos:start="840:5" pos:end="840:29"><name pos:start="840:5" pos:end="840:11">read_fd</name> <operator pos:start="840:13" pos:end="840:13">=</operator> <call pos:start="840:15" pos:end="840:29"><name pos:start="840:15" pos:end="840:24">SSL_get_fd</name><argument_list pos:start="840:25" pos:end="840:29">(<argument pos:start="840:26" pos:end="840:28"><expr pos:start="840:26" pos:end="840:28"><name pos:start="840:26" pos:end="840:28">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="841:5" pos:end="841:21"><expr pos:start="841:5" pos:end="841:20"><name pos:start="841:5" pos:end="841:10"><name pos:start="841:5" pos:end="841:7">pfd</name><operator pos:start="841:8" pos:end="841:8">.</operator><name pos:start="841:9" pos:end="841:10">fd</name></name> <operator pos:start="841:12" pos:end="841:12">=</operator> <name pos:start="841:14" pos:end="841:20">read_fd</name></expr>;</expr_stmt>
    <expr_stmt pos:start="842:5" pos:end="842:24"><expr pos:start="842:5" pos:end="842:23"><name pos:start="842:5" pos:end="842:14"><name pos:start="842:5" pos:end="842:7">pfd</name><operator pos:start="842:8" pos:end="842:8">.</operator><name pos:start="842:9" pos:end="842:14">events</name></name> <operator pos:start="842:16" pos:end="842:16">=</operator> <name pos:start="842:18" pos:end="842:23">POLLIN</name></expr>;</expr_stmt>
    <expr_stmt pos:start="843:5" pos:end="843:20"><expr pos:start="843:5" pos:end="843:19"><name pos:start="843:5" pos:end="843:15"><name pos:start="843:5" pos:end="843:7">pfd</name><operator pos:start="843:8" pos:end="843:8">.</operator><name pos:start="843:9" pos:end="843:15">revents</name></name> <operator pos:start="843:17" pos:end="843:17">=</operator> <literal type="number" pos:start="843:19" pos:end="843:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="845:5" pos:end="845:14"><expr pos:start="845:5" pos:end="845:13"><name pos:start="845:5" pos:end="845:9">errno</name> <operator pos:start="845:11" pos:end="845:11">=</operator> <literal type="number" pos:start="845:13" pos:end="845:13">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="846:5" pos:end="846:32"><expr pos:start="846:5" pos:end="846:31"><name pos:start="846:5" pos:end="846:6">rv</name> <operator pos:start="846:8" pos:end="846:8">=</operator> <call pos:start="846:10" pos:end="846:31"><name pos:start="846:10" pos:end="846:13">POLL</name><argument_list pos:start="846:14" pos:end="846:31">(<argument pos:start="846:15" pos:end="846:18"><expr pos:start="846:15" pos:end="846:18"><operator pos:start="846:15" pos:end="846:15">&amp;</operator><name pos:start="846:16" pos:end="846:18">pfd</name></expr></argument>, <argument pos:start="846:21" pos:end="846:21"><expr pos:start="846:21" pos:end="846:21"><literal type="number" pos:start="846:21" pos:end="846:21">1</literal></expr></argument>, <argument pos:start="846:24" pos:end="846:30"><expr pos:start="846:24" pos:end="846:30"><name pos:start="846:24" pos:end="846:30">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="847:5" pos:end="855:5"><if pos:start="847:5" pos:end="850:5">if <condition pos:start="847:8" pos:end="847:16">(<expr pos:start="847:9" pos:end="847:15"><name pos:start="847:9" pos:end="847:10">rv</name> <operator pos:start="847:12" pos:end="847:13">==</operator> <literal type="number" pos:start="847:15" pos:end="847:15">0</literal></expr>)</condition> <block pos:start="847:18" pos:end="850:5">{<block_content pos:start="848:9" pos:end="849:18">
        <expr_stmt pos:start="848:9" pos:end="848:75"><expr pos:start="848:9" pos:end="848:74"><call pos:start="848:9" pos:end="848:74"><name pos:start="848:9" pos:end="848:19">EST_LOG_ERR</name><argument_list pos:start="848:20" pos:end="848:74">(<argument pos:start="848:21" pos:end="848:73"><expr pos:start="848:21" pos:end="848:73"><literal type="string" pos:start="848:21" pos:end="848:73">"Socket poll timeout.  No data received from server."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="849:9" pos:end="849:18">return <expr pos:start="849:16" pos:end="849:17"><operator pos:start="849:16" pos:end="849:16">-</operator><literal type="number" pos:start="849:17" pos:end="849:17">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="850:7" pos:end="853:5">else if <condition pos:start="850:15" pos:end="850:25">( <expr pos:start="850:17" pos:end="850:24"><name pos:start="850:17" pos:end="850:18">rv</name> <operator pos:start="850:20" pos:end="850:21">==</operator> <operator pos:start="850:23" pos:end="850:23">-</operator><literal type="number" pos:start="850:24" pos:end="850:24">1</literal></expr>)</condition> <block pos:start="850:27" pos:end="853:5">{<block_content pos:start="851:9" pos:end="852:18">
        <expr_stmt pos:start="851:9" pos:end="851:62"><expr pos:start="851:9" pos:end="851:61"><call pos:start="851:9" pos:end="851:61"><name pos:start="851:9" pos:end="851:19">EST_LOG_ERR</name><argument_list pos:start="851:20" pos:end="851:61">(<argument pos:start="851:21" pos:end="851:53"><expr pos:start="851:21" pos:end="851:53"><literal type="string" pos:start="851:21" pos:end="851:53">"Socket read failure. errno = %d"</literal></expr></argument>, <argument pos:start="851:56" pos:end="851:60"><expr pos:start="851:56" pos:end="851:60"><name pos:start="851:56" pos:end="851:60">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="852:9" pos:end="852:18">return <expr pos:start="852:16" pos:end="852:17"><operator pos:start="852:16" pos:end="852:16">-</operator><literal type="number" pos:start="852:17" pos:end="852:17">1</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="853:7" pos:end="855:5">else <block pos:start="853:12" pos:end="855:5">{<block_content pos:start="854:9" pos:end="854:45">
        <return pos:start="854:9" pos:end="854:45">return <expr pos:start="854:16" pos:end="854:44"><operator pos:start="854:16" pos:end="854:16">(</operator><call pos:start="854:17" pos:end="854:43"><name pos:start="854:17" pos:end="854:24">SSL_read</name><argument_list pos:start="854:25" pos:end="854:43">(<argument pos:start="854:26" pos:end="854:28"><expr pos:start="854:26" pos:end="854:28"><name pos:start="854:26" pos:end="854:28">ssl</name></expr></argument>, <argument pos:start="854:31" pos:end="854:33"><expr pos:start="854:31" pos:end="854:33"><name pos:start="854:31" pos:end="854:33">buf</name></expr></argument>, <argument pos:start="854:36" pos:end="854:42"><expr pos:start="854:36" pos:end="854:42"><name pos:start="854:36" pos:end="854:42">buf_max</name></expr></argument>)</argument_list></call><operator pos:start="854:44" pos:end="854:44">)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="857:1" pos:end="860:3">/*
 * This function extracts data from the SSL context and puts
 * it into a buffer.
 */</comment>
<function pos:start="861:1" pos:end="897:1"><type pos:start="861:1" pos:end="861:10"><specifier pos:start="861:1" pos:end="861:6">static</specifier> <name pos:start="861:8" pos:end="861:10">int</name></type> <name pos:start="861:12" pos:end="861:26">est_io_read_raw</name> <parameter_list pos:start="861:28" pos:end="862:65">(<parameter pos:start="861:29" pos:end="861:36"><decl pos:start="861:29" pos:end="861:36"><type pos:start="861:29" pos:end="861:36"><name pos:start="861:29" pos:end="861:31">SSL</name> <modifier pos:start="861:33" pos:end="861:33">*</modifier></type><name pos:start="861:34" pos:end="861:36">ssl</name></decl></parameter>, <parameter pos:start="861:39" pos:end="861:56"><decl pos:start="861:39" pos:end="861:56"><type pos:start="861:39" pos:end="861:56"><name pos:start="861:39" pos:end="861:46">unsigned</name> <name pos:start="861:48" pos:end="861:51">char</name> <modifier pos:start="861:53" pos:end="861:53">*</modifier></type><name pos:start="861:54" pos:end="861:56">buf</name></decl></parameter>, <parameter pos:start="861:59" pos:end="861:69"><decl pos:start="861:59" pos:end="861:69"><type pos:start="861:59" pos:end="861:69"><name pos:start="861:59" pos:end="861:61">int</name></type> <name pos:start="861:63" pos:end="861:69">buf_max</name></decl></parameter>,
                            <parameter pos:start="862:29" pos:end="862:41"><decl pos:start="862:29" pos:end="862:41"><type pos:start="862:29" pos:end="862:41"><name pos:start="862:29" pos:end="862:31">int</name> <modifier pos:start="862:33" pos:end="862:33">*</modifier></type><name pos:start="862:34" pos:end="862:41">read_cnt</name></decl></parameter>, <parameter pos:start="862:44" pos:end="862:64"><decl pos:start="862:44" pos:end="862:64"><type pos:start="862:44" pos:end="862:64"><name pos:start="862:44" pos:end="862:46">int</name></type> <name pos:start="862:48" pos:end="862:64">sock_read_timeout</name></decl></parameter>)</parameter_list>
<block pos:start="863:1" pos:end="897:1">{<block_content pos:start="864:5" pos:end="896:26">
    <decl_stmt pos:start="864:5" pos:end="864:16"><decl pos:start="864:5" pos:end="864:15"><type pos:start="864:5" pos:end="864:7"><name pos:start="864:5" pos:end="864:7">int</name></type> <name pos:start="864:9" pos:end="864:15">cur_cnt</name></decl>;</decl_stmt>
    <decl_stmt pos:start="865:5" pos:end="865:23"><decl pos:start="865:5" pos:end="865:22"><type pos:start="865:5" pos:end="865:8"><name pos:start="865:5" pos:end="865:8">char</name></type> <name pos:start="865:10" pos:end="865:22">peek_read_buf</name></decl>;</decl_stmt>

    <expr_stmt pos:start="867:5" pos:end="867:18"><expr pos:start="867:5" pos:end="867:17"><operator pos:start="867:5" pos:end="867:5">*</operator><name pos:start="867:6" pos:end="867:13">read_cnt</name> <operator pos:start="867:15" pos:end="867:15">=</operator> <literal type="number" pos:start="867:17" pos:end="867:17">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="868:5" pos:end="868:66"><expr pos:start="868:5" pos:end="868:65"><name pos:start="868:5" pos:end="868:11">cur_cnt</name>  <operator pos:start="868:14" pos:end="868:14">=</operator> <call pos:start="868:16" pos:end="868:65"><name pos:start="868:16" pos:end="868:27">est_ssl_read</name><argument_list pos:start="868:28" pos:end="868:65">(<argument pos:start="868:29" pos:end="868:31"><expr pos:start="868:29" pos:end="868:31"><name pos:start="868:29" pos:end="868:31">ssl</name></expr></argument>, <argument pos:start="868:34" pos:end="868:36"><expr pos:start="868:34" pos:end="868:36"><name pos:start="868:34" pos:end="868:36">buf</name></expr></argument>, <argument pos:start="868:39" pos:end="868:45"><expr pos:start="868:39" pos:end="868:45"><name pos:start="868:39" pos:end="868:45">buf_max</name></expr></argument>, <argument pos:start="868:48" pos:end="868:64"><expr pos:start="868:48" pos:end="868:64"><name pos:start="868:48" pos:end="868:64">sock_read_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="869:5" pos:end="873:5"><if pos:start="869:5" pos:end="873:5">if <condition pos:start="869:8" pos:end="869:20">(<expr pos:start="869:9" pos:end="869:19"><name pos:start="869:9" pos:end="869:15">cur_cnt</name> <operator pos:start="869:17" pos:end="869:17">&lt;</operator> <literal type="number" pos:start="869:19" pos:end="869:19">0</literal></expr>)</condition> <block pos:start="869:22" pos:end="873:5">{<block_content pos:start="870:9" pos:end="872:34">
        <expr_stmt pos:start="870:9" pos:end="870:40"><expr pos:start="870:9" pos:end="870:39"><call pos:start="870:9" pos:end="870:39"><name pos:start="870:9" pos:end="870:19">EST_LOG_ERR</name><argument_list pos:start="870:20" pos:end="870:39">(<argument pos:start="870:21" pos:end="870:38"><expr pos:start="870:21" pos:end="870:38"><literal type="string" pos:start="870:21" pos:end="870:38">"TLS read error 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="871:9" pos:end="871:31"><expr pos:start="871:9" pos:end="871:30"><call pos:start="871:9" pos:end="871:30"><name pos:start="871:9" pos:end="871:28">ossl_dump_ssl_errors</name><argument_list pos:start="871:29" pos:end="871:30">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="872:9" pos:end="872:34">return <expr pos:start="872:16" pos:end="872:33"><operator pos:start="872:16" pos:end="872:16">(</operator><name pos:start="872:17" pos:end="872:32">EST_ERR_SSL_READ</name><operator pos:start="872:33" pos:end="872:33">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="874:5" pos:end="874:25"><expr pos:start="874:5" pos:end="874:24"><operator pos:start="874:5" pos:end="874:5">*</operator><name pos:start="874:6" pos:end="874:13">read_cnt</name> <operator pos:start="874:15" pos:end="874:16">+=</operator> <name pos:start="874:18" pos:end="874:24">cur_cnt</name></expr>;</expr_stmt>

    <comment type="block" pos:start="876:5" pos:end="879:7">/*
     * Multiple calls to SSL_read may be required to get the full
     * HTTP payload.
     */</comment>
    <while pos:start="880:5" pos:end="889:5">while <condition pos:start="880:11" pos:end="880:46">(<expr pos:start="880:12" pos:end="880:45"><name pos:start="880:12" pos:end="880:18">cur_cnt</name> <operator pos:start="880:20" pos:end="880:20">&gt;</operator> <literal type="number" pos:start="880:22" pos:end="880:22">0</literal> <operator pos:start="880:24" pos:end="880:25">&amp;&amp;</operator> <operator pos:start="880:27" pos:end="880:27">*</operator><name pos:start="880:28" pos:end="880:35">read_cnt</name> <operator pos:start="880:37" pos:end="880:37">&lt;</operator> <name pos:start="880:39" pos:end="880:45">buf_max</name></expr>)</condition> <block pos:start="880:48" pos:end="889:5">{<block_content pos:start="881:9" pos:end="888:29">
        <expr_stmt pos:start="881:9" pos:end="882:50"><expr pos:start="881:9" pos:end="882:49"><name pos:start="881:9" pos:end="881:15">cur_cnt</name> <operator pos:start="881:17" pos:end="881:17">=</operator> <call pos:start="881:19" pos:end="882:49"><name pos:start="881:19" pos:end="881:30">est_ssl_read</name><argument_list pos:start="881:31" pos:end="882:49">(<argument pos:start="881:32" pos:end="881:34"><expr pos:start="881:32" pos:end="881:34"><name pos:start="881:32" pos:end="881:34">ssl</name></expr></argument>, <argument pos:start="881:37" pos:end="881:53"><expr pos:start="881:37" pos:end="881:53"><operator pos:start="881:37" pos:end="881:37">(</operator><name pos:start="881:38" pos:end="881:40">buf</name> <operator pos:start="881:42" pos:end="881:42">+</operator> <operator pos:start="881:44" pos:end="881:44">*</operator><name pos:start="881:45" pos:end="881:52">read_cnt</name><operator pos:start="881:53" pos:end="881:53">)</operator></expr></argument>, <argument pos:start="881:56" pos:end="881:76"><expr pos:start="881:56" pos:end="881:76"><operator pos:start="881:56" pos:end="881:56">(</operator><name pos:start="881:57" pos:end="881:63">buf_max</name> <operator pos:start="881:65" pos:end="881:65">-</operator> <operator pos:start="881:67" pos:end="881:67">*</operator><name pos:start="881:68" pos:end="881:75">read_cnt</name><operator pos:start="881:76" pos:end="881:76">)</operator></expr></argument>,
                               <argument pos:start="882:32" pos:end="882:48"><expr pos:start="882:32" pos:end="882:48"><name pos:start="882:32" pos:end="882:48">sock_read_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="883:9" pos:end="887:9"><if pos:start="883:9" pos:end="887:9">if <condition pos:start="883:12" pos:end="883:24">(<expr pos:start="883:13" pos:end="883:23"><name pos:start="883:13" pos:end="883:19">cur_cnt</name> <operator pos:start="883:21" pos:end="883:21">&lt;</operator> <literal type="number" pos:start="883:23" pos:end="883:23">0</literal></expr>)</condition> <block pos:start="883:26" pos:end="887:9">{<block_content pos:start="884:13" pos:end="886:38">
            <expr_stmt pos:start="884:13" pos:end="884:42"><expr pos:start="884:13" pos:end="884:41"><call pos:start="884:13" pos:end="884:41"><name pos:start="884:13" pos:end="884:23">EST_LOG_ERR</name><argument_list pos:start="884:24" pos:end="884:41">(<argument pos:start="884:25" pos:end="884:40"><expr pos:start="884:25" pos:end="884:40"><literal type="string" pos:start="884:25" pos:end="884:40">"TLS read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="885:13" pos:end="885:35"><expr pos:start="885:13" pos:end="885:34"><call pos:start="885:13" pos:end="885:34"><name pos:start="885:13" pos:end="885:32">ossl_dump_ssl_errors</name><argument_list pos:start="885:33" pos:end="885:34">()</argument_list></call></expr>;</expr_stmt>
            <return pos:start="886:13" pos:end="886:38">return <expr pos:start="886:20" pos:end="886:37"><operator pos:start="886:20" pos:end="886:20">(</operator><name pos:start="886:21" pos:end="886:36">EST_ERR_SSL_READ</name><operator pos:start="886:37" pos:end="886:37">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="888:9" pos:end="888:29"><expr pos:start="888:9" pos:end="888:28"><operator pos:start="888:9" pos:end="888:9">*</operator><name pos:start="888:10" pos:end="888:17">read_cnt</name> <operator pos:start="888:19" pos:end="888:20">+=</operator> <name pos:start="888:22" pos:end="888:28">cur_cnt</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt pos:start="891:5" pos:end="894:5"><if pos:start="891:5" pos:end="894:5">if <condition pos:start="891:8" pos:end="891:67">(<expr pos:start="891:9" pos:end="891:66"><operator pos:start="891:9" pos:end="891:9">(</operator><operator pos:start="891:10" pos:end="891:10">*</operator><name pos:start="891:11" pos:end="891:18">read_cnt</name> <operator pos:start="891:20" pos:end="891:21">==</operator> <name pos:start="891:23" pos:end="891:29">buf_max</name><operator pos:start="891:30" pos:end="891:30">)</operator> <operator pos:start="891:32" pos:end="891:33">&amp;&amp;</operator> <call pos:start="891:35" pos:end="891:66"><name pos:start="891:35" pos:end="891:42">SSL_peek</name><argument_list pos:start="891:43" pos:end="891:66">(<argument pos:start="891:44" pos:end="891:46"><expr pos:start="891:44" pos:end="891:46"><name pos:start="891:44" pos:end="891:46">ssl</name></expr></argument>, <argument pos:start="891:49" pos:end="891:62"><expr pos:start="891:49" pos:end="891:62"><operator pos:start="891:49" pos:end="891:49">&amp;</operator><name pos:start="891:50" pos:end="891:62">peek_read_buf</name></expr></argument>, <argument pos:start="891:65" pos:end="891:65"><expr pos:start="891:65" pos:end="891:65"><literal type="number" pos:start="891:65" pos:end="891:65">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="891:69" pos:end="894:5">{<block_content pos:start="892:9" pos:end="893:46">
        <expr_stmt pos:start="892:9" pos:end="892:61"><expr pos:start="892:9" pos:end="892:60"><call pos:start="892:9" pos:end="892:60"><name pos:start="892:9" pos:end="892:19">EST_LOG_ERR</name><argument_list pos:start="892:20" pos:end="892:60">(<argument pos:start="892:21" pos:end="892:59"><expr pos:start="892:21" pos:end="892:59"><literal type="string" pos:start="892:21" pos:end="892:59">"Buffer too small for received message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="893:9" pos:end="893:46">return<expr pos:start="893:15" pos:end="893:45"><operator pos:start="893:15" pos:end="893:15">(</operator><name pos:start="893:16" pos:end="893:44">EST_ERR_READ_BUFFER_TOO_SMALL</name><operator pos:start="893:45" pos:end="893:45">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <return pos:start="896:5" pos:end="896:26">return <expr pos:start="896:12" pos:end="896:25"><operator pos:start="896:12" pos:end="896:12">(</operator><name pos:start="896:13" pos:end="896:24">EST_ERR_NONE</name><operator pos:start="896:25" pos:end="896:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="898:1" pos:end="906:3">/*
 * This function provides the primary entry point into
 * this module.  It's used by the EST client to read the
 * HTTP response from the server.  The data is read from
 * the SSL context and HTTP parsing is invoked.
 *
 * If EST_ERR_NONE is returned then the raw_buf buffer must
 * be freed by the caller, otherwise, it is freed here.
 */</comment>
<function pos:start="907:1" pos:end="1054:1"><type pos:start="907:1" pos:end="907:9"><name pos:start="907:1" pos:end="907:9">EST_ERROR</name></type> <name pos:start="907:11" pos:end="907:29">est_io_get_response</name> <parameter_list pos:start="907:31" pos:end="908:69">(<parameter pos:start="907:32" pos:end="907:43"><decl pos:start="907:32" pos:end="907:43"><type pos:start="907:32" pos:end="907:43"><name pos:start="907:32" pos:end="907:38">EST_CTX</name> <modifier pos:start="907:40" pos:end="907:40">*</modifier></type><name pos:start="907:41" pos:end="907:43">ctx</name></decl></parameter>, <parameter pos:start="907:46" pos:end="907:53"><decl pos:start="907:46" pos:end="907:53"><type pos:start="907:46" pos:end="907:53"><name pos:start="907:46" pos:end="907:48">SSL</name> <modifier pos:start="907:50" pos:end="907:50">*</modifier></type><name pos:start="907:51" pos:end="907:53">ssl</name></decl></parameter>, <parameter pos:start="907:56" pos:end="907:71"><decl pos:start="907:56" pos:end="907:71"><type pos:start="907:56" pos:end="907:71"><name pos:start="907:56" pos:end="907:68">EST_OPERATION</name></type> <name pos:start="907:70" pos:end="907:71">op</name></decl></parameter>,
                               <parameter pos:start="908:32" pos:end="908:50"><decl pos:start="908:32" pos:end="908:50"><type pos:start="908:32" pos:end="908:50"><name pos:start="908:32" pos:end="908:39">unsigned</name> <name pos:start="908:41" pos:end="908:44">char</name> <modifier pos:start="908:46" pos:end="908:46">*</modifier><modifier pos:start="908:47" pos:end="908:47">*</modifier></type><name pos:start="908:48" pos:end="908:50">buf</name></decl></parameter>, <parameter pos:start="908:53" pos:end="908:68"><decl pos:start="908:53" pos:end="908:68"><type pos:start="908:53" pos:end="908:68"><name pos:start="908:53" pos:end="908:55">int</name> <modifier pos:start="908:57" pos:end="908:57">*</modifier></type><name pos:start="908:58" pos:end="908:68">payload_len</name></decl></parameter>)</parameter_list>
<block pos:start="909:1" pos:end="1054:1">{<block_content pos:start="910:5" pos:end="1053:16">
    <decl_stmt pos:start="910:5" pos:end="910:26"><decl pos:start="910:5" pos:end="910:25"><type pos:start="910:5" pos:end="910:7"><name pos:start="910:5" pos:end="910:7">int</name></type> <name pos:start="910:9" pos:end="910:10">rv</name> <init pos:start="910:12" pos:end="910:25">= <expr pos:start="910:14" pos:end="910:25"><name pos:start="910:14" pos:end="910:25">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="911:5" pos:end="911:22"><decl pos:start="911:5" pos:end="911:21"><type pos:start="911:5" pos:end="911:17"><name pos:start="911:5" pos:end="911:15">HTTP_HEADER</name> <modifier pos:start="911:17" pos:end="911:17">*</modifier></type><name pos:start="911:18" pos:end="911:21">hdrs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="912:5" pos:end="912:16"><decl pos:start="912:5" pos:end="912:15"><type pos:start="912:5" pos:end="912:7"><name pos:start="912:5" pos:end="912:7">int</name></type> <name pos:start="912:9" pos:end="912:15">hdr_cnt</name></decl>;</decl_stmt>
    <decl_stmt pos:start="913:5" pos:end="913:20"><decl pos:start="913:5" pos:end="913:19"><type pos:start="913:5" pos:end="913:7"><name pos:start="913:5" pos:end="913:7">int</name></type> <name pos:start="913:9" pos:end="913:19">http_status</name></decl>;</decl_stmt>
    <decl_stmt pos:start="914:5" pos:end="914:51"><decl pos:start="914:5" pos:end="914:26"><type pos:start="914:5" pos:end="914:19"><name pos:start="914:5" pos:end="914:12">unsigned</name> <name pos:start="914:14" pos:end="914:17">char</name> <modifier pos:start="914:19" pos:end="914:19">*</modifier></type><name pos:start="914:20" pos:end="914:26">raw_buf</name></decl>, <decl pos:start="914:29" pos:end="914:40"><type ref="prev" pos:start="914:5" pos:end="914:19"><modifier pos:start="914:29" pos:end="914:29">*</modifier></type><name pos:start="914:30" pos:end="914:40">payload_buf</name></decl>, <decl pos:start="914:43" pos:end="914:50"><type ref="prev" pos:start="914:5" pos:end="914:19"><modifier pos:start="914:43" pos:end="914:43">*</modifier></type><name pos:start="914:44" pos:end="914:50">payload</name></decl>;</decl_stmt>    
    <decl_stmt pos:start="915:5" pos:end="915:20"><decl pos:start="915:5" pos:end="915:19"><type pos:start="915:5" pos:end="915:7"><name pos:start="915:5" pos:end="915:7">int</name></type> <name pos:start="915:9" pos:end="915:15">raw_len</name> <init pos:start="915:17" pos:end="915:19">= <expr pos:start="915:19" pos:end="915:19"><literal type="number" pos:start="915:19" pos:end="915:19">0</literal></expr></init></decl>;</decl_stmt>
    

    <expr_stmt pos:start="918:5" pos:end="918:33"><expr pos:start="918:5" pos:end="918:32"><name pos:start="918:5" pos:end="918:11">raw_buf</name> <operator pos:start="918:13" pos:end="918:13">=</operator> <call pos:start="918:15" pos:end="918:32"><name pos:start="918:15" pos:end="918:20">malloc</name><argument_list pos:start="918:21" pos:end="918:32">(<argument pos:start="918:22" pos:end="918:31"><expr pos:start="918:22" pos:end="918:31"><name pos:start="918:22" pos:end="918:31">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="919:5" pos:end="922:5"><if pos:start="919:5" pos:end="922:5">if <condition pos:start="919:8" pos:end="919:24">(<expr pos:start="919:9" pos:end="919:23"><name pos:start="919:9" pos:end="919:15">raw_buf</name> <operator pos:start="919:17" pos:end="919:18">==</operator> <name pos:start="919:20" pos:end="919:23">NULL</name></expr>)</condition> <block pos:start="919:26" pos:end="922:5">{<block_content pos:start="920:9" pos:end="921:30">
        <expr_stmt pos:start="920:9" pos:end="920:49"><expr pos:start="920:9" pos:end="920:48"><call pos:start="920:9" pos:end="920:48"><name pos:start="920:9" pos:end="920:19">EST_LOG_ERR</name><argument_list pos:start="920:20" pos:end="920:48">(<argument pos:start="920:21" pos:end="920:47"><expr pos:start="920:21" pos:end="920:47"><literal type="string" pos:start="920:21" pos:end="920:47">"Unable to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="921:9" pos:end="921:30">return <expr pos:start="921:16" pos:end="921:29"><name pos:start="921:16" pos:end="921:29">EST_ERR_MALLOC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="923:5" pos:end="923:35"><expr pos:start="923:5" pos:end="923:34"><call pos:start="923:5" pos:end="923:34"><name pos:start="923:5" pos:end="923:13">memzero_s</name><argument_list pos:start="923:14" pos:end="923:34">(<argument pos:start="923:15" pos:end="923:21"><expr pos:start="923:15" pos:end="923:21"><name pos:start="923:15" pos:end="923:21">raw_buf</name></expr></argument>, <argument pos:start="923:24" pos:end="923:33"><expr pos:start="923:24" pos:end="923:33"><name pos:start="923:24" pos:end="923:33">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="924:5" pos:end="924:22"><expr pos:start="924:5" pos:end="924:21"><name pos:start="924:5" pos:end="924:11">payload</name> <operator pos:start="924:13" pos:end="924:13">=</operator> <name pos:start="924:15" pos:end="924:21">raw_buf</name></expr>;</expr_stmt>
    
    <comment type="block" pos:start="926:5" pos:end="928:7">/*
     * Read the raw data from the SSL connection
     */</comment>
    <expr_stmt pos:start="929:5" pos:end="929:80"><expr pos:start="929:5" pos:end="929:79"><name pos:start="929:5" pos:end="929:6">rv</name> <operator pos:start="929:8" pos:end="929:8">=</operator> <call pos:start="929:10" pos:end="929:79"><name pos:start="929:10" pos:end="929:24">est_io_read_raw</name><argument_list pos:start="929:25" pos:end="929:79">(<argument pos:start="929:26" pos:end="929:28"><expr pos:start="929:26" pos:end="929:28"><name pos:start="929:26" pos:end="929:28">ssl</name></expr></argument>, <argument pos:start="929:31" pos:end="929:37"><expr pos:start="929:31" pos:end="929:37"><name pos:start="929:31" pos:end="929:37">raw_buf</name></expr></argument>, <argument pos:start="929:40" pos:end="929:49"><expr pos:start="929:40" pos:end="929:49"><name pos:start="929:40" pos:end="929:49">EST_CA_MAX</name></expr></argument>, <argument pos:start="929:52" pos:end="929:59"><expr pos:start="929:52" pos:end="929:59"><operator pos:start="929:52" pos:end="929:52">&amp;</operator><name pos:start="929:53" pos:end="929:59">raw_len</name></expr></argument>, <argument pos:start="929:62" pos:end="929:78"><expr pos:start="929:62" pos:end="929:78"><name pos:start="929:62" pos:end="929:78"><name pos:start="929:62" pos:end="929:64">ctx</name><operator pos:start="929:65" pos:end="929:66">-&gt;</operator><name pos:start="929:67" pos:end="929:78">read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="930:5" pos:end="934:5"><if pos:start="930:5" pos:end="934:5">if <condition pos:start="930:8" pos:end="930:27">(<expr pos:start="930:9" pos:end="930:26"><name pos:start="930:9" pos:end="930:10">rv</name> <operator pos:start="930:12" pos:end="930:13">!=</operator> <name pos:start="930:15" pos:end="930:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="930:29" pos:end="934:5">{<block_content pos:start="931:9" pos:end="933:20">
        <expr_stmt pos:start="931:9" pos:end="931:53"><expr pos:start="931:9" pos:end="931:52"><call pos:start="931:9" pos:end="931:52"><name pos:start="931:9" pos:end="931:20">EST_LOG_INFO</name><argument_list pos:start="931:21" pos:end="931:52">(<argument pos:start="931:22" pos:end="931:51"><expr pos:start="931:22" pos:end="931:51"><literal type="string" pos:start="931:22" pos:end="931:51">"No valid response to process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="932:9" pos:end="932:22"><expr pos:start="932:9" pos:end="932:21"><call pos:start="932:9" pos:end="932:21"><name pos:start="932:9" pos:end="932:12">free</name><argument_list pos:start="932:13" pos:end="932:21">(<argument pos:start="932:14" pos:end="932:20"><expr pos:start="932:14" pos:end="932:20"><name pos:start="932:14" pos:end="932:20">raw_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="933:9" pos:end="933:20">return <expr pos:start="933:16" pos:end="933:19"><operator pos:start="933:16" pos:end="933:16">(</operator><name pos:start="933:17" pos:end="933:18">rv</name><operator pos:start="933:19" pos:end="933:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="935:5" pos:end="939:5"><if pos:start="935:5" pos:end="939:5">if <condition pos:start="935:8" pos:end="935:21">(<expr pos:start="935:9" pos:end="935:20"><name pos:start="935:9" pos:end="935:15">raw_len</name> <operator pos:start="935:17" pos:end="935:18">&lt;=</operator> <literal type="number" pos:start="935:20" pos:end="935:20">0</literal></expr>)</condition> <block pos:start="935:23" pos:end="939:5">{<block_content pos:start="936:9" pos:end="938:40">
        <expr_stmt pos:start="936:9" pos:end="936:65"><expr pos:start="936:9" pos:end="936:64"><call pos:start="936:9" pos:end="936:64"><name pos:start="936:9" pos:end="936:20">EST_LOG_WARN</name><argument_list pos:start="936:21" pos:end="936:64">(<argument pos:start="936:22" pos:end="936:63"><expr pos:start="936:22" pos:end="936:63"><literal type="string" pos:start="936:22" pos:end="936:63">"Received empty HTTP response from server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="937:9" pos:end="937:22"><expr pos:start="937:9" pos:end="937:21"><call pos:start="937:9" pos:end="937:21"><name pos:start="937:9" pos:end="937:12">free</name><argument_list pos:start="937:13" pos:end="937:21">(<argument pos:start="937:14" pos:end="937:20"><expr pos:start="937:14" pos:end="937:20"><name pos:start="937:14" pos:end="937:20">raw_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="938:9" pos:end="938:40">return <expr pos:start="938:16" pos:end="938:39"><operator pos:start="938:16" pos:end="938:16">(</operator><name pos:start="938:17" pos:end="938:38">EST_ERR_HTTP_NOT_FOUND</name><operator pos:start="938:39" pos:end="938:39">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="940:5" pos:end="940:56"><expr pos:start="940:5" pos:end="940:55"><call pos:start="940:5" pos:end="940:55"><name pos:start="940:5" pos:end="940:16">EST_LOG_INFO</name><argument_list pos:start="940:17" pos:end="940:55">(<argument pos:start="940:18" pos:end="940:45"><expr pos:start="940:18" pos:end="940:45"><literal type="string" pos:start="940:18" pos:end="940:45">"Read %d bytes of HTTP data"</literal></expr></argument>, <argument pos:start="940:48" pos:end="940:54"><expr pos:start="940:48" pos:end="940:54"><name pos:start="940:48" pos:end="940:54">raw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block" pos:start="942:5" pos:end="945:7">/*
     * Parse the HTTP header to get the status
     * Look for status 200 for success
     */</comment>
    <expr_stmt pos:start="946:5" pos:end="946:61"><expr pos:start="946:5" pos:end="946:60"><name pos:start="946:5" pos:end="946:15">http_status</name> <operator pos:start="946:17" pos:end="946:17">=</operator> <call pos:start="946:19" pos:end="946:60"><name pos:start="946:19" pos:end="946:51">est_io_parse_response_status_code</name><argument_list pos:start="946:52" pos:end="946:60">(<argument pos:start="946:53" pos:end="946:59"><expr pos:start="946:53" pos:end="946:59"><name pos:start="946:53" pos:end="946:59">raw_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="947:5" pos:end="947:40"><expr pos:start="947:5" pos:end="947:39"><name pos:start="947:5" pos:end="947:25"><name pos:start="947:5" pos:end="947:7">ctx</name><operator pos:start="947:8" pos:end="947:9">-&gt;</operator><name pos:start="947:10" pos:end="947:25">last_http_status</name></name> <operator pos:start="947:27" pos:end="947:27">=</operator> <name pos:start="947:29" pos:end="947:39">http_status</name></expr>;</expr_stmt>
    <expr_stmt pos:start="948:5" pos:end="948:50"><expr pos:start="948:5" pos:end="948:49"><name pos:start="948:5" pos:end="948:8">hdrs</name> <operator pos:start="948:10" pos:end="948:10">=</operator> <call pos:start="948:12" pos:end="948:49"><name pos:start="948:12" pos:end="948:29">parse_http_headers</name><argument_list pos:start="948:30" pos:end="948:49">(<argument pos:start="948:31" pos:end="948:38"><expr pos:start="948:31" pos:end="948:38"><operator pos:start="948:31" pos:end="948:31">&amp;</operator><name pos:start="948:32" pos:end="948:38">payload</name></expr></argument>, <argument pos:start="948:41" pos:end="948:48"><expr pos:start="948:41" pos:end="948:48"><operator pos:start="948:41" pos:end="948:41">&amp;</operator><name pos:start="948:42" pos:end="948:48">hdr_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="949:5" pos:end="949:57"><expr pos:start="949:5" pos:end="949:56"><call pos:start="949:5" pos:end="949:56"><name pos:start="949:5" pos:end="949:16">EST_LOG_INFO</name><argument_list pos:start="949:17" pos:end="949:56">(<argument pos:start="949:18" pos:end="949:42"><expr pos:start="949:18" pos:end="949:42"><literal type="string" pos:start="949:18" pos:end="949:42">"HTTP status %d received"</literal></expr></argument>, <argument pos:start="949:45" pos:end="949:55"><expr pos:start="949:45" pos:end="949:55"><name pos:start="949:45" pos:end="949:55">http_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="951:5" pos:end="954:7">/*
     * Check the Status header first to see
     * if the server accepted our request.
     */</comment>
    <switch pos:start="955:5" pos:end="1011:5">switch <condition pos:start="955:12" pos:end="955:24">(<expr pos:start="955:13" pos:end="955:23"><name pos:start="955:13" pos:end="955:23">http_status</name></expr>)</condition> <block pos:start="955:26" pos:end="1011:5">{<block_content pos:start="956:5" pos:end="1010:14">
    <case pos:start="956:5" pos:end="956:13">case <expr pos:start="956:10" pos:end="956:12"><literal type="number" pos:start="956:10" pos:end="956:12">200</literal></expr>:</case>
        <comment type="block" pos:start="957:9" pos:end="957:47">/* Server reported OK, nothing to do */</comment>
        <break pos:start="958:9" pos:end="958:14">break;</break>
    <case pos:start="959:5" pos:end="959:13">case <expr pos:start="959:10" pos:end="959:12"><literal type="number" pos:start="959:10" pos:end="959:12">204</literal></expr>:</case>
    <case pos:start="960:5" pos:end="960:13">case <expr pos:start="960:10" pos:end="960:12"><literal type="number" pos:start="960:10" pos:end="960:12">404</literal></expr>:</case>
        <expr_stmt pos:start="961:9" pos:end="961:78"><expr pos:start="961:9" pos:end="961:77"><call pos:start="961:9" pos:end="961:77"><name pos:start="961:9" pos:end="961:19">EST_LOG_ERR</name><argument_list pos:start="961:20" pos:end="961:77">(<argument pos:start="961:21" pos:end="961:76"><expr pos:start="961:21" pos:end="961:76"><literal type="string" pos:start="961:21" pos:end="961:76">"Server responded with 204/404, no content or not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="962:9" pos:end="968:9"><if pos:start="962:9" pos:end="964:9">if <condition pos:start="962:12" pos:end="962:34">(<expr pos:start="962:13" pos:end="962:33"><name pos:start="962:13" pos:end="962:14">op</name> <operator pos:start="962:16" pos:end="962:17">==</operator> <name pos:start="962:19" pos:end="962:33">EST_OP_CSRATTRS</name></expr>)</condition> <block pos:start="962:36" pos:end="964:9">{<block_content pos:start="963:13" pos:end="963:30">
	    <expr_stmt pos:start="963:13" pos:end="963:30"><expr pos:start="963:13" pos:end="963:29"><name pos:start="963:13" pos:end="963:14">rv</name> <operator pos:start="963:16" pos:end="963:16">=</operator> <name pos:start="963:18" pos:end="963:29">EST_ERR_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="964:11" pos:end="966:9">else if <condition pos:start="964:19" pos:end="964:38">(<expr pos:start="964:20" pos:end="964:37"><name pos:start="964:20" pos:end="964:30">http_status</name> <operator pos:start="964:32" pos:end="964:33">==</operator> <literal type="number" pos:start="964:35" pos:end="964:37">404</literal></expr>)</condition> <block pos:start="964:40" pos:end="966:9">{<block_content pos:start="965:13" pos:end="965:40">
            <expr_stmt pos:start="965:13" pos:end="965:40"><expr pos:start="965:13" pos:end="965:39"><name pos:start="965:13" pos:end="965:14">rv</name> <operator pos:start="965:16" pos:end="965:16">=</operator> <name pos:start="965:18" pos:end="965:39">EST_ERR_HTTP_NOT_FOUND</name></expr>;</expr_stmt>            
        </block_content>}</block></if> <else pos:start="966:11" pos:end="968:9">else <block pos:start="966:16" pos:end="968:9">{<block_content pos:start="967:13" pos:end="967:33">
            <expr_stmt pos:start="967:13" pos:end="967:33"><expr pos:start="967:13" pos:end="967:32"><name pos:start="967:13" pos:end="967:14">rv</name> <operator pos:start="967:16" pos:end="967:16">=</operator> <name pos:start="967:18" pos:end="967:32">EST_ERR_UNKNOWN</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break pos:start="969:9" pos:end="969:14">break;</break>
    <case pos:start="970:5" pos:end="970:13">case <expr pos:start="970:10" pos:end="970:12"><literal type="number" pos:start="970:10" pos:end="970:12">202</literal></expr>:</case>
        <comment type="block" pos:start="971:9" pos:end="971:42">/* Server is asking for a retry */</comment>
        <expr_stmt pos:start="972:9" pos:end="972:62"><expr pos:start="972:9" pos:end="972:61"><call pos:start="972:9" pos:end="972:61"><name pos:start="972:9" pos:end="972:20">EST_LOG_INFO</name><argument_list pos:start="972:21" pos:end="972:61">(<argument pos:start="972:22" pos:end="972:60"><expr pos:start="972:22" pos:end="972:60"><literal type="string" pos:start="972:22" pos:end="972:60">"EST server responded with retry-after"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="973:9" pos:end="973:68"><expr pos:start="973:9" pos:end="973:67"><name pos:start="973:9" pos:end="973:10">rv</name> <operator pos:start="973:12" pos:end="973:12">=</operator> <call pos:start="973:14" pos:end="973:67"><name pos:start="973:14" pos:end="973:47">est_io_parse_http_retry_after_resp</name><argument_list pos:start="973:48" pos:end="973:67">(<argument pos:start="973:49" pos:end="973:51"><expr pos:start="973:49" pos:end="973:51"><name pos:start="973:49" pos:end="973:51">ctx</name></expr></argument>, <argument pos:start="973:54" pos:end="973:57"><expr pos:start="973:54" pos:end="973:57"><name pos:start="973:54" pos:end="973:57">hdrs</name></expr></argument>, <argument pos:start="973:60" pos:end="973:66"><expr pos:start="973:60" pos:end="973:66"><name pos:start="973:60" pos:end="973:66">hdr_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="974:9" pos:end="974:14">break;</break>
    <case pos:start="975:5" pos:end="975:13">case <expr pos:start="975:10" pos:end="975:12"><literal type="number" pos:start="975:10" pos:end="975:12">400</literal></expr>:</case>
        <expr_stmt pos:start="976:9" pos:end="976:69"><expr pos:start="976:9" pos:end="976:68"><call pos:start="976:9" pos:end="976:68"><name pos:start="976:9" pos:end="976:19">EST_LOG_ERR</name><argument_list pos:start="976:20" pos:end="976:68">(<argument pos:start="976:21" pos:end="976:67"><expr pos:start="976:21" pos:end="976:67"><literal type="string" pos:start="976:21" pos:end="976:67">"HTTP response from EST server was BAD REQUEST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="977:9" pos:end="977:34"><expr pos:start="977:9" pos:end="977:33"><name pos:start="977:9" pos:end="977:10">rv</name> <operator pos:start="977:12" pos:end="977:12">=</operator> <name pos:start="977:14" pos:end="977:33">EST_ERR_HTTP_BAD_REQ</name></expr>;</expr_stmt>
	<break pos:start="978:9" pos:end="978:14">break;</break>
    <case pos:start="979:5" pos:end="979:13">case <expr pos:start="979:10" pos:end="979:12"><literal type="number" pos:start="979:10" pos:end="979:12">401</literal></expr>:</case>
        <comment type="block" pos:start="980:9" pos:end="980:56">/* Server is requesting user auth credentials */</comment>
        <expr_stmt pos:start="981:9" pos:end="981:66"><expr pos:start="981:9" pos:end="981:65"><call pos:start="981:9" pos:end="981:65"><name pos:start="981:9" pos:end="981:20">EST_LOG_INFO</name><argument_list pos:start="981:21" pos:end="981:65">(<argument pos:start="981:22" pos:end="981:64"><expr pos:start="981:22" pos:end="981:64"><literal type="string" pos:start="981:22" pos:end="981:64">"EST server requesting user authentication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="983:9" pos:end="985:11">/* Check if we've already tried authenticating, if so, then bail
         * First time through, auth_mode will be set to NONE
         */</comment>
        <if_stmt pos:start="986:9" pos:end="992:9"><if pos:start="986:9" pos:end="992:9">if <condition pos:start="986:12" pos:end="988:41">(<expr pos:start="986:13" pos:end="988:40"><name pos:start="986:13" pos:end="986:26"><name pos:start="986:13" pos:end="986:15">ctx</name><operator pos:start="986:16" pos:end="986:17">-&gt;</operator><name pos:start="986:18" pos:end="986:26">auth_mode</name></name> <operator pos:start="986:28" pos:end="986:29">==</operator> <name pos:start="986:31" pos:end="986:41">AUTH_DIGEST</name> <operator pos:start="986:43" pos:end="986:44">||</operator>
            <name pos:start="987:13" pos:end="987:26"><name pos:start="987:13" pos:end="987:15">ctx</name><operator pos:start="987:16" pos:end="987:17">-&gt;</operator><name pos:start="987:18" pos:end="987:26">auth_mode</name></name> <operator pos:start="987:28" pos:end="987:29">==</operator> <name pos:start="987:31" pos:end="987:40">AUTH_BASIC</name> <operator pos:start="987:42" pos:end="987:43">||</operator>
            <name pos:start="988:13" pos:end="988:26"><name pos:start="988:13" pos:end="988:15">ctx</name><operator pos:start="988:16" pos:end="988:17">-&gt;</operator><name pos:start="988:18" pos:end="988:26">auth_mode</name></name> <operator pos:start="988:28" pos:end="988:29">==</operator> <name pos:start="988:31" pos:end="988:40">AUTH_TOKEN</name></expr>)</condition> <block pos:start="988:43" pos:end="992:9">{<block_content pos:start="989:13" pos:end="991:18">
            <expr_stmt pos:start="989:13" pos:end="989:39"><expr pos:start="989:13" pos:end="989:38"><name pos:start="989:13" pos:end="989:26"><name pos:start="989:13" pos:end="989:15">ctx</name><operator pos:start="989:16" pos:end="989:17">-&gt;</operator><name pos:start="989:18" pos:end="989:26">auth_mode</name></name> <operator pos:start="989:28" pos:end="989:28">=</operator> <name pos:start="989:30" pos:end="989:38">AUTH_FAIL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="990:13" pos:end="990:35"><expr pos:start="990:13" pos:end="990:34"><name pos:start="990:13" pos:end="990:14">rv</name> <operator pos:start="990:16" pos:end="990:16">=</operator> <name pos:start="990:18" pos:end="990:34">EST_ERR_AUTH_FAIL</name></expr>;</expr_stmt>
            <break pos:start="991:13" pos:end="991:18">break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="993:9" pos:end="993:59"><expr pos:start="993:9" pos:end="993:58"><call pos:start="993:9" pos:end="993:58"><name pos:start="993:9" pos:end="993:38">est_io_parse_http_auth_request</name><argument_list pos:start="993:39" pos:end="993:58">(<argument pos:start="993:40" pos:end="993:42"><expr pos:start="993:40" pos:end="993:42"><name pos:start="993:40" pos:end="993:42">ctx</name></expr></argument>, <argument pos:start="993:45" pos:end="993:48"><expr pos:start="993:45" pos:end="993:48"><name pos:start="993:45" pos:end="993:48">hdrs</name></expr></argument>, <argument pos:start="993:51" pos:end="993:57"><expr pos:start="993:51" pos:end="993:57"><name pos:start="993:51" pos:end="993:57">hdr_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="994:9" pos:end="994:31"><expr pos:start="994:9" pos:end="994:30"><name pos:start="994:9" pos:end="994:10">rv</name> <operator pos:start="994:12" pos:end="994:12">=</operator> <name pos:start="994:14" pos:end="994:30">EST_ERR_AUTH_FAIL</name></expr>;</expr_stmt>
        <break pos:start="995:9" pos:end="995:14">break;</break>
            
    <case pos:start="997:5" pos:end="997:13">case <expr pos:start="997:10" pos:end="997:12"><literal type="number" pos:start="997:10" pos:end="997:12">423</literal></expr>:</case>
        <expr_stmt pos:start="998:9" pos:end="998:100"><expr pos:start="998:9" pos:end="998:99"><call pos:start="998:9" pos:end="998:99"><name pos:start="998:9" pos:end="998:19">EST_LOG_ERR</name><argument_list pos:start="998:20" pos:end="998:99">(<argument pos:start="998:21" pos:end="998:98"><expr pos:start="998:21" pos:end="998:98"><literal type="string" pos:start="998:21" pos:end="998:98">"Server responded with 423, the content we are attempting to access is locked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="999:9" pos:end="999:33"><expr pos:start="999:9" pos:end="999:32"><name pos:start="999:9" pos:end="999:10">rv</name> <operator pos:start="999:12" pos:end="999:12">=</operator> <name pos:start="999:14" pos:end="999:32">EST_ERR_HTTP_LOCKED</name></expr>;</expr_stmt>
        <break pos:start="1000:9" pos:end="1000:14">break;</break>
    <case pos:start="1001:5" pos:end="1001:12">case <expr pos:start="1001:10" pos:end="1001:11"><operator pos:start="1001:10" pos:end="1001:10">-</operator><literal type="number" pos:start="1001:11" pos:end="1001:11">1</literal></expr>:</case>
        <comment type="block" pos:start="1002:9" pos:end="1002:39">/* Unsupported HTTP response */</comment>
        <expr_stmt pos:start="1003:9" pos:end="1003:83"><expr pos:start="1003:9" pos:end="1003:82"><call pos:start="1003:9" pos:end="1003:82"><name pos:start="1003:9" pos:end="1003:19">EST_LOG_ERR</name><argument_list pos:start="1003:20" pos:end="1003:82">(<argument pos:start="1003:21" pos:end="1003:68"><expr pos:start="1003:21" pos:end="1003:68"><literal type="string" pos:start="1003:21" pos:end="1003:68">"Unsupported HTTP response from EST server (%d)"</literal></expr></argument>, <argument pos:start="1003:71" pos:end="1003:81"><expr pos:start="1003:71" pos:end="1003:81"><name pos:start="1003:71" pos:end="1003:81">http_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1004:9" pos:end="1004:29"><expr pos:start="1004:9" pos:end="1004:28"><name pos:start="1004:9" pos:end="1004:10">rv</name> <operator pos:start="1004:12" pos:end="1004:12">=</operator> <name pos:start="1004:14" pos:end="1004:28">EST_ERR_UNKNOWN</name></expr>;</expr_stmt>
        <break pos:start="1005:9" pos:end="1005:14">break;</break>
    <default pos:start="1006:5" pos:end="1006:12">default:</default>
        <comment type="block" pos:start="1007:9" pos:end="1007:77">/* Some other HTTP response was given, do we want to handle these? */</comment>
        <expr_stmt pos:start="1008:9" pos:end="1008:73"><expr pos:start="1008:9" pos:end="1008:72"><call pos:start="1008:9" pos:end="1008:72"><name pos:start="1008:9" pos:end="1008:19">EST_LOG_ERR</name><argument_list pos:start="1008:20" pos:end="1008:72">(<argument pos:start="1008:21" pos:end="1008:58"><expr pos:start="1008:21" pos:end="1008:58"><literal type="string" pos:start="1008:21" pos:end="1008:58">"HTTP response from EST server was %d"</literal></expr></argument>, <argument pos:start="1008:61" pos:end="1008:71"><expr pos:start="1008:61" pos:end="1008:71"><name pos:start="1008:61" pos:end="1008:71">http_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1009:9" pos:end="1009:38"><expr pos:start="1009:9" pos:end="1009:37"><name pos:start="1009:9" pos:end="1009:10">rv</name> <operator pos:start="1009:12" pos:end="1009:12">=</operator> <name pos:start="1009:14" pos:end="1009:37">EST_ERR_HTTP_UNSUPPORTED</name></expr>;</expr_stmt>
        <break pos:start="1010:9" pos:end="1010:14">break;</break>
    </block_content>}</block></switch>

    <if_stmt pos:start="1013:5" pos:end="1045:5"><if pos:start="1013:5" pos:end="1045:5">if <condition pos:start="1013:8" pos:end="1013:27">(<expr pos:start="1013:9" pos:end="1013:26"><name pos:start="1013:9" pos:end="1013:10">rv</name> <operator pos:start="1013:12" pos:end="1013:13">==</operator> <name pos:start="1013:15" pos:end="1013:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1013:29" pos:end="1045:5">{<block_content pos:start="1019:9" pos:end="1044:9">
        <comment type="block" pos:start="1014:9" pos:end="1018:11">/*
         * Get the Content-Type and Content-Length headers
         * and verify the HTTP response contains the correct amount
         * of data.
         */</comment>
        <expr_stmt pos:start="1019:9" pos:end="1019:65"><expr pos:start="1019:9" pos:end="1019:64"><operator pos:start="1019:9" pos:end="1019:9">*</operator><name pos:start="1019:10" pos:end="1019:20">payload_len</name> <operator pos:start="1019:22" pos:end="1019:22">=</operator> <call pos:start="1019:24" pos:end="1019:64"><name pos:start="1019:24" pos:end="1019:45">est_io_check_http_hdrs</name><argument_list pos:start="1019:46" pos:end="1019:64">(<argument pos:start="1019:47" pos:end="1019:50"><expr pos:start="1019:47" pos:end="1019:50"><name pos:start="1019:47" pos:end="1019:50">hdrs</name></expr></argument>, <argument pos:start="1019:53" pos:end="1019:59"><expr pos:start="1019:53" pos:end="1019:59"><name pos:start="1019:53" pos:end="1019:59">hdr_cnt</name></expr></argument>, <argument pos:start="1019:62" pos:end="1019:63"><expr pos:start="1019:62" pos:end="1019:63"><name pos:start="1019:62" pos:end="1019:63">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1020:9" pos:end="1020:58"><expr pos:start="1020:9" pos:end="1020:57"><call pos:start="1020:9" pos:end="1020:57"><name pos:start="1020:9" pos:end="1020:20">EST_LOG_INFO</name><argument_list pos:start="1020:21" pos:end="1020:57">(<argument pos:start="1020:22" pos:end="1020:42"><expr pos:start="1020:22" pos:end="1020:42"><literal type="string" pos:start="1020:22" pos:end="1020:42">"HTTP Content len=%d"</literal></expr></argument>, <argument pos:start="1020:45" pos:end="1020:56"><expr pos:start="1020:45" pos:end="1020:56"><operator pos:start="1020:45" pos:end="1020:45">*</operator><name pos:start="1020:46" pos:end="1020:56">payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1022:9" pos:end="1044:9"><if pos:start="1022:9" pos:end="1028:9">if <condition pos:start="1022:12" pos:end="1022:38">(<expr pos:start="1022:13" pos:end="1022:37"><operator pos:start="1022:13" pos:end="1022:13">*</operator><name pos:start="1022:14" pos:end="1022:24">payload_len</name> <operator pos:start="1022:26" pos:end="1022:26">&gt;</operator> <name pos:start="1022:28" pos:end="1022:37">EST_CA_MAX</name></expr>)</condition> <block pos:start="1022:40" pos:end="1028:9">{<block_content pos:start="1023:13" pos:end="1027:24">
            <expr_stmt pos:start="1023:13" pos:end="1024:36"><expr pos:start="1023:13" pos:end="1024:35"><call pos:start="1023:13" pos:end="1024:35"><name pos:start="1023:13" pos:end="1023:23">EST_LOG_ERR</name><argument_list pos:start="1023:24" pos:end="1024:35">(<argument pos:start="1023:25" pos:end="1023:73"><expr pos:start="1023:25" pos:end="1023:73"><literal type="string" pos:start="1023:25" pos:end="1023:73">"Content Length larger than maximum value of %d."</literal></expr></argument>,
                        <argument pos:start="1024:25" pos:end="1024:34"><expr pos:start="1024:25" pos:end="1024:34"><name pos:start="1024:25" pos:end="1024:34">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1025:13" pos:end="1025:33"><expr pos:start="1025:13" pos:end="1025:32"><name pos:start="1025:13" pos:end="1025:14">rv</name> <operator pos:start="1025:16" pos:end="1025:16">=</operator> <name pos:start="1025:18" pos:end="1025:32">EST_ERR_UNKNOWN</name></expr>;</expr_stmt>
            <expr_stmt pos:start="1026:13" pos:end="1026:29"><expr pos:start="1026:13" pos:end="1026:28"><operator pos:start="1026:13" pos:end="1026:13">*</operator><name pos:start="1026:14" pos:end="1026:24">payload_len</name> <operator pos:start="1026:26" pos:end="1026:26">=</operator> <literal type="number" pos:start="1026:28" pos:end="1026:28">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1027:13" pos:end="1027:24"><expr pos:start="1027:13" pos:end="1027:23"><operator pos:start="1027:13" pos:end="1027:13">*</operator><name pos:start="1027:14" pos:end="1027:16">buf</name> <operator pos:start="1027:18" pos:end="1027:18">=</operator> <name pos:start="1027:20" pos:end="1027:23">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1028:11" pos:end="1031:9">else if <condition pos:start="1028:19" pos:end="1028:37">(<expr pos:start="1028:20" pos:end="1028:36"><operator pos:start="1028:20" pos:end="1028:20">*</operator><name pos:start="1028:21" pos:end="1028:31">payload_len</name> <operator pos:start="1028:33" pos:end="1028:34">==</operator> <literal type="number" pos:start="1028:36" pos:end="1028:36">0</literal></expr>)</condition> <block pos:start="1028:39" pos:end="1031:9">{<block_content pos:start="1029:13" pos:end="1030:24">
            <expr_stmt pos:start="1029:13" pos:end="1029:29"><expr pos:start="1029:13" pos:end="1029:28"><operator pos:start="1029:13" pos:end="1029:13">*</operator><name pos:start="1029:14" pos:end="1029:24">payload_len</name> <operator pos:start="1029:26" pos:end="1029:26">=</operator> <literal type="number" pos:start="1029:28" pos:end="1029:28">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1030:13" pos:end="1030:24"><expr pos:start="1030:13" pos:end="1030:23"><operator pos:start="1030:13" pos:end="1030:13">*</operator><name pos:start="1030:14" pos:end="1030:16">buf</name> <operator pos:start="1030:18" pos:end="1030:18">=</operator> <name pos:start="1030:20" pos:end="1030:23">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1031:11" pos:end="1044:9">else <block pos:start="1031:16" pos:end="1044:9">{<block_content pos:start="1035:13" pos:end="1043:31">
            <comment type="block" pos:start="1032:13" pos:end="1034:15">/*
             * Allocate the buffer to hold the payload to be passed back
             */</comment>
            <expr_stmt pos:start="1035:13" pos:end="1035:47"><expr pos:start="1035:13" pos:end="1035:46"><name pos:start="1035:13" pos:end="1035:23">payload_buf</name> <operator pos:start="1035:25" pos:end="1035:25">=</operator> <call pos:start="1035:27" pos:end="1035:46"><name pos:start="1035:27" pos:end="1035:32">malloc</name><argument_list pos:start="1035:33" pos:end="1035:46">(<argument pos:start="1035:34" pos:end="1035:45"><expr pos:start="1035:34" pos:end="1035:45"><operator pos:start="1035:34" pos:end="1035:34">*</operator><name pos:start="1035:35" pos:end="1035:45">payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            <if_stmt pos:start="1036:13" pos:end="1041:13"><if pos:start="1036:13" pos:end="1041:13">if <condition pos:start="1036:16" pos:end="1036:29">(<expr pos:start="1036:17" pos:end="1036:28"><operator pos:start="1036:17" pos:end="1036:17">!</operator><name pos:start="1036:18" pos:end="1036:28">payload_buf</name></expr>)</condition> <block pos:start="1036:31" pos:end="1041:13">{<block_content pos:start="1037:17" pos:end="1040:38">
                <expr_stmt pos:start="1037:17" pos:end="1037:57"><expr pos:start="1037:17" pos:end="1037:56"><call pos:start="1037:17" pos:end="1037:56"><name pos:start="1037:17" pos:end="1037:27">EST_LOG_ERR</name><argument_list pos:start="1037:28" pos:end="1037:56">(<argument pos:start="1037:29" pos:end="1037:55"><expr pos:start="1037:29" pos:end="1037:55"><literal type="string" pos:start="1037:29" pos:end="1037:55">"Unable to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1038:17" pos:end="1038:30"><expr pos:start="1038:17" pos:end="1038:29"><call pos:start="1038:17" pos:end="1038:29"><name pos:start="1038:17" pos:end="1038:20">free</name><argument_list pos:start="1038:21" pos:end="1038:29">(<argument pos:start="1038:22" pos:end="1038:28"><expr pos:start="1038:22" pos:end="1038:28"><name pos:start="1038:22" pos:end="1038:28">raw_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1039:17" pos:end="1039:27"><expr pos:start="1039:17" pos:end="1039:26"><call pos:start="1039:17" pos:end="1039:26"><name pos:start="1039:17" pos:end="1039:20">free</name><argument_list pos:start="1039:21" pos:end="1039:26">(<argument pos:start="1039:22" pos:end="1039:25"><expr pos:start="1039:22" pos:end="1039:25"><name pos:start="1039:22" pos:end="1039:25">hdrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1040:17" pos:end="1040:38">return <expr pos:start="1040:24" pos:end="1040:37"><name pos:start="1040:24" pos:end="1040:37">EST_ERR_MALLOC</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1042:13" pos:end="1042:71"><expr pos:start="1042:13" pos:end="1042:70"><call pos:start="1042:13" pos:end="1042:70"><name pos:start="1042:13" pos:end="1042:20">memcpy_s</name><argument_list pos:start="1042:21" pos:end="1042:70">(<argument pos:start="1042:22" pos:end="1042:32"><expr pos:start="1042:22" pos:end="1042:32"><name pos:start="1042:22" pos:end="1042:32">payload_buf</name></expr></argument>, <argument pos:start="1042:35" pos:end="1042:46"><expr pos:start="1042:35" pos:end="1042:46"><operator pos:start="1042:35" pos:end="1042:35">*</operator><name pos:start="1042:36" pos:end="1042:46">payload_len</name></expr></argument>, <argument pos:start="1042:49" pos:end="1042:55"><expr pos:start="1042:49" pos:end="1042:55"><name pos:start="1042:49" pos:end="1042:55">payload</name></expr></argument>, <argument pos:start="1042:58" pos:end="1042:69"><expr pos:start="1042:58" pos:end="1042:69"><operator pos:start="1042:58" pos:end="1042:58">*</operator><name pos:start="1042:59" pos:end="1042:69">payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1043:13" pos:end="1043:31"><expr pos:start="1043:13" pos:end="1043:30"><operator pos:start="1043:13" pos:end="1043:13">*</operator><name pos:start="1043:14" pos:end="1043:16">buf</name> <operator pos:start="1043:18" pos:end="1043:18">=</operator> <name pos:start="1043:20" pos:end="1043:30">payload_buf</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1047:5" pos:end="1049:5"><if pos:start="1047:5" pos:end="1049:5">if <condition pos:start="1047:8" pos:end="1047:16">(<expr pos:start="1047:9" pos:end="1047:15"><name pos:start="1047:9" pos:end="1047:15">raw_buf</name></expr>)</condition> <block pos:start="1047:18" pos:end="1049:5">{<block_content pos:start="1048:9" pos:end="1048:22">
        <expr_stmt pos:start="1048:9" pos:end="1048:22"><expr pos:start="1048:9" pos:end="1048:21"><call pos:start="1048:9" pos:end="1048:21"><name pos:start="1048:9" pos:end="1048:12">free</name><argument_list pos:start="1048:13" pos:end="1048:21">(<argument pos:start="1048:14" pos:end="1048:20"><expr pos:start="1048:14" pos:end="1048:20"><name pos:start="1048:14" pos:end="1048:20">raw_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1050:5" pos:end="1052:5"><if pos:start="1050:5" pos:end="1052:5">if <condition pos:start="1050:8" pos:end="1050:13">(<expr pos:start="1050:9" pos:end="1050:12"><name pos:start="1050:9" pos:end="1050:12">hdrs</name></expr>)</condition> <block pos:start="1050:15" pos:end="1052:5">{<block_content pos:start="1051:9" pos:end="1051:19">
        <expr_stmt pos:start="1051:9" pos:end="1051:19"><expr pos:start="1051:9" pos:end="1051:18"><call pos:start="1051:9" pos:end="1051:18"><name pos:start="1051:9" pos:end="1051:12">free</name><argument_list pos:start="1051:13" pos:end="1051:18">(<argument pos:start="1051:14" pos:end="1051:17"><expr pos:start="1051:14" pos:end="1051:17"><name pos:start="1051:14" pos:end="1051:17">hdrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1053:5" pos:end="1053:16">return <expr pos:start="1053:12" pos:end="1053:15"><operator pos:start="1053:12" pos:end="1053:12">(</operator><name pos:start="1053:13" pos:end="1053:14">rv</name><operator pos:start="1053:15" pos:end="1053:15">)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
