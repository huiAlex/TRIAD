<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="source_code/est_server.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="3:3">/*
 * This function sends EST specific HTTP error responses.
 */</comment>
<function pos:start="4:1" pos:end="31:1"><type pos:start="4:1" pos:end="4:4"><name pos:start="4:1" pos:end="4:4">void</name></type> <name pos:start="4:6" pos:end="4:24">est_send_http_error</name> <parameter_list pos:start="4:26" pos:end="4:70">(<parameter pos:start="4:27" pos:end="4:38"><decl pos:start="4:27" pos:end="4:38"><type pos:start="4:27" pos:end="4:38"><name pos:start="4:27" pos:end="4:33">EST_CTX</name> <modifier pos:start="4:35" pos:end="4:35">*</modifier></type><name pos:start="4:36" pos:end="4:38">ctx</name></decl></parameter>, <parameter pos:start="4:41" pos:end="4:54"><decl pos:start="4:41" pos:end="4:54"><type pos:start="4:41" pos:end="4:54"><name pos:start="4:41" pos:end="4:44">void</name> <modifier pos:start="4:46" pos:end="4:46">*</modifier></type><name pos:start="4:47" pos:end="4:54">http_ctx</name></decl></parameter>, <parameter pos:start="4:57" pos:end="4:69"><decl pos:start="4:57" pos:end="4:69"><type pos:start="4:57" pos:end="4:69"><name pos:start="4:57" pos:end="4:59">int</name></type> <name pos:start="4:61" pos:end="4:69">fail_code</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="31:1">{<block_content pos:start="6:5" pos:end="30:5">
    <decl_stmt pos:start="6:5" pos:end="6:65"><decl pos:start="6:5" pos:end="6:64"><type pos:start="6:5" pos:end="6:26"><name pos:start="6:5" pos:end="6:24"><name pos:start="6:5" pos:end="6:10">struct</name> <name pos:start="6:12" pos:end="6:24">mg_connection</name></name> <modifier pos:start="6:26" pos:end="6:26">*</modifier></type><name pos:start="6:27" pos:end="6:30">conn</name> <init pos:start="6:32" pos:end="6:64">= <expr pos:start="6:34" pos:end="6:64"><operator pos:start="6:34" pos:end="6:34">(</operator>struct <name pos:start="6:42" pos:end="6:54">mg_connection</name><operator pos:start="6:55" pos:end="6:55">*</operator><operator pos:start="6:56" pos:end="6:56">)</operator><name pos:start="6:57" pos:end="6:64">http_ctx</name></expr></init></decl>;</decl_stmt>

    <switch pos:start="8:5" pos:end="30:5">switch <condition pos:start="8:12" pos:end="8:22">(<expr pos:start="8:13" pos:end="8:21"><name pos:start="8:13" pos:end="8:21">fail_code</name></expr>)</condition> <block pos:start="8:24" pos:end="30:5">{<block_content pos:start="9:5" pos:end="29:14">
    <case pos:start="9:5" pos:end="9:28">case <expr pos:start="9:10" pos:end="9:27"><name pos:start="9:10" pos:end="9:27">EST_ERR_BAD_PKCS10</name></expr>:</case>
	<expr_stmt pos:start="10:9" pos:end="10:96"><expr pos:start="10:9" pos:end="10:95"><call pos:start="10:9" pos:end="10:95"><name pos:start="10:9" pos:end="10:26">mg_send_http_error</name><argument_list pos:start="10:27" pos:end="10:95">(<argument pos:start="10:28" pos:end="10:31"><expr pos:start="10:28" pos:end="10:31"><name pos:start="10:28" pos:end="10:31">conn</name></expr></argument>, <argument pos:start="10:34" pos:end="10:50"><expr pos:start="10:34" pos:end="10:50"><name pos:start="10:34" pos:end="10:50">EST_HTTP_STAT_400</name></expr></argument>, <argument pos:start="10:53" pos:end="10:73"><expr pos:start="10:53" pos:end="10:73"><name pos:start="10:53" pos:end="10:73">EST_HTTP_STAT_400_TXT</name></expr></argument>, <argument pos:start="10:76" pos:end="10:94"><expr pos:start="10:76" pos:end="10:94"><name pos:start="10:76" pos:end="10:94">EST_BODY_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="11:9" pos:end="11:14">break;</break>
    <case pos:start="12:5" pos:end="12:27">case <expr pos:start="12:10" pos:end="12:26"><name pos:start="12:10" pos:end="12:26">EST_ERR_AUTH_FAIL</name></expr>:</case>
	<expr_stmt pos:start="13:9" pos:end="13:98"><expr pos:start="13:9" pos:end="13:97"><call pos:start="13:9" pos:end="13:97"><name pos:start="13:9" pos:end="13:26">mg_send_http_error</name><argument_list pos:start="13:27" pos:end="13:97">(<argument pos:start="13:28" pos:end="13:31"><expr pos:start="13:28" pos:end="13:31"><name pos:start="13:28" pos:end="13:31">conn</name></expr></argument>, <argument pos:start="13:34" pos:end="13:50"><expr pos:start="13:34" pos:end="13:50"><name pos:start="13:34" pos:end="13:50">EST_HTTP_STAT_401</name></expr></argument>, <argument pos:start="13:53" pos:end="13:73"><expr pos:start="13:53" pos:end="13:73"><name pos:start="13:53" pos:end="13:73">EST_HTTP_STAT_401_TXT</name></expr></argument>, <argument pos:start="13:76" pos:end="13:96"><expr pos:start="13:76" pos:end="13:96"><name pos:start="13:76" pos:end="13:96">EST_BODY_UNAUTHORIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="14:9" pos:end="14:14">break;</break>
    <case pos:start="15:5" pos:end="15:30">case <expr pos:start="15:10" pos:end="15:29"><name pos:start="15:10" pos:end="15:29">EST_ERR_WRONG_METHOD</name></expr>:</case>
	<expr_stmt pos:start="16:9" pos:end="16:94"><expr pos:start="16:9" pos:end="16:93"><call pos:start="16:9" pos:end="16:93"><name pos:start="16:9" pos:end="16:26">mg_send_http_error</name><argument_list pos:start="16:27" pos:end="16:93">(<argument pos:start="16:28" pos:end="16:31"><expr pos:start="16:28" pos:end="16:31"><name pos:start="16:28" pos:end="16:31">conn</name></expr></argument>, <argument pos:start="16:34" pos:end="16:50"><expr pos:start="16:34" pos:end="16:50"><name pos:start="16:34" pos:end="16:50">EST_HTTP_STAT_400</name></expr></argument>, <argument pos:start="16:53" pos:end="16:73"><expr pos:start="16:53" pos:end="16:73"><name pos:start="16:53" pos:end="16:73">EST_HTTP_STAT_400_TXT</name></expr></argument>, <argument pos:start="16:76" pos:end="16:92"><expr pos:start="16:76" pos:end="16:92"><name pos:start="16:76" pos:end="16:92">EST_BODY_BAD_METH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="17:9" pos:end="17:14">break;</break>
    <case pos:start="18:5" pos:end="18:28">case <expr pos:start="18:10" pos:end="18:27"><name pos:start="18:10" pos:end="18:27">EST_ERR_NO_SSL_CTX</name></expr>:</case>
	<expr_stmt pos:start="19:9" pos:end="19:93"><expr pos:start="19:9" pos:end="19:92"><call pos:start="19:9" pos:end="19:92"><name pos:start="19:9" pos:end="19:26">mg_send_http_error</name><argument_list pos:start="19:27" pos:end="19:92">(<argument pos:start="19:28" pos:end="19:31"><expr pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:31">conn</name></expr></argument>, <argument pos:start="19:34" pos:end="19:50"><expr pos:start="19:34" pos:end="19:50"><name pos:start="19:34" pos:end="19:50">EST_HTTP_STAT_400</name></expr></argument>, <argument pos:start="19:53" pos:end="19:73"><expr pos:start="19:53" pos:end="19:73"><name pos:start="19:53" pos:end="19:73">EST_HTTP_STAT_400_TXT</name></expr></argument>, <argument pos:start="19:76" pos:end="19:91"><expr pos:start="19:76" pos:end="19:91"><name pos:start="19:76" pos:end="19:91">EST_BODY_BAD_SSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="20:9" pos:end="20:14">break;</break>
    <case pos:start="21:5" pos:end="21:32">case <expr pos:start="21:10" pos:end="21:31"><name pos:start="21:10" pos:end="21:31">EST_ERR_HTTP_NOT_FOUND</name></expr>:</case>
	<expr_stmt pos:start="22:9" pos:end="22:95"><expr pos:start="22:9" pos:end="22:94"><call pos:start="22:9" pos:end="22:94"><name pos:start="22:9" pos:end="22:26">mg_send_http_error</name><argument_list pos:start="22:27" pos:end="22:94">(<argument pos:start="22:28" pos:end="22:31"><expr pos:start="22:28" pos:end="22:31"><name pos:start="22:28" pos:end="22:31">conn</name></expr></argument>, <argument pos:start="22:34" pos:end="22:50"><expr pos:start="22:34" pos:end="22:50"><name pos:start="22:34" pos:end="22:50">EST_HTTP_STAT_404</name></expr></argument>, <argument pos:start="22:53" pos:end="22:73"><expr pos:start="22:53" pos:end="22:73"><name pos:start="22:53" pos:end="22:73">EST_HTTP_STAT_404_TXT</name></expr></argument>, <argument pos:start="22:76" pos:end="22:93"><expr pos:start="22:76" pos:end="22:93"><name pos:start="22:76" pos:end="22:93">EST_BODY_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="23:9" pos:end="23:14">break;</break>
    <case pos:start="24:5" pos:end="24:33">case <expr pos:start="24:10" pos:end="24:32"><name pos:start="24:10" pos:end="24:32">EST_ERR_HTTP_NO_CONTENT</name></expr>:</case>
	<expr_stmt pos:start="25:9" pos:end="25:79"><expr pos:start="25:9" pos:end="25:78"><call pos:start="25:9" pos:end="25:78"><name pos:start="25:9" pos:end="25:26">mg_send_http_error</name><argument_list pos:start="25:27" pos:end="25:78">(<argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">conn</name></expr></argument>, <argument pos:start="25:34" pos:end="25:50"><expr pos:start="25:34" pos:end="25:50"><name pos:start="25:34" pos:end="25:50">EST_HTTP_STAT_204</name></expr></argument>, <argument pos:start="25:53" pos:end="25:73"><expr pos:start="25:53" pos:end="25:73"><name pos:start="25:53" pos:end="25:73">EST_HTTP_STAT_204_TXT</name></expr></argument>, <argument pos:start="25:76" pos:end="25:77"><expr pos:start="25:76" pos:end="25:77"><literal type="string" pos:start="25:76" pos:end="25:77">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="26:9" pos:end="26:14">break;</break>
    <default pos:start="27:5" pos:end="27:12">default:</default>
	<expr_stmt pos:start="28:9" pos:end="28:97"><expr pos:start="28:9" pos:end="28:96"><call pos:start="28:9" pos:end="28:96"><name pos:start="28:9" pos:end="28:26">mg_send_http_error</name><argument_list pos:start="28:27" pos:end="28:96">(<argument pos:start="28:28" pos:end="28:31"><expr pos:start="28:28" pos:end="28:31"><name pos:start="28:28" pos:end="28:31">conn</name></expr></argument>, <argument pos:start="28:34" pos:end="28:50"><expr pos:start="28:34" pos:end="28:50"><name pos:start="28:34" pos:end="28:50">EST_HTTP_STAT_400</name></expr></argument>, <argument pos:start="28:53" pos:end="28:73"><expr pos:start="28:53" pos:end="28:73"><name pos:start="28:53" pos:end="28:73">EST_HTTP_STAT_400_TXT</name></expr></argument>, <argument pos:start="28:76" pos:end="28:95"><expr pos:start="28:76" pos:end="28:95"><name pos:start="28:76" pos:end="28:95">EST_BODY_UNKNOWN_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="29:9" pos:end="29:14">break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>
<comment type="block" pos:start="32:1" pos:end="37:3">/*
 * This function sends a HTTP 202 Accepted response to the 
 * client with the retry-after value from the CA. This
 * notifies the client that it should check back later to
 * see if the CSR was approved.
 */</comment>
<function pos:start="38:1" pos:end="59:1"><type pos:start="38:1" pos:end="38:9"><name pos:start="38:1" pos:end="38:9">EST_ERROR</name></type> <name pos:start="38:11" pos:end="38:42">est_server_send_http_retry_after</name> <parameter_list pos:start="38:44" pos:end="38:84">(<parameter pos:start="38:45" pos:end="38:56"><decl pos:start="38:45" pos:end="38:56"><type pos:start="38:45" pos:end="38:56"><name pos:start="38:45" pos:end="38:51">EST_CTX</name> <modifier pos:start="38:53" pos:end="38:53">*</modifier></type><name pos:start="38:54" pos:end="38:56">ctx</name></decl></parameter>, <parameter pos:start="38:59" pos:end="38:72"><decl pos:start="38:59" pos:end="38:72"><type pos:start="38:59" pos:end="38:72"><name pos:start="38:59" pos:end="38:62">void</name> <modifier pos:start="38:64" pos:end="38:64">*</modifier></type><name pos:start="38:65" pos:end="38:72">http_ctx</name></decl></parameter>, <parameter pos:start="38:75" pos:end="38:83"><decl pos:start="38:75" pos:end="38:83"><type pos:start="38:75" pos:end="38:83"><name pos:start="38:75" pos:end="38:77">int</name></type> <name pos:start="38:79" pos:end="38:83">delay</name></decl></parameter>)</parameter_list>
<block pos:start="39:1" pos:end="59:1">{<block_content pos:start="40:5" pos:end="58:26">
    <decl_stmt pos:start="40:5" pos:end="40:36"><decl pos:start="40:5" pos:end="40:35"><type pos:start="40:5" pos:end="40:8"><name pos:start="40:5" pos:end="40:8">char</name></type> <name pos:start="40:10" pos:end="40:35"><name pos:start="40:10" pos:end="40:17">http_hdr</name><index pos:start="40:18" pos:end="40:35">[<expr pos:start="40:19" pos:end="40:34"><name pos:start="40:19" pos:end="40:34">EST_HTTP_HDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="41:5" pos:end="41:65"><decl pos:start="41:5" pos:end="41:64"><type pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:10">struct</name> <name pos:start="41:12" pos:end="41:24">mg_connection</name></name> <modifier pos:start="41:26" pos:end="41:26">*</modifier></type><name pos:start="41:27" pos:end="41:30">conn</name> <init pos:start="41:32" pos:end="41:64">= <expr pos:start="41:34" pos:end="41:64"><operator pos:start="41:34" pos:end="41:34">(</operator>struct <name pos:start="41:42" pos:end="41:54">mg_connection</name><operator pos:start="41:55" pos:end="41:55">*</operator><operator pos:start="41:56" pos:end="41:56">)</operator><name pos:start="41:57" pos:end="41:64">http_ctx</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="43:5" pos:end="51:26"><expr pos:start="43:5" pos:end="51:25"><call pos:start="43:5" pos:end="51:25"><name pos:start="43:5" pos:end="43:12">snprintf</name><argument_list pos:start="43:13" pos:end="51:25">(<argument pos:start="43:14" pos:end="43:21"><expr pos:start="43:14" pos:end="43:21"><name pos:start="43:14" pos:end="43:21">http_hdr</name></expr></argument>, <argument pos:start="43:24" pos:end="43:39"><expr pos:start="43:24" pos:end="43:39"><name pos:start="43:24" pos:end="43:39">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="43:42" pos:end="43:61"><expr pos:start="43:42" pos:end="43:61"><literal type="string" pos:start="43:42" pos:end="43:61">"%s%s%s%s%s: %d%s%s"</literal></expr></argument>, 
	<argument pos:start="44:9" pos:end="44:24"><expr pos:start="44:9" pos:end="44:24"><name pos:start="44:9" pos:end="44:24">EST_HTTP_HDR_202</name></expr></argument>,
        <argument pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:24">EST_HTTP_HDR_EOL</name></expr></argument>, 
	<argument pos:start="46:9" pos:end="46:29"><expr pos:start="46:9" pos:end="46:29"><name pos:start="46:9" pos:end="46:29">EST_HTTP_HDR_STAT_202</name></expr></argument>, 
	<argument pos:start="47:9" pos:end="47:24"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:24">EST_HTTP_HDR_EOL</name></expr></argument>,
	<argument pos:start="48:9" pos:end="48:32"><expr pos:start="48:9" pos:end="48:32"><name pos:start="48:9" pos:end="48:32">EST_HTTP_HDR_RETRY_AFTER</name></expr></argument>, 
	<argument pos:start="49:9" pos:end="49:13"><expr pos:start="49:9" pos:end="49:13"><name pos:start="49:9" pos:end="49:13">delay</name></expr></argument>, 
	<argument pos:start="50:9" pos:end="50:24"><expr pos:start="50:9" pos:end="50:24"><name pos:start="50:9" pos:end="50:24">EST_HTTP_HDR_EOL</name></expr></argument>, 
	<argument pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:24">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:42"><expr pos:start="53:5" pos:end="53:41"><name pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:8">conn</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:21">status_code</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:41">EST_HTTP_STAT_202</name></expr>;</expr_stmt>
    <if_stmt pos:start="54:5" pos:end="57:5"><if pos:start="54:5" pos:end="57:5">if <condition pos:start="54:8" pos:end="54:77">(<expr pos:start="54:9" pos:end="54:76"><operator pos:start="54:9" pos:end="54:9">!</operator><call pos:start="54:10" pos:end="54:76"><name pos:start="54:10" pos:end="54:17">mg_write</name><argument_list pos:start="54:18" pos:end="54:76">(<argument pos:start="54:19" pos:end="54:26"><expr pos:start="54:19" pos:end="54:26"><name pos:start="54:19" pos:end="54:26">http_ctx</name></expr></argument>, <argument pos:start="54:29" pos:end="54:36"><expr pos:start="54:29" pos:end="54:36"><name pos:start="54:29" pos:end="54:36">http_hdr</name></expr></argument>, <argument pos:start="54:39" pos:end="54:75"><expr pos:start="54:39" pos:end="54:75"><call pos:start="54:39" pos:end="54:75"><name pos:start="54:39" pos:end="54:47">strnlen_s</name><argument_list pos:start="54:48" pos:end="54:75">(<argument pos:start="54:49" pos:end="54:56"><expr pos:start="54:49" pos:end="54:56"><name pos:start="54:49" pos:end="54:56">http_hdr</name></expr></argument>, <argument pos:start="54:59" pos:end="54:74"><expr pos:start="54:59" pos:end="54:74"><name pos:start="54:59" pos:end="54:74">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="54:79" pos:end="57:5">{<block_content pos:start="55:9" pos:end="56:36">
        <expr_stmt pos:start="55:9" pos:end="55:70"><expr pos:start="55:9" pos:end="55:69"><call pos:start="55:9" pos:end="55:69"><name pos:start="55:9" pos:end="55:19">EST_LOG_ERR</name><argument_list pos:start="55:20" pos:end="55:69">(<argument pos:start="55:21" pos:end="55:68"><expr pos:start="55:21" pos:end="55:68"><literal type="string" pos:start="55:21" pos:end="55:68">"HTTP write error while propagating retry-after"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="56:9" pos:end="56:36">return <expr pos:start="56:16" pos:end="56:35"><operator pos:start="56:16" pos:end="56:16">(</operator><name pos:start="56:17" pos:end="56:34">EST_ERR_HTTP_WRITE</name><operator pos:start="56:35" pos:end="56:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="58:5" pos:end="58:26">return <expr pos:start="58:12" pos:end="58:25"><operator pos:start="58:12" pos:end="58:12">(</operator><name pos:start="58:13" pos:end="58:24">EST_ERR_NONE</name><operator pos:start="58:25" pos:end="58:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="60:1" pos:end="63:3">/*
 * This function handles an incoming cacerts request from
 * the client.
 */</comment>
<function pos:start="64:1" pos:end="101:1"><type pos:start="64:1" pos:end="64:3"><name pos:start="64:1" pos:end="64:3">int</name></type> <name pos:start="64:5" pos:end="64:22">est_handle_cacerts</name> <parameter_list pos:start="64:24" pos:end="65:55">(<parameter pos:start="64:25" pos:end="64:36"><decl pos:start="64:25" pos:end="64:36"><type pos:start="64:25" pos:end="64:36"><name pos:start="64:25" pos:end="64:31">EST_CTX</name> <modifier pos:start="64:33" pos:end="64:33">*</modifier></type><name pos:start="64:34" pos:end="64:36">ctx</name></decl></parameter>, <parameter pos:start="64:39" pos:end="64:61"><decl pos:start="64:39" pos:end="64:61"><type pos:start="64:39" pos:end="64:61"><name pos:start="64:39" pos:end="64:46">unsigned</name> <name pos:start="64:48" pos:end="64:51">char</name> <modifier pos:start="64:53" pos:end="64:53">*</modifier></type><name pos:start="64:54" pos:end="64:61">ca_certs</name></decl></parameter>, <parameter pos:start="64:64" pos:end="64:79"><decl pos:start="64:64" pos:end="64:79"><type pos:start="64:64" pos:end="64:79"><name pos:start="64:64" pos:end="64:66">int</name></type> <name pos:start="64:68" pos:end="64:79">ca_certs_len</name></decl></parameter>,
                        <parameter pos:start="65:25" pos:end="65:38"><decl pos:start="65:25" pos:end="65:38"><type pos:start="65:25" pos:end="65:38"><name pos:start="65:25" pos:end="65:28">void</name> <modifier pos:start="65:30" pos:end="65:30">*</modifier></type><name pos:start="65:31" pos:end="65:38">http_ctx</name></decl></parameter>, <parameter pos:start="65:41" pos:end="65:54"><decl pos:start="65:41" pos:end="65:54"><type pos:start="65:41" pos:end="65:54"><name pos:start="65:41" pos:end="65:44">char</name> <modifier pos:start="65:46" pos:end="65:46">*</modifier></type><name pos:start="65:47" pos:end="65:54">path_seg</name></decl></parameter>)</parameter_list>
<block pos:start="66:1" pos:end="101:1">{<block_content pos:start="67:5" pos:end="100:26">
    <decl_stmt pos:start="67:5" pos:end="67:36"><decl pos:start="67:5" pos:end="67:35"><type pos:start="67:5" pos:end="67:8"><name pos:start="67:5" pos:end="67:8">char</name></type> <name pos:start="67:10" pos:end="67:35"><name pos:start="67:10" pos:end="67:17">http_hdr</name><index pos:start="67:18" pos:end="67:35">[<expr pos:start="67:19" pos:end="67:34"><name pos:start="67:19" pos:end="67:34">EST_HTTP_HDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="68:5" pos:end="68:15"><decl pos:start="68:5" pos:end="68:14"><type pos:start="68:5" pos:end="68:7"><name pos:start="68:5" pos:end="68:7">int</name></type> <name pos:start="68:9" pos:end="68:14">hdrlen</name></decl>;</decl_stmt>    
    
    <if_stmt pos:start="70:5" pos:end="72:5"><if pos:start="70:5" pos:end="72:5">if <condition pos:start="70:8" pos:end="70:26">(<expr pos:start="70:9" pos:end="70:25"><name pos:start="70:9" pos:end="70:16">ca_certs</name>  <operator pos:start="70:19" pos:end="70:20">==</operator> <name pos:start="70:22" pos:end="70:25">NULL</name></expr>)</condition> <block pos:start="70:28" pos:end="72:5">{<block_content pos:start="71:9" pos:end="71:40">
        <return pos:start="71:9" pos:end="71:40">return <expr pos:start="71:16" pos:end="71:39"><operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:38">EST_ERR_HTTP_NOT_FOUND</name><operator pos:start="71:39" pos:end="71:39">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
        
    <comment type="block" pos:start="74:5" pos:end="76:7">/*
     * Send HTTP header
     */</comment>
    <expr_stmt pos:start="77:5" pos:end="78:54"><expr pos:start="77:5" pos:end="78:53"><call pos:start="77:5" pos:end="78:53"><name pos:start="77:5" pos:end="77:12">snprintf</name><argument_list pos:start="77:13" pos:end="78:53">(<argument pos:start="77:14" pos:end="77:21"><expr pos:start="77:14" pos:end="77:21"><name pos:start="77:14" pos:end="77:21">http_hdr</name></expr></argument>, <argument pos:start="77:24" pos:end="77:39"><expr pos:start="77:24" pos:end="77:39"><name pos:start="77:24" pos:end="77:39">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="77:42" pos:end="77:51"><expr pos:start="77:42" pos:end="77:51"><literal type="string" pos:start="77:42" pos:end="77:51">"%s%s%s%s"</literal></expr></argument>, <argument pos:start="77:54" pos:end="77:69"><expr pos:start="77:54" pos:end="77:69"><name pos:start="77:54" pos:end="77:69">EST_HTTP_HDR_200</name></expr></argument>, <argument pos:start="77:72" pos:end="77:87"><expr pos:start="77:72" pos:end="77:87"><name pos:start="77:72" pos:end="77:87">EST_HTTP_HDR_EOL</name></expr></argument>,
             <argument pos:start="78:14" pos:end="78:34"><expr pos:start="78:14" pos:end="78:34"><name pos:start="78:14" pos:end="78:34">EST_HTTP_HDR_STAT_200</name></expr></argument>, <argument pos:start="78:37" pos:end="78:52"><expr pos:start="78:37" pos:end="78:52"><name pos:start="78:37" pos:end="78:52">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="79:5" pos:end="79:51"><expr pos:start="79:5" pos:end="79:50"><name pos:start="79:5" pos:end="79:10">hdrlen</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:50"><name pos:start="79:14" pos:end="79:22">strnlen_s</name><argument_list pos:start="79:23" pos:end="79:50">(<argument pos:start="79:24" pos:end="79:31"><expr pos:start="79:24" pos:end="79:31"><name pos:start="79:24" pos:end="79:31">http_hdr</name></expr></argument>, <argument pos:start="79:34" pos:end="79:49"><expr pos:start="79:34" pos:end="79:49"><name pos:start="79:34" pos:end="79:49">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="81:50"><expr pos:start="80:5" pos:end="81:49"><call pos:start="80:5" pos:end="81:49"><name pos:start="80:5" pos:end="80:12">snprintf</name><argument_list pos:start="80:13" pos:end="81:49">(<argument pos:start="80:14" pos:end="80:30"><expr pos:start="80:14" pos:end="80:30"><name pos:start="80:14" pos:end="80:21">http_hdr</name> <operator pos:start="80:23" pos:end="80:23">+</operator> <name pos:start="80:25" pos:end="80:30">hdrlen</name></expr></argument>, <argument pos:start="80:33" pos:end="80:48"><expr pos:start="80:33" pos:end="80:48"><name pos:start="80:33" pos:end="80:48">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="80:51" pos:end="80:60"><expr pos:start="80:51" pos:end="80:60"><literal type="string" pos:start="80:51" pos:end="80:60">"%s: %s%s"</literal></expr></argument>, <argument pos:start="80:63" pos:end="80:77"><expr pos:start="80:63" pos:end="80:77"><name pos:start="80:63" pos:end="80:77">EST_HTTP_HDR_CT</name></expr></argument>,
             <argument pos:start="81:14" pos:end="81:30"><expr pos:start="81:14" pos:end="81:30"><name pos:start="81:14" pos:end="81:30">EST_HTTP_CT_PKCS7</name></expr></argument>, <argument pos:start="81:33" pos:end="81:48"><expr pos:start="81:33" pos:end="81:48"><name pos:start="81:33" pos:end="81:48">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="82:5" pos:end="82:51"><expr pos:start="82:5" pos:end="82:50"><name pos:start="82:5" pos:end="82:10">hdrlen</name> <operator pos:start="82:12" pos:end="82:12">=</operator> <call pos:start="82:14" pos:end="82:50"><name pos:start="82:14" pos:end="82:22">strnlen_s</name><argument_list pos:start="82:23" pos:end="82:50">(<argument pos:start="82:24" pos:end="82:31"><expr pos:start="82:24" pos:end="82:31"><name pos:start="82:24" pos:end="82:31">http_hdr</name></expr></argument>, <argument pos:start="82:34" pos:end="82:49"><expr pos:start="82:34" pos:end="82:49"><name pos:start="82:34" pos:end="82:49">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="83:5" pos:end="84:51"><expr pos:start="83:5" pos:end="84:50"><call pos:start="83:5" pos:end="84:50"><name pos:start="83:5" pos:end="83:12">snprintf</name><argument_list pos:start="83:13" pos:end="84:50">(<argument pos:start="83:14" pos:end="83:30"><expr pos:start="83:14" pos:end="83:30"><name pos:start="83:14" pos:end="83:21">http_hdr</name> <operator pos:start="83:23" pos:end="83:23">+</operator> <name pos:start="83:25" pos:end="83:30">hdrlen</name></expr></argument>, <argument pos:start="83:33" pos:end="83:48"><expr pos:start="83:33" pos:end="83:48"><name pos:start="83:33" pos:end="83:48">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="83:51" pos:end="83:60"><expr pos:start="83:51" pos:end="83:60"><literal type="string" pos:start="83:51" pos:end="83:60">"%s: %s%s"</literal></expr></argument>, <argument pos:start="83:63" pos:end="83:77"><expr pos:start="83:63" pos:end="83:77"><name pos:start="83:63" pos:end="83:77">EST_HTTP_HDR_CE</name></expr></argument>,
             <argument pos:start="84:14" pos:end="84:31"><expr pos:start="84:14" pos:end="84:31"><name pos:start="84:14" pos:end="84:31">EST_HTTP_CE_BASE64</name></expr></argument>, <argument pos:start="84:34" pos:end="84:49"><expr pos:start="84:34" pos:end="84:49"><name pos:start="84:34" pos:end="84:49">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="85:5" pos:end="85:51"><expr pos:start="85:5" pos:end="85:50"><name pos:start="85:5" pos:end="85:10">hdrlen</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:50"><name pos:start="85:14" pos:end="85:22">strnlen_s</name><argument_list pos:start="85:23" pos:end="85:50">(<argument pos:start="85:24" pos:end="85:31"><expr pos:start="85:24" pos:end="85:31"><name pos:start="85:24" pos:end="85:31">http_hdr</name></expr></argument>, <argument pos:start="85:34" pos:end="85:49"><expr pos:start="85:34" pos:end="85:49"><name pos:start="85:34" pos:end="85:49">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="86:5" pos:end="87:63"><expr pos:start="86:5" pos:end="87:62"><call pos:start="86:5" pos:end="87:62"><name pos:start="86:5" pos:end="86:12">snprintf</name><argument_list pos:start="86:13" pos:end="87:62">(<argument pos:start="86:14" pos:end="86:30"><expr pos:start="86:14" pos:end="86:30"><name pos:start="86:14" pos:end="86:21">http_hdr</name> <operator pos:start="86:23" pos:end="86:23">+</operator> <name pos:start="86:25" pos:end="86:30">hdrlen</name></expr></argument>, <argument pos:start="86:33" pos:end="86:48"><expr pos:start="86:33" pos:end="86:48"><name pos:start="86:33" pos:end="86:48">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="86:51" pos:end="86:62"><expr pos:start="86:51" pos:end="86:62"><literal type="string" pos:start="86:51" pos:end="86:62">"%s: %d%s%s"</literal></expr></argument>, <argument pos:start="86:65" pos:end="86:79"><expr pos:start="86:65" pos:end="86:79"><name pos:start="86:65" pos:end="86:79">EST_HTTP_HDR_CL</name></expr></argument>,
             <argument pos:start="87:14" pos:end="87:25"><expr pos:start="87:14" pos:end="87:25"><name pos:start="87:14" pos:end="87:25">ca_certs_len</name></expr></argument>, <argument pos:start="87:28" pos:end="87:43"><expr pos:start="87:28" pos:end="87:43"><name pos:start="87:28" pos:end="87:43">EST_HTTP_HDR_EOL</name></expr></argument>, <argument pos:start="87:46" pos:end="87:61"><expr pos:start="87:46" pos:end="87:61"><name pos:start="87:46" pos:end="87:61">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="88:5" pos:end="90:5"><if pos:start="88:5" pos:end="90:5">if <condition pos:start="88:8" pos:end="88:77">(<expr pos:start="88:9" pos:end="88:76"><operator pos:start="88:9" pos:end="88:9">!</operator><call pos:start="88:10" pos:end="88:76"><name pos:start="88:10" pos:end="88:17">mg_write</name><argument_list pos:start="88:18" pos:end="88:76">(<argument pos:start="88:19" pos:end="88:26"><expr pos:start="88:19" pos:end="88:26"><name pos:start="88:19" pos:end="88:26">http_ctx</name></expr></argument>, <argument pos:start="88:29" pos:end="88:36"><expr pos:start="88:29" pos:end="88:36"><name pos:start="88:29" pos:end="88:36">http_hdr</name></expr></argument>, <argument pos:start="88:39" pos:end="88:75"><expr pos:start="88:39" pos:end="88:75"><call pos:start="88:39" pos:end="88:75"><name pos:start="88:39" pos:end="88:47">strnlen_s</name><argument_list pos:start="88:48" pos:end="88:75">(<argument pos:start="88:49" pos:end="88:56"><expr pos:start="88:49" pos:end="88:56"><name pos:start="88:49" pos:end="88:56">http_hdr</name></expr></argument>, <argument pos:start="88:59" pos:end="88:74"><expr pos:start="88:59" pos:end="88:74"><name pos:start="88:59" pos:end="88:74">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="88:79" pos:end="90:5">{<block_content pos:start="89:9" pos:end="89:36">
        <return pos:start="89:9" pos:end="89:36">return <expr pos:start="89:16" pos:end="89:35"><operator pos:start="89:16" pos:end="89:16">(</operator><name pos:start="89:17" pos:end="89:34">EST_ERR_HTTP_WRITE</name><operator pos:start="89:35" pos:end="89:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="92:5" pos:end="94:7">/*
     * Send the CA certs in the body
     */</comment>
    <if_stmt pos:start="95:5" pos:end="97:5"><if pos:start="95:5" pos:end="97:5">if <condition pos:start="95:8" pos:end="95:52">(<expr pos:start="95:9" pos:end="95:51"><operator pos:start="95:9" pos:end="95:9">!</operator><call pos:start="95:10" pos:end="95:51"><name pos:start="95:10" pos:end="95:17">mg_write</name><argument_list pos:start="95:18" pos:end="95:51">(<argument pos:start="95:19" pos:end="95:26"><expr pos:start="95:19" pos:end="95:26"><name pos:start="95:19" pos:end="95:26">http_ctx</name></expr></argument>, <argument pos:start="95:29" pos:end="95:36"><expr pos:start="95:29" pos:end="95:36"><name pos:start="95:29" pos:end="95:36">ca_certs</name></expr></argument>, <argument pos:start="95:39" pos:end="95:50"><expr pos:start="95:39" pos:end="95:50"><name pos:start="95:39" pos:end="95:50">ca_certs_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:54" pos:end="97:5">{<block_content pos:start="96:9" pos:end="96:36">
        <return pos:start="96:9" pos:end="96:36">return <expr pos:start="96:16" pos:end="96:35"><operator pos:start="96:16" pos:end="96:16">(</operator><name pos:start="96:17" pos:end="96:34">EST_ERR_HTTP_WRITE</name><operator pos:start="96:35" pos:end="96:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><call pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:16">EST_LOG_INFO</name><argument_list pos:start="99:17" pos:end="99:60">(<argument pos:start="99:18" pos:end="99:59"><expr pos:start="99:18" pos:end="99:59"><literal type="string" pos:start="99:18" pos:end="99:59">"CA certs successfully sent to EST client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="100:5" pos:end="100:26">return <expr pos:start="100:12" pos:end="100:25"><operator pos:start="100:12" pos:end="100:12">(</operator><name pos:start="100:13" pos:end="100:24">EST_ERR_NONE</name><operator pos:start="100:25" pos:end="100:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="102:1" pos:end="108:3">/*
 * Handle a CA certs request.  If the application layer has
 * registered a callback then call it.  Else, if the application
 * layer has provided a locally configured buffer then send it.
 * Else, return an error indicating that there are no CA Certs
 * available.
 */</comment>
<function pos:start="109:1" pos:end="148:1"><type pos:start="109:1" pos:end="109:10"><specifier pos:start="109:1" pos:end="109:6">static</specifier> <name pos:start="109:8" pos:end="109:10">int</name></type> <name pos:start="109:12" pos:end="109:36">est_server_handle_cacerts</name> <parameter_list pos:start="109:38" pos:end="110:53">(<parameter pos:start="109:39" pos:end="109:50"><decl pos:start="109:39" pos:end="109:50"><type pos:start="109:39" pos:end="109:50"><name pos:start="109:39" pos:end="109:45">EST_CTX</name> <modifier pos:start="109:47" pos:end="109:47">*</modifier></type><name pos:start="109:48" pos:end="109:50">ctx</name></decl></parameter>, <parameter pos:start="109:53" pos:end="109:66"><decl pos:start="109:53" pos:end="109:66"><type pos:start="109:53" pos:end="109:66"><name pos:start="109:53" pos:end="109:56">void</name> <modifier pos:start="109:58" pos:end="109:58">*</modifier></type><name pos:start="109:59" pos:end="109:66">http_ctx</name></decl></parameter>,
                                      <parameter pos:start="110:39" pos:end="110:52"><decl pos:start="110:39" pos:end="110:52"><type pos:start="110:39" pos:end="110:52"><name pos:start="110:39" pos:end="110:42">char</name> <modifier pos:start="110:44" pos:end="110:44">*</modifier></type><name pos:start="110:45" pos:end="110:52">path_seg</name></decl></parameter>)</parameter_list>
<block pos:start="111:1" pos:end="148:1">{<block_content pos:start="112:5" pos:end="147:16">
    <decl_stmt pos:start="112:5" pos:end="112:17"><decl pos:start="112:5" pos:end="112:16"><type pos:start="112:5" pos:end="112:13"><name pos:start="112:5" pos:end="112:13">EST_ERROR</name></type> <name pos:start="112:15" pos:end="112:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="113:5" pos:end="113:21"><decl pos:start="113:5" pos:end="113:20"><type pos:start="113:5" pos:end="113:7"><name pos:start="113:5" pos:end="113:7">int</name></type> <name pos:start="113:9" pos:end="113:20">ca_certs_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="114:5" pos:end="114:28"><decl pos:start="114:5" pos:end="114:27"><type pos:start="114:5" pos:end="114:19"><name pos:start="114:5" pos:end="114:12">unsigned</name> <name pos:start="114:14" pos:end="114:17">char</name> <modifier pos:start="114:19" pos:end="114:19">*</modifier></type><name pos:start="114:20" pos:end="114:27">ca_certs</name></decl>;</decl_stmt>

    <comment type="block" pos:start="116:5" pos:end="121:7">/*
     * If there is a call back set then call it.
     * otherwise, if there is a locally configured cacerts buffer,
     * then return that.
     * otherwise, return an error indicating that we don't have any cacerts
     */</comment>
    <if_stmt pos:start="122:5" pos:end="146:5"><if pos:start="122:5" pos:end="136:5">if <condition pos:start="122:8" pos:end="122:32">(<expr pos:start="122:9" pos:end="122:31"><name pos:start="122:9" pos:end="122:31"><name pos:start="122:9" pos:end="122:11">ctx</name><operator pos:start="122:12" pos:end="122:13">-&gt;</operator><name pos:start="122:14" pos:end="122:31">est_get_cacerts_cb</name></name></expr>)</condition> <block pos:start="122:34" pos:end="136:5">{<block_content pos:start="124:9" pos:end="135:9">

        <expr_stmt pos:start="124:9" pos:end="124:75"><expr pos:start="124:9" pos:end="124:74"><call pos:start="124:9" pos:end="124:74"><name pos:start="124:9" pos:end="124:20">EST_LOG_INFO</name><argument_list pos:start="124:21" pos:end="124:74">(<argument pos:start="124:22" pos:end="124:73"><expr pos:start="124:22" pos:end="124:73"><literal type="string" pos:start="124:22" pos:end="124:73">"Server: Retrieving CA certs from application layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="125:9" pos:end="125:81"><expr pos:start="125:9" pos:end="125:80"><name pos:start="125:9" pos:end="125:16">ca_certs</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:80"><name pos:start="125:20" pos:end="125:42"><name pos:start="125:20" pos:end="125:22">ctx</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:42">est_get_cacerts_cb</name></name><argument_list pos:start="125:43" pos:end="125:80">(<argument pos:start="125:44" pos:end="125:56"><expr pos:start="125:44" pos:end="125:56"><operator pos:start="125:44" pos:end="125:44">&amp;</operator><name pos:start="125:45" pos:end="125:56">ca_certs_len</name></expr></argument>, <argument pos:start="125:59" pos:end="125:66"><expr pos:start="125:59" pos:end="125:66"><name pos:start="125:59" pos:end="125:66">path_seg</name></expr></argument>,<argument pos:start="125:68" pos:end="125:79"><expr pos:start="125:68" pos:end="125:79"><name pos:start="125:68" pos:end="125:79"><name pos:start="125:68" pos:end="125:70">ctx</name><operator pos:start="125:71" pos:end="125:72">-&gt;</operator><name pos:start="125:73" pos:end="125:79">ex_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="126:9" pos:end="135:9"><if pos:start="126:9" pos:end="132:9">if <condition pos:start="126:12" pos:end="126:21">(<expr pos:start="126:13" pos:end="126:20"><name pos:start="126:13" pos:end="126:20">ca_certs</name></expr>)</condition> <block pos:start="126:23" pos:end="132:9">{<block_content pos:start="128:13" pos:end="131:46">

            <expr_stmt pos:start="128:13" pos:end="129:46"><expr pos:start="128:13" pos:end="129:45"><call pos:start="128:13" pos:end="129:45"><name pos:start="128:13" pos:end="128:24">EST_LOG_INFO</name><argument_list pos:start="128:25" pos:end="129:45">(<argument pos:start="128:26" pos:end="129:44"><expr pos:start="128:26" pos:end="129:44"><literal type="string" pos:start="128:26" pos:end="128:72">"Server: Successfully retrieved CA certs from "</literal>
                         <literal type="string" pos:start="129:26" pos:end="129:44">"application layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="130:13" pos:end="131:46"><expr pos:start="130:13" pos:end="131:45"><name pos:start="130:13" pos:end="130:14">rv</name> <operator pos:start="130:16" pos:end="130:16">=</operator> <call pos:start="130:18" pos:end="131:45"><name pos:start="130:18" pos:end="130:35">est_handle_cacerts</name><argument_list pos:start="130:36" pos:end="131:45">(<argument pos:start="130:37" pos:end="130:39"><expr pos:start="130:37" pos:end="130:39"><name pos:start="130:37" pos:end="130:39">ctx</name></expr></argument>, <argument pos:start="130:42" pos:end="130:49"><expr pos:start="130:42" pos:end="130:49"><name pos:start="130:42" pos:end="130:49">ca_certs</name></expr></argument>, <argument pos:start="130:52" pos:end="130:63"><expr pos:start="130:52" pos:end="130:63"><name pos:start="130:52" pos:end="130:63">ca_certs_len</name></expr></argument>, <argument pos:start="130:66" pos:end="130:73"><expr pos:start="130:66" pos:end="130:73"><name pos:start="130:66" pos:end="130:73">http_ctx</name></expr></argument>,
                                    <argument pos:start="131:37" pos:end="131:44"><expr pos:start="131:37" pos:end="131:44"><name pos:start="131:37" pos:end="131:44">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="132:11" pos:end="135:9">else <block pos:start="132:16" pos:end="135:9">{<block_content pos:start="133:13" pos:end="134:30">
            <expr_stmt pos:start="133:13" pos:end="133:72"><expr pos:start="133:13" pos:end="133:71"><call pos:start="133:13" pos:end="133:71"><name pos:start="133:13" pos:end="133:31">est_send_http_error</name><argument_list pos:start="133:32" pos:end="133:71">(<argument pos:start="133:33" pos:end="133:35"><expr pos:start="133:33" pos:end="133:35"><name pos:start="133:33" pos:end="133:35">ctx</name></expr></argument>, <argument pos:start="133:38" pos:end="133:45"><expr pos:start="133:38" pos:end="133:45"><name pos:start="133:38" pos:end="133:45">http_ctx</name></expr></argument>, <argument pos:start="133:48" pos:end="133:70"><expr pos:start="133:48" pos:end="133:70"><name pos:start="133:48" pos:end="133:70">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="134:13" pos:end="134:30"><expr pos:start="134:13" pos:end="134:29"><name pos:start="134:13" pos:end="134:14">rv</name> <operator pos:start="134:16" pos:end="134:16">=</operator> <name pos:start="134:18" pos:end="134:29">EST_ERR_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="136:7" pos:end="142:5">else if <condition pos:start="136:15" pos:end="136:29">(<expr pos:start="136:16" pos:end="136:28"><name pos:start="136:16" pos:end="136:28"><name pos:start="136:16" pos:end="136:18">ctx</name><operator pos:start="136:19" pos:end="136:20">-&gt;</operator><name pos:start="136:21" pos:end="136:28">ca_certs</name></name></expr>)</condition> <block pos:start="136:31" pos:end="142:5">{<block_content pos:start="138:9" pos:end="141:58">
        
        <expr_stmt pos:start="138:9" pos:end="139:54"><expr pos:start="138:9" pos:end="139:53"><call pos:start="138:9" pos:end="139:53"><name pos:start="138:9" pos:end="138:20">EST_LOG_INFO</name><argument_list pos:start="138:21" pos:end="139:53">(<argument pos:start="138:22" pos:end="139:52"><expr pos:start="138:22" pos:end="139:52"><literal type="string" pos:start="138:22" pos:end="138:69">"Server: CA certs set locally, responding with "</literal>
                     <literal type="string" pos:start="139:22" pos:end="139:52">"locally set CA certs response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="140:9" pos:end="141:58"><expr pos:start="140:9" pos:end="141:57"><name pos:start="140:9" pos:end="140:10">rv</name> <operator pos:start="140:12" pos:end="140:12">=</operator> <call pos:start="140:14" pos:end="141:57"><name pos:start="140:14" pos:end="140:31">est_handle_cacerts</name><argument_list pos:start="140:32" pos:end="141:57">(<argument pos:start="140:33" pos:end="140:35"><expr pos:start="140:33" pos:end="140:35"><name pos:start="140:33" pos:end="140:35">ctx</name></expr></argument>, <argument pos:start="140:38" pos:end="140:50"><expr pos:start="140:38" pos:end="140:50"><name pos:start="140:38" pos:end="140:50"><name pos:start="140:38" pos:end="140:40">ctx</name><operator pos:start="140:41" pos:end="140:42">-&gt;</operator><name pos:start="140:43" pos:end="140:50">ca_certs</name></name></expr></argument>, <argument pos:start="140:53" pos:end="140:69"><expr pos:start="140:53" pos:end="140:69"><name pos:start="140:53" pos:end="140:69"><name pos:start="140:53" pos:end="140:55">ctx</name><operator pos:start="140:56" pos:end="140:57">-&gt;</operator><name pos:start="140:58" pos:end="140:69">ca_certs_len</name></name></expr></argument>,
                                      <argument pos:start="141:39" pos:end="141:46"><expr pos:start="141:39" pos:end="141:46"><name pos:start="141:39" pos:end="141:46">http_ctx</name></expr></argument>, <argument pos:start="141:49" pos:end="141:56"><expr pos:start="141:49" pos:end="141:56"><name pos:start="141:49" pos:end="141:56">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="142:7" pos:end="146:5">else <block pos:start="142:12" pos:end="146:5">{<block_content pos:start="144:9" pos:end="145:26">
        
        <expr_stmt pos:start="144:9" pos:end="144:68"><expr pos:start="144:9" pos:end="144:67"><call pos:start="144:9" pos:end="144:67"><name pos:start="144:9" pos:end="144:27">est_send_http_error</name><argument_list pos:start="144:28" pos:end="144:67">(<argument pos:start="144:29" pos:end="144:31"><expr pos:start="144:29" pos:end="144:31"><name pos:start="144:29" pos:end="144:31">ctx</name></expr></argument>, <argument pos:start="144:34" pos:end="144:41"><expr pos:start="144:34" pos:end="144:41"><name pos:start="144:34" pos:end="144:41">http_ctx</name></expr></argument>, <argument pos:start="144:44" pos:end="144:66"><expr pos:start="144:44" pos:end="144:66"><name pos:start="144:44" pos:end="144:66">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="145:9" pos:end="145:26"><expr pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:10">rv</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <name pos:start="145:14" pos:end="145:25">EST_ERR_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="147:5" pos:end="147:16">return <expr pos:start="147:12" pos:end="147:15"><operator pos:start="147:12" pos:end="147:12">(</operator><name pos:start="147:13" pos:end="147:14">rv</name><operator pos:start="147:15" pos:end="147:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="149:1" pos:end="170:3">/*! @brief est_server_generate_auth_digest() is used by an application 
    to calculate the HTTP Digest value based on the header values
    provided by an EST client.  
 
    @param ah Authentication header values from client, provided by libEST
    @param HA1 The precalculated HA1 value for the user.  HA1 is defined in
           RFC 2617.  It's the MD5 calculation of the user's ID, HTTP realm,
	   and the user's password.

    This is a helper function that an application can use to calculate
    the HTTP Digest value when performing HTTP Digest Authentication
    of an EST client.  libEST does not maintain a user database. 
    This is left up to the application, with the intent of integrating  
    an external user database (e.g. Radius/AAA).
    
    The HA1 value should be calculated by the application as
    defined in RFC 2617.  HA1 is the MD5 hash of the user ID, HTTP realm,
    and user password.  This MD5 value is then converted to a hex string.
    HA1 is expected to be 32 bytes long.
 
    @return char* containing the digest, or NULL if an error occurred.
 */</comment>
<function pos:start="171:1" pos:end="226:1"><type pos:start="171:1" pos:end="171:6"><name pos:start="171:1" pos:end="171:4">char</name> <modifier pos:start="171:6" pos:end="171:6">*</modifier></type><name pos:start="171:7" pos:end="171:37">est_server_generate_auth_digest</name> <parameter_list pos:start="171:39" pos:end="171:72">(<parameter pos:start="171:40" pos:end="171:60"><decl pos:start="171:40" pos:end="171:60"><type pos:start="171:40" pos:end="171:60"><name pos:start="171:40" pos:end="171:56">EST_HTTP_AUTH_HDR</name> <modifier pos:start="171:58" pos:end="171:58">*</modifier></type><name pos:start="171:59" pos:end="171:60">ah</name></decl></parameter>, <parameter pos:start="171:63" pos:end="171:71"><decl pos:start="171:63" pos:end="171:71"><type pos:start="171:63" pos:end="171:71"><name pos:start="171:63" pos:end="171:66">char</name> <modifier pos:start="171:68" pos:end="171:68">*</modifier></type><name pos:start="171:69" pos:end="171:71">HA1</name></decl></parameter>)</parameter_list>
<block pos:start="172:1" pos:end="226:1">{<block_content pos:start="173:5" pos:end="225:16">
    <decl_stmt pos:start="173:5" pos:end="173:22"><decl pos:start="173:5" pos:end="173:21"><type pos:start="173:5" pos:end="173:16"><name pos:start="173:5" pos:end="173:14">EVP_MD_CTX</name> <modifier pos:start="173:16" pos:end="173:16">*</modifier></type><name pos:start="173:17" pos:end="173:21">mdctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="174:5" pos:end="174:33"><decl pos:start="174:5" pos:end="174:32"><type pos:start="174:5" pos:end="174:18"><specifier pos:start="174:5" pos:end="174:9">const</specifier> <name pos:start="174:11" pos:end="174:16">EVP_MD</name> <modifier pos:start="174:18" pos:end="174:18">*</modifier></type><name pos:start="174:19" pos:end="174:20">md</name> <init pos:start="174:22" pos:end="174:32">= <expr pos:start="174:24" pos:end="174:32"><call pos:start="174:24" pos:end="174:32"><name pos:start="174:24" pos:end="174:30">EVP_md5</name><argument_list pos:start="174:31" pos:end="174:32">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="175:5" pos:end="175:33"><decl pos:start="175:5" pos:end="175:32"><type pos:start="175:5" pos:end="175:11"><name pos:start="175:5" pos:end="175:11">uint8_t</name></type> <name pos:start="175:13" pos:end="175:32"><name pos:start="175:13" pos:end="175:15">ha2</name><index pos:start="175:16" pos:end="175:32">[<expr pos:start="175:17" pos:end="175:31"><name pos:start="175:17" pos:end="175:31">EVP_MAX_MD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="176:5" pos:end="176:25"><decl pos:start="176:5" pos:end="176:24"><type pos:start="176:5" pos:end="176:16"><name pos:start="176:5" pos:end="176:12">unsigned</name> <name pos:start="176:14" pos:end="176:16">int</name></type> <name pos:start="176:18" pos:end="176:24">ha2_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="177:5" pos:end="177:21"><decl pos:start="177:5" pos:end="177:20"><type pos:start="177:5" pos:end="177:8"><name pos:start="177:5" pos:end="177:8">char</name></type> <name pos:start="177:10" pos:end="177:20"><name pos:start="177:10" pos:end="177:16">ha2_str</name><index pos:start="177:17" pos:end="177:20">[<expr pos:start="177:18" pos:end="177:19"><literal type="number" pos:start="177:18" pos:end="177:19">33</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="178:5" pos:end="178:42"><decl pos:start="178:5" pos:end="178:41"><type pos:start="178:5" pos:end="178:17"><name pos:start="178:5" pos:end="178:12">unsigned</name> <name pos:start="178:14" pos:end="178:17">char</name></type> <name pos:start="178:19" pos:end="178:41"><name pos:start="178:19" pos:end="178:24">digest</name><index pos:start="178:25" pos:end="178:41">[<expr pos:start="178:26" pos:end="178:40"><name pos:start="178:26" pos:end="178:40">EVP_MAX_MD_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="179:5" pos:end="179:23"><decl pos:start="179:5" pos:end="179:22"><type pos:start="179:5" pos:end="179:16"><name pos:start="179:5" pos:end="179:12">unsigned</name> <name pos:start="179:14" pos:end="179:16">int</name></type> <name pos:start="179:18" pos:end="179:22">d_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="180:5" pos:end="180:13"><decl pos:start="180:5" pos:end="180:12"><type pos:start="180:5" pos:end="180:10"><name pos:start="180:5" pos:end="180:8">char</name> <modifier pos:start="180:10" pos:end="180:10">*</modifier></type><name pos:start="180:11" pos:end="180:12">rv</name></decl>;</decl_stmt>

    <if_stmt pos:start="182:5" pos:end="185:5"><if pos:start="182:5" pos:end="185:5">if <condition pos:start="182:8" pos:end="182:12">(<expr pos:start="182:9" pos:end="182:11"><operator pos:start="182:9" pos:end="182:9">!</operator><name pos:start="182:10" pos:end="182:11">ah</name></expr>)</condition> <block pos:start="182:14" pos:end="185:5">{<block_content pos:start="183:9" pos:end="184:22">
	<expr_stmt pos:start="183:9" pos:end="183:40"><expr pos:start="183:9" pos:end="183:39"><call pos:start="183:9" pos:end="183:39"><name pos:start="183:9" pos:end="183:19">EST_LOG_ERR</name><argument_list pos:start="183:20" pos:end="183:39">(<argument pos:start="183:21" pos:end="183:38"><expr pos:start="183:21" pos:end="183:38"><literal type="string" pos:start="183:21" pos:end="183:38">"Null auth header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="184:9" pos:end="184:22">return <expr pos:start="184:16" pos:end="184:21"><operator pos:start="184:16" pos:end="184:16">(</operator><name pos:start="184:17" pos:end="184:20">NULL</name><operator pos:start="184:21" pos:end="184:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="187:5" pos:end="190:5"><if pos:start="187:5" pos:end="190:5">if <condition pos:start="187:8" pos:end="187:13">(<expr pos:start="187:9" pos:end="187:12"><operator pos:start="187:9" pos:end="187:9">!</operator><name pos:start="187:10" pos:end="187:12">HA1</name></expr>)</condition> <block pos:start="187:15" pos:end="190:5">{<block_content pos:start="188:9" pos:end="189:22">
	<expr_stmt pos:start="188:9" pos:end="188:32"><expr pos:start="188:9" pos:end="188:31"><call pos:start="188:9" pos:end="188:31"><name pos:start="188:9" pos:end="188:19">EST_LOG_ERR</name><argument_list pos:start="188:20" pos:end="188:31">(<argument pos:start="188:21" pos:end="188:30"><expr pos:start="188:21" pos:end="188:30"><literal type="string" pos:start="188:21" pos:end="188:30">"Null HA1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="189:9" pos:end="189:22">return <expr pos:start="189:16" pos:end="189:21"><operator pos:start="189:16" pos:end="189:16">(</operator><name pos:start="189:17" pos:end="189:20">NULL</name><operator pos:start="189:21" pos:end="189:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="192:5" pos:end="194:7">/*
     * Calculate HA2 using method, URI,
     */</comment>
    <expr_stmt pos:start="195:5" pos:end="195:32"><expr pos:start="195:5" pos:end="195:31"><name pos:start="195:5" pos:end="195:9">mdctx</name> <operator pos:start="195:11" pos:end="195:11">=</operator> <call pos:start="195:13" pos:end="195:31"><name pos:start="195:13" pos:end="195:29">EVP_MD_CTX_create</name><argument_list pos:start="195:30" pos:end="195:31">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="196:5" pos:end="196:39"><expr pos:start="196:5" pos:end="196:38"><call pos:start="196:5" pos:end="196:38"><name pos:start="196:5" pos:end="196:21">EVP_DigestInit_ex</name><argument_list pos:start="196:22" pos:end="196:38">(<argument pos:start="196:23" pos:end="196:27"><expr pos:start="196:23" pos:end="196:27"><name pos:start="196:23" pos:end="196:27">mdctx</name></expr></argument>, <argument pos:start="196:30" pos:end="196:31"><expr pos:start="196:30" pos:end="196:31"><name pos:start="196:30" pos:end="196:31">md</name></expr></argument>, <argument pos:start="196:34" pos:end="196:37"><expr pos:start="196:34" pos:end="196:37"><name pos:start="196:34" pos:end="196:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="197:5" pos:end="197:39"><expr pos:start="197:5" pos:end="197:38"><call pos:start="197:5" pos:end="197:38"><name pos:start="197:5" pos:end="197:20">EVP_DigestUpdate</name><argument_list pos:start="197:21" pos:end="197:38">(<argument pos:start="197:22" pos:end="197:26"><expr pos:start="197:22" pos:end="197:26"><name pos:start="197:22" pos:end="197:26">mdctx</name></expr></argument>, <argument pos:start="197:29" pos:end="197:34"><expr pos:start="197:29" pos:end="197:34"><literal type="string" pos:start="197:29" pos:end="197:34">"POST"</literal></expr></argument>, <argument pos:start="197:37" pos:end="197:37"><expr pos:start="197:37" pos:end="197:37"><literal type="number" pos:start="197:37" pos:end="197:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt pos:start="198:5" pos:end="198:36"><expr pos:start="198:5" pos:end="198:35"><call pos:start="198:5" pos:end="198:35"><name pos:start="198:5" pos:end="198:20">EVP_DigestUpdate</name><argument_list pos:start="198:21" pos:end="198:35">(<argument pos:start="198:22" pos:end="198:26"><expr pos:start="198:22" pos:end="198:26"><name pos:start="198:22" pos:end="198:26">mdctx</name></expr></argument>, <argument pos:start="198:29" pos:end="198:31"><expr pos:start="198:29" pos:end="198:31"><literal type="string" pos:start="198:29" pos:end="198:31">":"</literal></expr></argument>, <argument pos:start="198:34" pos:end="198:34"><expr pos:start="198:34" pos:end="198:34"><literal type="number" pos:start="198:34" pos:end="198:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="199:5" pos:end="199:68"><expr pos:start="199:5" pos:end="199:67"><call pos:start="199:5" pos:end="199:67"><name pos:start="199:5" pos:end="199:20">EVP_DigestUpdate</name><argument_list pos:start="199:21" pos:end="199:67">(<argument pos:start="199:22" pos:end="199:26"><expr pos:start="199:22" pos:end="199:26"><name pos:start="199:22" pos:end="199:26">mdctx</name></expr></argument>, <argument pos:start="199:29" pos:end="199:35"><expr pos:start="199:29" pos:end="199:35"><name pos:start="199:29" pos:end="199:35"><name pos:start="199:29" pos:end="199:30">ah</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:35">uri</name></name></expr></argument>, <argument pos:start="199:38" pos:end="199:66"><expr pos:start="199:38" pos:end="199:66"><call pos:start="199:38" pos:end="199:66"><name pos:start="199:38" pos:end="199:46">strnlen_s</name><argument_list pos:start="199:47" pos:end="199:66">(<argument pos:start="199:48" pos:end="199:54"><expr pos:start="199:48" pos:end="199:54"><name pos:start="199:48" pos:end="199:54"><name pos:start="199:48" pos:end="199:49">ah</name><operator pos:start="199:50" pos:end="199:51">-&gt;</operator><name pos:start="199:52" pos:end="199:54">uri</name></name></expr></argument>, <argument pos:start="199:57" pos:end="199:65"><expr pos:start="199:57" pos:end="199:65"><name pos:start="199:57" pos:end="199:65">MAX_REALM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="200:5" pos:end="200:42"><expr pos:start="200:5" pos:end="200:41"><call pos:start="200:5" pos:end="200:41"><name pos:start="200:5" pos:end="200:19">EVP_DigestFinal</name><argument_list pos:start="200:20" pos:end="200:41">(<argument pos:start="200:21" pos:end="200:25"><expr pos:start="200:21" pos:end="200:25"><name pos:start="200:21" pos:end="200:25">mdctx</name></expr></argument>, <argument pos:start="200:28" pos:end="200:30"><expr pos:start="200:28" pos:end="200:30"><name pos:start="200:28" pos:end="200:30">ha2</name></expr></argument>, <argument pos:start="200:33" pos:end="200:40"><expr pos:start="200:33" pos:end="200:40"><operator pos:start="200:33" pos:end="200:33">&amp;</operator><name pos:start="200:34" pos:end="200:40">ha2_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="201:5" pos:end="201:30"><expr pos:start="201:5" pos:end="201:29"><call pos:start="201:5" pos:end="201:29"><name pos:start="201:5" pos:end="201:22">EVP_MD_CTX_destroy</name><argument_list pos:start="201:23" pos:end="201:29">(<argument pos:start="201:24" pos:end="201:28"><expr pos:start="201:24" pos:end="201:28"><name pos:start="201:24" pos:end="201:28">mdctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="202:5" pos:end="202:42"><expr pos:start="202:5" pos:end="202:41"><call pos:start="202:5" pos:end="202:41"><name pos:start="202:5" pos:end="202:18">est_hex_to_str</name><argument_list pos:start="202:19" pos:end="202:41">(<argument pos:start="202:20" pos:end="202:26"><expr pos:start="202:20" pos:end="202:26"><name pos:start="202:20" pos:end="202:26">ha2_str</name></expr></argument>, <argument pos:start="202:29" pos:end="202:31"><expr pos:start="202:29" pos:end="202:31"><name pos:start="202:29" pos:end="202:31">ha2</name></expr></argument>, <argument pos:start="202:34" pos:end="202:40"><expr pos:start="202:34" pos:end="202:40"><name pos:start="202:34" pos:end="202:40">ha2_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="204:5" pos:end="206:7">/*
     * Calculate auth digest using HA1, nonce, nonce count, client nonce, qop, HA2
     */</comment>
    <expr_stmt pos:start="207:5" pos:end="207:32"><expr pos:start="207:5" pos:end="207:31"><name pos:start="207:5" pos:end="207:9">mdctx</name> <operator pos:start="207:11" pos:end="207:11">=</operator> <call pos:start="207:13" pos:end="207:31"><name pos:start="207:13" pos:end="207:29">EVP_MD_CTX_create</name><argument_list pos:start="207:30" pos:end="207:31">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="208:5" pos:end="208:39"><expr pos:start="208:5" pos:end="208:38"><call pos:start="208:5" pos:end="208:38"><name pos:start="208:5" pos:end="208:21">EVP_DigestInit_ex</name><argument_list pos:start="208:22" pos:end="208:38">(<argument pos:start="208:23" pos:end="208:27"><expr pos:start="208:23" pos:end="208:27"><name pos:start="208:23" pos:end="208:27">mdctx</name></expr></argument>, <argument pos:start="208:30" pos:end="208:31"><expr pos:start="208:30" pos:end="208:31"><name pos:start="208:30" pos:end="208:31">md</name></expr></argument>, <argument pos:start="208:34" pos:end="208:37"><expr pos:start="208:34" pos:end="208:37"><name pos:start="208:34" pos:end="208:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="209:5" pos:end="209:37"><expr pos:start="209:5" pos:end="209:36"><call pos:start="209:5" pos:end="209:36"><name pos:start="209:5" pos:end="209:20">EVP_DigestUpdate</name><argument_list pos:start="209:21" pos:end="209:36">(<argument pos:start="209:22" pos:end="209:26"><expr pos:start="209:22" pos:end="209:26"><name pos:start="209:22" pos:end="209:26">mdctx</name></expr></argument>, <argument pos:start="209:29" pos:end="209:31"><expr pos:start="209:29" pos:end="209:31"><name pos:start="209:29" pos:end="209:31">HA1</name></expr></argument>, <argument pos:start="209:34" pos:end="209:35"><expr pos:start="209:34" pos:end="209:35"><literal type="number" pos:start="209:34" pos:end="209:35">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt pos:start="210:5" pos:end="210:36"><expr pos:start="210:5" pos:end="210:35"><call pos:start="210:5" pos:end="210:35"><name pos:start="210:5" pos:end="210:20">EVP_DigestUpdate</name><argument_list pos:start="210:21" pos:end="210:35">(<argument pos:start="210:22" pos:end="210:26"><expr pos:start="210:22" pos:end="210:26"><name pos:start="210:22" pos:end="210:26">mdctx</name></expr></argument>, <argument pos:start="210:29" pos:end="210:31"><expr pos:start="210:29" pos:end="210:31"><literal type="string" pos:start="210:29" pos:end="210:31">":"</literal></expr></argument>, <argument pos:start="210:34" pos:end="210:34"><expr pos:start="210:34" pos:end="210:34"><literal type="number" pos:start="210:34" pos:end="210:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="211:5" pos:end="211:72"><expr pos:start="211:5" pos:end="211:71"><call pos:start="211:5" pos:end="211:71"><name pos:start="211:5" pos:end="211:20">EVP_DigestUpdate</name><argument_list pos:start="211:21" pos:end="211:71">(<argument pos:start="211:22" pos:end="211:26"><expr pos:start="211:22" pos:end="211:26"><name pos:start="211:22" pos:end="211:26">mdctx</name></expr></argument>, <argument pos:start="211:29" pos:end="211:37"><expr pos:start="211:29" pos:end="211:37"><name pos:start="211:29" pos:end="211:37"><name pos:start="211:29" pos:end="211:30">ah</name><operator pos:start="211:31" pos:end="211:32">-&gt;</operator><name pos:start="211:33" pos:end="211:37">nonce</name></name></expr></argument>, <argument pos:start="211:40" pos:end="211:70"><expr pos:start="211:40" pos:end="211:70"><call pos:start="211:40" pos:end="211:70"><name pos:start="211:40" pos:end="211:48">strnlen_s</name><argument_list pos:start="211:49" pos:end="211:70">(<argument pos:start="211:50" pos:end="211:58"><expr pos:start="211:50" pos:end="211:58"><name pos:start="211:50" pos:end="211:58"><name pos:start="211:50" pos:end="211:51">ah</name><operator pos:start="211:52" pos:end="211:53">-&gt;</operator><name pos:start="211:54" pos:end="211:58">nonce</name></name></expr></argument>, <argument pos:start="211:61" pos:end="211:69"><expr pos:start="211:61" pos:end="211:69"><name pos:start="211:61" pos:end="211:69">MAX_NONCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="212:5" pos:end="212:36"><expr pos:start="212:5" pos:end="212:35"><call pos:start="212:5" pos:end="212:35"><name pos:start="212:5" pos:end="212:20">EVP_DigestUpdate</name><argument_list pos:start="212:21" pos:end="212:35">(<argument pos:start="212:22" pos:end="212:26"><expr pos:start="212:22" pos:end="212:26"><name pos:start="212:22" pos:end="212:26">mdctx</name></expr></argument>, <argument pos:start="212:29" pos:end="212:31"><expr pos:start="212:29" pos:end="212:31"><literal type="string" pos:start="212:29" pos:end="212:31">":"</literal></expr></argument>, <argument pos:start="212:34" pos:end="212:34"><expr pos:start="212:34" pos:end="212:34"><literal type="number" pos:start="212:34" pos:end="212:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="213:5" pos:end="213:63"><expr pos:start="213:5" pos:end="213:62"><call pos:start="213:5" pos:end="213:62"><name pos:start="213:5" pos:end="213:20">EVP_DigestUpdate</name><argument_list pos:start="213:21" pos:end="213:62">(<argument pos:start="213:22" pos:end="213:26"><expr pos:start="213:22" pos:end="213:26"><name pos:start="213:22" pos:end="213:26">mdctx</name></expr></argument>, <argument pos:start="213:29" pos:end="213:34"><expr pos:start="213:29" pos:end="213:34"><name pos:start="213:29" pos:end="213:34"><name pos:start="213:29" pos:end="213:30">ah</name><operator pos:start="213:31" pos:end="213:32">-&gt;</operator><name pos:start="213:33" pos:end="213:34">nc</name></name></expr></argument>, <argument pos:start="213:37" pos:end="213:61"><expr pos:start="213:37" pos:end="213:61"><call pos:start="213:37" pos:end="213:61"><name pos:start="213:37" pos:end="213:45">strnlen_s</name><argument_list pos:start="213:46" pos:end="213:61">(<argument pos:start="213:47" pos:end="213:52"><expr pos:start="213:47" pos:end="213:52"><name pos:start="213:47" pos:end="213:52"><name pos:start="213:47" pos:end="213:48">ah</name><operator pos:start="213:49" pos:end="213:50">-&gt;</operator><name pos:start="213:51" pos:end="213:52">nc</name></name></expr></argument>, <argument pos:start="213:55" pos:end="213:60"><expr pos:start="213:55" pos:end="213:60"><name pos:start="213:55" pos:end="213:60">MAX_NC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="214:5" pos:end="214:36"><expr pos:start="214:5" pos:end="214:35"><call pos:start="214:5" pos:end="214:35"><name pos:start="214:5" pos:end="214:20">EVP_DigestUpdate</name><argument_list pos:start="214:21" pos:end="214:35">(<argument pos:start="214:22" pos:end="214:26"><expr pos:start="214:22" pos:end="214:26"><name pos:start="214:22" pos:end="214:26">mdctx</name></expr></argument>, <argument pos:start="214:29" pos:end="214:31"><expr pos:start="214:29" pos:end="214:31"><literal type="string" pos:start="214:29" pos:end="214:31">":"</literal></expr></argument>, <argument pos:start="214:34" pos:end="214:34"><expr pos:start="214:34" pos:end="214:34"><literal type="number" pos:start="214:34" pos:end="214:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="215:5" pos:end="215:74"><expr pos:start="215:5" pos:end="215:73"><call pos:start="215:5" pos:end="215:73"><name pos:start="215:5" pos:end="215:20">EVP_DigestUpdate</name><argument_list pos:start="215:21" pos:end="215:73">(<argument pos:start="215:22" pos:end="215:26"><expr pos:start="215:22" pos:end="215:26"><name pos:start="215:22" pos:end="215:26">mdctx</name></expr></argument>, <argument pos:start="215:29" pos:end="215:38"><expr pos:start="215:29" pos:end="215:38"><name pos:start="215:29" pos:end="215:38"><name pos:start="215:29" pos:end="215:30">ah</name><operator pos:start="215:31" pos:end="215:32">-&gt;</operator><name pos:start="215:33" pos:end="215:38">cnonce</name></name></expr></argument>, <argument pos:start="215:41" pos:end="215:72"><expr pos:start="215:41" pos:end="215:72"><call pos:start="215:41" pos:end="215:72"><name pos:start="215:41" pos:end="215:49">strnlen_s</name><argument_list pos:start="215:50" pos:end="215:72">(<argument pos:start="215:51" pos:end="215:60"><expr pos:start="215:51" pos:end="215:60"><name pos:start="215:51" pos:end="215:60"><name pos:start="215:51" pos:end="215:52">ah</name><operator pos:start="215:53" pos:end="215:54">-&gt;</operator><name pos:start="215:55" pos:end="215:60">cnonce</name></name></expr></argument>, <argument pos:start="215:63" pos:end="215:71"><expr pos:start="215:63" pos:end="215:71"><name pos:start="215:63" pos:end="215:71">MAX_NONCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="216:5" pos:end="216:36"><expr pos:start="216:5" pos:end="216:35"><call pos:start="216:5" pos:end="216:35"><name pos:start="216:5" pos:end="216:20">EVP_DigestUpdate</name><argument_list pos:start="216:21" pos:end="216:35">(<argument pos:start="216:22" pos:end="216:26"><expr pos:start="216:22" pos:end="216:26"><name pos:start="216:22" pos:end="216:26">mdctx</name></expr></argument>, <argument pos:start="216:29" pos:end="216:31"><expr pos:start="216:29" pos:end="216:31"><literal type="string" pos:start="216:29" pos:end="216:31">":"</literal></expr></argument>, <argument pos:start="216:34" pos:end="216:34"><expr pos:start="216:34" pos:end="216:34"><literal type="number" pos:start="216:34" pos:end="216:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="217:5" pos:end="217:39"><expr pos:start="217:5" pos:end="217:38"><call pos:start="217:5" pos:end="217:38"><name pos:start="217:5" pos:end="217:20">EVP_DigestUpdate</name><argument_list pos:start="217:21" pos:end="217:38">(<argument pos:start="217:22" pos:end="217:26"><expr pos:start="217:22" pos:end="217:26"><name pos:start="217:22" pos:end="217:26">mdctx</name></expr></argument>, <argument pos:start="217:29" pos:end="217:34"><expr pos:start="217:29" pos:end="217:34"><literal type="string" pos:start="217:29" pos:end="217:34">"auth"</literal></expr></argument>, <argument pos:start="217:37" pos:end="217:37"><expr pos:start="217:37" pos:end="217:37"><literal type="number" pos:start="217:37" pos:end="217:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="218:5" pos:end="218:36"><expr pos:start="218:5" pos:end="218:35"><call pos:start="218:5" pos:end="218:35"><name pos:start="218:5" pos:end="218:20">EVP_DigestUpdate</name><argument_list pos:start="218:21" pos:end="218:35">(<argument pos:start="218:22" pos:end="218:26"><expr pos:start="218:22" pos:end="218:26"><name pos:start="218:22" pos:end="218:26">mdctx</name></expr></argument>, <argument pos:start="218:29" pos:end="218:31"><expr pos:start="218:29" pos:end="218:31"><literal type="string" pos:start="218:29" pos:end="218:31">":"</literal></expr></argument>, <argument pos:start="218:34" pos:end="218:34"><expr pos:start="218:34" pos:end="218:34"><literal type="number" pos:start="218:34" pos:end="218:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="219:5" pos:end="219:50"><expr pos:start="219:5" pos:end="219:49"><call pos:start="219:5" pos:end="219:49"><name pos:start="219:5" pos:end="219:20">EVP_DigestUpdate</name><argument_list pos:start="219:21" pos:end="219:49">(<argument pos:start="219:22" pos:end="219:26"><expr pos:start="219:22" pos:end="219:26"><name pos:start="219:22" pos:end="219:26">mdctx</name></expr></argument>, <argument pos:start="219:29" pos:end="219:35"><expr pos:start="219:29" pos:end="219:35"><name pos:start="219:29" pos:end="219:35">ha2_str</name></expr></argument>, <argument pos:start="219:38" pos:end="219:48"><expr pos:start="219:38" pos:end="219:48"><name pos:start="219:38" pos:end="219:44">ha2_len</name> <operator pos:start="219:46" pos:end="219:46">*</operator> <literal type="number" pos:start="219:48" pos:end="219:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="220:5" pos:end="220:43"><expr pos:start="220:5" pos:end="220:42"><call pos:start="220:5" pos:end="220:42"><name pos:start="220:5" pos:end="220:19">EVP_DigestFinal</name><argument_list pos:start="220:20" pos:end="220:42">(<argument pos:start="220:21" pos:end="220:25"><expr pos:start="220:21" pos:end="220:25"><name pos:start="220:21" pos:end="220:25">mdctx</name></expr></argument>, <argument pos:start="220:28" pos:end="220:33"><expr pos:start="220:28" pos:end="220:33"><name pos:start="220:28" pos:end="220:33">digest</name></expr></argument>, <argument pos:start="220:36" pos:end="220:41"><expr pos:start="220:36" pos:end="220:41"><operator pos:start="220:36" pos:end="220:36">&amp;</operator><name pos:start="220:37" pos:end="220:41">d_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="221:5" pos:end="221:30"><expr pos:start="221:5" pos:end="221:29"><call pos:start="221:5" pos:end="221:29"><name pos:start="221:5" pos:end="221:22">EVP_MD_CTX_destroy</name><argument_list pos:start="221:23" pos:end="221:29">(<argument pos:start="221:24" pos:end="221:28"><expr pos:start="221:24" pos:end="221:28"><name pos:start="221:24" pos:end="221:28">mdctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:20"><expr pos:start="223:5" pos:end="223:19"><name pos:start="223:5" pos:end="223:6">rv</name> <operator pos:start="223:8" pos:end="223:8">=</operator> <call pos:start="223:10" pos:end="223:19"><name pos:start="223:10" pos:end="223:15">malloc</name><argument_list pos:start="223:16" pos:end="223:19">(<argument pos:start="223:17" pos:end="223:18"><expr pos:start="223:17" pos:end="223:18"><literal type="number" pos:start="223:17" pos:end="223:18">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="224:5" pos:end="224:38"><expr pos:start="224:5" pos:end="224:37"><call pos:start="224:5" pos:end="224:37"><name pos:start="224:5" pos:end="224:18">est_hex_to_str</name><argument_list pos:start="224:19" pos:end="224:37">(<argument pos:start="224:20" pos:end="224:21"><expr pos:start="224:20" pos:end="224:21"><name pos:start="224:20" pos:end="224:21">rv</name></expr></argument>, <argument pos:start="224:24" pos:end="224:29"><expr pos:start="224:24" pos:end="224:29"><name pos:start="224:24" pos:end="224:29">digest</name></expr></argument>, <argument pos:start="224:32" pos:end="224:36"><expr pos:start="224:32" pos:end="224:36"><name pos:start="224:32" pos:end="224:36">d_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="225:5" pos:end="225:16">return <expr pos:start="225:12" pos:end="225:15"><operator pos:start="225:12" pos:end="225:12">(</operator><name pos:start="225:13" pos:end="225:14">rv</name><operator pos:start="225:15" pos:end="225:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="227:1" pos:end="232:3">/*
 * This function allocates an HTTP authentication header
 * structure, which is used to pass the auth credentials
 * to the application layer to allow the app to authenticate
 * an EST client.
 */</comment>
<function pos:start="233:1" pos:end="240:1"><type pos:start="233:1" pos:end="233:26"><specifier pos:start="233:1" pos:end="233:6">static</specifier> <name pos:start="233:8" pos:end="233:24">EST_HTTP_AUTH_HDR</name> <modifier pos:start="233:26" pos:end="233:26">*</modifier></type> <name pos:start="233:28" pos:end="233:40">est_create_ah</name><parameter_list pos:start="233:41" pos:end="233:42">()</parameter_list>
<block pos:start="234:1" pos:end="240:1">{<block_content pos:start="235:5" pos:end="239:16">
    <decl_stmt pos:start="235:5" pos:end="235:26"><decl pos:start="235:5" pos:end="235:25"><type pos:start="235:5" pos:end="235:23"><name pos:start="235:5" pos:end="235:21">EST_HTTP_AUTH_HDR</name> <modifier pos:start="235:23" pos:end="235:23">*</modifier></type><name pos:start="235:24" pos:end="235:25">ah</name></decl>;</decl_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:43"><expr pos:start="237:5" pos:end="237:42"><name pos:start="237:5" pos:end="237:6">ah</name> <operator pos:start="237:8" pos:end="237:8">=</operator> <call pos:start="237:10" pos:end="237:42"><name pos:start="237:10" pos:end="237:15">malloc</name><argument_list pos:start="237:16" pos:end="237:42">(<argument pos:start="237:17" pos:end="237:41"><expr pos:start="237:17" pos:end="237:41"><sizeof pos:start="237:17" pos:end="237:41">sizeof<argument_list pos:start="237:23" pos:end="237:41">(<argument pos:start="237:24" pos:end="237:40"><expr pos:start="237:24" pos:end="237:40"><name pos:start="237:24" pos:end="237:40">EST_HTTP_AUTH_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="238:5" pos:end="238:45"><expr pos:start="238:5" pos:end="238:44"><call pos:start="238:5" pos:end="238:44"><name pos:start="238:5" pos:end="238:13">memzero_s</name><argument_list pos:start="238:14" pos:end="238:44">(<argument pos:start="238:15" pos:end="238:16"><expr pos:start="238:15" pos:end="238:16"><name pos:start="238:15" pos:end="238:16">ah</name></expr></argument>, <argument pos:start="238:19" pos:end="238:43"><expr pos:start="238:19" pos:end="238:43"><sizeof pos:start="238:19" pos:end="238:43">sizeof<argument_list pos:start="238:25" pos:end="238:43">(<argument pos:start="238:26" pos:end="238:42"><expr pos:start="238:26" pos:end="238:42"><name pos:start="238:26" pos:end="238:42">EST_HTTP_AUTH_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="239:5" pos:end="239:16">return <expr pos:start="239:12" pos:end="239:15"><operator pos:start="239:12" pos:end="239:12">(</operator><name pos:start="239:13" pos:end="239:14">ah</name><operator pos:start="239:15" pos:end="239:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="241:1" pos:end="244:3">/*
 * This function frees all the elements on an HTTP
 * authentication header structure.
 */</comment>
<function pos:start="245:1" pos:end="275:1"><type pos:start="245:1" pos:end="245:11"><specifier pos:start="245:1" pos:end="245:6">static</specifier> <name pos:start="245:8" pos:end="245:11">void</name></type> <name pos:start="245:13" pos:end="245:26">est_destroy_ah</name><parameter_list pos:start="245:27" pos:end="245:49">(<parameter pos:start="245:28" pos:end="245:48"><decl pos:start="245:28" pos:end="245:48"><type pos:start="245:28" pos:end="245:46"><name pos:start="245:28" pos:end="245:44">EST_HTTP_AUTH_HDR</name> <modifier pos:start="245:46" pos:end="245:46">*</modifier></type><name pos:start="245:47" pos:end="245:48">ah</name></decl></parameter>)</parameter_list>
<block pos:start="246:1" pos:end="275:1">{<block_content pos:start="247:5" pos:end="274:13">
    <decl_stmt pos:start="247:5" pos:end="247:12"><decl pos:start="247:5" pos:end="247:11"><type pos:start="247:5" pos:end="247:7"><name pos:start="247:5" pos:end="247:7">int</name></type> <name pos:start="247:9" pos:end="247:11">len</name></decl>;</decl_stmt>

    <if_stmt pos:start="249:5" pos:end="249:20"><if pos:start="249:5" pos:end="249:20">if <condition pos:start="249:8" pos:end="249:12">(<expr pos:start="249:9" pos:end="249:11"><operator pos:start="249:9" pos:end="249:9">!</operator><name pos:start="249:10" pos:end="249:11">ah</name></expr>)</condition><block type="pseudo" pos:start="249:14" pos:end="249:20"><block_content pos:start="249:14" pos:end="249:20"> <return pos:start="249:14" pos:end="249:20">return;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="250:5" pos:end="250:33"><if pos:start="250:5" pos:end="250:33">if <condition pos:start="250:8" pos:end="250:17">(<expr pos:start="250:9" pos:end="250:16"><name pos:start="250:9" pos:end="250:16"><name pos:start="250:9" pos:end="250:10">ah</name><operator pos:start="250:11" pos:end="250:12">-&gt;</operator><name pos:start="250:13" pos:end="250:16">user</name></name></expr>)</condition><block type="pseudo" pos:start="250:19" pos:end="250:33"><block_content pos:start="250:19" pos:end="250:33"> <expr_stmt pos:start="250:19" pos:end="250:33"><expr pos:start="250:19" pos:end="250:32"><call pos:start="250:19" pos:end="250:32"><name pos:start="250:19" pos:end="250:22">free</name><argument_list pos:start="250:23" pos:end="250:32">(<argument pos:start="250:24" pos:end="250:31"><expr pos:start="250:24" pos:end="250:31"><name pos:start="250:24" pos:end="250:31"><name pos:start="250:24" pos:end="250:25">ah</name><operator pos:start="250:26" pos:end="250:27">-&gt;</operator><name pos:start="250:28" pos:end="250:31">user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="251:5" pos:end="260:5"><if pos:start="251:5" pos:end="260:5">if <condition pos:start="251:8" pos:end="251:16">(<expr pos:start="251:9" pos:end="251:15"><name pos:start="251:9" pos:end="251:15"><name pos:start="251:9" pos:end="251:10">ah</name><operator pos:start="251:11" pos:end="251:12">-&gt;</operator><name pos:start="251:13" pos:end="251:15">pwd</name></name></expr>)</condition> <block pos:start="251:18" pos:end="260:5">{<block_content pos:start="255:9" pos:end="259:22">
	<comment type="block" pos:start="252:9" pos:end="254:11">/*
	 * Get the length of the password so it can be zeroized 
	 */</comment>
	<expr_stmt pos:start="255:9" pos:end="255:45"><expr pos:start="255:9" pos:end="255:44"><name pos:start="255:9" pos:end="255:11">len</name> <operator pos:start="255:13" pos:end="255:13">=</operator> <call pos:start="255:15" pos:end="255:44"><name pos:start="255:15" pos:end="255:23">strnlen_s</name><argument_list pos:start="255:24" pos:end="255:44">(<argument pos:start="255:25" pos:end="255:31"><expr pos:start="255:25" pos:end="255:31"><name pos:start="255:25" pos:end="255:31"><name pos:start="255:25" pos:end="255:26">ah</name><operator pos:start="255:27" pos:end="255:28">-&gt;</operator><name pos:start="255:29" pos:end="255:31">pwd</name></name></expr></argument>, <argument pos:start="255:34" pos:end="255:43"><expr pos:start="255:34" pos:end="255:43"><name pos:start="255:34" pos:end="255:43">MAX_UIDPWD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="256:9" pos:end="258:9"><if pos:start="256:9" pos:end="258:9">if <condition pos:start="256:12" pos:end="256:16">(<expr pos:start="256:13" pos:end="256:15"><name pos:start="256:13" pos:end="256:15">len</name></expr>)</condition> <block pos:start="256:18" pos:end="258:9">{<block_content pos:start="257:13" pos:end="257:36">
	    <expr_stmt pos:start="257:13" pos:end="257:36"><expr pos:start="257:13" pos:end="257:35"><call pos:start="257:13" pos:end="257:35"><name pos:start="257:13" pos:end="257:21">memzero_s</name><argument_list pos:start="257:22" pos:end="257:35">(<argument pos:start="257:23" pos:end="257:29"><expr pos:start="257:23" pos:end="257:29"><name pos:start="257:23" pos:end="257:29"><name pos:start="257:23" pos:end="257:24">ah</name><operator pos:start="257:25" pos:end="257:26">-&gt;</operator><name pos:start="257:27" pos:end="257:29">pwd</name></name></expr></argument>, <argument pos:start="257:32" pos:end="257:34"><expr pos:start="257:32" pos:end="257:34"><name pos:start="257:32" pos:end="257:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt pos:start="259:9" pos:end="259:22"><expr pos:start="259:9" pos:end="259:21"><call pos:start="259:9" pos:end="259:21"><name pos:start="259:9" pos:end="259:12">free</name><argument_list pos:start="259:13" pos:end="259:21">(<argument pos:start="259:14" pos:end="259:20"><expr pos:start="259:14" pos:end="259:20"><name pos:start="259:14" pos:end="259:20"><name pos:start="259:14" pos:end="259:15">ah</name><operator pos:start="259:16" pos:end="259:17">-&gt;</operator><name pos:start="259:18" pos:end="259:20">pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="261:5" pos:end="261:31"><if pos:start="261:5" pos:end="261:31">if <condition pos:start="261:8" pos:end="261:16">(<expr pos:start="261:9" pos:end="261:15"><name pos:start="261:9" pos:end="261:15"><name pos:start="261:9" pos:end="261:10">ah</name><operator pos:start="261:11" pos:end="261:12">-&gt;</operator><name pos:start="261:13" pos:end="261:15">uri</name></name></expr>)</condition><block type="pseudo" pos:start="261:18" pos:end="261:31"><block_content pos:start="261:18" pos:end="261:31"> <expr_stmt pos:start="261:18" pos:end="261:31"><expr pos:start="261:18" pos:end="261:30"><call pos:start="261:18" pos:end="261:30"><name pos:start="261:18" pos:end="261:21">free</name><argument_list pos:start="261:22" pos:end="261:30">(<argument pos:start="261:23" pos:end="261:29"><expr pos:start="261:23" pos:end="261:29"><name pos:start="261:23" pos:end="261:29"><name pos:start="261:23" pos:end="261:24">ah</name><operator pos:start="261:25" pos:end="261:26">-&gt;</operator><name pos:start="261:27" pos:end="261:29">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="262:5" pos:end="262:37"><if pos:start="262:5" pos:end="262:37">if <condition pos:start="262:8" pos:end="262:19">(<expr pos:start="262:9" pos:end="262:18"><name pos:start="262:9" pos:end="262:18"><name pos:start="262:9" pos:end="262:10">ah</name><operator pos:start="262:11" pos:end="262:12">-&gt;</operator><name pos:start="262:13" pos:end="262:18">cnonce</name></name></expr>)</condition><block type="pseudo" pos:start="262:21" pos:end="262:37"><block_content pos:start="262:21" pos:end="262:37"> <expr_stmt pos:start="262:21" pos:end="262:37"><expr pos:start="262:21" pos:end="262:36"><call pos:start="262:21" pos:end="262:36"><name pos:start="262:21" pos:end="262:24">free</name><argument_list pos:start="262:25" pos:end="262:36">(<argument pos:start="262:26" pos:end="262:35"><expr pos:start="262:26" pos:end="262:35"><name pos:start="262:26" pos:end="262:35"><name pos:start="262:26" pos:end="262:27">ah</name><operator pos:start="262:28" pos:end="262:29">-&gt;</operator><name pos:start="262:30" pos:end="262:35">cnonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="263:5" pos:end="263:31"><if pos:start="263:5" pos:end="263:31">if <condition pos:start="263:8" pos:end="263:16">(<expr pos:start="263:9" pos:end="263:15"><name pos:start="263:9" pos:end="263:15"><name pos:start="263:9" pos:end="263:10">ah</name><operator pos:start="263:11" pos:end="263:12">-&gt;</operator><name pos:start="263:13" pos:end="263:15">qop</name></name></expr>)</condition><block type="pseudo" pos:start="263:18" pos:end="263:31"><block_content pos:start="263:18" pos:end="263:31"> <expr_stmt pos:start="263:18" pos:end="263:31"><expr pos:start="263:18" pos:end="263:30"><call pos:start="263:18" pos:end="263:30"><name pos:start="263:18" pos:end="263:21">free</name><argument_list pos:start="263:22" pos:end="263:30">(<argument pos:start="263:23" pos:end="263:29"><expr pos:start="263:23" pos:end="263:29"><name pos:start="263:23" pos:end="263:29"><name pos:start="263:23" pos:end="263:24">ah</name><operator pos:start="263:25" pos:end="263:26">-&gt;</operator><name pos:start="263:27" pos:end="263:29">qop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="264:5" pos:end="264:29"><if pos:start="264:5" pos:end="264:29">if <condition pos:start="264:8" pos:end="264:15">(<expr pos:start="264:9" pos:end="264:14"><name pos:start="264:9" pos:end="264:14"><name pos:start="264:9" pos:end="264:10">ah</name><operator pos:start="264:11" pos:end="264:12">-&gt;</operator><name pos:start="264:13" pos:end="264:14">nc</name></name></expr>)</condition><block type="pseudo" pos:start="264:17" pos:end="264:29"><block_content pos:start="264:17" pos:end="264:29"> <expr_stmt pos:start="264:17" pos:end="264:29"><expr pos:start="264:17" pos:end="264:28"><call pos:start="264:17" pos:end="264:28"><name pos:start="264:17" pos:end="264:20">free</name><argument_list pos:start="264:21" pos:end="264:28">(<argument pos:start="264:22" pos:end="264:27"><expr pos:start="264:22" pos:end="264:27"><name pos:start="264:22" pos:end="264:27"><name pos:start="264:22" pos:end="264:23">ah</name><operator pos:start="264:24" pos:end="264:25">-&gt;</operator><name pos:start="264:26" pos:end="264:27">nc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="265:5" pos:end="265:35"><if pos:start="265:5" pos:end="265:35">if <condition pos:start="265:8" pos:end="265:18">(<expr pos:start="265:9" pos:end="265:17"><name pos:start="265:9" pos:end="265:17"><name pos:start="265:9" pos:end="265:10">ah</name><operator pos:start="265:11" pos:end="265:12">-&gt;</operator><name pos:start="265:13" pos:end="265:17">nonce</name></name></expr>)</condition><block type="pseudo" pos:start="265:20" pos:end="265:35"><block_content pos:start="265:20" pos:end="265:35"> <expr_stmt pos:start="265:20" pos:end="265:35"><expr pos:start="265:20" pos:end="265:34"><call pos:start="265:20" pos:end="265:34"><name pos:start="265:20" pos:end="265:23">free</name><argument_list pos:start="265:24" pos:end="265:34">(<argument pos:start="265:25" pos:end="265:33"><expr pos:start="265:25" pos:end="265:33"><name pos:start="265:25" pos:end="265:33"><name pos:start="265:25" pos:end="265:26">ah</name><operator pos:start="265:27" pos:end="265:28">-&gt;</operator><name pos:start="265:29" pos:end="265:33">nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="266:5" pos:end="266:41"><if pos:start="266:5" pos:end="266:41">if <condition pos:start="266:8" pos:end="266:21">(<expr pos:start="266:9" pos:end="266:20"><name pos:start="266:9" pos:end="266:20"><name pos:start="266:9" pos:end="266:10">ah</name><operator pos:start="266:11" pos:end="266:12">-&gt;</operator><name pos:start="266:13" pos:end="266:20">response</name></name></expr>)</condition><block type="pseudo" pos:start="266:23" pos:end="266:41"><block_content pos:start="266:23" pos:end="266:41"> <expr_stmt pos:start="266:23" pos:end="266:41"><expr pos:start="266:23" pos:end="266:40"><call pos:start="266:23" pos:end="266:40"><name pos:start="266:23" pos:end="266:26">free</name><argument_list pos:start="266:27" pos:end="266:40">(<argument pos:start="266:28" pos:end="266:39"><expr pos:start="266:28" pos:end="266:39"><name pos:start="266:28" pos:end="266:39"><name pos:start="266:28" pos:end="266:29">ah</name><operator pos:start="266:30" pos:end="266:31">-&gt;</operator><name pos:start="266:32" pos:end="266:39">response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="267:5" pos:end="273:5"><if pos:start="267:5" pos:end="273:5">if <condition pos:start="267:8" pos:end="267:23">(<expr pos:start="267:9" pos:end="267:22"><name pos:start="267:9" pos:end="267:22"><name pos:start="267:9" pos:end="267:10">ah</name><operator pos:start="267:11" pos:end="267:12">-&gt;</operator><name pos:start="267:13" pos:end="267:22">auth_token</name></name></expr>)</condition> <block pos:start="267:25" pos:end="273:5">{<block_content pos:start="268:9" pos:end="272:29">
	<expr_stmt pos:start="268:9" pos:end="268:60"><expr pos:start="268:9" pos:end="268:59"><name pos:start="268:9" pos:end="268:11">len</name> <operator pos:start="268:13" pos:end="268:13">=</operator> <call pos:start="268:15" pos:end="268:59"><name pos:start="268:15" pos:end="268:23">strnlen_s</name><argument_list pos:start="268:24" pos:end="268:59">(<argument pos:start="268:25" pos:end="268:38"><expr pos:start="268:25" pos:end="268:38"><name pos:start="268:25" pos:end="268:38"><name pos:start="268:25" pos:end="268:26">ah</name><operator pos:start="268:27" pos:end="268:28">-&gt;</operator><name pos:start="268:29" pos:end="268:38">auth_token</name></name></expr></argument>, <argument pos:start="268:41" pos:end="268:58"><expr pos:start="268:41" pos:end="268:58"><name pos:start="268:41" pos:end="268:58">MAX_AUTH_TOKEN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="269:9" pos:end="271:9"><if pos:start="269:9" pos:end="271:9">if <condition pos:start="269:12" pos:end="269:16">(<expr pos:start="269:13" pos:end="269:15"><name pos:start="269:13" pos:end="269:15">len</name></expr>)</condition> <block pos:start="269:18" pos:end="271:9">{<block_content pos:start="270:13" pos:end="270:43">
	    <expr_stmt pos:start="270:13" pos:end="270:43"><expr pos:start="270:13" pos:end="270:42"><call pos:start="270:13" pos:end="270:42"><name pos:start="270:13" pos:end="270:21">memzero_s</name><argument_list pos:start="270:22" pos:end="270:42">(<argument pos:start="270:23" pos:end="270:36"><expr pos:start="270:23" pos:end="270:36"><name pos:start="270:23" pos:end="270:36"><name pos:start="270:23" pos:end="270:24">ah</name><operator pos:start="270:25" pos:end="270:26">-&gt;</operator><name pos:start="270:27" pos:end="270:36">auth_token</name></name></expr></argument>, <argument pos:start="270:39" pos:end="270:41"><expr pos:start="270:39" pos:end="270:41"><name pos:start="270:39" pos:end="270:41">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt pos:start="272:9" pos:end="272:29"><expr pos:start="272:9" pos:end="272:28"><call pos:start="272:9" pos:end="272:28"><name pos:start="272:9" pos:end="272:12">free</name><argument_list pos:start="272:13" pos:end="272:28">(<argument pos:start="272:14" pos:end="272:27"><expr pos:start="272:14" pos:end="272:27"><name pos:start="272:14" pos:end="272:27"><name pos:start="272:14" pos:end="272:15">ah</name><operator pos:start="272:16" pos:end="272:17">-&gt;</operator><name pos:start="272:18" pos:end="272:27">auth_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="274:5" pos:end="274:13"><expr pos:start="274:5" pos:end="274:12"><call pos:start="274:5" pos:end="274:12"><name pos:start="274:5" pos:end="274:8">free</name><argument_list pos:start="274:9" pos:end="274:12">(<argument pos:start="274:10" pos:end="274:11"><expr pos:start="274:10" pos:end="274:11"><name pos:start="274:10" pos:end="274:11">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="276:1" pos:end="282:3">/*
 * This function verifies that the peer either provided a certificate
 * that was verifed by the TLS stack, or HTTP authentication
 * credentials were provided. 
 *
 * Returns a EST_AUTH_STATE authorization result 
 */</comment>
<function pos:start="283:1" pos:end="380:1"><type pos:start="283:1" pos:end="283:14"><name pos:start="283:1" pos:end="283:14">EST_AUTH_STATE</name></type> <name pos:start="283:16" pos:end="283:30">est_enroll_auth</name> <parameter_list pos:start="283:32" pos:end="284:61">(<parameter pos:start="283:33" pos:end="283:44"><decl pos:start="283:33" pos:end="283:44"><type pos:start="283:33" pos:end="283:44"><name pos:start="283:33" pos:end="283:39">EST_CTX</name> <modifier pos:start="283:41" pos:end="283:41">*</modifier></type><name pos:start="283:42" pos:end="283:44">ctx</name></decl></parameter>, <parameter pos:start="283:47" pos:end="283:60"><decl pos:start="283:47" pos:end="283:60"><type pos:start="283:47" pos:end="283:60"><name pos:start="283:47" pos:end="283:50">void</name> <modifier pos:start="283:52" pos:end="283:52">*</modifier></type><name pos:start="283:53" pos:end="283:60">http_ctx</name></decl></parameter>, <parameter pos:start="283:63" pos:end="283:70"><decl pos:start="283:63" pos:end="283:70"><type pos:start="283:63" pos:end="283:70"><name pos:start="283:63" pos:end="283:65">SSL</name> <modifier pos:start="283:67" pos:end="283:67">*</modifier></type><name pos:start="283:68" pos:end="283:70">ssl</name></decl></parameter>,
	                        <parameter pos:start="284:33" pos:end="284:46"><decl pos:start="284:33" pos:end="284:46"><type pos:start="284:33" pos:end="284:46"><name pos:start="284:33" pos:end="284:36">char</name> <modifier pos:start="284:38" pos:end="284:38">*</modifier></type><name pos:start="284:39" pos:end="284:46">path_seg</name></decl></parameter>, <parameter pos:start="284:49" pos:end="284:60"><decl pos:start="284:49" pos:end="284:60"><type pos:start="284:49" pos:end="284:60"><name pos:start="284:49" pos:end="284:51">int</name></type> <name pos:start="284:53" pos:end="284:60">reenroll</name></decl></parameter>)</parameter_list>
<block pos:start="285:1" pos:end="380:1">{<block_content pos:start="286:5" pos:end="378:16">
    <decl_stmt pos:start="286:5" pos:end="286:41"><decl pos:start="286:5" pos:end="286:40"><type pos:start="286:5" pos:end="286:18"><name pos:start="286:5" pos:end="286:18">EST_AUTH_STATE</name></type> <name pos:start="286:20" pos:end="286:21">rv</name> <init pos:start="286:23" pos:end="286:40">= <expr pos:start="286:25" pos:end="286:40"><name pos:start="286:25" pos:end="286:40">EST_UNAUTHORIZED</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="287:5" pos:end="287:22"><decl pos:start="287:5" pos:end="287:21"><type pos:start="287:5" pos:end="287:10"><name pos:start="287:5" pos:end="287:8">X509</name> <modifier pos:start="287:10" pos:end="287:10">*</modifier></type><name pos:start="287:11" pos:end="287:14">peer</name> <init pos:start="287:16" pos:end="287:21">= <expr pos:start="287:18" pos:end="287:21"><name pos:start="287:18" pos:end="287:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="288:5" pos:end="288:65"><decl pos:start="288:5" pos:end="288:64"><type pos:start="288:5" pos:end="288:26"><name pos:start="288:5" pos:end="288:24"><name pos:start="288:5" pos:end="288:10">struct</name> <name pos:start="288:12" pos:end="288:24">mg_connection</name></name> <modifier pos:start="288:26" pos:end="288:26">*</modifier></type><name pos:start="288:27" pos:end="288:30">conn</name> <init pos:start="288:32" pos:end="288:64">= <expr pos:start="288:34" pos:end="288:64"><operator pos:start="288:34" pos:end="288:34">(</operator>struct <name pos:start="288:42" pos:end="288:54">mg_connection</name><operator pos:start="288:55" pos:end="288:55">*</operator><operator pos:start="288:56" pos:end="288:56">)</operator><name pos:start="288:57" pos:end="288:64">http_ctx</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="289:5" pos:end="289:26"><decl pos:start="289:5" pos:end="289:25"><type pos:start="289:5" pos:end="289:23"><name pos:start="289:5" pos:end="289:21">EST_HTTP_AUTH_HDR</name> <modifier pos:start="289:23" pos:end="289:23">*</modifier></type><name pos:start="289:24" pos:end="289:25">ah</name></decl>;</decl_stmt>
    <decl_stmt pos:start="290:5" pos:end="290:32"><decl pos:start="290:5" pos:end="290:31"><type pos:start="290:5" pos:end="290:28"><name pos:start="290:5" pos:end="290:28">EST_HTTP_AUTH_HDR_RESULT</name></type> <name pos:start="290:30" pos:end="290:31">pr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="291:5" pos:end="291:17"><decl pos:start="291:5" pos:end="291:16"><type pos:start="291:5" pos:end="291:7"><name pos:start="291:5" pos:end="291:7">int</name></type> <name pos:start="291:9" pos:end="291:16">v_result</name></decl>;</decl_stmt>

    <comment type="block" pos:start="293:5" pos:end="295:7">/*
     * Get client certificate from TLS stack.  
     */</comment>
    <if_stmt pos:start="296:5" pos:end="317:5"><if pos:start="296:5" pos:end="314:5">if <condition pos:start="296:8" pos:end="296:55">(<expr pos:start="296:9" pos:end="296:54"><operator pos:start="296:9" pos:end="296:9">(</operator><name pos:start="296:10" pos:end="296:13">peer</name> <operator pos:start="296:15" pos:end="296:15">=</operator> <call pos:start="296:17" pos:end="296:45"><name pos:start="296:17" pos:end="296:40">SSL_get_peer_certificate</name><argument_list pos:start="296:41" pos:end="296:45">(<argument pos:start="296:42" pos:end="296:44"><expr pos:start="296:42" pos:end="296:44"><name pos:start="296:42" pos:end="296:44">ssl</name></expr></argument>)</argument_list></call><operator pos:start="296:46" pos:end="296:46">)</operator> <operator pos:start="296:48" pos:end="296:49">!=</operator> <name pos:start="296:51" pos:end="296:54">NULL</name></expr>)</condition> <block pos:start="296:57" pos:end="314:5">{<block_content pos:start="298:9" pos:end="313:9">
        <comment type="line" pos:start="297:9" pos:end="297:75">// check TLS based client authorization (is client cert authorized)</comment>
        <expr_stmt pos:start="298:9" pos:end="298:52"><expr pos:start="298:9" pos:end="298:51"><name pos:start="298:9" pos:end="298:16">v_result</name> <operator pos:start="298:18" pos:end="298:18">=</operator> <operator pos:start="298:20" pos:end="298:20">(</operator><name pos:start="298:21" pos:end="298:23">int</name><operator pos:start="298:24" pos:end="298:24">)</operator> <call pos:start="298:26" pos:end="298:51"><name pos:start="298:26" pos:end="298:46">SSL_get_verify_result</name><argument_list pos:start="298:47" pos:end="298:51">(<argument pos:start="298:48" pos:end="298:50"><expr pos:start="298:48" pos:end="298:50"><name pos:start="298:48" pos:end="298:50">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="299:9" pos:end="313:9"><if pos:start="299:9" pos:end="302:9">if <condition pos:start="299:12" pos:end="299:34">(<expr pos:start="299:13" pos:end="299:33"><name pos:start="299:13" pos:end="299:21">X509_V_OK</name> <operator pos:start="299:23" pos:end="299:24">==</operator> <name pos:start="299:26" pos:end="299:33">v_result</name></expr>)</condition> <block pos:start="299:36" pos:end="302:9">{<block_content pos:start="300:13" pos:end="301:31">
            <expr_stmt pos:start="300:13" pos:end="300:61"><expr pos:start="300:13" pos:end="300:60"><call pos:start="300:13" pos:end="300:60"><name pos:start="300:13" pos:end="300:24">EST_LOG_INFO</name><argument_list pos:start="300:25" pos:end="300:60">(<argument pos:start="300:26" pos:end="300:59"><expr pos:start="300:26" pos:end="300:59"><literal type="string" pos:start="300:26" pos:end="300:59">"TLS: client certificate is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="301:13" pos:end="301:31"><expr pos:start="301:13" pos:end="301:30"><name pos:start="301:13" pos:end="301:14">rv</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <name pos:start="301:18" pos:end="301:30">EST_CERT_AUTH</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif" pos:start="303:9" pos:end="306:9">else if <condition pos:start="303:17" pos:end="303:58">(<expr pos:start="303:18" pos:end="303:57"><name pos:start="303:18" pos:end="303:45">X509_V_ERR_UNABLE_TO_GET_CRL</name> <operator pos:start="303:47" pos:end="303:48">==</operator> <name pos:start="303:50" pos:end="303:57">v_result</name></expr>)</condition> <block pos:start="303:60" pos:end="306:9">{<block_content pos:start="304:13" pos:end="305:31">
            <expr_stmt pos:start="304:13" pos:end="304:116"><expr pos:start="304:13" pos:end="304:115"><call pos:start="304:13" pos:end="304:115"><name pos:start="304:13" pos:end="304:24">EST_LOG_WARN</name><argument_list pos:start="304:25" pos:end="304:115">(<argument pos:start="304:26" pos:end="304:114"><expr pos:start="304:26" pos:end="304:114"><literal type="string" pos:start="304:26" pos:end="304:114">"Peer cert is valid, but no CRL was loaded. Unable to determine if peer cert is revoked."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="305:13" pos:end="305:31"><expr pos:start="305:13" pos:end="305:30"><name pos:start="305:13" pos:end="305:14">rv</name> <operator pos:start="305:16" pos:end="305:16">=</operator> <name pos:start="305:18" pos:end="305:30">EST_CERT_AUTH</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="306:11" pos:end="313:9">else <block pos:start="306:16" pos:end="313:9">{<block_content pos:start="307:13" pos:end="312:37">
            <expr_stmt pos:start="307:13" pos:end="308:35"><expr pos:start="307:13" pos:end="308:34"><call pos:start="307:13" pos:end="308:34"><name pos:start="307:13" pos:end="307:24">EST_LOG_INFO</name><argument_list pos:start="307:25" pos:end="308:34">(<argument pos:start="307:26" pos:end="307:77"><expr pos:start="307:26" pos:end="307:77"><literal type="string" pos:start="307:26" pos:end="307:77">"TLS: client certificate not verified (v_result=%d)"</literal></expr></argument>,
		         <argument pos:start="308:26" pos:end="308:33"><expr pos:start="308:26" pos:end="308:33"><name pos:start="308:26" pos:end="308:33">v_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block" pos:start="309:13" pos:end="310:67">/* We need to bail since the client is using a bogus cert,
	     * no need to contiue with HTTP authentication below */</comment>
	    <expr_stmt pos:start="311:13" pos:end="311:28"><expr pos:start="311:13" pos:end="311:27"><call pos:start="311:13" pos:end="311:27"><name pos:start="311:13" pos:end="311:21">X509_free</name><argument_list pos:start="311:22" pos:end="311:27">(<argument pos:start="311:23" pos:end="311:26"><expr pos:start="311:23" pos:end="311:26"><name pos:start="311:23" pos:end="311:26">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="312:13" pos:end="312:37">return<expr pos:start="312:19" pos:end="312:36"><operator pos:start="312:19" pos:end="312:19">(</operator><name pos:start="312:20" pos:end="312:35">EST_UNAUTHORIZED</name><operator pos:start="312:36" pos:end="312:36">)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else pos:start="314:7" pos:end="317:5">else <block pos:start="314:12" pos:end="317:5">{<block_content pos:start="315:9" pos:end="316:30">
        <expr_stmt pos:start="315:9" pos:end="315:49"><expr pos:start="315:9" pos:end="315:48"><call pos:start="315:9" pos:end="315:48"><name pos:start="315:9" pos:end="315:20">EST_LOG_INFO</name><argument_list pos:start="315:21" pos:end="315:48">(<argument pos:start="315:22" pos:end="315:47"><expr pos:start="315:22" pos:end="315:47"><literal type="string" pos:start="315:22" pos:end="315:47">"TLS: no peer certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="316:9" pos:end="316:30"><expr pos:start="316:9" pos:end="316:29"><name pos:start="316:9" pos:end="316:10">rv</name> <operator pos:start="316:12" pos:end="316:12">=</operator> <name pos:start="316:14" pos:end="316:29">EST_UNAUTHORIZED</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="319:5" pos:end="322:7">/*
     * See if SRP is being used.  If so, there will be no
     * certificate.
     */</comment>
    <if_stmt pos:start="323:5" pos:end="327:5"><if pos:start="323:5" pos:end="327:5">if <condition pos:start="323:8" pos:end="323:65">(<expr pos:start="323:9" pos:end="323:64"><name pos:start="323:9" pos:end="323:10">rv</name> <operator pos:start="323:12" pos:end="323:13">!=</operator> <name pos:start="323:15" pos:end="323:27">EST_CERT_AUTH</name> <operator pos:start="323:29" pos:end="323:30">&amp;&amp;</operator> <call pos:start="323:32" pos:end="323:56"><name pos:start="323:32" pos:end="323:51">SSL_get_srp_username</name><argument_list pos:start="323:52" pos:end="323:56">(<argument pos:start="323:53" pos:end="323:55"><expr pos:start="323:53" pos:end="323:55"><name pos:start="323:53" pos:end="323:55">ssl</name></expr></argument>)</argument_list></call> <operator pos:start="323:58" pos:end="323:59">!=</operator> <name pos:start="323:61" pos:end="323:64">NULL</name></expr>)</condition> <block pos:start="323:67" pos:end="327:5">{<block_content pos:start="324:9" pos:end="326:26">
        <expr_stmt pos:start="324:9" pos:end="325:43"><expr pos:start="324:9" pos:end="325:42"><call pos:start="324:9" pos:end="325:42"><name pos:start="324:9" pos:end="324:20">EST_LOG_INFO</name><argument_list pos:start="324:21" pos:end="325:42">(<argument pos:start="324:22" pos:end="324:71"><expr pos:start="324:22" pos:end="324:71"><literal type="string" pos:start="324:22" pos:end="324:71">"TLS: no certificate from client, SRP login is %s"</literal></expr></argument>,
		<argument pos:start="325:17" pos:end="325:41"><expr pos:start="325:17" pos:end="325:41"><call pos:start="325:17" pos:end="325:41"><name pos:start="325:17" pos:end="325:36">SSL_get_srp_username</name><argument_list pos:start="325:37" pos:end="325:41">(<argument pos:start="325:38" pos:end="325:40"><expr pos:start="325:38" pos:end="325:40"><name pos:start="325:38" pos:end="325:40">ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="326:9" pos:end="326:26"><expr pos:start="326:9" pos:end="326:25"><name pos:start="326:9" pos:end="326:10">rv</name> <operator pos:start="326:12" pos:end="326:12">=</operator> <name pos:start="326:14" pos:end="326:25">EST_SRP_AUTH</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="329:5" pos:end="335:7">/*
     * If the application layer has enabled HTTP authentication we
     * will attempt HTTP authentication when TLS client auth fails
     * or when the require_http_auth flag is set by the application.
     * All this assumes the application layer has provided the HTTP auth
     * callback facility.
     */</comment>
    <if_stmt pos:start="336:5" pos:end="374:5"><if pos:start="336:5" pos:end="374:5">if <condition pos:start="336:8" pos:end="337:81">(<expr pos:start="336:9" pos:end="337:80"><name pos:start="336:9" pos:end="336:29"><name pos:start="336:9" pos:end="336:11">ctx</name><operator pos:start="336:12" pos:end="336:13">-&gt;</operator><name pos:start="336:14" pos:end="336:29">est_http_auth_cb</name></name> <operator pos:start="336:31" pos:end="336:32">&amp;&amp;</operator> 
	<operator pos:start="337:9" pos:end="337:9">(</operator><name pos:start="337:10" pos:end="337:11">rv</name> <operator pos:start="337:13" pos:end="337:14">==</operator> <name pos:start="337:16" pos:end="337:31">EST_UNAUTHORIZED</name> <operator pos:start="337:33" pos:end="337:34">||</operator> <name pos:start="337:36" pos:end="337:53">HTTP_AUTH_REQUIRED</name> <operator pos:start="337:55" pos:end="337:56">==</operator> <name pos:start="337:58" pos:end="337:79"><name pos:start="337:58" pos:end="337:60">ctx</name><operator pos:start="337:61" pos:end="337:62">-&gt;</operator><name pos:start="337:63" pos:end="337:79">require_http_auth</name></name><operator pos:start="337:80" pos:end="337:80">)</operator></expr>)</condition> <block pos:start="337:83" pos:end="374:5">{<block_content pos:start="341:9" pos:end="373:27">
        <comment type="block" pos:start="338:9" pos:end="340:11">/*
         * Try HTTP authentication.
         */</comment>
	<expr_stmt pos:start="341:9" pos:end="341:29"><expr pos:start="341:9" pos:end="341:28"><name pos:start="341:9" pos:end="341:10">ah</name> <operator pos:start="341:12" pos:end="341:12">=</operator> <call pos:start="341:14" pos:end="341:28"><name pos:start="341:14" pos:end="341:26">est_create_ah</name><argument_list pos:start="341:27" pos:end="341:28">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="342:9" pos:end="342:44"><expr pos:start="342:9" pos:end="342:43"><name pos:start="342:9" pos:end="342:10">pr</name> <operator pos:start="342:12" pos:end="342:12">=</operator> <call pos:start="342:14" pos:end="342:43"><name pos:start="342:14" pos:end="342:33">mg_parse_auth_header</name><argument_list pos:start="342:34" pos:end="342:43">(<argument pos:start="342:35" pos:end="342:38"><expr pos:start="342:35" pos:end="342:38"><name pos:start="342:35" pos:end="342:38">conn</name></expr></argument>, <argument pos:start="342:41" pos:end="342:42"><expr pos:start="342:41" pos:end="342:42"><name pos:start="342:41" pos:end="342:42">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch pos:start="343:9" pos:end="372:9">switch <condition pos:start="343:16" pos:end="343:19">(<expr pos:start="343:17" pos:end="343:18"><name pos:start="343:17" pos:end="343:18">pr</name></expr>)</condition> <block pos:start="343:21" pos:end="372:9">{<block_content pos:start="344:9" pos:end="371:18">
        <case pos:start="344:9" pos:end="344:31">case <expr pos:start="344:14" pos:end="344:30"><name pos:start="344:14" pos:end="344:30">EST_AUTH_HDR_GOOD</name></expr>:</case>
	    <comment type="block" pos:start="345:13" pos:end="348:15">/*
	     * Invoke the application specific auth check now 
	     * that we have the user's credentials
	     */</comment>
	    <if_stmt pos:start="349:13" pos:end="355:13"><if pos:start="349:13" pos:end="351:13">if <condition pos:start="349:16" pos:end="349:77">(<expr pos:start="349:17" pos:end="349:76"><call pos:start="349:17" pos:end="349:76"><name pos:start="349:17" pos:end="349:37"><name pos:start="349:17" pos:end="349:19">ctx</name><operator pos:start="349:20" pos:end="349:21">-&gt;</operator><name pos:start="349:22" pos:end="349:37">est_http_auth_cb</name></name><argument_list pos:start="349:38" pos:end="349:76">(<argument pos:start="349:39" pos:end="349:41"><expr pos:start="349:39" pos:end="349:41"><name pos:start="349:39" pos:end="349:41">ctx</name></expr></argument>, <argument pos:start="349:44" pos:end="349:45"><expr pos:start="349:44" pos:end="349:45"><name pos:start="349:44" pos:end="349:45">ah</name></expr></argument>, <argument pos:start="349:48" pos:end="349:51"><expr pos:start="349:48" pos:end="349:51"><name pos:start="349:48" pos:end="349:51">peer</name></expr></argument>, <argument pos:start="349:54" pos:end="349:61"><expr pos:start="349:54" pos:end="349:61"><name pos:start="349:54" pos:end="349:61">path_seg</name></expr></argument>, <argument pos:start="349:64" pos:end="349:75"><expr pos:start="349:64" pos:end="349:75"><name pos:start="349:64" pos:end="349:75"><name pos:start="349:64" pos:end="349:66">ctx</name><operator pos:start="349:67" pos:end="349:68">-&gt;</operator><name pos:start="349:69" pos:end="349:75">ex_data</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="349:79" pos:end="351:13">{<block_content pos:start="350:17" pos:end="350:35">
		<expr_stmt pos:start="350:17" pos:end="350:35"><expr pos:start="350:17" pos:end="350:34"><name pos:start="350:17" pos:end="350:18">rv</name> <operator pos:start="350:20" pos:end="350:20">=</operator> <name pos:start="350:22" pos:end="350:34">EST_HTTP_AUTH</name></expr>;</expr_stmt>
	    </block_content>}</block></if> <else pos:start="351:15" pos:end="355:13">else <block pos:start="351:20" pos:end="355:13">{<block_content pos:start="352:17" pos:end="354:38">
                <expr_stmt pos:start="352:17" pos:end="353:39"><expr pos:start="352:17" pos:end="353:38"><call pos:start="352:17" pos:end="353:38"><name pos:start="352:17" pos:end="352:28">EST_LOG_WARN</name><argument_list pos:start="352:29" pos:end="353:38">(<argument pos:start="352:30" pos:end="352:71"><expr pos:start="352:30" pos:end="352:71"><literal type="string" pos:start="352:30" pos:end="352:71">"HTTP authentication failed. Auth type=%d"</literal></expr></argument>, 
                             <argument pos:start="353:30" pos:end="353:37"><expr pos:start="353:30" pos:end="353:37"><name pos:start="353:30" pos:end="353:37"><name pos:start="353:30" pos:end="353:31">ah</name><operator pos:start="353:32" pos:end="353:33">-&gt;</operator><name pos:start="353:34" pos:end="353:37">mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="354:17" pos:end="354:38"><expr pos:start="354:17" pos:end="354:37"><name pos:start="354:17" pos:end="354:18">rv</name> <operator pos:start="354:20" pos:end="354:20">=</operator> <name pos:start="354:22" pos:end="354:37">EST_UNAUTHORIZED</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	    <break pos:start="356:13" pos:end="356:18">break;</break>
        <case pos:start="357:9" pos:end="357:34">case <expr pos:start="357:14" pos:end="357:33"><name pos:start="357:14" pos:end="357:33">EST_AUTH_HDR_MISSING</name></expr>:</case>
            <comment type="line" pos:start="358:13" pos:end="358:58">// ask client to send us authorization headers</comment>
            <expr_stmt pos:start="359:13" pos:end="359:48"><expr pos:start="359:13" pos:end="359:47"><call pos:start="359:13" pos:end="359:47"><name pos:start="359:13" pos:end="359:41">mg_send_authorization_request</name><argument_list pos:start="359:42" pos:end="359:47">(<argument pos:start="359:43" pos:end="359:46"><expr pos:start="359:43" pos:end="359:46"><name pos:start="359:43" pos:end="359:46">conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="360:13" pos:end="360:92"><expr pos:start="360:13" pos:end="360:91"><call pos:start="360:13" pos:end="360:91"><name pos:start="360:13" pos:end="360:24">EST_LOG_INFO</name><argument_list pos:start="360:25" pos:end="360:91">(<argument pos:start="360:26" pos:end="360:90"><expr pos:start="360:26" pos:end="360:90"><literal type="string" pos:start="360:26" pos:end="360:90">"HTTP auth headers missing, sending HTTP auth request to client."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="361:13" pos:end="361:39"><expr pos:start="361:13" pos:end="361:38"><name pos:start="361:13" pos:end="361:14">rv</name> <operator pos:start="361:16" pos:end="361:16">=</operator> <name pos:start="361:18" pos:end="361:38">EST_HTTP_AUTH_PENDING</name></expr>;</expr_stmt>
	    <break pos:start="362:13" pos:end="362:18">break;</break>
        <case pos:start="363:9" pos:end="363:30">case <expr pos:start="363:14" pos:end="363:29"><name pos:start="363:14" pos:end="363:29">EST_AUTH_HDR_BAD</name></expr>:</case>
	<default pos:start="364:9" pos:end="364:16">default:</default>
            <expr_stmt pos:start="365:13" pos:end="365:77"><expr pos:start="365:13" pos:end="365:76"><call pos:start="365:13" pos:end="365:76"><name pos:start="365:13" pos:end="365:24">EST_LOG_WARN</name><argument_list pos:start="365:25" pos:end="365:76">(<argument pos:start="365:26" pos:end="365:75"><expr pos:start="365:26" pos:end="365:75"><literal type="string" pos:start="365:26" pos:end="365:75">"Client sent incomplete HTTP authorization header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	    <if_stmt pos:start="366:13" pos:end="370:13"><if pos:start="366:13" pos:end="368:13">if <condition pos:start="366:16" pos:end="366:48">(<expr pos:start="366:17" pos:end="366:47"><name pos:start="366:17" pos:end="366:24">reenroll</name> <operator pos:start="366:26" pos:end="366:27">&amp;&amp;</operator> <name pos:start="366:29" pos:end="366:30">rv</name> <operator pos:start="366:32" pos:end="366:33">==</operator> <name pos:start="366:35" pos:end="366:47">EST_CERT_AUTH</name></expr>)</condition> <block pos:start="366:50" pos:end="368:13">{<block_content pos:start="367:17" pos:end="367:99">
		<expr_stmt pos:start="367:17" pos:end="367:99"><expr pos:start="367:17" pos:end="367:98"><call pos:start="367:17" pos:end="367:98"><name pos:start="367:17" pos:end="367:28">EST_LOG_INFO</name><argument_list pos:start="367:29" pos:end="367:98">(<argument pos:start="367:30" pos:end="367:97"><expr pos:start="367:30" pos:end="367:97"><literal type="string" pos:start="367:30" pos:end="367:97">"Client cert was authenticated, HTTP auth not required for reenroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	    </block_content>}</block></if> <else pos:start="368:15" pos:end="370:13">else <block pos:start="368:20" pos:end="370:13">{<block_content pos:start="369:17" pos:end="369:38">
		<expr_stmt pos:start="369:17" pos:end="369:38"><expr pos:start="369:17" pos:end="369:37"><name pos:start="369:17" pos:end="369:18">rv</name> <operator pos:start="369:20" pos:end="369:20">=</operator> <name pos:start="369:22" pos:end="369:37">EST_UNAUTHORIZED</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	    <break pos:start="371:13" pos:end="371:18">break;</break>
	</block_content>}</block></switch>
	<expr_stmt pos:start="373:9" pos:end="373:27"><expr pos:start="373:9" pos:end="373:26"><call pos:start="373:9" pos:end="373:26"><name pos:start="373:9" pos:end="373:22">est_destroy_ah</name><argument_list pos:start="373:23" pos:end="373:26">(<argument pos:start="373:24" pos:end="373:25"><expr pos:start="373:24" pos:end="373:25"><name pos:start="373:24" pos:end="373:25">ah</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <if_stmt pos:start="375:5" pos:end="377:5"><if pos:start="375:5" pos:end="377:5">if <condition pos:start="375:8" pos:end="375:13">(<expr pos:start="375:9" pos:end="375:12"><name pos:start="375:9" pos:end="375:12">peer</name></expr>)</condition> <block pos:start="375:15" pos:end="377:5">{<block_content pos:start="376:9" pos:end="376:24">
	<expr_stmt pos:start="376:9" pos:end="376:24"><expr pos:start="376:9" pos:end="376:23"><call pos:start="376:9" pos:end="376:23"><name pos:start="376:9" pos:end="376:17">X509_free</name><argument_list pos:start="376:18" pos:end="376:23">(<argument pos:start="376:19" pos:end="376:22"><expr pos:start="376:19" pos:end="376:22"><name pos:start="376:19" pos:end="376:22">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="378:5" pos:end="378:16">return <expr pos:start="378:12" pos:end="378:15"><operator pos:start="378:12" pos:end="378:12">(</operator><name pos:start="378:13" pos:end="378:14">rv</name><operator pos:start="378:15" pos:end="378:15">)</operator></expr>;</return>

</block_content>}</block></function>
<comment type="block" pos:start="381:1" pos:end="391:3">/*
 * This function is used to determine if the EST client, which could be
 * an RA, is using a certificate that contains the id-kp-cmcRA usage
 * extension.  When this usage bit is present, the PoP check is disabled
 * to allow the RA use case. 
 *
 * This logic was taken from x509v3_cache_extensions() in v3_purp.c (OpenSSL).
 *
 * Returns 1 if the cert contains id-kp-cmcRA extended key usage extension.
 * Otherwise it returns 0.
 */</comment>
<function pos:start="392:1" pos:end="423:1"><type pos:start="392:1" pos:end="392:10"><specifier pos:start="392:1" pos:end="392:6">static</specifier> <name pos:start="392:8" pos:end="392:10">int</name></type> <name pos:start="392:12" pos:end="392:26">est_check_cmcRA</name> <parameter_list pos:start="392:28" pos:end="392:39">(<parameter pos:start="392:29" pos:end="392:38"><decl pos:start="392:29" pos:end="392:38"><type pos:start="392:29" pos:end="392:34"><name pos:start="392:29" pos:end="392:32">X509</name> <modifier pos:start="392:34" pos:end="392:34">*</modifier></type><name pos:start="392:35" pos:end="392:38">cert</name></decl></parameter>)</parameter_list> 
<block pos:start="393:1" pos:end="423:1">{<block_content pos:start="394:5" pos:end="422:25">
    <decl_stmt pos:start="394:5" pos:end="394:24"><decl pos:start="394:5" pos:end="394:23"><type pos:start="394:5" pos:end="394:7"><name pos:start="394:5" pos:end="394:7">int</name></type> <name pos:start="394:9" pos:end="394:19">cmcRA_found</name> <init pos:start="394:21" pos:end="394:23">= <expr pos:start="394:23" pos:end="394:23"><literal type="number" pos:start="394:23" pos:end="394:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="395:5" pos:end="395:33"><decl pos:start="395:5" pos:end="395:32"><type pos:start="395:5" pos:end="395:24"><name pos:start="395:5" pos:end="395:22">EXTENDED_KEY_USAGE</name> <modifier pos:start="395:24" pos:end="395:24">*</modifier></type><name pos:start="395:25" pos:end="395:32">extusage</name></decl>;</decl_stmt>
    <decl_stmt pos:start="396:5" pos:end="396:10"><decl pos:start="396:5" pos:end="396:9"><type pos:start="396:5" pos:end="396:7"><name pos:start="396:5" pos:end="396:7">int</name></type> <name pos:start="396:9" pos:end="396:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="397:5" pos:end="397:21"><decl pos:start="397:5" pos:end="397:20"><type pos:start="397:5" pos:end="397:17"><name pos:start="397:5" pos:end="397:15">ASN1_OBJECT</name> <modifier pos:start="397:17" pos:end="397:17">*</modifier></type><name pos:start="397:18" pos:end="397:20">obj</name></decl>;</decl_stmt>

    <comment type="block" pos:start="399:5" pos:end="403:7">/*
     * Get the extended key usage extension.  If found
     * loop through the values and look for the ik-kp-cmcRA
     * value in this extension.
     */</comment>
    <if_stmt pos:start="404:5" pos:end="420:5"><if pos:start="404:5" pos:end="420:5">if<condition pos:start="404:7" pos:end="404:74">(<expr pos:start="404:8" pos:end="404:73"><operator pos:start="404:8" pos:end="404:8">(</operator><name pos:start="404:9" pos:end="404:16">extusage</name> <operator pos:start="404:18" pos:end="404:18">=</operator> <call pos:start="404:20" pos:end="404:72"><name pos:start="404:20" pos:end="404:35">X509_get_ext_d2i</name><argument_list pos:start="404:36" pos:end="404:72">(<argument pos:start="404:37" pos:end="404:40"><expr pos:start="404:37" pos:end="404:40"><name pos:start="404:37" pos:end="404:40">cert</name></expr></argument>, <argument pos:start="404:43" pos:end="404:59"><expr pos:start="404:43" pos:end="404:59"><name pos:start="404:43" pos:end="404:59">NID_ext_key_usage</name></expr></argument>, <argument pos:start="404:62" pos:end="404:65"><expr pos:start="404:62" pos:end="404:65"><name pos:start="404:62" pos:end="404:65">NULL</name></expr></argument>, <argument pos:start="404:68" pos:end="404:71"><expr pos:start="404:68" pos:end="404:71"><name pos:start="404:68" pos:end="404:71">NULL</name></expr></argument>)</argument_list></call><operator pos:start="404:73" pos:end="404:73">)</operator></expr>)</condition> <block pos:start="404:76" pos:end="420:5">{<block_content pos:start="408:9" pos:end="419:60">
	<comment type="block" pos:start="405:9" pos:end="407:11">/*
	 * Iterate through the extended key usage values
	 */</comment>
        <for pos:start="408:9" pos:end="418:9">for<control pos:start="408:12" pos:end="408:57">(<init pos:start="408:13" pos:end="408:18"><expr pos:start="408:13" pos:end="408:17"><name pos:start="408:13" pos:end="408:13">i</name> <operator pos:start="408:15" pos:end="408:15">=</operator> <literal type="number" pos:start="408:17" pos:end="408:17">0</literal></expr>;</init> <condition pos:start="408:20" pos:end="408:52"><expr pos:start="408:20" pos:end="408:51"><name pos:start="408:20" pos:end="408:20">i</name> <operator pos:start="408:22" pos:end="408:22">&lt;</operator> <call pos:start="408:24" pos:end="408:51"><name pos:start="408:24" pos:end="408:41">sk_ASN1_OBJECT_num</name><argument_list pos:start="408:42" pos:end="408:51">(<argument pos:start="408:43" pos:end="408:50"><expr pos:start="408:43" pos:end="408:50"><name pos:start="408:43" pos:end="408:50">extusage</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="408:54" pos:end="408:56"><expr pos:start="408:54" pos:end="408:56"><name pos:start="408:54" pos:end="408:54">i</name><operator pos:start="408:55" pos:end="408:56">++</operator></expr></incr>)</control> <block pos:start="408:59" pos:end="418:9">{<block_content pos:start="409:13" pos:end="417:13">
	    <expr_stmt pos:start="409:13" pos:end="409:52"><expr pos:start="409:13" pos:end="409:51"><name pos:start="409:13" pos:end="409:15">obj</name> <operator pos:start="409:17" pos:end="409:17">=</operator>  <call pos:start="409:20" pos:end="409:51"><name pos:start="409:20" pos:end="409:39">sk_ASN1_OBJECT_value</name><argument_list pos:start="409:40" pos:end="409:51">(<argument pos:start="409:41" pos:end="409:48"><expr pos:start="409:41" pos:end="409:48"><name pos:start="409:41" pos:end="409:48">extusage</name></expr></argument>,<argument pos:start="409:50" pos:end="409:50"><expr pos:start="409:50" pos:end="409:50"><name pos:start="409:50" pos:end="409:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block" pos:start="410:13" pos:end="413:15">/*
	     * Compare the current iteration with the global
	     * id-kp-cmcRA value that was created earlier
	     */</comment>
            <if_stmt pos:start="414:13" pos:end="417:13"><if pos:start="414:13" pos:end="417:13">if <condition pos:start="414:16" pos:end="414:39">(<expr pos:start="414:17" pos:end="414:38"><operator pos:start="414:17" pos:end="414:17">!</operator><call pos:start="414:18" pos:end="414:38"><name pos:start="414:18" pos:end="414:24">OBJ_cmp</name><argument_list pos:start="414:25" pos:end="414:38">(<argument pos:start="414:26" pos:end="414:28"><expr pos:start="414:26" pos:end="414:28"><name pos:start="414:26" pos:end="414:28">obj</name></expr></argument>, <argument pos:start="414:31" pos:end="414:37"><expr pos:start="414:31" pos:end="414:37"><name pos:start="414:31" pos:end="414:37">o_cmcRA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="414:41" pos:end="417:13">{<block_content pos:start="415:17" pos:end="416:22">
                <expr_stmt pos:start="415:17" pos:end="415:32"><expr pos:start="415:17" pos:end="415:31"><name pos:start="415:17" pos:end="415:27">cmcRA_found</name> <operator pos:start="415:29" pos:end="415:29">=</operator> <literal type="number" pos:start="415:31" pos:end="415:31">1</literal></expr>;</expr_stmt> 
                <break pos:start="416:17" pos:end="416:22">break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="419:9" pos:end="419:60"><expr pos:start="419:9" pos:end="419:59"><call pos:start="419:9" pos:end="419:59"><name pos:start="419:9" pos:end="419:31">sk_ASN1_OBJECT_pop_free</name><argument_list pos:start="419:32" pos:end="419:59">(<argument pos:start="419:33" pos:end="419:40"><expr pos:start="419:33" pos:end="419:40"><name pos:start="419:33" pos:end="419:40">extusage</name></expr></argument>, <argument pos:start="419:43" pos:end="419:58"><expr pos:start="419:43" pos:end="419:58"><name pos:start="419:43" pos:end="419:58">ASN1_OBJECT_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="422:5" pos:end="422:25">return <expr pos:start="422:12" pos:end="422:24"><operator pos:start="422:12" pos:end="422:12">(</operator><name pos:start="422:13" pos:end="422:23">cmcRA_found</name><operator pos:start="422:24" pos:end="422:24">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="424:1" pos:end="428:3">/*
 * This is a utility function to convert the base64 DER encoded
 * CSR to an OpenSSL X509_REQ pointer.  Returns NULL if there
 * was a problem.
 */</comment>
<function pos:start="429:1" pos:end="462:1"><type pos:start="429:1" pos:end="429:10"><name pos:start="429:1" pos:end="429:8">X509_REQ</name> <modifier pos:start="429:10" pos:end="429:10">*</modifier></type> <name pos:start="429:12" pos:end="429:31">est_server_parse_csr</name> <parameter_list pos:start="429:33" pos:end="429:71">(<parameter pos:start="429:34" pos:end="429:54"><decl pos:start="429:34" pos:end="429:54"><type pos:start="429:34" pos:end="429:54"><name pos:start="429:34" pos:end="429:41">unsigned</name> <name pos:start="429:43" pos:end="429:46">char</name> <modifier pos:start="429:48" pos:end="429:48">*</modifier></type><name pos:start="429:49" pos:end="429:54">pkcs10</name></decl></parameter>, <parameter pos:start="429:57" pos:end="429:70"><decl pos:start="429:57" pos:end="429:70"><type pos:start="429:57" pos:end="429:70"><name pos:start="429:57" pos:end="429:59">int</name></type> <name pos:start="429:61" pos:end="429:70">pkcs10_len</name></decl></parameter>)</parameter_list>
<block pos:start="430:1" pos:end="462:1">{<block_content pos:start="431:5" pos:end="461:15">
    <decl_stmt pos:start="431:5" pos:end="431:18"><decl pos:start="431:5" pos:end="431:11"><type pos:start="431:5" pos:end="431:9"><name pos:start="431:5" pos:end="431:7">BIO</name> <modifier pos:start="431:9" pos:end="431:9">*</modifier></type><name pos:start="431:10" pos:end="431:11">in</name></decl>, <decl pos:start="431:14" pos:end="431:17"><type ref="prev" pos:start="431:5" pos:end="431:9"><modifier pos:start="431:14" pos:end="431:14">*</modifier></type><name pos:start="431:15" pos:end="431:17">b64</name></decl>;</decl_stmt>
    <decl_stmt pos:start="432:5" pos:end="432:18"><decl pos:start="432:5" pos:end="432:17"><type pos:start="432:5" pos:end="432:14"><name pos:start="432:5" pos:end="432:12">X509_REQ</name> <modifier pos:start="432:14" pos:end="432:14">*</modifier></type><name pos:start="432:15" pos:end="432:17">req</name></decl>;</decl_stmt>

    <comment type="block" pos:start="434:5" pos:end="436:7">/*
     * Get the original pkcs10 request from the client
     */</comment>
    <expr_stmt pos:start="437:5" pos:end="437:34"><expr pos:start="437:5" pos:end="437:33"><name pos:start="437:5" pos:end="437:7">b64</name> <operator pos:start="437:9" pos:end="437:9">=</operator> <call pos:start="437:11" pos:end="437:33"><name pos:start="437:11" pos:end="437:17">BIO_new</name><argument_list pos:start="437:18" pos:end="437:33">(<argument pos:start="437:19" pos:end="437:32"><expr pos:start="437:19" pos:end="437:32"><call pos:start="437:19" pos:end="437:32"><name pos:start="437:19" pos:end="437:30">BIO_f_base64</name><argument_list pos:start="437:31" pos:end="437:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="438:5" pos:end="441:5"><if pos:start="438:5" pos:end="441:5">if <condition pos:start="438:8" pos:end="438:20">(<expr pos:start="438:9" pos:end="438:19"><name pos:start="438:9" pos:end="438:11">b64</name> <operator pos:start="438:13" pos:end="438:14">==</operator> <name pos:start="438:16" pos:end="438:19">NULL</name></expr>)</condition> <block pos:start="438:22" pos:end="441:5">{<block_content pos:start="439:9" pos:end="440:22">
	<expr_stmt pos:start="439:9" pos:end="439:56"><expr pos:start="439:9" pos:end="439:55"><call pos:start="439:9" pos:end="439:55"><name pos:start="439:9" pos:end="439:19">EST_LOG_ERR</name><argument_list pos:start="439:20" pos:end="439:55">(<argument pos:start="439:21" pos:end="439:54"><expr pos:start="439:21" pos:end="439:54"><literal type="string" pos:start="439:21" pos:end="439:54">"Unable to open PKCS10 b64 buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="440:9" pos:end="440:22">return <expr pos:start="440:16" pos:end="440:21"><operator pos:start="440:16" pos:end="440:16">(</operator><name pos:start="440:17" pos:end="440:20">NULL</name><operator pos:start="440:21" pos:end="440:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="442:5" pos:end="442:45"><expr pos:start="442:5" pos:end="442:44"><name pos:start="442:5" pos:end="442:6">in</name> <operator pos:start="442:8" pos:end="442:8">=</operator> <call pos:start="442:10" pos:end="442:44"><name pos:start="442:10" pos:end="442:24">BIO_new_mem_buf</name><argument_list pos:start="442:25" pos:end="442:44">(<argument pos:start="442:26" pos:end="442:31"><expr pos:start="442:26" pos:end="442:31"><name pos:start="442:26" pos:end="442:31">pkcs10</name></expr></argument>, <argument pos:start="442:34" pos:end="442:43"><expr pos:start="442:34" pos:end="442:43"><name pos:start="442:34" pos:end="442:43">pkcs10_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="443:5" pos:end="447:5"><if pos:start="443:5" pos:end="447:5">if <condition pos:start="443:8" pos:end="443:19">(<expr pos:start="443:9" pos:end="443:18"><name pos:start="443:9" pos:end="443:10">in</name> <operator pos:start="443:12" pos:end="443:13">==</operator> <name pos:start="443:15" pos:end="443:18">NULL</name></expr>)</condition> <block pos:start="443:21" pos:end="447:5">{<block_content pos:start="444:9" pos:end="446:22">
	<expr_stmt pos:start="444:9" pos:end="444:56"><expr pos:start="444:9" pos:end="444:55"><call pos:start="444:9" pos:end="444:55"><name pos:start="444:9" pos:end="444:19">EST_LOG_ERR</name><argument_list pos:start="444:20" pos:end="444:55">(<argument pos:start="444:21" pos:end="444:54"><expr pos:start="444:21" pos:end="444:54"><literal type="string" pos:start="444:21" pos:end="444:54">"Unable to open PKCS10 raw buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="445:9" pos:end="445:22"><expr pos:start="445:9" pos:end="445:21"><call pos:start="445:9" pos:end="445:21"><name pos:start="445:9" pos:end="445:16">BIO_free</name><argument_list pos:start="445:17" pos:end="445:21">(<argument pos:start="445:18" pos:end="445:20"><expr pos:start="445:18" pos:end="445:20"><name pos:start="445:18" pos:end="445:20">b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="446:9" pos:end="446:22">return <expr pos:start="446:16" pos:end="446:21"><operator pos:start="446:16" pos:end="446:16">(</operator><name pos:start="446:17" pos:end="446:20">NULL</name><operator pos:start="446:21" pos:end="446:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="448:5" pos:end="448:27"><expr pos:start="448:5" pos:end="448:26"><name pos:start="448:5" pos:end="448:6">in</name> <operator pos:start="448:8" pos:end="448:8">=</operator> <call pos:start="448:10" pos:end="448:26"><name pos:start="448:10" pos:end="448:17">BIO_push</name><argument_list pos:start="448:18" pos:end="448:26">(<argument pos:start="448:19" pos:end="448:21"><expr pos:start="448:19" pos:end="448:21"><name pos:start="448:19" pos:end="448:21">b64</name></expr></argument>, <argument pos:start="448:24" pos:end="448:25"><expr pos:start="448:24" pos:end="448:25"><name pos:start="448:24" pos:end="448:25">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="450:5" pos:end="452:7">/*
     * Read the PEM encoded pkcs10 cert request
     */</comment>
    <if_stmt pos:start="453:5" pos:end="458:5"><if pos:start="453:5" pos:end="458:5">if <condition pos:start="453:8" pos:end="453:51">(<expr pos:start="453:9" pos:end="453:50"><operator pos:start="453:9" pos:end="453:9">(</operator><name pos:start="453:10" pos:end="453:12">req</name> <operator pos:start="453:14" pos:end="453:14">=</operator> <call pos:start="453:16" pos:end="453:41"><name pos:start="453:16" pos:end="453:31">d2i_X509_REQ_bio</name><argument_list pos:start="453:32" pos:end="453:41">(<argument pos:start="453:33" pos:end="453:34"><expr pos:start="453:33" pos:end="453:34"><name pos:start="453:33" pos:end="453:34">in</name></expr></argument>, <argument pos:start="453:37" pos:end="453:40"><expr pos:start="453:37" pos:end="453:40"><name pos:start="453:37" pos:end="453:40">NULL</name></expr></argument>)</argument_list></call><operator pos:start="453:42" pos:end="453:42">)</operator> <operator pos:start="453:44" pos:end="453:45">==</operator> <name pos:start="453:47" pos:end="453:50">NULL</name></expr>)</condition> <block pos:start="453:53" pos:end="458:5">{<block_content pos:start="454:9" pos:end="457:22">
        <expr_stmt pos:start="454:9" pos:end="454:71"><expr pos:start="454:9" pos:end="454:70"><call pos:start="454:9" pos:end="454:70"><name pos:start="454:9" pos:end="454:19">EST_LOG_ERR</name><argument_list pos:start="454:20" pos:end="454:70">(<argument pos:start="454:21" pos:end="454:69"><expr pos:start="454:21" pos:end="454:69"><literal type="string" pos:start="454:21" pos:end="454:69">"Problem reading DER encoded certificate request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="455:9" pos:end="455:31"><expr pos:start="455:9" pos:end="455:30"><call pos:start="455:9" pos:end="455:30"><name pos:start="455:9" pos:end="455:28">ossl_dump_ssl_errors</name><argument_list pos:start="455:29" pos:end="455:30">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="456:9" pos:end="456:25"><expr pos:start="456:9" pos:end="456:24"><call pos:start="456:9" pos:end="456:24"><name pos:start="456:9" pos:end="456:20">BIO_free_all</name><argument_list pos:start="456:21" pos:end="456:24">(<argument pos:start="456:22" pos:end="456:23"><expr pos:start="456:22" pos:end="456:23"><name pos:start="456:22" pos:end="456:23">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="457:9" pos:end="457:22">return <expr pos:start="457:16" pos:end="457:21"><operator pos:start="457:16" pos:end="457:16">(</operator><name pos:start="457:17" pos:end="457:20">NULL</name><operator pos:start="457:21" pos:end="457:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="459:5" pos:end="459:21"><expr pos:start="459:5" pos:end="459:20"><call pos:start="459:5" pos:end="459:20"><name pos:start="459:5" pos:end="459:16">BIO_free_all</name><argument_list pos:start="459:17" pos:end="459:20">(<argument pos:start="459:18" pos:end="459:19"><expr pos:start="459:18" pos:end="459:19"><name pos:start="459:18" pos:end="459:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="461:5" pos:end="461:15">return <expr pos:start="461:12" pos:end="461:14"><name pos:start="461:12" pos:end="461:14">req</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="463:1" pos:end="484:3">/*
 * This function implements the Proof of Posession check (PoP).  The TLS UID has
 * already been saved from the TLS session earlier.  This TLS UID should match the
 * value of the challengePassword attribute in the pkcs10 client certificate.  The
 * client will have provided this value when signing the pkcs10 cert request
 * with its private key, which proves the client is in possession of the private key.
 * This check is enforced as follows:
 *     1. If CSR contains the PoP, it must be valid.
 *     2. If CSR didn't contain the PoP and the server is configured
 *        to require the PoP, then the authentication fails.
 *     3. Otherwise, if CSR didn't contain the PoP and the server is not
 *        configured to require PoP, then authentication passes.
 *
 * Parameters:
 *	ctx:	    Pointer to EST context
 *	ssl:        Pointer to SSL context
 *	pkcs10:	    Pointer to raw PKCS10 data
 *	pkcs10_len: Length of raw PKCS10 data
 *
 * Return value:
 *	EST_ERR_NONE when PoP check passes
 */</comment>
<function pos:start="485:1" pos:end="562:1"><type pos:start="485:1" pos:end="485:3"><name pos:start="485:1" pos:end="485:3">int</name></type> <name pos:start="485:5" pos:end="485:20">est_tls_uid_auth</name> <parameter_list pos:start="485:22" pos:end="485:60">(<parameter pos:start="485:23" pos:end="485:34"><decl pos:start="485:23" pos:end="485:34"><type pos:start="485:23" pos:end="485:34"><name pos:start="485:23" pos:end="485:29">EST_CTX</name> <modifier pos:start="485:31" pos:end="485:31">*</modifier></type><name pos:start="485:32" pos:end="485:34">ctx</name></decl></parameter>, <parameter pos:start="485:37" pos:end="485:44"><decl pos:start="485:37" pos:end="485:44"><type pos:start="485:37" pos:end="485:44"><name pos:start="485:37" pos:end="485:39">SSL</name> <modifier pos:start="485:41" pos:end="485:41">*</modifier></type><name pos:start="485:42" pos:end="485:44">ssl</name></decl></parameter>, <parameter pos:start="485:47" pos:end="485:59"><decl pos:start="485:47" pos:end="485:59"><type pos:start="485:47" pos:end="485:59"><name pos:start="485:47" pos:end="485:54">X509_REQ</name> <modifier pos:start="485:56" pos:end="485:56">*</modifier></type><name pos:start="485:57" pos:end="485:59">req</name></decl></parameter>)</parameter_list> 
<block pos:start="486:1" pos:end="562:1">{<block_content pos:start="487:5" pos:end="561:14">
    <decl_stmt pos:start="487:5" pos:end="487:25"><decl pos:start="487:5" pos:end="487:24"><type pos:start="487:5" pos:end="487:20"><name pos:start="487:5" pos:end="487:18">X509_ATTRIBUTE</name> <modifier pos:start="487:20" pos:end="487:20">*</modifier></type><name pos:start="487:21" pos:end="487:24">attr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="488:5" pos:end="488:13"><decl pos:start="488:5" pos:end="488:9"><type pos:start="488:5" pos:end="488:7"><name pos:start="488:5" pos:end="488:7">int</name></type> <name pos:start="488:9" pos:end="488:9">i</name></decl>, <decl pos:start="488:12" pos:end="488:12"><type ref="prev" pos:start="488:5" pos:end="488:7"/><name pos:start="488:12" pos:end="488:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="490:5" pos:end="490:18"><decl pos:start="490:5" pos:end="490:17"><type pos:start="490:5" pos:end="490:15"><name pos:start="490:5" pos:end="490:13">ASN1_TYPE</name> <modifier pos:start="490:15" pos:end="490:15">*</modifier></type><name pos:start="490:16" pos:end="490:17">at</name></decl>;</decl_stmt>
    <decl_stmt pos:start="491:5" pos:end="491:31"><decl pos:start="491:5" pos:end="491:30"><type pos:start="491:5" pos:end="491:21"><name pos:start="491:5" pos:end="491:19">ASN1_BIT_STRING</name> <modifier pos:start="491:21" pos:end="491:21">*</modifier></type><name pos:start="491:22" pos:end="491:23">bs</name> <init pos:start="491:25" pos:end="491:30">= <expr pos:start="491:27" pos:end="491:30"><name pos:start="491:27" pos:end="491:30">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="492:5" pos:end="492:17"><decl pos:start="492:5" pos:end="492:16"><type pos:start="492:5" pos:end="492:15"><name pos:start="492:5" pos:end="492:13">ASN1_TYPE</name> <modifier pos:start="492:15" pos:end="492:15">*</modifier></type><name pos:start="492:16" pos:end="492:16">t</name></decl>;</decl_stmt>
    <decl_stmt pos:start="493:5" pos:end="493:26"><decl pos:start="493:5" pos:end="493:25"><type pos:start="493:5" pos:end="493:7"><name pos:start="493:5" pos:end="493:7">int</name></type> <name pos:start="493:9" pos:end="493:10">rv</name> <init pos:start="493:12" pos:end="493:25">= <expr pos:start="493:14" pos:end="493:25"><name pos:start="493:14" pos:end="493:25">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="494:5" pos:end="494:18"><decl pos:start="494:5" pos:end="494:17"><type pos:start="494:5" pos:end="494:10"><name pos:start="494:5" pos:end="494:8">char</name> <modifier pos:start="494:10" pos:end="494:10">*</modifier></type><name pos:start="494:11" pos:end="494:17">tls_uid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="495:5" pos:end="495:13"><decl pos:start="495:5" pos:end="495:12"><type pos:start="495:5" pos:end="495:7"><name pos:start="495:5" pos:end="495:7">int</name></type> <name pos:start="495:9" pos:end="495:12">diff</name></decl>;</decl_stmt>

    <comment type="block" pos:start="497:5" pos:end="499:7">/*
     * Get the index of the challengePassword attribute in the request
     */</comment>
    <expr_stmt pos:start="500:5" pos:end="500:71"><expr pos:start="500:5" pos:end="500:70"><name pos:start="500:5" pos:end="500:5">i</name> <operator pos:start="500:7" pos:end="500:7">=</operator> <call pos:start="500:9" pos:end="500:70"><name pos:start="500:9" pos:end="500:32">X509_REQ_get_attr_by_NID</name><argument_list pos:start="500:33" pos:end="500:70">(<argument pos:start="500:34" pos:end="500:36"><expr pos:start="500:34" pos:end="500:36"><name pos:start="500:34" pos:end="500:36">req</name></expr></argument>, <argument pos:start="500:39" pos:end="500:65"><expr pos:start="500:39" pos:end="500:65"><name pos:start="500:39" pos:end="500:65">NID_pkcs9_challengePassword</name></expr></argument>, <argument pos:start="500:68" pos:end="500:69"><expr pos:start="500:68" pos:end="500:69"><operator pos:start="500:68" pos:end="500:68">-</operator><literal type="number" pos:start="500:69" pos:end="500:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="501:5" pos:end="559:5"><if pos:start="501:5" pos:end="514:5">if <condition pos:start="501:8" pos:end="501:14">(<expr pos:start="501:9" pos:end="501:13"><name pos:start="501:9" pos:end="501:9">i</name> <operator pos:start="501:11" pos:end="501:11">&lt;</operator> <literal type="number" pos:start="501:13" pos:end="501:13">0</literal></expr>)</condition> <block pos:start="501:16" pos:end="514:5">{<block_content pos:start="502:9" pos:end="513:9">
        <expr_stmt pos:start="502:9" pos:end="502:86"><expr pos:start="502:9" pos:end="502:85"><call pos:start="502:9" pos:end="502:85"><name pos:start="502:9" pos:end="502:20">EST_LOG_INFO</name><argument_list pos:start="502:21" pos:end="502:85">(<argument pos:start="502:22" pos:end="502:84"><expr pos:start="502:22" pos:end="502:84"><literal type="string" pos:start="502:22" pos:end="502:84">"Cert request does not contain PoP challengePassword attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" pos:start="503:9" pos:end="507:11">/*
	 * If PoP is enabled, we must fail at this point
	 * since the client didn't send the channel binding
	 * info in the CSR.
	 */</comment>
	<if_stmt pos:start="508:9" pos:end="513:9"><if pos:start="508:9" pos:end="511:9">if <condition pos:start="508:12" pos:end="508:35">(<expr pos:start="508:13" pos:end="508:34"><name pos:start="508:13" pos:end="508:34"><name pos:start="508:13" pos:end="508:15">ctx</name><operator pos:start="508:16" pos:end="508:17">-&gt;</operator><name pos:start="508:18" pos:end="508:34">server_enable_pop</name></name></expr>)</condition> <block pos:start="508:37" pos:end="511:9">{<block_content pos:start="509:13" pos:end="510:46">
	    <expr_stmt pos:start="509:13" pos:end="509:67"><expr pos:start="509:13" pos:end="509:66"><call pos:start="509:13" pos:end="509:66"><name pos:start="509:13" pos:end="509:24">EST_LOG_WARN</name><argument_list pos:start="509:25" pos:end="509:66">(<argument pos:start="509:26" pos:end="509:65"><expr pos:start="509:26" pos:end="509:65"><literal type="string" pos:start="509:26" pos:end="509:65">"PoP enabled, CSR was not authenticated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="510:13" pos:end="510:46">return <expr pos:start="510:20" pos:end="510:45"><operator pos:start="510:20" pos:end="510:20">(</operator><name pos:start="510:21" pos:end="510:44">EST_ERR_AUTH_FAIL_TLSUID</name><operator pos:start="510:45" pos:end="510:45">)</operator></expr>;</return>
	</block_content>}</block></if> <else pos:start="511:11" pos:end="513:9">else <block pos:start="511:16" pos:end="513:9">{<block_content pos:start="512:13" pos:end="512:34">
	    <return pos:start="512:13" pos:end="512:34">return <expr pos:start="512:20" pos:end="512:33"><operator pos:start="512:20" pos:end="512:20">(</operator><name pos:start="512:21" pos:end="512:32">EST_ERR_NONE</name><operator pos:start="512:33" pos:end="512:33">)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else pos:start="514:7" pos:end="559:5">else <block pos:start="514:12" pos:end="559:5">{<block_content pos:start="519:9" pos:end="558:9">
        <comment type="block" pos:start="515:9" pos:end="518:11">/*
         * Get a reference to the attribute now that we know where it's located
	 * RFC 7030 requires that we check the PoP when it's present
         */</comment>
        <expr_stmt pos:start="519:9" pos:end="519:41"><expr pos:start="519:9" pos:end="519:40"><name pos:start="519:9" pos:end="519:12">attr</name> <operator pos:start="519:14" pos:end="519:14">=</operator> <call pos:start="519:16" pos:end="519:40"><name pos:start="519:16" pos:end="519:32">X509_REQ_get_attr</name><argument_list pos:start="519:33" pos:end="519:40">(<argument pos:start="519:34" pos:end="519:36"><expr pos:start="519:34" pos:end="519:36"><name pos:start="519:34" pos:end="519:36">req</name></expr></argument>, <argument pos:start="519:39" pos:end="519:39"><expr pos:start="519:39" pos:end="519:39"><name pos:start="519:39" pos:end="519:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="521:9" pos:end="523:11">/*
         * If we found the attribute, get the actual value of the challengePassword
         */</comment>
        <if_stmt pos:start="524:9" pos:end="536:9"><if pos:start="524:9" pos:end="533:9">if <condition pos:start="524:12" pos:end="524:17">(<expr pos:start="524:13" pos:end="524:16"><name pos:start="524:13" pos:end="524:16">attr</name></expr>)</condition> <block pos:start="524:19" pos:end="533:9">{<block_content pos:start="525:13" pos:end="532:13">
            <if_stmt pos:start="525:13" pos:end="532:13"><if pos:start="525:13" pos:end="528:13">if <condition pos:start="525:16" pos:end="525:29">(<expr pos:start="525:17" pos:end="525:28"><name pos:start="525:17" pos:end="525:28"><name pos:start="525:17" pos:end="525:20">attr</name><operator pos:start="525:21" pos:end="525:22">-&gt;</operator><name pos:start="525:23" pos:end="525:28">single</name></name></expr>)</condition> <block pos:start="525:31" pos:end="528:13">{<block_content pos:start="526:17" pos:end="527:41">
                <expr_stmt pos:start="526:17" pos:end="526:39"><expr pos:start="526:17" pos:end="526:38"><name pos:start="526:17" pos:end="526:17">t</name> <operator pos:start="526:19" pos:end="526:19">=</operator> <name pos:start="526:21" pos:end="526:38"><name pos:start="526:21" pos:end="526:24">attr</name><operator pos:start="526:25" pos:end="526:26">-&gt;</operator><name pos:start="526:27" pos:end="526:31">value</name><operator pos:start="526:32" pos:end="526:32">.</operator><name pos:start="526:33" pos:end="526:38">single</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="527:17" pos:end="527:41"><expr pos:start="527:17" pos:end="527:40"><name pos:start="527:17" pos:end="527:18">bs</name> <operator pos:start="527:20" pos:end="527:20">=</operator> <name pos:start="527:22" pos:end="527:40"><name pos:start="527:22" pos:end="527:22">t</name><operator pos:start="527:23" pos:end="527:24">-&gt;</operator><name pos:start="527:25" pos:end="527:29">value</name><operator pos:start="527:30" pos:end="527:30">.</operator><name pos:start="527:31" pos:end="527:40">bit_string</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="528:15" pos:end="532:13">else <block pos:start="528:20" pos:end="532:13">{<block_content pos:start="529:17" pos:end="531:43">
                <expr_stmt pos:start="529:17" pos:end="529:22"><expr pos:start="529:17" pos:end="529:21"><name pos:start="529:17" pos:end="529:17">j</name> <operator pos:start="529:19" pos:end="529:19">=</operator> <literal type="number" pos:start="529:21" pos:end="529:21">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="530:17" pos:end="530:60"><expr pos:start="530:17" pos:end="530:59"><name pos:start="530:17" pos:end="530:18">at</name> <operator pos:start="530:20" pos:end="530:20">=</operator> <call pos:start="530:22" pos:end="530:59"><name pos:start="530:22" pos:end="530:39">sk_ASN1_TYPE_value</name><argument_list pos:start="530:40" pos:end="530:59">(<argument pos:start="530:41" pos:end="530:55"><expr pos:start="530:41" pos:end="530:55"><name pos:start="530:41" pos:end="530:55"><name pos:start="530:41" pos:end="530:44">attr</name><operator pos:start="530:45" pos:end="530:46">-&gt;</operator><name pos:start="530:47" pos:end="530:51">value</name><operator pos:start="530:52" pos:end="530:52">.</operator><name pos:start="530:53" pos:end="530:55">set</name></name></expr></argument>, <argument pos:start="530:58" pos:end="530:58"><expr pos:start="530:58" pos:end="530:58"><name pos:start="530:58" pos:end="530:58">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="531:17" pos:end="531:43"><expr pos:start="531:17" pos:end="531:42"><name pos:start="531:17" pos:end="531:18">bs</name> <operator pos:start="531:20" pos:end="531:20">=</operator> <name pos:start="531:22" pos:end="531:42"><name pos:start="531:22" pos:end="531:23">at</name><operator pos:start="531:24" pos:end="531:25">-&gt;</operator><name pos:start="531:26" pos:end="531:30">value</name><operator pos:start="531:31" pos:end="531:31">.</operator><name pos:start="531:32" pos:end="531:42">asn1_string</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="533:11" pos:end="536:9">else <block pos:start="533:16" pos:end="536:9">{<block_content pos:start="534:13" pos:end="535:46">
            <expr_stmt pos:start="534:13" pos:end="534:93"><expr pos:start="534:13" pos:end="534:92"><call pos:start="534:13" pos:end="534:92"><name pos:start="534:13" pos:end="534:24">EST_LOG_WARN</name><argument_list pos:start="534:25" pos:end="534:92">(<argument pos:start="534:26" pos:end="534:91"><expr pos:start="534:26" pos:end="534:91"><literal type="string" pos:start="534:26" pos:end="534:91">"PoP challengePassword attribute not found in client cert request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="535:13" pos:end="535:46">return <expr pos:start="535:20" pos:end="535:45"><operator pos:start="535:20" pos:end="535:20">(</operator><name pos:start="535:21" pos:end="535:44">EST_ERR_AUTH_FAIL_TLSUID</name><operator pos:start="535:45" pos:end="535:45">)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="538:9" pos:end="543:11">/*
         * Now that we have the challengePassword from the client cert request,
         * compare it to the TLS UID we calculated on the server side.
         * This implements the PoP check to verify the client holds the private
         * key used to sign the cert request.
         */</comment>
        <expr_stmt pos:start="544:9" pos:end="544:42"><expr pos:start="544:9" pos:end="544:41"><name pos:start="544:9" pos:end="544:15">tls_uid</name> <operator pos:start="544:17" pos:end="544:17">=</operator> <call pos:start="544:19" pos:end="544:41"><name pos:start="544:19" pos:end="544:33">est_get_tls_uid</name><argument_list pos:start="544:34" pos:end="544:41">(<argument pos:start="544:35" pos:end="544:37"><expr pos:start="544:35" pos:end="544:37"><name pos:start="544:35" pos:end="544:37">ssl</name></expr></argument>, <argument pos:start="544:40" pos:end="544:40"><expr pos:start="544:40" pos:end="544:40"><literal type="number" pos:start="544:40" pos:end="544:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="545:9" pos:end="558:9"><if pos:start="545:9" pos:end="555:9">if <condition pos:start="545:12" pos:end="545:20">(<expr pos:start="545:13" pos:end="545:19"><name pos:start="545:13" pos:end="545:19">tls_uid</name></expr>)</condition> <block pos:start="545:22" pos:end="555:9">{<block_content pos:start="546:13" pos:end="554:26">
	    <expr_stmt pos:start="546:13" pos:end="546:85"><expr pos:start="546:13" pos:end="546:84"><name pos:start="546:13" pos:end="546:13">i</name> <operator pos:start="546:15" pos:end="546:15">=</operator> <call pos:start="546:17" pos:end="546:84"><name pos:start="546:17" pos:end="546:24">memcmp_s</name><argument_list pos:start="546:25" pos:end="546:84">(<argument pos:start="546:26" pos:end="546:32"><expr pos:start="546:26" pos:end="546:32"><name pos:start="546:26" pos:end="546:32">tls_uid</name></expr></argument>, <argument pos:start="546:35" pos:end="546:49"><expr pos:start="546:35" pos:end="546:49"><name pos:start="546:35" pos:end="546:49">EST_TLS_UID_LEN</name></expr></argument>, <argument pos:start="546:52" pos:end="546:59"><expr pos:start="546:52" pos:end="546:59"><name pos:start="546:52" pos:end="546:59"><name pos:start="546:52" pos:end="546:53">bs</name><operator pos:start="546:54" pos:end="546:55">-&gt;</operator><name pos:start="546:56" pos:end="546:59">data</name></name></expr></argument>, <argument pos:start="546:62" pos:end="546:76"><expr pos:start="546:62" pos:end="546:76"><name pos:start="546:62" pos:end="546:76">EST_TLS_UID_LEN</name></expr></argument>, <argument pos:start="546:79" pos:end="546:83"><expr pos:start="546:79" pos:end="546:83"><operator pos:start="546:79" pos:end="546:79">&amp;</operator><name pos:start="546:80" pos:end="546:83">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="547:13" pos:end="553:13"><if pos:start="547:13" pos:end="550:13">if <condition pos:start="547:16" pos:end="547:34">(<expr pos:start="547:17" pos:end="547:33"><name pos:start="547:17" pos:end="547:17">i</name> <operator pos:start="547:19" pos:end="547:20">==</operator> <name pos:start="547:22" pos:end="547:24">EOK</name> <operator pos:start="547:26" pos:end="547:27">&amp;&amp;</operator> <operator pos:start="547:29" pos:end="547:29">!</operator><name pos:start="547:30" pos:end="547:33">diff</name></expr>)</condition> <block pos:start="547:36" pos:end="550:13">{<block_content pos:start="548:17" pos:end="549:34">
                <expr_stmt pos:start="548:17" pos:end="548:45"><expr pos:start="548:17" pos:end="548:44"><call pos:start="548:17" pos:end="548:44"><name pos:start="548:17" pos:end="548:28">EST_LOG_INFO</name><argument_list pos:start="548:29" pos:end="548:44">(<argument pos:start="548:30" pos:end="548:43"><expr pos:start="548:30" pos:end="548:43"><literal type="string" pos:start="548:30" pos:end="548:43">"PoP is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="549:17" pos:end="549:34"><expr pos:start="549:17" pos:end="549:33"><name pos:start="549:17" pos:end="549:18">rv</name> <operator pos:start="549:20" pos:end="549:20">=</operator> <name pos:start="549:22" pos:end="549:33">EST_ERR_NONE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="550:15" pos:end="553:13">else <block pos:start="550:20" pos:end="553:13">{<block_content pos:start="551:17" pos:end="552:46">
                <expr_stmt pos:start="551:17" pos:end="551:49"><expr pos:start="551:17" pos:end="551:48"><call pos:start="551:17" pos:end="551:48"><name pos:start="551:17" pos:end="551:28">EST_LOG_WARN</name><argument_list pos:start="551:29" pos:end="551:48">(<argument pos:start="551:30" pos:end="551:47"><expr pos:start="551:30" pos:end="551:47"><literal type="string" pos:start="551:30" pos:end="551:47">"PoP is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="552:17" pos:end="552:46"><expr pos:start="552:17" pos:end="552:45"><name pos:start="552:17" pos:end="552:18">rv</name> <operator pos:start="552:20" pos:end="552:20">=</operator> <name pos:start="552:22" pos:end="552:45">EST_ERR_AUTH_FAIL_TLSUID</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="554:13" pos:end="554:26"><expr pos:start="554:13" pos:end="554:25"><call pos:start="554:13" pos:end="554:25"><name pos:start="554:13" pos:end="554:16">free</name><argument_list pos:start="554:17" pos:end="554:25">(<argument pos:start="554:18" pos:end="554:24"><expr pos:start="554:18" pos:end="554:24"><name pos:start="554:18" pos:end="554:24">tls_uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="555:11" pos:end="558:9">else <block pos:start="555:16" pos:end="558:9">{<block_content pos:start="556:13" pos:end="557:42">
            <expr_stmt pos:start="556:13" pos:end="556:76"><expr pos:start="556:13" pos:end="556:75"><call pos:start="556:13" pos:end="556:75"><name pos:start="556:13" pos:end="556:24">EST_LOG_WARN</name><argument_list pos:start="556:25" pos:end="556:75">(<argument pos:start="556:26" pos:end="556:74"><expr pos:start="556:26" pos:end="556:74"><literal type="string" pos:start="556:26" pos:end="556:74">"Local TLS channel binding info is not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="557:13" pos:end="557:42"><expr pos:start="557:13" pos:end="557:41"><name pos:start="557:13" pos:end="557:14">rv</name> <operator pos:start="557:16" pos:end="557:16">=</operator> <name pos:start="557:18" pos:end="557:41">EST_ERR_AUTH_FAIL_TLSUID</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return pos:start="561:5" pos:end="561:14">return <expr pos:start="561:12" pos:end="561:13"><name pos:start="561:12" pos:end="561:13">rv</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="563:1" pos:end="567:3">/*
 * This function performs a simple sanity check on a PKCS10
 * CSR.  It will check the signature in the CSR.
 * Returns 0 for success, non-zero if the sanity check failed.
 */</comment>
<function pos:start="568:1" pos:end="599:1"><type pos:start="568:1" pos:end="568:3"><name pos:start="568:1" pos:end="568:3">int</name></type> <name pos:start="568:5" pos:end="568:24">est_server_check_csr</name> <parameter_list pos:start="568:26" pos:end="568:40">(<parameter pos:start="568:27" pos:end="568:39"><decl pos:start="568:27" pos:end="568:39"><type pos:start="568:27" pos:end="568:36"><name pos:start="568:27" pos:end="568:34">X509_REQ</name> <modifier pos:start="568:36" pos:end="568:36">*</modifier></type><name pos:start="568:37" pos:end="568:39">req</name></decl></parameter>)</parameter_list> 
<block pos:start="569:1" pos:end="599:1">{<block_content pos:start="570:5" pos:end="598:5">
    <decl_stmt pos:start="570:5" pos:end="570:29"><decl pos:start="570:5" pos:end="570:28"><type pos:start="570:5" pos:end="570:14"><name pos:start="570:5" pos:end="570:12">EVP_PKEY</name> <modifier pos:start="570:14" pos:end="570:14">*</modifier></type><name pos:start="570:15" pos:end="570:21">pub_key</name> <init pos:start="570:23" pos:end="570:28">= <expr pos:start="570:25" pos:end="570:28"><name pos:start="570:25" pos:end="570:28">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="571:5" pos:end="571:11"><decl pos:start="571:5" pos:end="571:10"><type pos:start="571:5" pos:end="571:7"><name pos:start="571:5" pos:end="571:7">int</name></type> <name pos:start="571:9" pos:end="571:10">rc</name></decl>;</decl_stmt>

    <comment type="block" pos:start="573:5" pos:end="575:7">/*
     * Extract the public key from the CSR
     */</comment>
    <if_stmt pos:start="576:5" pos:end="579:5"><if pos:start="576:5" pos:end="579:5">if <condition pos:start="576:8" pos:end="576:53">(<expr pos:start="576:9" pos:end="576:52"><operator pos:start="576:9" pos:end="576:9">(</operator><name pos:start="576:10" pos:end="576:16">pub_key</name> <operator pos:start="576:18" pos:end="576:18">=</operator> <call pos:start="576:20" pos:end="576:43"><name pos:start="576:20" pos:end="576:38">X509_REQ_get_pubkey</name><argument_list pos:start="576:39" pos:end="576:43">(<argument pos:start="576:40" pos:end="576:42"><expr pos:start="576:40" pos:end="576:42"><name pos:start="576:40" pos:end="576:42">req</name></expr></argument>)</argument_list></call><operator pos:start="576:44" pos:end="576:44">)</operator> <operator pos:start="576:46" pos:end="576:47">==</operator> <name pos:start="576:49" pos:end="576:52">NULL</name></expr>)</condition> <block pos:start="576:55" pos:end="579:5">{<block_content pos:start="577:9" pos:end="578:17">
	<expr_stmt pos:start="577:9" pos:end="577:61"><expr pos:start="577:9" pos:end="577:60"><call pos:start="577:9" pos:end="577:60"><name pos:start="577:9" pos:end="577:19">EST_LOG_ERR</name><argument_list pos:start="577:20" pos:end="577:60">(<argument pos:start="577:21" pos:end="577:59"><expr pos:start="577:21" pos:end="577:59"><literal type="string" pos:start="577:21" pos:end="577:59">"Unable to extract public key from CSR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="578:9" pos:end="578:17">return <expr pos:start="578:16" pos:end="578:16"><literal type="number" pos:start="578:16" pos:end="578:16">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="581:5" pos:end="583:7">/*
     * Verify the signature in the CSR 
     */</comment>
    <expr_stmt pos:start="584:5" pos:end="584:39"><expr pos:start="584:5" pos:end="584:38"><name pos:start="584:5" pos:end="584:6">rc</name> <operator pos:start="584:8" pos:end="584:8">=</operator> <call pos:start="584:10" pos:end="584:38"><name pos:start="584:10" pos:end="584:24">X509_REQ_verify</name><argument_list pos:start="584:25" pos:end="584:38">(<argument pos:start="584:26" pos:end="584:28"><expr pos:start="584:26" pos:end="584:28"><name pos:start="584:26" pos:end="584:28">req</name></expr></argument>, <argument pos:start="584:31" pos:end="584:37"><expr pos:start="584:31" pos:end="584:37"><name pos:start="584:31" pos:end="584:37">pub_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="585:5" pos:end="585:27"><expr pos:start="585:5" pos:end="585:26"><call pos:start="585:5" pos:end="585:26"><name pos:start="585:5" pos:end="585:17">EVP_PKEY_free</name><argument_list pos:start="585:18" pos:end="585:26">(<argument pos:start="585:19" pos:end="585:25"><expr pos:start="585:19" pos:end="585:25"><name pos:start="585:19" pos:end="585:25">pub_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="587:5" pos:end="589:7">/*
     * Check the result
     */</comment>
    <if_stmt pos:start="590:5" pos:end="598:5"><if pos:start="590:5" pos:end="593:5">if <condition pos:start="590:8" pos:end="590:15">(<expr pos:start="590:9" pos:end="590:14"><name pos:start="590:9" pos:end="590:10">rc</name> <operator pos:start="590:12" pos:end="590:12">&lt;</operator> <literal type="number" pos:start="590:14" pos:end="590:14">0</literal></expr>)</condition> <block pos:start="590:17" pos:end="593:5">{<block_content pos:start="591:9" pos:end="592:17">
	<expr_stmt pos:start="591:9" pos:end="591:50"><expr pos:start="591:9" pos:end="591:49"><call pos:start="591:9" pos:end="591:49"><name pos:start="591:9" pos:end="591:19">EST_LOG_ERR</name><argument_list pos:start="591:20" pos:end="591:49">(<argument pos:start="591:21" pos:end="591:48"><expr pos:start="591:21" pos:end="591:48"><literal type="string" pos:start="591:21" pos:end="591:48">"CSR signature check failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="592:9" pos:end="592:17">return <expr pos:start="592:16" pos:end="592:16"><literal type="number" pos:start="592:16" pos:end="592:16">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif" pos:start="593:7" pos:end="596:5">else if <condition pos:start="593:15" pos:end="593:23">(<expr pos:start="593:16" pos:end="593:22"><name pos:start="593:16" pos:end="593:17">rc</name> <operator pos:start="593:19" pos:end="593:20">==</operator> <literal type="number" pos:start="593:22" pos:end="593:22">0</literal></expr>)</condition> <block pos:start="593:25" pos:end="596:5">{<block_content pos:start="594:9" pos:end="595:17">
	<expr_stmt pos:start="594:9" pos:end="594:46"><expr pos:start="594:9" pos:end="594:45"><call pos:start="594:9" pos:end="594:45"><name pos:start="594:9" pos:end="594:19">EST_LOG_ERR</name><argument_list pos:start="594:20" pos:end="594:45">(<argument pos:start="594:21" pos:end="594:44"><expr pos:start="594:21" pos:end="594:44"><literal type="string" pos:start="594:21" pos:end="594:44">"CSR signature mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="595:9" pos:end="595:17">return <expr pos:start="595:16" pos:end="595:16"><literal type="number" pos:start="595:16" pos:end="595:16">1</literal></expr>;</return>
    </block_content>}</block></if> <else pos:start="596:7" pos:end="598:5">else <block pos:start="596:12" pos:end="598:5">{<block_content pos:start="597:9" pos:end="597:17">
        <return pos:start="597:9" pos:end="597:17">return <expr pos:start="597:16" pos:end="597:16"><literal type="number" pos:start="597:16" pos:end="597:16">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="600:1" pos:end="603:3">/*
 * Frees the linked-list containing the attributes in
 * the client CSR.
 */</comment>
<function pos:start="604:1" pos:end="619:1"><type pos:start="604:1" pos:end="604:11"><specifier pos:start="604:1" pos:end="604:6">static</specifier> <name pos:start="604:8" pos:end="604:11">void</name></type> <name pos:start="604:13" pos:end="604:40">est_server_free_csr_oid_list</name> <parameter_list pos:start="604:42" pos:end="604:61">(<parameter pos:start="604:43" pos:end="604:60"><decl pos:start="604:43" pos:end="604:60"><type pos:start="604:43" pos:end="604:56"><name pos:start="604:43" pos:end="604:54">EST_OID_LIST</name> <modifier pos:start="604:56" pos:end="604:56">*</modifier></type><name pos:start="604:57" pos:end="604:60">head</name></decl></parameter>)</parameter_list>
<block pos:start="605:1" pos:end="619:1">{<block_content pos:start="606:5" pos:end="618:15">
    <decl_stmt pos:start="606:5" pos:end="606:29"><decl pos:start="606:5" pos:end="606:28"><type pos:start="606:5" pos:end="606:18"><name pos:start="606:5" pos:end="606:16">EST_OID_LIST</name> <modifier pos:start="606:18" pos:end="606:18">*</modifier></type><name pos:start="606:19" pos:end="606:28">next_entry</name></decl>;</decl_stmt>

    <if_stmt pos:start="608:5" pos:end="610:5"><if pos:start="608:5" pos:end="610:5">if <condition pos:start="608:8" pos:end="608:14">(<expr pos:start="608:9" pos:end="608:13"><operator pos:start="608:9" pos:end="608:9">!</operator><name pos:start="608:10" pos:end="608:13">head</name></expr>)</condition> <block pos:start="608:16" pos:end="610:5">{<block_content pos:start="609:9" pos:end="609:15">
	<return pos:start="609:9" pos:end="609:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="612:5" pos:end="612:28"><expr pos:start="612:5" pos:end="612:27"><name pos:start="612:5" pos:end="612:14">next_entry</name> <operator pos:start="612:16" pos:end="612:16">=</operator> <name pos:start="612:18" pos:end="612:27"><name pos:start="612:18" pos:end="612:21">head</name><operator pos:start="612:22" pos:end="612:23">-&gt;</operator><name pos:start="612:24" pos:end="612:27">next</name></name></expr>;</expr_stmt>
    <while pos:start="613:5" pos:end="617:5">while <condition pos:start="613:11" pos:end="613:22">(<expr pos:start="613:12" pos:end="613:21"><name pos:start="613:12" pos:end="613:21">next_entry</name></expr>)</condition> <block pos:start="613:24" pos:end="617:5">{<block_content pos:start="614:9" pos:end="616:32">
	<expr_stmt pos:start="614:9" pos:end="614:19"><expr pos:start="614:9" pos:end="614:18"><call pos:start="614:9" pos:end="614:18"><name pos:start="614:9" pos:end="614:12">free</name><argument_list pos:start="614:13" pos:end="614:18">(<argument pos:start="614:14" pos:end="614:17"><expr pos:start="614:14" pos:end="614:17"><name pos:start="614:14" pos:end="614:17">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="615:9" pos:end="615:26"><expr pos:start="615:9" pos:end="615:25"><name pos:start="615:9" pos:end="615:12">head</name> <operator pos:start="615:14" pos:end="615:14">=</operator> <name pos:start="615:16" pos:end="615:25">next_entry</name></expr>;</expr_stmt>
	<expr_stmt pos:start="616:9" pos:end="616:32"><expr pos:start="616:9" pos:end="616:31"><name pos:start="616:9" pos:end="616:18">next_entry</name> <operator pos:start="616:20" pos:end="616:20">=</operator> <name pos:start="616:22" pos:end="616:31"><name pos:start="616:22" pos:end="616:25">head</name><operator pos:start="616:26" pos:end="616:27">-&gt;</operator><name pos:start="616:28" pos:end="616:31">next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="618:5" pos:end="618:15"><expr pos:start="618:5" pos:end="618:14"><call pos:start="618:5" pos:end="618:14"><name pos:start="618:5" pos:end="618:8">free</name><argument_list pos:start="618:9" pos:end="618:14">(<argument pos:start="618:10" pos:end="618:13"><expr pos:start="618:10" pos:end="618:13"><name pos:start="618:10" pos:end="618:13">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="620:1" pos:end="623:3">/*
 * Adds a new entry to the tail of the list of attributes
 * in the client CSR.
 */</comment>
<function pos:start="624:1" pos:end="643:1"><type pos:start="624:1" pos:end="624:11"><specifier pos:start="624:1" pos:end="624:6">static</specifier> <name pos:start="624:8" pos:end="624:11">void</name></type> <name pos:start="624:13" pos:end="624:38">est_server_add_oid_to_list</name> <parameter_list pos:start="624:40" pos:end="624:85">(<parameter pos:start="624:41" pos:end="624:59"><decl pos:start="624:41" pos:end="624:59"><type pos:start="624:41" pos:end="624:59"><name pos:start="624:41" pos:end="624:52">EST_OID_LIST</name> <modifier pos:start="624:54" pos:end="624:54">*</modifier><modifier pos:start="624:55" pos:end="624:55">*</modifier></type><name pos:start="624:56" pos:end="624:59">list</name></decl></parameter>, <parameter pos:start="624:62" pos:end="624:84"><decl pos:start="624:62" pos:end="624:84"><type pos:start="624:62" pos:end="624:84"><name pos:start="624:62" pos:end="624:73">EST_OID_LIST</name> <modifier pos:start="624:75" pos:end="624:75">*</modifier></type><name pos:start="624:76" pos:end="624:84">new_entry</name></decl></parameter>)</parameter_list> 
<block pos:start="625:1" pos:end="643:1">{<block_content pos:start="626:5" pos:end="642:5">
    <decl_stmt pos:start="626:5" pos:end="626:31"><decl pos:start="626:5" pos:end="626:30"><type pos:start="626:5" pos:end="626:18"><name pos:start="626:5" pos:end="626:16">EST_OID_LIST</name> <modifier pos:start="626:18" pos:end="626:18">*</modifier></type><name pos:start="626:19" pos:end="626:22">head</name> <init pos:start="626:24" pos:end="626:30">= <expr pos:start="626:26" pos:end="626:30"><operator pos:start="626:26" pos:end="626:26">*</operator><name pos:start="626:27" pos:end="626:30">list</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="628:5" pos:end="631:7">/*
     * If the list doesn't have a head yet, the new entry
     * simply becomes the head
     */</comment>
    <if_stmt pos:start="632:5" pos:end="642:5"><if pos:start="632:5" pos:end="634:5">if <condition pos:start="632:8" pos:end="632:21">(<expr pos:start="632:9" pos:end="632:20"><name pos:start="632:9" pos:end="632:12">head</name> <operator pos:start="632:14" pos:end="632:15">==</operator> <name pos:start="632:17" pos:end="632:20">NULL</name></expr>)</condition> <block pos:start="632:23" pos:end="634:5">{<block_content pos:start="633:9" pos:end="633:26"> 
	<expr_stmt pos:start="633:9" pos:end="633:26"><expr pos:start="633:9" pos:end="633:25"><operator pos:start="633:9" pos:end="633:9">*</operator><name pos:start="633:10" pos:end="633:13">list</name> <operator pos:start="633:15" pos:end="633:15">=</operator> <name pos:start="633:17" pos:end="633:25">new_entry</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="634:7" pos:end="642:5">else <block pos:start="634:12" pos:end="642:5">{<block_content pos:start="638:9" pos:end="641:31">
	<comment type="block" pos:start="635:9" pos:end="637:11">/*
	 * Walk the list to find the tail, add the new entry to the end
	 */</comment>
	<while pos:start="638:9" pos:end="640:9">while <condition pos:start="638:15" pos:end="638:26">(<expr pos:start="638:16" pos:end="638:25"><name pos:start="638:16" pos:end="638:25"><name pos:start="638:16" pos:end="638:19">head</name><operator pos:start="638:20" pos:end="638:21">-&gt;</operator><name pos:start="638:22" pos:end="638:25">next</name></name></expr>)</condition> <block pos:start="638:28" pos:end="640:9">{<block_content pos:start="639:13" pos:end="639:30">
	    <expr_stmt pos:start="639:13" pos:end="639:30"><expr pos:start="639:13" pos:end="639:29"><name pos:start="639:13" pos:end="639:16">head</name> <operator pos:start="639:18" pos:end="639:18">=</operator> <name pos:start="639:20" pos:end="639:29"><name pos:start="639:20" pos:end="639:23">head</name><operator pos:start="639:24" pos:end="639:25">-&gt;</operator><name pos:start="639:26" pos:end="639:29">next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt pos:start="641:9" pos:end="641:31"><expr pos:start="641:9" pos:end="641:30"><name pos:start="641:9" pos:end="641:18"><name pos:start="641:9" pos:end="641:12">head</name><operator pos:start="641:13" pos:end="641:14">-&gt;</operator><name pos:start="641:15" pos:end="641:18">next</name></name> <operator pos:start="641:20" pos:end="641:20">=</operator> <name pos:start="641:22" pos:end="641:30">new_entry</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="644:1" pos:end="652:3">/*
 * This is a recursive routine that walks through an ASN.1 blob
 * looking for ASN.1 object definitions.  For any that are
 * found, the OID for the object is added to the EST_OID_LIST (first argument).
 * The end result of this routine is **list will contain all the OID
 * values for every ASN.1 object in the blob.
 * This code was shamelessly taken from OpenSSL ans1_parse2(), which
 * explains some of the poorly chosen variable names.
 */</comment>
<function pos:start="653:1" pos:end="742:1"><type pos:start="653:1" pos:end="653:10"><specifier pos:start="653:1" pos:end="653:6">static</specifier> <name pos:start="653:8" pos:end="653:10">int</name></type> <name pos:start="653:12" pos:end="653:36">est_server_csr_asn1_parse</name> <parameter_list pos:start="653:38" pos:end="653:111">(<parameter pos:start="653:39" pos:end="653:57"><decl pos:start="653:39" pos:end="653:57"><type pos:start="653:39" pos:end="653:57"><name pos:start="653:39" pos:end="653:50">EST_OID_LIST</name> <modifier pos:start="653:52" pos:end="653:52">*</modifier><modifier pos:start="653:53" pos:end="653:53">*</modifier></type><name pos:start="653:54" pos:end="653:57">list</name></decl></parameter>, <parameter pos:start="653:60" pos:end="653:85"><decl pos:start="653:60" pos:end="653:85"><type pos:start="653:60" pos:end="653:85"><specifier pos:start="653:60" pos:end="653:64">const</specifier> <name pos:start="653:66" pos:end="653:73">unsigned</name> <name pos:start="653:75" pos:end="653:78">char</name> <modifier pos:start="653:80" pos:end="653:80">*</modifier><modifier pos:start="653:81" pos:end="653:81">*</modifier></type><name pos:start="653:82" pos:end="653:85">blob</name></decl></parameter>, <parameter pos:start="653:88" pos:end="653:98"><decl pos:start="653:88" pos:end="653:98"><type pos:start="653:88" pos:end="653:98"><name pos:start="653:88" pos:end="653:91">long</name></type> <name pos:start="653:93" pos:end="653:98">length</name></decl></parameter>, <parameter pos:start="653:101" pos:end="653:110"><decl pos:start="653:101" pos:end="653:110"><type pos:start="653:101" pos:end="653:110"><name pos:start="653:101" pos:end="653:103">int</name></type> <name pos:start="653:105" pos:end="653:110">offset</name></decl></parameter>)</parameter_list>
<block pos:start="654:1" pos:end="742:1">{<block_content pos:start="655:5" pos:end="741:15">
    <decl_stmt pos:start="655:5" pos:end="655:28"><decl pos:start="655:5" pos:end="655:27"><type pos:start="655:5" pos:end="655:18"><name pos:start="655:5" pos:end="655:16">EST_OID_LIST</name> <modifier pos:start="655:18" pos:end="655:18">*</modifier></type><name pos:start="655:19" pos:end="655:27">new_entry</name></decl>;</decl_stmt>
    <decl_stmt pos:start="656:5" pos:end="656:51"><decl pos:start="656:5" pos:end="656:28"><type pos:start="656:5" pos:end="656:25"><specifier pos:start="656:5" pos:end="656:9">const</specifier> <name pos:start="656:11" pos:end="656:18">unsigned</name> <name pos:start="656:20" pos:end="656:23">char</name> <modifier pos:start="656:25" pos:end="656:25">*</modifier></type><name pos:start="656:26" pos:end="656:28">ptr</name></decl>, <decl pos:start="656:31" pos:end="656:33"><type ref="prev" pos:start="656:5" pos:end="656:25"><modifier pos:start="656:31" pos:end="656:31">*</modifier></type><name pos:start="656:32" pos:end="656:33">ep</name></decl>, <decl pos:start="656:36" pos:end="656:39"><type ref="prev" pos:start="656:5" pos:end="656:25"><modifier pos:start="656:36" pos:end="656:36">*</modifier></type><name pos:start="656:37" pos:end="656:39">tot</name></decl>, <decl pos:start="656:42" pos:end="656:44"><type ref="prev" pos:start="656:5" pos:end="656:25"><modifier pos:start="656:42" pos:end="656:42">*</modifier></type><name pos:start="656:43" pos:end="656:44">op</name></decl>, <decl pos:start="656:47" pos:end="656:50"><type ref="prev" pos:start="656:5" pos:end="656:25"><modifier pos:start="656:47" pos:end="656:47">*</modifier></type><name pos:start="656:48" pos:end="656:50">opp</name></decl>;</decl_stmt>
    <decl_stmt pos:start="657:5" pos:end="657:13"><decl pos:start="657:5" pos:end="657:12"><type pos:start="657:5" pos:end="657:8"><name pos:start="657:5" pos:end="657:8">long</name></type> <name pos:start="657:10" pos:end="657:12">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="658:5" pos:end="658:20"><decl pos:start="658:5" pos:end="658:11"><type pos:start="658:5" pos:end="658:7"><name pos:start="658:5" pos:end="658:7">int</name></type> <name pos:start="658:9" pos:end="658:11">tag</name></decl>, <decl pos:start="658:14" pos:end="658:19"><type ref="prev" pos:start="658:5" pos:end="658:7"/><name pos:start="658:14" pos:end="658:19">xclass</name></decl>;</decl_stmt>
    <decl_stmt pos:start="659:5" pos:end="659:17"><decl pos:start="659:5" pos:end="659:10"><type pos:start="659:5" pos:end="659:7"><name pos:start="659:5" pos:end="659:7">int</name></type> <name pos:start="659:9" pos:end="659:10">hl</name></decl>, <decl pos:start="659:13" pos:end="659:13"><type ref="prev" pos:start="659:5" pos:end="659:7"/><name pos:start="659:13" pos:end="659:13">j</name></decl>, <decl pos:start="659:16" pos:end="659:16"><type ref="prev" pos:start="659:5" pos:end="659:7"/><name pos:start="659:16" pos:end="659:16">r</name></decl>;</decl_stmt>
    <decl_stmt pos:start="660:5" pos:end="660:33"><decl pos:start="660:5" pos:end="660:32"><type pos:start="660:5" pos:end="660:17"><name pos:start="660:5" pos:end="660:15">ASN1_OBJECT</name> <modifier pos:start="660:17" pos:end="660:17">*</modifier></type><name pos:start="660:18" pos:end="660:25">a_object</name> <init pos:start="660:27" pos:end="660:32">= <expr pos:start="660:29" pos:end="660:32"><name pos:start="660:29" pos:end="660:32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="661:5" pos:end="661:21"><decl pos:start="661:5" pos:end="661:20"><type pos:start="661:5" pos:end="661:11"><name pos:start="661:5" pos:end="661:11">errno_t</name></type> <name pos:start="661:13" pos:end="661:20">safec_rc</name></decl>;</decl_stmt> 

    <expr_stmt pos:start="663:5" pos:end="663:16"><expr pos:start="663:5" pos:end="663:15"><name pos:start="663:5" pos:end="663:7">ptr</name> <operator pos:start="663:9" pos:end="663:9">=</operator> <operator pos:start="663:11" pos:end="663:11">*</operator><name pos:start="663:12" pos:end="663:15">blob</name></expr>;</expr_stmt>
    <expr_stmt pos:start="664:5" pos:end="664:23"><expr pos:start="664:5" pos:end="664:22"><name pos:start="664:5" pos:end="664:7">tot</name> <operator pos:start="664:9" pos:end="664:9">=</operator> <name pos:start="664:11" pos:end="664:13">ptr</name> <operator pos:start="664:15" pos:end="664:15">+</operator> <name pos:start="664:17" pos:end="664:22">length</name></expr>;</expr_stmt>
    <expr_stmt pos:start="665:5" pos:end="665:17"><expr pos:start="665:5" pos:end="665:16"><name pos:start="665:5" pos:end="665:6">op</name> <operator pos:start="665:8" pos:end="665:8">=</operator> <name pos:start="665:10" pos:end="665:12">ptr</name> <operator pos:start="665:14" pos:end="665:14">-</operator> <literal type="number" pos:start="665:16" pos:end="665:16">1</literal></expr>;</expr_stmt>
    <while pos:start="666:5" pos:end="739:5">while <condition pos:start="666:11" pos:end="666:37">(<expr pos:start="666:12" pos:end="666:36"><operator pos:start="666:12" pos:end="666:12">(</operator><name pos:start="666:13" pos:end="666:15">ptr</name> <operator pos:start="666:17" pos:end="666:17">&lt;</operator> <name pos:start="666:19" pos:end="666:21">tot</name><operator pos:start="666:22" pos:end="666:22">)</operator> <operator pos:start="666:24" pos:end="666:25">&amp;&amp;</operator> <operator pos:start="666:27" pos:end="666:27">(</operator><name pos:start="666:28" pos:end="666:29">op</name> <operator pos:start="666:31" pos:end="666:31">&lt;</operator> <name pos:start="666:33" pos:end="666:35">ptr</name><operator pos:start="666:36" pos:end="666:36">)</operator></expr>)</condition> <block pos:start="666:39" pos:end="739:5">{<block_content pos:start="667:9" pos:end="738:22">
	<expr_stmt pos:start="667:9" pos:end="667:17"><expr pos:start="667:9" pos:end="667:16"><name pos:start="667:9" pos:end="667:10">op</name> <operator pos:start="667:12" pos:end="667:12">=</operator> <name pos:start="667:14" pos:end="667:16">ptr</name></expr>;</expr_stmt>
	<expr_stmt pos:start="668:9" pos:end="668:63"><expr pos:start="668:9" pos:end="668:62"><name pos:start="668:9" pos:end="668:9">j</name> <operator pos:start="668:11" pos:end="668:11">=</operator> <call pos:start="668:13" pos:end="668:62"><name pos:start="668:13" pos:end="668:27">ASN1_get_object</name><argument_list pos:start="668:28" pos:end="668:62">(<argument pos:start="668:29" pos:end="668:32"><expr pos:start="668:29" pos:end="668:32"><operator pos:start="668:29" pos:end="668:29">&amp;</operator><name pos:start="668:30" pos:end="668:32">ptr</name></expr></argument>, <argument pos:start="668:35" pos:end="668:38"><expr pos:start="668:35" pos:end="668:38"><operator pos:start="668:35" pos:end="668:35">&amp;</operator><name pos:start="668:36" pos:end="668:38">len</name></expr></argument>, <argument pos:start="668:41" pos:end="668:44"><expr pos:start="668:41" pos:end="668:44"><operator pos:start="668:41" pos:end="668:41">&amp;</operator><name pos:start="668:42" pos:end="668:44">tag</name></expr></argument>, <argument pos:start="668:47" pos:end="668:53"><expr pos:start="668:47" pos:end="668:53"><operator pos:start="668:47" pos:end="668:47">&amp;</operator><name pos:start="668:48" pos:end="668:53">xclass</name></expr></argument>, <argument pos:start="668:56" pos:end="668:61"><expr pos:start="668:56" pos:end="668:61"><name pos:start="668:56" pos:end="668:61">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="669:9" pos:end="673:9"><if pos:start="669:9" pos:end="673:9">if <condition pos:start="669:12" pos:end="669:21">(<expr pos:start="669:13" pos:end="669:20"><name pos:start="669:13" pos:end="669:13">j</name> <operator pos:start="669:15" pos:end="669:15">&amp;</operator> <literal type="number" pos:start="669:17" pos:end="669:20">0x80</literal></expr>)</condition> <block pos:start="669:23" pos:end="673:9">{<block_content pos:start="670:13" pos:end="672:23">
	    <expr_stmt pos:start="670:13" pos:end="670:45"><expr pos:start="670:13" pos:end="670:44"><call pos:start="670:13" pos:end="670:44"><name pos:start="670:13" pos:end="670:23">EST_LOG_ERR</name><argument_list pos:start="670:24" pos:end="670:44">(<argument pos:start="670:25" pos:end="670:43"><expr pos:start="670:25" pos:end="670:43"><literal type="string" pos:start="670:25" pos:end="670:43">"Error in encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	    <expr_stmt pos:start="671:13" pos:end="671:24"><expr pos:start="671:13" pos:end="671:23"><operator pos:start="671:13" pos:end="671:13">*</operator><name pos:start="671:14" pos:end="671:17">blob</name> <operator pos:start="671:19" pos:end="671:19">=</operator> <name pos:start="671:21" pos:end="671:23">ptr</name></expr>;</expr_stmt>
	    <return pos:start="672:13" pos:end="672:23">return <expr pos:start="672:20" pos:end="672:22"><operator pos:start="672:20" pos:end="672:20">(</operator><literal type="number" pos:start="672:21" pos:end="672:21">0</literal><operator pos:start="672:22" pos:end="672:22">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt pos:start="674:9" pos:end="674:22"><expr pos:start="674:9" pos:end="674:21"><name pos:start="674:9" pos:end="674:10">hl</name> <operator pos:start="674:12" pos:end="674:12">=</operator> <name pos:start="674:14" pos:end="674:16">ptr</name> <operator pos:start="674:18" pos:end="674:18">-</operator> <name pos:start="674:20" pos:end="674:21">op</name></expr>;</expr_stmt>
	<expr_stmt pos:start="675:9" pos:end="675:21"><expr pos:start="675:9" pos:end="675:20"><name pos:start="675:9" pos:end="675:14">length</name> <operator pos:start="675:16" pos:end="675:17">-=</operator> <name pos:start="675:19" pos:end="675:20">hl</name></expr>;</expr_stmt>

	<if_stmt pos:start="677:9" pos:end="737:9"><if pos:start="677:9" pos:end="700:9">if <condition pos:start="677:12" pos:end="677:35">(<expr pos:start="677:13" pos:end="677:34"><name pos:start="677:13" pos:end="677:13">j</name> <operator pos:start="677:15" pos:end="677:15">&amp;</operator> <name pos:start="677:17" pos:end="677:34">V_ASN1_CONSTRUCTED</name></expr>)</condition> <block pos:start="677:37" pos:end="700:9">{<block_content pos:start="678:13" pos:end="699:13">
	    <expr_stmt pos:start="678:13" pos:end="678:27"><expr pos:start="678:13" pos:end="678:26"><name pos:start="678:13" pos:end="678:14">ep</name> <operator pos:start="678:16" pos:end="678:16">=</operator> <name pos:start="678:18" pos:end="678:20">ptr</name> <operator pos:start="678:22" pos:end="678:22">+</operator> <name pos:start="678:24" pos:end="678:26">len</name></expr>;</expr_stmt>
	    <if_stmt pos:start="679:13" pos:end="683:13"><if pos:start="679:13" pos:end="683:13">if <condition pos:start="679:16" pos:end="679:29">(<expr pos:start="679:17" pos:end="679:28"><name pos:start="679:17" pos:end="679:19">len</name> <operator pos:start="679:21" pos:end="679:21">&gt;</operator> <name pos:start="679:23" pos:end="679:28">length</name></expr>)</condition> <block pos:start="679:31" pos:end="683:13">{<block_content pos:start="680:17" pos:end="682:27">
		<expr_stmt pos:start="680:17" pos:end="680:65"><expr pos:start="680:17" pos:end="680:64"><call pos:start="680:17" pos:end="680:64"><name pos:start="680:17" pos:end="680:27">EST_LOG_ERR</name><argument_list pos:start="680:28" pos:end="680:64">(<argument pos:start="680:29" pos:end="680:56"><expr pos:start="680:29" pos:end="680:56"><literal type="string" pos:start="680:29" pos:end="680:56">"length is greater than %ld"</literal></expr></argument>,<argument pos:start="680:58" pos:end="680:63"><expr pos:start="680:58" pos:end="680:63"><name pos:start="680:58" pos:end="680:63">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="681:17" pos:end="681:28"><expr pos:start="681:17" pos:end="681:27"><operator pos:start="681:17" pos:end="681:17">*</operator><name pos:start="681:18" pos:end="681:21">blob</name> <operator pos:start="681:23" pos:end="681:23">=</operator> <name pos:start="681:25" pos:end="681:27">ptr</name></expr>;</expr_stmt>
		<return pos:start="682:17" pos:end="682:27">return <expr pos:start="682:24" pos:end="682:26"><operator pos:start="682:24" pos:end="682:24">(</operator><literal type="number" pos:start="682:25" pos:end="682:25">0</literal><operator pos:start="682:26" pos:end="682:26">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <if_stmt pos:start="684:13" pos:end="699:13"><if pos:start="684:13" pos:end="691:13">if <condition pos:start="684:16" pos:end="684:42">(<expr pos:start="684:17" pos:end="684:41"><operator pos:start="684:17" pos:end="684:17">(</operator><name pos:start="684:18" pos:end="684:18">j</name> <operator pos:start="684:20" pos:end="684:21">==</operator> <literal type="number" pos:start="684:23" pos:end="684:26">0x21</literal><operator pos:start="684:27" pos:end="684:27">)</operator> <operator pos:start="684:29" pos:end="684:30">&amp;&amp;</operator> <operator pos:start="684:32" pos:end="684:32">(</operator><name pos:start="684:33" pos:end="684:35">len</name> <operator pos:start="684:37" pos:end="684:38">==</operator> <literal type="number" pos:start="684:40" pos:end="684:40">0</literal><operator pos:start="684:41" pos:end="684:41">)</operator></expr>)</condition> <block pos:start="684:44" pos:end="691:13">{<block_content pos:start="685:17" pos:end="690:52">
		<expr_stmt pos:start="685:17" pos:end="685:97"><expr pos:start="685:17" pos:end="685:96"><name pos:start="685:17" pos:end="685:17">r</name> <operator pos:start="685:19" pos:end="685:19">=</operator> <call pos:start="685:21" pos:end="685:96"><name pos:start="685:21" pos:end="685:45">est_server_csr_asn1_parse</name><argument_list pos:start="685:46" pos:end="685:96">(<argument pos:start="685:47" pos:end="685:50"><expr pos:start="685:47" pos:end="685:50"><name pos:start="685:47" pos:end="685:50">list</name></expr></argument>, <argument pos:start="685:53" pos:end="685:56"><expr pos:start="685:53" pos:end="685:56"><operator pos:start="685:53" pos:end="685:53">&amp;</operator><name pos:start="685:54" pos:end="685:56">ptr</name></expr></argument>, <argument pos:start="685:59" pos:end="685:73"><expr pos:start="685:59" pos:end="685:73"><operator pos:start="685:59" pos:end="685:59">(</operator><name pos:start="685:60" pos:end="685:63">long</name><operator pos:start="685:64" pos:end="685:64">)</operator><operator pos:start="685:65" pos:end="685:65">(</operator><name pos:start="685:66" pos:end="685:68">tot</name><operator pos:start="685:69" pos:end="685:69">-</operator><name pos:start="685:70" pos:end="685:72">ptr</name><operator pos:start="685:73" pos:end="685:73">)</operator></expr></argument>, <argument pos:start="685:76" pos:end="685:95"><expr pos:start="685:76" pos:end="685:95"><name pos:start="685:76" pos:end="685:81">offset</name><operator pos:start="685:82" pos:end="685:82">+</operator><operator pos:start="685:83" pos:end="685:83">(</operator><name pos:start="685:84" pos:end="685:86">ptr</name> <operator pos:start="685:88" pos:end="685:88">-</operator> <operator pos:start="685:90" pos:end="685:90">*</operator><name pos:start="685:91" pos:end="685:94">blob</name><operator pos:start="685:95" pos:end="685:95">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="686:17" pos:end="689:17"><if pos:start="686:17" pos:end="689:17">if <condition pos:start="686:20" pos:end="686:27">(<expr pos:start="686:21" pos:end="686:26"><name pos:start="686:21" pos:end="686:21">r</name> <operator pos:start="686:23" pos:end="686:24">==</operator> <literal type="number" pos:start="686:26" pos:end="686:26">0</literal></expr>)</condition> <block pos:start="686:29" pos:end="689:17">{<block_content pos:start="687:21" pos:end="688:31"> 
		    <expr_stmt pos:start="687:21" pos:end="687:32"><expr pos:start="687:21" pos:end="687:31"><operator pos:start="687:21" pos:end="687:21">*</operator><name pos:start="687:22" pos:end="687:25">blob</name> <operator pos:start="687:27" pos:end="687:27">=</operator> <name pos:start="687:29" pos:end="687:31">ptr</name></expr>;</expr_stmt>
		    <return pos:start="688:21" pos:end="688:31">return <expr pos:start="688:28" pos:end="688:30"><operator pos:start="688:28" pos:end="688:28">(</operator><literal type="number" pos:start="688:29" pos:end="688:29">0</literal><operator pos:start="688:30" pos:end="688:30">)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt pos:start="690:17" pos:end="690:52"><if pos:start="690:17" pos:end="690:52">if <condition pos:start="690:20" pos:end="690:45">(<expr pos:start="690:21" pos:end="690:44"><operator pos:start="690:21" pos:end="690:21">(</operator><name pos:start="690:22" pos:end="690:22">r</name> <operator pos:start="690:24" pos:end="690:25">==</operator> <literal type="number" pos:start="690:27" pos:end="690:27">2</literal><operator pos:start="690:28" pos:end="690:28">)</operator> <operator pos:start="690:30" pos:end="690:31">||</operator> <operator pos:start="690:33" pos:end="690:33">(</operator><name pos:start="690:34" pos:end="690:36">ptr</name> <operator pos:start="690:38" pos:end="690:39">&gt;=</operator> <name pos:start="690:41" pos:end="690:43">tot</name><operator pos:start="690:44" pos:end="690:44">)</operator></expr>)</condition><block type="pseudo" pos:start="690:47" pos:end="690:52"><block_content pos:start="690:47" pos:end="690:52"> <break pos:start="690:47" pos:end="690:52">break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></if> <else pos:start="691:15" pos:end="699:13">else <block pos:start="691:20" pos:end="699:13">{<block_content pos:start="692:17" pos:end="698:17">
		<while pos:start="692:17" pos:end="698:17">while <condition pos:start="692:23" pos:end="692:32">(<expr pos:start="692:24" pos:end="692:31"><name pos:start="692:24" pos:end="692:26">ptr</name> <operator pos:start="692:28" pos:end="692:28">&lt;</operator> <name pos:start="692:30" pos:end="692:31">ep</name></expr>)</condition> <block pos:start="692:34" pos:end="698:17">{<block_content pos:start="693:21" pos:end="697:21">
		    <expr_stmt pos:start="693:21" pos:end="693:95"><expr pos:start="693:21" pos:end="693:94"><name pos:start="693:21" pos:end="693:21">r</name> <operator pos:start="693:23" pos:end="693:23">=</operator> <call pos:start="693:25" pos:end="693:94"><name pos:start="693:25" pos:end="693:49">est_server_csr_asn1_parse</name><argument_list pos:start="693:50" pos:end="693:94">(<argument pos:start="693:51" pos:end="693:54"><expr pos:start="693:51" pos:end="693:54"><name pos:start="693:51" pos:end="693:54">list</name></expr></argument>, <argument pos:start="693:57" pos:end="693:60"><expr pos:start="693:57" pos:end="693:60"><operator pos:start="693:57" pos:end="693:57">&amp;</operator><name pos:start="693:58" pos:end="693:60">ptr</name></expr></argument>, <argument pos:start="693:63" pos:end="693:71"><expr pos:start="693:63" pos:end="693:71"><operator pos:start="693:63" pos:end="693:63">(</operator><name pos:start="693:64" pos:end="693:67">long</name><operator pos:start="693:68" pos:end="693:68">)</operator><name pos:start="693:69" pos:end="693:71">len</name></expr></argument>, <argument pos:start="693:74" pos:end="693:93"><expr pos:start="693:74" pos:end="693:93"><name pos:start="693:74" pos:end="693:79">offset</name><operator pos:start="693:80" pos:end="693:80">+</operator><operator pos:start="693:81" pos:end="693:81">(</operator><name pos:start="693:82" pos:end="693:84">ptr</name> <operator pos:start="693:86" pos:end="693:86">-</operator> <operator pos:start="693:88" pos:end="693:88">*</operator><name pos:start="693:89" pos:end="693:92">blob</name><operator pos:start="693:93" pos:end="693:93">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt pos:start="694:21" pos:end="697:21"><if pos:start="694:21" pos:end="697:21">if <condition pos:start="694:24" pos:end="694:31">(<expr pos:start="694:25" pos:end="694:30"><name pos:start="694:25" pos:end="694:25">r</name> <operator pos:start="694:27" pos:end="694:28">==</operator> <literal type="number" pos:start="694:30" pos:end="694:30">0</literal></expr>)</condition> <block pos:start="694:33" pos:end="697:21">{<block_content pos:start="695:25" pos:end="696:35"> 
			<expr_stmt pos:start="695:25" pos:end="695:36"><expr pos:start="695:25" pos:end="695:35"><operator pos:start="695:25" pos:end="695:25">*</operator><name pos:start="695:26" pos:end="695:29">blob</name> <operator pos:start="695:31" pos:end="695:31">=</operator> <name pos:start="695:33" pos:end="695:35">ptr</name></expr>;</expr_stmt>
			<return pos:start="696:25" pos:end="696:35">return <expr pos:start="696:32" pos:end="696:34"><operator pos:start="696:32" pos:end="696:32">(</operator><literal type="number" pos:start="696:33" pos:end="696:33">0</literal><operator pos:start="696:34" pos:end="696:34">)</operator></expr>;</return>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif" pos:start="700:11" pos:end="702:9">else if <condition pos:start="700:19" pos:end="700:31">(<expr pos:start="700:20" pos:end="700:30"><name pos:start="700:20" pos:end="700:25">xclass</name> <operator pos:start="700:27" pos:end="700:28">!=</operator> <literal type="number" pos:start="700:30" pos:end="700:30">0</literal></expr>)</condition> <block pos:start="700:33" pos:end="702:9">{<block_content pos:start="701:13" pos:end="701:23">
	    <expr_stmt pos:start="701:13" pos:end="701:23"><expr pos:start="701:13" pos:end="701:22"><name pos:start="701:13" pos:end="701:15">ptr</name> <operator pos:start="701:17" pos:end="701:18">+=</operator> <name pos:start="701:20" pos:end="701:22">len</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else pos:start="702:11" pos:end="737:9">else <block pos:start="702:16" pos:end="737:9">{<block_content pos:start="703:13" pos:end="736:13">
	    <if_stmt pos:start="703:13" pos:end="731:13"><if pos:start="703:13" pos:end="731:13">if <condition pos:start="703:16" pos:end="703:37">(<expr pos:start="703:17" pos:end="703:36"><name pos:start="703:17" pos:end="703:19">tag</name> <operator pos:start="703:21" pos:end="703:22">==</operator> <name pos:start="703:24" pos:end="703:36">V_ASN1_OBJECT</name></expr>)</condition> <block pos:start="703:39" pos:end="731:13">{<block_content pos:start="704:17" pos:end="730:17">
		<expr_stmt pos:start="704:17" pos:end="704:25"><expr pos:start="704:17" pos:end="704:24"><name pos:start="704:17" pos:end="704:19">opp</name> <operator pos:start="704:21" pos:end="704:21">=</operator> <name pos:start="704:23" pos:end="704:24">op</name></expr>;</expr_stmt>
		<if_stmt pos:start="705:17" pos:end="730:17"><if pos:start="705:17" pos:end="725:17">if <condition pos:start="705:20" pos:end="705:69">(<expr pos:start="705:21" pos:end="705:68"><call pos:start="705:21" pos:end="705:60"><name pos:start="705:21" pos:end="705:35">d2i_ASN1_OBJECT</name><argument_list pos:start="705:36" pos:end="705:60">(<argument pos:start="705:37" pos:end="705:45"><expr pos:start="705:37" pos:end="705:45"><operator pos:start="705:37" pos:end="705:37">&amp;</operator><name pos:start="705:38" pos:end="705:45">a_object</name></expr></argument>, <argument pos:start="705:48" pos:end="705:51"><expr pos:start="705:48" pos:end="705:51"><operator pos:start="705:48" pos:end="705:48">&amp;</operator><name pos:start="705:49" pos:end="705:51">opp</name></expr></argument>, <argument pos:start="705:54" pos:end="705:59"><expr pos:start="705:54" pos:end="705:59"><name pos:start="705:54" pos:end="705:56">len</name><operator pos:start="705:57" pos:end="705:57">+</operator><name pos:start="705:58" pos:end="705:59">hl</name></expr></argument>)</argument_list></call> <operator pos:start="705:62" pos:end="705:63">!=</operator> <name pos:start="705:65" pos:end="705:68">NULL</name></expr>)</condition> <block pos:start="705:71" pos:end="725:17">{<block_content pos:start="706:21" pos:end="724:21">
		    <expr_stmt pos:start="706:21" pos:end="706:61"><expr pos:start="706:21" pos:end="706:60"><name pos:start="706:21" pos:end="706:29">new_entry</name> <operator pos:start="706:31" pos:end="706:31">=</operator> <call pos:start="706:33" pos:end="706:60"><name pos:start="706:33" pos:end="706:38">malloc</name><argument_list pos:start="706:39" pos:end="706:60">(<argument pos:start="706:40" pos:end="706:59"><expr pos:start="706:40" pos:end="706:59"><sizeof pos:start="706:40" pos:end="706:59">sizeof<argument_list pos:start="706:46" pos:end="706:59">(<argument pos:start="706:47" pos:end="706:58"><expr pos:start="706:47" pos:end="706:58"><name pos:start="706:47" pos:end="706:58">EST_OID_LIST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt pos:start="707:21" pos:end="713:21"><if pos:start="707:21" pos:end="713:21">if <condition pos:start="707:24" pos:end="707:35">(<expr pos:start="707:25" pos:end="707:34"><operator pos:start="707:25" pos:end="707:25">!</operator><name pos:start="707:26" pos:end="707:34">new_entry</name></expr>)</condition> <block pos:start="707:37" pos:end="713:21">{<block_content pos:start="708:25" pos:end="712:35">
			<expr_stmt pos:start="708:25" pos:end="708:54"><expr pos:start="708:25" pos:end="708:53"><call pos:start="708:25" pos:end="708:53"><name pos:start="708:25" pos:end="708:35">EST_LOG_ERR</name><argument_list pos:start="708:36" pos:end="708:53">(<argument pos:start="708:37" pos:end="708:52"><expr pos:start="708:37" pos:end="708:52"><literal type="string" pos:start="708:37" pos:end="708:52">"malloc failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="709:25" pos:end="709:60"><expr pos:start="709:25" pos:end="709:59"><call pos:start="709:25" pos:end="709:59"><name pos:start="709:25" pos:end="709:52">est_server_free_csr_oid_list</name><argument_list pos:start="709:53" pos:end="709:59">(<argument pos:start="709:54" pos:end="709:58"><expr pos:start="709:54" pos:end="709:58"><operator pos:start="709:54" pos:end="709:54">*</operator><name pos:start="709:55" pos:end="709:58">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt pos:start="710:25" pos:end="710:77"><if pos:start="710:25" pos:end="710:77">if <condition pos:start="710:28" pos:end="710:45">(<expr pos:start="710:29" pos:end="710:44"><name pos:start="710:29" pos:end="710:36">a_object</name> <operator pos:start="710:38" pos:end="710:39">!=</operator> <name pos:start="710:41" pos:end="710:44">NULL</name></expr>)</condition> <block pos:start="710:47" pos:end="710:77">{<block_content pos:start="710:49" pos:end="710:75"> <expr_stmt pos:start="710:49" pos:end="710:75"><expr pos:start="710:49" pos:end="710:74"><call pos:start="710:49" pos:end="710:74"><name pos:start="710:49" pos:end="710:64">ASN1_OBJECT_free</name><argument_list pos:start="710:65" pos:end="710:74">(<argument pos:start="710:66" pos:end="710:73"><expr pos:start="710:66" pos:end="710:73"><name pos:start="710:66" pos:end="710:73">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
			<expr_stmt pos:start="711:25" pos:end="711:36"><expr pos:start="711:25" pos:end="711:35"><operator pos:start="711:25" pos:end="711:25">*</operator><name pos:start="711:26" pos:end="711:29">blob</name> <operator pos:start="711:31" pos:end="711:31">=</operator> <name pos:start="711:33" pos:end="711:35">ptr</name></expr>;</expr_stmt>
			<return pos:start="712:25" pos:end="712:35">return <expr pos:start="712:32" pos:end="712:34"><operator pos:start="712:32" pos:end="712:32">(</operator><literal type="number" pos:start="712:33" pos:end="712:33">0</literal><operator pos:start="712:34" pos:end="712:34">)</operator></expr>;</return>
		    </block_content>}</block></if></if_stmt>
		    <expr_stmt pos:start="714:21" pos:end="714:100"><expr pos:start="714:21" pos:end="714:99"><name pos:start="714:21" pos:end="714:28">safec_rc</name> <operator pos:start="714:30" pos:end="714:30">=</operator> <call pos:start="714:32" pos:end="714:99"><name pos:start="714:32" pos:end="714:39">memset_s</name><argument_list pos:start="714:40" pos:end="714:99">(<argument pos:start="714:41" pos:end="714:49"><expr pos:start="714:41" pos:end="714:49"><name pos:start="714:41" pos:end="714:49">new_entry</name></expr></argument>, <argument pos:start="714:52" pos:end="714:71"><expr pos:start="714:52" pos:end="714:71"><sizeof pos:start="714:52" pos:end="714:71">sizeof<argument_list pos:start="714:58" pos:end="714:71">(<argument pos:start="714:59" pos:end="714:70"><expr pos:start="714:59" pos:end="714:70"><name pos:start="714:59" pos:end="714:70">EST_OID_LIST</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="714:74" pos:end="714:76"><expr pos:start="714:74" pos:end="714:76"><literal type="number" pos:start="714:74" pos:end="714:76">0x0</literal></expr></argument>, <argument pos:start="714:79" pos:end="714:98"><expr pos:start="714:79" pos:end="714:98"><sizeof pos:start="714:79" pos:end="714:98">sizeof<argument_list pos:start="714:85" pos:end="714:98">(<argument pos:start="714:86" pos:end="714:97"><expr pos:start="714:86" pos:end="714:97"><name pos:start="714:86" pos:end="714:97">EST_OID_LIST</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt pos:start="715:21" pos:end="717:21"><if pos:start="715:21" pos:end="717:21">if <condition pos:start="715:24" pos:end="715:40">(<expr pos:start="715:25" pos:end="715:39"><name pos:start="715:25" pos:end="715:32">safec_rc</name> <operator pos:start="715:34" pos:end="715:35">!=</operator> <name pos:start="715:37" pos:end="715:39">EOK</name></expr>)</condition> <block pos:start="715:42" pos:end="717:21">{<block_content pos:start="716:25" pos:end="716:73">
		        <expr_stmt pos:start="716:25" pos:end="716:73"><expr pos:start="716:25" pos:end="716:72"><call pos:start="716:25" pos:end="716:72"><name pos:start="716:25" pos:end="716:36">EST_LOG_INFO</name><argument_list pos:start="716:37" pos:end="716:72">(<argument pos:start="716:38" pos:end="716:61"><expr pos:start="716:38" pos:end="716:61"><literal type="string" pos:start="716:38" pos:end="716:61">"memset_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="716:64" pos:end="716:71"><expr pos:start="716:64" pos:end="716:71"><name pos:start="716:64" pos:end="716:71">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		    <expr_stmt pos:start="718:21" pos:end="718:80"><expr pos:start="718:21" pos:end="718:79"><call pos:start="718:21" pos:end="718:79"><name pos:start="718:21" pos:end="718:35">i2t_ASN1_OBJECT</name><argument_list pos:start="718:36" pos:end="718:79">(<argument pos:start="718:37" pos:end="718:50"><expr pos:start="718:37" pos:end="718:50"><name pos:start="718:37" pos:end="718:50"><name pos:start="718:37" pos:end="718:45">new_entry</name><operator pos:start="718:46" pos:end="718:47">-&gt;</operator><name pos:start="718:48" pos:end="718:50">oid</name></name></expr></argument>, <argument pos:start="718:53" pos:end="718:68"><expr pos:start="718:53" pos:end="718:68"><name pos:start="718:53" pos:end="718:68">EST_MAX_ATTR_LEN</name></expr></argument>, <argument pos:start="718:71" pos:end="718:78"><expr pos:start="718:71" pos:end="718:78"><name pos:start="718:71" pos:end="718:78">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="719:21" pos:end="719:75"><expr pos:start="719:21" pos:end="719:74"><call pos:start="719:21" pos:end="719:74"><name pos:start="719:21" pos:end="719:32">EST_LOG_INFO</name><argument_list pos:start="719:33" pos:end="719:74">(<argument pos:start="719:34" pos:end="719:57"><expr pos:start="719:34" pos:end="719:57"><literal type="string" pos:start="719:34" pos:end="719:57">"Build CSR OID list: %s"</literal></expr></argument>, <argument pos:start="719:60" pos:end="719:73"><expr pos:start="719:60" pos:end="719:73"><name pos:start="719:60" pos:end="719:73"><name pos:start="719:60" pos:end="719:68">new_entry</name><operator pos:start="719:69" pos:end="719:70">-&gt;</operator><name pos:start="719:71" pos:end="719:73">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="720:21" pos:end="720:64"><expr pos:start="720:21" pos:end="720:63"><call pos:start="720:21" pos:end="720:63"><name pos:start="720:21" pos:end="720:46">est_server_add_oid_to_list</name><argument_list pos:start="720:47" pos:end="720:63">(<argument pos:start="720:48" pos:end="720:51"><expr pos:start="720:48" pos:end="720:51"><name pos:start="720:48" pos:end="720:51">list</name></expr></argument>, <argument pos:start="720:54" pos:end="720:62"><expr pos:start="720:54" pos:end="720:62"><name pos:start="720:54" pos:end="720:62">new_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt pos:start="721:21" pos:end="724:21"><if pos:start="721:21" pos:end="724:21">if <condition pos:start="721:24" pos:end="721:41">(<expr pos:start="721:25" pos:end="721:40"><name pos:start="721:25" pos:end="721:32">a_object</name> <operator pos:start="721:34" pos:end="721:35">!=</operator> <name pos:start="721:37" pos:end="721:40">NULL</name></expr>)</condition> <block pos:start="721:43" pos:end="724:21">{<block_content pos:start="722:25" pos:end="723:40">
			<expr_stmt pos:start="722:25" pos:end="722:51"><expr pos:start="722:25" pos:end="722:50"><call pos:start="722:25" pos:end="722:50"><name pos:start="722:25" pos:end="722:40">ASN1_OBJECT_free</name><argument_list pos:start="722:41" pos:end="722:50">(<argument pos:start="722:42" pos:end="722:49"><expr pos:start="722:42" pos:end="722:49"><name pos:start="722:42" pos:end="722:49">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt pos:start="723:25" pos:end="723:40"><expr pos:start="723:25" pos:end="723:39"><name pos:start="723:25" pos:end="723:32">a_object</name> <operator pos:start="723:34" pos:end="723:34">=</operator> <name pos:start="723:36" pos:end="723:39">NULL</name></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else pos:start="725:19" pos:end="730:17">else <block pos:start="725:24" pos:end="730:17">{<block_content pos:start="726:21" pos:end="729:31">
		    <expr_stmt pos:start="726:21" pos:end="726:52"><expr pos:start="726:21" pos:end="726:51"><call pos:start="726:21" pos:end="726:51"><name pos:start="726:21" pos:end="726:31">EST_LOG_ERR</name><argument_list pos:start="726:32" pos:end="726:51">(<argument pos:start="726:33" pos:end="726:50"><expr pos:start="726:33" pos:end="726:50"><literal type="string" pos:start="726:33" pos:end="726:50">"Bad ASN.1 object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt pos:start="727:21" pos:end="727:73"><if pos:start="727:21" pos:end="727:73">if <condition pos:start="727:24" pos:end="727:41">(<expr pos:start="727:25" pos:end="727:40"><name pos:start="727:25" pos:end="727:32">a_object</name> <operator pos:start="727:34" pos:end="727:35">!=</operator> <name pos:start="727:37" pos:end="727:40">NULL</name></expr>)</condition> <block pos:start="727:43" pos:end="727:73">{<block_content pos:start="727:45" pos:end="727:71"> <expr_stmt pos:start="727:45" pos:end="727:71"><expr pos:start="727:45" pos:end="727:70"><call pos:start="727:45" pos:end="727:70"><name pos:start="727:45" pos:end="727:60">ASN1_OBJECT_free</name><argument_list pos:start="727:61" pos:end="727:70">(<argument pos:start="727:62" pos:end="727:69"><expr pos:start="727:62" pos:end="727:69"><name pos:start="727:62" pos:end="727:69">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
		    <expr_stmt pos:start="728:21" pos:end="728:32"><expr pos:start="728:21" pos:end="728:31"><operator pos:start="728:21" pos:end="728:21">*</operator><name pos:start="728:22" pos:end="728:25">blob</name> <operator pos:start="728:27" pos:end="728:27">=</operator> <name pos:start="728:29" pos:end="728:31">ptr</name></expr>;</expr_stmt>
		    <return pos:start="729:21" pos:end="729:31">return <expr pos:start="729:28" pos:end="729:30"><operator pos:start="729:28" pos:end="729:28">(</operator><literal type="number" pos:start="729:29" pos:end="729:29">0</literal><operator pos:start="729:30" pos:end="729:30">)</operator></expr>;</return>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt> 
	    <expr_stmt pos:start="732:13" pos:end="732:23"><expr pos:start="732:13" pos:end="732:22"><name pos:start="732:13" pos:end="732:15">ptr</name> <operator pos:start="732:17" pos:end="732:18">+=</operator> <name pos:start="732:20" pos:end="732:22">len</name></expr>;</expr_stmt>
	    <if_stmt pos:start="733:13" pos:end="736:13"><if pos:start="733:13" pos:end="736:13">if <condition pos:start="733:16" pos:end="733:53">(<expr pos:start="733:17" pos:end="733:52"><operator pos:start="733:17" pos:end="733:17">(</operator><name pos:start="733:18" pos:end="733:20">tag</name> <operator pos:start="733:22" pos:end="733:23">==</operator> <name pos:start="733:25" pos:end="733:34">V_ASN1_EOC</name><operator pos:start="733:35" pos:end="733:35">)</operator> <operator pos:start="733:37" pos:end="733:38">&amp;&amp;</operator> <operator pos:start="733:40" pos:end="733:40">(</operator><name pos:start="733:41" pos:end="733:46">xclass</name> <operator pos:start="733:48" pos:end="733:49">==</operator> <literal type="number" pos:start="733:51" pos:end="733:51">0</literal><operator pos:start="733:52" pos:end="733:52">)</operator></expr>)</condition> <block pos:start="733:55" pos:end="736:13">{<block_content pos:start="734:17" pos:end="735:27">
		<expr_stmt pos:start="734:17" pos:end="734:28"><expr pos:start="734:17" pos:end="734:27"><operator pos:start="734:17" pos:end="734:17">*</operator><name pos:start="734:18" pos:end="734:21">blob</name> <operator pos:start="734:23" pos:end="734:23">=</operator> <name pos:start="734:25" pos:end="734:27">ptr</name></expr>;</expr_stmt>
		<return pos:start="735:17" pos:end="735:27">return <expr pos:start="735:24" pos:end="735:26"><operator pos:start="735:24" pos:end="735:24">(</operator><literal type="number" pos:start="735:25" pos:end="735:25">2</literal><operator pos:start="735:26" pos:end="735:26">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt pos:start="738:9" pos:end="738:22"><expr pos:start="738:9" pos:end="738:21"><name pos:start="738:9" pos:end="738:14">length</name> <operator pos:start="738:16" pos:end="738:17">-=</operator> <name pos:start="738:19" pos:end="738:21">len</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="740:5" pos:end="740:16"><expr pos:start="740:5" pos:end="740:15"><operator pos:start="740:5" pos:end="740:5">*</operator><name pos:start="740:6" pos:end="740:9">blob</name> <operator pos:start="740:11" pos:end="740:11">=</operator> <name pos:start="740:13" pos:end="740:15">ptr</name></expr>;</expr_stmt>
    <return pos:start="741:5" pos:end="741:15">return <expr pos:start="741:12" pos:end="741:14"><operator pos:start="741:12" pos:end="741:12">(</operator><literal type="number" pos:start="741:13" pos:end="741:13">1</literal><operator pos:start="741:14" pos:end="741:14">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="743:1" pos:end="747:3">/*
 * Utility function that populates a linked-list containing
 * the OID (or name) of the attributes present in the
 * client CSR.
 */</comment>
<function pos:start="748:1" pos:end="782:1"><type pos:start="748:1" pos:end="748:16"><specifier pos:start="748:1" pos:end="748:6">static</specifier> <name pos:start="748:8" pos:end="748:16">EST_ERROR</name></type> <name pos:start="748:18" pos:end="748:46">est_server_build_csr_oid_list</name> <parameter_list pos:start="748:48" pos:end="748:94">(<parameter pos:start="748:49" pos:end="748:67"><decl pos:start="748:49" pos:end="748:67"><type pos:start="748:49" pos:end="748:67"><name pos:start="748:49" pos:end="748:60">EST_OID_LIST</name> <modifier pos:start="748:62" pos:end="748:62">*</modifier><modifier pos:start="748:63" pos:end="748:63">*</modifier></type><name pos:start="748:64" pos:end="748:67">list</name></decl></parameter>, <parameter pos:start="748:70" pos:end="748:79"><decl pos:start="748:70" pos:end="748:79"><type pos:start="748:70" pos:end="748:79"><name pos:start="748:70" pos:end="748:73">char</name> <modifier pos:start="748:75" pos:end="748:75">*</modifier></type><name pos:start="748:76" pos:end="748:79">body</name></decl></parameter>, <parameter pos:start="748:82" pos:end="748:93"><decl pos:start="748:82" pos:end="748:93"><type pos:start="748:82" pos:end="748:93"><name pos:start="748:82" pos:end="748:84">int</name></type> <name pos:start="748:86" pos:end="748:93">body_len</name></decl></parameter>)</parameter_list>
<block pos:start="749:1" pos:end="782:1">{<block_content pos:start="750:5" pos:end="781:26">
    <decl_stmt pos:start="750:5" pos:end="750:38"><decl pos:start="750:5" pos:end="750:27"><type pos:start="750:5" pos:end="750:19"><name pos:start="750:5" pos:end="750:12">unsigned</name> <name pos:start="750:14" pos:end="750:17">char</name> <modifier pos:start="750:19" pos:end="750:19">*</modifier></type><name pos:start="750:20" pos:end="750:27">der_data</name></decl>, <decl pos:start="750:30" pos:end="750:37"><type ref="prev" pos:start="750:5" pos:end="750:19"><modifier pos:start="750:30" pos:end="750:30">*</modifier></type><name pos:start="750:31" pos:end="750:37">der_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="751:5" pos:end="751:16"><decl pos:start="751:5" pos:end="751:15"><type pos:start="751:5" pos:end="751:7"><name pos:start="751:5" pos:end="751:7">int</name></type> <name pos:start="751:9" pos:end="751:15">der_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="752:5" pos:end="752:11"><decl pos:start="752:5" pos:end="752:10"><type pos:start="752:5" pos:end="752:7"><name pos:start="752:5" pos:end="752:7">int</name></type> <name pos:start="752:9" pos:end="752:10">rv</name></decl>;</decl_stmt>

    <comment type="block" pos:start="754:5" pos:end="756:7">/*
     * grab some space to hold the decoded CSR data
     */</comment>
    <expr_stmt pos:start="757:5" pos:end="757:44"><expr pos:start="757:5" pos:end="757:43"><name pos:start="757:5" pos:end="757:11">der_ptr</name> <operator pos:start="757:13" pos:end="757:13">=</operator> <name pos:start="757:15" pos:end="757:22">der_data</name> <operator pos:start="757:24" pos:end="757:24">=</operator> <call pos:start="757:26" pos:end="757:43"><name pos:start="757:26" pos:end="757:31">malloc</name><argument_list pos:start="757:32" pos:end="757:43">(<argument pos:start="757:33" pos:end="757:42"><expr pos:start="757:33" pos:end="757:42"><name pos:start="757:33" pos:end="757:40">body_len</name><operator pos:start="757:41" pos:end="757:41">*</operator><literal type="number" pos:start="757:42" pos:end="757:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="758:5" pos:end="761:5"><if pos:start="758:5" pos:end="761:5">if <condition pos:start="758:8" pos:end="758:18">(<expr pos:start="758:9" pos:end="758:17"><operator pos:start="758:9" pos:end="758:9">!</operator><name pos:start="758:10" pos:end="758:17">der_data</name></expr>)</condition> <block pos:start="758:20" pos:end="761:5">{<block_content pos:start="759:9" pos:end="760:32">
	<expr_stmt pos:start="759:9" pos:end="759:37"><expr pos:start="759:9" pos:end="759:36"><call pos:start="759:9" pos:end="759:36"><name pos:start="759:9" pos:end="759:19">EST_LOG_ERR</name><argument_list pos:start="759:20" pos:end="759:36">(<argument pos:start="759:21" pos:end="759:35"><expr pos:start="759:21" pos:end="759:35"><literal type="string" pos:start="759:21" pos:end="759:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="760:9" pos:end="760:32">return <expr pos:start="760:16" pos:end="760:31"><operator pos:start="760:16" pos:end="760:16">(</operator><name pos:start="760:17" pos:end="760:30">EST_ERR_MALLOC</name><operator pos:start="760:31" pos:end="760:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="763:5" pos:end="765:7">/*
     * Decode the CSR data
     */</comment>
    <expr_stmt pos:start="766:5" pos:end="766:76"><expr pos:start="766:5" pos:end="766:75"><name pos:start="766:5" pos:end="766:11">der_len</name> <operator pos:start="766:13" pos:end="766:13">=</operator> <call pos:start="766:15" pos:end="766:75"><name pos:start="766:15" pos:end="766:31">est_base64_decode</name><argument_list pos:start="766:32" pos:end="766:75">(<argument pos:start="766:33" pos:end="766:44"><expr pos:start="766:33" pos:end="766:44"><operator pos:start="766:33" pos:end="766:33">(</operator><name pos:start="766:34" pos:end="766:37">char</name> <operator pos:start="766:39" pos:end="766:39">*</operator><operator pos:start="766:40" pos:end="766:40">)</operator><name pos:start="766:41" pos:end="766:44">body</name></expr></argument>, <argument pos:start="766:47" pos:end="766:62"><expr pos:start="766:47" pos:end="766:62"><operator pos:start="766:47" pos:end="766:47">(</operator><name pos:start="766:48" pos:end="766:51">char</name> <operator pos:start="766:53" pos:end="766:53">*</operator><operator pos:start="766:54" pos:end="766:54">)</operator><name pos:start="766:55" pos:end="766:62">der_data</name></expr></argument>, <argument pos:start="766:65" pos:end="766:74"><expr pos:start="766:65" pos:end="766:74"><name pos:start="766:65" pos:end="766:72">body_len</name><operator pos:start="766:73" pos:end="766:73">*</operator><literal type="number" pos:start="766:74" pos:end="766:74">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="767:5" pos:end="771:5"><if pos:start="767:5" pos:end="771:5">if <condition pos:start="767:8" pos:end="767:21">(<expr pos:start="767:9" pos:end="767:20"><name pos:start="767:9" pos:end="767:15">der_len</name> <operator pos:start="767:17" pos:end="767:18">&lt;=</operator> <literal type="number" pos:start="767:20" pos:end="767:20">0</literal></expr>)</condition> <block pos:start="767:23" pos:end="771:5">{<block_content pos:start="768:9" pos:end="770:36">
        <expr_stmt pos:start="768:9" pos:end="768:51"><expr pos:start="768:9" pos:end="768:50"><call pos:start="768:9" pos:end="768:50"><name pos:start="768:9" pos:end="768:19">EST_LOG_ERR</name><argument_list pos:start="768:20" pos:end="768:50">(<argument pos:start="768:21" pos:end="768:49"><expr pos:start="768:21" pos:end="768:49"><literal type="string" pos:start="768:21" pos:end="768:49">"Invalid base64 encoded data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="769:9" pos:end="769:23"><expr pos:start="769:9" pos:end="769:22"><call pos:start="769:9" pos:end="769:22"><name pos:start="769:9" pos:end="769:12">free</name><argument_list pos:start="769:13" pos:end="769:22">(<argument pos:start="769:14" pos:end="769:21"><expr pos:start="769:14" pos:end="769:21"><name pos:start="769:14" pos:end="769:21">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="770:9" pos:end="770:36">return <expr pos:start="770:16" pos:end="770:35"><operator pos:start="770:16" pos:end="770:16">(</operator><name pos:start="770:17" pos:end="770:34">EST_ERR_BAD_BASE64</name><operator pos:start="770:35" pos:end="770:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="773:5" pos:end="773:88"><expr pos:start="773:5" pos:end="773:87"><name pos:start="773:5" pos:end="773:6">rv</name> <operator pos:start="773:8" pos:end="773:8">=</operator> <call pos:start="773:10" pos:end="773:87"><name pos:start="773:10" pos:end="773:34">est_server_csr_asn1_parse</name><argument_list pos:start="773:35" pos:end="773:87">(<argument pos:start="773:36" pos:end="773:39"><expr pos:start="773:36" pos:end="773:39"><name pos:start="773:36" pos:end="773:39">list</name></expr></argument>, <argument pos:start="773:42" pos:end="773:74"><expr pos:start="773:42" pos:end="773:74"><operator pos:start="773:42" pos:end="773:42">(</operator><specifier pos:start="773:43" pos:end="773:47">const</specifier> <name pos:start="773:49" pos:end="773:56">unsigned</name> <name pos:start="773:58" pos:end="773:61">char</name> <operator pos:start="773:63" pos:end="773:63">*</operator><operator pos:start="773:64" pos:end="773:64">*</operator><operator pos:start="773:65" pos:end="773:65">)</operator><operator pos:start="773:66" pos:end="773:66">&amp;</operator><name pos:start="773:67" pos:end="773:74">der_data</name></expr></argument>, <argument pos:start="773:77" pos:end="773:83"><expr pos:start="773:77" pos:end="773:83"><name pos:start="773:77" pos:end="773:83">der_len</name></expr></argument>, <argument pos:start="773:86" pos:end="773:86"><expr pos:start="773:86" pos:end="773:86"><literal type="number" pos:start="773:86" pos:end="773:86">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="774:5" pos:end="779:5"><if pos:start="774:5" pos:end="779:5">if <condition pos:start="774:8" pos:end="774:12">(<expr pos:start="774:9" pos:end="774:11"><operator pos:start="774:9" pos:end="774:9">!</operator><name pos:start="774:10" pos:end="774:11">rv</name></expr>)</condition> <block pos:start="774:14" pos:end="779:5">{<block_content pos:start="775:9" pos:end="778:33">
	<expr_stmt pos:start="775:9" pos:end="775:73"><expr pos:start="775:9" pos:end="775:72"><call pos:start="775:9" pos:end="775:72"><name pos:start="775:9" pos:end="775:19">EST_LOG_ERR</name><argument_list pos:start="775:20" pos:end="775:72">(<argument pos:start="775:21" pos:end="775:71"><expr pos:start="775:21" pos:end="775:71"><literal type="string" pos:start="775:21" pos:end="775:71">"Failed to build OID list from client provided CSR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="776:9" pos:end="776:44"><expr pos:start="776:9" pos:end="776:43"><call pos:start="776:9" pos:end="776:43"><name pos:start="776:9" pos:end="776:36">est_server_free_csr_oid_list</name><argument_list pos:start="776:37" pos:end="776:43">(<argument pos:start="776:38" pos:end="776:42"><expr pos:start="776:38" pos:end="776:42"><operator pos:start="776:38" pos:end="776:38">*</operator><name pos:start="776:39" pos:end="776:42">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="777:9" pos:end="777:22"><expr pos:start="777:9" pos:end="777:21"><call pos:start="777:9" pos:end="777:21"><name pos:start="777:9" pos:end="777:12">free</name><argument_list pos:start="777:13" pos:end="777:21">(<argument pos:start="777:14" pos:end="777:20"><expr pos:start="777:14" pos:end="777:20"><name pos:start="777:14" pos:end="777:20">der_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="778:9" pos:end="778:33">return <expr pos:start="778:16" pos:end="778:32"><operator pos:start="778:16" pos:end="778:16">(</operator><name pos:start="778:17" pos:end="778:31">EST_ERR_UNKNOWN</name><operator pos:start="778:32" pos:end="778:32">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="780:5" pos:end="780:18"><expr pos:start="780:5" pos:end="780:17"><call pos:start="780:5" pos:end="780:17"><name pos:start="780:5" pos:end="780:8">free</name><argument_list pos:start="780:9" pos:end="780:17">(<argument pos:start="780:10" pos:end="780:16"><expr pos:start="780:10" pos:end="780:16"><name pos:start="780:10" pos:end="780:16">der_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="781:5" pos:end="781:26">return <expr pos:start="781:12" pos:end="781:25"><operator pos:start="781:12" pos:end="781:12">(</operator><name pos:start="781:13" pos:end="781:24">EST_ERR_NONE</name><operator pos:start="781:25" pos:end="781:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="783:1" pos:end="787:3">/*
 * This function checks the locally configured CSR attributes
 * against the attributes in the CSR.  If any attributes are
 * missing from the CSR, then an error is returned.
 */</comment>
<function pos:start="788:1" pos:end="1004:1"><type pos:start="788:1" pos:end="788:16"><specifier pos:start="788:1" pos:end="788:6">static</specifier> <name pos:start="788:8" pos:end="788:16">EST_ERROR</name></type> <name pos:start="788:18" pos:end="788:48">est_server_all_csrattrs_present</name><parameter_list pos:start="788:49" pos:end="788:88">(<parameter pos:start="788:50" pos:end="788:61"><decl pos:start="788:50" pos:end="788:61"><type pos:start="788:50" pos:end="788:61"><name pos:start="788:50" pos:end="788:56">EST_CTX</name> <modifier pos:start="788:58" pos:end="788:58">*</modifier></type><name pos:start="788:59" pos:end="788:61">ctx</name></decl></parameter>, <parameter pos:start="788:64" pos:end="788:73"><decl pos:start="788:64" pos:end="788:73"><type pos:start="788:64" pos:end="788:73"><name pos:start="788:64" pos:end="788:67">char</name> <modifier pos:start="788:69" pos:end="788:69">*</modifier></type><name pos:start="788:70" pos:end="788:73">body</name></decl></parameter>, <parameter pos:start="788:76" pos:end="788:87"><decl pos:start="788:76" pos:end="788:87"><type pos:start="788:76" pos:end="788:87"><name pos:start="788:76" pos:end="788:78">int</name></type> <name pos:start="788:80" pos:end="788:87">body_len</name></decl></parameter>)</parameter_list> 
<block pos:start="789:1" pos:end="1004:1">{<block_content pos:start="790:5" pos:end="1003:26">
    <decl_stmt pos:start="790:5" pos:end="790:41"><decl pos:start="790:5" pos:end="790:11"><type pos:start="790:5" pos:end="790:7"><name pos:start="790:5" pos:end="790:7">int</name></type> <name pos:start="790:9" pos:end="790:11">tag</name></decl>, <decl pos:start="790:14" pos:end="790:19"><type ref="prev" pos:start="790:5" pos:end="790:7"/><name pos:start="790:14" pos:end="790:19">xclass</name></decl>, <decl pos:start="790:22" pos:end="790:22"><type ref="prev" pos:start="790:5" pos:end="790:7"/><name pos:start="790:22" pos:end="790:22">j</name></decl>, <decl pos:start="790:25" pos:end="790:35"><type ref="prev" pos:start="790:5" pos:end="790:7"/><name pos:start="790:25" pos:end="790:35">found_match</name></decl>, <decl pos:start="790:38" pos:end="790:40"><type ref="prev" pos:start="790:5" pos:end="790:7"/><name pos:start="790:38" pos:end="790:40">nid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="791:5" pos:end="791:13"><decl pos:start="791:5" pos:end="791:12"><type pos:start="791:5" pos:end="791:8"><name pos:start="791:5" pos:end="791:8">long</name></type> <name pos:start="791:10" pos:end="791:12">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="792:5" pos:end="792:38"><decl pos:start="792:5" pos:end="792:26"><type pos:start="792:5" pos:end="792:19"><name pos:start="792:5" pos:end="792:12">unsigned</name> <name pos:start="792:14" pos:end="792:17">char</name> <modifier pos:start="792:19" pos:end="792:19">*</modifier></type><name pos:start="792:20" pos:end="792:26">der_ptr</name></decl>, <decl pos:start="792:29" pos:end="792:37"><type ref="prev" pos:start="792:5" pos:end="792:19"><modifier pos:start="792:29" pos:end="792:29">*</modifier></type><name pos:start="792:30" pos:end="792:37">save_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="793:5" pos:end="793:26"><decl pos:start="793:5" pos:end="793:25"><type pos:start="793:5" pos:end="793:17"><name pos:start="793:5" pos:end="793:15">ASN1_OBJECT</name> <modifier pos:start="793:17" pos:end="793:17">*</modifier></type><name pos:start="793:18" pos:end="793:25">a_object</name></decl>;</decl_stmt>
    <decl_stmt pos:start="794:5" pos:end="794:31"><decl pos:start="794:5" pos:end="794:30"><type pos:start="794:5" pos:end="794:7"><name pos:start="794:5" pos:end="794:7">int</name></type> <name pos:start="794:9" pos:end="794:15">max_len</name> <init pos:start="794:17" pos:end="794:30">= <expr pos:start="794:19" pos:end="794:30"><name pos:start="794:19" pos:end="794:30">MAX_CSRATTRS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="795:5" pos:end="795:19"><decl pos:start="795:5" pos:end="795:18"><type pos:start="795:5" pos:end="795:10"><name pos:start="795:5" pos:end="795:8">char</name> <modifier pos:start="795:10" pos:end="795:10">*</modifier></type><name pos:start="795:11" pos:end="795:18">csr_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="796:5" pos:end="796:16"><decl pos:start="796:5" pos:end="796:15"><type pos:start="796:5" pos:end="796:7"><name pos:start="796:5" pos:end="796:7">int</name></type> <name pos:start="796:9" pos:end="796:15">csr_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="797:5" pos:end="797:22"><decl pos:start="797:5" pos:end="797:21"><type pos:start="797:5" pos:end="797:8"><name pos:start="797:5" pos:end="797:8">long</name></type> <name pos:start="797:10" pos:end="797:21">out_len_save</name></decl>;</decl_stmt>
    <decl_stmt pos:start="798:5" pos:end="798:28"><decl pos:start="798:5" pos:end="798:27"><type pos:start="798:5" pos:end="798:19"><name pos:start="798:5" pos:end="798:12">unsigned</name> <name pos:start="798:14" pos:end="798:17">char</name> <modifier pos:start="798:19" pos:end="798:19">*</modifier></type><name pos:start="798:20" pos:end="798:27">der_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="799:5" pos:end="799:25"><decl pos:start="799:5" pos:end="799:15"><type pos:start="799:5" pos:end="799:7"><name pos:start="799:5" pos:end="799:7">int</name></type> <name pos:start="799:9" pos:end="799:15">der_len</name></decl>, <decl pos:start="799:18" pos:end="799:24"><type ref="prev" pos:start="799:5" pos:end="799:7"/><name pos:start="799:18" pos:end="799:24">out_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="800:5" pos:end="800:14"><decl pos:start="800:5" pos:end="800:13"><type pos:start="800:5" pos:end="800:7"><name pos:start="800:5" pos:end="800:7">int</name></type> <name pos:start="800:9" pos:end="800:13">a_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="801:5" pos:end="801:32"><decl pos:start="801:5" pos:end="801:31"><type pos:start="801:5" pos:end="801:8"><name pos:start="801:5" pos:end="801:8">char</name></type> <name pos:start="801:10" pos:end="801:31"><name pos:start="801:10" pos:end="801:13">tbuf</name><index pos:start="801:14" pos:end="801:31">[<expr pos:start="801:15" pos:end="801:30"><name pos:start="801:15" pos:end="801:30">EST_MAX_ATTR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="802:5" pos:end="802:39"><decl pos:start="802:5" pos:end="802:38"><type pos:start="802:5" pos:end="802:18"><name pos:start="802:5" pos:end="802:16">EST_OID_LIST</name> <modifier pos:start="802:18" pos:end="802:18">*</modifier></type><name pos:start="802:19" pos:end="802:31">csr_attr_oids</name> <init pos:start="802:33" pos:end="802:38">= <expr pos:start="802:35" pos:end="802:38"><name pos:start="802:35" pos:end="802:38">NULL</name></expr></init></decl>;</decl_stmt> 
    <decl_stmt pos:start="803:5" pos:end="803:28"><decl pos:start="803:5" pos:end="803:27"><type pos:start="803:5" pos:end="803:18"><name pos:start="803:5" pos:end="803:16">EST_OID_LIST</name> <modifier pos:start="803:18" pos:end="803:18">*</modifier></type><name pos:start="803:19" pos:end="803:27">oid_entry</name></decl>;</decl_stmt>
    <decl_stmt pos:start="804:5" pos:end="804:19"><decl pos:start="804:5" pos:end="804:18"><type pos:start="804:5" pos:end="804:7"><name pos:start="804:5" pos:end="804:7">int</name></type> <name pos:start="804:9" pos:end="804:18">comparator</name></decl>;</decl_stmt>
    <decl_stmt pos:start="805:5" pos:end="805:17"><decl pos:start="805:5" pos:end="805:16"><type pos:start="805:5" pos:end="805:13"><name pos:start="805:5" pos:end="805:13">EST_ERROR</name></type> <name pos:start="805:15" pos:end="805:16">rv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="807:5" pos:end="807:58"><expr pos:start="807:5" pos:end="807:57"><call pos:start="807:5" pos:end="807:57"><name pos:start="807:5" pos:end="807:16">EST_LOG_INFO</name><argument_list pos:start="807:17" pos:end="807:57">(<argument pos:start="807:18" pos:end="807:56"><expr pos:start="807:18" pos:end="807:56"><literal type="string" pos:start="807:18" pos:end="807:56">"CSR attributes enforcement is enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="809:5" pos:end="812:5"><if pos:start="809:5" pos:end="812:5">if <condition pos:start="809:8" pos:end="809:54">(<expr pos:start="809:9" pos:end="809:53"><operator pos:start="809:9" pos:end="809:9">!</operator><name pos:start="809:10" pos:end="809:29"><name pos:start="809:10" pos:end="809:12">ctx</name><operator pos:start="809:13" pos:end="809:14">-&gt;</operator><name pos:start="809:15" pos:end="809:29">server_csrattrs</name></name> <operator pos:start="809:31" pos:end="809:32">&amp;&amp;</operator> <operator pos:start="809:34" pos:end="809:34">!</operator><name pos:start="809:35" pos:end="809:53"><name pos:start="809:35" pos:end="809:37">ctx</name><operator pos:start="809:38" pos:end="809:39">-&gt;</operator><name pos:start="809:40" pos:end="809:53">est_get_csr_cb</name></name></expr>)</condition> <block pos:start="809:56" pos:end="812:5">{<block_content pos:start="810:9" pos:end="811:28">
	<expr_stmt pos:start="810:9" pos:end="810:102"><expr pos:start="810:9" pos:end="810:101"><call pos:start="810:9" pos:end="810:101"><name pos:start="810:9" pos:end="810:20">EST_LOG_WARN</name><argument_list pos:start="810:21" pos:end="810:101">(<argument pos:start="810:22" pos:end="810:100"><expr pos:start="810:22" pos:end="810:100"><literal type="string" pos:start="810:22" pos:end="810:100">"CSR attributes enforcement is enabled, but no attributes have been configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="811:9" pos:end="811:28">return <expr pos:start="811:16" pos:end="811:27"><name pos:start="811:16" pos:end="811:27">EST_ERR_NONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="814:5" pos:end="817:7">/*
     * Build the list of attributes present in the CSR.  This list will be
     * used later when we confirm the required attributes are present.
     */</comment>
    <expr_stmt pos:start="818:5" pos:end="818:72"><expr pos:start="818:5" pos:end="818:71"><name pos:start="818:5" pos:end="818:6">rv</name> <operator pos:start="818:8" pos:end="818:8">=</operator>  <call pos:start="818:11" pos:end="818:71"><name pos:start="818:11" pos:end="818:39">est_server_build_csr_oid_list</name><argument_list pos:start="818:40" pos:end="818:71">(<argument pos:start="818:41" pos:end="818:54"><expr pos:start="818:41" pos:end="818:54"><operator pos:start="818:41" pos:end="818:41">&amp;</operator><name pos:start="818:42" pos:end="818:54">csr_attr_oids</name></expr></argument>, <argument pos:start="818:57" pos:end="818:60"><expr pos:start="818:57" pos:end="818:60"><name pos:start="818:57" pos:end="818:60">body</name></expr></argument>, <argument pos:start="818:63" pos:end="818:70"><expr pos:start="818:63" pos:end="818:70"><name pos:start="818:63" pos:end="818:70">body_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="819:5" pos:end="821:5"><if pos:start="819:5" pos:end="821:5">if <condition pos:start="819:8" pos:end="819:27">(<expr pos:start="819:9" pos:end="819:26"><name pos:start="819:9" pos:end="819:10">rv</name> <operator pos:start="819:12" pos:end="819:13">!=</operator> <name pos:start="819:15" pos:end="819:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="819:29" pos:end="821:5">{<block_content pos:start="820:9" pos:end="820:20">
	<return pos:start="820:9" pos:end="820:20">return <expr pos:start="820:16" pos:end="820:19"><operator pos:start="820:16" pos:end="820:16">(</operator><name pos:start="820:17" pos:end="820:18">rv</name><operator pos:start="820:19" pos:end="820:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="823:5" pos:end="827:7">/*
     * Get the CSR attributes configured on the server.  We'll need to 
     * look in the CSR to make sure the CSR provided each of these. 
     * Use the callback if configured, otherwise use the local copy.
     */</comment>
    <if_stmt pos:start="828:5" pos:end="846:5"><if pos:start="828:5" pos:end="835:5">if <condition pos:start="828:8" pos:end="828:28">(<expr pos:start="828:9" pos:end="828:27"><name pos:start="828:9" pos:end="828:27"><name pos:start="828:9" pos:end="828:11">ctx</name><operator pos:start="828:12" pos:end="828:13">-&gt;</operator><name pos:start="828:14" pos:end="828:27">est_get_csr_cb</name></name></expr>)</condition> <block pos:start="828:30" pos:end="835:5">{<block_content pos:start="829:9" pos:end="834:9">
	<expr_stmt pos:start="829:9" pos:end="829:77"><expr pos:start="829:9" pos:end="829:76"><name pos:start="829:9" pos:end="829:16">csr_data</name> <operator pos:start="829:18" pos:end="829:18">=</operator> <operator pos:start="829:20" pos:end="829:20">(</operator><name pos:start="829:21" pos:end="829:24">char</name> <operator pos:start="829:26" pos:end="829:26">*</operator><operator pos:start="829:27" pos:end="829:27">)</operator><call pos:start="829:28" pos:end="829:76"><name pos:start="829:28" pos:end="829:46"><name pos:start="829:28" pos:end="829:30">ctx</name><operator pos:start="829:31" pos:end="829:32">-&gt;</operator><name pos:start="829:33" pos:end="829:46">est_get_csr_cb</name></name><argument_list pos:start="829:47" pos:end="829:76">(<argument pos:start="829:48" pos:end="829:55"><expr pos:start="829:48" pos:end="829:55"><operator pos:start="829:48" pos:end="829:48">&amp;</operator><name pos:start="829:49" pos:end="829:55">csr_len</name></expr></argument>, <argument pos:start="829:58" pos:end="829:61"><expr pos:start="829:58" pos:end="829:61"><name pos:start="829:58" pos:end="829:61">NULL</name></expr></argument>, <argument pos:start="829:64" pos:end="829:75"><expr pos:start="829:64" pos:end="829:75"><name pos:start="829:64" pos:end="829:75"><name pos:start="829:64" pos:end="829:66">ctx</name><operator pos:start="829:67" pos:end="829:68">-&gt;</operator><name pos:start="829:69" pos:end="829:75">ex_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="830:9" pos:end="834:9"><if pos:start="830:9" pos:end="834:9">if <condition pos:start="830:12" pos:end="830:22">(<expr pos:start="830:13" pos:end="830:21"><operator pos:start="830:13" pos:end="830:13">!</operator><name pos:start="830:14" pos:end="830:21">csr_data</name></expr>)</condition> <block pos:start="830:24" pos:end="834:9">{<block_content pos:start="831:13" pos:end="833:39">
	    <expr_stmt pos:start="831:13" pos:end="831:77"><expr pos:start="831:13" pos:end="831:76"><call pos:start="831:13" pos:end="831:76"><name pos:start="831:13" pos:end="831:23">EST_LOG_ERR</name><argument_list pos:start="831:24" pos:end="831:76">(<argument pos:start="831:25" pos:end="831:75"><expr pos:start="831:25" pos:end="831:75"><literal type="string" pos:start="831:25" pos:end="831:75">"Application layer failed to return CSR attributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="832:13" pos:end="832:56"><expr pos:start="832:13" pos:end="832:55"><call pos:start="832:13" pos:end="832:55"><name pos:start="832:13" pos:end="832:40">est_server_free_csr_oid_list</name><argument_list pos:start="832:41" pos:end="832:55">(<argument pos:start="832:42" pos:end="832:54"><expr pos:start="832:42" pos:end="832:54"><name pos:start="832:42" pos:end="832:54">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="833:13" pos:end="833:39">return <expr pos:start="833:20" pos:end="833:38"><operator pos:start="833:20" pos:end="833:20">(</operator><name pos:start="833:21" pos:end="833:37">EST_ERR_CB_FAILED</name><operator pos:start="833:38" pos:end="833:38">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="835:7" pos:end="846:5">else <block pos:start="835:12" pos:end="846:5">{<block_content pos:start="836:9" pos:end="845:43">
        <expr_stmt pos:start="836:9" pos:end="836:56"><expr pos:start="836:9" pos:end="836:55"><name pos:start="836:9" pos:end="836:16">csr_data</name> <operator pos:start="836:18" pos:end="836:18">=</operator> <call pos:start="836:20" pos:end="836:55"><name pos:start="836:20" pos:end="836:25">malloc</name><argument_list pos:start="836:26" pos:end="836:55">(<argument pos:start="836:27" pos:end="836:54"><expr pos:start="836:27" pos:end="836:54"><name pos:start="836:27" pos:end="836:50"><name pos:start="836:27" pos:end="836:29">ctx</name><operator pos:start="836:30" pos:end="836:31">-&gt;</operator><name pos:start="836:32" pos:end="836:50">server_csrattrs_len</name></name> <operator pos:start="836:52" pos:end="836:52">+</operator> <literal type="number" pos:start="836:54" pos:end="836:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="837:9" pos:end="841:9"><if pos:start="837:9" pos:end="841:9">if <condition pos:start="837:12" pos:end="837:22">(<expr pos:start="837:13" pos:end="837:21"><operator pos:start="837:13" pos:end="837:13">!</operator><name pos:start="837:14" pos:end="837:21">csr_data</name></expr>)</condition> <block pos:start="837:24" pos:end="841:9">{<block_content pos:start="838:13" pos:end="840:36">
	    <expr_stmt pos:start="838:13" pos:end="838:42"><expr pos:start="838:13" pos:end="838:41"><call pos:start="838:13" pos:end="838:41"><name pos:start="838:13" pos:end="838:23">EST_LOG_ERR</name><argument_list pos:start="838:24" pos:end="838:41">(<argument pos:start="838:25" pos:end="838:40"><expr pos:start="838:25" pos:end="838:40"><literal type="string" pos:start="838:25" pos:end="838:40">"malloc failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="839:13" pos:end="839:56"><expr pos:start="839:13" pos:end="839:55"><call pos:start="839:13" pos:end="839:55"><name pos:start="839:13" pos:end="839:40">est_server_free_csr_oid_list</name><argument_list pos:start="839:41" pos:end="839:55">(<argument pos:start="839:42" pos:end="839:54"><expr pos:start="839:42" pos:end="839:54"><name pos:start="839:42" pos:end="839:54">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="840:13" pos:end="840:36">return <expr pos:start="840:20" pos:end="840:35"><operator pos:start="840:20" pos:end="840:20">(</operator><name pos:start="840:21" pos:end="840:34">EST_ERR_MALLOC</name><operator pos:start="840:35" pos:end="840:35">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="842:9" pos:end="843:74"><expr pos:start="842:9" pos:end="843:73"><call pos:start="842:9" pos:end="843:73"><name pos:start="842:9" pos:end="842:17">strncpy_s</name><argument_list pos:start="842:18" pos:end="843:73">(<argument pos:start="842:19" pos:end="842:26"><expr pos:start="842:19" pos:end="842:26"><name pos:start="842:19" pos:end="842:26">csr_data</name></expr></argument>, <argument pos:start="842:29" pos:end="842:56"><expr pos:start="842:29" pos:end="842:56"><name pos:start="842:29" pos:end="842:52"><name pos:start="842:29" pos:end="842:31">ctx</name><operator pos:start="842:32" pos:end="842:33">-&gt;</operator><name pos:start="842:34" pos:end="842:52">server_csrattrs_len</name></name> <operator pos:start="842:54" pos:end="842:54">+</operator> <literal type="number" pos:start="842:56" pos:end="842:56">1</literal></expr></argument>, 
		  <argument pos:start="843:19" pos:end="843:46"><expr pos:start="843:19" pos:end="843:46"><operator pos:start="843:19" pos:end="843:19">(</operator><name pos:start="843:20" pos:end="843:23">char</name> <operator pos:start="843:25" pos:end="843:25">*</operator><operator pos:start="843:26" pos:end="843:26">)</operator><name pos:start="843:27" pos:end="843:46"><name pos:start="843:27" pos:end="843:29">ctx</name><operator pos:start="843:30" pos:end="843:31">-&gt;</operator><name pos:start="843:32" pos:end="843:46">server_csrattrs</name></name></expr></argument>, <argument pos:start="843:49" pos:end="843:72"><expr pos:start="843:49" pos:end="843:72"><name pos:start="843:49" pos:end="843:72"><name pos:start="843:49" pos:end="843:51">ctx</name><operator pos:start="843:52" pos:end="843:53">-&gt;</operator><name pos:start="843:54" pos:end="843:72">server_csrattrs_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="844:9" pos:end="844:47"><expr pos:start="844:9" pos:end="844:46"><name pos:start="844:9" pos:end="844:42"><name pos:start="844:9" pos:end="844:16">csr_data</name><index pos:start="844:17" pos:end="844:42">[<expr pos:start="844:18" pos:end="844:41"><name pos:start="844:18" pos:end="844:41"><name pos:start="844:18" pos:end="844:20">ctx</name><operator pos:start="844:21" pos:end="844:22">-&gt;</operator><name pos:start="844:23" pos:end="844:41">server_csrattrs_len</name></name></expr>]</index></name> <operator pos:start="844:44" pos:end="844:44">=</operator> <literal type="number" pos:start="844:46" pos:end="844:46">0</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="845:9" pos:end="845:43"><expr pos:start="845:9" pos:end="845:42"><name pos:start="845:9" pos:end="845:15">csr_len</name> <operator pos:start="845:17" pos:end="845:17">=</operator> <name pos:start="845:19" pos:end="845:42"><name pos:start="845:19" pos:end="845:21">ctx</name><operator pos:start="845:22" pos:end="845:23">-&gt;</operator><name pos:start="845:24" pos:end="845:42">server_csrattrs_len</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="847:5" pos:end="847:68"><expr pos:start="847:5" pos:end="847:67"><call pos:start="847:5" pos:end="847:67"><name pos:start="847:5" pos:end="847:16">EST_LOG_INFO</name><argument_list pos:start="847:17" pos:end="847:67">(<argument pos:start="847:18" pos:end="847:56"><expr pos:start="847:18" pos:end="847:56"><literal type="string" pos:start="847:18" pos:end="847:56">"Checking CSR attrs present in CSR: %s"</literal></expr></argument>, <argument pos:start="847:59" pos:end="847:66"><expr pos:start="847:59" pos:end="847:66"><name pos:start="847:59" pos:end="847:66">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="849:5" pos:end="853:7">/* 
     * We have the CSR configured on the server and it needs base64 decoding.
     * Check smallest possible base64 case here for now 
     * and sanity test will check min/max value for ASN.1 data
     */</comment>
    <if_stmt pos:start="854:5" pos:end="858:5"><if pos:start="854:5" pos:end="858:5">if <condition pos:start="854:8" pos:end="854:31">(<expr pos:start="854:9" pos:end="854:30"><name pos:start="854:9" pos:end="854:15">csr_len</name> <operator pos:start="854:17" pos:end="854:17">&lt;</operator> <name pos:start="854:19" pos:end="854:30">MIN_CSRATTRS</name></expr>)</condition> <block pos:start="854:33" pos:end="858:5">{<block_content pos:start="855:9" pos:end="857:44">
	<expr_stmt pos:start="855:9" pos:end="855:52"><expr pos:start="855:9" pos:end="855:51"><call pos:start="855:9" pos:end="855:51"><name pos:start="855:9" pos:end="855:36">est_server_free_csr_oid_list</name><argument_list pos:start="855:37" pos:end="855:51">(<argument pos:start="855:38" pos:end="855:50"><expr pos:start="855:38" pos:end="855:50"><name pos:start="855:38" pos:end="855:50">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="856:9" pos:end="856:23"><expr pos:start="856:9" pos:end="856:22"><call pos:start="856:9" pos:end="856:22"><name pos:start="856:9" pos:end="856:12">free</name><argument_list pos:start="856:13" pos:end="856:22">(<argument pos:start="856:14" pos:end="856:21"><expr pos:start="856:14" pos:end="856:21"><name pos:start="856:14" pos:end="856:21">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="857:9" pos:end="857:44">return <expr pos:start="857:16" pos:end="857:43"><operator pos:start="857:16" pos:end="857:16">(</operator><name pos:start="857:17" pos:end="857:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="857:43" pos:end="857:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="860:5" pos:end="862:7">/*
     * grab some space to hold the decoded CSR data
     */</comment>
    <expr_stmt pos:start="863:5" pos:end="863:33"><expr pos:start="863:5" pos:end="863:32"><name pos:start="863:5" pos:end="863:12">der_data</name> <operator pos:start="863:14" pos:end="863:14">=</operator> <call pos:start="863:16" pos:end="863:32"><name pos:start="863:16" pos:end="863:21">malloc</name><argument_list pos:start="863:22" pos:end="863:32">(<argument pos:start="863:23" pos:end="863:31"><expr pos:start="863:23" pos:end="863:31"><name pos:start="863:23" pos:end="863:29">csr_len</name><operator pos:start="863:30" pos:end="863:30">*</operator><literal type="number" pos:start="863:31" pos:end="863:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="864:5" pos:end="869:5"><if pos:start="864:5" pos:end="869:5">if <condition pos:start="864:8" pos:end="864:18">(<expr pos:start="864:9" pos:end="864:17"><operator pos:start="864:9" pos:end="864:9">!</operator><name pos:start="864:10" pos:end="864:17">der_data</name></expr>)</condition> <block pos:start="864:20" pos:end="869:5">{<block_content pos:start="865:9" pos:end="868:32">
	<expr_stmt pos:start="865:9" pos:end="865:37"><expr pos:start="865:9" pos:end="865:36"><call pos:start="865:9" pos:end="865:36"><name pos:start="865:9" pos:end="865:19">EST_LOG_ERR</name><argument_list pos:start="865:20" pos:end="865:36">(<argument pos:start="865:21" pos:end="865:35"><expr pos:start="865:21" pos:end="865:35"><literal type="string" pos:start="865:21" pos:end="865:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="866:9" pos:end="866:52"><expr pos:start="866:9" pos:end="866:51"><call pos:start="866:9" pos:end="866:51"><name pos:start="866:9" pos:end="866:36">est_server_free_csr_oid_list</name><argument_list pos:start="866:37" pos:end="866:51">(<argument pos:start="866:38" pos:end="866:50"><expr pos:start="866:38" pos:end="866:50"><name pos:start="866:38" pos:end="866:50">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="867:9" pos:end="867:23"><expr pos:start="867:9" pos:end="867:22"><call pos:start="867:9" pos:end="867:22"><name pos:start="867:9" pos:end="867:12">free</name><argument_list pos:start="867:13" pos:end="867:22">(<argument pos:start="867:14" pos:end="867:21"><expr pos:start="867:14" pos:end="867:21"><name pos:start="867:14" pos:end="867:21">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="868:9" pos:end="868:32">return <expr pos:start="868:16" pos:end="868:31"><operator pos:start="868:16" pos:end="868:16">(</operator><name pos:start="868:17" pos:end="868:30">EST_ERR_MALLOC</name><operator pos:start="868:31" pos:end="868:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="871:5" pos:end="873:7">/*
     * Decode the CSR data
     */</comment>
    <expr_stmt pos:start="874:5" pos:end="874:71"><expr pos:start="874:5" pos:end="874:70"><name pos:start="874:5" pos:end="874:11">der_len</name> <operator pos:start="874:13" pos:end="874:13">=</operator> <call pos:start="874:15" pos:end="874:70"><name pos:start="874:15" pos:end="874:31">est_base64_decode</name><argument_list pos:start="874:32" pos:end="874:70">(<argument pos:start="874:33" pos:end="874:40"><expr pos:start="874:33" pos:end="874:40"><name pos:start="874:33" pos:end="874:40">csr_data</name></expr></argument>, <argument pos:start="874:43" pos:end="874:58"><expr pos:start="874:43" pos:end="874:58"><operator pos:start="874:43" pos:end="874:43">(</operator><name pos:start="874:44" pos:end="874:47">char</name> <operator pos:start="874:49" pos:end="874:49">*</operator><operator pos:start="874:50" pos:end="874:50">)</operator><name pos:start="874:51" pos:end="874:58">der_data</name></expr></argument>, <argument pos:start="874:61" pos:end="874:69"><expr pos:start="874:61" pos:end="874:69"><name pos:start="874:61" pos:end="874:67">csr_len</name><operator pos:start="874:68" pos:end="874:68">*</operator><literal type="number" pos:start="874:69" pos:end="874:69">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="875:5" pos:end="875:19"><expr pos:start="875:5" pos:end="875:18"><call pos:start="875:5" pos:end="875:18"><name pos:start="875:5" pos:end="875:8">free</name><argument_list pos:start="875:9" pos:end="875:18">(<argument pos:start="875:10" pos:end="875:17"><expr pos:start="875:10" pos:end="875:17"><name pos:start="875:10" pos:end="875:17">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="876:5" pos:end="881:5"><if pos:start="876:5" pos:end="881:5">if <condition pos:start="876:8" pos:end="876:21">(<expr pos:start="876:9" pos:end="876:20"><name pos:start="876:9" pos:end="876:15">der_len</name> <operator pos:start="876:17" pos:end="876:18">&lt;=</operator> <literal type="number" pos:start="876:20" pos:end="876:20">0</literal></expr>)</condition> <block pos:start="876:23" pos:end="881:5">{<block_content pos:start="877:9" pos:end="880:36">
        <expr_stmt pos:start="877:9" pos:end="877:51"><expr pos:start="877:9" pos:end="877:50"><call pos:start="877:9" pos:end="877:50"><name pos:start="877:9" pos:end="877:19">EST_LOG_ERR</name><argument_list pos:start="877:20" pos:end="877:50">(<argument pos:start="877:21" pos:end="877:49"><expr pos:start="877:21" pos:end="877:49"><literal type="string" pos:start="877:21" pos:end="877:49">"Invalid base64 encoded data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="878:9" pos:end="878:52"><expr pos:start="878:9" pos:end="878:51"><call pos:start="878:9" pos:end="878:51"><name pos:start="878:9" pos:end="878:36">est_server_free_csr_oid_list</name><argument_list pos:start="878:37" pos:end="878:51">(<argument pos:start="878:38" pos:end="878:50"><expr pos:start="878:38" pos:end="878:50"><name pos:start="878:38" pos:end="878:50">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="879:9" pos:end="879:23"><expr pos:start="879:9" pos:end="879:22"><call pos:start="879:9" pos:end="879:22"><name pos:start="879:9" pos:end="879:12">free</name><argument_list pos:start="879:13" pos:end="879:22">(<argument pos:start="879:14" pos:end="879:21"><expr pos:start="879:14" pos:end="879:21"><name pos:start="879:14" pos:end="879:21">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="880:9" pos:end="880:36">return <expr pos:start="880:16" pos:end="880:35"><operator pos:start="880:16" pos:end="880:16">(</operator><name pos:start="880:17" pos:end="880:34">EST_ERR_BAD_BASE64</name><operator pos:start="880:35" pos:end="880:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="883:5" pos:end="885:7">/*
     * pointer fun starts here, joy to OpenSSL
     */</comment>
    <expr_stmt pos:start="886:5" pos:end="886:37"><expr pos:start="886:5" pos:end="886:36"><name pos:start="886:5" pos:end="886:16">out_len_save</name> <operator pos:start="886:18" pos:end="886:18">=</operator> <name pos:start="886:20" pos:end="886:26">out_len</name> <operator pos:start="886:28" pos:end="886:28">=</operator> <name pos:start="886:30" pos:end="886:36">der_len</name></expr>;</expr_stmt>
    <expr_stmt pos:start="887:5" pos:end="887:34"><expr pos:start="887:5" pos:end="887:33"><name pos:start="887:5" pos:end="887:11">der_ptr</name> <operator pos:start="887:13" pos:end="887:13">=</operator> <name pos:start="887:15" pos:end="887:22">save_ptr</name> <operator pos:start="887:24" pos:end="887:24">=</operator> <name pos:start="887:26" pos:end="887:33">der_data</name></expr>;</expr_stmt>

    <if_stmt pos:start="889:5" pos:end="894:5"><if pos:start="889:5" pos:end="894:5">if <condition pos:start="889:8" pos:end="889:31">(<expr pos:start="889:9" pos:end="889:30"><name pos:start="889:9" pos:end="889:20">out_len_save</name> <operator pos:start="889:22" pos:end="889:22">&gt;</operator> <name pos:start="889:24" pos:end="889:30">max_len</name></expr>)</condition> <block pos:start="889:33" pos:end="894:5">{<block_content pos:start="890:9" pos:end="893:44">
	<expr_stmt pos:start="890:9" pos:end="890:46"><expr pos:start="890:9" pos:end="890:45"><call pos:start="890:9" pos:end="890:45"><name pos:start="890:9" pos:end="890:19">EST_LOG_ERR</name><argument_list pos:start="890:20" pos:end="890:45">(<argument pos:start="890:21" pos:end="890:44"><expr pos:start="890:21" pos:end="890:44"><literal type="string" pos:start="890:21" pos:end="890:44">"DER length exceeds max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="891:9" pos:end="891:52"><expr pos:start="891:9" pos:end="891:51"><call pos:start="891:9" pos:end="891:51"><name pos:start="891:9" pos:end="891:36">est_server_free_csr_oid_list</name><argument_list pos:start="891:37" pos:end="891:51">(<argument pos:start="891:38" pos:end="891:50"><expr pos:start="891:38" pos:end="891:50"><name pos:start="891:38" pos:end="891:50">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="892:9" pos:end="892:23"><expr pos:start="892:9" pos:end="892:22"><call pos:start="892:9" pos:end="892:22"><name pos:start="892:9" pos:end="892:12">free</name><argument_list pos:start="892:13" pos:end="892:22">(<argument pos:start="892:14" pos:end="892:21"><expr pos:start="892:14" pos:end="892:21"><name pos:start="892:14" pos:end="892:21">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="893:9" pos:end="893:44">return <expr pos:start="893:16" pos:end="893:43"><operator pos:start="893:16" pos:end="893:16">(</operator><name pos:start="893:17" pos:end="893:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="893:43" pos:end="893:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="896:5" pos:end="896:47">/* make sure its long enough to be ASN.1 */</comment>
    <if_stmt pos:start="897:5" pos:end="902:5"><if pos:start="897:5" pos:end="902:5">if <condition pos:start="897:8" pos:end="897:36">(<expr pos:start="897:9" pos:end="897:35"><name pos:start="897:9" pos:end="897:15">der_len</name> <operator pos:start="897:17" pos:end="897:17">&lt;</operator> <name pos:start="897:19" pos:end="897:35">MIN_ASN1_CSRATTRS</name></expr>)</condition> <block pos:start="897:38" pos:end="902:5">{<block_content pos:start="898:9" pos:end="901:44">
	<expr_stmt pos:start="898:9" pos:end="898:37"><expr pos:start="898:9" pos:end="898:36"><call pos:start="898:9" pos:end="898:36"><name pos:start="898:9" pos:end="898:19">EST_LOG_ERR</name><argument_list pos:start="898:20" pos:end="898:36">(<argument pos:start="898:21" pos:end="898:35"><expr pos:start="898:21" pos:end="898:35"><literal type="string" pos:start="898:21" pos:end="898:35">"DER too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="899:9" pos:end="899:52"><expr pos:start="899:9" pos:end="899:51"><call pos:start="899:9" pos:end="899:51"><name pos:start="899:9" pos:end="899:36">est_server_free_csr_oid_list</name><argument_list pos:start="899:37" pos:end="899:51">(<argument pos:start="899:38" pos:end="899:50"><expr pos:start="899:38" pos:end="899:50"><name pos:start="899:38" pos:end="899:50">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="900:9" pos:end="900:23"><expr pos:start="900:9" pos:end="900:22"><call pos:start="900:9" pos:end="900:22"><name pos:start="900:9" pos:end="900:12">free</name><argument_list pos:start="900:13" pos:end="900:22">(<argument pos:start="900:14" pos:end="900:21"><expr pos:start="900:14" pos:end="900:21"><name pos:start="900:14" pos:end="900:21">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="901:9" pos:end="901:44">return <expr pos:start="901:16" pos:end="901:43"><operator pos:start="901:16" pos:end="901:16">(</operator><name pos:start="901:17" pos:end="901:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="901:43" pos:end="901:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="904:5" pos:end="906:7">/*
     * Iterate through the CSR attributes configured on the server
     */</comment>
    <while pos:start="907:5" pos:end="984:5">while <condition pos:start="907:11" pos:end="907:23">(<expr pos:start="907:12" pos:end="907:22"><name pos:start="907:12" pos:end="907:18">out_len</name> <operator pos:start="907:20" pos:end="907:20">&gt;</operator> <literal type="number" pos:start="907:22" pos:end="907:22">0</literal></expr>)</condition> <block pos:start="907:25" pos:end="984:5">{<block_content pos:start="911:9" pos:end="983:54">
	<comment type="block" pos:start="908:9" pos:end="910:11">/*
	 * Get the next attributes
	 */</comment>
	<expr_stmt pos:start="911:9" pos:end="911:91"><expr pos:start="911:9" pos:end="911:90"><name pos:start="911:9" pos:end="911:9">j</name> <operator pos:start="911:11" pos:end="911:11">=</operator> <call pos:start="911:13" pos:end="911:90"><name pos:start="911:13" pos:end="911:27">ASN1_get_object</name><argument_list pos:start="911:28" pos:end="911:90">(<argument pos:start="911:29" pos:end="911:59"><expr pos:start="911:29" pos:end="911:59"><operator pos:start="911:29" pos:end="911:29">(</operator><specifier pos:start="911:30" pos:end="911:34">const</specifier> <name pos:start="911:36" pos:end="911:43">unsigned</name> <name pos:start="911:45" pos:end="911:48">char</name><operator pos:start="911:49" pos:end="911:49">*</operator><operator pos:start="911:50" pos:end="911:50">*</operator><operator pos:start="911:51" pos:end="911:51">)</operator><operator pos:start="911:52" pos:end="911:52">&amp;</operator><name pos:start="911:53" pos:end="911:59">der_ptr</name></expr></argument>, <argument pos:start="911:62" pos:end="911:65"><expr pos:start="911:62" pos:end="911:65"><operator pos:start="911:62" pos:end="911:62">&amp;</operator><name pos:start="911:63" pos:end="911:65">len</name></expr></argument>, <argument pos:start="911:68" pos:end="911:71"><expr pos:start="911:68" pos:end="911:71"><operator pos:start="911:68" pos:end="911:68">&amp;</operator><name pos:start="911:69" pos:end="911:71">tag</name></expr></argument>, <argument pos:start="911:74" pos:end="911:80"><expr pos:start="911:74" pos:end="911:80"><operator pos:start="911:74" pos:end="911:74">&amp;</operator><name pos:start="911:75" pos:end="911:80">xclass</name></expr></argument>, <argument pos:start="911:83" pos:end="911:89"><expr pos:start="911:83" pos:end="911:89"><name pos:start="911:83" pos:end="911:89">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="913:9" pos:end="913:87"><expr pos:start="913:9" pos:end="913:86"><call pos:start="913:9" pos:end="913:86"><name pos:start="913:9" pos:end="913:20">EST_LOG_INFO</name><argument_list pos:start="913:21" pos:end="913:86">(<argument pos:start="913:22" pos:end="913:63"><expr pos:start="913:22" pos:end="913:63"><literal type="string" pos:start="913:22" pos:end="913:63">"Sanity: tag=%d, len=%d, j=%d, out_len=%d"</literal></expr></argument>, <argument pos:start="913:66" pos:end="913:68"><expr pos:start="913:66" pos:end="913:68"><name pos:start="913:66" pos:end="913:68">tag</name></expr></argument>, <argument pos:start="913:71" pos:end="913:73"><expr pos:start="913:71" pos:end="913:73"><name pos:start="913:71" pos:end="913:73">len</name></expr></argument>, <argument pos:start="913:76" pos:end="913:76"><expr pos:start="913:76" pos:end="913:76"><name pos:start="913:76" pos:end="913:76">j</name></expr></argument>, <argument pos:start="913:79" pos:end="913:85"><expr pos:start="913:79" pos:end="913:85"><name pos:start="913:79" pos:end="913:85">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="914:9" pos:end="919:9"><if pos:start="914:9" pos:end="919:9">if <condition pos:start="914:12" pos:end="914:21">(<expr pos:start="914:13" pos:end="914:20"><name pos:start="914:13" pos:end="914:13">j</name> <operator pos:start="914:15" pos:end="914:15">&amp;</operator> <literal type="number" pos:start="914:17" pos:end="914:20">0x80</literal></expr>)</condition> <block pos:start="914:23" pos:end="919:9">{<block_content pos:start="915:13" pos:end="918:42">
	    <expr_stmt pos:start="915:13" pos:end="915:40"><expr pos:start="915:13" pos:end="915:39"><call pos:start="915:13" pos:end="915:39"><name pos:start="915:13" pos:end="915:23">EST_LOG_ERR</name><argument_list pos:start="915:24" pos:end="915:39">(<argument pos:start="915:25" pos:end="915:38"><expr pos:start="915:25" pos:end="915:38"><literal type="string" pos:start="915:25" pos:end="915:38">"Bad ASN1 hex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="916:13" pos:end="916:56"><expr pos:start="916:13" pos:end="916:55"><call pos:start="916:13" pos:end="916:55"><name pos:start="916:13" pos:end="916:40">est_server_free_csr_oid_list</name><argument_list pos:start="916:41" pos:end="916:55">(<argument pos:start="916:42" pos:end="916:54"><expr pos:start="916:42" pos:end="916:54"><name pos:start="916:42" pos:end="916:54">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="917:13" pos:end="917:27"><expr pos:start="917:13" pos:end="917:26"><call pos:start="917:13" pos:end="917:26"><name pos:start="917:13" pos:end="917:16">free</name><argument_list pos:start="917:17" pos:end="917:26">(<argument pos:start="917:18" pos:end="917:25"><expr pos:start="917:18" pos:end="917:25"><name pos:start="917:18" pos:end="917:25">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="918:13" pos:end="918:42">return <expr pos:start="918:20" pos:end="918:41"><operator pos:start="918:20" pos:end="918:20">(</operator><name pos:start="918:21" pos:end="918:40">EST_ERR_BAD_ASN1_HEX</name><operator pos:start="918:41" pos:end="918:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
	<switch pos:start="920:9" pos:end="982:9">switch <condition pos:start="920:16" pos:end="920:20">(<expr pos:start="920:17" pos:end="920:19"><name pos:start="920:17" pos:end="920:19">tag</name></expr>)</condition> <block pos:start="920:22" pos:end="982:9">{<block_content pos:start="921:9" pos:end="981:18">
	<case pos:start="921:9" pos:end="921:27">case <expr pos:start="921:14" pos:end="921:26"><name pos:start="921:14" pos:end="921:26">V_ASN1_OBJECT</name></expr>:</case>
            <expr_stmt pos:start="922:13" pos:end="922:83"><expr pos:start="922:13" pos:end="922:82"><name pos:start="922:13" pos:end="922:20">a_object</name> <operator pos:start="922:22" pos:end="922:22">=</operator> <call pos:start="922:24" pos:end="922:82"><name pos:start="922:24" pos:end="922:38">c2i_ASN1_OBJECT</name><argument_list pos:start="922:39" pos:end="922:82">(<argument pos:start="922:40" pos:end="922:43"><expr pos:start="922:40" pos:end="922:43"><name pos:start="922:40" pos:end="922:43">NULL</name></expr></argument>, <argument pos:start="922:46" pos:end="922:76"><expr pos:start="922:46" pos:end="922:76"><operator pos:start="922:46" pos:end="922:46">(</operator><specifier pos:start="922:47" pos:end="922:51">const</specifier> <name pos:start="922:53" pos:end="922:60">unsigned</name> <name pos:start="922:62" pos:end="922:65">char</name><operator pos:start="922:66" pos:end="922:66">*</operator><operator pos:start="922:67" pos:end="922:67">*</operator><operator pos:start="922:68" pos:end="922:68">)</operator><operator pos:start="922:69" pos:end="922:69">&amp;</operator><name pos:start="922:70" pos:end="922:76">der_ptr</name></expr></argument>, <argument pos:start="922:79" pos:end="922:81"><expr pos:start="922:79" pos:end="922:81"><name pos:start="922:79" pos:end="922:81">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="923:13" pos:end="928:13"><if pos:start="923:13" pos:end="928:13">if <condition pos:start="923:16" pos:end="923:26">(<expr pos:start="923:17" pos:end="923:25"><operator pos:start="923:17" pos:end="923:17">!</operator><name pos:start="923:18" pos:end="923:25">a_object</name></expr>)</condition> <block pos:start="923:28" pos:end="928:13">{<block_content pos:start="924:17" pos:end="927:41">
		<expr_stmt pos:start="924:17" pos:end="924:48"><expr pos:start="924:17" pos:end="924:47"><call pos:start="924:17" pos:end="924:47"><name pos:start="924:17" pos:end="924:27">EST_LOG_ERR</name><argument_list pos:start="924:28" pos:end="924:47">(<argument pos:start="924:29" pos:end="924:46"><expr pos:start="924:29" pos:end="924:46"><literal type="string" pos:start="924:29" pos:end="924:46">"a_object is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt pos:start="925:17" pos:end="925:60"><expr pos:start="925:17" pos:end="925:59"><call pos:start="925:17" pos:end="925:59"><name pos:start="925:17" pos:end="925:44">est_server_free_csr_oid_list</name><argument_list pos:start="925:45" pos:end="925:59">(<argument pos:start="925:46" pos:end="925:58"><expr pos:start="925:46" pos:end="925:58"><name pos:start="925:46" pos:end="925:58">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="926:17" pos:end="926:31"><expr pos:start="926:17" pos:end="926:30"><call pos:start="926:17" pos:end="926:30"><name pos:start="926:17" pos:end="926:20">free</name><argument_list pos:start="926:21" pos:end="926:30">(<argument pos:start="926:22" pos:end="926:29"><expr pos:start="926:22" pos:end="926:29"><name pos:start="926:22" pos:end="926:29">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="927:17" pos:end="927:41">return <expr pos:start="927:24" pos:end="927:40"><operator pos:start="927:24" pos:end="927:24">(</operator><name pos:start="927:25" pos:end="927:39">EST_ERR_UNKNOWN</name><operator pos:start="927:40" pos:end="927:40">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <comment type="block" pos:start="929:13" pos:end="932:15">/*
	     * If this is the challengePassword, no need to check it.
	     * This is already covered when authenticating the client
	     */</comment>
	    <expr_stmt pos:start="933:13" pos:end="933:40"><expr pos:start="933:13" pos:end="933:39"><name pos:start="933:13" pos:end="933:15">nid</name> <operator pos:start="933:17" pos:end="933:17">=</operator> <call pos:start="933:19" pos:end="933:39"><name pos:start="933:19" pos:end="933:29">OBJ_obj2nid</name><argument_list pos:start="933:30" pos:end="933:39">(<argument pos:start="933:31" pos:end="933:38"><expr pos:start="933:31" pos:end="933:38"><name pos:start="933:31" pos:end="933:38">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="934:13" pos:end="937:13"><if pos:start="934:13" pos:end="937:13">if <condition pos:start="934:16" pos:end="934:51">(<expr pos:start="934:17" pos:end="934:50"><name pos:start="934:17" pos:end="934:19">nid</name> <operator pos:start="934:21" pos:end="934:22">==</operator> <name pos:start="934:24" pos:end="934:50">NID_pkcs9_challengePassword</name></expr>)</condition> <block pos:start="934:53" pos:end="937:13">{<block_content pos:start="935:17" pos:end="936:22">
		<expr_stmt pos:start="935:17" pos:end="935:43"><expr pos:start="935:17" pos:end="935:42"><call pos:start="935:17" pos:end="935:42"><name pos:start="935:17" pos:end="935:32">ASN1_OBJECT_free</name><argument_list pos:start="935:33" pos:end="935:42">(<argument pos:start="935:34" pos:end="935:41"><expr pos:start="935:34" pos:end="935:41"><name pos:start="935:34" pos:end="935:41">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:start="936:17" pos:end="936:22">break;</break>
	    </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="939:13" pos:end="939:70"><expr pos:start="939:13" pos:end="939:69"><name pos:start="939:13" pos:end="939:17">a_len</name> <operator pos:start="939:19" pos:end="939:19">=</operator> <call pos:start="939:21" pos:end="939:69"><name pos:start="939:21" pos:end="939:35">i2t_ASN1_OBJECT</name><argument_list pos:start="939:36" pos:end="939:69">(<argument pos:start="939:37" pos:end="939:40"><expr pos:start="939:37" pos:end="939:40"><name pos:start="939:37" pos:end="939:40">tbuf</name></expr></argument>, <argument pos:start="939:43" pos:end="939:58"><expr pos:start="939:43" pos:end="939:58"><name pos:start="939:43" pos:end="939:58">EST_MAX_ATTR_LEN</name></expr></argument>, <argument pos:start="939:61" pos:end="939:68"><expr pos:start="939:61" pos:end="939:68"><name pos:start="939:61" pos:end="939:68">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="940:13" pos:end="940:65"><expr pos:start="940:13" pos:end="940:64"><call pos:start="940:13" pos:end="940:64"><name pos:start="940:13" pos:end="940:24">EST_LOG_INFO</name><argument_list pos:start="940:25" pos:end="940:64">(<argument pos:start="940:26" pos:end="940:57"><expr pos:start="940:26" pos:end="940:57"><literal type="string" pos:start="940:26" pos:end="940:57">"Looking for attr=%s in the CSR"</literal></expr></argument>, <argument pos:start="940:60" pos:end="940:63"><expr pos:start="940:60" pos:end="940:63"><name pos:start="940:60" pos:end="940:63">tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="941:13" pos:end="941:39"><expr pos:start="941:13" pos:end="941:38"><call pos:start="941:13" pos:end="941:38"><name pos:start="941:13" pos:end="941:28">ASN1_OBJECT_free</name><argument_list pos:start="941:29" pos:end="941:38">(<argument pos:start="941:30" pos:end="941:37"><expr pos:start="941:30" pos:end="941:37"><name pos:start="941:30" pos:end="941:37">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block" pos:start="943:13" pos:end="946:15">/*
	     * If there were no attrubutes in the CSR, we can
	     * bail now.
	     */</comment>
	    <if_stmt pos:start="947:13" pos:end="951:13"><if pos:start="947:13" pos:end="951:13">if <condition pos:start="947:16" pos:end="947:38">(<expr pos:start="947:17" pos:end="947:37"><name pos:start="947:17" pos:end="947:29">csr_attr_oids</name> <operator pos:start="947:31" pos:end="947:32">==</operator> <name pos:start="947:34" pos:end="947:37">NULL</name></expr>)</condition> <block pos:start="947:40" pos:end="951:13">{<block_content pos:start="948:17" pos:end="950:50">
		<expr_stmt pos:start="948:17" pos:end="948:95"><expr pos:start="948:17" pos:end="948:94"><call pos:start="948:17" pos:end="948:94"><name pos:start="948:17" pos:end="948:28">EST_LOG_WARN</name><argument_list pos:start="948:29" pos:end="948:94">(<argument pos:start="948:30" pos:end="948:87"><expr pos:start="948:30" pos:end="948:87"><literal type="string" pos:start="948:30" pos:end="948:87">"CSR did not contain any attributes, CSR will be rejected"</literal></expr></argument>, <argument pos:start="948:90" pos:end="948:93"><expr pos:start="948:90" pos:end="948:93"><name pos:start="948:90" pos:end="948:93">tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="949:17" pos:end="949:31"><expr pos:start="949:17" pos:end="949:30"><call pos:start="949:17" pos:end="949:30"><name pos:start="949:17" pos:end="949:20">free</name><argument_list pos:start="949:21" pos:end="949:30">(<argument pos:start="949:22" pos:end="949:29"><expr pos:start="949:22" pos:end="949:29"><name pos:start="949:22" pos:end="949:29">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <return pos:start="950:17" pos:end="950:50">return <expr pos:start="950:24" pos:end="950:49"><operator pos:start="950:24" pos:end="950:24">(</operator><name pos:start="950:25" pos:end="950:48">EST_ERR_CSR_ATTR_MISSING</name><operator pos:start="950:49" pos:end="950:49">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="953:13" pos:end="953:28"><expr pos:start="953:13" pos:end="953:27"><name pos:start="953:13" pos:end="953:23">found_match</name> <operator pos:start="953:25" pos:end="953:25">=</operator> <literal type="number" pos:start="953:27" pos:end="953:27">0</literal></expr>;</expr_stmt>
	    <expr_stmt pos:start="954:13" pos:end="954:38"><expr pos:start="954:13" pos:end="954:37"><name pos:start="954:13" pos:end="954:21">oid_entry</name> <operator pos:start="954:23" pos:end="954:23">=</operator> <name pos:start="954:25" pos:end="954:37">csr_attr_oids</name></expr>;</expr_stmt>
	    <comment type="block" pos:start="955:13" pos:end="957:15">/*
	     * Iterate through the attributes that are in the CSR
	     */</comment>
	    <while pos:start="958:13" pos:end="966:13">while <condition pos:start="958:19" pos:end="958:29">(<expr pos:start="958:20" pos:end="958:28"><name pos:start="958:20" pos:end="958:28">oid_entry</name></expr>)</condition> <block pos:start="958:31" pos:end="966:13">{<block_content pos:start="959:17" pos:end="965:44"> 
		<expr_stmt pos:start="959:17" pos:end="959:73"><expr pos:start="959:17" pos:end="959:72"><call pos:start="959:17" pos:end="959:72"><name pos:start="959:17" pos:end="959:28">EST_LOG_INFO</name><argument_list pos:start="959:29" pos:end="959:72">(<argument pos:start="959:30" pos:end="959:49"><expr pos:start="959:30" pos:end="959:49"><literal type="string" pos:start="959:30" pos:end="959:49">"Comparing %s to %s"</literal></expr></argument>, <argument pos:start="959:52" pos:end="959:55"><expr pos:start="959:52" pos:end="959:55"><name pos:start="959:52" pos:end="959:55">tbuf</name></expr></argument>, <argument pos:start="959:58" pos:end="959:71"><expr pos:start="959:58" pos:end="959:71"><name pos:start="959:58" pos:end="959:71"><name pos:start="959:58" pos:end="959:66">oid_entry</name><operator pos:start="959:67" pos:end="959:68">-&gt;</operator><name pos:start="959:69" pos:end="959:71">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="960:17" pos:end="960:115"><expr pos:start="960:17" pos:end="960:114"><call pos:start="960:17" pos:end="960:114"><name pos:start="960:17" pos:end="960:24">strcmp_s</name><argument_list pos:start="960:25" pos:end="960:114">(<argument pos:start="960:26" pos:end="960:39"><expr pos:start="960:26" pos:end="960:39"><name pos:start="960:26" pos:end="960:39"><name pos:start="960:26" pos:end="960:34">oid_entry</name><operator pos:start="960:35" pos:end="960:36">-&gt;</operator><name pos:start="960:37" pos:end="960:39">oid</name></name></expr></argument>, <argument pos:start="960:42" pos:end="960:94"><expr pos:start="960:42" pos:end="960:94"><operator pos:start="960:42" pos:end="960:42">(</operator><ternary pos:start="960:43" pos:end="960:93"><condition pos:start="960:43" pos:end="960:68"><expr pos:start="960:43" pos:end="960:66"><name pos:start="960:43" pos:end="960:47">a_len</name> <operator pos:start="960:49" pos:end="960:49">&lt;</operator> <name pos:start="960:51" pos:end="960:66">EST_MAX_ATTR_LEN</name></expr> ?</condition><then pos:start="960:70" pos:end="960:74"> <expr pos:start="960:70" pos:end="960:74"><name pos:start="960:70" pos:end="960:74">a_len</name></expr> </then><else pos:start="960:76" pos:end="960:93">: <expr pos:start="960:78" pos:end="960:93"><name pos:start="960:78" pos:end="960:93">EST_MAX_ATTR_LEN</name></expr></else></ternary><operator pos:start="960:94" pos:end="960:94">)</operator></expr></argument>, <argument pos:start="960:97" pos:end="960:100"><expr pos:start="960:97" pos:end="960:100"><name pos:start="960:97" pos:end="960:100">tbuf</name></expr></argument>, <argument pos:start="960:103" pos:end="960:113"><expr pos:start="960:103" pos:end="960:113"><operator pos:start="960:103" pos:end="960:103">&amp;</operator><name pos:start="960:104" pos:end="960:113">comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="961:17" pos:end="964:17"><if pos:start="961:17" pos:end="964:17">if <condition pos:start="961:20" pos:end="961:32">(<expr pos:start="961:21" pos:end="961:31"><operator pos:start="961:21" pos:end="961:21">!</operator><name pos:start="961:22" pos:end="961:31">comparator</name></expr>)</condition> <block pos:start="961:34" pos:end="964:17">{<block_content pos:start="962:21" pos:end="963:26">
		    <expr_stmt pos:start="962:21" pos:end="962:36"><expr pos:start="962:21" pos:end="962:35"><name pos:start="962:21" pos:end="962:31">found_match</name> <operator pos:start="962:33" pos:end="962:33">=</operator> <literal type="number" pos:start="962:35" pos:end="962:35">1</literal></expr>;</expr_stmt>
		    <break pos:start="963:21" pos:end="963:26">break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="965:17" pos:end="965:44"><expr pos:start="965:17" pos:end="965:43"><name pos:start="965:17" pos:end="965:25">oid_entry</name> <operator pos:start="965:27" pos:end="965:27">=</operator> <name pos:start="965:29" pos:end="965:43"><name pos:start="965:29" pos:end="965:37">oid_entry</name><operator pos:start="965:38" pos:end="965:39">-&gt;</operator><name pos:start="965:40" pos:end="965:43">next</name></name></expr>;</expr_stmt>
	    </block_content>}</block></while> 

	    <if_stmt pos:start="968:13" pos:end="973:13"><if pos:start="968:13" pos:end="973:13">if <condition pos:start="968:16" pos:end="968:29">(<expr pos:start="968:17" pos:end="968:28"><operator pos:start="968:17" pos:end="968:17">!</operator><name pos:start="968:18" pos:end="968:28">found_match</name></expr>)</condition> <block pos:start="968:31" pos:end="973:13">{<block_content pos:start="969:17" pos:end="972:50">
		<expr_stmt pos:start="969:17" pos:end="969:93"><expr pos:start="969:17" pos:end="969:92"><call pos:start="969:17" pos:end="969:92"><name pos:start="969:17" pos:end="969:28">EST_LOG_WARN</name><argument_list pos:start="969:29" pos:end="969:92">(<argument pos:start="969:30" pos:end="969:85"><expr pos:start="969:30" pos:end="969:85"><literal type="string" pos:start="969:30" pos:end="969:85">"CSR did not contain %s attribute, CSR will be rejected"</literal></expr></argument>, <argument pos:start="969:88" pos:end="969:91"><expr pos:start="969:88" pos:end="969:91"><name pos:start="969:88" pos:end="969:91">tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt pos:start="970:17" pos:end="970:60"><expr pos:start="970:17" pos:end="970:59"><call pos:start="970:17" pos:end="970:59"><name pos:start="970:17" pos:end="970:44">est_server_free_csr_oid_list</name><argument_list pos:start="970:45" pos:end="970:59">(<argument pos:start="970:46" pos:end="970:58"><expr pos:start="970:46" pos:end="970:58"><name pos:start="970:46" pos:end="970:58">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="971:17" pos:end="971:31"><expr pos:start="971:17" pos:end="971:30"><call pos:start="971:17" pos:end="971:30"><name pos:start="971:17" pos:end="971:20">free</name><argument_list pos:start="971:21" pos:end="971:30">(<argument pos:start="971:22" pos:end="971:29"><expr pos:start="971:22" pos:end="971:29"><name pos:start="971:22" pos:end="971:29">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <return pos:start="972:17" pos:end="972:50">return <expr pos:start="972:24" pos:end="972:49"><operator pos:start="972:24" pos:end="972:24">(</operator><name pos:start="972:25" pos:end="972:48">EST_ERR_CSR_ATTR_MISSING</name><operator pos:start="972:49" pos:end="972:49">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <break pos:start="974:13" pos:end="974:18">break;</break>
	<default pos:start="975:9" pos:end="975:16">default:</default>
	    <comment type="block" pos:start="976:13" pos:end="976:78">/* have to adjust string pointer here, move on to the next item */</comment>
	    <expr_stmt pos:start="977:13" pos:end="977:27"><expr pos:start="977:13" pos:end="977:26"><name pos:start="977:13" pos:end="977:19">der_ptr</name> <operator pos:start="977:21" pos:end="977:22">+=</operator> <name pos:start="977:24" pos:end="977:26">len</name></expr>;</expr_stmt>
	    <break pos:start="978:13" pos:end="978:18">break;</break>
	<case pos:start="979:9" pos:end="979:24">case <expr pos:start="979:14" pos:end="979:23"><name pos:start="979:14" pos:end="979:23">V_ASN1_SET</name></expr>:</case>
	<case pos:start="980:9" pos:end="980:29">case <expr pos:start="980:14" pos:end="980:28"><name pos:start="980:14" pos:end="980:28">V_ASN1_SEQUENCE</name></expr>:</case>
	    <break pos:start="981:13" pos:end="981:18">break;</break>
	</block_content>}</block></switch>
	<expr_stmt pos:start="983:9" pos:end="983:54"><expr pos:start="983:9" pos:end="983:53"><name pos:start="983:9" pos:end="983:15">out_len</name> <operator pos:start="983:17" pos:end="983:17">=</operator> <name pos:start="983:19" pos:end="983:30">out_len_save</name> <operator pos:start="983:32" pos:end="983:32">-</operator> <operator pos:start="983:34" pos:end="983:34">(</operator><name pos:start="983:35" pos:end="983:41">der_ptr</name> <operator pos:start="983:43" pos:end="983:43">-</operator> <name pos:start="983:45" pos:end="983:52">save_ptr</name><operator pos:start="983:53" pos:end="983:53">)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    
    <comment type="block" pos:start="986:5" pos:end="989:7">/*
     * One file check to ensure we didn't missing something when parsing
     * the locally configured CSR attributes.
     */</comment>
    <if_stmt pos:start="990:5" pos:end="995:5"><if pos:start="990:5" pos:end="995:5">if <condition pos:start="990:8" pos:end="990:21">(<expr pos:start="990:9" pos:end="990:20"><name pos:start="990:9" pos:end="990:15">out_len</name> <operator pos:start="990:17" pos:end="990:18">!=</operator> <literal type="number" pos:start="990:20" pos:end="990:20">0</literal></expr>)</condition> <block pos:start="990:23" pos:end="995:5">{<block_content pos:start="991:9" pos:end="994:38">
	<expr_stmt pos:start="991:9" pos:end="991:57"><expr pos:start="991:9" pos:end="991:56"><call pos:start="991:9" pos:end="991:56"><name pos:start="991:9" pos:end="991:19">EST_LOG_ERR</name><argument_list pos:start="991:20" pos:end="991:56">(<argument pos:start="991:21" pos:end="991:46"><expr pos:start="991:21" pos:end="991:46"><literal type="string" pos:start="991:21" pos:end="991:46">"DER length not zero (%d)"</literal></expr></argument>, <argument pos:start="991:49" pos:end="991:55"><expr pos:start="991:49" pos:end="991:55"><name pos:start="991:49" pos:end="991:55">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="992:9" pos:end="992:52"><expr pos:start="992:9" pos:end="992:51"><call pos:start="992:9" pos:end="992:51"><name pos:start="992:9" pos:end="992:36">est_server_free_csr_oid_list</name><argument_list pos:start="992:37" pos:end="992:51">(<argument pos:start="992:38" pos:end="992:50"><expr pos:start="992:38" pos:end="992:50"><name pos:start="992:38" pos:end="992:50">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="993:9" pos:end="993:23"><expr pos:start="993:9" pos:end="993:22"><call pos:start="993:9" pos:end="993:22"><name pos:start="993:9" pos:end="993:12">free</name><argument_list pos:start="993:13" pos:end="993:22">(<argument pos:start="993:14" pos:end="993:21"><expr pos:start="993:14" pos:end="993:21"><name pos:start="993:14" pos:end="993:21">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="994:9" pos:end="994:38">return <expr pos:start="994:16" pos:end="994:37"><operator pos:start="994:16" pos:end="994:16">(</operator><name pos:start="994:17" pos:end="994:36">EST_ERR_BAD_ASN1_HEX</name><operator pos:start="994:37" pos:end="994:37">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="997:5" pos:end="1000:7">/*
     * If we're lucky enough to make it this far, then it means all the
     * locally configured CSR attributes were found in the client's CSR.
     */</comment>
    <expr_stmt pos:start="1001:5" pos:end="1001:48"><expr pos:start="1001:5" pos:end="1001:47"><call pos:start="1001:5" pos:end="1001:47"><name pos:start="1001:5" pos:end="1001:32">est_server_free_csr_oid_list</name><argument_list pos:start="1001:33" pos:end="1001:47">(<argument pos:start="1001:34" pos:end="1001:46"><expr pos:start="1001:34" pos:end="1001:46"><name pos:start="1001:34" pos:end="1001:46">csr_attr_oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1002:5" pos:end="1002:19"><expr pos:start="1002:5" pos:end="1002:18"><call pos:start="1002:5" pos:end="1002:18"><name pos:start="1002:5" pos:end="1002:8">free</name><argument_list pos:start="1002:9" pos:end="1002:18">(<argument pos:start="1002:10" pos:end="1002:17"><expr pos:start="1002:10" pos:end="1002:17"><name pos:start="1002:10" pos:end="1002:17">der_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1003:5" pos:end="1003:26">return <expr pos:start="1003:12" pos:end="1003:25"><operator pos:start="1003:12" pos:end="1003:12">(</operator><name pos:start="1003:13" pos:end="1003:24">EST_ERR_NONE</name><operator pos:start="1003:25" pos:end="1003:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1005:1" pos:end="1008:3">/*
 * This function is used by the server to process an incoming
 * Simple Enroll request from the client.
 */</comment>
<function pos:start="1009:1" pos:end="1186:1"><type pos:start="1009:1" pos:end="1009:16"><specifier pos:start="1009:1" pos:end="1009:6">static</specifier> <name pos:start="1009:8" pos:end="1009:16">EST_ERROR</name></type> <name pos:start="1009:18" pos:end="1009:41">est_handle_simple_enroll</name> <parameter_list pos:start="1009:43" pos:end="1011:72">(<parameter pos:start="1009:44" pos:end="1009:55"><decl pos:start="1009:44" pos:end="1009:55"><type pos:start="1009:44" pos:end="1009:55"><name pos:start="1009:44" pos:end="1009:50">EST_CTX</name> <modifier pos:start="1009:52" pos:end="1009:52">*</modifier></type><name pos:start="1009:53" pos:end="1009:55">ctx</name></decl></parameter>, <parameter pos:start="1009:58" pos:end="1009:71"><decl pos:start="1009:58" pos:end="1009:71"><type pos:start="1009:58" pos:end="1009:71"><name pos:start="1009:58" pos:end="1009:61">void</name> <modifier pos:start="1009:63" pos:end="1009:63">*</modifier></type><name pos:start="1009:64" pos:end="1009:71">http_ctx</name></decl></parameter>, <parameter pos:start="1009:74" pos:end="1009:81"><decl pos:start="1009:74" pos:end="1009:81"><type pos:start="1009:74" pos:end="1009:81"><name pos:start="1009:74" pos:end="1009:76">SSL</name> <modifier pos:start="1009:78" pos:end="1009:78">*</modifier></type><name pos:start="1009:79" pos:end="1009:81">ssl</name></decl></parameter>,
                                           <parameter pos:start="1010:44" pos:end="1010:57"><decl pos:start="1010:44" pos:end="1010:57"><type pos:start="1010:44" pos:end="1010:57"><specifier pos:start="1010:44" pos:end="1010:48">const</specifier> <name pos:start="1010:50" pos:end="1010:53">char</name> <modifier pos:start="1010:55" pos:end="1010:55">*</modifier></type><name pos:start="1010:56" pos:end="1010:57">ct</name></decl></parameter>, <parameter pos:start="1010:60" pos:end="1010:69"><decl pos:start="1010:60" pos:end="1010:69"><type pos:start="1010:60" pos:end="1010:69"><name pos:start="1010:60" pos:end="1010:63">char</name> <modifier pos:start="1010:65" pos:end="1010:65">*</modifier></type><name pos:start="1010:66" pos:end="1010:69">body</name></decl></parameter>, <parameter pos:start="1010:72" pos:end="1010:83"><decl pos:start="1010:72" pos:end="1010:83"><type pos:start="1010:72" pos:end="1010:83"><name pos:start="1010:72" pos:end="1010:74">int</name></type> <name pos:start="1010:76" pos:end="1010:83">body_len</name></decl></parameter>,
                                           <parameter pos:start="1011:44" pos:end="1011:57"><decl pos:start="1011:44" pos:end="1011:57"><type pos:start="1011:44" pos:end="1011:57"><name pos:start="1011:44" pos:end="1011:47">char</name> <modifier pos:start="1011:49" pos:end="1011:49">*</modifier></type><name pos:start="1011:50" pos:end="1011:57">path_seg</name></decl></parameter>, <parameter pos:start="1011:60" pos:end="1011:71"><decl pos:start="1011:60" pos:end="1011:71"><type pos:start="1011:60" pos:end="1011:71"><name pos:start="1011:60" pos:end="1011:62">int</name></type> <name pos:start="1011:64" pos:end="1011:71">reenroll</name></decl></parameter>)</parameter_list>
<block pos:start="1012:1" pos:end="1186:1">{<block_content pos:start="1013:5" pos:end="1185:26">
    <decl_stmt pos:start="1013:5" pos:end="1013:21"><decl pos:start="1013:5" pos:end="1013:10"><type pos:start="1013:5" pos:end="1013:7"><name pos:start="1013:5" pos:end="1013:7">int</name></type> <name pos:start="1013:9" pos:end="1013:10">rv</name></decl>, <decl pos:start="1013:13" pos:end="1013:20"><type ref="prev" pos:start="1013:5" pos:end="1013:7"/><name pos:start="1013:13" pos:end="1013:20">cert_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1014:5" pos:end="1014:65"><decl pos:start="1014:5" pos:end="1014:64"><type pos:start="1014:5" pos:end="1014:26"><name pos:start="1014:5" pos:end="1014:24"><name pos:start="1014:5" pos:end="1014:10">struct</name> <name pos:start="1014:12" pos:end="1014:24">mg_connection</name></name> <modifier pos:start="1014:26" pos:end="1014:26">*</modifier></type><name pos:start="1014:27" pos:end="1014:30">conn</name> <init pos:start="1014:32" pos:end="1014:64">= <expr pos:start="1014:34" pos:end="1014:64"><operator pos:start="1014:34" pos:end="1014:34">(</operator>struct <name pos:start="1014:42" pos:end="1014:54">mg_connection</name><operator pos:start="1014:55" pos:end="1014:55">*</operator><operator pos:start="1014:56" pos:end="1014:56">)</operator><name pos:start="1014:57" pos:end="1014:64">http_ctx</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1015:5" pos:end="1015:24"><decl pos:start="1015:5" pos:end="1015:23"><type pos:start="1015:5" pos:end="1015:19"><name pos:start="1015:5" pos:end="1015:12">unsigned</name> <name pos:start="1015:14" pos:end="1015:17">char</name> <modifier pos:start="1015:19" pos:end="1015:19">*</modifier></type><name pos:start="1015:20" pos:end="1015:23">cert</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1016:5" pos:end="1016:36"><decl pos:start="1016:5" pos:end="1016:35"><type pos:start="1016:5" pos:end="1016:8"><name pos:start="1016:5" pos:end="1016:8">char</name></type> <name pos:start="1016:10" pos:end="1016:35"><name pos:start="1016:10" pos:end="1016:17">http_hdr</name><index pos:start="1016:18" pos:end="1016:35">[<expr pos:start="1016:19" pos:end="1016:34"><name pos:start="1016:19" pos:end="1016:34">EST_HTTP_HDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="1017:5" pos:end="1017:15"><decl pos:start="1017:5" pos:end="1017:14"><type pos:start="1017:5" pos:end="1017:7"><name pos:start="1017:5" pos:end="1017:7">int</name></type> <name pos:start="1017:9" pos:end="1017:14">hdrlen</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1018:5" pos:end="1018:20"><decl pos:start="1018:5" pos:end="1018:19"><type pos:start="1018:5" pos:end="1018:10"><name pos:start="1018:5" pos:end="1018:8">X509</name> <modifier pos:start="1018:10" pos:end="1018:10">*</modifier></type><name pos:start="1018:11" pos:end="1018:19">peer_cert</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1019:5" pos:end="1019:25"><decl pos:start="1019:5" pos:end="1019:24"><type pos:start="1019:5" pos:end="1019:14"><name pos:start="1019:5" pos:end="1019:12">X509_REQ</name> <modifier pos:start="1019:14" pos:end="1019:14">*</modifier></type><name pos:start="1019:15" pos:end="1019:17">csr</name> <init pos:start="1019:19" pos:end="1019:24">= <expr pos:start="1019:21" pos:end="1019:24"><name pos:start="1019:21" pos:end="1019:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1020:5" pos:end="1020:25"><decl pos:start="1020:5" pos:end="1020:24"><type pos:start="1020:5" pos:end="1020:7"><name pos:start="1020:5" pos:end="1020:7">int</name></type> <name pos:start="1020:9" pos:end="1020:20">client_is_ra</name> <init pos:start="1020:22" pos:end="1020:24">= <expr pos:start="1020:24" pos:end="1020:24"><literal type="number" pos:start="1020:24" pos:end="1020:24">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="1022:5" pos:end="1025:5"><if pos:start="1022:5" pos:end="1025:5">if <condition pos:start="1022:8" pos:end="1022:48">(<expr pos:start="1022:9" pos:end="1022:47"><operator pos:start="1022:9" pos:end="1022:9">!</operator><name pos:start="1022:10" pos:end="1022:17">reenroll</name> <operator pos:start="1022:19" pos:end="1022:20">&amp;&amp;</operator> <operator pos:start="1022:22" pos:end="1022:22">!</operator><name pos:start="1022:23" pos:end="1022:47"><name pos:start="1022:23" pos:end="1022:25">ctx</name><operator pos:start="1022:26" pos:end="1022:27">-&gt;</operator><name pos:start="1022:28" pos:end="1022:47">est_enroll_pkcs10_cb</name></name></expr>)</condition> <block pos:start="1022:50" pos:end="1025:5">{<block_content pos:start="1023:9" pos:end="1024:39">
	<expr_stmt pos:start="1023:9" pos:end="1023:48"><expr pos:start="1023:9" pos:end="1023:47"><call pos:start="1023:9" pos:end="1023:47"><name pos:start="1023:9" pos:end="1023:19">EST_LOG_ERR</name><argument_list pos:start="1023:20" pos:end="1023:47">(<argument pos:start="1023:21" pos:end="1023:46"><expr pos:start="1023:21" pos:end="1023:46"><literal type="string" pos:start="1023:21" pos:end="1023:46">"Null enrollment callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1024:9" pos:end="1024:39">return <expr pos:start="1024:16" pos:end="1024:38"><operator pos:start="1024:16" pos:end="1024:16">(</operator><name pos:start="1024:17" pos:end="1024:37">EST_ERR_NULL_CALLBACK</name><operator pos:start="1024:38" pos:end="1024:38">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1027:5" pos:end="1030:5"><if pos:start="1027:5" pos:end="1030:5">if <condition pos:start="1027:8" pos:end="1027:49">(<expr pos:start="1027:9" pos:end="1027:48"><name pos:start="1027:9" pos:end="1027:16">reenroll</name> <operator pos:start="1027:18" pos:end="1027:19">&amp;&amp;</operator> <operator pos:start="1027:21" pos:end="1027:21">!</operator><name pos:start="1027:22" pos:end="1027:48"><name pos:start="1027:22" pos:end="1027:24">ctx</name><operator pos:start="1027:25" pos:end="1027:26">-&gt;</operator><name pos:start="1027:27" pos:end="1027:48">est_reenroll_pkcs10_cb</name></name></expr>)</condition> <block pos:start="1027:51" pos:end="1030:5">{<block_content pos:start="1028:9" pos:end="1029:39">
	<expr_stmt pos:start="1028:9" pos:end="1028:46"><expr pos:start="1028:9" pos:end="1028:45"><call pos:start="1028:9" pos:end="1028:45"><name pos:start="1028:9" pos:end="1028:19">EST_LOG_ERR</name><argument_list pos:start="1028:20" pos:end="1028:45">(<argument pos:start="1028:21" pos:end="1028:44"><expr pos:start="1028:21" pos:end="1028:44"><literal type="string" pos:start="1028:21" pos:end="1028:44">"Null reenroll callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1029:9" pos:end="1029:39">return <expr pos:start="1029:16" pos:end="1029:38"><operator pos:start="1029:16" pos:end="1029:16">(</operator><name pos:start="1029:17" pos:end="1029:37">EST_ERR_NULL_CALLBACK</name><operator pos:start="1029:38" pos:end="1029:38">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1032:5" pos:end="1034:7">/*
     * Make sure the client has sent us a PKCS10 CSR request
     */</comment>
    <if_stmt pos:start="1035:5" pos:end="1037:5"><if pos:start="1035:5" pos:end="1037:5">if <condition pos:start="1035:8" pos:end="1035:46">(<expr pos:start="1035:9" pos:end="1035:45"><call pos:start="1035:9" pos:end="1035:45"><name pos:start="1035:9" pos:end="1035:15">strncmp</name><argument_list pos:start="1035:16" pos:end="1035:45">(<argument pos:start="1035:17" pos:end="1035:18"><expr pos:start="1035:17" pos:end="1035:18"><name pos:start="1035:17" pos:end="1035:18">ct</name></expr></argument>, <argument pos:start="1035:21" pos:end="1035:40"><expr pos:start="1035:21" pos:end="1035:40"><literal type="string" pos:start="1035:21" pos:end="1035:40">"application/pkcs10"</literal></expr></argument>, <argument pos:start="1035:43" pos:end="1035:44"><expr pos:start="1035:43" pos:end="1035:44"><literal type="number" pos:start="1035:43" pos:end="1035:44">18</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1035:48" pos:end="1037:5">{<block_content pos:start="1036:9" pos:end="1036:42">
        <return pos:start="1036:9" pos:end="1036:42">return <expr pos:start="1036:16" pos:end="1036:41"><operator pos:start="1036:16" pos:end="1036:16">(</operator><name pos:start="1036:17" pos:end="1036:40">EST_ERR_BAD_CONTENT_TYPE</name><operator pos:start="1036:41" pos:end="1036:41">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1039:5" pos:end="1041:7">/*
     * Authenticate the client
     */</comment>
    <switch pos:start="1042:5" pos:end="1058:5">switch <condition pos:start="1042:12" pos:end="1042:68">(<expr pos:start="1042:13" pos:end="1042:67"><call pos:start="1042:13" pos:end="1042:67"><name pos:start="1042:13" pos:end="1042:27">est_enroll_auth</name><argument_list pos:start="1042:28" pos:end="1042:67">(<argument pos:start="1042:29" pos:end="1042:31"><expr pos:start="1042:29" pos:end="1042:31"><name pos:start="1042:29" pos:end="1042:31">ctx</name></expr></argument>, <argument pos:start="1042:34" pos:end="1042:41"><expr pos:start="1042:34" pos:end="1042:41"><name pos:start="1042:34" pos:end="1042:41">http_ctx</name></expr></argument>, <argument pos:start="1042:44" pos:end="1042:46"><expr pos:start="1042:44" pos:end="1042:46"><name pos:start="1042:44" pos:end="1042:46">ssl</name></expr></argument>, <argument pos:start="1042:49" pos:end="1042:56"><expr pos:start="1042:49" pos:end="1042:56"><name pos:start="1042:49" pos:end="1042:56">path_seg</name></expr></argument>, <argument pos:start="1042:59" pos:end="1042:66"><expr pos:start="1042:59" pos:end="1042:66"><name pos:start="1042:59" pos:end="1042:66">reenroll</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1042:70" pos:end="1058:5">{<block_content pos:start="1043:5" pos:end="1057:14">
    <case pos:start="1043:5" pos:end="1043:23">case <expr pos:start="1043:10" pos:end="1043:22"><name pos:start="1043:10" pos:end="1043:22">EST_HTTP_AUTH</name></expr>:</case>
    <case pos:start="1044:5" pos:end="1044:22">case <expr pos:start="1044:10" pos:end="1044:21"><name pos:start="1044:10" pos:end="1044:21">EST_SRP_AUTH</name></expr>:</case>
    <case pos:start="1045:5" pos:end="1045:23">case <expr pos:start="1045:10" pos:end="1045:22"><name pos:start="1045:10" pos:end="1045:22">EST_CERT_AUTH</name></expr>:</case>
	<comment type="block" pos:start="1046:9" pos:end="1049:11">/*
	 * this means the user was authorized, either through
	 * HTTP authoriztion or certificate authorization
	 */</comment>
        <break pos:start="1050:9" pos:end="1050:14">break;</break>
    <case pos:start="1051:5" pos:end="1051:31">case <expr pos:start="1051:10" pos:end="1051:30"><name pos:start="1051:10" pos:end="1051:30">EST_HTTP_AUTH_PENDING</name></expr>:</case>
        <return pos:start="1052:9" pos:end="1052:38">return <expr pos:start="1052:16" pos:end="1052:37"><operator pos:start="1052:16" pos:end="1052:16">(</operator><name pos:start="1052:17" pos:end="1052:36">EST_ERR_AUTH_PENDING</name><operator pos:start="1052:37" pos:end="1052:37">)</operator></expr>;</return>
        <break pos:start="1053:9" pos:end="1053:14">break;</break>
    <case pos:start="1054:5" pos:end="1054:26">case <expr pos:start="1054:10" pos:end="1054:25"><name pos:start="1054:10" pos:end="1054:25">EST_UNAUTHORIZED</name></expr>:</case>
    <default pos:start="1055:5" pos:end="1055:12">default:</default>
        <return pos:start="1056:9" pos:end="1056:35">return <expr pos:start="1056:16" pos:end="1056:34"><operator pos:start="1056:16" pos:end="1056:16">(</operator><name pos:start="1056:17" pos:end="1056:33">EST_ERR_AUTH_FAIL</name><operator pos:start="1056:34" pos:end="1056:34">)</operator></expr>;</return>
        <break pos:start="1057:9" pos:end="1057:14">break;</break>
    </block_content>}</block></switch>

    <comment type="block" pos:start="1060:5" pos:end="1062:7">/*
     * Parse the PKCS10 CSR from the client
     */</comment>
    <expr_stmt pos:start="1063:5" pos:end="1063:63"><expr pos:start="1063:5" pos:end="1063:62"><name pos:start="1063:5" pos:end="1063:7">csr</name> <operator pos:start="1063:9" pos:end="1063:9">=</operator> <call pos:start="1063:11" pos:end="1063:62"><name pos:start="1063:11" pos:end="1063:30">est_server_parse_csr</name><argument_list pos:start="1063:31" pos:end="1063:62">(<argument pos:start="1063:32" pos:end="1063:51"><expr pos:start="1063:32" pos:end="1063:51"><operator pos:start="1063:32" pos:end="1063:32">(</operator><name pos:start="1063:33" pos:end="1063:40">unsigned</name> <name pos:start="1063:42" pos:end="1063:45">char</name><operator pos:start="1063:46" pos:end="1063:46">*</operator><operator pos:start="1063:47" pos:end="1063:47">)</operator><name pos:start="1063:48" pos:end="1063:51">body</name></expr></argument>, <argument pos:start="1063:54" pos:end="1063:61"><expr pos:start="1063:54" pos:end="1063:61"><name pos:start="1063:54" pos:end="1063:61">body_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1064:5" pos:end="1067:5"><if pos:start="1064:5" pos:end="1067:5">if <condition pos:start="1064:8" pos:end="1064:13">(<expr pos:start="1064:9" pos:end="1064:12"><operator pos:start="1064:9" pos:end="1064:9">!</operator><name pos:start="1064:10" pos:end="1064:12">csr</name></expr>)</condition> <block pos:start="1064:15" pos:end="1067:5">{<block_content pos:start="1065:9" pos:end="1066:36">
	<expr_stmt pos:start="1065:9" pos:end="1065:73"><expr pos:start="1065:9" pos:end="1065:72"><call pos:start="1065:9" pos:end="1065:72"><name pos:start="1065:9" pos:end="1065:19">EST_LOG_ERR</name><argument_list pos:start="1065:20" pos:end="1065:72">(<argument pos:start="1065:21" pos:end="1065:71"><expr pos:start="1065:21" pos:end="1065:71"><literal type="string" pos:start="1065:21" pos:end="1065:71">"Unable to parse the PKCS10 CSR sent by the client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1066:9" pos:end="1066:36">return <expr pos:start="1066:16" pos:end="1066:35"><operator pos:start="1066:16" pos:end="1066:16">(</operator><name pos:start="1066:17" pos:end="1066:34">EST_ERR_BAD_PKCS10</name><operator pos:start="1066:35" pos:end="1066:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="1069:5" pos:end="1071:7">/*
     * Perform a sanity check on the CSR
     */</comment>
    <if_stmt pos:start="1072:5" pos:end="1076:5"><if pos:start="1072:5" pos:end="1076:5">if <condition pos:start="1072:8" pos:end="1072:34">(<expr pos:start="1072:9" pos:end="1072:33"><call pos:start="1072:9" pos:end="1072:33"><name pos:start="1072:9" pos:end="1072:28">est_server_check_csr</name><argument_list pos:start="1072:29" pos:end="1072:33">(<argument pos:start="1072:30" pos:end="1072:32"><expr pos:start="1072:30" pos:end="1072:32"><name pos:start="1072:30" pos:end="1072:32">csr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1072:36" pos:end="1076:5">{<block_content pos:start="1073:9" pos:end="1075:36">
	<expr_stmt pos:start="1073:9" pos:end="1073:73"><expr pos:start="1073:9" pos:end="1073:72"><call pos:start="1073:9" pos:end="1073:72"><name pos:start="1073:9" pos:end="1073:19">EST_LOG_ERR</name><argument_list pos:start="1073:20" pos:end="1073:72">(<argument pos:start="1073:21" pos:end="1073:71"><expr pos:start="1073:21" pos:end="1073:71"><literal type="string" pos:start="1073:21" pos:end="1073:71">"PKCS10 CSR sent by the client failed sanity check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1074:9" pos:end="1074:27"><expr pos:start="1074:9" pos:end="1074:26"><call pos:start="1074:9" pos:end="1074:26"><name pos:start="1074:9" pos:end="1074:21">X509_REQ_free</name><argument_list pos:start="1074:22" pos:end="1074:26">(<argument pos:start="1074:23" pos:end="1074:25"><expr pos:start="1074:23" pos:end="1074:25"><name pos:start="1074:23" pos:end="1074:25">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1075:9" pos:end="1075:36">return <expr pos:start="1075:16" pos:end="1075:35"><operator pos:start="1075:16" pos:end="1075:16">(</operator><name pos:start="1075:17" pos:end="1075:34">EST_ERR_BAD_PKCS10</name><operator pos:start="1075:35" pos:end="1075:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1078:5" pos:end="1082:7">/*
     * Get the peer certificate if available.  This
     * identifies the client. The CA may desire
     * this information.
     */</comment>
    <expr_stmt pos:start="1083:5" pos:end="1083:46"><expr pos:start="1083:5" pos:end="1083:45"><name pos:start="1083:5" pos:end="1083:13">peer_cert</name> <operator pos:start="1083:15" pos:end="1083:15">=</operator> <call pos:start="1083:17" pos:end="1083:45"><name pos:start="1083:17" pos:end="1083:40">SSL_get_peer_certificate</name><argument_list pos:start="1083:41" pos:end="1083:45">(<argument pos:start="1083:42" pos:end="1083:44"><expr pos:start="1083:42" pos:end="1083:44"><name pos:start="1083:42" pos:end="1083:44">ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1085:5" pos:end="1087:5"><if pos:start="1085:5" pos:end="1087:5">if <condition pos:start="1085:8" pos:end="1085:18">(<expr pos:start="1085:9" pos:end="1085:17"><name pos:start="1085:9" pos:end="1085:17">peer_cert</name></expr>)</condition> <block pos:start="1085:20" pos:end="1087:5">{<block_content pos:start="1086:9" pos:end="1086:51">
	<expr_stmt pos:start="1086:9" pos:end="1086:51"><expr pos:start="1086:9" pos:end="1086:50"><name pos:start="1086:9" pos:end="1086:20">client_is_ra</name> <operator pos:start="1086:22" pos:end="1086:22">=</operator> <call pos:start="1086:24" pos:end="1086:50"><name pos:start="1086:24" pos:end="1086:38">est_check_cmcRA</name> <argument_list pos:start="1086:40" pos:end="1086:50">(<argument pos:start="1086:41" pos:end="1086:49"><expr pos:start="1086:41" pos:end="1086:49"><name pos:start="1086:41" pos:end="1086:49">peer_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1088:5" pos:end="1088:58"><expr pos:start="1088:5" pos:end="1088:57"><call pos:start="1088:5" pos:end="1088:57"><name pos:start="1088:5" pos:end="1088:16">EST_LOG_INFO</name><argument_list pos:start="1088:17" pos:end="1088:57">(<argument pos:start="1088:18" pos:end="1088:42"><expr pos:start="1088:18" pos:end="1088:42"><literal type="string" pos:start="1088:18" pos:end="1088:42">"id-kp-cmcRA present: %d"</literal></expr></argument>, <argument pos:start="1088:45" pos:end="1088:56"><expr pos:start="1088:45" pos:end="1088:56"><name pos:start="1088:45" pos:end="1088:56">client_is_ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1090:5" pos:end="1094:7">/*
     * Do the PoP check (Proof of Possession).  The challenge password
     * in the pkcs10 request should match the TLS unique ID.
     * The PoP check is not performend when the client is an RA.
     */</comment>
    <if_stmt pos:start="1095:5" pos:end="1102:5"><if pos:start="1095:5" pos:end="1102:5">if <condition pos:start="1095:8" pos:end="1095:22">(<expr pos:start="1095:9" pos:end="1095:21"><operator pos:start="1095:9" pos:end="1095:9">!</operator><name pos:start="1095:10" pos:end="1095:21">client_is_ra</name></expr>)</condition> <block pos:start="1095:24" pos:end="1102:5">{<block_content pos:start="1096:9" pos:end="1101:9">
	<expr_stmt pos:start="1096:9" pos:end="1096:45"><expr pos:start="1096:9" pos:end="1096:44"><name pos:start="1096:9" pos:end="1096:10">rv</name> <operator pos:start="1096:12" pos:end="1096:12">=</operator> <call pos:start="1096:14" pos:end="1096:44"><name pos:start="1096:14" pos:end="1096:29">est_tls_uid_auth</name><argument_list pos:start="1096:30" pos:end="1096:44">(<argument pos:start="1096:31" pos:end="1096:33"><expr pos:start="1096:31" pos:end="1096:33"><name pos:start="1096:31" pos:end="1096:33">ctx</name></expr></argument>, <argument pos:start="1096:36" pos:end="1096:38"><expr pos:start="1096:36" pos:end="1096:38"><name pos:start="1096:36" pos:end="1096:38">ssl</name></expr></argument>, <argument pos:start="1096:41" pos:end="1096:43"><expr pos:start="1096:41" pos:end="1096:43"><name pos:start="1096:41" pos:end="1096:43">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1097:9" pos:end="1101:9"><if pos:start="1097:9" pos:end="1101:9">if <condition pos:start="1097:12" pos:end="1097:31">(<expr pos:start="1097:13" pos:end="1097:30"><name pos:start="1097:13" pos:end="1097:14">rv</name> <operator pos:start="1097:16" pos:end="1097:17">!=</operator> <name pos:start="1097:19" pos:end="1097:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1097:33" pos:end="1101:9">{<block_content pos:start="1098:13" pos:end="1100:46">
	    <expr_stmt pos:start="1098:13" pos:end="1098:31"><expr pos:start="1098:13" pos:end="1098:30"><call pos:start="1098:13" pos:end="1098:30"><name pos:start="1098:13" pos:end="1098:25">X509_REQ_free</name><argument_list pos:start="1098:26" pos:end="1098:30">(<argument pos:start="1098:27" pos:end="1098:29"><expr pos:start="1098:27" pos:end="1098:29"><name pos:start="1098:27" pos:end="1098:29">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="1099:13" pos:end="1099:33"><expr pos:start="1099:13" pos:end="1099:32"><call pos:start="1099:13" pos:end="1099:32"><name pos:start="1099:13" pos:end="1099:21">X509_free</name><argument_list pos:start="1099:22" pos:end="1099:32">(<argument pos:start="1099:23" pos:end="1099:31"><expr pos:start="1099:23" pos:end="1099:31"><name pos:start="1099:23" pos:end="1099:31">peer_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1100:13" pos:end="1100:46">return <expr pos:start="1100:20" pos:end="1100:45"><operator pos:start="1100:20" pos:end="1100:20">(</operator><name pos:start="1100:21" pos:end="1100:44">EST_ERR_AUTH_FAIL_TLSUID</name><operator pos:start="1100:45" pos:end="1100:45">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt> 
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1104:5" pos:end="1107:7">/*
     * Check if we need to ensure the client included all the
     * CSR attributes required by the CA.
     */</comment>
    <if_stmt pos:start="1108:5" pos:end="1114:5"><if pos:start="1108:5" pos:end="1114:5">if <condition pos:start="1108:8" pos:end="1108:30">(<expr pos:start="1108:9" pos:end="1108:29"><name pos:start="1108:9" pos:end="1108:29"><name pos:start="1108:9" pos:end="1108:11">ctx</name><operator pos:start="1108:12" pos:end="1108:13">-&gt;</operator><name pos:start="1108:14" pos:end="1108:29">enforce_csrattrs</name></name></expr>)</condition> <block pos:start="1108:32" pos:end="1114:5">{<block_content pos:start="1109:9" pos:end="1113:9">
	<if_stmt pos:start="1109:9" pos:end="1113:9"><if pos:start="1109:9" pos:end="1113:9">if <condition pos:start="1109:12" pos:end="1109:81">(<expr pos:start="1109:13" pos:end="1109:80"><name pos:start="1109:13" pos:end="1109:24">EST_ERR_NONE</name> <operator pos:start="1109:26" pos:end="1109:27">!=</operator> <call pos:start="1109:29" pos:end="1109:80"><name pos:start="1109:29" pos:end="1109:59">est_server_all_csrattrs_present</name><argument_list pos:start="1109:60" pos:end="1109:80">(<argument pos:start="1109:61" pos:end="1109:63"><expr pos:start="1109:61" pos:end="1109:63"><name pos:start="1109:61" pos:end="1109:63">ctx</name></expr></argument>, <argument pos:start="1109:66" pos:end="1109:69"><expr pos:start="1109:66" pos:end="1109:69"><name pos:start="1109:66" pos:end="1109:69">body</name></expr></argument>, <argument pos:start="1109:72" pos:end="1109:79"><expr pos:start="1109:72" pos:end="1109:79"><name pos:start="1109:72" pos:end="1109:79">body_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1109:83" pos:end="1113:9">{<block_content pos:start="1110:13" pos:end="1112:46">
	    <expr_stmt pos:start="1110:13" pos:end="1110:31"><expr pos:start="1110:13" pos:end="1110:30"><call pos:start="1110:13" pos:end="1110:30"><name pos:start="1110:13" pos:end="1110:25">X509_REQ_free</name><argument_list pos:start="1110:26" pos:end="1110:30">(<argument pos:start="1110:27" pos:end="1110:29"><expr pos:start="1110:27" pos:end="1110:29"><name pos:start="1110:27" pos:end="1110:29">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="1111:13" pos:end="1111:33"><expr pos:start="1111:13" pos:end="1111:32"><call pos:start="1111:13" pos:end="1111:32"><name pos:start="1111:13" pos:end="1111:21">X509_free</name><argument_list pos:start="1111:22" pos:end="1111:32">(<argument pos:start="1111:23" pos:end="1111:31"><expr pos:start="1111:23" pos:end="1111:31"><name pos:start="1111:23" pos:end="1111:31">peer_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1112:13" pos:end="1112:46">return <expr pos:start="1112:20" pos:end="1112:45"><operator pos:start="1112:20" pos:end="1112:20">(</operator><name pos:start="1112:21" pos:end="1112:44">EST_ERR_CSR_ATTR_MISSING</name><operator pos:start="1112:45" pos:end="1112:45">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1116:5" pos:end="1117:40">/* body now points to the pkcs10 data, pass
     * this to the enrollment routine */</comment>
    <if_stmt pos:start="1118:5" pos:end="1128:5"><if pos:start="1118:5" pos:end="1123:5">if <condition pos:start="1118:8" pos:end="1118:17">(<expr pos:start="1118:9" pos:end="1118:16"><name pos:start="1118:9" pos:end="1118:16">reenroll</name></expr>)</condition> <block pos:start="1118:19" pos:end="1123:5">{<block_content pos:start="1119:9" pos:end="1122:65">
        <expr_stmt pos:start="1119:9" pos:end="1122:65"><expr pos:start="1119:9" pos:end="1122:64"><name pos:start="1119:9" pos:end="1119:10">rv</name> <operator pos:start="1119:12" pos:end="1119:12">=</operator> <call pos:start="1119:14" pos:end="1122:64"><name pos:start="1119:14" pos:end="1119:40"><name pos:start="1119:14" pos:end="1119:16">ctx</name><operator pos:start="1119:17" pos:end="1119:18">-&gt;</operator><name pos:start="1119:19" pos:end="1119:40">est_reenroll_pkcs10_cb</name></name><argument_list pos:start="1119:41" pos:end="1122:64">(<argument pos:start="1119:42" pos:end="1119:61"><expr pos:start="1119:42" pos:end="1119:61"><operator pos:start="1119:42" pos:end="1119:42">(</operator><name pos:start="1119:43" pos:end="1119:50">unsigned</name> <name pos:start="1119:52" pos:end="1119:55">char</name><operator pos:start="1119:56" pos:end="1119:56">*</operator><operator pos:start="1119:57" pos:end="1119:57">)</operator><name pos:start="1119:58" pos:end="1119:61">body</name></expr></argument>, <argument pos:start="1119:64" pos:end="1119:71"><expr pos:start="1119:64" pos:end="1119:71"><name pos:start="1119:64" pos:end="1119:71">body_len</name></expr></argument>, 
                                         <argument pos:start="1120:42" pos:end="1120:46"><expr pos:start="1120:42" pos:end="1120:46"><operator pos:start="1120:42" pos:end="1120:42">&amp;</operator><name pos:start="1120:43" pos:end="1120:46">cert</name></expr></argument>, <argument pos:start="1120:49" pos:end="1120:63"><expr pos:start="1120:49" pos:end="1120:63"><operator pos:start="1120:49" pos:end="1120:49">(</operator><name pos:start="1120:50" pos:end="1120:52">int</name><operator pos:start="1120:53" pos:end="1120:53">*</operator><operator pos:start="1120:54" pos:end="1120:54">)</operator><operator pos:start="1120:55" pos:end="1120:55">&amp;</operator><name pos:start="1120:56" pos:end="1120:63">cert_len</name></expr></argument>,
                                         <argument pos:start="1121:42" pos:end="1121:54"><expr pos:start="1121:42" pos:end="1121:54"><name pos:start="1121:42" pos:end="1121:54"><name pos:start="1121:42" pos:end="1121:45">conn</name><operator pos:start="1121:46" pos:end="1121:47">-&gt;</operator><name pos:start="1121:48" pos:end="1121:54">user_id</name></name></expr></argument>, <argument pos:start="1121:57" pos:end="1121:65"><expr pos:start="1121:57" pos:end="1121:65"><name pos:start="1121:57" pos:end="1121:65">peer_cert</name></expr></argument>,
                                         <argument pos:start="1122:42" pos:end="1122:49"><expr pos:start="1122:42" pos:end="1122:49"><name pos:start="1122:42" pos:end="1122:49">path_seg</name></expr></argument>, <argument pos:start="1122:52" pos:end="1122:63"><expr pos:start="1122:52" pos:end="1122:63"><name pos:start="1122:52" pos:end="1122:63"><name pos:start="1122:52" pos:end="1122:54">ctx</name><operator pos:start="1122:55" pos:end="1122:56">-&gt;</operator><name pos:start="1122:57" pos:end="1122:63">ex_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1123:7" pos:end="1128:5">else <block pos:start="1123:12" pos:end="1128:5">{<block_content pos:start="1124:9" pos:end="1127:63">
        <expr_stmt pos:start="1124:9" pos:end="1127:63"><expr pos:start="1124:9" pos:end="1127:62"><name pos:start="1124:9" pos:end="1124:10">rv</name> <operator pos:start="1124:12" pos:end="1124:12">=</operator> <call pos:start="1124:14" pos:end="1127:62"><name pos:start="1124:14" pos:end="1124:38"><name pos:start="1124:14" pos:end="1124:16">ctx</name><operator pos:start="1124:17" pos:end="1124:18">-&gt;</operator><name pos:start="1124:19" pos:end="1124:38">est_enroll_pkcs10_cb</name></name><argument_list pos:start="1124:39" pos:end="1127:62">(<argument pos:start="1124:40" pos:end="1124:59"><expr pos:start="1124:40" pos:end="1124:59"><operator pos:start="1124:40" pos:end="1124:40">(</operator><name pos:start="1124:41" pos:end="1124:48">unsigned</name> <name pos:start="1124:50" pos:end="1124:53">char</name><operator pos:start="1124:54" pos:end="1124:54">*</operator><operator pos:start="1124:55" pos:end="1124:55">)</operator><name pos:start="1124:56" pos:end="1124:59">body</name></expr></argument>, <argument pos:start="1124:62" pos:end="1124:69"><expr pos:start="1124:62" pos:end="1124:69"><name pos:start="1124:62" pos:end="1124:69">body_len</name></expr></argument>, 
                                       <argument pos:start="1125:40" pos:end="1125:44"><expr pos:start="1125:40" pos:end="1125:44"><operator pos:start="1125:40" pos:end="1125:40">&amp;</operator><name pos:start="1125:41" pos:end="1125:44">cert</name></expr></argument>, <argument pos:start="1125:47" pos:end="1125:61"><expr pos:start="1125:47" pos:end="1125:61"><operator pos:start="1125:47" pos:end="1125:47">(</operator><name pos:start="1125:48" pos:end="1125:50">int</name><operator pos:start="1125:51" pos:end="1125:51">*</operator><operator pos:start="1125:52" pos:end="1125:52">)</operator><operator pos:start="1125:53" pos:end="1125:53">&amp;</operator><name pos:start="1125:54" pos:end="1125:61">cert_len</name></expr></argument>,
                                       <argument pos:start="1126:40" pos:end="1126:52"><expr pos:start="1126:40" pos:end="1126:52"><name pos:start="1126:40" pos:end="1126:52"><name pos:start="1126:40" pos:end="1126:43">conn</name><operator pos:start="1126:44" pos:end="1126:45">-&gt;</operator><name pos:start="1126:46" pos:end="1126:52">user_id</name></name></expr></argument>, <argument pos:start="1126:55" pos:end="1126:63"><expr pos:start="1126:55" pos:end="1126:63"><name pos:start="1126:55" pos:end="1126:63">peer_cert</name></expr></argument>,
                                       <argument pos:start="1127:40" pos:end="1127:47"><expr pos:start="1127:40" pos:end="1127:47"><name pos:start="1127:40" pos:end="1127:47">path_seg</name></expr></argument>, <argument pos:start="1127:50" pos:end="1127:61"><expr pos:start="1127:50" pos:end="1127:61"><name pos:start="1127:50" pos:end="1127:61"><name pos:start="1127:50" pos:end="1127:52">ctx</name><operator pos:start="1127:53" pos:end="1127:54">-&gt;</operator><name pos:start="1127:55" pos:end="1127:61">ex_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="1130:5" pos:end="1132:7">/*
     * Peer cert is no longer needed, delete it if we have one
     */</comment>
    <if_stmt pos:start="1133:5" pos:end="1135:5"><if pos:start="1133:5" pos:end="1135:5">if <condition pos:start="1133:8" pos:end="1133:18">(<expr pos:start="1133:9" pos:end="1133:17"><name pos:start="1133:9" pos:end="1133:17">peer_cert</name></expr>)</condition> <block pos:start="1133:20" pos:end="1135:5">{<block_content pos:start="1134:9" pos:end="1134:29">
	<expr_stmt pos:start="1134:9" pos:end="1134:29"><expr pos:start="1134:9" pos:end="1134:28"><call pos:start="1134:9" pos:end="1134:28"><name pos:start="1134:9" pos:end="1134:17">X509_free</name><argument_list pos:start="1134:18" pos:end="1134:28">(<argument pos:start="1134:19" pos:end="1134:27"><expr pos:start="1134:19" pos:end="1134:27"><name pos:start="1134:19" pos:end="1134:27">peer_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1137:5" pos:end="1182:5"><if pos:start="1137:5" pos:end="1167:5">if <condition pos:start="1137:8" pos:end="1137:43">(<expr pos:start="1137:9" pos:end="1137:42"><name pos:start="1137:9" pos:end="1137:10">rv</name> <operator pos:start="1137:12" pos:end="1137:13">==</operator> <name pos:start="1137:15" pos:end="1137:26">EST_ERR_NONE</name> <operator pos:start="1137:28" pos:end="1137:29">&amp;&amp;</operator> <name pos:start="1137:31" pos:end="1137:38">cert_len</name> <operator pos:start="1137:40" pos:end="1137:40">&gt;</operator> <literal type="number" pos:start="1137:42" pos:end="1137:42">0</literal></expr>)</condition> <block pos:start="1137:45" pos:end="1167:5">{<block_content pos:start="1141:9" pos:end="1166:19">
        <comment type="block" pos:start="1138:9" pos:end="1140:11">/*
         * Send HTTP header
         */</comment>
        <expr_stmt pos:start="1141:9" pos:end="1142:58"><expr pos:start="1141:9" pos:end="1142:57"><call pos:start="1141:9" pos:end="1142:57"><name pos:start="1141:9" pos:end="1141:16">snprintf</name><argument_list pos:start="1141:17" pos:end="1142:57">(<argument pos:start="1141:18" pos:end="1141:25"><expr pos:start="1141:18" pos:end="1141:25"><name pos:start="1141:18" pos:end="1141:25">http_hdr</name></expr></argument>, <argument pos:start="1141:28" pos:end="1141:43"><expr pos:start="1141:28" pos:end="1141:43"><name pos:start="1141:28" pos:end="1141:43">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1141:46" pos:end="1141:55"><expr pos:start="1141:46" pos:end="1141:55"><literal type="string" pos:start="1141:46" pos:end="1141:55">"%s%s%s%s"</literal></expr></argument>, <argument pos:start="1141:58" pos:end="1141:73"><expr pos:start="1141:58" pos:end="1141:73"><name pos:start="1141:58" pos:end="1141:73">EST_HTTP_HDR_200</name></expr></argument>, <argument pos:start="1141:76" pos:end="1141:91"><expr pos:start="1141:76" pos:end="1141:91"><name pos:start="1141:76" pos:end="1141:91">EST_HTTP_HDR_EOL</name></expr></argument>,
                 <argument pos:start="1142:18" pos:end="1142:38"><expr pos:start="1142:18" pos:end="1142:38"><name pos:start="1142:18" pos:end="1142:38">EST_HTTP_HDR_STAT_200</name></expr></argument>, <argument pos:start="1142:41" pos:end="1142:56"><expr pos:start="1142:41" pos:end="1142:56"><name pos:start="1142:41" pos:end="1142:56">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1143:9" pos:end="1143:55"><expr pos:start="1143:9" pos:end="1143:54"><name pos:start="1143:9" pos:end="1143:14">hdrlen</name> <operator pos:start="1143:16" pos:end="1143:16">=</operator> <call pos:start="1143:18" pos:end="1143:54"><name pos:start="1143:18" pos:end="1143:26">strnlen_s</name><argument_list pos:start="1143:27" pos:end="1143:54">(<argument pos:start="1143:28" pos:end="1143:35"><expr pos:start="1143:28" pos:end="1143:35"><name pos:start="1143:28" pos:end="1143:35">http_hdr</name></expr></argument>, <argument pos:start="1143:38" pos:end="1143:53"><expr pos:start="1143:38" pos:end="1143:53"><name pos:start="1143:38" pos:end="1143:53">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1144:9" pos:end="1145:57"><expr pos:start="1144:9" pos:end="1145:56"><call pos:start="1144:9" pos:end="1145:56"><name pos:start="1144:9" pos:end="1144:16">snprintf</name><argument_list pos:start="1144:17" pos:end="1145:56">(<argument pos:start="1144:18" pos:end="1144:34"><expr pos:start="1144:18" pos:end="1144:34"><name pos:start="1144:18" pos:end="1144:25">http_hdr</name> <operator pos:start="1144:27" pos:end="1144:27">+</operator> <name pos:start="1144:29" pos:end="1144:34">hdrlen</name></expr></argument>, <argument pos:start="1144:37" pos:end="1144:52"><expr pos:start="1144:37" pos:end="1144:52"><name pos:start="1144:37" pos:end="1144:52">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1144:55" pos:end="1144:64"><expr pos:start="1144:55" pos:end="1144:64"><literal type="string" pos:start="1144:55" pos:end="1144:64">"%s: %s%s"</literal></expr></argument>, <argument pos:start="1144:67" pos:end="1144:81"><expr pos:start="1144:67" pos:end="1144:81"><name pos:start="1144:67" pos:end="1144:81">EST_HTTP_HDR_CT</name></expr></argument>,
                 <argument pos:start="1145:18" pos:end="1145:37"><expr pos:start="1145:18" pos:end="1145:37"><name pos:start="1145:18" pos:end="1145:37">EST_HTTP_CT_PKCS7_CO</name></expr></argument>, <argument pos:start="1145:40" pos:end="1145:55"><expr pos:start="1145:40" pos:end="1145:55"><name pos:start="1145:40" pos:end="1145:55">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1146:9" pos:end="1146:55"><expr pos:start="1146:9" pos:end="1146:54"><name pos:start="1146:9" pos:end="1146:14">hdrlen</name> <operator pos:start="1146:16" pos:end="1146:16">=</operator> <call pos:start="1146:18" pos:end="1146:54"><name pos:start="1146:18" pos:end="1146:26">strnlen_s</name><argument_list pos:start="1146:27" pos:end="1146:54">(<argument pos:start="1146:28" pos:end="1146:35"><expr pos:start="1146:28" pos:end="1146:35"><name pos:start="1146:28" pos:end="1146:35">http_hdr</name></expr></argument>, <argument pos:start="1146:38" pos:end="1146:53"><expr pos:start="1146:38" pos:end="1146:53"><name pos:start="1146:38" pos:end="1146:53">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1147:9" pos:end="1148:55"><expr pos:start="1147:9" pos:end="1148:54"><call pos:start="1147:9" pos:end="1148:54"><name pos:start="1147:9" pos:end="1147:16">snprintf</name><argument_list pos:start="1147:17" pos:end="1148:54">(<argument pos:start="1147:18" pos:end="1147:34"><expr pos:start="1147:18" pos:end="1147:34"><name pos:start="1147:18" pos:end="1147:25">http_hdr</name> <operator pos:start="1147:27" pos:end="1147:27">+</operator> <name pos:start="1147:29" pos:end="1147:34">hdrlen</name></expr></argument>, <argument pos:start="1147:37" pos:end="1147:52"><expr pos:start="1147:37" pos:end="1147:52"><name pos:start="1147:37" pos:end="1147:52">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1147:55" pos:end="1147:64"><expr pos:start="1147:55" pos:end="1147:64"><literal type="string" pos:start="1147:55" pos:end="1147:64">"%s: %s%s"</literal></expr></argument>, <argument pos:start="1147:67" pos:end="1147:81"><expr pos:start="1147:67" pos:end="1147:81"><name pos:start="1147:67" pos:end="1147:81">EST_HTTP_HDR_CE</name></expr></argument>,
                 <argument pos:start="1148:18" pos:end="1148:35"><expr pos:start="1148:18" pos:end="1148:35"><name pos:start="1148:18" pos:end="1148:35">EST_HTTP_CE_BASE64</name></expr></argument>, <argument pos:start="1148:38" pos:end="1148:53"><expr pos:start="1148:38" pos:end="1148:53"><name pos:start="1148:38" pos:end="1148:53">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1149:9" pos:end="1149:55"><expr pos:start="1149:9" pos:end="1149:54"><name pos:start="1149:9" pos:end="1149:14">hdrlen</name> <operator pos:start="1149:16" pos:end="1149:16">=</operator> <call pos:start="1149:18" pos:end="1149:54"><name pos:start="1149:18" pos:end="1149:26">strnlen_s</name><argument_list pos:start="1149:27" pos:end="1149:54">(<argument pos:start="1149:28" pos:end="1149:35"><expr pos:start="1149:28" pos:end="1149:35"><name pos:start="1149:28" pos:end="1149:35">http_hdr</name></expr></argument>, <argument pos:start="1149:38" pos:end="1149:53"><expr pos:start="1149:38" pos:end="1149:53"><name pos:start="1149:38" pos:end="1149:53">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1150:9" pos:end="1151:63"><expr pos:start="1150:9" pos:end="1151:62"><call pos:start="1150:9" pos:end="1151:62"><name pos:start="1150:9" pos:end="1150:16">snprintf</name><argument_list pos:start="1150:17" pos:end="1151:62">(<argument pos:start="1150:18" pos:end="1150:34"><expr pos:start="1150:18" pos:end="1150:34"><name pos:start="1150:18" pos:end="1150:25">http_hdr</name> <operator pos:start="1150:27" pos:end="1150:27">+</operator> <name pos:start="1150:29" pos:end="1150:34">hdrlen</name></expr></argument>, <argument pos:start="1150:37" pos:end="1150:52"><expr pos:start="1150:37" pos:end="1150:52"><name pos:start="1150:37" pos:end="1150:52">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="1150:55" pos:end="1150:66"><expr pos:start="1150:55" pos:end="1150:66"><literal type="string" pos:start="1150:55" pos:end="1150:66">"%s: %d%s%s"</literal></expr></argument>, <argument pos:start="1150:69" pos:end="1150:83"><expr pos:start="1150:69" pos:end="1150:83"><name pos:start="1150:69" pos:end="1150:83">EST_HTTP_HDR_CL</name></expr></argument>,
                 <argument pos:start="1151:18" pos:end="1151:25"><expr pos:start="1151:18" pos:end="1151:25"><name pos:start="1151:18" pos:end="1151:25">cert_len</name></expr></argument>, <argument pos:start="1151:28" pos:end="1151:43"><expr pos:start="1151:28" pos:end="1151:43"><name pos:start="1151:28" pos:end="1151:43">EST_HTTP_HDR_EOL</name></expr></argument>, <argument pos:start="1151:46" pos:end="1151:61"><expr pos:start="1151:46" pos:end="1151:61"><name pos:start="1151:46" pos:end="1151:61">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1152:9" pos:end="1156:9"><if pos:start="1152:9" pos:end="1156:9">if <condition pos:start="1152:12" pos:end="1152:81">(<expr pos:start="1152:13" pos:end="1152:80"><operator pos:start="1152:13" pos:end="1152:13">!</operator><call pos:start="1152:14" pos:end="1152:80"><name pos:start="1152:14" pos:end="1152:21">mg_write</name><argument_list pos:start="1152:22" pos:end="1152:80">(<argument pos:start="1152:23" pos:end="1152:30"><expr pos:start="1152:23" pos:end="1152:30"><name pos:start="1152:23" pos:end="1152:30">http_ctx</name></expr></argument>, <argument pos:start="1152:33" pos:end="1152:40"><expr pos:start="1152:33" pos:end="1152:40"><name pos:start="1152:33" pos:end="1152:40">http_hdr</name></expr></argument>, <argument pos:start="1152:43" pos:end="1152:79"><expr pos:start="1152:43" pos:end="1152:79"><call pos:start="1152:43" pos:end="1152:79"><name pos:start="1152:43" pos:end="1152:51">strnlen_s</name><argument_list pos:start="1152:52" pos:end="1152:79">(<argument pos:start="1152:53" pos:end="1152:60"><expr pos:start="1152:53" pos:end="1152:60"><name pos:start="1152:53" pos:end="1152:60">http_hdr</name></expr></argument>, <argument pos:start="1152:63" pos:end="1152:78"><expr pos:start="1152:63" pos:end="1152:78"><name pos:start="1152:63" pos:end="1152:78">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1152:83" pos:end="1156:9">{<block_content pos:start="1153:13" pos:end="1155:40">
            <expr_stmt pos:start="1153:13" pos:end="1153:23"><expr pos:start="1153:13" pos:end="1153:22"><call pos:start="1153:13" pos:end="1153:22"><name pos:start="1153:13" pos:end="1153:16">free</name><argument_list pos:start="1153:17" pos:end="1153:22">(<argument pos:start="1153:18" pos:end="1153:21"><expr pos:start="1153:18" pos:end="1153:21"><name pos:start="1153:18" pos:end="1153:21">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="1154:13" pos:end="1154:31"><expr pos:start="1154:13" pos:end="1154:30"><call pos:start="1154:13" pos:end="1154:30"><name pos:start="1154:13" pos:end="1154:25">X509_REQ_free</name><argument_list pos:start="1154:26" pos:end="1154:30">(<argument pos:start="1154:27" pos:end="1154:29"><expr pos:start="1154:27" pos:end="1154:29"><name pos:start="1154:27" pos:end="1154:29">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1155:13" pos:end="1155:40">return <expr pos:start="1155:20" pos:end="1155:39"><operator pos:start="1155:20" pos:end="1155:20">(</operator><name pos:start="1155:21" pos:end="1155:38">EST_ERR_HTTP_WRITE</name><operator pos:start="1155:39" pos:end="1155:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1158:9" pos:end="1160:11">/*
         * Send the signed PKCS7 certificate in the body
         */</comment>
        <if_stmt pos:start="1161:9" pos:end="1165:9"><if pos:start="1161:9" pos:end="1165:9">if <condition pos:start="1161:12" pos:end="1161:48">(<expr pos:start="1161:13" pos:end="1161:47"><operator pos:start="1161:13" pos:end="1161:13">!</operator><call pos:start="1161:14" pos:end="1161:47"><name pos:start="1161:14" pos:end="1161:21">mg_write</name><argument_list pos:start="1161:22" pos:end="1161:47">(<argument pos:start="1161:23" pos:end="1161:30"><expr pos:start="1161:23" pos:end="1161:30"><name pos:start="1161:23" pos:end="1161:30">http_ctx</name></expr></argument>, <argument pos:start="1161:33" pos:end="1161:36"><expr pos:start="1161:33" pos:end="1161:36"><name pos:start="1161:33" pos:end="1161:36">cert</name></expr></argument>, <argument pos:start="1161:39" pos:end="1161:46"><expr pos:start="1161:39" pos:end="1161:46"><name pos:start="1161:39" pos:end="1161:46">cert_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1161:50" pos:end="1165:9">{<block_content pos:start="1162:13" pos:end="1164:40">
            <expr_stmt pos:start="1162:13" pos:end="1162:23"><expr pos:start="1162:13" pos:end="1162:22"><call pos:start="1162:13" pos:end="1162:22"><name pos:start="1162:13" pos:end="1162:16">free</name><argument_list pos:start="1162:17" pos:end="1162:22">(<argument pos:start="1162:18" pos:end="1162:21"><expr pos:start="1162:18" pos:end="1162:21"><name pos:start="1162:18" pos:end="1162:21">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="1163:13" pos:end="1163:31"><expr pos:start="1163:13" pos:end="1163:30"><call pos:start="1163:13" pos:end="1163:30"><name pos:start="1163:13" pos:end="1163:25">X509_REQ_free</name><argument_list pos:start="1163:26" pos:end="1163:30">(<argument pos:start="1163:27" pos:end="1163:29"><expr pos:start="1163:27" pos:end="1163:29"><name pos:start="1163:27" pos:end="1163:29">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1164:13" pos:end="1164:40">return <expr pos:start="1164:20" pos:end="1164:39"><operator pos:start="1164:20" pos:end="1164:20">(</operator><name pos:start="1164:21" pos:end="1164:38">EST_ERR_HTTP_WRITE</name><operator pos:start="1164:39" pos:end="1164:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1166:9" pos:end="1166:19"><expr pos:start="1166:9" pos:end="1166:18"><call pos:start="1166:9" pos:end="1166:18"><name pos:start="1166:9" pos:end="1166:12">free</name><argument_list pos:start="1166:13" pos:end="1166:18">(<argument pos:start="1166:14" pos:end="1166:17"><expr pos:start="1166:14" pos:end="1166:17"><name pos:start="1166:14" pos:end="1166:17">cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1167:7" pos:end="1179:5">else if <condition pos:start="1167:15" pos:end="1167:45">(<expr pos:start="1167:16" pos:end="1167:44"><name pos:start="1167:16" pos:end="1167:17">rv</name> <operator pos:start="1167:19" pos:end="1167:20">==</operator> <name pos:start="1167:22" pos:end="1167:44">EST_ERR_CA_ENROLL_RETRY</name></expr>)</condition> <block pos:start="1167:47" pos:end="1179:5">{<block_content pos:start="1174:9" pos:end="1178:9">
        <comment type="block" pos:start="1168:9" pos:end="1173:11">/*
         * The CA did not sign the request and has asked the
         * client to retry in the future.  This may occur if
         * the CA is not configured for automatic enrollment.
         * Send the HTTP retry response to the client.
         */</comment>
        <expr_stmt pos:start="1174:9" pos:end="1174:90"><expr pos:start="1174:9" pos:end="1174:89"><call pos:start="1174:9" pos:end="1174:89"><name pos:start="1174:9" pos:end="1174:20">EST_LOG_INFO</name><argument_list pos:start="1174:21" pos:end="1174:89">(<argument pos:start="1174:22" pos:end="1174:88"><expr pos:start="1174:22" pos:end="1174:88"><literal type="string" pos:start="1174:22" pos:end="1174:88">"CA server requests retry, possibly it's not setup for auto-enroll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1175:9" pos:end="1178:9"><if pos:start="1175:9" pos:end="1178:9">if <condition pos:start="1175:12" pos:end="1175:95">(<expr pos:start="1175:13" pos:end="1175:94"><name pos:start="1175:13" pos:end="1175:24">EST_ERR_NONE</name> <operator pos:start="1175:26" pos:end="1175:27">!=</operator> <call pos:start="1175:29" pos:end="1175:94"><name pos:start="1175:29" pos:end="1175:60">est_server_send_http_retry_after</name><argument_list pos:start="1175:61" pos:end="1175:94">(<argument pos:start="1175:62" pos:end="1175:64"><expr pos:start="1175:62" pos:end="1175:64"><name pos:start="1175:62" pos:end="1175:64">ctx</name></expr></argument>, <argument pos:start="1175:67" pos:end="1175:74"><expr pos:start="1175:67" pos:end="1175:74"><name pos:start="1175:67" pos:end="1175:74">http_ctx</name></expr></argument>, <argument pos:start="1175:77" pos:end="1175:93"><expr pos:start="1175:77" pos:end="1175:93"><name pos:start="1175:77" pos:end="1175:93"><name pos:start="1175:77" pos:end="1175:79">ctx</name><operator pos:start="1175:80" pos:end="1175:81">-&gt;</operator><name pos:start="1175:82" pos:end="1175:93">retry_period</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1175:97" pos:end="1178:9">{<block_content pos:start="1176:13" pos:end="1177:40"> 
	    <expr_stmt pos:start="1176:13" pos:end="1176:31"><expr pos:start="1176:13" pos:end="1176:30"><call pos:start="1176:13" pos:end="1176:30"><name pos:start="1176:13" pos:end="1176:25">X509_REQ_free</name><argument_list pos:start="1176:26" pos:end="1176:30">(<argument pos:start="1176:27" pos:end="1176:29"><expr pos:start="1176:27" pos:end="1176:29"><name pos:start="1176:27" pos:end="1176:29">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1177:13" pos:end="1177:40">return <expr pos:start="1177:20" pos:end="1177:39"><operator pos:start="1177:20" pos:end="1177:20">(</operator><name pos:start="1177:21" pos:end="1177:38">EST_ERR_HTTP_WRITE</name><operator pos:start="1177:39" pos:end="1177:39">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="1179:7" pos:end="1182:5">else <block pos:start="1179:12" pos:end="1182:5">{<block_content pos:start="1180:9" pos:end="1181:40">
	<expr_stmt pos:start="1180:9" pos:end="1180:27"><expr pos:start="1180:9" pos:end="1180:26"><call pos:start="1180:9" pos:end="1180:26"><name pos:start="1180:9" pos:end="1180:21">X509_REQ_free</name><argument_list pos:start="1180:22" pos:end="1180:26">(<argument pos:start="1180:23" pos:end="1180:25"><expr pos:start="1180:23" pos:end="1180:25"><name pos:start="1180:23" pos:end="1180:25">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1181:9" pos:end="1181:40">return <expr pos:start="1181:16" pos:end="1181:39"><operator pos:start="1181:16" pos:end="1181:16">(</operator><name pos:start="1181:17" pos:end="1181:38">EST_ERR_CA_ENROLL_FAIL</name><operator pos:start="1181:39" pos:end="1181:39">)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="1184:5" pos:end="1184:23"><expr pos:start="1184:5" pos:end="1184:22"><call pos:start="1184:5" pos:end="1184:22"><name pos:start="1184:5" pos:end="1184:17">X509_REQ_free</name><argument_list pos:start="1184:18" pos:end="1184:22">(<argument pos:start="1184:19" pos:end="1184:21"><expr pos:start="1184:19" pos:end="1184:21"><name pos:start="1184:19" pos:end="1184:21">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1185:5" pos:end="1185:26">return <expr pos:start="1185:12" pos:end="1185:25"><operator pos:start="1185:12" pos:end="1185:12">(</operator><name pos:start="1185:13" pos:end="1185:24">EST_ERR_NONE</name><operator pos:start="1185:25" pos:end="1185:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1187:1" pos:end="1190:3">/*
 * This function is used by the server to process an incoming
 * csr attributes request from the client.
 */</comment>
<function pos:start="1191:1" pos:end="1283:1"><type pos:start="1191:1" pos:end="1191:10"><specifier pos:start="1191:1" pos:end="1191:6">static</specifier> <name pos:start="1191:8" pos:end="1191:10">int</name></type> <name pos:start="1191:12" pos:end="1191:31">est_handle_csr_attrs</name> <parameter_list pos:start="1191:33" pos:end="1191:78">(<parameter pos:start="1191:34" pos:end="1191:45"><decl pos:start="1191:34" pos:end="1191:45"><type pos:start="1191:34" pos:end="1191:45"><name pos:start="1191:34" pos:end="1191:40">EST_CTX</name> <modifier pos:start="1191:42" pos:end="1191:42">*</modifier></type><name pos:start="1191:43" pos:end="1191:45">ctx</name></decl></parameter>, <parameter pos:start="1191:48" pos:end="1191:61"><decl pos:start="1191:48" pos:end="1191:61"><type pos:start="1191:48" pos:end="1191:61"><name pos:start="1191:48" pos:end="1191:51">void</name> <modifier pos:start="1191:53" pos:end="1191:53">*</modifier></type><name pos:start="1191:54" pos:end="1191:61">http_ctx</name></decl></parameter>, <parameter pos:start="1191:64" pos:end="1191:77"><decl pos:start="1191:64" pos:end="1191:77"><type pos:start="1191:64" pos:end="1191:77"><name pos:start="1191:64" pos:end="1191:67">char</name> <modifier pos:start="1191:69" pos:end="1191:69">*</modifier></type><name pos:start="1191:70" pos:end="1191:77">path_seg</name></decl></parameter>)</parameter_list>
<block pos:start="1192:1" pos:end="1283:1">{<block_content pos:start="1193:5" pos:end="1282:69">
    <decl_stmt pos:start="1193:5" pos:end="1193:26"><decl pos:start="1193:5" pos:end="1193:25"><type pos:start="1193:5" pos:end="1193:7"><name pos:start="1193:5" pos:end="1193:7">int</name></type> <name pos:start="1193:9" pos:end="1193:10">rv</name> <init pos:start="1193:12" pos:end="1193:25">= <expr pos:start="1193:14" pos:end="1193:25"><name pos:start="1193:14" pos:end="1193:25">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1194:5" pos:end="1194:20"><decl pos:start="1194:5" pos:end="1194:19"><type pos:start="1194:5" pos:end="1194:7"><name pos:start="1194:5" pos:end="1194:7">int</name></type> <name pos:start="1194:9" pos:end="1194:19">pop_present</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1195:5" pos:end="1195:34"><decl pos:start="1195:5" pos:end="1195:18"><type pos:start="1195:5" pos:end="1195:10"><name pos:start="1195:5" pos:end="1195:8">char</name> <modifier pos:start="1195:10" pos:end="1195:10">*</modifier></type><name pos:start="1195:11" pos:end="1195:18">csr_data</name></decl>, <decl pos:start="1195:21" pos:end="1195:33"><type ref="prev" pos:start="1195:5" pos:end="1195:10"><modifier pos:start="1195:21" pos:end="1195:21">*</modifier></type><name pos:start="1195:22" pos:end="1195:33">csr_data_pop</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1196:5" pos:end="1196:29"><decl pos:start="1196:5" pos:end="1196:15"><type pos:start="1196:5" pos:end="1196:7"><name pos:start="1196:5" pos:end="1196:7">int</name></type> <name pos:start="1196:9" pos:end="1196:15">csr_len</name></decl>, <decl pos:start="1196:18" pos:end="1196:28"><type ref="prev" pos:start="1196:5" pos:end="1196:7"/><name pos:start="1196:18" pos:end="1196:28">csr_pop_len</name></decl>;</decl_stmt>

    <if_stmt pos:start="1198:5" pos:end="1215:5"><if pos:start="1198:5" pos:end="1215:5">if <condition pos:start="1198:8" pos:end="1198:54">(<expr pos:start="1198:9" pos:end="1198:53"><operator pos:start="1198:9" pos:end="1198:9">!</operator><name pos:start="1198:10" pos:end="1198:29"><name pos:start="1198:10" pos:end="1198:12">ctx</name><operator pos:start="1198:13" pos:end="1198:14">-&gt;</operator><name pos:start="1198:15" pos:end="1198:29">server_csrattrs</name></name> <operator pos:start="1198:31" pos:end="1198:32">&amp;&amp;</operator> <operator pos:start="1198:34" pos:end="1198:34">!</operator><name pos:start="1198:35" pos:end="1198:53"><name pos:start="1198:35" pos:end="1198:37">ctx</name><operator pos:start="1198:38" pos:end="1198:39">-&gt;</operator><name pos:start="1198:40" pos:end="1198:53">est_get_csr_cb</name></name></expr>)</condition> <block pos:start="1198:56" pos:end="1215:5">{<block_content pos:start="1199:9" pos:end="1214:9">
        <if_stmt pos:start="1199:9" pos:end="1214:9"><if pos:start="1199:9" pos:end="1204:9">if <condition pos:start="1199:12" pos:end="1199:36">(<expr pos:start="1199:13" pos:end="1199:35"><operator pos:start="1199:13" pos:end="1199:13">!</operator><name pos:start="1199:14" pos:end="1199:35"><name pos:start="1199:14" pos:end="1199:16">ctx</name><operator pos:start="1199:17" pos:end="1199:18">-&gt;</operator><name pos:start="1199:19" pos:end="1199:35">server_enable_pop</name></name></expr>)</condition> <block pos:start="1199:38" pos:end="1204:9">{<block_content pos:start="1200:17" pos:end="1203:38">
  	        <expr_stmt pos:start="1200:17" pos:end="1200:49"><expr pos:start="1200:17" pos:end="1200:48"><call pos:start="1200:17" pos:end="1200:48"><name pos:start="1200:17" pos:end="1200:27">EST_LOG_ERR</name><argument_list pos:start="1200:28" pos:end="1200:48">(<argument pos:start="1200:29" pos:end="1200:47"><expr pos:start="1200:29" pos:end="1200:47"><literal type="string" pos:start="1200:29" pos:end="1200:47">"Null csr callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block" pos:start="1201:17" pos:end="1201:82">/* Send a 204 response indicating the server doesn't have a CSR */</comment>
		<expr_stmt pos:start="1202:17" pos:end="1202:76"><expr pos:start="1202:17" pos:end="1202:75"><call pos:start="1202:17" pos:end="1202:75"><name pos:start="1202:17" pos:end="1202:35">est_send_http_error</name><argument_list pos:start="1202:36" pos:end="1202:75">(<argument pos:start="1202:37" pos:end="1202:39"><expr pos:start="1202:37" pos:end="1202:39"><name pos:start="1202:37" pos:end="1202:39">ctx</name></expr></argument>, <argument pos:start="1202:42" pos:end="1202:49"><expr pos:start="1202:42" pos:end="1202:49"><name pos:start="1202:42" pos:end="1202:49">http_ctx</name></expr></argument>, <argument pos:start="1202:52" pos:end="1202:74"><expr pos:start="1202:52" pos:end="1202:74"><name pos:start="1202:52" pos:end="1202:74">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="1203:17" pos:end="1203:38">return <expr pos:start="1203:24" pos:end="1203:37"><operator pos:start="1203:24" pos:end="1203:24">(</operator><name pos:start="1203:25" pos:end="1203:36">EST_ERR_NONE</name><operator pos:start="1203:37" pos:end="1203:37">)</operator></expr>;</return>
        </block_content>}</block></if> <else pos:start="1204:11" pos:end="1214:9">else <block pos:start="1204:16" pos:end="1214:9">{<block_content pos:start="1205:11" pos:end="1213:77">
	  <expr_stmt pos:start="1205:11" pos:end="1205:54"><expr pos:start="1205:11" pos:end="1205:53"><name pos:start="1205:11" pos:end="1205:18">csr_data</name> <operator pos:start="1205:20" pos:end="1205:20">=</operator> <call pos:start="1205:22" pos:end="1205:53"><name pos:start="1205:22" pos:end="1205:27">malloc</name><argument_list pos:start="1205:28" pos:end="1205:53">(<argument pos:start="1205:29" pos:end="1205:52"><expr pos:start="1205:29" pos:end="1205:52"><name pos:start="1205:29" pos:end="1205:48">EST_CSRATTRS_POP_LEN</name> <operator pos:start="1205:50" pos:end="1205:50">+</operator> <literal type="number" pos:start="1205:52" pos:end="1205:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="1206:13" pos:end="1208:13"><if pos:start="1206:13" pos:end="1208:13">if <condition pos:start="1206:16" pos:end="1206:26">(<expr pos:start="1206:17" pos:end="1206:25"><operator pos:start="1206:17" pos:end="1206:17">!</operator><name pos:start="1206:18" pos:end="1206:25">csr_data</name></expr>)</condition> <block pos:start="1206:28" pos:end="1208:13">{<block_content pos:start="1207:17" pos:end="1207:40">
                <return pos:start="1207:17" pos:end="1207:40">return <expr pos:start="1207:24" pos:end="1207:39"><operator pos:start="1207:24" pos:end="1207:24">(</operator><name pos:start="1207:25" pos:end="1207:38">EST_ERR_MALLOC</name><operator pos:start="1207:39" pos:end="1207:39">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt pos:start="1209:13" pos:end="1210:44"><expr pos:start="1209:13" pos:end="1210:43"><call pos:start="1209:13" pos:end="1210:43"><name pos:start="1209:13" pos:end="1209:21">strncpy_s</name><argument_list pos:start="1209:22" pos:end="1210:43">(<argument pos:start="1209:23" pos:end="1209:30"><expr pos:start="1209:23" pos:end="1209:30"><name pos:start="1209:23" pos:end="1209:30">csr_data</name></expr></argument>, <argument pos:start="1209:33" pos:end="1209:56"><expr pos:start="1209:33" pos:end="1209:56"><name pos:start="1209:33" pos:end="1209:52">EST_CSRATTRS_POP_LEN</name> <operator pos:start="1209:54" pos:end="1209:54">+</operator> <literal type="number" pos:start="1209:56" pos:end="1209:56">1</literal></expr></argument>, <argument pos:start="1209:59" pos:end="1209:74"><expr pos:start="1209:59" pos:end="1209:74"><name pos:start="1209:59" pos:end="1209:74">EST_CSRATTRS_POP</name></expr></argument>, 
		      <argument pos:start="1210:23" pos:end="1210:42"><expr pos:start="1210:23" pos:end="1210:42"><name pos:start="1210:23" pos:end="1210:42">EST_CSRATTRS_POP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="1211:13" pos:end="1211:47"><expr pos:start="1211:13" pos:end="1211:46"><name pos:start="1211:13" pos:end="1211:42"><name pos:start="1211:13" pos:end="1211:20">csr_data</name><index pos:start="1211:21" pos:end="1211:42">[<expr pos:start="1211:22" pos:end="1211:41"><name pos:start="1211:22" pos:end="1211:41">EST_CSRATTRS_POP_LEN</name></expr>]</index></name> <operator pos:start="1211:44" pos:end="1211:44">=</operator> <literal type="number" pos:start="1211:46" pos:end="1211:46">0</literal></expr>;</expr_stmt>
	    <expr_stmt pos:start="1212:13" pos:end="1212:43"><expr pos:start="1212:13" pos:end="1212:42"><name pos:start="1212:13" pos:end="1212:19">csr_len</name> <operator pos:start="1212:21" pos:end="1212:21">=</operator> <name pos:start="1212:23" pos:end="1212:42">EST_CSRATTRS_POP_LEN</name></expr>;</expr_stmt>
	    <return pos:start="1213:13" pos:end="1213:77">return <expr pos:start="1213:20" pos:end="1213:76"><operator pos:start="1213:20" pos:end="1213:20">(</operator><call pos:start="1213:21" pos:end="1213:75"><name pos:start="1213:21" pos:end="1213:41">est_send_csrattr_data</name><argument_list pos:start="1213:42" pos:end="1213:75">(<argument pos:start="1213:43" pos:end="1213:45"><expr pos:start="1213:43" pos:end="1213:45"><name pos:start="1213:43" pos:end="1213:45">ctx</name></expr></argument>, <argument pos:start="1213:48" pos:end="1213:55"><expr pos:start="1213:48" pos:end="1213:55"><name pos:start="1213:48" pos:end="1213:55">csr_data</name></expr></argument>, <argument pos:start="1213:58" pos:end="1213:64"><expr pos:start="1213:58" pos:end="1213:64"><name pos:start="1213:58" pos:end="1213:64">csr_len</name></expr></argument>, <argument pos:start="1213:67" pos:end="1213:74"><expr pos:start="1213:67" pos:end="1213:74"><name pos:start="1213:67" pos:end="1213:74">http_ctx</name></expr></argument>)</argument_list></call><operator pos:start="1213:76" pos:end="1213:76">)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1217:5" pos:end="1221:7">/*
     * Invoke CA server callback to retrieve the CSR.  Callback takes priority
     * over saved values in the context.
     * Note: there is no need to authenticate the client (see sec 4.5)
     */</comment>
    <if_stmt pos:start="1222:5" pos:end="1281:5"><if pos:start="1222:5" pos:end="1272:5">if <condition pos:start="1222:8" pos:end="1222:28">(<expr pos:start="1222:9" pos:end="1222:27"><name pos:start="1222:9" pos:end="1222:27"><name pos:start="1222:9" pos:end="1222:11">ctx</name><operator pos:start="1222:12" pos:end="1222:13">-&gt;</operator><name pos:start="1222:14" pos:end="1222:27">est_get_csr_cb</name></name></expr>)</condition> <block pos:start="1222:30" pos:end="1272:5">{<block_content pos:start="1223:9" pos:end="1271:9">
	<expr_stmt pos:start="1223:9" pos:end="1223:81"><expr pos:start="1223:9" pos:end="1223:80"><name pos:start="1223:9" pos:end="1223:16">csr_data</name> <operator pos:start="1223:18" pos:end="1223:18">=</operator> <operator pos:start="1223:20" pos:end="1223:20">(</operator><name pos:start="1223:21" pos:end="1223:24">char</name> <operator pos:start="1223:26" pos:end="1223:26">*</operator><operator pos:start="1223:27" pos:end="1223:27">)</operator><call pos:start="1223:28" pos:end="1223:80"><name pos:start="1223:28" pos:end="1223:46"><name pos:start="1223:28" pos:end="1223:30">ctx</name><operator pos:start="1223:31" pos:end="1223:32">-&gt;</operator><name pos:start="1223:33" pos:end="1223:46">est_get_csr_cb</name></name><argument_list pos:start="1223:47" pos:end="1223:80">(<argument pos:start="1223:48" pos:end="1223:55"><expr pos:start="1223:48" pos:end="1223:55"><operator pos:start="1223:48" pos:end="1223:48">&amp;</operator><name pos:start="1223:49" pos:end="1223:55">csr_len</name></expr></argument>, <argument pos:start="1223:58" pos:end="1223:65"><expr pos:start="1223:58" pos:end="1223:65"><name pos:start="1223:58" pos:end="1223:65">path_seg</name></expr></argument>, <argument pos:start="1223:68" pos:end="1223:79"><expr pos:start="1223:68" pos:end="1223:79"><name pos:start="1223:68" pos:end="1223:79"><name pos:start="1223:68" pos:end="1223:70">ctx</name><operator pos:start="1223:71" pos:end="1223:72">-&gt;</operator><name pos:start="1223:73" pos:end="1223:79">ex_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1224:9" pos:end="1224:72"><expr pos:start="1224:9" pos:end="1224:71"><name pos:start="1224:9" pos:end="1224:10">rv</name> <operator pos:start="1224:12" pos:end="1224:12">=</operator> <call pos:start="1224:14" pos:end="1224:71"><name pos:start="1224:14" pos:end="1224:38">est_asn1_parse_attributes</name><argument_list pos:start="1224:39" pos:end="1224:71">(<argument pos:start="1224:40" pos:end="1224:47"><expr pos:start="1224:40" pos:end="1224:47"><name pos:start="1224:40" pos:end="1224:47">csr_data</name></expr></argument>, <argument pos:start="1224:50" pos:end="1224:56"><expr pos:start="1224:50" pos:end="1224:56"><name pos:start="1224:50" pos:end="1224:56">csr_len</name></expr></argument>, <argument pos:start="1224:59" pos:end="1224:70"><expr pos:start="1224:59" pos:end="1224:70"><operator pos:start="1224:59" pos:end="1224:59">&amp;</operator><name pos:start="1224:60" pos:end="1224:70">pop_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1225:9" pos:end="1231:9"><if pos:start="1225:9" pos:end="1231:9">if <condition pos:start="1225:12" pos:end="1225:44">(<expr pos:start="1225:13" pos:end="1225:43"><name pos:start="1225:13" pos:end="1225:19">csr_len</name> <operator pos:start="1225:21" pos:end="1225:22">&amp;&amp;</operator> <operator pos:start="1225:24" pos:end="1225:24">(</operator><name pos:start="1225:25" pos:end="1225:26">rv</name> <operator pos:start="1225:28" pos:end="1225:29">!=</operator> <name pos:start="1225:31" pos:end="1225:42">EST_ERR_NONE</name><operator pos:start="1225:43" pos:end="1225:43">)</operator></expr>)</condition> <block pos:start="1225:46" pos:end="1231:9">{<block_content pos:start="1226:13" pos:end="1230:34">
            <if_stmt pos:start="1226:13" pos:end="1228:13"><if pos:start="1226:13" pos:end="1228:13">if <condition pos:start="1226:16" pos:end="1226:25">(<expr pos:start="1226:17" pos:end="1226:24"><name pos:start="1226:17" pos:end="1226:24">csr_data</name></expr>)</condition> <block pos:start="1226:27" pos:end="1228:13">{<block_content pos:start="1227:17" pos:end="1227:31">
                <expr_stmt pos:start="1227:17" pos:end="1227:31"><expr pos:start="1227:17" pos:end="1227:30"><call pos:start="1227:17" pos:end="1227:30"><name pos:start="1227:17" pos:end="1227:20">free</name><argument_list pos:start="1227:21" pos:end="1227:30">(<argument pos:start="1227:22" pos:end="1227:29"><expr pos:start="1227:22" pos:end="1227:29"><name pos:start="1227:22" pos:end="1227:29">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
	    <expr_stmt pos:start="1229:13" pos:end="1229:72"><expr pos:start="1229:13" pos:end="1229:71"><call pos:start="1229:13" pos:end="1229:71"><name pos:start="1229:13" pos:end="1229:31">est_send_http_error</name><argument_list pos:start="1229:32" pos:end="1229:71">(<argument pos:start="1229:33" pos:end="1229:35"><expr pos:start="1229:33" pos:end="1229:35"><name pos:start="1229:33" pos:end="1229:35">ctx</name></expr></argument>, <argument pos:start="1229:38" pos:end="1229:45"><expr pos:start="1229:38" pos:end="1229:45"><name pos:start="1229:38" pos:end="1229:45">http_ctx</name></expr></argument>, <argument pos:start="1229:48" pos:end="1229:70"><expr pos:start="1229:48" pos:end="1229:70"><name pos:start="1229:48" pos:end="1229:70">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1230:13" pos:end="1230:34">return <expr pos:start="1230:20" pos:end="1230:33"><operator pos:start="1230:20" pos:end="1230:20">(</operator><name pos:start="1230:21" pos:end="1230:32">EST_ERR_NONE</name><operator pos:start="1230:33" pos:end="1230:33">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="1233:9" pos:end="1233:33"><expr pos:start="1233:9" pos:end="1233:32"><name pos:start="1233:9" pos:end="1233:28"><name pos:start="1233:9" pos:end="1233:11">ctx</name><operator pos:start="1233:12" pos:end="1233:13">-&gt;</operator><name pos:start="1233:14" pos:end="1233:28">csr_pop_present</name></name> <operator pos:start="1233:30" pos:end="1233:30">=</operator> <literal type="number" pos:start="1233:32" pos:end="1233:32">0</literal></expr>;</expr_stmt>
	<if_stmt pos:start="1234:9" pos:end="1271:9"><if pos:start="1234:9" pos:end="1271:9">if <condition pos:start="1234:12" pos:end="1234:35">(<expr pos:start="1234:13" pos:end="1234:34"><name pos:start="1234:13" pos:end="1234:34"><name pos:start="1234:13" pos:end="1234:15">ctx</name><operator pos:start="1234:16" pos:end="1234:17">-&gt;</operator><name pos:start="1234:18" pos:end="1234:34">server_enable_pop</name></name></expr>)</condition> <block pos:start="1234:37" pos:end="1271:9">{<block_content pos:start="1235:13" pos:end="1270:13">
	    <expr_stmt pos:start="1235:13" pos:end="1235:83"><expr pos:start="1235:13" pos:end="1235:82"><name pos:start="1235:13" pos:end="1235:14">rv</name> <operator pos:start="1235:16" pos:end="1235:16">=</operator> <call pos:start="1235:18" pos:end="1235:82"><name pos:start="1235:18" pos:end="1235:49">est_is_challengePassword_present</name><argument_list pos:start="1235:50" pos:end="1235:82">(<argument pos:start="1235:51" pos:end="1235:58"><expr pos:start="1235:51" pos:end="1235:58"><name pos:start="1235:51" pos:end="1235:58">csr_data</name></expr></argument>, <argument pos:start="1235:61" pos:end="1235:67"><expr pos:start="1235:61" pos:end="1235:67"><name pos:start="1235:61" pos:end="1235:67">csr_len</name></expr></argument>, <argument pos:start="1235:70" pos:end="1235:81"><expr pos:start="1235:70" pos:end="1235:81"><operator pos:start="1235:70" pos:end="1235:70">&amp;</operator><name pos:start="1235:71" pos:end="1235:81">pop_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="1236:13" pos:end="1243:13"><if pos:start="1236:13" pos:end="1243:13">if <condition pos:start="1236:16" pos:end="1236:35">(<expr pos:start="1236:17" pos:end="1236:34"><name pos:start="1236:17" pos:end="1236:18">rv</name> <operator pos:start="1236:20" pos:end="1236:21">!=</operator> <name pos:start="1236:23" pos:end="1236:34">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1236:37" pos:end="1243:13">{<block_content pos:start="1237:17" pos:end="1242:38">
		<expr_stmt pos:start="1237:17" pos:end="1237:61"><expr pos:start="1237:17" pos:end="1237:60"><call pos:start="1237:17" pos:end="1237:60"><name pos:start="1237:17" pos:end="1237:27">EST_LOG_ERR</name><argument_list pos:start="1237:28" pos:end="1237:60">(<argument pos:start="1237:29" pos:end="1237:59"><expr pos:start="1237:29" pos:end="1237:59"><literal type="string" pos:start="1237:29" pos:end="1237:59">"Error during PoP/sanity check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="1238:17" pos:end="1240:17"><if pos:start="1238:17" pos:end="1240:17">if <condition pos:start="1238:20" pos:end="1238:29">(<expr pos:start="1238:21" pos:end="1238:28"><name pos:start="1238:21" pos:end="1238:28">csr_data</name></expr>)</condition> <block pos:start="1238:31" pos:end="1240:17">{<block_content pos:start="1239:21" pos:end="1239:35">
		    <expr_stmt pos:start="1239:21" pos:end="1239:35"><expr pos:start="1239:21" pos:end="1239:34"><call pos:start="1239:21" pos:end="1239:34"><name pos:start="1239:21" pos:end="1239:24">free</name><argument_list pos:start="1239:25" pos:end="1239:34">(<argument pos:start="1239:26" pos:end="1239:33"><expr pos:start="1239:26" pos:end="1239:33"><name pos:start="1239:26" pos:end="1239:33">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="1241:17" pos:end="1241:76"><expr pos:start="1241:17" pos:end="1241:75"><call pos:start="1241:17" pos:end="1241:75"><name pos:start="1241:17" pos:end="1241:35">est_send_http_error</name><argument_list pos:start="1241:36" pos:end="1241:75">(<argument pos:start="1241:37" pos:end="1241:39"><expr pos:start="1241:37" pos:end="1241:39"><name pos:start="1241:37" pos:end="1241:39">ctx</name></expr></argument>, <argument pos:start="1241:42" pos:end="1241:49"><expr pos:start="1241:42" pos:end="1241:49"><name pos:start="1241:42" pos:end="1241:49">http_ctx</name></expr></argument>, <argument pos:start="1241:52" pos:end="1241:74"><expr pos:start="1241:52" pos:end="1241:74"><name pos:start="1241:52" pos:end="1241:74">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="1242:17" pos:end="1242:38">return <expr pos:start="1242:24" pos:end="1242:37"><operator pos:start="1242:24" pos:end="1242:24">(</operator><name pos:start="1242:25" pos:end="1242:36">EST_ERR_NONE</name><operator pos:start="1242:37" pos:end="1242:37">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt pos:start="1244:13" pos:end="1244:47"><expr pos:start="1244:13" pos:end="1244:46"><name pos:start="1244:13" pos:end="1244:32"><name pos:start="1244:13" pos:end="1244:15">ctx</name><operator pos:start="1244:16" pos:end="1244:17">-&gt;</operator><name pos:start="1244:18" pos:end="1244:32">csr_pop_present</name></name> <operator pos:start="1244:34" pos:end="1244:34">=</operator> <name pos:start="1244:36" pos:end="1244:46">pop_present</name></expr>;</expr_stmt>

	    <if_stmt pos:start="1246:13" pos:end="1270:13"><if pos:start="1246:13" pos:end="1270:13">if <condition pos:start="1246:16" pos:end="1246:38">(<expr pos:start="1246:17" pos:end="1246:37"><operator pos:start="1246:17" pos:end="1246:17">!</operator><name pos:start="1246:18" pos:end="1246:37"><name pos:start="1246:18" pos:end="1246:20">ctx</name><operator pos:start="1246:21" pos:end="1246:22">-&gt;</operator><name pos:start="1246:23" pos:end="1246:37">csr_pop_present</name></name></expr>)</condition> <block pos:start="1246:40" pos:end="1270:13">{<block_content pos:start="1247:17" pos:end="1269:38">
		<if_stmt pos:start="1247:17" pos:end="1257:17"><if pos:start="1247:17" pos:end="1257:17">if <condition pos:start="1247:20" pos:end="1247:33">(<expr pos:start="1247:21" pos:end="1247:32"><name pos:start="1247:21" pos:end="1247:27">csr_len</name> <operator pos:start="1247:29" pos:end="1247:30">==</operator> <literal type="number" pos:start="1247:32" pos:end="1247:32">0</literal></expr>)</condition> <block pos:start="1247:35" pos:end="1257:17">{<block_content pos:start="1248:21" pos:end="1256:85">
                    <expr_stmt pos:start="1248:21" pos:end="1248:64"><expr pos:start="1248:21" pos:end="1248:63"><name pos:start="1248:21" pos:end="1248:28">csr_data</name> <operator pos:start="1248:30" pos:end="1248:30">=</operator> <call pos:start="1248:32" pos:end="1248:63"><name pos:start="1248:32" pos:end="1248:37">malloc</name><argument_list pos:start="1248:38" pos:end="1248:63">(<argument pos:start="1248:39" pos:end="1248:62"><expr pos:start="1248:39" pos:end="1248:62"><name pos:start="1248:39" pos:end="1248:58">EST_CSRATTRS_POP_LEN</name> <operator pos:start="1248:60" pos:end="1248:60">+</operator> <literal type="number" pos:start="1248:62" pos:end="1248:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt pos:start="1249:21" pos:end="1251:21"><if pos:start="1249:21" pos:end="1251:21">if <condition pos:start="1249:24" pos:end="1249:34">(<expr pos:start="1249:25" pos:end="1249:33"><operator pos:start="1249:25" pos:end="1249:25">!</operator><name pos:start="1249:26" pos:end="1249:33">csr_data</name></expr>)</condition> <block pos:start="1249:36" pos:end="1251:21">{<block_content pos:start="1250:25" pos:end="1250:48">
			<return pos:start="1250:25" pos:end="1250:48">return <expr pos:start="1250:32" pos:end="1250:47"><operator pos:start="1250:32" pos:end="1250:32">(</operator><name pos:start="1250:33" pos:end="1250:46">EST_ERR_MALLOC</name><operator pos:start="1250:47" pos:end="1250:47">)</operator></expr>;</return>
		    </block_content>}</block></if></if_stmt>
		    <expr_stmt pos:start="1252:21" pos:end="1253:70"><expr pos:start="1252:21" pos:end="1253:69"><call pos:start="1252:21" pos:end="1253:69"><name pos:start="1252:21" pos:end="1252:29">strncpy_s</name><argument_list pos:start="1252:30" pos:end="1253:69">(<argument pos:start="1252:31" pos:end="1252:38"><expr pos:start="1252:31" pos:end="1252:38"><name pos:start="1252:31" pos:end="1252:38">csr_data</name></expr></argument>, <argument pos:start="1252:41" pos:end="1252:64"><expr pos:start="1252:41" pos:end="1252:64"><name pos:start="1252:41" pos:end="1252:60">EST_CSRATTRS_POP_LEN</name> <operator pos:start="1252:62" pos:end="1252:62">+</operator> <literal type="number" pos:start="1252:64" pos:end="1252:64">1</literal></expr></argument>, 
			      <argument pos:start="1253:31" pos:end="1253:46"><expr pos:start="1253:31" pos:end="1253:46"><name pos:start="1253:31" pos:end="1253:46">EST_CSRATTRS_POP</name></expr></argument>, <argument pos:start="1253:49" pos:end="1253:68"><expr pos:start="1253:49" pos:end="1253:68"><name pos:start="1253:49" pos:end="1253:68">EST_CSRATTRS_POP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="1254:21" pos:end="1254:55"><expr pos:start="1254:21" pos:end="1254:54"><name pos:start="1254:21" pos:end="1254:50"><name pos:start="1254:21" pos:end="1254:28">csr_data</name><index pos:start="1254:29" pos:end="1254:50">[<expr pos:start="1254:30" pos:end="1254:49"><name pos:start="1254:30" pos:end="1254:49">EST_CSRATTRS_POP_LEN</name></expr>]</index></name> <operator pos:start="1254:52" pos:end="1254:52">=</operator> <literal type="number" pos:start="1254:54" pos:end="1254:54">0</literal></expr>;</expr_stmt>
		    <expr_stmt pos:start="1255:21" pos:end="1255:51"><expr pos:start="1255:21" pos:end="1255:50"><name pos:start="1255:21" pos:end="1255:27">csr_len</name> <operator pos:start="1255:29" pos:end="1255:29">=</operator> <name pos:start="1255:31" pos:end="1255:50">EST_CSRATTRS_POP_LEN</name></expr>;</expr_stmt>
		    <return pos:start="1256:21" pos:end="1256:85">return <expr pos:start="1256:28" pos:end="1256:84"><operator pos:start="1256:28" pos:end="1256:28">(</operator><call pos:start="1256:29" pos:end="1256:83"><name pos:start="1256:29" pos:end="1256:49">est_send_csrattr_data</name><argument_list pos:start="1256:50" pos:end="1256:83">(<argument pos:start="1256:51" pos:end="1256:53"><expr pos:start="1256:51" pos:end="1256:53"><name pos:start="1256:51" pos:end="1256:53">ctx</name></expr></argument>, <argument pos:start="1256:56" pos:end="1256:63"><expr pos:start="1256:56" pos:end="1256:63"><name pos:start="1256:56" pos:end="1256:63">csr_data</name></expr></argument>, <argument pos:start="1256:66" pos:end="1256:72"><expr pos:start="1256:66" pos:end="1256:72"><name pos:start="1256:66" pos:end="1256:72">csr_len</name></expr></argument>, <argument pos:start="1256:75" pos:end="1256:82"><expr pos:start="1256:75" pos:end="1256:82"><name pos:start="1256:75" pos:end="1256:82">http_ctx</name></expr></argument>)</argument_list></call><operator pos:start="1256:84" pos:end="1256:84">)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="1258:17" pos:end="1258:95"><expr pos:start="1258:17" pos:end="1258:94"><name pos:start="1258:17" pos:end="1258:18">rv</name> <operator pos:start="1258:20" pos:end="1258:20">=</operator> <call pos:start="1258:22" pos:end="1258:94"><name pos:start="1258:22" pos:end="1258:46">est_add_challengePassword</name><argument_list pos:start="1258:47" pos:end="1258:94">(<argument pos:start="1258:48" pos:end="1258:55"><expr pos:start="1258:48" pos:end="1258:55"><name pos:start="1258:48" pos:end="1258:55">csr_data</name></expr></argument>, <argument pos:start="1258:58" pos:end="1258:64"><expr pos:start="1258:58" pos:end="1258:64"><name pos:start="1258:58" pos:end="1258:64">csr_len</name></expr></argument>, <argument pos:start="1258:67" pos:end="1258:79"><expr pos:start="1258:67" pos:end="1258:79"><operator pos:start="1258:67" pos:end="1258:67">&amp;</operator><name pos:start="1258:68" pos:end="1258:79">csr_data_pop</name></expr></argument>, <argument pos:start="1258:82" pos:end="1258:93"><expr pos:start="1258:82" pos:end="1258:93"><operator pos:start="1258:82" pos:end="1258:82">&amp;</operator><name pos:start="1258:83" pos:end="1258:93">csr_pop_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="1259:17" pos:end="1266:17"><if pos:start="1259:17" pos:end="1266:17">if <condition pos:start="1259:20" pos:end="1259:39">(<expr pos:start="1259:21" pos:end="1259:38"><name pos:start="1259:21" pos:end="1259:22">rv</name> <operator pos:start="1259:24" pos:end="1259:25">!=</operator> <name pos:start="1259:27" pos:end="1259:38">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1259:41" pos:end="1266:17">{<block_content pos:start="1260:21" pos:end="1265:42">
		    <if_stmt pos:start="1260:21" pos:end="1262:21"><if pos:start="1260:21" pos:end="1262:21">if <condition pos:start="1260:24" pos:end="1260:33">(<expr pos:start="1260:25" pos:end="1260:32"><name pos:start="1260:25" pos:end="1260:32">csr_data</name></expr>)</condition> <block pos:start="1260:35" pos:end="1262:21">{<block_content pos:start="1261:25" pos:end="1261:39">
		        <expr_stmt pos:start="1261:25" pos:end="1261:39"><expr pos:start="1261:25" pos:end="1261:38"><call pos:start="1261:25" pos:end="1261:38"><name pos:start="1261:25" pos:end="1261:28">free</name><argument_list pos:start="1261:29" pos:end="1261:38">(<argument pos:start="1261:30" pos:end="1261:37"><expr pos:start="1261:30" pos:end="1261:37"><name pos:start="1261:30" pos:end="1261:37">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		    <expr_stmt pos:start="1263:21" pos:end="1263:56"><expr pos:start="1263:21" pos:end="1263:55"><call pos:start="1263:21" pos:end="1263:55"><name pos:start="1263:21" pos:end="1263:31">EST_LOG_ERR</name><argument_list pos:start="1263:32" pos:end="1263:55">(<argument pos:start="1263:33" pos:end="1263:54"><expr pos:start="1263:33" pos:end="1263:54"><literal type="string" pos:start="1263:33" pos:end="1263:54">"Error during add PoP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="1264:21" pos:end="1264:80"><expr pos:start="1264:21" pos:end="1264:79"><call pos:start="1264:21" pos:end="1264:79"><name pos:start="1264:21" pos:end="1264:39">est_send_http_error</name><argument_list pos:start="1264:40" pos:end="1264:79">(<argument pos:start="1264:41" pos:end="1264:43"><expr pos:start="1264:41" pos:end="1264:43"><name pos:start="1264:41" pos:end="1264:43">ctx</name></expr></argument>, <argument pos:start="1264:46" pos:end="1264:53"><expr pos:start="1264:46" pos:end="1264:53"><name pos:start="1264:46" pos:end="1264:53">http_ctx</name></expr></argument>, <argument pos:start="1264:56" pos:end="1264:78"><expr pos:start="1264:56" pos:end="1264:78"><name pos:start="1264:56" pos:end="1264:78">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <return pos:start="1265:21" pos:end="1265:42">return <expr pos:start="1265:28" pos:end="1265:41"><operator pos:start="1265:28" pos:end="1265:28">(</operator><name pos:start="1265:29" pos:end="1265:40">EST_ERR_NONE</name><operator pos:start="1265:41" pos:end="1265:41">)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="1267:17" pos:end="1267:31"><expr pos:start="1267:17" pos:end="1267:30"><call pos:start="1267:17" pos:end="1267:30"><name pos:start="1267:17" pos:end="1267:20">free</name><argument_list pos:start="1267:21" pos:end="1267:30">(<argument pos:start="1267:22" pos:end="1267:29"><expr pos:start="1267:22" pos:end="1267:29"><name pos:start="1267:22" pos:end="1267:29">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="1268:17" pos:end="1268:40"><expr pos:start="1268:17" pos:end="1268:39"><name pos:start="1268:17" pos:end="1268:24">csr_data</name> <operator pos:start="1268:26" pos:end="1268:26">=</operator> <name pos:start="1268:28" pos:end="1268:39">csr_data_pop</name></expr>;</expr_stmt>
		<expr_stmt pos:start="1269:17" pos:end="1269:38"><expr pos:start="1269:17" pos:end="1269:37"><name pos:start="1269:17" pos:end="1269:23">csr_len</name> <operator pos:start="1269:25" pos:end="1269:25">=</operator> <name pos:start="1269:27" pos:end="1269:37">csr_pop_len</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="1272:7" pos:end="1281:5">else <block pos:start="1272:12" pos:end="1281:5">{<block_content pos:start="1273:9" pos:end="1280:43">
        <expr_stmt pos:start="1273:9" pos:end="1273:56"><expr pos:start="1273:9" pos:end="1273:55"><name pos:start="1273:9" pos:end="1273:16">csr_data</name> <operator pos:start="1273:18" pos:end="1273:18">=</operator> <call pos:start="1273:20" pos:end="1273:55"><name pos:start="1273:20" pos:end="1273:25">malloc</name><argument_list pos:start="1273:26" pos:end="1273:55">(<argument pos:start="1273:27" pos:end="1273:54"><expr pos:start="1273:27" pos:end="1273:54"><name pos:start="1273:27" pos:end="1273:50"><name pos:start="1273:27" pos:end="1273:29">ctx</name><operator pos:start="1273:30" pos:end="1273:31">-&gt;</operator><name pos:start="1273:32" pos:end="1273:50">server_csrattrs_len</name></name> <operator pos:start="1273:52" pos:end="1273:52">+</operator> <literal type="number" pos:start="1273:54" pos:end="1273:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1274:9" pos:end="1276:9"><if pos:start="1274:9" pos:end="1276:9">if <condition pos:start="1274:12" pos:end="1274:22">(<expr pos:start="1274:13" pos:end="1274:21"><operator pos:start="1274:13" pos:end="1274:13">!</operator><name pos:start="1274:14" pos:end="1274:21">csr_data</name></expr>)</condition> <block pos:start="1274:24" pos:end="1276:9">{<block_content pos:start="1275:13" pos:end="1275:36">
            <return pos:start="1275:13" pos:end="1275:36">return <expr pos:start="1275:20" pos:end="1275:35"><operator pos:start="1275:20" pos:end="1275:20">(</operator><name pos:start="1275:21" pos:end="1275:34">EST_ERR_MALLOC</name><operator pos:start="1275:35" pos:end="1275:35">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1277:9" pos:end="1278:74"><expr pos:start="1277:9" pos:end="1278:73"><call pos:start="1277:9" pos:end="1278:73"><name pos:start="1277:9" pos:end="1277:17">strncpy_s</name><argument_list pos:start="1277:18" pos:end="1278:73">(<argument pos:start="1277:19" pos:end="1277:26"><expr pos:start="1277:19" pos:end="1277:26"><name pos:start="1277:19" pos:end="1277:26">csr_data</name></expr></argument>, <argument pos:start="1277:29" pos:end="1277:56"><expr pos:start="1277:29" pos:end="1277:56"><name pos:start="1277:29" pos:end="1277:52"><name pos:start="1277:29" pos:end="1277:31">ctx</name><operator pos:start="1277:32" pos:end="1277:33">-&gt;</operator><name pos:start="1277:34" pos:end="1277:52">server_csrattrs_len</name></name> <operator pos:start="1277:54" pos:end="1277:54">+</operator> <literal type="number" pos:start="1277:56" pos:end="1277:56">1</literal></expr></argument>, 
		  <argument pos:start="1278:19" pos:end="1278:46"><expr pos:start="1278:19" pos:end="1278:46"><operator pos:start="1278:19" pos:end="1278:19">(</operator><name pos:start="1278:20" pos:end="1278:23">char</name> <operator pos:start="1278:25" pos:end="1278:25">*</operator><operator pos:start="1278:26" pos:end="1278:26">)</operator><name pos:start="1278:27" pos:end="1278:46"><name pos:start="1278:27" pos:end="1278:29">ctx</name><operator pos:start="1278:30" pos:end="1278:31">-&gt;</operator><name pos:start="1278:32" pos:end="1278:46">server_csrattrs</name></name></expr></argument>, <argument pos:start="1278:49" pos:end="1278:72"><expr pos:start="1278:49" pos:end="1278:72"><name pos:start="1278:49" pos:end="1278:72"><name pos:start="1278:49" pos:end="1278:51">ctx</name><operator pos:start="1278:52" pos:end="1278:53">-&gt;</operator><name pos:start="1278:54" pos:end="1278:72">server_csrattrs_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1279:9" pos:end="1279:47"><expr pos:start="1279:9" pos:end="1279:46"><name pos:start="1279:9" pos:end="1279:42"><name pos:start="1279:9" pos:end="1279:16">csr_data</name><index pos:start="1279:17" pos:end="1279:42">[<expr pos:start="1279:18" pos:end="1279:41"><name pos:start="1279:18" pos:end="1279:41"><name pos:start="1279:18" pos:end="1279:20">ctx</name><operator pos:start="1279:21" pos:end="1279:22">-&gt;</operator><name pos:start="1279:23" pos:end="1279:41">server_csrattrs_len</name></name></expr>]</index></name> <operator pos:start="1279:44" pos:end="1279:44">=</operator> <literal type="number" pos:start="1279:46" pos:end="1279:46">0</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="1280:9" pos:end="1280:43"><expr pos:start="1280:9" pos:end="1280:42"><name pos:start="1280:9" pos:end="1280:15">csr_len</name> <operator pos:start="1280:17" pos:end="1280:17">=</operator> <name pos:start="1280:19" pos:end="1280:42"><name pos:start="1280:19" pos:end="1280:21">ctx</name><operator pos:start="1280:22" pos:end="1280:23">-&gt;</operator><name pos:start="1280:24" pos:end="1280:42">server_csrattrs_len</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="1282:5" pos:end="1282:69">return <expr pos:start="1282:12" pos:end="1282:68"><operator pos:start="1282:12" pos:end="1282:12">(</operator><call pos:start="1282:13" pos:end="1282:67"><name pos:start="1282:13" pos:end="1282:33">est_send_csrattr_data</name><argument_list pos:start="1282:34" pos:end="1282:67">(<argument pos:start="1282:35" pos:end="1282:37"><expr pos:start="1282:35" pos:end="1282:37"><name pos:start="1282:35" pos:end="1282:37">ctx</name></expr></argument>, <argument pos:start="1282:40" pos:end="1282:47"><expr pos:start="1282:40" pos:end="1282:47"><name pos:start="1282:40" pos:end="1282:47">csr_data</name></expr></argument>, <argument pos:start="1282:50" pos:end="1282:56"><expr pos:start="1282:50" pos:end="1282:56"><name pos:start="1282:50" pos:end="1282:56">csr_len</name></expr></argument>, <argument pos:start="1282:59" pos:end="1282:66"><expr pos:start="1282:59" pos:end="1282:66"><name pos:start="1282:59" pos:end="1282:66">http_ctx</name></expr></argument>)</argument_list></call><operator pos:start="1282:68" pos:end="1282:68">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1284:1" pos:end="1298:3">/*
 * This function should be called by the web server layer when
 * a HTTP request arrives on the listening port of the EST server.
 * It will determine the EST request type and dispatch the request
 * to the appropriate handler.
 *
 * Paramters:
 *      ctx:	    Pointer to EST_CTX
 *      http_ctx:   Context pointer from web server
 *      method:     The HTML method in the request, should be either "GET" or "POST"
 *	uri:	    pointer to HTTP URI
 *	body:	    pointer to full HTML body contents
 *	body_len:   length of HTML body
 *	ct:         HTML content type header
 */</comment>
<function pos:start="1299:1" pos:end="1500:1"><type pos:start="1299:1" pos:end="1299:3"><name pos:start="1299:1" pos:end="1299:3">int</name></type> <name pos:start="1299:5" pos:end="1299:20">est_http_request</name> <parameter_list pos:start="1299:22" pos:end="1301:63">(<parameter pos:start="1299:23" pos:end="1299:34"><decl pos:start="1299:23" pos:end="1299:34"><type pos:start="1299:23" pos:end="1299:34"><name pos:start="1299:23" pos:end="1299:29">EST_CTX</name> <modifier pos:start="1299:31" pos:end="1299:31">*</modifier></type><name pos:start="1299:32" pos:end="1299:34">ctx</name></decl></parameter>, <parameter pos:start="1299:37" pos:end="1299:50"><decl pos:start="1299:37" pos:end="1299:50"><type pos:start="1299:37" pos:end="1299:50"><name pos:start="1299:37" pos:end="1299:40">void</name> <modifier pos:start="1299:42" pos:end="1299:42">*</modifier></type><name pos:start="1299:43" pos:end="1299:50">http_ctx</name></decl></parameter>,
                      <parameter pos:start="1300:23" pos:end="1300:34"><decl pos:start="1300:23" pos:end="1300:34"><type pos:start="1300:23" pos:end="1300:34"><name pos:start="1300:23" pos:end="1300:26">char</name> <modifier pos:start="1300:28" pos:end="1300:28">*</modifier></type><name pos:start="1300:29" pos:end="1300:34">method</name></decl></parameter>, <parameter pos:start="1300:37" pos:end="1300:45"><decl pos:start="1300:37" pos:end="1300:45"><type pos:start="1300:37" pos:end="1300:45"><name pos:start="1300:37" pos:end="1300:40">char</name> <modifier pos:start="1300:42" pos:end="1300:42">*</modifier></type><name pos:start="1300:43" pos:end="1300:45">uri</name></decl></parameter>,
                      <parameter pos:start="1301:23" pos:end="1301:32"><decl pos:start="1301:23" pos:end="1301:32"><type pos:start="1301:23" pos:end="1301:32"><name pos:start="1301:23" pos:end="1301:26">char</name> <modifier pos:start="1301:28" pos:end="1301:28">*</modifier></type><name pos:start="1301:29" pos:end="1301:32">body</name></decl></parameter>, <parameter pos:start="1301:35" pos:end="1301:46"><decl pos:start="1301:35" pos:end="1301:46"><type pos:start="1301:35" pos:end="1301:46"><name pos:start="1301:35" pos:end="1301:37">int</name></type> <name pos:start="1301:39" pos:end="1301:46">body_len</name></decl></parameter>, <parameter pos:start="1301:49" pos:end="1301:62"><decl pos:start="1301:49" pos:end="1301:62"><type pos:start="1301:49" pos:end="1301:62"><specifier pos:start="1301:49" pos:end="1301:53">const</specifier> <name pos:start="1301:55" pos:end="1301:58">char</name> <modifier pos:start="1301:60" pos:end="1301:60">*</modifier></type><name pos:start="1301:61" pos:end="1301:62">ct</name></decl></parameter>)</parameter_list>
<block pos:start="1302:1" pos:end="1500:1">{<block_content pos:start="1303:5" pos:end="1499:26">
    <decl_stmt pos:start="1303:5" pos:end="1303:13"><decl pos:start="1303:5" pos:end="1303:12"><type pos:start="1303:5" pos:end="1303:9"><name pos:start="1303:5" pos:end="1303:7">SSL</name> <modifier pos:start="1303:9" pos:end="1303:9">*</modifier></type><name pos:start="1303:10" pos:end="1303:12">ssl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1304:5" pos:end="1304:11"><decl pos:start="1304:5" pos:end="1304:10"><type pos:start="1304:5" pos:end="1304:7"><name pos:start="1304:5" pos:end="1304:7">int</name></type> <name pos:start="1304:9" pos:end="1304:10">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1305:5" pos:end="1305:28"><decl pos:start="1305:5" pos:end="1305:27"><type pos:start="1305:5" pos:end="1305:17"><name pos:start="1305:5" pos:end="1305:17">EST_OPERATION</name></type> <name pos:start="1305:19" pos:end="1305:27">operation</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1306:5" pos:end="1306:19"><decl pos:start="1306:5" pos:end="1306:18"><type pos:start="1306:5" pos:end="1306:10"><name pos:start="1306:5" pos:end="1306:8">char</name> <modifier pos:start="1306:10" pos:end="1306:10">*</modifier></type><name pos:start="1306:11" pos:end="1306:18">path_seg</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1307:5" pos:end="1307:32"><decl pos:start="1307:5" pos:end="1307:31"><type pos:start="1307:5" pos:end="1307:13"><name pos:start="1307:5" pos:end="1307:13">EST_ERROR</name></type> <name pos:start="1307:15" pos:end="1307:16">rv</name> <init pos:start="1307:18" pos:end="1307:31">= <expr pos:start="1307:20" pos:end="1307:31"><name pos:start="1307:20" pos:end="1307:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt pos:start="1309:5" pos:end="1312:5"><if pos:start="1309:5" pos:end="1312:5">if <condition pos:start="1309:8" pos:end="1309:13">(<expr pos:start="1309:9" pos:end="1309:12"><operator pos:start="1309:9" pos:end="1309:9">!</operator><name pos:start="1309:10" pos:end="1309:12">ctx</name></expr>)</condition> <block pos:start="1309:15" pos:end="1312:5">{<block_content pos:start="1310:9" pos:end="1311:32">
	<expr_stmt pos:start="1310:9" pos:end="1310:36"><expr pos:start="1310:9" pos:end="1310:35"><call pos:start="1310:9" pos:end="1310:35"><name pos:start="1310:9" pos:end="1310:19">EST_LOG_ERR</name><argument_list pos:start="1310:20" pos:end="1310:35">(<argument pos:start="1310:21" pos:end="1310:34"><expr pos:start="1310:21" pos:end="1310:34"><literal type="string" pos:start="1310:21" pos:end="1310:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1311:9" pos:end="1311:32">return <expr pos:start="1311:16" pos:end="1311:31"><operator pos:start="1311:16" pos:end="1311:16">(</operator><name pos:start="1311:17" pos:end="1311:30">EST_ERR_NO_CTX</name><operator pos:start="1311:31" pos:end="1311:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1314:5" pos:end="1316:7">/*
     * Verify the context is for a server, not a client
     */</comment>
    <if_stmt pos:start="1317:5" pos:end="1319:5"><if pos:start="1317:5" pos:end="1319:5">if <condition pos:start="1317:8" pos:end="1317:36">(<expr pos:start="1317:9" pos:end="1317:35"><name pos:start="1317:9" pos:end="1317:21"><name pos:start="1317:9" pos:end="1317:11">ctx</name><operator pos:start="1317:12" pos:end="1317:13">-&gt;</operator><name pos:start="1317:14" pos:end="1317:21">est_mode</name></name> <operator pos:start="1317:23" pos:end="1317:24">!=</operator> <name pos:start="1317:26" pos:end="1317:35">EST_SERVER</name></expr>)</condition> <block pos:start="1317:38" pos:end="1319:5">{<block_content pos:start="1318:9" pos:end="1318:34">
        <return pos:start="1318:9" pos:end="1318:34">return <expr pos:start="1318:16" pos:end="1318:33"><operator pos:start="1318:16" pos:end="1318:16">(</operator><name pos:start="1318:17" pos:end="1318:32">EST_ERR_BAD_MODE</name><operator pos:start="1318:33" pos:end="1318:33">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1321:5" pos:end="1321:60"><expr pos:start="1321:5" pos:end="1321:59"><name pos:start="1321:5" pos:end="1321:6">rv</name> <operator pos:start="1321:8" pos:end="1321:8">=</operator> <call pos:start="1321:10" pos:end="1321:59"><name pos:start="1321:10" pos:end="1321:22">est_parse_uri</name><argument_list pos:start="1321:23" pos:end="1321:59">(<argument pos:start="1321:24" pos:end="1321:26"><expr pos:start="1321:24" pos:end="1321:26"><name pos:start="1321:24" pos:end="1321:26">uri</name></expr></argument>, <argument pos:start="1321:29" pos:end="1321:38"><expr pos:start="1321:29" pos:end="1321:38"><operator pos:start="1321:29" pos:end="1321:29">&amp;</operator><name pos:start="1321:30" pos:end="1321:38">operation</name></expr></argument>, <argument pos:start="1321:41" pos:end="1321:58"><expr pos:start="1321:41" pos:end="1321:58"><operator pos:start="1321:41" pos:end="1321:41">(</operator><name pos:start="1321:42" pos:end="1321:45">char</name> <operator pos:start="1321:47" pos:end="1321:47">*</operator><operator pos:start="1321:48" pos:end="1321:48">*</operator><operator pos:start="1321:49" pos:end="1321:49">)</operator><operator pos:start="1321:50" pos:end="1321:50">&amp;</operator><name pos:start="1321:51" pos:end="1321:58">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1322:5" pos:end="1325:5"><if pos:start="1322:5" pos:end="1325:5">if <condition pos:start="1322:8" pos:end="1322:27">(<expr pos:start="1322:9" pos:end="1322:26"><name pos:start="1322:9" pos:end="1322:10">rv</name> <operator pos:start="1322:12" pos:end="1322:13">!=</operator> <name pos:start="1322:15" pos:end="1322:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1322:29" pos:end="1325:5">{<block_content pos:start="1323:9" pos:end="1324:20">
        <expr_stmt pos:start="1323:9" pos:end="1323:47"><expr pos:start="1323:9" pos:end="1323:46"><call pos:start="1323:9" pos:end="1323:46"><name pos:start="1323:9" pos:end="1323:27">est_send_http_error</name><argument_list pos:start="1323:28" pos:end="1323:46">(<argument pos:start="1323:29" pos:end="1323:31"><expr pos:start="1323:29" pos:end="1323:31"><name pos:start="1323:29" pos:end="1323:31">ctx</name></expr></argument>, <argument pos:start="1323:34" pos:end="1323:41"><expr pos:start="1323:34" pos:end="1323:41"><name pos:start="1323:34" pos:end="1323:41">http_ctx</name></expr></argument>, <argument pos:start="1323:44" pos:end="1323:45"><expr pos:start="1323:44" pos:end="1323:45"><name pos:start="1323:44" pos:end="1323:45">rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1324:9" pos:end="1324:20">return <expr pos:start="1324:16" pos:end="1324:19"><operator pos:start="1324:16" pos:end="1324:16">(</operator><name pos:start="1324:17" pos:end="1324:18">rv</name><operator pos:start="1324:19" pos:end="1324:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1327:5" pos:end="1329:7">/*
     * See if this is a cacerts request
     */</comment>
    <if_stmt pos:start="1330:5" pos:end="1495:5"><if pos:start="1330:5" pos:end="1349:5">if <condition pos:start="1330:8" pos:end="1330:36">(<expr pos:start="1330:9" pos:end="1330:35"><name pos:start="1330:9" pos:end="1330:17">operation</name> <operator pos:start="1330:19" pos:end="1330:20">==</operator> <name pos:start="1330:22" pos:end="1330:35">EST_OP_CACERTS</name></expr>)</condition> <block pos:start="1330:38" pos:end="1349:5">{<block_content pos:start="1332:9" pos:end="1348:9">
        <comment type="block" pos:start="1331:9" pos:end="1331:33">/* Only GET is allowed */</comment>
        <if_stmt pos:start="1332:9" pos:end="1337:9"><if pos:start="1332:9" pos:end="1337:9">if <condition pos:start="1332:12" pos:end="1332:38">(<expr pos:start="1332:13" pos:end="1332:37"><call pos:start="1332:13" pos:end="1332:37"><name pos:start="1332:13" pos:end="1332:19">strncmp</name><argument_list pos:start="1332:20" pos:end="1332:37">(<argument pos:start="1332:21" pos:end="1332:26"><expr pos:start="1332:21" pos:end="1332:26"><name pos:start="1332:21" pos:end="1332:26">method</name></expr></argument>, <argument pos:start="1332:29" pos:end="1332:33"><expr pos:start="1332:29" pos:end="1332:33"><literal type="string" pos:start="1332:29" pos:end="1332:33">"GET"</literal></expr></argument>, <argument pos:start="1332:36" pos:end="1332:36"><expr pos:start="1332:36" pos:end="1332:36"><literal type="number" pos:start="1332:36" pos:end="1332:36">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1332:40" pos:end="1337:9">{<block_content pos:start="1333:13" pos:end="1336:42">
            <expr_stmt pos:start="1333:13" pos:end="1333:69"><expr pos:start="1333:13" pos:end="1333:68"><call pos:start="1333:13" pos:end="1333:68"><name pos:start="1333:13" pos:end="1333:31">est_send_http_error</name><argument_list pos:start="1333:32" pos:end="1333:68">(<argument pos:start="1333:33" pos:end="1333:35"><expr pos:start="1333:33" pos:end="1333:35"><name pos:start="1333:33" pos:end="1333:35">ctx</name></expr></argument>, <argument pos:start="1333:38" pos:end="1333:45"><expr pos:start="1333:38" pos:end="1333:45"><name pos:start="1333:38" pos:end="1333:45">http_ctx</name></expr></argument>, <argument pos:start="1333:48" pos:end="1333:67"><expr pos:start="1333:48" pos:end="1333:67"><name pos:start="1333:48" pos:end="1333:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1334:13" pos:end="1334:27"><expr pos:start="1334:13" pos:end="1334:26"><call pos:start="1334:13" pos:end="1334:26"><name pos:start="1334:13" pos:end="1334:16">free</name><argument_list pos:start="1334:17" pos:end="1334:26">(<argument pos:start="1334:18" pos:end="1334:25"><expr pos:start="1334:18" pos:end="1334:25"><name pos:start="1334:18" pos:end="1334:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1335:13" pos:end="1335:28"><expr pos:start="1335:13" pos:end="1335:27"><name pos:start="1335:13" pos:end="1335:20">path_seg</name> <operator pos:start="1335:22" pos:end="1335:22">=</operator> <name pos:start="1335:24" pos:end="1335:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1336:13" pos:end="1336:42">return <expr pos:start="1336:20" pos:end="1336:41"><operator pos:start="1336:20" pos:end="1336:20">(</operator><name pos:start="1336:21" pos:end="1336:40">EST_ERR_WRONG_METHOD</name><operator pos:start="1336:41" pos:end="1336:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1339:9" pos:end="1339:76">/* rc = est_handle_cacerts(ctx, ctx-&gt;ca_certs, ctx-&gt;ca_certs_len, */</comment>
        <comment type="block" pos:start="1340:9" pos:end="1340:58">/*                         http_ctx, path_seg); */</comment>
        <expr_stmt pos:start="1341:9" pos:end="1341:64"><expr pos:start="1341:9" pos:end="1341:63"><name pos:start="1341:9" pos:end="1341:10">rc</name> <operator pos:start="1341:12" pos:end="1341:12">=</operator> <call pos:start="1341:14" pos:end="1341:63"><name pos:start="1341:14" pos:end="1341:38">est_server_handle_cacerts</name><argument_list pos:start="1341:39" pos:end="1341:63">(<argument pos:start="1341:40" pos:end="1341:42"><expr pos:start="1341:40" pos:end="1341:42"><name pos:start="1341:40" pos:end="1341:42">ctx</name></expr></argument>, <argument pos:start="1341:45" pos:end="1341:52"><expr pos:start="1341:45" pos:end="1341:52"><name pos:start="1341:45" pos:end="1341:52">http_ctx</name></expr></argument>, <argument pos:start="1341:55" pos:end="1341:62"><expr pos:start="1341:55" pos:end="1341:62"><name pos:start="1341:55" pos:end="1341:62">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1342:9" pos:end="1342:70">/* rc = est_server_handle_cacerts(ctx, http_ctx, path_seg); */</comment>
        <if_stmt pos:start="1343:9" pos:end="1348:9"><if pos:start="1343:9" pos:end="1348:9">if <condition pos:start="1343:12" pos:end="1343:31">(<expr pos:start="1343:13" pos:end="1343:30"><name pos:start="1343:13" pos:end="1343:14">rc</name> <operator pos:start="1343:16" pos:end="1343:17">!=</operator> <name pos:start="1343:19" pos:end="1343:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1343:33" pos:end="1348:9">{<block_content pos:start="1344:13" pos:end="1347:24">
            <expr_stmt pos:start="1344:13" pos:end="1344:51"><expr pos:start="1344:13" pos:end="1344:50"><call pos:start="1344:13" pos:end="1344:50"><name pos:start="1344:13" pos:end="1344:31">est_send_http_error</name><argument_list pos:start="1344:32" pos:end="1344:50">(<argument pos:start="1344:33" pos:end="1344:35"><expr pos:start="1344:33" pos:end="1344:35"><name pos:start="1344:33" pos:end="1344:35">ctx</name></expr></argument>, <argument pos:start="1344:38" pos:end="1344:45"><expr pos:start="1344:38" pos:end="1344:45"><name pos:start="1344:38" pos:end="1344:45">http_ctx</name></expr></argument>, <argument pos:start="1344:48" pos:end="1344:49"><expr pos:start="1344:48" pos:end="1344:49"><name pos:start="1344:48" pos:end="1344:49">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1345:13" pos:end="1345:27"><expr pos:start="1345:13" pos:end="1345:26"><call pos:start="1345:13" pos:end="1345:26"><name pos:start="1345:13" pos:end="1345:16">free</name><argument_list pos:start="1345:17" pos:end="1345:26">(<argument pos:start="1345:18" pos:end="1345:25"><expr pos:start="1345:18" pos:end="1345:25"><name pos:start="1345:18" pos:end="1345:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1346:13" pos:end="1346:28"><expr pos:start="1346:13" pos:end="1346:27"><name pos:start="1346:13" pos:end="1346:20">path_seg</name> <operator pos:start="1346:22" pos:end="1346:22">=</operator> <name pos:start="1346:24" pos:end="1346:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1347:13" pos:end="1347:24">return <expr pos:start="1347:20" pos:end="1347:23"><operator pos:start="1347:20" pos:end="1347:20">(</operator><name pos:start="1347:21" pos:end="1347:22">rc</name><operator pos:start="1347:23" pos:end="1347:23">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>

    <comment type="block" pos:start="1351:5" pos:end="1353:7">/*
     * See if this is a simple enrollment request
     */</comment>
    <if type="elseif" pos:start="1354:5" pos:end="1396:5">else if <condition pos:start="1354:13" pos:end="1354:47">(<expr pos:start="1354:14" pos:end="1354:46"><name pos:start="1354:14" pos:end="1354:22">operation</name> <operator pos:start="1354:24" pos:end="1354:25">==</operator> <name pos:start="1354:27" pos:end="1354:46">EST_OP_SIMPLE_ENROLL</name></expr>)</condition> <block pos:start="1354:49" pos:end="1396:5">{<block_content pos:start="1356:9" pos:end="1395:9">
        <comment type="block" pos:start="1355:9" pos:end="1355:34">/* Only POST is allowed */</comment>
        <if_stmt pos:start="1356:9" pos:end="1362:9"><if pos:start="1356:9" pos:end="1362:9">if <condition pos:start="1356:12" pos:end="1356:39">(<expr pos:start="1356:13" pos:end="1356:38"><call pos:start="1356:13" pos:end="1356:38"><name pos:start="1356:13" pos:end="1356:19">strncmp</name><argument_list pos:start="1356:20" pos:end="1356:38">(<argument pos:start="1356:21" pos:end="1356:26"><expr pos:start="1356:21" pos:end="1356:26"><name pos:start="1356:21" pos:end="1356:26">method</name></expr></argument>, <argument pos:start="1356:29" pos:end="1356:34"><expr pos:start="1356:29" pos:end="1356:34"><literal type="string" pos:start="1356:29" pos:end="1356:34">"POST"</literal></expr></argument>, <argument pos:start="1356:37" pos:end="1356:37"><expr pos:start="1356:37" pos:end="1356:37"><literal type="number" pos:start="1356:37" pos:end="1356:37">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1356:41" pos:end="1362:9">{<block_content pos:start="1357:13" pos:end="1361:42">
            <expr_stmt pos:start="1357:13" pos:end="1357:70"><expr pos:start="1357:13" pos:end="1357:69"><call pos:start="1357:13" pos:end="1357:69"><name pos:start="1357:13" pos:end="1357:24">EST_LOG_WARN</name><argument_list pos:start="1357:25" pos:end="1357:69">(<argument pos:start="1357:26" pos:end="1357:68"><expr pos:start="1357:26" pos:end="1357:68"><literal type="string" pos:start="1357:26" pos:end="1357:68">"Incoming HTTP request used wrong method\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1358:13" pos:end="1358:69"><expr pos:start="1358:13" pos:end="1358:68"><call pos:start="1358:13" pos:end="1358:68"><name pos:start="1358:13" pos:end="1358:31">est_send_http_error</name><argument_list pos:start="1358:32" pos:end="1358:68">(<argument pos:start="1358:33" pos:end="1358:35"><expr pos:start="1358:33" pos:end="1358:35"><name pos:start="1358:33" pos:end="1358:35">ctx</name></expr></argument>, <argument pos:start="1358:38" pos:end="1358:45"><expr pos:start="1358:38" pos:end="1358:45"><name pos:start="1358:38" pos:end="1358:45">http_ctx</name></expr></argument>, <argument pos:start="1358:48" pos:end="1358:67"><expr pos:start="1358:48" pos:end="1358:67"><name pos:start="1358:48" pos:end="1358:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1359:13" pos:end="1359:27"><expr pos:start="1359:13" pos:end="1359:26"><call pos:start="1359:13" pos:end="1359:26"><name pos:start="1359:13" pos:end="1359:16">free</name><argument_list pos:start="1359:17" pos:end="1359:26">(<argument pos:start="1359:18" pos:end="1359:25"><expr pos:start="1359:18" pos:end="1359:25"><name pos:start="1359:18" pos:end="1359:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1360:13" pos:end="1360:28"><expr pos:start="1360:13" pos:end="1360:27"><name pos:start="1360:13" pos:end="1360:20">path_seg</name> <operator pos:start="1360:22" pos:end="1360:22">=</operator> <name pos:start="1360:24" pos:end="1360:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1361:13" pos:end="1361:42">return <expr pos:start="1361:20" pos:end="1361:41"><operator pos:start="1361:20" pos:end="1361:20">(</operator><name pos:start="1361:21" pos:end="1361:40">EST_ERR_WRONG_METHOD</name><operator pos:start="1361:41" pos:end="1361:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
	<if_stmt pos:start="1363:9" pos:end="1369:9"><if pos:start="1363:9" pos:end="1369:9">if <condition pos:start="1363:12" pos:end="1363:16">(<expr pos:start="1363:13" pos:end="1363:15"><operator pos:start="1363:13" pos:end="1363:13">!</operator><name pos:start="1363:14" pos:end="1363:15">ct</name></expr>)</condition> <block pos:start="1363:18" pos:end="1369:9">{<block_content pos:start="1364:13" pos:end="1368:46">
            <expr_stmt pos:start="1364:13" pos:end="1364:78"><expr pos:start="1364:13" pos:end="1364:77"><call pos:start="1364:13" pos:end="1364:77"><name pos:start="1364:13" pos:end="1364:24">EST_LOG_WARN</name><argument_list pos:start="1364:25" pos:end="1364:77">(<argument pos:start="1364:26" pos:end="1364:76"><expr pos:start="1364:26" pos:end="1364:76"><literal type="string" pos:start="1364:26" pos:end="1364:76">"Incoming HTTP header has no Content-Type header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1365:13" pos:end="1365:67"><expr pos:start="1365:13" pos:end="1365:66"><call pos:start="1365:13" pos:end="1365:66"><name pos:start="1365:13" pos:end="1365:31">est_send_http_error</name><argument_list pos:start="1365:32" pos:end="1365:66">(<argument pos:start="1365:33" pos:end="1365:35"><expr pos:start="1365:33" pos:end="1365:35"><name pos:start="1365:33" pos:end="1365:35">ctx</name></expr></argument>, <argument pos:start="1365:38" pos:end="1365:45"><expr pos:start="1365:38" pos:end="1365:45"><name pos:start="1365:38" pos:end="1365:45">http_ctx</name></expr></argument>, <argument pos:start="1365:48" pos:end="1365:65"><expr pos:start="1365:48" pos:end="1365:65"><name pos:start="1365:48" pos:end="1365:65">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1366:13" pos:end="1366:27"><expr pos:start="1366:13" pos:end="1366:26"><call pos:start="1366:13" pos:end="1366:26"><name pos:start="1366:13" pos:end="1366:16">free</name><argument_list pos:start="1366:17" pos:end="1366:26">(<argument pos:start="1366:18" pos:end="1366:25"><expr pos:start="1366:18" pos:end="1366:25"><name pos:start="1366:18" pos:end="1366:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1367:13" pos:end="1367:28"><expr pos:start="1367:13" pos:end="1367:27"><name pos:start="1367:13" pos:end="1367:20">path_seg</name> <operator pos:start="1367:22" pos:end="1367:22">=</operator> <name pos:start="1367:24" pos:end="1367:27">NULL</name></expr>;</expr_stmt>
	    <return pos:start="1368:13" pos:end="1368:46">return <expr pos:start="1368:20" pos:end="1368:45"><operator pos:start="1368:20" pos:end="1368:20">(</operator><name pos:start="1368:21" pos:end="1368:44">EST_ERR_BAD_CONTENT_TYPE</name><operator pos:start="1368:45" pos:end="1368:45">)</operator></expr>;</return> 
	</block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1370:9" pos:end="1373:11">/*
         * Get the SSL context, which is required for authenticating
         * the client.
         */</comment>
        <expr_stmt pos:start="1374:9" pos:end="1374:46"><expr pos:start="1374:9" pos:end="1374:45"><name pos:start="1374:9" pos:end="1374:11">ssl</name> <operator pos:start="1374:13" pos:end="1374:13">=</operator> <operator pos:start="1374:15" pos:end="1374:15">(</operator><name pos:start="1374:16" pos:end="1374:18">SSL</name><operator pos:start="1374:19" pos:end="1374:19">*</operator><operator pos:start="1374:20" pos:end="1374:20">)</operator><call pos:start="1374:21" pos:end="1374:45"><name pos:start="1374:21" pos:end="1374:35">mg_get_conn_ssl</name><argument_list pos:start="1374:36" pos:end="1374:45">(<argument pos:start="1374:37" pos:end="1374:44"><expr pos:start="1374:37" pos:end="1374:44"><name pos:start="1374:37" pos:end="1374:44">http_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1375:9" pos:end="1380:9"><if pos:start="1375:9" pos:end="1380:9">if <condition pos:start="1375:12" pos:end="1375:17">(<expr pos:start="1375:13" pos:end="1375:16"><operator pos:start="1375:13" pos:end="1375:13">!</operator><name pos:start="1375:14" pos:end="1375:16">ssl</name></expr>)</condition> <block pos:start="1375:19" pos:end="1380:9">{<block_content pos:start="1376:13" pos:end="1379:40">
            <expr_stmt pos:start="1376:13" pos:end="1376:67"><expr pos:start="1376:13" pos:end="1376:66"><call pos:start="1376:13" pos:end="1376:66"><name pos:start="1376:13" pos:end="1376:31">est_send_http_error</name><argument_list pos:start="1376:32" pos:end="1376:66">(<argument pos:start="1376:33" pos:end="1376:35"><expr pos:start="1376:33" pos:end="1376:35"><name pos:start="1376:33" pos:end="1376:35">ctx</name></expr></argument>, <argument pos:start="1376:38" pos:end="1376:45"><expr pos:start="1376:38" pos:end="1376:45"><name pos:start="1376:38" pos:end="1376:45">http_ctx</name></expr></argument>, <argument pos:start="1376:48" pos:end="1376:65"><expr pos:start="1376:48" pos:end="1376:65"><name pos:start="1376:48" pos:end="1376:65">EST_ERR_NO_SSL_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1377:13" pos:end="1377:27"><expr pos:start="1377:13" pos:end="1377:26"><call pos:start="1377:13" pos:end="1377:26"><name pos:start="1377:13" pos:end="1377:16">free</name><argument_list pos:start="1377:17" pos:end="1377:26">(<argument pos:start="1377:18" pos:end="1377:25"><expr pos:start="1377:18" pos:end="1377:25"><name pos:start="1377:18" pos:end="1377:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1378:13" pos:end="1378:28"><expr pos:start="1378:13" pos:end="1378:27"><name pos:start="1378:13" pos:end="1378:20">path_seg</name> <operator pos:start="1378:22" pos:end="1378:22">=</operator> <name pos:start="1378:24" pos:end="1378:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1379:13" pos:end="1379:40">return <expr pos:start="1379:20" pos:end="1379:39"><operator pos:start="1379:20" pos:end="1379:20">(</operator><name pos:start="1379:21" pos:end="1379:38">EST_ERR_NO_SSL_CTX</name><operator pos:start="1379:39" pos:end="1379:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1382:9" pos:end="1383:51"><expr pos:start="1382:9" pos:end="1383:50"><name pos:start="1382:9" pos:end="1382:10">rc</name> <operator pos:start="1382:12" pos:end="1382:12">=</operator> <call pos:start="1382:14" pos:end="1383:50"><name pos:start="1382:14" pos:end="1382:37">est_handle_simple_enroll</name><argument_list pos:start="1382:38" pos:end="1383:50">(<argument pos:start="1382:39" pos:end="1382:41"><expr pos:start="1382:39" pos:end="1382:41"><name pos:start="1382:39" pos:end="1382:41">ctx</name></expr></argument>, <argument pos:start="1382:44" pos:end="1382:51"><expr pos:start="1382:44" pos:end="1382:51"><name pos:start="1382:44" pos:end="1382:51">http_ctx</name></expr></argument>, <argument pos:start="1382:54" pos:end="1382:56"><expr pos:start="1382:54" pos:end="1382:56"><name pos:start="1382:54" pos:end="1382:56">ssl</name></expr></argument>, <argument pos:start="1382:59" pos:end="1382:60"><expr pos:start="1382:59" pos:end="1382:60"><name pos:start="1382:59" pos:end="1382:60">ct</name></expr></argument>, <argument pos:start="1382:63" pos:end="1382:66"><expr pos:start="1382:63" pos:end="1382:66"><name pos:start="1382:63" pos:end="1382:66">body</name></expr></argument>, <argument pos:start="1382:69" pos:end="1382:76"><expr pos:start="1382:69" pos:end="1382:76"><name pos:start="1382:69" pos:end="1382:76">body_len</name></expr></argument>,
                                      <argument pos:start="1383:39" pos:end="1383:46"><expr pos:start="1383:39" pos:end="1383:46"><name pos:start="1383:39" pos:end="1383:46">path_seg</name></expr></argument>, <argument pos:start="1383:49" pos:end="1383:49"><expr pos:start="1383:49" pos:end="1383:49"><literal type="number" pos:start="1383:49" pos:end="1383:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1384:9" pos:end="1395:9"><if pos:start="1384:9" pos:end="1395:9">if <condition pos:start="1384:12" pos:end="1384:61">(<expr pos:start="1384:13" pos:end="1384:60"><name pos:start="1384:13" pos:end="1384:14">rc</name> <operator pos:start="1384:16" pos:end="1384:17">!=</operator> <name pos:start="1384:19" pos:end="1384:30">EST_ERR_NONE</name> <operator pos:start="1384:32" pos:end="1384:33">&amp;&amp;</operator> <name pos:start="1384:35" pos:end="1384:36">rc</name> <operator pos:start="1384:38" pos:end="1384:39">!=</operator> <name pos:start="1384:41" pos:end="1384:60">EST_ERR_AUTH_PENDING</name></expr>)</condition> <block pos:start="1384:63" pos:end="1395:9">{<block_content pos:start="1385:13" pos:end="1394:22">
            <expr_stmt pos:start="1385:13" pos:end="1386:53"><expr pos:start="1385:13" pos:end="1386:52"><call pos:start="1385:13" pos:end="1386:52"><name pos:start="1385:13" pos:end="1385:24">EST_LOG_WARN</name><argument_list pos:start="1385:25" pos:end="1386:52">(<argument pos:start="1385:26" pos:end="1385:62"><expr pos:start="1385:26" pos:end="1385:62"><literal type="string" pos:start="1385:26" pos:end="1385:62">"Enrollment failed with rc=%d (%s)\n"</literal></expr></argument>, 
		         <argument pos:start="1386:26" pos:end="1386:27"><expr pos:start="1386:26" pos:end="1386:27"><name pos:start="1386:26" pos:end="1386:27">rc</name></expr></argument>, <argument pos:start="1386:30" pos:end="1386:51"><expr pos:start="1386:30" pos:end="1386:51"><call pos:start="1386:30" pos:end="1386:51"><name pos:start="1386:30" pos:end="1386:47">EST_ERR_NUM_TO_STR</name><argument_list pos:start="1386:48" pos:end="1386:51">(<argument pos:start="1386:49" pos:end="1386:50"><expr pos:start="1386:49" pos:end="1386:50"><name pos:start="1386:49" pos:end="1386:50">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="1387:13" pos:end="1391:13"><if pos:start="1387:13" pos:end="1389:13">if <condition pos:start="1387:16" pos:end="1387:40">(<expr pos:start="1387:17" pos:end="1387:39"><name pos:start="1387:17" pos:end="1387:18">rc</name> <operator pos:start="1387:20" pos:end="1387:21">==</operator> <name pos:start="1387:23" pos:end="1387:39">EST_ERR_AUTH_FAIL</name></expr>)</condition> <block pos:start="1387:42" pos:end="1389:13">{<block_content pos:start="1388:17" pos:end="1388:70">
		<expr_stmt pos:start="1388:17" pos:end="1388:70"><expr pos:start="1388:17" pos:end="1388:69"><call pos:start="1388:17" pos:end="1388:69"><name pos:start="1388:17" pos:end="1388:35">est_send_http_error</name><argument_list pos:start="1388:36" pos:end="1388:69">(<argument pos:start="1388:37" pos:end="1388:39"><expr pos:start="1388:37" pos:end="1388:39"><name pos:start="1388:37" pos:end="1388:39">ctx</name></expr></argument>, <argument pos:start="1388:42" pos:end="1388:49"><expr pos:start="1388:42" pos:end="1388:49"><name pos:start="1388:42" pos:end="1388:49">http_ctx</name></expr></argument>, <argument pos:start="1388:52" pos:end="1388:68"><expr pos:start="1388:52" pos:end="1388:68"><name pos:start="1388:52" pos:end="1388:68">EST_ERR_AUTH_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else pos:start="1389:15" pos:end="1391:13">else <block pos:start="1389:20" pos:end="1391:13">{<block_content pos:start="1390:17" pos:end="1390:71">
		<expr_stmt pos:start="1390:17" pos:end="1390:71"><expr pos:start="1390:17" pos:end="1390:70"><call pos:start="1390:17" pos:end="1390:70"><name pos:start="1390:17" pos:end="1390:35">est_send_http_error</name><argument_list pos:start="1390:36" pos:end="1390:70">(<argument pos:start="1390:37" pos:end="1390:39"><expr pos:start="1390:37" pos:end="1390:39"><name pos:start="1390:37" pos:end="1390:39">ctx</name></expr></argument>, <argument pos:start="1390:42" pos:end="1390:49"><expr pos:start="1390:42" pos:end="1390:49"><name pos:start="1390:42" pos:end="1390:49">http_ctx</name></expr></argument>, <argument pos:start="1390:52" pos:end="1390:69"><expr pos:start="1390:52" pos:end="1390:69"><name pos:start="1390:52" pos:end="1390:69">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="1392:13" pos:end="1392:27"><expr pos:start="1392:13" pos:end="1392:26"><call pos:start="1392:13" pos:end="1392:26"><name pos:start="1392:13" pos:end="1392:16">free</name><argument_list pos:start="1392:17" pos:end="1392:26">(<argument pos:start="1392:18" pos:end="1392:25"><expr pos:start="1392:18" pos:end="1392:25"><name pos:start="1392:18" pos:end="1392:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1393:13" pos:end="1393:28"><expr pos:start="1393:13" pos:end="1393:27"><name pos:start="1393:13" pos:end="1393:20">path_seg</name> <operator pos:start="1393:22" pos:end="1393:22">=</operator> <name pos:start="1393:24" pos:end="1393:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1394:13" pos:end="1394:22">return <expr pos:start="1394:20" pos:end="1394:21"><name pos:start="1394:20" pos:end="1394:21">rc</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>

    <comment type="block" pos:start="1398:5" pos:end="1400:7">/*
     * See if this is a re-enrollment request
     */</comment>
    <if type="elseif" pos:start="1401:5" pos:end="1467:0">else if <condition pos:start="1401:13" pos:end="1401:49">(<expr pos:start="1401:14" pos:end="1401:48"><name pos:start="1401:14" pos:end="1401:22">operation</name> <operator pos:start="1401:24" pos:end="1401:25">==</operator> <name pos:start="1401:27" pos:end="1401:48">EST_OP_SIMPLE_REENROLL</name></expr>)</condition> <block pos:start="1401:51" pos:end="1467:0">{<block_content pos:start="1403:9" pos:end="1442:9">
        <comment type="block" pos:start="1402:9" pos:end="1402:34">/* Only POST is allowed */</comment>
        <if_stmt pos:start="1403:9" pos:end="1409:9"><if pos:start="1403:9" pos:end="1409:9">if <condition pos:start="1403:12" pos:end="1403:39">(<expr pos:start="1403:13" pos:end="1403:38"><call pos:start="1403:13" pos:end="1403:38"><name pos:start="1403:13" pos:end="1403:19">strncmp</name><argument_list pos:start="1403:20" pos:end="1403:38">(<argument pos:start="1403:21" pos:end="1403:26"><expr pos:start="1403:21" pos:end="1403:26"><name pos:start="1403:21" pos:end="1403:26">method</name></expr></argument>, <argument pos:start="1403:29" pos:end="1403:34"><expr pos:start="1403:29" pos:end="1403:34"><literal type="string" pos:start="1403:29" pos:end="1403:34">"POST"</literal></expr></argument>, <argument pos:start="1403:37" pos:end="1403:37"><expr pos:start="1403:37" pos:end="1403:37"><literal type="number" pos:start="1403:37" pos:end="1403:37">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1403:41" pos:end="1409:9">{<block_content pos:start="1404:13" pos:end="1408:42">
            <expr_stmt pos:start="1404:13" pos:end="1404:70"><expr pos:start="1404:13" pos:end="1404:69"><call pos:start="1404:13" pos:end="1404:69"><name pos:start="1404:13" pos:end="1404:24">EST_LOG_WARN</name><argument_list pos:start="1404:25" pos:end="1404:69">(<argument pos:start="1404:26" pos:end="1404:68"><expr pos:start="1404:26" pos:end="1404:68"><literal type="string" pos:start="1404:26" pos:end="1404:68">"Incoming HTTP request used wrong method\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1405:13" pos:end="1405:69"><expr pos:start="1405:13" pos:end="1405:68"><call pos:start="1405:13" pos:end="1405:68"><name pos:start="1405:13" pos:end="1405:31">est_send_http_error</name><argument_list pos:start="1405:32" pos:end="1405:68">(<argument pos:start="1405:33" pos:end="1405:35"><expr pos:start="1405:33" pos:end="1405:35"><name pos:start="1405:33" pos:end="1405:35">ctx</name></expr></argument>, <argument pos:start="1405:38" pos:end="1405:45"><expr pos:start="1405:38" pos:end="1405:45"><name pos:start="1405:38" pos:end="1405:45">http_ctx</name></expr></argument>, <argument pos:start="1405:48" pos:end="1405:67"><expr pos:start="1405:48" pos:end="1405:67"><name pos:start="1405:48" pos:end="1405:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1406:13" pos:end="1406:27"><expr pos:start="1406:13" pos:end="1406:26"><call pos:start="1406:13" pos:end="1406:26"><name pos:start="1406:13" pos:end="1406:16">free</name><argument_list pos:start="1406:17" pos:end="1406:26">(<argument pos:start="1406:18" pos:end="1406:25"><expr pos:start="1406:18" pos:end="1406:25"><name pos:start="1406:18" pos:end="1406:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1407:13" pos:end="1407:28"><expr pos:start="1407:13" pos:end="1407:27"><name pos:start="1407:13" pos:end="1407:20">path_seg</name> <operator pos:start="1407:22" pos:end="1407:22">=</operator> <name pos:start="1407:24" pos:end="1407:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1408:13" pos:end="1408:42">return <expr pos:start="1408:20" pos:end="1408:41"><operator pos:start="1408:20" pos:end="1408:20">(</operator><name pos:start="1408:21" pos:end="1408:40">EST_ERR_WRONG_METHOD</name><operator pos:start="1408:41" pos:end="1408:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
	<if_stmt pos:start="1410:9" pos:end="1416:9"><if pos:start="1410:9" pos:end="1416:9">if <condition pos:start="1410:12" pos:end="1410:16">(<expr pos:start="1410:13" pos:end="1410:15"><operator pos:start="1410:13" pos:end="1410:13">!</operator><name pos:start="1410:14" pos:end="1410:15">ct</name></expr>)</condition> <block pos:start="1410:18" pos:end="1416:9">{<block_content pos:start="1411:13" pos:end="1415:46">
            <expr_stmt pos:start="1411:13" pos:end="1411:78"><expr pos:start="1411:13" pos:end="1411:77"><call pos:start="1411:13" pos:end="1411:77"><name pos:start="1411:13" pos:end="1411:24">EST_LOG_WARN</name><argument_list pos:start="1411:25" pos:end="1411:77">(<argument pos:start="1411:26" pos:end="1411:76"><expr pos:start="1411:26" pos:end="1411:76"><literal type="string" pos:start="1411:26" pos:end="1411:76">"Incoming HTTP header has no Content-Type header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1412:13" pos:end="1412:67"><expr pos:start="1412:13" pos:end="1412:66"><call pos:start="1412:13" pos:end="1412:66"><name pos:start="1412:13" pos:end="1412:31">est_send_http_error</name><argument_list pos:start="1412:32" pos:end="1412:66">(<argument pos:start="1412:33" pos:end="1412:35"><expr pos:start="1412:33" pos:end="1412:35"><name pos:start="1412:33" pos:end="1412:35">ctx</name></expr></argument>, <argument pos:start="1412:38" pos:end="1412:45"><expr pos:start="1412:38" pos:end="1412:45"><name pos:start="1412:38" pos:end="1412:45">http_ctx</name></expr></argument>, <argument pos:start="1412:48" pos:end="1412:65"><expr pos:start="1412:48" pos:end="1412:65"><name pos:start="1412:48" pos:end="1412:65">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1413:13" pos:end="1413:27"><expr pos:start="1413:13" pos:end="1413:26"><call pos:start="1413:13" pos:end="1413:26"><name pos:start="1413:13" pos:end="1413:16">free</name><argument_list pos:start="1413:17" pos:end="1413:26">(<argument pos:start="1413:18" pos:end="1413:25"><expr pos:start="1413:18" pos:end="1413:25"><name pos:start="1413:18" pos:end="1413:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1414:13" pos:end="1414:28"><expr pos:start="1414:13" pos:end="1414:27"><name pos:start="1414:13" pos:end="1414:20">path_seg</name> <operator pos:start="1414:22" pos:end="1414:22">=</operator> <name pos:start="1414:24" pos:end="1414:27">NULL</name></expr>;</expr_stmt>
	    <return pos:start="1415:13" pos:end="1415:46">return <expr pos:start="1415:20" pos:end="1415:45"><operator pos:start="1415:20" pos:end="1415:20">(</operator><name pos:start="1415:21" pos:end="1415:44">EST_ERR_BAD_CONTENT_TYPE</name><operator pos:start="1415:45" pos:end="1415:45">)</operator></expr>;</return> 
	</block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1417:9" pos:end="1420:11">/*
         * Get the SSL context, which is required for authenticating
         * the client.
         */</comment>
        <expr_stmt pos:start="1421:9" pos:end="1421:46"><expr pos:start="1421:9" pos:end="1421:45"><name pos:start="1421:9" pos:end="1421:11">ssl</name> <operator pos:start="1421:13" pos:end="1421:13">=</operator> <operator pos:start="1421:15" pos:end="1421:15">(</operator><name pos:start="1421:16" pos:end="1421:18">SSL</name><operator pos:start="1421:19" pos:end="1421:19">*</operator><operator pos:start="1421:20" pos:end="1421:20">)</operator><call pos:start="1421:21" pos:end="1421:45"><name pos:start="1421:21" pos:end="1421:35">mg_get_conn_ssl</name><argument_list pos:start="1421:36" pos:end="1421:45">(<argument pos:start="1421:37" pos:end="1421:44"><expr pos:start="1421:37" pos:end="1421:44"><name pos:start="1421:37" pos:end="1421:44">http_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1422:9" pos:end="1427:9"><if pos:start="1422:9" pos:end="1427:9">if <condition pos:start="1422:12" pos:end="1422:17">(<expr pos:start="1422:13" pos:end="1422:16"><operator pos:start="1422:13" pos:end="1422:13">!</operator><name pos:start="1422:14" pos:end="1422:16">ssl</name></expr>)</condition> <block pos:start="1422:19" pos:end="1427:9">{<block_content pos:start="1423:13" pos:end="1426:40">
            <expr_stmt pos:start="1423:13" pos:end="1423:67"><expr pos:start="1423:13" pos:end="1423:66"><call pos:start="1423:13" pos:end="1423:66"><name pos:start="1423:13" pos:end="1423:31">est_send_http_error</name><argument_list pos:start="1423:32" pos:end="1423:66">(<argument pos:start="1423:33" pos:end="1423:35"><expr pos:start="1423:33" pos:end="1423:35"><name pos:start="1423:33" pos:end="1423:35">ctx</name></expr></argument>, <argument pos:start="1423:38" pos:end="1423:45"><expr pos:start="1423:38" pos:end="1423:45"><name pos:start="1423:38" pos:end="1423:45">http_ctx</name></expr></argument>, <argument pos:start="1423:48" pos:end="1423:65"><expr pos:start="1423:48" pos:end="1423:65"><name pos:start="1423:48" pos:end="1423:65">EST_ERR_NO_SSL_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1424:13" pos:end="1424:27"><expr pos:start="1424:13" pos:end="1424:26"><call pos:start="1424:13" pos:end="1424:26"><name pos:start="1424:13" pos:end="1424:16">free</name><argument_list pos:start="1424:17" pos:end="1424:26">(<argument pos:start="1424:18" pos:end="1424:25"><expr pos:start="1424:18" pos:end="1424:25"><name pos:start="1424:18" pos:end="1424:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1425:13" pos:end="1425:28"><expr pos:start="1425:13" pos:end="1425:27"><name pos:start="1425:13" pos:end="1425:20">path_seg</name> <operator pos:start="1425:22" pos:end="1425:22">=</operator> <name pos:start="1425:24" pos:end="1425:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1426:13" pos:end="1426:40">return <expr pos:start="1426:20" pos:end="1426:39"><operator pos:start="1426:20" pos:end="1426:20">(</operator><name pos:start="1426:21" pos:end="1426:38">EST_ERR_NO_SSL_CTX</name><operator pos:start="1426:39" pos:end="1426:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1429:9" pos:end="1430:51"><expr pos:start="1429:9" pos:end="1430:50"><name pos:start="1429:9" pos:end="1429:10">rc</name> <operator pos:start="1429:12" pos:end="1429:12">=</operator> <call pos:start="1429:14" pos:end="1430:50"><name pos:start="1429:14" pos:end="1429:37">est_handle_simple_enroll</name><argument_list pos:start="1429:38" pos:end="1430:50">(<argument pos:start="1429:39" pos:end="1429:41"><expr pos:start="1429:39" pos:end="1429:41"><name pos:start="1429:39" pos:end="1429:41">ctx</name></expr></argument>, <argument pos:start="1429:44" pos:end="1429:51"><expr pos:start="1429:44" pos:end="1429:51"><name pos:start="1429:44" pos:end="1429:51">http_ctx</name></expr></argument>, <argument pos:start="1429:54" pos:end="1429:56"><expr pos:start="1429:54" pos:end="1429:56"><name pos:start="1429:54" pos:end="1429:56">ssl</name></expr></argument>, <argument pos:start="1429:59" pos:end="1429:60"><expr pos:start="1429:59" pos:end="1429:60"><name pos:start="1429:59" pos:end="1429:60">ct</name></expr></argument>, <argument pos:start="1429:63" pos:end="1429:66"><expr pos:start="1429:63" pos:end="1429:66"><name pos:start="1429:63" pos:end="1429:66">body</name></expr></argument>, <argument pos:start="1429:69" pos:end="1429:76"><expr pos:start="1429:69" pos:end="1429:76"><name pos:start="1429:69" pos:end="1429:76">body_len</name></expr></argument>,
                                      <argument pos:start="1430:39" pos:end="1430:46"><expr pos:start="1430:39" pos:end="1430:46"><name pos:start="1430:39" pos:end="1430:46">path_seg</name></expr></argument>, <argument pos:start="1430:49" pos:end="1430:49"><expr pos:start="1430:49" pos:end="1430:49"><literal type="number" pos:start="1430:49" pos:end="1430:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1431:9" pos:end="1442:9"><if pos:start="1431:9" pos:end="1442:9">if <condition pos:start="1431:12" pos:end="1431:61">(<expr pos:start="1431:13" pos:end="1431:60"><name pos:start="1431:13" pos:end="1431:14">rc</name> <operator pos:start="1431:16" pos:end="1431:17">!=</operator> <name pos:start="1431:19" pos:end="1431:30">EST_ERR_NONE</name> <operator pos:start="1431:32" pos:end="1431:33">&amp;&amp;</operator> <name pos:start="1431:35" pos:end="1431:36">rc</name> <operator pos:start="1431:38" pos:end="1431:39">!=</operator> <name pos:start="1431:41" pos:end="1431:60">EST_ERR_AUTH_PENDING</name></expr>)</condition> <block pos:start="1431:63" pos:end="1442:9">{<block_content pos:start="1432:13" pos:end="1441:40">
            <expr_stmt pos:start="1432:13" pos:end="1433:53"><expr pos:start="1432:13" pos:end="1433:52"><call pos:start="1432:13" pos:end="1433:52"><name pos:start="1432:13" pos:end="1432:24">EST_LOG_WARN</name><argument_list pos:start="1432:25" pos:end="1433:52">(<argument pos:start="1432:26" pos:end="1432:60"><expr pos:start="1432:26" pos:end="1432:60"><literal type="string" pos:start="1432:26" pos:end="1432:60">"Reenroll failed with rc=%d (%s)\n"</literal></expr></argument>, 
		         <argument pos:start="1433:26" pos:end="1433:27"><expr pos:start="1433:26" pos:end="1433:27"><name pos:start="1433:26" pos:end="1433:27">rc</name></expr></argument>, <argument pos:start="1433:30" pos:end="1433:51"><expr pos:start="1433:30" pos:end="1433:51"><call pos:start="1433:30" pos:end="1433:51"><name pos:start="1433:30" pos:end="1433:47">EST_ERR_NUM_TO_STR</name><argument_list pos:start="1433:48" pos:end="1433:51">(<argument pos:start="1433:49" pos:end="1433:50"><expr pos:start="1433:49" pos:end="1433:50"><name pos:start="1433:49" pos:end="1433:50">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="1434:13" pos:end="1438:13"><if pos:start="1434:13" pos:end="1436:13">if <condition pos:start="1434:16" pos:end="1434:40">(<expr pos:start="1434:17" pos:end="1434:39"><name pos:start="1434:17" pos:end="1434:18">rc</name> <operator pos:start="1434:20" pos:end="1434:21">==</operator> <name pos:start="1434:23" pos:end="1434:39">EST_ERR_AUTH_FAIL</name></expr>)</condition> <block pos:start="1434:42" pos:end="1436:13">{<block_content pos:start="1435:17" pos:end="1435:70">
		<expr_stmt pos:start="1435:17" pos:end="1435:70"><expr pos:start="1435:17" pos:end="1435:69"><call pos:start="1435:17" pos:end="1435:69"><name pos:start="1435:17" pos:end="1435:35">est_send_http_error</name><argument_list pos:start="1435:36" pos:end="1435:69">(<argument pos:start="1435:37" pos:end="1435:39"><expr pos:start="1435:37" pos:end="1435:39"><name pos:start="1435:37" pos:end="1435:39">ctx</name></expr></argument>, <argument pos:start="1435:42" pos:end="1435:49"><expr pos:start="1435:42" pos:end="1435:49"><name pos:start="1435:42" pos:end="1435:49">http_ctx</name></expr></argument>, <argument pos:start="1435:52" pos:end="1435:68"><expr pos:start="1435:52" pos:end="1435:68"><name pos:start="1435:52" pos:end="1435:68">EST_ERR_AUTH_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else pos:start="1436:15" pos:end="1438:13">else <block pos:start="1436:20" pos:end="1438:13">{<block_content pos:start="1437:17" pos:end="1437:71">
		<expr_stmt pos:start="1437:17" pos:end="1437:71"><expr pos:start="1437:17" pos:end="1437:70"><call pos:start="1437:17" pos:end="1437:70"><name pos:start="1437:17" pos:end="1437:35">est_send_http_error</name><argument_list pos:start="1437:36" pos:end="1437:70">(<argument pos:start="1437:37" pos:end="1437:39"><expr pos:start="1437:37" pos:end="1437:39"><name pos:start="1437:37" pos:end="1437:39">ctx</name></expr></argument>, <argument pos:start="1437:42" pos:end="1437:49"><expr pos:start="1437:42" pos:end="1437:49"><name pos:start="1437:42" pos:end="1437:49">http_ctx</name></expr></argument>, <argument pos:start="1437:52" pos:end="1437:69"><expr pos:start="1437:52" pos:end="1437:69"><name pos:start="1437:52" pos:end="1437:69">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="1439:13" pos:end="1439:27"><expr pos:start="1439:13" pos:end="1439:26"><call pos:start="1439:13" pos:end="1439:26"><name pos:start="1439:13" pos:end="1439:16">free</name><argument_list pos:start="1439:17" pos:end="1439:26">(<argument pos:start="1439:18" pos:end="1439:25"><expr pos:start="1439:18" pos:end="1439:25"><name pos:start="1439:18" pos:end="1439:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1440:13" pos:end="1440:28"><expr pos:start="1440:13" pos:end="1440:27"><name pos:start="1440:13" pos:end="1440:20">path_seg</name> <operator pos:start="1440:22" pos:end="1440:22">=</operator> <name pos:start="1440:24" pos:end="1440:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1441:13" pos:end="1441:40">return <expr pos:start="1441:20" pos:end="1441:39"><operator pos:start="1441:20" pos:end="1441:20">(</operator><name pos:start="1441:21" pos:end="1441:38">EST_ERR_BAD_PKCS10</name><operator pos:start="1441:39" pos:end="1441:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>

<cpp:if pos:start="1445:1" pos:end="1445:5">#<cpp:directive pos:start="1445:2" pos:end="1445:3">if</cpp:directive> <expr pos:start="1445:5" pos:end="1445:5"><literal type="number" pos:start="1445:5" pos:end="1445:5">0</literal></expr></cpp:if>
    <comment type="block" pos:start="1446:5" pos:end="1449:7">/*
     * See if this is a keygen request
     * FIXME: this is currently not implemented
     */</comment>
    else if (strncmp(uri, EST_KEYGEN_URI, EST_URI_MAX_LEN) == 0) {
        <comment type="block" pos:start="1451:9" pos:end="1451:34">/* Only POST is allowed */</comment>
        if (strncmp(method, "POST", 4)) {
            EST_LOG_WARN("Incoming HTTP request used wrong method\n");
            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);
            return (EST_ERR_WRONG_METHOD);
        }
	if (!ct) {
            EST_LOG_WARN("Incoming HTTP header has no Content-Type header\n");
	    return (EST_ERR_BAD_CONTENT_TYPE); 
	}
        if (est_handle_keygen(ctx)) {
            est_send_http_error(ctx, http_ctx, 0); <comment type="line" pos:start="1462:52" pos:end="1462:89">//FIXME: last param should not be zero</comment>
            return (EST_ERR_HTTP_WRITE);           <comment type="line" pos:start="1463:52" pos:end="1463:92">//FIXME: need the appropriate return code</comment>
        }
    }
<cpp:endif pos:start="1466:1" pos:end="1466:6">#<cpp:directive pos:start="1466:2" pos:end="1466:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="1468:5" pos:end="1470:7">/*
     * See if this is a CSR attributes request
     */</comment>
    <if type="elseif" pos:start="1471:5" pos:end="1488:5">else if <condition pos:start="1471:13" pos:end="1471:42">(<expr pos:start="1471:14" pos:end="1471:41"><name pos:start="1471:14" pos:end="1471:22">operation</name> <operator pos:start="1471:24" pos:end="1471:25">==</operator> <name pos:start="1471:27" pos:end="1471:41">EST_OP_CSRATTRS</name></expr>)</condition> <block pos:start="1471:44" pos:end="1488:5">{<block_content pos:start="1473:9" pos:end="1487:9">
        <comment type="block" pos:start="1472:9" pos:end="1472:33">/* Only GET is allowed */</comment>
        <if_stmt pos:start="1473:9" pos:end="1479:9"><if pos:start="1473:9" pos:end="1479:9">if <condition pos:start="1473:12" pos:end="1473:38">(<expr pos:start="1473:13" pos:end="1473:37"><call pos:start="1473:13" pos:end="1473:37"><name pos:start="1473:13" pos:end="1473:19">strncmp</name><argument_list pos:start="1473:20" pos:end="1473:37">(<argument pos:start="1473:21" pos:end="1473:26"><expr pos:start="1473:21" pos:end="1473:26"><name pos:start="1473:21" pos:end="1473:26">method</name></expr></argument>, <argument pos:start="1473:29" pos:end="1473:33"><expr pos:start="1473:29" pos:end="1473:33"><literal type="string" pos:start="1473:29" pos:end="1473:33">"GET"</literal></expr></argument>, <argument pos:start="1473:36" pos:end="1473:36"><expr pos:start="1473:36" pos:end="1473:36"><literal type="number" pos:start="1473:36" pos:end="1473:36">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1473:40" pos:end="1479:9">{<block_content pos:start="1474:13" pos:end="1478:42">
            <expr_stmt pos:start="1474:13" pos:end="1474:70"><expr pos:start="1474:13" pos:end="1474:69"><call pos:start="1474:13" pos:end="1474:69"><name pos:start="1474:13" pos:end="1474:24">EST_LOG_WARN</name><argument_list pos:start="1474:25" pos:end="1474:69">(<argument pos:start="1474:26" pos:end="1474:68"><expr pos:start="1474:26" pos:end="1474:68"><literal type="string" pos:start="1474:26" pos:end="1474:68">"Incoming HTTP request used wrong method\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1475:13" pos:end="1475:69"><expr pos:start="1475:13" pos:end="1475:68"><call pos:start="1475:13" pos:end="1475:68"><name pos:start="1475:13" pos:end="1475:31">est_send_http_error</name><argument_list pos:start="1475:32" pos:end="1475:68">(<argument pos:start="1475:33" pos:end="1475:35"><expr pos:start="1475:33" pos:end="1475:35"><name pos:start="1475:33" pos:end="1475:35">ctx</name></expr></argument>, <argument pos:start="1475:38" pos:end="1475:45"><expr pos:start="1475:38" pos:end="1475:45"><name pos:start="1475:38" pos:end="1475:45">http_ctx</name></expr></argument>, <argument pos:start="1475:48" pos:end="1475:67"><expr pos:start="1475:48" pos:end="1475:67"><name pos:start="1475:48" pos:end="1475:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1476:13" pos:end="1476:27"><expr pos:start="1476:13" pos:end="1476:26"><call pos:start="1476:13" pos:end="1476:26"><name pos:start="1476:13" pos:end="1476:16">free</name><argument_list pos:start="1476:17" pos:end="1476:26">(<argument pos:start="1476:18" pos:end="1476:25"><expr pos:start="1476:18" pos:end="1476:25"><name pos:start="1476:18" pos:end="1476:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1477:13" pos:end="1477:28"><expr pos:start="1477:13" pos:end="1477:27"><name pos:start="1477:13" pos:end="1477:20">path_seg</name> <operator pos:start="1477:22" pos:end="1477:22">=</operator> <name pos:start="1477:24" pos:end="1477:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1478:13" pos:end="1478:42">return <expr pos:start="1478:20" pos:end="1478:41"><operator pos:start="1478:20" pos:end="1478:20">(</operator><name pos:start="1478:21" pos:end="1478:40">EST_ERR_WRONG_METHOD</name><operator pos:start="1478:41" pos:end="1478:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1481:9" pos:end="1481:59"><expr pos:start="1481:9" pos:end="1481:58"><name pos:start="1481:9" pos:end="1481:10">rc</name> <operator pos:start="1481:12" pos:end="1481:12">=</operator> <call pos:start="1481:14" pos:end="1481:58"><name pos:start="1481:14" pos:end="1481:33">est_handle_csr_attrs</name><argument_list pos:start="1481:34" pos:end="1481:58">(<argument pos:start="1481:35" pos:end="1481:37"><expr pos:start="1481:35" pos:end="1481:37"><name pos:start="1481:35" pos:end="1481:37">ctx</name></expr></argument>, <argument pos:start="1481:40" pos:end="1481:47"><expr pos:start="1481:40" pos:end="1481:47"><name pos:start="1481:40" pos:end="1481:47">http_ctx</name></expr></argument>, <argument pos:start="1481:50" pos:end="1481:57"><expr pos:start="1481:50" pos:end="1481:57"><name pos:start="1481:50" pos:end="1481:57">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1482:9" pos:end="1487:9"><if pos:start="1482:9" pos:end="1487:9">if <condition pos:start="1482:12" pos:end="1482:31">(<expr pos:start="1482:13" pos:end="1482:30"><name pos:start="1482:13" pos:end="1482:14">rc</name> <operator pos:start="1482:16" pos:end="1482:17">!=</operator> <name pos:start="1482:19" pos:end="1482:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1482:33" pos:end="1487:9">{<block_content pos:start="1483:13" pos:end="1486:24">
            <expr_stmt pos:start="1483:13" pos:end="1483:51"><expr pos:start="1483:13" pos:end="1483:50"><call pos:start="1483:13" pos:end="1483:50"><name pos:start="1483:13" pos:end="1483:31">est_send_http_error</name><argument_list pos:start="1483:32" pos:end="1483:50">(<argument pos:start="1483:33" pos:end="1483:35"><expr pos:start="1483:33" pos:end="1483:35"><name pos:start="1483:33" pos:end="1483:35">ctx</name></expr></argument>, <argument pos:start="1483:38" pos:end="1483:45"><expr pos:start="1483:38" pos:end="1483:45"><name pos:start="1483:38" pos:end="1483:45">http_ctx</name></expr></argument>, <argument pos:start="1483:48" pos:end="1483:49"><expr pos:start="1483:48" pos:end="1483:49"><name pos:start="1483:48" pos:end="1483:49">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt pos:start="1484:13" pos:end="1484:27"><expr pos:start="1484:13" pos:end="1484:26"><call pos:start="1484:13" pos:end="1484:26"><name pos:start="1484:13" pos:end="1484:16">free</name><argument_list pos:start="1484:17" pos:end="1484:26">(<argument pos:start="1484:18" pos:end="1484:25"><expr pos:start="1484:18" pos:end="1484:25"><name pos:start="1484:18" pos:end="1484:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1485:13" pos:end="1485:28"><expr pos:start="1485:13" pos:end="1485:27"><name pos:start="1485:13" pos:end="1485:20">path_seg</name> <operator pos:start="1485:22" pos:end="1485:22">=</operator> <name pos:start="1485:24" pos:end="1485:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="1486:13" pos:end="1486:24">return <expr pos:start="1486:20" pos:end="1486:23"><operator pos:start="1486:20" pos:end="1486:20">(</operator><name pos:start="1486:21" pos:end="1486:22">rc</name><operator pos:start="1486:23" pos:end="1486:23">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>

    <comment type="block" pos:start="1490:5" pos:end="1492:7">/*
     * Send a 404 error if the URI didn't match 
     */</comment>
    <else pos:start="1493:5" pos:end="1495:5">else <block pos:start="1493:10" pos:end="1495:5">{<block_content pos:start="1494:9" pos:end="1494:67">
        <expr_stmt pos:start="1494:9" pos:end="1494:67"><expr pos:start="1494:9" pos:end="1494:66"><call pos:start="1494:9" pos:end="1494:66"><name pos:start="1494:9" pos:end="1494:27">est_send_http_error</name><argument_list pos:start="1494:28" pos:end="1494:66">(<argument pos:start="1494:29" pos:end="1494:31"><expr pos:start="1494:29" pos:end="1494:31"><name pos:start="1494:29" pos:end="1494:31">ctx</name></expr></argument>, <argument pos:start="1494:34" pos:end="1494:41"><expr pos:start="1494:34" pos:end="1494:41"><name pos:start="1494:34" pos:end="1494:41">http_ctx</name></expr></argument>, <argument pos:start="1494:44" pos:end="1494:65"><expr pos:start="1494:44" pos:end="1494:65"><name pos:start="1494:44" pos:end="1494:65">EST_ERR_HTTP_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt pos:start="1497:5" pos:end="1497:19"><expr pos:start="1497:5" pos:end="1497:18"><call pos:start="1497:5" pos:end="1497:18"><name pos:start="1497:5" pos:end="1497:8">free</name><argument_list pos:start="1497:9" pos:end="1497:18">(<argument pos:start="1497:10" pos:end="1497:17"><expr pos:start="1497:10" pos:end="1497:17"><name pos:start="1497:10" pos:end="1497:17">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1498:5" pos:end="1498:20"><expr pos:start="1498:5" pos:end="1498:19"><name pos:start="1498:5" pos:end="1498:12">path_seg</name> <operator pos:start="1498:14" pos:end="1498:14">=</operator> <name pos:start="1498:16" pos:end="1498:19">NULL</name></expr>;</expr_stmt>
    <return pos:start="1499:5" pos:end="1499:26">return <expr pos:start="1499:12" pos:end="1499:25"><operator pos:start="1499:12" pos:end="1499:12">(</operator><name pos:start="1499:13" pos:end="1499:24">EST_ERR_NONE</name><operator pos:start="1499:25" pos:end="1499:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1501:1" pos:end="1513:3">/*! @brief est_server_start() is used by an application to start
    the EST server after est_server_init() has been called and
    all the required callback functions have been provided by
    the application.   
 
    @param ctx Pointer to the EST context

    libEST uses HTTP code from the Mongoose HTTP server.
    This function allows the application to start the HTTP
    services layer, which is required by EST.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1514:1" pos:end="1530:1"><type pos:start="1514:1" pos:end="1514:9"><name pos:start="1514:1" pos:end="1514:9">EST_ERROR</name></type> <name pos:start="1514:11" pos:end="1514:26">est_server_start</name> <parameter_list pos:start="1514:28" pos:end="1514:41">(<parameter pos:start="1514:29" pos:end="1514:40"><decl pos:start="1514:29" pos:end="1514:40"><type pos:start="1514:29" pos:end="1514:37"><name pos:start="1514:29" pos:end="1514:35">EST_CTX</name> <modifier pos:start="1514:37" pos:end="1514:37">*</modifier></type><name pos:start="1514:38" pos:end="1514:40">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1515:1" pos:end="1530:1">{<block_content pos:start="1516:5" pos:end="1529:5">
    <decl_stmt pos:start="1516:5" pos:end="1516:26"><decl pos:start="1516:5" pos:end="1516:25"><type pos:start="1516:5" pos:end="1516:20"><name pos:start="1516:5" pos:end="1516:18">EST_MG_CONTEXT</name> <modifier pos:start="1516:20" pos:end="1516:20">*</modifier></type><name pos:start="1516:21" pos:end="1516:25">mgctx</name></decl>;</decl_stmt>

    <if_stmt pos:start="1518:5" pos:end="1521:5"><if pos:start="1518:5" pos:end="1521:5">if <condition pos:start="1518:8" pos:end="1518:13">(<expr pos:start="1518:9" pos:end="1518:12"><operator pos:start="1518:9" pos:end="1518:9">!</operator><name pos:start="1518:10" pos:end="1518:12">ctx</name></expr>)</condition> <block pos:start="1518:15" pos:end="1521:5">{<block_content pos:start="1519:9" pos:end="1520:32">
	<expr_stmt pos:start="1519:9" pos:end="1519:36"><expr pos:start="1519:9" pos:end="1519:35"><call pos:start="1519:9" pos:end="1519:35"><name pos:start="1519:9" pos:end="1519:19">EST_LOG_ERR</name><argument_list pos:start="1519:20" pos:end="1519:35">(<argument pos:start="1519:21" pos:end="1519:34"><expr pos:start="1519:21" pos:end="1519:34"><literal type="string" pos:start="1519:21" pos:end="1519:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1520:9" pos:end="1520:32">return <expr pos:start="1520:16" pos:end="1520:31"><operator pos:start="1520:16" pos:end="1520:16">(</operator><name pos:start="1520:17" pos:end="1520:30">EST_ERR_NO_CTX</name><operator pos:start="1520:31" pos:end="1520:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1523:5" pos:end="1523:26"><expr pos:start="1523:5" pos:end="1523:25"><name pos:start="1523:5" pos:end="1523:9">mgctx</name> <operator pos:start="1523:11" pos:end="1523:11">=</operator> <call pos:start="1523:13" pos:end="1523:25"><name pos:start="1523:13" pos:end="1523:20">mg_start</name><argument_list pos:start="1523:21" pos:end="1523:25">(<argument pos:start="1523:22" pos:end="1523:24"><expr pos:start="1523:22" pos:end="1523:24"><name pos:start="1523:22" pos:end="1523:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1524:5" pos:end="1529:5"><if pos:start="1524:5" pos:end="1527:5">if <condition pos:start="1524:8" pos:end="1524:14">(<expr pos:start="1524:9" pos:end="1524:13"><name pos:start="1524:9" pos:end="1524:13">mgctx</name></expr>)</condition> <block pos:start="1524:16" pos:end="1527:5">{<block_content pos:start="1525:9" pos:end="1526:30">
        <expr_stmt pos:start="1525:9" pos:end="1525:28"><expr pos:start="1525:9" pos:end="1525:27"><name pos:start="1525:9" pos:end="1525:19"><name pos:start="1525:9" pos:end="1525:11">ctx</name><operator pos:start="1525:12" pos:end="1525:13">-&gt;</operator><name pos:start="1525:14" pos:end="1525:19">mg_ctx</name></name> <operator pos:start="1525:21" pos:end="1525:21">=</operator> <name pos:start="1525:23" pos:end="1525:27">mgctx</name></expr>;</expr_stmt>
        <return pos:start="1526:9" pos:end="1526:30">return <expr pos:start="1526:16" pos:end="1526:29"><operator pos:start="1526:16" pos:end="1526:16">(</operator><name pos:start="1526:17" pos:end="1526:28">EST_ERR_NONE</name><operator pos:start="1526:29" pos:end="1526:29">)</operator></expr>;</return>
    </block_content>}</block></if> <else pos:start="1527:7" pos:end="1529:5">else <block pos:start="1527:12" pos:end="1529:5">{<block_content pos:start="1528:9" pos:end="1528:36">
        <return pos:start="1528:9" pos:end="1528:36">return <expr pos:start="1528:16" pos:end="1528:35"><operator pos:start="1528:16" pos:end="1528:16">(</operator><name pos:start="1528:17" pos:end="1528:34">EST_ERR_NO_SSL_CTX</name><operator pos:start="1528:35" pos:end="1528:35">)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1531:1" pos:end="1541:3">/*! @brief est_server_stop() is used by an application to stop
    the EST server.  This should be called prior to est_destroy().
 
    @param ctx Pointer to the EST context

    libEST uses HTTP code from the Mongoose HTTP server.
    This function allows the application to stop the HTTP
    services layer.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1542:1" pos:end="1556:1"><type pos:start="1542:1" pos:end="1542:9"><name pos:start="1542:1" pos:end="1542:9">EST_ERROR</name></type> <name pos:start="1542:11" pos:end="1542:25">est_server_stop</name> <parameter_list pos:start="1542:27" pos:end="1542:40">(<parameter pos:start="1542:28" pos:end="1542:39"><decl pos:start="1542:28" pos:end="1542:39"><type pos:start="1542:28" pos:end="1542:36"><name pos:start="1542:28" pos:end="1542:34">EST_CTX</name> <modifier pos:start="1542:36" pos:end="1542:36">*</modifier></type><name pos:start="1542:37" pos:end="1542:39">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1543:1" pos:end="1556:1">{<block_content pos:start="1544:5" pos:end="1555:26">
    <decl_stmt pos:start="1544:5" pos:end="1544:26"><decl pos:start="1544:5" pos:end="1544:25"><type pos:start="1544:5" pos:end="1544:20"><name pos:start="1544:5" pos:end="1544:18">EST_MG_CONTEXT</name> <modifier pos:start="1544:20" pos:end="1544:20">*</modifier></type><name pos:start="1544:21" pos:end="1544:25">mgctx</name></decl>;</decl_stmt>

    <if_stmt pos:start="1546:5" pos:end="1549:5"><if pos:start="1546:5" pos:end="1549:5">if <condition pos:start="1546:8" pos:end="1546:13">(<expr pos:start="1546:9" pos:end="1546:12"><operator pos:start="1546:9" pos:end="1546:9">!</operator><name pos:start="1546:10" pos:end="1546:12">ctx</name></expr>)</condition> <block pos:start="1546:15" pos:end="1549:5">{<block_content pos:start="1547:9" pos:end="1548:32">
	<expr_stmt pos:start="1547:9" pos:end="1547:36"><expr pos:start="1547:9" pos:end="1547:35"><call pos:start="1547:9" pos:end="1547:35"><name pos:start="1547:9" pos:end="1547:19">EST_LOG_ERR</name><argument_list pos:start="1547:20" pos:end="1547:35">(<argument pos:start="1547:21" pos:end="1547:34"><expr pos:start="1547:21" pos:end="1547:34"><literal type="string" pos:start="1547:21" pos:end="1547:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1548:9" pos:end="1548:32">return <expr pos:start="1548:16" pos:end="1548:31"><operator pos:start="1548:16" pos:end="1548:16">(</operator><name pos:start="1548:17" pos:end="1548:30">EST_ERR_NO_CTX</name><operator pos:start="1548:31" pos:end="1548:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1551:5" pos:end="1551:41"><expr pos:start="1551:5" pos:end="1551:40"><name pos:start="1551:5" pos:end="1551:9">mgctx</name> <operator pos:start="1551:11" pos:end="1551:11">=</operator> <operator pos:start="1551:13" pos:end="1551:13">(</operator><name pos:start="1551:14" pos:end="1551:27">EST_MG_CONTEXT</name><operator pos:start="1551:28" pos:end="1551:28">*</operator><operator pos:start="1551:29" pos:end="1551:29">)</operator><name pos:start="1551:30" pos:end="1551:40"><name pos:start="1551:30" pos:end="1551:32">ctx</name><operator pos:start="1551:33" pos:end="1551:34">-&gt;</operator><name pos:start="1551:35" pos:end="1551:40">mg_ctx</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="1552:5" pos:end="1554:5"><if pos:start="1552:5" pos:end="1554:5">if <condition pos:start="1552:8" pos:end="1552:14">(<expr pos:start="1552:9" pos:end="1552:13"><name pos:start="1552:9" pos:end="1552:13">mgctx</name></expr>)</condition> <block pos:start="1552:16" pos:end="1554:5">{<block_content pos:start="1553:9" pos:end="1553:23">
        <expr_stmt pos:start="1553:9" pos:end="1553:23"><expr pos:start="1553:9" pos:end="1553:22"><call pos:start="1553:9" pos:end="1553:22"><name pos:start="1553:9" pos:end="1553:15">mg_stop</name><argument_list pos:start="1553:16" pos:end="1553:22">(<argument pos:start="1553:17" pos:end="1553:21"><expr pos:start="1553:17" pos:end="1553:21"><name pos:start="1553:17" pos:end="1553:21">mgctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1555:5" pos:end="1555:26">return <expr pos:start="1555:12" pos:end="1555:25"><operator pos:start="1555:12" pos:end="1555:12">(</operator><name pos:start="1555:13" pos:end="1555:24">EST_ERR_NONE</name><operator pos:start="1555:25" pos:end="1555:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1557:1" pos:end="1596:3">/*! @brief est_server_init() is used by an application to create
    a context in the EST library when operating as an EST server that
    fronts a CA.  This context is used when invoking other functions in the API.
 
    @param ca_chain     Char array containing PEM encoded CA certs &amp; CRL entries 
    @param ca_chain_len Length of ca_chain char array 
    @param cacerts_resp_chain Char array containing PEM encoded CA certs to include
                              in the /cacerts response
    @param cacerts_resp_chain_len Length of cacerts_resp_chain char array
    @param cert_format Specifies the encoding of the local and external
                       certificate chains (PEM/DER).  
    @param http_realm Char array containing HTTP realm name for HTTP auth
    @param tls_id_cert Pointer to X509 that contains the server's certificate
                    for the TLS layer.
    @param tls_id_key Pointer to EVP_PKEY that contains the private key
                   associated with the server's certificate.

    This function allows an application to initialize an EST server context
    that is used with a CA (not an RA).
    The application must provide the trusted CA certificates to use
    for server operation using the ca_chain parameter.  This certificate
    set should include the explicit trust anchor certificate, any number
    of implicit trust anchor certificates, and any intermediate sub-CA
    certificates required to complete the chain of trust between the
    identity certificate passed into the tls_id_cert parameter and the
    root certificate for that identity certificate.  
    The CA certificates should be encoded using
    the format specified in the cert_format parameter (e.g. PEM) and
    may contain CRL entries that will be used when authenticating
    EST clients connecting to the server.  
    The applications must also provide the HTTP realm to use for 
    HTTP authentication and the server cerificate/private key to use
    for the TLS stack to identify the server.
    
    Warning: Including additional intermediate sub-CA certificates that are
             not needed to complete the chain of trust may result in a
	     potential MITM attack.  
 
    @return EST_CTX.
 */</comment>
<function pos:start="1597:1" pos:end="1703:1"><type pos:start="1597:1" pos:end="1597:9"><name pos:start="1597:1" pos:end="1597:7">EST_CTX</name> <modifier pos:start="1597:9" pos:end="1597:9">*</modifier></type> <name pos:start="1597:11" pos:end="1597:25">est_server_init</name> <parameter_list pos:start="1597:27" pos:end="1601:67">(<parameter pos:start="1597:28" pos:end="1597:50"><decl pos:start="1597:28" pos:end="1597:50"><type pos:start="1597:28" pos:end="1597:50"><name pos:start="1597:28" pos:end="1597:35">unsigned</name> <name pos:start="1597:37" pos:end="1597:40">char</name> <modifier pos:start="1597:42" pos:end="1597:42">*</modifier></type><name pos:start="1597:43" pos:end="1597:50">ca_chain</name></decl></parameter>, <parameter pos:start="1597:53" pos:end="1597:68"><decl pos:start="1597:53" pos:end="1597:68"><type pos:start="1597:53" pos:end="1597:68"><name pos:start="1597:53" pos:end="1597:55">int</name></type> <name pos:start="1597:57" pos:end="1597:68">ca_chain_len</name></decl></parameter>,
                           <parameter pos:start="1598:28" pos:end="1598:60"><decl pos:start="1598:28" pos:end="1598:60"><type pos:start="1598:28" pos:end="1598:60"><name pos:start="1598:28" pos:end="1598:35">unsigned</name> <name pos:start="1598:37" pos:end="1598:40">char</name> <modifier pos:start="1598:42" pos:end="1598:42">*</modifier></type><name pos:start="1598:43" pos:end="1598:60">cacerts_resp_chain</name></decl></parameter>, <parameter pos:start="1598:63" pos:end="1598:88"><decl pos:start="1598:63" pos:end="1598:88"><type pos:start="1598:63" pos:end="1598:88"><name pos:start="1598:63" pos:end="1598:65">int</name></type> <name pos:start="1598:67" pos:end="1598:88">cacerts_resp_chain_len</name></decl></parameter>,
			   <parameter pos:start="1599:28" pos:end="1599:54"><decl pos:start="1599:28" pos:end="1599:54"><type pos:start="1599:28" pos:end="1599:54"><name pos:start="1599:28" pos:end="1599:42">EST_CERT_FORMAT</name></type> <name pos:start="1599:44" pos:end="1599:54">cert_format</name></decl></parameter>,
                           <parameter pos:start="1600:28" pos:end="1600:43"><decl pos:start="1600:28" pos:end="1600:43"><type pos:start="1600:28" pos:end="1600:43"><name pos:start="1600:28" pos:end="1600:31">char</name> <modifier pos:start="1600:33" pos:end="1600:33">*</modifier></type><name pos:start="1600:34" pos:end="1600:43">http_realm</name></decl></parameter>, 
			   <parameter pos:start="1601:28" pos:end="1601:44"><decl pos:start="1601:28" pos:end="1601:44"><type pos:start="1601:28" pos:end="1601:44"><name pos:start="1601:28" pos:end="1601:31">X509</name> <modifier pos:start="1601:33" pos:end="1601:33">*</modifier></type><name pos:start="1601:34" pos:end="1601:44">tls_id_cert</name></decl></parameter>, <parameter pos:start="1601:47" pos:end="1601:66"><decl pos:start="1601:47" pos:end="1601:66"><type pos:start="1601:47" pos:end="1601:66"><name pos:start="1601:47" pos:end="1601:54">EVP_PKEY</name> <modifier pos:start="1601:56" pos:end="1601:56">*</modifier></type><name pos:start="1601:57" pos:end="1601:66">tls_id_key</name></decl></parameter>)</parameter_list>
<block pos:start="1602:1" pos:end="1703:1">{<block_content pos:start="1603:5" pos:end="1702:17">
    <decl_stmt pos:start="1603:5" pos:end="1603:17"><decl pos:start="1603:5" pos:end="1603:16"><type pos:start="1603:5" pos:end="1603:13"><name pos:start="1603:5" pos:end="1603:11">EST_CTX</name> <modifier pos:start="1603:13" pos:end="1603:13">*</modifier></type><name pos:start="1603:14" pos:end="1603:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1604:5" pos:end="1604:12"><decl pos:start="1604:5" pos:end="1604:11"><type pos:start="1604:5" pos:end="1604:7"><name pos:start="1604:5" pos:end="1604:7">int</name></type> <name pos:start="1604:9" pos:end="1604:11">len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1606:5" pos:end="1606:22"><expr pos:start="1606:5" pos:end="1606:21"><call pos:start="1606:5" pos:end="1606:21"><name pos:start="1606:5" pos:end="1606:19">est_log_version</name><argument_list pos:start="1606:20" pos:end="1606:21">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1608:5" pos:end="1610:7">/*
     * Sanity check the input
     */</comment>
    <if_stmt pos:start="1611:5" pos:end="1614:5"><if pos:start="1611:5" pos:end="1614:5">if <condition pos:start="1611:8" pos:end="1611:25">(<expr pos:start="1611:9" pos:end="1611:24"><name pos:start="1611:9" pos:end="1611:16">ca_chain</name> <operator pos:start="1611:18" pos:end="1611:19">==</operator> <name pos:start="1611:21" pos:end="1611:24">NULL</name></expr>)</condition> <block pos:start="1611:27" pos:end="1614:5">{<block_content pos:start="1612:9" pos:end="1613:20">
        <expr_stmt pos:start="1612:9" pos:end="1612:59"><expr pos:start="1612:9" pos:end="1612:58"><call pos:start="1612:9" pos:end="1612:58"><name pos:start="1612:9" pos:end="1612:19">EST_LOG_ERR</name><argument_list pos:start="1612:20" pos:end="1612:58">(<argument pos:start="1612:21" pos:end="1612:57"><expr pos:start="1612:21" pos:end="1612:57"><literal type="string" pos:start="1612:21" pos:end="1612:57">"Trusted CA certificate set is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1613:9" pos:end="1613:20">return <expr pos:start="1613:16" pos:end="1613:19"><name pos:start="1613:16" pos:end="1613:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1615:5" pos:end="1618:5"><if pos:start="1615:5" pos:end="1618:5">if <condition pos:start="1615:8" pos:end="1615:43">(<expr pos:start="1615:9" pos:end="1615:42"><name pos:start="1615:9" pos:end="1615:19">cert_format</name> <operator pos:start="1615:21" pos:end="1615:22">!=</operator> <name pos:start="1615:24" pos:end="1615:42">EST_CERT_FORMAT_PEM</name></expr>)</condition> <block pos:start="1615:45" pos:end="1618:5">{<block_content pos:start="1616:9" pos:end="1617:20">
        <expr_stmt pos:start="1616:9" pos:end="1616:78"><expr pos:start="1616:9" pos:end="1616:77"><call pos:start="1616:9" pos:end="1616:77"><name pos:start="1616:9" pos:end="1616:19">EST_LOG_ERR</name><argument_list pos:start="1616:20" pos:end="1616:77">(<argument pos:start="1616:21" pos:end="1616:76"><expr pos:start="1616:21" pos:end="1616:76"><literal type="string" pos:start="1616:21" pos:end="1616:76">"Only PEM encoding of certificate changes is supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1617:9" pos:end="1617:20">return <expr pos:start="1617:16" pos:end="1617:19"><name pos:start="1617:16" pos:end="1617:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1620:5" pos:end="1622:7">/* 
     * Check the length value, it should match.
     */</comment>
    <expr_stmt pos:start="1623:5" pos:end="1623:56"><expr pos:start="1623:5" pos:end="1623:55"><name pos:start="1623:5" pos:end="1623:7">len</name> <operator pos:start="1623:9" pos:end="1623:9">=</operator> <operator pos:start="1623:11" pos:end="1623:11">(</operator><name pos:start="1623:12" pos:end="1623:14">int</name><operator pos:start="1623:15" pos:end="1623:15">)</operator> <call pos:start="1623:17" pos:end="1623:55"><name pos:start="1623:17" pos:end="1623:25">strnlen_s</name><argument_list pos:start="1623:26" pos:end="1623:55">(<argument pos:start="1623:27" pos:end="1623:42"><expr pos:start="1623:27" pos:end="1623:42"><operator pos:start="1623:27" pos:end="1623:27">(</operator><name pos:start="1623:28" pos:end="1623:31">char</name> <operator pos:start="1623:33" pos:end="1623:33">*</operator><operator pos:start="1623:34" pos:end="1623:34">)</operator><name pos:start="1623:35" pos:end="1623:42">ca_chain</name></expr></argument>, <argument pos:start="1623:45" pos:end="1623:54"><expr pos:start="1623:45" pos:end="1623:54"><name pos:start="1623:45" pos:end="1623:54">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1624:5" pos:end="1627:5"><if pos:start="1624:5" pos:end="1627:5">if <condition pos:start="1624:8" pos:end="1624:28">(<expr pos:start="1624:9" pos:end="1624:27"><name pos:start="1624:9" pos:end="1624:11">len</name> <operator pos:start="1624:13" pos:end="1624:14">!=</operator> <name pos:start="1624:16" pos:end="1624:27">ca_chain_len</name></expr>)</condition> <block pos:start="1624:30" pos:end="1627:5">{<block_content pos:start="1625:9" pos:end="1626:20">
	<expr_stmt pos:start="1625:9" pos:end="1625:69"><expr pos:start="1625:9" pos:end="1625:68"><call pos:start="1625:9" pos:end="1625:68"><name pos:start="1625:9" pos:end="1625:19">EST_LOG_ERR</name><argument_list pos:start="1625:20" pos:end="1625:68">(<argument pos:start="1625:21" pos:end="1625:67"><expr pos:start="1625:21" pos:end="1625:67"><literal type="string" pos:start="1625:21" pos:end="1625:67">"Length of ca_chain doesn't match ca_chain_len"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1626:9" pos:end="1626:20">return <expr pos:start="1626:16" pos:end="1626:19"><name pos:start="1626:16" pos:end="1626:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1628:5" pos:end="1635:5"><if pos:start="1628:5" pos:end="1635:5">if <condition pos:start="1628:8" pos:end="1628:27">(<expr pos:start="1628:9" pos:end="1628:26"><name pos:start="1628:9" pos:end="1628:26">cacerts_resp_chain</name></expr>)</condition> <block pos:start="1628:29" pos:end="1635:5">{<block_content pos:start="1629:9" pos:end="1634:9">        
        <expr_stmt pos:start="1629:9" pos:end="1629:70"><expr pos:start="1629:9" pos:end="1629:69"><name pos:start="1629:9" pos:end="1629:11">len</name> <operator pos:start="1629:13" pos:end="1629:13">=</operator> <operator pos:start="1629:15" pos:end="1629:15">(</operator><name pos:start="1629:16" pos:end="1629:18">int</name><operator pos:start="1629:19" pos:end="1629:19">)</operator> <call pos:start="1629:21" pos:end="1629:69"><name pos:start="1629:21" pos:end="1629:29">strnlen_s</name><argument_list pos:start="1629:30" pos:end="1629:69">(<argument pos:start="1629:31" pos:end="1629:56"><expr pos:start="1629:31" pos:end="1629:56"><operator pos:start="1629:31" pos:end="1629:31">(</operator><name pos:start="1629:32" pos:end="1629:35">char</name> <operator pos:start="1629:37" pos:end="1629:37">*</operator><operator pos:start="1629:38" pos:end="1629:38">)</operator><name pos:start="1629:39" pos:end="1629:56">cacerts_resp_chain</name></expr></argument>, <argument pos:start="1629:59" pos:end="1629:68"><expr pos:start="1629:59" pos:end="1629:68"><name pos:start="1629:59" pos:end="1629:68">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1630:9" pos:end="1634:9"><if pos:start="1630:9" pos:end="1634:9">if <condition pos:start="1630:12" pos:end="1630:42">(<expr pos:start="1630:13" pos:end="1630:41"><name pos:start="1630:13" pos:end="1630:15">len</name> <operator pos:start="1630:17" pos:end="1630:18">!=</operator> <name pos:start="1630:20" pos:end="1630:41">cacerts_resp_chain_len</name></expr>)</condition> <block pos:start="1630:44" pos:end="1634:9">{<block_content pos:start="1631:13" pos:end="1633:24">
            <expr_stmt pos:start="1631:13" pos:end="1632:50"><expr pos:start="1631:13" pos:end="1632:49"><call pos:start="1631:13" pos:end="1632:49"><name pos:start="1631:13" pos:end="1631:23">EST_LOG_ERR</name><argument_list pos:start="1631:24" pos:end="1632:49">(<argument pos:start="1631:25" pos:end="1632:48"><expr pos:start="1631:25" pos:end="1632:48"><literal type="string" pos:start="1631:25" pos:end="1631:77">"Actual length of cacerts_resp_chain does not match "</literal>
                        <literal type="string" pos:start="1632:25" pos:end="1632:48">"passed in length value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1633:13" pos:end="1633:24">return <expr pos:start="1633:20" pos:end="1633:23"><name pos:start="1633:20" pos:end="1633:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1637:5" pos:end="1640:5"><if pos:start="1637:5" pos:end="1640:5">if <condition pos:start="1637:8" pos:end="1637:28">(<expr pos:start="1637:9" pos:end="1637:27"><name pos:start="1637:9" pos:end="1637:19">tls_id_cert</name> <operator pos:start="1637:21" pos:end="1637:22">==</operator> <name pos:start="1637:24" pos:end="1637:27">NULL</name></expr>)</condition> <block pos:start="1637:30" pos:end="1640:5">{<block_content pos:start="1638:9" pos:end="1639:20">
        <expr_stmt pos:start="1638:9" pos:end="1638:50"><expr pos:start="1638:9" pos:end="1638:49"><call pos:start="1638:9" pos:end="1638:49"><name pos:start="1638:9" pos:end="1638:19">EST_LOG_ERR</name><argument_list pos:start="1638:20" pos:end="1638:49">(<argument pos:start="1638:21" pos:end="1638:48"><expr pos:start="1638:21" pos:end="1638:48"><literal type="string" pos:start="1638:21" pos:end="1638:48">"TLS identity cert is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1639:9" pos:end="1639:20">return <expr pos:start="1639:16" pos:end="1639:19"><name pos:start="1639:16" pos:end="1639:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1642:5" pos:end="1645:5"><if pos:start="1642:5" pos:end="1645:5">if <condition pos:start="1642:8" pos:end="1642:27">(<expr pos:start="1642:9" pos:end="1642:26"><name pos:start="1642:9" pos:end="1642:18">tls_id_key</name> <operator pos:start="1642:20" pos:end="1642:21">==</operator> <name pos:start="1642:23" pos:end="1642:26">NULL</name></expr>)</condition> <block pos:start="1642:29" pos:end="1645:5">{<block_content pos:start="1643:9" pos:end="1644:20">
        <expr_stmt pos:start="1643:9" pos:end="1643:78"><expr pos:start="1643:9" pos:end="1643:77"><call pos:start="1643:9" pos:end="1643:77"><name pos:start="1643:9" pos:end="1643:19">EST_LOG_ERR</name><argument_list pos:start="1643:20" pos:end="1643:77">(<argument pos:start="1643:21" pos:end="1643:76"><expr pos:start="1643:21" pos:end="1643:76"><literal type="string" pos:start="1643:21" pos:end="1643:76">"Private key associated with TLS identity cert is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1644:9" pos:end="1644:20">return <expr pos:start="1644:16" pos:end="1644:19"><name pos:start="1644:16" pos:end="1644:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1646:5" pos:end="1649:5"><if pos:start="1646:5" pos:end="1649:5">if <condition pos:start="1646:8" pos:end="1646:27">(<expr pos:start="1646:9" pos:end="1646:26"><name pos:start="1646:9" pos:end="1646:18">http_realm</name> <operator pos:start="1646:20" pos:end="1646:21">==</operator> <name pos:start="1646:23" pos:end="1646:26">NULL</name></expr>)</condition> <block pos:start="1646:29" pos:end="1649:5">{<block_content pos:start="1647:9" pos:end="1648:20">
        <expr_stmt pos:start="1647:9" pos:end="1647:46"><expr pos:start="1647:9" pos:end="1647:45"><call pos:start="1647:9" pos:end="1647:45"><name pos:start="1647:9" pos:end="1647:19">EST_LOG_ERR</name><argument_list pos:start="1647:20" pos:end="1647:45">(<argument pos:start="1647:21" pos:end="1647:44"><expr pos:start="1647:21" pos:end="1647:44"><literal type="string" pos:start="1647:21" pos:end="1647:44">"EST HTTP realm is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1648:9" pos:end="1648:20">return <expr pos:start="1648:16" pos:end="1648:19"><name pos:start="1648:16" pos:end="1648:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1651:5" pos:end="1651:34"><expr pos:start="1651:5" pos:end="1651:33"><name pos:start="1651:5" pos:end="1651:7">ctx</name> <operator pos:start="1651:9" pos:end="1651:9">=</operator> <call pos:start="1651:11" pos:end="1651:33"><name pos:start="1651:11" pos:end="1651:16">malloc</name><argument_list pos:start="1651:17" pos:end="1651:33">(<argument pos:start="1651:18" pos:end="1651:32"><expr pos:start="1651:18" pos:end="1651:32"><sizeof pos:start="1651:18" pos:end="1651:32">sizeof<argument_list pos:start="1651:24" pos:end="1651:32">(<argument pos:start="1651:25" pos:end="1651:31"><expr pos:start="1651:25" pos:end="1651:31"><name pos:start="1651:25" pos:end="1651:31">EST_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1652:5" pos:end="1655:5"><if pos:start="1652:5" pos:end="1655:5">if <condition pos:start="1652:8" pos:end="1652:13">(<expr pos:start="1652:9" pos:end="1652:12"><operator pos:start="1652:9" pos:end="1652:9">!</operator><name pos:start="1652:10" pos:end="1652:12">ctx</name></expr>)</condition> <block pos:start="1652:15" pos:end="1655:5">{<block_content pos:start="1653:9" pos:end="1654:20">
        <expr_stmt pos:start="1653:9" pos:end="1653:37"><expr pos:start="1653:9" pos:end="1653:36"><call pos:start="1653:9" pos:end="1653:36"><name pos:start="1653:9" pos:end="1653:19">EST_LOG_ERR</name><argument_list pos:start="1653:20" pos:end="1653:36">(<argument pos:start="1653:21" pos:end="1653:35"><expr pos:start="1653:21" pos:end="1653:35"><literal type="string" pos:start="1653:21" pos:end="1653:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1654:9" pos:end="1654:20">return <expr pos:start="1654:16" pos:end="1654:19"><name pos:start="1654:16" pos:end="1654:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1656:5" pos:end="1656:36"><expr pos:start="1656:5" pos:end="1656:35"><call pos:start="1656:5" pos:end="1656:35"><name pos:start="1656:5" pos:end="1656:13">memzero_s</name><argument_list pos:start="1656:14" pos:end="1656:35">(<argument pos:start="1656:15" pos:end="1656:17"><expr pos:start="1656:15" pos:end="1656:17"><name pos:start="1656:15" pos:end="1656:17">ctx</name></expr></argument>, <argument pos:start="1656:20" pos:end="1656:34"><expr pos:start="1656:20" pos:end="1656:34"><sizeof pos:start="1656:20" pos:end="1656:34">sizeof<argument_list pos:start="1656:26" pos:end="1656:34">(<argument pos:start="1656:27" pos:end="1656:33"><expr pos:start="1656:27" pos:end="1656:33"><name pos:start="1656:27" pos:end="1656:33">EST_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1657:5" pos:end="1657:31"><expr pos:start="1657:5" pos:end="1657:30"><name pos:start="1657:5" pos:end="1657:17"><name pos:start="1657:5" pos:end="1657:7">ctx</name><operator pos:start="1657:8" pos:end="1657:9">-&gt;</operator><name pos:start="1657:10" pos:end="1657:17">est_mode</name></name> <operator pos:start="1657:19" pos:end="1657:19">=</operator> <name pos:start="1657:21" pos:end="1657:30">EST_SERVER</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1658:5" pos:end="1658:45"><expr pos:start="1658:5" pos:end="1658:44"><name pos:start="1658:5" pos:end="1658:21"><name pos:start="1658:5" pos:end="1658:7">ctx</name><operator pos:start="1658:8" pos:end="1658:9">-&gt;</operator><name pos:start="1658:10" pos:end="1658:21">retry_period</name></name> <operator pos:start="1658:23" pos:end="1658:23">=</operator> <name pos:start="1658:25" pos:end="1658:44">EST_RETRY_PERIOD_DEF</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1659:5" pos:end="1659:48"><expr pos:start="1659:5" pos:end="1659:47"><name pos:start="1659:5" pos:end="1659:26"><name pos:start="1659:5" pos:end="1659:7">ctx</name><operator pos:start="1659:8" pos:end="1659:9">-&gt;</operator><name pos:start="1659:10" pos:end="1659:26">require_http_auth</name></name> <operator pos:start="1659:28" pos:end="1659:28">=</operator> <name pos:start="1659:30" pos:end="1659:47">HTTP_AUTH_REQUIRED</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1660:5" pos:end="1660:56"><expr pos:start="1660:5" pos:end="1660:55"><name pos:start="1660:5" pos:end="1660:28"><name pos:start="1660:5" pos:end="1660:7">ctx</name><operator pos:start="1660:8" pos:end="1660:9">-&gt;</operator><name pos:start="1660:10" pos:end="1660:28">server_read_timeout</name></name> <operator pos:start="1660:30" pos:end="1660:30">=</operator> <name pos:start="1660:32" pos:end="1660:55">EST_SSL_READ_TIMEOUT_DEF</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1662:5" pos:end="1667:7">/*
     * Load the CA certificates into local memory and retain
     * for future use.  This will be used for /cacerts requests.
     * They are optional parameters.  The alternative is for the
     * app layer to provide callback and return them on the fly.
     */</comment>
    <if_stmt pos:start="1668:5" pos:end="1675:5"><if pos:start="1668:5" pos:end="1675:5">if <condition pos:start="1668:8" pos:end="1668:27">(<expr pos:start="1668:9" pos:end="1668:26"><name pos:start="1668:9" pos:end="1668:26">cacerts_resp_chain</name></expr>)</condition> 
    <block pos:start="1669:5" pos:end="1675:5">{<block_content pos:start="1670:9" pos:end="1674:9">   
        <if_stmt pos:start="1670:9" pos:end="1674:9"><if pos:start="1670:9" pos:end="1674:9">if <condition pos:start="1670:12" pos:end="1670:79">(<expr pos:start="1670:13" pos:end="1670:78"><call pos:start="1670:13" pos:end="1670:78"><name pos:start="1670:13" pos:end="1670:29">est_load_ca_certs</name><argument_list pos:start="1670:30" pos:end="1670:78">(<argument pos:start="1670:31" pos:end="1670:33"><expr pos:start="1670:31" pos:end="1670:33"><name pos:start="1670:31" pos:end="1670:33">ctx</name></expr></argument>, <argument pos:start="1670:36" pos:end="1670:53"><expr pos:start="1670:36" pos:end="1670:53"><name pos:start="1670:36" pos:end="1670:53">cacerts_resp_chain</name></expr></argument>, <argument pos:start="1670:56" pos:end="1670:77"><expr pos:start="1670:56" pos:end="1670:77"><name pos:start="1670:56" pos:end="1670:77">cacerts_resp_chain_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1670:81" pos:end="1674:9">{<block_content pos:start="1671:13" pos:end="1673:24">
            <expr_stmt pos:start="1671:13" pos:end="1671:74"><expr pos:start="1671:13" pos:end="1671:73"><call pos:start="1671:13" pos:end="1671:73"><name pos:start="1671:13" pos:end="1671:23">EST_LOG_ERR</name><argument_list pos:start="1671:24" pos:end="1671:73">(<argument pos:start="1671:25" pos:end="1671:72"><expr pos:start="1671:25" pos:end="1671:72"><literal type="string" pos:start="1671:25" pos:end="1671:72">"Failed to load CA certificates response buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1672:13" pos:end="1672:22"><expr pos:start="1672:13" pos:end="1672:21"><call pos:start="1672:13" pos:end="1672:21"><name pos:start="1672:13" pos:end="1672:16">free</name><argument_list pos:start="1672:17" pos:end="1672:21">(<argument pos:start="1672:18" pos:end="1672:20"><expr pos:start="1672:18" pos:end="1672:20"><name pos:start="1672:18" pos:end="1672:20">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1673:13" pos:end="1673:24">return <expr pos:start="1673:20" pos:end="1673:23"><name pos:start="1673:20" pos:end="1673:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1676:5" pos:end="1680:5"><if pos:start="1676:5" pos:end="1680:5">if <condition pos:start="1676:8" pos:end="1676:60">(<expr pos:start="1676:9" pos:end="1676:59"><call pos:start="1676:9" pos:end="1676:59"><name pos:start="1676:9" pos:end="1676:30">est_load_trusted_certs</name><argument_list pos:start="1676:31" pos:end="1676:59">(<argument pos:start="1676:32" pos:end="1676:34"><expr pos:start="1676:32" pos:end="1676:34"><name pos:start="1676:32" pos:end="1676:34">ctx</name></expr></argument>, <argument pos:start="1676:37" pos:end="1676:44"><expr pos:start="1676:37" pos:end="1676:44"><name pos:start="1676:37" pos:end="1676:44">ca_chain</name></expr></argument>, <argument pos:start="1676:47" pos:end="1676:58"><expr pos:start="1676:47" pos:end="1676:58"><name pos:start="1676:47" pos:end="1676:58">ca_chain_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1676:62" pos:end="1680:5">{<block_content pos:start="1677:9" pos:end="1679:20">
        <expr_stmt pos:start="1677:9" pos:end="1677:63"><expr pos:start="1677:9" pos:end="1677:62"><call pos:start="1677:9" pos:end="1677:62"><name pos:start="1677:9" pos:end="1677:19">EST_LOG_ERR</name><argument_list pos:start="1677:20" pos:end="1677:62">(<argument pos:start="1677:21" pos:end="1677:61"><expr pos:start="1677:21" pos:end="1677:61"><literal type="string" pos:start="1677:21" pos:end="1677:61">"Failed to load trusted certficate store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1678:9" pos:end="1678:18"><expr pos:start="1678:9" pos:end="1678:17"><call pos:start="1678:9" pos:end="1678:17"><name pos:start="1678:9" pos:end="1678:12">free</name><argument_list pos:start="1678:13" pos:end="1678:17">(<argument pos:start="1678:14" pos:end="1678:16"><expr pos:start="1678:14" pos:end="1678:16"><name pos:start="1678:14" pos:end="1678:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1679:9" pos:end="1679:20">return <expr pos:start="1679:16" pos:end="1679:19"><name pos:start="1679:16" pos:end="1679:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1682:5" pos:end="1682:60"><expr pos:start="1682:5" pos:end="1682:59"><call pos:start="1682:5" pos:end="1682:59"><name pos:start="1682:5" pos:end="1682:13">strncpy_s</name><argument_list pos:start="1682:14" pos:end="1682:59">(<argument pos:start="1682:15" pos:end="1682:24"><expr pos:start="1682:15" pos:end="1682:24"><name pos:start="1682:15" pos:end="1682:24"><name pos:start="1682:15" pos:end="1682:17">ctx</name><operator pos:start="1682:18" pos:end="1682:19">-&gt;</operator><name pos:start="1682:20" pos:end="1682:24">realm</name></name></expr></argument>, <argument pos:start="1682:27" pos:end="1682:35"><expr pos:start="1682:27" pos:end="1682:35"><name pos:start="1682:27" pos:end="1682:35">MAX_REALM</name></expr></argument>, <argument pos:start="1682:38" pos:end="1682:47"><expr pos:start="1682:38" pos:end="1682:47"><name pos:start="1682:38" pos:end="1682:47">http_realm</name></expr></argument>, <argument pos:start="1682:50" pos:end="1682:58"><expr pos:start="1682:50" pos:end="1682:58"><name pos:start="1682:50" pos:end="1682:58">MAX_REALM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1683:5" pos:end="1683:35"><expr pos:start="1683:5" pos:end="1683:34"><name pos:start="1683:5" pos:end="1683:20"><name pos:start="1683:5" pos:end="1683:7">ctx</name><operator pos:start="1683:8" pos:end="1683:9">-&gt;</operator><name pos:start="1683:10" pos:end="1683:20">server_cert</name></name> <operator pos:start="1683:22" pos:end="1683:22">=</operator> <name pos:start="1683:24" pos:end="1683:34">tls_id_cert</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1684:5" pos:end="1684:38"><expr pos:start="1684:5" pos:end="1684:37"><name pos:start="1684:5" pos:end="1684:24"><name pos:start="1684:5" pos:end="1684:7">ctx</name><operator pos:start="1684:8" pos:end="1684:9">-&gt;</operator><name pos:start="1684:10" pos:end="1684:24">server_priv_key</name></name> <operator pos:start="1684:26" pos:end="1684:26">=</operator> <name pos:start="1684:28" pos:end="1684:37">tls_id_key</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1685:5" pos:end="1685:32"><expr pos:start="1685:5" pos:end="1685:31"><name pos:start="1685:5" pos:end="1685:18"><name pos:start="1685:5" pos:end="1685:7">ctx</name><operator pos:start="1685:8" pos:end="1685:9">-&gt;</operator><name pos:start="1685:10" pos:end="1685:18">auth_mode</name></name> <operator pos:start="1685:20" pos:end="1685:20">=</operator> <name pos:start="1685:22" pos:end="1685:31">AUTH_BASIC</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1686:5" pos:end="1686:31"><expr pos:start="1686:5" pos:end="1686:30"><name pos:start="1686:5" pos:end="1686:26"><name pos:start="1686:5" pos:end="1686:7">ctx</name><operator pos:start="1686:8" pos:end="1686:9">-&gt;</operator><name pos:start="1686:10" pos:end="1686:26">server_enable_pop</name></name> <operator pos:start="1686:28" pos:end="1686:28">=</operator> <literal type="number" pos:start="1686:30" pos:end="1686:30">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1687:5" pos:end="1687:38"><expr pos:start="1687:5" pos:end="1687:37"><name pos:start="1687:5" pos:end="1687:33"><name pos:start="1687:5" pos:end="1687:7">ctx</name><operator pos:start="1687:8" pos:end="1687:9">-&gt;</operator><name pos:start="1687:10" pos:end="1687:33">local_cacerts_processing</name></name> <operator pos:start="1687:35" pos:end="1687:35">=</operator> <literal type="number" pos:start="1687:37" pos:end="1687:37">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="1689:5" pos:end="1694:7">/* 
     * Create a new ASN object for the id-kp-cmcRA OID.  
     * OpenSSL doesn't define this, so we need to create it
     * ourselves.
     * http://www.openssl.org/docs/crypto/OBJ_nid2obj.html
     */</comment>
    <if_stmt pos:start="1695:5" pos:end="1700:5"><if pos:start="1695:5" pos:end="1700:5">if <condition pos:start="1695:8" pos:end="1695:17">(<expr pos:start="1695:9" pos:end="1695:16"><operator pos:start="1695:9" pos:end="1695:9">!</operator><name pos:start="1695:10" pos:end="1695:16">o_cmcRA</name></expr>)</condition> <block pos:start="1695:19" pos:end="1700:5">{<block_content pos:start="1696:9" pos:end="1699:9">
	<expr_stmt pos:start="1696:9" pos:end="1696:55"><expr pos:start="1696:9" pos:end="1696:54"><name pos:start="1696:9" pos:end="1696:15">o_cmcRA</name> <operator pos:start="1696:17" pos:end="1696:17">=</operator> <call pos:start="1696:19" pos:end="1696:54"><name pos:start="1696:19" pos:end="1696:29">OBJ_txt2obj</name><argument_list pos:start="1696:30" pos:end="1696:54">(<argument pos:start="1696:31" pos:end="1696:50"><expr pos:start="1696:31" pos:end="1696:50"><literal type="string" pos:start="1696:31" pos:end="1696:50">"1.3.6.1.5.5.7.3.28"</literal></expr></argument>, <argument pos:start="1696:53" pos:end="1696:53"><expr pos:start="1696:53" pos:end="1696:53"><literal type="number" pos:start="1696:53" pos:end="1696:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1697:9" pos:end="1699:9"><if pos:start="1697:9" pos:end="1699:9">if <condition pos:start="1697:12" pos:end="1697:21">(<expr pos:start="1697:13" pos:end="1697:20"><operator pos:start="1697:13" pos:end="1697:13">!</operator><name pos:start="1697:14" pos:end="1697:20">o_cmcRA</name></expr>)</condition> <block pos:start="1697:23" pos:end="1699:9">{<block_content pos:start="1698:13" pos:end="1698:82">
	    <expr_stmt pos:start="1698:13" pos:end="1698:82"><expr pos:start="1698:13" pos:end="1698:81"><call pos:start="1698:13" pos:end="1698:81"><name pos:start="1698:13" pos:end="1698:24">EST_LOG_WARN</name><argument_list pos:start="1698:25" pos:end="1698:81">(<argument pos:start="1698:26" pos:end="1698:80"><expr pos:start="1698:26" pos:end="1698:80"><literal type="string" pos:start="1698:26" pos:end="1698:80">"Failed to create OID for id-kp-cmcRA key usage checks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="1702:5" pos:end="1702:17">return <expr pos:start="1702:12" pos:end="1702:16"><operator pos:start="1702:12" pos:end="1702:12">(</operator><name pos:start="1702:13" pos:end="1702:15">ctx</name><operator pos:start="1702:16" pos:end="1702:16">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1704:1" pos:end="1719:3">/*! @brief est_server_set_auth_mode() is used by an application to configure
    the HTTP authentication method to use for validating the identity of
    an EST client.
 
    @param ctx   Pointer to the EST context
    @param amode Must be one of the following: AUTH_BASIC, AUTH_DIGEST, AUTH_TOKEN

    This function can optionally be invoked by the application to change the
    default HTTP authentication mode.  The default mode is HTTP Basic
    authentication.  An application may desire to use Digest or Token
    authentication instead, in which case this function can be used to set
    that mode.  This function must be invoked prior to starting the EST
    server.

    @return EST_ERROR.
 */</comment>
<function pos:start="1720:1" pos:end="1747:1"><type pos:start="1720:1" pos:end="1720:9"><name pos:start="1720:1" pos:end="1720:9">EST_ERROR</name></type> <name pos:start="1720:11" pos:end="1720:34">est_server_set_auth_mode</name> <parameter_list pos:start="1720:36" pos:end="1720:75">(<parameter pos:start="1720:37" pos:end="1720:48"><decl pos:start="1720:37" pos:end="1720:48"><type pos:start="1720:37" pos:end="1720:48"><name pos:start="1720:37" pos:end="1720:43">EST_CTX</name> <modifier pos:start="1720:45" pos:end="1720:45">*</modifier></type><name pos:start="1720:46" pos:end="1720:48">ctx</name></decl></parameter>, <parameter pos:start="1720:51" pos:end="1720:74"><decl pos:start="1720:51" pos:end="1720:74"><type pos:start="1720:51" pos:end="1720:74"><name pos:start="1720:51" pos:end="1720:68">EST_HTTP_AUTH_MODE</name></type> <name pos:start="1720:70" pos:end="1720:74">amode</name></decl></parameter>)</parameter_list>
<block pos:start="1721:1" pos:end="1747:1">{<block_content pos:start="1722:5" pos:end="1746:5">
    <if_stmt pos:start="1722:5" pos:end="1725:5"><if pos:start="1722:5" pos:end="1725:5">if <condition pos:start="1722:8" pos:end="1722:13">(<expr pos:start="1722:9" pos:end="1722:12"><operator pos:start="1722:9" pos:end="1722:9">!</operator><name pos:start="1722:10" pos:end="1722:12">ctx</name></expr>)</condition> <block pos:start="1722:15" pos:end="1725:5">{<block_content pos:start="1723:9" pos:end="1724:32">
	<expr_stmt pos:start="1723:9" pos:end="1723:36"><expr pos:start="1723:9" pos:end="1723:35"><call pos:start="1723:9" pos:end="1723:35"><name pos:start="1723:9" pos:end="1723:19">EST_LOG_ERR</name><argument_list pos:start="1723:20" pos:end="1723:35">(<argument pos:start="1723:21" pos:end="1723:34"><expr pos:start="1723:21" pos:end="1723:34"><literal type="string" pos:start="1723:21" pos:end="1723:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1724:9" pos:end="1724:32">return <expr pos:start="1724:16" pos:end="1724:31"><operator pos:start="1724:16" pos:end="1724:16">(</operator><name pos:start="1724:17" pos:end="1724:30">EST_ERR_NO_CTX</name><operator pos:start="1724:31" pos:end="1724:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch pos:start="1727:5" pos:end="1746:5">switch <condition pos:start="1727:12" pos:end="1727:18">(<expr pos:start="1727:13" pos:end="1727:17"><name pos:start="1727:13" pos:end="1727:17">amode</name></expr>)</condition> <block pos:start="1727:20" pos:end="1746:5">{<block_content pos:start="1728:5" pos:end="1745:14">
    <case pos:start="1728:5" pos:end="1728:21">case <expr pos:start="1728:10" pos:end="1728:20"><name pos:start="1728:10" pos:end="1728:20">AUTH_DIGEST</name></expr>:</case>
        <comment type="block" pos:start="1729:9" pos:end="1731:11">/*
         * Since HTTP digest auth uses MD5, make sure we're not in FIPS mode.
         */</comment>
	<if_stmt pos:start="1732:9" pos:end="1735:9"><if pos:start="1732:9" pos:end="1735:9">if <condition pos:start="1732:12" pos:end="1732:24">(<expr pos:start="1732:13" pos:end="1732:23"><call pos:start="1732:13" pos:end="1732:23"><name pos:start="1732:13" pos:end="1732:21">FIPS_mode</name><argument_list pos:start="1732:22" pos:end="1732:23">()</argument_list></call></expr>)</condition> <block pos:start="1732:26" pos:end="1735:9">{<block_content pos:start="1733:13" pos:end="1734:38">
	    <expr_stmt pos:start="1733:13" pos:end="1733:75"><expr pos:start="1733:13" pos:end="1733:74"><call pos:start="1733:13" pos:end="1733:74"><name pos:start="1733:13" pos:end="1733:23">EST_LOG_ERR</name><argument_list pos:start="1733:24" pos:end="1733:74">(<argument pos:start="1733:25" pos:end="1733:73"><expr pos:start="1733:25" pos:end="1733:73"><literal type="string" pos:start="1733:25" pos:end="1733:73">"HTTP digest auth not allowed while in FIPS mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1734:13" pos:end="1734:38">return <expr pos:start="1734:20" pos:end="1734:37"><operator pos:start="1734:20" pos:end="1734:20">(</operator><name pos:start="1734:21" pos:end="1734:36">EST_ERR_BAD_MODE</name><operator pos:start="1734:37" pos:end="1734:37">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="1736:9" pos:end="1736:25">/* fallthrough */</comment>
    <case pos:start="1737:5" pos:end="1737:20">case <expr pos:start="1737:10" pos:end="1737:19"><name pos:start="1737:10" pos:end="1737:19">AUTH_BASIC</name></expr>:</case>        
    <case pos:start="1738:5" pos:end="1738:20">case <expr pos:start="1738:10" pos:end="1738:19"><name pos:start="1738:10" pos:end="1738:19">AUTH_TOKEN</name></expr>:</case>        
	<expr_stmt pos:start="1739:9" pos:end="1739:31"><expr pos:start="1739:9" pos:end="1739:30"><name pos:start="1739:9" pos:end="1739:22"><name pos:start="1739:9" pos:end="1739:11">ctx</name><operator pos:start="1739:12" pos:end="1739:13">-&gt;</operator><name pos:start="1739:14" pos:end="1739:22">auth_mode</name></name> <operator pos:start="1739:24" pos:end="1739:24">=</operator> <name pos:start="1739:26" pos:end="1739:30">amode</name></expr>;</expr_stmt>
	<return pos:start="1740:9" pos:end="1740:30">return <expr pos:start="1740:16" pos:end="1740:29"><operator pos:start="1740:16" pos:end="1740:16">(</operator><name pos:start="1740:17" pos:end="1740:28">EST_ERR_NONE</name><operator pos:start="1740:29" pos:end="1740:29">)</operator></expr>;</return>
	<break pos:start="1741:9" pos:end="1741:14">break;</break>
    <default pos:start="1742:5" pos:end="1742:12">default:</default>
        <expr_stmt pos:start="1743:9" pos:end="1743:98"><expr pos:start="1743:9" pos:end="1743:97"><call pos:start="1743:9" pos:end="1743:97"><name pos:start="1743:9" pos:end="1743:19">EST_LOG_ERR</name><argument_list pos:start="1743:20" pos:end="1743:97">(<argument pos:start="1743:21" pos:end="1743:96"><expr pos:start="1743:21" pos:end="1743:96"><literal type="string" pos:start="1743:21" pos:end="1743:96">"Unsupported HTTP authentication mode, only Basic, Digest and Token allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1744:9" pos:end="1744:34">return <expr pos:start="1744:16" pos:end="1744:33"><operator pos:start="1744:16" pos:end="1744:16">(</operator><name pos:start="1744:17" pos:end="1744:32">EST_ERR_BAD_MODE</name><operator pos:start="1744:33" pos:end="1744:33">)</operator></expr>;</return>
	<break pos:start="1745:9" pos:end="1745:14">break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1748:1" pos:end="1765:3">/*! @brief est_set_ca_enroll_cb() is used by an application to install
    a handler for signing incoming PKCS10 requests.  
 
    @param ctx Pointer to the EST context
    @param cb Function address of the handler

    This function must be called prior to starting the EST server.  The
    callback function must match the following prototype:

        int func(unsigned char*, int, unsigned char**, int*, char*, X509*, char *, void *);

    This function is called by libEST when a certificate request
    needs to be signed by the CA server.  The application will need
    to forward the request to the signing authority and return
    the response.  The response should be a PKCS7 signed certificate.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1766:1" pos:end="1779:1"><type pos:start="1766:1" pos:end="1766:9"><name pos:start="1766:1" pos:end="1766:9">EST_ERROR</name></type> <name pos:start="1766:11" pos:end="1766:30">est_set_ca_enroll_cb</name> <parameter_list pos:start="1766:32" pos:end="1769:87">(<parameter pos:start="1766:33" pos:end="1766:44"><decl pos:start="1766:33" pos:end="1766:44"><type pos:start="1766:33" pos:end="1766:44"><name pos:start="1766:33" pos:end="1766:39">EST_CTX</name> <modifier pos:start="1766:41" pos:end="1766:41">*</modifier></type><name pos:start="1766:42" pos:end="1766:44">ctx</name></decl></parameter>, <parameter pos:start="1766:47" pos:end="1769:86"><function_decl pos:start="1766:47" pos:end="1769:86"><type pos:start="1766:47" pos:end="1766:49"><name pos:start="1766:47" pos:end="1766:49">int</name></type> (<modifier pos:start="1766:52" pos:end="1766:52">*</modifier><name pos:start="1766:53" pos:end="1766:54">cb</name>)<parameter_list pos:start="1766:56" pos:end="1769:86">(<parameter pos:start="1766:57" pos:end="1766:77"><decl pos:start="1766:57" pos:end="1766:77"><type pos:start="1766:57" pos:end="1766:77"><name pos:start="1766:57" pos:end="1766:64">unsigned</name> <name pos:start="1766:66" pos:end="1766:69">char</name> <modifier pos:start="1766:71" pos:end="1766:71">*</modifier></type><name pos:start="1766:72" pos:end="1766:77">pkcs10</name></decl></parameter>, <parameter pos:start="1766:80" pos:end="1766:90"><decl pos:start="1766:80" pos:end="1766:90"><type pos:start="1766:80" pos:end="1766:90"><name pos:start="1766:80" pos:end="1766:82">int</name></type> <name pos:start="1766:84" pos:end="1766:90">p10_len</name></decl></parameter>,
                                                        <parameter pos:start="1767:57" pos:end="1767:77"><decl pos:start="1767:57" pos:end="1767:77"><type pos:start="1767:57" pos:end="1767:77"><name pos:start="1767:57" pos:end="1767:64">unsigned</name> <name pos:start="1767:66" pos:end="1767:69">char</name> <modifier pos:start="1767:71" pos:end="1767:71">*</modifier><modifier pos:start="1767:72" pos:end="1767:72">*</modifier></type><name pos:start="1767:73" pos:end="1767:77">pkcs7</name></decl></parameter>, <parameter pos:start="1767:80" pos:end="1767:93"><decl pos:start="1767:80" pos:end="1767:93"><type pos:start="1767:80" pos:end="1767:93"><name pos:start="1767:80" pos:end="1767:82">int</name> <modifier pos:start="1767:84" pos:end="1767:84">*</modifier></type><name pos:start="1767:85" pos:end="1767:93">pkcs7_len</name></decl></parameter>,
                                                        <parameter pos:start="1768:57" pos:end="1768:69"><decl pos:start="1768:57" pos:end="1768:69"><type pos:start="1768:57" pos:end="1768:69"><name pos:start="1768:57" pos:end="1768:60">char</name> <modifier pos:start="1768:62" pos:end="1768:62">*</modifier></type><name pos:start="1768:63" pos:end="1768:69">user_id</name></decl></parameter>, <parameter pos:start="1768:72" pos:end="1768:86"><decl pos:start="1768:72" pos:end="1768:86"><type pos:start="1768:72" pos:end="1768:86"><name pos:start="1768:72" pos:end="1768:75">X509</name> <modifier pos:start="1768:77" pos:end="1768:77">*</modifier></type><name pos:start="1768:78" pos:end="1768:86">peer_cert</name></decl></parameter>,
                                                        <parameter pos:start="1769:57" pos:end="1769:70"><decl pos:start="1769:57" pos:end="1769:70"><type pos:start="1769:57" pos:end="1769:70"><name pos:start="1769:57" pos:end="1769:60">char</name> <modifier pos:start="1769:62" pos:end="1769:62">*</modifier></type><name pos:start="1769:63" pos:end="1769:70">path_seg</name></decl></parameter>, <parameter pos:start="1769:73" pos:end="1769:85"><decl pos:start="1769:73" pos:end="1769:85"><type pos:start="1769:73" pos:end="1769:85"><name pos:start="1769:73" pos:end="1769:76">void</name> <modifier pos:start="1769:78" pos:end="1769:78">*</modifier></type><name pos:start="1769:79" pos:end="1769:85">ex_data</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block pos:start="1770:1" pos:end="1779:1">{<block_content pos:start="1771:5" pos:end="1778:26">
    <if_stmt pos:start="1771:5" pos:end="1774:5"><if pos:start="1771:5" pos:end="1774:5">if <condition pos:start="1771:8" pos:end="1771:13">(<expr pos:start="1771:9" pos:end="1771:12"><operator pos:start="1771:9" pos:end="1771:9">!</operator><name pos:start="1771:10" pos:end="1771:12">ctx</name></expr>)</condition> <block pos:start="1771:15" pos:end="1774:5">{<block_content pos:start="1772:9" pos:end="1773:32">
	<expr_stmt pos:start="1772:9" pos:end="1772:36"><expr pos:start="1772:9" pos:end="1772:35"><call pos:start="1772:9" pos:end="1772:35"><name pos:start="1772:9" pos:end="1772:19">EST_LOG_ERR</name><argument_list pos:start="1772:20" pos:end="1772:35">(<argument pos:start="1772:21" pos:end="1772:34"><expr pos:start="1772:21" pos:end="1772:34"><literal type="string" pos:start="1772:21" pos:end="1772:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1773:9" pos:end="1773:32">return <expr pos:start="1773:16" pos:end="1773:31"><operator pos:start="1773:16" pos:end="1773:16">(</operator><name pos:start="1773:17" pos:end="1773:30">EST_ERR_NO_CTX</name><operator pos:start="1773:31" pos:end="1773:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1776:5" pos:end="1776:35"><expr pos:start="1776:5" pos:end="1776:34"><name pos:start="1776:5" pos:end="1776:29"><name pos:start="1776:5" pos:end="1776:7">ctx</name><operator pos:start="1776:8" pos:end="1776:9">-&gt;</operator><name pos:start="1776:10" pos:end="1776:29">est_enroll_pkcs10_cb</name></name> <operator pos:start="1776:31" pos:end="1776:31">=</operator> <name pos:start="1776:33" pos:end="1776:34">cb</name></expr>;</expr_stmt>

    <return pos:start="1778:5" pos:end="1778:26">return <expr pos:start="1778:12" pos:end="1778:25"><operator pos:start="1778:12" pos:end="1778:12">(</operator><name pos:start="1778:13" pos:end="1778:24">EST_ERR_NONE</name><operator pos:start="1778:25" pos:end="1778:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1780:1" pos:end="1797:3">/*! @brief est_set_ca_reenroll_cb() is used by an application to install
    a handler for re-enrolling certificates.  
 
    @param ctx Pointer to the EST context
    @param cb Function address of the handler

    This function must be called prior to starting the EST server.  The
    callback function must match the following prototype:

        int func(unsigned char*, int, unsigned char**, int*, char*, X509*)

    This function is called by libEST when a certificate 
    needs to be renewed by the CA server.  The application will need
    to forward the request to the signing authority and return
    the response.  The response should be a PKCS7 signed certificate.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1798:1" pos:end="1811:1"><type pos:start="1798:1" pos:end="1798:9"><name pos:start="1798:1" pos:end="1798:9">EST_ERROR</name></type> <name pos:start="1798:11" pos:end="1798:32">est_set_ca_reenroll_cb</name> <parameter_list pos:start="1798:34" pos:end="1801:89">(<parameter pos:start="1798:35" pos:end="1798:46"><decl pos:start="1798:35" pos:end="1798:46"><type pos:start="1798:35" pos:end="1798:46"><name pos:start="1798:35" pos:end="1798:41">EST_CTX</name> <modifier pos:start="1798:43" pos:end="1798:43">*</modifier></type><name pos:start="1798:44" pos:end="1798:46">ctx</name></decl></parameter>, <parameter pos:start="1798:49" pos:end="1801:88"><function_decl pos:start="1798:49" pos:end="1801:88"><type pos:start="1798:49" pos:end="1798:51"><name pos:start="1798:49" pos:end="1798:51">int</name></type> (<modifier pos:start="1798:54" pos:end="1798:54">*</modifier><name pos:start="1798:55" pos:end="1798:56">cb</name>)<parameter_list pos:start="1798:58" pos:end="1801:88">(<parameter pos:start="1798:59" pos:end="1798:79"><decl pos:start="1798:59" pos:end="1798:79"><type pos:start="1798:59" pos:end="1798:79"><name pos:start="1798:59" pos:end="1798:66">unsigned</name> <name pos:start="1798:68" pos:end="1798:71">char</name> <modifier pos:start="1798:73" pos:end="1798:73">*</modifier></type><name pos:start="1798:74" pos:end="1798:79">pkcs10</name></decl></parameter>, <parameter pos:start="1798:82" pos:end="1798:92"><decl pos:start="1798:82" pos:end="1798:92"><type pos:start="1798:82" pos:end="1798:92"><name pos:start="1798:82" pos:end="1798:84">int</name></type> <name pos:start="1798:86" pos:end="1798:92">p10_len</name></decl></parameter>,
                                                          <parameter pos:start="1799:59" pos:end="1799:79"><decl pos:start="1799:59" pos:end="1799:79"><type pos:start="1799:59" pos:end="1799:79"><name pos:start="1799:59" pos:end="1799:66">unsigned</name> <name pos:start="1799:68" pos:end="1799:71">char</name> <modifier pos:start="1799:73" pos:end="1799:73">*</modifier><modifier pos:start="1799:74" pos:end="1799:74">*</modifier></type><name pos:start="1799:75" pos:end="1799:79">pkcs7</name></decl></parameter>, <parameter pos:start="1799:82" pos:end="1799:95"><decl pos:start="1799:82" pos:end="1799:95"><type pos:start="1799:82" pos:end="1799:95"><name pos:start="1799:82" pos:end="1799:84">int</name> <modifier pos:start="1799:86" pos:end="1799:86">*</modifier></type><name pos:start="1799:87" pos:end="1799:95">pkcs7_len</name></decl></parameter>,
                                                          <parameter pos:start="1800:59" pos:end="1800:71"><decl pos:start="1800:59" pos:end="1800:71"><type pos:start="1800:59" pos:end="1800:71"><name pos:start="1800:59" pos:end="1800:62">char</name> <modifier pos:start="1800:64" pos:end="1800:64">*</modifier></type><name pos:start="1800:65" pos:end="1800:71">user_id</name></decl></parameter>, <parameter pos:start="1800:74" pos:end="1800:88"><decl pos:start="1800:74" pos:end="1800:88"><type pos:start="1800:74" pos:end="1800:88"><name pos:start="1800:74" pos:end="1800:77">X509</name> <modifier pos:start="1800:79" pos:end="1800:79">*</modifier></type><name pos:start="1800:80" pos:end="1800:88">peer_cert</name></decl></parameter>,
                                                          <parameter pos:start="1801:59" pos:end="1801:72"><decl pos:start="1801:59" pos:end="1801:72"><type pos:start="1801:59" pos:end="1801:72"><name pos:start="1801:59" pos:end="1801:62">char</name> <modifier pos:start="1801:64" pos:end="1801:64">*</modifier></type><name pos:start="1801:65" pos:end="1801:72">path_seg</name></decl></parameter>, <parameter pos:start="1801:75" pos:end="1801:87"><decl pos:start="1801:75" pos:end="1801:87"><type pos:start="1801:75" pos:end="1801:87"><name pos:start="1801:75" pos:end="1801:78">void</name> <modifier pos:start="1801:80" pos:end="1801:80">*</modifier></type><name pos:start="1801:81" pos:end="1801:87">ex_data</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block pos:start="1802:1" pos:end="1811:1">{<block_content pos:start="1803:5" pos:end="1810:26">
    <if_stmt pos:start="1803:5" pos:end="1806:5"><if pos:start="1803:5" pos:end="1806:5">if <condition pos:start="1803:8" pos:end="1803:13">(<expr pos:start="1803:9" pos:end="1803:12"><operator pos:start="1803:9" pos:end="1803:9">!</operator><name pos:start="1803:10" pos:end="1803:12">ctx</name></expr>)</condition> <block pos:start="1803:15" pos:end="1806:5">{<block_content pos:start="1804:9" pos:end="1805:32">
	<expr_stmt pos:start="1804:9" pos:end="1804:36"><expr pos:start="1804:9" pos:end="1804:35"><call pos:start="1804:9" pos:end="1804:35"><name pos:start="1804:9" pos:end="1804:19">EST_LOG_ERR</name><argument_list pos:start="1804:20" pos:end="1804:35">(<argument pos:start="1804:21" pos:end="1804:34"><expr pos:start="1804:21" pos:end="1804:34"><literal type="string" pos:start="1804:21" pos:end="1804:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1805:9" pos:end="1805:32">return <expr pos:start="1805:16" pos:end="1805:31"><operator pos:start="1805:16" pos:end="1805:16">(</operator><name pos:start="1805:17" pos:end="1805:30">EST_ERR_NO_CTX</name><operator pos:start="1805:31" pos:end="1805:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1808:5" pos:end="1808:37"><expr pos:start="1808:5" pos:end="1808:36"><name pos:start="1808:5" pos:end="1808:31"><name pos:start="1808:5" pos:end="1808:7">ctx</name><operator pos:start="1808:8" pos:end="1808:9">-&gt;</operator><name pos:start="1808:10" pos:end="1808:31">est_reenroll_pkcs10_cb</name></name> <operator pos:start="1808:33" pos:end="1808:33">=</operator> <name pos:start="1808:35" pos:end="1808:36">cb</name></expr>;</expr_stmt>

    <return pos:start="1810:5" pos:end="1810:26">return <expr pos:start="1810:12" pos:end="1810:25"><operator pos:start="1810:12" pos:end="1810:12">(</operator><name pos:start="1810:13" pos:end="1810:24">EST_ERR_NONE</name><operator pos:start="1810:25" pos:end="1810:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1812:1" pos:end="1835:3">/*! @brief est_set_http_auth_cb() is used by an application to install
    a handler for authenticating EST clients.
 
    @param ctx Pointer to the EST context
    @param cb Function address of the handler

    This function must be called prior to starting the EST server.  The
    callback function must match the following prototype:

    int (*cb)(EST_CTX *ctx, EST_HTTP_AUTH_HDR *ah, X509 *peer_cert,
              char *path_seg, void *ex_data)

    This function is called by libEST when performing HTTP authentication.
    libEST will pass the EST_HTTP_AUTH_HDR struct to the application,
    allowing the application to hook into a Radius, AAA, or some user
    authentication database.  The X509 certificate from the TLS 
    peer (EST client) is also provided through this callback facility, allowing
    the application layer to check for specific attributes in the 
    X509 certificate such as an 802.1AR device ID.  In addition,
    the path segment string is passed up if there was one in the
    request URI.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1836:1" pos:end="1849:1"><type pos:start="1836:1" pos:end="1836:9"><name pos:start="1836:1" pos:end="1836:9">EST_ERROR</name></type> <name pos:start="1836:11" pos:end="1836:30">est_set_http_auth_cb</name> <parameter_list pos:start="1836:32" pos:end="1839:57">(<parameter pos:start="1836:33" pos:end="1836:44"><decl pos:start="1836:33" pos:end="1836:44"><type pos:start="1836:33" pos:end="1836:44"><name pos:start="1836:33" pos:end="1836:39">EST_CTX</name> <modifier pos:start="1836:41" pos:end="1836:41">*</modifier></type><name pos:start="1836:42" pos:end="1836:44">ctx</name></decl></parameter>, 
                                <parameter pos:start="1837:33" pos:end="1839:56"><function_decl pos:start="1837:33" pos:end="1839:56"><type pos:start="1837:33" pos:end="1837:35"><name pos:start="1837:33" pos:end="1837:35">int</name></type> (<modifier pos:start="1837:38" pos:end="1837:38">*</modifier><name pos:start="1837:39" pos:end="1837:40">cb</name>)<parameter_list pos:start="1837:42" pos:end="1839:56">(<parameter pos:start="1837:43" pos:end="1837:54"><decl pos:start="1837:43" pos:end="1837:54"><type pos:start="1837:43" pos:end="1837:54"><name pos:start="1837:43" pos:end="1837:49">EST_CTX</name> <modifier pos:start="1837:51" pos:end="1837:51">*</modifier></type><name pos:start="1837:52" pos:end="1837:54">ctx</name></decl></parameter>, <parameter pos:start="1837:57" pos:end="1837:77"><decl pos:start="1837:57" pos:end="1837:77"><type pos:start="1837:57" pos:end="1837:77"><name pos:start="1837:57" pos:end="1837:73">EST_HTTP_AUTH_HDR</name> <modifier pos:start="1837:75" pos:end="1837:75">*</modifier></type><name pos:start="1837:76" pos:end="1837:77">ah</name></decl></parameter>, 
                                          <parameter pos:start="1838:43" pos:end="1838:57"><decl pos:start="1838:43" pos:end="1838:57"><type pos:start="1838:43" pos:end="1838:57"><name pos:start="1838:43" pos:end="1838:46">X509</name> <modifier pos:start="1838:48" pos:end="1838:48">*</modifier></type><name pos:start="1838:49" pos:end="1838:57">peer_cert</name></decl></parameter>, <parameter pos:start="1838:60" pos:end="1838:73"><decl pos:start="1838:60" pos:end="1838:73"><type pos:start="1838:60" pos:end="1838:73"><name pos:start="1838:60" pos:end="1838:63">char</name> <modifier pos:start="1838:65" pos:end="1838:65">*</modifier></type><name pos:start="1838:66" pos:end="1838:73">path_seg</name></decl></parameter>,
					  <parameter pos:start="1839:43" pos:end="1839:55"><decl pos:start="1839:43" pos:end="1839:55"><type pos:start="1839:43" pos:end="1839:55"><name pos:start="1839:43" pos:end="1839:46">void</name> <modifier pos:start="1839:48" pos:end="1839:48">*</modifier></type><name pos:start="1839:49" pos:end="1839:55">ex_data</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block pos:start="1840:1" pos:end="1849:1">{<block_content pos:start="1841:5" pos:end="1848:26">
    <if_stmt pos:start="1841:5" pos:end="1844:5"><if pos:start="1841:5" pos:end="1844:5">if <condition pos:start="1841:8" pos:end="1841:13">(<expr pos:start="1841:9" pos:end="1841:12"><operator pos:start="1841:9" pos:end="1841:9">!</operator><name pos:start="1841:10" pos:end="1841:12">ctx</name></expr>)</condition> <block pos:start="1841:15" pos:end="1844:5">{<block_content pos:start="1842:9" pos:end="1843:32">
	<expr_stmt pos:start="1842:9" pos:end="1842:36"><expr pos:start="1842:9" pos:end="1842:35"><call pos:start="1842:9" pos:end="1842:35"><name pos:start="1842:9" pos:end="1842:19">EST_LOG_ERR</name><argument_list pos:start="1842:20" pos:end="1842:35">(<argument pos:start="1842:21" pos:end="1842:34"><expr pos:start="1842:21" pos:end="1842:34"><literal type="string" pos:start="1842:21" pos:end="1842:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1843:9" pos:end="1843:32">return <expr pos:start="1843:16" pos:end="1843:31"><operator pos:start="1843:16" pos:end="1843:16">(</operator><name pos:start="1843:17" pos:end="1843:30">EST_ERR_NO_CTX</name><operator pos:start="1843:31" pos:end="1843:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1846:5" pos:end="1846:31"><expr pos:start="1846:5" pos:end="1846:30"><name pos:start="1846:5" pos:end="1846:25"><name pos:start="1846:5" pos:end="1846:7">ctx</name><operator pos:start="1846:8" pos:end="1846:9">-&gt;</operator><name pos:start="1846:10" pos:end="1846:25">est_http_auth_cb</name></name> <operator pos:start="1846:27" pos:end="1846:27">=</operator> <name pos:start="1846:29" pos:end="1846:30">cb</name></expr>;</expr_stmt>

    <return pos:start="1848:5" pos:end="1848:26">return <expr pos:start="1848:12" pos:end="1848:25"><operator pos:start="1848:12" pos:end="1848:12">(</operator><name pos:start="1848:13" pos:end="1848:24">EST_ERR_NONE</name><operator pos:start="1848:25" pos:end="1848:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1850:1" pos:end="1864:3">/*! @brief est_set_http_auth_required() is used by an application to define whether
    HTTP authentication should be required in addition to using client certificates.
 
    @param ctx Pointer to the EST context
    @param required Flag indicating that HTTP authentication is required. Set 
    to HTTP_AUTH_REQUIRED value to require HTTP auth.  Set to HTTP_AUTH_NOT_REQUIRED 
    if HTTP auth should occur only when TLS client authentication fails.
 
    @return EST_ERROR.

    The default mode is HTTP_AUTH_REQUIRED.  This means that HTTP authentication
    will be attempted even when TLS client authentication succeeds.  If HTTP
    authentication is only needed when TLS client auth fails, then set this
    to HTTP_AUTH_NOT_REQUIRED.
 */</comment>
<function pos:start="1865:1" pos:end="1875:1"><type pos:start="1865:1" pos:end="1865:9"><name pos:start="1865:1" pos:end="1865:9">EST_ERROR</name></type> <name pos:start="1865:11" pos:end="1865:36">est_set_http_auth_required</name> <parameter_list pos:start="1865:38" pos:end="1865:84">(<parameter pos:start="1865:39" pos:end="1865:50"><decl pos:start="1865:39" pos:end="1865:50"><type pos:start="1865:39" pos:end="1865:50"><name pos:start="1865:39" pos:end="1865:45">EST_CTX</name> <modifier pos:start="1865:47" pos:end="1865:47">*</modifier></type><name pos:start="1865:48" pos:end="1865:50">ctx</name></decl></parameter>, <parameter pos:start="1865:53" pos:end="1865:83"><decl pos:start="1865:53" pos:end="1865:83"><type pos:start="1865:53" pos:end="1865:83"><name pos:start="1865:53" pos:end="1865:74">EST_HTTP_AUTH_REQUIRED</name></type> <name pos:start="1865:76" pos:end="1865:83">required</name></decl></parameter>)</parameter_list>
<block pos:start="1866:1" pos:end="1875:1">{<block_content pos:start="1867:5" pos:end="1874:26">
    <if_stmt pos:start="1867:5" pos:end="1870:5"><if pos:start="1867:5" pos:end="1870:5">if <condition pos:start="1867:8" pos:end="1867:13">(<expr pos:start="1867:9" pos:end="1867:12"><operator pos:start="1867:9" pos:end="1867:9">!</operator><name pos:start="1867:10" pos:end="1867:12">ctx</name></expr>)</condition> <block pos:start="1867:15" pos:end="1870:5">{<block_content pos:start="1868:9" pos:end="1869:32">
	<expr_stmt pos:start="1868:9" pos:end="1868:36"><expr pos:start="1868:9" pos:end="1868:35"><call pos:start="1868:9" pos:end="1868:35"><name pos:start="1868:9" pos:end="1868:19">EST_LOG_ERR</name><argument_list pos:start="1868:20" pos:end="1868:35">(<argument pos:start="1868:21" pos:end="1868:34"><expr pos:start="1868:21" pos:end="1868:34"><literal type="string" pos:start="1868:21" pos:end="1868:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1869:9" pos:end="1869:32">return <expr pos:start="1869:16" pos:end="1869:31"><operator pos:start="1869:16" pos:end="1869:16">(</operator><name pos:start="1869:17" pos:end="1869:30">EST_ERR_NO_CTX</name><operator pos:start="1869:31" pos:end="1869:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1872:5" pos:end="1872:38"><expr pos:start="1872:5" pos:end="1872:37"><name pos:start="1872:5" pos:end="1872:26"><name pos:start="1872:5" pos:end="1872:7">ctx</name><operator pos:start="1872:8" pos:end="1872:9">-&gt;</operator><name pos:start="1872:10" pos:end="1872:26">require_http_auth</name></name> <operator pos:start="1872:28" pos:end="1872:28">=</operator> <name pos:start="1872:30" pos:end="1872:37">required</name></expr>;</expr_stmt>

    <return pos:start="1874:5" pos:end="1874:26">return <expr pos:start="1874:12" pos:end="1874:25"><operator pos:start="1874:12" pos:end="1874:12">(</operator><name pos:start="1874:13" pos:end="1874:24">EST_ERR_NONE</name><operator pos:start="1874:25" pos:end="1874:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1876:1" pos:end="1910:3">/*! @brief est_server_enable_srp() is used by an application to enable 
    the TLS-SRP authentication.  This allows EST clients that provide 
    SRP credentials at the TLS layer to be authenticated by the EST
    server.  This function must be invoked to enable server-side
    SRP support. 

    @param ctx Pointer to the EST context
    @param cb Function address of the application specific SRP verifier handler

    This function should be invoked prior to starting the EST server.   
    This is used to specify the handler for SRP authentication at the TLS
    layer.  When a TLS-SRP cipher suite is negotiated at the TLS layer,
    the handler will be invoked by libEST to retrieve the SRP parameters
    for user authentication.  Your application must provide the SRP parameters
    for the user.  
    
    The handler should use the following logic:

    1. Invoke SSL_get_srp_username() to get the SRP user name from the
       TLS layer.
    2. Lookup the user's SRP parameters in the application specific
       user database.  These parameters include the N, g, s, and v 
       parameters.
    3. Invoke SSL_set_srp_server_param() to forward the SRP parameters
       to the TLS layer, allowing the TLS handshake to proceed.
       
    libEST includes an example server application that uses this handler
    for SRP support.  This example uses the OpenSSL SRP verifier file capability
    to manage SRP parameters for individual users.  Your application could use
    this approach, or it may utilize another facility for managing user specific
    SRP parameters.  Please refer to RFC 2945 and RFC 5054 for a full understanding
    of SRP.

    @return EST_ERROR.
 */</comment>
<function pos:start="1911:1" pos:end="1927:1"><type pos:start="1911:1" pos:end="1911:9"><name pos:start="1911:1" pos:end="1911:9">EST_ERROR</name></type> <name pos:start="1911:11" pos:end="1911:31">est_server_enable_srp</name> <parameter_list pos:start="1911:33" pos:end="1911:85">(<parameter pos:start="1911:34" pos:end="1911:45"><decl pos:start="1911:34" pos:end="1911:45"><type pos:start="1911:34" pos:end="1911:45"><name pos:start="1911:34" pos:end="1911:40">EST_CTX</name> <modifier pos:start="1911:42" pos:end="1911:42">*</modifier></type><name pos:start="1911:43" pos:end="1911:45">ctx</name></decl></parameter>, <parameter pos:start="1911:48" pos:end="1911:84"><function_decl pos:start="1911:48" pos:end="1911:84"><type pos:start="1911:48" pos:end="1911:50"><name pos:start="1911:48" pos:end="1911:50">int</name></type> (<modifier pos:start="1911:53" pos:end="1911:53">*</modifier><name pos:start="1911:54" pos:end="1911:55">cb</name>)<parameter_list pos:start="1911:57" pos:end="1911:84">(<parameter pos:start="1911:58" pos:end="1911:63"><decl pos:start="1911:58" pos:end="1911:63"><type pos:start="1911:58" pos:end="1911:63"><name pos:start="1911:58" pos:end="1911:60">SSL</name> <modifier pos:start="1911:62" pos:end="1911:62">*</modifier></type><name pos:start="1911:63" pos:end="1911:63">s</name></decl></parameter>, <parameter pos:start="1911:66" pos:end="1911:72"><decl pos:start="1911:66" pos:end="1911:72"><type pos:start="1911:66" pos:end="1911:72"><name pos:start="1911:66" pos:end="1911:68">int</name> <modifier pos:start="1911:70" pos:end="1911:70">*</modifier></type><name pos:start="1911:71" pos:end="1911:72">ad</name></decl></parameter>, <parameter pos:start="1911:75" pos:end="1911:83"><decl pos:start="1911:75" pos:end="1911:83"><type pos:start="1911:75" pos:end="1911:83"><name pos:start="1911:75" pos:end="1911:78">void</name> <modifier pos:start="1911:80" pos:end="1911:80">*</modifier></type><name pos:start="1911:81" pos:end="1911:83">arg</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block pos:start="1912:1" pos:end="1927:1">{<block_content pos:start="1913:5" pos:end="1926:26">
    <if_stmt pos:start="1913:5" pos:end="1916:5"><if pos:start="1913:5" pos:end="1916:5">if <condition pos:start="1913:8" pos:end="1913:13">(<expr pos:start="1913:9" pos:end="1913:12"><operator pos:start="1913:9" pos:end="1913:9">!</operator><name pos:start="1913:10" pos:end="1913:12">ctx</name></expr>)</condition> <block pos:start="1913:15" pos:end="1916:5">{<block_content pos:start="1914:9" pos:end="1915:32">
	<expr_stmt pos:start="1914:9" pos:end="1914:36"><expr pos:start="1914:9" pos:end="1914:35"><call pos:start="1914:9" pos:end="1914:35"><name pos:start="1914:9" pos:end="1914:19">EST_LOG_ERR</name><argument_list pos:start="1914:20" pos:end="1914:35">(<argument pos:start="1914:21" pos:end="1914:34"><expr pos:start="1914:21" pos:end="1914:34"><literal type="string" pos:start="1914:21" pos:end="1914:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1915:9" pos:end="1915:32">return <expr pos:start="1915:16" pos:end="1915:31"><operator pos:start="1915:16" pos:end="1915:16">(</operator><name pos:start="1915:17" pos:end="1915:30">EST_ERR_NO_CTX</name><operator pos:start="1915:31" pos:end="1915:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1918:5" pos:end="1921:5"><if pos:start="1918:5" pos:end="1921:5">if <condition pos:start="1918:8" pos:end="1918:12">(<expr pos:start="1918:9" pos:end="1918:11"><operator pos:start="1918:9" pos:end="1918:9">!</operator><name pos:start="1918:10" pos:end="1918:11">cb</name></expr>)</condition> <block pos:start="1918:14" pos:end="1921:5">{<block_content pos:start="1919:9" pos:end="1920:44">
	<expr_stmt pos:start="1919:9" pos:end="1919:37"><expr pos:start="1919:9" pos:end="1919:36"><call pos:start="1919:9" pos:end="1919:36"><name pos:start="1919:9" pos:end="1919:19">EST_LOG_ERR</name><argument_list pos:start="1919:20" pos:end="1919:36">(<argument pos:start="1919:21" pos:end="1919:35"><expr pos:start="1919:21" pos:end="1919:35"><literal type="string" pos:start="1919:21" pos:end="1919:35">"Null callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1920:9" pos:end="1920:44">return <expr pos:start="1920:16" pos:end="1920:43"><operator pos:start="1920:16" pos:end="1920:16">(</operator><name pos:start="1920:17" pos:end="1920:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1920:43" pos:end="1920:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1923:5" pos:end="1923:34"><expr pos:start="1923:5" pos:end="1923:33"><name pos:start="1923:5" pos:end="1923:28"><name pos:start="1923:5" pos:end="1923:7">ctx</name><operator pos:start="1923:8" pos:end="1923:9">-&gt;</operator><name pos:start="1923:10" pos:end="1923:28">est_srp_username_cb</name></name> <operator pos:start="1923:30" pos:end="1923:30">=</operator> <name pos:start="1923:32" pos:end="1923:33">cb</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1924:5" pos:end="1924:24"><expr pos:start="1924:5" pos:end="1924:23"><name pos:start="1924:5" pos:end="1924:19"><name pos:start="1924:5" pos:end="1924:7">ctx</name><operator pos:start="1924:8" pos:end="1924:9">-&gt;</operator><name pos:start="1924:10" pos:end="1924:19">enable_srp</name></name> <operator pos:start="1924:21" pos:end="1924:21">=</operator> <literal type="number" pos:start="1924:23" pos:end="1924:23">1</literal></expr>;</expr_stmt>

    <return pos:start="1926:5" pos:end="1926:26">return <expr pos:start="1926:12" pos:end="1926:25"><operator pos:start="1926:12" pos:end="1926:12">(</operator><name pos:start="1926:13" pos:end="1926:24">EST_ERR_NONE</name><operator pos:start="1926:25" pos:end="1926:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1928:1" pos:end="1949:3">/*! @brief est_server_enable_pop() is used by an application to enable 
    the proof-of-possession check on the EST server.  This proves the 
    EST client that sent the CSR to the server is in possesion of the 
    private key that was used to sign the CSR.  This binds the TLS 
    session ID to the CSR.

    Note, if the CSR attributes configured on the server require PoP 
    checking, then there is no need to call this function to enable
    PoP.  The PoP will be enabled automatically under this scenario.
    
    Note, PoP checking is not possible when an EST proxy is used to
    between the EST client and EST server.  Since the proxy will not 
    be in possession of the private key, an EST server woul fail the
    PoP check.  However, an EST proxy can enable this feature to ensure 
    the EST client has the signing key.

    @param ctx Pointer to the EST context

    This function may be called at any time.   
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1950:1" pos:end="1959:1"><type pos:start="1950:1" pos:end="1950:9"><name pos:start="1950:1" pos:end="1950:9">EST_ERROR</name></type> <name pos:start="1950:11" pos:end="1950:31">est_server_enable_pop</name> <parameter_list pos:start="1950:33" pos:end="1950:46">(<parameter pos:start="1950:34" pos:end="1950:45"><decl pos:start="1950:34" pos:end="1950:45"><type pos:start="1950:34" pos:end="1950:42"><name pos:start="1950:34" pos:end="1950:40">EST_CTX</name> <modifier pos:start="1950:42" pos:end="1950:42">*</modifier></type><name pos:start="1950:43" pos:end="1950:45">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1951:1" pos:end="1959:1">{<block_content pos:start="1952:5" pos:end="1958:26">
    <if_stmt pos:start="1952:5" pos:end="1955:5"><if pos:start="1952:5" pos:end="1955:5">if <condition pos:start="1952:8" pos:end="1952:13">(<expr pos:start="1952:9" pos:end="1952:12"><operator pos:start="1952:9" pos:end="1952:9">!</operator><name pos:start="1952:10" pos:end="1952:12">ctx</name></expr>)</condition> <block pos:start="1952:15" pos:end="1955:5">{<block_content pos:start="1953:9" pos:end="1954:32">
	<expr_stmt pos:start="1953:9" pos:end="1953:36"><expr pos:start="1953:9" pos:end="1953:35"><call pos:start="1953:9" pos:end="1953:35"><name pos:start="1953:9" pos:end="1953:19">EST_LOG_ERR</name><argument_list pos:start="1953:20" pos:end="1953:35">(<argument pos:start="1953:21" pos:end="1953:34"><expr pos:start="1953:21" pos:end="1953:34"><literal type="string" pos:start="1953:21" pos:end="1953:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1954:9" pos:end="1954:32">return <expr pos:start="1954:16" pos:end="1954:31"><operator pos:start="1954:16" pos:end="1954:16">(</operator><name pos:start="1954:17" pos:end="1954:30">EST_ERR_NO_CTX</name><operator pos:start="1954:31" pos:end="1954:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1957:5" pos:end="1957:31"><expr pos:start="1957:5" pos:end="1957:30"><name pos:start="1957:5" pos:end="1957:26"><name pos:start="1957:5" pos:end="1957:7">ctx</name><operator pos:start="1957:8" pos:end="1957:9">-&gt;</operator><name pos:start="1957:10" pos:end="1957:26">server_enable_pop</name></name> <operator pos:start="1957:28" pos:end="1957:28">=</operator> <literal type="number" pos:start="1957:30" pos:end="1957:30">1</literal></expr>;</expr_stmt>
    <return pos:start="1958:5" pos:end="1958:26">return <expr pos:start="1958:12" pos:end="1958:25"><operator pos:start="1958:12" pos:end="1958:12">(</operator><name pos:start="1958:13" pos:end="1958:24">EST_ERR_NONE</name><operator pos:start="1958:25" pos:end="1958:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1960:1" pos:end="1970:3">/*! @brief est_server_disable_pop() is used by an application to disable 
    the proof-of-possession check on the EST server.  Please see
    the documenation for est_server_enable_pop() for more information
    on the proof-of-possession check.

    @param ctx Pointer to the EST context

    This function may be called at any time.   
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1971:1" pos:end="1980:1"><type pos:start="1971:1" pos:end="1971:9"><name pos:start="1971:1" pos:end="1971:9">EST_ERROR</name></type> <name pos:start="1971:11" pos:end="1971:32">est_server_disable_pop</name> <parameter_list pos:start="1971:34" pos:end="1971:47">(<parameter pos:start="1971:35" pos:end="1971:46"><decl pos:start="1971:35" pos:end="1971:46"><type pos:start="1971:35" pos:end="1971:43"><name pos:start="1971:35" pos:end="1971:41">EST_CTX</name> <modifier pos:start="1971:43" pos:end="1971:43">*</modifier></type><name pos:start="1971:44" pos:end="1971:46">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1972:1" pos:end="1980:1">{<block_content pos:start="1973:5" pos:end="1979:26">
    <if_stmt pos:start="1973:5" pos:end="1976:5"><if pos:start="1973:5" pos:end="1976:5">if <condition pos:start="1973:8" pos:end="1973:13">(<expr pos:start="1973:9" pos:end="1973:12"><operator pos:start="1973:9" pos:end="1973:9">!</operator><name pos:start="1973:10" pos:end="1973:12">ctx</name></expr>)</condition> <block pos:start="1973:15" pos:end="1976:5">{<block_content pos:start="1974:9" pos:end="1975:32">
	<expr_stmt pos:start="1974:9" pos:end="1974:36"><expr pos:start="1974:9" pos:end="1974:35"><call pos:start="1974:9" pos:end="1974:35"><name pos:start="1974:9" pos:end="1974:19">EST_LOG_ERR</name><argument_list pos:start="1974:20" pos:end="1974:35">(<argument pos:start="1974:21" pos:end="1974:34"><expr pos:start="1974:21" pos:end="1974:34"><literal type="string" pos:start="1974:21" pos:end="1974:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1975:9" pos:end="1975:32">return <expr pos:start="1975:16" pos:end="1975:31"><operator pos:start="1975:16" pos:end="1975:16">(</operator><name pos:start="1975:17" pos:end="1975:30">EST_ERR_NO_CTX</name><operator pos:start="1975:31" pos:end="1975:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1978:5" pos:end="1978:31"><expr pos:start="1978:5" pos:end="1978:30"><name pos:start="1978:5" pos:end="1978:26"><name pos:start="1978:5" pos:end="1978:7">ctx</name><operator pos:start="1978:8" pos:end="1978:9">-&gt;</operator><name pos:start="1978:10" pos:end="1978:26">server_enable_pop</name></name> <operator pos:start="1978:28" pos:end="1978:28">=</operator> <literal type="number" pos:start="1978:30" pos:end="1978:30">0</literal></expr>;</expr_stmt>
    <return pos:start="1979:5" pos:end="1979:26">return <expr pos:start="1979:12" pos:end="1979:25"><operator pos:start="1979:12" pos:end="1979:12">(</operator><name pos:start="1979:13" pos:end="1979:24">EST_ERR_NONE</name><operator pos:start="1979:25" pos:end="1979:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1981:1" pos:end="1996:3">/*! @brief est_server_set_retry_period() is used by an application to  
    change the default retry-after period sent to the EST client when
    the CA server is not configured for auto-enroll.  This retry-after
    value notifies the client about how long it should wait before
    attempting the enroll operation again to see if the CA has 
    approved the original CSR. 
 
    @param ctx Pointer to the EST context
    @param seconds Number of seconds the server will use in the
           retry-after response.

    This function may be called at any time after a context has
    been created.   
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1997:1" pos:end="2018:1"><type pos:start="1997:1" pos:end="1997:9"><name pos:start="1997:1" pos:end="1997:9">EST_ERROR</name></type> <name pos:start="1997:11" pos:end="1997:37">est_server_set_retry_period</name> <parameter_list pos:start="1997:39" pos:end="1997:65">(<parameter pos:start="1997:40" pos:end="1997:51"><decl pos:start="1997:40" pos:end="1997:51"><type pos:start="1997:40" pos:end="1997:51"><name pos:start="1997:40" pos:end="1997:46">EST_CTX</name> <modifier pos:start="1997:48" pos:end="1997:48">*</modifier></type><name pos:start="1997:49" pos:end="1997:51">ctx</name></decl></parameter>, <parameter pos:start="1997:54" pos:end="1997:64"><decl pos:start="1997:54" pos:end="1997:64"><type pos:start="1997:54" pos:end="1997:64"><name pos:start="1997:54" pos:end="1997:56">int</name></type> <name pos:start="1997:58" pos:end="1997:64">seconds</name></decl></parameter>)</parameter_list>
<block pos:start="1998:1" pos:end="2018:1">{<block_content pos:start="1999:5" pos:end="2017:26">
    <if_stmt pos:start="1999:5" pos:end="2002:5"><if pos:start="1999:5" pos:end="2002:5">if <condition pos:start="1999:8" pos:end="1999:13">(<expr pos:start="1999:9" pos:end="1999:12"><operator pos:start="1999:9" pos:end="1999:9">!</operator><name pos:start="1999:10" pos:end="1999:12">ctx</name></expr>)</condition> <block pos:start="1999:15" pos:end="2002:5">{<block_content pos:start="2000:9" pos:end="2001:32">
	<expr_stmt pos:start="2000:9" pos:end="2000:36"><expr pos:start="2000:9" pos:end="2000:35"><call pos:start="2000:9" pos:end="2000:35"><name pos:start="2000:9" pos:end="2000:19">EST_LOG_ERR</name><argument_list pos:start="2000:20" pos:end="2000:35">(<argument pos:start="2000:21" pos:end="2000:34"><expr pos:start="2000:21" pos:end="2000:34"><literal type="string" pos:start="2000:21" pos:end="2000:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2001:9" pos:end="2001:32">return <expr pos:start="2001:16" pos:end="2001:31"><operator pos:start="2001:16" pos:end="2001:16">(</operator><name pos:start="2001:17" pos:end="2001:30">EST_ERR_NO_CTX</name><operator pos:start="2001:31" pos:end="2001:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2004:5" pos:end="2008:5"><if pos:start="2004:5" pos:end="2008:5">if <condition pos:start="2004:8" pos:end="2004:39">(<expr pos:start="2004:9" pos:end="2004:38"><name pos:start="2004:9" pos:end="2004:15">seconds</name> <operator pos:start="2004:17" pos:end="2004:17">&gt;</operator> <name pos:start="2004:19" pos:end="2004:38">EST_RETRY_PERIOD_MAX</name></expr>)</condition> <block pos:start="2004:41" pos:end="2008:5">{<block_content pos:start="2005:9" pos:end="2007:44">
	<expr_stmt pos:start="2005:9" pos:end="2006:38"><expr pos:start="2005:9" pos:end="2006:37"><call pos:start="2005:9" pos:end="2006:37"><name pos:start="2005:9" pos:end="2005:19">EST_LOG_ERR</name><argument_list pos:start="2005:20" pos:end="2006:37">(<argument pos:start="2005:21" pos:end="2005:62"><expr pos:start="2005:21" pos:end="2005:62"><literal type="string" pos:start="2005:21" pos:end="2005:62">"Maximum retry-after period is %d seconds"</literal></expr></argument>,
		<argument pos:start="2006:17" pos:end="2006:36"><expr pos:start="2006:17" pos:end="2006:36"><name pos:start="2006:17" pos:end="2006:36">EST_RETRY_PERIOD_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2007:9" pos:end="2007:44">return <expr pos:start="2007:16" pos:end="2007:43"><operator pos:start="2007:16" pos:end="2007:16">(</operator><name pos:start="2007:17" pos:end="2007:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2007:43" pos:end="2007:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2010:5" pos:end="2014:5"><if pos:start="2010:5" pos:end="2014:5">if <condition pos:start="2010:8" pos:end="2010:39">(<expr pos:start="2010:9" pos:end="2010:38"><name pos:start="2010:9" pos:end="2010:15">seconds</name> <operator pos:start="2010:17" pos:end="2010:17">&lt;</operator> <name pos:start="2010:19" pos:end="2010:38">EST_RETRY_PERIOD_MIN</name></expr>)</condition> <block pos:start="2010:41" pos:end="2014:5">{<block_content pos:start="2011:9" pos:end="2013:44">
	<expr_stmt pos:start="2011:9" pos:end="2012:38"><expr pos:start="2011:9" pos:end="2012:37"><call pos:start="2011:9" pos:end="2012:37"><name pos:start="2011:9" pos:end="2011:19">EST_LOG_ERR</name><argument_list pos:start="2011:20" pos:end="2012:37">(<argument pos:start="2011:21" pos:end="2011:62"><expr pos:start="2011:21" pos:end="2011:62"><literal type="string" pos:start="2011:21" pos:end="2011:62">"Minimum retry-after period is %d seconds"</literal></expr></argument>,
		<argument pos:start="2012:17" pos:end="2012:36"><expr pos:start="2012:17" pos:end="2012:36"><name pos:start="2012:17" pos:end="2012:36">EST_RETRY_PERIOD_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2013:9" pos:end="2013:44">return <expr pos:start="2013:16" pos:end="2013:43"><operator pos:start="2013:16" pos:end="2013:16">(</operator><name pos:start="2013:17" pos:end="2013:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2013:43" pos:end="2013:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2016:5" pos:end="2016:32"><expr pos:start="2016:5" pos:end="2016:31"><name pos:start="2016:5" pos:end="2016:21"><name pos:start="2016:5" pos:end="2016:7">ctx</name><operator pos:start="2016:8" pos:end="2016:9">-&gt;</operator><name pos:start="2016:10" pos:end="2016:21">retry_period</name></name> <operator pos:start="2016:23" pos:end="2016:23">=</operator> <name pos:start="2016:25" pos:end="2016:31">seconds</name></expr>;</expr_stmt>
    <return pos:start="2017:5" pos:end="2017:26">return <expr pos:start="2017:12" pos:end="2017:25"><operator pos:start="2017:12" pos:end="2017:12">(</operator><name pos:start="2017:13" pos:end="2017:24">EST_ERR_NONE</name><operator pos:start="2017:25" pos:end="2017:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="2019:1" pos:end="2039:3">/*! @brief est_server_set_ecdhe_curve() is used by an application to 
    specify the ECC curve that should be used for ephemeral diffie-hellman
    keys during the TLS handshake.  Ephemeral diffie-hellman is enabled
    by libEST and provides better forward secrecy.  If the curve
    is not specified by the application using this function, then
    the prime256v1 curve is used as the default curve.  
 
    @param ctx Pointer to the EST context
    @param nid OpenSSL NID value for the desired curve

    This function must be called prior to starting the EST server.  
    The NID values are defined in &lt;openssl/obj_mac.h&gt;.  Typical NID 
    values provided to this function would include:
	
	NID_X9_62_prime192v1
	NID_X9_62_prime256v1
	NID_secp384r1
	NID_secp521r1
 
    @return EST_ERROR.
 */</comment>
<function pos:start="2040:1" pos:end="2053:1"><type pos:start="2040:1" pos:end="2040:9"><name pos:start="2040:1" pos:end="2040:9">EST_ERROR</name></type> <name pos:start="2040:11" pos:end="2040:36">est_server_set_ecdhe_curve</name> <parameter_list pos:start="2040:38" pos:end="2040:60">(<parameter pos:start="2040:39" pos:end="2040:50"><decl pos:start="2040:39" pos:end="2040:50"><type pos:start="2040:39" pos:end="2040:50"><name pos:start="2040:39" pos:end="2040:45">EST_CTX</name> <modifier pos:start="2040:47" pos:end="2040:47">*</modifier></type><name pos:start="2040:48" pos:end="2040:50">ctx</name></decl></parameter>, <parameter pos:start="2040:53" pos:end="2040:59"><decl pos:start="2040:53" pos:end="2040:59"><type pos:start="2040:53" pos:end="2040:59"><name pos:start="2040:53" pos:end="2040:55">int</name></type> <name pos:start="2040:57" pos:end="2040:59">nid</name></decl></parameter>)</parameter_list>
<block pos:start="2041:1" pos:end="2053:1">{<block_content pos:start="2042:5" pos:end="2052:26">
    <if_stmt pos:start="2042:5" pos:end="2045:5"><if pos:start="2042:5" pos:end="2045:5">if <condition pos:start="2042:8" pos:end="2042:13">(<expr pos:start="2042:9" pos:end="2042:12"><operator pos:start="2042:9" pos:end="2042:9">!</operator><name pos:start="2042:10" pos:end="2042:12">ctx</name></expr>)</condition> <block pos:start="2042:15" pos:end="2045:5">{<block_content pos:start="2043:9" pos:end="2044:32">
	<expr_stmt pos:start="2043:9" pos:end="2043:36"><expr pos:start="2043:9" pos:end="2043:35"><call pos:start="2043:9" pos:end="2043:35"><name pos:start="2043:9" pos:end="2043:19">EST_LOG_ERR</name><argument_list pos:start="2043:20" pos:end="2043:35">(<argument pos:start="2043:21" pos:end="2043:34"><expr pos:start="2043:21" pos:end="2043:34"><literal type="string" pos:start="2043:21" pos:end="2043:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2044:9" pos:end="2044:32">return <expr pos:start="2044:16" pos:end="2044:31"><operator pos:start="2044:16" pos:end="2044:16">(</operator><name pos:start="2044:17" pos:end="2044:30">EST_ERR_NO_CTX</name><operator pos:start="2044:31" pos:end="2044:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="2046:5" pos:end="2049:5"><if pos:start="2046:5" pos:end="2049:5">if <condition pos:start="2046:8" pos:end="2046:17">(<expr pos:start="2046:9" pos:end="2046:16"><name pos:start="2046:9" pos:end="2046:11">nid</name> <operator pos:start="2046:13" pos:end="2046:14">&lt;=</operator> <literal type="number" pos:start="2046:16" pos:end="2046:16">0</literal></expr>)</condition> <block pos:start="2046:19" pos:end="2049:5">{<block_content pos:start="2047:9" pos:end="2048:44">
	<expr_stmt pos:start="2047:9" pos:end="2047:41"><expr pos:start="2047:9" pos:end="2047:40"><call pos:start="2047:9" pos:end="2047:40"><name pos:start="2047:9" pos:end="2047:19">EST_LOG_ERR</name><argument_list pos:start="2047:20" pos:end="2047:40">(<argument pos:start="2047:21" pos:end="2047:39"><expr pos:start="2047:21" pos:end="2047:39"><literal type="string" pos:start="2047:21" pos:end="2047:39">"Invalid NID value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2048:9" pos:end="2048:44">return <expr pos:start="2048:16" pos:end="2048:43"><operator pos:start="2048:16" pos:end="2048:16">(</operator><name pos:start="2048:17" pos:end="2048:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2048:43" pos:end="2048:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2051:5" pos:end="2051:25"><expr pos:start="2051:5" pos:end="2051:24"><name pos:start="2051:5" pos:end="2051:18"><name pos:start="2051:5" pos:end="2051:7">ctx</name><operator pos:start="2051:8" pos:end="2051:9">-&gt;</operator><name pos:start="2051:10" pos:end="2051:18">ecdhe_nid</name></name> <operator pos:start="2051:20" pos:end="2051:20">=</operator> <name pos:start="2051:22" pos:end="2051:24">nid</name></expr>;</expr_stmt>
    <return pos:start="2052:5" pos:end="2052:26">return <expr pos:start="2052:12" pos:end="2052:25"><operator pos:start="2052:12" pos:end="2052:12">(</operator><name pos:start="2052:13" pos:end="2052:24">EST_ERR_NONE</name><operator pos:start="2052:25" pos:end="2052:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="2054:1" pos:end="2073:3">/*! @brief est_server_set_dh_parms() is used by an application to 
    specify the Diffie-Hellman parameters to be used for single
    use DH key generation during the TLS handshake.  If these 
    parameters are not used, then single-use DH key generation
    is not enabled.  This should be enabled to improve the 
    forward secrecy of the TLS handshake operation.  
    
    The DH parameters provided through this API should not be
    hard-coded in the application.  The parameters should be
    generated at the time of product installation.  Reusing the
    parameters across multiple installations of the product
    results in a vulnerable product.  
 
    @param ctx Pointer to the EST context
    @param parms Pointer to OpenSSL DH parameters

    This function must be called prior to starting the EST server.  
 
    @return EST_ERROR.
 */</comment>
<function pos:start="2074:1" pos:end="2086:1"><type pos:start="2074:1" pos:end="2074:9"><name pos:start="2074:1" pos:end="2074:9">EST_ERROR</name></type> <name pos:start="2074:11" pos:end="2074:33">est_server_set_dh_parms</name> <parameter_list pos:start="2074:35" pos:end="2074:59">(<parameter pos:start="2074:36" pos:end="2074:47"><decl pos:start="2074:36" pos:end="2074:47"><type pos:start="2074:36" pos:end="2074:47"><name pos:start="2074:36" pos:end="2074:42">EST_CTX</name> <modifier pos:start="2074:44" pos:end="2074:44">*</modifier></type><name pos:start="2074:45" pos:end="2074:47">ctx</name></decl></parameter>, <parameter pos:start="2074:50" pos:end="2074:58"><decl pos:start="2074:50" pos:end="2074:58"><type pos:start="2074:50" pos:end="2074:58"><name pos:start="2074:50" pos:end="2074:51">DH</name> <modifier pos:start="2074:53" pos:end="2074:53">*</modifier></type><name pos:start="2074:54" pos:end="2074:58">parms</name></decl></parameter>)</parameter_list>
<block pos:start="2075:1" pos:end="2086:1">{<block_content pos:start="2076:5" pos:end="2085:26">
    <if_stmt pos:start="2076:5" pos:end="2079:5"><if pos:start="2076:5" pos:end="2079:5">if <condition pos:start="2076:8" pos:end="2076:13">(<expr pos:start="2076:9" pos:end="2076:12"><operator pos:start="2076:9" pos:end="2076:9">!</operator><name pos:start="2076:10" pos:end="2076:12">ctx</name></expr>)</condition> <block pos:start="2076:15" pos:end="2079:5">{<block_content pos:start="2077:9" pos:end="2078:32">
	<expr_stmt pos:start="2077:9" pos:end="2077:36"><expr pos:start="2077:9" pos:end="2077:35"><call pos:start="2077:9" pos:end="2077:35"><name pos:start="2077:9" pos:end="2077:19">EST_LOG_ERR</name><argument_list pos:start="2077:20" pos:end="2077:35">(<argument pos:start="2077:21" pos:end="2077:34"><expr pos:start="2077:21" pos:end="2077:34"><literal type="string" pos:start="2077:21" pos:end="2077:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2078:9" pos:end="2078:32">return <expr pos:start="2078:16" pos:end="2078:31"><operator pos:start="2078:16" pos:end="2078:16">(</operator><name pos:start="2078:17" pos:end="2078:30">EST_ERR_NO_CTX</name><operator pos:start="2078:31" pos:end="2078:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="2080:5" pos:end="2083:5"><if pos:start="2080:5" pos:end="2083:5">if <condition pos:start="2080:8" pos:end="2080:15">(<expr pos:start="2080:9" pos:end="2080:14"><operator pos:start="2080:9" pos:end="2080:9">!</operator><name pos:start="2080:10" pos:end="2080:14">parms</name></expr>)</condition> <block pos:start="2080:17" pos:end="2083:5">{<block_content pos:start="2081:9" pos:end="2082:44">
        <expr_stmt pos:start="2081:9" pos:end="2081:42"><expr pos:start="2081:9" pos:end="2081:41"><call pos:start="2081:9" pos:end="2081:41"><name pos:start="2081:9" pos:end="2081:19">EST_LOG_ERR</name><argument_list pos:start="2081:20" pos:end="2081:41">(<argument pos:start="2081:21" pos:end="2081:40"><expr pos:start="2081:21" pos:end="2081:40"><literal type="string" pos:start="2081:21" pos:end="2081:40">"Null DH parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2082:9" pos:end="2082:44">return <expr pos:start="2082:16" pos:end="2082:43"><operator pos:start="2082:16" pos:end="2082:16">(</operator><name pos:start="2082:17" pos:end="2082:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2082:43" pos:end="2082:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2084:5" pos:end="2084:38"><expr pos:start="2084:5" pos:end="2084:37"><name pos:start="2084:5" pos:end="2084:15"><name pos:start="2084:5" pos:end="2084:7">ctx</name><operator pos:start="2084:8" pos:end="2084:9">-&gt;</operator><name pos:start="2084:10" pos:end="2084:15">dh_tmp</name></name> <operator pos:start="2084:17" pos:end="2084:17">=</operator> <call pos:start="2084:19" pos:end="2084:37"><name pos:start="2084:19" pos:end="2084:30">DHparams_dup</name><argument_list pos:start="2084:31" pos:end="2084:37">(<argument pos:start="2084:32" pos:end="2084:36"><expr pos:start="2084:32" pos:end="2084:36"><name pos:start="2084:32" pos:end="2084:36">parms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2085:5" pos:end="2085:26">return <expr pos:start="2085:12" pos:end="2085:25"><operator pos:start="2085:12" pos:end="2085:12">(</operator><name pos:start="2085:13" pos:end="2085:24">EST_ERR_NONE</name><operator pos:start="2085:25" pos:end="2085:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="2087:1" pos:end="2108:3">/*! @brief est_server_init_csrattrs() is used by an application to 
    initialize a fixed set of CSR attributes.  These attributes will
    be used by libEST in response to a client CSR attributes
    request.  The attributes must be an ASN.1 base64 encoded character
    string.

    @param ctx Pointer to the EST context
    @param csrattrs Pointer CSR attributes in ASN.1 base64 encoded format,
                    a NULL pointer clears the attributes and length.
    @param csrattrs_len Length of the CSR attributes character string

    The est_get_csr_cb callback function maintains precendence over this
    method for CSR attributes. If est_get_csr_cb is initialized by the
    application it will be used.  If not, then libEST will use the
    attributes initialized here.

    This function should be called prior to starting the EST server.  
    PoP configuration(est_server_enable_pop or est_server_disable_pop)
    should be called prior to this function.
    
    @return EST_ERROR.
 */</comment>
<function pos:start="2109:1" pos:end="2199:1"><type pos:start="2109:1" pos:end="2109:9"><name pos:start="2109:1" pos:end="2109:9">EST_ERROR</name></type> <name pos:start="2109:11" pos:end="2109:34">est_server_init_csrattrs</name> <parameter_list pos:start="2109:36" pos:end="2109:83">(<parameter pos:start="2109:37" pos:end="2109:48"><decl pos:start="2109:37" pos:end="2109:48"><type pos:start="2109:37" pos:end="2109:48"><name pos:start="2109:37" pos:end="2109:43">EST_CTX</name> <modifier pos:start="2109:45" pos:end="2109:45">*</modifier></type><name pos:start="2109:46" pos:end="2109:48">ctx</name></decl></parameter>, <parameter pos:start="2109:51" pos:end="2109:64"><decl pos:start="2109:51" pos:end="2109:64"><type pos:start="2109:51" pos:end="2109:64"><name pos:start="2109:51" pos:end="2109:54">char</name> <modifier pos:start="2109:56" pos:end="2109:56">*</modifier></type><name pos:start="2109:57" pos:end="2109:64">csrattrs</name></decl></parameter>, <parameter pos:start="2109:67" pos:end="2109:82"><decl pos:start="2109:67" pos:end="2109:82"><type pos:start="2109:67" pos:end="2109:82"><name pos:start="2109:67" pos:end="2109:69">int</name></type> <name pos:start="2109:71" pos:end="2109:82">csrattrs_len</name></decl></parameter>)</parameter_list>
<block pos:start="2110:1" pos:end="2199:1">{<block_content pos:start="2111:5" pos:end="2198:26">
    <decl_stmt pos:start="2111:5" pos:end="2111:42"><decl pos:start="2111:5" pos:end="2111:24"><type pos:start="2111:5" pos:end="2111:7"><name pos:start="2111:5" pos:end="2111:7">int</name></type> <name pos:start="2111:9" pos:end="2111:24">csrattrs_pop_len</name></decl>, <decl pos:start="2111:27" pos:end="2111:37"><type ref="prev" pos:start="2111:5" pos:end="2111:7"/><name pos:start="2111:27" pos:end="2111:37">pop_present</name></decl>, <decl pos:start="2111:40" pos:end="2111:41"><type ref="prev" pos:start="2111:5" pos:end="2111:7"/><name pos:start="2111:40" pos:end="2111:41">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="2112:5" pos:end="2112:35"><decl pos:start="2112:5" pos:end="2112:34"><type pos:start="2112:5" pos:end="2112:10"><name pos:start="2112:5" pos:end="2112:8">char</name> <modifier pos:start="2112:10" pos:end="2112:10">*</modifier></type><name pos:start="2112:11" pos:end="2112:27">csrattrs_data_pop</name> <init pos:start="2112:29" pos:end="2112:34">= <expr pos:start="2112:31" pos:end="2112:34"><name pos:start="2112:31" pos:end="2112:34">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="2114:5" pos:end="2116:5"><if pos:start="2114:5" pos:end="2116:5">if <condition pos:start="2114:8" pos:end="2114:20">(<expr pos:start="2114:9" pos:end="2114:19"><name pos:start="2114:9" pos:end="2114:11">ctx</name> <operator pos:start="2114:13" pos:end="2114:14">==</operator> <name pos:start="2114:16" pos:end="2114:19">NULL</name></expr>)</condition> <block pos:start="2114:22" pos:end="2116:5">{<block_content pos:start="2115:9" pos:end="2115:32">
        <return pos:start="2115:9" pos:end="2115:32">return <expr pos:start="2115:16" pos:end="2115:31"><operator pos:start="2115:16" pos:end="2115:16">(</operator><name pos:start="2115:17" pos:end="2115:30">EST_ERR_NO_CTX</name><operator pos:start="2115:31" pos:end="2115:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2118:5" pos:end="2120:7">/*
     * Verify the context is for a server, not a client or proxy
     */</comment>
    <if_stmt pos:start="2121:5" pos:end="2123:5"><if pos:start="2121:5" pos:end="2123:5">if <condition pos:start="2121:8" pos:end="2121:36">(<expr pos:start="2121:9" pos:end="2121:35"><name pos:start="2121:9" pos:end="2121:21"><name pos:start="2121:9" pos:end="2121:11">ctx</name><operator pos:start="2121:12" pos:end="2121:13">-&gt;</operator><name pos:start="2121:14" pos:end="2121:21">est_mode</name></name> <operator pos:start="2121:23" pos:end="2121:24">!=</operator> <name pos:start="2121:26" pos:end="2121:35">EST_SERVER</name></expr>)</condition> <block pos:start="2121:38" pos:end="2123:5">{<block_content pos:start="2122:9" pos:end="2122:34">
        <return pos:start="2122:9" pos:end="2122:34">return <expr pos:start="2122:16" pos:end="2122:33"><operator pos:start="2122:16" pos:end="2122:16">(</operator><name pos:start="2122:17" pos:end="2122:32">EST_ERR_BAD_MODE</name><operator pos:start="2122:33" pos:end="2122:33">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2125:5" pos:end="2126:65"><expr pos:start="2125:5" pos:end="2126:64"><call pos:start="2125:5" pos:end="2126:64"><name pos:start="2125:5" pos:end="2125:16">EST_LOG_INFO</name><argument_list pos:start="2125:17" pos:end="2126:64">(<argument pos:start="2125:18" pos:end="2125:51"><expr pos:start="2125:18" pos:end="2125:51"><literal type="string" pos:start="2125:18" pos:end="2125:51">"Attributes pointer is %p, len=%d"</literal></expr></argument>, 
		 <argument pos:start="2126:18" pos:end="2126:37"><expr pos:start="2126:18" pos:end="2126:37"><name pos:start="2126:18" pos:end="2126:37"><name pos:start="2126:18" pos:end="2126:20">ctx</name><operator pos:start="2126:21" pos:end="2126:22">-&gt;</operator><name pos:start="2126:23" pos:end="2126:37">server_csrattrs</name></name></expr></argument>, <argument pos:start="2126:40" pos:end="2126:63"><expr pos:start="2126:40" pos:end="2126:63"><name pos:start="2126:40" pos:end="2126:63"><name pos:start="2126:40" pos:end="2126:42">ctx</name><operator pos:start="2126:43" pos:end="2126:44">-&gt;</operator><name pos:start="2126:45" pos:end="2126:63">server_csrattrs_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="2128:5" pos:end="2128:52">/* Free old version if previously initialized */</comment>
    <if_stmt pos:start="2129:5" pos:end="2133:5"><if pos:start="2129:5" pos:end="2133:5">if <condition pos:start="2129:8" pos:end="2129:37">(<expr pos:start="2129:9" pos:end="2129:36"><name pos:start="2129:9" pos:end="2129:28"><name pos:start="2129:9" pos:end="2129:11">ctx</name><operator pos:start="2129:12" pos:end="2129:13">-&gt;</operator><name pos:start="2129:14" pos:end="2129:28">server_csrattrs</name></name> <operator pos:start="2129:30" pos:end="2129:31">!=</operator> <name pos:start="2129:33" pos:end="2129:36">NULL</name></expr>)</condition> <block pos:start="2129:39" pos:end="2133:5">{<block_content pos:start="2130:9" pos:end="2132:37">
        <expr_stmt pos:start="2130:9" pos:end="2130:35"><expr pos:start="2130:9" pos:end="2130:34"><call pos:start="2130:9" pos:end="2130:34"><name pos:start="2130:9" pos:end="2130:12">free</name><argument_list pos:start="2130:13" pos:end="2130:34">(<argument pos:start="2130:14" pos:end="2130:33"><expr pos:start="2130:14" pos:end="2130:33"><name pos:start="2130:14" pos:end="2130:33"><name pos:start="2130:14" pos:end="2130:16">ctx</name><operator pos:start="2130:17" pos:end="2130:18">-&gt;</operator><name pos:start="2130:19" pos:end="2130:33">server_csrattrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="2131:9" pos:end="2131:36"><expr pos:start="2131:9" pos:end="2131:35"><name pos:start="2131:9" pos:end="2131:28"><name pos:start="2131:9" pos:end="2131:11">ctx</name><operator pos:start="2131:12" pos:end="2131:13">-&gt;</operator><name pos:start="2131:14" pos:end="2131:28">server_csrattrs</name></name> <operator pos:start="2131:30" pos:end="2131:30">=</operator> <name pos:start="2131:32" pos:end="2131:35">NULL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="2132:9" pos:end="2132:37"><expr pos:start="2132:9" pos:end="2132:36"><name pos:start="2132:9" pos:end="2132:32"><name pos:start="2132:9" pos:end="2132:11">ctx</name><operator pos:start="2132:12" pos:end="2132:13">-&gt;</operator><name pos:start="2132:14" pos:end="2132:32">server_csrattrs_len</name></name> <operator pos:start="2132:34" pos:end="2132:34">=</operator> <literal type="number" pos:start="2132:36" pos:end="2132:36">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2135:5" pos:end="2135:51">/* caller just wanted to clear it, so return */</comment>
    <if_stmt pos:start="2136:5" pos:end="2138:5"><if pos:start="2136:5" pos:end="2138:5">if <condition pos:start="2136:8" pos:end="2136:25">(<expr pos:start="2136:9" pos:end="2136:24"><name pos:start="2136:9" pos:end="2136:16">csrattrs</name> <operator pos:start="2136:18" pos:end="2136:19">==</operator> <name pos:start="2136:21" pos:end="2136:24">NULL</name></expr>)</condition> <block pos:start="2136:27" pos:end="2138:5">{<block_content pos:start="2137:9" pos:end="2137:30">
	<return pos:start="2137:9" pos:end="2137:30">return <expr pos:start="2137:16" pos:end="2137:29"><operator pos:start="2137:16" pos:end="2137:16">(</operator><name pos:start="2137:17" pos:end="2137:28">EST_ERR_NONE</name><operator pos:start="2137:29" pos:end="2137:29">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2140:5" pos:end="2144:7">/*
     * In order to run Client negative unit testing the parameter, 
     * PoP and parse checks all need to be disabled via #define
     * in a couple of places here.
     */</comment>

    <comment type="block" pos:start="2146:5" pos:end="2149:7">/* 
     * check smallest possible base64 case here for now 
     * and sanity test will check min/max value for ASN.1 data
     */</comment>
    <if_stmt pos:start="2150:5" pos:end="2152:5"><if pos:start="2150:5" pos:end="2152:5">if <condition pos:start="2150:8" pos:end="2150:36">(<expr pos:start="2150:9" pos:end="2150:35"><name pos:start="2150:9" pos:end="2150:20">csrattrs_len</name> <operator pos:start="2150:22" pos:end="2150:22">&lt;</operator> <name pos:start="2150:24" pos:end="2150:35">MIN_CSRATTRS</name></expr>)</condition> <block pos:start="2150:38" pos:end="2152:5">{<block_content pos:start="2151:9" pos:end="2151:44">
        <return pos:start="2151:9" pos:end="2151:44">return <expr pos:start="2151:16" pos:end="2151:43"><operator pos:start="2151:16" pos:end="2151:16">(</operator><name pos:start="2151:17" pos:end="2151:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2151:43" pos:end="2151:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="2154:5" pos:end="2154:42">/* assume PoP not in CSR attributes */</comment>
    <expr_stmt pos:start="2155:5" pos:end="2155:29"><expr pos:start="2155:5" pos:end="2155:28"><name pos:start="2155:5" pos:end="2155:24"><name pos:start="2155:5" pos:end="2155:7">ctx</name><operator pos:start="2155:8" pos:end="2155:9">-&gt;</operator><name pos:start="2155:10" pos:end="2155:24">csr_pop_present</name></name> <operator pos:start="2155:26" pos:end="2155:26">=</operator> <literal type="number" pos:start="2155:28" pos:end="2155:28">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="2156:5" pos:end="2180:5"><if pos:start="2156:5" pos:end="2174:5">if <condition pos:start="2156:8" pos:end="2156:31">(<expr pos:start="2156:9" pos:end="2156:30"><name pos:start="2156:9" pos:end="2156:30"><name pos:start="2156:9" pos:end="2156:11">ctx</name><operator pos:start="2156:12" pos:end="2156:13">-&gt;</operator><name pos:start="2156:14" pos:end="2156:30">server_enable_pop</name></name></expr>)</condition> <block pos:start="2156:33" pos:end="2174:5">{<block_content pos:start="2157:9" pos:end="2173:9">
        <expr_stmt pos:start="2157:9" pos:end="2157:84"><expr pos:start="2157:9" pos:end="2157:83"><name pos:start="2157:9" pos:end="2157:10">rv</name> <operator pos:start="2157:12" pos:end="2157:12">=</operator> <call pos:start="2157:14" pos:end="2157:83"><name pos:start="2157:14" pos:end="2157:45">est_is_challengePassword_present</name><argument_list pos:start="2157:46" pos:end="2157:83">(<argument pos:start="2157:47" pos:end="2157:54"><expr pos:start="2157:47" pos:end="2157:54"><name pos:start="2157:47" pos:end="2157:54">csrattrs</name></expr></argument>, <argument pos:start="2157:57" pos:end="2157:68"><expr pos:start="2157:57" pos:end="2157:68"><name pos:start="2157:57" pos:end="2157:68">csrattrs_len</name></expr></argument>, <argument pos:start="2157:71" pos:end="2157:82"><expr pos:start="2157:71" pos:end="2157:82"><operator pos:start="2157:71" pos:end="2157:71">&amp;</operator><name pos:start="2157:72" pos:end="2157:82">pop_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="2158:9" pos:end="2161:9"><if pos:start="2158:9" pos:end="2161:9">if <condition pos:start="2158:12" pos:end="2158:31">(<expr pos:start="2158:13" pos:end="2158:30"><name pos:start="2158:13" pos:end="2158:14">rv</name> <operator pos:start="2158:16" pos:end="2158:17">!=</operator> <name pos:start="2158:19" pos:end="2158:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="2158:33" pos:end="2161:9">{<block_content pos:start="2159:13" pos:end="2160:48">
	    <expr_stmt pos:start="2159:13" pos:end="2159:57"><expr pos:start="2159:13" pos:end="2159:56"><call pos:start="2159:13" pos:end="2159:56"><name pos:start="2159:13" pos:end="2159:23">EST_LOG_ERR</name><argument_list pos:start="2159:24" pos:end="2159:56">(<argument pos:start="2159:25" pos:end="2159:55"><expr pos:start="2159:25" pos:end="2159:55"><literal type="string" pos:start="2159:25" pos:end="2159:55">"Error during PoP/sanity check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="2160:13" pos:end="2160:48">return <expr pos:start="2160:20" pos:end="2160:47"><operator pos:start="2160:20" pos:end="2160:20">(</operator><name pos:start="2160:21" pos:end="2160:46">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2160:47" pos:end="2160:47">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt pos:start="2162:9" pos:end="2162:43"><expr pos:start="2162:9" pos:end="2162:42"><name pos:start="2162:9" pos:end="2162:28"><name pos:start="2162:9" pos:end="2162:11">ctx</name><operator pos:start="2162:12" pos:end="2162:13">-&gt;</operator><name pos:start="2162:14" pos:end="2162:28">csr_pop_present</name></name> <operator pos:start="2162:30" pos:end="2162:30">=</operator> <name pos:start="2162:32" pos:end="2162:42">pop_present</name></expr>;</expr_stmt>

	<if_stmt pos:start="2164:9" pos:end="2173:9"><if pos:start="2164:9" pos:end="2173:9">if <condition pos:start="2164:12" pos:end="2164:34">(<expr pos:start="2164:13" pos:end="2164:33"><operator pos:start="2164:13" pos:end="2164:13">!</operator><name pos:start="2164:14" pos:end="2164:33"><name pos:start="2164:14" pos:end="2164:16">ctx</name><operator pos:start="2164:17" pos:end="2164:18">-&gt;</operator><name pos:start="2164:19" pos:end="2164:33">csr_pop_present</name></name></expr>)</condition> <block pos:start="2164:36" pos:end="2173:9">{<block_content pos:start="2165:13" pos:end="2172:44">
	    <expr_stmt pos:start="2165:13" pos:end="2166:82"><expr pos:start="2165:13" pos:end="2166:81"><name pos:start="2165:13" pos:end="2165:14">rv</name> <operator pos:start="2165:16" pos:end="2165:16">=</operator> <call pos:start="2165:18" pos:end="2166:81"><name pos:start="2165:18" pos:end="2165:42">est_add_challengePassword</name><argument_list pos:start="2165:43" pos:end="2166:81">(<argument pos:start="2165:44" pos:end="2165:51"><expr pos:start="2165:44" pos:end="2165:51"><name pos:start="2165:44" pos:end="2165:51">csrattrs</name></expr></argument>, <argument pos:start="2165:54" pos:end="2165:65"><expr pos:start="2165:54" pos:end="2165:65"><name pos:start="2165:54" pos:end="2165:65">csrattrs_len</name></expr></argument>, 
					   <argument pos:start="2166:44" pos:end="2166:61"><expr pos:start="2166:44" pos:end="2166:61"><operator pos:start="2166:44" pos:end="2166:44">&amp;</operator><name pos:start="2166:45" pos:end="2166:61">csrattrs_data_pop</name></expr></argument>, <argument pos:start="2166:64" pos:end="2166:80"><expr pos:start="2166:64" pos:end="2166:80"><operator pos:start="2166:64" pos:end="2166:64">&amp;</operator><name pos:start="2166:65" pos:end="2166:80">csrattrs_pop_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="2167:13" pos:end="2170:13"><if pos:start="2167:13" pos:end="2170:13">if <condition pos:start="2167:16" pos:end="2167:35">(<expr pos:start="2167:17" pos:end="2167:34"><name pos:start="2167:17" pos:end="2167:18">rv</name> <operator pos:start="2167:20" pos:end="2167:21">!=</operator> <name pos:start="2167:23" pos:end="2167:34">EST_ERR_NONE</name></expr>)</condition> <block pos:start="2167:37" pos:end="2170:13">{<block_content pos:start="2168:17" pos:end="2169:52">
		<expr_stmt pos:start="2168:17" pos:end="2168:52"><expr pos:start="2168:17" pos:end="2168:51"><call pos:start="2168:17" pos:end="2168:51"><name pos:start="2168:17" pos:end="2168:27">EST_LOG_ERR</name><argument_list pos:start="2168:28" pos:end="2168:51">(<argument pos:start="2168:29" pos:end="2168:50"><expr pos:start="2168:29" pos:end="2168:50"><literal type="string" pos:start="2168:29" pos:end="2168:50">"Error during add PoP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="2169:17" pos:end="2169:52">return <expr pos:start="2169:24" pos:end="2169:51"><operator pos:start="2169:24" pos:end="2169:24">(</operator><name pos:start="2169:25" pos:end="2169:50">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2169:51" pos:end="2169:51">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt pos:start="2171:13" pos:end="2171:41"><expr pos:start="2171:13" pos:end="2171:40"><name pos:start="2171:13" pos:end="2171:20">csrattrs</name> <operator pos:start="2171:22" pos:end="2171:22">=</operator> <name pos:start="2171:24" pos:end="2171:40">csrattrs_data_pop</name></expr>;</expr_stmt>
	    <expr_stmt pos:start="2172:13" pos:end="2172:44"><expr pos:start="2172:13" pos:end="2172:43"><name pos:start="2172:13" pos:end="2172:24">csrattrs_len</name> <operator pos:start="2172:26" pos:end="2172:26">=</operator> <name pos:start="2172:28" pos:end="2172:43">csrattrs_pop_len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="2174:7" pos:end="2180:5">else <block pos:start="2174:12" pos:end="2180:5">{<block_content pos:start="2175:9" pos:end="2179:9">
        <expr_stmt pos:start="2175:9" pos:end="2175:77"><expr pos:start="2175:9" pos:end="2175:76"><name pos:start="2175:9" pos:end="2175:10">rv</name> <operator pos:start="2175:12" pos:end="2175:12">=</operator> <call pos:start="2175:14" pos:end="2175:76"><name pos:start="2175:14" pos:end="2175:38">est_asn1_parse_attributes</name><argument_list pos:start="2175:39" pos:end="2175:76">(<argument pos:start="2175:40" pos:end="2175:47"><expr pos:start="2175:40" pos:end="2175:47"><name pos:start="2175:40" pos:end="2175:47">csrattrs</name></expr></argument>, <argument pos:start="2175:50" pos:end="2175:61"><expr pos:start="2175:50" pos:end="2175:61"><name pos:start="2175:50" pos:end="2175:61">csrattrs_len</name></expr></argument>, <argument pos:start="2175:64" pos:end="2175:75"><expr pos:start="2175:64" pos:end="2175:75"><operator pos:start="2175:64" pos:end="2175:64">&amp;</operator><name pos:start="2175:65" pos:end="2175:75">pop_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="2176:9" pos:end="2179:9"><if pos:start="2176:9" pos:end="2179:9">if <condition pos:start="2176:12" pos:end="2176:31">(<expr pos:start="2176:13" pos:end="2176:30"><name pos:start="2176:13" pos:end="2176:14">rv</name> <operator pos:start="2176:16" pos:end="2176:17">!=</operator> <name pos:start="2176:19" pos:end="2176:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="2176:33" pos:end="2179:9">{<block_content pos:start="2177:13" pos:end="2178:48">
	    <expr_stmt pos:start="2177:13" pos:end="2177:50"><expr pos:start="2177:13" pos:end="2177:49"><call pos:start="2177:13" pos:end="2177:49"><name pos:start="2177:13" pos:end="2177:23">EST_LOG_ERR</name><argument_list pos:start="2177:24" pos:end="2177:49">(<argument pos:start="2177:25" pos:end="2177:48"><expr pos:start="2177:25" pos:end="2177:48"><literal type="string" pos:start="2177:25" pos:end="2177:48">"Corrupt CSR Attributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="2178:13" pos:end="2178:48">return <expr pos:start="2178:20" pos:end="2178:47"><operator pos:start="2178:20" pos:end="2178:20">(</operator><name pos:start="2178:21" pos:end="2178:46">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2178:47" pos:end="2178:47">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>    

    <expr_stmt pos:start="2182:5" pos:end="2182:52"><expr pos:start="2182:5" pos:end="2182:51"><name pos:start="2182:5" pos:end="2182:24"><name pos:start="2182:5" pos:end="2182:7">ctx</name><operator pos:start="2182:8" pos:end="2182:9">-&gt;</operator><name pos:start="2182:10" pos:end="2182:24">server_csrattrs</name></name> <operator pos:start="2182:26" pos:end="2182:26">=</operator> <call pos:start="2182:28" pos:end="2182:51"><name pos:start="2182:28" pos:end="2182:33">malloc</name><argument_list pos:start="2182:34" pos:end="2182:51">(<argument pos:start="2182:35" pos:end="2182:50"><expr pos:start="2182:35" pos:end="2182:50"><name pos:start="2182:35" pos:end="2182:46">csrattrs_len</name> <operator pos:start="2182:48" pos:end="2182:48">+</operator> <literal type="number" pos:start="2182:50" pos:end="2182:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="2183:5" pos:end="2188:5"><if pos:start="2183:5" pos:end="2188:5">if <condition pos:start="2183:8" pos:end="2183:30">(<expr pos:start="2183:9" pos:end="2183:29"><operator pos:start="2183:9" pos:end="2183:9">!</operator><name pos:start="2183:10" pos:end="2183:29"><name pos:start="2183:10" pos:end="2183:12">ctx</name><operator pos:start="2183:13" pos:end="2183:14">-&gt;</operator><name pos:start="2183:15" pos:end="2183:29">server_csrattrs</name></name></expr>)</condition> <block pos:start="2183:32" pos:end="2188:5">{<block_content pos:start="2184:9" pos:end="2187:32">
        <if_stmt pos:start="2184:9" pos:end="2186:9"><if pos:start="2184:9" pos:end="2186:9">if <condition pos:start="2184:12" pos:end="2184:30">(<expr pos:start="2184:13" pos:end="2184:29"><name pos:start="2184:13" pos:end="2184:29">csrattrs_data_pop</name></expr>)</condition> <block pos:start="2184:32" pos:end="2186:9">{<block_content pos:start="2185:13" pos:end="2185:36">
            <expr_stmt pos:start="2185:13" pos:end="2185:36"><expr pos:start="2185:13" pos:end="2185:35"><call pos:start="2185:13" pos:end="2185:35"><name pos:start="2185:13" pos:end="2185:16">free</name><argument_list pos:start="2185:17" pos:end="2185:35">(<argument pos:start="2185:18" pos:end="2185:34"><expr pos:start="2185:18" pos:end="2185:34"><name pos:start="2185:18" pos:end="2185:34">csrattrs_data_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
        <return pos:start="2187:9" pos:end="2187:32">return <expr pos:start="2187:16" pos:end="2187:31"><operator pos:start="2187:16" pos:end="2187:16">(</operator><name pos:start="2187:17" pos:end="2187:30">EST_ERR_MALLOC</name><operator pos:start="2187:31" pos:end="2187:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2189:5" pos:end="2189:44"><expr pos:start="2189:5" pos:end="2189:43"><name pos:start="2189:5" pos:end="2189:28"><name pos:start="2189:5" pos:end="2189:7">ctx</name><operator pos:start="2189:8" pos:end="2189:9">-&gt;</operator><name pos:start="2189:10" pos:end="2189:28">server_csrattrs_len</name></name> <operator pos:start="2189:30" pos:end="2189:30">=</operator> <name pos:start="2189:32" pos:end="2189:43">csrattrs_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="2191:5" pos:end="2191:86"><expr pos:start="2191:5" pos:end="2191:85"><call pos:start="2191:5" pos:end="2191:85"><name pos:start="2191:5" pos:end="2191:13">strncpy_s</name><argument_list pos:start="2191:14" pos:end="2191:85">(<argument pos:start="2191:15" pos:end="2191:42"><expr pos:start="2191:15" pos:end="2191:42"><operator pos:start="2191:15" pos:end="2191:15">(</operator><name pos:start="2191:16" pos:end="2191:19">char</name> <operator pos:start="2191:21" pos:end="2191:21">*</operator><operator pos:start="2191:22" pos:end="2191:22">)</operator><name pos:start="2191:23" pos:end="2191:42"><name pos:start="2191:23" pos:end="2191:25">ctx</name><operator pos:start="2191:26" pos:end="2191:27">-&gt;</operator><name pos:start="2191:28" pos:end="2191:42">server_csrattrs</name></name></expr></argument>, <argument pos:start="2191:45" pos:end="2191:60"><expr pos:start="2191:45" pos:end="2191:60"><name pos:start="2191:45" pos:end="2191:56">csrattrs_len</name> <operator pos:start="2191:58" pos:end="2191:58">+</operator> <literal type="number" pos:start="2191:60" pos:end="2191:60">1</literal></expr></argument>, <argument pos:start="2191:63" pos:end="2191:70"><expr pos:start="2191:63" pos:end="2191:70"><name pos:start="2191:63" pos:end="2191:70">csrattrs</name></expr></argument>, <argument pos:start="2191:73" pos:end="2191:84"><expr pos:start="2191:73" pos:end="2191:84"><name pos:start="2191:73" pos:end="2191:84">csrattrs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="2192:5" pos:end="2192:43"><expr pos:start="2192:5" pos:end="2192:42"><name pos:start="2192:5" pos:end="2192:38"><name pos:start="2192:5" pos:end="2192:7">ctx</name><operator pos:start="2192:8" pos:end="2192:9">-&gt;</operator><name pos:start="2192:10" pos:end="2192:24">server_csrattrs</name><index pos:start="2192:25" pos:end="2192:38">[<expr pos:start="2192:26" pos:end="2192:37"><name pos:start="2192:26" pos:end="2192:37">csrattrs_len</name></expr>]</index></name> <operator pos:start="2192:40" pos:end="2192:40">=</operator> <literal type="number" pos:start="2192:42" pos:end="2192:42">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="2193:5" pos:end="2195:5"><if pos:start="2193:5" pos:end="2195:5">if <condition pos:start="2193:8" pos:end="2193:26">(<expr pos:start="2193:9" pos:end="2193:25"><name pos:start="2193:9" pos:end="2193:25">csrattrs_data_pop</name></expr>)</condition> <block pos:start="2193:28" pos:end="2195:5">{<block_content pos:start="2194:7" pos:end="2194:30">
      <expr_stmt pos:start="2194:7" pos:end="2194:30"><expr pos:start="2194:7" pos:end="2194:29"><call pos:start="2194:7" pos:end="2194:29"><name pos:start="2194:7" pos:end="2194:10">free</name><argument_list pos:start="2194:11" pos:end="2194:29">(<argument pos:start="2194:12" pos:end="2194:28"><expr pos:start="2194:12" pos:end="2194:28"><name pos:start="2194:12" pos:end="2194:28">csrattrs_data_pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2196:5" pos:end="2197:43"><expr pos:start="2196:5" pos:end="2197:42"><call pos:start="2196:5" pos:end="2197:42"><name pos:start="2196:5" pos:end="2196:16">EST_LOG_INFO</name><argument_list pos:start="2196:17" pos:end="2197:42">(<argument pos:start="2196:18" pos:end="2196:51"><expr pos:start="2196:18" pos:end="2196:51"><literal type="string" pos:start="2196:18" pos:end="2196:51">"Attributes pointer is %p, len=%d"</literal></expr></argument>, <argument pos:start="2196:54" pos:end="2196:73"><expr pos:start="2196:54" pos:end="2196:73"><name pos:start="2196:54" pos:end="2196:73"><name pos:start="2196:54" pos:end="2196:56">ctx</name><operator pos:start="2196:57" pos:end="2196:58">-&gt;</operator><name pos:start="2196:59" pos:end="2196:73">server_csrattrs</name></name></expr></argument>, 
		 <argument pos:start="2197:18" pos:end="2197:41"><expr pos:start="2197:18" pos:end="2197:41"><name pos:start="2197:18" pos:end="2197:41"><name pos:start="2197:18" pos:end="2197:20">ctx</name><operator pos:start="2197:21" pos:end="2197:22">-&gt;</operator><name pos:start="2197:23" pos:end="2197:41">server_csrattrs_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="2198:5" pos:end="2198:26">return <expr pos:start="2198:12" pos:end="2198:25"><operator pos:start="2198:12" pos:end="2198:12">(</operator><name pos:start="2198:13" pos:end="2198:24">EST_ERR_NONE</name><operator pos:start="2198:25" pos:end="2198:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="2200:1" pos:end="2209:3">/*! @brief est_server_enable_tls10() is a deprecated function. TLS 1.0
    is a violation of RFC7030 and it is no longer supported by the EST library.
    This function will log an error message and return EST_ERR_BAD_MODE.
    
    @param ctx Pointer to the EST context

    This function must be called prior to starting the EST server.  
 
    @return EST_ERROR.
 */</comment>
<function pos:start="2210:1" pos:end="2215:1"><type pos:start="2210:1" pos:end="2210:9"><name pos:start="2210:1" pos:end="2210:9">EST_ERROR</name></type> <name pos:start="2210:11" pos:end="2210:33">est_server_enable_tls10</name> <parameter_list pos:start="2210:35" pos:end="2210:48">(<parameter pos:start="2210:36" pos:end="2210:47"><decl pos:start="2210:36" pos:end="2210:47"><type pos:start="2210:36" pos:end="2210:44"><name pos:start="2210:36" pos:end="2210:42">EST_CTX</name> <modifier pos:start="2210:44" pos:end="2210:44">*</modifier></type><name pos:start="2210:45" pos:end="2210:47">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="2211:1" pos:end="2215:1">{<block_content pos:start="2212:9" pos:end="2213:34">
	<expr_stmt pos:start="2212:9" pos:end="2212:85"><expr pos:start="2212:9" pos:end="2212:84"><call pos:start="2212:9" pos:end="2212:84"><name pos:start="2212:9" pos:end="2212:19">EST_LOG_ERR</name><argument_list pos:start="2212:20" pos:end="2212:84">(<argument pos:start="2212:21" pos:end="2212:83"><expr pos:start="2212:21" pos:end="2212:83"><literal type="string" pos:start="2212:21" pos:end="2212:83">"TLS 1.0 is a violation of RFC7030 and therefore not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2213:9" pos:end="2213:34">return <expr pos:start="2213:16" pos:end="2213:33"><operator pos:start="2213:16" pos:end="2213:16">(</operator><name pos:start="2213:17" pos:end="2213:32">EST_ERR_BAD_MODE</name><operator pos:start="2213:33" pos:end="2213:33">)</operator></expr>;</return>

</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="2216:1" pos:end="2230:3">/*! @brief est_server_enforce_csrattrs() is used by an application to 
    enable checking of the CSR attributes on the EST server.  When
    enabled, the EST client must provide all the CSR attributes that
    were in the /csrattrs response sent by the server.  The enrollment
    will fail if the client fails to provide all the CSR attributes.
    This setting applies to simple enroll and reenroll operations.
    This setting applies only to server mode and has no bearing on
    proxy mode operation.
    
    @param ctx Pointer to the EST context

    This function must be called prior to starting the EST server.  
 
    @return EST_ERROR.
 */</comment>
<function pos:start="2231:1" pos:end="2239:1"><type pos:start="2231:1" pos:end="2231:9"><name pos:start="2231:1" pos:end="2231:9">EST_ERROR</name></type> <name pos:start="2231:11" pos:end="2231:36">est_server_enforce_csrattr</name> <parameter_list pos:start="2231:38" pos:end="2231:51">(<parameter pos:start="2231:39" pos:end="2231:50"><decl pos:start="2231:39" pos:end="2231:50"><type pos:start="2231:39" pos:end="2231:47"><name pos:start="2231:39" pos:end="2231:45">EST_CTX</name> <modifier pos:start="2231:47" pos:end="2231:47">*</modifier></type><name pos:start="2231:48" pos:end="2231:50">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="2232:1" pos:end="2239:1">{<block_content pos:start="2233:5" pos:end="2238:26">
    <if_stmt pos:start="2233:5" pos:end="2236:5"><if pos:start="2233:5" pos:end="2236:5">if <condition pos:start="2233:8" pos:end="2233:13">(<expr pos:start="2233:9" pos:end="2233:12"><operator pos:start="2233:9" pos:end="2233:9">!</operator><name pos:start="2233:10" pos:end="2233:12">ctx</name></expr>)</condition> <block pos:start="2233:15" pos:end="2236:5">{<block_content pos:start="2234:9" pos:end="2235:32">
	<expr_stmt pos:start="2234:9" pos:end="2234:36"><expr pos:start="2234:9" pos:end="2234:35"><call pos:start="2234:9" pos:end="2234:35"><name pos:start="2234:9" pos:end="2234:19">EST_LOG_ERR</name><argument_list pos:start="2234:20" pos:end="2234:35">(<argument pos:start="2234:21" pos:end="2234:34"><expr pos:start="2234:21" pos:end="2234:34"><literal type="string" pos:start="2234:21" pos:end="2234:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2235:9" pos:end="2235:32">return <expr pos:start="2235:16" pos:end="2235:31"><operator pos:start="2235:16" pos:end="2235:16">(</operator><name pos:start="2235:17" pos:end="2235:30">EST_ERR_NO_CTX</name><operator pos:start="2235:31" pos:end="2235:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="2237:5" pos:end="2237:30"><expr pos:start="2237:5" pos:end="2237:29"><name pos:start="2237:5" pos:end="2237:25"><name pos:start="2237:5" pos:end="2237:7">ctx</name><operator pos:start="2237:8" pos:end="2237:9">-&gt;</operator><name pos:start="2237:10" pos:end="2237:25">enforce_csrattrs</name></name> <operator pos:start="2237:27" pos:end="2237:27">=</operator> <literal type="number" pos:start="2237:29" pos:end="2237:29">1</literal></expr>;</expr_stmt>
    <return pos:start="2238:5" pos:end="2238:26">return <expr pos:start="2238:12" pos:end="2238:25"><operator pos:start="2238:12" pos:end="2238:12">(</operator><name pos:start="2238:13" pos:end="2238:24">EST_ERR_NONE</name><operator pos:start="2238:25" pos:end="2238:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="2240:1" pos:end="2252:3">/*! @brief est_server_set_read_timeout() is used by an application to set
    timeout value of server read operations.  Once a socket is opened the
    EST server begins attempting to read from this socket.  This
    timeout value limits the amount of time the client will wait for the
    response.  The default value is set to EST_SSL_READ_TIMEOUT_DEF.

    @param ctx Pointer to the EST context
    @param timeout Integer value representing the read timeout in seconds.
    The minimum value is EST_SSL_READ_TIMEOUT_MIN and the maximum value is
    EST_SSL_READ_TIMEOUT_MAX.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="2253:1" pos:end="2268:1"><type pos:start="2253:1" pos:end="2253:9"><name pos:start="2253:1" pos:end="2253:9">EST_ERROR</name></type> <name pos:start="2253:11" pos:end="2253:37">est_server_set_read_timeout</name> <parameter_list pos:start="2253:39" pos:end="2253:65">(<parameter pos:start="2253:40" pos:end="2253:51"><decl pos:start="2253:40" pos:end="2253:51"><type pos:start="2253:40" pos:end="2253:51"><name pos:start="2253:40" pos:end="2253:46">EST_CTX</name> <modifier pos:start="2253:48" pos:end="2253:48">*</modifier></type><name pos:start="2253:49" pos:end="2253:51">ctx</name></decl></parameter>, <parameter pos:start="2253:54" pos:end="2253:64"><decl pos:start="2253:54" pos:end="2253:64"><type pos:start="2253:54" pos:end="2253:64"><name pos:start="2253:54" pos:end="2253:56">int</name></type> <name pos:start="2253:58" pos:end="2253:64">timeout</name></decl></parameter>)</parameter_list>
<block pos:start="2254:1" pos:end="2268:1">{<block_content pos:start="2255:5" pos:end="2267:26">
    <if_stmt pos:start="2255:5" pos:end="2258:5"><if pos:start="2255:5" pos:end="2258:5">if <condition pos:start="2255:8" pos:end="2255:13">(<expr pos:start="2255:9" pos:end="2255:12"><operator pos:start="2255:9" pos:end="2255:9">!</operator><name pos:start="2255:10" pos:end="2255:12">ctx</name></expr>)</condition> <block pos:start="2255:15" pos:end="2258:5">{<block_content pos:start="2256:9" pos:end="2257:32">
	<expr_stmt pos:start="2256:9" pos:end="2256:36"><expr pos:start="2256:9" pos:end="2256:35"><call pos:start="2256:9" pos:end="2256:35"><name pos:start="2256:9" pos:end="2256:19">EST_LOG_ERR</name><argument_list pos:start="2256:20" pos:end="2256:35">(<argument pos:start="2256:21" pos:end="2256:34"><expr pos:start="2256:21" pos:end="2256:34"><literal type="string" pos:start="2256:21" pos:end="2256:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2257:9" pos:end="2257:32">return <expr pos:start="2257:16" pos:end="2257:31"><operator pos:start="2257:16" pos:end="2257:16">(</operator><name pos:start="2257:17" pos:end="2257:30">EST_ERR_NO_CTX</name><operator pos:start="2257:31" pos:end="2257:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2260:5" pos:end="2264:5"><if pos:start="2260:5" pos:end="2264:5">if <condition pos:start="2260:8" pos:end="2261:43">(<expr pos:start="2260:9" pos:end="2261:42"><name pos:start="2260:9" pos:end="2261:17"><name pos:start="2260:9" pos:end="2260:15">timeout</name> <argument_list type="generic" pos:start="2260:17" pos:end="2261:17">&lt; <argument pos:start="2260:19" pos:end="2261:15"><expr pos:start="2260:19" pos:end="2261:15"><name pos:start="2260:19" pos:end="2260:42">EST_SSL_READ_TIMEOUT_MIN</name> <operator pos:start="2260:44" pos:end="2260:45">||</operator>
        <name pos:start="2261:9" pos:end="2261:15">timeout</name></expr></argument> &gt;</argument_list></name> <name pos:start="2261:19" pos:end="2261:42">EST_SSL_READ_TIMEOUT_MAX</name></expr>)</condition> <block pos:start="2261:45" pos:end="2264:5">{<block_content pos:start="2262:9" pos:end="2263:44">
	<expr_stmt pos:start="2262:9" pos:end="2262:71"><expr pos:start="2262:9" pos:end="2262:70"><call pos:start="2262:9" pos:end="2262:70"><name pos:start="2262:9" pos:end="2262:19">EST_LOG_ERR</name><argument_list pos:start="2262:20" pos:end="2262:70">(<argument pos:start="2262:21" pos:end="2262:60"><expr pos:start="2262:21" pos:end="2262:60"><literal type="string" pos:start="2262:21" pos:end="2262:60">"Invalid read timeout value passed: %d "</literal></expr></argument>, <argument pos:start="2262:63" pos:end="2262:69"><expr pos:start="2262:63" pos:end="2262:69"><name pos:start="2262:63" pos:end="2262:69">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="2263:9" pos:end="2263:44">return <expr pos:start="2263:16" pos:end="2263:43"><operator pos:start="2263:16" pos:end="2263:16">(</operator><name pos:start="2263:17" pos:end="2263:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="2263:43" pos:end="2263:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
        
    <expr_stmt pos:start="2266:5" pos:end="2266:39"><expr pos:start="2266:5" pos:end="2266:38"><name pos:start="2266:5" pos:end="2266:28"><name pos:start="2266:5" pos:end="2266:7">ctx</name><operator pos:start="2266:8" pos:end="2266:9">-&gt;</operator><name pos:start="2266:10" pos:end="2266:28">server_read_timeout</name></name> <operator pos:start="2266:30" pos:end="2266:30">=</operator> <name pos:start="2266:32" pos:end="2266:38">timeout</name></expr>;</expr_stmt>
    <return pos:start="2267:5" pos:end="2267:26">return <expr pos:start="2267:12" pos:end="2267:25"><operator pos:start="2267:12" pos:end="2267:12">(</operator><name pos:start="2267:13" pos:end="2267:24">EST_ERR_NONE</name><operator pos:start="2267:25" pos:end="2267:25">)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
