<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="source_code/est.c" pos:tabs="8"><function_decl pos:start="1:1" pos:end="1:52"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> (<modifier pos:start="1:14" pos:end="1:14">*</modifier><name pos:start="1:15" pos:end="1:26">est_log_func</name>)<parameter_list pos:start="1:28" pos:end="1:44">(<parameter pos:start="1:29" pos:end="1:34"><decl pos:start="1:29" pos:end="1:34"><type pos:start="1:29" pos:end="1:34"><name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type></decl></parameter>, <parameter pos:start="1:37" pos:end="1:43"><decl pos:start="1:37" pos:end="1:43"><type pos:start="1:37" pos:end="1:43"><name pos:start="1:37" pos:end="1:43">va_list</name></type></decl></parameter>)</parameter_list> <init pos:start="1:46" pos:end="1:51">= <expr pos:start="1:48" pos:end="1:51"><name pos:start="1:48" pos:end="1:51">NULL</name></expr></init>;</function_decl>
<comment type="block" pos:start="2:1" pos:end="8:3">/*
 * This is our default logger routine, which just
 * dumps log data to stderr.  The application can
 * override this by calling est_init_logger() and
 * passing in a function pointer to a function
 * that implements this prototype.
 */</comment>
<function pos:start="9:1" pos:end="19:1"><type pos:start="9:1" pos:end="9:11"><specifier pos:start="9:1" pos:end="9:6">static</specifier> <name pos:start="9:8" pos:end="9:11">void</name></type> <name pos:start="9:13" pos:end="9:29">est_logger_stderr</name> <parameter_list pos:start="9:31" pos:end="9:55">(<parameter pos:start="9:32" pos:end="9:43"><decl pos:start="9:32" pos:end="9:43"><type pos:start="9:32" pos:end="9:43"><name pos:start="9:32" pos:end="9:35">char</name> <modifier pos:start="9:37" pos:end="9:37">*</modifier></type><name pos:start="9:38" pos:end="9:43">format</name></decl></parameter>, <parameter pos:start="9:46" pos:end="9:54"><decl pos:start="9:46" pos:end="9:54"><type pos:start="9:46" pos:end="9:54"><name pos:start="9:46" pos:end="9:52">va_list</name></type> <name pos:start="9:54" pos:end="9:54">l</name></decl></parameter>)</parameter_list>
<block pos:start="10:1" pos:end="19:1">{<block_content pos:start="12:9" pos:end="19:0">
<cpp:ifndef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:13">WIN32</name></cpp:ifndef>
	<expr_stmt pos:start="12:9" pos:end="14:0"><expr pos:start="12:9" pos:end="12:25"><call pos:start="12:9" pos:end="12:25"><name pos:start="12:9" pos:end="12:17">flockfile</name><argument_list pos:start="12:18" pos:end="12:25">(<argument pos:start="12:19" pos:end="12:24"><expr pos:start="12:19" pos:end="12:24"><name pos:start="12:19" pos:end="12:24">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>
	<expr_stmt pos:start="14:9" pos:end="14:36"><expr pos:start="14:9" pos:end="14:35"><call pos:start="14:9" pos:end="14:35"><name pos:start="14:9" pos:end="14:16">vfprintf</name><argument_list pos:start="14:17" pos:end="14:35">(<argument pos:start="14:18" pos:end="14:23"><expr pos:start="14:18" pos:end="14:23"><name pos:start="14:18" pos:end="14:23">stderr</name></expr></argument>, <argument pos:start="14:26" pos:end="14:31"><expr pos:start="14:26" pos:end="14:31"><name pos:start="14:26" pos:end="14:31">format</name></expr></argument>, <argument pos:start="14:34" pos:end="14:34"><expr pos:start="14:34" pos:end="14:34"><name pos:start="14:34" pos:end="14:34">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="15:9" pos:end="17:0"><expr pos:start="15:9" pos:end="15:22"><call pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:14">fflush</name><argument_list pos:start="15:15" pos:end="15:22">(<argument pos:start="15:16" pos:end="15:21"><expr pos:start="15:16" pos:end="15:21"><name pos:start="15:16" pos:end="15:21">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef pos:start="16:1" pos:end="16:13">#<cpp:directive pos:start="16:2" pos:end="16:7">ifndef</cpp:directive> <name pos:start="16:9" pos:end="16:13">WIN32</name></cpp:ifndef>
	<expr_stmt pos:start="17:9" pos:end="19:0"><expr pos:start="17:9" pos:end="17:27"><call pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:19">funlockfile</name><argument_list pos:start="17:20" pos:end="17:27">(<argument pos:start="17:21" pos:end="17:26"><expr pos:start="17:21" pos:end="17:26"><name pos:start="17:21" pos:end="17:26">stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="18:1" pos:end="18:6">#<cpp:directive pos:start="18:2" pos:end="18:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<comment type="block" pos:start="20:1" pos:end="26:3">/*
 * This is our default logger routine, which just
 * dumps log data to stderr.  The application can
 * override this by calling est_init_logger() and
 * passing in a function pointer to a function
 * that implements this prototype.
 */</comment>
<function pos:start="27:1" pos:end="42:1"><type pos:start="27:1" pos:end="27:11"><specifier pos:start="27:1" pos:end="27:6">static</specifier> <name pos:start="27:8" pos:end="27:11">void</name></type> <name pos:start="27:13" pos:end="27:23">est_log_msg</name> <parameter_list pos:start="27:25" pos:end="27:43">(<parameter pos:start="27:26" pos:end="27:37"><decl pos:start="27:26" pos:end="27:37"><type pos:start="27:26" pos:end="27:31"><name pos:start="27:26" pos:end="27:29">char</name> <modifier pos:start="27:31" pos:end="27:31">*</modifier></type><name pos:start="27:32" pos:end="27:37">format</name></decl></parameter>, <parameter pos:start="27:40" pos:end="27:42"><decl pos:start="27:40" pos:end="27:42"><type pos:start="27:40" pos:end="27:42"><modifier pos:start="27:40" pos:end="27:42">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="28:1" pos:end="42:1">{<block_content pos:start="29:5" pos:end="41:22">
    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:11">va_list</name></type> <name pos:start="29:13" pos:end="29:21">arguments</name></decl>;</decl_stmt>

    <comment type="block" pos:start="31:5" pos:end="34:7">/*
     * Pull the arguments from the stack and invoke
     * the logger function
     */</comment>
    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><call pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:12">va_start</name><argument_list pos:start="35:13" pos:end="35:31">(<argument pos:start="35:14" pos:end="35:22"><expr pos:start="35:14" pos:end="35:22"><name pos:start="35:14" pos:end="35:22">arguments</name></expr></argument>, <argument pos:start="35:25" pos:end="35:30"><expr pos:start="35:25" pos:end="35:30"><name pos:start="35:25" pos:end="35:30">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="36:5" pos:end="40:5"><if pos:start="36:5" pos:end="38:5">if <condition pos:start="36:8" pos:end="36:29">(<expr pos:start="36:9" pos:end="36:28"><name pos:start="36:9" pos:end="36:20">est_log_func</name> <operator pos:start="36:22" pos:end="36:23">!=</operator> <name pos:start="36:25" pos:end="36:28">NULL</name></expr>)</condition> <block pos:start="36:31" pos:end="38:5">{<block_content pos:start="37:9" pos:end="37:43">
        <expr_stmt pos:start="37:9" pos:end="37:43"><expr pos:start="37:9" pos:end="37:42"><call pos:start="37:9" pos:end="37:42">(<modifier pos:start="37:10" pos:end="37:10">*</modifier><name pos:start="37:11" pos:end="37:22">est_log_func</name>)<argument_list pos:start="37:24" pos:end="37:42">(<argument pos:start="37:25" pos:end="37:30"><expr pos:start="37:25" pos:end="37:30"><name pos:start="37:25" pos:end="37:30">format</name></expr></argument>, <argument pos:start="37:33" pos:end="37:41"><expr pos:start="37:33" pos:end="37:41"><name pos:start="37:33" pos:end="37:41">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="38:7" pos:end="40:5">else <block pos:start="38:12" pos:end="40:5">{<block_content pos:start="39:9" pos:end="39:45">
        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><call pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:25">est_logger_stderr</name><argument_list pos:start="39:26" pos:end="39:44">(<argument pos:start="39:27" pos:end="39:32"><expr pos:start="39:27" pos:end="39:32"><name pos:start="39:27" pos:end="39:32">format</name></expr></argument>, <argument pos:start="39:35" pos:end="39:43"><expr pos:start="39:35" pos:end="39:43"><name pos:start="39:35" pos:end="39:43">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><call pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:10">va_end</name><argument_list pos:start="41:11" pos:end="41:21">(<argument pos:start="41:12" pos:end="41:20"><expr pos:start="41:12" pos:end="41:20"><name pos:start="41:12" pos:end="41:20">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="43:1" pos:end="45:3">/*
 * Global function to be called to log something
 */</comment>
<function pos:start="46:1" pos:end="69:1"><type pos:start="46:1" pos:end="46:4"><name pos:start="46:1" pos:end="46:4">void</name></type> <name pos:start="46:6" pos:end="46:12">est_log</name> <parameter_list pos:start="46:14" pos:end="46:51">(<parameter pos:start="46:15" pos:end="46:31"><decl pos:start="46:15" pos:end="46:31"><type pos:start="46:15" pos:end="46:31"><name pos:start="46:15" pos:end="46:27">EST_LOG_LEVEL</name></type> <name pos:start="46:29" pos:end="46:31">lvl</name></decl></parameter>, <parameter pos:start="46:34" pos:end="46:45"><decl pos:start="46:34" pos:end="46:45"><type pos:start="46:34" pos:end="46:45"><name pos:start="46:34" pos:end="46:37">char</name> <modifier pos:start="46:39" pos:end="46:39">*</modifier></type><name pos:start="46:40" pos:end="46:45">format</name></decl></parameter>, <parameter pos:start="46:48" pos:end="46:50"><decl pos:start="46:48" pos:end="46:50"><type pos:start="46:48" pos:end="46:50"><modifier pos:start="46:48" pos:end="46:50">...</modifier></type></decl></parameter>)</parameter_list>
<block pos:start="47:1" pos:end="69:1">{<block_content pos:start="48:5" pos:end="67:22">
    <decl_stmt pos:start="48:5" pos:end="48:22"><decl pos:start="48:5" pos:end="48:21"><type pos:start="48:5" pos:end="48:11"><name pos:start="48:5" pos:end="48:11">va_list</name></type> <name pos:start="48:13" pos:end="48:21">arguments</name></decl>;</decl_stmt>

    <comment type="block" pos:start="50:5" pos:end="52:7">/*
     * check if user is interested in this log message
     */</comment>
    <if_stmt pos:start="53:5" pos:end="55:5"><if pos:start="53:5" pos:end="55:5">if <condition pos:start="53:8" pos:end="53:34">(<expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:11">lvl</name> <operator pos:start="53:13" pos:end="53:13">&gt;</operator> <name pos:start="53:15" pos:end="53:33">est_desired_log_lvl</name></expr>)</condition> <block pos:start="53:36" pos:end="55:5">{<block_content pos:start="54:9" pos:end="54:15">
        <return pos:start="54:9" pos:end="54:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="57:5" pos:end="60:7">/*
     * Pull the arguments from the stack and invoke
     * the logger function
     */</comment>
    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><call pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:12">va_start</name><argument_list pos:start="61:13" pos:end="61:31">(<argument pos:start="61:14" pos:end="61:22"><expr pos:start="61:14" pos:end="61:22"><name pos:start="61:14" pos:end="61:22">arguments</name></expr></argument>, <argument pos:start="61:25" pos:end="61:30"><expr pos:start="61:25" pos:end="61:30"><name pos:start="61:25" pos:end="61:30">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="62:5" pos:end="66:5"><if pos:start="62:5" pos:end="64:5">if <condition pos:start="62:8" pos:end="62:29">(<expr pos:start="62:9" pos:end="62:28"><name pos:start="62:9" pos:end="62:20">est_log_func</name> <operator pos:start="62:22" pos:end="62:23">!=</operator> <name pos:start="62:25" pos:end="62:28">NULL</name></expr>)</condition> <block pos:start="62:31" pos:end="64:5">{<block_content pos:start="63:9" pos:end="63:43">
        <expr_stmt pos:start="63:9" pos:end="63:43"><expr pos:start="63:9" pos:end="63:42"><call pos:start="63:9" pos:end="63:42">(<modifier pos:start="63:10" pos:end="63:10">*</modifier><name pos:start="63:11" pos:end="63:22">est_log_func</name>)<argument_list pos:start="63:24" pos:end="63:42">(<argument pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:30">format</name></expr></argument>, <argument pos:start="63:33" pos:end="63:41"><expr pos:start="63:33" pos:end="63:41"><name pos:start="63:33" pos:end="63:41">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="64:7" pos:end="66:5">else <block pos:start="64:12" pos:end="66:5">{<block_content pos:start="65:9" pos:end="65:45">
        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><call pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:25">est_logger_stderr</name><argument_list pos:start="65:26" pos:end="65:44">(<argument pos:start="65:27" pos:end="65:32"><expr pos:start="65:27" pos:end="65:32"><name pos:start="65:27" pos:end="65:32">format</name></expr></argument>, <argument pos:start="65:35" pos:end="65:43"><expr pos:start="65:35" pos:end="65:43"><name pos:start="65:35" pos:end="65:43">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:22"><expr pos:start="67:5" pos:end="67:21"><call pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:10">va_end</name><argument_list pos:start="67:11" pos:end="67:21">(<argument pos:start="67:12" pos:end="67:20"><expr pos:start="67:12" pos:end="67:20"><name pos:start="67:12" pos:end="67:20">arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
<comment type="block" pos:start="70:1" pos:end="72:3">/*
 * Global function to be called to log something
 */</comment>
<function pos:start="73:1" pos:end="95:1"><type pos:start="73:1" pos:end="73:11"><specifier pos:start="73:1" pos:end="73:6">static</specifier> <name pos:start="73:8" pos:end="73:11">void</name></type> <name pos:start="73:13" pos:end="73:27">printStackTrace</name><parameter_list pos:start="73:28" pos:end="73:33">(<parameter pos:start="73:29" pos:end="73:32"><decl pos:start="73:29" pos:end="73:32"><type pos:start="73:29" pos:end="73:32"><name pos:start="73:29" pos:end="73:32">void</name></type></decl></parameter>)</parameter_list> <block pos:start="73:35" pos:end="95:1">{<block_content pos:start="74:9" pos:end="94:21">
	<decl_stmt pos:start="74:9" pos:end="74:23"><decl pos:start="74:9" pos:end="74:22"><type pos:start="74:9" pos:end="74:20"><name pos:start="74:9" pos:end="74:16">unsigned</name> <name pos:start="74:18" pos:end="74:20">int</name></type> <name pos:start="74:22" pos:end="74:22">i</name></decl>;</decl_stmt>
	<decl_stmt pos:start="75:9" pos:end="75:25"><decl pos:start="75:9" pos:end="75:24"><type pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:12">void</name> <modifier pos:start="75:14" pos:end="75:14">*</modifier></type><name pos:start="75:15" pos:end="75:24"><name pos:start="75:15" pos:end="75:19">stack</name><index pos:start="75:20" pos:end="75:24">[<expr pos:start="75:21" pos:end="75:23"><literal type="number" pos:start="75:21" pos:end="75:23">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt pos:start="76:9" pos:end="76:30"><decl pos:start="76:9" pos:end="76:29"><type pos:start="76:9" pos:end="76:22"><name pos:start="76:9" pos:end="76:16">unsigned</name> <name pos:start="76:18" pos:end="76:22">short</name></type> <name pos:start="76:24" pos:end="76:29">frames</name></decl>;</decl_stmt>
	<decl_stmt pos:start="77:9" pos:end="77:29"><decl pos:start="77:9" pos:end="77:28"><type pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:19">SYMBOL_INFO</name> <modifier pos:start="77:21" pos:end="77:21">*</modifier></type> <name pos:start="77:23" pos:end="77:28">symbol</name></decl>;</decl_stmt>
	<decl_stmt pos:start="78:9" pos:end="78:30"><decl pos:start="78:9" pos:end="78:29"><type pos:start="78:9" pos:end="78:14"><name pos:start="78:9" pos:end="78:14">HANDLE</name></type>        <name pos:start="78:23" pos:end="78:29">process</name></decl>;</decl_stmt>

	<expr_stmt pos:start="80:9" pos:end="80:38"><expr pos:start="80:9" pos:end="80:37"><name pos:start="80:9" pos:end="80:15">process</name> <operator pos:start="80:17" pos:end="80:17">=</operator> <call pos:start="80:19" pos:end="80:37"><name pos:start="80:19" pos:end="80:35">GetCurrentProcess</name><argument_list pos:start="80:36" pos:end="80:37">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="82:9" pos:end="82:43"><expr pos:start="82:9" pos:end="82:42"><call pos:start="82:9" pos:end="82:42"><name pos:start="82:9" pos:end="82:21">SymInitialize</name><argument_list pos:start="82:22" pos:end="82:42">(<argument pos:start="82:23" pos:end="82:29"><expr pos:start="82:23" pos:end="82:29"><name pos:start="82:23" pos:end="82:29">process</name></expr></argument>, <argument pos:start="82:32" pos:end="82:35"><expr pos:start="82:32" pos:end="82:35"><name pos:start="82:32" pos:end="82:35">NULL</name></expr></argument>, <argument pos:start="82:38" pos:end="82:41"><expr pos:start="82:38" pos:end="82:41"><name pos:start="82:38" pos:end="82:41">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="84:9" pos:end="84:60"><expr pos:start="84:9" pos:end="84:59"><name pos:start="84:9" pos:end="84:14">frames</name> <operator pos:start="84:16" pos:end="84:16">=</operator> <call pos:start="84:18" pos:end="84:59"><name pos:start="84:18" pos:end="84:38">CaptureStackBackTrace</name><argument_list pos:start="84:39" pos:end="84:59">(<argument pos:start="84:40" pos:end="84:40"><expr pos:start="84:40" pos:end="84:40"><literal type="number" pos:start="84:40" pos:end="84:40">0</literal></expr></argument>, <argument pos:start="84:43" pos:end="84:45"><expr pos:start="84:43" pos:end="84:45"><literal type="number" pos:start="84:43" pos:end="84:45">100</literal></expr></argument>, <argument pos:start="84:48" pos:end="84:52"><expr pos:start="84:48" pos:end="84:52"><name pos:start="84:48" pos:end="84:52">stack</name></expr></argument>, <argument pos:start="84:55" pos:end="84:58"><expr pos:start="84:55" pos:end="84:58"><name pos:start="84:55" pos:end="84:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="85:9" pos:end="85:84"><expr pos:start="85:9" pos:end="85:83"><name pos:start="85:9" pos:end="85:14">symbol</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <operator pos:start="85:18" pos:end="85:18">(</operator><name pos:start="85:19" pos:end="85:29">SYMBOL_INFO</name> <operator pos:start="85:31" pos:end="85:31">*</operator><operator pos:start="85:32" pos:end="85:32">)</operator><call pos:start="85:33" pos:end="85:83"><name pos:start="85:33" pos:end="85:38">calloc</name><argument_list pos:start="85:39" pos:end="85:83">(<argument pos:start="85:40" pos:end="85:79"><expr pos:start="85:40" pos:end="85:79"><sizeof pos:start="85:40" pos:end="85:58">sizeof<argument_list pos:start="85:46" pos:end="85:58">(<argument pos:start="85:47" pos:end="85:57"><expr pos:start="85:47" pos:end="85:57"><name pos:start="85:47" pos:end="85:57">SYMBOL_INFO</name></expr></argument>)</argument_list></sizeof> <operator pos:start="85:60" pos:end="85:60">+</operator> <literal type="number" pos:start="85:62" pos:end="85:64">256</literal> <operator pos:start="85:66" pos:end="85:66">*</operator> <sizeof pos:start="85:68" pos:end="85:79">sizeof<argument_list pos:start="85:74" pos:end="85:79">(<argument pos:start="85:75" pos:end="85:78"><expr pos:start="85:75" pos:end="85:78"><name pos:start="85:75" pos:end="85:78">char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="85:82" pos:end="85:82"><expr pos:start="85:82" pos:end="85:82"><literal type="number" pos:start="85:82" pos:end="85:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="86:9" pos:end="86:33"><expr pos:start="86:9" pos:end="86:32"><name pos:start="86:9" pos:end="86:26"><name pos:start="86:9" pos:end="86:14">symbol</name><operator pos:start="86:15" pos:end="86:16">-&gt;</operator><name pos:start="86:17" pos:end="86:26">MaxNameLen</name></name> <operator pos:start="86:28" pos:end="86:28">=</operator> <literal type="number" pos:start="86:30" pos:end="86:32">255</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="87:9" pos:end="87:51"><expr pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:14">symbol</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:28">SizeOfStruct</name></name> <operator pos:start="87:30" pos:end="87:30">=</operator> <sizeof pos:start="87:32" pos:end="87:50">sizeof<argument_list pos:start="87:38" pos:end="87:50">(<argument pos:start="87:39" pos:end="87:49"><expr pos:start="87:39" pos:end="87:49"><name pos:start="87:39" pos:end="87:49">SYMBOL_INFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<for pos:start="88:9" pos:end="92:9">for <control pos:start="88:13" pos:end="88:36">(<init pos:start="88:14" pos:end="88:19"><expr pos:start="88:14" pos:end="88:18"><name pos:start="88:14" pos:end="88:14">i</name> <operator pos:start="88:16" pos:end="88:16">=</operator> <literal type="number" pos:start="88:18" pos:end="88:18">0</literal></expr>;</init> <condition pos:start="88:21" pos:end="88:31"><expr pos:start="88:21" pos:end="88:30"><name pos:start="88:21" pos:end="88:21">i</name> <operator pos:start="88:23" pos:end="88:23">&lt;</operator> <name pos:start="88:25" pos:end="88:30">frames</name></expr>;</condition> <incr pos:start="88:33" pos:end="88:35"><expr pos:start="88:33" pos:end="88:35"><name pos:start="88:33" pos:end="88:33">i</name><operator pos:start="88:34" pos:end="88:35">++</operator></expr></incr>)</control> <block pos:start="88:38" pos:end="92:9">{<block_content pos:start="89:17" pos:end="90:97">
		<expr_stmt pos:start="89:17" pos:end="89:69"><expr pos:start="89:17" pos:end="89:68"><call pos:start="89:17" pos:end="89:68"><name pos:start="89:17" pos:end="89:27">SymFromAddr</name><argument_list pos:start="89:28" pos:end="89:68">(<argument pos:start="89:29" pos:end="89:35"><expr pos:start="89:29" pos:end="89:35"><name pos:start="89:29" pos:end="89:35">process</name></expr></argument>, <argument pos:start="89:38" pos:end="89:56"><expr pos:start="89:38" pos:end="89:56"><operator pos:start="89:38" pos:end="89:38">(</operator><name pos:start="89:39" pos:end="89:45">DWORD64</name><operator pos:start="89:46" pos:end="89:46">)</operator><operator pos:start="89:47" pos:end="89:47">(</operator><name pos:start="89:48" pos:end="89:55"><name pos:start="89:48" pos:end="89:52">stack</name><index pos:start="89:53" pos:end="89:55">[<expr pos:start="89:54" pos:end="89:54"><name pos:start="89:54" pos:end="89:54">i</name></expr>]</index></name><operator pos:start="89:56" pos:end="89:56">)</operator></expr></argument>, <argument pos:start="89:59" pos:end="89:59"><expr pos:start="89:59" pos:end="89:59"><literal type="number" pos:start="89:59" pos:end="89:59">0</literal></expr></argument>, <argument pos:start="89:62" pos:end="89:67"><expr pos:start="89:62" pos:end="89:67"><name pos:start="89:62" pos:end="89:67">symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="90:17" pos:end="90:97"><expr pos:start="90:17" pos:end="90:96"><call pos:start="90:17" pos:end="90:96"><name pos:start="90:17" pos:end="90:27">est_log_msg</name><argument_list pos:start="90:28" pos:end="90:96">(<argument pos:start="90:29" pos:end="90:46"><expr pos:start="90:29" pos:end="90:46"><literal type="string" pos:start="90:29" pos:end="90:46">"\n%i: [0x%0X] %s"</literal></expr></argument>, <argument pos:start="90:49" pos:end="90:64"><expr pos:start="90:49" pos:end="90:64"><operator pos:start="90:49" pos:end="90:49">(</operator><name pos:start="90:50" pos:end="90:55">frames</name> <operator pos:start="90:57" pos:end="90:57">-</operator> <name pos:start="90:59" pos:end="90:59">i</name> <operator pos:start="90:61" pos:end="90:61">-</operator> <literal type="number" pos:start="90:63" pos:end="90:63">1</literal><operator pos:start="90:64" pos:end="90:64">)</operator></expr></argument>, <argument pos:start="90:67" pos:end="90:81"><expr pos:start="90:67" pos:end="90:81"><name pos:start="90:67" pos:end="90:81"><name pos:start="90:67" pos:end="90:72">symbol</name><operator pos:start="90:73" pos:end="90:74">-&gt;</operator><name pos:start="90:75" pos:end="90:81">Address</name></name></expr></argument>, <argument pos:start="90:84" pos:end="90:95"><expr pos:start="90:84" pos:end="90:95"><name pos:start="90:84" pos:end="90:95"><name pos:start="90:84" pos:end="90:89">symbol</name><operator pos:start="90:90" pos:end="90:91">-&gt;</operator><name pos:start="90:92" pos:end="90:95">Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></for>

	<expr_stmt pos:start="94:9" pos:end="94:21"><expr pos:start="94:9" pos:end="94:20"><call pos:start="94:9" pos:end="94:20"><name pos:start="94:9" pos:end="94:12">free</name><argument_list pos:start="94:13" pos:end="94:20">(<argument pos:start="94:14" pos:end="94:19"><expr pos:start="94:14" pos:end="94:19"><name pos:start="94:14" pos:end="94:19">symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="96:1" pos:end="98:3">/*
 * Global function to be called to log something
 */</comment>
<function pos:start="99:1" pos:end="129:1"><type pos:start="99:1" pos:end="99:4"><name pos:start="99:1" pos:end="99:4">void</name></type> <name pos:start="99:6" pos:end="99:22">est_log_backtrace</name> <parameter_list pos:start="99:24" pos:end="99:29">(<parameter pos:start="99:25" pos:end="99:28"><decl pos:start="99:25" pos:end="99:28"><type pos:start="99:25" pos:end="99:28"><name pos:start="99:25" pos:end="99:28">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="100:1" pos:end="129:1">{<block_content pos:start="106:9" pos:end="129:0">
<cpp:ifndef pos:start="101:1" pos:end="101:25">#<cpp:directive pos:start="101:2" pos:end="101:7">ifndef</cpp:directive> <name pos:start="101:9" pos:end="101:25">DISABLE_BACKTRACE</name></cpp:ifndef>
<cpp:ifdef pos:start="102:1" pos:end="102:12">#<cpp:directive pos:start="102:2" pos:end="102:6">ifdef</cpp:directive> <name pos:start="102:8" pos:end="102:12">WIN32</name></cpp:ifdef>
	<comment type="block" pos:start="103:9" pos:end="105:10">/*
	* Spit out a backtrace if this is enabled globally
	*/</comment>
	<if_stmt pos:start="106:9" pos:end="110:0"><if pos:start="106:9" pos:end="110:0">if <condition pos:start="106:12" pos:end="106:34">(<expr pos:start="106:13" pos:end="106:33"><name pos:start="106:13" pos:end="106:33">est_backtrace_enabled</name></expr>)</condition> <block pos:start="106:36" pos:end="110:0">{<block_content pos:start="107:17" pos:end="107:34">
		<expr_stmt pos:start="107:17" pos:end="107:34"><expr pos:start="107:17" pos:end="107:33"><call pos:start="107:17" pos:end="107:33"><name pos:start="107:17" pos:end="107:31">printStackTrace</name><argument_list pos:start="107:32" pos:end="107:33">()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else pos:start="109:1" pos:end="109:5">#<cpp:directive pos:start="109:2" pos:end="109:5">else</cpp:directive></cpp:else>
    <decl_stmt pos:start="110:5" pos:end="110:25"><decl pos:start="110:5" pos:end="110:24"><type pos:start="110:5" pos:end="110:9"><name pos:start="110:5" pos:end="110:8">void</name><modifier pos:start="110:9" pos:end="110:9">*</modifier></type> <name pos:start="110:11" pos:end="110:24"><name pos:start="110:11" pos:end="110:19">callstack</name><index pos:start="110:20" pos:end="110:24">[<expr pos:start="110:21" pos:end="110:23"><literal type="number" pos:start="110:21" pos:end="110:23">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="111:5" pos:end="111:16"><decl pos:start="111:5" pos:end="111:15"><type pos:start="111:5" pos:end="111:11"><name pos:start="111:5" pos:end="111:8">char</name> <modifier pos:start="111:10" pos:end="111:10">*</modifier><modifier pos:start="111:11" pos:end="111:11">*</modifier></type><name pos:start="111:12" pos:end="111:15">strs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="112:5" pos:end="112:18"><decl pos:start="112:5" pos:end="112:9"><type pos:start="112:5" pos:end="112:7"><name pos:start="112:5" pos:end="112:7">int</name></type> <name pos:start="112:9" pos:end="112:9">i</name></decl>, <decl pos:start="112:12" pos:end="112:17"><type ref="prev" pos:start="112:5" pos:end="112:7"/><name pos:start="112:12" pos:end="112:17">frames</name></decl>;</decl_stmt>

    <comment type="block" pos:start="114:5" pos:end="116:7">/*
     * Spit out a backtrace if this is enabled globally
     */</comment>
    <if_stmt pos:start="117:5" pos:end="129:0"><if pos:start="117:5" pos:end="129:0">if <condition pos:start="117:8" pos:end="117:30">(<expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:29">est_backtrace_enabled</name></expr>)</condition> <block pos:start="117:32" pos:end="129:0">{<block_content pos:start="118:9" pos:end="125:19">
        <expr_stmt pos:start="118:9" pos:end="118:43"><expr pos:start="118:9" pos:end="118:42"><name pos:start="118:9" pos:end="118:14">frames</name> <operator pos:start="118:16" pos:end="118:16">=</operator> <call pos:start="118:18" pos:end="118:42"><name pos:start="118:18" pos:end="118:26">backtrace</name><argument_list pos:start="118:27" pos:end="118:42">(<argument pos:start="118:28" pos:end="118:36"><expr pos:start="118:28" pos:end="118:36"><name pos:start="118:28" pos:end="118:36">callstack</name></expr></argument>, <argument pos:start="118:39" pos:end="118:41"><expr pos:start="118:39" pos:end="118:41"><literal type="number" pos:start="118:39" pos:end="118:41">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="119:9" pos:end="119:52"><expr pos:start="119:9" pos:end="119:51"><name pos:start="119:9" pos:end="119:12">strs</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:51"><name pos:start="119:16" pos:end="119:32">backtrace_symbols</name><argument_list pos:start="119:33" pos:end="119:51">(<argument pos:start="119:34" pos:end="119:42"><expr pos:start="119:34" pos:end="119:42"><name pos:start="119:34" pos:end="119:42">callstack</name></expr></argument>, <argument pos:start="119:45" pos:end="119:50"><expr pos:start="119:45" pos:end="119:50"><name pos:start="119:45" pos:end="119:50">frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="120:9" pos:end="123:9">for <control pos:start="120:13" pos:end="120:36">(<init pos:start="120:14" pos:end="120:19"><expr pos:start="120:14" pos:end="120:18"><name pos:start="120:14" pos:end="120:14">i</name> <operator pos:start="120:16" pos:end="120:16">=</operator> <literal type="number" pos:start="120:18" pos:end="120:18">0</literal></expr>;</init> <condition pos:start="120:21" pos:end="120:31"><expr pos:start="120:21" pos:end="120:30"><name pos:start="120:21" pos:end="120:21">i</name> <operator pos:start="120:23" pos:end="120:23">&lt;</operator> <name pos:start="120:25" pos:end="120:30">frames</name></expr>;</condition> <incr pos:start="120:33" pos:end="120:35"><expr pos:start="120:33" pos:end="120:35"><operator pos:start="120:33" pos:end="120:34">++</operator><name pos:start="120:35" pos:end="120:35">i</name></expr></incr>)</control> <block pos:start="120:38" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:41">
	    <expr_stmt pos:start="121:13" pos:end="121:41"><expr pos:start="121:13" pos:end="121:40"><call pos:start="121:13" pos:end="121:40"><name pos:start="121:13" pos:end="121:23">est_log_msg</name><argument_list pos:start="121:24" pos:end="121:40">(<argument pos:start="121:25" pos:end="121:30"><expr pos:start="121:25" pos:end="121:30"><literal type="string" pos:start="121:25" pos:end="121:30">"\n%s"</literal></expr></argument>, <argument pos:start="121:33" pos:end="121:39"><expr pos:start="121:33" pos:end="121:39"><name pos:start="121:33" pos:end="121:39"><name pos:start="121:33" pos:end="121:36">strs</name><index pos:start="121:37" pos:end="121:39">[<expr pos:start="121:38" pos:end="121:38"><name pos:start="121:38" pos:end="121:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:start="122:13" pos:end="122:47">//fprintf(stderr, "%s\n", strs[i]);</comment>
        </block_content>}</block></for>
	<expr_stmt pos:start="124:9" pos:end="124:28"><expr pos:start="124:9" pos:end="124:27"><call pos:start="124:9" pos:end="124:27"><name pos:start="124:9" pos:end="124:19">est_log_msg</name><argument_list pos:start="124:20" pos:end="124:27">(<argument pos:start="124:21" pos:end="124:26"><expr pos:start="124:21" pos:end="124:26"><literal type="string" pos:start="124:21" pos:end="124:26">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="125:9" pos:end="125:19"><expr pos:start="125:9" pos:end="125:18"><call pos:start="125:9" pos:end="125:18"><name pos:start="125:9" pos:end="125:12">free</name><argument_list pos:start="125:13" pos:end="125:18">(<argument pos:start="125:14" pos:end="125:17"><expr pos:start="125:14" pos:end="125:17"><name pos:start="125:14" pos:end="125:17">strs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="127:1" pos:end="127:6">#<cpp:directive pos:start="127:2" pos:end="127:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="127:8" pos:end="127:17">/* WIN32*/</comment>
<cpp:endif pos:start="128:1" pos:end="128:6">#<cpp:directive pos:start="128:2" pos:end="128:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="128:8" pos:end="128:29">/* DISABLE_BACKTRACE*/</comment>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="130:1" pos:end="135:3">/*! @brief est_get_version() allows the application to retrieve
    the libEST version string.  Returns a char* array containing
    the full version string value for the library.
 
    @return const char*
 */</comment>
<function pos:start="136:1" pos:end="138:1"><type pos:start="136:1" pos:end="136:12"><specifier pos:start="136:1" pos:end="136:5">const</specifier> <name pos:start="136:7" pos:end="136:10">char</name> <modifier pos:start="136:12" pos:end="136:12">*</modifier></type> <name pos:start="136:14" pos:end="136:28">est_get_version</name> <parameter_list pos:start="136:30" pos:end="136:35">(<parameter pos:start="136:31" pos:end="136:34"><decl pos:start="136:31" pos:end="136:34"><type pos:start="136:31" pos:end="136:34"><name pos:start="136:31" pos:end="136:34">void</name></type></decl></parameter>)</parameter_list> <block pos:start="136:37" pos:end="138:1">{<block_content pos:start="137:5" pos:end="137:26">
    <return pos:start="137:5" pos:end="137:26">return <expr pos:start="137:12" pos:end="137:25"><name pos:start="137:12" pos:end="137:25">EST_VER_STRING</name></expr>;</return> 
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="139:1" pos:end="147:3">/*! @brief est_get_api_level() allows the application to retrieve
    the libEST API level.  This is a numeric value that
    indicates the API level of the library.  When new versions of
    libEST are released and the API changes, this value will be
    incremented.  Applications can use this to determine which capabilities
    in the libEST library should or should not be attempted.
 
    @return int
 */</comment>
<function pos:start="148:1" pos:end="150:1"><type pos:start="148:1" pos:end="148:3"><name pos:start="148:1" pos:end="148:3">int</name></type> <name pos:start="148:5" pos:end="148:21">est_get_api_level</name> <parameter_list pos:start="148:23" pos:end="148:28">(<parameter pos:start="148:24" pos:end="148:27"><decl pos:start="148:24" pos:end="148:27"><type pos:start="148:24" pos:end="148:27"><name pos:start="148:24" pos:end="148:27">void</name></type></decl></parameter>)</parameter_list> <block pos:start="148:30" pos:end="150:1">{<block_content pos:start="149:5" pos:end="149:25">
    <return pos:start="149:5" pos:end="149:25">return <expr pos:start="149:12" pos:end="149:24"><name pos:start="149:12" pos:end="149:24">EST_API_LEVEL</name></expr>;</return> 
</block_content>}</block></function>
<comment type="block" pos:start="151:1" pos:end="155:3">/*
 * Use this to log the libEST version to an information
 * log message.  Also logs the compile-time and run-time 
 * OpenSSL versions.
 */</comment>
<function pos:start="156:1" pos:end="164:1"><type pos:start="156:1" pos:end="156:4"><name pos:start="156:1" pos:end="156:4">void</name></type> <name pos:start="156:6" pos:end="156:20">est_log_version</name> <parameter_list pos:start="156:22" pos:end="156:27">(<parameter pos:start="156:23" pos:end="156:26"><decl pos:start="156:23" pos:end="156:26"><type pos:start="156:23" pos:end="156:26"><name pos:start="156:23" pos:end="156:26">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="157:1" pos:end="164:1">{<block_content pos:start="158:5" pos:end="163:66">
    <expr_stmt pos:start="158:5" pos:end="160:0"><expr pos:start="158:5" pos:end="158:77"><call pos:start="158:5" pos:end="158:77"><name pos:start="158:5" pos:end="158:16">EST_LOG_INFO</name><argument_list pos:start="158:17" pos:end="158:77">(<argument pos:start="158:18" pos:end="158:36"><expr pos:start="158:18" pos:end="158:36"><literal type="string" pos:start="158:18" pos:end="158:36">"%s (API level %d)"</literal></expr></argument>, <argument pos:start="158:39" pos:end="158:55"><expr pos:start="158:39" pos:end="158:55"><call pos:start="158:39" pos:end="158:55"><name pos:start="158:39" pos:end="158:53">est_get_version</name><argument_list pos:start="158:54" pos:end="158:55">()</argument_list></call></expr></argument>, <argument pos:start="158:58" pos:end="158:76"><expr pos:start="158:58" pos:end="158:76"><call pos:start="158:58" pos:end="158:76"><name pos:start="158:58" pos:end="158:74">est_get_api_level</name><argument_list pos:start="158:75" pos:end="158:76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="159:1" pos:end="159:22">#<cpp:directive pos:start="159:2" pos:end="159:6">ifdef</cpp:directive> <name pos:start="159:8" pos:end="159:22">SOURCE_REVISION</name></cpp:ifdef>
    <expr_stmt pos:start="160:5" pos:end="162:0"><expr pos:start="160:5" pos:end="160:67"><call pos:start="160:5" pos:end="160:67"><name pos:start="160:5" pos:end="160:16">EST_LOG_INFO</name><argument_list pos:start="160:17" pos:end="160:67">(<argument pos:start="160:18" pos:end="160:49"><expr pos:start="160:18" pos:end="160:49"><literal type="string" pos:start="160:18" pos:end="160:49">"Source repository revision# %d"</literal></expr></argument>, <argument pos:start="160:52" pos:end="160:66"><expr pos:start="160:52" pos:end="160:66"><name pos:start="160:52" pos:end="160:66">SOURCE_REVISION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="162:5" pos:end="162:62"><expr pos:start="162:5" pos:end="162:61"><call pos:start="162:5" pos:end="162:61"><name pos:start="162:5" pos:end="162:16">EST_LOG_INFO</name><argument_list pos:start="162:17" pos:end="162:61">(<argument pos:start="162:18" pos:end="162:38"><expr pos:start="162:18" pos:end="162:38"><literal type="string" pos:start="162:18" pos:end="162:38">"Compiled against %s"</literal></expr></argument>, <argument pos:start="162:41" pos:end="162:60"><expr pos:start="162:41" pos:end="162:60"><name pos:start="162:41" pos:end="162:60">OPENSSL_VERSION_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="163:5" pos:end="163:66"><expr pos:start="163:5" pos:end="163:65"><call pos:start="163:5" pos:end="163:65"><name pos:start="163:5" pos:end="163:16">EST_LOG_INFO</name><argument_list pos:start="163:17" pos:end="163:65">(<argument pos:start="163:18" pos:end="163:32"><expr pos:start="163:18" pos:end="163:32"><literal type="string" pos:start="163:18" pos:end="163:32">"Linking to %s"</literal></expr></argument>, <argument pos:start="163:35" pos:end="163:64"><expr pos:start="163:35" pos:end="163:64"><call pos:start="163:35" pos:end="163:64"><name pos:start="163:35" pos:end="163:48">SSLeay_version</name><argument_list pos:start="163:49" pos:end="163:64">(<argument pos:start="163:50" pos:end="163:63"><expr pos:start="163:50" pos:end="163:63"><name pos:start="163:50" pos:end="163:63">SSLEAY_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="165:1" pos:end="180:3">/*! @brief est_init_logger() allows the application to override the 
    default log handler for EST logging messages.
 
    @param lvl Sets the desired logging level to EST_LOG_LEVEL
    @param loggerfunc Sets the callback function to handle logging
 
    This function allows an application that uses EST to provide
    a function for logging EST messages.  EST provides a default handler
    that sends messages to stderr.  Applications may desire to send
    messages to syslog or some other logging facility.  An application
    would provide a function pointer using this method to intercept
    and handle EST log messages.  This setting is global to the library
    and will impact all contexts.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="181:1" pos:end="196:1"><type pos:start="181:1" pos:end="181:9"><name pos:start="181:1" pos:end="181:9">EST_ERROR</name></type> <name pos:start="181:11" pos:end="181:25">est_init_logger</name> <parameter_list pos:start="181:27" pos:end="181:82">(<parameter pos:start="181:28" pos:end="181:44"><decl pos:start="181:28" pos:end="181:44"><type pos:start="181:28" pos:end="181:40"><name pos:start="181:28" pos:end="181:40">EST_LOG_LEVEL</name></type> <name pos:start="181:42" pos:end="181:44">lvl</name></decl></parameter>, <parameter pos:start="181:47" pos:end="181:81"><function_decl pos:start="181:47" pos:end="181:81"><type pos:start="181:47" pos:end="181:50"><name pos:start="181:47" pos:end="181:50">void</name></type> (<modifier pos:start="181:53" pos:end="181:53">*</modifier><name pos:start="181:54" pos:end="181:63">loggerfunc</name>)<parameter_list pos:start="181:65" pos:end="181:81">(<parameter pos:start="181:66" pos:end="181:71"><decl pos:start="181:66" pos:end="181:71"><type pos:start="181:66" pos:end="181:71"><name pos:start="181:66" pos:end="181:69">char</name> <modifier pos:start="181:71" pos:end="181:71">*</modifier></type></decl></parameter>, <parameter pos:start="181:74" pos:end="181:80"><decl pos:start="181:74" pos:end="181:80"><type pos:start="181:74" pos:end="181:80"><name pos:start="181:74" pos:end="181:80">va_list</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block pos:start="182:1" pos:end="196:1">{<block_content pos:start="184:5" pos:end="195:26">
    <comment type="block" pos:start="183:5" pos:end="183:31">/* Initialize the logger */</comment>
    <if_stmt pos:start="184:5" pos:end="189:5"><if pos:start="184:5" pos:end="186:5">if <condition pos:start="184:8" pos:end="184:19">(<expr pos:start="184:9" pos:end="184:18"><name pos:start="184:9" pos:end="184:18">loggerfunc</name></expr>)</condition> <block pos:start="184:21" pos:end="186:5">{<block_content pos:start="185:9" pos:end="185:34">
        <expr_stmt pos:start="185:9" pos:end="185:34"><expr pos:start="185:9" pos:end="185:33"><name pos:start="185:9" pos:end="185:20">est_log_func</name> <operator pos:start="185:22" pos:end="185:22">=</operator> <name pos:start="185:24" pos:end="185:33">loggerfunc</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="186:7" pos:end="189:5">else <block pos:start="186:12" pos:end="189:5">{<block_content pos:start="188:9" pos:end="188:42">
        <comment type="block" pos:start="187:9" pos:end="187:40">/* install our default logger */</comment>
        <expr_stmt pos:start="188:9" pos:end="188:42"><expr pos:start="188:9" pos:end="188:41"><name pos:start="188:9" pos:end="188:20">est_log_func</name> <operator pos:start="188:22" pos:end="188:22">=</operator> <operator pos:start="188:24" pos:end="188:24">&amp;</operator><name pos:start="188:25" pos:end="188:41">est_logger_stderr</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="191:5" pos:end="193:7">/*
     * Set the desired logging level
     */</comment>
    <expr_stmt pos:start="194:5" pos:end="194:30"><expr pos:start="194:5" pos:end="194:29"><name pos:start="194:5" pos:end="194:23">est_desired_log_lvl</name> <operator pos:start="194:25" pos:end="194:25">=</operator> <name pos:start="194:27" pos:end="194:29">lvl</name></expr>;</expr_stmt>
    <return pos:start="195:5" pos:end="195:26">return <expr pos:start="195:12" pos:end="195:25"><operator pos:start="195:12" pos:end="195:12">(</operator><name pos:start="195:13" pos:end="195:24">EST_ERR_NONE</name><operator pos:start="195:25" pos:end="195:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="197:1" pos:end="212:3">/*! @brief est_enable_backtrace() allows the application to toggle
    whether the stack trace is displayed for WARNING and ERROR
    log messages coming from libEST.   
 
    @param enable Set to zero to disable stack traces, non-zero to
                  enable stack traces through the logging facility.
 
    This function allows an application to enable stack traces, which
    may be useful for troubleshooting the libEST library.  Stack
    traces are disabled by default.  Call this function with a 
    non-zero argument to enable stack traces for both WARNING and
    ERROR log messages.  This setting is global to the library and
    will impact all contexts.
 
    @return void.
 */</comment>
<function pos:start="213:1" pos:end="216:1"><type pos:start="213:1" pos:end="213:4"><name pos:start="213:1" pos:end="213:4">void</name></type> <name pos:start="213:6" pos:end="213:25">est_enable_backtrace</name> <parameter_list pos:start="213:27" pos:end="213:38">(<parameter pos:start="213:28" pos:end="213:37"><decl pos:start="213:28" pos:end="213:37"><type pos:start="213:28" pos:end="213:30"><name pos:start="213:28" pos:end="213:30">int</name></type> <name pos:start="213:32" pos:end="213:37">enable</name></decl></parameter>)</parameter_list>
<block pos:start="214:1" pos:end="216:1">{<block_content pos:start="215:5" pos:end="215:35">
    <expr_stmt pos:start="215:5" pos:end="215:35"><expr pos:start="215:5" pos:end="215:34"><name pos:start="215:5" pos:end="215:25">est_backtrace_enabled</name> <operator pos:start="215:27" pos:end="215:27">=</operator> <name pos:start="215:29" pos:end="215:34">enable</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="217:1" pos:end="238:3">/*! @brief est_read_x509_request() is a helper function that reads
 *  a char* and converts it to an OpenSSL X509_REQ*.  The char* data
 *  can be either PEM or DER encoded.   
 
    @param csr This is the char* that contains the PEM or DER encoded
               X509 CSR.
    @param csr_len This is the length of the csr char*.  DER encoded data
               may contain zeros, which requires the length to be provided
	       by the application layer.
    @param csr_format This parameter specifies the encoding method of the
               csr char* that was provided.  Set this to either EST_CERT_FORMAT_PEM
	       or EST_CERT_FORMAT_DER.
 
    This function converts a PEM or DER encoded char* to the OpenSSL
    X509_REQ structure.  This function will return NULL if the PEM/DER
    data is corrupted or unable to be parsed by the OpenSSL library.
    This function will allocate memory for the X509_REQ data.  You must
    free the memory in your application when it's no longer needed by
    calling X509_REQ_free().
 
    @return X509_REQ*
 */</comment>
<function pos:start="239:1" pos:end="290:1"><type pos:start="239:1" pos:end="239:10"><name pos:start="239:1" pos:end="239:8">X509_REQ</name> <modifier pos:start="239:10" pos:end="239:10">*</modifier></type><name pos:start="239:11" pos:end="239:31">est_read_x509_request</name> <parameter_list pos:start="239:33" pos:end="240:60">(<parameter pos:start="239:34" pos:end="239:51"><decl pos:start="239:34" pos:end="239:51"><type pos:start="239:34" pos:end="239:51"><name pos:start="239:34" pos:end="239:41">unsigned</name> <name pos:start="239:43" pos:end="239:46">char</name> <modifier pos:start="239:48" pos:end="239:48">*</modifier></type><name pos:start="239:49" pos:end="239:51">csr</name></decl></parameter>, <parameter pos:start="239:54" pos:end="239:64"><decl pos:start="239:54" pos:end="239:64"><type pos:start="239:54" pos:end="239:64"><name pos:start="239:54" pos:end="239:56">int</name></type> <name pos:start="239:58" pos:end="239:64">csr_len</name></decl></parameter>,
	                         <parameter pos:start="240:34" pos:end="240:59"><decl pos:start="240:34" pos:end="240:59"><type pos:start="240:34" pos:end="240:59"><name pos:start="240:34" pos:end="240:48">EST_CERT_FORMAT</name></type> <name pos:start="240:50" pos:end="240:59">csr_format</name></decl></parameter>)</parameter_list>
<block pos:start="241:1" pos:end="290:1">{<block_content pos:start="242:5" pos:end="289:17">
    <decl_stmt pos:start="242:5" pos:end="242:25"><decl pos:start="242:5" pos:end="242:24"><type pos:start="242:5" pos:end="242:14"><name pos:start="242:5" pos:end="242:12">X509_REQ</name> <modifier pos:start="242:14" pos:end="242:14">*</modifier></type><name pos:start="242:15" pos:end="242:17">req</name> <init pos:start="242:19" pos:end="242:24">= <expr pos:start="242:21" pos:end="242:24"><name pos:start="242:21" pos:end="242:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="243:5" pos:end="243:12"><decl pos:start="243:5" pos:end="243:11"><type pos:start="243:5" pos:end="243:9"><name pos:start="243:5" pos:end="243:7">BIO</name> <modifier pos:start="243:9" pos:end="243:9">*</modifier></type><name pos:start="243:10" pos:end="243:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="244:5" pos:end="244:22"><decl pos:start="244:5" pos:end="244:21"><type pos:start="244:5" pos:end="244:17"><name pos:start="244:5" pos:end="244:12">unsigned</name> <name pos:start="244:14" pos:end="244:17">long</name></type> <name pos:start="244:19" pos:end="244:21">err</name></decl>;</decl_stmt>

    <if_stmt pos:start="246:5" pos:end="249:5"><if pos:start="246:5" pos:end="249:5">if <condition pos:start="246:8" pos:end="246:13">(<expr pos:start="246:9" pos:end="246:12"><operator pos:start="246:9" pos:end="246:9">!</operator><name pos:start="246:10" pos:end="246:12">csr</name></expr>)</condition> <block pos:start="246:15" pos:end="249:5">{<block_content pos:start="247:9" pos:end="248:22">
	<expr_stmt pos:start="247:9" pos:end="247:43"><expr pos:start="247:9" pos:end="247:42"><call pos:start="247:9" pos:end="247:42"><name pos:start="247:9" pos:end="247:19">EST_LOG_ERR</name><argument_list pos:start="247:20" pos:end="247:42">(<argument pos:start="247:21" pos:end="247:41"><expr pos:start="247:21" pos:end="247:41"><literal type="string" pos:start="247:21" pos:end="247:41">"CSR may not be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="248:9" pos:end="248:22">return <expr pos:start="248:16" pos:end="248:21"><operator pos:start="248:16" pos:end="248:16">(</operator><name pos:start="248:17" pos:end="248:20">NULL</name><operator pos:start="248:21" pos:end="248:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="251:5" pos:end="254:5"><if pos:start="251:5" pos:end="254:5">if <condition pos:start="251:8" pos:end="251:38">(<expr pos:start="251:9" pos:end="251:37"><name pos:start="251:9" pos:end="251:15">csr_len</name> <operator pos:start="251:17" pos:end="251:17">&gt;</operator> <name pos:start="251:19" pos:end="251:37">EST_RAW_CSR_LEN_MAX</name></expr>)</condition> <block pos:start="251:40" pos:end="254:5">{<block_content pos:start="252:9" pos:end="253:22">
	<expr_stmt pos:start="252:9" pos:end="252:92"><expr pos:start="252:9" pos:end="252:91"><call pos:start="252:9" pos:end="252:91"><name pos:start="252:9" pos:end="252:19">EST_LOG_ERR</name><argument_list pos:start="252:20" pos:end="252:91">(<argument pos:start="252:21" pos:end="252:69"><expr pos:start="252:21" pos:end="252:69"><literal type="string" pos:start="252:21" pos:end="252:69">"CSR length is greater than maximum allowed (%d)"</literal></expr></argument>, <argument pos:start="252:72" pos:end="252:90"><expr pos:start="252:72" pos:end="252:90"><name pos:start="252:72" pos:end="252:90">EST_RAW_CSR_LEN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="253:9" pos:end="253:22">return <expr pos:start="253:16" pos:end="253:21"><operator pos:start="253:16" pos:end="253:16">(</operator><name pos:start="253:17" pos:end="253:20">NULL</name><operator pos:start="253:21" pos:end="253:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="256:5" pos:end="259:5"><if pos:start="256:5" pos:end="259:5">if <condition pos:start="256:8" pos:end="256:79">(<expr pos:start="256:9" pos:end="256:78"><name pos:start="256:9" pos:end="256:18">csr_format</name> <operator pos:start="256:20" pos:end="256:21">!=</operator> <name pos:start="256:23" pos:end="256:41">EST_CERT_FORMAT_PEM</name> <operator pos:start="256:43" pos:end="256:44">&amp;&amp;</operator> <name pos:start="256:46" pos:end="256:55">csr_format</name> <operator pos:start="256:57" pos:end="256:58">!=</operator> <name pos:start="256:60" pos:end="256:78">EST_CERT_FORMAT_DER</name></expr>)</condition> <block pos:start="256:81" pos:end="259:5">{<block_content pos:start="257:9" pos:end="258:22">
	<expr_stmt pos:start="257:9" pos:end="257:72"><expr pos:start="257:9" pos:end="257:71"><call pos:start="257:9" pos:end="257:71"><name pos:start="257:9" pos:end="257:19">EST_LOG_ERR</name><argument_list pos:start="257:20" pos:end="257:71">(<argument pos:start="257:21" pos:end="257:70"><expr pos:start="257:21" pos:end="257:70"><literal type="string" pos:start="257:21" pos:end="257:70">"Only PEM and DER encoding formats are supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="258:9" pos:end="258:22">return <expr pos:start="258:16" pos:end="258:21"><operator pos:start="258:16" pos:end="258:16">(</operator><name pos:start="258:17" pos:end="258:20">NULL</name><operator pos:start="258:21" pos:end="258:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:39"><expr pos:start="261:5" pos:end="261:38"><name pos:start="261:5" pos:end="261:6">in</name> <operator pos:start="261:8" pos:end="261:8">=</operator> <call pos:start="261:10" pos:end="261:38"><name pos:start="261:10" pos:end="261:24">BIO_new_mem_buf</name><argument_list pos:start="261:25" pos:end="261:38">(<argument pos:start="261:26" pos:end="261:28"><expr pos:start="261:26" pos:end="261:28"><name pos:start="261:26" pos:end="261:28">csr</name></expr></argument>, <argument pos:start="261:31" pos:end="261:37"><expr pos:start="261:31" pos:end="261:37"><name pos:start="261:31" pos:end="261:37">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="262:5" pos:end="265:5"><if pos:start="262:5" pos:end="265:5">if <condition pos:start="262:8" pos:end="262:19">(<expr pos:start="262:9" pos:end="262:18"><name pos:start="262:9" pos:end="262:10">in</name> <operator pos:start="262:12" pos:end="262:13">==</operator> <name pos:start="262:15" pos:end="262:18">NULL</name></expr>)</condition> <block pos:start="262:21" pos:end="265:5">{<block_content pos:start="263:9" pos:end="264:22">
        <expr_stmt pos:start="263:9" pos:end="263:60"><expr pos:start="263:9" pos:end="263:59"><call pos:start="263:9" pos:end="263:59"><name pos:start="263:9" pos:end="263:19">EST_LOG_ERR</name><argument_list pos:start="263:20" pos:end="263:59">(<argument pos:start="263:21" pos:end="263:58"><expr pos:start="263:21" pos:end="263:58"><literal type="string" pos:start="263:21" pos:end="263:58">"Unable to open the CSR memory buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="264:9" pos:end="264:22">return <expr pos:start="264:16" pos:end="264:21"><operator pos:start="264:16" pos:end="264:16">(</operator><name pos:start="264:17" pos:end="264:20">NULL</name><operator pos:start="264:21" pos:end="264:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch pos:start="267:5" pos:end="277:5">switch <condition pos:start="267:12" pos:end="267:23">(<expr pos:start="267:13" pos:end="267:22"><name pos:start="267:13" pos:end="267:22">csr_format</name></expr>)</condition> <block pos:start="267:25" pos:end="277:5">{<block_content pos:start="268:5" pos:end="276:14">
    <case pos:start="268:5" pos:end="268:29">case <expr pos:start="268:10" pos:end="268:28"><name pos:start="268:10" pos:end="268:28">EST_CERT_FORMAT_PEM</name></expr>:</case>
	<expr_stmt pos:start="269:9" pos:end="269:55"><expr pos:start="269:9" pos:end="269:54"><name pos:start="269:9" pos:end="269:11">req</name> <operator pos:start="269:13" pos:end="269:13">=</operator> <call pos:start="269:15" pos:end="269:54"><name pos:start="269:15" pos:end="269:35">PEM_read_bio_X509_REQ</name><argument_list pos:start="269:36" pos:end="269:54">(<argument pos:start="269:37" pos:end="269:38"><expr pos:start="269:37" pos:end="269:38"><name pos:start="269:37" pos:end="269:38">in</name></expr></argument>,<argument pos:start="269:40" pos:end="269:43"><expr pos:start="269:40" pos:end="269:43"><name pos:start="269:40" pos:end="269:43">NULL</name></expr></argument>,<argument pos:start="269:45" pos:end="269:48"><expr pos:start="269:45" pos:end="269:48"><name pos:start="269:45" pos:end="269:48">NULL</name></expr></argument>,<argument pos:start="269:50" pos:end="269:53"><expr pos:start="269:50" pos:end="269:53"><name pos:start="269:50" pos:end="269:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break pos:start="270:9" pos:end="270:14">break;</break>
    <case pos:start="271:5" pos:end="271:29">case <expr pos:start="271:10" pos:end="271:28"><name pos:start="271:10" pos:end="271:28">EST_CERT_FORMAT_DER</name></expr>:</case>
	<expr_stmt pos:start="272:9" pos:end="272:40"><expr pos:start="272:9" pos:end="272:39"><name pos:start="272:9" pos:end="272:11">req</name> <operator pos:start="272:13" pos:end="272:13">=</operator> <call pos:start="272:15" pos:end="272:39"><name pos:start="272:15" pos:end="272:30">d2i_X509_REQ_bio</name><argument_list pos:start="272:31" pos:end="272:39">(<argument pos:start="272:32" pos:end="272:33"><expr pos:start="272:32" pos:end="272:33"><name pos:start="272:32" pos:end="272:33">in</name></expr></argument>,<argument pos:start="272:35" pos:end="272:38"><expr pos:start="272:35" pos:end="272:38"><name pos:start="272:35" pos:end="272:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break pos:start="273:9" pos:end="273:14">break;</break>
    <default pos:start="274:5" pos:end="274:12">default:</default>
	<expr_stmt pos:start="275:9" pos:end="275:53"><expr pos:start="275:9" pos:end="275:52"><call pos:start="275:9" pos:end="275:52"><name pos:start="275:9" pos:end="275:19">EST_LOG_ERR</name><argument_list pos:start="275:20" pos:end="275:52">(<argument pos:start="275:21" pos:end="275:51"><expr pos:start="275:21" pos:end="275:51"><literal type="string" pos:start="275:21" pos:end="275:51">"Invalid CSR format specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="276:9" pos:end="276:14">break;</break>
    </block_content>}</block></switch>

    <comment type="block" pos:start="279:5" pos:end="281:7">/*
     * Check for an error while parsing the input data
     */</comment>
    <if_stmt pos:start="282:5" pos:end="286:5"><if pos:start="282:5" pos:end="286:5">if <condition pos:start="282:8" pos:end="282:13">(<expr pos:start="282:9" pos:end="282:12"><operator pos:start="282:9" pos:end="282:9">!</operator><name pos:start="282:10" pos:end="282:12">req</name></expr>)</condition> <block pos:start="282:15" pos:end="286:5">{<block_content pos:start="283:9" pos:end="285:77">
        <expr_stmt pos:start="283:9" pos:end="283:92"><expr pos:start="283:9" pos:end="283:91"><call pos:start="283:9" pos:end="283:91"><name pos:start="283:9" pos:end="283:19">EST_LOG_ERR</name><argument_list pos:start="283:20" pos:end="283:91">(<argument pos:start="283:21" pos:end="283:90"><expr pos:start="283:21" pos:end="283:90"><literal type="string" pos:start="283:21" pos:end="283:90">"An error occurred in the OpenSSL library while reading the CSR data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="284:9" pos:end="284:30"><expr pos:start="284:9" pos:end="284:29"><name pos:start="284:9" pos:end="284:11">err</name> <operator pos:start="284:13" pos:end="284:13">=</operator> <call pos:start="284:15" pos:end="284:29"><name pos:start="284:15" pos:end="284:27">ERR_get_error</name><argument_list pos:start="284:28" pos:end="284:29">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="285:9" pos:end="285:77"><expr pos:start="285:9" pos:end="285:76"><call pos:start="285:9" pos:end="285:76"><name pos:start="285:9" pos:end="285:19">EST_LOG_ERR</name><argument_list pos:start="285:20" pos:end="285:76">(<argument pos:start="285:21" pos:end="285:46"><expr pos:start="285:21" pos:end="285:46"><literal type="string" pos:start="285:21" pos:end="285:46">"OpenSSL error string: %s"</literal></expr></argument>, <argument pos:start="285:49" pos:end="285:75"><expr pos:start="285:49" pos:end="285:75"><call pos:start="285:49" pos:end="285:75"><name pos:start="285:49" pos:end="285:64">ERR_error_string</name><argument_list pos:start="285:65" pos:end="285:75">(<argument pos:start="285:66" pos:end="285:68"><expr pos:start="285:66" pos:end="285:68"><name pos:start="285:66" pos:end="285:68">err</name></expr></argument>, <argument pos:start="285:71" pos:end="285:74"><expr pos:start="285:71" pos:end="285:74"><name pos:start="285:71" pos:end="285:74">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="288:5" pos:end="288:21"><expr pos:start="288:5" pos:end="288:20"><call pos:start="288:5" pos:end="288:20"><name pos:start="288:5" pos:end="288:16">BIO_free_all</name><argument_list pos:start="288:17" pos:end="288:20">(<argument pos:start="288:18" pos:end="288:19"><expr pos:start="288:18" pos:end="288:19"><name pos:start="288:18" pos:end="288:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="289:5" pos:end="289:17">return <expr pos:start="289:12" pos:end="289:16"><operator pos:start="289:12" pos:end="289:12">(</operator><name pos:start="289:13" pos:end="289:15">req</name><operator pos:start="289:16" pos:end="289:16">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="291:1" pos:end="312:3">/*! @brief est_load_key() is a helper function that reads
 *  a char* and converts it to an OpenSSL EVP_PKEY*.  The char* data
 *  can be either PEM or DER encoded.   
 
    @param key This is the char* that contains the PEM or DER encoded
               key pair.
    @param key_len This is the length of the key char*.  DER encoded data
               may contain zeros, which requires the length to be provided
	       by the application layer.
    @param key_format This parameter specifies the encoding method of the
               key char* that was provided.  Set this to either EST_FORMAT_PEM
	       or EST_FORMAT_DER.
 
    This function converts a PEM or DER encoded char* to the OpenSSL
    EVP_PKEY* structure.  This function will return NULL if the PEM/DER
    data is corrupted or unable to be parsed by the OpenSSL library.
    This function will allocate memory for the EVP_PKEY data.  You must
    free the memory in your application when it's no longer needed by
    calling EVP_PKEY_free().
 
    @return EVP_PKEY*
 */</comment>
<function pos:start="313:1" pos:end="345:1"><type pos:start="313:1" pos:end="313:10"><name pos:start="313:1" pos:end="313:8">EVP_PKEY</name> <modifier pos:start="313:10" pos:end="313:10">*</modifier></type><name pos:start="313:11" pos:end="313:22">est_load_key</name> <parameter_list pos:start="313:24" pos:end="313:68">(<parameter pos:start="313:25" pos:end="313:42"><decl pos:start="313:25" pos:end="313:42"><type pos:start="313:25" pos:end="313:42"><name pos:start="313:25" pos:end="313:32">unsigned</name> <name pos:start="313:34" pos:end="313:37">char</name> <modifier pos:start="313:39" pos:end="313:39">*</modifier></type><name pos:start="313:40" pos:end="313:42">key</name></decl></parameter>, <parameter pos:start="313:45" pos:end="313:55"><decl pos:start="313:45" pos:end="313:55"><type pos:start="313:45" pos:end="313:55"><name pos:start="313:45" pos:end="313:47">int</name></type> <name pos:start="313:49" pos:end="313:55">key_len</name></decl></parameter>, <parameter pos:start="313:58" pos:end="313:67"><decl pos:start="313:58" pos:end="313:67"><type pos:start="313:58" pos:end="313:67"><name pos:start="313:58" pos:end="313:60">int</name></type> <name pos:start="313:62" pos:end="313:67">format</name></decl></parameter>)</parameter_list>
<block pos:start="314:1" pos:end="345:1">{<block_content pos:start="315:5" pos:end="344:18">
    <decl_stmt pos:start="315:5" pos:end="315:19"><decl pos:start="315:5" pos:end="315:18"><type pos:start="315:5" pos:end="315:9"><name pos:start="315:5" pos:end="315:7">BIO</name> <modifier pos:start="315:9" pos:end="315:9">*</modifier></type><name pos:start="315:10" pos:end="315:11">in</name> <init pos:start="315:13" pos:end="315:18">= <expr pos:start="315:15" pos:end="315:18"><name pos:start="315:15" pos:end="315:18">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="316:5" pos:end="316:26"><decl pos:start="316:5" pos:end="316:25"><type pos:start="316:5" pos:end="316:14"><name pos:start="316:5" pos:end="316:12">EVP_PKEY</name> <modifier pos:start="316:14" pos:end="316:14">*</modifier></type><name pos:start="316:15" pos:end="316:18">pkey</name> <init pos:start="316:20" pos:end="316:25">= <expr pos:start="316:22" pos:end="316:25"><name pos:start="316:22" pos:end="316:25">NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="318:5" pos:end="321:5"><if pos:start="318:5" pos:end="321:5">if <condition pos:start="318:8" pos:end="318:20">(<expr pos:start="318:9" pos:end="318:19"><name pos:start="318:9" pos:end="318:11">key</name> <operator pos:start="318:13" pos:end="318:14">==</operator> <name pos:start="318:16" pos:end="318:19">NULL</name></expr>)</condition> <block pos:start="318:22" pos:end="321:5">{<block_content pos:start="319:9" pos:end="320:20">
        <expr_stmt pos:start="319:9" pos:end="319:44"><expr pos:start="319:9" pos:end="319:43"><call pos:start="319:9" pos:end="319:43"><name pos:start="319:9" pos:end="319:19">EST_LOG_ERR</name><argument_list pos:start="319:20" pos:end="319:43">(<argument pos:start="319:21" pos:end="319:42"><expr pos:start="319:21" pos:end="319:42"><literal type="string" pos:start="319:21" pos:end="319:42">"no key data provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="320:9" pos:end="320:20">return <expr pos:start="320:16" pos:end="320:19"><name pos:start="320:16" pos:end="320:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:39"><expr pos:start="323:5" pos:end="323:38"><name pos:start="323:5" pos:end="323:6">in</name> <operator pos:start="323:8" pos:end="323:8">=</operator> <call pos:start="323:10" pos:end="323:38"><name pos:start="323:10" pos:end="323:24">BIO_new_mem_buf</name><argument_list pos:start="323:25" pos:end="323:38">(<argument pos:start="323:26" pos:end="323:28"><expr pos:start="323:26" pos:end="323:28"><name pos:start="323:26" pos:end="323:28">key</name></expr></argument>, <argument pos:start="323:31" pos:end="323:37"><expr pos:start="323:31" pos:end="323:37"><name pos:start="323:31" pos:end="323:37">key_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="324:5" pos:end="327:5"><if pos:start="324:5" pos:end="327:5">if <condition pos:start="324:8" pos:end="324:19">(<expr pos:start="324:9" pos:end="324:18"><name pos:start="324:9" pos:end="324:10">in</name> <operator pos:start="324:12" pos:end="324:13">==</operator> <name pos:start="324:15" pos:end="324:18">NULL</name></expr>)</condition> <block pos:start="324:21" pos:end="327:5">{<block_content pos:start="325:9" pos:end="326:22">
        <expr_stmt pos:start="325:9" pos:end="325:62"><expr pos:start="325:9" pos:end="325:61"><call pos:start="325:9" pos:end="325:61"><name pos:start="325:9" pos:end="325:19">EST_LOG_ERR</name><argument_list pos:start="325:20" pos:end="325:61">(<argument pos:start="325:21" pos:end="325:60"><expr pos:start="325:21" pos:end="325:60"><literal type="string" pos:start="325:21" pos:end="325:60">"Unable to open the provided key buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="326:9" pos:end="326:22">return <expr pos:start="326:16" pos:end="326:21"><operator pos:start="326:16" pos:end="326:16">(</operator><name pos:start="326:17" pos:end="326:20">NULL</name><operator pos:start="326:21" pos:end="326:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch pos:start="329:5" pos:end="341:5">switch <condition pos:start="329:12" pos:end="329:19">(<expr pos:start="329:13" pos:end="329:18"><name pos:start="329:13" pos:end="329:18">format</name></expr>)</condition> <block pos:start="329:21" pos:end="341:5">{<block_content pos:start="330:5" pos:end="340:14">
    <case pos:start="330:5" pos:end="330:24">case <expr pos:start="330:10" pos:end="330:23"><name pos:start="330:10" pos:end="330:23">EST_FORMAT_PEM</name></expr>:</case>
        <expr_stmt pos:start="331:9" pos:end="331:61"><expr pos:start="331:9" pos:end="331:60"><name pos:start="331:9" pos:end="331:12">pkey</name> <operator pos:start="331:14" pos:end="331:14">=</operator> <call pos:start="331:16" pos:end="331:60"><name pos:start="331:16" pos:end="331:38">PEM_read_bio_PrivateKey</name><argument_list pos:start="331:39" pos:end="331:60">(<argument pos:start="331:40" pos:end="331:41"><expr pos:start="331:40" pos:end="331:41"><name pos:start="331:40" pos:end="331:41">in</name></expr></argument>, <argument pos:start="331:44" pos:end="331:47"><expr pos:start="331:44" pos:end="331:47"><name pos:start="331:44" pos:end="331:47">NULL</name></expr></argument>, <argument pos:start="331:50" pos:end="331:53"><expr pos:start="331:50" pos:end="331:53"><name pos:start="331:50" pos:end="331:53">NULL</name></expr></argument>, <argument pos:start="331:56" pos:end="331:59"><expr pos:start="331:56" pos:end="331:59"><name pos:start="331:56" pos:end="331:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="332:9" pos:end="332:14">break;</break>
    <case pos:start="333:5" pos:end="333:24">case <expr pos:start="333:10" pos:end="333:23"><name pos:start="333:10" pos:end="333:23">EST_FORMAT_DER</name></expr>:</case>
        <expr_stmt pos:start="334:9" pos:end="334:44"><expr pos:start="334:9" pos:end="334:43"><name pos:start="334:9" pos:end="334:12">pkey</name> <operator pos:start="334:14" pos:end="334:14">=</operator> <call pos:start="334:16" pos:end="334:43"><name pos:start="334:16" pos:end="334:33">d2i_PrivateKey_bio</name><argument_list pos:start="334:34" pos:end="334:43">(<argument pos:start="334:35" pos:end="334:36"><expr pos:start="334:35" pos:end="334:36"><name pos:start="334:35" pos:end="334:36">in</name></expr></argument>, <argument pos:start="334:39" pos:end="334:42"><expr pos:start="334:39" pos:end="334:42"><name pos:start="334:39" pos:end="334:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="335:9" pos:end="335:14">break;</break>
    <default pos:start="336:5" pos:end="336:12">default:</default>
        <expr_stmt pos:start="337:9" pos:end="337:42"><expr pos:start="337:9" pos:end="337:41"><call pos:start="337:9" pos:end="337:41"><name pos:start="337:9" pos:end="337:19">EST_LOG_ERR</name><argument_list pos:start="337:20" pos:end="337:41">(<argument pos:start="337:21" pos:end="337:40"><expr pos:start="337:21" pos:end="337:40"><literal type="string" pos:start="337:21" pos:end="337:40">"Invalid key format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="338:9" pos:end="338:21"><expr pos:start="338:9" pos:end="338:20"><call pos:start="338:9" pos:end="338:20"><name pos:start="338:9" pos:end="338:16">BIO_free</name><argument_list pos:start="338:17" pos:end="338:20">(<argument pos:start="338:18" pos:end="338:19"><expr pos:start="338:18" pos:end="338:19"><name pos:start="338:18" pos:end="338:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="339:9" pos:end="339:20">return <expr pos:start="339:16" pos:end="339:19"><name pos:start="339:16" pos:end="339:19">NULL</name></expr>;</return>
        <break pos:start="340:9" pos:end="340:14">break;</break>
    </block_content>}</block></switch>
    <expr_stmt pos:start="342:5" pos:end="342:17"><expr pos:start="342:5" pos:end="342:16"><call pos:start="342:5" pos:end="342:16"><name pos:start="342:5" pos:end="342:12">BIO_free</name><argument_list pos:start="342:13" pos:end="342:16">(<argument pos:start="342:14" pos:end="342:15"><expr pos:start="342:14" pos:end="342:15"><name pos:start="342:14" pos:end="342:15">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="344:5" pos:end="344:18">return <expr pos:start="344:12" pos:end="344:17"><operator pos:start="344:12" pos:end="344:12">(</operator><name pos:start="344:13" pos:end="344:16">pkey</name><operator pos:start="344:17" pos:end="344:17">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="346:1" pos:end="356:3">/*
 * Converts from PEM to pkcs7 encoded certs.  Optionally
 * applies base64 encoding to the output.  This is used
 * when creating the cached cacerts response.  The returned
 * BIO contains the PKCS7 encoded certs.  The response
 * can optionally be base64 encoded by passing in a
 * non-zero value for the do_base_64 argument.  The caller
 * of this function should invoke BIO_free_all() on the
 * return value to avoid memory leaks.  Note, BIO_free() 
 * will not be sufficient.
 */</comment>
<function pos:start="357:1" pos:end="457:1"><type pos:start="357:1" pos:end="357:12"><specifier pos:start="357:1" pos:end="357:6">static</specifier> <name pos:start="357:8" pos:end="357:10">BIO</name> <modifier pos:start="357:12" pos:end="357:12">*</modifier></type> <name pos:start="357:14" pos:end="357:32">est_get_certs_pkcs7</name> <parameter_list pos:start="357:34" pos:end="357:58">(<parameter pos:start="357:35" pos:end="357:41"><decl pos:start="357:35" pos:end="357:41"><type pos:start="357:35" pos:end="357:41"><name pos:start="357:35" pos:end="357:37">BIO</name> <modifier pos:start="357:39" pos:end="357:39">*</modifier></type><name pos:start="357:40" pos:end="357:41">in</name></decl></parameter>, <parameter pos:start="357:44" pos:end="357:57"><decl pos:start="357:44" pos:end="357:57"><type pos:start="357:44" pos:end="357:57"><name pos:start="357:44" pos:end="357:46">int</name></type> <name pos:start="357:48" pos:end="357:57">do_base_64</name></decl></parameter>)</parameter_list>
<block pos:start="358:1" pos:end="457:1">{<block_content pos:start="359:5" pos:end="456:15">
    <expr_stmt pos:start="359:5" pos:end="359:39"><expr pos:start="359:5" pos:end="359:38"><call pos:start="359:5" pos:end="359:18"><name pos:start="359:5" pos:end="359:12">STACK_OF</name><argument_list pos:start="359:13" pos:end="359:18">(<argument pos:start="359:14" pos:end="359:17"><expr pos:start="359:14" pos:end="359:17"><name pos:start="359:14" pos:end="359:17">X509</name></expr></argument>)</argument_list></call> <operator pos:start="359:20" pos:end="359:20">*</operator> <name pos:start="359:22" pos:end="359:31">cert_stack</name> <operator pos:start="359:33" pos:end="359:33">=</operator> <name pos:start="359:35" pos:end="359:38">NULL</name></expr>;</expr_stmt>
    <decl_stmt pos:start="360:5" pos:end="360:29"><decl pos:start="360:5" pos:end="360:28"><type pos:start="360:5" pos:end="360:18"><name pos:start="360:5" pos:end="360:16">PKCS7_SIGNED</name> <modifier pos:start="360:18" pos:end="360:18">*</modifier></type><name pos:start="360:19" pos:end="360:21">p7s</name> <init pos:start="360:23" pos:end="360:28">= <expr pos:start="360:25" pos:end="360:28"><name pos:start="360:25" pos:end="360:28">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="361:5" pos:end="361:21"><decl pos:start="361:5" pos:end="361:20"><type pos:start="361:5" pos:end="361:11"><name pos:start="361:5" pos:end="361:9">PKCS7</name> <modifier pos:start="361:11" pos:end="361:11">*</modifier></type><name pos:start="361:12" pos:end="361:13">p7</name> <init pos:start="361:15" pos:end="361:20">= <expr pos:start="361:17" pos:end="361:20"><name pos:start="361:17" pos:end="361:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="362:5" pos:end="362:20"><decl pos:start="362:5" pos:end="362:19"><type pos:start="362:5" pos:end="362:9"><name pos:start="362:5" pos:end="362:7">BIO</name> <modifier pos:start="362:9" pos:end="362:9">*</modifier></type><name pos:start="362:10" pos:end="362:12">out</name> <init pos:start="362:14" pos:end="362:19">= <expr pos:start="362:16" pos:end="362:19"><name pos:start="362:16" pos:end="362:19">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="363:5" pos:end="363:13"><decl pos:start="363:5" pos:end="363:12"><type pos:start="363:5" pos:end="363:9"><name pos:start="363:5" pos:end="363:7">BIO</name> <modifier pos:start="363:9" pos:end="363:9">*</modifier></type><name pos:start="363:10" pos:end="363:12">b64</name></decl>;</decl_stmt>
    <decl_stmt pos:start="364:5" pos:end="364:19"><decl pos:start="364:5" pos:end="364:18"><type pos:start="364:5" pos:end="364:7"><name pos:start="364:5" pos:end="364:7">int</name></type> <name pos:start="364:9" pos:end="364:14">buflen</name> <init pos:start="364:16" pos:end="364:18">= <expr pos:start="364:18" pos:end="364:18"><literal type="number" pos:start="364:18" pos:end="364:18">0</literal></expr></init></decl>;</decl_stmt>


    <comment type="block" pos:start="367:5" pos:end="369:7">/*
     * Create a PKCS7 object 
     */</comment>
    <if_stmt pos:start="370:5" pos:end="373:5"><if pos:start="370:5" pos:end="373:5">if <condition pos:start="370:8" pos:end="370:35">(<expr pos:start="370:9" pos:end="370:34"><operator pos:start="370:9" pos:end="370:9">(</operator><name pos:start="370:10" pos:end="370:11">p7</name> <operator pos:start="370:13" pos:end="370:13">=</operator> <call pos:start="370:15" pos:end="370:25"><name pos:start="370:15" pos:end="370:23">PKCS7_new</name><argument_list pos:start="370:24" pos:end="370:25">()</argument_list></call><operator pos:start="370:26" pos:end="370:26">)</operator> <operator pos:start="370:28" pos:end="370:29">==</operator> <name pos:start="370:31" pos:end="370:34">NULL</name></expr>)</condition> <block pos:start="370:37" pos:end="373:5">{<block_content pos:start="371:9" pos:end="372:21">
        <expr_stmt pos:start="371:9" pos:end="371:40"><expr pos:start="371:9" pos:end="371:39"><call pos:start="371:9" pos:end="371:39"><name pos:start="371:9" pos:end="371:19">EST_LOG_ERR</name><argument_list pos:start="371:20" pos:end="371:39">(<argument pos:start="371:21" pos:end="371:38"><expr pos:start="371:21" pos:end="371:38"><literal type="string" pos:start="371:21" pos:end="371:38">"pkcs7_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto pos:start="372:9" pos:end="372:21">goto <name pos:start="372:14" pos:end="372:20">cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="374:5" pos:end="376:7">/*
     * Create the PKCS7 signed object
     */</comment>
    <if_stmt pos:start="377:5" pos:end="380:5"><if pos:start="377:5" pos:end="380:5">if <condition pos:start="377:8" pos:end="377:43">(<expr pos:start="377:9" pos:end="377:42"><operator pos:start="377:9" pos:end="377:9">(</operator><name pos:start="377:10" pos:end="377:12">p7s</name> <operator pos:start="377:14" pos:end="377:14">=</operator> <call pos:start="377:16" pos:end="377:33"><name pos:start="377:16" pos:end="377:31">PKCS7_SIGNED_new</name><argument_list pos:start="377:32" pos:end="377:33">()</argument_list></call><operator pos:start="377:34" pos:end="377:34">)</operator> <operator pos:start="377:36" pos:end="377:37">==</operator> <name pos:start="377:39" pos:end="377:42">NULL</name></expr>)</condition> <block pos:start="377:45" pos:end="380:5">{<block_content pos:start="378:9" pos:end="379:21">
        <expr_stmt pos:start="378:9" pos:end="378:47"><expr pos:start="378:9" pos:end="378:46"><call pos:start="378:9" pos:end="378:46"><name pos:start="378:9" pos:end="378:19">EST_LOG_ERR</name><argument_list pos:start="378:20" pos:end="378:46">(<argument pos:start="378:21" pos:end="378:45"><expr pos:start="378:21" pos:end="378:45"><literal type="string" pos:start="378:21" pos:end="378:45">"pkcs7_signed_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto pos:start="379:9" pos:end="379:21">goto <name pos:start="379:14" pos:end="379:20">cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="381:5" pos:end="383:7">/*
     * Set the version
     */</comment>
    <if_stmt pos:start="384:5" pos:end="387:5"><if pos:start="384:5" pos:end="387:5">if <condition pos:start="384:8" pos:end="384:43">(<expr pos:start="384:9" pos:end="384:42"><operator pos:start="384:9" pos:end="384:9">!</operator><call pos:start="384:10" pos:end="384:42"><name pos:start="384:10" pos:end="384:25">ASN1_INTEGER_set</name><argument_list pos:start="384:26" pos:end="384:42">(<argument pos:start="384:27" pos:end="384:38"><expr pos:start="384:27" pos:end="384:38"><name pos:start="384:27" pos:end="384:38"><name pos:start="384:27" pos:end="384:29">p7s</name><operator pos:start="384:30" pos:end="384:31">-&gt;</operator><name pos:start="384:32" pos:end="384:38">version</name></name></expr></argument>, <argument pos:start="384:41" pos:end="384:41"><expr pos:start="384:41" pos:end="384:41"><literal type="number" pos:start="384:41" pos:end="384:41">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="384:45" pos:end="387:5">{<block_content pos:start="385:9" pos:end="386:21">
        <expr_stmt pos:start="385:9" pos:end="385:47"><expr pos:start="385:9" pos:end="385:46"><call pos:start="385:9" pos:end="385:46"><name pos:start="385:9" pos:end="385:19">EST_LOG_ERR</name><argument_list pos:start="385:20" pos:end="385:46">(<argument pos:start="385:21" pos:end="385:45"><expr pos:start="385:21" pos:end="385:45"><literal type="string" pos:start="385:21" pos:end="385:45">"ASN1_integer_set failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto pos:start="386:9" pos:end="386:21">goto <name pos:start="386:14" pos:end="386:20">cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="389:5" pos:end="391:7">/*
     * Create a stack of X509 certs
     */</comment>
    <if_stmt pos:start="392:5" pos:end="395:5"><if pos:start="392:5" pos:end="395:5">if <condition pos:start="392:8" pos:end="392:50">(<expr pos:start="392:9" pos:end="392:49"><operator pos:start="392:9" pos:end="392:9">(</operator><name pos:start="392:10" pos:end="392:19">cert_stack</name> <operator pos:start="392:21" pos:end="392:21">=</operator> <call pos:start="392:23" pos:end="392:40"><name pos:start="392:23" pos:end="392:38">sk_X509_new_null</name><argument_list pos:start="392:39" pos:end="392:40">()</argument_list></call><operator pos:start="392:41" pos:end="392:41">)</operator> <operator pos:start="392:43" pos:end="392:44">==</operator> <name pos:start="392:46" pos:end="392:49">NULL</name></expr>)</condition> <block pos:start="392:52" pos:end="395:5">{<block_content pos:start="393:9" pos:end="394:21">
        <expr_stmt pos:start="393:9" pos:end="393:43"><expr pos:start="393:9" pos:end="393:42"><call pos:start="393:9" pos:end="393:42"><name pos:start="393:9" pos:end="393:19">EST_LOG_ERR</name><argument_list pos:start="393:20" pos:end="393:42">(<argument pos:start="393:21" pos:end="393:41"><expr pos:start="393:21" pos:end="393:41"><literal type="string" pos:start="393:21" pos:end="393:41">"stack malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto pos:start="394:9" pos:end="394:21">goto <name pos:start="394:14" pos:end="394:20">cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="397:5" pos:end="399:7">/*
     * Populate the cert stack
     */</comment>
    <if_stmt pos:start="400:5" pos:end="404:5"><if pos:start="400:5" pos:end="404:5">if <condition pos:start="400:8" pos:end="400:51">(<expr pos:start="400:9" pos:end="400:50"><call pos:start="400:9" pos:end="400:46"><name pos:start="400:9" pos:end="400:30">est_add_certs_from_BIO</name><argument_list pos:start="400:31" pos:end="400:46">(<argument pos:start="400:32" pos:end="400:41"><expr pos:start="400:32" pos:end="400:41"><name pos:start="400:32" pos:end="400:41">cert_stack</name></expr></argument>, <argument pos:start="400:44" pos:end="400:45"><expr pos:start="400:44" pos:end="400:45"><name pos:start="400:44" pos:end="400:45">in</name></expr></argument>)</argument_list></call> <operator pos:start="400:48" pos:end="400:48">&lt;</operator> <literal type="number" pos:start="400:50" pos:end="400:50">0</literal></expr>)</condition> <block pos:start="400:53" pos:end="404:5">{<block_content pos:start="401:9" pos:end="403:21">
        <expr_stmt pos:start="401:9" pos:end="401:51"><expr pos:start="401:9" pos:end="401:50"><call pos:start="401:9" pos:end="401:50"><name pos:start="401:9" pos:end="401:19">EST_LOG_ERR</name><argument_list pos:start="401:20" pos:end="401:50">(<argument pos:start="401:21" pos:end="401:49"><expr pos:start="401:21" pos:end="401:49"><literal type="string" pos:start="401:21" pos:end="401:49">"Unable to load certificates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="402:9" pos:end="402:31"><expr pos:start="402:9" pos:end="402:30"><call pos:start="402:9" pos:end="402:30"><name pos:start="402:9" pos:end="402:28">ossl_dump_ssl_errors</name><argument_list pos:start="402:29" pos:end="402:30">()</argument_list></call></expr>;</expr_stmt>
	<goto pos:start="403:9" pos:end="403:21">goto <name pos:start="403:14" pos:end="403:20">cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="406:5" pos:end="408:7">/*
     * Create the BIO which will receive the output
     */</comment>
    <expr_stmt pos:start="409:5" pos:end="409:31"><expr pos:start="409:5" pos:end="409:30"><name pos:start="409:5" pos:end="409:7">out</name> <operator pos:start="409:9" pos:end="409:9">=</operator> <call pos:start="409:11" pos:end="409:30"><name pos:start="409:11" pos:end="409:17">BIO_new</name><argument_list pos:start="409:18" pos:end="409:30">(<argument pos:start="409:19" pos:end="409:29"><expr pos:start="409:19" pos:end="409:29"><call pos:start="409:19" pos:end="409:29"><name pos:start="409:19" pos:end="409:27">BIO_s_mem</name><argument_list pos:start="409:28" pos:end="409:29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="410:5" pos:end="413:5"><if pos:start="410:5" pos:end="413:5">if <condition pos:start="410:8" pos:end="410:13">(<expr pos:start="410:9" pos:end="410:12"><operator pos:start="410:9" pos:end="410:9">!</operator><name pos:start="410:10" pos:end="410:12">out</name></expr>)</condition> <block pos:start="410:15" pos:end="413:5">{<block_content pos:start="411:9" pos:end="412:21">
        <expr_stmt pos:start="411:9" pos:end="411:38"><expr pos:start="411:9" pos:end="411:37"><call pos:start="411:9" pos:end="411:37"><name pos:start="411:9" pos:end="411:19">EST_LOG_ERR</name><argument_list pos:start="411:20" pos:end="411:37">(<argument pos:start="411:21" pos:end="411:36"><expr pos:start="411:21" pos:end="411:36"><literal type="string" pos:start="411:21" pos:end="411:36">"BIO_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto pos:start="412:9" pos:end="412:21">goto <name pos:start="412:14" pos:end="412:20">cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="415:5" pos:end="417:7">/*
     * Add the base64 encoder if needed
     */</comment>
    <if_stmt pos:start="418:5" pos:end="426:5"><if pos:start="418:5" pos:end="426:5">if <condition pos:start="418:8" pos:end="418:19">(<expr pos:start="418:9" pos:end="418:18"><name pos:start="418:9" pos:end="418:18">do_base_64</name></expr>)</condition> <block pos:start="418:21" pos:end="426:5">{<block_content pos:start="419:9" pos:end="425:33">
	<expr_stmt pos:start="419:9" pos:end="419:38"><expr pos:start="419:9" pos:end="419:37"><name pos:start="419:9" pos:end="419:11">b64</name> <operator pos:start="419:13" pos:end="419:13">=</operator> <call pos:start="419:15" pos:end="419:37"><name pos:start="419:15" pos:end="419:21">BIO_new</name><argument_list pos:start="419:22" pos:end="419:37">(<argument pos:start="419:23" pos:end="419:36"><expr pos:start="419:23" pos:end="419:36"><call pos:start="419:23" pos:end="419:36"><name pos:start="419:23" pos:end="419:34">BIO_f_base64</name><argument_list pos:start="419:35" pos:end="419:36">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="420:9" pos:end="424:9"><if pos:start="420:9" pos:end="424:9">if <condition pos:start="420:12" pos:end="420:24">(<expr pos:start="420:13" pos:end="420:23"><name pos:start="420:13" pos:end="420:15">b64</name> <operator pos:start="420:17" pos:end="420:18">==</operator> <name pos:start="420:20" pos:end="420:23">NULL</name></expr>)</condition> <block pos:start="420:26" pos:end="424:9">{<block_content pos:start="421:13" pos:end="423:25">
            <expr_stmt pos:start="421:13" pos:end="421:80"><expr pos:start="421:13" pos:end="421:79"><call pos:start="421:13" pos:end="421:79"><name pos:start="421:13" pos:end="421:23">EST_LOG_ERR</name><argument_list pos:start="421:24" pos:end="421:79">(<argument pos:start="421:25" pos:end="421:78"><expr pos:start="421:25" pos:end="421:78"><literal type="string" pos:start="421:25" pos:end="421:78">"BIO_new failed while attempting to create base64 BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="422:13" pos:end="422:35"><expr pos:start="422:13" pos:end="422:34"><call pos:start="422:13" pos:end="422:34"><name pos:start="422:13" pos:end="422:32">ossl_dump_ssl_errors</name><argument_list pos:start="422:33" pos:end="422:34">()</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="423:13" pos:end="423:25">goto <name pos:start="423:18" pos:end="423:24">cleanup</name>;</goto>
        </block_content>}</block></if></if_stmt>    
	<expr_stmt pos:start="425:9" pos:end="425:33"><expr pos:start="425:9" pos:end="425:32"><name pos:start="425:9" pos:end="425:11">out</name> <operator pos:start="425:13" pos:end="425:13">=</operator> <call pos:start="425:15" pos:end="425:32"><name pos:start="425:15" pos:end="425:22">BIO_push</name><argument_list pos:start="425:23" pos:end="425:32">(<argument pos:start="425:24" pos:end="425:26"><expr pos:start="425:24" pos:end="425:26"><name pos:start="425:24" pos:end="425:26">b64</name></expr></argument>, <argument pos:start="425:29" pos:end="425:31"><expr pos:start="425:29" pos:end="425:31"><name pos:start="425:29" pos:end="425:31">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="428:5" pos:end="428:45"><expr pos:start="428:5" pos:end="428:44"><name pos:start="428:5" pos:end="428:12"><name pos:start="428:5" pos:end="428:6">p7</name><operator pos:start="428:7" pos:end="428:8">-&gt;</operator><name pos:start="428:9" pos:end="428:12">type</name></name> <operator pos:start="428:14" pos:end="428:14">=</operator> <call pos:start="428:16" pos:end="428:44"><name pos:start="428:16" pos:end="428:26">OBJ_nid2obj</name><argument_list pos:start="428:27" pos:end="428:44">(<argument pos:start="428:28" pos:end="428:43"><expr pos:start="428:28" pos:end="428:43"><name pos:start="428:28" pos:end="428:43">NID_pkcs7_signed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="429:5" pos:end="429:21"><expr pos:start="429:5" pos:end="429:20"><name pos:start="429:5" pos:end="429:14"><name pos:start="429:5" pos:end="429:6">p7</name><operator pos:start="429:7" pos:end="429:8">-&gt;</operator><name pos:start="429:9" pos:end="429:9">d</name><operator pos:start="429:10" pos:end="429:10">.</operator><name pos:start="429:11" pos:end="429:14">sign</name></name> <operator pos:start="429:16" pos:end="429:16">=</operator> <name pos:start="429:18" pos:end="429:20">p7s</name></expr>;</expr_stmt>
    <expr_stmt pos:start="430:5" pos:end="430:54"><expr pos:start="430:5" pos:end="430:53"><name pos:start="430:5" pos:end="430:23"><name pos:start="430:5" pos:end="430:7">p7s</name><operator pos:start="430:8" pos:end="430:9">-&gt;</operator><name pos:start="430:10" pos:end="430:17">contents</name><operator pos:start="430:18" pos:end="430:19">-&gt;</operator><name pos:start="430:20" pos:end="430:23">type</name></name> <operator pos:start="430:25" pos:end="430:25">=</operator> <call pos:start="430:27" pos:end="430:53"><name pos:start="430:27" pos:end="430:37">OBJ_nid2obj</name><argument_list pos:start="430:38" pos:end="430:53">(<argument pos:start="430:39" pos:end="430:52"><expr pos:start="430:39" pos:end="430:52"><name pos:start="430:39" pos:end="430:52">NID_pkcs7_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="431:5" pos:end="431:27"><expr pos:start="431:5" pos:end="431:26"><name pos:start="431:5" pos:end="431:13"><name pos:start="431:5" pos:end="431:7">p7s</name><operator pos:start="431:8" pos:end="431:9">-&gt;</operator><name pos:start="431:10" pos:end="431:13">cert</name></name> <operator pos:start="431:15" pos:end="431:15">=</operator> <name pos:start="431:17" pos:end="431:26">cert_stack</name></expr>;</expr_stmt>

    <comment type="block" pos:start="433:5" pos:end="435:7">/*
     * Convert from PEM to PKCS7
     */</comment>
    <expr_stmt pos:start="436:5" pos:end="436:36"><expr pos:start="436:5" pos:end="436:35"><name pos:start="436:5" pos:end="436:10">buflen</name> <operator pos:start="436:12" pos:end="436:12">=</operator> <call pos:start="436:14" pos:end="436:35"><name pos:start="436:14" pos:end="436:26">i2d_PKCS7_bio</name><argument_list pos:start="436:27" pos:end="436:35">(<argument pos:start="436:28" pos:end="436:30"><expr pos:start="436:28" pos:end="436:30"><name pos:start="436:28" pos:end="436:30">out</name></expr></argument>, <argument pos:start="436:33" pos:end="436:34"><expr pos:start="436:33" pos:end="436:34"><name pos:start="436:33" pos:end="436:34">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="437:5" pos:end="443:5"><if pos:start="437:5" pos:end="443:5">if <condition pos:start="437:8" pos:end="437:16">(<expr pos:start="437:9" pos:end="437:15"><operator pos:start="437:9" pos:end="437:9">!</operator><name pos:start="437:10" pos:end="437:15">buflen</name></expr>)</condition> <block pos:start="437:18" pos:end="443:5">{<block_content pos:start="438:9" pos:end="442:21">
        <expr_stmt pos:start="438:9" pos:end="438:50"><expr pos:start="438:9" pos:end="438:49"><call pos:start="438:9" pos:end="438:49"><name pos:start="438:9" pos:end="438:19">EST_LOG_ERR</name><argument_list pos:start="438:20" pos:end="438:49">(<argument pos:start="438:21" pos:end="438:48"><expr pos:start="438:21" pos:end="438:48"><literal type="string" pos:start="438:21" pos:end="438:48">"PEM_write_bio_PKCS7 failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="439:9" pos:end="439:31"><expr pos:start="439:9" pos:end="439:30"><call pos:start="439:9" pos:end="439:30"><name pos:start="439:9" pos:end="439:28">ossl_dump_ssl_errors</name><argument_list pos:start="439:29" pos:end="439:30">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="440:9" pos:end="440:26"><expr pos:start="440:9" pos:end="440:25"><call pos:start="440:9" pos:end="440:25"><name pos:start="440:9" pos:end="440:20">BIO_free_all</name><argument_list pos:start="440:21" pos:end="440:25">(<argument pos:start="440:22" pos:end="440:24"><expr pos:start="440:22" pos:end="440:24"><name pos:start="440:22" pos:end="440:24">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="441:9" pos:end="441:19"><expr pos:start="441:9" pos:end="441:18"><name pos:start="441:9" pos:end="441:11">out</name> <operator pos:start="441:13" pos:end="441:13">=</operator> <name pos:start="441:15" pos:end="441:18">NULL</name></expr>;</expr_stmt>
	<goto pos:start="442:9" pos:end="442:21">goto <name pos:start="442:14" pos:end="442:20">cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="444:5" pos:end="444:25"><expr pos:start="444:5" pos:end="444:24"><operator pos:start="444:5" pos:end="444:5">(</operator><name pos:start="444:6" pos:end="444:9">void</name><operator pos:start="444:10" pos:end="444:10">)</operator><call pos:start="444:11" pos:end="444:24"><name pos:start="444:11" pos:end="444:19">BIO_flush</name><argument_list pos:start="444:20" pos:end="444:24">(<argument pos:start="444:21" pos:end="444:23"><expr pos:start="444:21" pos:end="444:23"><name pos:start="444:21" pos:end="444:23">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="446:1" pos:end="446:8"><name pos:start="446:1" pos:end="446:7">cleanup</name>:</label>
    <comment type="block" pos:start="447:5" pos:end="451:7">/* 
     * Only need to cleanup p7.  This frees up the p7s and
     * cert_stack allocations for us since these are linked
     * to the p7.
     */</comment>
    <if_stmt pos:start="452:5" pos:end="454:5"><if pos:start="452:5" pos:end="454:5">if <condition pos:start="452:8" pos:end="452:11">(<expr pos:start="452:9" pos:end="452:10"><name pos:start="452:9" pos:end="452:10">p7</name></expr>)</condition> <block pos:start="452:13" pos:end="454:5">{<block_content pos:start="453:9" pos:end="453:23">
        <expr_stmt pos:start="453:9" pos:end="453:23"><expr pos:start="453:9" pos:end="453:22"><call pos:start="453:9" pos:end="453:22"><name pos:start="453:9" pos:end="453:18">PKCS7_free</name><argument_list pos:start="453:19" pos:end="453:22">(<argument pos:start="453:20" pos:end="453:21"><expr pos:start="453:20" pos:end="453:21"><name pos:start="453:20" pos:end="453:21">p7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return pos:start="456:5" pos:end="456:15">return <expr pos:start="456:12" pos:end="456:14"><name pos:start="456:12" pos:end="456:14">out</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="458:1" pos:end="466:3">/*
 * Takes a raw char array containg the CA certificates, reads the data
 * in and loads the certificates on to the context as pkcs7 certs.  This is
 * stored on the EST context and used to respond to the /cacerts request,
 * which requires PKCS7 encoding.
 *
 * This function also loads the x509 store on the context used to
 * verify the peer.
 */</comment>
<function pos:start="467:1" pos:end="517:1"><type pos:start="467:1" pos:end="467:9"><name pos:start="467:1" pos:end="467:9">EST_ERROR</name></type> <name pos:start="467:11" pos:end="467:27">est_load_ca_certs</name> <parameter_list pos:start="467:29" pos:end="467:72">(<parameter pos:start="467:30" pos:end="467:41"><decl pos:start="467:30" pos:end="467:41"><type pos:start="467:30" pos:end="467:41"><name pos:start="467:30" pos:end="467:36">EST_CTX</name> <modifier pos:start="467:38" pos:end="467:38">*</modifier></type><name pos:start="467:39" pos:end="467:41">ctx</name></decl></parameter>, <parameter pos:start="467:44" pos:end="467:61"><decl pos:start="467:44" pos:end="467:61"><type pos:start="467:44" pos:end="467:61"><name pos:start="467:44" pos:end="467:51">unsigned</name> <name pos:start="467:53" pos:end="467:56">char</name> <modifier pos:start="467:58" pos:end="467:58">*</modifier></type><name pos:start="467:59" pos:end="467:61">raw</name></decl></parameter>, <parameter pos:start="467:64" pos:end="467:71"><decl pos:start="467:64" pos:end="467:71"><type pos:start="467:64" pos:end="467:71"><name pos:start="467:64" pos:end="467:66">int</name></type> <name pos:start="467:68" pos:end="467:71">size</name></decl></parameter>)</parameter_list>
<block pos:start="468:1" pos:end="517:1">{<block_content pos:start="469:5" pos:end="516:26">
    <decl_stmt pos:start="469:5" pos:end="469:24"><decl pos:start="469:5" pos:end="469:23"><type pos:start="469:5" pos:end="469:9"><name pos:start="469:5" pos:end="469:7">BIO</name> <modifier pos:start="469:9" pos:end="469:9">*</modifier></type><name pos:start="469:10" pos:end="469:16">cacerts</name> <init pos:start="469:18" pos:end="469:23">= <expr pos:start="469:20" pos:end="469:23"><name pos:start="469:20" pos:end="469:23">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="470:5" pos:end="470:12"><decl pos:start="470:5" pos:end="470:11"><type pos:start="470:5" pos:end="470:9"><name pos:start="470:5" pos:end="470:7">BIO</name> <modifier pos:start="470:9" pos:end="470:9">*</modifier></type><name pos:start="470:10" pos:end="470:11">in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="471:5" pos:end="471:26"><decl pos:start="471:5" pos:end="471:25"><type pos:start="471:5" pos:end="471:19"><name pos:start="471:5" pos:end="471:12">unsigned</name> <name pos:start="471:14" pos:end="471:17">char</name> <modifier pos:start="471:19" pos:end="471:19">*</modifier></type><name pos:start="471:20" pos:end="471:25">retval</name></decl>;</decl_stmt>

    <comment type="block" pos:start="473:5" pos:end="475:7">/*
     * Only the server and proxy modes may load the cacerts response
     */</comment>
    <if_stmt pos:start="476:5" pos:end="478:5"><if pos:start="476:5" pos:end="478:5">if <condition pos:start="476:8" pos:end="476:36">(<expr pos:start="476:9" pos:end="476:35"><name pos:start="476:9" pos:end="476:21"><name pos:start="476:9" pos:end="476:11">ctx</name><operator pos:start="476:12" pos:end="476:13">-&gt;</operator><name pos:start="476:14" pos:end="476:21">est_mode</name></name> <operator pos:start="476:23" pos:end="476:24">==</operator> <name pos:start="476:26" pos:end="476:35">EST_CLIENT</name></expr>)</condition> <block pos:start="476:38" pos:end="478:5">{<block_content pos:start="477:9" pos:end="477:32">
	<return pos:start="477:9" pos:end="477:32">return <expr pos:start="477:16" pos:end="477:31"><name pos:start="477:16" pos:end="477:31">EST_ERR_BAD_MODE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="480:5" pos:end="480:36"><expr pos:start="480:5" pos:end="480:35"><name pos:start="480:5" pos:end="480:6">in</name> <operator pos:start="480:8" pos:end="480:8">=</operator> <call pos:start="480:10" pos:end="480:35"><name pos:start="480:10" pos:end="480:24">BIO_new_mem_buf</name><argument_list pos:start="480:25" pos:end="480:35">(<argument pos:start="480:26" pos:end="480:28"><expr pos:start="480:26" pos:end="480:28"><name pos:start="480:26" pos:end="480:28">raw</name></expr></argument>, <argument pos:start="480:31" pos:end="480:34"><expr pos:start="480:31" pos:end="480:34"><name pos:start="480:31" pos:end="480:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="481:5" pos:end="484:5"><if pos:start="481:5" pos:end="484:5">if <condition pos:start="481:8" pos:end="481:19">(<expr pos:start="481:9" pos:end="481:18"><name pos:start="481:9" pos:end="481:10">in</name> <operator pos:start="481:12" pos:end="481:13">==</operator> <name pos:start="481:15" pos:end="481:18">NULL</name></expr>)</condition> <block pos:start="481:21" pos:end="484:5">{<block_content pos:start="482:9" pos:end="483:38">
        <expr_stmt pos:start="482:9" pos:end="482:58"><expr pos:start="482:9" pos:end="482:57"><call pos:start="482:9" pos:end="482:57"><name pos:start="482:9" pos:end="482:19">EST_LOG_ERR</name><argument_list pos:start="482:20" pos:end="482:57">(<argument pos:start="482:21" pos:end="482:56"><expr pos:start="482:21" pos:end="482:56"><literal type="string" pos:start="482:21" pos:end="482:56">"Unable to open the raw cert buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="483:9" pos:end="483:38">return <expr pos:start="483:16" pos:end="483:37"><operator pos:start="483:16" pos:end="483:16">(</operator><name pos:start="483:17" pos:end="483:36">EST_ERR_LOAD_CACERTS</name><operator pos:start="483:37" pos:end="483:37">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="486:5" pos:end="490:7">/*
     * convert the CA certs to PKCS7 encoded char array
     * This is used by an EST server to respond to the
     * cacerts request.
     */</comment>
    <expr_stmt pos:start="491:5" pos:end="491:41"><expr pos:start="491:5" pos:end="491:40"><name pos:start="491:5" pos:end="491:11">cacerts</name> <operator pos:start="491:13" pos:end="491:13">=</operator> <call pos:start="491:15" pos:end="491:40"><name pos:start="491:15" pos:end="491:33">est_get_certs_pkcs7</name><argument_list pos:start="491:34" pos:end="491:40">(<argument pos:start="491:35" pos:end="491:36"><expr pos:start="491:35" pos:end="491:36"><name pos:start="491:35" pos:end="491:36">in</name></expr></argument>, <argument pos:start="491:39" pos:end="491:39"><expr pos:start="491:39" pos:end="491:39"><literal type="number" pos:start="491:39" pos:end="491:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="492:5" pos:end="496:5"><if pos:start="492:5" pos:end="496:5">if <condition pos:start="492:8" pos:end="492:17">(<expr pos:start="492:9" pos:end="492:16"><operator pos:start="492:9" pos:end="492:9">!</operator><name pos:start="492:10" pos:end="492:16">cacerts</name></expr>)</condition> <block pos:start="492:19" pos:end="496:5">{<block_content pos:start="493:9" pos:end="495:38">
        <expr_stmt pos:start="493:9" pos:end="493:50"><expr pos:start="493:9" pos:end="493:49"><call pos:start="493:9" pos:end="493:49"><name pos:start="493:9" pos:end="493:19">EST_LOG_ERR</name><argument_list pos:start="493:20" pos:end="493:49">(<argument pos:start="493:21" pos:end="493:48"><expr pos:start="493:21" pos:end="493:48"><literal type="string" pos:start="493:21" pos:end="493:48">"est_get_certs_pkcs7 failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="494:9" pos:end="494:21"><expr pos:start="494:9" pos:end="494:20"><call pos:start="494:9" pos:end="494:20"><name pos:start="494:9" pos:end="494:16">BIO_free</name><argument_list pos:start="494:17" pos:end="494:20">(<argument pos:start="494:18" pos:end="494:19"><expr pos:start="494:18" pos:end="494:19"><name pos:start="494:18" pos:end="494:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="495:9" pos:end="495:38">return <expr pos:start="495:16" pos:end="495:37"><operator pos:start="495:16" pos:end="495:16">(</operator><name pos:start="495:17" pos:end="495:36">EST_ERR_LOAD_CACERTS</name><operator pos:start="495:37" pos:end="495:37">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="498:5" pos:end="498:73"><expr pos:start="498:5" pos:end="498:72"><name pos:start="498:5" pos:end="498:21"><name pos:start="498:5" pos:end="498:7">ctx</name><operator pos:start="498:8" pos:end="498:9">-&gt;</operator><name pos:start="498:10" pos:end="498:21">ca_certs_len</name></name> <operator pos:start="498:23" pos:end="498:23">=</operator> <operator pos:start="498:25" pos:end="498:25">(</operator><name pos:start="498:26" pos:end="498:28">int</name><operator pos:start="498:29" pos:end="498:29">)</operator> <call pos:start="498:31" pos:end="498:72"><name pos:start="498:31" pos:end="498:46">BIO_get_mem_data</name><argument_list pos:start="498:47" pos:end="498:72">(<argument pos:start="498:48" pos:end="498:54"><expr pos:start="498:48" pos:end="498:54"><name pos:start="498:48" pos:end="498:54">cacerts</name></expr></argument>, <argument pos:start="498:57" pos:end="498:71"><expr pos:start="498:57" pos:end="498:71"><operator pos:start="498:57" pos:end="498:57">(</operator><name pos:start="498:58" pos:end="498:61">char</name><operator pos:start="498:62" pos:end="498:62">*</operator><operator pos:start="498:63" pos:end="498:63">*</operator><operator pos:start="498:64" pos:end="498:64">)</operator><operator pos:start="498:65" pos:end="498:65">&amp;</operator><name pos:start="498:66" pos:end="498:71">retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="499:5" pos:end="504:5"><if pos:start="499:5" pos:end="504:5">if <condition pos:start="499:8" pos:end="499:31">(<expr pos:start="499:9" pos:end="499:30"><name pos:start="499:9" pos:end="499:25"><name pos:start="499:9" pos:end="499:11">ctx</name><operator pos:start="499:12" pos:end="499:13">-&gt;</operator><name pos:start="499:14" pos:end="499:25">ca_certs_len</name></name> <operator pos:start="499:27" pos:end="499:28">&lt;=</operator> <literal type="number" pos:start="499:30" pos:end="499:30">0</literal></expr>)</condition> <block pos:start="499:33" pos:end="504:5">{<block_content pos:start="500:9" pos:end="503:38">
        <expr_stmt pos:start="500:9" pos:end="500:49"><expr pos:start="500:9" pos:end="500:48"><call pos:start="500:9" pos:end="500:48"><name pos:start="500:9" pos:end="500:19">EST_LOG_ERR</name><argument_list pos:start="500:20" pos:end="500:48">(<argument pos:start="500:21" pos:end="500:47"><expr pos:start="500:21" pos:end="500:47"><literal type="string" pos:start="500:21" pos:end="500:47">"Failed to copy PKCS7 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="501:9" pos:end="501:30"><expr pos:start="501:9" pos:end="501:29"><call pos:start="501:9" pos:end="501:29"><name pos:start="501:9" pos:end="501:20">BIO_free_all</name><argument_list pos:start="501:21" pos:end="501:29">(<argument pos:start="501:22" pos:end="501:28"><expr pos:start="501:22" pos:end="501:28"><name pos:start="501:22" pos:end="501:28">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="502:9" pos:end="502:21"><expr pos:start="502:9" pos:end="502:20"><call pos:start="502:9" pos:end="502:20"><name pos:start="502:9" pos:end="502:16">BIO_free</name><argument_list pos:start="502:17" pos:end="502:20">(<argument pos:start="502:18" pos:end="502:19"><expr pos:start="502:18" pos:end="502:19"><name pos:start="502:18" pos:end="502:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="503:9" pos:end="503:38">return <expr pos:start="503:16" pos:end="503:37"><operator pos:start="503:16" pos:end="503:16">(</operator><name pos:start="503:17" pos:end="503:36">EST_ERR_LOAD_CACERTS</name><operator pos:start="503:37" pos:end="503:37">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="506:5" pos:end="506:46"><expr pos:start="506:5" pos:end="506:45"><name pos:start="506:5" pos:end="506:17"><name pos:start="506:5" pos:end="506:7">ctx</name><operator pos:start="506:8" pos:end="506:9">-&gt;</operator><name pos:start="506:10" pos:end="506:17">ca_certs</name></name> <operator pos:start="506:19" pos:end="506:19">=</operator> <call pos:start="506:21" pos:end="506:45"><name pos:start="506:21" pos:end="506:26">malloc</name><argument_list pos:start="506:27" pos:end="506:45">(<argument pos:start="506:28" pos:end="506:44"><expr pos:start="506:28" pos:end="506:44"><name pos:start="506:28" pos:end="506:44"><name pos:start="506:28" pos:end="506:30">ctx</name><operator pos:start="506:31" pos:end="506:32">-&gt;</operator><name pos:start="506:33" pos:end="506:44">ca_certs_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="507:5" pos:end="512:5"><if pos:start="507:5" pos:end="512:5">if <condition pos:start="507:8" pos:end="507:23">(<expr pos:start="507:9" pos:end="507:22"><operator pos:start="507:9" pos:end="507:9">!</operator><name pos:start="507:10" pos:end="507:22"><name pos:start="507:10" pos:end="507:12">ctx</name><operator pos:start="507:13" pos:end="507:14">-&gt;</operator><name pos:start="507:15" pos:end="507:22">ca_certs</name></name></expr>)</condition> <block pos:start="507:25" pos:end="512:5">{<block_content pos:start="508:9" pos:end="511:38">
        <expr_stmt pos:start="508:9" pos:end="508:37"><expr pos:start="508:9" pos:end="508:36"><call pos:start="508:9" pos:end="508:36"><name pos:start="508:9" pos:end="508:19">EST_LOG_ERR</name><argument_list pos:start="508:20" pos:end="508:36">(<argument pos:start="508:21" pos:end="508:35"><expr pos:start="508:21" pos:end="508:35"><literal type="string" pos:start="508:21" pos:end="508:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="509:9" pos:end="509:30"><expr pos:start="509:9" pos:end="509:29"><call pos:start="509:9" pos:end="509:29"><name pos:start="509:9" pos:end="509:20">BIO_free_all</name><argument_list pos:start="509:21" pos:end="509:29">(<argument pos:start="509:22" pos:end="509:28"><expr pos:start="509:22" pos:end="509:28"><name pos:start="509:22" pos:end="509:28">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="510:9" pos:end="510:21"><expr pos:start="510:9" pos:end="510:20"><call pos:start="510:9" pos:end="510:20"><name pos:start="510:9" pos:end="510:16">BIO_free</name><argument_list pos:start="510:17" pos:end="510:20">(<argument pos:start="510:18" pos:end="510:19"><expr pos:start="510:18" pos:end="510:19"><name pos:start="510:18" pos:end="510:19">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="511:9" pos:end="511:38">return <expr pos:start="511:16" pos:end="511:37"><operator pos:start="511:16" pos:end="511:16">(</operator><name pos:start="511:17" pos:end="511:36">EST_ERR_LOAD_CACERTS</name><operator pos:start="511:37" pos:end="511:37">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="513:5" pos:end="513:74"><expr pos:start="513:5" pos:end="513:73"><call pos:start="513:5" pos:end="513:73"><name pos:start="513:5" pos:end="513:12">memcpy_s</name><argument_list pos:start="513:13" pos:end="513:73">(<argument pos:start="513:14" pos:end="513:26"><expr pos:start="513:14" pos:end="513:26"><name pos:start="513:14" pos:end="513:26"><name pos:start="513:14" pos:end="513:16">ctx</name><operator pos:start="513:17" pos:end="513:18">-&gt;</operator><name pos:start="513:19" pos:end="513:26">ca_certs</name></name></expr></argument>, <argument pos:start="513:29" pos:end="513:45"><expr pos:start="513:29" pos:end="513:45"><name pos:start="513:29" pos:end="513:45"><name pos:start="513:29" pos:end="513:31">ctx</name><operator pos:start="513:32" pos:end="513:33">-&gt;</operator><name pos:start="513:34" pos:end="513:45">ca_certs_len</name></name></expr></argument>, <argument pos:start="513:48" pos:end="513:53"><expr pos:start="513:48" pos:end="513:53"><name pos:start="513:48" pos:end="513:53">retval</name></expr></argument>, <argument pos:start="513:56" pos:end="513:72"><expr pos:start="513:56" pos:end="513:72"><name pos:start="513:56" pos:end="513:72"><name pos:start="513:56" pos:end="513:58">ctx</name><operator pos:start="513:59" pos:end="513:60">-&gt;</operator><name pos:start="513:61" pos:end="513:72">ca_certs_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="514:5" pos:end="514:26"><expr pos:start="514:5" pos:end="514:25"><call pos:start="514:5" pos:end="514:25"><name pos:start="514:5" pos:end="514:16">BIO_free_all</name><argument_list pos:start="514:17" pos:end="514:25">(<argument pos:start="514:18" pos:end="514:24"><expr pos:start="514:18" pos:end="514:24"><name pos:start="514:18" pos:end="514:24">cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="515:5" pos:end="515:17"><expr pos:start="515:5" pos:end="515:16"><call pos:start="515:5" pos:end="515:16"><name pos:start="515:5" pos:end="515:12">BIO_free</name><argument_list pos:start="515:13" pos:end="515:16">(<argument pos:start="515:14" pos:end="515:15"><expr pos:start="515:14" pos:end="515:15"><name pos:start="515:14" pos:end="515:15">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="516:5" pos:end="516:26">return <expr pos:start="516:12" pos:end="516:25"><operator pos:start="516:12" pos:end="516:12">(</operator><name pos:start="516:13" pos:end="516:24">EST_ERR_NONE</name><operator pos:start="516:25" pos:end="516:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="518:1" pos:end="527:3">/*
 * Takes a char array containing the PEM encoded CA certificates,
 * both implicit and explict certs.  These are decoded and loaded
 * into the trusted_certs_store member on the EST context.  This cert
 * store is used by the TLS stack for peer verification at the TLS
 * layer.
 * Note: we do not include defensive code to check for NULL arguments
 *       because this function is not part of the public API.  These
 *       checks should have already been performed.
 */</comment>
<function pos:start="528:1" pos:end="549:1"><type pos:start="528:1" pos:end="528:9"><name pos:start="528:1" pos:end="528:9">EST_ERROR</name></type> <name pos:start="528:11" pos:end="528:32">est_load_trusted_certs</name> <parameter_list pos:start="528:34" pos:end="528:84">(<parameter pos:start="528:35" pos:end="528:46"><decl pos:start="528:35" pos:end="528:46"><type pos:start="528:35" pos:end="528:46"><name pos:start="528:35" pos:end="528:41">EST_CTX</name> <modifier pos:start="528:43" pos:end="528:43">*</modifier></type><name pos:start="528:44" pos:end="528:46">ctx</name></decl></parameter>, <parameter pos:start="528:49" pos:end="528:68"><decl pos:start="528:49" pos:end="528:68"><type pos:start="528:49" pos:end="528:68"><name pos:start="528:49" pos:end="528:56">unsigned</name> <name pos:start="528:58" pos:end="528:61">char</name> <modifier pos:start="528:63" pos:end="528:63">*</modifier></type><name pos:start="528:64" pos:end="528:68">certs</name></decl></parameter>, <parameter pos:start="528:71" pos:end="528:83"><decl pos:start="528:71" pos:end="528:83"><type pos:start="528:71" pos:end="528:83"><name pos:start="528:71" pos:end="528:73">int</name></type> <name pos:start="528:75" pos:end="528:83">certs_len</name></decl></parameter>)</parameter_list>
<block pos:start="529:1" pos:end="549:1">{<block_content pos:start="530:5" pos:end="548:26">
    <decl_stmt pos:start="530:5" pos:end="530:17"><decl pos:start="530:5" pos:end="530:16"><type pos:start="530:5" pos:end="530:13"><name pos:start="530:5" pos:end="530:13">EST_ERROR</name></type> <name pos:start="530:15" pos:end="530:16">rv</name></decl>;</decl_stmt>

    <comment type="block" pos:start="532:5" pos:end="535:7">/*
     * Create the combined cert store on the context
     * This contains both the implicit and explicit certs
     */</comment>
    <expr_stmt pos:start="536:5" pos:end="536:48"><expr pos:start="536:5" pos:end="536:47"><name pos:start="536:5" pos:end="536:28"><name pos:start="536:5" pos:end="536:7">ctx</name><operator pos:start="536:8" pos:end="536:9">-&gt;</operator><name pos:start="536:10" pos:end="536:28">trusted_certs_store</name></name> <operator pos:start="536:30" pos:end="536:30">=</operator> <call pos:start="536:32" pos:end="536:47"><name pos:start="536:32" pos:end="536:45">X509_STORE_new</name><argument_list pos:start="536:46" pos:end="536:47">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="537:5" pos:end="540:5"><if pos:start="537:5" pos:end="540:5">if <condition pos:start="537:8" pos:end="537:41">(<expr pos:start="537:9" pos:end="537:40"><name pos:start="537:9" pos:end="537:32"><name pos:start="537:9" pos:end="537:11">ctx</name><operator pos:start="537:12" pos:end="537:13">-&gt;</operator><name pos:start="537:14" pos:end="537:32">trusted_certs_store</name></name> <operator pos:start="537:34" pos:end="537:35">==</operator> <name pos:start="537:37" pos:end="537:40">NULL</name></expr>)</condition> <block pos:start="537:43" pos:end="540:5">{<block_content pos:start="538:9" pos:end="539:42">
        <expr_stmt pos:start="538:9" pos:end="538:62"><expr pos:start="538:9" pos:end="538:61"><call pos:start="538:9" pos:end="538:61"><name pos:start="538:9" pos:end="538:19">EST_LOG_ERR</name><argument_list pos:start="538:20" pos:end="538:61">(<argument pos:start="538:21" pos:end="538:60"><expr pos:start="538:21" pos:end="538:60"><literal type="string" pos:start="538:21" pos:end="538:60">"Unable to allocate combined cert store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="539:9" pos:end="539:42">return <expr pos:start="539:16" pos:end="539:41"><operator pos:start="539:16" pos:end="539:16">(</operator><name pos:start="539:17" pos:end="539:40">EST_ERR_LOAD_TRUST_CERTS</name><operator pos:start="539:41" pos:end="539:41">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="541:5" pos:end="541:71"><expr pos:start="541:5" pos:end="541:70"><call pos:start="541:5" pos:end="541:70"><name pos:start="541:5" pos:end="541:28">X509_STORE_set_verify_cb</name><argument_list pos:start="541:29" pos:end="541:70">(<argument pos:start="541:30" pos:end="541:53"><expr pos:start="541:30" pos:end="541:53"><name pos:start="541:30" pos:end="541:53"><name pos:start="541:30" pos:end="541:32">ctx</name><operator pos:start="541:33" pos:end="541:34">-&gt;</operator><name pos:start="541:35" pos:end="541:53">trusted_certs_store</name></name></expr></argument>, <argument pos:start="541:56" pos:end="541:69"><expr pos:start="541:56" pos:end="541:69"><name pos:start="541:56" pos:end="541:69">ossl_verify_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="542:5" pos:end="542:74"><expr pos:start="542:5" pos:end="542:73"><name pos:start="542:5" pos:end="542:6">rv</name> <operator pos:start="542:8" pos:end="542:8">=</operator> <call pos:start="542:10" pos:end="542:73"><name pos:start="542:10" pos:end="542:29">ossl_init_cert_store</name><argument_list pos:start="542:30" pos:end="542:73">(<argument pos:start="542:31" pos:end="542:54"><expr pos:start="542:31" pos:end="542:54"><name pos:start="542:31" pos:end="542:54"><name pos:start="542:31" pos:end="542:33">ctx</name><operator pos:start="542:34" pos:end="542:35">-&gt;</operator><name pos:start="542:36" pos:end="542:54">trusted_certs_store</name></name></expr></argument>, <argument pos:start="542:57" pos:end="542:61"><expr pos:start="542:57" pos:end="542:61"><name pos:start="542:57" pos:end="542:61">certs</name></expr></argument>, <argument pos:start="542:64" pos:end="542:72"><expr pos:start="542:64" pos:end="542:72"><name pos:start="542:64" pos:end="542:72">certs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="543:5" pos:end="546:5"><if pos:start="543:5" pos:end="546:5">if <condition pos:start="543:8" pos:end="543:27">(<expr pos:start="543:9" pos:end="543:26"><name pos:start="543:9" pos:end="543:10">rv</name> <operator pos:start="543:12" pos:end="543:13">!=</operator> <name pos:start="543:15" pos:end="543:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="543:29" pos:end="546:5">{<block_content pos:start="544:9" pos:end="545:20">
        <expr_stmt pos:start="544:9" pos:end="544:62"><expr pos:start="544:9" pos:end="544:61"><call pos:start="544:9" pos:end="544:61"><name pos:start="544:9" pos:end="544:19">EST_LOG_ERR</name><argument_list pos:start="544:20" pos:end="544:61">(<argument pos:start="544:21" pos:end="544:60"><expr pos:start="544:21" pos:end="544:60"><literal type="string" pos:start="544:21" pos:end="544:60">"Unable to populate combined cert store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="545:9" pos:end="545:20">return <expr pos:start="545:16" pos:end="545:19"><operator pos:start="545:16" pos:end="545:16">(</operator><name pos:start="545:17" pos:end="545:18">rv</name><operator pos:start="545:19" pos:end="545:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return pos:start="548:5" pos:end="548:26">return <expr pos:start="548:12" pos:end="548:25"><operator pos:start="548:12" pos:end="548:12">(</operator><name pos:start="548:13" pos:end="548:24">EST_ERR_NONE</name><operator pos:start="548:25" pos:end="548:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="550:1" pos:end="569:3">/*! @brief est_set_ex_data() sets the application specific data
    on the EST context. 
 
    @param ctx Pointer to an EST context
    @param ex_data Pointer to application specific data that will be
                   passed through to the EST callbacks.
 
    @return EST_ERROR

    This function is used to link application specific data to the
    EST_CTX structure.  This can be used by an application to bind
    application specific data to an EST operation.  libEST does 
    not use the application specific data.  The *ex_data pointer is
    passed back to the application when libEST invokes the 
    enroll, re-enroll, CSR attributes, and HTTP auth callbacks.

    libEST will not free the memory referenced by the *ex_data
    parameter when est_destroy() is invoked.  The application is
    responsible for releasing its application specific data. 
 */</comment>
<function pos:start="570:1" pos:end="580:1"><type pos:start="570:1" pos:end="570:9"><name pos:start="570:1" pos:end="570:9">EST_ERROR</name></type> <name pos:start="570:11" pos:end="570:25">est_set_ex_data</name> <parameter_list pos:start="570:27" pos:end="570:55">(<parameter pos:start="570:28" pos:end="570:39"><decl pos:start="570:28" pos:end="570:39"><type pos:start="570:28" pos:end="570:39"><name pos:start="570:28" pos:end="570:34">EST_CTX</name> <modifier pos:start="570:36" pos:end="570:36">*</modifier></type><name pos:start="570:37" pos:end="570:39">ctx</name></decl></parameter>, <parameter pos:start="570:42" pos:end="570:54"><decl pos:start="570:42" pos:end="570:54"><type pos:start="570:42" pos:end="570:54"><name pos:start="570:42" pos:end="570:45">void</name> <modifier pos:start="570:47" pos:end="570:47">*</modifier></type><name pos:start="570:48" pos:end="570:54">ex_data</name></decl></parameter>)</parameter_list>
<block pos:start="571:1" pos:end="580:1">{<block_content pos:start="572:5" pos:end="579:26">
    <if_stmt pos:start="572:5" pos:end="574:5"><if pos:start="572:5" pos:end="574:5">if <condition pos:start="572:8" pos:end="572:13">(<expr pos:start="572:9" pos:end="572:12"><operator pos:start="572:9" pos:end="572:9">!</operator><name pos:start="572:10" pos:end="572:12">ctx</name></expr>)</condition> <block pos:start="572:15" pos:end="574:5">{<block_content pos:start="573:9" pos:end="573:32">
        <return pos:start="573:9" pos:end="573:32">return <expr pos:start="573:16" pos:end="573:31"><operator pos:start="573:16" pos:end="573:16">(</operator><name pos:start="573:17" pos:end="573:30">EST_ERR_NO_CTX</name><operator pos:start="573:31" pos:end="573:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="575:5" pos:end="577:5"><if pos:start="575:5" pos:end="577:5">if <condition pos:start="575:8" pos:end="575:21">(<expr pos:start="575:9" pos:end="575:20"><name pos:start="575:9" pos:end="575:20"><name pos:start="575:9" pos:end="575:11">ctx</name><operator pos:start="575:12" pos:end="575:13">-&gt;</operator><name pos:start="575:14" pos:end="575:20">ex_data</name></name></expr>)</condition> <block pos:start="575:23" pos:end="577:5">{<block_content pos:start="576:9" pos:end="576:70">
	<expr_stmt pos:start="576:9" pos:end="576:70"><expr pos:start="576:9" pos:end="576:69"><call pos:start="576:9" pos:end="576:69"><name pos:start="576:9" pos:end="576:20">EST_LOG_WARN</name><argument_list pos:start="576:21" pos:end="576:69">(<argument pos:start="576:22" pos:end="576:68"><expr pos:start="576:22" pos:end="576:68"><literal type="string" pos:start="576:22" pos:end="576:68">"ex_data was already set, possible memory leak"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="578:5" pos:end="578:27"><expr pos:start="578:5" pos:end="578:26"><name pos:start="578:5" pos:end="578:16"><name pos:start="578:5" pos:end="578:7">ctx</name><operator pos:start="578:8" pos:end="578:9">-&gt;</operator><name pos:start="578:10" pos:end="578:16">ex_data</name></name> <operator pos:start="578:18" pos:end="578:18">=</operator> <name pos:start="578:20" pos:end="578:26">ex_data</name></expr>;</expr_stmt>
    <return pos:start="579:5" pos:end="579:26">return <expr pos:start="579:12" pos:end="579:25"><operator pos:start="579:12" pos:end="579:12">(</operator><name pos:start="579:13" pos:end="579:24">EST_ERR_NONE</name><operator pos:start="579:25" pos:end="579:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="581:1" pos:end="592:3">/*! @brief est_get_ex_data() retrieves the application specific data
    on the EST context. 
 
    @param ctx Pointer to an EST context
 
    @return void* 

    This function is used to attain a reference to the application 
    specific data on the EST_CTX structure.  This data should have
    been set by invoking est_set_ex_data() earlier.  Otherwise it
    will return NULL. 
 */</comment>
<function pos:start="593:1" pos:end="599:1"><type pos:start="593:1" pos:end="593:6"><name pos:start="593:1" pos:end="593:4">void</name> <modifier pos:start="593:6" pos:end="593:6">*</modifier></type> <name pos:start="593:8" pos:end="593:22">est_get_ex_data</name> <parameter_list pos:start="593:24" pos:end="593:37">(<parameter pos:start="593:25" pos:end="593:36"><decl pos:start="593:25" pos:end="593:36"><type pos:start="593:25" pos:end="593:33"><name pos:start="593:25" pos:end="593:31">EST_CTX</name> <modifier pos:start="593:33" pos:end="593:33">*</modifier></type><name pos:start="593:34" pos:end="593:36">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="594:1" pos:end="599:1">{<block_content pos:start="595:5" pos:end="598:26">
    <if_stmt pos:start="595:5" pos:end="597:5"><if pos:start="595:5" pos:end="597:5">if <condition pos:start="595:8" pos:end="595:13">(<expr pos:start="595:9" pos:end="595:12"><operator pos:start="595:9" pos:end="595:9">!</operator><name pos:start="595:10" pos:end="595:12">ctx</name></expr>)</condition> <block pos:start="595:15" pos:end="597:5">{<block_content pos:start="596:9" pos:end="596:22">
        <return pos:start="596:9" pos:end="596:22">return <expr pos:start="596:16" pos:end="596:21"><operator pos:start="596:16" pos:end="596:16">(</operator><name pos:start="596:17" pos:end="596:20">NULL</name><operator pos:start="596:21" pos:end="596:21">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="598:5" pos:end="598:26">return <expr pos:start="598:12" pos:end="598:25"><operator pos:start="598:12" pos:end="598:12">(</operator><name pos:start="598:13" pos:end="598:24"><name pos:start="598:13" pos:end="598:15">ctx</name><operator pos:start="598:16" pos:end="598:17">-&gt;</operator><name pos:start="598:18" pos:end="598:24">ex_data</name></name><operator pos:start="598:25" pos:end="598:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="600:1" pos:end="609:3">/*! @brief est_destroy() frees an EST context 
 
    @param ctx Pointer to an EST context
 
    @return EST_ERROR

    This function is used to release all the memory allocated under
    the EST_CTX*.  This should be called last after performing EST
    operations using the context.
 */</comment>
<function pos:start="610:1" pos:end="678:1"><type pos:start="610:1" pos:end="610:9"><name pos:start="610:1" pos:end="610:9">EST_ERROR</name></type> <name pos:start="610:11" pos:end="610:21">est_destroy</name> <parameter_list pos:start="610:23" pos:end="610:36">(<parameter pos:start="610:24" pos:end="610:35"><decl pos:start="610:24" pos:end="610:35"><type pos:start="610:24" pos:end="610:32"><name pos:start="610:24" pos:end="610:30">EST_CTX</name> <modifier pos:start="610:32" pos:end="610:32">*</modifier></type><name pos:start="610:33" pos:end="610:35">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="611:1" pos:end="678:1">{<block_content pos:start="613:5" pos:end="677:26">

    <if_stmt pos:start="613:5" pos:end="615:5"><if pos:start="613:5" pos:end="615:5">if <condition pos:start="613:8" pos:end="613:13">(<expr pos:start="613:9" pos:end="613:12"><operator pos:start="613:9" pos:end="613:9">!</operator><name pos:start="613:10" pos:end="613:12">ctx</name></expr>)</condition> <block pos:start="613:15" pos:end="615:5">{<block_content pos:start="614:9" pos:end="614:32">
        <return pos:start="614:9" pos:end="614:32">return <expr pos:start="614:16" pos:end="614:31"><operator pos:start="614:16" pos:end="614:16">(</operator><name pos:start="614:17" pos:end="614:30">EST_ERR_NO_CTX</name><operator pos:start="614:31" pos:end="614:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="617:5" pos:end="619:5"><if pos:start="617:5" pos:end="619:5">if <condition pos:start="617:8" pos:end="617:41">(<expr pos:start="617:9" pos:end="617:40"><name pos:start="617:9" pos:end="617:32"><name pos:start="617:9" pos:end="617:11">ctx</name><operator pos:start="617:12" pos:end="617:13">-&gt;</operator><name pos:start="617:14" pos:end="617:32">trusted_certs_store</name></name> <operator pos:start="617:34" pos:end="617:35">!=</operator> <name pos:start="617:37" pos:end="617:40">NULL</name></expr>)</condition> <block pos:start="617:43" pos:end="619:5">{<block_content pos:start="618:9" pos:end="618:50">
        <expr_stmt pos:start="618:9" pos:end="618:50"><expr pos:start="618:9" pos:end="618:49"><call pos:start="618:9" pos:end="618:49"><name pos:start="618:9" pos:end="618:23">X509_STORE_free</name><argument_list pos:start="618:24" pos:end="618:49">(<argument pos:start="618:25" pos:end="618:48"><expr pos:start="618:25" pos:end="618:48"><name pos:start="618:25" pos:end="618:48"><name pos:start="618:25" pos:end="618:27">ctx</name><operator pos:start="618:28" pos:end="618:29">-&gt;</operator><name pos:start="618:30" pos:end="618:48">trusted_certs_store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="621:5" pos:end="623:5"><if pos:start="621:5" pos:end="623:5">if <condition pos:start="621:8" pos:end="621:22">(<expr pos:start="621:9" pos:end="621:21"><name pos:start="621:9" pos:end="621:21"><name pos:start="621:9" pos:end="621:11">ctx</name><operator pos:start="621:12" pos:end="621:13">-&gt;</operator><name pos:start="621:14" pos:end="621:21">ca_certs</name></name></expr>)</condition> <block pos:start="621:24" pos:end="623:5">{<block_content pos:start="622:9" pos:end="622:28">
        <expr_stmt pos:start="622:9" pos:end="622:28"><expr pos:start="622:9" pos:end="622:27"><call pos:start="622:9" pos:end="622:27"><name pos:start="622:9" pos:end="622:12">free</name><argument_list pos:start="622:13" pos:end="622:27">(<argument pos:start="622:14" pos:end="622:26"><expr pos:start="622:14" pos:end="622:26"><name pos:start="622:14" pos:end="622:26"><name pos:start="622:14" pos:end="622:16">ctx</name><operator pos:start="622:17" pos:end="622:18">-&gt;</operator><name pos:start="622:19" pos:end="622:26">ca_certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="625:5" pos:end="627:5"><if pos:start="625:5" pos:end="627:5">if <condition pos:start="625:8" pos:end="625:32">(<expr pos:start="625:9" pos:end="625:31"><name pos:start="625:9" pos:end="625:31"><name pos:start="625:9" pos:end="625:11">ctx</name><operator pos:start="625:12" pos:end="625:13">-&gt;</operator><name pos:start="625:14" pos:end="625:31">retrieved_ca_certs</name></name></expr>)</condition> <block pos:start="625:34" pos:end="627:5">{<block_content pos:start="626:9" pos:end="626:38">
        <expr_stmt pos:start="626:9" pos:end="626:38"><expr pos:start="626:9" pos:end="626:37"><call pos:start="626:9" pos:end="626:37"><name pos:start="626:9" pos:end="626:12">free</name><argument_list pos:start="626:13" pos:end="626:37">(<argument pos:start="626:14" pos:end="626:36"><expr pos:start="626:14" pos:end="626:36"><name pos:start="626:14" pos:end="626:36"><name pos:start="626:14" pos:end="626:16">ctx</name><operator pos:start="626:17" pos:end="626:18">-&gt;</operator><name pos:start="626:19" pos:end="626:36">retrieved_ca_certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="629:5" pos:end="631:5"><if pos:start="629:5" pos:end="631:5">if <condition pos:start="629:8" pos:end="629:32">(<expr pos:start="629:9" pos:end="629:31"><name pos:start="629:9" pos:end="629:31"><name pos:start="629:9" pos:end="629:11">ctx</name><operator pos:start="629:12" pos:end="629:13">-&gt;</operator><name pos:start="629:14" pos:end="629:31">retrieved_csrattrs</name></name></expr>)</condition> <block pos:start="629:34" pos:end="631:5">{<block_content pos:start="630:9" pos:end="630:38">
        <expr_stmt pos:start="630:9" pos:end="630:38"><expr pos:start="630:9" pos:end="630:37"><call pos:start="630:9" pos:end="630:37"><name pos:start="630:9" pos:end="630:12">free</name><argument_list pos:start="630:13" pos:end="630:37">(<argument pos:start="630:14" pos:end="630:36"><expr pos:start="630:14" pos:end="630:36"><name pos:start="630:14" pos:end="630:36"><name pos:start="630:14" pos:end="630:16">ctx</name><operator pos:start="630:17" pos:end="630:18">-&gt;</operator><name pos:start="630:19" pos:end="630:36">retrieved_csrattrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="633:5" pos:end="635:5"><if pos:start="633:5" pos:end="635:5">if <condition pos:start="633:8" pos:end="633:29">(<expr pos:start="633:9" pos:end="633:28"><name pos:start="633:9" pos:end="633:28"><name pos:start="633:9" pos:end="633:11">ctx</name><operator pos:start="633:12" pos:end="633:13">-&gt;</operator><name pos:start="633:14" pos:end="633:28">server_csrattrs</name></name></expr>)</condition> <block pos:start="633:31" pos:end="635:5">{<block_content pos:start="634:9" pos:end="634:35">
        <expr_stmt pos:start="634:9" pos:end="634:35"><expr pos:start="634:9" pos:end="634:34"><call pos:start="634:9" pos:end="634:34"><name pos:start="634:9" pos:end="634:12">free</name><argument_list pos:start="634:13" pos:end="634:34">(<argument pos:start="634:14" pos:end="634:33"><expr pos:start="634:14" pos:end="634:33"><name pos:start="634:14" pos:end="634:33"><name pos:start="634:14" pos:end="634:16">ctx</name><operator pos:start="634:17" pos:end="634:18">-&gt;</operator><name pos:start="634:19" pos:end="634:33">server_csrattrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="637:5" pos:end="639:5"><if pos:start="637:5" pos:end="639:5">if <condition pos:start="637:8" pos:end="637:34">(<expr pos:start="637:9" pos:end="637:33"><name pos:start="637:9" pos:end="637:33"><name pos:start="637:9" pos:end="637:11">ctx</name><operator pos:start="637:12" pos:end="637:13">-&gt;</operator><name pos:start="637:14" pos:end="637:33">enrolled_client_cert</name></name></expr>)</condition> <block pos:start="637:36" pos:end="639:5">{<block_content pos:start="638:9" pos:end="638:40">
        <expr_stmt pos:start="638:9" pos:end="638:40"><expr pos:start="638:9" pos:end="638:39"><call pos:start="638:9" pos:end="638:39"><name pos:start="638:9" pos:end="638:12">free</name><argument_list pos:start="638:13" pos:end="638:39">(<argument pos:start="638:14" pos:end="638:38"><expr pos:start="638:14" pos:end="638:38"><name pos:start="638:14" pos:end="638:38"><name pos:start="638:14" pos:end="638:16">ctx</name><operator pos:start="638:17" pos:end="638:18">-&gt;</operator><name pos:start="638:19" pos:end="638:38">enrolled_client_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="641:5" pos:end="643:5"><if pos:start="641:5" pos:end="643:5">if <condition pos:start="641:8" pos:end="641:26">(<expr pos:start="641:9" pos:end="641:25"><name pos:start="641:9" pos:end="641:25"><name pos:start="641:9" pos:end="641:11">ctx</name><operator pos:start="641:12" pos:end="641:13">-&gt;</operator><name pos:start="641:14" pos:end="641:25">ca_chain_raw</name></name></expr>)</condition> <block pos:start="641:28" pos:end="643:5">{<block_content pos:start="642:9" pos:end="642:32">
        <expr_stmt pos:start="642:9" pos:end="642:32"><expr pos:start="642:9" pos:end="642:31"><call pos:start="642:9" pos:end="642:31"><name pos:start="642:9" pos:end="642:12">free</name><argument_list pos:start="642:13" pos:end="642:31">(<argument pos:start="642:14" pos:end="642:30"><expr pos:start="642:14" pos:end="642:30"><name pos:start="642:14" pos:end="642:30"><name pos:start="642:14" pos:end="642:16">ctx</name><operator pos:start="642:17" pos:end="642:18">-&gt;</operator><name pos:start="642:19" pos:end="642:30">ca_chain_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="645:5" pos:end="647:5"><if pos:start="645:5" pos:end="647:5">if <condition pos:start="645:8" pos:end="645:30">(<expr pos:start="645:9" pos:end="645:29"><name pos:start="645:9" pos:end="645:29"><name pos:start="645:9" pos:end="645:11">ctx</name><operator pos:start="645:12" pos:end="645:13">-&gt;</operator><name pos:start="645:14" pos:end="645:29">uri_path_segment</name></name></expr>)</condition> <block pos:start="645:32" pos:end="647:5">{<block_content pos:start="646:9" pos:end="646:36">
        <expr_stmt pos:start="646:9" pos:end="646:36"><expr pos:start="646:9" pos:end="646:35"><call pos:start="646:9" pos:end="646:35"><name pos:start="646:9" pos:end="646:12">free</name><argument_list pos:start="646:13" pos:end="646:35">(<argument pos:start="646:14" pos:end="646:34"><expr pos:start="646:14" pos:end="646:34"><name pos:start="646:14" pos:end="646:34"><name pos:start="646:14" pos:end="646:16">ctx</name><operator pos:start="646:17" pos:end="646:18">-&gt;</operator><name pos:start="646:19" pos:end="646:34">uri_path_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="649:5" pos:end="651:5"><if pos:start="649:5" pos:end="651:5">if <condition pos:start="649:8" pos:end="649:20">(<expr pos:start="649:9" pos:end="649:19"><name pos:start="649:9" pos:end="649:19"><name pos:start="649:9" pos:end="649:11">ctx</name><operator pos:start="649:12" pos:end="649:13">-&gt;</operator><name pos:start="649:14" pos:end="649:19">dh_tmp</name></name></expr>)</condition> <block pos:start="649:22" pos:end="651:5">{<block_content pos:start="650:9" pos:end="650:29">
	<expr_stmt pos:start="650:9" pos:end="650:29"><expr pos:start="650:9" pos:end="650:28"><call pos:start="650:9" pos:end="650:28"><name pos:start="650:9" pos:end="650:15">DH_free</name><argument_list pos:start="650:16" pos:end="650:28">(<argument pos:start="650:17" pos:end="650:27"><expr pos:start="650:17" pos:end="650:27"><name pos:start="650:17" pos:end="650:27"><name pos:start="650:17" pos:end="650:19">ctx</name><operator pos:start="650:20" pos:end="650:21">-&gt;</operator><name pos:start="650:22" pos:end="650:27">dh_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="653:5" pos:end="655:31">/* Only free the SSL context when acting as a client.  When
     * operating as a server, it's expected the web server
     * will free the context */</comment>
    <if_stmt pos:start="656:5" pos:end="667:5"><if pos:start="656:5" pos:end="667:5">if <condition pos:start="656:8" pos:end="657:70">(<expr pos:start="656:9" pos:end="657:69"><name pos:start="656:9" pos:end="656:20"><name pos:start="656:9" pos:end="656:11">ctx</name><operator pos:start="656:12" pos:end="656:13">-&gt;</operator><name pos:start="656:14" pos:end="656:20">ssl_ctx</name></name> <operator pos:start="656:22" pos:end="656:23">&amp;&amp;</operator>
        <operator pos:start="657:9" pos:end="657:9">(</operator><operator pos:start="657:10" pos:end="657:10">(</operator><name pos:start="657:11" pos:end="657:23"><name pos:start="657:11" pos:end="657:13">ctx</name><operator pos:start="657:14" pos:end="657:15">-&gt;</operator><name pos:start="657:16" pos:end="657:23">est_mode</name></name> <operator pos:start="657:25" pos:end="657:26">==</operator> <name pos:start="657:28" pos:end="657:37">EST_CLIENT</name><operator pos:start="657:38" pos:end="657:38">)</operator><operator pos:start="657:39" pos:end="657:40">||</operator><operator pos:start="657:41" pos:end="657:41">(</operator><name pos:start="657:42" pos:end="657:54"><name pos:start="657:42" pos:end="657:44">ctx</name><operator pos:start="657:45" pos:end="657:46">-&gt;</operator><name pos:start="657:47" pos:end="657:54">est_mode</name></name> <operator pos:start="657:56" pos:end="657:57">==</operator> <name pos:start="657:59" pos:end="657:67">EST_PROXY</name><operator pos:start="657:68" pos:end="657:68">)</operator><operator pos:start="657:69" pos:end="657:69">)</operator></expr>)</condition> <block pos:start="657:72" pos:end="667:5">{<block_content pos:start="663:9" pos:end="666:35">
        <comment type="block" pos:start="658:9" pos:end="662:11">/*
         * If the SSL session had been cached, this means that
         * SSL_get1_session() has been called, so now it needs to be explictly
         * freed to get its ref count decrememnted.
         */</comment>
        <if_stmt pos:start="663:9" pos:end="665:9"><if pos:start="663:9" pos:end="665:9">if <condition pos:start="663:12" pos:end="663:22">(<expr pos:start="663:13" pos:end="663:21"><name pos:start="663:13" pos:end="663:21"><name pos:start="663:13" pos:end="663:15">ctx</name><operator pos:start="663:16" pos:end="663:17">-&gt;</operator><name pos:start="663:18" pos:end="663:21">sess</name></name></expr>)</condition> <block pos:start="663:24" pos:end="665:9">{<block_content pos:start="664:13" pos:end="664:40">
            <expr_stmt pos:start="664:13" pos:end="664:40"><expr pos:start="664:13" pos:end="664:39"><call pos:start="664:13" pos:end="664:39"><name pos:start="664:13" pos:end="664:28">SSL_SESSION_free</name><argument_list pos:start="664:29" pos:end="664:39">(<argument pos:start="664:30" pos:end="664:38"><expr pos:start="664:30" pos:end="664:38"><name pos:start="664:30" pos:end="664:38"><name pos:start="664:30" pos:end="664:32">ctx</name><operator pos:start="664:33" pos:end="664:34">-&gt;</operator><name pos:start="664:35" pos:end="664:38">sess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="666:9" pos:end="666:35"><expr pos:start="666:9" pos:end="666:34"><call pos:start="666:9" pos:end="666:34"><name pos:start="666:9" pos:end="666:20">SSL_CTX_free</name><argument_list pos:start="666:21" pos:end="666:34">(<argument pos:start="666:22" pos:end="666:33"><expr pos:start="666:22" pos:end="666:33"><name pos:start="666:22" pos:end="666:33"><name pos:start="666:22" pos:end="666:24">ctx</name><operator pos:start="666:25" pos:end="666:26">-&gt;</operator><name pos:start="666:27" pos:end="666:33">ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="669:5" pos:end="671:5"><if pos:start="669:5" pos:end="671:5">if <condition pos:start="669:8" pos:end="669:35">(<expr pos:start="669:9" pos:end="669:34"><name pos:start="669:9" pos:end="669:21"><name pos:start="669:9" pos:end="669:11">ctx</name><operator pos:start="669:12" pos:end="669:13">-&gt;</operator><name pos:start="669:14" pos:end="669:21">est_mode</name></name> <operator pos:start="669:23" pos:end="669:24">==</operator> <name pos:start="669:26" pos:end="669:34">EST_PROXY</name></expr>)</condition> <block pos:start="669:37" pos:end="671:5">{<block_content pos:start="670:9" pos:end="670:27">
        <expr_stmt pos:start="670:9" pos:end="670:27"><expr pos:start="670:9" pos:end="670:26"><call pos:start="670:9" pos:end="670:26"><name pos:start="670:9" pos:end="670:21">proxy_cleanup</name><argument_list pos:start="670:22" pos:end="670:26">(<argument pos:start="670:23" pos:end="670:25"><expr pos:start="670:23" pos:end="670:25"><name pos:start="670:23" pos:end="670:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="673:5" pos:end="675:7">/*
     * And finally free the EST context itself
     */</comment>
    <expr_stmt pos:start="676:5" pos:end="676:14"><expr pos:start="676:5" pos:end="676:13"><call pos:start="676:5" pos:end="676:13"><name pos:start="676:5" pos:end="676:8">free</name><argument_list pos:start="676:9" pos:end="676:13">(<argument pos:start="676:10" pos:end="676:12"><expr pos:start="676:10" pos:end="676:12"><name pos:start="676:10" pos:end="676:12">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="677:5" pos:end="677:26">return <expr pos:start="677:12" pos:end="677:25"><operator pos:start="677:12" pos:end="677:12">(</operator><name pos:start="677:13" pos:end="677:24">EST_ERR_NONE</name><operator pos:start="677:25" pos:end="677:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="679:1" pos:end="687:3">/*
 * This routine is used to determine whether the BIO_FLAGS_BASE64_NO_NL 
 * option needs to be used when using the OpenSSL
 * base64 decoder.  It takes a string as input and
 * checks if it contains newline characters.
 *
 * Returns 1 if OpenSSL should use the BIO_FLAGS_BASE64_NO_NL option
 * Returns 0 otherwise
 */</comment>
<function pos:start="688:1" pos:end="710:1"><type pos:start="688:1" pos:end="688:10"><specifier pos:start="688:1" pos:end="688:6">static</specifier> <name pos:start="688:8" pos:end="688:10">int</name></type> <name pos:start="688:12" pos:end="688:33">est_base64_contains_nl</name> <parameter_list pos:start="688:35" pos:end="688:60">(<parameter pos:start="688:36" pos:end="688:50"><decl pos:start="688:36" pos:end="688:50"><type pos:start="688:36" pos:end="688:50"><specifier pos:start="688:36" pos:end="688:40">const</specifier> <name pos:start="688:42" pos:end="688:45">char</name> <modifier pos:start="688:47" pos:end="688:47">*</modifier></type><name pos:start="688:48" pos:end="688:50">src</name></decl></parameter>, <parameter pos:start="688:53" pos:end="688:59"><decl pos:start="688:53" pos:end="688:59"><type pos:start="688:53" pos:end="688:59"><name pos:start="688:53" pos:end="688:55">int</name></type> <name pos:start="688:57" pos:end="688:59">len</name></decl></parameter>)</parameter_list>
<block pos:start="689:1" pos:end="710:1">{<block_content pos:start="690:5" pos:end="709:13">
    <decl_stmt pos:start="690:5" pos:end="690:10"><decl pos:start="690:5" pos:end="690:9"><type pos:start="690:5" pos:end="690:7"><name pos:start="690:5" pos:end="690:7">int</name></type> <name pos:start="690:9" pos:end="690:9">i</name></decl>;</decl_stmt>

    <if_stmt pos:start="692:5" pos:end="699:5"><if pos:start="692:5" pos:end="699:5">if <condition pos:start="692:8" pos:end="692:17">(<expr pos:start="692:9" pos:end="692:16"><name pos:start="692:9" pos:end="692:11">len</name> <operator pos:start="692:13" pos:end="692:13">&lt;</operator> <literal type="number" pos:start="692:15" pos:end="692:16">64</literal></expr>)</condition> <block pos:start="692:19" pos:end="699:5">{<block_content pos:start="698:9" pos:end="698:17">
	<comment type="block" pos:start="693:9" pos:end="697:11">/* 
	 * Any base64 less than 64 bytes shouldn't be a 
	 * problem for OpenSSL since this is the minimum
	 * line length for base64 encoding.
	 */</comment>
	<return pos:start="698:9" pos:end="698:17">return <expr pos:start="698:16" pos:end="698:16"><literal type="number" pos:start="698:16" pos:end="698:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="701:5" pos:end="703:7">/*
     * Start looking for newlines at the 64th position
     */</comment>
    <for pos:start="704:5" pos:end="708:5">for <control pos:start="704:9" pos:end="704:32">(<init pos:start="704:10" pos:end="704:16"><expr pos:start="704:10" pos:end="704:15"><name pos:start="704:10" pos:end="704:10">i</name> <operator pos:start="704:12" pos:end="704:12">=</operator> <literal type="number" pos:start="704:14" pos:end="704:15">63</literal></expr>;</init> <condition pos:start="704:18" pos:end="704:27"><expr pos:start="704:18" pos:end="704:26"><name pos:start="704:18" pos:end="704:18">i</name> <operator pos:start="704:20" pos:end="704:20">&lt;</operator> <name pos:start="704:22" pos:end="704:24">len</name><operator pos:start="704:25" pos:end="704:25">-</operator><literal type="number" pos:start="704:26" pos:end="704:26">1</literal></expr>;</condition> <incr pos:start="704:29" pos:end="704:31"><expr pos:start="704:29" pos:end="704:31"><name pos:start="704:29" pos:end="704:29">i</name><operator pos:start="704:30" pos:end="704:31">++</operator></expr></incr>)</control> <block pos:start="704:34" pos:end="708:5">{<block_content pos:start="705:9" pos:end="707:9">
	<if_stmt pos:start="705:9" pos:end="707:9"><if pos:start="705:9" pos:end="707:9">if <condition pos:start="705:12" pos:end="705:26">(<expr pos:start="705:13" pos:end="705:25"><name pos:start="705:13" pos:end="705:18"><name pos:start="705:13" pos:end="705:15">src</name><index pos:start="705:16" pos:end="705:18">[<expr pos:start="705:17" pos:end="705:17"><name pos:start="705:17" pos:end="705:17">i</name></expr>]</index></name> <operator pos:start="705:20" pos:end="705:21">==</operator> <literal type="number" pos:start="705:23" pos:end="705:25">0xA</literal></expr>)</condition> <block pos:start="705:28" pos:end="707:9">{<block_content pos:start="706:13" pos:end="706:21">
	    <return pos:start="706:13" pos:end="706:21">return <expr pos:start="706:20" pos:end="706:20"><literal type="number" pos:start="706:20" pos:end="706:20">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return pos:start="709:5" pos:end="709:13">return <expr pos:start="709:12" pos:end="709:12"><literal type="number" pos:start="709:12" pos:end="709:12">0</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="711:1" pos:end="718:3">/*
 * This routine is used to decode base64 encoded data.
 * Pass in the base64 encoded data and a pointer to a buffer
 * to receive the decoded data.  The length of the decoded 
 * data is returned.  If the return value is zero or negative, then
 * an error occurred.  The dst_size parameter is the maximum
 * allowed size of the decoded data.
 */</comment>
<function pos:start="719:1" pos:end="777:1"><type pos:start="719:1" pos:end="719:3"><name pos:start="719:1" pos:end="719:3">int</name></type> <name pos:start="719:5" pos:end="719:21">est_base64_decode</name> <parameter_list pos:start="719:23" pos:end="719:64">(<parameter pos:start="719:24" pos:end="719:38"><decl pos:start="719:24" pos:end="719:38"><type pos:start="719:24" pos:end="719:38"><specifier pos:start="719:24" pos:end="719:28">const</specifier> <name pos:start="719:30" pos:end="719:33">char</name> <modifier pos:start="719:35" pos:end="719:35">*</modifier></type><name pos:start="719:36" pos:end="719:38">src</name></decl></parameter>, <parameter pos:start="719:41" pos:end="719:49"><decl pos:start="719:41" pos:end="719:49"><type pos:start="719:41" pos:end="719:49"><name pos:start="719:41" pos:end="719:44">char</name> <modifier pos:start="719:46" pos:end="719:46">*</modifier></type><name pos:start="719:47" pos:end="719:49">dst</name></decl></parameter>, <parameter pos:start="719:52" pos:end="719:63"><decl pos:start="719:52" pos:end="719:63"><type pos:start="719:52" pos:end="719:63"><name pos:start="719:52" pos:end="719:54">int</name></type> <name pos:start="719:56" pos:end="719:63">dst_size</name></decl></parameter>)</parameter_list>
<block pos:start="720:1" pos:end="777:1">{<block_content pos:start="721:5" pos:end="776:17">
    <decl_stmt pos:start="721:5" pos:end="721:21"><decl pos:start="721:5" pos:end="721:12"><type pos:start="721:5" pos:end="721:9"><name pos:start="721:5" pos:end="721:7">BIO</name> <modifier pos:start="721:9" pos:end="721:9">*</modifier></type><name pos:start="721:10" pos:end="721:12">b64</name></decl>, <decl pos:start="721:15" pos:end="721:20"><type ref="prev" pos:start="721:5" pos:end="721:9"><modifier pos:start="721:15" pos:end="721:15">*</modifier></type><name pos:start="721:16" pos:end="721:20">b64in</name></decl>;</decl_stmt>
    <decl_stmt pos:start="722:5" pos:end="722:12"><decl pos:start="722:5" pos:end="722:11"><type pos:start="722:5" pos:end="722:7"><name pos:start="722:5" pos:end="722:7">int</name></type> <name pos:start="722:9" pos:end="722:11">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="723:5" pos:end="723:15"><decl pos:start="723:5" pos:end="723:14"><type pos:start="723:5" pos:end="723:7"><name pos:start="723:5" pos:end="723:7">int</name></type> <name pos:start="723:9" pos:end="723:14">max_in</name></decl>;</decl_stmt>

    <comment type="block" pos:start="725:5" pos:end="730:7">/*
     * When decoding base64, the output will always be smaller by a
     * ratio of 4:3.  Determine what the max size can be for the input
     * based on the size of the given output buffer and then make sure that
     * the actual input buffer is not too big.
     */</comment>
    <expr_stmt pos:start="731:5" pos:end="731:38"><expr pos:start="731:5" pos:end="731:37"><name pos:start="731:5" pos:end="731:10">max_in</name> <operator pos:start="731:12" pos:end="731:12">=</operator> <operator pos:start="731:14" pos:end="731:14">(</operator><operator pos:start="731:15" pos:end="731:15">(</operator><name pos:start="731:16" pos:end="731:23">dst_size</name> <operator pos:start="731:25" pos:end="731:25">*</operator> <literal type="number" pos:start="731:27" pos:end="731:27">4</literal><operator pos:start="731:28" pos:end="731:28">)</operator> <operator pos:start="731:30" pos:end="731:30">/</operator> <literal type="number" pos:start="731:32" pos:end="731:32">3</literal><operator pos:start="731:33" pos:end="731:33">)</operator> <operator pos:start="731:35" pos:end="731:35">+</operator> <literal type="number" pos:start="731:37" pos:end="731:37">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="732:5" pos:end="735:7">/*
     * Get the length of the base64 encoded data.  Make sure it's not too
     * big
     */</comment>
    <expr_stmt pos:start="736:5" pos:end="736:35"><expr pos:start="736:5" pos:end="736:34"><name pos:start="736:5" pos:end="736:7">len</name> <operator pos:start="736:9" pos:end="736:9">=</operator> <call pos:start="736:11" pos:end="736:34"><name pos:start="736:11" pos:end="736:19">strnlen_s</name><argument_list pos:start="736:20" pos:end="736:34">(<argument pos:start="736:21" pos:end="736:23"><expr pos:start="736:21" pos:end="736:23"><name pos:start="736:21" pos:end="736:23">src</name></expr></argument>, <argument pos:start="736:26" pos:end="736:33"><expr pos:start="736:26" pos:end="736:33"><name pos:start="736:26" pos:end="736:31">max_in</name><operator pos:start="736:32" pos:end="736:32">+</operator><literal type="number" pos:start="736:33" pos:end="736:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if_stmt pos:start="737:5" pos:end="742:5"><if pos:start="737:5" pos:end="742:5">if <condition pos:start="737:8" pos:end="737:21">(<expr pos:start="737:9" pos:end="737:20"><name pos:start="737:9" pos:end="737:11">len</name> <operator pos:start="737:13" pos:end="737:13">&gt;</operator> <name pos:start="737:15" pos:end="737:20">max_in</name></expr>)</condition> <block pos:start="737:23" pos:end="742:5">{<block_content pos:start="738:9" pos:end="741:19">
        <expr_stmt pos:start="738:9" pos:end="740:43"><expr pos:start="738:9" pos:end="740:42"><call pos:start="738:9" pos:end="740:42"><name pos:start="738:9" pos:end="738:19">EST_LOG_ERR</name><argument_list pos:start="738:20" pos:end="740:42">(<argument pos:start="738:21" pos:end="739:80"><expr pos:start="738:21" pos:end="739:80"><literal type="string" pos:start="738:21" pos:end="738:91">"Source buffer for base64 decode is loo large for destination buffer. "</literal>
                    <literal type="string" pos:start="739:21" pos:end="739:80">"source buf len = %d, max input len = %d, max dest len = %d"</literal></expr></argument>,
                    <argument pos:start="740:21" pos:end="740:23"><expr pos:start="740:21" pos:end="740:23"><name pos:start="740:21" pos:end="740:23">len</name></expr></argument>, <argument pos:start="740:26" pos:end="740:31"><expr pos:start="740:26" pos:end="740:31"><name pos:start="740:26" pos:end="740:31">max_in</name></expr></argument>, <argument pos:start="740:34" pos:end="740:41"><expr pos:start="740:34" pos:end="740:41"><name pos:start="740:34" pos:end="740:41">dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="741:9" pos:end="741:19">return <expr pos:start="741:16" pos:end="741:18"><operator pos:start="741:16" pos:end="741:16">(</operator><literal type="number" pos:start="741:17" pos:end="741:17">0</literal><operator pos:start="741:18" pos:end="741:18">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="744:5" pos:end="744:34"><expr pos:start="744:5" pos:end="744:33"><name pos:start="744:5" pos:end="744:7">b64</name> <operator pos:start="744:9" pos:end="744:9">=</operator> <call pos:start="744:11" pos:end="744:33"><name pos:start="744:11" pos:end="744:17">BIO_new</name><argument_list pos:start="744:18" pos:end="744:33">(<argument pos:start="744:19" pos:end="744:32"><expr pos:start="744:19" pos:end="744:32"><call pos:start="744:19" pos:end="744:32"><name pos:start="744:19" pos:end="744:30">BIO_f_base64</name><argument_list pos:start="744:31" pos:end="744:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="745:5" pos:end="749:5"><if pos:start="745:5" pos:end="749:5">if <condition pos:start="745:8" pos:end="745:20">(<expr pos:start="745:9" pos:end="745:19"><name pos:start="745:9" pos:end="745:11">b64</name> <operator pos:start="745:13" pos:end="745:14">==</operator> <name pos:start="745:16" pos:end="745:19">NULL</name></expr>)</condition> <block pos:start="745:22" pos:end="749:5">{<block_content pos:start="746:9" pos:end="748:19">
        <expr_stmt pos:start="746:9" pos:end="746:76"><expr pos:start="746:9" pos:end="746:75"><call pos:start="746:9" pos:end="746:75"><name pos:start="746:9" pos:end="746:19">EST_LOG_ERR</name><argument_list pos:start="746:20" pos:end="746:75">(<argument pos:start="746:21" pos:end="746:74"><expr pos:start="746:21" pos:end="746:74"><literal type="string" pos:start="746:21" pos:end="746:74">"BIO_new failed while attempting to create base64 BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="747:9" pos:end="747:31"><expr pos:start="747:9" pos:end="747:30"><call pos:start="747:9" pos:end="747:30"><name pos:start="747:9" pos:end="747:28">ossl_dump_ssl_errors</name><argument_list pos:start="747:29" pos:end="747:30">()</argument_list></call></expr>;</expr_stmt>
	<return pos:start="748:9" pos:end="748:19">return <expr pos:start="748:16" pos:end="748:18"><operator pos:start="748:16" pos:end="748:16">(</operator><literal type="number" pos:start="748:17" pos:end="748:17">0</literal><operator pos:start="748:18" pos:end="748:18">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="750:5" pos:end="750:46"><expr pos:start="750:5" pos:end="750:45"><name pos:start="750:5" pos:end="750:9">b64in</name> <operator pos:start="750:11" pos:end="750:11">=</operator> <call pos:start="750:13" pos:end="750:45"><name pos:start="750:13" pos:end="750:27">BIO_new_mem_buf</name><argument_list pos:start="750:28" pos:end="750:45">(<argument pos:start="750:29" pos:end="750:39"><expr pos:start="750:29" pos:end="750:39"><operator pos:start="750:29" pos:end="750:29">(</operator><name pos:start="750:30" pos:end="750:33">char</name> <operator pos:start="750:35" pos:end="750:35">*</operator><operator pos:start="750:36" pos:end="750:36">)</operator><name pos:start="750:37" pos:end="750:39">src</name></expr></argument>, <argument pos:start="750:42" pos:end="750:44"><expr pos:start="750:42" pos:end="750:44"><name pos:start="750:42" pos:end="750:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if_stmt pos:start="751:5" pos:end="755:5"><if pos:start="751:5" pos:end="755:5">if <condition pos:start="751:8" pos:end="751:22">(<expr pos:start="751:9" pos:end="751:21"><name pos:start="751:9" pos:end="751:13">b64in</name> <operator pos:start="751:15" pos:end="751:16">==</operator> <name pos:start="751:18" pos:end="751:21">NULL</name></expr>)</condition> <block pos:start="751:24" pos:end="755:5">{<block_content pos:start="752:9" pos:end="754:19">
        <expr_stmt pos:start="752:9" pos:end="752:73"><expr pos:start="752:9" pos:end="752:72"><call pos:start="752:9" pos:end="752:72"><name pos:start="752:9" pos:end="752:19">EST_LOG_ERR</name><argument_list pos:start="752:20" pos:end="752:72">(<argument pos:start="752:21" pos:end="752:71"><expr pos:start="752:21" pos:end="752:71"><literal type="string" pos:start="752:21" pos:end="752:71">"BIO_new failed while attempting to create mem BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="753:9" pos:end="753:31"><expr pos:start="753:9" pos:end="753:30"><call pos:start="753:9" pos:end="753:30"><name pos:start="753:9" pos:end="753:28">ossl_dump_ssl_errors</name><argument_list pos:start="753:29" pos:end="753:30">()</argument_list></call></expr>;</expr_stmt>
	<return pos:start="754:9" pos:end="754:19">return <expr pos:start="754:16" pos:end="754:18"><operator pos:start="754:16" pos:end="754:16">(</operator><literal type="number" pos:start="754:17" pos:end="754:17">0</literal><operator pos:start="754:18" pos:end="754:18">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="756:5" pos:end="763:5"><if pos:start="756:5" pos:end="763:5">if <condition pos:start="756:8" pos:end="756:43">(<expr pos:start="756:9" pos:end="756:42"><operator pos:start="756:9" pos:end="756:9">!</operator><call pos:start="756:10" pos:end="756:42"><name pos:start="756:10" pos:end="756:31">est_base64_contains_nl</name> <argument_list pos:start="756:33" pos:end="756:42">(<argument pos:start="756:34" pos:end="756:36"><expr pos:start="756:34" pos:end="756:36"><name pos:start="756:34" pos:end="756:36">src</name></expr></argument>, <argument pos:start="756:39" pos:end="756:41"><expr pos:start="756:39" pos:end="756:41"><name pos:start="756:39" pos:end="756:41">len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="756:45" pos:end="763:5">{<block_content pos:start="762:9" pos:end="762:50">
	<comment type="block" pos:start="757:9" pos:end="761:11">/*
	 * Enable the no newlines option if the input
	 * data doesn't contain any newline characters.
	 * It's too bad OpenSSL doesn't do this implicitly.
	 */</comment>
        <expr_stmt pos:start="762:9" pos:end="762:50"><expr pos:start="762:9" pos:end="762:49"><call pos:start="762:9" pos:end="762:49"><name pos:start="762:9" pos:end="762:21">BIO_set_flags</name><argument_list pos:start="762:22" pos:end="762:49">(<argument pos:start="762:23" pos:end="762:25"><expr pos:start="762:23" pos:end="762:25"><name pos:start="762:23" pos:end="762:25">b64</name></expr></argument>,<argument pos:start="762:27" pos:end="762:48"><expr pos:start="762:27" pos:end="762:48"><name pos:start="762:27" pos:end="762:48">BIO_FLAGS_BASE64_NO_NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="764:5" pos:end="764:33"><expr pos:start="764:5" pos:end="764:32"><name pos:start="764:5" pos:end="764:9">b64in</name> <operator pos:start="764:11" pos:end="764:11">=</operator> <call pos:start="764:13" pos:end="764:32"><name pos:start="764:13" pos:end="764:20">BIO_push</name><argument_list pos:start="764:21" pos:end="764:32">(<argument pos:start="764:22" pos:end="764:24"><expr pos:start="764:22" pos:end="764:24"><name pos:start="764:22" pos:end="764:24">b64</name></expr></argument>, <argument pos:start="764:27" pos:end="764:31"><expr pos:start="764:27" pos:end="764:31"><name pos:start="764:27" pos:end="764:31">b64in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="765:5" pos:end="765:41"><expr pos:start="765:5" pos:end="765:40"><name pos:start="765:5" pos:end="765:7">len</name> <operator pos:start="765:9" pos:end="765:9">=</operator> <call pos:start="765:11" pos:end="765:40"><name pos:start="765:11" pos:end="765:18">BIO_read</name><argument_list pos:start="765:19" pos:end="765:40">(<argument pos:start="765:20" pos:end="765:24"><expr pos:start="765:20" pos:end="765:24"><name pos:start="765:20" pos:end="765:24">b64in</name></expr></argument>, <argument pos:start="765:27" pos:end="765:29"><expr pos:start="765:27" pos:end="765:29"><name pos:start="765:27" pos:end="765:29">dst</name></expr></argument>, <argument pos:start="765:32" pos:end="765:39"><expr pos:start="765:32" pos:end="765:39"><name pos:start="765:32" pos:end="765:39">dst_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="766:5" pos:end="773:5"><if pos:start="766:5" pos:end="768:5">if <condition pos:start="766:8" pos:end="766:17">(<expr pos:start="766:9" pos:end="766:16"><name pos:start="766:9" pos:end="766:11">len</name> <operator pos:start="766:13" pos:end="766:14">&lt;=</operator> <literal type="number" pos:start="766:16" pos:end="766:16">0</literal></expr>)</condition> <block pos:start="766:19" pos:end="768:5">{<block_content pos:start="767:9" pos:end="767:77">
	<expr_stmt pos:start="767:9" pos:end="767:77"><expr pos:start="767:9" pos:end="767:76"><call pos:start="767:9" pos:end="767:76"><name pos:start="767:9" pos:end="767:20">EST_LOG_WARN</name><argument_list pos:start="767:21" pos:end="767:76">(<argument pos:start="767:22" pos:end="767:70"><expr pos:start="767:22" pos:end="767:70"><literal type="string" pos:start="767:22" pos:end="767:70">"BIO_read failed while decoding base64 data (%d)"</literal></expr></argument>, <argument pos:start="767:73" pos:end="767:75"><expr pos:start="767:73" pos:end="767:75"><name pos:start="767:73" pos:end="767:75">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="768:7" pos:end="773:5">else <block pos:start="768:12" pos:end="773:5">{<block_content pos:start="772:9" pos:end="772:21">
        <comment type="block" pos:start="769:9" pos:end="771:11">/*
         * Make sure the response is null terminated
         */</comment>
        <expr_stmt pos:start="772:9" pos:end="772:21"><expr pos:start="772:9" pos:end="772:20"><name pos:start="772:9" pos:end="772:16"><name pos:start="772:9" pos:end="772:11">dst</name><index pos:start="772:12" pos:end="772:16">[<expr pos:start="772:13" pos:end="772:15"><name pos:start="772:13" pos:end="772:15">len</name></expr>]</index></name> <operator pos:start="772:18" pos:end="772:18">=</operator> <literal type="number" pos:start="772:20" pos:end="772:20">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="775:5" pos:end="775:24"><expr pos:start="775:5" pos:end="775:23"><call pos:start="775:5" pos:end="775:23"><name pos:start="775:5" pos:end="775:16">BIO_free_all</name><argument_list pos:start="775:17" pos:end="775:23">(<argument pos:start="775:18" pos:end="775:22"><expr pos:start="775:18" pos:end="775:22"><name pos:start="775:18" pos:end="775:22">b64in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="776:5" pos:end="776:17">return <expr pos:start="776:12" pos:end="776:16"><operator pos:start="776:12" pos:end="776:12">(</operator><name pos:start="776:13" pos:end="776:15">len</name><operator pos:start="776:16" pos:end="776:16">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="778:1" pos:end="785:3">/*
 * This routine is used to encode base64 data.
 * Pass in the unencoded data, the length of the source buffer,
 * and a pointer to a buffer to receive the encoded data.
 * The length of the encoded data is returned.  If the return value
 * is zero, then an error occurred.  The max_dest_len parameter
 * is the maximum allowed size of the encoded data.
 */</comment>
<function pos:start="786:1" pos:end="853:1"><type pos:start="786:1" pos:end="786:3"><name pos:start="786:1" pos:end="786:3">int</name></type> <name pos:start="786:5" pos:end="786:21">est_base64_encode</name> <parameter_list pos:start="786:23" pos:end="787:39">(<parameter pos:start="786:24" pos:end="786:38"><decl pos:start="786:24" pos:end="786:38"><type pos:start="786:24" pos:end="786:38"><specifier pos:start="786:24" pos:end="786:28">const</specifier> <name pos:start="786:30" pos:end="786:33">char</name> <modifier pos:start="786:35" pos:end="786:35">*</modifier></type><name pos:start="786:36" pos:end="786:38">src</name></decl></parameter>, <parameter pos:start="786:41" pos:end="786:58"><decl pos:start="786:41" pos:end="786:58"><type pos:start="786:41" pos:end="786:58"><name pos:start="786:41" pos:end="786:43">int</name></type> <name pos:start="786:45" pos:end="786:58">actual_src_len</name></decl></parameter>, <parameter pos:start="786:61" pos:end="786:69"><decl pos:start="786:61" pos:end="786:69"><type pos:start="786:61" pos:end="786:69"><name pos:start="786:61" pos:end="786:64">char</name> <modifier pos:start="786:66" pos:end="786:66">*</modifier></type><name pos:start="786:67" pos:end="786:69">dst</name></decl></parameter>,
                       <parameter pos:start="787:24" pos:end="787:38"><decl pos:start="787:24" pos:end="787:38"><type pos:start="787:24" pos:end="787:38"><name pos:start="787:24" pos:end="787:26">int</name></type> <name pos:start="787:28" pos:end="787:38">max_dst_len</name></decl></parameter>)</parameter_list>
<block pos:start="788:1" pos:end="853:1">{<block_content pos:start="789:5" pos:end="852:28">
    <decl_stmt pos:start="789:5" pos:end="789:13"><decl pos:start="789:5" pos:end="789:12"><type pos:start="789:5" pos:end="789:9"><name pos:start="789:5" pos:end="789:7">BIO</name> <modifier pos:start="789:9" pos:end="789:9">*</modifier></type><name pos:start="789:10" pos:end="789:12">b64</name></decl>;</decl_stmt>
    <decl_stmt pos:start="790:5" pos:end="790:13"><decl pos:start="790:5" pos:end="790:12"><type pos:start="790:5" pos:end="790:9"><name pos:start="790:5" pos:end="790:7">BIO</name> <modifier pos:start="790:9" pos:end="790:9">*</modifier></type><name pos:start="790:10" pos:end="790:12">out</name></decl>;</decl_stmt>
    <decl_stmt pos:start="791:5" pos:end="791:20"><decl pos:start="791:5" pos:end="791:19"><type pos:start="791:5" pos:end="791:7"><name pos:start="791:5" pos:end="791:7">int</name></type> <name pos:start="791:9" pos:end="791:19">max_src_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="792:5" pos:end="792:27"><decl pos:start="792:5" pos:end="792:26"><type pos:start="792:5" pos:end="792:7"><name pos:start="792:5" pos:end="792:7">int</name></type> <name pos:start="792:9" pos:end="792:22">actual_dst_len</name> <init pos:start="792:24" pos:end="792:26">= <expr pos:start="792:26" pos:end="792:26"><literal type="number" pos:start="792:26" pos:end="792:26">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="793:5" pos:end="793:22"><decl pos:start="793:5" pos:end="793:21"><type pos:start="793:5" pos:end="793:7"><name pos:start="793:5" pos:end="793:7">int</name></type> <name pos:start="793:9" pos:end="793:17">write_cnt</name> <init pos:start="793:19" pos:end="793:21">= <expr pos:start="793:21" pos:end="793:21"><literal type="number" pos:start="793:21" pos:end="793:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="794:5" pos:end="794:25"><decl pos:start="794:5" pos:end="794:24"><type pos:start="794:5" pos:end="794:13"><name pos:start="794:5" pos:end="794:11">BUF_MEM</name> <modifier pos:start="794:13" pos:end="794:13">*</modifier></type><name pos:start="794:14" pos:end="794:17">bptr</name> <init pos:start="794:19" pos:end="794:24">= <expr pos:start="794:21" pos:end="794:24"><name pos:start="794:21" pos:end="794:24">NULL</name></expr></init></decl>;</decl_stmt>
    
    <comment type="block" pos:start="796:5" pos:end="801:7">/*
     * When encoding base64, the output will always be larger by a
     * ratio of 3:4.  Determine what the max size can be for the input
     * based on the size of the given output buffer and then make sure that
     * the actual input buffer is not too big.
     */</comment>
    <expr_stmt pos:start="802:5" pos:end="802:46"><expr pos:start="802:5" pos:end="802:45"><name pos:start="802:5" pos:end="802:15">max_src_len</name> <operator pos:start="802:17" pos:end="802:17">=</operator> <operator pos:start="802:19" pos:end="802:19">(</operator><operator pos:start="802:20" pos:end="802:20">(</operator><name pos:start="802:21" pos:end="802:31">max_dst_len</name> <operator pos:start="802:33" pos:end="802:33">*</operator> <literal type="number" pos:start="802:35" pos:end="802:35">3</literal><operator pos:start="802:36" pos:end="802:36">)</operator> <operator pos:start="802:38" pos:end="802:38">/</operator> <literal type="number" pos:start="802:40" pos:end="802:40">4</literal><operator pos:start="802:41" pos:end="802:41">)</operator> <operator pos:start="802:43" pos:end="802:43">+</operator> <literal type="number" pos:start="802:45" pos:end="802:45">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="803:5" pos:end="808:5"><if pos:start="803:5" pos:end="808:5">if <condition pos:start="803:8" pos:end="803:37">(<expr pos:start="803:9" pos:end="803:36"><name pos:start="803:9" pos:end="803:22">actual_src_len</name> <operator pos:start="803:24" pos:end="803:24">&gt;</operator> <name pos:start="803:26" pos:end="803:36">max_src_len</name></expr>)</condition> <block pos:start="803:39" pos:end="808:5">{<block_content pos:start="804:9" pos:end="807:17">
        <expr_stmt pos:start="804:9" pos:end="806:49"><expr pos:start="804:9" pos:end="806:48"><call pos:start="804:9" pos:end="806:48"><name pos:start="804:9" pos:end="804:19">EST_LOG_ERR</name><argument_list pos:start="804:20" pos:end="806:48">(<argument pos:start="804:21" pos:end="805:65"><expr pos:start="804:21" pos:end="805:65"><literal type="string" pos:start="804:21" pos:end="804:91">"Source buffer for base64 encode is loo large for destination buffer. "</literal>
                    <literal type="string" pos:start="805:21" pos:end="805:65">"max source len = %d, actual_source len = %d"</literal></expr></argument>,
                    <argument pos:start="806:21" pos:end="806:31"><expr pos:start="806:21" pos:end="806:31"><name pos:start="806:21" pos:end="806:31">max_src_len</name></expr></argument>, <argument pos:start="806:34" pos:end="806:47"><expr pos:start="806:34" pos:end="806:47"><name pos:start="806:34" pos:end="806:47">actual_src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="807:9" pos:end="807:17">return <expr pos:start="807:16" pos:end="807:16"><literal type="number" pos:start="807:16" pos:end="807:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="810:5" pos:end="810:34"><expr pos:start="810:5" pos:end="810:33"><name pos:start="810:5" pos:end="810:7">b64</name> <operator pos:start="810:9" pos:end="810:9">=</operator> <call pos:start="810:11" pos:end="810:33"><name pos:start="810:11" pos:end="810:17">BIO_new</name><argument_list pos:start="810:18" pos:end="810:33">(<argument pos:start="810:19" pos:end="810:32"><expr pos:start="810:19" pos:end="810:32"><call pos:start="810:19" pos:end="810:32"><name pos:start="810:19" pos:end="810:30">BIO_f_base64</name><argument_list pos:start="810:31" pos:end="810:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="811:5" pos:end="815:5"><if pos:start="811:5" pos:end="815:5">if <condition pos:start="811:8" pos:end="811:20">(<expr pos:start="811:9" pos:end="811:19"><name pos:start="811:9" pos:end="811:11">b64</name> <operator pos:start="811:13" pos:end="811:14">==</operator> <name pos:start="811:16" pos:end="811:19">NULL</name></expr>)</condition> <block pos:start="811:22" pos:end="815:5">{<block_content pos:start="812:9" pos:end="814:17">
        <expr_stmt pos:start="812:9" pos:end="812:76"><expr pos:start="812:9" pos:end="812:75"><call pos:start="812:9" pos:end="812:75"><name pos:start="812:9" pos:end="812:19">EST_LOG_ERR</name><argument_list pos:start="812:20" pos:end="812:75">(<argument pos:start="812:21" pos:end="812:74"><expr pos:start="812:21" pos:end="812:74"><literal type="string" pos:start="812:21" pos:end="812:74">"BIO_new failed while attempting to create base64 BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="813:9" pos:end="813:31"><expr pos:start="813:9" pos:end="813:30"><call pos:start="813:9" pos:end="813:30"><name pos:start="813:9" pos:end="813:28">ossl_dump_ssl_errors</name><argument_list pos:start="813:29" pos:end="813:30">()</argument_list></call></expr>;</expr_stmt>
        <return pos:start="814:9" pos:end="814:17">return <expr pos:start="814:16" pos:end="814:16"><literal type="number" pos:start="814:16" pos:end="814:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>    

    <expr_stmt pos:start="817:5" pos:end="817:31"><expr pos:start="817:5" pos:end="817:30"><name pos:start="817:5" pos:end="817:7">out</name> <operator pos:start="817:9" pos:end="817:9">=</operator> <call pos:start="817:11" pos:end="817:30"><name pos:start="817:11" pos:end="817:17">BIO_new</name><argument_list pos:start="817:18" pos:end="817:30">(<argument pos:start="817:19" pos:end="817:29"><expr pos:start="817:19" pos:end="817:29"><call pos:start="817:19" pos:end="817:29"><name pos:start="817:19" pos:end="817:27">BIO_s_mem</name><argument_list pos:start="817:28" pos:end="817:29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="818:5" pos:end="823:5"><if pos:start="818:5" pos:end="823:5">if <condition pos:start="818:8" pos:end="818:20">(<expr pos:start="818:9" pos:end="818:19"><name pos:start="818:9" pos:end="818:11">out</name> <operator pos:start="818:13" pos:end="818:14">==</operator> <name pos:start="818:16" pos:end="818:19">NULL</name></expr>)</condition> <block pos:start="818:22" pos:end="823:5">{<block_content pos:start="819:9" pos:end="822:17">
        <expr_stmt pos:start="819:9" pos:end="819:79"><expr pos:start="819:9" pos:end="819:78"><call pos:start="819:9" pos:end="819:78"><name pos:start="819:9" pos:end="819:19">EST_LOG_ERR</name><argument_list pos:start="819:20" pos:end="819:78">(<argument pos:start="819:21" pos:end="819:77"><expr pos:start="819:21" pos:end="819:77"><literal type="string" pos:start="819:21" pos:end="819:77">"BIO_new failed while attempting to create mem based BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="820:9" pos:end="820:31"><expr pos:start="820:9" pos:end="820:30"><call pos:start="820:9" pos:end="820:30"><name pos:start="820:9" pos:end="820:28">ossl_dump_ssl_errors</name><argument_list pos:start="820:29" pos:end="820:30">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="821:9" pos:end="821:26"><expr pos:start="821:9" pos:end="821:25"><call pos:start="821:9" pos:end="821:25"><name pos:start="821:9" pos:end="821:20">BIO_free_all</name><argument_list pos:start="821:21" pos:end="821:25">(<argument pos:start="821:22" pos:end="821:24"><expr pos:start="821:22" pos:end="821:24"><name pos:start="821:22" pos:end="821:24">b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="822:9" pos:end="822:17">return <expr pos:start="822:16" pos:end="822:16"><literal type="number" pos:start="822:16" pos:end="822:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="824:5" pos:end="824:29"><expr pos:start="824:5" pos:end="824:28"><name pos:start="824:5" pos:end="824:7">out</name> <operator pos:start="824:9" pos:end="824:9">=</operator> <call pos:start="824:11" pos:end="824:28"><name pos:start="824:11" pos:end="824:18">BIO_push</name><argument_list pos:start="824:19" pos:end="824:28">(<argument pos:start="824:20" pos:end="824:22"><expr pos:start="824:20" pos:end="824:22"><name pos:start="824:20" pos:end="824:22">b64</name></expr></argument>, <argument pos:start="824:25" pos:end="824:27"><expr pos:start="824:25" pos:end="824:27"><name pos:start="824:25" pos:end="824:27">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="826:5" pos:end="828:7">/*
     * We don't ever insert new lines
     */</comment>
    <expr_stmt pos:start="829:5" pos:end="829:47"><expr pos:start="829:5" pos:end="829:46"><call pos:start="829:5" pos:end="829:46"><name pos:start="829:5" pos:end="829:17">BIO_set_flags</name><argument_list pos:start="829:18" pos:end="829:46">(<argument pos:start="829:19" pos:end="829:21"><expr pos:start="829:19" pos:end="829:21"><name pos:start="829:19" pos:end="829:21">out</name></expr></argument>, <argument pos:start="829:24" pos:end="829:45"><expr pos:start="829:24" pos:end="829:45"><name pos:start="829:24" pos:end="829:45">BIO_FLAGS_BASE64_NO_NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="831:5" pos:end="835:7">/*
     * Write the source buffer through the BIOs and then get a pointer
     * to the resulting memory buffer on the other side to obtain the
     * result.
     */</comment>
    <expr_stmt pos:start="836:5" pos:end="836:52"><expr pos:start="836:5" pos:end="836:51"><name pos:start="836:5" pos:end="836:13">write_cnt</name> <operator pos:start="836:15" pos:end="836:15">=</operator> <call pos:start="836:17" pos:end="836:51"><name pos:start="836:17" pos:end="836:25">BIO_write</name><argument_list pos:start="836:26" pos:end="836:51">(<argument pos:start="836:27" pos:end="836:29"><expr pos:start="836:27" pos:end="836:29"><name pos:start="836:27" pos:end="836:29">out</name></expr></argument>, <argument pos:start="836:32" pos:end="836:34"><expr pos:start="836:32" pos:end="836:34"><name pos:start="836:32" pos:end="836:34">src</name></expr></argument>, <argument pos:start="836:37" pos:end="836:50"><expr pos:start="836:37" pos:end="836:50"><name pos:start="836:37" pos:end="836:50">actual_src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="837:5" pos:end="837:25"><expr pos:start="837:5" pos:end="837:24"><operator pos:start="837:5" pos:end="837:5">(</operator><name pos:start="837:6" pos:end="837:9">void</name><operator pos:start="837:10" pos:end="837:10">)</operator><call pos:start="837:11" pos:end="837:24"><name pos:start="837:11" pos:end="837:19">BIO_flush</name><argument_list pos:start="837:20" pos:end="837:24">(<argument pos:start="837:21" pos:end="837:23"><expr pos:start="837:21" pos:end="837:23"><name pos:start="837:21" pos:end="837:23">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="838:5" pos:end="838:32"><expr pos:start="838:5" pos:end="838:31"><call pos:start="838:5" pos:end="838:31"><name pos:start="838:5" pos:end="838:19">BIO_get_mem_ptr</name><argument_list pos:start="838:20" pos:end="838:31">(<argument pos:start="838:21" pos:end="838:23"><expr pos:start="838:21" pos:end="838:23"><name pos:start="838:21" pos:end="838:23">out</name></expr></argument>, <argument pos:start="838:26" pos:end="838:30"><expr pos:start="838:26" pos:end="838:30"><operator pos:start="838:26" pos:end="838:26">&amp;</operator><name pos:start="838:27" pos:end="838:30">bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="839:5" pos:end="849:5"><if pos:start="839:5" pos:end="841:5">if <condition pos:start="839:8" pos:end="839:23">(<expr pos:start="839:9" pos:end="839:22"><name pos:start="839:9" pos:end="839:17">write_cnt</name> <operator pos:start="839:19" pos:end="839:20">&lt;=</operator> <literal type="number" pos:start="839:22" pos:end="839:22">0</literal></expr>)</condition> <block pos:start="839:25" pos:end="841:5">{<block_content pos:start="840:9" pos:end="840:84">
	<expr_stmt pos:start="840:9" pos:end="840:84"><expr pos:start="840:9" pos:end="840:83"><call pos:start="840:9" pos:end="840:83"><name pos:start="840:9" pos:end="840:20">EST_LOG_WARN</name><argument_list pos:start="840:21" pos:end="840:83">(<argument pos:start="840:22" pos:end="840:71"><expr pos:start="840:22" pos:end="840:71"><literal type="string" pos:start="840:22" pos:end="840:71">"BIO_write failed while encoding base64 data (%d)"</literal></expr></argument>, <argument pos:start="840:74" pos:end="840:82"><expr pos:start="840:74" pos:end="840:82"><name pos:start="840:74" pos:end="840:82">write_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="841:7" pos:end="849:5">else <block pos:start="841:12" pos:end="849:5">{<block_content pos:start="846:9" pos:end="848:38">
        <comment type="block" pos:start="842:9" pos:end="845:11">/*
         * copy out the resulting base64 encoded string, make sure it's
         * null terminated, and return the length
         */</comment>
        <expr_stmt pos:start="846:9" pos:end="846:61"><expr pos:start="846:9" pos:end="846:60"><call pos:start="846:9" pos:end="846:60"><name pos:start="846:9" pos:end="846:16">memcpy_s</name><argument_list pos:start="846:17" pos:end="846:60">(<argument pos:start="846:18" pos:end="846:20"><expr pos:start="846:18" pos:end="846:20"><name pos:start="846:18" pos:end="846:20">dst</name></expr></argument>, <argument pos:start="846:23" pos:end="846:33"><expr pos:start="846:23" pos:end="846:33"><name pos:start="846:23" pos:end="846:33">max_dst_len</name></expr></argument>, <argument pos:start="846:36" pos:end="846:45"><expr pos:start="846:36" pos:end="846:45"><name pos:start="846:36" pos:end="846:45"><name pos:start="846:36" pos:end="846:39">bptr</name><operator pos:start="846:40" pos:end="846:41">-&gt;</operator><name pos:start="846:42" pos:end="846:45">data</name></name></expr></argument>, <argument pos:start="846:48" pos:end="846:59"><expr pos:start="846:48" pos:end="846:59"><name pos:start="846:48" pos:end="846:59"><name pos:start="846:48" pos:end="846:51">bptr</name><operator pos:start="846:52" pos:end="846:53">-&gt;</operator><name pos:start="846:54" pos:end="846:59">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="847:9" pos:end="847:33"><expr pos:start="847:9" pos:end="847:32"><name pos:start="847:9" pos:end="847:25"><name pos:start="847:9" pos:end="847:11">dst</name><index pos:start="847:12" pos:end="847:25">[<expr pos:start="847:13" pos:end="847:24"><name pos:start="847:13" pos:end="847:24"><name pos:start="847:13" pos:end="847:16">bptr</name><operator pos:start="847:17" pos:end="847:18">-&gt;</operator><name pos:start="847:19" pos:end="847:24">length</name></name></expr>]</index></name> <operator pos:start="847:27" pos:end="847:27">=</operator> <literal type="char" pos:start="847:29" pos:end="847:32">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="848:9" pos:end="848:38"><expr pos:start="848:9" pos:end="848:37"><name pos:start="848:9" pos:end="848:22">actual_dst_len</name> <operator pos:start="848:24" pos:end="848:24">=</operator> <name pos:start="848:26" pos:end="848:37"><name pos:start="848:26" pos:end="848:29">bptr</name><operator pos:start="848:30" pos:end="848:31">-&gt;</operator><name pos:start="848:32" pos:end="848:37">length</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="851:5" pos:end="851:22"><expr pos:start="851:5" pos:end="851:21"><call pos:start="851:5" pos:end="851:21"><name pos:start="851:5" pos:end="851:16">BIO_free_all</name><argument_list pos:start="851:17" pos:end="851:21">(<argument pos:start="851:18" pos:end="851:20"><expr pos:start="851:18" pos:end="851:20"><name pos:start="851:18" pos:end="851:20">b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="852:5" pos:end="852:28">return <expr pos:start="852:12" pos:end="852:27"><operator pos:start="852:12" pos:end="852:12">(</operator><name pos:start="852:13" pos:end="852:26">actual_dst_len</name><operator pos:start="852:27" pos:end="852:27">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="854:1" pos:end="861:3">/*
 * This routine is used to encode base64 data.
 * Pass in the unencoded data, the length of the source buffer,
 * and a pointer to a buffer to receive the encoded data.
 * The length of the encoded data is returned.  If the return value
 * is zero, then an error occurred.  The max_dest_len parameter
 * is the maximum allowed size of the encoded data.
 */</comment>
<function pos:start="862:1" pos:end="920:1"><type pos:start="862:1" pos:end="862:6"><name pos:start="862:1" pos:end="862:4">char</name> <modifier pos:start="862:6" pos:end="862:6">*</modifier></type> <name pos:start="862:8" pos:end="862:22">est_get_tls_uid</name> <parameter_list pos:start="862:24" pos:end="862:48">(<parameter pos:start="862:25" pos:end="862:32"><decl pos:start="862:25" pos:end="862:32"><type pos:start="862:25" pos:end="862:32"><name pos:start="862:25" pos:end="862:27">SSL</name> <modifier pos:start="862:29" pos:end="862:29">*</modifier></type><name pos:start="862:30" pos:end="862:32">ssl</name></decl></parameter>, <parameter pos:start="862:35" pos:end="862:47"><decl pos:start="862:35" pos:end="862:47"><type pos:start="862:35" pos:end="862:47"><name pos:start="862:35" pos:end="862:37">int</name></type> <name pos:start="862:39" pos:end="862:47">is_client</name></decl></parameter>)</parameter_list>
<block pos:start="863:1" pos:end="920:1">{<block_content pos:start="864:5" pos:end="919:14">
    <decl_stmt pos:start="864:5" pos:end="864:32"><decl pos:start="864:5" pos:end="864:31"><type pos:start="864:5" pos:end="864:8"><name pos:start="864:5" pos:end="864:8">char</name></type> <name pos:start="864:10" pos:end="864:31"><name pos:start="864:10" pos:end="864:17">finished</name><index pos:start="864:18" pos:end="864:31">[<expr pos:start="864:19" pos:end="864:30"><name pos:start="864:19" pos:end="864:30">MAX_FINISHED</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="865:5" pos:end="865:33"><decl pos:start="865:5" pos:end="865:19"><type pos:start="865:5" pos:end="865:9"><name pos:start="865:5" pos:end="865:7">BIO</name> <modifier pos:start="865:9" pos:end="865:9">*</modifier></type><name pos:start="865:10" pos:end="865:12">bio</name> <init pos:start="865:14" pos:end="865:19">= <expr pos:start="865:16" pos:end="865:19"><name pos:start="865:16" pos:end="865:19">NULL</name></expr></init></decl>, <decl pos:start="865:22" pos:end="865:32"><type ref="prev" pos:start="865:5" pos:end="865:9"><modifier pos:start="865:22" pos:end="865:22">*</modifier></type><name pos:start="865:23" pos:end="865:25">b64</name> <init pos:start="865:27" pos:end="865:32">= <expr pos:start="865:29" pos:end="865:32"><name pos:start="865:29" pos:end="865:32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="866:5" pos:end="866:25"><decl pos:start="866:5" pos:end="866:24"><type pos:start="866:5" pos:end="866:13"><name pos:start="866:5" pos:end="866:11">BUF_MEM</name> <modifier pos:start="866:13" pos:end="866:13">*</modifier></type><name pos:start="866:14" pos:end="866:17">bptr</name> <init pos:start="866:19" pos:end="866:24">= <expr pos:start="866:21" pos:end="866:24"><name pos:start="866:21" pos:end="866:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="867:5" pos:end="867:12"><decl pos:start="867:5" pos:end="867:11"><type pos:start="867:5" pos:end="867:7"><name pos:start="867:5" pos:end="867:7">int</name></type> <name pos:start="867:9" pos:end="867:11">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="868:5" pos:end="868:20"><decl pos:start="868:5" pos:end="868:19"><type pos:start="868:5" pos:end="868:10"><name pos:start="868:5" pos:end="868:8">char</name> <modifier pos:start="868:10" pos:end="868:10">*</modifier></type><name pos:start="868:11" pos:end="868:12">rv</name> <init pos:start="868:14" pos:end="868:19">= <expr pos:start="868:16" pos:end="868:19"><name pos:start="868:16" pos:end="868:19">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="870:5" pos:end="875:7">/*
     * RFC5929 states the *first* finished message is used
     * to derive the tls-unique-id.  When session resumption
     * is used, the server sends the first finished message.
     * Normally the client sends the first finished messaged.
     */</comment>
    <if_stmt pos:start="876:5" pos:end="881:5"><if pos:start="876:5" pos:end="879:5">if <condition pos:start="876:8" pos:end="877:48">(<expr pos:start="876:9" pos:end="877:47"><operator pos:start="876:9" pos:end="876:9">(</operator><name pos:start="876:10" pos:end="876:18">is_client</name> <operator pos:start="876:20" pos:end="876:21">&amp;&amp;</operator> <operator pos:start="876:23" pos:end="876:23">!</operator><call pos:start="876:24" pos:end="876:46"><name pos:start="876:24" pos:end="876:41">SSL_session_reused</name><argument_list pos:start="876:42" pos:end="876:46">(<argument pos:start="876:43" pos:end="876:45"><expr pos:start="876:43" pos:end="876:45"><name pos:start="876:43" pos:end="876:45">ssl</name></expr></argument>)</argument_list></call><operator pos:start="876:47" pos:end="876:47">)</operator> <operator pos:start="876:49" pos:end="876:50">||</operator>
        <operator pos:start="877:9" pos:end="877:9">(</operator><operator pos:start="877:10" pos:end="877:10">!</operator><name pos:start="877:11" pos:end="877:19">is_client</name> <operator pos:start="877:21" pos:end="877:22">&amp;&amp;</operator> <call pos:start="877:24" pos:end="877:46"><name pos:start="877:24" pos:end="877:41">SSL_session_reused</name><argument_list pos:start="877:42" pos:end="877:46">(<argument pos:start="877:43" pos:end="877:45"><expr pos:start="877:43" pos:end="877:45"><name pos:start="877:43" pos:end="877:45">ssl</name></expr></argument>)</argument_list></call><operator pos:start="877:47" pos:end="877:47">)</operator></expr>)</condition> <block pos:start="877:50" pos:end="879:5">{<block_content pos:start="878:9" pos:end="878:66">
        <expr_stmt pos:start="878:9" pos:end="878:66"><expr pos:start="878:9" pos:end="878:65"><name pos:start="878:9" pos:end="878:11">len</name> <operator pos:start="878:13" pos:end="878:13">=</operator> <operator pos:start="878:15" pos:end="878:15">(</operator><name pos:start="878:16" pos:end="878:18">int</name><operator pos:start="878:19" pos:end="878:19">)</operator> <call pos:start="878:21" pos:end="878:65"><name pos:start="878:21" pos:end="878:36">SSL_get_finished</name><argument_list pos:start="878:37" pos:end="878:65">(<argument pos:start="878:38" pos:end="878:40"><expr pos:start="878:38" pos:end="878:40"><name pos:start="878:38" pos:end="878:40">ssl</name></expr></argument>, <argument pos:start="878:43" pos:end="878:50"><expr pos:start="878:43" pos:end="878:50"><name pos:start="878:43" pos:end="878:50">finished</name></expr></argument>, <argument pos:start="878:53" pos:end="878:64"><expr pos:start="878:53" pos:end="878:64"><name pos:start="878:53" pos:end="878:64">MAX_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="879:7" pos:end="881:5">else <block pos:start="879:12" pos:end="881:5">{<block_content pos:start="880:9" pos:end="880:71">
        <expr_stmt pos:start="880:9" pos:end="880:71"><expr pos:start="880:9" pos:end="880:70"><name pos:start="880:9" pos:end="880:11">len</name> <operator pos:start="880:13" pos:end="880:13">=</operator> <operator pos:start="880:15" pos:end="880:15">(</operator><name pos:start="880:16" pos:end="880:18">int</name><operator pos:start="880:19" pos:end="880:19">)</operator> <call pos:start="880:21" pos:end="880:70"><name pos:start="880:21" pos:end="880:41">SSL_get_peer_finished</name><argument_list pos:start="880:42" pos:end="880:70">(<argument pos:start="880:43" pos:end="880:45"><expr pos:start="880:43" pos:end="880:45"><name pos:start="880:43" pos:end="880:45">ssl</name></expr></argument>, <argument pos:start="880:48" pos:end="880:55"><expr pos:start="880:48" pos:end="880:55"><name pos:start="880:48" pos:end="880:55">finished</name></expr></argument>, <argument pos:start="880:58" pos:end="880:69"><expr pos:start="880:58" pos:end="880:69"><name pos:start="880:58" pos:end="880:69">MAX_FINISHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="883:5" pos:end="883:34"><expr pos:start="883:5" pos:end="883:33"><name pos:start="883:5" pos:end="883:7">b64</name> <operator pos:start="883:9" pos:end="883:9">=</operator> <call pos:start="883:11" pos:end="883:33"><name pos:start="883:11" pos:end="883:17">BIO_new</name><argument_list pos:start="883:18" pos:end="883:33">(<argument pos:start="883:19" pos:end="883:32"><expr pos:start="883:19" pos:end="883:32"><call pos:start="883:19" pos:end="883:32"><name pos:start="883:19" pos:end="883:30">BIO_f_base64</name><argument_list pos:start="883:31" pos:end="883:32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="884:5" pos:end="888:5"><if pos:start="884:5" pos:end="888:5">if <condition pos:start="884:8" pos:end="884:20">(<expr pos:start="884:9" pos:end="884:19"><name pos:start="884:9" pos:end="884:11">b64</name> <operator pos:start="884:13" pos:end="884:14">==</operator> <name pos:start="884:16" pos:end="884:19">NULL</name></expr>)</condition> <block pos:start="884:22" pos:end="888:5">{<block_content pos:start="885:9" pos:end="887:18">
        <expr_stmt pos:start="885:9" pos:end="885:76"><expr pos:start="885:9" pos:end="885:75"><call pos:start="885:9" pos:end="885:75"><name pos:start="885:9" pos:end="885:19">EST_LOG_ERR</name><argument_list pos:start="885:20" pos:end="885:75">(<argument pos:start="885:21" pos:end="885:74"><expr pos:start="885:21" pos:end="885:74"><literal type="string" pos:start="885:21" pos:end="885:74">"BIO_new failed while attempting to create base64 BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="886:9" pos:end="886:31"><expr pos:start="886:9" pos:end="886:30"><call pos:start="886:9" pos:end="886:30"><name pos:start="886:9" pos:end="886:28">ossl_dump_ssl_errors</name><argument_list pos:start="886:29" pos:end="886:30">()</argument_list></call></expr>;</expr_stmt>
	<return pos:start="887:9" pos:end="887:18">return <expr pos:start="887:16" pos:end="887:17"><name pos:start="887:16" pos:end="887:17">rv</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="889:5" pos:end="889:31"><expr pos:start="889:5" pos:end="889:30"><name pos:start="889:5" pos:end="889:7">bio</name> <operator pos:start="889:9" pos:end="889:9">=</operator> <call pos:start="889:11" pos:end="889:30"><name pos:start="889:11" pos:end="889:17">BIO_new</name><argument_list pos:start="889:18" pos:end="889:30">(<argument pos:start="889:19" pos:end="889:29"><expr pos:start="889:19" pos:end="889:29"><call pos:start="889:19" pos:end="889:29"><name pos:start="889:19" pos:end="889:27">BIO_s_mem</name><argument_list pos:start="889:28" pos:end="889:29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="890:5" pos:end="894:5"><if pos:start="890:5" pos:end="894:5">if <condition pos:start="890:8" pos:end="890:20">(<expr pos:start="890:9" pos:end="890:19"><name pos:start="890:9" pos:end="890:11">bio</name> <operator pos:start="890:13" pos:end="890:14">==</operator> <name pos:start="890:16" pos:end="890:19">NULL</name></expr>)</condition> <block pos:start="890:22" pos:end="894:5">{<block_content pos:start="891:9" pos:end="893:18">
        <expr_stmt pos:start="891:9" pos:end="891:79"><expr pos:start="891:9" pos:end="891:78"><call pos:start="891:9" pos:end="891:78"><name pos:start="891:9" pos:end="891:19">EST_LOG_ERR</name><argument_list pos:start="891:20" pos:end="891:78">(<argument pos:start="891:21" pos:end="891:77"><expr pos:start="891:21" pos:end="891:77"><literal type="string" pos:start="891:21" pos:end="891:77">"BIO_new failed while attempting to create mem based BIO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="892:9" pos:end="892:31"><expr pos:start="892:9" pos:end="892:30"><call pos:start="892:9" pos:end="892:30"><name pos:start="892:9" pos:end="892:28">ossl_dump_ssl_errors</name><argument_list pos:start="892:29" pos:end="892:30">()</argument_list></call></expr>;</expr_stmt>
	<return pos:start="893:9" pos:end="893:18">return <expr pos:start="893:16" pos:end="893:17"><name pos:start="893:16" pos:end="893:17">rv</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="895:5" pos:end="895:25"><expr pos:start="895:5" pos:end="895:24"><operator pos:start="895:5" pos:end="895:5">(</operator><name pos:start="895:6" pos:end="895:9">void</name><operator pos:start="895:10" pos:end="895:10">)</operator><call pos:start="895:11" pos:end="895:24"><name pos:start="895:11" pos:end="895:19">BIO_flush</name><argument_list pos:start="895:20" pos:end="895:24">(<argument pos:start="895:21" pos:end="895:23"><expr pos:start="895:21" pos:end="895:23"><name pos:start="895:21" pos:end="895:23">bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="896:5" pos:end="896:29"><expr pos:start="896:5" pos:end="896:28"><name pos:start="896:5" pos:end="896:7">bio</name> <operator pos:start="896:9" pos:end="896:9">=</operator> <call pos:start="896:11" pos:end="896:28"><name pos:start="896:11" pos:end="896:18">BIO_push</name><argument_list pos:start="896:19" pos:end="896:28">(<argument pos:start="896:20" pos:end="896:22"><expr pos:start="896:20" pos:end="896:22"><name pos:start="896:20" pos:end="896:22">b64</name></expr></argument>, <argument pos:start="896:25" pos:end="896:27"><expr pos:start="896:25" pos:end="896:27"><name pos:start="896:25" pos:end="896:27">bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="897:5" pos:end="897:34"><expr pos:start="897:5" pos:end="897:33"><call pos:start="897:5" pos:end="897:33"><name pos:start="897:5" pos:end="897:13">BIO_write</name><argument_list pos:start="897:14" pos:end="897:33">(<argument pos:start="897:15" pos:end="897:17"><expr pos:start="897:15" pos:end="897:17"><name pos:start="897:15" pos:end="897:17">bio</name></expr></argument>, <argument pos:start="897:20" pos:end="897:27"><expr pos:start="897:20" pos:end="897:27"><name pos:start="897:20" pos:end="897:27">finished</name></expr></argument>, <argument pos:start="897:30" pos:end="897:32"><expr pos:start="897:30" pos:end="897:32"><name pos:start="897:30" pos:end="897:32">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="898:5" pos:end="898:25"><expr pos:start="898:5" pos:end="898:24"><operator pos:start="898:5" pos:end="898:5">(</operator><name pos:start="898:6" pos:end="898:9">void</name><operator pos:start="898:10" pos:end="898:10">)</operator><call pos:start="898:11" pos:end="898:24"><name pos:start="898:11" pos:end="898:19">BIO_flush</name><argument_list pos:start="898:20" pos:end="898:24">(<argument pos:start="898:21" pos:end="898:23"><expr pos:start="898:21" pos:end="898:23"><name pos:start="898:21" pos:end="898:23">bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="899:5" pos:end="899:32"><expr pos:start="899:5" pos:end="899:31"><call pos:start="899:5" pos:end="899:31"><name pos:start="899:5" pos:end="899:19">BIO_get_mem_ptr</name><argument_list pos:start="899:20" pos:end="899:31">(<argument pos:start="899:21" pos:end="899:23"><expr pos:start="899:21" pos:end="899:23"><name pos:start="899:21" pos:end="899:23">bio</name></expr></argument>, <argument pos:start="899:26" pos:end="899:30"><expr pos:start="899:26" pos:end="899:30"><operator pos:start="899:26" pos:end="899:26">&amp;</operator><name pos:start="899:27" pos:end="899:30">bptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="901:5" pos:end="904:7">/*
     * Be aware that OpenSSL adds a newline character at the
     * end of the base64 encoded data
     */</comment>
    <if_stmt pos:start="905:5" pos:end="917:5"><if pos:start="905:5" pos:end="908:5">if <condition pos:start="905:8" pos:end="905:40">(<expr pos:start="905:9" pos:end="905:39"><name pos:start="905:9" pos:end="905:20"><name pos:start="905:9" pos:end="905:12">bptr</name><operator pos:start="905:13" pos:end="905:14">-&gt;</operator><name pos:start="905:15" pos:end="905:20">length</name></name> <operator pos:start="905:22" pos:end="905:23">!=</operator> <name pos:start="905:25" pos:end="905:39">EST_TLS_UID_LEN</name></expr>)</condition> <block pos:start="905:42" pos:end="908:5">{<block_content pos:start="906:9" pos:end="907:38">
        <expr_stmt pos:start="906:9" pos:end="907:38"><expr pos:start="906:9" pos:end="907:37"><call pos:start="906:9" pos:end="907:37"><name pos:start="906:9" pos:end="906:20">EST_LOG_WARN</name><argument_list pos:start="906:21" pos:end="907:37">(<argument pos:start="906:22" pos:end="906:54"><expr pos:start="906:22" pos:end="906:54"><literal type="string" pos:start="906:22" pos:end="906:54">"TLS UID length mismatch (%d/%d)"</literal></expr></argument>, <argument pos:start="906:57" pos:end="906:68"><expr pos:start="906:57" pos:end="906:68"><name pos:start="906:57" pos:end="906:68"><name pos:start="906:57" pos:end="906:60">bptr</name><operator pos:start="906:61" pos:end="906:62">-&gt;</operator><name pos:start="906:63" pos:end="906:68">length</name></name></expr></argument>,
                     <argument pos:start="907:22" pos:end="907:36"><expr pos:start="907:22" pos:end="907:36"><name pos:start="907:22" pos:end="907:36">EST_TLS_UID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="908:7" pos:end="917:5">else <block pos:start="908:12" pos:end="917:5">{<block_content pos:start="909:9" pos:end="916:42">
        <expr_stmt pos:start="909:9" pos:end="909:41"><expr pos:start="909:9" pos:end="909:40"><name pos:start="909:9" pos:end="909:10">rv</name> <operator pos:start="909:12" pos:end="909:12">=</operator> <call pos:start="909:14" pos:end="909:40"><name pos:start="909:14" pos:end="909:19">malloc</name><argument_list pos:start="909:20" pos:end="909:40">(<argument pos:start="909:21" pos:end="909:39"><expr pos:start="909:21" pos:end="909:39"><name pos:start="909:21" pos:end="909:35">EST_TLS_UID_LEN</name> <operator pos:start="909:37" pos:end="909:37">+</operator> <literal type="number" pos:start="909:39" pos:end="909:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="910:9" pos:end="913:9"><if pos:start="910:9" pos:end="913:9">if <condition pos:start="910:12" pos:end="910:23">(<expr pos:start="910:13" pos:end="910:22"><name pos:start="910:13" pos:end="910:14">rv</name> <operator pos:start="910:16" pos:end="910:17">==</operator> <name pos:start="910:19" pos:end="910:22">NULL</name></expr>)</condition> <block pos:start="910:25" pos:end="913:9">{<block_content pos:start="911:13" pos:end="912:22">
            <expr_stmt pos:start="911:13" pos:end="911:53"><expr pos:start="911:13" pos:end="911:52"><call pos:start="911:13" pos:end="911:52"><name pos:start="911:13" pos:end="911:23">EST_LOG_ERR</name><argument_list pos:start="911:24" pos:end="911:52">(<argument pos:start="911:25" pos:end="911:51"><expr pos:start="911:25" pos:end="911:51"><literal type="string" pos:start="911:25" pos:end="911:51">"Failed to allocate buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="912:13" pos:end="912:22">return <expr pos:start="912:20" pos:end="912:21"><name pos:start="912:20" pos:end="912:21">rv</name></expr>;</return>
        </block_content>}</block></if></if_stmt>    
        <expr_stmt pos:start="914:9" pos:end="914:67"><expr pos:start="914:9" pos:end="914:66"><call pos:start="914:9" pos:end="914:66"><name pos:start="914:9" pos:end="914:16">memcpy_s</name><argument_list pos:start="914:17" pos:end="914:66">(<argument pos:start="914:18" pos:end="914:19"><expr pos:start="914:18" pos:end="914:19"><name pos:start="914:18" pos:end="914:19">rv</name></expr></argument>, <argument pos:start="914:22" pos:end="914:36"><expr pos:start="914:22" pos:end="914:36"><name pos:start="914:22" pos:end="914:36">EST_TLS_UID_LEN</name></expr></argument>, <argument pos:start="914:39" pos:end="914:48"><expr pos:start="914:39" pos:end="914:48"><name pos:start="914:39" pos:end="914:48"><name pos:start="914:39" pos:end="914:42">bptr</name><operator pos:start="914:43" pos:end="914:44">-&gt;</operator><name pos:start="914:45" pos:end="914:48">data</name></name></expr></argument>, <argument pos:start="914:51" pos:end="914:65"><expr pos:start="914:51" pos:end="914:65"><name pos:start="914:51" pos:end="914:65">EST_TLS_UID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="915:9" pos:end="915:37"><expr pos:start="915:9" pos:end="915:36"><name pos:start="915:9" pos:end="915:29"><name pos:start="915:9" pos:end="915:10">rv</name><index pos:start="915:11" pos:end="915:29">[<expr pos:start="915:12" pos:end="915:28"><name pos:start="915:12" pos:end="915:26">EST_TLS_UID_LEN</name><operator pos:start="915:27" pos:end="915:27">-</operator><literal type="number" pos:start="915:28" pos:end="915:28">1</literal></expr>]</index></name> <operator pos:start="915:31" pos:end="915:31">=</operator> <literal type="char" pos:start="915:33" pos:end="915:36">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="916:9" pos:end="916:42"><expr pos:start="916:9" pos:end="916:41"><call pos:start="916:9" pos:end="916:41"><name pos:start="916:9" pos:end="916:20">EST_LOG_INFO</name><argument_list pos:start="916:21" pos:end="916:41">(<argument pos:start="916:22" pos:end="916:40"><expr pos:start="916:22" pos:end="916:40"><literal type="string" pos:start="916:22" pos:end="916:40">"TLS UID was found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="918:5" pos:end="918:22"><expr pos:start="918:5" pos:end="918:21"><call pos:start="918:5" pos:end="918:21"><name pos:start="918:5" pos:end="918:16">BIO_free_all</name><argument_list pos:start="918:17" pos:end="918:21">(<argument pos:start="918:18" pos:end="918:20"><expr pos:start="918:18" pos:end="918:20"><name pos:start="918:18" pos:end="918:20">bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="919:5" pos:end="919:14">return <expr pos:start="919:12" pos:end="919:13"><name pos:start="919:12" pos:end="919:13">rv</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="921:1" pos:end="925:3">/*
 * This is a utility function to convert a hex value
 * to a string. This is used with the HTTP digest
 * authentication logic.
 */</comment>
<function pos:start="926:1" pos:end="935:1"><type pos:start="926:1" pos:end="926:4"><name pos:start="926:1" pos:end="926:4">void</name></type> <name pos:start="926:6" pos:end="926:19">est_hex_to_str</name> <parameter_list pos:start="926:21" pos:end="926:60">(<parameter pos:start="926:22" pos:end="926:30"><decl pos:start="926:22" pos:end="926:30"><type pos:start="926:22" pos:end="926:30"><name pos:start="926:22" pos:end="926:25">char</name> <modifier pos:start="926:27" pos:end="926:27">*</modifier></type><name pos:start="926:28" pos:end="926:30">dst</name></decl></parameter>, <parameter pos:start="926:33" pos:end="926:50"><decl pos:start="926:33" pos:end="926:50"><type pos:start="926:33" pos:end="926:50"><name pos:start="926:33" pos:end="926:40">unsigned</name> <name pos:start="926:42" pos:end="926:45">char</name> <modifier pos:start="926:47" pos:end="926:47">*</modifier></type><name pos:start="926:48" pos:end="926:50">src</name></decl></parameter>, <parameter pos:start="926:53" pos:end="926:59"><decl pos:start="926:53" pos:end="926:59"><type pos:start="926:53" pos:end="926:59"><name pos:start="926:53" pos:end="926:55">int</name></type> <name pos:start="926:57" pos:end="926:59">len</name></decl></parameter>)</parameter_list>
<block pos:start="927:1" pos:end="935:1">{<block_content pos:start="928:5" pos:end="934:16">
    <decl_stmt pos:start="928:5" pos:end="928:48"><decl pos:start="928:5" pos:end="928:47"><type pos:start="928:5" pos:end="928:23"><specifier pos:start="928:5" pos:end="928:10">static</specifier> <specifier pos:start="928:12" pos:end="928:16">const</specifier> <name pos:start="928:18" pos:end="928:21">char</name> <modifier pos:start="928:23" pos:end="928:23">*</modifier></type><name pos:start="928:24" pos:end="928:26">hex</name> <init pos:start="928:28" pos:end="928:47">= <expr pos:start="928:30" pos:end="928:47"><literal type="string" pos:start="928:30" pos:end="928:47">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="930:5" pos:end="933:5">for <control pos:start="930:9" pos:end="930:24">(<init pos:start="930:10" pos:end="930:10">;</init> <condition pos:start="930:12" pos:end="930:17"><expr pos:start="930:12" pos:end="930:16"><name pos:start="930:12" pos:end="930:14">len</name><operator pos:start="930:15" pos:end="930:16">--</operator></expr>;</condition> <incr pos:start="930:19" pos:end="930:23"><expr pos:start="930:19" pos:end="930:23"><name pos:start="930:19" pos:end="930:21">src</name><operator pos:start="930:22" pos:end="930:23">++</operator></expr></incr>)</control> <block pos:start="930:26" pos:end="933:5">{<block_content pos:start="931:9" pos:end="932:36">
        <expr_stmt pos:start="931:9" pos:end="931:34"><expr pos:start="931:9" pos:end="931:33"><operator pos:start="931:9" pos:end="931:9">*</operator><name pos:start="931:10" pos:end="931:12">dst</name><operator pos:start="931:13" pos:end="931:14">++</operator> <operator pos:start="931:16" pos:end="931:16">=</operator> <name pos:start="931:18" pos:end="931:33"><name pos:start="931:18" pos:end="931:20">hex</name><index pos:start="931:21" pos:end="931:33">[<expr pos:start="931:22" pos:end="931:32"><name pos:start="931:22" pos:end="931:27"><name pos:start="931:22" pos:end="931:24">src</name><index pos:start="931:25" pos:end="931:27">[<expr pos:start="931:26" pos:end="931:26"><literal type="number" pos:start="931:26" pos:end="931:26">0</literal></expr>]</index></name> <operator pos:start="931:29" pos:end="931:30">&gt;&gt;</operator> <literal type="number" pos:start="931:32" pos:end="931:32">4</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="932:9" pos:end="932:36"><expr pos:start="932:9" pos:end="932:35"><operator pos:start="932:9" pos:end="932:9">*</operator><name pos:start="932:10" pos:end="932:12">dst</name><operator pos:start="932:13" pos:end="932:14">++</operator> <operator pos:start="932:16" pos:end="932:16">=</operator> <name pos:start="932:18" pos:end="932:35"><name pos:start="932:18" pos:end="932:20">hex</name><index pos:start="932:21" pos:end="932:35">[<expr pos:start="932:22" pos:end="932:34"><name pos:start="932:22" pos:end="932:27"><name pos:start="932:22" pos:end="932:24">src</name><index pos:start="932:25" pos:end="932:27">[<expr pos:start="932:26" pos:end="932:26"><literal type="number" pos:start="932:26" pos:end="932:26">0</literal></expr>]</index></name> <operator pos:start="932:29" pos:end="932:29">&amp;</operator> <literal type="number" pos:start="932:31" pos:end="932:34">0x0f</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="934:5" pos:end="934:16"><expr pos:start="934:5" pos:end="934:15"><operator pos:start="934:5" pos:end="934:5">*</operator><name pos:start="934:6" pos:end="934:8">dst</name> <operator pos:start="934:10" pos:end="934:10">=</operator> <literal type="char" pos:start="934:12" pos:end="934:15">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="936:1" pos:end="952:3">/*! @brief est_enable_crl() is used by an application to enable 
    checking of a certificate revocation list when validating the client
    TLS peer certificate during the TLS handshake. When enabled, 
    the ca_chain parameter provided to either est_server_init()
    or est_client_init() should contain both the trusted certificates 
    along with the CRL entries.  The CRL entries should be appened
    at the end.
 
    @param ctx Pointer to the EST context

    CRL checking is disabled by default.  This function must be called 
    after invoking est_server_init() or est_client_init() and prior 
    to performing any EST operations.  Therefore, there is no 'disable' 
    version of this method.  
 
    @return EST_ERROR.
 */</comment>
<function pos:start="953:1" pos:end="962:1"><type pos:start="953:1" pos:end="953:9"><name pos:start="953:1" pos:end="953:9">EST_ERROR</name></type> <name pos:start="953:11" pos:end="953:24">est_enable_crl</name> <parameter_list pos:start="953:26" pos:end="953:39">(<parameter pos:start="953:27" pos:end="953:38"><decl pos:start="953:27" pos:end="953:38"><type pos:start="953:27" pos:end="953:35"><name pos:start="953:27" pos:end="953:33">EST_CTX</name> <modifier pos:start="953:35" pos:end="953:35">*</modifier></type><name pos:start="953:36" pos:end="953:38">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="954:1" pos:end="962:1">{<block_content pos:start="955:5" pos:end="961:26">
    <if_stmt pos:start="955:5" pos:end="958:5"><if pos:start="955:5" pos:end="958:5">if <condition pos:start="955:8" pos:end="955:13">(<expr pos:start="955:9" pos:end="955:12"><operator pos:start="955:9" pos:end="955:9">!</operator><name pos:start="955:10" pos:end="955:12">ctx</name></expr>)</condition> <block pos:start="955:15" pos:end="958:5">{<block_content pos:start="956:9" pos:end="957:32">
	<expr_stmt pos:start="956:9" pos:end="956:36"><expr pos:start="956:9" pos:end="956:35"><call pos:start="956:9" pos:end="956:35"><name pos:start="956:9" pos:end="956:19">EST_LOG_ERR</name><argument_list pos:start="956:20" pos:end="956:35">(<argument pos:start="956:21" pos:end="956:34"><expr pos:start="956:21" pos:end="956:34"><literal type="string" pos:start="956:21" pos:end="956:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="957:9" pos:end="957:32">return <expr pos:start="957:16" pos:end="957:31"><operator pos:start="957:16" pos:end="957:16">(</operator><name pos:start="957:17" pos:end="957:30">EST_ERR_NO_CTX</name><operator pos:start="957:31" pos:end="957:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="960:5" pos:end="960:24"><expr pos:start="960:5" pos:end="960:23"><name pos:start="960:5" pos:end="960:19"><name pos:start="960:5" pos:end="960:7">ctx</name><operator pos:start="960:8" pos:end="960:9">-&gt;</operator><name pos:start="960:10" pos:end="960:19">enable_crl</name></name> <operator pos:start="960:21" pos:end="960:21">=</operator> <literal type="number" pos:start="960:23" pos:end="960:23">1</literal></expr>;</expr_stmt>
    <return pos:start="961:5" pos:end="961:26">return <expr pos:start="961:12" pos:end="961:25"><operator pos:start="961:12" pos:end="961:12">(</operator><name pos:start="961:13" pos:end="961:24">EST_ERR_NONE</name><operator pos:start="961:25" pos:end="961:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="963:1" pos:end="969:3">/*
 * est_asn1_sanity_test - perform a sanity test on the CSR
 * attribute string.  This function operates on an ASN.1 hex
 * string, so it should already be un-based64.
 *
 * return EST_ERROR and the presence of challengePassword
 */</comment>
<function pos:start="970:1" pos:end="1030:1"><type pos:start="970:1" pos:end="971:9"><specifier pos:start="970:1" pos:end="970:6">static</specifier> 
<name pos:start="971:1" pos:end="971:9">EST_ERROR</name></type> <name pos:start="971:11" pos:end="971:30">est_asn1_sanity_test</name> <parameter_list pos:start="971:32" pos:end="972:49">(<parameter pos:start="971:33" pos:end="971:59"><decl pos:start="971:33" pos:end="971:59"><type pos:start="971:33" pos:end="971:59"><specifier pos:start="971:33" pos:end="971:37">const</specifier> <name pos:start="971:39" pos:end="971:46">unsigned</name> <name pos:start="971:48" pos:end="971:51">char</name> <modifier pos:start="971:53" pos:end="971:53">*</modifier></type><name pos:start="971:54" pos:end="971:59">string</name></decl></parameter>, <parameter pos:start="971:62" pos:end="971:73"><decl pos:start="971:62" pos:end="971:73"><type pos:start="971:62" pos:end="971:73"><name pos:start="971:62" pos:end="971:65">long</name></type> <name pos:start="971:67" pos:end="971:73">out_len</name></decl></parameter>, 
				<parameter pos:start="972:33" pos:end="972:48"><decl pos:start="972:33" pos:end="972:48"><type pos:start="972:33" pos:end="972:48"><name pos:start="972:33" pos:end="972:35">int</name> <modifier pos:start="972:37" pos:end="972:37">*</modifier></type><name pos:start="972:38" pos:end="972:48">pop_present</name></decl></parameter>)</parameter_list>
<block pos:start="973:1" pos:end="1030:1">{<block_content pos:start="974:5" pos:end="1029:26">
    <decl_stmt pos:start="974:5" pos:end="974:28"><decl pos:start="974:5" pos:end="974:11"><type pos:start="974:5" pos:end="974:7"><name pos:start="974:5" pos:end="974:7">int</name></type> <name pos:start="974:9" pos:end="974:11">tag</name></decl>, <decl pos:start="974:14" pos:end="974:19"><type ref="prev" pos:start="974:5" pos:end="974:7"/><name pos:start="974:14" pos:end="974:19">xclass</name></decl>, <decl pos:start="974:22" pos:end="974:22"><type ref="prev" pos:start="974:5" pos:end="974:7"/><name pos:start="974:22" pos:end="974:22">j</name></decl>, <decl pos:start="974:25" pos:end="974:27"><type ref="prev" pos:start="974:5" pos:end="974:7"/><name pos:start="974:25" pos:end="974:27">nid</name></decl>;</decl_stmt>
    <decl_stmt pos:start="975:5" pos:end="975:32"><decl pos:start="975:5" pos:end="975:31"><type pos:start="975:5" pos:end="975:8"><name pos:start="975:5" pos:end="975:8">long</name></type> <name pos:start="975:10" pos:end="975:21">out_len_save</name> <init pos:start="975:23" pos:end="975:31">= <expr pos:start="975:25" pos:end="975:31"><name pos:start="975:25" pos:end="975:31">out_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="976:5" pos:end="976:13"><decl pos:start="976:5" pos:end="976:12"><type pos:start="976:5" pos:end="976:8"><name pos:start="976:5" pos:end="976:8">long</name></type> <name pos:start="976:10" pos:end="976:12">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="977:5" pos:end="977:42"><decl pos:start="977:5" pos:end="977:41"><type pos:start="977:5" pos:end="977:25"><specifier pos:start="977:5" pos:end="977:9">const</specifier> <name pos:start="977:11" pos:end="977:18">unsigned</name> <name pos:start="977:20" pos:end="977:23">char</name> <modifier pos:start="977:25" pos:end="977:25">*</modifier></type><name pos:start="977:26" pos:end="977:32">ostring</name> <init pos:start="977:34" pos:end="977:41">= <expr pos:start="977:36" pos:end="977:41"><name pos:start="977:36" pos:end="977:41">string</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="978:5" pos:end="978:26"><decl pos:start="978:5" pos:end="978:25"><type pos:start="978:5" pos:end="978:17"><name pos:start="978:5" pos:end="978:15">ASN1_OBJECT</name> <modifier pos:start="978:17" pos:end="978:17">*</modifier></type><name pos:start="978:18" pos:end="978:25">a_object</name></decl>;</decl_stmt>
    <decl_stmt pos:start="979:5" pos:end="979:31"><decl pos:start="979:5" pos:end="979:30"><type pos:start="979:5" pos:end="979:7"><name pos:start="979:5" pos:end="979:7">int</name></type> <name pos:start="979:9" pos:end="979:15">max_len</name> <init pos:start="979:17" pos:end="979:30">= <expr pos:start="979:19" pos:end="979:30"><name pos:start="979:19" pos:end="979:30">MAX_CSRATTRS</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="981:5" pos:end="983:7">/*
     * Assume the challengePassword OID is not present
     */</comment>
    <expr_stmt pos:start="984:5" pos:end="984:21"><expr pos:start="984:5" pos:end="984:20"><operator pos:start="984:5" pos:end="984:5">*</operator><name pos:start="984:6" pos:end="984:16">pop_present</name> <operator pos:start="984:18" pos:end="984:18">=</operator> <literal type="number" pos:start="984:20" pos:end="984:20">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="986:5" pos:end="986:47">/* make sure its long enough to be ASN.1 */</comment>
    <if_stmt pos:start="987:5" pos:end="989:5"><if pos:start="987:5" pos:end="989:5">if <condition pos:start="987:8" pos:end="987:36">(<expr pos:start="987:9" pos:end="987:35"><name pos:start="987:9" pos:end="987:15">out_len</name> <operator pos:start="987:17" pos:end="987:17">&lt;</operator> <name pos:start="987:19" pos:end="987:35">MIN_ASN1_CSRATTRS</name></expr>)</condition> <block pos:start="987:38" pos:end="989:5">{<block_content pos:start="988:9" pos:end="988:48">
        <return pos:start="988:9" pos:end="988:48">return <expr pos:start="988:16" pos:end="988:47"><operator pos:start="988:16" pos:end="988:16">(</operator><name pos:start="988:17" pos:end="988:46">EST_ERR_BAD_ASN1_HEX_TOO_SHORT</name><operator pos:start="988:47" pos:end="988:47">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while pos:start="991:5" pos:end="1022:5">while <condition pos:start="991:11" pos:end="991:23">(<expr pos:start="991:12" pos:end="991:22"><name pos:start="991:12" pos:end="991:18">out_len</name> <operator pos:start="991:20" pos:end="991:20">&gt;</operator> <literal type="number" pos:start="991:22" pos:end="991:22">0</literal></expr>)</condition> <block pos:start="991:25" pos:end="1022:5">{<block_content pos:start="992:9" pos:end="1021:54">
	<expr_stmt pos:start="992:9" pos:end="992:67"><expr pos:start="992:9" pos:end="992:66"><name pos:start="992:9" pos:end="992:9">j</name> <operator pos:start="992:11" pos:end="992:11">=</operator> <call pos:start="992:13" pos:end="992:66"><name pos:start="992:13" pos:end="992:27">ASN1_get_object</name><argument_list pos:start="992:28" pos:end="992:66">(<argument pos:start="992:29" pos:end="992:35"><expr pos:start="992:29" pos:end="992:35"><operator pos:start="992:29" pos:end="992:29">&amp;</operator><name pos:start="992:30" pos:end="992:35">string</name></expr></argument>, <argument pos:start="992:38" pos:end="992:41"><expr pos:start="992:38" pos:end="992:41"><operator pos:start="992:38" pos:end="992:38">&amp;</operator><name pos:start="992:39" pos:end="992:41">len</name></expr></argument>, <argument pos:start="992:44" pos:end="992:47"><expr pos:start="992:44" pos:end="992:47"><operator pos:start="992:44" pos:end="992:44">&amp;</operator><name pos:start="992:45" pos:end="992:47">tag</name></expr></argument>, <argument pos:start="992:50" pos:end="992:56"><expr pos:start="992:50" pos:end="992:56"><operator pos:start="992:50" pos:end="992:50">&amp;</operator><name pos:start="992:51" pos:end="992:56">xclass</name></expr></argument>, <argument pos:start="992:59" pos:end="992:65"><expr pos:start="992:59" pos:end="992:65"><name pos:start="992:59" pos:end="992:65">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="994:9" pos:end="994:87"><expr pos:start="994:9" pos:end="994:86"><call pos:start="994:9" pos:end="994:86"><name pos:start="994:9" pos:end="994:20">EST_LOG_INFO</name><argument_list pos:start="994:21" pos:end="994:86">(<argument pos:start="994:22" pos:end="994:63"><expr pos:start="994:22" pos:end="994:63"><literal type="string" pos:start="994:22" pos:end="994:63">"Sanity: tag=%d, len=%d, j=%d, out_len=%d"</literal></expr></argument>, <argument pos:start="994:66" pos:end="994:68"><expr pos:start="994:66" pos:end="994:68"><name pos:start="994:66" pos:end="994:68">tag</name></expr></argument>, <argument pos:start="994:71" pos:end="994:73"><expr pos:start="994:71" pos:end="994:73"><name pos:start="994:71" pos:end="994:73">len</name></expr></argument>, <argument pos:start="994:76" pos:end="994:76"><expr pos:start="994:76" pos:end="994:76"><name pos:start="994:76" pos:end="994:76">j</name></expr></argument>, <argument pos:start="994:79" pos:end="994:85"><expr pos:start="994:79" pos:end="994:85"><name pos:start="994:79" pos:end="994:85">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="995:9" pos:end="997:9"><if pos:start="995:9" pos:end="997:9">if <condition pos:start="995:12" pos:end="995:21">(<expr pos:start="995:13" pos:end="995:20"><name pos:start="995:13" pos:end="995:13">j</name> <operator pos:start="995:15" pos:end="995:15">&amp;</operator> <literal type="number" pos:start="995:17" pos:end="995:20">0x80</literal></expr>)</condition> <block pos:start="995:23" pos:end="997:9">{<block_content pos:start="996:13" pos:end="996:42">
	    <return pos:start="996:13" pos:end="996:42">return <expr pos:start="996:20" pos:end="996:41"><operator pos:start="996:20" pos:end="996:20">(</operator><name pos:start="996:21" pos:end="996:40">EST_ERR_BAD_ASN1_HEX</name><operator pos:start="996:41" pos:end="996:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
	<switch pos:start="998:9" pos:end="1020:9">switch <condition pos:start="998:16" pos:end="998:20">(<expr pos:start="998:17" pos:end="998:19"><name pos:start="998:17" pos:end="998:19">tag</name></expr>)</condition>
	<block pos:start="999:9" pos:end="1020:9">{<block_content pos:start="1000:9" pos:end="1019:18">
	<case pos:start="1000:9" pos:end="1000:27">case <expr pos:start="1000:14" pos:end="1000:26"><name pos:start="1000:14" pos:end="1000:26">V_ASN1_OBJECT</name></expr>:</case>
            <expr_stmt pos:start="1001:13" pos:end="1001:59"><expr pos:start="1001:13" pos:end="1001:58"><name pos:start="1001:13" pos:end="1001:20">a_object</name> <operator pos:start="1001:22" pos:end="1001:22">=</operator> <call pos:start="1001:24" pos:end="1001:58"><name pos:start="1001:24" pos:end="1001:38">c2i_ASN1_OBJECT</name><argument_list pos:start="1001:39" pos:end="1001:58">(<argument pos:start="1001:40" pos:end="1001:43"><expr pos:start="1001:40" pos:end="1001:43"><name pos:start="1001:40" pos:end="1001:43">NULL</name></expr></argument>, <argument pos:start="1001:46" pos:end="1001:52"><expr pos:start="1001:46" pos:end="1001:52"><operator pos:start="1001:46" pos:end="1001:46">&amp;</operator><name pos:start="1001:47" pos:end="1001:52">string</name></expr></argument>, <argument pos:start="1001:55" pos:end="1001:57"><expr pos:start="1001:55" pos:end="1001:57"><name pos:start="1001:55" pos:end="1001:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="1002:13" pos:end="1011:13"><if pos:start="1002:13" pos:end="1011:13">if <condition pos:start="1002:16" pos:end="1002:33">(<expr pos:start="1002:17" pos:end="1002:32"><name pos:start="1002:17" pos:end="1002:24">a_object</name> <operator pos:start="1002:26" pos:end="1002:27">!=</operator> <name pos:start="1002:29" pos:end="1002:32">NULL</name></expr>)</condition> <block pos:start="1002:35" pos:end="1011:13">{<block_content pos:start="1003:17" pos:end="1010:43">
	        <expr_stmt pos:start="1003:17" pos:end="1003:44"><expr pos:start="1003:17" pos:end="1003:43"><name pos:start="1003:17" pos:end="1003:19">nid</name> <operator pos:start="1003:21" pos:end="1003:21">=</operator> <call pos:start="1003:23" pos:end="1003:43"><name pos:start="1003:23" pos:end="1003:33">OBJ_obj2nid</name><argument_list pos:start="1003:34" pos:end="1003:43">(<argument pos:start="1003:35" pos:end="1003:42"><expr pos:start="1003:35" pos:end="1003:42"><name pos:start="1003:35" pos:end="1003:42">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="1004:17" pos:end="1004:44"><expr pos:start="1004:17" pos:end="1004:43"><call pos:start="1004:17" pos:end="1004:43"><name pos:start="1004:17" pos:end="1004:28">EST_LOG_INFO</name><argument_list pos:start="1004:29" pos:end="1004:43">(<argument pos:start="1004:30" pos:end="1004:37"><expr pos:start="1004:30" pos:end="1004:37"><literal type="string" pos:start="1004:30" pos:end="1004:37">"NID=%d"</literal></expr></argument>, <argument pos:start="1004:40" pos:end="1004:42"><expr pos:start="1004:40" pos:end="1004:42"><name pos:start="1004:40" pos:end="1004:42">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="1005:17" pos:end="1009:17"><if pos:start="1005:17" pos:end="1009:17">if <condition pos:start="1005:20" pos:end="1005:55">(<expr pos:start="1005:21" pos:end="1005:54"><name pos:start="1005:21" pos:end="1005:23">nid</name> <operator pos:start="1005:25" pos:end="1005:26">==</operator> <name pos:start="1005:28" pos:end="1005:54">NID_pkcs9_challengePassword</name></expr>)</condition> <block pos:start="1005:57" pos:end="1009:17">{<block_content pos:start="1006:21" pos:end="1008:51">
	            <expr_stmt pos:start="1006:21" pos:end="1006:64"><expr pos:start="1006:21" pos:end="1006:63"><call pos:start="1006:21" pos:end="1006:63"><name pos:start="1006:21" pos:end="1006:32">EST_LOG_INFO</name><argument_list pos:start="1006:33" pos:end="1006:63">(<argument pos:start="1006:34" pos:end="1006:62"><expr pos:start="1006:34" pos:end="1006:62"><literal type="string" pos:start="1006:34" pos:end="1006:62">"challengePassword OID found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="1007:21" pos:end="1007:37"><expr pos:start="1007:21" pos:end="1007:36"><operator pos:start="1007:21" pos:end="1007:21">*</operator><name pos:start="1007:22" pos:end="1007:32">pop_present</name> <operator pos:start="1007:34" pos:end="1007:34">=</operator> <literal type="number" pos:start="1007:36" pos:end="1007:36">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="1007:39" pos:end="1007:68">/* just signifiy it's there */</comment>
		    <expr_stmt pos:start="1008:21" pos:end="1008:51"><expr pos:start="1008:21" pos:end="1008:50"><name pos:start="1008:21" pos:end="1008:27">max_len</name> <operator pos:start="1008:29" pos:end="1008:29">=</operator> <name pos:start="1008:31" pos:end="1008:50">MAX_CSRATTRS_WITHPOP</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="1010:17" pos:end="1010:43"><expr pos:start="1010:17" pos:end="1010:42"><call pos:start="1010:17" pos:end="1010:42"><name pos:start="1010:17" pos:end="1010:32">ASN1_OBJECT_free</name><argument_list pos:start="1010:33" pos:end="1010:42">(<argument pos:start="1010:34" pos:end="1010:41"><expr pos:start="1010:34" pos:end="1010:41"><name pos:start="1010:34" pos:end="1010:41">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
	    <break pos:start="1012:13" pos:end="1012:18">break;</break>
	<default pos:start="1013:9" pos:end="1013:16">default:</default>
	    <comment type="block" pos:start="1014:13" pos:end="1014:52">/* have to adjust string pointer here */</comment>
	    <expr_stmt pos:start="1015:13" pos:end="1015:26"><expr pos:start="1015:13" pos:end="1015:25"><name pos:start="1015:13" pos:end="1015:18">string</name> <operator pos:start="1015:20" pos:end="1015:21">+=</operator> <name pos:start="1015:23" pos:end="1015:25">len</name></expr>;</expr_stmt>
	    <break pos:start="1016:13" pos:end="1016:18">break;</break>
	<case pos:start="1017:9" pos:end="1017:24">case <expr pos:start="1017:14" pos:end="1017:23"><name pos:start="1017:14" pos:end="1017:23">V_ASN1_SET</name></expr>:</case>
	<case pos:start="1018:9" pos:end="1018:29">case <expr pos:start="1018:14" pos:end="1018:28"><name pos:start="1018:14" pos:end="1018:28">V_ASN1_SEQUENCE</name></expr>:</case>
	    <break pos:start="1019:13" pos:end="1019:18">break;</break>
	</block_content>}</block></switch>
	<expr_stmt pos:start="1021:9" pos:end="1021:54"><expr pos:start="1021:9" pos:end="1021:53"><name pos:start="1021:9" pos:end="1021:15">out_len</name> <operator pos:start="1021:17" pos:end="1021:17">=</operator> <operator pos:start="1021:19" pos:end="1021:19">(</operator><name pos:start="1021:20" pos:end="1021:31">out_len_save</name> <operator pos:start="1021:33" pos:end="1021:33">-</operator> <operator pos:start="1021:35" pos:end="1021:35">(</operator><name pos:start="1021:36" pos:end="1021:41">string</name> <operator pos:start="1021:43" pos:end="1021:43">-</operator> <name pos:start="1021:45" pos:end="1021:51">ostring</name><operator pos:start="1021:52" pos:end="1021:52">)</operator><operator pos:start="1021:53" pos:end="1021:53">)</operator></expr>;</expr_stmt>	
    </block_content>}</block></while>
    <if_stmt pos:start="1023:5" pos:end="1025:5"><if pos:start="1023:5" pos:end="1025:5">if <condition pos:start="1023:8" pos:end="1023:21">(<expr pos:start="1023:9" pos:end="1023:20"><name pos:start="1023:9" pos:end="1023:15">out_len</name> <operator pos:start="1023:17" pos:end="1023:18">!=</operator> <literal type="number" pos:start="1023:20" pos:end="1023:20">0</literal></expr>)</condition> <block pos:start="1023:23" pos:end="1025:5">{<block_content pos:start="1024:9" pos:end="1024:38">
        <return pos:start="1024:9" pos:end="1024:38">return <expr pos:start="1024:16" pos:end="1024:37"><operator pos:start="1024:16" pos:end="1024:16">(</operator><name pos:start="1024:17" pos:end="1024:36">EST_ERR_BAD_ASN1_HEX</name><operator pos:start="1024:37" pos:end="1024:37">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1026:5" pos:end="1028:5"><if pos:start="1026:5" pos:end="1028:5">if <condition pos:start="1026:8" pos:end="1026:31">(<expr pos:start="1026:9" pos:end="1026:30"><name pos:start="1026:9" pos:end="1026:20">out_len_save</name> <operator pos:start="1026:22" pos:end="1026:22">&gt;</operator> <name pos:start="1026:24" pos:end="1026:30">max_len</name></expr>)</condition> <block pos:start="1026:33" pos:end="1028:5">{<block_content pos:start="1027:9" pos:end="1027:47">
        <return pos:start="1027:9" pos:end="1027:47">return <expr pos:start="1027:16" pos:end="1027:46"><operator pos:start="1027:16" pos:end="1027:16">(</operator><name pos:start="1027:17" pos:end="1027:45">EST_ERR_BAD_ASN1_HEX_TOO_LONG</name><operator pos:start="1027:46" pos:end="1027:46">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1029:5" pos:end="1029:26">return <expr pos:start="1029:12" pos:end="1029:25"><operator pos:start="1029:12" pos:end="1029:12">(</operator><name pos:start="1029:13" pos:end="1029:24">EST_ERR_NONE</name><operator pos:start="1029:25" pos:end="1029:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1031:1" pos:end="1037:3">/*
 * est_is_challengePassword_present - take a base64 
 * encoded ASN.1 string and scan through it to see 
 * if challengePassword is included.
 *
 * return EST_ERROR and the presence of challengePassword
 */</comment>
<function pos:start="1038:1" pos:end="1049:1"><type pos:start="1038:1" pos:end="1038:9"><name pos:start="1038:1" pos:end="1038:9">EST_ERROR</name></type> <name pos:start="1038:11" pos:end="1038:42">est_is_challengePassword_present</name> <parameter_list pos:start="1038:44" pos:end="1038:95">(<parameter pos:start="1038:45" pos:end="1038:66"><decl pos:start="1038:45" pos:end="1038:66"><type pos:start="1038:45" pos:end="1038:66"><specifier pos:start="1038:45" pos:end="1038:49">const</specifier> <name pos:start="1038:51" pos:end="1038:54">char</name> <modifier pos:start="1038:56" pos:end="1038:56">*</modifier></type><name pos:start="1038:57" pos:end="1038:66">base64_ptr</name></decl></parameter>, <parameter pos:start="1038:69" pos:end="1038:79"><decl pos:start="1038:69" pos:end="1038:79"><type pos:start="1038:69" pos:end="1038:79"><name pos:start="1038:69" pos:end="1038:71">int</name></type> <name pos:start="1038:73" pos:end="1038:79">b64_len</name></decl></parameter>, <parameter pos:start="1038:82" pos:end="1038:94"><decl pos:start="1038:82" pos:end="1038:94"><type pos:start="1038:82" pos:end="1038:94"><name pos:start="1038:82" pos:end="1038:84">int</name> <modifier pos:start="1038:86" pos:end="1038:86">*</modifier></type><name pos:start="1038:87" pos:end="1038:94">presence</name></decl></parameter>)</parameter_list>
<block pos:start="1039:1" pos:end="1049:1">{<block_content pos:start="1042:5" pos:end="1048:70">

    <comment type="block" pos:start="1041:5" pos:end="1041:30">/* assume its not there */</comment>
    <expr_stmt pos:start="1042:5" pos:end="1042:18"><expr pos:start="1042:5" pos:end="1042:17"><operator pos:start="1042:5" pos:end="1042:5">*</operator><name pos:start="1042:6" pos:end="1042:13">presence</name> <operator pos:start="1042:15" pos:end="1042:15">=</operator> <literal type="number" pos:start="1042:17" pos:end="1042:17">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="1044:5" pos:end="1044:32">/* just return if no data */</comment>
    <if_stmt pos:start="1045:5" pos:end="1047:5"><if pos:start="1045:5" pos:end="1047:5">if <condition pos:start="1045:8" pos:end="1045:47">(<expr pos:start="1045:9" pos:end="1045:46"><operator pos:start="1045:9" pos:end="1045:9">(</operator><name pos:start="1045:10" pos:end="1045:19">base64_ptr</name> <operator pos:start="1045:21" pos:end="1045:22">==</operator> <name pos:start="1045:24" pos:end="1045:27">NULL</name><operator pos:start="1045:28" pos:end="1045:28">)</operator> <operator pos:start="1045:30" pos:end="1045:31">||</operator> <operator pos:start="1045:33" pos:end="1045:33">(</operator><name pos:start="1045:34" pos:end="1045:40">b64_len</name> <operator pos:start="1045:42" pos:end="1045:43">==</operator> <literal type="number" pos:start="1045:45" pos:end="1045:45">0</literal><operator pos:start="1045:46" pos:end="1045:46">)</operator></expr>)</condition> <block pos:start="1045:49" pos:end="1047:5">{<block_content pos:start="1046:9" pos:end="1046:30">
        <return pos:start="1046:9" pos:end="1046:30">return <expr pos:start="1046:16" pos:end="1046:29"><operator pos:start="1046:16" pos:end="1046:16">(</operator><name pos:start="1046:17" pos:end="1046:28">EST_ERR_NONE</name><operator pos:start="1046:29" pos:end="1046:29">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1048:5" pos:end="1048:70">return <expr pos:start="1048:12" pos:end="1048:69"><operator pos:start="1048:12" pos:end="1048:12">(</operator><call pos:start="1048:13" pos:end="1048:68"><name pos:start="1048:13" pos:end="1048:37">est_asn1_parse_attributes</name><argument_list pos:start="1048:38" pos:end="1048:68">(<argument pos:start="1048:39" pos:end="1048:48"><expr pos:start="1048:39" pos:end="1048:48"><name pos:start="1048:39" pos:end="1048:48">base64_ptr</name></expr></argument>, <argument pos:start="1048:51" pos:end="1048:57"><expr pos:start="1048:51" pos:end="1048:57"><name pos:start="1048:51" pos:end="1048:57">b64_len</name></expr></argument>, <argument pos:start="1048:60" pos:end="1048:67"><expr pos:start="1048:60" pos:end="1048:67"><name pos:start="1048:60" pos:end="1048:67">presence</name></expr></argument>)</argument_list></call><operator pos:start="1048:69" pos:end="1048:69">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1050:1" pos:end="1055:3">/*
 * est_asn1_parse_attributes - base64 decode and sanity test
 * the given attributes string
 *
 * return EST_ERROR and the presence of challengePassword
 */</comment>
<function pos:start="1056:1" pos:end="1090:1"><type pos:start="1056:1" pos:end="1056:9"><name pos:start="1056:1" pos:end="1056:9">EST_ERROR</name></type> <name pos:start="1056:11" pos:end="1056:35">est_asn1_parse_attributes</name> <parameter_list pos:start="1056:37" pos:end="1056:78">(<parameter pos:start="1056:38" pos:end="1056:50"><decl pos:start="1056:38" pos:end="1056:50"><type pos:start="1056:38" pos:end="1056:50"><specifier pos:start="1056:38" pos:end="1056:42">const</specifier> <name pos:start="1056:44" pos:end="1056:47">char</name> <modifier pos:start="1056:49" pos:end="1056:49">*</modifier></type><name pos:start="1056:50" pos:end="1056:50">p</name></decl></parameter>, <parameter pos:start="1056:53" pos:end="1056:59"><decl pos:start="1056:53" pos:end="1056:59"><type pos:start="1056:53" pos:end="1056:59"><name pos:start="1056:53" pos:end="1056:55">int</name></type> <name pos:start="1056:57" pos:end="1056:59">len</name></decl></parameter>, <parameter pos:start="1056:62" pos:end="1056:77"><decl pos:start="1056:62" pos:end="1056:77"><type pos:start="1056:62" pos:end="1056:77"><name pos:start="1056:62" pos:end="1056:64">int</name> <modifier pos:start="1056:66" pos:end="1056:66">*</modifier></type><name pos:start="1056:67" pos:end="1056:77">pop_present</name></decl></parameter>)</parameter_list>
<block pos:start="1057:1" pos:end="1090:1">{<block_content pos:start="1058:5" pos:end="1089:26">
    <decl_stmt pos:start="1058:5" pos:end="1058:27"><decl pos:start="1058:5" pos:end="1058:26"><type pos:start="1058:5" pos:end="1058:19"><name pos:start="1058:5" pos:end="1058:12">unsigned</name> <name pos:start="1058:14" pos:end="1058:17">char</name> <modifier pos:start="1058:19" pos:end="1058:19">*</modifier></type><name pos:start="1058:20" pos:end="1058:26">der_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1059:5" pos:end="1059:20"><decl pos:start="1059:5" pos:end="1059:15"><type pos:start="1059:5" pos:end="1059:7"><name pos:start="1059:5" pos:end="1059:7">int</name></type> <name pos:start="1059:9" pos:end="1059:15">der_len</name></decl>, <decl pos:start="1059:18" pos:end="1059:19"><type ref="prev" pos:start="1059:5" pos:end="1059:7"/><name pos:start="1059:18" pos:end="1059:19">rv</name></decl>;</decl_stmt>

    <comment type="block" pos:start="1061:5" pos:end="1064:7">/* 
     * check smallest possible base64 case here for now 
     * and sanity test will check min/max value for ASN.1 data
     */</comment>
    <if_stmt pos:start="1065:5" pos:end="1067:5"><if pos:start="1065:5" pos:end="1067:5">if <condition pos:start="1065:8" pos:end="1065:27">(<expr pos:start="1065:9" pos:end="1065:26"><name pos:start="1065:9" pos:end="1065:11">len</name> <operator pos:start="1065:13" pos:end="1065:13">&lt;</operator> <name pos:start="1065:15" pos:end="1065:26">MIN_CSRATTRS</name></expr>)</condition> <block pos:start="1065:29" pos:end="1067:5">{<block_content pos:start="1066:9" pos:end="1066:44">
        <return pos:start="1066:9" pos:end="1066:44">return <expr pos:start="1066:16" pos:end="1066:43"><operator pos:start="1066:16" pos:end="1066:16">(</operator><name pos:start="1066:17" pos:end="1066:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1066:43" pos:end="1066:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1069:5" pos:end="1069:28"><expr pos:start="1069:5" pos:end="1069:27"><name pos:start="1069:5" pos:end="1069:11">der_ptr</name> <operator pos:start="1069:13" pos:end="1069:13">=</operator> <call pos:start="1069:15" pos:end="1069:27"><name pos:start="1069:15" pos:end="1069:20">malloc</name><argument_list pos:start="1069:21" pos:end="1069:27">(<argument pos:start="1069:22" pos:end="1069:26"><expr pos:start="1069:22" pos:end="1069:26"><name pos:start="1069:22" pos:end="1069:24">len</name><operator pos:start="1069:25" pos:end="1069:25">*</operator><literal type="number" pos:start="1069:26" pos:end="1069:26">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1070:5" pos:end="1072:5"><if pos:start="1070:5" pos:end="1072:5">if <condition pos:start="1070:8" pos:end="1070:17">(<expr pos:start="1070:9" pos:end="1070:16"><operator pos:start="1070:9" pos:end="1070:9">!</operator><name pos:start="1070:10" pos:end="1070:16">der_ptr</name></expr>)</condition> <block pos:start="1070:19" pos:end="1072:5">{<block_content pos:start="1071:9" pos:end="1071:32">
        <return pos:start="1071:9" pos:end="1071:32">return <expr pos:start="1071:16" pos:end="1071:31"><operator pos:start="1071:16" pos:end="1071:16">(</operator><name pos:start="1071:17" pos:end="1071:30">EST_ERR_MALLOC</name><operator pos:start="1071:31" pos:end="1071:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1074:5" pos:end="1074:59"><expr pos:start="1074:5" pos:end="1074:58"><name pos:start="1074:5" pos:end="1074:11">der_len</name> <operator pos:start="1074:13" pos:end="1074:13">=</operator> <call pos:start="1074:15" pos:end="1074:58"><name pos:start="1074:15" pos:end="1074:31">est_base64_decode</name><argument_list pos:start="1074:32" pos:end="1074:58">(<argument pos:start="1074:33" pos:end="1074:33"><expr pos:start="1074:33" pos:end="1074:33"><name pos:start="1074:33" pos:end="1074:33">p</name></expr></argument>, <argument pos:start="1074:36" pos:end="1074:50"><expr pos:start="1074:36" pos:end="1074:50"><operator pos:start="1074:36" pos:end="1074:36">(</operator><name pos:start="1074:37" pos:end="1074:40">char</name> <operator pos:start="1074:42" pos:end="1074:42">*</operator><operator pos:start="1074:43" pos:end="1074:43">)</operator><name pos:start="1074:44" pos:end="1074:50">der_ptr</name></expr></argument>, <argument pos:start="1074:53" pos:end="1074:57"><expr pos:start="1074:53" pos:end="1074:57"><name pos:start="1074:53" pos:end="1074:55">len</name><operator pos:start="1074:56" pos:end="1074:56">*</operator><literal type="number" pos:start="1074:57" pos:end="1074:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1075:5" pos:end="1079:5"><if pos:start="1075:5" pos:end="1079:5">if <condition pos:start="1075:8" pos:end="1075:21">(<expr pos:start="1075:9" pos:end="1075:20"><name pos:start="1075:9" pos:end="1075:15">der_len</name> <operator pos:start="1075:17" pos:end="1075:18">&lt;=</operator> <literal type="number" pos:start="1075:20" pos:end="1075:20">0</literal></expr>)</condition> <block pos:start="1075:23" pos:end="1079:5">{<block_content pos:start="1076:9" pos:end="1078:36">
        <expr_stmt pos:start="1076:9" pos:end="1076:51"><expr pos:start="1076:9" pos:end="1076:50"><call pos:start="1076:9" pos:end="1076:50"><name pos:start="1076:9" pos:end="1076:19">EST_LOG_ERR</name><argument_list pos:start="1076:20" pos:end="1076:50">(<argument pos:start="1076:21" pos:end="1076:49"><expr pos:start="1076:21" pos:end="1076:49"><literal type="string" pos:start="1076:21" pos:end="1076:49">"Invalid base64 encoded data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1077:9" pos:end="1077:22"><expr pos:start="1077:9" pos:end="1077:21"><call pos:start="1077:9" pos:end="1077:21"><name pos:start="1077:9" pos:end="1077:12">free</name><argument_list pos:start="1077:13" pos:end="1077:21">(<argument pos:start="1077:14" pos:end="1077:20"><expr pos:start="1077:14" pos:end="1077:20"><name pos:start="1077:14" pos:end="1077:20">der_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1078:9" pos:end="1078:36">return <expr pos:start="1078:16" pos:end="1078:35"><operator pos:start="1078:16" pos:end="1078:16">(</operator><name pos:start="1078:17" pos:end="1078:34">EST_ERR_BAD_BASE64</name><operator pos:start="1078:35" pos:end="1078:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1081:5" pos:end="1081:61"><expr pos:start="1081:5" pos:end="1081:60"><name pos:start="1081:5" pos:end="1081:6">rv</name> <operator pos:start="1081:8" pos:end="1081:8">=</operator> <call pos:start="1081:10" pos:end="1081:60"><name pos:start="1081:10" pos:end="1081:29">est_asn1_sanity_test</name><argument_list pos:start="1081:30" pos:end="1081:60">(<argument pos:start="1081:31" pos:end="1081:37"><expr pos:start="1081:31" pos:end="1081:37"><name pos:start="1081:31" pos:end="1081:37">der_ptr</name></expr></argument>, <argument pos:start="1081:40" pos:end="1081:46"><expr pos:start="1081:40" pos:end="1081:46"><name pos:start="1081:40" pos:end="1081:46">der_len</name></expr></argument>, <argument pos:start="1081:49" pos:end="1081:59"><expr pos:start="1081:49" pos:end="1081:59"><name pos:start="1081:49" pos:end="1081:59">pop_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1082:5" pos:end="1087:5"><if pos:start="1082:5" pos:end="1087:5">if <condition pos:start="1082:8" pos:end="1082:27">(<expr pos:start="1082:9" pos:end="1082:26"><name pos:start="1082:9" pos:end="1082:10">rv</name> <operator pos:start="1082:12" pos:end="1082:13">!=</operator> <name pos:start="1082:15" pos:end="1082:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1082:29" pos:end="1087:5">{<block_content pos:start="1083:9" pos:end="1086:20">
        <expr_stmt pos:start="1083:9" pos:end="1084:48"><expr pos:start="1083:9" pos:end="1084:47"><call pos:start="1083:9" pos:end="1084:47"><name pos:start="1083:9" pos:end="1083:19">EST_LOG_ERR</name><argument_list pos:start="1083:20" pos:end="1084:47">(<argument pos:start="1083:21" pos:end="1083:61"><expr pos:start="1083:21" pos:end="1083:61"><literal type="string" pos:start="1083:21" pos:end="1083:61">"Invalid ASN1 encoded data. rv = %d (%s)"</literal></expr></argument>,
                    <argument pos:start="1084:21" pos:end="1084:22"><expr pos:start="1084:21" pos:end="1084:22"><name pos:start="1084:21" pos:end="1084:22">rv</name></expr></argument>, <argument pos:start="1084:25" pos:end="1084:46"><expr pos:start="1084:25" pos:end="1084:46"><call pos:start="1084:25" pos:end="1084:46"><name pos:start="1084:25" pos:end="1084:42">EST_ERR_NUM_TO_STR</name><argument_list pos:start="1084:43" pos:end="1084:46">(<argument pos:start="1084:44" pos:end="1084:45"><expr pos:start="1084:44" pos:end="1084:45"><name pos:start="1084:44" pos:end="1084:45">rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1085:9" pos:end="1085:22"><expr pos:start="1085:9" pos:end="1085:21"><call pos:start="1085:9" pos:end="1085:21"><name pos:start="1085:9" pos:end="1085:12">free</name><argument_list pos:start="1085:13" pos:end="1085:21">(<argument pos:start="1085:14" pos:end="1085:20"><expr pos:start="1085:14" pos:end="1085:20"><name pos:start="1085:14" pos:end="1085:20">der_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1086:9" pos:end="1086:20">return <expr pos:start="1086:16" pos:end="1086:19"><operator pos:start="1086:16" pos:end="1086:16">(</operator><name pos:start="1086:17" pos:end="1086:18">rv</name><operator pos:start="1086:19" pos:end="1086:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1088:5" pos:end="1088:18"><expr pos:start="1088:5" pos:end="1088:17"><call pos:start="1088:5" pos:end="1088:17"><name pos:start="1088:5" pos:end="1088:8">free</name><argument_list pos:start="1088:9" pos:end="1088:17">(<argument pos:start="1088:10" pos:end="1088:16"><expr pos:start="1088:10" pos:end="1088:16"><name pos:start="1088:10" pos:end="1088:16">der_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1089:5" pos:end="1089:26">return <expr pos:start="1089:12" pos:end="1089:25"><operator pos:start="1089:12" pos:end="1089:12">(</operator><name pos:start="1089:13" pos:end="1089:24">EST_ERR_NONE</name><operator pos:start="1089:25" pos:end="1089:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1091:1" pos:end="1096:3">/* 
 * est_add_challengePassword - caller has verified that challengePassword 
 * is configured and not included, so add it to the attributes here.
 * No sanity check is needed since est_is_challengePassword_present
 * has already been called.
 */</comment>
<function pos:start="1097:1" pos:end="1204:1"><type pos:start="1097:1" pos:end="1097:9"><name pos:start="1097:1" pos:end="1097:9">EST_ERROR</name></type> <name pos:start="1097:11" pos:end="1097:35">est_add_challengePassword</name> <parameter_list pos:start="1097:37" pos:end="1098:66">(<parameter pos:start="1097:38" pos:end="1097:59"><decl pos:start="1097:38" pos:end="1097:59"><type pos:start="1097:38" pos:end="1097:59"><specifier pos:start="1097:38" pos:end="1097:42">const</specifier> <name pos:start="1097:44" pos:end="1097:47">char</name> <modifier pos:start="1097:49" pos:end="1097:49">*</modifier></type><name pos:start="1097:50" pos:end="1097:59">base64_ptr</name></decl></parameter>, <parameter pos:start="1097:62" pos:end="1097:72"><decl pos:start="1097:62" pos:end="1097:72"><type pos:start="1097:62" pos:end="1097:72"><name pos:start="1097:62" pos:end="1097:64">int</name></type> <name pos:start="1097:66" pos:end="1097:72">b64_len</name></decl></parameter>, 
				     <parameter pos:start="1098:38" pos:end="1098:51"><decl pos:start="1098:38" pos:end="1098:51"><type pos:start="1098:38" pos:end="1098:51"><name pos:start="1098:38" pos:end="1098:41">char</name> <modifier pos:start="1098:43" pos:end="1098:43">*</modifier><modifier pos:start="1098:44" pos:end="1098:44">*</modifier></type><name pos:start="1098:45" pos:end="1098:51">new_csr</name></decl></parameter>, <parameter pos:start="1098:54" pos:end="1098:65"><decl pos:start="1098:54" pos:end="1098:65"><type pos:start="1098:54" pos:end="1098:65"><name pos:start="1098:54" pos:end="1098:56">int</name> <modifier pos:start="1098:58" pos:end="1098:58">*</modifier></type><name pos:start="1098:59" pos:end="1098:65">pop_len</name></decl></parameter>)</parameter_list>
<block pos:start="1099:1" pos:end="1204:1">{<block_content pos:start="1100:5" pos:end="1203:26">
    <decl_stmt pos:start="1100:5" pos:end="1100:33"><decl pos:start="1100:5" pos:end="1100:32"><type pos:start="1100:5" pos:end="1100:25"><specifier pos:start="1100:5" pos:end="1100:9">const</specifier> <name pos:start="1100:11" pos:end="1100:18">unsigned</name> <name pos:start="1100:20" pos:end="1100:23">char</name> <modifier pos:start="1100:25" pos:end="1100:25">*</modifier></type><name pos:start="1100:26" pos:end="1100:32">der_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1101:5" pos:end="1101:47"><decl pos:start="1101:5" pos:end="1101:18"><type pos:start="1101:5" pos:end="1101:10"><name pos:start="1101:5" pos:end="1101:8">char</name> <modifier pos:start="1101:10" pos:end="1101:10">*</modifier></type><name pos:start="1101:11" pos:end="1101:18">orig_ptr</name></decl>, <decl pos:start="1101:21" pos:end="1101:35"><type ref="prev" pos:start="1101:5" pos:end="1101:10"><modifier pos:start="1101:21" pos:end="1101:21">*</modifier></type><name pos:start="1101:22" pos:end="1101:28">new_der</name> <init pos:start="1101:30" pos:end="1101:35">= <expr pos:start="1101:32" pos:end="1101:35"><name pos:start="1101:32" pos:end="1101:35">NULL</name></expr></init></decl>, <decl pos:start="1101:38" pos:end="1101:46"><type ref="prev" pos:start="1101:5" pos:end="1101:10"><modifier pos:start="1101:38" pos:end="1101:38">*</modifier></type><name pos:start="1101:39" pos:end="1101:46">csrattrs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1102:5" pos:end="1102:38"><decl pos:start="1102:5" pos:end="1102:15"><type pos:start="1102:5" pos:end="1102:7"><name pos:start="1102:5" pos:end="1102:7">int</name></type> <name pos:start="1102:9" pos:end="1102:15">der_len</name></decl>, <decl pos:start="1102:18" pos:end="1102:20"><type ref="prev" pos:start="1102:5" pos:end="1102:7"/><name pos:start="1102:18" pos:end="1102:20">tag</name></decl>, <decl pos:start="1102:23" pos:end="1102:28"><type ref="prev" pos:start="1102:5" pos:end="1102:7"/><name pos:start="1102:23" pos:end="1102:28">xclass</name></decl>, <decl pos:start="1102:31" pos:end="1102:37"><type ref="prev" pos:start="1102:5" pos:end="1102:7"/><name pos:start="1102:31" pos:end="1102:37">new_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1103:5" pos:end="1103:13"><decl pos:start="1103:5" pos:end="1103:12"><type pos:start="1103:5" pos:end="1103:8"><name pos:start="1103:5" pos:end="1103:8">long</name></type> <name pos:start="1103:10" pos:end="1103:12">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1104:5" pos:end="1104:16"><decl pos:start="1104:5" pos:end="1104:15"><type pos:start="1104:5" pos:end="1104:7"><name pos:start="1104:5" pos:end="1104:7">int</name></type> <name pos:start="1104:9" pos:end="1104:15">enc_len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1106:5" pos:end="1106:32"><expr pos:start="1106:5" pos:end="1106:31"><name pos:start="1106:5" pos:end="1106:11">der_ptr</name> <operator pos:start="1106:13" pos:end="1106:13">=</operator> <call pos:start="1106:15" pos:end="1106:31"><name pos:start="1106:15" pos:end="1106:20">malloc</name><argument_list pos:start="1106:21" pos:end="1106:31">(<argument pos:start="1106:22" pos:end="1106:30"><expr pos:start="1106:22" pos:end="1106:30"><name pos:start="1106:22" pos:end="1106:28">b64_len</name><operator pos:start="1106:29" pos:end="1106:29">*</operator><literal type="number" pos:start="1106:30" pos:end="1106:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1107:5" pos:end="1109:5"><if pos:start="1107:5" pos:end="1109:5">if <condition pos:start="1107:8" pos:end="1107:17">(<expr pos:start="1107:9" pos:end="1107:16"><operator pos:start="1107:9" pos:end="1107:9">!</operator><name pos:start="1107:10" pos:end="1107:16">der_ptr</name></expr>)</condition> <block pos:start="1107:19" pos:end="1109:5">{<block_content pos:start="1108:9" pos:end="1108:32">
        <return pos:start="1108:9" pos:end="1108:32">return <expr pos:start="1108:16" pos:end="1108:31"><operator pos:start="1108:16" pos:end="1108:16">(</operator><name pos:start="1108:17" pos:end="1108:30">EST_ERR_MALLOC</name><operator pos:start="1108:31" pos:end="1108:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1111:5" pos:end="1111:72"><expr pos:start="1111:5" pos:end="1111:71"><name pos:start="1111:5" pos:end="1111:11">der_len</name> <operator pos:start="1111:13" pos:end="1111:13">=</operator> <call pos:start="1111:15" pos:end="1111:71"><name pos:start="1111:15" pos:end="1111:31">est_base64_decode</name><argument_list pos:start="1111:32" pos:end="1111:71">(<argument pos:start="1111:33" pos:end="1111:42"><expr pos:start="1111:33" pos:end="1111:42"><name pos:start="1111:33" pos:end="1111:42">base64_ptr</name></expr></argument>, <argument pos:start="1111:45" pos:end="1111:59"><expr pos:start="1111:45" pos:end="1111:59"><operator pos:start="1111:45" pos:end="1111:45">(</operator><name pos:start="1111:46" pos:end="1111:49">char</name> <operator pos:start="1111:51" pos:end="1111:51">*</operator><operator pos:start="1111:52" pos:end="1111:52">)</operator><name pos:start="1111:53" pos:end="1111:59">der_ptr</name></expr></argument>, <argument pos:start="1111:62" pos:end="1111:70"><expr pos:start="1111:62" pos:end="1111:70"><name pos:start="1111:62" pos:end="1111:68">b64_len</name><operator pos:start="1111:69" pos:end="1111:69">*</operator><literal type="number" pos:start="1111:70" pos:end="1111:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1112:5" pos:end="1116:5"><if pos:start="1112:5" pos:end="1116:5">if <condition pos:start="1112:8" pos:end="1112:21">(<expr pos:start="1112:9" pos:end="1112:20"><name pos:start="1112:9" pos:end="1112:15">der_len</name> <operator pos:start="1112:17" pos:end="1112:18">&lt;=</operator> <literal type="number" pos:start="1112:20" pos:end="1112:20">0</literal></expr>)</condition> <block pos:start="1112:23" pos:end="1116:5">{<block_content pos:start="1113:9" pos:end="1115:32">
        <expr_stmt pos:start="1113:9" pos:end="1113:45"><expr pos:start="1113:9" pos:end="1113:44"><call pos:start="1113:9" pos:end="1113:44"><name pos:start="1113:9" pos:end="1113:19">EST_LOG_ERR</name><argument_list pos:start="1113:20" pos:end="1113:44">(<argument pos:start="1113:21" pos:end="1113:43"><expr pos:start="1113:21" pos:end="1113:43"><literal type="string" pos:start="1113:21" pos:end="1113:43">"Malformed base64 data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1114:9" pos:end="1114:30"><expr pos:start="1114:9" pos:end="1114:29"><call pos:start="1114:9" pos:end="1114:29"><name pos:start="1114:9" pos:end="1114:12">free</name><argument_list pos:start="1114:13" pos:end="1114:29">(<argument pos:start="1114:14" pos:end="1114:28"><expr pos:start="1114:14" pos:end="1114:28"><operator pos:start="1114:14" pos:end="1114:14">(</operator><name pos:start="1114:15" pos:end="1114:18">void</name> <operator pos:start="1114:20" pos:end="1114:20">*</operator><operator pos:start="1114:21" pos:end="1114:21">)</operator><name pos:start="1114:22" pos:end="1114:28">der_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1115:9" pos:end="1115:32">return <expr pos:start="1115:16" pos:end="1115:31"><operator pos:start="1115:16" pos:end="1115:16">(</operator><name pos:start="1115:17" pos:end="1115:30">EST_ERR_MALLOC</name><operator pos:start="1115:31" pos:end="1115:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1118:5" pos:end="1118:31"><expr pos:start="1118:5" pos:end="1118:30"><name pos:start="1118:5" pos:end="1118:12">orig_ptr</name> <operator pos:start="1118:14" pos:end="1118:14">=</operator> <operator pos:start="1118:16" pos:end="1118:16">(</operator><name pos:start="1118:17" pos:end="1118:20">char</name> <operator pos:start="1118:22" pos:end="1118:22">*</operator><operator pos:start="1118:23" pos:end="1118:23">)</operator><name pos:start="1118:24" pos:end="1118:30">der_ptr</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1120:5" pos:end="1120:49">/* grab the first one and do the POP stuff */</comment>
    <expr_stmt pos:start="1121:5" pos:end="1121:66"><expr pos:start="1121:5" pos:end="1121:65"><operator pos:start="1121:5" pos:end="1121:5">(</operator><name pos:start="1121:6" pos:end="1121:9">void</name><operator pos:start="1121:10" pos:end="1121:10">)</operator><call pos:start="1121:11" pos:end="1121:65"><name pos:start="1121:11" pos:end="1121:25">ASN1_get_object</name><argument_list pos:start="1121:26" pos:end="1121:65">(<argument pos:start="1121:27" pos:end="1121:34"><expr pos:start="1121:27" pos:end="1121:34"><operator pos:start="1121:27" pos:end="1121:27">&amp;</operator><name pos:start="1121:28" pos:end="1121:34">der_ptr</name></expr></argument>, <argument pos:start="1121:37" pos:end="1121:40"><expr pos:start="1121:37" pos:end="1121:40"><operator pos:start="1121:37" pos:end="1121:37">&amp;</operator><name pos:start="1121:38" pos:end="1121:40">len</name></expr></argument>, <argument pos:start="1121:43" pos:end="1121:46"><expr pos:start="1121:43" pos:end="1121:46"><operator pos:start="1121:43" pos:end="1121:43">&amp;</operator><name pos:start="1121:44" pos:end="1121:46">tag</name></expr></argument>, <argument pos:start="1121:49" pos:end="1121:55"><expr pos:start="1121:49" pos:end="1121:55"><operator pos:start="1121:49" pos:end="1121:49">&amp;</operator><name pos:start="1121:50" pos:end="1121:55">xclass</name></expr></argument>, <argument pos:start="1121:58" pos:end="1121:64"><expr pos:start="1121:58" pos:end="1121:64"><name pos:start="1121:58" pos:end="1121:64">der_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1123:5" pos:end="1127:5"><if pos:start="1123:5" pos:end="1127:5">if <condition pos:start="1123:8" pos:end="1123:31">(<expr pos:start="1123:9" pos:end="1123:30"><name pos:start="1123:9" pos:end="1123:11">tag</name> <operator pos:start="1123:13" pos:end="1123:14">!=</operator> <name pos:start="1123:16" pos:end="1123:30">V_ASN1_SEQUENCE</name></expr>)</condition> <block pos:start="1123:33" pos:end="1127:5">{<block_content pos:start="1124:9" pos:end="1126:38">
        <expr_stmt pos:start="1124:9" pos:end="1124:65"><expr pos:start="1124:9" pos:end="1124:64"><call pos:start="1124:9" pos:end="1124:64"><name pos:start="1124:9" pos:end="1124:19">EST_LOG_ERR</name><argument_list pos:start="1124:20" pos:end="1124:64">(<argument pos:start="1124:21" pos:end="1124:63"><expr pos:start="1124:21" pos:end="1124:63"><literal type="string" pos:start="1124:21" pos:end="1124:63">"Malformed ASN.1 Hex, no leanding Sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1125:9" pos:end="1125:23"><expr pos:start="1125:9" pos:end="1125:22"><call pos:start="1125:9" pos:end="1125:22"><name pos:start="1125:9" pos:end="1125:12">free</name><argument_list pos:start="1125:13" pos:end="1125:22">(<argument pos:start="1125:14" pos:end="1125:21"><expr pos:start="1125:14" pos:end="1125:21"><name pos:start="1125:14" pos:end="1125:21">orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1126:9" pos:end="1126:38">return <expr pos:start="1126:16" pos:end="1126:37"><operator pos:start="1126:16" pos:end="1126:16">(</operator><name pos:start="1126:17" pos:end="1126:36">EST_ERR_BAD_ASN1_HEX</name><operator pos:start="1126:37" pos:end="1126:37">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1129:5" pos:end="1129:37"><expr pos:start="1129:5" pos:end="1129:36"><name pos:start="1129:5" pos:end="1129:7">len</name> <operator pos:start="1129:9" pos:end="1129:9">=</operator> <operator pos:start="1129:11" pos:end="1129:11">(</operator><name pos:start="1129:12" pos:end="1129:15">char</name> <operator pos:start="1129:17" pos:end="1129:17">*</operator><operator pos:start="1129:18" pos:end="1129:18">)</operator><name pos:start="1129:19" pos:end="1129:25">der_ptr</name> <operator pos:start="1129:27" pos:end="1129:27">-</operator> <name pos:start="1129:29" pos:end="1129:36">orig_ptr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1130:5" pos:end="1130:52"><expr pos:start="1130:5" pos:end="1130:51"><name pos:start="1130:5" pos:end="1130:11">new_len</name> <operator pos:start="1130:13" pos:end="1130:13">=</operator> <name pos:start="1130:15" pos:end="1130:21">der_len</name> <operator pos:start="1130:23" pos:end="1130:23">-</operator> <operator pos:start="1130:25" pos:end="1130:25">(</operator><name pos:start="1130:26" pos:end="1130:28">int</name><operator pos:start="1130:29" pos:end="1130:29">)</operator><name pos:start="1130:30" pos:end="1130:32">len</name> <operator pos:start="1130:34" pos:end="1130:34">+</operator> <sizeof pos:start="1130:36" pos:end="1130:51">sizeof<argument_list pos:start="1130:42" pos:end="1130:51">(<argument pos:start="1130:43" pos:end="1130:50"><expr pos:start="1130:43" pos:end="1130:50"><name pos:start="1130:43" pos:end="1130:50">hex_chpw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	    
    <comment type="block" pos:start="1132:5" pos:end="1132:67">/* remove leading sequence and length and copy to new buffer */</comment>
    <comment type="block" pos:start="1133:5" pos:end="1133:42">/* if &gt;= 256 need 4 byte Seq header */</comment>
    <if_stmt pos:start="1134:5" pos:end="1171:5"><if pos:start="1134:5" pos:end="1147:5">if <condition pos:start="1134:8" pos:end="1134:50">(<expr pos:start="1134:9" pos:end="1134:49"><operator pos:start="1134:9" pos:end="1134:9">(</operator><name pos:start="1134:10" pos:end="1134:16">der_len</name> <operator pos:start="1134:18" pos:end="1134:18">-</operator> <name pos:start="1134:20" pos:end="1134:22">len</name> <operator pos:start="1134:24" pos:end="1134:24">+</operator> <sizeof pos:start="1134:26" pos:end="1134:41">sizeof<argument_list pos:start="1134:32" pos:end="1134:41">(<argument pos:start="1134:33" pos:end="1134:40"><expr pos:start="1134:33" pos:end="1134:40"><name pos:start="1134:33" pos:end="1134:40">hex_chpw</name></expr></argument>)</argument_list></sizeof><operator pos:start="1134:42" pos:end="1134:42">)</operator> <operator pos:start="1134:44" pos:end="1134:45">&gt;=</operator> <literal type="number" pos:start="1134:47" pos:end="1134:49">256</literal></expr>)</condition> <block pos:start="1134:52" pos:end="1147:5">{<block_content pos:start="1135:9" pos:end="1145:96">
        <expr_stmt pos:start="1135:9" pos:end="1135:21"><expr pos:start="1135:9" pos:end="1135:20"><name pos:start="1135:9" pos:end="1135:15">new_len</name> <operator pos:start="1135:17" pos:end="1135:18">+=</operator> <literal type="number" pos:start="1135:20" pos:end="1135:20">4</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="1136:9" pos:end="1136:34"><expr pos:start="1136:9" pos:end="1136:33"><name pos:start="1136:9" pos:end="1136:15">new_der</name> <operator pos:start="1136:17" pos:end="1136:17">=</operator> <call pos:start="1136:19" pos:end="1136:33"><name pos:start="1136:19" pos:end="1136:24">malloc</name><argument_list pos:start="1136:25" pos:end="1136:33">(<argument pos:start="1136:26" pos:end="1136:32"><expr pos:start="1136:26" pos:end="1136:32"><name pos:start="1136:26" pos:end="1136:32">new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1137:9" pos:end="1140:9"><if pos:start="1137:9" pos:end="1140:9">if <condition pos:start="1137:12" pos:end="1137:21">(<expr pos:start="1137:13" pos:end="1137:20"><operator pos:start="1137:13" pos:end="1137:13">!</operator><name pos:start="1137:14" pos:end="1137:20">new_der</name></expr>)</condition> <block pos:start="1137:23" pos:end="1140:9">{<block_content pos:start="1138:13" pos:end="1139:36">
	    <expr_stmt pos:start="1138:13" pos:end="1138:27"><expr pos:start="1138:13" pos:end="1138:26"><call pos:start="1138:13" pos:end="1138:26"><name pos:start="1138:13" pos:end="1138:16">free</name><argument_list pos:start="1138:17" pos:end="1138:26">(<argument pos:start="1138:18" pos:end="1138:25"><expr pos:start="1138:18" pos:end="1138:25"><name pos:start="1138:18" pos:end="1138:25">orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1139:13" pos:end="1139:36">return <expr pos:start="1139:20" pos:end="1139:35"><operator pos:start="1139:20" pos:end="1139:20">(</operator><name pos:start="1139:21" pos:end="1139:34">EST_ERR_MALLOC</name><operator pos:start="1139:35" pos:end="1139:35">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1141:9" pos:end="1141:36"><expr pos:start="1141:9" pos:end="1141:35"><call pos:start="1141:9" pos:end="1141:35"><name pos:start="1141:9" pos:end="1141:17">memzero_s</name><argument_list pos:start="1141:18" pos:end="1141:35">(<argument pos:start="1141:19" pos:end="1141:25"><expr pos:start="1141:19" pos:end="1141:25"><name pos:start="1141:19" pos:end="1141:25">new_der</name></expr></argument>, <argument pos:start="1141:28" pos:end="1141:34"><expr pos:start="1141:28" pos:end="1141:34"><name pos:start="1141:28" pos:end="1141:34">new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1142:9" pos:end="1142:30"><expr pos:start="1142:9" pos:end="1142:29"><operator pos:start="1142:9" pos:end="1142:9">*</operator><operator pos:start="1142:10" pos:end="1142:10">(</operator><name pos:start="1142:11" pos:end="1142:17">new_der</name> <operator pos:start="1142:19" pos:end="1142:19">+</operator> <literal type="number" pos:start="1142:21" pos:end="1142:21">1</literal><operator pos:start="1142:22" pos:end="1142:22">)</operator> <operator pos:start="1142:24" pos:end="1142:24">=</operator> <literal type="number" pos:start="1142:26" pos:end="1142:29">0x82</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1143:9" pos:end="1143:44"><expr pos:start="1143:9" pos:end="1143:43"><operator pos:start="1143:9" pos:end="1143:9">*</operator><operator pos:start="1143:10" pos:end="1143:10">(</operator><name pos:start="1143:11" pos:end="1143:17">new_der</name> <operator pos:start="1143:19" pos:end="1143:19">+</operator> <literal type="number" pos:start="1143:21" pos:end="1143:21">2</literal><operator pos:start="1143:22" pos:end="1143:22">)</operator> <operator pos:start="1143:24" pos:end="1143:24">=</operator> <operator pos:start="1143:26" pos:end="1143:26">(</operator><name pos:start="1143:27" pos:end="1143:33">new_len</name> <operator pos:start="1143:35" pos:end="1143:35">-</operator> <literal type="number" pos:start="1143:37" pos:end="1143:37">4</literal><operator pos:start="1143:38" pos:end="1143:38">)</operator> <operator pos:start="1143:40" pos:end="1143:41">&gt;&gt;</operator> <literal type="number" pos:start="1143:43" pos:end="1143:43">8</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1144:9" pos:end="1144:48"><expr pos:start="1144:9" pos:end="1144:47"><operator pos:start="1144:9" pos:end="1144:9">*</operator><operator pos:start="1144:10" pos:end="1144:10">(</operator><name pos:start="1144:11" pos:end="1144:17">new_der</name> <operator pos:start="1144:19" pos:end="1144:19">+</operator> <literal type="number" pos:start="1144:21" pos:end="1144:21">3</literal><operator pos:start="1144:22" pos:end="1144:22">)</operator> <operator pos:start="1144:24" pos:end="1144:24">=</operator> <operator pos:start="1144:26" pos:end="1144:26">(</operator><operator pos:start="1144:27" pos:end="1144:27">(</operator><name pos:start="1144:28" pos:end="1144:34">new_len</name> <operator pos:start="1144:36" pos:end="1144:36">-</operator> <literal type="number" pos:start="1144:38" pos:end="1144:38">4</literal><operator pos:start="1144:39" pos:end="1144:39">)</operator> <operator pos:start="1144:41" pos:end="1144:41">&amp;</operator> <literal type="number" pos:start="1144:43" pos:end="1144:46">0xff</literal><operator pos:start="1144:47" pos:end="1144:47">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="1145:9" pos:end="1145:96"><expr pos:start="1145:9" pos:end="1145:95"><call pos:start="1145:9" pos:end="1145:95"><name pos:start="1145:9" pos:end="1145:16">memcpy_s</name><argument_list pos:start="1145:17" pos:end="1145:95">(<argument pos:start="1145:18" pos:end="1145:26"><expr pos:start="1145:18" pos:end="1145:26"><name pos:start="1145:18" pos:end="1145:24">new_der</name><operator pos:start="1145:25" pos:end="1145:25">+</operator><literal type="number" pos:start="1145:26" pos:end="1145:26">4</literal></expr></argument>, <argument pos:start="1145:29" pos:end="1145:56"><expr pos:start="1145:29" pos:end="1145:56"><name pos:start="1145:29" pos:end="1145:35">der_len</name> <operator pos:start="1145:37" pos:end="1145:37">-</operator> <operator pos:start="1145:39" pos:end="1145:39">(</operator><name pos:start="1145:40" pos:end="1145:47">unsigned</name> <name pos:start="1145:49" pos:end="1145:51">int</name><operator pos:start="1145:52" pos:end="1145:52">)</operator> <name pos:start="1145:54" pos:end="1145:56">len</name></expr></argument>, <argument pos:start="1145:59" pos:end="1145:65"><expr pos:start="1145:59" pos:end="1145:65"><name pos:start="1145:59" pos:end="1145:65">der_ptr</name></expr></argument>, <argument pos:start="1145:68" pos:end="1145:94"><expr pos:start="1145:68" pos:end="1145:94"><name pos:start="1145:68" pos:end="1145:74">der_len</name> <operator pos:start="1145:76" pos:end="1145:76">-</operator> <operator pos:start="1145:78" pos:end="1145:78">(</operator><name pos:start="1145:79" pos:end="1145:86">unsigned</name> <name pos:start="1145:88" pos:end="1145:90">int</name><operator pos:start="1145:91" pos:end="1145:91">)</operator><name pos:start="1145:92" pos:end="1145:94">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block" pos:start="1146:9" pos:end="1146:58">/* if &lt;= 256, but &gt;= 128 need 3 byte Seq header */</comment>
    </block_content>}</block></if> <if type="elseif" pos:start="1147:7" pos:end="1159:5">else if <condition pos:start="1147:15" pos:end="1147:57">(<expr pos:start="1147:16" pos:end="1147:56"><operator pos:start="1147:16" pos:end="1147:16">(</operator><name pos:start="1147:17" pos:end="1147:23">der_len</name> <operator pos:start="1147:25" pos:end="1147:25">-</operator> <name pos:start="1147:27" pos:end="1147:29">len</name> <operator pos:start="1147:31" pos:end="1147:31">+</operator> <sizeof pos:start="1147:33" pos:end="1147:48">sizeof<argument_list pos:start="1147:39" pos:end="1147:48">(<argument pos:start="1147:40" pos:end="1147:47"><expr pos:start="1147:40" pos:end="1147:47"><name pos:start="1147:40" pos:end="1147:47">hex_chpw</name></expr></argument>)</argument_list></sizeof><operator pos:start="1147:49" pos:end="1147:49">)</operator> <operator pos:start="1147:51" pos:end="1147:52">&gt;=</operator> <literal type="number" pos:start="1147:54" pos:end="1147:56">128</literal></expr>)</condition> <block pos:start="1147:59" pos:end="1159:5">{<block_content pos:start="1148:9" pos:end="1157:91">
        <expr_stmt pos:start="1148:9" pos:end="1148:21"><expr pos:start="1148:9" pos:end="1148:20"><name pos:start="1148:9" pos:end="1148:15">new_len</name> <operator pos:start="1148:17" pos:end="1148:18">+=</operator> <literal type="number" pos:start="1148:20" pos:end="1148:20">3</literal></expr>;</expr_stmt>
	<expr_stmt pos:start="1149:9" pos:end="1149:34"><expr pos:start="1149:9" pos:end="1149:33"><name pos:start="1149:9" pos:end="1149:15">new_der</name> <operator pos:start="1149:17" pos:end="1149:17">=</operator> <call pos:start="1149:19" pos:end="1149:33"><name pos:start="1149:19" pos:end="1149:24">malloc</name><argument_list pos:start="1149:25" pos:end="1149:33">(<argument pos:start="1149:26" pos:end="1149:32"><expr pos:start="1149:26" pos:end="1149:32"><name pos:start="1149:26" pos:end="1149:32">new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1150:9" pos:end="1153:9"><if pos:start="1150:9" pos:end="1153:9">if <condition pos:start="1150:12" pos:end="1150:21">(<expr pos:start="1150:13" pos:end="1150:20"><operator pos:start="1150:13" pos:end="1150:13">!</operator><name pos:start="1150:14" pos:end="1150:20">new_der</name></expr>)</condition> <block pos:start="1150:23" pos:end="1153:9">{<block_content pos:start="1151:13" pos:end="1152:36">
	    <expr_stmt pos:start="1151:13" pos:end="1151:27"><expr pos:start="1151:13" pos:end="1151:26"><call pos:start="1151:13" pos:end="1151:26"><name pos:start="1151:13" pos:end="1151:16">free</name><argument_list pos:start="1151:17" pos:end="1151:26">(<argument pos:start="1151:18" pos:end="1151:25"><expr pos:start="1151:18" pos:end="1151:25"><name pos:start="1151:18" pos:end="1151:25">orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1152:13" pos:end="1152:36">return <expr pos:start="1152:20" pos:end="1152:35"><operator pos:start="1152:20" pos:end="1152:20">(</operator><name pos:start="1152:21" pos:end="1152:34">EST_ERR_MALLOC</name><operator pos:start="1152:35" pos:end="1152:35">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1154:9" pos:end="1154:36"><expr pos:start="1154:9" pos:end="1154:35"><call pos:start="1154:9" pos:end="1154:35"><name pos:start="1154:9" pos:end="1154:17">memzero_s</name><argument_list pos:start="1154:18" pos:end="1154:35">(<argument pos:start="1154:19" pos:end="1154:25"><expr pos:start="1154:19" pos:end="1154:25"><name pos:start="1154:19" pos:end="1154:25">new_der</name></expr></argument>, <argument pos:start="1154:28" pos:end="1154:34"><expr pos:start="1154:28" pos:end="1154:34"><name pos:start="1154:28" pos:end="1154:34">new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1155:9" pos:end="1155:30"><expr pos:start="1155:9" pos:end="1155:29"><operator pos:start="1155:9" pos:end="1155:9">*</operator><operator pos:start="1155:10" pos:end="1155:10">(</operator><name pos:start="1155:11" pos:end="1155:17">new_der</name> <operator pos:start="1155:19" pos:end="1155:19">+</operator> <literal type="number" pos:start="1155:21" pos:end="1155:21">1</literal><operator pos:start="1155:22" pos:end="1155:22">)</operator> <operator pos:start="1155:24" pos:end="1155:24">=</operator> <literal type="number" pos:start="1155:26" pos:end="1155:29">0x81</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1156:9" pos:end="1156:37"><expr pos:start="1156:9" pos:end="1156:36"><operator pos:start="1156:9" pos:end="1156:9">*</operator><operator pos:start="1156:10" pos:end="1156:10">(</operator><name pos:start="1156:11" pos:end="1156:17">new_der</name> <operator pos:start="1156:19" pos:end="1156:19">+</operator> <literal type="number" pos:start="1156:21" pos:end="1156:21">2</literal><operator pos:start="1156:22" pos:end="1156:22">)</operator> <operator pos:start="1156:24" pos:end="1156:24">=</operator> <name pos:start="1156:26" pos:end="1156:32">new_len</name> <operator pos:start="1156:34" pos:end="1156:34">-</operator> <literal type="number" pos:start="1156:36" pos:end="1156:36">3</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1157:9" pos:end="1157:91"><expr pos:start="1157:9" pos:end="1157:90"><call pos:start="1157:9" pos:end="1157:90"><name pos:start="1157:9" pos:end="1157:16">memcpy_s</name><argument_list pos:start="1157:17" pos:end="1157:90">(<argument pos:start="1157:18" pos:end="1157:26"><expr pos:start="1157:18" pos:end="1157:26"><name pos:start="1157:18" pos:end="1157:24">new_der</name><operator pos:start="1157:25" pos:end="1157:25">+</operator><literal type="number" pos:start="1157:26" pos:end="1157:26">3</literal></expr></argument>, <argument pos:start="1157:29" pos:end="1157:53"><expr pos:start="1157:29" pos:end="1157:53"><name pos:start="1157:29" pos:end="1157:35">der_len</name> <operator pos:start="1157:37" pos:end="1157:37">-</operator> <operator pos:start="1157:39" pos:end="1157:39">(</operator><operator pos:start="1157:40" pos:end="1157:40">(</operator><name pos:start="1157:41" pos:end="1157:47">rsize_t</name><operator pos:start="1157:48" pos:end="1157:48">)</operator> <name pos:start="1157:50" pos:end="1157:52">len</name><operator pos:start="1157:53" pos:end="1157:53">)</operator></expr></argument>, <argument pos:start="1157:56" pos:end="1157:62"><expr pos:start="1157:56" pos:end="1157:62"><name pos:start="1157:56" pos:end="1157:62">der_ptr</name></expr></argument>, <argument pos:start="1157:65" pos:end="1157:89"><expr pos:start="1157:65" pos:end="1157:89"><name pos:start="1157:65" pos:end="1157:71">der_len</name> <operator pos:start="1157:73" pos:end="1157:73">-</operator> <operator pos:start="1157:75" pos:end="1157:75">(</operator><operator pos:start="1157:76" pos:end="1157:76">(</operator><name pos:start="1157:77" pos:end="1157:83">rsize_t</name><operator pos:start="1157:84" pos:end="1157:84">)</operator> <name pos:start="1157:86" pos:end="1157:88">len</name><operator pos:start="1157:89" pos:end="1157:89">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="1158:9" pos:end="1158:42">/* else just need 2 byte header */</comment>
    </block_content>}</block></if> <else pos:start="1159:7" pos:end="1171:5">else <block pos:start="1159:12" pos:end="1171:5">{<block_content pos:start="1160:9" pos:end="1170:9">
        <expr_stmt pos:start="1160:9" pos:end="1160:21"><expr pos:start="1160:9" pos:end="1160:20"><name pos:start="1160:9" pos:end="1160:15">new_len</name> <operator pos:start="1160:17" pos:end="1160:18">+=</operator> <literal type="number" pos:start="1160:20" pos:end="1160:20">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="1161:9" pos:end="1161:34"><expr pos:start="1161:9" pos:end="1161:33"><name pos:start="1161:9" pos:end="1161:15">new_der</name> <operator pos:start="1161:17" pos:end="1161:17">=</operator> <call pos:start="1161:19" pos:end="1161:33"><name pos:start="1161:19" pos:end="1161:24">malloc</name><argument_list pos:start="1161:25" pos:end="1161:33">(<argument pos:start="1161:26" pos:end="1161:32"><expr pos:start="1161:26" pos:end="1161:32"><name pos:start="1161:26" pos:end="1161:32">new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="1162:9" pos:end="1165:9"><if pos:start="1162:9" pos:end="1165:9">if <condition pos:start="1162:12" pos:end="1162:21">(<expr pos:start="1162:13" pos:end="1162:20"><operator pos:start="1162:13" pos:end="1162:13">!</operator><name pos:start="1162:14" pos:end="1162:20">new_der</name></expr>)</condition> <block pos:start="1162:23" pos:end="1165:9">{<block_content pos:start="1163:13" pos:end="1164:36">
	    <expr_stmt pos:start="1163:13" pos:end="1163:27"><expr pos:start="1163:13" pos:end="1163:26"><call pos:start="1163:13" pos:end="1163:26"><name pos:start="1163:13" pos:end="1163:16">free</name><argument_list pos:start="1163:17" pos:end="1163:26">(<argument pos:start="1163:18" pos:end="1163:25"><expr pos:start="1163:18" pos:end="1163:25"><name pos:start="1163:18" pos:end="1163:25">orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return pos:start="1164:13" pos:end="1164:36">return <expr pos:start="1164:20" pos:end="1164:35"><operator pos:start="1164:20" pos:end="1164:20">(</operator><name pos:start="1164:21" pos:end="1164:34">EST_ERR_MALLOC</name><operator pos:start="1164:35" pos:end="1164:35">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="1166:9" pos:end="1166:36"><expr pos:start="1166:9" pos:end="1166:35"><call pos:start="1166:9" pos:end="1166:35"><name pos:start="1166:9" pos:end="1166:17">memzero_s</name><argument_list pos:start="1166:18" pos:end="1166:35">(<argument pos:start="1166:19" pos:end="1166:25"><expr pos:start="1166:19" pos:end="1166:25"><name pos:start="1166:19" pos:end="1166:25">new_der</name></expr></argument>, <argument pos:start="1166:28" pos:end="1166:34"><expr pos:start="1166:28" pos:end="1166:34"><name pos:start="1166:28" pos:end="1166:34">new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1167:9" pos:end="1167:37"><expr pos:start="1167:9" pos:end="1167:36"><operator pos:start="1167:9" pos:end="1167:9">*</operator><operator pos:start="1167:10" pos:end="1167:10">(</operator><name pos:start="1167:11" pos:end="1167:17">new_der</name> <operator pos:start="1167:19" pos:end="1167:19">+</operator> <literal type="number" pos:start="1167:21" pos:end="1167:21">1</literal><operator pos:start="1167:22" pos:end="1167:22">)</operator> <operator pos:start="1167:24" pos:end="1167:24">=</operator> <name pos:start="1167:26" pos:end="1167:32">new_len</name> <operator pos:start="1167:34" pos:end="1167:34">-</operator> <literal type="number" pos:start="1167:36" pos:end="1167:36">2</literal></expr>;</expr_stmt>
	<if_stmt pos:start="1168:9" pos:end="1170:9"><if pos:start="1168:9" pos:end="1170:9">if <condition pos:start="1168:12" pos:end="1168:33">(<expr pos:start="1168:13" pos:end="1168:32"><operator pos:start="1168:13" pos:end="1168:13">(</operator><name pos:start="1168:14" pos:end="1168:20">der_len</name> <operator pos:start="1168:22" pos:end="1168:22">-</operator> <name pos:start="1168:24" pos:end="1168:26">len</name><operator pos:start="1168:27" pos:end="1168:27">)</operator> <operator pos:start="1168:29" pos:end="1168:30">!=</operator> <literal type="number" pos:start="1168:32" pos:end="1168:32">0</literal></expr>)</condition> <block pos:start="1168:35" pos:end="1170:9">{<block_content pos:start="1169:13" pos:end="1169:95">
            <expr_stmt pos:start="1169:13" pos:end="1169:95"><expr pos:start="1169:13" pos:end="1169:94"><call pos:start="1169:13" pos:end="1169:94"><name pos:start="1169:13" pos:end="1169:20">memcpy_s</name><argument_list pos:start="1169:21" pos:end="1169:94">(<argument pos:start="1169:22" pos:end="1169:30"><expr pos:start="1169:22" pos:end="1169:30"><name pos:start="1169:22" pos:end="1169:28">new_der</name><operator pos:start="1169:29" pos:end="1169:29">+</operator><literal type="number" pos:start="1169:30" pos:end="1169:30">2</literal></expr></argument>, <argument pos:start="1169:33" pos:end="1169:57"><expr pos:start="1169:33" pos:end="1169:57"><name pos:start="1169:33" pos:end="1169:39">der_len</name> <operator pos:start="1169:41" pos:end="1169:41">-</operator> <operator pos:start="1169:43" pos:end="1169:43">(</operator><operator pos:start="1169:44" pos:end="1169:44">(</operator><name pos:start="1169:45" pos:end="1169:51">rsize_t</name><operator pos:start="1169:52" pos:end="1169:52">)</operator> <name pos:start="1169:54" pos:end="1169:56">len</name><operator pos:start="1169:57" pos:end="1169:57">)</operator></expr></argument>, <argument pos:start="1169:60" pos:end="1169:66"><expr pos:start="1169:60" pos:end="1169:66"><name pos:start="1169:60" pos:end="1169:66">der_ptr</name></expr></argument>, <argument pos:start="1169:69" pos:end="1169:93"><expr pos:start="1169:69" pos:end="1169:93"><name pos:start="1169:69" pos:end="1169:75">der_len</name> <operator pos:start="1169:77" pos:end="1169:77">-</operator> <operator pos:start="1169:79" pos:end="1169:79">(</operator><operator pos:start="1169:80" pos:end="1169:80">(</operator><name pos:start="1169:81" pos:end="1169:87">rsize_t</name><operator pos:start="1169:88" pos:end="1169:88">)</operator> <name pos:start="1169:90" pos:end="1169:92">len</name><operator pos:start="1169:93" pos:end="1169:93">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="1172:5" pos:end="1172:20"><expr pos:start="1172:5" pos:end="1172:19"><operator pos:start="1172:5" pos:end="1172:5">*</operator><name pos:start="1172:6" pos:end="1172:12">new_der</name> <operator pos:start="1172:14" pos:end="1172:14">=</operator> <literal type="number" pos:start="1172:16" pos:end="1172:19">0x30</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1173:5" pos:end="1174:41"><expr pos:start="1173:5" pos:end="1174:40"><call pos:start="1173:5" pos:end="1174:40"><name pos:start="1173:5" pos:end="1173:12">memcpy_s</name><argument_list pos:start="1173:13" pos:end="1174:40">(<argument pos:start="1173:14" pos:end="1173:51"><expr pos:start="1173:14" pos:end="1173:51"><name pos:start="1173:14" pos:end="1173:20">new_der</name> <operator pos:start="1173:22" pos:end="1173:22">+</operator> <operator pos:start="1173:24" pos:end="1173:24">(</operator><name pos:start="1173:25" pos:end="1173:31">new_len</name> <operator pos:start="1173:33" pos:end="1173:33">-</operator> <sizeof pos:start="1173:35" pos:end="1173:50">sizeof<argument_list pos:start="1173:41" pos:end="1173:50">(<argument pos:start="1173:42" pos:end="1173:49"><expr pos:start="1173:42" pos:end="1173:49"><name pos:start="1173:42" pos:end="1173:49">hex_chpw</name></expr></argument>)</argument_list></sizeof><operator pos:start="1173:51" pos:end="1173:51">)</operator></expr></argument>, <argument pos:start="1173:54" pos:end="1173:69"><expr pos:start="1173:54" pos:end="1173:69"><sizeof pos:start="1173:54" pos:end="1173:69">sizeof<argument_list pos:start="1173:60" pos:end="1173:69">(<argument pos:start="1173:61" pos:end="1173:68"><expr pos:start="1173:61" pos:end="1173:68"><name pos:start="1173:61" pos:end="1173:68">hex_chpw</name></expr></argument>)</argument_list></sizeof></expr></argument>,
	     <argument pos:start="1174:14" pos:end="1174:21"><expr pos:start="1174:14" pos:end="1174:21"><name pos:start="1174:14" pos:end="1174:21">hex_chpw</name></expr></argument>, <argument pos:start="1174:24" pos:end="1174:39"><expr pos:start="1174:24" pos:end="1174:39"><sizeof pos:start="1174:24" pos:end="1174:39">sizeof<argument_list pos:start="1174:30" pos:end="1174:39">(<argument pos:start="1174:31" pos:end="1174:38"><expr pos:start="1174:31" pos:end="1174:38"><name pos:start="1174:31" pos:end="1174:38">hex_chpw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1176:5" pos:end="1176:33"><expr pos:start="1176:5" pos:end="1176:32"><name pos:start="1176:5" pos:end="1176:12">csrattrs</name> <operator pos:start="1176:14" pos:end="1176:14">=</operator> <call pos:start="1176:16" pos:end="1176:32"><name pos:start="1176:16" pos:end="1176:21">malloc</name><argument_list pos:start="1176:22" pos:end="1176:32">(<argument pos:start="1176:23" pos:end="1176:31"><expr pos:start="1176:23" pos:end="1176:31"><name pos:start="1176:23" pos:end="1176:29">new_len</name><operator pos:start="1176:30" pos:end="1176:30">*</operator><literal type="number" pos:start="1176:31" pos:end="1176:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1177:5" pos:end="1181:5"><if pos:start="1177:5" pos:end="1181:5">if <condition pos:start="1177:8" pos:end="1177:18">(<expr pos:start="1177:9" pos:end="1177:17"><operator pos:start="1177:9" pos:end="1177:9">!</operator><name pos:start="1177:10" pos:end="1177:17">csrattrs</name></expr>)</condition> <block pos:start="1177:20" pos:end="1181:5">{<block_content pos:start="1178:9" pos:end="1180:32">
        <expr_stmt pos:start="1178:9" pos:end="1178:23"><expr pos:start="1178:9" pos:end="1178:22"><call pos:start="1178:9" pos:end="1178:22"><name pos:start="1178:9" pos:end="1178:12">free</name><argument_list pos:start="1178:13" pos:end="1178:22">(<argument pos:start="1178:14" pos:end="1178:21"><expr pos:start="1178:14" pos:end="1178:21"><name pos:start="1178:14" pos:end="1178:21">orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1179:9" pos:end="1179:22"><expr pos:start="1179:9" pos:end="1179:21"><call pos:start="1179:9" pos:end="1179:21"><name pos:start="1179:9" pos:end="1179:12">free</name><argument_list pos:start="1179:13" pos:end="1179:21">(<argument pos:start="1179:14" pos:end="1179:20"><expr pos:start="1179:14" pos:end="1179:20"><name pos:start="1179:14" pos:end="1179:20">new_der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1180:9" pos:end="1180:32">return <expr pos:start="1180:16" pos:end="1180:31"><operator pos:start="1180:16" pos:end="1180:16">(</operator><name pos:start="1180:17" pos:end="1180:30">EST_ERR_MALLOC</name><operator pos:start="1180:31" pos:end="1180:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1182:5" pos:end="1182:35"><expr pos:start="1182:5" pos:end="1182:34"><call pos:start="1182:5" pos:end="1182:34"><name pos:start="1182:5" pos:end="1182:13">memzero_s</name><argument_list pos:start="1182:14" pos:end="1182:34">(<argument pos:start="1182:15" pos:end="1182:22"><expr pos:start="1182:15" pos:end="1182:22"><name pos:start="1182:15" pos:end="1182:22">csrattrs</name></expr></argument>, <argument pos:start="1182:25" pos:end="1182:33"><expr pos:start="1182:25" pos:end="1182:33"><name pos:start="1182:25" pos:end="1182:31">new_len</name><operator pos:start="1182:32" pos:end="1182:32">*</operator><literal type="number" pos:start="1182:33" pos:end="1182:33">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="1184:5" pos:end="1184:93"><expr pos:start="1184:5" pos:end="1184:92"><name pos:start="1184:5" pos:end="1184:11">enc_len</name> <operator pos:start="1184:13" pos:end="1184:13">=</operator> <call pos:start="1184:15" pos:end="1184:92"><name pos:start="1184:15" pos:end="1184:31">est_base64_encode</name><argument_list pos:start="1184:32" pos:end="1184:92">(<argument pos:start="1184:33" pos:end="1184:53"><expr pos:start="1184:33" pos:end="1184:53"><operator pos:start="1184:33" pos:end="1184:33">(</operator><specifier pos:start="1184:34" pos:end="1184:38">const</specifier> <name pos:start="1184:40" pos:end="1184:43">char</name> <operator pos:start="1184:45" pos:end="1184:45">*</operator><operator pos:start="1184:46" pos:end="1184:46">)</operator><name pos:start="1184:47" pos:end="1184:53">new_der</name></expr></argument>, <argument pos:start="1184:56" pos:end="1184:62"><expr pos:start="1184:56" pos:end="1184:62"><name pos:start="1184:56" pos:end="1184:62">new_len</name></expr></argument>, <argument pos:start="1184:65" pos:end="1184:80"><expr pos:start="1184:65" pos:end="1184:80"><operator pos:start="1184:65" pos:end="1184:65">(</operator><name pos:start="1184:66" pos:end="1184:69">char</name> <operator pos:start="1184:71" pos:end="1184:71">*</operator><operator pos:start="1184:72" pos:end="1184:72">)</operator><name pos:start="1184:73" pos:end="1184:80">csrattrs</name></expr></argument>, <argument pos:start="1184:83" pos:end="1184:91"><expr pos:start="1184:83" pos:end="1184:91"><name pos:start="1184:83" pos:end="1184:89">new_len</name><operator pos:start="1184:90" pos:end="1184:90">*</operator><literal type="number" pos:start="1184:91" pos:end="1184:91">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1185:5" pos:end="1191:5"><if pos:start="1185:5" pos:end="1191:5">if <condition pos:start="1185:8" pos:end="1185:21">(<expr pos:start="1185:9" pos:end="1185:20"><name pos:start="1185:9" pos:end="1185:15">enc_len</name> <operator pos:start="1185:17" pos:end="1185:18">&lt;=</operator> <literal type="number" pos:start="1185:20" pos:end="1185:20">0</literal></expr>)</condition> <block pos:start="1185:23" pos:end="1191:5">{<block_content pos:start="1186:9" pos:end="1190:36">
        <expr_stmt pos:start="1186:9" pos:end="1186:51"><expr pos:start="1186:9" pos:end="1186:50"><call pos:start="1186:9" pos:end="1186:50"><name pos:start="1186:9" pos:end="1186:19">EST_LOG_ERR</name><argument_list pos:start="1186:20" pos:end="1186:50">(<argument pos:start="1186:21" pos:end="1186:49"><expr pos:start="1186:21" pos:end="1186:49"><literal type="string" pos:start="1186:21" pos:end="1186:49">"Invalid base64 encoded data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1187:9" pos:end="1187:23"><expr pos:start="1187:9" pos:end="1187:22"><call pos:start="1187:9" pos:end="1187:22"><name pos:start="1187:9" pos:end="1187:12">free</name><argument_list pos:start="1187:13" pos:end="1187:22">(<argument pos:start="1187:14" pos:end="1187:21"><expr pos:start="1187:14" pos:end="1187:21"><name pos:start="1187:14" pos:end="1187:21">orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1188:9" pos:end="1188:22"><expr pos:start="1188:9" pos:end="1188:21"><call pos:start="1188:9" pos:end="1188:21"><name pos:start="1188:9" pos:end="1188:12">free</name><argument_list pos:start="1188:13" pos:end="1188:21">(<argument pos:start="1188:14" pos:end="1188:20"><expr pos:start="1188:14" pos:end="1188:20"><name pos:start="1188:14" pos:end="1188:20">new_der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1189:9" pos:end="1189:23"><expr pos:start="1189:9" pos:end="1189:22"><call pos:start="1189:9" pos:end="1189:22"><name pos:start="1189:9" pos:end="1189:12">free</name><argument_list pos:start="1189:13" pos:end="1189:22">(<argument pos:start="1189:14" pos:end="1189:21"><expr pos:start="1189:14" pos:end="1189:21"><name pos:start="1189:14" pos:end="1189:21">csrattrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1190:9" pos:end="1190:36">return <expr pos:start="1190:16" pos:end="1190:35"><operator pos:start="1190:16" pos:end="1190:16">(</operator><name pos:start="1190:17" pos:end="1190:34">EST_ERR_BAD_BASE64</name><operator pos:start="1190:35" pos:end="1190:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1193:5" pos:end="1193:24"><expr pos:start="1193:5" pos:end="1193:23"><operator pos:start="1193:5" pos:end="1193:5">*</operator><name pos:start="1193:6" pos:end="1193:12">new_csr</name> <operator pos:start="1193:14" pos:end="1193:14">=</operator> <name pos:start="1193:16" pos:end="1193:23">csrattrs</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1194:5" pos:end="1194:52"><expr pos:start="1194:5" pos:end="1194:51"><operator pos:start="1194:5" pos:end="1194:5">*</operator><name pos:start="1194:6" pos:end="1194:12">pop_len</name> <operator pos:start="1194:14" pos:end="1194:14">=</operator> <operator pos:start="1194:16" pos:end="1194:16">(</operator><name pos:start="1194:17" pos:end="1194:19">int</name><operator pos:start="1194:20" pos:end="1194:20">)</operator> <call pos:start="1194:22" pos:end="1194:51"><name pos:start="1194:22" pos:end="1194:30">strnlen_s</name><argument_list pos:start="1194:31" pos:end="1194:51">(<argument pos:start="1194:32" pos:end="1194:39"><expr pos:start="1194:32" pos:end="1194:39"><name pos:start="1194:32" pos:end="1194:39">csrattrs</name></expr></argument>, <argument pos:start="1194:42" pos:end="1194:50"><expr pos:start="1194:42" pos:end="1194:50"><name pos:start="1194:42" pos:end="1194:48">new_len</name><operator pos:start="1194:49" pos:end="1194:49">*</operator><literal type="number" pos:start="1194:50" pos:end="1194:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1195:5" pos:end="1195:93"><expr pos:start="1195:5" pos:end="1195:92"><call pos:start="1195:5" pos:end="1195:92"><name pos:start="1195:5" pos:end="1195:16">EST_LOG_INFO</name><argument_list pos:start="1195:17" pos:end="1195:92">(<argument pos:start="1195:18" pos:end="1195:62"><expr pos:start="1195:18" pos:end="1195:62"><literal type="string" pos:start="1195:18" pos:end="1195:62">"CSR reconstituted attributes are(%d/%d): %s"</literal></expr></argument>, <argument pos:start="1195:65" pos:end="1195:71"><expr pos:start="1195:65" pos:end="1195:71"><name pos:start="1195:65" pos:end="1195:71">b64_len</name></expr></argument>, <argument pos:start="1195:74" pos:end="1195:81"><expr pos:start="1195:74" pos:end="1195:81"><operator pos:start="1195:74" pos:end="1195:74">*</operator><name pos:start="1195:75" pos:end="1195:81">pop_len</name></expr></argument>, <argument pos:start="1195:84" pos:end="1195:91"><expr pos:start="1195:84" pos:end="1195:91"><name pos:start="1195:84" pos:end="1195:91">csrattrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1197:5" pos:end="1199:5"><if pos:start="1197:5" pos:end="1199:5">if <condition pos:start="1197:8" pos:end="1197:16">(<expr pos:start="1197:9" pos:end="1197:15"><name pos:start="1197:9" pos:end="1197:15">new_der</name></expr>)</condition> <block pos:start="1197:18" pos:end="1199:5">{<block_content pos:start="1198:9" pos:end="1198:22">
        <expr_stmt pos:start="1198:9" pos:end="1198:22"><expr pos:start="1198:9" pos:end="1198:21"><call pos:start="1198:9" pos:end="1198:21"><name pos:start="1198:9" pos:end="1198:12">free</name><argument_list pos:start="1198:13" pos:end="1198:21">(<argument pos:start="1198:14" pos:end="1198:20"><expr pos:start="1198:14" pos:end="1198:20"><name pos:start="1198:14" pos:end="1198:20">new_der</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1200:5" pos:end="1202:5"><if pos:start="1200:5" pos:end="1202:5">if <condition pos:start="1200:8" pos:end="1200:17">(<expr pos:start="1200:9" pos:end="1200:16"><name pos:start="1200:9" pos:end="1200:16">orig_ptr</name></expr>)</condition> <block pos:start="1200:19" pos:end="1202:5">{<block_content pos:start="1201:9" pos:end="1201:23">
        <expr_stmt pos:start="1201:9" pos:end="1201:23"><expr pos:start="1201:9" pos:end="1201:22"><call pos:start="1201:9" pos:end="1201:22"><name pos:start="1201:9" pos:end="1201:12">free</name><argument_list pos:start="1201:13" pos:end="1201:22">(<argument pos:start="1201:14" pos:end="1201:21"><expr pos:start="1201:14" pos:end="1201:21"><name pos:start="1201:14" pos:end="1201:21">orig_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1203:5" pos:end="1203:26">return <expr pos:start="1203:12" pos:end="1203:25"><operator pos:start="1203:12" pos:end="1203:12">(</operator><name pos:start="1203:13" pos:end="1203:24">EST_ERR_NONE</name><operator pos:start="1203:25" pos:end="1203:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1205:1" pos:end="1217:3">/*! @brief est_add_attributes_helper() Add a NID and its character string to
    an X509_REQ as an attribute.
 
    @param req an X509_REQ structure used for the CSR request
    @param nid NID to be added as an attribute
    @param string pointer to the NID string if needed
    @param chtype type of string used with this NID
 
    @return EST_ERROR

    This function is used to add a CSR attribute to a CSR request by the
    EST client.
 */</comment>
<function pos:start="1218:1" pos:end="1244:1"><type pos:start="1218:1" pos:end="1218:9"><name pos:start="1218:1" pos:end="1218:9">EST_ERROR</name></type> <name pos:start="1218:11" pos:end="1218:35">est_add_attributes_helper</name> <parameter_list pos:start="1218:37" pos:end="1218:86">(<parameter pos:start="1218:38" pos:end="1218:50"><decl pos:start="1218:38" pos:end="1218:50"><type pos:start="1218:38" pos:end="1218:50"><name pos:start="1218:38" pos:end="1218:45">X509_REQ</name> <modifier pos:start="1218:47" pos:end="1218:47">*</modifier></type><name pos:start="1218:48" pos:end="1218:50">req</name></decl></parameter>, <parameter pos:start="1218:53" pos:end="1218:59"><decl pos:start="1218:53" pos:end="1218:59"><type pos:start="1218:53" pos:end="1218:59"><name pos:start="1218:53" pos:end="1218:55">int</name></type> <name pos:start="1218:57" pos:end="1218:59">nid</name></decl></parameter>, <parameter pos:start="1218:62" pos:end="1218:73"><decl pos:start="1218:62" pos:end="1218:73"><type pos:start="1218:62" pos:end="1218:73"><name pos:start="1218:62" pos:end="1218:65">void</name> <modifier pos:start="1218:67" pos:end="1218:67">*</modifier></type><name pos:start="1218:68" pos:end="1218:73">string</name></decl></parameter>, <parameter pos:start="1218:76" pos:end="1218:85"><decl pos:start="1218:76" pos:end="1218:85"><type pos:start="1218:76" pos:end="1218:85"><name pos:start="1218:76" pos:end="1218:78">int</name></type> <name pos:start="1218:80" pos:end="1218:85">chtype</name></decl></parameter>)</parameter_list>
<block pos:start="1219:1" pos:end="1244:1">{<block_content pos:start="1221:5" pos:end="1243:26">
    
    <if_stmt pos:start="1221:5" pos:end="1223:5"><if pos:start="1221:5" pos:end="1223:5">if <condition pos:start="1221:8" pos:end="1221:20">(<expr pos:start="1221:9" pos:end="1221:19"><name pos:start="1221:9" pos:end="1221:11">req</name> <operator pos:start="1221:13" pos:end="1221:14">==</operator> <name pos:start="1221:16" pos:end="1221:19">NULL</name></expr>)</condition> <block pos:start="1221:22" pos:end="1223:5">{<block_content pos:start="1222:9" pos:end="1222:44">
        <return pos:start="1222:9" pos:end="1222:44">return <expr pos:start="1222:16" pos:end="1222:43"><operator pos:start="1222:16" pos:end="1222:16">(</operator><name pos:start="1222:17" pos:end="1222:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1222:43" pos:end="1222:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1225:5" pos:end="1227:5"><if pos:start="1225:5" pos:end="1227:5">if <condition pos:start="1225:8" pos:end="1225:17">(<expr pos:start="1225:9" pos:end="1225:16"><name pos:start="1225:9" pos:end="1225:11">nid</name> <operator pos:start="1225:13" pos:end="1225:14">==</operator> <literal type="number" pos:start="1225:16" pos:end="1225:16">0</literal></expr>)</condition> <block pos:start="1225:19" pos:end="1227:5">{<block_content pos:start="1226:9" pos:end="1226:44">
        <return pos:start="1226:9" pos:end="1226:44">return <expr pos:start="1226:16" pos:end="1226:43"><operator pos:start="1226:16" pos:end="1226:16">(</operator><name pos:start="1226:17" pos:end="1226:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1226:43" pos:end="1226:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1229:5" pos:end="1231:5"><if pos:start="1229:5" pos:end="1231:5">if <condition pos:start="1229:8" pos:end="1229:23">(<expr pos:start="1229:9" pos:end="1229:22"><name pos:start="1229:9" pos:end="1229:14">string</name> <operator pos:start="1229:16" pos:end="1229:17">==</operator> <name pos:start="1229:19" pos:end="1229:22">NULL</name></expr>)</condition> <block pos:start="1229:25" pos:end="1231:5">{<block_content pos:start="1230:9" pos:end="1230:44">
        <return pos:start="1230:9" pos:end="1230:44">return <expr pos:start="1230:16" pos:end="1230:43"><operator pos:start="1230:16" pos:end="1230:16">(</operator><name pos:start="1230:17" pos:end="1230:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1230:43" pos:end="1230:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1233:5" pos:end="1233:78">/* Only MBSTRING_ASC used today, but callers could pass in other values */</comment>
    <if_stmt pos:start="1234:5" pos:end="1236:5"><if pos:start="1234:5" pos:end="1236:5">if <condition pos:start="1234:8" pos:end="1234:20">(<expr pos:start="1234:9" pos:end="1234:19"><name pos:start="1234:9" pos:end="1234:14">chtype</name> <operator pos:start="1234:16" pos:end="1234:17">==</operator> <literal type="number" pos:start="1234:19" pos:end="1234:19">0</literal></expr>)</condition> <block pos:start="1234:22" pos:end="1236:5">{<block_content pos:start="1235:9" pos:end="1235:30">
        <expr_stmt pos:start="1235:9" pos:end="1235:30"><expr pos:start="1235:9" pos:end="1235:29"><name pos:start="1235:9" pos:end="1235:14">chtype</name> <operator pos:start="1235:16" pos:end="1235:16">=</operator> <name pos:start="1235:18" pos:end="1235:29">MBSTRING_ASC</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1238:5" pos:end="1242:5"><if pos:start="1238:5" pos:end="1242:5">if<condition pos:start="1238:7" pos:end="1239:63">(<expr pos:start="1238:8" pos:end="1239:62"><operator pos:start="1238:8" pos:end="1238:8">!</operator><call pos:start="1238:9" pos:end="1239:62"><name pos:start="1238:9" pos:end="1238:33">X509_REQ_add1_attr_by_NID</name><argument_list pos:start="1238:34" pos:end="1239:62">(<argument pos:start="1238:35" pos:end="1238:37"><expr pos:start="1238:35" pos:end="1238:37"><name pos:start="1238:35" pos:end="1238:37">req</name></expr></argument>, <argument pos:start="1238:40" pos:end="1238:42"><expr pos:start="1238:40" pos:end="1238:42"><name pos:start="1238:40" pos:end="1238:42">nid</name></expr></argument>, <argument pos:start="1238:45" pos:end="1238:50"><expr pos:start="1238:45" pos:end="1238:50"><name pos:start="1238:45" pos:end="1238:50">chtype</name></expr></argument>,
				  <argument pos:start="1239:35" pos:end="1239:57"><expr pos:start="1239:35" pos:end="1239:57"><operator pos:start="1239:35" pos:end="1239:35">(</operator><name pos:start="1239:36" pos:end="1239:43">unsigned</name> <name pos:start="1239:45" pos:end="1239:48">char</name> <operator pos:start="1239:50" pos:end="1239:50">*</operator><operator pos:start="1239:51" pos:end="1239:51">)</operator><name pos:start="1239:52" pos:end="1239:57">string</name></expr></argument>, <argument pos:start="1239:60" pos:end="1239:61"><expr pos:start="1239:60" pos:end="1239:61"><operator pos:start="1239:60" pos:end="1239:60">-</operator><literal type="number" pos:start="1239:61" pos:end="1239:61">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1239:65" pos:end="1242:5">{<block_content pos:start="1240:9" pos:end="1241:35">
	<expr_stmt pos:start="1240:9" pos:end="1240:47"><expr pos:start="1240:9" pos:end="1240:46"><call pos:start="1240:9" pos:end="1240:46"><name pos:start="1240:9" pos:end="1240:20">EST_LOG_WARN</name><argument_list pos:start="1240:21" pos:end="1240:46">(<argument pos:start="1240:22" pos:end="1240:45"><expr pos:start="1240:22" pos:end="1240:45"><literal type="string" pos:start="1240:22" pos:end="1240:45">"Error adding attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1241:9" pos:end="1241:35">return <expr pos:start="1241:16" pos:end="1241:34"><operator pos:start="1241:16" pos:end="1241:16">(</operator><name pos:start="1241:17" pos:end="1241:33">EST_ERR_X509_ATTR</name><operator pos:start="1241:34" pos:end="1241:34">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1243:5" pos:end="1243:26">return <expr pos:start="1243:12" pos:end="1243:25"><operator pos:start="1243:12" pos:end="1243:12">(</operator><name pos:start="1243:13" pos:end="1243:24">EST_ERR_NONE</name><operator pos:start="1243:25" pos:end="1243:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1245:1" pos:end="1257:3">/*! @brief est_decode_attributes_helper() Decode a base64 encoded string
    into DER format(ASN.1 hex).
 
    @param csrattrs pointer to a base64 encoded string
    @param csrattrs_len base64 string length
    @param der_ptr pointer to a pointer to store the DER encoded string
    @param der_len pointer to store the DER string length
 
    @return EST_ERROR

    This function is used decode a base64 encoded CSR attributes string
    into DER format.  It also performs range checking on the input parameters.
 */</comment>
<function pos:start="1258:1" pos:end="1299:1"><type pos:start="1258:1" pos:end="1258:9"><name pos:start="1258:1" pos:end="1258:9">EST_ERROR</name></type> <name pos:start="1258:11" pos:end="1258:38">est_decode_attributes_helper</name> <parameter_list pos:start="1258:40" pos:end="1259:70">(<parameter pos:start="1258:41" pos:end="1258:54"><decl pos:start="1258:41" pos:end="1258:54"><type pos:start="1258:41" pos:end="1258:54"><name pos:start="1258:41" pos:end="1258:44">char</name> <modifier pos:start="1258:46" pos:end="1258:46">*</modifier></type><name pos:start="1258:47" pos:end="1258:54">csrattrs</name></decl></parameter>, <parameter pos:start="1258:57" pos:end="1258:72"><decl pos:start="1258:57" pos:end="1258:72"><type pos:start="1258:57" pos:end="1258:72"><name pos:start="1258:57" pos:end="1258:59">int</name></type> <name pos:start="1258:61" pos:end="1258:72">csrattrs_len</name></decl></parameter>, 
					<parameter pos:start="1259:41" pos:end="1259:59"><decl pos:start="1259:41" pos:end="1259:59"><type pos:start="1259:41" pos:end="1259:59"><name pos:start="1259:41" pos:end="1259:48">unsigned</name> <name pos:start="1259:50" pos:end="1259:53">char</name> <modifier pos:start="1259:55" pos:end="1259:55">*</modifier><modifier pos:start="1259:56" pos:end="1259:56">*</modifier></type><name pos:start="1259:57" pos:end="1259:59">der</name></decl></parameter>, <parameter pos:start="1259:62" pos:end="1259:69"><decl pos:start="1259:62" pos:end="1259:69"><type pos:start="1259:62" pos:end="1259:69"><name pos:start="1259:62" pos:end="1259:64">int</name> <modifier pos:start="1259:66" pos:end="1259:66">*</modifier></type><name pos:start="1259:67" pos:end="1259:69">len</name></decl></parameter>)</parameter_list>
<block pos:start="1260:1" pos:end="1299:1">{<block_content pos:start="1261:5" pos:end="1297:26">
    <decl_stmt pos:start="1261:5" pos:end="1261:27"><decl pos:start="1261:5" pos:end="1261:26"><type pos:start="1261:5" pos:end="1261:19"><name pos:start="1261:5" pos:end="1261:12">unsigned</name> <name pos:start="1261:14" pos:end="1261:17">char</name> <modifier pos:start="1261:19" pos:end="1261:19">*</modifier></type><name pos:start="1261:20" pos:end="1261:26">der_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1262:5" pos:end="1262:16"><decl pos:start="1262:5" pos:end="1262:15"><type pos:start="1262:5" pos:end="1262:7"><name pos:start="1262:5" pos:end="1262:7">int</name></type> <name pos:start="1262:9" pos:end="1262:15">der_len</name></decl>;</decl_stmt>

    <comment type="block" pos:start="1264:5" pos:end="1264:32">/* just return if no data */</comment>
    <if_stmt pos:start="1265:5" pos:end="1267:5"><if pos:start="1265:5" pos:end="1267:5">if <condition pos:start="1265:8" pos:end="1265:50">(<expr pos:start="1265:9" pos:end="1265:49"><operator pos:start="1265:9" pos:end="1265:9">(</operator><name pos:start="1265:10" pos:end="1265:17">csrattrs</name> <operator pos:start="1265:19" pos:end="1265:20">==</operator> <name pos:start="1265:22" pos:end="1265:25">NULL</name><operator pos:start="1265:26" pos:end="1265:26">)</operator> <operator pos:start="1265:28" pos:end="1265:29">||</operator> <operator pos:start="1265:31" pos:end="1265:31">(</operator><name pos:start="1265:32" pos:end="1265:43">csrattrs_len</name> <operator pos:start="1265:45" pos:end="1265:46">==</operator> <literal type="number" pos:start="1265:48" pos:end="1265:48">0</literal><operator pos:start="1265:49" pos:end="1265:49">)</operator></expr>)</condition> <block pos:start="1265:52" pos:end="1267:5">{<block_content pos:start="1266:9" pos:end="1266:44">
        <return pos:start="1266:9" pos:end="1266:44">return <expr pos:start="1266:16" pos:end="1266:43"><operator pos:start="1266:16" pos:end="1266:16">(</operator><name pos:start="1266:17" pos:end="1266:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1266:43" pos:end="1266:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1269:5" pos:end="1271:5"><if pos:start="1269:5" pos:end="1271:5">if <condition pos:start="1269:8" pos:end="1269:39">(<expr pos:start="1269:9" pos:end="1269:38"><operator pos:start="1269:9" pos:end="1269:9">(</operator><name pos:start="1269:10" pos:end="1269:12">der</name> <operator pos:start="1269:14" pos:end="1269:15">==</operator> <name pos:start="1269:17" pos:end="1269:20">NULL</name><operator pos:start="1269:21" pos:end="1269:21">)</operator> <operator pos:start="1269:23" pos:end="1269:24">||</operator> <operator pos:start="1269:26" pos:end="1269:26">(</operator><name pos:start="1269:27" pos:end="1269:29">len</name> <operator pos:start="1269:31" pos:end="1269:32">==</operator> <name pos:start="1269:34" pos:end="1269:37">NULL</name><operator pos:start="1269:38" pos:end="1269:38">)</operator></expr>)</condition> <block pos:start="1269:41" pos:end="1271:5">{<block_content pos:start="1270:9" pos:end="1270:44">
        <return pos:start="1270:9" pos:end="1270:44">return <expr pos:start="1270:16" pos:end="1270:43"><operator pos:start="1270:16" pos:end="1270:16">(</operator><name pos:start="1270:17" pos:end="1270:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1270:43" pos:end="1270:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1273:5" pos:end="1276:7">/* 
     * check smallest possible base64 case here for now 
     * and sanity test will check min/max value for ASN.1 data
     */</comment>
    <if_stmt pos:start="1277:5" pos:end="1279:5"><if pos:start="1277:5" pos:end="1279:5">if <condition pos:start="1277:8" pos:end="1277:36">(<expr pos:start="1277:9" pos:end="1277:35"><name pos:start="1277:9" pos:end="1277:20">csrattrs_len</name> <operator pos:start="1277:22" pos:end="1277:22">&lt;</operator> <name pos:start="1277:24" pos:end="1277:35">MIN_CSRATTRS</name></expr>)</condition> <block pos:start="1277:38" pos:end="1279:5">{<block_content pos:start="1278:9" pos:end="1278:44">
        <return pos:start="1278:9" pos:end="1278:44">return <expr pos:start="1278:16" pos:end="1278:43"><operator pos:start="1278:16" pos:end="1278:16">(</operator><name pos:start="1278:17" pos:end="1278:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1278:43" pos:end="1278:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <expr_stmt pos:start="1282:5" pos:end="1282:37"><expr pos:start="1282:5" pos:end="1282:36"><name pos:start="1282:5" pos:end="1282:11">der_ptr</name> <operator pos:start="1282:13" pos:end="1282:13">=</operator> <call pos:start="1282:15" pos:end="1282:36"><name pos:start="1282:15" pos:end="1282:20">malloc</name><argument_list pos:start="1282:21" pos:end="1282:36">(<argument pos:start="1282:22" pos:end="1282:35"><expr pos:start="1282:22" pos:end="1282:35"><name pos:start="1282:22" pos:end="1282:33">csrattrs_len</name><operator pos:start="1282:34" pos:end="1282:34">*</operator><literal type="number" pos:start="1282:35" pos:end="1282:35">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1283:5" pos:end="1285:5"><if pos:start="1283:5" pos:end="1285:5">if <condition pos:start="1283:8" pos:end="1283:17">(<expr pos:start="1283:9" pos:end="1283:16"><operator pos:start="1283:9" pos:end="1283:9">!</operator><name pos:start="1283:10" pos:end="1283:16">der_ptr</name></expr>)</condition> <block pos:start="1283:19" pos:end="1285:5">{<block_content pos:start="1284:9" pos:end="1284:32">
        <return pos:start="1284:9" pos:end="1284:32">return <expr pos:start="1284:16" pos:end="1284:31"><operator pos:start="1284:16" pos:end="1284:16">(</operator><name pos:start="1284:17" pos:end="1284:30">EST_ERR_MALLOC</name><operator pos:start="1284:31" pos:end="1284:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1287:5" pos:end="1287:75"><expr pos:start="1287:5" pos:end="1287:74"><name pos:start="1287:5" pos:end="1287:11">der_len</name> <operator pos:start="1287:13" pos:end="1287:13">=</operator> <call pos:start="1287:15" pos:end="1287:74"><name pos:start="1287:15" pos:end="1287:31">est_base64_decode</name><argument_list pos:start="1287:32" pos:end="1287:74">(<argument pos:start="1287:33" pos:end="1287:40"><expr pos:start="1287:33" pos:end="1287:40"><name pos:start="1287:33" pos:end="1287:40">csrattrs</name></expr></argument>, <argument pos:start="1287:43" pos:end="1287:57"><expr pos:start="1287:43" pos:end="1287:57"><operator pos:start="1287:43" pos:end="1287:43">(</operator><name pos:start="1287:44" pos:end="1287:47">char</name> <operator pos:start="1287:49" pos:end="1287:49">*</operator><operator pos:start="1287:50" pos:end="1287:50">)</operator><name pos:start="1287:51" pos:end="1287:57">der_ptr</name></expr></argument>, <argument pos:start="1287:60" pos:end="1287:73"><expr pos:start="1287:60" pos:end="1287:73"><name pos:start="1287:60" pos:end="1287:71">csrattrs_len</name><operator pos:start="1287:72" pos:end="1287:72">*</operator><literal type="number" pos:start="1287:73" pos:end="1287:73">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1288:5" pos:end="1292:5"><if pos:start="1288:5" pos:end="1292:5">if <condition pos:start="1288:8" pos:end="1288:21">(<expr pos:start="1288:9" pos:end="1288:20"><name pos:start="1288:9" pos:end="1288:15">der_len</name> <operator pos:start="1288:17" pos:end="1288:18">&lt;=</operator> <literal type="number" pos:start="1288:20" pos:end="1288:20">0</literal></expr>)</condition> <block pos:start="1288:23" pos:end="1292:5">{<block_content pos:start="1289:9" pos:end="1291:36">
        <expr_stmt pos:start="1289:9" pos:end="1289:52"><expr pos:start="1289:9" pos:end="1289:51"><call pos:start="1289:9" pos:end="1289:51"><name pos:start="1289:9" pos:end="1289:20">EST_LOG_WARN</name><argument_list pos:start="1289:21" pos:end="1289:51">(<argument pos:start="1289:22" pos:end="1289:50"><expr pos:start="1289:22" pos:end="1289:50"><literal type="string" pos:start="1289:22" pos:end="1289:50">"Invalid base64 encoded data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1290:9" pos:end="1290:22"><expr pos:start="1290:9" pos:end="1290:21"><call pos:start="1290:9" pos:end="1290:21"><name pos:start="1290:9" pos:end="1290:12">free</name><argument_list pos:start="1290:13" pos:end="1290:21">(<argument pos:start="1290:14" pos:end="1290:20"><expr pos:start="1290:14" pos:end="1290:20"><name pos:start="1290:14" pos:end="1290:20">der_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1291:9" pos:end="1291:36">return <expr pos:start="1291:16" pos:end="1291:35"><operator pos:start="1291:16" pos:end="1291:16">(</operator><name pos:start="1291:17" pos:end="1291:34">EST_ERR_BAD_BASE64</name><operator pos:start="1291:35" pos:end="1291:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1294:5" pos:end="1294:19"><expr pos:start="1294:5" pos:end="1294:18"><operator pos:start="1294:5" pos:end="1294:5">*</operator><name pos:start="1294:6" pos:end="1294:8">der</name> <operator pos:start="1294:10" pos:end="1294:10">=</operator> <name pos:start="1294:12" pos:end="1294:18">der_ptr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1295:5" pos:end="1295:19"><expr pos:start="1295:5" pos:end="1295:18"><operator pos:start="1295:5" pos:end="1295:5">*</operator><name pos:start="1295:6" pos:end="1295:8">len</name> <operator pos:start="1295:10" pos:end="1295:10">=</operator> <name pos:start="1295:12" pos:end="1295:18">der_len</name></expr>;</expr_stmt>

    <return pos:start="1297:5" pos:end="1297:26">return <expr pos:start="1297:12" pos:end="1297:25"><operator pos:start="1297:12" pos:end="1297:12">(</operator><name pos:start="1297:13" pos:end="1297:24">EST_ERR_NONE</name><operator pos:start="1297:25" pos:end="1297:25">)</operator></expr>;</return>

</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1300:1" pos:end="1312:3">/*! @brief est_get_attributes_helper() get attributes NID from a DER
    encoded string.
 
    @param der_ptr pointer to a pointer of DER encoded string
    @param der_len pointer to the DER encoded string length
    @param new_nid pointer to storage for NID, if found
 
    @return EST_ERROR

    This function is used to find the next NID in a DER encoded string.
    If no NID is found before reaching the end of the string, then
    new_nid returned as zero and EST_ERR_BAD_ASN1_HEX.
 */</comment>
<function pos:start="1313:1" pos:end="1372:1"><type pos:start="1313:1" pos:end="1313:9"><name pos:start="1313:1" pos:end="1313:9">EST_ERROR</name></type> <name pos:start="1313:11" pos:end="1313:35">est_get_attributes_helper</name> <parameter_list pos:start="1313:37" pos:end="1313:89">(<parameter pos:start="1313:38" pos:end="1313:60"><decl pos:start="1313:38" pos:end="1313:60"><type pos:start="1313:38" pos:end="1313:60"><name pos:start="1313:38" pos:end="1313:45">unsigned</name> <name pos:start="1313:47" pos:end="1313:50">char</name> <modifier pos:start="1313:52" pos:end="1313:52">*</modifier><modifier pos:start="1313:53" pos:end="1313:53">*</modifier></type><name pos:start="1313:54" pos:end="1313:60">der_ptr</name></decl></parameter>, <parameter pos:start="1313:63" pos:end="1313:74"><decl pos:start="1313:63" pos:end="1313:74"><type pos:start="1313:63" pos:end="1313:74"><name pos:start="1313:63" pos:end="1313:65">int</name> <modifier pos:start="1313:67" pos:end="1313:67">*</modifier></type><name pos:start="1313:68" pos:end="1313:74">der_len</name></decl></parameter>, <parameter pos:start="1313:77" pos:end="1313:88"><decl pos:start="1313:77" pos:end="1313:88"><type pos:start="1313:77" pos:end="1313:88"><name pos:start="1313:77" pos:end="1313:79">int</name> <modifier pos:start="1313:81" pos:end="1313:81">*</modifier></type><name pos:start="1313:82" pos:end="1313:88">new_nid</name></decl></parameter>)</parameter_list>
<block pos:start="1314:1" pos:end="1372:1">{<block_content pos:start="1315:5" pos:end="1371:26">
    <decl_stmt pos:start="1315:5" pos:end="1315:32"><decl pos:start="1315:5" pos:end="1315:11"><type pos:start="1315:5" pos:end="1315:7"><name pos:start="1315:5" pos:end="1315:7">int</name></type> <name pos:start="1315:9" pos:end="1315:11">tag</name></decl>, <decl pos:start="1315:14" pos:end="1315:19"><type ref="prev" pos:start="1315:5" pos:end="1315:7"/><name pos:start="1315:14" pos:end="1315:19">xclass</name></decl>, <decl pos:start="1315:22" pos:end="1315:22"><type ref="prev" pos:start="1315:5" pos:end="1315:7"/><name pos:start="1315:22" pos:end="1315:22">j</name></decl>, <decl pos:start="1315:25" pos:end="1315:31"><type ref="prev" pos:start="1315:5" pos:end="1315:7"/><name pos:start="1315:25" pos:end="1315:27">nid</name> <init pos:start="1315:29" pos:end="1315:31">= <expr pos:start="1315:31" pos:end="1315:31"><literal type="number" pos:start="1315:31" pos:end="1315:31">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1316:5" pos:end="1316:21"><decl pos:start="1316:5" pos:end="1316:20"><type pos:start="1316:5" pos:end="1316:7"><name pos:start="1316:5" pos:end="1316:7">int</name></type> <name pos:start="1316:9" pos:end="1316:20">out_len_save</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1317:5" pos:end="1317:17"><decl pos:start="1317:5" pos:end="1317:16"><type pos:start="1317:5" pos:end="1317:8"><name pos:start="1317:5" pos:end="1317:8">long</name></type> <name pos:start="1317:10" pos:end="1317:16">out_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1318:5" pos:end="1318:13"><decl pos:start="1318:5" pos:end="1318:12"><type pos:start="1318:5" pos:end="1318:8"><name pos:start="1318:5" pos:end="1318:8">long</name></type> <name pos:start="1318:10" pos:end="1318:12">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1319:5" pos:end="1319:32"><decl pos:start="1319:5" pos:end="1319:31"><type pos:start="1319:5" pos:end="1319:25"><specifier pos:start="1319:5" pos:end="1319:9">const</specifier> <name pos:start="1319:11" pos:end="1319:18">unsigned</name> <name pos:start="1319:20" pos:end="1319:23">char</name> <modifier pos:start="1319:25" pos:end="1319:25">*</modifier></type><name pos:start="1319:26" pos:end="1319:31">string</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1320:5" pos:end="1320:33"><decl pos:start="1320:5" pos:end="1320:32"><type pos:start="1320:5" pos:end="1320:25"><specifier pos:start="1320:5" pos:end="1320:9">const</specifier> <name pos:start="1320:11" pos:end="1320:18">unsigned</name> <name pos:start="1320:20" pos:end="1320:23">char</name> <modifier pos:start="1320:25" pos:end="1320:25">*</modifier></type><name pos:start="1320:26" pos:end="1320:32">ostring</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1321:5" pos:end="1321:33"><decl pos:start="1321:5" pos:end="1321:32"><type pos:start="1321:5" pos:end="1321:17"><name pos:start="1321:5" pos:end="1321:15">ASN1_OBJECT</name> <modifier pos:start="1321:17" pos:end="1321:17">*</modifier></type><name pos:start="1321:18" pos:end="1321:25">a_object</name> <init pos:start="1321:27" pos:end="1321:32">= <expr pos:start="1321:29" pos:end="1321:32"><name pos:start="1321:29" pos:end="1321:32">NULL</name></expr></init></decl>;</decl_stmt>


    <if_stmt pos:start="1324:5" pos:end="1326:5"><if pos:start="1324:5" pos:end="1326:5">if <condition pos:start="1324:8" pos:end="1324:24">(<expr pos:start="1324:9" pos:end="1324:23"><name pos:start="1324:9" pos:end="1324:15">der_ptr</name> <operator pos:start="1324:17" pos:end="1324:18">==</operator> <name pos:start="1324:20" pos:end="1324:23">NULL</name></expr>)</condition> <block pos:start="1324:26" pos:end="1326:5">{<block_content pos:start="1325:9" pos:end="1325:44">
        <return pos:start="1325:9" pos:end="1325:44">return <expr pos:start="1325:16" pos:end="1325:43"><operator pos:start="1325:16" pos:end="1325:16">(</operator><name pos:start="1325:17" pos:end="1325:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1325:43" pos:end="1325:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1327:5" pos:end="1327:22"><expr pos:start="1327:5" pos:end="1327:21"><name pos:start="1327:5" pos:end="1327:10">string</name> <operator pos:start="1327:12" pos:end="1327:12">=</operator> <operator pos:start="1327:14" pos:end="1327:14">*</operator><name pos:start="1327:15" pos:end="1327:21">der_ptr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1328:5" pos:end="1328:23"><expr pos:start="1328:5" pos:end="1328:22"><name pos:start="1328:5" pos:end="1328:11">ostring</name> <operator pos:start="1328:13" pos:end="1328:13">=</operator> <operator pos:start="1328:15" pos:end="1328:15">*</operator><name pos:start="1328:16" pos:end="1328:22">der_ptr</name></expr>;</expr_stmt>

    <if_stmt pos:start="1330:5" pos:end="1332:5"><if pos:start="1330:5" pos:end="1332:5">if <condition pos:start="1330:8" pos:end="1330:24">(<expr pos:start="1330:9" pos:end="1330:23"><name pos:start="1330:9" pos:end="1330:15">der_len</name> <operator pos:start="1330:17" pos:end="1330:18">==</operator> <name pos:start="1330:20" pos:end="1330:23">NULL</name></expr>)</condition> <block pos:start="1330:26" pos:end="1332:5">{<block_content pos:start="1331:9" pos:end="1331:44">
        <return pos:start="1331:9" pos:end="1331:44">return <expr pos:start="1331:16" pos:end="1331:43"><operator pos:start="1331:16" pos:end="1331:16">(</operator><name pos:start="1331:17" pos:end="1331:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1331:43" pos:end="1331:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1333:5" pos:end="1333:23"><expr pos:start="1333:5" pos:end="1333:22"><name pos:start="1333:5" pos:end="1333:11">out_len</name> <operator pos:start="1333:13" pos:end="1333:13">=</operator> <operator pos:start="1333:15" pos:end="1333:15">*</operator><name pos:start="1333:16" pos:end="1333:22">der_len</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1334:5" pos:end="1334:28"><expr pos:start="1334:5" pos:end="1334:27"><name pos:start="1334:5" pos:end="1334:16">out_len_save</name> <operator pos:start="1334:18" pos:end="1334:18">=</operator> <operator pos:start="1334:20" pos:end="1334:20">*</operator><name pos:start="1334:21" pos:end="1334:27">der_len</name></expr>;</expr_stmt>

    <if_stmt pos:start="1336:5" pos:end="1338:5"><if pos:start="1336:5" pos:end="1338:5">if <condition pos:start="1336:8" pos:end="1336:24">(<expr pos:start="1336:9" pos:end="1336:23"><name pos:start="1336:9" pos:end="1336:15">new_nid</name> <operator pos:start="1336:17" pos:end="1336:18">==</operator> <name pos:start="1336:20" pos:end="1336:23">NULL</name></expr>)</condition> <block pos:start="1336:26" pos:end="1338:5">{<block_content pos:start="1337:9" pos:end="1337:44">
        <return pos:start="1337:9" pos:end="1337:44">return <expr pos:start="1337:16" pos:end="1337:43"><operator pos:start="1337:16" pos:end="1337:16">(</operator><name pos:start="1337:17" pos:end="1337:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="1337:43" pos:end="1337:43">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while pos:start="1340:5" pos:end="1369:5">while <condition pos:start="1340:11" pos:end="1340:23">(<expr pos:start="1340:12" pos:end="1340:22"><name pos:start="1340:12" pos:end="1340:18">out_len</name> <operator pos:start="1340:20" pos:end="1340:20">&gt;</operator> <literal type="number" pos:start="1340:22" pos:end="1340:22">0</literal></expr>)</condition> <block pos:start="1340:25" pos:end="1369:5">{<block_content pos:start="1341:9" pos:end="1368:54">
	<expr_stmt pos:start="1341:9" pos:end="1341:67"><expr pos:start="1341:9" pos:end="1341:66"><name pos:start="1341:9" pos:end="1341:9">j</name> <operator pos:start="1341:11" pos:end="1341:11">=</operator> <call pos:start="1341:13" pos:end="1341:66"><name pos:start="1341:13" pos:end="1341:27">ASN1_get_object</name><argument_list pos:start="1341:28" pos:end="1341:66">(<argument pos:start="1341:29" pos:end="1341:35"><expr pos:start="1341:29" pos:end="1341:35"><operator pos:start="1341:29" pos:end="1341:29">&amp;</operator><name pos:start="1341:30" pos:end="1341:35">string</name></expr></argument>, <argument pos:start="1341:38" pos:end="1341:41"><expr pos:start="1341:38" pos:end="1341:41"><operator pos:start="1341:38" pos:end="1341:38">&amp;</operator><name pos:start="1341:39" pos:end="1341:41">len</name></expr></argument>, <argument pos:start="1341:44" pos:end="1341:47"><expr pos:start="1341:44" pos:end="1341:47"><operator pos:start="1341:44" pos:end="1341:44">&amp;</operator><name pos:start="1341:45" pos:end="1341:47">tag</name></expr></argument>, <argument pos:start="1341:50" pos:end="1341:56"><expr pos:start="1341:50" pos:end="1341:56"><operator pos:start="1341:50" pos:end="1341:50">&amp;</operator><name pos:start="1341:51" pos:end="1341:56">xclass</name></expr></argument>, <argument pos:start="1341:59" pos:end="1341:65"><expr pos:start="1341:59" pos:end="1341:65"><name pos:start="1341:59" pos:end="1341:65">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="1343:9" pos:end="1345:9"><if pos:start="1343:9" pos:end="1345:9">if <condition pos:start="1343:12" pos:end="1343:21">(<expr pos:start="1343:13" pos:end="1343:20"><name pos:start="1343:13" pos:end="1343:13">j</name> <operator pos:start="1343:15" pos:end="1343:15">&amp;</operator> <literal type="number" pos:start="1343:17" pos:end="1343:20">0x80</literal></expr>)</condition> <block pos:start="1343:23" pos:end="1345:9">{<block_content pos:start="1344:13" pos:end="1344:42">
	    <return pos:start="1344:13" pos:end="1344:42">return <expr pos:start="1344:20" pos:end="1344:41"><operator pos:start="1344:20" pos:end="1344:20">(</operator><name pos:start="1344:21" pos:end="1344:40">EST_ERR_BAD_ASN1_HEX</name><operator pos:start="1344:41" pos:end="1344:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
	<switch pos:start="1346:9" pos:end="1367:9">switch <condition pos:start="1346:16" pos:end="1346:20">(<expr pos:start="1346:17" pos:end="1346:19"><name pos:start="1346:17" pos:end="1346:19">tag</name></expr>)</condition> <block pos:start="1346:22" pos:end="1367:9">{<block_content pos:start="1348:9" pos:end="1366:18">

	<case pos:start="1348:9" pos:end="1348:27">case <expr pos:start="1348:14" pos:end="1348:26"><name pos:start="1348:14" pos:end="1348:26">V_ASN1_OBJECT</name></expr>:</case>
            <expr_stmt pos:start="1349:13" pos:end="1349:59"><expr pos:start="1349:13" pos:end="1349:58"><name pos:start="1349:13" pos:end="1349:20">a_object</name> <operator pos:start="1349:22" pos:end="1349:22">=</operator> <call pos:start="1349:24" pos:end="1349:58"><name pos:start="1349:24" pos:end="1349:38">c2i_ASN1_OBJECT</name><argument_list pos:start="1349:39" pos:end="1349:58">(<argument pos:start="1349:40" pos:end="1349:43"><expr pos:start="1349:40" pos:end="1349:43"><name pos:start="1349:40" pos:end="1349:43">NULL</name></expr></argument>, <argument pos:start="1349:46" pos:end="1349:52"><expr pos:start="1349:46" pos:end="1349:52"><operator pos:start="1349:46" pos:end="1349:46">&amp;</operator><name pos:start="1349:47" pos:end="1349:52">string</name></expr></argument>, <argument pos:start="1349:55" pos:end="1349:57"><expr pos:start="1349:55" pos:end="1349:57"><name pos:start="1349:55" pos:end="1349:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="1350:13" pos:end="1358:13"><if pos:start="1350:13" pos:end="1358:13">if <condition pos:start="1350:16" pos:end="1350:33">(<expr pos:start="1350:17" pos:end="1350:32"><name pos:start="1350:17" pos:end="1350:24">a_object</name> <operator pos:start="1350:26" pos:end="1350:27">!=</operator> <name pos:start="1350:29" pos:end="1350:32">NULL</name></expr>)</condition> <block pos:start="1350:35" pos:end="1358:13">{<block_content pos:start="1351:17" pos:end="1357:38">
	        <expr_stmt pos:start="1351:17" pos:end="1351:44"><expr pos:start="1351:17" pos:end="1351:43"><name pos:start="1351:17" pos:end="1351:19">nid</name> <operator pos:start="1351:21" pos:end="1351:21">=</operator> <call pos:start="1351:23" pos:end="1351:43"><name pos:start="1351:23" pos:end="1351:33">OBJ_obj2nid</name><argument_list pos:start="1351:34" pos:end="1351:43">(<argument pos:start="1351:35" pos:end="1351:42"><expr pos:start="1351:35" pos:end="1351:42"><name pos:start="1351:35" pos:end="1351:42">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="1352:17" pos:end="1352:44"><expr pos:start="1352:17" pos:end="1352:43"><call pos:start="1352:17" pos:end="1352:43"><name pos:start="1352:17" pos:end="1352:28">EST_LOG_INFO</name><argument_list pos:start="1352:29" pos:end="1352:43">(<argument pos:start="1352:30" pos:end="1352:37"><expr pos:start="1352:30" pos:end="1352:37"><literal type="string" pos:start="1352:30" pos:end="1352:37">"NID=%d"</literal></expr></argument>, <argument pos:start="1352:40" pos:end="1352:42"><expr pos:start="1352:40" pos:end="1352:42"><name pos:start="1352:40" pos:end="1352:42">nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="1353:17" pos:end="1353:31"><expr pos:start="1353:17" pos:end="1353:30"><operator pos:start="1353:17" pos:end="1353:17">*</operator><name pos:start="1353:18" pos:end="1353:24">new_nid</name> <operator pos:start="1353:26" pos:end="1353:26">=</operator> <name pos:start="1353:28" pos:end="1353:30">nid</name></expr>;</expr_stmt>
		<expr_stmt pos:start="1354:17" pos:end="1354:69"><expr pos:start="1354:17" pos:end="1354:68"><operator pos:start="1354:17" pos:end="1354:17">*</operator><name pos:start="1354:18" pos:end="1354:24">der_len</name> <operator pos:start="1354:26" pos:end="1354:26">=</operator> <operator pos:start="1354:28" pos:end="1354:28">(</operator><name pos:start="1354:29" pos:end="1354:40">out_len_save</name> <operator pos:start="1354:42" pos:end="1354:42">-</operator> <operator pos:start="1354:44" pos:end="1354:44">(</operator><name pos:start="1354:45" pos:end="1354:47">int</name><operator pos:start="1354:48" pos:end="1354:48">)</operator> <operator pos:start="1354:50" pos:end="1354:50">(</operator><name pos:start="1354:51" pos:end="1354:56">string</name> <operator pos:start="1354:58" pos:end="1354:58">-</operator> <name pos:start="1354:60" pos:end="1354:66">ostring</name><operator pos:start="1354:67" pos:end="1354:67">)</operator><operator pos:start="1354:68" pos:end="1354:68">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="1355:17" pos:end="1355:51"><expr pos:start="1355:17" pos:end="1355:50"><operator pos:start="1355:17" pos:end="1355:17">*</operator><name pos:start="1355:18" pos:end="1355:24">der_ptr</name> <operator pos:start="1355:26" pos:end="1355:26">=</operator> <operator pos:start="1355:28" pos:end="1355:28">(</operator><name pos:start="1355:29" pos:end="1355:36">unsigned</name> <name pos:start="1355:38" pos:end="1355:41">char</name> <operator pos:start="1355:43" pos:end="1355:43">*</operator><operator pos:start="1355:44" pos:end="1355:44">)</operator><name pos:start="1355:45" pos:end="1355:50">string</name></expr>;</expr_stmt>
	        <expr_stmt pos:start="1356:17" pos:end="1356:43"><expr pos:start="1356:17" pos:end="1356:42"><call pos:start="1356:17" pos:end="1356:42"><name pos:start="1356:17" pos:end="1356:32">ASN1_OBJECT_free</name><argument_list pos:start="1356:33" pos:end="1356:42">(<argument pos:start="1356:34" pos:end="1356:41"><expr pos:start="1356:34" pos:end="1356:41"><name pos:start="1356:34" pos:end="1356:41">a_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="1357:17" pos:end="1357:38">return <expr pos:start="1357:24" pos:end="1357:37"><operator pos:start="1357:24" pos:end="1357:24">(</operator><name pos:start="1357:25" pos:end="1357:36">EST_ERR_NONE</name><operator pos:start="1357:37" pos:end="1357:37">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
	    <break pos:start="1359:13" pos:end="1359:18">break;</break>
	<default pos:start="1360:9" pos:end="1360:16">default:</default>
	    <comment type="block" pos:start="1361:13" pos:end="1361:52">/* have to adjust string pointer here */</comment>
	    <expr_stmt pos:start="1362:13" pos:end="1362:26"><expr pos:start="1362:13" pos:end="1362:25"><name pos:start="1362:13" pos:end="1362:18">string</name> <operator pos:start="1362:20" pos:end="1362:21">+=</operator> <name pos:start="1362:23" pos:end="1362:25">len</name></expr>;</expr_stmt>
	    <break pos:start="1363:13" pos:end="1363:18">break;</break>
	<case pos:start="1364:9" pos:end="1364:24">case <expr pos:start="1364:14" pos:end="1364:23"><name pos:start="1364:14" pos:end="1364:23">V_ASN1_SET</name></expr>:</case>
	<case pos:start="1365:9" pos:end="1365:29">case <expr pos:start="1365:14" pos:end="1365:28"><name pos:start="1365:14" pos:end="1365:28">V_ASN1_SEQUENCE</name></expr>:</case>
	    <break pos:start="1366:13" pos:end="1366:18">break;</break>
	</block_content>}</block></switch>
	<expr_stmt pos:start="1368:9" pos:end="1368:54"><expr pos:start="1368:9" pos:end="1368:53"><name pos:start="1368:9" pos:end="1368:15">out_len</name> <operator pos:start="1368:17" pos:end="1368:17">=</operator> <operator pos:start="1368:19" pos:end="1368:19">(</operator><name pos:start="1368:20" pos:end="1368:31">out_len_save</name> <operator pos:start="1368:33" pos:end="1368:33">-</operator> <operator pos:start="1368:35" pos:end="1368:35">(</operator><name pos:start="1368:36" pos:end="1368:41">string</name> <operator pos:start="1368:43" pos:end="1368:43">-</operator> <name pos:start="1368:45" pos:end="1368:51">ostring</name><operator pos:start="1368:52" pos:end="1368:52">)</operator><operator pos:start="1368:53" pos:end="1368:53">)</operator></expr>;</expr_stmt>	
    </block_content>}</block></while>

    <return pos:start="1371:5" pos:end="1371:26">return <expr pos:start="1371:12" pos:end="1371:25"><operator pos:start="1371:12" pos:end="1371:12">(</operator><name pos:start="1371:13" pos:end="1371:24">EST_ERR_NONE</name><operator pos:start="1371:25" pos:end="1371:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1373:1" pos:end="1376:3">/* 
 * cleanse_auth_credentials - Walk through the auth_credentials structure and
 * overwrite and free each value.
 */</comment>
<function pos:start="1377:1" pos:end="1442:1"><type pos:start="1377:1" pos:end="1377:4"><name pos:start="1377:1" pos:end="1377:4">void</name></type> <name pos:start="1377:6" pos:end="1377:29">cleanse_auth_credentials</name><parameter_list pos:start="1377:30" pos:end="1377:59">(<parameter pos:start="1377:31" pos:end="1377:58"><decl pos:start="1377:31" pos:end="1377:58"><type pos:start="1377:31" pos:end="1377:49"><name pos:start="1377:31" pos:end="1377:47">EST_HTTP_AUTH_HDR</name> <modifier pos:start="1377:49" pos:end="1377:49">*</modifier></type><name pos:start="1377:50" pos:end="1377:58">auth_cred</name></decl></parameter>)</parameter_list>
<block pos:start="1378:1" pos:end="1442:1">{<block_content pos:start="1380:5" pos:end="1441:11">

    <if_stmt pos:start="1380:5" pos:end="1382:5"><if pos:start="1380:5" pos:end="1382:5">if <condition pos:start="1380:8" pos:end="1380:26">(<expr pos:start="1380:9" pos:end="1380:25"><name pos:start="1380:9" pos:end="1380:17">auth_cred</name> <operator pos:start="1380:19" pos:end="1380:20">==</operator> <name pos:start="1380:22" pos:end="1380:25">NULL</name></expr>)</condition> <block pos:start="1380:28" pos:end="1382:5">{<block_content pos:start="1381:9" pos:end="1381:15">
        <return pos:start="1381:9" pos:end="1381:15">return;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1384:5" pos:end="1388:5"><if pos:start="1384:5" pos:end="1388:5">if <condition pos:start="1384:8" pos:end="1384:24">(<expr pos:start="1384:9" pos:end="1384:23"><name pos:start="1384:9" pos:end="1384:23"><name pos:start="1384:9" pos:end="1384:17">auth_cred</name><operator pos:start="1384:18" pos:end="1384:19">-&gt;</operator><name pos:start="1384:20" pos:end="1384:23">user</name></name></expr>)</condition> <block pos:start="1384:26" pos:end="1388:5">{<block_content pos:start="1385:9" pos:end="1387:31">
        <expr_stmt pos:start="1385:9" pos:end="1385:81"><expr pos:start="1385:9" pos:end="1385:80"><call pos:start="1385:9" pos:end="1385:80"><name pos:start="1385:9" pos:end="1385:23">OPENSSL_cleanse</name><argument_list pos:start="1385:24" pos:end="1385:80">(<argument pos:start="1385:25" pos:end="1385:39"><expr pos:start="1385:25" pos:end="1385:39"><name pos:start="1385:25" pos:end="1385:39"><name pos:start="1385:25" pos:end="1385:33">auth_cred</name><operator pos:start="1385:34" pos:end="1385:35">-&gt;</operator><name pos:start="1385:36" pos:end="1385:39">user</name></name></expr></argument>, <argument pos:start="1385:42" pos:end="1385:79"><expr pos:start="1385:42" pos:end="1385:79"><call pos:start="1385:42" pos:end="1385:79"><name pos:start="1385:42" pos:end="1385:50">strnlen_s</name><argument_list pos:start="1385:51" pos:end="1385:79">(<argument pos:start="1385:52" pos:end="1385:66"><expr pos:start="1385:52" pos:end="1385:66"><name pos:start="1385:52" pos:end="1385:66"><name pos:start="1385:52" pos:end="1385:60">auth_cred</name><operator pos:start="1385:61" pos:end="1385:62">-&gt;</operator><name pos:start="1385:63" pos:end="1385:66">user</name></name></expr></argument>, <argument pos:start="1385:69" pos:end="1385:78"><expr pos:start="1385:69" pos:end="1385:78"><name pos:start="1385:69" pos:end="1385:78">MAX_UIDPWD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1386:9" pos:end="1386:30"><expr pos:start="1386:9" pos:end="1386:29"><call pos:start="1386:9" pos:end="1386:29"><name pos:start="1386:9" pos:end="1386:12">free</name><argument_list pos:start="1386:13" pos:end="1386:29">(<argument pos:start="1386:14" pos:end="1386:28"><expr pos:start="1386:14" pos:end="1386:28"><name pos:start="1386:14" pos:end="1386:28"><name pos:start="1386:14" pos:end="1386:22">auth_cred</name><operator pos:start="1386:23" pos:end="1386:24">-&gt;</operator><name pos:start="1386:25" pos:end="1386:28">user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1387:9" pos:end="1387:31"><expr pos:start="1387:9" pos:end="1387:30"><name pos:start="1387:9" pos:end="1387:23"><name pos:start="1387:9" pos:end="1387:17">auth_cred</name><operator pos:start="1387:18" pos:end="1387:19">-&gt;</operator><name pos:start="1387:20" pos:end="1387:23">user</name></name> <operator pos:start="1387:25" pos:end="1387:25">=</operator> <name pos:start="1387:27" pos:end="1387:30">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1390:5" pos:end="1394:5"><if pos:start="1390:5" pos:end="1394:5">if <condition pos:start="1390:8" pos:end="1390:23">(<expr pos:start="1390:9" pos:end="1390:22"><name pos:start="1390:9" pos:end="1390:22"><name pos:start="1390:9" pos:end="1390:17">auth_cred</name><operator pos:start="1390:18" pos:end="1390:19">-&gt;</operator><name pos:start="1390:20" pos:end="1390:22">pwd</name></name></expr>)</condition> <block pos:start="1390:25" pos:end="1394:5">{<block_content pos:start="1391:9" pos:end="1393:30">
        <expr_stmt pos:start="1391:9" pos:end="1391:79"><expr pos:start="1391:9" pos:end="1391:78"><call pos:start="1391:9" pos:end="1391:78"><name pos:start="1391:9" pos:end="1391:23">OPENSSL_cleanse</name><argument_list pos:start="1391:24" pos:end="1391:78">(<argument pos:start="1391:25" pos:end="1391:38"><expr pos:start="1391:25" pos:end="1391:38"><name pos:start="1391:25" pos:end="1391:38"><name pos:start="1391:25" pos:end="1391:33">auth_cred</name><operator pos:start="1391:34" pos:end="1391:35">-&gt;</operator><name pos:start="1391:36" pos:end="1391:38">pwd</name></name></expr></argument>, <argument pos:start="1391:41" pos:end="1391:77"><expr pos:start="1391:41" pos:end="1391:77"><call pos:start="1391:41" pos:end="1391:77"><name pos:start="1391:41" pos:end="1391:49">strnlen_s</name><argument_list pos:start="1391:50" pos:end="1391:77">(<argument pos:start="1391:51" pos:end="1391:64"><expr pos:start="1391:51" pos:end="1391:64"><name pos:start="1391:51" pos:end="1391:64"><name pos:start="1391:51" pos:end="1391:59">auth_cred</name><operator pos:start="1391:60" pos:end="1391:61">-&gt;</operator><name pos:start="1391:62" pos:end="1391:64">pwd</name></name></expr></argument>, <argument pos:start="1391:67" pos:end="1391:76"><expr pos:start="1391:67" pos:end="1391:76"><name pos:start="1391:67" pos:end="1391:76">MAX_UIDPWD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1392:9" pos:end="1392:29"><expr pos:start="1392:9" pos:end="1392:28"><call pos:start="1392:9" pos:end="1392:28"><name pos:start="1392:9" pos:end="1392:12">free</name><argument_list pos:start="1392:13" pos:end="1392:28">(<argument pos:start="1392:14" pos:end="1392:27"><expr pos:start="1392:14" pos:end="1392:27"><name pos:start="1392:14" pos:end="1392:27"><name pos:start="1392:14" pos:end="1392:22">auth_cred</name><operator pos:start="1392:23" pos:end="1392:24">-&gt;</operator><name pos:start="1392:25" pos:end="1392:27">pwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1393:9" pos:end="1393:30"><expr pos:start="1393:9" pos:end="1393:29"><name pos:start="1393:9" pos:end="1393:22"><name pos:start="1393:9" pos:end="1393:17">auth_cred</name><operator pos:start="1393:18" pos:end="1393:19">-&gt;</operator><name pos:start="1393:20" pos:end="1393:22">pwd</name></name> <operator pos:start="1393:24" pos:end="1393:24">=</operator> <name pos:start="1393:26" pos:end="1393:29">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1396:5" pos:end="1400:5"><if pos:start="1396:5" pos:end="1400:5">if <condition pos:start="1396:8" pos:end="1396:23">(<expr pos:start="1396:9" pos:end="1396:22"><name pos:start="1396:9" pos:end="1396:22"><name pos:start="1396:9" pos:end="1396:17">auth_cred</name><operator pos:start="1396:18" pos:end="1396:19">-&gt;</operator><name pos:start="1396:20" pos:end="1396:22">uri</name></name></expr>)</condition> <block pos:start="1396:25" pos:end="1400:5">{<block_content pos:start="1397:9" pos:end="1399:30">
        <expr_stmt pos:start="1397:9" pos:end="1397:84"><expr pos:start="1397:9" pos:end="1397:83"><call pos:start="1397:9" pos:end="1397:83"><name pos:start="1397:9" pos:end="1397:23">OPENSSL_cleanse</name><argument_list pos:start="1397:24" pos:end="1397:83">(<argument pos:start="1397:25" pos:end="1397:38"><expr pos:start="1397:25" pos:end="1397:38"><name pos:start="1397:25" pos:end="1397:38"><name pos:start="1397:25" pos:end="1397:33">auth_cred</name><operator pos:start="1397:34" pos:end="1397:35">-&gt;</operator><name pos:start="1397:36" pos:end="1397:38">uri</name></name></expr></argument>, <argument pos:start="1397:41" pos:end="1397:82"><expr pos:start="1397:41" pos:end="1397:82"><call pos:start="1397:41" pos:end="1397:82"><name pos:start="1397:41" pos:end="1397:49">strnlen_s</name><argument_list pos:start="1397:50" pos:end="1397:82">(<argument pos:start="1397:51" pos:end="1397:64"><expr pos:start="1397:51" pos:end="1397:64"><name pos:start="1397:51" pos:end="1397:64"><name pos:start="1397:51" pos:end="1397:59">auth_cred</name><operator pos:start="1397:60" pos:end="1397:61">-&gt;</operator><name pos:start="1397:62" pos:end="1397:64">uri</name></name></expr></argument>, <argument pos:start="1397:67" pos:end="1397:81"><expr pos:start="1397:67" pos:end="1397:81"><name pos:start="1397:67" pos:end="1397:81">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1398:9" pos:end="1398:29"><expr pos:start="1398:9" pos:end="1398:28"><call pos:start="1398:9" pos:end="1398:28"><name pos:start="1398:9" pos:end="1398:12">free</name><argument_list pos:start="1398:13" pos:end="1398:28">(<argument pos:start="1398:14" pos:end="1398:27"><expr pos:start="1398:14" pos:end="1398:27"><name pos:start="1398:14" pos:end="1398:27"><name pos:start="1398:14" pos:end="1398:22">auth_cred</name><operator pos:start="1398:23" pos:end="1398:24">-&gt;</operator><name pos:start="1398:25" pos:end="1398:27">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1399:9" pos:end="1399:30"><expr pos:start="1399:9" pos:end="1399:29"><name pos:start="1399:9" pos:end="1399:22"><name pos:start="1399:9" pos:end="1399:17">auth_cred</name><operator pos:start="1399:18" pos:end="1399:19">-&gt;</operator><name pos:start="1399:20" pos:end="1399:22">uri</name></name> <operator pos:start="1399:24" pos:end="1399:24">=</operator> <name pos:start="1399:26" pos:end="1399:29">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1402:5" pos:end="1406:5"><if pos:start="1402:5" pos:end="1406:5">if <condition pos:start="1402:8" pos:end="1402:26">(<expr pos:start="1402:9" pos:end="1402:25"><name pos:start="1402:9" pos:end="1402:25"><name pos:start="1402:9" pos:end="1402:17">auth_cred</name><operator pos:start="1402:18" pos:end="1402:19">-&gt;</operator><name pos:start="1402:20" pos:end="1402:25">cnonce</name></name></expr>)</condition> <block pos:start="1402:28" pos:end="1406:5">{<block_content pos:start="1403:9" pos:end="1405:33">
        <expr_stmt pos:start="1403:9" pos:end="1403:84"><expr pos:start="1403:9" pos:end="1403:83"><call pos:start="1403:9" pos:end="1403:83"><name pos:start="1403:9" pos:end="1403:23">OPENSSL_cleanse</name><argument_list pos:start="1403:24" pos:end="1403:83">(<argument pos:start="1403:25" pos:end="1403:41"><expr pos:start="1403:25" pos:end="1403:41"><name pos:start="1403:25" pos:end="1403:41"><name pos:start="1403:25" pos:end="1403:33">auth_cred</name><operator pos:start="1403:34" pos:end="1403:35">-&gt;</operator><name pos:start="1403:36" pos:end="1403:41">cnonce</name></name></expr></argument>, <argument pos:start="1403:44" pos:end="1403:82"><expr pos:start="1403:44" pos:end="1403:82"><call pos:start="1403:44" pos:end="1403:82"><name pos:start="1403:44" pos:end="1403:52">strnlen_s</name><argument_list pos:start="1403:53" pos:end="1403:82">(<argument pos:start="1403:54" pos:end="1403:70"><expr pos:start="1403:54" pos:end="1403:70"><name pos:start="1403:54" pos:end="1403:70"><name pos:start="1403:54" pos:end="1403:62">auth_cred</name><operator pos:start="1403:63" pos:end="1403:64">-&gt;</operator><name pos:start="1403:65" pos:end="1403:70">cnonce</name></name></expr></argument>, <argument pos:start="1403:73" pos:end="1403:81"><expr pos:start="1403:73" pos:end="1403:81"><name pos:start="1403:73" pos:end="1403:81">MAX_NONCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1404:9" pos:end="1404:32"><expr pos:start="1404:9" pos:end="1404:31"><call pos:start="1404:9" pos:end="1404:31"><name pos:start="1404:9" pos:end="1404:12">free</name><argument_list pos:start="1404:13" pos:end="1404:31">(<argument pos:start="1404:14" pos:end="1404:30"><expr pos:start="1404:14" pos:end="1404:30"><name pos:start="1404:14" pos:end="1404:30"><name pos:start="1404:14" pos:end="1404:22">auth_cred</name><operator pos:start="1404:23" pos:end="1404:24">-&gt;</operator><name pos:start="1404:25" pos:end="1404:30">cnonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1405:9" pos:end="1405:33"><expr pos:start="1405:9" pos:end="1405:32"><name pos:start="1405:9" pos:end="1405:25"><name pos:start="1405:9" pos:end="1405:17">auth_cred</name><operator pos:start="1405:18" pos:end="1405:19">-&gt;</operator><name pos:start="1405:20" pos:end="1405:25">cnonce</name></name> <operator pos:start="1405:27" pos:end="1405:27">=</operator> <name pos:start="1405:29" pos:end="1405:32">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1408:5" pos:end="1412:5"><if pos:start="1408:5" pos:end="1412:5">if <condition pos:start="1408:8" pos:end="1408:23">(<expr pos:start="1408:9" pos:end="1408:22"><name pos:start="1408:9" pos:end="1408:22"><name pos:start="1408:9" pos:end="1408:17">auth_cred</name><operator pos:start="1408:18" pos:end="1408:19">-&gt;</operator><name pos:start="1408:20" pos:end="1408:22">qop</name></name></expr>)</condition> <block pos:start="1408:25" pos:end="1412:5">{<block_content pos:start="1409:9" pos:end="1411:30">
        <expr_stmt pos:start="1409:9" pos:end="1409:76"><expr pos:start="1409:9" pos:end="1409:75"><call pos:start="1409:9" pos:end="1409:75"><name pos:start="1409:9" pos:end="1409:23">OPENSSL_cleanse</name><argument_list pos:start="1409:24" pos:end="1409:75">(<argument pos:start="1409:25" pos:end="1409:38"><expr pos:start="1409:25" pos:end="1409:38"><name pos:start="1409:25" pos:end="1409:38"><name pos:start="1409:25" pos:end="1409:33">auth_cred</name><operator pos:start="1409:34" pos:end="1409:35">-&gt;</operator><name pos:start="1409:36" pos:end="1409:38">qop</name></name></expr></argument>, <argument pos:start="1409:41" pos:end="1409:74"><expr pos:start="1409:41" pos:end="1409:74"><call pos:start="1409:41" pos:end="1409:74"><name pos:start="1409:41" pos:end="1409:49">strnlen_s</name><argument_list pos:start="1409:50" pos:end="1409:74">(<argument pos:start="1409:51" pos:end="1409:64"><expr pos:start="1409:51" pos:end="1409:64"><name pos:start="1409:51" pos:end="1409:64"><name pos:start="1409:51" pos:end="1409:59">auth_cred</name><operator pos:start="1409:60" pos:end="1409:61">-&gt;</operator><name pos:start="1409:62" pos:end="1409:64">qop</name></name></expr></argument>, <argument pos:start="1409:67" pos:end="1409:73"><expr pos:start="1409:67" pos:end="1409:73"><name pos:start="1409:67" pos:end="1409:73">MAX_QOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1410:9" pos:end="1410:29"><expr pos:start="1410:9" pos:end="1410:28"><call pos:start="1410:9" pos:end="1410:28"><name pos:start="1410:9" pos:end="1410:12">free</name><argument_list pos:start="1410:13" pos:end="1410:28">(<argument pos:start="1410:14" pos:end="1410:27"><expr pos:start="1410:14" pos:end="1410:27"><name pos:start="1410:14" pos:end="1410:27"><name pos:start="1410:14" pos:end="1410:22">auth_cred</name><operator pos:start="1410:23" pos:end="1410:24">-&gt;</operator><name pos:start="1410:25" pos:end="1410:27">qop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1411:9" pos:end="1411:30"><expr pos:start="1411:9" pos:end="1411:29"><name pos:start="1411:9" pos:end="1411:22"><name pos:start="1411:9" pos:end="1411:17">auth_cred</name><operator pos:start="1411:18" pos:end="1411:19">-&gt;</operator><name pos:start="1411:20" pos:end="1411:22">qop</name></name> <operator pos:start="1411:24" pos:end="1411:24">=</operator> <name pos:start="1411:26" pos:end="1411:29">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1414:5" pos:end="1418:5"><if pos:start="1414:5" pos:end="1418:5">if <condition pos:start="1414:8" pos:end="1414:22">(<expr pos:start="1414:9" pos:end="1414:21"><name pos:start="1414:9" pos:end="1414:21"><name pos:start="1414:9" pos:end="1414:17">auth_cred</name><operator pos:start="1414:18" pos:end="1414:19">-&gt;</operator><name pos:start="1414:20" pos:end="1414:21">nc</name></name></expr>)</condition> <block pos:start="1414:24" pos:end="1418:5">{<block_content pos:start="1415:9" pos:end="1417:29">
        <expr_stmt pos:start="1415:9" pos:end="1415:73"><expr pos:start="1415:9" pos:end="1415:72"><call pos:start="1415:9" pos:end="1415:72"><name pos:start="1415:9" pos:end="1415:23">OPENSSL_cleanse</name><argument_list pos:start="1415:24" pos:end="1415:72">(<argument pos:start="1415:25" pos:end="1415:37"><expr pos:start="1415:25" pos:end="1415:37"><name pos:start="1415:25" pos:end="1415:37"><name pos:start="1415:25" pos:end="1415:33">auth_cred</name><operator pos:start="1415:34" pos:end="1415:35">-&gt;</operator><name pos:start="1415:36" pos:end="1415:37">nc</name></name></expr></argument>, <argument pos:start="1415:40" pos:end="1415:71"><expr pos:start="1415:40" pos:end="1415:71"><call pos:start="1415:40" pos:end="1415:71"><name pos:start="1415:40" pos:end="1415:48">strnlen_s</name><argument_list pos:start="1415:49" pos:end="1415:71">(<argument pos:start="1415:50" pos:end="1415:62"><expr pos:start="1415:50" pos:end="1415:62"><name pos:start="1415:50" pos:end="1415:62"><name pos:start="1415:50" pos:end="1415:58">auth_cred</name><operator pos:start="1415:59" pos:end="1415:60">-&gt;</operator><name pos:start="1415:61" pos:end="1415:62">nc</name></name></expr></argument>, <argument pos:start="1415:65" pos:end="1415:70"><expr pos:start="1415:65" pos:end="1415:70"><name pos:start="1415:65" pos:end="1415:70">MAX_NC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1416:9" pos:end="1416:28"><expr pos:start="1416:9" pos:end="1416:27"><call pos:start="1416:9" pos:end="1416:27"><name pos:start="1416:9" pos:end="1416:12">free</name><argument_list pos:start="1416:13" pos:end="1416:27">(<argument pos:start="1416:14" pos:end="1416:26"><expr pos:start="1416:14" pos:end="1416:26"><name pos:start="1416:14" pos:end="1416:26"><name pos:start="1416:14" pos:end="1416:22">auth_cred</name><operator pos:start="1416:23" pos:end="1416:24">-&gt;</operator><name pos:start="1416:25" pos:end="1416:26">nc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1417:9" pos:end="1417:29"><expr pos:start="1417:9" pos:end="1417:28"><name pos:start="1417:9" pos:end="1417:21"><name pos:start="1417:9" pos:end="1417:17">auth_cred</name><operator pos:start="1417:18" pos:end="1417:19">-&gt;</operator><name pos:start="1417:20" pos:end="1417:21">nc</name></name> <operator pos:start="1417:23" pos:end="1417:23">=</operator> <name pos:start="1417:25" pos:end="1417:28">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1420:5" pos:end="1425:5"><if pos:start="1420:5" pos:end="1425:5">if <condition pos:start="1420:8" pos:end="1420:25">(<expr pos:start="1420:9" pos:end="1420:24"><name pos:start="1420:9" pos:end="1420:24"><name pos:start="1420:9" pos:end="1420:17">auth_cred</name><operator pos:start="1420:18" pos:end="1420:19">-&gt;</operator><name pos:start="1420:20" pos:end="1420:24">nonce</name></name></expr>)</condition> <block pos:start="1420:27" pos:end="1425:5">{<block_content pos:start="1421:9" pos:end="1424:32">
        <expr_stmt pos:start="1421:9" pos:end="1422:64"><expr pos:start="1421:9" pos:end="1422:63"><call pos:start="1421:9" pos:end="1422:63"><name pos:start="1421:9" pos:end="1421:23">OPENSSL_cleanse</name><argument_list pos:start="1421:24" pos:end="1422:63">(<argument pos:start="1421:25" pos:end="1421:40"><expr pos:start="1421:25" pos:end="1421:40"><name pos:start="1421:25" pos:end="1421:40"><name pos:start="1421:25" pos:end="1421:33">auth_cred</name><operator pos:start="1421:34" pos:end="1421:35">-&gt;</operator><name pos:start="1421:36" pos:end="1421:40">nonce</name></name></expr></argument>, <argument pos:start="1421:43" pos:end="1422:62"><expr pos:start="1421:43" pos:end="1422:62"><call pos:start="1421:43" pos:end="1422:62"><name pos:start="1421:43" pos:end="1421:51">strnlen_s</name><argument_list pos:start="1421:52" pos:end="1422:62">(<argument pos:start="1421:53" pos:end="1421:68"><expr pos:start="1421:53" pos:end="1421:68"><name pos:start="1421:53" pos:end="1421:68"><name pos:start="1421:53" pos:end="1421:61">auth_cred</name><operator pos:start="1421:62" pos:end="1421:63">-&gt;</operator><name pos:start="1421:64" pos:end="1421:68">nonce</name></name></expr></argument>,
                                                    <argument pos:start="1422:53" pos:end="1422:61"><expr pos:start="1422:53" pos:end="1422:61"><name pos:start="1422:53" pos:end="1422:61">MAX_NONCE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1423:9" pos:end="1423:31"><expr pos:start="1423:9" pos:end="1423:30"><call pos:start="1423:9" pos:end="1423:30"><name pos:start="1423:9" pos:end="1423:12">free</name><argument_list pos:start="1423:13" pos:end="1423:30">(<argument pos:start="1423:14" pos:end="1423:29"><expr pos:start="1423:14" pos:end="1423:29"><name pos:start="1423:14" pos:end="1423:29"><name pos:start="1423:14" pos:end="1423:22">auth_cred</name><operator pos:start="1423:23" pos:end="1423:24">-&gt;</operator><name pos:start="1423:25" pos:end="1423:29">nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1424:9" pos:end="1424:32"><expr pos:start="1424:9" pos:end="1424:31"><name pos:start="1424:9" pos:end="1424:24"><name pos:start="1424:9" pos:end="1424:17">auth_cred</name><operator pos:start="1424:18" pos:end="1424:19">-&gt;</operator><name pos:start="1424:20" pos:end="1424:24">nonce</name></name> <operator pos:start="1424:26" pos:end="1424:26">=</operator> <name pos:start="1424:28" pos:end="1424:31">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1427:5" pos:end="1432:5"><if pos:start="1427:5" pos:end="1432:5">if <condition pos:start="1427:8" pos:end="1427:28">(<expr pos:start="1427:9" pos:end="1427:27"><name pos:start="1427:9" pos:end="1427:27"><name pos:start="1427:9" pos:end="1427:17">auth_cred</name><operator pos:start="1427:18" pos:end="1427:19">-&gt;</operator><name pos:start="1427:20" pos:end="1427:27">response</name></name></expr>)</condition> <block pos:start="1427:30" pos:end="1432:5">{<block_content pos:start="1428:9" pos:end="1431:35">
        <expr_stmt pos:start="1428:9" pos:end="1429:70"><expr pos:start="1428:9" pos:end="1429:69"><call pos:start="1428:9" pos:end="1429:69"><name pos:start="1428:9" pos:end="1428:23">OPENSSL_cleanse</name><argument_list pos:start="1428:24" pos:end="1429:69">(<argument pos:start="1428:25" pos:end="1428:43"><expr pos:start="1428:25" pos:end="1428:43"><name pos:start="1428:25" pos:end="1428:43"><name pos:start="1428:25" pos:end="1428:33">auth_cred</name><operator pos:start="1428:34" pos:end="1428:35">-&gt;</operator><name pos:start="1428:36" pos:end="1428:43">response</name></name></expr></argument>, <argument pos:start="1428:46" pos:end="1429:68"><expr pos:start="1428:46" pos:end="1429:68"><call pos:start="1428:46" pos:end="1429:68"><name pos:start="1428:46" pos:end="1428:54">strnlen_s</name><argument_list pos:start="1428:55" pos:end="1429:68">(<argument pos:start="1428:56" pos:end="1428:74"><expr pos:start="1428:56" pos:end="1428:74"><name pos:start="1428:56" pos:end="1428:74"><name pos:start="1428:56" pos:end="1428:64">auth_cred</name><operator pos:start="1428:65" pos:end="1428:66">-&gt;</operator><name pos:start="1428:67" pos:end="1428:74">response</name></name></expr></argument>,
                                                       <argument pos:start="1429:56" pos:end="1429:67"><expr pos:start="1429:56" pos:end="1429:67"><name pos:start="1429:56" pos:end="1429:67">MAX_RESPONSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1430:9" pos:end="1430:34"><expr pos:start="1430:9" pos:end="1430:33"><call pos:start="1430:9" pos:end="1430:33"><name pos:start="1430:9" pos:end="1430:12">free</name><argument_list pos:start="1430:13" pos:end="1430:33">(<argument pos:start="1430:14" pos:end="1430:32"><expr pos:start="1430:14" pos:end="1430:32"><name pos:start="1430:14" pos:end="1430:32"><name pos:start="1430:14" pos:end="1430:22">auth_cred</name><operator pos:start="1430:23" pos:end="1430:24">-&gt;</operator><name pos:start="1430:25" pos:end="1430:32">response</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1431:9" pos:end="1431:35"><expr pos:start="1431:9" pos:end="1431:34"><name pos:start="1431:9" pos:end="1431:27"><name pos:start="1431:9" pos:end="1431:17">auth_cred</name><operator pos:start="1431:18" pos:end="1431:19">-&gt;</operator><name pos:start="1431:20" pos:end="1431:27">response</name></name> <operator pos:start="1431:29" pos:end="1431:29">=</operator> <name pos:start="1431:31" pos:end="1431:34">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1434:5" pos:end="1439:5"><if pos:start="1434:5" pos:end="1439:5">if <condition pos:start="1434:8" pos:end="1434:30">(<expr pos:start="1434:9" pos:end="1434:29"><name pos:start="1434:9" pos:end="1434:29"><name pos:start="1434:9" pos:end="1434:17">auth_cred</name><operator pos:start="1434:18" pos:end="1434:19">-&gt;</operator><name pos:start="1434:20" pos:end="1434:29">auth_token</name></name></expr>)</condition> <block pos:start="1434:32" pos:end="1439:5">{<block_content pos:start="1435:9" pos:end="1438:37">
        <expr_stmt pos:start="1435:9" pos:end="1436:78"><expr pos:start="1435:9" pos:end="1436:77"><call pos:start="1435:9" pos:end="1436:77"><name pos:start="1435:9" pos:end="1435:23">OPENSSL_cleanse</name><argument_list pos:start="1435:24" pos:end="1436:77">(<argument pos:start="1435:25" pos:end="1435:45"><expr pos:start="1435:25" pos:end="1435:45"><name pos:start="1435:25" pos:end="1435:45"><name pos:start="1435:25" pos:end="1435:33">auth_cred</name><operator pos:start="1435:34" pos:end="1435:35">-&gt;</operator><name pos:start="1435:36" pos:end="1435:45">auth_token</name></name></expr></argument>, <argument pos:start="1435:48" pos:end="1436:76"><expr pos:start="1435:48" pos:end="1436:76"><call pos:start="1435:48" pos:end="1436:76"><name pos:start="1435:48" pos:end="1435:56">strnlen_s</name><argument_list pos:start="1435:57" pos:end="1436:76">(<argument pos:start="1435:58" pos:end="1435:78"><expr pos:start="1435:58" pos:end="1435:78"><name pos:start="1435:58" pos:end="1435:78"><name pos:start="1435:58" pos:end="1435:66">auth_cred</name><operator pos:start="1435:67" pos:end="1435:68">-&gt;</operator><name pos:start="1435:69" pos:end="1435:78">auth_token</name></name></expr></argument>,
                                                         <argument pos:start="1436:58" pos:end="1436:75"><expr pos:start="1436:58" pos:end="1436:75"><name pos:start="1436:58" pos:end="1436:75">MAX_AUTH_TOKEN_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1437:9" pos:end="1437:36"><expr pos:start="1437:9" pos:end="1437:35"><call pos:start="1437:9" pos:end="1437:35"><name pos:start="1437:9" pos:end="1437:12">free</name><argument_list pos:start="1437:13" pos:end="1437:35">(<argument pos:start="1437:14" pos:end="1437:34"><expr pos:start="1437:14" pos:end="1437:34"><name pos:start="1437:14" pos:end="1437:34"><name pos:start="1437:14" pos:end="1437:22">auth_cred</name><operator pos:start="1437:23" pos:end="1437:24">-&gt;</operator><name pos:start="1437:25" pos:end="1437:34">auth_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1438:9" pos:end="1438:37"><expr pos:start="1438:9" pos:end="1438:36"><name pos:start="1438:9" pos:end="1438:29"><name pos:start="1438:9" pos:end="1438:17">auth_cred</name><operator pos:start="1438:18" pos:end="1438:19">-&gt;</operator><name pos:start="1438:20" pos:end="1438:29">auth_token</name></name> <operator pos:start="1438:31" pos:end="1438:31">=</operator> <name pos:start="1438:33" pos:end="1438:36">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>        
    
    <return pos:start="1441:5" pos:end="1441:11">return;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1443:1" pos:end="1445:3">/*
 * Given an input string, look for the four valid operations
 */</comment>
<function pos:start="1446:1" pos:end="1463:1"><type pos:start="1446:1" pos:end="1446:13"><name pos:start="1446:1" pos:end="1446:13">EST_OPERATION</name></type> <name pos:start="1446:15" pos:end="1446:33">est_parse_operation</name> <parameter_list pos:start="1446:35" pos:end="1446:49">(<parameter pos:start="1446:36" pos:end="1446:48"><decl pos:start="1446:36" pos:end="1446:48"><type pos:start="1446:36" pos:end="1446:41"><name pos:start="1446:36" pos:end="1446:39">char</name> <modifier pos:start="1446:41" pos:end="1446:41">*</modifier></type><name pos:start="1446:42" pos:end="1446:48">op_path</name></decl></parameter>)</parameter_list> 
<block pos:start="1447:1" pos:end="1463:1">{<block_content pos:start="1448:5" pos:end="1462:23">
    <decl_stmt pos:start="1448:5" pos:end="1448:28"><decl pos:start="1448:5" pos:end="1448:27"><type pos:start="1448:5" pos:end="1448:17"><name pos:start="1448:5" pos:end="1448:17">EST_OPERATION</name></type> <name pos:start="1448:19" pos:end="1448:27">operation</name></decl>;</decl_stmt>

    <if_stmt pos:start="1450:5" pos:end="1460:5"><if pos:start="1450:5" pos:end="1452:5">if <condition pos:start="1450:8" pos:end="1450:52">(<expr pos:start="1450:9" pos:end="1450:51"><operator pos:start="1450:9" pos:end="1450:9">!</operator><call pos:start="1450:10" pos:end="1450:51"><name pos:start="1450:10" pos:end="1450:25">est_strcasecmp_s</name><argument_list pos:start="1450:26" pos:end="1450:51">(<argument pos:start="1450:27" pos:end="1450:33"><expr pos:start="1450:27" pos:end="1450:33"><name pos:start="1450:27" pos:end="1450:33">op_path</name></expr></argument>, <argument pos:start="1450:36" pos:end="1450:50"><expr pos:start="1450:36" pos:end="1450:50"><name pos:start="1450:36" pos:end="1450:50">EST_GET_CACERTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1450:54" pos:end="1452:5">{<block_content pos:start="1451:9" pos:end="1451:35">
        <expr_stmt pos:start="1451:9" pos:end="1451:35"><expr pos:start="1451:9" pos:end="1451:34"><name pos:start="1451:9" pos:end="1451:17">operation</name> <operator pos:start="1451:19" pos:end="1451:19">=</operator> <name pos:start="1451:21" pos:end="1451:34">EST_OP_CACERTS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1452:7" pos:end="1454:5">else if <condition pos:start="1452:15" pos:end="1452:60">(<expr pos:start="1452:16" pos:end="1452:59"><operator pos:start="1452:16" pos:end="1452:16">!</operator><call pos:start="1452:17" pos:end="1452:59"><name pos:start="1452:17" pos:end="1452:32">est_strcasecmp_s</name><argument_list pos:start="1452:33" pos:end="1452:59">(<argument pos:start="1452:34" pos:end="1452:40"><expr pos:start="1452:34" pos:end="1452:40"><name pos:start="1452:34" pos:end="1452:40">op_path</name></expr></argument>, <argument pos:start="1452:43" pos:end="1452:58"><expr pos:start="1452:43" pos:end="1452:58"><name pos:start="1452:43" pos:end="1452:58">EST_GET_CSRATTRS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1452:62" pos:end="1454:5">{<block_content pos:start="1453:9" pos:end="1453:36">
        <expr_stmt pos:start="1453:9" pos:end="1453:36"><expr pos:start="1453:9" pos:end="1453:35"><name pos:start="1453:9" pos:end="1453:17">operation</name> <operator pos:start="1453:19" pos:end="1453:19">=</operator> <name pos:start="1453:21" pos:end="1453:35">EST_OP_CSRATTRS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1454:7" pos:end="1456:5">else if <condition pos:start="1454:15" pos:end="1454:61">(<expr pos:start="1454:16" pos:end="1454:60"><operator pos:start="1454:16" pos:end="1454:16">!</operator><call pos:start="1454:17" pos:end="1454:60"><name pos:start="1454:17" pos:end="1454:32">est_strcasecmp_s</name><argument_list pos:start="1454:33" pos:end="1454:60">(<argument pos:start="1454:34" pos:end="1454:40"><expr pos:start="1454:34" pos:end="1454:40"><name pos:start="1454:34" pos:end="1454:40">op_path</name></expr></argument>, <argument pos:start="1454:43" pos:end="1454:59"><expr pos:start="1454:43" pos:end="1454:59"><name pos:start="1454:43" pos:end="1454:59">EST_SIMPLE_ENROLL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1454:63" pos:end="1456:5">{<block_content pos:start="1455:9" pos:end="1455:41">
        <expr_stmt pos:start="1455:9" pos:end="1455:41"><expr pos:start="1455:9" pos:end="1455:40"><name pos:start="1455:9" pos:end="1455:17">operation</name> <operator pos:start="1455:19" pos:end="1455:19">=</operator> <name pos:start="1455:21" pos:end="1455:40">EST_OP_SIMPLE_ENROLL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1456:7" pos:end="1458:5">else if <condition pos:start="1456:15" pos:end="1456:63">(<expr pos:start="1456:16" pos:end="1456:62"><operator pos:start="1456:16" pos:end="1456:16">!</operator><call pos:start="1456:17" pos:end="1456:62"><name pos:start="1456:17" pos:end="1456:32">est_strcasecmp_s</name><argument_list pos:start="1456:33" pos:end="1456:62">(<argument pos:start="1456:34" pos:end="1456:40"><expr pos:start="1456:34" pos:end="1456:40"><name pos:start="1456:34" pos:end="1456:40">op_path</name></expr></argument>, <argument pos:start="1456:43" pos:end="1456:61"><expr pos:start="1456:43" pos:end="1456:61"><name pos:start="1456:43" pos:end="1456:61">EST_SIMPLE_REENROLL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1456:65" pos:end="1458:5">{<block_content pos:start="1457:9" pos:end="1457:43">
        <expr_stmt pos:start="1457:9" pos:end="1457:43"><expr pos:start="1457:9" pos:end="1457:42"><name pos:start="1457:9" pos:end="1457:17">operation</name> <operator pos:start="1457:19" pos:end="1457:19">=</operator> <name pos:start="1457:21" pos:end="1457:42">EST_OP_SIMPLE_REENROLL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1458:7" pos:end="1460:5">else <block pos:start="1458:12" pos:end="1460:5">{<block_content pos:start="1459:9" pos:end="1459:31">
        <expr_stmt pos:start="1459:9" pos:end="1459:31"><expr pos:start="1459:9" pos:end="1459:30"><name pos:start="1459:9" pos:end="1459:17">operation</name> <operator pos:start="1459:19" pos:end="1459:19">=</operator> <name pos:start="1459:21" pos:end="1459:30">EST_OP_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <return pos:start="1462:5" pos:end="1462:23">return <expr pos:start="1462:12" pos:end="1462:22"><operator pos:start="1462:12" pos:end="1462:12">(</operator><name pos:start="1462:13" pos:end="1462:21">operation</name><operator pos:start="1462:22" pos:end="1462:22">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1464:1" pos:end="1466:3">/*
 * Given an input string, look for the four valid operations
 */</comment>
<function pos:start="1467:1" pos:end="1631:1"><type pos:start="1467:1" pos:end="1467:9"><name pos:start="1467:1" pos:end="1467:9">EST_ERROR</name></type> <name pos:start="1467:11" pos:end="1467:23">est_parse_uri</name> <parameter_list pos:start="1467:25" pos:end="1468:41">(<parameter pos:start="1467:26" pos:end="1467:34"><decl pos:start="1467:26" pos:end="1467:34"><type pos:start="1467:26" pos:end="1467:34"><name pos:start="1467:26" pos:end="1467:29">char</name> <modifier pos:start="1467:31" pos:end="1467:31">*</modifier></type><name pos:start="1467:32" pos:end="1467:34">uri</name></decl></parameter>, <parameter pos:start="1467:37" pos:end="1467:60"><decl pos:start="1467:37" pos:end="1467:60"><type pos:start="1467:37" pos:end="1467:60"><name pos:start="1467:37" pos:end="1467:49">EST_OPERATION</name> <modifier pos:start="1467:51" pos:end="1467:51">*</modifier></type><name pos:start="1467:52" pos:end="1467:60">operation</name></decl></parameter>,
                         <parameter pos:start="1468:26" pos:end="1468:40"><decl pos:start="1468:26" pos:end="1468:40"><type pos:start="1468:26" pos:end="1468:40"><name pos:start="1468:26" pos:end="1468:29">char</name> <modifier pos:start="1468:31" pos:end="1468:31">*</modifier><modifier pos:start="1468:32" pos:end="1468:32">*</modifier></type><name pos:start="1468:33" pos:end="1468:40">path_seg</name></decl></parameter>)</parameter_list> 
<block pos:start="1469:1" pos:end="1631:1">{<block_content pos:start="1472:5" pos:end="1630:16">
    <comment type="block" pos:start="1470:5" pos:end="1470:29">/* char *path_seg_end; */</comment>
    <comment type="block" pos:start="1471:5" pos:end="1471:33">/* int   path_seg_len = 0; */</comment>
    <decl_stmt pos:start="1472:5" pos:end="1472:26"><decl pos:start="1472:5" pos:end="1472:25"><type pos:start="1472:5" pos:end="1472:19"><name pos:start="1472:5" pos:end="1472:19">UriParserStateA</name></type> <name pos:start="1472:21" pos:end="1472:25">state</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1473:5" pos:end="1473:23"><decl pos:start="1473:5" pos:end="1473:22"><type pos:start="1473:5" pos:end="1473:11"><name pos:start="1473:5" pos:end="1473:11">UriUriA</name></type> <name pos:start="1473:13" pos:end="1473:22">parsed_uri</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1474:5" pos:end="1474:32"><decl pos:start="1474:5" pos:end="1474:31"><type pos:start="1474:5" pos:end="1474:13"><name pos:start="1474:5" pos:end="1474:13">EST_ERROR</name></type> <name pos:start="1474:15" pos:end="1474:16">rv</name> <init pos:start="1474:18" pos:end="1474:31">= <expr pos:start="1474:20" pos:end="1474:31"><name pos:start="1474:20" pos:end="1474:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="1475:5" pos:end="1475:20"><decl pos:start="1475:5" pos:end="1475:19"><type pos:start="1475:5" pos:end="1475:7"><name pos:start="1475:5" pos:end="1475:7">int</name></type> <name pos:start="1475:9" pos:end="1475:19">uriparse_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1476:5" pos:end="1476:21"><decl pos:start="1476:5" pos:end="1476:20"><type pos:start="1476:5" pos:end="1476:11"><name pos:start="1476:5" pos:end="1476:11">errno_t</name></type> <name pos:start="1476:13" pos:end="1476:20">safec_rc</name></decl>;</decl_stmt>    
    <decl_stmt pos:start="1477:5" pos:end="1477:13"><decl pos:start="1477:5" pos:end="1477:12"><type pos:start="1477:5" pos:end="1477:7"><name pos:start="1477:5" pos:end="1477:7">int</name></type> <name pos:start="1477:9" pos:end="1477:12">diff</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1479:5" pos:end="1479:21"><expr pos:start="1479:5" pos:end="1479:20"><operator pos:start="1479:5" pos:end="1479:5">*</operator><name pos:start="1479:6" pos:end="1479:13">path_seg</name> <operator pos:start="1479:15" pos:end="1479:15">=</operator> <name pos:start="1479:17" pos:end="1479:20">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1480:5" pos:end="1480:28"><expr pos:start="1480:5" pos:end="1480:27"><name pos:start="1480:5" pos:end="1480:13"><name pos:start="1480:5" pos:end="1480:9">state</name><operator pos:start="1480:10" pos:end="1480:10">.</operator><name pos:start="1480:11" pos:end="1480:13">uri</name></name> <operator pos:start="1480:15" pos:end="1480:15">=</operator> <operator pos:start="1480:17" pos:end="1480:17">&amp;</operator><name pos:start="1480:18" pos:end="1480:27">parsed_uri</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1481:5" pos:end="1481:44"><expr pos:start="1481:5" pos:end="1481:43"><name pos:start="1481:5" pos:end="1481:15">uriparse_rc</name> <operator pos:start="1481:17" pos:end="1481:17">=</operator> <call pos:start="1481:19" pos:end="1481:43"><name pos:start="1481:19" pos:end="1481:30">uriParseUriA</name><argument_list pos:start="1481:31" pos:end="1481:43">(<argument pos:start="1481:32" pos:end="1481:37"><expr pos:start="1481:32" pos:end="1481:37"><operator pos:start="1481:32" pos:end="1481:32">&amp;</operator><name pos:start="1481:33" pos:end="1481:37">state</name></expr></argument>, <argument pos:start="1481:40" pos:end="1481:42"><expr pos:start="1481:40" pos:end="1481:42"><name pos:start="1481:40" pos:end="1481:42">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1482:5" pos:end="1485:5"><if pos:start="1482:5" pos:end="1485:5">if <condition pos:start="1482:8" pos:end="1482:35">(<expr pos:start="1482:9" pos:end="1482:34"><name pos:start="1482:9" pos:end="1482:19">uriparse_rc</name> <operator pos:start="1482:21" pos:end="1482:22">!=</operator> <name pos:start="1482:24" pos:end="1482:34">URI_SUCCESS</name></expr>)</condition> <block pos:start="1482:37" pos:end="1485:5">{<block_content pos:start="1483:9" pos:end="1484:51">
        <expr_stmt pos:start="1483:9" pos:end="1483:38"><expr pos:start="1483:9" pos:end="1483:37"><call pos:start="1483:9" pos:end="1483:37"><name pos:start="1483:9" pos:end="1483:26">uriFreeUriMembersA</name><argument_list pos:start="1483:27" pos:end="1483:37">(<argument pos:start="1483:28" pos:end="1483:36"><expr pos:start="1483:28" pos:end="1483:36"><name pos:start="1483:28" pos:end="1483:36"><name pos:start="1483:28" pos:end="1483:32">state</name><operator pos:start="1483:33" pos:end="1483:33">.</operator><name pos:start="1483:34" pos:end="1483:36">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1484:9" pos:end="1484:51">return <expr pos:start="1484:16" pos:end="1484:50"><operator pos:start="1484:16" pos:end="1484:16">(</operator><name pos:start="1484:17" pos:end="1484:49">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name><operator pos:start="1484:50" pos:end="1484:50">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1487:5" pos:end="1629:5"><if pos:start="1487:5" pos:end="1629:5">if <condition pos:start="1487:8" pos:end="1487:28">(<expr pos:start="1487:9" pos:end="1487:27"><name pos:start="1487:9" pos:end="1487:27"><name pos:start="1487:9" pos:end="1487:18">parsed_uri</name><operator pos:start="1487:19" pos:end="1487:19">.</operator><name pos:start="1487:20" pos:end="1487:27">pathHead</name></name></expr>)</condition> <block pos:start="1487:30" pos:end="1629:5">{<block_content pos:start="1495:9" pos:end="1628:38">
        
        <comment type="block" pos:start="1489:9" pos:end="1494:11">/*
         * validate the URI
         * - parse the path-prefix (/.well-known/est)
         * - look to see if there is a path segment extension
         * - determine which operation it is
         */</comment>        
        <decl_stmt pos:start="1495:9" pos:end="1495:55"><decl pos:start="1495:9" pos:end="1495:54"><type pos:start="1495:9" pos:end="1495:25"><name pos:start="1495:9" pos:end="1495:23">UriPathSegmentA</name> <modifier pos:start="1495:25" pos:end="1495:25">*</modifier></type><name pos:start="1495:26" pos:end="1495:32">cur_seg</name> <init pos:start="1495:34" pos:end="1495:54">= <expr pos:start="1495:36" pos:end="1495:54"><name pos:start="1495:36" pos:end="1495:54"><name pos:start="1495:36" pos:end="1495:45">parsed_uri</name><operator pos:start="1495:46" pos:end="1495:46">.</operator><name pos:start="1495:47" pos:end="1495:54">pathHead</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1496:9" pos:end="1496:56"><decl pos:start="1496:9" pos:end="1496:55"><type pos:start="1496:9" pos:end="1496:14"><name pos:start="1496:9" pos:end="1496:12">char</name> <modifier pos:start="1496:14" pos:end="1496:14">*</modifier></type><name pos:start="1496:15" pos:end="1496:25">cur_seg_str</name> <init pos:start="1496:27" pos:end="1496:55">= <expr pos:start="1496:29" pos:end="1496:55"><operator pos:start="1496:29" pos:end="1496:29">(</operator><name pos:start="1496:30" pos:end="1496:33">char</name> <operator pos:start="1496:35" pos:end="1496:35">*</operator><operator pos:start="1496:36" pos:end="1496:36">)</operator><name pos:start="1496:37" pos:end="1496:55"><name pos:start="1496:37" pos:end="1496:43">cur_seg</name><operator pos:start="1496:44" pos:end="1496:45">-&gt;</operator><name pos:start="1496:46" pos:end="1496:49">text</name><operator pos:start="1496:50" pos:end="1496:50">.</operator><name pos:start="1496:51" pos:end="1496:55">first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1497:9" pos:end="1497:28"><decl pos:start="1497:9" pos:end="1497:27"><type pos:start="1497:9" pos:end="1497:11"><name pos:start="1497:9" pos:end="1497:11">int</name></type> <name pos:start="1497:13" pos:end="1497:23">cur_seg_len</name> <init pos:start="1497:25" pos:end="1497:27">= <expr pos:start="1497:27" pos:end="1497:27"><literal type="number" pos:start="1497:27" pos:end="1497:27">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="1498:9" pos:end="1498:29"><decl pos:start="1498:9" pos:end="1498:28"><type pos:start="1498:9" pos:end="1498:14"><name pos:start="1498:9" pos:end="1498:12">char</name> <modifier pos:start="1498:14" pos:end="1498:14">*</modifier></type><name pos:start="1498:15" pos:end="1498:21">segment</name> <init pos:start="1498:23" pos:end="1498:28">= <expr pos:start="1498:25" pos:end="1498:28"><name pos:start="1498:25" pos:end="1498:28">NULL</name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt pos:start="1500:9" pos:end="1501:74"><expr pos:start="1500:9" pos:end="1501:73"><name pos:start="1500:9" pos:end="1500:16">safec_rc</name> <operator pos:start="1500:18" pos:end="1500:18">=</operator> <call pos:start="1500:20" pos:end="1501:73"><name pos:start="1500:20" pos:end="1500:27">memcmp_s</name><argument_list pos:start="1500:28" pos:end="1501:73">(<argument pos:start="1500:29" pos:end="1500:39"><expr pos:start="1500:29" pos:end="1500:39"><name pos:start="1500:29" pos:end="1500:39">cur_seg_str</name></expr></argument>, <argument pos:start="1500:42" pos:end="1500:63"><expr pos:start="1500:42" pos:end="1500:63"><name pos:start="1500:42" pos:end="1500:63">WELL_KNOWN_SEGMENT_LEN</name></expr></argument>,
                            <argument pos:start="1501:29" pos:end="1501:41"><expr pos:start="1501:29" pos:end="1501:41"><literal type="string" pos:start="1501:29" pos:end="1501:41">".well-known"</literal></expr></argument>, <argument pos:start="1501:44" pos:end="1501:65"><expr pos:start="1501:44" pos:end="1501:65"><name pos:start="1501:44" pos:end="1501:65">WELL_KNOWN_SEGMENT_LEN</name></expr></argument>, <argument pos:start="1501:68" pos:end="1501:72"><expr pos:start="1501:68" pos:end="1501:72"><operator pos:start="1501:68" pos:end="1501:68">&amp;</operator><name pos:start="1501:69" pos:end="1501:72">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1502:9" pos:end="1507:9"><if pos:start="1502:9" pos:end="1507:9">if <condition pos:start="1502:12" pos:end="1502:36">(<expr pos:start="1502:13" pos:end="1502:35"><name pos:start="1502:13" pos:end="1502:16">diff</name> <operator pos:start="1502:18" pos:end="1502:19">||</operator> <name pos:start="1502:21" pos:end="1502:28">safec_rc</name> <operator pos:start="1502:30" pos:end="1502:31">!=</operator> <name pos:start="1502:33" pos:end="1502:35">EOK</name></expr>)</condition> <block pos:start="1502:38" pos:end="1507:9">{<block_content pos:start="1503:13" pos:end="1506:55">
            <expr_stmt pos:start="1503:13" pos:end="1504:54"><expr pos:start="1503:13" pos:end="1504:53"><call pos:start="1503:13" pos:end="1504:53"><name pos:start="1503:13" pos:end="1503:23">EST_LOG_ERR</name><argument_list pos:start="1503:24" pos:end="1504:53">(<argument pos:start="1503:25" pos:end="1503:77"><expr pos:start="1503:25" pos:end="1503:77"><literal type="string" pos:start="1503:25" pos:end="1503:77">"URI path does not start with %s, safec_rc = 0x%xO\n"</literal></expr></argument>,
                        <argument pos:start="1504:25" pos:end="1504:42"><expr pos:start="1504:25" pos:end="1504:42"><name pos:start="1504:25" pos:end="1504:42">WELL_KNOWN_SEGMENT</name></expr></argument>, <argument pos:start="1504:45" pos:end="1504:52"><expr pos:start="1504:45" pos:end="1504:52"><name pos:start="1504:45" pos:end="1504:52">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1505:13" pos:end="1505:42"><expr pos:start="1505:13" pos:end="1505:41"><call pos:start="1505:13" pos:end="1505:41"><name pos:start="1505:13" pos:end="1505:30">uriFreeUriMembersA</name><argument_list pos:start="1505:31" pos:end="1505:41">(<argument pos:start="1505:32" pos:end="1505:40"><expr pos:start="1505:32" pos:end="1505:40"><name pos:start="1505:32" pos:end="1505:40"><name pos:start="1505:32" pos:end="1505:36">state</name><operator pos:start="1505:37" pos:end="1505:37">.</operator><name pos:start="1505:38" pos:end="1505:40">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1506:13" pos:end="1506:55">return <expr pos:start="1506:20" pos:end="1506:54"><operator pos:start="1506:20" pos:end="1506:20">(</operator><name pos:start="1506:21" pos:end="1506:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name><operator pos:start="1506:54" pos:end="1506:54">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt pos:start="1509:9" pos:end="1509:32"><expr pos:start="1509:9" pos:end="1509:31"><name pos:start="1509:9" pos:end="1509:15">cur_seg</name> <operator pos:start="1509:17" pos:end="1509:17">=</operator> <name pos:start="1509:19" pos:end="1509:31"><name pos:start="1509:19" pos:end="1509:25">cur_seg</name><operator pos:start="1509:26" pos:end="1509:27">-&gt;</operator><name pos:start="1509:28" pos:end="1509:31">next</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1510:9" pos:end="1510:50"><expr pos:start="1510:9" pos:end="1510:49"><name pos:start="1510:9" pos:end="1510:19">cur_seg_str</name> <operator pos:start="1510:21" pos:end="1510:21">=</operator> <operator pos:start="1510:23" pos:end="1510:23">(</operator><name pos:start="1510:24" pos:end="1510:27">char</name> <operator pos:start="1510:29" pos:end="1510:29">*</operator><operator pos:start="1510:30" pos:end="1510:30">)</operator><name pos:start="1510:31" pos:end="1510:49"><name pos:start="1510:31" pos:end="1510:37">cur_seg</name><operator pos:start="1510:38" pos:end="1510:39">-&gt;</operator><name pos:start="1510:40" pos:end="1510:43">text</name><operator pos:start="1510:44" pos:end="1510:44">.</operator><name pos:start="1510:45" pos:end="1510:49">first</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1511:9" pos:end="1512:59"><expr pos:start="1511:9" pos:end="1512:58"><name pos:start="1511:9" pos:end="1511:16">safec_rc</name> <operator pos:start="1511:18" pos:end="1511:18">=</operator> <call pos:start="1511:20" pos:end="1512:58"><name pos:start="1511:20" pos:end="1511:27">memcmp_s</name><argument_list pos:start="1511:28" pos:end="1512:58">(<argument pos:start="1511:29" pos:end="1511:39"><expr pos:start="1511:29" pos:end="1511:39"><name pos:start="1511:29" pos:end="1511:39">cur_seg_str</name></expr></argument>, <argument pos:start="1511:42" pos:end="1511:56"><expr pos:start="1511:42" pos:end="1511:56"><name pos:start="1511:42" pos:end="1511:56">EST_SEGMENT_LEN</name></expr></argument>,
                            <argument pos:start="1512:29" pos:end="1512:33"><expr pos:start="1512:29" pos:end="1512:33"><literal type="string" pos:start="1512:29" pos:end="1512:33">"est"</literal></expr></argument>, <argument pos:start="1512:36" pos:end="1512:50"><expr pos:start="1512:36" pos:end="1512:50"><name pos:start="1512:36" pos:end="1512:50">EST_SEGMENT_LEN</name></expr></argument>, <argument pos:start="1512:53" pos:end="1512:57"><expr pos:start="1512:53" pos:end="1512:57"><operator pos:start="1512:53" pos:end="1512:53">&amp;</operator><name pos:start="1512:54" pos:end="1512:57">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1513:9" pos:end="1518:9"><if pos:start="1513:9" pos:end="1518:9">if <condition pos:start="1513:12" pos:end="1513:36">(<expr pos:start="1513:13" pos:end="1513:35"><name pos:start="1513:13" pos:end="1513:16">diff</name> <operator pos:start="1513:18" pos:end="1513:19">||</operator> <name pos:start="1513:21" pos:end="1513:28">safec_rc</name> <operator pos:start="1513:30" pos:end="1513:31">!=</operator> <name pos:start="1513:33" pos:end="1513:35">EOK</name></expr>)</condition> <block pos:start="1513:38" pos:end="1518:9">{<block_content pos:start="1514:13" pos:end="1517:55">
            <expr_stmt pos:start="1514:13" pos:end="1515:47"><expr pos:start="1514:13" pos:end="1515:46"><call pos:start="1514:13" pos:end="1515:46"><name pos:start="1514:13" pos:end="1514:23">EST_LOG_ERR</name><argument_list pos:start="1514:24" pos:end="1515:46">(<argument pos:start="1514:25" pos:end="1514:65"><expr pos:start="1514:25" pos:end="1514:65"><literal type="string" pos:start="1514:25" pos:end="1514:65">"URI does not contain %s segment 0x%xO\n"</literal></expr></argument>,
                        <argument pos:start="1515:25" pos:end="1515:35"><expr pos:start="1515:25" pos:end="1515:35"><name pos:start="1515:25" pos:end="1515:35">EST_SEGMENT</name></expr></argument>, <argument pos:start="1515:38" pos:end="1515:45"><expr pos:start="1515:38" pos:end="1515:45"><name pos:start="1515:38" pos:end="1515:45">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1516:13" pos:end="1516:42"><expr pos:start="1516:13" pos:end="1516:41"><call pos:start="1516:13" pos:end="1516:41"><name pos:start="1516:13" pos:end="1516:30">uriFreeUriMembersA</name><argument_list pos:start="1516:31" pos:end="1516:41">(<argument pos:start="1516:32" pos:end="1516:40"><expr pos:start="1516:32" pos:end="1516:40"><name pos:start="1516:32" pos:end="1516:40"><name pos:start="1516:32" pos:end="1516:36">state</name><operator pos:start="1516:37" pos:end="1516:37">.</operator><name pos:start="1516:38" pos:end="1516:40">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1517:13" pos:end="1517:55">return <expr pos:start="1517:20" pos:end="1517:54"><operator pos:start="1517:20" pos:end="1517:20">(</operator><name pos:start="1517:21" pos:end="1517:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name><operator pos:start="1517:54" pos:end="1517:54">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block" pos:start="1520:9" pos:end="1523:11">/*
         * This next segment is either a segment extension
         * or it's the operation 
         */</comment>
        <expr_stmt pos:start="1524:9" pos:end="1524:32"><expr pos:start="1524:9" pos:end="1524:31"><name pos:start="1524:9" pos:end="1524:15">cur_seg</name> <operator pos:start="1524:17" pos:end="1524:17">=</operator> <name pos:start="1524:19" pos:end="1524:31"><name pos:start="1524:19" pos:end="1524:25">cur_seg</name><operator pos:start="1524:26" pos:end="1524:27">-&gt;</operator><name pos:start="1524:28" pos:end="1524:31">next</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="1525:9" pos:end="1525:50"><expr pos:start="1525:9" pos:end="1525:49"><name pos:start="1525:9" pos:end="1525:19">cur_seg_str</name> <operator pos:start="1525:21" pos:end="1525:21">=</operator> <operator pos:start="1525:23" pos:end="1525:23">(</operator><name pos:start="1525:24" pos:end="1525:27">char</name> <operator pos:start="1525:29" pos:end="1525:29">*</operator><operator pos:start="1525:30" pos:end="1525:30">)</operator><name pos:start="1525:31" pos:end="1525:49"><name pos:start="1525:31" pos:end="1525:37">cur_seg</name><operator pos:start="1525:38" pos:end="1525:39">-&gt;</operator><name pos:start="1525:40" pos:end="1525:43">text</name><operator pos:start="1525:44" pos:end="1525:44">.</operator><name pos:start="1525:45" pos:end="1525:49">first</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="1527:9" pos:end="1530:11">/*
         * If there's another segment after this one then use it
         * to find the end, else walk this one for the length
         */</comment>
        <if_stmt pos:start="1531:9" pos:end="1535:9"><if pos:start="1531:9" pos:end="1533:9">if <condition pos:start="1531:12" pos:end="1531:36">(<expr pos:start="1531:13" pos:end="1531:35"><name pos:start="1531:13" pos:end="1531:35"><name pos:start="1531:13" pos:end="1531:19">cur_seg</name><operator pos:start="1531:20" pos:end="1531:21">-&gt;</operator><name pos:start="1531:22" pos:end="1531:25">text</name><operator pos:start="1531:26" pos:end="1531:26">.</operator><name pos:start="1531:27" pos:end="1531:35">afterLast</name></name></expr>)</condition> <block pos:start="1531:38" pos:end="1533:9">{<block_content pos:start="1532:13" pos:end="1532:74">
            <expr_stmt pos:start="1532:13" pos:end="1532:74"><expr pos:start="1532:13" pos:end="1532:73"><name pos:start="1532:13" pos:end="1532:23">cur_seg_len</name> <operator pos:start="1532:25" pos:end="1532:25">=</operator> <operator pos:start="1532:27" pos:end="1532:27">(</operator><operator pos:start="1532:28" pos:end="1532:28">(</operator><name pos:start="1532:29" pos:end="1532:32">char</name> <operator pos:start="1532:34" pos:end="1532:34">*</operator><operator pos:start="1532:35" pos:end="1532:35">)</operator><name pos:start="1532:36" pos:end="1532:58"><name pos:start="1532:36" pos:end="1532:42">cur_seg</name><operator pos:start="1532:43" pos:end="1532:44">-&gt;</operator><name pos:start="1532:45" pos:end="1532:48">text</name><operator pos:start="1532:49" pos:end="1532:49">.</operator><name pos:start="1532:50" pos:end="1532:58">afterLast</name></name><operator pos:start="1532:59" pos:end="1532:59">)</operator> <operator pos:start="1532:61" pos:end="1532:61">-</operator> <name pos:start="1532:63" pos:end="1532:73">cur_seg_str</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1533:11" pos:end="1535:9">else <block pos:start="1533:16" pos:end="1535:9">{<block_content pos:start="1534:13" pos:end="1534:77">
            <expr_stmt pos:start="1534:13" pos:end="1534:77"><expr pos:start="1534:13" pos:end="1534:76"><name pos:start="1534:13" pos:end="1534:23">cur_seg_len</name> <operator pos:start="1534:25" pos:end="1534:25">=</operator> <call pos:start="1534:27" pos:end="1534:76"><name pos:start="1534:27" pos:end="1534:35">strnlen_s</name><argument_list pos:start="1534:36" pos:end="1534:76">(<argument pos:start="1534:37" pos:end="1534:47"><expr pos:start="1534:37" pos:end="1534:47"><name pos:start="1534:37" pos:end="1534:47">cur_seg_str</name></expr></argument>, <argument pos:start="1534:50" pos:end="1534:75"><expr pos:start="1534:50" pos:end="1534:75"><name pos:start="1534:50" pos:end="1534:73">EST_MAX_PATH_SEGMENT_LEN</name><operator pos:start="1534:74" pos:end="1534:74">+</operator><literal type="number" pos:start="1534:75" pos:end="1534:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt pos:start="1536:9" pos:end="1541:9"><if pos:start="1536:9" pos:end="1541:9">if <condition pos:start="1536:12" pos:end="1536:51">(<expr pos:start="1536:13" pos:end="1536:50"><name pos:start="1536:13" pos:end="1536:23">cur_seg_len</name> <operator pos:start="1536:25" pos:end="1536:25">&gt;</operator> <name pos:start="1536:27" pos:end="1536:50">EST_MAX_PATH_SEGMENT_LEN</name></expr>)</condition> <block pos:start="1536:53" pos:end="1541:9">{<block_content pos:start="1537:13" pos:end="1540:55">
            <expr_stmt pos:start="1537:13" pos:end="1538:50"><expr pos:start="1537:13" pos:end="1538:49"><call pos:start="1537:13" pos:end="1538:49"><name pos:start="1537:13" pos:end="1537:23">EST_LOG_ERR</name><argument_list pos:start="1537:24" pos:end="1538:49">(<argument pos:start="1537:25" pos:end="1537:62"><expr pos:start="1537:25" pos:end="1537:62"><literal type="string" pos:start="1537:25" pos:end="1537:62">"path segment exceeds maximum of %d\n"</literal></expr></argument>,
                        <argument pos:start="1538:25" pos:end="1538:48"><expr pos:start="1538:25" pos:end="1538:48"><name pos:start="1538:25" pos:end="1538:48">EST_MAX_PATH_SEGMENT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1539:13" pos:end="1539:42"><expr pos:start="1539:13" pos:end="1539:41"><call pos:start="1539:13" pos:end="1539:41"><name pos:start="1539:13" pos:end="1539:30">uriFreeUriMembersA</name><argument_list pos:start="1539:31" pos:end="1539:41">(<argument pos:start="1539:32" pos:end="1539:40"><expr pos:start="1539:32" pos:end="1539:40"><name pos:start="1539:32" pos:end="1539:40"><name pos:start="1539:32" pos:end="1539:36">state</name><operator pos:start="1539:37" pos:end="1539:37">.</operator><name pos:start="1539:38" pos:end="1539:40">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1540:13" pos:end="1540:55">return <expr pos:start="1540:20" pos:end="1540:54"><operator pos:start="1540:20" pos:end="1540:20">(</operator><name pos:start="1540:21" pos:end="1540:53">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name><operator pos:start="1540:54" pos:end="1540:54">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1543:9" pos:end="1546:11">/*
         * See if the current segment needs to be put into its own
         * string
         */</comment>
        <if_stmt pos:start="1547:9" pos:end="1552:9"><if pos:start="1547:9" pos:end="1550:9">if <condition pos:start="1547:12" pos:end="1548:47">(<expr pos:start="1547:13" pos:end="1548:46"><operator pos:start="1547:13" pos:end="1547:13">(</operator><name pos:start="1547:14" pos:end="1547:36"><name pos:start="1547:14" pos:end="1547:20">cur_seg</name><operator pos:start="1547:21" pos:end="1547:22">-&gt;</operator><name pos:start="1547:23" pos:end="1547:26">text</name><operator pos:start="1547:27" pos:end="1547:27">.</operator><name pos:start="1547:28" pos:end="1547:36">afterLast</name></name> <operator pos:start="1547:38" pos:end="1547:39">!=</operator> <name pos:start="1547:41" pos:end="1547:44">NULL</name><operator pos:start="1547:45" pos:end="1547:45">)</operator> <operator pos:start="1547:47" pos:end="1547:48">&amp;&amp;</operator>
            <operator pos:start="1548:13" pos:end="1548:13">*</operator><operator pos:start="1548:14" pos:end="1548:14">(</operator><name pos:start="1548:15" pos:end="1548:37"><name pos:start="1548:15" pos:end="1548:21">cur_seg</name><operator pos:start="1548:22" pos:end="1548:23">-&gt;</operator><name pos:start="1548:24" pos:end="1548:27">text</name><operator pos:start="1548:28" pos:end="1548:28">.</operator><name pos:start="1548:29" pos:end="1548:37">afterLast</name></name><operator pos:start="1548:38" pos:end="1548:38">)</operator> <operator pos:start="1548:40" pos:end="1548:41">!=</operator> <literal type="char" pos:start="1548:43" pos:end="1548:46">'\0'</literal></expr>)</condition> <block pos:start="1548:49" pos:end="1550:9">{<block_content pos:start="1549:13" pos:end="1549:56">
            <expr_stmt pos:start="1549:13" pos:end="1549:56"><expr pos:start="1549:13" pos:end="1549:55"><name pos:start="1549:13" pos:end="1549:19">segment</name> <operator pos:start="1549:21" pos:end="1549:21">=</operator> <call pos:start="1549:23" pos:end="1549:55"><name pos:start="1549:23" pos:end="1549:29">STRNDUP</name><argument_list pos:start="1549:30" pos:end="1549:55">(<argument pos:start="1549:31" pos:end="1549:41"><expr pos:start="1549:31" pos:end="1549:41"><name pos:start="1549:31" pos:end="1549:41">cur_seg_str</name></expr></argument>, <argument pos:start="1549:44" pos:end="1549:54"><expr pos:start="1549:44" pos:end="1549:54"><name pos:start="1549:44" pos:end="1549:54">cur_seg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="1550:11" pos:end="1552:9">else <block pos:start="1550:16" pos:end="1552:9">{<block_content pos:start="1551:13" pos:end="1551:69">
            <expr_stmt pos:start="1551:13" pos:end="1551:69"><expr pos:start="1551:13" pos:end="1551:68"><name pos:start="1551:13" pos:end="1551:19">segment</name> <operator pos:start="1551:21" pos:end="1551:21">=</operator> <call pos:start="1551:23" pos:end="1551:68"><name pos:start="1551:23" pos:end="1551:29">STRNDUP</name><argument_list pos:start="1551:30" pos:end="1551:68">(<argument pos:start="1551:31" pos:end="1551:41"><expr pos:start="1551:31" pos:end="1551:41"><name pos:start="1551:31" pos:end="1551:41">cur_seg_str</name></expr></argument>, <argument pos:start="1551:44" pos:end="1551:67"><expr pos:start="1551:44" pos:end="1551:67"><name pos:start="1551:44" pos:end="1551:67">EST_MAX_PATH_SEGMENT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        
        <comment type="block" pos:start="1554:9" pos:end="1557:11">/*
         * look to see if the operation path comes next:
         * cacerts, csrattrs, simpleenroll, simplereenroll
         */</comment>
        <expr_stmt pos:start="1558:9" pos:end="1558:50"><expr pos:start="1558:9" pos:end="1558:49"><operator pos:start="1558:9" pos:end="1558:9">*</operator><name pos:start="1558:10" pos:end="1558:18">operation</name> <operator pos:start="1558:20" pos:end="1558:20">=</operator> <call pos:start="1558:22" pos:end="1558:49"><name pos:start="1558:22" pos:end="1558:40">est_parse_operation</name><argument_list pos:start="1558:41" pos:end="1558:49">(<argument pos:start="1558:42" pos:end="1558:48"><expr pos:start="1558:42" pos:end="1558:48"><name pos:start="1558:42" pos:end="1558:48">segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1559:9" pos:end="1626:9"><if pos:start="1559:9" pos:end="1612:9">if <condition pos:start="1559:12" pos:end="1559:37">(<expr pos:start="1559:13" pos:end="1559:36"><operator pos:start="1559:13" pos:end="1559:13">*</operator><name pos:start="1559:14" pos:end="1559:22">operation</name> <operator pos:start="1559:24" pos:end="1559:25">==</operator> <name pos:start="1559:27" pos:end="1559:36">EST_OP_MAX</name></expr>)</condition> <block pos:start="1559:39" pos:end="1612:9">{<block_content pos:start="1575:13" pos:end="1611:13">
            
            <comment type="block" pos:start="1561:13" pos:end="1568:15">/*
             * It wasn't one of the 4 known operations so
             * it must be a path segment.  parse it out.
             *
             * Find the end of the path segment,
             * determine the length,
             * save it away
             */</comment>
            <comment type="block" pos:start="1569:13" pos:end="1569:65">/* path_seg_end = (char *)cur_seg-&gt;text.afterLast; */</comment>
            
            <comment type="block" pos:start="1571:13" pos:end="1571:45">/* if (path_seg_end != NULL) { */</comment>
            <comment type="block" pos:start="1572:13" pos:end="1572:64">/*     path_seg_len = path_seg_end - cur_seg_str; */</comment>
            <comment type="block" pos:start="1573:13" pos:end="1573:19">/* } */</comment>
            
            <expr_stmt pos:start="1575:13" pos:end="1575:46"><expr pos:start="1575:13" pos:end="1575:45"><operator pos:start="1575:13" pos:end="1575:13">*</operator><name pos:start="1575:14" pos:end="1575:21">path_seg</name> <operator pos:start="1575:23" pos:end="1575:23">=</operator> <call pos:start="1575:25" pos:end="1575:45"><name pos:start="1575:25" pos:end="1575:30">malloc</name><argument_list pos:start="1575:31" pos:end="1575:45">(<argument pos:start="1575:32" pos:end="1575:44"><expr pos:start="1575:32" pos:end="1575:44"><name pos:start="1575:32" pos:end="1575:42">cur_seg_len</name><operator pos:start="1575:43" pos:end="1575:43">+</operator><literal type="number" pos:start="1575:44" pos:end="1575:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1576:13" pos:end="1580:13"><if pos:start="1576:13" pos:end="1580:13">if <condition pos:start="1576:16" pos:end="1576:34">(<expr pos:start="1576:17" pos:end="1576:33"><operator pos:start="1576:17" pos:end="1576:17">*</operator><name pos:start="1576:18" pos:end="1576:25">path_seg</name> <operator pos:start="1576:27" pos:end="1576:28">==</operator> <name pos:start="1576:30" pos:end="1576:33">NULL</name></expr>)</condition> <block pos:start="1576:36" pos:end="1580:13">{<block_content pos:start="1577:17" pos:end="1579:40">
                <expr_stmt pos:start="1577:17" pos:end="1577:30"><expr pos:start="1577:17" pos:end="1577:29"><call pos:start="1577:17" pos:end="1577:29"><name pos:start="1577:17" pos:end="1577:20">free</name><argument_list pos:start="1577:21" pos:end="1577:29">(<argument pos:start="1577:22" pos:end="1577:28"><expr pos:start="1577:22" pos:end="1577:28"><name pos:start="1577:22" pos:end="1577:28">segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1578:17" pos:end="1578:46"><expr pos:start="1578:17" pos:end="1578:45"><call pos:start="1578:17" pos:end="1578:45"><name pos:start="1578:17" pos:end="1578:34">uriFreeUriMembersA</name><argument_list pos:start="1578:35" pos:end="1578:45">(<argument pos:start="1578:36" pos:end="1578:44"><expr pos:start="1578:36" pos:end="1578:44"><name pos:start="1578:36" pos:end="1578:44"><name pos:start="1578:36" pos:end="1578:40">state</name><operator pos:start="1578:41" pos:end="1578:41">.</operator><name pos:start="1578:42" pos:end="1578:44">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1579:17" pos:end="1579:40">return <expr pos:start="1579:24" pos:end="1579:39"><operator pos:start="1579:24" pos:end="1579:24">(</operator><name pos:start="1579:25" pos:end="1579:38">EST_ERR_MALLOC</name><operator pos:start="1579:39" pos:end="1579:39">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            
            <expr_stmt pos:start="1582:13" pos:end="1583:54"><expr pos:start="1582:13" pos:end="1583:53"><name pos:start="1582:13" pos:end="1582:20">safec_rc</name> <operator pos:start="1582:22" pos:end="1582:22">=</operator> <call pos:start="1582:24" pos:end="1583:53"><name pos:start="1582:24" pos:end="1582:31">memcpy_s</name><argument_list pos:start="1582:32" pos:end="1583:53">(<argument pos:start="1582:33" pos:end="1582:41"><expr pos:start="1582:33" pos:end="1582:41"><operator pos:start="1582:33" pos:end="1582:33">*</operator><name pos:start="1582:34" pos:end="1582:41">path_seg</name></expr></argument>, <argument pos:start="1582:44" pos:end="1582:56"><expr pos:start="1582:44" pos:end="1582:56"><name pos:start="1582:44" pos:end="1582:54">cur_seg_len</name><operator pos:start="1582:55" pos:end="1582:55">+</operator><literal type="number" pos:start="1582:56" pos:end="1582:56">1</literal></expr></argument>,
                                <argument pos:start="1583:33" pos:end="1583:39"><expr pos:start="1583:33" pos:end="1583:39"><name pos:start="1583:33" pos:end="1583:39">segment</name></expr></argument>, <argument pos:start="1583:42" pos:end="1583:52"><expr pos:start="1583:42" pos:end="1583:52"><name pos:start="1583:42" pos:end="1583:52">cur_seg_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="1584:13" pos:end="1591:13"><if pos:start="1584:13" pos:end="1591:13">if <condition pos:start="1584:16" pos:end="1584:32">(<expr pos:start="1584:17" pos:end="1584:31"><name pos:start="1584:17" pos:end="1584:24">safec_rc</name> <operator pos:start="1584:26" pos:end="1584:27">!=</operator> <name pos:start="1584:29" pos:end="1584:31">EOK</name></expr>)</condition> <block pos:start="1584:34" pos:end="1591:13">{<block_content pos:start="1585:17" pos:end="1590:59">
                <expr_stmt pos:start="1585:17" pos:end="1585:78"><expr pos:start="1585:17" pos:end="1585:77"><call pos:start="1585:17" pos:end="1585:77"><name pos:start="1585:17" pos:end="1585:27">EST_LOG_ERR</name><argument_list pos:start="1585:28" pos:end="1585:77">(<argument pos:start="1585:29" pos:end="1585:76"><expr pos:start="1585:29" pos:end="1585:76"><literal type="string" pos:start="1585:29" pos:end="1585:76">"URI path seg could not copied into the context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1586:17" pos:end="1586:30"><expr pos:start="1586:17" pos:end="1586:29"><call pos:start="1586:17" pos:end="1586:29"><name pos:start="1586:17" pos:end="1586:20">free</name><argument_list pos:start="1586:21" pos:end="1586:29">(<argument pos:start="1586:22" pos:end="1586:28"><expr pos:start="1586:22" pos:end="1586:28"><name pos:start="1586:22" pos:end="1586:28">segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1587:17" pos:end="1587:32"><expr pos:start="1587:17" pos:end="1587:31"><call pos:start="1587:17" pos:end="1587:31"><name pos:start="1587:17" pos:end="1587:20">free</name><argument_list pos:start="1587:21" pos:end="1587:31">(<argument pos:start="1587:22" pos:end="1587:30"><expr pos:start="1587:22" pos:end="1587:30"><operator pos:start="1587:22" pos:end="1587:22">*</operator><name pos:start="1587:23" pos:end="1587:30">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1588:17" pos:end="1588:33"><expr pos:start="1588:17" pos:end="1588:32"><operator pos:start="1588:17" pos:end="1588:17">*</operator><name pos:start="1588:18" pos:end="1588:25">path_seg</name> <operator pos:start="1588:27" pos:end="1588:27">=</operator> <name pos:start="1588:29" pos:end="1588:32">NULL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1589:17" pos:end="1589:46"><expr pos:start="1589:17" pos:end="1589:45"><call pos:start="1589:17" pos:end="1589:45"><name pos:start="1589:17" pos:end="1589:34">uriFreeUriMembersA</name><argument_list pos:start="1589:35" pos:end="1589:45">(<argument pos:start="1589:36" pos:end="1589:44"><expr pos:start="1589:36" pos:end="1589:44"><name pos:start="1589:36" pos:end="1589:44"><name pos:start="1589:36" pos:end="1589:40">state</name><operator pos:start="1589:41" pos:end="1589:41">.</operator><name pos:start="1589:42" pos:end="1589:44">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                <return pos:start="1590:17" pos:end="1590:59">return <expr pos:start="1590:24" pos:end="1590:58"><operator pos:start="1590:24" pos:end="1590:24">(</operator><name pos:start="1590:25" pos:end="1590:57">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name><operator pos:start="1590:58" pos:end="1590:58">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="1592:13" pos:end="1592:46"><expr pos:start="1592:13" pos:end="1592:45"><operator pos:start="1592:13" pos:end="1592:13">*</operator><operator pos:start="1592:14" pos:end="1592:14">(</operator><operator pos:start="1592:15" pos:end="1592:15">(</operator><operator pos:start="1592:16" pos:end="1592:16">*</operator><name pos:start="1592:17" pos:end="1592:24">path_seg</name><operator pos:start="1592:25" pos:end="1592:25">)</operator><operator pos:start="1592:26" pos:end="1592:26">+</operator><name pos:start="1592:27" pos:end="1592:37">cur_seg_len</name><operator pos:start="1592:38" pos:end="1592:38">)</operator> <operator pos:start="1592:40" pos:end="1592:40">=</operator> <literal type="char" pos:start="1592:42" pos:end="1592:45">'\0'</literal></expr>;</expr_stmt>
            
            <comment type="block" pos:start="1594:13" pos:end="1598:15">/*
             * now that we have the path segment parsed, try
             * for the operation again.  jump over the path segment
             * and the next '/'
             */</comment>
            <expr_stmt pos:start="1599:13" pos:end="1599:56"><expr pos:start="1599:13" pos:end="1599:55"><name pos:start="1599:13" pos:end="1599:23">cur_seg_str</name> <operator pos:start="1599:25" pos:end="1599:25">=</operator> <name pos:start="1599:27" pos:end="1599:37">cur_seg_str</name> <operator pos:start="1599:39" pos:end="1599:39">+</operator> <name pos:start="1599:41" pos:end="1599:51">cur_seg_len</name> <operator pos:start="1599:53" pos:end="1599:53">+</operator> <literal type="number" pos:start="1599:55" pos:end="1599:55">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="1600:13" pos:end="1600:58"><expr pos:start="1600:13" pos:end="1600:57"><operator pos:start="1600:13" pos:end="1600:13">*</operator><name pos:start="1600:14" pos:end="1600:22">operation</name> <operator pos:start="1600:24" pos:end="1600:24">=</operator> <call pos:start="1600:26" pos:end="1600:57"><name pos:start="1600:26" pos:end="1600:44">est_parse_operation</name><argument_list pos:start="1600:45" pos:end="1600:57">(<argument pos:start="1600:46" pos:end="1600:56"><expr pos:start="1600:46" pos:end="1600:56"><name pos:start="1600:46" pos:end="1600:56">cur_seg_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <if_stmt pos:start="1602:13" pos:end="1611:13"><if pos:start="1602:13" pos:end="1611:13">if <condition pos:start="1602:16" pos:end="1602:41">(<expr pos:start="1602:17" pos:end="1602:40"><operator pos:start="1602:17" pos:end="1602:17">*</operator><name pos:start="1602:18" pos:end="1602:26">operation</name> <operator pos:start="1602:28" pos:end="1602:29">==</operator> <name pos:start="1602:31" pos:end="1602:40">EST_OP_MAX</name></expr>)</condition> <block pos:start="1602:43" pos:end="1611:13">{<block_content pos:start="1606:17" pos:end="1610:46">
                <comment type="block" pos:start="1603:17" pos:end="1605:19">/*
                 * Operation code was suppose to be next but is not
                 */</comment>
                <expr_stmt pos:start="1606:17" pos:end="1606:30"><expr pos:start="1606:17" pos:end="1606:29"><call pos:start="1606:17" pos:end="1606:29"><name pos:start="1606:17" pos:end="1606:20">free</name><argument_list pos:start="1606:21" pos:end="1606:29">(<argument pos:start="1606:22" pos:end="1606:28"><expr pos:start="1606:22" pos:end="1606:28"><name pos:start="1606:22" pos:end="1606:28">segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1607:17" pos:end="1607:32"><expr pos:start="1607:17" pos:end="1607:31"><call pos:start="1607:17" pos:end="1607:31"><name pos:start="1607:17" pos:end="1607:20">free</name><argument_list pos:start="1607:21" pos:end="1607:31">(<argument pos:start="1607:22" pos:end="1607:30"><expr pos:start="1607:22" pos:end="1607:30"><operator pos:start="1607:22" pos:end="1607:22">*</operator><name pos:start="1607:23" pos:end="1607:30">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1608:17" pos:end="1608:33"><expr pos:start="1608:17" pos:end="1608:32"><operator pos:start="1608:17" pos:end="1608:17">*</operator><name pos:start="1608:18" pos:end="1608:25">path_seg</name> <operator pos:start="1608:27" pos:end="1608:27">=</operator> <name pos:start="1608:29" pos:end="1608:32">NULL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1609:17" pos:end="1609:46"><expr pos:start="1609:17" pos:end="1609:45"><call pos:start="1609:17" pos:end="1609:45"><name pos:start="1609:17" pos:end="1609:34">uriFreeUriMembersA</name><argument_list pos:start="1609:35" pos:end="1609:45">(<argument pos:start="1609:36" pos:end="1609:44"><expr pos:start="1609:36" pos:end="1609:44"><name pos:start="1609:36" pos:end="1609:44"><name pos:start="1609:36" pos:end="1609:40">state</name><operator pos:start="1609:41" pos:end="1609:41">.</operator><name pos:start="1609:42" pos:end="1609:44">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                <return pos:start="1610:17" pos:end="1610:46">return <expr pos:start="1610:24" pos:end="1610:45"><operator pos:start="1610:24" pos:end="1610:24">(</operator><name pos:start="1610:25" pos:end="1610:44">EST_ERR_HTTP_BAD_REQ</name><operator pos:start="1610:45" pos:end="1610:45">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="1612:11" pos:end="1626:9">else <block pos:start="1612:16" pos:end="1626:9">{<block_content pos:start="1616:13" pos:end="1625:13">
            <comment type="block" pos:start="1613:13" pos:end="1615:15">/*
             * It was one of the operations, make sure it's the end
             */</comment>
            <if_stmt pos:start="1616:13" pos:end="1625:13"><if pos:start="1616:13" pos:end="1625:13">if <condition pos:start="1616:16" pos:end="1617:51">(<expr pos:start="1616:17" pos:end="1617:50"><operator pos:start="1616:17" pos:end="1616:17">(</operator><name pos:start="1616:18" pos:end="1616:40"><name pos:start="1616:18" pos:end="1616:24">cur_seg</name><operator pos:start="1616:25" pos:end="1616:26">-&gt;</operator><name pos:start="1616:27" pos:end="1616:30">text</name><operator pos:start="1616:31" pos:end="1616:31">.</operator><name pos:start="1616:32" pos:end="1616:40">afterLast</name></name> <operator pos:start="1616:42" pos:end="1616:43">!=</operator> <name pos:start="1616:45" pos:end="1616:48">NULL</name><operator pos:start="1616:49" pos:end="1616:49">)</operator> <operator pos:start="1616:51" pos:end="1616:52">&amp;&amp;</operator>
                <operator pos:start="1617:17" pos:end="1617:17">*</operator><operator pos:start="1617:18" pos:end="1617:18">(</operator><name pos:start="1617:19" pos:end="1617:41"><name pos:start="1617:19" pos:end="1617:25">cur_seg</name><operator pos:start="1617:26" pos:end="1617:27">-&gt;</operator><name pos:start="1617:28" pos:end="1617:31">text</name><operator pos:start="1617:32" pos:end="1617:32">.</operator><name pos:start="1617:33" pos:end="1617:41">afterLast</name></name><operator pos:start="1617:42" pos:end="1617:42">)</operator> <operator pos:start="1617:44" pos:end="1617:45">!=</operator> <literal type="char" pos:start="1617:47" pos:end="1617:50">'\0'</literal></expr>)</condition> <block pos:start="1617:53" pos:end="1625:13">{<block_content pos:start="1618:17" pos:end="1624:59">
                <expr_stmt pos:start="1618:17" pos:end="1618:81"><expr pos:start="1618:17" pos:end="1618:80"><call pos:start="1618:17" pos:end="1618:80"><name pos:start="1618:17" pos:end="1618:27">EST_LOG_ERR</name><argument_list pos:start="1618:28" pos:end="1618:80">(<argument pos:start="1618:29" pos:end="1618:79"><expr pos:start="1618:29" pos:end="1618:79"><literal type="string" pos:start="1618:29" pos:end="1618:79">"Invalid path segment: contains an operation value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1619:17" pos:end="1619:30"><expr pos:start="1619:17" pos:end="1619:29"><call pos:start="1619:17" pos:end="1619:29"><name pos:start="1619:17" pos:end="1619:20">free</name><argument_list pos:start="1619:21" pos:end="1619:29">(<argument pos:start="1619:22" pos:end="1619:28"><expr pos:start="1619:22" pos:end="1619:28"><name pos:start="1619:22" pos:end="1619:28">segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1620:17" pos:end="1620:32"><expr pos:start="1620:17" pos:end="1620:31"><call pos:start="1620:17" pos:end="1620:31"><name pos:start="1620:17" pos:end="1620:20">free</name><argument_list pos:start="1620:21" pos:end="1620:31">(<argument pos:start="1620:22" pos:end="1620:30"><expr pos:start="1620:22" pos:end="1620:30"><operator pos:start="1620:22" pos:end="1620:22">*</operator><name pos:start="1620:23" pos:end="1620:30">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="1621:17" pos:end="1621:33"><expr pos:start="1621:17" pos:end="1621:32"><operator pos:start="1621:17" pos:end="1621:17">*</operator><name pos:start="1621:18" pos:end="1621:25">path_seg</name> <operator pos:start="1621:27" pos:end="1621:27">=</operator> <name pos:start="1621:29" pos:end="1621:32">NULL</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1622:17" pos:end="1622:40"><expr pos:start="1622:17" pos:end="1622:39"><operator pos:start="1622:17" pos:end="1622:17">*</operator><name pos:start="1622:18" pos:end="1622:26">operation</name> <operator pos:start="1622:28" pos:end="1622:28">=</operator> <name pos:start="1622:30" pos:end="1622:39">EST_OP_MAX</name></expr>;</expr_stmt>
                <expr_stmt pos:start="1623:17" pos:end="1623:46"><expr pos:start="1623:17" pos:end="1623:45"><call pos:start="1623:17" pos:end="1623:45"><name pos:start="1623:17" pos:end="1623:34">uriFreeUriMembersA</name><argument_list pos:start="1623:35" pos:end="1623:45">(<argument pos:start="1623:36" pos:end="1623:44"><expr pos:start="1623:36" pos:end="1623:44"><name pos:start="1623:36" pos:end="1623:44"><name pos:start="1623:36" pos:end="1623:40">state</name><operator pos:start="1623:41" pos:end="1623:41">.</operator><name pos:start="1623:42" pos:end="1623:44">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="1624:17" pos:end="1624:59">return <expr pos:start="1624:24" pos:end="1624:58"><operator pos:start="1624:24" pos:end="1624:24">(</operator><name pos:start="1624:25" pos:end="1624:57">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name><operator pos:start="1624:58" pos:end="1624:58">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="1627:9" pos:end="1627:22"><expr pos:start="1627:9" pos:end="1627:21"><call pos:start="1627:9" pos:end="1627:21"><name pos:start="1627:9" pos:end="1627:12">free</name><argument_list pos:start="1627:13" pos:end="1627:21">(<argument pos:start="1627:14" pos:end="1627:20"><expr pos:start="1627:14" pos:end="1627:20"><name pos:start="1627:14" pos:end="1627:20">segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1628:9" pos:end="1628:38"><expr pos:start="1628:9" pos:end="1628:37"><call pos:start="1628:9" pos:end="1628:37"><name pos:start="1628:9" pos:end="1628:26">uriFreeUriMembersA</name><argument_list pos:start="1628:27" pos:end="1628:37">(<argument pos:start="1628:28" pos:end="1628:36"><expr pos:start="1628:28" pos:end="1628:36"><name pos:start="1628:28" pos:end="1628:36"><name pos:start="1628:28" pos:end="1628:32">state</name><operator pos:start="1628:33" pos:end="1628:33">.</operator><name pos:start="1628:34" pos:end="1628:36">uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    </block_content>}</block></if></if_stmt>    
    <return pos:start="1630:5" pos:end="1630:16">return <expr pos:start="1630:12" pos:end="1630:15"><operator pos:start="1630:12" pos:end="1630:12">(</operator><name pos:start="1630:13" pos:end="1630:14">rv</name><operator pos:start="1630:15" pos:end="1630:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1632:1" pos:end="1634:3">/*
 * Given an input string, look for the four valid operations
 */</comment>
<function pos:start="1635:1" pos:end="1659:1"><type pos:start="1635:1" pos:end="1635:9"><name pos:start="1635:1" pos:end="1635:9">EST_ERROR</name></type> <name pos:start="1635:11" pos:end="1635:23">est_parse_uri</name> <parameter_list pos:start="1635:25" pos:end="1636:41">(<parameter pos:start="1635:26" pos:end="1635:34"><decl pos:start="1635:26" pos:end="1635:34"><type pos:start="1635:26" pos:end="1635:34"><name pos:start="1635:26" pos:end="1635:29">char</name> <modifier pos:start="1635:31" pos:end="1635:31">*</modifier></type><name pos:start="1635:32" pos:end="1635:34">uri</name></decl></parameter>, <parameter pos:start="1635:37" pos:end="1635:60"><decl pos:start="1635:37" pos:end="1635:60"><type pos:start="1635:37" pos:end="1635:60"><name pos:start="1635:37" pos:end="1635:49">EST_OPERATION</name> <modifier pos:start="1635:51" pos:end="1635:51">*</modifier></type><name pos:start="1635:52" pos:end="1635:60">operation</name></decl></parameter>,
                         <parameter pos:start="1636:26" pos:end="1636:40"><decl pos:start="1636:26" pos:end="1636:40"><type pos:start="1636:26" pos:end="1636:40"><name pos:start="1636:26" pos:end="1636:29">char</name> <modifier pos:start="1636:31" pos:end="1636:31">*</modifier><modifier pos:start="1636:32" pos:end="1636:32">*</modifier></type><name pos:start="1636:33" pos:end="1636:40">path_seg</name></decl></parameter>)</parameter_list> 
<block pos:start="1637:1" pos:end="1659:1">{<block_content pos:start="1638:5" pos:end="1658:14">
    <decl_stmt pos:start="1638:5" pos:end="1638:32"><decl pos:start="1638:5" pos:end="1638:31"><type pos:start="1638:5" pos:end="1638:13"><name pos:start="1638:5" pos:end="1638:13">EST_ERROR</name></type> <name pos:start="1638:15" pos:end="1638:16">rc</name> <init pos:start="1638:18" pos:end="1638:31">= <expr pos:start="1638:20" pos:end="1638:31"><name pos:start="1638:20" pos:end="1638:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="1639:5" pos:end="1639:21"><expr pos:start="1639:5" pos:end="1639:20"><operator pos:start="1639:5" pos:end="1639:5">*</operator><name pos:start="1639:6" pos:end="1639:13">path_seg</name> <operator pos:start="1639:15" pos:end="1639:15">=</operator> <name pos:start="1639:17" pos:end="1639:20">NULL</name></expr>;</expr_stmt>
    <comment type="block" pos:start="1640:5" pos:end="1643:7">/*
     * Assume that the uri is pointing to
     *   /.well-known/est/&lt;operation&gt;
     */</comment>
    <if_stmt pos:start="1644:5" pos:end="1656:5"><if pos:start="1644:5" pos:end="1646:5">if <condition pos:start="1644:8" pos:end="1644:60">(<expr pos:start="1644:9" pos:end="1644:59"><call pos:start="1644:9" pos:end="1644:54"><name pos:start="1644:9" pos:end="1644:15">strncmp</name><argument_list pos:start="1644:16" pos:end="1644:54">(<argument pos:start="1644:17" pos:end="1644:19"><expr pos:start="1644:17" pos:end="1644:19"><name pos:start="1644:17" pos:end="1644:19">uri</name></expr></argument>, <argument pos:start="1644:22" pos:end="1644:36"><expr pos:start="1644:22" pos:end="1644:36"><name pos:start="1644:22" pos:end="1644:36">EST_CACERTS_URI</name></expr></argument>, <argument pos:start="1644:39" pos:end="1644:53"><expr pos:start="1644:39" pos:end="1644:53"><name pos:start="1644:39" pos:end="1644:53">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1644:56" pos:end="1644:57">==</operator> <literal type="number" pos:start="1644:59" pos:end="1644:59">0</literal></expr>)</condition> <block pos:start="1644:62" pos:end="1646:5">{<block_content pos:start="1645:9" pos:end="1645:36">
        <expr_stmt pos:start="1645:9" pos:end="1645:36"><expr pos:start="1645:9" pos:end="1645:35"><operator pos:start="1645:9" pos:end="1645:9">*</operator><name pos:start="1645:10" pos:end="1645:18">operation</name> <operator pos:start="1645:20" pos:end="1645:20">=</operator> <name pos:start="1645:22" pos:end="1645:35">EST_OP_CACERTS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1646:7" pos:end="1648:5">else if <condition pos:start="1646:15" pos:end="1646:73">(<expr pos:start="1646:16" pos:end="1646:72"><call pos:start="1646:16" pos:end="1646:67"><name pos:start="1646:16" pos:end="1646:22">strncmp</name><argument_list pos:start="1646:23" pos:end="1646:67">(<argument pos:start="1646:24" pos:end="1646:26"><expr pos:start="1646:24" pos:end="1646:26"><name pos:start="1646:24" pos:end="1646:26">uri</name></expr></argument>, <argument pos:start="1646:29" pos:end="1646:49"><expr pos:start="1646:29" pos:end="1646:49"><name pos:start="1646:29" pos:end="1646:49">EST_SIMPLE_ENROLL_URI</name></expr></argument>, <argument pos:start="1646:52" pos:end="1646:66"><expr pos:start="1646:52" pos:end="1646:66"><name pos:start="1646:52" pos:end="1646:66">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1646:69" pos:end="1646:70">==</operator> <literal type="number" pos:start="1646:72" pos:end="1646:72">0</literal></expr>)</condition> <block pos:start="1646:75" pos:end="1648:5">{<block_content pos:start="1647:9" pos:end="1647:42">
        <expr_stmt pos:start="1647:9" pos:end="1647:42"><expr pos:start="1647:9" pos:end="1647:41"><operator pos:start="1647:9" pos:end="1647:9">*</operator><name pos:start="1647:10" pos:end="1647:18">operation</name> <operator pos:start="1647:20" pos:end="1647:20">=</operator> <name pos:start="1647:22" pos:end="1647:41">EST_OP_SIMPLE_ENROLL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1648:7" pos:end="1650:5">else if <condition pos:start="1648:15" pos:end="1648:69">(<expr pos:start="1648:16" pos:end="1648:68"><call pos:start="1648:16" pos:end="1648:63"><name pos:start="1648:16" pos:end="1648:22">strncmp</name><argument_list pos:start="1648:23" pos:end="1648:63">(<argument pos:start="1648:24" pos:end="1648:26"><expr pos:start="1648:24" pos:end="1648:26"><name pos:start="1648:24" pos:end="1648:26">uri</name></expr></argument>, <argument pos:start="1648:29" pos:end="1648:45"><expr pos:start="1648:29" pos:end="1648:45"><name pos:start="1648:29" pos:end="1648:45">EST_RE_ENROLL_URI</name></expr></argument>, <argument pos:start="1648:48" pos:end="1648:62"><expr pos:start="1648:48" pos:end="1648:62"><name pos:start="1648:48" pos:end="1648:62">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1648:65" pos:end="1648:66">==</operator> <literal type="number" pos:start="1648:68" pos:end="1648:68">0</literal></expr>)</condition> <block pos:start="1648:71" pos:end="1650:5">{<block_content pos:start="1649:9" pos:end="1649:44">
        <expr_stmt pos:start="1649:9" pos:end="1649:44"><expr pos:start="1649:9" pos:end="1649:43"><operator pos:start="1649:9" pos:end="1649:9">*</operator><name pos:start="1649:10" pos:end="1649:18">operation</name> <operator pos:start="1649:20" pos:end="1649:20">=</operator> <name pos:start="1649:22" pos:end="1649:43">EST_OP_SIMPLE_REENROLL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1650:7" pos:end="1652:5">else if <condition pos:start="1650:15" pos:end="1650:69">(<expr pos:start="1650:16" pos:end="1650:68"><call pos:start="1650:16" pos:end="1650:63"><name pos:start="1650:16" pos:end="1650:22">strncmp</name><argument_list pos:start="1650:23" pos:end="1650:63">(<argument pos:start="1650:24" pos:end="1650:26"><expr pos:start="1650:24" pos:end="1650:26"><name pos:start="1650:24" pos:end="1650:26">uri</name></expr></argument>, <argument pos:start="1650:29" pos:end="1650:45"><expr pos:start="1650:29" pos:end="1650:45"><name pos:start="1650:29" pos:end="1650:45">EST_CSR_ATTRS_URI</name></expr></argument>, <argument pos:start="1650:48" pos:end="1650:62"><expr pos:start="1650:48" pos:end="1650:62"><name pos:start="1650:48" pos:end="1650:62">EST_URI_MAX_LEN</name></expr></argument>)</argument_list></call> <operator pos:start="1650:65" pos:end="1650:66">==</operator> <literal type="number" pos:start="1650:68" pos:end="1650:68">0</literal></expr>)</condition> <block pos:start="1650:71" pos:end="1652:5">{<block_content pos:start="1651:9" pos:end="1651:37">
        <expr_stmt pos:start="1651:9" pos:end="1651:37"><expr pos:start="1651:9" pos:end="1651:36"><operator pos:start="1651:9" pos:end="1651:9">*</operator><name pos:start="1651:10" pos:end="1651:18">operation</name> <operator pos:start="1651:20" pos:end="1651:20">=</operator> <name pos:start="1651:22" pos:end="1651:36">EST_OP_CSRATTRS</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="1652:7" pos:end="1656:5">else <block pos:start="1652:12" pos:end="1656:5">{<block_content pos:start="1653:9" pos:end="1654:47">
        <expr_stmt pos:start="1653:9" pos:end="1653:32"><expr pos:start="1653:9" pos:end="1653:31"><operator pos:start="1653:9" pos:end="1653:9">*</operator><name pos:start="1653:10" pos:end="1653:18">operation</name> <operator pos:start="1653:20" pos:end="1653:20">=</operator> <name pos:start="1653:22" pos:end="1653:31">EST_OP_MAX</name></expr>;</expr_stmt>
        <expr_stmt pos:start="1654:9" pos:end="1654:47"><expr pos:start="1654:9" pos:end="1654:46"><name pos:start="1654:9" pos:end="1654:10">rc</name> <operator pos:start="1654:12" pos:end="1654:12">=</operator> <name pos:start="1654:14" pos:end="1654:46">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name></expr>;</expr_stmt>
        
    </block_content>}</block></else></if_stmt>
    
    <return pos:start="1658:5" pos:end="1658:14">return <expr pos:start="1658:12" pos:end="1658:13"><name pos:start="1658:12" pos:end="1658:13">rc</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="1660:1" pos:end="1662:3">/*
 * Store the path segment into the context.
 */</comment>
<function pos:start="1663:1" pos:end="1686:1"><type pos:start="1663:1" pos:end="1663:9"><name pos:start="1663:1" pos:end="1663:9">EST_ERROR</name></type> <name pos:start="1663:11" pos:end="1663:32">est_store_path_segment</name> <parameter_list pos:start="1663:34" pos:end="1664:55">(<parameter pos:start="1663:35" pos:end="1663:46"><decl pos:start="1663:35" pos:end="1663:46"><type pos:start="1663:35" pos:end="1663:46"><name pos:start="1663:35" pos:end="1663:41">EST_CTX</name> <modifier pos:start="1663:43" pos:end="1663:43">*</modifier></type><name pos:start="1663:44" pos:end="1663:46">ctx</name></decl></parameter>, <parameter pos:start="1663:49" pos:end="1663:66"><decl pos:start="1663:49" pos:end="1663:66"><type pos:start="1663:49" pos:end="1663:66"><name pos:start="1663:49" pos:end="1663:52">char</name> <modifier pos:start="1663:54" pos:end="1663:54">*</modifier></type><name pos:start="1663:55" pos:end="1663:66">path_segment</name></decl></parameter>,
                                  <parameter pos:start="1664:35" pos:end="1664:54"><decl pos:start="1664:35" pos:end="1664:54"><type pos:start="1664:35" pos:end="1664:54"><name pos:start="1664:35" pos:end="1664:37">int</name></type> <name pos:start="1664:39" pos:end="1664:54">path_segment_len</name></decl></parameter>)</parameter_list>
<block pos:start="1665:1" pos:end="1686:1">{<block_content pos:start="1669:5" pos:end="1685:24">
    <comment type="block" pos:start="1666:5" pos:end="1668:7">/*
     * reset what might already be cached
     */</comment>
    <if_stmt pos:start="1669:5" pos:end="1672:5"><if pos:start="1669:5" pos:end="1672:5">if <condition pos:start="1669:8" pos:end="1669:30">(<expr pos:start="1669:9" pos:end="1669:29"><name pos:start="1669:9" pos:end="1669:29"><name pos:start="1669:9" pos:end="1669:11">ctx</name><operator pos:start="1669:12" pos:end="1669:13">-&gt;</operator><name pos:start="1669:14" pos:end="1669:29">uri_path_segment</name></name></expr>)</condition> <block pos:start="1669:32" pos:end="1672:5">{<block_content pos:start="1670:9" pos:end="1671:37">
        <expr_stmt pos:start="1670:9" pos:end="1670:36"><expr pos:start="1670:9" pos:end="1670:35"><call pos:start="1670:9" pos:end="1670:35"><name pos:start="1670:9" pos:end="1670:12">free</name><argument_list pos:start="1670:13" pos:end="1670:35">(<argument pos:start="1670:14" pos:end="1670:34"><expr pos:start="1670:14" pos:end="1670:34"><name pos:start="1670:14" pos:end="1670:34"><name pos:start="1670:14" pos:end="1670:16">ctx</name><operator pos:start="1670:17" pos:end="1670:18">-&gt;</operator><name pos:start="1670:19" pos:end="1670:34">uri_path_segment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1671:9" pos:end="1671:37"><expr pos:start="1671:9" pos:end="1671:36"><name pos:start="1671:9" pos:end="1671:29"><name pos:start="1671:9" pos:end="1671:11">ctx</name><operator pos:start="1671:12" pos:end="1671:13">-&gt;</operator><name pos:start="1671:14" pos:end="1671:29">uri_path_segment</name></name> <operator pos:start="1671:31" pos:end="1671:31">=</operator> <name pos:start="1671:33" pos:end="1671:36">NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="1674:5" pos:end="1674:80"><expr pos:start="1674:5" pos:end="1674:79"><name pos:start="1674:5" pos:end="1674:25"><name pos:start="1674:5" pos:end="1674:7">ctx</name><operator pos:start="1674:8" pos:end="1674:9">-&gt;</operator><name pos:start="1674:10" pos:end="1674:25">uri_path_segment</name></name> <operator pos:start="1674:27" pos:end="1674:27">=</operator> <call pos:start="1674:29" pos:end="1674:79"><name pos:start="1674:29" pos:end="1674:34">malloc</name><argument_list pos:start="1674:35" pos:end="1674:79">(<argument pos:start="1674:36" pos:end="1674:78"><expr pos:start="1674:36" pos:end="1674:78"><call pos:start="1674:36" pos:end="1674:76"><name pos:start="1674:36" pos:end="1674:44">strnlen_s</name><argument_list pos:start="1674:45" pos:end="1674:76">(<argument pos:start="1674:46" pos:end="1674:57"><expr pos:start="1674:46" pos:end="1674:57"><name pos:start="1674:46" pos:end="1674:57">path_segment</name></expr></argument>, <argument pos:start="1674:60" pos:end="1674:75"><expr pos:start="1674:60" pos:end="1674:75"><name pos:start="1674:60" pos:end="1674:75">path_segment_len</name></expr></argument>)</argument_list></call><operator pos:start="1674:77" pos:end="1674:77">+</operator><literal type="number" pos:start="1674:78" pos:end="1674:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1675:5" pos:end="1677:5"><if pos:start="1675:5" pos:end="1677:5">if <condition pos:start="1675:8" pos:end="1675:38">(<expr pos:start="1675:9" pos:end="1675:37"><name pos:start="1675:9" pos:end="1675:29"><name pos:start="1675:9" pos:end="1675:11">ctx</name><operator pos:start="1675:12" pos:end="1675:13">-&gt;</operator><name pos:start="1675:14" pos:end="1675:29">uri_path_segment</name></name> <operator pos:start="1675:31" pos:end="1675:32">==</operator> <name pos:start="1675:34" pos:end="1675:37">NULL</name></expr>)</condition> <block pos:start="1675:40" pos:end="1677:5">{<block_content pos:start="1676:9" pos:end="1676:30">
        <return pos:start="1676:9" pos:end="1676:30">return <expr pos:start="1676:16" pos:end="1676:29"><name pos:start="1676:16" pos:end="1676:29">EST_ERR_MALLOC</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt pos:start="1679:5" pos:end="1682:5"><if pos:start="1679:5" pos:end="1682:5">if <condition pos:start="1679:8" pos:end="1680:57">(<expr pos:start="1679:9" pos:end="1680:56"><name pos:start="1679:9" pos:end="1679:11">EOK</name> <operator pos:start="1679:13" pos:end="1679:14">!=</operator> <call pos:start="1679:16" pos:end="1680:56"><name pos:start="1679:16" pos:end="1679:24">strncpy_s</name><argument_list pos:start="1679:25" pos:end="1680:56">(<argument pos:start="1679:26" pos:end="1679:46"><expr pos:start="1679:26" pos:end="1679:46"><name pos:start="1679:26" pos:end="1679:46"><name pos:start="1679:26" pos:end="1679:28">ctx</name><operator pos:start="1679:29" pos:end="1679:30">-&gt;</operator><name pos:start="1679:31" pos:end="1679:46">uri_path_segment</name></name></expr></argument>, <argument pos:start="1679:49" pos:end="1679:66"><expr pos:start="1679:49" pos:end="1679:66"><name pos:start="1679:49" pos:end="1679:64">path_segment_len</name><operator pos:start="1679:65" pos:end="1679:65">+</operator><literal type="number" pos:start="1679:66" pos:end="1679:66">1</literal></expr></argument>,
                         <argument pos:start="1680:26" pos:end="1680:37"><expr pos:start="1680:26" pos:end="1680:37"><name pos:start="1680:26" pos:end="1680:37">path_segment</name></expr></argument>, <argument pos:start="1680:40" pos:end="1680:55"><expr pos:start="1680:40" pos:end="1680:55"><name pos:start="1680:40" pos:end="1680:55">path_segment_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1680:59" pos:end="1682:5">{<block_content pos:start="1681:9" pos:end="1681:49">
        <return pos:start="1681:9" pos:end="1681:49">return <expr pos:start="1681:16" pos:end="1681:48"><name pos:start="1681:16" pos:end="1681:48">EST_ERR_HTTP_INVALID_PATH_SEGMENT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1683:5" pos:end="1683:51"><expr pos:start="1683:5" pos:end="1683:50"><name pos:start="1683:5" pos:end="1683:43"><name pos:start="1683:5" pos:end="1683:7">ctx</name><operator pos:start="1683:8" pos:end="1683:9">-&gt;</operator><name pos:start="1683:10" pos:end="1683:25">uri_path_segment</name><index pos:start="1683:26" pos:end="1683:43">[<expr pos:start="1683:27" pos:end="1683:42"><name pos:start="1683:27" pos:end="1683:42">path_segment_len</name></expr>]</index></name> <operator pos:start="1683:45" pos:end="1683:45">=</operator> <literal type="char" pos:start="1683:47" pos:end="1683:50">'\0'</literal></expr>;</expr_stmt>

    <return pos:start="1685:5" pos:end="1685:24">return <expr pos:start="1685:12" pos:end="1685:23"><name pos:start="1685:12" pos:end="1685:23">EST_ERR_NONE</name></expr>;</return>   
</block_content>}</block></function>
<comment type="block" pos:start="1687:1" pos:end="1689:3">/*
 * Store the path segment into the context.
 */</comment>
<function pos:start="1690:1" pos:end="1705:1"><type pos:start="1690:1" pos:end="1690:3"><name pos:start="1690:1" pos:end="1690:3">int</name></type> <name pos:start="1690:5" pos:end="1690:20">est_strcasecmp_s</name> <parameter_list pos:start="1690:22" pos:end="1690:41">(<parameter pos:start="1690:23" pos:end="1690:30"><decl pos:start="1690:23" pos:end="1690:30"><type pos:start="1690:23" pos:end="1690:30"><name pos:start="1690:23" pos:end="1690:26">char</name> <modifier pos:start="1690:28" pos:end="1690:28">*</modifier></type><name pos:start="1690:29" pos:end="1690:30">s1</name></decl></parameter>, <parameter pos:start="1690:33" pos:end="1690:40"><decl pos:start="1690:33" pos:end="1690:40"><type pos:start="1690:33" pos:end="1690:40"><name pos:start="1690:33" pos:end="1690:36">char</name> <modifier pos:start="1690:38" pos:end="1690:38">*</modifier></type><name pos:start="1690:39" pos:end="1690:40">s2</name></decl></parameter>)</parameter_list>
<block pos:start="1691:1" pos:end="1705:1">{<block_content pos:start="1692:5" pos:end="1704:16">
    <decl_stmt pos:start="1692:5" pos:end="1692:21"><decl pos:start="1692:5" pos:end="1692:20"><type pos:start="1692:5" pos:end="1692:11"><name pos:start="1692:5" pos:end="1692:11">errno_t</name></type> <name pos:start="1692:13" pos:end="1692:20">safec_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1693:5" pos:end="1693:13"><decl pos:start="1693:5" pos:end="1693:12"><type pos:start="1693:5" pos:end="1693:7"><name pos:start="1693:5" pos:end="1693:7">int</name></type> <name pos:start="1693:9" pos:end="1693:12">diff</name></decl>;</decl_stmt>
    
    <expr_stmt pos:start="1695:5" pos:end="1695:73"><expr pos:start="1695:5" pos:end="1695:72"><name pos:start="1695:5" pos:end="1695:12">safec_rc</name> <operator pos:start="1695:14" pos:end="1695:14">=</operator> <call pos:start="1695:16" pos:end="1695:72"><name pos:start="1695:16" pos:end="1695:27">strcasecmp_s</name><argument_list pos:start="1695:28" pos:end="1695:72">(<argument pos:start="1695:29" pos:end="1695:30"><expr pos:start="1695:29" pos:end="1695:30"><name pos:start="1695:29" pos:end="1695:30">s1</name></expr></argument>, <argument pos:start="1695:33" pos:end="1695:60"><expr pos:start="1695:33" pos:end="1695:60"><call pos:start="1695:33" pos:end="1695:60"><name pos:start="1695:33" pos:end="1695:41">strnlen_s</name><argument_list pos:start="1695:42" pos:end="1695:60">(<argument pos:start="1695:43" pos:end="1695:44"><expr pos:start="1695:43" pos:end="1695:44"><name pos:start="1695:43" pos:end="1695:44">s1</name></expr></argument>, <argument pos:start="1695:47" pos:end="1695:59"><expr pos:start="1695:47" pos:end="1695:59"><name pos:start="1695:47" pos:end="1695:59">RSIZE_MAX_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1695:63" pos:end="1695:64"><expr pos:start="1695:63" pos:end="1695:64"><name pos:start="1695:63" pos:end="1695:64">s2</name></expr></argument>, <argument pos:start="1695:67" pos:end="1695:71"><expr pos:start="1695:67" pos:end="1695:71"><operator pos:start="1695:67" pos:end="1695:67">&amp;</operator><name pos:start="1695:68" pos:end="1695:71">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1697:5" pos:end="1702:5"><if pos:start="1697:5" pos:end="1702:5">if <condition pos:start="1697:8" pos:end="1697:24">(<expr pos:start="1697:9" pos:end="1697:23"><name pos:start="1697:9" pos:end="1697:16">safec_rc</name> <operator pos:start="1697:18" pos:end="1697:19">!=</operator> <name pos:start="1697:21" pos:end="1697:23">EOK</name></expr>)</condition> <block pos:start="1697:26" pos:end="1702:5">{<block_content pos:start="1701:9" pos:end="1701:61">
    	<comment type="block" pos:start="1698:9" pos:end="1700:11">/*
    	 * Log that we encountered a SafeC error
     	 */</comment>
     	<expr_stmt pos:start="1701:9" pos:end="1701:61"><expr pos:start="1701:9" pos:end="1701:60"><call pos:start="1701:9" pos:end="1701:60"><name pos:start="1701:9" pos:end="1701:20">EST_LOG_INFO</name><argument_list pos:start="1701:21" pos:end="1701:60">(<argument pos:start="1701:22" pos:end="1701:49"><expr pos:start="1701:22" pos:end="1701:49"><literal type="string" pos:start="1701:22" pos:end="1701:49">"strcasecmp_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="1701:52" pos:end="1701:59"><expr pos:start="1701:52" pos:end="1701:59"><name pos:start="1701:52" pos:end="1701:59">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 

    <return pos:start="1704:5" pos:end="1704:16">return <expr pos:start="1704:12" pos:end="1704:15"><name pos:start="1704:12" pos:end="1704:15">diff</name></expr>;</return>
</block_content>}</block></function>
</unit>
