<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="source_code/est_proxy.c" pos:tabs="8"><comment type="block" pos:start="1:1" pos:end="6:3">/*
 * Since we hijack the OpenSSL BUF_MEM with our
 * own data, this utility function allows us
 * to free the BUF_MEM without freeing the
 * underlying data.
 */</comment>
<function pos:start="7:1" pos:end="11:1"><type pos:start="7:1" pos:end="7:11"><specifier pos:start="7:1" pos:end="7:6">static</specifier> <name pos:start="7:8" pos:end="7:11">void</name></type> <name pos:start="7:13" pos:end="7:38">est_proxy_free_ossl_bufmem</name> <parameter_list pos:start="7:40" pos:end="7:51">(<parameter pos:start="7:41" pos:end="7:50"><decl pos:start="7:41" pos:end="7:50"><type pos:start="7:41" pos:end="7:49"><name pos:start="7:41" pos:end="7:47">BUF_MEM</name> <modifier pos:start="7:49" pos:end="7:49">*</modifier></type><name pos:start="7:50" pos:end="7:50">b</name></decl></parameter>)</parameter_list>
<block pos:start="8:1" pos:end="11:1">{<block_content pos:start="9:5" pos:end="10:20">
    <expr_stmt pos:start="9:5" pos:end="9:19"><expr pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:5">b</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:11">data</name></name> <operator pos:start="9:13" pos:end="9:13">=</operator> <name pos:start="9:15" pos:end="9:18">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:20"><expr pos:start="10:5" pos:end="10:19"><call pos:start="10:5" pos:end="10:19"><name pos:start="10:5" pos:end="10:16">BUF_MEM_free</name><argument_list pos:start="10:17" pos:end="10:19">(<argument pos:start="10:18" pos:end="10:18"><expr pos:start="10:18" pos:end="10:18"><name pos:start="10:18" pos:end="10:18">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="12:1" pos:end="15:3">/*
 * bsearch_compare is used by the bsearch function to perform the
 * comparison of the nodes within the client context array.
 */</comment>
<function pos:start="16:1" pos:end="27:1"><type pos:start="16:1" pos:end="16:10"><specifier pos:start="16:1" pos:end="16:6">static</specifier> <name pos:start="16:8" pos:end="16:10">int</name></type> <name pos:start="16:12" pos:end="16:26">bsearch_compare</name><parameter_list pos:start="16:27" pos:end="16:58">(<parameter pos:start="16:28" pos:end="16:41"><decl pos:start="16:28" pos:end="16:41"><type pos:start="16:28" pos:end="16:41"><specifier pos:start="16:28" pos:end="16:32">const</specifier> <name pos:start="16:34" pos:end="16:37">void</name> <modifier pos:start="16:39" pos:end="16:39">*</modifier></type><name pos:start="16:40" pos:end="16:41">pa</name></decl></parameter>, <parameter pos:start="16:44" pos:end="16:57"><decl pos:start="16:44" pos:end="16:57"><type pos:start="16:44" pos:end="16:57"><specifier pos:start="16:44" pos:end="16:48">const</specifier> <name pos:start="16:50" pos:end="16:53">void</name> <modifier pos:start="16:55" pos:end="16:55">*</modifier></type><name pos:start="16:56" pos:end="16:57">pb</name></decl></parameter>)</parameter_list>
<block pos:start="17:1" pos:end="27:1">{<block_content pos:start="18:5" pos:end="26:20">
    <decl_stmt pos:start="18:5" pos:end="18:15"><decl pos:start="18:5" pos:end="18:14"><type pos:start="18:5" pos:end="18:7"><name pos:start="18:5" pos:end="18:7">int</name></type> <name pos:start="18:9" pos:end="18:14">result</name></decl>;</decl_stmt>
    <decl_stmt pos:start="19:5" pos:end="19:57"><decl pos:start="19:5" pos:end="19:56"><type pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:24">CLIENT_CTX_LU_NODE_T</name> <modifier pos:start="19:26" pos:end="19:26">*</modifier></type><name pos:start="19:27" pos:end="19:27">a</name> <init pos:start="19:29" pos:end="19:56">= <expr pos:start="19:31" pos:end="19:56"><operator pos:start="19:31" pos:end="19:31">(</operator><name pos:start="19:32" pos:end="19:51">CLIENT_CTX_LU_NODE_T</name> <operator pos:start="19:53" pos:end="19:53">*</operator><operator pos:start="19:54" pos:end="19:54">)</operator><name pos:start="19:55" pos:end="19:56">pa</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="20:5" pos:end="20:57"><decl pos:start="20:5" pos:end="20:56"><type pos:start="20:5" pos:end="20:26"><name pos:start="20:5" pos:end="20:24">CLIENT_CTX_LU_NODE_T</name> <modifier pos:start="20:26" pos:end="20:26">*</modifier></type><name pos:start="20:27" pos:end="20:27">b</name> <init pos:start="20:29" pos:end="20:56">= <expr pos:start="20:31" pos:end="20:56"><operator pos:start="20:31" pos:end="20:31">(</operator><name pos:start="20:32" pos:end="20:51">CLIENT_CTX_LU_NODE_T</name> <operator pos:start="20:53" pos:end="20:53">*</operator><operator pos:start="20:54" pos:end="20:54">)</operator><name pos:start="20:55" pos:end="20:56">pb</name></expr></init></decl>;</decl_stmt>
    
    <if_stmt pos:start="22:5" pos:end="22:46"><if pos:start="22:5" pos:end="22:46">if <condition pos:start="22:8" pos:end="22:34">(<expr pos:start="22:9" pos:end="22:33"><name pos:start="22:9" pos:end="22:19"><name pos:start="22:9" pos:end="22:9">a</name><operator pos:start="22:10" pos:end="22:11">-&gt;</operator><name pos:start="22:12" pos:end="22:19">threadid</name></name> <operator pos:start="22:21" pos:end="22:21">&gt;</operator> <name pos:start="22:23" pos:end="22:33"><name pos:start="22:23" pos:end="22:23">b</name><operator pos:start="22:24" pos:end="22:25">-&gt;</operator><name pos:start="22:26" pos:end="22:33">threadid</name></name></expr>)</condition><block type="pseudo" pos:start="22:36" pos:end="22:46"><block_content pos:start="22:36" pos:end="22:46"> <expr_stmt pos:start="22:36" pos:end="22:46"><expr pos:start="22:36" pos:end="22:45"><name pos:start="22:36" pos:end="22:41">result</name> <operator pos:start="22:43" pos:end="22:43">=</operator> <literal type="number" pos:start="22:45" pos:end="22:45">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="23:5" pos:end="23:47"><if pos:start="23:5" pos:end="23:47">if <condition pos:start="23:8" pos:end="23:34">(<expr pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:9">a</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:19">threadid</name></name> <operator pos:start="23:21" pos:end="23:21">&lt;</operator> <name pos:start="23:23" pos:end="23:33"><name pos:start="23:23" pos:end="23:23">b</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:33">threadid</name></name></expr>)</condition><block type="pseudo" pos:start="23:36" pos:end="23:47"><block_content pos:start="23:36" pos:end="23:47"> <expr_stmt pos:start="23:36" pos:end="23:47"><expr pos:start="23:36" pos:end="23:46"><name pos:start="23:36" pos:end="23:41">result</name> <operator pos:start="23:43" pos:end="23:43">=</operator> <operator pos:start="23:45" pos:end="23:45">-</operator><literal type="number" pos:start="23:46" pos:end="23:46">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="24:5" pos:end="24:47"><if pos:start="24:5" pos:end="24:47">if <condition pos:start="24:8" pos:end="24:35">(<expr pos:start="24:9" pos:end="24:34"><name pos:start="24:9" pos:end="24:19"><name pos:start="24:9" pos:end="24:9">a</name><operator pos:start="24:10" pos:end="24:11">-&gt;</operator><name pos:start="24:12" pos:end="24:19">threadid</name></name> <operator pos:start="24:21" pos:end="24:22">==</operator> <name pos:start="24:24" pos:end="24:34"><name pos:start="24:24" pos:end="24:24">b</name><operator pos:start="24:25" pos:end="24:26">-&gt;</operator><name pos:start="24:27" pos:end="24:34">threadid</name></name></expr>)</condition><block type="pseudo" pos:start="24:37" pos:end="24:47"><block_content pos:start="24:37" pos:end="24:47"> <expr_stmt pos:start="24:37" pos:end="24:47"><expr pos:start="24:37" pos:end="24:46"><name pos:start="24:37" pos:end="24:42">result</name> <operator pos:start="24:44" pos:end="24:44">=</operator> <literal type="number" pos:start="24:46" pos:end="24:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="26:5" pos:end="26:20">return <expr pos:start="26:12" pos:end="26:19"><operator pos:start="26:12" pos:end="26:12">(</operator><name pos:start="26:13" pos:end="26:18">result</name><operator pos:start="26:19" pos:end="26:19">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="28:1" pos:end="33:3">/*
 * get_client_ctx() performs a search through a ordered array.
 * The key for the search is the current thread id and the value returned
 * is the client context that's been created for this thread.  If no
 * entry exists in the array for this thread id, a new one is created.
 */</comment>
<function pos:start="34:1" pos:end="173:1"><type pos:start="34:1" pos:end="34:16"><specifier pos:start="34:1" pos:end="34:6">static</specifier> <name pos:start="34:8" pos:end="34:14">EST_CTX</name> <modifier pos:start="34:16" pos:end="34:16">*</modifier></type><name pos:start="34:17" pos:end="34:30">get_client_ctx</name> <parameter_list pos:start="34:32" pos:end="34:47">(<parameter pos:start="34:33" pos:end="34:46"><decl pos:start="34:33" pos:end="34:46"><type pos:start="34:33" pos:end="34:41"><name pos:start="34:33" pos:end="34:39">EST_CTX</name> <modifier pos:start="34:41" pos:end="34:41">*</modifier></type><name pos:start="34:42" pos:end="34:46">p_ctx</name></decl></parameter>)</parameter_list> 
<block pos:start="35:1" pos:end="173:1">{<block_content pos:start="36:5" pos:end="172:18">
    <decl_stmt pos:start="36:5" pos:end="36:26"><decl pos:start="36:5" pos:end="36:25"><type pos:start="36:5" pos:end="36:13"><name pos:start="36:5" pos:end="36:11">EST_CTX</name> <modifier pos:start="36:13" pos:end="36:13">*</modifier></type><name pos:start="36:14" pos:end="36:18">c_ctx</name> <init pos:start="36:20" pos:end="36:25">= <expr pos:start="36:22" pos:end="36:25"><name pos:start="36:22" pos:end="36:25">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="37:5" pos:end="37:17"><decl pos:start="37:5" pos:end="37:16"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:13">EST_ERROR</name></type> <name pos:start="37:15" pos:end="37:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="38:5" pos:end="38:35"><decl pos:start="38:5" pos:end="38:34"><type pos:start="38:5" pos:end="38:17"><name pos:start="38:5" pos:end="38:12">unsigned</name> <name pos:start="38:14" pos:end="38:17">long</name></type> <name pos:start="38:19" pos:end="38:30">cur_threadid</name> <init pos:start="38:32" pos:end="38:34">= <expr pos:start="38:34" pos:end="38:34"><literal type="number" pos:start="38:34" pos:end="38:34">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="39:5" pos:end="39:37"><decl pos:start="39:5" pos:end="39:36"><type pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:12">unsigned</name> <name pos:start="39:14" pos:end="39:17">long</name></type> <name pos:start="39:19" pos:end="39:25">cur_pid</name> <init pos:start="39:27" pos:end="39:36">= <expr pos:start="39:29" pos:end="39:36"><call pos:start="39:29" pos:end="39:36"><name pos:start="39:29" pos:end="39:34">GETPID</name><argument_list pos:start="39:35" pos:end="39:36">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="40:5" pos:end="40:37"><decl pos:start="40:5" pos:end="40:36"><type pos:start="40:5" pos:end="40:26"><name pos:start="40:5" pos:end="40:24">CLIENT_CTX_LU_NODE_T</name> <modifier pos:start="40:26" pos:end="40:26">*</modifier></type><name pos:start="40:27" pos:end="40:36">found_node</name></decl>;</decl_stmt>
    <decl_stmt pos:start="41:5" pos:end="41:38"><decl pos:start="41:5" pos:end="41:37"><type pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:12">unsigned</name> <name pos:start="41:14" pos:end="41:17">long</name></type> <name pos:start="41:19" pos:end="41:31">zero_threadid</name> <init pos:start="41:33" pos:end="41:37">= <expr pos:start="41:35" pos:end="41:37"><literal type="number" pos:start="41:35" pos:end="41:37">0x0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="42:5" pos:end="42:37"><decl pos:start="42:5" pos:end="42:36"><type pos:start="42:5" pos:end="42:26"><name pos:start="42:5" pos:end="42:24">CLIENT_CTX_LU_NODE_T</name> <modifier pos:start="42:26" pos:end="42:26">*</modifier></type><name pos:start="42:27" pos:end="42:36">empty_node</name></decl>;</decl_stmt>
    <decl_stmt pos:start="43:5" pos:end="57:0"><decl pos:start="43:5" pos:end="43:19"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:19">empty_index</name></decl>;</decl_stmt>

    <comment type="block" pos:start="45:5" pos:end="55:7">/*
     * Windows TODO: This will likely need to be replaced with
     * GetCurrentThreadId()
     * In addition, this is really returning a pointer to an opaque value, so
     * what's being used here is typically a pointer in pthread based
     * environments and not the actual pthread id.  The only helper API to
     * access the actual id is pthread_equal().  If this must be used, then
     * the array search would best be changed to a linear search.
     * We mix in the PID of the current process with the thread ID in
     * case the application is forking new processes (e.g. NGINX).  
     */</comment>
<cpp:ifndef pos:start="56:1" pos:end="56:24">#<cpp:directive pos:start="56:2" pos:end="56:7">ifndef</cpp:directive> <name pos:start="56:9" pos:end="56:24">DISABLE_PTHREADS</name></cpp:ifndef>
    <expr_stmt pos:start="57:5" pos:end="59:0"><expr pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:16">cur_threadid</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <operator pos:start="57:20" pos:end="57:20">(</operator><name pos:start="57:21" pos:end="57:28">unsigned</name> <name pos:start="57:30" pos:end="57:33">long</name><operator pos:start="57:34" pos:end="57:34">)</operator> <call pos:start="57:36" pos:end="57:49"><name pos:start="57:36" pos:end="57:47">pthread_self</name><argument_list pos:start="57:48" pos:end="57:49">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="58:1" pos:end="58:6">#<cpp:directive pos:start="58:2" pos:end="58:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:16">cur_threadid</name> <operator pos:start="59:18" pos:end="59:19">+=</operator> <name pos:start="59:21" pos:end="59:27">cur_pid</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="65:67"><expr pos:start="61:5" pos:end="65:66"><name pos:start="61:5" pos:end="61:14">found_node</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:38">CLIENT_CTX_LU_NODE_T</name> <operator pos:start="61:40" pos:end="61:40">*</operator><operator pos:start="61:41" pos:end="61:41">)</operator> <call pos:start="61:43" pos:end="65:66"><name pos:start="61:43" pos:end="61:49">bsearch</name><argument_list pos:start="61:50" pos:end="65:66">(<argument pos:start="61:51" pos:end="61:63"><expr pos:start="61:51" pos:end="61:63"><operator pos:start="61:51" pos:end="61:51">&amp;</operator><name pos:start="61:52" pos:end="61:63">cur_threadid</name></expr></argument>,
                                                  <argument pos:start="62:51" pos:end="62:73"><expr pos:start="62:51" pos:end="62:73"><name pos:start="62:51" pos:end="62:73"><name pos:start="62:51" pos:end="62:55">p_ctx</name><operator pos:start="62:56" pos:end="62:57">-&gt;</operator><name pos:start="62:58" pos:end="62:73">client_ctx_array</name></name></expr></argument>,
                                                  <argument pos:start="63:51" pos:end="63:67"><expr pos:start="63:51" pos:end="63:67"><name pos:start="63:51" pos:end="63:67">cur_max_ctx_array</name></expr></argument>,
                                                  <argument pos:start="64:51" pos:end="64:78"><expr pos:start="64:51" pos:end="64:78"><sizeof pos:start="64:51" pos:end="64:78">sizeof<argument_list pos:start="64:57" pos:end="64:78">(<argument pos:start="64:58" pos:end="64:77"><expr pos:start="64:58" pos:end="64:77"><name pos:start="64:58" pos:end="64:77">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                                  <argument pos:start="65:51" pos:end="65:65"><expr pos:start="65:51" pos:end="65:65"><name pos:start="65:51" pos:end="65:65">bsearch_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="66:5" pos:end="170:5"><if pos:start="66:5" pos:end="164:5">if <condition pos:start="66:8" pos:end="66:27">(<expr pos:start="66:9" pos:end="66:26"><name pos:start="66:9" pos:end="66:18">found_node</name> <operator pos:start="66:20" pos:end="66:21">==</operator> <name pos:start="66:23" pos:end="66:26">NULL</name></expr>)</condition> <block pos:start="66:29" pos:end="164:5">{<block_content pos:start="71:9" pos:end="163:31">
        
        <comment type="block" pos:start="68:9" pos:end="70:11">/*
         * need to allocate a context and get it ready to be used.
         */</comment>
        <expr_stmt pos:start="71:9" pos:end="72:59"><expr pos:start="71:9" pos:end="72:58"><name pos:start="71:9" pos:end="71:13">c_ctx</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="72:58"><name pos:start="71:17" pos:end="71:31">est_client_init</name><argument_list pos:start="71:32" pos:end="72:58">(<argument pos:start="71:33" pos:end="71:51"><expr pos:start="71:33" pos:end="71:51"><name pos:start="71:33" pos:end="71:51"><name pos:start="71:33" pos:end="71:37">p_ctx</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:51">ca_chain_raw</name></name></expr></argument>, <argument pos:start="71:54" pos:end="71:76"><expr pos:start="71:54" pos:end="71:76"><name pos:start="71:54" pos:end="71:76"><name pos:start="71:54" pos:end="71:58">p_ctx</name><operator pos:start="71:59" pos:end="71:60">-&gt;</operator><name pos:start="71:61" pos:end="71:76">ca_chain_raw_len</name></name></expr></argument>,
                                <argument pos:start="72:33" pos:end="72:51"><expr pos:start="72:33" pos:end="72:51"><name pos:start="72:33" pos:end="72:51">EST_CERT_FORMAT_PEM</name></expr></argument>, <argument pos:start="72:54" pos:end="72:57"><expr pos:start="72:54" pos:end="72:57"><name pos:start="72:54" pos:end="72:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="73:9" pos:end="76:9"><if pos:start="73:9" pos:end="76:9">if <condition pos:start="73:12" pos:end="73:26">(<expr pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:17">c_ctx</name> <operator pos:start="73:19" pos:end="73:20">==</operator> <name pos:start="73:22" pos:end="73:25">NULL</name></expr>)</condition> <block pos:start="73:28" pos:end="76:9">{<block_content pos:start="74:13" pos:end="75:26">
            <expr_stmt pos:start="74:13" pos:end="74:94"><expr pos:start="74:13" pos:end="74:93"><call pos:start="74:13" pos:end="74:93"><name pos:start="74:13" pos:end="74:23">EST_LOG_ERR</name><argument_list pos:start="74:24" pos:end="74:93">(<argument pos:start="74:25" pos:end="74:92"><expr pos:start="74:25" pos:end="74:92"><literal type="string" pos:start="74:25" pos:end="74:92">"Unable to allocate and initialize EST client context for Proxy use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="75:13" pos:end="75:26">return <expr pos:start="75:20" pos:end="75:25"><operator pos:start="75:20" pos:end="75:20">(</operator><name pos:start="75:21" pos:end="75:24">NULL</name><operator pos:start="75:25" pos:end="75:25">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="78:9" pos:end="84:11">/*
         * The name is a bit misleading.  The identity cert and private
         * key used for proxy mode are the ones stored in the server_cert and
         * server_priv_key, however they are used in both directions, so here
         * when setting up the client side, it looks mixed up.  Might want to
         * change the name in context to hold these.
         */</comment>
        <expr_stmt pos:start="85:9" pos:end="86:77"><expr pos:start="85:9" pos:end="86:76"><name pos:start="85:9" pos:end="85:10">rv</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="86:76"><name pos:start="85:14" pos:end="85:32">est_client_set_auth</name><argument_list pos:start="85:33" pos:end="86:76">(<argument pos:start="85:34" pos:end="85:38"><expr pos:start="85:34" pos:end="85:38"><name pos:start="85:34" pos:end="85:38">c_ctx</name></expr></argument>, <argument pos:start="85:41" pos:end="85:53"><expr pos:start="85:41" pos:end="85:53"><name pos:start="85:41" pos:end="85:53"><name pos:start="85:41" pos:end="85:45">p_ctx</name><operator pos:start="85:46" pos:end="85:47">-&gt;</operator><name pos:start="85:48" pos:end="85:53">userid</name></name></expr></argument>, <argument pos:start="85:56" pos:end="85:70"><expr pos:start="85:56" pos:end="85:70"><name pos:start="85:56" pos:end="85:70"><name pos:start="85:56" pos:end="85:60">p_ctx</name><operator pos:start="85:61" pos:end="85:62">-&gt;</operator><name pos:start="85:63" pos:end="85:70">password</name></name></expr></argument>,
                                 <argument pos:start="86:34" pos:end="86:51"><expr pos:start="86:34" pos:end="86:51"><name pos:start="86:34" pos:end="86:51"><name pos:start="86:34" pos:end="86:38">p_ctx</name><operator pos:start="86:39" pos:end="86:40">-&gt;</operator><name pos:start="86:41" pos:end="86:51">server_cert</name></name></expr></argument>, <argument pos:start="86:54" pos:end="86:75"><expr pos:start="86:54" pos:end="86:75"><name pos:start="86:54" pos:end="86:75"><name pos:start="86:54" pos:end="86:58">p_ctx</name><operator pos:start="86:59" pos:end="86:60">-&gt;</operator><name pos:start="86:61" pos:end="86:75">server_priv_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:31">(<expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:14">rv</name> <operator pos:start="87:16" pos:end="87:17">!=</operator> <name pos:start="87:19" pos:end="87:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="87:33" pos:end="91:9">{<block_content pos:start="88:13" pos:end="90:26">
            <expr_stmt pos:start="88:13" pos:end="88:106"><expr pos:start="88:13" pos:end="88:105"><call pos:start="88:13" pos:end="88:105"><name pos:start="88:13" pos:end="88:23">EST_LOG_ERR</name><argument_list pos:start="88:24" pos:end="88:105">(<argument pos:start="88:25" pos:end="88:104"><expr pos:start="88:25" pos:end="88:104"><literal type="string" pos:start="88:25" pos:end="88:104">"Unable to set authentication configuration in the client context for Proxy use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><call pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:23">est_destroy</name><argument_list pos:start="89:24" pos:end="89:30">(<argument pos:start="89:25" pos:end="89:29"><expr pos:start="89:25" pos:end="89:29"><name pos:start="89:25" pos:end="89:29">c_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="90:13" pos:end="90:26">return <expr pos:start="90:20" pos:end="90:25"><operator pos:start="90:20" pos:end="90:20">(</operator><name pos:start="90:21" pos:end="90:24">NULL</name><operator pos:start="90:25" pos:end="90:25">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>        

        <expr_stmt pos:start="93:9" pos:end="93:76"><expr pos:start="93:9" pos:end="93:75"><name pos:start="93:9" pos:end="93:10">rv</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:75"><name pos:start="93:14" pos:end="93:40">est_client_set_auth_cred_cb</name><argument_list pos:start="93:41" pos:end="93:75">(<argument pos:start="93:42" pos:end="93:46"><expr pos:start="93:42" pos:end="93:46"><name pos:start="93:42" pos:end="93:46">c_ctx</name></expr></argument>, <argument pos:start="93:49" pos:end="93:74"><expr pos:start="93:49" pos:end="93:74"><name pos:start="93:49" pos:end="93:74"><name pos:start="93:49" pos:end="93:53">p_ctx</name><operator pos:start="93:54" pos:end="93:55">-&gt;</operator><name pos:start="93:56" pos:end="93:74">auth_credentials_cb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="94:9" pos:end="97:9"><if pos:start="94:9" pos:end="97:9">if <condition pos:start="94:12" pos:end="94:31">(<expr pos:start="94:13" pos:end="94:30"><name pos:start="94:13" pos:end="94:14">rv</name> <operator pos:start="94:16" pos:end="94:17">!=</operator> <name pos:start="94:19" pos:end="94:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="94:33" pos:end="97:9">{<block_content pos:start="95:13" pos:end="96:26">
            <expr_stmt pos:start="95:13" pos:end="95:82"><expr pos:start="95:13" pos:end="95:81"><call pos:start="95:13" pos:end="95:81"><name pos:start="95:13" pos:end="95:23">EST_LOG_ERR</name><argument_list pos:start="95:24" pos:end="95:81">(<argument pos:start="95:25" pos:end="95:80"><expr pos:start="95:25" pos:end="95:80"><literal type="string" pos:start="95:25" pos:end="95:80">"Unable to register authentication credential callback."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="96:13" pos:end="96:26">return <expr pos:start="96:20" pos:end="96:25"><operator pos:start="96:20" pos:end="96:20">(</operator><name pos:start="96:21" pos:end="96:24">NULL</name><operator pos:start="96:25" pos:end="96:25">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="99:9" pos:end="104:11">/*
         * wrt path segment, unlike true client mode, the path segment will
         * be changing on every request going upstream, so no need to
         * obtain it locally at a proxy and set it one time, so it
         * should be left NULL.
         */</comment>
	<expr_stmt pos:start="105:9" pos:end="105:88"><expr pos:start="105:9" pos:end="105:87"><name pos:start="105:9" pos:end="105:10">rv</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:87"><name pos:start="105:14" pos:end="105:34">est_client_set_server</name><argument_list pos:start="105:35" pos:end="105:87">(<argument pos:start="105:36" pos:end="105:40"><expr pos:start="105:36" pos:end="105:40"><name pos:start="105:36" pos:end="105:40">c_ctx</name></expr></argument>, <argument pos:start="105:43" pos:end="105:59"><expr pos:start="105:43" pos:end="105:59"><name pos:start="105:43" pos:end="105:59"><name pos:start="105:43" pos:end="105:47">p_ctx</name><operator pos:start="105:48" pos:end="105:49">-&gt;</operator><name pos:start="105:50" pos:end="105:59">est_server</name></name></expr></argument>, <argument pos:start="105:62" pos:end="105:80"><expr pos:start="105:62" pos:end="105:80"><name pos:start="105:62" pos:end="105:80"><name pos:start="105:62" pos:end="105:66">p_ctx</name><operator pos:start="105:67" pos:end="105:68">-&gt;</operator><name pos:start="105:69" pos:end="105:80">est_port_num</name></name></expr></argument>, <argument pos:start="105:83" pos:end="105:86"><expr pos:start="105:83" pos:end="105:86"><name pos:start="105:83" pos:end="105:86">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="106:9" pos:end="110:9"><if pos:start="106:9" pos:end="110:9">if <condition pos:start="106:12" pos:end="106:31">(<expr pos:start="106:13" pos:end="106:30"><name pos:start="106:13" pos:end="106:14">rv</name> <operator pos:start="106:16" pos:end="106:17">!=</operator> <name pos:start="106:19" pos:end="106:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="106:33" pos:end="110:9">{<block_content pos:start="107:13" pos:end="109:26">
            <expr_stmt pos:start="107:13" pos:end="107:111"><expr pos:start="107:13" pos:end="107:110"><call pos:start="107:13" pos:end="107:110"><name pos:start="107:13" pos:end="107:23">EST_LOG_ERR</name><argument_list pos:start="107:24" pos:end="107:110">(<argument pos:start="107:25" pos:end="107:109"><expr pos:start="107:25" pos:end="107:109"><literal type="string" pos:start="107:25" pos:end="107:109">"Unable to set the upstream server configuration in the client context for Proxy use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="108:13" pos:end="108:31"><expr pos:start="108:13" pos:end="108:30"><call pos:start="108:13" pos:end="108:30"><name pos:start="108:13" pos:end="108:23">est_destroy</name><argument_list pos:start="108:24" pos:end="108:30">(<argument pos:start="108:25" pos:end="108:29"><expr pos:start="108:25" pos:end="108:29"><name pos:start="108:25" pos:end="108:29">c_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="109:13" pos:end="109:26">return <expr pos:start="109:20" pos:end="109:25"><operator pos:start="109:20" pos:end="109:20">(</operator><name pos:start="109:21" pos:end="109:24">NULL</name><operator pos:start="109:25" pos:end="109:25">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="112:9" pos:end="112:69"><expr pos:start="112:9" pos:end="112:68"><name pos:start="112:9" pos:end="112:10">rv</name> <operator pos:start="112:12" pos:end="112:12">=</operator> <call pos:start="112:14" pos:end="112:68"><name pos:start="112:14" pos:end="112:40">est_client_set_read_timeout</name><argument_list pos:start="112:41" pos:end="112:68">(<argument pos:start="112:42" pos:end="112:46"><expr pos:start="112:42" pos:end="112:46"><name pos:start="112:42" pos:end="112:46">c_ctx</name></expr></argument>, <argument pos:start="112:49" pos:end="112:67"><expr pos:start="112:49" pos:end="112:67"><name pos:start="112:49" pos:end="112:67"><name pos:start="112:49" pos:end="112:53">p_ctx</name><operator pos:start="112:54" pos:end="112:55">-&gt;</operator><name pos:start="112:56" pos:end="112:67">read_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:31">(<expr pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:14">rv</name> <operator pos:start="113:16" pos:end="113:17">!=</operator> <name pos:start="113:19" pos:end="113:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="113:33" pos:end="117:9">{<block_content pos:start="114:13" pos:end="116:26">
            <expr_stmt pos:start="114:13" pos:end="114:84"><expr pos:start="114:13" pos:end="114:83"><call pos:start="114:13" pos:end="114:83"><name pos:start="114:13" pos:end="114:23">EST_LOG_ERR</name><argument_list pos:start="114:24" pos:end="114:83">(<argument pos:start="114:25" pos:end="114:82"><expr pos:start="114:25" pos:end="114:82"><literal type="string" pos:start="114:25" pos:end="114:82">"Unable to set the SSL read timeout in the client context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt pos:start="115:13" pos:end="115:31"><expr pos:start="115:13" pos:end="115:30"><call pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:23">est_destroy</name><argument_list pos:start="115:24" pos:end="115:30">(<argument pos:start="115:25" pos:end="115:29"><expr pos:start="115:25" pos:end="115:29"><name pos:start="115:25" pos:end="115:29">c_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="116:13" pos:end="116:26">return <expr pos:start="116:20" pos:end="116:25"><operator pos:start="116:20" pos:end="116:20">(</operator><name pos:start="116:21" pos:end="116:24">NULL</name><operator pos:start="116:25" pos:end="116:25">)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>        

        <comment type="block" pos:start="119:9" pos:end="121:11">/*
         * make sure there's room for another entry
         */</comment>
        <expr_stmt pos:start="122:9" pos:end="126:71"><expr pos:start="122:9" pos:end="126:70"><name pos:start="122:9" pos:end="122:18">empty_node</name> <operator pos:start="122:20" pos:end="122:20">=</operator> <operator pos:start="122:22" pos:end="122:22">(</operator><name pos:start="122:23" pos:end="122:42">CLIENT_CTX_LU_NODE_T</name> <operator pos:start="122:44" pos:end="122:44">*</operator><operator pos:start="122:45" pos:end="122:45">)</operator> <call pos:start="122:47" pos:end="126:70"><name pos:start="122:47" pos:end="122:53">bsearch</name><argument_list pos:start="122:54" pos:end="126:70">(<argument pos:start="122:55" pos:end="122:68"><expr pos:start="122:55" pos:end="122:68"><operator pos:start="122:55" pos:end="122:55">&amp;</operator><name pos:start="122:56" pos:end="122:68">zero_threadid</name></expr></argument>,
                                                      <argument pos:start="123:55" pos:end="123:77"><expr pos:start="123:55" pos:end="123:77"><name pos:start="123:55" pos:end="123:77"><name pos:start="123:55" pos:end="123:59">p_ctx</name><operator pos:start="123:60" pos:end="123:61">-&gt;</operator><name pos:start="123:62" pos:end="123:77">client_ctx_array</name></name></expr></argument>,
                                                      <argument pos:start="124:55" pos:end="124:71"><expr pos:start="124:55" pos:end="124:71"><name pos:start="124:55" pos:end="124:71">cur_max_ctx_array</name></expr></argument>,
                                                      <argument pos:start="125:55" pos:end="125:82"><expr pos:start="125:55" pos:end="125:82"><sizeof pos:start="125:55" pos:end="125:82">sizeof<argument_list pos:start="125:61" pos:end="125:82">(<argument pos:start="125:62" pos:end="125:81"><expr pos:start="125:62" pos:end="125:81"><name pos:start="125:62" pos:end="125:81">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                                      <argument pos:start="126:55" pos:end="126:69"><expr pos:start="126:55" pos:end="126:69"><name pos:start="126:55" pos:end="126:69">bsearch_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="128:9" pos:end="152:9"><if pos:start="128:9" pos:end="152:9">if <condition pos:start="128:12" pos:end="128:31">(<expr pos:start="128:13" pos:end="128:30"><name pos:start="128:13" pos:end="128:22">empty_node</name> <operator pos:start="128:24" pos:end="128:25">==</operator> <name pos:start="128:27" pos:end="128:30">NULL</name></expr>)</condition> <block pos:start="128:33" pos:end="152:9">{<block_content pos:start="133:13" pos:end="151:75">
            <comment type="block" pos:start="129:13" pos:end="132:15">/*
             * we're out of space.  allocate a new array and copy over what's
             * already there.  Double the size of the current one.
             */</comment>
            <decl_stmt pos:start="133:13" pos:end="133:45"><decl pos:start="133:13" pos:end="133:44"><type pos:start="133:13" pos:end="133:34"><name pos:start="133:13" pos:end="133:32">CLIENT_CTX_LU_NODE_T</name> <modifier pos:start="133:34" pos:end="133:34">*</modifier></type><name pos:start="133:35" pos:end="133:44">temp_array</name></decl>;</decl_stmt>
            
            <expr_stmt pos:start="135:13" pos:end="135:35"><expr pos:start="135:13" pos:end="135:34"><name pos:start="135:13" pos:end="135:29">cur_max_ctx_array</name> <operator pos:start="135:31" pos:end="135:32">*=</operator> <literal type="number" pos:start="135:34" pos:end="135:34">2</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="136:13" pos:end="136:105"><expr pos:start="136:13" pos:end="136:104"><name pos:start="136:13" pos:end="136:22">temp_array</name> <operator pos:start="136:24" pos:end="136:24">=</operator> <operator pos:start="136:26" pos:end="136:26">(</operator><name pos:start="136:27" pos:end="136:46">CLIENT_CTX_LU_NODE_T</name> <operator pos:start="136:48" pos:end="136:48">*</operator><operator pos:start="136:49" pos:end="136:49">)</operator> <call pos:start="136:51" pos:end="136:104"><name pos:start="136:51" pos:end="136:56">malloc</name><argument_list pos:start="136:57" pos:end="136:104">(<argument pos:start="136:58" pos:end="136:103"><expr pos:start="136:58" pos:end="136:103"><sizeof pos:start="136:58" pos:end="136:85">sizeof<argument_list pos:start="136:64" pos:end="136:85">(<argument pos:start="136:65" pos:end="136:84"><expr pos:start="136:65" pos:end="136:84"><name pos:start="136:65" pos:end="136:84">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof><operator pos:start="136:86" pos:end="136:86">*</operator><name pos:start="136:87" pos:end="136:103">cur_max_ctx_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="137:13" pos:end="137:82"><expr pos:start="137:13" pos:end="137:81"><call pos:start="137:13" pos:end="137:81"><name pos:start="137:13" pos:end="137:21">memzero_s</name><argument_list pos:start="137:22" pos:end="137:81">(<argument pos:start="137:23" pos:end="137:32"><expr pos:start="137:23" pos:end="137:32"><name pos:start="137:23" pos:end="137:32">temp_array</name></expr></argument>, <argument pos:start="137:35" pos:end="137:80"><expr pos:start="137:35" pos:end="137:80"><sizeof pos:start="137:35" pos:end="137:62">sizeof<argument_list pos:start="137:41" pos:end="137:62">(<argument pos:start="137:42" pos:end="137:61"><expr pos:start="137:42" pos:end="137:61"><name pos:start="137:42" pos:end="137:61">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof><operator pos:start="137:63" pos:end="137:63">*</operator><name pos:start="137:64" pos:end="137:80">cur_max_ctx_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt pos:start="138:13" pos:end="139:95"><expr pos:start="138:13" pos:end="139:94"><call pos:start="138:13" pos:end="139:94"><name pos:start="138:13" pos:end="138:20">memcpy_s</name><argument_list pos:start="138:21" pos:end="139:94">(<argument pos:start="138:22" pos:end="138:31"><expr pos:start="138:22" pos:end="138:31"><name pos:start="138:22" pos:end="138:31">temp_array</name></expr></argument>, <argument pos:start="138:34" pos:end="138:79"><expr pos:start="138:34" pos:end="138:79"><sizeof pos:start="138:34" pos:end="138:61">sizeof<argument_list pos:start="138:40" pos:end="138:61">(<argument pos:start="138:41" pos:end="138:60"><expr pos:start="138:41" pos:end="138:60"><name pos:start="138:41" pos:end="138:60">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof><operator pos:start="138:62" pos:end="138:62">*</operator><name pos:start="138:63" pos:end="138:79">cur_max_ctx_array</name></expr></argument>,
                     <argument pos:start="139:22" pos:end="139:44"><expr pos:start="139:22" pos:end="139:44"><name pos:start="139:22" pos:end="139:44"><name pos:start="139:22" pos:end="139:26">p_ctx</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:44">client_ctx_array</name></name></expr></argument>,<argument pos:start="139:46" pos:end="139:93"><expr pos:start="139:46" pos:end="139:93"><sizeof pos:start="139:46" pos:end="139:73">sizeof<argument_list pos:start="139:52" pos:end="139:73">(<argument pos:start="139:53" pos:end="139:72"><expr pos:start="139:53" pos:end="139:72"><name pos:start="139:53" pos:end="139:72">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof><operator pos:start="139:74" pos:end="139:74">*</operator><name pos:start="139:75" pos:end="139:91">cur_max_ctx_array</name><operator pos:start="139:92" pos:end="139:92">/</operator><literal type="number" pos:start="139:93" pos:end="139:93">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="140:13" pos:end="140:42"><expr pos:start="140:13" pos:end="140:41"><call pos:start="140:13" pos:end="140:41"><name pos:start="140:13" pos:end="140:16">free</name><argument_list pos:start="140:17" pos:end="140:41">(<argument pos:start="140:18" pos:end="140:40"><expr pos:start="140:18" pos:end="140:40"><name pos:start="140:18" pos:end="140:40"><name pos:start="140:18" pos:end="140:22">p_ctx</name><operator pos:start="140:23" pos:end="140:24">-&gt;</operator><name pos:start="140:25" pos:end="140:40">client_ctx_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="141:13" pos:end="141:49"><expr pos:start="141:13" pos:end="141:48"><name pos:start="141:13" pos:end="141:35"><name pos:start="141:13" pos:end="141:17">p_ctx</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:35">client_ctx_array</name></name> <operator pos:start="141:37" pos:end="141:37">=</operator> <name pos:start="141:39" pos:end="141:48">temp_array</name></expr>;</expr_stmt>
            
            <expr_stmt pos:start="143:13" pos:end="145:35"><expr pos:start="143:13" pos:end="145:34"><call pos:start="143:13" pos:end="145:34"><name pos:start="143:13" pos:end="143:17">qsort</name><argument_list pos:start="143:18" pos:end="145:34">(<argument pos:start="143:19" pos:end="143:41"><expr pos:start="143:19" pos:end="143:41"><name pos:start="143:19" pos:end="143:41"><name pos:start="143:19" pos:end="143:23">p_ctx</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:41">client_ctx_array</name></name></expr></argument>, <argument pos:start="143:44" pos:end="143:60"><expr pos:start="143:44" pos:end="143:60"><name pos:start="143:44" pos:end="143:60">cur_max_ctx_array</name></expr></argument>,
                  <argument pos:start="144:19" pos:end="144:46"><expr pos:start="144:19" pos:end="144:46"><sizeof pos:start="144:19" pos:end="144:46">sizeof<argument_list pos:start="144:25" pos:end="144:46">(<argument pos:start="144:26" pos:end="144:45"><expr pos:start="144:26" pos:end="144:45"><name pos:start="144:26" pos:end="144:45">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
                  <argument pos:start="145:19" pos:end="145:33"><expr pos:start="145:19" pos:end="145:33"><name pos:start="145:19" pos:end="145:33">bsearch_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="151:75"><expr pos:start="147:13" pos:end="151:74"><name pos:start="147:13" pos:end="147:22">empty_node</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <operator pos:start="147:26" pos:end="147:26">(</operator><name pos:start="147:27" pos:end="147:46">CLIENT_CTX_LU_NODE_T</name> <operator pos:start="147:48" pos:end="147:48">*</operator><operator pos:start="147:49" pos:end="147:49">)</operator> <call pos:start="147:51" pos:end="151:74"><name pos:start="147:51" pos:end="147:57">bsearch</name><argument_list pos:start="147:58" pos:end="151:74">(<argument pos:start="147:59" pos:end="147:72"><expr pos:start="147:59" pos:end="147:72"><operator pos:start="147:59" pos:end="147:59">&amp;</operator><name pos:start="147:60" pos:end="147:72">zero_threadid</name></expr></argument>,
                                                          <argument pos:start="148:59" pos:end="148:81"><expr pos:start="148:59" pos:end="148:81"><name pos:start="148:59" pos:end="148:81"><name pos:start="148:59" pos:end="148:63">p_ctx</name><operator pos:start="148:64" pos:end="148:65">-&gt;</operator><name pos:start="148:66" pos:end="148:81">client_ctx_array</name></name></expr></argument>,
                                                          <argument pos:start="149:59" pos:end="149:75"><expr pos:start="149:59" pos:end="149:75"><name pos:start="149:59" pos:end="149:75">cur_max_ctx_array</name></expr></argument>,
                                                          <argument pos:start="150:59" pos:end="150:86"><expr pos:start="150:59" pos:end="150:86"><sizeof pos:start="150:59" pos:end="150:86">sizeof<argument_list pos:start="150:65" pos:end="150:86">(<argument pos:start="150:66" pos:end="150:85"><expr pos:start="150:66" pos:end="150:85"><name pos:start="150:66" pos:end="150:85">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                                          <argument pos:start="151:59" pos:end="151:73"><expr pos:start="151:59" pos:end="151:73"><name pos:start="151:59" pos:end="151:73">bsearch_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="153:9" pos:end="153:67"><expr pos:start="153:9" pos:end="153:66"><name pos:start="153:9" pos:end="153:19">empty_index</name> <operator pos:start="153:21" pos:end="153:21">=</operator> <operator pos:start="153:23" pos:end="153:23">(</operator><name pos:start="153:24" pos:end="153:26">int</name><operator pos:start="153:27" pos:end="153:27">)</operator> <operator pos:start="153:29" pos:end="153:29">(</operator><name pos:start="153:30" pos:end="153:39">empty_node</name> <operator pos:start="153:41" pos:end="153:41">-</operator> <name pos:start="153:43" pos:end="153:65"><name pos:start="153:43" pos:end="153:47">p_ctx</name><operator pos:start="153:48" pos:end="153:49">-&gt;</operator><name pos:start="153:50" pos:end="153:65">client_ctx_array</name></name><operator pos:start="153:66" pos:end="153:66">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="155:9" pos:end="157:11">/*
         * add to the array and sort it into its proper place
         */</comment>
        <expr_stmt pos:start="158:9" pos:end="158:69"><expr pos:start="158:9" pos:end="158:68"><name pos:start="158:9" pos:end="158:44"><name pos:start="158:9" pos:end="158:13">p_ctx</name><operator pos:start="158:14" pos:end="158:15">-&gt;</operator><name pos:start="158:16" pos:end="158:31">client_ctx_array</name><index pos:start="158:32" pos:end="158:44">[<expr pos:start="158:33" pos:end="158:43"><name pos:start="158:33" pos:end="158:43">empty_index</name></expr>]</index></name><operator pos:start="158:45" pos:end="158:45">.</operator><name pos:start="158:46" pos:end="158:53">threadid</name> <operator pos:start="158:55" pos:end="158:55">=</operator> <name pos:start="158:57" pos:end="158:68">cur_threadid</name></expr>;</expr_stmt>
        <expr_stmt pos:start="159:9" pos:end="159:64"><expr pos:start="159:9" pos:end="159:63"><name pos:start="159:9" pos:end="159:44"><name pos:start="159:9" pos:end="159:13">p_ctx</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:31">client_ctx_array</name><index pos:start="159:32" pos:end="159:44">[<expr pos:start="159:33" pos:end="159:43"><name pos:start="159:33" pos:end="159:43">empty_index</name></expr>]</index></name><operator pos:start="159:45" pos:end="159:45">.</operator><name pos:start="159:46" pos:end="159:55">client_ctx</name> <operator pos:start="159:57" pos:end="159:57">=</operator> <name pos:start="159:59" pos:end="159:63">c_ctx</name></expr>;</expr_stmt>
        
        <expr_stmt pos:start="161:9" pos:end="163:31"><expr pos:start="161:9" pos:end="163:30"><call pos:start="161:9" pos:end="163:30"><name pos:start="161:9" pos:end="161:13">qsort</name><argument_list pos:start="161:14" pos:end="163:30">(<argument pos:start="161:15" pos:end="161:37"><expr pos:start="161:15" pos:end="161:37"><name pos:start="161:15" pos:end="161:37"><name pos:start="161:15" pos:end="161:19">p_ctx</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:37">client_ctx_array</name></name></expr></argument>, <argument pos:start="161:40" pos:end="161:56"><expr pos:start="161:40" pos:end="161:56"><name pos:start="161:40" pos:end="161:56">cur_max_ctx_array</name></expr></argument>,
              <argument pos:start="162:15" pos:end="162:42"><expr pos:start="162:15" pos:end="162:42"><sizeof pos:start="162:15" pos:end="162:42">sizeof<argument_list pos:start="162:21" pos:end="162:42">(<argument pos:start="162:22" pos:end="162:41"><expr pos:start="162:22" pos:end="162:41"><name pos:start="162:22" pos:end="162:41">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
              <argument pos:start="163:15" pos:end="163:29"><expr pos:start="163:15" pos:end="163:29"><name pos:start="163:15" pos:end="163:29">bsearch_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="164:7" pos:end="170:5">else <block pos:start="164:12" pos:end="170:5">{<block_content pos:start="169:9" pos:end="169:39">
        <comment type="block" pos:start="165:9" pos:end="168:11">/*
         * the entry was found in the tree, return the client context for this
         * pid
         */</comment>
        <expr_stmt pos:start="169:9" pos:end="169:39"><expr pos:start="169:9" pos:end="169:38"><name pos:start="169:9" pos:end="169:13">c_ctx</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <name pos:start="169:17" pos:end="169:38"><name pos:start="169:17" pos:end="169:26">found_node</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:38">client_ctx</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <return pos:start="172:5" pos:end="172:18">return<expr pos:start="172:11" pos:end="172:17"><operator pos:start="172:11" pos:end="172:11">(</operator><name pos:start="172:12" pos:end="172:16">c_ctx</name><operator pos:start="172:17" pos:end="172:17">)</operator></expr>;</return>   
</block_content>}</block></function>
<comment type="block" pos:start="174:1" pos:end="177:3">/*
 * proxy_cleanup() is invoked from est_destroy when the
 * current context is for proxy mode.
 */</comment>
<function pos:start="178:1" pos:end="193:1"><type pos:start="178:1" pos:end="178:4"><name pos:start="178:1" pos:end="178:4">void</name></type> <name pos:start="178:6" pos:end="178:18">proxy_cleanup</name> <parameter_list pos:start="178:20" pos:end="178:35">(<parameter pos:start="178:21" pos:end="178:34"><decl pos:start="178:21" pos:end="178:34"><type pos:start="178:21" pos:end="178:29"><name pos:start="178:21" pos:end="178:27">EST_CTX</name> <modifier pos:start="178:29" pos:end="178:29">*</modifier></type><name pos:start="178:30" pos:end="178:34">p_ctx</name></decl></parameter>)</parameter_list> 
<block pos:start="179:1" pos:end="193:1">{<block_content pos:start="180:5" pos:end="192:35">
    <decl_stmt pos:start="180:5" pos:end="180:10"><decl pos:start="180:5" pos:end="180:9"><type pos:start="180:5" pos:end="180:7"><name pos:start="180:5" pos:end="180:7">int</name></type> <name pos:start="180:9" pos:end="180:9">i</name></decl>;</decl_stmt>
    
    <if_stmt pos:start="182:5" pos:end="184:5"><if pos:start="182:5" pos:end="184:5">if <condition pos:start="182:8" pos:end="182:40">(<expr pos:start="182:9" pos:end="182:39"><name pos:start="182:9" pos:end="182:31"><name pos:start="182:9" pos:end="182:13">p_ctx</name><operator pos:start="182:14" pos:end="182:15">-&gt;</operator><name pos:start="182:16" pos:end="182:31">client_ctx_array</name></name> <operator pos:start="182:33" pos:end="182:34">==</operator> <name pos:start="182:36" pos:end="182:39">NULL</name></expr>)</condition> <block pos:start="182:42" pos:end="184:5">{<block_content pos:start="183:9" pos:end="183:15">
        <return pos:start="183:9" pos:end="183:15">return;</return>
    </block_content>}</block></if></if_stmt>

    <for pos:start="186:5" pos:end="190:5">for <control pos:start="186:9" pos:end="186:39">(<init pos:start="186:10" pos:end="186:13"><expr pos:start="186:10" pos:end="186:12"><name pos:start="186:10" pos:end="186:10">i</name><operator pos:start="186:11" pos:end="186:11">=</operator><literal type="number" pos:start="186:12" pos:end="186:12">0</literal></expr>;</init> <condition pos:start="186:15" pos:end="186:34"><expr pos:start="186:15" pos:end="186:33"><name pos:start="186:15" pos:end="186:15">i</name><operator pos:start="186:16" pos:end="186:16">&lt;</operator><name pos:start="186:17" pos:end="186:33">cur_max_ctx_array</name></expr>;</condition> <incr pos:start="186:36" pos:end="186:38"><expr pos:start="186:36" pos:end="186:38"><name pos:start="186:36" pos:end="186:36">i</name><operator pos:start="186:37" pos:end="186:38">++</operator></expr></incr>)</control> <block pos:start="186:41" pos:end="190:5">{<block_content pos:start="187:9" pos:end="189:9">
        <if_stmt pos:start="187:9" pos:end="189:9"><if pos:start="187:9" pos:end="189:9">if <condition pos:start="187:12" pos:end="187:50">(<expr pos:start="187:13" pos:end="187:49"><name pos:start="187:13" pos:end="187:38"><name pos:start="187:13" pos:end="187:17">p_ctx</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:35">client_ctx_array</name><index pos:start="187:36" pos:end="187:38">[<expr pos:start="187:37" pos:end="187:37"><name pos:start="187:37" pos:end="187:37">i</name></expr>]</index></name><operator pos:start="187:39" pos:end="187:39">.</operator><name pos:start="187:40" pos:end="187:49">client_ctx</name></expr>)</condition> <block pos:start="187:52" pos:end="189:9">{<block_content pos:start="188:13" pos:end="188:63">
            <expr_stmt pos:start="188:13" pos:end="188:63"><expr pos:start="188:13" pos:end="188:62"><call pos:start="188:13" pos:end="188:62"><name pos:start="188:13" pos:end="188:23">est_destroy</name><argument_list pos:start="188:24" pos:end="188:62">(<argument pos:start="188:25" pos:end="188:61"><expr pos:start="188:25" pos:end="188:61"><name pos:start="188:25" pos:end="188:50"><name pos:start="188:25" pos:end="188:29">p_ctx</name><operator pos:start="188:30" pos:end="188:31">-&gt;</operator><name pos:start="188:32" pos:end="188:47">client_ctx_array</name><index pos:start="188:48" pos:end="188:50">[<expr pos:start="188:49" pos:end="188:49"><name pos:start="188:49" pos:end="188:49">i</name></expr>]</index></name><operator pos:start="188:51" pos:end="188:51">.</operator><name pos:start="188:52" pos:end="188:61">client_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="191:5" pos:end="191:34"><expr pos:start="191:5" pos:end="191:33"><call pos:start="191:5" pos:end="191:33"><name pos:start="191:5" pos:end="191:8">free</name><argument_list pos:start="191:9" pos:end="191:33">(<argument pos:start="191:10" pos:end="191:32"><expr pos:start="191:10" pos:end="191:32"><name pos:start="191:10" pos:end="191:32"><name pos:start="191:10" pos:end="191:14">p_ctx</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:32">client_ctx_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:35"><expr pos:start="192:5" pos:end="192:34"><name pos:start="192:5" pos:end="192:27"><name pos:start="192:5" pos:end="192:9">p_ctx</name><operator pos:start="192:10" pos:end="192:11">-&gt;</operator><name pos:start="192:12" pos:end="192:27">client_ctx_array</name></name> <operator pos:start="192:29" pos:end="192:29">=</operator> <name pos:start="192:31" pos:end="192:34">NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block" pos:start="194:1" pos:end="198:3">/*
 * This routine will check the result code from an enroll
 * attempt and propagate the retry-after message to the 
 * client if needed.
 */</comment>
<function pos:start="199:1" pos:end="215:1"><type pos:start="199:1" pos:end="199:16"><specifier pos:start="199:1" pos:end="199:6">static</specifier> <name pos:start="199:8" pos:end="199:16">EST_ERROR</name></type> <name pos:start="199:18" pos:end="199:42">est_proxy_propagate_retry</name> <parameter_list pos:start="199:44" pos:end="199:73">(<parameter pos:start="199:45" pos:end="199:56"><decl pos:start="199:45" pos:end="199:56"><type pos:start="199:45" pos:end="199:56"><name pos:start="199:45" pos:end="199:51">EST_CTX</name> <modifier pos:start="199:53" pos:end="199:53">*</modifier></type><name pos:start="199:54" pos:end="199:56">ctx</name></decl></parameter>, <parameter pos:start="199:59" pos:end="199:72"><decl pos:start="199:59" pos:end="199:72"><type pos:start="199:59" pos:end="199:72"><name pos:start="199:59" pos:end="199:62">void</name> <modifier pos:start="199:64" pos:end="199:64">*</modifier></type><name pos:start="199:65" pos:end="199:72">http_ctx</name></decl></parameter>)</parameter_list>
<block pos:start="200:1" pos:end="215:1">{<block_content pos:start="209:5" pos:end="214:26">
    <comment type="block" pos:start="201:5" pos:end="208:7">/*
     * The CA did not sign the request and has asked the
     * client to retry in the future.  This may occur if
     * the CA is not configured for automatic enrollment.
     * Send the HTTP retry response to the client.
     * We need to propagate the retry-after response to
     * the client.
     */</comment>
    <expr_stmt pos:start="209:5" pos:end="210:32"><expr pos:start="209:5" pos:end="210:31"><call pos:start="209:5" pos:end="210:31"><name pos:start="209:5" pos:end="209:16">EST_LOG_INFO</name><argument_list pos:start="209:17" pos:end="210:31">(<argument pos:start="209:18" pos:end="209:78"><expr pos:start="209:18" pos:end="209:78"><literal type="string" pos:start="209:18" pos:end="209:78">"CA server requests retry, propagate this to the client (%d)"</literal></expr></argument>, 
        <argument pos:start="210:9" pos:end="210:30"><expr pos:start="210:9" pos:end="210:30"><name pos:start="210:9" pos:end="210:30"><name pos:start="210:9" pos:end="210:11">ctx</name><operator pos:start="210:12" pos:end="210:13">-&gt;</operator><name pos:start="210:14" pos:end="210:30">retry_after_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="211:5" pos:end="213:5"><if pos:start="211:5" pos:end="213:5">if <condition pos:start="211:8" pos:end="211:96">(<expr pos:start="211:9" pos:end="211:95"><name pos:start="211:9" pos:end="211:20">EST_ERR_NONE</name> <operator pos:start="211:22" pos:end="211:23">!=</operator> <call pos:start="211:25" pos:end="211:95"><name pos:start="211:25" pos:end="211:56">est_server_send_http_retry_after</name><argument_list pos:start="211:57" pos:end="211:95">(<argument pos:start="211:58" pos:end="211:60"><expr pos:start="211:58" pos:end="211:60"><name pos:start="211:58" pos:end="211:60">ctx</name></expr></argument>, <argument pos:start="211:63" pos:end="211:70"><expr pos:start="211:63" pos:end="211:70"><name pos:start="211:63" pos:end="211:70">http_ctx</name></expr></argument>, <argument pos:start="211:73" pos:end="211:94"><expr pos:start="211:73" pos:end="211:94"><name pos:start="211:73" pos:end="211:94"><name pos:start="211:73" pos:end="211:75">ctx</name><operator pos:start="211:76" pos:end="211:77">-&gt;</operator><name pos:start="211:78" pos:end="211:94">retry_after_delay</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="211:98" pos:end="213:5">{<block_content pos:start="212:9" pos:end="212:36">
        <return pos:start="212:9" pos:end="212:36">return <expr pos:start="212:16" pos:end="212:35"><operator pos:start="212:16" pos:end="212:16">(</operator><name pos:start="212:17" pos:end="212:34">EST_ERR_HTTP_WRITE</name><operator pos:start="212:35" pos:end="212:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="214:5" pos:end="214:26">return <expr pos:start="214:12" pos:end="214:25"><operator pos:start="214:12" pos:end="214:12">(</operator><name pos:start="214:13" pos:end="214:24">EST_ERR_NONE</name><operator pos:start="214:25" pos:end="214:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="216:1" pos:end="219:3">/*
 * This routine will send a PKCS7 encoded certificate to
 * the EST client via HTTP. 
 */</comment>
<function pos:start="220:1" pos:end="251:1"><type pos:start="220:1" pos:end="220:16"><specifier pos:start="220:1" pos:end="220:6">static</specifier> <name pos:start="220:8" pos:end="220:16">EST_ERROR</name></type> <name pos:start="220:18" pos:end="220:42">est_proxy_propagate_pkcs7</name> <parameter_list pos:start="220:44" pos:end="220:96">(<parameter pos:start="220:45" pos:end="220:58"><decl pos:start="220:45" pos:end="220:58"><type pos:start="220:45" pos:end="220:58"><name pos:start="220:45" pos:end="220:48">void</name> <modifier pos:start="220:50" pos:end="220:50">*</modifier></type><name pos:start="220:51" pos:end="220:58">http_ctx</name></decl></parameter>, <parameter pos:start="220:61" pos:end="220:80"><decl pos:start="220:61" pos:end="220:80"><type pos:start="220:61" pos:end="220:80"><name pos:start="220:61" pos:end="220:68">unsigned</name> <name pos:start="220:70" pos:end="220:73">char</name> <modifier pos:start="220:75" pos:end="220:75">*</modifier></type><name pos:start="220:76" pos:end="220:80">pkcs7</name></decl></parameter>, <parameter pos:start="220:83" pos:end="220:95"><decl pos:start="220:83" pos:end="220:95"><type pos:start="220:83" pos:end="220:95"><name pos:start="220:83" pos:end="220:85">int</name></type> <name pos:start="220:87" pos:end="220:95">pkcs7_len</name></decl></parameter>)</parameter_list>
<block pos:start="221:1" pos:end="251:1">{<block_content pos:start="222:5" pos:end="250:26">
    <decl_stmt pos:start="222:5" pos:end="222:36"><decl pos:start="222:5" pos:end="222:35"><type pos:start="222:5" pos:end="222:8"><name pos:start="222:5" pos:end="222:8">char</name></type> <name pos:start="222:10" pos:end="222:35"><name pos:start="222:10" pos:end="222:17">http_hdr</name><index pos:start="222:18" pos:end="222:35">[<expr pos:start="222:19" pos:end="222:34"><name pos:start="222:19" pos:end="222:34">EST_HTTP_HDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="223:5" pos:end="223:15"><decl pos:start="223:5" pos:end="223:14"><type pos:start="223:5" pos:end="223:7"><name pos:start="223:5" pos:end="223:7">int</name></type> <name pos:start="223:9" pos:end="223:14">hdrlen</name></decl>;</decl_stmt>

    <comment type="block" pos:start="225:5" pos:end="227:7">/*
     * Send HTTP header
     */</comment>
    <expr_stmt pos:start="228:5" pos:end="229:54"><expr pos:start="228:5" pos:end="229:53"><call pos:start="228:5" pos:end="229:53"><name pos:start="228:5" pos:end="228:12">snprintf</name><argument_list pos:start="228:13" pos:end="229:53">(<argument pos:start="228:14" pos:end="228:21"><expr pos:start="228:14" pos:end="228:21"><name pos:start="228:14" pos:end="228:21">http_hdr</name></expr></argument>, <argument pos:start="228:24" pos:end="228:39"><expr pos:start="228:24" pos:end="228:39"><name pos:start="228:24" pos:end="228:39">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="228:42" pos:end="228:51"><expr pos:start="228:42" pos:end="228:51"><literal type="string" pos:start="228:42" pos:end="228:51">"%s%s%s%s"</literal></expr></argument>, <argument pos:start="228:54" pos:end="228:69"><expr pos:start="228:54" pos:end="228:69"><name pos:start="228:54" pos:end="228:69">EST_HTTP_HDR_200</name></expr></argument>, <argument pos:start="228:72" pos:end="228:87"><expr pos:start="228:72" pos:end="228:87"><name pos:start="228:72" pos:end="228:87">EST_HTTP_HDR_EOL</name></expr></argument>,
             <argument pos:start="229:14" pos:end="229:34"><expr pos:start="229:14" pos:end="229:34"><name pos:start="229:14" pos:end="229:34">EST_HTTP_HDR_STAT_200</name></expr></argument>, <argument pos:start="229:37" pos:end="229:52"><expr pos:start="229:37" pos:end="229:52"><name pos:start="229:37" pos:end="229:52">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="230:5" pos:end="230:51"><expr pos:start="230:5" pos:end="230:50"><name pos:start="230:5" pos:end="230:10">hdrlen</name> <operator pos:start="230:12" pos:end="230:12">=</operator> <call pos:start="230:14" pos:end="230:50"><name pos:start="230:14" pos:end="230:22">strnlen_s</name><argument_list pos:start="230:23" pos:end="230:50">(<argument pos:start="230:24" pos:end="230:31"><expr pos:start="230:24" pos:end="230:31"><name pos:start="230:24" pos:end="230:31">http_hdr</name></expr></argument>, <argument pos:start="230:34" pos:end="230:49"><expr pos:start="230:34" pos:end="230:49"><name pos:start="230:34" pos:end="230:49">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="231:5" pos:end="232:53"><expr pos:start="231:5" pos:end="232:52"><call pos:start="231:5" pos:end="232:52"><name pos:start="231:5" pos:end="231:12">snprintf</name><argument_list pos:start="231:13" pos:end="232:52">(<argument pos:start="231:14" pos:end="231:30"><expr pos:start="231:14" pos:end="231:30"><name pos:start="231:14" pos:end="231:21">http_hdr</name> <operator pos:start="231:23" pos:end="231:23">+</operator> <name pos:start="231:25" pos:end="231:30">hdrlen</name></expr></argument>, <argument pos:start="231:33" pos:end="231:48"><expr pos:start="231:33" pos:end="231:48"><name pos:start="231:33" pos:end="231:48">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="231:51" pos:end="231:60"><expr pos:start="231:51" pos:end="231:60"><literal type="string" pos:start="231:51" pos:end="231:60">"%s: %s%s"</literal></expr></argument>, <argument pos:start="231:63" pos:end="231:77"><expr pos:start="231:63" pos:end="231:77"><name pos:start="231:63" pos:end="231:77">EST_HTTP_HDR_CT</name></expr></argument>,
             <argument pos:start="232:14" pos:end="232:33"><expr pos:start="232:14" pos:end="232:33"><name pos:start="232:14" pos:end="232:33">EST_HTTP_CT_PKCS7_CO</name></expr></argument>, <argument pos:start="232:36" pos:end="232:51"><expr pos:start="232:36" pos:end="232:51"><name pos:start="232:36" pos:end="232:51">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="233:5" pos:end="233:51"><expr pos:start="233:5" pos:end="233:50"><name pos:start="233:5" pos:end="233:10">hdrlen</name> <operator pos:start="233:12" pos:end="233:12">=</operator> <call pos:start="233:14" pos:end="233:50"><name pos:start="233:14" pos:end="233:22">strnlen_s</name><argument_list pos:start="233:23" pos:end="233:50">(<argument pos:start="233:24" pos:end="233:31"><expr pos:start="233:24" pos:end="233:31"><name pos:start="233:24" pos:end="233:31">http_hdr</name></expr></argument>, <argument pos:start="233:34" pos:end="233:49"><expr pos:start="233:34" pos:end="233:49"><name pos:start="233:34" pos:end="233:49">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="234:5" pos:end="235:51"><expr pos:start="234:5" pos:end="235:50"><call pos:start="234:5" pos:end="235:50"><name pos:start="234:5" pos:end="234:12">snprintf</name><argument_list pos:start="234:13" pos:end="235:50">(<argument pos:start="234:14" pos:end="234:30"><expr pos:start="234:14" pos:end="234:30"><name pos:start="234:14" pos:end="234:21">http_hdr</name> <operator pos:start="234:23" pos:end="234:23">+</operator> <name pos:start="234:25" pos:end="234:30">hdrlen</name></expr></argument>, <argument pos:start="234:33" pos:end="234:48"><expr pos:start="234:33" pos:end="234:48"><name pos:start="234:33" pos:end="234:48">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="234:51" pos:end="234:60"><expr pos:start="234:51" pos:end="234:60"><literal type="string" pos:start="234:51" pos:end="234:60">"%s: %s%s"</literal></expr></argument>, <argument pos:start="234:63" pos:end="234:77"><expr pos:start="234:63" pos:end="234:77"><name pos:start="234:63" pos:end="234:77">EST_HTTP_HDR_CE</name></expr></argument>,
             <argument pos:start="235:14" pos:end="235:31"><expr pos:start="235:14" pos:end="235:31"><name pos:start="235:14" pos:end="235:31">EST_HTTP_CE_BASE64</name></expr></argument>, <argument pos:start="235:34" pos:end="235:49"><expr pos:start="235:34" pos:end="235:49"><name pos:start="235:34" pos:end="235:49">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="236:5" pos:end="236:51"><expr pos:start="236:5" pos:end="236:50"><name pos:start="236:5" pos:end="236:10">hdrlen</name> <operator pos:start="236:12" pos:end="236:12">=</operator> <call pos:start="236:14" pos:end="236:50"><name pos:start="236:14" pos:end="236:22">strnlen_s</name><argument_list pos:start="236:23" pos:end="236:50">(<argument pos:start="236:24" pos:end="236:31"><expr pos:start="236:24" pos:end="236:31"><name pos:start="236:24" pos:end="236:31">http_hdr</name></expr></argument>, <argument pos:start="236:34" pos:end="236:49"><expr pos:start="236:34" pos:end="236:49"><name pos:start="236:34" pos:end="236:49">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="237:5" pos:end="238:60"><expr pos:start="237:5" pos:end="238:59"><call pos:start="237:5" pos:end="238:59"><name pos:start="237:5" pos:end="237:12">snprintf</name><argument_list pos:start="237:13" pos:end="238:59">(<argument pos:start="237:14" pos:end="237:30"><expr pos:start="237:14" pos:end="237:30"><name pos:start="237:14" pos:end="237:21">http_hdr</name> <operator pos:start="237:23" pos:end="237:23">+</operator> <name pos:start="237:25" pos:end="237:30">hdrlen</name></expr></argument>, <argument pos:start="237:33" pos:end="237:48"><expr pos:start="237:33" pos:end="237:48"><name pos:start="237:33" pos:end="237:48">EST_HTTP_HDR_MAX</name></expr></argument>, <argument pos:start="237:51" pos:end="237:62"><expr pos:start="237:51" pos:end="237:62"><literal type="string" pos:start="237:51" pos:end="237:62">"%s: %d%s%s"</literal></expr></argument>, <argument pos:start="237:65" pos:end="237:79"><expr pos:start="237:65" pos:end="237:79"><name pos:start="237:65" pos:end="237:79">EST_HTTP_HDR_CL</name></expr></argument>,
             <argument pos:start="238:14" pos:end="238:22"><expr pos:start="238:14" pos:end="238:22"><name pos:start="238:14" pos:end="238:22">pkcs7_len</name></expr></argument>, <argument pos:start="238:25" pos:end="238:40"><expr pos:start="238:25" pos:end="238:40"><name pos:start="238:25" pos:end="238:40">EST_HTTP_HDR_EOL</name></expr></argument>, <argument pos:start="238:43" pos:end="238:58"><expr pos:start="238:43" pos:end="238:58"><name pos:start="238:43" pos:end="238:58">EST_HTTP_HDR_EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="239:5" pos:end="241:5"><if pos:start="239:5" pos:end="241:5">if <condition pos:start="239:8" pos:end="239:77">(<expr pos:start="239:9" pos:end="239:76"><operator pos:start="239:9" pos:end="239:9">!</operator><call pos:start="239:10" pos:end="239:76"><name pos:start="239:10" pos:end="239:17">mg_write</name><argument_list pos:start="239:18" pos:end="239:76">(<argument pos:start="239:19" pos:end="239:26"><expr pos:start="239:19" pos:end="239:26"><name pos:start="239:19" pos:end="239:26">http_ctx</name></expr></argument>, <argument pos:start="239:29" pos:end="239:36"><expr pos:start="239:29" pos:end="239:36"><name pos:start="239:29" pos:end="239:36">http_hdr</name></expr></argument>, <argument pos:start="239:39" pos:end="239:75"><expr pos:start="239:39" pos:end="239:75"><call pos:start="239:39" pos:end="239:75"><name pos:start="239:39" pos:end="239:47">strnlen_s</name><argument_list pos:start="239:48" pos:end="239:75">(<argument pos:start="239:49" pos:end="239:56"><expr pos:start="239:49" pos:end="239:56"><name pos:start="239:49" pos:end="239:56">http_hdr</name></expr></argument>, <argument pos:start="239:59" pos:end="239:74"><expr pos:start="239:59" pos:end="239:74"><name pos:start="239:59" pos:end="239:74">EST_HTTP_HDR_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="239:79" pos:end="241:5">{<block_content pos:start="240:13" pos:end="240:40">
            <return pos:start="240:13" pos:end="240:40">return <expr pos:start="240:20" pos:end="240:39"><operator pos:start="240:20" pos:end="240:20">(</operator><name pos:start="240:21" pos:end="240:38">EST_ERR_HTTP_WRITE</name><operator pos:start="240:39" pos:end="240:39">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="243:5" pos:end="245:7">/*
     * Send the signed PKCS7 certificate in the body
     */</comment>
    <if_stmt pos:start="246:5" pos:end="249:5"><if pos:start="246:5" pos:end="249:5">if <condition pos:start="246:8" pos:end="246:46">(<expr pos:start="246:9" pos:end="246:45"><operator pos:start="246:9" pos:end="246:9">!</operator><call pos:start="246:10" pos:end="246:45"><name pos:start="246:10" pos:end="246:17">mg_write</name><argument_list pos:start="246:18" pos:end="246:45">(<argument pos:start="246:19" pos:end="246:26"><expr pos:start="246:19" pos:end="246:26"><name pos:start="246:19" pos:end="246:26">http_ctx</name></expr></argument>, <argument pos:start="246:29" pos:end="246:33"><expr pos:start="246:29" pos:end="246:33"><name pos:start="246:29" pos:end="246:33">pkcs7</name></expr></argument>, <argument pos:start="246:36" pos:end="246:44"><expr pos:start="246:36" pos:end="246:44"><name pos:start="246:36" pos:end="246:44">pkcs7_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="246:48" pos:end="249:5">{<block_content pos:start="247:9" pos:end="248:36">
        <expr_stmt pos:start="247:9" pos:end="247:64"><expr pos:start="247:9" pos:end="247:63"><call pos:start="247:9" pos:end="247:63"><name pos:start="247:9" pos:end="247:19">EST_LOG_ERR</name><argument_list pos:start="247:20" pos:end="247:63">(<argument pos:start="247:21" pos:end="247:62"><expr pos:start="247:21" pos:end="247:62"><literal type="string" pos:start="247:21" pos:end="247:62">"HTTP write error while propagating pkcs7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="248:9" pos:end="248:36">return <expr pos:start="248:16" pos:end="248:35"><operator pos:start="248:16" pos:end="248:16">(</operator><name pos:start="248:17" pos:end="248:34">EST_ERR_HTTP_WRITE</name><operator pos:start="248:35" pos:end="248:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="250:5" pos:end="250:26">return <expr pos:start="250:12" pos:end="250:25"><operator pos:start="250:12" pos:end="250:12">(</operator><name pos:start="250:13" pos:end="250:24">EST_ERR_NONE</name><operator pos:start="250:25" pos:end="250:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="252:1" pos:end="258:3">/*
 * est_proxy_retrieve_cacerts() issues a request to the server to obtain the
 * CA Certs chain to be used for Get CA Certs requests from clients.
 * The CA Cert chain returned from the server are passed back to the caller.
 *
 * It's the responsibility of the caller to free up this buffer.
 */</comment>
<function pos:start="259:1" pos:end="325:1"><type pos:start="259:1" pos:end="259:9"><name pos:start="259:1" pos:end="259:9">EST_ERROR</name></type> <name pos:start="259:11" pos:end="259:36">est_proxy_retrieve_cacerts</name> <parameter_list pos:start="259:38" pos:end="260:59">(<parameter pos:start="259:39" pos:end="259:50"><decl pos:start="259:39" pos:end="259:50"><type pos:start="259:39" pos:end="259:50"><name pos:start="259:39" pos:end="259:45">EST_CTX</name> <modifier pos:start="259:47" pos:end="259:47">*</modifier></type><name pos:start="259:48" pos:end="259:50">ctx</name></decl></parameter>, <parameter pos:start="259:53" pos:end="259:79"><decl pos:start="259:53" pos:end="259:79"><type pos:start="259:53" pos:end="259:79"><name pos:start="259:53" pos:end="259:60">unsigned</name> <name pos:start="259:62" pos:end="259:65">char</name> <modifier pos:start="259:67" pos:end="259:67">*</modifier><modifier pos:start="259:68" pos:end="259:68">*</modifier></type><name pos:start="259:69" pos:end="259:79">cacerts_rtn</name></decl></parameter>,
                                      <parameter pos:start="260:39" pos:end="260:58"><decl pos:start="260:39" pos:end="260:58"><type pos:start="260:39" pos:end="260:58"><name pos:start="260:39" pos:end="260:41">int</name> <modifier pos:start="260:43" pos:end="260:43">*</modifier></type><name pos:start="260:44" pos:end="260:58">cacerts_rtn_len</name></decl></parameter>)</parameter_list>
<block pos:start="261:1" pos:end="325:1">{<block_content pos:start="262:5" pos:end="324:26">
    <decl_stmt pos:start="262:5" pos:end="262:24"><decl pos:start="262:5" pos:end="262:23"><type pos:start="262:5" pos:end="262:13"><name pos:start="262:5" pos:end="262:11">EST_CTX</name> <modifier pos:start="262:13" pos:end="262:13">*</modifier></type><name pos:start="262:14" pos:end="262:23">client_ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="263:5" pos:end="263:17"><decl pos:start="263:5" pos:end="263:16"><type pos:start="263:5" pos:end="263:13"><name pos:start="263:5" pos:end="263:13">EST_ERROR</name></type> <name pos:start="263:15" pos:end="263:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="264:5" pos:end="264:25"><decl pos:start="264:5" pos:end="264:24"><type pos:start="264:5" pos:end="264:7"><name pos:start="264:5" pos:end="264:7">int</name></type> <name pos:start="264:9" pos:end="264:24">rcvd_cacerts_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="265:5" pos:end="265:32"><decl pos:start="265:5" pos:end="265:31"><type pos:start="265:5" pos:end="265:19"><name pos:start="265:5" pos:end="265:12">unsigned</name> <name pos:start="265:14" pos:end="265:17">char</name> <modifier pos:start="265:19" pos:end="265:19">*</modifier></type><name pos:start="265:20" pos:end="265:31">rcvd_cacerts</name></decl>;</decl_stmt>

    <if_stmt pos:start="267:5" pos:end="270:5"><if pos:start="267:5" pos:end="270:5">if <condition pos:start="267:8" pos:end="267:20">(<expr pos:start="267:9" pos:end="267:19"><name pos:start="267:9" pos:end="267:11">ctx</name> <operator pos:start="267:13" pos:end="267:14">==</operator> <name pos:start="267:16" pos:end="267:19">NULL</name></expr>)</condition> <block pos:start="267:22" pos:end="270:5">{<block_content pos:start="268:9" pos:end="269:32">
        <expr_stmt pos:start="268:9" pos:end="268:58"><expr pos:start="268:9" pos:end="268:57"><call pos:start="268:9" pos:end="268:57"><name pos:start="268:9" pos:end="268:19">EST_LOG_ERR</name><argument_list pos:start="268:20" pos:end="268:57">(<argument pos:start="268:21" pos:end="268:42"><expr pos:start="268:21" pos:end="268:42"><literal type="string" pos:start="268:21" pos:end="268:42">"Ctx not passed to %s"</literal></expr></argument>, <argument pos:start="268:45" pos:end="268:56"><expr pos:start="268:45" pos:end="268:56"><name pos:start="268:45" pos:end="268:56">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="269:9" pos:end="269:32">return <expr pos:start="269:16" pos:end="269:31"><operator pos:start="269:16" pos:end="269:16">(</operator><name pos:start="269:17" pos:end="269:30">EST_ERR_NO_CTX</name><operator pos:start="269:31" pos:end="269:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="271:5" pos:end="274:5"><if pos:start="271:5" pos:end="274:5">if <condition pos:start="271:8" pos:end="271:55">(<expr pos:start="271:9" pos:end="271:54"><name pos:start="271:9" pos:end="271:19">cacerts_rtn</name> <operator pos:start="271:21" pos:end="271:22">==</operator> <name pos:start="271:24" pos:end="271:27">NULL</name> <operator pos:start="271:29" pos:end="271:30">||</operator> <name pos:start="271:32" pos:end="271:46">cacerts_rtn_len</name> <operator pos:start="271:48" pos:end="271:49">==</operator> <name pos:start="271:51" pos:end="271:54">NULL</name></expr>)</condition> <block pos:start="271:57" pos:end="274:5">{<block_content pos:start="272:9" pos:end="273:44">
        <expr_stmt pos:start="272:9" pos:end="272:58"><expr pos:start="272:9" pos:end="272:57"><call pos:start="272:9" pos:end="272:57"><name pos:start="272:9" pos:end="272:19">EST_LOG_ERR</name><argument_list pos:start="272:20" pos:end="272:57">(<argument pos:start="272:21" pos:end="272:42"><expr pos:start="272:21" pos:end="272:42"><literal type="string" pos:start="272:21" pos:end="272:42">"Ctx not passed to %s"</literal></expr></argument>, <argument pos:start="272:45" pos:end="272:56"><expr pos:start="272:45" pos:end="272:56"><name pos:start="272:45" pos:end="272:56">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="273:9" pos:end="273:44">return <expr pos:start="273:16" pos:end="273:43"><operator pos:start="273:16" pos:end="273:16">(</operator><name pos:start="273:17" pos:end="273:42">EST_ERR_INVALID_PARAMETERS</name><operator pos:start="273:43" pos:end="273:43">)</operator></expr>;</return>        
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="276:5" pos:end="276:24"><expr pos:start="276:5" pos:end="276:23"><operator pos:start="276:5" pos:end="276:5">*</operator><name pos:start="276:6" pos:end="276:16">cacerts_rtn</name> <operator pos:start="276:18" pos:end="276:18">=</operator> <name pos:start="276:20" pos:end="276:23">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="277:5" pos:end="277:25"><expr pos:start="277:5" pos:end="277:24"><operator pos:start="277:5" pos:end="277:5">*</operator><name pos:start="277:6" pos:end="277:20">cacerts_rtn_len</name> <operator pos:start="277:22" pos:end="277:22">=</operator> <literal type="number" pos:start="277:24" pos:end="277:24">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="279:5" pos:end="281:7">/*
     * Get the client context for this thread
     */</comment>
    <expr_stmt pos:start="282:5" pos:end="282:37"><expr pos:start="282:5" pos:end="282:36"><name pos:start="282:5" pos:end="282:14">client_ctx</name> <operator pos:start="282:16" pos:end="282:16">=</operator> <call pos:start="282:18" pos:end="282:36"><name pos:start="282:18" pos:end="282:31">get_client_ctx</name><argument_list pos:start="282:32" pos:end="282:36">(<argument pos:start="282:33" pos:end="282:35"><expr pos:start="282:33" pos:end="282:35"><name pos:start="282:33" pos:end="282:35">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="283:5" pos:end="286:5"><if pos:start="283:5" pos:end="286:5">if <condition pos:start="283:8" pos:end="283:20">(<expr pos:start="283:9" pos:end="283:19"><operator pos:start="283:9" pos:end="283:9">!</operator><name pos:start="283:10" pos:end="283:19">client_ctx</name></expr>)</condition> <block pos:start="283:22" pos:end="286:5">{<block_content pos:start="284:9" pos:end="285:32">
        <expr_stmt pos:start="284:9" pos:end="284:75"><expr pos:start="284:9" pos:end="284:74"><call pos:start="284:9" pos:end="284:74"><name pos:start="284:9" pos:end="284:19">EST_LOG_ERR</name><argument_list pos:start="284:20" pos:end="284:74">(<argument pos:start="284:21" pos:end="284:73"><expr pos:start="284:21" pos:end="284:73"><literal type="string" pos:start="284:21" pos:end="284:73">"Unable to obtain client context for proxy operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="285:9" pos:end="285:32">return <expr pos:start="285:16" pos:end="285:31"><operator pos:start="285:16" pos:end="285:16">(</operator><name pos:start="285:17" pos:end="285:30">EST_ERR_NO_CTX</name><operator pos:start="285:31" pos:end="285:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="288:5" pos:end="288:63"><expr pos:start="288:5" pos:end="288:62"><name pos:start="288:5" pos:end="288:6">rv</name> <operator pos:start="288:8" pos:end="288:8">=</operator> <call pos:start="288:10" pos:end="288:62"><name pos:start="288:10" pos:end="288:31">est_client_get_cacerts</name><argument_list pos:start="288:32" pos:end="288:62">(<argument pos:start="288:33" pos:end="288:42"><expr pos:start="288:33" pos:end="288:42"><name pos:start="288:33" pos:end="288:42">client_ctx</name></expr></argument>, <argument pos:start="288:45" pos:end="288:61"><expr pos:start="288:45" pos:end="288:61"><operator pos:start="288:45" pos:end="288:45">&amp;</operator><name pos:start="288:46" pos:end="288:61">rcvd_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="289:5" pos:end="293:5"><if pos:start="289:5" pos:end="293:5">if <condition pos:start="289:8" pos:end="289:27">(<expr pos:start="289:9" pos:end="289:26"><name pos:start="289:9" pos:end="289:10">rv</name> <operator pos:start="289:12" pos:end="289:13">!=</operator> <name pos:start="289:15" pos:end="289:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="289:29" pos:end="293:5">{<block_content pos:start="290:9" pos:end="292:20">
        <expr_stmt pos:start="290:9" pos:end="291:44"><expr pos:start="290:9" pos:end="291:43"><call pos:start="290:9" pos:end="291:43"><name pos:start="290:9" pos:end="290:19">EST_LOG_ERR</name><argument_list pos:start="290:20" pos:end="291:43">(<argument pos:start="290:21" pos:end="290:78"><expr pos:start="290:21" pos:end="290:78"><literal type="string" pos:start="290:21" pos:end="290:78">"Unable to retrieve CA Certs from upstream server RC = %s"</literal></expr></argument>,
                    <argument pos:start="291:21" pos:end="291:42"><expr pos:start="291:21" pos:end="291:42"><call pos:start="291:21" pos:end="291:42"><name pos:start="291:21" pos:end="291:38">EST_ERR_NUM_TO_STR</name><argument_list pos:start="291:39" pos:end="291:42">(<argument pos:start="291:40" pos:end="291:41"><expr pos:start="291:40" pos:end="291:41"><name pos:start="291:40" pos:end="291:41">rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="292:9" pos:end="292:20">return <expr pos:start="292:16" pos:end="292:19"><operator pos:start="292:16" pos:end="292:16">(</operator><name pos:start="292:17" pos:end="292:18">rv</name><operator pos:start="292:19" pos:end="292:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="295:5" pos:end="298:7">/*
     * Allocate a buffer to retrieve the CA certs
     * and get them copied in
     */</comment>
    <expr_stmt pos:start="299:5" pos:end="299:44"><expr pos:start="299:5" pos:end="299:43"><name pos:start="299:5" pos:end="299:16">rcvd_cacerts</name> <operator pos:start="299:18" pos:end="299:18">=</operator> <call pos:start="299:20" pos:end="299:43"><name pos:start="299:20" pos:end="299:25">malloc</name><argument_list pos:start="299:26" pos:end="299:43">(<argument pos:start="299:27" pos:end="299:42"><expr pos:start="299:27" pos:end="299:42"><name pos:start="299:27" pos:end="299:42">rcvd_cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="300:5" pos:end="303:5"><if pos:start="300:5" pos:end="303:5">if <condition pos:start="300:8" pos:end="300:29">(<expr pos:start="300:9" pos:end="300:28"><name pos:start="300:9" pos:end="300:20">rcvd_cacerts</name> <operator pos:start="300:22" pos:end="300:23">==</operator> <name pos:start="300:25" pos:end="300:28">NULL</name></expr>)</condition> <block pos:start="300:31" pos:end="303:5">{<block_content pos:start="301:9" pos:end="302:32">
        <expr_stmt pos:start="301:9" pos:end="301:80"><expr pos:start="301:9" pos:end="301:79"><call pos:start="301:9" pos:end="301:79"><name pos:start="301:9" pos:end="301:19">EST_LOG_ERR</name><argument_list pos:start="301:20" pos:end="301:79">(<argument pos:start="301:21" pos:end="301:78"><expr pos:start="301:21" pos:end="301:78"><literal type="string" pos:start="301:21" pos:end="301:78">"Unable to malloc buffer for cacerts received from server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="302:9" pos:end="302:32">return <expr pos:start="302:16" pos:end="302:31"><operator pos:start="302:16" pos:end="302:16">(</operator><name pos:start="302:17" pos:end="302:30">EST_ERR_MALLOC</name><operator pos:start="302:31" pos:end="302:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="305:5" pos:end="305:59"><expr pos:start="305:5" pos:end="305:58"><name pos:start="305:5" pos:end="305:6">rv</name> <operator pos:start="305:8" pos:end="305:8">=</operator> <call pos:start="305:10" pos:end="305:58"><name pos:start="305:10" pos:end="305:32">est_client_copy_cacerts</name><argument_list pos:start="305:33" pos:end="305:58">(<argument pos:start="305:34" pos:end="305:43"><expr pos:start="305:34" pos:end="305:43"><name pos:start="305:34" pos:end="305:43">client_ctx</name></expr></argument>, <argument pos:start="305:46" pos:end="305:57"><expr pos:start="305:46" pos:end="305:57"><name pos:start="305:46" pos:end="305:57">rcvd_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="306:5" pos:end="311:5"><if pos:start="306:5" pos:end="311:5">if <condition pos:start="306:8" pos:end="306:27">(<expr pos:start="306:9" pos:end="306:26"><name pos:start="306:9" pos:end="306:10">rv</name> <operator pos:start="306:12" pos:end="306:13">!=</operator> <name pos:start="306:15" pos:end="306:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="306:29" pos:end="311:5">{<block_content pos:start="307:9" pos:end="310:20">
        <expr_stmt pos:start="307:9" pos:end="308:44"><expr pos:start="307:9" pos:end="308:43"><call pos:start="307:9" pos:end="308:43"><name pos:start="307:9" pos:end="307:19">EST_LOG_ERR</name><argument_list pos:start="307:20" pos:end="308:43">(<argument pos:start="307:21" pos:end="307:74"><expr pos:start="307:21" pos:end="307:74"><literal type="string" pos:start="307:21" pos:end="307:74">"Unable to copy CA Certs from upstream server RC = %s"</literal></expr></argument>,
                    <argument pos:start="308:21" pos:end="308:42"><expr pos:start="308:21" pos:end="308:42"><call pos:start="308:21" pos:end="308:42"><name pos:start="308:21" pos:end="308:38">EST_ERR_NUM_TO_STR</name><argument_list pos:start="308:39" pos:end="308:42">(<argument pos:start="308:40" pos:end="308:41"><expr pos:start="308:40" pos:end="308:41"><name pos:start="308:40" pos:end="308:41">rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="309:9" pos:end="309:27"><expr pos:start="309:9" pos:end="309:26"><call pos:start="309:9" pos:end="309:26"><name pos:start="309:9" pos:end="309:12">free</name><argument_list pos:start="309:13" pos:end="309:26">(<argument pos:start="309:14" pos:end="309:25"><expr pos:start="309:14" pos:end="309:25"><name pos:start="309:14" pos:end="309:25">rcvd_cacerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="310:9" pos:end="310:20">return <expr pos:start="310:16" pos:end="310:19"><operator pos:start="310:16" pos:end="310:16">(</operator><name pos:start="310:17" pos:end="310:18">rv</name><operator pos:start="310:19" pos:end="310:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="313:5" pos:end="319:7">/*
     * The retrieving of the CA certs through the normal client
     * interface causes the client to go back into an uninitialized state.
     * In this case though, we're getting it just for passing it back
     * to the downstream clients, so we're going to put this client
     * context back into the initialized state
     */</comment>
    <expr_stmt pos:start="320:5" pos:end="320:43"><expr pos:start="320:5" pos:end="320:42"><name pos:start="320:5" pos:end="320:38"><name pos:start="320:5" pos:end="320:14">client_ctx</name><operator pos:start="320:15" pos:end="320:16">-&gt;</operator><name pos:start="320:17" pos:end="320:38">est_client_initialized</name></name> <operator pos:start="320:40" pos:end="320:40">=</operator> <literal type="number" pos:start="320:42" pos:end="320:42">1</literal></expr>;</expr_stmt>
    
    <expr_stmt pos:start="322:5" pos:end="322:32"><expr pos:start="322:5" pos:end="322:31"><operator pos:start="322:5" pos:end="322:5">*</operator><name pos:start="322:6" pos:end="322:16">cacerts_rtn</name> <operator pos:start="322:18" pos:end="322:18">=</operator> <name pos:start="322:20" pos:end="322:31">rcvd_cacerts</name></expr>;</expr_stmt>
    <expr_stmt pos:start="323:5" pos:end="323:40"><expr pos:start="323:5" pos:end="323:39"><operator pos:start="323:5" pos:end="323:5">*</operator><name pos:start="323:6" pos:end="323:20">cacerts_rtn_len</name> <operator pos:start="323:22" pos:end="323:22">=</operator> <name pos:start="323:24" pos:end="323:39">rcvd_cacerts_len</name></expr>;</expr_stmt>
    <return pos:start="324:5" pos:end="324:26">return <expr pos:start="324:12" pos:end="324:25"><operator pos:start="324:12" pos:end="324:12">(</operator><name pos:start="324:13" pos:end="324:24">EST_ERR_NONE</name><operator pos:start="324:25" pos:end="324:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="326:1" pos:end="332:3">/*
 * This routine will connect to the EST server and attempt
 * to enroll the CSR in the *pkcs10 buffer. Upon success
 * it will return the X509 cert in the *pkcs7 buffer.  The
 * length of the returned cert will be in *pkcs7_len.  
 * The *pkcs7 buffer should be allocated by the caller.
 */</comment>
<function pos:start="333:1" pos:end="360:1"><type pos:start="333:1" pos:end="333:16"><specifier pos:start="333:1" pos:end="333:6">static</specifier> <name pos:start="333:8" pos:end="333:16">EST_ERROR</name></type> <name pos:start="333:18" pos:end="333:46">est_proxy_send_enroll_request</name> <parameter_list pos:start="333:48" pos:end="335:77">(<parameter pos:start="333:49" pos:end="333:65"><decl pos:start="333:49" pos:end="333:65"><type pos:start="333:49" pos:end="333:65"><name pos:start="333:49" pos:end="333:55">EST_CTX</name> <modifier pos:start="333:57" pos:end="333:57">*</modifier></type><name pos:start="333:58" pos:end="333:65">clnt_ctx</name></decl></parameter>, 
	                                        <parameter pos:start="334:49" pos:end="334:63"><decl pos:start="334:49" pos:end="334:63"><type pos:start="334:49" pos:end="334:63"><name pos:start="334:49" pos:end="334:55">BUF_MEM</name> <modifier pos:start="334:57" pos:end="334:57">*</modifier></type><name pos:start="334:58" pos:end="334:63">pkcs10</name></decl></parameter>, <parameter pos:start="334:66" pos:end="334:85"><decl pos:start="334:66" pos:end="334:85"><type pos:start="334:66" pos:end="334:85"><name pos:start="334:66" pos:end="334:73">unsigned</name> <name pos:start="334:75" pos:end="334:78">char</name> <modifier pos:start="334:80" pos:end="334:80">*</modifier></type><name pos:start="334:81" pos:end="334:85">pkcs7</name></decl></parameter>,
						<parameter pos:start="335:49" pos:end="335:62"><decl pos:start="335:49" pos:end="335:62"><type pos:start="335:49" pos:end="335:62"><name pos:start="335:49" pos:end="335:51">int</name> <modifier pos:start="335:53" pos:end="335:53">*</modifier></type><name pos:start="335:54" pos:end="335:62">pkcs7_len</name></decl></parameter>, <parameter pos:start="335:65" pos:end="335:76"><decl pos:start="335:65" pos:end="335:76"><type pos:start="335:65" pos:end="335:76"><name pos:start="335:65" pos:end="335:67">int</name></type> <name pos:start="335:69" pos:end="335:76">reenroll</name></decl></parameter>)</parameter_list>
<block pos:start="336:1" pos:end="360:1">{<block_content pos:start="337:5" pos:end="359:16">
    <decl_stmt pos:start="337:5" pos:end="337:17"><decl pos:start="337:5" pos:end="337:16"><type pos:start="337:5" pos:end="337:13"><name pos:start="337:5" pos:end="337:13">EST_ERROR</name></type> <name pos:start="337:15" pos:end="337:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="338:5" pos:end="338:20"><decl pos:start="338:5" pos:end="338:19"><type pos:start="338:5" pos:end="338:9"><name pos:start="338:5" pos:end="338:7">SSL</name> <modifier pos:start="338:9" pos:end="338:9">*</modifier></type><name pos:start="338:10" pos:end="338:19">ssl_client</name></decl>;</decl_stmt>

    <comment type="block" pos:start="340:5" pos:end="342:7">/*
     * Connect to the server
     */</comment>
    <expr_stmt pos:start="343:5" pos:end="343:51"><expr pos:start="343:5" pos:end="343:50"><name pos:start="343:5" pos:end="343:6">rv</name> <operator pos:start="343:8" pos:end="343:8">=</operator> <call pos:start="343:10" pos:end="343:50"><name pos:start="343:10" pos:end="343:27">est_client_connect</name><argument_list pos:start="343:28" pos:end="343:50">(<argument pos:start="343:29" pos:end="343:36"><expr pos:start="343:29" pos:end="343:36"><name pos:start="343:29" pos:end="343:36">clnt_ctx</name></expr></argument>, <argument pos:start="343:39" pos:end="343:49"><expr pos:start="343:39" pos:end="343:49"><operator pos:start="343:39" pos:end="343:39">&amp;</operator><name pos:start="343:40" pos:end="343:49">ssl_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="344:5" pos:end="346:5"><if pos:start="344:5" pos:end="346:5">if <condition pos:start="344:8" pos:end="344:27">(<expr pos:start="344:9" pos:end="344:26"><name pos:start="344:9" pos:end="344:10">rv</name> <operator pos:start="344:12" pos:end="344:13">!=</operator> <name pos:start="344:15" pos:end="344:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="344:29" pos:end="346:5">{<block_content pos:start="345:9" pos:end="345:20">
        <return pos:start="345:9" pos:end="345:20">return <expr pos:start="345:16" pos:end="345:19"><operator pos:start="345:16" pos:end="345:16">(</operator><name pos:start="345:17" pos:end="345:18">rv</name><operator pos:start="345:19" pos:end="345:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="348:5" pos:end="350:7">/*
     * Send the enroll request
     */</comment>
    <expr_stmt pos:start="351:5" pos:end="352:76"><expr pos:start="351:5" pos:end="352:75"><name pos:start="351:5" pos:end="351:6">rv</name> <operator pos:start="351:8" pos:end="351:8">=</operator> <call pos:start="351:10" pos:end="352:75"><name pos:start="351:10" pos:end="351:39">est_client_send_enroll_request</name><argument_list pos:start="351:40" pos:end="352:75">(<argument pos:start="351:41" pos:end="351:48"><expr pos:start="351:41" pos:end="351:48"><name pos:start="351:41" pos:end="351:48">clnt_ctx</name></expr></argument>, <argument pos:start="351:51" pos:end="351:60"><expr pos:start="351:51" pos:end="351:60"><name pos:start="351:51" pos:end="351:60">ssl_client</name></expr></argument>,
                                        <argument pos:start="352:41" pos:end="352:46"><expr pos:start="352:41" pos:end="352:46"><name pos:start="352:41" pos:end="352:46">pkcs10</name></expr></argument>, <argument pos:start="352:49" pos:end="352:53"><expr pos:start="352:49" pos:end="352:53"><name pos:start="352:49" pos:end="352:53">pkcs7</name></expr></argument>, <argument pos:start="352:56" pos:end="352:64"><expr pos:start="352:56" pos:end="352:64"><name pos:start="352:56" pos:end="352:64">pkcs7_len</name></expr></argument>, <argument pos:start="352:67" pos:end="352:74"><expr pos:start="352:67" pos:end="352:74"><name pos:start="352:67" pos:end="352:74">reenroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="354:5" pos:end="356:7">/*
     * Disconnect from the server
     */</comment>
    <expr_stmt pos:start="357:5" pos:end="357:49"><expr pos:start="357:5" pos:end="357:48"><call pos:start="357:5" pos:end="357:48"><name pos:start="357:5" pos:end="357:25">est_client_disconnect</name><argument_list pos:start="357:26" pos:end="357:48">(<argument pos:start="357:27" pos:end="357:34"><expr pos:start="357:27" pos:end="357:34"><name pos:start="357:27" pos:end="357:34">clnt_ctx</name></expr></argument>, <argument pos:start="357:37" pos:end="357:47"><expr pos:start="357:37" pos:end="357:47"><operator pos:start="357:37" pos:end="357:37">&amp;</operator><name pos:start="357:38" pos:end="357:47">ssl_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="359:5" pos:end="359:16">return <expr pos:start="359:12" pos:end="359:15"><operator pos:start="359:12" pos:end="359:12">(</operator><name pos:start="359:13" pos:end="359:14">rv</name><operator pos:start="359:15" pos:end="359:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="361:1" pos:end="367:3">/*
 * This routine will connect to the EST server and attempt
 * to enroll the CSR in the *pkcs10 buffer. Upon success
 * it will return the X509 cert in the *pkcs7 buffer.  The
 * length of the returned cert will be in *pkcs7_len.  
 * The *pkcs7 buffer should be allocated by the caller.
 */</comment>
<function pos:start="368:1" pos:end="382:1"><type pos:start="368:1" pos:end="368:16"><specifier pos:start="368:1" pos:end="368:6">static</specifier> <name pos:start="368:8" pos:end="368:16">EST_ERROR</name></type> <name pos:start="368:18" pos:end="368:43">est_proxy_set_path_segment</name> <parameter_list pos:start="368:45" pos:end="369:64">(<parameter pos:start="368:46" pos:end="368:64"><decl pos:start="368:46" pos:end="368:64"><type pos:start="368:46" pos:end="368:64"><name pos:start="368:46" pos:end="368:52">EST_CTX</name> <modifier pos:start="368:54" pos:end="368:54">*</modifier></type><name pos:start="368:55" pos:end="368:64">client_ctx</name></decl></parameter>,
                                             <parameter pos:start="369:46" pos:end="369:63"><decl pos:start="369:46" pos:end="369:63"><type pos:start="369:46" pos:end="369:63"><name pos:start="369:46" pos:end="369:49">char</name> <modifier pos:start="369:51" pos:end="369:51">*</modifier></type><name pos:start="369:52" pos:end="369:63">path_segment</name></decl></parameter>)</parameter_list>
<block pos:start="370:1" pos:end="382:1">{<block_content pos:start="371:5" pos:end="381:24">
    <decl_stmt pos:start="371:5" pos:end="371:25"><decl pos:start="371:5" pos:end="371:24"><type pos:start="371:5" pos:end="371:7"><name pos:start="371:5" pos:end="371:7">int</name></type> <name pos:start="371:9" pos:end="371:24">path_segment_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="372:5" pos:end="372:17"><decl pos:start="372:5" pos:end="372:16"><type pos:start="372:5" pos:end="372:13"><name pos:start="372:5" pos:end="372:13">EST_ERROR</name></type> <name pos:start="372:15" pos:end="372:16">rc</name></decl>;</decl_stmt>

    <expr_stmt pos:start="374:5" pos:end="374:73"><expr pos:start="374:5" pos:end="374:72"><name pos:start="374:5" pos:end="374:20">path_segment_len</name> <operator pos:start="374:22" pos:end="374:22">=</operator> <call pos:start="374:24" pos:end="374:72"><name pos:start="374:24" pos:end="374:32">strnlen_s</name><argument_list pos:start="374:33" pos:end="374:72">(<argument pos:start="374:34" pos:end="374:45"><expr pos:start="374:34" pos:end="374:45"><name pos:start="374:34" pos:end="374:45">path_segment</name></expr></argument>, <argument pos:start="374:48" pos:end="374:71"><expr pos:start="374:48" pos:end="374:71"><name pos:start="374:48" pos:end="374:71">EST_MAX_PATH_SEGMENT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt pos:start="376:5" pos:end="376:76"><expr pos:start="376:5" pos:end="376:75"><name pos:start="376:5" pos:end="376:6">rc</name> <operator pos:start="376:8" pos:end="376:8">=</operator> <call pos:start="376:10" pos:end="376:75"><name pos:start="376:10" pos:end="376:31">est_store_path_segment</name><argument_list pos:start="376:32" pos:end="376:75">(<argument pos:start="376:33" pos:end="376:42"><expr pos:start="376:33" pos:end="376:42"><name pos:start="376:33" pos:end="376:42">client_ctx</name></expr></argument>, <argument pos:start="376:45" pos:end="376:56"><expr pos:start="376:45" pos:end="376:56"><name pos:start="376:45" pos:end="376:56">path_segment</name></expr></argument>, <argument pos:start="376:59" pos:end="376:74"><expr pos:start="376:59" pos:end="376:74"><name pos:start="376:59" pos:end="376:74">path_segment_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="377:5" pos:end="380:5"><if pos:start="377:5" pos:end="380:5">if <condition pos:start="377:8" pos:end="377:27">(<expr pos:start="377:9" pos:end="377:26"><name pos:start="377:9" pos:end="377:10">rc</name> <operator pos:start="377:12" pos:end="377:13">!=</operator> <name pos:start="377:15" pos:end="377:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="377:29" pos:end="380:5">{<block_content pos:start="378:9" pos:end="379:20">
        <expr_stmt pos:start="378:9" pos:end="378:57"><expr pos:start="378:9" pos:end="378:56"><call pos:start="378:9" pos:end="378:56"><name pos:start="378:9" pos:end="378:19">EST_LOG_ERR</name><argument_list pos:start="378:20" pos:end="378:56">(<argument pos:start="378:21" pos:end="378:55"><expr pos:start="378:21" pos:end="378:55"><literal type="string" pos:start="378:21" pos:end="378:55">"Failed to store URI path segment."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="379:9" pos:end="379:20">return <expr pos:start="379:16" pos:end="379:19"><operator pos:start="379:16" pos:end="379:16">(</operator><name pos:start="379:17" pos:end="379:18">rc</name><operator pos:start="379:19" pos:end="379:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return pos:start="381:5" pos:end="381:24">return <expr pos:start="381:12" pos:end="381:23"><name pos:start="381:12" pos:end="381:23">EST_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="383:1" pos:end="390:3">/*
 * This function is used by the server side of the EST proxy to respond to an
 * incoming Simple Enroll request.  This function is similar to the Client API
 * function, est_client_enroll_req(), except it bypasses some things that are
 * not done when functioning as a proxy, such as signing the CSR, not
 * inserting the TLS unique id and instead including the id-kp-cmcRA usage
 * extension.
 */</comment>
<function pos:start="391:1" pos:end="552:1"><type pos:start="391:1" pos:end="391:16"><specifier pos:start="391:1" pos:end="391:6">static</specifier> <name pos:start="391:8" pos:end="391:16">EST_ERROR</name></type> <name pos:start="391:18" pos:end="391:47">est_proxy_handle_simple_enroll</name> <parameter_list pos:start="391:49" pos:end="394:78">(<parameter pos:start="391:50" pos:end="391:61"><decl pos:start="391:50" pos:end="391:61"><type pos:start="391:50" pos:end="391:61"><name pos:start="391:50" pos:end="391:56">EST_CTX</name> <modifier pos:start="391:58" pos:end="391:58">*</modifier></type><name pos:start="391:59" pos:end="391:61">ctx</name></decl></parameter>, <parameter pos:start="391:64" pos:end="391:77"><decl pos:start="391:64" pos:end="391:77"><type pos:start="391:64" pos:end="391:77"><name pos:start="391:64" pos:end="391:67">void</name> <modifier pos:start="391:69" pos:end="391:69">*</modifier></type><name pos:start="391:70" pos:end="391:77">http_ctx</name></decl></parameter>,
                                                 <parameter pos:start="392:50" pos:end="392:57"><decl pos:start="392:50" pos:end="392:57"><type pos:start="392:50" pos:end="392:57"><name pos:start="392:50" pos:end="392:52">SSL</name> <modifier pos:start="392:54" pos:end="392:54">*</modifier></type><name pos:start="392:55" pos:end="392:57">ssl</name></decl></parameter>, <parameter pos:start="392:60" pos:end="392:73"><decl pos:start="392:60" pos:end="392:73"><type pos:start="392:60" pos:end="392:73"><specifier pos:start="392:60" pos:end="392:64">const</specifier> <name pos:start="392:66" pos:end="392:69">char</name> <modifier pos:start="392:71" pos:end="392:71">*</modifier></type><name pos:start="392:72" pos:end="392:73">ct</name></decl></parameter>,
                                                 <parameter pos:start="393:50" pos:end="393:59"><decl pos:start="393:50" pos:end="393:59"><type pos:start="393:50" pos:end="393:59"><name pos:start="393:50" pos:end="393:53">char</name> <modifier pos:start="393:55" pos:end="393:55">*</modifier></type><name pos:start="393:56" pos:end="393:59">body</name></decl></parameter>, <parameter pos:start="393:62" pos:end="393:73"><decl pos:start="393:62" pos:end="393:73"><type pos:start="393:62" pos:end="393:73"><name pos:start="393:62" pos:end="393:64">int</name></type> <name pos:start="393:66" pos:end="393:73">body_len</name></decl></parameter>,
					         <parameter pos:start="394:50" pos:end="394:63"><decl pos:start="394:50" pos:end="394:63"><type pos:start="394:50" pos:end="394:63"><name pos:start="394:50" pos:end="394:53">char</name> <modifier pos:start="394:55" pos:end="394:55">*</modifier></type><name pos:start="394:56" pos:end="394:63">path_seg</name></decl></parameter>, <parameter pos:start="394:66" pos:end="394:77"><decl pos:start="394:66" pos:end="394:77"><type pos:start="394:66" pos:end="394:77"><name pos:start="394:66" pos:end="394:68">int</name></type> <name pos:start="394:70" pos:end="394:77">reenroll</name></decl></parameter>)</parameter_list>
<block pos:start="395:1" pos:end="552:1">{<block_content pos:start="396:5" pos:end="551:16">
    <decl_stmt pos:start="396:5" pos:end="396:17"><decl pos:start="396:5" pos:end="396:16"><type pos:start="396:5" pos:end="396:13"><name pos:start="396:5" pos:end="396:13">EST_ERROR</name></type> <name pos:start="396:15" pos:end="396:16">rv</name></decl>;</decl_stmt>
    <decl_stmt pos:start="397:5" pos:end="397:20"><decl pos:start="397:5" pos:end="397:19"><type pos:start="397:5" pos:end="397:13"><name pos:start="397:5" pos:end="397:11">BUF_MEM</name> <modifier pos:start="397:13" pos:end="397:13">*</modifier></type><name pos:start="397:14" pos:end="397:19">pkcs10</name></decl>;</decl_stmt>
    <decl_stmt pos:start="398:5" pos:end="398:25"><decl pos:start="398:5" pos:end="398:24"><type pos:start="398:5" pos:end="398:19"><name pos:start="398:5" pos:end="398:12">unsigned</name> <name pos:start="398:14" pos:end="398:17">char</name> <modifier pos:start="398:19" pos:end="398:19">*</modifier></type><name pos:start="398:20" pos:end="398:24">pkcs7</name></decl>;</decl_stmt>
    <decl_stmt pos:start="399:5" pos:end="399:22"><decl pos:start="399:5" pos:end="399:21"><type pos:start="399:5" pos:end="399:7"><name pos:start="399:5" pos:end="399:7">int</name></type> <name pos:start="399:9" pos:end="399:17">pkcs7_len</name> <init pos:start="399:19" pos:end="399:21">= <expr pos:start="399:21" pos:end="399:21"><literal type="number" pos:start="399:21" pos:end="399:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="400:5" pos:end="400:13"><decl pos:start="400:5" pos:end="400:12"><type pos:start="400:5" pos:end="400:7"><name pos:start="400:5" pos:end="400:7">int</name></type> <name pos:start="400:9" pos:end="400:12">diff</name></decl>;</decl_stmt>
    <decl_stmt pos:start="401:5" pos:end="401:25"><decl pos:start="401:5" pos:end="401:24"><type pos:start="401:5" pos:end="401:14"><name pos:start="401:5" pos:end="401:12">X509_REQ</name> <modifier pos:start="401:14" pos:end="401:14">*</modifier></type><name pos:start="401:15" pos:end="401:17">csr</name> <init pos:start="401:19" pos:end="401:24">= <expr pos:start="401:21" pos:end="401:24"><name pos:start="401:21" pos:end="401:24">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="402:5" pos:end="402:24"><decl pos:start="402:5" pos:end="402:23"><type pos:start="402:5" pos:end="402:13"><name pos:start="402:5" pos:end="402:11">EST_CTX</name> <modifier pos:start="402:13" pos:end="402:13">*</modifier></type><name pos:start="402:14" pos:end="402:23">client_ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="403:5" pos:end="403:21"><decl pos:start="403:5" pos:end="403:20"><type pos:start="403:5" pos:end="403:11"><name pos:start="403:5" pos:end="403:11">errno_t</name></type> <name pos:start="403:13" pos:end="403:20">safec_rc</name></decl>;</decl_stmt>
     
    <comment type="block" pos:start="405:5" pos:end="407:7">/*
     * Make sure the client has sent us a PKCS10 CSR request
     */</comment>

    <expr_stmt pos:start="409:5" pos:end="410:45"><expr pos:start="409:5" pos:end="410:44"><name pos:start="409:5" pos:end="409:12">safec_rc</name> <operator pos:start="409:14" pos:end="409:14">=</operator> <call pos:start="409:16" pos:end="410:44"><name pos:start="409:16" pos:end="409:23">memcmp_s</name><argument_list pos:start="409:24" pos:end="410:44">(<argument pos:start="409:25" pos:end="409:26"><expr pos:start="409:25" pos:end="409:26"><name pos:start="409:25" pos:end="409:26">ct</name></expr></argument>, <argument pos:start="409:29" pos:end="409:56"><expr pos:start="409:29" pos:end="409:56"><sizeof pos:start="409:29" pos:end="409:56">sizeof<argument_list pos:start="409:35" pos:end="409:56">(<argument pos:start="409:36" pos:end="409:55"><expr pos:start="409:36" pos:end="409:55"><literal type="string" pos:start="409:36" pos:end="409:55">"application/pkcs10"</literal></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="409:59" pos:end="409:78"><expr pos:start="409:59" pos:end="409:78"><literal type="string" pos:start="409:59" pos:end="409:78">"application/pkcs10"</literal></expr></argument>,
        <argument pos:start="410:9" pos:end="410:36"><expr pos:start="410:9" pos:end="410:36"><sizeof pos:start="410:9" pos:end="410:36">sizeof<argument_list pos:start="410:15" pos:end="410:36">(<argument pos:start="410:16" pos:end="410:35"><expr pos:start="410:16" pos:end="410:35"><literal type="string" pos:start="410:16" pos:end="410:35">"application/pkcs10"</literal></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="410:39" pos:end="410:43"><expr pos:start="410:39" pos:end="410:43"><operator pos:start="410:39" pos:end="410:39">&amp;</operator><name pos:start="410:40" pos:end="410:43">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="412:5" pos:end="414:5"><if pos:start="412:5" pos:end="414:5">if <condition pos:start="412:8" pos:end="412:24">(<expr pos:start="412:9" pos:end="412:23"><name pos:start="412:9" pos:end="412:16">safec_rc</name> <operator pos:start="412:18" pos:end="412:19">!=</operator> <name pos:start="412:21" pos:end="412:23">EOK</name></expr>)</condition> <block pos:start="412:26" pos:end="414:5">{<block_content pos:start="413:9" pos:end="413:57">
        <expr_stmt pos:start="413:9" pos:end="413:57"><expr pos:start="413:9" pos:end="413:56"><call pos:start="413:9" pos:end="413:56"><name pos:start="413:9" pos:end="413:20">EST_LOG_INFO</name><argument_list pos:start="413:21" pos:end="413:56">(<argument pos:start="413:22" pos:end="413:45"><expr pos:start="413:22" pos:end="413:45"><literal type="string" pos:start="413:22" pos:end="413:45">"memcmp_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="413:48" pos:end="413:55"><expr pos:start="413:48" pos:end="413:55"><name pos:start="413:48" pos:end="413:55">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="416:5" pos:end="418:5"><if pos:start="416:5" pos:end="418:5">if <condition pos:start="416:8" pos:end="416:13">(<expr pos:start="416:9" pos:end="416:12"><name pos:start="416:9" pos:end="416:12">diff</name></expr>)</condition> <block pos:start="416:15" pos:end="418:5">{<block_content pos:start="417:9" pos:end="417:42">
        <return pos:start="417:9" pos:end="417:42">return <expr pos:start="417:16" pos:end="417:41"><operator pos:start="417:16" pos:end="417:16">(</operator><name pos:start="417:17" pos:end="417:40">EST_ERR_BAD_CONTENT_TYPE</name><operator pos:start="417:41" pos:end="417:41">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="420:5" pos:end="422:7">/*
     * Authenticate the client
     */</comment>
    <switch pos:start="423:5" pos:end="435:5">switch <condition pos:start="423:12" pos:end="423:68">(<expr pos:start="423:13" pos:end="423:67"><call pos:start="423:13" pos:end="423:67"><name pos:start="423:13" pos:end="423:27">est_enroll_auth</name><argument_list pos:start="423:28" pos:end="423:67">(<argument pos:start="423:29" pos:end="423:31"><expr pos:start="423:29" pos:end="423:31"><name pos:start="423:29" pos:end="423:31">ctx</name></expr></argument>, <argument pos:start="423:34" pos:end="423:41"><expr pos:start="423:34" pos:end="423:41"><name pos:start="423:34" pos:end="423:41">http_ctx</name></expr></argument>, <argument pos:start="423:44" pos:end="423:46"><expr pos:start="423:44" pos:end="423:46"><name pos:start="423:44" pos:end="423:46">ssl</name></expr></argument>, <argument pos:start="423:49" pos:end="423:56"><expr pos:start="423:49" pos:end="423:56"><name pos:start="423:49" pos:end="423:56">path_seg</name></expr></argument>, <argument pos:start="423:59" pos:end="423:66"><expr pos:start="423:59" pos:end="423:66"><name pos:start="423:59" pos:end="423:66">reenroll</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="423:70" pos:end="435:5">{<block_content pos:start="424:5" pos:end="434:14">
    <case pos:start="424:5" pos:end="424:23">case <expr pos:start="424:10" pos:end="424:22"><name pos:start="424:10" pos:end="424:22">EST_HTTP_AUTH</name></expr>:</case>
    <case pos:start="425:5" pos:end="425:22">case <expr pos:start="425:10" pos:end="425:21"><name pos:start="425:10" pos:end="425:21">EST_SRP_AUTH</name></expr>:</case>
    <case pos:start="426:5" pos:end="426:23">case <expr pos:start="426:10" pos:end="426:22"><name pos:start="426:10" pos:end="426:22">EST_CERT_AUTH</name></expr>:</case>
        <break pos:start="427:9" pos:end="427:14">break;</break>
    <case pos:start="428:5" pos:end="428:31">case <expr pos:start="428:10" pos:end="428:30"><name pos:start="428:10" pos:end="428:30">EST_HTTP_AUTH_PENDING</name></expr>:</case>
        <return pos:start="429:9" pos:end="429:38">return <expr pos:start="429:16" pos:end="429:37"><operator pos:start="429:16" pos:end="429:16">(</operator><name pos:start="429:17" pos:end="429:36">EST_ERR_AUTH_PENDING</name><operator pos:start="429:37" pos:end="429:37">)</operator></expr>;</return>
        <break pos:start="430:9" pos:end="430:14">break;</break>
    <case pos:start="431:5" pos:end="431:26">case <expr pos:start="431:10" pos:end="431:25"><name pos:start="431:10" pos:end="431:25">EST_UNAUTHORIZED</name></expr>:</case>
    <default pos:start="432:5" pos:end="432:12">default:</default>
        <return pos:start="433:9" pos:end="433:35">return <expr pos:start="433:16" pos:end="433:34"><operator pos:start="433:16" pos:end="433:16">(</operator><name pos:start="433:17" pos:end="433:33">EST_ERR_AUTH_FAIL</name><operator pos:start="433:34" pos:end="433:34">)</operator></expr>;</return>
        <break pos:start="434:9" pos:end="434:14">break;</break>
    </block_content>}</block></switch>

    <comment type="block" pos:start="437:5" pos:end="439:7">/*
     * Parse the PKCS10 CSR from the client
     */</comment>
    <expr_stmt pos:start="440:5" pos:end="440:63"><expr pos:start="440:5" pos:end="440:62"><name pos:start="440:5" pos:end="440:7">csr</name> <operator pos:start="440:9" pos:end="440:9">=</operator> <call pos:start="440:11" pos:end="440:62"><name pos:start="440:11" pos:end="440:30">est_server_parse_csr</name><argument_list pos:start="440:31" pos:end="440:62">(<argument pos:start="440:32" pos:end="440:51"><expr pos:start="440:32" pos:end="440:51"><operator pos:start="440:32" pos:end="440:32">(</operator><name pos:start="440:33" pos:end="440:40">unsigned</name> <name pos:start="440:42" pos:end="440:45">char</name><operator pos:start="440:46" pos:end="440:46">*</operator><operator pos:start="440:47" pos:end="440:47">)</operator><name pos:start="440:48" pos:end="440:51">body</name></expr></argument>, <argument pos:start="440:54" pos:end="440:61"><expr pos:start="440:54" pos:end="440:61"><name pos:start="440:54" pos:end="440:61">body_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="441:5" pos:end="444:5"><if pos:start="441:5" pos:end="444:5">if <condition pos:start="441:8" pos:end="441:13">(<expr pos:start="441:9" pos:end="441:12"><operator pos:start="441:9" pos:end="441:9">!</operator><name pos:start="441:10" pos:end="441:12">csr</name></expr>)</condition> <block pos:start="441:15" pos:end="444:5">{<block_content pos:start="442:9" pos:end="443:36">
	<expr_stmt pos:start="442:9" pos:end="442:73"><expr pos:start="442:9" pos:end="442:72"><call pos:start="442:9" pos:end="442:72"><name pos:start="442:9" pos:end="442:19">EST_LOG_ERR</name><argument_list pos:start="442:20" pos:end="442:72">(<argument pos:start="442:21" pos:end="442:71"><expr pos:start="442:21" pos:end="442:71"><literal type="string" pos:start="442:21" pos:end="442:71">"Unable to parse the PKCS10 CSR sent by the client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="443:9" pos:end="443:36">return <expr pos:start="443:16" pos:end="443:35"><operator pos:start="443:16" pos:end="443:16">(</operator><name pos:start="443:17" pos:end="443:34">EST_ERR_BAD_PKCS10</name><operator pos:start="443:35" pos:end="443:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="446:5" pos:end="448:7">/*
     * Perform a sanity check on the CSR
     */</comment>
    <if_stmt pos:start="449:5" pos:end="453:5"><if pos:start="449:5" pos:end="453:5">if <condition pos:start="449:8" pos:end="449:34">(<expr pos:start="449:9" pos:end="449:33"><call pos:start="449:9" pos:end="449:33"><name pos:start="449:9" pos:end="449:28">est_server_check_csr</name><argument_list pos:start="449:29" pos:end="449:33">(<argument pos:start="449:30" pos:end="449:32"><expr pos:start="449:30" pos:end="449:32"><name pos:start="449:30" pos:end="449:32">csr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="449:36" pos:end="453:5">{<block_content pos:start="450:9" pos:end="452:36">
	<expr_stmt pos:start="450:9" pos:end="450:73"><expr pos:start="450:9" pos:end="450:72"><call pos:start="450:9" pos:end="450:72"><name pos:start="450:9" pos:end="450:19">EST_LOG_ERR</name><argument_list pos:start="450:20" pos:end="450:72">(<argument pos:start="450:21" pos:end="450:71"><expr pos:start="450:21" pos:end="450:71"><literal type="string" pos:start="450:21" pos:end="450:71">"PKCS10 CSR sent by the client failed sanity check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="451:9" pos:end="451:27"><expr pos:start="451:9" pos:end="451:26"><call pos:start="451:9" pos:end="451:26"><name pos:start="451:9" pos:end="451:21">X509_REQ_free</name><argument_list pos:start="451:22" pos:end="451:26">(<argument pos:start="451:23" pos:end="451:25"><expr pos:start="451:23" pos:end="451:25"><name pos:start="451:23" pos:end="451:25">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="452:9" pos:end="452:36">return <expr pos:start="452:16" pos:end="452:35"><operator pos:start="452:16" pos:end="452:16">(</operator><name pos:start="452:17" pos:end="452:34">EST_ERR_BAD_PKCS10</name><operator pos:start="452:35" pos:end="452:35">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="455:5" pos:end="458:7">/*
     * Do the PoP check (Proof of Possession).  The challenge password
     * in the pkcs10 request should match the TLS unique ID.
     */</comment>
    <expr_stmt pos:start="459:5" pos:end="459:41"><expr pos:start="459:5" pos:end="459:40"><name pos:start="459:5" pos:end="459:6">rv</name> <operator pos:start="459:8" pos:end="459:8">=</operator> <call pos:start="459:10" pos:end="459:40"><name pos:start="459:10" pos:end="459:25">est_tls_uid_auth</name><argument_list pos:start="459:26" pos:end="459:40">(<argument pos:start="459:27" pos:end="459:29"><expr pos:start="459:27" pos:end="459:29"><name pos:start="459:27" pos:end="459:29">ctx</name></expr></argument>, <argument pos:start="459:32" pos:end="459:34"><expr pos:start="459:32" pos:end="459:34"><name pos:start="459:32" pos:end="459:34">ssl</name></expr></argument>, <argument pos:start="459:37" pos:end="459:39"><expr pos:start="459:37" pos:end="459:39"><name pos:start="459:37" pos:end="459:39">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="460:5" pos:end="460:23"><expr pos:start="460:5" pos:end="460:22"><call pos:start="460:5" pos:end="460:22"><name pos:start="460:5" pos:end="460:17">X509_REQ_free</name><argument_list pos:start="460:18" pos:end="460:22">(<argument pos:start="460:19" pos:end="460:21"><expr pos:start="460:19" pos:end="460:21"><name pos:start="460:19" pos:end="460:21">csr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="462:5" pos:end="464:5"><if pos:start="462:5" pos:end="464:5">if <condition pos:start="462:8" pos:end="462:27">(<expr pos:start="462:9" pos:end="462:26"><name pos:start="462:9" pos:end="462:10">rv</name> <operator pos:start="462:12" pos:end="462:13">!=</operator> <name pos:start="462:15" pos:end="462:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="462:29" pos:end="464:5">{<block_content pos:start="463:9" pos:end="463:42">
        <return pos:start="463:9" pos:end="463:42">return <expr pos:start="463:16" pos:end="463:41"><operator pos:start="463:16" pos:end="463:16">(</operator><name pos:start="463:17" pos:end="463:40">EST_ERR_AUTH_FAIL_TLSUID</name><operator pos:start="463:41" pos:end="463:41">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="466:5" pos:end="470:7">/*
     * body now points to the pkcs10 data, pass
     * this to the enrollment routine.  Need to hi-jack
     * a BUF_MEM.  Attach the body to a new BUF_MEM
     */</comment>
    <expr_stmt pos:start="471:5" pos:end="471:27"><expr pos:start="471:5" pos:end="471:26"><name pos:start="471:5" pos:end="471:10">pkcs10</name> <operator pos:start="471:12" pos:end="471:12">=</operator> <call pos:start="471:14" pos:end="471:26"><name pos:start="471:14" pos:end="471:24">BUF_MEM_new</name><argument_list pos:start="471:25" pos:end="471:26">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="472:5" pos:end="472:24"><expr pos:start="472:5" pos:end="472:23"><name pos:start="472:5" pos:end="472:16"><name pos:start="472:5" pos:end="472:10">pkcs10</name><operator pos:start="472:11" pos:end="472:12">-&gt;</operator><name pos:start="472:13" pos:end="472:16">data</name></name> <operator pos:start="472:18" pos:end="472:18">=</operator> <name pos:start="472:20" pos:end="472:23">body</name></expr>;</expr_stmt>
    <expr_stmt pos:start="473:5" pos:end="473:30"><expr pos:start="473:5" pos:end="473:29"><name pos:start="473:5" pos:end="473:18"><name pos:start="473:5" pos:end="473:10">pkcs10</name><operator pos:start="473:11" pos:end="473:12">-&gt;</operator><name pos:start="473:13" pos:end="473:18">length</name></name> <operator pos:start="473:20" pos:end="473:20">=</operator> <name pos:start="473:22" pos:end="473:29">body_len</name></expr>;</expr_stmt>
    <expr_stmt pos:start="474:5" pos:end="474:27"><expr pos:start="474:5" pos:end="474:26"><name pos:start="474:5" pos:end="474:15"><name pos:start="474:5" pos:end="474:10">pkcs10</name><operator pos:start="474:11" pos:end="474:12">-&gt;</operator><name pos:start="474:13" pos:end="474:15">max</name></name> <operator pos:start="474:17" pos:end="474:17">=</operator> <name pos:start="474:19" pos:end="474:26">body_len</name></expr>;</expr_stmt>

    <comment type="block" pos:start="476:5" pos:end="478:7">/*
     * get the client context for this thread
     */</comment>
    <expr_stmt pos:start="479:5" pos:end="479:37"><expr pos:start="479:5" pos:end="479:36"><name pos:start="479:5" pos:end="479:14">client_ctx</name> <operator pos:start="479:16" pos:end="479:16">=</operator> <call pos:start="479:18" pos:end="479:36"><name pos:start="479:18" pos:end="479:31">get_client_ctx</name><argument_list pos:start="479:32" pos:end="479:36">(<argument pos:start="479:33" pos:end="479:35"><expr pos:start="479:33" pos:end="479:35"><name pos:start="479:33" pos:end="479:35">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="480:5" pos:end="484:5"><if pos:start="480:5" pos:end="484:5">if <condition pos:start="480:8" pos:end="480:20">(<expr pos:start="480:9" pos:end="480:19"><operator pos:start="480:9" pos:end="480:9">!</operator><name pos:start="480:10" pos:end="480:19">client_ctx</name></expr>)</condition> <block pos:start="480:22" pos:end="484:5">{<block_content pos:start="481:9" pos:end="483:32">
        <expr_stmt pos:start="481:9" pos:end="481:75"><expr pos:start="481:9" pos:end="481:74"><call pos:start="481:9" pos:end="481:74"><name pos:start="481:9" pos:end="481:19">EST_LOG_ERR</name><argument_list pos:start="481:20" pos:end="481:74">(<argument pos:start="481:21" pos:end="481:73"><expr pos:start="481:21" pos:end="481:73"><literal type="string" pos:start="481:21" pos:end="481:73">"Unable to obtain client context for proxy operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="482:9" pos:end="482:43"><expr pos:start="482:9" pos:end="482:42"><call pos:start="482:9" pos:end="482:42"><name pos:start="482:9" pos:end="482:34">est_proxy_free_ossl_bufmem</name><argument_list pos:start="482:35" pos:end="482:42">(<argument pos:start="482:36" pos:end="482:41"><expr pos:start="482:36" pos:end="482:41"><name pos:start="482:36" pos:end="482:41">pkcs10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="483:9" pos:end="483:32">return <expr pos:start="483:16" pos:end="483:31"><operator pos:start="483:16" pos:end="483:16">(</operator><name pos:start="483:17" pos:end="483:30">EST_ERR_NO_CTX</name><operator pos:start="483:31" pos:end="483:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="486:5" pos:end="490:7">/*
     * path_segment.  The path seg value is coming in from the
     * downstream client on this request.  It's already been validated,
     * place it in ctx for use by client code.
     */</comment>
    <if_stmt pos:start="491:5" pos:end="493:5"><if pos:start="491:5" pos:end="493:5">if <condition pos:start="491:8" pos:end="491:17">(<expr pos:start="491:9" pos:end="491:16"><name pos:start="491:9" pos:end="491:16">path_seg</name></expr>)</condition> <block pos:start="491:19" pos:end="493:5">{<block_content pos:start="492:9" pos:end="492:57">
        <expr_stmt pos:start="492:9" pos:end="492:57"><expr pos:start="492:9" pos:end="492:56"><call pos:start="492:9" pos:end="492:56"><name pos:start="492:9" pos:end="492:34">est_proxy_set_path_segment</name><argument_list pos:start="492:35" pos:end="492:56">(<argument pos:start="492:36" pos:end="492:45"><expr pos:start="492:36" pos:end="492:45"><name pos:start="492:36" pos:end="492:45">client_ctx</name></expr></argument>, <argument pos:start="492:48" pos:end="492:55"><expr pos:start="492:48" pos:end="492:55"><name pos:start="492:48" pos:end="492:55">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="495:5" pos:end="498:7">/*
     * Allocate some space to hold the cert that we
     * expect to receive from the EST server.
     */</comment>
    <expr_stmt pos:start="499:5" pos:end="499:31"><expr pos:start="499:5" pos:end="499:30"><name pos:start="499:5" pos:end="499:9">pkcs7</name> <operator pos:start="499:11" pos:end="499:11">=</operator> <call pos:start="499:13" pos:end="499:30"><name pos:start="499:13" pos:end="499:18">malloc</name><argument_list pos:start="499:19" pos:end="499:30">(<argument pos:start="499:20" pos:end="499:29"><expr pos:start="499:20" pos:end="499:29"><name pos:start="499:20" pos:end="499:29">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <comment type="block" pos:start="501:5" pos:end="503:7">/*
     * Attempt to enroll the CSR from the client
     */</comment>
    <expr_stmt pos:start="504:5" pos:end="505:49"><expr pos:start="504:5" pos:end="505:48"><name pos:start="504:5" pos:end="504:6">rv</name> <operator pos:start="504:8" pos:end="504:8">=</operator> <call pos:start="504:10" pos:end="505:48"><name pos:start="504:10" pos:end="504:38">est_proxy_send_enroll_request</name><argument_list pos:start="504:39" pos:end="505:48">(<argument pos:start="504:40" pos:end="504:49"><expr pos:start="504:40" pos:end="504:49"><name pos:start="504:40" pos:end="504:49">client_ctx</name></expr></argument>, <argument pos:start="504:52" pos:end="504:57"><expr pos:start="504:52" pos:end="504:57"><name pos:start="504:52" pos:end="504:57">pkcs10</name></expr></argument>, <argument pos:start="504:60" pos:end="504:64"><expr pos:start="504:60" pos:end="504:64"><name pos:start="504:60" pos:end="504:64">pkcs7</name></expr></argument>, <argument pos:start="504:67" pos:end="504:76"><expr pos:start="504:67" pos:end="504:76"><operator pos:start="504:67" pos:end="504:67">&amp;</operator><name pos:start="504:68" pos:end="504:76">pkcs7_len</name></expr></argument>,
                                       <argument pos:start="505:40" pos:end="505:47"><expr pos:start="505:40" pos:end="505:47"><name pos:start="505:40" pos:end="505:47">reenroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="507:5" pos:end="509:7">/*
     * Handle any errors that likely occurred
     */</comment>
    <switch pos:start="510:5" pos:end="533:5">switch <condition pos:start="510:12" pos:end="510:15">(<expr pos:start="510:13" pos:end="510:14"><name pos:start="510:13" pos:end="510:14">rv</name></expr>)</condition> <block pos:start="510:17" pos:end="533:5">{<block_content pos:start="511:5" pos:end="532:14">
    <case pos:start="511:5" pos:end="511:27">case <expr pos:start="511:10" pos:end="511:26"><name pos:start="511:10" pos:end="511:26">EST_ERR_AUTH_FAIL</name></expr>:</case>
        <comment type="block" pos:start="512:9" pos:end="512:58">/* Try one more time if we're doing Digest auth */</comment>
        <if_stmt pos:start="513:9" pos:end="525:9"><if pos:start="513:9" pos:end="525:9">if <condition pos:start="513:12" pos:end="515:43">(<expr pos:start="513:13" pos:end="515:42"><operator pos:start="513:13" pos:end="513:13">(</operator><name pos:start="513:14" pos:end="513:27"><name pos:start="513:14" pos:end="513:16">ctx</name><operator pos:start="513:17" pos:end="513:18">-&gt;</operator><name pos:start="513:19" pos:end="513:27">auth_mode</name></name> <operator pos:start="513:29" pos:end="513:30">==</operator> <name pos:start="513:32" pos:end="513:42">AUTH_DIGEST</name> <operator pos:start="513:44" pos:end="513:45">||</operator>
             <name pos:start="514:14" pos:end="514:27"><name pos:start="514:14" pos:end="514:16">ctx</name><operator pos:start="514:17" pos:end="514:18">-&gt;</operator><name pos:start="514:19" pos:end="514:27">auth_mode</name></name> <operator pos:start="514:29" pos:end="514:30">==</operator> <name pos:start="514:32" pos:end="514:41">AUTH_BASIC</name>  <operator pos:start="514:44" pos:end="514:45">||</operator>
             <name pos:start="515:14" pos:end="515:27"><name pos:start="515:14" pos:end="515:16">ctx</name><operator pos:start="515:17" pos:end="515:18">-&gt;</operator><name pos:start="515:19" pos:end="515:27">auth_mode</name></name> <operator pos:start="515:29" pos:end="515:30">==</operator> <name pos:start="515:32" pos:end="515:41">AUTH_TOKEN</name><operator pos:start="515:42" pos:end="515:42">)</operator></expr>)</condition> <block pos:start="515:45" pos:end="525:9">{<block_content pos:start="517:13" pos:end="524:13">
            
            <expr_stmt pos:start="517:13" pos:end="517:88"><expr pos:start="517:13" pos:end="517:87"><call pos:start="517:13" pos:end="517:87"><name pos:start="517:13" pos:end="517:24">EST_LOG_INFO</name><argument_list pos:start="517:25" pos:end="517:87">(<argument pos:start="517:26" pos:end="517:86"><expr pos:start="517:26" pos:end="517:86"><literal type="string" pos:start="517:26" pos:end="517:86">"HTTP Auth failed, trying again with digest/basic parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="519:13" pos:end="519:96"><expr pos:start="519:13" pos:end="519:95"><name pos:start="519:13" pos:end="519:14">rv</name> <operator pos:start="519:16" pos:end="519:16">=</operator> <call pos:start="519:18" pos:end="519:95"><name pos:start="519:18" pos:end="519:46">est_proxy_send_enroll_request</name><argument_list pos:start="519:47" pos:end="519:95">(<argument pos:start="519:48" pos:end="519:57"><expr pos:start="519:48" pos:end="519:57"><name pos:start="519:48" pos:end="519:57">client_ctx</name></expr></argument>, <argument pos:start="519:60" pos:end="519:65"><expr pos:start="519:60" pos:end="519:65"><name pos:start="519:60" pos:end="519:65">pkcs10</name></expr></argument>, <argument pos:start="519:68" pos:end="519:72"><expr pos:start="519:68" pos:end="519:72"><name pos:start="519:68" pos:end="519:72">pkcs7</name></expr></argument>, <argument pos:start="519:75" pos:end="519:84"><expr pos:start="519:75" pos:end="519:84"><operator pos:start="519:75" pos:end="519:75">&amp;</operator><name pos:start="519:76" pos:end="519:84">pkcs7_len</name></expr></argument>, <argument pos:start="519:87" pos:end="519:94"><expr pos:start="519:87" pos:end="519:94"><name pos:start="519:87" pos:end="519:94">reenroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="520:13" pos:end="524:13"><if pos:start="520:13" pos:end="522:13">if <condition pos:start="520:16" pos:end="520:46">(<expr pos:start="520:17" pos:end="520:45"><name pos:start="520:17" pos:end="520:18">rv</name> <operator pos:start="520:20" pos:end="520:21">==</operator> <name pos:start="520:23" pos:end="520:45">EST_ERR_CA_ENROLL_RETRY</name></expr>)</condition> <block pos:start="520:48" pos:end="522:13">{<block_content pos:start="521:17" pos:end="521:69">
	        <expr_stmt pos:start="521:17" pos:end="521:69"><expr pos:start="521:17" pos:end="521:68"><name pos:start="521:17" pos:end="521:18">rv</name> <operator pos:start="521:20" pos:end="521:20">=</operator> <call pos:start="521:22" pos:end="521:68"><name pos:start="521:22" pos:end="521:46">est_proxy_propagate_retry</name><argument_list pos:start="521:47" pos:end="521:68">(<argument pos:start="521:48" pos:end="521:57"><expr pos:start="521:48" pos:end="521:57"><name pos:start="521:48" pos:end="521:57">client_ctx</name></expr></argument>, <argument pos:start="521:60" pos:end="521:67"><expr pos:start="521:60" pos:end="521:67"><name pos:start="521:60" pos:end="521:67">http_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <if type="elseif" pos:start="522:15" pos:end="524:13">else if <condition pos:start="522:23" pos:end="522:42">(<expr pos:start="522:24" pos:end="522:41"><name pos:start="522:24" pos:end="522:25">rv</name> <operator pos:start="522:27" pos:end="522:28">!=</operator> <name pos:start="522:30" pos:end="522:41">EST_ERR_NONE</name></expr>)</condition> <block pos:start="522:44" pos:end="524:13">{<block_content pos:start="523:17" pos:end="523:76">
                <expr_stmt pos:start="523:17" pos:end="523:76"><expr pos:start="523:17" pos:end="523:75"><call pos:start="523:17" pos:end="523:75"><name pos:start="523:17" pos:end="523:28">EST_LOG_WARN</name><argument_list pos:start="523:29" pos:end="523:75">(<argument pos:start="523:30" pos:end="523:70"><expr pos:start="523:30" pos:end="523:70"><literal type="string" pos:start="523:30" pos:end="523:70">"EST enrollment failed, error code is %d"</literal></expr></argument>, <argument pos:start="523:73" pos:end="523:74"><expr pos:start="523:73" pos:end="523:74"><name pos:start="523:73" pos:end="523:74">rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break pos:start="526:9" pos:end="526:14">break;</break>
    <case pos:start="527:5" pos:end="527:33">case <expr pos:start="527:10" pos:end="527:32"><name pos:start="527:10" pos:end="527:32">EST_ERR_CA_ENROLL_RETRY</name></expr>:</case>
	<expr_stmt pos:start="528:9" pos:end="528:61"><expr pos:start="528:9" pos:end="528:60"><name pos:start="528:9" pos:end="528:10">rv</name> <operator pos:start="528:12" pos:end="528:12">=</operator> <call pos:start="528:14" pos:end="528:60"><name pos:start="528:14" pos:end="528:38">est_proxy_propagate_retry</name><argument_list pos:start="528:39" pos:end="528:60">(<argument pos:start="528:40" pos:end="528:49"><expr pos:start="528:40" pos:end="528:49"><name pos:start="528:40" pos:end="528:49">client_ctx</name></expr></argument>, <argument pos:start="528:52" pos:end="528:59"><expr pos:start="528:52" pos:end="528:59"><name pos:start="528:52" pos:end="528:59">http_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break pos:start="529:9" pos:end="529:14">break;</break>
    <default pos:start="530:5" pos:end="530:12">default:</default>
        <expr_stmt pos:start="531:9" pos:end="531:76"><expr pos:start="531:9" pos:end="531:75"><call pos:start="531:9" pos:end="531:75"><name pos:start="531:9" pos:end="531:20">EST_LOG_WARN</name><argument_list pos:start="531:21" pos:end="531:75">(<argument pos:start="531:22" pos:end="531:70"><expr pos:start="531:22" pos:end="531:70"><literal type="string" pos:start="531:22" pos:end="531:70">"Initial EST enrollment request error code is %d"</literal></expr></argument>, <argument pos:start="531:73" pos:end="531:74"><expr pos:start="531:73" pos:end="531:74"><name pos:start="531:73" pos:end="531:74">rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break pos:start="532:9" pos:end="532:14">break;</break>
    </block_content>}</block></switch>

    <expr_stmt pos:start="535:5" pos:end="535:38"><expr pos:start="535:5" pos:end="535:37"><name pos:start="535:5" pos:end="535:25"><name pos:start="535:5" pos:end="535:14">client_ctx</name><operator pos:start="535:15" pos:end="535:16">-&gt;</operator><name pos:start="535:17" pos:end="535:25">auth_mode</name></name> <operator pos:start="535:27" pos:end="535:27">=</operator> <name pos:start="535:29" pos:end="535:37">AUTH_NONE</name></expr>;</expr_stmt>
    
    <comment type="block" pos:start="537:5" pos:end="539:7">/*
     * Prevent OpenSSL from freeing our data
     */</comment>
    <expr_stmt pos:start="540:5" pos:end="540:39"><expr pos:start="540:5" pos:end="540:38"><call pos:start="540:5" pos:end="540:38"><name pos:start="540:5" pos:end="540:30">est_proxy_free_ossl_bufmem</name><argument_list pos:start="540:31" pos:end="540:38">(<argument pos:start="540:32" pos:end="540:37"><expr pos:start="540:32" pos:end="540:37"><name pos:start="540:32" pos:end="540:37">pkcs10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="542:5" pos:end="545:7">/*
     * If we have a cert response from the EST server, let's forward
     * it back to the EST client
     */</comment>
    <if_stmt pos:start="546:5" pos:end="548:5"><if pos:start="546:5" pos:end="548:5">if <condition pos:start="546:8" pos:end="546:22">(<expr pos:start="546:9" pos:end="546:21"><name pos:start="546:9" pos:end="546:17">pkcs7_len</name> <operator pos:start="546:19" pos:end="546:19">&gt;</operator> <literal type="number" pos:start="546:21" pos:end="546:21">0</literal></expr>)</condition> <block pos:start="546:24" pos:end="548:5">{<block_content pos:start="547:9" pos:end="547:67">
        <expr_stmt pos:start="547:9" pos:end="547:67"><expr pos:start="547:9" pos:end="547:66"><name pos:start="547:9" pos:end="547:10">rv</name> <operator pos:start="547:12" pos:end="547:12">=</operator> <call pos:start="547:14" pos:end="547:66"><name pos:start="547:14" pos:end="547:38">est_proxy_propagate_pkcs7</name><argument_list pos:start="547:39" pos:end="547:66">(<argument pos:start="547:40" pos:end="547:47"><expr pos:start="547:40" pos:end="547:47"><name pos:start="547:40" pos:end="547:47">http_ctx</name></expr></argument>, <argument pos:start="547:50" pos:end="547:54"><expr pos:start="547:50" pos:end="547:54"><name pos:start="547:50" pos:end="547:54">pkcs7</name></expr></argument>, <argument pos:start="547:57" pos:end="547:65"><expr pos:start="547:57" pos:end="547:65"><name pos:start="547:57" pos:end="547:65">pkcs7_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="549:5" pos:end="549:16"><expr pos:start="549:5" pos:end="549:15"><call pos:start="549:5" pos:end="549:15"><name pos:start="549:5" pos:end="549:8">free</name><argument_list pos:start="549:9" pos:end="549:15">(<argument pos:start="549:10" pos:end="549:14"><expr pos:start="549:10" pos:end="549:14"><name pos:start="549:10" pos:end="549:14">pkcs7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="551:5" pos:end="551:16">return <expr pos:start="551:12" pos:end="551:15"><operator pos:start="551:12" pos:end="551:12">(</operator><name pos:start="551:13" pos:end="551:14">rv</name><operator pos:start="551:15" pos:end="551:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="553:1" pos:end="558:3">/*
 * This function is used by the server side of the EST proxy to respond to an
 * incoming cacerts request.  If the CA certs response has been set locally
 * then respond with this locally set buffer.  If not set, then issue a
 * request to the upstream server.
 */</comment>
<function pos:start="559:1" pos:end="621:1"><type pos:start="559:1" pos:end="559:10"><specifier pos:start="559:1" pos:end="559:6">static</specifier> <name pos:start="559:8" pos:end="559:10">int</name></type> <name pos:start="559:12" pos:end="559:35">est_proxy_handle_cacerts</name> <parameter_list pos:start="559:37" pos:end="560:52">(<parameter pos:start="559:38" pos:end="559:49"><decl pos:start="559:38" pos:end="559:49"><type pos:start="559:38" pos:end="559:49"><name pos:start="559:38" pos:end="559:44">EST_CTX</name> <modifier pos:start="559:46" pos:end="559:46">*</modifier></type><name pos:start="559:47" pos:end="559:49">ctx</name></decl></parameter>, <parameter pos:start="559:52" pos:end="559:65"><decl pos:start="559:52" pos:end="559:65"><type pos:start="559:52" pos:end="559:65"><name pos:start="559:52" pos:end="559:55">void</name> <modifier pos:start="559:57" pos:end="559:57">*</modifier></type><name pos:start="559:58" pos:end="559:65">http_ctx</name></decl></parameter>,
                                     <parameter pos:start="560:38" pos:end="560:51"><decl pos:start="560:38" pos:end="560:51"><type pos:start="560:38" pos:end="560:51"><name pos:start="560:38" pos:end="560:41">char</name> <modifier pos:start="560:43" pos:end="560:43">*</modifier></type><name pos:start="560:44" pos:end="560:51">path_seg</name></decl></parameter>)</parameter_list>
<block pos:start="561:1" pos:end="621:1">{<block_content pos:start="562:5" pos:end="620:16">
    <decl_stmt pos:start="562:5" pos:end="562:32"><decl pos:start="562:5" pos:end="562:31"><type pos:start="562:5" pos:end="562:13"><name pos:start="562:5" pos:end="562:13">EST_ERROR</name></type> <name pos:start="562:15" pos:end="562:16">rv</name> <init pos:start="562:18" pos:end="562:31">= <expr pos:start="562:20" pos:end="562:31"><name pos:start="562:20" pos:end="562:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="563:5" pos:end="563:24"><decl pos:start="563:5" pos:end="563:23"><type pos:start="563:5" pos:end="563:13"><name pos:start="563:5" pos:end="563:11">EST_CTX</name> <modifier pos:start="563:13" pos:end="563:13">*</modifier></type><name pos:start="563:14" pos:end="563:23">client_ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="564:5" pos:end="564:20"><decl pos:start="564:5" pos:end="564:19"><type pos:start="564:5" pos:end="564:7"><name pos:start="564:5" pos:end="564:7">int</name></type> <name pos:start="564:9" pos:end="564:19">cacerts_len</name></decl>;</decl_stmt>

    <if_stmt pos:start="566:5" pos:end="618:5"><if pos:start="566:5" pos:end="570:5">if <condition pos:start="566:8" pos:end="566:30">(<expr pos:start="566:9" pos:end="566:29"><name pos:start="566:9" pos:end="566:21"><name pos:start="566:9" pos:end="566:11">ctx</name><operator pos:start="566:12" pos:end="566:13">-&gt;</operator><name pos:start="566:14" pos:end="566:21">ca_certs</name></name> <operator pos:start="566:23" pos:end="566:24">!=</operator> <name pos:start="566:26" pos:end="566:29">NULL</name></expr>)</condition> <block pos:start="566:32" pos:end="570:5">{<block_content pos:start="567:9" pos:end="569:55">
        <expr_stmt pos:start="567:9" pos:end="567:99"><expr pos:start="567:9" pos:end="567:98"><call pos:start="567:9" pos:end="567:98"><name pos:start="567:9" pos:end="567:20">EST_LOG_INFO</name><argument_list pos:start="567:21" pos:end="567:98">(<argument pos:start="567:22" pos:end="567:97"><expr pos:start="567:22" pos:end="567:97"><literal type="string" pos:start="567:22" pos:end="567:97">"Proxy: CA certs set locally, responding with locally set CA certs response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="568:9" pos:end="569:55">return<expr pos:start="568:15" pos:end="569:54"><operator pos:start="568:15" pos:end="568:15">(</operator><call pos:start="568:16" pos:end="569:53"><name pos:start="568:16" pos:end="568:33">est_handle_cacerts</name><argument_list pos:start="568:34" pos:end="569:53">(<argument pos:start="568:35" pos:end="568:37"><expr pos:start="568:35" pos:end="568:37"><name pos:start="568:35" pos:end="568:37">ctx</name></expr></argument>, <argument pos:start="568:40" pos:end="568:52"><expr pos:start="568:40" pos:end="568:52"><name pos:start="568:40" pos:end="568:52"><name pos:start="568:40" pos:end="568:42">ctx</name><operator pos:start="568:43" pos:end="568:44">-&gt;</operator><name pos:start="568:45" pos:end="568:52">ca_certs</name></name></expr></argument>, <argument pos:start="568:55" pos:end="568:71"><expr pos:start="568:55" pos:end="568:71"><name pos:start="568:55" pos:end="568:71"><name pos:start="568:55" pos:end="568:57">ctx</name><operator pos:start="568:58" pos:end="568:59">-&gt;</operator><name pos:start="568:60" pos:end="568:71">ca_certs_len</name></name></expr></argument>,
                                  <argument pos:start="569:35" pos:end="569:42"><expr pos:start="569:35" pos:end="569:42"><name pos:start="569:35" pos:end="569:42">http_ctx</name></expr></argument>, <argument pos:start="569:45" pos:end="569:52"><expr pos:start="569:45" pos:end="569:52"><name pos:start="569:45" pos:end="569:52">path_seg</name></expr></argument>)</argument_list></call><operator pos:start="569:54" pos:end="569:54">)</operator></expr>;</return>
    </block_content>}</block></if> <else pos:start="570:7" pos:end="618:5">else <block pos:start="570:12" pos:end="618:5">{<block_content pos:start="575:9" pos:end="617:9">
        
        <comment type="block" pos:start="572:9" pos:end="574:11">/*
         * get the client context for this thread
         */</comment>
        <expr_stmt pos:start="575:9" pos:end="575:41"><expr pos:start="575:9" pos:end="575:40"><name pos:start="575:9" pos:end="575:18">client_ctx</name> <operator pos:start="575:20" pos:end="575:20">=</operator> <call pos:start="575:22" pos:end="575:40"><name pos:start="575:22" pos:end="575:35">get_client_ctx</name><argument_list pos:start="575:36" pos:end="575:40">(<argument pos:start="575:37" pos:end="575:39"><expr pos:start="575:37" pos:end="575:39"><name pos:start="575:37" pos:end="575:39">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="576:9" pos:end="579:9"><if pos:start="576:9" pos:end="579:9">if <condition pos:start="576:12" pos:end="576:24">(<expr pos:start="576:13" pos:end="576:23"><operator pos:start="576:13" pos:end="576:13">!</operator><name pos:start="576:14" pos:end="576:23">client_ctx</name></expr>)</condition> <block pos:start="576:26" pos:end="579:9">{<block_content pos:start="577:13" pos:end="578:36">
            <expr_stmt pos:start="577:13" pos:end="577:79"><expr pos:start="577:13" pos:end="577:78"><call pos:start="577:13" pos:end="577:78"><name pos:start="577:13" pos:end="577:23">EST_LOG_ERR</name><argument_list pos:start="577:24" pos:end="577:78">(<argument pos:start="577:25" pos:end="577:77"><expr pos:start="577:25" pos:end="577:77"><literal type="string" pos:start="577:25" pos:end="577:77">"Unable to obtain client context for proxy operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="578:13" pos:end="578:36">return <expr pos:start="578:20" pos:end="578:35"><operator pos:start="578:20" pos:end="578:20">(</operator><name pos:start="578:21" pos:end="578:34">EST_ERR_NO_CTX</name><operator pos:start="578:35" pos:end="578:35">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="581:9" pos:end="585:11">/*
         * path_segment.  The path seg value is coming in from the
         * downstream client on this request.  It's already been validated,
         * place it in ctx for use by client code.
         */</comment>
        <if_stmt pos:start="586:9" pos:end="592:9"><if pos:start="586:9" pos:end="592:9">if <condition pos:start="586:12" pos:end="586:21">(<expr pos:start="586:13" pos:end="586:20"><name pos:start="586:13" pos:end="586:20">path_seg</name></expr>)</condition> <block pos:start="586:23" pos:end="592:9">{<block_content pos:start="587:13" pos:end="591:13">    
            <expr_stmt pos:start="587:13" pos:end="587:66"><expr pos:start="587:13" pos:end="587:65"><name pos:start="587:13" pos:end="587:14">rv</name> <operator pos:start="587:16" pos:end="587:16">=</operator> <call pos:start="587:18" pos:end="587:65"><name pos:start="587:18" pos:end="587:43">est_proxy_set_path_segment</name><argument_list pos:start="587:44" pos:end="587:65">(<argument pos:start="587:45" pos:end="587:54"><expr pos:start="587:45" pos:end="587:54"><name pos:start="587:45" pos:end="587:54">client_ctx</name></expr></argument>, <argument pos:start="587:57" pos:end="587:64"><expr pos:start="587:57" pos:end="587:64"><name pos:start="587:57" pos:end="587:64">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="588:13" pos:end="591:13"><if pos:start="588:13" pos:end="591:13">if <condition pos:start="588:16" pos:end="588:35">(<expr pos:start="588:17" pos:end="588:34"><name pos:start="588:17" pos:end="588:18">rv</name> <operator pos:start="588:20" pos:end="588:21">!=</operator> <name pos:start="588:23" pos:end="588:34">EST_ERR_NONE</name></expr>)</condition> <block pos:start="588:37" pos:end="591:13">{<block_content pos:start="589:17" pos:end="590:28">
                <expr_stmt pos:start="589:17" pos:end="589:100"><expr pos:start="589:17" pos:end="589:99"><call pos:start="589:17" pos:end="589:99"><name pos:start="589:17" pos:end="589:27">EST_LOG_ERR</name><argument_list pos:start="589:28" pos:end="589:99">(<argument pos:start="589:29" pos:end="589:98"><expr pos:start="589:29" pos:end="589:98"><literal type="string" pos:start="589:29" pos:end="589:98">"Unable to save the path segment from the URI into the client context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="590:17" pos:end="590:28">return <expr pos:start="590:24" pos:end="590:27"><operator pos:start="590:24" pos:end="590:24">(</operator><name pos:start="590:25" pos:end="590:26">rv</name><operator pos:start="590:27" pos:end="590:27">)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>        

        <comment type="block" pos:start="594:9" pos:end="597:11">/*
         * Invoke client code to retrieve the cacerts.
         * Note: there is no need to authenticate the client (see sec 4.5)
         */</comment>
        <expr_stmt pos:start="598:9" pos:end="598:84"><expr pos:start="598:9" pos:end="598:83"><call pos:start="598:9" pos:end="598:83"><name pos:start="598:9" pos:end="598:20">EST_LOG_INFO</name><argument_list pos:start="598:21" pos:end="598:83">(<argument pos:start="598:22" pos:end="598:82"><expr pos:start="598:22" pos:end="598:82"><literal type="string" pos:start="598:22" pos:end="598:82">"Proxy: Attempting to retrieve CA certs from upstream server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="599:9" pos:end="599:62"><expr pos:start="599:9" pos:end="599:61"><name pos:start="599:9" pos:end="599:10">rv</name> <operator pos:start="599:12" pos:end="599:12">=</operator> <call pos:start="599:14" pos:end="599:61"><name pos:start="599:14" pos:end="599:35">est_client_get_cacerts</name><argument_list pos:start="599:36" pos:end="599:61">(<argument pos:start="599:37" pos:end="599:46"><expr pos:start="599:37" pos:end="599:46"><name pos:start="599:37" pos:end="599:46">client_ctx</name></expr></argument>, <argument pos:start="599:49" pos:end="599:60"><expr pos:start="599:49" pos:end="599:60"><operator pos:start="599:49" pos:end="599:49">&amp;</operator><name pos:start="599:50" pos:end="599:60">cacerts_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="601:9" pos:end="604:11">/*
         * If the upstream request was successful, the retrieved CA certs will be
         * in the context
         */</comment>
        <if_stmt pos:start="605:9" pos:end="617:9"><if pos:start="605:9" pos:end="610:9">if <condition pos:start="605:12" pos:end="605:31">(<expr pos:start="605:13" pos:end="605:30"><name pos:start="605:13" pos:end="605:14">rv</name> <operator pos:start="605:16" pos:end="605:17">==</operator> <name pos:start="605:19" pos:end="605:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="605:33" pos:end="610:9">{<block_content pos:start="606:13" pos:end="609:59">
            <expr_stmt pos:start="606:13" pos:end="606:106"><expr pos:start="606:13" pos:end="606:105"><call pos:start="606:13" pos:end="606:105"><name pos:start="606:13" pos:end="606:24">EST_LOG_INFO</name><argument_list pos:start="606:25" pos:end="606:105">(<argument pos:start="606:26" pos:end="606:104"><expr pos:start="606:26" pos:end="606:104"><literal type="string" pos:start="606:26" pos:end="606:104">"Proxy: CA certs retrieved successfully from server. Forwarding to EST client."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="607:13" pos:end="609:59">return<expr pos:start="607:19" pos:end="609:58"><operator pos:start="607:19" pos:end="607:19">(</operator><call pos:start="607:20" pos:end="609:57"><name pos:start="607:20" pos:end="607:37">est_handle_cacerts</name><argument_list pos:start="607:38" pos:end="609:57">(<argument pos:start="607:39" pos:end="607:48"><expr pos:start="607:39" pos:end="607:48"><name pos:start="607:39" pos:end="607:48">client_ctx</name></expr></argument>, <argument pos:start="607:51" pos:end="607:80"><expr pos:start="607:51" pos:end="607:80"><name pos:start="607:51" pos:end="607:80"><name pos:start="607:51" pos:end="607:60">client_ctx</name><operator pos:start="607:61" pos:end="607:62">-&gt;</operator><name pos:start="607:63" pos:end="607:80">retrieved_ca_certs</name></name></expr></argument>,
                                      <argument pos:start="608:39" pos:end="608:72"><expr pos:start="608:39" pos:end="608:72"><name pos:start="608:39" pos:end="608:72"><name pos:start="608:39" pos:end="608:48">client_ctx</name><operator pos:start="608:49" pos:end="608:50">-&gt;</operator><name pos:start="608:51" pos:end="608:72">retrieved_ca_certs_len</name></name></expr></argument>,
                                      <argument pos:start="609:39" pos:end="609:46"><expr pos:start="609:39" pos:end="609:46"><name pos:start="609:39" pos:end="609:46">http_ctx</name></expr></argument>, <argument pos:start="609:49" pos:end="609:56"><expr pos:start="609:49" pos:end="609:56"><name pos:start="609:49" pos:end="609:56">path_seg</name></expr></argument>)</argument_list></call><operator pos:start="609:58" pos:end="609:58">)</operator></expr>;</return>
        </block_content>}</block></if> <else pos:start="610:11" pos:end="617:9">else <block pos:start="610:16" pos:end="617:9">{<block_content pos:start="615:13" pos:end="616:40">
            <comment type="block" pos:start="611:13" pos:end="614:15">/*
             * Something went wrong with the upstream request to the
             * server.  Treat this as a not found condition.
             */</comment>
            <expr_stmt pos:start="615:13" pos:end="615:80"><expr pos:start="615:13" pos:end="615:79"><call pos:start="615:13" pos:end="615:79"><name pos:start="615:13" pos:end="615:23">EST_LOG_ERR</name><argument_list pos:start="615:24" pos:end="615:79">(<argument pos:start="615:25" pos:end="615:78"><expr pos:start="615:25" pos:end="615:78"><literal type="string" pos:start="615:25" pos:end="615:78">"Proxy: Server not reachable or sent corrupt CA Certs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="616:13" pos:end="616:40"><expr pos:start="616:13" pos:end="616:39"><name pos:start="616:13" pos:end="616:14">rv</name> <operator pos:start="616:16" pos:end="616:16">=</operator> <name pos:start="616:18" pos:end="616:39">EST_ERR_HTTP_NOT_FOUND</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    
    <return pos:start="620:5" pos:end="620:16">return <expr pos:start="620:12" pos:end="620:15"><operator pos:start="620:12" pos:end="620:12">(</operator><name pos:start="620:13" pos:end="620:14">rv</name><operator pos:start="620:15" pos:end="620:15">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="622:1" pos:end="626:4">/*
 * This function is used by the server side of the EST proxy to respond to an
 * incoming CSR Attributes request.  This function is similar to the Client API
 * function, est_client_get_csrattrs().
  */</comment>
<function pos:start="627:1" pos:end="716:1"><type pos:start="627:1" pos:end="627:10"><specifier pos:start="627:1" pos:end="627:6">static</specifier> <name pos:start="627:8" pos:end="627:10">int</name></type> <name pos:start="627:12" pos:end="627:37">est_proxy_handle_csr_attrs</name> <parameter_list pos:start="627:39" pos:end="628:54">(<parameter pos:start="627:40" pos:end="627:51"><decl pos:start="627:40" pos:end="627:51"><type pos:start="627:40" pos:end="627:51"><name pos:start="627:40" pos:end="627:46">EST_CTX</name> <modifier pos:start="627:48" pos:end="627:48">*</modifier></type><name pos:start="627:49" pos:end="627:51">ctx</name></decl></parameter>, <parameter pos:start="627:54" pos:end="627:67"><decl pos:start="627:54" pos:end="627:67"><type pos:start="627:54" pos:end="627:67"><name pos:start="627:54" pos:end="627:57">void</name> <modifier pos:start="627:59" pos:end="627:59">*</modifier></type><name pos:start="627:60" pos:end="627:67">http_ctx</name></decl></parameter>,
                                       <parameter pos:start="628:40" pos:end="628:53"><decl pos:start="628:40" pos:end="628:53"><type pos:start="628:40" pos:end="628:53"><name pos:start="628:40" pos:end="628:43">char</name> <modifier pos:start="628:45" pos:end="628:45">*</modifier></type><name pos:start="628:46" pos:end="628:53">path_seg</name></decl></parameter>)</parameter_list>
<block pos:start="629:1" pos:end="716:1">{<block_content pos:start="630:5" pos:end="715:69">
    <decl_stmt pos:start="630:5" pos:end="630:26"><decl pos:start="630:5" pos:end="630:25"><type pos:start="630:5" pos:end="630:7"><name pos:start="630:5" pos:end="630:7">int</name></type> <name pos:start="630:9" pos:end="630:10">rv</name> <init pos:start="630:12" pos:end="630:25">= <expr pos:start="630:14" pos:end="630:25"><name pos:start="630:14" pos:end="630:25">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="631:5" pos:end="631:20"><decl pos:start="631:5" pos:end="631:19"><type pos:start="631:5" pos:end="631:7"><name pos:start="631:5" pos:end="631:7">int</name></type> <name pos:start="631:9" pos:end="631:19">pop_present</name></decl>;</decl_stmt>
    <decl_stmt pos:start="632:5" pos:end="632:34"><decl pos:start="632:5" pos:end="632:18"><type pos:start="632:5" pos:end="632:10"><name pos:start="632:5" pos:end="632:8">char</name> <modifier pos:start="632:10" pos:end="632:10">*</modifier></type><name pos:start="632:11" pos:end="632:18">csr_data</name></decl>, <decl pos:start="632:21" pos:end="632:33"><type ref="prev" pos:start="632:5" pos:end="632:10"><modifier pos:start="632:21" pos:end="632:21">*</modifier></type><name pos:start="632:22" pos:end="632:33">csr_data_pop</name></decl>;</decl_stmt>
    <decl_stmt pos:start="633:5" pos:end="633:29"><decl pos:start="633:5" pos:end="633:15"><type pos:start="633:5" pos:end="633:7"><name pos:start="633:5" pos:end="633:7">int</name></type> <name pos:start="633:9" pos:end="633:15">csr_len</name></decl>, <decl pos:start="633:18" pos:end="633:28"><type ref="prev" pos:start="633:5" pos:end="633:7"/><name pos:start="633:18" pos:end="633:28">csr_pop_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="634:5" pos:end="634:24"><decl pos:start="634:5" pos:end="634:23"><type pos:start="634:5" pos:end="634:13"><name pos:start="634:5" pos:end="634:11">EST_CTX</name> <modifier pos:start="634:13" pos:end="634:13">*</modifier></type><name pos:start="634:14" pos:end="634:23">client_ctx</name></decl>;</decl_stmt>

    <comment type="block" pos:start="636:5" pos:end="638:7">/*
     * get the client context for this thread
     */</comment>
    <expr_stmt pos:start="639:5" pos:end="639:37"><expr pos:start="639:5" pos:end="639:36"><name pos:start="639:5" pos:end="639:14">client_ctx</name> <operator pos:start="639:16" pos:end="639:16">=</operator> <call pos:start="639:18" pos:end="639:36"><name pos:start="639:18" pos:end="639:31">get_client_ctx</name><argument_list pos:start="639:32" pos:end="639:36">(<argument pos:start="639:33" pos:end="639:35"><expr pos:start="639:33" pos:end="639:35"><name pos:start="639:33" pos:end="639:35">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="640:5" pos:end="643:5"><if pos:start="640:5" pos:end="643:5">if <condition pos:start="640:8" pos:end="640:20">(<expr pos:start="640:9" pos:end="640:19"><operator pos:start="640:9" pos:end="640:9">!</operator><name pos:start="640:10" pos:end="640:19">client_ctx</name></expr>)</condition> <block pos:start="640:22" pos:end="643:5">{<block_content pos:start="641:9" pos:end="642:32">
        <expr_stmt pos:start="641:9" pos:end="641:75"><expr pos:start="641:9" pos:end="641:74"><call pos:start="641:9" pos:end="641:74"><name pos:start="641:9" pos:end="641:19">EST_LOG_ERR</name><argument_list pos:start="641:20" pos:end="641:74">(<argument pos:start="641:21" pos:end="641:73"><expr pos:start="641:21" pos:end="641:73"><literal type="string" pos:start="641:21" pos:end="641:73">"Unable to obtain client context for proxy operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="642:9" pos:end="642:32">return <expr pos:start="642:16" pos:end="642:31"><operator pos:start="642:16" pos:end="642:16">(</operator><name pos:start="642:17" pos:end="642:30">EST_ERR_NO_CTX</name><operator pos:start="642:31" pos:end="642:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="645:5" pos:end="649:7">/*
     * path_segment.  The path seg value is coming in from the
     * downstream client on this request.  It's already been validated,
     * place it in ctx for use by client code.
     */</comment>
    <if_stmt pos:start="650:5" pos:end="656:5"><if pos:start="650:5" pos:end="656:5">if <condition pos:start="650:8" pos:end="650:17">(<expr pos:start="650:9" pos:end="650:16"><name pos:start="650:9" pos:end="650:16">path_seg</name></expr>)</condition> <block pos:start="650:19" pos:end="656:5">{<block_content pos:start="651:9" pos:end="655:9">
        <expr_stmt pos:start="651:9" pos:end="651:62"><expr pos:start="651:9" pos:end="651:61"><name pos:start="651:9" pos:end="651:10">rv</name> <operator pos:start="651:12" pos:end="651:12">=</operator> <call pos:start="651:14" pos:end="651:61"><name pos:start="651:14" pos:end="651:39">est_proxy_set_path_segment</name><argument_list pos:start="651:40" pos:end="651:61">(<argument pos:start="651:41" pos:end="651:50"><expr pos:start="651:41" pos:end="651:50"><name pos:start="651:41" pos:end="651:50">client_ctx</name></expr></argument>, <argument pos:start="651:53" pos:end="651:60"><expr pos:start="651:53" pos:end="651:60"><name pos:start="651:53" pos:end="651:60">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="652:9" pos:end="655:9"><if pos:start="652:9" pos:end="655:9">if <condition pos:start="652:12" pos:end="652:31">(<expr pos:start="652:13" pos:end="652:30"><name pos:start="652:13" pos:end="652:14">rv</name> <operator pos:start="652:16" pos:end="652:17">!=</operator> <name pos:start="652:19" pos:end="652:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="652:33" pos:end="655:9">{<block_content pos:start="653:13" pos:end="654:24">
            <expr_stmt pos:start="653:13" pos:end="653:96"><expr pos:start="653:13" pos:end="653:95"><call pos:start="653:13" pos:end="653:95"><name pos:start="653:13" pos:end="653:23">EST_LOG_ERR</name><argument_list pos:start="653:24" pos:end="653:95">(<argument pos:start="653:25" pos:end="653:94"><expr pos:start="653:25" pos:end="653:94"><literal type="string" pos:start="653:25" pos:end="653:94">"Unable to save the path segment from the URI into the client context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="654:13" pos:end="654:24">return <expr pos:start="654:20" pos:end="654:23"><operator pos:start="654:20" pos:end="654:20">(</operator><name pos:start="654:21" pos:end="654:22">rv</name><operator pos:start="654:23" pos:end="654:23">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="658:5" pos:end="661:7">/*
     * Invoke client code to retrieve the CSR attributes.
     * Note: there is no need to authenticate the client (see sec 4.5)
     */</comment>
    <expr_stmt pos:start="662:5" pos:end="662:81"><expr pos:start="662:5" pos:end="662:80"><call pos:start="662:5" pos:end="662:80"><name pos:start="662:5" pos:end="662:16">EST_LOG_INFO</name><argument_list pos:start="662:17" pos:end="662:80">(<argument pos:start="662:18" pos:end="662:79"><expr pos:start="662:18" pos:end="662:79"><literal type="string" pos:start="662:18" pos:end="662:79">"Proxy: Attempting to retrieve CSR attrs from upstream server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="663:5" pos:end="663:84"><expr pos:start="663:5" pos:end="663:83"><name pos:start="663:5" pos:end="663:6">rv</name> <operator pos:start="663:8" pos:end="663:8">=</operator> <call pos:start="663:10" pos:end="663:83"><name pos:start="663:10" pos:end="663:32">est_client_get_csrattrs</name><argument_list pos:start="663:33" pos:end="663:83">(<argument pos:start="663:34" pos:end="663:43"><expr pos:start="663:34" pos:end="663:43"><name pos:start="663:34" pos:end="663:43">client_ctx</name></expr></argument>, <argument pos:start="663:46" pos:end="663:72"><expr pos:start="663:46" pos:end="663:72"><operator pos:start="663:46" pos:end="663:46">(</operator><name pos:start="663:47" pos:end="663:54">unsigned</name> <name pos:start="663:56" pos:end="663:59">char</name> <operator pos:start="663:61" pos:end="663:61">*</operator><operator pos:start="663:62" pos:end="663:62">*</operator><operator pos:start="663:63" pos:end="663:63">)</operator><operator pos:start="663:64" pos:end="663:64">&amp;</operator><name pos:start="663:65" pos:end="663:72">csr_data</name></expr></argument>, <argument pos:start="663:75" pos:end="663:82"><expr pos:start="663:75" pos:end="663:82"><operator pos:start="663:75" pos:end="663:75">&amp;</operator><name pos:start="663:76" pos:end="663:82">csr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="664:5" pos:end="668:7">/*
     * csr_data points to the memory allocated to hold the csr attributes,
     * which will be freed in this call stack.  To prevent a double-free
     * we null the to pointer on the client context.
     */</comment>
    <expr_stmt pos:start="669:5" pos:end="669:42"><expr pos:start="669:5" pos:end="669:41"><name pos:start="669:5" pos:end="669:34"><name pos:start="669:5" pos:end="669:14">client_ctx</name><operator pos:start="669:15" pos:end="669:16">-&gt;</operator><name pos:start="669:17" pos:end="669:34">retrieved_csrattrs</name></name> <operator pos:start="669:36" pos:end="669:36">=</operator> <name pos:start="669:38" pos:end="669:41">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="670:5" pos:end="670:43"><expr pos:start="670:5" pos:end="670:42"><name pos:start="670:5" pos:end="670:38"><name pos:start="670:5" pos:end="670:14">client_ctx</name><operator pos:start="670:15" pos:end="670:16">-&gt;</operator><name pos:start="670:17" pos:end="670:38">retrieved_csrattrs_len</name></name> <operator pos:start="670:40" pos:end="670:40">=</operator> <literal type="number" pos:start="670:42" pos:end="670:42">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="671:5" pos:end="714:5"><if pos:start="671:5" pos:end="710:5">if <condition pos:start="671:8" pos:end="671:27">(<expr pos:start="671:9" pos:end="671:26"><name pos:start="671:9" pos:end="671:10">rv</name> <operator pos:start="671:12" pos:end="671:13">==</operator> <name pos:start="671:15" pos:end="671:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="671:29" pos:end="710:5">{<block_content pos:start="672:9" pos:end="709:9">
	<expr_stmt pos:start="672:9" pos:end="672:33"><expr pos:start="672:9" pos:end="672:32"><name pos:start="672:9" pos:end="672:28"><name pos:start="672:9" pos:end="672:11">ctx</name><operator pos:start="672:12" pos:end="672:13">-&gt;</operator><name pos:start="672:14" pos:end="672:28">csr_pop_present</name></name> <operator pos:start="672:30" pos:end="672:30">=</operator> <literal type="number" pos:start="672:32" pos:end="672:32">0</literal></expr>;</expr_stmt>
	<if_stmt pos:start="673:9" pos:end="709:9"><if pos:start="673:9" pos:end="709:9">if <condition pos:start="673:12" pos:end="673:35">(<expr pos:start="673:13" pos:end="673:34"><name pos:start="673:13" pos:end="673:34"><name pos:start="673:13" pos:end="673:15">ctx</name><operator pos:start="673:16" pos:end="673:17">-&gt;</operator><name pos:start="673:18" pos:end="673:34">server_enable_pop</name></name></expr>)</condition> <block pos:start="673:37" pos:end="709:9">{<block_content pos:start="674:13" pos:end="708:13">
	    <expr_stmt pos:start="674:13" pos:end="674:83"><expr pos:start="674:13" pos:end="674:82"><name pos:start="674:13" pos:end="674:14">rv</name> <operator pos:start="674:16" pos:end="674:16">=</operator> <call pos:start="674:18" pos:end="674:82"><name pos:start="674:18" pos:end="674:49">est_is_challengePassword_present</name><argument_list pos:start="674:50" pos:end="674:82">(<argument pos:start="674:51" pos:end="674:58"><expr pos:start="674:51" pos:end="674:58"><name pos:start="674:51" pos:end="674:58">csr_data</name></expr></argument>, <argument pos:start="674:61" pos:end="674:67"><expr pos:start="674:61" pos:end="674:67"><name pos:start="674:61" pos:end="674:67">csr_len</name></expr></argument>, <argument pos:start="674:70" pos:end="674:81"><expr pos:start="674:70" pos:end="674:81"><operator pos:start="674:70" pos:end="674:70">&amp;</operator><name pos:start="674:71" pos:end="674:81">pop_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="675:13" pos:end="679:13"><if pos:start="675:13" pos:end="679:13">if <condition pos:start="675:16" pos:end="675:35">(<expr pos:start="675:17" pos:end="675:34"><name pos:start="675:17" pos:end="675:18">rv</name> <operator pos:start="675:20" pos:end="675:21">!=</operator> <name pos:start="675:23" pos:end="675:34">EST_ERR_NONE</name></expr>)</condition> <block pos:start="675:37" pos:end="679:13">{<block_content pos:start="676:17" pos:end="678:38">
		<expr_stmt pos:start="676:17" pos:end="676:61"><expr pos:start="676:17" pos:end="676:60"><call pos:start="676:17" pos:end="676:60"><name pos:start="676:17" pos:end="676:27">EST_LOG_ERR</name><argument_list pos:start="676:28" pos:end="676:60">(<argument pos:start="676:29" pos:end="676:59"><expr pos:start="676:29" pos:end="676:59"><literal type="string" pos:start="676:29" pos:end="676:59">"Error during PoP/sanity check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="677:17" pos:end="677:76"><expr pos:start="677:17" pos:end="677:75"><call pos:start="677:17" pos:end="677:75"><name pos:start="677:17" pos:end="677:35">est_send_http_error</name><argument_list pos:start="677:36" pos:end="677:75">(<argument pos:start="677:37" pos:end="677:39"><expr pos:start="677:37" pos:end="677:39"><name pos:start="677:37" pos:end="677:39">ctx</name></expr></argument>, <argument pos:start="677:42" pos:end="677:49"><expr pos:start="677:42" pos:end="677:49"><name pos:start="677:42" pos:end="677:49">http_ctx</name></expr></argument>, <argument pos:start="677:52" pos:end="677:74"><expr pos:start="677:52" pos:end="677:74"><name pos:start="677:52" pos:end="677:74">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:start="678:17" pos:end="678:38">return <expr pos:start="678:24" pos:end="678:37"><operator pos:start="678:24" pos:end="678:24">(</operator><name pos:start="678:25" pos:end="678:36">EST_ERR_NONE</name><operator pos:start="678:37" pos:end="678:37">)</operator></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt pos:start="680:13" pos:end="680:47"><expr pos:start="680:13" pos:end="680:46"><name pos:start="680:13" pos:end="680:32"><name pos:start="680:13" pos:end="680:15">ctx</name><operator pos:start="680:16" pos:end="680:17">-&gt;</operator><name pos:start="680:18" pos:end="680:32">csr_pop_present</name></name> <operator pos:start="680:34" pos:end="680:34">=</operator> <name pos:start="680:36" pos:end="680:46">pop_present</name></expr>;</expr_stmt>

	    <if_stmt pos:start="682:13" pos:end="708:13"><if pos:start="682:13" pos:end="708:13">if <condition pos:start="682:16" pos:end="682:38">(<expr pos:start="682:17" pos:end="682:37"><operator pos:start="682:17" pos:end="682:17">!</operator><name pos:start="682:18" pos:end="682:37"><name pos:start="682:18" pos:end="682:20">ctx</name><operator pos:start="682:21" pos:end="682:22">-&gt;</operator><name pos:start="682:23" pos:end="682:37">csr_pop_present</name></name></expr>)</condition> <block pos:start="682:40" pos:end="708:13">{<block_content pos:start="683:17" pos:end="707:38">
		<if_stmt pos:start="683:17" pos:end="693:17"><if pos:start="683:17" pos:end="693:17">if <condition pos:start="683:20" pos:end="683:33">(<expr pos:start="683:21" pos:end="683:32"><name pos:start="683:21" pos:end="683:27">csr_len</name> <operator pos:start="683:29" pos:end="683:30">==</operator> <literal type="number" pos:start="683:32" pos:end="683:32">0</literal></expr>)</condition> <block pos:start="683:35" pos:end="693:17">{<block_content pos:start="684:21" pos:end="692:85">
                    <expr_stmt pos:start="684:21" pos:end="684:64"><expr pos:start="684:21" pos:end="684:63"><name pos:start="684:21" pos:end="684:28">csr_data</name> <operator pos:start="684:30" pos:end="684:30">=</operator> <call pos:start="684:32" pos:end="684:63"><name pos:start="684:32" pos:end="684:37">malloc</name><argument_list pos:start="684:38" pos:end="684:63">(<argument pos:start="684:39" pos:end="684:62"><expr pos:start="684:39" pos:end="684:62"><name pos:start="684:39" pos:end="684:58">EST_CSRATTRS_POP_LEN</name> <operator pos:start="684:60" pos:end="684:60">+</operator> <literal type="number" pos:start="684:62" pos:end="684:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if_stmt pos:start="685:21" pos:end="687:21"><if pos:start="685:21" pos:end="687:21">if <condition pos:start="685:24" pos:end="685:34">(<expr pos:start="685:25" pos:end="685:33"><operator pos:start="685:25" pos:end="685:25">!</operator><name pos:start="685:26" pos:end="685:33">csr_data</name></expr>)</condition> <block pos:start="685:36" pos:end="687:21">{<block_content pos:start="686:25" pos:end="686:48">
			<return pos:start="686:25" pos:end="686:48">return <expr pos:start="686:32" pos:end="686:47"><operator pos:start="686:32" pos:end="686:32">(</operator><name pos:start="686:33" pos:end="686:46">EST_ERR_MALLOC</name><operator pos:start="686:47" pos:end="686:47">)</operator></expr>;</return>
		    </block_content>}</block></if></if_stmt>
		    <expr_stmt pos:start="688:21" pos:end="689:70"><expr pos:start="688:21" pos:end="689:69"><call pos:start="688:21" pos:end="689:69"><name pos:start="688:21" pos:end="688:29">strncpy_s</name><argument_list pos:start="688:30" pos:end="689:69">(<argument pos:start="688:31" pos:end="688:38"><expr pos:start="688:31" pos:end="688:38"><name pos:start="688:31" pos:end="688:38">csr_data</name></expr></argument>, <argument pos:start="688:41" pos:end="688:64"><expr pos:start="688:41" pos:end="688:64"><name pos:start="688:41" pos:end="688:60">EST_CSRATTRS_POP_LEN</name> <operator pos:start="688:62" pos:end="688:62">+</operator> <literal type="number" pos:start="688:64" pos:end="688:64">1</literal></expr></argument>, 
			      <argument pos:start="689:31" pos:end="689:46"><expr pos:start="689:31" pos:end="689:46"><name pos:start="689:31" pos:end="689:46">EST_CSRATTRS_POP</name></expr></argument>, <argument pos:start="689:49" pos:end="689:68"><expr pos:start="689:49" pos:end="689:68"><name pos:start="689:49" pos:end="689:68">EST_CSRATTRS_POP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="690:21" pos:end="690:55"><expr pos:start="690:21" pos:end="690:54"><name pos:start="690:21" pos:end="690:50"><name pos:start="690:21" pos:end="690:28">csr_data</name><index pos:start="690:29" pos:end="690:50">[<expr pos:start="690:30" pos:end="690:49"><name pos:start="690:30" pos:end="690:49">EST_CSRATTRS_POP_LEN</name></expr>]</index></name> <operator pos:start="690:52" pos:end="690:52">=</operator> <literal type="number" pos:start="690:54" pos:end="690:54">0</literal></expr>;</expr_stmt>
		    <expr_stmt pos:start="691:21" pos:end="691:51"><expr pos:start="691:21" pos:end="691:50"><name pos:start="691:21" pos:end="691:27">csr_len</name> <operator pos:start="691:29" pos:end="691:29">=</operator> <name pos:start="691:31" pos:end="691:50">EST_CSRATTRS_POP_LEN</name></expr>;</expr_stmt>
		    <return pos:start="692:21" pos:end="692:85">return <expr pos:start="692:28" pos:end="692:84"><operator pos:start="692:28" pos:end="692:28">(</operator><call pos:start="692:29" pos:end="692:83"><name pos:start="692:29" pos:end="692:49">est_send_csrattr_data</name><argument_list pos:start="692:50" pos:end="692:83">(<argument pos:start="692:51" pos:end="692:53"><expr pos:start="692:51" pos:end="692:53"><name pos:start="692:51" pos:end="692:53">ctx</name></expr></argument>, <argument pos:start="692:56" pos:end="692:63"><expr pos:start="692:56" pos:end="692:63"><name pos:start="692:56" pos:end="692:63">csr_data</name></expr></argument>, <argument pos:start="692:66" pos:end="692:72"><expr pos:start="692:66" pos:end="692:72"><name pos:start="692:66" pos:end="692:72">csr_len</name></expr></argument>, <argument pos:start="692:75" pos:end="692:82"><expr pos:start="692:75" pos:end="692:82"><name pos:start="692:75" pos:end="692:82">http_ctx</name></expr></argument>)</argument_list></call><operator pos:start="692:84" pos:end="692:84">)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="694:17" pos:end="694:95"><expr pos:start="694:17" pos:end="694:94"><name pos:start="694:17" pos:end="694:18">rv</name> <operator pos:start="694:20" pos:end="694:20">=</operator> <call pos:start="694:22" pos:end="694:94"><name pos:start="694:22" pos:end="694:46">est_add_challengePassword</name><argument_list pos:start="694:47" pos:end="694:94">(<argument pos:start="694:48" pos:end="694:55"><expr pos:start="694:48" pos:end="694:55"><name pos:start="694:48" pos:end="694:55">csr_data</name></expr></argument>, <argument pos:start="694:58" pos:end="694:64"><expr pos:start="694:58" pos:end="694:64"><name pos:start="694:58" pos:end="694:64">csr_len</name></expr></argument>, <argument pos:start="694:67" pos:end="694:79"><expr pos:start="694:67" pos:end="694:79"><operator pos:start="694:67" pos:end="694:67">&amp;</operator><name pos:start="694:68" pos:end="694:79">csr_data_pop</name></expr></argument>, <argument pos:start="694:82" pos:end="694:93"><expr pos:start="694:82" pos:end="694:93"><operator pos:start="694:82" pos:end="694:82">&amp;</operator><name pos:start="694:83" pos:end="694:93">csr_pop_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt pos:start="695:17" pos:end="702:17"><if pos:start="695:17" pos:end="702:17">if <condition pos:start="695:20" pos:end="695:39">(<expr pos:start="695:21" pos:end="695:38"><name pos:start="695:21" pos:end="695:22">rv</name> <operator pos:start="695:24" pos:end="695:25">!=</operator> <name pos:start="695:27" pos:end="695:38">EST_ERR_NONE</name></expr>)</condition> <block pos:start="695:41" pos:end="702:17">{<block_content pos:start="696:21" pos:end="701:42">
		    <if_stmt pos:start="696:21" pos:end="698:21"><if pos:start="696:21" pos:end="698:21">if <condition pos:start="696:24" pos:end="696:33">(<expr pos:start="696:25" pos:end="696:32"><name pos:start="696:25" pos:end="696:32">csr_data</name></expr>)</condition> <block pos:start="696:35" pos:end="698:21">{<block_content pos:start="697:25" pos:end="697:39">
		        <expr_stmt pos:start="697:25" pos:end="697:39"><expr pos:start="697:25" pos:end="697:38"><call pos:start="697:25" pos:end="697:38"><name pos:start="697:25" pos:end="697:28">free</name><argument_list pos:start="697:29" pos:end="697:38">(<argument pos:start="697:30" pos:end="697:37"><expr pos:start="697:30" pos:end="697:37"><name pos:start="697:30" pos:end="697:37">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		    <expr_stmt pos:start="699:21" pos:end="699:56"><expr pos:start="699:21" pos:end="699:55"><call pos:start="699:21" pos:end="699:55"><name pos:start="699:21" pos:end="699:31">EST_LOG_ERR</name><argument_list pos:start="699:32" pos:end="699:55">(<argument pos:start="699:33" pos:end="699:54"><expr pos:start="699:33" pos:end="699:54"><literal type="string" pos:start="699:33" pos:end="699:54">"Error during add PoP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt pos:start="700:21" pos:end="700:80"><expr pos:start="700:21" pos:end="700:79"><call pos:start="700:21" pos:end="700:79"><name pos:start="700:21" pos:end="700:39">est_send_http_error</name><argument_list pos:start="700:40" pos:end="700:79">(<argument pos:start="700:41" pos:end="700:43"><expr pos:start="700:41" pos:end="700:43"><name pos:start="700:41" pos:end="700:43">ctx</name></expr></argument>, <argument pos:start="700:46" pos:end="700:53"><expr pos:start="700:46" pos:end="700:53"><name pos:start="700:46" pos:end="700:53">http_ctx</name></expr></argument>, <argument pos:start="700:56" pos:end="700:78"><expr pos:start="700:56" pos:end="700:78"><name pos:start="700:56" pos:end="700:78">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <return pos:start="701:21" pos:end="701:42">return <expr pos:start="701:28" pos:end="701:41"><operator pos:start="701:28" pos:end="701:28">(</operator><name pos:start="701:29" pos:end="701:40">EST_ERR_NONE</name><operator pos:start="701:41" pos:end="701:41">)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt pos:start="703:17" pos:end="705:17"><if pos:start="703:17" pos:end="705:17">if <condition pos:start="703:20" pos:end="703:29">(<expr pos:start="703:21" pos:end="703:28"><name pos:start="703:21" pos:end="703:28">csr_data</name></expr>)</condition> <block pos:start="703:31" pos:end="705:17">{<block_content pos:start="704:21" pos:end="704:35">
		    <expr_stmt pos:start="704:21" pos:end="704:35"><expr pos:start="704:21" pos:end="704:34"><call pos:start="704:21" pos:end="704:34"><name pos:start="704:21" pos:end="704:24">free</name><argument_list pos:start="704:25" pos:end="704:34">(<argument pos:start="704:26" pos:end="704:33"><expr pos:start="704:26" pos:end="704:33"><name pos:start="704:26" pos:end="704:33">csr_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt pos:start="706:17" pos:end="706:40"><expr pos:start="706:17" pos:end="706:39"><name pos:start="706:17" pos:end="706:24">csr_data</name> <operator pos:start="706:26" pos:end="706:26">=</operator> <name pos:start="706:28" pos:end="706:39">csr_data_pop</name></expr>;</expr_stmt>
		<expr_stmt pos:start="707:17" pos:end="707:38"><expr pos:start="707:17" pos:end="707:37"><name pos:start="707:17" pos:end="707:23">csr_len</name> <operator pos:start="707:25" pos:end="707:25">=</operator> <name pos:start="707:27" pos:end="707:37">csr_pop_len</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="710:7" pos:end="714:5">else <block pos:start="710:12" pos:end="714:5">{<block_content pos:start="711:9" pos:end="713:30">
	<expr_stmt pos:start="711:9" pos:end="711:71"><expr pos:start="711:9" pos:end="711:70"><call pos:start="711:9" pos:end="711:70"><name pos:start="711:9" pos:end="711:19">EST_LOG_ERR</name><argument_list pos:start="711:20" pos:end="711:70">(<argument pos:start="711:21" pos:end="711:69"><expr pos:start="711:21" pos:end="711:69"><literal type="string" pos:start="711:21" pos:end="711:69">"Server not reachable or sent corrupt attributes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="712:9" pos:end="712:68"><expr pos:start="712:9" pos:end="712:67"><call pos:start="712:9" pos:end="712:67"><name pos:start="712:9" pos:end="712:27">est_send_http_error</name><argument_list pos:start="712:28" pos:end="712:67">(<argument pos:start="712:29" pos:end="712:31"><expr pos:start="712:29" pos:end="712:31"><name pos:start="712:29" pos:end="712:31">ctx</name></expr></argument>, <argument pos:start="712:34" pos:end="712:41"><expr pos:start="712:34" pos:end="712:41"><name pos:start="712:34" pos:end="712:41">http_ctx</name></expr></argument>, <argument pos:start="712:44" pos:end="712:66"><expr pos:start="712:44" pos:end="712:66"><name pos:start="712:44" pos:end="712:66">EST_ERR_HTTP_NO_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="713:9" pos:end="713:30">return <expr pos:start="713:16" pos:end="713:29"><operator pos:start="713:16" pos:end="713:16">(</operator><name pos:start="713:17" pos:end="713:28">EST_ERR_NONE</name><operator pos:start="713:29" pos:end="713:29">)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return pos:start="715:5" pos:end="715:69">return <expr pos:start="715:12" pos:end="715:68"><operator pos:start="715:12" pos:end="715:12">(</operator><call pos:start="715:13" pos:end="715:67"><name pos:start="715:13" pos:end="715:33">est_send_csrattr_data</name><argument_list pos:start="715:34" pos:end="715:67">(<argument pos:start="715:35" pos:end="715:37"><expr pos:start="715:35" pos:end="715:37"><name pos:start="715:35" pos:end="715:37">ctx</name></expr></argument>, <argument pos:start="715:40" pos:end="715:47"><expr pos:start="715:40" pos:end="715:47"><name pos:start="715:40" pos:end="715:47">csr_data</name></expr></argument>, <argument pos:start="715:50" pos:end="715:56"><expr pos:start="715:50" pos:end="715:56"><name pos:start="715:50" pos:end="715:56">csr_len</name></expr></argument>, <argument pos:start="715:59" pos:end="715:66"><expr pos:start="715:59" pos:end="715:66"><name pos:start="715:59" pos:end="715:66">http_ctx</name></expr></argument>)</argument_list></call><operator pos:start="715:68" pos:end="715:68">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" pos:start="717:1" pos:end="731:3">/*
 * This function should be called by the web server layer when
 * a HTTP request arrives on the listening port of the EST proxy.
 * It will determine the EST request type and dispatch the request
 * to the appropriate handler.
 *
 * Paramters:
 *      ctx:	    Pointer to EST_CTX
 *      http_ctx:   Context pointer from web server
 *      method:     The HTML method in the request, should be either "GET" or "POST"
 *	uri:	    pointer to HTTP URI
 *	body:	    pointer to full HTML body contents
 *	body_len:   length of HTML body
 *	ct:         HTML content type header
 */</comment>
<function pos:start="732:1" pos:end="978:1"><type pos:start="732:1" pos:end="732:9"><name pos:start="732:1" pos:end="732:9">EST_ERROR</name></type> <name pos:start="732:11" pos:end="732:32">est_proxy_http_request</name> <parameter_list pos:start="732:34" pos:end="734:75">(<parameter pos:start="732:35" pos:end="732:46"><decl pos:start="732:35" pos:end="732:46"><type pos:start="732:35" pos:end="732:46"><name pos:start="732:35" pos:end="732:41">EST_CTX</name> <modifier pos:start="732:43" pos:end="732:43">*</modifier></type><name pos:start="732:44" pos:end="732:46">ctx</name></decl></parameter>, <parameter pos:start="732:49" pos:end="732:62"><decl pos:start="732:49" pos:end="732:62"><type pos:start="732:49" pos:end="732:62"><name pos:start="732:49" pos:end="732:52">void</name> <modifier pos:start="732:54" pos:end="732:54">*</modifier></type><name pos:start="732:55" pos:end="732:62">http_ctx</name></decl></parameter>,
                                  <parameter pos:start="733:35" pos:end="733:46"><decl pos:start="733:35" pos:end="733:46"><type pos:start="733:35" pos:end="733:46"><name pos:start="733:35" pos:end="733:38">char</name> <modifier pos:start="733:40" pos:end="733:40">*</modifier></type><name pos:start="733:41" pos:end="733:46">method</name></decl></parameter>, <parameter pos:start="733:49" pos:end="733:57"><decl pos:start="733:49" pos:end="733:57"><type pos:start="733:49" pos:end="733:57"><name pos:start="733:49" pos:end="733:52">char</name> <modifier pos:start="733:54" pos:end="733:54">*</modifier></type><name pos:start="733:55" pos:end="733:57">uri</name></decl></parameter>,
                                  <parameter pos:start="734:35" pos:end="734:44"><decl pos:start="734:35" pos:end="734:44"><type pos:start="734:35" pos:end="734:44"><name pos:start="734:35" pos:end="734:38">char</name> <modifier pos:start="734:40" pos:end="734:40">*</modifier></type><name pos:start="734:41" pos:end="734:44">body</name></decl></parameter>, <parameter pos:start="734:47" pos:end="734:58"><decl pos:start="734:47" pos:end="734:58"><type pos:start="734:47" pos:end="734:58"><name pos:start="734:47" pos:end="734:49">int</name></type> <name pos:start="734:51" pos:end="734:58">body_len</name></decl></parameter>, <parameter pos:start="734:61" pos:end="734:74"><decl pos:start="734:61" pos:end="734:74"><type pos:start="734:61" pos:end="734:74"><specifier pos:start="734:61" pos:end="734:65">const</specifier> <name pos:start="734:67" pos:end="734:70">char</name> <modifier pos:start="734:72" pos:end="734:72">*</modifier></type><name pos:start="734:73" pos:end="734:74">ct</name></decl></parameter>)</parameter_list>
<block pos:start="735:1" pos:end="978:1">{<block_content pos:start="736:5" pos:end="977:26">
    <decl_stmt pos:start="736:5" pos:end="736:13"><decl pos:start="736:5" pos:end="736:12"><type pos:start="736:5" pos:end="736:9"><name pos:start="736:5" pos:end="736:7">SSL</name> <modifier pos:start="736:9" pos:end="736:9">*</modifier></type><name pos:start="736:10" pos:end="736:12">ssl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="737:5" pos:end="737:17"><decl pos:start="737:5" pos:end="737:16"><type pos:start="737:5" pos:end="737:13"><name pos:start="737:5" pos:end="737:13">EST_ERROR</name></type> <name pos:start="737:15" pos:end="737:16">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="738:5" pos:end="738:13"><decl pos:start="738:5" pos:end="738:12"><type pos:start="738:5" pos:end="738:7"><name pos:start="738:5" pos:end="738:7">int</name></type> <name pos:start="738:9" pos:end="738:12">diff</name></decl>;</decl_stmt>
    <decl_stmt pos:start="739:5" pos:end="739:21"><decl pos:start="739:5" pos:end="739:20"><type pos:start="739:5" pos:end="739:11"><name pos:start="739:5" pos:end="739:11">errno_t</name></type> <name pos:start="739:13" pos:end="739:20">safec_rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="740:5" pos:end="740:28"><decl pos:start="740:5" pos:end="740:27"><type pos:start="740:5" pos:end="740:17"><name pos:start="740:5" pos:end="740:17">EST_OPERATION</name></type> <name pos:start="740:19" pos:end="740:27">operation</name></decl>;</decl_stmt>
    <decl_stmt pos:start="741:5" pos:end="741:26"><decl pos:start="741:5" pos:end="741:25"><type pos:start="741:5" pos:end="741:10"><name pos:start="741:5" pos:end="741:8">char</name> <modifier pos:start="741:10" pos:end="741:10">*</modifier></type><name pos:start="741:11" pos:end="741:18">path_seg</name> <init pos:start="741:20" pos:end="741:25">= <expr pos:start="741:22" pos:end="741:25"><name pos:start="741:22" pos:end="741:25">NULL</name></expr></init></decl>;</decl_stmt>    
    <decl_stmt pos:start="742:5" pos:end="742:32"><decl pos:start="742:5" pos:end="742:31"><type pos:start="742:5" pos:end="742:13"><name pos:start="742:5" pos:end="742:13">EST_ERROR</name></type> <name pos:start="742:15" pos:end="742:16">rv</name> <init pos:start="742:18" pos:end="742:31">= <expr pos:start="742:20" pos:end="742:31"><name pos:start="742:20" pos:end="742:31">EST_ERR_NONE</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="744:5" pos:end="746:5"><if pos:start="744:5" pos:end="746:5">if <condition pos:start="744:8" pos:end="744:13">(<expr pos:start="744:9" pos:end="744:12"><operator pos:start="744:9" pos:end="744:9">!</operator><name pos:start="744:10" pos:end="744:12">ctx</name></expr>)</condition> <block pos:start="744:15" pos:end="746:5">{<block_content pos:start="745:9" pos:end="745:32">
        <return pos:start="745:9" pos:end="745:32">return <expr pos:start="745:16" pos:end="745:31"><operator pos:start="745:16" pos:end="745:16">(</operator><name pos:start="745:17" pos:end="745:30">EST_ERR_NO_CTX</name><operator pos:start="745:31" pos:end="745:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="748:5" pos:end="750:7">/*
     * Verify the context is for a proxy, not a client or server
     */</comment>
    <if_stmt pos:start="751:5" pos:end="753:5"><if pos:start="751:5" pos:end="753:5">if <condition pos:start="751:8" pos:end="751:35">(<expr pos:start="751:9" pos:end="751:34"><name pos:start="751:9" pos:end="751:21"><name pos:start="751:9" pos:end="751:11">ctx</name><operator pos:start="751:12" pos:end="751:13">-&gt;</operator><name pos:start="751:14" pos:end="751:21">est_mode</name></name> <operator pos:start="751:23" pos:end="751:24">!=</operator> <name pos:start="751:26" pos:end="751:34">EST_PROXY</name></expr>)</condition> <block pos:start="751:37" pos:end="753:5">{<block_content pos:start="752:9" pos:end="752:34">
        <return pos:start="752:9" pos:end="752:34">return <expr pos:start="752:16" pos:end="752:33"><operator pos:start="752:16" pos:end="752:16">(</operator><name pos:start="752:17" pos:end="752:32">EST_ERR_BAD_MODE</name><operator pos:start="752:33" pos:end="752:33">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="755:5" pos:end="755:51"><expr pos:start="755:5" pos:end="755:50"><name pos:start="755:5" pos:end="755:6">rv</name> <operator pos:start="755:8" pos:end="755:8">=</operator> <call pos:start="755:10" pos:end="755:50"><name pos:start="755:10" pos:end="755:22">est_parse_uri</name><argument_list pos:start="755:23" pos:end="755:50">(<argument pos:start="755:24" pos:end="755:26"><expr pos:start="755:24" pos:end="755:26"><name pos:start="755:24" pos:end="755:26">uri</name></expr></argument>, <argument pos:start="755:29" pos:end="755:38"><expr pos:start="755:29" pos:end="755:38"><operator pos:start="755:29" pos:end="755:29">&amp;</operator><name pos:start="755:30" pos:end="755:38">operation</name></expr></argument>, <argument pos:start="755:41" pos:end="755:49"><expr pos:start="755:41" pos:end="755:49"><operator pos:start="755:41" pos:end="755:41">&amp;</operator><name pos:start="755:42" pos:end="755:49">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="756:5" pos:end="759:5"><if pos:start="756:5" pos:end="759:5">if <condition pos:start="756:8" pos:end="756:27">(<expr pos:start="756:9" pos:end="756:26"><name pos:start="756:9" pos:end="756:10">rv</name> <operator pos:start="756:12" pos:end="756:13">!=</operator> <name pos:start="756:15" pos:end="756:26">EST_ERR_NONE</name></expr>)</condition> <block pos:start="756:29" pos:end="759:5">{<block_content pos:start="757:9" pos:end="758:20">
        <expr_stmt pos:start="757:9" pos:end="757:47"><expr pos:start="757:9" pos:end="757:46"><call pos:start="757:9" pos:end="757:46"><name pos:start="757:9" pos:end="757:27">est_send_http_error</name><argument_list pos:start="757:28" pos:end="757:46">(<argument pos:start="757:29" pos:end="757:31"><expr pos:start="757:29" pos:end="757:31"><name pos:start="757:29" pos:end="757:31">ctx</name></expr></argument>, <argument pos:start="757:34" pos:end="757:41"><expr pos:start="757:34" pos:end="757:41"><name pos:start="757:34" pos:end="757:41">http_ctx</name></expr></argument>, <argument pos:start="757:44" pos:end="757:45"><expr pos:start="757:44" pos:end="757:45"><name pos:start="757:44" pos:end="757:45">rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="758:9" pos:end="758:20">return <expr pos:start="758:16" pos:end="758:19"><operator pos:start="758:16" pos:end="758:16">(</operator><name pos:start="758:17" pos:end="758:18">rv</name><operator pos:start="758:19" pos:end="758:19">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="761:5" pos:end="763:7">/*
     * See if this is a cacerts request
     */</comment>
    <if_stmt pos:start="764:5" pos:end="973:5"><if pos:start="764:5" pos:end="785:5">if <condition pos:start="764:8" pos:end="764:36">(<expr pos:start="764:9" pos:end="764:35"><name pos:start="764:9" pos:end="764:17">operation</name> <operator pos:start="764:19" pos:end="764:20">==</operator> <name pos:start="764:22" pos:end="764:35">EST_OP_CACERTS</name></expr>)</condition> <block pos:start="764:38" pos:end="785:5">{<block_content pos:start="766:9" pos:end="784:9">
        <comment type="block" pos:start="765:9" pos:end="765:33">/* Only GET is allowed */</comment>
        <expr_stmt pos:start="766:9" pos:end="766:71"><expr pos:start="766:9" pos:end="766:70"><name pos:start="766:9" pos:end="766:16">safec_rc</name> <operator pos:start="766:18" pos:end="766:18">=</operator> <call pos:start="766:20" pos:end="766:70"><name pos:start="766:20" pos:end="766:27">strcmp_s</name><argument_list pos:start="766:28" pos:end="766:70">(<argument pos:start="766:29" pos:end="766:34"><expr pos:start="766:29" pos:end="766:34"><name pos:start="766:29" pos:end="766:34">method</name></expr></argument>, <argument pos:start="766:37" pos:end="766:55"><expr pos:start="766:37" pos:end="766:55"><name pos:start="766:37" pos:end="766:55">MAX_HTTP_METHOD_LEN</name></expr></argument>, <argument pos:start="766:58" pos:end="766:62"><expr pos:start="766:58" pos:end="766:62"><literal type="string" pos:start="766:58" pos:end="766:62">"GET"</literal></expr></argument>, <argument pos:start="766:65" pos:end="766:69"><expr pos:start="766:65" pos:end="766:69"><operator pos:start="766:65" pos:end="766:65">&amp;</operator><name pos:start="766:66" pos:end="766:69">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="767:9" pos:end="769:9"><if pos:start="767:9" pos:end="769:9">if <condition pos:start="767:12" pos:end="767:28">(<expr pos:start="767:13" pos:end="767:27"><name pos:start="767:13" pos:end="767:20">safec_rc</name> <operator pos:start="767:22" pos:end="767:23">!=</operator> <name pos:start="767:25" pos:end="767:27">EOK</name></expr>)</condition> <block pos:start="767:30" pos:end="769:9">{<block_content pos:start="768:13" pos:end="768:61">
            <expr_stmt pos:start="768:13" pos:end="768:61"><expr pos:start="768:13" pos:end="768:60"><call pos:start="768:13" pos:end="768:60"><name pos:start="768:13" pos:end="768:24">EST_LOG_INFO</name><argument_list pos:start="768:25" pos:end="768:60">(<argument pos:start="768:26" pos:end="768:49"><expr pos:start="768:26" pos:end="768:49"><literal type="string" pos:start="768:26" pos:end="768:49">"strcmp_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="768:52" pos:end="768:59"><expr pos:start="768:52" pos:end="768:59"><name pos:start="768:52" pos:end="768:59">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="771:9" pos:end="776:9"><if pos:start="771:9" pos:end="776:9">if <condition pos:start="771:12" pos:end="771:17">(<expr pos:start="771:13" pos:end="771:16"><name pos:start="771:13" pos:end="771:16">diff</name></expr>)</condition> <block pos:start="771:19" pos:end="776:9">{<block_content pos:start="772:13" pos:end="775:42">
            <expr_stmt pos:start="772:13" pos:end="772:69"><expr pos:start="772:13" pos:end="772:68"><call pos:start="772:13" pos:end="772:68"><name pos:start="772:13" pos:end="772:31">est_send_http_error</name><argument_list pos:start="772:32" pos:end="772:68">(<argument pos:start="772:33" pos:end="772:35"><expr pos:start="772:33" pos:end="772:35"><name pos:start="772:33" pos:end="772:35">ctx</name></expr></argument>, <argument pos:start="772:38" pos:end="772:45"><expr pos:start="772:38" pos:end="772:45"><name pos:start="772:38" pos:end="772:45">http_ctx</name></expr></argument>, <argument pos:start="772:48" pos:end="772:67"><expr pos:start="772:48" pos:end="772:67"><name pos:start="772:48" pos:end="772:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="773:13" pos:end="773:27"><expr pos:start="773:13" pos:end="773:26"><call pos:start="773:13" pos:end="773:26"><name pos:start="773:13" pos:end="773:16">free</name><argument_list pos:start="773:17" pos:end="773:26">(<argument pos:start="773:18" pos:end="773:25"><expr pos:start="773:18" pos:end="773:25"><name pos:start="773:18" pos:end="773:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="774:13" pos:end="774:28"><expr pos:start="774:13" pos:end="774:27"><name pos:start="774:13" pos:end="774:20">path_seg</name> <operator pos:start="774:22" pos:end="774:22">=</operator> <name pos:start="774:24" pos:end="774:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="775:13" pos:end="775:42">return <expr pos:start="775:20" pos:end="775:41"><operator pos:start="775:20" pos:end="775:20">(</operator><name pos:start="775:21" pos:end="775:40">EST_ERR_WRONG_METHOD</name><operator pos:start="775:41" pos:end="775:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt pos:start="778:9" pos:end="778:63"><expr pos:start="778:9" pos:end="778:62"><name pos:start="778:9" pos:end="778:10">rc</name> <operator pos:start="778:12" pos:end="778:12">=</operator> <call pos:start="778:14" pos:end="778:62"><name pos:start="778:14" pos:end="778:37">est_proxy_handle_cacerts</name><argument_list pos:start="778:38" pos:end="778:62">(<argument pos:start="778:39" pos:end="778:41"><expr pos:start="778:39" pos:end="778:41"><name pos:start="778:39" pos:end="778:41">ctx</name></expr></argument>, <argument pos:start="778:44" pos:end="778:51"><expr pos:start="778:44" pos:end="778:51"><name pos:start="778:44" pos:end="778:51">http_ctx</name></expr></argument>, <argument pos:start="778:54" pos:end="778:61"><expr pos:start="778:54" pos:end="778:61"><name pos:start="778:54" pos:end="778:61">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="779:9" pos:end="784:9"><if pos:start="779:9" pos:end="784:9">if <condition pos:start="779:12" pos:end="779:31">(<expr pos:start="779:13" pos:end="779:30"><name pos:start="779:13" pos:end="779:14">rc</name> <operator pos:start="779:16" pos:end="779:17">!=</operator> <name pos:start="779:19" pos:end="779:30">EST_ERR_NONE</name></expr>)</condition> <block pos:start="779:33" pos:end="784:9">{<block_content pos:start="780:13" pos:end="783:24">
            <expr_stmt pos:start="780:13" pos:end="780:51"><expr pos:start="780:13" pos:end="780:50"><call pos:start="780:13" pos:end="780:50"><name pos:start="780:13" pos:end="780:31">est_send_http_error</name><argument_list pos:start="780:32" pos:end="780:50">(<argument pos:start="780:33" pos:end="780:35"><expr pos:start="780:33" pos:end="780:35"><name pos:start="780:33" pos:end="780:35">ctx</name></expr></argument>, <argument pos:start="780:38" pos:end="780:45"><expr pos:start="780:38" pos:end="780:45"><name pos:start="780:38" pos:end="780:45">http_ctx</name></expr></argument>, <argument pos:start="780:48" pos:end="780:49"><expr pos:start="780:48" pos:end="780:49"><name pos:start="780:48" pos:end="780:49">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="781:13" pos:end="781:27"><expr pos:start="781:13" pos:end="781:26"><call pos:start="781:13" pos:end="781:26"><name pos:start="781:13" pos:end="781:16">free</name><argument_list pos:start="781:17" pos:end="781:26">(<argument pos:start="781:18" pos:end="781:25"><expr pos:start="781:18" pos:end="781:25"><name pos:start="781:18" pos:end="781:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="782:13" pos:end="782:28"><expr pos:start="782:13" pos:end="782:27"><name pos:start="782:13" pos:end="782:20">path_seg</name> <operator pos:start="782:22" pos:end="782:22">=</operator> <name pos:start="782:24" pos:end="782:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="783:13" pos:end="783:24">return <expr pos:start="783:20" pos:end="783:23"><operator pos:start="783:20" pos:end="783:20">(</operator><name pos:start="783:21" pos:end="783:22">rc</name><operator pos:start="783:23" pos:end="783:23">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>            
    </block_content>}</block></if>

    <comment type="block" pos:start="787:5" pos:end="789:7">/*
     * See if this is a simple enrollment request
     */</comment>
    <if type="elseif" pos:start="790:5" pos:end="849:5">else if <condition pos:start="790:13" pos:end="790:47">(<expr pos:start="790:14" pos:end="790:46"><name pos:start="790:14" pos:end="790:22">operation</name> <operator pos:start="790:24" pos:end="790:25">==</operator> <name pos:start="790:27" pos:end="790:46">EST_OP_SIMPLE_ENROLL</name></expr>)</condition> <block pos:start="790:49" pos:end="849:5">{<block_content pos:start="792:9" pos:end="848:9">
        <comment type="block" pos:start="791:9" pos:end="791:34">/* Only POST is allowed */</comment>
        <expr_stmt pos:start="792:9" pos:end="792:72"><expr pos:start="792:9" pos:end="792:71"><name pos:start="792:9" pos:end="792:16">safec_rc</name> <operator pos:start="792:18" pos:end="792:18">=</operator> <call pos:start="792:20" pos:end="792:71"><name pos:start="792:20" pos:end="792:27">strcmp_s</name><argument_list pos:start="792:28" pos:end="792:71">(<argument pos:start="792:29" pos:end="792:34"><expr pos:start="792:29" pos:end="792:34"><name pos:start="792:29" pos:end="792:34">method</name></expr></argument>, <argument pos:start="792:37" pos:end="792:55"><expr pos:start="792:37" pos:end="792:55"><name pos:start="792:37" pos:end="792:55">MAX_HTTP_METHOD_LEN</name></expr></argument>, <argument pos:start="792:58" pos:end="792:63"><expr pos:start="792:58" pos:end="792:63"><literal type="string" pos:start="792:58" pos:end="792:63">"POST"</literal></expr></argument>, <argument pos:start="792:66" pos:end="792:70"><expr pos:start="792:66" pos:end="792:70"><operator pos:start="792:66" pos:end="792:66">&amp;</operator><name pos:start="792:67" pos:end="792:70">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="793:9" pos:end="795:9"><if pos:start="793:9" pos:end="795:9">if <condition pos:start="793:12" pos:end="793:28">(<expr pos:start="793:13" pos:end="793:27"><name pos:start="793:13" pos:end="793:20">safec_rc</name> <operator pos:start="793:22" pos:end="793:23">!=</operator> <name pos:start="793:25" pos:end="793:27">EOK</name></expr>)</condition> <block pos:start="793:30" pos:end="795:9">{<block_content pos:start="794:13" pos:end="794:61">
            <expr_stmt pos:start="794:13" pos:end="794:61"><expr pos:start="794:13" pos:end="794:60"><call pos:start="794:13" pos:end="794:60"><name pos:start="794:13" pos:end="794:24">EST_LOG_INFO</name><argument_list pos:start="794:25" pos:end="794:60">(<argument pos:start="794:26" pos:end="794:49"><expr pos:start="794:26" pos:end="794:49"><literal type="string" pos:start="794:26" pos:end="794:49">"strcmp_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="794:52" pos:end="794:59"><expr pos:start="794:52" pos:end="794:59"><name pos:start="794:52" pos:end="794:59">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="797:9" pos:end="802:9"><if pos:start="797:9" pos:end="802:9">if <condition pos:start="797:12" pos:end="797:17">(<expr pos:start="797:13" pos:end="797:16"><name pos:start="797:13" pos:end="797:16">diff</name></expr>)</condition> <block pos:start="797:19" pos:end="802:9">{<block_content pos:start="798:13" pos:end="801:42">
            <expr_stmt pos:start="798:13" pos:end="798:69"><expr pos:start="798:13" pos:end="798:68"><call pos:start="798:13" pos:end="798:68"><name pos:start="798:13" pos:end="798:31">est_send_http_error</name><argument_list pos:start="798:32" pos:end="798:68">(<argument pos:start="798:33" pos:end="798:35"><expr pos:start="798:33" pos:end="798:35"><name pos:start="798:33" pos:end="798:35">ctx</name></expr></argument>, <argument pos:start="798:38" pos:end="798:45"><expr pos:start="798:38" pos:end="798:45"><name pos:start="798:38" pos:end="798:45">http_ctx</name></expr></argument>, <argument pos:start="798:48" pos:end="798:67"><expr pos:start="798:48" pos:end="798:67"><name pos:start="798:48" pos:end="798:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="799:13" pos:end="799:27"><expr pos:start="799:13" pos:end="799:26"><call pos:start="799:13" pos:end="799:26"><name pos:start="799:13" pos:end="799:16">free</name><argument_list pos:start="799:17" pos:end="799:26">(<argument pos:start="799:18" pos:end="799:25"><expr pos:start="799:18" pos:end="799:25"><name pos:start="799:18" pos:end="799:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="800:13" pos:end="800:28"><expr pos:start="800:13" pos:end="800:27"><name pos:start="800:13" pos:end="800:20">path_seg</name> <operator pos:start="800:22" pos:end="800:22">=</operator> <name pos:start="800:24" pos:end="800:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="801:13" pos:end="801:42">return <expr pos:start="801:20" pos:end="801:41"><operator pos:start="801:20" pos:end="801:20">(</operator><name pos:start="801:21" pos:end="801:40">EST_ERR_WRONG_METHOD</name><operator pos:start="801:41" pos:end="801:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
	<if_stmt pos:start="803:9" pos:end="809:9"><if pos:start="803:9" pos:end="809:9">if <condition pos:start="803:12" pos:end="803:16">(<expr pos:start="803:13" pos:end="803:15"><operator pos:start="803:13" pos:end="803:13">!</operator><name pos:start="803:14" pos:end="803:15">ct</name></expr>)</condition> <block pos:start="803:18" pos:end="809:9">{<block_content pos:start="804:13" pos:end="808:46">
            <expr_stmt pos:start="804:13" pos:end="804:78"><expr pos:start="804:13" pos:end="804:77"><call pos:start="804:13" pos:end="804:77"><name pos:start="804:13" pos:end="804:24">EST_LOG_WARN</name><argument_list pos:start="804:25" pos:end="804:77">(<argument pos:start="804:26" pos:end="804:76"><expr pos:start="804:26" pos:end="804:76"><literal type="string" pos:start="804:26" pos:end="804:76">"Incoming HTTP header has no Content-Type header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="805:13" pos:end="805:67"><expr pos:start="805:13" pos:end="805:66"><call pos:start="805:13" pos:end="805:66"><name pos:start="805:13" pos:end="805:31">est_send_http_error</name><argument_list pos:start="805:32" pos:end="805:66">(<argument pos:start="805:33" pos:end="805:35"><expr pos:start="805:33" pos:end="805:35"><name pos:start="805:33" pos:end="805:35">ctx</name></expr></argument>, <argument pos:start="805:38" pos:end="805:45"><expr pos:start="805:38" pos:end="805:45"><name pos:start="805:38" pos:end="805:45">http_ctx</name></expr></argument>, <argument pos:start="805:48" pos:end="805:65"><expr pos:start="805:48" pos:end="805:65"><name pos:start="805:48" pos:end="805:65">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="806:13" pos:end="806:27"><expr pos:start="806:13" pos:end="806:26"><call pos:start="806:13" pos:end="806:26"><name pos:start="806:13" pos:end="806:16">free</name><argument_list pos:start="806:17" pos:end="806:26">(<argument pos:start="806:18" pos:end="806:25"><expr pos:start="806:18" pos:end="806:25"><name pos:start="806:18" pos:end="806:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="807:13" pos:end="807:28"><expr pos:start="807:13" pos:end="807:27"><name pos:start="807:13" pos:end="807:20">path_seg</name> <operator pos:start="807:22" pos:end="807:22">=</operator> <name pos:start="807:24" pos:end="807:27">NULL</name></expr>;</expr_stmt>
	    <return pos:start="808:13" pos:end="808:46">return <expr pos:start="808:20" pos:end="808:45"><operator pos:start="808:20" pos:end="808:20">(</operator><name pos:start="808:21" pos:end="808:44">EST_ERR_BAD_CONTENT_TYPE</name><operator pos:start="808:45" pos:end="808:45">)</operator></expr>;</return> 
	</block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="810:9" pos:end="815:11">/*
         * In this case body is indicating that no content was passed in, and
         * this is a enroll request.  This cannot be correct because a CSR is
         * required.  If this continues, and we're in proxy mode, we'll try to
         * forward this non-existent CSR
         */</comment>
        <if_stmt pos:start="816:9" pos:end="822:9"><if pos:start="816:9" pos:end="822:9">if <condition pos:start="816:12" pos:end="816:25">(<expr pos:start="816:13" pos:end="816:24"><name pos:start="816:13" pos:end="816:16">body</name> <operator pos:start="816:18" pos:end="816:19">==</operator> <name pos:start="816:21" pos:end="816:24">NULL</name></expr>)</condition> <block pos:start="816:27" pos:end="822:9">{<block_content pos:start="817:13" pos:end="821:45">
            <expr_stmt pos:start="817:13" pos:end="817:71"><expr pos:start="817:13" pos:end="817:70"><call pos:start="817:13" pos:end="817:70"><name pos:start="817:13" pos:end="817:24">EST_LOG_WARN</name><argument_list pos:start="817:25" pos:end="817:70">(<argument pos:start="817:26" pos:end="817:69"><expr pos:start="817:26" pos:end="817:69"><literal type="string" pos:start="817:26" pos:end="817:69">"Incoming HTTP header has no CSR content.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="818:13" pos:end="818:67"><expr pos:start="818:13" pos:end="818:66"><call pos:start="818:13" pos:end="818:66"><name pos:start="818:13" pos:end="818:31">est_send_http_error</name><argument_list pos:start="818:32" pos:end="818:66">(<argument pos:start="818:33" pos:end="818:35"><expr pos:start="818:33" pos:end="818:35"><name pos:start="818:33" pos:end="818:35">ctx</name></expr></argument>, <argument pos:start="818:38" pos:end="818:45"><expr pos:start="818:38" pos:end="818:45"><name pos:start="818:38" pos:end="818:45">http_ctx</name></expr></argument>, <argument pos:start="818:48" pos:end="818:65"><expr pos:start="818:48" pos:end="818:65"><name pos:start="818:48" pos:end="818:65">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="819:13" pos:end="819:27"><expr pos:start="819:13" pos:end="819:26"><call pos:start="819:13" pos:end="819:26"><name pos:start="819:13" pos:end="819:16">free</name><argument_list pos:start="819:17" pos:end="819:26">(<argument pos:start="819:18" pos:end="819:25"><expr pos:start="819:18" pos:end="819:25"><name pos:start="819:18" pos:end="819:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="820:13" pos:end="820:28"><expr pos:start="820:13" pos:end="820:27"><name pos:start="820:13" pos:end="820:20">path_seg</name> <operator pos:start="820:22" pos:end="820:22">=</operator> <name pos:start="820:24" pos:end="820:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="821:13" pos:end="821:45">return <expr pos:start="821:20" pos:end="821:44"><operator pos:start="821:20" pos:end="821:20">(</operator><name pos:start="821:21" pos:end="821:43">EST_ERR_BAD_CONTENT_LEN</name><operator pos:start="821:44" pos:end="821:44">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block" pos:start="824:9" pos:end="827:11">/*
         * Get the SSL context, which is required for authenticating
         * the client.
         */</comment>
        <expr_stmt pos:start="828:9" pos:end="828:46"><expr pos:start="828:9" pos:end="828:45"><name pos:start="828:9" pos:end="828:11">ssl</name> <operator pos:start="828:13" pos:end="828:13">=</operator> <operator pos:start="828:15" pos:end="828:15">(</operator><name pos:start="828:16" pos:end="828:18">SSL</name><operator pos:start="828:19" pos:end="828:19">*</operator><operator pos:start="828:20" pos:end="828:20">)</operator><call pos:start="828:21" pos:end="828:45"><name pos:start="828:21" pos:end="828:35">mg_get_conn_ssl</name><argument_list pos:start="828:36" pos:end="828:45">(<argument pos:start="828:37" pos:end="828:44"><expr pos:start="828:37" pos:end="828:44"><name pos:start="828:37" pos:end="828:44">http_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="829:9" pos:end="834:9"><if pos:start="829:9" pos:end="834:9">if <condition pos:start="829:12" pos:end="829:17">(<expr pos:start="829:13" pos:end="829:16"><operator pos:start="829:13" pos:end="829:13">!</operator><name pos:start="829:14" pos:end="829:16">ssl</name></expr>)</condition> <block pos:start="829:19" pos:end="834:9">{<block_content pos:start="830:13" pos:end="833:40">
            <expr_stmt pos:start="830:13" pos:end="830:67"><expr pos:start="830:13" pos:end="830:66"><call pos:start="830:13" pos:end="830:66"><name pos:start="830:13" pos:end="830:31">est_send_http_error</name><argument_list pos:start="830:32" pos:end="830:66">(<argument pos:start="830:33" pos:end="830:35"><expr pos:start="830:33" pos:end="830:35"><name pos:start="830:33" pos:end="830:35">ctx</name></expr></argument>, <argument pos:start="830:38" pos:end="830:45"><expr pos:start="830:38" pos:end="830:45"><name pos:start="830:38" pos:end="830:45">http_ctx</name></expr></argument>, <argument pos:start="830:48" pos:end="830:65"><expr pos:start="830:48" pos:end="830:65"><name pos:start="830:48" pos:end="830:65">EST_ERR_NO_SSL_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="831:13" pos:end="831:27"><expr pos:start="831:13" pos:end="831:26"><call pos:start="831:13" pos:end="831:26"><name pos:start="831:13" pos:end="831:16">free</name><argument_list pos:start="831:17" pos:end="831:26">(<argument pos:start="831:18" pos:end="831:25"><expr pos:start="831:18" pos:end="831:25"><name pos:start="831:18" pos:end="831:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="832:13" pos:end="832:28"><expr pos:start="832:13" pos:end="832:27"><name pos:start="832:13" pos:end="832:20">path_seg</name> <operator pos:start="832:22" pos:end="832:22">=</operator> <name pos:start="832:24" pos:end="832:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="833:13" pos:end="833:40">return <expr pos:start="833:20" pos:end="833:39"><operator pos:start="833:20" pos:end="833:20">(</operator><name pos:start="833:21" pos:end="833:38">EST_ERR_NO_SSL_CTX</name><operator pos:start="833:39" pos:end="833:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="836:9" pos:end="836:97"><expr pos:start="836:9" pos:end="836:96"><name pos:start="836:9" pos:end="836:10">rc</name> <operator pos:start="836:12" pos:end="836:12">=</operator> <call pos:start="836:14" pos:end="836:96"><name pos:start="836:14" pos:end="836:43">est_proxy_handle_simple_enroll</name><argument_list pos:start="836:44" pos:end="836:96">(<argument pos:start="836:45" pos:end="836:47"><expr pos:start="836:45" pos:end="836:47"><name pos:start="836:45" pos:end="836:47">ctx</name></expr></argument>, <argument pos:start="836:50" pos:end="836:57"><expr pos:start="836:50" pos:end="836:57"><name pos:start="836:50" pos:end="836:57">http_ctx</name></expr></argument>, <argument pos:start="836:60" pos:end="836:62"><expr pos:start="836:60" pos:end="836:62"><name pos:start="836:60" pos:end="836:62">ssl</name></expr></argument>, <argument pos:start="836:65" pos:end="836:66"><expr pos:start="836:65" pos:end="836:66"><name pos:start="836:65" pos:end="836:66">ct</name></expr></argument>, <argument pos:start="836:69" pos:end="836:72"><expr pos:start="836:69" pos:end="836:72"><name pos:start="836:69" pos:end="836:72">body</name></expr></argument>, <argument pos:start="836:75" pos:end="836:82"><expr pos:start="836:75" pos:end="836:82"><name pos:start="836:75" pos:end="836:82">body_len</name></expr></argument>, <argument pos:start="836:85" pos:end="836:92"><expr pos:start="836:85" pos:end="836:92"><name pos:start="836:85" pos:end="836:92">path_seg</name></expr></argument>, <argument pos:start="836:95" pos:end="836:95"><expr pos:start="836:95" pos:end="836:95"><literal type="number" pos:start="836:95" pos:end="836:95">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="837:9" pos:end="848:9"><if pos:start="837:9" pos:end="848:9">if <condition pos:start="837:12" pos:end="837:61">(<expr pos:start="837:13" pos:end="837:60"><name pos:start="837:13" pos:end="837:14">rc</name> <operator pos:start="837:16" pos:end="837:17">!=</operator> <name pos:start="837:19" pos:end="837:30">EST_ERR_NONE</name> <operator pos:start="837:32" pos:end="837:33">&amp;&amp;</operator> <name pos:start="837:35" pos:end="837:36">rc</name> <operator pos:start="837:38" pos:end="837:39">!=</operator> <name pos:start="837:41" pos:end="837:60">EST_ERR_AUTH_PENDING</name></expr>)</condition> <block pos:start="837:63" pos:end="848:9">{<block_content pos:start="838:13" pos:end="847:40">
            <expr_stmt pos:start="838:13" pos:end="839:53"><expr pos:start="838:13" pos:end="839:52"><call pos:start="838:13" pos:end="839:52"><name pos:start="838:13" pos:end="838:24">EST_LOG_WARN</name><argument_list pos:start="838:25" pos:end="839:52">(<argument pos:start="838:26" pos:end="838:62"><expr pos:start="838:26" pos:end="838:62"><literal type="string" pos:start="838:26" pos:end="838:62">"Enrollment failed with rc=%d (%s)\n"</literal></expr></argument>, 
		         <argument pos:start="839:26" pos:end="839:27"><expr pos:start="839:26" pos:end="839:27"><name pos:start="839:26" pos:end="839:27">rc</name></expr></argument>, <argument pos:start="839:30" pos:end="839:51"><expr pos:start="839:30" pos:end="839:51"><call pos:start="839:30" pos:end="839:51"><name pos:start="839:30" pos:end="839:47">EST_ERR_NUM_TO_STR</name><argument_list pos:start="839:48" pos:end="839:51">(<argument pos:start="839:49" pos:end="839:50"><expr pos:start="839:49" pos:end="839:50"><name pos:start="839:49" pos:end="839:50">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="840:13" pos:end="844:13"><if pos:start="840:13" pos:end="842:13">if <condition pos:start="840:16" pos:end="840:40">(<expr pos:start="840:17" pos:end="840:39"><name pos:start="840:17" pos:end="840:18">rc</name> <operator pos:start="840:20" pos:end="840:21">==</operator> <name pos:start="840:23" pos:end="840:39">EST_ERR_AUTH_FAIL</name></expr>)</condition> <block pos:start="840:42" pos:end="842:13">{<block_content pos:start="841:17" pos:end="841:70">
		<expr_stmt pos:start="841:17" pos:end="841:70"><expr pos:start="841:17" pos:end="841:69"><call pos:start="841:17" pos:end="841:69"><name pos:start="841:17" pos:end="841:35">est_send_http_error</name><argument_list pos:start="841:36" pos:end="841:69">(<argument pos:start="841:37" pos:end="841:39"><expr pos:start="841:37" pos:end="841:39"><name pos:start="841:37" pos:end="841:39">ctx</name></expr></argument>, <argument pos:start="841:42" pos:end="841:49"><expr pos:start="841:42" pos:end="841:49"><name pos:start="841:42" pos:end="841:49">http_ctx</name></expr></argument>, <argument pos:start="841:52" pos:end="841:68"><expr pos:start="841:52" pos:end="841:68"><name pos:start="841:52" pos:end="841:68">EST_ERR_AUTH_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else pos:start="842:15" pos:end="844:13">else <block pos:start="842:20" pos:end="844:13">{<block_content pos:start="843:17" pos:end="843:71">
		<expr_stmt pos:start="843:17" pos:end="843:71"><expr pos:start="843:17" pos:end="843:70"><call pos:start="843:17" pos:end="843:70"><name pos:start="843:17" pos:end="843:35">est_send_http_error</name><argument_list pos:start="843:36" pos:end="843:70">(<argument pos:start="843:37" pos:end="843:39"><expr pos:start="843:37" pos:end="843:39"><name pos:start="843:37" pos:end="843:39">ctx</name></expr></argument>, <argument pos:start="843:42" pos:end="843:49"><expr pos:start="843:42" pos:end="843:49"><name pos:start="843:42" pos:end="843:49">http_ctx</name></expr></argument>, <argument pos:start="843:52" pos:end="843:69"><expr pos:start="843:52" pos:end="843:69"><name pos:start="843:52" pos:end="843:69">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="845:13" pos:end="845:27"><expr pos:start="845:13" pos:end="845:26"><call pos:start="845:13" pos:end="845:26"><name pos:start="845:13" pos:end="845:16">free</name><argument_list pos:start="845:17" pos:end="845:26">(<argument pos:start="845:18" pos:end="845:25"><expr pos:start="845:18" pos:end="845:25"><name pos:start="845:18" pos:end="845:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="846:13" pos:end="846:28"><expr pos:start="846:13" pos:end="846:27"><name pos:start="846:13" pos:end="846:20">path_seg</name> <operator pos:start="846:22" pos:end="846:22">=</operator> <name pos:start="846:24" pos:end="846:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="847:13" pos:end="847:40">return <expr pos:start="847:20" pos:end="847:39"><operator pos:start="847:20" pos:end="847:20">(</operator><name pos:start="847:21" pos:end="847:38">EST_ERR_BAD_PKCS10</name><operator pos:start="847:39" pos:end="847:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>

    <comment type="block" pos:start="851:5" pos:end="853:7">/*
     * See if this is a re-enrollment request
     */</comment>
    <if type="elseif" pos:start="854:5" pos:end="942:0">else if <condition pos:start="854:13" pos:end="854:49">(<expr pos:start="854:14" pos:end="854:48"><name pos:start="854:14" pos:end="854:22">operation</name> <operator pos:start="854:24" pos:end="854:25">==</operator> <name pos:start="854:27" pos:end="854:48">EST_OP_SIMPLE_REENROLL</name></expr>)</condition> <block pos:start="854:51" pos:end="942:0">{<block_content pos:start="856:9" pos:end="912:9">
        <comment type="block" pos:start="855:9" pos:end="855:34">/* Only POST is allowed */</comment>
        <expr_stmt pos:start="856:9" pos:end="856:72"><expr pos:start="856:9" pos:end="856:71"><name pos:start="856:9" pos:end="856:16">safec_rc</name> <operator pos:start="856:18" pos:end="856:18">=</operator> <call pos:start="856:20" pos:end="856:71"><name pos:start="856:20" pos:end="856:27">strcmp_s</name><argument_list pos:start="856:28" pos:end="856:71">(<argument pos:start="856:29" pos:end="856:34"><expr pos:start="856:29" pos:end="856:34"><name pos:start="856:29" pos:end="856:34">method</name></expr></argument>, <argument pos:start="856:37" pos:end="856:55"><expr pos:start="856:37" pos:end="856:55"><name pos:start="856:37" pos:end="856:55">MAX_HTTP_METHOD_LEN</name></expr></argument>, <argument pos:start="856:58" pos:end="856:63"><expr pos:start="856:58" pos:end="856:63"><literal type="string" pos:start="856:58" pos:end="856:63">"POST"</literal></expr></argument>, <argument pos:start="856:66" pos:end="856:70"><expr pos:start="856:66" pos:end="856:70"><operator pos:start="856:66" pos:end="856:66">&amp;</operator><name pos:start="856:67" pos:end="856:70">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="857:9" pos:end="859:9"><if pos:start="857:9" pos:end="859:9">if <condition pos:start="857:12" pos:end="857:28">(<expr pos:start="857:13" pos:end="857:27"><name pos:start="857:13" pos:end="857:20">safec_rc</name> <operator pos:start="857:22" pos:end="857:23">!=</operator> <name pos:start="857:25" pos:end="857:27">EOK</name></expr>)</condition> <block pos:start="857:30" pos:end="859:9">{<block_content pos:start="858:13" pos:end="858:61">
            <expr_stmt pos:start="858:13" pos:end="858:61"><expr pos:start="858:13" pos:end="858:60"><call pos:start="858:13" pos:end="858:60"><name pos:start="858:13" pos:end="858:24">EST_LOG_INFO</name><argument_list pos:start="858:25" pos:end="858:60">(<argument pos:start="858:26" pos:end="858:49"><expr pos:start="858:26" pos:end="858:49"><literal type="string" pos:start="858:26" pos:end="858:49">"strcmp_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="858:52" pos:end="858:59"><expr pos:start="858:52" pos:end="858:59"><name pos:start="858:52" pos:end="858:59">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="861:9" pos:end="866:9"><if pos:start="861:9" pos:end="866:9">if <condition pos:start="861:12" pos:end="861:17">(<expr pos:start="861:13" pos:end="861:16"><name pos:start="861:13" pos:end="861:16">diff</name></expr>)</condition> <block pos:start="861:19" pos:end="866:9">{<block_content pos:start="862:13" pos:end="865:42">
            <expr_stmt pos:start="862:13" pos:end="862:69"><expr pos:start="862:13" pos:end="862:68"><call pos:start="862:13" pos:end="862:68"><name pos:start="862:13" pos:end="862:31">est_send_http_error</name><argument_list pos:start="862:32" pos:end="862:68">(<argument pos:start="862:33" pos:end="862:35"><expr pos:start="862:33" pos:end="862:35"><name pos:start="862:33" pos:end="862:35">ctx</name></expr></argument>, <argument pos:start="862:38" pos:end="862:45"><expr pos:start="862:38" pos:end="862:45"><name pos:start="862:38" pos:end="862:45">http_ctx</name></expr></argument>, <argument pos:start="862:48" pos:end="862:67"><expr pos:start="862:48" pos:end="862:67"><name pos:start="862:48" pos:end="862:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="863:13" pos:end="863:27"><expr pos:start="863:13" pos:end="863:26"><call pos:start="863:13" pos:end="863:26"><name pos:start="863:13" pos:end="863:16">free</name><argument_list pos:start="863:17" pos:end="863:26">(<argument pos:start="863:18" pos:end="863:25"><expr pos:start="863:18" pos:end="863:25"><name pos:start="863:18" pos:end="863:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="864:13" pos:end="864:28"><expr pos:start="864:13" pos:end="864:27"><name pos:start="864:13" pos:end="864:20">path_seg</name> <operator pos:start="864:22" pos:end="864:22">=</operator> <name pos:start="864:24" pos:end="864:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="865:13" pos:end="865:42">return <expr pos:start="865:20" pos:end="865:41"><operator pos:start="865:20" pos:end="865:20">(</operator><name pos:start="865:21" pos:end="865:40">EST_ERR_WRONG_METHOD</name><operator pos:start="865:41" pos:end="865:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
	<if_stmt pos:start="867:9" pos:end="873:9"><if pos:start="867:9" pos:end="873:9">if <condition pos:start="867:12" pos:end="867:16">(<expr pos:start="867:13" pos:end="867:15"><operator pos:start="867:13" pos:end="867:13">!</operator><name pos:start="867:14" pos:end="867:15">ct</name></expr>)</condition> <block pos:start="867:18" pos:end="873:9">{<block_content pos:start="868:13" pos:end="872:46">
            <expr_stmt pos:start="868:13" pos:end="868:78"><expr pos:start="868:13" pos:end="868:77"><call pos:start="868:13" pos:end="868:77"><name pos:start="868:13" pos:end="868:24">EST_LOG_WARN</name><argument_list pos:start="868:25" pos:end="868:77">(<argument pos:start="868:26" pos:end="868:76"><expr pos:start="868:26" pos:end="868:76"><literal type="string" pos:start="868:26" pos:end="868:76">"Incoming HTTP header has no Content-Type header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="869:13" pos:end="869:67"><expr pos:start="869:13" pos:end="869:66"><call pos:start="869:13" pos:end="869:66"><name pos:start="869:13" pos:end="869:31">est_send_http_error</name><argument_list pos:start="869:32" pos:end="869:66">(<argument pos:start="869:33" pos:end="869:35"><expr pos:start="869:33" pos:end="869:35"><name pos:start="869:33" pos:end="869:35">ctx</name></expr></argument>, <argument pos:start="869:38" pos:end="869:45"><expr pos:start="869:38" pos:end="869:45"><name pos:start="869:38" pos:end="869:45">http_ctx</name></expr></argument>, <argument pos:start="869:48" pos:end="869:65"><expr pos:start="869:48" pos:end="869:65"><name pos:start="869:48" pos:end="869:65">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="870:13" pos:end="870:27"><expr pos:start="870:13" pos:end="870:26"><call pos:start="870:13" pos:end="870:26"><name pos:start="870:13" pos:end="870:16">free</name><argument_list pos:start="870:17" pos:end="870:26">(<argument pos:start="870:18" pos:end="870:25"><expr pos:start="870:18" pos:end="870:25"><name pos:start="870:18" pos:end="870:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="871:13" pos:end="871:28"><expr pos:start="871:13" pos:end="871:27"><name pos:start="871:13" pos:end="871:20">path_seg</name> <operator pos:start="871:22" pos:end="871:22">=</operator> <name pos:start="871:24" pos:end="871:27">NULL</name></expr>;</expr_stmt>
	    <return pos:start="872:13" pos:end="872:46">return <expr pos:start="872:20" pos:end="872:45"><operator pos:start="872:20" pos:end="872:20">(</operator><name pos:start="872:21" pos:end="872:44">EST_ERR_BAD_CONTENT_TYPE</name><operator pos:start="872:45" pos:end="872:45">)</operator></expr>;</return> 
	</block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="874:9" pos:end="879:11">/*
         * In this case body is indicating that no content was passed in, and
         * this is a enroll request.  This cannot be correct because a CSR is
         * required.  If this continues, and we're in proxy mode, we'll try to
         * forward this non-existent CSR
         */</comment>
        <if_stmt pos:start="880:9" pos:end="886:9"><if pos:start="880:9" pos:end="886:9">if <condition pos:start="880:12" pos:end="880:25">(<expr pos:start="880:13" pos:end="880:24"><name pos:start="880:13" pos:end="880:16">body</name> <operator pos:start="880:18" pos:end="880:19">==</operator> <name pos:start="880:21" pos:end="880:24">NULL</name></expr>)</condition> <block pos:start="880:27" pos:end="886:9">{<block_content pos:start="881:13" pos:end="885:45">
            <expr_stmt pos:start="881:13" pos:end="881:71"><expr pos:start="881:13" pos:end="881:70"><call pos:start="881:13" pos:end="881:70"><name pos:start="881:13" pos:end="881:24">EST_LOG_WARN</name><argument_list pos:start="881:25" pos:end="881:70">(<argument pos:start="881:26" pos:end="881:69"><expr pos:start="881:26" pos:end="881:69"><literal type="string" pos:start="881:26" pos:end="881:69">"Incoming HTTP header has no CSR content.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="882:13" pos:end="882:67"><expr pos:start="882:13" pos:end="882:66"><call pos:start="882:13" pos:end="882:66"><name pos:start="882:13" pos:end="882:31">est_send_http_error</name><argument_list pos:start="882:32" pos:end="882:66">(<argument pos:start="882:33" pos:end="882:35"><expr pos:start="882:33" pos:end="882:35"><name pos:start="882:33" pos:end="882:35">ctx</name></expr></argument>, <argument pos:start="882:38" pos:end="882:45"><expr pos:start="882:38" pos:end="882:45"><name pos:start="882:38" pos:end="882:45">http_ctx</name></expr></argument>, <argument pos:start="882:48" pos:end="882:65"><expr pos:start="882:48" pos:end="882:65"><name pos:start="882:48" pos:end="882:65">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="883:13" pos:end="883:27"><expr pos:start="883:13" pos:end="883:26"><call pos:start="883:13" pos:end="883:26"><name pos:start="883:13" pos:end="883:16">free</name><argument_list pos:start="883:17" pos:end="883:26">(<argument pos:start="883:18" pos:end="883:25"><expr pos:start="883:18" pos:end="883:25"><name pos:start="883:18" pos:end="883:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="884:13" pos:end="884:28"><expr pos:start="884:13" pos:end="884:27"><name pos:start="884:13" pos:end="884:20">path_seg</name> <operator pos:start="884:22" pos:end="884:22">=</operator> <name pos:start="884:24" pos:end="884:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="885:13" pos:end="885:45">return <expr pos:start="885:20" pos:end="885:44"><operator pos:start="885:20" pos:end="885:20">(</operator><name pos:start="885:21" pos:end="885:43">EST_ERR_BAD_CONTENT_LEN</name><operator pos:start="885:44" pos:end="885:44">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <comment type="block" pos:start="888:9" pos:end="891:11">/*
         * Get the SSL context, which is required for authenticating
         * the client.
         */</comment>
        <expr_stmt pos:start="892:9" pos:end="892:46"><expr pos:start="892:9" pos:end="892:45"><name pos:start="892:9" pos:end="892:11">ssl</name> <operator pos:start="892:13" pos:end="892:13">=</operator> <operator pos:start="892:15" pos:end="892:15">(</operator><name pos:start="892:16" pos:end="892:18">SSL</name><operator pos:start="892:19" pos:end="892:19">*</operator><operator pos:start="892:20" pos:end="892:20">)</operator><call pos:start="892:21" pos:end="892:45"><name pos:start="892:21" pos:end="892:35">mg_get_conn_ssl</name><argument_list pos:start="892:36" pos:end="892:45">(<argument pos:start="892:37" pos:end="892:44"><expr pos:start="892:37" pos:end="892:44"><name pos:start="892:37" pos:end="892:44">http_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="893:9" pos:end="898:9"><if pos:start="893:9" pos:end="898:9">if <condition pos:start="893:12" pos:end="893:17">(<expr pos:start="893:13" pos:end="893:16"><operator pos:start="893:13" pos:end="893:13">!</operator><name pos:start="893:14" pos:end="893:16">ssl</name></expr>)</condition> <block pos:start="893:19" pos:end="898:9">{<block_content pos:start="894:13" pos:end="897:40">
            <expr_stmt pos:start="894:13" pos:end="894:67"><expr pos:start="894:13" pos:end="894:66"><call pos:start="894:13" pos:end="894:66"><name pos:start="894:13" pos:end="894:31">est_send_http_error</name><argument_list pos:start="894:32" pos:end="894:66">(<argument pos:start="894:33" pos:end="894:35"><expr pos:start="894:33" pos:end="894:35"><name pos:start="894:33" pos:end="894:35">ctx</name></expr></argument>, <argument pos:start="894:38" pos:end="894:45"><expr pos:start="894:38" pos:end="894:45"><name pos:start="894:38" pos:end="894:45">http_ctx</name></expr></argument>, <argument pos:start="894:48" pos:end="894:65"><expr pos:start="894:48" pos:end="894:65"><name pos:start="894:48" pos:end="894:65">EST_ERR_NO_SSL_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="895:13" pos:end="895:27"><expr pos:start="895:13" pos:end="895:26"><call pos:start="895:13" pos:end="895:26"><name pos:start="895:13" pos:end="895:16">free</name><argument_list pos:start="895:17" pos:end="895:26">(<argument pos:start="895:18" pos:end="895:25"><expr pos:start="895:18" pos:end="895:25"><name pos:start="895:18" pos:end="895:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="896:13" pos:end="896:28"><expr pos:start="896:13" pos:end="896:27"><name pos:start="896:13" pos:end="896:20">path_seg</name> <operator pos:start="896:22" pos:end="896:22">=</operator> <name pos:start="896:24" pos:end="896:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="897:13" pos:end="897:40">return <expr pos:start="897:20" pos:end="897:39"><operator pos:start="897:20" pos:end="897:20">(</operator><name pos:start="897:21" pos:end="897:38">EST_ERR_NO_SSL_CTX</name><operator pos:start="897:39" pos:end="897:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="900:9" pos:end="900:97"><expr pos:start="900:9" pos:end="900:96"><name pos:start="900:9" pos:end="900:10">rc</name> <operator pos:start="900:12" pos:end="900:12">=</operator> <call pos:start="900:14" pos:end="900:96"><name pos:start="900:14" pos:end="900:43">est_proxy_handle_simple_enroll</name><argument_list pos:start="900:44" pos:end="900:96">(<argument pos:start="900:45" pos:end="900:47"><expr pos:start="900:45" pos:end="900:47"><name pos:start="900:45" pos:end="900:47">ctx</name></expr></argument>, <argument pos:start="900:50" pos:end="900:57"><expr pos:start="900:50" pos:end="900:57"><name pos:start="900:50" pos:end="900:57">http_ctx</name></expr></argument>, <argument pos:start="900:60" pos:end="900:62"><expr pos:start="900:60" pos:end="900:62"><name pos:start="900:60" pos:end="900:62">ssl</name></expr></argument>, <argument pos:start="900:65" pos:end="900:66"><expr pos:start="900:65" pos:end="900:66"><name pos:start="900:65" pos:end="900:66">ct</name></expr></argument>, <argument pos:start="900:69" pos:end="900:72"><expr pos:start="900:69" pos:end="900:72"><name pos:start="900:69" pos:end="900:72">body</name></expr></argument>, <argument pos:start="900:75" pos:end="900:82"><expr pos:start="900:75" pos:end="900:82"><name pos:start="900:75" pos:end="900:82">body_len</name></expr></argument>, <argument pos:start="900:85" pos:end="900:92"><expr pos:start="900:85" pos:end="900:92"><name pos:start="900:85" pos:end="900:92">path_seg</name></expr></argument>, <argument pos:start="900:95" pos:end="900:95"><expr pos:start="900:95" pos:end="900:95"><literal type="number" pos:start="900:95" pos:end="900:95">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="901:9" pos:end="912:9"><if pos:start="901:9" pos:end="912:9">if <condition pos:start="901:12" pos:end="901:61">(<expr pos:start="901:13" pos:end="901:60"><name pos:start="901:13" pos:end="901:14">rc</name> <operator pos:start="901:16" pos:end="901:17">!=</operator> <name pos:start="901:19" pos:end="901:30">EST_ERR_NONE</name> <operator pos:start="901:32" pos:end="901:33">&amp;&amp;</operator> <name pos:start="901:35" pos:end="901:36">rc</name> <operator pos:start="901:38" pos:end="901:39">!=</operator> <name pos:start="901:41" pos:end="901:60">EST_ERR_AUTH_PENDING</name></expr>)</condition> <block pos:start="901:63" pos:end="912:9">{<block_content pos:start="902:13" pos:end="911:40">
            <expr_stmt pos:start="902:13" pos:end="903:53"><expr pos:start="902:13" pos:end="903:52"><call pos:start="902:13" pos:end="903:52"><name pos:start="902:13" pos:end="902:24">EST_LOG_WARN</name><argument_list pos:start="902:25" pos:end="903:52">(<argument pos:start="902:26" pos:end="902:60"><expr pos:start="902:26" pos:end="902:60"><literal type="string" pos:start="902:26" pos:end="902:60">"Reenroll failed with rc=%d (%s)\n"</literal></expr></argument>, 
		         <argument pos:start="903:26" pos:end="903:27"><expr pos:start="903:26" pos:end="903:27"><name pos:start="903:26" pos:end="903:27">rc</name></expr></argument>, <argument pos:start="903:30" pos:end="903:51"><expr pos:start="903:30" pos:end="903:51"><call pos:start="903:30" pos:end="903:51"><name pos:start="903:30" pos:end="903:47">EST_ERR_NUM_TO_STR</name><argument_list pos:start="903:48" pos:end="903:51">(<argument pos:start="903:49" pos:end="903:50"><expr pos:start="903:49" pos:end="903:50"><name pos:start="903:49" pos:end="903:50">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt pos:start="904:13" pos:end="908:13"><if pos:start="904:13" pos:end="906:13">if <condition pos:start="904:16" pos:end="904:40">(<expr pos:start="904:17" pos:end="904:39"><name pos:start="904:17" pos:end="904:18">rc</name> <operator pos:start="904:20" pos:end="904:21">==</operator> <name pos:start="904:23" pos:end="904:39">EST_ERR_AUTH_FAIL</name></expr>)</condition> <block pos:start="904:42" pos:end="906:13">{<block_content pos:start="905:17" pos:end="905:70">
		<expr_stmt pos:start="905:17" pos:end="905:70"><expr pos:start="905:17" pos:end="905:69"><call pos:start="905:17" pos:end="905:69"><name pos:start="905:17" pos:end="905:35">est_send_http_error</name><argument_list pos:start="905:36" pos:end="905:69">(<argument pos:start="905:37" pos:end="905:39"><expr pos:start="905:37" pos:end="905:39"><name pos:start="905:37" pos:end="905:39">ctx</name></expr></argument>, <argument pos:start="905:42" pos:end="905:49"><expr pos:start="905:42" pos:end="905:49"><name pos:start="905:42" pos:end="905:49">http_ctx</name></expr></argument>, <argument pos:start="905:52" pos:end="905:68"><expr pos:start="905:52" pos:end="905:68"><name pos:start="905:52" pos:end="905:68">EST_ERR_AUTH_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if> <else pos:start="906:15" pos:end="908:13">else <block pos:start="906:20" pos:end="908:13">{<block_content pos:start="907:17" pos:end="907:71">
		<expr_stmt pos:start="907:17" pos:end="907:71"><expr pos:start="907:17" pos:end="907:70"><call pos:start="907:17" pos:end="907:70"><name pos:start="907:17" pos:end="907:35">est_send_http_error</name><argument_list pos:start="907:36" pos:end="907:70">(<argument pos:start="907:37" pos:end="907:39"><expr pos:start="907:37" pos:end="907:39"><name pos:start="907:37" pos:end="907:39">ctx</name></expr></argument>, <argument pos:start="907:42" pos:end="907:49"><expr pos:start="907:42" pos:end="907:49"><name pos:start="907:42" pos:end="907:49">http_ctx</name></expr></argument>, <argument pos:start="907:52" pos:end="907:69"><expr pos:start="907:52" pos:end="907:69"><name pos:start="907:52" pos:end="907:69">EST_ERR_BAD_PKCS10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="909:13" pos:end="909:27"><expr pos:start="909:13" pos:end="909:26"><call pos:start="909:13" pos:end="909:26"><name pos:start="909:13" pos:end="909:16">free</name><argument_list pos:start="909:17" pos:end="909:26">(<argument pos:start="909:18" pos:end="909:25"><expr pos:start="909:18" pos:end="909:25"><name pos:start="909:18" pos:end="909:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="910:13" pos:end="910:28"><expr pos:start="910:13" pos:end="910:27"><name pos:start="910:13" pos:end="910:20">path_seg</name> <operator pos:start="910:22" pos:end="910:22">=</operator> <name pos:start="910:24" pos:end="910:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="911:13" pos:end="911:40">return <expr pos:start="911:20" pos:end="911:39"><operator pos:start="911:20" pos:end="911:20">(</operator><name pos:start="911:21" pos:end="911:38">EST_ERR_BAD_PKCS10</name><operator pos:start="911:39" pos:end="911:39">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>

<cpp:if pos:start="915:1" pos:end="915:5">#<cpp:directive pos:start="915:2" pos:end="915:3">if</cpp:directive> <expr pos:start="915:5" pos:end="915:5"><literal type="number" pos:start="915:5" pos:end="915:5">0</literal></expr></cpp:if>
    <comment type="block" pos:start="916:5" pos:end="919:7">/*
     * See if this is a keygen request
     * FIXME: this is currently not implemented
     */</comment>
    else if (strncmp(uri, EST_KEYGEN_URI, EST_URI_MAX_LEN) == 0) {

        <comment type="block" pos:start="922:9" pos:end="922:34">/* Only POST is allowed */</comment>
        safec_rc = strcmp_s(method, MAX_HTTP_METHOD_LEN, "POST", &amp;diff);
        if (safec_rc != EOK) {
            EST_LOG_INFO("strcmp_s error 0x%xO\n", safec_rc);
        }

        if (diff) {
            est_send_http_error(ctx, http_ctx, EST_ERR_WRONG_METHOD);
            return (EST_ERR_WRONG_METHOD);
        }
	if (!ct) {
            EST_LOG_WARN("Incoming HTTP header has no Content-Type header\n");
	    return (EST_ERR_BAD_CONTENT_TYPE); 
	}
        if (est_proxy_handle_keygen(ctx)) {
            est_send_http_error(ctx, http_ctx, 0); <comment type="line" pos:start="937:52" pos:end="937:89">//FIXME: last param should not be zero</comment>
            return (EST_ERR_HTTP_WRITE);           <comment type="line" pos:start="938:52" pos:end="938:92">//FIXME: need the appropriate return code</comment>
        }
    }
<cpp:endif pos:start="941:1" pos:end="941:6">#<cpp:directive pos:start="941:2" pos:end="941:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="943:5" pos:end="945:7">/*
     * See if this is a CSR attributes request
     */</comment>
    <if type="elseif" pos:start="946:5" pos:end="966:5">else if <condition pos:start="946:13" pos:end="946:42">(<expr pos:start="946:14" pos:end="946:41"><name pos:start="946:14" pos:end="946:22">operation</name> <operator pos:start="946:24" pos:end="946:25">==</operator> <name pos:start="946:27" pos:end="946:41">EST_OP_CSRATTRS</name></expr>)</condition> <block pos:start="946:44" pos:end="966:5">{<block_content pos:start="948:9" pos:end="965:9">
        <comment type="block" pos:start="947:9" pos:end="947:33">/* Only GET is allowed */</comment>
        <expr_stmt pos:start="948:9" pos:end="948:71"><expr pos:start="948:9" pos:end="948:70"><name pos:start="948:9" pos:end="948:16">safec_rc</name> <operator pos:start="948:18" pos:end="948:18">=</operator> <call pos:start="948:20" pos:end="948:70"><name pos:start="948:20" pos:end="948:27">strcmp_s</name><argument_list pos:start="948:28" pos:end="948:70">(<argument pos:start="948:29" pos:end="948:34"><expr pos:start="948:29" pos:end="948:34"><name pos:start="948:29" pos:end="948:34">method</name></expr></argument>, <argument pos:start="948:37" pos:end="948:55"><expr pos:start="948:37" pos:end="948:55"><name pos:start="948:37" pos:end="948:55">MAX_HTTP_METHOD_LEN</name></expr></argument>, <argument pos:start="948:58" pos:end="948:62"><expr pos:start="948:58" pos:end="948:62"><literal type="string" pos:start="948:58" pos:end="948:62">"GET"</literal></expr></argument>, <argument pos:start="948:65" pos:end="948:69"><expr pos:start="948:65" pos:end="948:69"><operator pos:start="948:65" pos:end="948:65">&amp;</operator><name pos:start="948:66" pos:end="948:69">diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="949:9" pos:end="951:9"><if pos:start="949:9" pos:end="951:9">if <condition pos:start="949:12" pos:end="949:28">(<expr pos:start="949:13" pos:end="949:27"><name pos:start="949:13" pos:end="949:20">safec_rc</name> <operator pos:start="949:22" pos:end="949:23">!=</operator> <name pos:start="949:25" pos:end="949:27">EOK</name></expr>)</condition> <block pos:start="949:30" pos:end="951:9">{<block_content pos:start="950:13" pos:end="950:61">
            <expr_stmt pos:start="950:13" pos:end="950:61"><expr pos:start="950:13" pos:end="950:60"><call pos:start="950:13" pos:end="950:60"><name pos:start="950:13" pos:end="950:24">EST_LOG_INFO</name><argument_list pos:start="950:25" pos:end="950:60">(<argument pos:start="950:26" pos:end="950:49"><expr pos:start="950:26" pos:end="950:49"><literal type="string" pos:start="950:26" pos:end="950:49">"strcmp_s error 0x%xO\n"</literal></expr></argument>, <argument pos:start="950:52" pos:end="950:59"><expr pos:start="950:52" pos:end="950:59"><name pos:start="950:52" pos:end="950:59">safec_rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="953:9" pos:end="958:9"><if pos:start="953:9" pos:end="958:9">if <condition pos:start="953:12" pos:end="953:17">(<expr pos:start="953:13" pos:end="953:16"><name pos:start="953:13" pos:end="953:16">diff</name></expr>)</condition> <block pos:start="953:19" pos:end="958:9">{<block_content pos:start="954:13" pos:end="957:42">
            <expr_stmt pos:start="954:13" pos:end="954:69"><expr pos:start="954:13" pos:end="954:68"><call pos:start="954:13" pos:end="954:68"><name pos:start="954:13" pos:end="954:31">est_send_http_error</name><argument_list pos:start="954:32" pos:end="954:68">(<argument pos:start="954:33" pos:end="954:35"><expr pos:start="954:33" pos:end="954:35"><name pos:start="954:33" pos:end="954:35">ctx</name></expr></argument>, <argument pos:start="954:38" pos:end="954:45"><expr pos:start="954:38" pos:end="954:45"><name pos:start="954:38" pos:end="954:45">http_ctx</name></expr></argument>, <argument pos:start="954:48" pos:end="954:67"><expr pos:start="954:48" pos:end="954:67"><name pos:start="954:48" pos:end="954:67">EST_ERR_WRONG_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="955:13" pos:end="955:27"><expr pos:start="955:13" pos:end="955:26"><call pos:start="955:13" pos:end="955:26"><name pos:start="955:13" pos:end="955:16">free</name><argument_list pos:start="955:17" pos:end="955:26">(<argument pos:start="955:18" pos:end="955:25"><expr pos:start="955:18" pos:end="955:25"><name pos:start="955:18" pos:end="955:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="956:13" pos:end="956:28"><expr pos:start="956:13" pos:end="956:27"><name pos:start="956:13" pos:end="956:20">path_seg</name> <operator pos:start="956:22" pos:end="956:22">=</operator> <name pos:start="956:24" pos:end="956:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="957:13" pos:end="957:42">return <expr pos:start="957:20" pos:end="957:41"><operator pos:start="957:20" pos:end="957:20">(</operator><name pos:start="957:21" pos:end="957:40">EST_ERR_WRONG_METHOD</name><operator pos:start="957:41" pos:end="957:41">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="959:9" pos:end="959:65"><expr pos:start="959:9" pos:end="959:64"><name pos:start="959:9" pos:end="959:10">rc</name> <operator pos:start="959:12" pos:end="959:12">=</operator> <call pos:start="959:14" pos:end="959:64"><name pos:start="959:14" pos:end="959:39">est_proxy_handle_csr_attrs</name><argument_list pos:start="959:40" pos:end="959:64">(<argument pos:start="959:41" pos:end="959:43"><expr pos:start="959:41" pos:end="959:43"><name pos:start="959:41" pos:end="959:43">ctx</name></expr></argument>, <argument pos:start="959:46" pos:end="959:53"><expr pos:start="959:46" pos:end="959:53"><name pos:start="959:46" pos:end="959:53">http_ctx</name></expr></argument>, <argument pos:start="959:56" pos:end="959:63"><expr pos:start="959:56" pos:end="959:63"><name pos:start="959:56" pos:end="959:63">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <if_stmt pos:start="960:10" pos:end="965:9"><if pos:start="960:10" pos:end="965:9">if <condition pos:start="960:13" pos:end="960:32">(<expr pos:start="960:14" pos:end="960:31"><name pos:start="960:14" pos:end="960:15">rc</name> <operator pos:start="960:17" pos:end="960:18">!=</operator> <name pos:start="960:20" pos:end="960:31">EST_ERR_NONE</name></expr>)</condition> <block pos:start="960:34" pos:end="965:9">{<block_content pos:start="961:13" pos:end="964:24">
            <expr_stmt pos:start="961:13" pos:end="961:51"><expr pos:start="961:13" pos:end="961:50"><call pos:start="961:13" pos:end="961:50"><name pos:start="961:13" pos:end="961:31">est_send_http_error</name><argument_list pos:start="961:32" pos:end="961:50">(<argument pos:start="961:33" pos:end="961:35"><expr pos:start="961:33" pos:end="961:35"><name pos:start="961:33" pos:end="961:35">ctx</name></expr></argument>, <argument pos:start="961:38" pos:end="961:45"><expr pos:start="961:38" pos:end="961:45"><name pos:start="961:38" pos:end="961:45">http_ctx</name></expr></argument>, <argument pos:start="961:48" pos:end="961:49"><expr pos:start="961:48" pos:end="961:49"><name pos:start="961:48" pos:end="961:49">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt pos:start="962:13" pos:end="962:27"><expr pos:start="962:13" pos:end="962:26"><call pos:start="962:13" pos:end="962:26"><name pos:start="962:13" pos:end="962:16">free</name><argument_list pos:start="962:17" pos:end="962:26">(<argument pos:start="962:18" pos:end="962:25"><expr pos:start="962:18" pos:end="962:25"><name pos:start="962:18" pos:end="962:25">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="963:13" pos:end="963:28"><expr pos:start="963:13" pos:end="963:27"><name pos:start="963:13" pos:end="963:20">path_seg</name> <operator pos:start="963:22" pos:end="963:22">=</operator> <name pos:start="963:24" pos:end="963:27">NULL</name></expr>;</expr_stmt>
            <return pos:start="964:13" pos:end="964:24">return <expr pos:start="964:20" pos:end="964:23"><operator pos:start="964:20" pos:end="964:20">(</operator><name pos:start="964:21" pos:end="964:22">rc</name><operator pos:start="964:23" pos:end="964:23">)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>

    <comment type="block" pos:start="968:5" pos:end="970:7">/*
     * Send a 404 error if the URI didn't match 
     */</comment>
    <else pos:start="971:5" pos:end="973:5">else <block pos:start="971:10" pos:end="973:5">{<block_content pos:start="972:9" pos:end="972:67">
        <expr_stmt pos:start="972:9" pos:end="972:67"><expr pos:start="972:9" pos:end="972:66"><call pos:start="972:9" pos:end="972:66"><name pos:start="972:9" pos:end="972:27">est_send_http_error</name><argument_list pos:start="972:28" pos:end="972:66">(<argument pos:start="972:29" pos:end="972:31"><expr pos:start="972:29" pos:end="972:31"><name pos:start="972:29" pos:end="972:31">ctx</name></expr></argument>, <argument pos:start="972:34" pos:end="972:41"><expr pos:start="972:34" pos:end="972:41"><name pos:start="972:34" pos:end="972:41">http_ctx</name></expr></argument>, <argument pos:start="972:44" pos:end="972:65"><expr pos:start="972:44" pos:end="972:65"><name pos:start="972:44" pos:end="972:65">EST_ERR_HTTP_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="975:5" pos:end="975:19"><expr pos:start="975:5" pos:end="975:18"><call pos:start="975:5" pos:end="975:18"><name pos:start="975:5" pos:end="975:8">free</name><argument_list pos:start="975:9" pos:end="975:18">(<argument pos:start="975:10" pos:end="975:17"><expr pos:start="975:10" pos:end="975:17"><name pos:start="975:10" pos:end="975:17">path_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="976:5" pos:end="976:20"><expr pos:start="976:5" pos:end="976:19"><name pos:start="976:5" pos:end="976:12">path_seg</name> <operator pos:start="976:14" pos:end="976:14">=</operator> <name pos:start="976:16" pos:end="976:19">NULL</name></expr>;</expr_stmt>
    <return pos:start="977:5" pos:end="977:26">return <expr pos:start="977:12" pos:end="977:25"><operator pos:start="977:12" pos:end="977:12">(</operator><name pos:start="977:13" pos:end="977:24">EST_ERR_NONE</name><operator pos:start="977:25" pos:end="977:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="979:1" pos:end="990:3">/*! @brief est_proxy_start() is used by an application to start the EST proxy
    after est_proxy_init() and est_proxy_set_server() have been called and all
    the required callback functions have been provided by the application.

    @param ctx Pointer to the EST context

    libEST uses HTTP code from the Mongoose HTTP server.
    This function allows the application to start the HTTP
    services layer, which is required by EST.
 
    @return EST_ERROR.    
 */</comment>
<function pos:start="991:1" pos:end="1007:1"><type pos:start="991:1" pos:end="991:9"><name pos:start="991:1" pos:end="991:9">EST_ERROR</name></type> <name pos:start="991:11" pos:end="991:25">est_proxy_start</name> <parameter_list pos:start="991:27" pos:end="991:40">(<parameter pos:start="991:28" pos:end="991:39"><decl pos:start="991:28" pos:end="991:39"><type pos:start="991:28" pos:end="991:36"><name pos:start="991:28" pos:end="991:34">EST_CTX</name> <modifier pos:start="991:36" pos:end="991:36">*</modifier></type><name pos:start="991:37" pos:end="991:39">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="992:1" pos:end="1007:1">{<block_content pos:start="993:5" pos:end="1006:5">
    <decl_stmt pos:start="993:5" pos:end="993:26"><decl pos:start="993:5" pos:end="993:25"><type pos:start="993:5" pos:end="993:20"><name pos:start="993:5" pos:end="993:18">EST_MG_CONTEXT</name> <modifier pos:start="993:20" pos:end="993:20">*</modifier></type><name pos:start="993:21" pos:end="993:25">mgctx</name></decl>;</decl_stmt>

    <if_stmt pos:start="995:5" pos:end="998:5"><if pos:start="995:5" pos:end="998:5">if <condition pos:start="995:8" pos:end="995:13">(<expr pos:start="995:9" pos:end="995:12"><operator pos:start="995:9" pos:end="995:9">!</operator><name pos:start="995:10" pos:end="995:12">ctx</name></expr>)</condition> <block pos:start="995:15" pos:end="998:5">{<block_content pos:start="996:9" pos:end="997:32">
	<expr_stmt pos:start="996:9" pos:end="996:36"><expr pos:start="996:9" pos:end="996:35"><call pos:start="996:9" pos:end="996:35"><name pos:start="996:9" pos:end="996:19">EST_LOG_ERR</name><argument_list pos:start="996:20" pos:end="996:35">(<argument pos:start="996:21" pos:end="996:34"><expr pos:start="996:21" pos:end="996:34"><literal type="string" pos:start="996:21" pos:end="996:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="997:9" pos:end="997:32">return <expr pos:start="997:16" pos:end="997:31"><operator pos:start="997:16" pos:end="997:16">(</operator><name pos:start="997:17" pos:end="997:30">EST_ERR_NO_CTX</name><operator pos:start="997:31" pos:end="997:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1000:5" pos:end="1000:26"><expr pos:start="1000:5" pos:end="1000:25"><name pos:start="1000:5" pos:end="1000:9">mgctx</name> <operator pos:start="1000:11" pos:end="1000:11">=</operator> <call pos:start="1000:13" pos:end="1000:25"><name pos:start="1000:13" pos:end="1000:20">mg_start</name><argument_list pos:start="1000:21" pos:end="1000:25">(<argument pos:start="1000:22" pos:end="1000:24"><expr pos:start="1000:22" pos:end="1000:24"><name pos:start="1000:22" pos:end="1000:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1001:5" pos:end="1006:5"><if pos:start="1001:5" pos:end="1004:5">if <condition pos:start="1001:8" pos:end="1001:14">(<expr pos:start="1001:9" pos:end="1001:13"><name pos:start="1001:9" pos:end="1001:13">mgctx</name></expr>)</condition> <block pos:start="1001:16" pos:end="1004:5">{<block_content pos:start="1002:9" pos:end="1003:30">
        <expr_stmt pos:start="1002:9" pos:end="1002:28"><expr pos:start="1002:9" pos:end="1002:27"><name pos:start="1002:9" pos:end="1002:19"><name pos:start="1002:9" pos:end="1002:11">ctx</name><operator pos:start="1002:12" pos:end="1002:13">-&gt;</operator><name pos:start="1002:14" pos:end="1002:19">mg_ctx</name></name> <operator pos:start="1002:21" pos:end="1002:21">=</operator> <name pos:start="1002:23" pos:end="1002:27">mgctx</name></expr>;</expr_stmt>
        <return pos:start="1003:9" pos:end="1003:30">return <expr pos:start="1003:16" pos:end="1003:29"><operator pos:start="1003:16" pos:end="1003:16">(</operator><name pos:start="1003:17" pos:end="1003:28">EST_ERR_NONE</name><operator pos:start="1003:29" pos:end="1003:29">)</operator></expr>;</return>
    </block_content>}</block></if> <else pos:start="1004:7" pos:end="1006:5">else <block pos:start="1004:12" pos:end="1006:5">{<block_content pos:start="1005:9" pos:end="1005:36">
        <return pos:start="1005:9" pos:end="1005:36">return <expr pos:start="1005:16" pos:end="1005:35"><operator pos:start="1005:16" pos:end="1005:16">(</operator><name pos:start="1005:17" pos:end="1005:34">EST_ERR_NO_SSL_CTX</name><operator pos:start="1005:35" pos:end="1005:35">)</operator></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1008:1" pos:end="1018:3">/*! @brief est_proxy_stop() is used by an application to stop
    the EST proxy.  This should be called prior to est_destroy().
 
    @param ctx Pointer to the EST context

    libEST uses HTTP code from the Mongoose HTTP server.
    This function allows the application to stop the HTTP
    services layer.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1019:1" pos:end="1033:1"><type pos:start="1019:1" pos:end="1019:9"><name pos:start="1019:1" pos:end="1019:9">EST_ERROR</name></type> <name pos:start="1019:11" pos:end="1019:24">est_proxy_stop</name> <parameter_list pos:start="1019:26" pos:end="1019:39">(<parameter pos:start="1019:27" pos:end="1019:38"><decl pos:start="1019:27" pos:end="1019:38"><type pos:start="1019:27" pos:end="1019:35"><name pos:start="1019:27" pos:end="1019:33">EST_CTX</name> <modifier pos:start="1019:35" pos:end="1019:35">*</modifier></type><name pos:start="1019:36" pos:end="1019:38">ctx</name></decl></parameter>)</parameter_list>
<block pos:start="1020:1" pos:end="1033:1">{<block_content pos:start="1021:5" pos:end="1032:26">
    <decl_stmt pos:start="1021:5" pos:end="1021:26"><decl pos:start="1021:5" pos:end="1021:25"><type pos:start="1021:5" pos:end="1021:20"><name pos:start="1021:5" pos:end="1021:18">EST_MG_CONTEXT</name> <modifier pos:start="1021:20" pos:end="1021:20">*</modifier></type><name pos:start="1021:21" pos:end="1021:25">mgctx</name></decl>;</decl_stmt>

    <if_stmt pos:start="1023:5" pos:end="1026:5"><if pos:start="1023:5" pos:end="1026:5">if <condition pos:start="1023:8" pos:end="1023:13">(<expr pos:start="1023:9" pos:end="1023:12"><operator pos:start="1023:9" pos:end="1023:9">!</operator><name pos:start="1023:10" pos:end="1023:12">ctx</name></expr>)</condition> <block pos:start="1023:15" pos:end="1026:5">{<block_content pos:start="1024:9" pos:end="1025:32">
	<expr_stmt pos:start="1024:9" pos:end="1024:36"><expr pos:start="1024:9" pos:end="1024:35"><call pos:start="1024:9" pos:end="1024:35"><name pos:start="1024:9" pos:end="1024:19">EST_LOG_ERR</name><argument_list pos:start="1024:20" pos:end="1024:35">(<argument pos:start="1024:21" pos:end="1024:34"><expr pos:start="1024:21" pos:end="1024:34"><literal type="string" pos:start="1024:21" pos:end="1024:34">"Null context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:start="1025:9" pos:end="1025:32">return <expr pos:start="1025:16" pos:end="1025:31"><operator pos:start="1025:16" pos:end="1025:16">(</operator><name pos:start="1025:17" pos:end="1025:30">EST_ERR_NO_CTX</name><operator pos:start="1025:31" pos:end="1025:31">)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1028:5" pos:end="1028:41"><expr pos:start="1028:5" pos:end="1028:40"><name pos:start="1028:5" pos:end="1028:9">mgctx</name> <operator pos:start="1028:11" pos:end="1028:11">=</operator> <operator pos:start="1028:13" pos:end="1028:13">(</operator><name pos:start="1028:14" pos:end="1028:27">EST_MG_CONTEXT</name><operator pos:start="1028:28" pos:end="1028:28">*</operator><operator pos:start="1028:29" pos:end="1028:29">)</operator><name pos:start="1028:30" pos:end="1028:40"><name pos:start="1028:30" pos:end="1028:32">ctx</name><operator pos:start="1028:33" pos:end="1028:34">-&gt;</operator><name pos:start="1028:35" pos:end="1028:40">mg_ctx</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="1029:5" pos:end="1031:5"><if pos:start="1029:5" pos:end="1031:5">if <condition pos:start="1029:8" pos:end="1029:14">(<expr pos:start="1029:9" pos:end="1029:13"><name pos:start="1029:9" pos:end="1029:13">mgctx</name></expr>)</condition> <block pos:start="1029:16" pos:end="1031:5">{<block_content pos:start="1030:9" pos:end="1030:23">
        <expr_stmt pos:start="1030:9" pos:end="1030:23"><expr pos:start="1030:9" pos:end="1030:22"><call pos:start="1030:9" pos:end="1030:22"><name pos:start="1030:9" pos:end="1030:15">mg_stop</name><argument_list pos:start="1030:16" pos:end="1030:22">(<argument pos:start="1030:17" pos:end="1030:21"><expr pos:start="1030:17" pos:end="1030:21"><name pos:start="1030:17" pos:end="1030:21">mgctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="1032:5" pos:end="1032:26">return <expr pos:start="1032:12" pos:end="1032:25"><operator pos:start="1032:12" pos:end="1032:12">(</operator><name pos:start="1032:13" pos:end="1032:24">EST_ERR_NONE</name><operator pos:start="1032:25" pos:end="1032:25">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1034:1" pos:end="1083:3">/*! @brief est_proxy_init() is used by an application to create
    a context in the EST library.  This context is used when invoking
    other functions in the API while in Proxy mode.
 
    @param ca_chain     Char array containing PEM encoded CA certs &amp; CRL entries.
                        This chain of certificates is used as the trust anchor when
                        establishing a TLS connection.
    @param ca_chain_len Length of ca_chain char array. 
    @param cacerts_resp_chain Char array containing PEM encoded CA certs to
                              include in the /cacerts response.  This is
                              an optional parameter.  If it set, it contains
                              the chain of certificates used by the proxy to
                              respond to GET CA Certs requests from EST Clients.
                              If this parameter is not included, then the proxy
                              will obtain the CA certificate chain from the
                              configured upstream EST server.  If this parameter
                              is not NULL, then the correct length of this
                              buffer must be specified in cacerts_resp_chain_len.
    @param cacerts_resp_chain_len Length of cacerts_resp_chain char array
    @param cert_format Specifies the encoding of the local and external
                       certificate chains (PEM/DER).  
    @param http_realm Char array containing HTTP realm name for HTTP auth
    @param tls_id_cert Pointer to X509 that contains the proxy's certificate
                    for the TLS layer.
    @param tls_id_key Pointer to EVP_PKEY that contains the private key
                   associated with the proxy's certificate.
    @param uid  User ID to use for authenticating with server
    @param pwd  Password to use for authenticating with server

    This function allows an application to initialize an EST server context
    for proxy mode operation, which is used when operating as an RA.  The
    application must provide the trusted CA certificates to use for server
    operation using the ca_chain parameter.  This certificate set should
    include the explicit trust anchor certificate, any number of implicit
    trust anchor certificates, and any intermediate sub-CA certificates
    required to complete the chain of trust between the identity certificate
    passed into the tls_id_cert parameter and the root certificate for that
    identity certificate.  The CA certificates should be encoded using the
    format specified in the cert_format parameter (e.g. PEM) and may contain
    CRL entries that will be used when authenticating EST clients connecting
    to the server.  The applications must also provide the HTTP realm to use
    for HTTP authentication and the server cerificate/private key to use for
    TLS.
    
    Warning: Including additional intermediate sub-CA certificates that are
             not needed to complete the chain of trust may result in a
	     potential MITM attack.  
 
    @return EST_CTX.
 */</comment>
<function pos:start="1084:1" pos:end="1207:1"><type pos:start="1084:1" pos:end="1084:9"><name pos:start="1084:1" pos:end="1084:7">EST_CTX</name> <modifier pos:start="1084:9" pos:end="1084:9">*</modifier></type> <name pos:start="1084:11" pos:end="1084:24">est_proxy_init</name> <parameter_list pos:start="1084:26" pos:end="1089:47">(<parameter pos:start="1084:27" pos:end="1084:49"><decl pos:start="1084:27" pos:end="1084:49"><type pos:start="1084:27" pos:end="1084:49"><name pos:start="1084:27" pos:end="1084:34">unsigned</name> <name pos:start="1084:36" pos:end="1084:39">char</name> <modifier pos:start="1084:41" pos:end="1084:41">*</modifier></type><name pos:start="1084:42" pos:end="1084:49">ca_chain</name></decl></parameter>, <parameter pos:start="1084:52" pos:end="1084:67"><decl pos:start="1084:52" pos:end="1084:67"><type pos:start="1084:52" pos:end="1084:67"><name pos:start="1084:52" pos:end="1084:54">int</name></type> <name pos:start="1084:56" pos:end="1084:67">ca_chain_len</name></decl></parameter>,
                          <parameter pos:start="1085:27" pos:end="1085:59"><decl pos:start="1085:27" pos:end="1085:59"><type pos:start="1085:27" pos:end="1085:59"><name pos:start="1085:27" pos:end="1085:34">unsigned</name> <name pos:start="1085:36" pos:end="1085:39">char</name> <modifier pos:start="1085:41" pos:end="1085:41">*</modifier></type><name pos:start="1085:42" pos:end="1085:59">cacerts_resp_chain</name></decl></parameter>, <parameter pos:start="1085:62" pos:end="1085:87"><decl pos:start="1085:62" pos:end="1085:87"><type pos:start="1085:62" pos:end="1085:87"><name pos:start="1085:62" pos:end="1085:64">int</name></type> <name pos:start="1085:66" pos:end="1085:87">cacerts_resp_chain_len</name></decl></parameter>,
			  <parameter pos:start="1086:27" pos:end="1086:53"><decl pos:start="1086:27" pos:end="1086:53"><type pos:start="1086:27" pos:end="1086:53"><name pos:start="1086:27" pos:end="1086:41">EST_CERT_FORMAT</name></type> <name pos:start="1086:43" pos:end="1086:53">cert_format</name></decl></parameter>,
                          <parameter pos:start="1087:27" pos:end="1087:42"><decl pos:start="1087:27" pos:end="1087:42"><type pos:start="1087:27" pos:end="1087:42"><name pos:start="1087:27" pos:end="1087:30">char</name> <modifier pos:start="1087:32" pos:end="1087:32">*</modifier></type><name pos:start="1087:33" pos:end="1087:42">http_realm</name></decl></parameter>, 
			  <parameter pos:start="1088:27" pos:end="1088:43"><decl pos:start="1088:27" pos:end="1088:43"><type pos:start="1088:27" pos:end="1088:43"><name pos:start="1088:27" pos:end="1088:30">X509</name> <modifier pos:start="1088:32" pos:end="1088:32">*</modifier></type><name pos:start="1088:33" pos:end="1088:43">tls_id_cert</name></decl></parameter>, <parameter pos:start="1088:46" pos:end="1088:65"><decl pos:start="1088:46" pos:end="1088:65"><type pos:start="1088:46" pos:end="1088:65"><name pos:start="1088:46" pos:end="1088:53">EVP_PKEY</name> <modifier pos:start="1088:55" pos:end="1088:55">*</modifier></type><name pos:start="1088:56" pos:end="1088:65">tls_id_key</name></decl></parameter>,
                          <parameter pos:start="1089:27" pos:end="1089:35"><decl pos:start="1089:27" pos:end="1089:35"><type pos:start="1089:27" pos:end="1089:35"><name pos:start="1089:27" pos:end="1089:30">char</name> <modifier pos:start="1089:32" pos:end="1089:32">*</modifier></type><name pos:start="1089:33" pos:end="1089:35">uid</name></decl></parameter>, <parameter pos:start="1089:38" pos:end="1089:46"><decl pos:start="1089:38" pos:end="1089:46"><type pos:start="1089:38" pos:end="1089:46"><name pos:start="1089:38" pos:end="1089:41">char</name> <modifier pos:start="1089:43" pos:end="1089:43">*</modifier></type><name pos:start="1089:44" pos:end="1089:46">pwd</name></decl></parameter>)</parameter_list>
<block pos:start="1090:1" pos:end="1207:1">{<block_content pos:start="1091:5" pos:end="1206:17">
    <decl_stmt pos:start="1091:5" pos:end="1091:17"><decl pos:start="1091:5" pos:end="1091:16"><type pos:start="1091:5" pos:end="1091:13"><name pos:start="1091:5" pos:end="1091:11">EST_CTX</name> <modifier pos:start="1091:13" pos:end="1091:13">*</modifier></type><name pos:start="1091:14" pos:end="1091:16">ctx</name></decl>;</decl_stmt>
    <decl_stmt pos:start="1092:5" pos:end="1092:12"><decl pos:start="1092:5" pos:end="1092:11"><type pos:start="1092:5" pos:end="1092:7"><name pos:start="1092:5" pos:end="1092:7">int</name></type> <name pos:start="1092:9" pos:end="1092:11">len</name></decl>;</decl_stmt>

    <expr_stmt pos:start="1094:5" pos:end="1094:22"><expr pos:start="1094:5" pos:end="1094:21"><call pos:start="1094:5" pos:end="1094:21"><name pos:start="1094:5" pos:end="1094:19">est_log_version</name><argument_list pos:start="1094:20" pos:end="1094:21">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1096:5" pos:end="1098:7">/*
     * Sanity check the input
     */</comment>
    <if_stmt pos:start="1099:5" pos:end="1102:5"><if pos:start="1099:5" pos:end="1102:5">if <condition pos:start="1099:8" pos:end="1099:25">(<expr pos:start="1099:9" pos:end="1099:24"><name pos:start="1099:9" pos:end="1099:16">ca_chain</name> <operator pos:start="1099:18" pos:end="1099:19">==</operator> <name pos:start="1099:21" pos:end="1099:24">NULL</name></expr>)</condition> <block pos:start="1099:27" pos:end="1102:5">{<block_content pos:start="1100:9" pos:end="1101:20">
        <expr_stmt pos:start="1100:9" pos:end="1100:59"><expr pos:start="1100:9" pos:end="1100:58"><call pos:start="1100:9" pos:end="1100:58"><name pos:start="1100:9" pos:end="1100:19">EST_LOG_ERR</name><argument_list pos:start="1100:20" pos:end="1100:58">(<argument pos:start="1100:21" pos:end="1100:57"><expr pos:start="1100:21" pos:end="1100:57"><literal type="string" pos:start="1100:21" pos:end="1100:57">"Trusted CA certificate set is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1101:9" pos:end="1101:20">return <expr pos:start="1101:16" pos:end="1101:19"><name pos:start="1101:16" pos:end="1101:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1103:5" pos:end="1106:5"><if pos:start="1103:5" pos:end="1106:5">if <condition pos:start="1103:8" pos:end="1103:28">(<expr pos:start="1103:9" pos:end="1103:27"><name pos:start="1103:9" pos:end="1103:19">tls_id_cert</name> <operator pos:start="1103:21" pos:end="1103:22">==</operator> <name pos:start="1103:24" pos:end="1103:27">NULL</name></expr>)</condition> <block pos:start="1103:30" pos:end="1106:5">{<block_content pos:start="1104:9" pos:end="1105:20">
        <expr_stmt pos:start="1104:9" pos:end="1104:41"><expr pos:start="1104:9" pos:end="1104:40"><call pos:start="1104:9" pos:end="1104:40"><name pos:start="1104:9" pos:end="1104:19">EST_LOG_ERR</name><argument_list pos:start="1104:20" pos:end="1104:40">(<argument pos:start="1104:21" pos:end="1104:39"><expr pos:start="1104:21" pos:end="1104:39"><literal type="string" pos:start="1104:21" pos:end="1104:39">"TLS cert is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1105:9" pos:end="1105:20">return <expr pos:start="1105:16" pos:end="1105:19"><name pos:start="1105:16" pos:end="1105:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1107:5" pos:end="1110:5"><if pos:start="1107:5" pos:end="1110:5">if <condition pos:start="1107:8" pos:end="1107:27">(<expr pos:start="1107:9" pos:end="1107:26"><name pos:start="1107:9" pos:end="1107:18">tls_id_key</name> <operator pos:start="1107:20" pos:end="1107:21">==</operator> <name pos:start="1107:23" pos:end="1107:26">NULL</name></expr>)</condition> <block pos:start="1107:29" pos:end="1110:5">{<block_content pos:start="1108:9" pos:end="1109:20">
        <expr_stmt pos:start="1108:9" pos:end="1108:48"><expr pos:start="1108:9" pos:end="1108:47"><call pos:start="1108:9" pos:end="1108:47"><name pos:start="1108:9" pos:end="1108:19">EST_LOG_ERR</name><argument_list pos:start="1108:20" pos:end="1108:47">(<argument pos:start="1108:21" pos:end="1108:46"><expr pos:start="1108:21" pos:end="1108:46"><literal type="string" pos:start="1108:21" pos:end="1108:46">"TLS private key is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1109:9" pos:end="1109:20">return <expr pos:start="1109:16" pos:end="1109:19"><name pos:start="1109:16" pos:end="1109:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1111:5" pos:end="1114:5"><if pos:start="1111:5" pos:end="1114:5">if <condition pos:start="1111:8" pos:end="1111:27">(<expr pos:start="1111:9" pos:end="1111:26"><name pos:start="1111:9" pos:end="1111:18">http_realm</name> <operator pos:start="1111:20" pos:end="1111:21">==</operator> <name pos:start="1111:23" pos:end="1111:26">NULL</name></expr>)</condition> <block pos:start="1111:29" pos:end="1114:5">{<block_content pos:start="1112:9" pos:end="1113:20">
        <expr_stmt pos:start="1112:9" pos:end="1112:46"><expr pos:start="1112:9" pos:end="1112:45"><call pos:start="1112:9" pos:end="1112:45"><name pos:start="1112:9" pos:end="1112:19">EST_LOG_ERR</name><argument_list pos:start="1112:20" pos:end="1112:45">(<argument pos:start="1112:21" pos:end="1112:44"><expr pos:start="1112:21" pos:end="1112:44"><literal type="string" pos:start="1112:21" pos:end="1112:44">"EST HTTP realm is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1113:9" pos:end="1113:20">return <expr pos:start="1113:16" pos:end="1113:19"><name pos:start="1113:16" pos:end="1113:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1115:5" pos:end="1118:5"><if pos:start="1115:5" pos:end="1118:5">if <condition pos:start="1115:8" pos:end="1115:43">(<expr pos:start="1115:9" pos:end="1115:42"><name pos:start="1115:9" pos:end="1115:19">cert_format</name> <operator pos:start="1115:21" pos:end="1115:22">!=</operator> <name pos:start="1115:24" pos:end="1115:42">EST_CERT_FORMAT_PEM</name></expr>)</condition> <block pos:start="1115:45" pos:end="1118:5">{<block_content pos:start="1116:9" pos:end="1117:20">
        <expr_stmt pos:start="1116:9" pos:end="1116:71"><expr pos:start="1116:9" pos:end="1116:70"><call pos:start="1116:9" pos:end="1116:70"><name pos:start="1116:9" pos:end="1116:19">EST_LOG_ERR</name><argument_list pos:start="1116:20" pos:end="1116:70">(<argument pos:start="1116:21" pos:end="1116:69"><expr pos:start="1116:21" pos:end="1116:69"><literal type="string" pos:start="1116:21" pos:end="1116:69">"Only PEM encoding of certificates is supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1117:9" pos:end="1117:20">return <expr pos:start="1117:16" pos:end="1117:19"><name pos:start="1117:16" pos:end="1117:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>    

    <comment type="block" pos:start="1120:5" pos:end="1122:7">/*
     * Verify the lengths of the cert chains 
     */</comment>
    <expr_stmt pos:start="1123:5" pos:end="1123:56"><expr pos:start="1123:5" pos:end="1123:55"><name pos:start="1123:5" pos:end="1123:7">len</name> <operator pos:start="1123:9" pos:end="1123:9">=</operator> <operator pos:start="1123:11" pos:end="1123:11">(</operator><name pos:start="1123:12" pos:end="1123:14">int</name><operator pos:start="1123:15" pos:end="1123:15">)</operator> <call pos:start="1123:17" pos:end="1123:55"><name pos:start="1123:17" pos:end="1123:25">strnlen_s</name><argument_list pos:start="1123:26" pos:end="1123:55">(<argument pos:start="1123:27" pos:end="1123:42"><expr pos:start="1123:27" pos:end="1123:42"><operator pos:start="1123:27" pos:end="1123:27">(</operator><name pos:start="1123:28" pos:end="1123:31">char</name> <operator pos:start="1123:33" pos:end="1123:33">*</operator><operator pos:start="1123:34" pos:end="1123:34">)</operator><name pos:start="1123:35" pos:end="1123:42">ca_chain</name></expr></argument>, <argument pos:start="1123:45" pos:end="1123:54"><expr pos:start="1123:45" pos:end="1123:54"><name pos:start="1123:45" pos:end="1123:54">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1124:5" pos:end="1127:5"><if pos:start="1124:5" pos:end="1127:5">if <condition pos:start="1124:8" pos:end="1124:28">(<expr pos:start="1124:9" pos:end="1124:27"><name pos:start="1124:9" pos:end="1124:11">len</name> <operator pos:start="1124:13" pos:end="1124:14">!=</operator> <name pos:start="1124:16" pos:end="1124:27">ca_chain_len</name></expr>)</condition> <block pos:start="1124:30" pos:end="1127:5">{<block_content pos:start="1125:9" pos:end="1126:20">
	<expr_stmt pos:start="1125:9" pos:end="1125:69"><expr pos:start="1125:9" pos:end="1125:68"><call pos:start="1125:9" pos:end="1125:68"><name pos:start="1125:9" pos:end="1125:19">EST_LOG_ERR</name><argument_list pos:start="1125:20" pos:end="1125:68">(<argument pos:start="1125:21" pos:end="1125:67"><expr pos:start="1125:21" pos:end="1125:67"><literal type="string" pos:start="1125:21" pos:end="1125:67">"Length of ca_chain doesn't match ca_chain_len"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1126:9" pos:end="1126:20">return <expr pos:start="1126:16" pos:end="1126:19"><name pos:start="1126:16" pos:end="1126:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1128:5" pos:end="1134:5"><if pos:start="1128:5" pos:end="1134:5">if <condition pos:start="1128:8" pos:end="1128:27">(<expr pos:start="1128:9" pos:end="1128:26"><name pos:start="1128:9" pos:end="1128:26">cacerts_resp_chain</name></expr>)</condition> <block pos:start="1128:29" pos:end="1134:5">{<block_content pos:start="1129:9" pos:end="1133:9">    
        <expr_stmt pos:start="1129:9" pos:end="1129:70"><expr pos:start="1129:9" pos:end="1129:69"><name pos:start="1129:9" pos:end="1129:11">len</name> <operator pos:start="1129:13" pos:end="1129:13">=</operator> <operator pos:start="1129:15" pos:end="1129:15">(</operator><name pos:start="1129:16" pos:end="1129:18">int</name><operator pos:start="1129:19" pos:end="1129:19">)</operator> <call pos:start="1129:21" pos:end="1129:69"><name pos:start="1129:21" pos:end="1129:29">strnlen_s</name><argument_list pos:start="1129:30" pos:end="1129:69">(<argument pos:start="1129:31" pos:end="1129:56"><expr pos:start="1129:31" pos:end="1129:56"><operator pos:start="1129:31" pos:end="1129:31">(</operator><name pos:start="1129:32" pos:end="1129:35">char</name> <operator pos:start="1129:37" pos:end="1129:37">*</operator><operator pos:start="1129:38" pos:end="1129:38">)</operator><name pos:start="1129:39" pos:end="1129:56">cacerts_resp_chain</name></expr></argument>, <argument pos:start="1129:59" pos:end="1129:68"><expr pos:start="1129:59" pos:end="1129:68"><name pos:start="1129:59" pos:end="1129:68">EST_CA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1130:9" pos:end="1133:9"><if pos:start="1130:9" pos:end="1133:9">if <condition pos:start="1130:12" pos:end="1130:42">(<expr pos:start="1130:13" pos:end="1130:41"><name pos:start="1130:13" pos:end="1130:15">len</name> <operator pos:start="1130:17" pos:end="1130:18">!=</operator> <name pos:start="1130:20" pos:end="1130:41">cacerts_resp_chain_len</name></expr>)</condition> <block pos:start="1130:44" pos:end="1133:9">{<block_content pos:start="1131:13" pos:end="1132:24">
            <expr_stmt pos:start="1131:13" pos:end="1131:93"><expr pos:start="1131:13" pos:end="1131:92"><call pos:start="1131:13" pos:end="1131:92"><name pos:start="1131:13" pos:end="1131:23">EST_LOG_ERR</name><argument_list pos:start="1131:24" pos:end="1131:92">(<argument pos:start="1131:25" pos:end="1131:91"><expr pos:start="1131:25" pos:end="1131:91"><literal type="string" pos:start="1131:25" pos:end="1131:91">"Length of cacerts_resp_chain doesn't match cacerts_resp_chain_len"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1132:13" pos:end="1132:24">return <expr pos:start="1132:20" pos:end="1132:23"><name pos:start="1132:20" pos:end="1132:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="1136:5" pos:end="1141:7">/*
     * Allocate and set up the Proxy based EST Context.  This context will be
     * use when operating as the Server to the downstream clients.  EST Proxy mode
     * is basically a server function that requires client capabilities to
     * communicate to the upstream server when needed. 
     */</comment>
    <expr_stmt pos:start="1142:5" pos:end="1142:34"><expr pos:start="1142:5" pos:end="1142:33"><name pos:start="1142:5" pos:end="1142:7">ctx</name> <operator pos:start="1142:9" pos:end="1142:9">=</operator> <call pos:start="1142:11" pos:end="1142:33"><name pos:start="1142:11" pos:end="1142:16">malloc</name><argument_list pos:start="1142:17" pos:end="1142:33">(<argument pos:start="1142:18" pos:end="1142:32"><expr pos:start="1142:18" pos:end="1142:32"><sizeof pos:start="1142:18" pos:end="1142:32">sizeof<argument_list pos:start="1142:24" pos:end="1142:32">(<argument pos:start="1142:25" pos:end="1142:31"><expr pos:start="1142:25" pos:end="1142:31"><name pos:start="1142:25" pos:end="1142:31">EST_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1143:5" pos:end="1146:5"><if pos:start="1143:5" pos:end="1146:5">if <condition pos:start="1143:8" pos:end="1143:13">(<expr pos:start="1143:9" pos:end="1143:12"><operator pos:start="1143:9" pos:end="1143:9">!</operator><name pos:start="1143:10" pos:end="1143:12">ctx</name></expr>)</condition> <block pos:start="1143:15" pos:end="1146:5">{<block_content pos:start="1144:9" pos:end="1145:20">
        <expr_stmt pos:start="1144:9" pos:end="1144:37"><expr pos:start="1144:9" pos:end="1144:36"><call pos:start="1144:9" pos:end="1144:36"><name pos:start="1144:9" pos:end="1144:19">EST_LOG_ERR</name><argument_list pos:start="1144:20" pos:end="1144:36">(<argument pos:start="1144:21" pos:end="1144:35"><expr pos:start="1144:21" pos:end="1144:35"><literal type="string" pos:start="1144:21" pos:end="1144:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1145:9" pos:end="1145:20">return <expr pos:start="1145:16" pos:end="1145:19"><name pos:start="1145:16" pos:end="1145:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1147:5" pos:end="1147:36"><expr pos:start="1147:5" pos:end="1147:35"><call pos:start="1147:5" pos:end="1147:35"><name pos:start="1147:5" pos:end="1147:13">memzero_s</name><argument_list pos:start="1147:14" pos:end="1147:35">(<argument pos:start="1147:15" pos:end="1147:17"><expr pos:start="1147:15" pos:end="1147:17"><name pos:start="1147:15" pos:end="1147:17">ctx</name></expr></argument>, <argument pos:start="1147:20" pos:end="1147:34"><expr pos:start="1147:20" pos:end="1147:34"><sizeof pos:start="1147:20" pos:end="1147:34">sizeof<argument_list pos:start="1147:26" pos:end="1147:34">(<argument pos:start="1147:27" pos:end="1147:33"><expr pos:start="1147:27" pos:end="1147:33"><name pos:start="1147:27" pos:end="1147:33">EST_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1148:5" pos:end="1148:30"><expr pos:start="1148:5" pos:end="1148:29"><name pos:start="1148:5" pos:end="1148:17"><name pos:start="1148:5" pos:end="1148:7">ctx</name><operator pos:start="1148:8" pos:end="1148:9">-&gt;</operator><name pos:start="1148:10" pos:end="1148:17">est_mode</name></name> <operator pos:start="1148:19" pos:end="1148:19">=</operator> <name pos:start="1148:21" pos:end="1148:29">EST_PROXY</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1149:5" pos:end="1149:45"><expr pos:start="1149:5" pos:end="1149:44"><name pos:start="1149:5" pos:end="1149:21"><name pos:start="1149:5" pos:end="1149:7">ctx</name><operator pos:start="1149:8" pos:end="1149:9">-&gt;</operator><name pos:start="1149:10" pos:end="1149:21">retry_period</name></name> <operator pos:start="1149:23" pos:end="1149:23">=</operator> <name pos:start="1149:25" pos:end="1149:44">EST_RETRY_PERIOD_DEF</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1150:5" pos:end="1150:31"><expr pos:start="1150:5" pos:end="1150:30"><name pos:start="1150:5" pos:end="1150:26"><name pos:start="1150:5" pos:end="1150:7">ctx</name><operator pos:start="1150:8" pos:end="1150:9">-&gt;</operator><name pos:start="1150:10" pos:end="1150:26">server_enable_pop</name></name> <operator pos:start="1150:28" pos:end="1150:28">=</operator> <literal type="number" pos:start="1150:30" pos:end="1150:30">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1151:5" pos:end="1151:48"><expr pos:start="1151:5" pos:end="1151:47"><name pos:start="1151:5" pos:end="1151:26"><name pos:start="1151:5" pos:end="1151:7">ctx</name><operator pos:start="1151:8" pos:end="1151:9">-&gt;</operator><name pos:start="1151:10" pos:end="1151:26">require_http_auth</name></name> <operator pos:start="1151:28" pos:end="1151:28">=</operator> <name pos:start="1151:30" pos:end="1151:47">HTTP_AUTH_REQUIRED</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1152:5" pos:end="1152:56"><expr pos:start="1152:5" pos:end="1152:55"><name pos:start="1152:5" pos:end="1152:28"><name pos:start="1152:5" pos:end="1152:7">ctx</name><operator pos:start="1152:8" pos:end="1152:9">-&gt;</operator><name pos:start="1152:10" pos:end="1152:28">server_read_timeout</name></name> <operator pos:start="1152:30" pos:end="1152:30">=</operator> <name pos:start="1152:32" pos:end="1152:55">EST_SSL_READ_TIMEOUT_DEF</name></expr>;</expr_stmt>

    <if_stmt pos:start="1154:5" pos:end="1158:5"><if pos:start="1154:5" pos:end="1158:5">if <condition pos:start="1154:8" pos:end="1154:61">(<expr pos:start="1154:9" pos:end="1154:60"><call pos:start="1154:9" pos:end="1154:44"><name pos:start="1154:9" pos:end="1154:29">est_client_set_uid_pw</name><argument_list pos:start="1154:30" pos:end="1154:44">(<argument pos:start="1154:31" pos:end="1154:33"><expr pos:start="1154:31" pos:end="1154:33"><name pos:start="1154:31" pos:end="1154:33">ctx</name></expr></argument>, <argument pos:start="1154:36" pos:end="1154:38"><expr pos:start="1154:36" pos:end="1154:38"><name pos:start="1154:36" pos:end="1154:38">uid</name></expr></argument>, <argument pos:start="1154:41" pos:end="1154:43"><expr pos:start="1154:41" pos:end="1154:43"><name pos:start="1154:41" pos:end="1154:43">pwd</name></expr></argument>)</argument_list></call> <operator pos:start="1154:46" pos:end="1154:47">!=</operator> <name pos:start="1154:49" pos:end="1154:60">EST_ERR_NONE</name></expr>)</condition> <block pos:start="1154:63" pos:end="1158:5">{<block_content pos:start="1155:9" pos:end="1157:20">
        <expr_stmt pos:start="1155:9" pos:end="1155:91"><expr pos:start="1155:9" pos:end="1155:90"><call pos:start="1155:9" pos:end="1155:90"><name pos:start="1155:9" pos:end="1155:19">EST_LOG_ERR</name><argument_list pos:start="1155:20" pos:end="1155:90">(<argument pos:start="1155:21" pos:end="1155:89"><expr pos:start="1155:21" pos:end="1155:89"><literal type="string" pos:start="1155:21" pos:end="1155:89">"Failed to store the userid and password during proxy initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1156:9" pos:end="1156:18"><expr pos:start="1156:9" pos:end="1156:17"><call pos:start="1156:9" pos:end="1156:17"><name pos:start="1156:9" pos:end="1156:12">free</name><argument_list pos:start="1156:13" pos:end="1156:17">(<argument pos:start="1156:14" pos:end="1156:16"><expr pos:start="1156:14" pos:end="1156:16"><name pos:start="1156:14" pos:end="1156:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1157:9" pos:end="1157:20">return <expr pos:start="1157:16" pos:end="1157:19"><name pos:start="1157:16" pos:end="1157:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>        
    
    <comment type="block" pos:start="1160:5" pos:end="1163:7">/*
     * Load the CA certificates into local memory and retain
     * for future use.  This will be used for /cacerts requests.
     */</comment>
    <if_stmt pos:start="1164:5" pos:end="1170:5"><if pos:start="1164:5" pos:end="1170:5">if <condition pos:start="1164:8" pos:end="1164:27">(<expr pos:start="1164:9" pos:end="1164:26"><name pos:start="1164:9" pos:end="1164:26">cacerts_resp_chain</name></expr>)</condition> <block pos:start="1164:29" pos:end="1170:5">{<block_content pos:start="1165:9" pos:end="1169:9">    
        <if_stmt pos:start="1165:9" pos:end="1169:9"><if pos:start="1165:9" pos:end="1169:9">if <condition pos:start="1165:12" pos:end="1165:79">(<expr pos:start="1165:13" pos:end="1165:78"><call pos:start="1165:13" pos:end="1165:78"><name pos:start="1165:13" pos:end="1165:29">est_load_ca_certs</name><argument_list pos:start="1165:30" pos:end="1165:78">(<argument pos:start="1165:31" pos:end="1165:33"><expr pos:start="1165:31" pos:end="1165:33"><name pos:start="1165:31" pos:end="1165:33">ctx</name></expr></argument>, <argument pos:start="1165:36" pos:end="1165:53"><expr pos:start="1165:36" pos:end="1165:53"><name pos:start="1165:36" pos:end="1165:53">cacerts_resp_chain</name></expr></argument>, <argument pos:start="1165:56" pos:end="1165:77"><expr pos:start="1165:56" pos:end="1165:77"><name pos:start="1165:56" pos:end="1165:77">cacerts_resp_chain_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1165:81" pos:end="1169:9">{<block_content pos:start="1166:13" pos:end="1168:24">
            <expr_stmt pos:start="1166:13" pos:end="1166:74"><expr pos:start="1166:13" pos:end="1166:73"><call pos:start="1166:13" pos:end="1166:73"><name pos:start="1166:13" pos:end="1166:23">EST_LOG_ERR</name><argument_list pos:start="1166:24" pos:end="1166:73">(<argument pos:start="1166:25" pos:end="1166:72"><expr pos:start="1166:25" pos:end="1166:72"><literal type="string" pos:start="1166:25" pos:end="1166:72">"Failed to load CA certificates response buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="1167:13" pos:end="1167:22"><expr pos:start="1167:13" pos:end="1167:21"><call pos:start="1167:13" pos:end="1167:21"><name pos:start="1167:13" pos:end="1167:16">free</name><argument_list pos:start="1167:17" pos:end="1167:21">(<argument pos:start="1167:18" pos:end="1167:20"><expr pos:start="1167:18" pos:end="1167:20"><name pos:start="1167:18" pos:end="1167:20">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="1168:13" pos:end="1168:24">return <expr pos:start="1168:20" pos:end="1168:23"><name pos:start="1168:20" pos:end="1168:23">NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    
    <comment type="block" pos:start="1172:5" pos:end="1179:7">/*
     * Load the CA certificate chain into an X509 store structure
     * This will be used in verifying incoming certs during TLS
     * establishement.
     * Also save a way a raw copy of the ca_chain buffer so that
     * it can be used when creating client contexts used to communincate
     * to the upstream server.
     */</comment>
    <if_stmt pos:start="1180:5" pos:end="1184:5"><if pos:start="1180:5" pos:end="1184:5">if <condition pos:start="1180:8" pos:end="1180:60">(<expr pos:start="1180:9" pos:end="1180:59"><call pos:start="1180:9" pos:end="1180:59"><name pos:start="1180:9" pos:end="1180:30">est_load_trusted_certs</name><argument_list pos:start="1180:31" pos:end="1180:59">(<argument pos:start="1180:32" pos:end="1180:34"><expr pos:start="1180:32" pos:end="1180:34"><name pos:start="1180:32" pos:end="1180:34">ctx</name></expr></argument>, <argument pos:start="1180:37" pos:end="1180:44"><expr pos:start="1180:37" pos:end="1180:44"><name pos:start="1180:37" pos:end="1180:44">ca_chain</name></expr></argument>, <argument pos:start="1180:47" pos:end="1180:58"><expr pos:start="1180:47" pos:end="1180:58"><name pos:start="1180:47" pos:end="1180:58">ca_chain_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1180:62" pos:end="1184:5">{<block_content pos:start="1181:9" pos:end="1183:20">
        <expr_stmt pos:start="1181:9" pos:end="1181:64"><expr pos:start="1181:9" pos:end="1181:63"><call pos:start="1181:9" pos:end="1181:63"><name pos:start="1181:9" pos:end="1181:19">EST_LOG_ERR</name><argument_list pos:start="1181:20" pos:end="1181:63">(<argument pos:start="1181:21" pos:end="1181:62"><expr pos:start="1181:21" pos:end="1181:62"><literal type="string" pos:start="1181:21" pos:end="1181:62">"Failed to load trusted certificate store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1182:9" pos:end="1182:25"><expr pos:start="1182:9" pos:end="1182:24"><call pos:start="1182:9" pos:end="1182:24"><name pos:start="1182:9" pos:end="1182:19">est_destroy</name><argument_list pos:start="1182:20" pos:end="1182:24">(<argument pos:start="1182:21" pos:end="1182:23"><expr pos:start="1182:21" pos:end="1182:23"><name pos:start="1182:21" pos:end="1182:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1183:9" pos:end="1183:20">return <expr pos:start="1183:16" pos:end="1183:19"><name pos:start="1183:16" pos:end="1183:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1185:5" pos:end="1185:48"><expr pos:start="1185:5" pos:end="1185:47"><name pos:start="1185:5" pos:end="1185:21"><name pos:start="1185:5" pos:end="1185:7">ctx</name><operator pos:start="1185:8" pos:end="1185:9">-&gt;</operator><name pos:start="1185:10" pos:end="1185:21">ca_chain_raw</name></name> <operator pos:start="1185:23" pos:end="1185:23">=</operator>  <call pos:start="1185:26" pos:end="1185:47"><name pos:start="1185:26" pos:end="1185:31">malloc</name><argument_list pos:start="1185:32" pos:end="1185:47">(<argument pos:start="1185:33" pos:end="1185:46"><expr pos:start="1185:33" pos:end="1185:46"><name pos:start="1185:33" pos:end="1185:44">ca_chain_len</name><operator pos:start="1185:45" pos:end="1185:45">+</operator><literal type="number" pos:start="1185:46" pos:end="1185:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1186:5" pos:end="1190:5"><if pos:start="1186:5" pos:end="1190:5">if <condition pos:start="1186:8" pos:end="1186:27">(<expr pos:start="1186:9" pos:end="1186:26"><operator pos:start="1186:9" pos:end="1186:9">!</operator><name pos:start="1186:10" pos:end="1186:26"><name pos:start="1186:10" pos:end="1186:12">ctx</name><operator pos:start="1186:13" pos:end="1186:14">-&gt;</operator><name pos:start="1186:15" pos:end="1186:26">ca_chain_raw</name></name></expr>)</condition> <block pos:start="1186:29" pos:end="1190:5">{<block_content pos:start="1187:9" pos:end="1189:20">
        <expr_stmt pos:start="1187:9" pos:end="1187:37"><expr pos:start="1187:9" pos:end="1187:36"><call pos:start="1187:9" pos:end="1187:36"><name pos:start="1187:9" pos:end="1187:19">EST_LOG_ERR</name><argument_list pos:start="1187:20" pos:end="1187:36">(<argument pos:start="1187:21" pos:end="1187:35"><expr pos:start="1187:21" pos:end="1187:35"><literal type="string" pos:start="1187:21" pos:end="1187:35">"malloc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="1188:9" pos:end="1188:25"><expr pos:start="1188:9" pos:end="1188:24"><call pos:start="1188:9" pos:end="1188:24"><name pos:start="1188:9" pos:end="1188:19">est_destroy</name><argument_list pos:start="1188:20" pos:end="1188:24">(<argument pos:start="1188:21" pos:end="1188:23"><expr pos:start="1188:21" pos:end="1188:23"><name pos:start="1188:21" pos:end="1188:23">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1189:9" pos:end="1189:20">return <expr pos:start="1189:16" pos:end="1189:19"><name pos:start="1189:16" pos:end="1189:19">NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="1191:5" pos:end="1191:88"><expr pos:start="1191:5" pos:end="1191:87"><call pos:start="1191:5" pos:end="1191:87"><name pos:start="1191:5" pos:end="1191:12">memcpy_s</name><argument_list pos:start="1191:13" pos:end="1191:87">(<argument pos:start="1191:14" pos:end="1191:38"><expr pos:start="1191:14" pos:end="1191:38"><operator pos:start="1191:14" pos:end="1191:14">(</operator><name pos:start="1191:15" pos:end="1191:18">char</name> <operator pos:start="1191:20" pos:end="1191:20">*</operator><operator pos:start="1191:21" pos:end="1191:21">)</operator><name pos:start="1191:22" pos:end="1191:38"><name pos:start="1191:22" pos:end="1191:24">ctx</name><operator pos:start="1191:25" pos:end="1191:26">-&gt;</operator><name pos:start="1191:27" pos:end="1191:38">ca_chain_raw</name></name></expr></argument>, <argument pos:start="1191:41" pos:end="1191:54"><expr pos:start="1191:41" pos:end="1191:54"><name pos:start="1191:41" pos:end="1191:52">ca_chain_len</name><operator pos:start="1191:53" pos:end="1191:53">+</operator><literal type="number" pos:start="1191:54" pos:end="1191:54">1</literal></expr></argument>, <argument pos:start="1191:57" pos:end="1191:72"><expr pos:start="1191:57" pos:end="1191:72"><operator pos:start="1191:57" pos:end="1191:57">(</operator><name pos:start="1191:58" pos:end="1191:61">char</name> <operator pos:start="1191:63" pos:end="1191:63">*</operator><operator pos:start="1191:64" pos:end="1191:64">)</operator><name pos:start="1191:65" pos:end="1191:72">ca_chain</name></expr></argument>, <argument pos:start="1191:75" pos:end="1191:86"><expr pos:start="1191:75" pos:end="1191:86"><name pos:start="1191:75" pos:end="1191:86">ca_chain_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1192:5" pos:end="1192:43"><expr pos:start="1192:5" pos:end="1192:42"><name pos:start="1192:5" pos:end="1192:35"><name pos:start="1192:5" pos:end="1192:7">ctx</name><operator pos:start="1192:8" pos:end="1192:9">-&gt;</operator><name pos:start="1192:10" pos:end="1192:21">ca_chain_raw</name><index pos:start="1192:22" pos:end="1192:35">[<expr pos:start="1192:23" pos:end="1192:34"><name pos:start="1192:23" pos:end="1192:34">ca_chain_len</name></expr>]</index></name> <operator pos:start="1192:37" pos:end="1192:37">=</operator> <literal type="char" pos:start="1192:39" pos:end="1192:42">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1193:5" pos:end="1193:41"><expr pos:start="1193:5" pos:end="1193:40"><name pos:start="1193:5" pos:end="1193:25"><name pos:start="1193:5" pos:end="1193:7">ctx</name><operator pos:start="1193:8" pos:end="1193:9">-&gt;</operator><name pos:start="1193:10" pos:end="1193:25">ca_chain_raw_len</name></name> <operator pos:start="1193:27" pos:end="1193:27">=</operator> <name pos:start="1193:29" pos:end="1193:40">ca_chain_len</name></expr>;</expr_stmt>
    
    <expr_stmt pos:start="1195:5" pos:end="1195:60"><expr pos:start="1195:5" pos:end="1195:59"><call pos:start="1195:5" pos:end="1195:59"><name pos:start="1195:5" pos:end="1195:13">strncpy_s</name><argument_list pos:start="1195:14" pos:end="1195:59">(<argument pos:start="1195:15" pos:end="1195:24"><expr pos:start="1195:15" pos:end="1195:24"><name pos:start="1195:15" pos:end="1195:24"><name pos:start="1195:15" pos:end="1195:17">ctx</name><operator pos:start="1195:18" pos:end="1195:19">-&gt;</operator><name pos:start="1195:20" pos:end="1195:24">realm</name></name></expr></argument>, <argument pos:start="1195:27" pos:end="1195:35"><expr pos:start="1195:27" pos:end="1195:35"><name pos:start="1195:27" pos:end="1195:35">MAX_REALM</name></expr></argument>, <argument pos:start="1195:38" pos:end="1195:47"><expr pos:start="1195:38" pos:end="1195:47"><name pos:start="1195:38" pos:end="1195:47">http_realm</name></expr></argument>, <argument pos:start="1195:50" pos:end="1195:58"><expr pos:start="1195:50" pos:end="1195:58"><name pos:start="1195:50" pos:end="1195:58">MAX_REALM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1196:5" pos:end="1196:35"><expr pos:start="1196:5" pos:end="1196:34"><name pos:start="1196:5" pos:end="1196:20"><name pos:start="1196:5" pos:end="1196:7">ctx</name><operator pos:start="1196:8" pos:end="1196:9">-&gt;</operator><name pos:start="1196:10" pos:end="1196:20">server_cert</name></name> <operator pos:start="1196:22" pos:end="1196:22">=</operator> <name pos:start="1196:24" pos:end="1196:34">tls_id_cert</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1197:5" pos:end="1197:38"><expr pos:start="1197:5" pos:end="1197:37"><name pos:start="1197:5" pos:end="1197:24"><name pos:start="1197:5" pos:end="1197:7">ctx</name><operator pos:start="1197:8" pos:end="1197:9">-&gt;</operator><name pos:start="1197:10" pos:end="1197:24">server_priv_key</name></name> <operator pos:start="1197:26" pos:end="1197:26">=</operator> <name pos:start="1197:28" pos:end="1197:37">tls_id_key</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1198:5" pos:end="1198:32"><expr pos:start="1198:5" pos:end="1198:31"><name pos:start="1198:5" pos:end="1198:18"><name pos:start="1198:5" pos:end="1198:7">ctx</name><operator pos:start="1198:8" pos:end="1198:9">-&gt;</operator><name pos:start="1198:10" pos:end="1198:18">auth_mode</name></name> <operator pos:start="1198:20" pos:end="1198:20">=</operator> <name pos:start="1198:22" pos:end="1198:31">AUTH_BASIC</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1199:5" pos:end="1199:49"><expr pos:start="1199:5" pos:end="1199:48"><name pos:start="1199:5" pos:end="1199:21"><name pos:start="1199:5" pos:end="1199:7">ctx</name><operator pos:start="1199:8" pos:end="1199:9">-&gt;</operator><name pos:start="1199:10" pos:end="1199:21">read_timeout</name></name> <operator pos:start="1199:23" pos:end="1199:23">=</operator> <name pos:start="1199:25" pos:end="1199:48">EST_SSL_READ_TIMEOUT_DEF</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1200:5" pos:end="1200:31"><expr pos:start="1200:5" pos:end="1200:30"><name pos:start="1200:5" pos:end="1200:26"><name pos:start="1200:5" pos:end="1200:7">ctx</name><operator pos:start="1200:8" pos:end="1200:9">-&gt;</operator><name pos:start="1200:10" pos:end="1200:26">retry_after_delay</name></name> <operator pos:start="1200:28" pos:end="1200:28">=</operator> <literal type="number" pos:start="1200:30" pos:end="1200:30">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1201:5" pos:end="1201:30"><expr pos:start="1201:5" pos:end="1201:29"><name pos:start="1201:5" pos:end="1201:25"><name pos:start="1201:5" pos:end="1201:7">ctx</name><operator pos:start="1201:8" pos:end="1201:9">-&gt;</operator><name pos:start="1201:10" pos:end="1201:25">retry_after_date</name></name> <operator pos:start="1201:27" pos:end="1201:27">=</operator> <literal type="number" pos:start="1201:29" pos:end="1201:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1203:5" pos:end="1203:109"><expr pos:start="1203:5" pos:end="1203:108"><name pos:start="1203:5" pos:end="1203:25"><name pos:start="1203:5" pos:end="1203:7">ctx</name><operator pos:start="1203:8" pos:end="1203:9">-&gt;</operator><name pos:start="1203:10" pos:end="1203:25">client_ctx_array</name></name> <operator pos:start="1203:27" pos:end="1203:27">=</operator> <operator pos:start="1203:29" pos:end="1203:29">(</operator><name pos:start="1203:30" pos:end="1203:49">CLIENT_CTX_LU_NODE_T</name> <operator pos:start="1203:51" pos:end="1203:51">*</operator><operator pos:start="1203:52" pos:end="1203:52">)</operator> <call pos:start="1203:54" pos:end="1203:108"><name pos:start="1203:54" pos:end="1203:59">malloc</name><argument_list pos:start="1203:60" pos:end="1203:108">( <argument pos:start="1203:62" pos:end="1203:107"><expr pos:start="1203:62" pos:end="1203:107"><sizeof pos:start="1203:62" pos:end="1203:89">sizeof<argument_list pos:start="1203:68" pos:end="1203:89">(<argument pos:start="1203:69" pos:end="1203:88"><expr pos:start="1203:69" pos:end="1203:88"><name pos:start="1203:69" pos:end="1203:88">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof><operator pos:start="1203:90" pos:end="1203:90">*</operator><name pos:start="1203:91" pos:end="1203:107">cur_max_ctx_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1204:5" pos:end="1204:85"><expr pos:start="1204:5" pos:end="1204:84"><call pos:start="1204:5" pos:end="1204:84"><name pos:start="1204:5" pos:end="1204:13">memzero_s</name><argument_list pos:start="1204:14" pos:end="1204:84">(<argument pos:start="1204:15" pos:end="1204:35"><expr pos:start="1204:15" pos:end="1204:35"><name pos:start="1204:15" pos:end="1204:35"><name pos:start="1204:15" pos:end="1204:17">ctx</name><operator pos:start="1204:18" pos:end="1204:19">-&gt;</operator><name pos:start="1204:20" pos:end="1204:35">client_ctx_array</name></name></expr></argument>, <argument pos:start="1204:38" pos:end="1204:83"><expr pos:start="1204:38" pos:end="1204:83"><sizeof pos:start="1204:38" pos:end="1204:65">sizeof<argument_list pos:start="1204:44" pos:end="1204:65">(<argument pos:start="1204:45" pos:end="1204:64"><expr pos:start="1204:45" pos:end="1204:64"><name pos:start="1204:45" pos:end="1204:64">CLIENT_CTX_LU_NODE_T</name></expr></argument>)</argument_list></sizeof><operator pos:start="1204:66" pos:end="1204:66">*</operator><name pos:start="1204:67" pos:end="1204:83">cur_max_ctx_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return pos:start="1206:5" pos:end="1206:17">return <expr pos:start="1206:12" pos:end="1206:16"><operator pos:start="1206:12" pos:end="1206:12">(</operator><name pos:start="1206:13" pos:end="1206:15">ctx</name><operator pos:start="1206:16" pos:end="1206:16">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1208:1" pos:end="1223:3">/*! @brief est_proxy_set_auth_mode() is used by an application layer to
    configure the HTTP authentication method to use for validating the
    identity of an EST client.
 
    @param ctx Pointer to the EST proxy context.  This was returned from
    est_proxy_init().
    @param amode Should be either AUTH_BASIC or AUTH_DIGEST

    This function can optionally be invoked by the application layer to change
    the default HTTP authentication mode.  The default mode is HTTP Basic
    authentication.  An application may desire to use Digest authentication
    instead, in which case this function can be used to set that mode.  This
    function should be invoked prior to starting the EST proxy.

    @return EST_ERROR.
 */</comment>
<function pos:start="1224:1" pos:end="1227:1"><type pos:start="1224:1" pos:end="1224:9"><name pos:start="1224:1" pos:end="1224:9">EST_ERROR</name></type> <name pos:start="1224:11" pos:end="1224:33">est_proxy_set_auth_mode</name> <parameter_list pos:start="1224:35" pos:end="1224:74">(<parameter pos:start="1224:36" pos:end="1224:47"><decl pos:start="1224:36" pos:end="1224:47"><type pos:start="1224:36" pos:end="1224:47"><name pos:start="1224:36" pos:end="1224:42">EST_CTX</name> <modifier pos:start="1224:44" pos:end="1224:44">*</modifier></type><name pos:start="1224:45" pos:end="1224:47">ctx</name></decl></parameter>, <parameter pos:start="1224:50" pos:end="1224:73"><decl pos:start="1224:50" pos:end="1224:73"><type pos:start="1224:50" pos:end="1224:73"><name pos:start="1224:50" pos:end="1224:67">EST_HTTP_AUTH_MODE</name></type> <name pos:start="1224:69" pos:end="1224:73">amode</name></decl></parameter>)</parameter_list>
<block pos:start="1225:1" pos:end="1227:1">{<block_content pos:start="1226:5" pos:end="1226:49">
    <return pos:start="1226:5" pos:end="1226:49">return<expr pos:start="1226:11" pos:end="1226:48"><operator pos:start="1226:11" pos:end="1226:11">(</operator><call pos:start="1226:12" pos:end="1226:47"><name pos:start="1226:12" pos:end="1226:35">est_server_set_auth_mode</name><argument_list pos:start="1226:36" pos:end="1226:47">(<argument pos:start="1226:37" pos:end="1226:39"><expr pos:start="1226:37" pos:end="1226:39"><name pos:start="1226:37" pos:end="1226:39">ctx</name></expr></argument>, <argument pos:start="1226:42" pos:end="1226:46"><expr pos:start="1226:42" pos:end="1226:46"><name pos:start="1226:42" pos:end="1226:46">amode</name></expr></argument>)</argument_list></call><operator pos:start="1226:48" pos:end="1226:48">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1228:1" pos:end="1275:2">/*! @brief est_proxy_set_auth_cred_cb() is used by an application to register
  its callback function. 
    
  @param ctx EST context obtained from the est_proxy_init() call.
  @param auth_credentials_cb  Function pointer to the application layer callback

  The registered callback function is used by the EST client library to obtain
  authentication credentials.  The application can provide authentication
  credentials during initialization if they are available, such as the userid
  and password used with HTTP basic authentication.  During the processing of
  a request, the EST client library will call this application callback in the
  event that it does not have the authentication credentials that are being
  requested by the EST server.

  The callback function definition must match the following function
  prototype,

  int (*auth_credentials_cb)(EST_HTTP_AUTH_HDR *auth_credentials);

  auth_credentials - A pointer to a EST_HTTP_AUTH_HDR structure.  The
                     structure is provided by the EST library and the callback
                     function fills in the specific credentials being
                     requested.  These credential values must be passed in the
                     format in which they will be sent to the server, that is,
                     the EST client library will perform no reformatting of
                     these credentials.  Ownership of the memory holding these
                     credential values is transferred from the application
                     layer to the EST library when the application layer
                     returns these values to the EST library.  This allows the
                     EST library to free up this memory as soon as it is done
                     using these values.
                         
  The return value from the callback must be one of the following values:

  EST_HTTP_AUTH_CRED_SUCCESS - If the callback was able to provide the
                               requested credentials.
  EST_HTTP_AUTH_CRED_NOT_AVAILABLE - If the callback could not provide the
                                     requested credentials.

  The auth_credentials_cb parameter can be set to NULL to reset the callback
  function.
  
  All string parameters are NULL terminated strings.
    
  @return EST_ERROR.
  EST_ERR_NONE - Success.
  EST_ERR_NO_CTX
*/</comment>
<function pos:start="1276:1" pos:end="1279:1"><type pos:start="1276:1" pos:end="1276:9"><name pos:start="1276:1" pos:end="1276:9">EST_ERROR</name></type> <name pos:start="1276:11" pos:end="1276:36">est_proxy_set_auth_cred_cb</name> <parameter_list pos:start="1276:38" pos:end="1276:81">(<parameter pos:start="1276:39" pos:end="1276:50"><decl pos:start="1276:39" pos:end="1276:50"><type pos:start="1276:39" pos:end="1276:50"><name pos:start="1276:39" pos:end="1276:45">EST_CTX</name> <modifier pos:start="1276:47" pos:end="1276:47">*</modifier></type><name pos:start="1276:48" pos:end="1276:50">ctx</name></decl></parameter>, <parameter pos:start="1276:53" pos:end="1276:80"><decl pos:start="1276:53" pos:end="1276:80"><type pos:start="1276:53" pos:end="1276:80"><name pos:start="1276:53" pos:end="1276:71">auth_credentials_cb</name></type> <name pos:start="1276:73" pos:end="1276:80">callback</name></decl></parameter>)</parameter_list>
<block pos:start="1277:1" pos:end="1279:1">{<block_content pos:start="1278:5" pos:end="1278:55">
    <return pos:start="1278:5" pos:end="1278:55">return<expr pos:start="1278:11" pos:end="1278:54"><operator pos:start="1278:11" pos:end="1278:11">(</operator><call pos:start="1278:12" pos:end="1278:53"><name pos:start="1278:12" pos:end="1278:38">est_client_set_auth_cred_cb</name><argument_list pos:start="1278:39" pos:end="1278:53">(<argument pos:start="1278:40" pos:end="1278:42"><expr pos:start="1278:40" pos:end="1278:42"><name pos:start="1278:40" pos:end="1278:42">ctx</name></expr></argument>, <argument pos:start="1278:45" pos:end="1278:52"><expr pos:start="1278:45" pos:end="1278:52"><name pos:start="1278:45" pos:end="1278:52">callback</name></expr></argument>)</argument_list></call><operator pos:start="1278:54" pos:end="1278:54">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1280:1" pos:end="1292:3">/*! @brief est_proxy_set_read_timeout() is used by an application to set
    timeout value of read operations.  After the EST proxy sends a request to
    the EST server it will attempt to read the response from the server.  This
    timeout value limits the amount of time the proxy will wait for the
    response.

    @param ctx Pointer to the EST context
    @param timeout Integer value representing the read timeout in seconds.
    The minimum value is EST_SSL_READ_TIMEOUT_MIN and the maximum value is
    EST_SSL_READ_TIMEOUT_MAX.
 
    @return EST_ERROR.
 */</comment>
<function pos:start="1293:1" pos:end="1296:1"><type pos:start="1293:1" pos:end="1293:9"><name pos:start="1293:1" pos:end="1293:9">EST_ERROR</name></type> <name pos:start="1293:11" pos:end="1293:36">est_proxy_set_read_timeout</name> <parameter_list pos:start="1293:38" pos:end="1293:64">(<parameter pos:start="1293:39" pos:end="1293:50"><decl pos:start="1293:39" pos:end="1293:50"><type pos:start="1293:39" pos:end="1293:50"><name pos:start="1293:39" pos:end="1293:45">EST_CTX</name> <modifier pos:start="1293:47" pos:end="1293:47">*</modifier></type><name pos:start="1293:48" pos:end="1293:50">ctx</name></decl></parameter>, <parameter pos:start="1293:53" pos:end="1293:63"><decl pos:start="1293:53" pos:end="1293:63"><type pos:start="1293:53" pos:end="1293:63"><name pos:start="1293:53" pos:end="1293:55">int</name></type> <name pos:start="1293:57" pos:end="1293:63">timeout</name></decl></parameter>)</parameter_list>
<block pos:start="1294:1" pos:end="1296:1">{<block_content pos:start="1295:5" pos:end="1295:54">
    <return pos:start="1295:5" pos:end="1295:54">return<expr pos:start="1295:11" pos:end="1295:53"><operator pos:start="1295:11" pos:end="1295:11">(</operator><call pos:start="1295:12" pos:end="1295:52"><name pos:start="1295:12" pos:end="1295:38">est_client_set_read_timeout</name><argument_list pos:start="1295:39" pos:end="1295:52">(<argument pos:start="1295:40" pos:end="1295:42"><expr pos:start="1295:40" pos:end="1295:42"><name pos:start="1295:40" pos:end="1295:42">ctx</name></expr></argument>, <argument pos:start="1295:45" pos:end="1295:51"><expr pos:start="1295:45" pos:end="1295:51"><name pos:start="1295:45" pos:end="1295:51">timeout</name></expr></argument>)</argument_list></call><operator pos:start="1295:53" pos:end="1295:53">)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen" pos:start="1297:1" pos:end="1316:3">/*! @brief est_proxy_set_server() is called by the application layer to
     specify the address/port of the EST server. It must be called after
     est_proxy_init() and prior to issuing any EST commands.
 
    @param ctx Pointer to EST context for a client session
    @param server Name of the EST server to connect to.  The ASCII string
    representing the name of the server is limited to 254 characters
    @param port TCP port on the EST server to connect
 
    @return EST_ERROR
    EST_ERR_NONE - Success.
    EST_ERR_NO_CTX - NULL value passed for EST context
    EST_ERR_INVALID_SERVER_NAME - NULL value passed for EST server name, or
    server name string too long
    EST_ERR_INVALID_PORT_NUM - Invalid port number input, less than zero or
    greater than 65535

    est_proxy_set_server error checks its input parameters and then stores
    both the hostname and port number into the EST context.
 */</comment>
<function pos:start="1317:1" pos:end="1340:1"><type pos:start="1317:1" pos:end="1317:9"><name pos:start="1317:1" pos:end="1317:9">EST_ERROR</name></type> <name pos:start="1317:11" pos:end="1317:30">est_proxy_set_server</name> <parameter_list pos:start="1317:32" pos:end="1317:75">(<parameter pos:start="1317:33" pos:end="1317:44"><decl pos:start="1317:33" pos:end="1317:44"><type pos:start="1317:33" pos:end="1317:44"><name pos:start="1317:33" pos:end="1317:39">EST_CTX</name> <modifier pos:start="1317:41" pos:end="1317:41">*</modifier></type><name pos:start="1317:42" pos:end="1317:44">ctx</name></decl></parameter>, <parameter pos:start="1317:47" pos:end="1317:64"><decl pos:start="1317:47" pos:end="1317:64"><type pos:start="1317:47" pos:end="1317:64"><specifier pos:start="1317:47" pos:end="1317:51">const</specifier> <name pos:start="1317:53" pos:end="1317:56">char</name> <modifier pos:start="1317:58" pos:end="1317:58">*</modifier></type><name pos:start="1317:59" pos:end="1317:64">server</name></decl></parameter>, <parameter pos:start="1317:67" pos:end="1317:74"><decl pos:start="1317:67" pos:end="1317:74"><type pos:start="1317:67" pos:end="1317:74"><name pos:start="1317:67" pos:end="1317:69">int</name></type> <name pos:start="1317:71" pos:end="1317:74">port</name></decl></parameter>)</parameter_list>
<block pos:start="1318:1" pos:end="1340:1">{<block_content pos:start="1320:5" pos:end="1339:24">
    
    <if_stmt pos:start="1320:5" pos:end="1322:5"><if pos:start="1320:5" pos:end="1322:5">if <condition pos:start="1320:8" pos:end="1320:13">(<expr pos:start="1320:9" pos:end="1320:12"><operator pos:start="1320:9" pos:end="1320:9">!</operator><name pos:start="1320:10" pos:end="1320:12">ctx</name></expr>)</condition> <block pos:start="1320:15" pos:end="1322:5">{<block_content pos:start="1321:9" pos:end="1321:30">
        <return pos:start="1321:9" pos:end="1321:30">return <expr pos:start="1321:16" pos:end="1321:29"><name pos:start="1321:16" pos:end="1321:29">EST_ERR_NO_CTX</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1324:5" pos:end="1326:5"><if pos:start="1324:5" pos:end="1326:5">if <condition pos:start="1324:8" pos:end="1324:23">(<expr pos:start="1324:9" pos:end="1324:22"><name pos:start="1324:9" pos:end="1324:14">server</name> <operator pos:start="1324:16" pos:end="1324:17">==</operator> <name pos:start="1324:19" pos:end="1324:22">NULL</name></expr>)</condition> <block pos:start="1324:25" pos:end="1326:5">{<block_content pos:start="1325:9" pos:end="1325:43">
        <return pos:start="1325:9" pos:end="1325:43">return <expr pos:start="1325:16" pos:end="1325:42"><name pos:start="1325:16" pos:end="1325:42">EST_ERR_INVALID_SERVER_NAME</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="1327:5" pos:end="1329:5"><if pos:start="1327:5" pos:end="1329:5">if <condition pos:start="1327:8" pos:end="1327:77">(<expr pos:start="1327:9" pos:end="1327:76"><name pos:start="1327:9" pos:end="1327:30">EST_MAX_SERVERNAME_LEN</name><operator pos:start="1327:31" pos:end="1327:31">-</operator><literal type="number" pos:start="1327:32" pos:end="1327:32">1</literal> <operator pos:start="1327:34" pos:end="1327:34">&lt;</operator> <call pos:start="1327:36" pos:end="1327:76"><name pos:start="1327:36" pos:end="1327:44">strnlen_s</name><argument_list pos:start="1327:45" pos:end="1327:76">(<argument pos:start="1327:46" pos:end="1327:51"><expr pos:start="1327:46" pos:end="1327:51"><name pos:start="1327:46" pos:end="1327:51">server</name></expr></argument>, <argument pos:start="1327:54" pos:end="1327:75"><expr pos:start="1327:54" pos:end="1327:75"><name pos:start="1327:54" pos:end="1327:75">EST_MAX_SERVERNAME_LEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1327:79" pos:end="1329:5">{<block_content pos:start="1328:9" pos:end="1328:43">
        <return pos:start="1328:9" pos:end="1328:43">return <expr pos:start="1328:16" pos:end="1328:42"><name pos:start="1328:16" pos:end="1328:42">EST_ERR_INVALID_SERVER_NAME</name></expr>;</return>
    </block_content>}</block></if></if_stmt>   
    
    <if_stmt pos:start="1331:5" pos:end="1333:5"><if pos:start="1331:5" pos:end="1333:5">if <condition pos:start="1331:8" pos:end="1331:34">(<expr pos:start="1331:9" pos:end="1331:33"><name pos:start="1331:9" pos:end="1331:12">port</name> <operator pos:start="1331:14" pos:end="1331:15">&lt;=</operator> <literal type="number" pos:start="1331:17" pos:end="1331:17">0</literal> <operator pos:start="1331:19" pos:end="1331:20">||</operator> <name pos:start="1331:22" pos:end="1331:25">port</name> <operator pos:start="1331:27" pos:end="1331:27">&gt;</operator> <literal type="number" pos:start="1331:29" pos:end="1331:33">65535</literal></expr>)</condition> <block pos:start="1331:36" pos:end="1333:5">{<block_content pos:start="1332:9" pos:end="1332:40">
        <return pos:start="1332:9" pos:end="1332:40">return <expr pos:start="1332:16" pos:end="1332:39"><name pos:start="1332:16" pos:end="1332:39">EST_ERR_INVALID_PORT_NUM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt pos:start="1335:5" pos:end="1336:38"><expr pos:start="1335:5" pos:end="1336:37"><call pos:start="1335:5" pos:end="1336:37"><name pos:start="1335:5" pos:end="1335:13">strncpy_s</name><argument_list pos:start="1335:14" pos:end="1336:37">(<argument pos:start="1335:15" pos:end="1335:29"><expr pos:start="1335:15" pos:end="1335:29"><name pos:start="1335:15" pos:end="1335:29"><name pos:start="1335:15" pos:end="1335:17">ctx</name><operator pos:start="1335:18" pos:end="1335:19">-&gt;</operator><name pos:start="1335:20" pos:end="1335:29">est_server</name></name></expr></argument>, <argument pos:start="1335:32" pos:end="1335:53"><expr pos:start="1335:32" pos:end="1335:53"><name pos:start="1335:32" pos:end="1335:53">EST_MAX_SERVERNAME_LEN</name></expr></argument>, <argument pos:start="1335:56" pos:end="1335:61"><expr pos:start="1335:56" pos:end="1335:61"><name pos:start="1335:56" pos:end="1335:61">server</name></expr></argument>, 
              <argument pos:start="1336:15" pos:end="1336:36"><expr pos:start="1336:15" pos:end="1336:36"><name pos:start="1336:15" pos:end="1336:36">EST_MAX_SERVERNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1337:5" pos:end="1337:29"><expr pos:start="1337:5" pos:end="1337:28"><name pos:start="1337:5" pos:end="1337:21"><name pos:start="1337:5" pos:end="1337:7">ctx</name><operator pos:start="1337:8" pos:end="1337:9">-&gt;</operator><name pos:start="1337:10" pos:end="1337:21">est_port_num</name></name> <operator pos:start="1337:23" pos:end="1337:23">=</operator> <name pos:start="1337:25" pos:end="1337:28">port</name></expr>;</expr_stmt>
    
    <return pos:start="1339:5" pos:end="1339:24">return <expr pos:start="1339:12" pos:end="1339:23"><name pos:start="1339:12" pos:end="1339:23">EST_ERR_NONE</name></expr>;</return>
</block_content>}</block></function>
</unit>
