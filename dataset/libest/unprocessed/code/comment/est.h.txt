  /
------------------------------------------------------------------   est/est.h - Public API for Enrollment over Secure Transport     November, 2012     Copyright (c) 2012-2014, 2016, 2017 by cisco Systems, Inc.   All rights reserved.  ------------------------------------------------------------------  /
   Allow for runtime checking of the path segment support  /
 These values can be ORed together: /
   This enum allows the logging to be filtered to the   desired detailed level.  This is not a bitmask filter.  If   adding a new logging level, the order should be   maintained based on the urgency of the log message.  /
   The following values define the minimum, maximum, and default   values for the timeout value for the SSL read operations.   These values are used for both EST Client and Proxy operations.  /
   Defines the valid return codes that the application layer's auth credential   callback function can provide.  /
!  EST_CTX     This structure is used to maintain the state of EST operations           on behalf of the application.  A single context can be used to           represent a single instance of either an EST client, EST server,           or EST proxy server.  None of the members on this structure           are publically accessible.  Application should use the functions           provided by the libEST API to manage the context.  A context           is created using one of: est_client_init(), est_server_init(),           or est_proxy_init().  When the context is no longer needed,           the application shoud invoke est_destroy() to release all memory           associated with the context.    /
!  auth_credentials_cb     This typedef defines the prototype of the callback function           that is to reside in the application code.  The application           can register this function callback using the est_client_set_auth_cred_cb()           API function.  This callback is called by the EST client library           when it requires HTTP authentication credentials.           This callback function takes as input a pointer to a EST_HTTP_AUTH_HDR           structure.  The callback function must look at the mode structure           element to determine which type of credentials are required.  If the           mode is set to AUTH_BASIC or AUTH_DIGEST, the callback function must           supply the user and pwd values.  If the mode is set to AUTH_TOKEN, the           the callback must supply the auth_token value.  The auth_token value           must be a base64 encoded string representing the access token.  /
   Begin the public API prototypes  /
   EST proxy specific functions  /
   The following functions are used by an EST client  /
   The following callback entry points must be set by the application   when acting as an EST server or proxy.  /
   The following are helper functions to deal with   the OpenSSL data types for certs, keys, etc.  /
   These are helper macros that an application can use   to initialize/de-initialize OpenSSL.    /
!  est_apps_startup() is used by an application to initialize      the OpenSSL library.  This should be called first prior to using     any other functions in the libEST API. This is a helper function which invokes     CRYPTO_malloc_init(), ERR_load_crypto_strings(), OpenSSL_add_all_algorithms(),     ENGINE_load_builtin_engines(), SSL_library_init(), and SSL_load_error_strings().        void.  /
!  est_apps_shutdown() is used by an application to de-initialize      the OpenSSL library.  This should be called to prevent memory     leaks in the OpenSSL library.  This is a helper function which invokes     CONF_modules_unload(), OBJ_cleanup(), EVP_cleanup(), ENGINE_cleanup(),     CRYPTO_cleanup_all_ex_data(), ERR_remove_thread_state(), and     ERR_free_strings().        void.  /
