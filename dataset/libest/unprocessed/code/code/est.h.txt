est.h
ctx
lvl
enable
ctx
ex_data
ctx
ca_chain
ca_chain_len
cacerts_resp_chain
cacerts_resp_chain_len
cert_format
http_realm
tls_cert
tls_key
ca_chain
ca_chain_len
cacerts_resp_chain
cacerts_resp_chain_len
cert_format
http_realm
tls_cert
tls_key
uid
pwd
ctx
ctx
amode
ah
HA1
ctx
ctx
ctx
ctx
ctx
ctx
ctx
fd
ctx
dh
ctx
csrattrs
crsattrs_len
ctx
seconds
ctx
nid
ctx
ctx
timeout
ctx
ctx
ctx
server
port
ctx
amode
ctx
timeout
ctx
ca_chain
ca_chain_len
cert_format
ctx
uid
pwd
client_cert
private_key
ctx
ctx
server
port
path_segment
ctx
proxy_proto
proxy_server
proxy_port
proxy_auth
username
password
ctx
cn
pkcs7_len
ca_cert_len
new_public_key
ctx
cn
pkcs7_len
new_public_key
ctx
csr
pkcs7_len
priv_key
ctx
cert
pkcs7_len
priv_key
ctx
pkcs7
ctx
csr_data
csr_len
ctx
ca_certs_len
ctx
ca_certs
ctx
nid
ctx
retry_delay
retry_time
ctx
timeout
ctx
ctx
ctx
ctx
strength
uid
pwd
ctx
ctx
ctx
ctx
ctx
required
req
nid
string
chtype
der_ptr
der_len
new_nid
csrattrs
csrattrs_len
der_ptr
der_len
csr
csr_len
csr_format
key
key_len
format
certs_p7
certs_len
pem
auth_credentials
s
ad
arg
pkcs10
p10_len
pkcs7
pkcs7_len
user_id
peer_cert
path_seg
ex_data
pkcs10
p10_len
pkcs7
pkcs7_len
user_id
peer_cert
path_seg
ex_data
EST_CTX
EST_LOG_LEVEL
int
EST_CTX
void
EST_CTX
unsigned
int
unsigned
int
EST_CERT_FORMAT
char
X509
EVP_PKEY
unsigned
int
unsigned
int
EST_CERT_FORMAT
char
X509
EVP_PKEY
char
char
EST_CTX
EST_CTX
EST_HTTP_AUTH_MODE
EST_HTTP_AUTH_HDR
char
EST_CTX
EST_CTX
EST_CTX
EST_CTX
EST_CTX
EST_CTX
EST_CTX
int
EST_CTX
DH
EST_CTX
char
int
EST_CTX
int
EST_CTX
int
EST_CTX
EST_CTX
int
EST_CTX
EST_CTX
EST_CTX
char
int
EST_CTX
EST_HTTP_AUTH_MODE
EST_CTX
int
EST_CTX
unsigned
int
EST_CERT_FORMAT
EST_CTX
char
char
X509
EVP_PKEY
EST_CTX
EST_CTX
char
int
char
EST_CTX
EST_CLIENT_PROXY_PROTO
char
unsigned
unsigned
char
char
EST_CTX
char
int
int
EVP_PKEY
EST_CTX
char
int
EVP_PKEY
EST_CTX
X509_REQ
int
EVP_PKEY
EST_CTX
X509
int
EVP_PKEY
EST_CTX
unsigned
EST_CTX
unsigned
int
EST_CTX
int
EST_CTX
unsigned
EST_CTX
int
EST_CTX
int
time_t
EST_CTX
int
EST_CTX
EST_CTX
EST_CTX
EST_CTX
int
char
char
EST_CTX
EST_CTX
EST_CTX
EST_CTX
EST_CTX
EST_HTTP_AUTH_REQUIRED
X509_REQ
int
void
int
unsigned
int
int
char
int
unsigned
int
unsigned
int
EST_CERT_FORMAT
unsigned
int
int
unsigned
int
unsigned
EST_HTTP_AUTH_HDR
SSL
int
void
unsigned
int
unsigned
int
char
X509
char
void
unsigned
int
unsigned
int
char
X509
char
void
HEADER_EST_H
LIBEST_API
LIBEST_API
LIBEST_API
PATH_SEGMENT_SUPPORT_ENABLED
EST_MAX_FILE_LEN
EST_MAX_SERVERNAME_LEN
EST_PORTNUM_LEN
EST_MAX_SERVERNAME_AND_PORT_LEN
EST_MAX_CLIENT_CERT_LEN
EST_MAX_PATH_SEGMENT_LEN
EST_CLIENT_PROXY_AUTH_NONE
EST_CLIENT_PROXY_AUTH_BASIC
EST_CLIENT_PROXY_AUTH_NTLM
FOREACH_EST_ERROR(E)
GENERATE_ENUM(ENUM)
GENERATE_STRING(STRING)
EST_ERR_NUM_TO_STR(x)
EST_FORMAT_PEM
EST_FORMAT_DER
MAX_REALM
MAX_NONCE
MAX_UIDPWD
MAX_NC
MAX_QOP
MAX_RESPONSE
MIN_CSRATTRS
MAX_CSRATTRS
MIN_ASN1_CSRATTRS
MAX_CSRATTRS_WITHPOP
MAX_TOKEN_ERROR
MAX_TOKEN_ERROR_DESC
MAX_AUTH_TOKEN_LEN
MAX_HTTP_METHOD_LEN
EST_SSL_READ_TIMEOUT_MIN
EST_SSL_READ_TIMEOUT_MAX
EST_SSL_READ_TIMEOUT_DEF
est_apps_startup()
est_apps_shutdown()
  /
------------------------------------------------------------------   est/est.h - Public API for Enrollment over Secure Transport     November, 2012     Copyright (c) 2012-2014, 2016, 2017 by cisco Systems, Inc.   All rights reserved.  ------------------------------------------------------------------  /
   Allow for runtime checking of the path segment support  /
 These values can be ORed together: /
   This enum allows the logging to be filtered to the   desired detailed level.  This is not a bitmask filter.  If   adding a new logging level, the order should be   maintained based on the urgency of the log message.  /
   The following values define the minimum, maximum, and default   values for the timeout value for the SSL read operations.   These values are used for both EST Client and Proxy operations.  /
   Defines the valid return codes that the application layer's auth credential   callback function can provide.  /
!  EST_CTX     This structure is used to maintain the state of EST operations           on behalf of the application.  A single context can be used to           represent a single instance of either an EST client, EST server,           or EST proxy server.  None of the members on this structure           are publically accessible.  Application should use the functions           provided by the libEST API to manage the context.  A context           is created using one of: est_client_init(), est_server_init(),           or est_proxy_init().  When the context is no longer needed,           the application shoud invoke est_destroy() to release all memory           associated with the context.    /
!  auth_credentials_cb     This typedef defines the prototype of the callback function           that is to reside in the application code.  The application           can register this function callback using the est_client_set_auth_cred_cb()           API function.  This callback is called by the EST client library           when it requires HTTP authentication credentials.           This callback function takes as input a pointer to a EST_HTTP_AUTH_HDR           structure.  The callback function must look at the mode structure           element to determine which type of credentials are required.  If the           mode is set to AUTH_BASIC or AUTH_DIGEST, the callback function must           supply the user and pwd values.  If the mode is set to AUTH_TOKEN, the           the callback must supply the auth_token value.  The auth_token value           must be a base64 encoded string representing the access token.  /
   Begin the public API prototypes  /
   EST proxy specific functions  /
   The following functions are used by an EST client  /
   The following callback entry points must be set by the application   when acting as an EST server or proxy.  /
   The following are helper functions to deal with   the OpenSSL data types for certs, keys, etc.  /
   These are helper macros that an application can use   to initialize/de-initialize OpenSSL.    /
!  est_apps_startup() is used by an application to initialize      the OpenSSL library.  This should be called first prior to using     any other functions in the libEST API. This is a helper function which invokes     CRYPTO_malloc_init(), ERR_load_crypto_strings(), OpenSSL_add_all_algorithms(),     ENGINE_load_builtin_engines(), SSL_library_init(), and SSL_load_error_strings().        void.  /
!  est_apps_shutdown() is used by an application to de-initialize      the OpenSSL library.  This should be called to prevent memory     leaks in the OpenSSL library.  This is a helper function which invokes     CONF_modules_unload(), OBJ_cleanup(), EVP_cleanup(), ENGINE_cleanup(),     CRYPTO_cleanup_all_ex_data(), ERR_remove_thread_state(), and     ERR_free_strings().        void.  /
