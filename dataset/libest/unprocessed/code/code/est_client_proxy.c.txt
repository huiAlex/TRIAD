est_client_proxy.c
addr_to_str
tcw_direct_close
tcw_direct_connect
tcw_curl_close
set_blocking_mode
tcw_curl_connect
tcw_connect
tcw_close
snprintf
EST_LOG_INFO
ioctlsocket
curl_easy_init
curl_easy_setopt
strlen
calloc
snprintf
curl_easy_setopt
curl_easy_setopt
curl_easy_setopt
curl_easy_setopt
curl_easy_setopt
curl_easy_setopt
EST_LOG_INFO
curl_easy_perform
curl_easy_getinfo
set_blocking_mode
free
memset
EST_LOG_INFO
addr
str
str_size
port
sock
sock
opts
host
port
sock
sock
blocking
sock
opts
host
port
sock
opts
host
port
sock_fd
sock
 
char
size_t
unsigned
tcw_sock_t
tcw_sock_t
tcw_opts_t
char
unsigned
tcw_sock_t
tcw_sock_t
int
tcw_sock_t
tcw_opts_t
char
unsigned
tcw_sock_t
tcw_opts_t
char
unsigned
SOCK_TYPE
tcw_sock_t
 Use WSAAddressToStringA instead of inet_ntop on Windows as inet_ntop does not   exist on Windows XP.   Can't use `const struct sockaddr ` here because WSAAddressToStringA takes   a LPSOCKADDR.  /
 Use WSAAddressToStringA instead of inet_ntop on Windows as inet_ntop does not   exist on Windows XP.   Can't use `const struct sockaddr ` here because WSAAddressToStringA takes   a LPSOCKADDR.  /
   Establish a direct socket connection with the EST server using   normal system calls  /
   Establish a direct socket connection with the EST server using   normal system calls  /
   Establish a direct socket connection with the EST server using   normal system calls  /
   Establish a socket with the remote server using libcurl. Do not have it   actually send a URL. Leverage libcurl's proxy support to just establish   the connection.  /
   entry point to establish a connection with the remote EST server  /
   entry point to establish a connection with the remote EST server  /
 WIN32 /
       All we want libcurl to do here is establish the connection to       the proxy server.  Once that's done we'll use the socket       as we normally do on a direct connect to the EST server      /
       "http" here is telling libcurl not to wrap whatever data we send in        SSL.       /
       proxy host and port      /
       proxy protocol including HTTP tunnel mode      /
       username and password      /
       no signals generated from libcurl      /
       perform the curl request      /
       retrieve the socket from libcurl      /
 after connection is made, set socket to blocking /
 SOCK_ERR already set /
 SOCK_ERR already set /
 ret and SOCK_ERR already set /
           As per:           https://msdn.microsoft.com/en-us/library/windows/desktop/ms740126(v=vs.85).aspx                     Ioctl and Ioctlsocket/WSAIoctl                     Various C language run-time systems use the IOCTLs for purposes           unrelated to Windows Sockets. As a consequence, the ioctlsocket           function and the WSAIoctl function were defined to handle socket           functions that were performed by IOCTL and fcntl in the Berkeley           Software Distribution.                     Since ioctlsocket is the Windows equivalent of ioctl/fcntl, just           set return type accordingly.          /
 SOCK_ERR is already set /
 SOCK_ERR is already set /
 SOCK_ERR is already set /
           We should not make it this far, but if we do,           log a message as to why this is wrong and return          /
 SOCK_ERR already set /
 Could not resolve host /
 CLOSE_SOCKET() may clobber SOCK_ERR /
