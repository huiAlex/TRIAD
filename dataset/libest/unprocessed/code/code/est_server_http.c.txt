est_server_http.c
pthread_self
mg_get_conn_ssl
sockaddr_to_string
cry
fc
mg_version
mg_get_request_info
mg_strlcpy
mg_strndup
lowercase
mg_strncasecmp
mg_strcasecmp
mg_vsnprintf
mg_snprintf
est_strcspn
est_strspn
skip_quoted
skip
get_header
mg_get_header
should_keep_alive
suggest_connection_header
mg_send_http_error
change_slashes_to_backslashes
to_unicode
path_cannot_disclose_cgi
dlopen
push
wait_until_socket_is_readable
pull
mg_read
mg_write
mg_printf
url_decode
get_request_len
remove_double_dots_and_double_slashes
mg_parse_auth_hdr_basic
mg_parse_auth_hdr_digest
mg_parse_auth_hdr_token
mg_parse_auth_header
mg_send_authorization_request
parse_http_headers
is_valid_http_method
parse_http_message
parse_http_request
read_request
est_mg_handler
handle_request
log_header
log_access
ssl_error
set_ssl_option
reset_per_request_attributes
is_valid_uri
process_new_connection
est_server_handle_request
free_context
mg_stop
mg_start
est_send_csrattr_data
inet_ntop
strncpy_s
inet_ntop
va_start
vsnprintf
va_end
time
sockaddr_to_string
EST_LOG_ERR
EST_LOG_ERR
vsnprintf
va_start
mg_vsnprintf
va_end
strcspn_s
strspn_s
est_strcspn
EST_LOG_INFO
mg_printf
mg_printf
mg_strlcpy
change_slashes_to_backslashes
strnlen_s
memzero_s
MultiByteToWideChar
WideCharToMultiByte
to_unicode
push
va_start
vsnprintf
va_end
est_base64_decode
strstr_s
memzero_s
strncpy_s
strlen
memzero_s
est_base64_decode
EST_LOG_INFO
EST_LOG_INFO
get_request_len
mg_get_header
mg_get_header
strnlen_s
url_decode
remove_double_dots_and_double_slashes
EST_LOG_INFO
est_mg_handler
strftime
sockaddr_to_string
EST_LOG_INFO
log_header
log_header
ERR_get_error
fc
SSL_CTX_set_verify
SSL_CTX_set_session_id_context
SSL_CTX_set_cert_store
SSL_CTX_set_options
SSL_CTX_set_tmp_ecdh
EC_KEY_free
X509_VERIFY_PARAM_new
X509_VERIFY_PARAM_set_depth
X509_VERIFY_PARAM_set_purpose
SSL_CTX_set1_param
X509_VERIFY_PARAM_free
getpeername
EST_LOG_INFO
EST_LOG_INFO
calloc
free
free_context
WSACleanup
WSAStartup
InitializeCriticalSection
conn
buf
len
usa
conn
fmt
ctx
conn
dst
src
n
ptr
len
s
s1
s2
len
s1
s2
conn
buf
buflen
fmt
ap
conn
buf
buflen
fmt
str1
str2
str1
str2
buf
delimiters
whitespace
quotechar
buf
delimiters
ri
name
conn
name
conn
conn
conn
status
reason
fmt
path
path
wbuf
wbuf_len
path
dll_name
flags
fp
sock
ssl
buf
len
conn
fp
conn
buf
len
conn
buf
len
conn
buf
len
conn
fmt
src
src_len
dst
dst_len
is_form_url_encoded
buf
buflen
s
conn
auth_header
ah
conn
auth_header
ah
conn
auth_header
ah
conn
ah
conn
buf
ri
method
buf
len
ri
buf
len
ri
fp
conn
buf
bufsiz
nread
conn
conn
conn
header
conn
ctx
conn
uri
conn
ctx
fd
ctx
ctx
user_data
ctx
csr_data
csr_len
http_ctx
 
char
size_t
 
 
char
 
 
char
char
size_t
char
size_t
char
char
char
size_t
char
char
 
char
size_t
char
va_list
 
char
size_t
char
char
char
char
char
char
char
char
char
char
char
 
char
 
char
 
 
 
int
char
char
char
char
wchar_t
size_t
char
char
int
FILE
SOCKET
SSL
char
int64_t
 
FILE
 
char
int
 
void
size_t
 
void
size_t
 
char
char
int
char
int
int
char
int
char
 
char
EST_HTTP_AUTH_HDR
 
char
EST_HTTP_AUTH_HDR
 
char
EST_HTTP_AUTH_HDR
 
EST_HTTP_AUTH_HDR
 
char
 
char
char
int
 
char
int
 
FILE
 
char
int
int
 
 
 
char
 
 
 
char
 
EST_CTX
int
 
 
void
EST_CTX
char
int
void
HEXTOI(x)
   Performs parsing of HTTP Authentication header from   the client when Basic authentication is used.  /
   Performs parsing of HTTP Authentication header from   the client when Digest authentication is used.  /
   Performs parsing of HTTP Authentication header from   the client when Token(bearer) authentication is used.  /
   This function parses the HTTP Authentication header   from the client.  It will fill in the fields on the   EST_HTTP_AUTH_HDR struct, which are used later for   verifying the user's credentials using either HTTP   Basic or HTTP Digest authentication. The ah parameter   should already be allocated when calling this function.     Return either good, bad, or missing   /
   This function parses the HTTP Authentication header   from the client.  It will fill in the fields on the   EST_HTTP_AUTH_HDR struct, which are used later for   verifying the user's credentials using either HTTP   Basic or HTTP Digest authentication. The ah parameter   should already be allocated when calling this function.     Return either good, bad, or missing   /
   This function is called by the Mongoose code when an   incoming HTTP request is processed.   Returns 0 on success, non-zero if the request wasn't   handled.  /
       Slight deviation from Mongoose behavior here.  We will close the       connection when sending a 202 Accepted response.  We will also       close the connection for any 4xx response, where Mongoose was only       closing for the 401 Unauthorized      /
 will contain both UID and PWD /
       Make sure there's a ':' in the string      /
       did it start with a colon, meaning no userid?      /
       Get the Auth header from the HTTP client       /
        If we're doing digest auth, make sure all the values       were parsed      /
 If we were not able to parse a user ID and we're not       in token auth mode, then make sure we fail the authentication.      /
 EST only allows GET & POST /
 content length html header /
 content type html header /
       Process the request      /
       Set the Session ID context to enable OpenSSL session       reuse, which improves performance.  We set the ID to       ESTxxxxxxxx, where the x values are random numbers      /
       Note that we disable TLS tickets, which is another       way to reuse TLS sessions to avoid all the key exchange       overhead of the TLS handshake.  We've enabled session       reuse above.  But session reuse will not        work when ticket support is enabled on the server.       We may want to look into enabling tickets       in the future, but for now the session reuse       above gives us a performance boost.             The other options set here are to improve forward       secrecty and comply with the EST draft.      /
        Set the ECDH single use parms.  Use the configured       curve, or use prime256v1 as the default.      /
       Setup additional cert checks including CRL, depth       and purpose.      /
 Enable CRL checks /
 Note: the purpose is only checked when the keyusage       value is present in the client's cert /
       Set the single-use DH parameters if the application       has requested this capability.      /
       There should be no need to include the cert chain for the       server's certificate in the TLS Certificate message from       the server.  The reason is the EST draft specifies that       all the subordinate CA certs should be included in the       cacerts message flow.  Hence, the client will already have       the full cert chain.  Therfore, the TLS handshake will only       contain the server's cert, not the full chain.              SSL_CTX_use_certificate_chain_file(ctx->ssl_ctx,                                          ctx->est_ctx->http_cert_file);      /
 accumlate the total amount of time waited /
           check to see if it's time to give up.  If it is, set           things accordingly to close the session down          /
           Continue waiting,           - while there's nothing to read from the socket or             the poll was interrupted by a signal AND           - the master process has not indicated to stop AND           - the waiting for read timeout has not occurred          /
 These modes are not valid at this point 	  nothing to do here. /
 Started with a userid,            Parse the username and password, which are separated by a ":"          /
Copy the token into the auth header structure. /
 Make sure server is configured for digest auth /
 Make sure server is configured for basic auth /
 Make sure server is configured for bearer(token) auth /
 Only Basic, Digest and Bearer Token authentication are supported /
           Save the user ID on the connection context.           We will want to pass this to the CA later.          /
           At this point, Content-Length value has already been           error checked and is guaranteed to be within the correct           range.  Obtain the length, allocate the buffer for the           body, and read it in.          /
 Make sure the buffer is null terminated /
 Setup the user selected curve /
 Default to prime256 curve /
 	  Set the application specific handler for 	  providing the SRP parameters during user  	  authentication. 	 /
 	  Set the TLS cipher suites that should be allowed. 	  This disables anonymous and null ciphers 	 /
 This should never happen, not sure what would cause this /
           EST require TLS,  Setup the TLS tunnel          /
           Send HTTP 200 header          /
           Send the CSR in the body          /
 Send a 204 response indicating the server doesn't have a CSR /
 Nothing to do, it's a graceful shutdown /
 	      More data may be coming, change nread to zero 	      so Mongoose will attempt to read more data 	      from the peer.  This would occur if the peer 	      initiated an SSL renegotation. 	     /
 	      For all other errors, simply log the error 	      and make sure nread is -1 to indicate an 	      error to the function above us. 	     /
               Ensure that the content-length value is a size that               the EST code is willing to accept              /
 just a password /
 We got neither userid nor password /
 n == 0. retry /
 OpenSSL docs say to call shutdown again for this case /
 Nothing to do, shutdown worked /
 Log an error /
 Some unknown OpenSSL error, dump the  		      OpenSSL error log to learn more about this /
